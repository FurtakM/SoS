// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3631 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5487 0 1
  44: PPUSH
  45: CALL 937 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5487 0 1
  56: PPUSH
  57: CALL 11793 0 1
// Multiplayer_Start ;
  61: CALL 7207 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 40
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 40
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7326 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 7753 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 39
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: IN
 263: IFFALSE 609
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
 273: PPUSH
 274: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 275: LD_INT 35
 277: PPUSH
 278: CALL_OW 67
// until not blockThread ;
 282: LD_EXP 6
 286: NOT
 287: IFFALSE 275
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 4
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: LD_OWVAR 67
 312: ARRAY
 313: ST_TO_ADDR
// for i := 1 to 8 do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: DOUBLE
 320: LD_INT 1
 322: DEC
 323: ST_TO_ADDR
 324: LD_INT 8
 326: PUSH
 327: FOR_TO
 328: IFFALSE 607
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 1
 339: ARRAY
 340: PUSH
 341: LD_INT 2
 343: EQUAL
 344: PUSH
 345: LD_EXP 32
 349: PUSH
 350: LD_VAR 0 1
 354: ARRAY
 355: NOT
 356: AND
 357: IFFALSE 605
// begin if i = your_side then
 359: LD_VAR 0 1
 363: PUSH
 364: LD_OWVAR 2
 368: EQUAL
 369: IFFALSE 381
// CenterNowOnXY ( 112 , 172 ) ;
 371: LD_INT 112
 373: PPUSH
 374: LD_INT 172
 376: PPUSH
 377: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 381: LD_INT 0
 383: PPUSH
 384: LD_VAR 0 5
 388: PPUSH
 389: CALL_OW 382
// un := CreateHuman ;
 393: LD_ADDR_VAR 0 3
 397: PUSH
 398: CALL_OW 44
 402: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 403: LD_VAR 0 3
 407: PPUSH
 408: LD_INT 25
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 49
// for j := 1 to 2 do
 418: LD_ADDR_VAR 0 2
 422: PUSH
 423: DOUBLE
 424: LD_INT 1
 426: DEC
 427: ST_TO_ADDR
 428: LD_INT 2
 430: PUSH
 431: FOR_TO
 432: IFFALSE 473
// begin PrepareMechanic ( false , skill ) ;
 434: LD_INT 0
 436: PPUSH
 437: LD_VAR 0 5
 441: PPUSH
 442: CALL_OW 383
// un := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 25
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 431
 473: POP
 474: POP
// for j := 1 to 2 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 2
 487: PUSH
 488: FOR_TO
 489: IFFALSE 603
// begin uc_side := i ;
 491: LD_ADDR_OWVAR 20
 495: PUSH
 496: LD_VAR 0 1
 500: ST_TO_ADDR
// uc_nation := nation_russian ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 3
 508: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 509: LD_INT 22
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: LD_INT 44
 520: PPUSH
 521: LD_INT 50
 523: PPUSH
 524: CALL 19735 0 5
// veh := CreateVehicle ;
 528: LD_ADDR_VAR 0 4
 532: PUSH
 533: CALL_OW 45
 537: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 538: LD_VAR 0 4
 542: PPUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 550: LD_INT 0
 552: PPUSH
 553: LD_VAR 0 5
 557: PPUSH
 558: CALL_OW 383
// un := CreateHuman ;
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_INT 25
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 587: LD_VAR 0 3
 591: PPUSH
 592: LD_VAR 0 4
 596: PPUSH
 597: CALL_OW 52
// end ;
 601: GO 488
 603: POP
 604: POP
// end ;
 605: GO 327
 607: POP
 608: POP
// end ;
 609: PPOPN 5
 611: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 612: LD_EXP 39
 616: PUSH
 617: LD_INT 12
 619: PUSH
 620: LD_INT 14
 622: PUSH
 623: LD_INT 16
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: LD_OWVAR 67
 635: ARRAY
 636: PUSH
 637: LD_INT 32
 639: PUSH
 640: LD_INT 36
 642: PUSH
 643: LD_INT 40
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: LD_OWVAR 67
 655: ARRAY
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: IN
 661: IFFALSE 934
 663: GO 665
 665: DISABLE
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
 672: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 673: LD_INT 35
 675: PPUSH
 676: CALL_OW 67
// until not blockThread ;
 680: LD_EXP 6
 684: NOT
 685: IFFALSE 673
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 687: LD_ADDR_VAR 0 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 4
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// for i := 1 to 8 do
 712: LD_ADDR_VAR 0 1
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_INT 8
 724: PUSH
 725: FOR_TO
 726: IFFALSE 932
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 728: LD_EXP 15
 732: PUSH
 733: LD_VAR 0 1
 737: ARRAY
 738: PUSH
 739: LD_INT 1
 741: EQUAL
 742: PUSH
 743: LD_EXP 32
 747: PUSH
 748: LD_VAR 0 1
 752: ARRAY
 753: NOT
 754: AND
 755: IFFALSE 930
// begin if i = your_side then
 757: LD_VAR 0 1
 761: PUSH
 762: LD_OWVAR 2
 766: EQUAL
 767: IFFALSE 779
// CenterNowOnXY ( 112 , 172 ) ;
 769: LD_INT 112
 771: PPUSH
 772: LD_INT 172
 774: PPUSH
 775: CALL_OW 86
// for j := 1 to 3 do
 779: LD_ADDR_VAR 0 2
 783: PUSH
 784: DOUBLE
 785: LD_INT 1
 787: DEC
 788: ST_TO_ADDR
 789: LD_INT 3
 791: PUSH
 792: FOR_TO
 793: IFFALSE 928
// begin uc_side := i ;
 795: LD_ADDR_OWVAR 20
 799: PUSH
 800: LD_VAR 0 1
 804: ST_TO_ADDR
// uc_nation := nation_russian ;
 805: LD_ADDR_OWVAR 21
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 813: LD_INT 22
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_INT 44
 824: PUSH
 825: LD_INT 43
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_INT 2
 839: MOD
 840: PUSH
 841: LD_INT 1
 843: PLUS
 844: ARRAY
 845: PPUSH
 846: LD_INT 50
 848: PPUSH
 849: CALL 19735 0 5
// veh := CreateVehicle ;
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: CALL_OW 45
 862: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 863: LD_VAR 0 4
 867: PPUSH
 868: LD_INT 5
 870: PPUSH
 871: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_VAR 0 5
 882: PPUSH
 883: CALL_OW 383
// un := CreateHuman ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: CALL_OW 44
 896: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 897: LD_VAR 0 4
 901: PPUSH
 902: LD_INT 25
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 912: LD_VAR 0 3
 916: PPUSH
 917: LD_VAR 0 4
 921: PPUSH
 922: CALL_OW 52
// end ;
 926: GO 792
 928: POP
 929: POP
// end ;
 930: GO 725
 932: POP
 933: POP
// end ; end_of_file
 934: PPOPN 5
 936: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
 943: PPUSH
// enemySide := side ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_VAR 0 1
 953: ST_TO_ADDR
// enemyUnits := [ ] ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: EMPTY
 960: ST_TO_ADDR
// enemyMobile := [ ] ;
 961: LD_ADDR_EXP 10
 965: PUSH
 966: EMPTY
 967: ST_TO_ADDR
// enemyForestGuard := [ ] ;
 968: LD_ADDR_EXP 11
 972: PUSH
 973: EMPTY
 974: ST_TO_ADDR
// arAttackersInf := [ ] ;
 975: LD_ADDR_EXP 13
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
 982: LD_ADDR_VAR 0 5
 986: PUSH
 987: LD_INT 4
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: LD_INT 8
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_OWVAR 67
1005: ARRAY
1006: ST_TO_ADDR
// uc_side := side ;
1007: LD_ADDR_OWVAR 20
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// uc_nation := nation_arabian ;
1017: LD_ADDR_OWVAR 21
1021: PUSH
1022: LD_INT 2
1024: ST_TO_ADDR
// for i := 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 5
1037: PUSH
1038: LD_INT 7
1040: PUSH
1041: LD_INT 8
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: PUSH
1055: FOR_TO
1056: IFFALSE 1143
// begin PrepareSoldier ( false , skill ) ;
1058: LD_INT 0
1060: PPUSH
1061: LD_VAR 0 5
1065: PPUSH
1066: CALL_OW 381
// un := CreateHuman ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: CALL_OW 44
1079: ST_TO_ADDR
// if i mod 2 = 0 then
1080: LD_VAR 0 3
1084: PUSH
1085: LD_INT 2
1087: MOD
1088: PUSH
1089: LD_INT 0
1091: EQUAL
1092: IFFALSE 1106
// SetClass ( un , class_mortar ) ;
1094: LD_VAR 0 4
1098: PPUSH
1099: LD_INT 8
1101: PPUSH
1102: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1106: LD_ADDR_EXP 11
1110: PUSH
1111: LD_EXP 11
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: CALL 52586 0 2
1125: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1126: LD_VAR 0 4
1130: PPUSH
1131: LD_INT 17
1133: PPUSH
1134: LD_INT 0
1136: PPUSH
1137: CALL_OW 49
// end ;
1141: GO 1055
1143: POP
1144: POP
// PrepareScientist ( false , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 5
1152: PPUSH
1153: CALL_OW 384
// un := CreateHuman ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: CALL_OW 44
1166: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1167: LD_ADDR_EXP 11
1171: PUSH
1172: LD_EXP 11
1176: PPUSH
1177: LD_VAR 0 4
1181: PPUSH
1182: CALL 52586 0 2
1186: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1187: LD_VAR 0 4
1191: PPUSH
1192: LD_INT 17
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: DOUBLE
1208: LD_INT 1
1210: DEC
1211: ST_TO_ADDR
1212: LD_INT 2
1214: PUSH
1215: LD_INT 3
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_OWVAR 67
1230: ARRAY
1231: PUSH
1232: FOR_TO
1233: IFFALSE 1369
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1235: LD_INT 14
1237: PPUSH
1238: LD_INT 2
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 27
1246: PPUSH
1247: LD_INT 100
1249: PPUSH
1250: CALL 19735 0 5
// veh := CreateVehicle ;
1254: LD_ADDR_VAR 0 6
1258: PUSH
1259: CALL_OW 45
1263: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1264: LD_ADDR_EXP 11
1268: PUSH
1269: LD_EXP 11
1273: PPUSH
1274: LD_VAR 0 6
1278: PPUSH
1279: CALL 52586 0 2
1283: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1284: LD_VAR 0 6
1288: PPUSH
1289: LD_INT 5
1291: PPUSH
1292: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1296: LD_INT 0
1298: PPUSH
1299: LD_VAR 0 5
1303: PPUSH
1304: CALL_OW 383
// un := CreateHuman ;
1308: LD_ADDR_VAR 0 4
1312: PUSH
1313: CALL_OW 44
1317: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1318: LD_ADDR_EXP 11
1322: PUSH
1323: LD_EXP 11
1327: PPUSH
1328: LD_VAR 0 4
1332: PPUSH
1333: CALL 52586 0 2
1337: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1338: LD_VAR 0 6
1342: PPUSH
1343: LD_INT 18
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1353: LD_VAR 0 4
1357: PPUSH
1358: LD_VAR 0 6
1362: PPUSH
1363: CALL_OW 52
// end ;
1367: GO 1232
1369: POP
1370: POP
// for i := 1 to 2 do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_INT 2
1383: PUSH
1384: FOR_TO
1385: IFFALSE 1468
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1387: LD_INT 14
1389: PPUSH
1390: LD_INT 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 32
1398: PPUSH
1399: LD_INT 100
1401: PPUSH
1402: CALL 19735 0 5
// veh := CreateVehicle ;
1406: LD_ADDR_VAR 0 6
1410: PUSH
1411: CALL_OW 45
1415: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1416: LD_VAR 0 6
1420: PPUSH
1421: LD_INT 2
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: CALL_OW 12
1431: PPUSH
1432: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1436: LD_VAR 0 6
1440: PPUSH
1441: LD_INT 22
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1451: LD_VAR 0 6
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 100
1461: PPUSH
1462: CALL_OW 290
// end ;
1466: GO 1384
1468: POP
1469: POP
// end ;
1470: LD_VAR 0 2
1474: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1475: LD_INT 0
1477: PPUSH
1478: PPUSH
1479: PPUSH
1480: PPUSH
1481: PPUSH
1482: PPUSH
// v := convoyWave div 10 ;
1483: LD_ADDR_VAR 0 6
1487: PUSH
1488: LD_EXP 39
1492: PUSH
1493: LD_INT 10
1495: DIV
1496: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1497: LD_ADDR_VAR 0 5
1501: PUSH
1502: LD_INT 4
1504: PUSH
1505: LD_INT 5
1507: PUSH
1508: LD_INT 6
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: PUSH
1516: LD_OWVAR 67
1520: ARRAY
1521: PUSH
1522: LD_VAR 0 6
1526: PLUS
1527: ST_TO_ADDR
// if skill > 10 then
1528: LD_VAR 0 5
1532: PUSH
1533: LD_INT 10
1535: GREATER
1536: IFFALSE 1546
// skill := 10 ;
1538: LD_ADDR_VAR 0 5
1542: PUSH
1543: LD_INT 10
1545: ST_TO_ADDR
// if v > 8 then
1546: LD_VAR 0 6
1550: PUSH
1551: LD_INT 8
1553: GREATER
1554: IFFALSE 1564
// v := 8 ;
1556: LD_ADDR_VAR 0 6
1560: PUSH
1561: LD_INT 8
1563: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1564: LD_ADDR_VAR 0 2
1568: PUSH
1569: DOUBLE
1570: LD_INT 1
1572: DEC
1573: ST_TO_ADDR
1574: LD_INT 2
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_OWVAR 67
1592: ARRAY
1593: PUSH
1594: LD_VAR 0 6
1598: PLUS
1599: PUSH
1600: FOR_TO
1601: IFFALSE 1780
// begin uc_side := enemySide ;
1603: LD_ADDR_OWVAR 20
1607: PUSH
1608: LD_EXP 12
1612: ST_TO_ADDR
// uc_nation := nation_arabian ;
1613: LD_ADDR_OWVAR 21
1617: PUSH
1618: LD_INT 2
1620: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1621: LD_INT 14
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: LD_INT 1
1629: PPUSH
1630: LD_INT 27
1632: PUSH
1633: LD_INT 25
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_VAR 0 2
1644: PUSH
1645: LD_INT 2
1647: MOD
1648: PUSH
1649: LD_INT 1
1651: PLUS
1652: ARRAY
1653: PPUSH
1654: LD_INT 100
1656: PPUSH
1657: CALL 19735 0 5
// veh := CreateVehicle ;
1661: LD_ADDR_VAR 0 3
1665: PUSH
1666: CALL_OW 45
1670: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1671: LD_ADDR_EXP 10
1675: PUSH
1676: LD_EXP 10
1680: PPUSH
1681: LD_VAR 0 3
1685: PPUSH
1686: CALL 52586 0 2
1690: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1691: LD_VAR 0 3
1695: PPUSH
1696: LD_INT 2
1698: PPUSH
1699: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_VAR 0 5
1710: PPUSH
1711: CALL_OW 383
// un := CreateHuman ;
1715: LD_ADDR_VAR 0 4
1719: PUSH
1720: CALL_OW 44
1724: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1725: LD_INT 35
1727: PPUSH
1728: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1732: LD_VAR 0 3
1736: PPUSH
1737: LD_INT 23
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
1747: IFFALSE 1725
// PlaceHumanInUnit ( un , veh ) ;
1749: LD_VAR 0 4
1753: PPUSH
1754: LD_VAR 0 3
1758: PPUSH
1759: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1763: LD_VAR 0 3
1767: PPUSH
1768: LD_INT 104
1770: PPUSH
1771: LD_INT 18
1773: PPUSH
1774: CALL_OW 111
// end ;
1778: GO 1600
1780: POP
1781: POP
// end ;
1782: LD_VAR 0 1
1786: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1787: LD_INT 0
1789: PPUSH
1790: PPUSH
1791: PPUSH
1792: PPUSH
1793: PPUSH
1794: PPUSH
// v := convoyWave div 10 ;
1795: LD_ADDR_VAR 0 6
1799: PUSH
1800: LD_EXP 39
1804: PUSH
1805: LD_INT 10
1807: DIV
1808: ST_TO_ADDR
// if v > 8 then
1809: LD_VAR 0 6
1813: PUSH
1814: LD_INT 8
1816: GREATER
1817: IFFALSE 1827
// v := 8 ;
1819: LD_ADDR_VAR 0 6
1823: PUSH
1824: LD_INT 8
1826: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1827: LD_ADDR_VAR 0 2
1831: PUSH
1832: DOUBLE
1833: LD_INT 1
1835: DEC
1836: ST_TO_ADDR
1837: LD_INT 3
1839: PUSH
1840: LD_INT 4
1842: PUSH
1843: LD_INT 5
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_OWVAR 67
1855: ARRAY
1856: PUSH
1857: LD_VAR 0 6
1861: PLUS
1862: PUSH
1863: FOR_TO
1864: IFFALSE 2047
// begin uc_side := enemySide ;
1866: LD_ADDR_OWVAR 20
1870: PUSH
1871: LD_EXP 12
1875: ST_TO_ADDR
// uc_nation := nation_arabian ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 2
1883: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1884: LD_INT 14
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 27
1895: PUSH
1896: LD_INT 25
1898: PUSH
1899: LD_INT 26
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: LD_VAR 0 2
1911: PUSH
1912: LD_INT 3
1914: MOD
1915: PUSH
1916: LD_INT 1
1918: PLUS
1919: ARRAY
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL 19735 0 5
// veh := CreateVehicle ;
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: CALL_OW 45
1937: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1938: LD_ADDR_EXP 10
1942: PUSH
1943: LD_EXP 10
1947: PPUSH
1948: LD_VAR 0 3
1952: PPUSH
1953: CALL 52586 0 2
1957: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1970: LD_INT 0
1972: PPUSH
1973: LD_VAR 0 5
1977: PPUSH
1978: CALL_OW 383
// un := CreateHuman ;
1982: LD_ADDR_VAR 0 4
1986: PUSH
1987: CALL_OW 44
1991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1992: LD_INT 35
1994: PPUSH
1995: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
1999: LD_VAR 0 3
2003: PPUSH
2004: LD_INT 14
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
2014: IFFALSE 1992
// PlaceHumanInUnit ( un , veh ) ;
2016: LD_VAR 0 4
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 151
2037: PPUSH
2038: LD_INT 28
2040: PPUSH
2041: CALL_OW 111
// end ;
2045: GO 1863
2047: POP
2048: POP
// end ;
2049: LD_VAR 0 1
2053: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2054: LD_INT 0
2056: PPUSH
2057: PPUSH
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2062: LD_ADDR_VAR 0 6
2066: PUSH
2067: LD_INT 4
2069: PUSH
2070: LD_INT 5
2072: PUSH
2073: LD_INT 7
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: LIST
2080: PUSH
2081: LD_OWVAR 67
2085: ARRAY
2086: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2087: LD_ADDR_VAR 0 5
2091: PUSH
2092: LD_INT 15
2094: PPUSH
2095: LD_INT 0
2097: PPUSH
2098: CALL_OW 517
2102: ST_TO_ADDR
// uc_side := enemySide ;
2103: LD_ADDR_OWVAR 20
2107: PUSH
2108: LD_EXP 12
2112: ST_TO_ADDR
// uc_nation := nation_arabian ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_INT 2
2120: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2121: LD_INT 0
2123: PPUSH
2124: LD_VAR 0 6
2128: PPUSH
2129: CALL_OW 383
// un := CreateHuman ;
2133: LD_ADDR_VAR 0 3
2137: PUSH
2138: CALL_OW 44
2142: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2143: LD_INT 14
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 26
2154: PPUSH
2155: LD_INT 100
2157: PPUSH
2158: CALL 19735 0 5
// veh := CreateVehicle ;
2162: LD_ADDR_VAR 0 4
2166: PUSH
2167: CALL_OW 45
2171: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2172: LD_VAR 0 4
2176: PPUSH
2177: LD_INT 4
2179: PPUSH
2180: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2184: LD_INT 35
2186: PPUSH
2187: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2191: LD_VAR 0 4
2195: PPUSH
2196: LD_INT 14
2198: PPUSH
2199: LD_INT 0
2201: PPUSH
2202: CALL_OW 49
2206: IFFALSE 2184
// PlaceHumanInUnit ( un , veh ) ;
2208: LD_VAR 0 3
2212: PPUSH
2213: LD_VAR 0 4
2217: PPUSH
2218: CALL_OW 52
// for i := 1 to tmp [ 1 ] do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: DOUBLE
2228: LD_INT 1
2230: DEC
2231: ST_TO_ADDR
2232: LD_VAR 0 5
2236: PUSH
2237: LD_INT 1
2239: ARRAY
2240: PUSH
2241: FOR_TO
2242: IFFALSE 2288
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2244: LD_VAR 0 4
2248: PPUSH
2249: LD_VAR 0 5
2253: PUSH
2254: LD_INT 1
2256: ARRAY
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: PPUSH
2264: LD_VAR 0 5
2268: PUSH
2269: LD_INT 2
2271: ARRAY
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_INT 7
2281: PPUSH
2282: CALL 74657 0 4
2286: GO 2241
2288: POP
2289: POP
// repeat wait ( 0 0$1 ) ;
2290: LD_INT 35
2292: PPUSH
2293: CALL_OW 67
// if IsDead ( veh ) then
2297: LD_VAR 0 4
2301: PPUSH
2302: CALL_OW 301
2306: IFFALSE 2310
// exit ;
2308: GO 2383
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2310: LD_INT 16
2312: PPUSH
2313: LD_INT 22
2315: PUSH
2316: LD_EXP 12
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PPUSH
2325: CALL_OW 70
2329: PUSH
2330: LD_VAR 0 4
2334: PPUSH
2335: CALL_OW 314
2339: NOT
2340: OR
2341: PUSH
2342: LD_VAR 0 3
2346: PPUSH
2347: CALL_OW 314
2351: NOT
2352: OR
2353: IFFALSE 2290
// forestIsCleared := true ;
2355: LD_ADDR_EXP 7
2359: PUSH
2360: LD_INT 1
2362: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2363: LD_ADDR_EXP 10
2367: PUSH
2368: LD_EXP 10
2372: PPUSH
2373: LD_VAR 0 4
2377: PPUSH
2378: CALL 52586 0 2
2382: ST_TO_ADDR
// end ;
2383: LD_VAR 0 1
2387: RET
// export function SendWestGroup ; var i , un , skill ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 3
2401: PUSH
2402: LD_INT 5
2404: PUSH
2405: LD_INT 7
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: PUSH
2413: LD_OWVAR 67
2417: ARRAY
2418: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 3
2431: PUSH
2432: LD_INT 4
2434: PUSH
2435: LD_INT 5
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PUSH
2443: LD_OWVAR 67
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2575
// begin uc_side := enemySide ;
2452: LD_ADDR_OWVAR 20
2456: PUSH
2457: LD_EXP 12
2461: ST_TO_ADDR
// uc_nation := nation_arabian ;
2462: LD_ADDR_OWVAR 21
2466: PUSH
2467: LD_INT 2
2469: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2470: LD_INT 0
2472: PPUSH
2473: LD_VAR 0 4
2477: PPUSH
2478: CALL_OW 381
// un := CreateHuman ;
2482: LD_ADDR_VAR 0 3
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// if i mod 3 = 0 then
2492: LD_VAR 0 2
2496: PUSH
2497: LD_INT 3
2499: MOD
2500: PUSH
2501: LD_INT 0
2503: EQUAL
2504: IFFALSE 2518
// SetClass ( un , class_mortar ) ;
2506: LD_VAR 0 3
2510: PPUSH
2511: LD_INT 8
2513: PPUSH
2514: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2518: LD_ADDR_EXP 9
2522: PUSH
2523: LD_EXP 9
2527: PPUSH
2528: LD_VAR 0 3
2532: PPUSH
2533: CALL 52586 0 2
2537: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2538: LD_VAR 0 3
2542: PPUSH
2543: LD_INT 24
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: CALL_OW 49
// result := Join ( result , un ) ;
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: LD_VAR 0 1
2562: PPUSH
2563: LD_VAR 0 3
2567: PPUSH
2568: CALL 52586 0 2
2572: ST_TO_ADDR
// end ;
2573: GO 2449
2575: POP
2576: POP
// PrepareScientist ( false , skill ) ;
2577: LD_INT 0
2579: PPUSH
2580: LD_VAR 0 4
2584: PPUSH
2585: CALL_OW 384
// un := CreateHuman ;
2589: LD_ADDR_VAR 0 3
2593: PUSH
2594: CALL_OW 44
2598: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2599: LD_ADDR_EXP 9
2603: PUSH
2604: LD_EXP 9
2608: PPUSH
2609: LD_VAR 0 3
2613: PPUSH
2614: CALL 52586 0 2
2618: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 24
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 49
// result := Join ( result , un ) ;
2634: LD_ADDR_VAR 0 1
2638: PUSH
2639: LD_VAR 0 1
2643: PPUSH
2644: LD_VAR 0 3
2648: PPUSH
2649: CALL 52586 0 2
2653: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2654: LD_VAR 0 1
2658: PPUSH
2659: LD_INT 24
2661: PPUSH
2662: LD_INT 37
2664: PPUSH
2665: CALL_OW 114
// end ;
2669: LD_VAR 0 1
2673: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
2680: PPUSH
2681: PPUSH
// v := convoyWave div 10 ;
2682: LD_ADDR_VAR 0 6
2686: PUSH
2687: LD_EXP 39
2691: PUSH
2692: LD_INT 10
2694: DIV
2695: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2696: LD_ADDR_VAR 0 5
2700: PUSH
2701: LD_INT 4
2703: PUSH
2704: LD_INT 5
2706: PUSH
2707: LD_INT 6
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: LIST
2714: PUSH
2715: LD_OWVAR 67
2719: ARRAY
2720: PUSH
2721: LD_VAR 0 6
2725: PLUS
2726: ST_TO_ADDR
// if skill > 10 then
2727: LD_VAR 0 5
2731: PUSH
2732: LD_INT 10
2734: GREATER
2735: IFFALSE 2745
// skill := 10 ;
2737: LD_ADDR_VAR 0 5
2741: PUSH
2742: LD_INT 10
2744: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2745: LD_ADDR_VAR 0 2
2749: PUSH
2750: DOUBLE
2751: LD_INT 1
2753: DEC
2754: ST_TO_ADDR
2755: LD_INT 2
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: LIST
2768: PUSH
2769: LD_OWVAR 67
2773: ARRAY
2774: PUSH
2775: FOR_TO
2776: IFFALSE 2979
// begin uc_side := enemySide ;
2778: LD_ADDR_OWVAR 20
2782: PUSH
2783: LD_EXP 12
2787: ST_TO_ADDR
// uc_nation := nation_arabian ;
2788: LD_ADDR_OWVAR 21
2792: PUSH
2793: LD_INT 2
2795: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2796: LD_INT 14
2798: PPUSH
2799: LD_INT 1
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_INT 27
2807: PUSH
2808: LD_INT 30
2810: PUSH
2811: LD_INT 23
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: LIST
2818: PUSH
2819: LD_VAR 0 2
2823: PUSH
2824: LD_INT 3
2826: MOD
2827: PUSH
2828: LD_INT 1
2830: PLUS
2831: ARRAY
2832: PPUSH
2833: LD_INT 100
2835: PPUSH
2836: CALL 19735 0 5
// veh := CreateVehicle ;
2840: LD_ADDR_VAR 0 3
2844: PUSH
2845: CALL_OW 45
2849: ST_TO_ADDR
// result := Join ( result , veh ) ;
2850: LD_ADDR_VAR 0 1
2854: PUSH
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 3
2864: PPUSH
2865: CALL 52586 0 2
2869: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2870: LD_VAR 0 3
2874: PPUSH
2875: LD_INT 4
2877: PPUSH
2878: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2882: LD_INT 0
2884: PPUSH
2885: LD_VAR 0 5
2889: PPUSH
2890: CALL_OW 383
// un := CreateHuman ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: CALL_OW 44
2903: ST_TO_ADDR
// result := Join ( result , un ) ;
2904: LD_ADDR_VAR 0 1
2908: PUSH
2909: LD_VAR 0 1
2913: PPUSH
2914: LD_VAR 0 4
2918: PPUSH
2919: CALL 52586 0 2
2923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2924: LD_INT 35
2926: PPUSH
2927: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2931: LD_VAR 0 3
2935: PPUSH
2936: LD_INT 14
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
2946: IFFALSE 2924
// PlaceHumanInUnit ( un , veh ) ;
2948: LD_VAR 0 4
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_INT 159
2969: PPUSH
2970: LD_INT 53
2972: PPUSH
2973: CALL_OW 111
// end ;
2977: GO 2775
2979: POP
2980: POP
// end ;
2981: LD_VAR 0 1
2985: RET
// export function SendEastGroup ; var i , un , skill ; begin
2986: LD_INT 0
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: LD_INT 7
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: LIST
3010: PUSH
3011: LD_OWVAR 67
3015: ARRAY
3016: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3017: LD_ADDR_VAR 0 2
3021: PUSH
3022: DOUBLE
3023: LD_INT 1
3025: DEC
3026: ST_TO_ADDR
3027: LD_INT 4
3029: PUSH
3030: LD_INT 5
3032: PUSH
3033: LD_INT 6
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PUSH
3047: FOR_TO
3048: IFFALSE 3153
// begin uc_side := enemySide ;
3050: LD_ADDR_OWVAR 20
3054: PUSH
3055: LD_EXP 12
3059: ST_TO_ADDR
// uc_nation := nation_arabian ;
3060: LD_ADDR_OWVAR 21
3064: PUSH
3065: LD_INT 2
3067: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3068: LD_INT 0
3070: PPUSH
3071: LD_VAR 0 4
3075: PPUSH
3076: CALL_OW 381
// un := CreateHuman ;
3080: LD_ADDR_VAR 0 3
3084: PUSH
3085: CALL_OW 44
3089: ST_TO_ADDR
// if i mod 3 = 0 then
3090: LD_VAR 0 2
3094: PUSH
3095: LD_INT 3
3097: MOD
3098: PUSH
3099: LD_INT 0
3101: EQUAL
3102: IFFALSE 3116
// SetClass ( un , class_mortar ) ;
3104: LD_VAR 0 3
3108: PPUSH
3109: LD_INT 8
3111: PPUSH
3112: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3116: LD_VAR 0 3
3120: PPUSH
3121: LD_INT 26
3123: PPUSH
3124: LD_INT 0
3126: PPUSH
3127: CALL_OW 49
// result := Join ( result , un ) ;
3131: LD_ADDR_VAR 0 1
3135: PUSH
3136: LD_VAR 0 1
3140: PPUSH
3141: LD_VAR 0 3
3145: PPUSH
3146: CALL 52586 0 2
3150: ST_TO_ADDR
// end ;
3151: GO 3047
3153: POP
3154: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3155: LD_VAR 0 1
3159: PPUSH
3160: LD_INT 219
3162: PPUSH
3163: LD_INT 168
3165: PPUSH
3166: CALL_OW 114
// end ;
3170: LD_VAR 0 1
3174: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3175: LD_INT 0
3177: PPUSH
3178: PPUSH
3179: PPUSH
3180: PPUSH
3181: PPUSH
// v := convoyWave div 10 ;
3182: LD_ADDR_VAR 0 5
3186: PUSH
3187: LD_EXP 39
3191: PUSH
3192: LD_INT 10
3194: DIV
3195: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3196: LD_ADDR_VAR 0 4
3200: PUSH
3201: LD_INT 4
3203: PUSH
3204: LD_INT 5
3206: PUSH
3207: LD_INT 6
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_OWVAR 67
3219: ARRAY
3220: PUSH
3221: LD_VAR 0 5
3225: PLUS
3226: ST_TO_ADDR
// if skill > 10 then
3227: LD_VAR 0 4
3231: PUSH
3232: LD_INT 10
3234: GREATER
3235: IFFALSE 3245
// skill := 10 ;
3237: LD_ADDR_VAR 0 4
3241: PUSH
3242: LD_INT 10
3244: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: DOUBLE
3251: LD_INT 1
3253: DEC
3254: ST_TO_ADDR
3255: LD_INT 3
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: LD_INT 5
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: PUSH
3269: LD_OWVAR 67
3273: ARRAY
3274: PUSH
3275: FOR_TO
3276: IFFALSE 3381
// begin uc_side := enemySide ;
3278: LD_ADDR_OWVAR 20
3282: PUSH
3283: LD_EXP 12
3287: ST_TO_ADDR
// uc_nation := nation_arabian ;
3288: LD_ADDR_OWVAR 21
3292: PUSH
3293: LD_INT 2
3295: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3296: LD_INT 0
3298: PPUSH
3299: LD_VAR 0 4
3303: PPUSH
3304: CALL_OW 381
// un := CreateHuman ;
3308: LD_ADDR_VAR 0 3
3312: PUSH
3313: CALL_OW 44
3317: ST_TO_ADDR
// if i mod 3 = 0 then
3318: LD_VAR 0 2
3322: PUSH
3323: LD_INT 3
3325: MOD
3326: PUSH
3327: LD_INT 0
3329: EQUAL
3330: IFFALSE 3344
// SetClass ( un , class_mortar ) ;
3332: LD_VAR 0 3
3336: PPUSH
3337: LD_INT 8
3339: PPUSH
3340: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3344: LD_VAR 0 3
3348: PPUSH
3349: LD_INT 27
3351: PPUSH
3352: LD_INT 0
3354: PPUSH
3355: CALL_OW 49
// result := Join ( result , un ) ;
3359: LD_ADDR_VAR 0 1
3363: PUSH
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_VAR 0 3
3373: PPUSH
3374: CALL 52586 0 2
3378: ST_TO_ADDR
// end ;
3379: GO 3275
3381: POP
3382: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3383: LD_VAR 0 1
3387: PPUSH
3388: LD_INT 77
3390: PPUSH
3391: LD_INT 23
3393: PPUSH
3394: CALL_OW 114
// end ;
3398: LD_VAR 0 1
3402: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3403: LD_INT 0
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
3409: PPUSH
// v := convoyWave div 10 ;
3410: LD_ADDR_VAR 0 5
3414: PUSH
3415: LD_EXP 39
3419: PUSH
3420: LD_INT 10
3422: DIV
3423: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: LD_INT 4
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: LD_INT 6
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: PUSH
3443: LD_OWVAR 67
3447: ARRAY
3448: PUSH
3449: LD_VAR 0 5
3453: PLUS
3454: ST_TO_ADDR
// if skill > 10 then
3455: LD_VAR 0 4
3459: PUSH
3460: LD_INT 10
3462: GREATER
3463: IFFALSE 3473
// skill := 10 ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_INT 10
3472: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3473: LD_ADDR_VAR 0 2
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_INT 3
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: LD_INT 4
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: PUSH
3497: LD_OWVAR 67
3501: ARRAY
3502: PUSH
3503: FOR_TO
3504: IFFALSE 3609
// begin uc_side := enemySide ;
3506: LD_ADDR_OWVAR 20
3510: PUSH
3511: LD_EXP 12
3515: ST_TO_ADDR
// uc_nation := nation_arabian ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 2
3523: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3524: LD_INT 0
3526: PPUSH
3527: LD_VAR 0 4
3531: PPUSH
3532: CALL_OW 381
// un := CreateHuman ;
3536: LD_ADDR_VAR 0 3
3540: PUSH
3541: CALL_OW 44
3545: ST_TO_ADDR
// if i mod 3 = 0 then
3546: LD_VAR 0 2
3550: PUSH
3551: LD_INT 3
3553: MOD
3554: PUSH
3555: LD_INT 0
3557: EQUAL
3558: IFFALSE 3572
// SetClass ( un , class_mortar ) ;
3560: LD_VAR 0 3
3564: PPUSH
3565: LD_INT 8
3567: PPUSH
3568: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_INT 28
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 49
// result := Join ( result , un ) ;
3587: LD_ADDR_VAR 0 1
3591: PUSH
3592: LD_VAR 0 1
3596: PPUSH
3597: LD_VAR 0 3
3601: PPUSH
3602: CALL 52586 0 2
3606: ST_TO_ADDR
// end ;
3607: GO 3503
3609: POP
3610: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3611: LD_VAR 0 1
3615: PPUSH
3616: LD_INT 147
3618: PPUSH
3619: LD_INT 100
3621: PPUSH
3622: CALL_OW 114
// end ; end_of_file
3626: LD_VAR 0 1
3630: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3631: LD_INT 0
3633: PPUSH
3634: PPUSH
3635: PPUSH
3636: PPUSH
3637: PPUSH
// multi_settings_counter := 5 ;
3638: LD_ADDR_EXP 26
3642: PUSH
3643: LD_INT 5
3645: ST_TO_ADDR
// multi_settings := [ ] ;
3646: LD_ADDR_EXP 25
3650: PUSH
3651: EMPTY
3652: ST_TO_ADDR
// if Multiplayer then
3653: LD_OWVAR 4
3657: IFFALSE 3837
// begin your_side := mp_player_side ;
3659: LD_ADDR_OWVAR 2
3663: PUSH
3664: LD_OWVAR 7
3668: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3669: LD_ADDR_EXP 14
3673: PUSH
3674: LD_OWVAR 6
3678: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3679: LD_ADDR_EXP 15
3683: PUSH
3684: LD_OWVAR 17
3688: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3689: LD_ADDR_EXP 16
3693: PUSH
3694: LD_OWVAR 15
3698: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3699: LD_ADDR_EXP 17
3703: PUSH
3704: LD_OWVAR 16
3708: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3709: LD_ADDR_EXP 18
3713: PUSH
3714: EMPTY
3715: PUSH
3716: EMPTY
3717: LIST
3718: ST_TO_ADDR
// for i in mp_teams do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_OWVAR 12
3728: PUSH
3729: FOR_IN
3730: IFFALSE 3773
// if i then
3732: LD_VAR 0 2
3736: IFFALSE 3771
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3738: LD_ADDR_EXP 18
3742: PUSH
3743: LD_EXP 18
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: LD_EXP 18
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PUSH
3760: LD_VAR 0 2
3764: UNION
3765: PPUSH
3766: CALL_OW 1
3770: ST_TO_ADDR
3771: GO 3729
3773: POP
3774: POP
// for i := 1 to multi_settings_counter do
3775: LD_ADDR_VAR 0 2
3779: PUSH
3780: DOUBLE
3781: LD_INT 1
3783: DEC
3784: ST_TO_ADDR
3785: LD_EXP 26
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3833
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
3793: LD_ADDR_EXP 25
3797: PUSH
3798: LD_EXP 25
3802: PPUSH
3803: LD_EXP 25
3807: PUSH
3808: LD_INT 1
3810: PLUS
3811: PPUSH
3812: LD_VAR 0 2
3816: PPUSH
3817: CALL_OW 426
3821: PUSH
3822: LD_INT 1
3824: PLUS
3825: PPUSH
3826: CALL_OW 1
3830: ST_TO_ADDR
3831: GO 3790
3833: POP
3834: POP
// end else
3835: GO 4019
// begin your_side := 3 ;
3837: LD_ADDR_OWVAR 2
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// multi_gametype := 1 ;
3845: LD_ADDR_EXP 14
3849: PUSH
3850: LD_INT 1
3852: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
3853: LD_ADDR_EXP 15
3857: PUSH
3858: LD_INT 0
3860: PUSH
3861: LD_INT 0
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: LD_INT 0
3869: PUSH
3870: LD_INT 0
3872: PUSH
3873: LD_INT 0
3875: PUSH
3876: LD_INT 1
3878: PUSH
3879: LD_INT 0
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
3892: LD_ADDR_EXP 16
3896: PUSH
3897: LD_INT 0
3899: PUSH
3900: LD_INT 0
3902: PUSH
3903: LD_INT 1
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: LD_INT 0
3911: PUSH
3912: LD_INT 0
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
3931: LD_ADDR_EXP 17
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: LD_INT 0
3941: PUSH
3942: LD_INT 3
3944: PUSH
3945: LD_INT 0
3947: PUSH
3948: LD_INT 0
3950: PUSH
3951: LD_INT 0
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: LD_INT 0
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
3970: LD_ADDR_EXP 18
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 7
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
3988: LD_ADDR_EXP 25
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 1
3998: PUSH
3999: LD_INT 4
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: LD_INT 2
4007: PUSH
4008: LD_INT 4
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4019: LD_ADDR_EXP 19
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: LD_INT 0
4032: PUSH
4033: LD_INT 0
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: LD_INT 0
4041: PUSH
4042: LD_INT 0
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: EMPTY
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4058: LD_ADDR_EXP 22
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: LD_INT 0
4071: PUSH
4072: LD_INT 0
4074: PUSH
4075: LD_INT 0
4077: PUSH
4078: LD_INT 0
4080: PUSH
4081: LD_INT 0
4083: PUSH
4084: LD_INT 0
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4097: LD_ADDR_EXP 32
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: LD_INT 0
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: LD_INT 0
4119: PUSH
4120: LD_INT 0
4122: PUSH
4123: LD_INT 0
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: ST_TO_ADDR
// multi_teamgame := true ;
4136: LD_ADDR_EXP 23
4140: PUSH
4141: LD_INT 1
4143: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4144: LD_ADDR_EXP 21
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: EMPTY
4153: LIST
4154: ST_TO_ADDR
// multi_custom_commanders := true ;
4155: LD_ADDR_EXP 24
4159: PUSH
4160: LD_INT 1
4162: ST_TO_ADDR
// multi_commanders := [ ] ;
4163: LD_ADDR_EXP 31
4167: PUSH
4168: EMPTY
4169: ST_TO_ADDR
// multi_players_amount := 0 ;
4170: LD_ADDR_EXP 33
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4178: LD_ADDR_EXP 20
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 3
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 4
4195: PUSH
4196: LD_INT 6
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4207: LD_ADDR_EXP 35
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: LD_INT 108
4217: PUSH
4218: LD_INT 110
4220: PUSH
4221: LD_INT 2
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 32
4235: PUSH
4236: LD_INT 117
4238: PUSH
4239: LD_INT 101
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 44
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 32
4260: PUSH
4261: LD_INT 124
4263: PUSH
4264: LD_INT 107
4266: PUSH
4267: LD_INT 3
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: PUSH
4275: LD_INT 43
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: LIST
4282: PUSH
4283: LD_INT 32
4285: PUSH
4286: LD_INT 94
4288: PUSH
4289: LD_INT 114
4291: PUSH
4292: LD_INT 1
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 44
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 32
4310: PUSH
4311: LD_INT 110
4313: PUSH
4314: LD_INT 94
4316: PUSH
4317: LD_INT 4
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 44
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 29
4335: PUSH
4336: LD_INT 126
4338: PUSH
4339: LD_INT 124
4341: PUSH
4342: LD_INT 5
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 26
4356: PUSH
4357: LD_INT 101
4359: PUSH
4360: LD_INT 115
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_INT 26
4377: PUSH
4378: LD_INT 125
4380: PUSH
4381: LD_INT 121
4383: PUSH
4384: LD_INT 3
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 3
4398: PUSH
4399: LD_INT 109
4401: PUSH
4402: LD_INT 126
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 17
4419: PUSH
4420: LD_INT 112
4422: PUSH
4423: LD_INT 129
4425: PUSH
4426: LD_INT 5
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 31
4452: PUSH
4453: LD_INT 95
4455: PUSH
4456: LD_INT 36
4458: PUSH
4459: LD_INT 4
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 31
4473: PUSH
4474: LD_INT 116
4476: PUSH
4477: LD_INT 66
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 31
4494: PUSH
4495: LD_INT 157
4497: PUSH
4498: LD_INT 159
4500: PUSH
4501: LD_INT 4
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 31
4515: PUSH
4516: LD_INT 75
4518: PUSH
4519: LD_INT 88
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: PUSH
4534: LD_INT 31
4536: PUSH
4537: LD_INT 63
4539: PUSH
4540: LD_INT 82
4542: PUSH
4543: LD_INT 3
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 31
4557: PUSH
4558: LD_INT 106
4560: PUSH
4561: LD_INT 147
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: LD_INT 124
4581: PUSH
4582: LD_INT 164
4584: PUSH
4585: LD_INT 5
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 4
4599: PUSH
4600: LD_INT 129
4602: PUSH
4603: LD_INT 159
4605: PUSH
4606: LD_INT 4
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: PUSH
4628: EMPTY
4629: PUSH
4630: EMPTY
4631: PUSH
4632: EMPTY
4633: PUSH
4634: EMPTY
4635: PUSH
4636: EMPTY
4637: PUSH
4638: EMPTY
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4650: LD_ADDR_EXP 30
4654: PUSH
4655: EMPTY
4656: PUSH
4657: LD_INT 21
4659: PUSH
4660: LD_INT 1
4662: PUSH
4663: LD_INT 1
4665: PUSH
4666: LD_INT 42
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 22
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: LD_INT 1
4683: PUSH
4684: LD_INT 51
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 22
4695: PUSH
4696: LD_INT 1
4698: PUSH
4699: LD_INT 1
4701: PUSH
4702: LD_INT 44
4704: PUSH
4705: LD_INT 43
4707: PUSH
4708: LD_INT 42
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: LD_OWVAR 67
4720: ARRAY
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 22
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 1
4736: PUSH
4737: LD_INT 44
4739: PUSH
4740: LD_INT 43
4742: PUSH
4743: LD_INT 42
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: PUSH
4751: LD_OWVAR 67
4755: ARRAY
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 22
4765: PUSH
4766: LD_INT 1
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: LD_INT 44
4774: PUSH
4775: LD_INT 43
4777: PUSH
4778: LD_INT 42
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: PUSH
4786: LD_OWVAR 67
4790: ARRAY
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: PUSH
4805: EMPTY
4806: PUSH
4807: EMPTY
4808: PUSH
4809: EMPTY
4810: PUSH
4811: EMPTY
4812: PUSH
4813: EMPTY
4814: PUSH
4815: EMPTY
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: ST_TO_ADDR
// for i := 1 to 8 do
4827: LD_ADDR_VAR 0 2
4831: PUSH
4832: DOUBLE
4833: LD_INT 1
4835: DEC
4836: ST_TO_ADDR
4837: LD_INT 8
4839: PUSH
4840: FOR_TO
4841: IFFALSE 5170
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
4843: LD_VAR 0 2
4847: PPUSH
4848: CALL_OW 530
4852: IFFALSE 5010
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
4854: LD_ADDR_EXP 19
4858: PUSH
4859: LD_EXP 19
4863: PPUSH
4864: LD_VAR 0 2
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 1
4876: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
4877: LD_ADDR_EXP 17
4881: PUSH
4882: LD_EXP 17
4886: PPUSH
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_INT 0
4894: PPUSH
4895: CALL_OW 1
4899: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
4900: LD_ADDR_EXP 15
4904: PUSH
4905: LD_EXP 15
4909: PPUSH
4910: LD_VAR 0 2
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 1
4922: ST_TO_ADDR
// for j = 1 to multi_teams do
4923: LD_ADDR_VAR 0 3
4927: PUSH
4928: DOUBLE
4929: LD_INT 1
4931: DEC
4932: ST_TO_ADDR
4933: LD_EXP 18
4937: PUSH
4938: FOR_TO
4939: IFFALSE 5008
// begin if i in multi_teams [ j ] then
4941: LD_VAR 0 2
4945: PUSH
4946: LD_EXP 18
4950: PUSH
4951: LD_VAR 0 3
4955: ARRAY
4956: IN
4957: IFFALSE 5006
// begin tmp := multi_teams [ j ] diff i ;
4959: LD_ADDR_VAR 0 5
4963: PUSH
4964: LD_EXP 18
4968: PUSH
4969: LD_VAR 0 3
4973: ARRAY
4974: PUSH
4975: LD_VAR 0 2
4979: DIFF
4980: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
4981: LD_ADDR_EXP 18
4985: PUSH
4986: LD_EXP 18
4990: PPUSH
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_VAR 0 5
5000: PPUSH
5001: CALL_OW 1
5005: ST_TO_ADDR
// end ; end ;
5006: GO 4938
5008: POP
5009: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5010: LD_EXP 17
5014: PUSH
5015: LD_VAR 0 2
5019: ARRAY
5020: PUSH
5021: LD_EXP 17
5025: PUSH
5026: LD_VAR 0 2
5030: ARRAY
5031: PUSH
5032: LD_EXP 21
5036: IN
5037: NOT
5038: AND
5039: IFFALSE 5080
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5041: LD_ADDR_EXP 17
5045: PUSH
5046: LD_EXP 17
5050: PPUSH
5051: LD_VAR 0 2
5055: PPUSH
5056: LD_EXP 21
5060: PUSH
5061: LD_INT 1
5063: PPUSH
5064: LD_EXP 21
5068: PPUSH
5069: CALL_OW 12
5073: ARRAY
5074: PPUSH
5075: CALL_OW 1
5079: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5080: LD_EXP 17
5084: PUSH
5085: LD_VAR 0 2
5089: ARRAY
5090: NOT
5091: PUSH
5092: LD_EXP 15
5096: PUSH
5097: LD_VAR 0 2
5101: ARRAY
5102: NOT
5103: AND
5104: PUSH
5105: LD_EXP 19
5109: PUSH
5110: LD_VAR 0 2
5114: ARRAY
5115: NOT
5116: AND
5117: IFFALSE 5142
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5119: LD_ADDR_EXP 22
5123: PUSH
5124: LD_EXP 22
5128: PPUSH
5129: LD_VAR 0 2
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 1
5141: ST_TO_ADDR
// if multi_sides [ i ] then
5142: LD_EXP 15
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: IFFALSE 5168
// multi_players_amount := multi_players_amount + 1 ;
5154: LD_ADDR_EXP 33
5158: PUSH
5159: LD_EXP 33
5163: PUSH
5164: LD_INT 1
5166: PLUS
5167: ST_TO_ADDR
// end ;
5168: GO 4840
5170: POP
5171: POP
// for i in multi_teams do
5172: LD_ADDR_VAR 0 2
5176: PUSH
5177: LD_EXP 18
5181: PUSH
5182: FOR_IN
5183: IFFALSE 5291
// begin for j = 2 to i do
5185: LD_ADDR_VAR 0 3
5189: PUSH
5190: DOUBLE
5191: LD_INT 2
5193: DEC
5194: ST_TO_ADDR
5195: LD_VAR 0 2
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5287
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5203: LD_VAR 0 2
5207: PUSH
5208: LD_VAR 0 3
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 2
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: CALL_OW 343
// for x = 1 to j - 1 do
5227: LD_ADDR_VAR 0 4
5231: PUSH
5232: DOUBLE
5233: LD_INT 1
5235: DEC
5236: ST_TO_ADDR
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 1
5244: MINUS
5245: PUSH
5246: FOR_TO
5247: IFFALSE 5283
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5249: LD_VAR 0 2
5253: PUSH
5254: LD_VAR 0 3
5258: ARRAY
5259: PPUSH
5260: LD_VAR 0 2
5264: PUSH
5265: LD_VAR 0 4
5269: ARRAY
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: LD_INT 1
5276: PPUSH
5277: CALL_OW 80
5281: GO 5246
5283: POP
5284: POP
// end ;
5285: GO 5200
5287: POP
5288: POP
// end ;
5289: GO 5182
5291: POP
5292: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5293: LD_ADDR_OWVAR 67
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 3
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: PUSH
5312: LD_EXP 25
5316: PUSH
5317: LD_INT 1
5319: ARRAY
5320: ARRAY
5321: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5322: LD_ADDR_EXP 27
5326: PUSH
5327: LD_INT 9
5329: PUSH
5330: LD_INT 12
5332: PUSH
5333: LD_INT 15
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_EXP 25
5345: PUSH
5346: LD_INT 2
5348: ARRAY
5349: ARRAY
5350: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5351: LD_ADDR_EXP 28
5355: PUSH
5356: LD_INT 1
5358: PUSH
5359: LD_INT 3
5361: PUSH
5362: LD_INT 4
5364: PUSH
5365: LD_INT 6
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_EXP 25
5378: PUSH
5379: LD_INT 3
5381: ARRAY
5382: ARRAY
5383: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5384: LD_ADDR_EXP 34
5388: PUSH
5389: LD_INT 3500
5391: PUSH
5392: LD_INT 5000
5394: PUSH
5395: LD_INT 7500
5397: PUSH
5398: LD_INT 10000
5400: PUSH
5401: LD_INT 15000
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_EXP 25
5415: PUSH
5416: LD_INT 4
5418: ARRAY
5419: ARRAY
5420: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5421: LD_ADDR_EXP 29
5425: PUSH
5426: LD_INT 1000
5428: PUSH
5429: LD_INT 1260
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 2000
5438: PUSH
5439: LD_INT 1050
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 3000
5448: PUSH
5449: LD_INT 840
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 4000
5458: PUSH
5459: LD_INT 630
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: PUSH
5472: LD_EXP 25
5476: PUSH
5477: LD_INT 5
5479: ARRAY
5480: ARRAY
5481: ST_TO_ADDR
// end ;
5482: LD_VAR 0 1
5486: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5487: LD_INT 0
5489: PPUSH
5490: PPUSH
// if not multi_sides [ preferSide ] then
5491: LD_EXP 15
5495: PUSH
5496: LD_VAR 0 1
5500: ARRAY
5501: NOT
5502: IFFALSE 5516
// begin result := preferSide ;
5504: LD_ADDR_VAR 0 2
5508: PUSH
5509: LD_VAR 0 1
5513: ST_TO_ADDR
// exit ;
5514: GO 5563
// end ; for i := 1 to 8 do
5516: LD_ADDR_VAR 0 3
5520: PUSH
5521: DOUBLE
5522: LD_INT 1
5524: DEC
5525: ST_TO_ADDR
5526: LD_INT 8
5528: PUSH
5529: FOR_TO
5530: IFFALSE 5561
// if not multi_sides [ i ] then
5532: LD_EXP 15
5536: PUSH
5537: LD_VAR 0 3
5541: ARRAY
5542: NOT
5543: IFFALSE 5559
// begin result := i ;
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: LD_VAR 0 3
5554: ST_TO_ADDR
// exit ;
5555: POP
5556: POP
5557: GO 5563
// end ;
5559: GO 5529
5561: POP
5562: POP
// end ;
5563: LD_VAR 0 2
5567: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5568: LD_INT 0
5570: PPUSH
// uc_side := side ;
5571: LD_ADDR_OWVAR 20
5575: PUSH
5576: LD_VAR 0 1
5580: ST_TO_ADDR
// uc_nation := nation_russian ;
5581: LD_ADDR_OWVAR 21
5585: PUSH
5586: LD_INT 3
5588: ST_TO_ADDR
// hc_importance := 100 ;
5589: LD_ADDR_OWVAR 32
5593: PUSH
5594: LD_INT 100
5596: ST_TO_ADDR
// if num = 1 then
5597: LD_VAR 0 2
5601: PUSH
5602: LD_INT 1
5604: EQUAL
5605: IFFALSE 5672
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5607: LD_INT 1
5609: PPUSH
5610: LD_EXP 28
5614: PUSH
5615: LD_INT 1
5617: PLUS
5618: PPUSH
5619: CALL_OW 381
// hc_gallery := ru ;
5623: LD_ADDR_OWVAR 33
5627: PUSH
5628: LD_STRING ru
5630: ST_TO_ADDR
// hc_face_number := 13 ;
5631: LD_ADDR_OWVAR 34
5635: PUSH
5636: LD_INT 13
5638: ST_TO_ADDR
// hc_name := Kuzmov ;
5639: LD_ADDR_OWVAR 26
5643: PUSH
5644: LD_STRING Kuzmov
5646: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5647: LD_ADDR_OWVAR 29
5651: PUSH
5652: LD_INT 11
5654: PUSH
5655: LD_INT 11
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: ST_TO_ADDR
// result := CreateHuman ;
5662: LD_ADDR_VAR 0 3
5666: PUSH
5667: CALL_OW 44
5671: ST_TO_ADDR
// end ; if num = 2 then
5672: LD_VAR 0 2
5676: PUSH
5677: LD_INT 2
5679: EQUAL
5680: IFFALSE 5747
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5682: LD_INT 1
5684: PPUSH
5685: LD_EXP 28
5689: PUSH
5690: LD_INT 2
5692: PLUS
5693: PPUSH
5694: CALL_OW 383
// hc_gallery := ru ;
5698: LD_ADDR_OWVAR 33
5702: PUSH
5703: LD_STRING ru
5705: ST_TO_ADDR
// hc_face_number := 1 ;
5706: LD_ADDR_OWVAR 34
5710: PUSH
5711: LD_INT 1
5713: ST_TO_ADDR
// hc_name := Burlak ;
5714: LD_ADDR_OWVAR 26
5718: PUSH
5719: LD_STRING Burlak
5721: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5722: LD_ADDR_OWVAR 29
5726: PUSH
5727: LD_INT 10
5729: PUSH
5730: LD_INT 11
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: ST_TO_ADDR
// result := CreateHuman ;
5737: LD_ADDR_VAR 0 3
5741: PUSH
5742: CALL_OW 44
5746: ST_TO_ADDR
// end ; end ;
5747: LD_VAR 0 3
5751: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5752: LD_INT 0
5754: PPUSH
5755: PPUSH
5756: PPUSH
5757: PPUSH
5758: PPUSH
5759: PPUSH
5760: PPUSH
5761: PPUSH
5762: PPUSH
5763: PPUSH
// for i := 1 to 8 do
5764: LD_ADDR_VAR 0 2
5768: PUSH
5769: DOUBLE
5770: LD_INT 1
5772: DEC
5773: ST_TO_ADDR
5774: LD_INT 8
5776: PUSH
5777: FOR_TO
5778: IFFALSE 7200
// begin if not multi_sides [ i ] then
5780: LD_EXP 15
5784: PUSH
5785: LD_VAR 0 2
5789: ARRAY
5790: NOT
5791: IFFALSE 5795
// continue ;
5793: GO 5777
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
5795: LD_ADDR_VAR 0 8
5799: PUSH
5800: LD_EXP 30
5804: PUSH
5805: LD_EXP 15
5809: PUSH
5810: LD_VAR 0 2
5814: ARRAY
5815: ARRAY
5816: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
5817: LD_EXP 35
5821: PUSH
5822: LD_EXP 15
5826: PUSH
5827: LD_VAR 0 2
5831: ARRAY
5832: ARRAY
5833: IFFALSE 6130
// begin uc_side := i ;
5835: LD_ADDR_OWVAR 20
5839: PUSH
5840: LD_VAR 0 2
5844: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5845: LD_ADDR_OWVAR 21
5849: PUSH
5850: LD_EXP 17
5854: PUSH
5855: LD_VAR 0 2
5859: ARRAY
5860: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
5861: LD_ADDR_VAR 0 3
5865: PUSH
5866: LD_EXP 35
5870: PUSH
5871: LD_EXP 15
5875: PUSH
5876: LD_VAR 0 2
5880: ARRAY
5881: ARRAY
5882: PUSH
5883: FOR_IN
5884: IFFALSE 6128
// begin if j [ 1 ] = b_oil_mine then
5886: LD_VAR 0 3
5890: PUSH
5891: LD_INT 1
5893: ARRAY
5894: PUSH
5895: LD_INT 29
5897: EQUAL
5898: IFFALSE 5935
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
5900: LD_VAR 0 3
5904: PUSH
5905: LD_INT 2
5907: ARRAY
5908: PUSH
5909: LD_INT 1
5911: ARRAY
5912: PPUSH
5913: LD_VAR 0 3
5917: PUSH
5918: LD_INT 2
5920: ARRAY
5921: PUSH
5922: LD_INT 2
5924: ARRAY
5925: PPUSH
5926: LD_VAR 0 2
5930: PPUSH
5931: CALL_OW 441
// bc_type := j [ 1 ] ;
5935: LD_ADDR_OWVAR 42
5939: PUSH
5940: LD_VAR 0 3
5944: PUSH
5945: LD_INT 1
5947: ARRAY
5948: ST_TO_ADDR
// bc_level := 3 ;
5949: LD_ADDR_OWVAR 43
5953: PUSH
5954: LD_INT 3
5956: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
5957: LD_ADDR_VAR 0 4
5961: PUSH
5962: LD_VAR 0 3
5966: PUSH
5967: LD_INT 2
5969: ARRAY
5970: PUSH
5971: LD_INT 1
5973: ARRAY
5974: PPUSH
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 2
5982: ARRAY
5983: PUSH
5984: LD_INT 2
5986: ARRAY
5987: PPUSH
5988: LD_VAR 0 3
5992: PUSH
5993: LD_INT 2
5995: ARRAY
5996: PUSH
5997: LD_INT 3
5999: ARRAY
6000: PPUSH
6001: CALL_OW 47
6005: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6006: LD_VAR 0 3
6010: PUSH
6011: LD_INT 1
6013: ARRAY
6014: PUSH
6015: LD_INT 0
6017: EQUAL
6018: IFFALSE 6094
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6020: LD_VAR 0 4
6024: PPUSH
6025: CALL_OW 274
6029: PPUSH
6030: LD_INT 1
6032: PPUSH
6033: LD_INT 450
6035: PUSH
6036: LD_INT 350
6038: PUSH
6039: LD_INT 230
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_OWVAR 67
6051: ARRAY
6052: PPUSH
6053: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6057: LD_VAR 0 4
6061: PPUSH
6062: CALL_OW 274
6066: PPUSH
6067: LD_INT 2
6069: PPUSH
6070: LD_INT 90
6072: PUSH
6073: LD_INT 60
6075: PUSH
6076: LD_INT 40
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_OWVAR 67
6088: ARRAY
6089: PPUSH
6090: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6094: LD_VAR 0 3
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PUSH
6103: LD_INT 32
6105: EQUAL
6106: IFFALSE 6126
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6108: LD_VAR 0 4
6112: PPUSH
6113: LD_VAR 0 3
6117: PUSH
6118: LD_INT 3
6120: ARRAY
6121: PPUSH
6122: CALL_OW 431
// end ;
6126: GO 5883
6128: POP
6129: POP
// end ; if multi_custom_commanders then
6130: LD_EXP 24
6134: IFFALSE 6351
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6136: LD_ADDR_VAR 0 6
6140: PUSH
6141: LD_VAR 0 2
6145: PPUSH
6146: LD_EXP 15
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL 5568 0 2
6161: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6162: LD_ADDR_EXP 31
6166: PUSH
6167: LD_EXP 31
6171: PPUSH
6172: LD_EXP 31
6176: PUSH
6177: LD_INT 1
6179: PLUS
6180: PPUSH
6181: LD_VAR 0 6
6185: PPUSH
6186: CALL_OW 2
6190: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6191: LD_VAR 0 6
6195: PPUSH
6196: CALL_OW 257
6200: PUSH
6201: LD_INT 3
6203: EQUAL
6204: IFFALSE 6316
// begin uc_nation := nation_russian ;
6206: LD_ADDR_OWVAR 21
6210: PUSH
6211: LD_INT 3
6213: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6214: LD_INT 23
6216: PPUSH
6217: LD_INT 1
6219: PPUSH
6220: LD_INT 1
6222: PPUSH
6223: LD_INT 44
6225: PPUSH
6226: LD_INT 80
6228: PPUSH
6229: CALL 19735 0 5
// veh := CreateVehicle ;
6233: LD_ADDR_VAR 0 7
6237: PUSH
6238: CALL_OW 45
6242: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6243: LD_VAR 0 7
6247: PPUSH
6248: LD_VAR 0 6
6252: PPUSH
6253: CALL_OW 255
6257: PUSH
6258: LD_INT 1
6260: NEG
6261: MUL
6262: PPUSH
6263: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6267: LD_VAR 0 7
6271: PPUSH
6272: LD_EXP 20
6276: PUSH
6277: LD_EXP 15
6281: PUSH
6282: LD_VAR 0 2
6286: ARRAY
6287: ARRAY
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6300: LD_VAR 0 6
6304: PPUSH
6305: LD_VAR 0 7
6309: PPUSH
6310: CALL_OW 52
// end else
6314: GO 6349
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6316: LD_VAR 0 6
6320: PPUSH
6321: LD_EXP 20
6325: PUSH
6326: LD_EXP 15
6330: PUSH
6331: LD_VAR 0 2
6335: ARRAY
6336: ARRAY
6337: PUSH
6338: LD_INT 1
6340: ARRAY
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 49
// end else
6349: GO 6562
// begin uc_side := i ;
6351: LD_ADDR_OWVAR 20
6355: PUSH
6356: LD_VAR 0 2
6360: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6361: LD_ADDR_OWVAR 21
6365: PUSH
6366: LD_EXP 17
6370: PUSH
6371: LD_VAR 0 2
6375: ARRAY
6376: ST_TO_ADDR
// hc_importance := 100 ;
6377: LD_ADDR_OWVAR 32
6381: PUSH
6382: LD_INT 100
6384: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6385: LD_INT 0
6387: PPUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_EXP 28
6395: PPUSH
6396: CALL_OW 380
// if multiplayer then
6400: LD_OWVAR 4
6404: IFFALSE 6462
// begin hc_name := mp_sides_players_names [ i ] ;
6406: LD_ADDR_OWVAR 26
6410: PUSH
6411: LD_OWVAR 19
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6422: LD_ADDR_OWVAR 33
6426: PUSH
6427: LD_STRING MULTIAVATARS
6429: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6430: LD_ADDR_OWVAR 34
6434: PUSH
6435: LD_VAR 0 2
6439: PPUSH
6440: CALL_OW 525
6444: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6445: LD_ADDR_OWVAR 27
6449: PUSH
6450: LD_VAR 0 2
6454: PPUSH
6455: CALL_OW 526
6459: ST_TO_ADDR
// end else
6460: GO 6494
// begin hc_gallery :=  ;
6462: LD_ADDR_OWVAR 33
6466: PUSH
6467: LD_STRING 
6469: ST_TO_ADDR
// hc_name :=  ;
6470: LD_ADDR_OWVAR 26
6474: PUSH
6475: LD_STRING 
6477: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6478: LD_ADDR_OWVAR 27
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 2
6488: PPUSH
6489: CALL_OW 12
6493: ST_TO_ADDR
// end ; un := CreateHuman ;
6494: LD_ADDR_VAR 0 6
6498: PUSH
6499: CALL_OW 44
6503: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6504: LD_VAR 0 6
6508: PPUSH
6509: LD_EXP 20
6513: PUSH
6514: LD_EXP 15
6518: PUSH
6519: LD_VAR 0 2
6523: ARRAY
6524: ARRAY
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6537: LD_ADDR_EXP 31
6541: PUSH
6542: LD_EXP 31
6546: PPUSH
6547: LD_VAR 0 2
6551: PPUSH
6552: LD_VAR 0 6
6556: PPUSH
6557: CALL_OW 1
6561: ST_TO_ADDR
// end ; InitHc ;
6562: CALL_OW 19
// InitUc ;
6566: CALL_OW 18
// uc_side := i ;
6570: LD_ADDR_OWVAR 20
6574: PUSH
6575: LD_VAR 0 2
6579: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6580: LD_ADDR_OWVAR 21
6584: PUSH
6585: LD_EXP 17
6589: PUSH
6590: LD_VAR 0 2
6594: ARRAY
6595: ST_TO_ADDR
// hc_gallery :=  ;
6596: LD_ADDR_OWVAR 33
6600: PUSH
6601: LD_STRING 
6603: ST_TO_ADDR
// hc_name :=  ;
6604: LD_ADDR_OWVAR 26
6608: PUSH
6609: LD_STRING 
6611: ST_TO_ADDR
// hc_importance := 0 ;
6612: LD_ADDR_OWVAR 32
6616: PUSH
6617: LD_INT 0
6619: ST_TO_ADDR
// cl := 1 ;
6620: LD_ADDR_VAR 0 5
6624: PUSH
6625: LD_INT 1
6627: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6628: LD_ADDR_VAR 0 3
6632: PUSH
6633: DOUBLE
6634: LD_INT 2
6636: DEC
6637: ST_TO_ADDR
6638: LD_EXP 27
6642: PUSH
6643: FOR_TO
6644: IFFALSE 7196
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_INT 1
6653: MINUS
6654: PUSH
6655: LD_EXP 27
6659: PUSH
6660: LD_INT 1
6662: MINUS
6663: PUSH
6664: LD_INT 4
6666: DIVREAL
6667: MOD
6668: PUSH
6669: LD_INT 0
6671: EQUAL
6672: IFFALSE 6688
// cl := cl + 1 ;
6674: LD_ADDR_VAR 0 5
6678: PUSH
6679: LD_VAR 0 5
6683: PUSH
6684: LD_INT 1
6686: PLUS
6687: ST_TO_ADDR
// if cl > 4 then
6688: LD_VAR 0 5
6692: PUSH
6693: LD_INT 4
6695: GREATER
6696: IFFALSE 6706
// cl := 1 ;
6698: LD_ADDR_VAR 0 5
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6706: LD_EXP 15
6710: PUSH
6711: LD_VAR 0 2
6715: ARRAY
6716: PUSH
6717: LD_INT 2
6719: EQUAL
6720: PUSH
6721: LD_VAR 0 5
6725: PUSH
6726: LD_INT 2
6728: EQUAL
6729: PUSH
6730: LD_VAR 0 5
6734: PUSH
6735: LD_INT 4
6737: EQUAL
6738: PUSH
6739: LD_INT 22
6741: PUSH
6742: LD_VAR 0 2
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 25
6753: PUSH
6754: LD_INT 4
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PPUSH
6765: CALL_OW 69
6769: PUSH
6770: LD_INT 1
6772: GREATER
6773: AND
6774: OR
6775: AND
6776: IFFALSE 6795
// PrepareHuman ( false , 1 , multi_skill_level ) else
6778: LD_INT 0
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_EXP 28
6788: PPUSH
6789: CALL_OW 380
6793: GO 6812
// PrepareHuman ( false , cl , multi_skill_level ) ;
6795: LD_INT 0
6797: PPUSH
6798: LD_VAR 0 5
6802: PPUSH
6803: LD_EXP 28
6807: PPUSH
6808: CALL_OW 380
// un := CreateHuman ;
6812: LD_ADDR_VAR 0 6
6816: PUSH
6817: CALL_OW 44
6821: ST_TO_ADDR
// if multi_pos_area then
6822: LD_EXP 20
6826: IFFALSE 7194
// begin if GetClass ( un ) = 3 and vehicles then
6828: LD_VAR 0 6
6832: PPUSH
6833: CALL_OW 257
6837: PUSH
6838: LD_INT 3
6840: EQUAL
6841: PUSH
6842: LD_VAR 0 8
6846: AND
6847: IFFALSE 7032
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
6849: LD_VAR 0 8
6853: PUSH
6854: LD_INT 1
6856: ARRAY
6857: PUSH
6858: LD_INT 1
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 8
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: PUSH
6871: LD_INT 2
6873: ARRAY
6874: PPUSH
6875: LD_VAR 0 8
6879: PUSH
6880: LD_INT 1
6882: ARRAY
6883: PUSH
6884: LD_INT 3
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 8
6892: PUSH
6893: LD_INT 1
6895: ARRAY
6896: PUSH
6897: LD_INT 4
6899: ARRAY
6900: PPUSH
6901: LD_INT 80
6903: PUSH
6904: LD_INT 60
6906: PUSH
6907: LD_INT 40
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: LD_OWVAR 67
6919: ARRAY
6920: PPUSH
6921: CALL 19735 0 5
// veh := CreateVehicle ;
6925: LD_ADDR_VAR 0 7
6929: PUSH
6930: CALL_OW 45
6934: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6935: LD_VAR 0 7
6939: PPUSH
6940: LD_EXP 20
6944: PUSH
6945: LD_EXP 15
6949: PUSH
6950: LD_VAR 0 2
6954: ARRAY
6955: ARRAY
6956: PUSH
6957: LD_INT 2
6959: ARRAY
6960: PPUSH
6961: LD_INT 0
6963: PPUSH
6964: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6968: LD_VAR 0 6
6972: PPUSH
6973: LD_VAR 0 7
6977: PPUSH
6978: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
6982: LD_VAR 0 7
6986: PPUSH
6987: CALL_OW 264
6991: PUSH
6992: LD_INT 51
6994: EQUAL
6995: IFFALSE 7012
// SetCargo ( veh , mat_oil , 60 ) ;
6997: LD_VAR 0 7
7001: PPUSH
7002: LD_INT 2
7004: PPUSH
7005: LD_INT 60
7007: PPUSH
7008: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7012: LD_ADDR_VAR 0 8
7016: PUSH
7017: LD_VAR 0 8
7021: PPUSH
7022: LD_INT 1
7024: PPUSH
7025: CALL_OW 3
7029: ST_TO_ADDR
// continue ;
7030: GO 6643
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7032: LD_ADDR_VAR 0 9
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_VAR 0 2
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 2
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 32
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 30
7064: PUSH
7065: LD_INT 31
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 58
7079: PUSH
7080: EMPTY
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 69
7092: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7093: LD_VAR 0 6
7097: PPUSH
7098: CALL_OW 257
7102: PUSH
7103: LD_INT 1
7105: EQUAL
7106: PUSH
7107: LD_VAR 0 9
7111: AND
7112: IFFALSE 7161
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7114: LD_VAR 0 6
7118: PPUSH
7119: LD_VAR 0 9
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PPUSH
7128: CALL_OW 254
7132: PUSH
7133: LD_INT 3
7135: MINUS
7136: PPUSH
7137: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7141: LD_VAR 0 6
7145: PPUSH
7146: LD_VAR 0 9
7150: PUSH
7151: LD_INT 1
7153: ARRAY
7154: PPUSH
7155: CALL_OW 52
// continue ;
7159: GO 6643
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7161: LD_VAR 0 6
7165: PPUSH
7166: LD_EXP 20
7170: PUSH
7171: LD_EXP 15
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: ARRAY
7182: PUSH
7183: LD_INT 1
7185: ARRAY
7186: PPUSH
7187: LD_INT 0
7189: PPUSH
7190: CALL_OW 49
// end ; end ;
7194: GO 6643
7196: POP
7197: POP
// end ;
7198: GO 5777
7200: POP
7201: POP
// end ;
7202: LD_VAR 0 1
7206: RET
// export function Multiplayer_Start ( ) ; begin
7207: LD_INT 0
7209: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7210: CALL 5752 0 0
// Multiplayer_InitPointSystem ( ) ;
7214: CALL 7925 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7218: LD_INT 20
7220: PPUSH
7221: CALL 8101 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7225: LD_INT 150
7227: PPUSH
7228: CALL 8101 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7232: LD_INT 5
7234: PPUSH
7235: CALL 8101 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7239: LD_INT 40
7241: NEG
7242: PPUSH
7243: CALL 8101 0 1
// Multiplayer_RegisterCondition ( - 20 ) ;
7247: LD_INT 20
7249: NEG
7250: PPUSH
7251: CALL 8101 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7255: LD_INT 2
7257: PPUSH
7258: CALL 8101 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7262: LD_INT 110
7264: PPUSH
7265: CALL 8101 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7269: LD_INT 55
7271: PPUSH
7272: CALL 8101 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7276: LD_INT 1000
7278: NEG
7279: PPUSH
7280: CALL 8101 0 1
// if multi_sides [ your_side ] then
7284: LD_EXP 15
7288: PUSH
7289: LD_OWVAR 2
7293: ARRAY
7294: IFFALSE 7321
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7296: LD_INT 22
7298: PUSH
7299: LD_OWVAR 2
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 69
7312: PUSH
7313: LD_INT 1
7315: ARRAY
7316: PPUSH
7317: CALL_OW 87
// end ;
7321: LD_VAR 0 1
7325: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7326: LD_INT 0
7328: PPUSH
7329: PPUSH
7330: PPUSH
7331: PPUSH
// repeat wait ( 0 0$1 ) ;
7332: LD_INT 35
7334: PPUSH
7335: CALL_OW 67
// points := 0 ;
7339: LD_ADDR_VAR 0 4
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// for i := 1 to 8 do
7347: LD_ADDR_VAR 0 2
7351: PUSH
7352: DOUBLE
7353: LD_INT 1
7355: DEC
7356: ST_TO_ADDR
7357: LD_INT 8
7359: PUSH
7360: FOR_TO
7361: IFFALSE 7387
// points := points + multi_points [ i ] ;
7363: LD_ADDR_VAR 0 4
7367: PUSH
7368: LD_VAR 0 4
7372: PUSH
7373: LD_EXP 36
7377: PUSH
7378: LD_VAR 0 2
7382: ARRAY
7383: PLUS
7384: ST_TO_ADDR
7385: GO 7360
7387: POP
7388: POP
// if not multi_custom_commanders then
7389: LD_EXP 24
7393: NOT
7394: IFFALSE 7507
// begin for i := 1 to 8 do
7396: LD_ADDR_VAR 0 2
7400: PUSH
7401: DOUBLE
7402: LD_INT 1
7404: DEC
7405: ST_TO_ADDR
7406: LD_INT 8
7408: PUSH
7409: FOR_TO
7410: IFFALSE 7481
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7412: LD_INT 22
7414: PUSH
7415: LD_VAR 0 2
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PPUSH
7424: CALL_OW 69
7428: PUSH
7429: LD_INT 0
7431: EQUAL
7432: PUSH
7433: LD_EXP 32
7437: PUSH
7438: LD_VAR 0 2
7442: ARRAY
7443: NOT
7444: AND
7445: IFFALSE 7479
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7447: LD_ADDR_EXP 32
7451: PUSH
7452: LD_EXP 32
7456: PPUSH
7457: LD_VAR 0 2
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: CALL_OW 1
7469: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7470: LD_VAR 0 2
7474: PPUSH
7475: CALL 8171 0 1
// end ; end ;
7479: GO 7409
7481: POP
7482: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7483: LD_EXP 32
7487: PPUSH
7488: CALL 16997 0 1
7492: PUSH
7493: LD_EXP 15
7497: PPUSH
7498: CALL 16997 0 1
7502: EQUAL
7503: IFFALSE 7507
// break ;
7505: GO 7548
// end ; if points >= multi_points_to_victory then
7507: LD_VAR 0 4
7511: PUSH
7512: LD_EXP 34
7516: GREATEREQUAL
7517: IFFALSE 7529
// begin winAllowed := true ;
7519: LD_ADDR_EXP 3
7523: PUSH
7524: LD_INT 1
7526: ST_TO_ADDR
// break ;
7527: GO 7548
// end ; until ( winAllowed and game ) or not multi_commanders ;
7529: LD_EXP 3
7533: PUSH
7534: LD_EXP 2
7538: AND
7539: PUSH
7540: LD_EXP 31
7544: NOT
7545: OR
7546: IFFALSE 7332
// game := false ;
7548: LD_ADDR_EXP 2
7552: PUSH
7553: LD_INT 0
7555: ST_TO_ADDR
// for i := 1 to 8 do
7556: LD_ADDR_VAR 0 2
7560: PUSH
7561: DOUBLE
7562: LD_INT 1
7564: DEC
7565: ST_TO_ADDR
7566: LD_INT 8
7568: PUSH
7569: FOR_TO
7570: IFFALSE 7606
// begin if multi_sides [ i ] then
7572: LD_EXP 15
7576: PUSH
7577: LD_VAR 0 2
7581: ARRAY
7582: IFFALSE 7604
// SetMultiScore ( i , multi_points [ i ] ) ;
7584: LD_VAR 0 2
7588: PPUSH
7589: LD_EXP 36
7593: PUSH
7594: LD_VAR 0 2
7598: ARRAY
7599: PPUSH
7600: CALL_OW 506
// end ;
7604: GO 7569
7606: POP
7607: POP
// if multi_loosers [ your_side ] then
7608: LD_EXP 32
7612: PUSH
7613: LD_OWVAR 2
7617: ARRAY
7618: IFFALSE 7641
// begin if Multiplayer then
7620: LD_OWVAR 4
7624: IFFALSE 7632
// YouLostInMultiplayer else
7626: CALL_OW 107
7630: GO 7639
// YouLost (  ) ;
7632: LD_STRING 
7634: PPUSH
7635: CALL_OW 104
// end else
7639: GO 7657
// begin if Multiplayer then
7641: LD_OWVAR 4
7645: IFFALSE 7653
// YouWinInMultiplayer else
7647: CALL_OW 106
7651: GO 7657
// YouWin ;
7653: CALL_OW 103
// end ; end ;
7657: LD_VAR 0 1
7661: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// result := false ;
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// for side in botSides do
7674: LD_ADDR_VAR 0 2
7678: PUSH
7679: LD_EXP 4
7683: PUSH
7684: FOR_IN
7685: IFFALSE 7746
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_VAR 0 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 50
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: PUSH
7730: LD_INT 0
7732: GREATER
7733: ST_TO_ADDR
// if result then
7734: LD_VAR 0 1
7738: IFFALSE 7744
// exit ;
7740: POP
7741: POP
7742: GO 7748
// end ;
7744: GO 7684
7746: POP
7747: POP
// end ;
7748: LD_VAR 0 1
7752: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7753: LD_INT 0
7755: PPUSH
7756: PPUSH
7757: PPUSH
// result := [ ] ;
7758: LD_ADDR_VAR 0 1
7762: PUSH
7763: EMPTY
7764: ST_TO_ADDR
// points := 0 ;
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// for i := 1 to 8 do
7773: LD_ADDR_VAR 0 2
7777: PUSH
7778: DOUBLE
7779: LD_INT 1
7781: DEC
7782: ST_TO_ADDR
7783: LD_INT 8
7785: PUSH
7786: FOR_TO
7787: IFFALSE 7866
// begin points := points + multi_points [ i ] ;
7789: LD_ADDR_VAR 0 3
7793: PUSH
7794: LD_VAR 0 3
7798: PUSH
7799: LD_EXP 36
7803: PUSH
7804: LD_VAR 0 2
7808: ARRAY
7809: PLUS
7810: ST_TO_ADDR
// if multi_sides [ i ] then
7811: LD_EXP 15
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: IFFALSE 7864
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
7823: LD_ADDR_VAR 0 1
7827: PUSH
7828: LD_VAR 0 1
7832: PUSH
7833: LD_STRING #coop-points
7835: PUSH
7836: LD_VAR 0 2
7840: PUSH
7841: LD_VAR 0 2
7845: PUSH
7846: LD_EXP 36
7850: PUSH
7851: LD_VAR 0 2
7855: ARRAY
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: ADD
7863: ST_TO_ADDR
// end ; end ;
7864: GO 7786
7866: POP
7867: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: LD_VAR 0 1
7877: PUSH
7878: LD_STRING #saved-convoys
7880: PUSH
7881: LD_EXP 5
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: ADD
7890: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
7891: LD_ADDR_VAR 0 1
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: LD_STRING #points-to-win
7903: PUSH
7904: LD_VAR 0 3
7908: PUSH
7909: LD_EXP 34
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: LIST
7918: ADD
7919: ST_TO_ADDR
// end ;
7920: LD_VAR 0 1
7924: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
7925: LD_INT 0
7927: PPUSH
7928: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7929: LD_ADDR_EXP 36
7933: PUSH
7934: LD_INT 0
7936: PUSH
7937: LD_INT 0
7939: PUSH
7940: LD_INT 0
7942: PUSH
7943: LD_INT 0
7945: PUSH
7946: LD_INT 0
7948: PUSH
7949: LD_INT 0
7951: PUSH
7952: LD_INT 0
7954: PUSH
7955: LD_INT 0
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
// multi_points_conditions := [ ] ;
7968: LD_ADDR_EXP 37
7972: PUSH
7973: EMPTY
7974: ST_TO_ADDR
// end ;
7975: LD_VAR 0 1
7979: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
7980: LD_INT 0
7982: PPUSH
// if not multi_points or not side or side > 8 then
7983: LD_EXP 36
7987: NOT
7988: PUSH
7989: LD_VAR 0 1
7993: NOT
7994: OR
7995: PUSH
7996: LD_VAR 0 1
8000: PUSH
8001: LD_INT 8
8003: GREATER
8004: OR
8005: IFFALSE 8009
// exit ;
8007: GO 8046
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8009: LD_ADDR_EXP 36
8013: PUSH
8014: LD_EXP 36
8018: PPUSH
8019: LD_VAR 0 1
8023: PPUSH
8024: LD_EXP 36
8028: PUSH
8029: LD_VAR 0 1
8033: ARRAY
8034: PUSH
8035: LD_VAR 0 2
8039: PLUS
8040: PPUSH
8041: CALL_OW 1
8045: ST_TO_ADDR
// end ;
8046: LD_VAR 0 3
8050: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8051: LD_INT 0
8053: PPUSH
// if not multi_points or not side or side > 8 then
8054: LD_EXP 36
8058: NOT
8059: PUSH
8060: LD_VAR 0 1
8064: NOT
8065: OR
8066: PUSH
8067: LD_VAR 0 1
8071: PUSH
8072: LD_INT 8
8074: GREATER
8075: OR
8076: IFFALSE 8080
// exit ;
8078: GO 8096
// result := multi_points [ side ] ;
8080: LD_ADDR_VAR 0 2
8084: PUSH
8085: LD_EXP 36
8089: PUSH
8090: LD_VAR 0 1
8094: ARRAY
8095: ST_TO_ADDR
// end ;
8096: LD_VAR 0 2
8100: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8101: LD_INT 0
8103: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8104: LD_ADDR_EXP 37
8108: PUSH
8109: LD_EXP 37
8113: PPUSH
8114: LD_EXP 37
8118: PUSH
8119: LD_INT 1
8121: PLUS
8122: PPUSH
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 1
8132: ST_TO_ADDR
// end ;
8133: LD_VAR 0 2
8137: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8138: LD_INT 0
8140: PPUSH
// if not id then
8141: LD_VAR 0 1
8145: NOT
8146: IFFALSE 8150
// exit ;
8148: GO 8166
// result := multi_points_conditions [ id ] ;
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_EXP 37
8159: PUSH
8160: LD_VAR 0 1
8164: ARRAY
8165: ST_TO_ADDR
// end ;
8166: LD_VAR 0 2
8170: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
// players := [ ] ;
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: EMPTY
8184: ST_TO_ADDR
// for i = 1 to 8 do
8185: LD_ADDR_VAR 0 4
8189: PUSH
8190: DOUBLE
8191: LD_INT 1
8193: DEC
8194: ST_TO_ADDR
8195: LD_INT 8
8197: PUSH
8198: FOR_TO
8199: IFFALSE 8258
// begin if i = side then
8201: LD_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: EQUAL
8211: IFFALSE 8215
// continue ;
8213: GO 8198
// if multi_sides [ i ] and not multi_loosers [ i ] then
8215: LD_EXP 15
8219: PUSH
8220: LD_VAR 0 4
8224: ARRAY
8225: PUSH
8226: LD_EXP 32
8230: PUSH
8231: LD_VAR 0 4
8235: ARRAY
8236: NOT
8237: AND
8238: IFFALSE 8256
// players := players ^ i ;
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: LD_VAR 0 3
8249: PUSH
8250: LD_VAR 0 4
8254: ADD
8255: ST_TO_ADDR
// end ;
8256: GO 8198
8258: POP
8259: POP
// if not players then
8260: LD_VAR 0 3
8264: NOT
8265: IFFALSE 8269
// exit ;
8267: GO 8536
// if players = 1 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 1
8276: EQUAL
8277: IFFALSE 8338
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8279: LD_ADDR_VAR 0 4
8283: PUSH
8284: LD_INT 22
8286: PUSH
8287: LD_VAR 0 1
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 51
8298: PUSH
8299: EMPTY
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 69
8310: PUSH
8311: FOR_IN
8312: IFFALSE 8334
// SetSide ( i , players [ 1 ] ) ;
8314: LD_VAR 0 4
8318: PPUSH
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: CALL_OW 235
8332: GO 8311
8334: POP
8335: POP
// end else
8336: GO 8536
// begin j := 1 ;
8338: LD_ADDR_VAR 0 5
8342: PUSH
8343: LD_INT 1
8345: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8346: LD_ADDR_VAR 0 4
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_VAR 0 1
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 2
8365: PUSH
8366: LD_INT 21
8368: PUSH
8369: LD_INT 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 51
8378: PUSH
8379: EMPTY
8380: LIST
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 21
8388: PUSH
8389: LD_INT 2
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 69
8409: PUSH
8410: FOR_IN
8411: IFFALSE 8534
// begin SetSide ( i , players [ j ] ) ;
8413: LD_VAR 0 4
8417: PPUSH
8418: LD_VAR 0 3
8422: PUSH
8423: LD_VAR 0 5
8427: ARRAY
8428: PPUSH
8429: CALL_OW 235
// if IsDrivenBy ( i ) then
8433: LD_VAR 0 4
8437: PPUSH
8438: CALL_OW 311
8442: IFFALSE 8469
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8444: LD_VAR 0 4
8448: PPUSH
8449: CALL_OW 311
8453: PPUSH
8454: LD_VAR 0 3
8458: PUSH
8459: LD_VAR 0 5
8463: ARRAY
8464: PPUSH
8465: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8469: LD_VAR 0 4
8473: PPUSH
8474: CALL_OW 310
8478: PPUSH
8479: CALL_OW 247
8483: PUSH
8484: LD_INT 3
8486: EQUAL
8487: IFFALSE 8498
// ComExitBuilding ( i ) ;
8489: LD_VAR 0 4
8493: PPUSH
8494: CALL_OW 122
// j := j + 1 ;
8498: LD_ADDR_VAR 0 5
8502: PUSH
8503: LD_VAR 0 5
8507: PUSH
8508: LD_INT 1
8510: PLUS
8511: ST_TO_ADDR
// if j > players then
8512: LD_VAR 0 5
8516: PUSH
8517: LD_VAR 0 3
8521: GREATER
8522: IFFALSE 8532
// j := 1 ;
8524: LD_ADDR_VAR 0 5
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// end ;
8532: GO 8410
8534: POP
8535: POP
// end ; end ;
8536: LD_VAR 0 2
8540: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8541: LD_INT 0
8543: PPUSH
// if not side or side > 8 then
8544: LD_VAR 0 1
8548: NOT
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_INT 8
8557: GREATER
8558: OR
8559: IFFALSE 8563
// exit ;
8561: GO 8580
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8563: LD_VAR 0 1
8567: PPUSH
8568: LD_INT 6
8570: PPUSH
8571: CALL 8138 0 1
8575: PPUSH
8576: CALL 7980 0 2
// end ;
8580: LD_VAR 0 2
8584: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8585: LD_INT 0
8587: PPUSH
// if not side or side > 8 then
8588: LD_VAR 0 1
8592: NOT
8593: PUSH
8594: LD_VAR 0 1
8598: PUSH
8599: LD_INT 8
8601: GREATER
8602: OR
8603: IFFALSE 8607
// exit ;
8605: GO 8624
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8607: LD_VAR 0 1
8611: PPUSH
8612: LD_INT 4
8614: PPUSH
8615: CALL 8138 0 1
8619: PPUSH
8620: CALL 7980 0 2
// end ;
8624: LD_VAR 0 2
8628: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8629: LD_INT 0
8631: PPUSH
// if not side or side > 8 then
8632: LD_VAR 0 1
8636: NOT
8637: PUSH
8638: LD_VAR 0 1
8642: PUSH
8643: LD_INT 8
8645: GREATER
8646: OR
8647: IFFALSE 8651
// exit ;
8649: GO 8668
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8651: LD_VAR 0 1
8655: PPUSH
8656: LD_INT 5
8658: PPUSH
8659: CALL 8138 0 1
8663: PPUSH
8664: CALL 7980 0 2
// end ;
8668: LD_VAR 0 2
8672: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8673: LD_INT 0
8675: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8676: LD_VAR 0 1
8680: NOT
8681: PUSH
8682: LD_VAR 0 1
8686: PUSH
8687: LD_INT 8
8689: GREATER
8690: OR
8691: PUSH
8692: LD_VAR 0 2
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: LD_INT 6
8702: PUSH
8703: LD_INT 36
8705: PUSH
8706: LD_INT 0
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: IN
8715: NOT
8716: OR
8717: IFFALSE 8721
// exit ;
8719: GO 8738
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_INT 3
8728: PPUSH
8729: CALL 8138 0 1
8733: PPUSH
8734: CALL 7980 0 2
// end ;
8738: LD_VAR 0 3
8742: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
// if not un then
8747: LD_VAR 0 1
8751: NOT
8752: IFFALSE 8756
// exit ;
8754: GO 8802
// if not points then
8756: LD_VAR 0 3
8760: NOT
8761: IFFALSE 8778
// gained_points := Multiplayer_GetCondition ( 1 ) else
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_INT 1
8770: PPUSH
8771: CALL 8138 0 1
8775: ST_TO_ADDR
8776: GO 8788
// gained_points := points ;
8778: LD_ADDR_VAR 0 5
8782: PUSH
8783: LD_VAR 0 3
8787: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
8788: LD_VAR 0 2
8792: PPUSH
8793: LD_VAR 0 5
8797: PPUSH
8798: CALL 7980 0 2
// end ; end_of_file
8802: LD_VAR 0 4
8806: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
8807: LD_INT 0
8809: PPUSH
// begin side := GetSide ( un ) ;
8810: LD_ADDR_VAR 0 4
8814: PUSH
8815: LD_VAR 0 1
8819: PPUSH
8820: CALL_OW 255
8824: ST_TO_ADDR
// if killerSide = enemySide then
8825: LD_VAR 0 2
8829: PUSH
8830: LD_EXP 12
8834: EQUAL
8835: IFFALSE 8839
// exit ;
8837: GO 8899
// if side = convoySide and multi_sides [ killerSide ] then
8839: LD_VAR 0 4
8843: PUSH
8844: LD_EXP 40
8848: EQUAL
8849: PUSH
8850: LD_EXP 15
8854: PUSH
8855: LD_VAR 0 2
8859: ARRAY
8860: AND
8861: IFFALSE 8882
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
8863: LD_VAR 0 4
8867: PPUSH
8868: LD_INT 9
8870: PPUSH
8871: CALL 8138 0 1
8875: PPUSH
8876: CALL 7980 0 2
// exit ;
8880: GO 8899
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
8882: LD_VAR 0 1
8886: PPUSH
8887: LD_VAR 0 2
8891: PPUSH
8892: LD_INT 0
8894: PPUSH
8895: CALL 8743 0 3
// end ;
8899: PPOPN 4
8901: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
8902: LD_INT 0
8904: PPUSH
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL 73489 0 1
// side := GetSide ( un ) ;
8923: LD_ADDR_VAR 0 3
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: CALL_OW 255
8937: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
8938: LD_EXP 15
8942: PUSH
8943: LD_VAR 0 3
8947: ARRAY
8948: PUSH
8949: LD_VAR 0 3
8953: PUSH
8954: LD_EXP 40
8958: EQUAL
8959: OR
8960: IFFALSE 9038
// begin if un in convoys then
8962: LD_VAR 0 1
8966: PUSH
8967: LD_EXP 38
8971: IN
8972: IFFALSE 8990
// convoys := convoys diff un ;
8974: LD_ADDR_EXP 38
8978: PUSH
8979: LD_EXP 38
8983: PUSH
8984: LD_VAR 0 1
8988: DIFF
8989: ST_TO_ADDR
// if GetType ( un ) = unit_human then
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL_OW 247
8999: PUSH
9000: LD_INT 1
9002: EQUAL
9003: IFFALSE 9014
// MultiplayerEvent_HumanLost ( side ) ;
9005: LD_VAR 0 3
9009: PPUSH
9010: CALL 8585 0 1
// if GetType ( un ) = unit_vehicle then
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 247
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9038
// MultiplayerEvent_VehicleLost ( side ) ;
9029: LD_VAR 0 3
9033: PPUSH
9034: CALL 8629 0 1
// end ; if un in enemyForestGuard then
9038: LD_VAR 0 1
9042: PUSH
9043: LD_EXP 11
9047: IN
9048: IFFALSE 9066
// enemyForestGuard := enemyForestGuard diff un ;
9050: LD_ADDR_EXP 11
9054: PUSH
9055: LD_EXP 11
9059: PUSH
9060: LD_VAR 0 1
9064: DIFF
9065: ST_TO_ADDR
// if un in enemyMobile then
9066: LD_VAR 0 1
9070: PUSH
9071: LD_EXP 10
9075: IN
9076: IFFALSE 9094
// enemyMobile := enemyMobile diff un ;
9078: LD_ADDR_EXP 10
9082: PUSH
9083: LD_EXP 10
9087: PUSH
9088: LD_VAR 0 1
9092: DIFF
9093: ST_TO_ADDR
// if un in enemyUnits then
9094: LD_VAR 0 1
9098: PUSH
9099: LD_EXP 9
9103: IN
9104: IFFALSE 9122
// enemyUnits := enemyUnits diff un ;
9106: LD_ADDR_EXP 9
9110: PUSH
9111: LD_EXP 9
9115: PUSH
9116: LD_VAR 0 1
9120: DIFF
9121: ST_TO_ADDR
// if un in arAttackersInf then
9122: LD_VAR 0 1
9126: PUSH
9127: LD_EXP 13
9131: IN
9132: IFFALSE 9150
// arAttackersInf := arAttackersInf diff un ;
9134: LD_ADDR_EXP 13
9138: PUSH
9139: LD_EXP 13
9143: PUSH
9144: LD_VAR 0 1
9148: DIFF
9149: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders then
9150: LD_EXP 31
9154: PUSH
9155: LD_EXP 24
9159: AND
9160: IFFALSE 9222
// if un in multi_commanders then
9162: LD_VAR 0 1
9166: PUSH
9167: LD_EXP 31
9171: IN
9172: IFFALSE 9222
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9174: LD_ADDR_EXP 32
9178: PUSH
9179: LD_EXP 32
9183: PPUSH
9184: LD_VAR 0 3
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: CALL_OW 1
9196: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9197: LD_ADDR_EXP 31
9201: PUSH
9202: LD_EXP 31
9206: PUSH
9207: LD_VAR 0 1
9211: DIFF
9212: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9213: LD_VAR 0 3
9217: PPUSH
9218: CALL 8171 0 1
// end ; end ;
9222: PPOPN 11
9224: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9225: LD_INT 0
9227: PPUSH
9228: PPUSH
9229: PPUSH
9230: PPUSH
// begin side := GetSide ( building ) ;
9231: LD_ADDR_VAR 0 4
9235: PUSH
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 255
9245: ST_TO_ADDR
// if multi_sides [ side ] then
9246: LD_EXP 15
9250: PUSH
9251: LD_VAR 0 4
9255: ARRAY
9256: IFFALSE 9277
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9258: LD_VAR 0 4
9262: PPUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 266
9272: PPUSH
9273: CALL 8673 0 2
// end ;
9277: PPOPN 5
9279: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9280: LD_INT 0
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9288: LD_VAR 0 1
9292: PPUSH
9293: LD_VAR 0 2
9297: PPUSH
9298: CALL 73609 0 2
// side := GetSide ( vehicle ) ;
9302: LD_ADDR_VAR 0 4
9306: PUSH
9307: LD_VAR 0 1
9311: PPUSH
9312: CALL_OW 255
9316: ST_TO_ADDR
// if multi_sides [ side ] then
9317: LD_EXP 15
9321: PUSH
9322: LD_VAR 0 4
9326: ARRAY
9327: IFFALSE 9338
// MultiplayerEvent_Produced ( side ) ;
9329: LD_VAR 0 4
9333: PPUSH
9334: CALL 8541 0 1
// end ;
9338: PPOPN 8
9340: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
// begin side := GetSide ( lab ) ;
9345: LD_ADDR_VAR 0 4
9349: PUSH
9350: LD_VAR 0 2
9354: PPUSH
9355: CALL_OW 255
9359: ST_TO_ADDR
// if multi_sides [ side ] then
9360: LD_EXP 15
9364: PUSH
9365: LD_VAR 0 4
9369: ARRAY
9370: IFFALSE 9433
// for i := 1 to 8 do
9372: LD_ADDR_VAR 0 3
9376: PUSH
9377: DOUBLE
9378: LD_INT 1
9380: DEC
9381: ST_TO_ADDR
9382: LD_INT 8
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9431
// if multi_sides [ i ] and i <> side then
9388: LD_EXP 15
9392: PUSH
9393: LD_VAR 0 3
9397: ARRAY
9398: PUSH
9399: LD_VAR 0 3
9403: PUSH
9404: LD_VAR 0 4
9408: NONEQUAL
9409: AND
9410: IFFALSE 9429
// SetTech ( tech , i , state_researched ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 2
9424: PPUSH
9425: CALL_OW 322
9429: GO 9385
9431: POP
9432: POP
// end ;
9433: PPOPN 4
9435: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9436: LD_VAR 0 2
9440: PUSH
9441: LD_EXP 10
9445: IN
9446: IFFALSE 9509
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_INT 163
9455: PPUSH
9456: LD_INT 31
9458: PPUSH
9459: CALL_OW 111
// wait ( 0 0$1 ) ;
9463: LD_INT 35
9465: PPUSH
9466: CALL_OW 67
// if IsDead ( driver ) then
9470: LD_VAR 0 1
9474: PPUSH
9475: CALL_OW 301
9479: IFFALSE 9483
// exit ;
9481: GO 9509
// until IsAt ( driver , 163 , 31 ) ;
9483: LD_VAR 0 1
9487: PPUSH
9488: LD_INT 163
9490: PPUSH
9491: LD_INT 31
9493: PPUSH
9494: CALL_OW 307
9498: IFFALSE 9448
// RemoveUnit ( driver ) ;
9500: LD_VAR 0 1
9504: PPUSH
9505: CALL_OW 64
// end ; end ; end_of_file
9509: PPOPN 4
9511: END
// every 8 8$00 trigger not forestIsCleared do
9512: LD_EXP 7
9516: NOT
9517: IFFALSE 9526
9519: GO 9521
9521: DISABLE
// ClearRoadInForest ;
9522: CALL 2054 0 0
9526: END
// every 18 18$00 trigger not forestIsCleared do
9527: LD_EXP 7
9531: NOT
9532: IFFALSE 9541
9534: GO 9536
9536: DISABLE
// ClearRoadInForest ;
9537: CALL 2054 0 0
9541: END
// every 0 0$30 trigger convoyWave div 4 = 0 and convoyWave >= 4 do
9542: LD_EXP 39
9546: PUSH
9547: LD_INT 4
9549: DIV
9550: PUSH
9551: LD_INT 0
9553: EQUAL
9554: PUSH
9555: LD_EXP 39
9559: PUSH
9560: LD_INT 4
9562: GREATEREQUAL
9563: AND
9564: IFFALSE 9593
9566: GO 9568
9568: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9569: LD_ADDR_EXP 13
9573: PUSH
9574: LD_EXP 13
9578: PUSH
9579: CALL 3175 0 0
9583: UNION
9584: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9585: LD_INT 10500
9587: PPUSH
9588: CALL_OW 67
// enable ;
9592: ENABLE
// end ;
9593: END
// every 0 0$30 trigger convoyWave div 9 = 0 and convoyWave >= 9 do
9594: LD_EXP 39
9598: PUSH
9599: LD_INT 9
9601: DIV
9602: PUSH
9603: LD_INT 0
9605: EQUAL
9606: PUSH
9607: LD_EXP 39
9611: PUSH
9612: LD_INT 9
9614: GREATEREQUAL
9615: AND
9616: IFFALSE 9645
9618: GO 9620
9620: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9621: LD_ADDR_EXP 13
9625: PUSH
9626: LD_EXP 13
9630: PUSH
9631: CALL 3403 0 0
9635: UNION
9636: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9637: LD_INT 10500
9639: PPUSH
9640: CALL_OW 67
// enable ;
9644: ENABLE
// end ;
9645: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 ] do
9646: LD_EXP 39
9650: PUSH
9651: LD_INT 8
9653: PUSH
9654: LD_INT 12
9656: PUSH
9657: LD_INT 16
9659: PUSH
9660: LD_INT 20
9662: PUSH
9663: LD_INT 24
9665: PUSH
9666: LD_INT 28
9668: PUSH
9669: LD_INT 32
9671: PUSH
9672: LD_INT 36
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: IN
9685: IFFALSE 9714
9687: GO 9689
9689: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9690: LD_ADDR_EXP 13
9694: PUSH
9695: LD_EXP 13
9699: PUSH
9700: CALL 2986 0 0
9704: UNION
9705: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9706: LD_INT 10500
9708: PPUSH
9709: CALL_OW 67
// enable ;
9713: ENABLE
// end ;
9714: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
9715: LD_EXP 39
9719: PUSH
9720: LD_INT 5
9722: MOD
9723: PUSH
9724: LD_INT 4
9726: EQUAL
9727: PUSH
9728: LD_INT 22
9730: PUSH
9731: LD_EXP 12
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PUSH
9740: LD_INT 92
9742: PUSH
9743: LD_INT 30
9745: PUSH
9746: LD_INT 48
9748: PUSH
9749: LD_INT 20
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 69
9766: NOT
9767: AND
9768: IFFALSE 9785
9770: GO 9772
9772: DISABLE
// begin SendWestGroup ;
9773: CALL 2388 0 0
// wait ( 6 6$00 ) ;
9777: LD_INT 12600
9779: PPUSH
9780: CALL_OW 67
// enable ;
9784: ENABLE
// end ;
9785: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
9786: LD_EXP 10
9790: PPUSH
9791: LD_INT 50
9793: PUSH
9794: EMPTY
9795: LIST
9796: PPUSH
9797: CALL_OW 72
9801: PUSH
9802: LD_INT 5
9804: LESS
9805: IFFALSE 9822
9807: GO 9809
9809: DISABLE
// begin PrepareMobileGroup ;
9810: CALL 1475 0 0
// wait ( 1 1$00 ) ;
9814: LD_INT 2100
9816: PPUSH
9817: CALL_OW 67
// enable ;
9821: ENABLE
// end ;
9822: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
9823: LD_EXP 39
9827: PUSH
9828: LD_INT 6
9830: MOD
9831: PUSH
9832: LD_INT 0
9834: EQUAL
9835: PUSH
9836: LD_EXP 39
9840: PUSH
9841: LD_INT 6
9843: GREATEREQUAL
9844: AND
9845: PUSH
9846: LD_EXP 10
9850: PPUSH
9851: LD_INT 50
9853: PUSH
9854: EMPTY
9855: LIST
9856: PPUSH
9857: CALL_OW 72
9861: PUSH
9862: LD_INT 10
9864: LESS
9865: AND
9866: IFFALSE 9883
9868: GO 9870
9870: DISABLE
// begin PrepareMobileGroup2 ;
9871: CALL 1787 0 0
// wait ( 2 2$30 ) ;
9875: LD_INT 5250
9877: PPUSH
9878: CALL_OW 67
// enable ;
9882: ENABLE
// end ;
9883: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
9884: LD_EXP 7
9888: IFFALSE 10101
9890: GO 9892
9892: DISABLE
9893: LD_INT 0
9895: PPUSH
9896: PPUSH
// begin if tick > 50 50$00 then
9897: LD_OWVAR 1
9901: PUSH
9902: LD_INT 105000
9904: GREATER
9905: IFFALSE 9910
// begin disable ;
9907: DISABLE
// exit ;
9908: GO 10101
// end ; tmp := PrepareForestOnslaught ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: CALL 2674 0 0
9919: ST_TO_ADDR
// for i in tmp do
9920: LD_ADDR_VAR 0 1
9924: PUSH
9925: LD_VAR 0 2
9929: PUSH
9930: FOR_IN
9931: IFFALSE 9995
// begin AddComMoveXY ( i , 197 , 152 ) ;
9933: LD_VAR 0 1
9937: PPUSH
9938: LD_INT 197
9940: PPUSH
9941: LD_INT 152
9943: PPUSH
9944: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
9948: LD_VAR 0 1
9952: PPUSH
9953: LD_INT 159
9955: PPUSH
9956: LD_INT 163
9958: PPUSH
9959: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
9963: LD_VAR 0 1
9967: PPUSH
9968: LD_INT 116
9970: PPUSH
9971: LD_INT 154
9973: PPUSH
9974: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 93
9985: PPUSH
9986: LD_INT 177
9988: PPUSH
9989: CALL_OW 171
// end ;
9993: GO 9930
9995: POP
9996: POP
// repeat wait ( 0 0$1 ) ;
9997: LD_INT 35
9999: PPUSH
10000: CALL_OW 67
// for i in tmp do
10004: LD_ADDR_VAR 0 1
10008: PUSH
10009: LD_VAR 0 2
10013: PUSH
10014: FOR_IN
10015: IFFALSE 10076
// if not IsOk ( i ) then
10017: LD_VAR 0 1
10021: PPUSH
10022: CALL_OW 302
10026: NOT
10027: IFFALSE 10047
// tmp := tmp diff i else
10029: LD_ADDR_VAR 0 2
10033: PUSH
10034: LD_VAR 0 2
10038: PUSH
10039: LD_VAR 0 1
10043: DIFF
10044: ST_TO_ADDR
10045: GO 10074
// if not HasTask ( i ) then
10047: LD_VAR 0 1
10051: PPUSH
10052: CALL_OW 314
10056: NOT
10057: IFFALSE 10074
// ComMoveXY ( i , 93 , 177 ) ;
10059: LD_VAR 0 1
10063: PPUSH
10064: LD_INT 93
10066: PPUSH
10067: LD_INT 177
10069: PPUSH
10070: CALL_OW 111
10074: GO 10014
10076: POP
10077: POP
// until not tmp ;
10078: LD_VAR 0 2
10082: NOT
10083: IFFALSE 9997
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10085: LD_INT 1050
10087: PPUSH
10088: LD_INT 11550
10090: PPUSH
10091: CALL_OW 12
10095: PPUSH
10096: CALL_OW 67
// enable ;
10100: ENABLE
// end ;
10101: PPOPN 2
10103: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10104: LD_EXP 11
10108: IFFALSE 10523
10110: GO 10112
10112: DISABLE
10113: LD_INT 0
10115: PPUSH
10116: PPUSH
10117: PPUSH
10118: PPUSH
// begin enable ;
10119: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10120: LD_ADDR_VAR 0 2
10124: PUSH
10125: LD_EXP 11
10129: PPUSH
10130: LD_INT 50
10132: PUSH
10133: EMPTY
10134: LIST
10135: PPUSH
10136: CALL_OW 72
10140: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10141: LD_ADDR_VAR 0 3
10145: PUSH
10146: LD_INT 19
10148: PPUSH
10149: LD_INT 3
10151: PUSH
10152: LD_INT 22
10154: PUSH
10155: LD_EXP 12
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 70
10172: ST_TO_ADDR
// if not tmp then
10173: LD_VAR 0 2
10177: NOT
10178: IFFALSE 10182
// exit ;
10180: GO 10523
// for i in tmp do
10182: LD_ADDR_VAR 0 1
10186: PUSH
10187: LD_VAR 0 2
10191: PUSH
10192: FOR_IN
10193: IFFALSE 10521
// begin if enemyInForest then
10195: LD_VAR 0 3
10199: IFFALSE 10274
// begin if GetClass ( i ) = 4 then
10201: LD_VAR 0 1
10205: PPUSH
10206: CALL_OW 257
10210: PUSH
10211: LD_INT 4
10213: EQUAL
10214: IFFALSE 10248
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10216: LD_VAR 0 1
10220: PPUSH
10221: LD_VAR 0 2
10225: PUSH
10226: LD_VAR 0 1
10230: DIFF
10231: PPUSH
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 74
10241: PPUSH
10242: CALL_OW 112
10246: GO 10272
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 74
10267: PPUSH
10268: CALL_OW 115
// end else
10272: GO 10519
// if not IsInArea ( i , arForestArea ) then
10274: LD_VAR 0 1
10278: PPUSH
10279: LD_INT 21
10281: PPUSH
10282: CALL_OW 308
10286: NOT
10287: IFFALSE 10303
// ComMoveToArea ( i , arForestArea ) else
10289: LD_VAR 0 1
10293: PPUSH
10294: LD_INT 21
10296: PPUSH
10297: CALL_OW 113
10301: GO 10519
// if GetClass ( i ) = 3 then
10303: LD_VAR 0 1
10307: PPUSH
10308: CALL_OW 257
10312: PUSH
10313: LD_INT 3
10315: EQUAL
10316: IFFALSE 10519
// begin vehicle := IsInUnit ( i ) ;
10318: LD_ADDR_VAR 0 4
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 310
10332: ST_TO_ADDR
// if vehicle then
10333: LD_VAR 0 4
10337: IFFALSE 10492
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10339: LD_VAR 0 4
10343: PPUSH
10344: CALL_OW 256
10348: PUSH
10349: LD_INT 1000
10351: LESS
10352: PUSH
10353: LD_VAR 0 1
10357: PPUSH
10358: CALL_OW 314
10362: NOT
10363: AND
10364: IFFALSE 10490
// begin if not IsInArea ( vehicle , arParkingArea ) then
10366: LD_VAR 0 4
10370: PPUSH
10371: LD_INT 20
10373: PPUSH
10374: CALL_OW 308
10378: NOT
10379: IFFALSE 10395
// ComMoveToArea ( vehicle , arParkingArea ) else
10381: LD_VAR 0 4
10385: PPUSH
10386: LD_INT 20
10388: PPUSH
10389: CALL_OW 113
10393: GO 10490
// if not GetTag ( i ) then
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 110
10404: NOT
10405: IFFALSE 10490
// begin SetTag ( i , tMech ) ;
10407: LD_VAR 0 1
10411: PPUSH
10412: LD_INT 7
10414: PPUSH
10415: CALL_OW 109
// ComExitVehicle ( i ) ;
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 4
10437: PPUSH
10438: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10442: LD_INT 35
10444: PPUSH
10445: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 256
10458: PUSH
10459: LD_INT 1000
10461: EQUAL
10462: IFFALSE 10442
// ComEnterUnit ( i , vehicle ) ;
10464: LD_VAR 0 1
10468: PPUSH
10469: LD_VAR 0 4
10473: PPUSH
10474: CALL_OW 120
// SetTag ( i , 0 ) ;
10478: LD_VAR 0 1
10482: PPUSH
10483: LD_INT 0
10485: PPUSH
10486: CALL_OW 109
// end ; end ; end else
10490: GO 10519
// if not IsInArea ( i , arParkingArea ) then
10492: LD_VAR 0 1
10496: PPUSH
10497: LD_INT 20
10499: PPUSH
10500: CALL_OW 308
10504: NOT
10505: IFFALSE 10519
// ComMoveToArea ( i , arParkingArea ) ;
10507: LD_VAR 0 1
10511: PPUSH
10512: LD_INT 20
10514: PPUSH
10515: CALL_OW 113
// end ; end ;
10519: GO 10192
10521: POP
10522: POP
// end ;
10523: PPOPN 4
10525: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10526: LD_EXP 10
10530: IFFALSE 11063
10532: GO 10534
10534: DISABLE
10535: LD_INT 0
10537: PPUSH
10538: PPUSH
10539: PPUSH
// begin enable ;
10540: ENABLE
// if not enemyMobile then
10541: LD_EXP 10
10545: NOT
10546: IFFALSE 10550
// exit ;
10548: GO 11063
// for i in enemyMobile do
10550: LD_ADDR_VAR 0 1
10554: PUSH
10555: LD_EXP 10
10559: PUSH
10560: FOR_IN
10561: IFFALSE 11061
// begin if GetSide ( i ) <> enemySide then
10563: LD_VAR 0 1
10567: PPUSH
10568: CALL_OW 255
10572: PUSH
10573: LD_EXP 12
10577: NONEQUAL
10578: IFFALSE 10598
// begin enemyMobile := enemyMobile diff i ;
10580: LD_ADDR_EXP 10
10584: PUSH
10585: LD_EXP 10
10589: PUSH
10590: LD_VAR 0 1
10594: DIFF
10595: ST_TO_ADDR
// continue ;
10596: GO 10560
// end ; if GetTag ( i ) = 300 then
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 110
10607: PUSH
10608: LD_INT 300
10610: EQUAL
10611: IFFALSE 10726
// begin if GetFuel ( i ) < 50 then
10613: LD_VAR 0 1
10617: PPUSH
10618: CALL_OW 261
10622: PUSH
10623: LD_INT 50
10625: LESS
10626: IFFALSE 10685
// begin ComMoveXY ( i , 170 , 50 ) ;
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_INT 170
10635: PPUSH
10636: LD_INT 50
10638: PPUSH
10639: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10643: LD_INT 35
10645: PPUSH
10646: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
10650: LD_VAR 0 1
10654: PPUSH
10655: LD_INT 170
10657: PPUSH
10658: LD_INT 50
10660: PPUSH
10661: CALL_OW 297
10665: PUSH
10666: LD_INT 4
10668: LESS
10669: IFFALSE 10643
// SetFuel ( i , 100 ) ;
10671: LD_VAR 0 1
10675: PPUSH
10676: LD_INT 100
10678: PPUSH
10679: CALL_OW 240
// end else
10683: GO 10726
// if not IsInArea ( i , arParkingArea ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_INT 20
10692: PPUSH
10693: CALL_OW 308
10697: NOT
10698: IFFALSE 10714
// ComMoveToArea ( i , arParkingArea ) else
10700: LD_VAR 0 1
10704: PPUSH
10705: LD_INT 20
10707: PPUSH
10708: CALL_OW 113
10712: GO 10726
// SetTag ( i , 301 ) ;
10714: LD_VAR 0 1
10718: PPUSH
10719: LD_INT 301
10721: PPUSH
10722: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 110
10735: PUSH
10736: LD_INT 301
10738: EQUAL
10739: IFFALSE 10881
// begin if GetLives ( i ) < 1000 then
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 256
10750: PUSH
10751: LD_INT 1000
10753: LESS
10754: IFFALSE 10858
// begin if not IsDrivenBy ( i ) then
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 311
10765: NOT
10766: IFFALSE 10770
// continue ;
10768: GO 10560
// mech := IsDrivenBy ( i ) ;
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 311
10784: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10785: LD_VAR 0 2
10789: PPUSH
10790: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10794: LD_VAR 0 2
10798: PPUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10808: LD_INT 35
10810: PPUSH
10811: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10815: LD_VAR 0 1
10819: PPUSH
10820: CALL_OW 256
10824: PUSH
10825: LD_INT 1000
10827: EQUAL
10828: IFFALSE 10808
// SetLives ( mech , 1000 ) ;
10830: LD_VAR 0 2
10834: PPUSH
10835: LD_INT 1000
10837: PPUSH
10838: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
10842: LD_VAR 0 2
10846: PPUSH
10847: LD_VAR 0 1
10851: PPUSH
10852: CALL_OW 120
// end else
10856: GO 10881
// if IsDrivenBy ( i ) then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 311
10867: IFFALSE 10881
// SetTag ( i , 0 ) ;
10869: LD_VAR 0 1
10873: PPUSH
10874: LD_INT 0
10876: PPUSH
10877: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 110
10890: PUSH
10891: LD_INT 300
10893: LESS
10894: IFFALSE 11059
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
10896: LD_ADDR_VAR 0 3
10900: PUSH
10901: LD_INT 19
10903: PPUSH
10904: LD_INT 81
10906: PUSH
10907: LD_EXP 12
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PPUSH
10916: CALL_OW 70
10920: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10921: LD_VAR 0 1
10925: PPUSH
10926: CALL_OW 256
10930: PUSH
10931: LD_INT 650
10933: LESS
10934: IFFALSE 10959
// begin ComStop ( i ) ;
10936: LD_VAR 0 1
10940: PPUSH
10941: CALL_OW 141
// SetTag ( i , 300 ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: LD_INT 300
10952: PPUSH
10953: CALL_OW 109
// continue ;
10957: GO 10560
// end ; if enemy then
10959: LD_VAR 0 3
10963: IFFALSE 11003
// begin if not HasTask ( i ) then
10965: LD_VAR 0 1
10969: PPUSH
10970: CALL_OW 314
10974: NOT
10975: IFFALSE 11001
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10977: LD_VAR 0 1
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_VAR 0 1
10991: PPUSH
10992: CALL_OW 74
10996: PPUSH
10997: CALL_OW 115
// end else
11001: GO 11059
// if enemyMobile then
11003: LD_EXP 10
11007: IFFALSE 11059
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11009: LD_ADDR_VAR 0 3
11013: PUSH
11014: LD_INT 81
11016: PUSH
11017: LD_EXP 12
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 69
11030: ST_TO_ADDR
// if enemy then
11031: LD_VAR 0 3
11035: IFFALSE 11059
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11037: LD_VAR 0 1
11041: PPUSH
11042: LD_INT 130
11044: PUSH
11045: LD_INT 28
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: PPUSH
11055: CALL 55190 0 2
// end ; end ; end ;
11059: GO 10560
11061: POP
11062: POP
// end ;
11063: PPOPN 3
11065: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11066: LD_EXP 13
11070: IFFALSE 11593
11072: GO 11074
11074: DISABLE
11075: LD_INT 0
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
// begin enable ;
11082: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11083: LD_ADDR_VAR 0 2
11087: PUSH
11088: LD_EXP 13
11092: PPUSH
11093: LD_INT 50
11095: PUSH
11096: EMPTY
11097: LIST
11098: PPUSH
11099: CALL_OW 72
11103: ST_TO_ADDR
// arAttackersInf := [ ] ;
11104: LD_ADDR_EXP 13
11108: PUSH
11109: EMPTY
11110: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11111: LD_ADDR_VAR 0 1
11115: PUSH
11116: LD_VAR 0 2
11120: PPUSH
11121: LD_INT 25
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PPUSH
11131: CALL_OW 72
11135: PUSH
11136: FOR_IN
11137: IFFALSE 11289
// begin if Prob ( 50 ) then
11139: LD_INT 50
11141: PPUSH
11142: CALL_OW 13
11146: IFFALSE 11162
// SetTag ( i , tMine ) else
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_INT 6
11155: PPUSH
11156: CALL_OW 109
11160: GO 11164
// continue ;
11162: GO 11136
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11164: LD_ADDR_VAR 0 3
11168: PUSH
11169: LD_INT 81
11171: PUSH
11172: LD_EXP 12
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 3
11183: PUSH
11184: LD_INT 120
11186: PUSH
11187: LD_INT 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 2
11200: PUSH
11201: LD_INT 21
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: PPUSH
11236: LD_VAR 0 1
11240: PPUSH
11241: CALL_OW 74
11245: ST_TO_ADDR
// if not nearest then
11246: LD_VAR 0 3
11250: NOT
11251: IFFALSE 11255
// break ;
11253: GO 11289
// SetTag ( nearest , tMined ) ;
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 11
11262: PPUSH
11263: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: LD_INT 0
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: CALL_OW 192
// end ;
11287: GO 11136
11289: POP
11290: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11291: LD_ADDR_VAR 0 2
11295: PUSH
11296: LD_VAR 0 2
11300: PPUSH
11301: LD_INT 50
11303: PUSH
11304: EMPTY
11305: LIST
11306: PPUSH
11307: CALL_OW 72
11311: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11312: LD_INT 70
11314: PPUSH
11315: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_VAR 0 2
11328: PPUSH
11329: LD_INT 50
11331: PUSH
11332: EMPTY
11333: LIST
11334: PPUSH
11335: CALL_OW 72
11339: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11340: LD_ADDR_VAR 0 4
11344: PUSH
11345: LD_INT 81
11347: PUSH
11348: LD_EXP 12
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PPUSH
11357: CALL_OW 69
11361: ST_TO_ADDR
// for i in tmp do
11362: LD_ADDR_VAR 0 1
11366: PUSH
11367: LD_VAR 0 2
11371: PUSH
11372: FOR_IN
11373: IFFALSE 11584
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11375: LD_VAR 0 1
11379: PPUSH
11380: CALL_OW 257
11384: PUSH
11385: LD_INT 1
11387: NONEQUAL
11388: PUSH
11389: LD_VAR 0 1
11393: PPUSH
11394: CALL_OW 110
11398: PUSH
11399: LD_INT 6
11401: NONEQUAL
11402: AND
11403: IFFALSE 11431
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11405: LD_VAR 0 1
11409: PPUSH
11410: LD_VAR 0 4
11414: PPUSH
11415: LD_VAR 0 1
11419: PPUSH
11420: CALL_OW 74
11424: PPUSH
11425: CALL_OW 115
11429: GO 11582
// if not HasTask ( i ) then
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 314
11440: NOT
11441: IFFALSE 11582
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11443: LD_ADDR_VAR 0 3
11447: PUSH
11448: LD_VAR 0 4
11452: PPUSH
11453: LD_INT 3
11455: PUSH
11456: LD_INT 120
11458: PUSH
11459: LD_INT 11
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 21
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 21
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 72
11506: PPUSH
11507: LD_VAR 0 1
11511: PPUSH
11512: CALL_OW 74
11516: ST_TO_ADDR
// if not nearest then
11517: LD_VAR 0 3
11521: NOT
11522: IFFALSE 11550
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11524: LD_VAR 0 1
11528: PPUSH
11529: LD_VAR 0 4
11533: PPUSH
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 74
11543: PPUSH
11544: CALL_OW 115
11548: GO 11582
// begin SetTag ( nearest , tMined ) ;
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_INT 11
11557: PPUSH
11558: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11562: LD_VAR 0 1
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: LD_INT 0
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: CALL_OW 132
// end ; end ;
11582: GO 11372
11584: POP
11585: POP
// until not tmp ;
11586: LD_VAR 0 2
11590: NOT
11591: IFFALSE 11312
// end ;
11593: PPOPN 5
11595: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
11596: LD_INT 22
11598: PUSH
11599: LD_EXP 12
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 32
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 69
11626: IFFALSE 11705
11628: GO 11630
11630: DISABLE
11631: LD_INT 0
11633: PPUSH
// begin enable ;
11634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
11635: LD_ADDR_VAR 0 1
11639: PUSH
11640: LD_INT 22
11642: PUSH
11643: LD_EXP 12
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 32
11654: PUSH
11655: LD_INT 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PPUSH
11666: CALL_OW 69
11670: PUSH
11671: FOR_IN
11672: IFFALSE 11703
// if GetFuel ( i ) < 3 then
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 261
11683: PUSH
11684: LD_INT 3
11686: LESS
11687: IFFALSE 11701
// SetFuel ( i , 3 ) ;
11689: LD_VAR 0 1
11693: PPUSH
11694: LD_INT 3
11696: PPUSH
11697: CALL_OW 240
11701: GO 11671
11703: POP
11704: POP
// end ;
11705: PPOPN 1
11707: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
11708: LD_INT 9
11710: PPUSH
11711: LD_INT 22
11713: PUSH
11714: LD_EXP 12
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PPUSH
11723: CALL_OW 70
11727: IFFALSE 11790
11729: GO 11731
11731: DISABLE
11732: LD_INT 0
11734: PPUSH
// begin enable ;
11735: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: LD_INT 9
11743: PPUSH
11744: LD_INT 22
11746: PUSH
11747: LD_EXP 12
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 70
11760: PUSH
11761: FOR_IN
11762: IFFALSE 11788
// begin Multiplayer_AddPoints ( convoySide , - 100 ) ;
11764: LD_EXP 40
11768: PPUSH
11769: LD_INT 100
11771: NEG
11772: PPUSH
11773: CALL 7980 0 2
// RemoveUnit ( i ) ;
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 64
// end ;
11786: GO 11761
11788: POP
11789: POP
// end ; end_of_file
11790: PPOPN 1
11792: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
11793: LD_INT 0
11795: PPUSH
11796: PPUSH
// convoys := [ ] ;
11797: LD_ADDR_EXP 38
11801: PUSH
11802: EMPTY
11803: ST_TO_ADDR
// convoySide := side ;
11804: LD_ADDR_EXP 40
11808: PUSH
11809: LD_VAR 0 1
11813: ST_TO_ADDR
// convoyWave := 1 ;
11814: LD_ADDR_EXP 39
11818: PUSH
11819: LD_INT 1
11821: ST_TO_ADDR
// for i := 1 to 8 do
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: DOUBLE
11828: LD_INT 1
11830: DEC
11831: ST_TO_ADDR
11832: LD_INT 8
11834: PUSH
11835: FOR_TO
11836: IFFALSE 11866
// if multi_sides [ i ] then
11838: LD_EXP 15
11842: PUSH
11843: LD_VAR 0 3
11847: ARRAY
11848: IFFALSE 11864
// ChangeSideFog ( i , side ) ;
11850: LD_VAR 0 3
11854: PPUSH
11855: LD_VAR 0 1
11859: PPUSH
11860: CALL_OW 343
11864: GO 11835
11866: POP
11867: POP
// end ;
11868: LD_VAR 0 2
11872: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
11873: LD_EXP 2
11877: IFFALSE 11912
11879: GO 11881
11881: DISABLE
11882: LD_INT 0
11884: PPUSH
11885: PPUSH
// begin enable ;
11886: ENABLE
// blockThread := true ;
11887: LD_ADDR_EXP 6
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
11895: LD_EXP 39
11899: PPUSH
11900: CALL 11915 0 1
// blockThread := false ;
11904: LD_ADDR_EXP 6
11908: PUSH
11909: LD_INT 0
11911: ST_TO_ADDR
// end ;
11912: PPOPN 2
11914: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
11915: LD_INT 0
11917: PPUSH
11918: PPUSH
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
// convoyWave := Inc ( wave ) ;
11924: LD_ADDR_EXP 39
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL 53947 0 1
11938: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
11939: LD_ADDR_VAR 0 4
11943: PUSH
11944: LD_INT 5
11946: PUSH
11947: LD_INT 4
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_OWVAR 67
11962: ARRAY
11963: ST_TO_ADDR
// tmp := [ ] ;
11964: LD_ADDR_VAR 0 7
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// if wave mod 5 = 0 then
11971: LD_VAR 0 1
11975: PUSH
11976: LD_INT 5
11978: MOD
11979: PUSH
11980: LD_INT 0
11982: EQUAL
11983: IFFALSE 12229
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
11985: LD_ADDR_VAR 0 8
11989: PUSH
11990: LD_INT 16
11992: PUSH
11993: LD_INT 21
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 36
12002: PUSH
12003: LD_INT 45
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 48
12012: PUSH
12013: LD_INT 58
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 59
12022: PUSH
12023: LD_INT 88
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 76
12032: PUSH
12033: LD_INT 106
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 93
12042: PUSH
12043: LD_INT 150
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 92
12052: PUSH
12053: LD_INT 177
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: ST_TO_ADDR
// for i := 1 to 4 do
12069: LD_ADDR_VAR 0 3
12073: PUSH
12074: DOUBLE
12075: LD_INT 1
12077: DEC
12078: ST_TO_ADDR
12079: LD_INT 4
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12225
// begin uc_side := convoySide ;
12085: LD_ADDR_OWVAR 20
12089: PUSH
12090: LD_EXP 40
12094: ST_TO_ADDR
// uc_nation := nation_russian ;
12095: LD_ADDR_OWVAR 21
12099: PUSH
12100: LD_INT 3
12102: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12103: LD_INT 0
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: LD_INT 4
12111: PPUSH
12112: CALL_OW 12
12116: PPUSH
12117: LD_VAR 0 4
12121: PPUSH
12122: CALL_OW 380
// un := CreateHuman ;
12126: LD_ADDR_VAR 0 5
12130: PUSH
12131: CALL_OW 44
12135: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12136: LD_VAR 0 5
12140: PPUSH
12141: LD_INT 3
12143: PPUSH
12144: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12148: LD_VAR 0 5
12152: PPUSH
12153: LD_INT 10
12155: PPUSH
12156: LD_INT 0
12158: PPUSH
12159: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
12163: LD_VAR 0 5
12167: PPUSH
12168: LD_INT 300
12170: PPUSH
12171: LD_INT 1000
12173: PPUSH
12174: CALL_OW 12
12178: PPUSH
12179: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12183: LD_ADDR_EXP 38
12187: PUSH
12188: LD_EXP 38
12192: PPUSH
12193: LD_VAR 0 5
12197: PPUSH
12198: CALL 52586 0 2
12202: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12203: LD_ADDR_VAR 0 7
12207: PUSH
12208: LD_VAR 0 7
12212: PPUSH
12213: LD_VAR 0 5
12217: PPUSH
12218: CALL 52586 0 2
12222: ST_TO_ADDR
// end ;
12223: GO 12082
12225: POP
12226: POP
// end else
12227: GO 13391
// if wave mod 3 = 0 then
12229: LD_VAR 0 1
12233: PUSH
12234: LD_INT 3
12236: MOD
12237: PUSH
12238: LD_INT 0
12240: EQUAL
12241: IFFALSE 12712
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12243: LD_ADDR_VAR 0 8
12247: PUSH
12248: LD_INT 133
12250: PUSH
12251: LD_INT 15
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 125
12260: PUSH
12261: LD_INT 34
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 109
12270: PUSH
12271: LD_INT 55
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 99
12280: PUSH
12281: LD_INT 64
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 133
12290: PUSH
12291: LD_INT 102
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 143
12300: PUSH
12301: LD_INT 136
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 127
12310: PUSH
12311: LD_INT 154
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 92
12320: PUSH
12321: LD_INT 152
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 93
12330: PUSH
12331: LD_INT 177
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// for i := 1 to 4 do
12349: LD_ADDR_VAR 0 3
12353: PUSH
12354: DOUBLE
12355: LD_INT 1
12357: DEC
12358: ST_TO_ADDR
12359: LD_INT 4
12361: PUSH
12362: FOR_TO
12363: IFFALSE 12708
// begin uc_side := convoySide ;
12365: LD_ADDR_OWVAR 20
12369: PUSH
12370: LD_EXP 40
12374: ST_TO_ADDR
// uc_nation := nation_russian ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: LD_INT 3
12382: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12383: LD_INT 0
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: LD_INT 4
12391: PPUSH
12392: CALL_OW 12
12396: PPUSH
12397: LD_VAR 0 4
12401: PPUSH
12402: CALL_OW 380
// un := CreateHuman ;
12406: LD_ADDR_VAR 0 5
12410: PUSH
12411: CALL_OW 44
12415: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12416: LD_INT 21
12418: PUSH
12419: LD_INT 22
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 1
12428: PPUSH
12429: LD_INT 2
12431: PPUSH
12432: CALL_OW 12
12436: ARRAY
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: LD_INT 42
12446: PUSH
12447: LD_INT 43
12449: PUSH
12450: LD_INT 51
12452: PUSH
12453: LD_INT 44
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 1
12464: PPUSH
12465: LD_INT 4
12467: PPUSH
12468: CALL_OW 12
12472: ARRAY
12473: PPUSH
12474: LD_INT 60
12476: PPUSH
12477: LD_INT 90
12479: PPUSH
12480: CALL_OW 12
12484: PPUSH
12485: CALL 19735 0 5
// veh := CreateVehicle ;
12489: LD_ADDR_VAR 0 6
12493: PUSH
12494: CALL_OW 45
12498: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12499: LD_VAR 0 6
12503: PPUSH
12504: LD_INT 3
12506: PPUSH
12507: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
12511: LD_VAR 0 6
12515: PPUSH
12516: LD_INT 300
12518: PPUSH
12519: LD_INT 1000
12521: PPUSH
12522: CALL_OW 12
12526: PPUSH
12527: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12531: LD_VAR 0 6
12535: PPUSH
12536: CALL_OW 264
12540: PUSH
12541: LD_INT 51
12543: EQUAL
12544: IFFALSE 12573
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
12546: LD_VAR 0 6
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: LD_INT 10
12556: PUSH
12557: LD_INT 1
12559: PPUSH
12560: LD_INT 10
12562: PPUSH
12563: CALL_OW 12
12567: MUL
12568: PPUSH
12569: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
12573: LD_INT 10
12575: PPUSH
12576: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
12580: LD_VAR 0 6
12584: PPUSH
12585: LD_INT 7
12587: PPUSH
12588: LD_INT 0
12590: PPUSH
12591: CALL_OW 49
12595: IFFALSE 12573
// PlaceHumanInUnit ( un , veh ) ;
12597: LD_VAR 0 5
12601: PPUSH
12602: LD_VAR 0 6
12606: PPUSH
12607: CALL_OW 52
// convoys := Join ( convoys , un ) ;
12611: LD_ADDR_EXP 38
12615: PUSH
12616: LD_EXP 38
12620: PPUSH
12621: LD_VAR 0 5
12625: PPUSH
12626: CALL 52586 0 2
12630: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12631: LD_ADDR_VAR 0 7
12635: PUSH
12636: LD_VAR 0 7
12640: PPUSH
12641: LD_VAR 0 5
12645: PPUSH
12646: CALL 52586 0 2
12650: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
12651: LD_ADDR_EXP 38
12655: PUSH
12656: LD_EXP 38
12660: PPUSH
12661: LD_VAR 0 6
12665: PPUSH
12666: CALL 52586 0 2
12670: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
12671: LD_ADDR_VAR 0 7
12675: PUSH
12676: LD_VAR 0 7
12680: PPUSH
12681: LD_VAR 0 6
12685: PPUSH
12686: CALL 52586 0 2
12690: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12691: LD_VAR 0 5
12695: PPUSH
12696: LD_INT 133
12698: PPUSH
12699: LD_INT 15
12701: PPUSH
12702: CALL_OW 111
// end ;
12706: GO 12362
12708: POP
12709: POP
// end else
12710: GO 13391
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
12712: LD_ADDR_VAR 0 8
12716: PUSH
12717: LD_INT 133
12719: PUSH
12720: LD_INT 15
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 125
12729: PUSH
12730: LD_INT 34
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 109
12739: PUSH
12740: LD_INT 55
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 99
12749: PUSH
12750: LD_INT 64
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 88
12759: PUSH
12760: LD_INT 70
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 74
12769: PUSH
12770: LD_INT 78
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 70
12779: PUSH
12780: LD_INT 91
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 80
12789: PUSH
12790: LD_INT 113
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 89
12799: PUSH
12800: LD_INT 133
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 91
12809: PUSH
12810: LD_INT 159
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 93
12819: PUSH
12820: LD_INT 177
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: ST_TO_ADDR
// for i := 1 to 2 do
12840: LD_ADDR_VAR 0 3
12844: PUSH
12845: DOUBLE
12846: LD_INT 1
12848: DEC
12849: ST_TO_ADDR
12850: LD_INT 2
12852: PUSH
12853: FOR_TO
12854: IFFALSE 13199
// begin uc_side := convoySide ;
12856: LD_ADDR_OWVAR 20
12860: PUSH
12861: LD_EXP 40
12865: ST_TO_ADDR
// uc_nation := nation_russian ;
12866: LD_ADDR_OWVAR 21
12870: PUSH
12871: LD_INT 3
12873: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12874: LD_INT 0
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_INT 4
12882: PPUSH
12883: CALL_OW 12
12887: PPUSH
12888: LD_VAR 0 4
12892: PPUSH
12893: CALL_OW 380
// un := CreateHuman ;
12897: LD_ADDR_VAR 0 5
12901: PUSH
12902: CALL_OW 44
12906: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
12907: LD_INT 21
12909: PUSH
12910: LD_INT 22
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_INT 2
12922: PPUSH
12923: CALL_OW 12
12927: ARRAY
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: LD_INT 42
12937: PUSH
12938: LD_INT 43
12940: PUSH
12941: LD_INT 51
12943: PUSH
12944: LD_INT 44
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 1
12955: PPUSH
12956: LD_INT 4
12958: PPUSH
12959: CALL_OW 12
12963: ARRAY
12964: PPUSH
12965: LD_INT 70
12967: PPUSH
12968: LD_INT 90
12970: PPUSH
12971: CALL_OW 12
12975: PPUSH
12976: CALL 19735 0 5
// veh := CreateVehicle ;
12980: LD_ADDR_VAR 0 6
12984: PUSH
12985: CALL_OW 45
12989: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12990: LD_VAR 0 6
12994: PPUSH
12995: LD_INT 3
12997: PPUSH
12998: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
13002: LD_VAR 0 6
13006: PPUSH
13007: LD_INT 300
13009: PPUSH
13010: LD_INT 1000
13012: PPUSH
13013: CALL_OW 12
13017: PPUSH
13018: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13022: LD_VAR 0 6
13026: PPUSH
13027: CALL_OW 264
13031: PUSH
13032: LD_INT 51
13034: EQUAL
13035: IFFALSE 13064
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13037: LD_VAR 0 6
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: LD_INT 10
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_INT 10
13053: PPUSH
13054: CALL_OW 12
13058: MUL
13059: PPUSH
13060: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13064: LD_INT 10
13066: PPUSH
13067: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13071: LD_VAR 0 6
13075: PPUSH
13076: LD_INT 7
13078: PPUSH
13079: LD_INT 0
13081: PPUSH
13082: CALL_OW 49
13086: IFFALSE 13064
// PlaceHumanInUnit ( un , veh ) ;
13088: LD_VAR 0 5
13092: PPUSH
13093: LD_VAR 0 6
13097: PPUSH
13098: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13102: LD_ADDR_EXP 38
13106: PUSH
13107: LD_EXP 38
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL 52586 0 2
13121: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13122: LD_ADDR_VAR 0 7
13126: PUSH
13127: LD_VAR 0 7
13131: PPUSH
13132: LD_VAR 0 5
13136: PPUSH
13137: CALL 52586 0 2
13141: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13142: LD_ADDR_EXP 38
13146: PUSH
13147: LD_EXP 38
13151: PPUSH
13152: LD_VAR 0 6
13156: PPUSH
13157: CALL 52586 0 2
13161: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13162: LD_ADDR_VAR 0 7
13166: PUSH
13167: LD_VAR 0 7
13171: PPUSH
13172: LD_VAR 0 6
13176: PPUSH
13177: CALL 52586 0 2
13181: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13182: LD_VAR 0 5
13186: PPUSH
13187: LD_INT 133
13189: PPUSH
13190: LD_INT 15
13192: PPUSH
13193: CALL_OW 111
// end ;
13197: GO 12853
13199: POP
13200: POP
// for i := 1 to rand ( 3 , 5 ) do
13201: LD_ADDR_VAR 0 3
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_INT 3
13213: PPUSH
13214: LD_INT 5
13216: PPUSH
13217: CALL_OW 12
13221: PUSH
13222: FOR_TO
13223: IFFALSE 13389
// begin uc_side := convoySide ;
13225: LD_ADDR_OWVAR 20
13229: PUSH
13230: LD_EXP 40
13234: ST_TO_ADDR
// uc_nation := nation_russian ;
13235: LD_ADDR_OWVAR 21
13239: PUSH
13240: LD_INT 3
13242: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13243: LD_INT 0
13245: PPUSH
13246: LD_INT 1
13248: PPUSH
13249: LD_INT 4
13251: PPUSH
13252: CALL_OW 12
13256: PPUSH
13257: LD_VAR 0 4
13261: PPUSH
13262: CALL_OW 380
// un := CreateHuman ;
13266: LD_ADDR_VAR 0 5
13270: PUSH
13271: CALL_OW 44
13275: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13276: LD_VAR 0 5
13280: PPUSH
13281: LD_INT 3
13283: PPUSH
13284: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13288: LD_INT 35
13290: PPUSH
13291: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13295: LD_VAR 0 5
13299: PPUSH
13300: LD_INT 7
13302: PPUSH
13303: LD_INT 0
13305: PPUSH
13306: CALL_OW 49
13310: IFFALSE 13288
// SetLives ( un , rand ( 300 , 1000 ) ) ;
13312: LD_VAR 0 5
13316: PPUSH
13317: LD_INT 300
13319: PPUSH
13320: LD_INT 1000
13322: PPUSH
13323: CALL_OW 12
13327: PPUSH
13328: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13332: LD_ADDR_EXP 38
13336: PUSH
13337: LD_EXP 38
13341: PPUSH
13342: LD_VAR 0 5
13346: PPUSH
13347: CALL 52586 0 2
13351: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13352: LD_ADDR_VAR 0 7
13356: PUSH
13357: LD_VAR 0 7
13361: PPUSH
13362: LD_VAR 0 5
13366: PPUSH
13367: CALL 52586 0 2
13371: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13372: LD_VAR 0 5
13376: PPUSH
13377: LD_INT 133
13379: PPUSH
13380: LD_INT 15
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: GO 13222
13389: POP
13390: POP
// end ; if not tmp then
13391: LD_VAR 0 7
13395: NOT
13396: IFFALSE 13400
// exit ;
13398: GO 13706
// repeat wait ( 0 0$1 ) ;
13400: LD_INT 35
13402: PPUSH
13403: CALL_OW 67
// for i in tmp do
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: LD_VAR 0 7
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13697
// begin if IsDead ( i ) then
13420: LD_VAR 0 3
13424: PPUSH
13425: CALL_OW 301
13429: IFFALSE 13449
// tmp := tmp diff i else
13431: LD_ADDR_VAR 0 7
13435: PUSH
13436: LD_VAR 0 7
13440: PUSH
13441: LD_VAR 0 3
13445: DIFF
13446: ST_TO_ADDR
13447: GO 13695
// if IsInArea ( i , southEndArea ) then
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 9
13456: PPUSH
13457: CALL_OW 308
13461: IFFALSE 13614
// begin tmp := tmp diff i ;
13463: LD_ADDR_VAR 0 7
13467: PUSH
13468: LD_VAR 0 7
13472: PUSH
13473: LD_VAR 0 3
13477: DIFF
13478: ST_TO_ADDR
// convoys := convoys diff i ;
13479: LD_ADDR_EXP 38
13483: PUSH
13484: LD_EXP 38
13488: PUSH
13489: LD_VAR 0 3
13493: DIFF
13494: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13495: LD_VAR 0 3
13499: PPUSH
13500: CALL_OW 247
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: IFFALSE 13529
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13510: LD_EXP 40
13514: PPUSH
13515: LD_INT 7
13517: PPUSH
13518: CALL 8138 0 1
13522: PPUSH
13523: CALL 7980 0 2
13527: GO 13588
// begin tmp := tmp diff IsInUnit ( i ) ;
13529: LD_ADDR_VAR 0 7
13533: PUSH
13534: LD_VAR 0 7
13538: PUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: CALL_OW 310
13548: DIFF
13549: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13550: LD_ADDR_EXP 38
13554: PUSH
13555: LD_EXP 38
13559: PUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: CALL_OW 310
13569: DIFF
13570: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
13571: LD_EXP 40
13575: PPUSH
13576: LD_INT 8
13578: PPUSH
13579: CALL 8138 0 1
13583: PPUSH
13584: CALL 7980 0 2
// end ; RemoveUnit ( i ) ;
13588: LD_VAR 0 3
13592: PPUSH
13593: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
13597: LD_ADDR_EXP 5
13601: PUSH
13602: LD_EXP 5
13606: PPUSH
13607: CALL 53947 0 1
13611: ST_TO_ADDR
// end else
13612: GO 13695
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
13614: LD_VAR 0 3
13618: PPUSH
13619: CALL_OW 247
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: PUSH
13628: LD_VAR 0 3
13632: PPUSH
13633: CALL_OW 261
13637: PUSH
13638: LD_INT 0
13640: EQUAL
13641: AND
13642: IFFALSE 13678
// begin tmp := tmp diff i ;
13644: LD_ADDR_VAR 0 7
13648: PUSH
13649: LD_VAR 0 7
13653: PUSH
13654: LD_VAR 0 3
13658: DIFF
13659: ST_TO_ADDR
// convoys := convoys diff i ;
13660: LD_ADDR_EXP 38
13664: PUSH
13665: LD_EXP 38
13669: PUSH
13670: LD_VAR 0 3
13674: DIFF
13675: ST_TO_ADDR
// end else
13676: GO 13695
// MoveTo ( i , path , southEndArea ) ;
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_VAR 0 8
13687: PPUSH
13688: LD_INT 9
13690: PPUSH
13691: CALL 13711 0 3
// end ;
13695: GO 13417
13697: POP
13698: POP
// until not tmp ;
13699: LD_VAR 0 7
13703: NOT
13704: IFFALSE 13400
// end ;
13706: LD_VAR 0 2
13710: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
13711: LD_INT 0
13713: PPUSH
13714: PPUSH
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
// if not unit then
13719: LD_VAR 0 1
13723: NOT
13724: IFFALSE 13728
// exit ;
13726: GO 14456
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
13728: LD_ADDR_VAR 0 9
13732: PUSH
13733: LD_INT 29
13735: PUSH
13736: LD_INT 91
13738: PUSH
13739: LD_INT 49
13741: PUSH
13742: LD_INT 51
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: ST_TO_ADDR
// if IsOk ( unit ) then
13751: LD_VAR 0 1
13755: PPUSH
13756: CALL_OW 302
13760: IFFALSE 14456
// begin tag := GetTag ( unit ) + 1 ;
13762: LD_ADDR_VAR 0 6
13766: PUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: CALL_OW 110
13776: PUSH
13777: LD_INT 1
13779: PLUS
13780: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
13781: LD_ADDR_VAR 0 5
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 250
13795: PPUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 251
13805: PPUSH
13806: LD_INT 3
13808: PPUSH
13809: CALL 54932 0 3
13813: ST_TO_ADDR
// type := GetType ( unit ) ;
13814: LD_ADDR_VAR 0 7
13818: PUSH
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 247
13828: ST_TO_ADDR
// if type = unit_human then
13829: LD_VAR 0 7
13833: PUSH
13834: LD_INT 1
13836: EQUAL
13837: IFFALSE 13927
// begin vehicle := IsInUnit ( unit ) ;
13839: LD_ADDR_VAR 0 8
13843: PUSH
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL_OW 310
13853: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
13854: LD_VAR 0 8
13858: PUSH
13859: LD_VAR 0 8
13863: PPUSH
13864: CALL_OW 261
13868: PUSH
13869: LD_INT 0
13871: EQUAL
13872: AND
13873: IFFALSE 13925
// begin ComExitVehicle ( unit ) ;
13875: LD_VAR 0 1
13879: PPUSH
13880: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
13884: LD_VAR 0 1
13888: PPUSH
13889: LD_VAR 0 2
13893: PUSH
13894: LD_VAR 0 6
13898: ARRAY
13899: PUSH
13900: LD_INT 1
13902: ARRAY
13903: PPUSH
13904: LD_VAR 0 2
13908: PUSH
13909: LD_VAR 0 6
13913: ARRAY
13914: PUSH
13915: LD_INT 2
13917: ARRAY
13918: PPUSH
13919: CALL_OW 171
// exit ;
13923: GO 14456
// end ; end else
13925: GO 14002
// begin if GetFuel ( unit ) = 0 then
13927: LD_VAR 0 1
13931: PPUSH
13932: CALL_OW 261
13936: PUSH
13937: LD_INT 0
13939: EQUAL
13940: IFFALSE 14002
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 311
13951: PPUSH
13952: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 311
13965: PPUSH
13966: LD_VAR 0 2
13970: PUSH
13971: LD_VAR 0 6
13975: ARRAY
13976: PUSH
13977: LD_INT 1
13979: ARRAY
13980: PPUSH
13981: LD_VAR 0 2
13985: PUSH
13986: LD_VAR 0 6
13990: ARRAY
13991: PUSH
13992: LD_INT 2
13994: ARRAY
13995: PPUSH
13996: CALL_OW 171
// exit ;
14000: GO 14456
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and GetCargo ( unit , mat_cans ) then
14002: LD_VAR 0 7
14006: PUSH
14007: LD_INT 2
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 264
14020: PUSH
14021: LD_INT 51
14023: EQUAL
14024: AND
14025: PUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: LD_INT 29
14033: PPUSH
14034: CALL_OW 308
14038: AND
14039: PUSH
14040: LD_VAR 0 1
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: CALL_OW 289
14052: AND
14053: IFFALSE 14101
// begin goToUnload := Join ( goToUnload , unit ) ;
14055: LD_ADDR_EXP 8
14059: PUSH
14060: LD_EXP 8
14064: PPUSH
14065: LD_VAR 0 1
14069: PPUSH
14070: CALL 52586 0 2
14074: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14075: LD_VAR 0 1
14079: PPUSH
14080: LD_INT 113
14082: PPUSH
14083: LD_INT 117
14085: PPUSH
14086: CALL_OW 111
// AddComUnload ( unit ) ;
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 219
// exit ;
14099: GO 14456
// end ; if unit in goToUnload then
14101: LD_VAR 0 1
14105: PUSH
14106: LD_EXP 8
14110: IN
14111: IFFALSE 14169
// begin if GetCargo ( unit , mat_cans ) = 0 then
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 289
14125: PUSH
14126: LD_INT 0
14128: EQUAL
14129: IFFALSE 14167
// begin SetTag ( unit , tag + 2 ) ;
14131: LD_VAR 0 1
14135: PPUSH
14136: LD_VAR 0 6
14140: PUSH
14141: LD_INT 2
14143: PLUS
14144: PPUSH
14145: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14149: LD_ADDR_EXP 8
14153: PUSH
14154: LD_EXP 8
14158: PUSH
14159: LD_VAR 0 1
14163: DIFF
14164: ST_TO_ADDR
// end else
14165: GO 14169
// exit ;
14167: GO 14456
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14169: LD_VAR 0 7
14173: PUSH
14174: LD_INT 2
14176: EQUAL
14177: PUSH
14178: LD_VAR 0 5
14182: PUSH
14183: LD_INT 3
14185: GREATER
14186: AND
14187: PUSH
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 264
14197: PUSH
14198: LD_VAR 0 9
14202: IN
14203: NOT
14204: AND
14205: IFFALSE 14244
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14207: LD_VAR 0 1
14211: PPUSH
14212: LD_VAR 0 5
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: PUSH
14221: LD_INT 1
14223: ARRAY
14224: PPUSH
14225: LD_VAR 0 5
14229: PUSH
14230: LD_INT 1
14232: ARRAY
14233: PUSH
14234: LD_INT 2
14236: ARRAY
14237: PPUSH
14238: CALL_OW 116
14242: GO 14456
// if path > tag then
14244: LD_VAR 0 2
14248: PUSH
14249: LD_VAR 0 6
14253: GREATER
14254: IFFALSE 14425
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14256: LD_VAR 0 1
14260: PPUSH
14261: LD_VAR 0 2
14265: PUSH
14266: LD_VAR 0 6
14270: ARRAY
14271: PUSH
14272: LD_INT 1
14274: ARRAY
14275: PPUSH
14276: LD_VAR 0 2
14280: PUSH
14281: LD_VAR 0 6
14285: ARRAY
14286: PUSH
14287: LD_INT 2
14289: ARRAY
14290: PPUSH
14291: CALL_OW 297
14295: PUSH
14296: LD_INT 6
14298: GREATER
14299: IFFALSE 14409
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 257
14310: PUSH
14311: LD_INT 2
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: LD_INT 4
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: LIST
14324: IN
14325: IFFALSE 14368
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14327: LD_VAR 0 1
14331: PPUSH
14332: LD_VAR 0 2
14336: PUSH
14337: LD_VAR 0 6
14341: ARRAY
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: LD_VAR 0 2
14351: PUSH
14352: LD_VAR 0 6
14356: ARRAY
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: PPUSH
14362: CALL_OW 111
14366: GO 14407
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_VAR 0 2
14377: PUSH
14378: LD_VAR 0 6
14382: ARRAY
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: LD_VAR 0 2
14392: PUSH
14393: LD_VAR 0 6
14397: ARRAY
14398: PUSH
14399: LD_INT 2
14401: ARRAY
14402: PPUSH
14403: CALL_OW 114
14407: GO 14423
// SetTag ( unit , tag ) ;
14409: LD_VAR 0 1
14413: PPUSH
14414: LD_VAR 0 6
14418: PPUSH
14419: CALL_OW 109
// end else
14423: GO 14456
// if not IsInArea ( unit , area ) then
14425: LD_VAR 0 1
14429: PPUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: CALL_OW 308
14439: NOT
14440: IFFALSE 14456
// ComMoveToArea ( unit , area ) ;
14442: LD_VAR 0 1
14446: PPUSH
14447: LD_VAR 0 3
14451: PPUSH
14452: CALL_OW 113
// end ; end ; end_of_file
14456: LD_VAR 0 4
14460: RET
// every 0 0$20 trigger game do
14461: LD_EXP 2
14465: IFFALSE 14506
14467: GO 14469
14469: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14470: LD_INT 11
14472: PUSH
14473: LD_INT 12
14475: PUSH
14476: LD_INT 13
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: LIST
14483: PPUSH
14484: LD_EXP 29
14488: PUSH
14489: LD_INT 2
14491: ARRAY
14492: PPUSH
14493: LD_EXP 29
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: PPUSH
14502: CALL 14507 0 3
14506: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
14511: PPUSH
// if not areas then
14512: LD_VAR 0 1
14516: NOT
14517: IFFALSE 14521
// exit ;
14519: GO 14727
// x := 5 ;
14521: LD_ADDR_VAR 0 6
14525: PUSH
14526: LD_INT 5
14528: ST_TO_ADDR
// repeat wait ( time ) ;
14529: LD_VAR 0 2
14533: PPUSH
14534: CALL_OW 67
// for i in areas do
14538: LD_ADDR_VAR 0 5
14542: PUSH
14543: LD_VAR 0 1
14547: PUSH
14548: FOR_IN
14549: IFFALSE 14638
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
14551: LD_VAR 0 5
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 287
14563: PUSH
14564: LD_INT 15
14566: PUSH
14567: LD_INT 12
14569: PUSH
14570: LD_INT 10
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: PUSH
14578: LD_OWVAR 67
14582: ARRAY
14583: LESS
14584: IFFALSE 14636
// begin wait ( 0 0$10 * Difficulty ) ;
14586: LD_INT 350
14588: PUSH
14589: LD_OWVAR 67
14593: MUL
14594: PPUSH
14595: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14599: LD_VAR 0 6
14603: PPUSH
14604: LD_VAR 0 5
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 3
14625: PUSH
14626: LD_VAR 0 6
14630: PUSH
14631: LD_INT 10
14633: MUL
14634: MINUS
14635: ST_TO_ADDR
// end ; end ;
14636: GO 14548
14638: POP
14639: POP
// time := time + ( 0 0$5 * Difficulty ) ;
14640: LD_ADDR_VAR 0 2
14644: PUSH
14645: LD_VAR 0 2
14649: PUSH
14650: LD_INT 175
14652: PUSH
14653: LD_OWVAR 67
14657: MUL
14658: PLUS
14659: ST_TO_ADDR
// x := x - 1 ;
14660: LD_ADDR_VAR 0 6
14664: PUSH
14665: LD_VAR 0 6
14669: PUSH
14670: LD_INT 1
14672: MINUS
14673: ST_TO_ADDR
// if x = 0 then
14674: LD_VAR 0 6
14678: PUSH
14679: LD_INT 0
14681: EQUAL
14682: IFFALSE 14692
// x := 5 ;
14684: LD_ADDR_VAR 0 6
14688: PUSH
14689: LD_INT 5
14691: ST_TO_ADDR
// if time > 2 2$00 then
14692: LD_VAR 0 2
14696: PUSH
14697: LD_INT 4200
14699: GREATER
14700: IFFALSE 14710
// time := 0 0$40 ;
14702: LD_ADDR_VAR 0 2
14706: PUSH
14707: LD_INT 1400
14709: ST_TO_ADDR
// until not game or amount <= 0 ;
14710: LD_EXP 2
14714: NOT
14715: PUSH
14716: LD_VAR 0 3
14720: PUSH
14721: LD_INT 0
14723: LESSEQUAL
14724: OR
14725: IFFALSE 14529
// end ; end_of_file
14727: LD_VAR 0 4
14731: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14732: LD_VAR 0 1
14736: PUSH
14737: LD_INT 200
14739: DOUBLE
14740: GREATEREQUAL
14741: IFFALSE 14749
14743: LD_INT 299
14745: DOUBLE
14746: LESSEQUAL
14747: IFTRUE 14751
14749: GO 14783
14751: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_VAR 0 2
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_VAR 0 4
14771: PPUSH
14772: LD_VAR 0 5
14776: PPUSH
14777: CALL 73865 0 5
14781: GO 14860
14783: LD_INT 300
14785: DOUBLE
14786: GREATEREQUAL
14787: IFFALSE 14795
14789: LD_INT 399
14791: DOUBLE
14792: LESSEQUAL
14793: IFTRUE 14797
14795: GO 14859
14797: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14798: LD_VAR 0 1
14802: PPUSH
14803: LD_VAR 0 2
14807: PPUSH
14808: LD_VAR 0 3
14812: PPUSH
14813: LD_VAR 0 4
14817: PPUSH
14818: LD_VAR 0 5
14822: PPUSH
14823: LD_VAR 0 6
14827: PPUSH
14828: LD_VAR 0 7
14832: PPUSH
14833: LD_VAR 0 8
14837: PPUSH
14838: LD_VAR 0 9
14842: PPUSH
14843: LD_VAR 0 10
14847: PPUSH
14848: LD_VAR 0 11
14852: PPUSH
14853: CALL 70190 0 11
14857: GO 14860
14859: POP
// end ;
14860: PPOPN 11
14862: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14863: LD_VAR 0 1
14867: PPUSH
14868: LD_VAR 0 2
14872: PPUSH
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_VAR 0 4
14882: PPUSH
14883: LD_VAR 0 5
14887: PPUSH
14888: CALL 73601 0 5
// end ; end_of_file
14892: PPOPN 5
14894: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
14895: LD_INT 0
14897: PPUSH
14898: PPUSH
// if exist_mode then
14899: LD_VAR 0 2
14903: IFFALSE 14928
// unit := CreateCharacter ( prefix & ident ) else
14905: LD_ADDR_VAR 0 5
14909: PUSH
14910: LD_VAR 0 3
14914: PUSH
14915: LD_VAR 0 1
14919: STR
14920: PPUSH
14921: CALL_OW 34
14925: ST_TO_ADDR
14926: GO 14943
// unit := NewCharacter ( ident ) ;
14928: LD_ADDR_VAR 0 5
14932: PUSH
14933: LD_VAR 0 1
14937: PPUSH
14938: CALL_OW 25
14942: ST_TO_ADDR
// result := unit ;
14943: LD_ADDR_VAR 0 4
14947: PUSH
14948: LD_VAR 0 5
14952: ST_TO_ADDR
// end ;
14953: LD_VAR 0 4
14957: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
14958: LD_INT 0
14960: PPUSH
14961: PPUSH
// if not side or not nation then
14962: LD_VAR 0 1
14966: NOT
14967: PUSH
14968: LD_VAR 0 2
14972: NOT
14973: OR
14974: IFFALSE 14978
// exit ;
14976: GO 15746
// case nation of nation_american :
14978: LD_VAR 0 2
14982: PUSH
14983: LD_INT 1
14985: DOUBLE
14986: EQUAL
14987: IFTRUE 14991
14989: GO 15205
14991: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
14992: LD_ADDR_VAR 0 4
14996: PUSH
14997: LD_INT 35
14999: PUSH
15000: LD_INT 45
15002: PUSH
15003: LD_INT 46
15005: PUSH
15006: LD_INT 47
15008: PUSH
15009: LD_INT 82
15011: PUSH
15012: LD_INT 83
15014: PUSH
15015: LD_INT 84
15017: PUSH
15018: LD_INT 85
15020: PUSH
15021: LD_INT 86
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: LD_INT 2
15029: PUSH
15030: LD_INT 6
15032: PUSH
15033: LD_INT 15
15035: PUSH
15036: LD_INT 16
15038: PUSH
15039: LD_INT 7
15041: PUSH
15042: LD_INT 12
15044: PUSH
15045: LD_INT 13
15047: PUSH
15048: LD_INT 10
15050: PUSH
15051: LD_INT 14
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 25
15065: PUSH
15066: LD_INT 32
15068: PUSH
15069: LD_INT 27
15071: PUSH
15072: LD_INT 36
15074: PUSH
15075: LD_INT 69
15077: PUSH
15078: LD_INT 39
15080: PUSH
15081: LD_INT 34
15083: PUSH
15084: LD_INT 40
15086: PUSH
15087: LD_INT 48
15089: PUSH
15090: LD_INT 49
15092: PUSH
15093: LD_INT 50
15095: PUSH
15096: LD_INT 51
15098: PUSH
15099: LD_INT 52
15101: PUSH
15102: LD_INT 53
15104: PUSH
15105: LD_INT 54
15107: PUSH
15108: LD_INT 55
15110: PUSH
15111: LD_INT 56
15113: PUSH
15114: LD_INT 57
15116: PUSH
15117: LD_INT 58
15119: PUSH
15120: LD_INT 59
15122: PUSH
15123: LD_INT 60
15125: PUSH
15126: LD_INT 61
15128: PUSH
15129: LD_INT 62
15131: PUSH
15132: LD_INT 80
15134: PUSH
15135: LD_INT 82
15137: PUSH
15138: LD_INT 83
15140: PUSH
15141: LD_INT 84
15143: PUSH
15144: LD_INT 85
15146: PUSH
15147: LD_INT 86
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: ST_TO_ADDR
15203: GO 15670
15205: LD_INT 2
15207: DOUBLE
15208: EQUAL
15209: IFTRUE 15213
15211: GO 15439
15213: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15214: LD_ADDR_VAR 0 4
15218: PUSH
15219: LD_INT 35
15221: PUSH
15222: LD_INT 45
15224: PUSH
15225: LD_INT 46
15227: PUSH
15228: LD_INT 47
15230: PUSH
15231: LD_INT 82
15233: PUSH
15234: LD_INT 83
15236: PUSH
15237: LD_INT 84
15239: PUSH
15240: LD_INT 85
15242: PUSH
15243: LD_INT 87
15245: PUSH
15246: LD_INT 70
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: LD_INT 11
15254: PUSH
15255: LD_INT 3
15257: PUSH
15258: LD_INT 4
15260: PUSH
15261: LD_INT 5
15263: PUSH
15264: LD_INT 6
15266: PUSH
15267: LD_INT 15
15269: PUSH
15270: LD_INT 18
15272: PUSH
15273: LD_INT 7
15275: PUSH
15276: LD_INT 17
15278: PUSH
15279: LD_INT 8
15281: PUSH
15282: LD_INT 20
15284: PUSH
15285: LD_INT 21
15287: PUSH
15288: LD_INT 22
15290: PUSH
15291: LD_INT 72
15293: PUSH
15294: LD_INT 26
15296: PUSH
15297: LD_INT 69
15299: PUSH
15300: LD_INT 39
15302: PUSH
15303: LD_INT 40
15305: PUSH
15306: LD_INT 41
15308: PUSH
15309: LD_INT 42
15311: PUSH
15312: LD_INT 43
15314: PUSH
15315: LD_INT 48
15317: PUSH
15318: LD_INT 49
15320: PUSH
15321: LD_INT 50
15323: PUSH
15324: LD_INT 51
15326: PUSH
15327: LD_INT 52
15329: PUSH
15330: LD_INT 53
15332: PUSH
15333: LD_INT 54
15335: PUSH
15336: LD_INT 55
15338: PUSH
15339: LD_INT 56
15341: PUSH
15342: LD_INT 60
15344: PUSH
15345: LD_INT 61
15347: PUSH
15348: LD_INT 62
15350: PUSH
15351: LD_INT 66
15353: PUSH
15354: LD_INT 67
15356: PUSH
15357: LD_INT 68
15359: PUSH
15360: LD_INT 81
15362: PUSH
15363: LD_INT 82
15365: PUSH
15366: LD_INT 83
15368: PUSH
15369: LD_INT 84
15371: PUSH
15372: LD_INT 85
15374: PUSH
15375: LD_INT 87
15377: PUSH
15378: LD_INT 88
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: ST_TO_ADDR
15437: GO 15670
15439: LD_INT 3
15441: DOUBLE
15442: EQUAL
15443: IFTRUE 15447
15445: GO 15669
15447: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15448: LD_ADDR_VAR 0 4
15452: PUSH
15453: LD_INT 46
15455: PUSH
15456: LD_INT 47
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: LD_INT 82
15467: PUSH
15468: LD_INT 83
15470: PUSH
15471: LD_INT 84
15473: PUSH
15474: LD_INT 85
15476: PUSH
15477: LD_INT 86
15479: PUSH
15480: LD_INT 11
15482: PUSH
15483: LD_INT 9
15485: PUSH
15486: LD_INT 20
15488: PUSH
15489: LD_INT 19
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 24
15497: PUSH
15498: LD_INT 22
15500: PUSH
15501: LD_INT 25
15503: PUSH
15504: LD_INT 28
15506: PUSH
15507: LD_INT 29
15509: PUSH
15510: LD_INT 30
15512: PUSH
15513: LD_INT 31
15515: PUSH
15516: LD_INT 37
15518: PUSH
15519: LD_INT 38
15521: PUSH
15522: LD_INT 32
15524: PUSH
15525: LD_INT 27
15527: PUSH
15528: LD_INT 33
15530: PUSH
15531: LD_INT 69
15533: PUSH
15534: LD_INT 39
15536: PUSH
15537: LD_INT 34
15539: PUSH
15540: LD_INT 40
15542: PUSH
15543: LD_INT 71
15545: PUSH
15546: LD_INT 23
15548: PUSH
15549: LD_INT 44
15551: PUSH
15552: LD_INT 48
15554: PUSH
15555: LD_INT 49
15557: PUSH
15558: LD_INT 50
15560: PUSH
15561: LD_INT 51
15563: PUSH
15564: LD_INT 52
15566: PUSH
15567: LD_INT 53
15569: PUSH
15570: LD_INT 54
15572: PUSH
15573: LD_INT 55
15575: PUSH
15576: LD_INT 56
15578: PUSH
15579: LD_INT 57
15581: PUSH
15582: LD_INT 58
15584: PUSH
15585: LD_INT 59
15587: PUSH
15588: LD_INT 63
15590: PUSH
15591: LD_INT 64
15593: PUSH
15594: LD_INT 65
15596: PUSH
15597: LD_INT 82
15599: PUSH
15600: LD_INT 83
15602: PUSH
15603: LD_INT 84
15605: PUSH
15606: LD_INT 85
15608: PUSH
15609: LD_INT 86
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: ST_TO_ADDR
15667: GO 15670
15669: POP
// if state > - 1 and state < 3 then
15670: LD_VAR 0 3
15674: PUSH
15675: LD_INT 1
15677: NEG
15678: GREATER
15679: PUSH
15680: LD_VAR 0 3
15684: PUSH
15685: LD_INT 3
15687: LESS
15688: AND
15689: IFFALSE 15746
// for i in result do
15691: LD_ADDR_VAR 0 5
15695: PUSH
15696: LD_VAR 0 4
15700: PUSH
15701: FOR_IN
15702: IFFALSE 15744
// if GetTech ( i , side ) <> state then
15704: LD_VAR 0 5
15708: PPUSH
15709: LD_VAR 0 1
15713: PPUSH
15714: CALL_OW 321
15718: PUSH
15719: LD_VAR 0 3
15723: NONEQUAL
15724: IFFALSE 15742
// result := result diff i ;
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: LD_VAR 0 4
15735: PUSH
15736: LD_VAR 0 5
15740: DIFF
15741: ST_TO_ADDR
15742: GO 15701
15744: POP
15745: POP
// end ;
15746: LD_VAR 0 4
15750: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15751: LD_INT 0
15753: PPUSH
15754: PPUSH
15755: PPUSH
// result := true ;
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15764: LD_ADDR_VAR 0 5
15768: PUSH
15769: LD_VAR 0 2
15773: PPUSH
15774: CALL_OW 480
15778: ST_TO_ADDR
// if not tmp then
15779: LD_VAR 0 5
15783: NOT
15784: IFFALSE 15788
// exit ;
15786: GO 15837
// for i in tmp do
15788: LD_ADDR_VAR 0 4
15792: PUSH
15793: LD_VAR 0 5
15797: PUSH
15798: FOR_IN
15799: IFFALSE 15835
// if GetTech ( i , side ) <> state_researched then
15801: LD_VAR 0 4
15805: PPUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 321
15815: PUSH
15816: LD_INT 2
15818: NONEQUAL
15819: IFFALSE 15833
// begin result := false ;
15821: LD_ADDR_VAR 0 3
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
// exit ;
15829: POP
15830: POP
15831: GO 15837
// end ;
15833: GO 15798
15835: POP
15836: POP
// end ;
15837: LD_VAR 0 3
15841: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
15850: PPUSH
15851: PPUSH
15852: PPUSH
15853: PPUSH
15854: PPUSH
15855: PPUSH
15856: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15857: LD_VAR 0 1
15861: NOT
15862: PUSH
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 257
15872: PUSH
15873: LD_INT 9
15875: NONEQUAL
15876: OR
15877: IFFALSE 15881
// exit ;
15879: GO 16454
// side := GetSide ( unit ) ;
15881: LD_ADDR_VAR 0 9
15885: PUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 255
15895: ST_TO_ADDR
// tech_space := tech_spacanom ;
15896: LD_ADDR_VAR 0 12
15900: PUSH
15901: LD_INT 29
15903: ST_TO_ADDR
// tech_time := tech_taurad ;
15904: LD_ADDR_VAR 0 13
15908: PUSH
15909: LD_INT 28
15911: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
15912: LD_ADDR_VAR 0 11
15916: PUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 310
15926: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
15927: LD_VAR 0 11
15931: PPUSH
15932: CALL_OW 247
15936: PUSH
15937: LD_INT 2
15939: EQUAL
15940: IFFALSE 15944
// exit ;
15942: GO 16454
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15944: LD_ADDR_VAR 0 8
15948: PUSH
15949: LD_INT 81
15951: PUSH
15952: LD_VAR 0 9
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 69
15986: ST_TO_ADDR
// if not tmp then
15987: LD_VAR 0 8
15991: NOT
15992: IFFALSE 15996
// exit ;
15994: GO 16454
// if in_unit then
15996: LD_VAR 0 11
16000: IFFALSE 16024
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16002: LD_ADDR_VAR 0 10
16006: PUSH
16007: LD_VAR 0 8
16011: PPUSH
16012: LD_VAR 0 11
16016: PPUSH
16017: CALL_OW 74
16021: ST_TO_ADDR
16022: GO 16044
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16024: LD_ADDR_VAR 0 10
16028: PUSH
16029: LD_VAR 0 8
16033: PPUSH
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 74
16043: ST_TO_ADDR
// if not enemy then
16044: LD_VAR 0 10
16048: NOT
16049: IFFALSE 16053
// exit ;
16051: GO 16454
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16053: LD_VAR 0 11
16057: PUSH
16058: LD_VAR 0 11
16062: PPUSH
16063: LD_VAR 0 10
16067: PPUSH
16068: CALL_OW 296
16072: PUSH
16073: LD_INT 13
16075: GREATER
16076: AND
16077: PUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: LD_VAR 0 10
16087: PPUSH
16088: CALL_OW 296
16092: PUSH
16093: LD_INT 12
16095: GREATER
16096: OR
16097: IFFALSE 16101
// exit ;
16099: GO 16454
// missile := [ 1 ] ;
16101: LD_ADDR_VAR 0 14
16105: PUSH
16106: LD_INT 1
16108: PUSH
16109: EMPTY
16110: LIST
16111: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16112: LD_VAR 0 9
16116: PPUSH
16117: LD_VAR 0 12
16121: PPUSH
16122: CALL_OW 325
16126: IFFALSE 16155
// missile := Replace ( missile , missile + 1 , 2 ) ;
16128: LD_ADDR_VAR 0 14
16132: PUSH
16133: LD_VAR 0 14
16137: PPUSH
16138: LD_VAR 0 14
16142: PUSH
16143: LD_INT 1
16145: PLUS
16146: PPUSH
16147: LD_INT 2
16149: PPUSH
16150: CALL_OW 1
16154: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16155: LD_VAR 0 9
16159: PPUSH
16160: LD_VAR 0 13
16164: PPUSH
16165: CALL_OW 325
16169: PUSH
16170: LD_VAR 0 10
16174: PPUSH
16175: CALL_OW 255
16179: PPUSH
16180: LD_VAR 0 13
16184: PPUSH
16185: CALL_OW 325
16189: NOT
16190: AND
16191: IFFALSE 16220
// missile := Replace ( missile , missile + 1 , 3 ) ;
16193: LD_ADDR_VAR 0 14
16197: PUSH
16198: LD_VAR 0 14
16202: PPUSH
16203: LD_VAR 0 14
16207: PUSH
16208: LD_INT 1
16210: PLUS
16211: PPUSH
16212: LD_INT 3
16214: PPUSH
16215: CALL_OW 1
16219: ST_TO_ADDR
// if missile < 2 then
16220: LD_VAR 0 14
16224: PUSH
16225: LD_INT 2
16227: LESS
16228: IFFALSE 16232
// exit ;
16230: GO 16454
// x := GetX ( enemy ) ;
16232: LD_ADDR_VAR 0 4
16236: PUSH
16237: LD_VAR 0 10
16241: PPUSH
16242: CALL_OW 250
16246: ST_TO_ADDR
// y := GetY ( enemy ) ;
16247: LD_ADDR_VAR 0 5
16251: PUSH
16252: LD_VAR 0 10
16256: PPUSH
16257: CALL_OW 251
16261: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16262: LD_ADDR_VAR 0 6
16266: PUSH
16267: LD_VAR 0 4
16271: PUSH
16272: LD_INT 1
16274: NEG
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 12
16283: PLUS
16284: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16285: LD_ADDR_VAR 0 7
16289: PUSH
16290: LD_VAR 0 5
16294: PUSH
16295: LD_INT 1
16297: NEG
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 12
16306: PLUS
16307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16308: LD_VAR 0 6
16312: PPUSH
16313: LD_VAR 0 7
16317: PPUSH
16318: CALL_OW 488
16322: NOT
16323: IFFALSE 16345
// begin _x := x ;
16325: LD_ADDR_VAR 0 6
16329: PUSH
16330: LD_VAR 0 4
16334: ST_TO_ADDR
// _y := y ;
16335: LD_ADDR_VAR 0 7
16339: PUSH
16340: LD_VAR 0 5
16344: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_INT 1
16352: PPUSH
16353: LD_VAR 0 14
16357: PPUSH
16358: CALL_OW 12
16362: ST_TO_ADDR
// case i of 1 :
16363: LD_VAR 0 3
16367: PUSH
16368: LD_INT 1
16370: DOUBLE
16371: EQUAL
16372: IFTRUE 16376
16374: GO 16393
16376: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_VAR 0 10
16386: PPUSH
16387: CALL_OW 115
16391: GO 16454
16393: LD_INT 2
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 16423
16401: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 6
16411: PPUSH
16412: LD_VAR 0 7
16416: PPUSH
16417: CALL_OW 153
16421: GO 16454
16423: LD_INT 3
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16453
16431: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_VAR 0 6
16441: PPUSH
16442: LD_VAR 0 7
16446: PPUSH
16447: CALL_OW 154
16451: GO 16454
16453: POP
// end ;
16454: LD_VAR 0 2
16458: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
16463: PPUSH
16464: PPUSH
16465: PPUSH
16466: PPUSH
// if not unit or not building then
16467: LD_VAR 0 1
16471: NOT
16472: PUSH
16473: LD_VAR 0 2
16477: NOT
16478: OR
16479: IFFALSE 16483
// exit ;
16481: GO 16641
// x := GetX ( building ) ;
16483: LD_ADDR_VAR 0 5
16487: PUSH
16488: LD_VAR 0 2
16492: PPUSH
16493: CALL_OW 250
16497: ST_TO_ADDR
// y := GetY ( building ) ;
16498: LD_ADDR_VAR 0 6
16502: PUSH
16503: LD_VAR 0 2
16507: PPUSH
16508: CALL_OW 251
16512: ST_TO_ADDR
// for i = 0 to 5 do
16513: LD_ADDR_VAR 0 4
16517: PUSH
16518: DOUBLE
16519: LD_INT 0
16521: DEC
16522: ST_TO_ADDR
16523: LD_INT 5
16525: PUSH
16526: FOR_TO
16527: IFFALSE 16639
// begin _x := ShiftX ( x , i , 3 ) ;
16529: LD_ADDR_VAR 0 7
16533: PUSH
16534: LD_VAR 0 5
16538: PPUSH
16539: LD_VAR 0 4
16543: PPUSH
16544: LD_INT 3
16546: PPUSH
16547: CALL_OW 272
16551: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16552: LD_ADDR_VAR 0 8
16556: PUSH
16557: LD_VAR 0 6
16561: PPUSH
16562: LD_VAR 0 4
16566: PPUSH
16567: LD_INT 3
16569: PPUSH
16570: CALL_OW 273
16574: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16575: LD_VAR 0 7
16579: PPUSH
16580: LD_VAR 0 8
16584: PPUSH
16585: CALL_OW 488
16589: NOT
16590: IFFALSE 16594
// continue ;
16592: GO 16526
// if HexInfo ( _x , _y ) = 0 then
16594: LD_VAR 0 7
16598: PPUSH
16599: LD_VAR 0 8
16603: PPUSH
16604: CALL_OW 428
16608: PUSH
16609: LD_INT 0
16611: EQUAL
16612: IFFALSE 16637
// begin ComMoveXY ( unit , _x , _y ) ;
16614: LD_VAR 0 1
16618: PPUSH
16619: LD_VAR 0 7
16623: PPUSH
16624: LD_VAR 0 8
16628: PPUSH
16629: CALL_OW 111
// exit ;
16633: POP
16634: POP
16635: GO 16641
// end ; end ;
16637: GO 16526
16639: POP
16640: POP
// end ;
16641: LD_VAR 0 3
16645: RET
// export function ScanBase ( side , base_area ) ; begin
16646: LD_INT 0
16648: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16649: LD_ADDR_VAR 0 3
16653: PUSH
16654: LD_VAR 0 2
16658: PPUSH
16659: LD_INT 81
16661: PUSH
16662: LD_VAR 0 1
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PPUSH
16671: CALL_OW 70
16675: ST_TO_ADDR
// end ;
16676: LD_VAR 0 3
16680: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16681: LD_INT 0
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// result := false ;
16687: LD_ADDR_VAR 0 2
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// side := GetSide ( unit ) ;
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 255
16709: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16710: LD_ADDR_VAR 0 4
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 248
16724: ST_TO_ADDR
// case nat of 1 :
16725: LD_VAR 0 4
16729: PUSH
16730: LD_INT 1
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16749
16738: POP
// tech := tech_lassight ; 2 :
16739: LD_ADDR_VAR 0 5
16743: PUSH
16744: LD_INT 12
16746: ST_TO_ADDR
16747: GO 16788
16749: LD_INT 2
16751: DOUBLE
16752: EQUAL
16753: IFTRUE 16757
16755: GO 16768
16757: POP
// tech := tech_mortar ; 3 :
16758: LD_ADDR_VAR 0 5
16762: PUSH
16763: LD_INT 41
16765: ST_TO_ADDR
16766: GO 16788
16768: LD_INT 3
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 16787
16776: POP
// tech := tech_bazooka ; end ;
16777: LD_ADDR_VAR 0 5
16781: PUSH
16782: LD_INT 44
16784: ST_TO_ADDR
16785: GO 16788
16787: POP
// if Researched ( side , tech ) then
16788: LD_VAR 0 3
16792: PPUSH
16793: LD_VAR 0 5
16797: PPUSH
16798: CALL_OW 325
16802: IFFALSE 16829
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16804: LD_ADDR_VAR 0 2
16808: PUSH
16809: LD_INT 5
16811: PUSH
16812: LD_INT 8
16814: PUSH
16815: LD_INT 9
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: LIST
16822: PUSH
16823: LD_VAR 0 4
16827: ARRAY
16828: ST_TO_ADDR
// end ;
16829: LD_VAR 0 2
16833: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16834: LD_INT 0
16836: PPUSH
16837: PPUSH
16838: PPUSH
// if not mines then
16839: LD_VAR 0 2
16843: NOT
16844: IFFALSE 16848
// exit ;
16846: GO 16992
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16848: LD_ADDR_VAR 0 5
16852: PUSH
16853: LD_INT 81
16855: PUSH
16856: LD_VAR 0 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 3
16867: PUSH
16868: LD_INT 21
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 69
16890: ST_TO_ADDR
// for i in mines do
16891: LD_ADDR_VAR 0 4
16895: PUSH
16896: LD_VAR 0 2
16900: PUSH
16901: FOR_IN
16902: IFFALSE 16990
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16904: LD_VAR 0 4
16908: PUSH
16909: LD_INT 1
16911: ARRAY
16912: PPUSH
16913: LD_VAR 0 4
16917: PUSH
16918: LD_INT 2
16920: ARRAY
16921: PPUSH
16922: CALL_OW 458
16926: NOT
16927: IFFALSE 16931
// continue ;
16929: GO 16901
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16931: LD_VAR 0 4
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: LD_VAR 0 4
16944: PUSH
16945: LD_INT 2
16947: ARRAY
16948: PPUSH
16949: CALL_OW 428
16953: PUSH
16954: LD_VAR 0 5
16958: IN
16959: IFFALSE 16988
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16961: LD_VAR 0 4
16965: PUSH
16966: LD_INT 1
16968: ARRAY
16969: PPUSH
16970: LD_VAR 0 4
16974: PUSH
16975: LD_INT 2
16977: ARRAY
16978: PPUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 456
// end ;
16988: GO 16901
16990: POP
16991: POP
// end ;
16992: LD_VAR 0 3
16996: RET
// export function Count ( array ) ; begin
16997: LD_INT 0
16999: PPUSH
// result := array + 0 ;
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_VAR 0 1
17009: PUSH
17010: LD_INT 0
17012: PLUS
17013: ST_TO_ADDR
// end ;
17014: LD_VAR 0 2
17018: RET
// export function IsEmpty ( building ) ; begin
17019: LD_INT 0
17021: PPUSH
// if not building then
17022: LD_VAR 0 1
17026: NOT
17027: IFFALSE 17031
// exit ;
17029: GO 17074
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_VAR 0 1
17040: PUSH
17041: LD_INT 22
17043: PUSH
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 255
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 58
17060: PUSH
17061: EMPTY
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PPUSH
17068: CALL_OW 69
17072: IN
17073: ST_TO_ADDR
// end ;
17074: LD_VAR 0 2
17078: RET
// export function IsNotFull ( building ) ; var places ; begin
17079: LD_INT 0
17081: PPUSH
17082: PPUSH
// if not building then
17083: LD_VAR 0 1
17087: NOT
17088: IFFALSE 17092
// exit ;
17090: GO 17120
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17092: LD_ADDR_VAR 0 2
17096: PUSH
17097: LD_VAR 0 1
17101: PPUSH
17102: LD_INT 3
17104: PUSH
17105: LD_INT 62
17107: PUSH
17108: EMPTY
17109: LIST
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 72
17119: ST_TO_ADDR
// end ;
17120: LD_VAR 0 2
17124: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17125: LD_INT 0
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
// tmp := [ ] ;
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: EMPTY
17137: ST_TO_ADDR
// list := [ ] ;
17138: LD_ADDR_VAR 0 5
17142: PUSH
17143: EMPTY
17144: ST_TO_ADDR
// for i = 16 to 25 do
17145: LD_ADDR_VAR 0 4
17149: PUSH
17150: DOUBLE
17151: LD_INT 16
17153: DEC
17154: ST_TO_ADDR
17155: LD_INT 25
17157: PUSH
17158: FOR_TO
17159: IFFALSE 17232
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17161: LD_ADDR_VAR 0 3
17165: PUSH
17166: LD_VAR 0 3
17170: PUSH
17171: LD_INT 22
17173: PUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 255
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 91
17190: PUSH
17191: LD_VAR 0 1
17195: PUSH
17196: LD_INT 6
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: LD_VAR 0 4
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: PUSH
17221: EMPTY
17222: LIST
17223: PPUSH
17224: CALL_OW 69
17228: ADD
17229: ST_TO_ADDR
17230: GO 17158
17232: POP
17233: POP
// for i = 1 to tmp do
17234: LD_ADDR_VAR 0 4
17238: PUSH
17239: DOUBLE
17240: LD_INT 1
17242: DEC
17243: ST_TO_ADDR
17244: LD_VAR 0 3
17248: PUSH
17249: FOR_TO
17250: IFFALSE 17338
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17252: LD_ADDR_VAR 0 5
17256: PUSH
17257: LD_VAR 0 5
17261: PUSH
17262: LD_VAR 0 3
17266: PUSH
17267: LD_VAR 0 4
17271: ARRAY
17272: PPUSH
17273: CALL_OW 266
17277: PUSH
17278: LD_VAR 0 3
17282: PUSH
17283: LD_VAR 0 4
17287: ARRAY
17288: PPUSH
17289: CALL_OW 250
17293: PUSH
17294: LD_VAR 0 3
17298: PUSH
17299: LD_VAR 0 4
17303: ARRAY
17304: PPUSH
17305: CALL_OW 251
17309: PUSH
17310: LD_VAR 0 3
17314: PUSH
17315: LD_VAR 0 4
17319: ARRAY
17320: PPUSH
17321: CALL_OW 254
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: EMPTY
17333: LIST
17334: ADD
17335: ST_TO_ADDR
17336: GO 17249
17338: POP
17339: POP
// result := list ;
17340: LD_ADDR_VAR 0 2
17344: PUSH
17345: LD_VAR 0 5
17349: ST_TO_ADDR
// end ;
17350: LD_VAR 0 2
17354: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17355: LD_INT 0
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
// if not factory then
17364: LD_VAR 0 1
17368: NOT
17369: IFFALSE 17373
// exit ;
17371: GO 17966
// if control = control_apeman then
17373: LD_VAR 0 4
17377: PUSH
17378: LD_INT 5
17380: EQUAL
17381: IFFALSE 17490
// begin tmp := UnitsInside ( factory ) ;
17383: LD_ADDR_VAR 0 8
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 313
17397: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17398: LD_VAR 0 8
17402: PPUSH
17403: LD_INT 25
17405: PUSH
17406: LD_INT 12
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PPUSH
17413: CALL_OW 72
17417: NOT
17418: IFFALSE 17428
// control := control_manual ;
17420: LD_ADDR_VAR 0 4
17424: PUSH
17425: LD_INT 1
17427: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17428: LD_ADDR_VAR 0 8
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL 17125 0 1
17442: ST_TO_ADDR
// if tmp then
17443: LD_VAR 0 8
17447: IFFALSE 17490
// begin for i in tmp do
17449: LD_ADDR_VAR 0 7
17453: PUSH
17454: LD_VAR 0 8
17458: PUSH
17459: FOR_IN
17460: IFFALSE 17488
// if i [ 1 ] = b_ext_radio then
17462: LD_VAR 0 7
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PUSH
17471: LD_INT 22
17473: EQUAL
17474: IFFALSE 17486
// begin control := control_remote ;
17476: LD_ADDR_VAR 0 4
17480: PUSH
17481: LD_INT 2
17483: ST_TO_ADDR
// break ;
17484: GO 17488
// end ;
17486: GO 17459
17488: POP
17489: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_VAR 0 2
17499: PPUSH
17500: LD_VAR 0 3
17504: PPUSH
17505: LD_VAR 0 4
17509: PPUSH
17510: LD_VAR 0 5
17514: PPUSH
17515: CALL_OW 448
17519: IFFALSE 17554
// begin result := [ chassis , engine , control , weapon ] ;
17521: LD_ADDR_VAR 0 6
17525: PUSH
17526: LD_VAR 0 2
17530: PUSH
17531: LD_VAR 0 3
17535: PUSH
17536: LD_VAR 0 4
17540: PUSH
17541: LD_VAR 0 5
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: ST_TO_ADDR
// exit ;
17552: GO 17966
// end ; _chassis := AvailableChassisList ( factory ) ;
17554: LD_ADDR_VAR 0 9
17558: PUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 475
17568: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17569: LD_ADDR_VAR 0 11
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 476
17583: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17584: LD_ADDR_VAR 0 12
17588: PUSH
17589: LD_VAR 0 1
17593: PPUSH
17594: CALL_OW 477
17598: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17599: LD_ADDR_VAR 0 10
17603: PUSH
17604: LD_VAR 0 1
17608: PPUSH
17609: CALL_OW 478
17613: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17614: LD_VAR 0 9
17618: NOT
17619: PUSH
17620: LD_VAR 0 11
17624: NOT
17625: OR
17626: PUSH
17627: LD_VAR 0 12
17631: NOT
17632: OR
17633: PUSH
17634: LD_VAR 0 10
17638: NOT
17639: OR
17640: IFFALSE 17675
// begin result := [ chassis , engine , control , weapon ] ;
17642: LD_ADDR_VAR 0 6
17646: PUSH
17647: LD_VAR 0 2
17651: PUSH
17652: LD_VAR 0 3
17656: PUSH
17657: LD_VAR 0 4
17661: PUSH
17662: LD_VAR 0 5
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: ST_TO_ADDR
// exit ;
17673: GO 17966
// end ; if not chassis in _chassis then
17675: LD_VAR 0 2
17679: PUSH
17680: LD_VAR 0 9
17684: IN
17685: NOT
17686: IFFALSE 17712
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_VAR 0 9
17697: PUSH
17698: LD_INT 1
17700: PPUSH
17701: LD_VAR 0 9
17705: PPUSH
17706: CALL_OW 12
17710: ARRAY
17711: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17712: LD_VAR 0 2
17716: PPUSH
17717: LD_VAR 0 3
17721: PPUSH
17722: CALL 17971 0 2
17726: NOT
17727: IFFALSE 17786
// repeat engine := _engine [ 1 ] ;
17729: LD_ADDR_VAR 0 3
17733: PUSH
17734: LD_VAR 0 11
17738: PUSH
17739: LD_INT 1
17741: ARRAY
17742: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17743: LD_ADDR_VAR 0 11
17747: PUSH
17748: LD_VAR 0 11
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 3
17760: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17761: LD_VAR 0 2
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: CALL 17971 0 2
17775: PUSH
17776: LD_VAR 0 11
17780: PUSH
17781: EMPTY
17782: EQUAL
17783: OR
17784: IFFALSE 17729
// if not control in _control then
17786: LD_VAR 0 4
17790: PUSH
17791: LD_VAR 0 12
17795: IN
17796: NOT
17797: IFFALSE 17823
// control := _control [ rand ( 1 , _control ) ] ;
17799: LD_ADDR_VAR 0 4
17803: PUSH
17804: LD_VAR 0 12
17808: PUSH
17809: LD_INT 1
17811: PPUSH
17812: LD_VAR 0 12
17816: PPUSH
17817: CALL_OW 12
17821: ARRAY
17822: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17823: LD_VAR 0 2
17827: PPUSH
17828: LD_VAR 0 5
17832: PPUSH
17833: CALL 18191 0 2
17837: NOT
17838: IFFALSE 17897
// repeat weapon := _weapon [ 1 ] ;
17840: LD_ADDR_VAR 0 5
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_INT 1
17852: ARRAY
17853: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17854: LD_ADDR_VAR 0 10
17858: PUSH
17859: LD_VAR 0 10
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 3
17871: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17872: LD_VAR 0 2
17876: PPUSH
17877: LD_VAR 0 5
17881: PPUSH
17882: CALL 18191 0 2
17886: PUSH
17887: LD_VAR 0 10
17891: PUSH
17892: EMPTY
17893: EQUAL
17894: OR
17895: IFFALSE 17840
// result := [ ] ;
17897: LD_ADDR_VAR 0 6
17901: PUSH
17902: EMPTY
17903: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17904: LD_VAR 0 1
17908: PPUSH
17909: LD_VAR 0 2
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_VAR 0 5
17928: PPUSH
17929: CALL_OW 448
17933: IFFALSE 17966
// result := [ chassis , engine , control , weapon ] ;
17935: LD_ADDR_VAR 0 6
17939: PUSH
17940: LD_VAR 0 2
17944: PUSH
17945: LD_VAR 0 3
17949: PUSH
17950: LD_VAR 0 4
17954: PUSH
17955: LD_VAR 0 5
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: ST_TO_ADDR
// end ;
17966: LD_VAR 0 6
17970: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17971: LD_INT 0
17973: PPUSH
// if not chassis or not engine then
17974: LD_VAR 0 1
17978: NOT
17979: PUSH
17980: LD_VAR 0 2
17984: NOT
17985: OR
17986: IFFALSE 17990
// exit ;
17988: GO 18186
// case engine of engine_solar :
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 2
17997: DOUBLE
17998: EQUAL
17999: IFTRUE 18003
18001: GO 18041
18003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18004: LD_ADDR_VAR 0 3
18008: PUSH
18009: LD_INT 11
18011: PUSH
18012: LD_INT 12
18014: PUSH
18015: LD_INT 13
18017: PUSH
18018: LD_INT 14
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: ST_TO_ADDR
18039: GO 18170
18041: LD_INT 1
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18111
18049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18050: LD_ADDR_VAR 0 3
18054: PUSH
18055: LD_INT 11
18057: PUSH
18058: LD_INT 12
18060: PUSH
18061: LD_INT 13
18063: PUSH
18064: LD_INT 14
18066: PUSH
18067: LD_INT 1
18069: PUSH
18070: LD_INT 2
18072: PUSH
18073: LD_INT 3
18075: PUSH
18076: LD_INT 4
18078: PUSH
18079: LD_INT 5
18081: PUSH
18082: LD_INT 21
18084: PUSH
18085: LD_INT 23
18087: PUSH
18088: LD_INT 22
18090: PUSH
18091: LD_INT 24
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: ST_TO_ADDR
18109: GO 18170
18111: LD_INT 3
18113: DOUBLE
18114: EQUAL
18115: IFTRUE 18119
18117: GO 18169
18119: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18120: LD_ADDR_VAR 0 3
18124: PUSH
18125: LD_INT 13
18127: PUSH
18128: LD_INT 14
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: LD_INT 3
18136: PUSH
18137: LD_INT 4
18139: PUSH
18140: LD_INT 5
18142: PUSH
18143: LD_INT 21
18145: PUSH
18146: LD_INT 22
18148: PUSH
18149: LD_INT 23
18151: PUSH
18152: LD_INT 24
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: ST_TO_ADDR
18167: GO 18170
18169: POP
// result := ( chassis in result ) ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_VAR 0 1
18179: PUSH
18180: LD_VAR 0 3
18184: IN
18185: ST_TO_ADDR
// end ;
18186: LD_VAR 0 3
18190: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18191: LD_INT 0
18193: PPUSH
// if not chassis or not weapon then
18194: LD_VAR 0 1
18198: NOT
18199: PUSH
18200: LD_VAR 0 2
18204: NOT
18205: OR
18206: IFFALSE 18210
// exit ;
18208: GO 19270
// case weapon of us_machine_gun :
18210: LD_VAR 0 2
18214: PUSH
18215: LD_INT 2
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18253
18223: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18224: LD_ADDR_VAR 0 3
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: LD_INT 3
18237: PUSH
18238: LD_INT 4
18240: PUSH
18241: LD_INT 5
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: ST_TO_ADDR
18251: GO 19254
18253: LD_INT 3
18255: DOUBLE
18256: EQUAL
18257: IFTRUE 18261
18259: GO 18291
18261: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18262: LD_ADDR_VAR 0 3
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 3
18275: PUSH
18276: LD_INT 4
18278: PUSH
18279: LD_INT 5
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: ST_TO_ADDR
18289: GO 19254
18291: LD_INT 11
18293: DOUBLE
18294: EQUAL
18295: IFTRUE 18299
18297: GO 18329
18299: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18300: LD_ADDR_VAR 0 3
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: LD_INT 3
18313: PUSH
18314: LD_INT 4
18316: PUSH
18317: LD_INT 5
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: ST_TO_ADDR
18327: GO 19254
18329: LD_INT 4
18331: DOUBLE
18332: EQUAL
18333: IFTRUE 18337
18335: GO 18363
18337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18338: LD_ADDR_VAR 0 3
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: LD_INT 4
18351: PUSH
18352: LD_INT 5
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: ST_TO_ADDR
18361: GO 19254
18363: LD_INT 5
18365: DOUBLE
18366: EQUAL
18367: IFTRUE 18371
18369: GO 18397
18371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18372: LD_ADDR_VAR 0 3
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 3
18382: PUSH
18383: LD_INT 4
18385: PUSH
18386: LD_INT 5
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: ST_TO_ADDR
18395: GO 19254
18397: LD_INT 9
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18431
18405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18406: LD_ADDR_VAR 0 3
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 3
18416: PUSH
18417: LD_INT 4
18419: PUSH
18420: LD_INT 5
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: ST_TO_ADDR
18429: GO 19254
18431: LD_INT 7
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 18465
18439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18440: LD_ADDR_VAR 0 3
18444: PUSH
18445: LD_INT 2
18447: PUSH
18448: LD_INT 3
18450: PUSH
18451: LD_INT 4
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: ST_TO_ADDR
18463: GO 19254
18465: LD_INT 12
18467: DOUBLE
18468: EQUAL
18469: IFTRUE 18473
18471: GO 18499
18473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18474: LD_ADDR_VAR 0 3
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 3
18484: PUSH
18485: LD_INT 4
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: ST_TO_ADDR
18497: GO 19254
18499: LD_INT 13
18501: DOUBLE
18502: EQUAL
18503: IFTRUE 18507
18505: GO 18533
18507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18508: LD_ADDR_VAR 0 3
18512: PUSH
18513: LD_INT 2
18515: PUSH
18516: LD_INT 3
18518: PUSH
18519: LD_INT 4
18521: PUSH
18522: LD_INT 5
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: ST_TO_ADDR
18531: GO 19254
18533: LD_INT 14
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 18559
18541: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18542: LD_ADDR_VAR 0 3
18546: PUSH
18547: LD_INT 4
18549: PUSH
18550: LD_INT 5
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 19254
18559: LD_INT 6
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18585
18567: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 4
18575: PUSH
18576: LD_INT 5
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: ST_TO_ADDR
18583: GO 19254
18585: LD_INT 10
18587: DOUBLE
18588: EQUAL
18589: IFTRUE 18593
18591: GO 18611
18593: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18594: LD_ADDR_VAR 0 3
18598: PUSH
18599: LD_INT 4
18601: PUSH
18602: LD_INT 5
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: ST_TO_ADDR
18609: GO 19254
18611: LD_INT 22
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18645
18619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18620: LD_ADDR_VAR 0 3
18624: PUSH
18625: LD_INT 11
18627: PUSH
18628: LD_INT 12
18630: PUSH
18631: LD_INT 13
18633: PUSH
18634: LD_INT 14
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: ST_TO_ADDR
18643: GO 19254
18645: LD_INT 23
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18679
18653: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_INT 11
18661: PUSH
18662: LD_INT 12
18664: PUSH
18665: LD_INT 13
18667: PUSH
18668: LD_INT 14
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: ST_TO_ADDR
18677: GO 19254
18679: LD_INT 24
18681: DOUBLE
18682: EQUAL
18683: IFTRUE 18687
18685: GO 18713
18687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18688: LD_ADDR_VAR 0 3
18692: PUSH
18693: LD_INT 11
18695: PUSH
18696: LD_INT 12
18698: PUSH
18699: LD_INT 13
18701: PUSH
18702: LD_INT 14
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: ST_TO_ADDR
18711: GO 19254
18713: LD_INT 30
18715: DOUBLE
18716: EQUAL
18717: IFTRUE 18721
18719: GO 18747
18721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: LD_INT 11
18729: PUSH
18730: LD_INT 12
18732: PUSH
18733: LD_INT 13
18735: PUSH
18736: LD_INT 14
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: ST_TO_ADDR
18745: GO 19254
18747: LD_INT 25
18749: DOUBLE
18750: EQUAL
18751: IFTRUE 18755
18753: GO 18773
18755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18756: LD_ADDR_VAR 0 3
18760: PUSH
18761: LD_INT 13
18763: PUSH
18764: LD_INT 14
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: ST_TO_ADDR
18771: GO 19254
18773: LD_INT 27
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18799
18781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18782: LD_ADDR_VAR 0 3
18786: PUSH
18787: LD_INT 13
18789: PUSH
18790: LD_INT 14
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: ST_TO_ADDR
18797: GO 19254
18799: LD_INT 92
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18833
18807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18808: LD_ADDR_VAR 0 3
18812: PUSH
18813: LD_INT 11
18815: PUSH
18816: LD_INT 12
18818: PUSH
18819: LD_INT 13
18821: PUSH
18822: LD_INT 14
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: ST_TO_ADDR
18831: GO 19254
18833: LD_INT 28
18835: DOUBLE
18836: EQUAL
18837: IFTRUE 18841
18839: GO 18859
18841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18842: LD_ADDR_VAR 0 3
18846: PUSH
18847: LD_INT 13
18849: PUSH
18850: LD_INT 14
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: ST_TO_ADDR
18857: GO 19254
18859: LD_INT 29
18861: DOUBLE
18862: EQUAL
18863: IFTRUE 18867
18865: GO 18885
18867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: LD_INT 13
18875: PUSH
18876: LD_INT 14
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: ST_TO_ADDR
18883: GO 19254
18885: LD_INT 31
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18911
18893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18894: LD_ADDR_VAR 0 3
18898: PUSH
18899: LD_INT 13
18901: PUSH
18902: LD_INT 14
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: ST_TO_ADDR
18909: GO 19254
18911: LD_INT 26
18913: DOUBLE
18914: EQUAL
18915: IFTRUE 18919
18917: GO 18937
18919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18920: LD_ADDR_VAR 0 3
18924: PUSH
18925: LD_INT 13
18927: PUSH
18928: LD_INT 14
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: ST_TO_ADDR
18935: GO 19254
18937: LD_INT 42
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 18971
18945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18946: LD_ADDR_VAR 0 3
18950: PUSH
18951: LD_INT 21
18953: PUSH
18954: LD_INT 22
18956: PUSH
18957: LD_INT 23
18959: PUSH
18960: LD_INT 24
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: ST_TO_ADDR
18969: GO 19254
18971: LD_INT 43
18973: DOUBLE
18974: EQUAL
18975: IFTRUE 18979
18977: GO 19005
18979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18980: LD_ADDR_VAR 0 3
18984: PUSH
18985: LD_INT 21
18987: PUSH
18988: LD_INT 22
18990: PUSH
18991: LD_INT 23
18993: PUSH
18994: LD_INT 24
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19254
19005: LD_INT 44
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19039
19013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 22
19024: PUSH
19025: LD_INT 23
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: ST_TO_ADDR
19037: GO 19254
19039: LD_INT 45
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19073
19047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 22
19058: PUSH
19059: LD_INT 23
19061: PUSH
19062: LD_INT 24
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: ST_TO_ADDR
19071: GO 19254
19073: LD_INT 49
19075: DOUBLE
19076: EQUAL
19077: IFTRUE 19081
19079: GO 19107
19081: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19082: LD_ADDR_VAR 0 3
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 22
19092: PUSH
19093: LD_INT 23
19095: PUSH
19096: LD_INT 24
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
19105: GO 19254
19107: LD_INT 51
19109: DOUBLE
19110: EQUAL
19111: IFTRUE 19115
19113: GO 19141
19115: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: LD_INT 21
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_INT 23
19129: PUSH
19130: LD_INT 24
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: ST_TO_ADDR
19139: GO 19254
19141: LD_INT 52
19143: DOUBLE
19144: EQUAL
19145: IFTRUE 19149
19147: GO 19175
19149: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19150: LD_ADDR_VAR 0 3
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 22
19160: PUSH
19161: LD_INT 23
19163: PUSH
19164: LD_INT 24
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: ST_TO_ADDR
19173: GO 19254
19175: LD_INT 53
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19201
19183: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19184: LD_ADDR_VAR 0 3
19188: PUSH
19189: LD_INT 23
19191: PUSH
19192: LD_INT 24
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: ST_TO_ADDR
19199: GO 19254
19201: LD_INT 46
19203: DOUBLE
19204: EQUAL
19205: IFTRUE 19209
19207: GO 19227
19209: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 23
19217: PUSH
19218: LD_INT 24
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: ST_TO_ADDR
19225: GO 19254
19227: LD_INT 47
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19253
19235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19236: LD_ADDR_VAR 0 3
19240: PUSH
19241: LD_INT 23
19243: PUSH
19244: LD_INT 24
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
19251: GO 19254
19253: POP
// result := ( chassis in result ) ;
19254: LD_ADDR_VAR 0 3
19258: PUSH
19259: LD_VAR 0 1
19263: PUSH
19264: LD_VAR 0 3
19268: IN
19269: ST_TO_ADDR
// end ;
19270: LD_VAR 0 3
19274: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19275: LD_INT 0
19277: PPUSH
19278: PPUSH
19279: PPUSH
19280: PPUSH
19281: PPUSH
19282: PPUSH
19283: PPUSH
// result := array ;
19284: LD_ADDR_VAR 0 5
19288: PUSH
19289: LD_VAR 0 1
19293: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19294: LD_VAR 0 1
19298: NOT
19299: PUSH
19300: LD_VAR 0 2
19304: NOT
19305: OR
19306: PUSH
19307: LD_VAR 0 3
19311: NOT
19312: OR
19313: PUSH
19314: LD_VAR 0 2
19318: PUSH
19319: LD_VAR 0 1
19323: GREATER
19324: OR
19325: PUSH
19326: LD_VAR 0 3
19330: PUSH
19331: LD_VAR 0 1
19335: GREATER
19336: OR
19337: IFFALSE 19341
// exit ;
19339: GO 19637
// if direction then
19341: LD_VAR 0 4
19345: IFFALSE 19409
// begin d := 1 ;
19347: LD_ADDR_VAR 0 9
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// if i_from > i_to then
19355: LD_VAR 0 2
19359: PUSH
19360: LD_VAR 0 3
19364: GREATER
19365: IFFALSE 19391
// length := ( array - i_from ) + i_to else
19367: LD_ADDR_VAR 0 11
19371: PUSH
19372: LD_VAR 0 1
19376: PUSH
19377: LD_VAR 0 2
19381: MINUS
19382: PUSH
19383: LD_VAR 0 3
19387: PLUS
19388: ST_TO_ADDR
19389: GO 19407
// length := i_to - i_from ;
19391: LD_ADDR_VAR 0 11
19395: PUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_VAR 0 2
19405: MINUS
19406: ST_TO_ADDR
// end else
19407: GO 19470
// begin d := - 1 ;
19409: LD_ADDR_VAR 0 9
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: ST_TO_ADDR
// if i_from > i_to then
19418: LD_VAR 0 2
19422: PUSH
19423: LD_VAR 0 3
19427: GREATER
19428: IFFALSE 19448
// length := i_from - i_to else
19430: LD_ADDR_VAR 0 11
19434: PUSH
19435: LD_VAR 0 2
19439: PUSH
19440: LD_VAR 0 3
19444: MINUS
19445: ST_TO_ADDR
19446: GO 19470
// length := ( array - i_to ) + i_from ;
19448: LD_ADDR_VAR 0 11
19452: PUSH
19453: LD_VAR 0 1
19457: PUSH
19458: LD_VAR 0 3
19462: MINUS
19463: PUSH
19464: LD_VAR 0 2
19468: PLUS
19469: ST_TO_ADDR
// end ; if not length then
19470: LD_VAR 0 11
19474: NOT
19475: IFFALSE 19479
// exit ;
19477: GO 19637
// tmp := array ;
19479: LD_ADDR_VAR 0 10
19483: PUSH
19484: LD_VAR 0 1
19488: ST_TO_ADDR
// for i = 1 to length do
19489: LD_ADDR_VAR 0 6
19493: PUSH
19494: DOUBLE
19495: LD_INT 1
19497: DEC
19498: ST_TO_ADDR
19499: LD_VAR 0 11
19503: PUSH
19504: FOR_TO
19505: IFFALSE 19625
// begin for j = 1 to array do
19507: LD_ADDR_VAR 0 7
19511: PUSH
19512: DOUBLE
19513: LD_INT 1
19515: DEC
19516: ST_TO_ADDR
19517: LD_VAR 0 1
19521: PUSH
19522: FOR_TO
19523: IFFALSE 19611
// begin k := j + d ;
19525: LD_ADDR_VAR 0 8
19529: PUSH
19530: LD_VAR 0 7
19534: PUSH
19535: LD_VAR 0 9
19539: PLUS
19540: ST_TO_ADDR
// if k > array then
19541: LD_VAR 0 8
19545: PUSH
19546: LD_VAR 0 1
19550: GREATER
19551: IFFALSE 19561
// k := 1 ;
19553: LD_ADDR_VAR 0 8
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if not k then
19561: LD_VAR 0 8
19565: NOT
19566: IFFALSE 19578
// k := array ;
19568: LD_ADDR_VAR 0 8
19572: PUSH
19573: LD_VAR 0 1
19577: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19578: LD_ADDR_VAR 0 10
19582: PUSH
19583: LD_VAR 0 10
19587: PPUSH
19588: LD_VAR 0 8
19592: PPUSH
19593: LD_VAR 0 1
19597: PUSH
19598: LD_VAR 0 7
19602: ARRAY
19603: PPUSH
19604: CALL_OW 1
19608: ST_TO_ADDR
// end ;
19609: GO 19522
19611: POP
19612: POP
// array := tmp ;
19613: LD_ADDR_VAR 0 1
19617: PUSH
19618: LD_VAR 0 10
19622: ST_TO_ADDR
// end ;
19623: GO 19504
19625: POP
19626: POP
// result := array ;
19627: LD_ADDR_VAR 0 5
19631: PUSH
19632: LD_VAR 0 1
19636: ST_TO_ADDR
// end ;
19637: LD_VAR 0 5
19641: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
// result := 0 ;
19646: LD_ADDR_VAR 0 3
19650: PUSH
19651: LD_INT 0
19653: ST_TO_ADDR
// if not array or not value in array then
19654: LD_VAR 0 1
19658: NOT
19659: PUSH
19660: LD_VAR 0 2
19664: PUSH
19665: LD_VAR 0 1
19669: IN
19670: NOT
19671: OR
19672: IFFALSE 19676
// exit ;
19674: GO 19730
// for i = 1 to array do
19676: LD_ADDR_VAR 0 4
19680: PUSH
19681: DOUBLE
19682: LD_INT 1
19684: DEC
19685: ST_TO_ADDR
19686: LD_VAR 0 1
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19728
// if value = array [ i ] then
19694: LD_VAR 0 2
19698: PUSH
19699: LD_VAR 0 1
19703: PUSH
19704: LD_VAR 0 4
19708: ARRAY
19709: EQUAL
19710: IFFALSE 19726
// begin result := i ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_VAR 0 4
19721: ST_TO_ADDR
// exit ;
19722: POP
19723: POP
19724: GO 19730
// end ;
19726: GO 19691
19728: POP
19729: POP
// end ;
19730: LD_VAR 0 3
19734: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19735: LD_INT 0
19737: PPUSH
// vc_chassis := chassis ;
19738: LD_ADDR_OWVAR 37
19742: PUSH
19743: LD_VAR 0 1
19747: ST_TO_ADDR
// vc_engine := engine ;
19748: LD_ADDR_OWVAR 39
19752: PUSH
19753: LD_VAR 0 2
19757: ST_TO_ADDR
// vc_control := control ;
19758: LD_ADDR_OWVAR 38
19762: PUSH
19763: LD_VAR 0 3
19767: ST_TO_ADDR
// vc_weapon := weapon ;
19768: LD_ADDR_OWVAR 40
19772: PUSH
19773: LD_VAR 0 4
19777: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19778: LD_ADDR_OWVAR 41
19782: PUSH
19783: LD_VAR 0 5
19787: ST_TO_ADDR
// end ;
19788: LD_VAR 0 6
19792: RET
// export function WantPlant ( unit ) ; var task ; begin
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
// result := false ;
19797: LD_ADDR_VAR 0 2
19801: PUSH
19802: LD_INT 0
19804: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19805: LD_ADDR_VAR 0 3
19809: PUSH
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 437
19819: ST_TO_ADDR
// if task then
19820: LD_VAR 0 3
19824: IFFALSE 19852
// if task [ 1 ] [ 1 ] = p then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 1
19833: ARRAY
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: PUSH
19839: LD_STRING p
19841: EQUAL
19842: IFFALSE 19852
// result := true ;
19844: LD_ADDR_VAR 0 2
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// end ;
19852: LD_VAR 0 2
19856: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19857: LD_INT 0
19859: PPUSH
19860: PPUSH
19861: PPUSH
19862: PPUSH
// if pos < 1 then
19863: LD_VAR 0 2
19867: PUSH
19868: LD_INT 1
19870: LESS
19871: IFFALSE 19875
// exit ;
19873: GO 20178
// if pos = 1 then
19875: LD_VAR 0 2
19879: PUSH
19880: LD_INT 1
19882: EQUAL
19883: IFFALSE 19916
// result := Replace ( arr , pos [ 1 ] , value ) else
19885: LD_ADDR_VAR 0 4
19889: PUSH
19890: LD_VAR 0 1
19894: PPUSH
19895: LD_VAR 0 2
19899: PUSH
19900: LD_INT 1
19902: ARRAY
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: CALL_OW 1
19913: ST_TO_ADDR
19914: GO 20178
// begin tmp := arr ;
19916: LD_ADDR_VAR 0 6
19920: PUSH
19921: LD_VAR 0 1
19925: ST_TO_ADDR
// s_arr := [ tmp ] ;
19926: LD_ADDR_VAR 0 7
19930: PUSH
19931: LD_VAR 0 6
19935: PUSH
19936: EMPTY
19937: LIST
19938: ST_TO_ADDR
// for i = 1 to pos - 1 do
19939: LD_ADDR_VAR 0 5
19943: PUSH
19944: DOUBLE
19945: LD_INT 1
19947: DEC
19948: ST_TO_ADDR
19949: LD_VAR 0 2
19953: PUSH
19954: LD_INT 1
19956: MINUS
19957: PUSH
19958: FOR_TO
19959: IFFALSE 20004
// begin tmp := tmp [ pos [ i ] ] ;
19961: LD_ADDR_VAR 0 6
19965: PUSH
19966: LD_VAR 0 6
19970: PUSH
19971: LD_VAR 0 2
19975: PUSH
19976: LD_VAR 0 5
19980: ARRAY
19981: ARRAY
19982: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19983: LD_ADDR_VAR 0 7
19987: PUSH
19988: LD_VAR 0 7
19992: PUSH
19993: LD_VAR 0 6
19997: PUSH
19998: EMPTY
19999: LIST
20000: ADD
20001: ST_TO_ADDR
// end ;
20002: GO 19958
20004: POP
20005: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20006: LD_ADDR_VAR 0 6
20010: PUSH
20011: LD_VAR 0 6
20015: PPUSH
20016: LD_VAR 0 2
20020: PUSH
20021: LD_VAR 0 2
20025: ARRAY
20026: PPUSH
20027: LD_VAR 0 3
20031: PPUSH
20032: CALL_OW 1
20036: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20037: LD_ADDR_VAR 0 7
20041: PUSH
20042: LD_VAR 0 7
20046: PPUSH
20047: LD_VAR 0 7
20051: PPUSH
20052: LD_VAR 0 6
20056: PPUSH
20057: CALL_OW 1
20061: ST_TO_ADDR
// for i = s_arr downto 2 do
20062: LD_ADDR_VAR 0 5
20066: PUSH
20067: DOUBLE
20068: LD_VAR 0 7
20072: INC
20073: ST_TO_ADDR
20074: LD_INT 2
20076: PUSH
20077: FOR_DOWNTO
20078: IFFALSE 20162
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20080: LD_ADDR_VAR 0 6
20084: PUSH
20085: LD_VAR 0 7
20089: PUSH
20090: LD_VAR 0 5
20094: PUSH
20095: LD_INT 1
20097: MINUS
20098: ARRAY
20099: PPUSH
20100: LD_VAR 0 2
20104: PUSH
20105: LD_VAR 0 5
20109: PUSH
20110: LD_INT 1
20112: MINUS
20113: ARRAY
20114: PPUSH
20115: LD_VAR 0 7
20119: PUSH
20120: LD_VAR 0 5
20124: ARRAY
20125: PPUSH
20126: CALL_OW 1
20130: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20131: LD_ADDR_VAR 0 7
20135: PUSH
20136: LD_VAR 0 7
20140: PPUSH
20141: LD_VAR 0 5
20145: PUSH
20146: LD_INT 1
20148: MINUS
20149: PPUSH
20150: LD_VAR 0 6
20154: PPUSH
20155: CALL_OW 1
20159: ST_TO_ADDR
// end ;
20160: GO 20077
20162: POP
20163: POP
// result := s_arr [ 1 ] ;
20164: LD_ADDR_VAR 0 4
20168: PUSH
20169: LD_VAR 0 7
20173: PUSH
20174: LD_INT 1
20176: ARRAY
20177: ST_TO_ADDR
// end ; end ;
20178: LD_VAR 0 4
20182: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20183: LD_INT 0
20185: PPUSH
20186: PPUSH
// if not list then
20187: LD_VAR 0 1
20191: NOT
20192: IFFALSE 20196
// exit ;
20194: GO 20287
// i := list [ pos1 ] ;
20196: LD_ADDR_VAR 0 5
20200: PUSH
20201: LD_VAR 0 1
20205: PUSH
20206: LD_VAR 0 2
20210: ARRAY
20211: ST_TO_ADDR
// if not i then
20212: LD_VAR 0 5
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20287
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20221: LD_ADDR_VAR 0 1
20225: PUSH
20226: LD_VAR 0 1
20230: PPUSH
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_VAR 0 1
20240: PUSH
20241: LD_VAR 0 3
20245: ARRAY
20246: PPUSH
20247: CALL_OW 1
20251: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20252: LD_ADDR_VAR 0 1
20256: PUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: LD_VAR 0 3
20266: PPUSH
20267: LD_VAR 0 5
20271: PPUSH
20272: CALL_OW 1
20276: ST_TO_ADDR
// result := list ;
20277: LD_ADDR_VAR 0 4
20281: PUSH
20282: LD_VAR 0 1
20286: ST_TO_ADDR
// end ;
20287: LD_VAR 0 4
20291: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20292: LD_INT 0
20294: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20295: LD_ADDR_VAR 0 5
20299: PUSH
20300: LD_VAR 0 1
20304: PPUSH
20305: CALL_OW 250
20309: PPUSH
20310: LD_VAR 0 1
20314: PPUSH
20315: CALL_OW 251
20319: PPUSH
20320: LD_VAR 0 2
20324: PPUSH
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: CALL 20713 0 5
20339: ST_TO_ADDR
// end ;
20340: LD_VAR 0 5
20344: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
// if not list or not unit then
20351: LD_VAR 0 2
20355: NOT
20356: PUSH
20357: LD_VAR 0 1
20361: NOT
20362: OR
20363: IFFALSE 20367
// exit ;
20365: GO 20708
// result := [ ] ;
20367: LD_ADDR_VAR 0 5
20371: PUSH
20372: EMPTY
20373: ST_TO_ADDR
// for i in list do
20374: LD_ADDR_VAR 0 6
20378: PUSH
20379: LD_VAR 0 2
20383: PUSH
20384: FOR_IN
20385: IFFALSE 20603
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20387: LD_ADDR_VAR 0 8
20391: PUSH
20392: LD_VAR 0 1
20396: PPUSH
20397: LD_VAR 0 6
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PPUSH
20406: LD_VAR 0 6
20410: PUSH
20411: LD_INT 2
20413: ARRAY
20414: PPUSH
20415: CALL_OW 297
20419: ST_TO_ADDR
// if not Count ( result ) then
20420: LD_VAR 0 5
20424: PPUSH
20425: CALL 16997 0 1
20429: NOT
20430: IFFALSE 20463
// begin result := Join ( result , [ i , tmp ] ) ;
20432: LD_ADDR_VAR 0 5
20436: PUSH
20437: LD_VAR 0 5
20441: PPUSH
20442: LD_VAR 0 6
20446: PUSH
20447: LD_VAR 0 8
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL 52586 0 2
20460: ST_TO_ADDR
// continue ;
20461: GO 20384
// end ; if result [ result ] [ 2 ] <= tmp then
20463: LD_VAR 0 5
20467: PUSH
20468: LD_VAR 0 5
20472: ARRAY
20473: PUSH
20474: LD_INT 2
20476: ARRAY
20477: PUSH
20478: LD_VAR 0 8
20482: LESSEQUAL
20483: IFFALSE 20516
// result := Join ( result , [ i , tmp ] ) else
20485: LD_ADDR_VAR 0 5
20489: PUSH
20490: LD_VAR 0 5
20494: PPUSH
20495: LD_VAR 0 6
20499: PUSH
20500: LD_VAR 0 8
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL 52586 0 2
20513: ST_TO_ADDR
20514: GO 20601
// begin for j := 1 to Count ( result ) do
20516: LD_ADDR_VAR 0 7
20520: PUSH
20521: DOUBLE
20522: LD_INT 1
20524: DEC
20525: ST_TO_ADDR
20526: LD_VAR 0 5
20530: PPUSH
20531: CALL 16997 0 1
20535: PUSH
20536: FOR_TO
20537: IFFALSE 20599
// begin if tmp < result [ j ] [ 2 ] then
20539: LD_VAR 0 8
20543: PUSH
20544: LD_VAR 0 5
20548: PUSH
20549: LD_VAR 0 7
20553: ARRAY
20554: PUSH
20555: LD_INT 2
20557: ARRAY
20558: LESS
20559: IFFALSE 20597
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20561: LD_ADDR_VAR 0 5
20565: PUSH
20566: LD_VAR 0 5
20570: PPUSH
20571: LD_VAR 0 7
20575: PPUSH
20576: LD_VAR 0 6
20580: PUSH
20581: LD_VAR 0 8
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PPUSH
20590: CALL_OW 2
20594: ST_TO_ADDR
// break ;
20595: GO 20599
// end ; end ;
20597: GO 20536
20599: POP
20600: POP
// end ; end ;
20601: GO 20384
20603: POP
20604: POP
// if result and not asc then
20605: LD_VAR 0 5
20609: PUSH
20610: LD_VAR 0 3
20614: NOT
20615: AND
20616: IFFALSE 20633
// result := ReverseArray ( result ) ;
20618: LD_ADDR_VAR 0 5
20622: PUSH
20623: LD_VAR 0 5
20627: PPUSH
20628: CALL 47873 0 1
20632: ST_TO_ADDR
// tmp := [ ] ;
20633: LD_ADDR_VAR 0 8
20637: PUSH
20638: EMPTY
20639: ST_TO_ADDR
// if mode then
20640: LD_VAR 0 4
20644: IFFALSE 20708
// begin for i := 1 to result do
20646: LD_ADDR_VAR 0 6
20650: PUSH
20651: DOUBLE
20652: LD_INT 1
20654: DEC
20655: ST_TO_ADDR
20656: LD_VAR 0 5
20660: PUSH
20661: FOR_TO
20662: IFFALSE 20696
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20664: LD_ADDR_VAR 0 8
20668: PUSH
20669: LD_VAR 0 8
20673: PPUSH
20674: LD_VAR 0 5
20678: PUSH
20679: LD_VAR 0 6
20683: ARRAY
20684: PUSH
20685: LD_INT 1
20687: ARRAY
20688: PPUSH
20689: CALL 52586 0 2
20693: ST_TO_ADDR
20694: GO 20661
20696: POP
20697: POP
// result := tmp ;
20698: LD_ADDR_VAR 0 5
20702: PUSH
20703: LD_VAR 0 8
20707: ST_TO_ADDR
// end ; end ;
20708: LD_VAR 0 5
20712: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20713: LD_INT 0
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
// if not list then
20719: LD_VAR 0 3
20723: NOT
20724: IFFALSE 20728
// exit ;
20726: GO 21116
// result := [ ] ;
20728: LD_ADDR_VAR 0 6
20732: PUSH
20733: EMPTY
20734: ST_TO_ADDR
// for i in list do
20735: LD_ADDR_VAR 0 7
20739: PUSH
20740: LD_VAR 0 3
20744: PUSH
20745: FOR_IN
20746: IFFALSE 20948
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20748: LD_ADDR_VAR 0 9
20752: PUSH
20753: LD_VAR 0 7
20757: PPUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: LD_VAR 0 2
20767: PPUSH
20768: CALL_OW 297
20772: ST_TO_ADDR
// if not result then
20773: LD_VAR 0 6
20777: NOT
20778: IFFALSE 20804
// result := [ [ i , tmp ] ] else
20780: LD_ADDR_VAR 0 6
20784: PUSH
20785: LD_VAR 0 7
20789: PUSH
20790: LD_VAR 0 9
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: ST_TO_ADDR
20802: GO 20946
// begin if result [ result ] [ 2 ] < tmp then
20804: LD_VAR 0 6
20808: PUSH
20809: LD_VAR 0 6
20813: ARRAY
20814: PUSH
20815: LD_INT 2
20817: ARRAY
20818: PUSH
20819: LD_VAR 0 9
20823: LESS
20824: IFFALSE 20866
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20826: LD_ADDR_VAR 0 6
20830: PUSH
20831: LD_VAR 0 6
20835: PPUSH
20836: LD_VAR 0 6
20840: PUSH
20841: LD_INT 1
20843: PLUS
20844: PPUSH
20845: LD_VAR 0 7
20849: PUSH
20850: LD_VAR 0 9
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PPUSH
20859: CALL_OW 2
20863: ST_TO_ADDR
20864: GO 20946
// for j = 1 to result do
20866: LD_ADDR_VAR 0 8
20870: PUSH
20871: DOUBLE
20872: LD_INT 1
20874: DEC
20875: ST_TO_ADDR
20876: LD_VAR 0 6
20880: PUSH
20881: FOR_TO
20882: IFFALSE 20944
// begin if tmp < result [ j ] [ 2 ] then
20884: LD_VAR 0 9
20888: PUSH
20889: LD_VAR 0 6
20893: PUSH
20894: LD_VAR 0 8
20898: ARRAY
20899: PUSH
20900: LD_INT 2
20902: ARRAY
20903: LESS
20904: IFFALSE 20942
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20906: LD_ADDR_VAR 0 6
20910: PUSH
20911: LD_VAR 0 6
20915: PPUSH
20916: LD_VAR 0 8
20920: PPUSH
20921: LD_VAR 0 7
20925: PUSH
20926: LD_VAR 0 9
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PPUSH
20935: CALL_OW 2
20939: ST_TO_ADDR
// break ;
20940: GO 20944
// end ; end ;
20942: GO 20881
20944: POP
20945: POP
// end ; end ;
20946: GO 20745
20948: POP
20949: POP
// if result and not asc then
20950: LD_VAR 0 6
20954: PUSH
20955: LD_VAR 0 4
20959: NOT
20960: AND
20961: IFFALSE 21036
// begin tmp := result ;
20963: LD_ADDR_VAR 0 9
20967: PUSH
20968: LD_VAR 0 6
20972: ST_TO_ADDR
// for i = tmp downto 1 do
20973: LD_ADDR_VAR 0 7
20977: PUSH
20978: DOUBLE
20979: LD_VAR 0 9
20983: INC
20984: ST_TO_ADDR
20985: LD_INT 1
20987: PUSH
20988: FOR_DOWNTO
20989: IFFALSE 21034
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20991: LD_ADDR_VAR 0 6
20995: PUSH
20996: LD_VAR 0 6
21000: PPUSH
21001: LD_VAR 0 9
21005: PUSH
21006: LD_VAR 0 7
21010: MINUS
21011: PUSH
21012: LD_INT 1
21014: PLUS
21015: PPUSH
21016: LD_VAR 0 9
21020: PUSH
21021: LD_VAR 0 7
21025: ARRAY
21026: PPUSH
21027: CALL_OW 1
21031: ST_TO_ADDR
21032: GO 20988
21034: POP
21035: POP
// end ; tmp := [ ] ;
21036: LD_ADDR_VAR 0 9
21040: PUSH
21041: EMPTY
21042: ST_TO_ADDR
// if mode then
21043: LD_VAR 0 5
21047: IFFALSE 21116
// begin for i = 1 to result do
21049: LD_ADDR_VAR 0 7
21053: PUSH
21054: DOUBLE
21055: LD_INT 1
21057: DEC
21058: ST_TO_ADDR
21059: LD_VAR 0 6
21063: PUSH
21064: FOR_TO
21065: IFFALSE 21104
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21067: LD_ADDR_VAR 0 9
21071: PUSH
21072: LD_VAR 0 9
21076: PPUSH
21077: LD_VAR 0 7
21081: PPUSH
21082: LD_VAR 0 6
21086: PUSH
21087: LD_VAR 0 7
21091: ARRAY
21092: PUSH
21093: LD_INT 1
21095: ARRAY
21096: PPUSH
21097: CALL_OW 1
21101: ST_TO_ADDR
21102: GO 21064
21104: POP
21105: POP
// result := tmp ;
21106: LD_ADDR_VAR 0 6
21110: PUSH
21111: LD_VAR 0 9
21115: ST_TO_ADDR
// end ; end ;
21116: LD_VAR 0 6
21120: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21121: LD_INT 0
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21129: LD_ADDR_VAR 0 5
21133: PUSH
21134: LD_INT 0
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 0
21142: PUSH
21143: EMPTY
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
// if not x or not y then
21151: LD_VAR 0 2
21155: NOT
21156: PUSH
21157: LD_VAR 0 3
21161: NOT
21162: OR
21163: IFFALSE 21167
// exit ;
21165: GO 22817
// if not range then
21167: LD_VAR 0 4
21171: NOT
21172: IFFALSE 21182
// range := 10 ;
21174: LD_ADDR_VAR 0 4
21178: PUSH
21179: LD_INT 10
21181: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21182: LD_ADDR_VAR 0 8
21186: PUSH
21187: LD_INT 81
21189: PUSH
21190: LD_VAR 0 1
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 92
21201: PUSH
21202: LD_VAR 0 2
21206: PUSH
21207: LD_VAR 0 3
21211: PUSH
21212: LD_VAR 0 4
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 3
21225: PUSH
21226: LD_INT 21
21228: PUSH
21229: LD_INT 3
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 69
21249: ST_TO_ADDR
// if not tmp then
21250: LD_VAR 0 8
21254: NOT
21255: IFFALSE 21259
// exit ;
21257: GO 22817
// for i in tmp do
21259: LD_ADDR_VAR 0 6
21263: PUSH
21264: LD_VAR 0 8
21268: PUSH
21269: FOR_IN
21270: IFFALSE 22792
// begin points := [ 0 , 0 , 0 ] ;
21272: LD_ADDR_VAR 0 9
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: LIST
21290: ST_TO_ADDR
// bpoints := 1 ;
21291: LD_ADDR_VAR 0 10
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21299: LD_VAR 0 6
21303: PPUSH
21304: CALL_OW 247
21308: PUSH
21309: LD_INT 1
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21895
21317: POP
// begin if GetClass ( i ) = 1 then
21318: LD_VAR 0 6
21322: PPUSH
21323: CALL_OW 257
21327: PUSH
21328: LD_INT 1
21330: EQUAL
21331: IFFALSE 21352
// points := [ 10 , 5 , 3 ] ;
21333: LD_ADDR_VAR 0 9
21337: PUSH
21338: LD_INT 10
21340: PUSH
21341: LD_INT 5
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: LIST
21351: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21352: LD_VAR 0 6
21356: PPUSH
21357: CALL_OW 257
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 3
21367: PUSH
21368: LD_INT 4
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: IN
21376: IFFALSE 21397
// points := [ 3 , 2 , 1 ] ;
21378: LD_ADDR_VAR 0 9
21382: PUSH
21383: LD_INT 3
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21397: LD_VAR 0 6
21401: PPUSH
21402: CALL_OW 257
21406: PUSH
21407: LD_INT 5
21409: EQUAL
21410: IFFALSE 21431
// points := [ 130 , 5 , 2 ] ;
21412: LD_ADDR_VAR 0 9
21416: PUSH
21417: LD_INT 130
21419: PUSH
21420: LD_INT 5
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21431: LD_VAR 0 6
21435: PPUSH
21436: CALL_OW 257
21440: PUSH
21441: LD_INT 8
21443: EQUAL
21444: IFFALSE 21465
// points := [ 35 , 35 , 30 ] ;
21446: LD_ADDR_VAR 0 9
21450: PUSH
21451: LD_INT 35
21453: PUSH
21454: LD_INT 35
21456: PUSH
21457: LD_INT 30
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21465: LD_VAR 0 6
21469: PPUSH
21470: CALL_OW 257
21474: PUSH
21475: LD_INT 9
21477: EQUAL
21478: IFFALSE 21499
// points := [ 20 , 55 , 40 ] ;
21480: LD_ADDR_VAR 0 9
21484: PUSH
21485: LD_INT 20
21487: PUSH
21488: LD_INT 55
21490: PUSH
21491: LD_INT 40
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: LIST
21498: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21499: LD_VAR 0 6
21503: PPUSH
21504: CALL_OW 257
21508: PUSH
21509: LD_INT 12
21511: PUSH
21512: LD_INT 16
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: IN
21519: IFFALSE 21540
// points := [ 5 , 3 , 2 ] ;
21521: LD_ADDR_VAR 0 9
21525: PUSH
21526: LD_INT 5
21528: PUSH
21529: LD_INT 3
21531: PUSH
21532: LD_INT 2
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: LIST
21539: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21540: LD_VAR 0 6
21544: PPUSH
21545: CALL_OW 257
21549: PUSH
21550: LD_INT 17
21552: EQUAL
21553: IFFALSE 21574
// points := [ 100 , 50 , 75 ] ;
21555: LD_ADDR_VAR 0 9
21559: PUSH
21560: LD_INT 100
21562: PUSH
21563: LD_INT 50
21565: PUSH
21566: LD_INT 75
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21574: LD_VAR 0 6
21578: PPUSH
21579: CALL_OW 257
21583: PUSH
21584: LD_INT 15
21586: EQUAL
21587: IFFALSE 21608
// points := [ 10 , 5 , 3 ] ;
21589: LD_ADDR_VAR 0 9
21593: PUSH
21594: LD_INT 10
21596: PUSH
21597: LD_INT 5
21599: PUSH
21600: LD_INT 3
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21608: LD_VAR 0 6
21612: PPUSH
21613: CALL_OW 257
21617: PUSH
21618: LD_INT 14
21620: EQUAL
21621: IFFALSE 21642
// points := [ 10 , 0 , 0 ] ;
21623: LD_ADDR_VAR 0 9
21627: PUSH
21628: LD_INT 10
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21642: LD_VAR 0 6
21646: PPUSH
21647: CALL_OW 257
21651: PUSH
21652: LD_INT 11
21654: EQUAL
21655: IFFALSE 21676
// points := [ 30 , 10 , 5 ] ;
21657: LD_ADDR_VAR 0 9
21661: PUSH
21662: LD_INT 30
21664: PUSH
21665: LD_INT 10
21667: PUSH
21668: LD_INT 5
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21676: LD_VAR 0 1
21680: PPUSH
21681: LD_INT 5
21683: PPUSH
21684: CALL_OW 321
21688: PUSH
21689: LD_INT 2
21691: EQUAL
21692: IFFALSE 21709
// bpoints := bpoints * 1.8 ;
21694: LD_ADDR_VAR 0 10
21698: PUSH
21699: LD_VAR 0 10
21703: PUSH
21704: LD_REAL  1.80000000000000E+0000
21707: MUL
21708: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21709: LD_VAR 0 6
21713: PPUSH
21714: CALL_OW 257
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 3
21727: PUSH
21728: LD_INT 4
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: IN
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: LD_INT 51
21745: PPUSH
21746: CALL_OW 321
21750: PUSH
21751: LD_INT 2
21753: EQUAL
21754: AND
21755: IFFALSE 21772
// bpoints := bpoints * 1.2 ;
21757: LD_ADDR_VAR 0 10
21761: PUSH
21762: LD_VAR 0 10
21766: PUSH
21767: LD_REAL  1.20000000000000E+0000
21770: MUL
21771: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21772: LD_VAR 0 6
21776: PPUSH
21777: CALL_OW 257
21781: PUSH
21782: LD_INT 5
21784: PUSH
21785: LD_INT 7
21787: PUSH
21788: LD_INT 9
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: IN
21796: PUSH
21797: LD_VAR 0 1
21801: PPUSH
21802: LD_INT 52
21804: PPUSH
21805: CALL_OW 321
21809: PUSH
21810: LD_INT 2
21812: EQUAL
21813: AND
21814: IFFALSE 21831
// bpoints := bpoints * 1.5 ;
21816: LD_ADDR_VAR 0 10
21820: PUSH
21821: LD_VAR 0 10
21825: PUSH
21826: LD_REAL  1.50000000000000E+0000
21829: MUL
21830: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21831: LD_VAR 0 1
21835: PPUSH
21836: LD_INT 66
21838: PPUSH
21839: CALL_OW 321
21843: PUSH
21844: LD_INT 2
21846: EQUAL
21847: IFFALSE 21864
// bpoints := bpoints * 1.1 ;
21849: LD_ADDR_VAR 0 10
21853: PUSH
21854: LD_VAR 0 10
21858: PUSH
21859: LD_REAL  1.10000000000000E+0000
21862: MUL
21863: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21864: LD_ADDR_VAR 0 10
21868: PUSH
21869: LD_VAR 0 10
21873: PUSH
21874: LD_VAR 0 6
21878: PPUSH
21879: LD_INT 1
21881: PPUSH
21882: CALL_OW 259
21886: PUSH
21887: LD_REAL  1.15000000000000E+0000
21890: MUL
21891: MUL
21892: ST_TO_ADDR
// end ; unit_vehicle :
21893: GO 22721
21895: LD_INT 2
21897: DOUBLE
21898: EQUAL
21899: IFTRUE 21903
21901: GO 22709
21903: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21904: LD_VAR 0 6
21908: PPUSH
21909: CALL_OW 264
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: LD_INT 42
21919: PUSH
21920: LD_INT 24
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: IN
21928: IFFALSE 21949
// points := [ 25 , 5 , 3 ] ;
21930: LD_ADDR_VAR 0 9
21934: PUSH
21935: LD_INT 25
21937: PUSH
21938: LD_INT 5
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21949: LD_VAR 0 6
21953: PPUSH
21954: CALL_OW 264
21958: PUSH
21959: LD_INT 4
21961: PUSH
21962: LD_INT 43
21964: PUSH
21965: LD_INT 25
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: IN
21973: IFFALSE 21994
// points := [ 40 , 15 , 5 ] ;
21975: LD_ADDR_VAR 0 9
21979: PUSH
21980: LD_INT 40
21982: PUSH
21983: LD_INT 15
21985: PUSH
21986: LD_INT 5
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21994: LD_VAR 0 6
21998: PPUSH
21999: CALL_OW 264
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: LD_INT 23
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: IN
22014: IFFALSE 22035
// points := [ 7 , 25 , 8 ] ;
22016: LD_ADDR_VAR 0 9
22020: PUSH
22021: LD_INT 7
22023: PUSH
22024: LD_INT 25
22026: PUSH
22027: LD_INT 8
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22035: LD_VAR 0 6
22039: PPUSH
22040: CALL_OW 264
22044: PUSH
22045: LD_INT 5
22047: PUSH
22048: LD_INT 27
22050: PUSH
22051: LD_INT 44
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: IN
22059: IFFALSE 22080
// points := [ 14 , 50 , 16 ] ;
22061: LD_ADDR_VAR 0 9
22065: PUSH
22066: LD_INT 14
22068: PUSH
22069: LD_INT 50
22071: PUSH
22072: LD_INT 16
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: LIST
22079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22080: LD_VAR 0 6
22084: PPUSH
22085: CALL_OW 264
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 46
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: IN
22100: IFFALSE 22121
// points := [ 32 , 120 , 70 ] ;
22102: LD_ADDR_VAR 0 9
22106: PUSH
22107: LD_INT 32
22109: PUSH
22110: LD_INT 120
22112: PUSH
22113: LD_INT 70
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22121: LD_VAR 0 6
22125: PPUSH
22126: CALL_OW 264
22130: PUSH
22131: LD_INT 7
22133: PUSH
22134: LD_INT 28
22136: PUSH
22137: LD_INT 45
22139: PUSH
22140: LD_INT 92
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: IN
22149: IFFALSE 22170
// points := [ 35 , 20 , 45 ] ;
22151: LD_ADDR_VAR 0 9
22155: PUSH
22156: LD_INT 35
22158: PUSH
22159: LD_INT 20
22161: PUSH
22162: LD_INT 45
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22170: LD_VAR 0 6
22174: PPUSH
22175: CALL_OW 264
22179: PUSH
22180: LD_INT 47
22182: PUSH
22183: EMPTY
22184: LIST
22185: IN
22186: IFFALSE 22207
// points := [ 67 , 45 , 75 ] ;
22188: LD_ADDR_VAR 0 9
22192: PUSH
22193: LD_INT 67
22195: PUSH
22196: LD_INT 45
22198: PUSH
22199: LD_INT 75
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: LIST
22206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22207: LD_VAR 0 6
22211: PPUSH
22212: CALL_OW 264
22216: PUSH
22217: LD_INT 26
22219: PUSH
22220: EMPTY
22221: LIST
22222: IN
22223: IFFALSE 22244
// points := [ 120 , 30 , 80 ] ;
22225: LD_ADDR_VAR 0 9
22229: PUSH
22230: LD_INT 120
22232: PUSH
22233: LD_INT 30
22235: PUSH
22236: LD_INT 80
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22244: LD_VAR 0 6
22248: PPUSH
22249: CALL_OW 264
22253: PUSH
22254: LD_INT 22
22256: PUSH
22257: EMPTY
22258: LIST
22259: IN
22260: IFFALSE 22281
// points := [ 40 , 1 , 1 ] ;
22262: LD_ADDR_VAR 0 9
22266: PUSH
22267: LD_INT 40
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22281: LD_VAR 0 6
22285: PPUSH
22286: CALL_OW 264
22290: PUSH
22291: LD_INT 29
22293: PUSH
22294: EMPTY
22295: LIST
22296: IN
22297: IFFALSE 22318
// points := [ 70 , 200 , 400 ] ;
22299: LD_ADDR_VAR 0 9
22303: PUSH
22304: LD_INT 70
22306: PUSH
22307: LD_INT 200
22309: PUSH
22310: LD_INT 400
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22318: LD_VAR 0 6
22322: PPUSH
22323: CALL_OW 264
22327: PUSH
22328: LD_INT 14
22330: PUSH
22331: LD_INT 53
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: IN
22338: IFFALSE 22359
// points := [ 40 , 10 , 20 ] ;
22340: LD_ADDR_VAR 0 9
22344: PUSH
22345: LD_INT 40
22347: PUSH
22348: LD_INT 10
22350: PUSH
22351: LD_INT 20
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22359: LD_VAR 0 6
22363: PPUSH
22364: CALL_OW 264
22368: PUSH
22369: LD_INT 9
22371: PUSH
22372: EMPTY
22373: LIST
22374: IN
22375: IFFALSE 22396
// points := [ 5 , 70 , 20 ] ;
22377: LD_ADDR_VAR 0 9
22381: PUSH
22382: LD_INT 5
22384: PUSH
22385: LD_INT 70
22387: PUSH
22388: LD_INT 20
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22396: LD_VAR 0 6
22400: PPUSH
22401: CALL_OW 264
22405: PUSH
22406: LD_INT 10
22408: PUSH
22409: EMPTY
22410: LIST
22411: IN
22412: IFFALSE 22433
// points := [ 35 , 110 , 70 ] ;
22414: LD_ADDR_VAR 0 9
22418: PUSH
22419: LD_INT 35
22421: PUSH
22422: LD_INT 110
22424: PUSH
22425: LD_INT 70
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22433: LD_VAR 0 6
22437: PPUSH
22438: CALL_OW 265
22442: PUSH
22443: LD_INT 25
22445: EQUAL
22446: IFFALSE 22467
// points := [ 80 , 65 , 100 ] ;
22448: LD_ADDR_VAR 0 9
22452: PUSH
22453: LD_INT 80
22455: PUSH
22456: LD_INT 65
22458: PUSH
22459: LD_INT 100
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: LIST
22466: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22467: LD_VAR 0 6
22471: PPUSH
22472: CALL_OW 263
22476: PUSH
22477: LD_INT 1
22479: EQUAL
22480: IFFALSE 22515
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22482: LD_ADDR_VAR 0 10
22486: PUSH
22487: LD_VAR 0 10
22491: PUSH
22492: LD_VAR 0 6
22496: PPUSH
22497: CALL_OW 311
22501: PPUSH
22502: LD_INT 3
22504: PPUSH
22505: CALL_OW 259
22509: PUSH
22510: LD_INT 4
22512: MUL
22513: MUL
22514: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22515: LD_VAR 0 6
22519: PPUSH
22520: CALL_OW 263
22524: PUSH
22525: LD_INT 2
22527: EQUAL
22528: IFFALSE 22579
// begin j := IsControledBy ( i ) ;
22530: LD_ADDR_VAR 0 7
22534: PUSH
22535: LD_VAR 0 6
22539: PPUSH
22540: CALL_OW 312
22544: ST_TO_ADDR
// if j then
22545: LD_VAR 0 7
22549: IFFALSE 22579
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22551: LD_ADDR_VAR 0 10
22555: PUSH
22556: LD_VAR 0 10
22560: PUSH
22561: LD_VAR 0 7
22565: PPUSH
22566: LD_INT 3
22568: PPUSH
22569: CALL_OW 259
22573: PUSH
22574: LD_INT 3
22576: MUL
22577: MUL
22578: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22579: LD_VAR 0 6
22583: PPUSH
22584: CALL_OW 264
22588: PUSH
22589: LD_INT 5
22591: PUSH
22592: LD_INT 6
22594: PUSH
22595: LD_INT 46
22597: PUSH
22598: LD_INT 44
22600: PUSH
22601: LD_INT 47
22603: PUSH
22604: LD_INT 45
22606: PUSH
22607: LD_INT 28
22609: PUSH
22610: LD_INT 7
22612: PUSH
22613: LD_INT 27
22615: PUSH
22616: LD_INT 29
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: IN
22631: PUSH
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_INT 52
22639: PPUSH
22640: CALL_OW 321
22644: PUSH
22645: LD_INT 2
22647: EQUAL
22648: AND
22649: IFFALSE 22666
// bpoints := bpoints * 1.2 ;
22651: LD_ADDR_VAR 0 10
22655: PUSH
22656: LD_VAR 0 10
22660: PUSH
22661: LD_REAL  1.20000000000000E+0000
22664: MUL
22665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22666: LD_VAR 0 6
22670: PPUSH
22671: CALL_OW 264
22675: PUSH
22676: LD_INT 6
22678: PUSH
22679: LD_INT 46
22681: PUSH
22682: LD_INT 47
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: IN
22690: IFFALSE 22707
// bpoints := bpoints * 1.2 ;
22692: LD_ADDR_VAR 0 10
22696: PUSH
22697: LD_VAR 0 10
22701: PUSH
22702: LD_REAL  1.20000000000000E+0000
22705: MUL
22706: ST_TO_ADDR
// end ; unit_building :
22707: GO 22721
22709: LD_INT 3
22711: DOUBLE
22712: EQUAL
22713: IFTRUE 22717
22715: GO 22720
22717: POP
// ; end ;
22718: GO 22721
22720: POP
// for j = 1 to 3 do
22721: LD_ADDR_VAR 0 7
22725: PUSH
22726: DOUBLE
22727: LD_INT 1
22729: DEC
22730: ST_TO_ADDR
22731: LD_INT 3
22733: PUSH
22734: FOR_TO
22735: IFFALSE 22788
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22737: LD_ADDR_VAR 0 5
22741: PUSH
22742: LD_VAR 0 5
22746: PPUSH
22747: LD_VAR 0 7
22751: PPUSH
22752: LD_VAR 0 5
22756: PUSH
22757: LD_VAR 0 7
22761: ARRAY
22762: PUSH
22763: LD_VAR 0 9
22767: PUSH
22768: LD_VAR 0 7
22772: ARRAY
22773: PUSH
22774: LD_VAR 0 10
22778: MUL
22779: PLUS
22780: PPUSH
22781: CALL_OW 1
22785: ST_TO_ADDR
22786: GO 22734
22788: POP
22789: POP
// end ;
22790: GO 21269
22792: POP
22793: POP
// result := Replace ( result , 4 , tmp ) ;
22794: LD_ADDR_VAR 0 5
22798: PUSH
22799: LD_VAR 0 5
22803: PPUSH
22804: LD_INT 4
22806: PPUSH
22807: LD_VAR 0 8
22811: PPUSH
22812: CALL_OW 1
22816: ST_TO_ADDR
// end ;
22817: LD_VAR 0 5
22821: RET
// export function DangerAtRange ( unit , range ) ; begin
22822: LD_INT 0
22824: PPUSH
// if not unit then
22825: LD_VAR 0 1
22829: NOT
22830: IFFALSE 22834
// exit ;
22832: GO 22879
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22834: LD_ADDR_VAR 0 3
22838: PUSH
22839: LD_VAR 0 1
22843: PPUSH
22844: CALL_OW 255
22848: PPUSH
22849: LD_VAR 0 1
22853: PPUSH
22854: CALL_OW 250
22858: PPUSH
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 251
22868: PPUSH
22869: LD_VAR 0 2
22873: PPUSH
22874: CALL 21121 0 4
22878: ST_TO_ADDR
// end ;
22879: LD_VAR 0 3
22883: RET
// export function DangerInArea ( side , area ) ; begin
22884: LD_INT 0
22886: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
22887: LD_ADDR_VAR 0 3
22891: PUSH
22892: LD_VAR 0 2
22896: PPUSH
22897: LD_INT 81
22899: PUSH
22900: LD_VAR 0 1
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PPUSH
22909: CALL_OW 70
22913: ST_TO_ADDR
// end ;
22914: LD_VAR 0 3
22918: RET
// export function IsExtension ( b ) ; begin
22919: LD_INT 0
22921: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22922: LD_ADDR_VAR 0 2
22926: PUSH
22927: LD_VAR 0 1
22931: PUSH
22932: LD_INT 23
22934: PUSH
22935: LD_INT 20
22937: PUSH
22938: LD_INT 22
22940: PUSH
22941: LD_INT 17
22943: PUSH
22944: LD_INT 24
22946: PUSH
22947: LD_INT 21
22949: PUSH
22950: LD_INT 19
22952: PUSH
22953: LD_INT 16
22955: PUSH
22956: LD_INT 25
22958: PUSH
22959: LD_INT 18
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: IN
22974: ST_TO_ADDR
// end ;
22975: LD_VAR 0 2
22979: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
22984: PPUSH
// result := [ ] ;
22985: LD_ADDR_VAR 0 4
22989: PUSH
22990: EMPTY
22991: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
22992: LD_ADDR_VAR 0 5
22996: PUSH
22997: LD_VAR 0 2
23001: PPUSH
23002: LD_INT 21
23004: PUSH
23005: LD_INT 3
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 70
23016: ST_TO_ADDR
// if not tmp then
23017: LD_VAR 0 5
23021: NOT
23022: IFFALSE 23026
// exit ;
23024: GO 23090
// if checkLink then
23026: LD_VAR 0 3
23030: IFFALSE 23080
// begin for i in tmp do
23032: LD_ADDR_VAR 0 6
23036: PUSH
23037: LD_VAR 0 5
23041: PUSH
23042: FOR_IN
23043: IFFALSE 23078
// if GetBase ( i ) <> base then
23045: LD_VAR 0 6
23049: PPUSH
23050: CALL_OW 274
23054: PUSH
23055: LD_VAR 0 1
23059: NONEQUAL
23060: IFFALSE 23076
// ComLinkToBase ( base , i ) ;
23062: LD_VAR 0 1
23066: PPUSH
23067: LD_VAR 0 6
23071: PPUSH
23072: CALL_OW 169
23076: GO 23042
23078: POP
23079: POP
// end ; result := tmp ;
23080: LD_ADDR_VAR 0 4
23084: PUSH
23085: LD_VAR 0 5
23089: ST_TO_ADDR
// end ;
23090: LD_VAR 0 4
23094: RET
// export function ComComplete ( units , b ) ; var i ; begin
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
// if not units then
23099: LD_VAR 0 1
23103: NOT
23104: IFFALSE 23108
// exit ;
23106: GO 23198
// for i in units do
23108: LD_ADDR_VAR 0 4
23112: PUSH
23113: LD_VAR 0 1
23117: PUSH
23118: FOR_IN
23119: IFFALSE 23196
// if BuildingStatus ( b ) = bs_build then
23121: LD_VAR 0 2
23125: PPUSH
23126: CALL_OW 461
23130: PUSH
23131: LD_INT 1
23133: EQUAL
23134: IFFALSE 23194
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23136: LD_VAR 0 4
23140: PPUSH
23141: LD_STRING h
23143: PUSH
23144: LD_VAR 0 2
23148: PPUSH
23149: CALL_OW 250
23153: PUSH
23154: LD_VAR 0 2
23158: PPUSH
23159: CALL_OW 251
23163: PUSH
23164: LD_VAR 0 2
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: PPUSH
23190: CALL_OW 446
23194: GO 23118
23196: POP
23197: POP
// end ;
23198: LD_VAR 0 3
23202: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23203: LD_INT 0
23205: PPUSH
23206: PPUSH
23207: PPUSH
23208: PPUSH
23209: PPUSH
23210: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23211: LD_VAR 0 1
23215: NOT
23216: PUSH
23217: LD_VAR 0 1
23221: PPUSH
23222: CALL_OW 263
23226: PUSH
23227: LD_INT 2
23229: NONEQUAL
23230: OR
23231: IFFALSE 23235
// exit ;
23233: GO 23551
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23235: LD_ADDR_VAR 0 6
23239: PUSH
23240: LD_INT 22
23242: PUSH
23243: LD_VAR 0 1
23247: PPUSH
23248: CALL_OW 255
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 2
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: LD_INT 36
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 34
23272: PUSH
23273: LD_INT 31
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PPUSH
23289: CALL_OW 69
23293: ST_TO_ADDR
// if not tmp then
23294: LD_VAR 0 6
23298: NOT
23299: IFFALSE 23303
// exit ;
23301: GO 23551
// result := [ ] ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: EMPTY
23309: ST_TO_ADDR
// for i in tmp do
23310: LD_ADDR_VAR 0 3
23314: PUSH
23315: LD_VAR 0 6
23319: PUSH
23320: FOR_IN
23321: IFFALSE 23392
// begin t := UnitsInside ( i ) ;
23323: LD_ADDR_VAR 0 4
23327: PUSH
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 313
23337: ST_TO_ADDR
// if t then
23338: LD_VAR 0 4
23342: IFFALSE 23390
// for j in t do
23344: LD_ADDR_VAR 0 7
23348: PUSH
23349: LD_VAR 0 4
23353: PUSH
23354: FOR_IN
23355: IFFALSE 23388
// result := Replace ( result , result + 1 , j ) ;
23357: LD_ADDR_VAR 0 2
23361: PUSH
23362: LD_VAR 0 2
23366: PPUSH
23367: LD_VAR 0 2
23371: PUSH
23372: LD_INT 1
23374: PLUS
23375: PPUSH
23376: LD_VAR 0 7
23380: PPUSH
23381: CALL_OW 1
23385: ST_TO_ADDR
23386: GO 23354
23388: POP
23389: POP
// end ;
23390: GO 23320
23392: POP
23393: POP
// if not result then
23394: LD_VAR 0 2
23398: NOT
23399: IFFALSE 23403
// exit ;
23401: GO 23551
// mech := result [ 1 ] ;
23403: LD_ADDR_VAR 0 5
23407: PUSH
23408: LD_VAR 0 2
23412: PUSH
23413: LD_INT 1
23415: ARRAY
23416: ST_TO_ADDR
// if result > 1 then
23417: LD_VAR 0 2
23421: PUSH
23422: LD_INT 1
23424: GREATER
23425: IFFALSE 23537
// begin for i = 2 to result do
23427: LD_ADDR_VAR 0 3
23431: PUSH
23432: DOUBLE
23433: LD_INT 2
23435: DEC
23436: ST_TO_ADDR
23437: LD_VAR 0 2
23441: PUSH
23442: FOR_TO
23443: IFFALSE 23535
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23445: LD_ADDR_VAR 0 4
23449: PUSH
23450: LD_VAR 0 2
23454: PUSH
23455: LD_VAR 0 3
23459: ARRAY
23460: PPUSH
23461: LD_INT 3
23463: PPUSH
23464: CALL_OW 259
23468: PUSH
23469: LD_VAR 0 2
23473: PUSH
23474: LD_VAR 0 3
23478: ARRAY
23479: PPUSH
23480: CALL_OW 432
23484: MINUS
23485: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23486: LD_VAR 0 4
23490: PUSH
23491: LD_VAR 0 5
23495: PPUSH
23496: LD_INT 3
23498: PPUSH
23499: CALL_OW 259
23503: PUSH
23504: LD_VAR 0 5
23508: PPUSH
23509: CALL_OW 432
23513: MINUS
23514: GREATEREQUAL
23515: IFFALSE 23533
// mech := result [ i ] ;
23517: LD_ADDR_VAR 0 5
23521: PUSH
23522: LD_VAR 0 2
23526: PUSH
23527: LD_VAR 0 3
23531: ARRAY
23532: ST_TO_ADDR
// end ;
23533: GO 23442
23535: POP
23536: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23537: LD_VAR 0 1
23541: PPUSH
23542: LD_VAR 0 5
23546: PPUSH
23547: CALL_OW 135
// end ;
23551: LD_VAR 0 2
23555: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23556: LD_INT 0
23558: PPUSH
23559: PPUSH
23560: PPUSH
23561: PPUSH
23562: PPUSH
23563: PPUSH
23564: PPUSH
23565: PPUSH
23566: PPUSH
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
// result := [ ] ;
23571: LD_ADDR_VAR 0 7
23575: PUSH
23576: EMPTY
23577: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23578: LD_VAR 0 1
23582: PPUSH
23583: CALL_OW 266
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: IN
23598: NOT
23599: IFFALSE 23603
// exit ;
23601: GO 25237
// if name then
23603: LD_VAR 0 3
23607: IFFALSE 23623
// SetBName ( base_dep , name ) ;
23609: LD_VAR 0 1
23613: PPUSH
23614: LD_VAR 0 3
23618: PPUSH
23619: CALL_OW 500
// base := GetBase ( base_dep ) ;
23623: LD_ADDR_VAR 0 15
23627: PUSH
23628: LD_VAR 0 1
23632: PPUSH
23633: CALL_OW 274
23637: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23638: LD_ADDR_VAR 0 16
23642: PUSH
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 255
23652: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23653: LD_ADDR_VAR 0 17
23657: PUSH
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL_OW 248
23667: ST_TO_ADDR
// if sources then
23668: LD_VAR 0 5
23672: IFFALSE 23719
// for i = 1 to 3 do
23674: LD_ADDR_VAR 0 8
23678: PUSH
23679: DOUBLE
23680: LD_INT 1
23682: DEC
23683: ST_TO_ADDR
23684: LD_INT 3
23686: PUSH
23687: FOR_TO
23688: IFFALSE 23717
// AddResourceType ( base , i , sources [ i ] ) ;
23690: LD_VAR 0 15
23694: PPUSH
23695: LD_VAR 0 8
23699: PPUSH
23700: LD_VAR 0 5
23704: PUSH
23705: LD_VAR 0 8
23709: ARRAY
23710: PPUSH
23711: CALL_OW 276
23715: GO 23687
23717: POP
23718: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23719: LD_ADDR_VAR 0 18
23723: PUSH
23724: LD_VAR 0 15
23728: PPUSH
23729: LD_VAR 0 2
23733: PPUSH
23734: LD_INT 1
23736: PPUSH
23737: CALL 22980 0 3
23741: ST_TO_ADDR
// InitHc ;
23742: CALL_OW 19
// InitUc ;
23746: CALL_OW 18
// uc_side := side ;
23750: LD_ADDR_OWVAR 20
23754: PUSH
23755: LD_VAR 0 16
23759: ST_TO_ADDR
// uc_nation := nation ;
23760: LD_ADDR_OWVAR 21
23764: PUSH
23765: LD_VAR 0 17
23769: ST_TO_ADDR
// if buildings then
23770: LD_VAR 0 18
23774: IFFALSE 25096
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23776: LD_ADDR_VAR 0 19
23780: PUSH
23781: LD_VAR 0 18
23785: PPUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 30
23791: PUSH
23792: LD_INT 29
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 30
23801: PUSH
23802: LD_INT 30
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: PPUSH
23814: CALL_OW 72
23818: ST_TO_ADDR
// if tmp then
23819: LD_VAR 0 19
23823: IFFALSE 23871
// for i in tmp do
23825: LD_ADDR_VAR 0 8
23829: PUSH
23830: LD_VAR 0 19
23834: PUSH
23835: FOR_IN
23836: IFFALSE 23869
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23838: LD_VAR 0 8
23842: PPUSH
23843: CALL_OW 250
23847: PPUSH
23848: LD_VAR 0 8
23852: PPUSH
23853: CALL_OW 251
23857: PPUSH
23858: LD_VAR 0 16
23862: PPUSH
23863: CALL_OW 441
23867: GO 23835
23869: POP
23870: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23871: LD_VAR 0 18
23875: PPUSH
23876: LD_INT 2
23878: PUSH
23879: LD_INT 30
23881: PUSH
23882: LD_INT 32
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 30
23891: PUSH
23892: LD_INT 33
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 72
23908: IFFALSE 23996
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23910: LD_ADDR_VAR 0 8
23914: PUSH
23915: LD_VAR 0 18
23919: PPUSH
23920: LD_INT 2
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 32
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 30
23935: PUSH
23936: LD_INT 33
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: PPUSH
23948: CALL_OW 72
23952: PUSH
23953: FOR_IN
23954: IFFALSE 23994
// begin if not GetBWeapon ( i ) then
23956: LD_VAR 0 8
23960: PPUSH
23961: CALL_OW 269
23965: NOT
23966: IFFALSE 23992
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
23968: LD_VAR 0 8
23972: PPUSH
23973: LD_VAR 0 8
23977: PPUSH
23978: LD_VAR 0 2
23982: PPUSH
23983: CALL 25242 0 2
23987: PPUSH
23988: CALL_OW 431
// end ;
23992: GO 23953
23994: POP
23995: POP
// end ; for i = 1 to personel do
23996: LD_ADDR_VAR 0 8
24000: PUSH
24001: DOUBLE
24002: LD_INT 1
24004: DEC
24005: ST_TO_ADDR
24006: LD_VAR 0 6
24010: PUSH
24011: FOR_TO
24012: IFFALSE 25076
// begin if i > 4 then
24014: LD_VAR 0 8
24018: PUSH
24019: LD_INT 4
24021: GREATER
24022: IFFALSE 24026
// break ;
24024: GO 25076
// case i of 1 :
24026: LD_VAR 0 8
24030: PUSH
24031: LD_INT 1
24033: DOUBLE
24034: EQUAL
24035: IFTRUE 24039
24037: GO 24119
24039: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24040: LD_ADDR_VAR 0 12
24044: PUSH
24045: LD_VAR 0 18
24049: PPUSH
24050: LD_INT 22
24052: PUSH
24053: LD_VAR 0 16
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 58
24064: PUSH
24065: EMPTY
24066: LIST
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: LD_INT 30
24073: PUSH
24074: LD_INT 32
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 4
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 30
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: PPUSH
24112: CALL_OW 72
24116: ST_TO_ADDR
24117: GO 24341
24119: LD_INT 2
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24189
24127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24128: LD_ADDR_VAR 0 12
24132: PUSH
24133: LD_VAR 0 18
24137: PPUSH
24138: LD_INT 22
24140: PUSH
24141: LD_VAR 0 16
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: PUSH
24153: LD_INT 30
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 30
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PPUSH
24182: CALL_OW 72
24186: ST_TO_ADDR
24187: GO 24341
24189: LD_INT 3
24191: DOUBLE
24192: EQUAL
24193: IFTRUE 24197
24195: GO 24259
24197: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24198: LD_ADDR_VAR 0 12
24202: PUSH
24203: LD_VAR 0 18
24207: PPUSH
24208: LD_INT 22
24210: PUSH
24211: LD_VAR 0 16
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 2
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 30
24235: PUSH
24236: LD_INT 3
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PPUSH
24252: CALL_OW 72
24256: ST_TO_ADDR
24257: GO 24341
24259: LD_INT 4
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24267
24265: GO 24340
24267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24268: LD_ADDR_VAR 0 12
24272: PUSH
24273: LD_VAR 0 18
24277: PPUSH
24278: LD_INT 22
24280: PUSH
24281: LD_VAR 0 16
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 6
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 30
24305: PUSH
24306: LD_INT 7
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 30
24315: PUSH
24316: LD_INT 8
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PPUSH
24333: CALL_OW 72
24337: ST_TO_ADDR
24338: GO 24341
24340: POP
// if i = 1 then
24341: LD_VAR 0 8
24345: PUSH
24346: LD_INT 1
24348: EQUAL
24349: IFFALSE 24460
// begin tmp := [ ] ;
24351: LD_ADDR_VAR 0 19
24355: PUSH
24356: EMPTY
24357: ST_TO_ADDR
// for j in f do
24358: LD_ADDR_VAR 0 9
24362: PUSH
24363: LD_VAR 0 12
24367: PUSH
24368: FOR_IN
24369: IFFALSE 24442
// if GetBType ( j ) = b_bunker then
24371: LD_VAR 0 9
24375: PPUSH
24376: CALL_OW 266
24380: PUSH
24381: LD_INT 32
24383: EQUAL
24384: IFFALSE 24411
// tmp := Insert ( tmp , 1 , j ) else
24386: LD_ADDR_VAR 0 19
24390: PUSH
24391: LD_VAR 0 19
24395: PPUSH
24396: LD_INT 1
24398: PPUSH
24399: LD_VAR 0 9
24403: PPUSH
24404: CALL_OW 2
24408: ST_TO_ADDR
24409: GO 24440
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24411: LD_ADDR_VAR 0 19
24415: PUSH
24416: LD_VAR 0 19
24420: PPUSH
24421: LD_VAR 0 19
24425: PUSH
24426: LD_INT 1
24428: PLUS
24429: PPUSH
24430: LD_VAR 0 9
24434: PPUSH
24435: CALL_OW 2
24439: ST_TO_ADDR
24440: GO 24368
24442: POP
24443: POP
// if tmp then
24444: LD_VAR 0 19
24448: IFFALSE 24460
// f := tmp ;
24450: LD_ADDR_VAR 0 12
24454: PUSH
24455: LD_VAR 0 19
24459: ST_TO_ADDR
// end ; x := personel [ i ] ;
24460: LD_ADDR_VAR 0 13
24464: PUSH
24465: LD_VAR 0 6
24469: PUSH
24470: LD_VAR 0 8
24474: ARRAY
24475: ST_TO_ADDR
// if x = - 1 then
24476: LD_VAR 0 13
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: EQUAL
24485: IFFALSE 24694
// begin for j in f do
24487: LD_ADDR_VAR 0 9
24491: PUSH
24492: LD_VAR 0 12
24496: PUSH
24497: FOR_IN
24498: IFFALSE 24690
// repeat InitHc ;
24500: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24504: LD_VAR 0 9
24508: PPUSH
24509: CALL_OW 266
24513: PUSH
24514: LD_INT 5
24516: EQUAL
24517: IFFALSE 24587
// begin if UnitsInside ( j ) < 3 then
24519: LD_VAR 0 9
24523: PPUSH
24524: CALL_OW 313
24528: PUSH
24529: LD_INT 3
24531: LESS
24532: IFFALSE 24568
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24534: LD_INT 0
24536: PPUSH
24537: LD_INT 5
24539: PUSH
24540: LD_INT 8
24542: PUSH
24543: LD_INT 9
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: PUSH
24551: LD_VAR 0 17
24555: ARRAY
24556: PPUSH
24557: LD_VAR 0 4
24561: PPUSH
24562: CALL_OW 380
24566: GO 24585
// PrepareHuman ( false , i , skill ) ;
24568: LD_INT 0
24570: PPUSH
24571: LD_VAR 0 8
24575: PPUSH
24576: LD_VAR 0 4
24580: PPUSH
24581: CALL_OW 380
// end else
24585: GO 24604
// PrepareHuman ( false , i , skill ) ;
24587: LD_INT 0
24589: PPUSH
24590: LD_VAR 0 8
24594: PPUSH
24595: LD_VAR 0 4
24599: PPUSH
24600: CALL_OW 380
// un := CreateHuman ;
24604: LD_ADDR_VAR 0 14
24608: PUSH
24609: CALL_OW 44
24613: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24614: LD_ADDR_VAR 0 7
24618: PUSH
24619: LD_VAR 0 7
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: LD_VAR 0 14
24631: PPUSH
24632: CALL_OW 2
24636: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24637: LD_VAR 0 14
24641: PPUSH
24642: LD_VAR 0 9
24646: PPUSH
24647: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24651: LD_VAR 0 9
24655: PPUSH
24656: CALL_OW 313
24660: PUSH
24661: LD_INT 6
24663: EQUAL
24664: PUSH
24665: LD_VAR 0 9
24669: PPUSH
24670: CALL_OW 266
24674: PUSH
24675: LD_INT 32
24677: PUSH
24678: LD_INT 31
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: IN
24685: OR
24686: IFFALSE 24500
24688: GO 24497
24690: POP
24691: POP
// end else
24692: GO 25074
// for j = 1 to x do
24694: LD_ADDR_VAR 0 9
24698: PUSH
24699: DOUBLE
24700: LD_INT 1
24702: DEC
24703: ST_TO_ADDR
24704: LD_VAR 0 13
24708: PUSH
24709: FOR_TO
24710: IFFALSE 25072
// begin InitHc ;
24712: CALL_OW 19
// if not f then
24716: LD_VAR 0 12
24720: NOT
24721: IFFALSE 24810
// begin PrepareHuman ( false , i , skill ) ;
24723: LD_INT 0
24725: PPUSH
24726: LD_VAR 0 8
24730: PPUSH
24731: LD_VAR 0 4
24735: PPUSH
24736: CALL_OW 380
// un := CreateHuman ;
24740: LD_ADDR_VAR 0 14
24744: PUSH
24745: CALL_OW 44
24749: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24750: LD_ADDR_VAR 0 7
24754: PUSH
24755: LD_VAR 0 7
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: LD_VAR 0 14
24767: PPUSH
24768: CALL_OW 2
24772: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24773: LD_VAR 0 14
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 250
24787: PPUSH
24788: LD_VAR 0 1
24792: PPUSH
24793: CALL_OW 251
24797: PPUSH
24798: LD_INT 10
24800: PPUSH
24801: LD_INT 0
24803: PPUSH
24804: CALL_OW 50
// continue ;
24808: GO 24709
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24810: LD_VAR 0 12
24814: PUSH
24815: LD_INT 1
24817: ARRAY
24818: PPUSH
24819: CALL_OW 313
24823: PUSH
24824: LD_VAR 0 12
24828: PUSH
24829: LD_INT 1
24831: ARRAY
24832: PPUSH
24833: CALL_OW 266
24837: PUSH
24838: LD_INT 32
24840: PUSH
24841: LD_INT 31
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: IN
24848: AND
24849: PUSH
24850: LD_VAR 0 12
24854: PUSH
24855: LD_INT 1
24857: ARRAY
24858: PPUSH
24859: CALL_OW 313
24863: PUSH
24864: LD_INT 6
24866: EQUAL
24867: OR
24868: IFFALSE 24888
// f := Delete ( f , 1 ) ;
24870: LD_ADDR_VAR 0 12
24874: PUSH
24875: LD_VAR 0 12
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: CALL_OW 3
24887: ST_TO_ADDR
// if not f then
24888: LD_VAR 0 12
24892: NOT
24893: IFFALSE 24911
// begin x := x + 2 ;
24895: LD_ADDR_VAR 0 13
24899: PUSH
24900: LD_VAR 0 13
24904: PUSH
24905: LD_INT 2
24907: PLUS
24908: ST_TO_ADDR
// continue ;
24909: GO 24709
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24911: LD_VAR 0 12
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PPUSH
24920: CALL_OW 266
24924: PUSH
24925: LD_INT 5
24927: EQUAL
24928: IFFALSE 25002
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24930: LD_VAR 0 12
24934: PUSH
24935: LD_INT 1
24937: ARRAY
24938: PPUSH
24939: CALL_OW 313
24943: PUSH
24944: LD_INT 3
24946: LESS
24947: IFFALSE 24983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24949: LD_INT 0
24951: PPUSH
24952: LD_INT 5
24954: PUSH
24955: LD_INT 8
24957: PUSH
24958: LD_INT 9
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: PUSH
24966: LD_VAR 0 17
24970: ARRAY
24971: PPUSH
24972: LD_VAR 0 4
24976: PPUSH
24977: CALL_OW 380
24981: GO 25000
// PrepareHuman ( false , i , skill ) ;
24983: LD_INT 0
24985: PPUSH
24986: LD_VAR 0 8
24990: PPUSH
24991: LD_VAR 0 4
24995: PPUSH
24996: CALL_OW 380
// end else
25000: GO 25019
// PrepareHuman ( false , i , skill ) ;
25002: LD_INT 0
25004: PPUSH
25005: LD_VAR 0 8
25009: PPUSH
25010: LD_VAR 0 4
25014: PPUSH
25015: CALL_OW 380
// un := CreateHuman ;
25019: LD_ADDR_VAR 0 14
25023: PUSH
25024: CALL_OW 44
25028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25029: LD_ADDR_VAR 0 7
25033: PUSH
25034: LD_VAR 0 7
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: LD_VAR 0 14
25046: PPUSH
25047: CALL_OW 2
25051: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25052: LD_VAR 0 14
25056: PPUSH
25057: LD_VAR 0 12
25061: PUSH
25062: LD_INT 1
25064: ARRAY
25065: PPUSH
25066: CALL_OW 52
// end ;
25070: GO 24709
25072: POP
25073: POP
// end ;
25074: GO 24011
25076: POP
25077: POP
// result := result ^ buildings ;
25078: LD_ADDR_VAR 0 7
25082: PUSH
25083: LD_VAR 0 7
25087: PUSH
25088: LD_VAR 0 18
25092: ADD
25093: ST_TO_ADDR
// end else
25094: GO 25237
// begin for i = 1 to personel do
25096: LD_ADDR_VAR 0 8
25100: PUSH
25101: DOUBLE
25102: LD_INT 1
25104: DEC
25105: ST_TO_ADDR
25106: LD_VAR 0 6
25110: PUSH
25111: FOR_TO
25112: IFFALSE 25235
// begin if i > 4 then
25114: LD_VAR 0 8
25118: PUSH
25119: LD_INT 4
25121: GREATER
25122: IFFALSE 25126
// break ;
25124: GO 25235
// x := personel [ i ] ;
25126: LD_ADDR_VAR 0 13
25130: PUSH
25131: LD_VAR 0 6
25135: PUSH
25136: LD_VAR 0 8
25140: ARRAY
25141: ST_TO_ADDR
// if x = - 1 then
25142: LD_VAR 0 13
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: EQUAL
25151: IFFALSE 25155
// continue ;
25153: GO 25111
// PrepareHuman ( false , i , skill ) ;
25155: LD_INT 0
25157: PPUSH
25158: LD_VAR 0 8
25162: PPUSH
25163: LD_VAR 0 4
25167: PPUSH
25168: CALL_OW 380
// un := CreateHuman ;
25172: LD_ADDR_VAR 0 14
25176: PUSH
25177: CALL_OW 44
25181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25182: LD_VAR 0 14
25186: PPUSH
25187: LD_VAR 0 1
25191: PPUSH
25192: CALL_OW 250
25196: PPUSH
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 251
25206: PPUSH
25207: LD_INT 10
25209: PPUSH
25210: LD_INT 0
25212: PPUSH
25213: CALL_OW 50
// result := result ^ un ;
25217: LD_ADDR_VAR 0 7
25221: PUSH
25222: LD_VAR 0 7
25226: PUSH
25227: LD_VAR 0 14
25231: ADD
25232: ST_TO_ADDR
// end ;
25233: GO 25111
25235: POP
25236: POP
// end ; end ;
25237: LD_VAR 0 7
25241: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25242: LD_INT 0
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
// result := false ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_INT 0
25267: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25268: LD_VAR 0 1
25272: NOT
25273: PUSH
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 266
25283: PUSH
25284: LD_INT 32
25286: PUSH
25287: LD_INT 33
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: IN
25294: NOT
25295: OR
25296: IFFALSE 25300
// exit ;
25298: GO 26409
// nat := GetNation ( tower ) ;
25300: LD_ADDR_VAR 0 12
25304: PUSH
25305: LD_VAR 0 1
25309: PPUSH
25310: CALL_OW 248
25314: ST_TO_ADDR
// side := GetSide ( tower ) ;
25315: LD_ADDR_VAR 0 16
25319: PUSH
25320: LD_VAR 0 1
25324: PPUSH
25325: CALL_OW 255
25329: ST_TO_ADDR
// x := GetX ( tower ) ;
25330: LD_ADDR_VAR 0 10
25334: PUSH
25335: LD_VAR 0 1
25339: PPUSH
25340: CALL_OW 250
25344: ST_TO_ADDR
// y := GetY ( tower ) ;
25345: LD_ADDR_VAR 0 11
25349: PUSH
25350: LD_VAR 0 1
25354: PPUSH
25355: CALL_OW 251
25359: ST_TO_ADDR
// if not x or not y then
25360: LD_VAR 0 10
25364: NOT
25365: PUSH
25366: LD_VAR 0 11
25370: NOT
25371: OR
25372: IFFALSE 25376
// exit ;
25374: GO 26409
// weapon := 0 ;
25376: LD_ADDR_VAR 0 18
25380: PUSH
25381: LD_INT 0
25383: ST_TO_ADDR
// fac_list := [ ] ;
25384: LD_ADDR_VAR 0 17
25388: PUSH
25389: EMPTY
25390: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25391: LD_ADDR_VAR 0 6
25395: PUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 274
25405: PPUSH
25406: LD_VAR 0 2
25410: PPUSH
25411: LD_INT 0
25413: PPUSH
25414: CALL 22980 0 3
25418: PPUSH
25419: LD_INT 30
25421: PUSH
25422: LD_INT 3
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PPUSH
25429: CALL_OW 72
25433: ST_TO_ADDR
// if not factories then
25434: LD_VAR 0 6
25438: NOT
25439: IFFALSE 25443
// exit ;
25441: GO 26409
// for i in factories do
25443: LD_ADDR_VAR 0 8
25447: PUSH
25448: LD_VAR 0 6
25452: PUSH
25453: FOR_IN
25454: IFFALSE 25479
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25456: LD_ADDR_VAR 0 17
25460: PUSH
25461: LD_VAR 0 17
25465: PUSH
25466: LD_VAR 0 8
25470: PPUSH
25471: CALL_OW 478
25475: UNION
25476: ST_TO_ADDR
25477: GO 25453
25479: POP
25480: POP
// if not fac_list then
25481: LD_VAR 0 17
25485: NOT
25486: IFFALSE 25490
// exit ;
25488: GO 26409
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25490: LD_ADDR_VAR 0 5
25494: PUSH
25495: LD_INT 4
25497: PUSH
25498: LD_INT 5
25500: PUSH
25501: LD_INT 9
25503: PUSH
25504: LD_INT 10
25506: PUSH
25507: LD_INT 6
25509: PUSH
25510: LD_INT 7
25512: PUSH
25513: LD_INT 11
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 27
25527: PUSH
25528: LD_INT 28
25530: PUSH
25531: LD_INT 26
25533: PUSH
25534: LD_INT 30
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 43
25545: PUSH
25546: LD_INT 44
25548: PUSH
25549: LD_INT 46
25551: PUSH
25552: LD_INT 45
25554: PUSH
25555: LD_INT 47
25557: PUSH
25558: LD_INT 49
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: PUSH
25574: LD_VAR 0 12
25578: ARRAY
25579: ST_TO_ADDR
// list := list isect fac_list ;
25580: LD_ADDR_VAR 0 5
25584: PUSH
25585: LD_VAR 0 5
25589: PUSH
25590: LD_VAR 0 17
25594: ISECT
25595: ST_TO_ADDR
// if not list then
25596: LD_VAR 0 5
25600: NOT
25601: IFFALSE 25605
// exit ;
25603: GO 26409
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25605: LD_VAR 0 12
25609: PUSH
25610: LD_INT 3
25612: EQUAL
25613: PUSH
25614: LD_INT 49
25616: PUSH
25617: LD_VAR 0 5
25621: IN
25622: AND
25623: PUSH
25624: LD_INT 31
25626: PPUSH
25627: LD_VAR 0 16
25631: PPUSH
25632: CALL_OW 321
25636: PUSH
25637: LD_INT 2
25639: EQUAL
25640: AND
25641: IFFALSE 25701
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25643: LD_INT 22
25645: PUSH
25646: LD_VAR 0 16
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 35
25657: PUSH
25658: LD_INT 49
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 91
25667: PUSH
25668: LD_VAR 0 1
25672: PUSH
25673: LD_INT 10
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: PPUSH
25686: CALL_OW 69
25690: NOT
25691: IFFALSE 25701
// weapon := ru_time_lapser ;
25693: LD_ADDR_VAR 0 18
25697: PUSH
25698: LD_INT 49
25700: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25701: LD_VAR 0 12
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: IN
25716: PUSH
25717: LD_INT 11
25719: PUSH
25720: LD_VAR 0 5
25724: IN
25725: PUSH
25726: LD_INT 30
25728: PUSH
25729: LD_VAR 0 5
25733: IN
25734: OR
25735: AND
25736: PUSH
25737: LD_INT 6
25739: PPUSH
25740: LD_VAR 0 16
25744: PPUSH
25745: CALL_OW 321
25749: PUSH
25750: LD_INT 2
25752: EQUAL
25753: AND
25754: IFFALSE 25919
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25756: LD_INT 22
25758: PUSH
25759: LD_VAR 0 16
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 2
25770: PUSH
25771: LD_INT 35
25773: PUSH
25774: LD_INT 11
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 35
25783: PUSH
25784: LD_INT 30
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 91
25798: PUSH
25799: LD_VAR 0 1
25803: PUSH
25804: LD_INT 18
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: NOT
25822: PUSH
25823: LD_INT 22
25825: PUSH
25826: LD_VAR 0 16
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 30
25840: PUSH
25841: LD_INT 32
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 30
25850: PUSH
25851: LD_INT 33
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 91
25865: PUSH
25866: LD_VAR 0 1
25870: PUSH
25871: LD_INT 12
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: PUSH
25892: LD_INT 2
25894: GREATER
25895: AND
25896: IFFALSE 25919
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25898: LD_ADDR_VAR 0 18
25902: PUSH
25903: LD_INT 11
25905: PUSH
25906: LD_INT 30
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_VAR 0 12
25917: ARRAY
25918: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25919: LD_VAR 0 18
25923: NOT
25924: PUSH
25925: LD_INT 40
25927: PPUSH
25928: LD_VAR 0 16
25932: PPUSH
25933: CALL_OW 321
25937: PUSH
25938: LD_INT 2
25940: EQUAL
25941: AND
25942: PUSH
25943: LD_INT 7
25945: PUSH
25946: LD_VAR 0 5
25950: IN
25951: PUSH
25952: LD_INT 28
25954: PUSH
25955: LD_VAR 0 5
25959: IN
25960: OR
25961: PUSH
25962: LD_INT 45
25964: PUSH
25965: LD_VAR 0 5
25969: IN
25970: OR
25971: AND
25972: IFFALSE 26226
// begin hex := GetHexInfo ( x , y ) ;
25974: LD_ADDR_VAR 0 4
25978: PUSH
25979: LD_VAR 0 10
25983: PPUSH
25984: LD_VAR 0 11
25988: PPUSH
25989: CALL_OW 546
25993: ST_TO_ADDR
// if hex [ 1 ] then
25994: LD_VAR 0 4
25998: PUSH
25999: LD_INT 1
26001: ARRAY
26002: IFFALSE 26006
// exit ;
26004: GO 26409
// height := hex [ 2 ] ;
26006: LD_ADDR_VAR 0 15
26010: PUSH
26011: LD_VAR 0 4
26015: PUSH
26016: LD_INT 2
26018: ARRAY
26019: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26020: LD_ADDR_VAR 0 14
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: LD_INT 5
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: ST_TO_ADDR
// for i in tmp do
26043: LD_ADDR_VAR 0 8
26047: PUSH
26048: LD_VAR 0 14
26052: PUSH
26053: FOR_IN
26054: IFFALSE 26224
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26056: LD_ADDR_VAR 0 9
26060: PUSH
26061: LD_VAR 0 10
26065: PPUSH
26066: LD_VAR 0 8
26070: PPUSH
26071: LD_INT 5
26073: PPUSH
26074: CALL_OW 272
26078: PUSH
26079: LD_VAR 0 11
26083: PPUSH
26084: LD_VAR 0 8
26088: PPUSH
26089: LD_INT 5
26091: PPUSH
26092: CALL_OW 273
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26101: LD_VAR 0 9
26105: PUSH
26106: LD_INT 1
26108: ARRAY
26109: PPUSH
26110: LD_VAR 0 9
26114: PUSH
26115: LD_INT 2
26117: ARRAY
26118: PPUSH
26119: CALL_OW 488
26123: IFFALSE 26222
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26125: LD_ADDR_VAR 0 4
26129: PUSH
26130: LD_VAR 0 9
26134: PUSH
26135: LD_INT 1
26137: ARRAY
26138: PPUSH
26139: LD_VAR 0 9
26143: PUSH
26144: LD_INT 2
26146: ARRAY
26147: PPUSH
26148: CALL_OW 546
26152: ST_TO_ADDR
// if hex [ 1 ] then
26153: LD_VAR 0 4
26157: PUSH
26158: LD_INT 1
26160: ARRAY
26161: IFFALSE 26165
// continue ;
26163: GO 26053
// h := hex [ 2 ] ;
26165: LD_ADDR_VAR 0 13
26169: PUSH
26170: LD_VAR 0 4
26174: PUSH
26175: LD_INT 2
26177: ARRAY
26178: ST_TO_ADDR
// if h + 7 < height then
26179: LD_VAR 0 13
26183: PUSH
26184: LD_INT 7
26186: PLUS
26187: PUSH
26188: LD_VAR 0 15
26192: LESS
26193: IFFALSE 26222
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26195: LD_ADDR_VAR 0 18
26199: PUSH
26200: LD_INT 7
26202: PUSH
26203: LD_INT 28
26205: PUSH
26206: LD_INT 45
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: PUSH
26214: LD_VAR 0 12
26218: ARRAY
26219: ST_TO_ADDR
// break ;
26220: GO 26224
// end ; end ; end ;
26222: GO 26053
26224: POP
26225: POP
// end ; if not weapon then
26226: LD_VAR 0 18
26230: NOT
26231: IFFALSE 26291
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26233: LD_ADDR_VAR 0 5
26237: PUSH
26238: LD_VAR 0 5
26242: PUSH
26243: LD_INT 11
26245: PUSH
26246: LD_INT 30
26248: PUSH
26249: LD_INT 49
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: LIST
26256: DIFF
26257: ST_TO_ADDR
// if not list then
26258: LD_VAR 0 5
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26409
// weapon := list [ rand ( 1 , list ) ] ;
26267: LD_ADDR_VAR 0 18
26271: PUSH
26272: LD_VAR 0 5
26276: PUSH
26277: LD_INT 1
26279: PPUSH
26280: LD_VAR 0 5
26284: PPUSH
26285: CALL_OW 12
26289: ARRAY
26290: ST_TO_ADDR
// end ; if weapon then
26291: LD_VAR 0 18
26295: IFFALSE 26409
// begin tmp := CostOfWeapon ( weapon ) ;
26297: LD_ADDR_VAR 0 14
26301: PUSH
26302: LD_VAR 0 18
26306: PPUSH
26307: CALL_OW 451
26311: ST_TO_ADDR
// j := GetBase ( tower ) ;
26312: LD_ADDR_VAR 0 9
26316: PUSH
26317: LD_VAR 0 1
26321: PPUSH
26322: CALL_OW 274
26326: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26327: LD_VAR 0 9
26331: PPUSH
26332: LD_INT 1
26334: PPUSH
26335: CALL_OW 275
26339: PUSH
26340: LD_VAR 0 14
26344: PUSH
26345: LD_INT 1
26347: ARRAY
26348: GREATEREQUAL
26349: PUSH
26350: LD_VAR 0 9
26354: PPUSH
26355: LD_INT 2
26357: PPUSH
26358: CALL_OW 275
26362: PUSH
26363: LD_VAR 0 14
26367: PUSH
26368: LD_INT 2
26370: ARRAY
26371: GREATEREQUAL
26372: AND
26373: PUSH
26374: LD_VAR 0 9
26378: PPUSH
26379: LD_INT 3
26381: PPUSH
26382: CALL_OW 275
26386: PUSH
26387: LD_VAR 0 14
26391: PUSH
26392: LD_INT 3
26394: ARRAY
26395: GREATEREQUAL
26396: AND
26397: IFFALSE 26409
// result := weapon ;
26399: LD_ADDR_VAR 0 3
26403: PUSH
26404: LD_VAR 0 18
26408: ST_TO_ADDR
// end ; end ;
26409: LD_VAR 0 3
26413: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26414: LD_INT 0
26416: PPUSH
26417: PPUSH
// result := true ;
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_INT 1
26425: ST_TO_ADDR
// if array1 = array2 then
26426: LD_VAR 0 1
26430: PUSH
26431: LD_VAR 0 2
26435: EQUAL
26436: IFFALSE 26496
// begin for i = 1 to array1 do
26438: LD_ADDR_VAR 0 4
26442: PUSH
26443: DOUBLE
26444: LD_INT 1
26446: DEC
26447: ST_TO_ADDR
26448: LD_VAR 0 1
26452: PUSH
26453: FOR_TO
26454: IFFALSE 26492
// if array1 [ i ] <> array2 [ i ] then
26456: LD_VAR 0 1
26460: PUSH
26461: LD_VAR 0 4
26465: ARRAY
26466: PUSH
26467: LD_VAR 0 2
26471: PUSH
26472: LD_VAR 0 4
26476: ARRAY
26477: NONEQUAL
26478: IFFALSE 26490
// begin result := false ;
26480: LD_ADDR_VAR 0 3
26484: PUSH
26485: LD_INT 0
26487: ST_TO_ADDR
// break ;
26488: GO 26492
// end ;
26490: GO 26453
26492: POP
26493: POP
// end else
26494: GO 26504
// result := false ;
26496: LD_ADDR_VAR 0 3
26500: PUSH
26501: LD_INT 0
26503: ST_TO_ADDR
// end ;
26504: LD_VAR 0 3
26508: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26509: LD_INT 0
26511: PPUSH
26512: PPUSH
// if not array1 or not array2 then
26513: LD_VAR 0 1
26517: NOT
26518: PUSH
26519: LD_VAR 0 2
26523: NOT
26524: OR
26525: IFFALSE 26529
// exit ;
26527: GO 26593
// result := true ;
26529: LD_ADDR_VAR 0 3
26533: PUSH
26534: LD_INT 1
26536: ST_TO_ADDR
// for i = 1 to array1 do
26537: LD_ADDR_VAR 0 4
26541: PUSH
26542: DOUBLE
26543: LD_INT 1
26545: DEC
26546: ST_TO_ADDR
26547: LD_VAR 0 1
26551: PUSH
26552: FOR_TO
26553: IFFALSE 26591
// if array1 [ i ] <> array2 [ i ] then
26555: LD_VAR 0 1
26559: PUSH
26560: LD_VAR 0 4
26564: ARRAY
26565: PUSH
26566: LD_VAR 0 2
26570: PUSH
26571: LD_VAR 0 4
26575: ARRAY
26576: NONEQUAL
26577: IFFALSE 26589
// begin result := false ;
26579: LD_ADDR_VAR 0 3
26583: PUSH
26584: LD_INT 0
26586: ST_TO_ADDR
// break ;
26587: GO 26591
// end ;
26589: GO 26552
26591: POP
26592: POP
// end ;
26593: LD_VAR 0 3
26597: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26598: LD_INT 0
26600: PPUSH
26601: PPUSH
26602: PPUSH
// pom := GetBase ( fac ) ;
26603: LD_ADDR_VAR 0 5
26607: PUSH
26608: LD_VAR 0 1
26612: PPUSH
26613: CALL_OW 274
26617: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26618: LD_ADDR_VAR 0 4
26622: PUSH
26623: LD_VAR 0 2
26627: PUSH
26628: LD_INT 1
26630: ARRAY
26631: PPUSH
26632: LD_VAR 0 2
26636: PUSH
26637: LD_INT 2
26639: ARRAY
26640: PPUSH
26641: LD_VAR 0 2
26645: PUSH
26646: LD_INT 3
26648: ARRAY
26649: PPUSH
26650: LD_VAR 0 2
26654: PUSH
26655: LD_INT 4
26657: ARRAY
26658: PPUSH
26659: CALL_OW 449
26663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26664: LD_ADDR_VAR 0 3
26668: PUSH
26669: LD_VAR 0 5
26673: PPUSH
26674: LD_INT 1
26676: PPUSH
26677: CALL_OW 275
26681: PUSH
26682: LD_VAR 0 4
26686: PUSH
26687: LD_INT 1
26689: ARRAY
26690: GREATEREQUAL
26691: PUSH
26692: LD_VAR 0 5
26696: PPUSH
26697: LD_INT 2
26699: PPUSH
26700: CALL_OW 275
26704: PUSH
26705: LD_VAR 0 4
26709: PUSH
26710: LD_INT 2
26712: ARRAY
26713: GREATEREQUAL
26714: AND
26715: PUSH
26716: LD_VAR 0 5
26720: PPUSH
26721: LD_INT 3
26723: PPUSH
26724: CALL_OW 275
26728: PUSH
26729: LD_VAR 0 4
26733: PUSH
26734: LD_INT 3
26736: ARRAY
26737: GREATEREQUAL
26738: AND
26739: ST_TO_ADDR
// end ;
26740: LD_VAR 0 3
26744: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
// pom := GetBase ( building ) ;
26751: LD_ADDR_VAR 0 3
26755: PUSH
26756: LD_VAR 0 1
26760: PPUSH
26761: CALL_OW 274
26765: ST_TO_ADDR
// if not pom then
26766: LD_VAR 0 3
26770: NOT
26771: IFFALSE 26775
// exit ;
26773: GO 26945
// btype := GetBType ( building ) ;
26775: LD_ADDR_VAR 0 5
26779: PUSH
26780: LD_VAR 0 1
26784: PPUSH
26785: CALL_OW 266
26789: ST_TO_ADDR
// if btype = b_armoury then
26790: LD_VAR 0 5
26794: PUSH
26795: LD_INT 4
26797: EQUAL
26798: IFFALSE 26808
// btype := b_barracks ;
26800: LD_ADDR_VAR 0 5
26804: PUSH
26805: LD_INT 5
26807: ST_TO_ADDR
// if btype = b_depot then
26808: LD_VAR 0 5
26812: PUSH
26813: LD_INT 0
26815: EQUAL
26816: IFFALSE 26826
// btype := b_warehouse ;
26818: LD_ADDR_VAR 0 5
26822: PUSH
26823: LD_INT 1
26825: ST_TO_ADDR
// if btype = b_workshop then
26826: LD_VAR 0 5
26830: PUSH
26831: LD_INT 2
26833: EQUAL
26834: IFFALSE 26844
// btype := b_factory ;
26836: LD_ADDR_VAR 0 5
26840: PUSH
26841: LD_INT 3
26843: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: LD_VAR 0 5
26853: PPUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 248
26863: PPUSH
26864: CALL_OW 450
26868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26869: LD_ADDR_VAR 0 2
26873: PUSH
26874: LD_VAR 0 3
26878: PPUSH
26879: LD_INT 1
26881: PPUSH
26882: CALL_OW 275
26886: PUSH
26887: LD_VAR 0 4
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: GREATEREQUAL
26896: PUSH
26897: LD_VAR 0 3
26901: PPUSH
26902: LD_INT 2
26904: PPUSH
26905: CALL_OW 275
26909: PUSH
26910: LD_VAR 0 4
26914: PUSH
26915: LD_INT 2
26917: ARRAY
26918: GREATEREQUAL
26919: AND
26920: PUSH
26921: LD_VAR 0 3
26925: PPUSH
26926: LD_INT 3
26928: PPUSH
26929: CALL_OW 275
26933: PUSH
26934: LD_VAR 0 4
26938: PUSH
26939: LD_INT 3
26941: ARRAY
26942: GREATEREQUAL
26943: AND
26944: ST_TO_ADDR
// end ;
26945: LD_VAR 0 2
26949: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26950: LD_INT 0
26952: PPUSH
26953: PPUSH
26954: PPUSH
// pom := GetBase ( building ) ;
26955: LD_ADDR_VAR 0 4
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 274
26969: ST_TO_ADDR
// if not pom then
26970: LD_VAR 0 4
26974: NOT
26975: IFFALSE 26979
// exit ;
26977: GO 27080
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26979: LD_ADDR_VAR 0 5
26983: PUSH
26984: LD_VAR 0 2
26988: PPUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 248
26998: PPUSH
26999: CALL_OW 450
27003: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_VAR 0 4
27013: PPUSH
27014: LD_INT 1
27016: PPUSH
27017: CALL_OW 275
27021: PUSH
27022: LD_VAR 0 5
27026: PUSH
27027: LD_INT 1
27029: ARRAY
27030: GREATEREQUAL
27031: PUSH
27032: LD_VAR 0 4
27036: PPUSH
27037: LD_INT 2
27039: PPUSH
27040: CALL_OW 275
27044: PUSH
27045: LD_VAR 0 5
27049: PUSH
27050: LD_INT 2
27052: ARRAY
27053: GREATEREQUAL
27054: AND
27055: PUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: LD_INT 3
27063: PPUSH
27064: CALL_OW 275
27068: PUSH
27069: LD_VAR 0 5
27073: PUSH
27074: LD_INT 3
27076: ARRAY
27077: GREATEREQUAL
27078: AND
27079: ST_TO_ADDR
// end ;
27080: LD_VAR 0 3
27084: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27085: LD_INT 0
27087: PPUSH
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
27092: PPUSH
27093: PPUSH
27094: PPUSH
27095: PPUSH
27096: PPUSH
27097: PPUSH
// result := false ;
27098: LD_ADDR_VAR 0 8
27102: PUSH
27103: LD_INT 0
27105: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27106: LD_VAR 0 5
27110: NOT
27111: PUSH
27112: LD_VAR 0 1
27116: NOT
27117: OR
27118: PUSH
27119: LD_VAR 0 2
27123: NOT
27124: OR
27125: PUSH
27126: LD_VAR 0 3
27130: NOT
27131: OR
27132: IFFALSE 27136
// exit ;
27134: GO 27950
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27136: LD_ADDR_VAR 0 14
27140: PUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_VAR 0 2
27150: PPUSH
27151: LD_VAR 0 3
27155: PPUSH
27156: LD_VAR 0 4
27160: PPUSH
27161: LD_VAR 0 5
27165: PUSH
27166: LD_INT 1
27168: ARRAY
27169: PPUSH
27170: CALL_OW 248
27174: PPUSH
27175: LD_INT 0
27177: PPUSH
27178: CALL 29203 0 6
27182: ST_TO_ADDR
// if not hexes then
27183: LD_VAR 0 14
27187: NOT
27188: IFFALSE 27192
// exit ;
27190: GO 27950
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27192: LD_ADDR_VAR 0 17
27196: PUSH
27197: LD_VAR 0 5
27201: PPUSH
27202: LD_INT 22
27204: PUSH
27205: LD_VAR 0 13
27209: PPUSH
27210: CALL_OW 255
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: LD_INT 30
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 30
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 72
27255: ST_TO_ADDR
// for i = 1 to hexes do
27256: LD_ADDR_VAR 0 9
27260: PUSH
27261: DOUBLE
27262: LD_INT 1
27264: DEC
27265: ST_TO_ADDR
27266: LD_VAR 0 14
27270: PUSH
27271: FOR_TO
27272: IFFALSE 27948
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27274: LD_ADDR_VAR 0 13
27278: PUSH
27279: LD_VAR 0 14
27283: PUSH
27284: LD_VAR 0 9
27288: ARRAY
27289: PUSH
27290: LD_INT 1
27292: ARRAY
27293: PPUSH
27294: LD_VAR 0 14
27298: PUSH
27299: LD_VAR 0 9
27303: ARRAY
27304: PUSH
27305: LD_INT 2
27307: ARRAY
27308: PPUSH
27309: CALL_OW 428
27313: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27314: LD_VAR 0 14
27318: PUSH
27319: LD_VAR 0 9
27323: ARRAY
27324: PUSH
27325: LD_INT 1
27327: ARRAY
27328: PPUSH
27329: LD_VAR 0 14
27333: PUSH
27334: LD_VAR 0 9
27338: ARRAY
27339: PUSH
27340: LD_INT 2
27342: ARRAY
27343: PPUSH
27344: CALL_OW 351
27348: PUSH
27349: LD_VAR 0 14
27353: PUSH
27354: LD_VAR 0 9
27358: ARRAY
27359: PUSH
27360: LD_INT 1
27362: ARRAY
27363: PPUSH
27364: LD_VAR 0 14
27368: PUSH
27369: LD_VAR 0 9
27373: ARRAY
27374: PUSH
27375: LD_INT 2
27377: ARRAY
27378: PPUSH
27379: CALL_OW 488
27383: NOT
27384: OR
27385: PUSH
27386: LD_VAR 0 13
27390: PPUSH
27391: CALL_OW 247
27395: PUSH
27396: LD_INT 3
27398: EQUAL
27399: OR
27400: IFFALSE 27406
// exit ;
27402: POP
27403: POP
27404: GO 27950
// if not tmp then
27406: LD_VAR 0 13
27410: NOT
27411: IFFALSE 27415
// continue ;
27413: GO 27271
// result := true ;
27415: LD_ADDR_VAR 0 8
27419: PUSH
27420: LD_INT 1
27422: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27423: LD_VAR 0 6
27427: PUSH
27428: LD_VAR 0 13
27432: PPUSH
27433: CALL_OW 247
27437: PUSH
27438: LD_INT 2
27440: EQUAL
27441: AND
27442: PUSH
27443: LD_VAR 0 13
27447: PPUSH
27448: CALL_OW 263
27452: PUSH
27453: LD_INT 1
27455: EQUAL
27456: AND
27457: IFFALSE 27621
// begin if IsDrivenBy ( tmp ) then
27459: LD_VAR 0 13
27463: PPUSH
27464: CALL_OW 311
27468: IFFALSE 27472
// continue ;
27470: GO 27271
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27472: LD_VAR 0 6
27476: PPUSH
27477: LD_INT 3
27479: PUSH
27480: LD_INT 60
27482: PUSH
27483: EMPTY
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 3
27492: PUSH
27493: LD_INT 55
27495: PUSH
27496: EMPTY
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PPUSH
27507: CALL_OW 72
27511: IFFALSE 27619
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27513: LD_ADDR_VAR 0 18
27517: PUSH
27518: LD_VAR 0 6
27522: PPUSH
27523: LD_INT 3
27525: PUSH
27526: LD_INT 60
27528: PUSH
27529: EMPTY
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 3
27538: PUSH
27539: LD_INT 55
27541: PUSH
27542: EMPTY
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PPUSH
27553: CALL_OW 72
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: ST_TO_ADDR
// if IsInUnit ( driver ) then
27562: LD_VAR 0 18
27566: PPUSH
27567: CALL_OW 310
27571: IFFALSE 27582
// ComExit ( driver ) ;
27573: LD_VAR 0 18
27577: PPUSH
27578: CALL 52984 0 1
// AddComEnterUnit ( driver , tmp ) ;
27582: LD_VAR 0 18
27586: PPUSH
27587: LD_VAR 0 13
27591: PPUSH
27592: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27596: LD_VAR 0 18
27600: PPUSH
27601: LD_VAR 0 7
27605: PPUSH
27606: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27610: LD_VAR 0 18
27614: PPUSH
27615: CALL_OW 181
// end ; continue ;
27619: GO 27271
// end ; if not cleaners or not tmp in cleaners then
27621: LD_VAR 0 6
27625: NOT
27626: PUSH
27627: LD_VAR 0 13
27631: PUSH
27632: LD_VAR 0 6
27636: IN
27637: NOT
27638: OR
27639: IFFALSE 27946
// begin if dep then
27641: LD_VAR 0 17
27645: IFFALSE 27781
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27647: LD_ADDR_VAR 0 16
27651: PUSH
27652: LD_VAR 0 17
27656: PUSH
27657: LD_INT 1
27659: ARRAY
27660: PPUSH
27661: CALL_OW 250
27665: PPUSH
27666: LD_VAR 0 17
27670: PUSH
27671: LD_INT 1
27673: ARRAY
27674: PPUSH
27675: CALL_OW 254
27679: PPUSH
27680: LD_INT 5
27682: PPUSH
27683: CALL_OW 272
27687: PUSH
27688: LD_VAR 0 17
27692: PUSH
27693: LD_INT 1
27695: ARRAY
27696: PPUSH
27697: CALL_OW 251
27701: PPUSH
27702: LD_VAR 0 17
27706: PUSH
27707: LD_INT 1
27709: ARRAY
27710: PPUSH
27711: CALL_OW 254
27715: PPUSH
27716: LD_INT 5
27718: PPUSH
27719: CALL_OW 273
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27728: LD_VAR 0 16
27732: PUSH
27733: LD_INT 1
27735: ARRAY
27736: PPUSH
27737: LD_VAR 0 16
27741: PUSH
27742: LD_INT 2
27744: ARRAY
27745: PPUSH
27746: CALL_OW 488
27750: IFFALSE 27781
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27752: LD_VAR 0 13
27756: PPUSH
27757: LD_VAR 0 16
27761: PUSH
27762: LD_INT 1
27764: ARRAY
27765: PPUSH
27766: LD_VAR 0 16
27770: PUSH
27771: LD_INT 2
27773: ARRAY
27774: PPUSH
27775: CALL_OW 111
// continue ;
27779: GO 27271
// end ; end ; r := GetDir ( tmp ) ;
27781: LD_ADDR_VAR 0 15
27785: PUSH
27786: LD_VAR 0 13
27790: PPUSH
27791: CALL_OW 254
27795: ST_TO_ADDR
// if r = 5 then
27796: LD_VAR 0 15
27800: PUSH
27801: LD_INT 5
27803: EQUAL
27804: IFFALSE 27814
// r := 0 ;
27806: LD_ADDR_VAR 0 15
27810: PUSH
27811: LD_INT 0
27813: ST_TO_ADDR
// for j = r to 5 do
27814: LD_ADDR_VAR 0 10
27818: PUSH
27819: DOUBLE
27820: LD_VAR 0 15
27824: DEC
27825: ST_TO_ADDR
27826: LD_INT 5
27828: PUSH
27829: FOR_TO
27830: IFFALSE 27944
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27832: LD_ADDR_VAR 0 11
27836: PUSH
27837: LD_VAR 0 13
27841: PPUSH
27842: CALL_OW 250
27846: PPUSH
27847: LD_VAR 0 10
27851: PPUSH
27852: LD_INT 2
27854: PPUSH
27855: CALL_OW 272
27859: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27860: LD_ADDR_VAR 0 12
27864: PUSH
27865: LD_VAR 0 13
27869: PPUSH
27870: CALL_OW 251
27874: PPUSH
27875: LD_VAR 0 10
27879: PPUSH
27880: LD_INT 2
27882: PPUSH
27883: CALL_OW 273
27887: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
27888: LD_VAR 0 11
27892: PPUSH
27893: LD_VAR 0 12
27897: PPUSH
27898: CALL_OW 488
27902: PUSH
27903: LD_VAR 0 11
27907: PPUSH
27908: LD_VAR 0 12
27912: PPUSH
27913: CALL_OW 428
27917: NOT
27918: AND
27919: IFFALSE 27942
// begin ComMoveXY ( tmp , _x , _y ) ;
27921: LD_VAR 0 13
27925: PPUSH
27926: LD_VAR 0 11
27930: PPUSH
27931: LD_VAR 0 12
27935: PPUSH
27936: CALL_OW 111
// break ;
27940: GO 27944
// end ; end ;
27942: GO 27829
27944: POP
27945: POP
// end ; end ;
27946: GO 27271
27948: POP
27949: POP
// end ;
27950: LD_VAR 0 8
27954: RET
// export function BuildingTechInvented ( side , btype ) ; begin
27955: LD_INT 0
27957: PPUSH
// result := true ;
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 1
27965: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
27966: LD_VAR 0 2
27970: PUSH
27971: LD_INT 24
27973: DOUBLE
27974: EQUAL
27975: IFTRUE 27985
27977: LD_INT 33
27979: DOUBLE
27980: EQUAL
27981: IFTRUE 27985
27983: GO 28010
27985: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
27986: LD_ADDR_VAR 0 3
27990: PUSH
27991: LD_INT 32
27993: PPUSH
27994: LD_VAR 0 1
27998: PPUSH
27999: CALL_OW 321
28003: PUSH
28004: LD_INT 2
28006: EQUAL
28007: ST_TO_ADDR
28008: GO 28326
28010: LD_INT 20
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28043
28018: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 6
28026: PPUSH
28027: LD_VAR 0 1
28031: PPUSH
28032: CALL_OW 321
28036: PUSH
28037: LD_INT 2
28039: EQUAL
28040: ST_TO_ADDR
28041: GO 28326
28043: LD_INT 22
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28057
28049: LD_INT 36
28051: DOUBLE
28052: EQUAL
28053: IFTRUE 28057
28055: GO 28082
28057: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28058: LD_ADDR_VAR 0 3
28062: PUSH
28063: LD_INT 15
28065: PPUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 321
28075: PUSH
28076: LD_INT 2
28078: EQUAL
28079: ST_TO_ADDR
28080: GO 28326
28082: LD_INT 30
28084: DOUBLE
28085: EQUAL
28086: IFTRUE 28090
28088: GO 28115
28090: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 20
28098: PPUSH
28099: LD_VAR 0 1
28103: PPUSH
28104: CALL_OW 321
28108: PUSH
28109: LD_INT 2
28111: EQUAL
28112: ST_TO_ADDR
28113: GO 28326
28115: LD_INT 28
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28129
28121: LD_INT 21
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28129
28127: GO 28154
28129: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: LD_INT 21
28137: PPUSH
28138: LD_VAR 0 1
28142: PPUSH
28143: CALL_OW 321
28147: PUSH
28148: LD_INT 2
28150: EQUAL
28151: ST_TO_ADDR
28152: GO 28326
28154: LD_INT 16
28156: DOUBLE
28157: EQUAL
28158: IFTRUE 28162
28160: GO 28187
28162: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28163: LD_ADDR_VAR 0 3
28167: PUSH
28168: LD_INT 84
28170: PPUSH
28171: LD_VAR 0 1
28175: PPUSH
28176: CALL_OW 321
28180: PUSH
28181: LD_INT 2
28183: EQUAL
28184: ST_TO_ADDR
28185: GO 28326
28187: LD_INT 19
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28201
28193: LD_INT 23
28195: DOUBLE
28196: EQUAL
28197: IFTRUE 28201
28199: GO 28226
28201: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28202: LD_ADDR_VAR 0 3
28206: PUSH
28207: LD_INT 83
28209: PPUSH
28210: LD_VAR 0 1
28214: PPUSH
28215: CALL_OW 321
28219: PUSH
28220: LD_INT 2
28222: EQUAL
28223: ST_TO_ADDR
28224: GO 28326
28226: LD_INT 17
28228: DOUBLE
28229: EQUAL
28230: IFTRUE 28234
28232: GO 28259
28234: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28235: LD_ADDR_VAR 0 3
28239: PUSH
28240: LD_INT 39
28242: PPUSH
28243: LD_VAR 0 1
28247: PPUSH
28248: CALL_OW 321
28252: PUSH
28253: LD_INT 2
28255: EQUAL
28256: ST_TO_ADDR
28257: GO 28326
28259: LD_INT 18
28261: DOUBLE
28262: EQUAL
28263: IFTRUE 28267
28265: GO 28292
28267: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28268: LD_ADDR_VAR 0 3
28272: PUSH
28273: LD_INT 40
28275: PPUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 321
28285: PUSH
28286: LD_INT 2
28288: EQUAL
28289: ST_TO_ADDR
28290: GO 28326
28292: LD_INT 27
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28325
28300: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_INT 35
28308: PPUSH
28309: LD_VAR 0 1
28313: PPUSH
28314: CALL_OW 321
28318: PUSH
28319: LD_INT 2
28321: EQUAL
28322: ST_TO_ADDR
28323: GO 28326
28325: POP
// end ;
28326: LD_VAR 0 3
28330: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28331: LD_INT 0
28333: PPUSH
28334: PPUSH
28335: PPUSH
28336: PPUSH
28337: PPUSH
28338: PPUSH
28339: PPUSH
28340: PPUSH
28341: PPUSH
28342: PPUSH
28343: PPUSH
// result := false ;
28344: LD_ADDR_VAR 0 6
28348: PUSH
28349: LD_INT 0
28351: ST_TO_ADDR
// if btype = b_depot then
28352: LD_VAR 0 2
28356: PUSH
28357: LD_INT 0
28359: EQUAL
28360: IFFALSE 28372
// begin result := true ;
28362: LD_ADDR_VAR 0 6
28366: PUSH
28367: LD_INT 1
28369: ST_TO_ADDR
// exit ;
28370: GO 29198
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28372: LD_VAR 0 1
28376: NOT
28377: PUSH
28378: LD_VAR 0 1
28382: PPUSH
28383: CALL_OW 266
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: IN
28398: NOT
28399: OR
28400: PUSH
28401: LD_VAR 0 2
28405: NOT
28406: OR
28407: PUSH
28408: LD_VAR 0 5
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: LD_INT 3
28424: PUSH
28425: LD_INT 4
28427: PUSH
28428: LD_INT 5
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: IN
28439: NOT
28440: OR
28441: PUSH
28442: LD_VAR 0 3
28446: PPUSH
28447: LD_VAR 0 4
28451: PPUSH
28452: CALL_OW 488
28456: NOT
28457: OR
28458: IFFALSE 28462
// exit ;
28460: GO 29198
// side := GetSide ( depot ) ;
28462: LD_ADDR_VAR 0 9
28466: PUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 255
28476: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28477: LD_VAR 0 9
28481: PPUSH
28482: LD_VAR 0 2
28486: PPUSH
28487: CALL 27955 0 2
28491: NOT
28492: IFFALSE 28496
// exit ;
28494: GO 29198
// pom := GetBase ( depot ) ;
28496: LD_ADDR_VAR 0 10
28500: PUSH
28501: LD_VAR 0 1
28505: PPUSH
28506: CALL_OW 274
28510: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28511: LD_ADDR_VAR 0 11
28515: PUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: LD_VAR 0 1
28525: PPUSH
28526: CALL_OW 248
28530: PPUSH
28531: CALL_OW 450
28535: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28536: LD_VAR 0 10
28540: PPUSH
28541: LD_INT 1
28543: PPUSH
28544: CALL_OW 275
28548: PUSH
28549: LD_VAR 0 11
28553: PUSH
28554: LD_INT 1
28556: ARRAY
28557: GREATEREQUAL
28558: PUSH
28559: LD_VAR 0 10
28563: PPUSH
28564: LD_INT 2
28566: PPUSH
28567: CALL_OW 275
28571: PUSH
28572: LD_VAR 0 11
28576: PUSH
28577: LD_INT 2
28579: ARRAY
28580: GREATEREQUAL
28581: AND
28582: PUSH
28583: LD_VAR 0 10
28587: PPUSH
28588: LD_INT 3
28590: PPUSH
28591: CALL_OW 275
28595: PUSH
28596: LD_VAR 0 11
28600: PUSH
28601: LD_INT 3
28603: ARRAY
28604: GREATEREQUAL
28605: AND
28606: NOT
28607: IFFALSE 28611
// exit ;
28609: GO 29198
// if GetBType ( depot ) = b_depot then
28611: LD_VAR 0 1
28615: PPUSH
28616: CALL_OW 266
28620: PUSH
28621: LD_INT 0
28623: EQUAL
28624: IFFALSE 28636
// dist := 28 else
28626: LD_ADDR_VAR 0 14
28630: PUSH
28631: LD_INT 28
28633: ST_TO_ADDR
28634: GO 28644
// dist := 36 ;
28636: LD_ADDR_VAR 0 14
28640: PUSH
28641: LD_INT 36
28643: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28644: LD_VAR 0 1
28648: PPUSH
28649: LD_VAR 0 3
28653: PPUSH
28654: LD_VAR 0 4
28658: PPUSH
28659: CALL_OW 297
28663: PUSH
28664: LD_VAR 0 14
28668: GREATER
28669: IFFALSE 28673
// exit ;
28671: GO 29198
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28673: LD_ADDR_VAR 0 12
28677: PUSH
28678: LD_VAR 0 2
28682: PPUSH
28683: LD_VAR 0 3
28687: PPUSH
28688: LD_VAR 0 4
28692: PPUSH
28693: LD_VAR 0 5
28697: PPUSH
28698: LD_VAR 0 1
28702: PPUSH
28703: CALL_OW 248
28707: PPUSH
28708: LD_INT 0
28710: PPUSH
28711: CALL 29203 0 6
28715: ST_TO_ADDR
// if not hexes then
28716: LD_VAR 0 12
28720: NOT
28721: IFFALSE 28725
// exit ;
28723: GO 29198
// hex := GetHexInfo ( x , y ) ;
28725: LD_ADDR_VAR 0 15
28729: PUSH
28730: LD_VAR 0 3
28734: PPUSH
28735: LD_VAR 0 4
28739: PPUSH
28740: CALL_OW 546
28744: ST_TO_ADDR
// if hex [ 1 ] then
28745: LD_VAR 0 15
28749: PUSH
28750: LD_INT 1
28752: ARRAY
28753: IFFALSE 28757
// exit ;
28755: GO 29198
// height := hex [ 2 ] ;
28757: LD_ADDR_VAR 0 13
28761: PUSH
28762: LD_VAR 0 15
28766: PUSH
28767: LD_INT 2
28769: ARRAY
28770: ST_TO_ADDR
// for i = 1 to hexes do
28771: LD_ADDR_VAR 0 7
28775: PUSH
28776: DOUBLE
28777: LD_INT 1
28779: DEC
28780: ST_TO_ADDR
28781: LD_VAR 0 12
28785: PUSH
28786: FOR_TO
28787: IFFALSE 29117
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28789: LD_VAR 0 12
28793: PUSH
28794: LD_VAR 0 7
28798: ARRAY
28799: PUSH
28800: LD_INT 1
28802: ARRAY
28803: PPUSH
28804: LD_VAR 0 12
28808: PUSH
28809: LD_VAR 0 7
28813: ARRAY
28814: PUSH
28815: LD_INT 2
28817: ARRAY
28818: PPUSH
28819: CALL_OW 488
28823: NOT
28824: PUSH
28825: LD_VAR 0 12
28829: PUSH
28830: LD_VAR 0 7
28834: ARRAY
28835: PUSH
28836: LD_INT 1
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 12
28844: PUSH
28845: LD_VAR 0 7
28849: ARRAY
28850: PUSH
28851: LD_INT 2
28853: ARRAY
28854: PPUSH
28855: CALL_OW 428
28859: PUSH
28860: LD_INT 0
28862: GREATER
28863: OR
28864: PUSH
28865: LD_VAR 0 12
28869: PUSH
28870: LD_VAR 0 7
28874: ARRAY
28875: PUSH
28876: LD_INT 1
28878: ARRAY
28879: PPUSH
28880: LD_VAR 0 12
28884: PUSH
28885: LD_VAR 0 7
28889: ARRAY
28890: PUSH
28891: LD_INT 2
28893: ARRAY
28894: PPUSH
28895: CALL_OW 351
28899: OR
28900: IFFALSE 28906
// exit ;
28902: POP
28903: POP
28904: GO 29198
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28906: LD_ADDR_VAR 0 8
28910: PUSH
28911: LD_VAR 0 12
28915: PUSH
28916: LD_VAR 0 7
28920: ARRAY
28921: PUSH
28922: LD_INT 1
28924: ARRAY
28925: PPUSH
28926: LD_VAR 0 12
28930: PUSH
28931: LD_VAR 0 7
28935: ARRAY
28936: PUSH
28937: LD_INT 2
28939: ARRAY
28940: PPUSH
28941: CALL_OW 546
28945: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
28946: LD_VAR 0 8
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: PUSH
28955: LD_VAR 0 8
28959: PUSH
28960: LD_INT 2
28962: ARRAY
28963: PUSH
28964: LD_VAR 0 13
28968: PUSH
28969: LD_INT 2
28971: PLUS
28972: GREATER
28973: OR
28974: PUSH
28975: LD_VAR 0 8
28979: PUSH
28980: LD_INT 2
28982: ARRAY
28983: PUSH
28984: LD_VAR 0 13
28988: PUSH
28989: LD_INT 2
28991: MINUS
28992: LESS
28993: OR
28994: PUSH
28995: LD_VAR 0 8
28999: PUSH
29000: LD_INT 3
29002: ARRAY
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: LD_INT 8
29009: PUSH
29010: LD_INT 9
29012: PUSH
29013: LD_INT 10
29015: PUSH
29016: LD_INT 11
29018: PUSH
29019: LD_INT 12
29021: PUSH
29022: LD_INT 13
29024: PUSH
29025: LD_INT 16
29027: PUSH
29028: LD_INT 17
29030: PUSH
29031: LD_INT 18
29033: PUSH
29034: LD_INT 19
29036: PUSH
29037: LD_INT 20
29039: PUSH
29040: LD_INT 21
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: IN
29058: NOT
29059: OR
29060: PUSH
29061: LD_VAR 0 8
29065: PUSH
29066: LD_INT 5
29068: ARRAY
29069: NOT
29070: OR
29071: PUSH
29072: LD_VAR 0 8
29076: PUSH
29077: LD_INT 6
29079: ARRAY
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: LD_INT 7
29089: PUSH
29090: LD_INT 9
29092: PUSH
29093: LD_INT 10
29095: PUSH
29096: LD_INT 11
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: IN
29107: NOT
29108: OR
29109: IFFALSE 29115
// exit ;
29111: POP
29112: POP
29113: GO 29198
// end ;
29115: GO 28786
29117: POP
29118: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29119: LD_VAR 0 9
29123: PPUSH
29124: LD_VAR 0 3
29128: PPUSH
29129: LD_VAR 0 4
29133: PPUSH
29134: LD_INT 20
29136: PPUSH
29137: CALL 21121 0 4
29141: PUSH
29142: LD_INT 4
29144: ARRAY
29145: IFFALSE 29149
// exit ;
29147: GO 29198
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29149: LD_VAR 0 2
29153: PUSH
29154: LD_INT 29
29156: PUSH
29157: LD_INT 30
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: IN
29164: PUSH
29165: LD_VAR 0 3
29169: PPUSH
29170: LD_VAR 0 4
29174: PPUSH
29175: LD_VAR 0 9
29179: PPUSH
29180: CALL_OW 440
29184: NOT
29185: AND
29186: IFFALSE 29190
// exit ;
29188: GO 29198
// result := true ;
29190: LD_ADDR_VAR 0 6
29194: PUSH
29195: LD_INT 1
29197: ST_TO_ADDR
// end ;
29198: LD_VAR 0 6
29202: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
29207: PPUSH
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
29224: PPUSH
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
29241: PPUSH
29242: PPUSH
29243: PPUSH
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
29248: PPUSH
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
29258: PPUSH
29259: PPUSH
29260: PPUSH
29261: PPUSH
29262: PPUSH
// result = [ ] ;
29263: LD_ADDR_VAR 0 7
29267: PUSH
29268: EMPTY
29269: ST_TO_ADDR
// temp_list = [ ] ;
29270: LD_ADDR_VAR 0 9
29274: PUSH
29275: EMPTY
29276: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29277: LD_VAR 0 4
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: LD_INT 2
29290: PUSH
29291: LD_INT 3
29293: PUSH
29294: LD_INT 4
29296: PUSH
29297: LD_INT 5
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: IN
29308: NOT
29309: PUSH
29310: LD_VAR 0 1
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: IN
29325: PUSH
29326: LD_VAR 0 5
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: IN
29345: NOT
29346: AND
29347: OR
29348: IFFALSE 29352
// exit ;
29350: GO 47743
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29352: LD_VAR 0 1
29356: PUSH
29357: LD_INT 6
29359: PUSH
29360: LD_INT 7
29362: PUSH
29363: LD_INT 8
29365: PUSH
29366: LD_INT 13
29368: PUSH
29369: LD_INT 12
29371: PUSH
29372: LD_INT 15
29374: PUSH
29375: LD_INT 11
29377: PUSH
29378: LD_INT 14
29380: PUSH
29381: LD_INT 10
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: IN
29395: IFFALSE 29405
// btype = b_lab ;
29397: LD_ADDR_VAR 0 1
29401: PUSH
29402: LD_INT 6
29404: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29405: LD_VAR 0 6
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: IN
29424: NOT
29425: PUSH
29426: LD_VAR 0 1
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 3
29442: PUSH
29443: LD_INT 6
29445: PUSH
29446: LD_INT 36
29448: PUSH
29449: LD_INT 4
29451: PUSH
29452: LD_INT 5
29454: PUSH
29455: LD_INT 31
29457: PUSH
29458: LD_INT 32
29460: PUSH
29461: LD_INT 33
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: IN
29477: NOT
29478: PUSH
29479: LD_VAR 0 6
29483: PUSH
29484: LD_INT 1
29486: EQUAL
29487: AND
29488: OR
29489: PUSH
29490: LD_VAR 0 1
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: IN
29505: NOT
29506: PUSH
29507: LD_VAR 0 6
29511: PUSH
29512: LD_INT 2
29514: EQUAL
29515: AND
29516: OR
29517: IFFALSE 29527
// mode = 0 ;
29519: LD_ADDR_VAR 0 6
29523: PUSH
29524: LD_INT 0
29526: ST_TO_ADDR
// case mode of 0 :
29527: LD_VAR 0 6
29531: PUSH
29532: LD_INT 0
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 40993
29540: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29541: LD_ADDR_VAR 0 11
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 2
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 2
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 3
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29734: LD_ADDR_VAR 0 12
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 1
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: NEG
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 0
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 1
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 2
29880: NEG
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: NEG
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29930: LD_ADDR_VAR 0 13
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 1
29950: NEG
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 2
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: LD_INT 3
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 3
30089: NEG
30090: PUSH
30091: LD_INT 2
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 3
30101: NEG
30102: PUSH
30103: LD_INT 3
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30129: LD_ADDR_VAR 0 14
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 3
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: LD_INT 3
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30325: LD_ADDR_VAR 0 15
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 2
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: PUSH
30428: LD_INT 1
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 3
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30518: LD_ADDR_VAR 0 16
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 2
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 2
30653: NEG
30654: PUSH
30655: LD_INT 2
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 3
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 2
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30711: LD_ADDR_VAR 0 17
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: LD_INT 2
30807: NEG
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 2
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: LD_INT 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: LD_INT 2
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: NEG
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: NEG
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 2
30898: NEG
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30941: LD_ADDR_VAR 0 18
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 2
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31171: LD_ADDR_VAR 0 19
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 1
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: LD_INT 2
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: LD_INT 2
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 2
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 2
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31401: LD_ADDR_VAR 0 20
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: NEG
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 2
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: LD_INT 2
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: LD_INT 2
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: NEG
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 2
31600: NEG
31601: PUSH
31602: LD_INT 2
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31631: LD_ADDR_VAR 0 21
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 2
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 2
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: NEG
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31861: LD_ADDR_VAR 0 22
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 2
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 2
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 2
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 2
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32091: LD_ADDR_VAR 0 23
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 1
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 0
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: LD_INT 0
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: LD_INT 2
32294: NEG
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 3
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32371: LD_ADDR_VAR 0 24
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 1
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: LD_INT 2
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 2
32486: PUSH
32487: LD_INT 0
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: LD_INT 2
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32647: LD_ADDR_VAR 0 25
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 2
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: LD_INT 3
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32921: LD_ADDR_VAR 0 26
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 0
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: LD_INT 2
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33197: LD_ADDR_VAR 0 27
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 1
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: NEG
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 2
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 2
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: NEG
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 2
33396: NEG
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 2
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: NEG
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 3
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33477: LD_ADDR_VAR 0 28
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 2
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 2
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 2
33653: NEG
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 3
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 3
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 3
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 3
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33759: LD_ADDR_VAR 0 29
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 2
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: LD_INT 1
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: NEG
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 2
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: NEG
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34038: LD_ADDR_VAR 0 30
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: NEG
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: NEG
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 3
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 3
34281: NEG
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34316: LD_ADDR_VAR 0 31
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 0
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: LD_INT 2
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: NEG
34506: PUSH
34507: LD_INT 3
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 3
34559: NEG
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34594: LD_ADDR_VAR 0 32
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 2
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: LD_INT 3
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: NEG
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34872: LD_ADDR_VAR 0 33
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 1
34953: NEG
34954: PUSH
34955: LD_INT 2
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: LD_INT 3
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 1
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: NEG
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35151: LD_ADDR_VAR 0 34
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 3
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 3
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 3
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 3
35396: NEG
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35431: LD_ADDR_VAR 0 35
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 1
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 0
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35543: LD_ADDR_VAR 0 36
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35655: LD_ADDR_VAR 0 37
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35767: LD_ADDR_VAR 0 38
35771: PUSH
35772: LD_INT 0
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 0
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35879: LD_ADDR_VAR 0 39
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 2
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35991: LD_ADDR_VAR 0 40
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36103: LD_ADDR_VAR 0 41
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: NEG
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: LD_INT 3
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: LD_INT 3
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: LD_INT 3
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 3
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 3
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 3
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 3
36412: NEG
36413: PUSH
36414: LD_INT 3
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36453: LD_ADDR_VAR 0 42
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 0
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: LD_INT 1
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: LD_INT 3
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 3
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 3
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 3
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: LD_INT 3
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: LD_INT 3
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 2
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 3
36750: NEG
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: LD_INT 3
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36803: LD_ADDR_VAR 0 43
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 3
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 3
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 3
37099: NEG
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37151: LD_ADDR_VAR 0 44
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 1
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: LD_INT 2
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: NEG
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: NEG
37342: PUSH
37343: LD_INT 3
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 3
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 3
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 3
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 3
37394: PUSH
37395: LD_INT 3
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 3
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 3
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 3
37460: NEG
37461: PUSH
37462: LD_INT 3
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37501: LD_ADDR_VAR 0 45
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: LD_INT 1
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 3
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 3
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: LD_INT 3
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 3
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 3
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 3
37798: NEG
37799: PUSH
37800: LD_INT 2
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37851: LD_ADDR_VAR 0 46
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 0
38052: PUSH
38053: LD_INT 3
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 3
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 3
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 3
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 3
38147: NEG
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38199: LD_ADDR_VAR 0 47
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38350: LD_ADDR_VAR 0 48
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 2
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: LD_INT 1
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38497: LD_ADDR_VAR 0 49
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38641: LD_ADDR_VAR 0 50
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: LD_INT 0
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: LD_INT 1
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 1
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38785: LD_ADDR_VAR 0 51
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38932: LD_ADDR_VAR 0 52
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 0
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39083: LD_ADDR_VAR 0 53
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 2
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 2
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39313: LD_ADDR_VAR 0 54
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 2
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39543: LD_ADDR_VAR 0 55
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 0
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39773: LD_ADDR_VAR 0 56
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 0
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 2
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 2
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40003: LD_ADDR_VAR 0 57
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40233: LD_ADDR_VAR 0 58
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: NEG
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40463: LD_ADDR_VAR 0 59
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40551: LD_ADDR_VAR 0 60
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40639: LD_ADDR_VAR 0 61
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40727: LD_ADDR_VAR 0 62
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40815: LD_ADDR_VAR 0 63
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 1
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40903: LD_ADDR_VAR 0 64
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// end ; 1 :
40991: GO 46888
40993: LD_INT 1
40995: DOUBLE
40996: EQUAL
40997: IFTRUE 41001
40999: GO 43624
41001: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41002: LD_ADDR_VAR 0 11
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 3
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41046: LD_ADDR_VAR 0 12
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41087: LD_ADDR_VAR 0 13
41091: PUSH
41092: LD_INT 3
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 3
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41127: LD_ADDR_VAR 0 14
41131: PUSH
41132: LD_INT 1
41134: PUSH
41135: LD_INT 3
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: LIST
41167: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41168: LD_ADDR_VAR 0 15
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41212: LD_ADDR_VAR 0 16
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 3
41231: NEG
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: LIST
41257: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41258: LD_ADDR_VAR 0 17
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41302: LD_ADDR_VAR 0 18
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: LIST
41342: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41343: LD_ADDR_VAR 0 19
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41383: LD_ADDR_VAR 0 20
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41424: LD_ADDR_VAR 0 21
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 3
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: LIST
41467: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41468: LD_ADDR_VAR 0 22
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 3
41487: NEG
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41514: LD_ADDR_VAR 0 23
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: LD_INT 3
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 4
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41558: LD_ADDR_VAR 0 24
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 4
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41599: LD_ADDR_VAR 0 25
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 4
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: LD_INT 4
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41639: LD_ADDR_VAR 0 26
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 3
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 4
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41680: LD_ADDR_VAR 0 27
41684: PUSH
41685: LD_INT 3
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 4
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41724: LD_ADDR_VAR 0 28
41728: PUSH
41729: LD_INT 3
41731: NEG
41732: PUSH
41733: LD_INT 3
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: NEG
41744: PUSH
41745: LD_INT 4
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 4
41755: NEG
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41770: LD_ADDR_VAR 0 29
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 3
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 4
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 4
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: PUSH
41835: LD_INT 3
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 5
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 5
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 4
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 6
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 6
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 5
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
41925: LD_ADDR_VAR 0 30
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 4
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 4
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 5
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 5
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 6
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 6
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42068: LD_ADDR_VAR 0 31
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 3
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 3
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: LD_INT 3
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: LD_INT 4
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 4
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 5
42135: PUSH
42136: LD_INT 4
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 5
42145: PUSH
42146: LD_INT 5
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: LD_INT 5
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 6
42165: PUSH
42166: LD_INT 5
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 6
42175: PUSH
42176: LD_INT 6
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 5
42185: PUSH
42186: LD_INT 6
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42207: LD_ADDR_VAR 0 32
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 4
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 4
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 3
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 5
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 6
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 6
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 5
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42350: LD_ADDR_VAR 0 33
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 3
42391: NEG
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 4
42402: NEG
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 4
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 5
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 5
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 5
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 6
42470: NEG
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 6
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42505: LD_ADDR_VAR 0 34
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: LD_INT 4
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 4
42560: NEG
42561: PUSH
42562: LD_INT 3
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 4
42572: NEG
42573: PUSH
42574: LD_INT 4
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 4
42584: NEG
42585: PUSH
42586: LD_INT 5
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 5
42596: NEG
42597: PUSH
42598: LD_INT 4
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 5
42608: NEG
42609: PUSH
42610: LD_INT 5
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 5
42620: NEG
42621: PUSH
42622: LD_INT 6
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 6
42632: NEG
42633: PUSH
42634: LD_INT 5
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 6
42644: NEG
42645: PUSH
42646: LD_INT 6
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42668: LD_ADDR_VAR 0 41
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: LD_INT 3
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42712: LD_ADDR_VAR 0 42
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42753: LD_ADDR_VAR 0 43
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42793: LD_ADDR_VAR 0 44
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 3
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42834: LD_ADDR_VAR 0 45
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 3
42863: NEG
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
42878: LD_ADDR_VAR 0 46
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: LD_INT 2
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 3
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
42924: LD_ADDR_VAR 0 47
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 3
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42957: LD_ADDR_VAR 0 48
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
42988: LD_ADDR_VAR 0 49
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 3
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43017: LD_ADDR_VAR 0 50
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43046: LD_ADDR_VAR 0 51
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43077: LD_ADDR_VAR 0 52
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 3
43096: NEG
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43110: LD_ADDR_VAR 0 53
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43154: LD_ADDR_VAR 0 54
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43195: LD_ADDR_VAR 0 55
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43235: LD_ADDR_VAR 0 56
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43276: LD_ADDR_VAR 0 57
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 3
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: LIST
43319: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43320: LD_ADDR_VAR 0 58
43324: PUSH
43325: LD_INT 2
43327: NEG
43328: PUSH
43329: LD_INT 3
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43366: LD_ADDR_VAR 0 59
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43410: LD_ADDR_VAR 0 60
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 2
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: LIST
43450: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43451: LD_ADDR_VAR 0 61
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43491: LD_ADDR_VAR 0 62
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 2
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 2
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43532: LD_ADDR_VAR 0 63
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43576: LD_ADDR_VAR 0 64
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: ST_TO_ADDR
// end ; 2 :
43622: GO 46888
43624: LD_INT 2
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43632
43630: GO 46887
43632: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43633: LD_ADDR_VAR 0 29
43637: PUSH
43638: LD_INT 4
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 5
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 5
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 4
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 5
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 4
43753: PUSH
43754: LD_INT 3
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: LD_INT 4
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: LD_INT 4
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 3
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 4
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 4
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 0
43823: PUSH
43824: LD_INT 4
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: LD_INT 4
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: LD_INT 5
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: LD_INT 5
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: NEG
43874: PUSH
43875: LD_INT 4
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 5
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: NEG
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 4
43972: NEG
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 4
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 4
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 4
44018: NEG
44019: PUSH
44020: LD_INT 4
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 4
44030: NEG
44031: PUSH
44032: LD_INT 5
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: LD_INT 4
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 4
44066: NEG
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 5
44078: NEG
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 5
44090: NEG
44091: PUSH
44092: LD_INT 5
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: NEG
44103: PUSH
44104: LD_INT 5
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 5
44114: NEG
44115: PUSH
44116: LD_INT 3
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44171: LD_ADDR_VAR 0 30
44175: PUSH
44176: LD_INT 4
44178: PUSH
44179: LD_INT 4
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 4
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 5
44198: PUSH
44199: LD_INT 4
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 5
44208: PUSH
44209: LD_INT 5
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 4
44218: PUSH
44219: LD_INT 5
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: PUSH
44229: LD_INT 4
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 3
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 5
44248: PUSH
44249: LD_INT 3
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 3
44258: PUSH
44259: LD_INT 5
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 3
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 3
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: LD_INT 4
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 4
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 4
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 4
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 3
44384: NEG
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: NEG
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 4
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 5
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 5
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 5
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: NEG
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 3
44463: NEG
44464: PUSH
44465: LD_INT 3
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 3
44475: NEG
44476: PUSH
44477: LD_INT 4
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 3
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: NEG
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 4
44523: NEG
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 4
44535: NEG
44536: PUSH
44537: LD_INT 4
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 4
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 4
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 4
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: LD_INT 5
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: LD_INT 4
44596: NEG
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 4
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 5
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 5
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44718: LD_ADDR_VAR 0 31
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 4
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 4
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 5
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 5
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 4
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 5
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 3
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 3
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 4
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 4
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 4
44897: NEG
44898: PUSH
44899: LD_INT 2
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 4
44920: NEG
44921: PUSH
44922: LD_INT 4
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 4
44932: NEG
44933: PUSH
44934: LD_INT 5
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 3
44944: NEG
44945: PUSH
44946: LD_INT 4
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: LD_INT 3
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 4
44968: NEG
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 5
44980: NEG
44981: PUSH
44982: LD_INT 4
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 5
44992: NEG
44993: PUSH
44994: LD_INT 5
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: LD_INT 5
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 5
45016: NEG
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 4
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 3
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 2
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 2
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 3
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 4
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 4
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 4
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 4
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 5
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 5
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 4
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 3
45202: PUSH
45203: LD_INT 2
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45268: LD_ADDR_VAR 0 32
45272: PUSH
45273: LD_INT 4
45275: NEG
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 4
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 4
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 5
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 5
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 5
45354: NEG
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: NEG
45378: PUSH
45379: LD_INT 3
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 3
45389: NEG
45390: PUSH
45391: LD_INT 4
45393: NEG
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 3
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 4
45437: NEG
45438: PUSH
45439: LD_INT 3
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 4
45449: NEG
45450: PUSH
45451: LD_INT 4
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: LD_INT 4
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 4
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: LD_INT 4
45488: NEG
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 5
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 4
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 3
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 3
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 4
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 5
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 5
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 4
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 4
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 3
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 4
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 4
45680: PUSH
45681: LD_INT 4
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 4
45690: PUSH
45691: LD_INT 3
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 5
45700: PUSH
45701: LD_INT 4
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 5
45710: PUSH
45711: LD_INT 5
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 4
45720: PUSH
45721: LD_INT 5
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: LD_INT 4
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 5
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45815: LD_ADDR_VAR 0 33
45819: PUSH
45820: LD_INT 4
45822: NEG
45823: PUSH
45824: LD_INT 4
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 4
45834: NEG
45835: PUSH
45836: LD_INT 5
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 4
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 4
45870: NEG
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 5
45882: NEG
45883: PUSH
45884: LD_INT 4
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 5
45894: NEG
45895: PUSH
45896: LD_INT 5
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 5
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 5
45918: NEG
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 4
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 2
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 3
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 4
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 4
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 4
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 5
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 5
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 5
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 4
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 4
46155: PUSH
46156: LD_INT 4
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: PUSH
46166: LD_INT 4
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 3
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 4
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: LD_INT 4
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 4
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 5
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 5
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 4
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 5
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46353: LD_ADDR_VAR 0 34
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 4
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 5
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 4
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 3
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 5
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 5
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 4
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 4
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 2
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 4
46555: PUSH
46556: LD_INT 4
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 4
46565: PUSH
46566: LD_INT 3
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 5
46575: PUSH
46576: LD_INT 4
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 5
46585: PUSH
46586: LD_INT 5
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 4
46595: PUSH
46596: LD_INT 5
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 4
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: LD_INT 3
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 5
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 5
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: LD_INT 4
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: NEG
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 4
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 4
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 4
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 5
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 5
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 5
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 3
46829: NEG
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// end ; end ;
46885: GO 46888
46887: POP
// case btype of b_depot , b_warehouse :
46888: LD_VAR 0 1
46892: PUSH
46893: LD_INT 0
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46907
46899: LD_INT 1
46901: DOUBLE
46902: EQUAL
46903: IFTRUE 46907
46905: GO 47108
46907: POP
// case nation of nation_american :
46908: LD_VAR 0 5
46912: PUSH
46913: LD_INT 1
46915: DOUBLE
46916: EQUAL
46917: IFTRUE 46921
46919: GO 46977
46921: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
46922: LD_ADDR_VAR 0 9
46926: PUSH
46927: LD_VAR 0 11
46931: PUSH
46932: LD_VAR 0 12
46936: PUSH
46937: LD_VAR 0 13
46941: PUSH
46942: LD_VAR 0 14
46946: PUSH
46947: LD_VAR 0 15
46951: PUSH
46952: LD_VAR 0 16
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: PUSH
46965: LD_VAR 0 4
46969: PUSH
46970: LD_INT 1
46972: PLUS
46973: ARRAY
46974: ST_TO_ADDR
46975: GO 47106
46977: LD_INT 2
46979: DOUBLE
46980: EQUAL
46981: IFTRUE 46985
46983: GO 47041
46985: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
46986: LD_ADDR_VAR 0 9
46990: PUSH
46991: LD_VAR 0 17
46995: PUSH
46996: LD_VAR 0 18
47000: PUSH
47001: LD_VAR 0 19
47005: PUSH
47006: LD_VAR 0 20
47010: PUSH
47011: LD_VAR 0 21
47015: PUSH
47016: LD_VAR 0 22
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: PUSH
47029: LD_VAR 0 4
47033: PUSH
47034: LD_INT 1
47036: PLUS
47037: ARRAY
47038: ST_TO_ADDR
47039: GO 47106
47041: LD_INT 3
47043: DOUBLE
47044: EQUAL
47045: IFTRUE 47049
47047: GO 47105
47049: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_VAR 0 23
47059: PUSH
47060: LD_VAR 0 24
47064: PUSH
47065: LD_VAR 0 25
47069: PUSH
47070: LD_VAR 0 26
47074: PUSH
47075: LD_VAR 0 27
47079: PUSH
47080: LD_VAR 0 28
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: PUSH
47093: LD_VAR 0 4
47097: PUSH
47098: LD_INT 1
47100: PLUS
47101: ARRAY
47102: ST_TO_ADDR
47103: GO 47106
47105: POP
47106: GO 47661
47108: LD_INT 2
47110: DOUBLE
47111: EQUAL
47112: IFTRUE 47122
47114: LD_INT 3
47116: DOUBLE
47117: EQUAL
47118: IFTRUE 47122
47120: GO 47178
47122: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47123: LD_ADDR_VAR 0 9
47127: PUSH
47128: LD_VAR 0 29
47132: PUSH
47133: LD_VAR 0 30
47137: PUSH
47138: LD_VAR 0 31
47142: PUSH
47143: LD_VAR 0 32
47147: PUSH
47148: LD_VAR 0 33
47152: PUSH
47153: LD_VAR 0 34
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: PUSH
47166: LD_VAR 0 4
47170: PUSH
47171: LD_INT 1
47173: PLUS
47174: ARRAY
47175: ST_TO_ADDR
47176: GO 47661
47178: LD_INT 16
47180: DOUBLE
47181: EQUAL
47182: IFTRUE 47240
47184: LD_INT 17
47186: DOUBLE
47187: EQUAL
47188: IFTRUE 47240
47190: LD_INT 18
47192: DOUBLE
47193: EQUAL
47194: IFTRUE 47240
47196: LD_INT 19
47198: DOUBLE
47199: EQUAL
47200: IFTRUE 47240
47202: LD_INT 22
47204: DOUBLE
47205: EQUAL
47206: IFTRUE 47240
47208: LD_INT 20
47210: DOUBLE
47211: EQUAL
47212: IFTRUE 47240
47214: LD_INT 21
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47240
47220: LD_INT 23
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47240
47226: LD_INT 24
47228: DOUBLE
47229: EQUAL
47230: IFTRUE 47240
47232: LD_INT 25
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47296
47240: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47241: LD_ADDR_VAR 0 9
47245: PUSH
47246: LD_VAR 0 35
47250: PUSH
47251: LD_VAR 0 36
47255: PUSH
47256: LD_VAR 0 37
47260: PUSH
47261: LD_VAR 0 38
47265: PUSH
47266: LD_VAR 0 39
47270: PUSH
47271: LD_VAR 0 40
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 4
47288: PUSH
47289: LD_INT 1
47291: PLUS
47292: ARRAY
47293: ST_TO_ADDR
47294: GO 47661
47296: LD_INT 6
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47352
47302: LD_INT 7
47304: DOUBLE
47305: EQUAL
47306: IFTRUE 47352
47308: LD_INT 8
47310: DOUBLE
47311: EQUAL
47312: IFTRUE 47352
47314: LD_INT 13
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47352
47320: LD_INT 12
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47352
47326: LD_INT 15
47328: DOUBLE
47329: EQUAL
47330: IFTRUE 47352
47332: LD_INT 11
47334: DOUBLE
47335: EQUAL
47336: IFTRUE 47352
47338: LD_INT 14
47340: DOUBLE
47341: EQUAL
47342: IFTRUE 47352
47344: LD_INT 10
47346: DOUBLE
47347: EQUAL
47348: IFTRUE 47352
47350: GO 47408
47352: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47353: LD_ADDR_VAR 0 9
47357: PUSH
47358: LD_VAR 0 41
47362: PUSH
47363: LD_VAR 0 42
47367: PUSH
47368: LD_VAR 0 43
47372: PUSH
47373: LD_VAR 0 44
47377: PUSH
47378: LD_VAR 0 45
47382: PUSH
47383: LD_VAR 0 46
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: PUSH
47396: LD_VAR 0 4
47400: PUSH
47401: LD_INT 1
47403: PLUS
47404: ARRAY
47405: ST_TO_ADDR
47406: GO 47661
47408: LD_INT 36
47410: DOUBLE
47411: EQUAL
47412: IFTRUE 47416
47414: GO 47472
47416: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47417: LD_ADDR_VAR 0 9
47421: PUSH
47422: LD_VAR 0 47
47426: PUSH
47427: LD_VAR 0 48
47431: PUSH
47432: LD_VAR 0 49
47436: PUSH
47437: LD_VAR 0 50
47441: PUSH
47442: LD_VAR 0 51
47446: PUSH
47447: LD_VAR 0 52
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: PUSH
47460: LD_VAR 0 4
47464: PUSH
47465: LD_INT 1
47467: PLUS
47468: ARRAY
47469: ST_TO_ADDR
47470: GO 47661
47472: LD_INT 4
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47498
47478: LD_INT 5
47480: DOUBLE
47481: EQUAL
47482: IFTRUE 47498
47484: LD_INT 34
47486: DOUBLE
47487: EQUAL
47488: IFTRUE 47498
47490: LD_INT 37
47492: DOUBLE
47493: EQUAL
47494: IFTRUE 47498
47496: GO 47554
47498: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47499: LD_ADDR_VAR 0 9
47503: PUSH
47504: LD_VAR 0 53
47508: PUSH
47509: LD_VAR 0 54
47513: PUSH
47514: LD_VAR 0 55
47518: PUSH
47519: LD_VAR 0 56
47523: PUSH
47524: LD_VAR 0 57
47528: PUSH
47529: LD_VAR 0 58
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: PUSH
47542: LD_VAR 0 4
47546: PUSH
47547: LD_INT 1
47549: PLUS
47550: ARRAY
47551: ST_TO_ADDR
47552: GO 47661
47554: LD_INT 31
47556: DOUBLE
47557: EQUAL
47558: IFTRUE 47604
47560: LD_INT 32
47562: DOUBLE
47563: EQUAL
47564: IFTRUE 47604
47566: LD_INT 33
47568: DOUBLE
47569: EQUAL
47570: IFTRUE 47604
47572: LD_INT 27
47574: DOUBLE
47575: EQUAL
47576: IFTRUE 47604
47578: LD_INT 26
47580: DOUBLE
47581: EQUAL
47582: IFTRUE 47604
47584: LD_INT 28
47586: DOUBLE
47587: EQUAL
47588: IFTRUE 47604
47590: LD_INT 29
47592: DOUBLE
47593: EQUAL
47594: IFTRUE 47604
47596: LD_INT 30
47598: DOUBLE
47599: EQUAL
47600: IFTRUE 47604
47602: GO 47660
47604: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47605: LD_ADDR_VAR 0 9
47609: PUSH
47610: LD_VAR 0 59
47614: PUSH
47615: LD_VAR 0 60
47619: PUSH
47620: LD_VAR 0 61
47624: PUSH
47625: LD_VAR 0 62
47629: PUSH
47630: LD_VAR 0 63
47634: PUSH
47635: LD_VAR 0 64
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: PUSH
47648: LD_VAR 0 4
47652: PUSH
47653: LD_INT 1
47655: PLUS
47656: ARRAY
47657: ST_TO_ADDR
47658: GO 47661
47660: POP
// temp_list2 = [ ] ;
47661: LD_ADDR_VAR 0 10
47665: PUSH
47666: EMPTY
47667: ST_TO_ADDR
// for i in temp_list do
47668: LD_ADDR_VAR 0 8
47672: PUSH
47673: LD_VAR 0 9
47677: PUSH
47678: FOR_IN
47679: IFFALSE 47731
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47681: LD_ADDR_VAR 0 10
47685: PUSH
47686: LD_VAR 0 10
47690: PUSH
47691: LD_VAR 0 8
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PUSH
47700: LD_VAR 0 2
47704: PLUS
47705: PUSH
47706: LD_VAR 0 8
47710: PUSH
47711: LD_INT 2
47713: ARRAY
47714: PUSH
47715: LD_VAR 0 3
47719: PLUS
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: ADD
47728: ST_TO_ADDR
47729: GO 47678
47731: POP
47732: POP
// result = temp_list2 ;
47733: LD_ADDR_VAR 0 7
47737: PUSH
47738: LD_VAR 0 10
47742: ST_TO_ADDR
// end ;
47743: LD_VAR 0 7
47747: RET
// export function EnemyInRange ( unit , dist ) ; begin
47748: LD_INT 0
47750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47751: LD_ADDR_VAR 0 3
47755: PUSH
47756: LD_VAR 0 1
47760: PPUSH
47761: CALL_OW 255
47765: PPUSH
47766: LD_VAR 0 1
47770: PPUSH
47771: CALL_OW 250
47775: PPUSH
47776: LD_VAR 0 1
47780: PPUSH
47781: CALL_OW 251
47785: PPUSH
47786: LD_VAR 0 2
47790: PPUSH
47791: CALL 21121 0 4
47795: PUSH
47796: LD_INT 4
47798: ARRAY
47799: ST_TO_ADDR
// end ;
47800: LD_VAR 0 3
47804: RET
// export function PlayerSeeMe ( unit ) ; begin
47805: LD_INT 0
47807: PPUSH
// result := See ( your_side , unit ) ;
47808: LD_ADDR_VAR 0 2
47812: PUSH
47813: LD_OWVAR 2
47817: PPUSH
47818: LD_VAR 0 1
47822: PPUSH
47823: CALL_OW 292
47827: ST_TO_ADDR
// end ;
47828: LD_VAR 0 2
47832: RET
// export function ReverseDir ( unit ) ; begin
47833: LD_INT 0
47835: PPUSH
// if not unit then
47836: LD_VAR 0 1
47840: NOT
47841: IFFALSE 47845
// exit ;
47843: GO 47868
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47845: LD_ADDR_VAR 0 2
47849: PUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 254
47859: PUSH
47860: LD_INT 3
47862: PLUS
47863: PUSH
47864: LD_INT 6
47866: MOD
47867: ST_TO_ADDR
// end ;
47868: LD_VAR 0 2
47872: RET
// export function ReverseArray ( array ) ; var i ; begin
47873: LD_INT 0
47875: PPUSH
47876: PPUSH
// if not array then
47877: LD_VAR 0 1
47881: NOT
47882: IFFALSE 47886
// exit ;
47884: GO 47941
// result := [ ] ;
47886: LD_ADDR_VAR 0 2
47890: PUSH
47891: EMPTY
47892: ST_TO_ADDR
// for i := array downto 1 do
47893: LD_ADDR_VAR 0 3
47897: PUSH
47898: DOUBLE
47899: LD_VAR 0 1
47903: INC
47904: ST_TO_ADDR
47905: LD_INT 1
47907: PUSH
47908: FOR_DOWNTO
47909: IFFALSE 47939
// result := Join ( result , array [ i ] ) ;
47911: LD_ADDR_VAR 0 2
47915: PUSH
47916: LD_VAR 0 2
47920: PPUSH
47921: LD_VAR 0 1
47925: PUSH
47926: LD_VAR 0 3
47930: ARRAY
47931: PPUSH
47932: CALL 52586 0 2
47936: ST_TO_ADDR
47937: GO 47908
47939: POP
47940: POP
// end ;
47941: LD_VAR 0 2
47945: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
47946: LD_INT 0
47948: PPUSH
47949: PPUSH
47950: PPUSH
47951: PPUSH
47952: PPUSH
47953: PPUSH
// if not unit or not hexes then
47954: LD_VAR 0 1
47958: NOT
47959: PUSH
47960: LD_VAR 0 2
47964: NOT
47965: OR
47966: IFFALSE 47970
// exit ;
47968: GO 48093
// dist := 9999 ;
47970: LD_ADDR_VAR 0 5
47974: PUSH
47975: LD_INT 9999
47977: ST_TO_ADDR
// for i = 1 to hexes do
47978: LD_ADDR_VAR 0 4
47982: PUSH
47983: DOUBLE
47984: LD_INT 1
47986: DEC
47987: ST_TO_ADDR
47988: LD_VAR 0 2
47992: PUSH
47993: FOR_TO
47994: IFFALSE 48081
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47996: LD_ADDR_VAR 0 6
48000: PUSH
48001: LD_VAR 0 1
48005: PPUSH
48006: LD_VAR 0 2
48010: PUSH
48011: LD_VAR 0 4
48015: ARRAY
48016: PUSH
48017: LD_INT 1
48019: ARRAY
48020: PPUSH
48021: LD_VAR 0 2
48025: PUSH
48026: LD_VAR 0 4
48030: ARRAY
48031: PUSH
48032: LD_INT 2
48034: ARRAY
48035: PPUSH
48036: CALL_OW 297
48040: ST_TO_ADDR
// if tdist < dist then
48041: LD_VAR 0 6
48045: PUSH
48046: LD_VAR 0 5
48050: LESS
48051: IFFALSE 48079
// begin hex := hexes [ i ] ;
48053: LD_ADDR_VAR 0 8
48057: PUSH
48058: LD_VAR 0 2
48062: PUSH
48063: LD_VAR 0 4
48067: ARRAY
48068: ST_TO_ADDR
// dist := tdist ;
48069: LD_ADDR_VAR 0 5
48073: PUSH
48074: LD_VAR 0 6
48078: ST_TO_ADDR
// end ; end ;
48079: GO 47993
48081: POP
48082: POP
// result := hex ;
48083: LD_ADDR_VAR 0 3
48087: PUSH
48088: LD_VAR 0 8
48092: ST_TO_ADDR
// end ;
48093: LD_VAR 0 3
48097: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48098: LD_INT 0
48100: PPUSH
48101: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48102: LD_VAR 0 1
48106: NOT
48107: PUSH
48108: LD_VAR 0 1
48112: PUSH
48113: LD_INT 21
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 23
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PPUSH
48137: CALL_OW 69
48141: IN
48142: NOT
48143: OR
48144: IFFALSE 48148
// exit ;
48146: GO 48195
// for i = 1 to 3 do
48148: LD_ADDR_VAR 0 3
48152: PUSH
48153: DOUBLE
48154: LD_INT 1
48156: DEC
48157: ST_TO_ADDR
48158: LD_INT 3
48160: PUSH
48161: FOR_TO
48162: IFFALSE 48193
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48164: LD_VAR 0 1
48168: PPUSH
48169: CALL_OW 250
48173: PPUSH
48174: LD_VAR 0 1
48178: PPUSH
48179: CALL_OW 251
48183: PPUSH
48184: LD_INT 1
48186: PPUSH
48187: CALL_OW 453
48191: GO 48161
48193: POP
48194: POP
// end ;
48195: LD_VAR 0 2
48199: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48200: LD_INT 0
48202: PPUSH
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
48207: PPUSH
// if not unit or not enemy_unit then
48208: LD_VAR 0 1
48212: NOT
48213: PUSH
48214: LD_VAR 0 2
48218: NOT
48219: OR
48220: IFFALSE 48224
// exit ;
48222: GO 48691
// if GetLives ( i ) < 250 then
48224: LD_VAR 0 4
48228: PPUSH
48229: CALL_OW 256
48233: PUSH
48234: LD_INT 250
48236: LESS
48237: IFFALSE 48250
// begin ComAutodestruct ( i ) ;
48239: LD_VAR 0 4
48243: PPUSH
48244: CALL 48098 0 1
// exit ;
48248: GO 48691
// end ; x := GetX ( enemy_unit ) ;
48250: LD_ADDR_VAR 0 7
48254: PUSH
48255: LD_VAR 0 2
48259: PPUSH
48260: CALL_OW 250
48264: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48265: LD_ADDR_VAR 0 8
48269: PUSH
48270: LD_VAR 0 2
48274: PPUSH
48275: CALL_OW 251
48279: ST_TO_ADDR
// if not x or not y then
48280: LD_VAR 0 7
48284: NOT
48285: PUSH
48286: LD_VAR 0 8
48290: NOT
48291: OR
48292: IFFALSE 48296
// exit ;
48294: GO 48691
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48296: LD_ADDR_VAR 0 6
48300: PUSH
48301: LD_VAR 0 7
48305: PPUSH
48306: LD_INT 0
48308: PPUSH
48309: LD_INT 4
48311: PPUSH
48312: CALL_OW 272
48316: PUSH
48317: LD_VAR 0 8
48321: PPUSH
48322: LD_INT 0
48324: PPUSH
48325: LD_INT 4
48327: PPUSH
48328: CALL_OW 273
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_VAR 0 7
48341: PPUSH
48342: LD_INT 1
48344: PPUSH
48345: LD_INT 4
48347: PPUSH
48348: CALL_OW 272
48352: PUSH
48353: LD_VAR 0 8
48357: PPUSH
48358: LD_INT 1
48360: PPUSH
48361: LD_INT 4
48363: PPUSH
48364: CALL_OW 273
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_VAR 0 7
48377: PPUSH
48378: LD_INT 2
48380: PPUSH
48381: LD_INT 4
48383: PPUSH
48384: CALL_OW 272
48388: PUSH
48389: LD_VAR 0 8
48393: PPUSH
48394: LD_INT 2
48396: PPUSH
48397: LD_INT 4
48399: PPUSH
48400: CALL_OW 273
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_VAR 0 7
48413: PPUSH
48414: LD_INT 3
48416: PPUSH
48417: LD_INT 4
48419: PPUSH
48420: CALL_OW 272
48424: PUSH
48425: LD_VAR 0 8
48429: PPUSH
48430: LD_INT 3
48432: PPUSH
48433: LD_INT 4
48435: PPUSH
48436: CALL_OW 273
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_VAR 0 7
48449: PPUSH
48450: LD_INT 4
48452: PPUSH
48453: LD_INT 4
48455: PPUSH
48456: CALL_OW 272
48460: PUSH
48461: LD_VAR 0 8
48465: PPUSH
48466: LD_INT 4
48468: PPUSH
48469: LD_INT 4
48471: PPUSH
48472: CALL_OW 273
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_VAR 0 7
48485: PPUSH
48486: LD_INT 5
48488: PPUSH
48489: LD_INT 4
48491: PPUSH
48492: CALL_OW 272
48496: PUSH
48497: LD_VAR 0 8
48501: PPUSH
48502: LD_INT 5
48504: PPUSH
48505: LD_INT 4
48507: PPUSH
48508: CALL_OW 273
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// for i = tmp downto 1 do
48525: LD_ADDR_VAR 0 4
48529: PUSH
48530: DOUBLE
48531: LD_VAR 0 6
48535: INC
48536: ST_TO_ADDR
48537: LD_INT 1
48539: PUSH
48540: FOR_DOWNTO
48541: IFFALSE 48642
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48543: LD_VAR 0 6
48547: PUSH
48548: LD_VAR 0 4
48552: ARRAY
48553: PUSH
48554: LD_INT 1
48556: ARRAY
48557: PPUSH
48558: LD_VAR 0 6
48562: PUSH
48563: LD_VAR 0 4
48567: ARRAY
48568: PUSH
48569: LD_INT 2
48571: ARRAY
48572: PPUSH
48573: CALL_OW 488
48577: NOT
48578: PUSH
48579: LD_VAR 0 6
48583: PUSH
48584: LD_VAR 0 4
48588: ARRAY
48589: PUSH
48590: LD_INT 1
48592: ARRAY
48593: PPUSH
48594: LD_VAR 0 6
48598: PUSH
48599: LD_VAR 0 4
48603: ARRAY
48604: PUSH
48605: LD_INT 2
48607: ARRAY
48608: PPUSH
48609: CALL_OW 428
48613: PUSH
48614: LD_INT 0
48616: NONEQUAL
48617: OR
48618: IFFALSE 48640
// tmp := Delete ( tmp , i ) ;
48620: LD_ADDR_VAR 0 6
48624: PUSH
48625: LD_VAR 0 6
48629: PPUSH
48630: LD_VAR 0 4
48634: PPUSH
48635: CALL_OW 3
48639: ST_TO_ADDR
48640: GO 48540
48642: POP
48643: POP
// j := GetClosestHex ( unit , tmp ) ;
48644: LD_ADDR_VAR 0 5
48648: PUSH
48649: LD_VAR 0 1
48653: PPUSH
48654: LD_VAR 0 6
48658: PPUSH
48659: CALL 47946 0 2
48663: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48664: LD_VAR 0 1
48668: PPUSH
48669: LD_VAR 0 5
48673: PUSH
48674: LD_INT 1
48676: ARRAY
48677: PPUSH
48678: LD_VAR 0 5
48682: PUSH
48683: LD_INT 2
48685: ARRAY
48686: PPUSH
48687: CALL_OW 111
// end ;
48691: LD_VAR 0 3
48695: RET
// export function PrepareApemanSoldier ( ) ; begin
48696: LD_INT 0
48698: PPUSH
// uc_nation := 0 ;
48699: LD_ADDR_OWVAR 21
48703: PUSH
48704: LD_INT 0
48706: ST_TO_ADDR
// hc_sex := sex_male ;
48707: LD_ADDR_OWVAR 27
48711: PUSH
48712: LD_INT 1
48714: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48715: LD_ADDR_OWVAR 28
48719: PUSH
48720: LD_INT 15
48722: ST_TO_ADDR
// hc_gallery :=  ;
48723: LD_ADDR_OWVAR 33
48727: PUSH
48728: LD_STRING 
48730: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48731: LD_ADDR_OWVAR 31
48735: PUSH
48736: LD_INT 0
48738: PPUSH
48739: LD_INT 3
48741: PPUSH
48742: CALL_OW 12
48746: PUSH
48747: LD_INT 0
48749: PPUSH
48750: LD_INT 3
48752: PPUSH
48753: CALL_OW 12
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: ST_TO_ADDR
// end ;
48770: LD_VAR 0 1
48774: RET
// export function PrepareApemanEngineer ( ) ; begin
48775: LD_INT 0
48777: PPUSH
// uc_nation := 0 ;
48778: LD_ADDR_OWVAR 21
48782: PUSH
48783: LD_INT 0
48785: ST_TO_ADDR
// hc_sex := sex_male ;
48786: LD_ADDR_OWVAR 27
48790: PUSH
48791: LD_INT 1
48793: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48794: LD_ADDR_OWVAR 28
48798: PUSH
48799: LD_INT 16
48801: ST_TO_ADDR
// hc_gallery :=  ;
48802: LD_ADDR_OWVAR 33
48806: PUSH
48807: LD_STRING 
48809: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48810: LD_ADDR_OWVAR 31
48814: PUSH
48815: LD_INT 0
48817: PPUSH
48818: LD_INT 3
48820: PPUSH
48821: CALL_OW 12
48825: PUSH
48826: LD_INT 0
48828: PPUSH
48829: LD_INT 3
48831: PPUSH
48832: CALL_OW 12
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// end ;
48849: LD_VAR 0 1
48853: RET
// export function PrepareApeman ( agressivity ) ; begin
48854: LD_INT 0
48856: PPUSH
// uc_side := 0 ;
48857: LD_ADDR_OWVAR 20
48861: PUSH
48862: LD_INT 0
48864: ST_TO_ADDR
// uc_nation := 0 ;
48865: LD_ADDR_OWVAR 21
48869: PUSH
48870: LD_INT 0
48872: ST_TO_ADDR
// hc_sex := sex_male ;
48873: LD_ADDR_OWVAR 27
48877: PUSH
48878: LD_INT 1
48880: ST_TO_ADDR
// hc_class := class_apeman ;
48881: LD_ADDR_OWVAR 28
48885: PUSH
48886: LD_INT 12
48888: ST_TO_ADDR
// hc_gallery :=  ;
48889: LD_ADDR_OWVAR 33
48893: PUSH
48894: LD_STRING 
48896: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48897: LD_ADDR_OWVAR 35
48901: PUSH
48902: LD_VAR 0 1
48906: NEG
48907: PPUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 12
48917: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48918: LD_ADDR_OWVAR 31
48922: PUSH
48923: LD_INT 0
48925: PPUSH
48926: LD_INT 3
48928: PPUSH
48929: CALL_OW 12
48933: PUSH
48934: LD_INT 0
48936: PPUSH
48937: LD_INT 3
48939: PPUSH
48940: CALL_OW 12
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: ST_TO_ADDR
// end ;
48957: LD_VAR 0 2
48961: RET
// export function PrepareTiger ( agressivity ) ; begin
48962: LD_INT 0
48964: PPUSH
// uc_side := 0 ;
48965: LD_ADDR_OWVAR 20
48969: PUSH
48970: LD_INT 0
48972: ST_TO_ADDR
// uc_nation := 0 ;
48973: LD_ADDR_OWVAR 21
48977: PUSH
48978: LD_INT 0
48980: ST_TO_ADDR
// hc_class := class_tiger ;
48981: LD_ADDR_OWVAR 28
48985: PUSH
48986: LD_INT 14
48988: ST_TO_ADDR
// hc_gallery :=  ;
48989: LD_ADDR_OWVAR 33
48993: PUSH
48994: LD_STRING 
48996: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
48997: LD_ADDR_OWVAR 35
49001: PUSH
49002: LD_VAR 0 1
49006: NEG
49007: PPUSH
49008: LD_VAR 0 1
49012: PPUSH
49013: CALL_OW 12
49017: ST_TO_ADDR
// end ;
49018: LD_VAR 0 2
49022: RET
// export function PrepareEnchidna ( ) ; begin
49023: LD_INT 0
49025: PPUSH
// uc_side := 0 ;
49026: LD_ADDR_OWVAR 20
49030: PUSH
49031: LD_INT 0
49033: ST_TO_ADDR
// uc_nation := 0 ;
49034: LD_ADDR_OWVAR 21
49038: PUSH
49039: LD_INT 0
49041: ST_TO_ADDR
// hc_class := class_baggie ;
49042: LD_ADDR_OWVAR 28
49046: PUSH
49047: LD_INT 13
49049: ST_TO_ADDR
// hc_gallery :=  ;
49050: LD_ADDR_OWVAR 33
49054: PUSH
49055: LD_STRING 
49057: ST_TO_ADDR
// end ;
49058: LD_VAR 0 1
49062: RET
// export function PrepareFrog ( ) ; begin
49063: LD_INT 0
49065: PPUSH
// uc_side := 0 ;
49066: LD_ADDR_OWVAR 20
49070: PUSH
49071: LD_INT 0
49073: ST_TO_ADDR
// uc_nation := 0 ;
49074: LD_ADDR_OWVAR 21
49078: PUSH
49079: LD_INT 0
49081: ST_TO_ADDR
// hc_class := class_frog ;
49082: LD_ADDR_OWVAR 28
49086: PUSH
49087: LD_INT 19
49089: ST_TO_ADDR
// hc_gallery :=  ;
49090: LD_ADDR_OWVAR 33
49094: PUSH
49095: LD_STRING 
49097: ST_TO_ADDR
// end ;
49098: LD_VAR 0 1
49102: RET
// export function PrepareFish ( ) ; begin
49103: LD_INT 0
49105: PPUSH
// uc_side := 0 ;
49106: LD_ADDR_OWVAR 20
49110: PUSH
49111: LD_INT 0
49113: ST_TO_ADDR
// uc_nation := 0 ;
49114: LD_ADDR_OWVAR 21
49118: PUSH
49119: LD_INT 0
49121: ST_TO_ADDR
// hc_class := class_fish ;
49122: LD_ADDR_OWVAR 28
49126: PUSH
49127: LD_INT 20
49129: ST_TO_ADDR
// hc_gallery :=  ;
49130: LD_ADDR_OWVAR 33
49134: PUSH
49135: LD_STRING 
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 1
49142: RET
// export function PrepareBird ( ) ; begin
49143: LD_INT 0
49145: PPUSH
// uc_side := 0 ;
49146: LD_ADDR_OWVAR 20
49150: PUSH
49151: LD_INT 0
49153: ST_TO_ADDR
// uc_nation := 0 ;
49154: LD_ADDR_OWVAR 21
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// hc_class := class_phororhacos ;
49162: LD_ADDR_OWVAR 28
49166: PUSH
49167: LD_INT 18
49169: ST_TO_ADDR
// hc_gallery :=  ;
49170: LD_ADDR_OWVAR 33
49174: PUSH
49175: LD_STRING 
49177: ST_TO_ADDR
// end ;
49178: LD_VAR 0 1
49182: RET
// export function PrepareHorse ( ) ; begin
49183: LD_INT 0
49185: PPUSH
// uc_side := 0 ;
49186: LD_ADDR_OWVAR 20
49190: PUSH
49191: LD_INT 0
49193: ST_TO_ADDR
// uc_nation := 0 ;
49194: LD_ADDR_OWVAR 21
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// hc_class := class_horse ;
49202: LD_ADDR_OWVAR 28
49206: PUSH
49207: LD_INT 21
49209: ST_TO_ADDR
// hc_gallery :=  ;
49210: LD_ADDR_OWVAR 33
49214: PUSH
49215: LD_STRING 
49217: ST_TO_ADDR
// end ;
49218: LD_VAR 0 1
49222: RET
// export function PrepareMastodont ( ) ; begin
49223: LD_INT 0
49225: PPUSH
// uc_side := 0 ;
49226: LD_ADDR_OWVAR 20
49230: PUSH
49231: LD_INT 0
49233: ST_TO_ADDR
// uc_nation := 0 ;
49234: LD_ADDR_OWVAR 21
49238: PUSH
49239: LD_INT 0
49241: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49242: LD_ADDR_OWVAR 37
49246: PUSH
49247: LD_INT 31
49249: ST_TO_ADDR
// vc_control := control_rider ;
49250: LD_ADDR_OWVAR 38
49254: PUSH
49255: LD_INT 4
49257: ST_TO_ADDR
// end ;
49258: LD_VAR 0 1
49262: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49263: LD_INT 0
49265: PPUSH
49266: PPUSH
49267: PPUSH
// uc_side = 0 ;
49268: LD_ADDR_OWVAR 20
49272: PUSH
49273: LD_INT 0
49275: ST_TO_ADDR
// uc_nation = 0 ;
49276: LD_ADDR_OWVAR 21
49280: PUSH
49281: LD_INT 0
49283: ST_TO_ADDR
// InitHc_All ( ) ;
49284: CALL_OW 584
// InitVc ;
49288: CALL_OW 20
// if mastodonts then
49292: LD_VAR 0 6
49296: IFFALSE 49363
// for i = 1 to mastodonts do
49298: LD_ADDR_VAR 0 11
49302: PUSH
49303: DOUBLE
49304: LD_INT 1
49306: DEC
49307: ST_TO_ADDR
49308: LD_VAR 0 6
49312: PUSH
49313: FOR_TO
49314: IFFALSE 49361
// begin vc_chassis := 31 ;
49316: LD_ADDR_OWVAR 37
49320: PUSH
49321: LD_INT 31
49323: ST_TO_ADDR
// vc_control := control_rider ;
49324: LD_ADDR_OWVAR 38
49328: PUSH
49329: LD_INT 4
49331: ST_TO_ADDR
// animal := CreateVehicle ;
49332: LD_ADDR_VAR 0 12
49336: PUSH
49337: CALL_OW 45
49341: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49342: LD_VAR 0 12
49346: PPUSH
49347: LD_VAR 0 8
49351: PPUSH
49352: LD_INT 0
49354: PPUSH
49355: CALL 51491 0 3
// end ;
49359: GO 49313
49361: POP
49362: POP
// if horses then
49363: LD_VAR 0 5
49367: IFFALSE 49434
// for i = 1 to horses do
49369: LD_ADDR_VAR 0 11
49373: PUSH
49374: DOUBLE
49375: LD_INT 1
49377: DEC
49378: ST_TO_ADDR
49379: LD_VAR 0 5
49383: PUSH
49384: FOR_TO
49385: IFFALSE 49432
// begin hc_class := 21 ;
49387: LD_ADDR_OWVAR 28
49391: PUSH
49392: LD_INT 21
49394: ST_TO_ADDR
// hc_gallery :=  ;
49395: LD_ADDR_OWVAR 33
49399: PUSH
49400: LD_STRING 
49402: ST_TO_ADDR
// animal := CreateHuman ;
49403: LD_ADDR_VAR 0 12
49407: PUSH
49408: CALL_OW 44
49412: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49413: LD_VAR 0 12
49417: PPUSH
49418: LD_VAR 0 8
49422: PPUSH
49423: LD_INT 0
49425: PPUSH
49426: CALL 51491 0 3
// end ;
49430: GO 49384
49432: POP
49433: POP
// if birds then
49434: LD_VAR 0 1
49438: IFFALSE 49505
// for i = 1 to birds do
49440: LD_ADDR_VAR 0 11
49444: PUSH
49445: DOUBLE
49446: LD_INT 1
49448: DEC
49449: ST_TO_ADDR
49450: LD_VAR 0 1
49454: PUSH
49455: FOR_TO
49456: IFFALSE 49503
// begin hc_class := 18 ;
49458: LD_ADDR_OWVAR 28
49462: PUSH
49463: LD_INT 18
49465: ST_TO_ADDR
// hc_gallery =  ;
49466: LD_ADDR_OWVAR 33
49470: PUSH
49471: LD_STRING 
49473: ST_TO_ADDR
// animal := CreateHuman ;
49474: LD_ADDR_VAR 0 12
49478: PUSH
49479: CALL_OW 44
49483: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49484: LD_VAR 0 12
49488: PPUSH
49489: LD_VAR 0 8
49493: PPUSH
49494: LD_INT 0
49496: PPUSH
49497: CALL 51491 0 3
// end ;
49501: GO 49455
49503: POP
49504: POP
// if tigers then
49505: LD_VAR 0 2
49509: IFFALSE 49593
// for i = 1 to tigers do
49511: LD_ADDR_VAR 0 11
49515: PUSH
49516: DOUBLE
49517: LD_INT 1
49519: DEC
49520: ST_TO_ADDR
49521: LD_VAR 0 2
49525: PUSH
49526: FOR_TO
49527: IFFALSE 49591
// begin hc_class = class_tiger ;
49529: LD_ADDR_OWVAR 28
49533: PUSH
49534: LD_INT 14
49536: ST_TO_ADDR
// hc_gallery =  ;
49537: LD_ADDR_OWVAR 33
49541: PUSH
49542: LD_STRING 
49544: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49545: LD_ADDR_OWVAR 35
49549: PUSH
49550: LD_INT 7
49552: NEG
49553: PPUSH
49554: LD_INT 7
49556: PPUSH
49557: CALL_OW 12
49561: ST_TO_ADDR
// animal := CreateHuman ;
49562: LD_ADDR_VAR 0 12
49566: PUSH
49567: CALL_OW 44
49571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49572: LD_VAR 0 12
49576: PPUSH
49577: LD_VAR 0 8
49581: PPUSH
49582: LD_INT 0
49584: PPUSH
49585: CALL 51491 0 3
// end ;
49589: GO 49526
49591: POP
49592: POP
// if apemans then
49593: LD_VAR 0 3
49597: IFFALSE 49720
// for i = 1 to apemans do
49599: LD_ADDR_VAR 0 11
49603: PUSH
49604: DOUBLE
49605: LD_INT 1
49607: DEC
49608: ST_TO_ADDR
49609: LD_VAR 0 3
49613: PUSH
49614: FOR_TO
49615: IFFALSE 49718
// begin hc_class = class_apeman ;
49617: LD_ADDR_OWVAR 28
49621: PUSH
49622: LD_INT 12
49624: ST_TO_ADDR
// hc_gallery =  ;
49625: LD_ADDR_OWVAR 33
49629: PUSH
49630: LD_STRING 
49632: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49633: LD_ADDR_OWVAR 35
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PPUSH
49642: LD_INT 2
49644: PPUSH
49645: CALL_OW 12
49649: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49650: LD_ADDR_OWVAR 31
49654: PUSH
49655: LD_INT 1
49657: PPUSH
49658: LD_INT 3
49660: PPUSH
49661: CALL_OW 12
49665: PUSH
49666: LD_INT 1
49668: PPUSH
49669: LD_INT 3
49671: PPUSH
49672: CALL_OW 12
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// animal := CreateHuman ;
49689: LD_ADDR_VAR 0 12
49693: PUSH
49694: CALL_OW 44
49698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49699: LD_VAR 0 12
49703: PPUSH
49704: LD_VAR 0 8
49708: PPUSH
49709: LD_INT 0
49711: PPUSH
49712: CALL 51491 0 3
// end ;
49716: GO 49614
49718: POP
49719: POP
// if enchidnas then
49720: LD_VAR 0 4
49724: IFFALSE 49791
// for i = 1 to enchidnas do
49726: LD_ADDR_VAR 0 11
49730: PUSH
49731: DOUBLE
49732: LD_INT 1
49734: DEC
49735: ST_TO_ADDR
49736: LD_VAR 0 4
49740: PUSH
49741: FOR_TO
49742: IFFALSE 49789
// begin hc_class = 13 ;
49744: LD_ADDR_OWVAR 28
49748: PUSH
49749: LD_INT 13
49751: ST_TO_ADDR
// hc_gallery =  ;
49752: LD_ADDR_OWVAR 33
49756: PUSH
49757: LD_STRING 
49759: ST_TO_ADDR
// animal := CreateHuman ;
49760: LD_ADDR_VAR 0 12
49764: PUSH
49765: CALL_OW 44
49769: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49770: LD_VAR 0 12
49774: PPUSH
49775: LD_VAR 0 8
49779: PPUSH
49780: LD_INT 0
49782: PPUSH
49783: CALL 51491 0 3
// end ;
49787: GO 49741
49789: POP
49790: POP
// if fishes then
49791: LD_VAR 0 7
49795: IFFALSE 49862
// for i = 1 to fishes do
49797: LD_ADDR_VAR 0 11
49801: PUSH
49802: DOUBLE
49803: LD_INT 1
49805: DEC
49806: ST_TO_ADDR
49807: LD_VAR 0 7
49811: PUSH
49812: FOR_TO
49813: IFFALSE 49860
// begin hc_class = 20 ;
49815: LD_ADDR_OWVAR 28
49819: PUSH
49820: LD_INT 20
49822: ST_TO_ADDR
// hc_gallery =  ;
49823: LD_ADDR_OWVAR 33
49827: PUSH
49828: LD_STRING 
49830: ST_TO_ADDR
// animal := CreateHuman ;
49831: LD_ADDR_VAR 0 12
49835: PUSH
49836: CALL_OW 44
49840: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49841: LD_VAR 0 12
49845: PPUSH
49846: LD_VAR 0 9
49850: PPUSH
49851: LD_INT 0
49853: PPUSH
49854: CALL 51491 0 3
// end ;
49858: GO 49812
49860: POP
49861: POP
// end ;
49862: LD_VAR 0 10
49866: RET
// export function WantHeal ( sci , unit ) ; begin
49867: LD_INT 0
49869: PPUSH
// if GetTaskList ( sci ) > 0 then
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 437
49879: PUSH
49880: LD_INT 0
49882: GREATER
49883: IFFALSE 49953
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49885: LD_VAR 0 1
49889: PPUSH
49890: CALL_OW 437
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: PUSH
49903: LD_STRING l
49905: EQUAL
49906: PUSH
49907: LD_VAR 0 1
49911: PPUSH
49912: CALL_OW 437
49916: PUSH
49917: LD_INT 1
49919: ARRAY
49920: PUSH
49921: LD_INT 4
49923: ARRAY
49924: PUSH
49925: LD_VAR 0 2
49929: EQUAL
49930: AND
49931: IFFALSE 49943
// result := true else
49933: LD_ADDR_VAR 0 3
49937: PUSH
49938: LD_INT 1
49940: ST_TO_ADDR
49941: GO 49951
// result := false ;
49943: LD_ADDR_VAR 0 3
49947: PUSH
49948: LD_INT 0
49950: ST_TO_ADDR
// end else
49951: GO 49961
// result := false ;
49953: LD_ADDR_VAR 0 3
49957: PUSH
49958: LD_INT 0
49960: ST_TO_ADDR
// end ;
49961: LD_VAR 0 3
49965: RET
// export function HealTarget ( sci ) ; begin
49966: LD_INT 0
49968: PPUSH
// if not sci then
49969: LD_VAR 0 1
49973: NOT
49974: IFFALSE 49978
// exit ;
49976: GO 50043
// result := 0 ;
49978: LD_ADDR_VAR 0 2
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
// if GetTaskList ( sci ) then
49986: LD_VAR 0 1
49990: PPUSH
49991: CALL_OW 437
49995: IFFALSE 50043
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49997: LD_VAR 0 1
50001: PPUSH
50002: CALL_OW 437
50006: PUSH
50007: LD_INT 1
50009: ARRAY
50010: PUSH
50011: LD_INT 1
50013: ARRAY
50014: PUSH
50015: LD_STRING l
50017: EQUAL
50018: IFFALSE 50043
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50020: LD_ADDR_VAR 0 2
50024: PUSH
50025: LD_VAR 0 1
50029: PPUSH
50030: CALL_OW 437
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: PUSH
50039: LD_INT 4
50041: ARRAY
50042: ST_TO_ADDR
// end ;
50043: LD_VAR 0 2
50047: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50048: LD_INT 0
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
// if not base_units then
50054: LD_VAR 0 1
50058: NOT
50059: IFFALSE 50063
// exit ;
50061: GO 50150
// result := false ;
50063: LD_ADDR_VAR 0 2
50067: PUSH
50068: LD_INT 0
50070: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50071: LD_ADDR_VAR 0 5
50075: PUSH
50076: LD_VAR 0 1
50080: PPUSH
50081: LD_INT 21
50083: PUSH
50084: LD_INT 3
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PPUSH
50091: CALL_OW 72
50095: ST_TO_ADDR
// if not tmp then
50096: LD_VAR 0 5
50100: NOT
50101: IFFALSE 50105
// exit ;
50103: GO 50150
// for i in tmp do
50105: LD_ADDR_VAR 0 3
50109: PUSH
50110: LD_VAR 0 5
50114: PUSH
50115: FOR_IN
50116: IFFALSE 50148
// begin result := EnemyInRange ( i , 22 ) ;
50118: LD_ADDR_VAR 0 2
50122: PUSH
50123: LD_VAR 0 3
50127: PPUSH
50128: LD_INT 22
50130: PPUSH
50131: CALL 47748 0 2
50135: ST_TO_ADDR
// if result then
50136: LD_VAR 0 2
50140: IFFALSE 50146
// exit ;
50142: POP
50143: POP
50144: GO 50150
// end ;
50146: GO 50115
50148: POP
50149: POP
// end ;
50150: LD_VAR 0 2
50154: RET
// export function FilterByTag ( units , tag ) ; begin
50155: LD_INT 0
50157: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50158: LD_ADDR_VAR 0 3
50162: PUSH
50163: LD_VAR 0 1
50167: PPUSH
50168: LD_INT 120
50170: PUSH
50171: LD_VAR 0 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PPUSH
50180: CALL_OW 72
50184: ST_TO_ADDR
// end ;
50185: LD_VAR 0 3
50189: RET
// export function IsDriver ( un ) ; begin
50190: LD_INT 0
50192: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50193: LD_ADDR_VAR 0 2
50197: PUSH
50198: LD_VAR 0 1
50202: PUSH
50203: LD_INT 55
50205: PUSH
50206: EMPTY
50207: LIST
50208: PPUSH
50209: CALL_OW 69
50213: IN
50214: ST_TO_ADDR
// end ;
50215: LD_VAR 0 2
50219: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50220: LD_INT 0
50222: PPUSH
50223: PPUSH
// list := [ ] ;
50224: LD_ADDR_VAR 0 5
50228: PUSH
50229: EMPTY
50230: ST_TO_ADDR
// case d of 0 :
50231: LD_VAR 0 3
50235: PUSH
50236: LD_INT 0
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50244
50242: GO 50377
50244: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50245: LD_ADDR_VAR 0 5
50249: PUSH
50250: LD_VAR 0 1
50254: PUSH
50255: LD_INT 4
50257: MINUS
50258: PUSH
50259: LD_VAR 0 2
50263: PUSH
50264: LD_INT 4
50266: MINUS
50267: PUSH
50268: LD_INT 2
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: PUSH
50276: LD_VAR 0 1
50280: PUSH
50281: LD_INT 3
50283: MINUS
50284: PUSH
50285: LD_VAR 0 2
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: LIST
50297: PUSH
50298: LD_VAR 0 1
50302: PUSH
50303: LD_INT 4
50305: PLUS
50306: PUSH
50307: LD_VAR 0 2
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: LIST
50319: PUSH
50320: LD_VAR 0 1
50324: PUSH
50325: LD_INT 3
50327: PLUS
50328: PUSH
50329: LD_VAR 0 2
50333: PUSH
50334: LD_INT 3
50336: PLUS
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: LIST
50345: PUSH
50346: LD_VAR 0 1
50350: PUSH
50351: LD_VAR 0 2
50355: PUSH
50356: LD_INT 4
50358: PLUS
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: LIST
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// end ; 1 :
50375: GO 51075
50377: LD_INT 1
50379: DOUBLE
50380: EQUAL
50381: IFTRUE 50385
50383: GO 50518
50385: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50386: LD_ADDR_VAR 0 5
50390: PUSH
50391: LD_VAR 0 1
50395: PUSH
50396: LD_VAR 0 2
50400: PUSH
50401: LD_INT 4
50403: MINUS
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: PUSH
50413: LD_VAR 0 1
50417: PUSH
50418: LD_INT 3
50420: MINUS
50421: PUSH
50422: LD_VAR 0 2
50426: PUSH
50427: LD_INT 3
50429: MINUS
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: LIST
50438: PUSH
50439: LD_VAR 0 1
50443: PUSH
50444: LD_INT 4
50446: MINUS
50447: PUSH
50448: LD_VAR 0 2
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: PUSH
50461: LD_VAR 0 1
50465: PUSH
50466: LD_VAR 0 2
50470: PUSH
50471: LD_INT 3
50473: PLUS
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: LIST
50482: PUSH
50483: LD_VAR 0 1
50487: PUSH
50488: LD_INT 4
50490: PLUS
50491: PUSH
50492: LD_VAR 0 2
50496: PUSH
50497: LD_INT 4
50499: PLUS
50500: PUSH
50501: LD_INT 5
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// end ; 2 :
50516: GO 51075
50518: LD_INT 2
50520: DOUBLE
50521: EQUAL
50522: IFTRUE 50526
50524: GO 50655
50526: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50527: LD_ADDR_VAR 0 5
50531: PUSH
50532: LD_VAR 0 1
50536: PUSH
50537: LD_VAR 0 2
50541: PUSH
50542: LD_INT 3
50544: MINUS
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: PUSH
50554: LD_VAR 0 1
50558: PUSH
50559: LD_INT 4
50561: PLUS
50562: PUSH
50563: LD_VAR 0 2
50567: PUSH
50568: LD_INT 4
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: PUSH
50576: LD_VAR 0 1
50580: PUSH
50581: LD_VAR 0 2
50585: PUSH
50586: LD_INT 4
50588: PLUS
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: PUSH
50598: LD_VAR 0 1
50602: PUSH
50603: LD_INT 3
50605: MINUS
50606: PUSH
50607: LD_VAR 0 2
50611: PUSH
50612: LD_INT 1
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: PUSH
50620: LD_VAR 0 1
50624: PUSH
50625: LD_INT 4
50627: MINUS
50628: PUSH
50629: LD_VAR 0 2
50633: PUSH
50634: LD_INT 4
50636: MINUS
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: ST_TO_ADDR
// end ; 3 :
50653: GO 51075
50655: LD_INT 3
50657: DOUBLE
50658: EQUAL
50659: IFTRUE 50663
50661: GO 50796
50663: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50664: LD_ADDR_VAR 0 5
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 3
50676: PLUS
50677: PUSH
50678: LD_VAR 0 2
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: PUSH
50691: LD_VAR 0 1
50695: PUSH
50696: LD_INT 4
50698: PLUS
50699: PUSH
50700: LD_VAR 0 2
50704: PUSH
50705: LD_INT 4
50707: PLUS
50708: PUSH
50709: LD_INT 5
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: LD_VAR 0 1
50721: PUSH
50722: LD_INT 4
50724: MINUS
50725: PUSH
50726: LD_VAR 0 2
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: LIST
50738: PUSH
50739: LD_VAR 0 1
50743: PUSH
50744: LD_VAR 0 2
50748: PUSH
50749: LD_INT 4
50751: MINUS
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: PUSH
50761: LD_VAR 0 1
50765: PUSH
50766: LD_INT 3
50768: MINUS
50769: PUSH
50770: LD_VAR 0 2
50774: PUSH
50775: LD_INT 3
50777: MINUS
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// end ; 4 :
50794: GO 51075
50796: LD_INT 4
50798: DOUBLE
50799: EQUAL
50800: IFTRUE 50804
50802: GO 50937
50804: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50805: LD_ADDR_VAR 0 5
50809: PUSH
50810: LD_VAR 0 1
50814: PUSH
50815: LD_VAR 0 2
50819: PUSH
50820: LD_INT 4
50822: PLUS
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 3
50839: PLUS
50840: PUSH
50841: LD_VAR 0 2
50845: PUSH
50846: LD_INT 3
50848: PLUS
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: PUSH
50858: LD_VAR 0 1
50862: PUSH
50863: LD_INT 4
50865: PLUS
50866: PUSH
50867: LD_VAR 0 2
50871: PUSH
50872: LD_INT 4
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: LD_VAR 0 1
50884: PUSH
50885: LD_VAR 0 2
50889: PUSH
50890: LD_INT 3
50892: MINUS
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: LIST
50901: PUSH
50902: LD_VAR 0 1
50906: PUSH
50907: LD_INT 4
50909: MINUS
50910: PUSH
50911: LD_VAR 0 2
50915: PUSH
50916: LD_INT 4
50918: MINUS
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: LIST
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// end ; 5 :
50935: GO 51075
50937: LD_INT 5
50939: DOUBLE
50940: EQUAL
50941: IFTRUE 50945
50943: GO 51074
50945: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50946: LD_ADDR_VAR 0 5
50950: PUSH
50951: LD_VAR 0 1
50955: PUSH
50956: LD_INT 4
50958: MINUS
50959: PUSH
50960: LD_VAR 0 2
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: PUSH
50973: LD_VAR 0 1
50977: PUSH
50978: LD_VAR 0 2
50982: PUSH
50983: LD_INT 4
50985: MINUS
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: PUSH
50995: LD_VAR 0 1
50999: PUSH
51000: LD_INT 4
51002: PLUS
51003: PUSH
51004: LD_VAR 0 2
51008: PUSH
51009: LD_INT 4
51011: PLUS
51012: PUSH
51013: LD_INT 5
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: LIST
51020: PUSH
51021: LD_VAR 0 1
51025: PUSH
51026: LD_INT 3
51028: PLUS
51029: PUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 4
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: LIST
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_INT 3
51055: PLUS
51056: PUSH
51057: LD_INT 0
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// end ; end ;
51072: GO 51075
51074: POP
// result := list ;
51075: LD_ADDR_VAR 0 4
51079: PUSH
51080: LD_VAR 0 5
51084: ST_TO_ADDR
// end ;
51085: LD_VAR 0 4
51089: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51090: LD_INT 0
51092: PPUSH
51093: PPUSH
51094: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51095: LD_VAR 0 1
51099: NOT
51100: PUSH
51101: LD_VAR 0 2
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: IN
51124: NOT
51125: OR
51126: IFFALSE 51130
// exit ;
51128: GO 51213
// tmp := [ ] ;
51130: LD_ADDR_VAR 0 5
51134: PUSH
51135: EMPTY
51136: ST_TO_ADDR
// for i in units do
51137: LD_ADDR_VAR 0 4
51141: PUSH
51142: LD_VAR 0 1
51146: PUSH
51147: FOR_IN
51148: IFFALSE 51182
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51150: LD_ADDR_VAR 0 5
51154: PUSH
51155: LD_VAR 0 5
51159: PPUSH
51160: LD_VAR 0 4
51164: PPUSH
51165: LD_VAR 0 2
51169: PPUSH
51170: CALL_OW 259
51174: PPUSH
51175: CALL 52586 0 2
51179: ST_TO_ADDR
51180: GO 51147
51182: POP
51183: POP
// if not tmp then
51184: LD_VAR 0 5
51188: NOT
51189: IFFALSE 51193
// exit ;
51191: GO 51213
// result := SortListByListDesc ( units , tmp ) ;
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_VAR 0 1
51202: PPUSH
51203: LD_VAR 0 5
51207: PPUSH
51208: CALL_OW 77
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 3
51217: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
// result := false ;
51223: LD_ADDR_VAR 0 3
51227: PUSH
51228: LD_INT 0
51230: ST_TO_ADDR
// if not building then
51231: LD_VAR 0 2
51235: NOT
51236: IFFALSE 51240
// exit ;
51238: GO 51378
// x := GetX ( building ) ;
51240: LD_ADDR_VAR 0 4
51244: PUSH
51245: LD_VAR 0 2
51249: PPUSH
51250: CALL_OW 250
51254: ST_TO_ADDR
// y := GetY ( building ) ;
51255: LD_ADDR_VAR 0 5
51259: PUSH
51260: LD_VAR 0 2
51264: PPUSH
51265: CALL_OW 251
51269: ST_TO_ADDR
// if not x or not y then
51270: LD_VAR 0 4
51274: NOT
51275: PUSH
51276: LD_VAR 0 5
51280: NOT
51281: OR
51282: IFFALSE 51286
// exit ;
51284: GO 51378
// if GetTaskList ( unit ) then
51286: LD_VAR 0 1
51290: PPUSH
51291: CALL_OW 437
51295: IFFALSE 51378
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51297: LD_STRING e
51299: PUSH
51300: LD_VAR 0 1
51304: PPUSH
51305: CALL_OW 437
51309: PUSH
51310: LD_INT 1
51312: ARRAY
51313: PUSH
51314: LD_INT 1
51316: ARRAY
51317: EQUAL
51318: PUSH
51319: LD_VAR 0 4
51323: PUSH
51324: LD_VAR 0 1
51328: PPUSH
51329: CALL_OW 437
51333: PUSH
51334: LD_INT 1
51336: ARRAY
51337: PUSH
51338: LD_INT 2
51340: ARRAY
51341: EQUAL
51342: AND
51343: PUSH
51344: LD_VAR 0 5
51348: PUSH
51349: LD_VAR 0 1
51353: PPUSH
51354: CALL_OW 437
51358: PUSH
51359: LD_INT 1
51361: ARRAY
51362: PUSH
51363: LD_INT 3
51365: ARRAY
51366: EQUAL
51367: AND
51368: IFFALSE 51378
// result := true end ;
51370: LD_ADDR_VAR 0 3
51374: PUSH
51375: LD_INT 1
51377: ST_TO_ADDR
// end ;
51378: LD_VAR 0 3
51382: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51383: LD_INT 0
51385: PPUSH
// result := false ;
51386: LD_ADDR_VAR 0 4
51390: PUSH
51391: LD_INT 0
51393: ST_TO_ADDR
// if GetTaskList ( unit ) then
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 437
51403: IFFALSE 51486
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51405: LD_STRING M
51407: PUSH
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 437
51417: PUSH
51418: LD_INT 1
51420: ARRAY
51421: PUSH
51422: LD_INT 1
51424: ARRAY
51425: EQUAL
51426: PUSH
51427: LD_VAR 0 2
51431: PUSH
51432: LD_VAR 0 1
51436: PPUSH
51437: CALL_OW 437
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: PUSH
51446: LD_INT 2
51448: ARRAY
51449: EQUAL
51450: AND
51451: PUSH
51452: LD_VAR 0 3
51456: PUSH
51457: LD_VAR 0 1
51461: PPUSH
51462: CALL_OW 437
51466: PUSH
51467: LD_INT 1
51469: ARRAY
51470: PUSH
51471: LD_INT 3
51473: ARRAY
51474: EQUAL
51475: AND
51476: IFFALSE 51486
// result := true ;
51478: LD_ADDR_VAR 0 4
51482: PUSH
51483: LD_INT 1
51485: ST_TO_ADDR
// end ; end ;
51486: LD_VAR 0 4
51490: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51491: LD_INT 0
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
// if not unit or not area then
51497: LD_VAR 0 1
51501: NOT
51502: PUSH
51503: LD_VAR 0 2
51507: NOT
51508: OR
51509: IFFALSE 51513
// exit ;
51511: GO 51689
// tmp := AreaToList ( area , i ) ;
51513: LD_ADDR_VAR 0 6
51517: PUSH
51518: LD_VAR 0 2
51522: PPUSH
51523: LD_VAR 0 5
51527: PPUSH
51528: CALL_OW 517
51532: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51533: LD_ADDR_VAR 0 5
51537: PUSH
51538: DOUBLE
51539: LD_INT 1
51541: DEC
51542: ST_TO_ADDR
51543: LD_VAR 0 6
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PUSH
51552: FOR_TO
51553: IFFALSE 51687
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51555: LD_ADDR_VAR 0 7
51559: PUSH
51560: LD_VAR 0 6
51564: PUSH
51565: LD_INT 1
51567: ARRAY
51568: PUSH
51569: LD_VAR 0 5
51573: ARRAY
51574: PUSH
51575: LD_VAR 0 6
51579: PUSH
51580: LD_INT 2
51582: ARRAY
51583: PUSH
51584: LD_VAR 0 5
51588: ARRAY
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51594: LD_INT 92
51596: PUSH
51597: LD_VAR 0 7
51601: PUSH
51602: LD_INT 1
51604: ARRAY
51605: PUSH
51606: LD_VAR 0 7
51610: PUSH
51611: LD_INT 2
51613: ARRAY
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: PPUSH
51624: CALL_OW 69
51628: PUSH
51629: LD_INT 0
51631: EQUAL
51632: IFFALSE 51685
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51634: LD_VAR 0 1
51638: PPUSH
51639: LD_VAR 0 7
51643: PUSH
51644: LD_INT 1
51646: ARRAY
51647: PPUSH
51648: LD_VAR 0 7
51652: PUSH
51653: LD_INT 2
51655: ARRAY
51656: PPUSH
51657: LD_VAR 0 3
51661: PPUSH
51662: CALL_OW 48
// result := IsPlaced ( unit ) ;
51666: LD_ADDR_VAR 0 4
51670: PUSH
51671: LD_VAR 0 1
51675: PPUSH
51676: CALL_OW 305
51680: ST_TO_ADDR
// exit ;
51681: POP
51682: POP
51683: GO 51689
// end ; end ;
51685: GO 51552
51687: POP
51688: POP
// end ;
51689: LD_VAR 0 4
51693: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51694: LD_INT 0
51696: PPUSH
51697: PPUSH
51698: PPUSH
// if not side or side > 8 then
51699: LD_VAR 0 1
51703: NOT
51704: PUSH
51705: LD_VAR 0 1
51709: PUSH
51710: LD_INT 8
51712: GREATER
51713: OR
51714: IFFALSE 51718
// exit ;
51716: GO 51905
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51718: LD_ADDR_VAR 0 4
51722: PUSH
51723: LD_INT 22
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 21
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PPUSH
51749: CALL_OW 69
51753: ST_TO_ADDR
// if not tmp then
51754: LD_VAR 0 4
51758: NOT
51759: IFFALSE 51763
// exit ;
51761: GO 51905
// enable_addtolog := true ;
51763: LD_ADDR_OWVAR 81
51767: PUSH
51768: LD_INT 1
51770: ST_TO_ADDR
// AddToLog ( [ ) ;
51771: LD_STRING [
51773: PPUSH
51774: CALL_OW 561
// for i in tmp do
51778: LD_ADDR_VAR 0 3
51782: PUSH
51783: LD_VAR 0 4
51787: PUSH
51788: FOR_IN
51789: IFFALSE 51896
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51791: LD_STRING [
51793: PUSH
51794: LD_VAR 0 3
51798: PPUSH
51799: CALL_OW 266
51803: STR
51804: PUSH
51805: LD_STRING , 
51807: STR
51808: PUSH
51809: LD_VAR 0 3
51813: PPUSH
51814: CALL_OW 250
51818: STR
51819: PUSH
51820: LD_STRING , 
51822: STR
51823: PUSH
51824: LD_VAR 0 3
51828: PPUSH
51829: CALL_OW 251
51833: STR
51834: PUSH
51835: LD_STRING , 
51837: STR
51838: PUSH
51839: LD_VAR 0 3
51843: PPUSH
51844: CALL_OW 254
51848: STR
51849: PUSH
51850: LD_STRING , 
51852: STR
51853: PUSH
51854: LD_VAR 0 3
51858: PPUSH
51859: LD_INT 1
51861: PPUSH
51862: CALL_OW 268
51866: STR
51867: PUSH
51868: LD_STRING , 
51870: STR
51871: PUSH
51872: LD_VAR 0 3
51876: PPUSH
51877: LD_INT 2
51879: PPUSH
51880: CALL_OW 268
51884: STR
51885: PUSH
51886: LD_STRING ],
51888: STR
51889: PPUSH
51890: CALL_OW 561
// end ;
51894: GO 51788
51896: POP
51897: POP
// AddToLog ( ]; ) ;
51898: LD_STRING ];
51900: PPUSH
51901: CALL_OW 561
// end ;
51905: LD_VAR 0 2
51909: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51910: LD_INT 0
51912: PPUSH
51913: PPUSH
51914: PPUSH
51915: PPUSH
51916: PPUSH
// if not area or not rate or not max then
51917: LD_VAR 0 1
51921: NOT
51922: PUSH
51923: LD_VAR 0 2
51927: NOT
51928: OR
51929: PUSH
51930: LD_VAR 0 4
51934: NOT
51935: OR
51936: IFFALSE 51940
// exit ;
51938: GO 52129
// while 1 do
51940: LD_INT 1
51942: IFFALSE 52129
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51944: LD_ADDR_VAR 0 9
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: LD_INT 1
51956: PPUSH
51957: CALL_OW 287
51961: PUSH
51962: LD_INT 10
51964: MUL
51965: ST_TO_ADDR
// r := rate / 10 ;
51966: LD_ADDR_VAR 0 7
51970: PUSH
51971: LD_VAR 0 2
51975: PUSH
51976: LD_INT 10
51978: DIVREAL
51979: ST_TO_ADDR
// time := 1 1$00 ;
51980: LD_ADDR_VAR 0 8
51984: PUSH
51985: LD_INT 2100
51987: ST_TO_ADDR
// if amount < min then
51988: LD_VAR 0 9
51992: PUSH
51993: LD_VAR 0 3
51997: LESS
51998: IFFALSE 52016
// r := r * 2 else
52000: LD_ADDR_VAR 0 7
52004: PUSH
52005: LD_VAR 0 7
52009: PUSH
52010: LD_INT 2
52012: MUL
52013: ST_TO_ADDR
52014: GO 52042
// if amount > max then
52016: LD_VAR 0 9
52020: PUSH
52021: LD_VAR 0 4
52025: GREATER
52026: IFFALSE 52042
// r := r / 2 ;
52028: LD_ADDR_VAR 0 7
52032: PUSH
52033: LD_VAR 0 7
52037: PUSH
52038: LD_INT 2
52040: DIVREAL
52041: ST_TO_ADDR
// time := time / r ;
52042: LD_ADDR_VAR 0 8
52046: PUSH
52047: LD_VAR 0 8
52051: PUSH
52052: LD_VAR 0 7
52056: DIVREAL
52057: ST_TO_ADDR
// if time < 0 then
52058: LD_VAR 0 8
52062: PUSH
52063: LD_INT 0
52065: LESS
52066: IFFALSE 52083
// time := time * - 1 ;
52068: LD_ADDR_VAR 0 8
52072: PUSH
52073: LD_VAR 0 8
52077: PUSH
52078: LD_INT 1
52080: NEG
52081: MUL
52082: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52083: LD_VAR 0 8
52087: PUSH
52088: LD_INT 35
52090: PPUSH
52091: LD_INT 875
52093: PPUSH
52094: CALL_OW 12
52098: PLUS
52099: PPUSH
52100: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52104: LD_INT 1
52106: PPUSH
52107: LD_INT 5
52109: PPUSH
52110: CALL_OW 12
52114: PPUSH
52115: LD_VAR 0 1
52119: PPUSH
52120: LD_INT 1
52122: PPUSH
52123: CALL_OW 55
// end ;
52127: GO 51940
// end ;
52129: LD_VAR 0 5
52133: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52134: LD_INT 0
52136: PPUSH
52137: PPUSH
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
52143: PPUSH
// if not turrets or not factories then
52144: LD_VAR 0 1
52148: NOT
52149: PUSH
52150: LD_VAR 0 2
52154: NOT
52155: OR
52156: IFFALSE 52160
// exit ;
52158: GO 52467
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52160: LD_ADDR_VAR 0 10
52164: PUSH
52165: LD_INT 5
52167: PUSH
52168: LD_INT 6
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 5
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 24
52202: PUSH
52203: LD_INT 25
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 23
52212: PUSH
52213: LD_INT 27
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 42
52226: PUSH
52227: LD_INT 43
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 44
52236: PUSH
52237: LD_INT 46
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 45
52246: PUSH
52247: LD_INT 47
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: LIST
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// result := [ ] ;
52264: LD_ADDR_VAR 0 3
52268: PUSH
52269: EMPTY
52270: ST_TO_ADDR
// for i in turrets do
52271: LD_ADDR_VAR 0 4
52275: PUSH
52276: LD_VAR 0 1
52280: PUSH
52281: FOR_IN
52282: IFFALSE 52465
// begin nat := GetNation ( i ) ;
52284: LD_ADDR_VAR 0 7
52288: PUSH
52289: LD_VAR 0 4
52293: PPUSH
52294: CALL_OW 248
52298: ST_TO_ADDR
// weapon := 0 ;
52299: LD_ADDR_VAR 0 8
52303: PUSH
52304: LD_INT 0
52306: ST_TO_ADDR
// if not nat then
52307: LD_VAR 0 7
52311: NOT
52312: IFFALSE 52316
// continue ;
52314: GO 52281
// for j in list [ nat ] do
52316: LD_ADDR_VAR 0 5
52320: PUSH
52321: LD_VAR 0 10
52325: PUSH
52326: LD_VAR 0 7
52330: ARRAY
52331: PUSH
52332: FOR_IN
52333: IFFALSE 52374
// if GetBWeapon ( i ) = j [ 1 ] then
52335: LD_VAR 0 4
52339: PPUSH
52340: CALL_OW 269
52344: PUSH
52345: LD_VAR 0 5
52349: PUSH
52350: LD_INT 1
52352: ARRAY
52353: EQUAL
52354: IFFALSE 52372
// begin weapon := j [ 2 ] ;
52356: LD_ADDR_VAR 0 8
52360: PUSH
52361: LD_VAR 0 5
52365: PUSH
52366: LD_INT 2
52368: ARRAY
52369: ST_TO_ADDR
// break ;
52370: GO 52374
// end ;
52372: GO 52332
52374: POP
52375: POP
// if not weapon then
52376: LD_VAR 0 8
52380: NOT
52381: IFFALSE 52385
// continue ;
52383: GO 52281
// for k in factories do
52385: LD_ADDR_VAR 0 6
52389: PUSH
52390: LD_VAR 0 2
52394: PUSH
52395: FOR_IN
52396: IFFALSE 52461
// begin weapons := AvailableWeaponList ( k ) ;
52398: LD_ADDR_VAR 0 9
52402: PUSH
52403: LD_VAR 0 6
52407: PPUSH
52408: CALL_OW 478
52412: ST_TO_ADDR
// if not weapons then
52413: LD_VAR 0 9
52417: NOT
52418: IFFALSE 52422
// continue ;
52420: GO 52395
// if weapon in weapons then
52422: LD_VAR 0 8
52426: PUSH
52427: LD_VAR 0 9
52431: IN
52432: IFFALSE 52459
// begin result := [ i , weapon ] ;
52434: LD_ADDR_VAR 0 3
52438: PUSH
52439: LD_VAR 0 4
52443: PUSH
52444: LD_VAR 0 8
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// exit ;
52453: POP
52454: POP
52455: POP
52456: POP
52457: GO 52467
// end ; end ;
52459: GO 52395
52461: POP
52462: POP
// end ;
52463: GO 52281
52465: POP
52466: POP
// end ;
52467: LD_VAR 0 3
52471: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52472: LD_INT 0
52474: PPUSH
// if not side or side > 8 then
52475: LD_VAR 0 3
52479: NOT
52480: PUSH
52481: LD_VAR 0 3
52485: PUSH
52486: LD_INT 8
52488: GREATER
52489: OR
52490: IFFALSE 52494
// exit ;
52492: GO 52553
// if not range then
52494: LD_VAR 0 4
52498: NOT
52499: IFFALSE 52510
// range := - 12 ;
52501: LD_ADDR_VAR 0 4
52505: PUSH
52506: LD_INT 12
52508: NEG
52509: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 2
52519: PPUSH
52520: LD_VAR 0 3
52524: PPUSH
52525: LD_VAR 0 4
52529: PPUSH
52530: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52534: LD_VAR 0 1
52538: PPUSH
52539: LD_VAR 0 2
52543: PPUSH
52544: LD_VAR 0 3
52548: PPUSH
52549: CALL_OW 331
// end ;
52553: LD_VAR 0 5
52557: RET
// export function Video ( mode ) ; begin
52558: LD_INT 0
52560: PPUSH
// ingame_video = mode ;
52561: LD_ADDR_OWVAR 52
52565: PUSH
52566: LD_VAR 0 1
52570: ST_TO_ADDR
// interface_hidden = mode ;
52571: LD_ADDR_OWVAR 54
52575: PUSH
52576: LD_VAR 0 1
52580: ST_TO_ADDR
// end ;
52581: LD_VAR 0 2
52585: RET
// export function Join ( array , element ) ; begin
52586: LD_INT 0
52588: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52589: LD_ADDR_VAR 0 3
52593: PUSH
52594: LD_VAR 0 1
52598: PPUSH
52599: LD_VAR 0 1
52603: PUSH
52604: LD_INT 1
52606: PLUS
52607: PPUSH
52608: LD_VAR 0 2
52612: PPUSH
52613: CALL_OW 1
52617: ST_TO_ADDR
// end ;
52618: LD_VAR 0 3
52622: RET
// export function JoinUnion ( array , element ) ; begin
52623: LD_INT 0
52625: PPUSH
// result := array union element ;
52626: LD_ADDR_VAR 0 3
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_VAR 0 2
52640: UNION
52641: ST_TO_ADDR
// end ;
52642: LD_VAR 0 3
52646: RET
// export function GetBehemoths ( side ) ; begin
52647: LD_INT 0
52649: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52650: LD_ADDR_VAR 0 2
52654: PUSH
52655: LD_INT 22
52657: PUSH
52658: LD_VAR 0 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 31
52669: PUSH
52670: LD_INT 25
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PPUSH
52681: CALL_OW 69
52685: ST_TO_ADDR
// end ;
52686: LD_VAR 0 2
52690: RET
// export function Shuffle ( array ) ; var i , index ; begin
52691: LD_INT 0
52693: PPUSH
52694: PPUSH
52695: PPUSH
// result := [ ] ;
52696: LD_ADDR_VAR 0 2
52700: PUSH
52701: EMPTY
52702: ST_TO_ADDR
// if not array then
52703: LD_VAR 0 1
52707: NOT
52708: IFFALSE 52712
// exit ;
52710: GO 52811
// Randomize ;
52712: CALL_OW 10
// for i = array downto 1 do
52716: LD_ADDR_VAR 0 3
52720: PUSH
52721: DOUBLE
52722: LD_VAR 0 1
52726: INC
52727: ST_TO_ADDR
52728: LD_INT 1
52730: PUSH
52731: FOR_DOWNTO
52732: IFFALSE 52809
// begin index := rand ( 1 , array ) ;
52734: LD_ADDR_VAR 0 4
52738: PUSH
52739: LD_INT 1
52741: PPUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 12
52751: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52752: LD_ADDR_VAR 0 2
52756: PUSH
52757: LD_VAR 0 2
52761: PPUSH
52762: LD_VAR 0 2
52766: PUSH
52767: LD_INT 1
52769: PLUS
52770: PPUSH
52771: LD_VAR 0 1
52775: PUSH
52776: LD_VAR 0 4
52780: ARRAY
52781: PPUSH
52782: CALL_OW 2
52786: ST_TO_ADDR
// array := Delete ( array , index ) ;
52787: LD_ADDR_VAR 0 1
52791: PUSH
52792: LD_VAR 0 1
52796: PPUSH
52797: LD_VAR 0 4
52801: PPUSH
52802: CALL_OW 3
52806: ST_TO_ADDR
// end ;
52807: GO 52731
52809: POP
52810: POP
// end ;
52811: LD_VAR 0 2
52815: RET
// export function GetBaseMaterials ( base ) ; begin
52816: LD_INT 0
52818: PPUSH
// result := [ 0 , 0 , 0 ] ;
52819: LD_ADDR_VAR 0 2
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: ST_TO_ADDR
// if not base then
52838: LD_VAR 0 1
52842: NOT
52843: IFFALSE 52847
// exit ;
52845: GO 52896
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52847: LD_ADDR_VAR 0 2
52851: PUSH
52852: LD_VAR 0 1
52856: PPUSH
52857: LD_INT 1
52859: PPUSH
52860: CALL_OW 275
52864: PUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: LD_INT 2
52872: PPUSH
52873: CALL_OW 275
52877: PUSH
52878: LD_VAR 0 1
52882: PPUSH
52883: LD_INT 3
52885: PPUSH
52886: CALL_OW 275
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: ST_TO_ADDR
// end ;
52896: LD_VAR 0 2
52900: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52901: LD_INT 0
52903: PPUSH
52904: PPUSH
// result := array ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 1
52914: ST_TO_ADDR
// if size >= result then
52915: LD_VAR 0 2
52919: PUSH
52920: LD_VAR 0 3
52924: GREATEREQUAL
52925: IFFALSE 52929
// exit ;
52927: GO 52979
// if size then
52929: LD_VAR 0 2
52933: IFFALSE 52979
// for i := array downto size do
52935: LD_ADDR_VAR 0 4
52939: PUSH
52940: DOUBLE
52941: LD_VAR 0 1
52945: INC
52946: ST_TO_ADDR
52947: LD_VAR 0 2
52951: PUSH
52952: FOR_DOWNTO
52953: IFFALSE 52977
// result := Delete ( result , result ) ;
52955: LD_ADDR_VAR 0 3
52959: PUSH
52960: LD_VAR 0 3
52964: PPUSH
52965: LD_VAR 0 3
52969: PPUSH
52970: CALL_OW 3
52974: ST_TO_ADDR
52975: GO 52952
52977: POP
52978: POP
// end ;
52979: LD_VAR 0 3
52983: RET
// export function ComExit ( unit ) ; var tmp ; begin
52984: LD_INT 0
52986: PPUSH
52987: PPUSH
// if not IsInUnit ( unit ) then
52988: LD_VAR 0 1
52992: PPUSH
52993: CALL_OW 310
52997: NOT
52998: IFFALSE 53002
// exit ;
53000: GO 53062
// tmp := IsInUnit ( unit ) ;
53002: LD_ADDR_VAR 0 3
53006: PUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: CALL_OW 310
53016: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53017: LD_VAR 0 3
53021: PPUSH
53022: CALL_OW 247
53026: PUSH
53027: LD_INT 2
53029: EQUAL
53030: IFFALSE 53043
// ComExitVehicle ( unit ) else
53032: LD_VAR 0 1
53036: PPUSH
53037: CALL_OW 121
53041: GO 53052
// ComExitBuilding ( unit ) ;
53043: LD_VAR 0 1
53047: PPUSH
53048: CALL_OW 122
// result := tmp ;
53052: LD_ADDR_VAR 0 2
53056: PUSH
53057: LD_VAR 0 3
53061: ST_TO_ADDR
// end ;
53062: LD_VAR 0 2
53066: RET
// export function ComExitAll ( units ) ; var i ; begin
53067: LD_INT 0
53069: PPUSH
53070: PPUSH
// if not units then
53071: LD_VAR 0 1
53075: NOT
53076: IFFALSE 53080
// exit ;
53078: GO 53106
// for i in units do
53080: LD_ADDR_VAR 0 3
53084: PUSH
53085: LD_VAR 0 1
53089: PUSH
53090: FOR_IN
53091: IFFALSE 53104
// ComExit ( i ) ;
53093: LD_VAR 0 3
53097: PPUSH
53098: CALL 52984 0 1
53102: GO 53090
53104: POP
53105: POP
// end ;
53106: LD_VAR 0 2
53110: RET
// export function ResetHc ; begin
53111: LD_INT 0
53113: PPUSH
// InitHc ;
53114: CALL_OW 19
// hc_importance := 0 ;
53118: LD_ADDR_OWVAR 32
53122: PUSH
53123: LD_INT 0
53125: ST_TO_ADDR
// end ;
53126: LD_VAR 0 1
53130: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53131: LD_INT 0
53133: PPUSH
53134: PPUSH
53135: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53136: LD_ADDR_VAR 0 6
53140: PUSH
53141: LD_VAR 0 1
53145: PUSH
53146: LD_VAR 0 3
53150: PLUS
53151: PUSH
53152: LD_INT 2
53154: DIV
53155: ST_TO_ADDR
// if _x < 0 then
53156: LD_VAR 0 6
53160: PUSH
53161: LD_INT 0
53163: LESS
53164: IFFALSE 53181
// _x := _x * - 1 ;
53166: LD_ADDR_VAR 0 6
53170: PUSH
53171: LD_VAR 0 6
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: MUL
53180: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53181: LD_ADDR_VAR 0 7
53185: PUSH
53186: LD_VAR 0 2
53190: PUSH
53191: LD_VAR 0 4
53195: PLUS
53196: PUSH
53197: LD_INT 2
53199: DIV
53200: ST_TO_ADDR
// if _y < 0 then
53201: LD_VAR 0 7
53205: PUSH
53206: LD_INT 0
53208: LESS
53209: IFFALSE 53226
// _y := _y * - 1 ;
53211: LD_ADDR_VAR 0 7
53215: PUSH
53216: LD_VAR 0 7
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: MUL
53225: ST_TO_ADDR
// result := [ _x , _y ] ;
53226: LD_ADDR_VAR 0 5
53230: PUSH
53231: LD_VAR 0 6
53235: PUSH
53236: LD_VAR 0 7
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: ST_TO_ADDR
// end ;
53245: LD_VAR 0 5
53249: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53250: LD_INT 0
53252: PPUSH
53253: PPUSH
53254: PPUSH
53255: PPUSH
// task := GetTaskList ( unit ) ;
53256: LD_ADDR_VAR 0 7
53260: PUSH
53261: LD_VAR 0 1
53265: PPUSH
53266: CALL_OW 437
53270: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53271: LD_VAR 0 7
53275: NOT
53276: PUSH
53277: LD_VAR 0 1
53281: PPUSH
53282: LD_VAR 0 2
53286: PPUSH
53287: CALL_OW 308
53291: NOT
53292: AND
53293: IFFALSE 53297
// exit ;
53295: GO 53415
// if IsInArea ( unit , area ) then
53297: LD_VAR 0 1
53301: PPUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: CALL_OW 308
53311: IFFALSE 53329
// begin ComMoveToArea ( unit , goAway ) ;
53313: LD_VAR 0 1
53317: PPUSH
53318: LD_VAR 0 3
53322: PPUSH
53323: CALL_OW 113
// exit ;
53327: GO 53415
// end ; if task [ 1 ] [ 1 ] <> M then
53329: LD_VAR 0 7
53333: PUSH
53334: LD_INT 1
53336: ARRAY
53337: PUSH
53338: LD_INT 1
53340: ARRAY
53341: PUSH
53342: LD_STRING M
53344: NONEQUAL
53345: IFFALSE 53349
// exit ;
53347: GO 53415
// x := task [ 1 ] [ 2 ] ;
53349: LD_ADDR_VAR 0 5
53353: PUSH
53354: LD_VAR 0 7
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PUSH
53363: LD_INT 2
53365: ARRAY
53366: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53367: LD_ADDR_VAR 0 6
53371: PUSH
53372: LD_VAR 0 7
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PUSH
53381: LD_INT 3
53383: ARRAY
53384: ST_TO_ADDR
// if InArea ( x , y , area ) then
53385: LD_VAR 0 5
53389: PPUSH
53390: LD_VAR 0 6
53394: PPUSH
53395: LD_VAR 0 2
53399: PPUSH
53400: CALL_OW 309
53404: IFFALSE 53415
// ComStop ( unit ) ;
53406: LD_VAR 0 1
53410: PPUSH
53411: CALL_OW 141
// end ;
53415: LD_VAR 0 4
53419: RET
// export function Abs ( value ) ; begin
53420: LD_INT 0
53422: PPUSH
// result := value ;
53423: LD_ADDR_VAR 0 2
53427: PUSH
53428: LD_VAR 0 1
53432: ST_TO_ADDR
// if value < 0 then
53433: LD_VAR 0 1
53437: PUSH
53438: LD_INT 0
53440: LESS
53441: IFFALSE 53458
// result := value * - 1 ;
53443: LD_ADDR_VAR 0 2
53447: PUSH
53448: LD_VAR 0 1
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: MUL
53457: ST_TO_ADDR
// end ;
53458: LD_VAR 0 2
53462: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53463: LD_INT 0
53465: PPUSH
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
53472: PPUSH
// if not unit or not building then
53473: LD_VAR 0 1
53477: NOT
53478: PUSH
53479: LD_VAR 0 2
53483: NOT
53484: OR
53485: IFFALSE 53489
// exit ;
53487: GO 53715
// x := GetX ( building ) ;
53489: LD_ADDR_VAR 0 4
53493: PUSH
53494: LD_VAR 0 2
53498: PPUSH
53499: CALL_OW 250
53503: ST_TO_ADDR
// y := GetY ( building ) ;
53504: LD_ADDR_VAR 0 6
53508: PUSH
53509: LD_VAR 0 2
53513: PPUSH
53514: CALL_OW 251
53518: ST_TO_ADDR
// d := GetDir ( building ) ;
53519: LD_ADDR_VAR 0 8
53523: PUSH
53524: LD_VAR 0 2
53528: PPUSH
53529: CALL_OW 254
53533: ST_TO_ADDR
// r := 4 ;
53534: LD_ADDR_VAR 0 9
53538: PUSH
53539: LD_INT 4
53541: ST_TO_ADDR
// for i := 1 to 5 do
53542: LD_ADDR_VAR 0 10
53546: PUSH
53547: DOUBLE
53548: LD_INT 1
53550: DEC
53551: ST_TO_ADDR
53552: LD_INT 5
53554: PUSH
53555: FOR_TO
53556: IFFALSE 53713
// begin _x := ShiftX ( x , d , r + i ) ;
53558: LD_ADDR_VAR 0 5
53562: PUSH
53563: LD_VAR 0 4
53567: PPUSH
53568: LD_VAR 0 8
53572: PPUSH
53573: LD_VAR 0 9
53577: PUSH
53578: LD_VAR 0 10
53582: PLUS
53583: PPUSH
53584: CALL_OW 272
53588: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53589: LD_ADDR_VAR 0 7
53593: PUSH
53594: LD_VAR 0 6
53598: PPUSH
53599: LD_VAR 0 8
53603: PPUSH
53604: LD_VAR 0 9
53608: PUSH
53609: LD_VAR 0 10
53613: PLUS
53614: PPUSH
53615: CALL_OW 273
53619: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53620: LD_VAR 0 5
53624: PPUSH
53625: LD_VAR 0 7
53629: PPUSH
53630: CALL_OW 488
53634: PUSH
53635: LD_VAR 0 5
53639: PPUSH
53640: LD_VAR 0 7
53644: PPUSH
53645: CALL_OW 428
53649: PPUSH
53650: CALL_OW 247
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: IN
53665: NOT
53666: AND
53667: IFFALSE 53711
// begin ComMoveXY ( unit , _x , _y ) ;
53669: LD_VAR 0 1
53673: PPUSH
53674: LD_VAR 0 5
53678: PPUSH
53679: LD_VAR 0 7
53683: PPUSH
53684: CALL_OW 111
// result := [ _x , _y ] ;
53688: LD_ADDR_VAR 0 3
53692: PUSH
53693: LD_VAR 0 5
53697: PUSH
53698: LD_VAR 0 7
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: ST_TO_ADDR
// exit ;
53707: POP
53708: POP
53709: GO 53715
// end ; end ;
53711: GO 53555
53713: POP
53714: POP
// end ;
53715: LD_VAR 0 3
53719: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53720: LD_INT 0
53722: PPUSH
53723: PPUSH
53724: PPUSH
// result := 0 ;
53725: LD_ADDR_VAR 0 3
53729: PUSH
53730: LD_INT 0
53732: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53733: LD_VAR 0 1
53737: PUSH
53738: LD_INT 0
53740: LESS
53741: PUSH
53742: LD_VAR 0 1
53746: PUSH
53747: LD_INT 8
53749: GREATER
53750: OR
53751: PUSH
53752: LD_VAR 0 2
53756: PUSH
53757: LD_INT 0
53759: LESS
53760: OR
53761: PUSH
53762: LD_VAR 0 2
53766: PUSH
53767: LD_INT 8
53769: GREATER
53770: OR
53771: IFFALSE 53775
// exit ;
53773: GO 53850
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53775: LD_ADDR_VAR 0 4
53779: PUSH
53780: LD_INT 22
53782: PUSH
53783: LD_VAR 0 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PPUSH
53792: CALL_OW 69
53796: PUSH
53797: FOR_IN
53798: IFFALSE 53848
// begin un := UnitShoot ( i ) ;
53800: LD_ADDR_VAR 0 5
53804: PUSH
53805: LD_VAR 0 4
53809: PPUSH
53810: CALL_OW 504
53814: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53815: LD_VAR 0 5
53819: PPUSH
53820: CALL_OW 255
53824: PUSH
53825: LD_VAR 0 1
53829: EQUAL
53830: IFFALSE 53846
// begin result := un ;
53832: LD_ADDR_VAR 0 3
53836: PUSH
53837: LD_VAR 0 5
53841: ST_TO_ADDR
// exit ;
53842: POP
53843: POP
53844: GO 53850
// end ; end ;
53846: GO 53797
53848: POP
53849: POP
// end ;
53850: LD_VAR 0 3
53854: RET
// export function GetCargoBay ( units ) ; begin
53855: LD_INT 0
53857: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53858: LD_ADDR_VAR 0 2
53862: PUSH
53863: LD_VAR 0 1
53867: PPUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 34
53873: PUSH
53874: LD_INT 12
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 34
53883: PUSH
53884: LD_INT 51
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 34
53893: PUSH
53894: LD_INT 32
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 34
53903: PUSH
53904: LD_INT 89
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: PPUSH
53918: CALL_OW 72
53922: ST_TO_ADDR
// end ;
53923: LD_VAR 0 2
53927: RET
// export function Negate ( value ) ; begin
53928: LD_INT 0
53930: PPUSH
// result := not value ;
53931: LD_ADDR_VAR 0 2
53935: PUSH
53936: LD_VAR 0 1
53940: NOT
53941: ST_TO_ADDR
// end ;
53942: LD_VAR 0 2
53946: RET
// export function Inc ( value ) ; begin
53947: LD_INT 0
53949: PPUSH
// result := value + 1 ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_VAR 0 1
53959: PUSH
53960: LD_INT 1
53962: PLUS
53963: ST_TO_ADDR
// end ;
53964: LD_VAR 0 2
53968: RET
// export function Dec ( value ) ; begin
53969: LD_INT 0
53971: PPUSH
// result := value - 1 ;
53972: LD_ADDR_VAR 0 2
53976: PUSH
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 1
53984: MINUS
53985: ST_TO_ADDR
// end ;
53986: LD_VAR 0 2
53990: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53991: LD_INT 0
53993: PPUSH
53994: PPUSH
53995: PPUSH
53996: PPUSH
53997: PPUSH
53998: PPUSH
53999: PPUSH
54000: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54001: LD_VAR 0 1
54005: PPUSH
54006: LD_VAR 0 2
54010: PPUSH
54011: CALL_OW 488
54015: NOT
54016: PUSH
54017: LD_VAR 0 3
54021: PPUSH
54022: LD_VAR 0 4
54026: PPUSH
54027: CALL_OW 488
54031: NOT
54032: OR
54033: IFFALSE 54046
// begin result := - 1 ;
54035: LD_ADDR_VAR 0 5
54039: PUSH
54040: LD_INT 1
54042: NEG
54043: ST_TO_ADDR
// exit ;
54044: GO 54281
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54046: LD_ADDR_VAR 0 12
54050: PUSH
54051: LD_VAR 0 1
54055: PPUSH
54056: LD_VAR 0 2
54060: PPUSH
54061: LD_VAR 0 3
54065: PPUSH
54066: LD_VAR 0 4
54070: PPUSH
54071: CALL 53131 0 4
54075: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54076: LD_ADDR_VAR 0 11
54080: PUSH
54081: LD_VAR 0 1
54085: PPUSH
54086: LD_VAR 0 2
54090: PPUSH
54091: LD_VAR 0 12
54095: PUSH
54096: LD_INT 1
54098: ARRAY
54099: PPUSH
54100: LD_VAR 0 12
54104: PUSH
54105: LD_INT 2
54107: ARRAY
54108: PPUSH
54109: CALL_OW 298
54113: ST_TO_ADDR
// distance := 9999 ;
54114: LD_ADDR_VAR 0 10
54118: PUSH
54119: LD_INT 9999
54121: ST_TO_ADDR
// for i := 0 to 5 do
54122: LD_ADDR_VAR 0 6
54126: PUSH
54127: DOUBLE
54128: LD_INT 0
54130: DEC
54131: ST_TO_ADDR
54132: LD_INT 5
54134: PUSH
54135: FOR_TO
54136: IFFALSE 54279
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54138: LD_ADDR_VAR 0 7
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: LD_VAR 0 6
54152: PPUSH
54153: LD_VAR 0 11
54157: PPUSH
54158: CALL_OW 272
54162: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54163: LD_ADDR_VAR 0 8
54167: PUSH
54168: LD_VAR 0 2
54172: PPUSH
54173: LD_VAR 0 6
54177: PPUSH
54178: LD_VAR 0 11
54182: PPUSH
54183: CALL_OW 273
54187: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54188: LD_VAR 0 7
54192: PPUSH
54193: LD_VAR 0 8
54197: PPUSH
54198: CALL_OW 488
54202: NOT
54203: IFFALSE 54207
// continue ;
54205: GO 54135
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54207: LD_ADDR_VAR 0 9
54211: PUSH
54212: LD_VAR 0 12
54216: PUSH
54217: LD_INT 1
54219: ARRAY
54220: PPUSH
54221: LD_VAR 0 12
54225: PUSH
54226: LD_INT 2
54228: ARRAY
54229: PPUSH
54230: LD_VAR 0 7
54234: PPUSH
54235: LD_VAR 0 8
54239: PPUSH
54240: CALL_OW 298
54244: ST_TO_ADDR
// if tmp < distance then
54245: LD_VAR 0 9
54249: PUSH
54250: LD_VAR 0 10
54254: LESS
54255: IFFALSE 54277
// begin result := i ;
54257: LD_ADDR_VAR 0 5
54261: PUSH
54262: LD_VAR 0 6
54266: ST_TO_ADDR
// distance := tmp ;
54267: LD_ADDR_VAR 0 10
54271: PUSH
54272: LD_VAR 0 9
54276: ST_TO_ADDR
// end ; end ;
54277: GO 54135
54279: POP
54280: POP
// end ;
54281: LD_VAR 0 5
54285: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54286: LD_INT 0
54288: PPUSH
54289: PPUSH
// if not driver or not IsInUnit ( driver ) then
54290: LD_VAR 0 1
54294: NOT
54295: PUSH
54296: LD_VAR 0 1
54300: PPUSH
54301: CALL_OW 310
54305: NOT
54306: OR
54307: IFFALSE 54311
// exit ;
54309: GO 54401
// vehicle := IsInUnit ( driver ) ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_VAR 0 1
54320: PPUSH
54321: CALL_OW 310
54325: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54326: LD_VAR 0 1
54330: PPUSH
54331: LD_STRING \
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: PUSH
54361: LD_STRING E
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_VAR 0 3
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PPUSH
54397: CALL_OW 446
// end ;
54401: LD_VAR 0 2
54405: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
// if not driver or not IsInUnit ( driver ) then
54410: LD_VAR 0 1
54414: NOT
54415: PUSH
54416: LD_VAR 0 1
54420: PPUSH
54421: CALL_OW 310
54425: NOT
54426: OR
54427: IFFALSE 54431
// exit ;
54429: GO 54521
// vehicle := IsInUnit ( driver ) ;
54431: LD_ADDR_VAR 0 3
54435: PUSH
54436: LD_VAR 0 1
54440: PPUSH
54441: CALL_OW 310
54445: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_STRING \
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: LD_INT 0
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: PUSH
54481: LD_STRING E
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_VAR 0 3
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PPUSH
54517: CALL_OW 447
// end ;
54521: LD_VAR 0 2
54525: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54526: LD_INT 0
54528: PPUSH
54529: PPUSH
54530: PPUSH
// tmp := [ ] ;
54531: LD_ADDR_VAR 0 5
54535: PUSH
54536: EMPTY
54537: ST_TO_ADDR
// for i in units do
54538: LD_ADDR_VAR 0 4
54542: PUSH
54543: LD_VAR 0 1
54547: PUSH
54548: FOR_IN
54549: IFFALSE 54587
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54551: LD_ADDR_VAR 0 5
54555: PUSH
54556: LD_VAR 0 5
54560: PPUSH
54561: LD_VAR 0 5
54565: PUSH
54566: LD_INT 1
54568: PLUS
54569: PPUSH
54570: LD_VAR 0 4
54574: PPUSH
54575: CALL_OW 256
54579: PPUSH
54580: CALL_OW 2
54584: ST_TO_ADDR
54585: GO 54548
54587: POP
54588: POP
// if not tmp then
54589: LD_VAR 0 5
54593: NOT
54594: IFFALSE 54598
// exit ;
54596: GO 54646
// if asc then
54598: LD_VAR 0 2
54602: IFFALSE 54626
// result := SortListByListAsc ( units , tmp ) else
54604: LD_ADDR_VAR 0 3
54608: PUSH
54609: LD_VAR 0 1
54613: PPUSH
54614: LD_VAR 0 5
54618: PPUSH
54619: CALL_OW 76
54623: ST_TO_ADDR
54624: GO 54646
// result := SortListByListDesc ( units , tmp ) ;
54626: LD_ADDR_VAR 0 3
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: LD_VAR 0 5
54640: PPUSH
54641: CALL_OW 77
54645: ST_TO_ADDR
// end ;
54646: LD_VAR 0 3
54650: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54651: LD_INT 0
54653: PPUSH
54654: PPUSH
// task := GetTaskList ( mech ) ;
54655: LD_ADDR_VAR 0 4
54659: PUSH
54660: LD_VAR 0 1
54664: PPUSH
54665: CALL_OW 437
54669: ST_TO_ADDR
// if not task then
54670: LD_VAR 0 4
54674: NOT
54675: IFFALSE 54679
// exit ;
54677: GO 54721
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54679: LD_ADDR_VAR 0 3
54683: PUSH
54684: LD_VAR 0 4
54688: PUSH
54689: LD_INT 1
54691: ARRAY
54692: PUSH
54693: LD_INT 1
54695: ARRAY
54696: PUSH
54697: LD_STRING r
54699: EQUAL
54700: PUSH
54701: LD_VAR 0 4
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: PUSH
54710: LD_INT 4
54712: ARRAY
54713: PUSH
54714: LD_VAR 0 2
54718: EQUAL
54719: AND
54720: ST_TO_ADDR
// end ;
54721: LD_VAR 0 3
54725: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54726: LD_INT 0
54728: PPUSH
// SetDir ( unit , d ) ;
54729: LD_VAR 0 1
54733: PPUSH
54734: LD_VAR 0 4
54738: PPUSH
54739: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54743: LD_VAR 0 1
54747: PPUSH
54748: LD_VAR 0 2
54752: PPUSH
54753: LD_VAR 0 3
54757: PPUSH
54758: LD_VAR 0 5
54762: PPUSH
54763: CALL_OW 48
// end ;
54767: LD_VAR 0 6
54771: RET
// export function ToNaturalNumber ( number ) ; begin
54772: LD_INT 0
54774: PPUSH
// result := number div 1 ;
54775: LD_ADDR_VAR 0 2
54779: PUSH
54780: LD_VAR 0 1
54784: PUSH
54785: LD_INT 1
54787: DIV
54788: ST_TO_ADDR
// if number < 0 then
54789: LD_VAR 0 1
54793: PUSH
54794: LD_INT 0
54796: LESS
54797: IFFALSE 54807
// result := 0 ;
54799: LD_ADDR_VAR 0 2
54803: PUSH
54804: LD_INT 0
54806: ST_TO_ADDR
// end ;
54807: LD_VAR 0 2
54811: RET
// export function SortByClass ( units , class ) ; var un ; begin
54812: LD_INT 0
54814: PPUSH
54815: PPUSH
// if not units or not class then
54816: LD_VAR 0 1
54820: NOT
54821: PUSH
54822: LD_VAR 0 2
54826: NOT
54827: OR
54828: IFFALSE 54832
// exit ;
54830: GO 54927
// result := [ ] ;
54832: LD_ADDR_VAR 0 3
54836: PUSH
54837: EMPTY
54838: ST_TO_ADDR
// for un in units do
54839: LD_ADDR_VAR 0 4
54843: PUSH
54844: LD_VAR 0 1
54848: PUSH
54849: FOR_IN
54850: IFFALSE 54925
// if GetClass ( un ) = class then
54852: LD_VAR 0 4
54856: PPUSH
54857: CALL_OW 257
54861: PUSH
54862: LD_VAR 0 2
54866: EQUAL
54867: IFFALSE 54894
// result := Insert ( result , 1 , un ) else
54869: LD_ADDR_VAR 0 3
54873: PUSH
54874: LD_VAR 0 3
54878: PPUSH
54879: LD_INT 1
54881: PPUSH
54882: LD_VAR 0 4
54886: PPUSH
54887: CALL_OW 2
54891: ST_TO_ADDR
54892: GO 54923
// result := Replace ( result , result + 1 , un ) ;
54894: LD_ADDR_VAR 0 3
54898: PUSH
54899: LD_VAR 0 3
54903: PPUSH
54904: LD_VAR 0 3
54908: PUSH
54909: LD_INT 1
54911: PLUS
54912: PPUSH
54913: LD_VAR 0 4
54917: PPUSH
54918: CALL_OW 1
54922: ST_TO_ADDR
54923: GO 54849
54925: POP
54926: POP
// end ;
54927: LD_VAR 0 3
54931: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54932: LD_INT 0
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
54938: PPUSH
54939: PPUSH
54940: PPUSH
// result := [ ] ;
54941: LD_ADDR_VAR 0 4
54945: PUSH
54946: EMPTY
54947: ST_TO_ADDR
// if x - r < 0 then
54948: LD_VAR 0 1
54952: PUSH
54953: LD_VAR 0 3
54957: MINUS
54958: PUSH
54959: LD_INT 0
54961: LESS
54962: IFFALSE 54974
// min_x := 0 else
54964: LD_ADDR_VAR 0 8
54968: PUSH
54969: LD_INT 0
54971: ST_TO_ADDR
54972: GO 54990
// min_x := x - r ;
54974: LD_ADDR_VAR 0 8
54978: PUSH
54979: LD_VAR 0 1
54983: PUSH
54984: LD_VAR 0 3
54988: MINUS
54989: ST_TO_ADDR
// if y - r < 0 then
54990: LD_VAR 0 2
54994: PUSH
54995: LD_VAR 0 3
54999: MINUS
55000: PUSH
55001: LD_INT 0
55003: LESS
55004: IFFALSE 55016
// min_y := 0 else
55006: LD_ADDR_VAR 0 7
55010: PUSH
55011: LD_INT 0
55013: ST_TO_ADDR
55014: GO 55032
// min_y := y - r ;
55016: LD_ADDR_VAR 0 7
55020: PUSH
55021: LD_VAR 0 2
55025: PUSH
55026: LD_VAR 0 3
55030: MINUS
55031: ST_TO_ADDR
// max_x := x + r ;
55032: LD_ADDR_VAR 0 9
55036: PUSH
55037: LD_VAR 0 1
55041: PUSH
55042: LD_VAR 0 3
55046: PLUS
55047: ST_TO_ADDR
// max_y := y + r ;
55048: LD_ADDR_VAR 0 10
55052: PUSH
55053: LD_VAR 0 2
55057: PUSH
55058: LD_VAR 0 3
55062: PLUS
55063: ST_TO_ADDR
// for _x = min_x to max_x do
55064: LD_ADDR_VAR 0 5
55068: PUSH
55069: DOUBLE
55070: LD_VAR 0 8
55074: DEC
55075: ST_TO_ADDR
55076: LD_VAR 0 9
55080: PUSH
55081: FOR_TO
55082: IFFALSE 55183
// for _y = min_y to max_y do
55084: LD_ADDR_VAR 0 6
55088: PUSH
55089: DOUBLE
55090: LD_VAR 0 7
55094: DEC
55095: ST_TO_ADDR
55096: LD_VAR 0 10
55100: PUSH
55101: FOR_TO
55102: IFFALSE 55179
// begin if not ValidHex ( _x , _y ) then
55104: LD_VAR 0 5
55108: PPUSH
55109: LD_VAR 0 6
55113: PPUSH
55114: CALL_OW 488
55118: NOT
55119: IFFALSE 55123
// continue ;
55121: GO 55101
// if GetResourceTypeXY ( _x , _y ) then
55123: LD_VAR 0 5
55127: PPUSH
55128: LD_VAR 0 6
55132: PPUSH
55133: CALL_OW 283
55137: IFFALSE 55177
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55139: LD_ADDR_VAR 0 4
55143: PUSH
55144: LD_VAR 0 4
55148: PPUSH
55149: LD_VAR 0 4
55153: PUSH
55154: LD_INT 1
55156: PLUS
55157: PPUSH
55158: LD_VAR 0 5
55162: PUSH
55163: LD_VAR 0 6
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PPUSH
55172: CALL_OW 1
55176: ST_TO_ADDR
// end ;
55177: GO 55101
55179: POP
55180: POP
55181: GO 55081
55183: POP
55184: POP
// end ;
55185: LD_VAR 0 4
55189: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55190: LD_INT 0
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
55199: PPUSH
// if not units then
55200: LD_VAR 0 1
55204: NOT
55205: IFFALSE 55209
// exit ;
55207: GO 55737
// result := UnitFilter ( units , [ f_ok ] ) ;
55209: LD_ADDR_VAR 0 3
55213: PUSH
55214: LD_VAR 0 1
55218: PPUSH
55219: LD_INT 50
55221: PUSH
55222: EMPTY
55223: LIST
55224: PPUSH
55225: CALL_OW 72
55229: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55230: LD_ADDR_VAR 0 8
55234: PUSH
55235: LD_VAR 0 1
55239: PUSH
55240: LD_INT 1
55242: ARRAY
55243: PPUSH
55244: CALL_OW 255
55248: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55249: LD_ADDR_VAR 0 10
55253: PUSH
55254: LD_INT 29
55256: PUSH
55257: LD_INT 91
55259: PUSH
55260: LD_INT 49
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// if not result then
55268: LD_VAR 0 3
55272: NOT
55273: IFFALSE 55277
// exit ;
55275: GO 55737
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55277: LD_ADDR_VAR 0 5
55281: PUSH
55282: LD_INT 81
55284: PUSH
55285: LD_VAR 0 8
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PPUSH
55294: CALL_OW 69
55298: ST_TO_ADDR
// for i in result do
55299: LD_ADDR_VAR 0 4
55303: PUSH
55304: LD_VAR 0 3
55308: PUSH
55309: FOR_IN
55310: IFFALSE 55735
// begin tag := GetTag ( i ) + 1 ;
55312: LD_ADDR_VAR 0 9
55316: PUSH
55317: LD_VAR 0 4
55321: PPUSH
55322: CALL_OW 110
55326: PUSH
55327: LD_INT 1
55329: PLUS
55330: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_VAR 0 4
55340: PPUSH
55341: CALL_OW 250
55345: PPUSH
55346: LD_VAR 0 4
55350: PPUSH
55351: CALL_OW 251
55355: PPUSH
55356: LD_INT 4
55358: PPUSH
55359: CALL 54932 0 3
55363: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55364: LD_VAR 0 4
55368: PPUSH
55369: CALL_OW 247
55373: PUSH
55374: LD_INT 2
55376: EQUAL
55377: PUSH
55378: LD_VAR 0 7
55382: PUSH
55383: LD_INT 2
55385: GREATER
55386: AND
55387: PUSH
55388: LD_VAR 0 4
55392: PPUSH
55393: CALL_OW 264
55397: PUSH
55398: LD_VAR 0 10
55402: IN
55403: NOT
55404: AND
55405: IFFALSE 55444
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55407: LD_VAR 0 4
55411: PPUSH
55412: LD_VAR 0 7
55416: PUSH
55417: LD_INT 1
55419: ARRAY
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: PPUSH
55425: LD_VAR 0 7
55429: PUSH
55430: LD_INT 1
55432: ARRAY
55433: PUSH
55434: LD_INT 2
55436: ARRAY
55437: PPUSH
55438: CALL_OW 116
55442: GO 55733
// if path > tag then
55444: LD_VAR 0 2
55448: PUSH
55449: LD_VAR 0 9
55453: GREATER
55454: IFFALSE 55662
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55456: LD_ADDR_VAR 0 6
55460: PUSH
55461: LD_VAR 0 5
55465: PPUSH
55466: LD_INT 91
55468: PUSH
55469: LD_VAR 0 4
55473: PUSH
55474: LD_INT 8
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: PPUSH
55482: CALL_OW 72
55486: ST_TO_ADDR
// if nearEnemy then
55487: LD_VAR 0 6
55491: IFFALSE 55560
// begin if GetWeapon ( i ) = ru_time_lapser then
55493: LD_VAR 0 4
55497: PPUSH
55498: CALL_OW 264
55502: PUSH
55503: LD_INT 49
55505: EQUAL
55506: IFFALSE 55534
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55508: LD_VAR 0 4
55512: PPUSH
55513: LD_VAR 0 6
55517: PPUSH
55518: LD_VAR 0 4
55522: PPUSH
55523: CALL_OW 74
55527: PPUSH
55528: CALL_OW 112
55532: GO 55558
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55534: LD_VAR 0 4
55538: PPUSH
55539: LD_VAR 0 6
55543: PPUSH
55544: LD_VAR 0 4
55548: PPUSH
55549: CALL_OW 74
55553: PPUSH
55554: CALL 56808 0 2
// end else
55558: GO 55660
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55560: LD_VAR 0 4
55564: PPUSH
55565: LD_VAR 0 2
55569: PUSH
55570: LD_VAR 0 9
55574: ARRAY
55575: PUSH
55576: LD_INT 1
55578: ARRAY
55579: PPUSH
55580: LD_VAR 0 2
55584: PUSH
55585: LD_VAR 0 9
55589: ARRAY
55590: PUSH
55591: LD_INT 2
55593: ARRAY
55594: PPUSH
55595: CALL_OW 297
55599: PUSH
55600: LD_INT 6
55602: GREATER
55603: IFFALSE 55646
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55605: LD_VAR 0 4
55609: PPUSH
55610: LD_VAR 0 2
55614: PUSH
55615: LD_VAR 0 9
55619: ARRAY
55620: PUSH
55621: LD_INT 1
55623: ARRAY
55624: PPUSH
55625: LD_VAR 0 2
55629: PUSH
55630: LD_VAR 0 9
55634: ARRAY
55635: PUSH
55636: LD_INT 2
55638: ARRAY
55639: PPUSH
55640: CALL_OW 114
55644: GO 55660
// SetTag ( i , tag ) ;
55646: LD_VAR 0 4
55650: PPUSH
55651: LD_VAR 0 9
55655: PPUSH
55656: CALL_OW 109
// end else
55660: GO 55733
// if enemy then
55662: LD_VAR 0 5
55666: IFFALSE 55733
// begin if GetWeapon ( i ) = ru_time_lapser then
55668: LD_VAR 0 4
55672: PPUSH
55673: CALL_OW 264
55677: PUSH
55678: LD_INT 49
55680: EQUAL
55681: IFFALSE 55709
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55683: LD_VAR 0 4
55687: PPUSH
55688: LD_VAR 0 5
55692: PPUSH
55693: LD_VAR 0 4
55697: PPUSH
55698: CALL_OW 74
55702: PPUSH
55703: CALL_OW 112
55707: GO 55733
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55709: LD_VAR 0 4
55713: PPUSH
55714: LD_VAR 0 5
55718: PPUSH
55719: LD_VAR 0 4
55723: PPUSH
55724: CALL_OW 74
55728: PPUSH
55729: CALL 56808 0 2
// end ; end ;
55733: GO 55309
55735: POP
55736: POP
// end ;
55737: LD_VAR 0 3
55741: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55742: LD_INT 0
55744: PPUSH
55745: PPUSH
55746: PPUSH
// if not unit or IsInUnit ( unit ) then
55747: LD_VAR 0 1
55751: NOT
55752: PUSH
55753: LD_VAR 0 1
55757: PPUSH
55758: CALL_OW 310
55762: OR
55763: IFFALSE 55767
// exit ;
55765: GO 55858
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55767: LD_ADDR_VAR 0 4
55771: PUSH
55772: LD_VAR 0 1
55776: PPUSH
55777: CALL_OW 250
55781: PPUSH
55782: LD_VAR 0 2
55786: PPUSH
55787: LD_INT 1
55789: PPUSH
55790: CALL_OW 272
55794: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55795: LD_ADDR_VAR 0 5
55799: PUSH
55800: LD_VAR 0 1
55804: PPUSH
55805: CALL_OW 251
55809: PPUSH
55810: LD_VAR 0 2
55814: PPUSH
55815: LD_INT 1
55817: PPUSH
55818: CALL_OW 273
55822: ST_TO_ADDR
// if ValidHex ( x , y ) then
55823: LD_VAR 0 4
55827: PPUSH
55828: LD_VAR 0 5
55832: PPUSH
55833: CALL_OW 488
55837: IFFALSE 55858
// ComTurnXY ( unit , x , y ) ;
55839: LD_VAR 0 1
55843: PPUSH
55844: LD_VAR 0 4
55848: PPUSH
55849: LD_VAR 0 5
55853: PPUSH
55854: CALL_OW 118
// end ;
55858: LD_VAR 0 3
55862: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55863: LD_INT 0
55865: PPUSH
55866: PPUSH
// result := false ;
55867: LD_ADDR_VAR 0 3
55871: PUSH
55872: LD_INT 0
55874: ST_TO_ADDR
// if not units then
55875: LD_VAR 0 2
55879: NOT
55880: IFFALSE 55884
// exit ;
55882: GO 55929
// for i in units do
55884: LD_ADDR_VAR 0 4
55888: PUSH
55889: LD_VAR 0 2
55893: PUSH
55894: FOR_IN
55895: IFFALSE 55927
// if See ( side , i ) then
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 4
55906: PPUSH
55907: CALL_OW 292
55911: IFFALSE 55925
// begin result := true ;
55913: LD_ADDR_VAR 0 3
55917: PUSH
55918: LD_INT 1
55920: ST_TO_ADDR
// exit ;
55921: POP
55922: POP
55923: GO 55929
// end ;
55925: GO 55894
55927: POP
55928: POP
// end ;
55929: LD_VAR 0 3
55933: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55934: LD_INT 0
55936: PPUSH
55937: PPUSH
55938: PPUSH
55939: PPUSH
// if not unit or not points then
55940: LD_VAR 0 1
55944: NOT
55945: PUSH
55946: LD_VAR 0 2
55950: NOT
55951: OR
55952: IFFALSE 55956
// exit ;
55954: GO 56046
// dist := 99999 ;
55956: LD_ADDR_VAR 0 5
55960: PUSH
55961: LD_INT 99999
55963: ST_TO_ADDR
// for i in points do
55964: LD_ADDR_VAR 0 4
55968: PUSH
55969: LD_VAR 0 2
55973: PUSH
55974: FOR_IN
55975: IFFALSE 56044
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55977: LD_ADDR_VAR 0 6
55981: PUSH
55982: LD_VAR 0 1
55986: PPUSH
55987: LD_VAR 0 4
55991: PUSH
55992: LD_INT 1
55994: ARRAY
55995: PPUSH
55996: LD_VAR 0 4
56000: PUSH
56001: LD_INT 2
56003: ARRAY
56004: PPUSH
56005: CALL_OW 297
56009: ST_TO_ADDR
// if tmpDist < dist then
56010: LD_VAR 0 6
56014: PUSH
56015: LD_VAR 0 5
56019: LESS
56020: IFFALSE 56042
// begin result := i ;
56022: LD_ADDR_VAR 0 3
56026: PUSH
56027: LD_VAR 0 4
56031: ST_TO_ADDR
// dist := tmpDist ;
56032: LD_ADDR_VAR 0 5
56036: PUSH
56037: LD_VAR 0 6
56041: ST_TO_ADDR
// end ; end ;
56042: GO 55974
56044: POP
56045: POP
// end ;
56046: LD_VAR 0 3
56050: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56051: LD_INT 0
56053: PPUSH
// uc_side := side ;
56054: LD_ADDR_OWVAR 20
56058: PUSH
56059: LD_VAR 0 1
56063: ST_TO_ADDR
// uc_nation := 3 ;
56064: LD_ADDR_OWVAR 21
56068: PUSH
56069: LD_INT 3
56071: ST_TO_ADDR
// vc_chassis := 25 ;
56072: LD_ADDR_OWVAR 37
56076: PUSH
56077: LD_INT 25
56079: ST_TO_ADDR
// vc_engine := engine_siberite ;
56080: LD_ADDR_OWVAR 39
56084: PUSH
56085: LD_INT 3
56087: ST_TO_ADDR
// vc_control := control_computer ;
56088: LD_ADDR_OWVAR 38
56092: PUSH
56093: LD_INT 3
56095: ST_TO_ADDR
// vc_weapon := 59 ;
56096: LD_ADDR_OWVAR 40
56100: PUSH
56101: LD_INT 59
56103: ST_TO_ADDR
// result := CreateVehicle ;
56104: LD_ADDR_VAR 0 5
56108: PUSH
56109: CALL_OW 45
56113: ST_TO_ADDR
// SetDir ( result , d ) ;
56114: LD_VAR 0 5
56118: PPUSH
56119: LD_VAR 0 4
56123: PPUSH
56124: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56128: LD_VAR 0 5
56132: PPUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: LD_VAR 0 3
56142: PPUSH
56143: LD_INT 0
56145: PPUSH
56146: CALL_OW 48
// end ;
56150: LD_VAR 0 5
56154: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56155: LD_INT 0
56157: PPUSH
56158: PPUSH
56159: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56160: LD_ADDR_VAR 0 2
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56183: LD_VAR 0 1
56187: NOT
56188: PUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 264
56198: PUSH
56199: LD_INT 12
56201: PUSH
56202: LD_INT 51
56204: PUSH
56205: LD_INT 32
56207: PUSH
56208: LD_INT 89
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: IN
56217: NOT
56218: OR
56219: IFFALSE 56223
// exit ;
56221: GO 56321
// for i := 1 to 3 do
56223: LD_ADDR_VAR 0 3
56227: PUSH
56228: DOUBLE
56229: LD_INT 1
56231: DEC
56232: ST_TO_ADDR
56233: LD_INT 3
56235: PUSH
56236: FOR_TO
56237: IFFALSE 56319
// begin tmp := GetCargo ( cargo , i ) ;
56239: LD_ADDR_VAR 0 4
56243: PUSH
56244: LD_VAR 0 1
56248: PPUSH
56249: LD_VAR 0 3
56253: PPUSH
56254: CALL_OW 289
56258: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56259: LD_ADDR_VAR 0 2
56263: PUSH
56264: LD_VAR 0 2
56268: PPUSH
56269: LD_VAR 0 3
56273: PPUSH
56274: LD_VAR 0 4
56278: PPUSH
56279: CALL_OW 1
56283: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56284: LD_ADDR_VAR 0 2
56288: PUSH
56289: LD_VAR 0 2
56293: PPUSH
56294: LD_INT 4
56296: PPUSH
56297: LD_VAR 0 2
56301: PUSH
56302: LD_INT 4
56304: ARRAY
56305: PUSH
56306: LD_VAR 0 4
56310: PLUS
56311: PPUSH
56312: CALL_OW 1
56316: ST_TO_ADDR
// end ;
56317: GO 56236
56319: POP
56320: POP
// end ;
56321: LD_VAR 0 2
56325: RET
// export function Length ( array ) ; begin
56326: LD_INT 0
56328: PPUSH
// result := array + 0 ;
56329: LD_ADDR_VAR 0 2
56333: PUSH
56334: LD_VAR 0 1
56338: PUSH
56339: LD_INT 0
56341: PLUS
56342: ST_TO_ADDR
// end ;
56343: LD_VAR 0 2
56347: RET
// export function PrepareArray ( array ) ; begin
56348: LD_INT 0
56350: PPUSH
// result := array diff 0 ;
56351: LD_ADDR_VAR 0 2
56355: PUSH
56356: LD_VAR 0 1
56360: PUSH
56361: LD_INT 0
56363: DIFF
56364: ST_TO_ADDR
// if not result [ 1 ] then
56365: LD_VAR 0 2
56369: PUSH
56370: LD_INT 1
56372: ARRAY
56373: NOT
56374: IFFALSE 56394
// result := Delete ( result , 1 ) ;
56376: LD_ADDR_VAR 0 2
56380: PUSH
56381: LD_VAR 0 2
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL_OW 3
56393: ST_TO_ADDR
// end ;
56394: LD_VAR 0 2
56398: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56399: LD_INT 0
56401: PPUSH
56402: PPUSH
56403: PPUSH
56404: PPUSH
// sibRocketRange := 25 ;
56405: LD_ADDR_VAR 0 6
56409: PUSH
56410: LD_INT 25
56412: ST_TO_ADDR
// result := false ;
56413: LD_ADDR_VAR 0 4
56417: PUSH
56418: LD_INT 0
56420: ST_TO_ADDR
// for i := 0 to 5 do
56421: LD_ADDR_VAR 0 5
56425: PUSH
56426: DOUBLE
56427: LD_INT 0
56429: DEC
56430: ST_TO_ADDR
56431: LD_INT 5
56433: PUSH
56434: FOR_TO
56435: IFFALSE 56502
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56437: LD_VAR 0 1
56441: PPUSH
56442: LD_VAR 0 5
56446: PPUSH
56447: LD_VAR 0 6
56451: PPUSH
56452: CALL_OW 272
56456: PPUSH
56457: LD_VAR 0 2
56461: PPUSH
56462: LD_VAR 0 5
56466: PPUSH
56467: LD_VAR 0 6
56471: PPUSH
56472: CALL_OW 273
56476: PPUSH
56477: LD_VAR 0 3
56481: PPUSH
56482: CALL_OW 309
56486: IFFALSE 56500
// begin result := true ;
56488: LD_ADDR_VAR 0 4
56492: PUSH
56493: LD_INT 1
56495: ST_TO_ADDR
// exit ;
56496: POP
56497: POP
56498: GO 56504
// end ;
56500: GO 56434
56502: POP
56503: POP
// end ;
56504: LD_VAR 0 4
56508: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56509: LD_INT 0
56511: PPUSH
56512: PPUSH
56513: PPUSH
// if btype = b_depot then
56514: LD_VAR 0 2
56518: PUSH
56519: LD_INT 0
56521: EQUAL
56522: IFFALSE 56534
// begin result := true ;
56524: LD_ADDR_VAR 0 3
56528: PUSH
56529: LD_INT 1
56531: ST_TO_ADDR
// exit ;
56532: GO 56650
// end ; pom := GetBase ( depot ) ;
56534: LD_ADDR_VAR 0 4
56538: PUSH
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL_OW 274
56548: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56549: LD_ADDR_VAR 0 5
56553: PUSH
56554: LD_VAR 0 2
56558: PPUSH
56559: LD_VAR 0 1
56563: PPUSH
56564: CALL_OW 248
56568: PPUSH
56569: CALL_OW 450
56573: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56574: LD_ADDR_VAR 0 3
56578: PUSH
56579: LD_VAR 0 4
56583: PPUSH
56584: LD_INT 1
56586: PPUSH
56587: CALL_OW 275
56591: PUSH
56592: LD_VAR 0 5
56596: PUSH
56597: LD_INT 1
56599: ARRAY
56600: GREATEREQUAL
56601: PUSH
56602: LD_VAR 0 4
56606: PPUSH
56607: LD_INT 2
56609: PPUSH
56610: CALL_OW 275
56614: PUSH
56615: LD_VAR 0 5
56619: PUSH
56620: LD_INT 2
56622: ARRAY
56623: GREATEREQUAL
56624: AND
56625: PUSH
56626: LD_VAR 0 4
56630: PPUSH
56631: LD_INT 3
56633: PPUSH
56634: CALL_OW 275
56638: PUSH
56639: LD_VAR 0 5
56643: PUSH
56644: LD_INT 3
56646: ARRAY
56647: GREATEREQUAL
56648: AND
56649: ST_TO_ADDR
// end ;
56650: LD_VAR 0 3
56654: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56655: LD_INT 0
56657: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56658: LD_VAR 0 1
56662: PPUSH
56663: LD_VAR 0 2
56667: PPUSH
56668: LD_INT 0
56670: PPUSH
56671: LD_INT 0
56673: PPUSH
56674: LD_INT 1
56676: PPUSH
56677: LD_INT 0
56679: PPUSH
56680: CALL_OW 587
// end ;
56684: LD_VAR 0 3
56688: RET
// export function CenterOnNow ( unit ) ; begin
56689: LD_INT 0
56691: PPUSH
// result := IsInUnit ( unit ) ;
56692: LD_ADDR_VAR 0 2
56696: PUSH
56697: LD_VAR 0 1
56701: PPUSH
56702: CALL_OW 310
56706: ST_TO_ADDR
// if not result then
56707: LD_VAR 0 2
56711: NOT
56712: IFFALSE 56724
// result := unit ;
56714: LD_ADDR_VAR 0 2
56718: PUSH
56719: LD_VAR 0 1
56723: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56724: LD_VAR 0 1
56728: PPUSH
56729: CALL_OW 87
// end ;
56733: LD_VAR 0 2
56737: RET
// export function ComMoveHex ( unit , hex ) ; begin
56738: LD_INT 0
56740: PPUSH
// if not hex then
56741: LD_VAR 0 2
56745: NOT
56746: IFFALSE 56750
// exit ;
56748: GO 56803
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56750: LD_VAR 0 2
56754: PUSH
56755: LD_INT 1
56757: ARRAY
56758: PPUSH
56759: LD_VAR 0 2
56763: PUSH
56764: LD_INT 2
56766: ARRAY
56767: PPUSH
56768: CALL_OW 428
56772: IFFALSE 56776
// exit ;
56774: GO 56803
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56776: LD_VAR 0 1
56780: PPUSH
56781: LD_VAR 0 2
56785: PUSH
56786: LD_INT 1
56788: ARRAY
56789: PPUSH
56790: LD_VAR 0 2
56794: PUSH
56795: LD_INT 2
56797: ARRAY
56798: PPUSH
56799: CALL_OW 111
// end ;
56803: LD_VAR 0 3
56807: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56808: LD_INT 0
56810: PPUSH
56811: PPUSH
56812: PPUSH
// if not unit or not enemy then
56813: LD_VAR 0 1
56817: NOT
56818: PUSH
56819: LD_VAR 0 2
56823: NOT
56824: OR
56825: IFFALSE 56829
// exit ;
56827: GO 56953
// x := GetX ( enemy ) ;
56829: LD_ADDR_VAR 0 4
56833: PUSH
56834: LD_VAR 0 2
56838: PPUSH
56839: CALL_OW 250
56843: ST_TO_ADDR
// y := GetY ( enemy ) ;
56844: LD_ADDR_VAR 0 5
56848: PUSH
56849: LD_VAR 0 2
56853: PPUSH
56854: CALL_OW 251
56858: ST_TO_ADDR
// if ValidHex ( x , y ) then
56859: LD_VAR 0 4
56863: PPUSH
56864: LD_VAR 0 5
56868: PPUSH
56869: CALL_OW 488
56873: IFFALSE 56953
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
56875: LD_VAR 0 2
56879: PPUSH
56880: CALL_OW 247
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: IN
56895: PUSH
56896: LD_VAR 0 1
56900: PPUSH
56901: CALL_OW 255
56905: PPUSH
56906: LD_VAR 0 2
56910: PPUSH
56911: CALL_OW 292
56915: OR
56916: IFFALSE 56934
// ComAttackUnit ( unit , enemy ) else
56918: LD_VAR 0 1
56922: PPUSH
56923: LD_VAR 0 2
56927: PPUSH
56928: CALL_OW 115
56932: GO 56953
// ComAgressiveMove ( unit , x , y ) ;
56934: LD_VAR 0 1
56938: PPUSH
56939: LD_VAR 0 4
56943: PPUSH
56944: LD_VAR 0 5
56948: PPUSH
56949: CALL_OW 114
// end ;
56953: LD_VAR 0 3
56957: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
56958: LD_INT 0
56960: PPUSH
56961: PPUSH
56962: PPUSH
// list := AreaToList ( area , 0 ) ;
56963: LD_ADDR_VAR 0 5
56967: PUSH
56968: LD_VAR 0 1
56972: PPUSH
56973: LD_INT 0
56975: PPUSH
56976: CALL_OW 517
56980: ST_TO_ADDR
// if not list then
56981: LD_VAR 0 5
56985: NOT
56986: IFFALSE 56990
// exit ;
56988: GO 57120
// if all then
56990: LD_VAR 0 2
56994: IFFALSE 57082
// begin for i := 1 to list [ 1 ] do
56996: LD_ADDR_VAR 0 4
57000: PUSH
57001: DOUBLE
57002: LD_INT 1
57004: DEC
57005: ST_TO_ADDR
57006: LD_VAR 0 5
57010: PUSH
57011: LD_INT 1
57013: ARRAY
57014: PUSH
57015: FOR_TO
57016: IFFALSE 57078
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57018: LD_ADDR_VAR 0 3
57022: PUSH
57023: LD_VAR 0 3
57027: PPUSH
57028: LD_VAR 0 3
57032: PUSH
57033: LD_INT 1
57035: PLUS
57036: PPUSH
57037: LD_VAR 0 5
57041: PUSH
57042: LD_INT 1
57044: ARRAY
57045: PUSH
57046: LD_VAR 0 4
57050: ARRAY
57051: PUSH
57052: LD_VAR 0 5
57056: PUSH
57057: LD_INT 2
57059: ARRAY
57060: PUSH
57061: LD_VAR 0 4
57065: ARRAY
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PPUSH
57071: CALL_OW 1
57075: ST_TO_ADDR
57076: GO 57015
57078: POP
57079: POP
// exit ;
57080: GO 57120
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57082: LD_ADDR_VAR 0 3
57086: PUSH
57087: LD_VAR 0 5
57091: PUSH
57092: LD_INT 1
57094: ARRAY
57095: PUSH
57096: LD_INT 1
57098: ARRAY
57099: PUSH
57100: LD_VAR 0 5
57104: PUSH
57105: LD_INT 2
57107: ARRAY
57108: PUSH
57109: LD_INT 1
57111: ARRAY
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: ST_TO_ADDR
// end ;
57120: LD_VAR 0 3
57124: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57125: LD_INT 0
57127: PPUSH
57128: PPUSH
// list := AreaToList ( area , 0 ) ;
57129: LD_ADDR_VAR 0 4
57133: PUSH
57134: LD_VAR 0 1
57138: PPUSH
57139: LD_INT 0
57141: PPUSH
57142: CALL_OW 517
57146: ST_TO_ADDR
// if not list then
57147: LD_VAR 0 4
57151: NOT
57152: IFFALSE 57156
// exit ;
57154: GO 57197
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57156: LD_ADDR_VAR 0 3
57160: PUSH
57161: LD_VAR 0 4
57165: PUSH
57166: LD_INT 1
57168: ARRAY
57169: PUSH
57170: LD_INT 1
57172: ARRAY
57173: PUSH
57174: LD_VAR 0 4
57178: PUSH
57179: LD_INT 2
57181: ARRAY
57182: PUSH
57183: LD_INT 1
57185: ARRAY
57186: PUSH
57187: LD_VAR 0 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: ST_TO_ADDR
// end ;
57197: LD_VAR 0 3
57201: RET
// export function First ( array ) ; begin
57202: LD_INT 0
57204: PPUSH
// if not array then
57205: LD_VAR 0 1
57209: NOT
57210: IFFALSE 57214
// exit ;
57212: GO 57228
// result := array [ 1 ] ;
57214: LD_ADDR_VAR 0 2
57218: PUSH
57219: LD_VAR 0 1
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: ST_TO_ADDR
// end ;
57228: LD_VAR 0 2
57232: RET
// export function Last ( array ) ; begin
57233: LD_INT 0
57235: PPUSH
// if not array then
57236: LD_VAR 0 1
57240: NOT
57241: IFFALSE 57245
// exit ;
57243: GO 57261
// result := array [ array ] ;
57245: LD_ADDR_VAR 0 2
57249: PUSH
57250: LD_VAR 0 1
57254: PUSH
57255: LD_VAR 0 1
57259: ARRAY
57260: ST_TO_ADDR
// end ;
57261: LD_VAR 0 2
57265: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57266: LD_INT 0
57268: PPUSH
57269: PPUSH
// result := [ ] ;
57270: LD_ADDR_VAR 0 5
57274: PUSH
57275: EMPTY
57276: ST_TO_ADDR
// if not array then
57277: LD_VAR 0 1
57281: NOT
57282: IFFALSE 57286
// exit ;
57284: GO 57398
// for i := 1 to array do
57286: LD_ADDR_VAR 0 6
57290: PUSH
57291: DOUBLE
57292: LD_INT 1
57294: DEC
57295: ST_TO_ADDR
57296: LD_VAR 0 1
57300: PUSH
57301: FOR_TO
57302: IFFALSE 57396
// if array [ i ] [ index ] = value then
57304: LD_VAR 0 1
57308: PUSH
57309: LD_VAR 0 6
57313: ARRAY
57314: PUSH
57315: LD_VAR 0 2
57319: ARRAY
57320: PUSH
57321: LD_VAR 0 3
57325: EQUAL
57326: IFFALSE 57394
// begin if indexColumn then
57328: LD_VAR 0 4
57332: IFFALSE 57368
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57334: LD_ADDR_VAR 0 5
57338: PUSH
57339: LD_VAR 0 5
57343: PPUSH
57344: LD_VAR 0 1
57348: PUSH
57349: LD_VAR 0 6
57353: ARRAY
57354: PUSH
57355: LD_VAR 0 4
57359: ARRAY
57360: PPUSH
57361: CALL 52586 0 2
57365: ST_TO_ADDR
57366: GO 57394
// result := Join ( result , array [ i ] ) ;
57368: LD_ADDR_VAR 0 5
57372: PUSH
57373: LD_VAR 0 5
57377: PPUSH
57378: LD_VAR 0 1
57382: PUSH
57383: LD_VAR 0 6
57387: ARRAY
57388: PPUSH
57389: CALL 52586 0 2
57393: ST_TO_ADDR
// end ;
57394: GO 57301
57396: POP
57397: POP
// end ;
57398: LD_VAR 0 5
57402: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57403: LD_INT 0
57405: PPUSH
// if not vehicles or not parkingPoint then
57406: LD_VAR 0 1
57410: NOT
57411: PUSH
57412: LD_VAR 0 2
57416: NOT
57417: OR
57418: IFFALSE 57422
// exit ;
57420: GO 57520
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57422: LD_ADDR_VAR 0 1
57426: PUSH
57427: LD_VAR 0 1
57431: PPUSH
57432: LD_INT 50
57434: PUSH
57435: EMPTY
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: LD_INT 92
57443: PUSH
57444: LD_VAR 0 2
57448: PUSH
57449: LD_INT 1
57451: ARRAY
57452: PUSH
57453: LD_VAR 0 2
57457: PUSH
57458: LD_INT 2
57460: ARRAY
57461: PUSH
57462: LD_INT 8
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PPUSH
57479: CALL_OW 72
57483: ST_TO_ADDR
// if not vehicles then
57484: LD_VAR 0 1
57488: NOT
57489: IFFALSE 57493
// exit ;
57491: GO 57520
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57493: LD_VAR 0 1
57497: PPUSH
57498: LD_VAR 0 2
57502: PUSH
57503: LD_INT 1
57505: ARRAY
57506: PPUSH
57507: LD_VAR 0 2
57511: PUSH
57512: LD_INT 2
57514: ARRAY
57515: PPUSH
57516: CALL_OW 111
// end ;
57520: LD_VAR 0 3
57524: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57525: LD_INT 0
57527: PPUSH
57528: PPUSH
57529: PPUSH
// if not side or not area then
57530: LD_VAR 0 1
57534: NOT
57535: PUSH
57536: LD_VAR 0 2
57540: NOT
57541: OR
57542: IFFALSE 57546
// exit ;
57544: GO 57665
// tmp := AreaToList ( area , 0 ) ;
57546: LD_ADDR_VAR 0 5
57550: PUSH
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_INT 0
57558: PPUSH
57559: CALL_OW 517
57563: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57564: LD_ADDR_VAR 0 4
57568: PUSH
57569: DOUBLE
57570: LD_INT 1
57572: DEC
57573: ST_TO_ADDR
57574: LD_VAR 0 5
57578: PUSH
57579: LD_INT 1
57581: ARRAY
57582: PUSH
57583: FOR_TO
57584: IFFALSE 57663
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57586: LD_VAR 0 5
57590: PUSH
57591: LD_INT 1
57593: ARRAY
57594: PUSH
57595: LD_VAR 0 4
57599: ARRAY
57600: PPUSH
57601: LD_VAR 0 5
57605: PUSH
57606: LD_INT 2
57608: ARRAY
57609: PUSH
57610: LD_VAR 0 4
57614: ARRAY
57615: PPUSH
57616: CALL_OW 351
57620: IFFALSE 57661
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57622: LD_VAR 0 5
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: LD_VAR 0 4
57635: ARRAY
57636: PPUSH
57637: LD_VAR 0 5
57641: PUSH
57642: LD_INT 2
57644: ARRAY
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: PPUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: CALL_OW 244
// end ;
57661: GO 57583
57663: POP
57664: POP
// end ; end_of_file
57665: LD_VAR 0 3
57669: RET
// export globalGameSaveCounter ; every 0 0$1 do
57670: GO 57672
57672: DISABLE
// begin enable ;
57673: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57674: LD_STRING updateTimer(
57676: PUSH
57677: LD_OWVAR 1
57681: STR
57682: PUSH
57683: LD_STRING );
57685: STR
57686: PPUSH
57687: CALL_OW 559
// end ;
57691: END
// every 0 0$1 do
57692: GO 57694
57694: DISABLE
// begin globalGameSaveCounter := 0 ;
57695: LD_ADDR_EXP 41
57699: PUSH
57700: LD_INT 0
57702: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57703: LD_STRING setGameSaveCounter(0)
57705: PPUSH
57706: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57710: LD_STRING initStreamRollete();
57712: PPUSH
57713: CALL_OW 559
// InitStreamMode ;
57717: CALL 59060 0 0
// DefineStreamItems ( false ) ;
57721: LD_INT 0
57723: PPUSH
57724: CALL 59524 0 1
// end ;
57728: END
// export function SOS_MapStart ( ) ; begin
57729: LD_INT 0
57731: PPUSH
// if streamModeActive then
57732: LD_EXP 42
57736: IFFALSE 57745
// DefineStreamItems ( true ) ;
57738: LD_INT 1
57740: PPUSH
57741: CALL 59524 0 1
// UpdateLuaVariables ( ) ;
57745: CALL 57762 0 0
// UpdateFactoryWaypoints ( ) ;
57749: CALL 72393 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57753: CALL 72650 0 0
// end ;
57757: LD_VAR 0 1
57761: RET
// function UpdateLuaVariables ( ) ; begin
57762: LD_INT 0
57764: PPUSH
// if globalGameSaveCounter then
57765: LD_EXP 41
57769: IFFALSE 57803
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57771: LD_ADDR_EXP 41
57775: PUSH
57776: LD_EXP 41
57780: PPUSH
57781: CALL 53947 0 1
57785: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57786: LD_STRING setGameSaveCounter(
57788: PUSH
57789: LD_EXP 41
57793: STR
57794: PUSH
57795: LD_STRING )
57797: STR
57798: PPUSH
57799: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57803: LD_STRING setGameDifficulty(
57805: PUSH
57806: LD_OWVAR 67
57810: STR
57811: PUSH
57812: LD_STRING )
57814: STR
57815: PPUSH
57816: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
57820: LD_STRING displayDifficulty(
57822: PUSH
57823: LD_OWVAR 67
57827: STR
57828: PUSH
57829: LD_STRING )
57831: STR
57832: PPUSH
57833: CALL_OW 559
// end ;
57837: LD_VAR 0 1
57841: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57842: LD_INT 0
57844: PPUSH
// if p2 = stream_mode then
57845: LD_VAR 0 2
57849: PUSH
57850: LD_INT 100
57852: EQUAL
57853: IFFALSE 58856
// begin if not StreamModeActive then
57855: LD_EXP 42
57859: NOT
57860: IFFALSE 57870
// StreamModeActive := true ;
57862: LD_ADDR_EXP 42
57866: PUSH
57867: LD_INT 1
57869: ST_TO_ADDR
// if p3 = 0 then
57870: LD_VAR 0 3
57874: PUSH
57875: LD_INT 0
57877: EQUAL
57878: IFFALSE 57884
// InitStreamMode ;
57880: CALL 59060 0 0
// if p3 = 1 then
57884: LD_VAR 0 3
57888: PUSH
57889: LD_INT 1
57891: EQUAL
57892: IFFALSE 57902
// sRocket := true ;
57894: LD_ADDR_EXP 47
57898: PUSH
57899: LD_INT 1
57901: ST_TO_ADDR
// if p3 = 2 then
57902: LD_VAR 0 3
57906: PUSH
57907: LD_INT 2
57909: EQUAL
57910: IFFALSE 57920
// sSpeed := true ;
57912: LD_ADDR_EXP 46
57916: PUSH
57917: LD_INT 1
57919: ST_TO_ADDR
// if p3 = 3 then
57920: LD_VAR 0 3
57924: PUSH
57925: LD_INT 3
57927: EQUAL
57928: IFFALSE 57938
// sEngine := true ;
57930: LD_ADDR_EXP 48
57934: PUSH
57935: LD_INT 1
57937: ST_TO_ADDR
// if p3 = 4 then
57938: LD_VAR 0 3
57942: PUSH
57943: LD_INT 4
57945: EQUAL
57946: IFFALSE 57956
// sSpec := true ;
57948: LD_ADDR_EXP 45
57952: PUSH
57953: LD_INT 1
57955: ST_TO_ADDR
// if p3 = 5 then
57956: LD_VAR 0 3
57960: PUSH
57961: LD_INT 5
57963: EQUAL
57964: IFFALSE 57974
// sLevel := true ;
57966: LD_ADDR_EXP 49
57970: PUSH
57971: LD_INT 1
57973: ST_TO_ADDR
// if p3 = 6 then
57974: LD_VAR 0 3
57978: PUSH
57979: LD_INT 6
57981: EQUAL
57982: IFFALSE 57992
// sArmoury := true ;
57984: LD_ADDR_EXP 50
57988: PUSH
57989: LD_INT 1
57991: ST_TO_ADDR
// if p3 = 7 then
57992: LD_VAR 0 3
57996: PUSH
57997: LD_INT 7
57999: EQUAL
58000: IFFALSE 58010
// sRadar := true ;
58002: LD_ADDR_EXP 51
58006: PUSH
58007: LD_INT 1
58009: ST_TO_ADDR
// if p3 = 8 then
58010: LD_VAR 0 3
58014: PUSH
58015: LD_INT 8
58017: EQUAL
58018: IFFALSE 58028
// sBunker := true ;
58020: LD_ADDR_EXP 52
58024: PUSH
58025: LD_INT 1
58027: ST_TO_ADDR
// if p3 = 9 then
58028: LD_VAR 0 3
58032: PUSH
58033: LD_INT 9
58035: EQUAL
58036: IFFALSE 58046
// sHack := true ;
58038: LD_ADDR_EXP 53
58042: PUSH
58043: LD_INT 1
58045: ST_TO_ADDR
// if p3 = 10 then
58046: LD_VAR 0 3
58050: PUSH
58051: LD_INT 10
58053: EQUAL
58054: IFFALSE 58064
// sFire := true ;
58056: LD_ADDR_EXP 54
58060: PUSH
58061: LD_INT 1
58063: ST_TO_ADDR
// if p3 = 11 then
58064: LD_VAR 0 3
58068: PUSH
58069: LD_INT 11
58071: EQUAL
58072: IFFALSE 58082
// sRefresh := true ;
58074: LD_ADDR_EXP 55
58078: PUSH
58079: LD_INT 1
58081: ST_TO_ADDR
// if p3 = 12 then
58082: LD_VAR 0 3
58086: PUSH
58087: LD_INT 12
58089: EQUAL
58090: IFFALSE 58100
// sExp := true ;
58092: LD_ADDR_EXP 56
58096: PUSH
58097: LD_INT 1
58099: ST_TO_ADDR
// if p3 = 13 then
58100: LD_VAR 0 3
58104: PUSH
58105: LD_INT 13
58107: EQUAL
58108: IFFALSE 58118
// sDepot := true ;
58110: LD_ADDR_EXP 57
58114: PUSH
58115: LD_INT 1
58117: ST_TO_ADDR
// if p3 = 14 then
58118: LD_VAR 0 3
58122: PUSH
58123: LD_INT 14
58125: EQUAL
58126: IFFALSE 58136
// sFlag := true ;
58128: LD_ADDR_EXP 58
58132: PUSH
58133: LD_INT 1
58135: ST_TO_ADDR
// if p3 = 15 then
58136: LD_VAR 0 3
58140: PUSH
58141: LD_INT 15
58143: EQUAL
58144: IFFALSE 58154
// sKamikadze := true ;
58146: LD_ADDR_EXP 66
58150: PUSH
58151: LD_INT 1
58153: ST_TO_ADDR
// if p3 = 16 then
58154: LD_VAR 0 3
58158: PUSH
58159: LD_INT 16
58161: EQUAL
58162: IFFALSE 58172
// sTroll := true ;
58164: LD_ADDR_EXP 67
58168: PUSH
58169: LD_INT 1
58171: ST_TO_ADDR
// if p3 = 17 then
58172: LD_VAR 0 3
58176: PUSH
58177: LD_INT 17
58179: EQUAL
58180: IFFALSE 58190
// sSlow := true ;
58182: LD_ADDR_EXP 68
58186: PUSH
58187: LD_INT 1
58189: ST_TO_ADDR
// if p3 = 18 then
58190: LD_VAR 0 3
58194: PUSH
58195: LD_INT 18
58197: EQUAL
58198: IFFALSE 58208
// sLack := true ;
58200: LD_ADDR_EXP 69
58204: PUSH
58205: LD_INT 1
58207: ST_TO_ADDR
// if p3 = 19 then
58208: LD_VAR 0 3
58212: PUSH
58213: LD_INT 19
58215: EQUAL
58216: IFFALSE 58226
// sTank := true ;
58218: LD_ADDR_EXP 71
58222: PUSH
58223: LD_INT 1
58225: ST_TO_ADDR
// if p3 = 20 then
58226: LD_VAR 0 3
58230: PUSH
58231: LD_INT 20
58233: EQUAL
58234: IFFALSE 58244
// sRemote := true ;
58236: LD_ADDR_EXP 72
58240: PUSH
58241: LD_INT 1
58243: ST_TO_ADDR
// if p3 = 21 then
58244: LD_VAR 0 3
58248: PUSH
58249: LD_INT 21
58251: EQUAL
58252: IFFALSE 58262
// sPowell := true ;
58254: LD_ADDR_EXP 73
58258: PUSH
58259: LD_INT 1
58261: ST_TO_ADDR
// if p3 = 22 then
58262: LD_VAR 0 3
58266: PUSH
58267: LD_INT 22
58269: EQUAL
58270: IFFALSE 58280
// sTeleport := true ;
58272: LD_ADDR_EXP 76
58276: PUSH
58277: LD_INT 1
58279: ST_TO_ADDR
// if p3 = 23 then
58280: LD_VAR 0 3
58284: PUSH
58285: LD_INT 23
58287: EQUAL
58288: IFFALSE 58298
// sOilTower := true ;
58290: LD_ADDR_EXP 78
58294: PUSH
58295: LD_INT 1
58297: ST_TO_ADDR
// if p3 = 24 then
58298: LD_VAR 0 3
58302: PUSH
58303: LD_INT 24
58305: EQUAL
58306: IFFALSE 58316
// sShovel := true ;
58308: LD_ADDR_EXP 79
58312: PUSH
58313: LD_INT 1
58315: ST_TO_ADDR
// if p3 = 25 then
58316: LD_VAR 0 3
58320: PUSH
58321: LD_INT 25
58323: EQUAL
58324: IFFALSE 58334
// sSheik := true ;
58326: LD_ADDR_EXP 80
58330: PUSH
58331: LD_INT 1
58333: ST_TO_ADDR
// if p3 = 26 then
58334: LD_VAR 0 3
58338: PUSH
58339: LD_INT 26
58341: EQUAL
58342: IFFALSE 58352
// sEarthquake := true ;
58344: LD_ADDR_EXP 82
58348: PUSH
58349: LD_INT 1
58351: ST_TO_ADDR
// if p3 = 27 then
58352: LD_VAR 0 3
58356: PUSH
58357: LD_INT 27
58359: EQUAL
58360: IFFALSE 58370
// sAI := true ;
58362: LD_ADDR_EXP 83
58366: PUSH
58367: LD_INT 1
58369: ST_TO_ADDR
// if p3 = 28 then
58370: LD_VAR 0 3
58374: PUSH
58375: LD_INT 28
58377: EQUAL
58378: IFFALSE 58388
// sCargo := true ;
58380: LD_ADDR_EXP 86
58384: PUSH
58385: LD_INT 1
58387: ST_TO_ADDR
// if p3 = 29 then
58388: LD_VAR 0 3
58392: PUSH
58393: LD_INT 29
58395: EQUAL
58396: IFFALSE 58406
// sDLaser := true ;
58398: LD_ADDR_EXP 87
58402: PUSH
58403: LD_INT 1
58405: ST_TO_ADDR
// if p3 = 30 then
58406: LD_VAR 0 3
58410: PUSH
58411: LD_INT 30
58413: EQUAL
58414: IFFALSE 58424
// sExchange := true ;
58416: LD_ADDR_EXP 88
58420: PUSH
58421: LD_INT 1
58423: ST_TO_ADDR
// if p3 = 31 then
58424: LD_VAR 0 3
58428: PUSH
58429: LD_INT 31
58431: EQUAL
58432: IFFALSE 58442
// sFac := true ;
58434: LD_ADDR_EXP 89
58438: PUSH
58439: LD_INT 1
58441: ST_TO_ADDR
// if p3 = 32 then
58442: LD_VAR 0 3
58446: PUSH
58447: LD_INT 32
58449: EQUAL
58450: IFFALSE 58460
// sPower := true ;
58452: LD_ADDR_EXP 90
58456: PUSH
58457: LD_INT 1
58459: ST_TO_ADDR
// if p3 = 33 then
58460: LD_VAR 0 3
58464: PUSH
58465: LD_INT 33
58467: EQUAL
58468: IFFALSE 58478
// sRandom := true ;
58470: LD_ADDR_EXP 91
58474: PUSH
58475: LD_INT 1
58477: ST_TO_ADDR
// if p3 = 34 then
58478: LD_VAR 0 3
58482: PUSH
58483: LD_INT 34
58485: EQUAL
58486: IFFALSE 58496
// sShield := true ;
58488: LD_ADDR_EXP 92
58492: PUSH
58493: LD_INT 1
58495: ST_TO_ADDR
// if p3 = 35 then
58496: LD_VAR 0 3
58500: PUSH
58501: LD_INT 35
58503: EQUAL
58504: IFFALSE 58514
// sTime := true ;
58506: LD_ADDR_EXP 93
58510: PUSH
58511: LD_INT 1
58513: ST_TO_ADDR
// if p3 = 36 then
58514: LD_VAR 0 3
58518: PUSH
58519: LD_INT 36
58521: EQUAL
58522: IFFALSE 58532
// sTools := true ;
58524: LD_ADDR_EXP 94
58528: PUSH
58529: LD_INT 1
58531: ST_TO_ADDR
// if p3 = 101 then
58532: LD_VAR 0 3
58536: PUSH
58537: LD_INT 101
58539: EQUAL
58540: IFFALSE 58550
// sSold := true ;
58542: LD_ADDR_EXP 59
58546: PUSH
58547: LD_INT 1
58549: ST_TO_ADDR
// if p3 = 102 then
58550: LD_VAR 0 3
58554: PUSH
58555: LD_INT 102
58557: EQUAL
58558: IFFALSE 58568
// sDiff := true ;
58560: LD_ADDR_EXP 60
58564: PUSH
58565: LD_INT 1
58567: ST_TO_ADDR
// if p3 = 103 then
58568: LD_VAR 0 3
58572: PUSH
58573: LD_INT 103
58575: EQUAL
58576: IFFALSE 58586
// sFog := true ;
58578: LD_ADDR_EXP 63
58582: PUSH
58583: LD_INT 1
58585: ST_TO_ADDR
// if p3 = 104 then
58586: LD_VAR 0 3
58590: PUSH
58591: LD_INT 104
58593: EQUAL
58594: IFFALSE 58604
// sReset := true ;
58596: LD_ADDR_EXP 64
58600: PUSH
58601: LD_INT 1
58603: ST_TO_ADDR
// if p3 = 105 then
58604: LD_VAR 0 3
58608: PUSH
58609: LD_INT 105
58611: EQUAL
58612: IFFALSE 58622
// sSun := true ;
58614: LD_ADDR_EXP 65
58618: PUSH
58619: LD_INT 1
58621: ST_TO_ADDR
// if p3 = 106 then
58622: LD_VAR 0 3
58626: PUSH
58627: LD_INT 106
58629: EQUAL
58630: IFFALSE 58640
// sTiger := true ;
58632: LD_ADDR_EXP 61
58636: PUSH
58637: LD_INT 1
58639: ST_TO_ADDR
// if p3 = 107 then
58640: LD_VAR 0 3
58644: PUSH
58645: LD_INT 107
58647: EQUAL
58648: IFFALSE 58658
// sBomb := true ;
58650: LD_ADDR_EXP 62
58654: PUSH
58655: LD_INT 1
58657: ST_TO_ADDR
// if p3 = 108 then
58658: LD_VAR 0 3
58662: PUSH
58663: LD_INT 108
58665: EQUAL
58666: IFFALSE 58676
// sWound := true ;
58668: LD_ADDR_EXP 70
58672: PUSH
58673: LD_INT 1
58675: ST_TO_ADDR
// if p3 = 109 then
58676: LD_VAR 0 3
58680: PUSH
58681: LD_INT 109
58683: EQUAL
58684: IFFALSE 58694
// sBetray := true ;
58686: LD_ADDR_EXP 74
58690: PUSH
58691: LD_INT 1
58693: ST_TO_ADDR
// if p3 = 110 then
58694: LD_VAR 0 3
58698: PUSH
58699: LD_INT 110
58701: EQUAL
58702: IFFALSE 58712
// sContamin := true ;
58704: LD_ADDR_EXP 75
58708: PUSH
58709: LD_INT 1
58711: ST_TO_ADDR
// if p3 = 111 then
58712: LD_VAR 0 3
58716: PUSH
58717: LD_INT 111
58719: EQUAL
58720: IFFALSE 58730
// sOil := true ;
58722: LD_ADDR_EXP 77
58726: PUSH
58727: LD_INT 1
58729: ST_TO_ADDR
// if p3 = 112 then
58730: LD_VAR 0 3
58734: PUSH
58735: LD_INT 112
58737: EQUAL
58738: IFFALSE 58748
// sStu := true ;
58740: LD_ADDR_EXP 81
58744: PUSH
58745: LD_INT 1
58747: ST_TO_ADDR
// if p3 = 113 then
58748: LD_VAR 0 3
58752: PUSH
58753: LD_INT 113
58755: EQUAL
58756: IFFALSE 58766
// sBazooka := true ;
58758: LD_ADDR_EXP 84
58762: PUSH
58763: LD_INT 1
58765: ST_TO_ADDR
// if p3 = 114 then
58766: LD_VAR 0 3
58770: PUSH
58771: LD_INT 114
58773: EQUAL
58774: IFFALSE 58784
// sMortar := true ;
58776: LD_ADDR_EXP 85
58780: PUSH
58781: LD_INT 1
58783: ST_TO_ADDR
// if p3 = 115 then
58784: LD_VAR 0 3
58788: PUSH
58789: LD_INT 115
58791: EQUAL
58792: IFFALSE 58802
// sRanger := true ;
58794: LD_ADDR_EXP 95
58798: PUSH
58799: LD_INT 1
58801: ST_TO_ADDR
// if p3 = 116 then
58802: LD_VAR 0 3
58806: PUSH
58807: LD_INT 116
58809: EQUAL
58810: IFFALSE 58820
// sComputer := true ;
58812: LD_ADDR_EXP 96
58816: PUSH
58817: LD_INT 1
58819: ST_TO_ADDR
// if p3 = 117 then
58820: LD_VAR 0 3
58824: PUSH
58825: LD_INT 117
58827: EQUAL
58828: IFFALSE 58838
// s30 := true ;
58830: LD_ADDR_EXP 97
58834: PUSH
58835: LD_INT 1
58837: ST_TO_ADDR
// if p3 = 118 then
58838: LD_VAR 0 3
58842: PUSH
58843: LD_INT 118
58845: EQUAL
58846: IFFALSE 58856
// s60 := true ;
58848: LD_ADDR_EXP 98
58852: PUSH
58853: LD_INT 1
58855: ST_TO_ADDR
// end ; if p2 = hack_mode then
58856: LD_VAR 0 2
58860: PUSH
58861: LD_INT 101
58863: EQUAL
58864: IFFALSE 58992
// begin case p3 of 1 :
58866: LD_VAR 0 3
58870: PUSH
58871: LD_INT 1
58873: DOUBLE
58874: EQUAL
58875: IFTRUE 58879
58877: GO 58886
58879: POP
// hHackUnlimitedResources ; 2 :
58880: CALL 71139 0 0
58884: GO 58992
58886: LD_INT 2
58888: DOUBLE
58889: EQUAL
58890: IFTRUE 58894
58892: GO 58901
58894: POP
// hHackSetLevel10 ; 3 :
58895: CALL 71272 0 0
58899: GO 58992
58901: LD_INT 3
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58909
58907: GO 58916
58909: POP
// hHackSetLevel10YourUnits ; 4 :
58910: CALL 71357 0 0
58914: GO 58992
58916: LD_INT 4
58918: DOUBLE
58919: EQUAL
58920: IFTRUE 58924
58922: GO 58931
58924: POP
// hHackInvincible ; 5 :
58925: CALL 71805 0 0
58929: GO 58992
58931: LD_INT 5
58933: DOUBLE
58934: EQUAL
58935: IFTRUE 58939
58937: GO 58946
58939: POP
// hHackInvisible ; 6 :
58940: CALL 71916 0 0
58944: GO 58992
58946: LD_INT 6
58948: DOUBLE
58949: EQUAL
58950: IFTRUE 58954
58952: GO 58961
58954: POP
// hHackChangeYourSide ; 7 :
58955: CALL 71973 0 0
58959: GO 58992
58961: LD_INT 7
58963: DOUBLE
58964: EQUAL
58965: IFTRUE 58969
58967: GO 58976
58969: POP
// hHackChangeUnitSide ; 8 :
58970: CALL 72015 0 0
58974: GO 58992
58976: LD_INT 8
58978: DOUBLE
58979: EQUAL
58980: IFTRUE 58984
58982: GO 58991
58984: POP
// hHackFog ; end ;
58985: CALL 72116 0 0
58989: GO 58992
58991: POP
// end ; if p2 = game_save_mode then
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 102
58999: EQUAL
59000: IFFALSE 59055
// begin if p3 = 1 then
59002: LD_VAR 0 3
59006: PUSH
59007: LD_INT 1
59009: EQUAL
59010: IFFALSE 59022
// globalGameSaveCounter := p4 ;
59012: LD_ADDR_EXP 41
59016: PUSH
59017: LD_VAR 0 4
59021: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59022: LD_VAR 0 3
59026: PUSH
59027: LD_INT 2
59029: EQUAL
59030: PUSH
59031: LD_EXP 41
59035: AND
59036: IFFALSE 59055
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59038: LD_STRING setGameSaveCounter(
59040: PUSH
59041: LD_EXP 41
59045: STR
59046: PUSH
59047: LD_STRING )
59049: STR
59050: PPUSH
59051: CALL_OW 559
// end ; end ;
59055: LD_VAR 0 7
59059: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59060: LD_INT 0
59062: PPUSH
// streamModeActive := false ;
59063: LD_ADDR_EXP 42
59067: PUSH
59068: LD_INT 0
59070: ST_TO_ADDR
// normalCounter := 36 ;
59071: LD_ADDR_EXP 43
59075: PUSH
59076: LD_INT 36
59078: ST_TO_ADDR
// hardcoreCounter := 18 ;
59079: LD_ADDR_EXP 44
59083: PUSH
59084: LD_INT 18
59086: ST_TO_ADDR
// sRocket := false ;
59087: LD_ADDR_EXP 47
59091: PUSH
59092: LD_INT 0
59094: ST_TO_ADDR
// sSpeed := false ;
59095: LD_ADDR_EXP 46
59099: PUSH
59100: LD_INT 0
59102: ST_TO_ADDR
// sEngine := false ;
59103: LD_ADDR_EXP 48
59107: PUSH
59108: LD_INT 0
59110: ST_TO_ADDR
// sSpec := false ;
59111: LD_ADDR_EXP 45
59115: PUSH
59116: LD_INT 0
59118: ST_TO_ADDR
// sLevel := false ;
59119: LD_ADDR_EXP 49
59123: PUSH
59124: LD_INT 0
59126: ST_TO_ADDR
// sArmoury := false ;
59127: LD_ADDR_EXP 50
59131: PUSH
59132: LD_INT 0
59134: ST_TO_ADDR
// sRadar := false ;
59135: LD_ADDR_EXP 51
59139: PUSH
59140: LD_INT 0
59142: ST_TO_ADDR
// sBunker := false ;
59143: LD_ADDR_EXP 52
59147: PUSH
59148: LD_INT 0
59150: ST_TO_ADDR
// sHack := false ;
59151: LD_ADDR_EXP 53
59155: PUSH
59156: LD_INT 0
59158: ST_TO_ADDR
// sFire := false ;
59159: LD_ADDR_EXP 54
59163: PUSH
59164: LD_INT 0
59166: ST_TO_ADDR
// sRefresh := false ;
59167: LD_ADDR_EXP 55
59171: PUSH
59172: LD_INT 0
59174: ST_TO_ADDR
// sExp := false ;
59175: LD_ADDR_EXP 56
59179: PUSH
59180: LD_INT 0
59182: ST_TO_ADDR
// sDepot := false ;
59183: LD_ADDR_EXP 57
59187: PUSH
59188: LD_INT 0
59190: ST_TO_ADDR
// sFlag := false ;
59191: LD_ADDR_EXP 58
59195: PUSH
59196: LD_INT 0
59198: ST_TO_ADDR
// sKamikadze := false ;
59199: LD_ADDR_EXP 66
59203: PUSH
59204: LD_INT 0
59206: ST_TO_ADDR
// sTroll := false ;
59207: LD_ADDR_EXP 67
59211: PUSH
59212: LD_INT 0
59214: ST_TO_ADDR
// sSlow := false ;
59215: LD_ADDR_EXP 68
59219: PUSH
59220: LD_INT 0
59222: ST_TO_ADDR
// sLack := false ;
59223: LD_ADDR_EXP 69
59227: PUSH
59228: LD_INT 0
59230: ST_TO_ADDR
// sTank := false ;
59231: LD_ADDR_EXP 71
59235: PUSH
59236: LD_INT 0
59238: ST_TO_ADDR
// sRemote := false ;
59239: LD_ADDR_EXP 72
59243: PUSH
59244: LD_INT 0
59246: ST_TO_ADDR
// sPowell := false ;
59247: LD_ADDR_EXP 73
59251: PUSH
59252: LD_INT 0
59254: ST_TO_ADDR
// sTeleport := false ;
59255: LD_ADDR_EXP 76
59259: PUSH
59260: LD_INT 0
59262: ST_TO_ADDR
// sOilTower := false ;
59263: LD_ADDR_EXP 78
59267: PUSH
59268: LD_INT 0
59270: ST_TO_ADDR
// sShovel := false ;
59271: LD_ADDR_EXP 79
59275: PUSH
59276: LD_INT 0
59278: ST_TO_ADDR
// sSheik := false ;
59279: LD_ADDR_EXP 80
59283: PUSH
59284: LD_INT 0
59286: ST_TO_ADDR
// sEarthquake := false ;
59287: LD_ADDR_EXP 82
59291: PUSH
59292: LD_INT 0
59294: ST_TO_ADDR
// sAI := false ;
59295: LD_ADDR_EXP 83
59299: PUSH
59300: LD_INT 0
59302: ST_TO_ADDR
// sCargo := false ;
59303: LD_ADDR_EXP 86
59307: PUSH
59308: LD_INT 0
59310: ST_TO_ADDR
// sDLaser := false ;
59311: LD_ADDR_EXP 87
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// sExchange := false ;
59319: LD_ADDR_EXP 88
59323: PUSH
59324: LD_INT 0
59326: ST_TO_ADDR
// sFac := false ;
59327: LD_ADDR_EXP 89
59331: PUSH
59332: LD_INT 0
59334: ST_TO_ADDR
// sPower := false ;
59335: LD_ADDR_EXP 90
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// sRandom := false ;
59343: LD_ADDR_EXP 91
59347: PUSH
59348: LD_INT 0
59350: ST_TO_ADDR
// sShield := false ;
59351: LD_ADDR_EXP 92
59355: PUSH
59356: LD_INT 0
59358: ST_TO_ADDR
// sTime := false ;
59359: LD_ADDR_EXP 93
59363: PUSH
59364: LD_INT 0
59366: ST_TO_ADDR
// sTools := false ;
59367: LD_ADDR_EXP 94
59371: PUSH
59372: LD_INT 0
59374: ST_TO_ADDR
// sSold := false ;
59375: LD_ADDR_EXP 59
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// sDiff := false ;
59383: LD_ADDR_EXP 60
59387: PUSH
59388: LD_INT 0
59390: ST_TO_ADDR
// sFog := false ;
59391: LD_ADDR_EXP 63
59395: PUSH
59396: LD_INT 0
59398: ST_TO_ADDR
// sReset := false ;
59399: LD_ADDR_EXP 64
59403: PUSH
59404: LD_INT 0
59406: ST_TO_ADDR
// sSun := false ;
59407: LD_ADDR_EXP 65
59411: PUSH
59412: LD_INT 0
59414: ST_TO_ADDR
// sTiger := false ;
59415: LD_ADDR_EXP 61
59419: PUSH
59420: LD_INT 0
59422: ST_TO_ADDR
// sBomb := false ;
59423: LD_ADDR_EXP 62
59427: PUSH
59428: LD_INT 0
59430: ST_TO_ADDR
// sWound := false ;
59431: LD_ADDR_EXP 70
59435: PUSH
59436: LD_INT 0
59438: ST_TO_ADDR
// sBetray := false ;
59439: LD_ADDR_EXP 74
59443: PUSH
59444: LD_INT 0
59446: ST_TO_ADDR
// sContamin := false ;
59447: LD_ADDR_EXP 75
59451: PUSH
59452: LD_INT 0
59454: ST_TO_ADDR
// sOil := false ;
59455: LD_ADDR_EXP 77
59459: PUSH
59460: LD_INT 0
59462: ST_TO_ADDR
// sStu := false ;
59463: LD_ADDR_EXP 81
59467: PUSH
59468: LD_INT 0
59470: ST_TO_ADDR
// sBazooka := false ;
59471: LD_ADDR_EXP 84
59475: PUSH
59476: LD_INT 0
59478: ST_TO_ADDR
// sMortar := false ;
59479: LD_ADDR_EXP 85
59483: PUSH
59484: LD_INT 0
59486: ST_TO_ADDR
// sRanger := false ;
59487: LD_ADDR_EXP 95
59491: PUSH
59492: LD_INT 0
59494: ST_TO_ADDR
// sComputer := false ;
59495: LD_ADDR_EXP 96
59499: PUSH
59500: LD_INT 0
59502: ST_TO_ADDR
// s30 := false ;
59503: LD_ADDR_EXP 97
59507: PUSH
59508: LD_INT 0
59510: ST_TO_ADDR
// s60 := false ;
59511: LD_ADDR_EXP 98
59515: PUSH
59516: LD_INT 0
59518: ST_TO_ADDR
// end ;
59519: LD_VAR 0 1
59523: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59524: LD_INT 0
59526: PPUSH
59527: PPUSH
59528: PPUSH
59529: PPUSH
59530: PPUSH
59531: PPUSH
59532: PPUSH
// result := [ ] ;
59533: LD_ADDR_VAR 0 2
59537: PUSH
59538: EMPTY
59539: ST_TO_ADDR
// if campaign_id = 1 then
59540: LD_OWVAR 69
59544: PUSH
59545: LD_INT 1
59547: EQUAL
59548: IFFALSE 62714
// begin case mission_number of 1 :
59550: LD_OWVAR 70
59554: PUSH
59555: LD_INT 1
59557: DOUBLE
59558: EQUAL
59559: IFTRUE 59563
59561: GO 59639
59563: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59564: LD_ADDR_VAR 0 2
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: LD_INT 4
59574: PUSH
59575: LD_INT 11
59577: PUSH
59578: LD_INT 12
59580: PUSH
59581: LD_INT 15
59583: PUSH
59584: LD_INT 16
59586: PUSH
59587: LD_INT 22
59589: PUSH
59590: LD_INT 23
59592: PUSH
59593: LD_INT 26
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 101
59609: PUSH
59610: LD_INT 102
59612: PUSH
59613: LD_INT 106
59615: PUSH
59616: LD_INT 116
59618: PUSH
59619: LD_INT 117
59621: PUSH
59622: LD_INT 118
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: ST_TO_ADDR
59637: GO 62712
59639: LD_INT 2
59641: DOUBLE
59642: EQUAL
59643: IFTRUE 59647
59645: GO 59731
59647: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59648: LD_ADDR_VAR 0 2
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: LD_INT 11
59661: PUSH
59662: LD_INT 12
59664: PUSH
59665: LD_INT 15
59667: PUSH
59668: LD_INT 16
59670: PUSH
59671: LD_INT 22
59673: PUSH
59674: LD_INT 23
59676: PUSH
59677: LD_INT 26
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 101
59693: PUSH
59694: LD_INT 102
59696: PUSH
59697: LD_INT 105
59699: PUSH
59700: LD_INT 106
59702: PUSH
59703: LD_INT 108
59705: PUSH
59706: LD_INT 116
59708: PUSH
59709: LD_INT 117
59711: PUSH
59712: LD_INT 118
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: ST_TO_ADDR
59729: GO 62712
59731: LD_INT 3
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59739
59737: GO 59827
59739: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59740: LD_ADDR_VAR 0 2
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: LD_INT 11
59756: PUSH
59757: LD_INT 12
59759: PUSH
59760: LD_INT 15
59762: PUSH
59763: LD_INT 16
59765: PUSH
59766: LD_INT 22
59768: PUSH
59769: LD_INT 26
59771: PUSH
59772: LD_INT 36
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 101
59789: PUSH
59790: LD_INT 102
59792: PUSH
59793: LD_INT 105
59795: PUSH
59796: LD_INT 106
59798: PUSH
59799: LD_INT 108
59801: PUSH
59802: LD_INT 116
59804: PUSH
59805: LD_INT 117
59807: PUSH
59808: LD_INT 118
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: ST_TO_ADDR
59825: GO 62712
59827: LD_INT 4
59829: DOUBLE
59830: EQUAL
59831: IFTRUE 59835
59833: GO 59931
59835: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59836: LD_ADDR_VAR 0 2
59840: PUSH
59841: LD_INT 2
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: LD_INT 5
59849: PUSH
59850: LD_INT 8
59852: PUSH
59853: LD_INT 11
59855: PUSH
59856: LD_INT 12
59858: PUSH
59859: LD_INT 15
59861: PUSH
59862: LD_INT 16
59864: PUSH
59865: LD_INT 22
59867: PUSH
59868: LD_INT 23
59870: PUSH
59871: LD_INT 26
59873: PUSH
59874: LD_INT 36
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 101
59893: PUSH
59894: LD_INT 102
59896: PUSH
59897: LD_INT 105
59899: PUSH
59900: LD_INT 106
59902: PUSH
59903: LD_INT 108
59905: PUSH
59906: LD_INT 116
59908: PUSH
59909: LD_INT 117
59911: PUSH
59912: LD_INT 118
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: ST_TO_ADDR
59929: GO 62712
59931: LD_INT 5
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59939
59937: GO 60051
59939: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59940: LD_ADDR_VAR 0 2
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 4
59950: PUSH
59951: LD_INT 5
59953: PUSH
59954: LD_INT 6
59956: PUSH
59957: LD_INT 8
59959: PUSH
59960: LD_INT 11
59962: PUSH
59963: LD_INT 12
59965: PUSH
59966: LD_INT 15
59968: PUSH
59969: LD_INT 16
59971: PUSH
59972: LD_INT 22
59974: PUSH
59975: LD_INT 23
59977: PUSH
59978: LD_INT 25
59980: PUSH
59981: LD_INT 26
59983: PUSH
59984: LD_INT 36
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 101
60005: PUSH
60006: LD_INT 102
60008: PUSH
60009: LD_INT 105
60011: PUSH
60012: LD_INT 106
60014: PUSH
60015: LD_INT 108
60017: PUSH
60018: LD_INT 109
60020: PUSH
60021: LD_INT 112
60023: PUSH
60024: LD_INT 116
60026: PUSH
60027: LD_INT 117
60029: PUSH
60030: LD_INT 118
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: ST_TO_ADDR
60049: GO 62712
60051: LD_INT 6
60053: DOUBLE
60054: EQUAL
60055: IFTRUE 60059
60057: GO 60191
60059: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60060: LD_ADDR_VAR 0 2
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: LD_INT 6
60076: PUSH
60077: LD_INT 8
60079: PUSH
60080: LD_INT 11
60082: PUSH
60083: LD_INT 12
60085: PUSH
60086: LD_INT 15
60088: PUSH
60089: LD_INT 16
60091: PUSH
60092: LD_INT 20
60094: PUSH
60095: LD_INT 21
60097: PUSH
60098: LD_INT 22
60100: PUSH
60101: LD_INT 23
60103: PUSH
60104: LD_INT 25
60106: PUSH
60107: LD_INT 26
60109: PUSH
60110: LD_INT 30
60112: PUSH
60113: LD_INT 31
60115: PUSH
60116: LD_INT 32
60118: PUSH
60119: LD_INT 36
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 101
60145: PUSH
60146: LD_INT 102
60148: PUSH
60149: LD_INT 105
60151: PUSH
60152: LD_INT 106
60154: PUSH
60155: LD_INT 108
60157: PUSH
60158: LD_INT 109
60160: PUSH
60161: LD_INT 112
60163: PUSH
60164: LD_INT 116
60166: PUSH
60167: LD_INT 117
60169: PUSH
60170: LD_INT 118
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: ST_TO_ADDR
60189: GO 62712
60191: LD_INT 7
60193: DOUBLE
60194: EQUAL
60195: IFTRUE 60199
60197: GO 60311
60199: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60200: LD_ADDR_VAR 0 2
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: LD_INT 5
60213: PUSH
60214: LD_INT 7
60216: PUSH
60217: LD_INT 11
60219: PUSH
60220: LD_INT 12
60222: PUSH
60223: LD_INT 15
60225: PUSH
60226: LD_INT 16
60228: PUSH
60229: LD_INT 20
60231: PUSH
60232: LD_INT 21
60234: PUSH
60235: LD_INT 22
60237: PUSH
60238: LD_INT 23
60240: PUSH
60241: LD_INT 25
60243: PUSH
60244: LD_INT 26
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 101
60265: PUSH
60266: LD_INT 102
60268: PUSH
60269: LD_INT 103
60271: PUSH
60272: LD_INT 105
60274: PUSH
60275: LD_INT 106
60277: PUSH
60278: LD_INT 108
60280: PUSH
60281: LD_INT 112
60283: PUSH
60284: LD_INT 116
60286: PUSH
60287: LD_INT 117
60289: PUSH
60290: LD_INT 118
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: ST_TO_ADDR
60309: GO 62712
60311: LD_INT 8
60313: DOUBLE
60314: EQUAL
60315: IFTRUE 60319
60317: GO 60459
60319: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60320: LD_ADDR_VAR 0 2
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: LD_INT 5
60333: PUSH
60334: LD_INT 6
60336: PUSH
60337: LD_INT 7
60339: PUSH
60340: LD_INT 8
60342: PUSH
60343: LD_INT 11
60345: PUSH
60346: LD_INT 12
60348: PUSH
60349: LD_INT 15
60351: PUSH
60352: LD_INT 16
60354: PUSH
60355: LD_INT 20
60357: PUSH
60358: LD_INT 21
60360: PUSH
60361: LD_INT 22
60363: PUSH
60364: LD_INT 23
60366: PUSH
60367: LD_INT 25
60369: PUSH
60370: LD_INT 26
60372: PUSH
60373: LD_INT 30
60375: PUSH
60376: LD_INT 31
60378: PUSH
60379: LD_INT 32
60381: PUSH
60382: LD_INT 36
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 101
60409: PUSH
60410: LD_INT 102
60412: PUSH
60413: LD_INT 103
60415: PUSH
60416: LD_INT 105
60418: PUSH
60419: LD_INT 106
60421: PUSH
60422: LD_INT 108
60424: PUSH
60425: LD_INT 109
60427: PUSH
60428: LD_INT 112
60430: PUSH
60431: LD_INT 116
60433: PUSH
60434: LD_INT 117
60436: PUSH
60437: LD_INT 118
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: ST_TO_ADDR
60457: GO 62712
60459: LD_INT 9
60461: DOUBLE
60462: EQUAL
60463: IFTRUE 60467
60465: GO 60615
60467: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60468: LD_ADDR_VAR 0 2
60472: PUSH
60473: LD_INT 2
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: LD_INT 6
60484: PUSH
60485: LD_INT 7
60487: PUSH
60488: LD_INT 8
60490: PUSH
60491: LD_INT 11
60493: PUSH
60494: LD_INT 12
60496: PUSH
60497: LD_INT 15
60499: PUSH
60500: LD_INT 16
60502: PUSH
60503: LD_INT 20
60505: PUSH
60506: LD_INT 21
60508: PUSH
60509: LD_INT 22
60511: PUSH
60512: LD_INT 23
60514: PUSH
60515: LD_INT 25
60517: PUSH
60518: LD_INT 26
60520: PUSH
60521: LD_INT 28
60523: PUSH
60524: LD_INT 30
60526: PUSH
60527: LD_INT 31
60529: PUSH
60530: LD_INT 32
60532: PUSH
60533: LD_INT 36
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 101
60561: PUSH
60562: LD_INT 102
60564: PUSH
60565: LD_INT 103
60567: PUSH
60568: LD_INT 105
60570: PUSH
60571: LD_INT 106
60573: PUSH
60574: LD_INT 108
60576: PUSH
60577: LD_INT 109
60579: PUSH
60580: LD_INT 112
60582: PUSH
60583: LD_INT 114
60585: PUSH
60586: LD_INT 116
60588: PUSH
60589: LD_INT 117
60591: PUSH
60592: LD_INT 118
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: ST_TO_ADDR
60613: GO 62712
60615: LD_INT 10
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60623
60621: GO 60819
60623: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60624: LD_ADDR_VAR 0 2
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: LD_INT 4
60634: PUSH
60635: LD_INT 5
60637: PUSH
60638: LD_INT 6
60640: PUSH
60641: LD_INT 7
60643: PUSH
60644: LD_INT 8
60646: PUSH
60647: LD_INT 9
60649: PUSH
60650: LD_INT 10
60652: PUSH
60653: LD_INT 11
60655: PUSH
60656: LD_INT 12
60658: PUSH
60659: LD_INT 13
60661: PUSH
60662: LD_INT 14
60664: PUSH
60665: LD_INT 15
60667: PUSH
60668: LD_INT 16
60670: PUSH
60671: LD_INT 17
60673: PUSH
60674: LD_INT 18
60676: PUSH
60677: LD_INT 19
60679: PUSH
60680: LD_INT 20
60682: PUSH
60683: LD_INT 21
60685: PUSH
60686: LD_INT 22
60688: PUSH
60689: LD_INT 23
60691: PUSH
60692: LD_INT 24
60694: PUSH
60695: LD_INT 25
60697: PUSH
60698: LD_INT 26
60700: PUSH
60701: LD_INT 28
60703: PUSH
60704: LD_INT 30
60706: PUSH
60707: LD_INT 31
60709: PUSH
60710: LD_INT 32
60712: PUSH
60713: LD_INT 36
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 101
60749: PUSH
60750: LD_INT 102
60752: PUSH
60753: LD_INT 103
60755: PUSH
60756: LD_INT 104
60758: PUSH
60759: LD_INT 105
60761: PUSH
60762: LD_INT 106
60764: PUSH
60765: LD_INT 107
60767: PUSH
60768: LD_INT 108
60770: PUSH
60771: LD_INT 109
60773: PUSH
60774: LD_INT 110
60776: PUSH
60777: LD_INT 111
60779: PUSH
60780: LD_INT 112
60782: PUSH
60783: LD_INT 114
60785: PUSH
60786: LD_INT 116
60788: PUSH
60789: LD_INT 117
60791: PUSH
60792: LD_INT 118
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: ST_TO_ADDR
60817: GO 62712
60819: LD_INT 11
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60827
60825: GO 61031
60827: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60828: LD_ADDR_VAR 0 2
60832: PUSH
60833: LD_INT 2
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 4
60841: PUSH
60842: LD_INT 5
60844: PUSH
60845: LD_INT 6
60847: PUSH
60848: LD_INT 7
60850: PUSH
60851: LD_INT 8
60853: PUSH
60854: LD_INT 9
60856: PUSH
60857: LD_INT 10
60859: PUSH
60860: LD_INT 11
60862: PUSH
60863: LD_INT 12
60865: PUSH
60866: LD_INT 13
60868: PUSH
60869: LD_INT 14
60871: PUSH
60872: LD_INT 15
60874: PUSH
60875: LD_INT 16
60877: PUSH
60878: LD_INT 17
60880: PUSH
60881: LD_INT 18
60883: PUSH
60884: LD_INT 19
60886: PUSH
60887: LD_INT 20
60889: PUSH
60890: LD_INT 21
60892: PUSH
60893: LD_INT 22
60895: PUSH
60896: LD_INT 23
60898: PUSH
60899: LD_INT 24
60901: PUSH
60902: LD_INT 25
60904: PUSH
60905: LD_INT 26
60907: PUSH
60908: LD_INT 28
60910: PUSH
60911: LD_INT 30
60913: PUSH
60914: LD_INT 31
60916: PUSH
60917: LD_INT 32
60919: PUSH
60920: LD_INT 34
60922: PUSH
60923: LD_INT 36
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 101
60961: PUSH
60962: LD_INT 102
60964: PUSH
60965: LD_INT 103
60967: PUSH
60968: LD_INT 104
60970: PUSH
60971: LD_INT 105
60973: PUSH
60974: LD_INT 106
60976: PUSH
60977: LD_INT 107
60979: PUSH
60980: LD_INT 108
60982: PUSH
60983: LD_INT 109
60985: PUSH
60986: LD_INT 110
60988: PUSH
60989: LD_INT 111
60991: PUSH
60992: LD_INT 112
60994: PUSH
60995: LD_INT 114
60997: PUSH
60998: LD_INT 116
61000: PUSH
61001: LD_INT 117
61003: PUSH
61004: LD_INT 118
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: ST_TO_ADDR
61029: GO 62712
61031: LD_INT 12
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61039
61037: GO 61259
61039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61040: LD_ADDR_VAR 0 2
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: LD_INT 6
61062: PUSH
61063: LD_INT 7
61065: PUSH
61066: LD_INT 8
61068: PUSH
61069: LD_INT 9
61071: PUSH
61072: LD_INT 10
61074: PUSH
61075: LD_INT 11
61077: PUSH
61078: LD_INT 12
61080: PUSH
61081: LD_INT 13
61083: PUSH
61084: LD_INT 14
61086: PUSH
61087: LD_INT 15
61089: PUSH
61090: LD_INT 16
61092: PUSH
61093: LD_INT 17
61095: PUSH
61096: LD_INT 18
61098: PUSH
61099: LD_INT 19
61101: PUSH
61102: LD_INT 20
61104: PUSH
61105: LD_INT 21
61107: PUSH
61108: LD_INT 22
61110: PUSH
61111: LD_INT 23
61113: PUSH
61114: LD_INT 24
61116: PUSH
61117: LD_INT 25
61119: PUSH
61120: LD_INT 26
61122: PUSH
61123: LD_INT 27
61125: PUSH
61126: LD_INT 28
61128: PUSH
61129: LD_INT 30
61131: PUSH
61132: LD_INT 31
61134: PUSH
61135: LD_INT 32
61137: PUSH
61138: LD_INT 33
61140: PUSH
61141: LD_INT 34
61143: PUSH
61144: LD_INT 36
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 101
61185: PUSH
61186: LD_INT 102
61188: PUSH
61189: LD_INT 103
61191: PUSH
61192: LD_INT 104
61194: PUSH
61195: LD_INT 105
61197: PUSH
61198: LD_INT 106
61200: PUSH
61201: LD_INT 107
61203: PUSH
61204: LD_INT 108
61206: PUSH
61207: LD_INT 109
61209: PUSH
61210: LD_INT 110
61212: PUSH
61213: LD_INT 111
61215: PUSH
61216: LD_INT 112
61218: PUSH
61219: LD_INT 113
61221: PUSH
61222: LD_INT 114
61224: PUSH
61225: LD_INT 116
61227: PUSH
61228: LD_INT 117
61230: PUSH
61231: LD_INT 118
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: ST_TO_ADDR
61257: GO 62712
61259: LD_INT 13
61261: DOUBLE
61262: EQUAL
61263: IFTRUE 61267
61265: GO 61475
61267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61268: LD_ADDR_VAR 0 2
61272: PUSH
61273: LD_INT 1
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 3
61281: PUSH
61282: LD_INT 4
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: LD_INT 8
61290: PUSH
61291: LD_INT 9
61293: PUSH
61294: LD_INT 10
61296: PUSH
61297: LD_INT 11
61299: PUSH
61300: LD_INT 12
61302: PUSH
61303: LD_INT 14
61305: PUSH
61306: LD_INT 15
61308: PUSH
61309: LD_INT 16
61311: PUSH
61312: LD_INT 17
61314: PUSH
61315: LD_INT 18
61317: PUSH
61318: LD_INT 19
61320: PUSH
61321: LD_INT 20
61323: PUSH
61324: LD_INT 21
61326: PUSH
61327: LD_INT 22
61329: PUSH
61330: LD_INT 23
61332: PUSH
61333: LD_INT 24
61335: PUSH
61336: LD_INT 25
61338: PUSH
61339: LD_INT 26
61341: PUSH
61342: LD_INT 27
61344: PUSH
61345: LD_INT 28
61347: PUSH
61348: LD_INT 30
61350: PUSH
61351: LD_INT 31
61353: PUSH
61354: LD_INT 32
61356: PUSH
61357: LD_INT 33
61359: PUSH
61360: LD_INT 34
61362: PUSH
61363: LD_INT 36
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 101
61401: PUSH
61402: LD_INT 102
61404: PUSH
61405: LD_INT 103
61407: PUSH
61408: LD_INT 104
61410: PUSH
61411: LD_INT 105
61413: PUSH
61414: LD_INT 106
61416: PUSH
61417: LD_INT 107
61419: PUSH
61420: LD_INT 108
61422: PUSH
61423: LD_INT 109
61425: PUSH
61426: LD_INT 110
61428: PUSH
61429: LD_INT 111
61431: PUSH
61432: LD_INT 112
61434: PUSH
61435: LD_INT 113
61437: PUSH
61438: LD_INT 114
61440: PUSH
61441: LD_INT 116
61443: PUSH
61444: LD_INT 117
61446: PUSH
61447: LD_INT 118
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: ST_TO_ADDR
61473: GO 62712
61475: LD_INT 14
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61707
61483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61484: LD_ADDR_VAR 0 2
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: LD_INT 3
61497: PUSH
61498: LD_INT 4
61500: PUSH
61501: LD_INT 5
61503: PUSH
61504: LD_INT 6
61506: PUSH
61507: LD_INT 7
61509: PUSH
61510: LD_INT 8
61512: PUSH
61513: LD_INT 9
61515: PUSH
61516: LD_INT 10
61518: PUSH
61519: LD_INT 11
61521: PUSH
61522: LD_INT 12
61524: PUSH
61525: LD_INT 13
61527: PUSH
61528: LD_INT 14
61530: PUSH
61531: LD_INT 15
61533: PUSH
61534: LD_INT 16
61536: PUSH
61537: LD_INT 17
61539: PUSH
61540: LD_INT 18
61542: PUSH
61543: LD_INT 19
61545: PUSH
61546: LD_INT 20
61548: PUSH
61549: LD_INT 21
61551: PUSH
61552: LD_INT 22
61554: PUSH
61555: LD_INT 23
61557: PUSH
61558: LD_INT 24
61560: PUSH
61561: LD_INT 25
61563: PUSH
61564: LD_INT 26
61566: PUSH
61567: LD_INT 27
61569: PUSH
61570: LD_INT 28
61572: PUSH
61573: LD_INT 29
61575: PUSH
61576: LD_INT 30
61578: PUSH
61579: LD_INT 31
61581: PUSH
61582: LD_INT 32
61584: PUSH
61585: LD_INT 33
61587: PUSH
61588: LD_INT 34
61590: PUSH
61591: LD_INT 36
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 101
61633: PUSH
61634: LD_INT 102
61636: PUSH
61637: LD_INT 103
61639: PUSH
61640: LD_INT 104
61642: PUSH
61643: LD_INT 105
61645: PUSH
61646: LD_INT 106
61648: PUSH
61649: LD_INT 107
61651: PUSH
61652: LD_INT 108
61654: PUSH
61655: LD_INT 109
61657: PUSH
61658: LD_INT 110
61660: PUSH
61661: LD_INT 111
61663: PUSH
61664: LD_INT 112
61666: PUSH
61667: LD_INT 113
61669: PUSH
61670: LD_INT 114
61672: PUSH
61673: LD_INT 116
61675: PUSH
61676: LD_INT 117
61678: PUSH
61679: LD_INT 118
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: ST_TO_ADDR
61705: GO 62712
61707: LD_INT 15
61709: DOUBLE
61710: EQUAL
61711: IFTRUE 61715
61713: GO 61939
61715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61716: LD_ADDR_VAR 0 2
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 4
61732: PUSH
61733: LD_INT 5
61735: PUSH
61736: LD_INT 6
61738: PUSH
61739: LD_INT 7
61741: PUSH
61742: LD_INT 8
61744: PUSH
61745: LD_INT 9
61747: PUSH
61748: LD_INT 10
61750: PUSH
61751: LD_INT 11
61753: PUSH
61754: LD_INT 12
61756: PUSH
61757: LD_INT 13
61759: PUSH
61760: LD_INT 14
61762: PUSH
61763: LD_INT 15
61765: PUSH
61766: LD_INT 16
61768: PUSH
61769: LD_INT 17
61771: PUSH
61772: LD_INT 18
61774: PUSH
61775: LD_INT 19
61777: PUSH
61778: LD_INT 20
61780: PUSH
61781: LD_INT 21
61783: PUSH
61784: LD_INT 22
61786: PUSH
61787: LD_INT 23
61789: PUSH
61790: LD_INT 24
61792: PUSH
61793: LD_INT 25
61795: PUSH
61796: LD_INT 26
61798: PUSH
61799: LD_INT 27
61801: PUSH
61802: LD_INT 28
61804: PUSH
61805: LD_INT 29
61807: PUSH
61808: LD_INT 30
61810: PUSH
61811: LD_INT 31
61813: PUSH
61814: LD_INT 32
61816: PUSH
61817: LD_INT 33
61819: PUSH
61820: LD_INT 34
61822: PUSH
61823: LD_INT 36
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 101
61865: PUSH
61866: LD_INT 102
61868: PUSH
61869: LD_INT 103
61871: PUSH
61872: LD_INT 104
61874: PUSH
61875: LD_INT 105
61877: PUSH
61878: LD_INT 106
61880: PUSH
61881: LD_INT 107
61883: PUSH
61884: LD_INT 108
61886: PUSH
61887: LD_INT 109
61889: PUSH
61890: LD_INT 110
61892: PUSH
61893: LD_INT 111
61895: PUSH
61896: LD_INT 112
61898: PUSH
61899: LD_INT 113
61901: PUSH
61902: LD_INT 114
61904: PUSH
61905: LD_INT 116
61907: PUSH
61908: LD_INT 117
61910: PUSH
61911: LD_INT 118
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: ST_TO_ADDR
61937: GO 62712
61939: LD_INT 16
61941: DOUBLE
61942: EQUAL
61943: IFTRUE 61947
61945: GO 62083
61947: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61948: LD_ADDR_VAR 0 2
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: LD_INT 5
61961: PUSH
61962: LD_INT 7
61964: PUSH
61965: LD_INT 11
61967: PUSH
61968: LD_INT 12
61970: PUSH
61971: LD_INT 15
61973: PUSH
61974: LD_INT 16
61976: PUSH
61977: LD_INT 20
61979: PUSH
61980: LD_INT 21
61982: PUSH
61983: LD_INT 22
61985: PUSH
61986: LD_INT 23
61988: PUSH
61989: LD_INT 25
61991: PUSH
61992: LD_INT 26
61994: PUSH
61995: LD_INT 30
61997: PUSH
61998: LD_INT 31
62000: PUSH
62001: LD_INT 32
62003: PUSH
62004: LD_INT 33
62006: PUSH
62007: LD_INT 34
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 101
62033: PUSH
62034: LD_INT 102
62036: PUSH
62037: LD_INT 103
62039: PUSH
62040: LD_INT 106
62042: PUSH
62043: LD_INT 108
62045: PUSH
62046: LD_INT 112
62048: PUSH
62049: LD_INT 113
62051: PUSH
62052: LD_INT 114
62054: PUSH
62055: LD_INT 116
62057: PUSH
62058: LD_INT 117
62060: PUSH
62061: LD_INT 118
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: ST_TO_ADDR
62081: GO 62712
62083: LD_INT 17
62085: DOUBLE
62086: EQUAL
62087: IFTRUE 62091
62089: GO 62315
62091: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62092: LD_ADDR_VAR 0 2
62096: PUSH
62097: LD_INT 1
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 4
62108: PUSH
62109: LD_INT 5
62111: PUSH
62112: LD_INT 6
62114: PUSH
62115: LD_INT 7
62117: PUSH
62118: LD_INT 8
62120: PUSH
62121: LD_INT 9
62123: PUSH
62124: LD_INT 10
62126: PUSH
62127: LD_INT 11
62129: PUSH
62130: LD_INT 12
62132: PUSH
62133: LD_INT 13
62135: PUSH
62136: LD_INT 14
62138: PUSH
62139: LD_INT 15
62141: PUSH
62142: LD_INT 16
62144: PUSH
62145: LD_INT 17
62147: PUSH
62148: LD_INT 18
62150: PUSH
62151: LD_INT 19
62153: PUSH
62154: LD_INT 20
62156: PUSH
62157: LD_INT 21
62159: PUSH
62160: LD_INT 22
62162: PUSH
62163: LD_INT 23
62165: PUSH
62166: LD_INT 24
62168: PUSH
62169: LD_INT 25
62171: PUSH
62172: LD_INT 26
62174: PUSH
62175: LD_INT 27
62177: PUSH
62178: LD_INT 28
62180: PUSH
62181: LD_INT 29
62183: PUSH
62184: LD_INT 30
62186: PUSH
62187: LD_INT 31
62189: PUSH
62190: LD_INT 32
62192: PUSH
62193: LD_INT 33
62195: PUSH
62196: LD_INT 34
62198: PUSH
62199: LD_INT 36
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 101
62241: PUSH
62242: LD_INT 102
62244: PUSH
62245: LD_INT 103
62247: PUSH
62248: LD_INT 104
62250: PUSH
62251: LD_INT 105
62253: PUSH
62254: LD_INT 106
62256: PUSH
62257: LD_INT 107
62259: PUSH
62260: LD_INT 108
62262: PUSH
62263: LD_INT 109
62265: PUSH
62266: LD_INT 110
62268: PUSH
62269: LD_INT 111
62271: PUSH
62272: LD_INT 112
62274: PUSH
62275: LD_INT 113
62277: PUSH
62278: LD_INT 114
62280: PUSH
62281: LD_INT 116
62283: PUSH
62284: LD_INT 117
62286: PUSH
62287: LD_INT 118
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: ST_TO_ADDR
62313: GO 62712
62315: LD_INT 18
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62323
62321: GO 62471
62323: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62324: LD_ADDR_VAR 0 2
62328: PUSH
62329: LD_INT 2
62331: PUSH
62332: LD_INT 4
62334: PUSH
62335: LD_INT 5
62337: PUSH
62338: LD_INT 7
62340: PUSH
62341: LD_INT 11
62343: PUSH
62344: LD_INT 12
62346: PUSH
62347: LD_INT 15
62349: PUSH
62350: LD_INT 16
62352: PUSH
62353: LD_INT 20
62355: PUSH
62356: LD_INT 21
62358: PUSH
62359: LD_INT 22
62361: PUSH
62362: LD_INT 23
62364: PUSH
62365: LD_INT 25
62367: PUSH
62368: LD_INT 26
62370: PUSH
62371: LD_INT 30
62373: PUSH
62374: LD_INT 31
62376: PUSH
62377: LD_INT 32
62379: PUSH
62380: LD_INT 33
62382: PUSH
62383: LD_INT 34
62385: PUSH
62386: LD_INT 35
62388: PUSH
62389: LD_INT 36
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 101
62417: PUSH
62418: LD_INT 102
62420: PUSH
62421: LD_INT 103
62423: PUSH
62424: LD_INT 106
62426: PUSH
62427: LD_INT 108
62429: PUSH
62430: LD_INT 112
62432: PUSH
62433: LD_INT 113
62435: PUSH
62436: LD_INT 114
62438: PUSH
62439: LD_INT 115
62441: PUSH
62442: LD_INT 116
62444: PUSH
62445: LD_INT 117
62447: PUSH
62448: LD_INT 118
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: ST_TO_ADDR
62469: GO 62712
62471: LD_INT 19
62473: DOUBLE
62474: EQUAL
62475: IFTRUE 62479
62477: GO 62711
62479: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: LD_INT 4
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: LD_INT 6
62502: PUSH
62503: LD_INT 7
62505: PUSH
62506: LD_INT 8
62508: PUSH
62509: LD_INT 9
62511: PUSH
62512: LD_INT 10
62514: PUSH
62515: LD_INT 11
62517: PUSH
62518: LD_INT 12
62520: PUSH
62521: LD_INT 13
62523: PUSH
62524: LD_INT 14
62526: PUSH
62527: LD_INT 15
62529: PUSH
62530: LD_INT 16
62532: PUSH
62533: LD_INT 17
62535: PUSH
62536: LD_INT 18
62538: PUSH
62539: LD_INT 19
62541: PUSH
62542: LD_INT 20
62544: PUSH
62545: LD_INT 21
62547: PUSH
62548: LD_INT 22
62550: PUSH
62551: LD_INT 23
62553: PUSH
62554: LD_INT 24
62556: PUSH
62557: LD_INT 25
62559: PUSH
62560: LD_INT 26
62562: PUSH
62563: LD_INT 27
62565: PUSH
62566: LD_INT 28
62568: PUSH
62569: LD_INT 29
62571: PUSH
62572: LD_INT 30
62574: PUSH
62575: LD_INT 31
62577: PUSH
62578: LD_INT 32
62580: PUSH
62581: LD_INT 33
62583: PUSH
62584: LD_INT 34
62586: PUSH
62587: LD_INT 35
62589: PUSH
62590: LD_INT 36
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 101
62633: PUSH
62634: LD_INT 102
62636: PUSH
62637: LD_INT 103
62639: PUSH
62640: LD_INT 104
62642: PUSH
62643: LD_INT 105
62645: PUSH
62646: LD_INT 106
62648: PUSH
62649: LD_INT 107
62651: PUSH
62652: LD_INT 108
62654: PUSH
62655: LD_INT 109
62657: PUSH
62658: LD_INT 110
62660: PUSH
62661: LD_INT 111
62663: PUSH
62664: LD_INT 112
62666: PUSH
62667: LD_INT 113
62669: PUSH
62670: LD_INT 114
62672: PUSH
62673: LD_INT 115
62675: PUSH
62676: LD_INT 116
62678: PUSH
62679: LD_INT 117
62681: PUSH
62682: LD_INT 118
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: ST_TO_ADDR
62709: GO 62712
62711: POP
// end else
62712: GO 62943
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62714: LD_ADDR_VAR 0 2
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: LD_INT 4
62730: PUSH
62731: LD_INT 5
62733: PUSH
62734: LD_INT 6
62736: PUSH
62737: LD_INT 7
62739: PUSH
62740: LD_INT 8
62742: PUSH
62743: LD_INT 9
62745: PUSH
62746: LD_INT 10
62748: PUSH
62749: LD_INT 11
62751: PUSH
62752: LD_INT 12
62754: PUSH
62755: LD_INT 13
62757: PUSH
62758: LD_INT 14
62760: PUSH
62761: LD_INT 15
62763: PUSH
62764: LD_INT 16
62766: PUSH
62767: LD_INT 17
62769: PUSH
62770: LD_INT 18
62772: PUSH
62773: LD_INT 19
62775: PUSH
62776: LD_INT 20
62778: PUSH
62779: LD_INT 21
62781: PUSH
62782: LD_INT 22
62784: PUSH
62785: LD_INT 23
62787: PUSH
62788: LD_INT 24
62790: PUSH
62791: LD_INT 25
62793: PUSH
62794: LD_INT 26
62796: PUSH
62797: LD_INT 27
62799: PUSH
62800: LD_INT 28
62802: PUSH
62803: LD_INT 29
62805: PUSH
62806: LD_INT 30
62808: PUSH
62809: LD_INT 31
62811: PUSH
62812: LD_INT 32
62814: PUSH
62815: LD_INT 33
62817: PUSH
62818: LD_INT 34
62820: PUSH
62821: LD_INT 35
62823: PUSH
62824: LD_INT 36
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 101
62867: PUSH
62868: LD_INT 102
62870: PUSH
62871: LD_INT 103
62873: PUSH
62874: LD_INT 104
62876: PUSH
62877: LD_INT 105
62879: PUSH
62880: LD_INT 106
62882: PUSH
62883: LD_INT 107
62885: PUSH
62886: LD_INT 108
62888: PUSH
62889: LD_INT 109
62891: PUSH
62892: LD_INT 110
62894: PUSH
62895: LD_INT 111
62897: PUSH
62898: LD_INT 112
62900: PUSH
62901: LD_INT 113
62903: PUSH
62904: LD_INT 114
62906: PUSH
62907: LD_INT 115
62909: PUSH
62910: LD_INT 116
62912: PUSH
62913: LD_INT 117
62915: PUSH
62916: LD_INT 118
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: ST_TO_ADDR
// if result then
62943: LD_VAR 0 2
62947: IFFALSE 63733
// begin normal :=  ;
62949: LD_ADDR_VAR 0 5
62953: PUSH
62954: LD_STRING 
62956: ST_TO_ADDR
// hardcore :=  ;
62957: LD_ADDR_VAR 0 6
62961: PUSH
62962: LD_STRING 
62964: ST_TO_ADDR
// active :=  ;
62965: LD_ADDR_VAR 0 7
62969: PUSH
62970: LD_STRING 
62972: ST_TO_ADDR
// for i = 1 to normalCounter do
62973: LD_ADDR_VAR 0 8
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_EXP 43
62987: PUSH
62988: FOR_TO
62989: IFFALSE 63090
// begin tmp := 0 ;
62991: LD_ADDR_VAR 0 3
62995: PUSH
62996: LD_STRING 0
62998: ST_TO_ADDR
// if result [ 1 ] then
62999: LD_VAR 0 2
63003: PUSH
63004: LD_INT 1
63006: ARRAY
63007: IFFALSE 63072
// if result [ 1 ] [ 1 ] = i then
63009: LD_VAR 0 2
63013: PUSH
63014: LD_INT 1
63016: ARRAY
63017: PUSH
63018: LD_INT 1
63020: ARRAY
63021: PUSH
63022: LD_VAR 0 8
63026: EQUAL
63027: IFFALSE 63072
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63029: LD_ADDR_VAR 0 2
63033: PUSH
63034: LD_VAR 0 2
63038: PPUSH
63039: LD_INT 1
63041: PPUSH
63042: LD_VAR 0 2
63046: PUSH
63047: LD_INT 1
63049: ARRAY
63050: PPUSH
63051: LD_INT 1
63053: PPUSH
63054: CALL_OW 3
63058: PPUSH
63059: CALL_OW 1
63063: ST_TO_ADDR
// tmp := 1 ;
63064: LD_ADDR_VAR 0 3
63068: PUSH
63069: LD_STRING 1
63071: ST_TO_ADDR
// end ; normal := normal & tmp ;
63072: LD_ADDR_VAR 0 5
63076: PUSH
63077: LD_VAR 0 5
63081: PUSH
63082: LD_VAR 0 3
63086: STR
63087: ST_TO_ADDR
// end ;
63088: GO 62988
63090: POP
63091: POP
// for i = 1 to hardcoreCounter do
63092: LD_ADDR_VAR 0 8
63096: PUSH
63097: DOUBLE
63098: LD_INT 1
63100: DEC
63101: ST_TO_ADDR
63102: LD_EXP 44
63106: PUSH
63107: FOR_TO
63108: IFFALSE 63213
// begin tmp := 0 ;
63110: LD_ADDR_VAR 0 3
63114: PUSH
63115: LD_STRING 0
63117: ST_TO_ADDR
// if result [ 2 ] then
63118: LD_VAR 0 2
63122: PUSH
63123: LD_INT 2
63125: ARRAY
63126: IFFALSE 63195
// if result [ 2 ] [ 1 ] = 100 + i then
63128: LD_VAR 0 2
63132: PUSH
63133: LD_INT 2
63135: ARRAY
63136: PUSH
63137: LD_INT 1
63139: ARRAY
63140: PUSH
63141: LD_INT 100
63143: PUSH
63144: LD_VAR 0 8
63148: PLUS
63149: EQUAL
63150: IFFALSE 63195
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63152: LD_ADDR_VAR 0 2
63156: PUSH
63157: LD_VAR 0 2
63161: PPUSH
63162: LD_INT 2
63164: PPUSH
63165: LD_VAR 0 2
63169: PUSH
63170: LD_INT 2
63172: ARRAY
63173: PPUSH
63174: LD_INT 1
63176: PPUSH
63177: CALL_OW 3
63181: PPUSH
63182: CALL_OW 1
63186: ST_TO_ADDR
// tmp := 1 ;
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_STRING 1
63194: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63195: LD_ADDR_VAR 0 6
63199: PUSH
63200: LD_VAR 0 6
63204: PUSH
63205: LD_VAR 0 3
63209: STR
63210: ST_TO_ADDR
// end ;
63211: GO 63107
63213: POP
63214: POP
// if isGameLoad then
63215: LD_VAR 0 1
63219: IFFALSE 63694
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63221: LD_ADDR_VAR 0 4
63225: PUSH
63226: LD_EXP 47
63230: PUSH
63231: LD_EXP 46
63235: PUSH
63236: LD_EXP 48
63240: PUSH
63241: LD_EXP 45
63245: PUSH
63246: LD_EXP 49
63250: PUSH
63251: LD_EXP 50
63255: PUSH
63256: LD_EXP 51
63260: PUSH
63261: LD_EXP 52
63265: PUSH
63266: LD_EXP 53
63270: PUSH
63271: LD_EXP 54
63275: PUSH
63276: LD_EXP 55
63280: PUSH
63281: LD_EXP 56
63285: PUSH
63286: LD_EXP 57
63290: PUSH
63291: LD_EXP 58
63295: PUSH
63296: LD_EXP 66
63300: PUSH
63301: LD_EXP 67
63305: PUSH
63306: LD_EXP 68
63310: PUSH
63311: LD_EXP 69
63315: PUSH
63316: LD_EXP 71
63320: PUSH
63321: LD_EXP 72
63325: PUSH
63326: LD_EXP 73
63330: PUSH
63331: LD_EXP 76
63335: PUSH
63336: LD_EXP 78
63340: PUSH
63341: LD_EXP 79
63345: PUSH
63346: LD_EXP 80
63350: PUSH
63351: LD_EXP 82
63355: PUSH
63356: LD_EXP 83
63360: PUSH
63361: LD_EXP 86
63365: PUSH
63366: LD_EXP 87
63370: PUSH
63371: LD_EXP 88
63375: PUSH
63376: LD_EXP 89
63380: PUSH
63381: LD_EXP 90
63385: PUSH
63386: LD_EXP 91
63390: PUSH
63391: LD_EXP 92
63395: PUSH
63396: LD_EXP 93
63400: PUSH
63401: LD_EXP 94
63405: PUSH
63406: LD_EXP 59
63410: PUSH
63411: LD_EXP 60
63415: PUSH
63416: LD_EXP 63
63420: PUSH
63421: LD_EXP 64
63425: PUSH
63426: LD_EXP 65
63430: PUSH
63431: LD_EXP 61
63435: PUSH
63436: LD_EXP 62
63440: PUSH
63441: LD_EXP 70
63445: PUSH
63446: LD_EXP 74
63450: PUSH
63451: LD_EXP 75
63455: PUSH
63456: LD_EXP 77
63460: PUSH
63461: LD_EXP 81
63465: PUSH
63466: LD_EXP 84
63470: PUSH
63471: LD_EXP 85
63475: PUSH
63476: LD_EXP 95
63480: PUSH
63481: LD_EXP 96
63485: PUSH
63486: LD_EXP 97
63490: PUSH
63491: LD_EXP 98
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// tmp :=  ;
63552: LD_ADDR_VAR 0 3
63556: PUSH
63557: LD_STRING 
63559: ST_TO_ADDR
// for i = 1 to normalCounter do
63560: LD_ADDR_VAR 0 8
63564: PUSH
63565: DOUBLE
63566: LD_INT 1
63568: DEC
63569: ST_TO_ADDR
63570: LD_EXP 43
63574: PUSH
63575: FOR_TO
63576: IFFALSE 63612
// begin if flags [ i ] then
63578: LD_VAR 0 4
63582: PUSH
63583: LD_VAR 0 8
63587: ARRAY
63588: IFFALSE 63610
// tmp := tmp & i & ; ;
63590: LD_ADDR_VAR 0 3
63594: PUSH
63595: LD_VAR 0 3
63599: PUSH
63600: LD_VAR 0 8
63604: STR
63605: PUSH
63606: LD_STRING ;
63608: STR
63609: ST_TO_ADDR
// end ;
63610: GO 63575
63612: POP
63613: POP
// for i = 1 to hardcoreCounter do
63614: LD_ADDR_VAR 0 8
63618: PUSH
63619: DOUBLE
63620: LD_INT 1
63622: DEC
63623: ST_TO_ADDR
63624: LD_EXP 44
63628: PUSH
63629: FOR_TO
63630: IFFALSE 63676
// begin if flags [ normalCounter + i ] then
63632: LD_VAR 0 4
63636: PUSH
63637: LD_EXP 43
63641: PUSH
63642: LD_VAR 0 8
63646: PLUS
63647: ARRAY
63648: IFFALSE 63674
// tmp := tmp & ( 100 + i ) & ; ;
63650: LD_ADDR_VAR 0 3
63654: PUSH
63655: LD_VAR 0 3
63659: PUSH
63660: LD_INT 100
63662: PUSH
63663: LD_VAR 0 8
63667: PLUS
63668: STR
63669: PUSH
63670: LD_STRING ;
63672: STR
63673: ST_TO_ADDR
// end ;
63674: GO 63629
63676: POP
63677: POP
// if tmp then
63678: LD_VAR 0 3
63682: IFFALSE 63694
// active := tmp ;
63684: LD_ADDR_VAR 0 7
63688: PUSH
63689: LD_VAR 0 3
63693: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63694: LD_STRING getStreamItemsFromMission("
63696: PUSH
63697: LD_VAR 0 5
63701: STR
63702: PUSH
63703: LD_STRING ","
63705: STR
63706: PUSH
63707: LD_VAR 0 6
63711: STR
63712: PUSH
63713: LD_STRING ","
63715: STR
63716: PUSH
63717: LD_VAR 0 7
63721: STR
63722: PUSH
63723: LD_STRING ")
63725: STR
63726: PPUSH
63727: CALL_OW 559
// end else
63731: GO 63740
// ToLua ( getStreamItemsFromMission("","","") ) ;
63733: LD_STRING getStreamItemsFromMission("","","")
63735: PPUSH
63736: CALL_OW 559
// end ;
63740: LD_VAR 0 2
63744: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63745: LD_EXP 42
63749: PUSH
63750: LD_EXP 47
63754: AND
63755: IFFALSE 63879
63757: GO 63759
63759: DISABLE
63760: LD_INT 0
63762: PPUSH
63763: PPUSH
// begin enable ;
63764: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63765: LD_ADDR_VAR 0 2
63769: PUSH
63770: LD_INT 22
63772: PUSH
63773: LD_OWVAR 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 2
63784: PUSH
63785: LD_INT 34
63787: PUSH
63788: LD_INT 7
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 34
63797: PUSH
63798: LD_INT 45
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 34
63807: PUSH
63808: LD_INT 28
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 34
63817: PUSH
63818: LD_INT 47
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PPUSH
63836: CALL_OW 69
63840: ST_TO_ADDR
// if not tmp then
63841: LD_VAR 0 2
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 63879
// for i in tmp do
63850: LD_ADDR_VAR 0 1
63854: PUSH
63855: LD_VAR 0 2
63859: PUSH
63860: FOR_IN
63861: IFFALSE 63877
// begin SetLives ( i , 0 ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_INT 0
63870: PPUSH
63871: CALL_OW 234
// end ;
63875: GO 63860
63877: POP
63878: POP
// end ;
63879: PPOPN 2
63881: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63882: LD_EXP 42
63886: PUSH
63887: LD_EXP 48
63891: AND
63892: IFFALSE 63976
63894: GO 63896
63896: DISABLE
63897: LD_INT 0
63899: PPUSH
63900: PPUSH
// begin enable ;
63901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63902: LD_ADDR_VAR 0 2
63906: PUSH
63907: LD_INT 22
63909: PUSH
63910: LD_OWVAR 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 32
63921: PUSH
63922: LD_INT 3
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PPUSH
63933: CALL_OW 69
63937: ST_TO_ADDR
// if not tmp then
63938: LD_VAR 0 2
63942: NOT
63943: IFFALSE 63947
// exit ;
63945: GO 63976
// for i in tmp do
63947: LD_ADDR_VAR 0 1
63951: PUSH
63952: LD_VAR 0 2
63956: PUSH
63957: FOR_IN
63958: IFFALSE 63974
// begin SetLives ( i , 0 ) ;
63960: LD_VAR 0 1
63964: PPUSH
63965: LD_INT 0
63967: PPUSH
63968: CALL_OW 234
// end ;
63972: GO 63957
63974: POP
63975: POP
// end ;
63976: PPOPN 2
63978: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63979: LD_EXP 42
63983: PUSH
63984: LD_EXP 45
63988: AND
63989: IFFALSE 64082
63991: GO 63993
63993: DISABLE
63994: LD_INT 0
63996: PPUSH
// begin enable ;
63997: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63998: LD_ADDR_VAR 0 1
64002: PUSH
64003: LD_INT 22
64005: PUSH
64006: LD_OWVAR 2
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: LD_INT 25
64020: PUSH
64021: LD_INT 5
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 25
64030: PUSH
64031: LD_INT 9
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 25
64040: PUSH
64041: LD_INT 8
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PPUSH
64058: CALL_OW 69
64062: PUSH
64063: FOR_IN
64064: IFFALSE 64080
// begin SetClass ( i , 1 ) ;
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_INT 1
64073: PPUSH
64074: CALL_OW 336
// end ;
64078: GO 64063
64080: POP
64081: POP
// end ;
64082: PPOPN 1
64084: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64085: LD_EXP 42
64089: PUSH
64090: LD_EXP 46
64094: AND
64095: PUSH
64096: LD_OWVAR 65
64100: PUSH
64101: LD_INT 7
64103: LESS
64104: AND
64105: IFFALSE 64119
64107: GO 64109
64109: DISABLE
// begin enable ;
64110: ENABLE
// game_speed := 7 ;
64111: LD_ADDR_OWVAR 65
64115: PUSH
64116: LD_INT 7
64118: ST_TO_ADDR
// end ;
64119: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64120: LD_EXP 42
64124: PUSH
64125: LD_EXP 49
64129: AND
64130: IFFALSE 64332
64132: GO 64134
64134: DISABLE
64135: LD_INT 0
64137: PPUSH
64138: PPUSH
64139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_INT 81
64147: PUSH
64148: LD_OWVAR 2
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 21
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PPUSH
64171: CALL_OW 69
64175: ST_TO_ADDR
// if not tmp then
64176: LD_VAR 0 3
64180: NOT
64181: IFFALSE 64185
// exit ;
64183: GO 64332
// if tmp > 5 then
64185: LD_VAR 0 3
64189: PUSH
64190: LD_INT 5
64192: GREATER
64193: IFFALSE 64205
// k := 5 else
64195: LD_ADDR_VAR 0 2
64199: PUSH
64200: LD_INT 5
64202: ST_TO_ADDR
64203: GO 64215
// k := tmp ;
64205: LD_ADDR_VAR 0 2
64209: PUSH
64210: LD_VAR 0 3
64214: ST_TO_ADDR
// for i := 1 to k do
64215: LD_ADDR_VAR 0 1
64219: PUSH
64220: DOUBLE
64221: LD_INT 1
64223: DEC
64224: ST_TO_ADDR
64225: LD_VAR 0 2
64229: PUSH
64230: FOR_TO
64231: IFFALSE 64330
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64233: LD_VAR 0 3
64237: PUSH
64238: LD_VAR 0 1
64242: ARRAY
64243: PPUSH
64244: LD_VAR 0 1
64248: PUSH
64249: LD_INT 4
64251: MOD
64252: PUSH
64253: LD_INT 1
64255: PLUS
64256: PPUSH
64257: CALL_OW 259
64261: PUSH
64262: LD_INT 10
64264: LESS
64265: IFFALSE 64328
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64267: LD_VAR 0 3
64271: PUSH
64272: LD_VAR 0 1
64276: ARRAY
64277: PPUSH
64278: LD_VAR 0 1
64282: PUSH
64283: LD_INT 4
64285: MOD
64286: PUSH
64287: LD_INT 1
64289: PLUS
64290: PPUSH
64291: LD_VAR 0 3
64295: PUSH
64296: LD_VAR 0 1
64300: ARRAY
64301: PPUSH
64302: LD_VAR 0 1
64306: PUSH
64307: LD_INT 4
64309: MOD
64310: PUSH
64311: LD_INT 1
64313: PLUS
64314: PPUSH
64315: CALL_OW 259
64319: PUSH
64320: LD_INT 1
64322: PLUS
64323: PPUSH
64324: CALL_OW 237
64328: GO 64230
64330: POP
64331: POP
// end ;
64332: PPOPN 3
64334: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64335: LD_EXP 42
64339: PUSH
64340: LD_EXP 50
64344: AND
64345: IFFALSE 64365
64347: GO 64349
64349: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64350: LD_INT 4
64352: PPUSH
64353: LD_OWVAR 2
64357: PPUSH
64358: LD_INT 0
64360: PPUSH
64361: CALL_OW 324
64365: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64366: LD_EXP 42
64370: PUSH
64371: LD_EXP 79
64375: AND
64376: IFFALSE 64396
64378: GO 64380
64380: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64381: LD_INT 19
64383: PPUSH
64384: LD_OWVAR 2
64388: PPUSH
64389: LD_INT 0
64391: PPUSH
64392: CALL_OW 324
64396: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64397: LD_EXP 42
64401: PUSH
64402: LD_EXP 51
64406: AND
64407: IFFALSE 64509
64409: GO 64411
64411: DISABLE
64412: LD_INT 0
64414: PPUSH
64415: PPUSH
// begin enable ;
64416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64417: LD_ADDR_VAR 0 2
64421: PUSH
64422: LD_INT 22
64424: PUSH
64425: LD_OWVAR 2
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 34
64439: PUSH
64440: LD_INT 11
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 34
64449: PUSH
64450: LD_INT 30
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PPUSH
64466: CALL_OW 69
64470: ST_TO_ADDR
// if not tmp then
64471: LD_VAR 0 2
64475: NOT
64476: IFFALSE 64480
// exit ;
64478: GO 64509
// for i in tmp do
64480: LD_ADDR_VAR 0 1
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: FOR_IN
64491: IFFALSE 64507
// begin SetLives ( i , 0 ) ;
64493: LD_VAR 0 1
64497: PPUSH
64498: LD_INT 0
64500: PPUSH
64501: CALL_OW 234
// end ;
64505: GO 64490
64507: POP
64508: POP
// end ;
64509: PPOPN 2
64511: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64512: LD_EXP 42
64516: PUSH
64517: LD_EXP 52
64521: AND
64522: IFFALSE 64542
64524: GO 64526
64526: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64527: LD_INT 32
64529: PPUSH
64530: LD_OWVAR 2
64534: PPUSH
64535: LD_INT 0
64537: PPUSH
64538: CALL_OW 324
64542: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64543: LD_EXP 42
64547: PUSH
64548: LD_EXP 53
64552: AND
64553: IFFALSE 64734
64555: GO 64557
64557: DISABLE
64558: LD_INT 0
64560: PPUSH
64561: PPUSH
64562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64563: LD_ADDR_VAR 0 2
64567: PUSH
64568: LD_INT 22
64570: PUSH
64571: LD_OWVAR 2
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 33
64582: PUSH
64583: LD_INT 3
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PPUSH
64594: CALL_OW 69
64598: ST_TO_ADDR
// if not tmp then
64599: LD_VAR 0 2
64603: NOT
64604: IFFALSE 64608
// exit ;
64606: GO 64734
// side := 0 ;
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_INT 0
64615: ST_TO_ADDR
// for i := 1 to 8 do
64616: LD_ADDR_VAR 0 1
64620: PUSH
64621: DOUBLE
64622: LD_INT 1
64624: DEC
64625: ST_TO_ADDR
64626: LD_INT 8
64628: PUSH
64629: FOR_TO
64630: IFFALSE 64678
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64632: LD_OWVAR 2
64636: PUSH
64637: LD_VAR 0 1
64641: NONEQUAL
64642: PUSH
64643: LD_OWVAR 2
64647: PPUSH
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL_OW 81
64657: PUSH
64658: LD_INT 2
64660: EQUAL
64661: AND
64662: IFFALSE 64676
// begin side := i ;
64664: LD_ADDR_VAR 0 3
64668: PUSH
64669: LD_VAR 0 1
64673: ST_TO_ADDR
// break ;
64674: GO 64678
// end ;
64676: GO 64629
64678: POP
64679: POP
// if not side then
64680: LD_VAR 0 3
64684: NOT
64685: IFFALSE 64689
// exit ;
64687: GO 64734
// for i := 1 to tmp do
64689: LD_ADDR_VAR 0 1
64693: PUSH
64694: DOUBLE
64695: LD_INT 1
64697: DEC
64698: ST_TO_ADDR
64699: LD_VAR 0 2
64703: PUSH
64704: FOR_TO
64705: IFFALSE 64732
// if Prob ( 60 ) then
64707: LD_INT 60
64709: PPUSH
64710: CALL_OW 13
64714: IFFALSE 64730
// SetSide ( i , side ) ;
64716: LD_VAR 0 1
64720: PPUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: CALL_OW 235
64730: GO 64704
64732: POP
64733: POP
// end ;
64734: PPOPN 3
64736: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64737: LD_EXP 42
64741: PUSH
64742: LD_EXP 55
64746: AND
64747: IFFALSE 64866
64749: GO 64751
64751: DISABLE
64752: LD_INT 0
64754: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64755: LD_ADDR_VAR 0 1
64759: PUSH
64760: LD_INT 22
64762: PUSH
64763: LD_OWVAR 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 21
64774: PUSH
64775: LD_INT 1
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: LD_INT 23
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: PPUSH
64804: CALL_OW 69
64808: PUSH
64809: FOR_IN
64810: IFFALSE 64864
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64812: LD_VAR 0 1
64816: PPUSH
64817: CALL_OW 257
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 3
64830: PUSH
64831: LD_INT 4
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: IN
64840: IFFALSE 64862
// SetClass ( un , rand ( 1 , 4 ) ) ;
64842: LD_VAR 0 1
64846: PPUSH
64847: LD_INT 1
64849: PPUSH
64850: LD_INT 4
64852: PPUSH
64853: CALL_OW 12
64857: PPUSH
64858: CALL_OW 336
64862: GO 64809
64864: POP
64865: POP
// end ;
64866: PPOPN 1
64868: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64869: LD_EXP 42
64873: PUSH
64874: LD_EXP 54
64878: AND
64879: IFFALSE 64958
64881: GO 64883
64883: DISABLE
64884: LD_INT 0
64886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64887: LD_ADDR_VAR 0 1
64891: PUSH
64892: LD_INT 22
64894: PUSH
64895: LD_OWVAR 2
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 21
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PPUSH
64918: CALL_OW 69
64922: ST_TO_ADDR
// if not tmp then
64923: LD_VAR 0 1
64927: NOT
64928: IFFALSE 64932
// exit ;
64930: GO 64958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64932: LD_VAR 0 1
64936: PUSH
64937: LD_INT 1
64939: PPUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 12
64949: ARRAY
64950: PPUSH
64951: LD_INT 100
64953: PPUSH
64954: CALL_OW 234
// end ;
64958: PPOPN 1
64960: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64961: LD_EXP 42
64965: PUSH
64966: LD_EXP 56
64970: AND
64971: IFFALSE 65069
64973: GO 64975
64975: DISABLE
64976: LD_INT 0
64978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64979: LD_ADDR_VAR 0 1
64983: PUSH
64984: LD_INT 22
64986: PUSH
64987: LD_OWVAR 2
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 21
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PPUSH
65010: CALL_OW 69
65014: ST_TO_ADDR
// if not tmp then
65015: LD_VAR 0 1
65019: NOT
65020: IFFALSE 65024
// exit ;
65022: GO 65069
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65024: LD_VAR 0 1
65028: PUSH
65029: LD_INT 1
65031: PPUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 12
65041: ARRAY
65042: PPUSH
65043: LD_INT 1
65045: PPUSH
65046: LD_INT 4
65048: PPUSH
65049: CALL_OW 12
65053: PPUSH
65054: LD_INT 3000
65056: PPUSH
65057: LD_INT 9000
65059: PPUSH
65060: CALL_OW 12
65064: PPUSH
65065: CALL_OW 492
// end ;
65069: PPOPN 1
65071: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65072: LD_EXP 42
65076: PUSH
65077: LD_EXP 57
65081: AND
65082: IFFALSE 65102
65084: GO 65086
65086: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65087: LD_INT 1
65089: PPUSH
65090: LD_OWVAR 2
65094: PPUSH
65095: LD_INT 0
65097: PPUSH
65098: CALL_OW 324
65102: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65103: LD_EXP 42
65107: PUSH
65108: LD_EXP 58
65112: AND
65113: IFFALSE 65196
65115: GO 65117
65117: DISABLE
65118: LD_INT 0
65120: PPUSH
65121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65122: LD_ADDR_VAR 0 2
65126: PUSH
65127: LD_INT 22
65129: PUSH
65130: LD_OWVAR 2
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 21
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PPUSH
65153: CALL_OW 69
65157: ST_TO_ADDR
// if not tmp then
65158: LD_VAR 0 2
65162: NOT
65163: IFFALSE 65167
// exit ;
65165: GO 65196
// for i in tmp do
65167: LD_ADDR_VAR 0 1
65171: PUSH
65172: LD_VAR 0 2
65176: PUSH
65177: FOR_IN
65178: IFFALSE 65194
// SetBLevel ( i , 10 ) ;
65180: LD_VAR 0 1
65184: PPUSH
65185: LD_INT 10
65187: PPUSH
65188: CALL_OW 241
65192: GO 65177
65194: POP
65195: POP
// end ;
65196: PPOPN 2
65198: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65199: LD_EXP 42
65203: PUSH
65204: LD_EXP 59
65208: AND
65209: IFFALSE 65320
65211: GO 65213
65213: DISABLE
65214: LD_INT 0
65216: PPUSH
65217: PPUSH
65218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65219: LD_ADDR_VAR 0 3
65223: PUSH
65224: LD_INT 22
65226: PUSH
65227: LD_OWVAR 2
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 25
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PPUSH
65250: CALL_OW 69
65254: ST_TO_ADDR
// if not tmp then
65255: LD_VAR 0 3
65259: NOT
65260: IFFALSE 65264
// exit ;
65262: GO 65320
// un := tmp [ rand ( 1 , tmp ) ] ;
65264: LD_ADDR_VAR 0 2
65268: PUSH
65269: LD_VAR 0 3
65273: PUSH
65274: LD_INT 1
65276: PPUSH
65277: LD_VAR 0 3
65281: PPUSH
65282: CALL_OW 12
65286: ARRAY
65287: ST_TO_ADDR
// if Crawls ( un ) then
65288: LD_VAR 0 2
65292: PPUSH
65293: CALL_OW 318
65297: IFFALSE 65308
// ComWalk ( un ) ;
65299: LD_VAR 0 2
65303: PPUSH
65304: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65308: LD_VAR 0 2
65312: PPUSH
65313: LD_INT 5
65315: PPUSH
65316: CALL_OW 336
// end ;
65320: PPOPN 3
65322: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65323: LD_EXP 42
65327: PUSH
65328: LD_EXP 60
65332: AND
65333: PUSH
65334: LD_OWVAR 67
65338: PUSH
65339: LD_INT 4
65341: LESS
65342: AND
65343: IFFALSE 65362
65345: GO 65347
65347: DISABLE
// begin Difficulty := Difficulty + 1 ;
65348: LD_ADDR_OWVAR 67
65352: PUSH
65353: LD_OWVAR 67
65357: PUSH
65358: LD_INT 1
65360: PLUS
65361: ST_TO_ADDR
// end ;
65362: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65363: LD_EXP 42
65367: PUSH
65368: LD_EXP 61
65372: AND
65373: IFFALSE 65476
65375: GO 65377
65377: DISABLE
65378: LD_INT 0
65380: PPUSH
// begin for i := 1 to 5 do
65381: LD_ADDR_VAR 0 1
65385: PUSH
65386: DOUBLE
65387: LD_INT 1
65389: DEC
65390: ST_TO_ADDR
65391: LD_INT 5
65393: PUSH
65394: FOR_TO
65395: IFFALSE 65474
// begin uc_nation := nation_nature ;
65397: LD_ADDR_OWVAR 21
65401: PUSH
65402: LD_INT 0
65404: ST_TO_ADDR
// uc_side := 0 ;
65405: LD_ADDR_OWVAR 20
65409: PUSH
65410: LD_INT 0
65412: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65413: LD_ADDR_OWVAR 29
65417: PUSH
65418: LD_INT 12
65420: PUSH
65421: LD_INT 12
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: ST_TO_ADDR
// hc_agressivity := 20 ;
65428: LD_ADDR_OWVAR 35
65432: PUSH
65433: LD_INT 20
65435: ST_TO_ADDR
// hc_class := class_tiger ;
65436: LD_ADDR_OWVAR 28
65440: PUSH
65441: LD_INT 14
65443: ST_TO_ADDR
// hc_gallery :=  ;
65444: LD_ADDR_OWVAR 33
65448: PUSH
65449: LD_STRING 
65451: ST_TO_ADDR
// hc_name :=  ;
65452: LD_ADDR_OWVAR 26
65456: PUSH
65457: LD_STRING 
65459: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65460: CALL_OW 44
65464: PPUSH
65465: LD_INT 0
65467: PPUSH
65468: CALL_OW 51
// end ;
65472: GO 65394
65474: POP
65475: POP
// end ;
65476: PPOPN 1
65478: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65479: LD_EXP 42
65483: PUSH
65484: LD_EXP 62
65488: AND
65489: IFFALSE 65498
65491: GO 65493
65493: DISABLE
// StreamSibBomb ;
65494: CALL 65499 0 0
65498: END
// export function StreamSibBomb ; var i , x , y ; begin
65499: LD_INT 0
65501: PPUSH
65502: PPUSH
65503: PPUSH
65504: PPUSH
// result := false ;
65505: LD_ADDR_VAR 0 1
65509: PUSH
65510: LD_INT 0
65512: ST_TO_ADDR
// for i := 1 to 16 do
65513: LD_ADDR_VAR 0 2
65517: PUSH
65518: DOUBLE
65519: LD_INT 1
65521: DEC
65522: ST_TO_ADDR
65523: LD_INT 16
65525: PUSH
65526: FOR_TO
65527: IFFALSE 65726
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65529: LD_ADDR_VAR 0 3
65533: PUSH
65534: LD_INT 10
65536: PUSH
65537: LD_INT 20
65539: PUSH
65540: LD_INT 30
65542: PUSH
65543: LD_INT 40
65545: PUSH
65546: LD_INT 50
65548: PUSH
65549: LD_INT 60
65551: PUSH
65552: LD_INT 70
65554: PUSH
65555: LD_INT 80
65557: PUSH
65558: LD_INT 90
65560: PUSH
65561: LD_INT 100
65563: PUSH
65564: LD_INT 110
65566: PUSH
65567: LD_INT 120
65569: PUSH
65570: LD_INT 130
65572: PUSH
65573: LD_INT 140
65575: PUSH
65576: LD_INT 150
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 1
65598: PPUSH
65599: LD_INT 15
65601: PPUSH
65602: CALL_OW 12
65606: ARRAY
65607: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65608: LD_ADDR_VAR 0 4
65612: PUSH
65613: LD_INT 10
65615: PUSH
65616: LD_INT 20
65618: PUSH
65619: LD_INT 30
65621: PUSH
65622: LD_INT 40
65624: PUSH
65625: LD_INT 50
65627: PUSH
65628: LD_INT 60
65630: PUSH
65631: LD_INT 70
65633: PUSH
65634: LD_INT 80
65636: PUSH
65637: LD_INT 90
65639: PUSH
65640: LD_INT 100
65642: PUSH
65643: LD_INT 110
65645: PUSH
65646: LD_INT 120
65648: PUSH
65649: LD_INT 130
65651: PUSH
65652: LD_INT 140
65654: PUSH
65655: LD_INT 150
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: PPUSH
65678: LD_INT 15
65680: PPUSH
65681: CALL_OW 12
65685: ARRAY
65686: ST_TO_ADDR
// if ValidHex ( x , y ) then
65687: LD_VAR 0 3
65691: PPUSH
65692: LD_VAR 0 4
65696: PPUSH
65697: CALL_OW 488
65701: IFFALSE 65724
// begin result := [ x , y ] ;
65703: LD_ADDR_VAR 0 1
65707: PUSH
65708: LD_VAR 0 3
65712: PUSH
65713: LD_VAR 0 4
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: ST_TO_ADDR
// break ;
65722: GO 65726
// end ; end ;
65724: GO 65526
65726: POP
65727: POP
// if result then
65728: LD_VAR 0 1
65732: IFFALSE 65792
// begin ToLua ( playSibBomb() ) ;
65734: LD_STRING playSibBomb()
65736: PPUSH
65737: CALL_OW 559
// wait ( 0 0$14 ) ;
65741: LD_INT 490
65743: PPUSH
65744: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 1
65755: ARRAY
65756: PPUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_INT 2
65764: ARRAY
65765: PPUSH
65766: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65770: LD_VAR 0 1
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PPUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_INT 2
65786: ARRAY
65787: PPUSH
65788: CALL_OW 429
// end ; end ;
65792: LD_VAR 0 1
65796: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65797: LD_EXP 42
65801: PUSH
65802: LD_EXP 64
65806: AND
65807: IFFALSE 65819
65809: GO 65811
65811: DISABLE
// YouLost (  ) ;
65812: LD_STRING 
65814: PPUSH
65815: CALL_OW 104
65819: END
// every 0 0$1 trigger StreamModeActive and sFog do
65820: LD_EXP 42
65824: PUSH
65825: LD_EXP 63
65829: AND
65830: IFFALSE 65844
65832: GO 65834
65834: DISABLE
// FogOff ( your_side ) ;
65835: LD_OWVAR 2
65839: PPUSH
65840: CALL_OW 344
65844: END
// every 0 0$1 trigger StreamModeActive and sSun do
65845: LD_EXP 42
65849: PUSH
65850: LD_EXP 65
65854: AND
65855: IFFALSE 65883
65857: GO 65859
65859: DISABLE
// begin solar_recharge_percent := 0 ;
65860: LD_ADDR_OWVAR 79
65864: PUSH
65865: LD_INT 0
65867: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65868: LD_INT 10500
65870: PPUSH
65871: CALL_OW 67
// solar_recharge_percent := 100 ;
65875: LD_ADDR_OWVAR 79
65879: PUSH
65880: LD_INT 100
65882: ST_TO_ADDR
// end ;
65883: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65884: LD_EXP 42
65888: PUSH
65889: LD_EXP 66
65893: AND
65894: IFFALSE 66133
65896: GO 65898
65898: DISABLE
65899: LD_INT 0
65901: PPUSH
65902: PPUSH
65903: PPUSH
// begin tmp := [ ] ;
65904: LD_ADDR_VAR 0 3
65908: PUSH
65909: EMPTY
65910: ST_TO_ADDR
// for i := 1 to 6 do
65911: LD_ADDR_VAR 0 1
65915: PUSH
65916: DOUBLE
65917: LD_INT 1
65919: DEC
65920: ST_TO_ADDR
65921: LD_INT 6
65923: PUSH
65924: FOR_TO
65925: IFFALSE 66030
// begin uc_nation := nation_nature ;
65927: LD_ADDR_OWVAR 21
65931: PUSH
65932: LD_INT 0
65934: ST_TO_ADDR
// uc_side := 0 ;
65935: LD_ADDR_OWVAR 20
65939: PUSH
65940: LD_INT 0
65942: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65943: LD_ADDR_OWVAR 29
65947: PUSH
65948: LD_INT 12
65950: PUSH
65951: LD_INT 12
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: ST_TO_ADDR
// hc_agressivity := 20 ;
65958: LD_ADDR_OWVAR 35
65962: PUSH
65963: LD_INT 20
65965: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65966: LD_ADDR_OWVAR 28
65970: PUSH
65971: LD_INT 17
65973: ST_TO_ADDR
// hc_gallery :=  ;
65974: LD_ADDR_OWVAR 33
65978: PUSH
65979: LD_STRING 
65981: ST_TO_ADDR
// hc_name :=  ;
65982: LD_ADDR_OWVAR 26
65986: PUSH
65987: LD_STRING 
65989: ST_TO_ADDR
// un := CreateHuman ;
65990: LD_ADDR_VAR 0 2
65994: PUSH
65995: CALL_OW 44
65999: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66000: LD_VAR 0 2
66004: PPUSH
66005: LD_INT 1
66007: PPUSH
66008: CALL_OW 51
// tmp := tmp ^ un ;
66012: LD_ADDR_VAR 0 3
66016: PUSH
66017: LD_VAR 0 3
66021: PUSH
66022: LD_VAR 0 2
66026: ADD
66027: ST_TO_ADDR
// end ;
66028: GO 65924
66030: POP
66031: POP
// repeat wait ( 0 0$1 ) ;
66032: LD_INT 35
66034: PPUSH
66035: CALL_OW 67
// for un in tmp do
66039: LD_ADDR_VAR 0 2
66043: PUSH
66044: LD_VAR 0 3
66048: PUSH
66049: FOR_IN
66050: IFFALSE 66124
// begin if IsDead ( un ) then
66052: LD_VAR 0 2
66056: PPUSH
66057: CALL_OW 301
66061: IFFALSE 66081
// begin tmp := tmp diff un ;
66063: LD_ADDR_VAR 0 3
66067: PUSH
66068: LD_VAR 0 3
66072: PUSH
66073: LD_VAR 0 2
66077: DIFF
66078: ST_TO_ADDR
// continue ;
66079: GO 66049
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66081: LD_VAR 0 2
66085: PPUSH
66086: LD_INT 3
66088: PUSH
66089: LD_INT 22
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PPUSH
66103: CALL_OW 69
66107: PPUSH
66108: LD_VAR 0 2
66112: PPUSH
66113: CALL_OW 74
66117: PPUSH
66118: CALL_OW 115
// end ;
66122: GO 66049
66124: POP
66125: POP
// until not tmp ;
66126: LD_VAR 0 3
66130: NOT
66131: IFFALSE 66032
// end ;
66133: PPOPN 3
66135: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66136: LD_EXP 42
66140: PUSH
66141: LD_EXP 67
66145: AND
66146: IFFALSE 66200
66148: GO 66150
66150: DISABLE
// begin ToLua ( displayTroll(); ) ;
66151: LD_STRING displayTroll();
66153: PPUSH
66154: CALL_OW 559
// wait ( 3 3$00 ) ;
66158: LD_INT 6300
66160: PPUSH
66161: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66165: LD_STRING hideTroll();
66167: PPUSH
66168: CALL_OW 559
// wait ( 1 1$00 ) ;
66172: LD_INT 2100
66174: PPUSH
66175: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66179: LD_STRING displayTroll();
66181: PPUSH
66182: CALL_OW 559
// wait ( 1 1$00 ) ;
66186: LD_INT 2100
66188: PPUSH
66189: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66193: LD_STRING hideTroll();
66195: PPUSH
66196: CALL_OW 559
// end ;
66200: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66201: LD_EXP 42
66205: PUSH
66206: LD_EXP 68
66210: AND
66211: IFFALSE 66274
66213: GO 66215
66215: DISABLE
66216: LD_INT 0
66218: PPUSH
// begin p := 0 ;
66219: LD_ADDR_VAR 0 1
66223: PUSH
66224: LD_INT 0
66226: ST_TO_ADDR
// repeat game_speed := 1 ;
66227: LD_ADDR_OWVAR 65
66231: PUSH
66232: LD_INT 1
66234: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66235: LD_INT 35
66237: PPUSH
66238: CALL_OW 67
// p := p + 1 ;
66242: LD_ADDR_VAR 0 1
66246: PUSH
66247: LD_VAR 0 1
66251: PUSH
66252: LD_INT 1
66254: PLUS
66255: ST_TO_ADDR
// until p >= 60 ;
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 60
66263: GREATEREQUAL
66264: IFFALSE 66227
// game_speed := 4 ;
66266: LD_ADDR_OWVAR 65
66270: PUSH
66271: LD_INT 4
66273: ST_TO_ADDR
// end ;
66274: PPOPN 1
66276: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66277: LD_EXP 42
66281: PUSH
66282: LD_EXP 69
66286: AND
66287: IFFALSE 66433
66289: GO 66291
66291: DISABLE
66292: LD_INT 0
66294: PPUSH
66295: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66296: LD_ADDR_VAR 0 1
66300: PUSH
66301: LD_INT 22
66303: PUSH
66304: LD_OWVAR 2
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: LD_INT 30
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 30
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: LIST
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PPUSH
66345: CALL_OW 69
66349: ST_TO_ADDR
// if not depot then
66350: LD_VAR 0 1
66354: NOT
66355: IFFALSE 66359
// exit ;
66357: GO 66433
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66359: LD_ADDR_VAR 0 2
66363: PUSH
66364: LD_VAR 0 1
66368: PUSH
66369: LD_INT 1
66371: PPUSH
66372: LD_VAR 0 1
66376: PPUSH
66377: CALL_OW 12
66381: ARRAY
66382: PPUSH
66383: CALL_OW 274
66387: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66388: LD_VAR 0 2
66392: PPUSH
66393: LD_INT 1
66395: PPUSH
66396: LD_INT 0
66398: PPUSH
66399: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66403: LD_VAR 0 2
66407: PPUSH
66408: LD_INT 2
66410: PPUSH
66411: LD_INT 0
66413: PPUSH
66414: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66418: LD_VAR 0 2
66422: PPUSH
66423: LD_INT 3
66425: PPUSH
66426: LD_INT 0
66428: PPUSH
66429: CALL_OW 277
// end ;
66433: PPOPN 2
66435: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66436: LD_EXP 42
66440: PUSH
66441: LD_EXP 70
66445: AND
66446: IFFALSE 66543
66448: GO 66450
66450: DISABLE
66451: LD_INT 0
66453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66454: LD_ADDR_VAR 0 1
66458: PUSH
66459: LD_INT 22
66461: PUSH
66462: LD_OWVAR 2
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 21
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 3
66483: PUSH
66484: LD_INT 23
66486: PUSH
66487: LD_INT 0
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: PPUSH
66503: CALL_OW 69
66507: ST_TO_ADDR
// if not tmp then
66508: LD_VAR 0 1
66512: NOT
66513: IFFALSE 66517
// exit ;
66515: GO 66543
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66517: LD_VAR 0 1
66521: PUSH
66522: LD_INT 1
66524: PPUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: CALL_OW 12
66534: ARRAY
66535: PPUSH
66536: LD_INT 200
66538: PPUSH
66539: CALL_OW 234
// end ;
66543: PPOPN 1
66545: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66546: LD_EXP 42
66550: PUSH
66551: LD_EXP 71
66555: AND
66556: IFFALSE 66635
66558: GO 66560
66560: DISABLE
66561: LD_INT 0
66563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66564: LD_ADDR_VAR 0 1
66568: PUSH
66569: LD_INT 22
66571: PUSH
66572: LD_OWVAR 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 21
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: PPUSH
66595: CALL_OW 69
66599: ST_TO_ADDR
// if not tmp then
66600: LD_VAR 0 1
66604: NOT
66605: IFFALSE 66609
// exit ;
66607: GO 66635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66609: LD_VAR 0 1
66613: PUSH
66614: LD_INT 1
66616: PPUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: CALL_OW 12
66626: ARRAY
66627: PPUSH
66628: LD_INT 60
66630: PPUSH
66631: CALL_OW 234
// end ;
66635: PPOPN 1
66637: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66638: LD_EXP 42
66642: PUSH
66643: LD_EXP 72
66647: AND
66648: IFFALSE 66747
66650: GO 66652
66652: DISABLE
66653: LD_INT 0
66655: PPUSH
66656: PPUSH
// begin enable ;
66657: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66658: LD_ADDR_VAR 0 1
66662: PUSH
66663: LD_INT 22
66665: PUSH
66666: LD_OWVAR 2
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 61
66677: PUSH
66678: EMPTY
66679: LIST
66680: PUSH
66681: LD_INT 33
66683: PUSH
66684: LD_INT 2
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: LIST
66695: PPUSH
66696: CALL_OW 69
66700: ST_TO_ADDR
// if not tmp then
66701: LD_VAR 0 1
66705: NOT
66706: IFFALSE 66710
// exit ;
66708: GO 66747
// for i in tmp do
66710: LD_ADDR_VAR 0 2
66714: PUSH
66715: LD_VAR 0 1
66719: PUSH
66720: FOR_IN
66721: IFFALSE 66745
// if IsControledBy ( i ) then
66723: LD_VAR 0 2
66727: PPUSH
66728: CALL_OW 312
66732: IFFALSE 66743
// ComUnlink ( i ) ;
66734: LD_VAR 0 2
66738: PPUSH
66739: CALL_OW 136
66743: GO 66720
66745: POP
66746: POP
// end ;
66747: PPOPN 2
66749: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66750: LD_EXP 42
66754: PUSH
66755: LD_EXP 73
66759: AND
66760: IFFALSE 66900
66762: GO 66764
66764: DISABLE
66765: LD_INT 0
66767: PPUSH
66768: PPUSH
// begin ToLua ( displayPowell(); ) ;
66769: LD_STRING displayPowell();
66771: PPUSH
66772: CALL_OW 559
// uc_side := 0 ;
66776: LD_ADDR_OWVAR 20
66780: PUSH
66781: LD_INT 0
66783: ST_TO_ADDR
// uc_nation := 2 ;
66784: LD_ADDR_OWVAR 21
66788: PUSH
66789: LD_INT 2
66791: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66792: LD_ADDR_OWVAR 37
66796: PUSH
66797: LD_INT 14
66799: ST_TO_ADDR
// vc_engine := engine_siberite ;
66800: LD_ADDR_OWVAR 39
66804: PUSH
66805: LD_INT 3
66807: ST_TO_ADDR
// vc_control := control_apeman ;
66808: LD_ADDR_OWVAR 38
66812: PUSH
66813: LD_INT 5
66815: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66816: LD_ADDR_OWVAR 40
66820: PUSH
66821: LD_INT 29
66823: ST_TO_ADDR
// un := CreateVehicle ;
66824: LD_ADDR_VAR 0 2
66828: PUSH
66829: CALL_OW 45
66833: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66834: LD_VAR 0 2
66838: PPUSH
66839: LD_INT 1
66841: PPUSH
66842: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66846: LD_INT 35
66848: PPUSH
66849: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66853: LD_VAR 0 2
66857: PPUSH
66858: LD_INT 22
66860: PUSH
66861: LD_OWVAR 2
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PPUSH
66870: CALL_OW 69
66874: PPUSH
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 74
66884: PPUSH
66885: CALL_OW 115
// until IsDead ( un ) ;
66889: LD_VAR 0 2
66893: PPUSH
66894: CALL_OW 301
66898: IFFALSE 66846
// end ;
66900: PPOPN 2
66902: END
// every 0 0$1 trigger StreamModeActive and sStu do
66903: LD_EXP 42
66907: PUSH
66908: LD_EXP 81
66912: AND
66913: IFFALSE 66929
66915: GO 66917
66917: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66918: LD_STRING displayStucuk();
66920: PPUSH
66921: CALL_OW 559
// ResetFog ;
66925: CALL_OW 335
// end ;
66929: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66930: LD_EXP 42
66934: PUSH
66935: LD_EXP 74
66939: AND
66940: IFFALSE 67081
66942: GO 66944
66944: DISABLE
66945: LD_INT 0
66947: PPUSH
66948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66949: LD_ADDR_VAR 0 2
66953: PUSH
66954: LD_INT 22
66956: PUSH
66957: LD_OWVAR 2
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: PUSH
66966: LD_INT 21
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PPUSH
66980: CALL_OW 69
66984: ST_TO_ADDR
// if not tmp then
66985: LD_VAR 0 2
66989: NOT
66990: IFFALSE 66994
// exit ;
66992: GO 67081
// un := tmp [ rand ( 1 , tmp ) ] ;
66994: LD_ADDR_VAR 0 1
66998: PUSH
66999: LD_VAR 0 2
67003: PUSH
67004: LD_INT 1
67006: PPUSH
67007: LD_VAR 0 2
67011: PPUSH
67012: CALL_OW 12
67016: ARRAY
67017: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67018: LD_VAR 0 1
67022: PPUSH
67023: LD_INT 0
67025: PPUSH
67026: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_OWVAR 3
67039: PUSH
67040: LD_VAR 0 1
67044: DIFF
67045: PPUSH
67046: LD_VAR 0 1
67050: PPUSH
67051: CALL_OW 74
67055: PPUSH
67056: CALL_OW 115
// wait ( 0 0$20 ) ;
67060: LD_INT 700
67062: PPUSH
67063: CALL_OW 67
// SetSide ( un , your_side ) ;
67067: LD_VAR 0 1
67071: PPUSH
67072: LD_OWVAR 2
67076: PPUSH
67077: CALL_OW 235
// end ;
67081: PPOPN 2
67083: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67084: LD_EXP 42
67088: PUSH
67089: LD_EXP 75
67093: AND
67094: IFFALSE 67200
67096: GO 67098
67098: DISABLE
67099: LD_INT 0
67101: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67102: LD_ADDR_VAR 0 1
67106: PUSH
67107: LD_INT 22
67109: PUSH
67110: LD_OWVAR 2
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 2
67121: PUSH
67122: LD_INT 30
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 30
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PPUSH
67151: CALL_OW 69
67155: ST_TO_ADDR
// if not depot then
67156: LD_VAR 0 1
67160: NOT
67161: IFFALSE 67165
// exit ;
67163: GO 67200
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67165: LD_VAR 0 1
67169: PUSH
67170: LD_INT 1
67172: ARRAY
67173: PPUSH
67174: CALL_OW 250
67178: PPUSH
67179: LD_VAR 0 1
67183: PUSH
67184: LD_INT 1
67186: ARRAY
67187: PPUSH
67188: CALL_OW 251
67192: PPUSH
67193: LD_INT 70
67195: PPUSH
67196: CALL_OW 495
// end ;
67200: PPOPN 1
67202: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67203: LD_EXP 42
67207: PUSH
67208: LD_EXP 76
67212: AND
67213: IFFALSE 67424
67215: GO 67217
67217: DISABLE
67218: LD_INT 0
67220: PPUSH
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67225: LD_ADDR_VAR 0 5
67229: PUSH
67230: LD_INT 22
67232: PUSH
67233: LD_OWVAR 2
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 21
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PPUSH
67256: CALL_OW 69
67260: ST_TO_ADDR
// if not tmp then
67261: LD_VAR 0 5
67265: NOT
67266: IFFALSE 67270
// exit ;
67268: GO 67424
// for i in tmp do
67270: LD_ADDR_VAR 0 1
67274: PUSH
67275: LD_VAR 0 5
67279: PUSH
67280: FOR_IN
67281: IFFALSE 67422
// begin d := rand ( 0 , 5 ) ;
67283: LD_ADDR_VAR 0 4
67287: PUSH
67288: LD_INT 0
67290: PPUSH
67291: LD_INT 5
67293: PPUSH
67294: CALL_OW 12
67298: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67299: LD_ADDR_VAR 0 2
67303: PUSH
67304: LD_VAR 0 1
67308: PPUSH
67309: CALL_OW 250
67313: PPUSH
67314: LD_VAR 0 4
67318: PPUSH
67319: LD_INT 3
67321: PPUSH
67322: LD_INT 12
67324: PPUSH
67325: CALL_OW 12
67329: PPUSH
67330: CALL_OW 272
67334: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67335: LD_ADDR_VAR 0 3
67339: PUSH
67340: LD_VAR 0 1
67344: PPUSH
67345: CALL_OW 251
67349: PPUSH
67350: LD_VAR 0 4
67354: PPUSH
67355: LD_INT 3
67357: PPUSH
67358: LD_INT 12
67360: PPUSH
67361: CALL_OW 12
67365: PPUSH
67366: CALL_OW 273
67370: ST_TO_ADDR
// if ValidHex ( x , y ) then
67371: LD_VAR 0 2
67375: PPUSH
67376: LD_VAR 0 3
67380: PPUSH
67381: CALL_OW 488
67385: IFFALSE 67420
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67387: LD_VAR 0 1
67391: PPUSH
67392: LD_VAR 0 2
67396: PPUSH
67397: LD_VAR 0 3
67401: PPUSH
67402: LD_INT 3
67404: PPUSH
67405: LD_INT 6
67407: PPUSH
67408: CALL_OW 12
67412: PPUSH
67413: LD_INT 1
67415: PPUSH
67416: CALL_OW 483
// end ;
67420: GO 67280
67422: POP
67423: POP
// end ;
67424: PPOPN 5
67426: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67427: LD_EXP 42
67431: PUSH
67432: LD_EXP 77
67436: AND
67437: IFFALSE 67531
67439: GO 67441
67441: DISABLE
67442: LD_INT 0
67444: PPUSH
67445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67446: LD_ADDR_VAR 0 2
67450: PUSH
67451: LD_INT 22
67453: PUSH
67454: LD_OWVAR 2
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 32
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 21
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: LIST
67487: PPUSH
67488: CALL_OW 69
67492: ST_TO_ADDR
// if not tmp then
67493: LD_VAR 0 2
67497: NOT
67498: IFFALSE 67502
// exit ;
67500: GO 67531
// for i in tmp do
67502: LD_ADDR_VAR 0 1
67506: PUSH
67507: LD_VAR 0 2
67511: PUSH
67512: FOR_IN
67513: IFFALSE 67529
// SetFuel ( i , 0 ) ;
67515: LD_VAR 0 1
67519: PPUSH
67520: LD_INT 0
67522: PPUSH
67523: CALL_OW 240
67527: GO 67512
67529: POP
67530: POP
// end ;
67531: PPOPN 2
67533: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67534: LD_EXP 42
67538: PUSH
67539: LD_EXP 78
67543: AND
67544: IFFALSE 67610
67546: GO 67548
67548: DISABLE
67549: LD_INT 0
67551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67552: LD_ADDR_VAR 0 1
67556: PUSH
67557: LD_INT 22
67559: PUSH
67560: LD_OWVAR 2
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 30
67571: PUSH
67572: LD_INT 29
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PPUSH
67583: CALL_OW 69
67587: ST_TO_ADDR
// if not tmp then
67588: LD_VAR 0 1
67592: NOT
67593: IFFALSE 67597
// exit ;
67595: GO 67610
// DestroyUnit ( tmp [ 1 ] ) ;
67597: LD_VAR 0 1
67601: PUSH
67602: LD_INT 1
67604: ARRAY
67605: PPUSH
67606: CALL_OW 65
// end ;
67610: PPOPN 1
67612: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67613: LD_EXP 42
67617: PUSH
67618: LD_EXP 80
67622: AND
67623: IFFALSE 67752
67625: GO 67627
67627: DISABLE
67628: LD_INT 0
67630: PPUSH
// begin uc_side := 0 ;
67631: LD_ADDR_OWVAR 20
67635: PUSH
67636: LD_INT 0
67638: ST_TO_ADDR
// uc_nation := nation_arabian ;
67639: LD_ADDR_OWVAR 21
67643: PUSH
67644: LD_INT 2
67646: ST_TO_ADDR
// hc_gallery :=  ;
67647: LD_ADDR_OWVAR 33
67651: PUSH
67652: LD_STRING 
67654: ST_TO_ADDR
// hc_name :=  ;
67655: LD_ADDR_OWVAR 26
67659: PUSH
67660: LD_STRING 
67662: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67663: LD_INT 1
67665: PPUSH
67666: LD_INT 11
67668: PPUSH
67669: LD_INT 10
67671: PPUSH
67672: CALL_OW 380
// un := CreateHuman ;
67676: LD_ADDR_VAR 0 1
67680: PUSH
67681: CALL_OW 44
67685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_INT 1
67693: PPUSH
67694: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67698: LD_INT 35
67700: PPUSH
67701: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_INT 22
67712: PUSH
67713: LD_OWVAR 2
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 69
67726: PPUSH
67727: LD_VAR 0 1
67731: PPUSH
67732: CALL_OW 74
67736: PPUSH
67737: CALL_OW 115
// until IsDead ( un ) ;
67741: LD_VAR 0 1
67745: PPUSH
67746: CALL_OW 301
67750: IFFALSE 67698
// end ;
67752: PPOPN 1
67754: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67755: LD_EXP 42
67759: PUSH
67760: LD_EXP 82
67764: AND
67765: IFFALSE 67777
67767: GO 67769
67769: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67770: LD_STRING earthquake(getX(game), 0, 32)
67772: PPUSH
67773: CALL_OW 559
67777: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67778: LD_EXP 42
67782: PUSH
67783: LD_EXP 83
67787: AND
67788: IFFALSE 67879
67790: GO 67792
67792: DISABLE
67793: LD_INT 0
67795: PPUSH
// begin enable ;
67796: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67797: LD_ADDR_VAR 0 1
67801: PUSH
67802: LD_INT 22
67804: PUSH
67805: LD_OWVAR 2
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 21
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 33
67826: PUSH
67827: LD_INT 3
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PPUSH
67839: CALL_OW 69
67843: ST_TO_ADDR
// if not tmp then
67844: LD_VAR 0 1
67848: NOT
67849: IFFALSE 67853
// exit ;
67851: GO 67879
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67853: LD_VAR 0 1
67857: PUSH
67858: LD_INT 1
67860: PPUSH
67861: LD_VAR 0 1
67865: PPUSH
67866: CALL_OW 12
67870: ARRAY
67871: PPUSH
67872: LD_INT 1
67874: PPUSH
67875: CALL_OW 234
// end ;
67879: PPOPN 1
67881: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67882: LD_EXP 42
67886: PUSH
67887: LD_EXP 84
67891: AND
67892: IFFALSE 68033
67894: GO 67896
67896: DISABLE
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
67901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67902: LD_ADDR_VAR 0 3
67906: PUSH
67907: LD_INT 22
67909: PUSH
67910: LD_OWVAR 2
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 25
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PPUSH
67933: CALL_OW 69
67937: ST_TO_ADDR
// if not tmp then
67938: LD_VAR 0 3
67942: NOT
67943: IFFALSE 67947
// exit ;
67945: GO 68033
// un := tmp [ rand ( 1 , tmp ) ] ;
67947: LD_ADDR_VAR 0 2
67951: PUSH
67952: LD_VAR 0 3
67956: PUSH
67957: LD_INT 1
67959: PPUSH
67960: LD_VAR 0 3
67964: PPUSH
67965: CALL_OW 12
67969: ARRAY
67970: ST_TO_ADDR
// if Crawls ( un ) then
67971: LD_VAR 0 2
67975: PPUSH
67976: CALL_OW 318
67980: IFFALSE 67991
// ComWalk ( un ) ;
67982: LD_VAR 0 2
67986: PPUSH
67987: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67991: LD_VAR 0 2
67995: PPUSH
67996: LD_INT 9
67998: PPUSH
67999: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68003: LD_INT 28
68005: PPUSH
68006: LD_OWVAR 2
68010: PPUSH
68011: LD_INT 2
68013: PPUSH
68014: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68018: LD_INT 29
68020: PPUSH
68021: LD_OWVAR 2
68025: PPUSH
68026: LD_INT 2
68028: PPUSH
68029: CALL_OW 322
// end ;
68033: PPOPN 3
68035: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68036: LD_EXP 42
68040: PUSH
68041: LD_EXP 85
68045: AND
68046: IFFALSE 68157
68048: GO 68050
68050: DISABLE
68051: LD_INT 0
68053: PPUSH
68054: PPUSH
68055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68056: LD_ADDR_VAR 0 3
68060: PUSH
68061: LD_INT 22
68063: PUSH
68064: LD_OWVAR 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 25
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PPUSH
68087: CALL_OW 69
68091: ST_TO_ADDR
// if not tmp then
68092: LD_VAR 0 3
68096: NOT
68097: IFFALSE 68101
// exit ;
68099: GO 68157
// un := tmp [ rand ( 1 , tmp ) ] ;
68101: LD_ADDR_VAR 0 2
68105: PUSH
68106: LD_VAR 0 3
68110: PUSH
68111: LD_INT 1
68113: PPUSH
68114: LD_VAR 0 3
68118: PPUSH
68119: CALL_OW 12
68123: ARRAY
68124: ST_TO_ADDR
// if Crawls ( un ) then
68125: LD_VAR 0 2
68129: PPUSH
68130: CALL_OW 318
68134: IFFALSE 68145
// ComWalk ( un ) ;
68136: LD_VAR 0 2
68140: PPUSH
68141: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68145: LD_VAR 0 2
68149: PPUSH
68150: LD_INT 8
68152: PPUSH
68153: CALL_OW 336
// end ;
68157: PPOPN 3
68159: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68160: LD_EXP 42
68164: PUSH
68165: LD_EXP 86
68169: AND
68170: IFFALSE 68314
68172: GO 68174
68174: DISABLE
68175: LD_INT 0
68177: PPUSH
68178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68179: LD_ADDR_VAR 0 2
68183: PUSH
68184: LD_INT 22
68186: PUSH
68187: LD_OWVAR 2
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 21
68198: PUSH
68199: LD_INT 2
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 2
68208: PUSH
68209: LD_INT 34
68211: PUSH
68212: LD_INT 12
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 34
68221: PUSH
68222: LD_INT 51
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 34
68231: PUSH
68232: LD_INT 32
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: LIST
68249: PPUSH
68250: CALL_OW 69
68254: ST_TO_ADDR
// if not tmp then
68255: LD_VAR 0 2
68259: NOT
68260: IFFALSE 68264
// exit ;
68262: GO 68314
// for i in tmp do
68264: LD_ADDR_VAR 0 1
68268: PUSH
68269: LD_VAR 0 2
68273: PUSH
68274: FOR_IN
68275: IFFALSE 68312
// if GetCargo ( i , mat_artifact ) = 0 then
68277: LD_VAR 0 1
68281: PPUSH
68282: LD_INT 4
68284: PPUSH
68285: CALL_OW 289
68289: PUSH
68290: LD_INT 0
68292: EQUAL
68293: IFFALSE 68310
// SetCargo ( i , mat_siberit , 100 ) ;
68295: LD_VAR 0 1
68299: PPUSH
68300: LD_INT 3
68302: PPUSH
68303: LD_INT 100
68305: PPUSH
68306: CALL_OW 290
68310: GO 68274
68312: POP
68313: POP
// end ;
68314: PPOPN 2
68316: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68317: LD_EXP 42
68321: PUSH
68322: LD_EXP 87
68326: AND
68327: IFFALSE 68510
68329: GO 68331
68331: DISABLE
68332: LD_INT 0
68334: PPUSH
68335: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68336: LD_ADDR_VAR 0 2
68340: PUSH
68341: LD_INT 22
68343: PUSH
68344: LD_OWVAR 2
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PPUSH
68353: CALL_OW 69
68357: ST_TO_ADDR
// if not tmp then
68358: LD_VAR 0 2
68362: NOT
68363: IFFALSE 68367
// exit ;
68365: GO 68510
// for i := 1 to 2 do
68367: LD_ADDR_VAR 0 1
68371: PUSH
68372: DOUBLE
68373: LD_INT 1
68375: DEC
68376: ST_TO_ADDR
68377: LD_INT 2
68379: PUSH
68380: FOR_TO
68381: IFFALSE 68508
// begin uc_side := your_side ;
68383: LD_ADDR_OWVAR 20
68387: PUSH
68388: LD_OWVAR 2
68392: ST_TO_ADDR
// uc_nation := nation_american ;
68393: LD_ADDR_OWVAR 21
68397: PUSH
68398: LD_INT 1
68400: ST_TO_ADDR
// vc_chassis := us_morphling ;
68401: LD_ADDR_OWVAR 37
68405: PUSH
68406: LD_INT 5
68408: ST_TO_ADDR
// vc_engine := engine_siberite ;
68409: LD_ADDR_OWVAR 39
68413: PUSH
68414: LD_INT 3
68416: ST_TO_ADDR
// vc_control := control_computer ;
68417: LD_ADDR_OWVAR 38
68421: PUSH
68422: LD_INT 3
68424: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68425: LD_ADDR_OWVAR 40
68429: PUSH
68430: LD_INT 10
68432: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68433: LD_VAR 0 2
68437: PUSH
68438: LD_INT 1
68440: ARRAY
68441: PPUSH
68442: CALL_OW 310
68446: NOT
68447: IFFALSE 68494
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68449: CALL_OW 45
68453: PPUSH
68454: LD_VAR 0 2
68458: PUSH
68459: LD_INT 1
68461: ARRAY
68462: PPUSH
68463: CALL_OW 250
68467: PPUSH
68468: LD_VAR 0 2
68472: PUSH
68473: LD_INT 1
68475: ARRAY
68476: PPUSH
68477: CALL_OW 251
68481: PPUSH
68482: LD_INT 12
68484: PPUSH
68485: LD_INT 1
68487: PPUSH
68488: CALL_OW 50
68492: GO 68506
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68494: CALL_OW 45
68498: PPUSH
68499: LD_INT 1
68501: PPUSH
68502: CALL_OW 51
// end ;
68506: GO 68380
68508: POP
68509: POP
// end ;
68510: PPOPN 2
68512: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68513: LD_EXP 42
68517: PUSH
68518: LD_EXP 88
68522: AND
68523: IFFALSE 68745
68525: GO 68527
68527: DISABLE
68528: LD_INT 0
68530: PPUSH
68531: PPUSH
68532: PPUSH
68533: PPUSH
68534: PPUSH
68535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68536: LD_ADDR_VAR 0 6
68540: PUSH
68541: LD_INT 22
68543: PUSH
68544: LD_OWVAR 2
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 21
68555: PUSH
68556: LD_INT 1
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 3
68565: PUSH
68566: LD_INT 23
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: PPUSH
68585: CALL_OW 69
68589: ST_TO_ADDR
// if not tmp then
68590: LD_VAR 0 6
68594: NOT
68595: IFFALSE 68599
// exit ;
68597: GO 68745
// s1 := rand ( 1 , 4 ) ;
68599: LD_ADDR_VAR 0 2
68603: PUSH
68604: LD_INT 1
68606: PPUSH
68607: LD_INT 4
68609: PPUSH
68610: CALL_OW 12
68614: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68615: LD_ADDR_VAR 0 4
68619: PUSH
68620: LD_VAR 0 6
68624: PUSH
68625: LD_INT 1
68627: ARRAY
68628: PPUSH
68629: LD_VAR 0 2
68633: PPUSH
68634: CALL_OW 259
68638: ST_TO_ADDR
// if s1 = 1 then
68639: LD_VAR 0 2
68643: PUSH
68644: LD_INT 1
68646: EQUAL
68647: IFFALSE 68667
// s2 := rand ( 2 , 4 ) else
68649: LD_ADDR_VAR 0 3
68653: PUSH
68654: LD_INT 2
68656: PPUSH
68657: LD_INT 4
68659: PPUSH
68660: CALL_OW 12
68664: ST_TO_ADDR
68665: GO 68675
// s2 := 1 ;
68667: LD_ADDR_VAR 0 3
68671: PUSH
68672: LD_INT 1
68674: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68675: LD_ADDR_VAR 0 5
68679: PUSH
68680: LD_VAR 0 6
68684: PUSH
68685: LD_INT 1
68687: ARRAY
68688: PPUSH
68689: LD_VAR 0 3
68693: PPUSH
68694: CALL_OW 259
68698: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68699: LD_VAR 0 6
68703: PUSH
68704: LD_INT 1
68706: ARRAY
68707: PPUSH
68708: LD_VAR 0 2
68712: PPUSH
68713: LD_VAR 0 5
68717: PPUSH
68718: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68722: LD_VAR 0 6
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: PPUSH
68731: LD_VAR 0 3
68735: PPUSH
68736: LD_VAR 0 4
68740: PPUSH
68741: CALL_OW 237
// end ;
68745: PPOPN 6
68747: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68748: LD_EXP 42
68752: PUSH
68753: LD_EXP 89
68757: AND
68758: IFFALSE 68837
68760: GO 68762
68762: DISABLE
68763: LD_INT 0
68765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68766: LD_ADDR_VAR 0 1
68770: PUSH
68771: LD_INT 22
68773: PUSH
68774: LD_OWVAR 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 30
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PPUSH
68797: CALL_OW 69
68801: ST_TO_ADDR
// if not tmp then
68802: LD_VAR 0 1
68806: NOT
68807: IFFALSE 68811
// exit ;
68809: GO 68837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68811: LD_VAR 0 1
68815: PUSH
68816: LD_INT 1
68818: PPUSH
68819: LD_VAR 0 1
68823: PPUSH
68824: CALL_OW 12
68828: ARRAY
68829: PPUSH
68830: LD_INT 1
68832: PPUSH
68833: CALL_OW 234
// end ;
68837: PPOPN 1
68839: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68840: LD_EXP 42
68844: PUSH
68845: LD_EXP 90
68849: AND
68850: IFFALSE 68962
68852: GO 68854
68854: DISABLE
68855: LD_INT 0
68857: PPUSH
68858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68859: LD_ADDR_VAR 0 2
68863: PUSH
68864: LD_INT 22
68866: PUSH
68867: LD_OWVAR 2
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 2
68878: PUSH
68879: LD_INT 30
68881: PUSH
68882: LD_INT 27
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 30
68891: PUSH
68892: LD_INT 26
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 30
68901: PUSH
68902: LD_INT 28
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PPUSH
68919: CALL_OW 69
68923: ST_TO_ADDR
// if not tmp then
68924: LD_VAR 0 2
68928: NOT
68929: IFFALSE 68933
// exit ;
68931: GO 68962
// for i in tmp do
68933: LD_ADDR_VAR 0 1
68937: PUSH
68938: LD_VAR 0 2
68942: PUSH
68943: FOR_IN
68944: IFFALSE 68960
// SetLives ( i , 1 ) ;
68946: LD_VAR 0 1
68950: PPUSH
68951: LD_INT 1
68953: PPUSH
68954: CALL_OW 234
68958: GO 68943
68960: POP
68961: POP
// end ;
68962: PPOPN 2
68964: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68965: LD_EXP 42
68969: PUSH
68970: LD_EXP 91
68974: AND
68975: IFFALSE 69262
68977: GO 68979
68979: DISABLE
68980: LD_INT 0
68982: PPUSH
68983: PPUSH
68984: PPUSH
// begin i := rand ( 1 , 7 ) ;
68985: LD_ADDR_VAR 0 1
68989: PUSH
68990: LD_INT 1
68992: PPUSH
68993: LD_INT 7
68995: PPUSH
68996: CALL_OW 12
69000: ST_TO_ADDR
// case i of 1 :
69001: LD_VAR 0 1
69005: PUSH
69006: LD_INT 1
69008: DOUBLE
69009: EQUAL
69010: IFTRUE 69014
69012: GO 69024
69014: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69015: LD_STRING earthquake(getX(game), 0, 32)
69017: PPUSH
69018: CALL_OW 559
69022: GO 69262
69024: LD_INT 2
69026: DOUBLE
69027: EQUAL
69028: IFTRUE 69032
69030: GO 69046
69032: POP
// begin ToLua ( displayStucuk(); ) ;
69033: LD_STRING displayStucuk();
69035: PPUSH
69036: CALL_OW 559
// ResetFog ;
69040: CALL_OW 335
// end ; 3 :
69044: GO 69262
69046: LD_INT 3
69048: DOUBLE
69049: EQUAL
69050: IFTRUE 69054
69052: GO 69158
69054: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69055: LD_ADDR_VAR 0 2
69059: PUSH
69060: LD_INT 22
69062: PUSH
69063: LD_OWVAR 2
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 25
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PPUSH
69086: CALL_OW 69
69090: ST_TO_ADDR
// if not tmp then
69091: LD_VAR 0 2
69095: NOT
69096: IFFALSE 69100
// exit ;
69098: GO 69262
// un := tmp [ rand ( 1 , tmp ) ] ;
69100: LD_ADDR_VAR 0 3
69104: PUSH
69105: LD_VAR 0 2
69109: PUSH
69110: LD_INT 1
69112: PPUSH
69113: LD_VAR 0 2
69117: PPUSH
69118: CALL_OW 12
69122: ARRAY
69123: ST_TO_ADDR
// if Crawls ( un ) then
69124: LD_VAR 0 3
69128: PPUSH
69129: CALL_OW 318
69133: IFFALSE 69144
// ComWalk ( un ) ;
69135: LD_VAR 0 3
69139: PPUSH
69140: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69144: LD_VAR 0 3
69148: PPUSH
69149: LD_INT 8
69151: PPUSH
69152: CALL_OW 336
// end ; 4 :
69156: GO 69262
69158: LD_INT 4
69160: DOUBLE
69161: EQUAL
69162: IFTRUE 69166
69164: GO 69240
69166: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69167: LD_ADDR_VAR 0 2
69171: PUSH
69172: LD_INT 22
69174: PUSH
69175: LD_OWVAR 2
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 30
69186: PUSH
69187: LD_INT 29
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PPUSH
69198: CALL_OW 69
69202: ST_TO_ADDR
// if not tmp then
69203: LD_VAR 0 2
69207: NOT
69208: IFFALSE 69212
// exit ;
69210: GO 69262
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69212: LD_VAR 0 2
69216: PUSH
69217: LD_INT 1
69219: ARRAY
69220: PPUSH
69221: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69225: LD_VAR 0 2
69229: PUSH
69230: LD_INT 1
69232: ARRAY
69233: PPUSH
69234: CALL_OW 65
// end ; 5 .. 7 :
69238: GO 69262
69240: LD_INT 5
69242: DOUBLE
69243: GREATEREQUAL
69244: IFFALSE 69252
69246: LD_INT 7
69248: DOUBLE
69249: LESSEQUAL
69250: IFTRUE 69254
69252: GO 69261
69254: POP
// StreamSibBomb ; end ;
69255: CALL 65499 0 0
69259: GO 69262
69261: POP
// end ;
69262: PPOPN 3
69264: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69265: LD_EXP 42
69269: PUSH
69270: LD_EXP 92
69274: AND
69275: IFFALSE 69431
69277: GO 69279
69279: DISABLE
69280: LD_INT 0
69282: PPUSH
69283: PPUSH
69284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69285: LD_ADDR_VAR 0 2
69289: PUSH
69290: LD_INT 81
69292: PUSH
69293: LD_OWVAR 2
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 21
69307: PUSH
69308: LD_INT 1
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 21
69317: PUSH
69318: LD_INT 2
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: LIST
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PPUSH
69334: CALL_OW 69
69338: ST_TO_ADDR
// if not tmp then
69339: LD_VAR 0 2
69343: NOT
69344: IFFALSE 69348
// exit ;
69346: GO 69431
// p := 0 ;
69348: LD_ADDR_VAR 0 3
69352: PUSH
69353: LD_INT 0
69355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69356: LD_INT 35
69358: PPUSH
69359: CALL_OW 67
// p := p + 1 ;
69363: LD_ADDR_VAR 0 3
69367: PUSH
69368: LD_VAR 0 3
69372: PUSH
69373: LD_INT 1
69375: PLUS
69376: ST_TO_ADDR
// for i in tmp do
69377: LD_ADDR_VAR 0 1
69381: PUSH
69382: LD_VAR 0 2
69386: PUSH
69387: FOR_IN
69388: IFFALSE 69419
// if GetLives ( i ) < 1000 then
69390: LD_VAR 0 1
69394: PPUSH
69395: CALL_OW 256
69399: PUSH
69400: LD_INT 1000
69402: LESS
69403: IFFALSE 69417
// SetLives ( i , 1000 ) ;
69405: LD_VAR 0 1
69409: PPUSH
69410: LD_INT 1000
69412: PPUSH
69413: CALL_OW 234
69417: GO 69387
69419: POP
69420: POP
// until p > 20 ;
69421: LD_VAR 0 3
69425: PUSH
69426: LD_INT 20
69428: GREATER
69429: IFFALSE 69356
// end ;
69431: PPOPN 3
69433: END
// every 0 0$1 trigger StreamModeActive and sTime do
69434: LD_EXP 42
69438: PUSH
69439: LD_EXP 93
69443: AND
69444: IFFALSE 69479
69446: GO 69448
69448: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69449: LD_INT 28
69451: PPUSH
69452: LD_OWVAR 2
69456: PPUSH
69457: LD_INT 2
69459: PPUSH
69460: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69464: LD_INT 30
69466: PPUSH
69467: LD_OWVAR 2
69471: PPUSH
69472: LD_INT 2
69474: PPUSH
69475: CALL_OW 322
// end ;
69479: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69480: LD_EXP 42
69484: PUSH
69485: LD_EXP 94
69489: AND
69490: IFFALSE 69611
69492: GO 69494
69494: DISABLE
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69499: LD_ADDR_VAR 0 2
69503: PUSH
69504: LD_INT 22
69506: PUSH
69507: LD_OWVAR 2
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 21
69518: PUSH
69519: LD_INT 1
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 3
69528: PUSH
69529: LD_INT 23
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: PPUSH
69548: CALL_OW 69
69552: ST_TO_ADDR
// if not tmp then
69553: LD_VAR 0 2
69557: NOT
69558: IFFALSE 69562
// exit ;
69560: GO 69611
// for i in tmp do
69562: LD_ADDR_VAR 0 1
69566: PUSH
69567: LD_VAR 0 2
69571: PUSH
69572: FOR_IN
69573: IFFALSE 69609
// begin if Crawls ( i ) then
69575: LD_VAR 0 1
69579: PPUSH
69580: CALL_OW 318
69584: IFFALSE 69595
// ComWalk ( i ) ;
69586: LD_VAR 0 1
69590: PPUSH
69591: CALL_OW 138
// SetClass ( i , 2 ) ;
69595: LD_VAR 0 1
69599: PPUSH
69600: LD_INT 2
69602: PPUSH
69603: CALL_OW 336
// end ;
69607: GO 69572
69609: POP
69610: POP
// end ;
69611: PPOPN 2
69613: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69614: LD_EXP 42
69618: PUSH
69619: LD_EXP 95
69623: AND
69624: IFFALSE 69912
69626: GO 69628
69628: DISABLE
69629: LD_INT 0
69631: PPUSH
69632: PPUSH
69633: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69634: LD_OWVAR 2
69638: PPUSH
69639: LD_INT 9
69641: PPUSH
69642: LD_INT 1
69644: PPUSH
69645: LD_INT 1
69647: PPUSH
69648: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69652: LD_INT 9
69654: PPUSH
69655: LD_OWVAR 2
69659: PPUSH
69660: CALL_OW 343
// uc_side := 9 ;
69664: LD_ADDR_OWVAR 20
69668: PUSH
69669: LD_INT 9
69671: ST_TO_ADDR
// uc_nation := 2 ;
69672: LD_ADDR_OWVAR 21
69676: PUSH
69677: LD_INT 2
69679: ST_TO_ADDR
// hc_name := Dark Warrior ;
69680: LD_ADDR_OWVAR 26
69684: PUSH
69685: LD_STRING Dark Warrior
69687: ST_TO_ADDR
// hc_gallery :=  ;
69688: LD_ADDR_OWVAR 33
69692: PUSH
69693: LD_STRING 
69695: ST_TO_ADDR
// hc_noskilllimit := true ;
69696: LD_ADDR_OWVAR 76
69700: PUSH
69701: LD_INT 1
69703: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69704: LD_ADDR_OWVAR 31
69708: PUSH
69709: LD_INT 30
69711: PUSH
69712: LD_INT 30
69714: PUSH
69715: LD_INT 30
69717: PUSH
69718: LD_INT 30
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: ST_TO_ADDR
// un := CreateHuman ;
69727: LD_ADDR_VAR 0 3
69731: PUSH
69732: CALL_OW 44
69736: ST_TO_ADDR
// hc_noskilllimit := false ;
69737: LD_ADDR_OWVAR 76
69741: PUSH
69742: LD_INT 0
69744: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69745: LD_VAR 0 3
69749: PPUSH
69750: LD_INT 1
69752: PPUSH
69753: CALL_OW 51
// ToLua ( playRanger() ) ;
69757: LD_STRING playRanger()
69759: PPUSH
69760: CALL_OW 559
// p := 0 ;
69764: LD_ADDR_VAR 0 2
69768: PUSH
69769: LD_INT 0
69771: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69772: LD_INT 35
69774: PPUSH
69775: CALL_OW 67
// p := p + 1 ;
69779: LD_ADDR_VAR 0 2
69783: PUSH
69784: LD_VAR 0 2
69788: PUSH
69789: LD_INT 1
69791: PLUS
69792: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69793: LD_VAR 0 3
69797: PPUSH
69798: CALL_OW 256
69802: PUSH
69803: LD_INT 1000
69805: LESS
69806: IFFALSE 69820
// SetLives ( un , 1000 ) ;
69808: LD_VAR 0 3
69812: PPUSH
69813: LD_INT 1000
69815: PPUSH
69816: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69820: LD_VAR 0 3
69824: PPUSH
69825: LD_INT 81
69827: PUSH
69828: LD_OWVAR 2
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 91
69839: PUSH
69840: LD_VAR 0 3
69844: PUSH
69845: LD_INT 30
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PPUSH
69857: CALL_OW 69
69861: PPUSH
69862: LD_VAR 0 3
69866: PPUSH
69867: CALL_OW 74
69871: PPUSH
69872: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69876: LD_VAR 0 2
69880: PUSH
69881: LD_INT 80
69883: GREATER
69884: PUSH
69885: LD_VAR 0 3
69889: PPUSH
69890: CALL_OW 301
69894: OR
69895: IFFALSE 69772
// if un then
69897: LD_VAR 0 3
69901: IFFALSE 69912
// RemoveUnit ( un ) ;
69903: LD_VAR 0 3
69907: PPUSH
69908: CALL_OW 64
// end ;
69912: PPOPN 3
69914: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69915: LD_EXP 96
69919: IFFALSE 70035
69921: GO 69923
69923: DISABLE
69924: LD_INT 0
69926: PPUSH
69927: PPUSH
69928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69929: LD_ADDR_VAR 0 2
69933: PUSH
69934: LD_INT 81
69936: PUSH
69937: LD_OWVAR 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 21
69948: PUSH
69949: LD_INT 1
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PPUSH
69960: CALL_OW 69
69964: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69965: LD_STRING playComputer()
69967: PPUSH
69968: CALL_OW 559
// if not tmp then
69972: LD_VAR 0 2
69976: NOT
69977: IFFALSE 69981
// exit ;
69979: GO 70035
// for i in tmp do
69981: LD_ADDR_VAR 0 1
69985: PUSH
69986: LD_VAR 0 2
69990: PUSH
69991: FOR_IN
69992: IFFALSE 70033
// for j := 1 to 4 do
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: DOUBLE
70000: LD_INT 1
70002: DEC
70003: ST_TO_ADDR
70004: LD_INT 4
70006: PUSH
70007: FOR_TO
70008: IFFALSE 70029
// SetSkill ( i , j , 10 ) ;
70010: LD_VAR 0 1
70014: PPUSH
70015: LD_VAR 0 3
70019: PPUSH
70020: LD_INT 10
70022: PPUSH
70023: CALL_OW 237
70027: GO 70007
70029: POP
70030: POP
70031: GO 69991
70033: POP
70034: POP
// end ;
70035: PPOPN 3
70037: END
// every 0 0$1 trigger s30 do var i , tmp ;
70038: LD_EXP 97
70042: IFFALSE 70111
70044: GO 70046
70046: DISABLE
70047: LD_INT 0
70049: PPUSH
70050: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70051: LD_ADDR_VAR 0 2
70055: PUSH
70056: LD_INT 22
70058: PUSH
70059: LD_OWVAR 2
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PPUSH
70068: CALL_OW 69
70072: ST_TO_ADDR
// if not tmp then
70073: LD_VAR 0 2
70077: NOT
70078: IFFALSE 70082
// exit ;
70080: GO 70111
// for i in tmp do
70082: LD_ADDR_VAR 0 1
70086: PUSH
70087: LD_VAR 0 2
70091: PUSH
70092: FOR_IN
70093: IFFALSE 70109
// SetLives ( i , 300 ) ;
70095: LD_VAR 0 1
70099: PPUSH
70100: LD_INT 300
70102: PPUSH
70103: CALL_OW 234
70107: GO 70092
70109: POP
70110: POP
// end ;
70111: PPOPN 2
70113: END
// every 0 0$1 trigger s60 do var i , tmp ;
70114: LD_EXP 98
70118: IFFALSE 70187
70120: GO 70122
70122: DISABLE
70123: LD_INT 0
70125: PPUSH
70126: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70127: LD_ADDR_VAR 0 2
70131: PUSH
70132: LD_INT 22
70134: PUSH
70135: LD_OWVAR 2
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PPUSH
70144: CALL_OW 69
70148: ST_TO_ADDR
// if not tmp then
70149: LD_VAR 0 2
70153: NOT
70154: IFFALSE 70158
// exit ;
70156: GO 70187
// for i in tmp do
70158: LD_ADDR_VAR 0 1
70162: PUSH
70163: LD_VAR 0 2
70167: PUSH
70168: FOR_IN
70169: IFFALSE 70185
// SetLives ( i , 600 ) ;
70171: LD_VAR 0 1
70175: PPUSH
70176: LD_INT 600
70178: PPUSH
70179: CALL_OW 234
70183: GO 70168
70185: POP
70186: POP
// end ;
70187: PPOPN 2
70189: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70190: LD_INT 0
70192: PPUSH
// case cmd of 301 :
70193: LD_VAR 0 1
70197: PUSH
70198: LD_INT 301
70200: DOUBLE
70201: EQUAL
70202: IFTRUE 70206
70204: GO 70238
70206: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70207: LD_VAR 0 6
70211: PPUSH
70212: LD_VAR 0 7
70216: PPUSH
70217: LD_VAR 0 8
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: LD_VAR 0 5
70231: PPUSH
70232: CALL 71447 0 5
70236: GO 70359
70238: LD_INT 302
70240: DOUBLE
70241: EQUAL
70242: IFTRUE 70246
70244: GO 70283
70246: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70247: LD_VAR 0 6
70251: PPUSH
70252: LD_VAR 0 7
70256: PPUSH
70257: LD_VAR 0 8
70261: PPUSH
70262: LD_VAR 0 9
70266: PPUSH
70267: LD_VAR 0 4
70271: PPUSH
70272: LD_VAR 0 5
70276: PPUSH
70277: CALL 71538 0 6
70281: GO 70359
70283: LD_INT 303
70285: DOUBLE
70286: EQUAL
70287: IFTRUE 70291
70289: GO 70328
70291: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70292: LD_VAR 0 6
70296: PPUSH
70297: LD_VAR 0 7
70301: PPUSH
70302: LD_VAR 0 8
70306: PPUSH
70307: LD_VAR 0 9
70311: PPUSH
70312: LD_VAR 0 4
70316: PPUSH
70317: LD_VAR 0 5
70321: PPUSH
70322: CALL 70364 0 6
70326: GO 70359
70328: LD_INT 304
70330: DOUBLE
70331: EQUAL
70332: IFTRUE 70336
70334: GO 70358
70336: POP
// hHackTeleport ( unit , x , y ) ; end ;
70337: LD_VAR 0 2
70341: PPUSH
70342: LD_VAR 0 4
70346: PPUSH
70347: LD_VAR 0 5
70351: PPUSH
70352: CALL 72131 0 3
70356: GO 70359
70358: POP
// end ;
70359: LD_VAR 0 12
70363: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70368: LD_VAR 0 1
70372: PUSH
70373: LD_INT 1
70375: LESS
70376: PUSH
70377: LD_VAR 0 1
70381: PUSH
70382: LD_INT 3
70384: GREATER
70385: OR
70386: PUSH
70387: LD_VAR 0 5
70391: PPUSH
70392: LD_VAR 0 6
70396: PPUSH
70397: CALL_OW 428
70401: OR
70402: IFFALSE 70406
// exit ;
70404: GO 71134
// uc_side := your_side ;
70406: LD_ADDR_OWVAR 20
70410: PUSH
70411: LD_OWVAR 2
70415: ST_TO_ADDR
// uc_nation := nation ;
70416: LD_ADDR_OWVAR 21
70420: PUSH
70421: LD_VAR 0 1
70425: ST_TO_ADDR
// bc_level = 1 ;
70426: LD_ADDR_OWVAR 43
70430: PUSH
70431: LD_INT 1
70433: ST_TO_ADDR
// case btype of 1 :
70434: LD_VAR 0 2
70438: PUSH
70439: LD_INT 1
70441: DOUBLE
70442: EQUAL
70443: IFTRUE 70447
70445: GO 70458
70447: POP
// bc_type := b_depot ; 2 :
70448: LD_ADDR_OWVAR 42
70452: PUSH
70453: LD_INT 0
70455: ST_TO_ADDR
70456: GO 71078
70458: LD_INT 2
70460: DOUBLE
70461: EQUAL
70462: IFTRUE 70466
70464: GO 70477
70466: POP
// bc_type := b_warehouse ; 3 :
70467: LD_ADDR_OWVAR 42
70471: PUSH
70472: LD_INT 1
70474: ST_TO_ADDR
70475: GO 71078
70477: LD_INT 3
70479: DOUBLE
70480: EQUAL
70481: IFTRUE 70485
70483: GO 70496
70485: POP
// bc_type := b_lab ; 4 .. 9 :
70486: LD_ADDR_OWVAR 42
70490: PUSH
70491: LD_INT 6
70493: ST_TO_ADDR
70494: GO 71078
70496: LD_INT 4
70498: DOUBLE
70499: GREATEREQUAL
70500: IFFALSE 70508
70502: LD_INT 9
70504: DOUBLE
70505: LESSEQUAL
70506: IFTRUE 70510
70508: GO 70570
70510: POP
// begin bc_type := b_lab_half ;
70511: LD_ADDR_OWVAR 42
70515: PUSH
70516: LD_INT 7
70518: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70519: LD_ADDR_OWVAR 44
70523: PUSH
70524: LD_INT 10
70526: PUSH
70527: LD_INT 11
70529: PUSH
70530: LD_INT 12
70532: PUSH
70533: LD_INT 15
70535: PUSH
70536: LD_INT 14
70538: PUSH
70539: LD_INT 13
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: LD_VAR 0 2
70554: PUSH
70555: LD_INT 3
70557: MINUS
70558: ARRAY
70559: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70560: LD_ADDR_OWVAR 45
70564: PUSH
70565: LD_INT 9
70567: ST_TO_ADDR
// end ; 10 .. 13 :
70568: GO 71078
70570: LD_INT 10
70572: DOUBLE
70573: GREATEREQUAL
70574: IFFALSE 70582
70576: LD_INT 13
70578: DOUBLE
70579: LESSEQUAL
70580: IFTRUE 70584
70582: GO 70661
70584: POP
// begin bc_type := b_lab_full ;
70585: LD_ADDR_OWVAR 42
70589: PUSH
70590: LD_INT 8
70592: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70593: LD_ADDR_OWVAR 44
70597: PUSH
70598: LD_INT 10
70600: PUSH
70601: LD_INT 12
70603: PUSH
70604: LD_INT 14
70606: PUSH
70607: LD_INT 13
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: PUSH
70616: LD_VAR 0 2
70620: PUSH
70621: LD_INT 9
70623: MINUS
70624: ARRAY
70625: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70626: LD_ADDR_OWVAR 45
70630: PUSH
70631: LD_INT 11
70633: PUSH
70634: LD_INT 15
70636: PUSH
70637: LD_INT 12
70639: PUSH
70640: LD_INT 15
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: PUSH
70649: LD_VAR 0 2
70653: PUSH
70654: LD_INT 9
70656: MINUS
70657: ARRAY
70658: ST_TO_ADDR
// end ; 14 :
70659: GO 71078
70661: LD_INT 14
70663: DOUBLE
70664: EQUAL
70665: IFTRUE 70669
70667: GO 70680
70669: POP
// bc_type := b_workshop ; 15 :
70670: LD_ADDR_OWVAR 42
70674: PUSH
70675: LD_INT 2
70677: ST_TO_ADDR
70678: GO 71078
70680: LD_INT 15
70682: DOUBLE
70683: EQUAL
70684: IFTRUE 70688
70686: GO 70699
70688: POP
// bc_type := b_factory ; 16 :
70689: LD_ADDR_OWVAR 42
70693: PUSH
70694: LD_INT 3
70696: ST_TO_ADDR
70697: GO 71078
70699: LD_INT 16
70701: DOUBLE
70702: EQUAL
70703: IFTRUE 70707
70705: GO 70718
70707: POP
// bc_type := b_ext_gun ; 17 :
70708: LD_ADDR_OWVAR 42
70712: PUSH
70713: LD_INT 17
70715: ST_TO_ADDR
70716: GO 71078
70718: LD_INT 17
70720: DOUBLE
70721: EQUAL
70722: IFTRUE 70726
70724: GO 70754
70726: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70727: LD_ADDR_OWVAR 42
70731: PUSH
70732: LD_INT 19
70734: PUSH
70735: LD_INT 23
70737: PUSH
70738: LD_INT 19
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: LIST
70745: PUSH
70746: LD_VAR 0 1
70750: ARRAY
70751: ST_TO_ADDR
70752: GO 71078
70754: LD_INT 18
70756: DOUBLE
70757: EQUAL
70758: IFTRUE 70762
70760: GO 70773
70762: POP
// bc_type := b_ext_radar ; 19 :
70763: LD_ADDR_OWVAR 42
70767: PUSH
70768: LD_INT 20
70770: ST_TO_ADDR
70771: GO 71078
70773: LD_INT 19
70775: DOUBLE
70776: EQUAL
70777: IFTRUE 70781
70779: GO 70792
70781: POP
// bc_type := b_ext_radio ; 20 :
70782: LD_ADDR_OWVAR 42
70786: PUSH
70787: LD_INT 22
70789: ST_TO_ADDR
70790: GO 71078
70792: LD_INT 20
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70800
70798: GO 70811
70800: POP
// bc_type := b_ext_siberium ; 21 :
70801: LD_ADDR_OWVAR 42
70805: PUSH
70806: LD_INT 21
70808: ST_TO_ADDR
70809: GO 71078
70811: LD_INT 21
70813: DOUBLE
70814: EQUAL
70815: IFTRUE 70819
70817: GO 70830
70819: POP
// bc_type := b_ext_computer ; 22 :
70820: LD_ADDR_OWVAR 42
70824: PUSH
70825: LD_INT 24
70827: ST_TO_ADDR
70828: GO 71078
70830: LD_INT 22
70832: DOUBLE
70833: EQUAL
70834: IFTRUE 70838
70836: GO 70849
70838: POP
// bc_type := b_ext_track ; 23 :
70839: LD_ADDR_OWVAR 42
70843: PUSH
70844: LD_INT 16
70846: ST_TO_ADDR
70847: GO 71078
70849: LD_INT 23
70851: DOUBLE
70852: EQUAL
70853: IFTRUE 70857
70855: GO 70868
70857: POP
// bc_type := b_ext_laser ; 24 :
70858: LD_ADDR_OWVAR 42
70862: PUSH
70863: LD_INT 25
70865: ST_TO_ADDR
70866: GO 71078
70868: LD_INT 24
70870: DOUBLE
70871: EQUAL
70872: IFTRUE 70876
70874: GO 70887
70876: POP
// bc_type := b_control_tower ; 25 :
70877: LD_ADDR_OWVAR 42
70881: PUSH
70882: LD_INT 36
70884: ST_TO_ADDR
70885: GO 71078
70887: LD_INT 25
70889: DOUBLE
70890: EQUAL
70891: IFTRUE 70895
70893: GO 70906
70895: POP
// bc_type := b_breastwork ; 26 :
70896: LD_ADDR_OWVAR 42
70900: PUSH
70901: LD_INT 31
70903: ST_TO_ADDR
70904: GO 71078
70906: LD_INT 26
70908: DOUBLE
70909: EQUAL
70910: IFTRUE 70914
70912: GO 70925
70914: POP
// bc_type := b_bunker ; 27 :
70915: LD_ADDR_OWVAR 42
70919: PUSH
70920: LD_INT 32
70922: ST_TO_ADDR
70923: GO 71078
70925: LD_INT 27
70927: DOUBLE
70928: EQUAL
70929: IFTRUE 70933
70931: GO 70944
70933: POP
// bc_type := b_turret ; 28 :
70934: LD_ADDR_OWVAR 42
70938: PUSH
70939: LD_INT 33
70941: ST_TO_ADDR
70942: GO 71078
70944: LD_INT 28
70946: DOUBLE
70947: EQUAL
70948: IFTRUE 70952
70950: GO 70963
70952: POP
// bc_type := b_armoury ; 29 :
70953: LD_ADDR_OWVAR 42
70957: PUSH
70958: LD_INT 4
70960: ST_TO_ADDR
70961: GO 71078
70963: LD_INT 29
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 70971
70969: GO 70982
70971: POP
// bc_type := b_barracks ; 30 :
70972: LD_ADDR_OWVAR 42
70976: PUSH
70977: LD_INT 5
70979: ST_TO_ADDR
70980: GO 71078
70982: LD_INT 30
70984: DOUBLE
70985: EQUAL
70986: IFTRUE 70990
70988: GO 71001
70990: POP
// bc_type := b_solar_power ; 31 :
70991: LD_ADDR_OWVAR 42
70995: PUSH
70996: LD_INT 27
70998: ST_TO_ADDR
70999: GO 71078
71001: LD_INT 31
71003: DOUBLE
71004: EQUAL
71005: IFTRUE 71009
71007: GO 71020
71009: POP
// bc_type := b_oil_power ; 32 :
71010: LD_ADDR_OWVAR 42
71014: PUSH
71015: LD_INT 26
71017: ST_TO_ADDR
71018: GO 71078
71020: LD_INT 32
71022: DOUBLE
71023: EQUAL
71024: IFTRUE 71028
71026: GO 71039
71028: POP
// bc_type := b_siberite_power ; 33 :
71029: LD_ADDR_OWVAR 42
71033: PUSH
71034: LD_INT 28
71036: ST_TO_ADDR
71037: GO 71078
71039: LD_INT 33
71041: DOUBLE
71042: EQUAL
71043: IFTRUE 71047
71045: GO 71058
71047: POP
// bc_type := b_oil_mine ; 34 :
71048: LD_ADDR_OWVAR 42
71052: PUSH
71053: LD_INT 29
71055: ST_TO_ADDR
71056: GO 71078
71058: LD_INT 34
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71066
71064: GO 71077
71066: POP
// bc_type := b_siberite_mine ; end ;
71067: LD_ADDR_OWVAR 42
71071: PUSH
71072: LD_INT 30
71074: ST_TO_ADDR
71075: GO 71078
71077: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71078: LD_ADDR_VAR 0 8
71082: PUSH
71083: LD_VAR 0 5
71087: PPUSH
71088: LD_VAR 0 6
71092: PPUSH
71093: LD_VAR 0 3
71097: PPUSH
71098: CALL_OW 47
71102: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71103: LD_OWVAR 42
71107: PUSH
71108: LD_INT 32
71110: PUSH
71111: LD_INT 33
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: IN
71118: IFFALSE 71134
// PlaceWeaponTurret ( b , weapon ) ;
71120: LD_VAR 0 8
71124: PPUSH
71125: LD_VAR 0 4
71129: PPUSH
71130: CALL_OW 431
// end ;
71134: LD_VAR 0 7
71138: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71139: LD_INT 0
71141: PPUSH
71142: PPUSH
71143: PPUSH
71144: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71145: LD_ADDR_VAR 0 4
71149: PUSH
71150: LD_INT 22
71152: PUSH
71153: LD_OWVAR 2
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: LD_INT 30
71167: PUSH
71168: LD_INT 0
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 30
71177: PUSH
71178: LD_INT 1
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: LIST
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PPUSH
71194: CALL_OW 69
71198: ST_TO_ADDR
// if not tmp then
71199: LD_VAR 0 4
71203: NOT
71204: IFFALSE 71208
// exit ;
71206: GO 71267
// for i in tmp do
71208: LD_ADDR_VAR 0 2
71212: PUSH
71213: LD_VAR 0 4
71217: PUSH
71218: FOR_IN
71219: IFFALSE 71265
// for j = 1 to 3 do
71221: LD_ADDR_VAR 0 3
71225: PUSH
71226: DOUBLE
71227: LD_INT 1
71229: DEC
71230: ST_TO_ADDR
71231: LD_INT 3
71233: PUSH
71234: FOR_TO
71235: IFFALSE 71261
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71237: LD_VAR 0 2
71241: PPUSH
71242: CALL_OW 274
71246: PPUSH
71247: LD_VAR 0 3
71251: PPUSH
71252: LD_INT 99999
71254: PPUSH
71255: CALL_OW 277
71259: GO 71234
71261: POP
71262: POP
71263: GO 71218
71265: POP
71266: POP
// end ;
71267: LD_VAR 0 1
71271: RET
// export function hHackSetLevel10 ; var i , j ; begin
71272: LD_INT 0
71274: PPUSH
71275: PPUSH
71276: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71277: LD_ADDR_VAR 0 2
71281: PUSH
71282: LD_INT 21
71284: PUSH
71285: LD_INT 1
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PPUSH
71292: CALL_OW 69
71296: PUSH
71297: FOR_IN
71298: IFFALSE 71350
// if IsSelected ( i ) then
71300: LD_VAR 0 2
71304: PPUSH
71305: CALL_OW 306
71309: IFFALSE 71348
// begin for j := 1 to 4 do
71311: LD_ADDR_VAR 0 3
71315: PUSH
71316: DOUBLE
71317: LD_INT 1
71319: DEC
71320: ST_TO_ADDR
71321: LD_INT 4
71323: PUSH
71324: FOR_TO
71325: IFFALSE 71346
// SetSkill ( i , j , 10 ) ;
71327: LD_VAR 0 2
71331: PPUSH
71332: LD_VAR 0 3
71336: PPUSH
71337: LD_INT 10
71339: PPUSH
71340: CALL_OW 237
71344: GO 71324
71346: POP
71347: POP
// end ;
71348: GO 71297
71350: POP
71351: POP
// end ;
71352: LD_VAR 0 1
71356: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71357: LD_INT 0
71359: PPUSH
71360: PPUSH
71361: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71362: LD_ADDR_VAR 0 2
71366: PUSH
71367: LD_INT 22
71369: PUSH
71370: LD_OWVAR 2
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PUSH
71379: LD_INT 21
71381: PUSH
71382: LD_INT 1
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PPUSH
71393: CALL_OW 69
71397: PUSH
71398: FOR_IN
71399: IFFALSE 71440
// begin for j := 1 to 4 do
71401: LD_ADDR_VAR 0 3
71405: PUSH
71406: DOUBLE
71407: LD_INT 1
71409: DEC
71410: ST_TO_ADDR
71411: LD_INT 4
71413: PUSH
71414: FOR_TO
71415: IFFALSE 71436
// SetSkill ( i , j , 10 ) ;
71417: LD_VAR 0 2
71421: PPUSH
71422: LD_VAR 0 3
71426: PPUSH
71427: LD_INT 10
71429: PPUSH
71430: CALL_OW 237
71434: GO 71414
71436: POP
71437: POP
// end ;
71438: GO 71398
71440: POP
71441: POP
// end ;
71442: LD_VAR 0 1
71446: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71447: LD_INT 0
71449: PPUSH
// uc_side := your_side ;
71450: LD_ADDR_OWVAR 20
71454: PUSH
71455: LD_OWVAR 2
71459: ST_TO_ADDR
// uc_nation := nation ;
71460: LD_ADDR_OWVAR 21
71464: PUSH
71465: LD_VAR 0 1
71469: ST_TO_ADDR
// InitHc ;
71470: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71474: LD_INT 0
71476: PPUSH
71477: LD_VAR 0 2
71481: PPUSH
71482: LD_VAR 0 3
71486: PPUSH
71487: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71491: LD_VAR 0 4
71495: PPUSH
71496: LD_VAR 0 5
71500: PPUSH
71501: CALL_OW 428
71505: PUSH
71506: LD_INT 0
71508: EQUAL
71509: IFFALSE 71533
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71511: CALL_OW 44
71515: PPUSH
71516: LD_VAR 0 4
71520: PPUSH
71521: LD_VAR 0 5
71525: PPUSH
71526: LD_INT 1
71528: PPUSH
71529: CALL_OW 48
// end ;
71533: LD_VAR 0 6
71537: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71538: LD_INT 0
71540: PPUSH
71541: PPUSH
// uc_side := your_side ;
71542: LD_ADDR_OWVAR 20
71546: PUSH
71547: LD_OWVAR 2
71551: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71552: LD_VAR 0 1
71556: PUSH
71557: LD_INT 1
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: LD_INT 3
71565: PUSH
71566: LD_INT 4
71568: PUSH
71569: LD_INT 5
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: IN
71579: IFFALSE 71591
// uc_nation := nation_american else
71581: LD_ADDR_OWVAR 21
71585: PUSH
71586: LD_INT 1
71588: ST_TO_ADDR
71589: GO 71634
// if chassis in [ 11 , 12 , 13 , 14 ] then
71591: LD_VAR 0 1
71595: PUSH
71596: LD_INT 11
71598: PUSH
71599: LD_INT 12
71601: PUSH
71602: LD_INT 13
71604: PUSH
71605: LD_INT 14
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: IN
71614: IFFALSE 71626
// uc_nation := nation_arabian else
71616: LD_ADDR_OWVAR 21
71620: PUSH
71621: LD_INT 2
71623: ST_TO_ADDR
71624: GO 71634
// uc_nation := nation_russian ;
71626: LD_ADDR_OWVAR 21
71630: PUSH
71631: LD_INT 3
71633: ST_TO_ADDR
// vc_chassis := chassis ;
71634: LD_ADDR_OWVAR 37
71638: PUSH
71639: LD_VAR 0 1
71643: ST_TO_ADDR
// vc_engine := engine ;
71644: LD_ADDR_OWVAR 39
71648: PUSH
71649: LD_VAR 0 2
71653: ST_TO_ADDR
// vc_control := control ;
71654: LD_ADDR_OWVAR 38
71658: PUSH
71659: LD_VAR 0 3
71663: ST_TO_ADDR
// vc_weapon := weapon ;
71664: LD_ADDR_OWVAR 40
71668: PUSH
71669: LD_VAR 0 4
71673: ST_TO_ADDR
// un := CreateVehicle ;
71674: LD_ADDR_VAR 0 8
71678: PUSH
71679: CALL_OW 45
71683: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71684: LD_VAR 0 8
71688: PPUSH
71689: LD_INT 0
71691: PPUSH
71692: LD_INT 5
71694: PPUSH
71695: CALL_OW 12
71699: PPUSH
71700: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71704: LD_VAR 0 8
71708: PPUSH
71709: LD_VAR 0 5
71713: PPUSH
71714: LD_VAR 0 6
71718: PPUSH
71719: LD_INT 1
71721: PPUSH
71722: CALL_OW 48
// end ;
71726: LD_VAR 0 7
71730: RET
// export hInvincible ; every 1 do
71731: GO 71733
71733: DISABLE
// hInvincible := [ ] ;
71734: LD_ADDR_EXP 99
71738: PUSH
71739: EMPTY
71740: ST_TO_ADDR
71741: END
// every 10 do var i ;
71742: GO 71744
71744: DISABLE
71745: LD_INT 0
71747: PPUSH
// begin enable ;
71748: ENABLE
// if not hInvincible then
71749: LD_EXP 99
71753: NOT
71754: IFFALSE 71758
// exit ;
71756: GO 71802
// for i in hInvincible do
71758: LD_ADDR_VAR 0 1
71762: PUSH
71763: LD_EXP 99
71767: PUSH
71768: FOR_IN
71769: IFFALSE 71800
// if GetLives ( i ) < 1000 then
71771: LD_VAR 0 1
71775: PPUSH
71776: CALL_OW 256
71780: PUSH
71781: LD_INT 1000
71783: LESS
71784: IFFALSE 71798
// SetLives ( i , 1000 ) ;
71786: LD_VAR 0 1
71790: PPUSH
71791: LD_INT 1000
71793: PPUSH
71794: CALL_OW 234
71798: GO 71768
71800: POP
71801: POP
// end ;
71802: PPOPN 1
71804: END
// export function hHackInvincible ; var i ; begin
71805: LD_INT 0
71807: PPUSH
71808: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71809: LD_ADDR_VAR 0 2
71813: PUSH
71814: LD_INT 2
71816: PUSH
71817: LD_INT 21
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 21
71829: PUSH
71830: LD_INT 2
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: LIST
71841: PPUSH
71842: CALL_OW 69
71846: PUSH
71847: FOR_IN
71848: IFFALSE 71909
// if IsSelected ( i ) then
71850: LD_VAR 0 2
71854: PPUSH
71855: CALL_OW 306
71859: IFFALSE 71907
// begin if i in hInvincible then
71861: LD_VAR 0 2
71865: PUSH
71866: LD_EXP 99
71870: IN
71871: IFFALSE 71891
// hInvincible := hInvincible diff i else
71873: LD_ADDR_EXP 99
71877: PUSH
71878: LD_EXP 99
71882: PUSH
71883: LD_VAR 0 2
71887: DIFF
71888: ST_TO_ADDR
71889: GO 71907
// hInvincible := hInvincible union i ;
71891: LD_ADDR_EXP 99
71895: PUSH
71896: LD_EXP 99
71900: PUSH
71901: LD_VAR 0 2
71905: UNION
71906: ST_TO_ADDR
// end ;
71907: GO 71847
71909: POP
71910: POP
// end ;
71911: LD_VAR 0 1
71915: RET
// export function hHackInvisible ; var i , j ; begin
71916: LD_INT 0
71918: PPUSH
71919: PPUSH
71920: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71921: LD_ADDR_VAR 0 2
71925: PUSH
71926: LD_INT 21
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PPUSH
71936: CALL_OW 69
71940: PUSH
71941: FOR_IN
71942: IFFALSE 71966
// if IsSelected ( i ) then
71944: LD_VAR 0 2
71948: PPUSH
71949: CALL_OW 306
71953: IFFALSE 71964
// ComForceInvisible ( i ) ;
71955: LD_VAR 0 2
71959: PPUSH
71960: CALL_OW 496
71964: GO 71941
71966: POP
71967: POP
// end ;
71968: LD_VAR 0 1
71972: RET
// export function hHackChangeYourSide ; begin
71973: LD_INT 0
71975: PPUSH
// if your_side = 8 then
71976: LD_OWVAR 2
71980: PUSH
71981: LD_INT 8
71983: EQUAL
71984: IFFALSE 71996
// your_side := 0 else
71986: LD_ADDR_OWVAR 2
71990: PUSH
71991: LD_INT 0
71993: ST_TO_ADDR
71994: GO 72010
// your_side := your_side + 1 ;
71996: LD_ADDR_OWVAR 2
72000: PUSH
72001: LD_OWVAR 2
72005: PUSH
72006: LD_INT 1
72008: PLUS
72009: ST_TO_ADDR
// end ;
72010: LD_VAR 0 1
72014: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72015: LD_INT 0
72017: PPUSH
72018: PPUSH
72019: PPUSH
// for i in all_units do
72020: LD_ADDR_VAR 0 2
72024: PUSH
72025: LD_OWVAR 3
72029: PUSH
72030: FOR_IN
72031: IFFALSE 72109
// if IsSelected ( i ) then
72033: LD_VAR 0 2
72037: PPUSH
72038: CALL_OW 306
72042: IFFALSE 72107
// begin j := GetSide ( i ) ;
72044: LD_ADDR_VAR 0 3
72048: PUSH
72049: LD_VAR 0 2
72053: PPUSH
72054: CALL_OW 255
72058: ST_TO_ADDR
// if j = 8 then
72059: LD_VAR 0 3
72063: PUSH
72064: LD_INT 8
72066: EQUAL
72067: IFFALSE 72079
// j := 0 else
72069: LD_ADDR_VAR 0 3
72073: PUSH
72074: LD_INT 0
72076: ST_TO_ADDR
72077: GO 72093
// j := j + 1 ;
72079: LD_ADDR_VAR 0 3
72083: PUSH
72084: LD_VAR 0 3
72088: PUSH
72089: LD_INT 1
72091: PLUS
72092: ST_TO_ADDR
// SetSide ( i , j ) ;
72093: LD_VAR 0 2
72097: PPUSH
72098: LD_VAR 0 3
72102: PPUSH
72103: CALL_OW 235
// end ;
72107: GO 72030
72109: POP
72110: POP
// end ;
72111: LD_VAR 0 1
72115: RET
// export function hHackFog ; begin
72116: LD_INT 0
72118: PPUSH
// FogOff ( true ) ;
72119: LD_INT 1
72121: PPUSH
72122: CALL_OW 344
// end ;
72126: LD_VAR 0 1
72130: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72131: LD_INT 0
72133: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72134: LD_VAR 0 1
72138: PPUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: LD_VAR 0 3
72148: PPUSH
72149: LD_INT 1
72151: PPUSH
72152: LD_INT 1
72154: PPUSH
72155: CALL_OW 483
// CenterOnXY ( x , y ) ;
72159: LD_VAR 0 2
72163: PPUSH
72164: LD_VAR 0 3
72168: PPUSH
72169: CALL_OW 84
// end ;
72173: LD_VAR 0 4
72177: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72178: LD_INT 0
72180: PPUSH
72181: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72182: LD_VAR 0 1
72186: NOT
72187: PUSH
72188: LD_VAR 0 2
72192: PPUSH
72193: LD_VAR 0 3
72197: PPUSH
72198: CALL_OW 488
72202: NOT
72203: OR
72204: PUSH
72205: LD_VAR 0 1
72209: PPUSH
72210: CALL_OW 266
72214: PUSH
72215: LD_INT 3
72217: NONEQUAL
72218: PUSH
72219: LD_VAR 0 1
72223: PPUSH
72224: CALL_OW 247
72228: PUSH
72229: LD_INT 1
72231: EQUAL
72232: NOT
72233: AND
72234: OR
72235: IFFALSE 72239
// exit ;
72237: GO 72388
// if GetType ( factory ) = unit_human then
72239: LD_VAR 0 1
72243: PPUSH
72244: CALL_OW 247
72248: PUSH
72249: LD_INT 1
72251: EQUAL
72252: IFFALSE 72269
// factory := IsInUnit ( factory ) ;
72254: LD_ADDR_VAR 0 1
72258: PUSH
72259: LD_VAR 0 1
72263: PPUSH
72264: CALL_OW 310
72268: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72269: LD_VAR 0 1
72273: PPUSH
72274: CALL_OW 266
72278: PUSH
72279: LD_INT 3
72281: NONEQUAL
72282: IFFALSE 72286
// exit ;
72284: GO 72388
// if HexInfo ( x , y ) = factory then
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: CALL_OW 428
72300: PUSH
72301: LD_VAR 0 1
72305: EQUAL
72306: IFFALSE 72333
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72308: LD_ADDR_EXP 100
72312: PUSH
72313: LD_EXP 100
72317: PPUSH
72318: LD_VAR 0 1
72322: PPUSH
72323: LD_INT 0
72325: PPUSH
72326: CALL_OW 1
72330: ST_TO_ADDR
72331: GO 72384
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72333: LD_ADDR_EXP 100
72337: PUSH
72338: LD_EXP 100
72342: PPUSH
72343: LD_VAR 0 1
72347: PPUSH
72348: LD_VAR 0 1
72352: PPUSH
72353: CALL_OW 255
72357: PUSH
72358: LD_VAR 0 1
72362: PUSH
72363: LD_VAR 0 2
72367: PUSH
72368: LD_VAR 0 3
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: PPUSH
72379: CALL_OW 1
72383: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72384: CALL 72393 0 0
// end ;
72388: LD_VAR 0 4
72392: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72393: LD_INT 0
72395: PPUSH
72396: PPUSH
72397: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72398: LD_STRING resetFactoryWaypoint();
72400: PPUSH
72401: CALL_OW 559
// if factoryWaypoints then
72405: LD_EXP 100
72409: IFFALSE 72535
// begin list := PrepareArray ( factoryWaypoints ) ;
72411: LD_ADDR_VAR 0 3
72415: PUSH
72416: LD_EXP 100
72420: PPUSH
72421: CALL 56348 0 1
72425: ST_TO_ADDR
// for i := 1 to list do
72426: LD_ADDR_VAR 0 2
72430: PUSH
72431: DOUBLE
72432: LD_INT 1
72434: DEC
72435: ST_TO_ADDR
72436: LD_VAR 0 3
72440: PUSH
72441: FOR_TO
72442: IFFALSE 72533
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72444: LD_STRING setFactoryWaypointXY(
72446: PUSH
72447: LD_VAR 0 3
72451: PUSH
72452: LD_VAR 0 2
72456: ARRAY
72457: PUSH
72458: LD_INT 1
72460: ARRAY
72461: STR
72462: PUSH
72463: LD_STRING ,
72465: STR
72466: PUSH
72467: LD_VAR 0 3
72471: PUSH
72472: LD_VAR 0 2
72476: ARRAY
72477: PUSH
72478: LD_INT 2
72480: ARRAY
72481: STR
72482: PUSH
72483: LD_STRING ,
72485: STR
72486: PUSH
72487: LD_VAR 0 3
72491: PUSH
72492: LD_VAR 0 2
72496: ARRAY
72497: PUSH
72498: LD_INT 3
72500: ARRAY
72501: STR
72502: PUSH
72503: LD_STRING ,
72505: STR
72506: PUSH
72507: LD_VAR 0 3
72511: PUSH
72512: LD_VAR 0 2
72516: ARRAY
72517: PUSH
72518: LD_INT 4
72520: ARRAY
72521: STR
72522: PUSH
72523: LD_STRING )
72525: STR
72526: PPUSH
72527: CALL_OW 559
72531: GO 72441
72533: POP
72534: POP
// end ; end ;
72535: LD_VAR 0 1
72539: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72540: LD_INT 0
72542: PPUSH
// if HexInfo ( x , y ) = warehouse then
72543: LD_VAR 0 2
72547: PPUSH
72548: LD_VAR 0 3
72552: PPUSH
72553: CALL_OW 428
72557: PUSH
72558: LD_VAR 0 1
72562: EQUAL
72563: IFFALSE 72590
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72565: LD_ADDR_EXP 101
72569: PUSH
72570: LD_EXP 101
72574: PPUSH
72575: LD_VAR 0 1
72579: PPUSH
72580: LD_INT 0
72582: PPUSH
72583: CALL_OW 1
72587: ST_TO_ADDR
72588: GO 72641
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72590: LD_ADDR_EXP 101
72594: PUSH
72595: LD_EXP 101
72599: PPUSH
72600: LD_VAR 0 1
72604: PPUSH
72605: LD_VAR 0 1
72609: PPUSH
72610: CALL_OW 255
72614: PUSH
72615: LD_VAR 0 1
72619: PUSH
72620: LD_VAR 0 2
72624: PUSH
72625: LD_VAR 0 3
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: PPUSH
72636: CALL_OW 1
72640: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72641: CALL 72650 0 0
// end ;
72645: LD_VAR 0 4
72649: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72650: LD_INT 0
72652: PPUSH
72653: PPUSH
72654: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72655: LD_STRING resetWarehouseGatheringPoints();
72657: PPUSH
72658: CALL_OW 559
// if warehouseGatheringPoints then
72662: LD_EXP 101
72666: IFFALSE 72792
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72668: LD_ADDR_VAR 0 3
72672: PUSH
72673: LD_EXP 101
72677: PPUSH
72678: CALL 56348 0 1
72682: ST_TO_ADDR
// for i := 1 to list do
72683: LD_ADDR_VAR 0 2
72687: PUSH
72688: DOUBLE
72689: LD_INT 1
72691: DEC
72692: ST_TO_ADDR
72693: LD_VAR 0 3
72697: PUSH
72698: FOR_TO
72699: IFFALSE 72790
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72701: LD_STRING setWarehouseGatheringPointXY(
72703: PUSH
72704: LD_VAR 0 3
72708: PUSH
72709: LD_VAR 0 2
72713: ARRAY
72714: PUSH
72715: LD_INT 1
72717: ARRAY
72718: STR
72719: PUSH
72720: LD_STRING ,
72722: STR
72723: PUSH
72724: LD_VAR 0 3
72728: PUSH
72729: LD_VAR 0 2
72733: ARRAY
72734: PUSH
72735: LD_INT 2
72737: ARRAY
72738: STR
72739: PUSH
72740: LD_STRING ,
72742: STR
72743: PUSH
72744: LD_VAR 0 3
72748: PUSH
72749: LD_VAR 0 2
72753: ARRAY
72754: PUSH
72755: LD_INT 3
72757: ARRAY
72758: STR
72759: PUSH
72760: LD_STRING ,
72762: STR
72763: PUSH
72764: LD_VAR 0 3
72768: PUSH
72769: LD_VAR 0 2
72773: ARRAY
72774: PUSH
72775: LD_INT 4
72777: ARRAY
72778: STR
72779: PUSH
72780: LD_STRING )
72782: STR
72783: PPUSH
72784: CALL_OW 559
72788: GO 72698
72790: POP
72791: POP
// end ; end ;
72792: LD_VAR 0 1
72796: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72797: LD_EXP 101
72801: IFFALSE 73486
72803: GO 72805
72805: DISABLE
72806: LD_INT 0
72808: PPUSH
72809: PPUSH
72810: PPUSH
72811: PPUSH
72812: PPUSH
72813: PPUSH
72814: PPUSH
72815: PPUSH
72816: PPUSH
// begin enable ;
72817: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72818: LD_ADDR_VAR 0 3
72822: PUSH
72823: LD_EXP 101
72827: PPUSH
72828: CALL 56348 0 1
72832: ST_TO_ADDR
// if not list then
72833: LD_VAR 0 3
72837: NOT
72838: IFFALSE 72842
// exit ;
72840: GO 73486
// for i := 1 to list do
72842: LD_ADDR_VAR 0 1
72846: PUSH
72847: DOUBLE
72848: LD_INT 1
72850: DEC
72851: ST_TO_ADDR
72852: LD_VAR 0 3
72856: PUSH
72857: FOR_TO
72858: IFFALSE 73484
// begin depot := list [ i ] [ 2 ] ;
72860: LD_ADDR_VAR 0 8
72864: PUSH
72865: LD_VAR 0 3
72869: PUSH
72870: LD_VAR 0 1
72874: ARRAY
72875: PUSH
72876: LD_INT 2
72878: ARRAY
72879: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
72880: LD_ADDR_VAR 0 5
72884: PUSH
72885: LD_VAR 0 3
72889: PUSH
72890: LD_VAR 0 1
72894: ARRAY
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
72900: LD_VAR 0 8
72904: PPUSH
72905: CALL_OW 301
72909: PUSH
72910: LD_VAR 0 5
72914: PUSH
72915: LD_VAR 0 8
72919: PPUSH
72920: CALL_OW 255
72924: NONEQUAL
72925: OR
72926: IFFALSE 72955
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
72928: LD_ADDR_EXP 101
72932: PUSH
72933: LD_EXP 101
72937: PPUSH
72938: LD_VAR 0 8
72942: PPUSH
72943: LD_INT 0
72945: PPUSH
72946: CALL_OW 1
72950: ST_TO_ADDR
// exit ;
72951: POP
72952: POP
72953: GO 73486
// end ; x := list [ i ] [ 3 ] ;
72955: LD_ADDR_VAR 0 6
72959: PUSH
72960: LD_VAR 0 3
72964: PUSH
72965: LD_VAR 0 1
72969: ARRAY
72970: PUSH
72971: LD_INT 3
72973: ARRAY
72974: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
72975: LD_ADDR_VAR 0 7
72979: PUSH
72980: LD_VAR 0 3
72984: PUSH
72985: LD_VAR 0 1
72989: ARRAY
72990: PUSH
72991: LD_INT 4
72993: ARRAY
72994: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
72995: LD_ADDR_VAR 0 9
72999: PUSH
73000: LD_VAR 0 6
73004: PPUSH
73005: LD_VAR 0 7
73009: PPUSH
73010: LD_INT 16
73012: PPUSH
73013: CALL 54932 0 3
73017: ST_TO_ADDR
// if not cratesNearbyPoint then
73018: LD_VAR 0 9
73022: NOT
73023: IFFALSE 73029
// exit ;
73025: POP
73026: POP
73027: GO 73486
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73029: LD_ADDR_VAR 0 4
73033: PUSH
73034: LD_INT 22
73036: PUSH
73037: LD_VAR 0 5
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 3
73048: PUSH
73049: LD_INT 60
73051: PUSH
73052: EMPTY
73053: LIST
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 91
73061: PUSH
73062: LD_VAR 0 8
73066: PUSH
73067: LD_INT 6
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 2
73077: PUSH
73078: LD_INT 25
73080: PUSH
73081: LD_INT 2
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 25
73090: PUSH
73091: LD_INT 16
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: LIST
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: PPUSH
73109: CALL_OW 69
73113: PUSH
73114: LD_VAR 0 8
73118: PPUSH
73119: CALL_OW 313
73123: PPUSH
73124: LD_INT 3
73126: PUSH
73127: LD_INT 60
73129: PUSH
73130: EMPTY
73131: LIST
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 2
73139: PUSH
73140: LD_INT 25
73142: PUSH
73143: LD_INT 2
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 25
73152: PUSH
73153: LD_INT 16
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: LIST
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PPUSH
73169: CALL_OW 72
73173: UNION
73174: ST_TO_ADDR
// if tmp then
73175: LD_VAR 0 4
73179: IFFALSE 73259
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73181: LD_ADDR_VAR 0 4
73185: PUSH
73186: LD_VAR 0 4
73190: PPUSH
73191: LD_INT 3
73193: PPUSH
73194: CALL 52901 0 2
73198: ST_TO_ADDR
// for j in tmp do
73199: LD_ADDR_VAR 0 2
73203: PUSH
73204: LD_VAR 0 4
73208: PUSH
73209: FOR_IN
73210: IFFALSE 73253
// begin if IsInUnit ( j ) then
73212: LD_VAR 0 2
73216: PPUSH
73217: CALL_OW 310
73221: IFFALSE 73232
// ComExit ( j ) ;
73223: LD_VAR 0 2
73227: PPUSH
73228: CALL 52984 0 1
// AddComCollect ( j , x , y ) ;
73232: LD_VAR 0 2
73236: PPUSH
73237: LD_VAR 0 6
73241: PPUSH
73242: LD_VAR 0 7
73246: PPUSH
73247: CALL_OW 177
// end ;
73251: GO 73209
73253: POP
73254: POP
// exit ;
73255: POP
73256: POP
73257: GO 73486
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73259: LD_ADDR_VAR 0 4
73263: PUSH
73264: LD_INT 22
73266: PUSH
73267: LD_VAR 0 5
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 91
73278: PUSH
73279: LD_VAR 0 8
73283: PUSH
73284: LD_INT 8
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 2
73294: PUSH
73295: LD_INT 34
73297: PUSH
73298: LD_INT 12
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 34
73307: PUSH
73308: LD_INT 51
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 34
73317: PUSH
73318: LD_INT 32
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 34
73327: PUSH
73328: LD_INT 89
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: LIST
73346: PPUSH
73347: CALL_OW 69
73351: ST_TO_ADDR
// if tmp then
73352: LD_VAR 0 4
73356: IFFALSE 73482
// begin for j in tmp do
73358: LD_ADDR_VAR 0 2
73362: PUSH
73363: LD_VAR 0 4
73367: PUSH
73368: FOR_IN
73369: IFFALSE 73480
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73371: LD_VAR 0 2
73375: PPUSH
73376: CALL_OW 262
73380: PUSH
73381: LD_INT 3
73383: EQUAL
73384: PUSH
73385: LD_VAR 0 2
73389: PPUSH
73390: CALL_OW 261
73394: PUSH
73395: LD_INT 20
73397: GREATER
73398: OR
73399: PUSH
73400: LD_VAR 0 2
73404: PPUSH
73405: CALL_OW 314
73409: NOT
73410: AND
73411: PUSH
73412: LD_VAR 0 2
73416: PPUSH
73417: CALL_OW 263
73421: PUSH
73422: LD_INT 1
73424: NONEQUAL
73425: PUSH
73426: LD_VAR 0 2
73430: PPUSH
73431: CALL_OW 311
73435: OR
73436: AND
73437: IFFALSE 73478
// begin ComCollect ( j , x , y ) ;
73439: LD_VAR 0 2
73443: PPUSH
73444: LD_VAR 0 6
73448: PPUSH
73449: LD_VAR 0 7
73453: PPUSH
73454: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73458: LD_VAR 0 2
73462: PPUSH
73463: LD_VAR 0 8
73467: PPUSH
73468: CALL_OW 172
// exit ;
73472: POP
73473: POP
73474: POP
73475: POP
73476: GO 73486
// end ;
73478: GO 73368
73480: POP
73481: POP
// end ; end ;
73482: GO 72857
73484: POP
73485: POP
// end ; end_of_file
73486: PPOPN 9
73488: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73489: LD_INT 0
73491: PPUSH
73492: PPUSH
73493: PPUSH
73494: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73495: LD_VAR 0 1
73499: PPUSH
73500: CALL_OW 264
73504: PUSH
73505: LD_INT 91
73507: EQUAL
73508: IFFALSE 73580
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73510: LD_INT 68
73512: PPUSH
73513: LD_VAR 0 1
73517: PPUSH
73518: CALL_OW 255
73522: PPUSH
73523: CALL_OW 321
73527: PUSH
73528: LD_INT 2
73530: EQUAL
73531: IFFALSE 73543
// eff := 70 else
73533: LD_ADDR_VAR 0 4
73537: PUSH
73538: LD_INT 70
73540: ST_TO_ADDR
73541: GO 73551
// eff := 30 ;
73543: LD_ADDR_VAR 0 4
73547: PUSH
73548: LD_INT 30
73550: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73551: LD_VAR 0 1
73555: PPUSH
73556: CALL_OW 250
73560: PPUSH
73561: LD_VAR 0 1
73565: PPUSH
73566: CALL_OW 251
73570: PPUSH
73571: LD_VAR 0 4
73575: PPUSH
73576: CALL_OW 495
// end ; end ;
73580: LD_VAR 0 2
73584: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73585: LD_INT 0
73587: PPUSH
// end ;
73588: LD_VAR 0 4
73592: RET
// export function SOS_Command ( cmd ) ; begin
73593: LD_INT 0
73595: PPUSH
// end ;
73596: LD_VAR 0 2
73600: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73601: LD_INT 0
73603: PPUSH
// end ;
73604: LD_VAR 0 6
73608: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73609: LD_INT 0
73611: PPUSH
73612: PPUSH
// if not vehicle or not factory then
73613: LD_VAR 0 1
73617: NOT
73618: PUSH
73619: LD_VAR 0 2
73623: NOT
73624: OR
73625: IFFALSE 73629
// exit ;
73627: GO 73860
// if factoryWaypoints >= factory then
73629: LD_EXP 100
73633: PUSH
73634: LD_VAR 0 2
73638: GREATEREQUAL
73639: IFFALSE 73860
// if factoryWaypoints [ factory ] then
73641: LD_EXP 100
73645: PUSH
73646: LD_VAR 0 2
73650: ARRAY
73651: IFFALSE 73860
// begin if GetControl ( vehicle ) = control_manual then
73653: LD_VAR 0 1
73657: PPUSH
73658: CALL_OW 263
73662: PUSH
73663: LD_INT 1
73665: EQUAL
73666: IFFALSE 73747
// begin driver := IsDrivenBy ( vehicle ) ;
73668: LD_ADDR_VAR 0 4
73672: PUSH
73673: LD_VAR 0 1
73677: PPUSH
73678: CALL_OW 311
73682: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73683: LD_VAR 0 4
73687: PPUSH
73688: LD_EXP 100
73692: PUSH
73693: LD_VAR 0 2
73697: ARRAY
73698: PUSH
73699: LD_INT 3
73701: ARRAY
73702: PPUSH
73703: LD_EXP 100
73707: PUSH
73708: LD_VAR 0 2
73712: ARRAY
73713: PUSH
73714: LD_INT 4
73716: ARRAY
73717: PPUSH
73718: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73722: LD_VAR 0 4
73726: PPUSH
73727: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73731: LD_VAR 0 4
73735: PPUSH
73736: LD_VAR 0 2
73740: PPUSH
73741: CALL_OW 180
// end else
73745: GO 73860
// if GetControl ( vehicle ) = control_remote then
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 263
73756: PUSH
73757: LD_INT 2
73759: EQUAL
73760: IFFALSE 73821
// begin wait ( 0 0$2 ) ;
73762: LD_INT 70
73764: PPUSH
73765: CALL_OW 67
// if Connect ( vehicle ) then
73769: LD_VAR 0 1
73773: PPUSH
73774: CALL 23203 0 1
73778: IFFALSE 73819
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73780: LD_VAR 0 1
73784: PPUSH
73785: LD_EXP 100
73789: PUSH
73790: LD_VAR 0 2
73794: ARRAY
73795: PUSH
73796: LD_INT 3
73798: ARRAY
73799: PPUSH
73800: LD_EXP 100
73804: PUSH
73805: LD_VAR 0 2
73809: ARRAY
73810: PUSH
73811: LD_INT 4
73813: ARRAY
73814: PPUSH
73815: CALL_OW 171
// end else
73819: GO 73860
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73821: LD_VAR 0 1
73825: PPUSH
73826: LD_EXP 100
73830: PUSH
73831: LD_VAR 0 2
73835: ARRAY
73836: PUSH
73837: LD_INT 3
73839: ARRAY
73840: PPUSH
73841: LD_EXP 100
73845: PUSH
73846: LD_VAR 0 2
73850: ARRAY
73851: PUSH
73852: LD_INT 4
73854: ARRAY
73855: PPUSH
73856: CALL_OW 171
// end ; end ;
73860: LD_VAR 0 3
73864: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73865: LD_INT 0
73867: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73868: LD_VAR 0 1
73872: PUSH
73873: LD_INT 250
73875: EQUAL
73876: PUSH
73877: LD_VAR 0 2
73881: PPUSH
73882: CALL_OW 264
73886: PUSH
73887: LD_INT 81
73889: EQUAL
73890: AND
73891: IFFALSE 73912
// MinerPlaceMine ( unit , x , y ) ;
73893: LD_VAR 0 2
73897: PPUSH
73898: LD_VAR 0 4
73902: PPUSH
73903: LD_VAR 0 5
73907: PPUSH
73908: CALL 76902 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
73912: LD_VAR 0 1
73916: PUSH
73917: LD_INT 251
73919: EQUAL
73920: PUSH
73921: LD_VAR 0 2
73925: PPUSH
73926: CALL_OW 264
73930: PUSH
73931: LD_INT 81
73933: EQUAL
73934: AND
73935: IFFALSE 73956
// MinerDetonateMine ( unit , x , y ) ;
73937: LD_VAR 0 2
73941: PPUSH
73942: LD_VAR 0 4
73946: PPUSH
73947: LD_VAR 0 5
73951: PPUSH
73952: CALL 77177 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
73956: LD_VAR 0 1
73960: PUSH
73961: LD_INT 252
73963: EQUAL
73964: PUSH
73965: LD_VAR 0 2
73969: PPUSH
73970: CALL_OW 264
73974: PUSH
73975: LD_INT 81
73977: EQUAL
73978: AND
73979: IFFALSE 74000
// MinerCreateMinefield ( unit , x , y ) ;
73981: LD_VAR 0 2
73985: PPUSH
73986: LD_VAR 0 4
73990: PPUSH
73991: LD_VAR 0 5
73995: PPUSH
73996: CALL 77594 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74000: LD_VAR 0 1
74004: PUSH
74005: LD_INT 253
74007: EQUAL
74008: PUSH
74009: LD_VAR 0 2
74013: PPUSH
74014: CALL_OW 257
74018: PUSH
74019: LD_INT 5
74021: EQUAL
74022: AND
74023: IFFALSE 74044
// ComBinocular ( unit , x , y ) ;
74025: LD_VAR 0 2
74029: PPUSH
74030: LD_VAR 0 4
74034: PPUSH
74035: LD_VAR 0 5
74039: PPUSH
74040: CALL 77963 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74044: LD_VAR 0 1
74048: PUSH
74049: LD_INT 254
74051: EQUAL
74052: PUSH
74053: LD_VAR 0 2
74057: PPUSH
74058: CALL_OW 264
74062: PUSH
74063: LD_INT 99
74065: EQUAL
74066: AND
74067: PUSH
74068: LD_VAR 0 3
74072: PPUSH
74073: CALL_OW 263
74077: PUSH
74078: LD_INT 3
74080: EQUAL
74081: AND
74082: IFFALSE 74098
// HackDestroyVehicle ( unit , selectedUnit ) ;
74084: LD_VAR 0 2
74088: PPUSH
74089: LD_VAR 0 3
74093: PPUSH
74094: CALL 76266 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74098: LD_VAR 0 1
74102: PUSH
74103: LD_INT 255
74105: EQUAL
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: CALL_OW 264
74116: PUSH
74117: LD_INT 14
74119: PUSH
74120: LD_INT 53
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: IN
74127: AND
74128: PUSH
74129: LD_VAR 0 4
74133: PPUSH
74134: LD_VAR 0 5
74138: PPUSH
74139: CALL_OW 488
74143: AND
74144: IFFALSE 74168
// CutTreeXYR ( unit , x , y , 12 ) ;
74146: LD_VAR 0 2
74150: PPUSH
74151: LD_VAR 0 4
74155: PPUSH
74156: LD_VAR 0 5
74160: PPUSH
74161: LD_INT 12
74163: PPUSH
74164: CALL 74263 0 4
// if cmd = 256 then
74168: LD_VAR 0 1
74172: PUSH
74173: LD_INT 256
74175: EQUAL
74176: IFFALSE 74197
// SetFactoryWaypoint ( unit , x , y ) ;
74178: LD_VAR 0 2
74182: PPUSH
74183: LD_VAR 0 4
74187: PPUSH
74188: LD_VAR 0 5
74192: PPUSH
74193: CALL 72178 0 3
// if cmd = 257 then
74197: LD_VAR 0 1
74201: PUSH
74202: LD_INT 257
74204: EQUAL
74205: IFFALSE 74226
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74207: LD_VAR 0 2
74211: PPUSH
74212: LD_VAR 0 4
74216: PPUSH
74217: LD_VAR 0 5
74221: PPUSH
74222: CALL 72540 0 3
// if cmd = 258 then
74226: LD_VAR 0 1
74230: PUSH
74231: LD_INT 258
74233: EQUAL
74234: IFFALSE 74258
// BurnTreeXYR ( unit , x , y , 8 ) ;
74236: LD_VAR 0 2
74240: PPUSH
74241: LD_VAR 0 4
74245: PPUSH
74246: LD_VAR 0 5
74250: PPUSH
74251: LD_INT 8
74253: PPUSH
74254: CALL 74657 0 4
// end ;
74258: LD_VAR 0 6
74262: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74263: LD_INT 0
74265: PPUSH
74266: PPUSH
74267: PPUSH
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74274: LD_VAR 0 1
74278: PPUSH
74279: CALL_OW 302
74283: NOT
74284: PUSH
74285: LD_VAR 0 2
74289: PPUSH
74290: LD_VAR 0 3
74294: PPUSH
74295: CALL_OW 488
74299: NOT
74300: OR
74301: PUSH
74302: LD_VAR 0 4
74306: NOT
74307: OR
74308: IFFALSE 74312
// exit ;
74310: GO 74652
// list := [ ] ;
74312: LD_ADDR_VAR 0 13
74316: PUSH
74317: EMPTY
74318: ST_TO_ADDR
// if x - r < 0 then
74319: LD_VAR 0 2
74323: PUSH
74324: LD_VAR 0 4
74328: MINUS
74329: PUSH
74330: LD_INT 0
74332: LESS
74333: IFFALSE 74345
// min_x := 0 else
74335: LD_ADDR_VAR 0 7
74339: PUSH
74340: LD_INT 0
74342: ST_TO_ADDR
74343: GO 74361
// min_x := x - r ;
74345: LD_ADDR_VAR 0 7
74349: PUSH
74350: LD_VAR 0 2
74354: PUSH
74355: LD_VAR 0 4
74359: MINUS
74360: ST_TO_ADDR
// if y - r < 0 then
74361: LD_VAR 0 3
74365: PUSH
74366: LD_VAR 0 4
74370: MINUS
74371: PUSH
74372: LD_INT 0
74374: LESS
74375: IFFALSE 74387
// min_y := 0 else
74377: LD_ADDR_VAR 0 8
74381: PUSH
74382: LD_INT 0
74384: ST_TO_ADDR
74385: GO 74403
// min_y := y - r ;
74387: LD_ADDR_VAR 0 8
74391: PUSH
74392: LD_VAR 0 3
74396: PUSH
74397: LD_VAR 0 4
74401: MINUS
74402: ST_TO_ADDR
// max_x := x + r ;
74403: LD_ADDR_VAR 0 9
74407: PUSH
74408: LD_VAR 0 2
74412: PUSH
74413: LD_VAR 0 4
74417: PLUS
74418: ST_TO_ADDR
// max_y := y + r ;
74419: LD_ADDR_VAR 0 10
74423: PUSH
74424: LD_VAR 0 3
74428: PUSH
74429: LD_VAR 0 4
74433: PLUS
74434: ST_TO_ADDR
// for _x = min_x to max_x do
74435: LD_ADDR_VAR 0 11
74439: PUSH
74440: DOUBLE
74441: LD_VAR 0 7
74445: DEC
74446: ST_TO_ADDR
74447: LD_VAR 0 9
74451: PUSH
74452: FOR_TO
74453: IFFALSE 74570
// for _y = min_y to max_y do
74455: LD_ADDR_VAR 0 12
74459: PUSH
74460: DOUBLE
74461: LD_VAR 0 8
74465: DEC
74466: ST_TO_ADDR
74467: LD_VAR 0 10
74471: PUSH
74472: FOR_TO
74473: IFFALSE 74566
// begin if not ValidHex ( _x , _y ) then
74475: LD_VAR 0 11
74479: PPUSH
74480: LD_VAR 0 12
74484: PPUSH
74485: CALL_OW 488
74489: NOT
74490: IFFALSE 74494
// continue ;
74492: GO 74472
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74494: LD_VAR 0 11
74498: PPUSH
74499: LD_VAR 0 12
74503: PPUSH
74504: CALL_OW 351
74508: PUSH
74509: LD_VAR 0 11
74513: PPUSH
74514: LD_VAR 0 12
74518: PPUSH
74519: CALL_OW 554
74523: AND
74524: IFFALSE 74564
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74526: LD_ADDR_VAR 0 13
74530: PUSH
74531: LD_VAR 0 13
74535: PPUSH
74536: LD_VAR 0 13
74540: PUSH
74541: LD_INT 1
74543: PLUS
74544: PPUSH
74545: LD_VAR 0 11
74549: PUSH
74550: LD_VAR 0 12
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PPUSH
74559: CALL_OW 2
74563: ST_TO_ADDR
// end ;
74564: GO 74472
74566: POP
74567: POP
74568: GO 74452
74570: POP
74571: POP
// if not list then
74572: LD_VAR 0 13
74576: NOT
74577: IFFALSE 74581
// exit ;
74579: GO 74652
// for i in list do
74581: LD_ADDR_VAR 0 6
74585: PUSH
74586: LD_VAR 0 13
74590: PUSH
74591: FOR_IN
74592: IFFALSE 74650
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74594: LD_VAR 0 1
74598: PPUSH
74599: LD_STRING M
74601: PUSH
74602: LD_VAR 0 6
74606: PUSH
74607: LD_INT 1
74609: ARRAY
74610: PUSH
74611: LD_VAR 0 6
74615: PUSH
74616: LD_INT 2
74618: ARRAY
74619: PUSH
74620: LD_INT 0
74622: PUSH
74623: LD_INT 0
74625: PUSH
74626: LD_INT 0
74628: PUSH
74629: LD_INT 0
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: LIST
74638: LIST
74639: LIST
74640: PUSH
74641: EMPTY
74642: LIST
74643: PPUSH
74644: CALL_OW 447
74648: GO 74591
74650: POP
74651: POP
// end ;
74652: LD_VAR 0 5
74656: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74657: LD_INT 0
74659: PPUSH
74660: PPUSH
74661: PPUSH
74662: PPUSH
74663: PPUSH
74664: PPUSH
74665: PPUSH
74666: PPUSH
74667: PPUSH
74668: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74669: LD_VAR 0 1
74673: PPUSH
74674: CALL_OW 302
74678: NOT
74679: PUSH
74680: LD_VAR 0 2
74684: PPUSH
74685: LD_VAR 0 3
74689: PPUSH
74690: CALL_OW 488
74694: NOT
74695: OR
74696: PUSH
74697: LD_VAR 0 4
74701: NOT
74702: OR
74703: IFFALSE 74707
// exit ;
74705: GO 75220
// list := [ ] ;
74707: LD_ADDR_VAR 0 13
74711: PUSH
74712: EMPTY
74713: ST_TO_ADDR
// if x - r < 0 then
74714: LD_VAR 0 2
74718: PUSH
74719: LD_VAR 0 4
74723: MINUS
74724: PUSH
74725: LD_INT 0
74727: LESS
74728: IFFALSE 74740
// min_x := 0 else
74730: LD_ADDR_VAR 0 7
74734: PUSH
74735: LD_INT 0
74737: ST_TO_ADDR
74738: GO 74756
// min_x := x - r ;
74740: LD_ADDR_VAR 0 7
74744: PUSH
74745: LD_VAR 0 2
74749: PUSH
74750: LD_VAR 0 4
74754: MINUS
74755: ST_TO_ADDR
// if y - r < 0 then
74756: LD_VAR 0 3
74760: PUSH
74761: LD_VAR 0 4
74765: MINUS
74766: PUSH
74767: LD_INT 0
74769: LESS
74770: IFFALSE 74782
// min_y := 0 else
74772: LD_ADDR_VAR 0 8
74776: PUSH
74777: LD_INT 0
74779: ST_TO_ADDR
74780: GO 74798
// min_y := y - r ;
74782: LD_ADDR_VAR 0 8
74786: PUSH
74787: LD_VAR 0 3
74791: PUSH
74792: LD_VAR 0 4
74796: MINUS
74797: ST_TO_ADDR
// max_x := x + r ;
74798: LD_ADDR_VAR 0 9
74802: PUSH
74803: LD_VAR 0 2
74807: PUSH
74808: LD_VAR 0 4
74812: PLUS
74813: ST_TO_ADDR
// max_y := y + r ;
74814: LD_ADDR_VAR 0 10
74818: PUSH
74819: LD_VAR 0 3
74823: PUSH
74824: LD_VAR 0 4
74828: PLUS
74829: ST_TO_ADDR
// for _x = min_x to max_x do
74830: LD_ADDR_VAR 0 11
74834: PUSH
74835: DOUBLE
74836: LD_VAR 0 7
74840: DEC
74841: ST_TO_ADDR
74842: LD_VAR 0 9
74846: PUSH
74847: FOR_TO
74848: IFFALSE 74965
// for _y = min_y to max_y do
74850: LD_ADDR_VAR 0 12
74854: PUSH
74855: DOUBLE
74856: LD_VAR 0 8
74860: DEC
74861: ST_TO_ADDR
74862: LD_VAR 0 10
74866: PUSH
74867: FOR_TO
74868: IFFALSE 74961
// begin if not ValidHex ( _x , _y ) then
74870: LD_VAR 0 11
74874: PPUSH
74875: LD_VAR 0 12
74879: PPUSH
74880: CALL_OW 488
74884: NOT
74885: IFFALSE 74889
// continue ;
74887: GO 74867
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74889: LD_VAR 0 11
74893: PPUSH
74894: LD_VAR 0 12
74898: PPUSH
74899: CALL_OW 351
74903: PUSH
74904: LD_VAR 0 11
74908: PPUSH
74909: LD_VAR 0 12
74913: PPUSH
74914: CALL_OW 554
74918: AND
74919: IFFALSE 74959
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74921: LD_ADDR_VAR 0 13
74925: PUSH
74926: LD_VAR 0 13
74930: PPUSH
74931: LD_VAR 0 13
74935: PUSH
74936: LD_INT 1
74938: PLUS
74939: PPUSH
74940: LD_VAR 0 11
74944: PUSH
74945: LD_VAR 0 12
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PPUSH
74954: CALL_OW 2
74958: ST_TO_ADDR
// end ;
74959: GO 74867
74961: POP
74962: POP
74963: GO 74847
74965: POP
74966: POP
// if not list then
74967: LD_VAR 0 13
74971: NOT
74972: IFFALSE 74976
// exit ;
74974: GO 75220
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
74976: LD_ADDR_VAR 0 13
74980: PUSH
74981: LD_VAR 0 1
74985: PPUSH
74986: LD_VAR 0 13
74990: PPUSH
74991: LD_INT 1
74993: PPUSH
74994: LD_INT 1
74996: PPUSH
74997: CALL 20345 0 4
75001: ST_TO_ADDR
// ComStop ( flame ) ;
75002: LD_VAR 0 1
75006: PPUSH
75007: CALL_OW 141
// for i in list do
75011: LD_ADDR_VAR 0 6
75015: PUSH
75016: LD_VAR 0 13
75020: PUSH
75021: FOR_IN
75022: IFFALSE 75053
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75024: LD_VAR 0 1
75028: PPUSH
75029: LD_VAR 0 6
75033: PUSH
75034: LD_INT 1
75036: ARRAY
75037: PPUSH
75038: LD_VAR 0 6
75042: PUSH
75043: LD_INT 2
75045: ARRAY
75046: PPUSH
75047: CALL_OW 176
75051: GO 75021
75053: POP
75054: POP
// repeat wait ( 0 0$1 ) ;
75055: LD_INT 35
75057: PPUSH
75058: CALL_OW 67
// task := GetTaskList ( flame ) ;
75062: LD_ADDR_VAR 0 14
75066: PUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: CALL_OW 437
75076: ST_TO_ADDR
// if not task then
75077: LD_VAR 0 14
75081: NOT
75082: IFFALSE 75086
// exit ;
75084: GO 75220
// if task [ 1 ] [ 1 ] <> | then
75086: LD_VAR 0 14
75090: PUSH
75091: LD_INT 1
75093: ARRAY
75094: PUSH
75095: LD_INT 1
75097: ARRAY
75098: PUSH
75099: LD_STRING |
75101: NONEQUAL
75102: IFFALSE 75106
// exit ;
75104: GO 75220
// _x := task [ 1 ] [ 2 ] ;
75106: LD_ADDR_VAR 0 11
75110: PUSH
75111: LD_VAR 0 14
75115: PUSH
75116: LD_INT 1
75118: ARRAY
75119: PUSH
75120: LD_INT 2
75122: ARRAY
75123: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75124: LD_ADDR_VAR 0 12
75128: PUSH
75129: LD_VAR 0 14
75133: PUSH
75134: LD_INT 1
75136: ARRAY
75137: PUSH
75138: LD_INT 3
75140: ARRAY
75141: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75142: LD_VAR 0 11
75146: PPUSH
75147: LD_VAR 0 12
75151: PPUSH
75152: CALL_OW 351
75156: NOT
75157: PUSH
75158: LD_VAR 0 11
75162: PPUSH
75163: LD_VAR 0 12
75167: PPUSH
75168: CALL_OW 554
75172: NOT
75173: OR
75174: IFFALSE 75208
// begin task := Delete ( task , 1 ) ;
75176: LD_ADDR_VAR 0 14
75180: PUSH
75181: LD_VAR 0 14
75185: PPUSH
75186: LD_INT 1
75188: PPUSH
75189: CALL_OW 3
75193: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75194: LD_VAR 0 1
75198: PPUSH
75199: LD_VAR 0 14
75203: PPUSH
75204: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75208: LD_VAR 0 1
75212: PPUSH
75213: CALL_OW 314
75217: NOT
75218: IFFALSE 75055
// end ;
75220: LD_VAR 0 5
75224: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75225: LD_EXP 103
75229: NOT
75230: IFFALSE 75280
75232: GO 75234
75234: DISABLE
// begin initHack := true ;
75235: LD_ADDR_EXP 103
75239: PUSH
75240: LD_INT 1
75242: ST_TO_ADDR
// hackTanks := [ ] ;
75243: LD_ADDR_EXP 104
75247: PUSH
75248: EMPTY
75249: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75250: LD_ADDR_EXP 105
75254: PUSH
75255: EMPTY
75256: ST_TO_ADDR
// hackLimit := 3 ;
75257: LD_ADDR_EXP 106
75261: PUSH
75262: LD_INT 3
75264: ST_TO_ADDR
// hackDist := 12 ;
75265: LD_ADDR_EXP 107
75269: PUSH
75270: LD_INT 12
75272: ST_TO_ADDR
// hackCounter := [ ] ;
75273: LD_ADDR_EXP 108
75277: PUSH
75278: EMPTY
75279: ST_TO_ADDR
// end ;
75280: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75281: LD_EXP 103
75285: PUSH
75286: LD_INT 34
75288: PUSH
75289: LD_INT 99
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PPUSH
75296: CALL_OW 69
75300: AND
75301: IFFALSE 75554
75303: GO 75305
75305: DISABLE
75306: LD_INT 0
75308: PPUSH
75309: PPUSH
// begin enable ;
75310: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75311: LD_ADDR_VAR 0 1
75315: PUSH
75316: LD_INT 34
75318: PUSH
75319: LD_INT 99
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PPUSH
75326: CALL_OW 69
75330: PUSH
75331: FOR_IN
75332: IFFALSE 75552
// begin if not i in hackTanks then
75334: LD_VAR 0 1
75338: PUSH
75339: LD_EXP 104
75343: IN
75344: NOT
75345: IFFALSE 75428
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75347: LD_ADDR_EXP 104
75351: PUSH
75352: LD_EXP 104
75356: PPUSH
75357: LD_EXP 104
75361: PUSH
75362: LD_INT 1
75364: PLUS
75365: PPUSH
75366: LD_VAR 0 1
75370: PPUSH
75371: CALL_OW 1
75375: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75376: LD_ADDR_EXP 105
75380: PUSH
75381: LD_EXP 105
75385: PPUSH
75386: LD_EXP 105
75390: PUSH
75391: LD_INT 1
75393: PLUS
75394: PPUSH
75395: EMPTY
75396: PPUSH
75397: CALL_OW 1
75401: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75402: LD_ADDR_EXP 108
75406: PUSH
75407: LD_EXP 108
75411: PPUSH
75412: LD_EXP 108
75416: PUSH
75417: LD_INT 1
75419: PLUS
75420: PPUSH
75421: EMPTY
75422: PPUSH
75423: CALL_OW 1
75427: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75428: LD_VAR 0 1
75432: PPUSH
75433: CALL_OW 302
75437: NOT
75438: IFFALSE 75451
// begin HackUnlinkAll ( i ) ;
75440: LD_VAR 0 1
75444: PPUSH
75445: CALL 75557 0 1
// continue ;
75449: GO 75331
// end ; HackCheckCapturedStatus ( i ) ;
75451: LD_VAR 0 1
75455: PPUSH
75456: CALL 76000 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75460: LD_ADDR_VAR 0 2
75464: PUSH
75465: LD_INT 81
75467: PUSH
75468: LD_VAR 0 1
75472: PPUSH
75473: CALL_OW 255
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 33
75484: PUSH
75485: LD_INT 3
75487: PUSH
75488: EMPTY
75489: LIST
75490: LIST
75491: PUSH
75492: LD_INT 91
75494: PUSH
75495: LD_VAR 0 1
75499: PUSH
75500: LD_EXP 107
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: LIST
75509: PUSH
75510: LD_INT 50
75512: PUSH
75513: EMPTY
75514: LIST
75515: PUSH
75516: EMPTY
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: PPUSH
75522: CALL_OW 69
75526: ST_TO_ADDR
// if not tmp then
75527: LD_VAR 0 2
75531: NOT
75532: IFFALSE 75536
// continue ;
75534: GO 75331
// HackLink ( i , tmp ) ;
75536: LD_VAR 0 1
75540: PPUSH
75541: LD_VAR 0 2
75545: PPUSH
75546: CALL 75693 0 2
// end ;
75550: GO 75331
75552: POP
75553: POP
// end ;
75554: PPOPN 2
75556: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75557: LD_INT 0
75559: PPUSH
75560: PPUSH
75561: PPUSH
// if not hack in hackTanks then
75562: LD_VAR 0 1
75566: PUSH
75567: LD_EXP 104
75571: IN
75572: NOT
75573: IFFALSE 75577
// exit ;
75575: GO 75688
// index := GetElementIndex ( hackTanks , hack ) ;
75577: LD_ADDR_VAR 0 4
75581: PUSH
75582: LD_EXP 104
75586: PPUSH
75587: LD_VAR 0 1
75591: PPUSH
75592: CALL 19642 0 2
75596: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75597: LD_EXP 105
75601: PUSH
75602: LD_VAR 0 4
75606: ARRAY
75607: IFFALSE 75688
// begin for i in hackTanksCaptured [ index ] do
75609: LD_ADDR_VAR 0 3
75613: PUSH
75614: LD_EXP 105
75618: PUSH
75619: LD_VAR 0 4
75623: ARRAY
75624: PUSH
75625: FOR_IN
75626: IFFALSE 75652
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75628: LD_VAR 0 3
75632: PUSH
75633: LD_INT 1
75635: ARRAY
75636: PPUSH
75637: LD_VAR 0 3
75641: PUSH
75642: LD_INT 2
75644: ARRAY
75645: PPUSH
75646: CALL_OW 235
75650: GO 75625
75652: POP
75653: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75654: LD_ADDR_EXP 105
75658: PUSH
75659: LD_EXP 105
75663: PPUSH
75664: LD_VAR 0 4
75668: PPUSH
75669: EMPTY
75670: PPUSH
75671: CALL_OW 1
75675: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75676: LD_VAR 0 1
75680: PPUSH
75681: LD_INT 0
75683: PPUSH
75684: CALL_OW 505
// end ; end ;
75688: LD_VAR 0 2
75692: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75693: LD_INT 0
75695: PPUSH
75696: PPUSH
75697: PPUSH
// if not hack in hackTanks or not vehicles then
75698: LD_VAR 0 1
75702: PUSH
75703: LD_EXP 104
75707: IN
75708: NOT
75709: PUSH
75710: LD_VAR 0 2
75714: NOT
75715: OR
75716: IFFALSE 75720
// exit ;
75718: GO 75995
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75720: LD_ADDR_VAR 0 2
75724: PUSH
75725: LD_VAR 0 1
75729: PPUSH
75730: LD_VAR 0 2
75734: PPUSH
75735: LD_INT 1
75737: PPUSH
75738: LD_INT 1
75740: PPUSH
75741: CALL 20292 0 4
75745: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75746: LD_ADDR_VAR 0 5
75750: PUSH
75751: LD_EXP 104
75755: PPUSH
75756: LD_VAR 0 1
75760: PPUSH
75761: CALL 19642 0 2
75765: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75766: LD_EXP 105
75770: PUSH
75771: LD_VAR 0 5
75775: ARRAY
75776: PUSH
75777: LD_EXP 106
75781: LESS
75782: IFFALSE 75971
// begin for i := 1 to vehicles do
75784: LD_ADDR_VAR 0 4
75788: PUSH
75789: DOUBLE
75790: LD_INT 1
75792: DEC
75793: ST_TO_ADDR
75794: LD_VAR 0 2
75798: PUSH
75799: FOR_TO
75800: IFFALSE 75969
// begin if hackTanksCaptured [ index ] = hackLimit then
75802: LD_EXP 105
75806: PUSH
75807: LD_VAR 0 5
75811: ARRAY
75812: PUSH
75813: LD_EXP 106
75817: EQUAL
75818: IFFALSE 75822
// break ;
75820: GO 75969
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75822: LD_ADDR_EXP 108
75826: PUSH
75827: LD_EXP 108
75831: PPUSH
75832: LD_VAR 0 5
75836: PPUSH
75837: LD_EXP 108
75841: PUSH
75842: LD_VAR 0 5
75846: ARRAY
75847: PUSH
75848: LD_INT 1
75850: PLUS
75851: PPUSH
75852: CALL_OW 1
75856: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75857: LD_ADDR_EXP 105
75861: PUSH
75862: LD_EXP 105
75866: PPUSH
75867: LD_VAR 0 5
75871: PUSH
75872: LD_EXP 105
75876: PUSH
75877: LD_VAR 0 5
75881: ARRAY
75882: PUSH
75883: LD_INT 1
75885: PLUS
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PPUSH
75891: LD_VAR 0 2
75895: PUSH
75896: LD_VAR 0 4
75900: ARRAY
75901: PUSH
75902: LD_VAR 0 2
75906: PUSH
75907: LD_VAR 0 4
75911: ARRAY
75912: PPUSH
75913: CALL_OW 255
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: PPUSH
75922: CALL 19857 0 3
75926: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
75927: LD_VAR 0 2
75931: PUSH
75932: LD_VAR 0 4
75936: ARRAY
75937: PPUSH
75938: LD_VAR 0 1
75942: PPUSH
75943: CALL_OW 255
75947: PPUSH
75948: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
75952: LD_VAR 0 2
75956: PUSH
75957: LD_VAR 0 4
75961: ARRAY
75962: PPUSH
75963: CALL_OW 141
// end ;
75967: GO 75799
75969: POP
75970: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75971: LD_VAR 0 1
75975: PPUSH
75976: LD_EXP 105
75980: PUSH
75981: LD_VAR 0 5
75985: ARRAY
75986: PUSH
75987: LD_INT 0
75989: PLUS
75990: PPUSH
75991: CALL_OW 505
// end ;
75995: LD_VAR 0 3
75999: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76000: LD_INT 0
76002: PPUSH
76003: PPUSH
76004: PPUSH
76005: PPUSH
// if not hack in hackTanks then
76006: LD_VAR 0 1
76010: PUSH
76011: LD_EXP 104
76015: IN
76016: NOT
76017: IFFALSE 76021
// exit ;
76019: GO 76261
// index := GetElementIndex ( hackTanks , hack ) ;
76021: LD_ADDR_VAR 0 4
76025: PUSH
76026: LD_EXP 104
76030: PPUSH
76031: LD_VAR 0 1
76035: PPUSH
76036: CALL 19642 0 2
76040: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76041: LD_ADDR_VAR 0 3
76045: PUSH
76046: DOUBLE
76047: LD_EXP 105
76051: PUSH
76052: LD_VAR 0 4
76056: ARRAY
76057: INC
76058: ST_TO_ADDR
76059: LD_INT 1
76061: PUSH
76062: FOR_DOWNTO
76063: IFFALSE 76235
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76065: LD_ADDR_VAR 0 5
76069: PUSH
76070: LD_EXP 105
76074: PUSH
76075: LD_VAR 0 4
76079: ARRAY
76080: PUSH
76081: LD_VAR 0 3
76085: ARRAY
76086: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76087: LD_VAR 0 5
76091: PUSH
76092: LD_INT 1
76094: ARRAY
76095: PPUSH
76096: CALL_OW 302
76100: NOT
76101: PUSH
76102: LD_VAR 0 5
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PPUSH
76111: CALL_OW 255
76115: PUSH
76116: LD_VAR 0 1
76120: PPUSH
76121: CALL_OW 255
76125: NONEQUAL
76126: OR
76127: IFFALSE 76233
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76129: LD_VAR 0 5
76133: PUSH
76134: LD_INT 1
76136: ARRAY
76137: PPUSH
76138: CALL_OW 305
76142: PUSH
76143: LD_VAR 0 5
76147: PUSH
76148: LD_INT 1
76150: ARRAY
76151: PPUSH
76152: CALL_OW 255
76156: PUSH
76157: LD_VAR 0 1
76161: PPUSH
76162: CALL_OW 255
76166: EQUAL
76167: AND
76168: IFFALSE 76192
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76170: LD_VAR 0 5
76174: PUSH
76175: LD_INT 1
76177: ARRAY
76178: PPUSH
76179: LD_VAR 0 5
76183: PUSH
76184: LD_INT 2
76186: ARRAY
76187: PPUSH
76188: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76192: LD_ADDR_EXP 105
76196: PUSH
76197: LD_EXP 105
76201: PPUSH
76202: LD_VAR 0 4
76206: PPUSH
76207: LD_EXP 105
76211: PUSH
76212: LD_VAR 0 4
76216: ARRAY
76217: PPUSH
76218: LD_VAR 0 3
76222: PPUSH
76223: CALL_OW 3
76227: PPUSH
76228: CALL_OW 1
76232: ST_TO_ADDR
// end ; end ;
76233: GO 76062
76235: POP
76236: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_EXP 105
76246: PUSH
76247: LD_VAR 0 4
76251: ARRAY
76252: PUSH
76253: LD_INT 0
76255: PLUS
76256: PPUSH
76257: CALL_OW 505
// end ;
76261: LD_VAR 0 2
76265: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76266: LD_INT 0
76268: PPUSH
76269: PPUSH
76270: PPUSH
76271: PPUSH
// if not hack in hackTanks then
76272: LD_VAR 0 1
76276: PUSH
76277: LD_EXP 104
76281: IN
76282: NOT
76283: IFFALSE 76287
// exit ;
76285: GO 76372
// index := GetElementIndex ( hackTanks , hack ) ;
76287: LD_ADDR_VAR 0 5
76291: PUSH
76292: LD_EXP 104
76296: PPUSH
76297: LD_VAR 0 1
76301: PPUSH
76302: CALL 19642 0 2
76306: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76307: LD_ADDR_VAR 0 4
76311: PUSH
76312: DOUBLE
76313: LD_INT 1
76315: DEC
76316: ST_TO_ADDR
76317: LD_EXP 105
76321: PUSH
76322: LD_VAR 0 5
76326: ARRAY
76327: PUSH
76328: FOR_TO
76329: IFFALSE 76370
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76331: LD_EXP 105
76335: PUSH
76336: LD_VAR 0 5
76340: ARRAY
76341: PUSH
76342: LD_VAR 0 4
76346: ARRAY
76347: PUSH
76348: LD_INT 1
76350: ARRAY
76351: PUSH
76352: LD_VAR 0 2
76356: EQUAL
76357: IFFALSE 76368
// KillUnit ( vehicle ) ;
76359: LD_VAR 0 2
76363: PPUSH
76364: CALL_OW 66
76368: GO 76328
76370: POP
76371: POP
// end ;
76372: LD_VAR 0 3
76376: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76377: LD_EXP 109
76381: NOT
76382: IFFALSE 76417
76384: GO 76386
76386: DISABLE
// begin initMiner := true ;
76387: LD_ADDR_EXP 109
76391: PUSH
76392: LD_INT 1
76394: ST_TO_ADDR
// minersList := [ ] ;
76395: LD_ADDR_EXP 110
76399: PUSH
76400: EMPTY
76401: ST_TO_ADDR
// minerMinesList := [ ] ;
76402: LD_ADDR_EXP 111
76406: PUSH
76407: EMPTY
76408: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76409: LD_ADDR_EXP 112
76413: PUSH
76414: LD_INT 5
76416: ST_TO_ADDR
// end ;
76417: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76418: LD_EXP 109
76422: PUSH
76423: LD_INT 34
76425: PUSH
76426: LD_INT 81
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PPUSH
76433: CALL_OW 69
76437: AND
76438: IFFALSE 76899
76440: GO 76442
76442: DISABLE
76443: LD_INT 0
76445: PPUSH
76446: PPUSH
76447: PPUSH
76448: PPUSH
// begin enable ;
76449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76450: LD_ADDR_VAR 0 1
76454: PUSH
76455: LD_INT 34
76457: PUSH
76458: LD_INT 81
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PPUSH
76465: CALL_OW 69
76469: PUSH
76470: FOR_IN
76471: IFFALSE 76543
// begin if not i in minersList then
76473: LD_VAR 0 1
76477: PUSH
76478: LD_EXP 110
76482: IN
76483: NOT
76484: IFFALSE 76541
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76486: LD_ADDR_EXP 110
76490: PUSH
76491: LD_EXP 110
76495: PPUSH
76496: LD_EXP 110
76500: PUSH
76501: LD_INT 1
76503: PLUS
76504: PPUSH
76505: LD_VAR 0 1
76509: PPUSH
76510: CALL_OW 1
76514: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76515: LD_ADDR_EXP 111
76519: PUSH
76520: LD_EXP 111
76524: PPUSH
76525: LD_EXP 111
76529: PUSH
76530: LD_INT 1
76532: PLUS
76533: PPUSH
76534: EMPTY
76535: PPUSH
76536: CALL_OW 1
76540: ST_TO_ADDR
// end end ;
76541: GO 76470
76543: POP
76544: POP
// for i := minerMinesList downto 1 do
76545: LD_ADDR_VAR 0 1
76549: PUSH
76550: DOUBLE
76551: LD_EXP 111
76555: INC
76556: ST_TO_ADDR
76557: LD_INT 1
76559: PUSH
76560: FOR_DOWNTO
76561: IFFALSE 76897
// begin if IsLive ( minersList [ i ] ) then
76563: LD_EXP 110
76567: PUSH
76568: LD_VAR 0 1
76572: ARRAY
76573: PPUSH
76574: CALL_OW 300
76578: IFFALSE 76606
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76580: LD_EXP 110
76584: PUSH
76585: LD_VAR 0 1
76589: ARRAY
76590: PPUSH
76591: LD_EXP 111
76595: PUSH
76596: LD_VAR 0 1
76600: ARRAY
76601: PPUSH
76602: CALL_OW 505
// if not minerMinesList [ i ] then
76606: LD_EXP 111
76610: PUSH
76611: LD_VAR 0 1
76615: ARRAY
76616: NOT
76617: IFFALSE 76621
// continue ;
76619: GO 76560
// for j := minerMinesList [ i ] downto 1 do
76621: LD_ADDR_VAR 0 2
76625: PUSH
76626: DOUBLE
76627: LD_EXP 111
76631: PUSH
76632: LD_VAR 0 1
76636: ARRAY
76637: INC
76638: ST_TO_ADDR
76639: LD_INT 1
76641: PUSH
76642: FOR_DOWNTO
76643: IFFALSE 76893
// begin side := GetSide ( minersList [ i ] ) ;
76645: LD_ADDR_VAR 0 3
76649: PUSH
76650: LD_EXP 110
76654: PUSH
76655: LD_VAR 0 1
76659: ARRAY
76660: PPUSH
76661: CALL_OW 255
76665: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76666: LD_ADDR_VAR 0 4
76670: PUSH
76671: LD_EXP 111
76675: PUSH
76676: LD_VAR 0 1
76680: ARRAY
76681: PUSH
76682: LD_VAR 0 2
76686: ARRAY
76687: PUSH
76688: LD_INT 1
76690: ARRAY
76691: PPUSH
76692: LD_EXP 111
76696: PUSH
76697: LD_VAR 0 1
76701: ARRAY
76702: PUSH
76703: LD_VAR 0 2
76707: ARRAY
76708: PUSH
76709: LD_INT 2
76711: ARRAY
76712: PPUSH
76713: CALL_OW 428
76717: ST_TO_ADDR
// if not tmp then
76718: LD_VAR 0 4
76722: NOT
76723: IFFALSE 76727
// continue ;
76725: GO 76642
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76727: LD_VAR 0 4
76731: PUSH
76732: LD_INT 81
76734: PUSH
76735: LD_VAR 0 3
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PPUSH
76744: CALL_OW 69
76748: IN
76749: PUSH
76750: LD_EXP 111
76754: PUSH
76755: LD_VAR 0 1
76759: ARRAY
76760: PUSH
76761: LD_VAR 0 2
76765: ARRAY
76766: PUSH
76767: LD_INT 1
76769: ARRAY
76770: PPUSH
76771: LD_EXP 111
76775: PUSH
76776: LD_VAR 0 1
76780: ARRAY
76781: PUSH
76782: LD_VAR 0 2
76786: ARRAY
76787: PUSH
76788: LD_INT 2
76790: ARRAY
76791: PPUSH
76792: CALL_OW 458
76796: AND
76797: IFFALSE 76891
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76799: LD_EXP 111
76803: PUSH
76804: LD_VAR 0 1
76808: ARRAY
76809: PUSH
76810: LD_VAR 0 2
76814: ARRAY
76815: PUSH
76816: LD_INT 1
76818: ARRAY
76819: PPUSH
76820: LD_EXP 111
76824: PUSH
76825: LD_VAR 0 1
76829: ARRAY
76830: PUSH
76831: LD_VAR 0 2
76835: ARRAY
76836: PUSH
76837: LD_INT 2
76839: ARRAY
76840: PPUSH
76841: LD_VAR 0 3
76845: PPUSH
76846: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76850: LD_ADDR_EXP 111
76854: PUSH
76855: LD_EXP 111
76859: PPUSH
76860: LD_VAR 0 1
76864: PPUSH
76865: LD_EXP 111
76869: PUSH
76870: LD_VAR 0 1
76874: ARRAY
76875: PPUSH
76876: LD_VAR 0 2
76880: PPUSH
76881: CALL_OW 3
76885: PPUSH
76886: CALL_OW 1
76890: ST_TO_ADDR
// end ; end ;
76891: GO 76642
76893: POP
76894: POP
// end ;
76895: GO 76560
76897: POP
76898: POP
// end ;
76899: PPOPN 4
76901: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
76902: LD_INT 0
76904: PPUSH
76905: PPUSH
// result := false ;
76906: LD_ADDR_VAR 0 4
76910: PUSH
76911: LD_INT 0
76913: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
76914: LD_VAR 0 1
76918: PPUSH
76919: CALL_OW 264
76923: PUSH
76924: LD_INT 81
76926: EQUAL
76927: NOT
76928: IFFALSE 76932
// exit ;
76930: GO 77172
// index := GetElementIndex ( minersList , unit ) ;
76932: LD_ADDR_VAR 0 5
76936: PUSH
76937: LD_EXP 110
76941: PPUSH
76942: LD_VAR 0 1
76946: PPUSH
76947: CALL 19642 0 2
76951: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
76952: LD_EXP 111
76956: PUSH
76957: LD_VAR 0 5
76961: ARRAY
76962: PUSH
76963: LD_EXP 112
76967: GREATEREQUAL
76968: IFFALSE 76972
// exit ;
76970: GO 77172
// ComMoveXY ( unit , x , y ) ;
76972: LD_VAR 0 1
76976: PPUSH
76977: LD_VAR 0 2
76981: PPUSH
76982: LD_VAR 0 3
76986: PPUSH
76987: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76991: LD_INT 35
76993: PPUSH
76994: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
76998: LD_VAR 0 1
77002: PPUSH
77003: LD_VAR 0 2
77007: PPUSH
77008: LD_VAR 0 3
77012: PPUSH
77013: CALL 51383 0 3
77017: NOT
77018: PUSH
77019: LD_VAR 0 1
77023: PPUSH
77024: CALL_OW 314
77028: AND
77029: IFFALSE 77033
// exit ;
77031: GO 77172
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77033: LD_VAR 0 2
77037: PPUSH
77038: LD_VAR 0 3
77042: PPUSH
77043: CALL_OW 428
77047: PUSH
77048: LD_VAR 0 1
77052: EQUAL
77053: PUSH
77054: LD_VAR 0 1
77058: PPUSH
77059: CALL_OW 314
77063: NOT
77064: AND
77065: IFFALSE 76991
// PlaySoundXY ( x , y , PlantMine ) ;
77067: LD_VAR 0 2
77071: PPUSH
77072: LD_VAR 0 3
77076: PPUSH
77077: LD_STRING PlantMine
77079: PPUSH
77080: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77084: LD_VAR 0 2
77088: PPUSH
77089: LD_VAR 0 3
77093: PPUSH
77094: LD_VAR 0 1
77098: PPUSH
77099: CALL_OW 255
77103: PPUSH
77104: LD_INT 0
77106: PPUSH
77107: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77111: LD_ADDR_EXP 111
77115: PUSH
77116: LD_EXP 111
77120: PPUSH
77121: LD_VAR 0 5
77125: PUSH
77126: LD_EXP 111
77130: PUSH
77131: LD_VAR 0 5
77135: ARRAY
77136: PUSH
77137: LD_INT 1
77139: PLUS
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PPUSH
77145: LD_VAR 0 2
77149: PUSH
77150: LD_VAR 0 3
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PPUSH
77159: CALL 19857 0 3
77163: ST_TO_ADDR
// result := true ;
77164: LD_ADDR_VAR 0 4
77168: PUSH
77169: LD_INT 1
77171: ST_TO_ADDR
// end ;
77172: LD_VAR 0 4
77176: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77177: LD_INT 0
77179: PPUSH
77180: PPUSH
77181: PPUSH
// if not unit in minersList then
77182: LD_VAR 0 1
77186: PUSH
77187: LD_EXP 110
77191: IN
77192: NOT
77193: IFFALSE 77197
// exit ;
77195: GO 77589
// index := GetElementIndex ( minersList , unit ) ;
77197: LD_ADDR_VAR 0 6
77201: PUSH
77202: LD_EXP 110
77206: PPUSH
77207: LD_VAR 0 1
77211: PPUSH
77212: CALL 19642 0 2
77216: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77217: LD_ADDR_VAR 0 5
77221: PUSH
77222: DOUBLE
77223: LD_EXP 111
77227: PUSH
77228: LD_VAR 0 6
77232: ARRAY
77233: INC
77234: ST_TO_ADDR
77235: LD_INT 1
77237: PUSH
77238: FOR_DOWNTO
77239: IFFALSE 77400
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77241: LD_EXP 111
77245: PUSH
77246: LD_VAR 0 6
77250: ARRAY
77251: PUSH
77252: LD_VAR 0 5
77256: ARRAY
77257: PUSH
77258: LD_INT 1
77260: ARRAY
77261: PUSH
77262: LD_VAR 0 2
77266: EQUAL
77267: PUSH
77268: LD_EXP 111
77272: PUSH
77273: LD_VAR 0 6
77277: ARRAY
77278: PUSH
77279: LD_VAR 0 5
77283: ARRAY
77284: PUSH
77285: LD_INT 2
77287: ARRAY
77288: PUSH
77289: LD_VAR 0 3
77293: EQUAL
77294: AND
77295: IFFALSE 77398
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77297: LD_EXP 111
77301: PUSH
77302: LD_VAR 0 6
77306: ARRAY
77307: PUSH
77308: LD_VAR 0 5
77312: ARRAY
77313: PUSH
77314: LD_INT 1
77316: ARRAY
77317: PPUSH
77318: LD_EXP 111
77322: PUSH
77323: LD_VAR 0 6
77327: ARRAY
77328: PUSH
77329: LD_VAR 0 5
77333: ARRAY
77334: PUSH
77335: LD_INT 2
77337: ARRAY
77338: PPUSH
77339: LD_VAR 0 1
77343: PPUSH
77344: CALL_OW 255
77348: PPUSH
77349: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77353: LD_ADDR_EXP 111
77357: PUSH
77358: LD_EXP 111
77362: PPUSH
77363: LD_VAR 0 6
77367: PPUSH
77368: LD_EXP 111
77372: PUSH
77373: LD_VAR 0 6
77377: ARRAY
77378: PPUSH
77379: LD_VAR 0 5
77383: PPUSH
77384: CALL_OW 3
77388: PPUSH
77389: CALL_OW 1
77393: ST_TO_ADDR
// exit ;
77394: POP
77395: POP
77396: GO 77589
// end ; end ;
77398: GO 77238
77400: POP
77401: POP
// for i := minerMinesList [ index ] downto 1 do
77402: LD_ADDR_VAR 0 5
77406: PUSH
77407: DOUBLE
77408: LD_EXP 111
77412: PUSH
77413: LD_VAR 0 6
77417: ARRAY
77418: INC
77419: ST_TO_ADDR
77420: LD_INT 1
77422: PUSH
77423: FOR_DOWNTO
77424: IFFALSE 77587
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77426: LD_EXP 111
77430: PUSH
77431: LD_VAR 0 6
77435: ARRAY
77436: PUSH
77437: LD_VAR 0 5
77441: ARRAY
77442: PUSH
77443: LD_INT 1
77445: ARRAY
77446: PPUSH
77447: LD_EXP 111
77451: PUSH
77452: LD_VAR 0 6
77456: ARRAY
77457: PUSH
77458: LD_VAR 0 5
77462: ARRAY
77463: PUSH
77464: LD_INT 2
77466: ARRAY
77467: PPUSH
77468: LD_VAR 0 2
77472: PPUSH
77473: LD_VAR 0 3
77477: PPUSH
77478: CALL_OW 298
77482: PUSH
77483: LD_INT 6
77485: LESS
77486: IFFALSE 77585
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77488: LD_EXP 111
77492: PUSH
77493: LD_VAR 0 6
77497: ARRAY
77498: PUSH
77499: LD_VAR 0 5
77503: ARRAY
77504: PUSH
77505: LD_INT 1
77507: ARRAY
77508: PPUSH
77509: LD_EXP 111
77513: PUSH
77514: LD_VAR 0 6
77518: ARRAY
77519: PUSH
77520: LD_VAR 0 5
77524: ARRAY
77525: PUSH
77526: LD_INT 2
77528: ARRAY
77529: PPUSH
77530: LD_VAR 0 1
77534: PPUSH
77535: CALL_OW 255
77539: PPUSH
77540: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77544: LD_ADDR_EXP 111
77548: PUSH
77549: LD_EXP 111
77553: PPUSH
77554: LD_VAR 0 6
77558: PPUSH
77559: LD_EXP 111
77563: PUSH
77564: LD_VAR 0 6
77568: ARRAY
77569: PPUSH
77570: LD_VAR 0 5
77574: PPUSH
77575: CALL_OW 3
77579: PPUSH
77580: CALL_OW 1
77584: ST_TO_ADDR
// end ; end ;
77585: GO 77423
77587: POP
77588: POP
// end ;
77589: LD_VAR 0 4
77593: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77594: LD_INT 0
77596: PPUSH
77597: PPUSH
77598: PPUSH
77599: PPUSH
77600: PPUSH
77601: PPUSH
77602: PPUSH
77603: PPUSH
77604: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77605: LD_VAR 0 1
77609: PPUSH
77610: CALL_OW 264
77614: PUSH
77615: LD_INT 81
77617: EQUAL
77618: NOT
77619: PUSH
77620: LD_VAR 0 1
77624: PUSH
77625: LD_EXP 110
77629: IN
77630: NOT
77631: OR
77632: IFFALSE 77636
// exit ;
77634: GO 77958
// index := GetElementIndex ( minersList , unit ) ;
77636: LD_ADDR_VAR 0 6
77640: PUSH
77641: LD_EXP 110
77645: PPUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: CALL 19642 0 2
77655: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77656: LD_ADDR_VAR 0 8
77660: PUSH
77661: LD_EXP 112
77665: PUSH
77666: LD_EXP 111
77670: PUSH
77671: LD_VAR 0 6
77675: ARRAY
77676: MINUS
77677: ST_TO_ADDR
// if not minesFreeAmount then
77678: LD_VAR 0 8
77682: NOT
77683: IFFALSE 77687
// exit ;
77685: GO 77958
// tmp := [ ] ;
77687: LD_ADDR_VAR 0 7
77691: PUSH
77692: EMPTY
77693: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77694: LD_ADDR_VAR 0 5
77698: PUSH
77699: DOUBLE
77700: LD_INT 1
77702: DEC
77703: ST_TO_ADDR
77704: LD_VAR 0 8
77708: PUSH
77709: FOR_TO
77710: IFFALSE 77905
// begin _d := rand ( 0 , 5 ) ;
77712: LD_ADDR_VAR 0 11
77716: PUSH
77717: LD_INT 0
77719: PPUSH
77720: LD_INT 5
77722: PPUSH
77723: CALL_OW 12
77727: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77728: LD_ADDR_VAR 0 12
77732: PUSH
77733: LD_INT 2
77735: PPUSH
77736: LD_INT 6
77738: PPUSH
77739: CALL_OW 12
77743: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77744: LD_ADDR_VAR 0 9
77748: PUSH
77749: LD_VAR 0 2
77753: PPUSH
77754: LD_VAR 0 11
77758: PPUSH
77759: LD_VAR 0 12
77763: PPUSH
77764: CALL_OW 272
77768: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77769: LD_ADDR_VAR 0 10
77773: PUSH
77774: LD_VAR 0 3
77778: PPUSH
77779: LD_VAR 0 11
77783: PPUSH
77784: LD_VAR 0 12
77788: PPUSH
77789: CALL_OW 273
77793: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77794: LD_VAR 0 9
77798: PPUSH
77799: LD_VAR 0 10
77803: PPUSH
77804: CALL_OW 488
77808: PUSH
77809: LD_VAR 0 9
77813: PUSH
77814: LD_VAR 0 10
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_VAR 0 7
77827: IN
77828: NOT
77829: AND
77830: PUSH
77831: LD_VAR 0 9
77835: PPUSH
77836: LD_VAR 0 10
77840: PPUSH
77841: CALL_OW 458
77845: NOT
77846: AND
77847: IFFALSE 77889
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77849: LD_ADDR_VAR 0 7
77853: PUSH
77854: LD_VAR 0 7
77858: PPUSH
77859: LD_VAR 0 7
77863: PUSH
77864: LD_INT 1
77866: PLUS
77867: PPUSH
77868: LD_VAR 0 9
77872: PUSH
77873: LD_VAR 0 10
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PPUSH
77882: CALL_OW 1
77886: ST_TO_ADDR
77887: GO 77903
// i := i - 1 ;
77889: LD_ADDR_VAR 0 5
77893: PUSH
77894: LD_VAR 0 5
77898: PUSH
77899: LD_INT 1
77901: MINUS
77902: ST_TO_ADDR
// end ;
77903: GO 77709
77905: POP
77906: POP
// for i in tmp do
77907: LD_ADDR_VAR 0 5
77911: PUSH
77912: LD_VAR 0 7
77916: PUSH
77917: FOR_IN
77918: IFFALSE 77956
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
77920: LD_VAR 0 1
77924: PPUSH
77925: LD_VAR 0 5
77929: PUSH
77930: LD_INT 1
77932: ARRAY
77933: PPUSH
77934: LD_VAR 0 5
77938: PUSH
77939: LD_INT 2
77941: ARRAY
77942: PPUSH
77943: CALL 76902 0 3
77947: NOT
77948: IFFALSE 77954
// exit ;
77950: POP
77951: POP
77952: GO 77958
77954: GO 77917
77956: POP
77957: POP
// end ;
77958: LD_VAR 0 4
77962: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
77963: LD_INT 0
77965: PPUSH
77966: PPUSH
77967: PPUSH
77968: PPUSH
77969: PPUSH
77970: PPUSH
77971: PPUSH
// if not GetClass ( unit ) = class_sniper then
77972: LD_VAR 0 1
77976: PPUSH
77977: CALL_OW 257
77981: PUSH
77982: LD_INT 5
77984: EQUAL
77985: NOT
77986: IFFALSE 77990
// exit ;
77988: GO 78378
// dist := 8 ;
77990: LD_ADDR_VAR 0 5
77994: PUSH
77995: LD_INT 8
77997: ST_TO_ADDR
// viewRange := 12 ;
77998: LD_ADDR_VAR 0 7
78002: PUSH
78003: LD_INT 12
78005: ST_TO_ADDR
// side := GetSide ( unit ) ;
78006: LD_ADDR_VAR 0 6
78010: PUSH
78011: LD_VAR 0 1
78015: PPUSH
78016: CALL_OW 255
78020: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78021: LD_INT 61
78023: PPUSH
78024: LD_VAR 0 6
78028: PPUSH
78029: CALL_OW 321
78033: PUSH
78034: LD_INT 2
78036: EQUAL
78037: IFFALSE 78047
// viewRange := 16 ;
78039: LD_ADDR_VAR 0 7
78043: PUSH
78044: LD_INT 16
78046: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78047: LD_VAR 0 1
78051: PPUSH
78052: LD_VAR 0 2
78056: PPUSH
78057: LD_VAR 0 3
78061: PPUSH
78062: CALL_OW 297
78066: PUSH
78067: LD_VAR 0 5
78071: GREATER
78072: IFFALSE 78151
// begin ComMoveXY ( unit , x , y ) ;
78074: LD_VAR 0 1
78078: PPUSH
78079: LD_VAR 0 2
78083: PPUSH
78084: LD_VAR 0 3
78088: PPUSH
78089: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78093: LD_INT 35
78095: PPUSH
78096: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78100: LD_VAR 0 1
78104: PPUSH
78105: LD_VAR 0 2
78109: PPUSH
78110: LD_VAR 0 3
78114: PPUSH
78115: CALL 51383 0 3
78119: NOT
78120: IFFALSE 78124
// exit ;
78122: GO 78378
// until GetDistUnitXY ( unit , x , y ) < dist ;
78124: LD_VAR 0 1
78128: PPUSH
78129: LD_VAR 0 2
78133: PPUSH
78134: LD_VAR 0 3
78138: PPUSH
78139: CALL_OW 297
78143: PUSH
78144: LD_VAR 0 5
78148: LESS
78149: IFFALSE 78093
// end ; ComTurnXY ( unit , x , y ) ;
78151: LD_VAR 0 1
78155: PPUSH
78156: LD_VAR 0 2
78160: PPUSH
78161: LD_VAR 0 3
78165: PPUSH
78166: CALL_OW 118
// wait ( 5 ) ;
78170: LD_INT 5
78172: PPUSH
78173: CALL_OW 67
// _d := GetDir ( unit ) ;
78177: LD_ADDR_VAR 0 10
78181: PUSH
78182: LD_VAR 0 1
78186: PPUSH
78187: CALL_OW 254
78191: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78192: LD_ADDR_VAR 0 8
78196: PUSH
78197: LD_VAR 0 1
78201: PPUSH
78202: CALL_OW 250
78206: PPUSH
78207: LD_VAR 0 10
78211: PPUSH
78212: LD_VAR 0 5
78216: PPUSH
78217: CALL_OW 272
78221: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78222: LD_ADDR_VAR 0 9
78226: PUSH
78227: LD_VAR 0 1
78231: PPUSH
78232: CALL_OW 251
78236: PPUSH
78237: LD_VAR 0 10
78241: PPUSH
78242: LD_VAR 0 5
78246: PPUSH
78247: CALL_OW 273
78251: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78252: LD_VAR 0 8
78256: PPUSH
78257: LD_VAR 0 9
78261: PPUSH
78262: CALL_OW 488
78266: NOT
78267: IFFALSE 78271
// exit ;
78269: GO 78378
// ComAnimCustom ( unit , 1 ) ;
78271: LD_VAR 0 1
78275: PPUSH
78276: LD_INT 1
78278: PPUSH
78279: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78283: LD_VAR 0 8
78287: PPUSH
78288: LD_VAR 0 9
78292: PPUSH
78293: LD_VAR 0 6
78297: PPUSH
78298: LD_VAR 0 7
78302: PPUSH
78303: CALL_OW 330
// repeat wait ( 1 ) ;
78307: LD_INT 1
78309: PPUSH
78310: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78314: LD_VAR 0 1
78318: PPUSH
78319: CALL_OW 316
78323: PUSH
78324: LD_VAR 0 1
78328: PPUSH
78329: CALL_OW 314
78333: OR
78334: PUSH
78335: LD_VAR 0 1
78339: PPUSH
78340: CALL_OW 302
78344: NOT
78345: OR
78346: PUSH
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL_OW 301
78356: OR
78357: IFFALSE 78307
// RemoveSeeing ( _x , _y , side ) ;
78359: LD_VAR 0 8
78363: PPUSH
78364: LD_VAR 0 9
78368: PPUSH
78369: LD_VAR 0 6
78373: PPUSH
78374: CALL_OW 331
// end ; end_of_file
78378: LD_VAR 0 4
78382: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78383: LD_VAR 0 1
78387: PPUSH
78388: LD_VAR 0 2
78392: PPUSH
78393: LD_VAR 0 3
78397: PPUSH
78398: LD_VAR 0 4
78402: PPUSH
78403: LD_VAR 0 5
78407: PPUSH
78408: LD_VAR 0 6
78412: PPUSH
78413: CALL 57842 0 6
// end ;
78417: PPOPN 6
78419: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78420: LD_INT 0
78422: PPUSH
// begin if not units then
78423: LD_VAR 0 1
78427: NOT
78428: IFFALSE 78432
// exit ;
78430: GO 78432
// end ;
78432: PPOPN 7
78434: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78435: CALL 57729 0 0
// end ; end_of_file
78439: PPOPN 1
78441: END
