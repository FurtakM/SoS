// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45742 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46057 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 20
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 23
 900: PUSH
 901: LD_INT 18
 903: PUSH
 904: LD_INT 19
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 24
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 1 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 26
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45197 0 2
1411: PUSH
1412: LD_INT 27
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45197 0 2
1422: PUSH
1423: LD_INT 28
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45197 0 2
1433: PUSH
1434: LD_INT 29
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45197 0 2
1444: PUSH
1445: LD_INT 30
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL 45197 0 2
1455: PUSH
1456: LD_INT 31
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL 45197 0 2
1466: PUSH
1467: LD_INT 32
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL 45197 0 2
1477: PUSH
1478: LD_INT 33
1480: PPUSH
1481: LD_INT 5
1483: PPUSH
1484: CALL 45197 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5049 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 34
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45030 0 2
1667: PUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45030 0 2
1680: PUSH
1681: LD_INT 36
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45030 0 2
1693: PUSH
1694: LD_INT 37
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45030 0 2
1706: PUSH
1707: LD_INT 38
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45030 0 2
1719: PUSH
1720: LD_INT 39
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45030 0 2
1732: PUSH
1733: LD_INT 40
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45030 0 2
1745: PUSH
1746: LD_INT 41
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45030 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 42
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45030 0 2
1810: PUSH
1811: LD_INT 43
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45030 0 2
1823: PUSH
1824: LD_INT 44
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45030 0 2
1836: PUSH
1837: LD_INT 45
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45030 0 2
1849: PUSH
1850: LD_INT 46
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45030 0 2
1862: PUSH
1863: LD_INT 47
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45030 0 2
1875: PUSH
1876: LD_INT 48
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45030 0 2
1888: PUSH
1889: LD_INT 49
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45030 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 50
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45197 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45197 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 66
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45197 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 52
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 45197 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 53
2017: PPUSH
2018: LD_INT 5
2020: PPUSH
2021: CALL 45197 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 67
2032: PPUSH
2033: LD_INT 5
2035: PPUSH
2036: CALL 45197 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 54
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45197 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 55
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45197 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 68
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45197 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 56
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45197 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 57
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45197 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 69
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45197 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 58
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL 45197 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 59
2167: PPUSH
2168: LD_INT 5
2170: PPUSH
2171: CALL 45197 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 70
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL 45197 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 60
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: CALL 45197 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 61
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL 45197 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 71
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 45197 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 62
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45197 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 63
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL 45197 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 72
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL 45197 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 64
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL 45197 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 65
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL 45197 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 73
2332: PPUSH
2333: LD_INT 2
2335: PPUSH
2336: CALL 45197 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 20
2569: PUSH
2570: LD_INT 21
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 23
2578: PUSH
2579: LD_INT 18
2581: PUSH
2582: LD_INT 19
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 42019 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 53872 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 50579 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 53889 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 51182 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 53930 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 51235 0 3
2923: PPOPN 3
2925: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// if exist_mode then
2930: LD_VAR 0 2
2934: IFFALSE 2980
// begin unit := CreateCharacter ( prefix & ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: STR
2951: PPUSH
2952: CALL_OW 34
2956: ST_TO_ADDR
// if unit then
2957: LD_VAR 0 5
2961: IFFALSE 2978
// DeleteCharacters ( prefix & ident ) ;
2963: LD_VAR 0 3
2967: PUSH
2968: LD_VAR 0 1
2972: STR
2973: PPUSH
2974: CALL_OW 40
// end else
2978: GO 2995
// unit := NewCharacter ( ident ) ;
2980: LD_ADDR_VAR 0 5
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: CALL_OW 25
2994: ST_TO_ADDR
// result := unit ;
2995: LD_ADDR_VAR 0 4
2999: PUSH
3000: LD_VAR 0 5
3004: ST_TO_ADDR
// end ;
3005: LD_VAR 0 4
3009: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3010: LD_INT 0
3012: PPUSH
3013: PPUSH
// if not side or not nation then
3014: LD_VAR 0 1
3018: NOT
3019: PUSH
3020: LD_VAR 0 2
3024: NOT
3025: OR
3026: IFFALSE 3030
// exit ;
3028: GO 3798
// case nation of nation_american :
3030: LD_VAR 0 2
3034: PUSH
3035: LD_INT 1
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3257
3043: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3044: LD_ADDR_VAR 0 4
3048: PUSH
3049: LD_INT 35
3051: PUSH
3052: LD_INT 45
3054: PUSH
3055: LD_INT 46
3057: PUSH
3058: LD_INT 47
3060: PUSH
3061: LD_INT 82
3063: PUSH
3064: LD_INT 83
3066: PUSH
3067: LD_INT 84
3069: PUSH
3070: LD_INT 85
3072: PUSH
3073: LD_INT 86
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: LD_INT 2
3081: PUSH
3082: LD_INT 6
3084: PUSH
3085: LD_INT 15
3087: PUSH
3088: LD_INT 16
3090: PUSH
3091: LD_INT 7
3093: PUSH
3094: LD_INT 12
3096: PUSH
3097: LD_INT 13
3099: PUSH
3100: LD_INT 10
3102: PUSH
3103: LD_INT 14
3105: PUSH
3106: LD_INT 20
3108: PUSH
3109: LD_INT 21
3111: PUSH
3112: LD_INT 22
3114: PUSH
3115: LD_INT 25
3117: PUSH
3118: LD_INT 32
3120: PUSH
3121: LD_INT 27
3123: PUSH
3124: LD_INT 36
3126: PUSH
3127: LD_INT 69
3129: PUSH
3130: LD_INT 39
3132: PUSH
3133: LD_INT 34
3135: PUSH
3136: LD_INT 40
3138: PUSH
3139: LD_INT 48
3141: PUSH
3142: LD_INT 49
3144: PUSH
3145: LD_INT 50
3147: PUSH
3148: LD_INT 51
3150: PUSH
3151: LD_INT 52
3153: PUSH
3154: LD_INT 53
3156: PUSH
3157: LD_INT 54
3159: PUSH
3160: LD_INT 55
3162: PUSH
3163: LD_INT 56
3165: PUSH
3166: LD_INT 57
3168: PUSH
3169: LD_INT 58
3171: PUSH
3172: LD_INT 59
3174: PUSH
3175: LD_INT 60
3177: PUSH
3178: LD_INT 61
3180: PUSH
3181: LD_INT 62
3183: PUSH
3184: LD_INT 80
3186: PUSH
3187: LD_INT 82
3189: PUSH
3190: LD_INT 83
3192: PUSH
3193: LD_INT 84
3195: PUSH
3196: LD_INT 85
3198: PUSH
3199: LD_INT 86
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: ST_TO_ADDR
3255: GO 3722
3257: LD_INT 2
3259: DOUBLE
3260: EQUAL
3261: IFTRUE 3265
3263: GO 3491
3265: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3266: LD_ADDR_VAR 0 4
3270: PUSH
3271: LD_INT 35
3273: PUSH
3274: LD_INT 45
3276: PUSH
3277: LD_INT 46
3279: PUSH
3280: LD_INT 47
3282: PUSH
3283: LD_INT 82
3285: PUSH
3286: LD_INT 83
3288: PUSH
3289: LD_INT 84
3291: PUSH
3292: LD_INT 85
3294: PUSH
3295: LD_INT 87
3297: PUSH
3298: LD_INT 70
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: LD_INT 11
3306: PUSH
3307: LD_INT 3
3309: PUSH
3310: LD_INT 4
3312: PUSH
3313: LD_INT 5
3315: PUSH
3316: LD_INT 6
3318: PUSH
3319: LD_INT 15
3321: PUSH
3322: LD_INT 18
3324: PUSH
3325: LD_INT 7
3327: PUSH
3328: LD_INT 17
3330: PUSH
3331: LD_INT 8
3333: PUSH
3334: LD_INT 20
3336: PUSH
3337: LD_INT 21
3339: PUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 72
3345: PUSH
3346: LD_INT 26
3348: PUSH
3349: LD_INT 69
3351: PUSH
3352: LD_INT 39
3354: PUSH
3355: LD_INT 40
3357: PUSH
3358: LD_INT 41
3360: PUSH
3361: LD_INT 42
3363: PUSH
3364: LD_INT 43
3366: PUSH
3367: LD_INT 48
3369: PUSH
3370: LD_INT 49
3372: PUSH
3373: LD_INT 50
3375: PUSH
3376: LD_INT 51
3378: PUSH
3379: LD_INT 52
3381: PUSH
3382: LD_INT 53
3384: PUSH
3385: LD_INT 54
3387: PUSH
3388: LD_INT 55
3390: PUSH
3391: LD_INT 56
3393: PUSH
3394: LD_INT 60
3396: PUSH
3397: LD_INT 61
3399: PUSH
3400: LD_INT 62
3402: PUSH
3403: LD_INT 66
3405: PUSH
3406: LD_INT 67
3408: PUSH
3409: LD_INT 68
3411: PUSH
3412: LD_INT 81
3414: PUSH
3415: LD_INT 82
3417: PUSH
3418: LD_INT 83
3420: PUSH
3421: LD_INT 84
3423: PUSH
3424: LD_INT 85
3426: PUSH
3427: LD_INT 87
3429: PUSH
3430: LD_INT 88
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: ST_TO_ADDR
3489: GO 3722
3491: LD_INT 3
3493: DOUBLE
3494: EQUAL
3495: IFTRUE 3499
3497: GO 3721
3499: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3500: LD_ADDR_VAR 0 4
3504: PUSH
3505: LD_INT 46
3507: PUSH
3508: LD_INT 47
3510: PUSH
3511: LD_INT 1
3513: PUSH
3514: LD_INT 2
3516: PUSH
3517: LD_INT 82
3519: PUSH
3520: LD_INT 83
3522: PUSH
3523: LD_INT 84
3525: PUSH
3526: LD_INT 85
3528: PUSH
3529: LD_INT 86
3531: PUSH
3532: LD_INT 11
3534: PUSH
3535: LD_INT 9
3537: PUSH
3538: LD_INT 20
3540: PUSH
3541: LD_INT 19
3543: PUSH
3544: LD_INT 21
3546: PUSH
3547: LD_INT 24
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 25
3555: PUSH
3556: LD_INT 28
3558: PUSH
3559: LD_INT 29
3561: PUSH
3562: LD_INT 30
3564: PUSH
3565: LD_INT 31
3567: PUSH
3568: LD_INT 37
3570: PUSH
3571: LD_INT 38
3573: PUSH
3574: LD_INT 32
3576: PUSH
3577: LD_INT 27
3579: PUSH
3580: LD_INT 33
3582: PUSH
3583: LD_INT 69
3585: PUSH
3586: LD_INT 39
3588: PUSH
3589: LD_INT 34
3591: PUSH
3592: LD_INT 40
3594: PUSH
3595: LD_INT 71
3597: PUSH
3598: LD_INT 23
3600: PUSH
3601: LD_INT 44
3603: PUSH
3604: LD_INT 48
3606: PUSH
3607: LD_INT 49
3609: PUSH
3610: LD_INT 50
3612: PUSH
3613: LD_INT 51
3615: PUSH
3616: LD_INT 52
3618: PUSH
3619: LD_INT 53
3621: PUSH
3622: LD_INT 54
3624: PUSH
3625: LD_INT 55
3627: PUSH
3628: LD_INT 56
3630: PUSH
3631: LD_INT 57
3633: PUSH
3634: LD_INT 58
3636: PUSH
3637: LD_INT 59
3639: PUSH
3640: LD_INT 63
3642: PUSH
3643: LD_INT 64
3645: PUSH
3646: LD_INT 65
3648: PUSH
3649: LD_INT 82
3651: PUSH
3652: LD_INT 83
3654: PUSH
3655: LD_INT 84
3657: PUSH
3658: LD_INT 85
3660: PUSH
3661: LD_INT 86
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: ST_TO_ADDR
3719: GO 3722
3721: POP
// if state > - 1 and state < 3 then
3722: LD_VAR 0 3
3726: PUSH
3727: LD_INT 1
3729: NEG
3730: GREATER
3731: PUSH
3732: LD_VAR 0 3
3736: PUSH
3737: LD_INT 3
3739: LESS
3740: AND
3741: IFFALSE 3798
// for i in result do
3743: LD_ADDR_VAR 0 5
3747: PUSH
3748: LD_VAR 0 4
3752: PUSH
3753: FOR_IN
3754: IFFALSE 3796
// if GetTech ( i , side ) <> state then
3756: LD_VAR 0 5
3760: PPUSH
3761: LD_VAR 0 1
3765: PPUSH
3766: CALL_OW 321
3770: PUSH
3771: LD_VAR 0 3
3775: NONEQUAL
3776: IFFALSE 3794
// result := result diff i ;
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 4
3787: PUSH
3788: LD_VAR 0 5
3792: DIFF
3793: ST_TO_ADDR
3794: GO 3753
3796: POP
3797: POP
// end ;
3798: LD_VAR 0 4
3802: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3803: LD_INT 0
3805: PPUSH
3806: PPUSH
3807: PPUSH
// result := true ;
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_VAR 0 2
3825: PPUSH
3826: CALL_OW 480
3830: ST_TO_ADDR
// if not tmp then
3831: LD_VAR 0 5
3835: NOT
3836: IFFALSE 3840
// exit ;
3838: GO 3889
// for i in tmp do
3840: LD_ADDR_VAR 0 4
3844: PUSH
3845: LD_VAR 0 5
3849: PUSH
3850: FOR_IN
3851: IFFALSE 3887
// if GetTech ( i , side ) <> state_researched then
3853: LD_VAR 0 4
3857: PPUSH
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 321
3867: PUSH
3868: LD_INT 2
3870: NONEQUAL
3871: IFFALSE 3885
// begin result := false ;
3873: LD_ADDR_VAR 0 3
3877: PUSH
3878: LD_INT 0
3880: ST_TO_ADDR
// exit ;
3881: POP
3882: POP
3883: GO 3889
// end ;
3885: GO 3850
3887: POP
3888: POP
// end ;
3889: LD_VAR 0 3
3893: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3894: LD_INT 0
3896: PPUSH
3897: PPUSH
3898: PPUSH
3899: PPUSH
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3909: LD_VAR 0 1
3913: NOT
3914: PUSH
3915: LD_VAR 0 1
3919: PPUSH
3920: CALL_OW 257
3924: PUSH
3925: LD_INT 9
3927: NONEQUAL
3928: OR
3929: IFFALSE 3933
// exit ;
3931: GO 4506
// side := GetSide ( unit ) ;
3933: LD_ADDR_VAR 0 9
3937: PUSH
3938: LD_VAR 0 1
3942: PPUSH
3943: CALL_OW 255
3947: ST_TO_ADDR
// tech_space := tech_spacanom ;
3948: LD_ADDR_VAR 0 12
3952: PUSH
3953: LD_INT 29
3955: ST_TO_ADDR
// tech_time := tech_taurad ;
3956: LD_ADDR_VAR 0 13
3960: PUSH
3961: LD_INT 28
3963: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: CALL_OW 310
3978: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3979: LD_VAR 0 11
3983: PPUSH
3984: CALL_OW 247
3988: PUSH
3989: LD_INT 2
3991: EQUAL
3992: IFFALSE 3996
// exit ;
3994: GO 4506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3996: LD_ADDR_VAR 0 8
4000: PUSH
4001: LD_INT 81
4003: PUSH
4004: LD_VAR 0 9
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: LD_INT 21
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PPUSH
4034: CALL_OW 69
4038: ST_TO_ADDR
// if not tmp then
4039: LD_VAR 0 8
4043: NOT
4044: IFFALSE 4048
// exit ;
4046: GO 4506
// if in_unit then
4048: LD_VAR 0 11
4052: IFFALSE 4076
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4054: LD_ADDR_VAR 0 10
4058: PUSH
4059: LD_VAR 0 8
4063: PPUSH
4064: LD_VAR 0 11
4068: PPUSH
4069: CALL_OW 74
4073: ST_TO_ADDR
4074: GO 4096
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4076: LD_ADDR_VAR 0 10
4080: PUSH
4081: LD_VAR 0 8
4085: PPUSH
4086: LD_VAR 0 1
4090: PPUSH
4091: CALL_OW 74
4095: ST_TO_ADDR
// if not enemy then
4096: LD_VAR 0 10
4100: NOT
4101: IFFALSE 4105
// exit ;
4103: GO 4506
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4105: LD_VAR 0 11
4109: PUSH
4110: LD_VAR 0 11
4114: PPUSH
4115: LD_VAR 0 10
4119: PPUSH
4120: CALL_OW 296
4124: PUSH
4125: LD_INT 13
4127: GREATER
4128: AND
4129: PUSH
4130: LD_VAR 0 1
4134: PPUSH
4135: LD_VAR 0 10
4139: PPUSH
4140: CALL_OW 296
4144: PUSH
4145: LD_INT 12
4147: GREATER
4148: OR
4149: IFFALSE 4153
// exit ;
4151: GO 4506
// missile := [ 1 ] ;
4153: LD_ADDR_VAR 0 14
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4164: LD_VAR 0 9
4168: PPUSH
4169: LD_VAR 0 12
4173: PPUSH
4174: CALL_OW 325
4178: IFFALSE 4207
// missile := Replace ( missile , missile + 1 , 2 ) ;
4180: LD_ADDR_VAR 0 14
4184: PUSH
4185: LD_VAR 0 14
4189: PPUSH
4190: LD_VAR 0 14
4194: PUSH
4195: LD_INT 1
4197: PLUS
4198: PPUSH
4199: LD_INT 2
4201: PPUSH
4202: CALL_OW 1
4206: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4207: LD_VAR 0 9
4211: PPUSH
4212: LD_VAR 0 13
4216: PPUSH
4217: CALL_OW 325
4221: PUSH
4222: LD_VAR 0 10
4226: PPUSH
4227: CALL_OW 255
4231: PPUSH
4232: LD_VAR 0 13
4236: PPUSH
4237: CALL_OW 325
4241: NOT
4242: AND
4243: IFFALSE 4272
// missile := Replace ( missile , missile + 1 , 3 ) ;
4245: LD_ADDR_VAR 0 14
4249: PUSH
4250: LD_VAR 0 14
4254: PPUSH
4255: LD_VAR 0 14
4259: PUSH
4260: LD_INT 1
4262: PLUS
4263: PPUSH
4264: LD_INT 3
4266: PPUSH
4267: CALL_OW 1
4271: ST_TO_ADDR
// if missile < 2 then
4272: LD_VAR 0 14
4276: PUSH
4277: LD_INT 2
4279: LESS
4280: IFFALSE 4284
// exit ;
4282: GO 4506
// x := GetX ( enemy ) ;
4284: LD_ADDR_VAR 0 4
4288: PUSH
4289: LD_VAR 0 10
4293: PPUSH
4294: CALL_OW 250
4298: ST_TO_ADDR
// y := GetY ( enemy ) ;
4299: LD_ADDR_VAR 0 5
4303: PUSH
4304: LD_VAR 0 10
4308: PPUSH
4309: CALL_OW 251
4313: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4314: LD_ADDR_VAR 0 6
4318: PUSH
4319: LD_VAR 0 4
4323: PUSH
4324: LD_INT 1
4326: NEG
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 12
4335: PLUS
4336: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4337: LD_ADDR_VAR 0 7
4341: PUSH
4342: LD_VAR 0 5
4346: PUSH
4347: LD_INT 1
4349: NEG
4350: PPUSH
4351: LD_INT 1
4353: PPUSH
4354: CALL_OW 12
4358: PLUS
4359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4360: LD_VAR 0 6
4364: PPUSH
4365: LD_VAR 0 7
4369: PPUSH
4370: CALL_OW 488
4374: NOT
4375: IFFALSE 4397
// begin _x := x ;
4377: LD_ADDR_VAR 0 6
4381: PUSH
4382: LD_VAR 0 4
4386: ST_TO_ADDR
// _y := y ;
4387: LD_ADDR_VAR 0 7
4391: PUSH
4392: LD_VAR 0 5
4396: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4397: LD_ADDR_VAR 0 3
4401: PUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_VAR 0 14
4409: PPUSH
4410: CALL_OW 12
4414: ST_TO_ADDR
// case i of 1 :
4415: LD_VAR 0 3
4419: PUSH
4420: LD_INT 1
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4445
4428: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4429: LD_VAR 0 1
4433: PPUSH
4434: LD_VAR 0 10
4438: PPUSH
4439: CALL_OW 115
4443: GO 4506
4445: LD_INT 2
4447: DOUBLE
4448: EQUAL
4449: IFTRUE 4453
4451: GO 4475
4453: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4454: LD_VAR 0 1
4458: PPUSH
4459: LD_VAR 0 6
4463: PPUSH
4464: LD_VAR 0 7
4468: PPUSH
4469: CALL_OW 153
4473: GO 4506
4475: LD_INT 3
4477: DOUBLE
4478: EQUAL
4479: IFTRUE 4483
4481: GO 4505
4483: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_VAR 0 6
4493: PPUSH
4494: LD_VAR 0 7
4498: PPUSH
4499: CALL_OW 154
4503: GO 4506
4505: POP
// end ;
4506: LD_VAR 0 2
4510: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
4516: PPUSH
4517: PPUSH
4518: PPUSH
// if not unit or not building then
4519: LD_VAR 0 1
4523: NOT
4524: PUSH
4525: LD_VAR 0 2
4529: NOT
4530: OR
4531: IFFALSE 4535
// exit ;
4533: GO 4693
// x := GetX ( building ) ;
4535: LD_ADDR_VAR 0 5
4539: PUSH
4540: LD_VAR 0 2
4544: PPUSH
4545: CALL_OW 250
4549: ST_TO_ADDR
// y := GetY ( building ) ;
4550: LD_ADDR_VAR 0 6
4554: PUSH
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 251
4564: ST_TO_ADDR
// for i = 0 to 5 do
4565: LD_ADDR_VAR 0 4
4569: PUSH
4570: DOUBLE
4571: LD_INT 0
4573: DEC
4574: ST_TO_ADDR
4575: LD_INT 5
4577: PUSH
4578: FOR_TO
4579: IFFALSE 4691
// begin _x := ShiftX ( x , i , 3 ) ;
4581: LD_ADDR_VAR 0 7
4585: PUSH
4586: LD_VAR 0 5
4590: PPUSH
4591: LD_VAR 0 4
4595: PPUSH
4596: LD_INT 3
4598: PPUSH
4599: CALL_OW 272
4603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4604: LD_ADDR_VAR 0 8
4608: PUSH
4609: LD_VAR 0 6
4613: PPUSH
4614: LD_VAR 0 4
4618: PPUSH
4619: LD_INT 3
4621: PPUSH
4622: CALL_OW 273
4626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4627: LD_VAR 0 7
4631: PPUSH
4632: LD_VAR 0 8
4636: PPUSH
4637: CALL_OW 488
4641: NOT
4642: IFFALSE 4646
// continue ;
4644: GO 4578
// if HexInfo ( _x , _y ) = 0 then
4646: LD_VAR 0 7
4650: PPUSH
4651: LD_VAR 0 8
4655: PPUSH
4656: CALL_OW 428
4660: PUSH
4661: LD_INT 0
4663: EQUAL
4664: IFFALSE 4689
// begin ComMoveXY ( unit , _x , _y ) ;
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 7
4675: PPUSH
4676: LD_VAR 0 8
4680: PPUSH
4681: CALL_OW 111
// exit ;
4685: POP
4686: POP
4687: GO 4693
// end ; end ;
4689: GO 4578
4691: POP
4692: POP
// end ;
4693: LD_VAR 0 3
4697: RET
// export function ScanBase ( side , base_area ) ; begin
4698: LD_INT 0
4700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4701: LD_ADDR_VAR 0 3
4705: PUSH
4706: LD_VAR 0 2
4710: PPUSH
4711: LD_INT 81
4713: PUSH
4714: LD_VAR 0 1
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 70
4727: ST_TO_ADDR
// end ;
4728: LD_VAR 0 3
4732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4733: LD_INT 0
4735: PPUSH
4736: PPUSH
4737: PPUSH
4738: PPUSH
// result := false ;
4739: LD_ADDR_VAR 0 2
4743: PUSH
4744: LD_INT 0
4746: ST_TO_ADDR
// side := GetSide ( unit ) ;
4747: LD_ADDR_VAR 0 3
4751: PUSH
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL_OW 255
4761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4762: LD_ADDR_VAR 0 4
4766: PUSH
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 248
4776: ST_TO_ADDR
// case nat of 1 :
4777: LD_VAR 0 4
4781: PUSH
4782: LD_INT 1
4784: DOUBLE
4785: EQUAL
4786: IFTRUE 4790
4788: GO 4801
4790: POP
// tech := tech_lassight ; 2 :
4791: LD_ADDR_VAR 0 5
4795: PUSH
4796: LD_INT 12
4798: ST_TO_ADDR
4799: GO 4840
4801: LD_INT 2
4803: DOUBLE
4804: EQUAL
4805: IFTRUE 4809
4807: GO 4820
4809: POP
// tech := tech_mortar ; 3 :
4810: LD_ADDR_VAR 0 5
4814: PUSH
4815: LD_INT 41
4817: ST_TO_ADDR
4818: GO 4840
4820: LD_INT 3
4822: DOUBLE
4823: EQUAL
4824: IFTRUE 4828
4826: GO 4839
4828: POP
// tech := tech_bazooka ; end ;
4829: LD_ADDR_VAR 0 5
4833: PUSH
4834: LD_INT 44
4836: ST_TO_ADDR
4837: GO 4840
4839: POP
// if Researched ( side , tech ) then
4840: LD_VAR 0 3
4844: PPUSH
4845: LD_VAR 0 5
4849: PPUSH
4850: CALL_OW 325
4854: IFFALSE 4881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4856: LD_ADDR_VAR 0 2
4860: PUSH
4861: LD_INT 5
4863: PUSH
4864: LD_INT 8
4866: PUSH
4867: LD_INT 9
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: LD_VAR 0 4
4879: ARRAY
4880: ST_TO_ADDR
// end ;
4881: LD_VAR 0 2
4885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4886: LD_INT 0
4888: PPUSH
4889: PPUSH
4890: PPUSH
// if not mines then
4891: LD_VAR 0 2
4895: NOT
4896: IFFALSE 4900
// exit ;
4898: GO 5044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4900: LD_ADDR_VAR 0 5
4904: PUSH
4905: LD_INT 81
4907: PUSH
4908: LD_VAR 0 1
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: LD_INT 21
4922: PUSH
4923: LD_INT 3
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// for i in mines do
4943: LD_ADDR_VAR 0 4
4947: PUSH
4948: LD_VAR 0 2
4952: PUSH
4953: FOR_IN
4954: IFFALSE 5042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4956: LD_VAR 0 4
4960: PUSH
4961: LD_INT 1
4963: ARRAY
4964: PPUSH
4965: LD_VAR 0 4
4969: PUSH
4970: LD_INT 2
4972: ARRAY
4973: PPUSH
4974: CALL_OW 458
4978: NOT
4979: IFFALSE 4983
// continue ;
4981: GO 4953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4983: LD_VAR 0 4
4987: PUSH
4988: LD_INT 1
4990: ARRAY
4991: PPUSH
4992: LD_VAR 0 4
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 428
5005: PUSH
5006: LD_VAR 0 5
5010: IN
5011: IFFALSE 5040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5013: LD_VAR 0 4
5017: PUSH
5018: LD_INT 1
5020: ARRAY
5021: PPUSH
5022: LD_VAR 0 4
5026: PUSH
5027: LD_INT 2
5029: ARRAY
5030: PPUSH
5031: LD_VAR 0 1
5035: PPUSH
5036: CALL_OW 456
// end ;
5040: GO 4953
5042: POP
5043: POP
// end ;
5044: LD_VAR 0 3
5048: RET
// export function Count ( array ) ; begin
5049: LD_INT 0
5051: PPUSH
// result := array + 0 ;
5052: LD_ADDR_VAR 0 2
5056: PUSH
5057: LD_VAR 0 1
5061: PUSH
5062: LD_INT 0
5064: PLUS
5065: ST_TO_ADDR
// end ;
5066: LD_VAR 0 2
5070: RET
// export function IsEmpty ( building ) ; begin
5071: LD_INT 0
5073: PPUSH
// if not building then
5074: LD_VAR 0 1
5078: NOT
5079: IFFALSE 5083
// exit ;
5081: GO 5126
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5083: LD_ADDR_VAR 0 2
5087: PUSH
5088: LD_VAR 0 1
5092: PUSH
5093: LD_INT 22
5095: PUSH
5096: LD_VAR 0 1
5100: PPUSH
5101: CALL_OW 255
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 58
5112: PUSH
5113: EMPTY
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: IN
5125: ST_TO_ADDR
// end ;
5126: LD_VAR 0 2
5130: RET
// export function IsNotFull ( building ) ; var places ; begin
5131: LD_INT 0
5133: PPUSH
5134: PPUSH
// if not building then
5135: LD_VAR 0 1
5139: NOT
5140: IFFALSE 5144
// exit ;
5142: GO 5172
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5144: LD_ADDR_VAR 0 2
5148: PUSH
5149: LD_VAR 0 1
5153: PPUSH
5154: LD_INT 3
5156: PUSH
5157: LD_INT 62
5159: PUSH
5160: EMPTY
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 72
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 2
5176: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
5181: PPUSH
5182: PPUSH
// tmp := [ ] ;
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: EMPTY
5189: ST_TO_ADDR
// list := [ ] ;
5190: LD_ADDR_VAR 0 5
5194: PUSH
5195: EMPTY
5196: ST_TO_ADDR
// for i = 16 to 25 do
5197: LD_ADDR_VAR 0 4
5201: PUSH
5202: DOUBLE
5203: LD_INT 16
5205: DEC
5206: ST_TO_ADDR
5207: LD_INT 25
5209: PUSH
5210: FOR_TO
5211: IFFALSE 5284
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5213: LD_ADDR_VAR 0 3
5217: PUSH
5218: LD_VAR 0 3
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_VAR 0 1
5230: PPUSH
5231: CALL_OW 255
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 91
5242: PUSH
5243: LD_VAR 0 1
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: LIST
5255: PUSH
5256: LD_INT 30
5258: PUSH
5259: LD_VAR 0 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: EMPTY
5274: LIST
5275: PPUSH
5276: CALL_OW 69
5280: ADD
5281: ST_TO_ADDR
5282: GO 5210
5284: POP
5285: POP
// for i = 1 to tmp do
5286: LD_ADDR_VAR 0 4
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 3
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5390
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5304: LD_ADDR_VAR 0 5
5308: PUSH
5309: LD_VAR 0 5
5313: PUSH
5314: LD_VAR 0 3
5318: PUSH
5319: LD_VAR 0 4
5323: ARRAY
5324: PPUSH
5325: CALL_OW 266
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 4
5339: ARRAY
5340: PPUSH
5341: CALL_OW 250
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: LD_VAR 0 4
5355: ARRAY
5356: PPUSH
5357: CALL_OW 251
5361: PUSH
5362: LD_VAR 0 3
5366: PUSH
5367: LD_VAR 0 4
5371: ARRAY
5372: PPUSH
5373: CALL_OW 254
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: PUSH
5384: EMPTY
5385: LIST
5386: ADD
5387: ST_TO_ADDR
5388: GO 5301
5390: POP
5391: POP
// result := list ;
5392: LD_ADDR_VAR 0 2
5396: PUSH
5397: LD_VAR 0 5
5401: ST_TO_ADDR
// end ;
5402: LD_VAR 0 2
5406: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
// if not factory then
5416: LD_VAR 0 1
5420: NOT
5421: IFFALSE 5425
// exit ;
5423: GO 6018
// if control = control_apeman then
5425: LD_VAR 0 4
5429: PUSH
5430: LD_INT 5
5432: EQUAL
5433: IFFALSE 5542
// begin tmp := UnitsInside ( factory ) ;
5435: LD_ADDR_VAR 0 8
5439: PUSH
5440: LD_VAR 0 1
5444: PPUSH
5445: CALL_OW 313
5449: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5450: LD_VAR 0 8
5454: PPUSH
5455: LD_INT 25
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 72
5469: NOT
5470: IFFALSE 5480
// control := control_manual ;
5472: LD_ADDR_VAR 0 4
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5480: LD_ADDR_VAR 0 8
5484: PUSH
5485: LD_VAR 0 1
5489: PPUSH
5490: CALL 5177 0 1
5494: ST_TO_ADDR
// if tmp then
5495: LD_VAR 0 8
5499: IFFALSE 5542
// begin for i in tmp do
5501: LD_ADDR_VAR 0 7
5505: PUSH
5506: LD_VAR 0 8
5510: PUSH
5511: FOR_IN
5512: IFFALSE 5540
// if i [ 1 ] = b_ext_radio then
5514: LD_VAR 0 7
5518: PUSH
5519: LD_INT 1
5521: ARRAY
5522: PUSH
5523: LD_INT 22
5525: EQUAL
5526: IFFALSE 5538
// begin control := control_remote ;
5528: LD_ADDR_VAR 0 4
5532: PUSH
5533: LD_INT 2
5535: ST_TO_ADDR
// break ;
5536: GO 5540
// end ;
5538: GO 5511
5540: POP
5541: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5542: LD_VAR 0 1
5546: PPUSH
5547: LD_VAR 0 2
5551: PPUSH
5552: LD_VAR 0 3
5556: PPUSH
5557: LD_VAR 0 4
5561: PPUSH
5562: LD_VAR 0 5
5566: PPUSH
5567: CALL_OW 448
5571: IFFALSE 5606
// begin result := [ chassis , engine , control , weapon ] ;
5573: LD_ADDR_VAR 0 6
5577: PUSH
5578: LD_VAR 0 2
5582: PUSH
5583: LD_VAR 0 3
5587: PUSH
5588: LD_VAR 0 4
5592: PUSH
5593: LD_VAR 0 5
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: ST_TO_ADDR
// exit ;
5604: GO 6018
// end ; _chassis := AvailableChassisList ( factory ) ;
5606: LD_ADDR_VAR 0 9
5610: PUSH
5611: LD_VAR 0 1
5615: PPUSH
5616: CALL_OW 475
5620: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5621: LD_ADDR_VAR 0 11
5625: PUSH
5626: LD_VAR 0 1
5630: PPUSH
5631: CALL_OW 476
5635: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5636: LD_ADDR_VAR 0 12
5640: PUSH
5641: LD_VAR 0 1
5645: PPUSH
5646: CALL_OW 477
5650: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5651: LD_ADDR_VAR 0 10
5655: PUSH
5656: LD_VAR 0 1
5660: PPUSH
5661: CALL_OW 478
5665: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5666: LD_VAR 0 9
5670: NOT
5671: PUSH
5672: LD_VAR 0 11
5676: NOT
5677: OR
5678: PUSH
5679: LD_VAR 0 12
5683: NOT
5684: OR
5685: PUSH
5686: LD_VAR 0 10
5690: NOT
5691: OR
5692: IFFALSE 5727
// begin result := [ chassis , engine , control , weapon ] ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_VAR 0 2
5703: PUSH
5704: LD_VAR 0 3
5708: PUSH
5709: LD_VAR 0 4
5713: PUSH
5714: LD_VAR 0 5
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: ST_TO_ADDR
// exit ;
5725: GO 6018
// end ; if not chassis in _chassis then
5727: LD_VAR 0 2
5731: PUSH
5732: LD_VAR 0 9
5736: IN
5737: NOT
5738: IFFALSE 5764
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5740: LD_ADDR_VAR 0 2
5744: PUSH
5745: LD_VAR 0 9
5749: PUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_VAR 0 9
5757: PPUSH
5758: CALL_OW 12
5762: ARRAY
5763: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL 6023 0 2
5778: NOT
5779: IFFALSE 5838
// repeat engine := _engine [ 1 ] ;
5781: LD_ADDR_VAR 0 3
5785: PUSH
5786: LD_VAR 0 11
5790: PUSH
5791: LD_INT 1
5793: ARRAY
5794: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5795: LD_ADDR_VAR 0 11
5799: PUSH
5800: LD_VAR 0 11
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: CALL_OW 3
5812: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5813: LD_VAR 0 2
5817: PPUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: CALL 6023 0 2
5827: PUSH
5828: LD_VAR 0 11
5832: PUSH
5833: EMPTY
5834: EQUAL
5835: OR
5836: IFFALSE 5781
// if not control in _control then
5838: LD_VAR 0 4
5842: PUSH
5843: LD_VAR 0 12
5847: IN
5848: NOT
5849: IFFALSE 5875
// control := _control [ rand ( 1 , _control ) ] ;
5851: LD_ADDR_VAR 0 4
5855: PUSH
5856: LD_VAR 0 12
5860: PUSH
5861: LD_INT 1
5863: PPUSH
5864: LD_VAR 0 12
5868: PPUSH
5869: CALL_OW 12
5873: ARRAY
5874: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5875: LD_VAR 0 2
5879: PPUSH
5880: LD_VAR 0 5
5884: PPUSH
5885: CALL 6243 0 2
5889: NOT
5890: IFFALSE 5949
// repeat weapon := _weapon [ 1 ] ;
5892: LD_ADDR_VAR 0 5
5896: PUSH
5897: LD_VAR 0 10
5901: PUSH
5902: LD_INT 1
5904: ARRAY
5905: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5906: LD_ADDR_VAR 0 10
5910: PUSH
5911: LD_VAR 0 10
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 3
5923: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5924: LD_VAR 0 2
5928: PPUSH
5929: LD_VAR 0 5
5933: PPUSH
5934: CALL 6243 0 2
5938: PUSH
5939: LD_VAR 0 10
5943: PUSH
5944: EMPTY
5945: EQUAL
5946: OR
5947: IFFALSE 5892
// result := [ ] ;
5949: LD_ADDR_VAR 0 6
5953: PUSH
5954: EMPTY
5955: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_VAR 0 3
5970: PPUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: LD_VAR 0 5
5980: PPUSH
5981: CALL_OW 448
5985: IFFALSE 6018
// result := [ chassis , engine , control , weapon ] ;
5987: LD_ADDR_VAR 0 6
5991: PUSH
5992: LD_VAR 0 2
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: LD_VAR 0 4
6006: PUSH
6007: LD_VAR 0 5
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: ST_TO_ADDR
// end ;
6018: LD_VAR 0 6
6022: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6023: LD_INT 0
6025: PPUSH
// if not chassis or not engine then
6026: LD_VAR 0 1
6030: NOT
6031: PUSH
6032: LD_VAR 0 2
6036: NOT
6037: OR
6038: IFFALSE 6042
// exit ;
6040: GO 6238
// case engine of engine_solar :
6042: LD_VAR 0 2
6046: PUSH
6047: LD_INT 2
6049: DOUBLE
6050: EQUAL
6051: IFTRUE 6055
6053: GO 6093
6055: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6056: LD_ADDR_VAR 0 3
6060: PUSH
6061: LD_INT 11
6063: PUSH
6064: LD_INT 12
6066: PUSH
6067: LD_INT 13
6069: PUSH
6070: LD_INT 14
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: ST_TO_ADDR
6091: GO 6222
6093: LD_INT 1
6095: DOUBLE
6096: EQUAL
6097: IFTRUE 6101
6099: GO 6163
6101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6102: LD_ADDR_VAR 0 3
6106: PUSH
6107: LD_INT 11
6109: PUSH
6110: LD_INT 12
6112: PUSH
6113: LD_INT 13
6115: PUSH
6116: LD_INT 14
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: LD_INT 5
6133: PUSH
6134: LD_INT 21
6136: PUSH
6137: LD_INT 23
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 24
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: ST_TO_ADDR
6161: GO 6222
6163: LD_INT 3
6165: DOUBLE
6166: EQUAL
6167: IFTRUE 6171
6169: GO 6221
6171: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6172: LD_ADDR_VAR 0 3
6176: PUSH
6177: LD_INT 13
6179: PUSH
6180: LD_INT 14
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 3
6188: PUSH
6189: LD_INT 4
6191: PUSH
6192: LD_INT 5
6194: PUSH
6195: LD_INT 21
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_INT 23
6203: PUSH
6204: LD_INT 24
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: ST_TO_ADDR
6219: GO 6222
6221: POP
// result := ( chassis in result ) ;
6222: LD_ADDR_VAR 0 3
6226: PUSH
6227: LD_VAR 0 1
6231: PUSH
6232: LD_VAR 0 3
6236: IN
6237: ST_TO_ADDR
// end ;
6238: LD_VAR 0 3
6242: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6243: LD_INT 0
6245: PPUSH
// if not chassis or not weapon then
6246: LD_VAR 0 1
6250: NOT
6251: PUSH
6252: LD_VAR 0 2
6256: NOT
6257: OR
6258: IFFALSE 6262
// exit ;
6260: GO 7322
// case weapon of us_machine_gun :
6262: LD_VAR 0 2
6266: PUSH
6267: LD_INT 2
6269: DOUBLE
6270: EQUAL
6271: IFTRUE 6275
6273: GO 6305
6275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_INT 1
6283: PUSH
6284: LD_INT 2
6286: PUSH
6287: LD_INT 3
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: LD_INT 5
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: ST_TO_ADDR
6303: GO 7306
6305: LD_INT 3
6307: DOUBLE
6308: EQUAL
6309: IFTRUE 6313
6311: GO 6343
6313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6314: LD_ADDR_VAR 0 3
6318: PUSH
6319: LD_INT 1
6321: PUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 3
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 5
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: ST_TO_ADDR
6341: GO 7306
6343: LD_INT 11
6345: DOUBLE
6346: EQUAL
6347: IFTRUE 6351
6349: GO 6381
6351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6352: LD_ADDR_VAR 0 3
6356: PUSH
6357: LD_INT 1
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: ST_TO_ADDR
6379: GO 7306
6381: LD_INT 4
6383: DOUBLE
6384: EQUAL
6385: IFTRUE 6389
6387: GO 6415
6389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6390: LD_ADDR_VAR 0 3
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 4
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: ST_TO_ADDR
6413: GO 7306
6415: LD_INT 5
6417: DOUBLE
6418: EQUAL
6419: IFTRUE 6423
6421: GO 6449
6423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6424: LD_ADDR_VAR 0 3
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 4
6437: PUSH
6438: LD_INT 5
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: ST_TO_ADDR
6447: GO 7306
6449: LD_INT 9
6451: DOUBLE
6452: EQUAL
6453: IFTRUE 6457
6455: GO 6483
6457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_INT 2
6465: PUSH
6466: LD_INT 3
6468: PUSH
6469: LD_INT 4
6471: PUSH
6472: LD_INT 5
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 7306
6483: LD_INT 7
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6517
6491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 4
6505: PUSH
6506: LD_INT 5
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: ST_TO_ADDR
6515: GO 7306
6517: LD_INT 12
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6551
6525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_INT 2
6533: PUSH
6534: LD_INT 3
6536: PUSH
6537: LD_INT 4
6539: PUSH
6540: LD_INT 5
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: ST_TO_ADDR
6549: GO 7306
6551: LD_INT 13
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6585
6559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6560: LD_ADDR_VAR 0 3
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 3
6570: PUSH
6571: LD_INT 4
6573: PUSH
6574: LD_INT 5
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: ST_TO_ADDR
6583: GO 7306
6585: LD_INT 14
6587: DOUBLE
6588: EQUAL
6589: IFTRUE 6593
6591: GO 6611
6593: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6594: LD_ADDR_VAR 0 3
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: LD_INT 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: ST_TO_ADDR
6609: GO 7306
6611: LD_INT 6
6613: DOUBLE
6614: EQUAL
6615: IFTRUE 6619
6617: GO 6637
6619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6620: LD_ADDR_VAR 0 3
6624: PUSH
6625: LD_INT 4
6627: PUSH
6628: LD_INT 5
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: ST_TO_ADDR
6635: GO 7306
6637: LD_INT 10
6639: DOUBLE
6640: EQUAL
6641: IFTRUE 6645
6643: GO 6663
6645: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6646: LD_ADDR_VAR 0 3
6650: PUSH
6651: LD_INT 4
6653: PUSH
6654: LD_INT 5
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: ST_TO_ADDR
6661: GO 7306
6663: LD_INT 22
6665: DOUBLE
6666: EQUAL
6667: IFTRUE 6671
6669: GO 6697
6671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6672: LD_ADDR_VAR 0 3
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: LD_INT 12
6682: PUSH
6683: LD_INT 13
6685: PUSH
6686: LD_INT 14
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: ST_TO_ADDR
6695: GO 7306
6697: LD_INT 23
6699: DOUBLE
6700: EQUAL
6701: IFTRUE 6705
6703: GO 6731
6705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: LD_INT 11
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: LD_INT 13
6719: PUSH
6720: LD_INT 14
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: ST_TO_ADDR
6729: GO 7306
6731: LD_INT 24
6733: DOUBLE
6734: EQUAL
6735: IFTRUE 6739
6737: GO 6765
6739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6740: LD_ADDR_VAR 0 3
6744: PUSH
6745: LD_INT 11
6747: PUSH
6748: LD_INT 12
6750: PUSH
6751: LD_INT 13
6753: PUSH
6754: LD_INT 14
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: ST_TO_ADDR
6763: GO 7306
6765: LD_INT 30
6767: DOUBLE
6768: EQUAL
6769: IFTRUE 6773
6771: GO 6799
6773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: LD_INT 11
6781: PUSH
6782: LD_INT 12
6784: PUSH
6785: LD_INT 13
6787: PUSH
6788: LD_INT 14
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 7306
6799: LD_INT 25
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6825
6807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_INT 13
6815: PUSH
6816: LD_INT 14
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: ST_TO_ADDR
6823: GO 7306
6825: LD_INT 27
6827: DOUBLE
6828: EQUAL
6829: IFTRUE 6833
6831: GO 6851
6833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6834: LD_ADDR_VAR 0 3
6838: PUSH
6839: LD_INT 13
6841: PUSH
6842: LD_INT 14
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: ST_TO_ADDR
6849: GO 7306
6851: LD_INT 92
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6885
6859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6860: LD_ADDR_VAR 0 3
6864: PUSH
6865: LD_INT 11
6867: PUSH
6868: LD_INT 12
6870: PUSH
6871: LD_INT 13
6873: PUSH
6874: LD_INT 14
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: ST_TO_ADDR
6883: GO 7306
6885: LD_INT 28
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6893
6891: GO 6911
6893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: LD_INT 13
6901: PUSH
6902: LD_INT 14
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: ST_TO_ADDR
6909: GO 7306
6911: LD_INT 29
6913: DOUBLE
6914: EQUAL
6915: IFTRUE 6919
6917: GO 6937
6919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6920: LD_ADDR_VAR 0 3
6924: PUSH
6925: LD_INT 13
6927: PUSH
6928: LD_INT 14
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: ST_TO_ADDR
6935: GO 7306
6937: LD_INT 31
6939: DOUBLE
6940: EQUAL
6941: IFTRUE 6945
6943: GO 6963
6945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6946: LD_ADDR_VAR 0 3
6950: PUSH
6951: LD_INT 13
6953: PUSH
6954: LD_INT 14
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 7306
6963: LD_INT 26
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 6989
6971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: LD_INT 13
6979: PUSH
6980: LD_INT 14
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: ST_TO_ADDR
6987: GO 7306
6989: LD_INT 42
6991: DOUBLE
6992: EQUAL
6993: IFTRUE 6997
6995: GO 7023
6997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_INT 23
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 7306
7023: LD_INT 43
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7057
7031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_INT 21
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 23
7045: PUSH
7046: LD_INT 24
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: ST_TO_ADDR
7055: GO 7306
7057: LD_INT 44
7059: DOUBLE
7060: EQUAL
7061: IFTRUE 7065
7063: GO 7091
7065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7066: LD_ADDR_VAR 0 3
7070: PUSH
7071: LD_INT 21
7073: PUSH
7074: LD_INT 22
7076: PUSH
7077: LD_INT 23
7079: PUSH
7080: LD_INT 24
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: ST_TO_ADDR
7089: GO 7306
7091: LD_INT 45
7093: DOUBLE
7094: EQUAL
7095: IFTRUE 7099
7097: GO 7125
7099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7100: LD_ADDR_VAR 0 3
7104: PUSH
7105: LD_INT 21
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_INT 23
7113: PUSH
7114: LD_INT 24
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: ST_TO_ADDR
7123: GO 7306
7125: LD_INT 49
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7159
7133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7134: LD_ADDR_VAR 0 3
7138: PUSH
7139: LD_INT 21
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_INT 23
7147: PUSH
7148: LD_INT 24
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: ST_TO_ADDR
7157: GO 7306
7159: LD_INT 51
7161: DOUBLE
7162: EQUAL
7163: IFTRUE 7167
7165: GO 7193
7167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7168: LD_ADDR_VAR 0 3
7172: PUSH
7173: LD_INT 21
7175: PUSH
7176: LD_INT 22
7178: PUSH
7179: LD_INT 23
7181: PUSH
7182: LD_INT 24
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: ST_TO_ADDR
7191: GO 7306
7193: LD_INT 52
7195: DOUBLE
7196: EQUAL
7197: IFTRUE 7201
7199: GO 7227
7201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7202: LD_ADDR_VAR 0 3
7206: PUSH
7207: LD_INT 21
7209: PUSH
7210: LD_INT 22
7212: PUSH
7213: LD_INT 23
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: ST_TO_ADDR
7225: GO 7306
7227: LD_INT 53
7229: DOUBLE
7230: EQUAL
7231: IFTRUE 7235
7233: GO 7253
7235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7236: LD_ADDR_VAR 0 3
7240: PUSH
7241: LD_INT 23
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: ST_TO_ADDR
7251: GO 7306
7253: LD_INT 46
7255: DOUBLE
7256: EQUAL
7257: IFTRUE 7261
7259: GO 7279
7261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_INT 23
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: ST_TO_ADDR
7277: GO 7306
7279: LD_INT 47
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7305
7287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: LD_INT 23
7295: PUSH
7296: LD_INT 24
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: ST_TO_ADDR
7303: GO 7306
7305: POP
// result := ( chassis in result ) ;
7306: LD_ADDR_VAR 0 3
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: LD_VAR 0 3
7320: IN
7321: ST_TO_ADDR
// end ;
7322: LD_VAR 0 3
7326: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7327: LD_INT 0
7329: PPUSH
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
7335: PPUSH
// result := array ;
7336: LD_ADDR_VAR 0 5
7340: PUSH
7341: LD_VAR 0 1
7345: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7346: LD_VAR 0 1
7350: NOT
7351: PUSH
7352: LD_VAR 0 2
7356: NOT
7357: OR
7358: PUSH
7359: LD_VAR 0 3
7363: NOT
7364: OR
7365: PUSH
7366: LD_VAR 0 2
7370: PUSH
7371: LD_VAR 0 1
7375: GREATER
7376: OR
7377: PUSH
7378: LD_VAR 0 3
7382: PUSH
7383: LD_VAR 0 1
7387: GREATER
7388: OR
7389: IFFALSE 7393
// exit ;
7391: GO 7689
// if direction then
7393: LD_VAR 0 4
7397: IFFALSE 7461
// begin d := 1 ;
7399: LD_ADDR_VAR 0 9
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// if i_from > i_to then
7407: LD_VAR 0 2
7411: PUSH
7412: LD_VAR 0 3
7416: GREATER
7417: IFFALSE 7443
// length := ( array - i_from ) + i_to else
7419: LD_ADDR_VAR 0 11
7423: PUSH
7424: LD_VAR 0 1
7428: PUSH
7429: LD_VAR 0 2
7433: MINUS
7434: PUSH
7435: LD_VAR 0 3
7439: PLUS
7440: ST_TO_ADDR
7441: GO 7459
// length := i_to - i_from ;
7443: LD_ADDR_VAR 0 11
7447: PUSH
7448: LD_VAR 0 3
7452: PUSH
7453: LD_VAR 0 2
7457: MINUS
7458: ST_TO_ADDR
// end else
7459: GO 7522
// begin d := - 1 ;
7461: LD_ADDR_VAR 0 9
7465: PUSH
7466: LD_INT 1
7468: NEG
7469: ST_TO_ADDR
// if i_from > i_to then
7470: LD_VAR 0 2
7474: PUSH
7475: LD_VAR 0 3
7479: GREATER
7480: IFFALSE 7500
// length := i_from - i_to else
7482: LD_ADDR_VAR 0 11
7486: PUSH
7487: LD_VAR 0 2
7491: PUSH
7492: LD_VAR 0 3
7496: MINUS
7497: ST_TO_ADDR
7498: GO 7522
// length := ( array - i_to ) + i_from ;
7500: LD_ADDR_VAR 0 11
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: LD_VAR 0 3
7514: MINUS
7515: PUSH
7516: LD_VAR 0 2
7520: PLUS
7521: ST_TO_ADDR
// end ; if not length then
7522: LD_VAR 0 11
7526: NOT
7527: IFFALSE 7531
// exit ;
7529: GO 7689
// tmp := array ;
7531: LD_ADDR_VAR 0 10
7535: PUSH
7536: LD_VAR 0 1
7540: ST_TO_ADDR
// for i = 1 to length do
7541: LD_ADDR_VAR 0 6
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_VAR 0 11
7555: PUSH
7556: FOR_TO
7557: IFFALSE 7677
// begin for j = 1 to array do
7559: LD_ADDR_VAR 0 7
7563: PUSH
7564: DOUBLE
7565: LD_INT 1
7567: DEC
7568: ST_TO_ADDR
7569: LD_VAR 0 1
7573: PUSH
7574: FOR_TO
7575: IFFALSE 7663
// begin k := j + d ;
7577: LD_ADDR_VAR 0 8
7581: PUSH
7582: LD_VAR 0 7
7586: PUSH
7587: LD_VAR 0 9
7591: PLUS
7592: ST_TO_ADDR
// if k > array then
7593: LD_VAR 0 8
7597: PUSH
7598: LD_VAR 0 1
7602: GREATER
7603: IFFALSE 7613
// k := 1 ;
7605: LD_ADDR_VAR 0 8
7609: PUSH
7610: LD_INT 1
7612: ST_TO_ADDR
// if not k then
7613: LD_VAR 0 8
7617: NOT
7618: IFFALSE 7630
// k := array ;
7620: LD_ADDR_VAR 0 8
7624: PUSH
7625: LD_VAR 0 1
7629: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7630: LD_ADDR_VAR 0 10
7634: PUSH
7635: LD_VAR 0 10
7639: PPUSH
7640: LD_VAR 0 8
7644: PPUSH
7645: LD_VAR 0 1
7649: PUSH
7650: LD_VAR 0 7
7654: ARRAY
7655: PPUSH
7656: CALL_OW 1
7660: ST_TO_ADDR
// end ;
7661: GO 7574
7663: POP
7664: POP
// array := tmp ;
7665: LD_ADDR_VAR 0 1
7669: PUSH
7670: LD_VAR 0 10
7674: ST_TO_ADDR
// end ;
7675: GO 7556
7677: POP
7678: POP
// result := array ;
7679: LD_ADDR_VAR 0 5
7683: PUSH
7684: LD_VAR 0 1
7688: ST_TO_ADDR
// end ;
7689: LD_VAR 0 5
7693: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7694: LD_INT 0
7696: PPUSH
7697: PPUSH
// result := 0 ;
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_INT 0
7705: ST_TO_ADDR
// if not array or not value in array then
7706: LD_VAR 0 1
7710: NOT
7711: PUSH
7712: LD_VAR 0 2
7716: PUSH
7717: LD_VAR 0 1
7721: IN
7722: NOT
7723: OR
7724: IFFALSE 7728
// exit ;
7726: GO 7782
// for i = 1 to array do
7728: LD_ADDR_VAR 0 4
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_VAR 0 1
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7780
// if value = array [ i ] then
7746: LD_VAR 0 2
7750: PUSH
7751: LD_VAR 0 1
7755: PUSH
7756: LD_VAR 0 4
7760: ARRAY
7761: EQUAL
7762: IFFALSE 7778
// begin result := i ;
7764: LD_ADDR_VAR 0 3
7768: PUSH
7769: LD_VAR 0 4
7773: ST_TO_ADDR
// exit ;
7774: POP
7775: POP
7776: GO 7782
// end ;
7778: GO 7743
7780: POP
7781: POP
// end ;
7782: LD_VAR 0 3
7786: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7787: LD_INT 0
7789: PPUSH
// vc_chassis := chassis ;
7790: LD_ADDR_OWVAR 37
7794: PUSH
7795: LD_VAR 0 1
7799: ST_TO_ADDR
// vc_engine := engine ;
7800: LD_ADDR_OWVAR 39
7804: PUSH
7805: LD_VAR 0 2
7809: ST_TO_ADDR
// vc_control := control ;
7810: LD_ADDR_OWVAR 38
7814: PUSH
7815: LD_VAR 0 3
7819: ST_TO_ADDR
// vc_weapon := weapon ;
7820: LD_ADDR_OWVAR 40
7824: PUSH
7825: LD_VAR 0 4
7829: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7830: LD_ADDR_OWVAR 41
7834: PUSH
7835: LD_VAR 0 5
7839: ST_TO_ADDR
// end ;
7840: LD_VAR 0 6
7844: RET
// export function WantPlant ( unit ) ; var task ; begin
7845: LD_INT 0
7847: PPUSH
7848: PPUSH
// result := false ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: LD_INT 0
7856: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7857: LD_ADDR_VAR 0 3
7861: PUSH
7862: LD_VAR 0 1
7866: PPUSH
7867: CALL_OW 437
7871: ST_TO_ADDR
// if task then
7872: LD_VAR 0 3
7876: IFFALSE 7904
// if task [ 1 ] [ 1 ] = p then
7878: LD_VAR 0 3
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PUSH
7891: LD_STRING p
7893: EQUAL
7894: IFFALSE 7904
// result := true ;
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// end ;
7904: LD_VAR 0 2
7908: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7909: LD_INT 0
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
// if pos < 1 then
7915: LD_VAR 0 2
7919: PUSH
7920: LD_INT 1
7922: LESS
7923: IFFALSE 7927
// exit ;
7925: GO 8230
// if pos = 1 then
7927: LD_VAR 0 2
7931: PUSH
7932: LD_INT 1
7934: EQUAL
7935: IFFALSE 7968
// result := Replace ( arr , pos [ 1 ] , value ) else
7937: LD_ADDR_VAR 0 4
7941: PUSH
7942: LD_VAR 0 1
7946: PPUSH
7947: LD_VAR 0 2
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 3
7960: PPUSH
7961: CALL_OW 1
7965: ST_TO_ADDR
7966: GO 8230
// begin tmp := arr ;
7968: LD_ADDR_VAR 0 6
7972: PUSH
7973: LD_VAR 0 1
7977: ST_TO_ADDR
// s_arr := [ tmp ] ;
7978: LD_ADDR_VAR 0 7
7982: PUSH
7983: LD_VAR 0 6
7987: PUSH
7988: EMPTY
7989: LIST
7990: ST_TO_ADDR
// for i = 1 to pos - 1 do
7991: LD_ADDR_VAR 0 5
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_VAR 0 2
8005: PUSH
8006: LD_INT 1
8008: MINUS
8009: PUSH
8010: FOR_TO
8011: IFFALSE 8056
// begin tmp := tmp [ pos [ i ] ] ;
8013: LD_ADDR_VAR 0 6
8017: PUSH
8018: LD_VAR 0 6
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: LD_VAR 0 5
8032: ARRAY
8033: ARRAY
8034: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8035: LD_ADDR_VAR 0 7
8039: PUSH
8040: LD_VAR 0 7
8044: PUSH
8045: LD_VAR 0 6
8049: PUSH
8050: EMPTY
8051: LIST
8052: ADD
8053: ST_TO_ADDR
// end ;
8054: GO 8010
8056: POP
8057: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8058: LD_ADDR_VAR 0 6
8062: PUSH
8063: LD_VAR 0 6
8067: PPUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_VAR 0 2
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 3
8083: PPUSH
8084: CALL_OW 1
8088: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8089: LD_ADDR_VAR 0 7
8093: PUSH
8094: LD_VAR 0 7
8098: PPUSH
8099: LD_VAR 0 7
8103: PPUSH
8104: LD_VAR 0 6
8108: PPUSH
8109: CALL_OW 1
8113: ST_TO_ADDR
// for i = s_arr downto 2 do
8114: LD_ADDR_VAR 0 5
8118: PUSH
8119: DOUBLE
8120: LD_VAR 0 7
8124: INC
8125: ST_TO_ADDR
8126: LD_INT 2
8128: PUSH
8129: FOR_DOWNTO
8130: IFFALSE 8214
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8132: LD_ADDR_VAR 0 6
8136: PUSH
8137: LD_VAR 0 7
8141: PUSH
8142: LD_VAR 0 5
8146: PUSH
8147: LD_INT 1
8149: MINUS
8150: ARRAY
8151: PPUSH
8152: LD_VAR 0 2
8156: PUSH
8157: LD_VAR 0 5
8161: PUSH
8162: LD_INT 1
8164: MINUS
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 7
8171: PUSH
8172: LD_VAR 0 5
8176: ARRAY
8177: PPUSH
8178: CALL_OW 1
8182: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8183: LD_ADDR_VAR 0 7
8187: PUSH
8188: LD_VAR 0 7
8192: PPUSH
8193: LD_VAR 0 5
8197: PUSH
8198: LD_INT 1
8200: MINUS
8201: PPUSH
8202: LD_VAR 0 6
8206: PPUSH
8207: CALL_OW 1
8211: ST_TO_ADDR
// end ;
8212: GO 8129
8214: POP
8215: POP
// result := s_arr [ 1 ] ;
8216: LD_ADDR_VAR 0 4
8220: PUSH
8221: LD_VAR 0 7
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: ST_TO_ADDR
// end ; end ;
8230: LD_VAR 0 4
8234: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8235: LD_INT 0
8237: PPUSH
8238: PPUSH
// if not list then
8239: LD_VAR 0 1
8243: NOT
8244: IFFALSE 8248
// exit ;
8246: GO 8339
// i := list [ pos1 ] ;
8248: LD_ADDR_VAR 0 5
8252: PUSH
8253: LD_VAR 0 1
8257: PUSH
8258: LD_VAR 0 2
8262: ARRAY
8263: ST_TO_ADDR
// if not i then
8264: LD_VAR 0 5
8268: NOT
8269: IFFALSE 8273
// exit ;
8271: GO 8339
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8273: LD_ADDR_VAR 0 1
8277: PUSH
8278: LD_VAR 0 1
8282: PPUSH
8283: LD_VAR 0 2
8287: PPUSH
8288: LD_VAR 0 1
8292: PUSH
8293: LD_VAR 0 3
8297: ARRAY
8298: PPUSH
8299: CALL_OW 1
8303: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8304: LD_ADDR_VAR 0 1
8308: PUSH
8309: LD_VAR 0 1
8313: PPUSH
8314: LD_VAR 0 3
8318: PPUSH
8319: LD_VAR 0 5
8323: PPUSH
8324: CALL_OW 1
8328: ST_TO_ADDR
// result := list ;
8329: LD_ADDR_VAR 0 4
8333: PUSH
8334: LD_VAR 0 1
8338: ST_TO_ADDR
// end ;
8339: LD_VAR 0 4
8343: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8344: LD_INT 0
8346: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8347: LD_ADDR_VAR 0 5
8351: PUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 250
8361: PPUSH
8362: LD_VAR 0 1
8366: PPUSH
8367: CALL_OW 251
8371: PPUSH
8372: LD_VAR 0 2
8376: PPUSH
8377: LD_VAR 0 3
8381: PPUSH
8382: LD_VAR 0 4
8386: PPUSH
8387: CALL 8765 0 5
8391: ST_TO_ADDR
// end ;
8392: LD_VAR 0 5
8396: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
8401: PPUSH
8402: PPUSH
// if not list or not unit then
8403: LD_VAR 0 2
8407: NOT
8408: PUSH
8409: LD_VAR 0 1
8413: NOT
8414: OR
8415: IFFALSE 8419
// exit ;
8417: GO 8760
// result := [ ] ;
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: EMPTY
8425: ST_TO_ADDR
// for i in list do
8426: LD_ADDR_VAR 0 6
8430: PUSH
8431: LD_VAR 0 2
8435: PUSH
8436: FOR_IN
8437: IFFALSE 8655
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8439: LD_ADDR_VAR 0 8
8443: PUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 1
8456: ARRAY
8457: PPUSH
8458: LD_VAR 0 6
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: PPUSH
8467: CALL_OW 297
8471: ST_TO_ADDR
// if not Count ( result ) then
8472: LD_VAR 0 5
8476: PPUSH
8477: CALL 5049 0 1
8481: NOT
8482: IFFALSE 8515
// begin result := Join ( result , [ i , tmp ] ) ;
8484: LD_ADDR_VAR 0 5
8488: PUSH
8489: LD_VAR 0 5
8493: PPUSH
8494: LD_VAR 0 6
8498: PUSH
8499: LD_VAR 0 8
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: CALL 40658 0 2
8512: ST_TO_ADDR
// continue ;
8513: GO 8436
// end ; if result [ result ] [ 2 ] <= tmp then
8515: LD_VAR 0 5
8519: PUSH
8520: LD_VAR 0 5
8524: ARRAY
8525: PUSH
8526: LD_INT 2
8528: ARRAY
8529: PUSH
8530: LD_VAR 0 8
8534: LESSEQUAL
8535: IFFALSE 8568
// result := Join ( result , [ i , tmp ] ) else
8537: LD_ADDR_VAR 0 5
8541: PUSH
8542: LD_VAR 0 5
8546: PPUSH
8547: LD_VAR 0 6
8551: PUSH
8552: LD_VAR 0 8
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL 40658 0 2
8565: ST_TO_ADDR
8566: GO 8653
// begin for j := 1 to Count ( result ) do
8568: LD_ADDR_VAR 0 7
8572: PUSH
8573: DOUBLE
8574: LD_INT 1
8576: DEC
8577: ST_TO_ADDR
8578: LD_VAR 0 5
8582: PPUSH
8583: CALL 5049 0 1
8587: PUSH
8588: FOR_TO
8589: IFFALSE 8651
// begin if tmp < result [ j ] [ 2 ] then
8591: LD_VAR 0 8
8595: PUSH
8596: LD_VAR 0 5
8600: PUSH
8601: LD_VAR 0 7
8605: ARRAY
8606: PUSH
8607: LD_INT 2
8609: ARRAY
8610: LESS
8611: IFFALSE 8649
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8613: LD_ADDR_VAR 0 5
8617: PUSH
8618: LD_VAR 0 5
8622: PPUSH
8623: LD_VAR 0 7
8627: PPUSH
8628: LD_VAR 0 6
8632: PUSH
8633: LD_VAR 0 8
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 2
8646: ST_TO_ADDR
// break ;
8647: GO 8651
// end ; end ;
8649: GO 8588
8651: POP
8652: POP
// end ; end ;
8653: GO 8436
8655: POP
8656: POP
// if result and not asc then
8657: LD_VAR 0 5
8661: PUSH
8662: LD_VAR 0 3
8666: NOT
8667: AND
8668: IFFALSE 8685
// result := ReverseArray ( result ) ;
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: LD_VAR 0 5
8679: PPUSH
8680: CALL 35925 0 1
8684: ST_TO_ADDR
// tmp := [ ] ;
8685: LD_ADDR_VAR 0 8
8689: PUSH
8690: EMPTY
8691: ST_TO_ADDR
// if mode then
8692: LD_VAR 0 4
8696: IFFALSE 8760
// begin for i := 1 to result do
8698: LD_ADDR_VAR 0 6
8702: PUSH
8703: DOUBLE
8704: LD_INT 1
8706: DEC
8707: ST_TO_ADDR
8708: LD_VAR 0 5
8712: PUSH
8713: FOR_TO
8714: IFFALSE 8748
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8716: LD_ADDR_VAR 0 8
8720: PUSH
8721: LD_VAR 0 8
8725: PPUSH
8726: LD_VAR 0 5
8730: PUSH
8731: LD_VAR 0 6
8735: ARRAY
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL 40658 0 2
8745: ST_TO_ADDR
8746: GO 8713
8748: POP
8749: POP
// result := tmp ;
8750: LD_ADDR_VAR 0 5
8754: PUSH
8755: LD_VAR 0 8
8759: ST_TO_ADDR
// end ; end ;
8760: LD_VAR 0 5
8764: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8765: LD_INT 0
8767: PPUSH
8768: PPUSH
8769: PPUSH
8770: PPUSH
// if not list then
8771: LD_VAR 0 3
8775: NOT
8776: IFFALSE 8780
// exit ;
8778: GO 9168
// result := [ ] ;
8780: LD_ADDR_VAR 0 6
8784: PUSH
8785: EMPTY
8786: ST_TO_ADDR
// for i in list do
8787: LD_ADDR_VAR 0 7
8791: PUSH
8792: LD_VAR 0 3
8796: PUSH
8797: FOR_IN
8798: IFFALSE 9000
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8800: LD_ADDR_VAR 0 9
8804: PUSH
8805: LD_VAR 0 7
8809: PPUSH
8810: LD_VAR 0 1
8814: PPUSH
8815: LD_VAR 0 2
8819: PPUSH
8820: CALL_OW 297
8824: ST_TO_ADDR
// if not result then
8825: LD_VAR 0 6
8829: NOT
8830: IFFALSE 8856
// result := [ [ i , tmp ] ] else
8832: LD_ADDR_VAR 0 6
8836: PUSH
8837: LD_VAR 0 7
8841: PUSH
8842: LD_VAR 0 9
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: ST_TO_ADDR
8854: GO 8998
// begin if result [ result ] [ 2 ] <= tmp then
8856: LD_VAR 0 6
8860: PUSH
8861: LD_VAR 0 6
8865: ARRAY
8866: PUSH
8867: LD_INT 2
8869: ARRAY
8870: PUSH
8871: LD_VAR 0 9
8875: LESSEQUAL
8876: IFFALSE 8918
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8878: LD_ADDR_VAR 0 6
8882: PUSH
8883: LD_VAR 0 6
8887: PPUSH
8888: LD_VAR 0 6
8892: PUSH
8893: LD_INT 1
8895: PLUS
8896: PPUSH
8897: LD_VAR 0 7
8901: PUSH
8902: LD_VAR 0 9
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PPUSH
8911: CALL_OW 2
8915: ST_TO_ADDR
8916: GO 8998
// for j := 1 to result do
8918: LD_ADDR_VAR 0 8
8922: PUSH
8923: DOUBLE
8924: LD_INT 1
8926: DEC
8927: ST_TO_ADDR
8928: LD_VAR 0 6
8932: PUSH
8933: FOR_TO
8934: IFFALSE 8996
// begin if tmp < result [ j ] [ 2 ] then
8936: LD_VAR 0 9
8940: PUSH
8941: LD_VAR 0 6
8945: PUSH
8946: LD_VAR 0 8
8950: ARRAY
8951: PUSH
8952: LD_INT 2
8954: ARRAY
8955: LESS
8956: IFFALSE 8994
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8958: LD_ADDR_VAR 0 6
8962: PUSH
8963: LD_VAR 0 6
8967: PPUSH
8968: LD_VAR 0 8
8972: PPUSH
8973: LD_VAR 0 7
8977: PUSH
8978: LD_VAR 0 9
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 2
8991: ST_TO_ADDR
// break ;
8992: GO 8996
// end ; end ;
8994: GO 8933
8996: POP
8997: POP
// end ; end ;
8998: GO 8797
9000: POP
9001: POP
// if result and not asc then
9002: LD_VAR 0 6
9006: PUSH
9007: LD_VAR 0 4
9011: NOT
9012: AND
9013: IFFALSE 9088
// begin tmp := result ;
9015: LD_ADDR_VAR 0 9
9019: PUSH
9020: LD_VAR 0 6
9024: ST_TO_ADDR
// for i = tmp downto 1 do
9025: LD_ADDR_VAR 0 7
9029: PUSH
9030: DOUBLE
9031: LD_VAR 0 9
9035: INC
9036: ST_TO_ADDR
9037: LD_INT 1
9039: PUSH
9040: FOR_DOWNTO
9041: IFFALSE 9086
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_VAR 0 6
9052: PPUSH
9053: LD_VAR 0 9
9057: PUSH
9058: LD_VAR 0 7
9062: MINUS
9063: PUSH
9064: LD_INT 1
9066: PLUS
9067: PPUSH
9068: LD_VAR 0 9
9072: PUSH
9073: LD_VAR 0 7
9077: ARRAY
9078: PPUSH
9079: CALL_OW 1
9083: ST_TO_ADDR
9084: GO 9040
9086: POP
9087: POP
// end ; tmp := [ ] ;
9088: LD_ADDR_VAR 0 9
9092: PUSH
9093: EMPTY
9094: ST_TO_ADDR
// if mode then
9095: LD_VAR 0 5
9099: IFFALSE 9168
// begin for i = 1 to result do
9101: LD_ADDR_VAR 0 7
9105: PUSH
9106: DOUBLE
9107: LD_INT 1
9109: DEC
9110: ST_TO_ADDR
9111: LD_VAR 0 6
9115: PUSH
9116: FOR_TO
9117: IFFALSE 9156
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9119: LD_ADDR_VAR 0 9
9123: PUSH
9124: LD_VAR 0 9
9128: PPUSH
9129: LD_VAR 0 7
9133: PPUSH
9134: LD_VAR 0 6
9138: PUSH
9139: LD_VAR 0 7
9143: ARRAY
9144: PUSH
9145: LD_INT 1
9147: ARRAY
9148: PPUSH
9149: CALL_OW 1
9153: ST_TO_ADDR
9154: GO 9116
9156: POP
9157: POP
// result := tmp ;
9158: LD_ADDR_VAR 0 6
9162: PUSH
9163: LD_VAR 0 9
9167: ST_TO_ADDR
// end ; end ;
9168: LD_VAR 0 6
9172: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9173: LD_INT 0
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_INT 0
9188: PUSH
9189: LD_INT 0
9191: PUSH
9192: LD_INT 0
9194: PUSH
9195: EMPTY
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: ST_TO_ADDR
// if not x or not y then
9203: LD_VAR 0 2
9207: NOT
9208: PUSH
9209: LD_VAR 0 3
9213: NOT
9214: OR
9215: IFFALSE 9219
// exit ;
9217: GO 10869
// if not range then
9219: LD_VAR 0 4
9223: NOT
9224: IFFALSE 9234
// range := 10 ;
9226: LD_ADDR_VAR 0 4
9230: PUSH
9231: LD_INT 10
9233: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9234: LD_ADDR_VAR 0 8
9238: PUSH
9239: LD_INT 81
9241: PUSH
9242: LD_VAR 0 1
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 92
9253: PUSH
9254: LD_VAR 0 2
9258: PUSH
9259: LD_VAR 0 3
9263: PUSH
9264: LD_VAR 0 4
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 3
9277: PUSH
9278: LD_INT 21
9280: PUSH
9281: LD_INT 3
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: PPUSH
9297: CALL_OW 69
9301: ST_TO_ADDR
// if not tmp then
9302: LD_VAR 0 8
9306: NOT
9307: IFFALSE 9311
// exit ;
9309: GO 10869
// for i in tmp do
9311: LD_ADDR_VAR 0 6
9315: PUSH
9316: LD_VAR 0 8
9320: PUSH
9321: FOR_IN
9322: IFFALSE 10844
// begin points := [ 0 , 0 , 0 ] ;
9324: LD_ADDR_VAR 0 9
9328: PUSH
9329: LD_INT 0
9331: PUSH
9332: LD_INT 0
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: ST_TO_ADDR
// bpoints := 1 ;
9343: LD_ADDR_VAR 0 10
9347: PUSH
9348: LD_INT 1
9350: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9351: LD_VAR 0 6
9355: PPUSH
9356: CALL_OW 247
9360: PUSH
9361: LD_INT 1
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9947
9369: POP
// begin if GetClass ( i ) = 1 then
9370: LD_VAR 0 6
9374: PPUSH
9375: CALL_OW 257
9379: PUSH
9380: LD_INT 1
9382: EQUAL
9383: IFFALSE 9404
// points := [ 10 , 5 , 3 ] ;
9385: LD_ADDR_VAR 0 9
9389: PUSH
9390: LD_INT 10
9392: PUSH
9393: LD_INT 5
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9404: LD_VAR 0 6
9408: PPUSH
9409: CALL_OW 257
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: IN
9428: IFFALSE 9449
// points := [ 3 , 2 , 1 ] ;
9430: LD_ADDR_VAR 0 9
9434: PUSH
9435: LD_INT 3
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: LD_INT 1
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9449: LD_VAR 0 6
9453: PPUSH
9454: CALL_OW 257
9458: PUSH
9459: LD_INT 5
9461: EQUAL
9462: IFFALSE 9483
// points := [ 130 , 5 , 2 ] ;
9464: LD_ADDR_VAR 0 9
9468: PUSH
9469: LD_INT 130
9471: PUSH
9472: LD_INT 5
9474: PUSH
9475: LD_INT 2
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9483: LD_VAR 0 6
9487: PPUSH
9488: CALL_OW 257
9492: PUSH
9493: LD_INT 8
9495: EQUAL
9496: IFFALSE 9517
// points := [ 35 , 35 , 30 ] ;
9498: LD_ADDR_VAR 0 9
9502: PUSH
9503: LD_INT 35
9505: PUSH
9506: LD_INT 35
9508: PUSH
9509: LD_INT 30
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9517: LD_VAR 0 6
9521: PPUSH
9522: CALL_OW 257
9526: PUSH
9527: LD_INT 9
9529: EQUAL
9530: IFFALSE 9551
// points := [ 20 , 55 , 40 ] ;
9532: LD_ADDR_VAR 0 9
9536: PUSH
9537: LD_INT 20
9539: PUSH
9540: LD_INT 55
9542: PUSH
9543: LD_INT 40
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9551: LD_VAR 0 6
9555: PPUSH
9556: CALL_OW 257
9560: PUSH
9561: LD_INT 12
9563: PUSH
9564: LD_INT 16
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: IN
9571: IFFALSE 9592
// points := [ 5 , 3 , 2 ] ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_INT 5
9580: PUSH
9581: LD_INT 3
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9592: LD_VAR 0 6
9596: PPUSH
9597: CALL_OW 257
9601: PUSH
9602: LD_INT 17
9604: EQUAL
9605: IFFALSE 9626
// points := [ 100 , 50 , 75 ] ;
9607: LD_ADDR_VAR 0 9
9611: PUSH
9612: LD_INT 100
9614: PUSH
9615: LD_INT 50
9617: PUSH
9618: LD_INT 75
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9626: LD_VAR 0 6
9630: PPUSH
9631: CALL_OW 257
9635: PUSH
9636: LD_INT 15
9638: EQUAL
9639: IFFALSE 9660
// points := [ 10 , 5 , 3 ] ;
9641: LD_ADDR_VAR 0 9
9645: PUSH
9646: LD_INT 10
9648: PUSH
9649: LD_INT 5
9651: PUSH
9652: LD_INT 3
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9660: LD_VAR 0 6
9664: PPUSH
9665: CALL_OW 257
9669: PUSH
9670: LD_INT 14
9672: EQUAL
9673: IFFALSE 9694
// points := [ 10 , 0 , 0 ] ;
9675: LD_ADDR_VAR 0 9
9679: PUSH
9680: LD_INT 10
9682: PUSH
9683: LD_INT 0
9685: PUSH
9686: LD_INT 0
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9694: LD_VAR 0 6
9698: PPUSH
9699: CALL_OW 257
9703: PUSH
9704: LD_INT 11
9706: EQUAL
9707: IFFALSE 9728
// points := [ 30 , 10 , 5 ] ;
9709: LD_ADDR_VAR 0 9
9713: PUSH
9714: LD_INT 30
9716: PUSH
9717: LD_INT 10
9719: PUSH
9720: LD_INT 5
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9728: LD_VAR 0 1
9732: PPUSH
9733: LD_INT 5
9735: PPUSH
9736: CALL_OW 321
9740: PUSH
9741: LD_INT 2
9743: EQUAL
9744: IFFALSE 9761
// bpoints := bpoints * 1.8 ;
9746: LD_ADDR_VAR 0 10
9750: PUSH
9751: LD_VAR 0 10
9755: PUSH
9756: LD_REAL  1.80000000000000E+0000
9759: MUL
9760: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9761: LD_VAR 0 6
9765: PPUSH
9766: CALL_OW 257
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 4
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: IN
9789: PUSH
9790: LD_VAR 0 1
9794: PPUSH
9795: LD_INT 51
9797: PPUSH
9798: CALL_OW 321
9802: PUSH
9803: LD_INT 2
9805: EQUAL
9806: AND
9807: IFFALSE 9824
// bpoints := bpoints * 1.2 ;
9809: LD_ADDR_VAR 0 10
9813: PUSH
9814: LD_VAR 0 10
9818: PUSH
9819: LD_REAL  1.20000000000000E+0000
9822: MUL
9823: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9824: LD_VAR 0 6
9828: PPUSH
9829: CALL_OW 257
9833: PUSH
9834: LD_INT 5
9836: PUSH
9837: LD_INT 7
9839: PUSH
9840: LD_INT 9
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: IN
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: LD_INT 52
9856: PPUSH
9857: CALL_OW 321
9861: PUSH
9862: LD_INT 2
9864: EQUAL
9865: AND
9866: IFFALSE 9883
// bpoints := bpoints * 1.5 ;
9868: LD_ADDR_VAR 0 10
9872: PUSH
9873: LD_VAR 0 10
9877: PUSH
9878: LD_REAL  1.50000000000000E+0000
9881: MUL
9882: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9883: LD_VAR 0 1
9887: PPUSH
9888: LD_INT 66
9890: PPUSH
9891: CALL_OW 321
9895: PUSH
9896: LD_INT 2
9898: EQUAL
9899: IFFALSE 9916
// bpoints := bpoints * 1.1 ;
9901: LD_ADDR_VAR 0 10
9905: PUSH
9906: LD_VAR 0 10
9910: PUSH
9911: LD_REAL  1.10000000000000E+0000
9914: MUL
9915: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9916: LD_ADDR_VAR 0 10
9920: PUSH
9921: LD_VAR 0 10
9925: PUSH
9926: LD_VAR 0 6
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 259
9938: PUSH
9939: LD_REAL  1.15000000000000E+0000
9942: MUL
9943: MUL
9944: ST_TO_ADDR
// end ; unit_vehicle :
9945: GO 10773
9947: LD_INT 2
9949: DOUBLE
9950: EQUAL
9951: IFTRUE 9955
9953: GO 10761
9955: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9956: LD_VAR 0 6
9960: PPUSH
9961: CALL_OW 264
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_INT 42
9971: PUSH
9972: LD_INT 24
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: LIST
9979: IN
9980: IFFALSE 10001
// points := [ 25 , 5 , 3 ] ;
9982: LD_ADDR_VAR 0 9
9986: PUSH
9987: LD_INT 25
9989: PUSH
9990: LD_INT 5
9992: PUSH
9993: LD_INT 3
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10001: LD_VAR 0 6
10005: PPUSH
10006: CALL_OW 264
10010: PUSH
10011: LD_INT 4
10013: PUSH
10014: LD_INT 43
10016: PUSH
10017: LD_INT 25
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: IN
10025: IFFALSE 10046
// points := [ 40 , 15 , 5 ] ;
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_INT 40
10034: PUSH
10035: LD_INT 15
10037: PUSH
10038: LD_INT 5
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10046: LD_VAR 0 6
10050: PPUSH
10051: CALL_OW 264
10055: PUSH
10056: LD_INT 3
10058: PUSH
10059: LD_INT 23
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: IN
10066: IFFALSE 10087
// points := [ 7 , 25 , 8 ] ;
10068: LD_ADDR_VAR 0 9
10072: PUSH
10073: LD_INT 7
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 8
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10087: LD_VAR 0 6
10091: PPUSH
10092: CALL_OW 264
10096: PUSH
10097: LD_INT 5
10099: PUSH
10100: LD_INT 27
10102: PUSH
10103: LD_INT 44
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: IN
10111: IFFALSE 10132
// points := [ 14 , 50 , 16 ] ;
10113: LD_ADDR_VAR 0 9
10117: PUSH
10118: LD_INT 14
10120: PUSH
10121: LD_INT 50
10123: PUSH
10124: LD_INT 16
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: LIST
10131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10132: LD_VAR 0 6
10136: PPUSH
10137: CALL_OW 264
10141: PUSH
10142: LD_INT 6
10144: PUSH
10145: LD_INT 46
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: IN
10152: IFFALSE 10173
// points := [ 32 , 120 , 70 ] ;
10154: LD_ADDR_VAR 0 9
10158: PUSH
10159: LD_INT 32
10161: PUSH
10162: LD_INT 120
10164: PUSH
10165: LD_INT 70
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10173: LD_VAR 0 6
10177: PPUSH
10178: CALL_OW 264
10182: PUSH
10183: LD_INT 7
10185: PUSH
10186: LD_INT 28
10188: PUSH
10189: LD_INT 45
10191: PUSH
10192: LD_INT 92
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: IN
10201: IFFALSE 10222
// points := [ 35 , 20 , 45 ] ;
10203: LD_ADDR_VAR 0 9
10207: PUSH
10208: LD_INT 35
10210: PUSH
10211: LD_INT 20
10213: PUSH
10214: LD_INT 45
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10222: LD_VAR 0 6
10226: PPUSH
10227: CALL_OW 264
10231: PUSH
10232: LD_INT 47
10234: PUSH
10235: EMPTY
10236: LIST
10237: IN
10238: IFFALSE 10259
// points := [ 67 , 45 , 75 ] ;
10240: LD_ADDR_VAR 0 9
10244: PUSH
10245: LD_INT 67
10247: PUSH
10248: LD_INT 45
10250: PUSH
10251: LD_INT 75
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: LIST
10258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10259: LD_VAR 0 6
10263: PPUSH
10264: CALL_OW 264
10268: PUSH
10269: LD_INT 26
10271: PUSH
10272: EMPTY
10273: LIST
10274: IN
10275: IFFALSE 10296
// points := [ 120 , 30 , 80 ] ;
10277: LD_ADDR_VAR 0 9
10281: PUSH
10282: LD_INT 120
10284: PUSH
10285: LD_INT 30
10287: PUSH
10288: LD_INT 80
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10296: LD_VAR 0 6
10300: PPUSH
10301: CALL_OW 264
10305: PUSH
10306: LD_INT 22
10308: PUSH
10309: EMPTY
10310: LIST
10311: IN
10312: IFFALSE 10333
// points := [ 40 , 1 , 1 ] ;
10314: LD_ADDR_VAR 0 9
10318: PUSH
10319: LD_INT 40
10321: PUSH
10322: LD_INT 1
10324: PUSH
10325: LD_INT 1
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10333: LD_VAR 0 6
10337: PPUSH
10338: CALL_OW 264
10342: PUSH
10343: LD_INT 29
10345: PUSH
10346: EMPTY
10347: LIST
10348: IN
10349: IFFALSE 10370
// points := [ 70 , 200 , 400 ] ;
10351: LD_ADDR_VAR 0 9
10355: PUSH
10356: LD_INT 70
10358: PUSH
10359: LD_INT 200
10361: PUSH
10362: LD_INT 400
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10370: LD_VAR 0 6
10374: PPUSH
10375: CALL_OW 264
10379: PUSH
10380: LD_INT 14
10382: PUSH
10383: LD_INT 53
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: IN
10390: IFFALSE 10411
// points := [ 40 , 10 , 20 ] ;
10392: LD_ADDR_VAR 0 9
10396: PUSH
10397: LD_INT 40
10399: PUSH
10400: LD_INT 10
10402: PUSH
10403: LD_INT 20
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10411: LD_VAR 0 6
10415: PPUSH
10416: CALL_OW 264
10420: PUSH
10421: LD_INT 9
10423: PUSH
10424: EMPTY
10425: LIST
10426: IN
10427: IFFALSE 10448
// points := [ 5 , 70 , 20 ] ;
10429: LD_ADDR_VAR 0 9
10433: PUSH
10434: LD_INT 5
10436: PUSH
10437: LD_INT 70
10439: PUSH
10440: LD_INT 20
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10448: LD_VAR 0 6
10452: PPUSH
10453: CALL_OW 264
10457: PUSH
10458: LD_INT 10
10460: PUSH
10461: EMPTY
10462: LIST
10463: IN
10464: IFFALSE 10485
// points := [ 35 , 110 , 70 ] ;
10466: LD_ADDR_VAR 0 9
10470: PUSH
10471: LD_INT 35
10473: PUSH
10474: LD_INT 110
10476: PUSH
10477: LD_INT 70
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10485: LD_VAR 0 6
10489: PPUSH
10490: CALL_OW 265
10494: PUSH
10495: LD_INT 25
10497: EQUAL
10498: IFFALSE 10519
// points := [ 80 , 65 , 100 ] ;
10500: LD_ADDR_VAR 0 9
10504: PUSH
10505: LD_INT 80
10507: PUSH
10508: LD_INT 65
10510: PUSH
10511: LD_INT 100
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10519: LD_VAR 0 6
10523: PPUSH
10524: CALL_OW 263
10528: PUSH
10529: LD_INT 1
10531: EQUAL
10532: IFFALSE 10567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10534: LD_ADDR_VAR 0 10
10538: PUSH
10539: LD_VAR 0 10
10543: PUSH
10544: LD_VAR 0 6
10548: PPUSH
10549: CALL_OW 311
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: CALL_OW 259
10561: PUSH
10562: LD_INT 4
10564: MUL
10565: MUL
10566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10567: LD_VAR 0 6
10571: PPUSH
10572: CALL_OW 263
10576: PUSH
10577: LD_INT 2
10579: EQUAL
10580: IFFALSE 10631
// begin j := IsControledBy ( i ) ;
10582: LD_ADDR_VAR 0 7
10586: PUSH
10587: LD_VAR 0 6
10591: PPUSH
10592: CALL_OW 312
10596: ST_TO_ADDR
// if j then
10597: LD_VAR 0 7
10601: IFFALSE 10631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10603: LD_ADDR_VAR 0 10
10607: PUSH
10608: LD_VAR 0 10
10612: PUSH
10613: LD_VAR 0 7
10617: PPUSH
10618: LD_INT 3
10620: PPUSH
10621: CALL_OW 259
10625: PUSH
10626: LD_INT 3
10628: MUL
10629: MUL
10630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10631: LD_VAR 0 6
10635: PPUSH
10636: CALL_OW 264
10640: PUSH
10641: LD_INT 5
10643: PUSH
10644: LD_INT 6
10646: PUSH
10647: LD_INT 46
10649: PUSH
10650: LD_INT 44
10652: PUSH
10653: LD_INT 47
10655: PUSH
10656: LD_INT 45
10658: PUSH
10659: LD_INT 28
10661: PUSH
10662: LD_INT 7
10664: PUSH
10665: LD_INT 27
10667: PUSH
10668: LD_INT 29
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: IN
10683: PUSH
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_INT 52
10691: PPUSH
10692: CALL_OW 321
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: AND
10701: IFFALSE 10718
// bpoints := bpoints * 1.2 ;
10703: LD_ADDR_VAR 0 10
10707: PUSH
10708: LD_VAR 0 10
10712: PUSH
10713: LD_REAL  1.20000000000000E+0000
10716: MUL
10717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10718: LD_VAR 0 6
10722: PPUSH
10723: CALL_OW 264
10727: PUSH
10728: LD_INT 6
10730: PUSH
10731: LD_INT 46
10733: PUSH
10734: LD_INT 47
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: IN
10742: IFFALSE 10759
// bpoints := bpoints * 1.2 ;
10744: LD_ADDR_VAR 0 10
10748: PUSH
10749: LD_VAR 0 10
10753: PUSH
10754: LD_REAL  1.20000000000000E+0000
10757: MUL
10758: ST_TO_ADDR
// end ; unit_building :
10759: GO 10773
10761: LD_INT 3
10763: DOUBLE
10764: EQUAL
10765: IFTRUE 10769
10767: GO 10772
10769: POP
// ; end ;
10770: GO 10773
10772: POP
// for j = 1 to 3 do
10773: LD_ADDR_VAR 0 7
10777: PUSH
10778: DOUBLE
10779: LD_INT 1
10781: DEC
10782: ST_TO_ADDR
10783: LD_INT 3
10785: PUSH
10786: FOR_TO
10787: IFFALSE 10840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10789: LD_ADDR_VAR 0 5
10793: PUSH
10794: LD_VAR 0 5
10798: PPUSH
10799: LD_VAR 0 7
10803: PPUSH
10804: LD_VAR 0 5
10808: PUSH
10809: LD_VAR 0 7
10813: ARRAY
10814: PUSH
10815: LD_VAR 0 9
10819: PUSH
10820: LD_VAR 0 7
10824: ARRAY
10825: PUSH
10826: LD_VAR 0 10
10830: MUL
10831: PLUS
10832: PPUSH
10833: CALL_OW 1
10837: ST_TO_ADDR
10838: GO 10786
10840: POP
10841: POP
// end ;
10842: GO 9321
10844: POP
10845: POP
// result := Replace ( result , 4 , tmp ) ;
10846: LD_ADDR_VAR 0 5
10850: PUSH
10851: LD_VAR 0 5
10855: PPUSH
10856: LD_INT 4
10858: PPUSH
10859: LD_VAR 0 8
10863: PPUSH
10864: CALL_OW 1
10868: ST_TO_ADDR
// end ;
10869: LD_VAR 0 5
10873: RET
// export function DangerAtRange ( unit , range ) ; begin
10874: LD_INT 0
10876: PPUSH
// if not unit then
10877: LD_VAR 0 1
10881: NOT
10882: IFFALSE 10886
// exit ;
10884: GO 10931
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10886: LD_ADDR_VAR 0 3
10890: PUSH
10891: LD_VAR 0 1
10895: PPUSH
10896: CALL_OW 255
10900: PPUSH
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL_OW 250
10910: PPUSH
10911: LD_VAR 0 1
10915: PPUSH
10916: CALL_OW 251
10920: PPUSH
10921: LD_VAR 0 2
10925: PPUSH
10926: CALL 9173 0 4
10930: ST_TO_ADDR
// end ;
10931: LD_VAR 0 3
10935: RET
// export function DangerInArea ( side , area ) ; begin
10936: LD_INT 0
10938: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10939: LD_ADDR_VAR 0 3
10943: PUSH
10944: LD_VAR 0 2
10948: PPUSH
10949: LD_INT 81
10951: PUSH
10952: LD_VAR 0 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PPUSH
10961: CALL_OW 70
10965: ST_TO_ADDR
// end ;
10966: LD_VAR 0 3
10970: RET
// export function IsExtension ( b ) ; begin
10971: LD_INT 0
10973: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10974: LD_ADDR_VAR 0 2
10978: PUSH
10979: LD_VAR 0 1
10983: PUSH
10984: LD_INT 23
10986: PUSH
10987: LD_INT 20
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_INT 17
10995: PUSH
10996: LD_INT 24
10998: PUSH
10999: LD_INT 21
11001: PUSH
11002: LD_INT 19
11004: PUSH
11005: LD_INT 16
11007: PUSH
11008: LD_INT 25
11010: PUSH
11011: LD_INT 18
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: IN
11026: ST_TO_ADDR
// end ;
11027: LD_VAR 0 2
11031: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
11036: PPUSH
// result := [ ] ;
11037: LD_ADDR_VAR 0 4
11041: PUSH
11042: EMPTY
11043: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11044: LD_ADDR_VAR 0 5
11048: PUSH
11049: LD_VAR 0 2
11053: PPUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 3
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 70
11068: ST_TO_ADDR
// if not tmp then
11069: LD_VAR 0 5
11073: NOT
11074: IFFALSE 11078
// exit ;
11076: GO 11142
// if checkLink then
11078: LD_VAR 0 3
11082: IFFALSE 11132
// begin for i in tmp do
11084: LD_ADDR_VAR 0 6
11088: PUSH
11089: LD_VAR 0 5
11093: PUSH
11094: FOR_IN
11095: IFFALSE 11130
// if GetBase ( i ) <> base then
11097: LD_VAR 0 6
11101: PPUSH
11102: CALL_OW 274
11106: PUSH
11107: LD_VAR 0 1
11111: NONEQUAL
11112: IFFALSE 11128
// ComLinkToBase ( base , i ) ;
11114: LD_VAR 0 1
11118: PPUSH
11119: LD_VAR 0 6
11123: PPUSH
11124: CALL_OW 169
11128: GO 11094
11130: POP
11131: POP
// end ; result := tmp ;
11132: LD_ADDR_VAR 0 4
11136: PUSH
11137: LD_VAR 0 5
11141: ST_TO_ADDR
// end ;
11142: LD_VAR 0 4
11146: RET
// export function ComComplete ( units , b ) ; var i ; begin
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
// if not units then
11151: LD_VAR 0 1
11155: NOT
11156: IFFALSE 11160
// exit ;
11158: GO 11250
// for i in units do
11160: LD_ADDR_VAR 0 4
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: FOR_IN
11171: IFFALSE 11248
// if BuildingStatus ( b ) = bs_build then
11173: LD_VAR 0 2
11177: PPUSH
11178: CALL_OW 461
11182: PUSH
11183: LD_INT 1
11185: EQUAL
11186: IFFALSE 11246
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11188: LD_VAR 0 4
11192: PPUSH
11193: LD_STRING h
11195: PUSH
11196: LD_VAR 0 2
11200: PPUSH
11201: CALL_OW 250
11205: PUSH
11206: LD_VAR 0 2
11210: PPUSH
11211: CALL_OW 251
11215: PUSH
11216: LD_VAR 0 2
11220: PUSH
11221: LD_INT 0
11223: PUSH
11224: LD_INT 0
11226: PUSH
11227: LD_INT 0
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: PPUSH
11242: CALL_OW 446
11246: GO 11170
11248: POP
11249: POP
// end ;
11250: LD_VAR 0 3
11254: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11255: LD_INT 0
11257: PPUSH
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11263: LD_VAR 0 1
11267: NOT
11268: PUSH
11269: LD_VAR 0 1
11273: PPUSH
11274: CALL_OW 263
11278: PUSH
11279: LD_INT 2
11281: NONEQUAL
11282: OR
11283: IFFALSE 11287
// exit ;
11285: GO 11603
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11287: LD_ADDR_VAR 0 6
11291: PUSH
11292: LD_INT 22
11294: PUSH
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL_OW 255
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 30
11314: PUSH
11315: LD_INT 36
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 34
11324: PUSH
11325: LD_INT 31
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: ST_TO_ADDR
// if not tmp then
11346: LD_VAR 0 6
11350: NOT
11351: IFFALSE 11355
// exit ;
11353: GO 11603
// result := [ ] ;
11355: LD_ADDR_VAR 0 2
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in tmp do
11362: LD_ADDR_VAR 0 3
11366: PUSH
11367: LD_VAR 0 6
11371: PUSH
11372: FOR_IN
11373: IFFALSE 11444
// begin t := UnitsInside ( i ) ;
11375: LD_ADDR_VAR 0 4
11379: PUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: CALL_OW 313
11389: ST_TO_ADDR
// if t then
11390: LD_VAR 0 4
11394: IFFALSE 11442
// for j in t do
11396: LD_ADDR_VAR 0 7
11400: PUSH
11401: LD_VAR 0 4
11405: PUSH
11406: FOR_IN
11407: IFFALSE 11440
// result := Replace ( result , result + 1 , j ) ;
11409: LD_ADDR_VAR 0 2
11413: PUSH
11414: LD_VAR 0 2
11418: PPUSH
11419: LD_VAR 0 2
11423: PUSH
11424: LD_INT 1
11426: PLUS
11427: PPUSH
11428: LD_VAR 0 7
11432: PPUSH
11433: CALL_OW 1
11437: ST_TO_ADDR
11438: GO 11406
11440: POP
11441: POP
// end ;
11442: GO 11372
11444: POP
11445: POP
// if not result then
11446: LD_VAR 0 2
11450: NOT
11451: IFFALSE 11455
// exit ;
11453: GO 11603
// mech := result [ 1 ] ;
11455: LD_ADDR_VAR 0 5
11459: PUSH
11460: LD_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: ARRAY
11468: ST_TO_ADDR
// if result > 1 then
11469: LD_VAR 0 2
11473: PUSH
11474: LD_INT 1
11476: GREATER
11477: IFFALSE 11589
// begin for i = 2 to result do
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: DOUBLE
11485: LD_INT 2
11487: DEC
11488: ST_TO_ADDR
11489: LD_VAR 0 2
11493: PUSH
11494: FOR_TO
11495: IFFALSE 11587
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11497: LD_ADDR_VAR 0 4
11501: PUSH
11502: LD_VAR 0 2
11506: PUSH
11507: LD_VAR 0 3
11511: ARRAY
11512: PPUSH
11513: LD_INT 3
11515: PPUSH
11516: CALL_OW 259
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: LD_VAR 0 3
11530: ARRAY
11531: PPUSH
11532: CALL_OW 432
11536: MINUS
11537: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11538: LD_VAR 0 4
11542: PUSH
11543: LD_VAR 0 5
11547: PPUSH
11548: LD_INT 3
11550: PPUSH
11551: CALL_OW 259
11555: PUSH
11556: LD_VAR 0 5
11560: PPUSH
11561: CALL_OW 432
11565: MINUS
11566: GREATEREQUAL
11567: IFFALSE 11585
// mech := result [ i ] ;
11569: LD_ADDR_VAR 0 5
11573: PUSH
11574: LD_VAR 0 2
11578: PUSH
11579: LD_VAR 0 3
11583: ARRAY
11584: ST_TO_ADDR
// end ;
11585: GO 11494
11587: POP
11588: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11589: LD_VAR 0 1
11593: PPUSH
11594: LD_VAR 0 5
11598: PPUSH
11599: CALL_OW 135
// end ;
11603: LD_VAR 0 2
11607: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11608: LD_INT 0
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
11620: PPUSH
11621: PPUSH
11622: PPUSH
// result := [ ] ;
11623: LD_ADDR_VAR 0 7
11627: PUSH
11628: EMPTY
11629: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 266
11639: PUSH
11640: LD_INT 0
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: IN
11650: NOT
11651: IFFALSE 11655
// exit ;
11653: GO 13289
// if name then
11655: LD_VAR 0 3
11659: IFFALSE 11675
// SetBName ( base_dep , name ) ;
11661: LD_VAR 0 1
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: CALL_OW 500
// base := GetBase ( base_dep ) ;
11675: LD_ADDR_VAR 0 15
11679: PUSH
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 274
11689: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11690: LD_ADDR_VAR 0 16
11694: PUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 255
11704: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11705: LD_ADDR_VAR 0 17
11709: PUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: CALL_OW 248
11719: ST_TO_ADDR
// if sources then
11720: LD_VAR 0 5
11724: IFFALSE 11771
// for i = 1 to 3 do
11726: LD_ADDR_VAR 0 8
11730: PUSH
11731: DOUBLE
11732: LD_INT 1
11734: DEC
11735: ST_TO_ADDR
11736: LD_INT 3
11738: PUSH
11739: FOR_TO
11740: IFFALSE 11769
// AddResourceType ( base , i , sources [ i ] ) ;
11742: LD_VAR 0 15
11746: PPUSH
11747: LD_VAR 0 8
11751: PPUSH
11752: LD_VAR 0 5
11756: PUSH
11757: LD_VAR 0 8
11761: ARRAY
11762: PPUSH
11763: CALL_OW 276
11767: GO 11739
11769: POP
11770: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11771: LD_ADDR_VAR 0 18
11775: PUSH
11776: LD_VAR 0 15
11780: PPUSH
11781: LD_VAR 0 2
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL 11032 0 3
11793: ST_TO_ADDR
// InitHc ;
11794: CALL_OW 19
// InitUc ;
11798: CALL_OW 18
// uc_side := side ;
11802: LD_ADDR_OWVAR 20
11806: PUSH
11807: LD_VAR 0 16
11811: ST_TO_ADDR
// uc_nation := nation ;
11812: LD_ADDR_OWVAR 21
11816: PUSH
11817: LD_VAR 0 17
11821: ST_TO_ADDR
// if buildings then
11822: LD_VAR 0 18
11826: IFFALSE 13148
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11828: LD_ADDR_VAR 0 19
11832: PUSH
11833: LD_VAR 0 18
11837: PPUSH
11838: LD_INT 2
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 29
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 30
11853: PUSH
11854: LD_INT 30
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 72
11870: ST_TO_ADDR
// if tmp then
11871: LD_VAR 0 19
11875: IFFALSE 11923
// for i in tmp do
11877: LD_ADDR_VAR 0 8
11881: PUSH
11882: LD_VAR 0 19
11886: PUSH
11887: FOR_IN
11888: IFFALSE 11921
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11890: LD_VAR 0 8
11894: PPUSH
11895: CALL_OW 250
11899: PPUSH
11900: LD_VAR 0 8
11904: PPUSH
11905: CALL_OW 251
11909: PPUSH
11910: LD_VAR 0 16
11914: PPUSH
11915: CALL_OW 441
11919: GO 11887
11921: POP
11922: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11923: LD_VAR 0 18
11927: PPUSH
11928: LD_INT 2
11930: PUSH
11931: LD_INT 30
11933: PUSH
11934: LD_INT 32
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 33
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: IFFALSE 12048
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11962: LD_ADDR_VAR 0 8
11966: PUSH
11967: LD_VAR 0 18
11971: PPUSH
11972: LD_INT 2
11974: PUSH
11975: LD_INT 30
11977: PUSH
11978: LD_INT 32
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 30
11987: PUSH
11988: LD_INT 33
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 72
12004: PUSH
12005: FOR_IN
12006: IFFALSE 12046
// begin if not GetBWeapon ( i ) then
12008: LD_VAR 0 8
12012: PPUSH
12013: CALL_OW 269
12017: NOT
12018: IFFALSE 12044
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12020: LD_VAR 0 8
12024: PPUSH
12025: LD_VAR 0 8
12029: PPUSH
12030: LD_VAR 0 2
12034: PPUSH
12035: CALL 13294 0 2
12039: PPUSH
12040: CALL_OW 431
// end ;
12044: GO 12005
12046: POP
12047: POP
// end ; for i = 1 to personel do
12048: LD_ADDR_VAR 0 8
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_VAR 0 6
12062: PUSH
12063: FOR_TO
12064: IFFALSE 13128
// begin if i > 4 then
12066: LD_VAR 0 8
12070: PUSH
12071: LD_INT 4
12073: GREATER
12074: IFFALSE 12078
// break ;
12076: GO 13128
// case i of 1 :
12078: LD_VAR 0 8
12082: PUSH
12083: LD_INT 1
12085: DOUBLE
12086: EQUAL
12087: IFTRUE 12091
12089: GO 12171
12091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12092: LD_ADDR_VAR 0 12
12096: PUSH
12097: LD_VAR 0 18
12101: PPUSH
12102: LD_INT 22
12104: PUSH
12105: LD_VAR 0 16
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 58
12116: PUSH
12117: EMPTY
12118: LIST
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 32
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_INT 4
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 30
12145: PUSH
12146: LD_INT 5
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 72
12168: ST_TO_ADDR
12169: GO 12393
12171: LD_INT 2
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12241
12179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12180: LD_ADDR_VAR 0 12
12184: PUSH
12185: LD_VAR 0 18
12189: PPUSH
12190: LD_INT 22
12192: PUSH
12193: LD_VAR 0 16
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 2
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 0
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 30
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 72
12238: ST_TO_ADDR
12239: GO 12393
12241: LD_INT 3
12243: DOUBLE
12244: EQUAL
12245: IFTRUE 12249
12247: GO 12311
12249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12250: LD_ADDR_VAR 0 12
12254: PUSH
12255: LD_VAR 0 18
12259: PPUSH
12260: LD_INT 22
12262: PUSH
12263: LD_VAR 0 16
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 30
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: LD_INT 30
12287: PUSH
12288: LD_INT 3
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 72
12308: ST_TO_ADDR
12309: GO 12393
12311: LD_INT 4
12313: DOUBLE
12314: EQUAL
12315: IFTRUE 12319
12317: GO 12392
12319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12320: LD_ADDR_VAR 0 12
12324: PUSH
12325: LD_VAR 0 18
12329: PPUSH
12330: LD_INT 22
12332: PUSH
12333: LD_VAR 0 16
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 6
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 7
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 8
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PPUSH
12385: CALL_OW 72
12389: ST_TO_ADDR
12390: GO 12393
12392: POP
// if i = 1 then
12393: LD_VAR 0 8
12397: PUSH
12398: LD_INT 1
12400: EQUAL
12401: IFFALSE 12512
// begin tmp := [ ] ;
12403: LD_ADDR_VAR 0 19
12407: PUSH
12408: EMPTY
12409: ST_TO_ADDR
// for j in f do
12410: LD_ADDR_VAR 0 9
12414: PUSH
12415: LD_VAR 0 12
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12494
// if GetBType ( j ) = b_bunker then
12423: LD_VAR 0 9
12427: PPUSH
12428: CALL_OW 266
12432: PUSH
12433: LD_INT 32
12435: EQUAL
12436: IFFALSE 12463
// tmp := Insert ( tmp , 1 , j ) else
12438: LD_ADDR_VAR 0 19
12442: PUSH
12443: LD_VAR 0 19
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: LD_VAR 0 9
12455: PPUSH
12456: CALL_OW 2
12460: ST_TO_ADDR
12461: GO 12492
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12463: LD_ADDR_VAR 0 19
12467: PUSH
12468: LD_VAR 0 19
12472: PPUSH
12473: LD_VAR 0 19
12477: PUSH
12478: LD_INT 1
12480: PLUS
12481: PPUSH
12482: LD_VAR 0 9
12486: PPUSH
12487: CALL_OW 2
12491: ST_TO_ADDR
12492: GO 12420
12494: POP
12495: POP
// if tmp then
12496: LD_VAR 0 19
12500: IFFALSE 12512
// f := tmp ;
12502: LD_ADDR_VAR 0 12
12506: PUSH
12507: LD_VAR 0 19
12511: ST_TO_ADDR
// end ; x := personel [ i ] ;
12512: LD_ADDR_VAR 0 13
12516: PUSH
12517: LD_VAR 0 6
12521: PUSH
12522: LD_VAR 0 8
12526: ARRAY
12527: ST_TO_ADDR
// if x = - 1 then
12528: LD_VAR 0 13
12532: PUSH
12533: LD_INT 1
12535: NEG
12536: EQUAL
12537: IFFALSE 12746
// begin for j in f do
12539: LD_ADDR_VAR 0 9
12543: PUSH
12544: LD_VAR 0 12
12548: PUSH
12549: FOR_IN
12550: IFFALSE 12742
// repeat InitHc ;
12552: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12556: LD_VAR 0 9
12560: PPUSH
12561: CALL_OW 266
12565: PUSH
12566: LD_INT 5
12568: EQUAL
12569: IFFALSE 12639
// begin if UnitsInside ( j ) < 3 then
12571: LD_VAR 0 9
12575: PPUSH
12576: CALL_OW 313
12580: PUSH
12581: LD_INT 3
12583: LESS
12584: IFFALSE 12620
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12586: LD_INT 0
12588: PPUSH
12589: LD_INT 5
12591: PUSH
12592: LD_INT 8
12594: PUSH
12595: LD_INT 9
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: PUSH
12603: LD_VAR 0 17
12607: ARRAY
12608: PPUSH
12609: LD_VAR 0 4
12613: PPUSH
12614: CALL_OW 380
12618: GO 12637
// PrepareHuman ( false , i , skill ) ;
12620: LD_INT 0
12622: PPUSH
12623: LD_VAR 0 8
12627: PPUSH
12628: LD_VAR 0 4
12632: PPUSH
12633: CALL_OW 380
// end else
12637: GO 12656
// PrepareHuman ( false , i , skill ) ;
12639: LD_INT 0
12641: PPUSH
12642: LD_VAR 0 8
12646: PPUSH
12647: LD_VAR 0 4
12651: PPUSH
12652: CALL_OW 380
// un := CreateHuman ;
12656: LD_ADDR_VAR 0 14
12660: PUSH
12661: CALL_OW 44
12665: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12666: LD_ADDR_VAR 0 7
12670: PUSH
12671: LD_VAR 0 7
12675: PPUSH
12676: LD_INT 1
12678: PPUSH
12679: LD_VAR 0 14
12683: PPUSH
12684: CALL_OW 2
12688: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12689: LD_VAR 0 14
12693: PPUSH
12694: LD_VAR 0 9
12698: PPUSH
12699: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12703: LD_VAR 0 9
12707: PPUSH
12708: CALL_OW 313
12712: PUSH
12713: LD_INT 6
12715: EQUAL
12716: PUSH
12717: LD_VAR 0 9
12721: PPUSH
12722: CALL_OW 266
12726: PUSH
12727: LD_INT 32
12729: PUSH
12730: LD_INT 31
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: IN
12737: OR
12738: IFFALSE 12552
12740: GO 12549
12742: POP
12743: POP
// end else
12744: GO 13126
// for j = 1 to x do
12746: LD_ADDR_VAR 0 9
12750: PUSH
12751: DOUBLE
12752: LD_INT 1
12754: DEC
12755: ST_TO_ADDR
12756: LD_VAR 0 13
12760: PUSH
12761: FOR_TO
12762: IFFALSE 13124
// begin InitHc ;
12764: CALL_OW 19
// if not f then
12768: LD_VAR 0 12
12772: NOT
12773: IFFALSE 12862
// begin PrepareHuman ( false , i , skill ) ;
12775: LD_INT 0
12777: PPUSH
12778: LD_VAR 0 8
12782: PPUSH
12783: LD_VAR 0 4
12787: PPUSH
12788: CALL_OW 380
// un := CreateHuman ;
12792: LD_ADDR_VAR 0 14
12796: PUSH
12797: CALL_OW 44
12801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12802: LD_ADDR_VAR 0 7
12806: PUSH
12807: LD_VAR 0 7
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: LD_VAR 0 14
12819: PPUSH
12820: CALL_OW 2
12824: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12825: LD_VAR 0 14
12829: PPUSH
12830: LD_VAR 0 1
12834: PPUSH
12835: CALL_OW 250
12839: PPUSH
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 251
12849: PPUSH
12850: LD_INT 10
12852: PPUSH
12853: LD_INT 0
12855: PPUSH
12856: CALL_OW 50
// continue ;
12860: GO 12761
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12862: LD_VAR 0 12
12866: PUSH
12867: LD_INT 1
12869: ARRAY
12870: PPUSH
12871: CALL_OW 313
12875: PUSH
12876: LD_VAR 0 12
12880: PUSH
12881: LD_INT 1
12883: ARRAY
12884: PPUSH
12885: CALL_OW 266
12889: PUSH
12890: LD_INT 32
12892: PUSH
12893: LD_INT 31
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: IN
12900: AND
12901: PUSH
12902: LD_VAR 0 12
12906: PUSH
12907: LD_INT 1
12909: ARRAY
12910: PPUSH
12911: CALL_OW 313
12915: PUSH
12916: LD_INT 6
12918: EQUAL
12919: OR
12920: IFFALSE 12940
// f := Delete ( f , 1 ) ;
12922: LD_ADDR_VAR 0 12
12926: PUSH
12927: LD_VAR 0 12
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 3
12939: ST_TO_ADDR
// if not f then
12940: LD_VAR 0 12
12944: NOT
12945: IFFALSE 12963
// begin x := x + 2 ;
12947: LD_ADDR_VAR 0 13
12951: PUSH
12952: LD_VAR 0 13
12956: PUSH
12957: LD_INT 2
12959: PLUS
12960: ST_TO_ADDR
// continue ;
12961: GO 12761
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12963: LD_VAR 0 12
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: PPUSH
12972: CALL_OW 266
12976: PUSH
12977: LD_INT 5
12979: EQUAL
12980: IFFALSE 13054
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12982: LD_VAR 0 12
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: PPUSH
12991: CALL_OW 313
12995: PUSH
12996: LD_INT 3
12998: LESS
12999: IFFALSE 13035
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13001: LD_INT 0
13003: PPUSH
13004: LD_INT 5
13006: PUSH
13007: LD_INT 8
13009: PUSH
13010: LD_INT 9
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_VAR 0 17
13022: ARRAY
13023: PPUSH
13024: LD_VAR 0 4
13028: PPUSH
13029: CALL_OW 380
13033: GO 13052
// PrepareHuman ( false , i , skill ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_VAR 0 8
13042: PPUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: CALL_OW 380
// end else
13052: GO 13071
// PrepareHuman ( false , i , skill ) ;
13054: LD_INT 0
13056: PPUSH
13057: LD_VAR 0 8
13061: PPUSH
13062: LD_VAR 0 4
13066: PPUSH
13067: CALL_OW 380
// un := CreateHuman ;
13071: LD_ADDR_VAR 0 14
13075: PUSH
13076: CALL_OW 44
13080: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13081: LD_ADDR_VAR 0 7
13085: PUSH
13086: LD_VAR 0 7
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_VAR 0 14
13098: PPUSH
13099: CALL_OW 2
13103: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13104: LD_VAR 0 14
13108: PPUSH
13109: LD_VAR 0 12
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: CALL_OW 52
// end ;
13122: GO 12761
13124: POP
13125: POP
// end ;
13126: GO 12063
13128: POP
13129: POP
// result := result ^ buildings ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_VAR 0 7
13139: PUSH
13140: LD_VAR 0 18
13144: ADD
13145: ST_TO_ADDR
// end else
13146: GO 13289
// begin for i = 1 to personel do
13148: LD_ADDR_VAR 0 8
13152: PUSH
13153: DOUBLE
13154: LD_INT 1
13156: DEC
13157: ST_TO_ADDR
13158: LD_VAR 0 6
13162: PUSH
13163: FOR_TO
13164: IFFALSE 13287
// begin if i > 4 then
13166: LD_VAR 0 8
13170: PUSH
13171: LD_INT 4
13173: GREATER
13174: IFFALSE 13178
// break ;
13176: GO 13287
// x := personel [ i ] ;
13178: LD_ADDR_VAR 0 13
13182: PUSH
13183: LD_VAR 0 6
13187: PUSH
13188: LD_VAR 0 8
13192: ARRAY
13193: ST_TO_ADDR
// if x = - 1 then
13194: LD_VAR 0 13
13198: PUSH
13199: LD_INT 1
13201: NEG
13202: EQUAL
13203: IFFALSE 13207
// continue ;
13205: GO 13163
// PrepareHuman ( false , i , skill ) ;
13207: LD_INT 0
13209: PPUSH
13210: LD_VAR 0 8
13214: PPUSH
13215: LD_VAR 0 4
13219: PPUSH
13220: CALL_OW 380
// un := CreateHuman ;
13224: LD_ADDR_VAR 0 14
13228: PUSH
13229: CALL_OW 44
13233: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13234: LD_VAR 0 14
13238: PPUSH
13239: LD_VAR 0 1
13243: PPUSH
13244: CALL_OW 250
13248: PPUSH
13249: LD_VAR 0 1
13253: PPUSH
13254: CALL_OW 251
13258: PPUSH
13259: LD_INT 10
13261: PPUSH
13262: LD_INT 0
13264: PPUSH
13265: CALL_OW 50
// result := result ^ un ;
13269: LD_ADDR_VAR 0 7
13273: PUSH
13274: LD_VAR 0 7
13278: PUSH
13279: LD_VAR 0 14
13283: ADD
13284: ST_TO_ADDR
// end ;
13285: GO 13163
13287: POP
13288: POP
// end ; end ;
13289: LD_VAR 0 7
13293: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13294: LD_INT 0
13296: PPUSH
13297: PPUSH
13298: PPUSH
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
13305: PPUSH
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
// result := false ;
13312: LD_ADDR_VAR 0 3
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13320: LD_VAR 0 1
13324: NOT
13325: PUSH
13326: LD_VAR 0 1
13330: PPUSH
13331: CALL_OW 266
13335: PUSH
13336: LD_INT 32
13338: PUSH
13339: LD_INT 33
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: IN
13346: NOT
13347: OR
13348: IFFALSE 13352
// exit ;
13350: GO 14461
// nat := GetNation ( tower ) ;
13352: LD_ADDR_VAR 0 12
13356: PUSH
13357: LD_VAR 0 1
13361: PPUSH
13362: CALL_OW 248
13366: ST_TO_ADDR
// side := GetSide ( tower ) ;
13367: LD_ADDR_VAR 0 16
13371: PUSH
13372: LD_VAR 0 1
13376: PPUSH
13377: CALL_OW 255
13381: ST_TO_ADDR
// x := GetX ( tower ) ;
13382: LD_ADDR_VAR 0 10
13386: PUSH
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 250
13396: ST_TO_ADDR
// y := GetY ( tower ) ;
13397: LD_ADDR_VAR 0 11
13401: PUSH
13402: LD_VAR 0 1
13406: PPUSH
13407: CALL_OW 251
13411: ST_TO_ADDR
// if not x or not y then
13412: LD_VAR 0 10
13416: NOT
13417: PUSH
13418: LD_VAR 0 11
13422: NOT
13423: OR
13424: IFFALSE 13428
// exit ;
13426: GO 14461
// weapon := 0 ;
13428: LD_ADDR_VAR 0 18
13432: PUSH
13433: LD_INT 0
13435: ST_TO_ADDR
// fac_list := [ ] ;
13436: LD_ADDR_VAR 0 17
13440: PUSH
13441: EMPTY
13442: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13443: LD_ADDR_VAR 0 6
13447: PUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 274
13457: PPUSH
13458: LD_VAR 0 2
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL 11032 0 3
13470: PPUSH
13471: LD_INT 30
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 72
13485: ST_TO_ADDR
// if not factories then
13486: LD_VAR 0 6
13490: NOT
13491: IFFALSE 13495
// exit ;
13493: GO 14461
// for i in factories do
13495: LD_ADDR_VAR 0 8
13499: PUSH
13500: LD_VAR 0 6
13504: PUSH
13505: FOR_IN
13506: IFFALSE 13531
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13508: LD_ADDR_VAR 0 17
13512: PUSH
13513: LD_VAR 0 17
13517: PUSH
13518: LD_VAR 0 8
13522: PPUSH
13523: CALL_OW 478
13527: UNION
13528: ST_TO_ADDR
13529: GO 13505
13531: POP
13532: POP
// if not fac_list then
13533: LD_VAR 0 17
13537: NOT
13538: IFFALSE 13542
// exit ;
13540: GO 14461
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13542: LD_ADDR_VAR 0 5
13546: PUSH
13547: LD_INT 4
13549: PUSH
13550: LD_INT 5
13552: PUSH
13553: LD_INT 9
13555: PUSH
13556: LD_INT 10
13558: PUSH
13559: LD_INT 6
13561: PUSH
13562: LD_INT 7
13564: PUSH
13565: LD_INT 11
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 27
13579: PUSH
13580: LD_INT 28
13582: PUSH
13583: LD_INT 26
13585: PUSH
13586: LD_INT 30
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 43
13597: PUSH
13598: LD_INT 44
13600: PUSH
13601: LD_INT 46
13603: PUSH
13604: LD_INT 45
13606: PUSH
13607: LD_INT 47
13609: PUSH
13610: LD_INT 49
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_VAR 0 12
13630: ARRAY
13631: ST_TO_ADDR
// list := list isect fac_list ;
13632: LD_ADDR_VAR 0 5
13636: PUSH
13637: LD_VAR 0 5
13641: PUSH
13642: LD_VAR 0 17
13646: ISECT
13647: ST_TO_ADDR
// if not list then
13648: LD_VAR 0 5
13652: NOT
13653: IFFALSE 13657
// exit ;
13655: GO 14461
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13657: LD_VAR 0 12
13661: PUSH
13662: LD_INT 3
13664: EQUAL
13665: PUSH
13666: LD_INT 49
13668: PUSH
13669: LD_VAR 0 5
13673: IN
13674: AND
13675: PUSH
13676: LD_INT 31
13678: PPUSH
13679: LD_VAR 0 16
13683: PPUSH
13684: CALL_OW 321
13688: PUSH
13689: LD_INT 2
13691: EQUAL
13692: AND
13693: IFFALSE 13753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13695: LD_INT 22
13697: PUSH
13698: LD_VAR 0 16
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 35
13709: PUSH
13710: LD_INT 49
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 91
13719: PUSH
13720: LD_VAR 0 1
13724: PUSH
13725: LD_INT 10
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 69
13742: NOT
13743: IFFALSE 13753
// weapon := ru_time_lapser ;
13745: LD_ADDR_VAR 0 18
13749: PUSH
13750: LD_INT 49
13752: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13753: LD_VAR 0 12
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: LD_INT 2
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: IN
13768: PUSH
13769: LD_INT 11
13771: PUSH
13772: LD_VAR 0 5
13776: IN
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: LD_VAR 0 5
13785: IN
13786: OR
13787: AND
13788: PUSH
13789: LD_INT 6
13791: PPUSH
13792: LD_VAR 0 16
13796: PPUSH
13797: CALL_OW 321
13801: PUSH
13802: LD_INT 2
13804: EQUAL
13805: AND
13806: IFFALSE 13971
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13808: LD_INT 22
13810: PUSH
13811: LD_VAR 0 16
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 35
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 35
13835: PUSH
13836: LD_INT 30
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 91
13850: PUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 18
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 69
13873: NOT
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_VAR 0 16
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 30
13892: PUSH
13893: LD_INT 32
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 30
13902: PUSH
13903: LD_INT 33
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 91
13917: PUSH
13918: LD_VAR 0 1
13922: PUSH
13923: LD_INT 12
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: PPUSH
13939: CALL_OW 69
13943: PUSH
13944: LD_INT 2
13946: GREATER
13947: AND
13948: IFFALSE 13971
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13950: LD_ADDR_VAR 0 18
13954: PUSH
13955: LD_INT 11
13957: PUSH
13958: LD_INT 30
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_VAR 0 12
13969: ARRAY
13970: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13971: LD_VAR 0 18
13975: NOT
13976: PUSH
13977: LD_INT 40
13979: PPUSH
13980: LD_VAR 0 16
13984: PPUSH
13985: CALL_OW 321
13989: PUSH
13990: LD_INT 2
13992: EQUAL
13993: AND
13994: PUSH
13995: LD_INT 7
13997: PUSH
13998: LD_VAR 0 5
14002: IN
14003: PUSH
14004: LD_INT 28
14006: PUSH
14007: LD_VAR 0 5
14011: IN
14012: OR
14013: PUSH
14014: LD_INT 45
14016: PUSH
14017: LD_VAR 0 5
14021: IN
14022: OR
14023: AND
14024: IFFALSE 14278
// begin hex := GetHexInfo ( x , y ) ;
14026: LD_ADDR_VAR 0 4
14030: PUSH
14031: LD_VAR 0 10
14035: PPUSH
14036: LD_VAR 0 11
14040: PPUSH
14041: CALL_OW 546
14045: ST_TO_ADDR
// if hex [ 1 ] then
14046: LD_VAR 0 4
14050: PUSH
14051: LD_INT 1
14053: ARRAY
14054: IFFALSE 14058
// exit ;
14056: GO 14461
// height := hex [ 2 ] ;
14058: LD_ADDR_VAR 0 15
14062: PUSH
14063: LD_VAR 0 4
14067: PUSH
14068: LD_INT 2
14070: ARRAY
14071: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14072: LD_ADDR_VAR 0 14
14076: PUSH
14077: LD_INT 0
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: LD_INT 5
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: ST_TO_ADDR
// for i in tmp do
14095: LD_ADDR_VAR 0 8
14099: PUSH
14100: LD_VAR 0 14
14104: PUSH
14105: FOR_IN
14106: IFFALSE 14276
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14108: LD_ADDR_VAR 0 9
14112: PUSH
14113: LD_VAR 0 10
14117: PPUSH
14118: LD_VAR 0 8
14122: PPUSH
14123: LD_INT 5
14125: PPUSH
14126: CALL_OW 272
14130: PUSH
14131: LD_VAR 0 11
14135: PPUSH
14136: LD_VAR 0 8
14140: PPUSH
14141: LD_INT 5
14143: PPUSH
14144: CALL_OW 273
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14153: LD_VAR 0 9
14157: PUSH
14158: LD_INT 1
14160: ARRAY
14161: PPUSH
14162: LD_VAR 0 9
14166: PUSH
14167: LD_INT 2
14169: ARRAY
14170: PPUSH
14171: CALL_OW 488
14175: IFFALSE 14274
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14177: LD_ADDR_VAR 0 4
14181: PUSH
14182: LD_VAR 0 9
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PPUSH
14191: LD_VAR 0 9
14195: PUSH
14196: LD_INT 2
14198: ARRAY
14199: PPUSH
14200: CALL_OW 546
14204: ST_TO_ADDR
// if hex [ 1 ] then
14205: LD_VAR 0 4
14209: PUSH
14210: LD_INT 1
14212: ARRAY
14213: IFFALSE 14217
// continue ;
14215: GO 14105
// h := hex [ 2 ] ;
14217: LD_ADDR_VAR 0 13
14221: PUSH
14222: LD_VAR 0 4
14226: PUSH
14227: LD_INT 2
14229: ARRAY
14230: ST_TO_ADDR
// if h + 7 < height then
14231: LD_VAR 0 13
14235: PUSH
14236: LD_INT 7
14238: PLUS
14239: PUSH
14240: LD_VAR 0 15
14244: LESS
14245: IFFALSE 14274
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14247: LD_ADDR_VAR 0 18
14251: PUSH
14252: LD_INT 7
14254: PUSH
14255: LD_INT 28
14257: PUSH
14258: LD_INT 45
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PUSH
14266: LD_VAR 0 12
14270: ARRAY
14271: ST_TO_ADDR
// break ;
14272: GO 14276
// end ; end ; end ;
14274: GO 14105
14276: POP
14277: POP
// end ; if not weapon then
14278: LD_VAR 0 18
14282: NOT
14283: IFFALSE 14343
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14285: LD_ADDR_VAR 0 5
14289: PUSH
14290: LD_VAR 0 5
14294: PUSH
14295: LD_INT 11
14297: PUSH
14298: LD_INT 30
14300: PUSH
14301: LD_INT 49
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: DIFF
14309: ST_TO_ADDR
// if not list then
14310: LD_VAR 0 5
14314: NOT
14315: IFFALSE 14319
// exit ;
14317: GO 14461
// weapon := list [ rand ( 1 , list ) ] ;
14319: LD_ADDR_VAR 0 18
14323: PUSH
14324: LD_VAR 0 5
14328: PUSH
14329: LD_INT 1
14331: PPUSH
14332: LD_VAR 0 5
14336: PPUSH
14337: CALL_OW 12
14341: ARRAY
14342: ST_TO_ADDR
// end ; if weapon then
14343: LD_VAR 0 18
14347: IFFALSE 14461
// begin tmp := CostOfWeapon ( weapon ) ;
14349: LD_ADDR_VAR 0 14
14353: PUSH
14354: LD_VAR 0 18
14358: PPUSH
14359: CALL_OW 451
14363: ST_TO_ADDR
// j := GetBase ( tower ) ;
14364: LD_ADDR_VAR 0 9
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 274
14378: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14379: LD_VAR 0 9
14383: PPUSH
14384: LD_INT 1
14386: PPUSH
14387: CALL_OW 275
14391: PUSH
14392: LD_VAR 0 14
14396: PUSH
14397: LD_INT 1
14399: ARRAY
14400: GREATEREQUAL
14401: PUSH
14402: LD_VAR 0 9
14406: PPUSH
14407: LD_INT 2
14409: PPUSH
14410: CALL_OW 275
14414: PUSH
14415: LD_VAR 0 14
14419: PUSH
14420: LD_INT 2
14422: ARRAY
14423: GREATEREQUAL
14424: AND
14425: PUSH
14426: LD_VAR 0 9
14430: PPUSH
14431: LD_INT 3
14433: PPUSH
14434: CALL_OW 275
14438: PUSH
14439: LD_VAR 0 14
14443: PUSH
14444: LD_INT 3
14446: ARRAY
14447: GREATEREQUAL
14448: AND
14449: IFFALSE 14461
// result := weapon ;
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_VAR 0 18
14460: ST_TO_ADDR
// end ; end ;
14461: LD_VAR 0 3
14465: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14466: LD_INT 0
14468: PPUSH
14469: PPUSH
// result := true ;
14470: LD_ADDR_VAR 0 3
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// if array1 = array2 then
14478: LD_VAR 0 1
14482: PUSH
14483: LD_VAR 0 2
14487: EQUAL
14488: IFFALSE 14548
// begin for i = 1 to array1 do
14490: LD_ADDR_VAR 0 4
14494: PUSH
14495: DOUBLE
14496: LD_INT 1
14498: DEC
14499: ST_TO_ADDR
14500: LD_VAR 0 1
14504: PUSH
14505: FOR_TO
14506: IFFALSE 14544
// if array1 [ i ] <> array2 [ i ] then
14508: LD_VAR 0 1
14512: PUSH
14513: LD_VAR 0 4
14517: ARRAY
14518: PUSH
14519: LD_VAR 0 2
14523: PUSH
14524: LD_VAR 0 4
14528: ARRAY
14529: NONEQUAL
14530: IFFALSE 14542
// begin result := false ;
14532: LD_ADDR_VAR 0 3
14536: PUSH
14537: LD_INT 0
14539: ST_TO_ADDR
// break ;
14540: GO 14544
// end ;
14542: GO 14505
14544: POP
14545: POP
// end else
14546: GO 14556
// result := false ;
14548: LD_ADDR_VAR 0 3
14552: PUSH
14553: LD_INT 0
14555: ST_TO_ADDR
// end ;
14556: LD_VAR 0 3
14560: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14561: LD_INT 0
14563: PPUSH
14564: PPUSH
// if not array1 or not array2 then
14565: LD_VAR 0 1
14569: NOT
14570: PUSH
14571: LD_VAR 0 2
14575: NOT
14576: OR
14577: IFFALSE 14581
// exit ;
14579: GO 14645
// result := true ;
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: LD_INT 1
14588: ST_TO_ADDR
// for i = 1 to array1 do
14589: LD_ADDR_VAR 0 4
14593: PUSH
14594: DOUBLE
14595: LD_INT 1
14597: DEC
14598: ST_TO_ADDR
14599: LD_VAR 0 1
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14643
// if array1 [ i ] <> array2 [ i ] then
14607: LD_VAR 0 1
14611: PUSH
14612: LD_VAR 0 4
14616: ARRAY
14617: PUSH
14618: LD_VAR 0 2
14622: PUSH
14623: LD_VAR 0 4
14627: ARRAY
14628: NONEQUAL
14629: IFFALSE 14641
// begin result := false ;
14631: LD_ADDR_VAR 0 3
14635: PUSH
14636: LD_INT 0
14638: ST_TO_ADDR
// break ;
14639: GO 14643
// end ;
14641: GO 14604
14643: POP
14644: POP
// end ;
14645: LD_VAR 0 3
14649: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14650: LD_INT 0
14652: PPUSH
14653: PPUSH
14654: PPUSH
// pom := GetBase ( fac ) ;
14655: LD_ADDR_VAR 0 5
14659: PUSH
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 274
14669: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14670: LD_ADDR_VAR 0 4
14674: PUSH
14675: LD_VAR 0 2
14679: PUSH
14680: LD_INT 1
14682: ARRAY
14683: PPUSH
14684: LD_VAR 0 2
14688: PUSH
14689: LD_INT 2
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 2
14697: PUSH
14698: LD_INT 3
14700: ARRAY
14701: PPUSH
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 4
14709: ARRAY
14710: PPUSH
14711: CALL_OW 449
14715: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 5
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 275
14733: PUSH
14734: LD_VAR 0 4
14738: PUSH
14739: LD_INT 1
14741: ARRAY
14742: GREATEREQUAL
14743: PUSH
14744: LD_VAR 0 5
14748: PPUSH
14749: LD_INT 2
14751: PPUSH
14752: CALL_OW 275
14756: PUSH
14757: LD_VAR 0 4
14761: PUSH
14762: LD_INT 2
14764: ARRAY
14765: GREATEREQUAL
14766: AND
14767: PUSH
14768: LD_VAR 0 5
14772: PPUSH
14773: LD_INT 3
14775: PPUSH
14776: CALL_OW 275
14780: PUSH
14781: LD_VAR 0 4
14785: PUSH
14786: LD_INT 3
14788: ARRAY
14789: GREATEREQUAL
14790: AND
14791: ST_TO_ADDR
// end ;
14792: LD_VAR 0 3
14796: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14797: LD_INT 0
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
// pom := GetBase ( building ) ;
14803: LD_ADDR_VAR 0 3
14807: PUSH
14808: LD_VAR 0 1
14812: PPUSH
14813: CALL_OW 274
14817: ST_TO_ADDR
// if not pom then
14818: LD_VAR 0 3
14822: NOT
14823: IFFALSE 14827
// exit ;
14825: GO 14997
// btype := GetBType ( building ) ;
14827: LD_ADDR_VAR 0 5
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 266
14841: ST_TO_ADDR
// if btype = b_armoury then
14842: LD_VAR 0 5
14846: PUSH
14847: LD_INT 4
14849: EQUAL
14850: IFFALSE 14860
// btype := b_barracks ;
14852: LD_ADDR_VAR 0 5
14856: PUSH
14857: LD_INT 5
14859: ST_TO_ADDR
// if btype = b_depot then
14860: LD_VAR 0 5
14864: PUSH
14865: LD_INT 0
14867: EQUAL
14868: IFFALSE 14878
// btype := b_warehouse ;
14870: LD_ADDR_VAR 0 5
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// if btype = b_workshop then
14878: LD_VAR 0 5
14882: PUSH
14883: LD_INT 2
14885: EQUAL
14886: IFFALSE 14896
// btype := b_factory ;
14888: LD_ADDR_VAR 0 5
14892: PUSH
14893: LD_INT 3
14895: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14896: LD_ADDR_VAR 0 4
14900: PUSH
14901: LD_VAR 0 5
14905: PPUSH
14906: LD_VAR 0 1
14910: PPUSH
14911: CALL_OW 248
14915: PPUSH
14916: CALL_OW 450
14920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14921: LD_ADDR_VAR 0 2
14925: PUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 275
14938: PUSH
14939: LD_VAR 0 4
14943: PUSH
14944: LD_INT 1
14946: ARRAY
14947: GREATEREQUAL
14948: PUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 2
14956: PPUSH
14957: CALL_OW 275
14961: PUSH
14962: LD_VAR 0 4
14966: PUSH
14967: LD_INT 2
14969: ARRAY
14970: GREATEREQUAL
14971: AND
14972: PUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_INT 3
14980: PPUSH
14981: CALL_OW 275
14985: PUSH
14986: LD_VAR 0 4
14990: PUSH
14991: LD_INT 3
14993: ARRAY
14994: GREATEREQUAL
14995: AND
14996: ST_TO_ADDR
// end ;
14997: LD_VAR 0 2
15001: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15002: LD_INT 0
15004: PPUSH
15005: PPUSH
15006: PPUSH
// pom := GetBase ( building ) ;
15007: LD_ADDR_VAR 0 4
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 274
15021: ST_TO_ADDR
// if not pom then
15022: LD_VAR 0 4
15026: NOT
15027: IFFALSE 15031
// exit ;
15029: GO 15132
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15031: LD_ADDR_VAR 0 5
15035: PUSH
15036: LD_VAR 0 2
15040: PPUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 248
15050: PPUSH
15051: CALL_OW 450
15055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15056: LD_ADDR_VAR 0 3
15060: PUSH
15061: LD_VAR 0 4
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 275
15073: PUSH
15074: LD_VAR 0 5
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: GREATEREQUAL
15083: PUSH
15084: LD_VAR 0 4
15088: PPUSH
15089: LD_INT 2
15091: PPUSH
15092: CALL_OW 275
15096: PUSH
15097: LD_VAR 0 5
15101: PUSH
15102: LD_INT 2
15104: ARRAY
15105: GREATEREQUAL
15106: AND
15107: PUSH
15108: LD_VAR 0 4
15112: PPUSH
15113: LD_INT 3
15115: PPUSH
15116: CALL_OW 275
15120: PUSH
15121: LD_VAR 0 5
15125: PUSH
15126: LD_INT 3
15128: ARRAY
15129: GREATEREQUAL
15130: AND
15131: ST_TO_ADDR
// end ;
15132: LD_VAR 0 3
15136: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15137: LD_INT 0
15139: PPUSH
15140: PPUSH
15141: PPUSH
15142: PPUSH
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
15149: PPUSH
// result := false ;
15150: LD_ADDR_VAR 0 8
15154: PUSH
15155: LD_INT 0
15157: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15158: LD_VAR 0 5
15162: NOT
15163: PUSH
15164: LD_VAR 0 1
15168: NOT
15169: OR
15170: PUSH
15171: LD_VAR 0 2
15175: NOT
15176: OR
15177: PUSH
15178: LD_VAR 0 3
15182: NOT
15183: OR
15184: IFFALSE 15188
// exit ;
15186: GO 16002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15188: LD_ADDR_VAR 0 14
15192: PUSH
15193: LD_VAR 0 1
15197: PPUSH
15198: LD_VAR 0 2
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_VAR 0 4
15212: PPUSH
15213: LD_VAR 0 5
15217: PUSH
15218: LD_INT 1
15220: ARRAY
15221: PPUSH
15222: CALL_OW 248
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL 17255 0 6
15234: ST_TO_ADDR
// if not hexes then
15235: LD_VAR 0 14
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 16002
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15244: LD_ADDR_VAR 0 17
15248: PUSH
15249: LD_VAR 0 5
15253: PPUSH
15254: LD_INT 22
15256: PUSH
15257: LD_VAR 0 13
15261: PPUSH
15262: CALL_OW 255
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 2
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 0
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 72
15307: ST_TO_ADDR
// for i = 1 to hexes do
15308: LD_ADDR_VAR 0 9
15312: PUSH
15313: DOUBLE
15314: LD_INT 1
15316: DEC
15317: ST_TO_ADDR
15318: LD_VAR 0 14
15322: PUSH
15323: FOR_TO
15324: IFFALSE 16000
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15326: LD_ADDR_VAR 0 13
15330: PUSH
15331: LD_VAR 0 14
15335: PUSH
15336: LD_VAR 0 9
15340: ARRAY
15341: PUSH
15342: LD_INT 1
15344: ARRAY
15345: PPUSH
15346: LD_VAR 0 14
15350: PUSH
15351: LD_VAR 0 9
15355: ARRAY
15356: PUSH
15357: LD_INT 2
15359: ARRAY
15360: PPUSH
15361: CALL_OW 428
15365: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15366: LD_VAR 0 14
15370: PUSH
15371: LD_VAR 0 9
15375: ARRAY
15376: PUSH
15377: LD_INT 1
15379: ARRAY
15380: PPUSH
15381: LD_VAR 0 14
15385: PUSH
15386: LD_VAR 0 9
15390: ARRAY
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: PPUSH
15396: CALL_OW 351
15400: PUSH
15401: LD_VAR 0 14
15405: PUSH
15406: LD_VAR 0 9
15410: ARRAY
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: LD_VAR 0 14
15420: PUSH
15421: LD_VAR 0 9
15425: ARRAY
15426: PUSH
15427: LD_INT 2
15429: ARRAY
15430: PPUSH
15431: CALL_OW 488
15435: NOT
15436: OR
15437: PUSH
15438: LD_VAR 0 13
15442: PPUSH
15443: CALL_OW 247
15447: PUSH
15448: LD_INT 3
15450: EQUAL
15451: OR
15452: IFFALSE 15458
// exit ;
15454: POP
15455: POP
15456: GO 16002
// if not tmp then
15458: LD_VAR 0 13
15462: NOT
15463: IFFALSE 15467
// continue ;
15465: GO 15323
// result := true ;
15467: LD_ADDR_VAR 0 8
15471: PUSH
15472: LD_INT 1
15474: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15475: LD_VAR 0 6
15479: PUSH
15480: LD_VAR 0 13
15484: PPUSH
15485: CALL_OW 247
15489: PUSH
15490: LD_INT 2
15492: EQUAL
15493: AND
15494: PUSH
15495: LD_VAR 0 13
15499: PPUSH
15500: CALL_OW 263
15504: PUSH
15505: LD_INT 1
15507: EQUAL
15508: AND
15509: IFFALSE 15673
// begin if IsDrivenBy ( tmp ) then
15511: LD_VAR 0 13
15515: PPUSH
15516: CALL_OW 311
15520: IFFALSE 15524
// continue ;
15522: GO 15323
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15524: LD_VAR 0 6
15528: PPUSH
15529: LD_INT 3
15531: PUSH
15532: LD_INT 60
15534: PUSH
15535: EMPTY
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 3
15544: PUSH
15545: LD_INT 55
15547: PUSH
15548: EMPTY
15549: LIST
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PPUSH
15559: CALL_OW 72
15563: IFFALSE 15671
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15565: LD_ADDR_VAR 0 18
15569: PUSH
15570: LD_VAR 0 6
15574: PPUSH
15575: LD_INT 3
15577: PUSH
15578: LD_INT 60
15580: PUSH
15581: EMPTY
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 3
15590: PUSH
15591: LD_INT 55
15593: PUSH
15594: EMPTY
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 72
15609: PUSH
15610: LD_INT 1
15612: ARRAY
15613: ST_TO_ADDR
// if IsInUnit ( driver ) then
15614: LD_VAR 0 18
15618: PPUSH
15619: CALL_OW 310
15623: IFFALSE 15634
// ComExit ( driver ) ;
15625: LD_VAR 0 18
15629: PPUSH
15630: CALL 41056 0 1
// AddComEnterUnit ( driver , tmp ) ;
15634: LD_VAR 0 18
15638: PPUSH
15639: LD_VAR 0 13
15643: PPUSH
15644: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15648: LD_VAR 0 18
15652: PPUSH
15653: LD_VAR 0 7
15657: PPUSH
15658: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15662: LD_VAR 0 18
15666: PPUSH
15667: CALL_OW 181
// end ; continue ;
15671: GO 15323
// end ; if not cleaners or not tmp in cleaners then
15673: LD_VAR 0 6
15677: NOT
15678: PUSH
15679: LD_VAR 0 13
15683: PUSH
15684: LD_VAR 0 6
15688: IN
15689: NOT
15690: OR
15691: IFFALSE 15998
// begin if dep then
15693: LD_VAR 0 17
15697: IFFALSE 15833
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15699: LD_ADDR_VAR 0 16
15703: PUSH
15704: LD_VAR 0 17
15708: PUSH
15709: LD_INT 1
15711: ARRAY
15712: PPUSH
15713: CALL_OW 250
15717: PPUSH
15718: LD_VAR 0 17
15722: PUSH
15723: LD_INT 1
15725: ARRAY
15726: PPUSH
15727: CALL_OW 254
15731: PPUSH
15732: LD_INT 5
15734: PPUSH
15735: CALL_OW 272
15739: PUSH
15740: LD_VAR 0 17
15744: PUSH
15745: LD_INT 1
15747: ARRAY
15748: PPUSH
15749: CALL_OW 251
15753: PPUSH
15754: LD_VAR 0 17
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PPUSH
15763: CALL_OW 254
15767: PPUSH
15768: LD_INT 5
15770: PPUSH
15771: CALL_OW 273
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15780: LD_VAR 0 16
15784: PUSH
15785: LD_INT 1
15787: ARRAY
15788: PPUSH
15789: LD_VAR 0 16
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: PPUSH
15798: CALL_OW 488
15802: IFFALSE 15833
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15804: LD_VAR 0 13
15808: PPUSH
15809: LD_VAR 0 16
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: LD_VAR 0 16
15822: PUSH
15823: LD_INT 2
15825: ARRAY
15826: PPUSH
15827: CALL_OW 111
// continue ;
15831: GO 15323
// end ; end ; r := GetDir ( tmp ) ;
15833: LD_ADDR_VAR 0 15
15837: PUSH
15838: LD_VAR 0 13
15842: PPUSH
15843: CALL_OW 254
15847: ST_TO_ADDR
// if r = 5 then
15848: LD_VAR 0 15
15852: PUSH
15853: LD_INT 5
15855: EQUAL
15856: IFFALSE 15866
// r := 0 ;
15858: LD_ADDR_VAR 0 15
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// for j = r to 5 do
15866: LD_ADDR_VAR 0 10
15870: PUSH
15871: DOUBLE
15872: LD_VAR 0 15
15876: DEC
15877: ST_TO_ADDR
15878: LD_INT 5
15880: PUSH
15881: FOR_TO
15882: IFFALSE 15996
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15884: LD_ADDR_VAR 0 11
15888: PUSH
15889: LD_VAR 0 13
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 10
15903: PPUSH
15904: LD_INT 2
15906: PPUSH
15907: CALL_OW 272
15911: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15912: LD_ADDR_VAR 0 12
15916: PUSH
15917: LD_VAR 0 13
15921: PPUSH
15922: CALL_OW 251
15926: PPUSH
15927: LD_VAR 0 10
15931: PPUSH
15932: LD_INT 2
15934: PPUSH
15935: CALL_OW 273
15939: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15940: LD_VAR 0 11
15944: PPUSH
15945: LD_VAR 0 12
15949: PPUSH
15950: CALL_OW 488
15954: PUSH
15955: LD_VAR 0 11
15959: PPUSH
15960: LD_VAR 0 12
15964: PPUSH
15965: CALL_OW 428
15969: NOT
15970: AND
15971: IFFALSE 15994
// begin ComMoveXY ( tmp , _x , _y ) ;
15973: LD_VAR 0 13
15977: PPUSH
15978: LD_VAR 0 11
15982: PPUSH
15983: LD_VAR 0 12
15987: PPUSH
15988: CALL_OW 111
// break ;
15992: GO 15996
// end ; end ;
15994: GO 15881
15996: POP
15997: POP
// end ; end ;
15998: GO 15323
16000: POP
16001: POP
// end ;
16002: LD_VAR 0 8
16006: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16007: LD_INT 0
16009: PPUSH
// result := true ;
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 1
16017: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16018: LD_VAR 0 2
16022: PUSH
16023: LD_INT 24
16025: DOUBLE
16026: EQUAL
16027: IFTRUE 16037
16029: LD_INT 33
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16062
16037: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16038: LD_ADDR_VAR 0 3
16042: PUSH
16043: LD_INT 32
16045: PPUSH
16046: LD_VAR 0 1
16050: PPUSH
16051: CALL_OW 321
16055: PUSH
16056: LD_INT 2
16058: EQUAL
16059: ST_TO_ADDR
16060: GO 16378
16062: LD_INT 20
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16095
16070: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 6
16078: PPUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 321
16088: PUSH
16089: LD_INT 2
16091: EQUAL
16092: ST_TO_ADDR
16093: GO 16378
16095: LD_INT 22
16097: DOUBLE
16098: EQUAL
16099: IFTRUE 16109
16101: LD_INT 36
16103: DOUBLE
16104: EQUAL
16105: IFTRUE 16109
16107: GO 16134
16109: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_INT 15
16117: PPUSH
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 321
16127: PUSH
16128: LD_INT 2
16130: EQUAL
16131: ST_TO_ADDR
16132: GO 16378
16134: LD_INT 30
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16167
16142: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16143: LD_ADDR_VAR 0 3
16147: PUSH
16148: LD_INT 20
16150: PPUSH
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 321
16160: PUSH
16161: LD_INT 2
16163: EQUAL
16164: ST_TO_ADDR
16165: GO 16378
16167: LD_INT 28
16169: DOUBLE
16170: EQUAL
16171: IFTRUE 16181
16173: LD_INT 21
16175: DOUBLE
16176: EQUAL
16177: IFTRUE 16181
16179: GO 16206
16181: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_INT 21
16189: PPUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 321
16199: PUSH
16200: LD_INT 2
16202: EQUAL
16203: ST_TO_ADDR
16204: GO 16378
16206: LD_INT 16
16208: DOUBLE
16209: EQUAL
16210: IFTRUE 16214
16212: GO 16239
16214: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16215: LD_ADDR_VAR 0 3
16219: PUSH
16220: LD_INT 84
16222: PPUSH
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL_OW 321
16232: PUSH
16233: LD_INT 2
16235: EQUAL
16236: ST_TO_ADDR
16237: GO 16378
16239: LD_INT 19
16241: DOUBLE
16242: EQUAL
16243: IFTRUE 16253
16245: LD_INT 23
16247: DOUBLE
16248: EQUAL
16249: IFTRUE 16253
16251: GO 16278
16253: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_INT 83
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 321
16271: PUSH
16272: LD_INT 2
16274: EQUAL
16275: ST_TO_ADDR
16276: GO 16378
16278: LD_INT 17
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16311
16286: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16287: LD_ADDR_VAR 0 3
16291: PUSH
16292: LD_INT 39
16294: PPUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 321
16304: PUSH
16305: LD_INT 2
16307: EQUAL
16308: ST_TO_ADDR
16309: GO 16378
16311: LD_INT 18
16313: DOUBLE
16314: EQUAL
16315: IFTRUE 16319
16317: GO 16344
16319: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16320: LD_ADDR_VAR 0 3
16324: PUSH
16325: LD_INT 40
16327: PPUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 321
16337: PUSH
16338: LD_INT 2
16340: EQUAL
16341: ST_TO_ADDR
16342: GO 16378
16344: LD_INT 27
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16377
16352: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16353: LD_ADDR_VAR 0 3
16357: PUSH
16358: LD_INT 35
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 321
16370: PUSH
16371: LD_INT 2
16373: EQUAL
16374: ST_TO_ADDR
16375: GO 16378
16377: POP
// end ;
16378: LD_VAR 0 3
16382: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16383: LD_INT 0
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
16391: PPUSH
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
// result := false ;
16396: LD_ADDR_VAR 0 6
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// if btype = b_depot then
16404: LD_VAR 0 2
16408: PUSH
16409: LD_INT 0
16411: EQUAL
16412: IFFALSE 16424
// begin result := true ;
16414: LD_ADDR_VAR 0 6
16418: PUSH
16419: LD_INT 1
16421: ST_TO_ADDR
// exit ;
16422: GO 17250
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16424: LD_VAR 0 1
16428: NOT
16429: PUSH
16430: LD_VAR 0 1
16434: PPUSH
16435: CALL_OW 266
16439: PUSH
16440: LD_INT 0
16442: PUSH
16443: LD_INT 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: IN
16450: NOT
16451: OR
16452: PUSH
16453: LD_VAR 0 2
16457: NOT
16458: OR
16459: PUSH
16460: LD_VAR 0 5
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: LD_INT 2
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: LD_INT 4
16479: PUSH
16480: LD_INT 5
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: IN
16491: NOT
16492: OR
16493: PUSH
16494: LD_VAR 0 3
16498: PPUSH
16499: LD_VAR 0 4
16503: PPUSH
16504: CALL_OW 488
16508: NOT
16509: OR
16510: IFFALSE 16514
// exit ;
16512: GO 17250
// side := GetSide ( depot ) ;
16514: LD_ADDR_VAR 0 9
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 255
16528: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16529: LD_VAR 0 9
16533: PPUSH
16534: LD_VAR 0 2
16538: PPUSH
16539: CALL 16007 0 2
16543: NOT
16544: IFFALSE 16548
// exit ;
16546: GO 17250
// pom := GetBase ( depot ) ;
16548: LD_ADDR_VAR 0 10
16552: PUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 274
16562: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16563: LD_ADDR_VAR 0 11
16567: PUSH
16568: LD_VAR 0 2
16572: PPUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 248
16582: PPUSH
16583: CALL_OW 450
16587: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16588: LD_VAR 0 10
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 275
16600: PUSH
16601: LD_VAR 0 11
16605: PUSH
16606: LD_INT 1
16608: ARRAY
16609: GREATEREQUAL
16610: PUSH
16611: LD_VAR 0 10
16615: PPUSH
16616: LD_INT 2
16618: PPUSH
16619: CALL_OW 275
16623: PUSH
16624: LD_VAR 0 11
16628: PUSH
16629: LD_INT 2
16631: ARRAY
16632: GREATEREQUAL
16633: AND
16634: PUSH
16635: LD_VAR 0 10
16639: PPUSH
16640: LD_INT 3
16642: PPUSH
16643: CALL_OW 275
16647: PUSH
16648: LD_VAR 0 11
16652: PUSH
16653: LD_INT 3
16655: ARRAY
16656: GREATEREQUAL
16657: AND
16658: NOT
16659: IFFALSE 16663
// exit ;
16661: GO 17250
// if GetBType ( depot ) = b_depot then
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 266
16672: PUSH
16673: LD_INT 0
16675: EQUAL
16676: IFFALSE 16688
// dist := 28 else
16678: LD_ADDR_VAR 0 14
16682: PUSH
16683: LD_INT 28
16685: ST_TO_ADDR
16686: GO 16696
// dist := 36 ;
16688: LD_ADDR_VAR 0 14
16692: PUSH
16693: LD_INT 36
16695: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16696: LD_VAR 0 1
16700: PPUSH
16701: LD_VAR 0 3
16705: PPUSH
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 297
16715: PUSH
16716: LD_VAR 0 14
16720: GREATER
16721: IFFALSE 16725
// exit ;
16723: GO 17250
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16725: LD_ADDR_VAR 0 12
16729: PUSH
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_VAR 0 4
16744: PPUSH
16745: LD_VAR 0 5
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 248
16759: PPUSH
16760: LD_INT 0
16762: PPUSH
16763: CALL 17255 0 6
16767: ST_TO_ADDR
// if not hexes then
16768: LD_VAR 0 12
16772: NOT
16773: IFFALSE 16777
// exit ;
16775: GO 17250
// hex := GetHexInfo ( x , y ) ;
16777: LD_ADDR_VAR 0 15
16781: PUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: LD_VAR 0 4
16791: PPUSH
16792: CALL_OW 546
16796: ST_TO_ADDR
// if hex [ 1 ] then
16797: LD_VAR 0 15
16801: PUSH
16802: LD_INT 1
16804: ARRAY
16805: IFFALSE 16809
// exit ;
16807: GO 17250
// height := hex [ 2 ] ;
16809: LD_ADDR_VAR 0 13
16813: PUSH
16814: LD_VAR 0 15
16818: PUSH
16819: LD_INT 2
16821: ARRAY
16822: ST_TO_ADDR
// for i = 1 to hexes do
16823: LD_ADDR_VAR 0 7
16827: PUSH
16828: DOUBLE
16829: LD_INT 1
16831: DEC
16832: ST_TO_ADDR
16833: LD_VAR 0 12
16837: PUSH
16838: FOR_TO
16839: IFFALSE 17169
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16841: LD_VAR 0 12
16845: PUSH
16846: LD_VAR 0 7
16850: ARRAY
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PPUSH
16856: LD_VAR 0 12
16860: PUSH
16861: LD_VAR 0 7
16865: ARRAY
16866: PUSH
16867: LD_INT 2
16869: ARRAY
16870: PPUSH
16871: CALL_OW 488
16875: NOT
16876: PUSH
16877: LD_VAR 0 12
16881: PUSH
16882: LD_VAR 0 7
16886: ARRAY
16887: PUSH
16888: LD_INT 1
16890: ARRAY
16891: PPUSH
16892: LD_VAR 0 12
16896: PUSH
16897: LD_VAR 0 7
16901: ARRAY
16902: PUSH
16903: LD_INT 2
16905: ARRAY
16906: PPUSH
16907: CALL_OW 428
16911: PUSH
16912: LD_INT 0
16914: GREATER
16915: OR
16916: PUSH
16917: LD_VAR 0 12
16921: PUSH
16922: LD_VAR 0 7
16926: ARRAY
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: PPUSH
16932: LD_VAR 0 12
16936: PUSH
16937: LD_VAR 0 7
16941: ARRAY
16942: PUSH
16943: LD_INT 2
16945: ARRAY
16946: PPUSH
16947: CALL_OW 351
16951: OR
16952: IFFALSE 16958
// exit ;
16954: POP
16955: POP
16956: GO 17250
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16958: LD_ADDR_VAR 0 8
16962: PUSH
16963: LD_VAR 0 12
16967: PUSH
16968: LD_VAR 0 7
16972: ARRAY
16973: PUSH
16974: LD_INT 1
16976: ARRAY
16977: PPUSH
16978: LD_VAR 0 12
16982: PUSH
16983: LD_VAR 0 7
16987: ARRAY
16988: PUSH
16989: LD_INT 2
16991: ARRAY
16992: PPUSH
16993: CALL_OW 546
16997: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16998: LD_VAR 0 8
17002: PUSH
17003: LD_INT 1
17005: ARRAY
17006: PUSH
17007: LD_VAR 0 8
17011: PUSH
17012: LD_INT 2
17014: ARRAY
17015: PUSH
17016: LD_VAR 0 13
17020: PUSH
17021: LD_INT 2
17023: PLUS
17024: GREATER
17025: OR
17026: PUSH
17027: LD_VAR 0 8
17031: PUSH
17032: LD_INT 2
17034: ARRAY
17035: PUSH
17036: LD_VAR 0 13
17040: PUSH
17041: LD_INT 2
17043: MINUS
17044: LESS
17045: OR
17046: PUSH
17047: LD_VAR 0 8
17051: PUSH
17052: LD_INT 3
17054: ARRAY
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: LD_INT 8
17061: PUSH
17062: LD_INT 9
17064: PUSH
17065: LD_INT 10
17067: PUSH
17068: LD_INT 11
17070: PUSH
17071: LD_INT 12
17073: PUSH
17074: LD_INT 13
17076: PUSH
17077: LD_INT 16
17079: PUSH
17080: LD_INT 17
17082: PUSH
17083: LD_INT 18
17085: PUSH
17086: LD_INT 19
17088: PUSH
17089: LD_INT 20
17091: PUSH
17092: LD_INT 21
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: IN
17110: NOT
17111: OR
17112: PUSH
17113: LD_VAR 0 8
17117: PUSH
17118: LD_INT 5
17120: ARRAY
17121: NOT
17122: OR
17123: PUSH
17124: LD_VAR 0 8
17128: PUSH
17129: LD_INT 6
17131: ARRAY
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: LD_INT 2
17138: PUSH
17139: LD_INT 7
17141: PUSH
17142: LD_INT 9
17144: PUSH
17145: LD_INT 10
17147: PUSH
17148: LD_INT 11
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: IN
17159: NOT
17160: OR
17161: IFFALSE 17167
// exit ;
17163: POP
17164: POP
17165: GO 17250
// end ;
17167: GO 16838
17169: POP
17170: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17171: LD_VAR 0 9
17175: PPUSH
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_VAR 0 4
17185: PPUSH
17186: LD_INT 20
17188: PPUSH
17189: CALL 9173 0 4
17193: PUSH
17194: LD_INT 4
17196: ARRAY
17197: IFFALSE 17201
// exit ;
17199: GO 17250
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17201: LD_VAR 0 2
17205: PUSH
17206: LD_INT 29
17208: PUSH
17209: LD_INT 30
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: IN
17216: PUSH
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_VAR 0 4
17226: PPUSH
17227: LD_VAR 0 9
17231: PPUSH
17232: CALL_OW 440
17236: NOT
17237: AND
17238: IFFALSE 17242
// exit ;
17240: GO 17250
// result := true ;
17242: LD_ADDR_VAR 0 6
17246: PUSH
17247: LD_INT 1
17249: ST_TO_ADDR
// end ;
17250: LD_VAR 0 6
17254: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17255: LD_INT 0
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
17307: PPUSH
17308: PPUSH
17309: PPUSH
17310: PPUSH
17311: PPUSH
17312: PPUSH
17313: PPUSH
17314: PPUSH
// result = [ ] ;
17315: LD_ADDR_VAR 0 7
17319: PUSH
17320: EMPTY
17321: ST_TO_ADDR
// temp_list = [ ] ;
17322: LD_ADDR_VAR 0 9
17326: PUSH
17327: EMPTY
17328: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17329: LD_VAR 0 4
17333: PUSH
17334: LD_INT 0
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: LD_INT 3
17345: PUSH
17346: LD_INT 4
17348: PUSH
17349: LD_INT 5
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: IN
17360: NOT
17361: PUSH
17362: LD_VAR 0 1
17366: PUSH
17367: LD_INT 0
17369: PUSH
17370: LD_INT 1
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: IN
17377: PUSH
17378: LD_VAR 0 5
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: LD_INT 3
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: LIST
17396: IN
17397: NOT
17398: AND
17399: OR
17400: IFFALSE 17404
// exit ;
17402: GO 35795
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 6
17411: PUSH
17412: LD_INT 7
17414: PUSH
17415: LD_INT 8
17417: PUSH
17418: LD_INT 13
17420: PUSH
17421: LD_INT 12
17423: PUSH
17424: LD_INT 15
17426: PUSH
17427: LD_INT 11
17429: PUSH
17430: LD_INT 14
17432: PUSH
17433: LD_INT 10
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: IN
17447: IFFALSE 17457
// btype = b_lab ;
17449: LD_ADDR_VAR 0 1
17453: PUSH
17454: LD_INT 6
17456: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17457: LD_VAR 0 6
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: IN
17476: NOT
17477: PUSH
17478: LD_VAR 0 1
17482: PUSH
17483: LD_INT 0
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: LD_INT 6
17497: PUSH
17498: LD_INT 36
17500: PUSH
17501: LD_INT 4
17503: PUSH
17504: LD_INT 5
17506: PUSH
17507: LD_INT 31
17509: PUSH
17510: LD_INT 32
17512: PUSH
17513: LD_INT 33
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: IN
17529: NOT
17530: PUSH
17531: LD_VAR 0 6
17535: PUSH
17536: LD_INT 1
17538: EQUAL
17539: AND
17540: OR
17541: PUSH
17542: LD_VAR 0 1
17546: PUSH
17547: LD_INT 2
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: IN
17557: NOT
17558: PUSH
17559: LD_VAR 0 6
17563: PUSH
17564: LD_INT 2
17566: EQUAL
17567: AND
17568: OR
17569: IFFALSE 17579
// mode = 0 ;
17571: LD_ADDR_VAR 0 6
17575: PUSH
17576: LD_INT 0
17578: ST_TO_ADDR
// case mode of 0 :
17579: LD_VAR 0 6
17583: PUSH
17584: LD_INT 0
17586: DOUBLE
17587: EQUAL
17588: IFTRUE 17592
17590: GO 29045
17592: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17593: LD_ADDR_VAR 0 11
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 1
17613: NEG
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 1
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 1
17651: NEG
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 1
17662: NEG
17663: PUSH
17664: LD_INT 1
17666: NEG
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 1
17674: NEG
17675: PUSH
17676: LD_INT 2
17678: NEG
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: LD_INT 2
17689: NEG
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: LD_INT 1
17700: NEG
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 1
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: NEG
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 0
17749: PUSH
17750: LD_INT 3
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: NEG
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17786: LD_ADDR_VAR 0 12
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 1
17806: NEG
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: LD_INT 0
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: NEG
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: NEG
17856: PUSH
17857: LD_INT 1
17859: NEG
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: LD_INT 1
17870: NEG
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 2
17878: PUSH
17879: LD_INT 0
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: PUSH
17889: LD_INT 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: NEG
17910: PUSH
17911: LD_INT 0
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: NEG
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: NEG
17933: PUSH
17934: LD_INT 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 3
17943: NEG
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 3
17954: NEG
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17982: LD_ADDR_VAR 0 13
17986: PUSH
17987: LD_INT 0
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 1
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: NEG
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: NEG
18064: PUSH
18065: LD_INT 2
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 2
18105: NEG
18106: PUSH
18107: LD_INT 1
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 2
18117: NEG
18118: PUSH
18119: LD_INT 2
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 2
18129: NEG
18130: PUSH
18131: LD_INT 3
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 3
18141: NEG
18142: PUSH
18143: LD_INT 2
18145: NEG
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 3
18153: NEG
18154: PUSH
18155: LD_INT 3
18157: NEG
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18181: LD_ADDR_VAR 0 14
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: LD_INT 1
18201: NEG
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 2
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 1
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: LD_INT 2
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 1
18316: NEG
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 1
18327: NEG
18328: PUSH
18329: LD_INT 3
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 3
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 2
18353: NEG
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18377: LD_ADDR_VAR 0 15
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 1
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 1
18435: NEG
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: NEG
18447: PUSH
18448: LD_INT 1
18450: NEG
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 1
18458: PUSH
18459: LD_INT 1
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: LD_INT 0
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 2
18500: NEG
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 2
18511: NEG
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 1
18526: NEG
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18570: LD_ADDR_VAR 0 16
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 1
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 0
18618: PUSH
18619: LD_INT 1
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: LD_INT 0
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 1
18639: NEG
18640: PUSH
18641: LD_INT 1
18643: NEG
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 2
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 1
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 2
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: LD_INT 3
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: LD_INT 3
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18763: LD_ADDR_VAR 0 17
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 0
18811: PUSH
18812: LD_INT 1
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: NEG
18822: PUSH
18823: LD_INT 0
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: NEG
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 1
18844: NEG
18845: PUSH
18846: LD_INT 2
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 0
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 1
18870: NEG
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: LD_INT 0
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 2
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 2
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 0
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 1
18928: NEG
18929: PUSH
18930: LD_INT 1
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 2
18962: NEG
18963: PUSH
18964: LD_INT 2
18966: NEG
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18993: LD_ADDR_VAR 0 18
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: LD_INT 1
19184: NEG
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 2
19192: NEG
19193: PUSH
19194: LD_INT 2
19196: NEG
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19223: LD_ADDR_VAR 0 19
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 2
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: LD_INT 0
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 2
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: NEG
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 2
19422: NEG
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19453: LD_ADDR_VAR 0 20
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: NEG
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: NEG
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 2
19652: NEG
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19683: LD_ADDR_VAR 0 21
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19913: LD_ADDR_VAR 0 22
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: NEG
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: NEG
20113: PUSH
20114: LD_INT 2
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20143: LD_ADDR_VAR 0 23
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: NEG
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: LD_INT 2
20346: NEG
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: LD_INT 3
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: NEG
20367: PUSH
20368: LD_INT 3
20370: NEG
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 2
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20423: LD_ADDR_VAR 0 24
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: LD_INT 1
20443: NEG
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 1
20481: NEG
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 1
20496: NEG
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 1
20504: NEG
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 0
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: LD_INT 1
20530: NEG
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 2
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: LD_INT 2
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: LD_INT 2
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 2
20599: NEG
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 2
20610: NEG
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: NEG
20623: PUSH
20624: LD_INT 2
20626: NEG
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: LD_INT 2
20637: NEG
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: LD_INT 3
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 3
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20699: LD_ADDR_VAR 0 25
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: NEG
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: NEG
20781: PUSH
20782: LD_INT 2
20784: NEG
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 2
20795: NEG
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 2
20814: PUSH
20815: LD_INT 0
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 2
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: NEG
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: NEG
20887: PUSH
20888: LD_INT 1
20890: NEG
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: NEG
20899: PUSH
20900: LD_INT 2
20902: NEG
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: LD_INT 2
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20973: LD_ADDR_VAR 0 26
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: LD_INT 1
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 0
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 0
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: LD_INT 0
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: LD_INT 1
21046: NEG
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: LD_INT 2
21058: NEG
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: LD_INT 2
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 2
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 2
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: NEG
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: NEG
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: LD_INT 2
21176: NEG
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 3
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: LD_INT 3
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21249: LD_ADDR_VAR 0 27
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: NEG
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 1
21330: NEG
21331: PUSH
21332: LD_INT 2
21334: NEG
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: LD_INT 2
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 1
21414: NEG
21415: PUSH
21416: LD_INT 1
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: NEG
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 2
21436: NEG
21437: PUSH
21438: LD_INT 1
21440: NEG
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: NEG
21449: PUSH
21450: LD_INT 2
21452: NEG
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 2
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 3
21482: NEG
21483: PUSH
21484: LD_INT 1
21486: NEG
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: PUSH
21492: LD_INT 3
21494: NEG
21495: PUSH
21496: LD_INT 2
21498: NEG
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21529: LD_ADDR_VAR 0 28
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: LD_INT 1
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: LD_INT 1
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: NEG
21611: PUSH
21612: LD_INT 2
21614: NEG
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 2
21625: NEG
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: LD_INT 1
21636: NEG
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: NEG
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 2
21716: NEG
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: NEG
21741: PUSH
21742: LD_INT 3
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: LD_INT 3
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 3
21764: NEG
21765: PUSH
21766: LD_INT 1
21768: NEG
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 3
21776: NEG
21777: PUSH
21778: LD_INT 2
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21811: LD_ADDR_VAR 0 29
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 0
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 0
21859: PUSH
21860: LD_INT 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 1
21880: NEG
21881: PUSH
21882: LD_INT 1
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 2
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: LD_INT 2
21907: NEG
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 1
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: LD_INT 0
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: LD_INT 1
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 0
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 2
21977: NEG
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: LD_INT 2
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: NEG
22002: PUSH
22003: LD_INT 3
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 1
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 3
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 3
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 3
22055: NEG
22056: PUSH
22057: LD_INT 2
22059: NEG
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22090: LD_ADDR_VAR 0 30
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 1
22159: NEG
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: LD_INT 2
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 0
22183: PUSH
22184: LD_INT 2
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 1
22197: NEG
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 1
22245: NEG
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 2
22256: NEG
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 2
22267: NEG
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: PUSH
22281: LD_INT 3
22283: NEG
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 3
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 2
22322: NEG
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 3
22333: NEG
22334: PUSH
22335: LD_INT 1
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22368: LD_ADDR_VAR 0 31
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 0
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 0
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: LD_INT 1
22441: NEG
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: NEG
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 2
22472: PUSH
22473: LD_INT 0
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: LD_INT 2
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 0
22512: PUSH
22513: LD_INT 2
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 3
22611: NEG
22612: PUSH
22613: LD_INT 2
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22646: LD_ADDR_VAR 0 32
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 1
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: LD_INT 1
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 0
22694: PUSH
22695: LD_INT 1
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 1
22704: NEG
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 1
22715: NEG
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 1
22727: NEG
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: LD_INT 2
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 1
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 2
22771: PUSH
22772: LD_INT 2
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 0
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 2
22812: NEG
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 2
22823: NEG
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 3
22839: NEG
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 3
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22924: LD_ADDR_VAR 0 33
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 1
22962: PUSH
22963: LD_INT 1
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: LD_INT 0
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: NEG
22994: PUSH
22995: LD_INT 1
22997: NEG
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 1
23005: NEG
23006: PUSH
23007: LD_INT 2
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 2
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 1
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: LD_INT 0
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 2
23114: NEG
23115: PUSH
23116: LD_INT 3
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 2
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 3
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 1
23157: NEG
23158: PUSH
23159: LD_INT 2
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 3
23168: NEG
23169: PUSH
23170: LD_INT 2
23172: NEG
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23203: LD_ADDR_VAR 0 34
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 1
23261: NEG
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 1
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: NEG
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: LD_INT 2
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: LD_INT 2
23299: NEG
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: LD_INT 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 2
23359: NEG
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: NEG
23371: PUSH
23372: LD_INT 1
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: NEG
23383: PUSH
23384: LD_INT 2
23386: NEG
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: LD_INT 3
23398: NEG
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 3
23417: PUSH
23418: LD_INT 2
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 3
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23483: LD_ADDR_VAR 0 35
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 0
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 0
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 0
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 1
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 2
23574: NEG
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23595: LD_ADDR_VAR 0 36
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: LD_INT 0
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 1
23653: NEG
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 1
23676: NEG
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23707: LD_ADDR_VAR 0 37
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23819: LD_ADDR_VAR 0 38
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 0
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: NEG
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23931: LD_ADDR_VAR 0 39
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: LD_INT 2
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24043: LD_ADDR_VAR 0 40
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 0
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24155: LD_ADDR_VAR 0 41
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: LD_INT 1
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: LD_INT 1
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 1
24213: NEG
24214: PUSH
24215: LD_INT 0
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: NEG
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: LD_INT 0
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 1
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 2
24310: NEG
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: LD_INT 1
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: NEG
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: LD_INT 3
24349: NEG
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: LD_INT 1
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 3
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 3
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: LD_INT 3
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 3
24429: NEG
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PUSH
24438: LD_INT 3
24440: NEG
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 3
24452: NEG
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 3
24464: NEG
24465: PUSH
24466: LD_INT 3
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24505: LD_ADDR_VAR 0 42
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 0
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: NEG
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: LD_INT 1
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 1
24586: NEG
24587: PUSH
24588: LD_INT 2
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: LD_INT 2
24601: NEG
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 2
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 0
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 1
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 2
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: LD_INT 3
24699: NEG
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: LD_INT 3
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: LD_INT 2
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 3
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: LD_INT 3
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 3
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 3
24802: NEG
24803: PUSH
24804: LD_INT 2
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 3
24814: NEG
24815: PUSH
24816: LD_INT 3
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24855: LD_ADDR_VAR 0 43
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 1
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: NEG
24937: PUSH
24938: LD_INT 2
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 1
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 1
25010: NEG
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 2
25021: NEG
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 2
25032: NEG
25033: PUSH
25034: LD_INT 1
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: LD_INT 3
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 3
25059: NEG
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 2
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 2
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 3
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 3
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 3
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 3
25151: NEG
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 3
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25203: LD_ADDR_VAR 0 44
25207: PUSH
25208: LD_INT 0
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: LD_INT 3
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 3
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 3
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: LD_INT 3
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: NEG
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 3
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 3
25500: NEG
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 3
25512: NEG
25513: PUSH
25514: LD_INT 3
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25553: LD_ADDR_VAR 0 45
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: LD_INT 2
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: LD_INT 2
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 2
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: LD_INT 3
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 0
25767: PUSH
25768: LD_INT 3
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: LD_INT 2
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: LD_INT 2
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: LD_INT 3
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 3
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 0
25829: PUSH
25830: LD_INT 3
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: NEG
25851: PUSH
25852: LD_INT 2
25854: NEG
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: NEG
25863: PUSH
25864: LD_INT 3
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25903: LD_ADDR_VAR 0 46
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 2
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: NEG
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: NEG
26093: PUSH
26094: LD_INT 3
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: LD_INT 3
26107: NEG
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 2
26118: NEG
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: LD_INT 1
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 3
26199: NEG
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 3
26210: NEG
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26251: LD_ADDR_VAR 0 47
26255: PUSH
26256: LD_INT 0
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 1
26309: NEG
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: NEG
26379: PUSH
26380: LD_INT 2
26382: NEG
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26402: LD_ADDR_VAR 0 48
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26549: LD_ADDR_VAR 0 49
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: LD_INT 1
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26693: LD_ADDR_VAR 0 50
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 0
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 2
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26837: LD_ADDR_VAR 0 51
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 1
26857: NEG
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: NEG
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: NEG
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: NEG
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26984: LD_ADDR_VAR 0 52
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 1
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 2
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 2
27111: NEG
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27135: LD_ADDR_VAR 0 53
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: LD_INT 2
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: NEG
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27365: LD_ADDR_VAR 0 54
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: LD_INT 2
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27595: LD_ADDR_VAR 0 55
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: LD_INT 2
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27825: LD_ADDR_VAR 0 56
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: LD_INT 2
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28055: LD_ADDR_VAR 0 57
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28285: LD_ADDR_VAR 0 58
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28515: LD_ADDR_VAR 0 59
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28603: LD_ADDR_VAR 0 60
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28691: LD_ADDR_VAR 0 61
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28779: LD_ADDR_VAR 0 62
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28867: LD_ADDR_VAR 0 63
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28955: LD_ADDR_VAR 0 64
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 0
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: LD_INT 1
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: ST_TO_ADDR
// end ; 1 :
29043: GO 34940
29045: LD_INT 1
29047: DOUBLE
29048: EQUAL
29049: IFTRUE 29053
29051: GO 31676
29053: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29054: LD_ADDR_VAR 0 11
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29098: LD_ADDR_VAR 0 12
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29139: LD_ADDR_VAR 0 13
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29179: LD_ADDR_VAR 0 14
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29220: LD_ADDR_VAR 0 15
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29264: LD_ADDR_VAR 0 16
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29310: LD_ADDR_VAR 0 17
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 3
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 3
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29354: LD_ADDR_VAR 0 18
29358: PUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 3
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 3
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29395: LD_ADDR_VAR 0 19
29399: PUSH
29400: LD_INT 3
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 3
29412: PUSH
29413: LD_INT 3
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 2
29422: PUSH
29423: LD_INT 3
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29435: LD_ADDR_VAR 0 20
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 3
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 3
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29476: LD_ADDR_VAR 0 21
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 3
29494: NEG
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 3
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29520: LD_ADDR_VAR 0 22
29524: PUSH
29525: LD_INT 2
29527: NEG
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 3
29551: NEG
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29566: LD_ADDR_VAR 0 23
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 4
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: LD_INT 3
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: LIST
29609: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29610: LD_ADDR_VAR 0 24
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 4
29638: PUSH
29639: LD_INT 1
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29651: LD_ADDR_VAR 0 25
29655: PUSH
29656: LD_INT 3
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 4
29668: PUSH
29669: LD_INT 3
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: LD_INT 4
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29691: LD_ADDR_VAR 0 26
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: LD_INT 4
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: LIST
29731: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29732: LD_ADDR_VAR 0 27
29736: PUSH
29737: LD_INT 3
29739: NEG
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: LD_INT 1
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 4
29761: NEG
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29776: LD_ADDR_VAR 0 28
29780: PUSH
29781: LD_INT 3
29783: NEG
29784: PUSH
29785: LD_INT 3
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 3
29795: NEG
29796: PUSH
29797: LD_INT 4
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 4
29807: NEG
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29822: LD_ADDR_VAR 0 29
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: LD_INT 3
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 3
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 4
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 4
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 3
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: LD_INT 5
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: LD_INT 5
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: LD_INT 4
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 6
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 6
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 5
29957: NEG
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29977: LD_ADDR_VAR 0 30
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 4
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 4
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 5
30057: PUSH
30058: LD_INT 0
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 5
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 5
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 6
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 6
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30120: LD_ADDR_VAR 0 31
30124: PUSH
30125: LD_INT 3
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: LD_INT 3
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 4
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 4
30167: PUSH
30168: LD_INT 4
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: LD_INT 4
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 5
30187: PUSH
30188: LD_INT 4
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 5
30197: PUSH
30198: LD_INT 5
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 4
30207: PUSH
30208: LD_INT 5
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 6
30217: PUSH
30218: LD_INT 5
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 6
30227: PUSH
30228: LD_INT 6
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 5
30237: PUSH
30238: LD_INT 6
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30259: LD_ADDR_VAR 0 32
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: LD_INT 3
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: NEG
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 5
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 1
30348: NEG
30349: PUSH
30350: LD_INT 4
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: LD_INT 6
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 6
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: NEG
30380: PUSH
30381: LD_INT 5
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30402: LD_ADDR_VAR 0 33
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 3
30420: NEG
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: NEG
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 3
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 4
30454: NEG
30455: PUSH
30456: LD_INT 0
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 4
30465: NEG
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 4
30477: NEG
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 5
30488: NEG
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 5
30499: NEG
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 5
30511: NEG
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 6
30522: NEG
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 6
30533: NEG
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30557: LD_ADDR_VAR 0 34
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 3
30588: NEG
30589: PUSH
30590: LD_INT 3
30592: NEG
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: LD_INT 4
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 4
30612: NEG
30613: PUSH
30614: LD_INT 3
30616: NEG
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 4
30624: NEG
30625: PUSH
30626: LD_INT 4
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 4
30636: NEG
30637: PUSH
30638: LD_INT 5
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 5
30648: NEG
30649: PUSH
30650: LD_INT 4
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 5
30660: NEG
30661: PUSH
30662: LD_INT 5
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 5
30672: NEG
30673: PUSH
30674: LD_INT 6
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 6
30684: NEG
30685: PUSH
30686: LD_INT 5
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 6
30696: NEG
30697: PUSH
30698: LD_INT 6
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30720: LD_ADDR_VAR 0 41
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: LD_INT 3
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30764: LD_ADDR_VAR 0 42
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30805: LD_ADDR_VAR 0 43
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30845: LD_ADDR_VAR 0 44
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: LD_INT 3
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30886: LD_ADDR_VAR 0 45
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30930: LD_ADDR_VAR 0 46
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30976: LD_ADDR_VAR 0 47
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: LD_INT 3
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31009: LD_ADDR_VAR 0 48
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 2
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31040: LD_ADDR_VAR 0 49
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31069: LD_ADDR_VAR 0 50
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 3
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 3
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31098: LD_ADDR_VAR 0 51
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31129: LD_ADDR_VAR 0 52
31133: PUSH
31134: LD_INT 3
31136: NEG
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31162: LD_ADDR_VAR 0 53
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: LD_INT 3
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31206: LD_ADDR_VAR 0 54
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 3
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31247: LD_ADDR_VAR 0 55
31251: PUSH
31252: LD_INT 3
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 3
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31287: LD_ADDR_VAR 0 56
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 2
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31328: LD_ADDR_VAR 0 57
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 3
31346: NEG
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: LIST
31371: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31372: LD_ADDR_VAR 0 58
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: LD_INT 3
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31418: LD_ADDR_VAR 0 59
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31462: LD_ADDR_VAR 0 60
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31503: LD_ADDR_VAR 0 61
31507: PUSH
31508: LD_INT 2
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: LD_INT 2
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31543: LD_ADDR_VAR 0 62
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: LD_INT 2
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31584: LD_ADDR_VAR 0 63
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 2
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31628: LD_ADDR_VAR 0 64
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: ST_TO_ADDR
// end ; 2 :
31674: GO 34940
31676: LD_INT 2
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31684
31682: GO 34939
31684: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31685: LD_ADDR_VAR 0 29
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 4
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 5
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 5
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 4
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 4
31805: PUSH
31806: LD_INT 3
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 4
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 2
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 2
31845: PUSH
31846: LD_INT 2
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 4
31855: PUSH
31856: LD_INT 2
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 4
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 4
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 3
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 4
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 5
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 4
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 5
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 3
31968: NEG
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 3
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 3
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 4
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 4
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 4
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: NEG
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 4
32070: NEG
32071: PUSH
32072: LD_INT 4
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 4
32082: NEG
32083: PUSH
32084: LD_INT 5
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 3
32094: NEG
32095: PUSH
32096: LD_INT 4
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 3
32106: NEG
32107: PUSH
32108: LD_INT 3
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: NEG
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 5
32130: NEG
32131: PUSH
32132: LD_INT 4
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 5
32142: NEG
32143: PUSH
32144: LD_INT 5
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 3
32154: NEG
32155: PUSH
32156: LD_INT 5
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 5
32166: NEG
32167: PUSH
32168: LD_INT 3
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32223: LD_ADDR_VAR 0 30
32227: PUSH
32228: LD_INT 4
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 4
32240: PUSH
32241: LD_INT 3
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 5
32250: PUSH
32251: LD_INT 4
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 5
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 4
32270: PUSH
32271: LD_INT 5
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: LD_INT 4
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 3
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 5
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 5
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 3
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 4
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 4
32413: NEG
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 4
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 3
32436: NEG
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: NEG
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 4
32458: NEG
32459: PUSH
32460: LD_INT 1
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 5
32469: NEG
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 5
32480: NEG
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 5
32492: NEG
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: NEG
32505: PUSH
32506: LD_INT 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 3
32515: NEG
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: LD_INT 4
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: NEG
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 3
32563: NEG
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 4
32575: NEG
32576: PUSH
32577: LD_INT 3
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: NEG
32588: PUSH
32589: LD_INT 4
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 4
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 4
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 4
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 5
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 4
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 5
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: LD_INT 5
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32770: LD_ADDR_VAR 0 31
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: LD_INT 4
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 3
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 4
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 5
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 4
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: LD_INT 5
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 3
32870: NEG
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: NEG
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: NEG
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: NEG
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 4
32926: NEG
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 4
32937: NEG
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 4
32949: NEG
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: LD_INT 5
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: NEG
32997: PUSH
32998: LD_INT 4
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: NEG
33009: PUSH
33010: LD_INT 3
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 4
33020: NEG
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 5
33032: NEG
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 5
33044: NEG
33045: PUSH
33046: LD_INT 5
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: LD_INT 5
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 5
33068: NEG
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: LD_INT 3
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 4
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: LD_INT 2
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 3
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: NEG
33171: PUSH
33172: LD_INT 4
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 4
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 4
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 5
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 4
33223: PUSH
33224: LD_INT 1
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 3
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 5
33265: PUSH
33266: LD_INT 2
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33320: LD_ADDR_VAR 0 32
33324: PUSH
33325: LD_INT 4
33327: NEG
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 4
33338: NEG
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 3
33350: NEG
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 3
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 4
33372: NEG
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 5
33383: NEG
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 5
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 5
33406: NEG
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: LD_INT 3
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: LD_INT 4
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: NEG
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 4
33489: NEG
33490: PUSH
33491: LD_INT 3
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 4
33501: NEG
33502: PUSH
33503: LD_INT 4
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: LD_INT 4
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 4
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 4
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 5
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 4
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 3
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 4
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 5
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 3
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 5
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 4
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 4
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 3
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 4
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 4
33732: PUSH
33733: LD_INT 4
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 4
33742: PUSH
33743: LD_INT 3
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 5
33752: PUSH
33753: LD_INT 4
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 5
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 4
33772: PUSH
33773: LD_INT 5
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 3
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 5
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: LD_INT 5
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33867: LD_ADDR_VAR 0 33
33871: PUSH
33872: LD_INT 4
33874: NEG
33875: PUSH
33876: LD_INT 4
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 4
33886: NEG
33887: PUSH
33888: LD_INT 5
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 3
33898: NEG
33899: PUSH
33900: LD_INT 4
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 3
33910: NEG
33911: PUSH
33912: LD_INT 3
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 4
33922: NEG
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 5
33934: NEG
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 5
33946: NEG
33947: PUSH
33948: LD_INT 5
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: LD_INT 5
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 5
33970: NEG
33971: PUSH
33972: LD_INT 3
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 3
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 0
33993: PUSH
33994: LD_INT 4
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 3
34007: NEG
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: LD_INT 2
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: LD_INT 3
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: NEG
34073: PUSH
34074: LD_INT 4
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 4
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 5
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 4
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 5
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 3
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 4
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 4
34207: PUSH
34208: LD_INT 4
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: LD_INT 4
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: LD_INT 3
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 4
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 4
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 4
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 4
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: LD_INT 5
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34405: LD_ADDR_VAR 0 34
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 4
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 5
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 4
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 4
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 5
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 3
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: LD_INT 5
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 3
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 4
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 4
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 2
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 4
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 4
34607: PUSH
34608: LD_INT 4
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: LD_INT 3
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 5
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 5
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 4
34647: PUSH
34648: LD_INT 5
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 3
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 5
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 5
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: LD_INT 4
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: LD_INT 4
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: LD_INT 3
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 4
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 4
34790: NEG
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 4
34801: NEG
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 3
34813: NEG
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 4
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 5
34846: NEG
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 5
34857: NEG
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 5
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: ST_TO_ADDR
// end ; end ;
34937: GO 34940
34939: POP
// case btype of b_depot , b_warehouse :
34940: LD_VAR 0 1
34944: PUSH
34945: LD_INT 0
34947: DOUBLE
34948: EQUAL
34949: IFTRUE 34959
34951: LD_INT 1
34953: DOUBLE
34954: EQUAL
34955: IFTRUE 34959
34957: GO 35160
34959: POP
// case nation of nation_american :
34960: LD_VAR 0 5
34964: PUSH
34965: LD_INT 1
34967: DOUBLE
34968: EQUAL
34969: IFTRUE 34973
34971: GO 35029
34973: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34974: LD_ADDR_VAR 0 9
34978: PUSH
34979: LD_VAR 0 11
34983: PUSH
34984: LD_VAR 0 12
34988: PUSH
34989: LD_VAR 0 13
34993: PUSH
34994: LD_VAR 0 14
34998: PUSH
34999: LD_VAR 0 15
35003: PUSH
35004: LD_VAR 0 16
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: PUSH
35017: LD_VAR 0 4
35021: PUSH
35022: LD_INT 1
35024: PLUS
35025: ARRAY
35026: ST_TO_ADDR
35027: GO 35158
35029: LD_INT 2
35031: DOUBLE
35032: EQUAL
35033: IFTRUE 35037
35035: GO 35093
35037: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35038: LD_ADDR_VAR 0 9
35042: PUSH
35043: LD_VAR 0 17
35047: PUSH
35048: LD_VAR 0 18
35052: PUSH
35053: LD_VAR 0 19
35057: PUSH
35058: LD_VAR 0 20
35062: PUSH
35063: LD_VAR 0 21
35067: PUSH
35068: LD_VAR 0 22
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: PUSH
35081: LD_VAR 0 4
35085: PUSH
35086: LD_INT 1
35088: PLUS
35089: ARRAY
35090: ST_TO_ADDR
35091: GO 35158
35093: LD_INT 3
35095: DOUBLE
35096: EQUAL
35097: IFTRUE 35101
35099: GO 35157
35101: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35102: LD_ADDR_VAR 0 9
35106: PUSH
35107: LD_VAR 0 23
35111: PUSH
35112: LD_VAR 0 24
35116: PUSH
35117: LD_VAR 0 25
35121: PUSH
35122: LD_VAR 0 26
35126: PUSH
35127: LD_VAR 0 27
35131: PUSH
35132: LD_VAR 0 28
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: PUSH
35145: LD_VAR 0 4
35149: PUSH
35150: LD_INT 1
35152: PLUS
35153: ARRAY
35154: ST_TO_ADDR
35155: GO 35158
35157: POP
35158: GO 35713
35160: LD_INT 2
35162: DOUBLE
35163: EQUAL
35164: IFTRUE 35174
35166: LD_INT 3
35168: DOUBLE
35169: EQUAL
35170: IFTRUE 35174
35172: GO 35230
35174: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35175: LD_ADDR_VAR 0 9
35179: PUSH
35180: LD_VAR 0 29
35184: PUSH
35185: LD_VAR 0 30
35189: PUSH
35190: LD_VAR 0 31
35194: PUSH
35195: LD_VAR 0 32
35199: PUSH
35200: LD_VAR 0 33
35204: PUSH
35205: LD_VAR 0 34
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: PUSH
35218: LD_VAR 0 4
35222: PUSH
35223: LD_INT 1
35225: PLUS
35226: ARRAY
35227: ST_TO_ADDR
35228: GO 35713
35230: LD_INT 16
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35292
35236: LD_INT 17
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35292
35242: LD_INT 18
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35292
35248: LD_INT 19
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35292
35254: LD_INT 22
35256: DOUBLE
35257: EQUAL
35258: IFTRUE 35292
35260: LD_INT 20
35262: DOUBLE
35263: EQUAL
35264: IFTRUE 35292
35266: LD_INT 21
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35292
35272: LD_INT 23
35274: DOUBLE
35275: EQUAL
35276: IFTRUE 35292
35278: LD_INT 24
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35292
35284: LD_INT 25
35286: DOUBLE
35287: EQUAL
35288: IFTRUE 35292
35290: GO 35348
35292: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_VAR 0 35
35302: PUSH
35303: LD_VAR 0 36
35307: PUSH
35308: LD_VAR 0 37
35312: PUSH
35313: LD_VAR 0 38
35317: PUSH
35318: LD_VAR 0 39
35322: PUSH
35323: LD_VAR 0 40
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: PUSH
35336: LD_VAR 0 4
35340: PUSH
35341: LD_INT 1
35343: PLUS
35344: ARRAY
35345: ST_TO_ADDR
35346: GO 35713
35348: LD_INT 6
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35404
35354: LD_INT 7
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35404
35360: LD_INT 8
35362: DOUBLE
35363: EQUAL
35364: IFTRUE 35404
35366: LD_INT 13
35368: DOUBLE
35369: EQUAL
35370: IFTRUE 35404
35372: LD_INT 12
35374: DOUBLE
35375: EQUAL
35376: IFTRUE 35404
35378: LD_INT 15
35380: DOUBLE
35381: EQUAL
35382: IFTRUE 35404
35384: LD_INT 11
35386: DOUBLE
35387: EQUAL
35388: IFTRUE 35404
35390: LD_INT 14
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35404
35396: LD_INT 10
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35460
35404: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35405: LD_ADDR_VAR 0 9
35409: PUSH
35410: LD_VAR 0 41
35414: PUSH
35415: LD_VAR 0 42
35419: PUSH
35420: LD_VAR 0 43
35424: PUSH
35425: LD_VAR 0 44
35429: PUSH
35430: LD_VAR 0 45
35434: PUSH
35435: LD_VAR 0 46
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: PUSH
35448: LD_VAR 0 4
35452: PUSH
35453: LD_INT 1
35455: PLUS
35456: ARRAY
35457: ST_TO_ADDR
35458: GO 35713
35460: LD_INT 36
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35524
35468: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35469: LD_ADDR_VAR 0 9
35473: PUSH
35474: LD_VAR 0 47
35478: PUSH
35479: LD_VAR 0 48
35483: PUSH
35484: LD_VAR 0 49
35488: PUSH
35489: LD_VAR 0 50
35493: PUSH
35494: LD_VAR 0 51
35498: PUSH
35499: LD_VAR 0 52
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: PUSH
35512: LD_VAR 0 4
35516: PUSH
35517: LD_INT 1
35519: PLUS
35520: ARRAY
35521: ST_TO_ADDR
35522: GO 35713
35524: LD_INT 4
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35550
35530: LD_INT 5
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35550
35536: LD_INT 34
35538: DOUBLE
35539: EQUAL
35540: IFTRUE 35550
35542: LD_INT 37
35544: DOUBLE
35545: EQUAL
35546: IFTRUE 35550
35548: GO 35606
35550: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35551: LD_ADDR_VAR 0 9
35555: PUSH
35556: LD_VAR 0 53
35560: PUSH
35561: LD_VAR 0 54
35565: PUSH
35566: LD_VAR 0 55
35570: PUSH
35571: LD_VAR 0 56
35575: PUSH
35576: LD_VAR 0 57
35580: PUSH
35581: LD_VAR 0 58
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: PUSH
35594: LD_VAR 0 4
35598: PUSH
35599: LD_INT 1
35601: PLUS
35602: ARRAY
35603: ST_TO_ADDR
35604: GO 35713
35606: LD_INT 31
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35656
35612: LD_INT 32
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35656
35618: LD_INT 33
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35656
35624: LD_INT 27
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35656
35630: LD_INT 26
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35656
35636: LD_INT 28
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35656
35642: LD_INT 29
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35656
35648: LD_INT 30
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35656
35654: GO 35712
35656: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_VAR 0 59
35666: PUSH
35667: LD_VAR 0 60
35671: PUSH
35672: LD_VAR 0 61
35676: PUSH
35677: LD_VAR 0 62
35681: PUSH
35682: LD_VAR 0 63
35686: PUSH
35687: LD_VAR 0 64
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: PUSH
35700: LD_VAR 0 4
35704: PUSH
35705: LD_INT 1
35707: PLUS
35708: ARRAY
35709: ST_TO_ADDR
35710: GO 35713
35712: POP
// temp_list2 = [ ] ;
35713: LD_ADDR_VAR 0 10
35717: PUSH
35718: EMPTY
35719: ST_TO_ADDR
// for i in temp_list do
35720: LD_ADDR_VAR 0 8
35724: PUSH
35725: LD_VAR 0 9
35729: PUSH
35730: FOR_IN
35731: IFFALSE 35783
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35733: LD_ADDR_VAR 0 10
35737: PUSH
35738: LD_VAR 0 10
35742: PUSH
35743: LD_VAR 0 8
35747: PUSH
35748: LD_INT 1
35750: ARRAY
35751: PUSH
35752: LD_VAR 0 2
35756: PLUS
35757: PUSH
35758: LD_VAR 0 8
35762: PUSH
35763: LD_INT 2
35765: ARRAY
35766: PUSH
35767: LD_VAR 0 3
35771: PLUS
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: ADD
35780: ST_TO_ADDR
35781: GO 35730
35783: POP
35784: POP
// result = temp_list2 ;
35785: LD_ADDR_VAR 0 7
35789: PUSH
35790: LD_VAR 0 10
35794: ST_TO_ADDR
// end ;
35795: LD_VAR 0 7
35799: RET
// export function EnemyInRange ( unit , dist ) ; begin
35800: LD_INT 0
35802: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35803: LD_ADDR_VAR 0 3
35807: PUSH
35808: LD_VAR 0 1
35812: PPUSH
35813: CALL_OW 255
35817: PPUSH
35818: LD_VAR 0 1
35822: PPUSH
35823: CALL_OW 250
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 251
35837: PPUSH
35838: LD_VAR 0 2
35842: PPUSH
35843: CALL 9173 0 4
35847: PUSH
35848: LD_INT 4
35850: ARRAY
35851: ST_TO_ADDR
// end ;
35852: LD_VAR 0 3
35856: RET
// export function PlayerSeeMe ( unit ) ; begin
35857: LD_INT 0
35859: PPUSH
// result := See ( your_side , unit ) ;
35860: LD_ADDR_VAR 0 2
35864: PUSH
35865: LD_OWVAR 2
35869: PPUSH
35870: LD_VAR 0 1
35874: PPUSH
35875: CALL_OW 292
35879: ST_TO_ADDR
// end ;
35880: LD_VAR 0 2
35884: RET
// export function ReverseDir ( unit ) ; begin
35885: LD_INT 0
35887: PPUSH
// if not unit then
35888: LD_VAR 0 1
35892: NOT
35893: IFFALSE 35897
// exit ;
35895: GO 35920
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35897: LD_ADDR_VAR 0 2
35901: PUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 254
35911: PUSH
35912: LD_INT 3
35914: PLUS
35915: PUSH
35916: LD_INT 6
35918: MOD
35919: ST_TO_ADDR
// end ;
35920: LD_VAR 0 2
35924: RET
// export function ReverseArray ( array ) ; var i ; begin
35925: LD_INT 0
35927: PPUSH
35928: PPUSH
// if not array then
35929: LD_VAR 0 1
35933: NOT
35934: IFFALSE 35938
// exit ;
35936: GO 35993
// result := [ ] ;
35938: LD_ADDR_VAR 0 2
35942: PUSH
35943: EMPTY
35944: ST_TO_ADDR
// for i := array downto 1 do
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: DOUBLE
35951: LD_VAR 0 1
35955: INC
35956: ST_TO_ADDR
35957: LD_INT 1
35959: PUSH
35960: FOR_DOWNTO
35961: IFFALSE 35991
// result := Join ( result , array [ i ] ) ;
35963: LD_ADDR_VAR 0 2
35967: PUSH
35968: LD_VAR 0 2
35972: PPUSH
35973: LD_VAR 0 1
35977: PUSH
35978: LD_VAR 0 3
35982: ARRAY
35983: PPUSH
35984: CALL 40658 0 2
35988: ST_TO_ADDR
35989: GO 35960
35991: POP
35992: POP
// end ;
35993: LD_VAR 0 2
35997: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35998: LD_INT 0
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
// if not unit or not hexes then
36006: LD_VAR 0 1
36010: NOT
36011: PUSH
36012: LD_VAR 0 2
36016: NOT
36017: OR
36018: IFFALSE 36022
// exit ;
36020: GO 36145
// dist := 9999 ;
36022: LD_ADDR_VAR 0 5
36026: PUSH
36027: LD_INT 9999
36029: ST_TO_ADDR
// for i = 1 to hexes do
36030: LD_ADDR_VAR 0 4
36034: PUSH
36035: DOUBLE
36036: LD_INT 1
36038: DEC
36039: ST_TO_ADDR
36040: LD_VAR 0 2
36044: PUSH
36045: FOR_TO
36046: IFFALSE 36133
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36048: LD_ADDR_VAR 0 6
36052: PUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: LD_VAR 0 2
36062: PUSH
36063: LD_VAR 0 4
36067: ARRAY
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PPUSH
36073: LD_VAR 0 2
36077: PUSH
36078: LD_VAR 0 4
36082: ARRAY
36083: PUSH
36084: LD_INT 2
36086: ARRAY
36087: PPUSH
36088: CALL_OW 297
36092: ST_TO_ADDR
// if tdist < dist then
36093: LD_VAR 0 6
36097: PUSH
36098: LD_VAR 0 5
36102: LESS
36103: IFFALSE 36131
// begin hex := hexes [ i ] ;
36105: LD_ADDR_VAR 0 8
36109: PUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_VAR 0 4
36119: ARRAY
36120: ST_TO_ADDR
// dist := tdist ;
36121: LD_ADDR_VAR 0 5
36125: PUSH
36126: LD_VAR 0 6
36130: ST_TO_ADDR
// end ; end ;
36131: GO 36045
36133: POP
36134: POP
// result := hex ;
36135: LD_ADDR_VAR 0 3
36139: PUSH
36140: LD_VAR 0 8
36144: ST_TO_ADDR
// end ;
36145: LD_VAR 0 3
36149: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36150: LD_INT 0
36152: PPUSH
36153: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36154: LD_VAR 0 1
36158: NOT
36159: PUSH
36160: LD_VAR 0 1
36164: PUSH
36165: LD_INT 21
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 23
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PPUSH
36189: CALL_OW 69
36193: IN
36194: NOT
36195: OR
36196: IFFALSE 36200
// exit ;
36198: GO 36247
// for i = 1 to 3 do
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: DOUBLE
36206: LD_INT 1
36208: DEC
36209: ST_TO_ADDR
36210: LD_INT 3
36212: PUSH
36213: FOR_TO
36214: IFFALSE 36245
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 250
36225: PPUSH
36226: LD_VAR 0 1
36230: PPUSH
36231: CALL_OW 251
36235: PPUSH
36236: LD_INT 1
36238: PPUSH
36239: CALL_OW 453
36243: GO 36213
36245: POP
36246: POP
// end ;
36247: LD_VAR 0 2
36251: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36252: LD_INT 0
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
// if not unit or not enemy_unit then
36260: LD_VAR 0 1
36264: NOT
36265: PUSH
36266: LD_VAR 0 2
36270: NOT
36271: OR
36272: IFFALSE 36276
// exit ;
36274: GO 36743
// if GetLives ( i ) < 250 then
36276: LD_VAR 0 4
36280: PPUSH
36281: CALL_OW 256
36285: PUSH
36286: LD_INT 250
36288: LESS
36289: IFFALSE 36302
// begin ComAutodestruct ( i ) ;
36291: LD_VAR 0 4
36295: PPUSH
36296: CALL 36150 0 1
// exit ;
36300: GO 36743
// end ; x := GetX ( enemy_unit ) ;
36302: LD_ADDR_VAR 0 7
36306: PUSH
36307: LD_VAR 0 2
36311: PPUSH
36312: CALL_OW 250
36316: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36317: LD_ADDR_VAR 0 8
36321: PUSH
36322: LD_VAR 0 2
36326: PPUSH
36327: CALL_OW 251
36331: ST_TO_ADDR
// if not x or not y then
36332: LD_VAR 0 7
36336: NOT
36337: PUSH
36338: LD_VAR 0 8
36342: NOT
36343: OR
36344: IFFALSE 36348
// exit ;
36346: GO 36743
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36348: LD_ADDR_VAR 0 6
36352: PUSH
36353: LD_VAR 0 7
36357: PPUSH
36358: LD_INT 0
36360: PPUSH
36361: LD_INT 4
36363: PPUSH
36364: CALL_OW 272
36368: PUSH
36369: LD_VAR 0 8
36373: PPUSH
36374: LD_INT 0
36376: PPUSH
36377: LD_INT 4
36379: PPUSH
36380: CALL_OW 273
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_VAR 0 7
36393: PPUSH
36394: LD_INT 1
36396: PPUSH
36397: LD_INT 4
36399: PPUSH
36400: CALL_OW 272
36404: PUSH
36405: LD_VAR 0 8
36409: PPUSH
36410: LD_INT 1
36412: PPUSH
36413: LD_INT 4
36415: PPUSH
36416: CALL_OW 273
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_VAR 0 7
36429: PPUSH
36430: LD_INT 2
36432: PPUSH
36433: LD_INT 4
36435: PPUSH
36436: CALL_OW 272
36440: PUSH
36441: LD_VAR 0 8
36445: PPUSH
36446: LD_INT 2
36448: PPUSH
36449: LD_INT 4
36451: PPUSH
36452: CALL_OW 273
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_VAR 0 7
36465: PPUSH
36466: LD_INT 3
36468: PPUSH
36469: LD_INT 4
36471: PPUSH
36472: CALL_OW 272
36476: PUSH
36477: LD_VAR 0 8
36481: PPUSH
36482: LD_INT 3
36484: PPUSH
36485: LD_INT 4
36487: PPUSH
36488: CALL_OW 273
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_VAR 0 7
36501: PPUSH
36502: LD_INT 4
36504: PPUSH
36505: LD_INT 4
36507: PPUSH
36508: CALL_OW 272
36512: PUSH
36513: LD_VAR 0 8
36517: PPUSH
36518: LD_INT 4
36520: PPUSH
36521: LD_INT 4
36523: PPUSH
36524: CALL_OW 273
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_VAR 0 7
36537: PPUSH
36538: LD_INT 5
36540: PPUSH
36541: LD_INT 4
36543: PPUSH
36544: CALL_OW 272
36548: PUSH
36549: LD_VAR 0 8
36553: PPUSH
36554: LD_INT 5
36556: PPUSH
36557: LD_INT 4
36559: PPUSH
36560: CALL_OW 273
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: ST_TO_ADDR
// for i = tmp downto 1 do
36577: LD_ADDR_VAR 0 4
36581: PUSH
36582: DOUBLE
36583: LD_VAR 0 6
36587: INC
36588: ST_TO_ADDR
36589: LD_INT 1
36591: PUSH
36592: FOR_DOWNTO
36593: IFFALSE 36694
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36595: LD_VAR 0 6
36599: PUSH
36600: LD_VAR 0 4
36604: ARRAY
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: PPUSH
36610: LD_VAR 0 6
36614: PUSH
36615: LD_VAR 0 4
36619: ARRAY
36620: PUSH
36621: LD_INT 2
36623: ARRAY
36624: PPUSH
36625: CALL_OW 488
36629: NOT
36630: PUSH
36631: LD_VAR 0 6
36635: PUSH
36636: LD_VAR 0 4
36640: ARRAY
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: PPUSH
36646: LD_VAR 0 6
36650: PUSH
36651: LD_VAR 0 4
36655: ARRAY
36656: PUSH
36657: LD_INT 2
36659: ARRAY
36660: PPUSH
36661: CALL_OW 428
36665: PUSH
36666: LD_INT 0
36668: NONEQUAL
36669: OR
36670: IFFALSE 36692
// tmp := Delete ( tmp , i ) ;
36672: LD_ADDR_VAR 0 6
36676: PUSH
36677: LD_VAR 0 6
36681: PPUSH
36682: LD_VAR 0 4
36686: PPUSH
36687: CALL_OW 3
36691: ST_TO_ADDR
36692: GO 36592
36694: POP
36695: POP
// j := GetClosestHex ( unit , tmp ) ;
36696: LD_ADDR_VAR 0 5
36700: PUSH
36701: LD_VAR 0 1
36705: PPUSH
36706: LD_VAR 0 6
36710: PPUSH
36711: CALL 35998 0 2
36715: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36716: LD_VAR 0 1
36720: PPUSH
36721: LD_VAR 0 5
36725: PUSH
36726: LD_INT 1
36728: ARRAY
36729: PPUSH
36730: LD_VAR 0 5
36734: PUSH
36735: LD_INT 2
36737: ARRAY
36738: PPUSH
36739: CALL_OW 111
// end ;
36743: LD_VAR 0 3
36747: RET
// export function PrepareApemanSoldier ( ) ; begin
36748: LD_INT 0
36750: PPUSH
// uc_nation := 0 ;
36751: LD_ADDR_OWVAR 21
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// hc_sex := sex_male ;
36759: LD_ADDR_OWVAR 27
36763: PUSH
36764: LD_INT 1
36766: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36767: LD_ADDR_OWVAR 28
36771: PUSH
36772: LD_INT 15
36774: ST_TO_ADDR
// hc_gallery :=  ;
36775: LD_ADDR_OWVAR 33
36779: PUSH
36780: LD_STRING 
36782: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36783: LD_ADDR_OWVAR 31
36787: PUSH
36788: LD_INT 0
36790: PPUSH
36791: LD_INT 3
36793: PPUSH
36794: CALL_OW 12
36798: PUSH
36799: LD_INT 0
36801: PPUSH
36802: LD_INT 3
36804: PPUSH
36805: CALL_OW 12
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// end ;
36822: LD_VAR 0 1
36826: RET
// export function PrepareApemanEngineer ( ) ; begin
36827: LD_INT 0
36829: PPUSH
// uc_nation := 0 ;
36830: LD_ADDR_OWVAR 21
36834: PUSH
36835: LD_INT 0
36837: ST_TO_ADDR
// hc_sex := sex_male ;
36838: LD_ADDR_OWVAR 27
36842: PUSH
36843: LD_INT 1
36845: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36846: LD_ADDR_OWVAR 28
36850: PUSH
36851: LD_INT 16
36853: ST_TO_ADDR
// hc_gallery :=  ;
36854: LD_ADDR_OWVAR 33
36858: PUSH
36859: LD_STRING 
36861: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36862: LD_ADDR_OWVAR 31
36866: PUSH
36867: LD_INT 0
36869: PPUSH
36870: LD_INT 3
36872: PPUSH
36873: CALL_OW 12
36877: PUSH
36878: LD_INT 0
36880: PPUSH
36881: LD_INT 3
36883: PPUSH
36884: CALL_OW 12
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// end ;
36901: LD_VAR 0 1
36905: RET
// export function PrepareApeman ( agressivity ) ; begin
36906: LD_INT 0
36908: PPUSH
// uc_side := 0 ;
36909: LD_ADDR_OWVAR 20
36913: PUSH
36914: LD_INT 0
36916: ST_TO_ADDR
// uc_nation := 0 ;
36917: LD_ADDR_OWVAR 21
36921: PUSH
36922: LD_INT 0
36924: ST_TO_ADDR
// hc_sex := sex_male ;
36925: LD_ADDR_OWVAR 27
36929: PUSH
36930: LD_INT 1
36932: ST_TO_ADDR
// hc_class := class_apeman ;
36933: LD_ADDR_OWVAR 28
36937: PUSH
36938: LD_INT 12
36940: ST_TO_ADDR
// hc_gallery :=  ;
36941: LD_ADDR_OWVAR 33
36945: PUSH
36946: LD_STRING 
36948: ST_TO_ADDR
// if agressivity = 0 then
36949: LD_VAR 0 1
36953: PUSH
36954: LD_INT 0
36956: EQUAL
36957: IFFALSE 36969
// hc_agressivity := 0 else
36959: LD_ADDR_OWVAR 35
36963: PUSH
36964: LD_INT 0
36966: ST_TO_ADDR
36967: GO 36990
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36969: LD_ADDR_OWVAR 35
36973: PUSH
36974: LD_VAR 0 1
36978: NEG
36979: PPUSH
36980: LD_VAR 0 1
36984: PPUSH
36985: CALL_OW 12
36989: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36990: LD_ADDR_OWVAR 31
36994: PUSH
36995: LD_INT 0
36997: PPUSH
36998: LD_INT 3
37000: PPUSH
37001: CALL_OW 12
37005: PUSH
37006: LD_INT 0
37008: PPUSH
37009: LD_INT 3
37011: PPUSH
37012: CALL_OW 12
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 2
37033: RET
// export function PrepareTiger ( agressivity ) ; begin
37034: LD_INT 0
37036: PPUSH
// uc_side := 0 ;
37037: LD_ADDR_OWVAR 20
37041: PUSH
37042: LD_INT 0
37044: ST_TO_ADDR
// uc_nation := 0 ;
37045: LD_ADDR_OWVAR 21
37049: PUSH
37050: LD_INT 0
37052: ST_TO_ADDR
// hc_class := class_tiger ;
37053: LD_ADDR_OWVAR 28
37057: PUSH
37058: LD_INT 14
37060: ST_TO_ADDR
// hc_gallery :=  ;
37061: LD_ADDR_OWVAR 33
37065: PUSH
37066: LD_STRING 
37068: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37069: LD_ADDR_OWVAR 35
37073: PUSH
37074: LD_VAR 0 1
37078: NEG
37079: PPUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 12
37089: ST_TO_ADDR
// end ;
37090: LD_VAR 0 2
37094: RET
// export function PrepareEnchidna ( ) ; begin
37095: LD_INT 0
37097: PPUSH
// uc_side := 0 ;
37098: LD_ADDR_OWVAR 20
37102: PUSH
37103: LD_INT 0
37105: ST_TO_ADDR
// uc_nation := 0 ;
37106: LD_ADDR_OWVAR 21
37110: PUSH
37111: LD_INT 0
37113: ST_TO_ADDR
// hc_class := class_baggie ;
37114: LD_ADDR_OWVAR 28
37118: PUSH
37119: LD_INT 13
37121: ST_TO_ADDR
// hc_gallery :=  ;
37122: LD_ADDR_OWVAR 33
37126: PUSH
37127: LD_STRING 
37129: ST_TO_ADDR
// end ;
37130: LD_VAR 0 1
37134: RET
// export function PrepareFrog ( ) ; begin
37135: LD_INT 0
37137: PPUSH
// uc_side := 0 ;
37138: LD_ADDR_OWVAR 20
37142: PUSH
37143: LD_INT 0
37145: ST_TO_ADDR
// uc_nation := 0 ;
37146: LD_ADDR_OWVAR 21
37150: PUSH
37151: LD_INT 0
37153: ST_TO_ADDR
// hc_class := class_frog ;
37154: LD_ADDR_OWVAR 28
37158: PUSH
37159: LD_INT 19
37161: ST_TO_ADDR
// hc_gallery :=  ;
37162: LD_ADDR_OWVAR 33
37166: PUSH
37167: LD_STRING 
37169: ST_TO_ADDR
// end ;
37170: LD_VAR 0 1
37174: RET
// export function PrepareFish ( ) ; begin
37175: LD_INT 0
37177: PPUSH
// uc_side := 0 ;
37178: LD_ADDR_OWVAR 20
37182: PUSH
37183: LD_INT 0
37185: ST_TO_ADDR
// uc_nation := 0 ;
37186: LD_ADDR_OWVAR 21
37190: PUSH
37191: LD_INT 0
37193: ST_TO_ADDR
// hc_class := class_fish ;
37194: LD_ADDR_OWVAR 28
37198: PUSH
37199: LD_INT 20
37201: ST_TO_ADDR
// hc_gallery :=  ;
37202: LD_ADDR_OWVAR 33
37206: PUSH
37207: LD_STRING 
37209: ST_TO_ADDR
// end ;
37210: LD_VAR 0 1
37214: RET
// export function PrepareBird ( ) ; begin
37215: LD_INT 0
37217: PPUSH
// uc_side := 0 ;
37218: LD_ADDR_OWVAR 20
37222: PUSH
37223: LD_INT 0
37225: ST_TO_ADDR
// uc_nation := 0 ;
37226: LD_ADDR_OWVAR 21
37230: PUSH
37231: LD_INT 0
37233: ST_TO_ADDR
// hc_class := class_phororhacos ;
37234: LD_ADDR_OWVAR 28
37238: PUSH
37239: LD_INT 18
37241: ST_TO_ADDR
// hc_gallery :=  ;
37242: LD_ADDR_OWVAR 33
37246: PUSH
37247: LD_STRING 
37249: ST_TO_ADDR
// end ;
37250: LD_VAR 0 1
37254: RET
// export function PrepareHorse ( ) ; begin
37255: LD_INT 0
37257: PPUSH
// uc_side := 0 ;
37258: LD_ADDR_OWVAR 20
37262: PUSH
37263: LD_INT 0
37265: ST_TO_ADDR
// uc_nation := 0 ;
37266: LD_ADDR_OWVAR 21
37270: PUSH
37271: LD_INT 0
37273: ST_TO_ADDR
// hc_class := class_horse ;
37274: LD_ADDR_OWVAR 28
37278: PUSH
37279: LD_INT 21
37281: ST_TO_ADDR
// hc_gallery :=  ;
37282: LD_ADDR_OWVAR 33
37286: PUSH
37287: LD_STRING 
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 1
37294: RET
// export function PrepareMastodont ( ) ; begin
37295: LD_INT 0
37297: PPUSH
// uc_side := 0 ;
37298: LD_ADDR_OWVAR 20
37302: PUSH
37303: LD_INT 0
37305: ST_TO_ADDR
// uc_nation := 0 ;
37306: LD_ADDR_OWVAR 21
37310: PUSH
37311: LD_INT 0
37313: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37314: LD_ADDR_OWVAR 37
37318: PUSH
37319: LD_INT 31
37321: ST_TO_ADDR
// vc_control := control_rider ;
37322: LD_ADDR_OWVAR 38
37326: PUSH
37327: LD_INT 4
37329: ST_TO_ADDR
// end ;
37330: LD_VAR 0 1
37334: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37335: LD_INT 0
37337: PPUSH
37338: PPUSH
37339: PPUSH
// uc_side = 0 ;
37340: LD_ADDR_OWVAR 20
37344: PUSH
37345: LD_INT 0
37347: ST_TO_ADDR
// uc_nation = 0 ;
37348: LD_ADDR_OWVAR 21
37352: PUSH
37353: LD_INT 0
37355: ST_TO_ADDR
// InitHc_All ( ) ;
37356: CALL_OW 584
// InitVc ;
37360: CALL_OW 20
// if mastodonts then
37364: LD_VAR 0 6
37368: IFFALSE 37435
// for i = 1 to mastodonts do
37370: LD_ADDR_VAR 0 11
37374: PUSH
37375: DOUBLE
37376: LD_INT 1
37378: DEC
37379: ST_TO_ADDR
37380: LD_VAR 0 6
37384: PUSH
37385: FOR_TO
37386: IFFALSE 37433
// begin vc_chassis := 31 ;
37388: LD_ADDR_OWVAR 37
37392: PUSH
37393: LD_INT 31
37395: ST_TO_ADDR
// vc_control := control_rider ;
37396: LD_ADDR_OWVAR 38
37400: PUSH
37401: LD_INT 4
37403: ST_TO_ADDR
// animal := CreateVehicle ;
37404: LD_ADDR_VAR 0 12
37408: PUSH
37409: CALL_OW 45
37413: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37414: LD_VAR 0 12
37418: PPUSH
37419: LD_VAR 0 8
37423: PPUSH
37424: LD_INT 0
37426: PPUSH
37427: CALL 39563 0 3
// end ;
37431: GO 37385
37433: POP
37434: POP
// if horses then
37435: LD_VAR 0 5
37439: IFFALSE 37506
// for i = 1 to horses do
37441: LD_ADDR_VAR 0 11
37445: PUSH
37446: DOUBLE
37447: LD_INT 1
37449: DEC
37450: ST_TO_ADDR
37451: LD_VAR 0 5
37455: PUSH
37456: FOR_TO
37457: IFFALSE 37504
// begin hc_class := 21 ;
37459: LD_ADDR_OWVAR 28
37463: PUSH
37464: LD_INT 21
37466: ST_TO_ADDR
// hc_gallery :=  ;
37467: LD_ADDR_OWVAR 33
37471: PUSH
37472: LD_STRING 
37474: ST_TO_ADDR
// animal := CreateHuman ;
37475: LD_ADDR_VAR 0 12
37479: PUSH
37480: CALL_OW 44
37484: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37485: LD_VAR 0 12
37489: PPUSH
37490: LD_VAR 0 8
37494: PPUSH
37495: LD_INT 0
37497: PPUSH
37498: CALL 39563 0 3
// end ;
37502: GO 37456
37504: POP
37505: POP
// if birds then
37506: LD_VAR 0 1
37510: IFFALSE 37577
// for i = 1 to birds do
37512: LD_ADDR_VAR 0 11
37516: PUSH
37517: DOUBLE
37518: LD_INT 1
37520: DEC
37521: ST_TO_ADDR
37522: LD_VAR 0 1
37526: PUSH
37527: FOR_TO
37528: IFFALSE 37575
// begin hc_class := 18 ;
37530: LD_ADDR_OWVAR 28
37534: PUSH
37535: LD_INT 18
37537: ST_TO_ADDR
// hc_gallery =  ;
37538: LD_ADDR_OWVAR 33
37542: PUSH
37543: LD_STRING 
37545: ST_TO_ADDR
// animal := CreateHuman ;
37546: LD_ADDR_VAR 0 12
37550: PUSH
37551: CALL_OW 44
37555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37556: LD_VAR 0 12
37560: PPUSH
37561: LD_VAR 0 8
37565: PPUSH
37566: LD_INT 0
37568: PPUSH
37569: CALL 39563 0 3
// end ;
37573: GO 37527
37575: POP
37576: POP
// if tigers then
37577: LD_VAR 0 2
37581: IFFALSE 37665
// for i = 1 to tigers do
37583: LD_ADDR_VAR 0 11
37587: PUSH
37588: DOUBLE
37589: LD_INT 1
37591: DEC
37592: ST_TO_ADDR
37593: LD_VAR 0 2
37597: PUSH
37598: FOR_TO
37599: IFFALSE 37663
// begin hc_class = class_tiger ;
37601: LD_ADDR_OWVAR 28
37605: PUSH
37606: LD_INT 14
37608: ST_TO_ADDR
// hc_gallery =  ;
37609: LD_ADDR_OWVAR 33
37613: PUSH
37614: LD_STRING 
37616: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37617: LD_ADDR_OWVAR 35
37621: PUSH
37622: LD_INT 7
37624: NEG
37625: PPUSH
37626: LD_INT 7
37628: PPUSH
37629: CALL_OW 12
37633: ST_TO_ADDR
// animal := CreateHuman ;
37634: LD_ADDR_VAR 0 12
37638: PUSH
37639: CALL_OW 44
37643: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37644: LD_VAR 0 12
37648: PPUSH
37649: LD_VAR 0 8
37653: PPUSH
37654: LD_INT 0
37656: PPUSH
37657: CALL 39563 0 3
// end ;
37661: GO 37598
37663: POP
37664: POP
// if apemans then
37665: LD_VAR 0 3
37669: IFFALSE 37792
// for i = 1 to apemans do
37671: LD_ADDR_VAR 0 11
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_VAR 0 3
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37790
// begin hc_class = class_apeman ;
37689: LD_ADDR_OWVAR 28
37693: PUSH
37694: LD_INT 12
37696: ST_TO_ADDR
// hc_gallery =  ;
37697: LD_ADDR_OWVAR 33
37701: PUSH
37702: LD_STRING 
37704: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37705: LD_ADDR_OWVAR 35
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PPUSH
37714: LD_INT 2
37716: PPUSH
37717: CALL_OW 12
37721: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37722: LD_ADDR_OWVAR 31
37726: PUSH
37727: LD_INT 1
37729: PPUSH
37730: LD_INT 3
37732: PPUSH
37733: CALL_OW 12
37737: PUSH
37738: LD_INT 1
37740: PPUSH
37741: LD_INT 3
37743: PPUSH
37744: CALL_OW 12
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: ST_TO_ADDR
// animal := CreateHuman ;
37761: LD_ADDR_VAR 0 12
37765: PUSH
37766: CALL_OW 44
37770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37771: LD_VAR 0 12
37775: PPUSH
37776: LD_VAR 0 8
37780: PPUSH
37781: LD_INT 0
37783: PPUSH
37784: CALL 39563 0 3
// end ;
37788: GO 37686
37790: POP
37791: POP
// if enchidnas then
37792: LD_VAR 0 4
37796: IFFALSE 37863
// for i = 1 to enchidnas do
37798: LD_ADDR_VAR 0 11
37802: PUSH
37803: DOUBLE
37804: LD_INT 1
37806: DEC
37807: ST_TO_ADDR
37808: LD_VAR 0 4
37812: PUSH
37813: FOR_TO
37814: IFFALSE 37861
// begin hc_class = 13 ;
37816: LD_ADDR_OWVAR 28
37820: PUSH
37821: LD_INT 13
37823: ST_TO_ADDR
// hc_gallery =  ;
37824: LD_ADDR_OWVAR 33
37828: PUSH
37829: LD_STRING 
37831: ST_TO_ADDR
// animal := CreateHuman ;
37832: LD_ADDR_VAR 0 12
37836: PUSH
37837: CALL_OW 44
37841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37842: LD_VAR 0 12
37846: PPUSH
37847: LD_VAR 0 8
37851: PPUSH
37852: LD_INT 0
37854: PPUSH
37855: CALL 39563 0 3
// end ;
37859: GO 37813
37861: POP
37862: POP
// if fishes then
37863: LD_VAR 0 7
37867: IFFALSE 37934
// for i = 1 to fishes do
37869: LD_ADDR_VAR 0 11
37873: PUSH
37874: DOUBLE
37875: LD_INT 1
37877: DEC
37878: ST_TO_ADDR
37879: LD_VAR 0 7
37883: PUSH
37884: FOR_TO
37885: IFFALSE 37932
// begin hc_class = 20 ;
37887: LD_ADDR_OWVAR 28
37891: PUSH
37892: LD_INT 20
37894: ST_TO_ADDR
// hc_gallery =  ;
37895: LD_ADDR_OWVAR 33
37899: PUSH
37900: LD_STRING 
37902: ST_TO_ADDR
// animal := CreateHuman ;
37903: LD_ADDR_VAR 0 12
37907: PUSH
37908: CALL_OW 44
37912: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37913: LD_VAR 0 12
37917: PPUSH
37918: LD_VAR 0 9
37922: PPUSH
37923: LD_INT 0
37925: PPUSH
37926: CALL 39563 0 3
// end ;
37930: GO 37884
37932: POP
37933: POP
// end ;
37934: LD_VAR 0 10
37938: RET
// export function WantHeal ( sci , unit ) ; begin
37939: LD_INT 0
37941: PPUSH
// if GetTaskList ( sci ) > 0 then
37942: LD_VAR 0 1
37946: PPUSH
37947: CALL_OW 437
37951: PUSH
37952: LD_INT 0
37954: GREATER
37955: IFFALSE 38025
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37957: LD_VAR 0 1
37961: PPUSH
37962: CALL_OW 437
37966: PUSH
37967: LD_INT 1
37969: ARRAY
37970: PUSH
37971: LD_INT 1
37973: ARRAY
37974: PUSH
37975: LD_STRING l
37977: EQUAL
37978: PUSH
37979: LD_VAR 0 1
37983: PPUSH
37984: CALL_OW 437
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PUSH
37993: LD_INT 4
37995: ARRAY
37996: PUSH
37997: LD_VAR 0 2
38001: EQUAL
38002: AND
38003: IFFALSE 38015
// result := true else
38005: LD_ADDR_VAR 0 3
38009: PUSH
38010: LD_INT 1
38012: ST_TO_ADDR
38013: GO 38023
// result := false ;
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_INT 0
38022: ST_TO_ADDR
// end else
38023: GO 38033
// result := false ;
38025: LD_ADDR_VAR 0 3
38029: PUSH
38030: LD_INT 0
38032: ST_TO_ADDR
// end ;
38033: LD_VAR 0 3
38037: RET
// export function HealTarget ( sci ) ; begin
38038: LD_INT 0
38040: PPUSH
// if not sci then
38041: LD_VAR 0 1
38045: NOT
38046: IFFALSE 38050
// exit ;
38048: GO 38115
// result := 0 ;
38050: LD_ADDR_VAR 0 2
38054: PUSH
38055: LD_INT 0
38057: ST_TO_ADDR
// if GetTaskList ( sci ) then
38058: LD_VAR 0 1
38062: PPUSH
38063: CALL_OW 437
38067: IFFALSE 38115
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 437
38078: PUSH
38079: LD_INT 1
38081: ARRAY
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: PUSH
38087: LD_STRING l
38089: EQUAL
38090: IFFALSE 38115
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38092: LD_ADDR_VAR 0 2
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 437
38106: PUSH
38107: LD_INT 1
38109: ARRAY
38110: PUSH
38111: LD_INT 4
38113: ARRAY
38114: ST_TO_ADDR
// end ;
38115: LD_VAR 0 2
38119: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38120: LD_INT 0
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
// if not base_units then
38126: LD_VAR 0 1
38130: NOT
38131: IFFALSE 38135
// exit ;
38133: GO 38222
// result := false ;
38135: LD_ADDR_VAR 0 2
38139: PUSH
38140: LD_INT 0
38142: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38143: LD_ADDR_VAR 0 5
38147: PUSH
38148: LD_VAR 0 1
38152: PPUSH
38153: LD_INT 21
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PPUSH
38163: CALL_OW 72
38167: ST_TO_ADDR
// if not tmp then
38168: LD_VAR 0 5
38172: NOT
38173: IFFALSE 38177
// exit ;
38175: GO 38222
// for i in tmp do
38177: LD_ADDR_VAR 0 3
38181: PUSH
38182: LD_VAR 0 5
38186: PUSH
38187: FOR_IN
38188: IFFALSE 38220
// begin result := EnemyInRange ( i , 22 ) ;
38190: LD_ADDR_VAR 0 2
38194: PUSH
38195: LD_VAR 0 3
38199: PPUSH
38200: LD_INT 22
38202: PPUSH
38203: CALL 35800 0 2
38207: ST_TO_ADDR
// if result then
38208: LD_VAR 0 2
38212: IFFALSE 38218
// exit ;
38214: POP
38215: POP
38216: GO 38222
// end ;
38218: GO 38187
38220: POP
38221: POP
// end ;
38222: LD_VAR 0 2
38226: RET
// export function FilterByTag ( units , tag ) ; begin
38227: LD_INT 0
38229: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38230: LD_ADDR_VAR 0 3
38234: PUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: LD_INT 120
38242: PUSH
38243: LD_VAR 0 2
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL_OW 72
38256: ST_TO_ADDR
// end ;
38257: LD_VAR 0 3
38261: RET
// export function IsDriver ( un ) ; begin
38262: LD_INT 0
38264: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38265: LD_ADDR_VAR 0 2
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: LD_INT 55
38277: PUSH
38278: EMPTY
38279: LIST
38280: PPUSH
38281: CALL_OW 69
38285: IN
38286: ST_TO_ADDR
// end ;
38287: LD_VAR 0 2
38291: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38292: LD_INT 0
38294: PPUSH
38295: PPUSH
// list := [ ] ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: EMPTY
38302: ST_TO_ADDR
// case d of 0 :
38303: LD_VAR 0 3
38307: PUSH
38308: LD_INT 0
38310: DOUBLE
38311: EQUAL
38312: IFTRUE 38316
38314: GO 38449
38316: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38317: LD_ADDR_VAR 0 5
38321: PUSH
38322: LD_VAR 0 1
38326: PUSH
38327: LD_INT 4
38329: MINUS
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: LD_INT 4
38338: MINUS
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: PUSH
38348: LD_VAR 0 1
38352: PUSH
38353: LD_INT 3
38355: MINUS
38356: PUSH
38357: LD_VAR 0 2
38361: PUSH
38362: LD_INT 1
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: PUSH
38370: LD_VAR 0 1
38374: PUSH
38375: LD_INT 4
38377: PLUS
38378: PUSH
38379: LD_VAR 0 2
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: PUSH
38392: LD_VAR 0 1
38396: PUSH
38397: LD_INT 3
38399: PLUS
38400: PUSH
38401: LD_VAR 0 2
38405: PUSH
38406: LD_INT 3
38408: PLUS
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: PUSH
38418: LD_VAR 0 1
38422: PUSH
38423: LD_VAR 0 2
38427: PUSH
38428: LD_INT 4
38430: PLUS
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// end ; 1 :
38447: GO 39147
38449: LD_INT 1
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 38590
38457: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38458: LD_ADDR_VAR 0 5
38462: PUSH
38463: LD_VAR 0 1
38467: PUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_INT 4
38475: MINUS
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: PUSH
38485: LD_VAR 0 1
38489: PUSH
38490: LD_INT 3
38492: MINUS
38493: PUSH
38494: LD_VAR 0 2
38498: PUSH
38499: LD_INT 3
38501: MINUS
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: PUSH
38511: LD_VAR 0 1
38515: PUSH
38516: LD_INT 4
38518: MINUS
38519: PUSH
38520: LD_VAR 0 2
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: PUSH
38533: LD_VAR 0 1
38537: PUSH
38538: LD_VAR 0 2
38542: PUSH
38543: LD_INT 3
38545: PLUS
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: PUSH
38555: LD_VAR 0 1
38559: PUSH
38560: LD_INT 4
38562: PLUS
38563: PUSH
38564: LD_VAR 0 2
38568: PUSH
38569: LD_INT 4
38571: PLUS
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: ST_TO_ADDR
// end ; 2 :
38588: GO 39147
38590: LD_INT 2
38592: DOUBLE
38593: EQUAL
38594: IFTRUE 38598
38596: GO 38727
38598: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38599: LD_ADDR_VAR 0 5
38603: PUSH
38604: LD_VAR 0 1
38608: PUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_INT 3
38616: MINUS
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: PUSH
38626: LD_VAR 0 1
38630: PUSH
38631: LD_INT 4
38633: PLUS
38634: PUSH
38635: LD_VAR 0 2
38639: PUSH
38640: LD_INT 4
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: PUSH
38648: LD_VAR 0 1
38652: PUSH
38653: LD_VAR 0 2
38657: PUSH
38658: LD_INT 4
38660: PLUS
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: LD_VAR 0 1
38674: PUSH
38675: LD_INT 3
38677: MINUS
38678: PUSH
38679: LD_VAR 0 2
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: PUSH
38692: LD_VAR 0 1
38696: PUSH
38697: LD_INT 4
38699: MINUS
38700: PUSH
38701: LD_VAR 0 2
38705: PUSH
38706: LD_INT 4
38708: MINUS
38709: PUSH
38710: LD_INT 2
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: ST_TO_ADDR
// end ; 3 :
38725: GO 39147
38727: LD_INT 3
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38735
38733: GO 38868
38735: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38736: LD_ADDR_VAR 0 5
38740: PUSH
38741: LD_VAR 0 1
38745: PUSH
38746: LD_INT 3
38748: PLUS
38749: PUSH
38750: LD_VAR 0 2
38754: PUSH
38755: LD_INT 4
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: PUSH
38763: LD_VAR 0 1
38767: PUSH
38768: LD_INT 4
38770: PLUS
38771: PUSH
38772: LD_VAR 0 2
38776: PUSH
38777: LD_INT 4
38779: PLUS
38780: PUSH
38781: LD_INT 5
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: PUSH
38789: LD_VAR 0 1
38793: PUSH
38794: LD_INT 4
38796: MINUS
38797: PUSH
38798: LD_VAR 0 2
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 1
38815: PUSH
38816: LD_VAR 0 2
38820: PUSH
38821: LD_INT 4
38823: MINUS
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PUSH
38833: LD_VAR 0 1
38837: PUSH
38838: LD_INT 3
38840: MINUS
38841: PUSH
38842: LD_VAR 0 2
38846: PUSH
38847: LD_INT 3
38849: MINUS
38850: PUSH
38851: LD_INT 2
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: ST_TO_ADDR
// end ; 4 :
38866: GO 39147
38868: LD_INT 4
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38876
38874: GO 39009
38876: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38877: LD_ADDR_VAR 0 5
38881: PUSH
38882: LD_VAR 0 1
38886: PUSH
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 4
38894: PLUS
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PUSH
38904: LD_VAR 0 1
38908: PUSH
38909: LD_INT 3
38911: PLUS
38912: PUSH
38913: LD_VAR 0 2
38917: PUSH
38918: LD_INT 3
38920: PLUS
38921: PUSH
38922: LD_INT 5
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: LIST
38929: PUSH
38930: LD_VAR 0 1
38934: PUSH
38935: LD_INT 4
38937: PLUS
38938: PUSH
38939: LD_VAR 0 2
38943: PUSH
38944: LD_INT 4
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: PUSH
38952: LD_VAR 0 1
38956: PUSH
38957: LD_VAR 0 2
38961: PUSH
38962: LD_INT 3
38964: MINUS
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: PUSH
38974: LD_VAR 0 1
38978: PUSH
38979: LD_INT 4
38981: MINUS
38982: PUSH
38983: LD_VAR 0 2
38987: PUSH
38988: LD_INT 4
38990: MINUS
38991: PUSH
38992: LD_INT 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// end ; 5 :
39007: GO 39147
39009: LD_INT 5
39011: DOUBLE
39012: EQUAL
39013: IFTRUE 39017
39015: GO 39146
39017: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: LD_VAR 0 1
39027: PUSH
39028: LD_INT 4
39030: MINUS
39031: PUSH
39032: LD_VAR 0 2
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: PUSH
39045: LD_VAR 0 1
39049: PUSH
39050: LD_VAR 0 2
39054: PUSH
39055: LD_INT 4
39057: MINUS
39058: PUSH
39059: LD_INT 3
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: PUSH
39067: LD_VAR 0 1
39071: PUSH
39072: LD_INT 4
39074: PLUS
39075: PUSH
39076: LD_VAR 0 2
39080: PUSH
39081: LD_INT 4
39083: PLUS
39084: PUSH
39085: LD_INT 5
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: LD_VAR 0 1
39097: PUSH
39098: LD_INT 3
39100: PLUS
39101: PUSH
39102: LD_VAR 0 2
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: PUSH
39115: LD_VAR 0 1
39119: PUSH
39120: LD_VAR 0 2
39124: PUSH
39125: LD_INT 3
39127: PLUS
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
// end ; end ;
39144: GO 39147
39146: POP
// result := list ;
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_VAR 0 5
39156: ST_TO_ADDR
// end ;
39157: LD_VAR 0 4
39161: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39162: LD_INT 0
39164: PPUSH
39165: PPUSH
39166: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39167: LD_VAR 0 1
39171: NOT
39172: PUSH
39173: LD_VAR 0 2
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 4
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: IN
39196: NOT
39197: OR
39198: IFFALSE 39202
// exit ;
39200: GO 39285
// tmp := [ ] ;
39202: LD_ADDR_VAR 0 5
39206: PUSH
39207: EMPTY
39208: ST_TO_ADDR
// for i in units do
39209: LD_ADDR_VAR 0 4
39213: PUSH
39214: LD_VAR 0 1
39218: PUSH
39219: FOR_IN
39220: IFFALSE 39254
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39222: LD_ADDR_VAR 0 5
39226: PUSH
39227: LD_VAR 0 5
39231: PPUSH
39232: LD_VAR 0 4
39236: PPUSH
39237: LD_VAR 0 2
39241: PPUSH
39242: CALL_OW 259
39246: PPUSH
39247: CALL 40658 0 2
39251: ST_TO_ADDR
39252: GO 39219
39254: POP
39255: POP
// if not tmp then
39256: LD_VAR 0 5
39260: NOT
39261: IFFALSE 39265
// exit ;
39263: GO 39285
// result := SortListByListDesc ( units , tmp ) ;
39265: LD_ADDR_VAR 0 3
39269: PUSH
39270: LD_VAR 0 1
39274: PPUSH
39275: LD_VAR 0 5
39279: PPUSH
39280: CALL_OW 77
39284: ST_TO_ADDR
// end ;
39285: LD_VAR 0 3
39289: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39290: LD_INT 0
39292: PPUSH
39293: PPUSH
39294: PPUSH
// result := false ;
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: LD_INT 0
39302: ST_TO_ADDR
// if not building then
39303: LD_VAR 0 2
39307: NOT
39308: IFFALSE 39312
// exit ;
39310: GO 39450
// x := GetX ( building ) ;
39312: LD_ADDR_VAR 0 4
39316: PUSH
39317: LD_VAR 0 2
39321: PPUSH
39322: CALL_OW 250
39326: ST_TO_ADDR
// y := GetY ( building ) ;
39327: LD_ADDR_VAR 0 5
39331: PUSH
39332: LD_VAR 0 2
39336: PPUSH
39337: CALL_OW 251
39341: ST_TO_ADDR
// if not x or not y then
39342: LD_VAR 0 4
39346: NOT
39347: PUSH
39348: LD_VAR 0 5
39352: NOT
39353: OR
39354: IFFALSE 39358
// exit ;
39356: GO 39450
// if GetTaskList ( unit ) then
39358: LD_VAR 0 1
39362: PPUSH
39363: CALL_OW 437
39367: IFFALSE 39450
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39369: LD_STRING e
39371: PUSH
39372: LD_VAR 0 1
39376: PPUSH
39377: CALL_OW 437
39381: PUSH
39382: LD_INT 1
39384: ARRAY
39385: PUSH
39386: LD_INT 1
39388: ARRAY
39389: EQUAL
39390: PUSH
39391: LD_VAR 0 4
39395: PUSH
39396: LD_VAR 0 1
39400: PPUSH
39401: CALL_OW 437
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: PUSH
39410: LD_INT 2
39412: ARRAY
39413: EQUAL
39414: AND
39415: PUSH
39416: LD_VAR 0 5
39420: PUSH
39421: LD_VAR 0 1
39425: PPUSH
39426: CALL_OW 437
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PUSH
39435: LD_INT 3
39437: ARRAY
39438: EQUAL
39439: AND
39440: IFFALSE 39450
// result := true end ;
39442: LD_ADDR_VAR 0 3
39446: PUSH
39447: LD_INT 1
39449: ST_TO_ADDR
// end ;
39450: LD_VAR 0 3
39454: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39455: LD_INT 0
39457: PPUSH
// result := false ;
39458: LD_ADDR_VAR 0 4
39462: PUSH
39463: LD_INT 0
39465: ST_TO_ADDR
// if GetTaskList ( unit ) then
39466: LD_VAR 0 1
39470: PPUSH
39471: CALL_OW 437
39475: IFFALSE 39558
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39477: LD_STRING M
39479: PUSH
39480: LD_VAR 0 1
39484: PPUSH
39485: CALL_OW 437
39489: PUSH
39490: LD_INT 1
39492: ARRAY
39493: PUSH
39494: LD_INT 1
39496: ARRAY
39497: EQUAL
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 437
39513: PUSH
39514: LD_INT 1
39516: ARRAY
39517: PUSH
39518: LD_INT 2
39520: ARRAY
39521: EQUAL
39522: AND
39523: PUSH
39524: LD_VAR 0 3
39528: PUSH
39529: LD_VAR 0 1
39533: PPUSH
39534: CALL_OW 437
39538: PUSH
39539: LD_INT 1
39541: ARRAY
39542: PUSH
39543: LD_INT 3
39545: ARRAY
39546: EQUAL
39547: AND
39548: IFFALSE 39558
// result := true ;
39550: LD_ADDR_VAR 0 4
39554: PUSH
39555: LD_INT 1
39557: ST_TO_ADDR
// end ; end ;
39558: LD_VAR 0 4
39562: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39563: LD_INT 0
39565: PPUSH
39566: PPUSH
39567: PPUSH
39568: PPUSH
// if not unit or not area then
39569: LD_VAR 0 1
39573: NOT
39574: PUSH
39575: LD_VAR 0 2
39579: NOT
39580: OR
39581: IFFALSE 39585
// exit ;
39583: GO 39761
// tmp := AreaToList ( area , i ) ;
39585: LD_ADDR_VAR 0 6
39589: PUSH
39590: LD_VAR 0 2
39594: PPUSH
39595: LD_VAR 0 5
39599: PPUSH
39600: CALL_OW 517
39604: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39605: LD_ADDR_VAR 0 5
39609: PUSH
39610: DOUBLE
39611: LD_INT 1
39613: DEC
39614: ST_TO_ADDR
39615: LD_VAR 0 6
39619: PUSH
39620: LD_INT 1
39622: ARRAY
39623: PUSH
39624: FOR_TO
39625: IFFALSE 39759
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39627: LD_ADDR_VAR 0 7
39631: PUSH
39632: LD_VAR 0 6
39636: PUSH
39637: LD_INT 1
39639: ARRAY
39640: PUSH
39641: LD_VAR 0 5
39645: ARRAY
39646: PUSH
39647: LD_VAR 0 6
39651: PUSH
39652: LD_INT 2
39654: ARRAY
39655: PUSH
39656: LD_VAR 0 5
39660: ARRAY
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39666: LD_INT 92
39668: PUSH
39669: LD_VAR 0 7
39673: PUSH
39674: LD_INT 1
39676: ARRAY
39677: PUSH
39678: LD_VAR 0 7
39682: PUSH
39683: LD_INT 2
39685: ARRAY
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: PPUSH
39696: CALL_OW 69
39700: PUSH
39701: LD_INT 0
39703: EQUAL
39704: IFFALSE 39757
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39706: LD_VAR 0 1
39710: PPUSH
39711: LD_VAR 0 7
39715: PUSH
39716: LD_INT 1
39718: ARRAY
39719: PPUSH
39720: LD_VAR 0 7
39724: PUSH
39725: LD_INT 2
39727: ARRAY
39728: PPUSH
39729: LD_VAR 0 3
39733: PPUSH
39734: CALL_OW 48
// result := IsPlaced ( unit ) ;
39738: LD_ADDR_VAR 0 4
39742: PUSH
39743: LD_VAR 0 1
39747: PPUSH
39748: CALL_OW 305
39752: ST_TO_ADDR
// exit ;
39753: POP
39754: POP
39755: GO 39761
// end ; end ;
39757: GO 39624
39759: POP
39760: POP
// end ;
39761: LD_VAR 0 4
39765: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39766: LD_INT 0
39768: PPUSH
39769: PPUSH
39770: PPUSH
// if not side or side > 8 then
39771: LD_VAR 0 1
39775: NOT
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: LD_INT 8
39784: GREATER
39785: OR
39786: IFFALSE 39790
// exit ;
39788: GO 39977
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39790: LD_ADDR_VAR 0 4
39794: PUSH
39795: LD_INT 22
39797: PUSH
39798: LD_VAR 0 1
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 21
39809: PUSH
39810: LD_INT 3
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PPUSH
39821: CALL_OW 69
39825: ST_TO_ADDR
// if not tmp then
39826: LD_VAR 0 4
39830: NOT
39831: IFFALSE 39835
// exit ;
39833: GO 39977
// enable_addtolog := true ;
39835: LD_ADDR_OWVAR 81
39839: PUSH
39840: LD_INT 1
39842: ST_TO_ADDR
// AddToLog ( [ ) ;
39843: LD_STRING [
39845: PPUSH
39846: CALL_OW 561
// for i in tmp do
39850: LD_ADDR_VAR 0 3
39854: PUSH
39855: LD_VAR 0 4
39859: PUSH
39860: FOR_IN
39861: IFFALSE 39968
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39863: LD_STRING [
39865: PUSH
39866: LD_VAR 0 3
39870: PPUSH
39871: CALL_OW 266
39875: STR
39876: PUSH
39877: LD_STRING , 
39879: STR
39880: PUSH
39881: LD_VAR 0 3
39885: PPUSH
39886: CALL_OW 250
39890: STR
39891: PUSH
39892: LD_STRING , 
39894: STR
39895: PUSH
39896: LD_VAR 0 3
39900: PPUSH
39901: CALL_OW 251
39905: STR
39906: PUSH
39907: LD_STRING , 
39909: STR
39910: PUSH
39911: LD_VAR 0 3
39915: PPUSH
39916: CALL_OW 254
39920: STR
39921: PUSH
39922: LD_STRING , 
39924: STR
39925: PUSH
39926: LD_VAR 0 3
39930: PPUSH
39931: LD_INT 1
39933: PPUSH
39934: CALL_OW 268
39938: STR
39939: PUSH
39940: LD_STRING , 
39942: STR
39943: PUSH
39944: LD_VAR 0 3
39948: PPUSH
39949: LD_INT 2
39951: PPUSH
39952: CALL_OW 268
39956: STR
39957: PUSH
39958: LD_STRING ],
39960: STR
39961: PPUSH
39962: CALL_OW 561
// end ;
39966: GO 39860
39968: POP
39969: POP
// AddToLog ( ]; ) ;
39970: LD_STRING ];
39972: PPUSH
39973: CALL_OW 561
// end ;
39977: LD_VAR 0 2
39981: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39982: LD_INT 0
39984: PPUSH
39985: PPUSH
39986: PPUSH
39987: PPUSH
39988: PPUSH
// if not area or not rate or not max then
39989: LD_VAR 0 1
39993: NOT
39994: PUSH
39995: LD_VAR 0 2
39999: NOT
40000: OR
40001: PUSH
40002: LD_VAR 0 4
40006: NOT
40007: OR
40008: IFFALSE 40012
// exit ;
40010: GO 40201
// while 1 do
40012: LD_INT 1
40014: IFFALSE 40201
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40016: LD_ADDR_VAR 0 9
40020: PUSH
40021: LD_VAR 0 1
40025: PPUSH
40026: LD_INT 1
40028: PPUSH
40029: CALL_OW 287
40033: PUSH
40034: LD_INT 10
40036: MUL
40037: ST_TO_ADDR
// r := rate / 10 ;
40038: LD_ADDR_VAR 0 7
40042: PUSH
40043: LD_VAR 0 2
40047: PUSH
40048: LD_INT 10
40050: DIVREAL
40051: ST_TO_ADDR
// time := 1 1$00 ;
40052: LD_ADDR_VAR 0 8
40056: PUSH
40057: LD_INT 2100
40059: ST_TO_ADDR
// if amount < min then
40060: LD_VAR 0 9
40064: PUSH
40065: LD_VAR 0 3
40069: LESS
40070: IFFALSE 40088
// r := r * 2 else
40072: LD_ADDR_VAR 0 7
40076: PUSH
40077: LD_VAR 0 7
40081: PUSH
40082: LD_INT 2
40084: MUL
40085: ST_TO_ADDR
40086: GO 40114
// if amount > max then
40088: LD_VAR 0 9
40092: PUSH
40093: LD_VAR 0 4
40097: GREATER
40098: IFFALSE 40114
// r := r / 2 ;
40100: LD_ADDR_VAR 0 7
40104: PUSH
40105: LD_VAR 0 7
40109: PUSH
40110: LD_INT 2
40112: DIVREAL
40113: ST_TO_ADDR
// time := time / r ;
40114: LD_ADDR_VAR 0 8
40118: PUSH
40119: LD_VAR 0 8
40123: PUSH
40124: LD_VAR 0 7
40128: DIVREAL
40129: ST_TO_ADDR
// if time < 0 then
40130: LD_VAR 0 8
40134: PUSH
40135: LD_INT 0
40137: LESS
40138: IFFALSE 40155
// time := time * - 1 ;
40140: LD_ADDR_VAR 0 8
40144: PUSH
40145: LD_VAR 0 8
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: MUL
40154: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40155: LD_VAR 0 8
40159: PUSH
40160: LD_INT 35
40162: PPUSH
40163: LD_INT 875
40165: PPUSH
40166: CALL_OW 12
40170: PLUS
40171: PPUSH
40172: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40176: LD_INT 1
40178: PPUSH
40179: LD_INT 5
40181: PPUSH
40182: CALL_OW 12
40186: PPUSH
40187: LD_VAR 0 1
40191: PPUSH
40192: LD_INT 1
40194: PPUSH
40195: CALL_OW 55
// end ;
40199: GO 40012
// end ;
40201: LD_VAR 0 5
40205: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40206: LD_INT 0
40208: PPUSH
40209: PPUSH
40210: PPUSH
40211: PPUSH
40212: PPUSH
40213: PPUSH
40214: PPUSH
40215: PPUSH
// if not turrets or not factories then
40216: LD_VAR 0 1
40220: NOT
40221: PUSH
40222: LD_VAR 0 2
40226: NOT
40227: OR
40228: IFFALSE 40232
// exit ;
40230: GO 40539
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40232: LD_ADDR_VAR 0 10
40236: PUSH
40237: LD_INT 5
40239: PUSH
40240: LD_INT 6
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 4
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: LD_INT 5
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 24
40274: PUSH
40275: LD_INT 25
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 23
40284: PUSH
40285: LD_INT 27
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 42
40298: PUSH
40299: LD_INT 43
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 44
40308: PUSH
40309: LD_INT 46
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 45
40318: PUSH
40319: LD_INT 47
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// result := [ ] ;
40336: LD_ADDR_VAR 0 3
40340: PUSH
40341: EMPTY
40342: ST_TO_ADDR
// for i in turrets do
40343: LD_ADDR_VAR 0 4
40347: PUSH
40348: LD_VAR 0 1
40352: PUSH
40353: FOR_IN
40354: IFFALSE 40537
// begin nat := GetNation ( i ) ;
40356: LD_ADDR_VAR 0 7
40360: PUSH
40361: LD_VAR 0 4
40365: PPUSH
40366: CALL_OW 248
40370: ST_TO_ADDR
// weapon := 0 ;
40371: LD_ADDR_VAR 0 8
40375: PUSH
40376: LD_INT 0
40378: ST_TO_ADDR
// if not nat then
40379: LD_VAR 0 7
40383: NOT
40384: IFFALSE 40388
// continue ;
40386: GO 40353
// for j in list [ nat ] do
40388: LD_ADDR_VAR 0 5
40392: PUSH
40393: LD_VAR 0 10
40397: PUSH
40398: LD_VAR 0 7
40402: ARRAY
40403: PUSH
40404: FOR_IN
40405: IFFALSE 40446
// if GetBWeapon ( i ) = j [ 1 ] then
40407: LD_VAR 0 4
40411: PPUSH
40412: CALL_OW 269
40416: PUSH
40417: LD_VAR 0 5
40421: PUSH
40422: LD_INT 1
40424: ARRAY
40425: EQUAL
40426: IFFALSE 40444
// begin weapon := j [ 2 ] ;
40428: LD_ADDR_VAR 0 8
40432: PUSH
40433: LD_VAR 0 5
40437: PUSH
40438: LD_INT 2
40440: ARRAY
40441: ST_TO_ADDR
// break ;
40442: GO 40446
// end ;
40444: GO 40404
40446: POP
40447: POP
// if not weapon then
40448: LD_VAR 0 8
40452: NOT
40453: IFFALSE 40457
// continue ;
40455: GO 40353
// for k in factories do
40457: LD_ADDR_VAR 0 6
40461: PUSH
40462: LD_VAR 0 2
40466: PUSH
40467: FOR_IN
40468: IFFALSE 40533
// begin weapons := AvailableWeaponList ( k ) ;
40470: LD_ADDR_VAR 0 9
40474: PUSH
40475: LD_VAR 0 6
40479: PPUSH
40480: CALL_OW 478
40484: ST_TO_ADDR
// if not weapons then
40485: LD_VAR 0 9
40489: NOT
40490: IFFALSE 40494
// continue ;
40492: GO 40467
// if weapon in weapons then
40494: LD_VAR 0 8
40498: PUSH
40499: LD_VAR 0 9
40503: IN
40504: IFFALSE 40531
// begin result := [ i , weapon ] ;
40506: LD_ADDR_VAR 0 3
40510: PUSH
40511: LD_VAR 0 4
40515: PUSH
40516: LD_VAR 0 8
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: ST_TO_ADDR
// exit ;
40525: POP
40526: POP
40527: POP
40528: POP
40529: GO 40539
// end ; end ;
40531: GO 40467
40533: POP
40534: POP
// end ;
40535: GO 40353
40537: POP
40538: POP
// end ;
40539: LD_VAR 0 3
40543: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40544: LD_INT 0
40546: PPUSH
// if not side or side > 8 then
40547: LD_VAR 0 3
40551: NOT
40552: PUSH
40553: LD_VAR 0 3
40557: PUSH
40558: LD_INT 8
40560: GREATER
40561: OR
40562: IFFALSE 40566
// exit ;
40564: GO 40625
// if not range then
40566: LD_VAR 0 4
40570: NOT
40571: IFFALSE 40582
// range := - 12 ;
40573: LD_ADDR_VAR 0 4
40577: PUSH
40578: LD_INT 12
40580: NEG
40581: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40582: LD_VAR 0 1
40586: PPUSH
40587: LD_VAR 0 2
40591: PPUSH
40592: LD_VAR 0 3
40596: PPUSH
40597: LD_VAR 0 4
40601: PPUSH
40602: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40606: LD_VAR 0 1
40610: PPUSH
40611: LD_VAR 0 2
40615: PPUSH
40616: LD_VAR 0 3
40620: PPUSH
40621: CALL_OW 331
// end ;
40625: LD_VAR 0 5
40629: RET
// export function Video ( mode ) ; begin
40630: LD_INT 0
40632: PPUSH
// ingame_video = mode ;
40633: LD_ADDR_OWVAR 52
40637: PUSH
40638: LD_VAR 0 1
40642: ST_TO_ADDR
// interface_hidden = mode ;
40643: LD_ADDR_OWVAR 54
40647: PUSH
40648: LD_VAR 0 1
40652: ST_TO_ADDR
// end ;
40653: LD_VAR 0 2
40657: RET
// export function Join ( array , element ) ; begin
40658: LD_INT 0
40660: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40661: LD_ADDR_VAR 0 3
40665: PUSH
40666: LD_VAR 0 1
40670: PPUSH
40671: LD_VAR 0 1
40675: PUSH
40676: LD_INT 1
40678: PLUS
40679: PPUSH
40680: LD_VAR 0 2
40684: PPUSH
40685: CALL_OW 1
40689: ST_TO_ADDR
// end ;
40690: LD_VAR 0 3
40694: RET
// export function JoinUnion ( array , element ) ; begin
40695: LD_INT 0
40697: PPUSH
// result := array union element ;
40698: LD_ADDR_VAR 0 3
40702: PUSH
40703: LD_VAR 0 1
40707: PUSH
40708: LD_VAR 0 2
40712: UNION
40713: ST_TO_ADDR
// end ;
40714: LD_VAR 0 3
40718: RET
// export function GetBehemoths ( side ) ; begin
40719: LD_INT 0
40721: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40722: LD_ADDR_VAR 0 2
40726: PUSH
40727: LD_INT 22
40729: PUSH
40730: LD_VAR 0 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 31
40741: PUSH
40742: LD_INT 25
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PPUSH
40753: CALL_OW 69
40757: ST_TO_ADDR
// end ;
40758: LD_VAR 0 2
40762: RET
// export function Shuffle ( array ) ; var i , index ; begin
40763: LD_INT 0
40765: PPUSH
40766: PPUSH
40767: PPUSH
// result := [ ] ;
40768: LD_ADDR_VAR 0 2
40772: PUSH
40773: EMPTY
40774: ST_TO_ADDR
// if not array then
40775: LD_VAR 0 1
40779: NOT
40780: IFFALSE 40784
// exit ;
40782: GO 40883
// Randomize ;
40784: CALL_OW 10
// for i = array downto 1 do
40788: LD_ADDR_VAR 0 3
40792: PUSH
40793: DOUBLE
40794: LD_VAR 0 1
40798: INC
40799: ST_TO_ADDR
40800: LD_INT 1
40802: PUSH
40803: FOR_DOWNTO
40804: IFFALSE 40881
// begin index := rand ( 1 , array ) ;
40806: LD_ADDR_VAR 0 4
40810: PUSH
40811: LD_INT 1
40813: PPUSH
40814: LD_VAR 0 1
40818: PPUSH
40819: CALL_OW 12
40823: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40824: LD_ADDR_VAR 0 2
40828: PUSH
40829: LD_VAR 0 2
40833: PPUSH
40834: LD_VAR 0 2
40838: PUSH
40839: LD_INT 1
40841: PLUS
40842: PPUSH
40843: LD_VAR 0 1
40847: PUSH
40848: LD_VAR 0 4
40852: ARRAY
40853: PPUSH
40854: CALL_OW 2
40858: ST_TO_ADDR
// array := Delete ( array , index ) ;
40859: LD_ADDR_VAR 0 1
40863: PUSH
40864: LD_VAR 0 1
40868: PPUSH
40869: LD_VAR 0 4
40873: PPUSH
40874: CALL_OW 3
40878: ST_TO_ADDR
// end ;
40879: GO 40803
40881: POP
40882: POP
// end ;
40883: LD_VAR 0 2
40887: RET
// export function GetBaseMaterials ( base ) ; begin
40888: LD_INT 0
40890: PPUSH
// result := [ 0 , 0 , 0 ] ;
40891: LD_ADDR_VAR 0 2
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: ST_TO_ADDR
// if not base then
40910: LD_VAR 0 1
40914: NOT
40915: IFFALSE 40919
// exit ;
40917: GO 40968
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40919: LD_ADDR_VAR 0 2
40923: PUSH
40924: LD_VAR 0 1
40928: PPUSH
40929: LD_INT 1
40931: PPUSH
40932: CALL_OW 275
40936: PUSH
40937: LD_VAR 0 1
40941: PPUSH
40942: LD_INT 2
40944: PPUSH
40945: CALL_OW 275
40949: PUSH
40950: LD_VAR 0 1
40954: PPUSH
40955: LD_INT 3
40957: PPUSH
40958: CALL_OW 275
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: ST_TO_ADDR
// end ;
40968: LD_VAR 0 2
40972: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40973: LD_INT 0
40975: PPUSH
40976: PPUSH
// result := array ;
40977: LD_ADDR_VAR 0 3
40981: PUSH
40982: LD_VAR 0 1
40986: ST_TO_ADDR
// if size >= result then
40987: LD_VAR 0 2
40991: PUSH
40992: LD_VAR 0 3
40996: GREATEREQUAL
40997: IFFALSE 41001
// exit ;
40999: GO 41051
// if size then
41001: LD_VAR 0 2
41005: IFFALSE 41051
// for i := array downto size do
41007: LD_ADDR_VAR 0 4
41011: PUSH
41012: DOUBLE
41013: LD_VAR 0 1
41017: INC
41018: ST_TO_ADDR
41019: LD_VAR 0 2
41023: PUSH
41024: FOR_DOWNTO
41025: IFFALSE 41049
// result := Delete ( result , result ) ;
41027: LD_ADDR_VAR 0 3
41031: PUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: LD_VAR 0 3
41041: PPUSH
41042: CALL_OW 3
41046: ST_TO_ADDR
41047: GO 41024
41049: POP
41050: POP
// end ;
41051: LD_VAR 0 3
41055: RET
// export function ComExit ( unit ) ; var tmp ; begin
41056: LD_INT 0
41058: PPUSH
41059: PPUSH
// if not IsInUnit ( unit ) then
41060: LD_VAR 0 1
41064: PPUSH
41065: CALL_OW 310
41069: NOT
41070: IFFALSE 41074
// exit ;
41072: GO 41134
// tmp := IsInUnit ( unit ) ;
41074: LD_ADDR_VAR 0 3
41078: PUSH
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 310
41088: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41089: LD_VAR 0 3
41093: PPUSH
41094: CALL_OW 247
41098: PUSH
41099: LD_INT 2
41101: EQUAL
41102: IFFALSE 41115
// ComExitVehicle ( unit ) else
41104: LD_VAR 0 1
41108: PPUSH
41109: CALL_OW 121
41113: GO 41124
// ComExitBuilding ( unit ) ;
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 122
// result := tmp ;
41124: LD_ADDR_VAR 0 2
41128: PUSH
41129: LD_VAR 0 3
41133: ST_TO_ADDR
// end ;
41134: LD_VAR 0 2
41138: RET
// export function ComExitAll ( units ) ; var i ; begin
41139: LD_INT 0
41141: PPUSH
41142: PPUSH
// if not units then
41143: LD_VAR 0 1
41147: NOT
41148: IFFALSE 41152
// exit ;
41150: GO 41178
// for i in units do
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_VAR 0 1
41161: PUSH
41162: FOR_IN
41163: IFFALSE 41176
// ComExit ( i ) ;
41165: LD_VAR 0 3
41169: PPUSH
41170: CALL 41056 0 1
41174: GO 41162
41176: POP
41177: POP
// end ;
41178: LD_VAR 0 2
41182: RET
// export function ResetHc ; begin
41183: LD_INT 0
41185: PPUSH
// InitHc ;
41186: CALL_OW 19
// hc_importance := 0 ;
41190: LD_ADDR_OWVAR 32
41194: PUSH
41195: LD_INT 0
41197: ST_TO_ADDR
// end ;
41198: LD_VAR 0 1
41202: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41203: LD_INT 0
41205: PPUSH
41206: PPUSH
41207: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41208: LD_ADDR_VAR 0 6
41212: PUSH
41213: LD_VAR 0 1
41217: PUSH
41218: LD_VAR 0 3
41222: PLUS
41223: PUSH
41224: LD_INT 2
41226: DIV
41227: ST_TO_ADDR
// if _x < 0 then
41228: LD_VAR 0 6
41232: PUSH
41233: LD_INT 0
41235: LESS
41236: IFFALSE 41253
// _x := _x * - 1 ;
41238: LD_ADDR_VAR 0 6
41242: PUSH
41243: LD_VAR 0 6
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: MUL
41252: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41253: LD_ADDR_VAR 0 7
41257: PUSH
41258: LD_VAR 0 2
41262: PUSH
41263: LD_VAR 0 4
41267: PLUS
41268: PUSH
41269: LD_INT 2
41271: DIV
41272: ST_TO_ADDR
// if _y < 0 then
41273: LD_VAR 0 7
41277: PUSH
41278: LD_INT 0
41280: LESS
41281: IFFALSE 41298
// _y := _y * - 1 ;
41283: LD_ADDR_VAR 0 7
41287: PUSH
41288: LD_VAR 0 7
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: MUL
41297: ST_TO_ADDR
// result := [ _x , _y ] ;
41298: LD_ADDR_VAR 0 5
41302: PUSH
41303: LD_VAR 0 6
41307: PUSH
41308: LD_VAR 0 7
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: ST_TO_ADDR
// end ;
41317: LD_VAR 0 5
41321: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41322: LD_INT 0
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
// task := GetTaskList ( unit ) ;
41328: LD_ADDR_VAR 0 7
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 437
41342: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41343: LD_VAR 0 7
41347: NOT
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: LD_VAR 0 2
41358: PPUSH
41359: CALL_OW 308
41363: NOT
41364: AND
41365: IFFALSE 41369
// exit ;
41367: GO 41487
// if IsInArea ( unit , area ) then
41369: LD_VAR 0 1
41373: PPUSH
41374: LD_VAR 0 2
41378: PPUSH
41379: CALL_OW 308
41383: IFFALSE 41401
// begin ComMoveToArea ( unit , goAway ) ;
41385: LD_VAR 0 1
41389: PPUSH
41390: LD_VAR 0 3
41394: PPUSH
41395: CALL_OW 113
// exit ;
41399: GO 41487
// end ; if task [ 1 ] [ 1 ] <> M then
41401: LD_VAR 0 7
41405: PUSH
41406: LD_INT 1
41408: ARRAY
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: PUSH
41414: LD_STRING M
41416: NONEQUAL
41417: IFFALSE 41421
// exit ;
41419: GO 41487
// x := task [ 1 ] [ 2 ] ;
41421: LD_ADDR_VAR 0 5
41425: PUSH
41426: LD_VAR 0 7
41430: PUSH
41431: LD_INT 1
41433: ARRAY
41434: PUSH
41435: LD_INT 2
41437: ARRAY
41438: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41439: LD_ADDR_VAR 0 6
41443: PUSH
41444: LD_VAR 0 7
41448: PUSH
41449: LD_INT 1
41451: ARRAY
41452: PUSH
41453: LD_INT 3
41455: ARRAY
41456: ST_TO_ADDR
// if InArea ( x , y , area ) then
41457: LD_VAR 0 5
41461: PPUSH
41462: LD_VAR 0 6
41466: PPUSH
41467: LD_VAR 0 2
41471: PPUSH
41472: CALL_OW 309
41476: IFFALSE 41487
// ComStop ( unit ) ;
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 141
// end ;
41487: LD_VAR 0 4
41491: RET
// export function Abs ( value ) ; begin
41492: LD_INT 0
41494: PPUSH
// result := value ;
41495: LD_ADDR_VAR 0 2
41499: PUSH
41500: LD_VAR 0 1
41504: ST_TO_ADDR
// if value < 0 then
41505: LD_VAR 0 1
41509: PUSH
41510: LD_INT 0
41512: LESS
41513: IFFALSE 41530
// result := value * - 1 ;
41515: LD_ADDR_VAR 0 2
41519: PUSH
41520: LD_VAR 0 1
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: MUL
41529: ST_TO_ADDR
// end ;
41530: LD_VAR 0 2
41534: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41535: LD_INT 0
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
// if not unit or not building then
41545: LD_VAR 0 1
41549: NOT
41550: PUSH
41551: LD_VAR 0 2
41555: NOT
41556: OR
41557: IFFALSE 41561
// exit ;
41559: GO 41787
// x := GetX ( building ) ;
41561: LD_ADDR_VAR 0 4
41565: PUSH
41566: LD_VAR 0 2
41570: PPUSH
41571: CALL_OW 250
41575: ST_TO_ADDR
// y := GetY ( building ) ;
41576: LD_ADDR_VAR 0 6
41580: PUSH
41581: LD_VAR 0 2
41585: PPUSH
41586: CALL_OW 251
41590: ST_TO_ADDR
// d := GetDir ( building ) ;
41591: LD_ADDR_VAR 0 8
41595: PUSH
41596: LD_VAR 0 2
41600: PPUSH
41601: CALL_OW 254
41605: ST_TO_ADDR
// r := 4 ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_INT 4
41613: ST_TO_ADDR
// for i := 1 to 5 do
41614: LD_ADDR_VAR 0 10
41618: PUSH
41619: DOUBLE
41620: LD_INT 1
41622: DEC
41623: ST_TO_ADDR
41624: LD_INT 5
41626: PUSH
41627: FOR_TO
41628: IFFALSE 41785
// begin _x := ShiftX ( x , d , r + i ) ;
41630: LD_ADDR_VAR 0 5
41634: PUSH
41635: LD_VAR 0 4
41639: PPUSH
41640: LD_VAR 0 8
41644: PPUSH
41645: LD_VAR 0 9
41649: PUSH
41650: LD_VAR 0 10
41654: PLUS
41655: PPUSH
41656: CALL_OW 272
41660: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41661: LD_ADDR_VAR 0 7
41665: PUSH
41666: LD_VAR 0 6
41670: PPUSH
41671: LD_VAR 0 8
41675: PPUSH
41676: LD_VAR 0 9
41680: PUSH
41681: LD_VAR 0 10
41685: PLUS
41686: PPUSH
41687: CALL_OW 273
41691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41692: LD_VAR 0 5
41696: PPUSH
41697: LD_VAR 0 7
41701: PPUSH
41702: CALL_OW 488
41706: PUSH
41707: LD_VAR 0 5
41711: PPUSH
41712: LD_VAR 0 7
41716: PPUSH
41717: CALL_OW 428
41721: PPUSH
41722: CALL_OW 247
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: IN
41737: NOT
41738: AND
41739: IFFALSE 41783
// begin ComMoveXY ( unit , _x , _y ) ;
41741: LD_VAR 0 1
41745: PPUSH
41746: LD_VAR 0 5
41750: PPUSH
41751: LD_VAR 0 7
41755: PPUSH
41756: CALL_OW 111
// result := [ _x , _y ] ;
41760: LD_ADDR_VAR 0 3
41764: PUSH
41765: LD_VAR 0 5
41769: PUSH
41770: LD_VAR 0 7
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// exit ;
41779: POP
41780: POP
41781: GO 41787
// end ; end ;
41783: GO 41627
41785: POP
41786: POP
// end ;
41787: LD_VAR 0 3
41791: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41792: LD_INT 0
41794: PPUSH
41795: PPUSH
41796: PPUSH
// result := 0 ;
41797: LD_ADDR_VAR 0 3
41801: PUSH
41802: LD_INT 0
41804: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41805: LD_VAR 0 1
41809: PUSH
41810: LD_INT 0
41812: LESS
41813: PUSH
41814: LD_VAR 0 1
41818: PUSH
41819: LD_INT 8
41821: GREATER
41822: OR
41823: PUSH
41824: LD_VAR 0 2
41828: PUSH
41829: LD_INT 0
41831: LESS
41832: OR
41833: PUSH
41834: LD_VAR 0 2
41838: PUSH
41839: LD_INT 8
41841: GREATER
41842: OR
41843: IFFALSE 41847
// exit ;
41845: GO 41922
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41847: LD_ADDR_VAR 0 4
41851: PUSH
41852: LD_INT 22
41854: PUSH
41855: LD_VAR 0 2
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PPUSH
41864: CALL_OW 69
41868: PUSH
41869: FOR_IN
41870: IFFALSE 41920
// begin un := UnitShoot ( i ) ;
41872: LD_ADDR_VAR 0 5
41876: PUSH
41877: LD_VAR 0 4
41881: PPUSH
41882: CALL_OW 504
41886: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41887: LD_VAR 0 5
41891: PPUSH
41892: CALL_OW 255
41896: PUSH
41897: LD_VAR 0 1
41901: EQUAL
41902: IFFALSE 41918
// begin result := un ;
41904: LD_ADDR_VAR 0 3
41908: PUSH
41909: LD_VAR 0 5
41913: ST_TO_ADDR
// exit ;
41914: POP
41915: POP
41916: GO 41922
// end ; end ;
41918: GO 41869
41920: POP
41921: POP
// end ;
41922: LD_VAR 0 3
41926: RET
// export function GetCargoBay ( units ) ; begin
41927: LD_INT 0
41929: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41930: LD_ADDR_VAR 0 2
41934: PUSH
41935: LD_VAR 0 1
41939: PPUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 34
41945: PUSH
41946: LD_INT 12
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 34
41955: PUSH
41956: LD_INT 51
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 34
41965: PUSH
41966: LD_INT 32
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 34
41975: PUSH
41976: LD_INT 89
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: PPUSH
41990: CALL_OW 72
41994: ST_TO_ADDR
// end ;
41995: LD_VAR 0 2
41999: RET
// export function Negate ( value ) ; begin
42000: LD_INT 0
42002: PPUSH
// result := not value ;
42003: LD_ADDR_VAR 0 2
42007: PUSH
42008: LD_VAR 0 1
42012: NOT
42013: ST_TO_ADDR
// end ;
42014: LD_VAR 0 2
42018: RET
// export function Inc ( value ) ; begin
42019: LD_INT 0
42021: PPUSH
// result := value + 1 ;
42022: LD_ADDR_VAR 0 2
42026: PUSH
42027: LD_VAR 0 1
42031: PUSH
42032: LD_INT 1
42034: PLUS
42035: ST_TO_ADDR
// end ;
42036: LD_VAR 0 2
42040: RET
// export function Dec ( value ) ; begin
42041: LD_INT 0
42043: PPUSH
// result := value - 1 ;
42044: LD_ADDR_VAR 0 2
42048: PUSH
42049: LD_VAR 0 1
42053: PUSH
42054: LD_INT 1
42056: MINUS
42057: ST_TO_ADDR
// end ;
42058: LD_VAR 0 2
42062: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42063: LD_INT 0
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42073: LD_VAR 0 1
42077: PPUSH
42078: LD_VAR 0 2
42082: PPUSH
42083: CALL_OW 488
42087: NOT
42088: PUSH
42089: LD_VAR 0 3
42093: PPUSH
42094: LD_VAR 0 4
42098: PPUSH
42099: CALL_OW 488
42103: NOT
42104: OR
42105: IFFALSE 42118
// begin result := - 1 ;
42107: LD_ADDR_VAR 0 5
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: ST_TO_ADDR
// exit ;
42116: GO 42353
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42118: LD_ADDR_VAR 0 12
42122: PUSH
42123: LD_VAR 0 1
42127: PPUSH
42128: LD_VAR 0 2
42132: PPUSH
42133: LD_VAR 0 3
42137: PPUSH
42138: LD_VAR 0 4
42142: PPUSH
42143: CALL 41203 0 4
42147: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42148: LD_ADDR_VAR 0 11
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_VAR 0 2
42162: PPUSH
42163: LD_VAR 0 12
42167: PUSH
42168: LD_INT 1
42170: ARRAY
42171: PPUSH
42172: LD_VAR 0 12
42176: PUSH
42177: LD_INT 2
42179: ARRAY
42180: PPUSH
42181: CALL_OW 298
42185: ST_TO_ADDR
// distance := 9999 ;
42186: LD_ADDR_VAR 0 10
42190: PUSH
42191: LD_INT 9999
42193: ST_TO_ADDR
// for i := 0 to 5 do
42194: LD_ADDR_VAR 0 6
42198: PUSH
42199: DOUBLE
42200: LD_INT 0
42202: DEC
42203: ST_TO_ADDR
42204: LD_INT 5
42206: PUSH
42207: FOR_TO
42208: IFFALSE 42351
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42210: LD_ADDR_VAR 0 7
42214: PUSH
42215: LD_VAR 0 1
42219: PPUSH
42220: LD_VAR 0 6
42224: PPUSH
42225: LD_VAR 0 11
42229: PPUSH
42230: CALL_OW 272
42234: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42235: LD_ADDR_VAR 0 8
42239: PUSH
42240: LD_VAR 0 2
42244: PPUSH
42245: LD_VAR 0 6
42249: PPUSH
42250: LD_VAR 0 11
42254: PPUSH
42255: CALL_OW 273
42259: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42260: LD_VAR 0 7
42264: PPUSH
42265: LD_VAR 0 8
42269: PPUSH
42270: CALL_OW 488
42274: NOT
42275: IFFALSE 42279
// continue ;
42277: GO 42207
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42279: LD_ADDR_VAR 0 9
42283: PUSH
42284: LD_VAR 0 12
42288: PUSH
42289: LD_INT 1
42291: ARRAY
42292: PPUSH
42293: LD_VAR 0 12
42297: PUSH
42298: LD_INT 2
42300: ARRAY
42301: PPUSH
42302: LD_VAR 0 7
42306: PPUSH
42307: LD_VAR 0 8
42311: PPUSH
42312: CALL_OW 298
42316: ST_TO_ADDR
// if tmp < distance then
42317: LD_VAR 0 9
42321: PUSH
42322: LD_VAR 0 10
42326: LESS
42327: IFFALSE 42349
// begin result := i ;
42329: LD_ADDR_VAR 0 5
42333: PUSH
42334: LD_VAR 0 6
42338: ST_TO_ADDR
// distance := tmp ;
42339: LD_ADDR_VAR 0 10
42343: PUSH
42344: LD_VAR 0 9
42348: ST_TO_ADDR
// end ; end ;
42349: GO 42207
42351: POP
42352: POP
// end ;
42353: LD_VAR 0 5
42357: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42358: LD_INT 0
42360: PPUSH
42361: PPUSH
// if not driver or not IsInUnit ( driver ) then
42362: LD_VAR 0 1
42366: NOT
42367: PUSH
42368: LD_VAR 0 1
42372: PPUSH
42373: CALL_OW 310
42377: NOT
42378: OR
42379: IFFALSE 42383
// exit ;
42381: GO 42473
// vehicle := IsInUnit ( driver ) ;
42383: LD_ADDR_VAR 0 3
42387: PUSH
42388: LD_VAR 0 1
42392: PPUSH
42393: CALL_OW 310
42397: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_STRING \
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: PUSH
42433: LD_STRING E
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_VAR 0 3
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PPUSH
42469: CALL_OW 446
// end ;
42473: LD_VAR 0 2
42477: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42478: LD_INT 0
42480: PPUSH
42481: PPUSH
// if not driver or not IsInUnit ( driver ) then
42482: LD_VAR 0 1
42486: NOT
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: CALL_OW 310
42497: NOT
42498: OR
42499: IFFALSE 42503
// exit ;
42501: GO 42593
// vehicle := IsInUnit ( driver ) ;
42503: LD_ADDR_VAR 0 3
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 310
42517: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42518: LD_VAR 0 1
42522: PPUSH
42523: LD_STRING \
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: PUSH
42553: LD_STRING E
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_VAR 0 3
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PPUSH
42589: CALL_OW 447
// end ;
42593: LD_VAR 0 2
42597: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42598: LD_INT 0
42600: PPUSH
42601: PPUSH
42602: PPUSH
// tmp := [ ] ;
42603: LD_ADDR_VAR 0 5
42607: PUSH
42608: EMPTY
42609: ST_TO_ADDR
// for i in units do
42610: LD_ADDR_VAR 0 4
42614: PUSH
42615: LD_VAR 0 1
42619: PUSH
42620: FOR_IN
42621: IFFALSE 42659
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 5
42632: PPUSH
42633: LD_VAR 0 5
42637: PUSH
42638: LD_INT 1
42640: PLUS
42641: PPUSH
42642: LD_VAR 0 4
42646: PPUSH
42647: CALL_OW 256
42651: PPUSH
42652: CALL_OW 2
42656: ST_TO_ADDR
42657: GO 42620
42659: POP
42660: POP
// if not tmp then
42661: LD_VAR 0 5
42665: NOT
42666: IFFALSE 42670
// exit ;
42668: GO 42718
// if asc then
42670: LD_VAR 0 2
42674: IFFALSE 42698
// result := SortListByListAsc ( units , tmp ) else
42676: LD_ADDR_VAR 0 3
42680: PUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: LD_VAR 0 5
42690: PPUSH
42691: CALL_OW 76
42695: ST_TO_ADDR
42696: GO 42718
// result := SortListByListDesc ( units , tmp ) ;
42698: LD_ADDR_VAR 0 3
42702: PUSH
42703: LD_VAR 0 1
42707: PPUSH
42708: LD_VAR 0 5
42712: PPUSH
42713: CALL_OW 77
42717: ST_TO_ADDR
// end ;
42718: LD_VAR 0 3
42722: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42723: LD_INT 0
42725: PPUSH
42726: PPUSH
// task := GetTaskList ( mech ) ;
42727: LD_ADDR_VAR 0 4
42731: PUSH
42732: LD_VAR 0 1
42736: PPUSH
42737: CALL_OW 437
42741: ST_TO_ADDR
// if not task then
42742: LD_VAR 0 4
42746: NOT
42747: IFFALSE 42751
// exit ;
42749: GO 42793
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42751: LD_ADDR_VAR 0 3
42755: PUSH
42756: LD_VAR 0 4
42760: PUSH
42761: LD_INT 1
42763: ARRAY
42764: PUSH
42765: LD_INT 1
42767: ARRAY
42768: PUSH
42769: LD_STRING r
42771: EQUAL
42772: PUSH
42773: LD_VAR 0 4
42777: PUSH
42778: LD_INT 1
42780: ARRAY
42781: PUSH
42782: LD_INT 4
42784: ARRAY
42785: PUSH
42786: LD_VAR 0 2
42790: EQUAL
42791: AND
42792: ST_TO_ADDR
// end ;
42793: LD_VAR 0 3
42797: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42798: LD_INT 0
42800: PPUSH
// SetDir ( unit , d ) ;
42801: LD_VAR 0 1
42805: PPUSH
42806: LD_VAR 0 4
42810: PPUSH
42811: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42815: LD_VAR 0 1
42819: PPUSH
42820: LD_VAR 0 2
42824: PPUSH
42825: LD_VAR 0 3
42829: PPUSH
42830: LD_VAR 0 5
42834: PPUSH
42835: CALL_OW 48
// end ;
42839: LD_VAR 0 6
42843: RET
// export function ToNaturalNumber ( number ) ; begin
42844: LD_INT 0
42846: PPUSH
// result := number div 1 ;
42847: LD_ADDR_VAR 0 2
42851: PUSH
42852: LD_VAR 0 1
42856: PUSH
42857: LD_INT 1
42859: DIV
42860: ST_TO_ADDR
// if number < 0 then
42861: LD_VAR 0 1
42865: PUSH
42866: LD_INT 0
42868: LESS
42869: IFFALSE 42879
// result := 0 ;
42871: LD_ADDR_VAR 0 2
42875: PUSH
42876: LD_INT 0
42878: ST_TO_ADDR
// end ;
42879: LD_VAR 0 2
42883: RET
// export function SortByClass ( units , class ) ; var un ; begin
42884: LD_INT 0
42886: PPUSH
42887: PPUSH
// if not units or not class then
42888: LD_VAR 0 1
42892: NOT
42893: PUSH
42894: LD_VAR 0 2
42898: NOT
42899: OR
42900: IFFALSE 42904
// exit ;
42902: GO 42999
// result := [ ] ;
42904: LD_ADDR_VAR 0 3
42908: PUSH
42909: EMPTY
42910: ST_TO_ADDR
// for un in units do
42911: LD_ADDR_VAR 0 4
42915: PUSH
42916: LD_VAR 0 1
42920: PUSH
42921: FOR_IN
42922: IFFALSE 42997
// if GetClass ( un ) = class then
42924: LD_VAR 0 4
42928: PPUSH
42929: CALL_OW 257
42933: PUSH
42934: LD_VAR 0 2
42938: EQUAL
42939: IFFALSE 42966
// result := Insert ( result , 1 , un ) else
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_VAR 0 3
42950: PPUSH
42951: LD_INT 1
42953: PPUSH
42954: LD_VAR 0 4
42958: PPUSH
42959: CALL_OW 2
42963: ST_TO_ADDR
42964: GO 42995
// result := Replace ( result , result + 1 , un ) ;
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_VAR 0 3
42975: PPUSH
42976: LD_VAR 0 3
42980: PUSH
42981: LD_INT 1
42983: PLUS
42984: PPUSH
42985: LD_VAR 0 4
42989: PPUSH
42990: CALL_OW 1
42994: ST_TO_ADDR
42995: GO 42921
42997: POP
42998: POP
// end ;
42999: LD_VAR 0 3
43003: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43004: LD_INT 0
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
// result := [ ] ;
43013: LD_ADDR_VAR 0 4
43017: PUSH
43018: EMPTY
43019: ST_TO_ADDR
// if x - r < 0 then
43020: LD_VAR 0 1
43024: PUSH
43025: LD_VAR 0 3
43029: MINUS
43030: PUSH
43031: LD_INT 0
43033: LESS
43034: IFFALSE 43046
// min_x := 0 else
43036: LD_ADDR_VAR 0 8
43040: PUSH
43041: LD_INT 0
43043: ST_TO_ADDR
43044: GO 43062
// min_x := x - r ;
43046: LD_ADDR_VAR 0 8
43050: PUSH
43051: LD_VAR 0 1
43055: PUSH
43056: LD_VAR 0 3
43060: MINUS
43061: ST_TO_ADDR
// if y - r < 0 then
43062: LD_VAR 0 2
43066: PUSH
43067: LD_VAR 0 3
43071: MINUS
43072: PUSH
43073: LD_INT 0
43075: LESS
43076: IFFALSE 43088
// min_y := 0 else
43078: LD_ADDR_VAR 0 7
43082: PUSH
43083: LD_INT 0
43085: ST_TO_ADDR
43086: GO 43104
// min_y := y - r ;
43088: LD_ADDR_VAR 0 7
43092: PUSH
43093: LD_VAR 0 2
43097: PUSH
43098: LD_VAR 0 3
43102: MINUS
43103: ST_TO_ADDR
// max_x := x + r ;
43104: LD_ADDR_VAR 0 9
43108: PUSH
43109: LD_VAR 0 1
43113: PUSH
43114: LD_VAR 0 3
43118: PLUS
43119: ST_TO_ADDR
// max_y := y + r ;
43120: LD_ADDR_VAR 0 10
43124: PUSH
43125: LD_VAR 0 2
43129: PUSH
43130: LD_VAR 0 3
43134: PLUS
43135: ST_TO_ADDR
// for _x = min_x to max_x do
43136: LD_ADDR_VAR 0 5
43140: PUSH
43141: DOUBLE
43142: LD_VAR 0 8
43146: DEC
43147: ST_TO_ADDR
43148: LD_VAR 0 9
43152: PUSH
43153: FOR_TO
43154: IFFALSE 43255
// for _y = min_y to max_y do
43156: LD_ADDR_VAR 0 6
43160: PUSH
43161: DOUBLE
43162: LD_VAR 0 7
43166: DEC
43167: ST_TO_ADDR
43168: LD_VAR 0 10
43172: PUSH
43173: FOR_TO
43174: IFFALSE 43251
// begin if not ValidHex ( _x , _y ) then
43176: LD_VAR 0 5
43180: PPUSH
43181: LD_VAR 0 6
43185: PPUSH
43186: CALL_OW 488
43190: NOT
43191: IFFALSE 43195
// continue ;
43193: GO 43173
// if GetResourceTypeXY ( _x , _y ) then
43195: LD_VAR 0 5
43199: PPUSH
43200: LD_VAR 0 6
43204: PPUSH
43205: CALL_OW 283
43209: IFFALSE 43249
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43211: LD_ADDR_VAR 0 4
43215: PUSH
43216: LD_VAR 0 4
43220: PPUSH
43221: LD_VAR 0 4
43225: PUSH
43226: LD_INT 1
43228: PLUS
43229: PPUSH
43230: LD_VAR 0 5
43234: PUSH
43235: LD_VAR 0 6
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PPUSH
43244: CALL_OW 1
43248: ST_TO_ADDR
// end ;
43249: GO 43173
43251: POP
43252: POP
43253: GO 43153
43255: POP
43256: POP
// end ;
43257: LD_VAR 0 4
43261: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43262: LD_INT 0
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
// if not units then
43272: LD_VAR 0 1
43276: NOT
43277: IFFALSE 43281
// exit ;
43279: GO 43809
// result := UnitFilter ( units , [ f_ok ] ) ;
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: LD_VAR 0 1
43290: PPUSH
43291: LD_INT 50
43293: PUSH
43294: EMPTY
43295: LIST
43296: PPUSH
43297: CALL_OW 72
43301: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43302: LD_ADDR_VAR 0 8
43306: PUSH
43307: LD_VAR 0 1
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PPUSH
43316: CALL_OW 255
43320: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43321: LD_ADDR_VAR 0 10
43325: PUSH
43326: LD_INT 29
43328: PUSH
43329: LD_INT 91
43331: PUSH
43332: LD_INT 49
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: ST_TO_ADDR
// if not result then
43340: LD_VAR 0 3
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 43809
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43349: LD_ADDR_VAR 0 5
43353: PUSH
43354: LD_INT 81
43356: PUSH
43357: LD_VAR 0 8
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PPUSH
43366: CALL_OW 69
43370: ST_TO_ADDR
// for i in result do
43371: LD_ADDR_VAR 0 4
43375: PUSH
43376: LD_VAR 0 3
43380: PUSH
43381: FOR_IN
43382: IFFALSE 43807
// begin tag := GetTag ( i ) + 1 ;
43384: LD_ADDR_VAR 0 9
43388: PUSH
43389: LD_VAR 0 4
43393: PPUSH
43394: CALL_OW 110
43398: PUSH
43399: LD_INT 1
43401: PLUS
43402: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43403: LD_ADDR_VAR 0 7
43407: PUSH
43408: LD_VAR 0 4
43412: PPUSH
43413: CALL_OW 250
43417: PPUSH
43418: LD_VAR 0 4
43422: PPUSH
43423: CALL_OW 251
43427: PPUSH
43428: LD_INT 4
43430: PPUSH
43431: CALL 43004 0 3
43435: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43436: LD_VAR 0 4
43440: PPUSH
43441: CALL_OW 247
43445: PUSH
43446: LD_INT 2
43448: EQUAL
43449: PUSH
43450: LD_VAR 0 7
43454: PUSH
43455: LD_INT 2
43457: GREATER
43458: AND
43459: PUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: CALL_OW 264
43469: PUSH
43470: LD_VAR 0 10
43474: IN
43475: NOT
43476: AND
43477: IFFALSE 43516
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43479: LD_VAR 0 4
43483: PPUSH
43484: LD_VAR 0 7
43488: PUSH
43489: LD_INT 1
43491: ARRAY
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PPUSH
43497: LD_VAR 0 7
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: PUSH
43506: LD_INT 2
43508: ARRAY
43509: PPUSH
43510: CALL_OW 116
43514: GO 43805
// if path > tag then
43516: LD_VAR 0 2
43520: PUSH
43521: LD_VAR 0 9
43525: GREATER
43526: IFFALSE 43734
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43528: LD_ADDR_VAR 0 6
43532: PUSH
43533: LD_VAR 0 5
43537: PPUSH
43538: LD_INT 91
43540: PUSH
43541: LD_VAR 0 4
43545: PUSH
43546: LD_INT 8
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: PPUSH
43554: CALL_OW 72
43558: ST_TO_ADDR
// if nearEnemy then
43559: LD_VAR 0 6
43563: IFFALSE 43632
// begin if GetWeapon ( i ) = ru_time_lapser then
43565: LD_VAR 0 4
43569: PPUSH
43570: CALL_OW 264
43574: PUSH
43575: LD_INT 49
43577: EQUAL
43578: IFFALSE 43606
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43580: LD_VAR 0 4
43584: PPUSH
43585: LD_VAR 0 6
43589: PPUSH
43590: LD_VAR 0 4
43594: PPUSH
43595: CALL_OW 74
43599: PPUSH
43600: CALL_OW 112
43604: GO 43630
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43606: LD_VAR 0 4
43610: PPUSH
43611: LD_VAR 0 6
43615: PPUSH
43616: LD_VAR 0 4
43620: PPUSH
43621: CALL_OW 74
43625: PPUSH
43626: CALL 44880 0 2
// end else
43630: GO 43732
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43632: LD_VAR 0 4
43636: PPUSH
43637: LD_VAR 0 2
43641: PUSH
43642: LD_VAR 0 9
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: LD_VAR 0 2
43656: PUSH
43657: LD_VAR 0 9
43661: ARRAY
43662: PUSH
43663: LD_INT 2
43665: ARRAY
43666: PPUSH
43667: CALL_OW 297
43671: PUSH
43672: LD_INT 6
43674: GREATER
43675: IFFALSE 43718
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43677: LD_VAR 0 4
43681: PPUSH
43682: LD_VAR 0 2
43686: PUSH
43687: LD_VAR 0 9
43691: ARRAY
43692: PUSH
43693: LD_INT 1
43695: ARRAY
43696: PPUSH
43697: LD_VAR 0 2
43701: PUSH
43702: LD_VAR 0 9
43706: ARRAY
43707: PUSH
43708: LD_INT 2
43710: ARRAY
43711: PPUSH
43712: CALL_OW 114
43716: GO 43732
// SetTag ( i , tag ) ;
43718: LD_VAR 0 4
43722: PPUSH
43723: LD_VAR 0 9
43727: PPUSH
43728: CALL_OW 109
// end else
43732: GO 43805
// if enemy then
43734: LD_VAR 0 5
43738: IFFALSE 43805
// begin if GetWeapon ( i ) = ru_time_lapser then
43740: LD_VAR 0 4
43744: PPUSH
43745: CALL_OW 264
43749: PUSH
43750: LD_INT 49
43752: EQUAL
43753: IFFALSE 43781
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43755: LD_VAR 0 4
43759: PPUSH
43760: LD_VAR 0 5
43764: PPUSH
43765: LD_VAR 0 4
43769: PPUSH
43770: CALL_OW 74
43774: PPUSH
43775: CALL_OW 112
43779: GO 43805
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43781: LD_VAR 0 4
43785: PPUSH
43786: LD_VAR 0 5
43790: PPUSH
43791: LD_VAR 0 4
43795: PPUSH
43796: CALL_OW 74
43800: PPUSH
43801: CALL 44880 0 2
// end ; end ;
43805: GO 43381
43807: POP
43808: POP
// end ;
43809: LD_VAR 0 3
43813: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43814: LD_INT 0
43816: PPUSH
43817: PPUSH
43818: PPUSH
// if not unit or IsInUnit ( unit ) then
43819: LD_VAR 0 1
43823: NOT
43824: PUSH
43825: LD_VAR 0 1
43829: PPUSH
43830: CALL_OW 310
43834: OR
43835: IFFALSE 43839
// exit ;
43837: GO 43930
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43839: LD_ADDR_VAR 0 4
43843: PUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 250
43853: PPUSH
43854: LD_VAR 0 2
43858: PPUSH
43859: LD_INT 1
43861: PPUSH
43862: CALL_OW 272
43866: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43867: LD_ADDR_VAR 0 5
43871: PUSH
43872: LD_VAR 0 1
43876: PPUSH
43877: CALL_OW 251
43881: PPUSH
43882: LD_VAR 0 2
43886: PPUSH
43887: LD_INT 1
43889: PPUSH
43890: CALL_OW 273
43894: ST_TO_ADDR
// if ValidHex ( x , y ) then
43895: LD_VAR 0 4
43899: PPUSH
43900: LD_VAR 0 5
43904: PPUSH
43905: CALL_OW 488
43909: IFFALSE 43930
// ComTurnXY ( unit , x , y ) ;
43911: LD_VAR 0 1
43915: PPUSH
43916: LD_VAR 0 4
43920: PPUSH
43921: LD_VAR 0 5
43925: PPUSH
43926: CALL_OW 118
// end ;
43930: LD_VAR 0 3
43934: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43935: LD_INT 0
43937: PPUSH
43938: PPUSH
// result := false ;
43939: LD_ADDR_VAR 0 3
43943: PUSH
43944: LD_INT 0
43946: ST_TO_ADDR
// if not units then
43947: LD_VAR 0 2
43951: NOT
43952: IFFALSE 43956
// exit ;
43954: GO 44001
// for i in units do
43956: LD_ADDR_VAR 0 4
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: FOR_IN
43967: IFFALSE 43999
// if See ( side , i ) then
43969: LD_VAR 0 1
43973: PPUSH
43974: LD_VAR 0 4
43978: PPUSH
43979: CALL_OW 292
43983: IFFALSE 43997
// begin result := true ;
43985: LD_ADDR_VAR 0 3
43989: PUSH
43990: LD_INT 1
43992: ST_TO_ADDR
// exit ;
43993: POP
43994: POP
43995: GO 44001
// end ;
43997: GO 43966
43999: POP
44000: POP
// end ;
44001: LD_VAR 0 3
44005: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
// if not unit or not points then
44012: LD_VAR 0 1
44016: NOT
44017: PUSH
44018: LD_VAR 0 2
44022: NOT
44023: OR
44024: IFFALSE 44028
// exit ;
44026: GO 44118
// dist := 99999 ;
44028: LD_ADDR_VAR 0 5
44032: PUSH
44033: LD_INT 99999
44035: ST_TO_ADDR
// for i in points do
44036: LD_ADDR_VAR 0 4
44040: PUSH
44041: LD_VAR 0 2
44045: PUSH
44046: FOR_IN
44047: IFFALSE 44116
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44049: LD_ADDR_VAR 0 6
44053: PUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: LD_VAR 0 4
44063: PUSH
44064: LD_INT 1
44066: ARRAY
44067: PPUSH
44068: LD_VAR 0 4
44072: PUSH
44073: LD_INT 2
44075: ARRAY
44076: PPUSH
44077: CALL_OW 297
44081: ST_TO_ADDR
// if tmpDist < dist then
44082: LD_VAR 0 6
44086: PUSH
44087: LD_VAR 0 5
44091: LESS
44092: IFFALSE 44114
// begin result := i ;
44094: LD_ADDR_VAR 0 3
44098: PUSH
44099: LD_VAR 0 4
44103: ST_TO_ADDR
// dist := tmpDist ;
44104: LD_ADDR_VAR 0 5
44108: PUSH
44109: LD_VAR 0 6
44113: ST_TO_ADDR
// end ; end ;
44114: GO 44046
44116: POP
44117: POP
// end ;
44118: LD_VAR 0 3
44122: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44123: LD_INT 0
44125: PPUSH
// uc_side := side ;
44126: LD_ADDR_OWVAR 20
44130: PUSH
44131: LD_VAR 0 1
44135: ST_TO_ADDR
// uc_nation := 3 ;
44136: LD_ADDR_OWVAR 21
44140: PUSH
44141: LD_INT 3
44143: ST_TO_ADDR
// vc_chassis := 25 ;
44144: LD_ADDR_OWVAR 37
44148: PUSH
44149: LD_INT 25
44151: ST_TO_ADDR
// vc_engine := engine_siberite ;
44152: LD_ADDR_OWVAR 39
44156: PUSH
44157: LD_INT 3
44159: ST_TO_ADDR
// vc_control := control_computer ;
44160: LD_ADDR_OWVAR 38
44164: PUSH
44165: LD_INT 3
44167: ST_TO_ADDR
// vc_weapon := 59 ;
44168: LD_ADDR_OWVAR 40
44172: PUSH
44173: LD_INT 59
44175: ST_TO_ADDR
// result := CreateVehicle ;
44176: LD_ADDR_VAR 0 5
44180: PUSH
44181: CALL_OW 45
44185: ST_TO_ADDR
// SetDir ( result , d ) ;
44186: LD_VAR 0 5
44190: PPUSH
44191: LD_VAR 0 4
44195: PPUSH
44196: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44200: LD_VAR 0 5
44204: PPUSH
44205: LD_VAR 0 2
44209: PPUSH
44210: LD_VAR 0 3
44214: PPUSH
44215: LD_INT 0
44217: PPUSH
44218: CALL_OW 48
// end ;
44222: LD_VAR 0 5
44226: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44227: LD_INT 0
44229: PPUSH
44230: PPUSH
44231: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44232: LD_ADDR_VAR 0 2
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44255: LD_VAR 0 1
44259: NOT
44260: PUSH
44261: LD_VAR 0 1
44265: PPUSH
44266: CALL_OW 264
44270: PUSH
44271: LD_INT 12
44273: PUSH
44274: LD_INT 51
44276: PUSH
44277: LD_INT 32
44279: PUSH
44280: LD_INT 89
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: IN
44289: NOT
44290: OR
44291: IFFALSE 44295
// exit ;
44293: GO 44393
// for i := 1 to 3 do
44295: LD_ADDR_VAR 0 3
44299: PUSH
44300: DOUBLE
44301: LD_INT 1
44303: DEC
44304: ST_TO_ADDR
44305: LD_INT 3
44307: PUSH
44308: FOR_TO
44309: IFFALSE 44391
// begin tmp := GetCargo ( cargo , i ) ;
44311: LD_ADDR_VAR 0 4
44315: PUSH
44316: LD_VAR 0 1
44320: PPUSH
44321: LD_VAR 0 3
44325: PPUSH
44326: CALL_OW 289
44330: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44331: LD_ADDR_VAR 0 2
44335: PUSH
44336: LD_VAR 0 2
44340: PPUSH
44341: LD_VAR 0 3
44345: PPUSH
44346: LD_VAR 0 4
44350: PPUSH
44351: CALL_OW 1
44355: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44356: LD_ADDR_VAR 0 2
44360: PUSH
44361: LD_VAR 0 2
44365: PPUSH
44366: LD_INT 4
44368: PPUSH
44369: LD_VAR 0 2
44373: PUSH
44374: LD_INT 4
44376: ARRAY
44377: PUSH
44378: LD_VAR 0 4
44382: PLUS
44383: PPUSH
44384: CALL_OW 1
44388: ST_TO_ADDR
// end ;
44389: GO 44308
44391: POP
44392: POP
// end ;
44393: LD_VAR 0 2
44397: RET
// export function Length ( array ) ; begin
44398: LD_INT 0
44400: PPUSH
// result := array + 0 ;
44401: LD_ADDR_VAR 0 2
44405: PUSH
44406: LD_VAR 0 1
44410: PUSH
44411: LD_INT 0
44413: PLUS
44414: ST_TO_ADDR
// end ;
44415: LD_VAR 0 2
44419: RET
// export function PrepareArray ( array ) ; begin
44420: LD_INT 0
44422: PPUSH
// result := array diff 0 ;
44423: LD_ADDR_VAR 0 2
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_INT 0
44435: DIFF
44436: ST_TO_ADDR
// if not result [ 1 ] then
44437: LD_VAR 0 2
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: NOT
44446: IFFALSE 44466
// result := Delete ( result , 1 ) ;
44448: LD_ADDR_VAR 0 2
44452: PUSH
44453: LD_VAR 0 2
44457: PPUSH
44458: LD_INT 1
44460: PPUSH
44461: CALL_OW 3
44465: ST_TO_ADDR
// end ;
44466: LD_VAR 0 2
44470: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44471: LD_INT 0
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
// sibRocketRange := 25 ;
44477: LD_ADDR_VAR 0 6
44481: PUSH
44482: LD_INT 25
44484: ST_TO_ADDR
// result := false ;
44485: LD_ADDR_VAR 0 4
44489: PUSH
44490: LD_INT 0
44492: ST_TO_ADDR
// for i := 0 to 5 do
44493: LD_ADDR_VAR 0 5
44497: PUSH
44498: DOUBLE
44499: LD_INT 0
44501: DEC
44502: ST_TO_ADDR
44503: LD_INT 5
44505: PUSH
44506: FOR_TO
44507: IFFALSE 44574
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44509: LD_VAR 0 1
44513: PPUSH
44514: LD_VAR 0 5
44518: PPUSH
44519: LD_VAR 0 6
44523: PPUSH
44524: CALL_OW 272
44528: PPUSH
44529: LD_VAR 0 2
44533: PPUSH
44534: LD_VAR 0 5
44538: PPUSH
44539: LD_VAR 0 6
44543: PPUSH
44544: CALL_OW 273
44548: PPUSH
44549: LD_VAR 0 3
44553: PPUSH
44554: CALL_OW 309
44558: IFFALSE 44572
// begin result := true ;
44560: LD_ADDR_VAR 0 4
44564: PUSH
44565: LD_INT 1
44567: ST_TO_ADDR
// exit ;
44568: POP
44569: POP
44570: GO 44576
// end ;
44572: GO 44506
44574: POP
44575: POP
// end ;
44576: LD_VAR 0 4
44580: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44581: LD_INT 0
44583: PPUSH
44584: PPUSH
44585: PPUSH
// if btype = b_depot then
44586: LD_VAR 0 2
44590: PUSH
44591: LD_INT 0
44593: EQUAL
44594: IFFALSE 44606
// begin result := true ;
44596: LD_ADDR_VAR 0 3
44600: PUSH
44601: LD_INT 1
44603: ST_TO_ADDR
// exit ;
44604: GO 44722
// end ; pom := GetBase ( depot ) ;
44606: LD_ADDR_VAR 0 4
44610: PUSH
44611: LD_VAR 0 1
44615: PPUSH
44616: CALL_OW 274
44620: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44621: LD_ADDR_VAR 0 5
44625: PUSH
44626: LD_VAR 0 2
44630: PPUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: CALL_OW 248
44640: PPUSH
44641: CALL_OW 450
44645: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44646: LD_ADDR_VAR 0 3
44650: PUSH
44651: LD_VAR 0 4
44655: PPUSH
44656: LD_INT 1
44658: PPUSH
44659: CALL_OW 275
44663: PUSH
44664: LD_VAR 0 5
44668: PUSH
44669: LD_INT 1
44671: ARRAY
44672: GREATEREQUAL
44673: PUSH
44674: LD_VAR 0 4
44678: PPUSH
44679: LD_INT 2
44681: PPUSH
44682: CALL_OW 275
44686: PUSH
44687: LD_VAR 0 5
44691: PUSH
44692: LD_INT 2
44694: ARRAY
44695: GREATEREQUAL
44696: AND
44697: PUSH
44698: LD_VAR 0 4
44702: PPUSH
44703: LD_INT 3
44705: PPUSH
44706: CALL_OW 275
44710: PUSH
44711: LD_VAR 0 5
44715: PUSH
44716: LD_INT 3
44718: ARRAY
44719: GREATEREQUAL
44720: AND
44721: ST_TO_ADDR
// end ;
44722: LD_VAR 0 3
44726: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44727: LD_INT 0
44729: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44730: LD_VAR 0 1
44734: PPUSH
44735: LD_VAR 0 2
44739: PPUSH
44740: LD_INT 0
44742: PPUSH
44743: LD_INT 0
44745: PPUSH
44746: LD_INT 1
44748: PPUSH
44749: LD_INT 0
44751: PPUSH
44752: CALL_OW 587
// end ;
44756: LD_VAR 0 3
44760: RET
// export function CenterOnNow ( unit ) ; begin
44761: LD_INT 0
44763: PPUSH
// result := IsInUnit ( unit ) ;
44764: LD_ADDR_VAR 0 2
44768: PUSH
44769: LD_VAR 0 1
44773: PPUSH
44774: CALL_OW 310
44778: ST_TO_ADDR
// if not result then
44779: LD_VAR 0 2
44783: NOT
44784: IFFALSE 44796
// result := unit ;
44786: LD_ADDR_VAR 0 2
44790: PUSH
44791: LD_VAR 0 1
44795: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44796: LD_VAR 0 1
44800: PPUSH
44801: CALL_OW 87
// end ;
44805: LD_VAR 0 2
44809: RET
// export function ComMoveHex ( unit , hex ) ; begin
44810: LD_INT 0
44812: PPUSH
// if not hex then
44813: LD_VAR 0 2
44817: NOT
44818: IFFALSE 44822
// exit ;
44820: GO 44875
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44822: LD_VAR 0 2
44826: PUSH
44827: LD_INT 1
44829: ARRAY
44830: PPUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_INT 2
44838: ARRAY
44839: PPUSH
44840: CALL_OW 428
44844: IFFALSE 44848
// exit ;
44846: GO 44875
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44848: LD_VAR 0 1
44852: PPUSH
44853: LD_VAR 0 2
44857: PUSH
44858: LD_INT 1
44860: ARRAY
44861: PPUSH
44862: LD_VAR 0 2
44866: PUSH
44867: LD_INT 2
44869: ARRAY
44870: PPUSH
44871: CALL_OW 111
// end ;
44875: LD_VAR 0 3
44879: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44880: LD_INT 0
44882: PPUSH
44883: PPUSH
44884: PPUSH
// if not unit or not enemy then
44885: LD_VAR 0 1
44889: NOT
44890: PUSH
44891: LD_VAR 0 2
44895: NOT
44896: OR
44897: IFFALSE 44901
// exit ;
44899: GO 45025
// x := GetX ( enemy ) ;
44901: LD_ADDR_VAR 0 4
44905: PUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: CALL_OW 250
44915: ST_TO_ADDR
// y := GetY ( enemy ) ;
44916: LD_ADDR_VAR 0 5
44920: PUSH
44921: LD_VAR 0 2
44925: PPUSH
44926: CALL_OW 251
44930: ST_TO_ADDR
// if ValidHex ( x , y ) then
44931: LD_VAR 0 4
44935: PPUSH
44936: LD_VAR 0 5
44940: PPUSH
44941: CALL_OW 488
44945: IFFALSE 45025
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44947: LD_VAR 0 2
44951: PPUSH
44952: CALL_OW 247
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: IN
44967: PUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: CALL_OW 255
44977: PPUSH
44978: LD_VAR 0 2
44982: PPUSH
44983: CALL_OW 292
44987: OR
44988: IFFALSE 45006
// ComAttackUnit ( unit , enemy ) else
44990: LD_VAR 0 1
44994: PPUSH
44995: LD_VAR 0 2
44999: PPUSH
45000: CALL_OW 115
45004: GO 45025
// ComAgressiveMove ( unit , x , y ) ;
45006: LD_VAR 0 1
45010: PPUSH
45011: LD_VAR 0 4
45015: PPUSH
45016: LD_VAR 0 5
45020: PPUSH
45021: CALL_OW 114
// end ;
45025: LD_VAR 0 3
45029: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45030: LD_INT 0
45032: PPUSH
45033: PPUSH
45034: PPUSH
// list := AreaToList ( area , 0 ) ;
45035: LD_ADDR_VAR 0 5
45039: PUSH
45040: LD_VAR 0 1
45044: PPUSH
45045: LD_INT 0
45047: PPUSH
45048: CALL_OW 517
45052: ST_TO_ADDR
// if not list then
45053: LD_VAR 0 5
45057: NOT
45058: IFFALSE 45062
// exit ;
45060: GO 45192
// if all then
45062: LD_VAR 0 2
45066: IFFALSE 45154
// begin for i := 1 to list [ 1 ] do
45068: LD_ADDR_VAR 0 4
45072: PUSH
45073: DOUBLE
45074: LD_INT 1
45076: DEC
45077: ST_TO_ADDR
45078: LD_VAR 0 5
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PUSH
45087: FOR_TO
45088: IFFALSE 45150
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_VAR 0 3
45099: PPUSH
45100: LD_VAR 0 3
45104: PUSH
45105: LD_INT 1
45107: PLUS
45108: PPUSH
45109: LD_VAR 0 5
45113: PUSH
45114: LD_INT 1
45116: ARRAY
45117: PUSH
45118: LD_VAR 0 4
45122: ARRAY
45123: PUSH
45124: LD_VAR 0 5
45128: PUSH
45129: LD_INT 2
45131: ARRAY
45132: PUSH
45133: LD_VAR 0 4
45137: ARRAY
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PPUSH
45143: CALL_OW 1
45147: ST_TO_ADDR
45148: GO 45087
45150: POP
45151: POP
// exit ;
45152: GO 45192
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45154: LD_ADDR_VAR 0 3
45158: PUSH
45159: LD_VAR 0 5
45163: PUSH
45164: LD_INT 1
45166: ARRAY
45167: PUSH
45168: LD_INT 1
45170: ARRAY
45171: PUSH
45172: LD_VAR 0 5
45176: PUSH
45177: LD_INT 2
45179: ARRAY
45180: PUSH
45181: LD_INT 1
45183: ARRAY
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: ST_TO_ADDR
// end ;
45192: LD_VAR 0 3
45196: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45197: LD_INT 0
45199: PPUSH
45200: PPUSH
// list := AreaToList ( area , 0 ) ;
45201: LD_ADDR_VAR 0 4
45205: PUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: LD_INT 0
45213: PPUSH
45214: CALL_OW 517
45218: ST_TO_ADDR
// if not list then
45219: LD_VAR 0 4
45223: NOT
45224: IFFALSE 45228
// exit ;
45226: GO 45269
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_VAR 0 4
45237: PUSH
45238: LD_INT 1
45240: ARRAY
45241: PUSH
45242: LD_INT 1
45244: ARRAY
45245: PUSH
45246: LD_VAR 0 4
45250: PUSH
45251: LD_INT 2
45253: ARRAY
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PUSH
45259: LD_VAR 0 2
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// end ;
45269: LD_VAR 0 3
45273: RET
// export function First ( array ) ; begin
45274: LD_INT 0
45276: PPUSH
// if not array then
45277: LD_VAR 0 1
45281: NOT
45282: IFFALSE 45286
// exit ;
45284: GO 45300
// result := array [ 1 ] ;
45286: LD_ADDR_VAR 0 2
45290: PUSH
45291: LD_VAR 0 1
45295: PUSH
45296: LD_INT 1
45298: ARRAY
45299: ST_TO_ADDR
// end ;
45300: LD_VAR 0 2
45304: RET
// export function Last ( array ) ; begin
45305: LD_INT 0
45307: PPUSH
// if not array then
45308: LD_VAR 0 1
45312: NOT
45313: IFFALSE 45317
// exit ;
45315: GO 45333
// result := array [ array ] ;
45317: LD_ADDR_VAR 0 2
45321: PUSH
45322: LD_VAR 0 1
45326: PUSH
45327: LD_VAR 0 1
45331: ARRAY
45332: ST_TO_ADDR
// end ;
45333: LD_VAR 0 2
45337: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45338: LD_INT 0
45340: PPUSH
45341: PPUSH
// result := [ ] ;
45342: LD_ADDR_VAR 0 5
45346: PUSH
45347: EMPTY
45348: ST_TO_ADDR
// if not array then
45349: LD_VAR 0 1
45353: NOT
45354: IFFALSE 45358
// exit ;
45356: GO 45470
// for i := 1 to array do
45358: LD_ADDR_VAR 0 6
45362: PUSH
45363: DOUBLE
45364: LD_INT 1
45366: DEC
45367: ST_TO_ADDR
45368: LD_VAR 0 1
45372: PUSH
45373: FOR_TO
45374: IFFALSE 45468
// if array [ i ] [ index ] = value then
45376: LD_VAR 0 1
45380: PUSH
45381: LD_VAR 0 6
45385: ARRAY
45386: PUSH
45387: LD_VAR 0 2
45391: ARRAY
45392: PUSH
45393: LD_VAR 0 3
45397: EQUAL
45398: IFFALSE 45466
// begin if indexColumn then
45400: LD_VAR 0 4
45404: IFFALSE 45440
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45406: LD_ADDR_VAR 0 5
45410: PUSH
45411: LD_VAR 0 5
45415: PPUSH
45416: LD_VAR 0 1
45420: PUSH
45421: LD_VAR 0 6
45425: ARRAY
45426: PUSH
45427: LD_VAR 0 4
45431: ARRAY
45432: PPUSH
45433: CALL 40658 0 2
45437: ST_TO_ADDR
45438: GO 45466
// result := Join ( result , array [ i ] ) ;
45440: LD_ADDR_VAR 0 5
45444: PUSH
45445: LD_VAR 0 5
45449: PPUSH
45450: LD_VAR 0 1
45454: PUSH
45455: LD_VAR 0 6
45459: ARRAY
45460: PPUSH
45461: CALL 40658 0 2
45465: ST_TO_ADDR
// end ;
45466: GO 45373
45468: POP
45469: POP
// end ;
45470: LD_VAR 0 5
45474: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45475: LD_INT 0
45477: PPUSH
// if not vehicles or not parkingPoint then
45478: LD_VAR 0 1
45482: NOT
45483: PUSH
45484: LD_VAR 0 2
45488: NOT
45489: OR
45490: IFFALSE 45494
// exit ;
45492: GO 45592
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45494: LD_ADDR_VAR 0 1
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: LD_INT 50
45506: PUSH
45507: EMPTY
45508: LIST
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: LD_INT 92
45515: PUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: PUSH
45525: LD_VAR 0 2
45529: PUSH
45530: LD_INT 2
45532: ARRAY
45533: PUSH
45534: LD_INT 8
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PPUSH
45551: CALL_OW 72
45555: ST_TO_ADDR
// if not vehicles then
45556: LD_VAR 0 1
45560: NOT
45561: IFFALSE 45565
// exit ;
45563: GO 45592
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45565: LD_VAR 0 1
45569: PPUSH
45570: LD_VAR 0 2
45574: PUSH
45575: LD_INT 1
45577: ARRAY
45578: PPUSH
45579: LD_VAR 0 2
45583: PUSH
45584: LD_INT 2
45586: ARRAY
45587: PPUSH
45588: CALL_OW 111
// end ;
45592: LD_VAR 0 3
45596: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45597: LD_INT 0
45599: PPUSH
45600: PPUSH
45601: PPUSH
// if not side or not area then
45602: LD_VAR 0 1
45606: NOT
45607: PUSH
45608: LD_VAR 0 2
45612: NOT
45613: OR
45614: IFFALSE 45618
// exit ;
45616: GO 45737
// tmp := AreaToList ( area , 0 ) ;
45618: LD_ADDR_VAR 0 5
45622: PUSH
45623: LD_VAR 0 2
45627: PPUSH
45628: LD_INT 0
45630: PPUSH
45631: CALL_OW 517
45635: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45636: LD_ADDR_VAR 0 4
45640: PUSH
45641: DOUBLE
45642: LD_INT 1
45644: DEC
45645: ST_TO_ADDR
45646: LD_VAR 0 5
45650: PUSH
45651: LD_INT 1
45653: ARRAY
45654: PUSH
45655: FOR_TO
45656: IFFALSE 45735
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45658: LD_VAR 0 5
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: PUSH
45667: LD_VAR 0 4
45671: ARRAY
45672: PPUSH
45673: LD_VAR 0 5
45677: PUSH
45678: LD_INT 2
45680: ARRAY
45681: PUSH
45682: LD_VAR 0 4
45686: ARRAY
45687: PPUSH
45688: CALL_OW 351
45692: IFFALSE 45733
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45694: LD_VAR 0 5
45698: PUSH
45699: LD_INT 1
45701: ARRAY
45702: PUSH
45703: LD_VAR 0 4
45707: ARRAY
45708: PPUSH
45709: LD_VAR 0 5
45713: PUSH
45714: LD_INT 2
45716: ARRAY
45717: PUSH
45718: LD_VAR 0 4
45722: ARRAY
45723: PPUSH
45724: LD_VAR 0 1
45728: PPUSH
45729: CALL_OW 244
// end ;
45733: GO 45655
45735: POP
45736: POP
// end ; end_of_file
45737: LD_VAR 0 3
45741: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45742: LD_INT 0
45744: PPUSH
45745: PPUSH
// disable ( mpActive ) ;
45746: LD_INT 100
45748: DISABLE_MARKED
// disable ( mpWin ) ;
45749: LD_INT 101
45751: DISABLE_MARKED
// disable ( mpLose ) ;
45752: LD_INT 102
45754: DISABLE_MARKED
// mpGameType := 0 ;
45755: LD_ADDR_EXP 1
45759: PUSH
45760: LD_INT 0
45762: ST_TO_ADDR
// mpGameSettings := [ ] ;
45763: LD_ADDR_EXP 4
45767: PUSH
45768: EMPTY
45769: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45770: LD_ADDR_EXP 2
45774: PUSH
45775: EMPTY
45776: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45777: LD_ADDR_EXP 3
45781: PUSH
45782: EMPTY
45783: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45784: LD_ADDR_EXP 27
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45799: LD_ADDR_EXP 10
45803: PUSH
45804: EMPTY
45805: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45806: LD_ADDR_EXP 11
45810: PUSH
45811: EMPTY
45812: ST_TO_ADDR
// mpDepots := [ ] ;
45813: LD_ADDR_EXP 12
45817: PUSH
45818: EMPTY
45819: ST_TO_ADDR
// mpBuildings := [ ] ;
45820: LD_ADDR_EXP 15
45824: PUSH
45825: EMPTY
45826: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45827: LD_ADDR_EXP 16
45831: PUSH
45832: EMPTY
45833: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45834: LD_ADDR_EXP 17
45838: PUSH
45839: EMPTY
45840: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45841: LD_ADDR_EXP 18
45845: PUSH
45846: EMPTY
45847: ST_TO_ADDR
// mpStartingResources := [ ] ;
45848: LD_ADDR_EXP 13
45852: PUSH
45853: EMPTY
45854: ST_TO_ADDR
// mpStartPos := [ ] ;
45855: LD_ADDR_EXP 19
45859: PUSH
45860: EMPTY
45861: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45862: LD_ADDR_EXP 20
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45871: LD_ADDR_EXP 21
45875: PUSH
45876: EMPTY
45877: ST_TO_ADDR
// mpApemans := [ ] ;
45878: LD_ADDR_EXP 28
45882: PUSH
45883: EMPTY
45884: ST_TO_ADDR
// mpApemansArea := [ ] ;
45885: LD_ADDR_EXP 29
45889: PUSH
45890: EMPTY
45891: ST_TO_ADDR
// mpRespawn := [ ] ;
45892: LD_ADDR_EXP 30
45896: PUSH
45897: EMPTY
45898: ST_TO_ADDR
// mpKingArea := 0 ;
45899: LD_ADDR_EXP 31
45903: PUSH
45904: LD_INT 0
45906: ST_TO_ADDR
// mpPoints := [ ] ;
45907: LD_ADDR_EXP 32
45911: PUSH
45912: EMPTY
45913: ST_TO_ADDR
// mpVehicles := 0 ;
45914: LD_ADDR_EXP 33
45918: PUSH
45919: LD_INT 0
45921: ST_TO_ADDR
// mpShipments := 0 ;
45922: LD_ADDR_EXP 25
45926: PUSH
45927: LD_INT 0
45929: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45930: LD_ADDR_EXP 37
45934: PUSH
45935: EMPTY
45936: PUSH
45937: EMPTY
45938: PUSH
45939: EMPTY
45940: PUSH
45941: EMPTY
45942: PUSH
45943: EMPTY
45944: PUSH
45945: EMPTY
45946: PUSH
45947: EMPTY
45948: PUSH
45949: EMPTY
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: ST_TO_ADDR
// mpEmissions := 0 ;
45961: LD_ADDR_EXP 34
45965: PUSH
45966: LD_INT 0
45968: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45969: LD_ADDR_EXP 23
45973: PUSH
45974: LD_INT 3
45976: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45977: LD_ADDR_EXP 22
45981: PUSH
45982: LD_INT 15
45984: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45985: LD_ADDR_EXP 35
45989: PUSH
45990: LD_INT 0
45992: ST_TO_ADDR
// mpGameActive := false ;
45993: LD_ADDR_EXP 36
45997: PUSH
45998: LD_INT 0
46000: ST_TO_ADDR
// mpBlockRespThread := false ;
46001: LD_ADDR_EXP 38
46005: PUSH
46006: LD_INT 0
46008: ST_TO_ADDR
// for i := 1 to 32 do
46009: LD_ADDR_VAR 0 2
46013: PUSH
46014: DOUBLE
46015: LD_INT 1
46017: DEC
46018: ST_TO_ADDR
46019: LD_INT 32
46021: PUSH
46022: FOR_TO
46023: IFFALSE 46050
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46025: LD_ADDR_EXP 4
46029: PUSH
46030: LD_EXP 4
46034: PPUSH
46035: LD_VAR 0 2
46039: PPUSH
46040: LD_INT 0
46042: PPUSH
46043: CALL_OW 1
46047: ST_TO_ADDR
46048: GO 46022
46050: POP
46051: POP
// end ;
46052: LD_VAR 0 1
46056: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46057: LD_INT 0
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46073: LD_ADDR_VAR 0 14
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// for i in gameTypes do
46092: LD_ADDR_VAR 0 2
46096: PUSH
46097: LD_VAR 0 14
46101: PUSH
46102: FOR_IN
46103: IFFALSE 46112
// disable ( i ) ;
46105: LD_VAR 0 2
46109: DISABLE_MARKED
46110: GO 46102
46112: POP
46113: POP
// if Multiplayer then
46114: LD_OWVAR 4
46118: IFFALSE 46302
// begin mpGameType := mp_game_type ;
46120: LD_ADDR_EXP 1
46124: PUSH
46125: LD_OWVAR 6
46129: ST_TO_ADDR
// your_side := mp_player_side ;
46130: LD_ADDR_OWVAR 2
46134: PUSH
46135: LD_OWVAR 7
46139: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46140: LD_ADDR_EXP 5
46144: PUSH
46145: LD_OWVAR 17
46149: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46150: LD_ADDR_EXP 6
46154: PUSH
46155: LD_OWVAR 15
46159: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46160: LD_ADDR_EXP 7
46164: PUSH
46165: LD_OWVAR 16
46169: ST_TO_ADDR
// mpTeams := mp_teams ;
46170: LD_ADDR_EXP 8
46174: PUSH
46175: LD_OWVAR 12
46179: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46180: LD_ADDR_VAR 0 2
46184: PUSH
46185: DOUBLE
46186: LD_INT 1
46188: DEC
46189: ST_TO_ADDR
46190: LD_EXP 2
46194: PPUSH
46195: CALL 5049 0 1
46199: PUSH
46200: FOR_TO
46201: IFFALSE 46277
// begin setting := mpGameSettingsKeys [ i ] ;
46203: LD_ADDR_VAR 0 12
46207: PUSH
46208: LD_EXP 2
46212: PUSH
46213: LD_VAR 0 2
46217: ARRAY
46218: ST_TO_ADDR
// if setting then
46219: LD_VAR 0 12
46223: IFFALSE 46275
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46225: LD_ADDR_EXP 4
46229: PUSH
46230: LD_EXP 4
46234: PPUSH
46235: LD_VAR 0 2
46239: PPUSH
46240: LD_EXP 3
46244: PUSH
46245: LD_VAR 0 2
46249: ARRAY
46250: PUSH
46251: LD_VAR 0 2
46255: PUSH
46256: LD_INT 1
46258: MINUS
46259: PPUSH
46260: CALL_OW 426
46264: PUSH
46265: LD_INT 1
46267: PLUS
46268: ARRAY
46269: PPUSH
46270: CALL_OW 1
46274: ST_TO_ADDR
// end ;
46275: GO 46200
46277: POP
46278: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46279: LD_ADDR_EXP 9
46283: PUSH
46284: LD_EXP 6
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: EMPTY
46293: LIST
46294: DIFF
46295: PUSH
46296: LD_INT 1
46298: GREATER
46299: ST_TO_ADDR
// end else
46300: GO 46302
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46302: LD_EXP 1
46306: PPUSH
46307: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46311: LD_EXP 16
46315: PPUSH
46316: CALL 5049 0 1
46320: IFFALSE 46351
// begin for i in mpMarkedAreas do
46322: LD_ADDR_VAR 0 2
46326: PUSH
46327: LD_EXP 16
46331: PUSH
46332: FOR_IN
46333: IFFALSE 46349
// SetAreaMapShow ( i , 0 ) ;
46335: LD_VAR 0 2
46339: PPUSH
46340: LD_INT 0
46342: PPUSH
46343: CALL_OW 424
46347: GO 46332
46349: POP
46350: POP
// end ; for i := 1 to 8 do
46351: LD_ADDR_VAR 0 2
46355: PUSH
46356: DOUBLE
46357: LD_INT 1
46359: DEC
46360: ST_TO_ADDR
46361: LD_INT 8
46363: PUSH
46364: FOR_TO
46365: IFFALSE 47581
// begin if not mpSidePositions [ i ] then
46367: LD_EXP 5
46371: PUSH
46372: LD_VAR 0 2
46376: ARRAY
46377: NOT
46378: IFFALSE 46382
// continue ;
46380: GO 46364
// side := i ;
46382: LD_ADDR_VAR 0 7
46386: PUSH
46387: LD_VAR 0 2
46391: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46392: LD_ADDR_VAR 0 9
46396: PUSH
46397: LD_EXP 7
46401: PUSH
46402: LD_VAR 0 2
46406: ARRAY
46407: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46408: LD_ADDR_VAR 0 8
46412: PUSH
46413: LD_EXP 5
46417: PUSH
46418: LD_VAR 0 2
46422: ARRAY
46423: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46424: LD_EXP 10
46428: PPUSH
46429: CALL 5049 0 1
46433: IFFALSE 46510
// begin for j in mpOilDeposits [ pos ] do
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_EXP 10
46444: PUSH
46445: LD_VAR 0 8
46449: ARRAY
46450: PUSH
46451: FOR_IN
46452: IFFALSE 46508
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46454: LD_VAR 0 3
46458: PUSH
46459: LD_INT 1
46461: ARRAY
46462: PPUSH
46463: LD_VAR 0 3
46467: PUSH
46468: LD_INT 2
46470: ARRAY
46471: PPUSH
46472: LD_INT 2
46474: PPUSH
46475: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46479: LD_VAR 0 3
46483: PUSH
46484: LD_INT 1
46486: ARRAY
46487: PPUSH
46488: LD_VAR 0 3
46492: PUSH
46493: LD_INT 2
46495: ARRAY
46496: PPUSH
46497: LD_VAR 0 7
46501: PPUSH
46502: CALL_OW 441
// end ;
46506: GO 46451
46508: POP
46509: POP
// end ; if Count ( mpSibDeposits ) then
46510: LD_EXP 11
46514: PPUSH
46515: CALL 5049 0 1
46519: IFFALSE 46596
// begin for j in mpSibDeposits [ pos ] do
46521: LD_ADDR_VAR 0 3
46525: PUSH
46526: LD_EXP 11
46530: PUSH
46531: LD_VAR 0 8
46535: ARRAY
46536: PUSH
46537: FOR_IN
46538: IFFALSE 46594
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46540: LD_VAR 0 3
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PPUSH
46549: LD_VAR 0 3
46553: PUSH
46554: LD_INT 2
46556: ARRAY
46557: PPUSH
46558: LD_INT 3
46560: PPUSH
46561: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46565: LD_VAR 0 3
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PPUSH
46574: LD_VAR 0 3
46578: PUSH
46579: LD_INT 2
46581: ARRAY
46582: PPUSH
46583: LD_VAR 0 7
46587: PPUSH
46588: CALL_OW 441
// end ;
46592: GO 46537
46594: POP
46595: POP
// end ; InitBc ;
46596: CALL_OW 21
// InitUc ;
46600: CALL_OW 18
// uc_side := side ;
46604: LD_ADDR_OWVAR 20
46608: PUSH
46609: LD_VAR 0 7
46613: ST_TO_ADDR
// uc_nation := nation ;
46614: LD_ADDR_OWVAR 21
46618: PUSH
46619: LD_VAR 0 9
46623: ST_TO_ADDR
// if Count ( mpDepots ) then
46624: LD_EXP 12
46628: PPUSH
46629: CALL 5049 0 1
46633: IFFALSE 46803
// begin bc_level := 0 ;
46635: LD_ADDR_OWVAR 43
46639: PUSH
46640: LD_INT 0
46642: ST_TO_ADDR
// bc_type := b_depot ;
46643: LD_ADDR_OWVAR 42
46647: PUSH
46648: LD_INT 0
46650: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46651: LD_ADDR_VAR 0 4
46655: PUSH
46656: LD_EXP 12
46660: PUSH
46661: LD_VAR 0 8
46665: ARRAY
46666: PUSH
46667: LD_INT 1
46669: ARRAY
46670: PPUSH
46671: LD_EXP 12
46675: PUSH
46676: LD_VAR 0 8
46680: ARRAY
46681: PUSH
46682: LD_INT 2
46684: ARRAY
46685: PPUSH
46686: LD_EXP 12
46690: PUSH
46691: LD_VAR 0 8
46695: ARRAY
46696: PUSH
46697: LD_INT 3
46699: ARRAY
46700: PPUSH
46701: CALL_OW 47
46705: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46706: LD_VAR 0 4
46710: PPUSH
46711: LD_STRING @
46713: PUSH
46714: LD_VAR 0 7
46718: STR
46719: PPUSH
46720: CALL_OW 500
// SetTag ( b , side ) ;
46724: LD_VAR 0 4
46728: PPUSH
46729: LD_VAR 0 7
46733: PPUSH
46734: CALL_OW 109
// if Count ( mpStartingResources ) then
46738: LD_EXP 13
46742: PPUSH
46743: CALL 5049 0 1
46747: IFFALSE 46801
// begin for j := 1 to mpStartingResources do
46749: LD_ADDR_VAR 0 3
46753: PUSH
46754: DOUBLE
46755: LD_INT 1
46757: DEC
46758: ST_TO_ADDR
46759: LD_EXP 13
46763: PUSH
46764: FOR_TO
46765: IFFALSE 46799
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46767: LD_VAR 0 4
46771: PPUSH
46772: CALL_OW 274
46776: PPUSH
46777: LD_VAR 0 3
46781: PPUSH
46782: LD_EXP 13
46786: PUSH
46787: LD_VAR 0 3
46791: ARRAY
46792: PPUSH
46793: CALL_OW 277
46797: GO 46764
46799: POP
46800: POP
// end ; end else
46801: GO 46950
// if Count ( mpStartingResources ) then
46803: LD_EXP 13
46807: PPUSH
46808: CALL 5049 0 1
46812: IFFALSE 46950
// begin for j := 1 to mpStartingResources do
46814: LD_ADDR_VAR 0 3
46818: PUSH
46819: DOUBLE
46820: LD_INT 1
46822: DEC
46823: ST_TO_ADDR
46824: LD_EXP 13
46828: PUSH
46829: FOR_TO
46830: IFFALSE 46948
// begin resources := mpStartingResources [ j ] ;
46832: LD_ADDR_VAR 0 13
46836: PUSH
46837: LD_EXP 13
46841: PUSH
46842: LD_VAR 0 3
46846: ARRAY
46847: ST_TO_ADDR
// repeat if resources >= 50 then
46848: LD_VAR 0 13
46852: PUSH
46853: LD_INT 50
46855: GREATEREQUAL
46856: IFFALSE 46902
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46858: LD_VAR 0 3
46862: PPUSH
46863: LD_INT 5
46865: PPUSH
46866: LD_VAR 0 5
46870: PPUSH
46871: LD_VAR 0 6
46875: PPUSH
46876: LD_INT 4
46878: PPUSH
46879: LD_INT 0
46881: PPUSH
46882: CALL_OW 60
// resources := resources - 50 ;
46886: LD_ADDR_VAR 0 13
46890: PUSH
46891: LD_VAR 0 13
46895: PUSH
46896: LD_INT 50
46898: MINUS
46899: ST_TO_ADDR
// end else
46900: GO 46936
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46902: LD_VAR 0 3
46906: PPUSH
46907: LD_VAR 0 13
46911: PUSH
46912: LD_INT 10
46914: DIV
46915: PPUSH
46916: LD_VAR 0 5
46920: PPUSH
46921: LD_VAR 0 6
46925: PPUSH
46926: LD_INT 4
46928: PPUSH
46929: LD_INT 0
46931: PPUSH
46932: CALL_OW 60
// until resources <= 0 ;
46936: LD_VAR 0 13
46940: PUSH
46941: LD_INT 0
46943: LESSEQUAL
46944: IFFALSE 46848
// end ;
46946: GO 46829
46948: POP
46949: POP
// end ; if Count ( mpBuildings ) then
46950: LD_EXP 15
46954: PPUSH
46955: CALL 5049 0 1
46959: IFFALSE 47037
// begin for j in mpBuildings [ pos ] do
46961: LD_ADDR_VAR 0 3
46965: PUSH
46966: LD_EXP 15
46970: PUSH
46971: LD_VAR 0 8
46975: ARRAY
46976: PUSH
46977: FOR_IN
46978: IFFALSE 47035
// begin bc_level := 0 ;
46980: LD_ADDR_OWVAR 43
46984: PUSH
46985: LD_INT 0
46987: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46988: LD_ADDR_OWVAR 42
46992: PUSH
46993: LD_VAR 0 3
46997: PUSH
46998: LD_INT 1
47000: ARRAY
47001: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47002: LD_VAR 0 3
47006: PUSH
47007: LD_INT 2
47009: ARRAY
47010: PPUSH
47011: LD_VAR 0 3
47015: PUSH
47016: LD_INT 3
47018: ARRAY
47019: PPUSH
47020: LD_VAR 0 3
47024: PUSH
47025: LD_INT 4
47027: ARRAY
47028: PPUSH
47029: CALL_OW 47
// end ;
47033: GO 46977
47035: POP
47036: POP
// end ; if mpBattleFlag > - 1 then
47037: LD_EXP 20
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: GREATER
47046: IFFALSE 47205
// begin x := mpStartPos [ pos ] [ 1 ] ;
47048: LD_ADDR_VAR 0 5
47052: PUSH
47053: LD_EXP 19
47057: PUSH
47058: LD_VAR 0 8
47062: ARRAY
47063: PUSH
47064: LD_INT 1
47066: ARRAY
47067: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47068: LD_ADDR_VAR 0 6
47072: PUSH
47073: LD_EXP 19
47077: PUSH
47078: LD_VAR 0 8
47082: ARRAY
47083: PUSH
47084: LD_INT 2
47086: ARRAY
47087: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47088: LD_VAR 0 5
47092: PPUSH
47093: LD_VAR 0 6
47097: PPUSH
47098: LD_INT 12
47100: PPUSH
47101: LD_INT 2
47103: PPUSH
47104: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47108: LD_ADDR_EXP 21
47112: PUSH
47113: LD_EXP 21
47117: PPUSH
47118: LD_VAR 0 7
47122: PPUSH
47123: LD_VAR 0 7
47127: PPUSH
47128: LD_VAR 0 5
47132: PPUSH
47133: LD_VAR 0 6
47137: PPUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 100
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 70
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: LD_INT 40
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 10
47170: PUSH
47171: LD_INT 25
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 20
47180: PUSH
47181: LD_INT 100
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: PPUSH
47195: CALL_OW 418
47199: PPUSH
47200: CALL_OW 1
47204: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47205: LD_EXP 24
47209: PUSH
47210: LD_INT 20
47212: PPUSH
47213: LD_VAR 0 7
47217: PPUSH
47218: CALL_OW 321
47222: PUSH
47223: LD_INT 1
47225: EQUAL
47226: AND
47227: IFFALSE 47244
// SetTech ( tech_SibDet , side , state_researched ) ;
47229: LD_INT 20
47231: PPUSH
47232: LD_VAR 0 7
47236: PPUSH
47237: LD_INT 2
47239: PPUSH
47240: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47244: LD_INT 24
47246: PPUSH
47247: LD_VAR 0 7
47251: PPUSH
47252: LD_INT 0
47254: PPUSH
47255: CALL_OW 322
// if mpSibBomb = 1 then
47259: LD_EXP 26
47263: PUSH
47264: LD_INT 1
47266: EQUAL
47267: IFFALSE 47286
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47269: LD_INT 25
47271: PPUSH
47272: LD_VAR 0 7
47276: PPUSH
47277: LD_INT 1
47279: PPUSH
47280: CALL_OW 322
// end else
47284: GO 47301
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47286: LD_INT 25
47288: PPUSH
47289: LD_VAR 0 7
47293: PPUSH
47294: LD_INT 0
47296: PPUSH
47297: CALL_OW 322
// end ; if mpVehicles then
47301: LD_EXP 33
47305: IFFALSE 47404
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_VAR 0 7
47316: PPUSH
47317: LD_VAR 0 9
47321: PPUSH
47322: LD_EXP 33
47326: PPUSH
47327: CALL 48491 0 3
47331: PUSH
47332: FOR_IN
47333: IFFALSE 47402
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47335: LD_VAR 0 3
47339: PPUSH
47340: LD_INT 0
47342: PPUSH
47343: LD_INT 5
47345: PPUSH
47346: CALL_OW 12
47350: PPUSH
47351: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47355: LD_VAR 0 3
47359: PPUSH
47360: LD_EXP 19
47364: PUSH
47365: LD_VAR 0 8
47369: ARRAY
47370: PUSH
47371: LD_INT 1
47373: ARRAY
47374: PPUSH
47375: LD_EXP 19
47379: PUSH
47380: LD_VAR 0 8
47384: ARRAY
47385: PUSH
47386: LD_INT 2
47388: ARRAY
47389: PPUSH
47390: LD_INT 12
47392: PPUSH
47393: LD_INT 0
47395: PPUSH
47396: CALL_OW 50
// end ;
47400: GO 47332
47402: POP
47403: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47404: LD_ADDR_VAR 0 11
47408: PUSH
47409: LD_VAR 0 7
47413: PPUSH
47414: LD_VAR 0 9
47418: PPUSH
47419: LD_EXP 22
47423: PPUSH
47424: LD_EXP 23
47428: PPUSH
47429: CALL 47993 0 4
47433: ST_TO_ADDR
// for j in team do
47434: LD_ADDR_VAR 0 3
47438: PUSH
47439: LD_VAR 0 11
47443: PUSH
47444: FOR_IN
47445: IFFALSE 47494
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47447: LD_VAR 0 3
47451: PPUSH
47452: LD_EXP 19
47456: PUSH
47457: LD_VAR 0 8
47461: ARRAY
47462: PUSH
47463: LD_INT 1
47465: ARRAY
47466: PPUSH
47467: LD_EXP 19
47471: PUSH
47472: LD_VAR 0 8
47476: ARRAY
47477: PUSH
47478: LD_INT 2
47480: ARRAY
47481: PPUSH
47482: LD_INT 12
47484: PPUSH
47485: LD_INT 0
47487: PPUSH
47488: CALL_OW 50
47492: GO 47444
47494: POP
47495: POP
// if mpApemans then
47496: LD_EXP 28
47500: IFFALSE 47579
// begin for j := 1 to mpApemans do
47502: LD_ADDR_VAR 0 3
47506: PUSH
47507: DOUBLE
47508: LD_INT 1
47510: DEC
47511: ST_TO_ADDR
47512: LD_EXP 28
47516: PUSH
47517: FOR_TO
47518: IFFALSE 47577
// begin PrepareApeman ( - 5 ) ;
47520: LD_INT 5
47522: NEG
47523: PPUSH
47524: CALL 36906 0 1
// ape := CreateHuman ;
47528: LD_ADDR_VAR 0 10
47532: PUSH
47533: CALL_OW 44
47537: ST_TO_ADDR
// SetTag ( ape , side ) ;
47538: LD_VAR 0 10
47542: PPUSH
47543: LD_VAR 0 7
47547: PPUSH
47548: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47552: LD_VAR 0 10
47556: PPUSH
47557: LD_EXP 29
47561: PUSH
47562: LD_VAR 0 8
47566: ARRAY
47567: PPUSH
47568: LD_INT 0
47570: PPUSH
47571: CALL_OW 49
// end ;
47575: GO 47517
47577: POP
47578: POP
// end ; end ;
47579: GO 46364
47581: POP
47582: POP
// if not mpTeamGame then
47583: LD_EXP 9
47587: NOT
47588: IFFALSE 47686
// begin for i := 1 to 8 do
47590: LD_ADDR_VAR 0 2
47594: PUSH
47595: DOUBLE
47596: LD_INT 1
47598: DEC
47599: ST_TO_ADDR
47600: LD_INT 8
47602: PUSH
47603: FOR_TO
47604: IFFALSE 47682
// for j := 1 to 8 do
47606: LD_ADDR_VAR 0 3
47610: PUSH
47611: DOUBLE
47612: LD_INT 1
47614: DEC
47615: ST_TO_ADDR
47616: LD_INT 8
47618: PUSH
47619: FOR_TO
47620: IFFALSE 47678
// if i <> j then
47622: LD_VAR 0 2
47626: PUSH
47627: LD_VAR 0 3
47631: NONEQUAL
47632: IFFALSE 47656
// SetAttitude ( i , j , att_neutral , true ) else
47634: LD_VAR 0 2
47638: PPUSH
47639: LD_VAR 0 3
47643: PPUSH
47644: LD_INT 0
47646: PPUSH
47647: LD_INT 1
47649: PPUSH
47650: CALL_OW 80
47654: GO 47676
// SetAttitude ( i , j , att_friend , true ) ;
47656: LD_VAR 0 2
47660: PPUSH
47661: LD_VAR 0 3
47665: PPUSH
47666: LD_INT 1
47668: PPUSH
47669: LD_INT 1
47671: PPUSH
47672: CALL_OW 80
47676: GO 47619
47678: POP
47679: POP
47680: GO 47603
47682: POP
47683: POP
// end else
47684: GO 47861
// begin if mpSharedVision then
47686: LD_EXP 14
47690: IFFALSE 47755
// begin for i in mpTeams do
47692: LD_ADDR_VAR 0 2
47696: PUSH
47697: LD_EXP 8
47701: PUSH
47702: FOR_IN
47703: IFFALSE 47753
// for j := 2 to i do
47705: LD_ADDR_VAR 0 3
47709: PUSH
47710: DOUBLE
47711: LD_INT 2
47713: DEC
47714: ST_TO_ADDR
47715: LD_VAR 0 2
47719: PUSH
47720: FOR_TO
47721: IFFALSE 47749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47723: LD_VAR 0 2
47727: PUSH
47728: LD_VAR 0 3
47732: ARRAY
47733: PPUSH
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 1
47741: ARRAY
47742: PPUSH
47743: CALL_OW 343
47747: GO 47720
47749: POP
47750: POP
47751: GO 47702
47753: POP
47754: POP
// end ; for i := 1 to 8 do
47755: LD_ADDR_VAR 0 2
47759: PUSH
47760: DOUBLE
47761: LD_INT 1
47763: DEC
47764: ST_TO_ADDR
47765: LD_INT 8
47767: PUSH
47768: FOR_TO
47769: IFFALSE 47859
// for j := 1 to 8 do
47771: LD_ADDR_VAR 0 3
47775: PUSH
47776: DOUBLE
47777: LD_INT 1
47779: DEC
47780: ST_TO_ADDR
47781: LD_INT 8
47783: PUSH
47784: FOR_TO
47785: IFFALSE 47855
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47787: LD_EXP 6
47791: PUSH
47792: LD_VAR 0 2
47796: ARRAY
47797: PUSH
47798: LD_EXP 6
47802: PUSH
47803: LD_VAR 0 3
47807: ARRAY
47808: EQUAL
47809: IFFALSE 47833
// SetAttitude ( i , j , att_friend , true ) else
47811: LD_VAR 0 2
47815: PPUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: LD_INT 1
47823: PPUSH
47824: LD_INT 1
47826: PPUSH
47827: CALL_OW 80
47831: GO 47853
// SetAttitude ( i , j , att_enemy , true ) ;
47833: LD_VAR 0 2
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_INT 2
47845: PPUSH
47846: LD_INT 1
47848: PPUSH
47849: CALL_OW 80
47853: GO 47784
47855: POP
47856: POP
47857: GO 47768
47859: POP
47860: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47861: LD_ADDR_OWVAR 71
47865: PUSH
47866: LD_EXP 7
47870: PUSH
47871: LD_OWVAR 2
47875: ARRAY
47876: ST_TO_ADDR
// if IAmSpec then
47877: CALL_OW 531
47881: IFFALSE 47922
// begin FogOff ( true ) ;
47883: LD_INT 1
47885: PPUSH
47886: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47890: LD_EXP 27
47894: PUSH
47895: LD_INT 1
47897: ARRAY
47898: PUSH
47899: LD_INT 2
47901: DIV
47902: PPUSH
47903: LD_EXP 27
47907: PUSH
47908: LD_INT 2
47910: ARRAY
47911: PUSH
47912: LD_INT 2
47914: DIV
47915: PPUSH
47916: CALL_OW 86
// end else
47920: GO 47968
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47922: LD_EXP 19
47926: PUSH
47927: LD_EXP 5
47931: PUSH
47932: LD_OWVAR 2
47936: ARRAY
47937: ARRAY
47938: PUSH
47939: LD_INT 1
47941: ARRAY
47942: PPUSH
47943: LD_EXP 19
47947: PUSH
47948: LD_EXP 5
47952: PUSH
47953: LD_OWVAR 2
47957: ARRAY
47958: ARRAY
47959: PUSH
47960: LD_INT 2
47962: ARRAY
47963: PPUSH
47964: CALL_OW 86
// end ; BeginBuildUp ;
47968: CALL 48969 0 0
// enable ( mpActive ) ;
47972: LD_INT 100
47974: ENABLE_MARKED
// enable ( mpGameType ) ;
47975: LD_EXP 1
47979: ENABLE_MARKED
// mpGameActive := true ;
47980: LD_ADDR_EXP 36
47984: PUSH
47985: LD_INT 1
47987: ST_TO_ADDR
// end ;
47988: LD_VAR 0 1
47992: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47993: LD_INT 0
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
// result := [ ] ;
47999: LD_ADDR_VAR 0 5
48003: PUSH
48004: EMPTY
48005: ST_TO_ADDR
// class := class_soldier ;
48006: LD_ADDR_VAR 0 8
48010: PUSH
48011: LD_INT 1
48013: ST_TO_ADDR
// uc_side := side ;
48014: LD_ADDR_OWVAR 20
48018: PUSH
48019: LD_VAR 0 1
48023: ST_TO_ADDR
// uc_nation := nation ;
48024: LD_ADDR_OWVAR 21
48028: PUSH
48029: LD_VAR 0 2
48033: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48034: LD_ADDR_OWVAR 26
48038: PUSH
48039: LD_OWVAR 19
48043: PUSH
48044: LD_VAR 0 1
48048: ARRAY
48049: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48050: LD_INT 1
48052: PPUSH
48053: LD_INT 2
48055: PPUSH
48056: CALL_OW 12
48060: PPUSH
48061: LD_VAR 0 8
48065: PPUSH
48066: LD_VAR 0 4
48070: PUSH
48071: LD_INT 2
48073: PLUS
48074: PPUSH
48075: CALL_OW 380
// hc_importance := 105 ;
48079: LD_ADDR_OWVAR 32
48083: PUSH
48084: LD_INT 105
48086: ST_TO_ADDR
// if Multiplayer then
48087: LD_OWVAR 4
48091: IFFALSE 48131
// begin hc_gallery := MULTIAVATARS ;
48093: LD_ADDR_OWVAR 33
48097: PUSH
48098: LD_STRING MULTIAVATARS
48100: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48101: LD_ADDR_OWVAR 34
48105: PUSH
48106: LD_VAR 0 1
48110: PPUSH
48111: CALL_OW 525
48115: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48116: LD_ADDR_OWVAR 27
48120: PUSH
48121: LD_VAR 0 1
48125: PPUSH
48126: CALL_OW 526
48130: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48131: LD_ADDR_VAR 0 5
48135: PUSH
48136: LD_VAR 0 5
48140: PPUSH
48141: CALL_OW 44
48145: PPUSH
48146: CALL 40658 0 2
48150: ST_TO_ADDR
// if mpTeamPreset then
48151: LD_LOC 1
48155: IFFALSE 48251
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48157: LD_LOC 1
48161: PUSH
48162: LD_INT 1
48164: ARRAY
48165: PPUSH
48166: LD_VAR 0 5
48170: PUSH
48171: LD_VAR 0 5
48175: ARRAY
48176: PPUSH
48177: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48181: LD_VAR 0 5
48185: PUSH
48186: LD_VAR 0 5
48190: ARRAY
48191: PPUSH
48192: LD_INT 1
48194: PPUSH
48195: LD_LOC 1
48199: PUSH
48200: LD_INT 1
48202: ARRAY
48203: PPUSH
48204: LD_INT 1
48206: PPUSH
48207: CALL_OW 260
48211: PPUSH
48212: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48216: LD_VAR 0 5
48220: PUSH
48221: LD_VAR 0 5
48225: ARRAY
48226: PPUSH
48227: LD_INT 2
48229: PPUSH
48230: LD_LOC 1
48234: PUSH
48235: LD_INT 1
48237: ARRAY
48238: PPUSH
48239: LD_INT 2
48241: PPUSH
48242: CALL_OW 260
48246: PPUSH
48247: CALL_OW 239
// end ; InitHc_All ( ) ;
48251: CALL_OW 584
// class := 2 ;
48255: LD_ADDR_VAR 0 8
48259: PUSH
48260: LD_INT 2
48262: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48263: LD_ADDR_VAR 0 6
48267: PUSH
48268: DOUBLE
48269: LD_INT 1
48271: DEC
48272: ST_TO_ADDR
48273: LD_VAR 0 3
48277: PUSH
48278: LD_INT 1
48280: MINUS
48281: PUSH
48282: FOR_TO
48283: IFFALSE 48467
// begin PrepareHuman ( false , class , skill ) ;
48285: LD_INT 0
48287: PPUSH
48288: LD_VAR 0 8
48292: PPUSH
48293: LD_VAR 0 4
48297: PPUSH
48298: CALL_OW 380
// un := CreateHuman ;
48302: LD_ADDR_VAR 0 7
48306: PUSH
48307: CALL_OW 44
48311: ST_TO_ADDR
// result := Join ( result , un ) ;
48312: LD_ADDR_VAR 0 5
48316: PUSH
48317: LD_VAR 0 5
48321: PPUSH
48322: LD_VAR 0 7
48326: PPUSH
48327: CALL 40658 0 2
48331: ST_TO_ADDR
// if mpTeamPreset then
48332: LD_LOC 1
48336: IFFALSE 48432
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48338: LD_LOC 1
48342: PUSH
48343: LD_VAR 0 6
48347: PUSH
48348: LD_INT 1
48350: PLUS
48351: ARRAY
48352: PPUSH
48353: LD_VAR 0 7
48357: PPUSH
48358: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48362: LD_VAR 0 7
48366: PPUSH
48367: LD_INT 1
48369: PPUSH
48370: LD_LOC 1
48374: PUSH
48375: LD_VAR 0 6
48379: PUSH
48380: LD_INT 1
48382: PLUS
48383: ARRAY
48384: PPUSH
48385: LD_INT 1
48387: PPUSH
48388: CALL_OW 260
48392: PPUSH
48393: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48397: LD_VAR 0 7
48401: PPUSH
48402: LD_INT 2
48404: PPUSH
48405: LD_LOC 1
48409: PUSH
48410: LD_VAR 0 6
48414: PUSH
48415: LD_INT 1
48417: PLUS
48418: ARRAY
48419: PPUSH
48420: LD_INT 2
48422: PPUSH
48423: CALL_OW 260
48427: PPUSH
48428: CALL_OW 239
// end ; class := Inc ( class ) ;
48432: LD_ADDR_VAR 0 8
48436: PUSH
48437: LD_VAR 0 8
48441: PPUSH
48442: CALL 42019 0 1
48446: ST_TO_ADDR
// if class = 5 then
48447: LD_VAR 0 8
48451: PUSH
48452: LD_INT 5
48454: EQUAL
48455: IFFALSE 48465
// class := 1 ;
48457: LD_ADDR_VAR 0 8
48461: PUSH
48462: LD_INT 1
48464: ST_TO_ADDR
// end ;
48465: GO 48282
48467: POP
48468: POP
// if not mpTeamPreset then
48469: LD_LOC 1
48473: NOT
48474: IFFALSE 48486
// mpTeamPreset := result ;
48476: LD_ADDR_LOC 1
48480: PUSH
48481: LD_VAR 0 5
48485: ST_TO_ADDR
// end ;
48486: LD_VAR 0 5
48490: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48491: LD_INT 0
48493: PPUSH
48494: PPUSH
// result := [ ] ;
48495: LD_ADDR_VAR 0 4
48499: PUSH
48500: EMPTY
48501: ST_TO_ADDR
// if not vehicles then
48502: LD_VAR 0 3
48506: NOT
48507: IFFALSE 48511
// exit ;
48509: GO 48670
// for i := 1 to vehicles [ nation ] do
48511: LD_ADDR_VAR 0 5
48515: PUSH
48516: DOUBLE
48517: LD_INT 1
48519: DEC
48520: ST_TO_ADDR
48521: LD_VAR 0 3
48525: PUSH
48526: LD_VAR 0 2
48530: ARRAY
48531: PUSH
48532: FOR_TO
48533: IFFALSE 48668
// begin uc_side := side ;
48535: LD_ADDR_OWVAR 20
48539: PUSH
48540: LD_VAR 0 1
48544: ST_TO_ADDR
// uc_nation := nation ;
48545: LD_ADDR_OWVAR 21
48549: PUSH
48550: LD_VAR 0 2
48554: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48555: LD_VAR 0 3
48559: PUSH
48560: LD_VAR 0 2
48564: ARRAY
48565: PUSH
48566: LD_VAR 0 5
48570: ARRAY
48571: PUSH
48572: LD_INT 1
48574: ARRAY
48575: PPUSH
48576: LD_VAR 0 3
48580: PUSH
48581: LD_VAR 0 2
48585: ARRAY
48586: PUSH
48587: LD_VAR 0 5
48591: ARRAY
48592: PUSH
48593: LD_INT 2
48595: ARRAY
48596: PPUSH
48597: LD_VAR 0 3
48601: PUSH
48602: LD_VAR 0 2
48606: ARRAY
48607: PUSH
48608: LD_VAR 0 5
48612: ARRAY
48613: PUSH
48614: LD_INT 3
48616: ARRAY
48617: PPUSH
48618: LD_VAR 0 3
48622: PUSH
48623: LD_VAR 0 2
48627: ARRAY
48628: PUSH
48629: LD_VAR 0 5
48633: ARRAY
48634: PUSH
48635: LD_INT 4
48637: ARRAY
48638: PPUSH
48639: LD_INT 80
48641: PPUSH
48642: CALL 7787 0 5
// result := Join ( result , CreateVehicle ) ;
48646: LD_ADDR_VAR 0 4
48650: PUSH
48651: LD_VAR 0 4
48655: PPUSH
48656: CALL_OW 45
48660: PPUSH
48661: CALL 40658 0 2
48665: ST_TO_ADDR
// end ;
48666: GO 48532
48668: POP
48669: POP
// end ;
48670: LD_VAR 0 4
48674: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48675: LD_INT 0
48677: PPUSH
48678: PPUSH
// for i in mpBattleFlags do
48679: LD_ADDR_VAR 0 3
48683: PUSH
48684: LD_EXP 21
48688: PUSH
48689: FOR_IN
48690: IFFALSE 48767
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48692: LD_VAR 0 3
48696: PPUSH
48697: LD_INT 1
48699: PUSH
48700: LD_VAR 0 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_VAR 0 1
48716: PUSH
48717: LD_REAL  7.00000000000000E-0001
48720: MUL
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: LD_VAR 0 1
48733: PUSH
48734: LD_REAL  4.00000000000000E-0001
48737: MUL
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 20
48745: PUSH
48746: LD_VAR 0 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: PPUSH
48761: CALL_OW 423
48765: GO 48689
48767: POP
48768: POP
// end ;
48769: LD_VAR 0 2
48773: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48774: LD_INT 100
48776: IFFALSE 48871
48778: GO 48780
48780: DISABLE
48781: LD_INT 0
48783: PPUSH
48784: PPUSH
// begin if mpBattleFlag <= 0 then
48785: LD_EXP 20
48789: PUSH
48790: LD_INT 0
48792: LESSEQUAL
48793: IFFALSE 48797
// exit ;
48795: GO 48871
// strength := 100 ;
48797: LD_ADDR_VAR 0 2
48801: PUSH
48802: LD_INT 100
48804: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48805: LD_EXP 20
48809: PPUSH
48810: CALL_OW 67
// strength := Dec ( strength ) ;
48814: LD_ADDR_VAR 0 2
48818: PUSH
48819: LD_VAR 0 2
48823: PPUSH
48824: CALL 42041 0 1
48828: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48829: LD_VAR 0 2
48833: PPUSH
48834: CALL 48675 0 1
// until not strength ;
48838: LD_VAR 0 2
48842: NOT
48843: IFFALSE 48805
// for i in mpBattleFlags do
48845: LD_ADDR_VAR 0 1
48849: PUSH
48850: LD_EXP 21
48854: PUSH
48855: FOR_IN
48856: IFFALSE 48869
// KillBattleFlag ( i ) ;
48858: LD_VAR 0 1
48862: PPUSH
48863: CALL_OW 419
48867: GO 48855
48869: POP
48870: POP
// end ;
48871: PPOPN 2
48873: END
// every 0 0$1 marked mpActive do var side , tmp ;
48874: GO 48876
48876: DISABLE
48877: LD_INT 0
48879: PPUSH
48880: PPUSH
// begin if mpSibBomb <= 1 then
48881: LD_EXP 26
48885: PUSH
48886: LD_INT 1
48888: LESSEQUAL
48889: IFFALSE 48893
// exit ;
48891: GO 48966
// tmp := mpSibBomb ;
48893: LD_ADDR_VAR 0 2
48897: PUSH
48898: LD_EXP 26
48902: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48903: LD_INT 35
48905: PPUSH
48906: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48910: LD_ADDR_VAR 0 2
48914: PUSH
48915: LD_VAR 0 2
48919: PUSH
48920: LD_INT 35
48922: MINUS
48923: ST_TO_ADDR
// until not tmp ;
48924: LD_VAR 0 2
48928: NOT
48929: IFFALSE 48903
// for side := 1 to 8 do
48931: LD_ADDR_VAR 0 1
48935: PUSH
48936: DOUBLE
48937: LD_INT 1
48939: DEC
48940: ST_TO_ADDR
48941: LD_INT 8
48943: PUSH
48944: FOR_TO
48945: IFFALSE 48964
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48947: LD_INT 25
48949: PPUSH
48950: LD_VAR 0 1
48954: PPUSH
48955: LD_INT 1
48957: PPUSH
48958: CALL_OW 322
48962: GO 48944
48964: POP
48965: POP
// end ;
48966: PPOPN 2
48968: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48969: LD_INT 0
48971: PPUSH
48972: PPUSH
48973: PPUSH
// mpBuildUpTimeDelay := 0 ;
48974: LD_ADDR_EXP 39
48978: PUSH
48979: LD_INT 0
48981: ST_TO_ADDR
// if not mpBuildUpTime then
48982: LD_EXP 18
48986: NOT
48987: IFFALSE 48991
// exit ;
48989: GO 49174
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48991: LD_ADDR_EXP 39
48995: PUSH
48996: LD_INT 8400
48998: PUSH
48999: LD_INT 2100
49001: PUSH
49002: LD_EXP 18
49006: MUL
49007: PLUS
49008: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49009: LD_ADDR_EXP 40
49013: PUSH
49014: LD_INT 1
49016: ST_TO_ADDR
// for i := 1 to 8 do
49017: LD_ADDR_VAR 0 2
49021: PUSH
49022: DOUBLE
49023: LD_INT 1
49025: DEC
49026: ST_TO_ADDR
49027: LD_INT 8
49029: PUSH
49030: FOR_TO
49031: IFFALSE 49172
// if mpSidePositions [ i ] then
49033: LD_EXP 5
49037: PUSH
49038: LD_VAR 0 2
49042: ARRAY
49043: IFFALSE 49170
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49045: LD_EXP 17
49049: PUSH
49050: LD_EXP 5
49054: PUSH
49055: LD_VAR 0 2
49059: ARRAY
49060: ARRAY
49061: PPUSH
49062: LD_INT 5
49064: PPUSH
49065: CALL_OW 424
// for j := 1 to 8 do
49069: LD_ADDR_VAR 0 3
49073: PUSH
49074: DOUBLE
49075: LD_INT 1
49077: DEC
49078: ST_TO_ADDR
49079: LD_INT 8
49081: PUSH
49082: FOR_TO
49083: IFFALSE 49168
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49085: LD_EXP 5
49089: PUSH
49090: LD_VAR 0 3
49094: ARRAY
49095: PUSH
49096: LD_EXP 6
49100: PUSH
49101: LD_VAR 0 2
49105: ARRAY
49106: PUSH
49107: LD_EXP 6
49111: PUSH
49112: LD_VAR 0 3
49116: ARRAY
49117: NONEQUAL
49118: PUSH
49119: LD_EXP 9
49123: NOT
49124: PUSH
49125: LD_VAR 0 2
49129: PUSH
49130: LD_VAR 0 3
49134: NONEQUAL
49135: AND
49136: OR
49137: AND
49138: IFFALSE 49166
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49140: LD_VAR 0 3
49144: PPUSH
49145: LD_EXP 17
49149: PUSH
49150: LD_EXP 5
49154: PUSH
49155: LD_VAR 0 2
49159: ARRAY
49160: ARRAY
49161: PPUSH
49162: CALL_OW 333
49166: GO 49082
49168: POP
49169: POP
// end ;
49170: GO 49030
49172: POP
49173: POP
// end ;
49174: LD_VAR 0 1
49178: RET
// function EndBuildUp ; var i , j ; begin
49179: LD_INT 0
49181: PPUSH
49182: PPUSH
49183: PPUSH
// mpBuildUpTimeActive := false ;
49184: LD_ADDR_EXP 40
49188: PUSH
49189: LD_INT 0
49191: ST_TO_ADDR
// for i := 1 to 8 do
49192: LD_ADDR_VAR 0 2
49196: PUSH
49197: DOUBLE
49198: LD_INT 1
49200: DEC
49201: ST_TO_ADDR
49202: LD_INT 8
49204: PUSH
49205: FOR_TO
49206: IFFALSE 49347
// if mpSidePositions [ i ] then
49208: LD_EXP 5
49212: PUSH
49213: LD_VAR 0 2
49217: ARRAY
49218: IFFALSE 49345
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49220: LD_EXP 17
49224: PUSH
49225: LD_EXP 5
49229: PUSH
49230: LD_VAR 0 2
49234: ARRAY
49235: ARRAY
49236: PPUSH
49237: LD_INT 0
49239: PPUSH
49240: CALL_OW 424
// for j := 1 to 8 do
49244: LD_ADDR_VAR 0 3
49248: PUSH
49249: DOUBLE
49250: LD_INT 1
49252: DEC
49253: ST_TO_ADDR
49254: LD_INT 8
49256: PUSH
49257: FOR_TO
49258: IFFALSE 49343
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49260: LD_EXP 5
49264: PUSH
49265: LD_VAR 0 3
49269: ARRAY
49270: PUSH
49271: LD_EXP 6
49275: PUSH
49276: LD_VAR 0 2
49280: ARRAY
49281: PUSH
49282: LD_EXP 6
49286: PUSH
49287: LD_VAR 0 3
49291: ARRAY
49292: NONEQUAL
49293: PUSH
49294: LD_EXP 9
49298: NOT
49299: PUSH
49300: LD_VAR 0 2
49304: PUSH
49305: LD_VAR 0 3
49309: NONEQUAL
49310: AND
49311: OR
49312: AND
49313: IFFALSE 49341
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49315: LD_VAR 0 3
49319: PPUSH
49320: LD_EXP 17
49324: PUSH
49325: LD_EXP 5
49329: PUSH
49330: LD_VAR 0 2
49334: ARRAY
49335: ARRAY
49336: PPUSH
49337: CALL_OW 334
49341: GO 49257
49343: POP
49344: POP
// end ;
49345: GO 49205
49347: POP
49348: POP
// end ;
49349: LD_VAR 0 1
49353: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49354: LD_EXP 40
49358: IFFALSE 49533
49360: GO 49362
49362: DISABLE
49363: LD_INT 0
49365: PPUSH
49366: PPUSH
// begin for i := 1 to 8 do
49367: LD_ADDR_VAR 0 1
49371: PUSH
49372: DOUBLE
49373: LD_INT 1
49375: DEC
49376: ST_TO_ADDR
49377: LD_INT 8
49379: PUSH
49380: FOR_TO
49381: IFFALSE 49530
// if mpSidePositions [ i ] then
49383: LD_EXP 5
49387: PUSH
49388: LD_VAR 0 1
49392: ARRAY
49393: IFFALSE 49528
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_EXP 17
49404: PUSH
49405: LD_EXP 5
49409: PUSH
49410: LD_VAR 0 1
49414: ARRAY
49415: ARRAY
49416: PPUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 21
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 21
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 22
49447: PUSH
49448: LD_OWVAR 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PPUSH
49461: CALL_OW 70
49465: PUSH
49466: FOR_IN
49467: IFFALSE 49526
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49469: LD_EXP 6
49473: PUSH
49474: LD_VAR 0 1
49478: ARRAY
49479: PUSH
49480: LD_EXP 6
49484: PUSH
49485: LD_OWVAR 2
49489: ARRAY
49490: NONEQUAL
49491: PUSH
49492: LD_EXP 9
49496: NOT
49497: PUSH
49498: LD_VAR 0 1
49502: PUSH
49503: LD_OWVAR 2
49507: NONEQUAL
49508: AND
49509: OR
49510: IFFALSE 49524
// ComMoveToArea ( un , BuildUpEscape ) ;
49512: LD_VAR 0 2
49516: PPUSH
49517: LD_INT 17
49519: PPUSH
49520: CALL_OW 113
49524: GO 49466
49526: POP
49527: POP
49528: GO 49380
49530: POP
49531: POP
// enable ;
49532: ENABLE
// end ;
49533: PPOPN 2
49535: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49536: LD_EXP 18
49540: IFFALSE 49590
49542: GO 49544
49544: DISABLE
49545: LD_INT 0
49547: PPUSH
// begin tmp := mpBuildUpTime ;
49548: LD_ADDR_VAR 0 1
49552: PUSH
49553: LD_EXP 18
49557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49558: LD_INT 35
49560: PPUSH
49561: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49565: LD_ADDR_VAR 0 1
49569: PUSH
49570: LD_VAR 0 1
49574: PUSH
49575: LD_INT 35
49577: MINUS
49578: ST_TO_ADDR
// until not tmp ;
49579: LD_VAR 0 1
49583: NOT
49584: IFFALSE 49558
// EndBuildUp ;
49586: CALL 49179 0 0
// end ;
49590: PPOPN 1
49592: END
// every 0 0$1 trigger mpActive marked mpWin do
49593: LD_INT 100
49595: IFFALSE 49629
49597: GO 49599
49599: DISABLE
// begin if IAmServer then
49600: CALL_OW 518
49604: IFFALSE 49613
// wait ( 0 0$3 ) ;
49606: LD_INT 105
49608: PPUSH
49609: CALL_OW 67
// if Multiplayer then
49613: LD_OWVAR 4
49617: IFFALSE 49625
// YouWinInMultiplayer else
49619: CALL_OW 106
49623: GO 49629
// YouWin ;
49625: CALL_OW 103
// end ;
49629: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49630: LD_INT 0
49632: PPUSH
// result := false ;
49633: LD_ADDR_VAR 0 3
49637: PUSH
49638: LD_INT 0
49640: ST_TO_ADDR
// case gameType of GameTypeNormal :
49641: LD_VAR 0 1
49645: PUSH
49646: LD_INT 1
49648: DOUBLE
49649: EQUAL
49650: IFTRUE 49654
49652: GO 49727
49654: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49655: LD_ADDR_VAR 0 3
49659: PUSH
49660: LD_INT 22
49662: PUSH
49663: LD_VAR 0 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 21
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 33
49687: PUSH
49688: LD_INT 3
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 33
49697: PUSH
49698: LD_INT 5
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PPUSH
49715: CALL_OW 69
49719: PPUSH
49720: CALL 5049 0 1
49724: ST_TO_ADDR
// end ; GameTypeSurvival :
49725: GO 49962
49727: LD_INT 2
49729: DOUBLE
49730: EQUAL
49731: IFTRUE 49735
49733: GO 49863
49735: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49736: LD_ADDR_VAR 0 3
49740: PUSH
49741: LD_INT 22
49743: PUSH
49744: LD_VAR 0 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: PUSH
49756: LD_INT 30
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 30
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PPUSH
49785: CALL_OW 69
49789: PPUSH
49790: CALL 5049 0 1
49794: PUSH
49795: LD_INT 22
49797: PUSH
49798: LD_VAR 0 2
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 21
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 33
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 33
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PPUSH
49850: CALL_OW 69
49854: PPUSH
49855: CALL 5049 0 1
49859: AND
49860: ST_TO_ADDR
// end ; GameTypeKing :
49861: GO 49962
49863: LD_INT 3
49865: DOUBLE
49866: EQUAL
49867: IFTRUE 49871
49869: GO 49961
49871: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49872: LD_ADDR_VAR 0 3
49876: PUSH
49877: LD_INT 22
49879: PUSH
49880: LD_VAR 0 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 21
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 33
49904: PUSH
49905: LD_INT 3
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 33
49914: PUSH
49915: LD_INT 5
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PPUSH
49932: CALL_OW 69
49936: PPUSH
49937: CALL 5049 0 1
49941: PUSH
49942: LD_VAR 0 2
49946: PPUSH
49947: CALL 53148 0 1
49951: PUSH
49952: LD_EXP 32
49956: LESS
49957: AND
49958: ST_TO_ADDR
// end ; end ;
49959: GO 49962
49961: POP
// end ;
49962: LD_VAR 0 3
49966: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49967: LD_INT 100
49969: IFFALSE 50191
49971: GO 49973
49973: DISABLE
49974: LD_INT 0
49976: PPUSH
49977: PPUSH
// begin if Multiplayer then
49978: LD_OWVAR 4
49982: IFFALSE 49990
// SetPlayerSpectator ( ) else
49984: CALL_OW 572
49988: GO 49999
// FogOff ( your_side ) ;
49990: LD_OWVAR 2
49994: PPUSH
49995: CALL_OW 344
// repeat gameIsOn := false ;
49999: LD_ADDR_VAR 0 1
50003: PUSH
50004: LD_INT 0
50006: ST_TO_ADDR
// for i := 1 to 8 do
50007: LD_ADDR_VAR 0 2
50011: PUSH
50012: DOUBLE
50013: LD_INT 1
50015: DEC
50016: ST_TO_ADDR
50017: LD_INT 8
50019: PUSH
50020: FOR_TO
50021: IFFALSE 50143
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50023: LD_EXP 5
50027: PUSH
50028: LD_VAR 0 2
50032: ARRAY
50033: PUSH
50034: LD_VAR 0 2
50038: PPUSH
50039: CALL_OW 108
50043: AND
50044: PUSH
50045: LD_VAR 0 2
50049: PUSH
50050: LD_OWVAR 2
50054: NONEQUAL
50055: AND
50056: IFFALSE 50141
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50058: LD_EXP 6
50062: PUSH
50063: LD_VAR 0 2
50067: ARRAY
50068: NOT
50069: PUSH
50070: LD_EXP 6
50074: PUSH
50075: LD_VAR 0 2
50079: ARRAY
50080: PUSH
50081: LD_EXP 6
50085: PUSH
50086: LD_OWVAR 2
50090: ARRAY
50091: NONEQUAL
50092: PUSH
50093: LD_OWVAR 2
50097: PPUSH
50098: LD_VAR 0 2
50102: PPUSH
50103: CALL_OW 81
50107: PUSH
50108: LD_INT 1
50110: NONEQUAL
50111: AND
50112: OR
50113: IFFALSE 50141
// if HasPowerByGameType ( mpGameType , i ) then
50115: LD_EXP 1
50119: PPUSH
50120: LD_VAR 0 2
50124: PPUSH
50125: CALL 49630 0 2
50129: IFFALSE 50141
// begin gameIsOn := true ;
50131: LD_ADDR_VAR 0 1
50135: PUSH
50136: LD_INT 1
50138: ST_TO_ADDR
// break ;
50139: GO 50143
// end ;
50141: GO 50020
50143: POP
50144: POP
// wait ( 100 ) ;
50145: LD_INT 100
50147: PPUSH
50148: CALL_OW 67
// until not gameIsOn ;
50152: LD_VAR 0 1
50156: NOT
50157: IFFALSE 49999
// if IAmServer then
50159: CALL_OW 518
50163: IFFALSE 50172
// wait ( 0 0$3 ) ;
50165: LD_INT 105
50167: PPUSH
50168: CALL_OW 67
// if Multiplayer then
50172: LD_OWVAR 4
50176: IFFALSE 50184
// YouLostInMultiplayer else
50178: CALL_OW 107
50182: GO 50191
// YouLost (  ) ;
50184: LD_STRING 
50186: PPUSH
50187: CALL_OW 104
// end ;
50191: PPOPN 2
50193: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50194: LD_EXP 30
50198: IFFALSE 50545
50200: GO 50202
50202: DISABLE
50203: LD_INT 0
50205: PPUSH
50206: PPUSH
50207: PPUSH
50208: PPUSH
50209: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50210: LD_ADDR_VAR 0 5
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 4
50226: PUSH
50227: LD_INT 5
50229: PUSH
50230: LD_INT 6
50232: PUSH
50233: LD_INT 7
50235: PUSH
50236: LD_INT 8
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50249: LD_INT 350
50251: PPUSH
50252: CALL_OW 67
// for i := 1 to 8 do
50256: LD_ADDR_VAR 0 1
50260: PUSH
50261: DOUBLE
50262: LD_INT 1
50264: DEC
50265: ST_TO_ADDR
50266: LD_INT 8
50268: PUSH
50269: FOR_TO
50270: IFFALSE 50515
// begin j := sides [ i ] ;
50272: LD_ADDR_VAR 0 2
50276: PUSH
50277: LD_VAR 0 5
50281: PUSH
50282: LD_VAR 0 1
50286: ARRAY
50287: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50288: LD_EXP 37
50292: PUSH
50293: LD_VAR 0 2
50297: ARRAY
50298: PPUSH
50299: CALL 5049 0 1
50303: PUSH
50304: LD_VAR 0 2
50308: PPUSH
50309: CALL_OW 108
50313: AND
50314: PUSH
50315: LD_EXP 1
50319: PPUSH
50320: LD_VAR 0 2
50324: PPUSH
50325: CALL 49630 0 2
50329: AND
50330: IFFALSE 50513
// begin wait ( mpRespawn div 3 ) ;
50332: LD_EXP 30
50336: PUSH
50337: LD_INT 3
50339: DIV
50340: PPUSH
50341: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50345: LD_ADDR_VAR 0 3
50349: PUSH
50350: LD_INT 22
50352: PUSH
50353: LD_VAR 0 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 50
50364: PUSH
50365: EMPTY
50366: LIST
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 30
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 30
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: PPUSH
50401: CALL_OW 69
50405: ST_TO_ADDR
// if not tmp then
50406: LD_VAR 0 3
50410: NOT
50411: IFFALSE 50415
// continue ;
50413: GO 50269
// spawn := tmp [ 1 ] ;
50415: LD_ADDR_VAR 0 4
50419: PUSH
50420: LD_VAR 0 3
50424: PUSH
50425: LD_INT 1
50427: ARRAY
50428: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50429: LD_EXP 37
50433: PUSH
50434: LD_VAR 0 2
50438: ARRAY
50439: PUSH
50440: LD_INT 1
50442: ARRAY
50443: PPUSH
50444: LD_VAR 0 4
50448: PPUSH
50449: CALL_OW 250
50453: PPUSH
50454: LD_VAR 0 4
50458: PPUSH
50459: CALL_OW 251
50463: PPUSH
50464: LD_INT 32
50466: PPUSH
50467: LD_INT 1
50469: PPUSH
50470: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50474: LD_ADDR_EXP 37
50478: PUSH
50479: LD_EXP 37
50483: PPUSH
50484: LD_VAR 0 2
50488: PPUSH
50489: LD_EXP 37
50493: PUSH
50494: LD_VAR 0 2
50498: ARRAY
50499: PPUSH
50500: LD_INT 1
50502: PPUSH
50503: CALL_OW 3
50507: PPUSH
50508: CALL_OW 1
50512: ST_TO_ADDR
// end ; end ;
50513: GO 50269
50515: POP
50516: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50517: LD_ADDR_VAR 0 5
50521: PUSH
50522: LD_VAR 0 5
50526: PPUSH
50527: LD_INT 1
50529: PPUSH
50530: LD_INT 8
50532: PPUSH
50533: LD_INT 1
50535: PPUSH
50536: CALL 7327 0 4
50540: ST_TO_ADDR
// until false ;
50541: LD_INT 0
50543: IFFALSE 50249
// end ;
50545: PPOPN 5
50547: END
// every 0 0$1 marked mpActive do
50548: GO 50550
50550: DISABLE
// begin enable ;
50551: ENABLE
// if not mpDisplayStrings then
50552: LD_EXP 35
50556: NOT
50557: IFFALSE 50568
// begin display_strings := [ ] ;
50559: LD_ADDR_OWVAR 47
50563: PUSH
50564: EMPTY
50565: ST_TO_ADDR
// exit ;
50566: GO 50578
// end ; display_strings := mpDisplayStrings ;
50568: LD_ADDR_OWVAR 47
50572: PUSH
50573: LD_EXP 35
50577: ST_TO_ADDR
// end ; end_of_file
50578: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50579: LD_INT 0
50581: PPUSH
50582: PPUSH
50583: PPUSH
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
50588: PPUSH
50589: PPUSH
// if GetType ( un ) = unit_vehicle then
50590: LD_VAR 0 1
50594: PPUSH
50595: CALL_OW 247
50599: PUSH
50600: LD_INT 2
50602: EQUAL
50603: IFFALSE 50607
// exit ;
50605: GO 51177
// side := GetSide ( un ) ;
50607: LD_ADDR_VAR 0 9
50611: PUSH
50612: LD_VAR 0 1
50616: PPUSH
50617: CALL_OW 255
50621: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50622: LD_EXP 1
50626: PUSH
50627: LD_INT 2
50629: EQUAL
50630: IFFALSE 50723
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50632: LD_VAR 0 1
50636: PPUSH
50637: CALL_OW 266
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: IN
50652: PUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 110
50662: PUSH
50663: LD_VAR 0 9
50667: EQUAL
50668: AND
50669: IFFALSE 50723
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50671: LD_ADDR_VAR 0 3
50675: PUSH
50676: LD_INT 22
50678: PUSH
50679: LD_VAR 0 9
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 21
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PPUSH
50702: CALL_OW 69
50706: PUSH
50707: FOR_IN
50708: IFFALSE 50721
// KillUnit ( i ) ;
50710: LD_VAR 0 3
50714: PPUSH
50715: CALL_OW 66
50719: GO 50707
50721: POP
50722: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50723: LD_VAR 0 1
50727: PPUSH
50728: CALL_OW 257
50732: PUSH
50733: LD_INT 12
50735: PUSH
50736: LD_INT 17
50738: PUSH
50739: LD_INT 15
50741: PUSH
50742: LD_INT 16
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: IN
50751: PUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 263
50761: PUSH
50762: LD_INT 5
50764: EQUAL
50765: OR
50766: IFFALSE 50906
// begin tag := GetTag ( un ) ;
50768: LD_ADDR_VAR 0 5
50772: PUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: CALL_OW 110
50782: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50783: LD_ADDR_VAR 0 7
50787: PUSH
50788: LD_EXP 29
50792: PUSH
50793: LD_EXP 5
50797: PUSH
50798: LD_VAR 0 5
50802: ARRAY
50803: ARRAY
50804: ST_TO_ADDR
// if not area then
50805: LD_VAR 0 7
50809: NOT
50810: IFFALSE 50814
// exit ;
50812: GO 51177
// wait ( 4 4$00 ) ;
50814: LD_INT 8400
50816: PPUSH
50817: CALL_OW 67
// repeat wait ( 10 ) ;
50821: LD_INT 10
50823: PPUSH
50824: CALL_OW 67
// until not mpBlockRespThread ;
50828: LD_EXP 38
50832: NOT
50833: IFFALSE 50821
// mpBlockRespThread := true ;
50835: LD_ADDR_EXP 38
50839: PUSH
50840: LD_INT 1
50842: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50843: LD_INT 0
50845: PPUSH
50846: CALL 36906 0 1
// ape := CreateHuman ;
50850: LD_ADDR_VAR 0 4
50854: PUSH
50855: CALL_OW 44
50859: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50860: LD_VAR 0 4
50864: PPUSH
50865: LD_VAR 0 5
50869: PPUSH
50870: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50874: LD_VAR 0 4
50878: PPUSH
50879: LD_VAR 0 7
50883: PPUSH
50884: LD_INT 0
50886: PPUSH
50887: CALL_OW 49
// wait ( 10 ) ;
50891: LD_INT 10
50893: PPUSH
50894: CALL_OW 67
// mpBlockRespThread := false ;
50898: LD_ADDR_EXP 38
50902: PUSH
50903: LD_INT 0
50905: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50906: LD_VAR 0 1
50910: PPUSH
50911: CALL_OW 247
50915: PUSH
50916: LD_INT 1
50918: EQUAL
50919: PUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: CALL_OW 248
50929: PUSH
50930: LD_INT 0
50932: GREATER
50933: AND
50934: IFFALSE 51177
// begin if not mpRespawn then
50936: LD_EXP 30
50940: NOT
50941: IFFALSE 50945
// exit ;
50943: GO 51177
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50945: LD_VAR 0 9
50949: PPUSH
50950: CALL_OW 108
50954: NOT
50955: PUSH
50956: LD_EXP 1
50960: PPUSH
50961: LD_VAR 0 9
50965: PPUSH
50966: CALL 49630 0 2
50970: NOT
50971: AND
50972: IFFALSE 50976
// exit ;
50974: GO 51177
// side := GetSide ( un ) ;
50976: LD_ADDR_VAR 0 9
50980: PUSH
50981: LD_VAR 0 1
50985: PPUSH
50986: CALL_OW 255
50990: ST_TO_ADDR
// nation := GetNation ( un ) ;
50991: LD_ADDR_VAR 0 8
50995: PUSH
50996: LD_VAR 0 1
51000: PPUSH
51001: CALL_OW 248
51005: ST_TO_ADDR
// class := GetClass ( un ) ;
51006: LD_ADDR_VAR 0 6
51010: PUSH
51011: LD_VAR 0 1
51015: PPUSH
51016: CALL_OW 257
51020: ST_TO_ADDR
// if class > 4 then
51021: LD_VAR 0 6
51025: PUSH
51026: LD_INT 4
51028: GREATER
51029: IFFALSE 51039
// class := 1 ;
51031: LD_ADDR_VAR 0 6
51035: PUSH
51036: LD_INT 1
51038: ST_TO_ADDR
// repeat wait ( 10 ) ;
51039: LD_INT 10
51041: PPUSH
51042: CALL_OW 67
// until not mpBlockRespThread ;
51046: LD_EXP 38
51050: NOT
51051: IFFALSE 51039
// mpBlockRespThread := true ;
51053: LD_ADDR_EXP 38
51057: PUSH
51058: LD_INT 1
51060: ST_TO_ADDR
// uc_side := side ;
51061: LD_ADDR_OWVAR 20
51065: PUSH
51066: LD_VAR 0 9
51070: ST_TO_ADDR
// uc_nation := nation ;
51071: LD_ADDR_OWVAR 21
51075: PUSH
51076: LD_VAR 0 8
51080: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51081: LD_INT 0
51083: PPUSH
51084: LD_VAR 0 6
51088: PPUSH
51089: LD_INT 2
51091: PPUSH
51092: CALL_OW 380
// un := CreateHuman ;
51096: LD_ADDR_VAR 0 1
51100: PUSH
51101: CALL_OW 44
51105: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51106: LD_ADDR_EXP 37
51110: PUSH
51111: LD_EXP 37
51115: PPUSH
51116: LD_VAR 0 9
51120: PPUSH
51121: LD_EXP 37
51125: PUSH
51126: LD_VAR 0 9
51130: ARRAY
51131: PPUSH
51132: LD_EXP 37
51136: PUSH
51137: LD_VAR 0 9
51141: ARRAY
51142: PUSH
51143: LD_INT 1
51145: PLUS
51146: PPUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 1
51156: PPUSH
51157: CALL_OW 1
51161: ST_TO_ADDR
// wait ( 10 ) ;
51162: LD_INT 10
51164: PPUSH
51165: CALL_OW 67
// mpBlockRespThread := false ;
51169: LD_ADDR_EXP 38
51173: PUSH
51174: LD_INT 0
51176: ST_TO_ADDR
// end ; end ;
51177: LD_VAR 0 2
51181: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51182: LD_INT 0
51184: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51185: LD_VAR 0 1
51189: PPUSH
51190: CALL_OW 266
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: IN
51205: IFFALSE 51230
// SetBName ( building , @ & GetSide ( building ) ) ;
51207: LD_VAR 0 1
51211: PPUSH
51212: LD_STRING @
51214: PUSH
51215: LD_VAR 0 1
51219: PPUSH
51220: CALL_OW 255
51224: STR
51225: PPUSH
51226: CALL_OW 500
// end ;
51230: LD_VAR 0 2
51234: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51235: LD_INT 0
51237: PPUSH
51238: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51239: LD_EXP 1
51243: PUSH
51244: LD_INT 2
51246: EQUAL
51247: PUSH
51248: LD_VAR 0 1
51252: PPUSH
51253: CALL_OW 266
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: IN
51268: AND
51269: IFFALSE 51334
// begin KillUnit ( building ) ;
51271: LD_VAR 0 1
51275: PPUSH
51276: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51280: LD_ADDR_VAR 0 5
51284: PUSH
51285: LD_INT 22
51287: PUSH
51288: LD_VAR 0 2
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 21
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PPUSH
51311: CALL_OW 69
51315: PUSH
51316: FOR_IN
51317: IFFALSE 51330
// KillUnit ( i ) ;
51319: LD_VAR 0 5
51323: PPUSH
51324: CALL_OW 66
51328: GO 51316
51330: POP
51331: POP
// exit ;
51332: GO 51379
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51334: LD_VAR 0 1
51338: PPUSH
51339: CALL_OW 266
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: IN
51354: IFFALSE 51379
// SetBName ( building , @ & GetSide ( building ) ) ;
51356: LD_VAR 0 1
51360: PPUSH
51361: LD_STRING @
51363: PUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: CALL_OW 255
51373: STR
51374: PPUSH
51375: CALL_OW 500
// end ; end_of_file
51379: LD_VAR 0 4
51383: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51384: LD_EXP 36
51388: PUSH
51389: CALL 51594 0 0
51393: AND
51394: PUSH
51395: LD_OWVAR 4
51399: AND
51400: IFFALSE 51591
51402: GO 51404
51404: DISABLE
51405: LD_INT 0
51407: PPUSH
51408: PPUSH
// begin canWin := false ;
51409: LD_ADDR_VAR 0 2
51413: PUSH
51414: LD_INT 0
51416: ST_TO_ADDR
// if not HasPower ( your_side ) then
51417: LD_OWVAR 2
51421: PPUSH
51422: CALL 51634 0 1
51426: NOT
51427: IFFALSE 51438
// begin Multiplayer_Loose_Message ;
51429: CALL_OW 521
// enable ( mpLose ) ;
51433: LD_INT 102
51435: ENABLE_MARKED
// end else
51436: GO 51591
// begin canWin := true ;
51438: LD_ADDR_VAR 0 2
51442: PUSH
51443: LD_INT 1
51445: ST_TO_ADDR
// for i := 1 to 8 do
51446: LD_ADDR_VAR 0 1
51450: PUSH
51451: DOUBLE
51452: LD_INT 1
51454: DEC
51455: ST_TO_ADDR
51456: LD_INT 8
51458: PUSH
51459: FOR_TO
51460: IFFALSE 51577
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51462: LD_EXP 5
51466: PUSH
51467: LD_VAR 0 1
51471: ARRAY
51472: PUSH
51473: LD_VAR 0 1
51477: PPUSH
51478: CALL_OW 108
51482: AND
51483: PUSH
51484: LD_VAR 0 1
51488: PUSH
51489: LD_OWVAR 2
51493: NONEQUAL
51494: AND
51495: IFFALSE 51575
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51497: LD_EXP 6
51501: PUSH
51502: LD_VAR 0 1
51506: ARRAY
51507: NOT
51508: PUSH
51509: LD_EXP 6
51513: PUSH
51514: LD_VAR 0 1
51518: ARRAY
51519: PUSH
51520: LD_EXP 6
51524: PUSH
51525: LD_OWVAR 2
51529: ARRAY
51530: NONEQUAL
51531: PUSH
51532: LD_OWVAR 2
51536: PPUSH
51537: LD_VAR 0 1
51541: PPUSH
51542: CALL_OW 81
51546: PUSH
51547: LD_INT 1
51549: NONEQUAL
51550: AND
51551: OR
51552: IFFALSE 51575
// if HasPower ( i ) then
51554: LD_VAR 0 1
51558: PPUSH
51559: CALL 51634 0 1
51563: IFFALSE 51575
// begin canWin := false ;
51565: LD_ADDR_VAR 0 2
51569: PUSH
51570: LD_INT 0
51572: ST_TO_ADDR
// break ;
51573: GO 51577
// end ;
51575: GO 51459
51577: POP
51578: POP
// if canWin then
51579: LD_VAR 0 2
51583: IFFALSE 51590
// enable ( mpWin ) else
51585: LD_INT 101
51587: ENABLE_MARKED
51588: GO 51591
// enable ;
51590: ENABLE
// end ; end ;
51591: PPOPN 2
51593: END
// function CanWinLoose ; begin
51594: LD_INT 0
51596: PPUSH
// result := true ;
51597: LD_ADDR_VAR 0 1
51601: PUSH
51602: LD_INT 1
51604: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51605: CALL_OW 531
51609: PUSH
51610: CALL_OW 519
51614: PUSH
51615: LD_INT 1
51617: GREATER
51618: AND
51619: IFFALSE 51629
// result := false ;
51621: LD_ADDR_VAR 0 1
51625: PUSH
51626: LD_INT 0
51628: ST_TO_ADDR
// end ;
51629: LD_VAR 0 1
51633: RET
// function HasPower ( i ) ; begin
51634: LD_INT 0
51636: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51637: LD_ADDR_VAR 0 2
51641: PUSH
51642: LD_INT 22
51644: PUSH
51645: LD_VAR 0 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 21
51659: PUSH
51660: LD_INT 1
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 33
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 33
51679: PUSH
51680: LD_INT 5
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PPUSH
51697: CALL_OW 69
51701: ST_TO_ADDR
// end ; end_of_file
51702: LD_VAR 0 2
51706: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51707: LD_EXP 36
51711: IFFALSE 51754
51713: GO 51715
51715: DISABLE
51716: LD_INT 0
51718: PPUSH
// begin for i := 1 to 8 do
51719: LD_ADDR_VAR 0 1
51723: PUSH
51724: DOUBLE
51725: LD_INT 1
51727: DEC
51728: ST_TO_ADDR
51729: LD_INT 8
51731: PUSH
51732: FOR_TO
51733: IFFALSE 51752
// SetRestrict ( b_depot , i , state_disabled ) ;
51735: LD_INT 0
51737: PPUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: LD_INT 0
51745: PPUSH
51746: CALL_OW 324
51750: GO 51732
51752: POP
51753: POP
// end ;
51754: PPOPN 1
51756: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51757: LD_EXP 36
51761: PUSH
51762: CALL 51967 0 0
51766: AND
51767: PUSH
51768: LD_OWVAR 4
51772: AND
51773: IFFALSE 51964
51775: GO 51777
51777: DISABLE
51778: LD_INT 0
51780: PPUSH
51781: PPUSH
// begin canWin := false ;
51782: LD_ADDR_VAR 0 2
51786: PUSH
51787: LD_INT 0
51789: ST_TO_ADDR
// if not HasPower ( your_side ) then
51790: LD_OWVAR 2
51794: PPUSH
51795: CALL 52007 0 1
51799: NOT
51800: IFFALSE 51811
// begin Multiplayer_Loose_Message ;
51802: CALL_OW 521
// enable ( mpLose ) ;
51806: LD_INT 102
51808: ENABLE_MARKED
// end else
51809: GO 51964
// begin canWin := true ;
51811: LD_ADDR_VAR 0 2
51815: PUSH
51816: LD_INT 1
51818: ST_TO_ADDR
// for i := 1 to 8 do
51819: LD_ADDR_VAR 0 1
51823: PUSH
51824: DOUBLE
51825: LD_INT 1
51827: DEC
51828: ST_TO_ADDR
51829: LD_INT 8
51831: PUSH
51832: FOR_TO
51833: IFFALSE 51950
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51835: LD_EXP 5
51839: PUSH
51840: LD_VAR 0 1
51844: ARRAY
51845: PUSH
51846: LD_VAR 0 1
51850: PPUSH
51851: CALL_OW 108
51855: AND
51856: PUSH
51857: LD_VAR 0 1
51861: PUSH
51862: LD_OWVAR 2
51866: NONEQUAL
51867: AND
51868: IFFALSE 51948
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51870: LD_EXP 6
51874: PUSH
51875: LD_VAR 0 1
51879: ARRAY
51880: NOT
51881: PUSH
51882: LD_EXP 6
51886: PUSH
51887: LD_VAR 0 1
51891: ARRAY
51892: PUSH
51893: LD_EXP 6
51897: PUSH
51898: LD_OWVAR 2
51902: ARRAY
51903: NONEQUAL
51904: PUSH
51905: LD_OWVAR 2
51909: PPUSH
51910: LD_VAR 0 1
51914: PPUSH
51915: CALL_OW 81
51919: PUSH
51920: LD_INT 1
51922: NONEQUAL
51923: AND
51924: OR
51925: IFFALSE 51948
// if HasPower ( i ) then
51927: LD_VAR 0 1
51931: PPUSH
51932: CALL 52007 0 1
51936: IFFALSE 51948
// begin canWin := false ;
51938: LD_ADDR_VAR 0 2
51942: PUSH
51943: LD_INT 0
51945: ST_TO_ADDR
// break ;
51946: GO 51950
// end ;
51948: GO 51832
51950: POP
51951: POP
// if canWin then
51952: LD_VAR 0 2
51956: IFFALSE 51963
// enable ( mpWin ) else
51958: LD_INT 101
51960: ENABLE_MARKED
51961: GO 51964
// enable ;
51963: ENABLE
// end ; end ;
51964: PPOPN 2
51966: END
// function CanWinLoose ; begin
51967: LD_INT 0
51969: PPUSH
// result := true ;
51970: LD_ADDR_VAR 0 1
51974: PUSH
51975: LD_INT 1
51977: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51978: CALL_OW 531
51982: PUSH
51983: CALL_OW 519
51987: PUSH
51988: LD_INT 1
51990: GREATER
51991: AND
51992: IFFALSE 52002
// result := false ;
51994: LD_ADDR_VAR 0 1
51998: PUSH
51999: LD_INT 0
52001: ST_TO_ADDR
// end ;
52002: LD_VAR 0 1
52006: RET
// function HasPower ( i ) ; begin
52007: LD_INT 0
52009: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
52010: LD_INT 22
52012: PUSH
52013: LD_VAR 0 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 30
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 30
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: LIST
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PPUSH
52054: CALL_OW 69
52058: NOT
52059: IFFALSE 52063
// exit ;
52061: GO 52128
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52063: LD_ADDR_VAR 0 2
52067: PUSH
52068: LD_INT 22
52070: PUSH
52071: LD_VAR 0 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 21
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 33
52095: PUSH
52096: LD_INT 3
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 33
52105: PUSH
52106: LD_INT 5
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PPUSH
52123: CALL_OW 69
52127: ST_TO_ADDR
// end ; end_of_file
52128: LD_VAR 0 2
52132: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52133: LD_EXP 36
52137: IFFALSE 52476
52139: GO 52141
52141: DISABLE
52142: LD_INT 0
52144: PPUSH
52145: PPUSH
52146: PPUSH
// begin mpKingPoints := [ ] ;
52147: LD_ADDR_EXP 41
52151: PUSH
52152: EMPTY
52153: ST_TO_ADDR
// if mpTeamGame then
52154: LD_EXP 9
52158: IFFALSE 52212
// begin for i := 1 to Count ( mpTeams ) do
52160: LD_ADDR_VAR 0 1
52164: PUSH
52165: DOUBLE
52166: LD_INT 1
52168: DEC
52169: ST_TO_ADDR
52170: LD_EXP 8
52174: PPUSH
52175: CALL 5049 0 1
52179: PUSH
52180: FOR_TO
52181: IFFALSE 52208
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52183: LD_ADDR_EXP 41
52187: PUSH
52188: LD_EXP 41
52192: PPUSH
52193: LD_VAR 0 1
52197: PPUSH
52198: LD_INT 0
52200: PPUSH
52201: CALL_OW 1
52205: ST_TO_ADDR
52206: GO 52180
52208: POP
52209: POP
// end else
52210: GO 52255
// begin for i := 1 to 8 do
52212: LD_ADDR_VAR 0 1
52216: PUSH
52217: DOUBLE
52218: LD_INT 1
52220: DEC
52221: ST_TO_ADDR
52222: LD_INT 8
52224: PUSH
52225: FOR_TO
52226: IFFALSE 52253
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52228: LD_ADDR_EXP 41
52232: PUSH
52233: LD_EXP 41
52237: PPUSH
52238: LD_VAR 0 1
52242: PPUSH
52243: LD_INT 0
52245: PPUSH
52246: CALL_OW 1
52250: ST_TO_ADDR
52251: GO 52225
52253: POP
52254: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52255: LD_ADDR_VAR 0 3
52259: PUSH
52260: LD_INT 25
52262: PPUSH
52263: LD_INT 0
52265: PPUSH
52266: CALL_OW 517
52270: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52271: LD_ADDR_VAR 0 1
52275: PUSH
52276: DOUBLE
52277: LD_INT 1
52279: DEC
52280: ST_TO_ADDR
52281: LD_VAR 0 3
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: PUSH
52290: FOR_TO
52291: IFFALSE 52358
// for j := 1 to 8 do
52293: LD_ADDR_VAR 0 2
52297: PUSH
52298: DOUBLE
52299: LD_INT 1
52301: DEC
52302: ST_TO_ADDR
52303: LD_INT 8
52305: PUSH
52306: FOR_TO
52307: IFFALSE 52354
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52309: LD_VAR 0 3
52313: PUSH
52314: LD_INT 1
52316: ARRAY
52317: PUSH
52318: LD_VAR 0 1
52322: ARRAY
52323: PPUSH
52324: LD_VAR 0 3
52328: PUSH
52329: LD_INT 2
52331: ARRAY
52332: PUSH
52333: LD_VAR 0 1
52337: ARRAY
52338: PPUSH
52339: LD_VAR 0 2
52343: PPUSH
52344: LD_INT 12
52346: NEG
52347: PPUSH
52348: CALL_OW 330
52352: GO 52306
52354: POP
52355: POP
52356: GO 52290
52358: POP
52359: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52360: LD_EXP 31
52364: PPUSH
52365: LD_INT 1
52367: PPUSH
52368: CALL_OW 424
// UpdateCounter ;
52372: CALL 52978 0 0
// repeat wait ( 0 0$1 ) ;
52376: LD_INT 35
52378: PPUSH
52379: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52383: LD_ADDR_VAR 0 3
52387: PUSH
52388: LD_EXP 31
52392: PPUSH
52393: LD_INT 3
52395: PUSH
52396: LD_INT 57
52398: PUSH
52399: EMPTY
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 50
52408: PUSH
52409: EMPTY
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 30
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 30
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: PPUSH
52445: CALL_OW 70
52449: ST_TO_ADDR
// if not tmp then
52450: LD_VAR 0 3
52454: NOT
52455: IFFALSE 52459
// continue ;
52457: GO 52376
// AddPoints ( tmp ) ;
52459: LD_VAR 0 3
52463: PPUSH
52464: CALL 52656 0 1
// UpdateCounter ;
52468: CALL 52978 0 0
// until false ;
52472: LD_INT 0
52474: IFFALSE 52376
// end ;
52476: PPOPN 3
52478: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52479: LD_EXP 36
52483: PUSH
52484: LD_EXP 34
52488: AND
52489: IFFALSE 52653
52491: GO 52493
52493: DISABLE
52494: LD_INT 0
52496: PPUSH
52497: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52498: LD_ADDR_VAR 0 2
52502: PUSH
52503: LD_INT 25
52505: PPUSH
52506: LD_INT 0
52508: PPUSH
52509: CALL_OW 517
52513: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52514: LD_ADDR_VAR 0 1
52518: PUSH
52519: DOUBLE
52520: LD_INT 1
52522: DEC
52523: ST_TO_ADDR
52524: LD_VAR 0 2
52528: PUSH
52529: LD_INT 1
52531: ARRAY
52532: PUSH
52533: FOR_TO
52534: IFFALSE 52575
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52536: LD_VAR 0 2
52540: PUSH
52541: LD_INT 1
52543: ARRAY
52544: PUSH
52545: LD_VAR 0 1
52549: ARRAY
52550: PPUSH
52551: LD_VAR 0 2
52555: PUSH
52556: LD_INT 2
52558: ARRAY
52559: PUSH
52560: LD_VAR 0 1
52564: ARRAY
52565: PPUSH
52566: LD_INT 125
52568: PPUSH
52569: CALL_OW 495
52573: GO 52533
52575: POP
52576: POP
// repeat wait ( mpEmissions ) ;
52577: LD_EXP 34
52581: PPUSH
52582: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52586: LD_ADDR_VAR 0 1
52590: PUSH
52591: DOUBLE
52592: LD_INT 1
52594: DEC
52595: ST_TO_ADDR
52596: LD_VAR 0 2
52600: PUSH
52601: LD_INT 1
52603: ARRAY
52604: PUSH
52605: FOR_TO
52606: IFFALSE 52647
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52608: LD_VAR 0 2
52612: PUSH
52613: LD_INT 1
52615: ARRAY
52616: PUSH
52617: LD_VAR 0 1
52621: ARRAY
52622: PPUSH
52623: LD_VAR 0 2
52627: PUSH
52628: LD_INT 2
52630: ARRAY
52631: PUSH
52632: LD_VAR 0 1
52636: ARRAY
52637: PPUSH
52638: LD_INT 15
52640: PPUSH
52641: CALL_OW 495
52645: GO 52605
52647: POP
52648: POP
// until false ;
52649: LD_INT 0
52651: IFFALSE 52577
// end ;
52653: PPOPN 2
52655: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
// if mpTeamGame then
52663: LD_EXP 9
52667: IFFALSE 52864
// begin first := depots [ 1 ] ;
52669: LD_ADDR_VAR 0 4
52673: PUSH
52674: LD_VAR 0 1
52678: PUSH
52679: LD_INT 1
52681: ARRAY
52682: ST_TO_ADDR
// side := GetSide ( first ) ;
52683: LD_ADDR_VAR 0 6
52687: PUSH
52688: LD_VAR 0 4
52692: PPUSH
52693: CALL_OW 255
52697: ST_TO_ADDR
// for i := 1 to mpTeams do
52698: LD_ADDR_VAR 0 3
52702: PUSH
52703: DOUBLE
52704: LD_INT 1
52706: DEC
52707: ST_TO_ADDR
52708: LD_EXP 8
52712: PUSH
52713: FOR_TO
52714: IFFALSE 52748
// if side in mpTeams [ i ] then
52716: LD_VAR 0 6
52720: PUSH
52721: LD_EXP 8
52725: PUSH
52726: LD_VAR 0 3
52730: ARRAY
52731: IN
52732: IFFALSE 52746
// begin team := i ;
52734: LD_ADDR_VAR 0 5
52738: PUSH
52739: LD_VAR 0 3
52743: ST_TO_ADDR
// break ;
52744: GO 52748
// end ;
52746: GO 52713
52748: POP
52749: POP
// if not team then
52750: LD_VAR 0 5
52754: NOT
52755: IFFALSE 52759
// exit ;
52757: GO 52973
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52759: LD_EXP 31
52763: PPUSH
52764: LD_INT 81
52766: PUSH
52767: LD_VAR 0 6
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PPUSH
52776: CALL_OW 70
52780: IFFALSE 52784
// exit ;
52782: GO 52973
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52784: LD_ADDR_EXP 41
52788: PUSH
52789: LD_EXP 41
52793: PPUSH
52794: LD_VAR 0 5
52798: PPUSH
52799: LD_EXP 41
52803: PUSH
52804: LD_VAR 0 5
52808: ARRAY
52809: PUSH
52810: LD_INT 1
52812: PLUS
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// for i in mpTeams [ team ] do
52819: LD_ADDR_VAR 0 3
52823: PUSH
52824: LD_EXP 8
52828: PUSH
52829: LD_VAR 0 5
52833: ARRAY
52834: PUSH
52835: FOR_IN
52836: IFFALSE 52860
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52838: LD_VAR 0 3
52842: PPUSH
52843: LD_EXP 41
52847: PUSH
52848: LD_VAR 0 5
52852: ARRAY
52853: PPUSH
52854: CALL_OW 506
52858: GO 52835
52860: POP
52861: POP
// end else
52862: GO 52973
// begin first := depots [ 1 ] ;
52864: LD_ADDR_VAR 0 4
52868: PUSH
52869: LD_VAR 0 1
52873: PUSH
52874: LD_INT 1
52876: ARRAY
52877: ST_TO_ADDR
// side := GetSide ( first ) ;
52878: LD_ADDR_VAR 0 6
52882: PUSH
52883: LD_VAR 0 4
52887: PPUSH
52888: CALL_OW 255
52892: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52893: LD_EXP 31
52897: PPUSH
52898: LD_INT 81
52900: PUSH
52901: LD_VAR 0 6
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PPUSH
52910: CALL_OW 70
52914: IFFALSE 52918
// exit ;
52916: GO 52973
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52918: LD_ADDR_EXP 41
52922: PUSH
52923: LD_EXP 41
52927: PPUSH
52928: LD_VAR 0 6
52932: PPUSH
52933: LD_EXP 41
52937: PUSH
52938: LD_VAR 0 6
52942: ARRAY
52943: PUSH
52944: LD_INT 1
52946: PLUS
52947: PPUSH
52948: CALL_OW 1
52952: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52953: LD_VAR 0 6
52957: PPUSH
52958: LD_EXP 41
52962: PUSH
52963: LD_VAR 0 6
52967: ARRAY
52968: PPUSH
52969: CALL_OW 506
// end ; end ;
52973: LD_VAR 0 2
52977: RET
// function UpdateCounter ; var i ; begin
52978: LD_INT 0
52980: PPUSH
52981: PPUSH
// result := [ ] ;
52982: LD_ADDR_VAR 0 1
52986: PUSH
52987: EMPTY
52988: ST_TO_ADDR
// if mpTeamGame then
52989: LD_EXP 9
52993: IFFALSE 53060
// begin for i := 1 to mpTeams do
52995: LD_ADDR_VAR 0 2
52999: PUSH
53000: DOUBLE
53001: LD_INT 1
53003: DEC
53004: ST_TO_ADDR
53005: LD_EXP 8
53009: PUSH
53010: FOR_TO
53011: IFFALSE 53056
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
53013: LD_ADDR_VAR 0 1
53017: PUSH
53018: LD_VAR 0 1
53022: PUSH
53023: LD_STRING #KingoftheHill-Team
53025: PUSH
53026: LD_VAR 0 2
53030: PUSH
53031: LD_EXP 41
53035: PUSH
53036: LD_VAR 0 2
53040: ARRAY
53041: PUSH
53042: LD_EXP 32
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ADD
53053: ST_TO_ADDR
53054: GO 53010
53056: POP
53057: POP
// end else
53058: GO 53133
// begin for i := 1 to 8 do
53060: LD_ADDR_VAR 0 2
53064: PUSH
53065: DOUBLE
53066: LD_INT 1
53068: DEC
53069: ST_TO_ADDR
53070: LD_INT 8
53072: PUSH
53073: FOR_TO
53074: IFFALSE 53131
// if mpSidePositions [ i ] then
53076: LD_EXP 5
53080: PUSH
53081: LD_VAR 0 2
53085: ARRAY
53086: IFFALSE 53129
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53088: LD_ADDR_VAR 0 1
53092: PUSH
53093: LD_VAR 0 1
53097: PUSH
53098: LD_STRING #KingoftheHill-Player
53100: PUSH
53101: LD_VAR 0 2
53105: PUSH
53106: LD_EXP 41
53110: PUSH
53111: LD_VAR 0 2
53115: ARRAY
53116: PUSH
53117: LD_EXP 32
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ADD
53128: ST_TO_ADDR
53129: GO 53073
53131: POP
53132: POP
// end ; mpDisplayStrings := result ;
53133: LD_ADDR_EXP 35
53137: PUSH
53138: LD_VAR 0 1
53142: ST_TO_ADDR
// end ;
53143: LD_VAR 0 1
53147: RET
// export function HowMuchPointsKing ( side ) ; begin
53148: LD_INT 0
53150: PPUSH
// result := HowMuchPoints ( side ) ;
53151: LD_ADDR_VAR 0 2
53155: PUSH
53156: LD_VAR 0 1
53160: PPUSH
53161: CALL 53171 0 1
53165: ST_TO_ADDR
// end ;
53166: LD_VAR 0 2
53170: RET
// function HowMuchPoints ( side ) ; var i ; begin
53171: LD_INT 0
53173: PPUSH
53174: PPUSH
// if mpTeamGame then
53175: LD_EXP 9
53179: IFFALSE 53248
// begin for i := 1 to Count ( mpTeams ) do
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: DOUBLE
53187: LD_INT 1
53189: DEC
53190: ST_TO_ADDR
53191: LD_EXP 8
53195: PPUSH
53196: CALL 5049 0 1
53200: PUSH
53201: FOR_TO
53202: IFFALSE 53244
// begin if side in mpTeams [ i ] then
53204: LD_VAR 0 1
53208: PUSH
53209: LD_EXP 8
53213: PUSH
53214: LD_VAR 0 3
53218: ARRAY
53219: IN
53220: IFFALSE 53242
// begin result := mpKingPoints [ i ] ;
53222: LD_ADDR_VAR 0 2
53226: PUSH
53227: LD_EXP 41
53231: PUSH
53232: LD_VAR 0 3
53236: ARRAY
53237: ST_TO_ADDR
// exit ;
53238: POP
53239: POP
53240: GO 53264
// end ; end ;
53242: GO 53201
53244: POP
53245: POP
// end else
53246: GO 53264
// result := mpKingPoints [ side ] ;
53248: LD_ADDR_VAR 0 2
53252: PUSH
53253: LD_EXP 41
53257: PUSH
53258: LD_VAR 0 1
53262: ARRAY
53263: ST_TO_ADDR
// end ;
53264: LD_VAR 0 2
53268: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53269: LD_EXP 36
53273: PUSH
53274: CALL 53596 0 0
53278: AND
53279: PUSH
53280: LD_OWVAR 4
53284: AND
53285: IFFALSE 53521
53287: GO 53289
53289: DISABLE
53290: LD_INT 0
53292: PPUSH
53293: PPUSH
// begin canWin := false ;
53294: LD_ADDR_VAR 0 2
53298: PUSH
53299: LD_INT 0
53301: ST_TO_ADDR
// if not HasPower ( your_side ) then
53302: LD_OWVAR 2
53306: PPUSH
53307: CALL 53636 0 1
53311: NOT
53312: IFFALSE 53323
// begin Multiplayer_Loose_Message ;
53314: CALL_OW 521
// enable ( mpLose ) ;
53318: LD_INT 102
53320: ENABLE_MARKED
// end else
53321: GO 53521
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53323: LD_ADDR_VAR 0 2
53327: PUSH
53328: LD_OWVAR 2
53332: PPUSH
53333: CALL 53171 0 1
53337: PUSH
53338: LD_EXP 32
53342: GREATEREQUAL
53343: PUSH
53344: LD_OWVAR 2
53348: PPUSH
53349: CALL 53636 0 1
53353: AND
53354: PUSH
53355: CALL 53524 0 0
53359: NOT
53360: OR
53361: ST_TO_ADDR
// for i := 1 to 8 do
53362: LD_ADDR_VAR 0 1
53366: PUSH
53367: DOUBLE
53368: LD_INT 1
53370: DEC
53371: ST_TO_ADDR
53372: LD_INT 8
53374: PUSH
53375: FOR_TO
53376: IFFALSE 53507
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53378: LD_EXP 5
53382: PUSH
53383: LD_VAR 0 1
53387: ARRAY
53388: PUSH
53389: LD_VAR 0 1
53393: PPUSH
53394: CALL_OW 108
53398: AND
53399: PUSH
53400: LD_VAR 0 1
53404: PUSH
53405: LD_OWVAR 2
53409: NONEQUAL
53410: AND
53411: IFFALSE 53505
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53413: LD_EXP 6
53417: PUSH
53418: LD_VAR 0 1
53422: ARRAY
53423: NOT
53424: PUSH
53425: LD_EXP 6
53429: PUSH
53430: LD_VAR 0 1
53434: ARRAY
53435: PUSH
53436: LD_EXP 6
53440: PUSH
53441: LD_OWVAR 2
53445: ARRAY
53446: NONEQUAL
53447: PUSH
53448: LD_OWVAR 2
53452: PPUSH
53453: LD_VAR 0 1
53457: PPUSH
53458: CALL_OW 81
53462: PUSH
53463: LD_INT 1
53465: NONEQUAL
53466: AND
53467: OR
53468: IFFALSE 53505
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53470: LD_VAR 0 1
53474: PPUSH
53475: CALL 53171 0 1
53479: PUSH
53480: LD_EXP 32
53484: GREATEREQUAL
53485: PUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL 53636 0 1
53495: AND
53496: IFFALSE 53505
// begin enable ( mpLose ) ;
53498: LD_INT 102
53500: ENABLE_MARKED
// exit ;
53501: POP
53502: POP
53503: GO 53521
// end ;
53505: GO 53375
53507: POP
53508: POP
// if canWin then
53509: LD_VAR 0 2
53513: IFFALSE 53520
// enable ( mpWin ) else
53515: LD_INT 101
53517: ENABLE_MARKED
53518: GO 53521
// enable ;
53520: ENABLE
// end ; end ;
53521: PPOPN 2
53523: END
// function EnemiesInGame ; var i ; begin
53524: LD_INT 0
53526: PPUSH
53527: PPUSH
// result := false ;
53528: LD_ADDR_VAR 0 1
53532: PUSH
53533: LD_INT 0
53535: ST_TO_ADDR
// for i := 1 to 8 do
53536: LD_ADDR_VAR 0 2
53540: PUSH
53541: DOUBLE
53542: LD_INT 1
53544: DEC
53545: ST_TO_ADDR
53546: LD_INT 8
53548: PUSH
53549: FOR_TO
53550: IFFALSE 53589
// if i <> your_side and HasPower ( i ) then
53552: LD_VAR 0 2
53556: PUSH
53557: LD_OWVAR 2
53561: NONEQUAL
53562: PUSH
53563: LD_VAR 0 2
53567: PPUSH
53568: CALL 53636 0 1
53572: AND
53573: IFFALSE 53587
// begin result := true ;
53575: LD_ADDR_VAR 0 1
53579: PUSH
53580: LD_INT 1
53582: ST_TO_ADDR
// exit ;
53583: POP
53584: POP
53585: GO 53591
// end ;
53587: GO 53549
53589: POP
53590: POP
// end ;
53591: LD_VAR 0 1
53595: RET
// function CanWinLoose ; begin
53596: LD_INT 0
53598: PPUSH
// result := true ;
53599: LD_ADDR_VAR 0 1
53603: PUSH
53604: LD_INT 1
53606: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53607: CALL_OW 531
53611: PUSH
53612: CALL_OW 519
53616: PUSH
53617: LD_INT 1
53619: GREATER
53620: AND
53621: IFFALSE 53631
// result := false ;
53623: LD_ADDR_VAR 0 1
53627: PUSH
53628: LD_INT 0
53630: ST_TO_ADDR
// end ;
53631: LD_VAR 0 1
53635: RET
// function HasPower ( i ) ; begin
53636: LD_INT 0
53638: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53639: LD_ADDR_VAR 0 2
53643: PUSH
53644: LD_INT 22
53646: PUSH
53647: LD_VAR 0 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: PUSH
53659: LD_INT 21
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 33
53671: PUSH
53672: LD_INT 3
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 33
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PPUSH
53699: CALL_OW 69
53703: ST_TO_ADDR
// end ; end_of_file end_of_file
53704: LD_VAR 0 2
53708: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53709: LD_VAR 0 1
53713: PUSH
53714: LD_INT 200
53716: DOUBLE
53717: GREATEREQUAL
53718: IFFALSE 53726
53720: LD_INT 299
53722: DOUBLE
53723: LESSEQUAL
53724: IFTRUE 53728
53726: GO 53760
53728: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53729: LD_VAR 0 1
53733: PPUSH
53734: LD_VAR 0 2
53738: PPUSH
53739: LD_VAR 0 3
53743: PPUSH
53744: LD_VAR 0 4
53748: PPUSH
53749: LD_VAR 0 5
53753: PPUSH
53754: CALL 54457 0 5
53758: GO 53837
53760: LD_INT 300
53762: DOUBLE
53763: GREATEREQUAL
53764: IFFALSE 53772
53766: LD_INT 399
53768: DOUBLE
53769: LESSEQUAL
53770: IFTRUE 53774
53772: GO 53836
53774: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53775: LD_VAR 0 1
53779: PPUSH
53780: LD_VAR 0 2
53784: PPUSH
53785: LD_VAR 0 3
53789: PPUSH
53790: LD_VAR 0 4
53794: PPUSH
53795: LD_VAR 0 5
53799: PPUSH
53800: LD_VAR 0 6
53804: PPUSH
53805: LD_VAR 0 7
53809: PPUSH
53810: LD_VAR 0 8
53814: PPUSH
53815: LD_VAR 0 9
53819: PPUSH
53820: LD_VAR 0 10
53824: PPUSH
53825: LD_VAR 0 11
53829: PPUSH
53830: CALL 59204 0 11
53834: GO 53837
53836: POP
// end ;
53837: PPOPN 11
53839: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53840: LD_VAR 0 1
53844: PPUSH
53845: LD_VAR 0 2
53849: PPUSH
53850: LD_VAR 0 3
53854: PPUSH
53855: LD_VAR 0 4
53859: PPUSH
53860: LD_VAR 0 5
53864: PPUSH
53865: CALL 53922 0 5
// end ; end_of_file
53869: PPOPN 5
53871: END
// export function SOS_UnitDestroyed ( un ) ; begin
53872: LD_INT 0
53874: PPUSH
// ComRadiation ( un ) ;
53875: LD_VAR 0 1
53879: PPUSH
53880: CALL 54861 0 1
// end ;
53884: LD_VAR 0 2
53888: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53889: LD_INT 0
53891: PPUSH
// ComRadiation ( un ) ;
53892: LD_VAR 0 1
53896: PPUSH
53897: CALL 54861 0 1
// end ;
53901: LD_VAR 0 2
53905: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53906: LD_INT 0
53908: PPUSH
// end ;
53909: LD_VAR 0 4
53913: RET
// export function SOS_Command ( cmd ) ; begin
53914: LD_INT 0
53916: PPUSH
// end ;
53917: LD_VAR 0 2
53921: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53922: LD_INT 0
53924: PPUSH
// end ;
53925: LD_VAR 0 6
53929: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53930: LD_INT 0
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
// if not vehicle or not factory then
53937: LD_VAR 0 1
53941: NOT
53942: PUSH
53943: LD_VAR 0 2
53947: NOT
53948: OR
53949: IFFALSE 53953
// exit ;
53951: GO 54452
// if not factoryWaypoints then
53953: LD_EXP 52
53957: NOT
53958: IFFALSE 53962
// exit ;
53960: GO 54452
// for i := 1 to Count ( factoryWaypoints ) do
53962: LD_ADDR_VAR 0 4
53966: PUSH
53967: DOUBLE
53968: LD_INT 1
53970: DEC
53971: ST_TO_ADDR
53972: LD_EXP 52
53976: PPUSH
53977: CALL 5049 0 1
53981: PUSH
53982: FOR_TO
53983: IFFALSE 54450
// if factoryWaypoints [ i ] [ 2 ] = factory then
53985: LD_EXP 52
53989: PUSH
53990: LD_VAR 0 4
53994: ARRAY
53995: PUSH
53996: LD_INT 2
53998: ARRAY
53999: PUSH
54000: LD_VAR 0 2
54004: EQUAL
54005: IFFALSE 54448
// begin if GetControl ( vehicle ) = control_manual then
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 263
54016: PUSH
54017: LD_INT 1
54019: EQUAL
54020: IFFALSE 54331
// begin driver := IsDrivenBy ( vehicle ) ;
54022: LD_ADDR_VAR 0 6
54026: PUSH
54027: LD_VAR 0 1
54031: PPUSH
54032: CALL_OW 311
54036: ST_TO_ADDR
// tag := GetTag ( driver ) ;
54037: LD_ADDR_VAR 0 5
54041: PUSH
54042: LD_VAR 0 6
54046: PPUSH
54047: CALL_OW 110
54051: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
54052: LD_VAR 0 5
54056: PUSH
54057: LD_INT 501
54059: EQUAL
54060: PUSH
54061: LD_VAR 0 1
54065: PPUSH
54066: CALL_OW 110
54070: PUSH
54071: LD_INT 501
54073: EQUAL
54074: OR
54075: IFFALSE 54081
// exit ;
54077: POP
54078: POP
54079: GO 54452
// if not HasTask ( driver ) then
54081: LD_VAR 0 6
54085: PPUSH
54086: CALL_OW 314
54090: NOT
54091: IFFALSE 54329
// begin SetTag ( driver , tDriver ) ;
54093: LD_VAR 0 6
54097: PPUSH
54098: LD_INT 501
54100: PPUSH
54101: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54105: LD_VAR 0 1
54109: PPUSH
54110: LD_INT 501
54112: PPUSH
54113: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54117: LD_ADDR_VAR 0 7
54121: PUSH
54122: LD_EXP 52
54126: PUSH
54127: LD_VAR 0 4
54131: ARRAY
54132: PUSH
54133: LD_INT 3
54135: ARRAY
54136: PPUSH
54137: LD_EXP 52
54141: PUSH
54142: LD_VAR 0 4
54146: ARRAY
54147: PUSH
54148: LD_INT 4
54150: ARRAY
54151: PPUSH
54152: CALL_OW 428
54156: ST_TO_ADDR
// if hex then
54157: LD_VAR 0 7
54161: IFFALSE 54179
// ComMoveUnit ( driver , hex ) else
54163: LD_VAR 0 6
54167: PPUSH
54168: LD_VAR 0 7
54172: PPUSH
54173: CALL_OW 112
54177: GO 54218
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54179: LD_VAR 0 6
54183: PPUSH
54184: LD_EXP 52
54188: PUSH
54189: LD_VAR 0 4
54193: ARRAY
54194: PUSH
54195: LD_INT 3
54197: ARRAY
54198: PPUSH
54199: LD_EXP 52
54203: PUSH
54204: LD_VAR 0 4
54208: ARRAY
54209: PUSH
54210: LD_INT 4
54212: ARRAY
54213: PPUSH
54214: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54218: LD_VAR 0 6
54222: PPUSH
54223: CALL_OW 181
// if Multiplayer then
54227: LD_OWVAR 4
54231: IFFALSE 54280
// begin repeat wait ( 10 ) ;
54233: LD_INT 10
54235: PPUSH
54236: CALL_OW 67
// until not IsInUnit ( driver ) ;
54240: LD_VAR 0 6
54244: PPUSH
54245: CALL_OW 310
54249: NOT
54250: IFFALSE 54233
// if not HasTask ( driver ) then
54252: LD_VAR 0 6
54256: PPUSH
54257: CALL_OW 314
54261: NOT
54262: IFFALSE 54278
// ComEnterUnit ( driver , factory ) ;
54264: LD_VAR 0 6
54268: PPUSH
54269: LD_VAR 0 2
54273: PPUSH
54274: CALL_OW 120
// end else
54278: GO 54294
// AddComEnterUnit ( driver , factory ) ;
54280: LD_VAR 0 6
54284: PPUSH
54285: LD_VAR 0 2
54289: PPUSH
54290: CALL_OW 180
// wait ( 0 0$1 ) ;
54294: LD_INT 35
54296: PPUSH
54297: CALL_OW 67
// SetTag ( driver , tag ) ;
54301: LD_VAR 0 6
54305: PPUSH
54306: LD_VAR 0 5
54310: PPUSH
54311: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54315: LD_VAR 0 1
54319: PPUSH
54320: LD_INT 0
54322: PPUSH
54323: CALL_OW 109
// break ;
54327: GO 54450
// end ; end else
54329: GO 54448
// if GetControl ( vehicle ) = control_remote then
54331: LD_VAR 0 1
54335: PPUSH
54336: CALL_OW 263
54340: PUSH
54341: LD_INT 2
54343: EQUAL
54344: IFFALSE 54407
// begin wait ( 0 0$2 ) ;
54346: LD_INT 70
54348: PPUSH
54349: CALL_OW 67
// if Connect ( vehicle ) then
54353: LD_VAR 0 1
54357: PPUSH
54358: CALL 11255 0 1
54362: IFFALSE 54403
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54364: LD_VAR 0 1
54368: PPUSH
54369: LD_EXP 52
54373: PUSH
54374: LD_VAR 0 4
54378: ARRAY
54379: PUSH
54380: LD_INT 3
54382: ARRAY
54383: PPUSH
54384: LD_EXP 52
54388: PUSH
54389: LD_VAR 0 4
54393: ARRAY
54394: PUSH
54395: LD_INT 4
54397: ARRAY
54398: PPUSH
54399: CALL_OW 171
// break ;
54403: GO 54450
// end else
54405: GO 54448
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54407: LD_VAR 0 1
54411: PPUSH
54412: LD_EXP 52
54416: PUSH
54417: LD_VAR 0 4
54421: ARRAY
54422: PUSH
54423: LD_INT 3
54425: ARRAY
54426: PPUSH
54427: LD_EXP 52
54431: PUSH
54432: LD_VAR 0 4
54436: ARRAY
54437: PUSH
54438: LD_INT 4
54440: ARRAY
54441: PPUSH
54442: CALL_OW 171
// break ;
54446: GO 54450
// end ; end ;
54448: GO 53982
54450: POP
54451: POP
// end ;
54452: LD_VAR 0 3
54456: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54457: LD_INT 0
54459: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54460: LD_VAR 0 1
54464: PUSH
54465: LD_INT 250
54467: EQUAL
54468: PUSH
54469: LD_VAR 0 2
54473: PPUSH
54474: CALL_OW 264
54478: PUSH
54479: LD_INT 81
54481: EQUAL
54482: AND
54483: IFFALSE 54504
// MinerPlaceMine ( unit , x , y ) ;
54485: LD_VAR 0 2
54489: PPUSH
54490: LD_VAR 0 4
54494: PPUSH
54495: LD_VAR 0 5
54499: PPUSH
54500: CALL 57596 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54504: LD_VAR 0 1
54508: PUSH
54509: LD_INT 251
54511: EQUAL
54512: PUSH
54513: LD_VAR 0 2
54517: PPUSH
54518: CALL_OW 264
54522: PUSH
54523: LD_INT 81
54525: EQUAL
54526: AND
54527: IFFALSE 54548
// MinerDetonateMine ( unit , x , y ) ;
54529: LD_VAR 0 2
54533: PPUSH
54534: LD_VAR 0 4
54538: PPUSH
54539: LD_VAR 0 5
54543: PPUSH
54544: CALL 57871 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54548: LD_VAR 0 1
54552: PUSH
54553: LD_INT 252
54555: EQUAL
54556: PUSH
54557: LD_VAR 0 2
54561: PPUSH
54562: CALL_OW 264
54566: PUSH
54567: LD_INT 81
54569: EQUAL
54570: AND
54571: IFFALSE 54592
// MinerCreateMinefield ( unit , x , y ) ;
54573: LD_VAR 0 2
54577: PPUSH
54578: LD_VAR 0 4
54582: PPUSH
54583: LD_VAR 0 5
54587: PPUSH
54588: CALL 58288 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54592: LD_VAR 0 1
54596: PUSH
54597: LD_INT 253
54599: EQUAL
54600: PUSH
54601: LD_VAR 0 2
54605: PPUSH
54606: CALL_OW 257
54610: PUSH
54611: LD_INT 5
54613: EQUAL
54614: AND
54615: IFFALSE 54636
// ComBinocular ( unit , x , y ) ;
54617: LD_VAR 0 2
54621: PPUSH
54622: LD_VAR 0 4
54626: PPUSH
54627: LD_VAR 0 5
54631: PPUSH
54632: CALL 58657 0 3
// if selectedUnit then
54636: LD_VAR 0 3
54640: IFFALSE 54696
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54642: LD_VAR 0 1
54646: PUSH
54647: LD_INT 254
54649: EQUAL
54650: PUSH
54651: LD_VAR 0 2
54655: PPUSH
54656: CALL_OW 264
54660: PUSH
54661: LD_INT 99
54663: EQUAL
54664: AND
54665: PUSH
54666: LD_VAR 0 3
54670: PPUSH
54671: CALL_OW 263
54675: PUSH
54676: LD_INT 3
54678: EQUAL
54679: AND
54680: IFFALSE 54696
// HackDestroyVehicle ( unit , selectedUnit ) ;
54682: LD_VAR 0 2
54686: PPUSH
54687: LD_VAR 0 3
54691: PPUSH
54692: CALL 56960 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54696: LD_VAR 0 1
54700: PUSH
54701: LD_INT 255
54703: EQUAL
54704: PUSH
54705: LD_VAR 0 2
54709: PPUSH
54710: CALL_OW 264
54714: PUSH
54715: LD_INT 14
54717: PUSH
54718: LD_INT 53
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: IN
54725: AND
54726: PUSH
54727: LD_VAR 0 4
54731: PPUSH
54732: LD_VAR 0 5
54736: PPUSH
54737: CALL_OW 488
54741: AND
54742: IFFALSE 54766
// CutTreeXYR ( unit , x , y , 12 ) ;
54744: LD_VAR 0 2
54748: PPUSH
54749: LD_VAR 0 4
54753: PPUSH
54754: LD_VAR 0 5
54758: PPUSH
54759: LD_INT 12
54761: PPUSH
54762: CALL 54957 0 4
// if cmd = 256 then
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 256
54773: EQUAL
54774: IFFALSE 54795
// SetFactoryWaypoint ( unit , x , y ) ;
54776: LD_VAR 0 2
54780: PPUSH
54781: LD_VAR 0 4
54785: PPUSH
54786: LD_VAR 0 5
54790: PPUSH
54791: CALL 59212 0 3
// if cmd = 257 then
54795: LD_VAR 0 1
54799: PUSH
54800: LD_INT 257
54802: EQUAL
54803: IFFALSE 54824
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54805: LD_VAR 0 2
54809: PPUSH
54810: LD_VAR 0 4
54814: PPUSH
54815: LD_VAR 0 5
54819: PPUSH
54820: CALL 59702 0 3
// if cmd = 258 then
54824: LD_VAR 0 1
54828: PUSH
54829: LD_INT 258
54831: EQUAL
54832: IFFALSE 54856
// BurnTreeXYR ( unit , x , y , 8 ) ;
54834: LD_VAR 0 2
54838: PPUSH
54839: LD_VAR 0 4
54843: PPUSH
54844: LD_VAR 0 5
54848: PPUSH
54849: LD_INT 8
54851: PPUSH
54852: CALL 55351 0 4
// end ;
54856: LD_VAR 0 6
54860: RET
// export function ComRadiation ( un ) ; var eff ; begin
54861: LD_INT 0
54863: PPUSH
54864: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54865: LD_VAR 0 1
54869: PPUSH
54870: CALL_OW 264
54874: PUSH
54875: LD_INT 91
54877: NONEQUAL
54878: IFFALSE 54882
// exit ;
54880: GO 54952
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54882: LD_INT 68
54884: PPUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 255
54894: PPUSH
54895: CALL_OW 321
54899: PUSH
54900: LD_INT 2
54902: EQUAL
54903: IFFALSE 54915
// eff := 70 else
54905: LD_ADDR_VAR 0 3
54909: PUSH
54910: LD_INT 70
54912: ST_TO_ADDR
54913: GO 54923
// eff := 30 ;
54915: LD_ADDR_VAR 0 3
54919: PUSH
54920: LD_INT 30
54922: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54923: LD_VAR 0 1
54927: PPUSH
54928: CALL_OW 250
54932: PPUSH
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 251
54942: PPUSH
54943: LD_VAR 0 3
54947: PPUSH
54948: CALL_OW 495
// end ;
54952: LD_VAR 0 2
54956: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54957: LD_INT 0
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54968: LD_VAR 0 1
54972: PPUSH
54973: CALL_OW 302
54977: NOT
54978: PUSH
54979: LD_VAR 0 2
54983: PPUSH
54984: LD_VAR 0 3
54988: PPUSH
54989: CALL_OW 488
54993: NOT
54994: OR
54995: PUSH
54996: LD_VAR 0 4
55000: NOT
55001: OR
55002: IFFALSE 55006
// exit ;
55004: GO 55346
// list := [ ] ;
55006: LD_ADDR_VAR 0 13
55010: PUSH
55011: EMPTY
55012: ST_TO_ADDR
// if x - r < 0 then
55013: LD_VAR 0 2
55017: PUSH
55018: LD_VAR 0 4
55022: MINUS
55023: PUSH
55024: LD_INT 0
55026: LESS
55027: IFFALSE 55039
// min_x := 0 else
55029: LD_ADDR_VAR 0 7
55033: PUSH
55034: LD_INT 0
55036: ST_TO_ADDR
55037: GO 55055
// min_x := x - r ;
55039: LD_ADDR_VAR 0 7
55043: PUSH
55044: LD_VAR 0 2
55048: PUSH
55049: LD_VAR 0 4
55053: MINUS
55054: ST_TO_ADDR
// if y - r < 0 then
55055: LD_VAR 0 3
55059: PUSH
55060: LD_VAR 0 4
55064: MINUS
55065: PUSH
55066: LD_INT 0
55068: LESS
55069: IFFALSE 55081
// min_y := 0 else
55071: LD_ADDR_VAR 0 8
55075: PUSH
55076: LD_INT 0
55078: ST_TO_ADDR
55079: GO 55097
// min_y := y - r ;
55081: LD_ADDR_VAR 0 8
55085: PUSH
55086: LD_VAR 0 3
55090: PUSH
55091: LD_VAR 0 4
55095: MINUS
55096: ST_TO_ADDR
// max_x := x + r ;
55097: LD_ADDR_VAR 0 9
55101: PUSH
55102: LD_VAR 0 2
55106: PUSH
55107: LD_VAR 0 4
55111: PLUS
55112: ST_TO_ADDR
// max_y := y + r ;
55113: LD_ADDR_VAR 0 10
55117: PUSH
55118: LD_VAR 0 3
55122: PUSH
55123: LD_VAR 0 4
55127: PLUS
55128: ST_TO_ADDR
// for _x = min_x to max_x do
55129: LD_ADDR_VAR 0 11
55133: PUSH
55134: DOUBLE
55135: LD_VAR 0 7
55139: DEC
55140: ST_TO_ADDR
55141: LD_VAR 0 9
55145: PUSH
55146: FOR_TO
55147: IFFALSE 55264
// for _y = min_y to max_y do
55149: LD_ADDR_VAR 0 12
55153: PUSH
55154: DOUBLE
55155: LD_VAR 0 8
55159: DEC
55160: ST_TO_ADDR
55161: LD_VAR 0 10
55165: PUSH
55166: FOR_TO
55167: IFFALSE 55260
// begin if not ValidHex ( _x , _y ) then
55169: LD_VAR 0 11
55173: PPUSH
55174: LD_VAR 0 12
55178: PPUSH
55179: CALL_OW 488
55183: NOT
55184: IFFALSE 55188
// continue ;
55186: GO 55166
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55188: LD_VAR 0 11
55192: PPUSH
55193: LD_VAR 0 12
55197: PPUSH
55198: CALL_OW 351
55202: PUSH
55203: LD_VAR 0 11
55207: PPUSH
55208: LD_VAR 0 12
55212: PPUSH
55213: CALL_OW 554
55217: AND
55218: IFFALSE 55258
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55220: LD_ADDR_VAR 0 13
55224: PUSH
55225: LD_VAR 0 13
55229: PPUSH
55230: LD_VAR 0 13
55234: PUSH
55235: LD_INT 1
55237: PLUS
55238: PPUSH
55239: LD_VAR 0 11
55243: PUSH
55244: LD_VAR 0 12
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PPUSH
55253: CALL_OW 2
55257: ST_TO_ADDR
// end ;
55258: GO 55166
55260: POP
55261: POP
55262: GO 55146
55264: POP
55265: POP
// if not list then
55266: LD_VAR 0 13
55270: NOT
55271: IFFALSE 55275
// exit ;
55273: GO 55346
// for i in list do
55275: LD_ADDR_VAR 0 6
55279: PUSH
55280: LD_VAR 0 13
55284: PUSH
55285: FOR_IN
55286: IFFALSE 55344
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55288: LD_VAR 0 1
55292: PPUSH
55293: LD_STRING M
55295: PUSH
55296: LD_VAR 0 6
55300: PUSH
55301: LD_INT 1
55303: ARRAY
55304: PUSH
55305: LD_VAR 0 6
55309: PUSH
55310: LD_INT 2
55312: ARRAY
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: PPUSH
55338: CALL_OW 447
55342: GO 55285
55344: POP
55345: POP
// end ;
55346: LD_VAR 0 5
55350: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55351: LD_INT 0
55353: PPUSH
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55363: LD_VAR 0 1
55367: PPUSH
55368: CALL_OW 302
55372: NOT
55373: PUSH
55374: LD_VAR 0 2
55378: PPUSH
55379: LD_VAR 0 3
55383: PPUSH
55384: CALL_OW 488
55388: NOT
55389: OR
55390: PUSH
55391: LD_VAR 0 4
55395: NOT
55396: OR
55397: IFFALSE 55401
// exit ;
55399: GO 55914
// list := [ ] ;
55401: LD_ADDR_VAR 0 13
55405: PUSH
55406: EMPTY
55407: ST_TO_ADDR
// if x - r < 0 then
55408: LD_VAR 0 2
55412: PUSH
55413: LD_VAR 0 4
55417: MINUS
55418: PUSH
55419: LD_INT 0
55421: LESS
55422: IFFALSE 55434
// min_x := 0 else
55424: LD_ADDR_VAR 0 7
55428: PUSH
55429: LD_INT 0
55431: ST_TO_ADDR
55432: GO 55450
// min_x := x - r ;
55434: LD_ADDR_VAR 0 7
55438: PUSH
55439: LD_VAR 0 2
55443: PUSH
55444: LD_VAR 0 4
55448: MINUS
55449: ST_TO_ADDR
// if y - r < 0 then
55450: LD_VAR 0 3
55454: PUSH
55455: LD_VAR 0 4
55459: MINUS
55460: PUSH
55461: LD_INT 0
55463: LESS
55464: IFFALSE 55476
// min_y := 0 else
55466: LD_ADDR_VAR 0 8
55470: PUSH
55471: LD_INT 0
55473: ST_TO_ADDR
55474: GO 55492
// min_y := y - r ;
55476: LD_ADDR_VAR 0 8
55480: PUSH
55481: LD_VAR 0 3
55485: PUSH
55486: LD_VAR 0 4
55490: MINUS
55491: ST_TO_ADDR
// max_x := x + r ;
55492: LD_ADDR_VAR 0 9
55496: PUSH
55497: LD_VAR 0 2
55501: PUSH
55502: LD_VAR 0 4
55506: PLUS
55507: ST_TO_ADDR
// max_y := y + r ;
55508: LD_ADDR_VAR 0 10
55512: PUSH
55513: LD_VAR 0 3
55517: PUSH
55518: LD_VAR 0 4
55522: PLUS
55523: ST_TO_ADDR
// for _x = min_x to max_x do
55524: LD_ADDR_VAR 0 11
55528: PUSH
55529: DOUBLE
55530: LD_VAR 0 7
55534: DEC
55535: ST_TO_ADDR
55536: LD_VAR 0 9
55540: PUSH
55541: FOR_TO
55542: IFFALSE 55659
// for _y = min_y to max_y do
55544: LD_ADDR_VAR 0 12
55548: PUSH
55549: DOUBLE
55550: LD_VAR 0 8
55554: DEC
55555: ST_TO_ADDR
55556: LD_VAR 0 10
55560: PUSH
55561: FOR_TO
55562: IFFALSE 55655
// begin if not ValidHex ( _x , _y ) then
55564: LD_VAR 0 11
55568: PPUSH
55569: LD_VAR 0 12
55573: PPUSH
55574: CALL_OW 488
55578: NOT
55579: IFFALSE 55583
// continue ;
55581: GO 55561
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55583: LD_VAR 0 11
55587: PPUSH
55588: LD_VAR 0 12
55592: PPUSH
55593: CALL_OW 351
55597: PUSH
55598: LD_VAR 0 11
55602: PPUSH
55603: LD_VAR 0 12
55607: PPUSH
55608: CALL_OW 554
55612: AND
55613: IFFALSE 55653
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55615: LD_ADDR_VAR 0 13
55619: PUSH
55620: LD_VAR 0 13
55624: PPUSH
55625: LD_VAR 0 13
55629: PUSH
55630: LD_INT 1
55632: PLUS
55633: PPUSH
55634: LD_VAR 0 11
55638: PUSH
55639: LD_VAR 0 12
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PPUSH
55648: CALL_OW 2
55652: ST_TO_ADDR
// end ;
55653: GO 55561
55655: POP
55656: POP
55657: GO 55541
55659: POP
55660: POP
// if not list then
55661: LD_VAR 0 13
55665: NOT
55666: IFFALSE 55670
// exit ;
55668: GO 55914
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55670: LD_ADDR_VAR 0 13
55674: PUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: LD_VAR 0 13
55684: PPUSH
55685: LD_INT 1
55687: PPUSH
55688: LD_INT 1
55690: PPUSH
55691: CALL 8397 0 4
55695: ST_TO_ADDR
// ComStop ( flame ) ;
55696: LD_VAR 0 1
55700: PPUSH
55701: CALL_OW 141
// for i in list do
55705: LD_ADDR_VAR 0 6
55709: PUSH
55710: LD_VAR 0 13
55714: PUSH
55715: FOR_IN
55716: IFFALSE 55747
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55718: LD_VAR 0 1
55722: PPUSH
55723: LD_VAR 0 6
55727: PUSH
55728: LD_INT 1
55730: ARRAY
55731: PPUSH
55732: LD_VAR 0 6
55736: PUSH
55737: LD_INT 2
55739: ARRAY
55740: PPUSH
55741: CALL_OW 176
55745: GO 55715
55747: POP
55748: POP
// repeat wait ( 0 0$1 ) ;
55749: LD_INT 35
55751: PPUSH
55752: CALL_OW 67
// task := GetTaskList ( flame ) ;
55756: LD_ADDR_VAR 0 14
55760: PUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: CALL_OW 437
55770: ST_TO_ADDR
// if not task then
55771: LD_VAR 0 14
55775: NOT
55776: IFFALSE 55780
// exit ;
55778: GO 55914
// if task [ 1 ] [ 1 ] <> | then
55780: LD_VAR 0 14
55784: PUSH
55785: LD_INT 1
55787: ARRAY
55788: PUSH
55789: LD_INT 1
55791: ARRAY
55792: PUSH
55793: LD_STRING |
55795: NONEQUAL
55796: IFFALSE 55800
// exit ;
55798: GO 55914
// _x := task [ 1 ] [ 2 ] ;
55800: LD_ADDR_VAR 0 11
55804: PUSH
55805: LD_VAR 0 14
55809: PUSH
55810: LD_INT 1
55812: ARRAY
55813: PUSH
55814: LD_INT 2
55816: ARRAY
55817: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55818: LD_ADDR_VAR 0 12
55822: PUSH
55823: LD_VAR 0 14
55827: PUSH
55828: LD_INT 1
55830: ARRAY
55831: PUSH
55832: LD_INT 3
55834: ARRAY
55835: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55836: LD_VAR 0 11
55840: PPUSH
55841: LD_VAR 0 12
55845: PPUSH
55846: CALL_OW 351
55850: NOT
55851: PUSH
55852: LD_VAR 0 11
55856: PPUSH
55857: LD_VAR 0 12
55861: PPUSH
55862: CALL_OW 554
55866: NOT
55867: OR
55868: IFFALSE 55902
// begin task := Delete ( task , 1 ) ;
55870: LD_ADDR_VAR 0 14
55874: PUSH
55875: LD_VAR 0 14
55879: PPUSH
55880: LD_INT 1
55882: PPUSH
55883: CALL_OW 3
55887: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55888: LD_VAR 0 1
55892: PPUSH
55893: LD_VAR 0 14
55897: PPUSH
55898: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55902: LD_VAR 0 1
55906: PPUSH
55907: CALL_OW 314
55911: NOT
55912: IFFALSE 55749
// end ;
55914: LD_VAR 0 5
55918: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55919: LD_EXP 42
55923: NOT
55924: IFFALSE 55974
55926: GO 55928
55928: DISABLE
// begin initHack := true ;
55929: LD_ADDR_EXP 42
55933: PUSH
55934: LD_INT 1
55936: ST_TO_ADDR
// hackTanks := [ ] ;
55937: LD_ADDR_EXP 43
55941: PUSH
55942: EMPTY
55943: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55944: LD_ADDR_EXP 44
55948: PUSH
55949: EMPTY
55950: ST_TO_ADDR
// hackLimit := 3 ;
55951: LD_ADDR_EXP 45
55955: PUSH
55956: LD_INT 3
55958: ST_TO_ADDR
// hackDist := 12 ;
55959: LD_ADDR_EXP 46
55963: PUSH
55964: LD_INT 12
55966: ST_TO_ADDR
// hackCounter := [ ] ;
55967: LD_ADDR_EXP 47
55971: PUSH
55972: EMPTY
55973: ST_TO_ADDR
// end ;
55974: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55975: LD_EXP 42
55979: PUSH
55980: LD_INT 34
55982: PUSH
55983: LD_INT 99
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PPUSH
55990: CALL_OW 69
55994: AND
55995: IFFALSE 56248
55997: GO 55999
55999: DISABLE
56000: LD_INT 0
56002: PPUSH
56003: PPUSH
// begin enable ;
56004: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56005: LD_ADDR_VAR 0 1
56009: PUSH
56010: LD_INT 34
56012: PUSH
56013: LD_INT 99
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PPUSH
56020: CALL_OW 69
56024: PUSH
56025: FOR_IN
56026: IFFALSE 56246
// begin if not i in hackTanks then
56028: LD_VAR 0 1
56032: PUSH
56033: LD_EXP 43
56037: IN
56038: NOT
56039: IFFALSE 56122
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56041: LD_ADDR_EXP 43
56045: PUSH
56046: LD_EXP 43
56050: PPUSH
56051: LD_EXP 43
56055: PUSH
56056: LD_INT 1
56058: PLUS
56059: PPUSH
56060: LD_VAR 0 1
56064: PPUSH
56065: CALL_OW 1
56069: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56070: LD_ADDR_EXP 44
56074: PUSH
56075: LD_EXP 44
56079: PPUSH
56080: LD_EXP 44
56084: PUSH
56085: LD_INT 1
56087: PLUS
56088: PPUSH
56089: EMPTY
56090: PPUSH
56091: CALL_OW 1
56095: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56096: LD_ADDR_EXP 47
56100: PUSH
56101: LD_EXP 47
56105: PPUSH
56106: LD_EXP 47
56110: PUSH
56111: LD_INT 1
56113: PLUS
56114: PPUSH
56115: EMPTY
56116: PPUSH
56117: CALL_OW 1
56121: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56122: LD_VAR 0 1
56126: PPUSH
56127: CALL_OW 302
56131: NOT
56132: IFFALSE 56145
// begin HackUnlinkAll ( i ) ;
56134: LD_VAR 0 1
56138: PPUSH
56139: CALL 56251 0 1
// continue ;
56143: GO 56025
// end ; HackCheckCapturedStatus ( i ) ;
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL 56694 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56154: LD_ADDR_VAR 0 2
56158: PUSH
56159: LD_INT 81
56161: PUSH
56162: LD_VAR 0 1
56166: PPUSH
56167: CALL_OW 255
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 33
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 91
56188: PUSH
56189: LD_VAR 0 1
56193: PUSH
56194: LD_EXP 46
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 50
56206: PUSH
56207: EMPTY
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: PPUSH
56216: CALL_OW 69
56220: ST_TO_ADDR
// if not tmp then
56221: LD_VAR 0 2
56225: NOT
56226: IFFALSE 56230
// continue ;
56228: GO 56025
// HackLink ( i , tmp ) ;
56230: LD_VAR 0 1
56234: PPUSH
56235: LD_VAR 0 2
56239: PPUSH
56240: CALL 56387 0 2
// end ;
56244: GO 56025
56246: POP
56247: POP
// end ;
56248: PPOPN 2
56250: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56251: LD_INT 0
56253: PPUSH
56254: PPUSH
56255: PPUSH
// if not hack in hackTanks then
56256: LD_VAR 0 1
56260: PUSH
56261: LD_EXP 43
56265: IN
56266: NOT
56267: IFFALSE 56271
// exit ;
56269: GO 56382
// index := GetElementIndex ( hackTanks , hack ) ;
56271: LD_ADDR_VAR 0 4
56275: PUSH
56276: LD_EXP 43
56280: PPUSH
56281: LD_VAR 0 1
56285: PPUSH
56286: CALL 7694 0 2
56290: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56291: LD_EXP 44
56295: PUSH
56296: LD_VAR 0 4
56300: ARRAY
56301: IFFALSE 56382
// begin for i in hackTanksCaptured [ index ] do
56303: LD_ADDR_VAR 0 3
56307: PUSH
56308: LD_EXP 44
56312: PUSH
56313: LD_VAR 0 4
56317: ARRAY
56318: PUSH
56319: FOR_IN
56320: IFFALSE 56346
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56322: LD_VAR 0 3
56326: PUSH
56327: LD_INT 1
56329: ARRAY
56330: PPUSH
56331: LD_VAR 0 3
56335: PUSH
56336: LD_INT 2
56338: ARRAY
56339: PPUSH
56340: CALL_OW 235
56344: GO 56319
56346: POP
56347: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56348: LD_ADDR_EXP 44
56352: PUSH
56353: LD_EXP 44
56357: PPUSH
56358: LD_VAR 0 4
56362: PPUSH
56363: EMPTY
56364: PPUSH
56365: CALL_OW 1
56369: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56370: LD_VAR 0 1
56374: PPUSH
56375: LD_INT 0
56377: PPUSH
56378: CALL_OW 505
// end ; end ;
56382: LD_VAR 0 2
56386: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56387: LD_INT 0
56389: PPUSH
56390: PPUSH
56391: PPUSH
// if not hack in hackTanks or not vehicles then
56392: LD_VAR 0 1
56396: PUSH
56397: LD_EXP 43
56401: IN
56402: NOT
56403: PUSH
56404: LD_VAR 0 2
56408: NOT
56409: OR
56410: IFFALSE 56414
// exit ;
56412: GO 56689
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56414: LD_ADDR_VAR 0 2
56418: PUSH
56419: LD_VAR 0 1
56423: PPUSH
56424: LD_VAR 0 2
56428: PPUSH
56429: LD_INT 1
56431: PPUSH
56432: LD_INT 1
56434: PPUSH
56435: CALL 8344 0 4
56439: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56440: LD_ADDR_VAR 0 5
56444: PUSH
56445: LD_EXP 43
56449: PPUSH
56450: LD_VAR 0 1
56454: PPUSH
56455: CALL 7694 0 2
56459: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56460: LD_EXP 44
56464: PUSH
56465: LD_VAR 0 5
56469: ARRAY
56470: PUSH
56471: LD_EXP 45
56475: LESS
56476: IFFALSE 56665
// begin for i := 1 to vehicles do
56478: LD_ADDR_VAR 0 4
56482: PUSH
56483: DOUBLE
56484: LD_INT 1
56486: DEC
56487: ST_TO_ADDR
56488: LD_VAR 0 2
56492: PUSH
56493: FOR_TO
56494: IFFALSE 56663
// begin if hackTanksCaptured [ index ] = hackLimit then
56496: LD_EXP 44
56500: PUSH
56501: LD_VAR 0 5
56505: ARRAY
56506: PUSH
56507: LD_EXP 45
56511: EQUAL
56512: IFFALSE 56516
// break ;
56514: GO 56663
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56516: LD_ADDR_EXP 47
56520: PUSH
56521: LD_EXP 47
56525: PPUSH
56526: LD_VAR 0 5
56530: PPUSH
56531: LD_EXP 47
56535: PUSH
56536: LD_VAR 0 5
56540: ARRAY
56541: PUSH
56542: LD_INT 1
56544: PLUS
56545: PPUSH
56546: CALL_OW 1
56550: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56551: LD_ADDR_EXP 44
56555: PUSH
56556: LD_EXP 44
56560: PPUSH
56561: LD_VAR 0 5
56565: PUSH
56566: LD_EXP 44
56570: PUSH
56571: LD_VAR 0 5
56575: ARRAY
56576: PUSH
56577: LD_INT 1
56579: PLUS
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PPUSH
56585: LD_VAR 0 2
56589: PUSH
56590: LD_VAR 0 4
56594: ARRAY
56595: PUSH
56596: LD_VAR 0 2
56600: PUSH
56601: LD_VAR 0 4
56605: ARRAY
56606: PPUSH
56607: CALL_OW 255
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PPUSH
56616: CALL 7909 0 3
56620: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56621: LD_VAR 0 2
56625: PUSH
56626: LD_VAR 0 4
56630: ARRAY
56631: PPUSH
56632: LD_VAR 0 1
56636: PPUSH
56637: CALL_OW 255
56641: PPUSH
56642: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56646: LD_VAR 0 2
56650: PUSH
56651: LD_VAR 0 4
56655: ARRAY
56656: PPUSH
56657: CALL_OW 141
// end ;
56661: GO 56493
56663: POP
56664: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56665: LD_VAR 0 1
56669: PPUSH
56670: LD_EXP 44
56674: PUSH
56675: LD_VAR 0 5
56679: ARRAY
56680: PUSH
56681: LD_INT 0
56683: PLUS
56684: PPUSH
56685: CALL_OW 505
// end ;
56689: LD_VAR 0 3
56693: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56694: LD_INT 0
56696: PPUSH
56697: PPUSH
56698: PPUSH
56699: PPUSH
// if not hack in hackTanks then
56700: LD_VAR 0 1
56704: PUSH
56705: LD_EXP 43
56709: IN
56710: NOT
56711: IFFALSE 56715
// exit ;
56713: GO 56955
// index := GetElementIndex ( hackTanks , hack ) ;
56715: LD_ADDR_VAR 0 4
56719: PUSH
56720: LD_EXP 43
56724: PPUSH
56725: LD_VAR 0 1
56729: PPUSH
56730: CALL 7694 0 2
56734: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56735: LD_ADDR_VAR 0 3
56739: PUSH
56740: DOUBLE
56741: LD_EXP 44
56745: PUSH
56746: LD_VAR 0 4
56750: ARRAY
56751: INC
56752: ST_TO_ADDR
56753: LD_INT 1
56755: PUSH
56756: FOR_DOWNTO
56757: IFFALSE 56929
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56759: LD_ADDR_VAR 0 5
56763: PUSH
56764: LD_EXP 44
56768: PUSH
56769: LD_VAR 0 4
56773: ARRAY
56774: PUSH
56775: LD_VAR 0 3
56779: ARRAY
56780: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56781: LD_VAR 0 5
56785: PUSH
56786: LD_INT 1
56788: ARRAY
56789: PPUSH
56790: CALL_OW 302
56794: NOT
56795: PUSH
56796: LD_VAR 0 5
56800: PUSH
56801: LD_INT 1
56803: ARRAY
56804: PPUSH
56805: CALL_OW 255
56809: PUSH
56810: LD_VAR 0 1
56814: PPUSH
56815: CALL_OW 255
56819: NONEQUAL
56820: OR
56821: IFFALSE 56927
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56823: LD_VAR 0 5
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: PPUSH
56832: CALL_OW 305
56836: PUSH
56837: LD_VAR 0 5
56841: PUSH
56842: LD_INT 1
56844: ARRAY
56845: PPUSH
56846: CALL_OW 255
56850: PUSH
56851: LD_VAR 0 1
56855: PPUSH
56856: CALL_OW 255
56860: EQUAL
56861: AND
56862: IFFALSE 56886
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56864: LD_VAR 0 5
56868: PUSH
56869: LD_INT 1
56871: ARRAY
56872: PPUSH
56873: LD_VAR 0 5
56877: PUSH
56878: LD_INT 2
56880: ARRAY
56881: PPUSH
56882: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56886: LD_ADDR_EXP 44
56890: PUSH
56891: LD_EXP 44
56895: PPUSH
56896: LD_VAR 0 4
56900: PPUSH
56901: LD_EXP 44
56905: PUSH
56906: LD_VAR 0 4
56910: ARRAY
56911: PPUSH
56912: LD_VAR 0 3
56916: PPUSH
56917: CALL_OW 3
56921: PPUSH
56922: CALL_OW 1
56926: ST_TO_ADDR
// end ; end ;
56927: GO 56756
56929: POP
56930: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56931: LD_VAR 0 1
56935: PPUSH
56936: LD_EXP 44
56940: PUSH
56941: LD_VAR 0 4
56945: ARRAY
56946: PUSH
56947: LD_INT 0
56949: PLUS
56950: PPUSH
56951: CALL_OW 505
// end ;
56955: LD_VAR 0 2
56959: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56960: LD_INT 0
56962: PPUSH
56963: PPUSH
56964: PPUSH
56965: PPUSH
// if not hack in hackTanks then
56966: LD_VAR 0 1
56970: PUSH
56971: LD_EXP 43
56975: IN
56976: NOT
56977: IFFALSE 56981
// exit ;
56979: GO 57066
// index := GetElementIndex ( hackTanks , hack ) ;
56981: LD_ADDR_VAR 0 5
56985: PUSH
56986: LD_EXP 43
56990: PPUSH
56991: LD_VAR 0 1
56995: PPUSH
56996: CALL 7694 0 2
57000: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57001: LD_ADDR_VAR 0 4
57005: PUSH
57006: DOUBLE
57007: LD_INT 1
57009: DEC
57010: ST_TO_ADDR
57011: LD_EXP 44
57015: PUSH
57016: LD_VAR 0 5
57020: ARRAY
57021: PUSH
57022: FOR_TO
57023: IFFALSE 57064
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57025: LD_EXP 44
57029: PUSH
57030: LD_VAR 0 5
57034: ARRAY
57035: PUSH
57036: LD_VAR 0 4
57040: ARRAY
57041: PUSH
57042: LD_INT 1
57044: ARRAY
57045: PUSH
57046: LD_VAR 0 2
57050: EQUAL
57051: IFFALSE 57062
// KillUnit ( vehicle ) ;
57053: LD_VAR 0 2
57057: PPUSH
57058: CALL_OW 66
57062: GO 57022
57064: POP
57065: POP
// end ;
57066: LD_VAR 0 3
57070: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57071: LD_EXP 48
57075: NOT
57076: IFFALSE 57111
57078: GO 57080
57080: DISABLE
// begin initMiner := true ;
57081: LD_ADDR_EXP 48
57085: PUSH
57086: LD_INT 1
57088: ST_TO_ADDR
// minersList := [ ] ;
57089: LD_ADDR_EXP 49
57093: PUSH
57094: EMPTY
57095: ST_TO_ADDR
// minerMinesList := [ ] ;
57096: LD_ADDR_EXP 50
57100: PUSH
57101: EMPTY
57102: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57103: LD_ADDR_EXP 51
57107: PUSH
57108: LD_INT 5
57110: ST_TO_ADDR
// end ;
57111: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57112: LD_EXP 48
57116: PUSH
57117: LD_INT 34
57119: PUSH
57120: LD_INT 81
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PPUSH
57127: CALL_OW 69
57131: AND
57132: IFFALSE 57593
57134: GO 57136
57136: DISABLE
57137: LD_INT 0
57139: PPUSH
57140: PPUSH
57141: PPUSH
57142: PPUSH
// begin enable ;
57143: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57144: LD_ADDR_VAR 0 1
57148: PUSH
57149: LD_INT 34
57151: PUSH
57152: LD_INT 81
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PPUSH
57159: CALL_OW 69
57163: PUSH
57164: FOR_IN
57165: IFFALSE 57237
// begin if not i in minersList then
57167: LD_VAR 0 1
57171: PUSH
57172: LD_EXP 49
57176: IN
57177: NOT
57178: IFFALSE 57235
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57180: LD_ADDR_EXP 49
57184: PUSH
57185: LD_EXP 49
57189: PPUSH
57190: LD_EXP 49
57194: PUSH
57195: LD_INT 1
57197: PLUS
57198: PPUSH
57199: LD_VAR 0 1
57203: PPUSH
57204: CALL_OW 1
57208: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57209: LD_ADDR_EXP 50
57213: PUSH
57214: LD_EXP 50
57218: PPUSH
57219: LD_EXP 50
57223: PUSH
57224: LD_INT 1
57226: PLUS
57227: PPUSH
57228: EMPTY
57229: PPUSH
57230: CALL_OW 1
57234: ST_TO_ADDR
// end end ;
57235: GO 57164
57237: POP
57238: POP
// for i := minerMinesList downto 1 do
57239: LD_ADDR_VAR 0 1
57243: PUSH
57244: DOUBLE
57245: LD_EXP 50
57249: INC
57250: ST_TO_ADDR
57251: LD_INT 1
57253: PUSH
57254: FOR_DOWNTO
57255: IFFALSE 57591
// begin if IsLive ( minersList [ i ] ) then
57257: LD_EXP 49
57261: PUSH
57262: LD_VAR 0 1
57266: ARRAY
57267: PPUSH
57268: CALL_OW 300
57272: IFFALSE 57300
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57274: LD_EXP 49
57278: PUSH
57279: LD_VAR 0 1
57283: ARRAY
57284: PPUSH
57285: LD_EXP 50
57289: PUSH
57290: LD_VAR 0 1
57294: ARRAY
57295: PPUSH
57296: CALL_OW 505
// if not minerMinesList [ i ] then
57300: LD_EXP 50
57304: PUSH
57305: LD_VAR 0 1
57309: ARRAY
57310: NOT
57311: IFFALSE 57315
// continue ;
57313: GO 57254
// for j := minerMinesList [ i ] downto 1 do
57315: LD_ADDR_VAR 0 2
57319: PUSH
57320: DOUBLE
57321: LD_EXP 50
57325: PUSH
57326: LD_VAR 0 1
57330: ARRAY
57331: INC
57332: ST_TO_ADDR
57333: LD_INT 1
57335: PUSH
57336: FOR_DOWNTO
57337: IFFALSE 57587
// begin side := GetSide ( minersList [ i ] ) ;
57339: LD_ADDR_VAR 0 3
57343: PUSH
57344: LD_EXP 49
57348: PUSH
57349: LD_VAR 0 1
57353: ARRAY
57354: PPUSH
57355: CALL_OW 255
57359: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57360: LD_ADDR_VAR 0 4
57364: PUSH
57365: LD_EXP 50
57369: PUSH
57370: LD_VAR 0 1
57374: ARRAY
57375: PUSH
57376: LD_VAR 0 2
57380: ARRAY
57381: PUSH
57382: LD_INT 1
57384: ARRAY
57385: PPUSH
57386: LD_EXP 50
57390: PUSH
57391: LD_VAR 0 1
57395: ARRAY
57396: PUSH
57397: LD_VAR 0 2
57401: ARRAY
57402: PUSH
57403: LD_INT 2
57405: ARRAY
57406: PPUSH
57407: CALL_OW 428
57411: ST_TO_ADDR
// if not tmp then
57412: LD_VAR 0 4
57416: NOT
57417: IFFALSE 57421
// continue ;
57419: GO 57336
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57421: LD_VAR 0 4
57425: PUSH
57426: LD_INT 81
57428: PUSH
57429: LD_VAR 0 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PPUSH
57438: CALL_OW 69
57442: IN
57443: PUSH
57444: LD_EXP 50
57448: PUSH
57449: LD_VAR 0 1
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 2
57459: ARRAY
57460: PUSH
57461: LD_INT 1
57463: ARRAY
57464: PPUSH
57465: LD_EXP 50
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: PUSH
57476: LD_VAR 0 2
57480: ARRAY
57481: PUSH
57482: LD_INT 2
57484: ARRAY
57485: PPUSH
57486: CALL_OW 458
57490: AND
57491: IFFALSE 57585
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57493: LD_EXP 50
57497: PUSH
57498: LD_VAR 0 1
57502: ARRAY
57503: PUSH
57504: LD_VAR 0 2
57508: ARRAY
57509: PUSH
57510: LD_INT 1
57512: ARRAY
57513: PPUSH
57514: LD_EXP 50
57518: PUSH
57519: LD_VAR 0 1
57523: ARRAY
57524: PUSH
57525: LD_VAR 0 2
57529: ARRAY
57530: PUSH
57531: LD_INT 2
57533: ARRAY
57534: PPUSH
57535: LD_VAR 0 3
57539: PPUSH
57540: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57544: LD_ADDR_EXP 50
57548: PUSH
57549: LD_EXP 50
57553: PPUSH
57554: LD_VAR 0 1
57558: PPUSH
57559: LD_EXP 50
57563: PUSH
57564: LD_VAR 0 1
57568: ARRAY
57569: PPUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: CALL_OW 3
57579: PPUSH
57580: CALL_OW 1
57584: ST_TO_ADDR
// end ; end ;
57585: GO 57336
57587: POP
57588: POP
// end ;
57589: GO 57254
57591: POP
57592: POP
// end ;
57593: PPOPN 4
57595: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57596: LD_INT 0
57598: PPUSH
57599: PPUSH
// result := false ;
57600: LD_ADDR_VAR 0 4
57604: PUSH
57605: LD_INT 0
57607: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57608: LD_VAR 0 1
57612: PPUSH
57613: CALL_OW 264
57617: PUSH
57618: LD_INT 81
57620: EQUAL
57621: NOT
57622: IFFALSE 57626
// exit ;
57624: GO 57866
// index := GetElementIndex ( minersList , unit ) ;
57626: LD_ADDR_VAR 0 5
57630: PUSH
57631: LD_EXP 49
57635: PPUSH
57636: LD_VAR 0 1
57640: PPUSH
57641: CALL 7694 0 2
57645: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57646: LD_EXP 50
57650: PUSH
57651: LD_VAR 0 5
57655: ARRAY
57656: PUSH
57657: LD_EXP 51
57661: GREATEREQUAL
57662: IFFALSE 57666
// exit ;
57664: GO 57866
// ComMoveXY ( unit , x , y ) ;
57666: LD_VAR 0 1
57670: PPUSH
57671: LD_VAR 0 2
57675: PPUSH
57676: LD_VAR 0 3
57680: PPUSH
57681: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57685: LD_INT 35
57687: PPUSH
57688: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57692: LD_VAR 0 1
57696: PPUSH
57697: LD_VAR 0 2
57701: PPUSH
57702: LD_VAR 0 3
57706: PPUSH
57707: CALL 39455 0 3
57711: NOT
57712: PUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 314
57722: AND
57723: IFFALSE 57727
// exit ;
57725: GO 57866
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57727: LD_VAR 0 2
57731: PPUSH
57732: LD_VAR 0 3
57736: PPUSH
57737: CALL_OW 428
57741: PUSH
57742: LD_VAR 0 1
57746: EQUAL
57747: PUSH
57748: LD_VAR 0 1
57752: PPUSH
57753: CALL_OW 314
57757: NOT
57758: AND
57759: IFFALSE 57685
// PlaySoundXY ( x , y , PlantMine ) ;
57761: LD_VAR 0 2
57765: PPUSH
57766: LD_VAR 0 3
57770: PPUSH
57771: LD_STRING PlantMine
57773: PPUSH
57774: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57778: LD_VAR 0 2
57782: PPUSH
57783: LD_VAR 0 3
57787: PPUSH
57788: LD_VAR 0 1
57792: PPUSH
57793: CALL_OW 255
57797: PPUSH
57798: LD_INT 0
57800: PPUSH
57801: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57805: LD_ADDR_EXP 50
57809: PUSH
57810: LD_EXP 50
57814: PPUSH
57815: LD_VAR 0 5
57819: PUSH
57820: LD_EXP 50
57824: PUSH
57825: LD_VAR 0 5
57829: ARRAY
57830: PUSH
57831: LD_INT 1
57833: PLUS
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PPUSH
57839: LD_VAR 0 2
57843: PUSH
57844: LD_VAR 0 3
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PPUSH
57853: CALL 7909 0 3
57857: ST_TO_ADDR
// result := true ;
57858: LD_ADDR_VAR 0 4
57862: PUSH
57863: LD_INT 1
57865: ST_TO_ADDR
// end ;
57866: LD_VAR 0 4
57870: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57871: LD_INT 0
57873: PPUSH
57874: PPUSH
57875: PPUSH
// if not unit in minersList then
57876: LD_VAR 0 1
57880: PUSH
57881: LD_EXP 49
57885: IN
57886: NOT
57887: IFFALSE 57891
// exit ;
57889: GO 58283
// index := GetElementIndex ( minersList , unit ) ;
57891: LD_ADDR_VAR 0 6
57895: PUSH
57896: LD_EXP 49
57900: PPUSH
57901: LD_VAR 0 1
57905: PPUSH
57906: CALL 7694 0 2
57910: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57911: LD_ADDR_VAR 0 5
57915: PUSH
57916: DOUBLE
57917: LD_EXP 50
57921: PUSH
57922: LD_VAR 0 6
57926: ARRAY
57927: INC
57928: ST_TO_ADDR
57929: LD_INT 1
57931: PUSH
57932: FOR_DOWNTO
57933: IFFALSE 58094
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57935: LD_EXP 50
57939: PUSH
57940: LD_VAR 0 6
57944: ARRAY
57945: PUSH
57946: LD_VAR 0 5
57950: ARRAY
57951: PUSH
57952: LD_INT 1
57954: ARRAY
57955: PUSH
57956: LD_VAR 0 2
57960: EQUAL
57961: PUSH
57962: LD_EXP 50
57966: PUSH
57967: LD_VAR 0 6
57971: ARRAY
57972: PUSH
57973: LD_VAR 0 5
57977: ARRAY
57978: PUSH
57979: LD_INT 2
57981: ARRAY
57982: PUSH
57983: LD_VAR 0 3
57987: EQUAL
57988: AND
57989: IFFALSE 58092
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57991: LD_EXP 50
57995: PUSH
57996: LD_VAR 0 6
58000: ARRAY
58001: PUSH
58002: LD_VAR 0 5
58006: ARRAY
58007: PUSH
58008: LD_INT 1
58010: ARRAY
58011: PPUSH
58012: LD_EXP 50
58016: PUSH
58017: LD_VAR 0 6
58021: ARRAY
58022: PUSH
58023: LD_VAR 0 5
58027: ARRAY
58028: PUSH
58029: LD_INT 2
58031: ARRAY
58032: PPUSH
58033: LD_VAR 0 1
58037: PPUSH
58038: CALL_OW 255
58042: PPUSH
58043: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58047: LD_ADDR_EXP 50
58051: PUSH
58052: LD_EXP 50
58056: PPUSH
58057: LD_VAR 0 6
58061: PPUSH
58062: LD_EXP 50
58066: PUSH
58067: LD_VAR 0 6
58071: ARRAY
58072: PPUSH
58073: LD_VAR 0 5
58077: PPUSH
58078: CALL_OW 3
58082: PPUSH
58083: CALL_OW 1
58087: ST_TO_ADDR
// exit ;
58088: POP
58089: POP
58090: GO 58283
// end ; end ;
58092: GO 57932
58094: POP
58095: POP
// for i := minerMinesList [ index ] downto 1 do
58096: LD_ADDR_VAR 0 5
58100: PUSH
58101: DOUBLE
58102: LD_EXP 50
58106: PUSH
58107: LD_VAR 0 6
58111: ARRAY
58112: INC
58113: ST_TO_ADDR
58114: LD_INT 1
58116: PUSH
58117: FOR_DOWNTO
58118: IFFALSE 58281
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58120: LD_EXP 50
58124: PUSH
58125: LD_VAR 0 6
58129: ARRAY
58130: PUSH
58131: LD_VAR 0 5
58135: ARRAY
58136: PUSH
58137: LD_INT 1
58139: ARRAY
58140: PPUSH
58141: LD_EXP 50
58145: PUSH
58146: LD_VAR 0 6
58150: ARRAY
58151: PUSH
58152: LD_VAR 0 5
58156: ARRAY
58157: PUSH
58158: LD_INT 2
58160: ARRAY
58161: PPUSH
58162: LD_VAR 0 2
58166: PPUSH
58167: LD_VAR 0 3
58171: PPUSH
58172: CALL_OW 298
58176: PUSH
58177: LD_INT 6
58179: LESS
58180: IFFALSE 58279
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58182: LD_EXP 50
58186: PUSH
58187: LD_VAR 0 6
58191: ARRAY
58192: PUSH
58193: LD_VAR 0 5
58197: ARRAY
58198: PUSH
58199: LD_INT 1
58201: ARRAY
58202: PPUSH
58203: LD_EXP 50
58207: PUSH
58208: LD_VAR 0 6
58212: ARRAY
58213: PUSH
58214: LD_VAR 0 5
58218: ARRAY
58219: PUSH
58220: LD_INT 2
58222: ARRAY
58223: PPUSH
58224: LD_VAR 0 1
58228: PPUSH
58229: CALL_OW 255
58233: PPUSH
58234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58238: LD_ADDR_EXP 50
58242: PUSH
58243: LD_EXP 50
58247: PPUSH
58248: LD_VAR 0 6
58252: PPUSH
58253: LD_EXP 50
58257: PUSH
58258: LD_VAR 0 6
58262: ARRAY
58263: PPUSH
58264: LD_VAR 0 5
58268: PPUSH
58269: CALL_OW 3
58273: PPUSH
58274: CALL_OW 1
58278: ST_TO_ADDR
// end ; end ;
58279: GO 58117
58281: POP
58282: POP
// end ;
58283: LD_VAR 0 4
58287: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58288: LD_INT 0
58290: PPUSH
58291: PPUSH
58292: PPUSH
58293: PPUSH
58294: PPUSH
58295: PPUSH
58296: PPUSH
58297: PPUSH
58298: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58299: LD_VAR 0 1
58303: PPUSH
58304: CALL_OW 264
58308: PUSH
58309: LD_INT 81
58311: EQUAL
58312: NOT
58313: PUSH
58314: LD_VAR 0 1
58318: PUSH
58319: LD_EXP 49
58323: IN
58324: NOT
58325: OR
58326: IFFALSE 58330
// exit ;
58328: GO 58652
// index := GetElementIndex ( minersList , unit ) ;
58330: LD_ADDR_VAR 0 6
58334: PUSH
58335: LD_EXP 49
58339: PPUSH
58340: LD_VAR 0 1
58344: PPUSH
58345: CALL 7694 0 2
58349: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58350: LD_ADDR_VAR 0 8
58354: PUSH
58355: LD_EXP 51
58359: PUSH
58360: LD_EXP 50
58364: PUSH
58365: LD_VAR 0 6
58369: ARRAY
58370: MINUS
58371: ST_TO_ADDR
// if not minesFreeAmount then
58372: LD_VAR 0 8
58376: NOT
58377: IFFALSE 58381
// exit ;
58379: GO 58652
// tmp := [ ] ;
58381: LD_ADDR_VAR 0 7
58385: PUSH
58386: EMPTY
58387: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58388: LD_ADDR_VAR 0 5
58392: PUSH
58393: DOUBLE
58394: LD_INT 1
58396: DEC
58397: ST_TO_ADDR
58398: LD_VAR 0 8
58402: PUSH
58403: FOR_TO
58404: IFFALSE 58599
// begin _d := rand ( 0 , 5 ) ;
58406: LD_ADDR_VAR 0 11
58410: PUSH
58411: LD_INT 0
58413: PPUSH
58414: LD_INT 5
58416: PPUSH
58417: CALL_OW 12
58421: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58422: LD_ADDR_VAR 0 12
58426: PUSH
58427: LD_INT 2
58429: PPUSH
58430: LD_INT 6
58432: PPUSH
58433: CALL_OW 12
58437: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58438: LD_ADDR_VAR 0 9
58442: PUSH
58443: LD_VAR 0 2
58447: PPUSH
58448: LD_VAR 0 11
58452: PPUSH
58453: LD_VAR 0 12
58457: PPUSH
58458: CALL_OW 272
58462: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58463: LD_ADDR_VAR 0 10
58467: PUSH
58468: LD_VAR 0 3
58472: PPUSH
58473: LD_VAR 0 11
58477: PPUSH
58478: LD_VAR 0 12
58482: PPUSH
58483: CALL_OW 273
58487: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58488: LD_VAR 0 9
58492: PPUSH
58493: LD_VAR 0 10
58497: PPUSH
58498: CALL_OW 488
58502: PUSH
58503: LD_VAR 0 9
58507: PUSH
58508: LD_VAR 0 10
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_VAR 0 7
58521: IN
58522: NOT
58523: AND
58524: PUSH
58525: LD_VAR 0 9
58529: PPUSH
58530: LD_VAR 0 10
58534: PPUSH
58535: CALL_OW 458
58539: NOT
58540: AND
58541: IFFALSE 58583
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58543: LD_ADDR_VAR 0 7
58547: PUSH
58548: LD_VAR 0 7
58552: PPUSH
58553: LD_VAR 0 7
58557: PUSH
58558: LD_INT 1
58560: PLUS
58561: PPUSH
58562: LD_VAR 0 9
58566: PUSH
58567: LD_VAR 0 10
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 1
58580: ST_TO_ADDR
58581: GO 58597
// i := i - 1 ;
58583: LD_ADDR_VAR 0 5
58587: PUSH
58588: LD_VAR 0 5
58592: PUSH
58593: LD_INT 1
58595: MINUS
58596: ST_TO_ADDR
// end ;
58597: GO 58403
58599: POP
58600: POP
// for i in tmp do
58601: LD_ADDR_VAR 0 5
58605: PUSH
58606: LD_VAR 0 7
58610: PUSH
58611: FOR_IN
58612: IFFALSE 58650
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58614: LD_VAR 0 1
58618: PPUSH
58619: LD_VAR 0 5
58623: PUSH
58624: LD_INT 1
58626: ARRAY
58627: PPUSH
58628: LD_VAR 0 5
58632: PUSH
58633: LD_INT 2
58635: ARRAY
58636: PPUSH
58637: CALL 57596 0 3
58641: NOT
58642: IFFALSE 58648
// exit ;
58644: POP
58645: POP
58646: GO 58652
58648: GO 58611
58650: POP
58651: POP
// end ;
58652: LD_VAR 0 4
58656: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58657: LD_INT 0
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
58663: PPUSH
58664: PPUSH
58665: PPUSH
58666: PPUSH
58667: PPUSH
// if GetClass ( unit ) <> class_sniper then
58668: LD_VAR 0 1
58672: PPUSH
58673: CALL_OW 257
58677: PUSH
58678: LD_INT 5
58680: NONEQUAL
58681: IFFALSE 58685
// exit ;
58683: GO 59151
// dist := 8 ;
58685: LD_ADDR_VAR 0 5
58689: PUSH
58690: LD_INT 8
58692: ST_TO_ADDR
// viewRange := 12 ;
58693: LD_ADDR_VAR 0 8
58697: PUSH
58698: LD_INT 12
58700: ST_TO_ADDR
// side := GetSide ( unit ) ;
58701: LD_ADDR_VAR 0 6
58705: PUSH
58706: LD_VAR 0 1
58710: PPUSH
58711: CALL_OW 255
58715: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58716: LD_INT 61
58718: PPUSH
58719: LD_VAR 0 6
58723: PPUSH
58724: CALL_OW 321
58728: PUSH
58729: LD_INT 2
58731: EQUAL
58732: IFFALSE 58742
// viewRange := 16 ;
58734: LD_ADDR_VAR 0 8
58738: PUSH
58739: LD_INT 16
58741: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58742: LD_VAR 0 1
58746: PPUSH
58747: LD_VAR 0 2
58751: PPUSH
58752: LD_VAR 0 3
58756: PPUSH
58757: CALL_OW 297
58761: PUSH
58762: LD_VAR 0 5
58766: GREATER
58767: IFFALSE 58846
// begin ComMoveXY ( unit , x , y ) ;
58769: LD_VAR 0 1
58773: PPUSH
58774: LD_VAR 0 2
58778: PPUSH
58779: LD_VAR 0 3
58783: PPUSH
58784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58788: LD_INT 35
58790: PPUSH
58791: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58795: LD_VAR 0 1
58799: PPUSH
58800: LD_VAR 0 2
58804: PPUSH
58805: LD_VAR 0 3
58809: PPUSH
58810: CALL 39455 0 3
58814: NOT
58815: IFFALSE 58819
// exit ;
58817: GO 59151
// until GetDistUnitXY ( unit , x , y ) < dist ;
58819: LD_VAR 0 1
58823: PPUSH
58824: LD_VAR 0 2
58828: PPUSH
58829: LD_VAR 0 3
58833: PPUSH
58834: CALL_OW 297
58838: PUSH
58839: LD_VAR 0 5
58843: LESS
58844: IFFALSE 58788
// end ; ComTurnXY ( unit , x , y ) ;
58846: LD_VAR 0 1
58850: PPUSH
58851: LD_VAR 0 2
58855: PPUSH
58856: LD_VAR 0 3
58860: PPUSH
58861: CALL_OW 118
// repeat if Multiplayer then
58865: LD_OWVAR 4
58869: IFFALSE 58880
// wait ( 35 ) else
58871: LD_INT 35
58873: PPUSH
58874: CALL_OW 67
58878: GO 58887
// wait ( 5 ) ;
58880: LD_INT 5
58882: PPUSH
58883: CALL_OW 67
// _d := GetDir ( unit ) ;
58887: LD_ADDR_VAR 0 11
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 254
58901: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58902: LD_ADDR_VAR 0 7
58906: PUSH
58907: LD_VAR 0 1
58911: PPUSH
58912: CALL_OW 250
58916: PPUSH
58917: LD_VAR 0 1
58921: PPUSH
58922: CALL_OW 251
58926: PPUSH
58927: LD_VAR 0 2
58931: PPUSH
58932: LD_VAR 0 3
58936: PPUSH
58937: CALL 42063 0 4
58941: ST_TO_ADDR
// until dir = _d ;
58942: LD_VAR 0 7
58946: PUSH
58947: LD_VAR 0 11
58951: EQUAL
58952: IFFALSE 58865
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58954: LD_ADDR_VAR 0 9
58958: PUSH
58959: LD_VAR 0 1
58963: PPUSH
58964: CALL_OW 250
58968: PPUSH
58969: LD_VAR 0 7
58973: PPUSH
58974: LD_VAR 0 5
58978: PPUSH
58979: CALL_OW 272
58983: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58984: LD_ADDR_VAR 0 10
58988: PUSH
58989: LD_VAR 0 1
58993: PPUSH
58994: CALL_OW 251
58998: PPUSH
58999: LD_VAR 0 7
59003: PPUSH
59004: LD_VAR 0 5
59008: PPUSH
59009: CALL_OW 273
59013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59014: LD_VAR 0 9
59018: PPUSH
59019: LD_VAR 0 10
59023: PPUSH
59024: CALL_OW 488
59028: NOT
59029: IFFALSE 59033
// exit ;
59031: GO 59151
// ComAnimCustom ( unit , 1 ) ;
59033: LD_VAR 0 1
59037: PPUSH
59038: LD_INT 1
59040: PPUSH
59041: CALL_OW 592
// p := 0 ;
59045: LD_ADDR_VAR 0 12
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59053: LD_VAR 0 9
59057: PPUSH
59058: LD_VAR 0 10
59062: PPUSH
59063: LD_VAR 0 6
59067: PPUSH
59068: LD_VAR 0 8
59072: PPUSH
59073: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59077: LD_INT 35
59079: PPUSH
59080: CALL_OW 67
// p := Inc ( p ) ;
59084: LD_ADDR_VAR 0 12
59088: PUSH
59089: LD_VAR 0 12
59093: PPUSH
59094: CALL 42019 0 1
59098: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59099: LD_VAR 0 12
59103: PUSH
59104: LD_INT 3
59106: EQUAL
59107: PUSH
59108: LD_VAR 0 1
59112: PPUSH
59113: CALL_OW 302
59117: NOT
59118: OR
59119: PUSH
59120: LD_VAR 0 1
59124: PPUSH
59125: CALL_OW 301
59129: OR
59130: IFFALSE 59077
// RemoveSeeing ( _x , _y , side ) ;
59132: LD_VAR 0 9
59136: PPUSH
59137: LD_VAR 0 10
59141: PPUSH
59142: LD_VAR 0 6
59146: PPUSH
59147: CALL_OW 331
// end ; end_of_file
59151: LD_VAR 0 4
59155: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59156: PPOPN 6
59158: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59159: CALL 59188 0 0
// end ; end_of_file
59163: PPOPN 1
59165: END
// every 0 0$1 do
59166: GO 59168
59168: DISABLE
// begin enable ;
59169: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59170: LD_STRING updateTimer(
59172: PUSH
59173: LD_OWVAR 1
59177: STR
59178: PUSH
59179: LD_STRING );
59181: STR
59182: PPUSH
59183: CALL_OW 559
// end ;
59187: END
// export function SOS_MapStart ( ) ; begin
59188: LD_INT 0
59190: PPUSH
// UpdateFactoryWaypoints ( ) ;
59191: CALL 59560 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59195: CALL 59812 0 0
// end ;
59199: LD_VAR 0 1
59203: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59204: LD_INT 0
59206: PPUSH
// end ;
59207: LD_VAR 0 12
59211: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59212: LD_INT 0
59214: PPUSH
59215: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59216: LD_VAR 0 1
59220: NOT
59221: PUSH
59222: LD_VAR 0 2
59226: PPUSH
59227: LD_VAR 0 3
59231: PPUSH
59232: CALL_OW 488
59236: NOT
59237: OR
59238: PUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 266
59248: PUSH
59249: LD_INT 3
59251: NONEQUAL
59252: PUSH
59253: LD_VAR 0 1
59257: PPUSH
59258: CALL_OW 247
59262: PUSH
59263: LD_INT 1
59265: EQUAL
59266: NOT
59267: AND
59268: OR
59269: IFFALSE 59273
// exit ;
59271: GO 59555
// if GetType ( factory ) = unit_human then
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL_OW 247
59282: PUSH
59283: LD_INT 1
59285: EQUAL
59286: IFFALSE 59303
// factory := IsInUnit ( factory ) ;
59288: LD_ADDR_VAR 0 1
59292: PUSH
59293: LD_VAR 0 1
59297: PPUSH
59298: CALL_OW 310
59302: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59303: LD_VAR 0 1
59307: PPUSH
59308: CALL_OW 266
59312: PUSH
59313: LD_INT 3
59315: NONEQUAL
59316: IFFALSE 59320
// exit ;
59318: GO 59555
// for i := 1 to Count ( factoryWaypoints ) do
59320: LD_ADDR_VAR 0 5
59324: PUSH
59325: DOUBLE
59326: LD_INT 1
59328: DEC
59329: ST_TO_ADDR
59330: LD_EXP 52
59334: PPUSH
59335: CALL 5049 0 1
59339: PUSH
59340: FOR_TO
59341: IFFALSE 59503
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: CALL_OW 428
59357: PUSH
59358: LD_EXP 52
59362: PUSH
59363: LD_VAR 0 5
59367: ARRAY
59368: PUSH
59369: LD_INT 2
59371: ARRAY
59372: EQUAL
59373: IFFALSE 59405
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59375: LD_ADDR_EXP 52
59379: PUSH
59380: LD_EXP 52
59384: PPUSH
59385: LD_VAR 0 5
59389: PPUSH
59390: CALL_OW 3
59394: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59395: CALL 59560 0 0
// exit ;
59399: POP
59400: POP
59401: GO 59555
// end else
59403: GO 59501
// if factory = factoryWaypoints [ i ] [ 2 ] then
59405: LD_VAR 0 1
59409: PUSH
59410: LD_EXP 52
59414: PUSH
59415: LD_VAR 0 5
59419: ARRAY
59420: PUSH
59421: LD_INT 2
59423: ARRAY
59424: EQUAL
59425: IFFALSE 59501
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59427: LD_ADDR_EXP 52
59431: PUSH
59432: LD_EXP 52
59436: PPUSH
59437: LD_VAR 0 5
59441: PPUSH
59442: CALL_OW 3
59446: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59447: LD_ADDR_EXP 52
59451: PUSH
59452: LD_EXP 52
59456: PPUSH
59457: LD_VAR 0 1
59461: PPUSH
59462: CALL_OW 255
59466: PUSH
59467: LD_VAR 0 1
59471: PUSH
59472: LD_VAR 0 2
59476: PUSH
59477: LD_VAR 0 3
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: PPUSH
59488: CALL 40658 0 2
59492: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59493: CALL 59560 0 0
// exit ;
59497: POP
59498: POP
59499: GO 59555
// end ; end ;
59501: GO 59340
59503: POP
59504: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59505: LD_ADDR_EXP 52
59509: PUSH
59510: LD_EXP 52
59514: PPUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: CALL_OW 255
59524: PUSH
59525: LD_VAR 0 1
59529: PUSH
59530: LD_VAR 0 2
59534: PUSH
59535: LD_VAR 0 3
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: PPUSH
59546: CALL 40658 0 2
59550: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59551: CALL 59560 0 0
// end ;
59555: LD_VAR 0 4
59559: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59560: LD_INT 0
59562: PPUSH
59563: PPUSH
59564: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59565: LD_STRING resetFactoryWaypoint();
59567: PPUSH
59568: CALL_OW 559
// if factoryWaypoints then
59572: LD_EXP 52
59576: IFFALSE 59697
// begin list := factoryWaypoints ;
59578: LD_ADDR_VAR 0 3
59582: PUSH
59583: LD_EXP 52
59587: ST_TO_ADDR
// for i := 1 to list do
59588: LD_ADDR_VAR 0 2
59592: PUSH
59593: DOUBLE
59594: LD_INT 1
59596: DEC
59597: ST_TO_ADDR
59598: LD_VAR 0 3
59602: PUSH
59603: FOR_TO
59604: IFFALSE 59695
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59606: LD_STRING setFactoryWaypointXY(
59608: PUSH
59609: LD_VAR 0 3
59613: PUSH
59614: LD_VAR 0 2
59618: ARRAY
59619: PUSH
59620: LD_INT 1
59622: ARRAY
59623: STR
59624: PUSH
59625: LD_STRING ,
59627: STR
59628: PUSH
59629: LD_VAR 0 3
59633: PUSH
59634: LD_VAR 0 2
59638: ARRAY
59639: PUSH
59640: LD_INT 2
59642: ARRAY
59643: STR
59644: PUSH
59645: LD_STRING ,
59647: STR
59648: PUSH
59649: LD_VAR 0 3
59653: PUSH
59654: LD_VAR 0 2
59658: ARRAY
59659: PUSH
59660: LD_INT 3
59662: ARRAY
59663: STR
59664: PUSH
59665: LD_STRING ,
59667: STR
59668: PUSH
59669: LD_VAR 0 3
59673: PUSH
59674: LD_VAR 0 2
59678: ARRAY
59679: PUSH
59680: LD_INT 4
59682: ARRAY
59683: STR
59684: PUSH
59685: LD_STRING )
59687: STR
59688: PPUSH
59689: CALL_OW 559
59693: GO 59603
59695: POP
59696: POP
// end ; end ;
59697: LD_VAR 0 1
59701: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59702: LD_INT 0
59704: PPUSH
// if HexInfo ( x , y ) = warehouse then
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: CALL_OW 428
59719: PUSH
59720: LD_VAR 0 1
59724: EQUAL
59725: IFFALSE 59752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59727: LD_ADDR_EXP 53
59731: PUSH
59732: LD_EXP 53
59736: PPUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_INT 0
59744: PPUSH
59745: CALL_OW 1
59749: ST_TO_ADDR
59750: GO 59803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59752: LD_ADDR_EXP 53
59756: PUSH
59757: LD_EXP 53
59761: PPUSH
59762: LD_VAR 0 1
59766: PPUSH
59767: LD_VAR 0 1
59771: PPUSH
59772: CALL_OW 255
59776: PUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_VAR 0 2
59786: PUSH
59787: LD_VAR 0 3
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: PPUSH
59798: CALL_OW 1
59802: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59803: CALL 59812 0 0
// end ;
59807: LD_VAR 0 4
59811: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59812: LD_INT 0
59814: PPUSH
59815: PPUSH
59816: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59817: LD_STRING resetWarehouseGatheringPoints();
59819: PPUSH
59820: CALL_OW 559
// if warehouseGatheringPoints then
59824: LD_EXP 53
59828: IFFALSE 59954
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59830: LD_ADDR_VAR 0 3
59834: PUSH
59835: LD_EXP 53
59839: PPUSH
59840: CALL 44420 0 1
59844: ST_TO_ADDR
// for i := 1 to list do
59845: LD_ADDR_VAR 0 2
59849: PUSH
59850: DOUBLE
59851: LD_INT 1
59853: DEC
59854: ST_TO_ADDR
59855: LD_VAR 0 3
59859: PUSH
59860: FOR_TO
59861: IFFALSE 59952
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59863: LD_STRING setWarehouseGatheringPointXY(
59865: PUSH
59866: LD_VAR 0 3
59870: PUSH
59871: LD_VAR 0 2
59875: ARRAY
59876: PUSH
59877: LD_INT 1
59879: ARRAY
59880: STR
59881: PUSH
59882: LD_STRING ,
59884: STR
59885: PUSH
59886: LD_VAR 0 3
59890: PUSH
59891: LD_VAR 0 2
59895: ARRAY
59896: PUSH
59897: LD_INT 2
59899: ARRAY
59900: STR
59901: PUSH
59902: LD_STRING ,
59904: STR
59905: PUSH
59906: LD_VAR 0 3
59910: PUSH
59911: LD_VAR 0 2
59915: ARRAY
59916: PUSH
59917: LD_INT 3
59919: ARRAY
59920: STR
59921: PUSH
59922: LD_STRING ,
59924: STR
59925: PUSH
59926: LD_VAR 0 3
59930: PUSH
59931: LD_VAR 0 2
59935: ARRAY
59936: PUSH
59937: LD_INT 4
59939: ARRAY
59940: STR
59941: PUSH
59942: LD_STRING )
59944: STR
59945: PPUSH
59946: CALL_OW 559
59950: GO 59860
59952: POP
59953: POP
// end ; end ;
59954: LD_VAR 0 1
59958: RET
