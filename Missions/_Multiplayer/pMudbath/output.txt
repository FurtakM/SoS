// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45721 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46036 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 20
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 23
 900: PUSH
 901: LD_INT 18
 903: PUSH
 904: LD_INT 19
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 24
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 1 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 26
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45176 0 2
1411: PUSH
1412: LD_INT 27
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45176 0 2
1422: PUSH
1423: LD_INT 28
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45176 0 2
1433: PUSH
1434: LD_INT 29
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45176 0 2
1444: PUSH
1445: LD_INT 30
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL 45176 0 2
1455: PUSH
1456: LD_INT 31
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL 45176 0 2
1466: PUSH
1467: LD_INT 32
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL 45176 0 2
1477: PUSH
1478: LD_INT 33
1480: PPUSH
1481: LD_INT 5
1483: PPUSH
1484: CALL 45176 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5028 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 34
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45009 0 2
1667: PUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45009 0 2
1680: PUSH
1681: LD_INT 36
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45009 0 2
1693: PUSH
1694: LD_INT 37
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45009 0 2
1706: PUSH
1707: LD_INT 38
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45009 0 2
1719: PUSH
1720: LD_INT 39
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45009 0 2
1732: PUSH
1733: LD_INT 40
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45009 0 2
1745: PUSH
1746: LD_INT 41
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45009 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 42
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45009 0 2
1810: PUSH
1811: LD_INT 43
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45009 0 2
1823: PUSH
1824: LD_INT 44
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45009 0 2
1836: PUSH
1837: LD_INT 45
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45009 0 2
1849: PUSH
1850: LD_INT 46
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45009 0 2
1862: PUSH
1863: LD_INT 47
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45009 0 2
1875: PUSH
1876: LD_INT 48
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45009 0 2
1888: PUSH
1889: LD_INT 49
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45009 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 50
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45176 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45176 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 66
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45176 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 52
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 45176 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 53
2017: PPUSH
2018: LD_INT 5
2020: PPUSH
2021: CALL 45176 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 67
2032: PPUSH
2033: LD_INT 5
2035: PPUSH
2036: CALL 45176 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 54
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45176 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 55
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45176 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 68
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45176 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 56
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45176 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 57
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45176 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 69
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45176 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 58
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL 45176 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 59
2167: PPUSH
2168: LD_INT 5
2170: PPUSH
2171: CALL 45176 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 70
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL 45176 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 60
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: CALL 45176 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 61
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL 45176 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 71
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 45176 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 62
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45176 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 63
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL 45176 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 72
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL 45176 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 64
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL 45176 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 65
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL 45176 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 73
2332: PPUSH
2333: LD_INT 2
2335: PPUSH
2336: CALL 45176 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 20
2569: PUSH
2570: LD_INT 21
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 23
2578: PUSH
2579: LD_INT 18
2581: PUSH
2582: LD_INT 19
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 41998 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 53851 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 50558 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 53868 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 51161 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 53909 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 51214 0 3
2923: PPOPN 3
2925: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// if exist_mode then
2930: LD_VAR 0 2
2934: IFFALSE 2959
// unit := CreateCharacter ( prefix & ident ) else
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: STR
2951: PPUSH
2952: CALL_OW 34
2956: ST_TO_ADDR
2957: GO 2974
// unit := NewCharacter ( ident ) ;
2959: LD_ADDR_VAR 0 5
2963: PUSH
2964: LD_VAR 0 1
2968: PPUSH
2969: CALL_OW 25
2973: ST_TO_ADDR
// result := unit ;
2974: LD_ADDR_VAR 0 4
2978: PUSH
2979: LD_VAR 0 5
2983: ST_TO_ADDR
// end ;
2984: LD_VAR 0 4
2988: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2989: LD_INT 0
2991: PPUSH
2992: PPUSH
// if not side or not nation then
2993: LD_VAR 0 1
2997: NOT
2998: PUSH
2999: LD_VAR 0 2
3003: NOT
3004: OR
3005: IFFALSE 3009
// exit ;
3007: GO 3777
// case nation of nation_american :
3009: LD_VAR 0 2
3013: PUSH
3014: LD_INT 1
3016: DOUBLE
3017: EQUAL
3018: IFTRUE 3022
3020: GO 3236
3022: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: LD_INT 35
3030: PUSH
3031: LD_INT 45
3033: PUSH
3034: LD_INT 46
3036: PUSH
3037: LD_INT 47
3039: PUSH
3040: LD_INT 82
3042: PUSH
3043: LD_INT 83
3045: PUSH
3046: LD_INT 84
3048: PUSH
3049: LD_INT 85
3051: PUSH
3052: LD_INT 86
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: LD_INT 6
3063: PUSH
3064: LD_INT 15
3066: PUSH
3067: LD_INT 16
3069: PUSH
3070: LD_INT 7
3072: PUSH
3073: LD_INT 12
3075: PUSH
3076: LD_INT 13
3078: PUSH
3079: LD_INT 10
3081: PUSH
3082: LD_INT 14
3084: PUSH
3085: LD_INT 20
3087: PUSH
3088: LD_INT 21
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 25
3096: PUSH
3097: LD_INT 32
3099: PUSH
3100: LD_INT 27
3102: PUSH
3103: LD_INT 36
3105: PUSH
3106: LD_INT 69
3108: PUSH
3109: LD_INT 39
3111: PUSH
3112: LD_INT 34
3114: PUSH
3115: LD_INT 40
3117: PUSH
3118: LD_INT 48
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 50
3126: PUSH
3127: LD_INT 51
3129: PUSH
3130: LD_INT 52
3132: PUSH
3133: LD_INT 53
3135: PUSH
3136: LD_INT 54
3138: PUSH
3139: LD_INT 55
3141: PUSH
3142: LD_INT 56
3144: PUSH
3145: LD_INT 57
3147: PUSH
3148: LD_INT 58
3150: PUSH
3151: LD_INT 59
3153: PUSH
3154: LD_INT 60
3156: PUSH
3157: LD_INT 61
3159: PUSH
3160: LD_INT 62
3162: PUSH
3163: LD_INT 80
3165: PUSH
3166: LD_INT 82
3168: PUSH
3169: LD_INT 83
3171: PUSH
3172: LD_INT 84
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 86
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: ST_TO_ADDR
3234: GO 3701
3236: LD_INT 2
3238: DOUBLE
3239: EQUAL
3240: IFTRUE 3244
3242: GO 3470
3244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_INT 35
3252: PUSH
3253: LD_INT 45
3255: PUSH
3256: LD_INT 46
3258: PUSH
3259: LD_INT 47
3261: PUSH
3262: LD_INT 82
3264: PUSH
3265: LD_INT 83
3267: PUSH
3268: LD_INT 84
3270: PUSH
3271: LD_INT 85
3273: PUSH
3274: LD_INT 87
3276: PUSH
3277: LD_INT 70
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 11
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: LD_INT 15
3300: PUSH
3301: LD_INT 18
3303: PUSH
3304: LD_INT 7
3306: PUSH
3307: LD_INT 17
3309: PUSH
3310: LD_INT 8
3312: PUSH
3313: LD_INT 20
3315: PUSH
3316: LD_INT 21
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 72
3324: PUSH
3325: LD_INT 26
3327: PUSH
3328: LD_INT 69
3330: PUSH
3331: LD_INT 39
3333: PUSH
3334: LD_INT 40
3336: PUSH
3337: LD_INT 41
3339: PUSH
3340: LD_INT 42
3342: PUSH
3343: LD_INT 43
3345: PUSH
3346: LD_INT 48
3348: PUSH
3349: LD_INT 49
3351: PUSH
3352: LD_INT 50
3354: PUSH
3355: LD_INT 51
3357: PUSH
3358: LD_INT 52
3360: PUSH
3361: LD_INT 53
3363: PUSH
3364: LD_INT 54
3366: PUSH
3367: LD_INT 55
3369: PUSH
3370: LD_INT 56
3372: PUSH
3373: LD_INT 60
3375: PUSH
3376: LD_INT 61
3378: PUSH
3379: LD_INT 62
3381: PUSH
3382: LD_INT 66
3384: PUSH
3385: LD_INT 67
3387: PUSH
3388: LD_INT 68
3390: PUSH
3391: LD_INT 81
3393: PUSH
3394: LD_INT 82
3396: PUSH
3397: LD_INT 83
3399: PUSH
3400: LD_INT 84
3402: PUSH
3403: LD_INT 85
3405: PUSH
3406: LD_INT 87
3408: PUSH
3409: LD_INT 88
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
3468: GO 3701
3470: LD_INT 3
3472: DOUBLE
3473: EQUAL
3474: IFTRUE 3478
3476: GO 3700
3478: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: LD_INT 46
3486: PUSH
3487: LD_INT 47
3489: PUSH
3490: LD_INT 1
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: LD_INT 82
3498: PUSH
3499: LD_INT 83
3501: PUSH
3502: LD_INT 84
3504: PUSH
3505: LD_INT 85
3507: PUSH
3508: LD_INT 86
3510: PUSH
3511: LD_INT 11
3513: PUSH
3514: LD_INT 9
3516: PUSH
3517: LD_INT 20
3519: PUSH
3520: LD_INT 19
3522: PUSH
3523: LD_INT 21
3525: PUSH
3526: LD_INT 24
3528: PUSH
3529: LD_INT 22
3531: PUSH
3532: LD_INT 25
3534: PUSH
3535: LD_INT 28
3537: PUSH
3538: LD_INT 29
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 31
3546: PUSH
3547: LD_INT 37
3549: PUSH
3550: LD_INT 38
3552: PUSH
3553: LD_INT 32
3555: PUSH
3556: LD_INT 27
3558: PUSH
3559: LD_INT 33
3561: PUSH
3562: LD_INT 69
3564: PUSH
3565: LD_INT 39
3567: PUSH
3568: LD_INT 34
3570: PUSH
3571: LD_INT 40
3573: PUSH
3574: LD_INT 71
3576: PUSH
3577: LD_INT 23
3579: PUSH
3580: LD_INT 44
3582: PUSH
3583: LD_INT 48
3585: PUSH
3586: LD_INT 49
3588: PUSH
3589: LD_INT 50
3591: PUSH
3592: LD_INT 51
3594: PUSH
3595: LD_INT 52
3597: PUSH
3598: LD_INT 53
3600: PUSH
3601: LD_INT 54
3603: PUSH
3604: LD_INT 55
3606: PUSH
3607: LD_INT 56
3609: PUSH
3610: LD_INT 57
3612: PUSH
3613: LD_INT 58
3615: PUSH
3616: LD_INT 59
3618: PUSH
3619: LD_INT 63
3621: PUSH
3622: LD_INT 64
3624: PUSH
3625: LD_INT 65
3627: PUSH
3628: LD_INT 82
3630: PUSH
3631: LD_INT 83
3633: PUSH
3634: LD_INT 84
3636: PUSH
3637: LD_INT 85
3639: PUSH
3640: LD_INT 86
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: ST_TO_ADDR
3698: GO 3701
3700: POP
// if state > - 1 and state < 3 then
3701: LD_VAR 0 3
3705: PUSH
3706: LD_INT 1
3708: NEG
3709: GREATER
3710: PUSH
3711: LD_VAR 0 3
3715: PUSH
3716: LD_INT 3
3718: LESS
3719: AND
3720: IFFALSE 3777
// for i in result do
3722: LD_ADDR_VAR 0 5
3726: PUSH
3727: LD_VAR 0 4
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3775
// if GetTech ( i , side ) <> state then
3735: LD_VAR 0 5
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 321
3749: PUSH
3750: LD_VAR 0 3
3754: NONEQUAL
3755: IFFALSE 3773
// result := result diff i ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_VAR 0 4
3766: PUSH
3767: LD_VAR 0 5
3771: DIFF
3772: ST_TO_ADDR
3773: GO 3732
3775: POP
3776: POP
// end ;
3777: LD_VAR 0 4
3781: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// result := true ;
3787: LD_ADDR_VAR 0 3
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3795: LD_ADDR_VAR 0 5
3799: PUSH
3800: LD_VAR 0 2
3804: PPUSH
3805: CALL_OW 480
3809: ST_TO_ADDR
// if not tmp then
3810: LD_VAR 0 5
3814: NOT
3815: IFFALSE 3819
// exit ;
3817: GO 3868
// for i in tmp do
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_VAR 0 5
3828: PUSH
3829: FOR_IN
3830: IFFALSE 3866
// if GetTech ( i , side ) <> state_researched then
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_VAR 0 1
3841: PPUSH
3842: CALL_OW 321
3846: PUSH
3847: LD_INT 2
3849: NONEQUAL
3850: IFFALSE 3864
// begin result := false ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_INT 0
3859: ST_TO_ADDR
// exit ;
3860: POP
3861: POP
3862: GO 3868
// end ;
3864: GO 3829
3866: POP
3867: POP
// end ;
3868: LD_VAR 0 3
3872: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3873: LD_INT 0
3875: PPUSH
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
3887: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3888: LD_VAR 0 1
3892: NOT
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 9
3906: NONEQUAL
3907: OR
3908: IFFALSE 3912
// exit ;
3910: GO 4485
// side := GetSide ( unit ) ;
3912: LD_ADDR_VAR 0 9
3916: PUSH
3917: LD_VAR 0 1
3921: PPUSH
3922: CALL_OW 255
3926: ST_TO_ADDR
// tech_space := tech_spacanom ;
3927: LD_ADDR_VAR 0 12
3931: PUSH
3932: LD_INT 29
3934: ST_TO_ADDR
// tech_time := tech_taurad ;
3935: LD_ADDR_VAR 0 13
3939: PUSH
3940: LD_INT 28
3942: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3943: LD_ADDR_VAR 0 11
3947: PUSH
3948: LD_VAR 0 1
3952: PPUSH
3953: CALL_OW 310
3957: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3958: LD_VAR 0 11
3962: PPUSH
3963: CALL_OW 247
3967: PUSH
3968: LD_INT 2
3970: EQUAL
3971: IFFALSE 3975
// exit ;
3973: GO 4485
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3975: LD_ADDR_VAR 0 8
3979: PUSH
3980: LD_INT 81
3982: PUSH
3983: LD_VAR 0 9
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 3
3994: PUSH
3995: LD_INT 21
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: ST_TO_ADDR
// if not tmp then
4018: LD_VAR 0 8
4022: NOT
4023: IFFALSE 4027
// exit ;
4025: GO 4485
// if in_unit then
4027: LD_VAR 0 11
4031: IFFALSE 4055
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4033: LD_ADDR_VAR 0 10
4037: PUSH
4038: LD_VAR 0 8
4042: PPUSH
4043: LD_VAR 0 11
4047: PPUSH
4048: CALL_OW 74
4052: ST_TO_ADDR
4053: GO 4075
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4055: LD_ADDR_VAR 0 10
4059: PUSH
4060: LD_VAR 0 8
4064: PPUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: CALL_OW 74
4074: ST_TO_ADDR
// if not enemy then
4075: LD_VAR 0 10
4079: NOT
4080: IFFALSE 4084
// exit ;
4082: GO 4485
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4084: LD_VAR 0 11
4088: PUSH
4089: LD_VAR 0 11
4093: PPUSH
4094: LD_VAR 0 10
4098: PPUSH
4099: CALL_OW 296
4103: PUSH
4104: LD_INT 13
4106: GREATER
4107: AND
4108: PUSH
4109: LD_VAR 0 1
4113: PPUSH
4114: LD_VAR 0 10
4118: PPUSH
4119: CALL_OW 296
4123: PUSH
4124: LD_INT 12
4126: GREATER
4127: OR
4128: IFFALSE 4132
// exit ;
4130: GO 4485
// missile := [ 1 ] ;
4132: LD_ADDR_VAR 0 14
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4143: LD_VAR 0 9
4147: PPUSH
4148: LD_VAR 0 12
4152: PPUSH
4153: CALL_OW 325
4157: IFFALSE 4186
// missile := Replace ( missile , missile + 1 , 2 ) ;
4159: LD_ADDR_VAR 0 14
4163: PUSH
4164: LD_VAR 0 14
4168: PPUSH
4169: LD_VAR 0 14
4173: PUSH
4174: LD_INT 1
4176: PLUS
4177: PPUSH
4178: LD_INT 2
4180: PPUSH
4181: CALL_OW 1
4185: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4186: LD_VAR 0 9
4190: PPUSH
4191: LD_VAR 0 13
4195: PPUSH
4196: CALL_OW 325
4200: PUSH
4201: LD_VAR 0 10
4205: PPUSH
4206: CALL_OW 255
4210: PPUSH
4211: LD_VAR 0 13
4215: PPUSH
4216: CALL_OW 325
4220: NOT
4221: AND
4222: IFFALSE 4251
// missile := Replace ( missile , missile + 1 , 3 ) ;
4224: LD_ADDR_VAR 0 14
4228: PUSH
4229: LD_VAR 0 14
4233: PPUSH
4234: LD_VAR 0 14
4238: PUSH
4239: LD_INT 1
4241: PLUS
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 1
4250: ST_TO_ADDR
// if missile < 2 then
4251: LD_VAR 0 14
4255: PUSH
4256: LD_INT 2
4258: LESS
4259: IFFALSE 4263
// exit ;
4261: GO 4485
// x := GetX ( enemy ) ;
4263: LD_ADDR_VAR 0 4
4267: PUSH
4268: LD_VAR 0 10
4272: PPUSH
4273: CALL_OW 250
4277: ST_TO_ADDR
// y := GetY ( enemy ) ;
4278: LD_ADDR_VAR 0 5
4282: PUSH
4283: LD_VAR 0 10
4287: PPUSH
4288: CALL_OW 251
4292: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4293: LD_ADDR_VAR 0 6
4297: PUSH
4298: LD_VAR 0 4
4302: PUSH
4303: LD_INT 1
4305: NEG
4306: PPUSH
4307: LD_INT 1
4309: PPUSH
4310: CALL_OW 12
4314: PLUS
4315: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4316: LD_ADDR_VAR 0 7
4320: PUSH
4321: LD_VAR 0 5
4325: PUSH
4326: LD_INT 1
4328: NEG
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 12
4337: PLUS
4338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4339: LD_VAR 0 6
4343: PPUSH
4344: LD_VAR 0 7
4348: PPUSH
4349: CALL_OW 488
4353: NOT
4354: IFFALSE 4376
// begin _x := x ;
4356: LD_ADDR_VAR 0 6
4360: PUSH
4361: LD_VAR 0 4
4365: ST_TO_ADDR
// _y := y ;
4366: LD_ADDR_VAR 0 7
4370: PUSH
4371: LD_VAR 0 5
4375: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_INT 1
4383: PPUSH
4384: LD_VAR 0 14
4388: PPUSH
4389: CALL_OW 12
4393: ST_TO_ADDR
// case i of 1 :
4394: LD_VAR 0 3
4398: PUSH
4399: LD_INT 1
4401: DOUBLE
4402: EQUAL
4403: IFTRUE 4407
4405: GO 4424
4407: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_VAR 0 10
4417: PPUSH
4418: CALL_OW 115
4422: GO 4485
4424: LD_INT 2
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4454
4432: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_VAR 0 6
4442: PPUSH
4443: LD_VAR 0 7
4447: PPUSH
4448: CALL_OW 153
4452: GO 4485
4454: LD_INT 3
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4484
4462: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4463: LD_VAR 0 1
4467: PPUSH
4468: LD_VAR 0 6
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: CALL_OW 154
4482: GO 4485
4484: POP
// end ;
4485: LD_VAR 0 2
4489: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4490: LD_INT 0
4492: PPUSH
4493: PPUSH
4494: PPUSH
4495: PPUSH
4496: PPUSH
4497: PPUSH
// if not unit or not building then
4498: LD_VAR 0 1
4502: NOT
4503: PUSH
4504: LD_VAR 0 2
4508: NOT
4509: OR
4510: IFFALSE 4514
// exit ;
4512: GO 4672
// x := GetX ( building ) ;
4514: LD_ADDR_VAR 0 5
4518: PUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 250
4528: ST_TO_ADDR
// y := GetY ( building ) ;
4529: LD_ADDR_VAR 0 6
4533: PUSH
4534: LD_VAR 0 2
4538: PPUSH
4539: CALL_OW 251
4543: ST_TO_ADDR
// for i = 0 to 5 do
4544: LD_ADDR_VAR 0 4
4548: PUSH
4549: DOUBLE
4550: LD_INT 0
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 5
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4670
// begin _x := ShiftX ( x , i , 3 ) ;
4560: LD_ADDR_VAR 0 7
4564: PUSH
4565: LD_VAR 0 5
4569: PPUSH
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 272
4582: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4583: LD_ADDR_VAR 0 8
4587: PUSH
4588: LD_VAR 0 6
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_INT 3
4600: PPUSH
4601: CALL_OW 273
4605: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4606: LD_VAR 0 7
4610: PPUSH
4611: LD_VAR 0 8
4615: PPUSH
4616: CALL_OW 488
4620: NOT
4621: IFFALSE 4625
// continue ;
4623: GO 4557
// if HexInfo ( _x , _y ) = 0 then
4625: LD_VAR 0 7
4629: PPUSH
4630: LD_VAR 0 8
4634: PPUSH
4635: CALL_OW 428
4639: PUSH
4640: LD_INT 0
4642: EQUAL
4643: IFFALSE 4668
// begin ComMoveXY ( unit , _x , _y ) ;
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_VAR 0 7
4654: PPUSH
4655: LD_VAR 0 8
4659: PPUSH
4660: CALL_OW 111
// exit ;
4664: POP
4665: POP
4666: GO 4672
// end ; end ;
4668: GO 4557
4670: POP
4671: POP
// end ;
4672: LD_VAR 0 3
4676: RET
// export function ScanBase ( side , base_area ) ; begin
4677: LD_INT 0
4679: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: LD_VAR 0 2
4689: PPUSH
4690: LD_INT 81
4692: PUSH
4693: LD_VAR 0 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: ST_TO_ADDR
// end ;
4707: LD_VAR 0 3
4711: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
// result := false ;
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// side := GetSide ( unit ) ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL_OW 255
4740: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4741: LD_ADDR_VAR 0 4
4745: PUSH
4746: LD_VAR 0 1
4750: PPUSH
4751: CALL_OW 248
4755: ST_TO_ADDR
// case nat of 1 :
4756: LD_VAR 0 4
4760: PUSH
4761: LD_INT 1
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4780
4769: POP
// tech := tech_lassight ; 2 :
4770: LD_ADDR_VAR 0 5
4774: PUSH
4775: LD_INT 12
4777: ST_TO_ADDR
4778: GO 4819
4780: LD_INT 2
4782: DOUBLE
4783: EQUAL
4784: IFTRUE 4788
4786: GO 4799
4788: POP
// tech := tech_mortar ; 3 :
4789: LD_ADDR_VAR 0 5
4793: PUSH
4794: LD_INT 41
4796: ST_TO_ADDR
4797: GO 4819
4799: LD_INT 3
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 4818
4807: POP
// tech := tech_bazooka ; end ;
4808: LD_ADDR_VAR 0 5
4812: PUSH
4813: LD_INT 44
4815: ST_TO_ADDR
4816: GO 4819
4818: POP
// if Researched ( side , tech ) then
4819: LD_VAR 0 3
4823: PPUSH
4824: LD_VAR 0 5
4828: PPUSH
4829: CALL_OW 325
4833: IFFALSE 4860
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: LD_INT 5
4842: PUSH
4843: LD_INT 8
4845: PUSH
4846: LD_INT 9
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: LD_VAR 0 4
4858: ARRAY
4859: ST_TO_ADDR
// end ;
4860: LD_VAR 0 2
4864: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4865: LD_INT 0
4867: PPUSH
4868: PPUSH
4869: PPUSH
// if not mines then
4870: LD_VAR 0 2
4874: NOT
4875: IFFALSE 4879
// exit ;
4877: GO 5023
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4879: LD_ADDR_VAR 0 5
4883: PUSH
4884: LD_INT 81
4886: PUSH
4887: LD_VAR 0 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: ST_TO_ADDR
// for i in mines do
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 2
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5021
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4935: LD_VAR 0 4
4939: PUSH
4940: LD_INT 1
4942: ARRAY
4943: PPUSH
4944: LD_VAR 0 4
4948: PUSH
4949: LD_INT 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 458
4957: NOT
4958: IFFALSE 4962
// continue ;
4960: GO 4932
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4962: LD_VAR 0 4
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: LD_VAR 0 4
4975: PUSH
4976: LD_INT 2
4978: ARRAY
4979: PPUSH
4980: CALL_OW 428
4984: PUSH
4985: LD_VAR 0 5
4989: IN
4990: IFFALSE 5019
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4992: LD_VAR 0 4
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_VAR 0 4
5005: PUSH
5006: LD_INT 2
5008: ARRAY
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 456
// end ;
5019: GO 4932
5021: POP
5022: POP
// end ;
5023: LD_VAR 0 3
5027: RET
// export function Count ( array ) ; begin
5028: LD_INT 0
5030: PPUSH
// result := array + 0 ;
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_VAR 0 1
5040: PUSH
5041: LD_INT 0
5043: PLUS
5044: ST_TO_ADDR
// end ;
5045: LD_VAR 0 2
5049: RET
// export function IsEmpty ( building ) ; begin
5050: LD_INT 0
5052: PPUSH
// if not building then
5053: LD_VAR 0 1
5057: NOT
5058: IFFALSE 5062
// exit ;
5060: GO 5105
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5062: LD_ADDR_VAR 0 2
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: LD_INT 22
5074: PUSH
5075: LD_VAR 0 1
5079: PPUSH
5080: CALL_OW 255
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 58
5091: PUSH
5092: EMPTY
5093: LIST
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: IN
5104: ST_TO_ADDR
// end ;
5105: LD_VAR 0 2
5109: RET
// export function IsNotFull ( building ) ; var places ; begin
5110: LD_INT 0
5112: PPUSH
5113: PPUSH
// if not building then
5114: LD_VAR 0 1
5118: NOT
5119: IFFALSE 5123
// exit ;
5121: GO 5151
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5123: LD_ADDR_VAR 0 2
5127: PUSH
5128: LD_VAR 0 1
5132: PPUSH
5133: LD_INT 3
5135: PUSH
5136: LD_INT 62
5138: PUSH
5139: EMPTY
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 72
5150: ST_TO_ADDR
// end ;
5151: LD_VAR 0 2
5155: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
5160: PPUSH
5161: PPUSH
// tmp := [ ] ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: EMPTY
5168: ST_TO_ADDR
// list := [ ] ;
5169: LD_ADDR_VAR 0 5
5173: PUSH
5174: EMPTY
5175: ST_TO_ADDR
// for i = 16 to 25 do
5176: LD_ADDR_VAR 0 4
5180: PUSH
5181: DOUBLE
5182: LD_INT 16
5184: DEC
5185: ST_TO_ADDR
5186: LD_INT 25
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5263
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_VAR 0 3
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 91
5221: PUSH
5222: LD_VAR 0 1
5226: PUSH
5227: LD_INT 6
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 30
5237: PUSH
5238: LD_VAR 0 4
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: ADD
5260: ST_TO_ADDR
5261: GO 5189
5263: POP
5264: POP
// for i = 1 to tmp do
5265: LD_ADDR_VAR 0 4
5269: PUSH
5270: DOUBLE
5271: LD_INT 1
5273: DEC
5274: ST_TO_ADDR
5275: LD_VAR 0 3
5279: PUSH
5280: FOR_TO
5281: IFFALSE 5369
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: LD_VAR 0 5
5292: PUSH
5293: LD_VAR 0 3
5297: PUSH
5298: LD_VAR 0 4
5302: ARRAY
5303: PPUSH
5304: CALL_OW 266
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: CALL_OW 250
5324: PUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PPUSH
5336: CALL_OW 251
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 254
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: PUSH
5363: EMPTY
5364: LIST
5365: ADD
5366: ST_TO_ADDR
5367: GO 5280
5369: POP
5370: POP
// result := list ;
5371: LD_ADDR_VAR 0 2
5375: PUSH
5376: LD_VAR 0 5
5380: ST_TO_ADDR
// end ;
5381: LD_VAR 0 2
5385: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5386: LD_INT 0
5388: PPUSH
5389: PPUSH
5390: PPUSH
5391: PPUSH
5392: PPUSH
5393: PPUSH
5394: PPUSH
// if not factory then
5395: LD_VAR 0 1
5399: NOT
5400: IFFALSE 5404
// exit ;
5402: GO 5997
// if control = control_apeman then
5404: LD_VAR 0 4
5408: PUSH
5409: LD_INT 5
5411: EQUAL
5412: IFFALSE 5521
// begin tmp := UnitsInside ( factory ) ;
5414: LD_ADDR_VAR 0 8
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 313
5428: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_INT 25
5436: PUSH
5437: LD_INT 12
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 72
5448: NOT
5449: IFFALSE 5459
// control := control_manual ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: LD_INT 1
5458: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5459: LD_ADDR_VAR 0 8
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL 5156 0 1
5473: ST_TO_ADDR
// if tmp then
5474: LD_VAR 0 8
5478: IFFALSE 5521
// begin for i in tmp do
5480: LD_ADDR_VAR 0 7
5484: PUSH
5485: LD_VAR 0 8
5489: PUSH
5490: FOR_IN
5491: IFFALSE 5519
// if i [ 1 ] = b_ext_radio then
5493: LD_VAR 0 7
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PUSH
5502: LD_INT 22
5504: EQUAL
5505: IFFALSE 5517
// begin control := control_remote ;
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: LD_INT 2
5514: ST_TO_ADDR
// break ;
5515: GO 5519
// end ;
5517: GO 5490
5519: POP
5520: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: LD_VAR 0 3
5535: PPUSH
5536: LD_VAR 0 4
5540: PPUSH
5541: LD_VAR 0 5
5545: PPUSH
5546: CALL_OW 448
5550: IFFALSE 5585
// begin result := [ chassis , engine , control , weapon ] ;
5552: LD_ADDR_VAR 0 6
5556: PUSH
5557: LD_VAR 0 2
5561: PUSH
5562: LD_VAR 0 3
5566: PUSH
5567: LD_VAR 0 4
5571: PUSH
5572: LD_VAR 0 5
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// exit ;
5583: GO 5997
// end ; _chassis := AvailableChassisList ( factory ) ;
5585: LD_ADDR_VAR 0 9
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 475
5599: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5600: LD_ADDR_VAR 0 11
5604: PUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: CALL_OW 476
5614: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5615: LD_ADDR_VAR 0 12
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 477
5629: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5630: LD_ADDR_VAR 0 10
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 478
5644: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5645: LD_VAR 0 9
5649: NOT
5650: PUSH
5651: LD_VAR 0 11
5655: NOT
5656: OR
5657: PUSH
5658: LD_VAR 0 12
5662: NOT
5663: OR
5664: PUSH
5665: LD_VAR 0 10
5669: NOT
5670: OR
5671: IFFALSE 5706
// begin result := [ chassis , engine , control , weapon ] ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 2
5682: PUSH
5683: LD_VAR 0 3
5687: PUSH
5688: LD_VAR 0 4
5692: PUSH
5693: LD_VAR 0 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: ST_TO_ADDR
// exit ;
5704: GO 5997
// end ; if not chassis in _chassis then
5706: LD_VAR 0 2
5710: PUSH
5711: LD_VAR 0 9
5715: IN
5716: NOT
5717: IFFALSE 5743
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: LD_VAR 0 9
5728: PUSH
5729: LD_INT 1
5731: PPUSH
5732: LD_VAR 0 9
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5743: LD_VAR 0 2
5747: PPUSH
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL 6002 0 2
5757: NOT
5758: IFFALSE 5817
// repeat engine := _engine [ 1 ] ;
5760: LD_ADDR_VAR 0 3
5764: PUSH
5765: LD_VAR 0 11
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5774: LD_ADDR_VAR 0 11
5778: PUSH
5779: LD_VAR 0 11
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 3
5791: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5792: LD_VAR 0 2
5796: PPUSH
5797: LD_VAR 0 3
5801: PPUSH
5802: CALL 6002 0 2
5806: PUSH
5807: LD_VAR 0 11
5811: PUSH
5812: EMPTY
5813: EQUAL
5814: OR
5815: IFFALSE 5760
// if not control in _control then
5817: LD_VAR 0 4
5821: PUSH
5822: LD_VAR 0 12
5826: IN
5827: NOT
5828: IFFALSE 5854
// control := _control [ rand ( 1 , _control ) ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 12
5839: PUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_VAR 0 12
5847: PPUSH
5848: CALL_OW 12
5852: ARRAY
5853: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_VAR 0 5
5863: PPUSH
5864: CALL 6222 0 2
5868: NOT
5869: IFFALSE 5928
// repeat weapon := _weapon [ 1 ] ;
5871: LD_ADDR_VAR 0 5
5875: PUSH
5876: LD_VAR 0 10
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5885: LD_ADDR_VAR 0 10
5889: PUSH
5890: LD_VAR 0 10
5894: PPUSH
5895: LD_INT 1
5897: PPUSH
5898: CALL_OW 3
5902: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 5
5912: PPUSH
5913: CALL 6222 0 2
5917: PUSH
5918: LD_VAR 0 10
5922: PUSH
5923: EMPTY
5924: EQUAL
5925: OR
5926: IFFALSE 5871
// result := [ ] ;
5928: LD_ADDR_VAR 0 6
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: LD_VAR 0 5
5959: PPUSH
5960: CALL_OW 448
5964: IFFALSE 5997
// result := [ chassis , engine , control , weapon ] ;
5966: LD_ADDR_VAR 0 6
5970: PUSH
5971: LD_VAR 0 2
5975: PUSH
5976: LD_VAR 0 3
5980: PUSH
5981: LD_VAR 0 4
5985: PUSH
5986: LD_VAR 0 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: ST_TO_ADDR
// end ;
5997: LD_VAR 0 6
6001: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6002: LD_INT 0
6004: PPUSH
// if not chassis or not engine then
6005: LD_VAR 0 1
6009: NOT
6010: PUSH
6011: LD_VAR 0 2
6015: NOT
6016: OR
6017: IFFALSE 6021
// exit ;
6019: GO 6217
// case engine of engine_solar :
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: DOUBLE
6029: EQUAL
6030: IFTRUE 6034
6032: GO 6072
6034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_INT 11
6042: PUSH
6043: LD_INT 12
6045: PUSH
6046: LD_INT 13
6048: PUSH
6049: LD_INT 14
6051: PUSH
6052: LD_INT 1
6054: PUSH
6055: LD_INT 2
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: ST_TO_ADDR
6070: GO 6201
6072: LD_INT 1
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6142
6080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6081: LD_ADDR_VAR 0 3
6085: PUSH
6086: LD_INT 11
6088: PUSH
6089: LD_INT 12
6091: PUSH
6092: LD_INT 13
6094: PUSH
6095: LD_INT 14
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: LD_INT 2
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 4
6109: PUSH
6110: LD_INT 5
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 23
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: ST_TO_ADDR
6140: GO 6201
6142: LD_INT 3
6144: DOUBLE
6145: EQUAL
6146: IFTRUE 6150
6148: GO 6200
6150: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: LD_INT 13
6158: PUSH
6159: LD_INT 14
6161: PUSH
6162: LD_INT 2
6164: PUSH
6165: LD_INT 3
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 22
6179: PUSH
6180: LD_INT 23
6182: PUSH
6183: LD_INT 24
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: ST_TO_ADDR
6198: GO 6201
6200: POP
// result := ( chassis in result ) ;
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: LD_VAR 0 1
6210: PUSH
6211: LD_VAR 0 3
6215: IN
6216: ST_TO_ADDR
// end ;
6217: LD_VAR 0 3
6221: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6222: LD_INT 0
6224: PPUSH
// if not chassis or not weapon then
6225: LD_VAR 0 1
6229: NOT
6230: PUSH
6231: LD_VAR 0 2
6235: NOT
6236: OR
6237: IFFALSE 6241
// exit ;
6239: GO 7301
// case weapon of us_machine_gun :
6241: LD_VAR 0 2
6245: PUSH
6246: LD_INT 2
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6284
6254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6255: LD_ADDR_VAR 0 3
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: LD_INT 2
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: LD_INT 4
6271: PUSH
6272: LD_INT 5
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: ST_TO_ADDR
6282: GO 7285
6284: LD_INT 3
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6322
6292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 3
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: ST_TO_ADDR
6320: GO 7285
6322: LD_INT 11
6324: DOUBLE
6325: EQUAL
6326: IFTRUE 6330
6328: GO 6360
6330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6331: LD_ADDR_VAR 0 3
6335: PUSH
6336: LD_INT 1
6338: PUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: LD_INT 5
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 7285
6360: LD_INT 4
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6394
6368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 5
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
6392: GO 7285
6394: LD_INT 5
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6428
6402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: LD_INT 4
6416: PUSH
6417: LD_INT 5
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 7285
6428: LD_INT 9
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6462
6436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6437: LD_ADDR_VAR 0 3
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 7285
6462: LD_INT 7
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6496
6470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6471: LD_ADDR_VAR 0 3
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7285
6496: LD_INT 12
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6530
6504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 7285
6530: LD_INT 13
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6564
6538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
6562: GO 7285
6564: LD_INT 14
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6590
6572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 4
6580: PUSH
6581: LD_INT 5
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: ST_TO_ADDR
6588: GO 7285
6590: LD_INT 6
6592: DOUBLE
6593: EQUAL
6594: IFTRUE 6598
6596: GO 6616
6598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_INT 4
6606: PUSH
6607: LD_INT 5
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: ST_TO_ADDR
6614: GO 7285
6616: LD_INT 10
6618: DOUBLE
6619: EQUAL
6620: IFTRUE 6624
6622: GO 6642
6624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_INT 4
6632: PUSH
6633: LD_INT 5
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
6640: GO 7285
6642: LD_INT 22
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6676
6650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6651: LD_ADDR_VAR 0 3
6655: PUSH
6656: LD_INT 11
6658: PUSH
6659: LD_INT 12
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: ST_TO_ADDR
6674: GO 7285
6676: LD_INT 23
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6684
6682: GO 6710
6684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 11
6692: PUSH
6693: LD_INT 12
6695: PUSH
6696: LD_INT 13
6698: PUSH
6699: LD_INT 14
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: ST_TO_ADDR
6708: GO 7285
6710: LD_INT 24
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6744
6718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 13
6732: PUSH
6733: LD_INT 14
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 7285
6744: LD_INT 30
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6778
6752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6753: LD_ADDR_VAR 0 3
6757: PUSH
6758: LD_INT 11
6760: PUSH
6761: LD_INT 12
6763: PUSH
6764: LD_INT 13
6766: PUSH
6767: LD_INT 14
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
6776: GO 7285
6778: LD_INT 25
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 6804
6786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_INT 13
6794: PUSH
6795: LD_INT 14
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 7285
6804: LD_INT 27
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6830
6812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 13
6820: PUSH
6821: LD_INT 14
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 7285
6830: LD_INT 92
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6864
6838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 11
6846: PUSH
6847: LD_INT 12
6849: PUSH
6850: LD_INT 13
6852: PUSH
6853: LD_INT 14
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: ST_TO_ADDR
6862: GO 7285
6864: LD_INT 28
6866: DOUBLE
6867: EQUAL
6868: IFTRUE 6872
6870: GO 6890
6872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: LD_INT 13
6880: PUSH
6881: LD_INT 14
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: ST_TO_ADDR
6888: GO 7285
6890: LD_INT 29
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6916
6898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_INT 13
6906: PUSH
6907: LD_INT 14
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 7285
6916: LD_INT 31
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6942
6924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_INT 13
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: ST_TO_ADDR
6940: GO 7285
6942: LD_INT 26
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6968
6950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_INT 13
6958: PUSH
6959: LD_INT 14
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: ST_TO_ADDR
6966: GO 7285
6968: LD_INT 42
6970: DOUBLE
6971: EQUAL
6972: IFTRUE 6976
6974: GO 7002
6976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 22
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7285
7002: LD_INT 43
7004: DOUBLE
7005: EQUAL
7006: IFTRUE 7010
7008: GO 7036
7010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 21
7018: PUSH
7019: LD_INT 22
7021: PUSH
7022: LD_INT 23
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 7285
7036: LD_INT 44
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7070
7044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 22
7055: PUSH
7056: LD_INT 23
7058: PUSH
7059: LD_INT 24
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
7068: GO 7285
7070: LD_INT 45
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7104
7078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 22
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 7285
7104: LD_INT 49
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7138
7112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 24
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7285
7138: LD_INT 51
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 24
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7285
7172: LD_INT 52
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7206
7180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 24
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
7204: GO 7285
7206: LD_INT 53
7208: DOUBLE
7209: EQUAL
7210: IFTRUE 7214
7212: GO 7232
7214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7215: LD_ADDR_VAR 0 3
7219: PUSH
7220: LD_INT 23
7222: PUSH
7223: LD_INT 24
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
7230: GO 7285
7232: LD_INT 46
7234: DOUBLE
7235: EQUAL
7236: IFTRUE 7240
7238: GO 7258
7240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_INT 23
7248: PUSH
7249: LD_INT 24
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
7256: GO 7285
7258: LD_INT 47
7260: DOUBLE
7261: EQUAL
7262: IFTRUE 7266
7264: GO 7284
7266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7267: LD_ADDR_VAR 0 3
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 24
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: ST_TO_ADDR
7282: GO 7285
7284: POP
// result := ( chassis in result ) ;
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: LD_VAR 0 1
7294: PUSH
7295: LD_VAR 0 3
7299: IN
7300: ST_TO_ADDR
// end ;
7301: LD_VAR 0 3
7305: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
7313: PPUSH
7314: PPUSH
// result := array ;
7315: LD_ADDR_VAR 0 5
7319: PUSH
7320: LD_VAR 0 1
7324: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7325: LD_VAR 0 1
7329: NOT
7330: PUSH
7331: LD_VAR 0 2
7335: NOT
7336: OR
7337: PUSH
7338: LD_VAR 0 3
7342: NOT
7343: OR
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_VAR 0 1
7354: GREATER
7355: OR
7356: PUSH
7357: LD_VAR 0 3
7361: PUSH
7362: LD_VAR 0 1
7366: GREATER
7367: OR
7368: IFFALSE 7372
// exit ;
7370: GO 7668
// if direction then
7372: LD_VAR 0 4
7376: IFFALSE 7440
// begin d := 1 ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if i_from > i_to then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_VAR 0 3
7395: GREATER
7396: IFFALSE 7422
// length := ( array - i_from ) + i_to else
7398: LD_ADDR_VAR 0 11
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: MINUS
7413: PUSH
7414: LD_VAR 0 3
7418: PLUS
7419: ST_TO_ADDR
7420: GO 7438
// length := i_to - i_from ;
7422: LD_ADDR_VAR 0 11
7426: PUSH
7427: LD_VAR 0 3
7431: PUSH
7432: LD_VAR 0 2
7436: MINUS
7437: ST_TO_ADDR
// end else
7438: GO 7501
// begin d := - 1 ;
7440: LD_ADDR_VAR 0 9
7444: PUSH
7445: LD_INT 1
7447: NEG
7448: ST_TO_ADDR
// if i_from > i_to then
7449: LD_VAR 0 2
7453: PUSH
7454: LD_VAR 0 3
7458: GREATER
7459: IFFALSE 7479
// length := i_from - i_to else
7461: LD_ADDR_VAR 0 11
7465: PUSH
7466: LD_VAR 0 2
7470: PUSH
7471: LD_VAR 0 3
7475: MINUS
7476: ST_TO_ADDR
7477: GO 7501
// length := ( array - i_to ) + i_from ;
7479: LD_ADDR_VAR 0 11
7483: PUSH
7484: LD_VAR 0 1
7488: PUSH
7489: LD_VAR 0 3
7493: MINUS
7494: PUSH
7495: LD_VAR 0 2
7499: PLUS
7500: ST_TO_ADDR
// end ; if not length then
7501: LD_VAR 0 11
7505: NOT
7506: IFFALSE 7510
// exit ;
7508: GO 7668
// tmp := array ;
7510: LD_ADDR_VAR 0 10
7514: PUSH
7515: LD_VAR 0 1
7519: ST_TO_ADDR
// for i = 1 to length do
7520: LD_ADDR_VAR 0 6
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_VAR 0 11
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7656
// begin for j = 1 to array do
7538: LD_ADDR_VAR 0 7
7542: PUSH
7543: DOUBLE
7544: LD_INT 1
7546: DEC
7547: ST_TO_ADDR
7548: LD_VAR 0 1
7552: PUSH
7553: FOR_TO
7554: IFFALSE 7642
// begin k := j + d ;
7556: LD_ADDR_VAR 0 8
7560: PUSH
7561: LD_VAR 0 7
7565: PUSH
7566: LD_VAR 0 9
7570: PLUS
7571: ST_TO_ADDR
// if k > array then
7572: LD_VAR 0 8
7576: PUSH
7577: LD_VAR 0 1
7581: GREATER
7582: IFFALSE 7592
// k := 1 ;
7584: LD_ADDR_VAR 0 8
7588: PUSH
7589: LD_INT 1
7591: ST_TO_ADDR
// if not k then
7592: LD_VAR 0 8
7596: NOT
7597: IFFALSE 7609
// k := array ;
7599: LD_ADDR_VAR 0 8
7603: PUSH
7604: LD_VAR 0 1
7608: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7609: LD_ADDR_VAR 0 10
7613: PUSH
7614: LD_VAR 0 10
7618: PPUSH
7619: LD_VAR 0 8
7623: PPUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_VAR 0 7
7633: ARRAY
7634: PPUSH
7635: CALL_OW 1
7639: ST_TO_ADDR
// end ;
7640: GO 7553
7642: POP
7643: POP
// array := tmp ;
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 10
7653: ST_TO_ADDR
// end ;
7654: GO 7535
7656: POP
7657: POP
// result := array ;
7658: LD_ADDR_VAR 0 5
7662: PUSH
7663: LD_VAR 0 1
7667: ST_TO_ADDR
// end ;
7668: LD_VAR 0 5
7672: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7673: LD_INT 0
7675: PPUSH
7676: PPUSH
// result := 0 ;
7677: LD_ADDR_VAR 0 3
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// if not array or not value in array then
7685: LD_VAR 0 1
7689: NOT
7690: PUSH
7691: LD_VAR 0 2
7695: PUSH
7696: LD_VAR 0 1
7700: IN
7701: NOT
7702: OR
7703: IFFALSE 7707
// exit ;
7705: GO 7761
// for i = 1 to array do
7707: LD_ADDR_VAR 0 4
7711: PUSH
7712: DOUBLE
7713: LD_INT 1
7715: DEC
7716: ST_TO_ADDR
7717: LD_VAR 0 1
7721: PUSH
7722: FOR_TO
7723: IFFALSE 7759
// if value = array [ i ] then
7725: LD_VAR 0 2
7729: PUSH
7730: LD_VAR 0 1
7734: PUSH
7735: LD_VAR 0 4
7739: ARRAY
7740: EQUAL
7741: IFFALSE 7757
// begin result := i ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: LD_VAR 0 4
7752: ST_TO_ADDR
// exit ;
7753: POP
7754: POP
7755: GO 7761
// end ;
7757: GO 7722
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 3
7765: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7766: LD_INT 0
7768: PPUSH
// vc_chassis := chassis ;
7769: LD_ADDR_OWVAR 37
7773: PUSH
7774: LD_VAR 0 1
7778: ST_TO_ADDR
// vc_engine := engine ;
7779: LD_ADDR_OWVAR 39
7783: PUSH
7784: LD_VAR 0 2
7788: ST_TO_ADDR
// vc_control := control ;
7789: LD_ADDR_OWVAR 38
7793: PUSH
7794: LD_VAR 0 3
7798: ST_TO_ADDR
// vc_weapon := weapon ;
7799: LD_ADDR_OWVAR 40
7803: PUSH
7804: LD_VAR 0 4
7808: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7809: LD_ADDR_OWVAR 41
7813: PUSH
7814: LD_VAR 0 5
7818: ST_TO_ADDR
// end ;
7819: LD_VAR 0 6
7823: RET
// export function WantPlant ( unit ) ; var task ; begin
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
// result := false ;
7828: LD_ADDR_VAR 0 2
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 437
7850: ST_TO_ADDR
// if task then
7851: LD_VAR 0 3
7855: IFFALSE 7883
// if task [ 1 ] [ 1 ] = p then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PUSH
7870: LD_STRING p
7872: EQUAL
7873: IFFALSE 7883
// result := true ;
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// end ;
7883: LD_VAR 0 2
7887: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7888: LD_INT 0
7890: PPUSH
7891: PPUSH
7892: PPUSH
7893: PPUSH
// if pos < 1 then
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 1
7901: LESS
7902: IFFALSE 7906
// exit ;
7904: GO 8209
// if pos = 1 then
7906: LD_VAR 0 2
7910: PUSH
7911: LD_INT 1
7913: EQUAL
7914: IFFALSE 7947
// result := Replace ( arr , pos [ 1 ] , value ) else
7916: LD_ADDR_VAR 0 4
7920: PUSH
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: ARRAY
7934: PPUSH
7935: LD_VAR 0 3
7939: PPUSH
7940: CALL_OW 1
7944: ST_TO_ADDR
7945: GO 8209
// begin tmp := arr ;
7947: LD_ADDR_VAR 0 6
7951: PUSH
7952: LD_VAR 0 1
7956: ST_TO_ADDR
// s_arr := [ tmp ] ;
7957: LD_ADDR_VAR 0 7
7961: PUSH
7962: LD_VAR 0 6
7966: PUSH
7967: EMPTY
7968: LIST
7969: ST_TO_ADDR
// for i = 1 to pos - 1 do
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: DOUBLE
7976: LD_INT 1
7978: DEC
7979: ST_TO_ADDR
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: PUSH
7989: FOR_TO
7990: IFFALSE 8035
// begin tmp := tmp [ pos [ i ] ] ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 6
8001: PUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_VAR 0 5
8011: ARRAY
8012: ARRAY
8013: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8014: LD_ADDR_VAR 0 7
8018: PUSH
8019: LD_VAR 0 7
8023: PUSH
8024: LD_VAR 0 6
8028: PUSH
8029: EMPTY
8030: LIST
8031: ADD
8032: ST_TO_ADDR
// end ;
8033: GO 7989
8035: POP
8036: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_VAR 0 6
8046: PPUSH
8047: LD_VAR 0 2
8051: PUSH
8052: LD_VAR 0 2
8056: ARRAY
8057: PPUSH
8058: LD_VAR 0 3
8062: PPUSH
8063: CALL_OW 1
8067: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8068: LD_ADDR_VAR 0 7
8072: PUSH
8073: LD_VAR 0 7
8077: PPUSH
8078: LD_VAR 0 7
8082: PPUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 1
8092: ST_TO_ADDR
// for i = s_arr downto 2 do
8093: LD_ADDR_VAR 0 5
8097: PUSH
8098: DOUBLE
8099: LD_VAR 0 7
8103: INC
8104: ST_TO_ADDR
8105: LD_INT 2
8107: PUSH
8108: FOR_DOWNTO
8109: IFFALSE 8193
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8111: LD_ADDR_VAR 0 6
8115: PUSH
8116: LD_VAR 0 7
8120: PUSH
8121: LD_VAR 0 5
8125: PUSH
8126: LD_INT 1
8128: MINUS
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_VAR 0 5
8140: PUSH
8141: LD_INT 1
8143: MINUS
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 7
8150: PUSH
8151: LD_VAR 0 5
8155: ARRAY
8156: PPUSH
8157: CALL_OW 1
8161: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8162: LD_ADDR_VAR 0 7
8166: PUSH
8167: LD_VAR 0 7
8171: PPUSH
8172: LD_VAR 0 5
8176: PUSH
8177: LD_INT 1
8179: MINUS
8180: PPUSH
8181: LD_VAR 0 6
8185: PPUSH
8186: CALL_OW 1
8190: ST_TO_ADDR
// end ;
8191: GO 8108
8193: POP
8194: POP
// result := s_arr [ 1 ] ;
8195: LD_ADDR_VAR 0 4
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// end ; end ;
8209: LD_VAR 0 4
8213: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8214: LD_INT 0
8216: PPUSH
8217: PPUSH
// if not list then
8218: LD_VAR 0 1
8222: NOT
8223: IFFALSE 8227
// exit ;
8225: GO 8318
// i := list [ pos1 ] ;
8227: LD_ADDR_VAR 0 5
8231: PUSH
8232: LD_VAR 0 1
8236: PUSH
8237: LD_VAR 0 2
8241: ARRAY
8242: ST_TO_ADDR
// if not i then
8243: LD_VAR 0 5
8247: NOT
8248: IFFALSE 8252
// exit ;
8250: GO 8318
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_VAR 0 1
8261: PPUSH
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_VAR 0 1
8271: PUSH
8272: LD_VAR 0 3
8276: ARRAY
8277: PPUSH
8278: CALL_OW 1
8282: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 5
8302: PPUSH
8303: CALL_OW 1
8307: ST_TO_ADDR
// result := list ;
8308: LD_ADDR_VAR 0 4
8312: PUSH
8313: LD_VAR 0 1
8317: ST_TO_ADDR
// end ;
8318: LD_VAR 0 4
8322: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8323: LD_INT 0
8325: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8326: LD_ADDR_VAR 0 5
8330: PUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 250
8340: PPUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 251
8350: PPUSH
8351: LD_VAR 0 2
8355: PPUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: LD_VAR 0 4
8365: PPUSH
8366: CALL 8744 0 5
8370: ST_TO_ADDR
// end ;
8371: LD_VAR 0 5
8375: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8376: LD_INT 0
8378: PPUSH
8379: PPUSH
8380: PPUSH
8381: PPUSH
// if not list or not unit then
8382: LD_VAR 0 2
8386: NOT
8387: PUSH
8388: LD_VAR 0 1
8392: NOT
8393: OR
8394: IFFALSE 8398
// exit ;
8396: GO 8739
// result := [ ] ;
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: EMPTY
8404: ST_TO_ADDR
// for i in list do
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 2
8414: PUSH
8415: FOR_IN
8416: IFFALSE 8634
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8418: LD_ADDR_VAR 0 8
8422: PUSH
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 1
8435: ARRAY
8436: PPUSH
8437: LD_VAR 0 6
8441: PUSH
8442: LD_INT 2
8444: ARRAY
8445: PPUSH
8446: CALL_OW 297
8450: ST_TO_ADDR
// if not Count ( result ) then
8451: LD_VAR 0 5
8455: PPUSH
8456: CALL 5028 0 1
8460: NOT
8461: IFFALSE 8494
// begin result := Join ( result , [ i , tmp ] ) ;
8463: LD_ADDR_VAR 0 5
8467: PUSH
8468: LD_VAR 0 5
8472: PPUSH
8473: LD_VAR 0 6
8477: PUSH
8478: LD_VAR 0 8
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL 40637 0 2
8491: ST_TO_ADDR
// continue ;
8492: GO 8415
// end ; if result [ result ] [ 2 ] <= tmp then
8494: LD_VAR 0 5
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PUSH
8509: LD_VAR 0 8
8513: LESSEQUAL
8514: IFFALSE 8547
// result := Join ( result , [ i , tmp ] ) else
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 5
8525: PPUSH
8526: LD_VAR 0 6
8530: PUSH
8531: LD_VAR 0 8
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL 40637 0 2
8544: ST_TO_ADDR
8545: GO 8632
// begin for j := 1 to Count ( result ) do
8547: LD_ADDR_VAR 0 7
8551: PUSH
8552: DOUBLE
8553: LD_INT 1
8555: DEC
8556: ST_TO_ADDR
8557: LD_VAR 0 5
8561: PPUSH
8562: CALL 5028 0 1
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8630
// begin if tmp < result [ j ] [ 2 ] then
8570: LD_VAR 0 8
8574: PUSH
8575: LD_VAR 0 5
8579: PUSH
8580: LD_VAR 0 7
8584: ARRAY
8585: PUSH
8586: LD_INT 2
8588: ARRAY
8589: LESS
8590: IFFALSE 8628
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8592: LD_ADDR_VAR 0 5
8596: PUSH
8597: LD_VAR 0 5
8601: PPUSH
8602: LD_VAR 0 7
8606: PPUSH
8607: LD_VAR 0 6
8611: PUSH
8612: LD_VAR 0 8
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 2
8625: ST_TO_ADDR
// break ;
8626: GO 8630
// end ; end ;
8628: GO 8567
8630: POP
8631: POP
// end ; end ;
8632: GO 8415
8634: POP
8635: POP
// if result and not asc then
8636: LD_VAR 0 5
8640: PUSH
8641: LD_VAR 0 3
8645: NOT
8646: AND
8647: IFFALSE 8664
// result := ReverseArray ( result ) ;
8649: LD_ADDR_VAR 0 5
8653: PUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL 35904 0 1
8663: ST_TO_ADDR
// tmp := [ ] ;
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: EMPTY
8670: ST_TO_ADDR
// if mode then
8671: LD_VAR 0 4
8675: IFFALSE 8739
// begin for i := 1 to result do
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: DOUBLE
8683: LD_INT 1
8685: DEC
8686: ST_TO_ADDR
8687: LD_VAR 0 5
8691: PUSH
8692: FOR_TO
8693: IFFALSE 8727
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8695: LD_ADDR_VAR 0 8
8699: PUSH
8700: LD_VAR 0 8
8704: PPUSH
8705: LD_VAR 0 5
8709: PUSH
8710: LD_VAR 0 6
8714: ARRAY
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: CALL 40637 0 2
8724: ST_TO_ADDR
8725: GO 8692
8727: POP
8728: POP
// result := tmp ;
8729: LD_ADDR_VAR 0 5
8733: PUSH
8734: LD_VAR 0 8
8738: ST_TO_ADDR
// end ; end ;
8739: LD_VAR 0 5
8743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
// if not list then
8750: LD_VAR 0 3
8754: NOT
8755: IFFALSE 8759
// exit ;
8757: GO 9147
// result := [ ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: EMPTY
8765: ST_TO_ADDR
// for i in list do
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_VAR 0 3
8775: PUSH
8776: FOR_IN
8777: IFFALSE 8979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8779: LD_ADDR_VAR 0 9
8783: PUSH
8784: LD_VAR 0 7
8788: PPUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_VAR 0 2
8798: PPUSH
8799: CALL_OW 297
8803: ST_TO_ADDR
// if not result then
8804: LD_VAR 0 6
8808: NOT
8809: IFFALSE 8835
// result := [ [ i , tmp ] ] else
8811: LD_ADDR_VAR 0 6
8815: PUSH
8816: LD_VAR 0 7
8820: PUSH
8821: LD_VAR 0 9
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: ST_TO_ADDR
8833: GO 8977
// begin if result [ result ] [ 2 ] < tmp then
8835: LD_VAR 0 6
8839: PUSH
8840: LD_VAR 0 6
8844: ARRAY
8845: PUSH
8846: LD_INT 2
8848: ARRAY
8849: PUSH
8850: LD_VAR 0 9
8854: LESS
8855: IFFALSE 8897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 1
8874: PLUS
8875: PPUSH
8876: LD_VAR 0 7
8880: PUSH
8881: LD_VAR 0 9
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 2
8894: ST_TO_ADDR
8895: GO 8977
// for j = 1 to result do
8897: LD_ADDR_VAR 0 8
8901: PUSH
8902: DOUBLE
8903: LD_INT 1
8905: DEC
8906: ST_TO_ADDR
8907: LD_VAR 0 6
8911: PUSH
8912: FOR_TO
8913: IFFALSE 8975
// begin if tmp < result [ j ] [ 2 ] then
8915: LD_VAR 0 9
8919: PUSH
8920: LD_VAR 0 6
8924: PUSH
8925: LD_VAR 0 8
8929: ARRAY
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: LESS
8935: IFFALSE 8973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: LD_VAR 0 6
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: LD_VAR 0 7
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 2
8970: ST_TO_ADDR
// break ;
8971: GO 8975
// end ; end ;
8973: GO 8912
8975: POP
8976: POP
// end ; end ;
8977: GO 8776
8979: POP
8980: POP
// if result and not asc then
8981: LD_VAR 0 6
8985: PUSH
8986: LD_VAR 0 4
8990: NOT
8991: AND
8992: IFFALSE 9067
// begin tmp := result ;
8994: LD_ADDR_VAR 0 9
8998: PUSH
8999: LD_VAR 0 6
9003: ST_TO_ADDR
// for i = tmp downto 1 do
9004: LD_ADDR_VAR 0 7
9008: PUSH
9009: DOUBLE
9010: LD_VAR 0 9
9014: INC
9015: ST_TO_ADDR
9016: LD_INT 1
9018: PUSH
9019: FOR_DOWNTO
9020: IFFALSE 9065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9022: LD_ADDR_VAR 0 6
9026: PUSH
9027: LD_VAR 0 6
9031: PPUSH
9032: LD_VAR 0 9
9036: PUSH
9037: LD_VAR 0 7
9041: MINUS
9042: PUSH
9043: LD_INT 1
9045: PLUS
9046: PPUSH
9047: LD_VAR 0 9
9051: PUSH
9052: LD_VAR 0 7
9056: ARRAY
9057: PPUSH
9058: CALL_OW 1
9062: ST_TO_ADDR
9063: GO 9019
9065: POP
9066: POP
// end ; tmp := [ ] ;
9067: LD_ADDR_VAR 0 9
9071: PUSH
9072: EMPTY
9073: ST_TO_ADDR
// if mode then
9074: LD_VAR 0 5
9078: IFFALSE 9147
// begin for i = 1 to result do
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_VAR 0 6
9094: PUSH
9095: FOR_TO
9096: IFFALSE 9135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_VAR 0 9
9107: PPUSH
9108: LD_VAR 0 7
9112: PPUSH
9113: LD_VAR 0 6
9117: PUSH
9118: LD_VAR 0 7
9122: ARRAY
9123: PUSH
9124: LD_INT 1
9126: ARRAY
9127: PPUSH
9128: CALL_OW 1
9132: ST_TO_ADDR
9133: GO 9095
9135: POP
9136: POP
// result := tmp ;
9137: LD_ADDR_VAR 0 6
9141: PUSH
9142: LD_VAR 0 9
9146: ST_TO_ADDR
// end ; end ;
9147: LD_VAR 0 6
9151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9152: LD_INT 0
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9160: LD_ADDR_VAR 0 5
9164: PUSH
9165: LD_INT 0
9167: PUSH
9168: LD_INT 0
9170: PUSH
9171: LD_INT 0
9173: PUSH
9174: EMPTY
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: ST_TO_ADDR
// if not x or not y then
9182: LD_VAR 0 2
9186: NOT
9187: PUSH
9188: LD_VAR 0 3
9192: NOT
9193: OR
9194: IFFALSE 9198
// exit ;
9196: GO 10848
// if not range then
9198: LD_VAR 0 4
9202: NOT
9203: IFFALSE 9213
// range := 10 ;
9205: LD_ADDR_VAR 0 4
9209: PUSH
9210: LD_INT 10
9212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_INT 81
9220: PUSH
9221: LD_VAR 0 1
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 92
9232: PUSH
9233: LD_VAR 0 2
9237: PUSH
9238: LD_VAR 0 3
9242: PUSH
9243: LD_VAR 0 4
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 3
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 3
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: ST_TO_ADDR
// if not tmp then
9281: LD_VAR 0 8
9285: NOT
9286: IFFALSE 9290
// exit ;
9288: GO 10848
// for i in tmp do
9290: LD_ADDR_VAR 0 6
9294: PUSH
9295: LD_VAR 0 8
9299: PUSH
9300: FOR_IN
9301: IFFALSE 10823
// begin points := [ 0 , 0 , 0 ] ;
9303: LD_ADDR_VAR 0 9
9307: PUSH
9308: LD_INT 0
9310: PUSH
9311: LD_INT 0
9313: PUSH
9314: LD_INT 0
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: ST_TO_ADDR
// bpoints := 1 ;
9322: LD_ADDR_VAR 0 10
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9330: LD_VAR 0 6
9334: PPUSH
9335: CALL_OW 247
9339: PUSH
9340: LD_INT 1
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9926
9348: POP
// begin if GetClass ( i ) = 1 then
9349: LD_VAR 0 6
9353: PPUSH
9354: CALL_OW 257
9358: PUSH
9359: LD_INT 1
9361: EQUAL
9362: IFFALSE 9383
// points := [ 10 , 5 , 3 ] ;
9364: LD_ADDR_VAR 0 9
9368: PUSH
9369: LD_INT 10
9371: PUSH
9372: LD_INT 5
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9383: LD_VAR 0 6
9387: PPUSH
9388: CALL_OW 257
9392: PUSH
9393: LD_INT 2
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: LD_INT 4
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: IN
9407: IFFALSE 9428
// points := [ 3 , 2 , 1 ] ;
9409: LD_ADDR_VAR 0 9
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 1
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9428: LD_VAR 0 6
9432: PPUSH
9433: CALL_OW 257
9437: PUSH
9438: LD_INT 5
9440: EQUAL
9441: IFFALSE 9462
// points := [ 130 , 5 , 2 ] ;
9443: LD_ADDR_VAR 0 9
9447: PUSH
9448: LD_INT 130
9450: PUSH
9451: LD_INT 5
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9462: LD_VAR 0 6
9466: PPUSH
9467: CALL_OW 257
9471: PUSH
9472: LD_INT 8
9474: EQUAL
9475: IFFALSE 9496
// points := [ 35 , 35 , 30 ] ;
9477: LD_ADDR_VAR 0 9
9481: PUSH
9482: LD_INT 35
9484: PUSH
9485: LD_INT 35
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9496: LD_VAR 0 6
9500: PPUSH
9501: CALL_OW 257
9505: PUSH
9506: LD_INT 9
9508: EQUAL
9509: IFFALSE 9530
// points := [ 20 , 55 , 40 ] ;
9511: LD_ADDR_VAR 0 9
9515: PUSH
9516: LD_INT 20
9518: PUSH
9519: LD_INT 55
9521: PUSH
9522: LD_INT 40
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9530: LD_VAR 0 6
9534: PPUSH
9535: CALL_OW 257
9539: PUSH
9540: LD_INT 12
9542: PUSH
9543: LD_INT 16
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: IN
9550: IFFALSE 9571
// points := [ 5 , 3 , 2 ] ;
9552: LD_ADDR_VAR 0 9
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 3
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9571: LD_VAR 0 6
9575: PPUSH
9576: CALL_OW 257
9580: PUSH
9581: LD_INT 17
9583: EQUAL
9584: IFFALSE 9605
// points := [ 100 , 50 , 75 ] ;
9586: LD_ADDR_VAR 0 9
9590: PUSH
9591: LD_INT 100
9593: PUSH
9594: LD_INT 50
9596: PUSH
9597: LD_INT 75
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9605: LD_VAR 0 6
9609: PPUSH
9610: CALL_OW 257
9614: PUSH
9615: LD_INT 15
9617: EQUAL
9618: IFFALSE 9639
// points := [ 10 , 5 , 3 ] ;
9620: LD_ADDR_VAR 0 9
9624: PUSH
9625: LD_INT 10
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 257
9648: PUSH
9649: LD_INT 14
9651: EQUAL
9652: IFFALSE 9673
// points := [ 10 , 0 , 0 ] ;
9654: LD_ADDR_VAR 0 9
9658: PUSH
9659: LD_INT 10
9661: PUSH
9662: LD_INT 0
9664: PUSH
9665: LD_INT 0
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9673: LD_VAR 0 6
9677: PPUSH
9678: CALL_OW 257
9682: PUSH
9683: LD_INT 11
9685: EQUAL
9686: IFFALSE 9707
// points := [ 30 , 10 , 5 ] ;
9688: LD_ADDR_VAR 0 9
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 10
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9707: LD_VAR 0 1
9711: PPUSH
9712: LD_INT 5
9714: PPUSH
9715: CALL_OW 321
9719: PUSH
9720: LD_INT 2
9722: EQUAL
9723: IFFALSE 9740
// bpoints := bpoints * 1.8 ;
9725: LD_ADDR_VAR 0 10
9729: PUSH
9730: LD_VAR 0 10
9734: PUSH
9735: LD_REAL  1.80000000000000E+0000
9738: MUL
9739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9740: LD_VAR 0 6
9744: PPUSH
9745: CALL_OW 257
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 2
9755: PUSH
9756: LD_INT 3
9758: PUSH
9759: LD_INT 4
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: IN
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_INT 51
9776: PPUSH
9777: CALL_OW 321
9781: PUSH
9782: LD_INT 2
9784: EQUAL
9785: AND
9786: IFFALSE 9803
// bpoints := bpoints * 1.2 ;
9788: LD_ADDR_VAR 0 10
9792: PUSH
9793: LD_VAR 0 10
9797: PUSH
9798: LD_REAL  1.20000000000000E+0000
9801: MUL
9802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 257
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 7
9818: PUSH
9819: LD_INT 9
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: IN
9827: PUSH
9828: LD_VAR 0 1
9832: PPUSH
9833: LD_INT 52
9835: PPUSH
9836: CALL_OW 321
9840: PUSH
9841: LD_INT 2
9843: EQUAL
9844: AND
9845: IFFALSE 9862
// bpoints := bpoints * 1.5 ;
9847: LD_ADDR_VAR 0 10
9851: PUSH
9852: LD_VAR 0 10
9856: PUSH
9857: LD_REAL  1.50000000000000E+0000
9860: MUL
9861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9862: LD_VAR 0 1
9866: PPUSH
9867: LD_INT 66
9869: PPUSH
9870: CALL_OW 321
9874: PUSH
9875: LD_INT 2
9877: EQUAL
9878: IFFALSE 9895
// bpoints := bpoints * 1.1 ;
9880: LD_ADDR_VAR 0 10
9884: PUSH
9885: LD_VAR 0 10
9889: PUSH
9890: LD_REAL  1.10000000000000E+0000
9893: MUL
9894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9895: LD_ADDR_VAR 0 10
9899: PUSH
9900: LD_VAR 0 10
9904: PUSH
9905: LD_VAR 0 6
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 259
9917: PUSH
9918: LD_REAL  1.15000000000000E+0000
9921: MUL
9922: MUL
9923: ST_TO_ADDR
// end ; unit_vehicle :
9924: GO 10752
9926: LD_INT 2
9928: DOUBLE
9929: EQUAL
9930: IFTRUE 9934
9932: GO 10740
9934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9935: LD_VAR 0 6
9939: PPUSH
9940: CALL_OW 264
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 42
9950: PUSH
9951: LD_INT 24
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: IN
9959: IFFALSE 9980
// points := [ 25 , 5 , 3 ] ;
9961: LD_ADDR_VAR 0 9
9965: PUSH
9966: LD_INT 25
9968: PUSH
9969: LD_INT 5
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9980: LD_VAR 0 6
9984: PPUSH
9985: CALL_OW 264
9989: PUSH
9990: LD_INT 4
9992: PUSH
9993: LD_INT 43
9995: PUSH
9996: LD_INT 25
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: IN
10004: IFFALSE 10025
// points := [ 40 , 15 , 5 ] ;
10006: LD_ADDR_VAR 0 9
10010: PUSH
10011: LD_INT 40
10013: PUSH
10014: LD_INT 15
10016: PUSH
10017: LD_INT 5
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10025: LD_VAR 0 6
10029: PPUSH
10030: CALL_OW 264
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: LD_INT 23
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: IN
10045: IFFALSE 10066
// points := [ 7 , 25 , 8 ] ;
10047: LD_ADDR_VAR 0 9
10051: PUSH
10052: LD_INT 7
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10066: LD_VAR 0 6
10070: PPUSH
10071: CALL_OW 264
10075: PUSH
10076: LD_INT 5
10078: PUSH
10079: LD_INT 27
10081: PUSH
10082: LD_INT 44
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: IN
10090: IFFALSE 10111
// points := [ 14 , 50 , 16 ] ;
10092: LD_ADDR_VAR 0 9
10096: PUSH
10097: LD_INT 14
10099: PUSH
10100: LD_INT 50
10102: PUSH
10103: LD_INT 16
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10111: LD_VAR 0 6
10115: PPUSH
10116: CALL_OW 264
10120: PUSH
10121: LD_INT 6
10123: PUSH
10124: LD_INT 46
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: IN
10131: IFFALSE 10152
// points := [ 32 , 120 , 70 ] ;
10133: LD_ADDR_VAR 0 9
10137: PUSH
10138: LD_INT 32
10140: PUSH
10141: LD_INT 120
10143: PUSH
10144: LD_INT 70
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10152: LD_VAR 0 6
10156: PPUSH
10157: CALL_OW 264
10161: PUSH
10162: LD_INT 7
10164: PUSH
10165: LD_INT 28
10167: PUSH
10168: LD_INT 45
10170: PUSH
10171: LD_INT 92
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: IN
10180: IFFALSE 10201
// points := [ 35 , 20 , 45 ] ;
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_INT 35
10189: PUSH
10190: LD_INT 20
10192: PUSH
10193: LD_INT 45
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10201: LD_VAR 0 6
10205: PPUSH
10206: CALL_OW 264
10210: PUSH
10211: LD_INT 47
10213: PUSH
10214: EMPTY
10215: LIST
10216: IN
10217: IFFALSE 10238
// points := [ 67 , 45 , 75 ] ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: LD_INT 67
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: LD_INT 75
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10238: LD_VAR 0 6
10242: PPUSH
10243: CALL_OW 264
10247: PUSH
10248: LD_INT 26
10250: PUSH
10251: EMPTY
10252: LIST
10253: IN
10254: IFFALSE 10275
// points := [ 120 , 30 , 80 ] ;
10256: LD_ADDR_VAR 0 9
10260: PUSH
10261: LD_INT 120
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 80
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10275: LD_VAR 0 6
10279: PPUSH
10280: CALL_OW 264
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: EMPTY
10289: LIST
10290: IN
10291: IFFALSE 10312
// points := [ 40 , 1 , 1 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 40
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 264
10321: PUSH
10322: LD_INT 29
10324: PUSH
10325: EMPTY
10326: LIST
10327: IN
10328: IFFALSE 10349
// points := [ 70 , 200 , 400 ] ;
10330: LD_ADDR_VAR 0 9
10334: PUSH
10335: LD_INT 70
10337: PUSH
10338: LD_INT 200
10340: PUSH
10341: LD_INT 400
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10349: LD_VAR 0 6
10353: PPUSH
10354: CALL_OW 264
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 53
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: IN
10369: IFFALSE 10390
// points := [ 40 , 10 , 20 ] ;
10371: LD_ADDR_VAR 0 9
10375: PUSH
10376: LD_INT 40
10378: PUSH
10379: LD_INT 10
10381: PUSH
10382: LD_INT 20
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10390: LD_VAR 0 6
10394: PPUSH
10395: CALL_OW 264
10399: PUSH
10400: LD_INT 9
10402: PUSH
10403: EMPTY
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 5 , 70 , 20 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: LD_INT 70
10418: PUSH
10419: LD_INT 20
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 264
10436: PUSH
10437: LD_INT 10
10439: PUSH
10440: EMPTY
10441: LIST
10442: IN
10443: IFFALSE 10464
// points := [ 35 , 110 , 70 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_INT 35
10452: PUSH
10453: LD_INT 110
10455: PUSH
10456: LD_INT 70
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 265
10473: PUSH
10474: LD_INT 25
10476: EQUAL
10477: IFFALSE 10498
// points := [ 80 , 65 , 100 ] ;
10479: LD_ADDR_VAR 0 9
10483: PUSH
10484: LD_INT 80
10486: PUSH
10487: LD_INT 65
10489: PUSH
10490: LD_INT 100
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10498: LD_VAR 0 6
10502: PPUSH
10503: CALL_OW 263
10507: PUSH
10508: LD_INT 1
10510: EQUAL
10511: IFFALSE 10546
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10513: LD_ADDR_VAR 0 10
10517: PUSH
10518: LD_VAR 0 10
10522: PUSH
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 311
10532: PPUSH
10533: LD_INT 3
10535: PPUSH
10536: CALL_OW 259
10540: PUSH
10541: LD_INT 4
10543: MUL
10544: MUL
10545: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10546: LD_VAR 0 6
10550: PPUSH
10551: CALL_OW 263
10555: PUSH
10556: LD_INT 2
10558: EQUAL
10559: IFFALSE 10610
// begin j := IsControledBy ( i ) ;
10561: LD_ADDR_VAR 0 7
10565: PUSH
10566: LD_VAR 0 6
10570: PPUSH
10571: CALL_OW 312
10575: ST_TO_ADDR
// if j then
10576: LD_VAR 0 7
10580: IFFALSE 10610
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10582: LD_ADDR_VAR 0 10
10586: PUSH
10587: LD_VAR 0 10
10591: PUSH
10592: LD_VAR 0 7
10596: PPUSH
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 259
10604: PUSH
10605: LD_INT 3
10607: MUL
10608: MUL
10609: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10610: LD_VAR 0 6
10614: PPUSH
10615: CALL_OW 264
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: LD_INT 6
10625: PUSH
10626: LD_INT 46
10628: PUSH
10629: LD_INT 44
10631: PUSH
10632: LD_INT 47
10634: PUSH
10635: LD_INT 45
10637: PUSH
10638: LD_INT 28
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: LD_INT 27
10646: PUSH
10647: LD_INT 29
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: IN
10662: PUSH
10663: LD_VAR 0 1
10667: PPUSH
10668: LD_INT 52
10670: PPUSH
10671: CALL_OW 321
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: AND
10680: IFFALSE 10697
// bpoints := bpoints * 1.2 ;
10682: LD_ADDR_VAR 0 10
10686: PUSH
10687: LD_VAR 0 10
10691: PUSH
10692: LD_REAL  1.20000000000000E+0000
10695: MUL
10696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10697: LD_VAR 0 6
10701: PPUSH
10702: CALL_OW 264
10706: PUSH
10707: LD_INT 6
10709: PUSH
10710: LD_INT 46
10712: PUSH
10713: LD_INT 47
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: IN
10721: IFFALSE 10738
// bpoints := bpoints * 1.2 ;
10723: LD_ADDR_VAR 0 10
10727: PUSH
10728: LD_VAR 0 10
10732: PUSH
10733: LD_REAL  1.20000000000000E+0000
10736: MUL
10737: ST_TO_ADDR
// end ; unit_building :
10738: GO 10752
10740: LD_INT 3
10742: DOUBLE
10743: EQUAL
10744: IFTRUE 10748
10746: GO 10751
10748: POP
// ; end ;
10749: GO 10752
10751: POP
// for j = 1 to 3 do
10752: LD_ADDR_VAR 0 7
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_INT 3
10764: PUSH
10765: FOR_TO
10766: IFFALSE 10819
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10768: LD_ADDR_VAR 0 5
10772: PUSH
10773: LD_VAR 0 5
10777: PPUSH
10778: LD_VAR 0 7
10782: PPUSH
10783: LD_VAR 0 5
10787: PUSH
10788: LD_VAR 0 7
10792: ARRAY
10793: PUSH
10794: LD_VAR 0 9
10798: PUSH
10799: LD_VAR 0 7
10803: ARRAY
10804: PUSH
10805: LD_VAR 0 10
10809: MUL
10810: PLUS
10811: PPUSH
10812: CALL_OW 1
10816: ST_TO_ADDR
10817: GO 10765
10819: POP
10820: POP
// end ;
10821: GO 9300
10823: POP
10824: POP
// result := Replace ( result , 4 , tmp ) ;
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_VAR 0 5
10834: PPUSH
10835: LD_INT 4
10837: PPUSH
10838: LD_VAR 0 8
10842: PPUSH
10843: CALL_OW 1
10847: ST_TO_ADDR
// end ;
10848: LD_VAR 0 5
10852: RET
// export function DangerAtRange ( unit , range ) ; begin
10853: LD_INT 0
10855: PPUSH
// if not unit then
10856: LD_VAR 0 1
10860: NOT
10861: IFFALSE 10865
// exit ;
10863: GO 10910
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 255
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 250
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 251
10899: PPUSH
10900: LD_VAR 0 2
10904: PPUSH
10905: CALL 9152 0 4
10909: ST_TO_ADDR
// end ;
10910: LD_VAR 0 3
10914: RET
// export function DangerInArea ( side , area ) ; begin
10915: LD_INT 0
10917: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_VAR 0 2
10927: PPUSH
10928: LD_INT 81
10930: PUSH
10931: LD_VAR 0 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 70
10944: ST_TO_ADDR
// end ;
10945: LD_VAR 0 3
10949: RET
// export function IsExtension ( b ) ; begin
10950: LD_INT 0
10952: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10953: LD_ADDR_VAR 0 2
10957: PUSH
10958: LD_VAR 0 1
10962: PUSH
10963: LD_INT 23
10965: PUSH
10966: LD_INT 20
10968: PUSH
10969: LD_INT 22
10971: PUSH
10972: LD_INT 17
10974: PUSH
10975: LD_INT 24
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 19
10983: PUSH
10984: LD_INT 16
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 18
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: IN
11005: ST_TO_ADDR
// end ;
11006: LD_VAR 0 2
11010: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
11015: PPUSH
// result := [ ] ;
11016: LD_ADDR_VAR 0 4
11020: PUSH
11021: EMPTY
11022: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11023: LD_ADDR_VAR 0 5
11027: PUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: LD_INT 21
11035: PUSH
11036: LD_INT 3
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 70
11047: ST_TO_ADDR
// if not tmp then
11048: LD_VAR 0 5
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11121
// if checkLink then
11057: LD_VAR 0 3
11061: IFFALSE 11111
// begin for i in tmp do
11063: LD_ADDR_VAR 0 6
11067: PUSH
11068: LD_VAR 0 5
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11109
// if GetBase ( i ) <> base then
11076: LD_VAR 0 6
11080: PPUSH
11081: CALL_OW 274
11085: PUSH
11086: LD_VAR 0 1
11090: NONEQUAL
11091: IFFALSE 11107
// ComLinkToBase ( base , i ) ;
11093: LD_VAR 0 1
11097: PPUSH
11098: LD_VAR 0 6
11102: PPUSH
11103: CALL_OW 169
11107: GO 11073
11109: POP
11110: POP
// end ; result := tmp ;
11111: LD_ADDR_VAR 0 4
11115: PUSH
11116: LD_VAR 0 5
11120: ST_TO_ADDR
// end ;
11121: LD_VAR 0 4
11125: RET
// export function ComComplete ( units , b ) ; var i ; begin
11126: LD_INT 0
11128: PPUSH
11129: PPUSH
// if not units then
11130: LD_VAR 0 1
11134: NOT
11135: IFFALSE 11139
// exit ;
11137: GO 11229
// for i in units do
11139: LD_ADDR_VAR 0 4
11143: PUSH
11144: LD_VAR 0 1
11148: PUSH
11149: FOR_IN
11150: IFFALSE 11227
// if BuildingStatus ( b ) = bs_build then
11152: LD_VAR 0 2
11156: PPUSH
11157: CALL_OW 461
11161: PUSH
11162: LD_INT 1
11164: EQUAL
11165: IFFALSE 11225
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11167: LD_VAR 0 4
11171: PPUSH
11172: LD_STRING h
11174: PUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: CALL_OW 250
11184: PUSH
11185: LD_VAR 0 2
11189: PPUSH
11190: CALL_OW 251
11194: PUSH
11195: LD_VAR 0 2
11199: PUSH
11200: LD_INT 0
11202: PUSH
11203: LD_INT 0
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: PPUSH
11221: CALL_OW 446
11225: GO 11149
11227: POP
11228: POP
// end ;
11229: LD_VAR 0 3
11233: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11234: LD_INT 0
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11242: LD_VAR 0 1
11246: NOT
11247: PUSH
11248: LD_VAR 0 1
11252: PPUSH
11253: CALL_OW 263
11257: PUSH
11258: LD_INT 2
11260: NONEQUAL
11261: OR
11262: IFFALSE 11266
// exit ;
11264: GO 11582
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11266: LD_ADDR_VAR 0 6
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 255
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: LD_INT 36
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 34
11303: PUSH
11304: LD_INT 31
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 69
11324: ST_TO_ADDR
// if not tmp then
11325: LD_VAR 0 6
11329: NOT
11330: IFFALSE 11334
// exit ;
11332: GO 11582
// result := [ ] ;
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: EMPTY
11340: ST_TO_ADDR
// for i in tmp do
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_VAR 0 6
11350: PUSH
11351: FOR_IN
11352: IFFALSE 11423
// begin t := UnitsInside ( i ) ;
11354: LD_ADDR_VAR 0 4
11358: PUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: CALL_OW 313
11368: ST_TO_ADDR
// if t then
11369: LD_VAR 0 4
11373: IFFALSE 11421
// for j in t do
11375: LD_ADDR_VAR 0 7
11379: PUSH
11380: LD_VAR 0 4
11384: PUSH
11385: FOR_IN
11386: IFFALSE 11419
// result := Replace ( result , result + 1 , j ) ;
11388: LD_ADDR_VAR 0 2
11392: PUSH
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_VAR 0 2
11402: PUSH
11403: LD_INT 1
11405: PLUS
11406: PPUSH
11407: LD_VAR 0 7
11411: PPUSH
11412: CALL_OW 1
11416: ST_TO_ADDR
11417: GO 11385
11419: POP
11420: POP
// end ;
11421: GO 11351
11423: POP
11424: POP
// if not result then
11425: LD_VAR 0 2
11429: NOT
11430: IFFALSE 11434
// exit ;
11432: GO 11582
// mech := result [ 1 ] ;
11434: LD_ADDR_VAR 0 5
11438: PUSH
11439: LD_VAR 0 2
11443: PUSH
11444: LD_INT 1
11446: ARRAY
11447: ST_TO_ADDR
// if result > 1 then
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 1
11455: GREATER
11456: IFFALSE 11568
// begin for i = 2 to result do
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: DOUBLE
11464: LD_INT 2
11466: DEC
11467: ST_TO_ADDR
11468: LD_VAR 0 2
11472: PUSH
11473: FOR_TO
11474: IFFALSE 11566
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11476: LD_ADDR_VAR 0 4
11480: PUSH
11481: LD_VAR 0 2
11485: PUSH
11486: LD_VAR 0 3
11490: ARRAY
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: CALL_OW 259
11499: PUSH
11500: LD_VAR 0 2
11504: PUSH
11505: LD_VAR 0 3
11509: ARRAY
11510: PPUSH
11511: CALL_OW 432
11515: MINUS
11516: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11517: LD_VAR 0 4
11521: PUSH
11522: LD_VAR 0 5
11526: PPUSH
11527: LD_INT 3
11529: PPUSH
11530: CALL_OW 259
11534: PUSH
11535: LD_VAR 0 5
11539: PPUSH
11540: CALL_OW 432
11544: MINUS
11545: GREATEREQUAL
11546: IFFALSE 11564
// mech := result [ i ] ;
11548: LD_ADDR_VAR 0 5
11552: PUSH
11553: LD_VAR 0 2
11557: PUSH
11558: LD_VAR 0 3
11562: ARRAY
11563: ST_TO_ADDR
// end ;
11564: GO 11473
11566: POP
11567: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11568: LD_VAR 0 1
11572: PPUSH
11573: LD_VAR 0 5
11577: PPUSH
11578: CALL_OW 135
// end ;
11582: LD_VAR 0 2
11586: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// result := [ ] ;
11602: LD_ADDR_VAR 0 7
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11609: LD_VAR 0 1
11613: PPUSH
11614: CALL_OW 266
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: IN
11629: NOT
11630: IFFALSE 11634
// exit ;
11632: GO 13268
// if name then
11634: LD_VAR 0 3
11638: IFFALSE 11654
// SetBName ( base_dep , name ) ;
11640: LD_VAR 0 1
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: CALL_OW 500
// base := GetBase ( base_dep ) ;
11654: LD_ADDR_VAR 0 15
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 274
11668: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11669: LD_ADDR_VAR 0 16
11673: PUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 255
11683: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11684: LD_ADDR_VAR 0 17
11688: PUSH
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 248
11698: ST_TO_ADDR
// if sources then
11699: LD_VAR 0 5
11703: IFFALSE 11750
// for i = 1 to 3 do
11705: LD_ADDR_VAR 0 8
11709: PUSH
11710: DOUBLE
11711: LD_INT 1
11713: DEC
11714: ST_TO_ADDR
11715: LD_INT 3
11717: PUSH
11718: FOR_TO
11719: IFFALSE 11748
// AddResourceType ( base , i , sources [ i ] ) ;
11721: LD_VAR 0 15
11725: PPUSH
11726: LD_VAR 0 8
11730: PPUSH
11731: LD_VAR 0 5
11735: PUSH
11736: LD_VAR 0 8
11740: ARRAY
11741: PPUSH
11742: CALL_OW 276
11746: GO 11718
11748: POP
11749: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11750: LD_ADDR_VAR 0 18
11754: PUSH
11755: LD_VAR 0 15
11759: PPUSH
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL 11011 0 3
11772: ST_TO_ADDR
// InitHc ;
11773: CALL_OW 19
// InitUc ;
11777: CALL_OW 18
// uc_side := side ;
11781: LD_ADDR_OWVAR 20
11785: PUSH
11786: LD_VAR 0 16
11790: ST_TO_ADDR
// uc_nation := nation ;
11791: LD_ADDR_OWVAR 21
11795: PUSH
11796: LD_VAR 0 17
11800: ST_TO_ADDR
// if buildings then
11801: LD_VAR 0 18
11805: IFFALSE 13127
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11807: LD_ADDR_VAR 0 19
11811: PUSH
11812: LD_VAR 0 18
11816: PPUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 30
11822: PUSH
11823: LD_INT 29
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 30
11832: PUSH
11833: LD_INT 30
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 72
11849: ST_TO_ADDR
// if tmp then
11850: LD_VAR 0 19
11854: IFFALSE 11902
// for i in tmp do
11856: LD_ADDR_VAR 0 8
11860: PUSH
11861: LD_VAR 0 19
11865: PUSH
11866: FOR_IN
11867: IFFALSE 11900
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11869: LD_VAR 0 8
11873: PPUSH
11874: CALL_OW 250
11878: PPUSH
11879: LD_VAR 0 8
11883: PPUSH
11884: CALL_OW 251
11888: PPUSH
11889: LD_VAR 0 16
11893: PPUSH
11894: CALL_OW 441
11898: GO 11866
11900: POP
11901: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11902: LD_VAR 0 18
11906: PPUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 33
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 72
11939: IFFALSE 12027
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11941: LD_ADDR_VAR 0 8
11945: PUSH
11946: LD_VAR 0 18
11950: PPUSH
11951: LD_INT 2
11953: PUSH
11954: LD_INT 30
11956: PUSH
11957: LD_INT 32
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 30
11966: PUSH
11967: LD_INT 33
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 72
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12025
// begin if not GetBWeapon ( i ) then
11987: LD_VAR 0 8
11991: PPUSH
11992: CALL_OW 269
11996: NOT
11997: IFFALSE 12023
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11999: LD_VAR 0 8
12003: PPUSH
12004: LD_VAR 0 8
12008: PPUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: CALL 13273 0 2
12018: PPUSH
12019: CALL_OW 431
// end ;
12023: GO 11984
12025: POP
12026: POP
// end ; for i = 1 to personel do
12027: LD_ADDR_VAR 0 8
12031: PUSH
12032: DOUBLE
12033: LD_INT 1
12035: DEC
12036: ST_TO_ADDR
12037: LD_VAR 0 6
12041: PUSH
12042: FOR_TO
12043: IFFALSE 13107
// begin if i > 4 then
12045: LD_VAR 0 8
12049: PUSH
12050: LD_INT 4
12052: GREATER
12053: IFFALSE 12057
// break ;
12055: GO 13107
// case i of 1 :
12057: LD_VAR 0 8
12061: PUSH
12062: LD_INT 1
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12150
12070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12071: LD_ADDR_VAR 0 12
12075: PUSH
12076: LD_VAR 0 18
12080: PPUSH
12081: LD_INT 22
12083: PUSH
12084: LD_VAR 0 16
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 58
12095: PUSH
12096: EMPTY
12097: LIST
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 32
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 30
12124: PUSH
12125: LD_INT 5
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 72
12147: ST_TO_ADDR
12148: GO 12372
12150: LD_INT 2
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12220
12158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12159: LD_ADDR_VAR 0 12
12163: PUSH
12164: LD_VAR 0 18
12168: PPUSH
12169: LD_INT 22
12171: PUSH
12172: LD_VAR 0 16
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 0
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: ST_TO_ADDR
12218: GO 12372
12220: LD_INT 3
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12290
12228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12229: LD_ADDR_VAR 0 12
12233: PUSH
12234: LD_VAR 0 18
12238: PPUSH
12239: LD_INT 22
12241: PUSH
12242: LD_VAR 0 16
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 2
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 72
12287: ST_TO_ADDR
12288: GO 12372
12290: LD_INT 4
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12371
12298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12299: LD_ADDR_VAR 0 12
12303: PUSH
12304: LD_VAR 0 18
12308: PPUSH
12309: LD_INT 22
12311: PUSH
12312: LD_VAR 0 16
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 30
12326: PUSH
12327: LD_INT 6
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 7
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 8
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 72
12368: ST_TO_ADDR
12369: GO 12372
12371: POP
// if i = 1 then
12372: LD_VAR 0 8
12376: PUSH
12377: LD_INT 1
12379: EQUAL
12380: IFFALSE 12491
// begin tmp := [ ] ;
12382: LD_ADDR_VAR 0 19
12386: PUSH
12387: EMPTY
12388: ST_TO_ADDR
// for j in f do
12389: LD_ADDR_VAR 0 9
12393: PUSH
12394: LD_VAR 0 12
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12473
// if GetBType ( j ) = b_bunker then
12402: LD_VAR 0 9
12406: PPUSH
12407: CALL_OW 266
12411: PUSH
12412: LD_INT 32
12414: EQUAL
12415: IFFALSE 12442
// tmp := Insert ( tmp , 1 , j ) else
12417: LD_ADDR_VAR 0 19
12421: PUSH
12422: LD_VAR 0 19
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_VAR 0 9
12434: PPUSH
12435: CALL_OW 2
12439: ST_TO_ADDR
12440: GO 12471
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12442: LD_ADDR_VAR 0 19
12446: PUSH
12447: LD_VAR 0 19
12451: PPUSH
12452: LD_VAR 0 19
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: PPUSH
12461: LD_VAR 0 9
12465: PPUSH
12466: CALL_OW 2
12470: ST_TO_ADDR
12471: GO 12399
12473: POP
12474: POP
// if tmp then
12475: LD_VAR 0 19
12479: IFFALSE 12491
// f := tmp ;
12481: LD_ADDR_VAR 0 12
12485: PUSH
12486: LD_VAR 0 19
12490: ST_TO_ADDR
// end ; x := personel [ i ] ;
12491: LD_ADDR_VAR 0 13
12495: PUSH
12496: LD_VAR 0 6
12500: PUSH
12501: LD_VAR 0 8
12505: ARRAY
12506: ST_TO_ADDR
// if x = - 1 then
12507: LD_VAR 0 13
12511: PUSH
12512: LD_INT 1
12514: NEG
12515: EQUAL
12516: IFFALSE 12725
// begin for j in f do
12518: LD_ADDR_VAR 0 9
12522: PUSH
12523: LD_VAR 0 12
12527: PUSH
12528: FOR_IN
12529: IFFALSE 12721
// repeat InitHc ;
12531: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12535: LD_VAR 0 9
12539: PPUSH
12540: CALL_OW 266
12544: PUSH
12545: LD_INT 5
12547: EQUAL
12548: IFFALSE 12618
// begin if UnitsInside ( j ) < 3 then
12550: LD_VAR 0 9
12554: PPUSH
12555: CALL_OW 313
12559: PUSH
12560: LD_INT 3
12562: LESS
12563: IFFALSE 12599
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12565: LD_INT 0
12567: PPUSH
12568: LD_INT 5
12570: PUSH
12571: LD_INT 8
12573: PUSH
12574: LD_INT 9
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_VAR 0 17
12586: ARRAY
12587: PPUSH
12588: LD_VAR 0 4
12592: PPUSH
12593: CALL_OW 380
12597: GO 12616
// PrepareHuman ( false , i , skill ) ;
12599: LD_INT 0
12601: PPUSH
12602: LD_VAR 0 8
12606: PPUSH
12607: LD_VAR 0 4
12611: PPUSH
12612: CALL_OW 380
// end else
12616: GO 12635
// PrepareHuman ( false , i , skill ) ;
12618: LD_INT 0
12620: PPUSH
12621: LD_VAR 0 8
12625: PPUSH
12626: LD_VAR 0 4
12630: PPUSH
12631: CALL_OW 380
// un := CreateHuman ;
12635: LD_ADDR_VAR 0 14
12639: PUSH
12640: CALL_OW 44
12644: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12645: LD_ADDR_VAR 0 7
12649: PUSH
12650: LD_VAR 0 7
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: LD_VAR 0 14
12662: PPUSH
12663: CALL_OW 2
12667: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12668: LD_VAR 0 14
12672: PPUSH
12673: LD_VAR 0 9
12677: PPUSH
12678: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12682: LD_VAR 0 9
12686: PPUSH
12687: CALL_OW 313
12691: PUSH
12692: LD_INT 6
12694: EQUAL
12695: PUSH
12696: LD_VAR 0 9
12700: PPUSH
12701: CALL_OW 266
12705: PUSH
12706: LD_INT 32
12708: PUSH
12709: LD_INT 31
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: IN
12716: OR
12717: IFFALSE 12531
12719: GO 12528
12721: POP
12722: POP
// end else
12723: GO 13105
// for j = 1 to x do
12725: LD_ADDR_VAR 0 9
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_VAR 0 13
12739: PUSH
12740: FOR_TO
12741: IFFALSE 13103
// begin InitHc ;
12743: CALL_OW 19
// if not f then
12747: LD_VAR 0 12
12751: NOT
12752: IFFALSE 12841
// begin PrepareHuman ( false , i , skill ) ;
12754: LD_INT 0
12756: PPUSH
12757: LD_VAR 0 8
12761: PPUSH
12762: LD_VAR 0 4
12766: PPUSH
12767: CALL_OW 380
// un := CreateHuman ;
12771: LD_ADDR_VAR 0 14
12775: PUSH
12776: CALL_OW 44
12780: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12781: LD_ADDR_VAR 0 7
12785: PUSH
12786: LD_VAR 0 7
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_VAR 0 14
12798: PPUSH
12799: CALL_OW 2
12803: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12804: LD_VAR 0 14
12808: PPUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 250
12818: PPUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 251
12828: PPUSH
12829: LD_INT 10
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 50
// continue ;
12839: GO 12740
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12841: LD_VAR 0 12
12845: PUSH
12846: LD_INT 1
12848: ARRAY
12849: PPUSH
12850: CALL_OW 313
12854: PUSH
12855: LD_VAR 0 12
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 266
12868: PUSH
12869: LD_INT 32
12871: PUSH
12872: LD_INT 31
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: IN
12879: AND
12880: PUSH
12881: LD_VAR 0 12
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: CALL_OW 313
12894: PUSH
12895: LD_INT 6
12897: EQUAL
12898: OR
12899: IFFALSE 12919
// f := Delete ( f , 1 ) ;
12901: LD_ADDR_VAR 0 12
12905: PUSH
12906: LD_VAR 0 12
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 3
12918: ST_TO_ADDR
// if not f then
12919: LD_VAR 0 12
12923: NOT
12924: IFFALSE 12942
// begin x := x + 2 ;
12926: LD_ADDR_VAR 0 13
12930: PUSH
12931: LD_VAR 0 13
12935: PUSH
12936: LD_INT 2
12938: PLUS
12939: ST_TO_ADDR
// continue ;
12940: GO 12740
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12942: LD_VAR 0 12
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: CALL_OW 266
12955: PUSH
12956: LD_INT 5
12958: EQUAL
12959: IFFALSE 13033
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12961: LD_VAR 0 12
12965: PUSH
12966: LD_INT 1
12968: ARRAY
12969: PPUSH
12970: CALL_OW 313
12974: PUSH
12975: LD_INT 3
12977: LESS
12978: IFFALSE 13014
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12980: LD_INT 0
12982: PPUSH
12983: LD_INT 5
12985: PUSH
12986: LD_INT 8
12988: PUSH
12989: LD_INT 9
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: PUSH
12997: LD_VAR 0 17
13001: ARRAY
13002: PPUSH
13003: LD_VAR 0 4
13007: PPUSH
13008: CALL_OW 380
13012: GO 13031
// PrepareHuman ( false , i , skill ) ;
13014: LD_INT 0
13016: PPUSH
13017: LD_VAR 0 8
13021: PPUSH
13022: LD_VAR 0 4
13026: PPUSH
13027: CALL_OW 380
// end else
13031: GO 13050
// PrepareHuman ( false , i , skill ) ;
13033: LD_INT 0
13035: PPUSH
13036: LD_VAR 0 8
13040: PPUSH
13041: LD_VAR 0 4
13045: PPUSH
13046: CALL_OW 380
// un := CreateHuman ;
13050: LD_ADDR_VAR 0 14
13054: PUSH
13055: CALL_OW 44
13059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13060: LD_ADDR_VAR 0 7
13064: PUSH
13065: LD_VAR 0 7
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_VAR 0 14
13077: PPUSH
13078: CALL_OW 2
13082: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13083: LD_VAR 0 14
13087: PPUSH
13088: LD_VAR 0 12
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 52
// end ;
13101: GO 12740
13103: POP
13104: POP
// end ;
13105: GO 12042
13107: POP
13108: POP
// result := result ^ buildings ;
13109: LD_ADDR_VAR 0 7
13113: PUSH
13114: LD_VAR 0 7
13118: PUSH
13119: LD_VAR 0 18
13123: ADD
13124: ST_TO_ADDR
// end else
13125: GO 13268
// begin for i = 1 to personel do
13127: LD_ADDR_VAR 0 8
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_VAR 0 6
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13266
// begin if i > 4 then
13145: LD_VAR 0 8
13149: PUSH
13150: LD_INT 4
13152: GREATER
13153: IFFALSE 13157
// break ;
13155: GO 13266
// x := personel [ i ] ;
13157: LD_ADDR_VAR 0 13
13161: PUSH
13162: LD_VAR 0 6
13166: PUSH
13167: LD_VAR 0 8
13171: ARRAY
13172: ST_TO_ADDR
// if x = - 1 then
13173: LD_VAR 0 13
13177: PUSH
13178: LD_INT 1
13180: NEG
13181: EQUAL
13182: IFFALSE 13186
// continue ;
13184: GO 13142
// PrepareHuman ( false , i , skill ) ;
13186: LD_INT 0
13188: PPUSH
13189: LD_VAR 0 8
13193: PPUSH
13194: LD_VAR 0 4
13198: PPUSH
13199: CALL_OW 380
// un := CreateHuman ;
13203: LD_ADDR_VAR 0 14
13207: PUSH
13208: CALL_OW 44
13212: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13213: LD_VAR 0 14
13217: PPUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 250
13227: PPUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 251
13237: PPUSH
13238: LD_INT 10
13240: PPUSH
13241: LD_INT 0
13243: PPUSH
13244: CALL_OW 50
// result := result ^ un ;
13248: LD_ADDR_VAR 0 7
13252: PUSH
13253: LD_VAR 0 7
13257: PUSH
13258: LD_VAR 0 14
13262: ADD
13263: ST_TO_ADDR
// end ;
13264: GO 13142
13266: POP
13267: POP
// end ; end ;
13268: LD_VAR 0 7
13272: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
// result := false ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13299: LD_VAR 0 1
13303: NOT
13304: PUSH
13305: LD_VAR 0 1
13309: PPUSH
13310: CALL_OW 266
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 33
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: IN
13325: NOT
13326: OR
13327: IFFALSE 13331
// exit ;
13329: GO 14440
// nat := GetNation ( tower ) ;
13331: LD_ADDR_VAR 0 12
13335: PUSH
13336: LD_VAR 0 1
13340: PPUSH
13341: CALL_OW 248
13345: ST_TO_ADDR
// side := GetSide ( tower ) ;
13346: LD_ADDR_VAR 0 16
13350: PUSH
13351: LD_VAR 0 1
13355: PPUSH
13356: CALL_OW 255
13360: ST_TO_ADDR
// x := GetX ( tower ) ;
13361: LD_ADDR_VAR 0 10
13365: PUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: CALL_OW 250
13375: ST_TO_ADDR
// y := GetY ( tower ) ;
13376: LD_ADDR_VAR 0 11
13380: PUSH
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 251
13390: ST_TO_ADDR
// if not x or not y then
13391: LD_VAR 0 10
13395: NOT
13396: PUSH
13397: LD_VAR 0 11
13401: NOT
13402: OR
13403: IFFALSE 13407
// exit ;
13405: GO 14440
// weapon := 0 ;
13407: LD_ADDR_VAR 0 18
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// fac_list := [ ] ;
13415: LD_ADDR_VAR 0 17
13419: PUSH
13420: EMPTY
13421: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13422: LD_ADDR_VAR 0 6
13426: PUSH
13427: LD_VAR 0 1
13431: PPUSH
13432: CALL_OW 274
13436: PPUSH
13437: LD_VAR 0 2
13441: PPUSH
13442: LD_INT 0
13444: PPUSH
13445: CALL 11011 0 3
13449: PPUSH
13450: LD_INT 30
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 72
13464: ST_TO_ADDR
// if not factories then
13465: LD_VAR 0 6
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 14440
// for i in factories do
13474: LD_ADDR_VAR 0 8
13478: PUSH
13479: LD_VAR 0 6
13483: PUSH
13484: FOR_IN
13485: IFFALSE 13510
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13487: LD_ADDR_VAR 0 17
13491: PUSH
13492: LD_VAR 0 17
13496: PUSH
13497: LD_VAR 0 8
13501: PPUSH
13502: CALL_OW 478
13506: UNION
13507: ST_TO_ADDR
13508: GO 13484
13510: POP
13511: POP
// if not fac_list then
13512: LD_VAR 0 17
13516: NOT
13517: IFFALSE 13521
// exit ;
13519: GO 14440
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13521: LD_ADDR_VAR 0 5
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: LD_INT 5
13531: PUSH
13532: LD_INT 9
13534: PUSH
13535: LD_INT 10
13537: PUSH
13538: LD_INT 6
13540: PUSH
13541: LD_INT 7
13543: PUSH
13544: LD_INT 11
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 27
13558: PUSH
13559: LD_INT 28
13561: PUSH
13562: LD_INT 26
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 43
13576: PUSH
13577: LD_INT 44
13579: PUSH
13580: LD_INT 46
13582: PUSH
13583: LD_INT 45
13585: PUSH
13586: LD_INT 47
13588: PUSH
13589: LD_INT 49
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: LD_VAR 0 12
13609: ARRAY
13610: ST_TO_ADDR
// list := list isect fac_list ;
13611: LD_ADDR_VAR 0 5
13615: PUSH
13616: LD_VAR 0 5
13620: PUSH
13621: LD_VAR 0 17
13625: ISECT
13626: ST_TO_ADDR
// if not list then
13627: LD_VAR 0 5
13631: NOT
13632: IFFALSE 13636
// exit ;
13634: GO 14440
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13636: LD_VAR 0 12
13640: PUSH
13641: LD_INT 3
13643: EQUAL
13644: PUSH
13645: LD_INT 49
13647: PUSH
13648: LD_VAR 0 5
13652: IN
13653: AND
13654: PUSH
13655: LD_INT 31
13657: PPUSH
13658: LD_VAR 0 16
13662: PPUSH
13663: CALL_OW 321
13667: PUSH
13668: LD_INT 2
13670: EQUAL
13671: AND
13672: IFFALSE 13732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13674: LD_INT 22
13676: PUSH
13677: LD_VAR 0 16
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 35
13688: PUSH
13689: LD_INT 49
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 91
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 10
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: NOT
13722: IFFALSE 13732
// weapon := ru_time_lapser ;
13724: LD_ADDR_VAR 0 18
13728: PUSH
13729: LD_INT 49
13731: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13732: LD_VAR 0 12
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: IN
13747: PUSH
13748: LD_INT 11
13750: PUSH
13751: LD_VAR 0 5
13755: IN
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_VAR 0 5
13764: IN
13765: OR
13766: AND
13767: PUSH
13768: LD_INT 6
13770: PPUSH
13771: LD_VAR 0 16
13775: PPUSH
13776: CALL_OW 321
13780: PUSH
13781: LD_INT 2
13783: EQUAL
13784: AND
13785: IFFALSE 13950
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13787: LD_INT 22
13789: PUSH
13790: LD_VAR 0 16
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 35
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 35
13814: PUSH
13815: LD_INT 30
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 91
13829: PUSH
13830: LD_VAR 0 1
13834: PUSH
13835: LD_INT 18
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: NOT
13853: PUSH
13854: LD_INT 22
13856: PUSH
13857: LD_VAR 0 16
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 2
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_INT 32
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 30
13881: PUSH
13882: LD_INT 33
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 91
13896: PUSH
13897: LD_VAR 0 1
13901: PUSH
13902: LD_INT 12
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PUSH
13923: LD_INT 2
13925: GREATER
13926: AND
13927: IFFALSE 13950
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13929: LD_ADDR_VAR 0 18
13933: PUSH
13934: LD_INT 11
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_VAR 0 12
13948: ARRAY
13949: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13950: LD_VAR 0 18
13954: NOT
13955: PUSH
13956: LD_INT 40
13958: PPUSH
13959: LD_VAR 0 16
13963: PPUSH
13964: CALL_OW 321
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: AND
13973: PUSH
13974: LD_INT 7
13976: PUSH
13977: LD_VAR 0 5
13981: IN
13982: PUSH
13983: LD_INT 28
13985: PUSH
13986: LD_VAR 0 5
13990: IN
13991: OR
13992: PUSH
13993: LD_INT 45
13995: PUSH
13996: LD_VAR 0 5
14000: IN
14001: OR
14002: AND
14003: IFFALSE 14257
// begin hex := GetHexInfo ( x , y ) ;
14005: LD_ADDR_VAR 0 4
14009: PUSH
14010: LD_VAR 0 10
14014: PPUSH
14015: LD_VAR 0 11
14019: PPUSH
14020: CALL_OW 546
14024: ST_TO_ADDR
// if hex [ 1 ] then
14025: LD_VAR 0 4
14029: PUSH
14030: LD_INT 1
14032: ARRAY
14033: IFFALSE 14037
// exit ;
14035: GO 14440
// height := hex [ 2 ] ;
14037: LD_ADDR_VAR 0 15
14041: PUSH
14042: LD_VAR 0 4
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14051: LD_ADDR_VAR 0 14
14055: PUSH
14056: LD_INT 0
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: LD_INT 5
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: ST_TO_ADDR
// for i in tmp do
14074: LD_ADDR_VAR 0 8
14078: PUSH
14079: LD_VAR 0 14
14083: PUSH
14084: FOR_IN
14085: IFFALSE 14255
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14087: LD_ADDR_VAR 0 9
14091: PUSH
14092: LD_VAR 0 10
14096: PPUSH
14097: LD_VAR 0 8
14101: PPUSH
14102: LD_INT 5
14104: PPUSH
14105: CALL_OW 272
14109: PUSH
14110: LD_VAR 0 11
14114: PPUSH
14115: LD_VAR 0 8
14119: PPUSH
14120: LD_INT 5
14122: PPUSH
14123: CALL_OW 273
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14132: LD_VAR 0 9
14136: PUSH
14137: LD_INT 1
14139: ARRAY
14140: PPUSH
14141: LD_VAR 0 9
14145: PUSH
14146: LD_INT 2
14148: ARRAY
14149: PPUSH
14150: CALL_OW 488
14154: IFFALSE 14253
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14156: LD_ADDR_VAR 0 4
14160: PUSH
14161: LD_VAR 0 9
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: PPUSH
14170: LD_VAR 0 9
14174: PUSH
14175: LD_INT 2
14177: ARRAY
14178: PPUSH
14179: CALL_OW 546
14183: ST_TO_ADDR
// if hex [ 1 ] then
14184: LD_VAR 0 4
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: IFFALSE 14196
// continue ;
14194: GO 14084
// h := hex [ 2 ] ;
14196: LD_ADDR_VAR 0 13
14200: PUSH
14201: LD_VAR 0 4
14205: PUSH
14206: LD_INT 2
14208: ARRAY
14209: ST_TO_ADDR
// if h + 7 < height then
14210: LD_VAR 0 13
14214: PUSH
14215: LD_INT 7
14217: PLUS
14218: PUSH
14219: LD_VAR 0 15
14223: LESS
14224: IFFALSE 14253
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14226: LD_ADDR_VAR 0 18
14230: PUSH
14231: LD_INT 7
14233: PUSH
14234: LD_INT 28
14236: PUSH
14237: LD_INT 45
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_VAR 0 12
14249: ARRAY
14250: ST_TO_ADDR
// break ;
14251: GO 14255
// end ; end ; end ;
14253: GO 14084
14255: POP
14256: POP
// end ; if not weapon then
14257: LD_VAR 0 18
14261: NOT
14262: IFFALSE 14322
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14264: LD_ADDR_VAR 0 5
14268: PUSH
14269: LD_VAR 0 5
14273: PUSH
14274: LD_INT 11
14276: PUSH
14277: LD_INT 30
14279: PUSH
14280: LD_INT 49
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: DIFF
14288: ST_TO_ADDR
// if not list then
14289: LD_VAR 0 5
14293: NOT
14294: IFFALSE 14298
// exit ;
14296: GO 14440
// weapon := list [ rand ( 1 , list ) ] ;
14298: LD_ADDR_VAR 0 18
14302: PUSH
14303: LD_VAR 0 5
14307: PUSH
14308: LD_INT 1
14310: PPUSH
14311: LD_VAR 0 5
14315: PPUSH
14316: CALL_OW 12
14320: ARRAY
14321: ST_TO_ADDR
// end ; if weapon then
14322: LD_VAR 0 18
14326: IFFALSE 14440
// begin tmp := CostOfWeapon ( weapon ) ;
14328: LD_ADDR_VAR 0 14
14332: PUSH
14333: LD_VAR 0 18
14337: PPUSH
14338: CALL_OW 451
14342: ST_TO_ADDR
// j := GetBase ( tower ) ;
14343: LD_ADDR_VAR 0 9
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 274
14357: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14358: LD_VAR 0 9
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 275
14370: PUSH
14371: LD_VAR 0 14
14375: PUSH
14376: LD_INT 1
14378: ARRAY
14379: GREATEREQUAL
14380: PUSH
14381: LD_VAR 0 9
14385: PPUSH
14386: LD_INT 2
14388: PPUSH
14389: CALL_OW 275
14393: PUSH
14394: LD_VAR 0 14
14398: PUSH
14399: LD_INT 2
14401: ARRAY
14402: GREATEREQUAL
14403: AND
14404: PUSH
14405: LD_VAR 0 9
14409: PPUSH
14410: LD_INT 3
14412: PPUSH
14413: CALL_OW 275
14417: PUSH
14418: LD_VAR 0 14
14422: PUSH
14423: LD_INT 3
14425: ARRAY
14426: GREATEREQUAL
14427: AND
14428: IFFALSE 14440
// result := weapon ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_VAR 0 18
14439: ST_TO_ADDR
// end ; end ;
14440: LD_VAR 0 3
14444: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14445: LD_INT 0
14447: PPUSH
14448: PPUSH
// result := true ;
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// if array1 = array2 then
14457: LD_VAR 0 1
14461: PUSH
14462: LD_VAR 0 2
14466: EQUAL
14467: IFFALSE 14527
// begin for i = 1 to array1 do
14469: LD_ADDR_VAR 0 4
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_VAR 0 1
14483: PUSH
14484: FOR_TO
14485: IFFALSE 14523
// if array1 [ i ] <> array2 [ i ] then
14487: LD_VAR 0 1
14491: PUSH
14492: LD_VAR 0 4
14496: ARRAY
14497: PUSH
14498: LD_VAR 0 2
14502: PUSH
14503: LD_VAR 0 4
14507: ARRAY
14508: NONEQUAL
14509: IFFALSE 14521
// begin result := false ;
14511: LD_ADDR_VAR 0 3
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// break ;
14519: GO 14523
// end ;
14521: GO 14484
14523: POP
14524: POP
// end else
14525: GO 14535
// result := false ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// end ;
14535: LD_VAR 0 3
14539: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
// if not array1 or not array2 then
14544: LD_VAR 0 1
14548: NOT
14549: PUSH
14550: LD_VAR 0 2
14554: NOT
14555: OR
14556: IFFALSE 14560
// exit ;
14558: GO 14624
// result := true ;
14560: LD_ADDR_VAR 0 3
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// for i = 1 to array1 do
14568: LD_ADDR_VAR 0 4
14572: PUSH
14573: DOUBLE
14574: LD_INT 1
14576: DEC
14577: ST_TO_ADDR
14578: LD_VAR 0 1
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14622
// if array1 [ i ] <> array2 [ i ] then
14586: LD_VAR 0 1
14590: PUSH
14591: LD_VAR 0 4
14595: ARRAY
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_VAR 0 4
14606: ARRAY
14607: NONEQUAL
14608: IFFALSE 14620
// begin result := false ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// break ;
14618: GO 14622
// end ;
14620: GO 14583
14622: POP
14623: POP
// end ;
14624: LD_VAR 0 3
14628: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14629: LD_INT 0
14631: PPUSH
14632: PPUSH
14633: PPUSH
// pom := GetBase ( fac ) ;
14634: LD_ADDR_VAR 0 5
14638: PUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 274
14648: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14649: LD_ADDR_VAR 0 4
14653: PUSH
14654: LD_VAR 0 2
14658: PUSH
14659: LD_INT 1
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 2
14667: PUSH
14668: LD_INT 2
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 3
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 2
14685: PUSH
14686: LD_INT 4
14688: ARRAY
14689: PPUSH
14690: CALL_OW 449
14694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_VAR 0 5
14704: PPUSH
14705: LD_INT 1
14707: PPUSH
14708: CALL_OW 275
14712: PUSH
14713: LD_VAR 0 4
14717: PUSH
14718: LD_INT 1
14720: ARRAY
14721: GREATEREQUAL
14722: PUSH
14723: LD_VAR 0 5
14727: PPUSH
14728: LD_INT 2
14730: PPUSH
14731: CALL_OW 275
14735: PUSH
14736: LD_VAR 0 4
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: GREATEREQUAL
14745: AND
14746: PUSH
14747: LD_VAR 0 5
14751: PPUSH
14752: LD_INT 3
14754: PPUSH
14755: CALL_OW 275
14759: PUSH
14760: LD_VAR 0 4
14764: PUSH
14765: LD_INT 3
14767: ARRAY
14768: GREATEREQUAL
14769: AND
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 3
14775: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
// pom := GetBase ( building ) ;
14782: LD_ADDR_VAR 0 3
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 274
14796: ST_TO_ADDR
// if not pom then
14797: LD_VAR 0 3
14801: NOT
14802: IFFALSE 14806
// exit ;
14804: GO 14976
// btype := GetBType ( building ) ;
14806: LD_ADDR_VAR 0 5
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 266
14820: ST_TO_ADDR
// if btype = b_armoury then
14821: LD_VAR 0 5
14825: PUSH
14826: LD_INT 4
14828: EQUAL
14829: IFFALSE 14839
// btype := b_barracks ;
14831: LD_ADDR_VAR 0 5
14835: PUSH
14836: LD_INT 5
14838: ST_TO_ADDR
// if btype = b_depot then
14839: LD_VAR 0 5
14843: PUSH
14844: LD_INT 0
14846: EQUAL
14847: IFFALSE 14857
// btype := b_warehouse ;
14849: LD_ADDR_VAR 0 5
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// if btype = b_workshop then
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 2
14864: EQUAL
14865: IFFALSE 14875
// btype := b_factory ;
14867: LD_ADDR_VAR 0 5
14871: PUSH
14872: LD_INT 3
14874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 248
14894: PPUSH
14895: CALL_OW 450
14899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 275
14917: PUSH
14918: LD_VAR 0 4
14922: PUSH
14923: LD_INT 1
14925: ARRAY
14926: GREATEREQUAL
14927: PUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_INT 2
14935: PPUSH
14936: CALL_OW 275
14940: PUSH
14941: LD_VAR 0 4
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: GREATEREQUAL
14950: AND
14951: PUSH
14952: LD_VAR 0 3
14956: PPUSH
14957: LD_INT 3
14959: PPUSH
14960: CALL_OW 275
14964: PUSH
14965: LD_VAR 0 4
14969: PUSH
14970: LD_INT 3
14972: ARRAY
14973: GREATEREQUAL
14974: AND
14975: ST_TO_ADDR
// end ;
14976: LD_VAR 0 2
14980: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
14985: PPUSH
// pom := GetBase ( building ) ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 274
15000: ST_TO_ADDR
// if not pom then
15001: LD_VAR 0 4
15005: NOT
15006: IFFALSE 15010
// exit ;
15008: GO 15111
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15010: LD_ADDR_VAR 0 5
15014: PUSH
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 248
15029: PPUSH
15030: CALL_OW 450
15034: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 275
15052: PUSH
15053: LD_VAR 0 5
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: GREATEREQUAL
15062: PUSH
15063: LD_VAR 0 4
15067: PPUSH
15068: LD_INT 2
15070: PPUSH
15071: CALL_OW 275
15075: PUSH
15076: LD_VAR 0 5
15080: PUSH
15081: LD_INT 2
15083: ARRAY
15084: GREATEREQUAL
15085: AND
15086: PUSH
15087: LD_VAR 0 4
15091: PPUSH
15092: LD_INT 3
15094: PPUSH
15095: CALL_OW 275
15099: PUSH
15100: LD_VAR 0 5
15104: PUSH
15105: LD_INT 3
15107: ARRAY
15108: GREATEREQUAL
15109: AND
15110: ST_TO_ADDR
// end ;
15111: LD_VAR 0 3
15115: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15116: LD_INT 0
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
// result := false ;
15129: LD_ADDR_VAR 0 8
15133: PUSH
15134: LD_INT 0
15136: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15137: LD_VAR 0 5
15141: NOT
15142: PUSH
15143: LD_VAR 0 1
15147: NOT
15148: OR
15149: PUSH
15150: LD_VAR 0 2
15154: NOT
15155: OR
15156: PUSH
15157: LD_VAR 0 3
15161: NOT
15162: OR
15163: IFFALSE 15167
// exit ;
15165: GO 15981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15167: LD_ADDR_VAR 0 14
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_VAR 0 4
15191: PPUSH
15192: LD_VAR 0 5
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PPUSH
15201: CALL_OW 248
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: CALL 17234 0 6
15213: ST_TO_ADDR
// if not hexes then
15214: LD_VAR 0 14
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15223: LD_ADDR_VAR 0 17
15227: PUSH
15228: LD_VAR 0 5
15232: PPUSH
15233: LD_INT 22
15235: PUSH
15236: LD_VAR 0 13
15240: PPUSH
15241: CALL_OW 255
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: LD_INT 30
15255: PUSH
15256: LD_INT 0
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 30
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PPUSH
15282: CALL_OW 72
15286: ST_TO_ADDR
// for i = 1 to hexes do
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: DOUBLE
15293: LD_INT 1
15295: DEC
15296: ST_TO_ADDR
15297: LD_VAR 0 14
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15305: LD_ADDR_VAR 0 13
15309: PUSH
15310: LD_VAR 0 14
15314: PUSH
15315: LD_VAR 0 9
15319: ARRAY
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: LD_VAR 0 14
15329: PUSH
15330: LD_VAR 0 9
15334: ARRAY
15335: PUSH
15336: LD_INT 2
15338: ARRAY
15339: PPUSH
15340: CALL_OW 428
15344: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15345: LD_VAR 0 14
15349: PUSH
15350: LD_VAR 0 9
15354: ARRAY
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_VAR 0 14
15364: PUSH
15365: LD_VAR 0 9
15369: ARRAY
15370: PUSH
15371: LD_INT 2
15373: ARRAY
15374: PPUSH
15375: CALL_OW 351
15379: PUSH
15380: LD_VAR 0 14
15384: PUSH
15385: LD_VAR 0 9
15389: ARRAY
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 14
15399: PUSH
15400: LD_VAR 0 9
15404: ARRAY
15405: PUSH
15406: LD_INT 2
15408: ARRAY
15409: PPUSH
15410: CALL_OW 488
15414: NOT
15415: OR
15416: PUSH
15417: LD_VAR 0 13
15421: PPUSH
15422: CALL_OW 247
15426: PUSH
15427: LD_INT 3
15429: EQUAL
15430: OR
15431: IFFALSE 15437
// exit ;
15433: POP
15434: POP
15435: GO 15981
// if not tmp then
15437: LD_VAR 0 13
15441: NOT
15442: IFFALSE 15446
// continue ;
15444: GO 15302
// result := true ;
15446: LD_ADDR_VAR 0 8
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15454: LD_VAR 0 6
15458: PUSH
15459: LD_VAR 0 13
15463: PPUSH
15464: CALL_OW 247
15468: PUSH
15469: LD_INT 2
15471: EQUAL
15472: AND
15473: PUSH
15474: LD_VAR 0 13
15478: PPUSH
15479: CALL_OW 263
15483: PUSH
15484: LD_INT 1
15486: EQUAL
15487: AND
15488: IFFALSE 15652
// begin if IsDrivenBy ( tmp ) then
15490: LD_VAR 0 13
15494: PPUSH
15495: CALL_OW 311
15499: IFFALSE 15503
// continue ;
15501: GO 15302
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15503: LD_VAR 0 6
15507: PPUSH
15508: LD_INT 3
15510: PUSH
15511: LD_INT 60
15513: PUSH
15514: EMPTY
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: LD_INT 55
15526: PUSH
15527: EMPTY
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 72
15542: IFFALSE 15650
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15544: LD_ADDR_VAR 0 18
15548: PUSH
15549: LD_VAR 0 6
15553: PPUSH
15554: LD_INT 3
15556: PUSH
15557: LD_INT 60
15559: PUSH
15560: EMPTY
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 55
15572: PUSH
15573: EMPTY
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 72
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: ST_TO_ADDR
// if IsInUnit ( driver ) then
15593: LD_VAR 0 18
15597: PPUSH
15598: CALL_OW 310
15602: IFFALSE 15613
// ComExit ( driver ) ;
15604: LD_VAR 0 18
15608: PPUSH
15609: CALL 41035 0 1
// AddComEnterUnit ( driver , tmp ) ;
15613: LD_VAR 0 18
15617: PPUSH
15618: LD_VAR 0 13
15622: PPUSH
15623: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15627: LD_VAR 0 18
15631: PPUSH
15632: LD_VAR 0 7
15636: PPUSH
15637: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15641: LD_VAR 0 18
15645: PPUSH
15646: CALL_OW 181
// end ; continue ;
15650: GO 15302
// end ; if not cleaners or not tmp in cleaners then
15652: LD_VAR 0 6
15656: NOT
15657: PUSH
15658: LD_VAR 0 13
15662: PUSH
15663: LD_VAR 0 6
15667: IN
15668: NOT
15669: OR
15670: IFFALSE 15977
// begin if dep then
15672: LD_VAR 0 17
15676: IFFALSE 15812
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15678: LD_ADDR_VAR 0 16
15682: PUSH
15683: LD_VAR 0 17
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: CALL_OW 250
15696: PPUSH
15697: LD_VAR 0 17
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 254
15710: PPUSH
15711: LD_INT 5
15713: PPUSH
15714: CALL_OW 272
15718: PUSH
15719: LD_VAR 0 17
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: CALL_OW 251
15732: PPUSH
15733: LD_VAR 0 17
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: CALL_OW 254
15746: PPUSH
15747: LD_INT 5
15749: PPUSH
15750: CALL_OW 273
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15759: LD_VAR 0 16
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: LD_VAR 0 16
15772: PUSH
15773: LD_INT 2
15775: ARRAY
15776: PPUSH
15777: CALL_OW 488
15781: IFFALSE 15812
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15783: LD_VAR 0 13
15787: PPUSH
15788: LD_VAR 0 16
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: PPUSH
15797: LD_VAR 0 16
15801: PUSH
15802: LD_INT 2
15804: ARRAY
15805: PPUSH
15806: CALL_OW 111
// continue ;
15810: GO 15302
// end ; end ; r := GetDir ( tmp ) ;
15812: LD_ADDR_VAR 0 15
15816: PUSH
15817: LD_VAR 0 13
15821: PPUSH
15822: CALL_OW 254
15826: ST_TO_ADDR
// if r = 5 then
15827: LD_VAR 0 15
15831: PUSH
15832: LD_INT 5
15834: EQUAL
15835: IFFALSE 15845
// r := 0 ;
15837: LD_ADDR_VAR 0 15
15841: PUSH
15842: LD_INT 0
15844: ST_TO_ADDR
// for j = r to 5 do
15845: LD_ADDR_VAR 0 10
15849: PUSH
15850: DOUBLE
15851: LD_VAR 0 15
15855: DEC
15856: ST_TO_ADDR
15857: LD_INT 5
15859: PUSH
15860: FOR_TO
15861: IFFALSE 15975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15863: LD_ADDR_VAR 0 11
15867: PUSH
15868: LD_VAR 0 13
15872: PPUSH
15873: CALL_OW 250
15877: PPUSH
15878: LD_VAR 0 10
15882: PPUSH
15883: LD_INT 2
15885: PPUSH
15886: CALL_OW 272
15890: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15891: LD_ADDR_VAR 0 12
15895: PUSH
15896: LD_VAR 0 13
15900: PPUSH
15901: CALL_OW 251
15905: PPUSH
15906: LD_VAR 0 10
15910: PPUSH
15911: LD_INT 2
15913: PPUSH
15914: CALL_OW 273
15918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15919: LD_VAR 0 11
15923: PPUSH
15924: LD_VAR 0 12
15928: PPUSH
15929: CALL_OW 488
15933: PUSH
15934: LD_VAR 0 11
15938: PPUSH
15939: LD_VAR 0 12
15943: PPUSH
15944: CALL_OW 428
15948: NOT
15949: AND
15950: IFFALSE 15973
// begin ComMoveXY ( tmp , _x , _y ) ;
15952: LD_VAR 0 13
15956: PPUSH
15957: LD_VAR 0 11
15961: PPUSH
15962: LD_VAR 0 12
15966: PPUSH
15967: CALL_OW 111
// break ;
15971: GO 15975
// end ; end ;
15973: GO 15860
15975: POP
15976: POP
// end ; end ;
15977: GO 15302
15979: POP
15980: POP
// end ;
15981: LD_VAR 0 8
15985: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15986: LD_INT 0
15988: PPUSH
// result := true ;
15989: LD_ADDR_VAR 0 3
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15997: LD_VAR 0 2
16001: PUSH
16002: LD_INT 24
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16016
16008: LD_INT 33
16010: DOUBLE
16011: EQUAL
16012: IFTRUE 16016
16014: GO 16041
16016: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16017: LD_ADDR_VAR 0 3
16021: PUSH
16022: LD_INT 32
16024: PPUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 321
16034: PUSH
16035: LD_INT 2
16037: EQUAL
16038: ST_TO_ADDR
16039: GO 16357
16041: LD_INT 20
16043: DOUBLE
16044: EQUAL
16045: IFTRUE 16049
16047: GO 16074
16049: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16050: LD_ADDR_VAR 0 3
16054: PUSH
16055: LD_INT 6
16057: PPUSH
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 321
16067: PUSH
16068: LD_INT 2
16070: EQUAL
16071: ST_TO_ADDR
16072: GO 16357
16074: LD_INT 22
16076: DOUBLE
16077: EQUAL
16078: IFTRUE 16088
16080: LD_INT 36
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16113
16088: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 15
16096: PPUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 321
16106: PUSH
16107: LD_INT 2
16109: EQUAL
16110: ST_TO_ADDR
16111: GO 16357
16113: LD_INT 30
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16146
16121: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 20
16129: PPUSH
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 321
16139: PUSH
16140: LD_INT 2
16142: EQUAL
16143: ST_TO_ADDR
16144: GO 16357
16146: LD_INT 28
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16160
16152: LD_INT 21
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16185
16160: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_INT 21
16168: PPUSH
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 321
16178: PUSH
16179: LD_INT 2
16181: EQUAL
16182: ST_TO_ADDR
16183: GO 16357
16185: LD_INT 16
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16218
16193: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: LD_INT 84
16201: PPUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 321
16211: PUSH
16212: LD_INT 2
16214: EQUAL
16215: ST_TO_ADDR
16216: GO 16357
16218: LD_INT 19
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16232
16224: LD_INT 23
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16257
16232: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 83
16240: PPUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 321
16250: PUSH
16251: LD_INT 2
16253: EQUAL
16254: ST_TO_ADDR
16255: GO 16357
16257: LD_INT 17
16259: DOUBLE
16260: EQUAL
16261: IFTRUE 16265
16263: GO 16290
16265: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: LD_INT 39
16273: PPUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 321
16283: PUSH
16284: LD_INT 2
16286: EQUAL
16287: ST_TO_ADDR
16288: GO 16357
16290: LD_INT 18
16292: DOUBLE
16293: EQUAL
16294: IFTRUE 16298
16296: GO 16323
16298: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16299: LD_ADDR_VAR 0 3
16303: PUSH
16304: LD_INT 40
16306: PPUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 321
16316: PUSH
16317: LD_INT 2
16319: EQUAL
16320: ST_TO_ADDR
16321: GO 16357
16323: LD_INT 27
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16356
16331: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16332: LD_ADDR_VAR 0 3
16336: PUSH
16337: LD_INT 35
16339: PPUSH
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 321
16349: PUSH
16350: LD_INT 2
16352: EQUAL
16353: ST_TO_ADDR
16354: GO 16357
16356: POP
// end ;
16357: LD_VAR 0 3
16361: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16362: LD_INT 0
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
// result := false ;
16375: LD_ADDR_VAR 0 6
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// if btype = b_depot then
16383: LD_VAR 0 2
16387: PUSH
16388: LD_INT 0
16390: EQUAL
16391: IFFALSE 16403
// begin result := true ;
16393: LD_ADDR_VAR 0 6
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// exit ;
16401: GO 17229
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16403: LD_VAR 0 1
16407: NOT
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 266
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: IN
16429: NOT
16430: OR
16431: PUSH
16432: LD_VAR 0 2
16436: NOT
16437: OR
16438: PUSH
16439: LD_VAR 0 5
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: LD_INT 3
16455: PUSH
16456: LD_INT 4
16458: PUSH
16459: LD_INT 5
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: IN
16470: NOT
16471: OR
16472: PUSH
16473: LD_VAR 0 3
16477: PPUSH
16478: LD_VAR 0 4
16482: PPUSH
16483: CALL_OW 488
16487: NOT
16488: OR
16489: IFFALSE 16493
// exit ;
16491: GO 17229
// side := GetSide ( depot ) ;
16493: LD_ADDR_VAR 0 9
16497: PUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 255
16507: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16508: LD_VAR 0 9
16512: PPUSH
16513: LD_VAR 0 2
16517: PPUSH
16518: CALL 15986 0 2
16522: NOT
16523: IFFALSE 16527
// exit ;
16525: GO 17229
// pom := GetBase ( depot ) ;
16527: LD_ADDR_VAR 0 10
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 274
16541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16542: LD_ADDR_VAR 0 11
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 248
16561: PPUSH
16562: CALL_OW 450
16566: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16567: LD_VAR 0 10
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 275
16579: PUSH
16580: LD_VAR 0 11
16584: PUSH
16585: LD_INT 1
16587: ARRAY
16588: GREATEREQUAL
16589: PUSH
16590: LD_VAR 0 10
16594: PPUSH
16595: LD_INT 2
16597: PPUSH
16598: CALL_OW 275
16602: PUSH
16603: LD_VAR 0 11
16607: PUSH
16608: LD_INT 2
16610: ARRAY
16611: GREATEREQUAL
16612: AND
16613: PUSH
16614: LD_VAR 0 10
16618: PPUSH
16619: LD_INT 3
16621: PPUSH
16622: CALL_OW 275
16626: PUSH
16627: LD_VAR 0 11
16631: PUSH
16632: LD_INT 3
16634: ARRAY
16635: GREATEREQUAL
16636: AND
16637: NOT
16638: IFFALSE 16642
// exit ;
16640: GO 17229
// if GetBType ( depot ) = b_depot then
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 266
16651: PUSH
16652: LD_INT 0
16654: EQUAL
16655: IFFALSE 16667
// dist := 28 else
16657: LD_ADDR_VAR 0 14
16661: PUSH
16662: LD_INT 28
16664: ST_TO_ADDR
16665: GO 16675
// dist := 36 ;
16667: LD_ADDR_VAR 0 14
16671: PUSH
16672: LD_INT 36
16674: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16675: LD_VAR 0 1
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_VAR 0 4
16689: PPUSH
16690: CALL_OW 297
16694: PUSH
16695: LD_VAR 0 14
16699: GREATER
16700: IFFALSE 16704
// exit ;
16702: GO 17229
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16704: LD_ADDR_VAR 0 12
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_VAR 0 4
16723: PPUSH
16724: LD_VAR 0 5
16728: PPUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 248
16738: PPUSH
16739: LD_INT 0
16741: PPUSH
16742: CALL 17234 0 6
16746: ST_TO_ADDR
// if not hexes then
16747: LD_VAR 0 12
16751: NOT
16752: IFFALSE 16756
// exit ;
16754: GO 17229
// hex := GetHexInfo ( x , y ) ;
16756: LD_ADDR_VAR 0 15
16760: PUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_VAR 0 4
16770: PPUSH
16771: CALL_OW 546
16775: ST_TO_ADDR
// if hex [ 1 ] then
16776: LD_VAR 0 15
16780: PUSH
16781: LD_INT 1
16783: ARRAY
16784: IFFALSE 16788
// exit ;
16786: GO 17229
// height := hex [ 2 ] ;
16788: LD_ADDR_VAR 0 13
16792: PUSH
16793: LD_VAR 0 15
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: ST_TO_ADDR
// for i = 1 to hexes do
16802: LD_ADDR_VAR 0 7
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_VAR 0 12
16816: PUSH
16817: FOR_TO
16818: IFFALSE 17148
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16820: LD_VAR 0 12
16824: PUSH
16825: LD_VAR 0 7
16829: ARRAY
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: LD_VAR 0 12
16839: PUSH
16840: LD_VAR 0 7
16844: ARRAY
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 488
16854: NOT
16855: PUSH
16856: LD_VAR 0 12
16860: PUSH
16861: LD_VAR 0 7
16865: ARRAY
16866: PUSH
16867: LD_INT 1
16869: ARRAY
16870: PPUSH
16871: LD_VAR 0 12
16875: PUSH
16876: LD_VAR 0 7
16880: ARRAY
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: PPUSH
16886: CALL_OW 428
16890: PUSH
16891: LD_INT 0
16893: GREATER
16894: OR
16895: PUSH
16896: LD_VAR 0 12
16900: PUSH
16901: LD_VAR 0 7
16905: ARRAY
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: LD_VAR 0 12
16915: PUSH
16916: LD_VAR 0 7
16920: ARRAY
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: PPUSH
16926: CALL_OW 351
16930: OR
16931: IFFALSE 16937
// exit ;
16933: POP
16934: POP
16935: GO 17229
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16937: LD_ADDR_VAR 0 8
16941: PUSH
16942: LD_VAR 0 12
16946: PUSH
16947: LD_VAR 0 7
16951: ARRAY
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 12
16961: PUSH
16962: LD_VAR 0 7
16966: ARRAY
16967: PUSH
16968: LD_INT 2
16970: ARRAY
16971: PPUSH
16972: CALL_OW 546
16976: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16977: LD_VAR 0 8
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_VAR 0 8
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_VAR 0 13
16999: PUSH
17000: LD_INT 2
17002: PLUS
17003: GREATER
17004: OR
17005: PUSH
17006: LD_VAR 0 8
17010: PUSH
17011: LD_INT 2
17013: ARRAY
17014: PUSH
17015: LD_VAR 0 13
17019: PUSH
17020: LD_INT 2
17022: MINUS
17023: LESS
17024: OR
17025: PUSH
17026: LD_VAR 0 8
17030: PUSH
17031: LD_INT 3
17033: ARRAY
17034: PUSH
17035: LD_INT 0
17037: PUSH
17038: LD_INT 8
17040: PUSH
17041: LD_INT 9
17043: PUSH
17044: LD_INT 10
17046: PUSH
17047: LD_INT 11
17049: PUSH
17050: LD_INT 12
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: LD_INT 16
17058: PUSH
17059: LD_INT 17
17061: PUSH
17062: LD_INT 18
17064: PUSH
17065: LD_INT 19
17067: PUSH
17068: LD_INT 20
17070: PUSH
17071: LD_INT 21
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: IN
17089: NOT
17090: OR
17091: PUSH
17092: LD_VAR 0 8
17096: PUSH
17097: LD_INT 5
17099: ARRAY
17100: NOT
17101: OR
17102: PUSH
17103: LD_VAR 0 8
17107: PUSH
17108: LD_INT 6
17110: ARRAY
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 7
17120: PUSH
17121: LD_INT 9
17123: PUSH
17124: LD_INT 10
17126: PUSH
17127: LD_INT 11
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: IN
17138: NOT
17139: OR
17140: IFFALSE 17146
// exit ;
17142: POP
17143: POP
17144: GO 17229
// end ;
17146: GO 16817
17148: POP
17149: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17150: LD_VAR 0 9
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_VAR 0 4
17164: PPUSH
17165: LD_INT 20
17167: PPUSH
17168: CALL 9152 0 4
17172: PUSH
17173: LD_INT 4
17175: ARRAY
17176: IFFALSE 17180
// exit ;
17178: GO 17229
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17180: LD_VAR 0 2
17184: PUSH
17185: LD_INT 29
17187: PUSH
17188: LD_INT 30
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: IN
17195: PUSH
17196: LD_VAR 0 3
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_VAR 0 9
17210: PPUSH
17211: CALL_OW 440
17215: NOT
17216: AND
17217: IFFALSE 17221
// exit ;
17219: GO 17229
// result := true ;
17221: LD_ADDR_VAR 0 6
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// end ;
17229: LD_VAR 0 6
17233: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17234: LD_INT 0
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
// result = [ ] ;
17294: LD_ADDR_VAR 0 7
17298: PUSH
17299: EMPTY
17300: ST_TO_ADDR
// temp_list = [ ] ;
17301: LD_ADDR_VAR 0 9
17305: PUSH
17306: EMPTY
17307: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17308: LD_VAR 0 4
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: LD_INT 4
17327: PUSH
17328: LD_INT 5
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: IN
17339: NOT
17340: PUSH
17341: LD_VAR 0 1
17345: PUSH
17346: LD_INT 0
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: IN
17356: PUSH
17357: LD_VAR 0 5
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: IN
17376: NOT
17377: AND
17378: OR
17379: IFFALSE 17383
// exit ;
17381: GO 35774
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17383: LD_VAR 0 1
17387: PUSH
17388: LD_INT 6
17390: PUSH
17391: LD_INT 7
17393: PUSH
17394: LD_INT 8
17396: PUSH
17397: LD_INT 13
17399: PUSH
17400: LD_INT 12
17402: PUSH
17403: LD_INT 15
17405: PUSH
17406: LD_INT 11
17408: PUSH
17409: LD_INT 14
17411: PUSH
17412: LD_INT 10
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: IN
17426: IFFALSE 17436
// btype = b_lab ;
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: LD_INT 6
17435: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17436: LD_VAR 0 6
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: IN
17455: NOT
17456: PUSH
17457: LD_VAR 0 1
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 3
17473: PUSH
17474: LD_INT 6
17476: PUSH
17477: LD_INT 36
17479: PUSH
17480: LD_INT 4
17482: PUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 31
17488: PUSH
17489: LD_INT 32
17491: PUSH
17492: LD_INT 33
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: IN
17508: NOT
17509: PUSH
17510: LD_VAR 0 6
17514: PUSH
17515: LD_INT 1
17517: EQUAL
17518: AND
17519: OR
17520: PUSH
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 2
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: IN
17536: NOT
17537: PUSH
17538: LD_VAR 0 6
17542: PUSH
17543: LD_INT 2
17545: EQUAL
17546: AND
17547: OR
17548: IFFALSE 17558
// mode = 0 ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// case mode of 0 :
17558: LD_VAR 0 6
17562: PUSH
17563: LD_INT 0
17565: DOUBLE
17566: EQUAL
17567: IFTRUE 17571
17569: GO 29024
17571: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17572: LD_ADDR_VAR 0 11
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: NEG
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: NEG
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 3
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17765: LD_ADDR_VAR 0 12
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 3
17922: NEG
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 3
17933: NEG
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17961: LD_ADDR_VAR 0 13
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: LD_INT 1
18034: NEG
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: NEG
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 2
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 2
18096: NEG
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: LD_INT 3
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 3
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 3
18132: NEG
18133: PUSH
18134: LD_INT 3
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18160: LD_ADDR_VAR 0 14
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 1
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 3
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 3
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 2
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18356: LD_ADDR_VAR 0 15
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: LD_INT 1
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18549: LD_ADDR_VAR 0 16
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: NEG
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 3
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18742: LD_ADDR_VAR 0 17
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: NEG
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: LD_INT 2
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: NEG
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 2
18929: NEG
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: NEG
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18972: LD_ADDR_VAR 0 18
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: NEG
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: NEG
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19202: LD_ADDR_VAR 0 19
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 2
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19432: LD_ADDR_VAR 0 20
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: NEG
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19662: LD_ADDR_VAR 0 21
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 2
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: NEG
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19892: LD_ADDR_VAR 0 22
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20122: LD_ADDR_VAR 0 23
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 2
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: LD_INT 3
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: LD_INT 3
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20402: LD_ADDR_VAR 0 24
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: LD_INT 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20678: LD_ADDR_VAR 0 25
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 2
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 3
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: LD_INT 3
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20952: LD_ADDR_VAR 0 26
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 2
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: NEG
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 3
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: NEG
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21228: LD_ADDR_VAR 0 27
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: LD_INT 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 3
21461: NEG
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 3
21473: NEG
21474: PUSH
21475: LD_INT 2
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21508: LD_ADDR_VAR 0 28
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 3
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 3
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 3
21743: NEG
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21790: LD_ADDR_VAR 0 29
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: NEG
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: NEG
21981: PUSH
21982: LD_INT 3
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 3
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 3
22034: NEG
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22069: LD_ADDR_VAR 0 30
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: NEG
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: LD_INT 3
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 3
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22347: LD_ADDR_VAR 0 31
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: NEG
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 3
22590: NEG
22591: PUSH
22592: LD_INT 2
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22625: LD_ADDR_VAR 0 32
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: NEG
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 3
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22903: LD_ADDR_VAR 0 33
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: NEG
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: NEG
23094: PUSH
23095: LD_INT 3
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 3
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 3
23147: NEG
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23182: LD_ADDR_VAR 0 34
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: LD_INT 3
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: LD_INT 2
23388: NEG
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 3
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 3
23427: NEG
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23462: LD_ADDR_VAR 0 35
23466: PUSH
23467: LD_INT 0
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23574: LD_ADDR_VAR 0 36
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23686: LD_ADDR_VAR 0 37
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23798: LD_ADDR_VAR 0 38
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23910: LD_ADDR_VAR 0 39
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24022: LD_ADDR_VAR 0 40
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24134: LD_ADDR_VAR 0 41
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 3
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 3
24408: NEG
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 3
24431: NEG
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 3
24443: NEG
24444: PUSH
24445: LD_INT 3
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24484: LD_ADDR_VAR 0 42
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 3
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 3
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 3
24781: NEG
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 3
24793: NEG
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24834: LD_ADDR_VAR 0 43
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 3
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 3
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 3
25130: NEG
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 3
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25182: LD_ADDR_VAR 0 44
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 3
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: LD_INT 3
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: NEG
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 3
25479: NEG
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: NEG
25492: PUSH
25493: LD_INT 3
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25532: LD_ADDR_VAR 0 45
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: LD_INT 3
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 3
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: LD_INT 3
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 3
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25882: LD_ADDR_VAR 0 46
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 3
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 3
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 3
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26230: LD_ADDR_VAR 0 47
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: NEG
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26381: LD_ADDR_VAR 0 48
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26528: LD_ADDR_VAR 0 49
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26672: LD_ADDR_VAR 0 50
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26816: LD_ADDR_VAR 0 51
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: NEG
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26963: LD_ADDR_VAR 0 52
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27114: LD_ADDR_VAR 0 53
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 2
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: LD_INT 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27344: LD_ADDR_VAR 0 54
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27574: LD_ADDR_VAR 0 55
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27804: LD_ADDR_VAR 0 56
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: NEG
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28034: LD_ADDR_VAR 0 57
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28264: LD_ADDR_VAR 0 58
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28494: LD_ADDR_VAR 0 59
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28582: LD_ADDR_VAR 0 60
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28670: LD_ADDR_VAR 0 61
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28758: LD_ADDR_VAR 0 62
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28846: LD_ADDR_VAR 0 63
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28934: LD_ADDR_VAR 0 64
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: ST_TO_ADDR
// end ; 1 :
29022: GO 34919
29024: LD_INT 1
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 31655
29032: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29033: LD_ADDR_VAR 0 11
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 3
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29077: LD_ADDR_VAR 0 12
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29118: LD_ADDR_VAR 0 13
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29158: LD_ADDR_VAR 0 14
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29199: LD_ADDR_VAR 0 15
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29243: LD_ADDR_VAR 0 16
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 3
29262: NEG
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29289: LD_ADDR_VAR 0 17
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29333: LD_ADDR_VAR 0 18
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29374: LD_ADDR_VAR 0 19
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29414: LD_ADDR_VAR 0 20
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29455: LD_ADDR_VAR 0 21
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: NEG
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29499: LD_ADDR_VAR 0 22
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 3
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29545: LD_ADDR_VAR 0 23
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 4
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 3
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29589: LD_ADDR_VAR 0 24
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 4
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29630: LD_ADDR_VAR 0 25
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 4
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29670: LD_ADDR_VAR 0 26
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 4
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29711: LD_ADDR_VAR 0 27
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: NEG
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 4
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29755: LD_ADDR_VAR 0 28
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: NEG
29775: PUSH
29776: LD_INT 4
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 4
29786: NEG
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29801: LD_ADDR_VAR 0 29
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 3
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 4
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 4
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: LD_INT 5
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 5
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 4
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: LD_INT 6
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 6
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: LD_INT 5
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29956: LD_ADDR_VAR 0 30
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 4
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 5
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 5
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 6
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 6
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30099: LD_ADDR_VAR 0 31
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 4
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 4
30146: PUSH
30147: LD_INT 4
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: LD_INT 4
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: LD_INT 4
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 4
30186: PUSH
30187: LD_INT 5
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 6
30196: PUSH
30197: LD_INT 5
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 6
30206: PUSH
30207: LD_INT 6
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 6
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30238: LD_ADDR_VAR 0 32
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 4
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 6
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 6
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 5
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30381: LD_ADDR_VAR 0 33
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 4
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 4
30456: NEG
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 5
30478: NEG
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 5
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 6
30501: NEG
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 6
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30536: LD_ADDR_VAR 0 34
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: NEG
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: NEG
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 4
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 4
30603: NEG
30604: PUSH
30605: LD_INT 4
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 4
30615: NEG
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 5
30627: NEG
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 5
30639: NEG
30640: PUSH
30641: LD_INT 5
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 5
30651: NEG
30652: PUSH
30653: LD_INT 6
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 6
30663: NEG
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 6
30675: NEG
30676: PUSH
30677: LD_INT 6
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30699: LD_ADDR_VAR 0 41
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30743: LD_ADDR_VAR 0 42
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30784: LD_ADDR_VAR 0 43
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30824: LD_ADDR_VAR 0 44
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30865: LD_ADDR_VAR 0 45
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30909: LD_ADDR_VAR 0 46
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30955: LD_ADDR_VAR 0 47
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 3
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30988: LD_ADDR_VAR 0 48
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31019: LD_ADDR_VAR 0 49
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31048: LD_ADDR_VAR 0 50
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31077: LD_ADDR_VAR 0 51
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31108: LD_ADDR_VAR 0 52
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31141: LD_ADDR_VAR 0 53
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31185: LD_ADDR_VAR 0 54
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 3
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31226: LD_ADDR_VAR 0 55
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31266: LD_ADDR_VAR 0 56
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31307: LD_ADDR_VAR 0 57
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31351: LD_ADDR_VAR 0 58
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: NEG
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31397: LD_ADDR_VAR 0 59
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31441: LD_ADDR_VAR 0 60
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31482: LD_ADDR_VAR 0 61
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31522: LD_ADDR_VAR 0 62
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31563: LD_ADDR_VAR 0 63
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: NEG
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31607: LD_ADDR_VAR 0 64
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// end ; 2 :
31653: GO 34919
31655: LD_INT 2
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 34918
31663: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31664: LD_ADDR_VAR 0 29
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 5
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 5
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 4
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 4
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 5
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 5
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 4
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 3
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 4
32003: NEG
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 4
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 4
32049: NEG
32050: PUSH
32051: LD_INT 4
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: LD_INT 5
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 4
32097: NEG
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 5
32109: NEG
32110: PUSH
32111: LD_INT 4
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: NEG
32122: PUSH
32123: LD_INT 5
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 5
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 5
32145: NEG
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32202: LD_ADDR_VAR 0 30
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 5
32239: PUSH
32240: LD_INT 5
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: LD_INT 5
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 5
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 5
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 4
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 4
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 3
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 5
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 5
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 3
32506: NEG
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: NEG
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 4
32566: NEG
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 4
32590: NEG
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 4
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 5
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: LD_INT 4
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 5
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 5
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32749: LD_ADDR_VAR 0 31
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 5
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 4
32905: NEG
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: NEG
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: NEG
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 5
33011: NEG
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 5
33023: NEG
33024: PUSH
33025: LD_INT 5
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 5
33047: NEG
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 3
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 4
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: LD_INT 4
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 5
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 5
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 4
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33299: LD_ADDR_VAR 0 32
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 5
33362: NEG
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 5
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 5
33385: NEG
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: NEG
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 4
33468: NEG
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 4
33480: NEG
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: NEG
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 4
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 5
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 3
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 3
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 4
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 5
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 5
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 4
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: LD_INT 4
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 5
33741: PUSH
33742: LD_INT 5
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 5
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: LD_INT 5
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33846: LD_ADDR_VAR 0 33
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: LD_INT 5
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: NEG
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 4
33901: NEG
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 5
33913: NEG
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 5
33925: NEG
33926: PUSH
33927: LD_INT 5
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 3
33937: NEG
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 5
33949: NEG
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 3
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 4
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 3
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 4
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 4
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 4
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 4
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 5
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 5
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 4
34176: PUSH
34177: LD_INT 3
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 4
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 4
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 4
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 5
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: LD_INT 5
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34384: LD_ADDR_VAR 0 34
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 4
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 5
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 3
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 4
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 5
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 5
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 4
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 2
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: LD_INT 4
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 5
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 4
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 4
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 4
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 4
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: NEG
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 4
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: NEG
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 5
34836: NEG
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 5
34848: NEG
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 3
34860: NEG
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// end ; end ;
34916: GO 34919
34918: POP
// case btype of b_depot , b_warehouse :
34919: LD_VAR 0 1
34923: PUSH
34924: LD_INT 0
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34938
34930: LD_INT 1
34932: DOUBLE
34933: EQUAL
34934: IFTRUE 34938
34936: GO 35139
34938: POP
// case nation of nation_american :
34939: LD_VAR 0 5
34943: PUSH
34944: LD_INT 1
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 35008
34952: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: LD_VAR 0 11
34962: PUSH
34963: LD_VAR 0 12
34967: PUSH
34968: LD_VAR 0 13
34972: PUSH
34973: LD_VAR 0 14
34977: PUSH
34978: LD_VAR 0 15
34982: PUSH
34983: LD_VAR 0 16
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: PUSH
34996: LD_VAR 0 4
35000: PUSH
35001: LD_INT 1
35003: PLUS
35004: ARRAY
35005: ST_TO_ADDR
35006: GO 35137
35008: LD_INT 2
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35072
35016: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_VAR 0 17
35026: PUSH
35027: LD_VAR 0 18
35031: PUSH
35032: LD_VAR 0 19
35036: PUSH
35037: LD_VAR 0 20
35041: PUSH
35042: LD_VAR 0 21
35046: PUSH
35047: LD_VAR 0 22
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: PUSH
35060: LD_VAR 0 4
35064: PUSH
35065: LD_INT 1
35067: PLUS
35068: ARRAY
35069: ST_TO_ADDR
35070: GO 35137
35072: LD_INT 3
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35136
35080: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 23
35090: PUSH
35091: LD_VAR 0 24
35095: PUSH
35096: LD_VAR 0 25
35100: PUSH
35101: LD_VAR 0 26
35105: PUSH
35106: LD_VAR 0 27
35110: PUSH
35111: LD_VAR 0 28
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: PUSH
35124: LD_VAR 0 4
35128: PUSH
35129: LD_INT 1
35131: PLUS
35132: ARRAY
35133: ST_TO_ADDR
35134: GO 35137
35136: POP
35137: GO 35692
35139: LD_INT 2
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35153
35145: LD_INT 3
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35209
35153: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35154: LD_ADDR_VAR 0 9
35158: PUSH
35159: LD_VAR 0 29
35163: PUSH
35164: LD_VAR 0 30
35168: PUSH
35169: LD_VAR 0 31
35173: PUSH
35174: LD_VAR 0 32
35178: PUSH
35179: LD_VAR 0 33
35183: PUSH
35184: LD_VAR 0 34
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 4
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: ARRAY
35206: ST_TO_ADDR
35207: GO 35692
35209: LD_INT 16
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35271
35215: LD_INT 17
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35271
35221: LD_INT 18
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35271
35227: LD_INT 19
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35271
35233: LD_INT 22
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35271
35239: LD_INT 20
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35271
35245: LD_INT 21
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35271
35251: LD_INT 23
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35271
35257: LD_INT 24
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35271
35263: LD_INT 25
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35327
35271: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35272: LD_ADDR_VAR 0 9
35276: PUSH
35277: LD_VAR 0 35
35281: PUSH
35282: LD_VAR 0 36
35286: PUSH
35287: LD_VAR 0 37
35291: PUSH
35292: LD_VAR 0 38
35296: PUSH
35297: LD_VAR 0 39
35301: PUSH
35302: LD_VAR 0 40
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: PUSH
35315: LD_VAR 0 4
35319: PUSH
35320: LD_INT 1
35322: PLUS
35323: ARRAY
35324: ST_TO_ADDR
35325: GO 35692
35327: LD_INT 6
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35383
35333: LD_INT 7
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35383
35339: LD_INT 8
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35383
35345: LD_INT 13
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35383
35351: LD_INT 12
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35383
35357: LD_INT 15
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35383
35363: LD_INT 11
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35383
35369: LD_INT 14
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35383
35375: LD_INT 10
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35383
35381: GO 35439
35383: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35384: LD_ADDR_VAR 0 9
35388: PUSH
35389: LD_VAR 0 41
35393: PUSH
35394: LD_VAR 0 42
35398: PUSH
35399: LD_VAR 0 43
35403: PUSH
35404: LD_VAR 0 44
35408: PUSH
35409: LD_VAR 0 45
35413: PUSH
35414: LD_VAR 0 46
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: PUSH
35427: LD_VAR 0 4
35431: PUSH
35432: LD_INT 1
35434: PLUS
35435: ARRAY
35436: ST_TO_ADDR
35437: GO 35692
35439: LD_INT 36
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35503
35447: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_VAR 0 47
35457: PUSH
35458: LD_VAR 0 48
35462: PUSH
35463: LD_VAR 0 49
35467: PUSH
35468: LD_VAR 0 50
35472: PUSH
35473: LD_VAR 0 51
35477: PUSH
35478: LD_VAR 0 52
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: LD_INT 1
35498: PLUS
35499: ARRAY
35500: ST_TO_ADDR
35501: GO 35692
35503: LD_INT 4
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35529
35509: LD_INT 5
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35529
35515: LD_INT 34
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35529
35521: LD_INT 37
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35585
35529: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35530: LD_ADDR_VAR 0 9
35534: PUSH
35535: LD_VAR 0 53
35539: PUSH
35540: LD_VAR 0 54
35544: PUSH
35545: LD_VAR 0 55
35549: PUSH
35550: LD_VAR 0 56
35554: PUSH
35555: LD_VAR 0 57
35559: PUSH
35560: LD_VAR 0 58
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: PUSH
35573: LD_VAR 0 4
35577: PUSH
35578: LD_INT 1
35580: PLUS
35581: ARRAY
35582: ST_TO_ADDR
35583: GO 35692
35585: LD_INT 31
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35635
35591: LD_INT 32
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35635
35597: LD_INT 33
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35635
35603: LD_INT 27
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35635
35609: LD_INT 26
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35635
35615: LD_INT 28
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35635
35621: LD_INT 29
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35635
35627: LD_INT 30
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35691
35635: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_VAR 0 59
35645: PUSH
35646: LD_VAR 0 60
35650: PUSH
35651: LD_VAR 0 61
35655: PUSH
35656: LD_VAR 0 62
35660: PUSH
35661: LD_VAR 0 63
35665: PUSH
35666: LD_VAR 0 64
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: PUSH
35679: LD_VAR 0 4
35683: PUSH
35684: LD_INT 1
35686: PLUS
35687: ARRAY
35688: ST_TO_ADDR
35689: GO 35692
35691: POP
// temp_list2 = [ ] ;
35692: LD_ADDR_VAR 0 10
35696: PUSH
35697: EMPTY
35698: ST_TO_ADDR
// for i in temp_list do
35699: LD_ADDR_VAR 0 8
35703: PUSH
35704: LD_VAR 0 9
35708: PUSH
35709: FOR_IN
35710: IFFALSE 35762
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35712: LD_ADDR_VAR 0 10
35716: PUSH
35717: LD_VAR 0 10
35721: PUSH
35722: LD_VAR 0 8
35726: PUSH
35727: LD_INT 1
35729: ARRAY
35730: PUSH
35731: LD_VAR 0 2
35735: PLUS
35736: PUSH
35737: LD_VAR 0 8
35741: PUSH
35742: LD_INT 2
35744: ARRAY
35745: PUSH
35746: LD_VAR 0 3
35750: PLUS
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: EMPTY
35757: LIST
35758: ADD
35759: ST_TO_ADDR
35760: GO 35709
35762: POP
35763: POP
// result = temp_list2 ;
35764: LD_ADDR_VAR 0 7
35768: PUSH
35769: LD_VAR 0 10
35773: ST_TO_ADDR
// end ;
35774: LD_VAR 0 7
35778: RET
// export function EnemyInRange ( unit , dist ) ; begin
35779: LD_INT 0
35781: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL_OW 255
35796: PPUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 250
35806: PPUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 251
35816: PPUSH
35817: LD_VAR 0 2
35821: PPUSH
35822: CALL 9152 0 4
35826: PUSH
35827: LD_INT 4
35829: ARRAY
35830: ST_TO_ADDR
// end ;
35831: LD_VAR 0 3
35835: RET
// export function PlayerSeeMe ( unit ) ; begin
35836: LD_INT 0
35838: PPUSH
// result := See ( your_side , unit ) ;
35839: LD_ADDR_VAR 0 2
35843: PUSH
35844: LD_OWVAR 2
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 292
35858: ST_TO_ADDR
// end ;
35859: LD_VAR 0 2
35863: RET
// export function ReverseDir ( unit ) ; begin
35864: LD_INT 0
35866: PPUSH
// if not unit then
35867: LD_VAR 0 1
35871: NOT
35872: IFFALSE 35876
// exit ;
35874: GO 35899
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 254
35890: PUSH
35891: LD_INT 3
35893: PLUS
35894: PUSH
35895: LD_INT 6
35897: MOD
35898: ST_TO_ADDR
// end ;
35899: LD_VAR 0 2
35903: RET
// export function ReverseArray ( array ) ; var i ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
// if not array then
35908: LD_VAR 0 1
35912: NOT
35913: IFFALSE 35917
// exit ;
35915: GO 35972
// result := [ ] ;
35917: LD_ADDR_VAR 0 2
35921: PUSH
35922: EMPTY
35923: ST_TO_ADDR
// for i := array downto 1 do
35924: LD_ADDR_VAR 0 3
35928: PUSH
35929: DOUBLE
35930: LD_VAR 0 1
35934: INC
35935: ST_TO_ADDR
35936: LD_INT 1
35938: PUSH
35939: FOR_DOWNTO
35940: IFFALSE 35970
// result := Join ( result , array [ i ] ) ;
35942: LD_ADDR_VAR 0 2
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 1
35956: PUSH
35957: LD_VAR 0 3
35961: ARRAY
35962: PPUSH
35963: CALL 40637 0 2
35967: ST_TO_ADDR
35968: GO 35939
35970: POP
35971: POP
// end ;
35972: LD_VAR 0 2
35976: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
// if not unit or not hexes then
35985: LD_VAR 0 1
35989: NOT
35990: PUSH
35991: LD_VAR 0 2
35995: NOT
35996: OR
35997: IFFALSE 36001
// exit ;
35999: GO 36124
// dist := 9999 ;
36001: LD_ADDR_VAR 0 5
36005: PUSH
36006: LD_INT 9999
36008: ST_TO_ADDR
// for i = 1 to hexes do
36009: LD_ADDR_VAR 0 4
36013: PUSH
36014: DOUBLE
36015: LD_INT 1
36017: DEC
36018: ST_TO_ADDR
36019: LD_VAR 0 2
36023: PUSH
36024: FOR_TO
36025: IFFALSE 36112
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36027: LD_ADDR_VAR 0 6
36031: PUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: LD_VAR 0 2
36041: PUSH
36042: LD_VAR 0 4
36046: ARRAY
36047: PUSH
36048: LD_INT 1
36050: ARRAY
36051: PPUSH
36052: LD_VAR 0 2
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: PUSH
36063: LD_INT 2
36065: ARRAY
36066: PPUSH
36067: CALL_OW 297
36071: ST_TO_ADDR
// if tdist < dist then
36072: LD_VAR 0 6
36076: PUSH
36077: LD_VAR 0 5
36081: LESS
36082: IFFALSE 36110
// begin hex := hexes [ i ] ;
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 2
36093: PUSH
36094: LD_VAR 0 4
36098: ARRAY
36099: ST_TO_ADDR
// dist := tdist ;
36100: LD_ADDR_VAR 0 5
36104: PUSH
36105: LD_VAR 0 6
36109: ST_TO_ADDR
// end ; end ;
36110: GO 36024
36112: POP
36113: POP
// result := hex ;
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_VAR 0 8
36123: ST_TO_ADDR
// end ;
36124: LD_VAR 0 3
36128: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36129: LD_INT 0
36131: PPUSH
36132: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36133: LD_VAR 0 1
36137: NOT
36138: PUSH
36139: LD_VAR 0 1
36143: PUSH
36144: LD_INT 21
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 23
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PPUSH
36168: CALL_OW 69
36172: IN
36173: NOT
36174: OR
36175: IFFALSE 36179
// exit ;
36177: GO 36226
// for i = 1 to 3 do
36179: LD_ADDR_VAR 0 3
36183: PUSH
36184: DOUBLE
36185: LD_INT 1
36187: DEC
36188: ST_TO_ADDR
36189: LD_INT 3
36191: PUSH
36192: FOR_TO
36193: IFFALSE 36224
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 250
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 251
36214: PPUSH
36215: LD_INT 1
36217: PPUSH
36218: CALL_OW 453
36222: GO 36192
36224: POP
36225: POP
// end ;
36226: LD_VAR 0 2
36230: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36231: LD_INT 0
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
// if not unit or not enemy_unit then
36239: LD_VAR 0 1
36243: NOT
36244: PUSH
36245: LD_VAR 0 2
36249: NOT
36250: OR
36251: IFFALSE 36255
// exit ;
36253: GO 36722
// if GetLives ( i ) < 250 then
36255: LD_VAR 0 4
36259: PPUSH
36260: CALL_OW 256
36264: PUSH
36265: LD_INT 250
36267: LESS
36268: IFFALSE 36281
// begin ComAutodestruct ( i ) ;
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL 36129 0 1
// exit ;
36279: GO 36722
// end ; x := GetX ( enemy_unit ) ;
36281: LD_ADDR_VAR 0 7
36285: PUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: CALL_OW 250
36295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36296: LD_ADDR_VAR 0 8
36300: PUSH
36301: LD_VAR 0 2
36305: PPUSH
36306: CALL_OW 251
36310: ST_TO_ADDR
// if not x or not y then
36311: LD_VAR 0 7
36315: NOT
36316: PUSH
36317: LD_VAR 0 8
36321: NOT
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 36722
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36327: LD_ADDR_VAR 0 6
36331: PUSH
36332: LD_VAR 0 7
36336: PPUSH
36337: LD_INT 0
36339: PPUSH
36340: LD_INT 4
36342: PPUSH
36343: CALL_OW 272
36347: PUSH
36348: LD_VAR 0 8
36352: PPUSH
36353: LD_INT 0
36355: PPUSH
36356: LD_INT 4
36358: PPUSH
36359: CALL_OW 273
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_VAR 0 7
36372: PPUSH
36373: LD_INT 1
36375: PPUSH
36376: LD_INT 4
36378: PPUSH
36379: CALL_OW 272
36383: PUSH
36384: LD_VAR 0 8
36388: PPUSH
36389: LD_INT 1
36391: PPUSH
36392: LD_INT 4
36394: PPUSH
36395: CALL_OW 273
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_VAR 0 7
36408: PPUSH
36409: LD_INT 2
36411: PPUSH
36412: LD_INT 4
36414: PPUSH
36415: CALL_OW 272
36419: PUSH
36420: LD_VAR 0 8
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: LD_INT 4
36430: PPUSH
36431: CALL_OW 273
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_VAR 0 7
36444: PPUSH
36445: LD_INT 3
36447: PPUSH
36448: LD_INT 4
36450: PPUSH
36451: CALL_OW 272
36455: PUSH
36456: LD_VAR 0 8
36460: PPUSH
36461: LD_INT 3
36463: PPUSH
36464: LD_INT 4
36466: PPUSH
36467: CALL_OW 273
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 7
36480: PPUSH
36481: LD_INT 4
36483: PPUSH
36484: LD_INT 4
36486: PPUSH
36487: CALL_OW 272
36491: PUSH
36492: LD_VAR 0 8
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: LD_INT 4
36502: PPUSH
36503: CALL_OW 273
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_VAR 0 7
36516: PPUSH
36517: LD_INT 5
36519: PPUSH
36520: LD_INT 4
36522: PPUSH
36523: CALL_OW 272
36527: PUSH
36528: LD_VAR 0 8
36532: PPUSH
36533: LD_INT 5
36535: PPUSH
36536: LD_INT 4
36538: PPUSH
36539: CALL_OW 273
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// for i = tmp downto 1 do
36556: LD_ADDR_VAR 0 4
36560: PUSH
36561: DOUBLE
36562: LD_VAR 0 6
36566: INC
36567: ST_TO_ADDR
36568: LD_INT 1
36570: PUSH
36571: FOR_DOWNTO
36572: IFFALSE 36673
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36574: LD_VAR 0 6
36578: PUSH
36579: LD_VAR 0 4
36583: ARRAY
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: LD_VAR 0 6
36593: PUSH
36594: LD_VAR 0 4
36598: ARRAY
36599: PUSH
36600: LD_INT 2
36602: ARRAY
36603: PPUSH
36604: CALL_OW 488
36608: NOT
36609: PUSH
36610: LD_VAR 0 6
36614: PUSH
36615: LD_VAR 0 4
36619: ARRAY
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: PPUSH
36625: LD_VAR 0 6
36629: PUSH
36630: LD_VAR 0 4
36634: ARRAY
36635: PUSH
36636: LD_INT 2
36638: ARRAY
36639: PPUSH
36640: CALL_OW 428
36644: PUSH
36645: LD_INT 0
36647: NONEQUAL
36648: OR
36649: IFFALSE 36671
// tmp := Delete ( tmp , i ) ;
36651: LD_ADDR_VAR 0 6
36655: PUSH
36656: LD_VAR 0 6
36660: PPUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: CALL_OW 3
36670: ST_TO_ADDR
36671: GO 36571
36673: POP
36674: POP
// j := GetClosestHex ( unit , tmp ) ;
36675: LD_ADDR_VAR 0 5
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: CALL 35977 0 2
36694: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36695: LD_VAR 0 1
36699: PPUSH
36700: LD_VAR 0 5
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PPUSH
36709: LD_VAR 0 5
36713: PUSH
36714: LD_INT 2
36716: ARRAY
36717: PPUSH
36718: CALL_OW 111
// end ;
36722: LD_VAR 0 3
36726: RET
// export function PrepareApemanSoldier ( ) ; begin
36727: LD_INT 0
36729: PPUSH
// uc_nation := 0 ;
36730: LD_ADDR_OWVAR 21
36734: PUSH
36735: LD_INT 0
36737: ST_TO_ADDR
// hc_sex := sex_male ;
36738: LD_ADDR_OWVAR 27
36742: PUSH
36743: LD_INT 1
36745: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36746: LD_ADDR_OWVAR 28
36750: PUSH
36751: LD_INT 15
36753: ST_TO_ADDR
// hc_gallery :=  ;
36754: LD_ADDR_OWVAR 33
36758: PUSH
36759: LD_STRING 
36761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36762: LD_ADDR_OWVAR 31
36766: PUSH
36767: LD_INT 0
36769: PPUSH
36770: LD_INT 3
36772: PPUSH
36773: CALL_OW 12
36777: PUSH
36778: LD_INT 0
36780: PPUSH
36781: LD_INT 3
36783: PPUSH
36784: CALL_OW 12
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// end ;
36801: LD_VAR 0 1
36805: RET
// export function PrepareApemanEngineer ( ) ; begin
36806: LD_INT 0
36808: PPUSH
// uc_nation := 0 ;
36809: LD_ADDR_OWVAR 21
36813: PUSH
36814: LD_INT 0
36816: ST_TO_ADDR
// hc_sex := sex_male ;
36817: LD_ADDR_OWVAR 27
36821: PUSH
36822: LD_INT 1
36824: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36825: LD_ADDR_OWVAR 28
36829: PUSH
36830: LD_INT 16
36832: ST_TO_ADDR
// hc_gallery :=  ;
36833: LD_ADDR_OWVAR 33
36837: PUSH
36838: LD_STRING 
36840: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36841: LD_ADDR_OWVAR 31
36845: PUSH
36846: LD_INT 0
36848: PPUSH
36849: LD_INT 3
36851: PPUSH
36852: CALL_OW 12
36856: PUSH
36857: LD_INT 0
36859: PPUSH
36860: LD_INT 3
36862: PPUSH
36863: CALL_OW 12
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// end ;
36880: LD_VAR 0 1
36884: RET
// export function PrepareApeman ( agressivity ) ; begin
36885: LD_INT 0
36887: PPUSH
// uc_side := 0 ;
36888: LD_ADDR_OWVAR 20
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// uc_nation := 0 ;
36896: LD_ADDR_OWVAR 21
36900: PUSH
36901: LD_INT 0
36903: ST_TO_ADDR
// hc_sex := sex_male ;
36904: LD_ADDR_OWVAR 27
36908: PUSH
36909: LD_INT 1
36911: ST_TO_ADDR
// hc_class := class_apeman ;
36912: LD_ADDR_OWVAR 28
36916: PUSH
36917: LD_INT 12
36919: ST_TO_ADDR
// hc_gallery :=  ;
36920: LD_ADDR_OWVAR 33
36924: PUSH
36925: LD_STRING 
36927: ST_TO_ADDR
// if agressivity = 0 then
36928: LD_VAR 0 1
36932: PUSH
36933: LD_INT 0
36935: EQUAL
36936: IFFALSE 36948
// hc_agressivity := 0 else
36938: LD_ADDR_OWVAR 35
36942: PUSH
36943: LD_INT 0
36945: ST_TO_ADDR
36946: GO 36969
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36948: LD_ADDR_OWVAR 35
36952: PUSH
36953: LD_VAR 0 1
36957: NEG
36958: PPUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 12
36968: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36969: LD_ADDR_OWVAR 31
36973: PUSH
36974: LD_INT 0
36976: PPUSH
36977: LD_INT 3
36979: PPUSH
36980: CALL_OW 12
36984: PUSH
36985: LD_INT 0
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 12
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// end ;
37008: LD_VAR 0 2
37012: RET
// export function PrepareTiger ( agressivity ) ; begin
37013: LD_INT 0
37015: PPUSH
// uc_side := 0 ;
37016: LD_ADDR_OWVAR 20
37020: PUSH
37021: LD_INT 0
37023: ST_TO_ADDR
// uc_nation := 0 ;
37024: LD_ADDR_OWVAR 21
37028: PUSH
37029: LD_INT 0
37031: ST_TO_ADDR
// hc_class := class_tiger ;
37032: LD_ADDR_OWVAR 28
37036: PUSH
37037: LD_INT 14
37039: ST_TO_ADDR
// hc_gallery :=  ;
37040: LD_ADDR_OWVAR 33
37044: PUSH
37045: LD_STRING 
37047: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37048: LD_ADDR_OWVAR 35
37052: PUSH
37053: LD_VAR 0 1
37057: NEG
37058: PPUSH
37059: LD_VAR 0 1
37063: PPUSH
37064: CALL_OW 12
37068: ST_TO_ADDR
// end ;
37069: LD_VAR 0 2
37073: RET
// export function PrepareEnchidna ( ) ; begin
37074: LD_INT 0
37076: PPUSH
// uc_side := 0 ;
37077: LD_ADDR_OWVAR 20
37081: PUSH
37082: LD_INT 0
37084: ST_TO_ADDR
// uc_nation := 0 ;
37085: LD_ADDR_OWVAR 21
37089: PUSH
37090: LD_INT 0
37092: ST_TO_ADDR
// hc_class := class_baggie ;
37093: LD_ADDR_OWVAR 28
37097: PUSH
37098: LD_INT 13
37100: ST_TO_ADDR
// hc_gallery :=  ;
37101: LD_ADDR_OWVAR 33
37105: PUSH
37106: LD_STRING 
37108: ST_TO_ADDR
// end ;
37109: LD_VAR 0 1
37113: RET
// export function PrepareFrog ( ) ; begin
37114: LD_INT 0
37116: PPUSH
// uc_side := 0 ;
37117: LD_ADDR_OWVAR 20
37121: PUSH
37122: LD_INT 0
37124: ST_TO_ADDR
// uc_nation := 0 ;
37125: LD_ADDR_OWVAR 21
37129: PUSH
37130: LD_INT 0
37132: ST_TO_ADDR
// hc_class := class_frog ;
37133: LD_ADDR_OWVAR 28
37137: PUSH
37138: LD_INT 19
37140: ST_TO_ADDR
// hc_gallery :=  ;
37141: LD_ADDR_OWVAR 33
37145: PUSH
37146: LD_STRING 
37148: ST_TO_ADDR
// end ;
37149: LD_VAR 0 1
37153: RET
// export function PrepareFish ( ) ; begin
37154: LD_INT 0
37156: PPUSH
// uc_side := 0 ;
37157: LD_ADDR_OWVAR 20
37161: PUSH
37162: LD_INT 0
37164: ST_TO_ADDR
// uc_nation := 0 ;
37165: LD_ADDR_OWVAR 21
37169: PUSH
37170: LD_INT 0
37172: ST_TO_ADDR
// hc_class := class_fish ;
37173: LD_ADDR_OWVAR 28
37177: PUSH
37178: LD_INT 20
37180: ST_TO_ADDR
// hc_gallery :=  ;
37181: LD_ADDR_OWVAR 33
37185: PUSH
37186: LD_STRING 
37188: ST_TO_ADDR
// end ;
37189: LD_VAR 0 1
37193: RET
// export function PrepareBird ( ) ; begin
37194: LD_INT 0
37196: PPUSH
// uc_side := 0 ;
37197: LD_ADDR_OWVAR 20
37201: PUSH
37202: LD_INT 0
37204: ST_TO_ADDR
// uc_nation := 0 ;
37205: LD_ADDR_OWVAR 21
37209: PUSH
37210: LD_INT 0
37212: ST_TO_ADDR
// hc_class := class_phororhacos ;
37213: LD_ADDR_OWVAR 28
37217: PUSH
37218: LD_INT 18
37220: ST_TO_ADDR
// hc_gallery :=  ;
37221: LD_ADDR_OWVAR 33
37225: PUSH
37226: LD_STRING 
37228: ST_TO_ADDR
// end ;
37229: LD_VAR 0 1
37233: RET
// export function PrepareHorse ( ) ; begin
37234: LD_INT 0
37236: PPUSH
// uc_side := 0 ;
37237: LD_ADDR_OWVAR 20
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// uc_nation := 0 ;
37245: LD_ADDR_OWVAR 21
37249: PUSH
37250: LD_INT 0
37252: ST_TO_ADDR
// hc_class := class_horse ;
37253: LD_ADDR_OWVAR 28
37257: PUSH
37258: LD_INT 21
37260: ST_TO_ADDR
// hc_gallery :=  ;
37261: LD_ADDR_OWVAR 33
37265: PUSH
37266: LD_STRING 
37268: ST_TO_ADDR
// end ;
37269: LD_VAR 0 1
37273: RET
// export function PrepareMastodont ( ) ; begin
37274: LD_INT 0
37276: PPUSH
// uc_side := 0 ;
37277: LD_ADDR_OWVAR 20
37281: PUSH
37282: LD_INT 0
37284: ST_TO_ADDR
// uc_nation := 0 ;
37285: LD_ADDR_OWVAR 21
37289: PUSH
37290: LD_INT 0
37292: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37293: LD_ADDR_OWVAR 37
37297: PUSH
37298: LD_INT 31
37300: ST_TO_ADDR
// vc_control := control_rider ;
37301: LD_ADDR_OWVAR 38
37305: PUSH
37306: LD_INT 4
37308: ST_TO_ADDR
// end ;
37309: LD_VAR 0 1
37313: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37314: LD_INT 0
37316: PPUSH
37317: PPUSH
37318: PPUSH
// uc_side = 0 ;
37319: LD_ADDR_OWVAR 20
37323: PUSH
37324: LD_INT 0
37326: ST_TO_ADDR
// uc_nation = 0 ;
37327: LD_ADDR_OWVAR 21
37331: PUSH
37332: LD_INT 0
37334: ST_TO_ADDR
// InitHc_All ( ) ;
37335: CALL_OW 584
// InitVc ;
37339: CALL_OW 20
// if mastodonts then
37343: LD_VAR 0 6
37347: IFFALSE 37414
// for i = 1 to mastodonts do
37349: LD_ADDR_VAR 0 11
37353: PUSH
37354: DOUBLE
37355: LD_INT 1
37357: DEC
37358: ST_TO_ADDR
37359: LD_VAR 0 6
37363: PUSH
37364: FOR_TO
37365: IFFALSE 37412
// begin vc_chassis := 31 ;
37367: LD_ADDR_OWVAR 37
37371: PUSH
37372: LD_INT 31
37374: ST_TO_ADDR
// vc_control := control_rider ;
37375: LD_ADDR_OWVAR 38
37379: PUSH
37380: LD_INT 4
37382: ST_TO_ADDR
// animal := CreateVehicle ;
37383: LD_ADDR_VAR 0 12
37387: PUSH
37388: CALL_OW 45
37392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37393: LD_VAR 0 12
37397: PPUSH
37398: LD_VAR 0 8
37402: PPUSH
37403: LD_INT 0
37405: PPUSH
37406: CALL 39542 0 3
// end ;
37410: GO 37364
37412: POP
37413: POP
// if horses then
37414: LD_VAR 0 5
37418: IFFALSE 37485
// for i = 1 to horses do
37420: LD_ADDR_VAR 0 11
37424: PUSH
37425: DOUBLE
37426: LD_INT 1
37428: DEC
37429: ST_TO_ADDR
37430: LD_VAR 0 5
37434: PUSH
37435: FOR_TO
37436: IFFALSE 37483
// begin hc_class := 21 ;
37438: LD_ADDR_OWVAR 28
37442: PUSH
37443: LD_INT 21
37445: ST_TO_ADDR
// hc_gallery :=  ;
37446: LD_ADDR_OWVAR 33
37450: PUSH
37451: LD_STRING 
37453: ST_TO_ADDR
// animal := CreateHuman ;
37454: LD_ADDR_VAR 0 12
37458: PUSH
37459: CALL_OW 44
37463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37464: LD_VAR 0 12
37468: PPUSH
37469: LD_VAR 0 8
37473: PPUSH
37474: LD_INT 0
37476: PPUSH
37477: CALL 39542 0 3
// end ;
37481: GO 37435
37483: POP
37484: POP
// if birds then
37485: LD_VAR 0 1
37489: IFFALSE 37556
// for i = 1 to birds do
37491: LD_ADDR_VAR 0 11
37495: PUSH
37496: DOUBLE
37497: LD_INT 1
37499: DEC
37500: ST_TO_ADDR
37501: LD_VAR 0 1
37505: PUSH
37506: FOR_TO
37507: IFFALSE 37554
// begin hc_class := 18 ;
37509: LD_ADDR_OWVAR 28
37513: PUSH
37514: LD_INT 18
37516: ST_TO_ADDR
// hc_gallery =  ;
37517: LD_ADDR_OWVAR 33
37521: PUSH
37522: LD_STRING 
37524: ST_TO_ADDR
// animal := CreateHuman ;
37525: LD_ADDR_VAR 0 12
37529: PUSH
37530: CALL_OW 44
37534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37535: LD_VAR 0 12
37539: PPUSH
37540: LD_VAR 0 8
37544: PPUSH
37545: LD_INT 0
37547: PPUSH
37548: CALL 39542 0 3
// end ;
37552: GO 37506
37554: POP
37555: POP
// if tigers then
37556: LD_VAR 0 2
37560: IFFALSE 37644
// for i = 1 to tigers do
37562: LD_ADDR_VAR 0 11
37566: PUSH
37567: DOUBLE
37568: LD_INT 1
37570: DEC
37571: ST_TO_ADDR
37572: LD_VAR 0 2
37576: PUSH
37577: FOR_TO
37578: IFFALSE 37642
// begin hc_class = class_tiger ;
37580: LD_ADDR_OWVAR 28
37584: PUSH
37585: LD_INT 14
37587: ST_TO_ADDR
// hc_gallery =  ;
37588: LD_ADDR_OWVAR 33
37592: PUSH
37593: LD_STRING 
37595: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37596: LD_ADDR_OWVAR 35
37600: PUSH
37601: LD_INT 7
37603: NEG
37604: PPUSH
37605: LD_INT 7
37607: PPUSH
37608: CALL_OW 12
37612: ST_TO_ADDR
// animal := CreateHuman ;
37613: LD_ADDR_VAR 0 12
37617: PUSH
37618: CALL_OW 44
37622: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37623: LD_VAR 0 12
37627: PPUSH
37628: LD_VAR 0 8
37632: PPUSH
37633: LD_INT 0
37635: PPUSH
37636: CALL 39542 0 3
// end ;
37640: GO 37577
37642: POP
37643: POP
// if apemans then
37644: LD_VAR 0 3
37648: IFFALSE 37771
// for i = 1 to apemans do
37650: LD_ADDR_VAR 0 11
37654: PUSH
37655: DOUBLE
37656: LD_INT 1
37658: DEC
37659: ST_TO_ADDR
37660: LD_VAR 0 3
37664: PUSH
37665: FOR_TO
37666: IFFALSE 37769
// begin hc_class = class_apeman ;
37668: LD_ADDR_OWVAR 28
37672: PUSH
37673: LD_INT 12
37675: ST_TO_ADDR
// hc_gallery =  ;
37676: LD_ADDR_OWVAR 33
37680: PUSH
37681: LD_STRING 
37683: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37684: LD_ADDR_OWVAR 35
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PPUSH
37693: LD_INT 2
37695: PPUSH
37696: CALL_OW 12
37700: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37701: LD_ADDR_OWVAR 31
37705: PUSH
37706: LD_INT 1
37708: PPUSH
37709: LD_INT 3
37711: PPUSH
37712: CALL_OW 12
37716: PUSH
37717: LD_INT 1
37719: PPUSH
37720: LD_INT 3
37722: PPUSH
37723: CALL_OW 12
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// animal := CreateHuman ;
37740: LD_ADDR_VAR 0 12
37744: PUSH
37745: CALL_OW 44
37749: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37750: LD_VAR 0 12
37754: PPUSH
37755: LD_VAR 0 8
37759: PPUSH
37760: LD_INT 0
37762: PPUSH
37763: CALL 39542 0 3
// end ;
37767: GO 37665
37769: POP
37770: POP
// if enchidnas then
37771: LD_VAR 0 4
37775: IFFALSE 37842
// for i = 1 to enchidnas do
37777: LD_ADDR_VAR 0 11
37781: PUSH
37782: DOUBLE
37783: LD_INT 1
37785: DEC
37786: ST_TO_ADDR
37787: LD_VAR 0 4
37791: PUSH
37792: FOR_TO
37793: IFFALSE 37840
// begin hc_class = 13 ;
37795: LD_ADDR_OWVAR 28
37799: PUSH
37800: LD_INT 13
37802: ST_TO_ADDR
// hc_gallery =  ;
37803: LD_ADDR_OWVAR 33
37807: PUSH
37808: LD_STRING 
37810: ST_TO_ADDR
// animal := CreateHuman ;
37811: LD_ADDR_VAR 0 12
37815: PUSH
37816: CALL_OW 44
37820: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37821: LD_VAR 0 12
37825: PPUSH
37826: LD_VAR 0 8
37830: PPUSH
37831: LD_INT 0
37833: PPUSH
37834: CALL 39542 0 3
// end ;
37838: GO 37792
37840: POP
37841: POP
// if fishes then
37842: LD_VAR 0 7
37846: IFFALSE 37913
// for i = 1 to fishes do
37848: LD_ADDR_VAR 0 11
37852: PUSH
37853: DOUBLE
37854: LD_INT 1
37856: DEC
37857: ST_TO_ADDR
37858: LD_VAR 0 7
37862: PUSH
37863: FOR_TO
37864: IFFALSE 37911
// begin hc_class = 20 ;
37866: LD_ADDR_OWVAR 28
37870: PUSH
37871: LD_INT 20
37873: ST_TO_ADDR
// hc_gallery =  ;
37874: LD_ADDR_OWVAR 33
37878: PUSH
37879: LD_STRING 
37881: ST_TO_ADDR
// animal := CreateHuman ;
37882: LD_ADDR_VAR 0 12
37886: PUSH
37887: CALL_OW 44
37891: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37892: LD_VAR 0 12
37896: PPUSH
37897: LD_VAR 0 9
37901: PPUSH
37902: LD_INT 0
37904: PPUSH
37905: CALL 39542 0 3
// end ;
37909: GO 37863
37911: POP
37912: POP
// end ;
37913: LD_VAR 0 10
37917: RET
// export function WantHeal ( sci , unit ) ; begin
37918: LD_INT 0
37920: PPUSH
// if GetTaskList ( sci ) > 0 then
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 437
37930: PUSH
37931: LD_INT 0
37933: GREATER
37934: IFFALSE 38004
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37936: LD_VAR 0 1
37940: PPUSH
37941: CALL_OW 437
37945: PUSH
37946: LD_INT 1
37948: ARRAY
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PUSH
37954: LD_STRING l
37956: EQUAL
37957: PUSH
37958: LD_VAR 0 1
37962: PPUSH
37963: CALL_OW 437
37967: PUSH
37968: LD_INT 1
37970: ARRAY
37971: PUSH
37972: LD_INT 4
37974: ARRAY
37975: PUSH
37976: LD_VAR 0 2
37980: EQUAL
37981: AND
37982: IFFALSE 37994
// result := true else
37984: LD_ADDR_VAR 0 3
37988: PUSH
37989: LD_INT 1
37991: ST_TO_ADDR
37992: GO 38002
// result := false ;
37994: LD_ADDR_VAR 0 3
37998: PUSH
37999: LD_INT 0
38001: ST_TO_ADDR
// end else
38002: GO 38012
// result := false ;
38004: LD_ADDR_VAR 0 3
38008: PUSH
38009: LD_INT 0
38011: ST_TO_ADDR
// end ;
38012: LD_VAR 0 3
38016: RET
// export function HealTarget ( sci ) ; begin
38017: LD_INT 0
38019: PPUSH
// if not sci then
38020: LD_VAR 0 1
38024: NOT
38025: IFFALSE 38029
// exit ;
38027: GO 38094
// result := 0 ;
38029: LD_ADDR_VAR 0 2
38033: PUSH
38034: LD_INT 0
38036: ST_TO_ADDR
// if GetTaskList ( sci ) then
38037: LD_VAR 0 1
38041: PPUSH
38042: CALL_OW 437
38046: IFFALSE 38094
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 437
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: PUSH
38062: LD_INT 1
38064: ARRAY
38065: PUSH
38066: LD_STRING l
38068: EQUAL
38069: IFFALSE 38094
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38071: LD_ADDR_VAR 0 2
38075: PUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 437
38085: PUSH
38086: LD_INT 1
38088: ARRAY
38089: PUSH
38090: LD_INT 4
38092: ARRAY
38093: ST_TO_ADDR
// end ;
38094: LD_VAR 0 2
38098: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38099: LD_INT 0
38101: PPUSH
38102: PPUSH
38103: PPUSH
38104: PPUSH
// if not base_units then
38105: LD_VAR 0 1
38109: NOT
38110: IFFALSE 38114
// exit ;
38112: GO 38201
// result := false ;
38114: LD_ADDR_VAR 0 2
38118: PUSH
38119: LD_INT 0
38121: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38122: LD_ADDR_VAR 0 5
38126: PUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: LD_INT 21
38134: PUSH
38135: LD_INT 3
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PPUSH
38142: CALL_OW 72
38146: ST_TO_ADDR
// if not tmp then
38147: LD_VAR 0 5
38151: NOT
38152: IFFALSE 38156
// exit ;
38154: GO 38201
// for i in tmp do
38156: LD_ADDR_VAR 0 3
38160: PUSH
38161: LD_VAR 0 5
38165: PUSH
38166: FOR_IN
38167: IFFALSE 38199
// begin result := EnemyInRange ( i , 22 ) ;
38169: LD_ADDR_VAR 0 2
38173: PUSH
38174: LD_VAR 0 3
38178: PPUSH
38179: LD_INT 22
38181: PPUSH
38182: CALL 35779 0 2
38186: ST_TO_ADDR
// if result then
38187: LD_VAR 0 2
38191: IFFALSE 38197
// exit ;
38193: POP
38194: POP
38195: GO 38201
// end ;
38197: GO 38166
38199: POP
38200: POP
// end ;
38201: LD_VAR 0 2
38205: RET
// export function FilterByTag ( units , tag ) ; begin
38206: LD_INT 0
38208: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38209: LD_ADDR_VAR 0 3
38213: PUSH
38214: LD_VAR 0 1
38218: PPUSH
38219: LD_INT 120
38221: PUSH
38222: LD_VAR 0 2
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PPUSH
38231: CALL_OW 72
38235: ST_TO_ADDR
// end ;
38236: LD_VAR 0 3
38240: RET
// export function IsDriver ( un ) ; begin
38241: LD_INT 0
38243: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38244: LD_ADDR_VAR 0 2
38248: PUSH
38249: LD_VAR 0 1
38253: PUSH
38254: LD_INT 55
38256: PUSH
38257: EMPTY
38258: LIST
38259: PPUSH
38260: CALL_OW 69
38264: IN
38265: ST_TO_ADDR
// end ;
38266: LD_VAR 0 2
38270: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38271: LD_INT 0
38273: PPUSH
38274: PPUSH
// list := [ ] ;
38275: LD_ADDR_VAR 0 5
38279: PUSH
38280: EMPTY
38281: ST_TO_ADDR
// case d of 0 :
38282: LD_VAR 0 3
38286: PUSH
38287: LD_INT 0
38289: DOUBLE
38290: EQUAL
38291: IFTRUE 38295
38293: GO 38428
38295: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_VAR 0 1
38305: PUSH
38306: LD_INT 4
38308: MINUS
38309: PUSH
38310: LD_VAR 0 2
38314: PUSH
38315: LD_INT 4
38317: MINUS
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: PUSH
38327: LD_VAR 0 1
38331: PUSH
38332: LD_INT 3
38334: MINUS
38335: PUSH
38336: LD_VAR 0 2
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: LIST
38348: PUSH
38349: LD_VAR 0 1
38353: PUSH
38354: LD_INT 4
38356: PLUS
38357: PUSH
38358: LD_VAR 0 2
38362: PUSH
38363: LD_INT 4
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: LD_VAR 0 1
38375: PUSH
38376: LD_INT 3
38378: PLUS
38379: PUSH
38380: LD_VAR 0 2
38384: PUSH
38385: LD_INT 3
38387: PLUS
38388: PUSH
38389: LD_INT 5
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 4
38409: PLUS
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: LIST
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// end ; 1 :
38426: GO 39126
38428: LD_INT 1
38430: DOUBLE
38431: EQUAL
38432: IFTRUE 38436
38434: GO 38569
38436: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38437: LD_ADDR_VAR 0 5
38441: PUSH
38442: LD_VAR 0 1
38446: PUSH
38447: LD_VAR 0 2
38451: PUSH
38452: LD_INT 4
38454: MINUS
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: PUSH
38464: LD_VAR 0 1
38468: PUSH
38469: LD_INT 3
38471: MINUS
38472: PUSH
38473: LD_VAR 0 2
38477: PUSH
38478: LD_INT 3
38480: MINUS
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: PUSH
38490: LD_VAR 0 1
38494: PUSH
38495: LD_INT 4
38497: MINUS
38498: PUSH
38499: LD_VAR 0 2
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: PUSH
38512: LD_VAR 0 1
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: LD_INT 3
38524: PLUS
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: LIST
38533: PUSH
38534: LD_VAR 0 1
38538: PUSH
38539: LD_INT 4
38541: PLUS
38542: PUSH
38543: LD_VAR 0 2
38547: PUSH
38548: LD_INT 4
38550: PLUS
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
// end ; 2 :
38567: GO 39126
38569: LD_INT 2
38571: DOUBLE
38572: EQUAL
38573: IFTRUE 38577
38575: GO 38706
38577: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: LD_VAR 0 1
38587: PUSH
38588: LD_VAR 0 2
38592: PUSH
38593: LD_INT 3
38595: MINUS
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: LIST
38604: PUSH
38605: LD_VAR 0 1
38609: PUSH
38610: LD_INT 4
38612: PLUS
38613: PUSH
38614: LD_VAR 0 2
38618: PUSH
38619: LD_INT 4
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: PUSH
38627: LD_VAR 0 1
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 4
38639: PLUS
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: PUSH
38649: LD_VAR 0 1
38653: PUSH
38654: LD_INT 3
38656: MINUS
38657: PUSH
38658: LD_VAR 0 2
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: PUSH
38671: LD_VAR 0 1
38675: PUSH
38676: LD_INT 4
38678: MINUS
38679: PUSH
38680: LD_VAR 0 2
38684: PUSH
38685: LD_INT 4
38687: MINUS
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
// end ; 3 :
38704: GO 39126
38706: LD_INT 3
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38714
38712: GO 38847
38714: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38715: LD_ADDR_VAR 0 5
38719: PUSH
38720: LD_VAR 0 1
38724: PUSH
38725: LD_INT 3
38727: PLUS
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: LD_INT 4
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: LIST
38741: PUSH
38742: LD_VAR 0 1
38746: PUSH
38747: LD_INT 4
38749: PLUS
38750: PUSH
38751: LD_VAR 0 2
38755: PUSH
38756: LD_INT 4
38758: PLUS
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: LD_INT 4
38775: MINUS
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_INT 4
38802: MINUS
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: PUSH
38812: LD_VAR 0 1
38816: PUSH
38817: LD_INT 3
38819: MINUS
38820: PUSH
38821: LD_VAR 0 2
38825: PUSH
38826: LD_INT 3
38828: MINUS
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// end ; 4 :
38845: GO 39126
38847: LD_INT 4
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38855
38853: GO 38988
38855: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38856: LD_ADDR_VAR 0 5
38860: PUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_VAR 0 2
38870: PUSH
38871: LD_INT 4
38873: PLUS
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: PUSH
38883: LD_VAR 0 1
38887: PUSH
38888: LD_INT 3
38890: PLUS
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_INT 3
38899: PLUS
38900: PUSH
38901: LD_INT 5
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_INT 4
38916: PLUS
38917: PUSH
38918: LD_VAR 0 2
38922: PUSH
38923: LD_INT 4
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: LD_VAR 0 1
38935: PUSH
38936: LD_VAR 0 2
38940: PUSH
38941: LD_INT 3
38943: MINUS
38944: PUSH
38945: LD_INT 3
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: LD_INT 4
38960: MINUS
38961: PUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_INT 4
38969: MINUS
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: ST_TO_ADDR
// end ; 5 :
38986: GO 39126
38988: LD_INT 5
38990: DOUBLE
38991: EQUAL
38992: IFTRUE 38996
38994: GO 39125
38996: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38997: LD_ADDR_VAR 0 5
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 4
39009: MINUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 4
39036: MINUS
39037: PUSH
39038: LD_INT 3
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 4
39053: PLUS
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 4
39062: PLUS
39063: PUSH
39064: LD_INT 5
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 1
39076: PUSH
39077: LD_INT 3
39079: PLUS
39080: PUSH
39081: LD_VAR 0 2
39085: PUSH
39086: LD_INT 4
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: PUSH
39094: LD_VAR 0 1
39098: PUSH
39099: LD_VAR 0 2
39103: PUSH
39104: LD_INT 3
39106: PLUS
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// end ; end ;
39123: GO 39126
39125: POP
// result := list ;
39126: LD_ADDR_VAR 0 4
39130: PUSH
39131: LD_VAR 0 5
39135: ST_TO_ADDR
// end ;
39136: LD_VAR 0 4
39140: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39141: LD_INT 0
39143: PPUSH
39144: PPUSH
39145: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39146: LD_VAR 0 1
39150: NOT
39151: PUSH
39152: LD_VAR 0 2
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 2
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: LD_INT 4
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: IN
39175: NOT
39176: OR
39177: IFFALSE 39181
// exit ;
39179: GO 39264
// tmp := [ ] ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: EMPTY
39187: ST_TO_ADDR
// for i in units do
39188: LD_ADDR_VAR 0 4
39192: PUSH
39193: LD_VAR 0 1
39197: PUSH
39198: FOR_IN
39199: IFFALSE 39233
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39201: LD_ADDR_VAR 0 5
39205: PUSH
39206: LD_VAR 0 5
39210: PPUSH
39211: LD_VAR 0 4
39215: PPUSH
39216: LD_VAR 0 2
39220: PPUSH
39221: CALL_OW 259
39225: PPUSH
39226: CALL 40637 0 2
39230: ST_TO_ADDR
39231: GO 39198
39233: POP
39234: POP
// if not tmp then
39235: LD_VAR 0 5
39239: NOT
39240: IFFALSE 39244
// exit ;
39242: GO 39264
// result := SortListByListDesc ( units , tmp ) ;
39244: LD_ADDR_VAR 0 3
39248: PUSH
39249: LD_VAR 0 1
39253: PPUSH
39254: LD_VAR 0 5
39258: PPUSH
39259: CALL_OW 77
39263: ST_TO_ADDR
// end ;
39264: LD_VAR 0 3
39268: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39269: LD_INT 0
39271: PPUSH
39272: PPUSH
39273: PPUSH
// result := false ;
39274: LD_ADDR_VAR 0 3
39278: PUSH
39279: LD_INT 0
39281: ST_TO_ADDR
// if not building then
39282: LD_VAR 0 2
39286: NOT
39287: IFFALSE 39291
// exit ;
39289: GO 39429
// x := GetX ( building ) ;
39291: LD_ADDR_VAR 0 4
39295: PUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: CALL_OW 250
39305: ST_TO_ADDR
// y := GetY ( building ) ;
39306: LD_ADDR_VAR 0 5
39310: PUSH
39311: LD_VAR 0 2
39315: PPUSH
39316: CALL_OW 251
39320: ST_TO_ADDR
// if not x or not y then
39321: LD_VAR 0 4
39325: NOT
39326: PUSH
39327: LD_VAR 0 5
39331: NOT
39332: OR
39333: IFFALSE 39337
// exit ;
39335: GO 39429
// if GetTaskList ( unit ) then
39337: LD_VAR 0 1
39341: PPUSH
39342: CALL_OW 437
39346: IFFALSE 39429
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39348: LD_STRING e
39350: PUSH
39351: LD_VAR 0 1
39355: PPUSH
39356: CALL_OW 437
39360: PUSH
39361: LD_INT 1
39363: ARRAY
39364: PUSH
39365: LD_INT 1
39367: ARRAY
39368: EQUAL
39369: PUSH
39370: LD_VAR 0 4
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 437
39384: PUSH
39385: LD_INT 1
39387: ARRAY
39388: PUSH
39389: LD_INT 2
39391: ARRAY
39392: EQUAL
39393: AND
39394: PUSH
39395: LD_VAR 0 5
39399: PUSH
39400: LD_VAR 0 1
39404: PPUSH
39405: CALL_OW 437
39409: PUSH
39410: LD_INT 1
39412: ARRAY
39413: PUSH
39414: LD_INT 3
39416: ARRAY
39417: EQUAL
39418: AND
39419: IFFALSE 39429
// result := true end ;
39421: LD_ADDR_VAR 0 3
39425: PUSH
39426: LD_INT 1
39428: ST_TO_ADDR
// end ;
39429: LD_VAR 0 3
39433: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39434: LD_INT 0
39436: PPUSH
// result := false ;
39437: LD_ADDR_VAR 0 4
39441: PUSH
39442: LD_INT 0
39444: ST_TO_ADDR
// if GetTaskList ( unit ) then
39445: LD_VAR 0 1
39449: PPUSH
39450: CALL_OW 437
39454: IFFALSE 39537
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39456: LD_STRING M
39458: PUSH
39459: LD_VAR 0 1
39463: PPUSH
39464: CALL_OW 437
39468: PUSH
39469: LD_INT 1
39471: ARRAY
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: EQUAL
39477: PUSH
39478: LD_VAR 0 2
39482: PUSH
39483: LD_VAR 0 1
39487: PPUSH
39488: CALL_OW 437
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PUSH
39497: LD_INT 2
39499: ARRAY
39500: EQUAL
39501: AND
39502: PUSH
39503: LD_VAR 0 3
39507: PUSH
39508: LD_VAR 0 1
39512: PPUSH
39513: CALL_OW 437
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PUSH
39522: LD_INT 3
39524: ARRAY
39525: EQUAL
39526: AND
39527: IFFALSE 39537
// result := true ;
39529: LD_ADDR_VAR 0 4
39533: PUSH
39534: LD_INT 1
39536: ST_TO_ADDR
// end ; end ;
39537: LD_VAR 0 4
39541: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
// if not unit or not area then
39548: LD_VAR 0 1
39552: NOT
39553: PUSH
39554: LD_VAR 0 2
39558: NOT
39559: OR
39560: IFFALSE 39564
// exit ;
39562: GO 39740
// tmp := AreaToList ( area , i ) ;
39564: LD_ADDR_VAR 0 6
39568: PUSH
39569: LD_VAR 0 2
39573: PPUSH
39574: LD_VAR 0 5
39578: PPUSH
39579: CALL_OW 517
39583: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39584: LD_ADDR_VAR 0 5
39588: PUSH
39589: DOUBLE
39590: LD_INT 1
39592: DEC
39593: ST_TO_ADDR
39594: LD_VAR 0 6
39598: PUSH
39599: LD_INT 1
39601: ARRAY
39602: PUSH
39603: FOR_TO
39604: IFFALSE 39738
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39606: LD_ADDR_VAR 0 7
39610: PUSH
39611: LD_VAR 0 6
39615: PUSH
39616: LD_INT 1
39618: ARRAY
39619: PUSH
39620: LD_VAR 0 5
39624: ARRAY
39625: PUSH
39626: LD_VAR 0 6
39630: PUSH
39631: LD_INT 2
39633: ARRAY
39634: PUSH
39635: LD_VAR 0 5
39639: ARRAY
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39645: LD_INT 92
39647: PUSH
39648: LD_VAR 0 7
39652: PUSH
39653: LD_INT 1
39655: ARRAY
39656: PUSH
39657: LD_VAR 0 7
39661: PUSH
39662: LD_INT 2
39664: ARRAY
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: PPUSH
39675: CALL_OW 69
39679: PUSH
39680: LD_INT 0
39682: EQUAL
39683: IFFALSE 39736
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39685: LD_VAR 0 1
39689: PPUSH
39690: LD_VAR 0 7
39694: PUSH
39695: LD_INT 1
39697: ARRAY
39698: PPUSH
39699: LD_VAR 0 7
39703: PUSH
39704: LD_INT 2
39706: ARRAY
39707: PPUSH
39708: LD_VAR 0 3
39712: PPUSH
39713: CALL_OW 48
// result := IsPlaced ( unit ) ;
39717: LD_ADDR_VAR 0 4
39721: PUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: CALL_OW 305
39731: ST_TO_ADDR
// exit ;
39732: POP
39733: POP
39734: GO 39740
// end ; end ;
39736: GO 39603
39738: POP
39739: POP
// end ;
39740: LD_VAR 0 4
39744: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
39749: PPUSH
// if not side or side > 8 then
39750: LD_VAR 0 1
39754: NOT
39755: PUSH
39756: LD_VAR 0 1
39760: PUSH
39761: LD_INT 8
39763: GREATER
39764: OR
39765: IFFALSE 39769
// exit ;
39767: GO 39956
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39769: LD_ADDR_VAR 0 4
39773: PUSH
39774: LD_INT 22
39776: PUSH
39777: LD_VAR 0 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 21
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PPUSH
39800: CALL_OW 69
39804: ST_TO_ADDR
// if not tmp then
39805: LD_VAR 0 4
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 39956
// enable_addtolog := true ;
39814: LD_ADDR_OWVAR 81
39818: PUSH
39819: LD_INT 1
39821: ST_TO_ADDR
// AddToLog ( [ ) ;
39822: LD_STRING [
39824: PPUSH
39825: CALL_OW 561
// for i in tmp do
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_VAR 0 4
39838: PUSH
39839: FOR_IN
39840: IFFALSE 39947
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39842: LD_STRING [
39844: PUSH
39845: LD_VAR 0 3
39849: PPUSH
39850: CALL_OW 266
39854: STR
39855: PUSH
39856: LD_STRING , 
39858: STR
39859: PUSH
39860: LD_VAR 0 3
39864: PPUSH
39865: CALL_OW 250
39869: STR
39870: PUSH
39871: LD_STRING , 
39873: STR
39874: PUSH
39875: LD_VAR 0 3
39879: PPUSH
39880: CALL_OW 251
39884: STR
39885: PUSH
39886: LD_STRING , 
39888: STR
39889: PUSH
39890: LD_VAR 0 3
39894: PPUSH
39895: CALL_OW 254
39899: STR
39900: PUSH
39901: LD_STRING , 
39903: STR
39904: PUSH
39905: LD_VAR 0 3
39909: PPUSH
39910: LD_INT 1
39912: PPUSH
39913: CALL_OW 268
39917: STR
39918: PUSH
39919: LD_STRING , 
39921: STR
39922: PUSH
39923: LD_VAR 0 3
39927: PPUSH
39928: LD_INT 2
39930: PPUSH
39931: CALL_OW 268
39935: STR
39936: PUSH
39937: LD_STRING ],
39939: STR
39940: PPUSH
39941: CALL_OW 561
// end ;
39945: GO 39839
39947: POP
39948: POP
// AddToLog ( ]; ) ;
39949: LD_STRING ];
39951: PPUSH
39952: CALL_OW 561
// end ;
39956: LD_VAR 0 2
39960: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39961: LD_INT 0
39963: PPUSH
39964: PPUSH
39965: PPUSH
39966: PPUSH
39967: PPUSH
// if not area or not rate or not max then
39968: LD_VAR 0 1
39972: NOT
39973: PUSH
39974: LD_VAR 0 2
39978: NOT
39979: OR
39980: PUSH
39981: LD_VAR 0 4
39985: NOT
39986: OR
39987: IFFALSE 39991
// exit ;
39989: GO 40180
// while 1 do
39991: LD_INT 1
39993: IFFALSE 40180
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39995: LD_ADDR_VAR 0 9
39999: PUSH
40000: LD_VAR 0 1
40004: PPUSH
40005: LD_INT 1
40007: PPUSH
40008: CALL_OW 287
40012: PUSH
40013: LD_INT 10
40015: MUL
40016: ST_TO_ADDR
// r := rate / 10 ;
40017: LD_ADDR_VAR 0 7
40021: PUSH
40022: LD_VAR 0 2
40026: PUSH
40027: LD_INT 10
40029: DIVREAL
40030: ST_TO_ADDR
// time := 1 1$00 ;
40031: LD_ADDR_VAR 0 8
40035: PUSH
40036: LD_INT 2100
40038: ST_TO_ADDR
// if amount < min then
40039: LD_VAR 0 9
40043: PUSH
40044: LD_VAR 0 3
40048: LESS
40049: IFFALSE 40067
// r := r * 2 else
40051: LD_ADDR_VAR 0 7
40055: PUSH
40056: LD_VAR 0 7
40060: PUSH
40061: LD_INT 2
40063: MUL
40064: ST_TO_ADDR
40065: GO 40093
// if amount > max then
40067: LD_VAR 0 9
40071: PUSH
40072: LD_VAR 0 4
40076: GREATER
40077: IFFALSE 40093
// r := r / 2 ;
40079: LD_ADDR_VAR 0 7
40083: PUSH
40084: LD_VAR 0 7
40088: PUSH
40089: LD_INT 2
40091: DIVREAL
40092: ST_TO_ADDR
// time := time / r ;
40093: LD_ADDR_VAR 0 8
40097: PUSH
40098: LD_VAR 0 8
40102: PUSH
40103: LD_VAR 0 7
40107: DIVREAL
40108: ST_TO_ADDR
// if time < 0 then
40109: LD_VAR 0 8
40113: PUSH
40114: LD_INT 0
40116: LESS
40117: IFFALSE 40134
// time := time * - 1 ;
40119: LD_ADDR_VAR 0 8
40123: PUSH
40124: LD_VAR 0 8
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: MUL
40133: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40134: LD_VAR 0 8
40138: PUSH
40139: LD_INT 35
40141: PPUSH
40142: LD_INT 875
40144: PPUSH
40145: CALL_OW 12
40149: PLUS
40150: PPUSH
40151: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40155: LD_INT 1
40157: PPUSH
40158: LD_INT 5
40160: PPUSH
40161: CALL_OW 12
40165: PPUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: LD_INT 1
40173: PPUSH
40174: CALL_OW 55
// end ;
40178: GO 39991
// end ;
40180: LD_VAR 0 5
40184: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40185: LD_INT 0
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
40193: PPUSH
40194: PPUSH
// if not turrets or not factories then
40195: LD_VAR 0 1
40199: NOT
40200: PUSH
40201: LD_VAR 0 2
40205: NOT
40206: OR
40207: IFFALSE 40211
// exit ;
40209: GO 40518
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40211: LD_ADDR_VAR 0 10
40215: PUSH
40216: LD_INT 5
40218: PUSH
40219: LD_INT 6
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: LD_INT 4
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: LD_INT 5
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 24
40253: PUSH
40254: LD_INT 25
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 23
40263: PUSH
40264: LD_INT 27
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 42
40277: PUSH
40278: LD_INT 43
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 44
40287: PUSH
40288: LD_INT 46
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 45
40297: PUSH
40298: LD_INT 47
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: LIST
40314: ST_TO_ADDR
// result := [ ] ;
40315: LD_ADDR_VAR 0 3
40319: PUSH
40320: EMPTY
40321: ST_TO_ADDR
// for i in turrets do
40322: LD_ADDR_VAR 0 4
40326: PUSH
40327: LD_VAR 0 1
40331: PUSH
40332: FOR_IN
40333: IFFALSE 40516
// begin nat := GetNation ( i ) ;
40335: LD_ADDR_VAR 0 7
40339: PUSH
40340: LD_VAR 0 4
40344: PPUSH
40345: CALL_OW 248
40349: ST_TO_ADDR
// weapon := 0 ;
40350: LD_ADDR_VAR 0 8
40354: PUSH
40355: LD_INT 0
40357: ST_TO_ADDR
// if not nat then
40358: LD_VAR 0 7
40362: NOT
40363: IFFALSE 40367
// continue ;
40365: GO 40332
// for j in list [ nat ] do
40367: LD_ADDR_VAR 0 5
40371: PUSH
40372: LD_VAR 0 10
40376: PUSH
40377: LD_VAR 0 7
40381: ARRAY
40382: PUSH
40383: FOR_IN
40384: IFFALSE 40425
// if GetBWeapon ( i ) = j [ 1 ] then
40386: LD_VAR 0 4
40390: PPUSH
40391: CALL_OW 269
40395: PUSH
40396: LD_VAR 0 5
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: EQUAL
40405: IFFALSE 40423
// begin weapon := j [ 2 ] ;
40407: LD_ADDR_VAR 0 8
40411: PUSH
40412: LD_VAR 0 5
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: ST_TO_ADDR
// break ;
40421: GO 40425
// end ;
40423: GO 40383
40425: POP
40426: POP
// if not weapon then
40427: LD_VAR 0 8
40431: NOT
40432: IFFALSE 40436
// continue ;
40434: GO 40332
// for k in factories do
40436: LD_ADDR_VAR 0 6
40440: PUSH
40441: LD_VAR 0 2
40445: PUSH
40446: FOR_IN
40447: IFFALSE 40512
// begin weapons := AvailableWeaponList ( k ) ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_VAR 0 6
40458: PPUSH
40459: CALL_OW 478
40463: ST_TO_ADDR
// if not weapons then
40464: LD_VAR 0 9
40468: NOT
40469: IFFALSE 40473
// continue ;
40471: GO 40446
// if weapon in weapons then
40473: LD_VAR 0 8
40477: PUSH
40478: LD_VAR 0 9
40482: IN
40483: IFFALSE 40510
// begin result := [ i , weapon ] ;
40485: LD_ADDR_VAR 0 3
40489: PUSH
40490: LD_VAR 0 4
40494: PUSH
40495: LD_VAR 0 8
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// exit ;
40504: POP
40505: POP
40506: POP
40507: POP
40508: GO 40518
// end ; end ;
40510: GO 40446
40512: POP
40513: POP
// end ;
40514: GO 40332
40516: POP
40517: POP
// end ;
40518: LD_VAR 0 3
40522: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40523: LD_INT 0
40525: PPUSH
// if not side or side > 8 then
40526: LD_VAR 0 3
40530: NOT
40531: PUSH
40532: LD_VAR 0 3
40536: PUSH
40537: LD_INT 8
40539: GREATER
40540: OR
40541: IFFALSE 40545
// exit ;
40543: GO 40604
// if not range then
40545: LD_VAR 0 4
40549: NOT
40550: IFFALSE 40561
// range := - 12 ;
40552: LD_ADDR_VAR 0 4
40556: PUSH
40557: LD_INT 12
40559: NEG
40560: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_VAR 0 2
40570: PPUSH
40571: LD_VAR 0 3
40575: PPUSH
40576: LD_VAR 0 4
40580: PPUSH
40581: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40585: LD_VAR 0 1
40589: PPUSH
40590: LD_VAR 0 2
40594: PPUSH
40595: LD_VAR 0 3
40599: PPUSH
40600: CALL_OW 331
// end ;
40604: LD_VAR 0 5
40608: RET
// export function Video ( mode ) ; begin
40609: LD_INT 0
40611: PPUSH
// ingame_video = mode ;
40612: LD_ADDR_OWVAR 52
40616: PUSH
40617: LD_VAR 0 1
40621: ST_TO_ADDR
// interface_hidden = mode ;
40622: LD_ADDR_OWVAR 54
40626: PUSH
40627: LD_VAR 0 1
40631: ST_TO_ADDR
// end ;
40632: LD_VAR 0 2
40636: RET
// export function Join ( array , element ) ; begin
40637: LD_INT 0
40639: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_VAR 0 1
40649: PPUSH
40650: LD_VAR 0 1
40654: PUSH
40655: LD_INT 1
40657: PLUS
40658: PPUSH
40659: LD_VAR 0 2
40663: PPUSH
40664: CALL_OW 1
40668: ST_TO_ADDR
// end ;
40669: LD_VAR 0 3
40673: RET
// export function JoinUnion ( array , element ) ; begin
40674: LD_INT 0
40676: PPUSH
// result := array union element ;
40677: LD_ADDR_VAR 0 3
40681: PUSH
40682: LD_VAR 0 1
40686: PUSH
40687: LD_VAR 0 2
40691: UNION
40692: ST_TO_ADDR
// end ;
40693: LD_VAR 0 3
40697: RET
// export function GetBehemoths ( side ) ; begin
40698: LD_INT 0
40700: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40701: LD_ADDR_VAR 0 2
40705: PUSH
40706: LD_INT 22
40708: PUSH
40709: LD_VAR 0 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 31
40720: PUSH
40721: LD_INT 25
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PPUSH
40732: CALL_OW 69
40736: ST_TO_ADDR
// end ;
40737: LD_VAR 0 2
40741: RET
// export function Shuffle ( array ) ; var i , index ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
40746: PPUSH
// result := [ ] ;
40747: LD_ADDR_VAR 0 2
40751: PUSH
40752: EMPTY
40753: ST_TO_ADDR
// if not array then
40754: LD_VAR 0 1
40758: NOT
40759: IFFALSE 40763
// exit ;
40761: GO 40862
// Randomize ;
40763: CALL_OW 10
// for i = array downto 1 do
40767: LD_ADDR_VAR 0 3
40771: PUSH
40772: DOUBLE
40773: LD_VAR 0 1
40777: INC
40778: ST_TO_ADDR
40779: LD_INT 1
40781: PUSH
40782: FOR_DOWNTO
40783: IFFALSE 40860
// begin index := rand ( 1 , array ) ;
40785: LD_ADDR_VAR 0 4
40789: PUSH
40790: LD_INT 1
40792: PPUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 12
40802: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40803: LD_ADDR_VAR 0 2
40807: PUSH
40808: LD_VAR 0 2
40812: PPUSH
40813: LD_VAR 0 2
40817: PUSH
40818: LD_INT 1
40820: PLUS
40821: PPUSH
40822: LD_VAR 0 1
40826: PUSH
40827: LD_VAR 0 4
40831: ARRAY
40832: PPUSH
40833: CALL_OW 2
40837: ST_TO_ADDR
// array := Delete ( array , index ) ;
40838: LD_ADDR_VAR 0 1
40842: PUSH
40843: LD_VAR 0 1
40847: PPUSH
40848: LD_VAR 0 4
40852: PPUSH
40853: CALL_OW 3
40857: ST_TO_ADDR
// end ;
40858: GO 40782
40860: POP
40861: POP
// end ;
40862: LD_VAR 0 2
40866: RET
// export function GetBaseMaterials ( base ) ; begin
40867: LD_INT 0
40869: PPUSH
// result := [ 0 , 0 , 0 ] ;
40870: LD_ADDR_VAR 0 2
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// if not base then
40889: LD_VAR 0 1
40893: NOT
40894: IFFALSE 40898
// exit ;
40896: GO 40947
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40898: LD_ADDR_VAR 0 2
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: LD_INT 1
40910: PPUSH
40911: CALL_OW 275
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: LD_INT 2
40923: PPUSH
40924: CALL_OW 275
40928: PUSH
40929: LD_VAR 0 1
40933: PPUSH
40934: LD_INT 3
40936: PPUSH
40937: CALL_OW 275
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// end ;
40947: LD_VAR 0 2
40951: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40952: LD_INT 0
40954: PPUSH
40955: PPUSH
// result := array ;
40956: LD_ADDR_VAR 0 3
40960: PUSH
40961: LD_VAR 0 1
40965: ST_TO_ADDR
// if size >= result then
40966: LD_VAR 0 2
40970: PUSH
40971: LD_VAR 0 3
40975: GREATEREQUAL
40976: IFFALSE 40980
// exit ;
40978: GO 41030
// if size then
40980: LD_VAR 0 2
40984: IFFALSE 41030
// for i := array downto size do
40986: LD_ADDR_VAR 0 4
40990: PUSH
40991: DOUBLE
40992: LD_VAR 0 1
40996: INC
40997: ST_TO_ADDR
40998: LD_VAR 0 2
41002: PUSH
41003: FOR_DOWNTO
41004: IFFALSE 41028
// result := Delete ( result , result ) ;
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_VAR 0 3
41015: PPUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: CALL_OW 3
41025: ST_TO_ADDR
41026: GO 41003
41028: POP
41029: POP
// end ;
41030: LD_VAR 0 3
41034: RET
// export function ComExit ( unit ) ; var tmp ; begin
41035: LD_INT 0
41037: PPUSH
41038: PPUSH
// if not IsInUnit ( unit ) then
41039: LD_VAR 0 1
41043: PPUSH
41044: CALL_OW 310
41048: NOT
41049: IFFALSE 41053
// exit ;
41051: GO 41113
// tmp := IsInUnit ( unit ) ;
41053: LD_ADDR_VAR 0 3
41057: PUSH
41058: LD_VAR 0 1
41062: PPUSH
41063: CALL_OW 310
41067: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41068: LD_VAR 0 3
41072: PPUSH
41073: CALL_OW 247
41077: PUSH
41078: LD_INT 2
41080: EQUAL
41081: IFFALSE 41094
// ComExitVehicle ( unit ) else
41083: LD_VAR 0 1
41087: PPUSH
41088: CALL_OW 121
41092: GO 41103
// ComExitBuilding ( unit ) ;
41094: LD_VAR 0 1
41098: PPUSH
41099: CALL_OW 122
// result := tmp ;
41103: LD_ADDR_VAR 0 2
41107: PUSH
41108: LD_VAR 0 3
41112: ST_TO_ADDR
// end ;
41113: LD_VAR 0 2
41117: RET
// export function ComExitAll ( units ) ; var i ; begin
41118: LD_INT 0
41120: PPUSH
41121: PPUSH
// if not units then
41122: LD_VAR 0 1
41126: NOT
41127: IFFALSE 41131
// exit ;
41129: GO 41157
// for i in units do
41131: LD_ADDR_VAR 0 3
41135: PUSH
41136: LD_VAR 0 1
41140: PUSH
41141: FOR_IN
41142: IFFALSE 41155
// ComExit ( i ) ;
41144: LD_VAR 0 3
41148: PPUSH
41149: CALL 41035 0 1
41153: GO 41141
41155: POP
41156: POP
// end ;
41157: LD_VAR 0 2
41161: RET
// export function ResetHc ; begin
41162: LD_INT 0
41164: PPUSH
// InitHc ;
41165: CALL_OW 19
// hc_importance := 0 ;
41169: LD_ADDR_OWVAR 32
41173: PUSH
41174: LD_INT 0
41176: ST_TO_ADDR
// end ;
41177: LD_VAR 0 1
41181: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41182: LD_INT 0
41184: PPUSH
41185: PPUSH
41186: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41187: LD_ADDR_VAR 0 6
41191: PUSH
41192: LD_VAR 0 1
41196: PUSH
41197: LD_VAR 0 3
41201: PLUS
41202: PUSH
41203: LD_INT 2
41205: DIV
41206: ST_TO_ADDR
// if _x < 0 then
41207: LD_VAR 0 6
41211: PUSH
41212: LD_INT 0
41214: LESS
41215: IFFALSE 41232
// _x := _x * - 1 ;
41217: LD_ADDR_VAR 0 6
41221: PUSH
41222: LD_VAR 0 6
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: MUL
41231: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41232: LD_ADDR_VAR 0 7
41236: PUSH
41237: LD_VAR 0 2
41241: PUSH
41242: LD_VAR 0 4
41246: PLUS
41247: PUSH
41248: LD_INT 2
41250: DIV
41251: ST_TO_ADDR
// if _y < 0 then
41252: LD_VAR 0 7
41256: PUSH
41257: LD_INT 0
41259: LESS
41260: IFFALSE 41277
// _y := _y * - 1 ;
41262: LD_ADDR_VAR 0 7
41266: PUSH
41267: LD_VAR 0 7
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: MUL
41276: ST_TO_ADDR
// result := [ _x , _y ] ;
41277: LD_ADDR_VAR 0 5
41281: PUSH
41282: LD_VAR 0 6
41286: PUSH
41287: LD_VAR 0 7
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// end ;
41296: LD_VAR 0 5
41300: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41301: LD_INT 0
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
// task := GetTaskList ( unit ) ;
41307: LD_ADDR_VAR 0 7
41311: PUSH
41312: LD_VAR 0 1
41316: PPUSH
41317: CALL_OW 437
41321: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41322: LD_VAR 0 7
41326: NOT
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: CALL_OW 308
41342: NOT
41343: AND
41344: IFFALSE 41348
// exit ;
41346: GO 41466
// if IsInArea ( unit , area ) then
41348: LD_VAR 0 1
41352: PPUSH
41353: LD_VAR 0 2
41357: PPUSH
41358: CALL_OW 308
41362: IFFALSE 41380
// begin ComMoveToArea ( unit , goAway ) ;
41364: LD_VAR 0 1
41368: PPUSH
41369: LD_VAR 0 3
41373: PPUSH
41374: CALL_OW 113
// exit ;
41378: GO 41466
// end ; if task [ 1 ] [ 1 ] <> M then
41380: LD_VAR 0 7
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PUSH
41389: LD_INT 1
41391: ARRAY
41392: PUSH
41393: LD_STRING M
41395: NONEQUAL
41396: IFFALSE 41400
// exit ;
41398: GO 41466
// x := task [ 1 ] [ 2 ] ;
41400: LD_ADDR_VAR 0 5
41404: PUSH
41405: LD_VAR 0 7
41409: PUSH
41410: LD_INT 1
41412: ARRAY
41413: PUSH
41414: LD_INT 2
41416: ARRAY
41417: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41418: LD_ADDR_VAR 0 6
41422: PUSH
41423: LD_VAR 0 7
41427: PUSH
41428: LD_INT 1
41430: ARRAY
41431: PUSH
41432: LD_INT 3
41434: ARRAY
41435: ST_TO_ADDR
// if InArea ( x , y , area ) then
41436: LD_VAR 0 5
41440: PPUSH
41441: LD_VAR 0 6
41445: PPUSH
41446: LD_VAR 0 2
41450: PPUSH
41451: CALL_OW 309
41455: IFFALSE 41466
// ComStop ( unit ) ;
41457: LD_VAR 0 1
41461: PPUSH
41462: CALL_OW 141
// end ;
41466: LD_VAR 0 4
41470: RET
// export function Abs ( value ) ; begin
41471: LD_INT 0
41473: PPUSH
// result := value ;
41474: LD_ADDR_VAR 0 2
41478: PUSH
41479: LD_VAR 0 1
41483: ST_TO_ADDR
// if value < 0 then
41484: LD_VAR 0 1
41488: PUSH
41489: LD_INT 0
41491: LESS
41492: IFFALSE 41509
// result := value * - 1 ;
41494: LD_ADDR_VAR 0 2
41498: PUSH
41499: LD_VAR 0 1
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: MUL
41508: ST_TO_ADDR
// end ;
41509: LD_VAR 0 2
41513: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41514: LD_INT 0
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
// if not unit or not building then
41524: LD_VAR 0 1
41528: NOT
41529: PUSH
41530: LD_VAR 0 2
41534: NOT
41535: OR
41536: IFFALSE 41540
// exit ;
41538: GO 41766
// x := GetX ( building ) ;
41540: LD_ADDR_VAR 0 4
41544: PUSH
41545: LD_VAR 0 2
41549: PPUSH
41550: CALL_OW 250
41554: ST_TO_ADDR
// y := GetY ( building ) ;
41555: LD_ADDR_VAR 0 6
41559: PUSH
41560: LD_VAR 0 2
41564: PPUSH
41565: CALL_OW 251
41569: ST_TO_ADDR
// d := GetDir ( building ) ;
41570: LD_ADDR_VAR 0 8
41574: PUSH
41575: LD_VAR 0 2
41579: PPUSH
41580: CALL_OW 254
41584: ST_TO_ADDR
// r := 4 ;
41585: LD_ADDR_VAR 0 9
41589: PUSH
41590: LD_INT 4
41592: ST_TO_ADDR
// for i := 1 to 5 do
41593: LD_ADDR_VAR 0 10
41597: PUSH
41598: DOUBLE
41599: LD_INT 1
41601: DEC
41602: ST_TO_ADDR
41603: LD_INT 5
41605: PUSH
41606: FOR_TO
41607: IFFALSE 41764
// begin _x := ShiftX ( x , d , r + i ) ;
41609: LD_ADDR_VAR 0 5
41613: PUSH
41614: LD_VAR 0 4
41618: PPUSH
41619: LD_VAR 0 8
41623: PPUSH
41624: LD_VAR 0 9
41628: PUSH
41629: LD_VAR 0 10
41633: PLUS
41634: PPUSH
41635: CALL_OW 272
41639: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41640: LD_ADDR_VAR 0 7
41644: PUSH
41645: LD_VAR 0 6
41649: PPUSH
41650: LD_VAR 0 8
41654: PPUSH
41655: LD_VAR 0 9
41659: PUSH
41660: LD_VAR 0 10
41664: PLUS
41665: PPUSH
41666: CALL_OW 273
41670: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41671: LD_VAR 0 5
41675: PPUSH
41676: LD_VAR 0 7
41680: PPUSH
41681: CALL_OW 488
41685: PUSH
41686: LD_VAR 0 5
41690: PPUSH
41691: LD_VAR 0 7
41695: PPUSH
41696: CALL_OW 428
41700: PPUSH
41701: CALL_OW 247
41705: PUSH
41706: LD_INT 3
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: IN
41716: NOT
41717: AND
41718: IFFALSE 41762
// begin ComMoveXY ( unit , _x , _y ) ;
41720: LD_VAR 0 1
41724: PPUSH
41725: LD_VAR 0 5
41729: PPUSH
41730: LD_VAR 0 7
41734: PPUSH
41735: CALL_OW 111
// result := [ _x , _y ] ;
41739: LD_ADDR_VAR 0 3
41743: PUSH
41744: LD_VAR 0 5
41748: PUSH
41749: LD_VAR 0 7
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: ST_TO_ADDR
// exit ;
41758: POP
41759: POP
41760: GO 41766
// end ; end ;
41762: GO 41606
41764: POP
41765: POP
// end ;
41766: LD_VAR 0 3
41770: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
// result := 0 ;
41776: LD_ADDR_VAR 0 3
41780: PUSH
41781: LD_INT 0
41783: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41784: LD_VAR 0 1
41788: PUSH
41789: LD_INT 0
41791: LESS
41792: PUSH
41793: LD_VAR 0 1
41797: PUSH
41798: LD_INT 8
41800: GREATER
41801: OR
41802: PUSH
41803: LD_VAR 0 2
41807: PUSH
41808: LD_INT 0
41810: LESS
41811: OR
41812: PUSH
41813: LD_VAR 0 2
41817: PUSH
41818: LD_INT 8
41820: GREATER
41821: OR
41822: IFFALSE 41826
// exit ;
41824: GO 41901
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41826: LD_ADDR_VAR 0 4
41830: PUSH
41831: LD_INT 22
41833: PUSH
41834: LD_VAR 0 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PPUSH
41843: CALL_OW 69
41847: PUSH
41848: FOR_IN
41849: IFFALSE 41899
// begin un := UnitShoot ( i ) ;
41851: LD_ADDR_VAR 0 5
41855: PUSH
41856: LD_VAR 0 4
41860: PPUSH
41861: CALL_OW 504
41865: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41866: LD_VAR 0 5
41870: PPUSH
41871: CALL_OW 255
41875: PUSH
41876: LD_VAR 0 1
41880: EQUAL
41881: IFFALSE 41897
// begin result := un ;
41883: LD_ADDR_VAR 0 3
41887: PUSH
41888: LD_VAR 0 5
41892: ST_TO_ADDR
// exit ;
41893: POP
41894: POP
41895: GO 41901
// end ; end ;
41897: GO 41848
41899: POP
41900: POP
// end ;
41901: LD_VAR 0 3
41905: RET
// export function GetCargoBay ( units ) ; begin
41906: LD_INT 0
41908: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41909: LD_ADDR_VAR 0 2
41913: PUSH
41914: LD_VAR 0 1
41918: PPUSH
41919: LD_INT 2
41921: PUSH
41922: LD_INT 34
41924: PUSH
41925: LD_INT 12
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 34
41934: PUSH
41935: LD_INT 51
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 34
41944: PUSH
41945: LD_INT 32
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 34
41954: PUSH
41955: LD_INT 89
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: PPUSH
41969: CALL_OW 72
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 2
41978: RET
// export function Negate ( value ) ; begin
41979: LD_INT 0
41981: PPUSH
// result := not value ;
41982: LD_ADDR_VAR 0 2
41986: PUSH
41987: LD_VAR 0 1
41991: NOT
41992: ST_TO_ADDR
// end ;
41993: LD_VAR 0 2
41997: RET
// export function Inc ( value ) ; begin
41998: LD_INT 0
42000: PPUSH
// result := value + 1 ;
42001: LD_ADDR_VAR 0 2
42005: PUSH
42006: LD_VAR 0 1
42010: PUSH
42011: LD_INT 1
42013: PLUS
42014: ST_TO_ADDR
// end ;
42015: LD_VAR 0 2
42019: RET
// export function Dec ( value ) ; begin
42020: LD_INT 0
42022: PPUSH
// result := value - 1 ;
42023: LD_ADDR_VAR 0 2
42027: PUSH
42028: LD_VAR 0 1
42032: PUSH
42033: LD_INT 1
42035: MINUS
42036: ST_TO_ADDR
// end ;
42037: LD_VAR 0 2
42041: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42042: LD_INT 0
42044: PPUSH
42045: PPUSH
42046: PPUSH
42047: PPUSH
42048: PPUSH
42049: PPUSH
42050: PPUSH
42051: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42052: LD_VAR 0 1
42056: PPUSH
42057: LD_VAR 0 2
42061: PPUSH
42062: CALL_OW 488
42066: NOT
42067: PUSH
42068: LD_VAR 0 3
42072: PPUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: CALL_OW 488
42082: NOT
42083: OR
42084: IFFALSE 42097
// begin result := - 1 ;
42086: LD_ADDR_VAR 0 5
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: ST_TO_ADDR
// exit ;
42095: GO 42332
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42097: LD_ADDR_VAR 0 12
42101: PUSH
42102: LD_VAR 0 1
42106: PPUSH
42107: LD_VAR 0 2
42111: PPUSH
42112: LD_VAR 0 3
42116: PPUSH
42117: LD_VAR 0 4
42121: PPUSH
42122: CALL 41182 0 4
42126: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42127: LD_ADDR_VAR 0 11
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: LD_VAR 0 2
42141: PPUSH
42142: LD_VAR 0 12
42146: PUSH
42147: LD_INT 1
42149: ARRAY
42150: PPUSH
42151: LD_VAR 0 12
42155: PUSH
42156: LD_INT 2
42158: ARRAY
42159: PPUSH
42160: CALL_OW 298
42164: ST_TO_ADDR
// distance := 9999 ;
42165: LD_ADDR_VAR 0 10
42169: PUSH
42170: LD_INT 9999
42172: ST_TO_ADDR
// for i := 0 to 5 do
42173: LD_ADDR_VAR 0 6
42177: PUSH
42178: DOUBLE
42179: LD_INT 0
42181: DEC
42182: ST_TO_ADDR
42183: LD_INT 5
42185: PUSH
42186: FOR_TO
42187: IFFALSE 42330
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42189: LD_ADDR_VAR 0 7
42193: PUSH
42194: LD_VAR 0 1
42198: PPUSH
42199: LD_VAR 0 6
42203: PPUSH
42204: LD_VAR 0 11
42208: PPUSH
42209: CALL_OW 272
42213: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42214: LD_ADDR_VAR 0 8
42218: PUSH
42219: LD_VAR 0 2
42223: PPUSH
42224: LD_VAR 0 6
42228: PPUSH
42229: LD_VAR 0 11
42233: PPUSH
42234: CALL_OW 273
42238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42239: LD_VAR 0 7
42243: PPUSH
42244: LD_VAR 0 8
42248: PPUSH
42249: CALL_OW 488
42253: NOT
42254: IFFALSE 42258
// continue ;
42256: GO 42186
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42258: LD_ADDR_VAR 0 9
42262: PUSH
42263: LD_VAR 0 12
42267: PUSH
42268: LD_INT 1
42270: ARRAY
42271: PPUSH
42272: LD_VAR 0 12
42276: PUSH
42277: LD_INT 2
42279: ARRAY
42280: PPUSH
42281: LD_VAR 0 7
42285: PPUSH
42286: LD_VAR 0 8
42290: PPUSH
42291: CALL_OW 298
42295: ST_TO_ADDR
// if tmp < distance then
42296: LD_VAR 0 9
42300: PUSH
42301: LD_VAR 0 10
42305: LESS
42306: IFFALSE 42328
// begin result := i ;
42308: LD_ADDR_VAR 0 5
42312: PUSH
42313: LD_VAR 0 6
42317: ST_TO_ADDR
// distance := tmp ;
42318: LD_ADDR_VAR 0 10
42322: PUSH
42323: LD_VAR 0 9
42327: ST_TO_ADDR
// end ; end ;
42328: GO 42186
42330: POP
42331: POP
// end ;
42332: LD_VAR 0 5
42336: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42337: LD_INT 0
42339: PPUSH
42340: PPUSH
// if not driver or not IsInUnit ( driver ) then
42341: LD_VAR 0 1
42345: NOT
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: CALL_OW 310
42356: NOT
42357: OR
42358: IFFALSE 42362
// exit ;
42360: GO 42452
// vehicle := IsInUnit ( driver ) ;
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: CALL_OW 310
42376: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42377: LD_VAR 0 1
42381: PPUSH
42382: LD_STRING \
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: PUSH
42412: LD_STRING E
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_VAR 0 3
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PPUSH
42448: CALL_OW 446
// end ;
42452: LD_VAR 0 2
42456: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42457: LD_INT 0
42459: PPUSH
42460: PPUSH
// if not driver or not IsInUnit ( driver ) then
42461: LD_VAR 0 1
42465: NOT
42466: PUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 310
42476: NOT
42477: OR
42478: IFFALSE 42482
// exit ;
42480: GO 42572
// vehicle := IsInUnit ( driver ) ;
42482: LD_ADDR_VAR 0 3
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 310
42496: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_STRING \
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: PUSH
42532: LD_STRING E
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_VAR 0 3
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PPUSH
42568: CALL_OW 447
// end ;
42572: LD_VAR 0 2
42576: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42577: LD_INT 0
42579: PPUSH
42580: PPUSH
42581: PPUSH
// tmp := [ ] ;
42582: LD_ADDR_VAR 0 5
42586: PUSH
42587: EMPTY
42588: ST_TO_ADDR
// for i in units do
42589: LD_ADDR_VAR 0 4
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: FOR_IN
42600: IFFALSE 42638
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42602: LD_ADDR_VAR 0 5
42606: PUSH
42607: LD_VAR 0 5
42611: PPUSH
42612: LD_VAR 0 5
42616: PUSH
42617: LD_INT 1
42619: PLUS
42620: PPUSH
42621: LD_VAR 0 4
42625: PPUSH
42626: CALL_OW 256
42630: PPUSH
42631: CALL_OW 2
42635: ST_TO_ADDR
42636: GO 42599
42638: POP
42639: POP
// if not tmp then
42640: LD_VAR 0 5
42644: NOT
42645: IFFALSE 42649
// exit ;
42647: GO 42697
// if asc then
42649: LD_VAR 0 2
42653: IFFALSE 42677
// result := SortListByListAsc ( units , tmp ) else
42655: LD_ADDR_VAR 0 3
42659: PUSH
42660: LD_VAR 0 1
42664: PPUSH
42665: LD_VAR 0 5
42669: PPUSH
42670: CALL_OW 76
42674: ST_TO_ADDR
42675: GO 42697
// result := SortListByListDesc ( units , tmp ) ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_VAR 0 1
42686: PPUSH
42687: LD_VAR 0 5
42691: PPUSH
42692: CALL_OW 77
42696: ST_TO_ADDR
// end ;
42697: LD_VAR 0 3
42701: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42702: LD_INT 0
42704: PPUSH
42705: PPUSH
// task := GetTaskList ( mech ) ;
42706: LD_ADDR_VAR 0 4
42710: PUSH
42711: LD_VAR 0 1
42715: PPUSH
42716: CALL_OW 437
42720: ST_TO_ADDR
// if not task then
42721: LD_VAR 0 4
42725: NOT
42726: IFFALSE 42730
// exit ;
42728: GO 42772
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42730: LD_ADDR_VAR 0 3
42734: PUSH
42735: LD_VAR 0 4
42739: PUSH
42740: LD_INT 1
42742: ARRAY
42743: PUSH
42744: LD_INT 1
42746: ARRAY
42747: PUSH
42748: LD_STRING r
42750: EQUAL
42751: PUSH
42752: LD_VAR 0 4
42756: PUSH
42757: LD_INT 1
42759: ARRAY
42760: PUSH
42761: LD_INT 4
42763: ARRAY
42764: PUSH
42765: LD_VAR 0 2
42769: EQUAL
42770: AND
42771: ST_TO_ADDR
// end ;
42772: LD_VAR 0 3
42776: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42777: LD_INT 0
42779: PPUSH
// SetDir ( unit , d ) ;
42780: LD_VAR 0 1
42784: PPUSH
42785: LD_VAR 0 4
42789: PPUSH
42790: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42794: LD_VAR 0 1
42798: PPUSH
42799: LD_VAR 0 2
42803: PPUSH
42804: LD_VAR 0 3
42808: PPUSH
42809: LD_VAR 0 5
42813: PPUSH
42814: CALL_OW 48
// end ;
42818: LD_VAR 0 6
42822: RET
// export function ToNaturalNumber ( number ) ; begin
42823: LD_INT 0
42825: PPUSH
// result := number div 1 ;
42826: LD_ADDR_VAR 0 2
42830: PUSH
42831: LD_VAR 0 1
42835: PUSH
42836: LD_INT 1
42838: DIV
42839: ST_TO_ADDR
// if number < 0 then
42840: LD_VAR 0 1
42844: PUSH
42845: LD_INT 0
42847: LESS
42848: IFFALSE 42858
// result := 0 ;
42850: LD_ADDR_VAR 0 2
42854: PUSH
42855: LD_INT 0
42857: ST_TO_ADDR
// end ;
42858: LD_VAR 0 2
42862: RET
// export function SortByClass ( units , class ) ; var un ; begin
42863: LD_INT 0
42865: PPUSH
42866: PPUSH
// if not units or not class then
42867: LD_VAR 0 1
42871: NOT
42872: PUSH
42873: LD_VAR 0 2
42877: NOT
42878: OR
42879: IFFALSE 42883
// exit ;
42881: GO 42978
// result := [ ] ;
42883: LD_ADDR_VAR 0 3
42887: PUSH
42888: EMPTY
42889: ST_TO_ADDR
// for un in units do
42890: LD_ADDR_VAR 0 4
42894: PUSH
42895: LD_VAR 0 1
42899: PUSH
42900: FOR_IN
42901: IFFALSE 42976
// if GetClass ( un ) = class then
42903: LD_VAR 0 4
42907: PPUSH
42908: CALL_OW 257
42912: PUSH
42913: LD_VAR 0 2
42917: EQUAL
42918: IFFALSE 42945
// result := Insert ( result , 1 , un ) else
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_VAR 0 3
42929: PPUSH
42930: LD_INT 1
42932: PPUSH
42933: LD_VAR 0 4
42937: PPUSH
42938: CALL_OW 2
42942: ST_TO_ADDR
42943: GO 42974
// result := Replace ( result , result + 1 , un ) ;
42945: LD_ADDR_VAR 0 3
42949: PUSH
42950: LD_VAR 0 3
42954: PPUSH
42955: LD_VAR 0 3
42959: PUSH
42960: LD_INT 1
42962: PLUS
42963: PPUSH
42964: LD_VAR 0 4
42968: PPUSH
42969: CALL_OW 1
42973: ST_TO_ADDR
42974: GO 42900
42976: POP
42977: POP
// end ;
42978: LD_VAR 0 3
42982: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42983: LD_INT 0
42985: PPUSH
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
// result := [ ] ;
42992: LD_ADDR_VAR 0 4
42996: PUSH
42997: EMPTY
42998: ST_TO_ADDR
// if x - r < 0 then
42999: LD_VAR 0 1
43003: PUSH
43004: LD_VAR 0 3
43008: MINUS
43009: PUSH
43010: LD_INT 0
43012: LESS
43013: IFFALSE 43025
// min_x := 0 else
43015: LD_ADDR_VAR 0 8
43019: PUSH
43020: LD_INT 0
43022: ST_TO_ADDR
43023: GO 43041
// min_x := x - r ;
43025: LD_ADDR_VAR 0 8
43029: PUSH
43030: LD_VAR 0 1
43034: PUSH
43035: LD_VAR 0 3
43039: MINUS
43040: ST_TO_ADDR
// if y - r < 0 then
43041: LD_VAR 0 2
43045: PUSH
43046: LD_VAR 0 3
43050: MINUS
43051: PUSH
43052: LD_INT 0
43054: LESS
43055: IFFALSE 43067
// min_y := 0 else
43057: LD_ADDR_VAR 0 7
43061: PUSH
43062: LD_INT 0
43064: ST_TO_ADDR
43065: GO 43083
// min_y := y - r ;
43067: LD_ADDR_VAR 0 7
43071: PUSH
43072: LD_VAR 0 2
43076: PUSH
43077: LD_VAR 0 3
43081: MINUS
43082: ST_TO_ADDR
// max_x := x + r ;
43083: LD_ADDR_VAR 0 9
43087: PUSH
43088: LD_VAR 0 1
43092: PUSH
43093: LD_VAR 0 3
43097: PLUS
43098: ST_TO_ADDR
// max_y := y + r ;
43099: LD_ADDR_VAR 0 10
43103: PUSH
43104: LD_VAR 0 2
43108: PUSH
43109: LD_VAR 0 3
43113: PLUS
43114: ST_TO_ADDR
// for _x = min_x to max_x do
43115: LD_ADDR_VAR 0 5
43119: PUSH
43120: DOUBLE
43121: LD_VAR 0 8
43125: DEC
43126: ST_TO_ADDR
43127: LD_VAR 0 9
43131: PUSH
43132: FOR_TO
43133: IFFALSE 43234
// for _y = min_y to max_y do
43135: LD_ADDR_VAR 0 6
43139: PUSH
43140: DOUBLE
43141: LD_VAR 0 7
43145: DEC
43146: ST_TO_ADDR
43147: LD_VAR 0 10
43151: PUSH
43152: FOR_TO
43153: IFFALSE 43230
// begin if not ValidHex ( _x , _y ) then
43155: LD_VAR 0 5
43159: PPUSH
43160: LD_VAR 0 6
43164: PPUSH
43165: CALL_OW 488
43169: NOT
43170: IFFALSE 43174
// continue ;
43172: GO 43152
// if GetResourceTypeXY ( _x , _y ) then
43174: LD_VAR 0 5
43178: PPUSH
43179: LD_VAR 0 6
43183: PPUSH
43184: CALL_OW 283
43188: IFFALSE 43228
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_VAR 0 4
43199: PPUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 1
43207: PLUS
43208: PPUSH
43209: LD_VAR 0 5
43213: PUSH
43214: LD_VAR 0 6
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PPUSH
43223: CALL_OW 1
43227: ST_TO_ADDR
// end ;
43228: GO 43152
43230: POP
43231: POP
43232: GO 43132
43234: POP
43235: POP
// end ;
43236: LD_VAR 0 4
43240: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43241: LD_INT 0
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
43249: PPUSH
43250: PPUSH
// if not units then
43251: LD_VAR 0 1
43255: NOT
43256: IFFALSE 43260
// exit ;
43258: GO 43788
// result := UnitFilter ( units , [ f_ok ] ) ;
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: LD_INT 50
43272: PUSH
43273: EMPTY
43274: LIST
43275: PPUSH
43276: CALL_OW 72
43280: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43281: LD_ADDR_VAR 0 8
43285: PUSH
43286: LD_VAR 0 1
43290: PUSH
43291: LD_INT 1
43293: ARRAY
43294: PPUSH
43295: CALL_OW 255
43299: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43300: LD_ADDR_VAR 0 10
43304: PUSH
43305: LD_INT 29
43307: PUSH
43308: LD_INT 91
43310: PUSH
43311: LD_INT 49
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: ST_TO_ADDR
// if not result then
43319: LD_VAR 0 3
43323: NOT
43324: IFFALSE 43328
// exit ;
43326: GO 43788
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43328: LD_ADDR_VAR 0 5
43332: PUSH
43333: LD_INT 81
43335: PUSH
43336: LD_VAR 0 8
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PPUSH
43345: CALL_OW 69
43349: ST_TO_ADDR
// for i in result do
43350: LD_ADDR_VAR 0 4
43354: PUSH
43355: LD_VAR 0 3
43359: PUSH
43360: FOR_IN
43361: IFFALSE 43786
// begin tag := GetTag ( i ) + 1 ;
43363: LD_ADDR_VAR 0 9
43367: PUSH
43368: LD_VAR 0 4
43372: PPUSH
43373: CALL_OW 110
43377: PUSH
43378: LD_INT 1
43380: PLUS
43381: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43382: LD_ADDR_VAR 0 7
43386: PUSH
43387: LD_VAR 0 4
43391: PPUSH
43392: CALL_OW 250
43396: PPUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: CALL_OW 251
43406: PPUSH
43407: LD_INT 4
43409: PPUSH
43410: CALL 42983 0 3
43414: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43415: LD_VAR 0 4
43419: PPUSH
43420: CALL_OW 247
43424: PUSH
43425: LD_INT 2
43427: EQUAL
43428: PUSH
43429: LD_VAR 0 7
43433: PUSH
43434: LD_INT 2
43436: GREATER
43437: AND
43438: PUSH
43439: LD_VAR 0 4
43443: PPUSH
43444: CALL_OW 264
43448: PUSH
43449: LD_VAR 0 10
43453: IN
43454: NOT
43455: AND
43456: IFFALSE 43495
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43458: LD_VAR 0 4
43462: PPUSH
43463: LD_VAR 0 7
43467: PUSH
43468: LD_INT 1
43470: ARRAY
43471: PUSH
43472: LD_INT 1
43474: ARRAY
43475: PPUSH
43476: LD_VAR 0 7
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: PUSH
43485: LD_INT 2
43487: ARRAY
43488: PPUSH
43489: CALL_OW 116
43493: GO 43784
// if path > tag then
43495: LD_VAR 0 2
43499: PUSH
43500: LD_VAR 0 9
43504: GREATER
43505: IFFALSE 43713
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43507: LD_ADDR_VAR 0 6
43511: PUSH
43512: LD_VAR 0 5
43516: PPUSH
43517: LD_INT 91
43519: PUSH
43520: LD_VAR 0 4
43524: PUSH
43525: LD_INT 8
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: LIST
43532: PPUSH
43533: CALL_OW 72
43537: ST_TO_ADDR
// if nearEnemy then
43538: LD_VAR 0 6
43542: IFFALSE 43611
// begin if GetWeapon ( i ) = ru_time_lapser then
43544: LD_VAR 0 4
43548: PPUSH
43549: CALL_OW 264
43553: PUSH
43554: LD_INT 49
43556: EQUAL
43557: IFFALSE 43585
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43559: LD_VAR 0 4
43563: PPUSH
43564: LD_VAR 0 6
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: CALL_OW 74
43578: PPUSH
43579: CALL_OW 112
43583: GO 43609
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43585: LD_VAR 0 4
43589: PPUSH
43590: LD_VAR 0 6
43594: PPUSH
43595: LD_VAR 0 4
43599: PPUSH
43600: CALL_OW 74
43604: PPUSH
43605: CALL 44859 0 2
// end else
43609: GO 43711
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43611: LD_VAR 0 4
43615: PPUSH
43616: LD_VAR 0 2
43620: PUSH
43621: LD_VAR 0 9
43625: ARRAY
43626: PUSH
43627: LD_INT 1
43629: ARRAY
43630: PPUSH
43631: LD_VAR 0 2
43635: PUSH
43636: LD_VAR 0 9
43640: ARRAY
43641: PUSH
43642: LD_INT 2
43644: ARRAY
43645: PPUSH
43646: CALL_OW 297
43650: PUSH
43651: LD_INT 6
43653: GREATER
43654: IFFALSE 43697
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43656: LD_VAR 0 4
43660: PPUSH
43661: LD_VAR 0 2
43665: PUSH
43666: LD_VAR 0 9
43670: ARRAY
43671: PUSH
43672: LD_INT 1
43674: ARRAY
43675: PPUSH
43676: LD_VAR 0 2
43680: PUSH
43681: LD_VAR 0 9
43685: ARRAY
43686: PUSH
43687: LD_INT 2
43689: ARRAY
43690: PPUSH
43691: CALL_OW 114
43695: GO 43711
// SetTag ( i , tag ) ;
43697: LD_VAR 0 4
43701: PPUSH
43702: LD_VAR 0 9
43706: PPUSH
43707: CALL_OW 109
// end else
43711: GO 43784
// if enemy then
43713: LD_VAR 0 5
43717: IFFALSE 43784
// begin if GetWeapon ( i ) = ru_time_lapser then
43719: LD_VAR 0 4
43723: PPUSH
43724: CALL_OW 264
43728: PUSH
43729: LD_INT 49
43731: EQUAL
43732: IFFALSE 43760
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43734: LD_VAR 0 4
43738: PPUSH
43739: LD_VAR 0 5
43743: PPUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: CALL_OW 74
43753: PPUSH
43754: CALL_OW 112
43758: GO 43784
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43760: LD_VAR 0 4
43764: PPUSH
43765: LD_VAR 0 5
43769: PPUSH
43770: LD_VAR 0 4
43774: PPUSH
43775: CALL_OW 74
43779: PPUSH
43780: CALL 44859 0 2
// end ; end ;
43784: GO 43360
43786: POP
43787: POP
// end ;
43788: LD_VAR 0 3
43792: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43793: LD_INT 0
43795: PPUSH
43796: PPUSH
43797: PPUSH
// if not unit or IsInUnit ( unit ) then
43798: LD_VAR 0 1
43802: NOT
43803: PUSH
43804: LD_VAR 0 1
43808: PPUSH
43809: CALL_OW 310
43813: OR
43814: IFFALSE 43818
// exit ;
43816: GO 43909
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43818: LD_ADDR_VAR 0 4
43822: PUSH
43823: LD_VAR 0 1
43827: PPUSH
43828: CALL_OW 250
43832: PPUSH
43833: LD_VAR 0 2
43837: PPUSH
43838: LD_INT 1
43840: PPUSH
43841: CALL_OW 272
43845: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43846: LD_ADDR_VAR 0 5
43850: PUSH
43851: LD_VAR 0 1
43855: PPUSH
43856: CALL_OW 251
43860: PPUSH
43861: LD_VAR 0 2
43865: PPUSH
43866: LD_INT 1
43868: PPUSH
43869: CALL_OW 273
43873: ST_TO_ADDR
// if ValidHex ( x , y ) then
43874: LD_VAR 0 4
43878: PPUSH
43879: LD_VAR 0 5
43883: PPUSH
43884: CALL_OW 488
43888: IFFALSE 43909
// ComTurnXY ( unit , x , y ) ;
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_VAR 0 4
43899: PPUSH
43900: LD_VAR 0 5
43904: PPUSH
43905: CALL_OW 118
// end ;
43909: LD_VAR 0 3
43913: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43914: LD_INT 0
43916: PPUSH
43917: PPUSH
// result := false ;
43918: LD_ADDR_VAR 0 3
43922: PUSH
43923: LD_INT 0
43925: ST_TO_ADDR
// if not units then
43926: LD_VAR 0 2
43930: NOT
43931: IFFALSE 43935
// exit ;
43933: GO 43980
// for i in units do
43935: LD_ADDR_VAR 0 4
43939: PUSH
43940: LD_VAR 0 2
43944: PUSH
43945: FOR_IN
43946: IFFALSE 43978
// if See ( side , i ) then
43948: LD_VAR 0 1
43952: PPUSH
43953: LD_VAR 0 4
43957: PPUSH
43958: CALL_OW 292
43962: IFFALSE 43976
// begin result := true ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_INT 1
43971: ST_TO_ADDR
// exit ;
43972: POP
43973: POP
43974: GO 43980
// end ;
43976: GO 43945
43978: POP
43979: POP
// end ;
43980: LD_VAR 0 3
43984: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43985: LD_INT 0
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
// if not unit or not points then
43991: LD_VAR 0 1
43995: NOT
43996: PUSH
43997: LD_VAR 0 2
44001: NOT
44002: OR
44003: IFFALSE 44007
// exit ;
44005: GO 44097
// dist := 99999 ;
44007: LD_ADDR_VAR 0 5
44011: PUSH
44012: LD_INT 99999
44014: ST_TO_ADDR
// for i in points do
44015: LD_ADDR_VAR 0 4
44019: PUSH
44020: LD_VAR 0 2
44024: PUSH
44025: FOR_IN
44026: IFFALSE 44095
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44028: LD_ADDR_VAR 0 6
44032: PUSH
44033: LD_VAR 0 1
44037: PPUSH
44038: LD_VAR 0 4
44042: PUSH
44043: LD_INT 1
44045: ARRAY
44046: PPUSH
44047: LD_VAR 0 4
44051: PUSH
44052: LD_INT 2
44054: ARRAY
44055: PPUSH
44056: CALL_OW 297
44060: ST_TO_ADDR
// if tmpDist < dist then
44061: LD_VAR 0 6
44065: PUSH
44066: LD_VAR 0 5
44070: LESS
44071: IFFALSE 44093
// begin result := i ;
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_VAR 0 4
44082: ST_TO_ADDR
// dist := tmpDist ;
44083: LD_ADDR_VAR 0 5
44087: PUSH
44088: LD_VAR 0 6
44092: ST_TO_ADDR
// end ; end ;
44093: GO 44025
44095: POP
44096: POP
// end ;
44097: LD_VAR 0 3
44101: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44102: LD_INT 0
44104: PPUSH
// uc_side := side ;
44105: LD_ADDR_OWVAR 20
44109: PUSH
44110: LD_VAR 0 1
44114: ST_TO_ADDR
// uc_nation := 3 ;
44115: LD_ADDR_OWVAR 21
44119: PUSH
44120: LD_INT 3
44122: ST_TO_ADDR
// vc_chassis := 25 ;
44123: LD_ADDR_OWVAR 37
44127: PUSH
44128: LD_INT 25
44130: ST_TO_ADDR
// vc_engine := engine_siberite ;
44131: LD_ADDR_OWVAR 39
44135: PUSH
44136: LD_INT 3
44138: ST_TO_ADDR
// vc_control := control_computer ;
44139: LD_ADDR_OWVAR 38
44143: PUSH
44144: LD_INT 3
44146: ST_TO_ADDR
// vc_weapon := 59 ;
44147: LD_ADDR_OWVAR 40
44151: PUSH
44152: LD_INT 59
44154: ST_TO_ADDR
// result := CreateVehicle ;
44155: LD_ADDR_VAR 0 5
44159: PUSH
44160: CALL_OW 45
44164: ST_TO_ADDR
// SetDir ( result , d ) ;
44165: LD_VAR 0 5
44169: PPUSH
44170: LD_VAR 0 4
44174: PPUSH
44175: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44179: LD_VAR 0 5
44183: PPUSH
44184: LD_VAR 0 2
44188: PPUSH
44189: LD_VAR 0 3
44193: PPUSH
44194: LD_INT 0
44196: PPUSH
44197: CALL_OW 48
// end ;
44201: LD_VAR 0 5
44205: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44206: LD_INT 0
44208: PPUSH
44209: PPUSH
44210: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44234: LD_VAR 0 1
44238: NOT
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 264
44249: PUSH
44250: LD_INT 12
44252: PUSH
44253: LD_INT 51
44255: PUSH
44256: LD_INT 32
44258: PUSH
44259: LD_INT 89
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: IN
44268: NOT
44269: OR
44270: IFFALSE 44274
// exit ;
44272: GO 44372
// for i := 1 to 3 do
44274: LD_ADDR_VAR 0 3
44278: PUSH
44279: DOUBLE
44280: LD_INT 1
44282: DEC
44283: ST_TO_ADDR
44284: LD_INT 3
44286: PUSH
44287: FOR_TO
44288: IFFALSE 44370
// begin tmp := GetCargo ( cargo , i ) ;
44290: LD_ADDR_VAR 0 4
44294: PUSH
44295: LD_VAR 0 1
44299: PPUSH
44300: LD_VAR 0 3
44304: PPUSH
44305: CALL_OW 289
44309: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44310: LD_ADDR_VAR 0 2
44314: PUSH
44315: LD_VAR 0 2
44319: PPUSH
44320: LD_VAR 0 3
44324: PPUSH
44325: LD_VAR 0 4
44329: PPUSH
44330: CALL_OW 1
44334: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44335: LD_ADDR_VAR 0 2
44339: PUSH
44340: LD_VAR 0 2
44344: PPUSH
44345: LD_INT 4
44347: PPUSH
44348: LD_VAR 0 2
44352: PUSH
44353: LD_INT 4
44355: ARRAY
44356: PUSH
44357: LD_VAR 0 4
44361: PLUS
44362: PPUSH
44363: CALL_OW 1
44367: ST_TO_ADDR
// end ;
44368: GO 44287
44370: POP
44371: POP
// end ;
44372: LD_VAR 0 2
44376: RET
// export function Length ( array ) ; begin
44377: LD_INT 0
44379: PPUSH
// result := array + 0 ;
44380: LD_ADDR_VAR 0 2
44384: PUSH
44385: LD_VAR 0 1
44389: PUSH
44390: LD_INT 0
44392: PLUS
44393: ST_TO_ADDR
// end ;
44394: LD_VAR 0 2
44398: RET
// export function PrepareArray ( array ) ; begin
44399: LD_INT 0
44401: PPUSH
// result := array diff 0 ;
44402: LD_ADDR_VAR 0 2
44406: PUSH
44407: LD_VAR 0 1
44411: PUSH
44412: LD_INT 0
44414: DIFF
44415: ST_TO_ADDR
// if not result [ 1 ] then
44416: LD_VAR 0 2
44420: PUSH
44421: LD_INT 1
44423: ARRAY
44424: NOT
44425: IFFALSE 44445
// result := Delete ( result , 1 ) ;
44427: LD_ADDR_VAR 0 2
44431: PUSH
44432: LD_VAR 0 2
44436: PPUSH
44437: LD_INT 1
44439: PPUSH
44440: CALL_OW 3
44444: ST_TO_ADDR
// end ;
44445: LD_VAR 0 2
44449: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44450: LD_INT 0
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
// sibRocketRange := 25 ;
44456: LD_ADDR_VAR 0 6
44460: PUSH
44461: LD_INT 25
44463: ST_TO_ADDR
// result := false ;
44464: LD_ADDR_VAR 0 4
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// for i := 0 to 5 do
44472: LD_ADDR_VAR 0 5
44476: PUSH
44477: DOUBLE
44478: LD_INT 0
44480: DEC
44481: ST_TO_ADDR
44482: LD_INT 5
44484: PUSH
44485: FOR_TO
44486: IFFALSE 44553
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44488: LD_VAR 0 1
44492: PPUSH
44493: LD_VAR 0 5
44497: PPUSH
44498: LD_VAR 0 6
44502: PPUSH
44503: CALL_OW 272
44507: PPUSH
44508: LD_VAR 0 2
44512: PPUSH
44513: LD_VAR 0 5
44517: PPUSH
44518: LD_VAR 0 6
44522: PPUSH
44523: CALL_OW 273
44527: PPUSH
44528: LD_VAR 0 3
44532: PPUSH
44533: CALL_OW 309
44537: IFFALSE 44551
// begin result := true ;
44539: LD_ADDR_VAR 0 4
44543: PUSH
44544: LD_INT 1
44546: ST_TO_ADDR
// exit ;
44547: POP
44548: POP
44549: GO 44555
// end ;
44551: GO 44485
44553: POP
44554: POP
// end ;
44555: LD_VAR 0 4
44559: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44560: LD_INT 0
44562: PPUSH
44563: PPUSH
44564: PPUSH
// if btype = b_depot then
44565: LD_VAR 0 2
44569: PUSH
44570: LD_INT 0
44572: EQUAL
44573: IFFALSE 44585
// begin result := true ;
44575: LD_ADDR_VAR 0 3
44579: PUSH
44580: LD_INT 1
44582: ST_TO_ADDR
// exit ;
44583: GO 44701
// end ; pom := GetBase ( depot ) ;
44585: LD_ADDR_VAR 0 4
44589: PUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: CALL_OW 274
44599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44600: LD_ADDR_VAR 0 5
44604: PUSH
44605: LD_VAR 0 2
44609: PPUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: CALL_OW 248
44619: PPUSH
44620: CALL_OW 450
44624: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: LD_VAR 0 4
44634: PPUSH
44635: LD_INT 1
44637: PPUSH
44638: CALL_OW 275
44642: PUSH
44643: LD_VAR 0 5
44647: PUSH
44648: LD_INT 1
44650: ARRAY
44651: GREATEREQUAL
44652: PUSH
44653: LD_VAR 0 4
44657: PPUSH
44658: LD_INT 2
44660: PPUSH
44661: CALL_OW 275
44665: PUSH
44666: LD_VAR 0 5
44670: PUSH
44671: LD_INT 2
44673: ARRAY
44674: GREATEREQUAL
44675: AND
44676: PUSH
44677: LD_VAR 0 4
44681: PPUSH
44682: LD_INT 3
44684: PPUSH
44685: CALL_OW 275
44689: PUSH
44690: LD_VAR 0 5
44694: PUSH
44695: LD_INT 3
44697: ARRAY
44698: GREATEREQUAL
44699: AND
44700: ST_TO_ADDR
// end ;
44701: LD_VAR 0 3
44705: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44706: LD_INT 0
44708: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44709: LD_VAR 0 1
44713: PPUSH
44714: LD_VAR 0 2
44718: PPUSH
44719: LD_INT 0
44721: PPUSH
44722: LD_INT 0
44724: PPUSH
44725: LD_INT 1
44727: PPUSH
44728: LD_INT 0
44730: PPUSH
44731: CALL_OW 587
// end ;
44735: LD_VAR 0 3
44739: RET
// export function CenterOnNow ( unit ) ; begin
44740: LD_INT 0
44742: PPUSH
// result := IsInUnit ( unit ) ;
44743: LD_ADDR_VAR 0 2
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: CALL_OW 310
44757: ST_TO_ADDR
// if not result then
44758: LD_VAR 0 2
44762: NOT
44763: IFFALSE 44775
// result := unit ;
44765: LD_ADDR_VAR 0 2
44769: PUSH
44770: LD_VAR 0 1
44774: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44775: LD_VAR 0 1
44779: PPUSH
44780: CALL_OW 87
// end ;
44784: LD_VAR 0 2
44788: RET
// export function ComMoveHex ( unit , hex ) ; begin
44789: LD_INT 0
44791: PPUSH
// if not hex then
44792: LD_VAR 0 2
44796: NOT
44797: IFFALSE 44801
// exit ;
44799: GO 44854
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44801: LD_VAR 0 2
44805: PUSH
44806: LD_INT 1
44808: ARRAY
44809: PPUSH
44810: LD_VAR 0 2
44814: PUSH
44815: LD_INT 2
44817: ARRAY
44818: PPUSH
44819: CALL_OW 428
44823: IFFALSE 44827
// exit ;
44825: GO 44854
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44827: LD_VAR 0 1
44831: PPUSH
44832: LD_VAR 0 2
44836: PUSH
44837: LD_INT 1
44839: ARRAY
44840: PPUSH
44841: LD_VAR 0 2
44845: PUSH
44846: LD_INT 2
44848: ARRAY
44849: PPUSH
44850: CALL_OW 111
// end ;
44854: LD_VAR 0 3
44858: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44859: LD_INT 0
44861: PPUSH
44862: PPUSH
44863: PPUSH
// if not unit or not enemy then
44864: LD_VAR 0 1
44868: NOT
44869: PUSH
44870: LD_VAR 0 2
44874: NOT
44875: OR
44876: IFFALSE 44880
// exit ;
44878: GO 45004
// x := GetX ( enemy ) ;
44880: LD_ADDR_VAR 0 4
44884: PUSH
44885: LD_VAR 0 2
44889: PPUSH
44890: CALL_OW 250
44894: ST_TO_ADDR
// y := GetY ( enemy ) ;
44895: LD_ADDR_VAR 0 5
44899: PUSH
44900: LD_VAR 0 2
44904: PPUSH
44905: CALL_OW 251
44909: ST_TO_ADDR
// if ValidHex ( x , y ) then
44910: LD_VAR 0 4
44914: PPUSH
44915: LD_VAR 0 5
44919: PPUSH
44920: CALL_OW 488
44924: IFFALSE 45004
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44926: LD_VAR 0 2
44930: PPUSH
44931: CALL_OW 247
44935: PUSH
44936: LD_INT 3
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: IN
44946: PUSH
44947: LD_VAR 0 1
44951: PPUSH
44952: CALL_OW 255
44956: PPUSH
44957: LD_VAR 0 2
44961: PPUSH
44962: CALL_OW 292
44966: OR
44967: IFFALSE 44985
// ComAttackUnit ( unit , enemy ) else
44969: LD_VAR 0 1
44973: PPUSH
44974: LD_VAR 0 2
44978: PPUSH
44979: CALL_OW 115
44983: GO 45004
// ComAgressiveMove ( unit , x , y ) ;
44985: LD_VAR 0 1
44989: PPUSH
44990: LD_VAR 0 4
44994: PPUSH
44995: LD_VAR 0 5
44999: PPUSH
45000: CALL_OW 114
// end ;
45004: LD_VAR 0 3
45008: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45009: LD_INT 0
45011: PPUSH
45012: PPUSH
45013: PPUSH
// list := AreaToList ( area , 0 ) ;
45014: LD_ADDR_VAR 0 5
45018: PUSH
45019: LD_VAR 0 1
45023: PPUSH
45024: LD_INT 0
45026: PPUSH
45027: CALL_OW 517
45031: ST_TO_ADDR
// if not list then
45032: LD_VAR 0 5
45036: NOT
45037: IFFALSE 45041
// exit ;
45039: GO 45171
// if all then
45041: LD_VAR 0 2
45045: IFFALSE 45133
// begin for i := 1 to list [ 1 ] do
45047: LD_ADDR_VAR 0 4
45051: PUSH
45052: DOUBLE
45053: LD_INT 1
45055: DEC
45056: ST_TO_ADDR
45057: LD_VAR 0 5
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: PUSH
45066: FOR_TO
45067: IFFALSE 45129
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45069: LD_ADDR_VAR 0 3
45073: PUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: LD_VAR 0 3
45083: PUSH
45084: LD_INT 1
45086: PLUS
45087: PPUSH
45088: LD_VAR 0 5
45092: PUSH
45093: LD_INT 1
45095: ARRAY
45096: PUSH
45097: LD_VAR 0 4
45101: ARRAY
45102: PUSH
45103: LD_VAR 0 5
45107: PUSH
45108: LD_INT 2
45110: ARRAY
45111: PUSH
45112: LD_VAR 0 4
45116: ARRAY
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PPUSH
45122: CALL_OW 1
45126: ST_TO_ADDR
45127: GO 45066
45129: POP
45130: POP
// exit ;
45131: GO 45171
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45133: LD_ADDR_VAR 0 3
45137: PUSH
45138: LD_VAR 0 5
45142: PUSH
45143: LD_INT 1
45145: ARRAY
45146: PUSH
45147: LD_INT 1
45149: ARRAY
45150: PUSH
45151: LD_VAR 0 5
45155: PUSH
45156: LD_INT 2
45158: ARRAY
45159: PUSH
45160: LD_INT 1
45162: ARRAY
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: EMPTY
45169: LIST
45170: ST_TO_ADDR
// end ;
45171: LD_VAR 0 3
45175: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
// list := AreaToList ( area , 0 ) ;
45180: LD_ADDR_VAR 0 4
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: LD_INT 0
45192: PPUSH
45193: CALL_OW 517
45197: ST_TO_ADDR
// if not list then
45198: LD_VAR 0 4
45202: NOT
45203: IFFALSE 45207
// exit ;
45205: GO 45248
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 4
45216: PUSH
45217: LD_INT 1
45219: ARRAY
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PUSH
45225: LD_VAR 0 4
45229: PUSH
45230: LD_INT 2
45232: ARRAY
45233: PUSH
45234: LD_INT 1
45236: ARRAY
45237: PUSH
45238: LD_VAR 0 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// end ;
45248: LD_VAR 0 3
45252: RET
// export function First ( array ) ; begin
45253: LD_INT 0
45255: PPUSH
// if not array then
45256: LD_VAR 0 1
45260: NOT
45261: IFFALSE 45265
// exit ;
45263: GO 45279
// result := array [ 1 ] ;
45265: LD_ADDR_VAR 0 2
45269: PUSH
45270: LD_VAR 0 1
45274: PUSH
45275: LD_INT 1
45277: ARRAY
45278: ST_TO_ADDR
// end ;
45279: LD_VAR 0 2
45283: RET
// export function Last ( array ) ; begin
45284: LD_INT 0
45286: PPUSH
// if not array then
45287: LD_VAR 0 1
45291: NOT
45292: IFFALSE 45296
// exit ;
45294: GO 45312
// result := array [ array ] ;
45296: LD_ADDR_VAR 0 2
45300: PUSH
45301: LD_VAR 0 1
45305: PUSH
45306: LD_VAR 0 1
45310: ARRAY
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 2
45316: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
// result := [ ] ;
45321: LD_ADDR_VAR 0 5
45325: PUSH
45326: EMPTY
45327: ST_TO_ADDR
// if not array then
45328: LD_VAR 0 1
45332: NOT
45333: IFFALSE 45337
// exit ;
45335: GO 45449
// for i := 1 to array do
45337: LD_ADDR_VAR 0 6
45341: PUSH
45342: DOUBLE
45343: LD_INT 1
45345: DEC
45346: ST_TO_ADDR
45347: LD_VAR 0 1
45351: PUSH
45352: FOR_TO
45353: IFFALSE 45447
// if array [ i ] [ index ] = value then
45355: LD_VAR 0 1
45359: PUSH
45360: LD_VAR 0 6
45364: ARRAY
45365: PUSH
45366: LD_VAR 0 2
45370: ARRAY
45371: PUSH
45372: LD_VAR 0 3
45376: EQUAL
45377: IFFALSE 45445
// begin if indexColumn then
45379: LD_VAR 0 4
45383: IFFALSE 45419
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45385: LD_ADDR_VAR 0 5
45389: PUSH
45390: LD_VAR 0 5
45394: PPUSH
45395: LD_VAR 0 1
45399: PUSH
45400: LD_VAR 0 6
45404: ARRAY
45405: PUSH
45406: LD_VAR 0 4
45410: ARRAY
45411: PPUSH
45412: CALL 40637 0 2
45416: ST_TO_ADDR
45417: GO 45445
// result := Join ( result , array [ i ] ) ;
45419: LD_ADDR_VAR 0 5
45423: PUSH
45424: LD_VAR 0 5
45428: PPUSH
45429: LD_VAR 0 1
45433: PUSH
45434: LD_VAR 0 6
45438: ARRAY
45439: PPUSH
45440: CALL 40637 0 2
45444: ST_TO_ADDR
// end ;
45445: GO 45352
45447: POP
45448: POP
// end ;
45449: LD_VAR 0 5
45453: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45454: LD_INT 0
45456: PPUSH
// if not vehicles or not parkingPoint then
45457: LD_VAR 0 1
45461: NOT
45462: PUSH
45463: LD_VAR 0 2
45467: NOT
45468: OR
45469: IFFALSE 45473
// exit ;
45471: GO 45571
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45473: LD_ADDR_VAR 0 1
45477: PUSH
45478: LD_VAR 0 1
45482: PPUSH
45483: LD_INT 50
45485: PUSH
45486: EMPTY
45487: LIST
45488: PUSH
45489: LD_INT 3
45491: PUSH
45492: LD_INT 92
45494: PUSH
45495: LD_VAR 0 2
45499: PUSH
45500: LD_INT 1
45502: ARRAY
45503: PUSH
45504: LD_VAR 0 2
45508: PUSH
45509: LD_INT 2
45511: ARRAY
45512: PUSH
45513: LD_INT 8
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PPUSH
45530: CALL_OW 72
45534: ST_TO_ADDR
// if not vehicles then
45535: LD_VAR 0 1
45539: NOT
45540: IFFALSE 45544
// exit ;
45542: GO 45571
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45544: LD_VAR 0 1
45548: PPUSH
45549: LD_VAR 0 2
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 2
45562: PUSH
45563: LD_INT 2
45565: ARRAY
45566: PPUSH
45567: CALL_OW 111
// end ;
45571: LD_VAR 0 3
45575: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45576: LD_INT 0
45578: PPUSH
45579: PPUSH
45580: PPUSH
// if not side or not area then
45581: LD_VAR 0 1
45585: NOT
45586: PUSH
45587: LD_VAR 0 2
45591: NOT
45592: OR
45593: IFFALSE 45597
// exit ;
45595: GO 45716
// tmp := AreaToList ( area , 0 ) ;
45597: LD_ADDR_VAR 0 5
45601: PUSH
45602: LD_VAR 0 2
45606: PPUSH
45607: LD_INT 0
45609: PPUSH
45610: CALL_OW 517
45614: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45615: LD_ADDR_VAR 0 4
45619: PUSH
45620: DOUBLE
45621: LD_INT 1
45623: DEC
45624: ST_TO_ADDR
45625: LD_VAR 0 5
45629: PUSH
45630: LD_INT 1
45632: ARRAY
45633: PUSH
45634: FOR_TO
45635: IFFALSE 45714
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45637: LD_VAR 0 5
45641: PUSH
45642: LD_INT 1
45644: ARRAY
45645: PUSH
45646: LD_VAR 0 4
45650: ARRAY
45651: PPUSH
45652: LD_VAR 0 5
45656: PUSH
45657: LD_INT 2
45659: ARRAY
45660: PUSH
45661: LD_VAR 0 4
45665: ARRAY
45666: PPUSH
45667: CALL_OW 351
45671: IFFALSE 45712
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45673: LD_VAR 0 5
45677: PUSH
45678: LD_INT 1
45680: ARRAY
45681: PUSH
45682: LD_VAR 0 4
45686: ARRAY
45687: PPUSH
45688: LD_VAR 0 5
45692: PUSH
45693: LD_INT 2
45695: ARRAY
45696: PUSH
45697: LD_VAR 0 4
45701: ARRAY
45702: PPUSH
45703: LD_VAR 0 1
45707: PPUSH
45708: CALL_OW 244
// end ;
45712: GO 45634
45714: POP
45715: POP
// end ; end_of_file
45716: LD_VAR 0 3
45720: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45721: LD_INT 0
45723: PPUSH
45724: PPUSH
// disable ( mpActive ) ;
45725: LD_INT 100
45727: DISABLE_MARKED
// disable ( mpWin ) ;
45728: LD_INT 101
45730: DISABLE_MARKED
// disable ( mpLose ) ;
45731: LD_INT 102
45733: DISABLE_MARKED
// mpGameType := 0 ;
45734: LD_ADDR_EXP 1
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// mpGameSettings := [ ] ;
45742: LD_ADDR_EXP 4
45746: PUSH
45747: EMPTY
45748: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45749: LD_ADDR_EXP 2
45753: PUSH
45754: EMPTY
45755: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45756: LD_ADDR_EXP 3
45760: PUSH
45761: EMPTY
45762: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45763: LD_ADDR_EXP 27
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45778: LD_ADDR_EXP 10
45782: PUSH
45783: EMPTY
45784: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45785: LD_ADDR_EXP 11
45789: PUSH
45790: EMPTY
45791: ST_TO_ADDR
// mpDepots := [ ] ;
45792: LD_ADDR_EXP 12
45796: PUSH
45797: EMPTY
45798: ST_TO_ADDR
// mpBuildings := [ ] ;
45799: LD_ADDR_EXP 15
45803: PUSH
45804: EMPTY
45805: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45806: LD_ADDR_EXP 16
45810: PUSH
45811: EMPTY
45812: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45813: LD_ADDR_EXP 17
45817: PUSH
45818: EMPTY
45819: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45820: LD_ADDR_EXP 18
45824: PUSH
45825: EMPTY
45826: ST_TO_ADDR
// mpStartingResources := [ ] ;
45827: LD_ADDR_EXP 13
45831: PUSH
45832: EMPTY
45833: ST_TO_ADDR
// mpStartPos := [ ] ;
45834: LD_ADDR_EXP 19
45838: PUSH
45839: EMPTY
45840: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45841: LD_ADDR_EXP 20
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45850: LD_ADDR_EXP 21
45854: PUSH
45855: EMPTY
45856: ST_TO_ADDR
// mpApemans := [ ] ;
45857: LD_ADDR_EXP 28
45861: PUSH
45862: EMPTY
45863: ST_TO_ADDR
// mpApemansArea := [ ] ;
45864: LD_ADDR_EXP 29
45868: PUSH
45869: EMPTY
45870: ST_TO_ADDR
// mpRespawn := [ ] ;
45871: LD_ADDR_EXP 30
45875: PUSH
45876: EMPTY
45877: ST_TO_ADDR
// mpKingArea := 0 ;
45878: LD_ADDR_EXP 31
45882: PUSH
45883: LD_INT 0
45885: ST_TO_ADDR
// mpPoints := [ ] ;
45886: LD_ADDR_EXP 32
45890: PUSH
45891: EMPTY
45892: ST_TO_ADDR
// mpVehicles := 0 ;
45893: LD_ADDR_EXP 33
45897: PUSH
45898: LD_INT 0
45900: ST_TO_ADDR
// mpShipments := 0 ;
45901: LD_ADDR_EXP 25
45905: PUSH
45906: LD_INT 0
45908: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45909: LD_ADDR_EXP 37
45913: PUSH
45914: EMPTY
45915: PUSH
45916: EMPTY
45917: PUSH
45918: EMPTY
45919: PUSH
45920: EMPTY
45921: PUSH
45922: EMPTY
45923: PUSH
45924: EMPTY
45925: PUSH
45926: EMPTY
45927: PUSH
45928: EMPTY
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// mpEmissions := 0 ;
45940: LD_ADDR_EXP 34
45944: PUSH
45945: LD_INT 0
45947: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45948: LD_ADDR_EXP 23
45952: PUSH
45953: LD_INT 3
45955: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45956: LD_ADDR_EXP 22
45960: PUSH
45961: LD_INT 15
45963: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45964: LD_ADDR_EXP 35
45968: PUSH
45969: LD_INT 0
45971: ST_TO_ADDR
// mpGameActive := false ;
45972: LD_ADDR_EXP 36
45976: PUSH
45977: LD_INT 0
45979: ST_TO_ADDR
// mpBlockRespThread := false ;
45980: LD_ADDR_EXP 38
45984: PUSH
45985: LD_INT 0
45987: ST_TO_ADDR
// for i := 1 to 32 do
45988: LD_ADDR_VAR 0 2
45992: PUSH
45993: DOUBLE
45994: LD_INT 1
45996: DEC
45997: ST_TO_ADDR
45998: LD_INT 32
46000: PUSH
46001: FOR_TO
46002: IFFALSE 46029
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46004: LD_ADDR_EXP 4
46008: PUSH
46009: LD_EXP 4
46013: PPUSH
46014: LD_VAR 0 2
46018: PPUSH
46019: LD_INT 0
46021: PPUSH
46022: CALL_OW 1
46026: ST_TO_ADDR
46027: GO 46001
46029: POP
46030: POP
// end ;
46031: LD_VAR 0 1
46035: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46036: LD_INT 0
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
46042: PPUSH
46043: PPUSH
46044: PPUSH
46045: PPUSH
46046: PPUSH
46047: PPUSH
46048: PPUSH
46049: PPUSH
46050: PPUSH
46051: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46052: LD_ADDR_VAR 0 14
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: ST_TO_ADDR
// for i in gameTypes do
46071: LD_ADDR_VAR 0 2
46075: PUSH
46076: LD_VAR 0 14
46080: PUSH
46081: FOR_IN
46082: IFFALSE 46091
// disable ( i ) ;
46084: LD_VAR 0 2
46088: DISABLE_MARKED
46089: GO 46081
46091: POP
46092: POP
// if Multiplayer then
46093: LD_OWVAR 4
46097: IFFALSE 46281
// begin mpGameType := mp_game_type ;
46099: LD_ADDR_EXP 1
46103: PUSH
46104: LD_OWVAR 6
46108: ST_TO_ADDR
// your_side := mp_player_side ;
46109: LD_ADDR_OWVAR 2
46113: PUSH
46114: LD_OWVAR 7
46118: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46119: LD_ADDR_EXP 5
46123: PUSH
46124: LD_OWVAR 17
46128: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46129: LD_ADDR_EXP 6
46133: PUSH
46134: LD_OWVAR 15
46138: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46139: LD_ADDR_EXP 7
46143: PUSH
46144: LD_OWVAR 16
46148: ST_TO_ADDR
// mpTeams := mp_teams ;
46149: LD_ADDR_EXP 8
46153: PUSH
46154: LD_OWVAR 12
46158: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46159: LD_ADDR_VAR 0 2
46163: PUSH
46164: DOUBLE
46165: LD_INT 1
46167: DEC
46168: ST_TO_ADDR
46169: LD_EXP 2
46173: PPUSH
46174: CALL 5028 0 1
46178: PUSH
46179: FOR_TO
46180: IFFALSE 46256
// begin setting := mpGameSettingsKeys [ i ] ;
46182: LD_ADDR_VAR 0 12
46186: PUSH
46187: LD_EXP 2
46191: PUSH
46192: LD_VAR 0 2
46196: ARRAY
46197: ST_TO_ADDR
// if setting then
46198: LD_VAR 0 12
46202: IFFALSE 46254
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46204: LD_ADDR_EXP 4
46208: PUSH
46209: LD_EXP 4
46213: PPUSH
46214: LD_VAR 0 2
46218: PPUSH
46219: LD_EXP 3
46223: PUSH
46224: LD_VAR 0 2
46228: ARRAY
46229: PUSH
46230: LD_VAR 0 2
46234: PUSH
46235: LD_INT 1
46237: MINUS
46238: PPUSH
46239: CALL_OW 426
46243: PUSH
46244: LD_INT 1
46246: PLUS
46247: ARRAY
46248: PPUSH
46249: CALL_OW 1
46253: ST_TO_ADDR
// end ;
46254: GO 46179
46256: POP
46257: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46258: LD_ADDR_EXP 9
46262: PUSH
46263: LD_EXP 6
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: DIFF
46274: PUSH
46275: LD_INT 1
46277: GREATER
46278: ST_TO_ADDR
// end else
46279: GO 46281
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46281: LD_EXP 1
46285: PPUSH
46286: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46290: LD_EXP 16
46294: PPUSH
46295: CALL 5028 0 1
46299: IFFALSE 46330
// begin for i in mpMarkedAreas do
46301: LD_ADDR_VAR 0 2
46305: PUSH
46306: LD_EXP 16
46310: PUSH
46311: FOR_IN
46312: IFFALSE 46328
// SetAreaMapShow ( i , 0 ) ;
46314: LD_VAR 0 2
46318: PPUSH
46319: LD_INT 0
46321: PPUSH
46322: CALL_OW 424
46326: GO 46311
46328: POP
46329: POP
// end ; for i := 1 to 8 do
46330: LD_ADDR_VAR 0 2
46334: PUSH
46335: DOUBLE
46336: LD_INT 1
46338: DEC
46339: ST_TO_ADDR
46340: LD_INT 8
46342: PUSH
46343: FOR_TO
46344: IFFALSE 47560
// begin if not mpSidePositions [ i ] then
46346: LD_EXP 5
46350: PUSH
46351: LD_VAR 0 2
46355: ARRAY
46356: NOT
46357: IFFALSE 46361
// continue ;
46359: GO 46343
// side := i ;
46361: LD_ADDR_VAR 0 7
46365: PUSH
46366: LD_VAR 0 2
46370: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46371: LD_ADDR_VAR 0 9
46375: PUSH
46376: LD_EXP 7
46380: PUSH
46381: LD_VAR 0 2
46385: ARRAY
46386: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46387: LD_ADDR_VAR 0 8
46391: PUSH
46392: LD_EXP 5
46396: PUSH
46397: LD_VAR 0 2
46401: ARRAY
46402: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46403: LD_EXP 10
46407: PPUSH
46408: CALL 5028 0 1
46412: IFFALSE 46489
// begin for j in mpOilDeposits [ pos ] do
46414: LD_ADDR_VAR 0 3
46418: PUSH
46419: LD_EXP 10
46423: PUSH
46424: LD_VAR 0 8
46428: ARRAY
46429: PUSH
46430: FOR_IN
46431: IFFALSE 46487
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46433: LD_VAR 0 3
46437: PUSH
46438: LD_INT 1
46440: ARRAY
46441: PPUSH
46442: LD_VAR 0 3
46446: PUSH
46447: LD_INT 2
46449: ARRAY
46450: PPUSH
46451: LD_INT 2
46453: PPUSH
46454: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46458: LD_VAR 0 3
46462: PUSH
46463: LD_INT 1
46465: ARRAY
46466: PPUSH
46467: LD_VAR 0 3
46471: PUSH
46472: LD_INT 2
46474: ARRAY
46475: PPUSH
46476: LD_VAR 0 7
46480: PPUSH
46481: CALL_OW 441
// end ;
46485: GO 46430
46487: POP
46488: POP
// end ; if Count ( mpSibDeposits ) then
46489: LD_EXP 11
46493: PPUSH
46494: CALL 5028 0 1
46498: IFFALSE 46575
// begin for j in mpSibDeposits [ pos ] do
46500: LD_ADDR_VAR 0 3
46504: PUSH
46505: LD_EXP 11
46509: PUSH
46510: LD_VAR 0 8
46514: ARRAY
46515: PUSH
46516: FOR_IN
46517: IFFALSE 46573
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46519: LD_VAR 0 3
46523: PUSH
46524: LD_INT 1
46526: ARRAY
46527: PPUSH
46528: LD_VAR 0 3
46532: PUSH
46533: LD_INT 2
46535: ARRAY
46536: PPUSH
46537: LD_INT 3
46539: PPUSH
46540: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46544: LD_VAR 0 3
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: PPUSH
46553: LD_VAR 0 3
46557: PUSH
46558: LD_INT 2
46560: ARRAY
46561: PPUSH
46562: LD_VAR 0 7
46566: PPUSH
46567: CALL_OW 441
// end ;
46571: GO 46516
46573: POP
46574: POP
// end ; InitBc ;
46575: CALL_OW 21
// InitUc ;
46579: CALL_OW 18
// uc_side := side ;
46583: LD_ADDR_OWVAR 20
46587: PUSH
46588: LD_VAR 0 7
46592: ST_TO_ADDR
// uc_nation := nation ;
46593: LD_ADDR_OWVAR 21
46597: PUSH
46598: LD_VAR 0 9
46602: ST_TO_ADDR
// if Count ( mpDepots ) then
46603: LD_EXP 12
46607: PPUSH
46608: CALL 5028 0 1
46612: IFFALSE 46782
// begin bc_level := 0 ;
46614: LD_ADDR_OWVAR 43
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// bc_type := b_depot ;
46622: LD_ADDR_OWVAR 42
46626: PUSH
46627: LD_INT 0
46629: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46630: LD_ADDR_VAR 0 4
46634: PUSH
46635: LD_EXP 12
46639: PUSH
46640: LD_VAR 0 8
46644: ARRAY
46645: PUSH
46646: LD_INT 1
46648: ARRAY
46649: PPUSH
46650: LD_EXP 12
46654: PUSH
46655: LD_VAR 0 8
46659: ARRAY
46660: PUSH
46661: LD_INT 2
46663: ARRAY
46664: PPUSH
46665: LD_EXP 12
46669: PUSH
46670: LD_VAR 0 8
46674: ARRAY
46675: PUSH
46676: LD_INT 3
46678: ARRAY
46679: PPUSH
46680: CALL_OW 47
46684: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46685: LD_VAR 0 4
46689: PPUSH
46690: LD_STRING @
46692: PUSH
46693: LD_VAR 0 7
46697: STR
46698: PPUSH
46699: CALL_OW 500
// SetTag ( b , side ) ;
46703: LD_VAR 0 4
46707: PPUSH
46708: LD_VAR 0 7
46712: PPUSH
46713: CALL_OW 109
// if Count ( mpStartingResources ) then
46717: LD_EXP 13
46721: PPUSH
46722: CALL 5028 0 1
46726: IFFALSE 46780
// begin for j := 1 to mpStartingResources do
46728: LD_ADDR_VAR 0 3
46732: PUSH
46733: DOUBLE
46734: LD_INT 1
46736: DEC
46737: ST_TO_ADDR
46738: LD_EXP 13
46742: PUSH
46743: FOR_TO
46744: IFFALSE 46778
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46746: LD_VAR 0 4
46750: PPUSH
46751: CALL_OW 274
46755: PPUSH
46756: LD_VAR 0 3
46760: PPUSH
46761: LD_EXP 13
46765: PUSH
46766: LD_VAR 0 3
46770: ARRAY
46771: PPUSH
46772: CALL_OW 277
46776: GO 46743
46778: POP
46779: POP
// end ; end else
46780: GO 46929
// if Count ( mpStartingResources ) then
46782: LD_EXP 13
46786: PPUSH
46787: CALL 5028 0 1
46791: IFFALSE 46929
// begin for j := 1 to mpStartingResources do
46793: LD_ADDR_VAR 0 3
46797: PUSH
46798: DOUBLE
46799: LD_INT 1
46801: DEC
46802: ST_TO_ADDR
46803: LD_EXP 13
46807: PUSH
46808: FOR_TO
46809: IFFALSE 46927
// begin resources := mpStartingResources [ j ] ;
46811: LD_ADDR_VAR 0 13
46815: PUSH
46816: LD_EXP 13
46820: PUSH
46821: LD_VAR 0 3
46825: ARRAY
46826: ST_TO_ADDR
// repeat if resources >= 50 then
46827: LD_VAR 0 13
46831: PUSH
46832: LD_INT 50
46834: GREATEREQUAL
46835: IFFALSE 46881
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46837: LD_VAR 0 3
46841: PPUSH
46842: LD_INT 5
46844: PPUSH
46845: LD_VAR 0 5
46849: PPUSH
46850: LD_VAR 0 6
46854: PPUSH
46855: LD_INT 4
46857: PPUSH
46858: LD_INT 0
46860: PPUSH
46861: CALL_OW 60
// resources := resources - 50 ;
46865: LD_ADDR_VAR 0 13
46869: PUSH
46870: LD_VAR 0 13
46874: PUSH
46875: LD_INT 50
46877: MINUS
46878: ST_TO_ADDR
// end else
46879: GO 46915
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46881: LD_VAR 0 3
46885: PPUSH
46886: LD_VAR 0 13
46890: PUSH
46891: LD_INT 10
46893: DIV
46894: PPUSH
46895: LD_VAR 0 5
46899: PPUSH
46900: LD_VAR 0 6
46904: PPUSH
46905: LD_INT 4
46907: PPUSH
46908: LD_INT 0
46910: PPUSH
46911: CALL_OW 60
// until resources <= 0 ;
46915: LD_VAR 0 13
46919: PUSH
46920: LD_INT 0
46922: LESSEQUAL
46923: IFFALSE 46827
// end ;
46925: GO 46808
46927: POP
46928: POP
// end ; if Count ( mpBuildings ) then
46929: LD_EXP 15
46933: PPUSH
46934: CALL 5028 0 1
46938: IFFALSE 47016
// begin for j in mpBuildings [ pos ] do
46940: LD_ADDR_VAR 0 3
46944: PUSH
46945: LD_EXP 15
46949: PUSH
46950: LD_VAR 0 8
46954: ARRAY
46955: PUSH
46956: FOR_IN
46957: IFFALSE 47014
// begin bc_level := 0 ;
46959: LD_ADDR_OWVAR 43
46963: PUSH
46964: LD_INT 0
46966: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46967: LD_ADDR_OWVAR 42
46971: PUSH
46972: LD_VAR 0 3
46976: PUSH
46977: LD_INT 1
46979: ARRAY
46980: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46981: LD_VAR 0 3
46985: PUSH
46986: LD_INT 2
46988: ARRAY
46989: PPUSH
46990: LD_VAR 0 3
46994: PUSH
46995: LD_INT 3
46997: ARRAY
46998: PPUSH
46999: LD_VAR 0 3
47003: PUSH
47004: LD_INT 4
47006: ARRAY
47007: PPUSH
47008: CALL_OW 47
// end ;
47012: GO 46956
47014: POP
47015: POP
// end ; if mpBattleFlag > - 1 then
47016: LD_EXP 20
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: GREATER
47025: IFFALSE 47184
// begin x := mpStartPos [ pos ] [ 1 ] ;
47027: LD_ADDR_VAR 0 5
47031: PUSH
47032: LD_EXP 19
47036: PUSH
47037: LD_VAR 0 8
47041: ARRAY
47042: PUSH
47043: LD_INT 1
47045: ARRAY
47046: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47047: LD_ADDR_VAR 0 6
47051: PUSH
47052: LD_EXP 19
47056: PUSH
47057: LD_VAR 0 8
47061: ARRAY
47062: PUSH
47063: LD_INT 2
47065: ARRAY
47066: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47067: LD_VAR 0 5
47071: PPUSH
47072: LD_VAR 0 6
47076: PPUSH
47077: LD_INT 12
47079: PPUSH
47080: LD_INT 2
47082: PPUSH
47083: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47087: LD_ADDR_EXP 21
47091: PUSH
47092: LD_EXP 21
47096: PPUSH
47097: LD_VAR 0 7
47101: PPUSH
47102: LD_VAR 0 7
47106: PPUSH
47107: LD_VAR 0 5
47111: PPUSH
47112: LD_VAR 0 6
47116: PPUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 100
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 70
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 3
47139: PUSH
47140: LD_INT 40
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 10
47149: PUSH
47150: LD_INT 25
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 20
47159: PUSH
47160: LD_INT 100
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: PPUSH
47174: CALL_OW 418
47178: PPUSH
47179: CALL_OW 1
47183: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47184: LD_EXP 24
47188: PUSH
47189: LD_INT 20
47191: PPUSH
47192: LD_VAR 0 7
47196: PPUSH
47197: CALL_OW 321
47201: PUSH
47202: LD_INT 1
47204: EQUAL
47205: AND
47206: IFFALSE 47223
// SetTech ( tech_SibDet , side , state_researched ) ;
47208: LD_INT 20
47210: PPUSH
47211: LD_VAR 0 7
47215: PPUSH
47216: LD_INT 2
47218: PPUSH
47219: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47223: LD_INT 24
47225: PPUSH
47226: LD_VAR 0 7
47230: PPUSH
47231: LD_INT 0
47233: PPUSH
47234: CALL_OW 322
// if mpSibBomb = 1 then
47238: LD_EXP 26
47242: PUSH
47243: LD_INT 1
47245: EQUAL
47246: IFFALSE 47265
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47248: LD_INT 25
47250: PPUSH
47251: LD_VAR 0 7
47255: PPUSH
47256: LD_INT 1
47258: PPUSH
47259: CALL_OW 322
// end else
47263: GO 47280
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47265: LD_INT 25
47267: PPUSH
47268: LD_VAR 0 7
47272: PPUSH
47273: LD_INT 0
47275: PPUSH
47276: CALL_OW 322
// end ; if mpVehicles then
47280: LD_EXP 33
47284: IFFALSE 47383
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47286: LD_ADDR_VAR 0 3
47290: PUSH
47291: LD_VAR 0 7
47295: PPUSH
47296: LD_VAR 0 9
47300: PPUSH
47301: LD_EXP 33
47305: PPUSH
47306: CALL 48470 0 3
47310: PUSH
47311: FOR_IN
47312: IFFALSE 47381
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47314: LD_VAR 0 3
47318: PPUSH
47319: LD_INT 0
47321: PPUSH
47322: LD_INT 5
47324: PPUSH
47325: CALL_OW 12
47329: PPUSH
47330: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47334: LD_VAR 0 3
47338: PPUSH
47339: LD_EXP 19
47343: PUSH
47344: LD_VAR 0 8
47348: ARRAY
47349: PUSH
47350: LD_INT 1
47352: ARRAY
47353: PPUSH
47354: LD_EXP 19
47358: PUSH
47359: LD_VAR 0 8
47363: ARRAY
47364: PUSH
47365: LD_INT 2
47367: ARRAY
47368: PPUSH
47369: LD_INT 12
47371: PPUSH
47372: LD_INT 0
47374: PPUSH
47375: CALL_OW 50
// end ;
47379: GO 47311
47381: POP
47382: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47383: LD_ADDR_VAR 0 11
47387: PUSH
47388: LD_VAR 0 7
47392: PPUSH
47393: LD_VAR 0 9
47397: PPUSH
47398: LD_EXP 22
47402: PPUSH
47403: LD_EXP 23
47407: PPUSH
47408: CALL 47972 0 4
47412: ST_TO_ADDR
// for j in team do
47413: LD_ADDR_VAR 0 3
47417: PUSH
47418: LD_VAR 0 11
47422: PUSH
47423: FOR_IN
47424: IFFALSE 47473
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47426: LD_VAR 0 3
47430: PPUSH
47431: LD_EXP 19
47435: PUSH
47436: LD_VAR 0 8
47440: ARRAY
47441: PUSH
47442: LD_INT 1
47444: ARRAY
47445: PPUSH
47446: LD_EXP 19
47450: PUSH
47451: LD_VAR 0 8
47455: ARRAY
47456: PUSH
47457: LD_INT 2
47459: ARRAY
47460: PPUSH
47461: LD_INT 12
47463: PPUSH
47464: LD_INT 0
47466: PPUSH
47467: CALL_OW 50
47471: GO 47423
47473: POP
47474: POP
// if mpApemans then
47475: LD_EXP 28
47479: IFFALSE 47558
// begin for j := 1 to mpApemans do
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: DOUBLE
47487: LD_INT 1
47489: DEC
47490: ST_TO_ADDR
47491: LD_EXP 28
47495: PUSH
47496: FOR_TO
47497: IFFALSE 47556
// begin PrepareApeman ( - 5 ) ;
47499: LD_INT 5
47501: NEG
47502: PPUSH
47503: CALL 36885 0 1
// ape := CreateHuman ;
47507: LD_ADDR_VAR 0 10
47511: PUSH
47512: CALL_OW 44
47516: ST_TO_ADDR
// SetTag ( ape , side ) ;
47517: LD_VAR 0 10
47521: PPUSH
47522: LD_VAR 0 7
47526: PPUSH
47527: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47531: LD_VAR 0 10
47535: PPUSH
47536: LD_EXP 29
47540: PUSH
47541: LD_VAR 0 8
47545: ARRAY
47546: PPUSH
47547: LD_INT 0
47549: PPUSH
47550: CALL_OW 49
// end ;
47554: GO 47496
47556: POP
47557: POP
// end ; end ;
47558: GO 46343
47560: POP
47561: POP
// if not mpTeamGame then
47562: LD_EXP 9
47566: NOT
47567: IFFALSE 47665
// begin for i := 1 to 8 do
47569: LD_ADDR_VAR 0 2
47573: PUSH
47574: DOUBLE
47575: LD_INT 1
47577: DEC
47578: ST_TO_ADDR
47579: LD_INT 8
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47661
// for j := 1 to 8 do
47585: LD_ADDR_VAR 0 3
47589: PUSH
47590: DOUBLE
47591: LD_INT 1
47593: DEC
47594: ST_TO_ADDR
47595: LD_INT 8
47597: PUSH
47598: FOR_TO
47599: IFFALSE 47657
// if i <> j then
47601: LD_VAR 0 2
47605: PUSH
47606: LD_VAR 0 3
47610: NONEQUAL
47611: IFFALSE 47635
// SetAttitude ( i , j , att_neutral , true ) else
47613: LD_VAR 0 2
47617: PPUSH
47618: LD_VAR 0 3
47622: PPUSH
47623: LD_INT 0
47625: PPUSH
47626: LD_INT 1
47628: PPUSH
47629: CALL_OW 80
47633: GO 47655
// SetAttitude ( i , j , att_friend , true ) ;
47635: LD_VAR 0 2
47639: PPUSH
47640: LD_VAR 0 3
47644: PPUSH
47645: LD_INT 1
47647: PPUSH
47648: LD_INT 1
47650: PPUSH
47651: CALL_OW 80
47655: GO 47598
47657: POP
47658: POP
47659: GO 47582
47661: POP
47662: POP
// end else
47663: GO 47840
// begin if mpSharedVision then
47665: LD_EXP 14
47669: IFFALSE 47734
// begin for i in mpTeams do
47671: LD_ADDR_VAR 0 2
47675: PUSH
47676: LD_EXP 8
47680: PUSH
47681: FOR_IN
47682: IFFALSE 47732
// for j := 2 to i do
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: DOUBLE
47690: LD_INT 2
47692: DEC
47693: ST_TO_ADDR
47694: LD_VAR 0 2
47698: PUSH
47699: FOR_TO
47700: IFFALSE 47728
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47702: LD_VAR 0 2
47706: PUSH
47707: LD_VAR 0 3
47711: ARRAY
47712: PPUSH
47713: LD_VAR 0 2
47717: PUSH
47718: LD_INT 1
47720: ARRAY
47721: PPUSH
47722: CALL_OW 343
47726: GO 47699
47728: POP
47729: POP
47730: GO 47681
47732: POP
47733: POP
// end ; for i := 1 to 8 do
47734: LD_ADDR_VAR 0 2
47738: PUSH
47739: DOUBLE
47740: LD_INT 1
47742: DEC
47743: ST_TO_ADDR
47744: LD_INT 8
47746: PUSH
47747: FOR_TO
47748: IFFALSE 47838
// for j := 1 to 8 do
47750: LD_ADDR_VAR 0 3
47754: PUSH
47755: DOUBLE
47756: LD_INT 1
47758: DEC
47759: ST_TO_ADDR
47760: LD_INT 8
47762: PUSH
47763: FOR_TO
47764: IFFALSE 47834
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47766: LD_EXP 6
47770: PUSH
47771: LD_VAR 0 2
47775: ARRAY
47776: PUSH
47777: LD_EXP 6
47781: PUSH
47782: LD_VAR 0 3
47786: ARRAY
47787: EQUAL
47788: IFFALSE 47812
// SetAttitude ( i , j , att_friend , true ) else
47790: LD_VAR 0 2
47794: PPUSH
47795: LD_VAR 0 3
47799: PPUSH
47800: LD_INT 1
47802: PPUSH
47803: LD_INT 1
47805: PPUSH
47806: CALL_OW 80
47810: GO 47832
// SetAttitude ( i , j , att_enemy , true ) ;
47812: LD_VAR 0 2
47816: PPUSH
47817: LD_VAR 0 3
47821: PPUSH
47822: LD_INT 2
47824: PPUSH
47825: LD_INT 1
47827: PPUSH
47828: CALL_OW 80
47832: GO 47763
47834: POP
47835: POP
47836: GO 47747
47838: POP
47839: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47840: LD_ADDR_OWVAR 71
47844: PUSH
47845: LD_EXP 7
47849: PUSH
47850: LD_OWVAR 2
47854: ARRAY
47855: ST_TO_ADDR
// if IAmSpec then
47856: CALL_OW 531
47860: IFFALSE 47901
// begin FogOff ( true ) ;
47862: LD_INT 1
47864: PPUSH
47865: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47869: LD_EXP 27
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: PUSH
47878: LD_INT 2
47880: DIV
47881: PPUSH
47882: LD_EXP 27
47886: PUSH
47887: LD_INT 2
47889: ARRAY
47890: PUSH
47891: LD_INT 2
47893: DIV
47894: PPUSH
47895: CALL_OW 86
// end else
47899: GO 47947
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47901: LD_EXP 19
47905: PUSH
47906: LD_EXP 5
47910: PUSH
47911: LD_OWVAR 2
47915: ARRAY
47916: ARRAY
47917: PUSH
47918: LD_INT 1
47920: ARRAY
47921: PPUSH
47922: LD_EXP 19
47926: PUSH
47927: LD_EXP 5
47931: PUSH
47932: LD_OWVAR 2
47936: ARRAY
47937: ARRAY
47938: PUSH
47939: LD_INT 2
47941: ARRAY
47942: PPUSH
47943: CALL_OW 86
// end ; BeginBuildUp ;
47947: CALL 48948 0 0
// enable ( mpActive ) ;
47951: LD_INT 100
47953: ENABLE_MARKED
// enable ( mpGameType ) ;
47954: LD_EXP 1
47958: ENABLE_MARKED
// mpGameActive := true ;
47959: LD_ADDR_EXP 36
47963: PUSH
47964: LD_INT 1
47966: ST_TO_ADDR
// end ;
47967: LD_VAR 0 1
47971: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
47972: LD_INT 0
47974: PPUSH
47975: PPUSH
47976: PPUSH
47977: PPUSH
// result := [ ] ;
47978: LD_ADDR_VAR 0 5
47982: PUSH
47983: EMPTY
47984: ST_TO_ADDR
// class := class_soldier ;
47985: LD_ADDR_VAR 0 8
47989: PUSH
47990: LD_INT 1
47992: ST_TO_ADDR
// uc_side := side ;
47993: LD_ADDR_OWVAR 20
47997: PUSH
47998: LD_VAR 0 1
48002: ST_TO_ADDR
// uc_nation := nation ;
48003: LD_ADDR_OWVAR 21
48007: PUSH
48008: LD_VAR 0 2
48012: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48013: LD_ADDR_OWVAR 26
48017: PUSH
48018: LD_OWVAR 19
48022: PUSH
48023: LD_VAR 0 1
48027: ARRAY
48028: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48029: LD_INT 1
48031: PPUSH
48032: LD_INT 2
48034: PPUSH
48035: CALL_OW 12
48039: PPUSH
48040: LD_VAR 0 8
48044: PPUSH
48045: LD_VAR 0 4
48049: PUSH
48050: LD_INT 2
48052: PLUS
48053: PPUSH
48054: CALL_OW 380
// hc_importance := 105 ;
48058: LD_ADDR_OWVAR 32
48062: PUSH
48063: LD_INT 105
48065: ST_TO_ADDR
// if Multiplayer then
48066: LD_OWVAR 4
48070: IFFALSE 48110
// begin hc_gallery := MULTIAVATARS ;
48072: LD_ADDR_OWVAR 33
48076: PUSH
48077: LD_STRING MULTIAVATARS
48079: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48080: LD_ADDR_OWVAR 34
48084: PUSH
48085: LD_VAR 0 1
48089: PPUSH
48090: CALL_OW 525
48094: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48095: LD_ADDR_OWVAR 27
48099: PUSH
48100: LD_VAR 0 1
48104: PPUSH
48105: CALL_OW 526
48109: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48110: LD_ADDR_VAR 0 5
48114: PUSH
48115: LD_VAR 0 5
48119: PPUSH
48120: CALL_OW 44
48124: PPUSH
48125: CALL 40637 0 2
48129: ST_TO_ADDR
// if mpTeamPreset then
48130: LD_LOC 1
48134: IFFALSE 48230
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
48136: LD_LOC 1
48140: PUSH
48141: LD_INT 1
48143: ARRAY
48144: PPUSH
48145: LD_VAR 0 5
48149: PUSH
48150: LD_VAR 0 5
48154: ARRAY
48155: PPUSH
48156: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
48160: LD_VAR 0 5
48164: PUSH
48165: LD_VAR 0 5
48169: ARRAY
48170: PPUSH
48171: LD_INT 1
48173: PPUSH
48174: LD_LOC 1
48178: PUSH
48179: LD_INT 1
48181: ARRAY
48182: PPUSH
48183: LD_INT 1
48185: PPUSH
48186: CALL_OW 260
48190: PPUSH
48191: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
48195: LD_VAR 0 5
48199: PUSH
48200: LD_VAR 0 5
48204: ARRAY
48205: PPUSH
48206: LD_INT 2
48208: PPUSH
48209: LD_LOC 1
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: PPUSH
48218: LD_INT 2
48220: PPUSH
48221: CALL_OW 260
48225: PPUSH
48226: CALL_OW 239
// end ; InitHc_All ( ) ;
48230: CALL_OW 584
// class := 2 ;
48234: LD_ADDR_VAR 0 8
48238: PUSH
48239: LD_INT 2
48241: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48242: LD_ADDR_VAR 0 6
48246: PUSH
48247: DOUBLE
48248: LD_INT 1
48250: DEC
48251: ST_TO_ADDR
48252: LD_VAR 0 3
48256: PUSH
48257: LD_INT 1
48259: MINUS
48260: PUSH
48261: FOR_TO
48262: IFFALSE 48446
// begin PrepareHuman ( false , class , skill ) ;
48264: LD_INT 0
48266: PPUSH
48267: LD_VAR 0 8
48271: PPUSH
48272: LD_VAR 0 4
48276: PPUSH
48277: CALL_OW 380
// un := CreateHuman ;
48281: LD_ADDR_VAR 0 7
48285: PUSH
48286: CALL_OW 44
48290: ST_TO_ADDR
// result := Join ( result , un ) ;
48291: LD_ADDR_VAR 0 5
48295: PUSH
48296: LD_VAR 0 5
48300: PPUSH
48301: LD_VAR 0 7
48305: PPUSH
48306: CALL 40637 0 2
48310: ST_TO_ADDR
// if mpTeamPreset then
48311: LD_LOC 1
48315: IFFALSE 48411
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
48317: LD_LOC 1
48321: PUSH
48322: LD_VAR 0 6
48326: PUSH
48327: LD_INT 1
48329: PLUS
48330: ARRAY
48331: PPUSH
48332: LD_VAR 0 7
48336: PPUSH
48337: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
48341: LD_VAR 0 7
48345: PPUSH
48346: LD_INT 1
48348: PPUSH
48349: LD_LOC 1
48353: PUSH
48354: LD_VAR 0 6
48358: PUSH
48359: LD_INT 1
48361: PLUS
48362: ARRAY
48363: PPUSH
48364: LD_INT 1
48366: PPUSH
48367: CALL_OW 260
48371: PPUSH
48372: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
48376: LD_VAR 0 7
48380: PPUSH
48381: LD_INT 2
48383: PPUSH
48384: LD_LOC 1
48388: PUSH
48389: LD_VAR 0 6
48393: PUSH
48394: LD_INT 1
48396: PLUS
48397: ARRAY
48398: PPUSH
48399: LD_INT 2
48401: PPUSH
48402: CALL_OW 260
48406: PPUSH
48407: CALL_OW 239
// end ; class := Inc ( class ) ;
48411: LD_ADDR_VAR 0 8
48415: PUSH
48416: LD_VAR 0 8
48420: PPUSH
48421: CALL 41998 0 1
48425: ST_TO_ADDR
// if class = 5 then
48426: LD_VAR 0 8
48430: PUSH
48431: LD_INT 5
48433: EQUAL
48434: IFFALSE 48444
// class := 1 ;
48436: LD_ADDR_VAR 0 8
48440: PUSH
48441: LD_INT 1
48443: ST_TO_ADDR
// end ;
48444: GO 48261
48446: POP
48447: POP
// if not mpTeamPreset then
48448: LD_LOC 1
48452: NOT
48453: IFFALSE 48465
// mpTeamPreset := result ;
48455: LD_ADDR_LOC 1
48459: PUSH
48460: LD_VAR 0 5
48464: ST_TO_ADDR
// end ;
48465: LD_VAR 0 5
48469: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48470: LD_INT 0
48472: PPUSH
48473: PPUSH
// result := [ ] ;
48474: LD_ADDR_VAR 0 4
48478: PUSH
48479: EMPTY
48480: ST_TO_ADDR
// if not vehicles then
48481: LD_VAR 0 3
48485: NOT
48486: IFFALSE 48490
// exit ;
48488: GO 48649
// for i := 1 to vehicles [ nation ] do
48490: LD_ADDR_VAR 0 5
48494: PUSH
48495: DOUBLE
48496: LD_INT 1
48498: DEC
48499: ST_TO_ADDR
48500: LD_VAR 0 3
48504: PUSH
48505: LD_VAR 0 2
48509: ARRAY
48510: PUSH
48511: FOR_TO
48512: IFFALSE 48647
// begin uc_side := side ;
48514: LD_ADDR_OWVAR 20
48518: PUSH
48519: LD_VAR 0 1
48523: ST_TO_ADDR
// uc_nation := nation ;
48524: LD_ADDR_OWVAR 21
48528: PUSH
48529: LD_VAR 0 2
48533: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48534: LD_VAR 0 3
48538: PUSH
48539: LD_VAR 0 2
48543: ARRAY
48544: PUSH
48545: LD_VAR 0 5
48549: ARRAY
48550: PUSH
48551: LD_INT 1
48553: ARRAY
48554: PPUSH
48555: LD_VAR 0 3
48559: PUSH
48560: LD_VAR 0 2
48564: ARRAY
48565: PUSH
48566: LD_VAR 0 5
48570: ARRAY
48571: PUSH
48572: LD_INT 2
48574: ARRAY
48575: PPUSH
48576: LD_VAR 0 3
48580: PUSH
48581: LD_VAR 0 2
48585: ARRAY
48586: PUSH
48587: LD_VAR 0 5
48591: ARRAY
48592: PUSH
48593: LD_INT 3
48595: ARRAY
48596: PPUSH
48597: LD_VAR 0 3
48601: PUSH
48602: LD_VAR 0 2
48606: ARRAY
48607: PUSH
48608: LD_VAR 0 5
48612: ARRAY
48613: PUSH
48614: LD_INT 4
48616: ARRAY
48617: PPUSH
48618: LD_INT 80
48620: PPUSH
48621: CALL 7766 0 5
// result := Join ( result , CreateVehicle ) ;
48625: LD_ADDR_VAR 0 4
48629: PUSH
48630: LD_VAR 0 4
48634: PPUSH
48635: CALL_OW 45
48639: PPUSH
48640: CALL 40637 0 2
48644: ST_TO_ADDR
// end ;
48645: GO 48511
48647: POP
48648: POP
// end ;
48649: LD_VAR 0 4
48653: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48654: LD_INT 0
48656: PPUSH
48657: PPUSH
// for i in mpBattleFlags do
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_EXP 21
48667: PUSH
48668: FOR_IN
48669: IFFALSE 48746
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48671: LD_VAR 0 3
48675: PPUSH
48676: LD_INT 1
48678: PUSH
48679: LD_VAR 0 1
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: LD_VAR 0 1
48695: PUSH
48696: LD_REAL  7.00000000000000E-0001
48699: MUL
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_VAR 0 1
48712: PUSH
48713: LD_REAL  4.00000000000000E-0001
48716: MUL
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 20
48724: PUSH
48725: LD_VAR 0 1
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: PPUSH
48740: CALL_OW 423
48744: GO 48668
48746: POP
48747: POP
// end ;
48748: LD_VAR 0 2
48752: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48753: LD_INT 100
48755: IFFALSE 48850
48757: GO 48759
48759: DISABLE
48760: LD_INT 0
48762: PPUSH
48763: PPUSH
// begin if mpBattleFlag <= 0 then
48764: LD_EXP 20
48768: PUSH
48769: LD_INT 0
48771: LESSEQUAL
48772: IFFALSE 48776
// exit ;
48774: GO 48850
// strength := 100 ;
48776: LD_ADDR_VAR 0 2
48780: PUSH
48781: LD_INT 100
48783: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48784: LD_EXP 20
48788: PPUSH
48789: CALL_OW 67
// strength := Dec ( strength ) ;
48793: LD_ADDR_VAR 0 2
48797: PUSH
48798: LD_VAR 0 2
48802: PPUSH
48803: CALL 42020 0 1
48807: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48808: LD_VAR 0 2
48812: PPUSH
48813: CALL 48654 0 1
// until not strength ;
48817: LD_VAR 0 2
48821: NOT
48822: IFFALSE 48784
// for i in mpBattleFlags do
48824: LD_ADDR_VAR 0 1
48828: PUSH
48829: LD_EXP 21
48833: PUSH
48834: FOR_IN
48835: IFFALSE 48848
// KillBattleFlag ( i ) ;
48837: LD_VAR 0 1
48841: PPUSH
48842: CALL_OW 419
48846: GO 48834
48848: POP
48849: POP
// end ;
48850: PPOPN 2
48852: END
// every 0 0$1 marked mpActive do var side , tmp ;
48853: GO 48855
48855: DISABLE
48856: LD_INT 0
48858: PPUSH
48859: PPUSH
// begin if mpSibBomb <= 1 then
48860: LD_EXP 26
48864: PUSH
48865: LD_INT 1
48867: LESSEQUAL
48868: IFFALSE 48872
// exit ;
48870: GO 48945
// tmp := mpSibBomb ;
48872: LD_ADDR_VAR 0 2
48876: PUSH
48877: LD_EXP 26
48881: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48882: LD_INT 35
48884: PPUSH
48885: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48889: LD_ADDR_VAR 0 2
48893: PUSH
48894: LD_VAR 0 2
48898: PUSH
48899: LD_INT 35
48901: MINUS
48902: ST_TO_ADDR
// until not tmp ;
48903: LD_VAR 0 2
48907: NOT
48908: IFFALSE 48882
// for side := 1 to 8 do
48910: LD_ADDR_VAR 0 1
48914: PUSH
48915: DOUBLE
48916: LD_INT 1
48918: DEC
48919: ST_TO_ADDR
48920: LD_INT 8
48922: PUSH
48923: FOR_TO
48924: IFFALSE 48943
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48926: LD_INT 25
48928: PPUSH
48929: LD_VAR 0 1
48933: PPUSH
48934: LD_INT 1
48936: PPUSH
48937: CALL_OW 322
48941: GO 48923
48943: POP
48944: POP
// end ;
48945: PPOPN 2
48947: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48948: LD_INT 0
48950: PPUSH
48951: PPUSH
48952: PPUSH
// mpBuildUpTimeDelay := 0 ;
48953: LD_ADDR_EXP 39
48957: PUSH
48958: LD_INT 0
48960: ST_TO_ADDR
// if not mpBuildUpTime then
48961: LD_EXP 18
48965: NOT
48966: IFFALSE 48970
// exit ;
48968: GO 49153
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48970: LD_ADDR_EXP 39
48974: PUSH
48975: LD_INT 8400
48977: PUSH
48978: LD_INT 2100
48980: PUSH
48981: LD_EXP 18
48985: MUL
48986: PLUS
48987: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48988: LD_ADDR_EXP 40
48992: PUSH
48993: LD_INT 1
48995: ST_TO_ADDR
// for i := 1 to 8 do
48996: LD_ADDR_VAR 0 2
49000: PUSH
49001: DOUBLE
49002: LD_INT 1
49004: DEC
49005: ST_TO_ADDR
49006: LD_INT 8
49008: PUSH
49009: FOR_TO
49010: IFFALSE 49151
// if mpSidePositions [ i ] then
49012: LD_EXP 5
49016: PUSH
49017: LD_VAR 0 2
49021: ARRAY
49022: IFFALSE 49149
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49024: LD_EXP 17
49028: PUSH
49029: LD_EXP 5
49033: PUSH
49034: LD_VAR 0 2
49038: ARRAY
49039: ARRAY
49040: PPUSH
49041: LD_INT 5
49043: PPUSH
49044: CALL_OW 424
// for j := 1 to 8 do
49048: LD_ADDR_VAR 0 3
49052: PUSH
49053: DOUBLE
49054: LD_INT 1
49056: DEC
49057: ST_TO_ADDR
49058: LD_INT 8
49060: PUSH
49061: FOR_TO
49062: IFFALSE 49147
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49064: LD_EXP 5
49068: PUSH
49069: LD_VAR 0 3
49073: ARRAY
49074: PUSH
49075: LD_EXP 6
49079: PUSH
49080: LD_VAR 0 2
49084: ARRAY
49085: PUSH
49086: LD_EXP 6
49090: PUSH
49091: LD_VAR 0 3
49095: ARRAY
49096: NONEQUAL
49097: PUSH
49098: LD_EXP 9
49102: NOT
49103: PUSH
49104: LD_VAR 0 2
49108: PUSH
49109: LD_VAR 0 3
49113: NONEQUAL
49114: AND
49115: OR
49116: AND
49117: IFFALSE 49145
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49119: LD_VAR 0 3
49123: PPUSH
49124: LD_EXP 17
49128: PUSH
49129: LD_EXP 5
49133: PUSH
49134: LD_VAR 0 2
49138: ARRAY
49139: ARRAY
49140: PPUSH
49141: CALL_OW 333
49145: GO 49061
49147: POP
49148: POP
// end ;
49149: GO 49009
49151: POP
49152: POP
// end ;
49153: LD_VAR 0 1
49157: RET
// function EndBuildUp ; var i , j ; begin
49158: LD_INT 0
49160: PPUSH
49161: PPUSH
49162: PPUSH
// mpBuildUpTimeActive := false ;
49163: LD_ADDR_EXP 40
49167: PUSH
49168: LD_INT 0
49170: ST_TO_ADDR
// for i := 1 to 8 do
49171: LD_ADDR_VAR 0 2
49175: PUSH
49176: DOUBLE
49177: LD_INT 1
49179: DEC
49180: ST_TO_ADDR
49181: LD_INT 8
49183: PUSH
49184: FOR_TO
49185: IFFALSE 49326
// if mpSidePositions [ i ] then
49187: LD_EXP 5
49191: PUSH
49192: LD_VAR 0 2
49196: ARRAY
49197: IFFALSE 49324
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
49199: LD_EXP 17
49203: PUSH
49204: LD_EXP 5
49208: PUSH
49209: LD_VAR 0 2
49213: ARRAY
49214: ARRAY
49215: PPUSH
49216: LD_INT 0
49218: PPUSH
49219: CALL_OW 424
// for j := 1 to 8 do
49223: LD_ADDR_VAR 0 3
49227: PUSH
49228: DOUBLE
49229: LD_INT 1
49231: DEC
49232: ST_TO_ADDR
49233: LD_INT 8
49235: PUSH
49236: FOR_TO
49237: IFFALSE 49322
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49239: LD_EXP 5
49243: PUSH
49244: LD_VAR 0 3
49248: ARRAY
49249: PUSH
49250: LD_EXP 6
49254: PUSH
49255: LD_VAR 0 2
49259: ARRAY
49260: PUSH
49261: LD_EXP 6
49265: PUSH
49266: LD_VAR 0 3
49270: ARRAY
49271: NONEQUAL
49272: PUSH
49273: LD_EXP 9
49277: NOT
49278: PUSH
49279: LD_VAR 0 2
49283: PUSH
49284: LD_VAR 0 3
49288: NONEQUAL
49289: AND
49290: OR
49291: AND
49292: IFFALSE 49320
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49294: LD_VAR 0 3
49298: PPUSH
49299: LD_EXP 17
49303: PUSH
49304: LD_EXP 5
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: ARRAY
49315: PPUSH
49316: CALL_OW 334
49320: GO 49236
49322: POP
49323: POP
// end ;
49324: GO 49184
49326: POP
49327: POP
// end ;
49328: LD_VAR 0 1
49332: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49333: LD_EXP 40
49337: IFFALSE 49512
49339: GO 49341
49341: DISABLE
49342: LD_INT 0
49344: PPUSH
49345: PPUSH
// begin for i := 1 to 8 do
49346: LD_ADDR_VAR 0 1
49350: PUSH
49351: DOUBLE
49352: LD_INT 1
49354: DEC
49355: ST_TO_ADDR
49356: LD_INT 8
49358: PUSH
49359: FOR_TO
49360: IFFALSE 49509
// if mpSidePositions [ i ] then
49362: LD_EXP 5
49366: PUSH
49367: LD_VAR 0 1
49371: ARRAY
49372: IFFALSE 49507
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49374: LD_ADDR_VAR 0 2
49378: PUSH
49379: LD_EXP 17
49383: PUSH
49384: LD_EXP 5
49388: PUSH
49389: LD_VAR 0 1
49393: ARRAY
49394: ARRAY
49395: PPUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 21
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 21
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 22
49426: PUSH
49427: LD_OWVAR 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PPUSH
49440: CALL_OW 70
49444: PUSH
49445: FOR_IN
49446: IFFALSE 49505
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49448: LD_EXP 6
49452: PUSH
49453: LD_VAR 0 1
49457: ARRAY
49458: PUSH
49459: LD_EXP 6
49463: PUSH
49464: LD_OWVAR 2
49468: ARRAY
49469: NONEQUAL
49470: PUSH
49471: LD_EXP 9
49475: NOT
49476: PUSH
49477: LD_VAR 0 1
49481: PUSH
49482: LD_OWVAR 2
49486: NONEQUAL
49487: AND
49488: OR
49489: IFFALSE 49503
// ComMoveToArea ( un , BuildUpEscape ) ;
49491: LD_VAR 0 2
49495: PPUSH
49496: LD_INT 17
49498: PPUSH
49499: CALL_OW 113
49503: GO 49445
49505: POP
49506: POP
49507: GO 49359
49509: POP
49510: POP
// enable ;
49511: ENABLE
// end ;
49512: PPOPN 2
49514: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49515: LD_EXP 18
49519: IFFALSE 49569
49521: GO 49523
49523: DISABLE
49524: LD_INT 0
49526: PPUSH
// begin tmp := mpBuildUpTime ;
49527: LD_ADDR_VAR 0 1
49531: PUSH
49532: LD_EXP 18
49536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49537: LD_INT 35
49539: PPUSH
49540: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49544: LD_ADDR_VAR 0 1
49548: PUSH
49549: LD_VAR 0 1
49553: PUSH
49554: LD_INT 35
49556: MINUS
49557: ST_TO_ADDR
// until not tmp ;
49558: LD_VAR 0 1
49562: NOT
49563: IFFALSE 49537
// EndBuildUp ;
49565: CALL 49158 0 0
// end ;
49569: PPOPN 1
49571: END
// every 0 0$1 trigger mpActive marked mpWin do
49572: LD_INT 100
49574: IFFALSE 49608
49576: GO 49578
49578: DISABLE
// begin if IAmServer then
49579: CALL_OW 518
49583: IFFALSE 49592
// wait ( 0 0$3 ) ;
49585: LD_INT 105
49587: PPUSH
49588: CALL_OW 67
// if Multiplayer then
49592: LD_OWVAR 4
49596: IFFALSE 49604
// YouWinInMultiplayer else
49598: CALL_OW 106
49602: GO 49608
// YouWin ;
49604: CALL_OW 103
// end ;
49608: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49609: LD_INT 0
49611: PPUSH
// result := false ;
49612: LD_ADDR_VAR 0 3
49616: PUSH
49617: LD_INT 0
49619: ST_TO_ADDR
// case gameType of GameTypeNormal :
49620: LD_VAR 0 1
49624: PUSH
49625: LD_INT 1
49627: DOUBLE
49628: EQUAL
49629: IFTRUE 49633
49631: GO 49706
49633: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49634: LD_ADDR_VAR 0 3
49638: PUSH
49639: LD_INT 22
49641: PUSH
49642: LD_VAR 0 2
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: LD_INT 21
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 33
49666: PUSH
49667: LD_INT 3
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 33
49676: PUSH
49677: LD_INT 5
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PPUSH
49694: CALL_OW 69
49698: PPUSH
49699: CALL 5028 0 1
49703: ST_TO_ADDR
// end ; GameTypeSurvival :
49704: GO 49941
49706: LD_INT 2
49708: DOUBLE
49709: EQUAL
49710: IFTRUE 49714
49712: GO 49842
49714: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49715: LD_ADDR_VAR 0 3
49719: PUSH
49720: LD_INT 22
49722: PUSH
49723: LD_VAR 0 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 2
49734: PUSH
49735: LD_INT 30
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 30
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PPUSH
49764: CALL_OW 69
49768: PPUSH
49769: CALL 5028 0 1
49773: PUSH
49774: LD_INT 22
49776: PUSH
49777: LD_VAR 0 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 21
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 33
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 33
49811: PUSH
49812: LD_INT 5
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PPUSH
49829: CALL_OW 69
49833: PPUSH
49834: CALL 5028 0 1
49838: AND
49839: ST_TO_ADDR
// end ; GameTypeKing :
49840: GO 49941
49842: LD_INT 3
49844: DOUBLE
49845: EQUAL
49846: IFTRUE 49850
49848: GO 49940
49850: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49851: LD_ADDR_VAR 0 3
49855: PUSH
49856: LD_INT 22
49858: PUSH
49859: LD_VAR 0 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 21
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 33
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 33
49893: PUSH
49894: LD_INT 5
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PPUSH
49911: CALL_OW 69
49915: PPUSH
49916: CALL 5028 0 1
49920: PUSH
49921: LD_VAR 0 2
49925: PPUSH
49926: CALL 53127 0 1
49930: PUSH
49931: LD_EXP 32
49935: LESS
49936: AND
49937: ST_TO_ADDR
// end ; end ;
49938: GO 49941
49940: POP
// end ;
49941: LD_VAR 0 3
49945: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49946: LD_INT 100
49948: IFFALSE 50170
49950: GO 49952
49952: DISABLE
49953: LD_INT 0
49955: PPUSH
49956: PPUSH
// begin if Multiplayer then
49957: LD_OWVAR 4
49961: IFFALSE 49969
// SetPlayerSpectator ( ) else
49963: CALL_OW 572
49967: GO 49978
// FogOff ( your_side ) ;
49969: LD_OWVAR 2
49973: PPUSH
49974: CALL_OW 344
// repeat gameIsOn := false ;
49978: LD_ADDR_VAR 0 1
49982: PUSH
49983: LD_INT 0
49985: ST_TO_ADDR
// for i := 1 to 8 do
49986: LD_ADDR_VAR 0 2
49990: PUSH
49991: DOUBLE
49992: LD_INT 1
49994: DEC
49995: ST_TO_ADDR
49996: LD_INT 8
49998: PUSH
49999: FOR_TO
50000: IFFALSE 50122
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50002: LD_EXP 5
50006: PUSH
50007: LD_VAR 0 2
50011: ARRAY
50012: PUSH
50013: LD_VAR 0 2
50017: PPUSH
50018: CALL_OW 108
50022: AND
50023: PUSH
50024: LD_VAR 0 2
50028: PUSH
50029: LD_OWVAR 2
50033: NONEQUAL
50034: AND
50035: IFFALSE 50120
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50037: LD_EXP 6
50041: PUSH
50042: LD_VAR 0 2
50046: ARRAY
50047: NOT
50048: PUSH
50049: LD_EXP 6
50053: PUSH
50054: LD_VAR 0 2
50058: ARRAY
50059: PUSH
50060: LD_EXP 6
50064: PUSH
50065: LD_OWVAR 2
50069: ARRAY
50070: NONEQUAL
50071: PUSH
50072: LD_OWVAR 2
50076: PPUSH
50077: LD_VAR 0 2
50081: PPUSH
50082: CALL_OW 81
50086: PUSH
50087: LD_INT 1
50089: NONEQUAL
50090: AND
50091: OR
50092: IFFALSE 50120
// if HasPowerByGameType ( mpGameType , i ) then
50094: LD_EXP 1
50098: PPUSH
50099: LD_VAR 0 2
50103: PPUSH
50104: CALL 49609 0 2
50108: IFFALSE 50120
// begin gameIsOn := true ;
50110: LD_ADDR_VAR 0 1
50114: PUSH
50115: LD_INT 1
50117: ST_TO_ADDR
// break ;
50118: GO 50122
// end ;
50120: GO 49999
50122: POP
50123: POP
// wait ( 100 ) ;
50124: LD_INT 100
50126: PPUSH
50127: CALL_OW 67
// until not gameIsOn ;
50131: LD_VAR 0 1
50135: NOT
50136: IFFALSE 49978
// if IAmServer then
50138: CALL_OW 518
50142: IFFALSE 50151
// wait ( 0 0$3 ) ;
50144: LD_INT 105
50146: PPUSH
50147: CALL_OW 67
// if Multiplayer then
50151: LD_OWVAR 4
50155: IFFALSE 50163
// YouLostInMultiplayer else
50157: CALL_OW 107
50161: GO 50170
// YouLost (  ) ;
50163: LD_STRING 
50165: PPUSH
50166: CALL_OW 104
// end ;
50170: PPOPN 2
50172: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
50173: LD_EXP 30
50177: IFFALSE 50524
50179: GO 50181
50181: DISABLE
50182: LD_INT 0
50184: PPUSH
50185: PPUSH
50186: PPUSH
50187: PPUSH
50188: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
50189: LD_ADDR_VAR 0 5
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 2
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: LD_INT 4
50205: PUSH
50206: LD_INT 5
50208: PUSH
50209: LD_INT 6
50211: PUSH
50212: LD_INT 7
50214: PUSH
50215: LD_INT 8
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
50228: LD_INT 350
50230: PPUSH
50231: CALL_OW 67
// for i := 1 to 8 do
50235: LD_ADDR_VAR 0 1
50239: PUSH
50240: DOUBLE
50241: LD_INT 1
50243: DEC
50244: ST_TO_ADDR
50245: LD_INT 8
50247: PUSH
50248: FOR_TO
50249: IFFALSE 50494
// begin j := sides [ i ] ;
50251: LD_ADDR_VAR 0 2
50255: PUSH
50256: LD_VAR 0 5
50260: PUSH
50261: LD_VAR 0 1
50265: ARRAY
50266: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50267: LD_EXP 37
50271: PUSH
50272: LD_VAR 0 2
50276: ARRAY
50277: PPUSH
50278: CALL 5028 0 1
50282: PUSH
50283: LD_VAR 0 2
50287: PPUSH
50288: CALL_OW 108
50292: AND
50293: PUSH
50294: LD_EXP 1
50298: PPUSH
50299: LD_VAR 0 2
50303: PPUSH
50304: CALL 49609 0 2
50308: AND
50309: IFFALSE 50492
// begin wait ( mpRespawn div 3 ) ;
50311: LD_EXP 30
50315: PUSH
50316: LD_INT 3
50318: DIV
50319: PPUSH
50320: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50324: LD_ADDR_VAR 0 3
50328: PUSH
50329: LD_INT 22
50331: PUSH
50332: LD_VAR 0 2
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 50
50343: PUSH
50344: EMPTY
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: LD_INT 30
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 30
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: PPUSH
50380: CALL_OW 69
50384: ST_TO_ADDR
// if not tmp then
50385: LD_VAR 0 3
50389: NOT
50390: IFFALSE 50394
// continue ;
50392: GO 50248
// spawn := tmp [ 1 ] ;
50394: LD_ADDR_VAR 0 4
50398: PUSH
50399: LD_VAR 0 3
50403: PUSH
50404: LD_INT 1
50406: ARRAY
50407: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50408: LD_EXP 37
50412: PUSH
50413: LD_VAR 0 2
50417: ARRAY
50418: PUSH
50419: LD_INT 1
50421: ARRAY
50422: PPUSH
50423: LD_VAR 0 4
50427: PPUSH
50428: CALL_OW 250
50432: PPUSH
50433: LD_VAR 0 4
50437: PPUSH
50438: CALL_OW 251
50442: PPUSH
50443: LD_INT 32
50445: PPUSH
50446: LD_INT 1
50448: PPUSH
50449: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50453: LD_ADDR_EXP 37
50457: PUSH
50458: LD_EXP 37
50462: PPUSH
50463: LD_VAR 0 2
50467: PPUSH
50468: LD_EXP 37
50472: PUSH
50473: LD_VAR 0 2
50477: ARRAY
50478: PPUSH
50479: LD_INT 1
50481: PPUSH
50482: CALL_OW 3
50486: PPUSH
50487: CALL_OW 1
50491: ST_TO_ADDR
// end ; end ;
50492: GO 50248
50494: POP
50495: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50496: LD_ADDR_VAR 0 5
50500: PUSH
50501: LD_VAR 0 5
50505: PPUSH
50506: LD_INT 1
50508: PPUSH
50509: LD_INT 8
50511: PPUSH
50512: LD_INT 1
50514: PPUSH
50515: CALL 7306 0 4
50519: ST_TO_ADDR
// until false ;
50520: LD_INT 0
50522: IFFALSE 50228
// end ;
50524: PPOPN 5
50526: END
// every 0 0$1 marked mpActive do
50527: GO 50529
50529: DISABLE
// begin enable ;
50530: ENABLE
// if not mpDisplayStrings then
50531: LD_EXP 35
50535: NOT
50536: IFFALSE 50547
// begin display_strings := [ ] ;
50538: LD_ADDR_OWVAR 47
50542: PUSH
50543: EMPTY
50544: ST_TO_ADDR
// exit ;
50545: GO 50557
// end ; display_strings := mpDisplayStrings ;
50547: LD_ADDR_OWVAR 47
50551: PUSH
50552: LD_EXP 35
50556: ST_TO_ADDR
// end ; end_of_file
50557: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50558: LD_INT 0
50560: PPUSH
50561: PPUSH
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
50566: PPUSH
50567: PPUSH
50568: PPUSH
// if GetType ( un ) = unit_vehicle then
50569: LD_VAR 0 1
50573: PPUSH
50574: CALL_OW 247
50578: PUSH
50579: LD_INT 2
50581: EQUAL
50582: IFFALSE 50586
// exit ;
50584: GO 51156
// side := GetSide ( un ) ;
50586: LD_ADDR_VAR 0 9
50590: PUSH
50591: LD_VAR 0 1
50595: PPUSH
50596: CALL_OW 255
50600: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50601: LD_EXP 1
50605: PUSH
50606: LD_INT 2
50608: EQUAL
50609: IFFALSE 50702
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50611: LD_VAR 0 1
50615: PPUSH
50616: CALL_OW 266
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: IN
50631: PUSH
50632: LD_VAR 0 1
50636: PPUSH
50637: CALL_OW 110
50641: PUSH
50642: LD_VAR 0 9
50646: EQUAL
50647: AND
50648: IFFALSE 50702
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50650: LD_ADDR_VAR 0 3
50654: PUSH
50655: LD_INT 22
50657: PUSH
50658: LD_VAR 0 9
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 21
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PPUSH
50681: CALL_OW 69
50685: PUSH
50686: FOR_IN
50687: IFFALSE 50700
// KillUnit ( i ) ;
50689: LD_VAR 0 3
50693: PPUSH
50694: CALL_OW 66
50698: GO 50686
50700: POP
50701: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50702: LD_VAR 0 1
50706: PPUSH
50707: CALL_OW 257
50711: PUSH
50712: LD_INT 12
50714: PUSH
50715: LD_INT 17
50717: PUSH
50718: LD_INT 15
50720: PUSH
50721: LD_INT 16
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: IN
50730: PUSH
50731: LD_VAR 0 1
50735: PPUSH
50736: CALL_OW 263
50740: PUSH
50741: LD_INT 5
50743: EQUAL
50744: OR
50745: IFFALSE 50885
// begin tag := GetTag ( un ) ;
50747: LD_ADDR_VAR 0 5
50751: PUSH
50752: LD_VAR 0 1
50756: PPUSH
50757: CALL_OW 110
50761: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50762: LD_ADDR_VAR 0 7
50766: PUSH
50767: LD_EXP 29
50771: PUSH
50772: LD_EXP 5
50776: PUSH
50777: LD_VAR 0 5
50781: ARRAY
50782: ARRAY
50783: ST_TO_ADDR
// if not area then
50784: LD_VAR 0 7
50788: NOT
50789: IFFALSE 50793
// exit ;
50791: GO 51156
// wait ( 4 4$00 ) ;
50793: LD_INT 8400
50795: PPUSH
50796: CALL_OW 67
// repeat wait ( 10 ) ;
50800: LD_INT 10
50802: PPUSH
50803: CALL_OW 67
// until not mpBlockRespThread ;
50807: LD_EXP 38
50811: NOT
50812: IFFALSE 50800
// mpBlockRespThread := true ;
50814: LD_ADDR_EXP 38
50818: PUSH
50819: LD_INT 1
50821: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
50822: LD_INT 0
50824: PPUSH
50825: CALL 36885 0 1
// ape := CreateHuman ;
50829: LD_ADDR_VAR 0 4
50833: PUSH
50834: CALL_OW 44
50838: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50839: LD_VAR 0 4
50843: PPUSH
50844: LD_VAR 0 5
50848: PPUSH
50849: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50853: LD_VAR 0 4
50857: PPUSH
50858: LD_VAR 0 7
50862: PPUSH
50863: LD_INT 0
50865: PPUSH
50866: CALL_OW 49
// wait ( 10 ) ;
50870: LD_INT 10
50872: PPUSH
50873: CALL_OW 67
// mpBlockRespThread := false ;
50877: LD_ADDR_EXP 38
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50885: LD_VAR 0 1
50889: PPUSH
50890: CALL_OW 247
50894: PUSH
50895: LD_INT 1
50897: EQUAL
50898: PUSH
50899: LD_VAR 0 1
50903: PPUSH
50904: CALL_OW 248
50908: PUSH
50909: LD_INT 0
50911: GREATER
50912: AND
50913: IFFALSE 51156
// begin if not mpRespawn then
50915: LD_EXP 30
50919: NOT
50920: IFFALSE 50924
// exit ;
50922: GO 51156
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50924: LD_VAR 0 9
50928: PPUSH
50929: CALL_OW 108
50933: NOT
50934: PUSH
50935: LD_EXP 1
50939: PPUSH
50940: LD_VAR 0 9
50944: PPUSH
50945: CALL 49609 0 2
50949: NOT
50950: AND
50951: IFFALSE 50955
// exit ;
50953: GO 51156
// side := GetSide ( un ) ;
50955: LD_ADDR_VAR 0 9
50959: PUSH
50960: LD_VAR 0 1
50964: PPUSH
50965: CALL_OW 255
50969: ST_TO_ADDR
// nation := GetNation ( un ) ;
50970: LD_ADDR_VAR 0 8
50974: PUSH
50975: LD_VAR 0 1
50979: PPUSH
50980: CALL_OW 248
50984: ST_TO_ADDR
// class := GetClass ( un ) ;
50985: LD_ADDR_VAR 0 6
50989: PUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: CALL_OW 257
50999: ST_TO_ADDR
// if class > 4 then
51000: LD_VAR 0 6
51004: PUSH
51005: LD_INT 4
51007: GREATER
51008: IFFALSE 51018
// class := 1 ;
51010: LD_ADDR_VAR 0 6
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// repeat wait ( 10 ) ;
51018: LD_INT 10
51020: PPUSH
51021: CALL_OW 67
// until not mpBlockRespThread ;
51025: LD_EXP 38
51029: NOT
51030: IFFALSE 51018
// mpBlockRespThread := true ;
51032: LD_ADDR_EXP 38
51036: PUSH
51037: LD_INT 1
51039: ST_TO_ADDR
// uc_side := side ;
51040: LD_ADDR_OWVAR 20
51044: PUSH
51045: LD_VAR 0 9
51049: ST_TO_ADDR
// uc_nation := nation ;
51050: LD_ADDR_OWVAR 21
51054: PUSH
51055: LD_VAR 0 8
51059: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
51060: LD_INT 0
51062: PPUSH
51063: LD_VAR 0 6
51067: PPUSH
51068: LD_INT 2
51070: PPUSH
51071: CALL_OW 380
// un := CreateHuman ;
51075: LD_ADDR_VAR 0 1
51079: PUSH
51080: CALL_OW 44
51084: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
51085: LD_ADDR_EXP 37
51089: PUSH
51090: LD_EXP 37
51094: PPUSH
51095: LD_VAR 0 9
51099: PPUSH
51100: LD_EXP 37
51104: PUSH
51105: LD_VAR 0 9
51109: ARRAY
51110: PPUSH
51111: LD_EXP 37
51115: PUSH
51116: LD_VAR 0 9
51120: ARRAY
51121: PUSH
51122: LD_INT 1
51124: PLUS
51125: PPUSH
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 1
51135: PPUSH
51136: CALL_OW 1
51140: ST_TO_ADDR
// wait ( 10 ) ;
51141: LD_INT 10
51143: PPUSH
51144: CALL_OW 67
// mpBlockRespThread := false ;
51148: LD_ADDR_EXP 38
51152: PUSH
51153: LD_INT 0
51155: ST_TO_ADDR
// end ; end ;
51156: LD_VAR 0 2
51160: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
51161: LD_INT 0
51163: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
51164: LD_VAR 0 1
51168: PPUSH
51169: CALL_OW 266
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: IN
51184: IFFALSE 51209
// SetBName ( building , @ & GetSide ( building ) ) ;
51186: LD_VAR 0 1
51190: PPUSH
51191: LD_STRING @
51193: PUSH
51194: LD_VAR 0 1
51198: PPUSH
51199: CALL_OW 255
51203: STR
51204: PPUSH
51205: CALL_OW 500
// end ;
51209: LD_VAR 0 2
51213: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
51214: LD_INT 0
51216: PPUSH
51217: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
51218: LD_EXP 1
51222: PUSH
51223: LD_INT 2
51225: EQUAL
51226: PUSH
51227: LD_VAR 0 1
51231: PPUSH
51232: CALL_OW 266
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: IN
51247: AND
51248: IFFALSE 51313
// begin KillUnit ( building ) ;
51250: LD_VAR 0 1
51254: PPUSH
51255: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
51259: LD_ADDR_VAR 0 5
51263: PUSH
51264: LD_INT 22
51266: PUSH
51267: LD_VAR 0 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 21
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PPUSH
51290: CALL_OW 69
51294: PUSH
51295: FOR_IN
51296: IFFALSE 51309
// KillUnit ( i ) ;
51298: LD_VAR 0 5
51302: PPUSH
51303: CALL_OW 66
51307: GO 51295
51309: POP
51310: POP
// exit ;
51311: GO 51358
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51313: LD_VAR 0 1
51317: PPUSH
51318: CALL_OW 266
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: IN
51333: IFFALSE 51358
// SetBName ( building , @ & GetSide ( building ) ) ;
51335: LD_VAR 0 1
51339: PPUSH
51340: LD_STRING @
51342: PUSH
51343: LD_VAR 0 1
51347: PPUSH
51348: CALL_OW 255
51352: STR
51353: PPUSH
51354: CALL_OW 500
// end ; end_of_file
51358: LD_VAR 0 4
51362: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51363: LD_EXP 36
51367: PUSH
51368: CALL 51573 0 0
51372: AND
51373: PUSH
51374: LD_OWVAR 4
51378: AND
51379: IFFALSE 51570
51381: GO 51383
51383: DISABLE
51384: LD_INT 0
51386: PPUSH
51387: PPUSH
// begin canWin := false ;
51388: LD_ADDR_VAR 0 2
51392: PUSH
51393: LD_INT 0
51395: ST_TO_ADDR
// if not HasPower ( your_side ) then
51396: LD_OWVAR 2
51400: PPUSH
51401: CALL 51613 0 1
51405: NOT
51406: IFFALSE 51417
// begin Multiplayer_Loose_Message ;
51408: CALL_OW 521
// enable ( mpLose ) ;
51412: LD_INT 102
51414: ENABLE_MARKED
// end else
51415: GO 51570
// begin canWin := true ;
51417: LD_ADDR_VAR 0 2
51421: PUSH
51422: LD_INT 1
51424: ST_TO_ADDR
// for i := 1 to 8 do
51425: LD_ADDR_VAR 0 1
51429: PUSH
51430: DOUBLE
51431: LD_INT 1
51433: DEC
51434: ST_TO_ADDR
51435: LD_INT 8
51437: PUSH
51438: FOR_TO
51439: IFFALSE 51556
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51441: LD_EXP 5
51445: PUSH
51446: LD_VAR 0 1
51450: ARRAY
51451: PUSH
51452: LD_VAR 0 1
51456: PPUSH
51457: CALL_OW 108
51461: AND
51462: PUSH
51463: LD_VAR 0 1
51467: PUSH
51468: LD_OWVAR 2
51472: NONEQUAL
51473: AND
51474: IFFALSE 51554
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51476: LD_EXP 6
51480: PUSH
51481: LD_VAR 0 1
51485: ARRAY
51486: NOT
51487: PUSH
51488: LD_EXP 6
51492: PUSH
51493: LD_VAR 0 1
51497: ARRAY
51498: PUSH
51499: LD_EXP 6
51503: PUSH
51504: LD_OWVAR 2
51508: ARRAY
51509: NONEQUAL
51510: PUSH
51511: LD_OWVAR 2
51515: PPUSH
51516: LD_VAR 0 1
51520: PPUSH
51521: CALL_OW 81
51525: PUSH
51526: LD_INT 1
51528: NONEQUAL
51529: AND
51530: OR
51531: IFFALSE 51554
// if HasPower ( i ) then
51533: LD_VAR 0 1
51537: PPUSH
51538: CALL 51613 0 1
51542: IFFALSE 51554
// begin canWin := false ;
51544: LD_ADDR_VAR 0 2
51548: PUSH
51549: LD_INT 0
51551: ST_TO_ADDR
// break ;
51552: GO 51556
// end ;
51554: GO 51438
51556: POP
51557: POP
// if canWin then
51558: LD_VAR 0 2
51562: IFFALSE 51569
// enable ( mpWin ) else
51564: LD_INT 101
51566: ENABLE_MARKED
51567: GO 51570
// enable ;
51569: ENABLE
// end ; end ;
51570: PPOPN 2
51572: END
// function CanWinLoose ; begin
51573: LD_INT 0
51575: PPUSH
// result := true ;
51576: LD_ADDR_VAR 0 1
51580: PUSH
51581: LD_INT 1
51583: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51584: CALL_OW 531
51588: PUSH
51589: CALL_OW 519
51593: PUSH
51594: LD_INT 1
51596: GREATER
51597: AND
51598: IFFALSE 51608
// result := false ;
51600: LD_ADDR_VAR 0 1
51604: PUSH
51605: LD_INT 0
51607: ST_TO_ADDR
// end ;
51608: LD_VAR 0 1
51612: RET
// function HasPower ( i ) ; begin
51613: LD_INT 0
51615: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51616: LD_ADDR_VAR 0 2
51620: PUSH
51621: LD_INT 22
51623: PUSH
51624: LD_VAR 0 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: LD_INT 21
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 33
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 33
51658: PUSH
51659: LD_INT 5
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PPUSH
51676: CALL_OW 69
51680: ST_TO_ADDR
// end ; end_of_file
51681: LD_VAR 0 2
51685: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51686: LD_EXP 36
51690: IFFALSE 51733
51692: GO 51694
51694: DISABLE
51695: LD_INT 0
51697: PPUSH
// begin for i := 1 to 8 do
51698: LD_ADDR_VAR 0 1
51702: PUSH
51703: DOUBLE
51704: LD_INT 1
51706: DEC
51707: ST_TO_ADDR
51708: LD_INT 8
51710: PUSH
51711: FOR_TO
51712: IFFALSE 51731
// SetRestrict ( b_depot , i , state_disabled ) ;
51714: LD_INT 0
51716: PPUSH
51717: LD_VAR 0 1
51721: PPUSH
51722: LD_INT 0
51724: PPUSH
51725: CALL_OW 324
51729: GO 51711
51731: POP
51732: POP
// end ;
51733: PPOPN 1
51735: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51736: LD_EXP 36
51740: PUSH
51741: CALL 51946 0 0
51745: AND
51746: PUSH
51747: LD_OWVAR 4
51751: AND
51752: IFFALSE 51943
51754: GO 51756
51756: DISABLE
51757: LD_INT 0
51759: PPUSH
51760: PPUSH
// begin canWin := false ;
51761: LD_ADDR_VAR 0 2
51765: PUSH
51766: LD_INT 0
51768: ST_TO_ADDR
// if not HasPower ( your_side ) then
51769: LD_OWVAR 2
51773: PPUSH
51774: CALL 51986 0 1
51778: NOT
51779: IFFALSE 51790
// begin Multiplayer_Loose_Message ;
51781: CALL_OW 521
// enable ( mpLose ) ;
51785: LD_INT 102
51787: ENABLE_MARKED
// end else
51788: GO 51943
// begin canWin := true ;
51790: LD_ADDR_VAR 0 2
51794: PUSH
51795: LD_INT 1
51797: ST_TO_ADDR
// for i := 1 to 8 do
51798: LD_ADDR_VAR 0 1
51802: PUSH
51803: DOUBLE
51804: LD_INT 1
51806: DEC
51807: ST_TO_ADDR
51808: LD_INT 8
51810: PUSH
51811: FOR_TO
51812: IFFALSE 51929
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51814: LD_EXP 5
51818: PUSH
51819: LD_VAR 0 1
51823: ARRAY
51824: PUSH
51825: LD_VAR 0 1
51829: PPUSH
51830: CALL_OW 108
51834: AND
51835: PUSH
51836: LD_VAR 0 1
51840: PUSH
51841: LD_OWVAR 2
51845: NONEQUAL
51846: AND
51847: IFFALSE 51927
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51849: LD_EXP 6
51853: PUSH
51854: LD_VAR 0 1
51858: ARRAY
51859: NOT
51860: PUSH
51861: LD_EXP 6
51865: PUSH
51866: LD_VAR 0 1
51870: ARRAY
51871: PUSH
51872: LD_EXP 6
51876: PUSH
51877: LD_OWVAR 2
51881: ARRAY
51882: NONEQUAL
51883: PUSH
51884: LD_OWVAR 2
51888: PPUSH
51889: LD_VAR 0 1
51893: PPUSH
51894: CALL_OW 81
51898: PUSH
51899: LD_INT 1
51901: NONEQUAL
51902: AND
51903: OR
51904: IFFALSE 51927
// if HasPower ( i ) then
51906: LD_VAR 0 1
51910: PPUSH
51911: CALL 51986 0 1
51915: IFFALSE 51927
// begin canWin := false ;
51917: LD_ADDR_VAR 0 2
51921: PUSH
51922: LD_INT 0
51924: ST_TO_ADDR
// break ;
51925: GO 51929
// end ;
51927: GO 51811
51929: POP
51930: POP
// if canWin then
51931: LD_VAR 0 2
51935: IFFALSE 51942
// enable ( mpWin ) else
51937: LD_INT 101
51939: ENABLE_MARKED
51940: GO 51943
// enable ;
51942: ENABLE
// end ; end ;
51943: PPOPN 2
51945: END
// function CanWinLoose ; begin
51946: LD_INT 0
51948: PPUSH
// result := true ;
51949: LD_ADDR_VAR 0 1
51953: PUSH
51954: LD_INT 1
51956: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51957: CALL_OW 531
51961: PUSH
51962: CALL_OW 519
51966: PUSH
51967: LD_INT 1
51969: GREATER
51970: AND
51971: IFFALSE 51981
// result := false ;
51973: LD_ADDR_VAR 0 1
51977: PUSH
51978: LD_INT 0
51980: ST_TO_ADDR
// end ;
51981: LD_VAR 0 1
51985: RET
// function HasPower ( i ) ; begin
51986: LD_INT 0
51988: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51989: LD_INT 22
51991: PUSH
51992: LD_VAR 0 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 30
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 30
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PPUSH
52033: CALL_OW 69
52037: NOT
52038: IFFALSE 52042
// exit ;
52040: GO 52107
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
52042: LD_ADDR_VAR 0 2
52046: PUSH
52047: LD_INT 22
52049: PUSH
52050: LD_VAR 0 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: LD_INT 21
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 33
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 33
52084: PUSH
52085: LD_INT 5
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PPUSH
52102: CALL_OW 69
52106: ST_TO_ADDR
// end ; end_of_file
52107: LD_VAR 0 2
52111: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
52112: LD_EXP 36
52116: IFFALSE 52455
52118: GO 52120
52120: DISABLE
52121: LD_INT 0
52123: PPUSH
52124: PPUSH
52125: PPUSH
// begin mpKingPoints := [ ] ;
52126: LD_ADDR_EXP 41
52130: PUSH
52131: EMPTY
52132: ST_TO_ADDR
// if mpTeamGame then
52133: LD_EXP 9
52137: IFFALSE 52191
// begin for i := 1 to Count ( mpTeams ) do
52139: LD_ADDR_VAR 0 1
52143: PUSH
52144: DOUBLE
52145: LD_INT 1
52147: DEC
52148: ST_TO_ADDR
52149: LD_EXP 8
52153: PPUSH
52154: CALL 5028 0 1
52158: PUSH
52159: FOR_TO
52160: IFFALSE 52187
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52162: LD_ADDR_EXP 41
52166: PUSH
52167: LD_EXP 41
52171: PPUSH
52172: LD_VAR 0 1
52176: PPUSH
52177: LD_INT 0
52179: PPUSH
52180: CALL_OW 1
52184: ST_TO_ADDR
52185: GO 52159
52187: POP
52188: POP
// end else
52189: GO 52234
// begin for i := 1 to 8 do
52191: LD_ADDR_VAR 0 1
52195: PUSH
52196: DOUBLE
52197: LD_INT 1
52199: DEC
52200: ST_TO_ADDR
52201: LD_INT 8
52203: PUSH
52204: FOR_TO
52205: IFFALSE 52232
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
52207: LD_ADDR_EXP 41
52211: PUSH
52212: LD_EXP 41
52216: PPUSH
52217: LD_VAR 0 1
52221: PPUSH
52222: LD_INT 0
52224: PPUSH
52225: CALL_OW 1
52229: ST_TO_ADDR
52230: GO 52204
52232: POP
52233: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
52234: LD_ADDR_VAR 0 3
52238: PUSH
52239: LD_INT 25
52241: PPUSH
52242: LD_INT 0
52244: PPUSH
52245: CALL_OW 517
52249: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52250: LD_ADDR_VAR 0 1
52254: PUSH
52255: DOUBLE
52256: LD_INT 1
52258: DEC
52259: ST_TO_ADDR
52260: LD_VAR 0 3
52264: PUSH
52265: LD_INT 1
52267: ARRAY
52268: PUSH
52269: FOR_TO
52270: IFFALSE 52337
// for j := 1 to 8 do
52272: LD_ADDR_VAR 0 2
52276: PUSH
52277: DOUBLE
52278: LD_INT 1
52280: DEC
52281: ST_TO_ADDR
52282: LD_INT 8
52284: PUSH
52285: FOR_TO
52286: IFFALSE 52333
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52288: LD_VAR 0 3
52292: PUSH
52293: LD_INT 1
52295: ARRAY
52296: PUSH
52297: LD_VAR 0 1
52301: ARRAY
52302: PPUSH
52303: LD_VAR 0 3
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PUSH
52312: LD_VAR 0 1
52316: ARRAY
52317: PPUSH
52318: LD_VAR 0 2
52322: PPUSH
52323: LD_INT 12
52325: NEG
52326: PPUSH
52327: CALL_OW 330
52331: GO 52285
52333: POP
52334: POP
52335: GO 52269
52337: POP
52338: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52339: LD_EXP 31
52343: PPUSH
52344: LD_INT 1
52346: PPUSH
52347: CALL_OW 424
// UpdateCounter ;
52351: CALL 52957 0 0
// repeat wait ( 0 0$1 ) ;
52355: LD_INT 35
52357: PPUSH
52358: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52362: LD_ADDR_VAR 0 3
52366: PUSH
52367: LD_EXP 31
52371: PPUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 57
52377: PUSH
52378: EMPTY
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 50
52387: PUSH
52388: EMPTY
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: PUSH
52394: LD_INT 30
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 30
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: PPUSH
52424: CALL_OW 70
52428: ST_TO_ADDR
// if not tmp then
52429: LD_VAR 0 3
52433: NOT
52434: IFFALSE 52438
// continue ;
52436: GO 52355
// AddPoints ( tmp ) ;
52438: LD_VAR 0 3
52442: PPUSH
52443: CALL 52635 0 1
// UpdateCounter ;
52447: CALL 52957 0 0
// until false ;
52451: LD_INT 0
52453: IFFALSE 52355
// end ;
52455: PPOPN 3
52457: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52458: LD_EXP 36
52462: PUSH
52463: LD_EXP 34
52467: AND
52468: IFFALSE 52632
52470: GO 52472
52472: DISABLE
52473: LD_INT 0
52475: PPUSH
52476: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52477: LD_ADDR_VAR 0 2
52481: PUSH
52482: LD_INT 25
52484: PPUSH
52485: LD_INT 0
52487: PPUSH
52488: CALL_OW 517
52492: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52493: LD_ADDR_VAR 0 1
52497: PUSH
52498: DOUBLE
52499: LD_INT 1
52501: DEC
52502: ST_TO_ADDR
52503: LD_VAR 0 2
52507: PUSH
52508: LD_INT 1
52510: ARRAY
52511: PUSH
52512: FOR_TO
52513: IFFALSE 52554
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52515: LD_VAR 0 2
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PUSH
52524: LD_VAR 0 1
52528: ARRAY
52529: PPUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_INT 2
52537: ARRAY
52538: PUSH
52539: LD_VAR 0 1
52543: ARRAY
52544: PPUSH
52545: LD_INT 125
52547: PPUSH
52548: CALL_OW 495
52552: GO 52512
52554: POP
52555: POP
// repeat wait ( mpEmissions ) ;
52556: LD_EXP 34
52560: PPUSH
52561: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52565: LD_ADDR_VAR 0 1
52569: PUSH
52570: DOUBLE
52571: LD_INT 1
52573: DEC
52574: ST_TO_ADDR
52575: LD_VAR 0 2
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: PUSH
52584: FOR_TO
52585: IFFALSE 52626
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52587: LD_VAR 0 2
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: PUSH
52596: LD_VAR 0 1
52600: ARRAY
52601: PPUSH
52602: LD_VAR 0 2
52606: PUSH
52607: LD_INT 2
52609: ARRAY
52610: PUSH
52611: LD_VAR 0 1
52615: ARRAY
52616: PPUSH
52617: LD_INT 15
52619: PPUSH
52620: CALL_OW 495
52624: GO 52584
52626: POP
52627: POP
// until false ;
52628: LD_INT 0
52630: IFFALSE 52556
// end ;
52632: PPOPN 2
52634: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52635: LD_INT 0
52637: PPUSH
52638: PPUSH
52639: PPUSH
52640: PPUSH
52641: PPUSH
// if mpTeamGame then
52642: LD_EXP 9
52646: IFFALSE 52843
// begin first := depots [ 1 ] ;
52648: LD_ADDR_VAR 0 4
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_INT 1
52660: ARRAY
52661: ST_TO_ADDR
// side := GetSide ( first ) ;
52662: LD_ADDR_VAR 0 6
52666: PUSH
52667: LD_VAR 0 4
52671: PPUSH
52672: CALL_OW 255
52676: ST_TO_ADDR
// for i := 1 to mpTeams do
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: DOUBLE
52683: LD_INT 1
52685: DEC
52686: ST_TO_ADDR
52687: LD_EXP 8
52691: PUSH
52692: FOR_TO
52693: IFFALSE 52727
// if side in mpTeams [ i ] then
52695: LD_VAR 0 6
52699: PUSH
52700: LD_EXP 8
52704: PUSH
52705: LD_VAR 0 3
52709: ARRAY
52710: IN
52711: IFFALSE 52725
// begin team := i ;
52713: LD_ADDR_VAR 0 5
52717: PUSH
52718: LD_VAR 0 3
52722: ST_TO_ADDR
// break ;
52723: GO 52727
// end ;
52725: GO 52692
52727: POP
52728: POP
// if not team then
52729: LD_VAR 0 5
52733: NOT
52734: IFFALSE 52738
// exit ;
52736: GO 52952
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52738: LD_EXP 31
52742: PPUSH
52743: LD_INT 81
52745: PUSH
52746: LD_VAR 0 6
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PPUSH
52755: CALL_OW 70
52759: IFFALSE 52763
// exit ;
52761: GO 52952
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52763: LD_ADDR_EXP 41
52767: PUSH
52768: LD_EXP 41
52772: PPUSH
52773: LD_VAR 0 5
52777: PPUSH
52778: LD_EXP 41
52782: PUSH
52783: LD_VAR 0 5
52787: ARRAY
52788: PUSH
52789: LD_INT 1
52791: PLUS
52792: PPUSH
52793: CALL_OW 1
52797: ST_TO_ADDR
// for i in mpTeams [ team ] do
52798: LD_ADDR_VAR 0 3
52802: PUSH
52803: LD_EXP 8
52807: PUSH
52808: LD_VAR 0 5
52812: ARRAY
52813: PUSH
52814: FOR_IN
52815: IFFALSE 52839
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52817: LD_VAR 0 3
52821: PPUSH
52822: LD_EXP 41
52826: PUSH
52827: LD_VAR 0 5
52831: ARRAY
52832: PPUSH
52833: CALL_OW 506
52837: GO 52814
52839: POP
52840: POP
// end else
52841: GO 52952
// begin first := depots [ 1 ] ;
52843: LD_ADDR_VAR 0 4
52847: PUSH
52848: LD_VAR 0 1
52852: PUSH
52853: LD_INT 1
52855: ARRAY
52856: ST_TO_ADDR
// side := GetSide ( first ) ;
52857: LD_ADDR_VAR 0 6
52861: PUSH
52862: LD_VAR 0 4
52866: PPUSH
52867: CALL_OW 255
52871: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52872: LD_EXP 31
52876: PPUSH
52877: LD_INT 81
52879: PUSH
52880: LD_VAR 0 6
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PPUSH
52889: CALL_OW 70
52893: IFFALSE 52897
// exit ;
52895: GO 52952
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52897: LD_ADDR_EXP 41
52901: PUSH
52902: LD_EXP 41
52906: PPUSH
52907: LD_VAR 0 6
52911: PPUSH
52912: LD_EXP 41
52916: PUSH
52917: LD_VAR 0 6
52921: ARRAY
52922: PUSH
52923: LD_INT 1
52925: PLUS
52926: PPUSH
52927: CALL_OW 1
52931: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52932: LD_VAR 0 6
52936: PPUSH
52937: LD_EXP 41
52941: PUSH
52942: LD_VAR 0 6
52946: ARRAY
52947: PPUSH
52948: CALL_OW 506
// end ; end ;
52952: LD_VAR 0 2
52956: RET
// function UpdateCounter ; var i ; begin
52957: LD_INT 0
52959: PPUSH
52960: PPUSH
// result := [ ] ;
52961: LD_ADDR_VAR 0 1
52965: PUSH
52966: EMPTY
52967: ST_TO_ADDR
// if mpTeamGame then
52968: LD_EXP 9
52972: IFFALSE 53039
// begin for i := 1 to mpTeams do
52974: LD_ADDR_VAR 0 2
52978: PUSH
52979: DOUBLE
52980: LD_INT 1
52982: DEC
52983: ST_TO_ADDR
52984: LD_EXP 8
52988: PUSH
52989: FOR_TO
52990: IFFALSE 53035
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52992: LD_ADDR_VAR 0 1
52996: PUSH
52997: LD_VAR 0 1
53001: PUSH
53002: LD_STRING #KingoftheHill-Team
53004: PUSH
53005: LD_VAR 0 2
53009: PUSH
53010: LD_EXP 41
53014: PUSH
53015: LD_VAR 0 2
53019: ARRAY
53020: PUSH
53021: LD_EXP 32
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: ADD
53032: ST_TO_ADDR
53033: GO 52989
53035: POP
53036: POP
// end else
53037: GO 53112
// begin for i := 1 to 8 do
53039: LD_ADDR_VAR 0 2
53043: PUSH
53044: DOUBLE
53045: LD_INT 1
53047: DEC
53048: ST_TO_ADDR
53049: LD_INT 8
53051: PUSH
53052: FOR_TO
53053: IFFALSE 53110
// if mpSidePositions [ i ] then
53055: LD_EXP 5
53059: PUSH
53060: LD_VAR 0 2
53064: ARRAY
53065: IFFALSE 53108
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
53067: LD_ADDR_VAR 0 1
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_STRING #KingoftheHill-Player
53079: PUSH
53080: LD_VAR 0 2
53084: PUSH
53085: LD_EXP 41
53089: PUSH
53090: LD_VAR 0 2
53094: ARRAY
53095: PUSH
53096: LD_EXP 32
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: ADD
53107: ST_TO_ADDR
53108: GO 53052
53110: POP
53111: POP
// end ; mpDisplayStrings := result ;
53112: LD_ADDR_EXP 35
53116: PUSH
53117: LD_VAR 0 1
53121: ST_TO_ADDR
// end ;
53122: LD_VAR 0 1
53126: RET
// export function HowMuchPointsKing ( side ) ; begin
53127: LD_INT 0
53129: PPUSH
// result := HowMuchPoints ( side ) ;
53130: LD_ADDR_VAR 0 2
53134: PUSH
53135: LD_VAR 0 1
53139: PPUSH
53140: CALL 53150 0 1
53144: ST_TO_ADDR
// end ;
53145: LD_VAR 0 2
53149: RET
// function HowMuchPoints ( side ) ; var i ; begin
53150: LD_INT 0
53152: PPUSH
53153: PPUSH
// if mpTeamGame then
53154: LD_EXP 9
53158: IFFALSE 53227
// begin for i := 1 to Count ( mpTeams ) do
53160: LD_ADDR_VAR 0 3
53164: PUSH
53165: DOUBLE
53166: LD_INT 1
53168: DEC
53169: ST_TO_ADDR
53170: LD_EXP 8
53174: PPUSH
53175: CALL 5028 0 1
53179: PUSH
53180: FOR_TO
53181: IFFALSE 53223
// begin if side in mpTeams [ i ] then
53183: LD_VAR 0 1
53187: PUSH
53188: LD_EXP 8
53192: PUSH
53193: LD_VAR 0 3
53197: ARRAY
53198: IN
53199: IFFALSE 53221
// begin result := mpKingPoints [ i ] ;
53201: LD_ADDR_VAR 0 2
53205: PUSH
53206: LD_EXP 41
53210: PUSH
53211: LD_VAR 0 3
53215: ARRAY
53216: ST_TO_ADDR
// exit ;
53217: POP
53218: POP
53219: GO 53243
// end ; end ;
53221: GO 53180
53223: POP
53224: POP
// end else
53225: GO 53243
// result := mpKingPoints [ side ] ;
53227: LD_ADDR_VAR 0 2
53231: PUSH
53232: LD_EXP 41
53236: PUSH
53237: LD_VAR 0 1
53241: ARRAY
53242: ST_TO_ADDR
// end ;
53243: LD_VAR 0 2
53247: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
53248: LD_EXP 36
53252: PUSH
53253: CALL 53575 0 0
53257: AND
53258: PUSH
53259: LD_OWVAR 4
53263: AND
53264: IFFALSE 53500
53266: GO 53268
53268: DISABLE
53269: LD_INT 0
53271: PPUSH
53272: PPUSH
// begin canWin := false ;
53273: LD_ADDR_VAR 0 2
53277: PUSH
53278: LD_INT 0
53280: ST_TO_ADDR
// if not HasPower ( your_side ) then
53281: LD_OWVAR 2
53285: PPUSH
53286: CALL 53615 0 1
53290: NOT
53291: IFFALSE 53302
// begin Multiplayer_Loose_Message ;
53293: CALL_OW 521
// enable ( mpLose ) ;
53297: LD_INT 102
53299: ENABLE_MARKED
// end else
53300: GO 53500
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53302: LD_ADDR_VAR 0 2
53306: PUSH
53307: LD_OWVAR 2
53311: PPUSH
53312: CALL 53150 0 1
53316: PUSH
53317: LD_EXP 32
53321: GREATEREQUAL
53322: PUSH
53323: LD_OWVAR 2
53327: PPUSH
53328: CALL 53615 0 1
53332: AND
53333: PUSH
53334: CALL 53503 0 0
53338: NOT
53339: OR
53340: ST_TO_ADDR
// for i := 1 to 8 do
53341: LD_ADDR_VAR 0 1
53345: PUSH
53346: DOUBLE
53347: LD_INT 1
53349: DEC
53350: ST_TO_ADDR
53351: LD_INT 8
53353: PUSH
53354: FOR_TO
53355: IFFALSE 53486
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53357: LD_EXP 5
53361: PUSH
53362: LD_VAR 0 1
53366: ARRAY
53367: PUSH
53368: LD_VAR 0 1
53372: PPUSH
53373: CALL_OW 108
53377: AND
53378: PUSH
53379: LD_VAR 0 1
53383: PUSH
53384: LD_OWVAR 2
53388: NONEQUAL
53389: AND
53390: IFFALSE 53484
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53392: LD_EXP 6
53396: PUSH
53397: LD_VAR 0 1
53401: ARRAY
53402: NOT
53403: PUSH
53404: LD_EXP 6
53408: PUSH
53409: LD_VAR 0 1
53413: ARRAY
53414: PUSH
53415: LD_EXP 6
53419: PUSH
53420: LD_OWVAR 2
53424: ARRAY
53425: NONEQUAL
53426: PUSH
53427: LD_OWVAR 2
53431: PPUSH
53432: LD_VAR 0 1
53436: PPUSH
53437: CALL_OW 81
53441: PUSH
53442: LD_INT 1
53444: NONEQUAL
53445: AND
53446: OR
53447: IFFALSE 53484
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53449: LD_VAR 0 1
53453: PPUSH
53454: CALL 53150 0 1
53458: PUSH
53459: LD_EXP 32
53463: GREATEREQUAL
53464: PUSH
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL 53615 0 1
53474: AND
53475: IFFALSE 53484
// begin enable ( mpLose ) ;
53477: LD_INT 102
53479: ENABLE_MARKED
// exit ;
53480: POP
53481: POP
53482: GO 53500
// end ;
53484: GO 53354
53486: POP
53487: POP
// if canWin then
53488: LD_VAR 0 2
53492: IFFALSE 53499
// enable ( mpWin ) else
53494: LD_INT 101
53496: ENABLE_MARKED
53497: GO 53500
// enable ;
53499: ENABLE
// end ; end ;
53500: PPOPN 2
53502: END
// function EnemiesInGame ; var i ; begin
53503: LD_INT 0
53505: PPUSH
53506: PPUSH
// result := false ;
53507: LD_ADDR_VAR 0 1
53511: PUSH
53512: LD_INT 0
53514: ST_TO_ADDR
// for i := 1 to 8 do
53515: LD_ADDR_VAR 0 2
53519: PUSH
53520: DOUBLE
53521: LD_INT 1
53523: DEC
53524: ST_TO_ADDR
53525: LD_INT 8
53527: PUSH
53528: FOR_TO
53529: IFFALSE 53568
// if i <> your_side and HasPower ( i ) then
53531: LD_VAR 0 2
53535: PUSH
53536: LD_OWVAR 2
53540: NONEQUAL
53541: PUSH
53542: LD_VAR 0 2
53546: PPUSH
53547: CALL 53615 0 1
53551: AND
53552: IFFALSE 53566
// begin result := true ;
53554: LD_ADDR_VAR 0 1
53558: PUSH
53559: LD_INT 1
53561: ST_TO_ADDR
// exit ;
53562: POP
53563: POP
53564: GO 53570
// end ;
53566: GO 53528
53568: POP
53569: POP
// end ;
53570: LD_VAR 0 1
53574: RET
// function CanWinLoose ; begin
53575: LD_INT 0
53577: PPUSH
// result := true ;
53578: LD_ADDR_VAR 0 1
53582: PUSH
53583: LD_INT 1
53585: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53586: CALL_OW 531
53590: PUSH
53591: CALL_OW 519
53595: PUSH
53596: LD_INT 1
53598: GREATER
53599: AND
53600: IFFALSE 53610
// result := false ;
53602: LD_ADDR_VAR 0 1
53606: PUSH
53607: LD_INT 0
53609: ST_TO_ADDR
// end ;
53610: LD_VAR 0 1
53614: RET
// function HasPower ( i ) ; begin
53615: LD_INT 0
53617: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53618: LD_ADDR_VAR 0 2
53622: PUSH
53623: LD_INT 22
53625: PUSH
53626: LD_VAR 0 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: LD_INT 21
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 33
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 33
53660: PUSH
53661: LD_INT 5
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PPUSH
53678: CALL_OW 69
53682: ST_TO_ADDR
// end ; end_of_file end_of_file
53683: LD_VAR 0 2
53687: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53688: LD_VAR 0 1
53692: PUSH
53693: LD_INT 200
53695: DOUBLE
53696: GREATEREQUAL
53697: IFFALSE 53705
53699: LD_INT 299
53701: DOUBLE
53702: LESSEQUAL
53703: IFTRUE 53707
53705: GO 53739
53707: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53708: LD_VAR 0 1
53712: PPUSH
53713: LD_VAR 0 2
53717: PPUSH
53718: LD_VAR 0 3
53722: PPUSH
53723: LD_VAR 0 4
53727: PPUSH
53728: LD_VAR 0 5
53732: PPUSH
53733: CALL 54436 0 5
53737: GO 53816
53739: LD_INT 300
53741: DOUBLE
53742: GREATEREQUAL
53743: IFFALSE 53751
53745: LD_INT 399
53747: DOUBLE
53748: LESSEQUAL
53749: IFTRUE 53753
53751: GO 53815
53753: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53754: LD_VAR 0 1
53758: PPUSH
53759: LD_VAR 0 2
53763: PPUSH
53764: LD_VAR 0 3
53768: PPUSH
53769: LD_VAR 0 4
53773: PPUSH
53774: LD_VAR 0 5
53778: PPUSH
53779: LD_VAR 0 6
53783: PPUSH
53784: LD_VAR 0 7
53788: PPUSH
53789: LD_VAR 0 8
53793: PPUSH
53794: LD_VAR 0 9
53798: PPUSH
53799: LD_VAR 0 10
53803: PPUSH
53804: LD_VAR 0 11
53808: PPUSH
53809: CALL 59183 0 11
53813: GO 53816
53815: POP
// end ;
53816: PPOPN 11
53818: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53819: LD_VAR 0 1
53823: PPUSH
53824: LD_VAR 0 2
53828: PPUSH
53829: LD_VAR 0 3
53833: PPUSH
53834: LD_VAR 0 4
53838: PPUSH
53839: LD_VAR 0 5
53843: PPUSH
53844: CALL 53901 0 5
// end ; end_of_file
53848: PPOPN 5
53850: END
// export function SOS_UnitDestroyed ( un ) ; begin
53851: LD_INT 0
53853: PPUSH
// ComRadiation ( un ) ;
53854: LD_VAR 0 1
53858: PPUSH
53859: CALL 54840 0 1
// end ;
53863: LD_VAR 0 2
53867: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53868: LD_INT 0
53870: PPUSH
// ComRadiation ( un ) ;
53871: LD_VAR 0 1
53875: PPUSH
53876: CALL 54840 0 1
// end ;
53880: LD_VAR 0 2
53884: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53885: LD_INT 0
53887: PPUSH
// end ;
53888: LD_VAR 0 4
53892: RET
// export function SOS_Command ( cmd ) ; begin
53893: LD_INT 0
53895: PPUSH
// end ;
53896: LD_VAR 0 2
53900: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53901: LD_INT 0
53903: PPUSH
// end ;
53904: LD_VAR 0 6
53908: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
53909: LD_INT 0
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
// if not vehicle or not factory then
53916: LD_VAR 0 1
53920: NOT
53921: PUSH
53922: LD_VAR 0 2
53926: NOT
53927: OR
53928: IFFALSE 53932
// exit ;
53930: GO 54431
// if not factoryWaypoints then
53932: LD_EXP 52
53936: NOT
53937: IFFALSE 53941
// exit ;
53939: GO 54431
// for i := 1 to Count ( factoryWaypoints ) do
53941: LD_ADDR_VAR 0 4
53945: PUSH
53946: DOUBLE
53947: LD_INT 1
53949: DEC
53950: ST_TO_ADDR
53951: LD_EXP 52
53955: PPUSH
53956: CALL 5028 0 1
53960: PUSH
53961: FOR_TO
53962: IFFALSE 54429
// if factoryWaypoints [ i ] [ 2 ] = factory then
53964: LD_EXP 52
53968: PUSH
53969: LD_VAR 0 4
53973: ARRAY
53974: PUSH
53975: LD_INT 2
53977: ARRAY
53978: PUSH
53979: LD_VAR 0 2
53983: EQUAL
53984: IFFALSE 54427
// begin if GetControl ( vehicle ) = control_manual then
53986: LD_VAR 0 1
53990: PPUSH
53991: CALL_OW 263
53995: PUSH
53996: LD_INT 1
53998: EQUAL
53999: IFFALSE 54310
// begin driver := IsDrivenBy ( vehicle ) ;
54001: LD_ADDR_VAR 0 6
54005: PUSH
54006: LD_VAR 0 1
54010: PPUSH
54011: CALL_OW 311
54015: ST_TO_ADDR
// tag := GetTag ( driver ) ;
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: LD_VAR 0 6
54025: PPUSH
54026: CALL_OW 110
54030: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
54031: LD_VAR 0 5
54035: PUSH
54036: LD_INT 501
54038: EQUAL
54039: PUSH
54040: LD_VAR 0 1
54044: PPUSH
54045: CALL_OW 110
54049: PUSH
54050: LD_INT 501
54052: EQUAL
54053: OR
54054: IFFALSE 54060
// exit ;
54056: POP
54057: POP
54058: GO 54431
// if not HasTask ( driver ) then
54060: LD_VAR 0 6
54064: PPUSH
54065: CALL_OW 314
54069: NOT
54070: IFFALSE 54308
// begin SetTag ( driver , tDriver ) ;
54072: LD_VAR 0 6
54076: PPUSH
54077: LD_INT 501
54079: PPUSH
54080: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
54084: LD_VAR 0 1
54088: PPUSH
54089: LD_INT 501
54091: PPUSH
54092: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54096: LD_ADDR_VAR 0 7
54100: PUSH
54101: LD_EXP 52
54105: PUSH
54106: LD_VAR 0 4
54110: ARRAY
54111: PUSH
54112: LD_INT 3
54114: ARRAY
54115: PPUSH
54116: LD_EXP 52
54120: PUSH
54121: LD_VAR 0 4
54125: ARRAY
54126: PUSH
54127: LD_INT 4
54129: ARRAY
54130: PPUSH
54131: CALL_OW 428
54135: ST_TO_ADDR
// if hex then
54136: LD_VAR 0 7
54140: IFFALSE 54158
// ComMoveUnit ( driver , hex ) else
54142: LD_VAR 0 6
54146: PPUSH
54147: LD_VAR 0 7
54151: PPUSH
54152: CALL_OW 112
54156: GO 54197
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54158: LD_VAR 0 6
54162: PPUSH
54163: LD_EXP 52
54167: PUSH
54168: LD_VAR 0 4
54172: ARRAY
54173: PUSH
54174: LD_INT 3
54176: ARRAY
54177: PPUSH
54178: LD_EXP 52
54182: PUSH
54183: LD_VAR 0 4
54187: ARRAY
54188: PUSH
54189: LD_INT 4
54191: ARRAY
54192: PPUSH
54193: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54197: LD_VAR 0 6
54201: PPUSH
54202: CALL_OW 181
// if Multiplayer then
54206: LD_OWVAR 4
54210: IFFALSE 54259
// begin repeat wait ( 10 ) ;
54212: LD_INT 10
54214: PPUSH
54215: CALL_OW 67
// until not IsInUnit ( driver ) ;
54219: LD_VAR 0 6
54223: PPUSH
54224: CALL_OW 310
54228: NOT
54229: IFFALSE 54212
// if not HasTask ( driver ) then
54231: LD_VAR 0 6
54235: PPUSH
54236: CALL_OW 314
54240: NOT
54241: IFFALSE 54257
// ComEnterUnit ( driver , factory ) ;
54243: LD_VAR 0 6
54247: PPUSH
54248: LD_VAR 0 2
54252: PPUSH
54253: CALL_OW 120
// end else
54257: GO 54273
// AddComEnterUnit ( driver , factory ) ;
54259: LD_VAR 0 6
54263: PPUSH
54264: LD_VAR 0 2
54268: PPUSH
54269: CALL_OW 180
// wait ( 0 0$1 ) ;
54273: LD_INT 35
54275: PPUSH
54276: CALL_OW 67
// SetTag ( driver , tag ) ;
54280: LD_VAR 0 6
54284: PPUSH
54285: LD_VAR 0 5
54289: PPUSH
54290: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
54294: LD_VAR 0 1
54298: PPUSH
54299: LD_INT 0
54301: PPUSH
54302: CALL_OW 109
// break ;
54306: GO 54429
// end ; end else
54308: GO 54427
// if GetControl ( vehicle ) = control_remote then
54310: LD_VAR 0 1
54314: PPUSH
54315: CALL_OW 263
54319: PUSH
54320: LD_INT 2
54322: EQUAL
54323: IFFALSE 54386
// begin wait ( 0 0$2 ) ;
54325: LD_INT 70
54327: PPUSH
54328: CALL_OW 67
// if Connect ( vehicle ) then
54332: LD_VAR 0 1
54336: PPUSH
54337: CALL 11234 0 1
54341: IFFALSE 54382
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54343: LD_VAR 0 1
54347: PPUSH
54348: LD_EXP 52
54352: PUSH
54353: LD_VAR 0 4
54357: ARRAY
54358: PUSH
54359: LD_INT 3
54361: ARRAY
54362: PPUSH
54363: LD_EXP 52
54367: PUSH
54368: LD_VAR 0 4
54372: ARRAY
54373: PUSH
54374: LD_INT 4
54376: ARRAY
54377: PPUSH
54378: CALL_OW 171
// break ;
54382: GO 54429
// end else
54384: GO 54427
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54386: LD_VAR 0 1
54390: PPUSH
54391: LD_EXP 52
54395: PUSH
54396: LD_VAR 0 4
54400: ARRAY
54401: PUSH
54402: LD_INT 3
54404: ARRAY
54405: PPUSH
54406: LD_EXP 52
54410: PUSH
54411: LD_VAR 0 4
54415: ARRAY
54416: PUSH
54417: LD_INT 4
54419: ARRAY
54420: PPUSH
54421: CALL_OW 171
// break ;
54425: GO 54429
// end ; end ;
54427: GO 53961
54429: POP
54430: POP
// end ;
54431: LD_VAR 0 3
54435: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54436: LD_INT 0
54438: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54439: LD_VAR 0 1
54443: PUSH
54444: LD_INT 250
54446: EQUAL
54447: PUSH
54448: LD_VAR 0 2
54452: PPUSH
54453: CALL_OW 264
54457: PUSH
54458: LD_INT 81
54460: EQUAL
54461: AND
54462: IFFALSE 54483
// MinerPlaceMine ( unit , x , y ) ;
54464: LD_VAR 0 2
54468: PPUSH
54469: LD_VAR 0 4
54473: PPUSH
54474: LD_VAR 0 5
54478: PPUSH
54479: CALL 57575 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54483: LD_VAR 0 1
54487: PUSH
54488: LD_INT 251
54490: EQUAL
54491: PUSH
54492: LD_VAR 0 2
54496: PPUSH
54497: CALL_OW 264
54501: PUSH
54502: LD_INT 81
54504: EQUAL
54505: AND
54506: IFFALSE 54527
// MinerDetonateMine ( unit , x , y ) ;
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_VAR 0 4
54517: PPUSH
54518: LD_VAR 0 5
54522: PPUSH
54523: CALL 57850 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54527: LD_VAR 0 1
54531: PUSH
54532: LD_INT 252
54534: EQUAL
54535: PUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 264
54545: PUSH
54546: LD_INT 81
54548: EQUAL
54549: AND
54550: IFFALSE 54571
// MinerCreateMinefield ( unit , x , y ) ;
54552: LD_VAR 0 2
54556: PPUSH
54557: LD_VAR 0 4
54561: PPUSH
54562: LD_VAR 0 5
54566: PPUSH
54567: CALL 58267 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54571: LD_VAR 0 1
54575: PUSH
54576: LD_INT 253
54578: EQUAL
54579: PUSH
54580: LD_VAR 0 2
54584: PPUSH
54585: CALL_OW 257
54589: PUSH
54590: LD_INT 5
54592: EQUAL
54593: AND
54594: IFFALSE 54615
// ComBinocular ( unit , x , y ) ;
54596: LD_VAR 0 2
54600: PPUSH
54601: LD_VAR 0 4
54605: PPUSH
54606: LD_VAR 0 5
54610: PPUSH
54611: CALL 58636 0 3
// if selectedUnit then
54615: LD_VAR 0 3
54619: IFFALSE 54675
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54621: LD_VAR 0 1
54625: PUSH
54626: LD_INT 254
54628: EQUAL
54629: PUSH
54630: LD_VAR 0 2
54634: PPUSH
54635: CALL_OW 264
54639: PUSH
54640: LD_INT 99
54642: EQUAL
54643: AND
54644: PUSH
54645: LD_VAR 0 3
54649: PPUSH
54650: CALL_OW 263
54654: PUSH
54655: LD_INT 3
54657: EQUAL
54658: AND
54659: IFFALSE 54675
// HackDestroyVehicle ( unit , selectedUnit ) ;
54661: LD_VAR 0 2
54665: PPUSH
54666: LD_VAR 0 3
54670: PPUSH
54671: CALL 56939 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54675: LD_VAR 0 1
54679: PUSH
54680: LD_INT 255
54682: EQUAL
54683: PUSH
54684: LD_VAR 0 2
54688: PPUSH
54689: CALL_OW 264
54693: PUSH
54694: LD_INT 14
54696: PUSH
54697: LD_INT 53
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: IN
54704: AND
54705: PUSH
54706: LD_VAR 0 4
54710: PPUSH
54711: LD_VAR 0 5
54715: PPUSH
54716: CALL_OW 488
54720: AND
54721: IFFALSE 54745
// CutTreeXYR ( unit , x , y , 12 ) ;
54723: LD_VAR 0 2
54727: PPUSH
54728: LD_VAR 0 4
54732: PPUSH
54733: LD_VAR 0 5
54737: PPUSH
54738: LD_INT 12
54740: PPUSH
54741: CALL 54936 0 4
// if cmd = 256 then
54745: LD_VAR 0 1
54749: PUSH
54750: LD_INT 256
54752: EQUAL
54753: IFFALSE 54774
// SetFactoryWaypoint ( unit , x , y ) ;
54755: LD_VAR 0 2
54759: PPUSH
54760: LD_VAR 0 4
54764: PPUSH
54765: LD_VAR 0 5
54769: PPUSH
54770: CALL 59191 0 3
// if cmd = 257 then
54774: LD_VAR 0 1
54778: PUSH
54779: LD_INT 257
54781: EQUAL
54782: IFFALSE 54803
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54784: LD_VAR 0 2
54788: PPUSH
54789: LD_VAR 0 4
54793: PPUSH
54794: LD_VAR 0 5
54798: PPUSH
54799: CALL 59681 0 3
// if cmd = 258 then
54803: LD_VAR 0 1
54807: PUSH
54808: LD_INT 258
54810: EQUAL
54811: IFFALSE 54835
// BurnTreeXYR ( unit , x , y , 8 ) ;
54813: LD_VAR 0 2
54817: PPUSH
54818: LD_VAR 0 4
54822: PPUSH
54823: LD_VAR 0 5
54827: PPUSH
54828: LD_INT 8
54830: PPUSH
54831: CALL 55330 0 4
// end ;
54835: LD_VAR 0 6
54839: RET
// export function ComRadiation ( un ) ; var eff ; begin
54840: LD_INT 0
54842: PPUSH
54843: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54844: LD_VAR 0 1
54848: PPUSH
54849: CALL_OW 264
54853: PUSH
54854: LD_INT 91
54856: NONEQUAL
54857: IFFALSE 54861
// exit ;
54859: GO 54931
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54861: LD_INT 68
54863: PPUSH
54864: LD_VAR 0 1
54868: PPUSH
54869: CALL_OW 255
54873: PPUSH
54874: CALL_OW 321
54878: PUSH
54879: LD_INT 2
54881: EQUAL
54882: IFFALSE 54894
// eff := 70 else
54884: LD_ADDR_VAR 0 3
54888: PUSH
54889: LD_INT 70
54891: ST_TO_ADDR
54892: GO 54902
// eff := 30 ;
54894: LD_ADDR_VAR 0 3
54898: PUSH
54899: LD_INT 30
54901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54902: LD_VAR 0 1
54906: PPUSH
54907: CALL_OW 250
54911: PPUSH
54912: LD_VAR 0 1
54916: PPUSH
54917: CALL_OW 251
54921: PPUSH
54922: LD_VAR 0 3
54926: PPUSH
54927: CALL_OW 495
// end ;
54931: LD_VAR 0 2
54935: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54936: LD_INT 0
54938: PPUSH
54939: PPUSH
54940: PPUSH
54941: PPUSH
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
54946: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54947: LD_VAR 0 1
54951: PPUSH
54952: CALL_OW 302
54956: NOT
54957: PUSH
54958: LD_VAR 0 2
54962: PPUSH
54963: LD_VAR 0 3
54967: PPUSH
54968: CALL_OW 488
54972: NOT
54973: OR
54974: PUSH
54975: LD_VAR 0 4
54979: NOT
54980: OR
54981: IFFALSE 54985
// exit ;
54983: GO 55325
// list := [ ] ;
54985: LD_ADDR_VAR 0 13
54989: PUSH
54990: EMPTY
54991: ST_TO_ADDR
// if x - r < 0 then
54992: LD_VAR 0 2
54996: PUSH
54997: LD_VAR 0 4
55001: MINUS
55002: PUSH
55003: LD_INT 0
55005: LESS
55006: IFFALSE 55018
// min_x := 0 else
55008: LD_ADDR_VAR 0 7
55012: PUSH
55013: LD_INT 0
55015: ST_TO_ADDR
55016: GO 55034
// min_x := x - r ;
55018: LD_ADDR_VAR 0 7
55022: PUSH
55023: LD_VAR 0 2
55027: PUSH
55028: LD_VAR 0 4
55032: MINUS
55033: ST_TO_ADDR
// if y - r < 0 then
55034: LD_VAR 0 3
55038: PUSH
55039: LD_VAR 0 4
55043: MINUS
55044: PUSH
55045: LD_INT 0
55047: LESS
55048: IFFALSE 55060
// min_y := 0 else
55050: LD_ADDR_VAR 0 8
55054: PUSH
55055: LD_INT 0
55057: ST_TO_ADDR
55058: GO 55076
// min_y := y - r ;
55060: LD_ADDR_VAR 0 8
55064: PUSH
55065: LD_VAR 0 3
55069: PUSH
55070: LD_VAR 0 4
55074: MINUS
55075: ST_TO_ADDR
// max_x := x + r ;
55076: LD_ADDR_VAR 0 9
55080: PUSH
55081: LD_VAR 0 2
55085: PUSH
55086: LD_VAR 0 4
55090: PLUS
55091: ST_TO_ADDR
// max_y := y + r ;
55092: LD_ADDR_VAR 0 10
55096: PUSH
55097: LD_VAR 0 3
55101: PUSH
55102: LD_VAR 0 4
55106: PLUS
55107: ST_TO_ADDR
// for _x = min_x to max_x do
55108: LD_ADDR_VAR 0 11
55112: PUSH
55113: DOUBLE
55114: LD_VAR 0 7
55118: DEC
55119: ST_TO_ADDR
55120: LD_VAR 0 9
55124: PUSH
55125: FOR_TO
55126: IFFALSE 55243
// for _y = min_y to max_y do
55128: LD_ADDR_VAR 0 12
55132: PUSH
55133: DOUBLE
55134: LD_VAR 0 8
55138: DEC
55139: ST_TO_ADDR
55140: LD_VAR 0 10
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55239
// begin if not ValidHex ( _x , _y ) then
55148: LD_VAR 0 11
55152: PPUSH
55153: LD_VAR 0 12
55157: PPUSH
55158: CALL_OW 488
55162: NOT
55163: IFFALSE 55167
// continue ;
55165: GO 55145
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55167: LD_VAR 0 11
55171: PPUSH
55172: LD_VAR 0 12
55176: PPUSH
55177: CALL_OW 351
55181: PUSH
55182: LD_VAR 0 11
55186: PPUSH
55187: LD_VAR 0 12
55191: PPUSH
55192: CALL_OW 554
55196: AND
55197: IFFALSE 55237
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55199: LD_ADDR_VAR 0 13
55203: PUSH
55204: LD_VAR 0 13
55208: PPUSH
55209: LD_VAR 0 13
55213: PUSH
55214: LD_INT 1
55216: PLUS
55217: PPUSH
55218: LD_VAR 0 11
55222: PUSH
55223: LD_VAR 0 12
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PPUSH
55232: CALL_OW 2
55236: ST_TO_ADDR
// end ;
55237: GO 55145
55239: POP
55240: POP
55241: GO 55125
55243: POP
55244: POP
// if not list then
55245: LD_VAR 0 13
55249: NOT
55250: IFFALSE 55254
// exit ;
55252: GO 55325
// for i in list do
55254: LD_ADDR_VAR 0 6
55258: PUSH
55259: LD_VAR 0 13
55263: PUSH
55264: FOR_IN
55265: IFFALSE 55323
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55267: LD_VAR 0 1
55271: PPUSH
55272: LD_STRING M
55274: PUSH
55275: LD_VAR 0 6
55279: PUSH
55280: LD_INT 1
55282: ARRAY
55283: PUSH
55284: LD_VAR 0 6
55288: PUSH
55289: LD_INT 2
55291: ARRAY
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: PPUSH
55317: CALL_OW 447
55321: GO 55264
55323: POP
55324: POP
// end ;
55325: LD_VAR 0 5
55329: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55330: LD_INT 0
55332: PPUSH
55333: PPUSH
55334: PPUSH
55335: PPUSH
55336: PPUSH
55337: PPUSH
55338: PPUSH
55339: PPUSH
55340: PPUSH
55341: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55342: LD_VAR 0 1
55346: PPUSH
55347: CALL_OW 302
55351: NOT
55352: PUSH
55353: LD_VAR 0 2
55357: PPUSH
55358: LD_VAR 0 3
55362: PPUSH
55363: CALL_OW 488
55367: NOT
55368: OR
55369: PUSH
55370: LD_VAR 0 4
55374: NOT
55375: OR
55376: IFFALSE 55380
// exit ;
55378: GO 55893
// list := [ ] ;
55380: LD_ADDR_VAR 0 13
55384: PUSH
55385: EMPTY
55386: ST_TO_ADDR
// if x - r < 0 then
55387: LD_VAR 0 2
55391: PUSH
55392: LD_VAR 0 4
55396: MINUS
55397: PUSH
55398: LD_INT 0
55400: LESS
55401: IFFALSE 55413
// min_x := 0 else
55403: LD_ADDR_VAR 0 7
55407: PUSH
55408: LD_INT 0
55410: ST_TO_ADDR
55411: GO 55429
// min_x := x - r ;
55413: LD_ADDR_VAR 0 7
55417: PUSH
55418: LD_VAR 0 2
55422: PUSH
55423: LD_VAR 0 4
55427: MINUS
55428: ST_TO_ADDR
// if y - r < 0 then
55429: LD_VAR 0 3
55433: PUSH
55434: LD_VAR 0 4
55438: MINUS
55439: PUSH
55440: LD_INT 0
55442: LESS
55443: IFFALSE 55455
// min_y := 0 else
55445: LD_ADDR_VAR 0 8
55449: PUSH
55450: LD_INT 0
55452: ST_TO_ADDR
55453: GO 55471
// min_y := y - r ;
55455: LD_ADDR_VAR 0 8
55459: PUSH
55460: LD_VAR 0 3
55464: PUSH
55465: LD_VAR 0 4
55469: MINUS
55470: ST_TO_ADDR
// max_x := x + r ;
55471: LD_ADDR_VAR 0 9
55475: PUSH
55476: LD_VAR 0 2
55480: PUSH
55481: LD_VAR 0 4
55485: PLUS
55486: ST_TO_ADDR
// max_y := y + r ;
55487: LD_ADDR_VAR 0 10
55491: PUSH
55492: LD_VAR 0 3
55496: PUSH
55497: LD_VAR 0 4
55501: PLUS
55502: ST_TO_ADDR
// for _x = min_x to max_x do
55503: LD_ADDR_VAR 0 11
55507: PUSH
55508: DOUBLE
55509: LD_VAR 0 7
55513: DEC
55514: ST_TO_ADDR
55515: LD_VAR 0 9
55519: PUSH
55520: FOR_TO
55521: IFFALSE 55638
// for _y = min_y to max_y do
55523: LD_ADDR_VAR 0 12
55527: PUSH
55528: DOUBLE
55529: LD_VAR 0 8
55533: DEC
55534: ST_TO_ADDR
55535: LD_VAR 0 10
55539: PUSH
55540: FOR_TO
55541: IFFALSE 55634
// begin if not ValidHex ( _x , _y ) then
55543: LD_VAR 0 11
55547: PPUSH
55548: LD_VAR 0 12
55552: PPUSH
55553: CALL_OW 488
55557: NOT
55558: IFFALSE 55562
// continue ;
55560: GO 55540
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55562: LD_VAR 0 11
55566: PPUSH
55567: LD_VAR 0 12
55571: PPUSH
55572: CALL_OW 351
55576: PUSH
55577: LD_VAR 0 11
55581: PPUSH
55582: LD_VAR 0 12
55586: PPUSH
55587: CALL_OW 554
55591: AND
55592: IFFALSE 55632
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55594: LD_ADDR_VAR 0 13
55598: PUSH
55599: LD_VAR 0 13
55603: PPUSH
55604: LD_VAR 0 13
55608: PUSH
55609: LD_INT 1
55611: PLUS
55612: PPUSH
55613: LD_VAR 0 11
55617: PUSH
55618: LD_VAR 0 12
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PPUSH
55627: CALL_OW 2
55631: ST_TO_ADDR
// end ;
55632: GO 55540
55634: POP
55635: POP
55636: GO 55520
55638: POP
55639: POP
// if not list then
55640: LD_VAR 0 13
55644: NOT
55645: IFFALSE 55649
// exit ;
55647: GO 55893
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55649: LD_ADDR_VAR 0 13
55653: PUSH
55654: LD_VAR 0 1
55658: PPUSH
55659: LD_VAR 0 13
55663: PPUSH
55664: LD_INT 1
55666: PPUSH
55667: LD_INT 1
55669: PPUSH
55670: CALL 8376 0 4
55674: ST_TO_ADDR
// ComStop ( flame ) ;
55675: LD_VAR 0 1
55679: PPUSH
55680: CALL_OW 141
// for i in list do
55684: LD_ADDR_VAR 0 6
55688: PUSH
55689: LD_VAR 0 13
55693: PUSH
55694: FOR_IN
55695: IFFALSE 55726
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55697: LD_VAR 0 1
55701: PPUSH
55702: LD_VAR 0 6
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PPUSH
55711: LD_VAR 0 6
55715: PUSH
55716: LD_INT 2
55718: ARRAY
55719: PPUSH
55720: CALL_OW 176
55724: GO 55694
55726: POP
55727: POP
// repeat wait ( 0 0$1 ) ;
55728: LD_INT 35
55730: PPUSH
55731: CALL_OW 67
// task := GetTaskList ( flame ) ;
55735: LD_ADDR_VAR 0 14
55739: PUSH
55740: LD_VAR 0 1
55744: PPUSH
55745: CALL_OW 437
55749: ST_TO_ADDR
// if not task then
55750: LD_VAR 0 14
55754: NOT
55755: IFFALSE 55759
// exit ;
55757: GO 55893
// if task [ 1 ] [ 1 ] <> | then
55759: LD_VAR 0 14
55763: PUSH
55764: LD_INT 1
55766: ARRAY
55767: PUSH
55768: LD_INT 1
55770: ARRAY
55771: PUSH
55772: LD_STRING |
55774: NONEQUAL
55775: IFFALSE 55779
// exit ;
55777: GO 55893
// _x := task [ 1 ] [ 2 ] ;
55779: LD_ADDR_VAR 0 11
55783: PUSH
55784: LD_VAR 0 14
55788: PUSH
55789: LD_INT 1
55791: ARRAY
55792: PUSH
55793: LD_INT 2
55795: ARRAY
55796: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55797: LD_ADDR_VAR 0 12
55801: PUSH
55802: LD_VAR 0 14
55806: PUSH
55807: LD_INT 1
55809: ARRAY
55810: PUSH
55811: LD_INT 3
55813: ARRAY
55814: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55815: LD_VAR 0 11
55819: PPUSH
55820: LD_VAR 0 12
55824: PPUSH
55825: CALL_OW 351
55829: NOT
55830: PUSH
55831: LD_VAR 0 11
55835: PPUSH
55836: LD_VAR 0 12
55840: PPUSH
55841: CALL_OW 554
55845: NOT
55846: OR
55847: IFFALSE 55881
// begin task := Delete ( task , 1 ) ;
55849: LD_ADDR_VAR 0 14
55853: PUSH
55854: LD_VAR 0 14
55858: PPUSH
55859: LD_INT 1
55861: PPUSH
55862: CALL_OW 3
55866: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55867: LD_VAR 0 1
55871: PPUSH
55872: LD_VAR 0 14
55876: PPUSH
55877: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 314
55890: NOT
55891: IFFALSE 55728
// end ;
55893: LD_VAR 0 5
55897: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55898: LD_EXP 42
55902: NOT
55903: IFFALSE 55953
55905: GO 55907
55907: DISABLE
// begin initHack := true ;
55908: LD_ADDR_EXP 42
55912: PUSH
55913: LD_INT 1
55915: ST_TO_ADDR
// hackTanks := [ ] ;
55916: LD_ADDR_EXP 43
55920: PUSH
55921: EMPTY
55922: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55923: LD_ADDR_EXP 44
55927: PUSH
55928: EMPTY
55929: ST_TO_ADDR
// hackLimit := 3 ;
55930: LD_ADDR_EXP 45
55934: PUSH
55935: LD_INT 3
55937: ST_TO_ADDR
// hackDist := 12 ;
55938: LD_ADDR_EXP 46
55942: PUSH
55943: LD_INT 12
55945: ST_TO_ADDR
// hackCounter := [ ] ;
55946: LD_ADDR_EXP 47
55950: PUSH
55951: EMPTY
55952: ST_TO_ADDR
// end ;
55953: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55954: LD_EXP 42
55958: PUSH
55959: LD_INT 34
55961: PUSH
55962: LD_INT 99
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PPUSH
55969: CALL_OW 69
55973: AND
55974: IFFALSE 56227
55976: GO 55978
55978: DISABLE
55979: LD_INT 0
55981: PPUSH
55982: PPUSH
// begin enable ;
55983: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55984: LD_ADDR_VAR 0 1
55988: PUSH
55989: LD_INT 34
55991: PUSH
55992: LD_INT 99
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PPUSH
55999: CALL_OW 69
56003: PUSH
56004: FOR_IN
56005: IFFALSE 56225
// begin if not i in hackTanks then
56007: LD_VAR 0 1
56011: PUSH
56012: LD_EXP 43
56016: IN
56017: NOT
56018: IFFALSE 56101
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56020: LD_ADDR_EXP 43
56024: PUSH
56025: LD_EXP 43
56029: PPUSH
56030: LD_EXP 43
56034: PUSH
56035: LD_INT 1
56037: PLUS
56038: PPUSH
56039: LD_VAR 0 1
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56049: LD_ADDR_EXP 44
56053: PUSH
56054: LD_EXP 44
56058: PPUSH
56059: LD_EXP 44
56063: PUSH
56064: LD_INT 1
56066: PLUS
56067: PPUSH
56068: EMPTY
56069: PPUSH
56070: CALL_OW 1
56074: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56075: LD_ADDR_EXP 47
56079: PUSH
56080: LD_EXP 47
56084: PPUSH
56085: LD_EXP 47
56089: PUSH
56090: LD_INT 1
56092: PLUS
56093: PPUSH
56094: EMPTY
56095: PPUSH
56096: CALL_OW 1
56100: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56101: LD_VAR 0 1
56105: PPUSH
56106: CALL_OW 302
56110: NOT
56111: IFFALSE 56124
// begin HackUnlinkAll ( i ) ;
56113: LD_VAR 0 1
56117: PPUSH
56118: CALL 56230 0 1
// continue ;
56122: GO 56004
// end ; HackCheckCapturedStatus ( i ) ;
56124: LD_VAR 0 1
56128: PPUSH
56129: CALL 56673 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56133: LD_ADDR_VAR 0 2
56137: PUSH
56138: LD_INT 81
56140: PUSH
56141: LD_VAR 0 1
56145: PPUSH
56146: CALL_OW 255
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 33
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 91
56167: PUSH
56168: LD_VAR 0 1
56172: PUSH
56173: LD_EXP 46
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 50
56185: PUSH
56186: EMPTY
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: PPUSH
56195: CALL_OW 69
56199: ST_TO_ADDR
// if not tmp then
56200: LD_VAR 0 2
56204: NOT
56205: IFFALSE 56209
// continue ;
56207: GO 56004
// HackLink ( i , tmp ) ;
56209: LD_VAR 0 1
56213: PPUSH
56214: LD_VAR 0 2
56218: PPUSH
56219: CALL 56366 0 2
// end ;
56223: GO 56004
56225: POP
56226: POP
// end ;
56227: PPOPN 2
56229: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56230: LD_INT 0
56232: PPUSH
56233: PPUSH
56234: PPUSH
// if not hack in hackTanks then
56235: LD_VAR 0 1
56239: PUSH
56240: LD_EXP 43
56244: IN
56245: NOT
56246: IFFALSE 56250
// exit ;
56248: GO 56361
// index := GetElementIndex ( hackTanks , hack ) ;
56250: LD_ADDR_VAR 0 4
56254: PUSH
56255: LD_EXP 43
56259: PPUSH
56260: LD_VAR 0 1
56264: PPUSH
56265: CALL 7673 0 2
56269: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56270: LD_EXP 44
56274: PUSH
56275: LD_VAR 0 4
56279: ARRAY
56280: IFFALSE 56361
// begin for i in hackTanksCaptured [ index ] do
56282: LD_ADDR_VAR 0 3
56286: PUSH
56287: LD_EXP 44
56291: PUSH
56292: LD_VAR 0 4
56296: ARRAY
56297: PUSH
56298: FOR_IN
56299: IFFALSE 56325
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56301: LD_VAR 0 3
56305: PUSH
56306: LD_INT 1
56308: ARRAY
56309: PPUSH
56310: LD_VAR 0 3
56314: PUSH
56315: LD_INT 2
56317: ARRAY
56318: PPUSH
56319: CALL_OW 235
56323: GO 56298
56325: POP
56326: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56327: LD_ADDR_EXP 44
56331: PUSH
56332: LD_EXP 44
56336: PPUSH
56337: LD_VAR 0 4
56341: PPUSH
56342: EMPTY
56343: PPUSH
56344: CALL_OW 1
56348: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56349: LD_VAR 0 1
56353: PPUSH
56354: LD_INT 0
56356: PPUSH
56357: CALL_OW 505
// end ; end ;
56361: LD_VAR 0 2
56365: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56366: LD_INT 0
56368: PPUSH
56369: PPUSH
56370: PPUSH
// if not hack in hackTanks or not vehicles then
56371: LD_VAR 0 1
56375: PUSH
56376: LD_EXP 43
56380: IN
56381: NOT
56382: PUSH
56383: LD_VAR 0 2
56387: NOT
56388: OR
56389: IFFALSE 56393
// exit ;
56391: GO 56668
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56393: LD_ADDR_VAR 0 2
56397: PUSH
56398: LD_VAR 0 1
56402: PPUSH
56403: LD_VAR 0 2
56407: PPUSH
56408: LD_INT 1
56410: PPUSH
56411: LD_INT 1
56413: PPUSH
56414: CALL 8323 0 4
56418: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56419: LD_ADDR_VAR 0 5
56423: PUSH
56424: LD_EXP 43
56428: PPUSH
56429: LD_VAR 0 1
56433: PPUSH
56434: CALL 7673 0 2
56438: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56439: LD_EXP 44
56443: PUSH
56444: LD_VAR 0 5
56448: ARRAY
56449: PUSH
56450: LD_EXP 45
56454: LESS
56455: IFFALSE 56644
// begin for i := 1 to vehicles do
56457: LD_ADDR_VAR 0 4
56461: PUSH
56462: DOUBLE
56463: LD_INT 1
56465: DEC
56466: ST_TO_ADDR
56467: LD_VAR 0 2
56471: PUSH
56472: FOR_TO
56473: IFFALSE 56642
// begin if hackTanksCaptured [ index ] = hackLimit then
56475: LD_EXP 44
56479: PUSH
56480: LD_VAR 0 5
56484: ARRAY
56485: PUSH
56486: LD_EXP 45
56490: EQUAL
56491: IFFALSE 56495
// break ;
56493: GO 56642
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56495: LD_ADDR_EXP 47
56499: PUSH
56500: LD_EXP 47
56504: PPUSH
56505: LD_VAR 0 5
56509: PPUSH
56510: LD_EXP 47
56514: PUSH
56515: LD_VAR 0 5
56519: ARRAY
56520: PUSH
56521: LD_INT 1
56523: PLUS
56524: PPUSH
56525: CALL_OW 1
56529: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56530: LD_ADDR_EXP 44
56534: PUSH
56535: LD_EXP 44
56539: PPUSH
56540: LD_VAR 0 5
56544: PUSH
56545: LD_EXP 44
56549: PUSH
56550: LD_VAR 0 5
56554: ARRAY
56555: PUSH
56556: LD_INT 1
56558: PLUS
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PPUSH
56564: LD_VAR 0 2
56568: PUSH
56569: LD_VAR 0 4
56573: ARRAY
56574: PUSH
56575: LD_VAR 0 2
56579: PUSH
56580: LD_VAR 0 4
56584: ARRAY
56585: PPUSH
56586: CALL_OW 255
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PPUSH
56595: CALL 7888 0 3
56599: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56600: LD_VAR 0 2
56604: PUSH
56605: LD_VAR 0 4
56609: ARRAY
56610: PPUSH
56611: LD_VAR 0 1
56615: PPUSH
56616: CALL_OW 255
56620: PPUSH
56621: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56625: LD_VAR 0 2
56629: PUSH
56630: LD_VAR 0 4
56634: ARRAY
56635: PPUSH
56636: CALL_OW 141
// end ;
56640: GO 56472
56642: POP
56643: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56644: LD_VAR 0 1
56648: PPUSH
56649: LD_EXP 44
56653: PUSH
56654: LD_VAR 0 5
56658: ARRAY
56659: PUSH
56660: LD_INT 0
56662: PLUS
56663: PPUSH
56664: CALL_OW 505
// end ;
56668: LD_VAR 0 3
56672: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56673: LD_INT 0
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
// if not hack in hackTanks then
56679: LD_VAR 0 1
56683: PUSH
56684: LD_EXP 43
56688: IN
56689: NOT
56690: IFFALSE 56694
// exit ;
56692: GO 56934
// index := GetElementIndex ( hackTanks , hack ) ;
56694: LD_ADDR_VAR 0 4
56698: PUSH
56699: LD_EXP 43
56703: PPUSH
56704: LD_VAR 0 1
56708: PPUSH
56709: CALL 7673 0 2
56713: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56714: LD_ADDR_VAR 0 3
56718: PUSH
56719: DOUBLE
56720: LD_EXP 44
56724: PUSH
56725: LD_VAR 0 4
56729: ARRAY
56730: INC
56731: ST_TO_ADDR
56732: LD_INT 1
56734: PUSH
56735: FOR_DOWNTO
56736: IFFALSE 56908
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56738: LD_ADDR_VAR 0 5
56742: PUSH
56743: LD_EXP 44
56747: PUSH
56748: LD_VAR 0 4
56752: ARRAY
56753: PUSH
56754: LD_VAR 0 3
56758: ARRAY
56759: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56760: LD_VAR 0 5
56764: PUSH
56765: LD_INT 1
56767: ARRAY
56768: PPUSH
56769: CALL_OW 302
56773: NOT
56774: PUSH
56775: LD_VAR 0 5
56779: PUSH
56780: LD_INT 1
56782: ARRAY
56783: PPUSH
56784: CALL_OW 255
56788: PUSH
56789: LD_VAR 0 1
56793: PPUSH
56794: CALL_OW 255
56798: NONEQUAL
56799: OR
56800: IFFALSE 56906
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56802: LD_VAR 0 5
56806: PUSH
56807: LD_INT 1
56809: ARRAY
56810: PPUSH
56811: CALL_OW 305
56815: PUSH
56816: LD_VAR 0 5
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PPUSH
56825: CALL_OW 255
56829: PUSH
56830: LD_VAR 0 1
56834: PPUSH
56835: CALL_OW 255
56839: EQUAL
56840: AND
56841: IFFALSE 56865
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56843: LD_VAR 0 5
56847: PUSH
56848: LD_INT 1
56850: ARRAY
56851: PPUSH
56852: LD_VAR 0 5
56856: PUSH
56857: LD_INT 2
56859: ARRAY
56860: PPUSH
56861: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56865: LD_ADDR_EXP 44
56869: PUSH
56870: LD_EXP 44
56874: PPUSH
56875: LD_VAR 0 4
56879: PPUSH
56880: LD_EXP 44
56884: PUSH
56885: LD_VAR 0 4
56889: ARRAY
56890: PPUSH
56891: LD_VAR 0 3
56895: PPUSH
56896: CALL_OW 3
56900: PPUSH
56901: CALL_OW 1
56905: ST_TO_ADDR
// end ; end ;
56906: GO 56735
56908: POP
56909: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56910: LD_VAR 0 1
56914: PPUSH
56915: LD_EXP 44
56919: PUSH
56920: LD_VAR 0 4
56924: ARRAY
56925: PUSH
56926: LD_INT 0
56928: PLUS
56929: PPUSH
56930: CALL_OW 505
// end ;
56934: LD_VAR 0 2
56938: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56939: LD_INT 0
56941: PPUSH
56942: PPUSH
56943: PPUSH
56944: PPUSH
// if not hack in hackTanks then
56945: LD_VAR 0 1
56949: PUSH
56950: LD_EXP 43
56954: IN
56955: NOT
56956: IFFALSE 56960
// exit ;
56958: GO 57045
// index := GetElementIndex ( hackTanks , hack ) ;
56960: LD_ADDR_VAR 0 5
56964: PUSH
56965: LD_EXP 43
56969: PPUSH
56970: LD_VAR 0 1
56974: PPUSH
56975: CALL 7673 0 2
56979: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56980: LD_ADDR_VAR 0 4
56984: PUSH
56985: DOUBLE
56986: LD_INT 1
56988: DEC
56989: ST_TO_ADDR
56990: LD_EXP 44
56994: PUSH
56995: LD_VAR 0 5
56999: ARRAY
57000: PUSH
57001: FOR_TO
57002: IFFALSE 57043
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57004: LD_EXP 44
57008: PUSH
57009: LD_VAR 0 5
57013: ARRAY
57014: PUSH
57015: LD_VAR 0 4
57019: ARRAY
57020: PUSH
57021: LD_INT 1
57023: ARRAY
57024: PUSH
57025: LD_VAR 0 2
57029: EQUAL
57030: IFFALSE 57041
// KillUnit ( vehicle ) ;
57032: LD_VAR 0 2
57036: PPUSH
57037: CALL_OW 66
57041: GO 57001
57043: POP
57044: POP
// end ;
57045: LD_VAR 0 3
57049: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57050: LD_EXP 48
57054: NOT
57055: IFFALSE 57090
57057: GO 57059
57059: DISABLE
// begin initMiner := true ;
57060: LD_ADDR_EXP 48
57064: PUSH
57065: LD_INT 1
57067: ST_TO_ADDR
// minersList := [ ] ;
57068: LD_ADDR_EXP 49
57072: PUSH
57073: EMPTY
57074: ST_TO_ADDR
// minerMinesList := [ ] ;
57075: LD_ADDR_EXP 50
57079: PUSH
57080: EMPTY
57081: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57082: LD_ADDR_EXP 51
57086: PUSH
57087: LD_INT 5
57089: ST_TO_ADDR
// end ;
57090: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57091: LD_EXP 48
57095: PUSH
57096: LD_INT 34
57098: PUSH
57099: LD_INT 81
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PPUSH
57106: CALL_OW 69
57110: AND
57111: IFFALSE 57572
57113: GO 57115
57115: DISABLE
57116: LD_INT 0
57118: PPUSH
57119: PPUSH
57120: PPUSH
57121: PPUSH
// begin enable ;
57122: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57123: LD_ADDR_VAR 0 1
57127: PUSH
57128: LD_INT 34
57130: PUSH
57131: LD_INT 81
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PPUSH
57138: CALL_OW 69
57142: PUSH
57143: FOR_IN
57144: IFFALSE 57216
// begin if not i in minersList then
57146: LD_VAR 0 1
57150: PUSH
57151: LD_EXP 49
57155: IN
57156: NOT
57157: IFFALSE 57214
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57159: LD_ADDR_EXP 49
57163: PUSH
57164: LD_EXP 49
57168: PPUSH
57169: LD_EXP 49
57173: PUSH
57174: LD_INT 1
57176: PLUS
57177: PPUSH
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 1
57187: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57188: LD_ADDR_EXP 50
57192: PUSH
57193: LD_EXP 50
57197: PPUSH
57198: LD_EXP 50
57202: PUSH
57203: LD_INT 1
57205: PLUS
57206: PPUSH
57207: EMPTY
57208: PPUSH
57209: CALL_OW 1
57213: ST_TO_ADDR
// end end ;
57214: GO 57143
57216: POP
57217: POP
// for i := minerMinesList downto 1 do
57218: LD_ADDR_VAR 0 1
57222: PUSH
57223: DOUBLE
57224: LD_EXP 50
57228: INC
57229: ST_TO_ADDR
57230: LD_INT 1
57232: PUSH
57233: FOR_DOWNTO
57234: IFFALSE 57570
// begin if IsLive ( minersList [ i ] ) then
57236: LD_EXP 49
57240: PUSH
57241: LD_VAR 0 1
57245: ARRAY
57246: PPUSH
57247: CALL_OW 300
57251: IFFALSE 57279
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57253: LD_EXP 49
57257: PUSH
57258: LD_VAR 0 1
57262: ARRAY
57263: PPUSH
57264: LD_EXP 50
57268: PUSH
57269: LD_VAR 0 1
57273: ARRAY
57274: PPUSH
57275: CALL_OW 505
// if not minerMinesList [ i ] then
57279: LD_EXP 50
57283: PUSH
57284: LD_VAR 0 1
57288: ARRAY
57289: NOT
57290: IFFALSE 57294
// continue ;
57292: GO 57233
// for j := minerMinesList [ i ] downto 1 do
57294: LD_ADDR_VAR 0 2
57298: PUSH
57299: DOUBLE
57300: LD_EXP 50
57304: PUSH
57305: LD_VAR 0 1
57309: ARRAY
57310: INC
57311: ST_TO_ADDR
57312: LD_INT 1
57314: PUSH
57315: FOR_DOWNTO
57316: IFFALSE 57566
// begin side := GetSide ( minersList [ i ] ) ;
57318: LD_ADDR_VAR 0 3
57322: PUSH
57323: LD_EXP 49
57327: PUSH
57328: LD_VAR 0 1
57332: ARRAY
57333: PPUSH
57334: CALL_OW 255
57338: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57339: LD_ADDR_VAR 0 4
57343: PUSH
57344: LD_EXP 50
57348: PUSH
57349: LD_VAR 0 1
57353: ARRAY
57354: PUSH
57355: LD_VAR 0 2
57359: ARRAY
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PPUSH
57365: LD_EXP 50
57369: PUSH
57370: LD_VAR 0 1
57374: ARRAY
57375: PUSH
57376: LD_VAR 0 2
57380: ARRAY
57381: PUSH
57382: LD_INT 2
57384: ARRAY
57385: PPUSH
57386: CALL_OW 428
57390: ST_TO_ADDR
// if not tmp then
57391: LD_VAR 0 4
57395: NOT
57396: IFFALSE 57400
// continue ;
57398: GO 57315
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57400: LD_VAR 0 4
57404: PUSH
57405: LD_INT 81
57407: PUSH
57408: LD_VAR 0 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PPUSH
57417: CALL_OW 69
57421: IN
57422: PUSH
57423: LD_EXP 50
57427: PUSH
57428: LD_VAR 0 1
57432: ARRAY
57433: PUSH
57434: LD_VAR 0 2
57438: ARRAY
57439: PUSH
57440: LD_INT 1
57442: ARRAY
57443: PPUSH
57444: LD_EXP 50
57448: PUSH
57449: LD_VAR 0 1
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 2
57459: ARRAY
57460: PUSH
57461: LD_INT 2
57463: ARRAY
57464: PPUSH
57465: CALL_OW 458
57469: AND
57470: IFFALSE 57564
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57472: LD_EXP 50
57476: PUSH
57477: LD_VAR 0 1
57481: ARRAY
57482: PUSH
57483: LD_VAR 0 2
57487: ARRAY
57488: PUSH
57489: LD_INT 1
57491: ARRAY
57492: PPUSH
57493: LD_EXP 50
57497: PUSH
57498: LD_VAR 0 1
57502: ARRAY
57503: PUSH
57504: LD_VAR 0 2
57508: ARRAY
57509: PUSH
57510: LD_INT 2
57512: ARRAY
57513: PPUSH
57514: LD_VAR 0 3
57518: PPUSH
57519: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57523: LD_ADDR_EXP 50
57527: PUSH
57528: LD_EXP 50
57532: PPUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: LD_EXP 50
57542: PUSH
57543: LD_VAR 0 1
57547: ARRAY
57548: PPUSH
57549: LD_VAR 0 2
57553: PPUSH
57554: CALL_OW 3
57558: PPUSH
57559: CALL_OW 1
57563: ST_TO_ADDR
// end ; end ;
57564: GO 57315
57566: POP
57567: POP
// end ;
57568: GO 57233
57570: POP
57571: POP
// end ;
57572: PPOPN 4
57574: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57575: LD_INT 0
57577: PPUSH
57578: PPUSH
// result := false ;
57579: LD_ADDR_VAR 0 4
57583: PUSH
57584: LD_INT 0
57586: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57587: LD_VAR 0 1
57591: PPUSH
57592: CALL_OW 264
57596: PUSH
57597: LD_INT 81
57599: EQUAL
57600: NOT
57601: IFFALSE 57605
// exit ;
57603: GO 57845
// index := GetElementIndex ( minersList , unit ) ;
57605: LD_ADDR_VAR 0 5
57609: PUSH
57610: LD_EXP 49
57614: PPUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: CALL 7673 0 2
57624: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57625: LD_EXP 50
57629: PUSH
57630: LD_VAR 0 5
57634: ARRAY
57635: PUSH
57636: LD_EXP 51
57640: GREATEREQUAL
57641: IFFALSE 57645
// exit ;
57643: GO 57845
// ComMoveXY ( unit , x , y ) ;
57645: LD_VAR 0 1
57649: PPUSH
57650: LD_VAR 0 2
57654: PPUSH
57655: LD_VAR 0 3
57659: PPUSH
57660: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57664: LD_INT 35
57666: PPUSH
57667: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57671: LD_VAR 0 1
57675: PPUSH
57676: LD_VAR 0 2
57680: PPUSH
57681: LD_VAR 0 3
57685: PPUSH
57686: CALL 39434 0 3
57690: NOT
57691: PUSH
57692: LD_VAR 0 1
57696: PPUSH
57697: CALL_OW 314
57701: AND
57702: IFFALSE 57706
// exit ;
57704: GO 57845
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57706: LD_VAR 0 2
57710: PPUSH
57711: LD_VAR 0 3
57715: PPUSH
57716: CALL_OW 428
57720: PUSH
57721: LD_VAR 0 1
57725: EQUAL
57726: PUSH
57727: LD_VAR 0 1
57731: PPUSH
57732: CALL_OW 314
57736: NOT
57737: AND
57738: IFFALSE 57664
// PlaySoundXY ( x , y , PlantMine ) ;
57740: LD_VAR 0 2
57744: PPUSH
57745: LD_VAR 0 3
57749: PPUSH
57750: LD_STRING PlantMine
57752: PPUSH
57753: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57757: LD_VAR 0 2
57761: PPUSH
57762: LD_VAR 0 3
57766: PPUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: CALL_OW 255
57776: PPUSH
57777: LD_INT 0
57779: PPUSH
57780: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57784: LD_ADDR_EXP 50
57788: PUSH
57789: LD_EXP 50
57793: PPUSH
57794: LD_VAR 0 5
57798: PUSH
57799: LD_EXP 50
57803: PUSH
57804: LD_VAR 0 5
57808: ARRAY
57809: PUSH
57810: LD_INT 1
57812: PLUS
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PPUSH
57818: LD_VAR 0 2
57822: PUSH
57823: LD_VAR 0 3
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PPUSH
57832: CALL 7888 0 3
57836: ST_TO_ADDR
// result := true ;
57837: LD_ADDR_VAR 0 4
57841: PUSH
57842: LD_INT 1
57844: ST_TO_ADDR
// end ;
57845: LD_VAR 0 4
57849: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57850: LD_INT 0
57852: PPUSH
57853: PPUSH
57854: PPUSH
// if not unit in minersList then
57855: LD_VAR 0 1
57859: PUSH
57860: LD_EXP 49
57864: IN
57865: NOT
57866: IFFALSE 57870
// exit ;
57868: GO 58262
// index := GetElementIndex ( minersList , unit ) ;
57870: LD_ADDR_VAR 0 6
57874: PUSH
57875: LD_EXP 49
57879: PPUSH
57880: LD_VAR 0 1
57884: PPUSH
57885: CALL 7673 0 2
57889: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57890: LD_ADDR_VAR 0 5
57894: PUSH
57895: DOUBLE
57896: LD_EXP 50
57900: PUSH
57901: LD_VAR 0 6
57905: ARRAY
57906: INC
57907: ST_TO_ADDR
57908: LD_INT 1
57910: PUSH
57911: FOR_DOWNTO
57912: IFFALSE 58073
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57914: LD_EXP 50
57918: PUSH
57919: LD_VAR 0 6
57923: ARRAY
57924: PUSH
57925: LD_VAR 0 5
57929: ARRAY
57930: PUSH
57931: LD_INT 1
57933: ARRAY
57934: PUSH
57935: LD_VAR 0 2
57939: EQUAL
57940: PUSH
57941: LD_EXP 50
57945: PUSH
57946: LD_VAR 0 6
57950: ARRAY
57951: PUSH
57952: LD_VAR 0 5
57956: ARRAY
57957: PUSH
57958: LD_INT 2
57960: ARRAY
57961: PUSH
57962: LD_VAR 0 3
57966: EQUAL
57967: AND
57968: IFFALSE 58071
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57970: LD_EXP 50
57974: PUSH
57975: LD_VAR 0 6
57979: ARRAY
57980: PUSH
57981: LD_VAR 0 5
57985: ARRAY
57986: PUSH
57987: LD_INT 1
57989: ARRAY
57990: PPUSH
57991: LD_EXP 50
57995: PUSH
57996: LD_VAR 0 6
58000: ARRAY
58001: PUSH
58002: LD_VAR 0 5
58006: ARRAY
58007: PUSH
58008: LD_INT 2
58010: ARRAY
58011: PPUSH
58012: LD_VAR 0 1
58016: PPUSH
58017: CALL_OW 255
58021: PPUSH
58022: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58026: LD_ADDR_EXP 50
58030: PUSH
58031: LD_EXP 50
58035: PPUSH
58036: LD_VAR 0 6
58040: PPUSH
58041: LD_EXP 50
58045: PUSH
58046: LD_VAR 0 6
58050: ARRAY
58051: PPUSH
58052: LD_VAR 0 5
58056: PPUSH
58057: CALL_OW 3
58061: PPUSH
58062: CALL_OW 1
58066: ST_TO_ADDR
// exit ;
58067: POP
58068: POP
58069: GO 58262
// end ; end ;
58071: GO 57911
58073: POP
58074: POP
// for i := minerMinesList [ index ] downto 1 do
58075: LD_ADDR_VAR 0 5
58079: PUSH
58080: DOUBLE
58081: LD_EXP 50
58085: PUSH
58086: LD_VAR 0 6
58090: ARRAY
58091: INC
58092: ST_TO_ADDR
58093: LD_INT 1
58095: PUSH
58096: FOR_DOWNTO
58097: IFFALSE 58260
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58099: LD_EXP 50
58103: PUSH
58104: LD_VAR 0 6
58108: ARRAY
58109: PUSH
58110: LD_VAR 0 5
58114: ARRAY
58115: PUSH
58116: LD_INT 1
58118: ARRAY
58119: PPUSH
58120: LD_EXP 50
58124: PUSH
58125: LD_VAR 0 6
58129: ARRAY
58130: PUSH
58131: LD_VAR 0 5
58135: ARRAY
58136: PUSH
58137: LD_INT 2
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 2
58145: PPUSH
58146: LD_VAR 0 3
58150: PPUSH
58151: CALL_OW 298
58155: PUSH
58156: LD_INT 6
58158: LESS
58159: IFFALSE 58258
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58161: LD_EXP 50
58165: PUSH
58166: LD_VAR 0 6
58170: ARRAY
58171: PUSH
58172: LD_VAR 0 5
58176: ARRAY
58177: PUSH
58178: LD_INT 1
58180: ARRAY
58181: PPUSH
58182: LD_EXP 50
58186: PUSH
58187: LD_VAR 0 6
58191: ARRAY
58192: PUSH
58193: LD_VAR 0 5
58197: ARRAY
58198: PUSH
58199: LD_INT 2
58201: ARRAY
58202: PPUSH
58203: LD_VAR 0 1
58207: PPUSH
58208: CALL_OW 255
58212: PPUSH
58213: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58217: LD_ADDR_EXP 50
58221: PUSH
58222: LD_EXP 50
58226: PPUSH
58227: LD_VAR 0 6
58231: PPUSH
58232: LD_EXP 50
58236: PUSH
58237: LD_VAR 0 6
58241: ARRAY
58242: PPUSH
58243: LD_VAR 0 5
58247: PPUSH
58248: CALL_OW 3
58252: PPUSH
58253: CALL_OW 1
58257: ST_TO_ADDR
// end ; end ;
58258: GO 58096
58260: POP
58261: POP
// end ;
58262: LD_VAR 0 4
58266: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58267: LD_INT 0
58269: PPUSH
58270: PPUSH
58271: PPUSH
58272: PPUSH
58273: PPUSH
58274: PPUSH
58275: PPUSH
58276: PPUSH
58277: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58278: LD_VAR 0 1
58282: PPUSH
58283: CALL_OW 264
58287: PUSH
58288: LD_INT 81
58290: EQUAL
58291: NOT
58292: PUSH
58293: LD_VAR 0 1
58297: PUSH
58298: LD_EXP 49
58302: IN
58303: NOT
58304: OR
58305: IFFALSE 58309
// exit ;
58307: GO 58631
// index := GetElementIndex ( minersList , unit ) ;
58309: LD_ADDR_VAR 0 6
58313: PUSH
58314: LD_EXP 49
58318: PPUSH
58319: LD_VAR 0 1
58323: PPUSH
58324: CALL 7673 0 2
58328: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58329: LD_ADDR_VAR 0 8
58333: PUSH
58334: LD_EXP 51
58338: PUSH
58339: LD_EXP 50
58343: PUSH
58344: LD_VAR 0 6
58348: ARRAY
58349: MINUS
58350: ST_TO_ADDR
// if not minesFreeAmount then
58351: LD_VAR 0 8
58355: NOT
58356: IFFALSE 58360
// exit ;
58358: GO 58631
// tmp := [ ] ;
58360: LD_ADDR_VAR 0 7
58364: PUSH
58365: EMPTY
58366: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58367: LD_ADDR_VAR 0 5
58371: PUSH
58372: DOUBLE
58373: LD_INT 1
58375: DEC
58376: ST_TO_ADDR
58377: LD_VAR 0 8
58381: PUSH
58382: FOR_TO
58383: IFFALSE 58578
// begin _d := rand ( 0 , 5 ) ;
58385: LD_ADDR_VAR 0 11
58389: PUSH
58390: LD_INT 0
58392: PPUSH
58393: LD_INT 5
58395: PPUSH
58396: CALL_OW 12
58400: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58401: LD_ADDR_VAR 0 12
58405: PUSH
58406: LD_INT 2
58408: PPUSH
58409: LD_INT 6
58411: PPUSH
58412: CALL_OW 12
58416: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58417: LD_ADDR_VAR 0 9
58421: PUSH
58422: LD_VAR 0 2
58426: PPUSH
58427: LD_VAR 0 11
58431: PPUSH
58432: LD_VAR 0 12
58436: PPUSH
58437: CALL_OW 272
58441: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58442: LD_ADDR_VAR 0 10
58446: PUSH
58447: LD_VAR 0 3
58451: PPUSH
58452: LD_VAR 0 11
58456: PPUSH
58457: LD_VAR 0 12
58461: PPUSH
58462: CALL_OW 273
58466: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58467: LD_VAR 0 9
58471: PPUSH
58472: LD_VAR 0 10
58476: PPUSH
58477: CALL_OW 488
58481: PUSH
58482: LD_VAR 0 9
58486: PUSH
58487: LD_VAR 0 10
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_VAR 0 7
58500: IN
58501: NOT
58502: AND
58503: PUSH
58504: LD_VAR 0 9
58508: PPUSH
58509: LD_VAR 0 10
58513: PPUSH
58514: CALL_OW 458
58518: NOT
58519: AND
58520: IFFALSE 58562
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58522: LD_ADDR_VAR 0 7
58526: PUSH
58527: LD_VAR 0 7
58531: PPUSH
58532: LD_VAR 0 7
58536: PUSH
58537: LD_INT 1
58539: PLUS
58540: PPUSH
58541: LD_VAR 0 9
58545: PUSH
58546: LD_VAR 0 10
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PPUSH
58555: CALL_OW 1
58559: ST_TO_ADDR
58560: GO 58576
// i := i - 1 ;
58562: LD_ADDR_VAR 0 5
58566: PUSH
58567: LD_VAR 0 5
58571: PUSH
58572: LD_INT 1
58574: MINUS
58575: ST_TO_ADDR
// end ;
58576: GO 58382
58578: POP
58579: POP
// for i in tmp do
58580: LD_ADDR_VAR 0 5
58584: PUSH
58585: LD_VAR 0 7
58589: PUSH
58590: FOR_IN
58591: IFFALSE 58629
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58593: LD_VAR 0 1
58597: PPUSH
58598: LD_VAR 0 5
58602: PUSH
58603: LD_INT 1
58605: ARRAY
58606: PPUSH
58607: LD_VAR 0 5
58611: PUSH
58612: LD_INT 2
58614: ARRAY
58615: PPUSH
58616: CALL 57575 0 3
58620: NOT
58621: IFFALSE 58627
// exit ;
58623: POP
58624: POP
58625: GO 58631
58627: GO 58590
58629: POP
58630: POP
// end ;
58631: LD_VAR 0 4
58635: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58636: LD_INT 0
58638: PPUSH
58639: PPUSH
58640: PPUSH
58641: PPUSH
58642: PPUSH
58643: PPUSH
58644: PPUSH
58645: PPUSH
58646: PPUSH
// if GetClass ( unit ) <> class_sniper then
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 257
58656: PUSH
58657: LD_INT 5
58659: NONEQUAL
58660: IFFALSE 58664
// exit ;
58662: GO 59130
// dist := 8 ;
58664: LD_ADDR_VAR 0 5
58668: PUSH
58669: LD_INT 8
58671: ST_TO_ADDR
// viewRange := 12 ;
58672: LD_ADDR_VAR 0 8
58676: PUSH
58677: LD_INT 12
58679: ST_TO_ADDR
// side := GetSide ( unit ) ;
58680: LD_ADDR_VAR 0 6
58684: PUSH
58685: LD_VAR 0 1
58689: PPUSH
58690: CALL_OW 255
58694: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58695: LD_INT 61
58697: PPUSH
58698: LD_VAR 0 6
58702: PPUSH
58703: CALL_OW 321
58707: PUSH
58708: LD_INT 2
58710: EQUAL
58711: IFFALSE 58721
// viewRange := 16 ;
58713: LD_ADDR_VAR 0 8
58717: PUSH
58718: LD_INT 16
58720: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58721: LD_VAR 0 1
58725: PPUSH
58726: LD_VAR 0 2
58730: PPUSH
58731: LD_VAR 0 3
58735: PPUSH
58736: CALL_OW 297
58740: PUSH
58741: LD_VAR 0 5
58745: GREATER
58746: IFFALSE 58825
// begin ComMoveXY ( unit , x , y ) ;
58748: LD_VAR 0 1
58752: PPUSH
58753: LD_VAR 0 2
58757: PPUSH
58758: LD_VAR 0 3
58762: PPUSH
58763: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58767: LD_INT 35
58769: PPUSH
58770: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58774: LD_VAR 0 1
58778: PPUSH
58779: LD_VAR 0 2
58783: PPUSH
58784: LD_VAR 0 3
58788: PPUSH
58789: CALL 39434 0 3
58793: NOT
58794: IFFALSE 58798
// exit ;
58796: GO 59130
// until GetDistUnitXY ( unit , x , y ) < dist ;
58798: LD_VAR 0 1
58802: PPUSH
58803: LD_VAR 0 2
58807: PPUSH
58808: LD_VAR 0 3
58812: PPUSH
58813: CALL_OW 297
58817: PUSH
58818: LD_VAR 0 5
58822: LESS
58823: IFFALSE 58767
// end ; ComTurnXY ( unit , x , y ) ;
58825: LD_VAR 0 1
58829: PPUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: LD_VAR 0 3
58839: PPUSH
58840: CALL_OW 118
// repeat if Multiplayer then
58844: LD_OWVAR 4
58848: IFFALSE 58859
// wait ( 35 ) else
58850: LD_INT 35
58852: PPUSH
58853: CALL_OW 67
58857: GO 58866
// wait ( 5 ) ;
58859: LD_INT 5
58861: PPUSH
58862: CALL_OW 67
// _d := GetDir ( unit ) ;
58866: LD_ADDR_VAR 0 11
58870: PUSH
58871: LD_VAR 0 1
58875: PPUSH
58876: CALL_OW 254
58880: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58881: LD_ADDR_VAR 0 7
58885: PUSH
58886: LD_VAR 0 1
58890: PPUSH
58891: CALL_OW 250
58895: PPUSH
58896: LD_VAR 0 1
58900: PPUSH
58901: CALL_OW 251
58905: PPUSH
58906: LD_VAR 0 2
58910: PPUSH
58911: LD_VAR 0 3
58915: PPUSH
58916: CALL 42042 0 4
58920: ST_TO_ADDR
// until dir = _d ;
58921: LD_VAR 0 7
58925: PUSH
58926: LD_VAR 0 11
58930: EQUAL
58931: IFFALSE 58844
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58933: LD_ADDR_VAR 0 9
58937: PUSH
58938: LD_VAR 0 1
58942: PPUSH
58943: CALL_OW 250
58947: PPUSH
58948: LD_VAR 0 7
58952: PPUSH
58953: LD_VAR 0 5
58957: PPUSH
58958: CALL_OW 272
58962: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58963: LD_ADDR_VAR 0 10
58967: PUSH
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL_OW 251
58977: PPUSH
58978: LD_VAR 0 7
58982: PPUSH
58983: LD_VAR 0 5
58987: PPUSH
58988: CALL_OW 273
58992: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58993: LD_VAR 0 9
58997: PPUSH
58998: LD_VAR 0 10
59002: PPUSH
59003: CALL_OW 488
59007: NOT
59008: IFFALSE 59012
// exit ;
59010: GO 59130
// ComAnimCustom ( unit , 1 ) ;
59012: LD_VAR 0 1
59016: PPUSH
59017: LD_INT 1
59019: PPUSH
59020: CALL_OW 592
// p := 0 ;
59024: LD_ADDR_VAR 0 12
59028: PUSH
59029: LD_INT 0
59031: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59032: LD_VAR 0 9
59036: PPUSH
59037: LD_VAR 0 10
59041: PPUSH
59042: LD_VAR 0 6
59046: PPUSH
59047: LD_VAR 0 8
59051: PPUSH
59052: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59056: LD_INT 35
59058: PPUSH
59059: CALL_OW 67
// p := Inc ( p ) ;
59063: LD_ADDR_VAR 0 12
59067: PUSH
59068: LD_VAR 0 12
59072: PPUSH
59073: CALL 41998 0 1
59077: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59078: LD_VAR 0 12
59082: PUSH
59083: LD_INT 3
59085: EQUAL
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 302
59096: NOT
59097: OR
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 301
59108: OR
59109: IFFALSE 59056
// RemoveSeeing ( _x , _y , side ) ;
59111: LD_VAR 0 9
59115: PPUSH
59116: LD_VAR 0 10
59120: PPUSH
59121: LD_VAR 0 6
59125: PPUSH
59126: CALL_OW 331
// end ; end_of_file
59130: LD_VAR 0 4
59134: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59135: PPOPN 6
59137: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
59138: CALL 59167 0 0
// end ; end_of_file
59142: PPOPN 1
59144: END
// every 0 0$1 do
59145: GO 59147
59147: DISABLE
// begin enable ;
59148: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59149: LD_STRING updateTimer(
59151: PUSH
59152: LD_OWVAR 1
59156: STR
59157: PUSH
59158: LD_STRING );
59160: STR
59161: PPUSH
59162: CALL_OW 559
// end ;
59166: END
// export function SOS_MapStart ( ) ; begin
59167: LD_INT 0
59169: PPUSH
// UpdateFactoryWaypoints ( ) ;
59170: CALL 59539 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59174: CALL 59791 0 0
// end ;
59178: LD_VAR 0 1
59182: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59183: LD_INT 0
59185: PPUSH
// end ;
59186: LD_VAR 0 12
59190: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59191: LD_INT 0
59193: PPUSH
59194: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59195: LD_VAR 0 1
59199: NOT
59200: PUSH
59201: LD_VAR 0 2
59205: PPUSH
59206: LD_VAR 0 3
59210: PPUSH
59211: CALL_OW 488
59215: NOT
59216: OR
59217: PUSH
59218: LD_VAR 0 1
59222: PPUSH
59223: CALL_OW 266
59227: PUSH
59228: LD_INT 3
59230: NONEQUAL
59231: PUSH
59232: LD_VAR 0 1
59236: PPUSH
59237: CALL_OW 247
59241: PUSH
59242: LD_INT 1
59244: EQUAL
59245: NOT
59246: AND
59247: OR
59248: IFFALSE 59252
// exit ;
59250: GO 59534
// if GetType ( factory ) = unit_human then
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 247
59261: PUSH
59262: LD_INT 1
59264: EQUAL
59265: IFFALSE 59282
// factory := IsInUnit ( factory ) ;
59267: LD_ADDR_VAR 0 1
59271: PUSH
59272: LD_VAR 0 1
59276: PPUSH
59277: CALL_OW 310
59281: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59282: LD_VAR 0 1
59286: PPUSH
59287: CALL_OW 266
59291: PUSH
59292: LD_INT 3
59294: NONEQUAL
59295: IFFALSE 59299
// exit ;
59297: GO 59534
// for i := 1 to Count ( factoryWaypoints ) do
59299: LD_ADDR_VAR 0 5
59303: PUSH
59304: DOUBLE
59305: LD_INT 1
59307: DEC
59308: ST_TO_ADDR
59309: LD_EXP 52
59313: PPUSH
59314: CALL 5028 0 1
59318: PUSH
59319: FOR_TO
59320: IFFALSE 59482
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
59322: LD_VAR 0 2
59326: PPUSH
59327: LD_VAR 0 3
59331: PPUSH
59332: CALL_OW 428
59336: PUSH
59337: LD_EXP 52
59341: PUSH
59342: LD_VAR 0 5
59346: ARRAY
59347: PUSH
59348: LD_INT 2
59350: ARRAY
59351: EQUAL
59352: IFFALSE 59384
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59354: LD_ADDR_EXP 52
59358: PUSH
59359: LD_EXP 52
59363: PPUSH
59364: LD_VAR 0 5
59368: PPUSH
59369: CALL_OW 3
59373: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59374: CALL 59539 0 0
// exit ;
59378: POP
59379: POP
59380: GO 59534
// end else
59382: GO 59480
// if factory = factoryWaypoints [ i ] [ 2 ] then
59384: LD_VAR 0 1
59388: PUSH
59389: LD_EXP 52
59393: PUSH
59394: LD_VAR 0 5
59398: ARRAY
59399: PUSH
59400: LD_INT 2
59402: ARRAY
59403: EQUAL
59404: IFFALSE 59480
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
59406: LD_ADDR_EXP 52
59410: PUSH
59411: LD_EXP 52
59415: PPUSH
59416: LD_VAR 0 5
59420: PPUSH
59421: CALL_OW 3
59425: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59426: LD_ADDR_EXP 52
59430: PUSH
59431: LD_EXP 52
59435: PPUSH
59436: LD_VAR 0 1
59440: PPUSH
59441: CALL_OW 255
59445: PUSH
59446: LD_VAR 0 1
59450: PUSH
59451: LD_VAR 0 2
59455: PUSH
59456: LD_VAR 0 3
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: PPUSH
59467: CALL 40637 0 2
59471: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59472: CALL 59539 0 0
// exit ;
59476: POP
59477: POP
59478: GO 59534
// end ; end ;
59480: GO 59319
59482: POP
59483: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
59484: LD_ADDR_EXP 52
59488: PUSH
59489: LD_EXP 52
59493: PPUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 255
59503: PUSH
59504: LD_VAR 0 1
59508: PUSH
59509: LD_VAR 0 2
59513: PUSH
59514: LD_VAR 0 3
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: PPUSH
59525: CALL 40637 0 2
59529: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59530: CALL 59539 0 0
// end ;
59534: LD_VAR 0 4
59538: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
59539: LD_INT 0
59541: PPUSH
59542: PPUSH
59543: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59544: LD_STRING resetFactoryWaypoint();
59546: PPUSH
59547: CALL_OW 559
// if factoryWaypoints then
59551: LD_EXP 52
59555: IFFALSE 59676
// begin list := factoryWaypoints ;
59557: LD_ADDR_VAR 0 3
59561: PUSH
59562: LD_EXP 52
59566: ST_TO_ADDR
// for i := 1 to list do
59567: LD_ADDR_VAR 0 2
59571: PUSH
59572: DOUBLE
59573: LD_INT 1
59575: DEC
59576: ST_TO_ADDR
59577: LD_VAR 0 3
59581: PUSH
59582: FOR_TO
59583: IFFALSE 59674
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59585: LD_STRING setFactoryWaypointXY(
59587: PUSH
59588: LD_VAR 0 3
59592: PUSH
59593: LD_VAR 0 2
59597: ARRAY
59598: PUSH
59599: LD_INT 1
59601: ARRAY
59602: STR
59603: PUSH
59604: LD_STRING ,
59606: STR
59607: PUSH
59608: LD_VAR 0 3
59612: PUSH
59613: LD_VAR 0 2
59617: ARRAY
59618: PUSH
59619: LD_INT 2
59621: ARRAY
59622: STR
59623: PUSH
59624: LD_STRING ,
59626: STR
59627: PUSH
59628: LD_VAR 0 3
59632: PUSH
59633: LD_VAR 0 2
59637: ARRAY
59638: PUSH
59639: LD_INT 3
59641: ARRAY
59642: STR
59643: PUSH
59644: LD_STRING ,
59646: STR
59647: PUSH
59648: LD_VAR 0 3
59652: PUSH
59653: LD_VAR 0 2
59657: ARRAY
59658: PUSH
59659: LD_INT 4
59661: ARRAY
59662: STR
59663: PUSH
59664: LD_STRING )
59666: STR
59667: PPUSH
59668: CALL_OW 559
59672: GO 59582
59674: POP
59675: POP
// end ; end ;
59676: LD_VAR 0 1
59680: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
59681: LD_INT 0
59683: PPUSH
// if HexInfo ( x , y ) = warehouse then
59684: LD_VAR 0 2
59688: PPUSH
59689: LD_VAR 0 3
59693: PPUSH
59694: CALL_OW 428
59698: PUSH
59699: LD_VAR 0 1
59703: EQUAL
59704: IFFALSE 59731
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
59706: LD_ADDR_EXP 53
59710: PUSH
59711: LD_EXP 53
59715: PPUSH
59716: LD_VAR 0 1
59720: PPUSH
59721: LD_INT 0
59723: PPUSH
59724: CALL_OW 1
59728: ST_TO_ADDR
59729: GO 59782
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
59731: LD_ADDR_EXP 53
59735: PUSH
59736: LD_EXP 53
59740: PPUSH
59741: LD_VAR 0 1
59745: PPUSH
59746: LD_VAR 0 1
59750: PPUSH
59751: CALL_OW 255
59755: PUSH
59756: LD_VAR 0 1
59760: PUSH
59761: LD_VAR 0 2
59765: PUSH
59766: LD_VAR 0 3
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: PPUSH
59777: CALL_OW 1
59781: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
59782: CALL 59791 0 0
// end ;
59786: LD_VAR 0 4
59790: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
59791: LD_INT 0
59793: PPUSH
59794: PPUSH
59795: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
59796: LD_STRING resetWarehouseGatheringPoints();
59798: PPUSH
59799: CALL_OW 559
// if warehouseGatheringPoints then
59803: LD_EXP 53
59807: IFFALSE 59933
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
59809: LD_ADDR_VAR 0 3
59813: PUSH
59814: LD_EXP 53
59818: PPUSH
59819: CALL 44399 0 1
59823: ST_TO_ADDR
// for i := 1 to list do
59824: LD_ADDR_VAR 0 2
59828: PUSH
59829: DOUBLE
59830: LD_INT 1
59832: DEC
59833: ST_TO_ADDR
59834: LD_VAR 0 3
59838: PUSH
59839: FOR_TO
59840: IFFALSE 59931
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
59842: LD_STRING setWarehouseGatheringPointXY(
59844: PUSH
59845: LD_VAR 0 3
59849: PUSH
59850: LD_VAR 0 2
59854: ARRAY
59855: PUSH
59856: LD_INT 1
59858: ARRAY
59859: STR
59860: PUSH
59861: LD_STRING ,
59863: STR
59864: PUSH
59865: LD_VAR 0 3
59869: PUSH
59870: LD_VAR 0 2
59874: ARRAY
59875: PUSH
59876: LD_INT 2
59878: ARRAY
59879: STR
59880: PUSH
59881: LD_STRING ,
59883: STR
59884: PUSH
59885: LD_VAR 0 3
59889: PUSH
59890: LD_VAR 0 2
59894: ARRAY
59895: PUSH
59896: LD_INT 3
59898: ARRAY
59899: STR
59900: PUSH
59901: LD_STRING ,
59903: STR
59904: PUSH
59905: LD_VAR 0 3
59909: PUSH
59910: LD_VAR 0 2
59914: ARRAY
59915: PUSH
59916: LD_INT 4
59918: ARRAY
59919: STR
59920: PUSH
59921: LD_STRING )
59923: STR
59924: PPUSH
59925: CALL_OW 559
59929: GO 59839
59931: POP
59932: POP
// end ; end ;
59933: LD_VAR 0 1
59937: RET
