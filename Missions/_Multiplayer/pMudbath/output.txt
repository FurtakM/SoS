// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46556 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46979 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 180 , 160 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 180
 823: PUSH
 824: LD_INT 160
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 20
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 23
 900: PUSH
 901: LD_INT 18
 903: PUSH
 904: LD_INT 19
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 24
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 1 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 26
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45921 0 2
1411: PUSH
1412: LD_INT 27
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45921 0 2
1422: PUSH
1423: LD_INT 28
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45921 0 2
1433: PUSH
1434: LD_INT 29
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45921 0 2
1444: PUSH
1445: LD_INT 30
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL 45921 0 2
1455: PUSH
1456: LD_INT 31
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL 45921 0 2
1466: PUSH
1467: LD_INT 32
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL 45921 0 2
1477: PUSH
1478: LD_INT 33
1480: PPUSH
1481: LD_INT 5
1483: PPUSH
1484: CALL 45921 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5226 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 34
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45754 0 2
1667: PUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45754 0 2
1680: PUSH
1681: LD_INT 36
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45754 0 2
1693: PUSH
1694: LD_INT 37
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45754 0 2
1706: PUSH
1707: LD_INT 38
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45754 0 2
1719: PUSH
1720: LD_INT 39
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45754 0 2
1732: PUSH
1733: LD_INT 40
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45754 0 2
1745: PUSH
1746: LD_INT 41
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45754 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 42
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45754 0 2
1810: PUSH
1811: LD_INT 43
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45754 0 2
1823: PUSH
1824: LD_INT 44
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45754 0 2
1836: PUSH
1837: LD_INT 45
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45754 0 2
1849: PUSH
1850: LD_INT 46
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45754 0 2
1862: PUSH
1863: LD_INT 47
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45754 0 2
1875: PUSH
1876: LD_INT 48
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45754 0 2
1888: PUSH
1889: LD_INT 49
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45754 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 50
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45921 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45921 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 66
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45921 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 52
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 45921 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 53
2017: PPUSH
2018: LD_INT 5
2020: PPUSH
2021: CALL 45921 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 67
2032: PPUSH
2033: LD_INT 5
2035: PPUSH
2036: CALL 45921 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 54
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45921 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 55
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45921 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 68
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45921 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 56
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45921 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 57
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45921 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 69
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45921 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 58
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL 45921 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 59
2167: PPUSH
2168: LD_INT 5
2170: PPUSH
2171: CALL 45921 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 70
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL 45921 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 60
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: CALL 45921 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 61
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL 45921 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 71
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 45921 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 62
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45921 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 63
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL 45921 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 72
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL 45921 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 64
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL 45921 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 65
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL 45921 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 73
2332: PPUSH
2333: LD_INT 2
2335: PPUSH
2336: CALL 45921 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 20
2569: PUSH
2570: LD_INT 21
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 23
2578: PUSH
2579: LD_INT 18
2581: PUSH
2582: LD_INT 19
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 42575 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 56932 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 52102 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 56949 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 53155 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 56990 0 2
2901: PPOPN 2
2903: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: CALL 52908 0 2
2918: PPOPN 2
2920: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2921: LD_VAR 0 1
2925: PPUSH
2926: LD_VAR 0 2
2930: PPUSH
2931: LD_VAR 0 3
2935: PPUSH
2936: CALL 53208 0 3
2940: PPOPN 3
2942: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2943: LD_VAR 0 1
2947: PPUSH
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_VAR 0 3
2957: PPUSH
2958: LD_VAR 0 4
2962: PPUSH
2963: LD_VAR 0 5
2967: PPUSH
2968: CALL 53892 0 5
2972: PPOPN 5
2974: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2975: LD_VAR 0 1
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_VAR 0 3
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL 53995 0 4
2999: PPOPN 4
3001: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3002: LD_INT 0
3004: PPUSH
3005: PPUSH
// if exist_mode then
3006: LD_VAR 0 2
3010: IFFALSE 3056
// begin unit := CreateCharacter ( prefix & ident ) ;
3012: LD_ADDR_VAR 0 5
3016: PUSH
3017: LD_VAR 0 3
3021: PUSH
3022: LD_VAR 0 1
3026: STR
3027: PPUSH
3028: CALL_OW 34
3032: ST_TO_ADDR
// if unit then
3033: LD_VAR 0 5
3037: IFFALSE 3054
// DeleteCharacters ( prefix & ident ) ;
3039: LD_VAR 0 3
3043: PUSH
3044: LD_VAR 0 1
3048: STR
3049: PPUSH
3050: CALL_OW 40
// end else
3054: GO 3071
// unit := NewCharacter ( ident ) ;
3056: LD_ADDR_VAR 0 5
3060: PUSH
3061: LD_VAR 0 1
3065: PPUSH
3066: CALL_OW 25
3070: ST_TO_ADDR
// result := unit ;
3071: LD_ADDR_VAR 0 4
3075: PUSH
3076: LD_VAR 0 5
3080: ST_TO_ADDR
// end ;
3081: LD_VAR 0 4
3085: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
// if exist_mode then
3090: LD_VAR 0 2
3094: IFFALSE 3119
// unit := CreateCharacter ( prefix & ident ) else
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_VAR 0 3
3105: PUSH
3106: LD_VAR 0 1
3110: STR
3111: PPUSH
3112: CALL_OW 34
3116: ST_TO_ADDR
3117: GO 3134
// unit := NewCharacter ( ident ) ;
3119: LD_ADDR_VAR 0 5
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 25
3133: ST_TO_ADDR
// result := unit ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: LD_VAR 0 5
3143: ST_TO_ADDR
// end ;
3144: LD_VAR 0 4
3148: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// if not side or not nation then
3153: LD_VAR 0 1
3157: NOT
3158: IFTRUE 3167
3160: PUSH
3161: LD_VAR 0 2
3165: NOT
3166: OR
3167: IFFALSE 3171
// exit ;
3169: GO 3965
// case nation of nation_american :
3171: LD_VAR 0 2
3175: PUSH
3176: LD_INT 1
3178: DOUBLE
3179: EQUAL
3180: IFTRUE 3184
3182: GO 3406
3184: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3185: LD_ADDR_VAR 0 4
3189: PUSH
3190: LD_INT 35
3192: PUSH
3193: LD_INT 45
3195: PUSH
3196: LD_INT 46
3198: PUSH
3199: LD_INT 47
3201: PUSH
3202: LD_INT 82
3204: PUSH
3205: LD_INT 83
3207: PUSH
3208: LD_INT 84
3210: PUSH
3211: LD_INT 85
3213: PUSH
3214: LD_INT 86
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: LD_INT 2
3222: PUSH
3223: LD_INT 6
3225: PUSH
3226: LD_INT 15
3228: PUSH
3229: LD_INT 16
3231: PUSH
3232: LD_INT 7
3234: PUSH
3235: LD_INT 12
3237: PUSH
3238: LD_INT 13
3240: PUSH
3241: LD_INT 10
3243: PUSH
3244: LD_INT 14
3246: PUSH
3247: LD_INT 20
3249: PUSH
3250: LD_INT 21
3252: PUSH
3253: LD_INT 22
3255: PUSH
3256: LD_INT 25
3258: PUSH
3259: LD_INT 32
3261: PUSH
3262: LD_INT 27
3264: PUSH
3265: LD_INT 36
3267: PUSH
3268: LD_INT 69
3270: PUSH
3271: LD_INT 39
3273: PUSH
3274: LD_INT 34
3276: PUSH
3277: LD_INT 40
3279: PUSH
3280: LD_INT 48
3282: PUSH
3283: LD_INT 49
3285: PUSH
3286: LD_INT 50
3288: PUSH
3289: LD_INT 51
3291: PUSH
3292: LD_INT 52
3294: PUSH
3295: LD_INT 53
3297: PUSH
3298: LD_INT 54
3300: PUSH
3301: LD_INT 55
3303: PUSH
3304: LD_INT 56
3306: PUSH
3307: LD_INT 57
3309: PUSH
3310: LD_INT 58
3312: PUSH
3313: LD_INT 59
3315: PUSH
3316: LD_INT 60
3318: PUSH
3319: LD_INT 61
3321: PUSH
3322: LD_INT 62
3324: PUSH
3325: LD_INT 80
3327: PUSH
3328: LD_INT 82
3330: PUSH
3331: LD_INT 83
3333: PUSH
3334: LD_INT 84
3336: PUSH
3337: LD_INT 85
3339: PUSH
3340: LD_INT 86
3342: PUSH
3343: LD_INT 90
3345: PUSH
3346: LD_INT 93
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: ST_TO_ADDR
3404: GO 3887
3406: LD_INT 2
3408: DOUBLE
3409: EQUAL
3410: IFTRUE 3414
3412: GO 3648
3414: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3415: LD_ADDR_VAR 0 4
3419: PUSH
3420: LD_INT 35
3422: PUSH
3423: LD_INT 45
3425: PUSH
3426: LD_INT 46
3428: PUSH
3429: LD_INT 47
3431: PUSH
3432: LD_INT 82
3434: PUSH
3435: LD_INT 83
3437: PUSH
3438: LD_INT 84
3440: PUSH
3441: LD_INT 85
3443: PUSH
3444: LD_INT 87
3446: PUSH
3447: LD_INT 70
3449: PUSH
3450: LD_INT 1
3452: PUSH
3453: LD_INT 11
3455: PUSH
3456: LD_INT 3
3458: PUSH
3459: LD_INT 4
3461: PUSH
3462: LD_INT 5
3464: PUSH
3465: LD_INT 6
3467: PUSH
3468: LD_INT 15
3470: PUSH
3471: LD_INT 18
3473: PUSH
3474: LD_INT 7
3476: PUSH
3477: LD_INT 17
3479: PUSH
3480: LD_INT 8
3482: PUSH
3483: LD_INT 20
3485: PUSH
3486: LD_INT 21
3488: PUSH
3489: LD_INT 22
3491: PUSH
3492: LD_INT 72
3494: PUSH
3495: LD_INT 26
3497: PUSH
3498: LD_INT 69
3500: PUSH
3501: LD_INT 39
3503: PUSH
3504: LD_INT 40
3506: PUSH
3507: LD_INT 41
3509: PUSH
3510: LD_INT 42
3512: PUSH
3513: LD_INT 43
3515: PUSH
3516: LD_INT 48
3518: PUSH
3519: LD_INT 49
3521: PUSH
3522: LD_INT 50
3524: PUSH
3525: LD_INT 51
3527: PUSH
3528: LD_INT 52
3530: PUSH
3531: LD_INT 53
3533: PUSH
3534: LD_INT 54
3536: PUSH
3537: LD_INT 55
3539: PUSH
3540: LD_INT 56
3542: PUSH
3543: LD_INT 60
3545: PUSH
3546: LD_INT 61
3548: PUSH
3549: LD_INT 62
3551: PUSH
3552: LD_INT 66
3554: PUSH
3555: LD_INT 67
3557: PUSH
3558: LD_INT 68
3560: PUSH
3561: LD_INT 81
3563: PUSH
3564: LD_INT 82
3566: PUSH
3567: LD_INT 83
3569: PUSH
3570: LD_INT 84
3572: PUSH
3573: LD_INT 85
3575: PUSH
3576: LD_INT 87
3578: PUSH
3579: LD_INT 88
3581: PUSH
3582: LD_INT 92
3584: PUSH
3585: LD_INT 94
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: ST_TO_ADDR
3646: GO 3887
3648: LD_INT 3
3650: DOUBLE
3651: EQUAL
3652: IFTRUE 3656
3654: GO 3886
3656: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3657: LD_ADDR_VAR 0 4
3661: PUSH
3662: LD_INT 46
3664: PUSH
3665: LD_INT 47
3667: PUSH
3668: LD_INT 1
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: LD_INT 82
3676: PUSH
3677: LD_INT 83
3679: PUSH
3680: LD_INT 84
3682: PUSH
3683: LD_INT 85
3685: PUSH
3686: LD_INT 86
3688: PUSH
3689: LD_INT 11
3691: PUSH
3692: LD_INT 9
3694: PUSH
3695: LD_INT 20
3697: PUSH
3698: LD_INT 19
3700: PUSH
3701: LD_INT 21
3703: PUSH
3704: LD_INT 24
3706: PUSH
3707: LD_INT 22
3709: PUSH
3710: LD_INT 25
3712: PUSH
3713: LD_INT 28
3715: PUSH
3716: LD_INT 29
3718: PUSH
3719: LD_INT 30
3721: PUSH
3722: LD_INT 31
3724: PUSH
3725: LD_INT 37
3727: PUSH
3728: LD_INT 38
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 27
3736: PUSH
3737: LD_INT 33
3739: PUSH
3740: LD_INT 69
3742: PUSH
3743: LD_INT 39
3745: PUSH
3746: LD_INT 34
3748: PUSH
3749: LD_INT 40
3751: PUSH
3752: LD_INT 71
3754: PUSH
3755: LD_INT 23
3757: PUSH
3758: LD_INT 44
3760: PUSH
3761: LD_INT 48
3763: PUSH
3764: LD_INT 49
3766: PUSH
3767: LD_INT 50
3769: PUSH
3770: LD_INT 51
3772: PUSH
3773: LD_INT 52
3775: PUSH
3776: LD_INT 53
3778: PUSH
3779: LD_INT 54
3781: PUSH
3782: LD_INT 55
3784: PUSH
3785: LD_INT 56
3787: PUSH
3788: LD_INT 57
3790: PUSH
3791: LD_INT 58
3793: PUSH
3794: LD_INT 59
3796: PUSH
3797: LD_INT 63
3799: PUSH
3800: LD_INT 64
3802: PUSH
3803: LD_INT 65
3805: PUSH
3806: LD_INT 82
3808: PUSH
3809: LD_INT 83
3811: PUSH
3812: LD_INT 84
3814: PUSH
3815: LD_INT 85
3817: PUSH
3818: LD_INT 86
3820: PUSH
3821: LD_INT 89
3823: PUSH
3824: LD_INT 91
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: ST_TO_ADDR
3884: GO 3887
3886: POP
// if state > - 1 and state < 3 then
3887: LD_VAR 0 3
3891: PUSH
3892: LD_INT 1
3894: NEG
3895: GREATER
3896: IFFALSE 3908
3898: PUSH
3899: LD_VAR 0 3
3903: PUSH
3904: LD_INT 3
3906: LESS
3907: AND
3908: IFFALSE 3965
// for i in result do
3910: LD_ADDR_VAR 0 5
3914: PUSH
3915: LD_VAR 0 4
3919: PUSH
3920: FOR_IN
3921: IFFALSE 3963
// if GetTech ( i , side ) <> state then
3923: LD_VAR 0 5
3927: PPUSH
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL_OW 321
3937: PUSH
3938: LD_VAR 0 3
3942: NONEQUAL
3943: IFFALSE 3961
// result := result diff i ;
3945: LD_ADDR_VAR 0 4
3949: PUSH
3950: LD_VAR 0 4
3954: PUSH
3955: LD_VAR 0 5
3959: DIFF
3960: ST_TO_ADDR
3961: GO 3920
3963: POP
3964: POP
// end ;
3965: LD_VAR 0 4
3969: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3970: LD_INT 0
3972: PPUSH
3973: PPUSH
3974: PPUSH
// result := true ;
3975: LD_ADDR_VAR 0 3
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3983: LD_ADDR_VAR 0 5
3987: PUSH
3988: LD_VAR 0 2
3992: PPUSH
3993: CALL_OW 480
3997: ST_TO_ADDR
// if not tmp then
3998: LD_VAR 0 5
4002: NOT
4003: IFFALSE 4007
// exit ;
4005: GO 4056
// for i in tmp do
4007: LD_ADDR_VAR 0 4
4011: PUSH
4012: LD_VAR 0 5
4016: PUSH
4017: FOR_IN
4018: IFFALSE 4054
// if GetTech ( i , side ) <> state_researched then
4020: LD_VAR 0 4
4024: PPUSH
4025: LD_VAR 0 1
4029: PPUSH
4030: CALL_OW 321
4034: PUSH
4035: LD_INT 2
4037: NONEQUAL
4038: IFFALSE 4052
// begin result := false ;
4040: LD_ADDR_VAR 0 3
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// exit ;
4048: POP
4049: POP
4050: GO 4056
// end ;
4052: GO 4017
4054: POP
4055: POP
// end ;
4056: LD_VAR 0 3
4060: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4061: LD_INT 0
4063: PPUSH
4064: PPUSH
4065: PPUSH
4066: PPUSH
4067: PPUSH
4068: PPUSH
4069: PPUSH
4070: PPUSH
4071: PPUSH
4072: PPUSH
4073: PPUSH
4074: PPUSH
4075: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4076: LD_VAR 0 1
4080: NOT
4081: IFTRUE 4098
4083: PUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 257
4093: PUSH
4094: LD_INT 9
4096: NONEQUAL
4097: OR
4098: IFFALSE 4102
// exit ;
4100: GO 4681
// side := GetSide ( unit ) ;
4102: LD_ADDR_VAR 0 9
4106: PUSH
4107: LD_VAR 0 1
4111: PPUSH
4112: CALL_OW 255
4116: ST_TO_ADDR
// tech_space := tech_spacanom ;
4117: LD_ADDR_VAR 0 12
4121: PUSH
4122: LD_INT 29
4124: ST_TO_ADDR
// tech_time := tech_taurad ;
4125: LD_ADDR_VAR 0 13
4129: PUSH
4130: LD_INT 28
4132: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4133: LD_ADDR_VAR 0 11
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 310
4147: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4148: LD_VAR 0 11
4152: PPUSH
4153: CALL_OW 247
4157: PUSH
4158: LD_INT 2
4160: EQUAL
4161: IFFALSE 4165
// exit ;
4163: GO 4681
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4165: LD_ADDR_VAR 0 8
4169: PUSH
4170: LD_INT 81
4172: PUSH
4173: LD_VAR 0 9
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: LD_INT 3
4184: PUSH
4185: LD_INT 21
4187: PUSH
4188: LD_INT 3
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PPUSH
4203: CALL_OW 69
4207: ST_TO_ADDR
// if not tmp then
4208: LD_VAR 0 8
4212: NOT
4213: IFFALSE 4217
// exit ;
4215: GO 4681
// if in_unit then
4217: LD_VAR 0 11
4221: IFFALSE 4245
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4223: LD_ADDR_VAR 0 10
4227: PUSH
4228: LD_VAR 0 8
4232: PPUSH
4233: LD_VAR 0 11
4237: PPUSH
4238: CALL_OW 74
4242: ST_TO_ADDR
4243: GO 4265
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 8
4254: PPUSH
4255: LD_VAR 0 1
4259: PPUSH
4260: CALL_OW 74
4264: ST_TO_ADDR
// if not enemy then
4265: LD_VAR 0 10
4269: NOT
4270: IFFALSE 4274
// exit ;
4272: GO 4681
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4274: LD_VAR 0 11
4278: IFFALSE 4300
4280: PUSH
4281: LD_VAR 0 11
4285: PPUSH
4286: LD_VAR 0 10
4290: PPUSH
4291: CALL_OW 296
4295: PUSH
4296: LD_INT 13
4298: GREATER
4299: AND
4300: IFTRUE 4322
4302: PUSH
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_VAR 0 10
4312: PPUSH
4313: CALL_OW 296
4317: PUSH
4318: LD_INT 12
4320: GREATER
4321: OR
4322: IFFALSE 4326
// exit ;
4324: GO 4681
// missile := [ 1 ] ;
4326: LD_ADDR_VAR 0 14
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 12
4346: PPUSH
4347: CALL_OW 325
4351: IFFALSE 4380
// missile := Replace ( missile , missile + 1 , 2 ) ;
4353: LD_ADDR_VAR 0 14
4357: PUSH
4358: LD_VAR 0 14
4362: PPUSH
4363: LD_VAR 0 14
4367: PUSH
4368: LD_INT 1
4370: PLUS
4371: PPUSH
4372: LD_INT 2
4374: PPUSH
4375: CALL_OW 1
4379: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4380: LD_VAR 0 9
4384: PPUSH
4385: LD_VAR 0 13
4389: PPUSH
4390: CALL_OW 325
4394: IFFALSE 4418
4396: PUSH
4397: LD_VAR 0 10
4401: PPUSH
4402: CALL_OW 255
4406: PPUSH
4407: LD_VAR 0 13
4411: PPUSH
4412: CALL_OW 325
4416: NOT
4417: AND
4418: IFFALSE 4447
// missile := Replace ( missile , missile + 1 , 3 ) ;
4420: LD_ADDR_VAR 0 14
4424: PUSH
4425: LD_VAR 0 14
4429: PPUSH
4430: LD_VAR 0 14
4434: PUSH
4435: LD_INT 1
4437: PLUS
4438: PPUSH
4439: LD_INT 3
4441: PPUSH
4442: CALL_OW 1
4446: ST_TO_ADDR
// if missile < 2 then
4447: LD_VAR 0 14
4451: PUSH
4452: LD_INT 2
4454: LESS
4455: IFFALSE 4459
// exit ;
4457: GO 4681
// x := GetX ( enemy ) ;
4459: LD_ADDR_VAR 0 4
4463: PUSH
4464: LD_VAR 0 10
4468: PPUSH
4469: CALL_OW 250
4473: ST_TO_ADDR
// y := GetY ( enemy ) ;
4474: LD_ADDR_VAR 0 5
4478: PUSH
4479: LD_VAR 0 10
4483: PPUSH
4484: CALL_OW 251
4488: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4489: LD_ADDR_VAR 0 6
4493: PUSH
4494: LD_VAR 0 4
4498: PUSH
4499: LD_INT 1
4501: NEG
4502: PPUSH
4503: LD_INT 1
4505: PPUSH
4506: CALL_OW 12
4510: PLUS
4511: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4512: LD_ADDR_VAR 0 7
4516: PUSH
4517: LD_VAR 0 5
4521: PUSH
4522: LD_INT 1
4524: NEG
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: CALL_OW 12
4533: PLUS
4534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4535: LD_VAR 0 6
4539: PPUSH
4540: LD_VAR 0 7
4544: PPUSH
4545: CALL_OW 488
4549: NOT
4550: IFFALSE 4572
// begin _x := x ;
4552: LD_ADDR_VAR 0 6
4556: PUSH
4557: LD_VAR 0 4
4561: ST_TO_ADDR
// _y := y ;
4562: LD_ADDR_VAR 0 7
4566: PUSH
4567: LD_VAR 0 5
4571: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: LD_INT 1
4579: PPUSH
4580: LD_VAR 0 14
4584: PPUSH
4585: CALL_OW 12
4589: ST_TO_ADDR
// case i of 1 :
4590: LD_VAR 0 3
4594: PUSH
4595: LD_INT 1
4597: DOUBLE
4598: EQUAL
4599: IFTRUE 4603
4601: GO 4620
4603: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 10
4613: PPUSH
4614: CALL_OW 115
4618: GO 4681
4620: LD_INT 2
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4628
4626: GO 4650
4628: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4629: LD_VAR 0 1
4633: PPUSH
4634: LD_VAR 0 6
4638: PPUSH
4639: LD_VAR 0 7
4643: PPUSH
4644: CALL_OW 153
4648: GO 4681
4650: LD_INT 3
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4658
4656: GO 4680
4658: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4659: LD_VAR 0 1
4663: PPUSH
4664: LD_VAR 0 6
4668: PPUSH
4669: LD_VAR 0 7
4673: PPUSH
4674: CALL_OW 154
4678: GO 4681
4680: POP
// end ;
4681: LD_VAR 0 2
4685: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4686: LD_INT 0
4688: PPUSH
4689: PPUSH
4690: PPUSH
4691: PPUSH
4692: PPUSH
4693: PPUSH
// if not unit or not building then
4694: LD_VAR 0 1
4698: NOT
4699: IFTRUE 4708
4701: PUSH
4702: LD_VAR 0 2
4706: NOT
4707: OR
4708: IFFALSE 4712
// exit ;
4710: GO 4870
// x := GetX ( building ) ;
4712: LD_ADDR_VAR 0 5
4716: PUSH
4717: LD_VAR 0 2
4721: PPUSH
4722: CALL_OW 250
4726: ST_TO_ADDR
// y := GetY ( building ) ;
4727: LD_ADDR_VAR 0 6
4731: PUSH
4732: LD_VAR 0 2
4736: PPUSH
4737: CALL_OW 251
4741: ST_TO_ADDR
// for i := 0 to 5 do
4742: LD_ADDR_VAR 0 4
4746: PUSH
4747: DOUBLE
4748: LD_INT 0
4750: DEC
4751: ST_TO_ADDR
4752: LD_INT 5
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4868
// begin _x := ShiftX ( x , i , 3 ) ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_VAR 0 5
4767: PPUSH
4768: LD_VAR 0 4
4772: PPUSH
4773: LD_INT 3
4775: PPUSH
4776: CALL_OW 272
4780: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4781: LD_ADDR_VAR 0 8
4785: PUSH
4786: LD_VAR 0 6
4790: PPUSH
4791: LD_VAR 0 4
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 273
4803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4804: LD_VAR 0 7
4808: PPUSH
4809: LD_VAR 0 8
4813: PPUSH
4814: CALL_OW 488
4818: NOT
4819: IFFALSE 4823
// continue ;
4821: GO 4755
// if HexInfo ( _x , _y ) = 0 then
4823: LD_VAR 0 7
4827: PPUSH
4828: LD_VAR 0 8
4832: PPUSH
4833: CALL_OW 428
4837: PUSH
4838: LD_INT 0
4840: EQUAL
4841: IFFALSE 4866
// begin ComMoveXY ( unit , _x , _y ) ;
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_VAR 0 7
4852: PPUSH
4853: LD_VAR 0 8
4857: PPUSH
4858: CALL_OW 111
// exit ;
4862: POP
4863: POP
4864: GO 4870
// end ; end ;
4866: GO 4755
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 3
4874: RET
// export function ScanBase ( side , base_area ) ; begin
4875: LD_INT 0
4877: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4878: LD_ADDR_VAR 0 3
4882: PUSH
4883: LD_VAR 0 2
4887: PPUSH
4888: LD_INT 81
4890: PUSH
4891: LD_VAR 0 1
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PPUSH
4900: CALL_OW 70
4904: ST_TO_ADDR
// end ;
4905: LD_VAR 0 3
4909: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4910: LD_INT 0
4912: PPUSH
4913: PPUSH
4914: PPUSH
4915: PPUSH
// result := false ;
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// side := GetSide ( unit ) ;
4924: LD_ADDR_VAR 0 3
4928: PUSH
4929: LD_VAR 0 1
4933: PPUSH
4934: CALL_OW 255
4938: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4939: LD_ADDR_VAR 0 4
4943: PUSH
4944: LD_VAR 0 1
4948: PPUSH
4949: CALL_OW 248
4953: ST_TO_ADDR
// case nat of 1 :
4954: LD_VAR 0 4
4958: PUSH
4959: LD_INT 1
4961: DOUBLE
4962: EQUAL
4963: IFTRUE 4967
4965: GO 4978
4967: POP
// tech := tech_lassight ; 2 :
4968: LD_ADDR_VAR 0 5
4972: PUSH
4973: LD_INT 12
4975: ST_TO_ADDR
4976: GO 5017
4978: LD_INT 2
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 4997
4986: POP
// tech := tech_mortar ; 3 :
4987: LD_ADDR_VAR 0 5
4991: PUSH
4992: LD_INT 41
4994: ST_TO_ADDR
4995: GO 5017
4997: LD_INT 3
4999: DOUBLE
5000: EQUAL
5001: IFTRUE 5005
5003: GO 5016
5005: POP
// tech := tech_bazooka ; end ;
5006: LD_ADDR_VAR 0 5
5010: PUSH
5011: LD_INT 44
5013: ST_TO_ADDR
5014: GO 5017
5016: POP
// if Researched ( side , tech ) then
5017: LD_VAR 0 3
5021: PPUSH
5022: LD_VAR 0 5
5026: PPUSH
5027: CALL_OW 325
5031: IFFALSE 5058
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5033: LD_ADDR_VAR 0 2
5037: PUSH
5038: LD_INT 5
5040: PUSH
5041: LD_INT 8
5043: PUSH
5044: LD_INT 9
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: PUSH
5052: LD_VAR 0 4
5056: ARRAY
5057: ST_TO_ADDR
// end ;
5058: LD_VAR 0 2
5062: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5063: LD_INT 0
5065: PPUSH
5066: PPUSH
5067: PPUSH
// if not mines then
5068: LD_VAR 0 2
5072: NOT
5073: IFFALSE 5077
// exit ;
5075: GO 5221
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5077: LD_ADDR_VAR 0 5
5081: PUSH
5082: LD_INT 81
5084: PUSH
5085: LD_VAR 0 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 21
5099: PUSH
5100: LD_INT 3
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PPUSH
5115: CALL_OW 69
5119: ST_TO_ADDR
// for i in mines do
5120: LD_ADDR_VAR 0 4
5124: PUSH
5125: LD_VAR 0 2
5129: PUSH
5130: FOR_IN
5131: IFFALSE 5219
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5133: LD_VAR 0 4
5137: PUSH
5138: LD_INT 1
5140: ARRAY
5141: PPUSH
5142: LD_VAR 0 4
5146: PUSH
5147: LD_INT 2
5149: ARRAY
5150: PPUSH
5151: CALL_OW 458
5155: NOT
5156: IFFALSE 5160
// continue ;
5158: GO 5130
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5160: LD_VAR 0 4
5164: PUSH
5165: LD_INT 1
5167: ARRAY
5168: PPUSH
5169: LD_VAR 0 4
5173: PUSH
5174: LD_INT 2
5176: ARRAY
5177: PPUSH
5178: CALL_OW 428
5182: PUSH
5183: LD_VAR 0 5
5187: IN
5188: IFFALSE 5217
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5190: LD_VAR 0 4
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PPUSH
5199: LD_VAR 0 4
5203: PUSH
5204: LD_INT 2
5206: ARRAY
5207: PPUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 456
// end ;
5217: GO 5130
5219: POP
5220: POP
// end ;
5221: LD_VAR 0 3
5225: RET
// export function Count ( array ) ; begin
5226: LD_INT 0
5228: PPUSH
// result := array + 0 ;
5229: LD_ADDR_VAR 0 2
5233: PUSH
5234: LD_VAR 0 1
5238: PUSH
5239: LD_INT 0
5241: PLUS
5242: ST_TO_ADDR
// end ;
5243: LD_VAR 0 2
5247: RET
// export function IsEmpty ( building ) ; begin
5248: LD_INT 0
5250: PPUSH
// if not building then
5251: LD_VAR 0 1
5255: NOT
5256: IFFALSE 5260
// exit ;
5258: GO 5303
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5260: LD_ADDR_VAR 0 2
5264: PUSH
5265: LD_VAR 0 1
5269: PUSH
5270: LD_INT 22
5272: PUSH
5273: LD_VAR 0 1
5277: PPUSH
5278: CALL_OW 255
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 58
5289: PUSH
5290: EMPTY
5291: LIST
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PPUSH
5297: CALL_OW 69
5301: IN
5302: ST_TO_ADDR
// end ;
5303: LD_VAR 0 2
5307: RET
// export function IsNotFull ( building ) ; var places ; begin
5308: LD_INT 0
5310: PPUSH
5311: PPUSH
// if not building then
5312: LD_VAR 0 1
5316: NOT
5317: IFFALSE 5321
// exit ;
5319: GO 5349
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5321: LD_ADDR_VAR 0 2
5325: PUSH
5326: LD_VAR 0 1
5330: PPUSH
5331: LD_INT 3
5333: PUSH
5334: LD_INT 62
5336: PUSH
5337: EMPTY
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: PPUSH
5344: CALL_OW 72
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 2
5353: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5354: LD_INT 0
5356: PPUSH
5357: PPUSH
5358: PPUSH
5359: PPUSH
// tmp := [ ] ;
5360: LD_ADDR_VAR 0 3
5364: PUSH
5365: EMPTY
5366: ST_TO_ADDR
// list := [ ] ;
5367: LD_ADDR_VAR 0 5
5371: PUSH
5372: EMPTY
5373: ST_TO_ADDR
// for i = 16 to 25 do
5374: LD_ADDR_VAR 0 4
5378: PUSH
5379: DOUBLE
5380: LD_INT 16
5382: DEC
5383: ST_TO_ADDR
5384: LD_INT 25
5386: PUSH
5387: FOR_TO
5388: IFFALSE 5461
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5390: LD_ADDR_VAR 0 3
5394: PUSH
5395: LD_VAR 0 3
5399: PUSH
5400: LD_INT 22
5402: PUSH
5403: LD_VAR 0 1
5407: PPUSH
5408: CALL_OW 255
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 91
5419: PUSH
5420: LD_VAR 0 1
5424: PUSH
5425: LD_INT 6
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 30
5435: PUSH
5436: LD_VAR 0 4
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: PPUSH
5453: CALL_OW 69
5457: ADD
5458: ST_TO_ADDR
5459: GO 5387
5461: POP
5462: POP
// for i = 1 to tmp do
5463: LD_ADDR_VAR 0 4
5467: PUSH
5468: DOUBLE
5469: LD_INT 1
5471: DEC
5472: ST_TO_ADDR
5473: LD_VAR 0 3
5477: PUSH
5478: FOR_TO
5479: IFFALSE 5567
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5481: LD_ADDR_VAR 0 5
5485: PUSH
5486: LD_VAR 0 5
5490: PUSH
5491: LD_VAR 0 3
5495: PUSH
5496: LD_VAR 0 4
5500: ARRAY
5501: PPUSH
5502: CALL_OW 266
5506: PUSH
5507: LD_VAR 0 3
5511: PUSH
5512: LD_VAR 0 4
5516: ARRAY
5517: PPUSH
5518: CALL_OW 250
5522: PUSH
5523: LD_VAR 0 3
5527: PUSH
5528: LD_VAR 0 4
5532: ARRAY
5533: PPUSH
5534: CALL_OW 251
5538: PUSH
5539: LD_VAR 0 3
5543: PUSH
5544: LD_VAR 0 4
5548: ARRAY
5549: PPUSH
5550: CALL_OW 254
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: ADD
5564: ST_TO_ADDR
5565: GO 5478
5567: POP
5568: POP
// result := list ;
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: LD_VAR 0 5
5578: ST_TO_ADDR
// end ;
5579: LD_VAR 0 2
5583: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5584: LD_INT 0
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
5590: PPUSH
5591: PPUSH
5592: PPUSH
// if not factory then
5593: LD_VAR 0 1
5597: NOT
5598: IFFALSE 5602
// exit ;
5600: GO 6205
// if control = control_apeman then
5602: LD_VAR 0 4
5606: PUSH
5607: LD_INT 5
5609: EQUAL
5610: IFFALSE 5719
// begin tmp := UnitsInside ( factory ) ;
5612: LD_ADDR_VAR 0 8
5616: PUSH
5617: LD_VAR 0 1
5621: PPUSH
5622: CALL_OW 313
5626: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5627: LD_VAR 0 8
5631: PPUSH
5632: LD_INT 25
5634: PUSH
5635: LD_INT 12
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 72
5646: NOT
5647: IFFALSE 5657
// control := control_manual ;
5649: LD_ADDR_VAR 0 4
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5657: LD_ADDR_VAR 0 8
5661: PUSH
5662: LD_VAR 0 1
5666: PPUSH
5667: CALL 5354 0 1
5671: ST_TO_ADDR
// if tmp then
5672: LD_VAR 0 8
5676: IFFALSE 5719
// begin for i in tmp do
5678: LD_ADDR_VAR 0 7
5682: PUSH
5683: LD_VAR 0 8
5687: PUSH
5688: FOR_IN
5689: IFFALSE 5717
// if i [ 1 ] = b_ext_radio then
5691: LD_VAR 0 7
5695: PUSH
5696: LD_INT 1
5698: ARRAY
5699: PUSH
5700: LD_INT 22
5702: EQUAL
5703: IFFALSE 5715
// begin control := control_remote ;
5705: LD_ADDR_VAR 0 4
5709: PUSH
5710: LD_INT 2
5712: ST_TO_ADDR
// break ;
5713: GO 5717
// end ;
5715: GO 5688
5717: POP
5718: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 3
5733: PPUSH
5734: LD_VAR 0 4
5738: PPUSH
5739: LD_VAR 0 5
5743: PPUSH
5744: CALL_OW 448
5748: IFFALSE 5783
// begin result := [ chassis , engine , control , weapon ] ;
5750: LD_ADDR_VAR 0 6
5754: PUSH
5755: LD_VAR 0 2
5759: PUSH
5760: LD_VAR 0 3
5764: PUSH
5765: LD_VAR 0 4
5769: PUSH
5770: LD_VAR 0 5
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: ST_TO_ADDR
// exit ;
5781: GO 6205
// end ; _chassis := AvailableChassisList ( factory ) ;
5783: LD_ADDR_VAR 0 9
5787: PUSH
5788: LD_VAR 0 1
5792: PPUSH
5793: CALL_OW 475
5797: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5798: LD_ADDR_VAR 0 11
5802: PUSH
5803: LD_VAR 0 1
5807: PPUSH
5808: CALL_OW 476
5812: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5813: LD_ADDR_VAR 0 12
5817: PUSH
5818: LD_VAR 0 1
5822: PPUSH
5823: CALL_OW 477
5827: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5828: LD_ADDR_VAR 0 10
5832: PUSH
5833: LD_VAR 0 1
5837: PPUSH
5838: CALL_OW 478
5842: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5843: LD_VAR 0 9
5847: NOT
5848: IFTRUE 5857
5850: PUSH
5851: LD_VAR 0 11
5855: NOT
5856: OR
5857: IFTRUE 5866
5859: PUSH
5860: LD_VAR 0 12
5864: NOT
5865: OR
5866: IFTRUE 5875
5868: PUSH
5869: LD_VAR 0 10
5873: NOT
5874: OR
5875: IFFALSE 5910
// begin result := [ chassis , engine , control , weapon ] ;
5877: LD_ADDR_VAR 0 6
5881: PUSH
5882: LD_VAR 0 2
5886: PUSH
5887: LD_VAR 0 3
5891: PUSH
5892: LD_VAR 0 4
5896: PUSH
5897: LD_VAR 0 5
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: ST_TO_ADDR
// exit ;
5908: GO 6205
// end ; if not chassis in _chassis then
5910: LD_VAR 0 2
5914: PUSH
5915: LD_VAR 0 9
5919: IN
5920: NOT
5921: IFFALSE 5947
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5923: LD_ADDR_VAR 0 2
5927: PUSH
5928: LD_VAR 0 9
5932: PUSH
5933: LD_INT 1
5935: PPUSH
5936: LD_VAR 0 9
5940: PPUSH
5941: CALL_OW 12
5945: ARRAY
5946: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5947: LD_VAR 0 2
5951: PPUSH
5952: LD_VAR 0 3
5956: PPUSH
5957: CALL 6210 0 2
5961: NOT
5962: IFFALSE 6023
// repeat engine := _engine [ 1 ] ;
5964: LD_ADDR_VAR 0 3
5968: PUSH
5969: LD_VAR 0 11
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5978: LD_ADDR_VAR 0 11
5982: PUSH
5983: LD_VAR 0 11
5987: PPUSH
5988: LD_INT 1
5990: PPUSH
5991: CALL_OW 3
5995: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5996: LD_VAR 0 2
6000: PPUSH
6001: LD_VAR 0 3
6005: PPUSH
6006: CALL 6210 0 2
6010: IFTRUE 6021
6012: PUSH
6013: LD_VAR 0 11
6017: PUSH
6018: EMPTY
6019: EQUAL
6020: OR
6021: IFFALSE 5964
// if not control in _control then
6023: LD_VAR 0 4
6027: PUSH
6028: LD_VAR 0 12
6032: IN
6033: NOT
6034: IFFALSE 6060
// control := _control [ rand ( 1 , _control ) ] ;
6036: LD_ADDR_VAR 0 4
6040: PUSH
6041: LD_VAR 0 12
6045: PUSH
6046: LD_INT 1
6048: PPUSH
6049: LD_VAR 0 12
6053: PPUSH
6054: CALL_OW 12
6058: ARRAY
6059: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6060: LD_VAR 0 2
6064: PPUSH
6065: LD_VAR 0 5
6069: PPUSH
6070: CALL 6432 0 2
6074: NOT
6075: IFFALSE 6136
// repeat weapon := _weapon [ 1 ] ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: LD_VAR 0 10
6086: PUSH
6087: LD_INT 1
6089: ARRAY
6090: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6091: LD_ADDR_VAR 0 10
6095: PUSH
6096: LD_VAR 0 10
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: CALL_OW 3
6108: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6109: LD_VAR 0 2
6113: PPUSH
6114: LD_VAR 0 5
6118: PPUSH
6119: CALL 6432 0 2
6123: IFTRUE 6134
6125: PUSH
6126: LD_VAR 0 10
6130: PUSH
6131: EMPTY
6132: EQUAL
6133: OR
6134: IFFALSE 6077
// result := [ ] ;
6136: LD_ADDR_VAR 0 6
6140: PUSH
6141: EMPTY
6142: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6143: LD_VAR 0 1
6147: PPUSH
6148: LD_VAR 0 2
6152: PPUSH
6153: LD_VAR 0 3
6157: PPUSH
6158: LD_VAR 0 4
6162: PPUSH
6163: LD_VAR 0 5
6167: PPUSH
6168: CALL_OW 448
6172: IFFALSE 6205
// result := [ chassis , engine , control , weapon ] ;
6174: LD_ADDR_VAR 0 6
6178: PUSH
6179: LD_VAR 0 2
6183: PUSH
6184: LD_VAR 0 3
6188: PUSH
6189: LD_VAR 0 4
6193: PUSH
6194: LD_VAR 0 5
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: ST_TO_ADDR
// end ;
6205: LD_VAR 0 6
6209: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6210: LD_INT 0
6212: PPUSH
// if not chassis or not engine then
6213: LD_VAR 0 1
6217: NOT
6218: IFTRUE 6227
6220: PUSH
6221: LD_VAR 0 2
6225: NOT
6226: OR
6227: IFFALSE 6231
// exit ;
6229: GO 6427
// case engine of engine_solar :
6231: LD_VAR 0 2
6235: PUSH
6236: LD_INT 2
6238: DOUBLE
6239: EQUAL
6240: IFTRUE 6244
6242: GO 6282
6244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6245: LD_ADDR_VAR 0 3
6249: PUSH
6250: LD_INT 11
6252: PUSH
6253: LD_INT 12
6255: PUSH
6256: LD_INT 13
6258: PUSH
6259: LD_INT 14
6261: PUSH
6262: LD_INT 1
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: ST_TO_ADDR
6280: GO 6411
6282: LD_INT 1
6284: DOUBLE
6285: EQUAL
6286: IFTRUE 6290
6288: GO 6352
6290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6291: LD_ADDR_VAR 0 3
6295: PUSH
6296: LD_INT 11
6298: PUSH
6299: LD_INT 12
6301: PUSH
6302: LD_INT 13
6304: PUSH
6305: LD_INT 14
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: LD_INT 3
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: LD_INT 21
6325: PUSH
6326: LD_INT 23
6328: PUSH
6329: LD_INT 22
6331: PUSH
6332: LD_INT 24
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
6350: GO 6411
6352: LD_INT 3
6354: DOUBLE
6355: EQUAL
6356: IFTRUE 6360
6358: GO 6410
6360: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_INT 13
6368: PUSH
6369: LD_INT 14
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: LD_INT 4
6380: PUSH
6381: LD_INT 5
6383: PUSH
6384: LD_INT 21
6386: PUSH
6387: LD_INT 22
6389: PUSH
6390: LD_INT 23
6392: PUSH
6393: LD_INT 24
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: ST_TO_ADDR
6408: GO 6411
6410: POP
// result := ( chassis in result ) ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: LD_VAR 0 3
6425: IN
6426: ST_TO_ADDR
// end ;
6427: LD_VAR 0 3
6431: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6432: LD_INT 0
6434: PPUSH
// if not chassis or not weapon then
6435: LD_VAR 0 1
6439: NOT
6440: IFTRUE 6449
6442: PUSH
6443: LD_VAR 0 2
6447: NOT
6448: OR
6449: IFFALSE 6453
// exit ;
6451: GO 7547
// case weapon of us_machine_gun :
6453: LD_VAR 0 2
6457: PUSH
6458: LD_INT 2
6460: DOUBLE
6461: EQUAL
6462: IFTRUE 6466
6464: GO 6496
6466: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: LD_INT 2
6477: PUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7531
6496: LD_INT 3
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6534
6504: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 1
6512: PUSH
6513: LD_INT 2
6515: PUSH
6516: LD_INT 3
6518: PUSH
6519: LD_INT 4
6521: PUSH
6522: LD_INT 5
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: ST_TO_ADDR
6532: GO 7531
6534: LD_INT 11
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6542
6540: GO 6572
6542: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6543: LD_ADDR_VAR 0 3
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: LD_INT 3
6556: PUSH
6557: LD_INT 4
6559: PUSH
6560: LD_INT 5
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: ST_TO_ADDR
6570: GO 7531
6572: LD_INT 4
6574: DOUBLE
6575: EQUAL
6576: IFTRUE 6580
6578: GO 6606
6580: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: LD_INT 3
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: LD_INT 5
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: ST_TO_ADDR
6604: GO 7531
6606: LD_INT 5
6608: DOUBLE
6609: EQUAL
6610: IFTRUE 6614
6612: GO 6640
6614: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6615: LD_ADDR_VAR 0 3
6619: PUSH
6620: LD_INT 2
6622: PUSH
6623: LD_INT 3
6625: PUSH
6626: LD_INT 4
6628: PUSH
6629: LD_INT 5
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: ST_TO_ADDR
6638: GO 7531
6640: LD_INT 9
6642: DOUBLE
6643: EQUAL
6644: IFTRUE 6648
6646: GO 6674
6648: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6649: LD_ADDR_VAR 0 3
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 4
6662: PUSH
6663: LD_INT 5
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: ST_TO_ADDR
6672: GO 7531
6674: LD_INT 7
6676: DOUBLE
6677: EQUAL
6678: IFTRUE 6682
6680: GO 6708
6682: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6683: LD_ADDR_VAR 0 3
6687: PUSH
6688: LD_INT 2
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: LD_INT 4
6696: PUSH
6697: LD_INT 5
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: ST_TO_ADDR
6706: GO 7531
6708: LD_INT 12
6710: DOUBLE
6711: EQUAL
6712: IFTRUE 6716
6714: GO 6742
6716: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: LD_INT 5
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: ST_TO_ADDR
6740: GO 7531
6742: LD_INT 13
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6776
6750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6751: LD_ADDR_VAR 0 3
6755: PUSH
6756: LD_INT 2
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 7531
6776: LD_INT 14
6778: DOUBLE
6779: EQUAL
6780: IFTRUE 6784
6782: GO 6802
6784: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: ST_TO_ADDR
6800: GO 7531
6802: LD_INT 6
6804: DOUBLE
6805: EQUAL
6806: IFTRUE 6810
6808: GO 6828
6810: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: ST_TO_ADDR
6826: GO 7531
6828: LD_INT 10
6830: DOUBLE
6831: EQUAL
6832: IFTRUE 6836
6834: GO 6854
6836: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: LD_INT 4
6844: PUSH
6845: LD_INT 5
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: ST_TO_ADDR
6852: GO 7531
6854: LD_INT 22
6856: DOUBLE
6857: EQUAL
6858: IFTRUE 6862
6860: GO 6888
6862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6863: LD_ADDR_VAR 0 3
6867: PUSH
6868: LD_INT 11
6870: PUSH
6871: LD_INT 12
6873: PUSH
6874: LD_INT 13
6876: PUSH
6877: LD_INT 14
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: ST_TO_ADDR
6886: GO 7531
6888: LD_INT 23
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6922
6896: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: LD_INT 11
6904: PUSH
6905: LD_INT 12
6907: PUSH
6908: LD_INT 13
6910: PUSH
6911: LD_INT 14
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: ST_TO_ADDR
6920: GO 7531
6922: LD_INT 24
6924: DOUBLE
6925: EQUAL
6926: IFTRUE 6930
6928: GO 6956
6930: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6931: LD_ADDR_VAR 0 3
6935: PUSH
6936: LD_INT 11
6938: PUSH
6939: LD_INT 12
6941: PUSH
6942: LD_INT 13
6944: PUSH
6945: LD_INT 14
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: ST_TO_ADDR
6954: GO 7531
6956: LD_INT 30
6958: DOUBLE
6959: EQUAL
6960: IFTRUE 6964
6962: GO 6990
6964: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6965: LD_ADDR_VAR 0 3
6969: PUSH
6970: LD_INT 11
6972: PUSH
6973: LD_INT 12
6975: PUSH
6976: LD_INT 13
6978: PUSH
6979: LD_INT 14
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: ST_TO_ADDR
6988: GO 7531
6990: LD_INT 25
6992: DOUBLE
6993: EQUAL
6994: IFTRUE 6998
6996: GO 7016
6998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6999: LD_ADDR_VAR 0 3
7003: PUSH
7004: LD_INT 13
7006: PUSH
7007: LD_INT 14
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: ST_TO_ADDR
7014: GO 7531
7016: LD_INT 27
7018: DOUBLE
7019: EQUAL
7020: IFTRUE 7024
7022: GO 7042
7024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7025: LD_ADDR_VAR 0 3
7029: PUSH
7030: LD_INT 13
7032: PUSH
7033: LD_INT 14
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: ST_TO_ADDR
7040: GO 7531
7042: LD_INT 92
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7076
7050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7051: LD_ADDR_VAR 0 3
7055: PUSH
7056: LD_INT 11
7058: PUSH
7059: LD_INT 12
7061: PUSH
7062: LD_INT 13
7064: PUSH
7065: LD_INT 14
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: ST_TO_ADDR
7074: GO 7531
7076: LD_INT 28
7078: DOUBLE
7079: EQUAL
7080: IFTRUE 7084
7082: GO 7102
7084: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_INT 13
7092: PUSH
7093: LD_INT 14
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: ST_TO_ADDR
7100: GO 7531
7102: LD_INT 29
7104: DOUBLE
7105: EQUAL
7106: IFTRUE 7110
7108: GO 7128
7110: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_INT 13
7118: PUSH
7119: LD_INT 14
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: ST_TO_ADDR
7126: GO 7531
7128: LD_INT 31
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7154
7136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_INT 13
7144: PUSH
7145: LD_INT 14
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: ST_TO_ADDR
7152: GO 7531
7154: LD_INT 26
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7180
7162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7163: LD_ADDR_VAR 0 3
7167: PUSH
7168: LD_INT 13
7170: PUSH
7171: LD_INT 14
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: ST_TO_ADDR
7178: GO 7531
7180: LD_INT 42
7182: DOUBLE
7183: EQUAL
7184: IFTRUE 7188
7186: GO 7214
7188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7189: LD_ADDR_VAR 0 3
7193: PUSH
7194: LD_INT 21
7196: PUSH
7197: LD_INT 22
7199: PUSH
7200: LD_INT 23
7202: PUSH
7203: LD_INT 24
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: ST_TO_ADDR
7212: GO 7531
7214: LD_INT 43
7216: DOUBLE
7217: EQUAL
7218: IFTRUE 7222
7220: GO 7248
7222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7223: LD_ADDR_VAR 0 3
7227: PUSH
7228: LD_INT 21
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_INT 23
7236: PUSH
7237: LD_INT 24
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
7246: GO 7531
7248: LD_INT 44
7250: DOUBLE
7251: EQUAL
7252: IFTRUE 7256
7254: GO 7282
7256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7257: LD_ADDR_VAR 0 3
7261: PUSH
7262: LD_INT 21
7264: PUSH
7265: LD_INT 22
7267: PUSH
7268: LD_INT 23
7270: PUSH
7271: LD_INT 24
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: ST_TO_ADDR
7280: GO 7531
7282: LD_INT 45
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7316
7290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7291: LD_ADDR_VAR 0 3
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 22
7301: PUSH
7302: LD_INT 23
7304: PUSH
7305: LD_INT 24
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
7314: GO 7531
7316: LD_INT 49
7318: DOUBLE
7319: EQUAL
7320: IFTRUE 7324
7322: GO 7350
7324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7325: LD_ADDR_VAR 0 3
7329: PUSH
7330: LD_INT 21
7332: PUSH
7333: LD_INT 22
7335: PUSH
7336: LD_INT 23
7338: PUSH
7339: LD_INT 24
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: ST_TO_ADDR
7348: GO 7531
7350: LD_INT 51
7352: DOUBLE
7353: EQUAL
7354: IFTRUE 7358
7356: GO 7384
7358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7359: LD_ADDR_VAR 0 3
7363: PUSH
7364: LD_INT 21
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_INT 23
7372: PUSH
7373: LD_INT 24
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
7382: GO 7531
7384: LD_INT 52
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7418
7392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7393: LD_ADDR_VAR 0 3
7397: PUSH
7398: LD_INT 21
7400: PUSH
7401: LD_INT 22
7403: PUSH
7404: LD_INT 23
7406: PUSH
7407: LD_INT 24
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: ST_TO_ADDR
7416: GO 7531
7418: LD_INT 53
7420: DOUBLE
7421: EQUAL
7422: IFTRUE 7426
7424: GO 7444
7426: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: LD_INT 23
7434: PUSH
7435: LD_INT 24
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ST_TO_ADDR
7442: GO 7531
7444: LD_INT 46
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7470
7452: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7453: LD_ADDR_VAR 0 3
7457: PUSH
7458: LD_INT 23
7460: PUSH
7461: LD_INT 24
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ST_TO_ADDR
7468: GO 7531
7470: LD_INT 47
7472: DOUBLE
7473: EQUAL
7474: IFTRUE 7478
7476: GO 7496
7478: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7479: LD_ADDR_VAR 0 3
7483: PUSH
7484: LD_INT 23
7486: PUSH
7487: LD_INT 24
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: ST_TO_ADDR
7494: GO 7531
7496: LD_INT 98
7498: DOUBLE
7499: EQUAL
7500: IFTRUE 7504
7502: GO 7530
7504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7505: LD_ADDR_VAR 0 3
7509: PUSH
7510: LD_INT 21
7512: PUSH
7513: LD_INT 22
7515: PUSH
7516: LD_INT 23
7518: PUSH
7519: LD_INT 24
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: ST_TO_ADDR
7528: GO 7531
7530: POP
// result := ( chassis in result ) ;
7531: LD_ADDR_VAR 0 3
7535: PUSH
7536: LD_VAR 0 1
7540: PUSH
7541: LD_VAR 0 3
7545: IN
7546: ST_TO_ADDR
// end ;
7547: LD_VAR 0 3
7551: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
// result := array ;
7561: LD_ADDR_VAR 0 5
7565: PUSH
7566: LD_VAR 0 1
7570: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7571: LD_VAR 0 1
7575: NOT
7576: IFTRUE 7585
7578: PUSH
7579: LD_VAR 0 2
7583: NOT
7584: OR
7585: IFTRUE 7594
7587: PUSH
7588: LD_VAR 0 3
7592: NOT
7593: OR
7594: IFTRUE 7608
7596: PUSH
7597: LD_VAR 0 2
7601: PUSH
7602: LD_VAR 0 1
7606: GREATER
7607: OR
7608: IFTRUE 7622
7610: PUSH
7611: LD_VAR 0 3
7615: PUSH
7616: LD_VAR 0 1
7620: GREATER
7621: OR
7622: IFFALSE 7626
// exit ;
7624: GO 7922
// if direction then
7626: LD_VAR 0 4
7630: IFFALSE 7694
// begin d := 1 ;
7632: LD_ADDR_VAR 0 9
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// if i_from > i_to then
7640: LD_VAR 0 2
7644: PUSH
7645: LD_VAR 0 3
7649: GREATER
7650: IFFALSE 7676
// length := ( array - i_from ) + i_to else
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_VAR 0 1
7661: PUSH
7662: LD_VAR 0 2
7666: MINUS
7667: PUSH
7668: LD_VAR 0 3
7672: PLUS
7673: ST_TO_ADDR
7674: GO 7692
// length := i_to - i_from ;
7676: LD_ADDR_VAR 0 11
7680: PUSH
7681: LD_VAR 0 3
7685: PUSH
7686: LD_VAR 0 2
7690: MINUS
7691: ST_TO_ADDR
// end else
7692: GO 7755
// begin d := - 1 ;
7694: LD_ADDR_VAR 0 9
7698: PUSH
7699: LD_INT 1
7701: NEG
7702: ST_TO_ADDR
// if i_from > i_to then
7703: LD_VAR 0 2
7707: PUSH
7708: LD_VAR 0 3
7712: GREATER
7713: IFFALSE 7733
// length := i_from - i_to else
7715: LD_ADDR_VAR 0 11
7719: PUSH
7720: LD_VAR 0 2
7724: PUSH
7725: LD_VAR 0 3
7729: MINUS
7730: ST_TO_ADDR
7731: GO 7755
// length := ( array - i_to ) + i_from ;
7733: LD_ADDR_VAR 0 11
7737: PUSH
7738: LD_VAR 0 1
7742: PUSH
7743: LD_VAR 0 3
7747: MINUS
7748: PUSH
7749: LD_VAR 0 2
7753: PLUS
7754: ST_TO_ADDR
// end ; if not length then
7755: LD_VAR 0 11
7759: NOT
7760: IFFALSE 7764
// exit ;
7762: GO 7922
// tmp := array ;
7764: LD_ADDR_VAR 0 10
7768: PUSH
7769: LD_VAR 0 1
7773: ST_TO_ADDR
// for i = 1 to length do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: DOUBLE
7780: LD_INT 1
7782: DEC
7783: ST_TO_ADDR
7784: LD_VAR 0 11
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7910
// begin for j = 1 to array do
7792: LD_ADDR_VAR 0 7
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_VAR 0 1
7806: PUSH
7807: FOR_TO
7808: IFFALSE 7896
// begin k := j + d ;
7810: LD_ADDR_VAR 0 8
7814: PUSH
7815: LD_VAR 0 7
7819: PUSH
7820: LD_VAR 0 9
7824: PLUS
7825: ST_TO_ADDR
// if k > array then
7826: LD_VAR 0 8
7830: PUSH
7831: LD_VAR 0 1
7835: GREATER
7836: IFFALSE 7846
// k := 1 ;
7838: LD_ADDR_VAR 0 8
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if not k then
7846: LD_VAR 0 8
7850: NOT
7851: IFFALSE 7863
// k := array ;
7853: LD_ADDR_VAR 0 8
7857: PUSH
7858: LD_VAR 0 1
7862: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7863: LD_ADDR_VAR 0 10
7867: PUSH
7868: LD_VAR 0 10
7872: PPUSH
7873: LD_VAR 0 8
7877: PPUSH
7878: LD_VAR 0 1
7882: PUSH
7883: LD_VAR 0 7
7887: ARRAY
7888: PPUSH
7889: CALL_OW 1
7893: ST_TO_ADDR
// end ;
7894: GO 7807
7896: POP
7897: POP
// array := tmp ;
7898: LD_ADDR_VAR 0 1
7902: PUSH
7903: LD_VAR 0 10
7907: ST_TO_ADDR
// end ;
7908: GO 7789
7910: POP
7911: POP
// result := array ;
7912: LD_ADDR_VAR 0 5
7916: PUSH
7917: LD_VAR 0 1
7921: ST_TO_ADDR
// end ;
7922: LD_VAR 0 5
7926: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7927: LD_INT 0
7929: PPUSH
7930: PPUSH
// result := 0 ;
7931: LD_ADDR_VAR 0 3
7935: PUSH
7936: LD_INT 0
7938: ST_TO_ADDR
// if not array or not value in array then
7939: LD_VAR 0 1
7943: NOT
7944: IFTRUE 7959
7946: PUSH
7947: LD_VAR 0 2
7951: PUSH
7952: LD_VAR 0 1
7956: IN
7957: NOT
7958: OR
7959: IFFALSE 7963
// exit ;
7961: GO 8017
// for i = 1 to array do
7963: LD_ADDR_VAR 0 4
7967: PUSH
7968: DOUBLE
7969: LD_INT 1
7971: DEC
7972: ST_TO_ADDR
7973: LD_VAR 0 1
7977: PUSH
7978: FOR_TO
7979: IFFALSE 8015
// if value = array [ i ] then
7981: LD_VAR 0 2
7985: PUSH
7986: LD_VAR 0 1
7990: PUSH
7991: LD_VAR 0 4
7995: ARRAY
7996: EQUAL
7997: IFFALSE 8013
// begin result := i ;
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_VAR 0 4
8008: ST_TO_ADDR
// exit ;
8009: POP
8010: POP
8011: GO 8017
// end ;
8013: GO 7978
8015: POP
8016: POP
// end ;
8017: LD_VAR 0 3
8021: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8022: LD_INT 0
8024: PPUSH
// vc_chassis := chassis ;
8025: LD_ADDR_OWVAR 37
8029: PUSH
8030: LD_VAR 0 1
8034: ST_TO_ADDR
// vc_engine := engine ;
8035: LD_ADDR_OWVAR 39
8039: PUSH
8040: LD_VAR 0 2
8044: ST_TO_ADDR
// vc_control := control ;
8045: LD_ADDR_OWVAR 38
8049: PUSH
8050: LD_VAR 0 3
8054: ST_TO_ADDR
// vc_weapon := weapon ;
8055: LD_ADDR_OWVAR 40
8059: PUSH
8060: LD_VAR 0 4
8064: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8065: LD_ADDR_OWVAR 41
8069: PUSH
8070: LD_VAR 0 5
8074: ST_TO_ADDR
// end ;
8075: LD_VAR 0 6
8079: RET
// export function WantPlant ( unit ) ; var task ; begin
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
// result := false ;
8084: LD_ADDR_VAR 0 2
8088: PUSH
8089: LD_INT 0
8091: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 437
8106: ST_TO_ADDR
// if task then
8107: LD_VAR 0 3
8111: IFFALSE 8139
// if task [ 1 ] [ 1 ] = p then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 1
8120: ARRAY
8121: PUSH
8122: LD_INT 1
8124: ARRAY
8125: PUSH
8126: LD_STRING p
8128: EQUAL
8129: IFFALSE 8139
// result := true ;
8131: LD_ADDR_VAR 0 2
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// end ;
8139: LD_VAR 0 2
8143: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8144: LD_INT 0
8146: PPUSH
8147: PPUSH
8148: PPUSH
8149: PPUSH
// if pos < 1 then
8150: LD_VAR 0 2
8154: PUSH
8155: LD_INT 1
8157: LESS
8158: IFFALSE 8162
// exit ;
8160: GO 8465
// if pos = 1 then
8162: LD_VAR 0 2
8166: PUSH
8167: LD_INT 1
8169: EQUAL
8170: IFFALSE 8203
// result := Replace ( arr , pos [ 1 ] , value ) else
8172: LD_ADDR_VAR 0 4
8176: PUSH
8177: LD_VAR 0 1
8181: PPUSH
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 1
8189: ARRAY
8190: PPUSH
8191: LD_VAR 0 3
8195: PPUSH
8196: CALL_OW 1
8200: ST_TO_ADDR
8201: GO 8465
// begin tmp := arr ;
8203: LD_ADDR_VAR 0 6
8207: PUSH
8208: LD_VAR 0 1
8212: ST_TO_ADDR
// s_arr := [ tmp ] ;
8213: LD_ADDR_VAR 0 7
8217: PUSH
8218: LD_VAR 0 6
8222: PUSH
8223: EMPTY
8224: LIST
8225: ST_TO_ADDR
// for i = 1 to pos - 1 do
8226: LD_ADDR_VAR 0 5
8230: PUSH
8231: DOUBLE
8232: LD_INT 1
8234: DEC
8235: ST_TO_ADDR
8236: LD_VAR 0 2
8240: PUSH
8241: LD_INT 1
8243: MINUS
8244: PUSH
8245: FOR_TO
8246: IFFALSE 8291
// begin tmp := tmp [ pos [ i ] ] ;
8248: LD_ADDR_VAR 0 6
8252: PUSH
8253: LD_VAR 0 6
8257: PUSH
8258: LD_VAR 0 2
8262: PUSH
8263: LD_VAR 0 5
8267: ARRAY
8268: ARRAY
8269: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8270: LD_ADDR_VAR 0 7
8274: PUSH
8275: LD_VAR 0 7
8279: PUSH
8280: LD_VAR 0 6
8284: PUSH
8285: EMPTY
8286: LIST
8287: ADD
8288: ST_TO_ADDR
// end ;
8289: GO 8245
8291: POP
8292: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8293: LD_ADDR_VAR 0 6
8297: PUSH
8298: LD_VAR 0 6
8302: PPUSH
8303: LD_VAR 0 2
8307: PUSH
8308: LD_VAR 0 2
8312: ARRAY
8313: PPUSH
8314: LD_VAR 0 3
8318: PPUSH
8319: CALL_OW 1
8323: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8324: LD_ADDR_VAR 0 7
8328: PUSH
8329: LD_VAR 0 7
8333: PPUSH
8334: LD_VAR 0 7
8338: PPUSH
8339: LD_VAR 0 6
8343: PPUSH
8344: CALL_OW 1
8348: ST_TO_ADDR
// for i = s_arr downto 2 do
8349: LD_ADDR_VAR 0 5
8353: PUSH
8354: DOUBLE
8355: LD_VAR 0 7
8359: INC
8360: ST_TO_ADDR
8361: LD_INT 2
8363: PUSH
8364: FOR_DOWNTO
8365: IFFALSE 8449
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8367: LD_ADDR_VAR 0 6
8371: PUSH
8372: LD_VAR 0 7
8376: PUSH
8377: LD_VAR 0 5
8381: PUSH
8382: LD_INT 1
8384: MINUS
8385: ARRAY
8386: PPUSH
8387: LD_VAR 0 2
8391: PUSH
8392: LD_VAR 0 5
8396: PUSH
8397: LD_INT 1
8399: MINUS
8400: ARRAY
8401: PPUSH
8402: LD_VAR 0 7
8406: PUSH
8407: LD_VAR 0 5
8411: ARRAY
8412: PPUSH
8413: CALL_OW 1
8417: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8418: LD_ADDR_VAR 0 7
8422: PUSH
8423: LD_VAR 0 7
8427: PPUSH
8428: LD_VAR 0 5
8432: PUSH
8433: LD_INT 1
8435: MINUS
8436: PPUSH
8437: LD_VAR 0 6
8441: PPUSH
8442: CALL_OW 1
8446: ST_TO_ADDR
// end ;
8447: GO 8364
8449: POP
8450: POP
// result := s_arr [ 1 ] ;
8451: LD_ADDR_VAR 0 4
8455: PUSH
8456: LD_VAR 0 7
8460: PUSH
8461: LD_INT 1
8463: ARRAY
8464: ST_TO_ADDR
// end ; end ;
8465: LD_VAR 0 4
8469: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8470: LD_INT 0
8472: PPUSH
8473: PPUSH
// if not list then
8474: LD_VAR 0 1
8478: NOT
8479: IFFALSE 8483
// exit ;
8481: GO 8574
// i := list [ pos1 ] ;
8483: LD_ADDR_VAR 0 5
8487: PUSH
8488: LD_VAR 0 1
8492: PUSH
8493: LD_VAR 0 2
8497: ARRAY
8498: ST_TO_ADDR
// if not i then
8499: LD_VAR 0 5
8503: NOT
8504: IFFALSE 8508
// exit ;
8506: GO 8574
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8508: LD_ADDR_VAR 0 1
8512: PUSH
8513: LD_VAR 0 1
8517: PPUSH
8518: LD_VAR 0 2
8522: PPUSH
8523: LD_VAR 0 1
8527: PUSH
8528: LD_VAR 0 3
8532: ARRAY
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8539: LD_ADDR_VAR 0 1
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_VAR 0 3
8553: PPUSH
8554: LD_VAR 0 5
8558: PPUSH
8559: CALL_OW 1
8563: ST_TO_ADDR
// result := list ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_VAR 0 1
8573: ST_TO_ADDR
// end ;
8574: LD_VAR 0 4
8578: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8579: LD_INT 0
8581: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8582: LD_ADDR_VAR 0 5
8586: PUSH
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 250
8596: PPUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 251
8606: PPUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: LD_VAR 0 3
8616: PPUSH
8617: LD_VAR 0 4
8621: PPUSH
8622: CALL 9004 0 5
8626: ST_TO_ADDR
// end ;
8627: LD_VAR 0 5
8631: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8632: LD_INT 0
8634: PPUSH
8635: PPUSH
8636: PPUSH
8637: PPUSH
// if not list or not unit then
8638: LD_VAR 0 2
8642: NOT
8643: IFTRUE 8652
8645: PUSH
8646: LD_VAR 0 1
8650: NOT
8651: OR
8652: IFFALSE 8656
// exit ;
8654: GO 8999
// result := [ ] ;
8656: LD_ADDR_VAR 0 5
8660: PUSH
8661: EMPTY
8662: ST_TO_ADDR
// for i in list do
8663: LD_ADDR_VAR 0 6
8667: PUSH
8668: LD_VAR 0 2
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8892
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8676: LD_ADDR_VAR 0 8
8680: PUSH
8681: LD_VAR 0 1
8685: PPUSH
8686: LD_VAR 0 6
8690: PUSH
8691: LD_INT 1
8693: ARRAY
8694: PPUSH
8695: LD_VAR 0 6
8699: PUSH
8700: LD_INT 2
8702: ARRAY
8703: PPUSH
8704: CALL_OW 297
8708: ST_TO_ADDR
// if not Count ( result ) then
8709: LD_VAR 0 5
8713: PPUSH
8714: CALL 5226 0 1
8718: NOT
8719: IFFALSE 8752
// begin result := Join ( result , [ i , tmp ] ) ;
8721: LD_ADDR_VAR 0 5
8725: PUSH
8726: LD_VAR 0 5
8730: PPUSH
8731: LD_VAR 0 6
8735: PUSH
8736: LD_VAR 0 8
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL 41202 0 2
8749: ST_TO_ADDR
// continue ;
8750: GO 8673
// end ; if result [ result ] [ 2 ] <= tmp then
8752: LD_VAR 0 5
8756: PUSH
8757: LD_VAR 0 5
8761: ARRAY
8762: PUSH
8763: LD_INT 2
8765: ARRAY
8766: PUSH
8767: LD_VAR 0 8
8771: LESSEQUAL
8772: IFFALSE 8805
// result := Join ( result , [ i , tmp ] ) else
8774: LD_ADDR_VAR 0 5
8778: PUSH
8779: LD_VAR 0 5
8783: PPUSH
8784: LD_VAR 0 6
8788: PUSH
8789: LD_VAR 0 8
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PPUSH
8798: CALL 41202 0 2
8802: ST_TO_ADDR
8803: GO 8890
// begin for j := 1 to Count ( result ) do
8805: LD_ADDR_VAR 0 7
8809: PUSH
8810: DOUBLE
8811: LD_INT 1
8813: DEC
8814: ST_TO_ADDR
8815: LD_VAR 0 5
8819: PPUSH
8820: CALL 5226 0 1
8824: PUSH
8825: FOR_TO
8826: IFFALSE 8888
// begin if tmp < result [ j ] [ 2 ] then
8828: LD_VAR 0 8
8832: PUSH
8833: LD_VAR 0 5
8837: PUSH
8838: LD_VAR 0 7
8842: ARRAY
8843: PUSH
8844: LD_INT 2
8846: ARRAY
8847: LESS
8848: IFFALSE 8886
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8850: LD_ADDR_VAR 0 5
8854: PUSH
8855: LD_VAR 0 5
8859: PPUSH
8860: LD_VAR 0 7
8864: PPUSH
8865: LD_VAR 0 6
8869: PUSH
8870: LD_VAR 0 8
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PPUSH
8879: CALL_OW 2
8883: ST_TO_ADDR
// break ;
8884: GO 8888
// end ; end ;
8886: GO 8825
8888: POP
8889: POP
// end ; end ;
8890: GO 8673
8892: POP
8893: POP
// if result and not asc then
8894: LD_VAR 0 5
8898: IFFALSE 8907
8900: PUSH
8901: LD_VAR 0 3
8905: NOT
8906: AND
8907: IFFALSE 8924
// result := ReverseArray ( result ) ;
8909: LD_ADDR_VAR 0 5
8913: PUSH
8914: LD_VAR 0 5
8918: PPUSH
8919: CALL 36282 0 1
8923: ST_TO_ADDR
// tmp := [ ] ;
8924: LD_ADDR_VAR 0 8
8928: PUSH
8929: EMPTY
8930: ST_TO_ADDR
// if mode then
8931: LD_VAR 0 4
8935: IFFALSE 8999
// begin for i := 1 to result do
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_VAR 0 5
8951: PUSH
8952: FOR_TO
8953: IFFALSE 8987
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8955: LD_ADDR_VAR 0 8
8959: PUSH
8960: LD_VAR 0 8
8964: PPUSH
8965: LD_VAR 0 5
8969: PUSH
8970: LD_VAR 0 6
8974: ARRAY
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PPUSH
8980: CALL 41202 0 2
8984: ST_TO_ADDR
8985: GO 8952
8987: POP
8988: POP
// result := tmp ;
8989: LD_ADDR_VAR 0 5
8993: PUSH
8994: LD_VAR 0 8
8998: ST_TO_ADDR
// end ; end ;
8999: LD_VAR 0 5
9003: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9004: LD_INT 0
9006: PPUSH
9007: PPUSH
9008: PPUSH
9009: PPUSH
// if not list then
9010: LD_VAR 0 3
9014: NOT
9015: IFFALSE 9019
// exit ;
9017: GO 9409
// result := [ ] ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: EMPTY
9025: ST_TO_ADDR
// for i in list do
9026: LD_ADDR_VAR 0 7
9030: PUSH
9031: LD_VAR 0 3
9035: PUSH
9036: FOR_IN
9037: IFFALSE 9239
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9039: LD_ADDR_VAR 0 9
9043: PUSH
9044: LD_VAR 0 7
9048: PPUSH
9049: LD_VAR 0 1
9053: PPUSH
9054: LD_VAR 0 2
9058: PPUSH
9059: CALL_OW 297
9063: ST_TO_ADDR
// if not result then
9064: LD_VAR 0 6
9068: NOT
9069: IFFALSE 9095
// result := [ [ i , tmp ] ] else
9071: LD_ADDR_VAR 0 6
9075: PUSH
9076: LD_VAR 0 7
9080: PUSH
9081: LD_VAR 0 9
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: ST_TO_ADDR
9093: GO 9237
// begin if result [ result ] [ 2 ] <= tmp then
9095: LD_VAR 0 6
9099: PUSH
9100: LD_VAR 0 6
9104: ARRAY
9105: PUSH
9106: LD_INT 2
9108: ARRAY
9109: PUSH
9110: LD_VAR 0 9
9114: LESSEQUAL
9115: IFFALSE 9157
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9117: LD_ADDR_VAR 0 6
9121: PUSH
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_INT 1
9134: PLUS
9135: PPUSH
9136: LD_VAR 0 7
9140: PUSH
9141: LD_VAR 0 9
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PPUSH
9150: CALL_OW 2
9154: ST_TO_ADDR
9155: GO 9237
// for j := 1 to result do
9157: LD_ADDR_VAR 0 8
9161: PUSH
9162: DOUBLE
9163: LD_INT 1
9165: DEC
9166: ST_TO_ADDR
9167: LD_VAR 0 6
9171: PUSH
9172: FOR_TO
9173: IFFALSE 9235
// begin if tmp < result [ j ] [ 2 ] then
9175: LD_VAR 0 9
9179: PUSH
9180: LD_VAR 0 6
9184: PUSH
9185: LD_VAR 0 8
9189: ARRAY
9190: PUSH
9191: LD_INT 2
9193: ARRAY
9194: LESS
9195: IFFALSE 9233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9197: LD_ADDR_VAR 0 6
9201: PUSH
9202: LD_VAR 0 6
9206: PPUSH
9207: LD_VAR 0 8
9211: PPUSH
9212: LD_VAR 0 7
9216: PUSH
9217: LD_VAR 0 9
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 2
9230: ST_TO_ADDR
// break ;
9231: GO 9235
// end ; end ;
9233: GO 9172
9235: POP
9236: POP
// end ; end ;
9237: GO 9036
9239: POP
9240: POP
// if result and not asc then
9241: LD_VAR 0 6
9245: IFFALSE 9254
9247: PUSH
9248: LD_VAR 0 4
9252: NOT
9253: AND
9254: IFFALSE 9329
// begin tmp := result ;
9256: LD_ADDR_VAR 0 9
9260: PUSH
9261: LD_VAR 0 6
9265: ST_TO_ADDR
// for i = tmp downto 1 do
9266: LD_ADDR_VAR 0 7
9270: PUSH
9271: DOUBLE
9272: LD_VAR 0 9
9276: INC
9277: ST_TO_ADDR
9278: LD_INT 1
9280: PUSH
9281: FOR_DOWNTO
9282: IFFALSE 9327
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9284: LD_ADDR_VAR 0 6
9288: PUSH
9289: LD_VAR 0 6
9293: PPUSH
9294: LD_VAR 0 9
9298: PUSH
9299: LD_VAR 0 7
9303: MINUS
9304: PUSH
9305: LD_INT 1
9307: PLUS
9308: PPUSH
9309: LD_VAR 0 9
9313: PUSH
9314: LD_VAR 0 7
9318: ARRAY
9319: PPUSH
9320: CALL_OW 1
9324: ST_TO_ADDR
9325: GO 9281
9327: POP
9328: POP
// end ; tmp := [ ] ;
9329: LD_ADDR_VAR 0 9
9333: PUSH
9334: EMPTY
9335: ST_TO_ADDR
// if mode then
9336: LD_VAR 0 5
9340: IFFALSE 9409
// begin for i = 1 to result do
9342: LD_ADDR_VAR 0 7
9346: PUSH
9347: DOUBLE
9348: LD_INT 1
9350: DEC
9351: ST_TO_ADDR
9352: LD_VAR 0 6
9356: PUSH
9357: FOR_TO
9358: IFFALSE 9397
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9360: LD_ADDR_VAR 0 9
9364: PUSH
9365: LD_VAR 0 9
9369: PPUSH
9370: LD_VAR 0 7
9374: PPUSH
9375: LD_VAR 0 6
9379: PUSH
9380: LD_VAR 0 7
9384: ARRAY
9385: PUSH
9386: LD_INT 1
9388: ARRAY
9389: PPUSH
9390: CALL_OW 1
9394: ST_TO_ADDR
9395: GO 9357
9397: POP
9398: POP
// result := tmp ;
9399: LD_ADDR_VAR 0 6
9403: PUSH
9404: LD_VAR 0 9
9408: ST_TO_ADDR
// end ; end ;
9409: LD_VAR 0 6
9413: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9414: LD_INT 0
9416: PPUSH
9417: PPUSH
9418: PPUSH
9419: PPUSH
9420: PPUSH
9421: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9422: LD_ADDR_VAR 0 5
9426: PUSH
9427: LD_INT 0
9429: PUSH
9430: LD_INT 0
9432: PUSH
9433: LD_INT 0
9435: PUSH
9436: EMPTY
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: ST_TO_ADDR
// if not x or not y then
9444: LD_VAR 0 2
9448: NOT
9449: IFTRUE 9458
9451: PUSH
9452: LD_VAR 0 3
9456: NOT
9457: OR
9458: IFFALSE 9462
// exit ;
9460: GO 11118
// if not range then
9462: LD_VAR 0 4
9466: NOT
9467: IFFALSE 9477
// range := 10 ;
9469: LD_ADDR_VAR 0 4
9473: PUSH
9474: LD_INT 10
9476: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9477: LD_ADDR_VAR 0 8
9481: PUSH
9482: LD_INT 81
9484: PUSH
9485: LD_VAR 0 1
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 92
9496: PUSH
9497: LD_VAR 0 2
9501: PUSH
9502: LD_VAR 0 3
9506: PUSH
9507: LD_VAR 0 4
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 3
9520: PUSH
9521: LD_INT 21
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 69
9544: ST_TO_ADDR
// if not tmp then
9545: LD_VAR 0 8
9549: NOT
9550: IFFALSE 9554
// exit ;
9552: GO 11118
// for i in tmp do
9554: LD_ADDR_VAR 0 6
9558: PUSH
9559: LD_VAR 0 8
9563: PUSH
9564: FOR_IN
9565: IFFALSE 11093
// begin points := [ 0 , 0 , 0 ] ;
9567: LD_ADDR_VAR 0 9
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: LD_INT 0
9577: PUSH
9578: LD_INT 0
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: ST_TO_ADDR
// bpoints := 1 ;
9586: LD_ADDR_VAR 0 10
9590: PUSH
9591: LD_INT 1
9593: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 247
9603: PUSH
9604: LD_INT 1
9606: DOUBLE
9607: EQUAL
9608: IFTRUE 9612
9610: GO 10194
9612: POP
// begin if GetClass ( i ) = 1 then
9613: LD_VAR 0 6
9617: PPUSH
9618: CALL_OW 257
9622: PUSH
9623: LD_INT 1
9625: EQUAL
9626: IFFALSE 9647
// points := [ 10 , 5 , 3 ] ;
9628: LD_ADDR_VAR 0 9
9632: PUSH
9633: LD_INT 10
9635: PUSH
9636: LD_INT 5
9638: PUSH
9639: LD_INT 3
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9647: LD_VAR 0 6
9651: PPUSH
9652: CALL_OW 257
9656: PUSH
9657: LD_INT 2
9659: PUSH
9660: LD_INT 3
9662: PUSH
9663: LD_INT 4
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: IN
9671: IFFALSE 9692
// points := [ 3 , 2 , 1 ] ;
9673: LD_ADDR_VAR 0 9
9677: PUSH
9678: LD_INT 3
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9692: LD_VAR 0 6
9696: PPUSH
9697: CALL_OW 257
9701: PUSH
9702: LD_INT 5
9704: EQUAL
9705: IFFALSE 9726
// points := [ 130 , 5 , 2 ] ;
9707: LD_ADDR_VAR 0 9
9711: PUSH
9712: LD_INT 130
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: LD_INT 2
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9726: LD_VAR 0 6
9730: PPUSH
9731: CALL_OW 257
9735: PUSH
9736: LD_INT 8
9738: EQUAL
9739: IFFALSE 9760
// points := [ 35 , 35 , 30 ] ;
9741: LD_ADDR_VAR 0 9
9745: PUSH
9746: LD_INT 35
9748: PUSH
9749: LD_INT 35
9751: PUSH
9752: LD_INT 30
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9760: LD_VAR 0 6
9764: PPUSH
9765: CALL_OW 257
9769: PUSH
9770: LD_INT 9
9772: EQUAL
9773: IFFALSE 9794
// points := [ 20 , 55 , 40 ] ;
9775: LD_ADDR_VAR 0 9
9779: PUSH
9780: LD_INT 20
9782: PUSH
9783: LD_INT 55
9785: PUSH
9786: LD_INT 40
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9794: LD_VAR 0 6
9798: PPUSH
9799: CALL_OW 257
9803: PUSH
9804: LD_INT 12
9806: PUSH
9807: LD_INT 16
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: IN
9814: IFFALSE 9835
// points := [ 5 , 3 , 2 ] ;
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_INT 5
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9835: LD_VAR 0 6
9839: PPUSH
9840: CALL_OW 257
9844: PUSH
9845: LD_INT 17
9847: EQUAL
9848: IFFALSE 9869
// points := [ 100 , 50 , 75 ] ;
9850: LD_ADDR_VAR 0 9
9854: PUSH
9855: LD_INT 100
9857: PUSH
9858: LD_INT 50
9860: PUSH
9861: LD_INT 75
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9869: LD_VAR 0 6
9873: PPUSH
9874: CALL_OW 257
9878: PUSH
9879: LD_INT 15
9881: EQUAL
9882: IFFALSE 9903
// points := [ 10 , 5 , 3 ] ;
9884: LD_ADDR_VAR 0 9
9888: PUSH
9889: LD_INT 10
9891: PUSH
9892: LD_INT 5
9894: PUSH
9895: LD_INT 3
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 257
9912: PUSH
9913: LD_INT 14
9915: EQUAL
9916: IFFALSE 9937
// points := [ 10 , 0 , 0 ] ;
9918: LD_ADDR_VAR 0 9
9922: PUSH
9923: LD_INT 10
9925: PUSH
9926: LD_INT 0
9928: PUSH
9929: LD_INT 0
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: LIST
9936: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9937: LD_VAR 0 6
9941: PPUSH
9942: CALL_OW 257
9946: PUSH
9947: LD_INT 11
9949: EQUAL
9950: IFFALSE 9971
// points := [ 30 , 10 , 5 ] ;
9952: LD_ADDR_VAR 0 9
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 10
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_INT 5
9978: PPUSH
9979: CALL_OW 321
9983: PUSH
9984: LD_INT 2
9986: EQUAL
9987: IFFALSE 10004
// bpoints := bpoints * 1.8 ;
9989: LD_ADDR_VAR 0 10
9993: PUSH
9994: LD_VAR 0 10
9998: PUSH
9999: LD_REAL  1.80000000000000E+0000
10002: MUL
10003: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10004: LD_VAR 0 6
10008: PPUSH
10009: CALL_OW 257
10013: PUSH
10014: LD_INT 1
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 3
10022: PUSH
10023: LD_INT 4
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: IN
10032: IFFALSE 10052
10034: PUSH
10035: LD_VAR 0 1
10039: PPUSH
10040: LD_INT 51
10042: PPUSH
10043: CALL_OW 321
10047: PUSH
10048: LD_INT 2
10050: EQUAL
10051: AND
10052: IFFALSE 10069
// bpoints := bpoints * 1.2 ;
10054: LD_ADDR_VAR 0 10
10058: PUSH
10059: LD_VAR 0 10
10063: PUSH
10064: LD_REAL  1.20000000000000E+0000
10067: MUL
10068: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10069: LD_VAR 0 6
10073: PPUSH
10074: CALL_OW 257
10078: PUSH
10079: LD_INT 5
10081: PUSH
10082: LD_INT 7
10084: PUSH
10085: LD_INT 9
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: IN
10093: IFFALSE 10113
10095: PUSH
10096: LD_VAR 0 1
10100: PPUSH
10101: LD_INT 52
10103: PPUSH
10104: CALL_OW 321
10108: PUSH
10109: LD_INT 2
10111: EQUAL
10112: AND
10113: IFFALSE 10130
// bpoints := bpoints * 1.5 ;
10115: LD_ADDR_VAR 0 10
10119: PUSH
10120: LD_VAR 0 10
10124: PUSH
10125: LD_REAL  1.50000000000000E+0000
10128: MUL
10129: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10130: LD_VAR 0 1
10134: PPUSH
10135: LD_INT 66
10137: PPUSH
10138: CALL_OW 321
10142: PUSH
10143: LD_INT 2
10145: EQUAL
10146: IFFALSE 10163
// bpoints := bpoints * 1.1 ;
10148: LD_ADDR_VAR 0 10
10152: PUSH
10153: LD_VAR 0 10
10157: PUSH
10158: LD_REAL  1.10000000000000E+0000
10161: MUL
10162: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10163: LD_ADDR_VAR 0 10
10167: PUSH
10168: LD_VAR 0 10
10172: PUSH
10173: LD_VAR 0 6
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 259
10185: PUSH
10186: LD_REAL  1.15000000000000E+0000
10189: MUL
10190: MUL
10191: ST_TO_ADDR
// end ; unit_vehicle :
10192: GO 11022
10194: LD_INT 2
10196: DOUBLE
10197: EQUAL
10198: IFTRUE 10202
10200: GO 11010
10202: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10203: LD_VAR 0 6
10207: PPUSH
10208: CALL_OW 264
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: LD_INT 42
10218: PUSH
10219: LD_INT 24
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: IN
10227: IFFALSE 10248
// points := [ 25 , 5 , 3 ] ;
10229: LD_ADDR_VAR 0 9
10233: PUSH
10234: LD_INT 25
10236: PUSH
10237: LD_INT 5
10239: PUSH
10240: LD_INT 3
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10248: LD_VAR 0 6
10252: PPUSH
10253: CALL_OW 264
10257: PUSH
10258: LD_INT 4
10260: PUSH
10261: LD_INT 43
10263: PUSH
10264: LD_INT 25
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: IN
10272: IFFALSE 10293
// points := [ 40 , 15 , 5 ] ;
10274: LD_ADDR_VAR 0 9
10278: PUSH
10279: LD_INT 40
10281: PUSH
10282: LD_INT 15
10284: PUSH
10285: LD_INT 5
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10293: LD_VAR 0 6
10297: PPUSH
10298: CALL_OW 264
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: LD_INT 23
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: IN
10313: IFFALSE 10334
// points := [ 7 , 25 , 8 ] ;
10315: LD_ADDR_VAR 0 9
10319: PUSH
10320: LD_INT 7
10322: PUSH
10323: LD_INT 25
10325: PUSH
10326: LD_INT 8
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10334: LD_VAR 0 6
10338: PPUSH
10339: CALL_OW 264
10343: PUSH
10344: LD_INT 5
10346: PUSH
10347: LD_INT 27
10349: PUSH
10350: LD_INT 44
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: IN
10358: IFFALSE 10379
// points := [ 14 , 50 , 16 ] ;
10360: LD_ADDR_VAR 0 9
10364: PUSH
10365: LD_INT 14
10367: PUSH
10368: LD_INT 50
10370: PUSH
10371: LD_INT 16
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10379: LD_VAR 0 6
10383: PPUSH
10384: CALL_OW 264
10388: PUSH
10389: LD_INT 6
10391: PUSH
10392: LD_INT 46
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: IN
10399: IFFALSE 10420
// points := [ 32 , 120 , 70 ] ;
10401: LD_ADDR_VAR 0 9
10405: PUSH
10406: LD_INT 32
10408: PUSH
10409: LD_INT 120
10411: PUSH
10412: LD_INT 70
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10420: LD_VAR 0 6
10424: PPUSH
10425: CALL_OW 264
10429: PUSH
10430: LD_INT 7
10432: PUSH
10433: LD_INT 28
10435: PUSH
10436: LD_INT 45
10438: PUSH
10439: LD_INT 92
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: IN
10448: IFFALSE 10469
// points := [ 35 , 20 , 45 ] ;
10450: LD_ADDR_VAR 0 9
10454: PUSH
10455: LD_INT 35
10457: PUSH
10458: LD_INT 20
10460: PUSH
10461: LD_INT 45
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10469: LD_VAR 0 6
10473: PPUSH
10474: CALL_OW 264
10478: PUSH
10479: LD_INT 47
10481: PUSH
10482: EMPTY
10483: LIST
10484: IN
10485: IFFALSE 10506
// points := [ 67 , 45 , 75 ] ;
10487: LD_ADDR_VAR 0 9
10491: PUSH
10492: LD_INT 67
10494: PUSH
10495: LD_INT 45
10497: PUSH
10498: LD_INT 75
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10506: LD_VAR 0 6
10510: PPUSH
10511: CALL_OW 264
10515: PUSH
10516: LD_INT 26
10518: PUSH
10519: EMPTY
10520: LIST
10521: IN
10522: IFFALSE 10543
// points := [ 120 , 30 , 80 ] ;
10524: LD_ADDR_VAR 0 9
10528: PUSH
10529: LD_INT 120
10531: PUSH
10532: LD_INT 30
10534: PUSH
10535: LD_INT 80
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10543: LD_VAR 0 6
10547: PPUSH
10548: CALL_OW 264
10552: PUSH
10553: LD_INT 22
10555: PUSH
10556: EMPTY
10557: LIST
10558: IN
10559: IFFALSE 10580
// points := [ 40 , 1 , 1 ] ;
10561: LD_ADDR_VAR 0 9
10565: PUSH
10566: LD_INT 40
10568: PUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10580: LD_VAR 0 6
10584: PPUSH
10585: CALL_OW 264
10589: PUSH
10590: LD_INT 29
10592: PUSH
10593: EMPTY
10594: LIST
10595: IN
10596: IFFALSE 10617
// points := [ 70 , 200 , 400 ] ;
10598: LD_ADDR_VAR 0 9
10602: PUSH
10603: LD_INT 70
10605: PUSH
10606: LD_INT 200
10608: PUSH
10609: LD_INT 400
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: LIST
10616: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10617: LD_VAR 0 6
10621: PPUSH
10622: CALL_OW 264
10626: PUSH
10627: LD_INT 14
10629: PUSH
10630: LD_INT 53
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: IN
10637: IFFALSE 10658
// points := [ 40 , 10 , 20 ] ;
10639: LD_ADDR_VAR 0 9
10643: PUSH
10644: LD_INT 40
10646: PUSH
10647: LD_INT 10
10649: PUSH
10650: LD_INT 20
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10658: LD_VAR 0 6
10662: PPUSH
10663: CALL_OW 264
10667: PUSH
10668: LD_INT 9
10670: PUSH
10671: EMPTY
10672: LIST
10673: IN
10674: IFFALSE 10695
// points := [ 5 , 70 , 20 ] ;
10676: LD_ADDR_VAR 0 9
10680: PUSH
10681: LD_INT 5
10683: PUSH
10684: LD_INT 70
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10695: LD_VAR 0 6
10699: PPUSH
10700: CALL_OW 264
10704: PUSH
10705: LD_INT 10
10707: PUSH
10708: EMPTY
10709: LIST
10710: IN
10711: IFFALSE 10732
// points := [ 35 , 110 , 70 ] ;
10713: LD_ADDR_VAR 0 9
10717: PUSH
10718: LD_INT 35
10720: PUSH
10721: LD_INT 110
10723: PUSH
10724: LD_INT 70
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10732: LD_VAR 0 6
10736: PPUSH
10737: CALL_OW 265
10741: PUSH
10742: LD_INT 25
10744: EQUAL
10745: IFFALSE 10766
// points := [ 80 , 65 , 100 ] ;
10747: LD_ADDR_VAR 0 9
10751: PUSH
10752: LD_INT 80
10754: PUSH
10755: LD_INT 65
10757: PUSH
10758: LD_INT 100
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10766: LD_VAR 0 6
10770: PPUSH
10771: CALL_OW 263
10775: PUSH
10776: LD_INT 1
10778: EQUAL
10779: IFFALSE 10814
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10781: LD_ADDR_VAR 0 10
10785: PUSH
10786: LD_VAR 0 10
10790: PUSH
10791: LD_VAR 0 6
10795: PPUSH
10796: CALL_OW 311
10800: PPUSH
10801: LD_INT 3
10803: PPUSH
10804: CALL_OW 259
10808: PUSH
10809: LD_INT 4
10811: MUL
10812: MUL
10813: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10814: LD_VAR 0 6
10818: PPUSH
10819: CALL_OW 263
10823: PUSH
10824: LD_INT 2
10826: EQUAL
10827: IFFALSE 10878
// begin j := IsControledBy ( i ) ;
10829: LD_ADDR_VAR 0 7
10833: PUSH
10834: LD_VAR 0 6
10838: PPUSH
10839: CALL_OW 312
10843: ST_TO_ADDR
// if j then
10844: LD_VAR 0 7
10848: IFFALSE 10878
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10850: LD_ADDR_VAR 0 10
10854: PUSH
10855: LD_VAR 0 10
10859: PUSH
10860: LD_VAR 0 7
10864: PPUSH
10865: LD_INT 3
10867: PPUSH
10868: CALL_OW 259
10872: PUSH
10873: LD_INT 3
10875: MUL
10876: MUL
10877: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10878: LD_VAR 0 6
10882: PPUSH
10883: CALL_OW 264
10887: PUSH
10888: LD_INT 5
10890: PUSH
10891: LD_INT 6
10893: PUSH
10894: LD_INT 46
10896: PUSH
10897: LD_INT 44
10899: PUSH
10900: LD_INT 47
10902: PUSH
10903: LD_INT 45
10905: PUSH
10906: LD_INT 28
10908: PUSH
10909: LD_INT 7
10911: PUSH
10912: LD_INT 27
10914: PUSH
10915: LD_INT 29
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: IN
10930: IFFALSE 10950
10932: PUSH
10933: LD_VAR 0 1
10937: PPUSH
10938: LD_INT 52
10940: PPUSH
10941: CALL_OW 321
10945: PUSH
10946: LD_INT 2
10948: EQUAL
10949: AND
10950: IFFALSE 10967
// bpoints := bpoints * 1.2 ;
10952: LD_ADDR_VAR 0 10
10956: PUSH
10957: LD_VAR 0 10
10961: PUSH
10962: LD_REAL  1.20000000000000E+0000
10965: MUL
10966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10967: LD_VAR 0 6
10971: PPUSH
10972: CALL_OW 264
10976: PUSH
10977: LD_INT 6
10979: PUSH
10980: LD_INT 46
10982: PUSH
10983: LD_INT 47
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: IN
10991: IFFALSE 11008
// bpoints := bpoints * 1.2 ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_VAR 0 10
11002: PUSH
11003: LD_REAL  1.20000000000000E+0000
11006: MUL
11007: ST_TO_ADDR
// end ; unit_building :
11008: GO 11022
11010: LD_INT 3
11012: DOUBLE
11013: EQUAL
11014: IFTRUE 11018
11016: GO 11021
11018: POP
// ; end ;
11019: GO 11022
11021: POP
// for j = 1 to 3 do
11022: LD_ADDR_VAR 0 7
11026: PUSH
11027: DOUBLE
11028: LD_INT 1
11030: DEC
11031: ST_TO_ADDR
11032: LD_INT 3
11034: PUSH
11035: FOR_TO
11036: IFFALSE 11089
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11038: LD_ADDR_VAR 0 5
11042: PUSH
11043: LD_VAR 0 5
11047: PPUSH
11048: LD_VAR 0 7
11052: PPUSH
11053: LD_VAR 0 5
11057: PUSH
11058: LD_VAR 0 7
11062: ARRAY
11063: PUSH
11064: LD_VAR 0 9
11068: PUSH
11069: LD_VAR 0 7
11073: ARRAY
11074: PUSH
11075: LD_VAR 0 10
11079: MUL
11080: PLUS
11081: PPUSH
11082: CALL_OW 1
11086: ST_TO_ADDR
11087: GO 11035
11089: POP
11090: POP
// end ;
11091: GO 9564
11093: POP
11094: POP
// result := Replace ( result , 4 , tmp ) ;
11095: LD_ADDR_VAR 0 5
11099: PUSH
11100: LD_VAR 0 5
11104: PPUSH
11105: LD_INT 4
11107: PPUSH
11108: LD_VAR 0 8
11112: PPUSH
11113: CALL_OW 1
11117: ST_TO_ADDR
// end ;
11118: LD_VAR 0 5
11122: RET
// export function DangerAtRange ( unit , range ) ; begin
11123: LD_INT 0
11125: PPUSH
// if not unit then
11126: LD_VAR 0 1
11130: NOT
11131: IFFALSE 11135
// exit ;
11133: GO 11180
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_VAR 0 1
11144: PPUSH
11145: CALL_OW 255
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 250
11159: PPUSH
11160: LD_VAR 0 1
11164: PPUSH
11165: CALL_OW 251
11169: PPUSH
11170: LD_VAR 0 2
11174: PPUSH
11175: CALL 9414 0 4
11179: ST_TO_ADDR
// end ;
11180: LD_VAR 0 3
11184: RET
// export function DangerInArea ( side , area ) ; begin
11185: LD_INT 0
11187: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: LD_VAR 0 2
11197: PPUSH
11198: LD_INT 81
11200: PUSH
11201: LD_VAR 0 1
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PPUSH
11210: CALL_OW 70
11214: ST_TO_ADDR
// end ;
11215: LD_VAR 0 3
11219: RET
// export function IsExtension ( b ) ; begin
11220: LD_INT 0
11222: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: LD_VAR 0 1
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 20
11238: PUSH
11239: LD_INT 22
11241: PUSH
11242: LD_INT 17
11244: PUSH
11245: LD_INT 24
11247: PUSH
11248: LD_INT 21
11250: PUSH
11251: LD_INT 19
11253: PUSH
11254: LD_INT 16
11256: PUSH
11257: LD_INT 25
11259: PUSH
11260: LD_INT 18
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: IN
11275: ST_TO_ADDR
// end ;
11276: LD_VAR 0 2
11280: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11281: LD_INT 0
11283: PPUSH
11284: PPUSH
11285: PPUSH
// result := [ ] ;
11286: LD_ADDR_VAR 0 4
11290: PUSH
11291: EMPTY
11292: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11293: LD_ADDR_VAR 0 5
11297: PUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: LD_INT 21
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 70
11317: ST_TO_ADDR
// if not tmp then
11318: LD_VAR 0 5
11322: NOT
11323: IFFALSE 11327
// exit ;
11325: GO 11391
// if checkLink then
11327: LD_VAR 0 3
11331: IFFALSE 11381
// begin for i in tmp do
11333: LD_ADDR_VAR 0 6
11337: PUSH
11338: LD_VAR 0 5
11342: PUSH
11343: FOR_IN
11344: IFFALSE 11379
// if GetBase ( i ) <> base then
11346: LD_VAR 0 6
11350: PPUSH
11351: CALL_OW 274
11355: PUSH
11356: LD_VAR 0 1
11360: NONEQUAL
11361: IFFALSE 11377
// ComLinkToBase ( base , i ) ;
11363: LD_VAR 0 1
11367: PPUSH
11368: LD_VAR 0 6
11372: PPUSH
11373: CALL_OW 169
11377: GO 11343
11379: POP
11380: POP
// end ; result := tmp ;
11381: LD_ADDR_VAR 0 4
11385: PUSH
11386: LD_VAR 0 5
11390: ST_TO_ADDR
// end ;
11391: LD_VAR 0 4
11395: RET
// export function ComComplete ( units , b ) ; var i ; begin
11396: LD_INT 0
11398: PPUSH
11399: PPUSH
// if not units then
11400: LD_VAR 0 1
11404: NOT
11405: IFFALSE 11409
// exit ;
11407: GO 11499
// for i in units do
11409: LD_ADDR_VAR 0 4
11413: PUSH
11414: LD_VAR 0 1
11418: PUSH
11419: FOR_IN
11420: IFFALSE 11497
// if BuildingStatus ( b ) = bs_build then
11422: LD_VAR 0 2
11426: PPUSH
11427: CALL_OW 461
11431: PUSH
11432: LD_INT 1
11434: EQUAL
11435: IFFALSE 11495
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11437: LD_VAR 0 4
11441: PPUSH
11442: LD_STRING h
11444: PUSH
11445: LD_VAR 0 2
11449: PPUSH
11450: CALL_OW 250
11454: PUSH
11455: LD_VAR 0 2
11459: PPUSH
11460: CALL_OW 251
11464: PUSH
11465: LD_VAR 0 2
11469: PUSH
11470: LD_INT 0
11472: PUSH
11473: LD_INT 0
11475: PUSH
11476: LD_INT 0
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: PPUSH
11491: CALL_OW 446
11495: GO 11419
11497: POP
11498: POP
// end ;
11499: LD_VAR 0 3
11503: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11504: LD_INT 0
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11512: LD_VAR 0 1
11516: NOT
11517: IFTRUE 11534
11519: PUSH
11520: LD_VAR 0 1
11524: PPUSH
11525: CALL_OW 263
11529: PUSH
11530: LD_INT 2
11532: NONEQUAL
11533: OR
11534: IFFALSE 11538
// exit ;
11536: GO 11854
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11538: LD_ADDR_VAR 0 6
11542: PUSH
11543: LD_INT 22
11545: PUSH
11546: LD_VAR 0 1
11550: PPUSH
11551: CALL_OW 255
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 30
11565: PUSH
11566: LD_INT 36
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 34
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PPUSH
11592: CALL_OW 69
11596: ST_TO_ADDR
// if not tmp then
11597: LD_VAR 0 6
11601: NOT
11602: IFFALSE 11606
// exit ;
11604: GO 11854
// result := [ ] ;
11606: LD_ADDR_VAR 0 2
11610: PUSH
11611: EMPTY
11612: ST_TO_ADDR
// for i in tmp do
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: LD_VAR 0 6
11622: PUSH
11623: FOR_IN
11624: IFFALSE 11695
// begin t := UnitsInside ( i ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: CALL_OW 313
11640: ST_TO_ADDR
// if t then
11641: LD_VAR 0 4
11645: IFFALSE 11693
// for j in t do
11647: LD_ADDR_VAR 0 7
11651: PUSH
11652: LD_VAR 0 4
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11691
// result := Replace ( result , result + 1 , j ) ;
11660: LD_ADDR_VAR 0 2
11664: PUSH
11665: LD_VAR 0 2
11669: PPUSH
11670: LD_VAR 0 2
11674: PUSH
11675: LD_INT 1
11677: PLUS
11678: PPUSH
11679: LD_VAR 0 7
11683: PPUSH
11684: CALL_OW 1
11688: ST_TO_ADDR
11689: GO 11657
11691: POP
11692: POP
// end ;
11693: GO 11623
11695: POP
11696: POP
// if not result then
11697: LD_VAR 0 2
11701: NOT
11702: IFFALSE 11706
// exit ;
11704: GO 11854
// mech := result [ 1 ] ;
11706: LD_ADDR_VAR 0 5
11710: PUSH
11711: LD_VAR 0 2
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: ST_TO_ADDR
// if result > 1 then
11720: LD_VAR 0 2
11724: PUSH
11725: LD_INT 1
11727: GREATER
11728: IFFALSE 11840
// begin for i = 2 to result do
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: DOUBLE
11736: LD_INT 2
11738: DEC
11739: ST_TO_ADDR
11740: LD_VAR 0 2
11744: PUSH
11745: FOR_TO
11746: IFFALSE 11838
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11748: LD_ADDR_VAR 0 4
11752: PUSH
11753: LD_VAR 0 2
11757: PUSH
11758: LD_VAR 0 3
11762: ARRAY
11763: PPUSH
11764: LD_INT 3
11766: PPUSH
11767: CALL_OW 259
11771: PUSH
11772: LD_VAR 0 2
11776: PUSH
11777: LD_VAR 0 3
11781: ARRAY
11782: PPUSH
11783: CALL_OW 432
11787: MINUS
11788: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11789: LD_VAR 0 4
11793: PUSH
11794: LD_VAR 0 5
11798: PPUSH
11799: LD_INT 3
11801: PPUSH
11802: CALL_OW 259
11806: PUSH
11807: LD_VAR 0 5
11811: PPUSH
11812: CALL_OW 432
11816: MINUS
11817: GREATEREQUAL
11818: IFFALSE 11836
// mech := result [ i ] ;
11820: LD_ADDR_VAR 0 5
11824: PUSH
11825: LD_VAR 0 2
11829: PUSH
11830: LD_VAR 0 3
11834: ARRAY
11835: ST_TO_ADDR
// end ;
11836: GO 11745
11838: POP
11839: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: CALL_OW 135
// end ;
11854: LD_VAR 0 2
11858: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11859: LD_INT 0
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
11873: PPUSH
// result := [ ] ;
11874: LD_ADDR_VAR 0 7
11878: PUSH
11879: EMPTY
11880: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11881: LD_VAR 0 1
11885: PPUSH
11886: CALL_OW 266
11890: PUSH
11891: LD_INT 0
11893: PUSH
11894: LD_INT 1
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: IN
11901: NOT
11902: IFFALSE 11906
// exit ;
11904: GO 13546
// if name then
11906: LD_VAR 0 3
11910: IFFALSE 11926
// SetBName ( base_dep , name ) ;
11912: LD_VAR 0 1
11916: PPUSH
11917: LD_VAR 0 3
11921: PPUSH
11922: CALL_OW 500
// base := GetBase ( base_dep ) ;
11926: LD_ADDR_VAR 0 15
11930: PUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 274
11940: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11941: LD_ADDR_VAR 0 16
11945: PUSH
11946: LD_VAR 0 1
11950: PPUSH
11951: CALL_OW 255
11955: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11956: LD_ADDR_VAR 0 17
11960: PUSH
11961: LD_VAR 0 1
11965: PPUSH
11966: CALL_OW 248
11970: ST_TO_ADDR
// if sources then
11971: LD_VAR 0 5
11975: IFFALSE 12022
// for i = 1 to 3 do
11977: LD_ADDR_VAR 0 8
11981: PUSH
11982: DOUBLE
11983: LD_INT 1
11985: DEC
11986: ST_TO_ADDR
11987: LD_INT 3
11989: PUSH
11990: FOR_TO
11991: IFFALSE 12020
// AddResourceType ( base , i , sources [ i ] ) ;
11993: LD_VAR 0 15
11997: PPUSH
11998: LD_VAR 0 8
12002: PPUSH
12003: LD_VAR 0 5
12007: PUSH
12008: LD_VAR 0 8
12012: ARRAY
12013: PPUSH
12014: CALL_OW 276
12018: GO 11990
12020: POP
12021: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12022: LD_ADDR_VAR 0 18
12026: PUSH
12027: LD_VAR 0 15
12031: PPUSH
12032: LD_VAR 0 2
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL 11281 0 3
12044: ST_TO_ADDR
// InitHc ;
12045: CALL_OW 19
// InitUc ;
12049: CALL_OW 18
// uc_side := side ;
12053: LD_ADDR_OWVAR 20
12057: PUSH
12058: LD_VAR 0 16
12062: ST_TO_ADDR
// uc_nation := nation ;
12063: LD_ADDR_OWVAR 21
12067: PUSH
12068: LD_VAR 0 17
12072: ST_TO_ADDR
// if buildings then
12073: LD_VAR 0 18
12077: IFFALSE 13405
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12079: LD_ADDR_VAR 0 19
12083: PUSH
12084: LD_VAR 0 18
12088: PPUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 29
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 30
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 72
12121: ST_TO_ADDR
// if tmp then
12122: LD_VAR 0 19
12126: IFFALSE 12174
// for i in tmp do
12128: LD_ADDR_VAR 0 8
12132: PUSH
12133: LD_VAR 0 19
12137: PUSH
12138: FOR_IN
12139: IFFALSE 12172
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12141: LD_VAR 0 8
12145: PPUSH
12146: CALL_OW 250
12150: PPUSH
12151: LD_VAR 0 8
12155: PPUSH
12156: CALL_OW 251
12160: PPUSH
12161: LD_VAR 0 16
12165: PPUSH
12166: CALL_OW 441
12170: GO 12138
12172: POP
12173: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12174: LD_VAR 0 18
12178: PPUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 32
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 30
12194: PUSH
12195: LD_INT 33
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: PPUSH
12207: CALL_OW 72
12211: IFFALSE 12299
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12213: LD_ADDR_VAR 0 8
12217: PUSH
12218: LD_VAR 0 18
12222: PPUSH
12223: LD_INT 2
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 32
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 30
12238: PUSH
12239: LD_INT 33
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 72
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12297
// begin if not GetBWeapon ( i ) then
12259: LD_VAR 0 8
12263: PPUSH
12264: CALL_OW 269
12268: NOT
12269: IFFALSE 12295
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12271: LD_VAR 0 8
12275: PPUSH
12276: LD_VAR 0 8
12280: PPUSH
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL 13551 0 2
12290: PPUSH
12291: CALL_OW 431
// end ;
12295: GO 12256
12297: POP
12298: POP
// end ; for i = 1 to personel do
12299: LD_ADDR_VAR 0 8
12303: PUSH
12304: DOUBLE
12305: LD_INT 1
12307: DEC
12308: ST_TO_ADDR
12309: LD_VAR 0 6
12313: PUSH
12314: FOR_TO
12315: IFFALSE 13385
// begin if i > 4 then
12317: LD_VAR 0 8
12321: PUSH
12322: LD_INT 4
12324: GREATER
12325: IFFALSE 12329
// break ;
12327: GO 13385
// case i of 1 :
12329: LD_VAR 0 8
12333: PUSH
12334: LD_INT 1
12336: DOUBLE
12337: EQUAL
12338: IFTRUE 12342
12340: GO 12422
12342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12343: LD_ADDR_VAR 0 12
12347: PUSH
12348: LD_VAR 0 18
12352: PPUSH
12353: LD_INT 22
12355: PUSH
12356: LD_VAR 0 16
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 58
12367: PUSH
12368: EMPTY
12369: LIST
12370: PUSH
12371: LD_INT 2
12373: PUSH
12374: LD_INT 30
12376: PUSH
12377: LD_INT 32
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 4
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 30
12396: PUSH
12397: LD_INT 5
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 72
12419: ST_TO_ADDR
12420: GO 12644
12422: LD_INT 2
12424: DOUBLE
12425: EQUAL
12426: IFTRUE 12430
12428: GO 12492
12430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12431: LD_ADDR_VAR 0 12
12435: PUSH
12436: LD_VAR 0 18
12440: PPUSH
12441: LD_INT 22
12443: PUSH
12444: LD_VAR 0 16
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: LD_INT 30
12458: PUSH
12459: LD_INT 0
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 30
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PPUSH
12485: CALL_OW 72
12489: ST_TO_ADDR
12490: GO 12644
12492: LD_INT 3
12494: DOUBLE
12495: EQUAL
12496: IFTRUE 12500
12498: GO 12562
12500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12501: LD_ADDR_VAR 0 12
12505: PUSH
12506: LD_VAR 0 18
12510: PPUSH
12511: LD_INT 22
12513: PUSH
12514: LD_VAR 0 16
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 30
12528: PUSH
12529: LD_INT 2
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 30
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: ST_TO_ADDR
12560: GO 12644
12562: LD_INT 4
12564: DOUBLE
12565: EQUAL
12566: IFTRUE 12570
12568: GO 12643
12570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12571: LD_ADDR_VAR 0 12
12575: PUSH
12576: LD_VAR 0 18
12580: PPUSH
12581: LD_INT 22
12583: PUSH
12584: LD_VAR 0 16
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 6
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 30
12608: PUSH
12609: LD_INT 7
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 8
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: ST_TO_ADDR
12641: GO 12644
12643: POP
// if i = 1 then
12644: LD_VAR 0 8
12648: PUSH
12649: LD_INT 1
12651: EQUAL
12652: IFFALSE 12763
// begin tmp := [ ] ;
12654: LD_ADDR_VAR 0 19
12658: PUSH
12659: EMPTY
12660: ST_TO_ADDR
// for j in f do
12661: LD_ADDR_VAR 0 9
12665: PUSH
12666: LD_VAR 0 12
12670: PUSH
12671: FOR_IN
12672: IFFALSE 12745
// if GetBType ( j ) = b_bunker then
12674: LD_VAR 0 9
12678: PPUSH
12679: CALL_OW 266
12683: PUSH
12684: LD_INT 32
12686: EQUAL
12687: IFFALSE 12714
// tmp := Insert ( tmp , 1 , j ) else
12689: LD_ADDR_VAR 0 19
12693: PUSH
12694: LD_VAR 0 19
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: LD_VAR 0 9
12706: PPUSH
12707: CALL_OW 2
12711: ST_TO_ADDR
12712: GO 12743
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12714: LD_ADDR_VAR 0 19
12718: PUSH
12719: LD_VAR 0 19
12723: PPUSH
12724: LD_VAR 0 19
12728: PUSH
12729: LD_INT 1
12731: PLUS
12732: PPUSH
12733: LD_VAR 0 9
12737: PPUSH
12738: CALL_OW 2
12742: ST_TO_ADDR
12743: GO 12671
12745: POP
12746: POP
// if tmp then
12747: LD_VAR 0 19
12751: IFFALSE 12763
// f := tmp ;
12753: LD_ADDR_VAR 0 12
12757: PUSH
12758: LD_VAR 0 19
12762: ST_TO_ADDR
// end ; x := personel [ i ] ;
12763: LD_ADDR_VAR 0 13
12767: PUSH
12768: LD_VAR 0 6
12772: PUSH
12773: LD_VAR 0 8
12777: ARRAY
12778: ST_TO_ADDR
// if x = - 1 then
12779: LD_VAR 0 13
12783: PUSH
12784: LD_INT 1
12786: NEG
12787: EQUAL
12788: IFFALSE 12999
// begin for j in f do
12790: LD_ADDR_VAR 0 9
12794: PUSH
12795: LD_VAR 0 12
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12995
// repeat InitHc ;
12803: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12807: LD_VAR 0 9
12811: PPUSH
12812: CALL_OW 266
12816: PUSH
12817: LD_INT 5
12819: EQUAL
12820: IFFALSE 12890
// begin if UnitsInside ( j ) < 3 then
12822: LD_VAR 0 9
12826: PPUSH
12827: CALL_OW 313
12831: PUSH
12832: LD_INT 3
12834: LESS
12835: IFFALSE 12871
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12837: LD_INT 0
12839: PPUSH
12840: LD_INT 5
12842: PUSH
12843: LD_INT 8
12845: PUSH
12846: LD_INT 9
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_VAR 0 17
12858: ARRAY
12859: PPUSH
12860: LD_VAR 0 4
12864: PPUSH
12865: CALL_OW 380
12869: GO 12888
// PrepareHuman ( false , i , skill ) ;
12871: LD_INT 0
12873: PPUSH
12874: LD_VAR 0 8
12878: PPUSH
12879: LD_VAR 0 4
12883: PPUSH
12884: CALL_OW 380
// end else
12888: GO 12907
// PrepareHuman ( false , i , skill ) ;
12890: LD_INT 0
12892: PPUSH
12893: LD_VAR 0 8
12897: PPUSH
12898: LD_VAR 0 4
12902: PPUSH
12903: CALL_OW 380
// un := CreateHuman ;
12907: LD_ADDR_VAR 0 14
12911: PUSH
12912: CALL_OW 44
12916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12917: LD_ADDR_VAR 0 7
12921: PUSH
12922: LD_VAR 0 7
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: LD_VAR 0 14
12934: PPUSH
12935: CALL_OW 2
12939: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12940: LD_VAR 0 14
12944: PPUSH
12945: LD_VAR 0 9
12949: PPUSH
12950: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12954: LD_VAR 0 9
12958: PPUSH
12959: CALL_OW 313
12963: PUSH
12964: LD_INT 6
12966: EQUAL
12967: IFTRUE 12991
12969: PUSH
12970: LD_VAR 0 9
12974: PPUSH
12975: CALL_OW 266
12979: PUSH
12980: LD_INT 32
12982: PUSH
12983: LD_INT 31
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: IN
12990: OR
12991: IFFALSE 12803
12993: GO 12800
12995: POP
12996: POP
// end else
12997: GO 13383
// for j = 1 to x do
12999: LD_ADDR_VAR 0 9
13003: PUSH
13004: DOUBLE
13005: LD_INT 1
13007: DEC
13008: ST_TO_ADDR
13009: LD_VAR 0 13
13013: PUSH
13014: FOR_TO
13015: IFFALSE 13381
// begin InitHc ;
13017: CALL_OW 19
// if not f then
13021: LD_VAR 0 12
13025: NOT
13026: IFFALSE 13115
// begin PrepareHuman ( false , i , skill ) ;
13028: LD_INT 0
13030: PPUSH
13031: LD_VAR 0 8
13035: PPUSH
13036: LD_VAR 0 4
13040: PPUSH
13041: CALL_OW 380
// un := CreateHuman ;
13045: LD_ADDR_VAR 0 14
13049: PUSH
13050: CALL_OW 44
13054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13055: LD_ADDR_VAR 0 7
13059: PUSH
13060: LD_VAR 0 7
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: LD_VAR 0 14
13072: PPUSH
13073: CALL_OW 2
13077: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13078: LD_VAR 0 14
13082: PPUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 250
13092: PPUSH
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 251
13102: PPUSH
13103: LD_INT 10
13105: PPUSH
13106: LD_INT 0
13108: PPUSH
13109: CALL_OW 50
// continue ;
13113: GO 13014
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13115: LD_VAR 0 12
13119: PUSH
13120: LD_INT 1
13122: ARRAY
13123: PPUSH
13124: CALL_OW 313
13128: IFFALSE 13156
13130: PUSH
13131: LD_VAR 0 12
13135: PUSH
13136: LD_INT 1
13138: ARRAY
13139: PPUSH
13140: CALL_OW 266
13144: PUSH
13145: LD_INT 32
13147: PUSH
13148: LD_INT 31
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: IN
13155: AND
13156: IFTRUE 13177
13158: PUSH
13159: LD_VAR 0 12
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: CALL_OW 313
13172: PUSH
13173: LD_INT 6
13175: EQUAL
13176: OR
13177: IFFALSE 13197
// f := Delete ( f , 1 ) ;
13179: LD_ADDR_VAR 0 12
13183: PUSH
13184: LD_VAR 0 12
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 3
13196: ST_TO_ADDR
// if not f then
13197: LD_VAR 0 12
13201: NOT
13202: IFFALSE 13220
// begin x := x + 2 ;
13204: LD_ADDR_VAR 0 13
13208: PUSH
13209: LD_VAR 0 13
13213: PUSH
13214: LD_INT 2
13216: PLUS
13217: ST_TO_ADDR
// continue ;
13218: GO 13014
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13220: LD_VAR 0 12
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PPUSH
13229: CALL_OW 266
13233: PUSH
13234: LD_INT 5
13236: EQUAL
13237: IFFALSE 13311
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13239: LD_VAR 0 12
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: CALL_OW 313
13252: PUSH
13253: LD_INT 3
13255: LESS
13256: IFFALSE 13292
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13258: LD_INT 0
13260: PPUSH
13261: LD_INT 5
13263: PUSH
13264: LD_INT 8
13266: PUSH
13267: LD_INT 9
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: PUSH
13275: LD_VAR 0 17
13279: ARRAY
13280: PPUSH
13281: LD_VAR 0 4
13285: PPUSH
13286: CALL_OW 380
13290: GO 13309
// PrepareHuman ( false , i , skill ) ;
13292: LD_INT 0
13294: PPUSH
13295: LD_VAR 0 8
13299: PPUSH
13300: LD_VAR 0 4
13304: PPUSH
13305: CALL_OW 380
// end else
13309: GO 13328
// PrepareHuman ( false , i , skill ) ;
13311: LD_INT 0
13313: PPUSH
13314: LD_VAR 0 8
13318: PPUSH
13319: LD_VAR 0 4
13323: PPUSH
13324: CALL_OW 380
// un := CreateHuman ;
13328: LD_ADDR_VAR 0 14
13332: PUSH
13333: CALL_OW 44
13337: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13338: LD_ADDR_VAR 0 7
13342: PUSH
13343: LD_VAR 0 7
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_VAR 0 14
13355: PPUSH
13356: CALL_OW 2
13360: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13361: LD_VAR 0 14
13365: PPUSH
13366: LD_VAR 0 12
13370: PUSH
13371: LD_INT 1
13373: ARRAY
13374: PPUSH
13375: CALL_OW 52
// end ;
13379: GO 13014
13381: POP
13382: POP
// end ;
13383: GO 12314
13385: POP
13386: POP
// result := result ^ buildings ;
13387: LD_ADDR_VAR 0 7
13391: PUSH
13392: LD_VAR 0 7
13396: PUSH
13397: LD_VAR 0 18
13401: ADD
13402: ST_TO_ADDR
// end else
13403: GO 13546
// begin for i = 1 to personel do
13405: LD_ADDR_VAR 0 8
13409: PUSH
13410: DOUBLE
13411: LD_INT 1
13413: DEC
13414: ST_TO_ADDR
13415: LD_VAR 0 6
13419: PUSH
13420: FOR_TO
13421: IFFALSE 13544
// begin if i > 4 then
13423: LD_VAR 0 8
13427: PUSH
13428: LD_INT 4
13430: GREATER
13431: IFFALSE 13435
// break ;
13433: GO 13544
// x := personel [ i ] ;
13435: LD_ADDR_VAR 0 13
13439: PUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_VAR 0 8
13449: ARRAY
13450: ST_TO_ADDR
// if x = - 1 then
13451: LD_VAR 0 13
13455: PUSH
13456: LD_INT 1
13458: NEG
13459: EQUAL
13460: IFFALSE 13464
// continue ;
13462: GO 13420
// PrepareHuman ( false , i , skill ) ;
13464: LD_INT 0
13466: PPUSH
13467: LD_VAR 0 8
13471: PPUSH
13472: LD_VAR 0 4
13476: PPUSH
13477: CALL_OW 380
// un := CreateHuman ;
13481: LD_ADDR_VAR 0 14
13485: PUSH
13486: CALL_OW 44
13490: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13491: LD_VAR 0 14
13495: PPUSH
13496: LD_VAR 0 1
13500: PPUSH
13501: CALL_OW 250
13505: PPUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: CALL_OW 251
13515: PPUSH
13516: LD_INT 10
13518: PPUSH
13519: LD_INT 0
13521: PPUSH
13522: CALL_OW 50
// result := result ^ un ;
13526: LD_ADDR_VAR 0 7
13530: PUSH
13531: LD_VAR 0 7
13535: PUSH
13536: LD_VAR 0 14
13540: ADD
13541: ST_TO_ADDR
// end ;
13542: GO 13420
13544: POP
13545: POP
// end ; end ;
13546: LD_VAR 0 7
13550: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13551: LD_INT 0
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
13559: PPUSH
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
// result := false ;
13569: LD_ADDR_VAR 0 3
13573: PUSH
13574: LD_INT 0
13576: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13577: LD_VAR 0 1
13581: NOT
13582: IFTRUE 13607
13584: PUSH
13585: LD_VAR 0 1
13589: PPUSH
13590: CALL_OW 266
13594: PUSH
13595: LD_INT 32
13597: PUSH
13598: LD_INT 33
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: IN
13605: NOT
13606: OR
13607: IFFALSE 13611
// exit ;
13609: GO 14746
// nat := GetNation ( tower ) ;
13611: LD_ADDR_VAR 0 12
13615: PUSH
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 248
13625: ST_TO_ADDR
// side := GetSide ( tower ) ;
13626: LD_ADDR_VAR 0 16
13630: PUSH
13631: LD_VAR 0 1
13635: PPUSH
13636: CALL_OW 255
13640: ST_TO_ADDR
// x := GetX ( tower ) ;
13641: LD_ADDR_VAR 0 10
13645: PUSH
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 250
13655: ST_TO_ADDR
// y := GetY ( tower ) ;
13656: LD_ADDR_VAR 0 11
13660: PUSH
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 251
13670: ST_TO_ADDR
// if not x or not y then
13671: LD_VAR 0 10
13675: NOT
13676: IFTRUE 13685
13678: PUSH
13679: LD_VAR 0 11
13683: NOT
13684: OR
13685: IFFALSE 13689
// exit ;
13687: GO 14746
// weapon := 0 ;
13689: LD_ADDR_VAR 0 18
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// fac_list := [ ] ;
13697: LD_ADDR_VAR 0 17
13701: PUSH
13702: EMPTY
13703: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13704: LD_ADDR_VAR 0 6
13708: PUSH
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 274
13718: PPUSH
13719: LD_VAR 0 2
13723: PPUSH
13724: LD_INT 0
13726: PPUSH
13727: CALL 11281 0 3
13731: PPUSH
13732: LD_INT 30
13734: PUSH
13735: LD_INT 3
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: PPUSH
13742: CALL_OW 72
13746: ST_TO_ADDR
// if not factories then
13747: LD_VAR 0 6
13751: NOT
13752: IFFALSE 13756
// exit ;
13754: GO 14746
// for i in factories do
13756: LD_ADDR_VAR 0 8
13760: PUSH
13761: LD_VAR 0 6
13765: PUSH
13766: FOR_IN
13767: IFFALSE 13792
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13769: LD_ADDR_VAR 0 17
13773: PUSH
13774: LD_VAR 0 17
13778: PUSH
13779: LD_VAR 0 8
13783: PPUSH
13784: CALL_OW 478
13788: UNION
13789: ST_TO_ADDR
13790: GO 13766
13792: POP
13793: POP
// if not fac_list then
13794: LD_VAR 0 17
13798: NOT
13799: IFFALSE 13803
// exit ;
13801: GO 14746
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13803: LD_ADDR_VAR 0 5
13807: PUSH
13808: LD_INT 4
13810: PUSH
13811: LD_INT 5
13813: PUSH
13814: LD_INT 9
13816: PUSH
13817: LD_INT 10
13819: PUSH
13820: LD_INT 6
13822: PUSH
13823: LD_INT 7
13825: PUSH
13826: LD_INT 11
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 27
13840: PUSH
13841: LD_INT 28
13843: PUSH
13844: LD_INT 26
13846: PUSH
13847: LD_INT 30
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 43
13858: PUSH
13859: LD_INT 44
13861: PUSH
13862: LD_INT 46
13864: PUSH
13865: LD_INT 45
13867: PUSH
13868: LD_INT 47
13870: PUSH
13871: LD_INT 49
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PUSH
13887: LD_VAR 0 12
13891: ARRAY
13892: ST_TO_ADDR
// list := list isect fac_list ;
13893: LD_ADDR_VAR 0 5
13897: PUSH
13898: LD_VAR 0 5
13902: PUSH
13903: LD_VAR 0 17
13907: ISECT
13908: ST_TO_ADDR
// if not list then
13909: LD_VAR 0 5
13913: NOT
13914: IFFALSE 13918
// exit ;
13916: GO 14746
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13918: LD_VAR 0 12
13922: PUSH
13923: LD_INT 3
13925: EQUAL
13926: IFFALSE 13938
13928: PUSH
13929: LD_INT 49
13931: PUSH
13932: LD_VAR 0 5
13936: IN
13937: AND
13938: IFFALSE 13958
13940: PUSH
13941: LD_INT 31
13943: PPUSH
13944: LD_VAR 0 16
13948: PPUSH
13949: CALL_OW 321
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: AND
13958: IFFALSE 14018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13960: LD_INT 22
13962: PUSH
13963: LD_VAR 0 16
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 35
13974: PUSH
13975: LD_INT 49
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 91
13984: PUSH
13985: LD_VAR 0 1
13989: PUSH
13990: LD_INT 10
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 69
14007: NOT
14008: IFFALSE 14018
// weapon := ru_time_lapser ;
14010: LD_ADDR_VAR 0 18
14014: PUSH
14015: LD_INT 49
14017: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14018: LD_VAR 0 12
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: LD_INT 2
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: IN
14033: IFFALSE 14057
14035: PUSH
14036: LD_INT 11
14038: PUSH
14039: LD_VAR 0 5
14043: IN
14044: IFTRUE 14056
14046: PUSH
14047: LD_INT 30
14049: PUSH
14050: LD_VAR 0 5
14054: IN
14055: OR
14056: AND
14057: IFFALSE 14077
14059: PUSH
14060: LD_INT 6
14062: PPUSH
14063: LD_VAR 0 16
14067: PPUSH
14068: CALL_OW 321
14072: PUSH
14073: LD_INT 2
14075: EQUAL
14076: AND
14077: IFFALSE 14244
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14079: LD_INT 22
14081: PUSH
14082: LD_VAR 0 16
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 2
14093: PUSH
14094: LD_INT 35
14096: PUSH
14097: LD_INT 11
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 35
14106: PUSH
14107: LD_INT 30
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 91
14121: PUSH
14122: LD_VAR 0 1
14126: PUSH
14127: LD_INT 18
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: NOT
14145: IFFALSE 14221
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_VAR 0 16
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 2
14162: PUSH
14163: LD_INT 30
14165: PUSH
14166: LD_INT 32
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 30
14175: PUSH
14176: LD_INT 33
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 91
14190: PUSH
14191: LD_VAR 0 1
14195: PUSH
14196: LD_INT 12
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: PUSH
14217: LD_INT 2
14219: GREATER
14220: AND
14221: IFFALSE 14244
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14223: LD_ADDR_VAR 0 18
14227: PUSH
14228: LD_INT 11
14230: PUSH
14231: LD_INT 30
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_VAR 0 12
14242: ARRAY
14243: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14244: LD_VAR 0 18
14248: NOT
14249: IFFALSE 14269
14251: PUSH
14252: LD_INT 40
14254: PPUSH
14255: LD_VAR 0 16
14259: PPUSH
14260: CALL_OW 321
14264: PUSH
14265: LD_INT 2
14267: EQUAL
14268: AND
14269: IFFALSE 14305
14271: PUSH
14272: LD_INT 7
14274: PUSH
14275: LD_VAR 0 5
14279: IN
14280: IFTRUE 14292
14282: PUSH
14283: LD_INT 28
14285: PUSH
14286: LD_VAR 0 5
14290: IN
14291: OR
14292: IFTRUE 14304
14294: PUSH
14295: LD_INT 45
14297: PUSH
14298: LD_VAR 0 5
14302: IN
14303: OR
14304: AND
14305: IFFALSE 14559
// begin hex := GetHexInfo ( x , y ) ;
14307: LD_ADDR_VAR 0 4
14311: PUSH
14312: LD_VAR 0 10
14316: PPUSH
14317: LD_VAR 0 11
14321: PPUSH
14322: CALL_OW 546
14326: ST_TO_ADDR
// if hex [ 1 ] then
14327: LD_VAR 0 4
14331: PUSH
14332: LD_INT 1
14334: ARRAY
14335: IFFALSE 14339
// exit ;
14337: GO 14746
// height := hex [ 2 ] ;
14339: LD_ADDR_VAR 0 15
14343: PUSH
14344: LD_VAR 0 4
14348: PUSH
14349: LD_INT 2
14351: ARRAY
14352: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14353: LD_ADDR_VAR 0 14
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: LD_INT 3
14366: PUSH
14367: LD_INT 5
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// for i in tmp do
14376: LD_ADDR_VAR 0 8
14380: PUSH
14381: LD_VAR 0 14
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14557
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14389: LD_ADDR_VAR 0 9
14393: PUSH
14394: LD_VAR 0 10
14398: PPUSH
14399: LD_VAR 0 8
14403: PPUSH
14404: LD_INT 5
14406: PPUSH
14407: CALL_OW 272
14411: PUSH
14412: LD_VAR 0 11
14416: PPUSH
14417: LD_VAR 0 8
14421: PPUSH
14422: LD_INT 5
14424: PPUSH
14425: CALL_OW 273
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14434: LD_VAR 0 9
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 9
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: CALL_OW 488
14456: IFFALSE 14555
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14458: LD_ADDR_VAR 0 4
14462: PUSH
14463: LD_VAR 0 9
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_VAR 0 9
14476: PUSH
14477: LD_INT 2
14479: ARRAY
14480: PPUSH
14481: CALL_OW 546
14485: ST_TO_ADDR
// if hex [ 1 ] then
14486: LD_VAR 0 4
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: IFFALSE 14498
// continue ;
14496: GO 14386
// h := hex [ 2 ] ;
14498: LD_ADDR_VAR 0 13
14502: PUSH
14503: LD_VAR 0 4
14507: PUSH
14508: LD_INT 2
14510: ARRAY
14511: ST_TO_ADDR
// if h + 7 < height then
14512: LD_VAR 0 13
14516: PUSH
14517: LD_INT 7
14519: PLUS
14520: PUSH
14521: LD_VAR 0 15
14525: LESS
14526: IFFALSE 14555
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14528: LD_ADDR_VAR 0 18
14532: PUSH
14533: LD_INT 7
14535: PUSH
14536: LD_INT 28
14538: PUSH
14539: LD_INT 45
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: PUSH
14547: LD_VAR 0 12
14551: ARRAY
14552: ST_TO_ADDR
// break ;
14553: GO 14557
// end ; end ; end ;
14555: GO 14386
14557: POP
14558: POP
// end ; if not weapon then
14559: LD_VAR 0 18
14563: NOT
14564: IFFALSE 14624
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14566: LD_ADDR_VAR 0 5
14570: PUSH
14571: LD_VAR 0 5
14575: PUSH
14576: LD_INT 11
14578: PUSH
14579: LD_INT 30
14581: PUSH
14582: LD_INT 49
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: DIFF
14590: ST_TO_ADDR
// if not list then
14591: LD_VAR 0 5
14595: NOT
14596: IFFALSE 14600
// exit ;
14598: GO 14746
// weapon := list [ rand ( 1 , list ) ] ;
14600: LD_ADDR_VAR 0 18
14604: PUSH
14605: LD_VAR 0 5
14609: PUSH
14610: LD_INT 1
14612: PPUSH
14613: LD_VAR 0 5
14617: PPUSH
14618: CALL_OW 12
14622: ARRAY
14623: ST_TO_ADDR
// end ; if weapon then
14624: LD_VAR 0 18
14628: IFFALSE 14746
// begin tmp := CostOfWeapon ( weapon ) ;
14630: LD_ADDR_VAR 0 14
14634: PUSH
14635: LD_VAR 0 18
14639: PPUSH
14640: CALL_OW 451
14644: ST_TO_ADDR
// j := GetBase ( tower ) ;
14645: LD_ADDR_VAR 0 9
14649: PUSH
14650: LD_VAR 0 1
14654: PPUSH
14655: CALL_OW 274
14659: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14660: LD_VAR 0 9
14664: PPUSH
14665: LD_INT 1
14667: PPUSH
14668: CALL_OW 275
14672: PUSH
14673: LD_VAR 0 14
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: GREATEREQUAL
14682: IFFALSE 14708
14684: PUSH
14685: LD_VAR 0 9
14689: PPUSH
14690: LD_INT 2
14692: PPUSH
14693: CALL_OW 275
14697: PUSH
14698: LD_VAR 0 14
14702: PUSH
14703: LD_INT 2
14705: ARRAY
14706: GREATEREQUAL
14707: AND
14708: IFFALSE 14734
14710: PUSH
14711: LD_VAR 0 9
14715: PPUSH
14716: LD_INT 3
14718: PPUSH
14719: CALL_OW 275
14723: PUSH
14724: LD_VAR 0 14
14728: PUSH
14729: LD_INT 3
14731: ARRAY
14732: GREATEREQUAL
14733: AND
14734: IFFALSE 14746
// result := weapon ;
14736: LD_ADDR_VAR 0 3
14740: PUSH
14741: LD_VAR 0 18
14745: ST_TO_ADDR
// end ; end ;
14746: LD_VAR 0 3
14750: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14751: LD_INT 0
14753: PPUSH
14754: PPUSH
// result := true ;
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_INT 1
14762: ST_TO_ADDR
// if array1 = array2 then
14763: LD_VAR 0 1
14767: PUSH
14768: LD_VAR 0 2
14772: EQUAL
14773: IFFALSE 14833
// begin for i = 1 to array1 do
14775: LD_ADDR_VAR 0 4
14779: PUSH
14780: DOUBLE
14781: LD_INT 1
14783: DEC
14784: ST_TO_ADDR
14785: LD_VAR 0 1
14789: PUSH
14790: FOR_TO
14791: IFFALSE 14829
// if array1 [ i ] <> array2 [ i ] then
14793: LD_VAR 0 1
14797: PUSH
14798: LD_VAR 0 4
14802: ARRAY
14803: PUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 4
14813: ARRAY
14814: NONEQUAL
14815: IFFALSE 14827
// begin result := false ;
14817: LD_ADDR_VAR 0 3
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// break ;
14825: GO 14829
// end ;
14827: GO 14790
14829: POP
14830: POP
// end else
14831: GO 14841
// result := false ;
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_INT 0
14840: ST_TO_ADDR
// end ;
14841: LD_VAR 0 3
14845: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14846: LD_INT 0
14848: PPUSH
14849: PPUSH
// if not array1 or not array2 then
14850: LD_VAR 0 1
14854: NOT
14855: IFTRUE 14864
14857: PUSH
14858: LD_VAR 0 2
14862: NOT
14863: OR
14864: IFFALSE 14868
// exit ;
14866: GO 14932
// result := true ;
14868: LD_ADDR_VAR 0 3
14872: PUSH
14873: LD_INT 1
14875: ST_TO_ADDR
// for i = 1 to array1 do
14876: LD_ADDR_VAR 0 4
14880: PUSH
14881: DOUBLE
14882: LD_INT 1
14884: DEC
14885: ST_TO_ADDR
14886: LD_VAR 0 1
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14930
// if array1 [ i ] <> array2 [ i ] then
14894: LD_VAR 0 1
14898: PUSH
14899: LD_VAR 0 4
14903: ARRAY
14904: PUSH
14905: LD_VAR 0 2
14909: PUSH
14910: LD_VAR 0 4
14914: ARRAY
14915: NONEQUAL
14916: IFFALSE 14928
// begin result := false ;
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_INT 0
14925: ST_TO_ADDR
// break ;
14926: GO 14930
// end ;
14928: GO 14891
14930: POP
14931: POP
// end ;
14932: LD_VAR 0 3
14936: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
// pom := GetBase ( fac ) ;
14942: LD_ADDR_VAR 0 5
14946: PUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL_OW 274
14956: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 1
14969: ARRAY
14970: PPUSH
14971: LD_VAR 0 2
14975: PUSH
14976: LD_INT 2
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 2
14984: PUSH
14985: LD_INT 3
14987: ARRAY
14988: PPUSH
14989: LD_VAR 0 2
14993: PUSH
14994: LD_INT 4
14996: ARRAY
14997: PPUSH
14998: CALL_OW 449
15002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15003: LD_ADDR_VAR 0 3
15007: PUSH
15008: LD_VAR 0 5
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL_OW 275
15020: PUSH
15021: LD_VAR 0 4
15025: PUSH
15026: LD_INT 1
15028: ARRAY
15029: GREATEREQUAL
15030: IFFALSE 15056
15032: PUSH
15033: LD_VAR 0 5
15037: PPUSH
15038: LD_INT 2
15040: PPUSH
15041: CALL_OW 275
15045: PUSH
15046: LD_VAR 0 4
15050: PUSH
15051: LD_INT 2
15053: ARRAY
15054: GREATEREQUAL
15055: AND
15056: IFFALSE 15082
15058: PUSH
15059: LD_VAR 0 5
15063: PPUSH
15064: LD_INT 3
15066: PPUSH
15067: CALL_OW 275
15071: PUSH
15072: LD_VAR 0 4
15076: PUSH
15077: LD_INT 3
15079: ARRAY
15080: GREATEREQUAL
15081: AND
15082: ST_TO_ADDR
// end ;
15083: LD_VAR 0 3
15087: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
// pom := GetBase ( building ) ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL_OW 274
15108: ST_TO_ADDR
// if not pom then
15109: LD_VAR 0 3
15113: NOT
15114: IFFALSE 15118
// exit ;
15116: GO 15292
// btype := GetBType ( building ) ;
15118: LD_ADDR_VAR 0 5
15122: PUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL_OW 266
15132: ST_TO_ADDR
// if btype = b_armoury then
15133: LD_VAR 0 5
15137: PUSH
15138: LD_INT 4
15140: EQUAL
15141: IFFALSE 15151
// btype := b_barracks ;
15143: LD_ADDR_VAR 0 5
15147: PUSH
15148: LD_INT 5
15150: ST_TO_ADDR
// if btype = b_depot then
15151: LD_VAR 0 5
15155: PUSH
15156: LD_INT 0
15158: EQUAL
15159: IFFALSE 15169
// btype := b_warehouse ;
15161: LD_ADDR_VAR 0 5
15165: PUSH
15166: LD_INT 1
15168: ST_TO_ADDR
// if btype = b_workshop then
15169: LD_VAR 0 5
15173: PUSH
15174: LD_INT 2
15176: EQUAL
15177: IFFALSE 15187
// btype := b_factory ;
15179: LD_ADDR_VAR 0 5
15183: PUSH
15184: LD_INT 3
15186: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15187: LD_ADDR_VAR 0 4
15191: PUSH
15192: LD_VAR 0 5
15196: PPUSH
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 248
15206: PPUSH
15207: CALL_OW 450
15211: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15212: LD_ADDR_VAR 0 2
15216: PUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 275
15229: PUSH
15230: LD_VAR 0 4
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: GREATEREQUAL
15239: IFFALSE 15265
15241: PUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: LD_INT 2
15249: PPUSH
15250: CALL_OW 275
15254: PUSH
15255: LD_VAR 0 4
15259: PUSH
15260: LD_INT 2
15262: ARRAY
15263: GREATEREQUAL
15264: AND
15265: IFFALSE 15291
15267: PUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_INT 3
15275: PPUSH
15276: CALL_OW 275
15280: PUSH
15281: LD_VAR 0 4
15285: PUSH
15286: LD_INT 3
15288: ARRAY
15289: GREATEREQUAL
15290: AND
15291: ST_TO_ADDR
// end ;
15292: LD_VAR 0 2
15296: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15297: LD_INT 0
15299: PPUSH
15300: PPUSH
15301: PPUSH
// pom := GetBase ( building ) ;
15302: LD_ADDR_VAR 0 4
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 274
15316: ST_TO_ADDR
// if not pom then
15317: LD_VAR 0 4
15321: NOT
15322: IFFALSE 15326
// exit ;
15324: GO 15431
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15326: LD_ADDR_VAR 0 5
15330: PUSH
15331: LD_VAR 0 2
15335: PPUSH
15336: LD_VAR 0 1
15340: PPUSH
15341: CALL_OW 248
15345: PPUSH
15346: CALL_OW 450
15350: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15351: LD_ADDR_VAR 0 3
15355: PUSH
15356: LD_VAR 0 4
15360: PPUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL_OW 275
15368: PUSH
15369: LD_VAR 0 5
15373: PUSH
15374: LD_INT 1
15376: ARRAY
15377: GREATEREQUAL
15378: IFFALSE 15404
15380: PUSH
15381: LD_VAR 0 4
15385: PPUSH
15386: LD_INT 2
15388: PPUSH
15389: CALL_OW 275
15393: PUSH
15394: LD_VAR 0 5
15398: PUSH
15399: LD_INT 2
15401: ARRAY
15402: GREATEREQUAL
15403: AND
15404: IFFALSE 15430
15406: PUSH
15407: LD_VAR 0 4
15411: PPUSH
15412: LD_INT 3
15414: PPUSH
15415: CALL_OW 275
15419: PUSH
15420: LD_VAR 0 5
15424: PUSH
15425: LD_INT 3
15427: ARRAY
15428: GREATEREQUAL
15429: AND
15430: ST_TO_ADDR
// end ;
15431: LD_VAR 0 3
15435: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
// result := false ;
15449: LD_ADDR_VAR 0 8
15453: PUSH
15454: LD_INT 0
15456: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15457: LD_VAR 0 5
15461: NOT
15462: IFTRUE 15471
15464: PUSH
15465: LD_VAR 0 1
15469: NOT
15470: OR
15471: IFTRUE 15480
15473: PUSH
15474: LD_VAR 0 2
15478: NOT
15479: OR
15480: IFTRUE 15489
15482: PUSH
15483: LD_VAR 0 3
15487: NOT
15488: OR
15489: IFFALSE 15493
// exit ;
15491: GO 16319
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15493: LD_ADDR_VAR 0 14
15497: PUSH
15498: LD_VAR 0 1
15502: PPUSH
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_VAR 0 4
15517: PPUSH
15518: LD_VAR 0 5
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PPUSH
15527: CALL_OW 248
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL 17600 0 6
15539: ST_TO_ADDR
// if not hexes then
15540: LD_VAR 0 14
15544: NOT
15545: IFFALSE 15549
// exit ;
15547: GO 16319
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15549: LD_ADDR_VAR 0 17
15553: PUSH
15554: LD_VAR 0 5
15558: PPUSH
15559: LD_INT 22
15561: PUSH
15562: LD_VAR 0 13
15566: PPUSH
15567: CALL_OW 255
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: LD_INT 30
15581: PUSH
15582: LD_INT 0
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 30
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 72
15612: ST_TO_ADDR
// for i = 1 to hexes do
15613: LD_ADDR_VAR 0 9
15617: PUSH
15618: DOUBLE
15619: LD_INT 1
15621: DEC
15622: ST_TO_ADDR
15623: LD_VAR 0 14
15627: PUSH
15628: FOR_TO
15629: IFFALSE 16317
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15631: LD_ADDR_VAR 0 13
15635: PUSH
15636: LD_VAR 0 14
15640: PUSH
15641: LD_VAR 0 9
15645: ARRAY
15646: PUSH
15647: LD_INT 1
15649: ARRAY
15650: PPUSH
15651: LD_VAR 0 14
15655: PUSH
15656: LD_VAR 0 9
15660: ARRAY
15661: PUSH
15662: LD_INT 2
15664: ARRAY
15665: PPUSH
15666: CALL_OW 428
15670: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15671: LD_VAR 0 14
15675: PUSH
15676: LD_VAR 0 9
15680: ARRAY
15681: PUSH
15682: LD_INT 1
15684: ARRAY
15685: PPUSH
15686: LD_VAR 0 14
15690: PUSH
15691: LD_VAR 0 9
15695: ARRAY
15696: PUSH
15697: LD_INT 2
15699: ARRAY
15700: PPUSH
15701: CALL_OW 351
15705: IFTRUE 15744
15707: PUSH
15708: LD_VAR 0 14
15712: PUSH
15713: LD_VAR 0 9
15717: ARRAY
15718: PUSH
15719: LD_INT 1
15721: ARRAY
15722: PPUSH
15723: LD_VAR 0 14
15727: PUSH
15728: LD_VAR 0 9
15732: ARRAY
15733: PUSH
15734: LD_INT 2
15736: ARRAY
15737: PPUSH
15738: CALL_OW 488
15742: NOT
15743: OR
15744: IFTRUE 15761
15746: PUSH
15747: LD_VAR 0 13
15751: PPUSH
15752: CALL_OW 247
15756: PUSH
15757: LD_INT 3
15759: EQUAL
15760: OR
15761: IFFALSE 15767
// exit ;
15763: POP
15764: POP
15765: GO 16319
// if not tmp then
15767: LD_VAR 0 13
15771: NOT
15772: IFFALSE 15776
// continue ;
15774: GO 15628
// result := true ;
15776: LD_ADDR_VAR 0 8
15780: PUSH
15781: LD_INT 1
15783: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15784: LD_VAR 0 6
15788: IFFALSE 15805
15790: PUSH
15791: LD_VAR 0 13
15795: PPUSH
15796: CALL_OW 247
15800: PUSH
15801: LD_INT 2
15803: EQUAL
15804: AND
15805: IFFALSE 15822
15807: PUSH
15808: LD_VAR 0 13
15812: PPUSH
15813: CALL_OW 263
15817: PUSH
15818: LD_INT 1
15820: EQUAL
15821: AND
15822: IFFALSE 15986
// begin if IsDrivenBy ( tmp ) then
15824: LD_VAR 0 13
15828: PPUSH
15829: CALL_OW 311
15833: IFFALSE 15837
// continue ;
15835: GO 15628
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15837: LD_VAR 0 6
15841: PPUSH
15842: LD_INT 3
15844: PUSH
15845: LD_INT 60
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 3
15857: PUSH
15858: LD_INT 55
15860: PUSH
15861: EMPTY
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 72
15876: IFFALSE 15984
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15878: LD_ADDR_VAR 0 18
15882: PUSH
15883: LD_VAR 0 6
15887: PPUSH
15888: LD_INT 3
15890: PUSH
15891: LD_INT 60
15893: PUSH
15894: EMPTY
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 55
15906: PUSH
15907: EMPTY
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PPUSH
15918: CALL_OW 72
15922: PUSH
15923: LD_INT 1
15925: ARRAY
15926: ST_TO_ADDR
// if IsInUnit ( driver ) then
15927: LD_VAR 0 18
15931: PPUSH
15932: CALL_OW 310
15936: IFFALSE 15947
// ComExit ( driver ) ;
15938: LD_VAR 0 18
15942: PPUSH
15943: CALL 41600 0 1
// AddComEnterUnit ( driver , tmp ) ;
15947: LD_VAR 0 18
15951: PPUSH
15952: LD_VAR 0 13
15956: PPUSH
15957: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15961: LD_VAR 0 18
15965: PPUSH
15966: LD_VAR 0 7
15970: PPUSH
15971: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15975: LD_VAR 0 18
15979: PPUSH
15980: CALL_OW 181
// end ; continue ;
15984: GO 15628
// end ; if not cleaners or not tmp in cleaners then
15986: LD_VAR 0 6
15990: NOT
15991: IFTRUE 16006
15993: PUSH
15994: LD_VAR 0 13
15998: PUSH
15999: LD_VAR 0 6
16003: IN
16004: NOT
16005: OR
16006: IFFALSE 16315
// begin if dep then
16008: LD_VAR 0 17
16012: IFFALSE 16148
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16014: LD_ADDR_VAR 0 16
16018: PUSH
16019: LD_VAR 0 17
16023: PUSH
16024: LD_INT 1
16026: ARRAY
16027: PPUSH
16028: CALL_OW 250
16032: PPUSH
16033: LD_VAR 0 17
16037: PUSH
16038: LD_INT 1
16040: ARRAY
16041: PPUSH
16042: CALL_OW 254
16046: PPUSH
16047: LD_INT 5
16049: PPUSH
16050: CALL_OW 272
16054: PUSH
16055: LD_VAR 0 17
16059: PUSH
16060: LD_INT 1
16062: ARRAY
16063: PPUSH
16064: CALL_OW 251
16068: PPUSH
16069: LD_VAR 0 17
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 254
16082: PPUSH
16083: LD_INT 5
16085: PPUSH
16086: CALL_OW 273
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16095: LD_VAR 0 16
16099: PUSH
16100: LD_INT 1
16102: ARRAY
16103: PPUSH
16104: LD_VAR 0 16
16108: PUSH
16109: LD_INT 2
16111: ARRAY
16112: PPUSH
16113: CALL_OW 488
16117: IFFALSE 16148
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16119: LD_VAR 0 13
16123: PPUSH
16124: LD_VAR 0 16
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: LD_VAR 0 16
16137: PUSH
16138: LD_INT 2
16140: ARRAY
16141: PPUSH
16142: CALL_OW 111
// continue ;
16146: GO 15628
// end ; end ; r := GetDir ( tmp ) ;
16148: LD_ADDR_VAR 0 15
16152: PUSH
16153: LD_VAR 0 13
16157: PPUSH
16158: CALL_OW 254
16162: ST_TO_ADDR
// if r = 5 then
16163: LD_VAR 0 15
16167: PUSH
16168: LD_INT 5
16170: EQUAL
16171: IFFALSE 16181
// r := 0 ;
16173: LD_ADDR_VAR 0 15
16177: PUSH
16178: LD_INT 0
16180: ST_TO_ADDR
// for j = r to 5 do
16181: LD_ADDR_VAR 0 10
16185: PUSH
16186: DOUBLE
16187: LD_VAR 0 15
16191: DEC
16192: ST_TO_ADDR
16193: LD_INT 5
16195: PUSH
16196: FOR_TO
16197: IFFALSE 16313
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16199: LD_ADDR_VAR 0 11
16203: PUSH
16204: LD_VAR 0 13
16208: PPUSH
16209: CALL_OW 250
16213: PPUSH
16214: LD_VAR 0 10
16218: PPUSH
16219: LD_INT 2
16221: PPUSH
16222: CALL_OW 272
16226: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16227: LD_ADDR_VAR 0 12
16231: PUSH
16232: LD_VAR 0 13
16236: PPUSH
16237: CALL_OW 251
16241: PPUSH
16242: LD_VAR 0 10
16246: PPUSH
16247: LD_INT 2
16249: PPUSH
16250: CALL_OW 273
16254: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16255: LD_VAR 0 11
16259: PPUSH
16260: LD_VAR 0 12
16264: PPUSH
16265: CALL_OW 488
16269: IFFALSE 16288
16271: PUSH
16272: LD_VAR 0 11
16276: PPUSH
16277: LD_VAR 0 12
16281: PPUSH
16282: CALL_OW 428
16286: NOT
16287: AND
16288: IFFALSE 16311
// begin ComMoveXY ( tmp , _x , _y ) ;
16290: LD_VAR 0 13
16294: PPUSH
16295: LD_VAR 0 11
16299: PPUSH
16300: LD_VAR 0 12
16304: PPUSH
16305: CALL_OW 111
// break ;
16309: GO 16313
// end ; end ;
16311: GO 16196
16313: POP
16314: POP
// end ; end ;
16315: GO 15628
16317: POP
16318: POP
// end ;
16319: LD_VAR 0 8
16323: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16324: LD_INT 0
16326: PPUSH
// result := true ;
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16335: LD_VAR 0 2
16339: PUSH
16340: LD_INT 24
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16354
16346: LD_INT 33
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16379
16354: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_INT 32
16362: PPUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 321
16372: PUSH
16373: LD_INT 2
16375: EQUAL
16376: ST_TO_ADDR
16377: GO 16695
16379: LD_INT 20
16381: DOUBLE
16382: EQUAL
16383: IFTRUE 16387
16385: GO 16412
16387: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16388: LD_ADDR_VAR 0 3
16392: PUSH
16393: LD_INT 6
16395: PPUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 321
16405: PUSH
16406: LD_INT 2
16408: EQUAL
16409: ST_TO_ADDR
16410: GO 16695
16412: LD_INT 22
16414: DOUBLE
16415: EQUAL
16416: IFTRUE 16426
16418: LD_INT 36
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16451
16426: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16427: LD_ADDR_VAR 0 3
16431: PUSH
16432: LD_INT 15
16434: PPUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 321
16444: PUSH
16445: LD_INT 2
16447: EQUAL
16448: ST_TO_ADDR
16449: GO 16695
16451: LD_INT 30
16453: DOUBLE
16454: EQUAL
16455: IFTRUE 16459
16457: GO 16484
16459: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16460: LD_ADDR_VAR 0 3
16464: PUSH
16465: LD_INT 20
16467: PPUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 321
16477: PUSH
16478: LD_INT 2
16480: EQUAL
16481: ST_TO_ADDR
16482: GO 16695
16484: LD_INT 28
16486: DOUBLE
16487: EQUAL
16488: IFTRUE 16498
16490: LD_INT 21
16492: DOUBLE
16493: EQUAL
16494: IFTRUE 16498
16496: GO 16523
16498: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16499: LD_ADDR_VAR 0 3
16503: PUSH
16504: LD_INT 21
16506: PPUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 321
16516: PUSH
16517: LD_INT 2
16519: EQUAL
16520: ST_TO_ADDR
16521: GO 16695
16523: LD_INT 16
16525: DOUBLE
16526: EQUAL
16527: IFTRUE 16531
16529: GO 16556
16531: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16532: LD_ADDR_VAR 0 3
16536: PUSH
16537: LD_INT 84
16539: PPUSH
16540: LD_VAR 0 1
16544: PPUSH
16545: CALL_OW 321
16549: PUSH
16550: LD_INT 2
16552: EQUAL
16553: ST_TO_ADDR
16554: GO 16695
16556: LD_INT 19
16558: DOUBLE
16559: EQUAL
16560: IFTRUE 16570
16562: LD_INT 23
16564: DOUBLE
16565: EQUAL
16566: IFTRUE 16570
16568: GO 16595
16570: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_INT 83
16578: PPUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 321
16588: PUSH
16589: LD_INT 2
16591: EQUAL
16592: ST_TO_ADDR
16593: GO 16695
16595: LD_INT 17
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16628
16603: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 39
16611: PPUSH
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 321
16621: PUSH
16622: LD_INT 2
16624: EQUAL
16625: ST_TO_ADDR
16626: GO 16695
16628: LD_INT 18
16630: DOUBLE
16631: EQUAL
16632: IFTRUE 16636
16634: GO 16661
16636: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_INT 40
16644: PPUSH
16645: LD_VAR 0 1
16649: PPUSH
16650: CALL_OW 321
16654: PUSH
16655: LD_INT 2
16657: EQUAL
16658: ST_TO_ADDR
16659: GO 16695
16661: LD_INT 27
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16694
16669: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16670: LD_ADDR_VAR 0 3
16674: PUSH
16675: LD_INT 35
16677: PPUSH
16678: LD_VAR 0 1
16682: PPUSH
16683: CALL_OW 321
16687: PUSH
16688: LD_INT 2
16690: EQUAL
16691: ST_TO_ADDR
16692: GO 16695
16694: POP
// end ;
16695: LD_VAR 0 3
16699: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16700: LD_INT 0
16702: PPUSH
16703: PPUSH
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
16709: PPUSH
16710: PPUSH
16711: PPUSH
16712: PPUSH
// result := false ;
16713: LD_ADDR_VAR 0 6
16717: PUSH
16718: LD_INT 0
16720: ST_TO_ADDR
// if btype = b_depot then
16721: LD_VAR 0 2
16725: PUSH
16726: LD_INT 0
16728: EQUAL
16729: IFFALSE 16741
// begin result := true ;
16731: LD_ADDR_VAR 0 6
16735: PUSH
16736: LD_INT 1
16738: ST_TO_ADDR
// exit ;
16739: GO 17595
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16741: LD_VAR 0 1
16745: NOT
16746: IFTRUE 16771
16748: PUSH
16749: LD_VAR 0 1
16753: PPUSH
16754: CALL_OW 266
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: IN
16769: NOT
16770: OR
16771: IFTRUE 16780
16773: PUSH
16774: LD_VAR 0 2
16778: NOT
16779: OR
16780: IFTRUE 16816
16782: PUSH
16783: LD_VAR 0 5
16787: PUSH
16788: LD_INT 0
16790: PUSH
16791: LD_INT 1
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: LD_INT 4
16802: PUSH
16803: LD_INT 5
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: IN
16814: NOT
16815: OR
16816: IFTRUE 16835
16818: PUSH
16819: LD_VAR 0 3
16823: PPUSH
16824: LD_VAR 0 4
16828: PPUSH
16829: CALL_OW 488
16833: NOT
16834: OR
16835: IFFALSE 16839
// exit ;
16837: GO 17595
// side := GetSide ( depot ) ;
16839: LD_ADDR_VAR 0 9
16843: PUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 255
16853: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16854: LD_VAR 0 9
16858: PPUSH
16859: LD_VAR 0 2
16863: PPUSH
16864: CALL 16324 0 2
16868: NOT
16869: IFFALSE 16873
// exit ;
16871: GO 17595
// pom := GetBase ( depot ) ;
16873: LD_ADDR_VAR 0 10
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 274
16887: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16888: LD_ADDR_VAR 0 11
16892: PUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 248
16907: PPUSH
16908: CALL_OW 450
16912: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16913: LD_VAR 0 10
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: CALL_OW 275
16925: PUSH
16926: LD_VAR 0 11
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: GREATEREQUAL
16935: IFFALSE 16961
16937: PUSH
16938: LD_VAR 0 10
16942: PPUSH
16943: LD_INT 2
16945: PPUSH
16946: CALL_OW 275
16950: PUSH
16951: LD_VAR 0 11
16955: PUSH
16956: LD_INT 2
16958: ARRAY
16959: GREATEREQUAL
16960: AND
16961: IFFALSE 16987
16963: PUSH
16964: LD_VAR 0 10
16968: PPUSH
16969: LD_INT 3
16971: PPUSH
16972: CALL_OW 275
16976: PUSH
16977: LD_VAR 0 11
16981: PUSH
16982: LD_INT 3
16984: ARRAY
16985: GREATEREQUAL
16986: AND
16987: NOT
16988: IFFALSE 16992
// exit ;
16990: GO 17595
// if GetBType ( depot ) = b_depot then
16992: LD_VAR 0 1
16996: PPUSH
16997: CALL_OW 266
17001: PUSH
17002: LD_INT 0
17004: EQUAL
17005: IFFALSE 17017
// dist := 28 else
17007: LD_ADDR_VAR 0 14
17011: PUSH
17012: LD_INT 28
17014: ST_TO_ADDR
17015: GO 17025
// dist := 36 ;
17017: LD_ADDR_VAR 0 14
17021: PUSH
17022: LD_INT 36
17024: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17025: LD_VAR 0 1
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: LD_VAR 0 4
17039: PPUSH
17040: CALL_OW 297
17044: PUSH
17045: LD_VAR 0 14
17049: GREATER
17050: IFFALSE 17054
// exit ;
17052: GO 17595
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17054: LD_ADDR_VAR 0 12
17058: PUSH
17059: LD_VAR 0 2
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: LD_VAR 0 4
17073: PPUSH
17074: LD_VAR 0 5
17078: PPUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 248
17088: PPUSH
17089: LD_INT 0
17091: PPUSH
17092: CALL 17600 0 6
17096: ST_TO_ADDR
// if not hexes then
17097: LD_VAR 0 12
17101: NOT
17102: IFFALSE 17106
// exit ;
17104: GO 17595
// hex := GetHexInfo ( x , y ) ;
17106: LD_ADDR_VAR 0 15
17110: PUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: LD_VAR 0 4
17120: PPUSH
17121: CALL_OW 546
17125: ST_TO_ADDR
// if hex [ 1 ] then
17126: LD_VAR 0 15
17130: PUSH
17131: LD_INT 1
17133: ARRAY
17134: IFFALSE 17138
// exit ;
17136: GO 17595
// height := hex [ 2 ] ;
17138: LD_ADDR_VAR 0 13
17142: PUSH
17143: LD_VAR 0 15
17147: PUSH
17148: LD_INT 2
17150: ARRAY
17151: ST_TO_ADDR
// for i = 1 to hexes do
17152: LD_ADDR_VAR 0 7
17156: PUSH
17157: DOUBLE
17158: LD_INT 1
17160: DEC
17161: ST_TO_ADDR
17162: LD_VAR 0 12
17166: PUSH
17167: FOR_TO
17168: IFFALSE 17512
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17170: LD_VAR 0 12
17174: PUSH
17175: LD_VAR 0 7
17179: ARRAY
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PPUSH
17185: LD_VAR 0 12
17189: PUSH
17190: LD_VAR 0 7
17194: ARRAY
17195: PUSH
17196: LD_INT 2
17198: ARRAY
17199: PPUSH
17200: CALL_OW 488
17204: NOT
17205: IFTRUE 17247
17207: PUSH
17208: LD_VAR 0 12
17212: PUSH
17213: LD_VAR 0 7
17217: ARRAY
17218: PUSH
17219: LD_INT 1
17221: ARRAY
17222: PPUSH
17223: LD_VAR 0 12
17227: PUSH
17228: LD_VAR 0 7
17232: ARRAY
17233: PUSH
17234: LD_INT 2
17236: ARRAY
17237: PPUSH
17238: CALL_OW 428
17242: PUSH
17243: LD_INT 0
17245: GREATER
17246: OR
17247: IFTRUE 17285
17249: PUSH
17250: LD_VAR 0 12
17254: PUSH
17255: LD_VAR 0 7
17259: ARRAY
17260: PUSH
17261: LD_INT 1
17263: ARRAY
17264: PPUSH
17265: LD_VAR 0 12
17269: PUSH
17270: LD_VAR 0 7
17274: ARRAY
17275: PUSH
17276: LD_INT 2
17278: ARRAY
17279: PPUSH
17280: CALL_OW 351
17284: OR
17285: IFFALSE 17291
// exit ;
17287: POP
17288: POP
17289: GO 17595
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17291: LD_ADDR_VAR 0 8
17295: PUSH
17296: LD_VAR 0 12
17300: PUSH
17301: LD_VAR 0 7
17305: ARRAY
17306: PUSH
17307: LD_INT 1
17309: ARRAY
17310: PPUSH
17311: LD_VAR 0 12
17315: PUSH
17316: LD_VAR 0 7
17320: ARRAY
17321: PUSH
17322: LD_INT 2
17324: ARRAY
17325: PPUSH
17326: CALL_OW 546
17330: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17331: LD_VAR 0 8
17335: PUSH
17336: LD_INT 1
17338: ARRAY
17339: IFTRUE 17361
17341: PUSH
17342: LD_VAR 0 8
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PUSH
17351: LD_VAR 0 13
17355: PUSH
17356: LD_INT 2
17358: PLUS
17359: GREATER
17360: OR
17361: IFTRUE 17383
17363: PUSH
17364: LD_VAR 0 8
17368: PUSH
17369: LD_INT 2
17371: ARRAY
17372: PUSH
17373: LD_VAR 0 13
17377: PUSH
17378: LD_INT 2
17380: MINUS
17381: LESS
17382: OR
17383: IFTRUE 17451
17385: PUSH
17386: LD_VAR 0 8
17390: PUSH
17391: LD_INT 3
17393: ARRAY
17394: PUSH
17395: LD_INT 0
17397: PUSH
17398: LD_INT 8
17400: PUSH
17401: LD_INT 9
17403: PUSH
17404: LD_INT 10
17406: PUSH
17407: LD_INT 11
17409: PUSH
17410: LD_INT 12
17412: PUSH
17413: LD_INT 13
17415: PUSH
17416: LD_INT 16
17418: PUSH
17419: LD_INT 17
17421: PUSH
17422: LD_INT 18
17424: PUSH
17425: LD_INT 19
17427: PUSH
17428: LD_INT 20
17430: PUSH
17431: LD_INT 21
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: IN
17449: NOT
17450: OR
17451: IFTRUE 17464
17453: PUSH
17454: LD_VAR 0 8
17458: PUSH
17459: LD_INT 5
17461: ARRAY
17462: NOT
17463: OR
17464: IFTRUE 17504
17466: PUSH
17467: LD_VAR 0 8
17471: PUSH
17472: LD_INT 6
17474: ARRAY
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: LD_INT 7
17484: PUSH
17485: LD_INT 9
17487: PUSH
17488: LD_INT 10
17490: PUSH
17491: LD_INT 11
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: IN
17502: NOT
17503: OR
17504: IFFALSE 17510
// exit ;
17506: POP
17507: POP
17508: GO 17595
// end ;
17510: GO 17167
17512: POP
17513: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17514: LD_VAR 0 9
17518: PPUSH
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_VAR 0 4
17528: PPUSH
17529: LD_INT 20
17531: PPUSH
17532: CALL 9414 0 4
17536: PUSH
17537: LD_INT 4
17539: ARRAY
17540: IFFALSE 17544
// exit ;
17542: GO 17595
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17544: LD_VAR 0 2
17548: PUSH
17549: LD_INT 29
17551: PUSH
17552: LD_INT 30
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: IN
17559: IFFALSE 17583
17561: PUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_VAR 0 4
17571: PPUSH
17572: LD_VAR 0 9
17576: PPUSH
17577: CALL_OW 440
17581: NOT
17582: AND
17583: IFFALSE 17587
// exit ;
17585: GO 17595
// result := true ;
17587: LD_ADDR_VAR 0 6
17591: PUSH
17592: LD_INT 1
17594: ST_TO_ADDR
// end ;
17595: LD_VAR 0 6
17599: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17600: LD_INT 0
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
// result = [ ] ;
17660: LD_ADDR_VAR 0 7
17664: PUSH
17665: EMPTY
17666: ST_TO_ADDR
// temp_list = [ ] ;
17667: LD_ADDR_VAR 0 9
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17674: LD_VAR 0 4
17678: PUSH
17679: LD_INT 0
17681: PUSH
17682: LD_INT 1
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 3
17690: PUSH
17691: LD_INT 4
17693: PUSH
17694: LD_INT 5
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: IN
17705: NOT
17706: IFTRUE 17749
17708: PUSH
17709: LD_VAR 0 1
17713: PUSH
17714: LD_INT 0
17716: PUSH
17717: LD_INT 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: IN
17724: IFFALSE 17748
17726: PUSH
17727: LD_VAR 0 5
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: LD_INT 2
17737: PUSH
17738: LD_INT 3
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: LIST
17745: IN
17746: NOT
17747: AND
17748: OR
17749: IFFALSE 17753
// exit ;
17751: GO 36152
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17753: LD_VAR 0 1
17757: PUSH
17758: LD_INT 6
17760: PUSH
17761: LD_INT 7
17763: PUSH
17764: LD_INT 8
17766: PUSH
17767: LD_INT 13
17769: PUSH
17770: LD_INT 12
17772: PUSH
17773: LD_INT 15
17775: PUSH
17776: LD_INT 11
17778: PUSH
17779: LD_INT 14
17781: PUSH
17782: LD_INT 10
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: IN
17796: IFFALSE 17806
// btype = b_lab ;
17798: LD_ADDR_VAR 0 1
17802: PUSH
17803: LD_INT 6
17805: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17806: LD_VAR 0 6
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: IN
17825: NOT
17826: IFTRUE 17894
17828: PUSH
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: LD_INT 1
17839: PUSH
17840: LD_INT 2
17842: PUSH
17843: LD_INT 3
17845: PUSH
17846: LD_INT 6
17848: PUSH
17849: LD_INT 36
17851: PUSH
17852: LD_INT 4
17854: PUSH
17855: LD_INT 5
17857: PUSH
17858: LD_INT 31
17860: PUSH
17861: LD_INT 32
17863: PUSH
17864: LD_INT 33
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: IN
17880: NOT
17881: IFFALSE 17893
17883: PUSH
17884: LD_VAR 0 6
17888: PUSH
17889: LD_INT 1
17891: EQUAL
17892: AND
17893: OR
17894: IFTRUE 17926
17896: PUSH
17897: LD_VAR 0 1
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: IN
17912: NOT
17913: IFFALSE 17925
17915: PUSH
17916: LD_VAR 0 6
17920: PUSH
17921: LD_INT 2
17923: EQUAL
17924: AND
17925: OR
17926: IFFALSE 17936
// mode = 0 ;
17928: LD_ADDR_VAR 0 6
17932: PUSH
17933: LD_INT 0
17935: ST_TO_ADDR
// case mode of 0 :
17936: LD_VAR 0 6
17940: PUSH
17941: LD_INT 0
17943: DOUBLE
17944: EQUAL
17945: IFTRUE 17949
17947: GO 29402
17949: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17950: LD_ADDR_VAR 0 11
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 1
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 0
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 1
18008: NEG
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 1
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: LD_INT 2
18035: NEG
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 0
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 3
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 3
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18143: LD_ADDR_VAR 0 12
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: LD_INT 1
18163: NEG
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 1
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 1
18201: NEG
18202: PUSH
18203: LD_INT 0
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 1
18212: NEG
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 1
18227: NEG
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 2
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: LD_INT 1
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: NEG
18267: PUSH
18268: LD_INT 0
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: LD_INT 2
18277: NEG
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 2
18289: NEG
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 3
18300: NEG
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 3
18311: NEG
18312: PUSH
18313: LD_INT 1
18315: NEG
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18339: LD_ADDR_VAR 0 13
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: LD_INT 0
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 1
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 1
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 1
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: PUSH
18395: LD_INT 1
18397: NEG
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: NEG
18421: PUSH
18422: LD_INT 2
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 2
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 2
18486: NEG
18487: PUSH
18488: LD_INT 3
18490: NEG
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 3
18498: NEG
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 3
18510: NEG
18511: PUSH
18512: LD_INT 3
18514: NEG
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18538: LD_ADDR_VAR 0 14
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: LD_INT 1
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 0
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 0
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: NEG
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: LD_INT 1
18645: NEG
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 1
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 0
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: LD_INT 3
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: LD_INT 3
18699: NEG
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 2
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18734: LD_ADDR_VAR 0 15
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: NEG
18804: PUSH
18805: LD_INT 1
18807: NEG
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: LD_INT 1
18818: NEG
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: NEG
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: NEG
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 2
18868: NEG
18869: PUSH
18870: LD_INT 1
18872: NEG
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 3
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18927: LD_ADDR_VAR 0 16
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: LD_INT 1
18947: NEG
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: LD_INT 1
19000: NEG
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 1
19008: NEG
19009: PUSH
19010: LD_INT 2
19012: NEG
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 2
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: LD_INT 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: LD_INT 1
19054: NEG
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 2
19062: NEG
19063: PUSH
19064: LD_INT 2
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 3
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 2
19094: PUSH
19095: LD_INT 3
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19120: LD_ADDR_VAR 0 17
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: LD_INT 2
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 0
19213: PUSH
19214: LD_INT 2
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: LD_INT 1
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 1
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: NEG
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: LD_INT 1
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 2
19319: NEG
19320: PUSH
19321: LD_INT 2
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19350: LD_ADDR_VAR 0 18
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: LD_INT 1
19370: NEG
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: NEG
19409: PUSH
19410: LD_INT 0
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 1
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: LD_INT 2
19435: NEG
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 0
19443: PUSH
19444: LD_INT 2
19446: NEG
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 0
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: NEG
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: LD_INT 2
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19580: LD_ADDR_VAR 0 19
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: LD_INT 1
19600: NEG
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 1
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: NEG
19639: PUSH
19640: LD_INT 0
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 1
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: LD_INT 2
19665: NEG
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 0
19673: PUSH
19674: LD_INT 2
19676: NEG
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 0
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 2
19756: NEG
19757: PUSH
19758: LD_INT 0
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: LD_INT 2
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19810: LD_ADDR_VAR 0 20
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: LD_INT 1
19830: NEG
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: LD_INT 1
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 1
19868: NEG
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 1
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: LD_INT 1
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 0
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 2
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: NEG
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: LD_INT 2
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20040: LD_ADDR_VAR 0 21
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: LD_INT 1
20060: NEG
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 1
20098: NEG
20099: PUSH
20100: LD_INT 0
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 1
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: LD_INT 2
20125: NEG
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: LD_INT 2
20136: NEG
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: LD_INT 1
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 0
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: NEG
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: LD_INT 2
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20270: LD_ADDR_VAR 0 22
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: LD_INT 1
20290: NEG
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 1
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 1
20328: NEG
20329: PUSH
20330: LD_INT 0
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 1
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 1
20351: NEG
20352: PUSH
20353: LD_INT 2
20355: NEG
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: LD_INT 2
20366: NEG
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 1
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: LD_INT 1
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: LD_INT 2
20446: NEG
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: LD_INT 2
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20500: LD_ADDR_VAR 0 23
20504: PUSH
20505: LD_INT 0
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: LD_INT 1
20520: NEG
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: LD_INT 1
20573: NEG
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 1
20581: NEG
20582: PUSH
20583: LD_INT 2
20585: NEG
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 2
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: PUSH
20616: LD_INT 0
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 2
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: NEG
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: LD_INT 2
20699: NEG
20700: PUSH
20701: LD_INT 2
20703: NEG
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 2
20711: NEG
20712: PUSH
20713: LD_INT 3
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PUSH
20725: LD_INT 3
20727: NEG
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 1
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: LD_INT 1
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20780: LD_ADDR_VAR 0 24
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: NEG
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: NEG
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 3
21013: PUSH
21014: LD_INT 1
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 3
21023: PUSH
21024: LD_INT 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21056: LD_ADDR_VAR 0 25
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 0
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: LD_INT 1
21076: NEG
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 0
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 1
21114: NEG
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 1
21125: NEG
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: LD_INT 2
21141: NEG
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 0
21149: PUSH
21150: LD_INT 2
21152: NEG
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: LD_INT 1
21163: NEG
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 0
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: LD_INT 2
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 1
21221: NEG
21222: PUSH
21223: LD_INT 1
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 2
21232: NEG
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 2
21243: NEG
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 2
21255: NEG
21256: PUSH
21257: LD_INT 2
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 3
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: LD_INT 2
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: LD_INT 3
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21330: LD_ADDR_VAR 0 26
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 1
21350: NEG
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 0
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 2
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: PUSH
21435: LD_INT 1
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: NEG
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 2
21506: NEG
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 2
21517: NEG
21518: PUSH
21519: LD_INT 1
21521: NEG
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 2
21529: NEG
21530: PUSH
21531: LD_INT 2
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 2
21541: PUSH
21542: LD_INT 3
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: LD_INT 3
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: LD_INT 2
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21606: LD_ADDR_VAR 0 27
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: LD_INT 1
21675: NEG
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: LD_INT 2
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 2
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: NEG
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 1
21771: NEG
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 2
21782: NEG
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 2
21793: NEG
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 2
21805: NEG
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: NEG
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 3
21851: NEG
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21886: LD_ADDR_VAR 0 28
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: LD_INT 1
21906: NEG
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 0
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 1
21944: NEG
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 2
21982: NEG
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 1
22051: NEG
22052: PUSH
22053: LD_INT 1
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 2
22073: NEG
22074: PUSH
22075: LD_INT 1
22077: NEG
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: LD_INT 2
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 2
22097: NEG
22098: PUSH
22099: LD_INT 3
22101: NEG
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 1
22109: NEG
22110: PUSH
22111: LD_INT 3
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 3
22121: NEG
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 3
22133: NEG
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22168: LD_ADDR_VAR 0 29
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: LD_INT 1
22188: NEG
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 1
22226: NEG
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 1
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 2
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: LD_INT 2
22264: NEG
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 0
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 1
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: LD_INT 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: NEG
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: NEG
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 2
22346: NEG
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: LD_INT 3
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: LD_INT 1
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 3
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PUSH
22403: LD_INT 2
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 3
22412: NEG
22413: PUSH
22414: LD_INT 2
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22447: LD_ADDR_VAR 0 30
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 1
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: LD_INT 1
22520: NEG
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 1
22528: NEG
22529: PUSH
22530: LD_INT 2
22532: NEG
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 2
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 2
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 1
22602: NEG
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 2
22613: NEG
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 2
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 2
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 3
22690: NEG
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22725: LD_ADDR_VAR 0 31
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: LD_INT 0
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 1
22794: NEG
22795: PUSH
22796: LD_INT 1
22798: NEG
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: LD_INT 2
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: NEG
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: NEG
22903: PUSH
22904: LD_INT 2
22906: NEG
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 2
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 3
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: NEG
22958: PUSH
22959: LD_INT 2
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: NEG
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23003: LD_ADDR_VAR 0 32
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: NEG
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 2
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 0
23096: PUSH
23097: LD_INT 2
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 1
23110: NEG
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 2
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: LD_INT 2
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: NEG
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: NEG
23193: PUSH
23194: LD_INT 3
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 1
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 3
23215: PUSH
23216: LD_INT 2
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 3
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 3
23246: NEG
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23281: LD_ADDR_VAR 0 33
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 0
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: LD_INT 1
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 1
23339: NEG
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: NEG
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: LD_INT 2
23366: NEG
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: NEG
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PUSH
23453: EMPTY
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: NEG
23472: PUSH
23473: LD_INT 3
23475: NEG
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 1
23486: NEG
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 3
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 3
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 3
23525: NEG
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23560: LD_ADDR_VAR 0 34
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: LD_INT 1
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 0
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: LD_INT 1
23633: NEG
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: LD_INT 2
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 2
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 1
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 2
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 2
23716: NEG
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 2
23739: NEG
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: NEG
23752: PUSH
23753: LD_INT 3
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 3
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 3
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 2
23794: NEG
23795: PUSH
23796: LD_INT 1
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 3
23805: NEG
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23840: LD_ADDR_VAR 0 35
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: NEG
23932: PUSH
23933: LD_INT 1
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23952: LD_ADDR_VAR 0 36
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: LD_INT 0
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: LD_INT 1
24025: NEG
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24064: LD_ADDR_VAR 0 37
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: LD_INT 1
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 1
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: LD_INT 1
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24176: LD_ADDR_VAR 0 38
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 1
24196: NEG
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 1
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 0
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 2
24267: NEG
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24288: LD_ADDR_VAR 0 39
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 0
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 0
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: NEG
24370: PUSH
24371: LD_INT 2
24373: NEG
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24400: LD_ADDR_VAR 0 40
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 1
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: NEG
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 1
24484: NEG
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24512: LD_ADDR_VAR 0 41
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 1
24605: PUSH
24606: LD_INT 1
24608: NEG
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: NEG
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: NEG
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: LD_INT 3
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 3
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 3
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 3
24755: PUSH
24756: LD_INT 3
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: LD_INT 3
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 3
24786: NEG
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 3
24809: NEG
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 3
24821: NEG
24822: PUSH
24823: LD_INT 3
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24862: LD_ADDR_VAR 0 42
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 1
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: LD_INT 2
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: LD_INT 2
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: LD_INT 1
25032: NEG
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 2
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 3
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: LD_INT 3
25068: NEG
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 3
25079: NEG
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: LD_INT 2
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 3
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: NEG
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 3
25159: NEG
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 3
25171: NEG
25172: PUSH
25173: LD_INT 3
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25212: LD_ADDR_VAR 0 43
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 1
25232: NEG
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: LD_INT 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: LD_INT 2
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 2
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: NEG
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: NEG
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: NEG
25402: PUSH
25403: LD_INT 3
25405: NEG
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 3
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: NEG
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: LD_INT 3
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: LD_INT 3
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 1
25486: NEG
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 2
25497: NEG
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 3
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 3
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25560: LD_ADDR_VAR 0 44
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 0
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: NEG
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: NEG
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: LD_INT 1
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: NEG
25739: PUSH
25740: LD_INT 2
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 2
25750: NEG
25751: PUSH
25752: LD_INT 3
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 3
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: LD_INT 3
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: NEG
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 3
25857: NEG
25858: PUSH
25859: LD_INT 2
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 3
25869: NEG
25870: PUSH
25871: LD_INT 3
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25910: LD_ADDR_VAR 0 45
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: LD_INT 1
25983: NEG
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: LD_INT 2
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 2
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 0
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: LD_INT 2
26092: NEG
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 2
26100: NEG
26101: PUSH
26102: LD_INT 3
26104: NEG
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 3
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 3
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 3
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 3
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 3
26207: NEG
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 3
26219: NEG
26220: PUSH
26221: LD_INT 3
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26260: LD_ADDR_VAR 0 46
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 2
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: LD_INT 1
26367: NEG
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: LD_INT 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: NEG
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: NEG
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 3
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: LD_INT 3
26464: NEG
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 2
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 3
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 3
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 3
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 3
26556: NEG
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 3
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26608: LD_ADDR_VAR 0 47
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 1
26681: NEG
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 2
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26759: LD_ADDR_VAR 0 48
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 2
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26906: LD_ADDR_VAR 0 49
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27050: LD_ADDR_VAR 0 50
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27194: LD_ADDR_VAR 0 51
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 1
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 2
27306: NEG
27307: PUSH
27308: LD_INT 0
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27341: LD_ADDR_VAR 0 52
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: LD_INT 2
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: NEG
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27492: LD_ADDR_VAR 0 53
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: LD_INT 1
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: LD_INT 2
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 1
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27722: LD_ADDR_VAR 0 54
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27952: LD_ADDR_VAR 0 55
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 2
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: LD_INT 2
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28182: LD_ADDR_VAR 0 56
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: NEG
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: LD_INT 2
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 2
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 2
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 2
28358: NEG
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: LD_INT 2
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28412: LD_ADDR_VAR 0 57
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: NEG
28482: PUSH
28483: LD_INT 1
28485: NEG
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 2
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: LD_INT 1
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: LD_INT 2
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: LD_INT 2
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28642: LD_ADDR_VAR 0 58
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 1
28723: NEG
28724: PUSH
28725: LD_INT 2
28727: NEG
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 2
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 2
28818: NEG
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28872: LD_ADDR_VAR 0 59
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28960: LD_ADDR_VAR 0 60
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29048: LD_ADDR_VAR 0 61
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29136: LD_ADDR_VAR 0 62
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 0
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29224: LD_ADDR_VAR 0 63
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: LD_INT 0
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29312: LD_ADDR_VAR 0 64
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 1
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: NEG
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: ST_TO_ADDR
// end ; 1 :
29400: GO 35297
29402: LD_INT 1
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 32033
29410: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29411: LD_ADDR_VAR 0 11
29415: PUSH
29416: LD_INT 1
29418: NEG
29419: PUSH
29420: LD_INT 3
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: LD_INT 3
29433: NEG
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: LD_INT 2
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29455: LD_ADDR_VAR 0 12
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: LD_INT 1
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29496: LD_ADDR_VAR 0 13
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 2
29523: PUSH
29524: LD_INT 3
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29536: LD_ADDR_VAR 0 14
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 3
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29577: LD_ADDR_VAR 0 15
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29621: LD_ADDR_VAR 0 16
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: LD_INT 3
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 3
29640: NEG
29641: PUSH
29642: LD_INT 2
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 3
29652: NEG
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29667: LD_ADDR_VAR 0 17
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: LD_INT 3
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 3
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 2
29700: NEG
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29711: LD_ADDR_VAR 0 18
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: LD_INT 0
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 3
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: LIST
29751: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29752: LD_ADDR_VAR 0 19
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29792: LD_ADDR_VAR 0 20
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 2
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29833: LD_ADDR_VAR 0 21
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 3
29851: NEG
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29877: LD_ADDR_VAR 0 22
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 3
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 3
29896: NEG
29897: PUSH
29898: LD_INT 2
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: NEG
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29923: LD_ADDR_VAR 0 23
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 3
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 4
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: LD_INT 3
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: LIST
29966: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29967: LD_ADDR_VAR 0 24
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 4
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30008: LD_ADDR_VAR 0 25
30012: PUSH
30013: LD_INT 3
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 4
30025: PUSH
30026: LD_INT 3
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: LD_INT 4
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30048: LD_ADDR_VAR 0 26
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 3
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30089: LD_ADDR_VAR 0 27
30093: PUSH
30094: LD_INT 3
30096: NEG
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 3
30107: NEG
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 4
30118: NEG
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: LIST
30132: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30133: LD_ADDR_VAR 0 28
30137: PUSH
30138: LD_INT 3
30140: NEG
30141: PUSH
30142: LD_INT 3
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: NEG
30153: PUSH
30154: LD_INT 4
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 4
30164: NEG
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30179: LD_ADDR_VAR 0 29
30183: PUSH
30184: LD_INT 1
30186: NEG
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 3
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 4
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: LD_INT 4
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 5
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 5
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 4
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 6
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: LD_INT 6
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: LD_INT 5
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30334: LD_ADDR_VAR 0 30
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 3
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 4
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 4
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 4
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 5
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 5
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 6
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 6
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30477: LD_ADDR_VAR 0 31
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 4
30524: PUSH
30525: LD_INT 4
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: LD_INT 5
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 6
30574: PUSH
30575: LD_INT 5
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 6
30584: PUSH
30585: LD_INT 6
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 5
30594: PUSH
30595: LD_INT 6
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30616: LD_ADDR_VAR 0 32
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 3
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 4
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: LD_INT 4
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 5
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: LD_INT 5
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: LD_INT 4
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: LD_INT 6
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 6
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: NEG
30737: PUSH
30738: LD_INT 5
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30759: LD_ADDR_VAR 0 33
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 3
30788: NEG
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 4
30811: NEG
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 4
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 5
30845: NEG
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 5
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 5
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 6
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 6
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30914: LD_ADDR_VAR 0 34
30918: PUSH
30919: LD_INT 2
30921: NEG
30922: PUSH
30923: LD_INT 3
30925: NEG
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: LD_INT 2
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: LD_INT 3
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: LD_INT 4
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 4
30969: NEG
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 4
30981: NEG
30982: PUSH
30983: LD_INT 4
30985: NEG
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 4
30993: NEG
30994: PUSH
30995: LD_INT 5
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 5
31005: NEG
31006: PUSH
31007: LD_INT 4
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 5
31017: NEG
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 5
31029: NEG
31030: PUSH
31031: LD_INT 6
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 6
31041: NEG
31042: PUSH
31043: LD_INT 5
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 6
31053: NEG
31054: PUSH
31055: LD_INT 6
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31077: LD_ADDR_VAR 0 41
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 2
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 3
31099: NEG
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31121: LD_ADDR_VAR 0 42
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 2
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31162: LD_ADDR_VAR 0 43
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 3
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: LD_INT 3
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31202: LD_ADDR_VAR 0 44
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31243: LD_ADDR_VAR 0 45
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 3
31272: NEG
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31287: LD_ADDR_VAR 0 46
31291: PUSH
31292: LD_INT 2
31294: NEG
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 2
31306: NEG
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: PUSH
31316: LD_INT 3
31318: NEG
31319: PUSH
31320: LD_INT 2
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31333: LD_ADDR_VAR 0 47
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: LD_INT 3
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: LD_INT 3
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31366: LD_ADDR_VAR 0 48
31370: PUSH
31371: LD_INT 1
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31397: LD_ADDR_VAR 0 49
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 3
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31426: LD_ADDR_VAR 0 50
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31455: LD_ADDR_VAR 0 51
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31486: LD_ADDR_VAR 0 52
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 3
31505: NEG
31506: PUSH
31507: LD_INT 2
31509: NEG
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31519: LD_ADDR_VAR 0 53
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: LD_INT 3
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 3
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31563: LD_ADDR_VAR 0 54
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 3
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 3
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31604: LD_ADDR_VAR 0 55
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: PUSH
31632: LD_INT 3
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31644: LD_ADDR_VAR 0 56
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: LD_INT 3
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31685: LD_ADDR_VAR 0 57
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 3
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31729: LD_ADDR_VAR 0 58
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: LD_INT 3
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 3
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 3
31760: NEG
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31775: LD_ADDR_VAR 0 59
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 2
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: LIST
31818: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31819: LD_ADDR_VAR 0 60
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31860: LD_ADDR_VAR 0 61
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31900: LD_ADDR_VAR 0 62
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31941: LD_ADDR_VAR 0 63
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 1
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: NEG
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31985: LD_ADDR_VAR 0 64
31989: PUSH
31990: LD_INT 1
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
// end ; 2 :
32031: GO 35297
32033: LD_INT 2
32035: DOUBLE
32036: EQUAL
32037: IFTRUE 32041
32039: GO 35296
32041: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32042: LD_ADDR_VAR 0 29
32046: PUSH
32047: LD_INT 4
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 4
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 5
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 5
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 3
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 3
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 5
32132: PUSH
32133: LD_INT 2
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 4
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 3
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 4
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 5
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 4
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 3
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: LD_INT 5
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: LD_INT 3
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 3
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 4
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: NEG
32428: PUSH
32429: LD_INT 4
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: LD_INT 5
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 3
32451: NEG
32452: PUSH
32453: LD_INT 4
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: LD_INT 3
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 4
32475: NEG
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 5
32487: NEG
32488: PUSH
32489: LD_INT 4
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: NEG
32500: PUSH
32501: LD_INT 5
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 3
32511: NEG
32512: PUSH
32513: LD_INT 5
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 5
32523: NEG
32524: PUSH
32525: LD_INT 3
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32580: LD_ADDR_VAR 0 30
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 4
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: LD_INT 3
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 5
32617: PUSH
32618: LD_INT 5
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 4
32627: PUSH
32628: LD_INT 5
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: LD_INT 4
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: LD_INT 3
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: LD_INT 5
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 3
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 4
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 4
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 4
32770: NEG
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 4
32781: NEG
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 3
32804: NEG
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 4
32815: NEG
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 5
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 5
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 5
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: NEG
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: LD_INT 3
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: LD_INT 4
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 2
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 4
32932: NEG
32933: PUSH
32934: LD_INT 3
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: NEG
32945: PUSH
32946: LD_INT 4
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 4
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 4
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 5
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 4
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 3
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 3
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 4
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 5
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: LD_INT 5
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33127: LD_ADDR_VAR 0 31
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 5
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 5
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 4
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: LD_INT 3
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: NEG
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 3
33272: NEG
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 4
33283: NEG
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 4
33294: NEG
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: LD_INT 2
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 4
33329: NEG
33330: PUSH
33331: LD_INT 4
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: LD_INT 5
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 3
33353: NEG
33354: PUSH
33355: LD_INT 4
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 4
33377: NEG
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: NEG
33390: PUSH
33391: LD_INT 4
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 5
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: NEG
33414: PUSH
33415: LD_INT 5
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 5
33425: NEG
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 3
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 4
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 3
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 3
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 4
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: NEG
33528: PUSH
33529: LD_INT 4
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 4
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 4
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 3
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 5
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33677: LD_ADDR_VAR 0 32
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 4
33695: NEG
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 3
33707: NEG
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 3
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 4
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 5
33740: NEG
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 5
33763: NEG
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 3
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 3
33786: NEG
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 3
33798: NEG
33799: PUSH
33800: LD_INT 4
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: NEG
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 2
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: NEG
33835: PUSH
33836: LD_INT 2
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 4
33846: NEG
33847: PUSH
33848: LD_INT 3
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 4
33858: NEG
33859: PUSH
33860: LD_INT 4
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 4
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 4
33882: NEG
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 4
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 5
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 4
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 0
33938: PUSH
33939: LD_INT 3
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: LD_INT 4
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 5
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: LD_INT 5
33988: NEG
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: PUSH
34007: LD_INT 1
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 4
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 3
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: LD_INT 0
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 2
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 4
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: LD_INT 3
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 5
34109: PUSH
34110: LD_INT 4
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 5
34119: PUSH
34120: LD_INT 5
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: PUSH
34130: LD_INT 5
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 5
34159: PUSH
34160: LD_INT 3
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34224: LD_ADDR_VAR 0 33
34228: PUSH
34229: LD_INT 4
34231: NEG
34232: PUSH
34233: LD_INT 4
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 4
34243: NEG
34244: PUSH
34245: LD_INT 5
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: LD_INT 4
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 3
34267: NEG
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 4
34279: NEG
34280: PUSH
34281: LD_INT 3
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 5
34291: NEG
34292: PUSH
34293: LD_INT 4
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 5
34303: NEG
34304: PUSH
34305: LD_INT 5
34307: NEG
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 3
34315: NEG
34316: PUSH
34317: LD_INT 5
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 5
34327: NEG
34328: PUSH
34329: LD_INT 3
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 4
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 3
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: LD_INT 4
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 2
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 2
34429: NEG
34430: PUSH
34431: LD_INT 4
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 4
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 5
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 4
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: LD_INT 2
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 3
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: LD_INT 2
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 4
34564: PUSH
34565: LD_INT 4
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: PUSH
34575: LD_INT 4
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 4
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 3
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 4
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 5
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 4
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 3
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 5
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: NEG
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34762: LD_ADDR_VAR 0 34
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 4
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 5
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 4
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 3
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 4
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: LD_INT 5
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 3
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 5
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 4
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 4
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 4
34964: PUSH
34965: LD_INT 4
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 5
34994: PUSH
34995: LD_INT 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 4
35004: PUSH
35005: LD_INT 5
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: LD_INT 4
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 5
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 3
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 4
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 4
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: LD_INT 4
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 4
35147: NEG
35148: PUSH
35149: LD_INT 0
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 4
35158: NEG
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 3
35170: NEG
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 3
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 4
35192: NEG
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 5
35203: NEG
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 5
35214: NEG
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 5
35226: NEG
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 3
35238: NEG
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
// end ; end ;
35294: GO 35297
35296: POP
// case btype of b_depot , b_warehouse :
35297: LD_VAR 0 1
35301: PUSH
35302: LD_INT 0
35304: DOUBLE
35305: EQUAL
35306: IFTRUE 35316
35308: LD_INT 1
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35316
35314: GO 35517
35316: POP
// case nation of nation_american :
35317: LD_VAR 0 5
35321: PUSH
35322: LD_INT 1
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35330
35328: GO 35386
35330: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35331: LD_ADDR_VAR 0 9
35335: PUSH
35336: LD_VAR 0 11
35340: PUSH
35341: LD_VAR 0 12
35345: PUSH
35346: LD_VAR 0 13
35350: PUSH
35351: LD_VAR 0 14
35355: PUSH
35356: LD_VAR 0 15
35360: PUSH
35361: LD_VAR 0 16
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: PUSH
35374: LD_VAR 0 4
35378: PUSH
35379: LD_INT 1
35381: PLUS
35382: ARRAY
35383: ST_TO_ADDR
35384: GO 35515
35386: LD_INT 2
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35394
35392: GO 35450
35394: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35395: LD_ADDR_VAR 0 9
35399: PUSH
35400: LD_VAR 0 17
35404: PUSH
35405: LD_VAR 0 18
35409: PUSH
35410: LD_VAR 0 19
35414: PUSH
35415: LD_VAR 0 20
35419: PUSH
35420: LD_VAR 0 21
35424: PUSH
35425: LD_VAR 0 22
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: PUSH
35438: LD_VAR 0 4
35442: PUSH
35443: LD_INT 1
35445: PLUS
35446: ARRAY
35447: ST_TO_ADDR
35448: GO 35515
35450: LD_INT 3
35452: DOUBLE
35453: EQUAL
35454: IFTRUE 35458
35456: GO 35514
35458: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35459: LD_ADDR_VAR 0 9
35463: PUSH
35464: LD_VAR 0 23
35468: PUSH
35469: LD_VAR 0 24
35473: PUSH
35474: LD_VAR 0 25
35478: PUSH
35479: LD_VAR 0 26
35483: PUSH
35484: LD_VAR 0 27
35488: PUSH
35489: LD_VAR 0 28
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: LD_VAR 0 4
35506: PUSH
35507: LD_INT 1
35509: PLUS
35510: ARRAY
35511: ST_TO_ADDR
35512: GO 35515
35514: POP
35515: GO 36070
35517: LD_INT 2
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35531
35523: LD_INT 3
35525: DOUBLE
35526: EQUAL
35527: IFTRUE 35531
35529: GO 35587
35531: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 29
35541: PUSH
35542: LD_VAR 0 30
35546: PUSH
35547: LD_VAR 0 31
35551: PUSH
35552: LD_VAR 0 32
35556: PUSH
35557: LD_VAR 0 33
35561: PUSH
35562: LD_VAR 0 34
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: PUSH
35575: LD_VAR 0 4
35579: PUSH
35580: LD_INT 1
35582: PLUS
35583: ARRAY
35584: ST_TO_ADDR
35585: GO 36070
35587: LD_INT 16
35589: DOUBLE
35590: EQUAL
35591: IFTRUE 35649
35593: LD_INT 17
35595: DOUBLE
35596: EQUAL
35597: IFTRUE 35649
35599: LD_INT 18
35601: DOUBLE
35602: EQUAL
35603: IFTRUE 35649
35605: LD_INT 19
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35649
35611: LD_INT 22
35613: DOUBLE
35614: EQUAL
35615: IFTRUE 35649
35617: LD_INT 20
35619: DOUBLE
35620: EQUAL
35621: IFTRUE 35649
35623: LD_INT 21
35625: DOUBLE
35626: EQUAL
35627: IFTRUE 35649
35629: LD_INT 23
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35649
35635: LD_INT 24
35637: DOUBLE
35638: EQUAL
35639: IFTRUE 35649
35641: LD_INT 25
35643: DOUBLE
35644: EQUAL
35645: IFTRUE 35649
35647: GO 35705
35649: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35650: LD_ADDR_VAR 0 9
35654: PUSH
35655: LD_VAR 0 35
35659: PUSH
35660: LD_VAR 0 36
35664: PUSH
35665: LD_VAR 0 37
35669: PUSH
35670: LD_VAR 0 38
35674: PUSH
35675: LD_VAR 0 39
35679: PUSH
35680: LD_VAR 0 40
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: PUSH
35693: LD_VAR 0 4
35697: PUSH
35698: LD_INT 1
35700: PLUS
35701: ARRAY
35702: ST_TO_ADDR
35703: GO 36070
35705: LD_INT 6
35707: DOUBLE
35708: EQUAL
35709: IFTRUE 35761
35711: LD_INT 7
35713: DOUBLE
35714: EQUAL
35715: IFTRUE 35761
35717: LD_INT 8
35719: DOUBLE
35720: EQUAL
35721: IFTRUE 35761
35723: LD_INT 13
35725: DOUBLE
35726: EQUAL
35727: IFTRUE 35761
35729: LD_INT 12
35731: DOUBLE
35732: EQUAL
35733: IFTRUE 35761
35735: LD_INT 15
35737: DOUBLE
35738: EQUAL
35739: IFTRUE 35761
35741: LD_INT 11
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35761
35747: LD_INT 14
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35761
35753: LD_INT 10
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35761
35759: GO 35817
35761: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35762: LD_ADDR_VAR 0 9
35766: PUSH
35767: LD_VAR 0 41
35771: PUSH
35772: LD_VAR 0 42
35776: PUSH
35777: LD_VAR 0 43
35781: PUSH
35782: LD_VAR 0 44
35786: PUSH
35787: LD_VAR 0 45
35791: PUSH
35792: LD_VAR 0 46
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: PUSH
35805: LD_VAR 0 4
35809: PUSH
35810: LD_INT 1
35812: PLUS
35813: ARRAY
35814: ST_TO_ADDR
35815: GO 36070
35817: LD_INT 36
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35825
35823: GO 35881
35825: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35826: LD_ADDR_VAR 0 9
35830: PUSH
35831: LD_VAR 0 47
35835: PUSH
35836: LD_VAR 0 48
35840: PUSH
35841: LD_VAR 0 49
35845: PUSH
35846: LD_VAR 0 50
35850: PUSH
35851: LD_VAR 0 51
35855: PUSH
35856: LD_VAR 0 52
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: PUSH
35869: LD_VAR 0 4
35873: PUSH
35874: LD_INT 1
35876: PLUS
35877: ARRAY
35878: ST_TO_ADDR
35879: GO 36070
35881: LD_INT 4
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35907
35887: LD_INT 5
35889: DOUBLE
35890: EQUAL
35891: IFTRUE 35907
35893: LD_INT 34
35895: DOUBLE
35896: EQUAL
35897: IFTRUE 35907
35899: LD_INT 37
35901: DOUBLE
35902: EQUAL
35903: IFTRUE 35907
35905: GO 35963
35907: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35908: LD_ADDR_VAR 0 9
35912: PUSH
35913: LD_VAR 0 53
35917: PUSH
35918: LD_VAR 0 54
35922: PUSH
35923: LD_VAR 0 55
35927: PUSH
35928: LD_VAR 0 56
35932: PUSH
35933: LD_VAR 0 57
35937: PUSH
35938: LD_VAR 0 58
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: PUSH
35951: LD_VAR 0 4
35955: PUSH
35956: LD_INT 1
35958: PLUS
35959: ARRAY
35960: ST_TO_ADDR
35961: GO 36070
35963: LD_INT 31
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 36013
35969: LD_INT 32
35971: DOUBLE
35972: EQUAL
35973: IFTRUE 36013
35975: LD_INT 33
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 36013
35981: LD_INT 27
35983: DOUBLE
35984: EQUAL
35985: IFTRUE 36013
35987: LD_INT 26
35989: DOUBLE
35990: EQUAL
35991: IFTRUE 36013
35993: LD_INT 28
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36013
35999: LD_INT 29
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36013
36005: LD_INT 30
36007: DOUBLE
36008: EQUAL
36009: IFTRUE 36013
36011: GO 36069
36013: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36014: LD_ADDR_VAR 0 9
36018: PUSH
36019: LD_VAR 0 59
36023: PUSH
36024: LD_VAR 0 60
36028: PUSH
36029: LD_VAR 0 61
36033: PUSH
36034: LD_VAR 0 62
36038: PUSH
36039: LD_VAR 0 63
36043: PUSH
36044: LD_VAR 0 64
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: PUSH
36057: LD_VAR 0 4
36061: PUSH
36062: LD_INT 1
36064: PLUS
36065: ARRAY
36066: ST_TO_ADDR
36067: GO 36070
36069: POP
// temp_list2 = [ ] ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: EMPTY
36076: ST_TO_ADDR
// for i in temp_list do
36077: LD_ADDR_VAR 0 8
36081: PUSH
36082: LD_VAR 0 9
36086: PUSH
36087: FOR_IN
36088: IFFALSE 36140
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36090: LD_ADDR_VAR 0 10
36094: PUSH
36095: LD_VAR 0 10
36099: PUSH
36100: LD_VAR 0 8
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PUSH
36109: LD_VAR 0 2
36113: PLUS
36114: PUSH
36115: LD_VAR 0 8
36119: PUSH
36120: LD_INT 2
36122: ARRAY
36123: PUSH
36124: LD_VAR 0 3
36128: PLUS
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: EMPTY
36135: LIST
36136: ADD
36137: ST_TO_ADDR
36138: GO 36087
36140: POP
36141: POP
// result = temp_list2 ;
36142: LD_ADDR_VAR 0 7
36146: PUSH
36147: LD_VAR 0 10
36151: ST_TO_ADDR
// end ;
36152: LD_VAR 0 7
36156: RET
// export function EnemyInRange ( unit , dist ) ; begin
36157: LD_INT 0
36159: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36160: LD_ADDR_VAR 0 3
36164: PUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 255
36174: PPUSH
36175: LD_VAR 0 1
36179: PPUSH
36180: CALL_OW 250
36184: PPUSH
36185: LD_VAR 0 1
36189: PPUSH
36190: CALL_OW 251
36194: PPUSH
36195: LD_VAR 0 2
36199: PPUSH
36200: CALL 9414 0 4
36204: PUSH
36205: LD_INT 4
36207: ARRAY
36208: ST_TO_ADDR
// end ;
36209: LD_VAR 0 3
36213: RET
// export function PlayerSeeMe ( unit ) ; begin
36214: LD_INT 0
36216: PPUSH
// result := See ( your_side , unit ) ;
36217: LD_ADDR_VAR 0 2
36221: PUSH
36222: LD_OWVAR 2
36226: PPUSH
36227: LD_VAR 0 1
36231: PPUSH
36232: CALL_OW 292
36236: ST_TO_ADDR
// end ;
36237: LD_VAR 0 2
36241: RET
// export function ReverseDir ( unit ) ; begin
36242: LD_INT 0
36244: PPUSH
// if not unit then
36245: LD_VAR 0 1
36249: NOT
36250: IFFALSE 36254
// exit ;
36252: GO 36277
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36254: LD_ADDR_VAR 0 2
36258: PUSH
36259: LD_VAR 0 1
36263: PPUSH
36264: CALL_OW 254
36268: PUSH
36269: LD_INT 3
36271: PLUS
36272: PUSH
36273: LD_INT 6
36275: MOD
36276: ST_TO_ADDR
// end ;
36277: LD_VAR 0 2
36281: RET
// export function ReverseArray ( array ) ; var i ; begin
36282: LD_INT 0
36284: PPUSH
36285: PPUSH
// if not array then
36286: LD_VAR 0 1
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36350
// result := [ ] ;
36295: LD_ADDR_VAR 0 2
36299: PUSH
36300: EMPTY
36301: ST_TO_ADDR
// for i := array downto 1 do
36302: LD_ADDR_VAR 0 3
36306: PUSH
36307: DOUBLE
36308: LD_VAR 0 1
36312: INC
36313: ST_TO_ADDR
36314: LD_INT 1
36316: PUSH
36317: FOR_DOWNTO
36318: IFFALSE 36348
// result := Join ( result , array [ i ] ) ;
36320: LD_ADDR_VAR 0 2
36324: PUSH
36325: LD_VAR 0 2
36329: PPUSH
36330: LD_VAR 0 1
36334: PUSH
36335: LD_VAR 0 3
36339: ARRAY
36340: PPUSH
36341: CALL 41202 0 2
36345: ST_TO_ADDR
36346: GO 36317
36348: POP
36349: POP
// end ;
36350: LD_VAR 0 2
36354: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36355: LD_INT 0
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
// if not unit or not hexes then
36363: LD_VAR 0 1
36367: NOT
36368: IFTRUE 36377
36370: PUSH
36371: LD_VAR 0 2
36375: NOT
36376: OR
36377: IFFALSE 36381
// exit ;
36379: GO 36504
// dist := 9999 ;
36381: LD_ADDR_VAR 0 5
36385: PUSH
36386: LD_INT 9999
36388: ST_TO_ADDR
// for i = 1 to hexes do
36389: LD_ADDR_VAR 0 4
36393: PUSH
36394: DOUBLE
36395: LD_INT 1
36397: DEC
36398: ST_TO_ADDR
36399: LD_VAR 0 2
36403: PUSH
36404: FOR_TO
36405: IFFALSE 36492
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36407: LD_ADDR_VAR 0 6
36411: PUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 4
36426: ARRAY
36427: PUSH
36428: LD_INT 1
36430: ARRAY
36431: PPUSH
36432: LD_VAR 0 2
36436: PUSH
36437: LD_VAR 0 4
36441: ARRAY
36442: PUSH
36443: LD_INT 2
36445: ARRAY
36446: PPUSH
36447: CALL_OW 297
36451: ST_TO_ADDR
// if tdist < dist then
36452: LD_VAR 0 6
36456: PUSH
36457: LD_VAR 0 5
36461: LESS
36462: IFFALSE 36490
// begin hex := hexes [ i ] ;
36464: LD_ADDR_VAR 0 8
36468: PUSH
36469: LD_VAR 0 2
36473: PUSH
36474: LD_VAR 0 4
36478: ARRAY
36479: ST_TO_ADDR
// dist := tdist ;
36480: LD_ADDR_VAR 0 5
36484: PUSH
36485: LD_VAR 0 6
36489: ST_TO_ADDR
// end ; end ;
36490: GO 36404
36492: POP
36493: POP
// result := hex ;
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_VAR 0 8
36503: ST_TO_ADDR
// end ;
36504: LD_VAR 0 3
36508: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36509: LD_INT 0
36511: PPUSH
36512: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36513: LD_VAR 0 1
36517: NOT
36518: IFTRUE 36557
36520: PUSH
36521: LD_VAR 0 1
36525: PUSH
36526: LD_INT 21
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 23
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PPUSH
36550: CALL_OW 69
36554: IN
36555: NOT
36556: OR
36557: IFFALSE 36561
// exit ;
36559: GO 36608
// for i = 1 to 3 do
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: DOUBLE
36567: LD_INT 1
36569: DEC
36570: ST_TO_ADDR
36571: LD_INT 3
36573: PUSH
36574: FOR_TO
36575: IFFALSE 36606
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 250
36586: PPUSH
36587: LD_VAR 0 1
36591: PPUSH
36592: CALL_OW 251
36596: PPUSH
36597: LD_INT 1
36599: PPUSH
36600: CALL_OW 453
36604: GO 36574
36606: POP
36607: POP
// end ;
36608: LD_VAR 0 2
36612: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36613: LD_INT 0
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
// if not unit or not enemy_unit then
36621: LD_VAR 0 1
36625: NOT
36626: IFTRUE 36635
36628: PUSH
36629: LD_VAR 0 2
36633: NOT
36634: OR
36635: IFFALSE 36639
// exit ;
36637: GO 37120
// if GetLives ( i ) < 250 then
36639: LD_VAR 0 4
36643: PPUSH
36644: CALL_OW 256
36648: PUSH
36649: LD_INT 250
36651: LESS
36652: IFFALSE 36665
// begin ComAutodestruct ( i ) ;
36654: LD_VAR 0 4
36658: PPUSH
36659: CALL 36509 0 1
// exit ;
36663: GO 37120
// end ; x := GetX ( enemy_unit ) ;
36665: LD_ADDR_VAR 0 7
36669: PUSH
36670: LD_VAR 0 2
36674: PPUSH
36675: CALL_OW 250
36679: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36680: LD_ADDR_VAR 0 8
36684: PUSH
36685: LD_VAR 0 2
36689: PPUSH
36690: CALL_OW 251
36694: ST_TO_ADDR
// if not x or not y then
36695: LD_VAR 0 7
36699: NOT
36700: IFTRUE 36709
36702: PUSH
36703: LD_VAR 0 8
36707: NOT
36708: OR
36709: IFFALSE 36713
// exit ;
36711: GO 37120
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36713: LD_ADDR_VAR 0 6
36717: PUSH
36718: LD_VAR 0 7
36722: PPUSH
36723: LD_INT 0
36725: PPUSH
36726: LD_INT 4
36728: PPUSH
36729: CALL_OW 272
36733: PUSH
36734: LD_VAR 0 8
36738: PPUSH
36739: LD_INT 0
36741: PPUSH
36742: LD_INT 4
36744: PPUSH
36745: CALL_OW 273
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_VAR 0 7
36758: PPUSH
36759: LD_INT 1
36761: PPUSH
36762: LD_INT 4
36764: PPUSH
36765: CALL_OW 272
36769: PUSH
36770: LD_VAR 0 8
36774: PPUSH
36775: LD_INT 1
36777: PPUSH
36778: LD_INT 4
36780: PPUSH
36781: CALL_OW 273
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_VAR 0 7
36794: PPUSH
36795: LD_INT 2
36797: PPUSH
36798: LD_INT 4
36800: PPUSH
36801: CALL_OW 272
36805: PUSH
36806: LD_VAR 0 8
36810: PPUSH
36811: LD_INT 2
36813: PPUSH
36814: LD_INT 4
36816: PPUSH
36817: CALL_OW 273
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_VAR 0 7
36830: PPUSH
36831: LD_INT 3
36833: PPUSH
36834: LD_INT 4
36836: PPUSH
36837: CALL_OW 272
36841: PUSH
36842: LD_VAR 0 8
36846: PPUSH
36847: LD_INT 3
36849: PPUSH
36850: LD_INT 4
36852: PPUSH
36853: CALL_OW 273
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_VAR 0 7
36866: PPUSH
36867: LD_INT 4
36869: PPUSH
36870: LD_INT 4
36872: PPUSH
36873: CALL_OW 272
36877: PUSH
36878: LD_VAR 0 8
36882: PPUSH
36883: LD_INT 4
36885: PPUSH
36886: LD_INT 4
36888: PPUSH
36889: CALL_OW 273
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 7
36902: PPUSH
36903: LD_INT 5
36905: PPUSH
36906: LD_INT 4
36908: PPUSH
36909: CALL_OW 272
36913: PUSH
36914: LD_VAR 0 8
36918: PPUSH
36919: LD_INT 5
36921: PPUSH
36922: LD_INT 4
36924: PPUSH
36925: CALL_OW 273
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// for i = tmp downto 1 do
36942: LD_ADDR_VAR 0 4
36946: PUSH
36947: DOUBLE
36948: LD_VAR 0 6
36952: INC
36953: ST_TO_ADDR
36954: LD_INT 1
36956: PUSH
36957: FOR_DOWNTO
36958: IFFALSE 37061
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36960: LD_VAR 0 6
36964: PUSH
36965: LD_VAR 0 4
36969: ARRAY
36970: PUSH
36971: LD_INT 1
36973: ARRAY
36974: PPUSH
36975: LD_VAR 0 6
36979: PUSH
36980: LD_VAR 0 4
36984: ARRAY
36985: PUSH
36986: LD_INT 2
36988: ARRAY
36989: PPUSH
36990: CALL_OW 488
36994: NOT
36995: IFTRUE 37037
36997: PUSH
36998: LD_VAR 0 6
37002: PUSH
37003: LD_VAR 0 4
37007: ARRAY
37008: PUSH
37009: LD_INT 1
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 6
37017: PUSH
37018: LD_VAR 0 4
37022: ARRAY
37023: PUSH
37024: LD_INT 2
37026: ARRAY
37027: PPUSH
37028: CALL_OW 428
37032: PUSH
37033: LD_INT 0
37035: NONEQUAL
37036: OR
37037: IFFALSE 37059
// tmp := Delete ( tmp , i ) ;
37039: LD_ADDR_VAR 0 6
37043: PUSH
37044: LD_VAR 0 6
37048: PPUSH
37049: LD_VAR 0 4
37053: PPUSH
37054: CALL_OW 3
37058: ST_TO_ADDR
37059: GO 36957
37061: POP
37062: POP
// j := GetClosestHex ( unit , tmp ) ;
37063: LD_ADDR_VAR 0 5
37067: PUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL 36355 0 2
37082: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37083: LD_VAR 0 1
37087: PPUSH
37088: LD_VAR 0 5
37092: PUSH
37093: LD_INT 1
37095: ARRAY
37096: PPUSH
37097: LD_VAR 0 5
37101: PUSH
37102: LD_INT 2
37104: ARRAY
37105: PPUSH
37106: CALL_OW 111
// result := j ;
37110: LD_ADDR_VAR 0 3
37114: PUSH
37115: LD_VAR 0 5
37119: ST_TO_ADDR
// end ;
37120: LD_VAR 0 3
37124: RET
// export function PrepareApemanSoldier ( ) ; begin
37125: LD_INT 0
37127: PPUSH
// uc_nation := 0 ;
37128: LD_ADDR_OWVAR 21
37132: PUSH
37133: LD_INT 0
37135: ST_TO_ADDR
// hc_sex := sex_male ;
37136: LD_ADDR_OWVAR 27
37140: PUSH
37141: LD_INT 1
37143: ST_TO_ADDR
// hc_name :=  ;
37144: LD_ADDR_OWVAR 26
37148: PUSH
37149: LD_STRING 
37151: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37152: LD_ADDR_OWVAR 28
37156: PUSH
37157: LD_INT 15
37159: ST_TO_ADDR
// hc_gallery :=  ;
37160: LD_ADDR_OWVAR 33
37164: PUSH
37165: LD_STRING 
37167: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37168: LD_ADDR_OWVAR 31
37172: PUSH
37173: LD_INT 0
37175: PPUSH
37176: LD_INT 3
37178: PPUSH
37179: CALL_OW 12
37183: PUSH
37184: LD_INT 0
37186: PPUSH
37187: LD_INT 3
37189: PPUSH
37190: CALL_OW 12
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37207: LD_ADDR_OWVAR 29
37211: PUSH
37212: LD_INT 10
37214: PUSH
37215: LD_INT 12
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: ST_TO_ADDR
// end ;
37222: LD_VAR 0 1
37226: RET
// export function PrepareApemanEngineer ( ) ; begin
37227: LD_INT 0
37229: PPUSH
// uc_nation := 0 ;
37230: LD_ADDR_OWVAR 21
37234: PUSH
37235: LD_INT 0
37237: ST_TO_ADDR
// hc_sex := sex_male ;
37238: LD_ADDR_OWVAR 27
37242: PUSH
37243: LD_INT 1
37245: ST_TO_ADDR
// hc_name :=  ;
37246: LD_ADDR_OWVAR 26
37250: PUSH
37251: LD_STRING 
37253: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37254: LD_ADDR_OWVAR 28
37258: PUSH
37259: LD_INT 16
37261: ST_TO_ADDR
// hc_gallery :=  ;
37262: LD_ADDR_OWVAR 33
37266: PUSH
37267: LD_STRING 
37269: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37270: LD_ADDR_OWVAR 31
37274: PUSH
37275: LD_INT 0
37277: PPUSH
37278: LD_INT 3
37280: PPUSH
37281: CALL_OW 12
37285: PUSH
37286: LD_INT 0
37288: PPUSH
37289: LD_INT 3
37291: PPUSH
37292: CALL_OW 12
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37309: LD_ADDR_OWVAR 29
37313: PUSH
37314: LD_INT 10
37316: PUSH
37317: LD_INT 12
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: ST_TO_ADDR
// end ;
37324: LD_VAR 0 1
37328: RET
// export function PrepareApeman ( agressivity ) ; begin
37329: LD_INT 0
37331: PPUSH
// uc_side := 0 ;
37332: LD_ADDR_OWVAR 20
37336: PUSH
37337: LD_INT 0
37339: ST_TO_ADDR
// uc_nation := 0 ;
37340: LD_ADDR_OWVAR 21
37344: PUSH
37345: LD_INT 0
37347: ST_TO_ADDR
// hc_sex := sex_male ;
37348: LD_ADDR_OWVAR 27
37352: PUSH
37353: LD_INT 1
37355: ST_TO_ADDR
// hc_class := class_apeman ;
37356: LD_ADDR_OWVAR 28
37360: PUSH
37361: LD_INT 12
37363: ST_TO_ADDR
// hc_gallery :=  ;
37364: LD_ADDR_OWVAR 33
37368: PUSH
37369: LD_STRING 
37371: ST_TO_ADDR
// hc_name :=  ;
37372: LD_ADDR_OWVAR 26
37376: PUSH
37377: LD_STRING 
37379: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37380: LD_ADDR_OWVAR 29
37384: PUSH
37385: LD_INT 10
37387: PUSH
37388: LD_INT 12
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: ST_TO_ADDR
// if agressivity = 0 then
37395: LD_VAR 0 1
37399: PUSH
37400: LD_INT 0
37402: EQUAL
37403: IFFALSE 37415
// hc_agressivity := 0 else
37405: LD_ADDR_OWVAR 35
37409: PUSH
37410: LD_INT 0
37412: ST_TO_ADDR
37413: GO 37436
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37415: LD_ADDR_OWVAR 35
37419: PUSH
37420: LD_VAR 0 1
37424: NEG
37425: PPUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 12
37435: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37436: LD_ADDR_OWVAR 31
37440: PUSH
37441: LD_INT 0
37443: PPUSH
37444: LD_INT 3
37446: PPUSH
37447: CALL_OW 12
37451: PUSH
37452: LD_INT 0
37454: PPUSH
37455: LD_INT 3
37457: PPUSH
37458: CALL_OW 12
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: ST_TO_ADDR
// end ;
37475: LD_VAR 0 2
37479: RET
// export function PrepareTiger ( agressivity ) ; begin
37480: LD_INT 0
37482: PPUSH
// uc_side := 0 ;
37483: LD_ADDR_OWVAR 20
37487: PUSH
37488: LD_INT 0
37490: ST_TO_ADDR
// uc_nation := 0 ;
37491: LD_ADDR_OWVAR 21
37495: PUSH
37496: LD_INT 0
37498: ST_TO_ADDR
// InitHc ;
37499: CALL_OW 19
// hc_class := class_tiger ;
37503: LD_ADDR_OWVAR 28
37507: PUSH
37508: LD_INT 14
37510: ST_TO_ADDR
// hc_gallery :=  ;
37511: LD_ADDR_OWVAR 33
37515: PUSH
37516: LD_STRING 
37518: ST_TO_ADDR
// hc_name :=  ;
37519: LD_ADDR_OWVAR 26
37523: PUSH
37524: LD_STRING 
37526: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37527: LD_ADDR_OWVAR 35
37531: PUSH
37532: LD_VAR 0 1
37536: NEG
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 12
37547: ST_TO_ADDR
// end ;
37548: LD_VAR 0 2
37552: RET
// export function PrepareEnchidna ( ) ; begin
37553: LD_INT 0
37555: PPUSH
// uc_side := 0 ;
37556: LD_ADDR_OWVAR 20
37560: PUSH
37561: LD_INT 0
37563: ST_TO_ADDR
// uc_nation := 0 ;
37564: LD_ADDR_OWVAR 21
37568: PUSH
37569: LD_INT 0
37571: ST_TO_ADDR
// InitHc ;
37572: CALL_OW 19
// hc_class := class_baggie ;
37576: LD_ADDR_OWVAR 28
37580: PUSH
37581: LD_INT 13
37583: ST_TO_ADDR
// hc_gallery :=  ;
37584: LD_ADDR_OWVAR 33
37588: PUSH
37589: LD_STRING 
37591: ST_TO_ADDR
// hc_name :=  ;
37592: LD_ADDR_OWVAR 26
37596: PUSH
37597: LD_STRING 
37599: ST_TO_ADDR
// end ;
37600: LD_VAR 0 1
37604: RET
// export function PrepareFrog ( ) ; begin
37605: LD_INT 0
37607: PPUSH
// uc_side := 0 ;
37608: LD_ADDR_OWVAR 20
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// uc_nation := 0 ;
37616: LD_ADDR_OWVAR 21
37620: PUSH
37621: LD_INT 0
37623: ST_TO_ADDR
// InitHc ;
37624: CALL_OW 19
// hc_class := class_frog ;
37628: LD_ADDR_OWVAR 28
37632: PUSH
37633: LD_INT 19
37635: ST_TO_ADDR
// hc_gallery :=  ;
37636: LD_ADDR_OWVAR 33
37640: PUSH
37641: LD_STRING 
37643: ST_TO_ADDR
// hc_name :=  ;
37644: LD_ADDR_OWVAR 26
37648: PUSH
37649: LD_STRING 
37651: ST_TO_ADDR
// end ;
37652: LD_VAR 0 1
37656: RET
// export function PrepareFish ( ) ; begin
37657: LD_INT 0
37659: PPUSH
// uc_side := 0 ;
37660: LD_ADDR_OWVAR 20
37664: PUSH
37665: LD_INT 0
37667: ST_TO_ADDR
// uc_nation := 0 ;
37668: LD_ADDR_OWVAR 21
37672: PUSH
37673: LD_INT 0
37675: ST_TO_ADDR
// InitHc ;
37676: CALL_OW 19
// hc_class := class_fish ;
37680: LD_ADDR_OWVAR 28
37684: PUSH
37685: LD_INT 20
37687: ST_TO_ADDR
// hc_gallery :=  ;
37688: LD_ADDR_OWVAR 33
37692: PUSH
37693: LD_STRING 
37695: ST_TO_ADDR
// hc_name :=  ;
37696: LD_ADDR_OWVAR 26
37700: PUSH
37701: LD_STRING 
37703: ST_TO_ADDR
// end ;
37704: LD_VAR 0 1
37708: RET
// export function PrepareBird ( ) ; begin
37709: LD_INT 0
37711: PPUSH
// uc_side := 0 ;
37712: LD_ADDR_OWVAR 20
37716: PUSH
37717: LD_INT 0
37719: ST_TO_ADDR
// uc_nation := 0 ;
37720: LD_ADDR_OWVAR 21
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// InitHc ;
37728: CALL_OW 19
// hc_class := class_phororhacos ;
37732: LD_ADDR_OWVAR 28
37736: PUSH
37737: LD_INT 18
37739: ST_TO_ADDR
// hc_gallery :=  ;
37740: LD_ADDR_OWVAR 33
37744: PUSH
37745: LD_STRING 
37747: ST_TO_ADDR
// hc_name :=  ;
37748: LD_ADDR_OWVAR 26
37752: PUSH
37753: LD_STRING 
37755: ST_TO_ADDR
// end ;
37756: LD_VAR 0 1
37760: RET
// export function PrepareHorse ( ) ; begin
37761: LD_INT 0
37763: PPUSH
// uc_side := 0 ;
37764: LD_ADDR_OWVAR 20
37768: PUSH
37769: LD_INT 0
37771: ST_TO_ADDR
// uc_nation := 0 ;
37772: LD_ADDR_OWVAR 21
37776: PUSH
37777: LD_INT 0
37779: ST_TO_ADDR
// InitHc ;
37780: CALL_OW 19
// hc_class := class_horse ;
37784: LD_ADDR_OWVAR 28
37788: PUSH
37789: LD_INT 21
37791: ST_TO_ADDR
// hc_gallery :=  ;
37792: LD_ADDR_OWVAR 33
37796: PUSH
37797: LD_STRING 
37799: ST_TO_ADDR
// hc_name :=  ;
37800: LD_ADDR_OWVAR 26
37804: PUSH
37805: LD_STRING 
37807: ST_TO_ADDR
// end ;
37808: LD_VAR 0 1
37812: RET
// export function PrepareMastodont ( ) ; begin
37813: LD_INT 0
37815: PPUSH
// uc_side := 0 ;
37816: LD_ADDR_OWVAR 20
37820: PUSH
37821: LD_INT 0
37823: ST_TO_ADDR
// uc_nation := 0 ;
37824: LD_ADDR_OWVAR 21
37828: PUSH
37829: LD_INT 0
37831: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37832: LD_ADDR_OWVAR 37
37836: PUSH
37837: LD_INT 31
37839: ST_TO_ADDR
// vc_control := control_rider ;
37840: LD_ADDR_OWVAR 38
37844: PUSH
37845: LD_INT 4
37847: ST_TO_ADDR
// end ;
37848: LD_VAR 0 1
37852: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37853: LD_INT 0
37855: PPUSH
37856: PPUSH
37857: PPUSH
// uc_side = 0 ;
37858: LD_ADDR_OWVAR 20
37862: PUSH
37863: LD_INT 0
37865: ST_TO_ADDR
// uc_nation = 0 ;
37866: LD_ADDR_OWVAR 21
37870: PUSH
37871: LD_INT 0
37873: ST_TO_ADDR
// InitHc_All ( ) ;
37874: CALL_OW 584
// InitVc ;
37878: CALL_OW 20
// if mastodonts then
37882: LD_VAR 0 6
37886: IFFALSE 37953
// for i = 1 to mastodonts do
37888: LD_ADDR_VAR 0 11
37892: PUSH
37893: DOUBLE
37894: LD_INT 1
37896: DEC
37897: ST_TO_ADDR
37898: LD_VAR 0 6
37902: PUSH
37903: FOR_TO
37904: IFFALSE 37951
// begin vc_chassis := 31 ;
37906: LD_ADDR_OWVAR 37
37910: PUSH
37911: LD_INT 31
37913: ST_TO_ADDR
// vc_control := control_rider ;
37914: LD_ADDR_OWVAR 38
37918: PUSH
37919: LD_INT 4
37921: ST_TO_ADDR
// animal := CreateVehicle ;
37922: LD_ADDR_VAR 0 12
37926: PUSH
37927: CALL_OW 45
37931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37932: LD_VAR 0 12
37936: PPUSH
37937: LD_VAR 0 8
37941: PPUSH
37942: LD_INT 0
37944: PPUSH
37945: CALL 40095 0 3
// end ;
37949: GO 37903
37951: POP
37952: POP
// if horses then
37953: LD_VAR 0 5
37957: IFFALSE 38024
// for i = 1 to horses do
37959: LD_ADDR_VAR 0 11
37963: PUSH
37964: DOUBLE
37965: LD_INT 1
37967: DEC
37968: ST_TO_ADDR
37969: LD_VAR 0 5
37973: PUSH
37974: FOR_TO
37975: IFFALSE 38022
// begin hc_class := 21 ;
37977: LD_ADDR_OWVAR 28
37981: PUSH
37982: LD_INT 21
37984: ST_TO_ADDR
// hc_gallery :=  ;
37985: LD_ADDR_OWVAR 33
37989: PUSH
37990: LD_STRING 
37992: ST_TO_ADDR
// animal := CreateHuman ;
37993: LD_ADDR_VAR 0 12
37997: PUSH
37998: CALL_OW 44
38002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38003: LD_VAR 0 12
38007: PPUSH
38008: LD_VAR 0 8
38012: PPUSH
38013: LD_INT 0
38015: PPUSH
38016: CALL 40095 0 3
// end ;
38020: GO 37974
38022: POP
38023: POP
// if birds then
38024: LD_VAR 0 1
38028: IFFALSE 38095
// for i = 1 to birds do
38030: LD_ADDR_VAR 0 11
38034: PUSH
38035: DOUBLE
38036: LD_INT 1
38038: DEC
38039: ST_TO_ADDR
38040: LD_VAR 0 1
38044: PUSH
38045: FOR_TO
38046: IFFALSE 38093
// begin hc_class := 18 ;
38048: LD_ADDR_OWVAR 28
38052: PUSH
38053: LD_INT 18
38055: ST_TO_ADDR
// hc_gallery =  ;
38056: LD_ADDR_OWVAR 33
38060: PUSH
38061: LD_STRING 
38063: ST_TO_ADDR
// animal := CreateHuman ;
38064: LD_ADDR_VAR 0 12
38068: PUSH
38069: CALL_OW 44
38073: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38074: LD_VAR 0 12
38078: PPUSH
38079: LD_VAR 0 8
38083: PPUSH
38084: LD_INT 0
38086: PPUSH
38087: CALL 40095 0 3
// end ;
38091: GO 38045
38093: POP
38094: POP
// if tigers then
38095: LD_VAR 0 2
38099: IFFALSE 38183
// for i = 1 to tigers do
38101: LD_ADDR_VAR 0 11
38105: PUSH
38106: DOUBLE
38107: LD_INT 1
38109: DEC
38110: ST_TO_ADDR
38111: LD_VAR 0 2
38115: PUSH
38116: FOR_TO
38117: IFFALSE 38181
// begin hc_class = class_tiger ;
38119: LD_ADDR_OWVAR 28
38123: PUSH
38124: LD_INT 14
38126: ST_TO_ADDR
// hc_gallery =  ;
38127: LD_ADDR_OWVAR 33
38131: PUSH
38132: LD_STRING 
38134: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38135: LD_ADDR_OWVAR 35
38139: PUSH
38140: LD_INT 7
38142: NEG
38143: PPUSH
38144: LD_INT 7
38146: PPUSH
38147: CALL_OW 12
38151: ST_TO_ADDR
// animal := CreateHuman ;
38152: LD_ADDR_VAR 0 12
38156: PUSH
38157: CALL_OW 44
38161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38162: LD_VAR 0 12
38166: PPUSH
38167: LD_VAR 0 8
38171: PPUSH
38172: LD_INT 0
38174: PPUSH
38175: CALL 40095 0 3
// end ;
38179: GO 38116
38181: POP
38182: POP
// if apemans then
38183: LD_VAR 0 3
38187: IFFALSE 38310
// for i = 1 to apemans do
38189: LD_ADDR_VAR 0 11
38193: PUSH
38194: DOUBLE
38195: LD_INT 1
38197: DEC
38198: ST_TO_ADDR
38199: LD_VAR 0 3
38203: PUSH
38204: FOR_TO
38205: IFFALSE 38308
// begin hc_class = class_apeman ;
38207: LD_ADDR_OWVAR 28
38211: PUSH
38212: LD_INT 12
38214: ST_TO_ADDR
// hc_gallery =  ;
38215: LD_ADDR_OWVAR 33
38219: PUSH
38220: LD_STRING 
38222: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38223: LD_ADDR_OWVAR 35
38227: PUSH
38228: LD_INT 2
38230: NEG
38231: PPUSH
38232: LD_INT 2
38234: PPUSH
38235: CALL_OW 12
38239: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38240: LD_ADDR_OWVAR 31
38244: PUSH
38245: LD_INT 1
38247: PPUSH
38248: LD_INT 3
38250: PPUSH
38251: CALL_OW 12
38255: PUSH
38256: LD_INT 1
38258: PPUSH
38259: LD_INT 3
38261: PPUSH
38262: CALL_OW 12
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// animal := CreateHuman ;
38279: LD_ADDR_VAR 0 12
38283: PUSH
38284: CALL_OW 44
38288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38289: LD_VAR 0 12
38293: PPUSH
38294: LD_VAR 0 8
38298: PPUSH
38299: LD_INT 0
38301: PPUSH
38302: CALL 40095 0 3
// end ;
38306: GO 38204
38308: POP
38309: POP
// if enchidnas then
38310: LD_VAR 0 4
38314: IFFALSE 38381
// for i = 1 to enchidnas do
38316: LD_ADDR_VAR 0 11
38320: PUSH
38321: DOUBLE
38322: LD_INT 1
38324: DEC
38325: ST_TO_ADDR
38326: LD_VAR 0 4
38330: PUSH
38331: FOR_TO
38332: IFFALSE 38379
// begin hc_class = 13 ;
38334: LD_ADDR_OWVAR 28
38338: PUSH
38339: LD_INT 13
38341: ST_TO_ADDR
// hc_gallery =  ;
38342: LD_ADDR_OWVAR 33
38346: PUSH
38347: LD_STRING 
38349: ST_TO_ADDR
// animal := CreateHuman ;
38350: LD_ADDR_VAR 0 12
38354: PUSH
38355: CALL_OW 44
38359: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38360: LD_VAR 0 12
38364: PPUSH
38365: LD_VAR 0 8
38369: PPUSH
38370: LD_INT 0
38372: PPUSH
38373: CALL 40095 0 3
// end ;
38377: GO 38331
38379: POP
38380: POP
// if fishes then
38381: LD_VAR 0 7
38385: IFFALSE 38452
// for i = 1 to fishes do
38387: LD_ADDR_VAR 0 11
38391: PUSH
38392: DOUBLE
38393: LD_INT 1
38395: DEC
38396: ST_TO_ADDR
38397: LD_VAR 0 7
38401: PUSH
38402: FOR_TO
38403: IFFALSE 38450
// begin hc_class = 20 ;
38405: LD_ADDR_OWVAR 28
38409: PUSH
38410: LD_INT 20
38412: ST_TO_ADDR
// hc_gallery =  ;
38413: LD_ADDR_OWVAR 33
38417: PUSH
38418: LD_STRING 
38420: ST_TO_ADDR
// animal := CreateHuman ;
38421: LD_ADDR_VAR 0 12
38425: PUSH
38426: CALL_OW 44
38430: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38431: LD_VAR 0 12
38435: PPUSH
38436: LD_VAR 0 9
38440: PPUSH
38441: LD_INT 0
38443: PPUSH
38444: CALL 40095 0 3
// end ;
38448: GO 38402
38450: POP
38451: POP
// end ;
38452: LD_VAR 0 10
38456: RET
// export function WantHeal ( sci , unit ) ; begin
38457: LD_INT 0
38459: PPUSH
// if GetTaskList ( sci ) > 0 then
38460: LD_VAR 0 1
38464: PPUSH
38465: CALL_OW 437
38469: PUSH
38470: LD_INT 0
38472: GREATER
38473: IFFALSE 38545
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38475: LD_VAR 0 1
38479: PPUSH
38480: CALL_OW 437
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PUSH
38493: LD_STRING l
38495: EQUAL
38496: IFFALSE 38523
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 437
38508: PUSH
38509: LD_INT 1
38511: ARRAY
38512: PUSH
38513: LD_INT 4
38515: ARRAY
38516: PUSH
38517: LD_VAR 0 2
38521: EQUAL
38522: AND
38523: IFFALSE 38535
// result := true else
38525: LD_ADDR_VAR 0 3
38529: PUSH
38530: LD_INT 1
38532: ST_TO_ADDR
38533: GO 38543
// result := false ;
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_INT 0
38542: ST_TO_ADDR
// end else
38543: GO 38553
// result := false ;
38545: LD_ADDR_VAR 0 3
38549: PUSH
38550: LD_INT 0
38552: ST_TO_ADDR
// end ;
38553: LD_VAR 0 3
38557: RET
// export function HealTarget ( sci ) ; begin
38558: LD_INT 0
38560: PPUSH
// if not sci then
38561: LD_VAR 0 1
38565: NOT
38566: IFFALSE 38570
// exit ;
38568: GO 38635
// result := 0 ;
38570: LD_ADDR_VAR 0 2
38574: PUSH
38575: LD_INT 0
38577: ST_TO_ADDR
// if GetTaskList ( sci ) then
38578: LD_VAR 0 1
38582: PPUSH
38583: CALL_OW 437
38587: IFFALSE 38635
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 437
38598: PUSH
38599: LD_INT 1
38601: ARRAY
38602: PUSH
38603: LD_INT 1
38605: ARRAY
38606: PUSH
38607: LD_STRING l
38609: EQUAL
38610: IFFALSE 38635
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38612: LD_ADDR_VAR 0 2
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 437
38626: PUSH
38627: LD_INT 1
38629: ARRAY
38630: PUSH
38631: LD_INT 4
38633: ARRAY
38634: ST_TO_ADDR
// end ;
38635: LD_VAR 0 2
38639: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38640: LD_INT 0
38642: PPUSH
38643: PPUSH
38644: PPUSH
38645: PPUSH
// if not base_units then
38646: LD_VAR 0 1
38650: NOT
38651: IFFALSE 38655
// exit ;
38653: GO 38742
// result := false ;
38655: LD_ADDR_VAR 0 2
38659: PUSH
38660: LD_INT 0
38662: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38663: LD_ADDR_VAR 0 5
38667: PUSH
38668: LD_VAR 0 1
38672: PPUSH
38673: LD_INT 21
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PPUSH
38683: CALL_OW 72
38687: ST_TO_ADDR
// if not tmp then
38688: LD_VAR 0 5
38692: NOT
38693: IFFALSE 38697
// exit ;
38695: GO 38742
// for i in tmp do
38697: LD_ADDR_VAR 0 3
38701: PUSH
38702: LD_VAR 0 5
38706: PUSH
38707: FOR_IN
38708: IFFALSE 38740
// begin result := EnemyInRange ( i , 22 ) ;
38710: LD_ADDR_VAR 0 2
38714: PUSH
38715: LD_VAR 0 3
38719: PPUSH
38720: LD_INT 22
38722: PPUSH
38723: CALL 36157 0 2
38727: ST_TO_ADDR
// if result then
38728: LD_VAR 0 2
38732: IFFALSE 38738
// exit ;
38734: POP
38735: POP
38736: GO 38742
// end ;
38738: GO 38707
38740: POP
38741: POP
// end ;
38742: LD_VAR 0 2
38746: RET
// export function FilterByTag ( units , tag ) ; begin
38747: LD_INT 0
38749: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38750: LD_ADDR_VAR 0 3
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: LD_INT 120
38762: PUSH
38763: LD_VAR 0 2
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PPUSH
38772: CALL_OW 72
38776: ST_TO_ADDR
// end ;
38777: LD_VAR 0 3
38781: RET
// export function IsDriver ( un ) ; begin
38782: LD_INT 0
38784: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38785: LD_ADDR_VAR 0 2
38789: PUSH
38790: LD_VAR 0 1
38794: PUSH
38795: LD_INT 55
38797: PUSH
38798: EMPTY
38799: LIST
38800: PPUSH
38801: CALL_OW 69
38805: IN
38806: ST_TO_ADDR
// end ;
38807: LD_VAR 0 2
38811: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38812: LD_INT 0
38814: PPUSH
38815: PPUSH
// list := [ ] ;
38816: LD_ADDR_VAR 0 5
38820: PUSH
38821: EMPTY
38822: ST_TO_ADDR
// case d of 0 :
38823: LD_VAR 0 3
38827: PUSH
38828: LD_INT 0
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38836
38834: GO 38969
38836: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38837: LD_ADDR_VAR 0 5
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 4
38849: MINUS
38850: PUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_INT 4
38858: MINUS
38859: PUSH
38860: LD_INT 2
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 3
38875: MINUS
38876: PUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: LD_VAR 0 1
38894: PUSH
38895: LD_INT 4
38897: PLUS
38898: PUSH
38899: LD_VAR 0 2
38903: PUSH
38904: LD_INT 4
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_INT 3
38919: PLUS
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 3
38928: PLUS
38929: PUSH
38930: LD_INT 5
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: PUSH
38938: LD_VAR 0 1
38942: PUSH
38943: LD_VAR 0 2
38947: PUSH
38948: LD_INT 4
38950: PLUS
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: ST_TO_ADDR
// end ; 1 :
38967: GO 39667
38969: LD_INT 1
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 39110
38977: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38978: LD_ADDR_VAR 0 5
38982: PUSH
38983: LD_VAR 0 1
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 4
38995: MINUS
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_INT 3
39012: MINUS
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_INT 3
39021: MINUS
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_INT 4
39038: MINUS
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_VAR 0 2
39062: PUSH
39063: LD_INT 3
39065: PLUS
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 4
39082: PLUS
39083: PUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_INT 4
39091: PLUS
39092: PUSH
39093: LD_INT 5
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
// end ; 2 :
39108: GO 39667
39110: LD_INT 2
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39247
39118: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39119: LD_ADDR_VAR 0 5
39123: PUSH
39124: LD_VAR 0 1
39128: PUSH
39129: LD_VAR 0 2
39133: PUSH
39134: LD_INT 3
39136: MINUS
39137: PUSH
39138: LD_INT 3
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_INT 4
39153: PLUS
39154: PUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_INT 4
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: LIST
39167: PUSH
39168: LD_VAR 0 1
39172: PUSH
39173: LD_VAR 0 2
39177: PUSH
39178: LD_INT 4
39180: PLUS
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: PUSH
39190: LD_VAR 0 1
39194: PUSH
39195: LD_INT 3
39197: MINUS
39198: PUSH
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: LD_VAR 0 1
39216: PUSH
39217: LD_INT 4
39219: MINUS
39220: PUSH
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 4
39228: MINUS
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: ST_TO_ADDR
// end ; 3 :
39245: GO 39667
39247: LD_INT 3
39249: DOUBLE
39250: EQUAL
39251: IFTRUE 39255
39253: GO 39388
39255: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39256: LD_ADDR_VAR 0 5
39260: PUSH
39261: LD_VAR 0 1
39265: PUSH
39266: LD_INT 3
39268: PLUS
39269: PUSH
39270: LD_VAR 0 2
39274: PUSH
39275: LD_INT 4
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: LD_VAR 0 1
39287: PUSH
39288: LD_INT 4
39290: PLUS
39291: PUSH
39292: LD_VAR 0 2
39296: PUSH
39297: LD_INT 4
39299: PLUS
39300: PUSH
39301: LD_INT 5
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PUSH
39309: LD_VAR 0 1
39313: PUSH
39314: LD_INT 4
39316: MINUS
39317: PUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: PUSH
39331: LD_VAR 0 1
39335: PUSH
39336: LD_VAR 0 2
39340: PUSH
39341: LD_INT 4
39343: MINUS
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_VAR 0 1
39357: PUSH
39358: LD_INT 3
39360: MINUS
39361: PUSH
39362: LD_VAR 0 2
39366: PUSH
39367: LD_INT 3
39369: MINUS
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
// end ; 4 :
39386: GO 39667
39388: LD_INT 4
39390: DOUBLE
39391: EQUAL
39392: IFTRUE 39396
39394: GO 39529
39396: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39397: LD_ADDR_VAR 0 5
39401: PUSH
39402: LD_VAR 0 1
39406: PUSH
39407: LD_VAR 0 2
39411: PUSH
39412: LD_INT 4
39414: PLUS
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: PUSH
39424: LD_VAR 0 1
39428: PUSH
39429: LD_INT 3
39431: PLUS
39432: PUSH
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 3
39440: PLUS
39441: PUSH
39442: LD_INT 5
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: LD_INT 4
39457: PLUS
39458: PUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_INT 4
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: LIST
39471: PUSH
39472: LD_VAR 0 1
39476: PUSH
39477: LD_VAR 0 2
39481: PUSH
39482: LD_INT 3
39484: MINUS
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: LD_VAR 0 1
39498: PUSH
39499: LD_INT 4
39501: MINUS
39502: PUSH
39503: LD_VAR 0 2
39507: PUSH
39508: LD_INT 4
39510: MINUS
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// end ; 5 :
39527: GO 39667
39529: LD_INT 5
39531: DOUBLE
39532: EQUAL
39533: IFTRUE 39537
39535: GO 39666
39537: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39538: LD_ADDR_VAR 0 5
39542: PUSH
39543: LD_VAR 0 1
39547: PUSH
39548: LD_INT 4
39550: MINUS
39551: PUSH
39552: LD_VAR 0 2
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: PUSH
39565: LD_VAR 0 1
39569: PUSH
39570: LD_VAR 0 2
39574: PUSH
39575: LD_INT 4
39577: MINUS
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: PUSH
39587: LD_VAR 0 1
39591: PUSH
39592: LD_INT 4
39594: PLUS
39595: PUSH
39596: LD_VAR 0 2
39600: PUSH
39601: LD_INT 4
39603: PLUS
39604: PUSH
39605: LD_INT 5
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: PUSH
39613: LD_VAR 0 1
39617: PUSH
39618: LD_INT 3
39620: PLUS
39621: PUSH
39622: LD_VAR 0 2
39626: PUSH
39627: LD_INT 4
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: PUSH
39635: LD_VAR 0 1
39639: PUSH
39640: LD_VAR 0 2
39644: PUSH
39645: LD_INT 3
39647: PLUS
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// end ; end ;
39664: GO 39667
39666: POP
// result := list ;
39667: LD_ADDR_VAR 0 4
39671: PUSH
39672: LD_VAR 0 5
39676: ST_TO_ADDR
// end ;
39677: LD_VAR 0 4
39681: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39682: LD_INT 0
39684: PPUSH
39685: PPUSH
39686: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39687: LD_VAR 0 1
39691: NOT
39692: IFTRUE 39720
39694: PUSH
39695: LD_VAR 0 2
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: IN
39718: NOT
39719: OR
39720: IFFALSE 39724
// exit ;
39722: GO 39807
// tmp := [ ] ;
39724: LD_ADDR_VAR 0 5
39728: PUSH
39729: EMPTY
39730: ST_TO_ADDR
// for i in units do
39731: LD_ADDR_VAR 0 4
39735: PUSH
39736: LD_VAR 0 1
39740: PUSH
39741: FOR_IN
39742: IFFALSE 39776
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39744: LD_ADDR_VAR 0 5
39748: PUSH
39749: LD_VAR 0 5
39753: PPUSH
39754: LD_VAR 0 4
39758: PPUSH
39759: LD_VAR 0 2
39763: PPUSH
39764: CALL_OW 259
39768: PPUSH
39769: CALL 41202 0 2
39773: ST_TO_ADDR
39774: GO 39741
39776: POP
39777: POP
// if not tmp then
39778: LD_VAR 0 5
39782: NOT
39783: IFFALSE 39787
// exit ;
39785: GO 39807
// result := SortListByListDesc ( units , tmp ) ;
39787: LD_ADDR_VAR 0 3
39791: PUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: LD_VAR 0 5
39801: PPUSH
39802: CALL_OW 77
39806: ST_TO_ADDR
// end ;
39807: LD_VAR 0 3
39811: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39812: LD_INT 0
39814: PPUSH
39815: PPUSH
39816: PPUSH
// result := false ;
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 0
39824: ST_TO_ADDR
// if not building then
39825: LD_VAR 0 2
39829: NOT
39830: IFFALSE 39834
// exit ;
39832: GO 39978
// x := GetX ( building ) ;
39834: LD_ADDR_VAR 0 4
39838: PUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: CALL_OW 250
39848: ST_TO_ADDR
// y := GetY ( building ) ;
39849: LD_ADDR_VAR 0 5
39853: PUSH
39854: LD_VAR 0 2
39858: PPUSH
39859: CALL_OW 251
39863: ST_TO_ADDR
// if not x or not y then
39864: LD_VAR 0 4
39868: NOT
39869: IFTRUE 39878
39871: PUSH
39872: LD_VAR 0 5
39876: NOT
39877: OR
39878: IFFALSE 39882
// exit ;
39880: GO 39978
// if GetTaskList ( unit ) then
39882: LD_VAR 0 1
39886: PPUSH
39887: CALL_OW 437
39891: IFFALSE 39978
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39893: LD_STRING e
39895: PUSH
39896: LD_VAR 0 1
39900: PPUSH
39901: CALL_OW 437
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: EQUAL
39914: IFFALSE 39941
39916: PUSH
39917: LD_VAR 0 4
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 437
39931: PUSH
39932: LD_INT 1
39934: ARRAY
39935: PUSH
39936: LD_INT 2
39938: ARRAY
39939: EQUAL
39940: AND
39941: IFFALSE 39968
39943: PUSH
39944: LD_VAR 0 5
39948: PUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 437
39958: PUSH
39959: LD_INT 1
39961: ARRAY
39962: PUSH
39963: LD_INT 3
39965: ARRAY
39966: EQUAL
39967: AND
39968: IFFALSE 39978
// result := true end ;
39970: LD_ADDR_VAR 0 3
39974: PUSH
39975: LD_INT 1
39977: ST_TO_ADDR
// end ;
39978: LD_VAR 0 3
39982: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39983: LD_INT 0
39985: PPUSH
// result := false ;
39986: LD_ADDR_VAR 0 4
39990: PUSH
39991: LD_INT 0
39993: ST_TO_ADDR
// if GetTaskList ( unit ) then
39994: LD_VAR 0 1
39998: PPUSH
39999: CALL_OW 437
40003: IFFALSE 40090
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40005: LD_STRING M
40007: PUSH
40008: LD_VAR 0 1
40012: PPUSH
40013: CALL_OW 437
40017: PUSH
40018: LD_INT 1
40020: ARRAY
40021: PUSH
40022: LD_INT 1
40024: ARRAY
40025: EQUAL
40026: IFFALSE 40053
40028: PUSH
40029: LD_VAR 0 2
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 437
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PUSH
40048: LD_INT 2
40050: ARRAY
40051: EQUAL
40052: AND
40053: IFFALSE 40080
40055: PUSH
40056: LD_VAR 0 3
40060: PUSH
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 437
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PUSH
40075: LD_INT 3
40077: ARRAY
40078: EQUAL
40079: AND
40080: IFFALSE 40090
// result := true ;
40082: LD_ADDR_VAR 0 4
40086: PUSH
40087: LD_INT 1
40089: ST_TO_ADDR
// end ; end ;
40090: LD_VAR 0 4
40094: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40095: LD_INT 0
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
// if not unit or not area then
40101: LD_VAR 0 1
40105: NOT
40106: IFTRUE 40115
40108: PUSH
40109: LD_VAR 0 2
40113: NOT
40114: OR
40115: IFFALSE 40119
// exit ;
40117: GO 40295
// tmp := AreaToList ( area , i ) ;
40119: LD_ADDR_VAR 0 6
40123: PUSH
40124: LD_VAR 0 2
40128: PPUSH
40129: LD_VAR 0 5
40133: PPUSH
40134: CALL_OW 517
40138: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40139: LD_ADDR_VAR 0 5
40143: PUSH
40144: DOUBLE
40145: LD_INT 1
40147: DEC
40148: ST_TO_ADDR
40149: LD_VAR 0 6
40153: PUSH
40154: LD_INT 1
40156: ARRAY
40157: PUSH
40158: FOR_TO
40159: IFFALSE 40293
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40161: LD_ADDR_VAR 0 7
40165: PUSH
40166: LD_VAR 0 6
40170: PUSH
40171: LD_INT 1
40173: ARRAY
40174: PUSH
40175: LD_VAR 0 5
40179: ARRAY
40180: PUSH
40181: LD_VAR 0 6
40185: PUSH
40186: LD_INT 2
40188: ARRAY
40189: PUSH
40190: LD_VAR 0 5
40194: ARRAY
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40200: LD_INT 92
40202: PUSH
40203: LD_VAR 0 7
40207: PUSH
40208: LD_INT 1
40210: ARRAY
40211: PUSH
40212: LD_VAR 0 7
40216: PUSH
40217: LD_INT 2
40219: ARRAY
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: PPUSH
40230: CALL_OW 69
40234: PUSH
40235: LD_INT 0
40237: EQUAL
40238: IFFALSE 40291
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40240: LD_VAR 0 1
40244: PPUSH
40245: LD_VAR 0 7
40249: PUSH
40250: LD_INT 1
40252: ARRAY
40253: PPUSH
40254: LD_VAR 0 7
40258: PUSH
40259: LD_INT 2
40261: ARRAY
40262: PPUSH
40263: LD_VAR 0 3
40267: PPUSH
40268: CALL_OW 48
// result := IsPlaced ( unit ) ;
40272: LD_ADDR_VAR 0 4
40276: PUSH
40277: LD_VAR 0 1
40281: PPUSH
40282: CALL_OW 305
40286: ST_TO_ADDR
// exit ;
40287: POP
40288: POP
40289: GO 40295
// end ; end ;
40291: GO 40158
40293: POP
40294: POP
// end ;
40295: LD_VAR 0 4
40299: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40300: LD_INT 0
40302: PPUSH
40303: PPUSH
40304: PPUSH
// if not side or side > 8 then
40305: LD_VAR 0 1
40309: NOT
40310: IFTRUE 40322
40312: PUSH
40313: LD_VAR 0 1
40317: PUSH
40318: LD_INT 8
40320: GREATER
40321: OR
40322: IFFALSE 40326
// exit ;
40324: GO 40513
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40326: LD_ADDR_VAR 0 4
40330: PUSH
40331: LD_INT 22
40333: PUSH
40334: LD_VAR 0 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 21
40345: PUSH
40346: LD_INT 3
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PPUSH
40357: CALL_OW 69
40361: ST_TO_ADDR
// if not tmp then
40362: LD_VAR 0 4
40366: NOT
40367: IFFALSE 40371
// exit ;
40369: GO 40513
// enable_addtolog := true ;
40371: LD_ADDR_OWVAR 81
40375: PUSH
40376: LD_INT 1
40378: ST_TO_ADDR
// AddToLog ( [ ) ;
40379: LD_STRING [
40381: PPUSH
40382: CALL_OW 561
// for i in tmp do
40386: LD_ADDR_VAR 0 3
40390: PUSH
40391: LD_VAR 0 4
40395: PUSH
40396: FOR_IN
40397: IFFALSE 40504
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40399: LD_STRING [
40401: PUSH
40402: LD_VAR 0 3
40406: PPUSH
40407: CALL_OW 266
40411: STR
40412: PUSH
40413: LD_STRING , 
40415: STR
40416: PUSH
40417: LD_VAR 0 3
40421: PPUSH
40422: CALL_OW 250
40426: STR
40427: PUSH
40428: LD_STRING , 
40430: STR
40431: PUSH
40432: LD_VAR 0 3
40436: PPUSH
40437: CALL_OW 251
40441: STR
40442: PUSH
40443: LD_STRING , 
40445: STR
40446: PUSH
40447: LD_VAR 0 3
40451: PPUSH
40452: CALL_OW 254
40456: STR
40457: PUSH
40458: LD_STRING , 
40460: STR
40461: PUSH
40462: LD_VAR 0 3
40466: PPUSH
40467: LD_INT 1
40469: PPUSH
40470: CALL_OW 268
40474: STR
40475: PUSH
40476: LD_STRING , 
40478: STR
40479: PUSH
40480: LD_VAR 0 3
40484: PPUSH
40485: LD_INT 2
40487: PPUSH
40488: CALL_OW 268
40492: STR
40493: PUSH
40494: LD_STRING ],
40496: STR
40497: PPUSH
40498: CALL_OW 561
// end ;
40502: GO 40396
40504: POP
40505: POP
// AddToLog ( ]; ) ;
40506: LD_STRING ];
40508: PPUSH
40509: CALL_OW 561
// end ;
40513: LD_VAR 0 2
40517: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40518: LD_INT 0
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
// if not area or not rate or not max then
40525: LD_VAR 0 1
40529: NOT
40530: IFTRUE 40539
40532: PUSH
40533: LD_VAR 0 2
40537: NOT
40538: OR
40539: IFTRUE 40548
40541: PUSH
40542: LD_VAR 0 4
40546: NOT
40547: OR
40548: IFFALSE 40552
// exit ;
40550: GO 40741
// while 1 do
40552: LD_INT 1
40554: IFFALSE 40741
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40556: LD_ADDR_VAR 0 9
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 287
40573: PUSH
40574: LD_INT 10
40576: MUL
40577: ST_TO_ADDR
// r := rate / 10 ;
40578: LD_ADDR_VAR 0 7
40582: PUSH
40583: LD_VAR 0 2
40587: PUSH
40588: LD_INT 10
40590: DIVREAL
40591: ST_TO_ADDR
// time := 1 1$00 ;
40592: LD_ADDR_VAR 0 8
40596: PUSH
40597: LD_INT 2100
40599: ST_TO_ADDR
// if amount < min then
40600: LD_VAR 0 9
40604: PUSH
40605: LD_VAR 0 3
40609: LESS
40610: IFFALSE 40628
// r := r * 2 else
40612: LD_ADDR_VAR 0 7
40616: PUSH
40617: LD_VAR 0 7
40621: PUSH
40622: LD_INT 2
40624: MUL
40625: ST_TO_ADDR
40626: GO 40654
// if amount > max then
40628: LD_VAR 0 9
40632: PUSH
40633: LD_VAR 0 4
40637: GREATER
40638: IFFALSE 40654
// r := r / 2 ;
40640: LD_ADDR_VAR 0 7
40644: PUSH
40645: LD_VAR 0 7
40649: PUSH
40650: LD_INT 2
40652: DIVREAL
40653: ST_TO_ADDR
// time := time / r ;
40654: LD_ADDR_VAR 0 8
40658: PUSH
40659: LD_VAR 0 8
40663: PUSH
40664: LD_VAR 0 7
40668: DIVREAL
40669: ST_TO_ADDR
// if time < 0 then
40670: LD_VAR 0 8
40674: PUSH
40675: LD_INT 0
40677: LESS
40678: IFFALSE 40695
// time := time * - 1 ;
40680: LD_ADDR_VAR 0 8
40684: PUSH
40685: LD_VAR 0 8
40689: PUSH
40690: LD_INT 1
40692: NEG
40693: MUL
40694: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40695: LD_VAR 0 8
40699: PUSH
40700: LD_INT 35
40702: PPUSH
40703: LD_INT 875
40705: PPUSH
40706: CALL_OW 12
40710: PLUS
40711: PPUSH
40712: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40716: LD_INT 1
40718: PPUSH
40719: LD_INT 5
40721: PPUSH
40722: CALL_OW 12
40726: PPUSH
40727: LD_VAR 0 1
40731: PPUSH
40732: LD_INT 1
40734: PPUSH
40735: CALL_OW 55
// end ;
40739: GO 40552
// end ;
40741: LD_VAR 0 5
40745: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40746: LD_INT 0
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
40753: PPUSH
40754: PPUSH
40755: PPUSH
// if not turrets or not factories then
40756: LD_VAR 0 1
40760: NOT
40761: IFTRUE 40770
40763: PUSH
40764: LD_VAR 0 2
40768: NOT
40769: OR
40770: IFFALSE 40774
// exit ;
40772: GO 41081
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40774: LD_ADDR_VAR 0 10
40778: PUSH
40779: LD_INT 5
40781: PUSH
40782: LD_INT 6
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: LD_INT 4
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 3
40801: PUSH
40802: LD_INT 5
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 24
40816: PUSH
40817: LD_INT 25
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 23
40826: PUSH
40827: LD_INT 27
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 42
40840: PUSH
40841: LD_INT 43
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 44
40850: PUSH
40851: LD_INT 46
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 45
40860: PUSH
40861: LD_INT 47
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
// result := [ ] ;
40878: LD_ADDR_VAR 0 3
40882: PUSH
40883: EMPTY
40884: ST_TO_ADDR
// for i in turrets do
40885: LD_ADDR_VAR 0 4
40889: PUSH
40890: LD_VAR 0 1
40894: PUSH
40895: FOR_IN
40896: IFFALSE 41079
// begin nat := GetNation ( i ) ;
40898: LD_ADDR_VAR 0 7
40902: PUSH
40903: LD_VAR 0 4
40907: PPUSH
40908: CALL_OW 248
40912: ST_TO_ADDR
// weapon := 0 ;
40913: LD_ADDR_VAR 0 8
40917: PUSH
40918: LD_INT 0
40920: ST_TO_ADDR
// if not nat then
40921: LD_VAR 0 7
40925: NOT
40926: IFFALSE 40930
// continue ;
40928: GO 40895
// for j in list [ nat ] do
40930: LD_ADDR_VAR 0 5
40934: PUSH
40935: LD_VAR 0 10
40939: PUSH
40940: LD_VAR 0 7
40944: ARRAY
40945: PUSH
40946: FOR_IN
40947: IFFALSE 40988
// if GetBWeapon ( i ) = j [ 1 ] then
40949: LD_VAR 0 4
40953: PPUSH
40954: CALL_OW 269
40958: PUSH
40959: LD_VAR 0 5
40963: PUSH
40964: LD_INT 1
40966: ARRAY
40967: EQUAL
40968: IFFALSE 40986
// begin weapon := j [ 2 ] ;
40970: LD_ADDR_VAR 0 8
40974: PUSH
40975: LD_VAR 0 5
40979: PUSH
40980: LD_INT 2
40982: ARRAY
40983: ST_TO_ADDR
// break ;
40984: GO 40988
// end ;
40986: GO 40946
40988: POP
40989: POP
// if not weapon then
40990: LD_VAR 0 8
40994: NOT
40995: IFFALSE 40999
// continue ;
40997: GO 40895
// for k in factories do
40999: LD_ADDR_VAR 0 6
41003: PUSH
41004: LD_VAR 0 2
41008: PUSH
41009: FOR_IN
41010: IFFALSE 41075
// begin weapons := AvailableWeaponList ( k ) ;
41012: LD_ADDR_VAR 0 9
41016: PUSH
41017: LD_VAR 0 6
41021: PPUSH
41022: CALL_OW 478
41026: ST_TO_ADDR
// if not weapons then
41027: LD_VAR 0 9
41031: NOT
41032: IFFALSE 41036
// continue ;
41034: GO 41009
// if weapon in weapons then
41036: LD_VAR 0 8
41040: PUSH
41041: LD_VAR 0 9
41045: IN
41046: IFFALSE 41073
// begin result := [ i , weapon ] ;
41048: LD_ADDR_VAR 0 3
41052: PUSH
41053: LD_VAR 0 4
41057: PUSH
41058: LD_VAR 0 8
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: ST_TO_ADDR
// exit ;
41067: POP
41068: POP
41069: POP
41070: POP
41071: GO 41081
// end ; end ;
41073: GO 41009
41075: POP
41076: POP
// end ;
41077: GO 40895
41079: POP
41080: POP
// end ;
41081: LD_VAR 0 3
41085: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41086: LD_INT 0
41088: PPUSH
// if not side or side > 8 then
41089: LD_VAR 0 3
41093: NOT
41094: IFTRUE 41106
41096: PUSH
41097: LD_VAR 0 3
41101: PUSH
41102: LD_INT 8
41104: GREATER
41105: OR
41106: IFFALSE 41110
// exit ;
41108: GO 41169
// if not range then
41110: LD_VAR 0 4
41114: NOT
41115: IFFALSE 41126
// range := - 12 ;
41117: LD_ADDR_VAR 0 4
41121: PUSH
41122: LD_INT 12
41124: NEG
41125: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41126: LD_VAR 0 1
41130: PPUSH
41131: LD_VAR 0 2
41135: PPUSH
41136: LD_VAR 0 3
41140: PPUSH
41141: LD_VAR 0 4
41145: PPUSH
41146: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_VAR 0 2
41159: PPUSH
41160: LD_VAR 0 3
41164: PPUSH
41165: CALL_OW 331
// end ;
41169: LD_VAR 0 5
41173: RET
// export function Video ( mode ) ; begin
41174: LD_INT 0
41176: PPUSH
// ingame_video = mode ;
41177: LD_ADDR_OWVAR 52
41181: PUSH
41182: LD_VAR 0 1
41186: ST_TO_ADDR
// interface_hidden = mode ;
41187: LD_ADDR_OWVAR 54
41191: PUSH
41192: LD_VAR 0 1
41196: ST_TO_ADDR
// end ;
41197: LD_VAR 0 2
41201: RET
// export function Join ( array , element ) ; begin
41202: LD_INT 0
41204: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41205: LD_ADDR_VAR 0 3
41209: PUSH
41210: LD_VAR 0 1
41214: PPUSH
41215: LD_VAR 0 1
41219: PUSH
41220: LD_INT 1
41222: PLUS
41223: PPUSH
41224: LD_VAR 0 2
41228: PPUSH
41229: CALL_OW 1
41233: ST_TO_ADDR
// end ;
41234: LD_VAR 0 3
41238: RET
// export function JoinUnion ( array , element ) ; begin
41239: LD_INT 0
41241: PPUSH
// result := array union element ;
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_VAR 0 1
41251: PUSH
41252: LD_VAR 0 2
41256: UNION
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 3
41262: RET
// export function GetBehemoths ( side ) ; begin
41263: LD_INT 0
41265: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41266: LD_ADDR_VAR 0 2
41270: PUSH
41271: LD_INT 22
41273: PUSH
41274: LD_VAR 0 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 31
41285: PUSH
41286: LD_INT 25
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PPUSH
41297: CALL_OW 69
41301: ST_TO_ADDR
// end ;
41302: LD_VAR 0 2
41306: RET
// export function Shuffle ( array ) ; var i , index ; begin
41307: LD_INT 0
41309: PPUSH
41310: PPUSH
41311: PPUSH
// result := [ ] ;
41312: LD_ADDR_VAR 0 2
41316: PUSH
41317: EMPTY
41318: ST_TO_ADDR
// if not array then
41319: LD_VAR 0 1
41323: NOT
41324: IFFALSE 41328
// exit ;
41326: GO 41427
// Randomize ;
41328: CALL_OW 10
// for i = array downto 1 do
41332: LD_ADDR_VAR 0 3
41336: PUSH
41337: DOUBLE
41338: LD_VAR 0 1
41342: INC
41343: ST_TO_ADDR
41344: LD_INT 1
41346: PUSH
41347: FOR_DOWNTO
41348: IFFALSE 41425
// begin index := rand ( 1 , array ) ;
41350: LD_ADDR_VAR 0 4
41354: PUSH
41355: LD_INT 1
41357: PPUSH
41358: LD_VAR 0 1
41362: PPUSH
41363: CALL_OW 12
41367: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41368: LD_ADDR_VAR 0 2
41372: PUSH
41373: LD_VAR 0 2
41377: PPUSH
41378: LD_VAR 0 2
41382: PUSH
41383: LD_INT 1
41385: PLUS
41386: PPUSH
41387: LD_VAR 0 1
41391: PUSH
41392: LD_VAR 0 4
41396: ARRAY
41397: PPUSH
41398: CALL_OW 2
41402: ST_TO_ADDR
// array := Delete ( array , index ) ;
41403: LD_ADDR_VAR 0 1
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: CALL_OW 3
41422: ST_TO_ADDR
// end ;
41423: GO 41347
41425: POP
41426: POP
// end ;
41427: LD_VAR 0 2
41431: RET
// export function GetBaseMaterials ( base ) ; begin
41432: LD_INT 0
41434: PPUSH
// result := [ 0 , 0 , 0 ] ;
41435: LD_ADDR_VAR 0 2
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// if not base then
41454: LD_VAR 0 1
41458: NOT
41459: IFFALSE 41463
// exit ;
41461: GO 41512
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41463: LD_ADDR_VAR 0 2
41467: PUSH
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_INT 1
41475: PPUSH
41476: CALL_OW 275
41480: PUSH
41481: LD_VAR 0 1
41485: PPUSH
41486: LD_INT 2
41488: PPUSH
41489: CALL_OW 275
41493: PUSH
41494: LD_VAR 0 1
41498: PPUSH
41499: LD_INT 3
41501: PPUSH
41502: CALL_OW 275
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: ST_TO_ADDR
// end ;
41512: LD_VAR 0 2
41516: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41517: LD_INT 0
41519: PPUSH
41520: PPUSH
// result := array ;
41521: LD_ADDR_VAR 0 3
41525: PUSH
41526: LD_VAR 0 1
41530: ST_TO_ADDR
// if size >= result then
41531: LD_VAR 0 2
41535: PUSH
41536: LD_VAR 0 3
41540: GREATEREQUAL
41541: IFFALSE 41545
// exit ;
41543: GO 41595
// if size then
41545: LD_VAR 0 2
41549: IFFALSE 41595
// for i := array downto size do
41551: LD_ADDR_VAR 0 4
41555: PUSH
41556: DOUBLE
41557: LD_VAR 0 1
41561: INC
41562: ST_TO_ADDR
41563: LD_VAR 0 2
41567: PUSH
41568: FOR_DOWNTO
41569: IFFALSE 41593
// result := Delete ( result , result ) ;
41571: LD_ADDR_VAR 0 3
41575: PUSH
41576: LD_VAR 0 3
41580: PPUSH
41581: LD_VAR 0 3
41585: PPUSH
41586: CALL_OW 3
41590: ST_TO_ADDR
41591: GO 41568
41593: POP
41594: POP
// end ;
41595: LD_VAR 0 3
41599: RET
// export function ComExit ( unit ) ; var tmp ; begin
41600: LD_INT 0
41602: PPUSH
41603: PPUSH
// if not IsInUnit ( unit ) then
41604: LD_VAR 0 1
41608: PPUSH
41609: CALL_OW 310
41613: NOT
41614: IFFALSE 41618
// exit ;
41616: GO 41678
// tmp := IsInUnit ( unit ) ;
41618: LD_ADDR_VAR 0 3
41622: PUSH
41623: LD_VAR 0 1
41627: PPUSH
41628: CALL_OW 310
41632: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41633: LD_VAR 0 3
41637: PPUSH
41638: CALL_OW 247
41642: PUSH
41643: LD_INT 2
41645: EQUAL
41646: IFFALSE 41659
// ComExitVehicle ( unit ) else
41648: LD_VAR 0 1
41652: PPUSH
41653: CALL_OW 121
41657: GO 41668
// ComExitBuilding ( unit ) ;
41659: LD_VAR 0 1
41663: PPUSH
41664: CALL_OW 122
// result := tmp ;
41668: LD_ADDR_VAR 0 2
41672: PUSH
41673: LD_VAR 0 3
41677: ST_TO_ADDR
// end ;
41678: LD_VAR 0 2
41682: RET
// export function ComExitAll ( units ) ; var i ; begin
41683: LD_INT 0
41685: PPUSH
41686: PPUSH
// if not units then
41687: LD_VAR 0 1
41691: NOT
41692: IFFALSE 41696
// exit ;
41694: GO 41722
// for i in units do
41696: LD_ADDR_VAR 0 3
41700: PUSH
41701: LD_VAR 0 1
41705: PUSH
41706: FOR_IN
41707: IFFALSE 41720
// ComExit ( i ) ;
41709: LD_VAR 0 3
41713: PPUSH
41714: CALL 41600 0 1
41718: GO 41706
41720: POP
41721: POP
// end ;
41722: LD_VAR 0 2
41726: RET
// export function ResetHc ; begin
41727: LD_INT 0
41729: PPUSH
// InitHc ;
41730: CALL_OW 19
// hc_importance := 0 ;
41734: LD_ADDR_OWVAR 32
41738: PUSH
41739: LD_INT 0
41741: ST_TO_ADDR
// end ;
41742: LD_VAR 0 1
41746: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41747: LD_INT 0
41749: PPUSH
41750: PPUSH
41751: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41752: LD_ADDR_VAR 0 6
41756: PUSH
41757: LD_VAR 0 1
41761: PUSH
41762: LD_VAR 0 3
41766: PLUS
41767: PUSH
41768: LD_INT 2
41770: DIV
41771: ST_TO_ADDR
// if _x < 0 then
41772: LD_VAR 0 6
41776: PUSH
41777: LD_INT 0
41779: LESS
41780: IFFALSE 41797
// _x := _x * - 1 ;
41782: LD_ADDR_VAR 0 6
41786: PUSH
41787: LD_VAR 0 6
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: MUL
41796: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41797: LD_ADDR_VAR 0 7
41801: PUSH
41802: LD_VAR 0 2
41806: PUSH
41807: LD_VAR 0 4
41811: PLUS
41812: PUSH
41813: LD_INT 2
41815: DIV
41816: ST_TO_ADDR
// if _y < 0 then
41817: LD_VAR 0 7
41821: PUSH
41822: LD_INT 0
41824: LESS
41825: IFFALSE 41842
// _y := _y * - 1 ;
41827: LD_ADDR_VAR 0 7
41831: PUSH
41832: LD_VAR 0 7
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: MUL
41841: ST_TO_ADDR
// result := [ _x , _y ] ;
41842: LD_ADDR_VAR 0 5
41846: PUSH
41847: LD_VAR 0 6
41851: PUSH
41852: LD_VAR 0 7
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// end ;
41861: LD_VAR 0 5
41865: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41866: LD_INT 0
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
// task := GetTaskList ( unit ) ;
41872: LD_ADDR_VAR 0 7
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: CALL_OW 437
41886: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41887: LD_VAR 0 7
41891: NOT
41892: IFFALSE 41911
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_VAR 0 2
41904: PPUSH
41905: CALL_OW 308
41909: NOT
41910: AND
41911: IFFALSE 41915
// exit ;
41913: GO 42033
// if IsInArea ( unit , area ) then
41915: LD_VAR 0 1
41919: PPUSH
41920: LD_VAR 0 2
41924: PPUSH
41925: CALL_OW 308
41929: IFFALSE 41947
// begin ComMoveToArea ( unit , goAway ) ;
41931: LD_VAR 0 1
41935: PPUSH
41936: LD_VAR 0 3
41940: PPUSH
41941: CALL_OW 113
// exit ;
41945: GO 42033
// end ; if task [ 1 ] [ 1 ] <> M then
41947: LD_VAR 0 7
41951: PUSH
41952: LD_INT 1
41954: ARRAY
41955: PUSH
41956: LD_INT 1
41958: ARRAY
41959: PUSH
41960: LD_STRING M
41962: NONEQUAL
41963: IFFALSE 41967
// exit ;
41965: GO 42033
// x := task [ 1 ] [ 2 ] ;
41967: LD_ADDR_VAR 0 5
41971: PUSH
41972: LD_VAR 0 7
41976: PUSH
41977: LD_INT 1
41979: ARRAY
41980: PUSH
41981: LD_INT 2
41983: ARRAY
41984: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41985: LD_ADDR_VAR 0 6
41989: PUSH
41990: LD_VAR 0 7
41994: PUSH
41995: LD_INT 1
41997: ARRAY
41998: PUSH
41999: LD_INT 3
42001: ARRAY
42002: ST_TO_ADDR
// if InArea ( x , y , area ) then
42003: LD_VAR 0 5
42007: PPUSH
42008: LD_VAR 0 6
42012: PPUSH
42013: LD_VAR 0 2
42017: PPUSH
42018: CALL_OW 309
42022: IFFALSE 42033
// ComStop ( unit ) ;
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 141
// end ;
42033: LD_VAR 0 4
42037: RET
// export function Abs ( value ) ; begin
42038: LD_INT 0
42040: PPUSH
// result := value ;
42041: LD_ADDR_VAR 0 2
42045: PUSH
42046: LD_VAR 0 1
42050: ST_TO_ADDR
// if value < 0 then
42051: LD_VAR 0 1
42055: PUSH
42056: LD_INT 0
42058: LESS
42059: IFFALSE 42076
// result := value * - 1 ;
42061: LD_ADDR_VAR 0 2
42065: PUSH
42066: LD_VAR 0 1
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: MUL
42075: ST_TO_ADDR
// end ;
42076: LD_VAR 0 2
42080: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42081: LD_INT 0
42083: PPUSH
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
// if not unit or not building then
42091: LD_VAR 0 1
42095: NOT
42096: IFTRUE 42105
42098: PUSH
42099: LD_VAR 0 2
42103: NOT
42104: OR
42105: IFFALSE 42109
// exit ;
42107: GO 42337
// x := GetX ( building ) ;
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: LD_VAR 0 2
42118: PPUSH
42119: CALL_OW 250
42123: ST_TO_ADDR
// y := GetY ( building ) ;
42124: LD_ADDR_VAR 0 6
42128: PUSH
42129: LD_VAR 0 2
42133: PPUSH
42134: CALL_OW 251
42138: ST_TO_ADDR
// d := GetDir ( building ) ;
42139: LD_ADDR_VAR 0 8
42143: PUSH
42144: LD_VAR 0 2
42148: PPUSH
42149: CALL_OW 254
42153: ST_TO_ADDR
// r := 4 ;
42154: LD_ADDR_VAR 0 9
42158: PUSH
42159: LD_INT 4
42161: ST_TO_ADDR
// for i := 1 to 5 do
42162: LD_ADDR_VAR 0 10
42166: PUSH
42167: DOUBLE
42168: LD_INT 1
42170: DEC
42171: ST_TO_ADDR
42172: LD_INT 5
42174: PUSH
42175: FOR_TO
42176: IFFALSE 42335
// begin _x := ShiftX ( x , d , r + i ) ;
42178: LD_ADDR_VAR 0 5
42182: PUSH
42183: LD_VAR 0 4
42187: PPUSH
42188: LD_VAR 0 8
42192: PPUSH
42193: LD_VAR 0 9
42197: PUSH
42198: LD_VAR 0 10
42202: PLUS
42203: PPUSH
42204: CALL_OW 272
42208: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42209: LD_ADDR_VAR 0 7
42213: PUSH
42214: LD_VAR 0 6
42218: PPUSH
42219: LD_VAR 0 8
42223: PPUSH
42224: LD_VAR 0 9
42228: PUSH
42229: LD_VAR 0 10
42233: PLUS
42234: PPUSH
42235: CALL_OW 273
42239: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42240: LD_VAR 0 5
42244: PPUSH
42245: LD_VAR 0 7
42249: PPUSH
42250: CALL_OW 488
42254: IFFALSE 42289
42256: PUSH
42257: LD_VAR 0 5
42261: PPUSH
42262: LD_VAR 0 7
42266: PPUSH
42267: CALL_OW 428
42271: PPUSH
42272: CALL_OW 247
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: IN
42287: NOT
42288: AND
42289: IFFALSE 42333
// begin ComMoveXY ( unit , _x , _y ) ;
42291: LD_VAR 0 1
42295: PPUSH
42296: LD_VAR 0 5
42300: PPUSH
42301: LD_VAR 0 7
42305: PPUSH
42306: CALL_OW 111
// result := [ _x , _y ] ;
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_VAR 0 5
42319: PUSH
42320: LD_VAR 0 7
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: ST_TO_ADDR
// exit ;
42329: POP
42330: POP
42331: GO 42337
// end ; end ;
42333: GO 42175
42335: POP
42336: POP
// end ;
42337: LD_VAR 0 3
42341: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
42346: PPUSH
// result := 0 ;
42347: LD_ADDR_VAR 0 3
42351: PUSH
42352: LD_INT 0
42354: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 0
42362: LESS
42363: IFTRUE 42375
42365: PUSH
42366: LD_VAR 0 1
42370: PUSH
42371: LD_INT 8
42373: GREATER
42374: OR
42375: IFTRUE 42387
42377: PUSH
42378: LD_VAR 0 2
42382: PUSH
42383: LD_INT 0
42385: LESS
42386: OR
42387: IFTRUE 42399
42389: PUSH
42390: LD_VAR 0 2
42394: PUSH
42395: LD_INT 8
42397: GREATER
42398: OR
42399: IFFALSE 42403
// exit ;
42401: GO 42478
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42403: LD_ADDR_VAR 0 4
42407: PUSH
42408: LD_INT 22
42410: PUSH
42411: LD_VAR 0 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PPUSH
42420: CALL_OW 69
42424: PUSH
42425: FOR_IN
42426: IFFALSE 42476
// begin un := UnitShoot ( i ) ;
42428: LD_ADDR_VAR 0 5
42432: PUSH
42433: LD_VAR 0 4
42437: PPUSH
42438: CALL_OW 504
42442: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42443: LD_VAR 0 5
42447: PPUSH
42448: CALL_OW 255
42452: PUSH
42453: LD_VAR 0 1
42457: EQUAL
42458: IFFALSE 42474
// begin result := un ;
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_VAR 0 5
42469: ST_TO_ADDR
// exit ;
42470: POP
42471: POP
42472: GO 42478
// end ; end ;
42474: GO 42425
42476: POP
42477: POP
// end ;
42478: LD_VAR 0 3
42482: RET
// export function GetCargoBay ( units ) ; begin
42483: LD_INT 0
42485: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42486: LD_ADDR_VAR 0 2
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 34
42501: PUSH
42502: LD_INT 12
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 34
42511: PUSH
42512: LD_INT 51
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 34
42521: PUSH
42522: LD_INT 32
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 34
42531: PUSH
42532: LD_INT 89
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: PPUSH
42546: CALL_OW 72
42550: ST_TO_ADDR
// end ;
42551: LD_VAR 0 2
42555: RET
// export function Negate ( value ) ; begin
42556: LD_INT 0
42558: PPUSH
// result := not value ;
42559: LD_ADDR_VAR 0 2
42563: PUSH
42564: LD_VAR 0 1
42568: NOT
42569: ST_TO_ADDR
// end ;
42570: LD_VAR 0 2
42574: RET
// export function Inc ( value ) ; begin
42575: LD_INT 0
42577: PPUSH
// result := value + 1 ;
42578: LD_ADDR_VAR 0 2
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 1
42590: PLUS
42591: ST_TO_ADDR
// end ;
42592: LD_VAR 0 2
42596: RET
// export function Dec ( value ) ; begin
42597: LD_INT 0
42599: PPUSH
// result := value - 1 ;
42600: LD_ADDR_VAR 0 2
42604: PUSH
42605: LD_VAR 0 1
42609: PUSH
42610: LD_INT 1
42612: MINUS
42613: ST_TO_ADDR
// end ;
42614: LD_VAR 0 2
42618: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42619: LD_INT 0
42621: PPUSH
42622: PPUSH
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42629: LD_VAR 0 1
42633: PPUSH
42634: LD_VAR 0 2
42638: PPUSH
42639: CALL_OW 488
42643: NOT
42644: IFTRUE 42663
42646: PUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: CALL_OW 488
42661: NOT
42662: OR
42663: IFFALSE 42676
// begin result := - 1 ;
42665: LD_ADDR_VAR 0 5
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: ST_TO_ADDR
// exit ;
42674: GO 42911
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42676: LD_ADDR_VAR 0 12
42680: PUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: LD_VAR 0 2
42690: PPUSH
42691: LD_VAR 0 3
42695: PPUSH
42696: LD_VAR 0 4
42700: PPUSH
42701: CALL 41747 0 4
42705: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42706: LD_ADDR_VAR 0 11
42710: PUSH
42711: LD_VAR 0 1
42715: PPUSH
42716: LD_VAR 0 2
42720: PPUSH
42721: LD_VAR 0 12
42725: PUSH
42726: LD_INT 1
42728: ARRAY
42729: PPUSH
42730: LD_VAR 0 12
42734: PUSH
42735: LD_INT 2
42737: ARRAY
42738: PPUSH
42739: CALL_OW 298
42743: ST_TO_ADDR
// distance := 9999 ;
42744: LD_ADDR_VAR 0 10
42748: PUSH
42749: LD_INT 9999
42751: ST_TO_ADDR
// for i := 0 to 5 do
42752: LD_ADDR_VAR 0 6
42756: PUSH
42757: DOUBLE
42758: LD_INT 0
42760: DEC
42761: ST_TO_ADDR
42762: LD_INT 5
42764: PUSH
42765: FOR_TO
42766: IFFALSE 42909
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42768: LD_ADDR_VAR 0 7
42772: PUSH
42773: LD_VAR 0 1
42777: PPUSH
42778: LD_VAR 0 6
42782: PPUSH
42783: LD_VAR 0 11
42787: PPUSH
42788: CALL_OW 272
42792: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42793: LD_ADDR_VAR 0 8
42797: PUSH
42798: LD_VAR 0 2
42802: PPUSH
42803: LD_VAR 0 6
42807: PPUSH
42808: LD_VAR 0 11
42812: PPUSH
42813: CALL_OW 273
42817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42818: LD_VAR 0 7
42822: PPUSH
42823: LD_VAR 0 8
42827: PPUSH
42828: CALL_OW 488
42832: NOT
42833: IFFALSE 42837
// continue ;
42835: GO 42765
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42837: LD_ADDR_VAR 0 9
42841: PUSH
42842: LD_VAR 0 12
42846: PUSH
42847: LD_INT 1
42849: ARRAY
42850: PPUSH
42851: LD_VAR 0 12
42855: PUSH
42856: LD_INT 2
42858: ARRAY
42859: PPUSH
42860: LD_VAR 0 7
42864: PPUSH
42865: LD_VAR 0 8
42869: PPUSH
42870: CALL_OW 298
42874: ST_TO_ADDR
// if tmp < distance then
42875: LD_VAR 0 9
42879: PUSH
42880: LD_VAR 0 10
42884: LESS
42885: IFFALSE 42907
// begin result := i ;
42887: LD_ADDR_VAR 0 5
42891: PUSH
42892: LD_VAR 0 6
42896: ST_TO_ADDR
// distance := tmp ;
42897: LD_ADDR_VAR 0 10
42901: PUSH
42902: LD_VAR 0 9
42906: ST_TO_ADDR
// end ; end ;
42907: GO 42765
42909: POP
42910: POP
// end ;
42911: LD_VAR 0 5
42915: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42916: LD_INT 0
42918: PPUSH
42919: PPUSH
// if not driver or not IsInUnit ( driver ) then
42920: LD_VAR 0 1
42924: NOT
42925: IFTRUE 42939
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 310
42937: NOT
42938: OR
42939: IFFALSE 42943
// exit ;
42941: GO 43033
// vehicle := IsInUnit ( driver ) ;
42943: LD_ADDR_VAR 0 3
42947: PUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 310
42957: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42958: LD_VAR 0 1
42962: PPUSH
42963: LD_STRING \
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: PUSH
42993: LD_STRING E
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_VAR 0 3
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PPUSH
43029: CALL_OW 446
// end ;
43033: LD_VAR 0 2
43037: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43038: LD_INT 0
43040: PPUSH
43041: PPUSH
// if not driver or not IsInUnit ( driver ) then
43042: LD_VAR 0 1
43046: NOT
43047: IFTRUE 43061
43049: PUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: CALL_OW 310
43059: NOT
43060: OR
43061: IFFALSE 43065
// exit ;
43063: GO 43155
// vehicle := IsInUnit ( driver ) ;
43065: LD_ADDR_VAR 0 3
43069: PUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 310
43079: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_STRING \
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 0
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: LD_STRING E
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: LD_VAR 0 3
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PPUSH
43151: CALL_OW 447
// end ;
43155: LD_VAR 0 2
43159: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43160: LD_INT 0
43162: PPUSH
43163: PPUSH
43164: PPUSH
// tmp := [ ] ;
43165: LD_ADDR_VAR 0 5
43169: PUSH
43170: EMPTY
43171: ST_TO_ADDR
// for i in units do
43172: LD_ADDR_VAR 0 4
43176: PUSH
43177: LD_VAR 0 1
43181: PUSH
43182: FOR_IN
43183: IFFALSE 43221
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43185: LD_ADDR_VAR 0 5
43189: PUSH
43190: LD_VAR 0 5
43194: PPUSH
43195: LD_VAR 0 5
43199: PUSH
43200: LD_INT 1
43202: PLUS
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: CALL_OW 256
43213: PPUSH
43214: CALL_OW 2
43218: ST_TO_ADDR
43219: GO 43182
43221: POP
43222: POP
// if not tmp then
43223: LD_VAR 0 5
43227: NOT
43228: IFFALSE 43232
// exit ;
43230: GO 43280
// if asc then
43232: LD_VAR 0 2
43236: IFFALSE 43260
// result := SortListByListAsc ( units , tmp ) else
43238: LD_ADDR_VAR 0 3
43242: PUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: LD_VAR 0 5
43252: PPUSH
43253: CALL_OW 76
43257: ST_TO_ADDR
43258: GO 43280
// result := SortListByListDesc ( units , tmp ) ;
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: LD_VAR 0 5
43274: PPUSH
43275: CALL_OW 77
43279: ST_TO_ADDR
// end ;
43280: LD_VAR 0 3
43284: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43285: LD_INT 0
43287: PPUSH
43288: PPUSH
// task := GetTaskList ( mech ) ;
43289: LD_ADDR_VAR 0 4
43293: PUSH
43294: LD_VAR 0 1
43298: PPUSH
43299: CALL_OW 437
43303: ST_TO_ADDR
// if not task then
43304: LD_VAR 0 4
43308: NOT
43309: IFFALSE 43313
// exit ;
43311: GO 43357
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_VAR 0 4
43322: PUSH
43323: LD_INT 1
43325: ARRAY
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PUSH
43331: LD_STRING r
43333: EQUAL
43334: IFFALSE 43356
43336: PUSH
43337: LD_VAR 0 4
43341: PUSH
43342: LD_INT 1
43344: ARRAY
43345: PUSH
43346: LD_INT 4
43348: ARRAY
43349: PUSH
43350: LD_VAR 0 2
43354: EQUAL
43355: AND
43356: ST_TO_ADDR
// end ;
43357: LD_VAR 0 3
43361: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43362: LD_INT 0
43364: PPUSH
// SetDir ( unit , d ) ;
43365: LD_VAR 0 1
43369: PPUSH
43370: LD_VAR 0 4
43374: PPUSH
43375: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 1
43388: PPUSH
43389: LD_VAR 0 2
43393: PPUSH
43394: LD_VAR 0 3
43398: PPUSH
43399: LD_VAR 0 5
43403: PPUSH
43404: CALL_OW 48
43408: ST_TO_ADDR
// end ;
43409: LD_VAR 0 6
43413: RET
// export function ToNaturalNumber ( number ) ; begin
43414: LD_INT 0
43416: PPUSH
// result := number div 1 ;
43417: LD_ADDR_VAR 0 2
43421: PUSH
43422: LD_VAR 0 1
43426: PUSH
43427: LD_INT 1
43429: DIV
43430: ST_TO_ADDR
// if number < 0 then
43431: LD_VAR 0 1
43435: PUSH
43436: LD_INT 0
43438: LESS
43439: IFFALSE 43449
// result := 0 ;
43441: LD_ADDR_VAR 0 2
43445: PUSH
43446: LD_INT 0
43448: ST_TO_ADDR
// end ;
43449: LD_VAR 0 2
43453: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
43458: PPUSH
// if not buildings then
43459: LD_VAR 0 1
43463: NOT
43464: IFFALSE 43468
// exit ;
43466: GO 43583
// tmp := [ ] ;
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: EMPTY
43474: ST_TO_ADDR
// for b in buildings do
43475: LD_ADDR_VAR 0 4
43479: PUSH
43480: LD_VAR 0 1
43484: PUSH
43485: FOR_IN
43486: IFFALSE 43524
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43488: LD_ADDR_VAR 0 5
43492: PUSH
43493: LD_VAR 0 5
43497: PPUSH
43498: LD_VAR 0 5
43502: PUSH
43503: LD_INT 1
43505: PLUS
43506: PPUSH
43507: LD_VAR 0 4
43511: PPUSH
43512: CALL_OW 266
43516: PPUSH
43517: CALL_OW 1
43521: ST_TO_ADDR
43522: GO 43485
43524: POP
43525: POP
// if not tmp then
43526: LD_VAR 0 5
43530: NOT
43531: IFFALSE 43535
// exit ;
43533: GO 43583
// if asc then
43535: LD_VAR 0 2
43539: IFFALSE 43563
// result := SortListByListAsc ( buildings , tmp ) else
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: LD_VAR 0 5
43555: PPUSH
43556: CALL_OW 76
43560: ST_TO_ADDR
43561: GO 43583
// result := SortListByListDesc ( buildings , tmp ) ;
43563: LD_ADDR_VAR 0 3
43567: PUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: LD_VAR 0 5
43577: PPUSH
43578: CALL_OW 77
43582: ST_TO_ADDR
// end ;
43583: LD_VAR 0 3
43587: RET
// export function SortByClass ( units , class ) ; var un ; begin
43588: LD_INT 0
43590: PPUSH
43591: PPUSH
// if not units or not class then
43592: LD_VAR 0 1
43596: NOT
43597: IFTRUE 43606
43599: PUSH
43600: LD_VAR 0 2
43604: NOT
43605: OR
43606: IFFALSE 43610
// exit ;
43608: GO 43705
// result := [ ] ;
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: EMPTY
43616: ST_TO_ADDR
// for un in units do
43617: LD_ADDR_VAR 0 4
43621: PUSH
43622: LD_VAR 0 1
43626: PUSH
43627: FOR_IN
43628: IFFALSE 43703
// if GetClass ( un ) = class then
43630: LD_VAR 0 4
43634: PPUSH
43635: CALL_OW 257
43639: PUSH
43640: LD_VAR 0 2
43644: EQUAL
43645: IFFALSE 43672
// result := Insert ( result , 1 , un ) else
43647: LD_ADDR_VAR 0 3
43651: PUSH
43652: LD_VAR 0 3
43656: PPUSH
43657: LD_INT 1
43659: PPUSH
43660: LD_VAR 0 4
43664: PPUSH
43665: CALL_OW 2
43669: ST_TO_ADDR
43670: GO 43701
// result := Replace ( result , result + 1 , un ) ;
43672: LD_ADDR_VAR 0 3
43676: PUSH
43677: LD_VAR 0 3
43681: PPUSH
43682: LD_VAR 0 3
43686: PUSH
43687: LD_INT 1
43689: PLUS
43690: PPUSH
43691: LD_VAR 0 4
43695: PPUSH
43696: CALL_OW 1
43700: ST_TO_ADDR
43701: GO 43627
43703: POP
43704: POP
// end ;
43705: LD_VAR 0 3
43709: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43710: LD_INT 0
43712: PPUSH
43713: PPUSH
43714: PPUSH
43715: PPUSH
43716: PPUSH
43717: PPUSH
43718: PPUSH
// result := [ ] ;
43719: LD_ADDR_VAR 0 4
43723: PUSH
43724: EMPTY
43725: ST_TO_ADDR
// if x - r < 0 then
43726: LD_VAR 0 1
43730: PUSH
43731: LD_VAR 0 3
43735: MINUS
43736: PUSH
43737: LD_INT 0
43739: LESS
43740: IFFALSE 43752
// min_x := 0 else
43742: LD_ADDR_VAR 0 8
43746: PUSH
43747: LD_INT 0
43749: ST_TO_ADDR
43750: GO 43768
// min_x := x - r ;
43752: LD_ADDR_VAR 0 8
43756: PUSH
43757: LD_VAR 0 1
43761: PUSH
43762: LD_VAR 0 3
43766: MINUS
43767: ST_TO_ADDR
// if y - r < 0 then
43768: LD_VAR 0 2
43772: PUSH
43773: LD_VAR 0 3
43777: MINUS
43778: PUSH
43779: LD_INT 0
43781: LESS
43782: IFFALSE 43794
// min_y := 0 else
43784: LD_ADDR_VAR 0 7
43788: PUSH
43789: LD_INT 0
43791: ST_TO_ADDR
43792: GO 43810
// min_y := y - r ;
43794: LD_ADDR_VAR 0 7
43798: PUSH
43799: LD_VAR 0 2
43803: PUSH
43804: LD_VAR 0 3
43808: MINUS
43809: ST_TO_ADDR
// max_x := x + r ;
43810: LD_ADDR_VAR 0 9
43814: PUSH
43815: LD_VAR 0 1
43819: PUSH
43820: LD_VAR 0 3
43824: PLUS
43825: ST_TO_ADDR
// max_y := y + r ;
43826: LD_ADDR_VAR 0 10
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 3
43840: PLUS
43841: ST_TO_ADDR
// for _x = min_x to max_x do
43842: LD_ADDR_VAR 0 5
43846: PUSH
43847: DOUBLE
43848: LD_VAR 0 8
43852: DEC
43853: ST_TO_ADDR
43854: LD_VAR 0 9
43858: PUSH
43859: FOR_TO
43860: IFFALSE 43961
// for _y = min_y to max_y do
43862: LD_ADDR_VAR 0 6
43866: PUSH
43867: DOUBLE
43868: LD_VAR 0 7
43872: DEC
43873: ST_TO_ADDR
43874: LD_VAR 0 10
43878: PUSH
43879: FOR_TO
43880: IFFALSE 43957
// begin if not ValidHex ( _x , _y ) then
43882: LD_VAR 0 5
43886: PPUSH
43887: LD_VAR 0 6
43891: PPUSH
43892: CALL_OW 488
43896: NOT
43897: IFFALSE 43901
// continue ;
43899: GO 43879
// if GetResourceTypeXY ( _x , _y ) then
43901: LD_VAR 0 5
43905: PPUSH
43906: LD_VAR 0 6
43910: PPUSH
43911: CALL_OW 283
43915: IFFALSE 43955
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43917: LD_ADDR_VAR 0 4
43921: PUSH
43922: LD_VAR 0 4
43926: PPUSH
43927: LD_VAR 0 4
43931: PUSH
43932: LD_INT 1
43934: PLUS
43935: PPUSH
43936: LD_VAR 0 5
43940: PUSH
43941: LD_VAR 0 6
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PPUSH
43950: CALL_OW 1
43954: ST_TO_ADDR
// end ;
43955: GO 43879
43957: POP
43958: POP
43959: GO 43859
43961: POP
43962: POP
// end ;
43963: LD_VAR 0 4
43967: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43968: LD_INT 0
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
// if not units then
43978: LD_VAR 0 1
43982: NOT
43983: IFFALSE 43987
// exit ;
43985: GO 44519
// result := UnitFilter ( units , [ f_ok ] ) ;
43987: LD_ADDR_VAR 0 3
43991: PUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: LD_INT 50
43999: PUSH
44000: EMPTY
44001: LIST
44002: PPUSH
44003: CALL_OW 72
44007: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44008: LD_ADDR_VAR 0 8
44012: PUSH
44013: LD_VAR 0 1
44017: PUSH
44018: LD_INT 1
44020: ARRAY
44021: PPUSH
44022: CALL_OW 255
44026: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44027: LD_ADDR_VAR 0 10
44031: PUSH
44032: LD_INT 29
44034: PUSH
44035: LD_INT 91
44037: PUSH
44038: LD_INT 49
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// if not result then
44046: LD_VAR 0 3
44050: NOT
44051: IFFALSE 44055
// exit ;
44053: GO 44519
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44055: LD_ADDR_VAR 0 5
44059: PUSH
44060: LD_INT 81
44062: PUSH
44063: LD_VAR 0 8
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PPUSH
44072: CALL_OW 69
44076: ST_TO_ADDR
// for i in result do
44077: LD_ADDR_VAR 0 4
44081: PUSH
44082: LD_VAR 0 3
44086: PUSH
44087: FOR_IN
44088: IFFALSE 44517
// begin tag := GetTag ( i ) + 1 ;
44090: LD_ADDR_VAR 0 9
44094: PUSH
44095: LD_VAR 0 4
44099: PPUSH
44100: CALL_OW 110
44104: PUSH
44105: LD_INT 1
44107: PLUS
44108: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44109: LD_ADDR_VAR 0 7
44113: PUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: CALL_OW 250
44123: PPUSH
44124: LD_VAR 0 4
44128: PPUSH
44129: CALL_OW 251
44133: PPUSH
44134: LD_INT 4
44136: PPUSH
44137: CALL 43710 0 3
44141: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44142: LD_VAR 0 4
44146: PPUSH
44147: CALL_OW 247
44151: PUSH
44152: LD_INT 2
44154: EQUAL
44155: IFFALSE 44167
44157: PUSH
44158: LD_VAR 0 7
44162: PUSH
44163: LD_INT 2
44165: GREATER
44166: AND
44167: IFFALSE 44187
44169: PUSH
44170: LD_VAR 0 4
44174: PPUSH
44175: CALL_OW 264
44179: PUSH
44180: LD_VAR 0 10
44184: IN
44185: NOT
44186: AND
44187: IFFALSE 44226
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44189: LD_VAR 0 4
44193: PPUSH
44194: LD_VAR 0 7
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PUSH
44203: LD_INT 1
44205: ARRAY
44206: PPUSH
44207: LD_VAR 0 7
44211: PUSH
44212: LD_INT 1
44214: ARRAY
44215: PUSH
44216: LD_INT 2
44218: ARRAY
44219: PPUSH
44220: CALL_OW 116
44224: GO 44515
// if path > tag then
44226: LD_VAR 0 2
44230: PUSH
44231: LD_VAR 0 9
44235: GREATER
44236: IFFALSE 44444
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44238: LD_ADDR_VAR 0 6
44242: PUSH
44243: LD_VAR 0 5
44247: PPUSH
44248: LD_INT 91
44250: PUSH
44251: LD_VAR 0 4
44255: PUSH
44256: LD_INT 8
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: PPUSH
44264: CALL_OW 72
44268: ST_TO_ADDR
// if nearEnemy then
44269: LD_VAR 0 6
44273: IFFALSE 44342
// begin if GetWeapon ( i ) = ru_time_lapser then
44275: LD_VAR 0 4
44279: PPUSH
44280: CALL_OW 264
44284: PUSH
44285: LD_INT 49
44287: EQUAL
44288: IFFALSE 44316
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44290: LD_VAR 0 4
44294: PPUSH
44295: LD_VAR 0 6
44299: PPUSH
44300: LD_VAR 0 4
44304: PPUSH
44305: CALL_OW 74
44309: PPUSH
44310: CALL_OW 112
44314: GO 44340
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44316: LD_VAR 0 4
44320: PPUSH
44321: LD_VAR 0 6
44325: PPUSH
44326: LD_VAR 0 4
44330: PPUSH
44331: CALL_OW 74
44335: PPUSH
44336: CALL 45600 0 2
// end else
44340: GO 44442
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44342: LD_VAR 0 4
44346: PPUSH
44347: LD_VAR 0 2
44351: PUSH
44352: LD_VAR 0 9
44356: ARRAY
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PPUSH
44362: LD_VAR 0 2
44366: PUSH
44367: LD_VAR 0 9
44371: ARRAY
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PPUSH
44377: CALL_OW 297
44381: PUSH
44382: LD_INT 6
44384: GREATER
44385: IFFALSE 44428
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44387: LD_VAR 0 4
44391: PPUSH
44392: LD_VAR 0 2
44396: PUSH
44397: LD_VAR 0 9
44401: ARRAY
44402: PUSH
44403: LD_INT 1
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_VAR 0 9
44416: ARRAY
44417: PUSH
44418: LD_INT 2
44420: ARRAY
44421: PPUSH
44422: CALL_OW 114
44426: GO 44442
// SetTag ( i , tag ) ;
44428: LD_VAR 0 4
44432: PPUSH
44433: LD_VAR 0 9
44437: PPUSH
44438: CALL_OW 109
// end else
44442: GO 44515
// if enemy then
44444: LD_VAR 0 5
44448: IFFALSE 44515
// begin if GetWeapon ( i ) = ru_time_lapser then
44450: LD_VAR 0 4
44454: PPUSH
44455: CALL_OW 264
44459: PUSH
44460: LD_INT 49
44462: EQUAL
44463: IFFALSE 44491
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44465: LD_VAR 0 4
44469: PPUSH
44470: LD_VAR 0 5
44474: PPUSH
44475: LD_VAR 0 4
44479: PPUSH
44480: CALL_OW 74
44484: PPUSH
44485: CALL_OW 112
44489: GO 44515
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44491: LD_VAR 0 4
44495: PPUSH
44496: LD_VAR 0 5
44500: PPUSH
44501: LD_VAR 0 4
44505: PPUSH
44506: CALL_OW 74
44510: PPUSH
44511: CALL 45600 0 2
// end ; end ;
44515: GO 44087
44517: POP
44518: POP
// end ;
44519: LD_VAR 0 3
44523: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44524: LD_INT 0
44526: PPUSH
44527: PPUSH
44528: PPUSH
// if not unit or IsInUnit ( unit ) then
44529: LD_VAR 0 1
44533: NOT
44534: IFTRUE 44547
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 310
44546: OR
44547: IFFALSE 44551
// exit ;
44549: GO 44642
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: LD_VAR 0 1
44560: PPUSH
44561: CALL_OW 250
44565: PPUSH
44566: LD_VAR 0 2
44570: PPUSH
44571: LD_INT 1
44573: PPUSH
44574: CALL_OW 272
44578: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44579: LD_ADDR_VAR 0 5
44583: PUSH
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 251
44593: PPUSH
44594: LD_VAR 0 2
44598: PPUSH
44599: LD_INT 1
44601: PPUSH
44602: CALL_OW 273
44606: ST_TO_ADDR
// if ValidHex ( x , y ) then
44607: LD_VAR 0 4
44611: PPUSH
44612: LD_VAR 0 5
44616: PPUSH
44617: CALL_OW 488
44621: IFFALSE 44642
// ComTurnXY ( unit , x , y ) ;
44623: LD_VAR 0 1
44627: PPUSH
44628: LD_VAR 0 4
44632: PPUSH
44633: LD_VAR 0 5
44637: PPUSH
44638: CALL_OW 118
// end ;
44642: LD_VAR 0 3
44646: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44647: LD_INT 0
44649: PPUSH
44650: PPUSH
// result := false ;
44651: LD_ADDR_VAR 0 3
44655: PUSH
44656: LD_INT 0
44658: ST_TO_ADDR
// if not units then
44659: LD_VAR 0 2
44663: NOT
44664: IFFALSE 44668
// exit ;
44666: GO 44713
// for i in units do
44668: LD_ADDR_VAR 0 4
44672: PUSH
44673: LD_VAR 0 2
44677: PUSH
44678: FOR_IN
44679: IFFALSE 44711
// if See ( side , i ) then
44681: LD_VAR 0 1
44685: PPUSH
44686: LD_VAR 0 4
44690: PPUSH
44691: CALL_OW 292
44695: IFFALSE 44709
// begin result := true ;
44697: LD_ADDR_VAR 0 3
44701: PUSH
44702: LD_INT 1
44704: ST_TO_ADDR
// exit ;
44705: POP
44706: POP
44707: GO 44713
// end ;
44709: GO 44678
44711: POP
44712: POP
// end ;
44713: LD_VAR 0 3
44717: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44718: LD_INT 0
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
// if not unit or not points then
44724: LD_VAR 0 1
44728: NOT
44729: IFTRUE 44738
44731: PUSH
44732: LD_VAR 0 2
44736: NOT
44737: OR
44738: IFFALSE 44742
// exit ;
44740: GO 44832
// dist := 99999 ;
44742: LD_ADDR_VAR 0 5
44746: PUSH
44747: LD_INT 99999
44749: ST_TO_ADDR
// for i in points do
44750: LD_ADDR_VAR 0 4
44754: PUSH
44755: LD_VAR 0 2
44759: PUSH
44760: FOR_IN
44761: IFFALSE 44830
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44763: LD_ADDR_VAR 0 6
44767: PUSH
44768: LD_VAR 0 1
44772: PPUSH
44773: LD_VAR 0 4
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: PPUSH
44782: LD_VAR 0 4
44786: PUSH
44787: LD_INT 2
44789: ARRAY
44790: PPUSH
44791: CALL_OW 297
44795: ST_TO_ADDR
// if tmpDist < dist then
44796: LD_VAR 0 6
44800: PUSH
44801: LD_VAR 0 5
44805: LESS
44806: IFFALSE 44828
// begin result := i ;
44808: LD_ADDR_VAR 0 3
44812: PUSH
44813: LD_VAR 0 4
44817: ST_TO_ADDR
// dist := tmpDist ;
44818: LD_ADDR_VAR 0 5
44822: PUSH
44823: LD_VAR 0 6
44827: ST_TO_ADDR
// end ; end ;
44828: GO 44760
44830: POP
44831: POP
// end ;
44832: LD_VAR 0 3
44836: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44837: LD_INT 0
44839: PPUSH
// uc_side := side ;
44840: LD_ADDR_OWVAR 20
44844: PUSH
44845: LD_VAR 0 1
44849: ST_TO_ADDR
// uc_nation := 3 ;
44850: LD_ADDR_OWVAR 21
44854: PUSH
44855: LD_INT 3
44857: ST_TO_ADDR
// vc_chassis := 25 ;
44858: LD_ADDR_OWVAR 37
44862: PUSH
44863: LD_INT 25
44865: ST_TO_ADDR
// vc_engine := engine_siberite ;
44866: LD_ADDR_OWVAR 39
44870: PUSH
44871: LD_INT 3
44873: ST_TO_ADDR
// vc_control := control_computer ;
44874: LD_ADDR_OWVAR 38
44878: PUSH
44879: LD_INT 3
44881: ST_TO_ADDR
// vc_weapon := 59 ;
44882: LD_ADDR_OWVAR 40
44886: PUSH
44887: LD_INT 59
44889: ST_TO_ADDR
// result := CreateVehicle ;
44890: LD_ADDR_VAR 0 5
44894: PUSH
44895: CALL_OW 45
44899: ST_TO_ADDR
// SetDir ( result , d ) ;
44900: LD_VAR 0 5
44904: PPUSH
44905: LD_VAR 0 4
44909: PPUSH
44910: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44914: LD_VAR 0 5
44918: PPUSH
44919: LD_VAR 0 2
44923: PPUSH
44924: LD_VAR 0 3
44928: PPUSH
44929: LD_INT 0
44931: PPUSH
44932: CALL_OW 48
// end ;
44936: LD_VAR 0 5
44940: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44941: LD_INT 0
44943: PPUSH
44944: PPUSH
44945: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44946: LD_ADDR_VAR 0 2
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44969: LD_VAR 0 1
44973: NOT
44974: IFTRUE 45007
44976: PUSH
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 264
44986: PUSH
44987: LD_INT 12
44989: PUSH
44990: LD_INT 51
44992: PUSH
44993: LD_INT 32
44995: PUSH
44996: LD_INT 89
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: IN
45005: NOT
45006: OR
45007: IFFALSE 45011
// exit ;
45009: GO 45109
// for i := 1 to 3 do
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: DOUBLE
45017: LD_INT 1
45019: DEC
45020: ST_TO_ADDR
45021: LD_INT 3
45023: PUSH
45024: FOR_TO
45025: IFFALSE 45107
// begin tmp := GetCargo ( cargo , i ) ;
45027: LD_ADDR_VAR 0 4
45031: PUSH
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_VAR 0 3
45041: PPUSH
45042: CALL_OW 289
45046: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45047: LD_ADDR_VAR 0 2
45051: PUSH
45052: LD_VAR 0 2
45056: PPUSH
45057: LD_VAR 0 3
45061: PPUSH
45062: LD_VAR 0 4
45066: PPUSH
45067: CALL_OW 1
45071: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45072: LD_ADDR_VAR 0 2
45076: PUSH
45077: LD_VAR 0 2
45081: PPUSH
45082: LD_INT 4
45084: PPUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 4
45092: ARRAY
45093: PUSH
45094: LD_VAR 0 4
45098: PLUS
45099: PPUSH
45100: CALL_OW 1
45104: ST_TO_ADDR
// end ;
45105: GO 45024
45107: POP
45108: POP
// end ;
45109: LD_VAR 0 2
45113: RET
// export function Length ( array ) ; begin
45114: LD_INT 0
45116: PPUSH
// result := array + 0 ;
45117: LD_ADDR_VAR 0 2
45121: PUSH
45122: LD_VAR 0 1
45126: PUSH
45127: LD_INT 0
45129: PLUS
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 2
45135: RET
// export function PrepareArray ( array ) ; begin
45136: LD_INT 0
45138: PPUSH
// result := array diff 0 ;
45139: LD_ADDR_VAR 0 2
45143: PUSH
45144: LD_VAR 0 1
45148: PUSH
45149: LD_INT 0
45151: DIFF
45152: ST_TO_ADDR
// if not result [ 1 ] then
45153: LD_VAR 0 2
45157: PUSH
45158: LD_INT 1
45160: ARRAY
45161: NOT
45162: IFFALSE 45182
// result := Delete ( result , 1 ) ;
45164: LD_ADDR_VAR 0 2
45168: PUSH
45169: LD_VAR 0 2
45173: PPUSH
45174: LD_INT 1
45176: PPUSH
45177: CALL_OW 3
45181: ST_TO_ADDR
// end ;
45182: LD_VAR 0 2
45186: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45187: LD_INT 0
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
// sibRocketRange := 25 ;
45193: LD_ADDR_VAR 0 6
45197: PUSH
45198: LD_INT 25
45200: ST_TO_ADDR
// result := false ;
45201: LD_ADDR_VAR 0 4
45205: PUSH
45206: LD_INT 0
45208: ST_TO_ADDR
// for i := 0 to 5 do
45209: LD_ADDR_VAR 0 5
45213: PUSH
45214: DOUBLE
45215: LD_INT 0
45217: DEC
45218: ST_TO_ADDR
45219: LD_INT 5
45221: PUSH
45222: FOR_TO
45223: IFFALSE 45290
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45225: LD_VAR 0 1
45229: PPUSH
45230: LD_VAR 0 5
45234: PPUSH
45235: LD_VAR 0 6
45239: PPUSH
45240: CALL_OW 272
45244: PPUSH
45245: LD_VAR 0 2
45249: PPUSH
45250: LD_VAR 0 5
45254: PPUSH
45255: LD_VAR 0 6
45259: PPUSH
45260: CALL_OW 273
45264: PPUSH
45265: LD_VAR 0 3
45269: PPUSH
45270: CALL_OW 309
45274: IFFALSE 45288
// begin result := true ;
45276: LD_ADDR_VAR 0 4
45280: PUSH
45281: LD_INT 1
45283: ST_TO_ADDR
// exit ;
45284: POP
45285: POP
45286: GO 45292
// end ;
45288: GO 45222
45290: POP
45291: POP
// end ;
45292: LD_VAR 0 4
45296: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45297: LD_INT 0
45299: PPUSH
45300: PPUSH
45301: PPUSH
// if btype = b_depot then
45302: LD_VAR 0 2
45306: PUSH
45307: LD_INT 0
45309: EQUAL
45310: IFFALSE 45322
// begin result := true ;
45312: LD_ADDR_VAR 0 3
45316: PUSH
45317: LD_INT 1
45319: ST_TO_ADDR
// exit ;
45320: GO 45442
// end ; pom := GetBase ( depot ) ;
45322: LD_ADDR_VAR 0 4
45326: PUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: CALL_OW 274
45336: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45337: LD_ADDR_VAR 0 5
45341: PUSH
45342: LD_VAR 0 2
45346: PPUSH
45347: LD_VAR 0 1
45351: PPUSH
45352: CALL_OW 248
45356: PPUSH
45357: CALL_OW 450
45361: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45362: LD_ADDR_VAR 0 3
45366: PUSH
45367: LD_VAR 0 4
45371: PPUSH
45372: LD_INT 1
45374: PPUSH
45375: CALL_OW 275
45379: PUSH
45380: LD_VAR 0 5
45384: PUSH
45385: LD_INT 1
45387: ARRAY
45388: GREATEREQUAL
45389: IFFALSE 45415
45391: PUSH
45392: LD_VAR 0 4
45396: PPUSH
45397: LD_INT 2
45399: PPUSH
45400: CALL_OW 275
45404: PUSH
45405: LD_VAR 0 5
45409: PUSH
45410: LD_INT 2
45412: ARRAY
45413: GREATEREQUAL
45414: AND
45415: IFFALSE 45441
45417: PUSH
45418: LD_VAR 0 4
45422: PPUSH
45423: LD_INT 3
45425: PPUSH
45426: CALL_OW 275
45430: PUSH
45431: LD_VAR 0 5
45435: PUSH
45436: LD_INT 3
45438: ARRAY
45439: GREATEREQUAL
45440: AND
45441: ST_TO_ADDR
// end ;
45442: LD_VAR 0 3
45446: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45447: LD_INT 0
45449: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45450: LD_VAR 0 1
45454: PPUSH
45455: LD_VAR 0 2
45459: PPUSH
45460: LD_INT 0
45462: PPUSH
45463: LD_INT 0
45465: PPUSH
45466: LD_INT 1
45468: PPUSH
45469: LD_INT 0
45471: PPUSH
45472: CALL_OW 587
// end ;
45476: LD_VAR 0 3
45480: RET
// export function CenterOnNow ( unit ) ; begin
45481: LD_INT 0
45483: PPUSH
// result := IsInUnit ( unit ) ;
45484: LD_ADDR_VAR 0 2
45488: PUSH
45489: LD_VAR 0 1
45493: PPUSH
45494: CALL_OW 310
45498: ST_TO_ADDR
// if not result then
45499: LD_VAR 0 2
45503: NOT
45504: IFFALSE 45516
// result := unit ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: LD_VAR 0 1
45515: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 87
// end ;
45525: LD_VAR 0 2
45529: RET
// export function ComMoveHex ( unit , hex ) ; begin
45530: LD_INT 0
45532: PPUSH
// if not hex then
45533: LD_VAR 0 2
45537: NOT
45538: IFFALSE 45542
// exit ;
45540: GO 45595
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45542: LD_VAR 0 2
45546: PUSH
45547: LD_INT 1
45549: ARRAY
45550: PPUSH
45551: LD_VAR 0 2
45555: PUSH
45556: LD_INT 2
45558: ARRAY
45559: PPUSH
45560: CALL_OW 428
45564: IFFALSE 45568
// exit ;
45566: GO 45595
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45568: LD_VAR 0 1
45572: PPUSH
45573: LD_VAR 0 2
45577: PUSH
45578: LD_INT 1
45580: ARRAY
45581: PPUSH
45582: LD_VAR 0 2
45586: PUSH
45587: LD_INT 2
45589: ARRAY
45590: PPUSH
45591: CALL_OW 111
// end ;
45595: LD_VAR 0 3
45599: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45600: LD_INT 0
45602: PPUSH
45603: PPUSH
45604: PPUSH
// if not unit or not enemy then
45605: LD_VAR 0 1
45609: NOT
45610: IFTRUE 45619
45612: PUSH
45613: LD_VAR 0 2
45617: NOT
45618: OR
45619: IFFALSE 45623
// exit ;
45621: GO 45749
// x := GetX ( enemy ) ;
45623: LD_ADDR_VAR 0 4
45627: PUSH
45628: LD_VAR 0 2
45632: PPUSH
45633: CALL_OW 250
45637: ST_TO_ADDR
// y := GetY ( enemy ) ;
45638: LD_ADDR_VAR 0 5
45642: PUSH
45643: LD_VAR 0 2
45647: PPUSH
45648: CALL_OW 251
45652: ST_TO_ADDR
// if ValidHex ( x , y ) then
45653: LD_VAR 0 4
45657: PPUSH
45658: LD_VAR 0 5
45662: PPUSH
45663: CALL_OW 488
45667: IFFALSE 45749
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45669: LD_VAR 0 2
45673: PPUSH
45674: CALL_OW 247
45678: PUSH
45679: LD_INT 3
45681: PUSH
45682: LD_INT 2
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: IN
45689: IFTRUE 45712
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 255
45701: PPUSH
45702: LD_VAR 0 2
45706: PPUSH
45707: CALL_OW 292
45711: OR
45712: IFFALSE 45730
// ComAttackUnit ( unit , enemy ) else
45714: LD_VAR 0 1
45718: PPUSH
45719: LD_VAR 0 2
45723: PPUSH
45724: CALL_OW 115
45728: GO 45749
// ComAgressiveMove ( unit , x , y ) ;
45730: LD_VAR 0 1
45734: PPUSH
45735: LD_VAR 0 4
45739: PPUSH
45740: LD_VAR 0 5
45744: PPUSH
45745: CALL_OW 114
// end ;
45749: LD_VAR 0 3
45753: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45754: LD_INT 0
45756: PPUSH
45757: PPUSH
45758: PPUSH
// list := AreaToList ( area , 0 ) ;
45759: LD_ADDR_VAR 0 5
45763: PUSH
45764: LD_VAR 0 1
45768: PPUSH
45769: LD_INT 0
45771: PPUSH
45772: CALL_OW 517
45776: ST_TO_ADDR
// if not list then
45777: LD_VAR 0 5
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 45916
// if all then
45786: LD_VAR 0 2
45790: IFFALSE 45878
// begin for i := 1 to list [ 1 ] do
45792: LD_ADDR_VAR 0 4
45796: PUSH
45797: DOUBLE
45798: LD_INT 1
45800: DEC
45801: ST_TO_ADDR
45802: LD_VAR 0 5
45806: PUSH
45807: LD_INT 1
45809: ARRAY
45810: PUSH
45811: FOR_TO
45812: IFFALSE 45874
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45814: LD_ADDR_VAR 0 3
45818: PUSH
45819: LD_VAR 0 3
45823: PPUSH
45824: LD_VAR 0 3
45828: PUSH
45829: LD_INT 1
45831: PLUS
45832: PPUSH
45833: LD_VAR 0 5
45837: PUSH
45838: LD_INT 1
45840: ARRAY
45841: PUSH
45842: LD_VAR 0 4
45846: ARRAY
45847: PUSH
45848: LD_VAR 0 5
45852: PUSH
45853: LD_INT 2
45855: ARRAY
45856: PUSH
45857: LD_VAR 0 4
45861: ARRAY
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PPUSH
45867: CALL_OW 1
45871: ST_TO_ADDR
45872: GO 45811
45874: POP
45875: POP
// exit ;
45876: GO 45916
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45878: LD_ADDR_VAR 0 3
45882: PUSH
45883: LD_VAR 0 5
45887: PUSH
45888: LD_INT 1
45890: ARRAY
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: PUSH
45896: LD_VAR 0 5
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: PUSH
45905: LD_INT 1
45907: ARRAY
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: ST_TO_ADDR
// end ;
45916: LD_VAR 0 3
45920: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45921: LD_INT 0
45923: PPUSH
45924: PPUSH
// list := AreaToList ( area , 0 ) ;
45925: LD_ADDR_VAR 0 4
45929: PUSH
45930: LD_VAR 0 1
45934: PPUSH
45935: LD_INT 0
45937: PPUSH
45938: CALL_OW 517
45942: ST_TO_ADDR
// if not list then
45943: LD_VAR 0 4
45947: NOT
45948: IFFALSE 45952
// exit ;
45950: GO 45993
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45952: LD_ADDR_VAR 0 3
45956: PUSH
45957: LD_VAR 0 4
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PUSH
45966: LD_INT 1
45968: ARRAY
45969: PUSH
45970: LD_VAR 0 4
45974: PUSH
45975: LD_INT 2
45977: ARRAY
45978: PUSH
45979: LD_INT 1
45981: ARRAY
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// end ;
45993: LD_VAR 0 3
45997: RET
// export function First ( array ) ; begin
45998: LD_INT 0
46000: PPUSH
// if not array then
46001: LD_VAR 0 1
46005: NOT
46006: IFFALSE 46010
// exit ;
46008: GO 46024
// result := array [ 1 ] ;
46010: LD_ADDR_VAR 0 2
46014: PUSH
46015: LD_VAR 0 1
46019: PUSH
46020: LD_INT 1
46022: ARRAY
46023: ST_TO_ADDR
// end ;
46024: LD_VAR 0 2
46028: RET
// export function Last ( array ) ; begin
46029: LD_INT 0
46031: PPUSH
// if not array then
46032: LD_VAR 0 1
46036: NOT
46037: IFFALSE 46041
// exit ;
46039: GO 46057
// result := array [ array ] ;
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: LD_VAR 0 1
46050: PUSH
46051: LD_VAR 0 1
46055: ARRAY
46056: ST_TO_ADDR
// end ;
46057: LD_VAR 0 2
46061: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46062: LD_INT 0
46064: PPUSH
46065: PPUSH
// result := [ ] ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: EMPTY
46072: ST_TO_ADDR
// if not array then
46073: LD_VAR 0 1
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46194
// for i := 1 to array do
46082: LD_ADDR_VAR 0 6
46086: PUSH
46087: DOUBLE
46088: LD_INT 1
46090: DEC
46091: ST_TO_ADDR
46092: LD_VAR 0 1
46096: PUSH
46097: FOR_TO
46098: IFFALSE 46192
// if array [ i ] [ index ] = value then
46100: LD_VAR 0 1
46104: PUSH
46105: LD_VAR 0 6
46109: ARRAY
46110: PUSH
46111: LD_VAR 0 2
46115: ARRAY
46116: PUSH
46117: LD_VAR 0 3
46121: EQUAL
46122: IFFALSE 46190
// begin if indexColumn then
46124: LD_VAR 0 4
46128: IFFALSE 46164
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46130: LD_ADDR_VAR 0 5
46134: PUSH
46135: LD_VAR 0 5
46139: PPUSH
46140: LD_VAR 0 1
46144: PUSH
46145: LD_VAR 0 6
46149: ARRAY
46150: PUSH
46151: LD_VAR 0 4
46155: ARRAY
46156: PPUSH
46157: CALL 41202 0 2
46161: ST_TO_ADDR
46162: GO 46190
// result := Join ( result , array [ i ] ) ;
46164: LD_ADDR_VAR 0 5
46168: PUSH
46169: LD_VAR 0 5
46173: PPUSH
46174: LD_VAR 0 1
46178: PUSH
46179: LD_VAR 0 6
46183: ARRAY
46184: PPUSH
46185: CALL 41202 0 2
46189: ST_TO_ADDR
// end ;
46190: GO 46097
46192: POP
46193: POP
// end ;
46194: LD_VAR 0 5
46198: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46199: LD_INT 0
46201: PPUSH
// if not vehicles or not parkingPoint then
46202: LD_VAR 0 1
46206: NOT
46207: IFTRUE 46216
46209: PUSH
46210: LD_VAR 0 2
46214: NOT
46215: OR
46216: IFFALSE 46220
// exit ;
46218: GO 46318
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46220: LD_ADDR_VAR 0 1
46224: PUSH
46225: LD_VAR 0 1
46229: PPUSH
46230: LD_INT 50
46232: PUSH
46233: EMPTY
46234: LIST
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 92
46241: PUSH
46242: LD_VAR 0 2
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PUSH
46251: LD_VAR 0 2
46255: PUSH
46256: LD_INT 2
46258: ARRAY
46259: PUSH
46260: LD_INT 8
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PPUSH
46277: CALL_OW 72
46281: ST_TO_ADDR
// if not vehicles then
46282: LD_VAR 0 1
46286: NOT
46287: IFFALSE 46291
// exit ;
46289: GO 46318
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46291: LD_VAR 0 1
46295: PPUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_INT 1
46303: ARRAY
46304: PPUSH
46305: LD_VAR 0 2
46309: PUSH
46310: LD_INT 2
46312: ARRAY
46313: PPUSH
46314: CALL_OW 111
// end ;
46318: LD_VAR 0 3
46322: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46323: LD_INT 0
46325: PPUSH
46326: PPUSH
46327: PPUSH
// if not side or not area then
46328: LD_VAR 0 1
46332: NOT
46333: IFTRUE 46342
46335: PUSH
46336: LD_VAR 0 2
46340: NOT
46341: OR
46342: IFFALSE 46346
// exit ;
46344: GO 46465
// tmp := AreaToList ( area , 0 ) ;
46346: LD_ADDR_VAR 0 5
46350: PUSH
46351: LD_VAR 0 2
46355: PPUSH
46356: LD_INT 0
46358: PPUSH
46359: CALL_OW 517
46363: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46364: LD_ADDR_VAR 0 4
46368: PUSH
46369: DOUBLE
46370: LD_INT 1
46372: DEC
46373: ST_TO_ADDR
46374: LD_VAR 0 5
46378: PUSH
46379: LD_INT 1
46381: ARRAY
46382: PUSH
46383: FOR_TO
46384: IFFALSE 46463
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46386: LD_VAR 0 5
46390: PUSH
46391: LD_INT 1
46393: ARRAY
46394: PUSH
46395: LD_VAR 0 4
46399: ARRAY
46400: PPUSH
46401: LD_VAR 0 5
46405: PUSH
46406: LD_INT 2
46408: ARRAY
46409: PUSH
46410: LD_VAR 0 4
46414: ARRAY
46415: PPUSH
46416: CALL_OW 351
46420: IFFALSE 46461
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46422: LD_VAR 0 5
46426: PUSH
46427: LD_INT 1
46429: ARRAY
46430: PUSH
46431: LD_VAR 0 4
46435: ARRAY
46436: PPUSH
46437: LD_VAR 0 5
46441: PUSH
46442: LD_INT 2
46444: ARRAY
46445: PUSH
46446: LD_VAR 0 4
46450: ARRAY
46451: PPUSH
46452: LD_VAR 0 1
46456: PPUSH
46457: CALL_OW 244
// end ;
46461: GO 46383
46463: POP
46464: POP
// end ;
46465: LD_VAR 0 3
46469: RET
// export function UniqueArray ( array ) ; var i ; begin
46470: LD_INT 0
46472: PPUSH
46473: PPUSH
// result := [ ] ;
46474: LD_ADDR_VAR 0 2
46478: PUSH
46479: EMPTY
46480: ST_TO_ADDR
// if not array then
46481: LD_VAR 0 1
46485: NOT
46486: IFFALSE 46490
// exit ;
46488: GO 46551
// for i := 1 to array do
46490: LD_ADDR_VAR 0 3
46494: PUSH
46495: DOUBLE
46496: LD_INT 1
46498: DEC
46499: ST_TO_ADDR
46500: LD_VAR 0 1
46504: PUSH
46505: FOR_TO
46506: IFFALSE 46549
// if not array [ i ] in result then
46508: LD_VAR 0 1
46512: PUSH
46513: LD_VAR 0 3
46517: ARRAY
46518: PUSH
46519: LD_VAR 0 2
46523: IN
46524: NOT
46525: IFFALSE 46547
// result := Join ( result , i ) ;
46527: LD_ADDR_VAR 0 2
46531: PUSH
46532: LD_VAR 0 2
46536: PPUSH
46537: LD_VAR 0 3
46541: PPUSH
46542: CALL 41202 0 2
46546: ST_TO_ADDR
46547: GO 46505
46549: POP
46550: POP
// end ; end_of_file
46551: LD_VAR 0 2
46555: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46556: LD_INT 0
46558: PPUSH
46559: PPUSH
// disable ( mpActive ) ;
46560: LD_INT 100
46562: DISABLE_MARKED
// disable ( mpWin ) ;
46563: LD_INT 101
46565: DISABLE_MARKED
// disable ( mpLose ) ;
46566: LD_INT 102
46568: DISABLE_MARKED
// mpGameType := 0 ;
46569: LD_ADDR_EXP 1
46573: PUSH
46574: LD_INT 0
46576: ST_TO_ADDR
// mpGameSettings := [ ] ;
46577: LD_ADDR_EXP 4
46581: PUSH
46582: EMPTY
46583: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46584: LD_ADDR_EXP 2
46588: PUSH
46589: EMPTY
46590: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46591: LD_ADDR_EXP 3
46595: PUSH
46596: EMPTY
46597: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46598: LD_ADDR_EXP 27
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46613: LD_ADDR_EXP 10
46617: PUSH
46618: EMPTY
46619: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46620: LD_ADDR_EXP 11
46624: PUSH
46625: EMPTY
46626: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46627: LD_ADDR_EXP 40
46631: PUSH
46632: EMPTY
46633: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46634: LD_ADDR_EXP 41
46638: PUSH
46639: EMPTY
46640: ST_TO_ADDR
// mpDepots := [ ] ;
46641: LD_ADDR_EXP 12
46645: PUSH
46646: EMPTY
46647: ST_TO_ADDR
// mpBuildings := [ ] ;
46648: LD_ADDR_EXP 15
46652: PUSH
46653: EMPTY
46654: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46655: LD_ADDR_EXP 16
46659: PUSH
46660: EMPTY
46661: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46662: LD_ADDR_EXP 17
46666: PUSH
46667: EMPTY
46668: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46669: LD_ADDR_EXP 18
46673: PUSH
46674: EMPTY
46675: ST_TO_ADDR
// mpStartingResources := [ ] ;
46676: LD_ADDR_EXP 13
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// mpStartPos := [ ] ;
46683: LD_ADDR_EXP 19
46687: PUSH
46688: EMPTY
46689: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46690: LD_ADDR_EXP 20
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46699: LD_ADDR_EXP 21
46703: PUSH
46704: EMPTY
46705: ST_TO_ADDR
// mpApemans := [ ] ;
46706: LD_ADDR_EXP 28
46710: PUSH
46711: EMPTY
46712: ST_TO_ADDR
// mpApemansArea := [ ] ;
46713: LD_ADDR_EXP 29
46717: PUSH
46718: EMPTY
46719: ST_TO_ADDR
// mpRespawn := [ ] ;
46720: LD_ADDR_EXP 31
46724: PUSH
46725: EMPTY
46726: ST_TO_ADDR
// mpKingArea := 0 ;
46727: LD_ADDR_EXP 32
46731: PUSH
46732: LD_INT 0
46734: ST_TO_ADDR
// mpPoints := [ ] ;
46735: LD_ADDR_EXP 33
46739: PUSH
46740: EMPTY
46741: ST_TO_ADDR
// mpVehicles := 0 ;
46742: LD_ADDR_EXP 34
46746: PUSH
46747: LD_INT 0
46749: ST_TO_ADDR
// mpShipments := 0 ;
46750: LD_ADDR_EXP 25
46754: PUSH
46755: LD_INT 0
46757: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46758: LD_ADDR_EXP 38
46762: PUSH
46763: EMPTY
46764: PUSH
46765: EMPTY
46766: PUSH
46767: EMPTY
46768: PUSH
46769: EMPTY
46770: PUSH
46771: EMPTY
46772: PUSH
46773: EMPTY
46774: PUSH
46775: EMPTY
46776: PUSH
46777: EMPTY
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46789: LD_ADDR_EXP 30
46793: PUSH
46794: EMPTY
46795: PUSH
46796: EMPTY
46797: PUSH
46798: EMPTY
46799: PUSH
46800: EMPTY
46801: PUSH
46802: EMPTY
46803: PUSH
46804: EMPTY
46805: PUSH
46806: EMPTY
46807: PUSH
46808: EMPTY
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46820: LD_ADDR_EXP 39
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: ST_TO_ADDR
// mpEmissions := 0 ;
46859: LD_ADDR_EXP 35
46863: PUSH
46864: LD_INT 0
46866: ST_TO_ADDR
// mpTeleports := 0 ;
46867: LD_ADDR_EXP 42
46871: PUSH
46872: LD_INT 0
46874: ST_TO_ADDR
// mpArtifacts := 0 ;
46875: LD_ADDR_EXP 43
46879: PUSH
46880: LD_INT 0
46882: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46883: LD_ADDR_EXP 44
46887: PUSH
46888: LD_INT 0
46890: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46891: LD_ADDR_EXP 23
46895: PUSH
46896: LD_INT 3
46898: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46899: LD_ADDR_EXP 22
46903: PUSH
46904: LD_INT 15
46906: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46907: LD_ADDR_EXP 36
46911: PUSH
46912: LD_INT 0
46914: ST_TO_ADDR
// mpGameActive := false ;
46915: LD_ADDR_EXP 37
46919: PUSH
46920: LD_INT 0
46922: ST_TO_ADDR
// mpBlockRespThread := false ;
46923: LD_ADDR_EXP 45
46927: PUSH
46928: LD_INT 0
46930: ST_TO_ADDR
// for i := 1 to 32 do
46931: LD_ADDR_VAR 0 2
46935: PUSH
46936: DOUBLE
46937: LD_INT 1
46939: DEC
46940: ST_TO_ADDR
46941: LD_INT 32
46943: PUSH
46944: FOR_TO
46945: IFFALSE 46972
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46947: LD_ADDR_EXP 4
46951: PUSH
46952: LD_EXP 4
46956: PPUSH
46957: LD_VAR 0 2
46961: PPUSH
46962: LD_INT 0
46964: PPUSH
46965: CALL_OW 1
46969: ST_TO_ADDR
46970: GO 46944
46972: POP
46973: POP
// end ;
46974: LD_VAR 0 1
46978: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46979: LD_INT 0
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
46995: LD_ADDR_VAR 0 14
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: LD_INT 5
47011: PUSH
47012: LD_INT 6
47014: PUSH
47015: LD_INT 7
47017: PUSH
47018: LD_INT 8
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: ST_TO_ADDR
// for i in gameTypes do
47030: LD_ADDR_VAR 0 2
47034: PUSH
47035: LD_VAR 0 14
47039: PUSH
47040: FOR_IN
47041: IFFALSE 47050
// disable ( i ) ;
47043: LD_VAR 0 2
47047: DISABLE_MARKED
47048: GO 47040
47050: POP
47051: POP
// if Multiplayer then
47052: LD_OWVAR 4
47056: IFFALSE 47240
// begin mpGameType := mp_game_type ;
47058: LD_ADDR_EXP 1
47062: PUSH
47063: LD_OWVAR 6
47067: ST_TO_ADDR
// your_side := mp_player_side ;
47068: LD_ADDR_OWVAR 2
47072: PUSH
47073: LD_OWVAR 7
47077: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47078: LD_ADDR_EXP 5
47082: PUSH
47083: LD_OWVAR 17
47087: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47088: LD_ADDR_EXP 6
47092: PUSH
47093: LD_OWVAR 15
47097: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47098: LD_ADDR_EXP 7
47102: PUSH
47103: LD_OWVAR 16
47107: ST_TO_ADDR
// mpTeams := mp_teams ;
47108: LD_ADDR_EXP 8
47112: PUSH
47113: LD_OWVAR 12
47117: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47118: LD_ADDR_VAR 0 2
47122: PUSH
47123: DOUBLE
47124: LD_INT 1
47126: DEC
47127: ST_TO_ADDR
47128: LD_EXP 2
47132: PPUSH
47133: CALL 5226 0 1
47137: PUSH
47138: FOR_TO
47139: IFFALSE 47215
// begin setting := mpGameSettingsKeys [ i ] ;
47141: LD_ADDR_VAR 0 12
47145: PUSH
47146: LD_EXP 2
47150: PUSH
47151: LD_VAR 0 2
47155: ARRAY
47156: ST_TO_ADDR
// if setting then
47157: LD_VAR 0 12
47161: IFFALSE 47213
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47163: LD_ADDR_EXP 4
47167: PUSH
47168: LD_EXP 4
47172: PPUSH
47173: LD_VAR 0 2
47177: PPUSH
47178: LD_EXP 3
47182: PUSH
47183: LD_VAR 0 2
47187: ARRAY
47188: PUSH
47189: LD_VAR 0 2
47193: PUSH
47194: LD_INT 1
47196: MINUS
47197: PPUSH
47198: CALL_OW 426
47202: PUSH
47203: LD_INT 1
47205: PLUS
47206: ARRAY
47207: PPUSH
47208: CALL_OW 1
47212: ST_TO_ADDR
// end ;
47213: GO 47138
47215: POP
47216: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47217: LD_ADDR_EXP 9
47221: PUSH
47222: LD_EXP 6
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: DIFF
47233: PUSH
47234: LD_INT 1
47236: GREATER
47237: ST_TO_ADDR
// end else
47238: GO 47240
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47240: LD_EXP 1
47244: PPUSH
47245: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47249: LD_EXP 16
47253: PPUSH
47254: CALL 5226 0 1
47258: IFFALSE 47289
// begin for i in mpMarkedAreas do
47260: LD_ADDR_VAR 0 2
47264: PUSH
47265: LD_EXP 16
47269: PUSH
47270: FOR_IN
47271: IFFALSE 47287
// SetAreaMapShow ( i , 0 ) ;
47273: LD_VAR 0 2
47277: PPUSH
47278: LD_INT 0
47280: PPUSH
47281: CALL_OW 424
47285: GO 47270
47287: POP
47288: POP
// end ; for i := 1 to 8 do
47289: LD_ADDR_VAR 0 2
47293: PUSH
47294: DOUBLE
47295: LD_INT 1
47297: DEC
47298: ST_TO_ADDR
47299: LD_INT 8
47301: PUSH
47302: FOR_TO
47303: IFFALSE 48762
// begin if not mpSidePositions [ i ] then
47305: LD_EXP 5
47309: PUSH
47310: LD_VAR 0 2
47314: ARRAY
47315: NOT
47316: IFFALSE 47320
// continue ;
47318: GO 47302
// side := i ;
47320: LD_ADDR_VAR 0 7
47324: PUSH
47325: LD_VAR 0 2
47329: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47330: LD_ADDR_VAR 0 9
47334: PUSH
47335: LD_EXP 7
47339: PUSH
47340: LD_VAR 0 2
47344: ARRAY
47345: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47346: LD_ADDR_VAR 0 8
47350: PUSH
47351: LD_EXP 5
47355: PUSH
47356: LD_VAR 0 2
47360: ARRAY
47361: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47362: LD_EXP 10
47366: PPUSH
47367: CALL 5226 0 1
47371: IFFALSE 47448
// begin for j in mpOilDeposits [ pos ] do
47373: LD_ADDR_VAR 0 3
47377: PUSH
47378: LD_EXP 10
47382: PUSH
47383: LD_VAR 0 8
47387: ARRAY
47388: PUSH
47389: FOR_IN
47390: IFFALSE 47446
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47392: LD_VAR 0 3
47396: PUSH
47397: LD_INT 1
47399: ARRAY
47400: PPUSH
47401: LD_VAR 0 3
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: PPUSH
47410: LD_INT 2
47412: PPUSH
47413: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47417: LD_VAR 0 3
47421: PUSH
47422: LD_INT 1
47424: ARRAY
47425: PPUSH
47426: LD_VAR 0 3
47430: PUSH
47431: LD_INT 2
47433: ARRAY
47434: PPUSH
47435: LD_VAR 0 7
47439: PPUSH
47440: CALL_OW 441
// end ;
47444: GO 47389
47446: POP
47447: POP
// end ; if Count ( mpSibDeposits ) then
47448: LD_EXP 11
47452: PPUSH
47453: CALL 5226 0 1
47457: IFFALSE 47534
// begin for j in mpSibDeposits [ pos ] do
47459: LD_ADDR_VAR 0 3
47463: PUSH
47464: LD_EXP 11
47468: PUSH
47469: LD_VAR 0 8
47473: ARRAY
47474: PUSH
47475: FOR_IN
47476: IFFALSE 47532
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47478: LD_VAR 0 3
47482: PUSH
47483: LD_INT 1
47485: ARRAY
47486: PPUSH
47487: LD_VAR 0 3
47491: PUSH
47492: LD_INT 2
47494: ARRAY
47495: PPUSH
47496: LD_INT 3
47498: PPUSH
47499: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47503: LD_VAR 0 3
47507: PUSH
47508: LD_INT 1
47510: ARRAY
47511: PPUSH
47512: LD_VAR 0 3
47516: PUSH
47517: LD_INT 2
47519: ARRAY
47520: PPUSH
47521: LD_VAR 0 7
47525: PPUSH
47526: CALL_OW 441
// end ;
47530: GO 47475
47532: POP
47533: POP
// end ; InitBc ;
47534: CALL_OW 21
// InitUc ;
47538: CALL_OW 18
// uc_side := side ;
47542: LD_ADDR_OWVAR 20
47546: PUSH
47547: LD_VAR 0 7
47551: ST_TO_ADDR
// uc_nation := nation ;
47552: LD_ADDR_OWVAR 21
47556: PUSH
47557: LD_VAR 0 9
47561: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47562: LD_EXP 20
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: GREATER
47571: IFFALSE 47730
// begin x := mpStartPos [ pos ] [ 1 ] ;
47573: LD_ADDR_VAR 0 5
47577: PUSH
47578: LD_EXP 19
47582: PUSH
47583: LD_VAR 0 8
47587: ARRAY
47588: PUSH
47589: LD_INT 1
47591: ARRAY
47592: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47593: LD_ADDR_VAR 0 6
47597: PUSH
47598: LD_EXP 19
47602: PUSH
47603: LD_VAR 0 8
47607: ARRAY
47608: PUSH
47609: LD_INT 2
47611: ARRAY
47612: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47613: LD_VAR 0 5
47617: PPUSH
47618: LD_VAR 0 6
47622: PPUSH
47623: LD_INT 12
47625: PPUSH
47626: LD_INT 2
47628: PPUSH
47629: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47633: LD_ADDR_EXP 21
47637: PUSH
47638: LD_EXP 21
47642: PPUSH
47643: LD_VAR 0 7
47647: PPUSH
47648: LD_VAR 0 7
47652: PPUSH
47653: LD_VAR 0 5
47657: PPUSH
47658: LD_VAR 0 6
47662: PPUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 100
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: LD_INT 70
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 40
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 10
47695: PUSH
47696: LD_INT 25
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 20
47705: PUSH
47706: LD_INT 100
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: PPUSH
47720: CALL_OW 418
47724: PPUSH
47725: CALL_OW 1
47729: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47730: LD_EXP 12
47734: PPUSH
47735: CALL 5226 0 1
47739: IFFALSE 47938
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
47741: LD_EXP 1
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 8
47751: PUSH
47752: LD_INT 6
47754: PUSH
47755: LD_INT 7
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: IN
47764: IFFALSE 47784
// begin bc_level := 10 ;
47766: LD_ADDR_OWVAR 43
47770: PUSH
47771: LD_INT 10
47773: ST_TO_ADDR
// bc_type := b_warehouse ;
47774: LD_ADDR_OWVAR 42
47778: PUSH
47779: LD_INT 1
47781: ST_TO_ADDR
// end else
47782: GO 47800
// begin bc_level := 0 ;
47784: LD_ADDR_OWVAR 43
47788: PUSH
47789: LD_INT 0
47791: ST_TO_ADDR
// bc_type := b_depot ;
47792: LD_ADDR_OWVAR 42
47796: PUSH
47797: LD_INT 0
47799: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47800: LD_ADDR_VAR 0 4
47804: PUSH
47805: LD_EXP 12
47809: PUSH
47810: LD_VAR 0 8
47814: ARRAY
47815: PUSH
47816: LD_INT 1
47818: ARRAY
47819: PPUSH
47820: LD_EXP 12
47824: PUSH
47825: LD_VAR 0 8
47829: ARRAY
47830: PUSH
47831: LD_INT 2
47833: ARRAY
47834: PPUSH
47835: LD_EXP 12
47839: PUSH
47840: LD_VAR 0 8
47844: ARRAY
47845: PUSH
47846: LD_INT 3
47848: ARRAY
47849: PPUSH
47850: CALL_OW 47
47854: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47855: LD_VAR 0 4
47859: PPUSH
47860: LD_STRING @
47862: PUSH
47863: LD_VAR 0 7
47867: STR
47868: PPUSH
47869: CALL_OW 500
// if Count ( mpStartingResources ) then
47873: LD_EXP 13
47877: PPUSH
47878: CALL 5226 0 1
47882: IFFALSE 47936
// begin for j := 1 to mpStartingResources do
47884: LD_ADDR_VAR 0 3
47888: PUSH
47889: DOUBLE
47890: LD_INT 1
47892: DEC
47893: ST_TO_ADDR
47894: LD_EXP 13
47898: PUSH
47899: FOR_TO
47900: IFFALSE 47934
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47902: LD_VAR 0 4
47906: PPUSH
47907: CALL_OW 274
47911: PPUSH
47912: LD_VAR 0 3
47916: PPUSH
47917: LD_EXP 13
47921: PUSH
47922: LD_VAR 0 3
47926: ARRAY
47927: PPUSH
47928: CALL_OW 277
47932: GO 47899
47934: POP
47935: POP
// end ; end else
47936: GO 48145
// if Count ( mpStartingResources ) then
47938: LD_EXP 13
47942: PPUSH
47943: CALL 5226 0 1
47947: IFFALSE 48145
// begin x := mpStartPos [ pos ] [ 1 ] ;
47949: LD_ADDR_VAR 0 5
47953: PUSH
47954: LD_EXP 19
47958: PUSH
47959: LD_VAR 0 8
47963: ARRAY
47964: PUSH
47965: LD_INT 1
47967: ARRAY
47968: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47969: LD_ADDR_VAR 0 6
47973: PUSH
47974: LD_EXP 19
47978: PUSH
47979: LD_VAR 0 8
47983: ARRAY
47984: PUSH
47985: LD_INT 2
47987: ARRAY
47988: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47989: LD_ADDR_VAR 0 3
47993: PUSH
47994: DOUBLE
47995: LD_INT 1
47997: DEC
47998: ST_TO_ADDR
47999: LD_EXP 13
48003: PUSH
48004: FOR_TO
48005: IFFALSE 48143
// begin resources := mpStartingResources [ j ] ;
48007: LD_ADDR_VAR 0 13
48011: PUSH
48012: LD_EXP 13
48016: PUSH
48017: LD_VAR 0 3
48021: ARRAY
48022: ST_TO_ADDR
// if resources = 0 then
48023: LD_VAR 0 13
48027: PUSH
48028: LD_INT 0
48030: EQUAL
48031: IFFALSE 48035
// continue ;
48033: GO 48004
// repeat if resources >= 50 then
48035: LD_VAR 0 13
48039: PUSH
48040: LD_INT 50
48042: GREATEREQUAL
48043: IFFALSE 48089
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48045: LD_VAR 0 3
48049: PPUSH
48050: LD_INT 5
48052: PPUSH
48053: LD_VAR 0 5
48057: PPUSH
48058: LD_VAR 0 6
48062: PPUSH
48063: LD_INT 6
48065: PPUSH
48066: LD_INT 0
48068: PPUSH
48069: CALL_OW 60
// resources := resources - 50 ;
48073: LD_ADDR_VAR 0 13
48077: PUSH
48078: LD_VAR 0 13
48082: PUSH
48083: LD_INT 50
48085: MINUS
48086: ST_TO_ADDR
// end else
48087: GO 48131
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48089: LD_VAR 0 3
48093: PPUSH
48094: LD_VAR 0 13
48098: PUSH
48099: LD_INT 10
48101: DIV
48102: PPUSH
48103: LD_VAR 0 5
48107: PPUSH
48108: LD_VAR 0 6
48112: PPUSH
48113: LD_INT 6
48115: PPUSH
48116: LD_INT 0
48118: PPUSH
48119: CALL_OW 60
// resources := 0 ;
48123: LD_ADDR_VAR 0 13
48127: PUSH
48128: LD_INT 0
48130: ST_TO_ADDR
// end ; until resources <= 0 ;
48131: LD_VAR 0 13
48135: PUSH
48136: LD_INT 0
48138: LESSEQUAL
48139: IFFALSE 48035
// end ;
48141: GO 48004
48143: POP
48144: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
48145: LD_EXP 15
48149: PPUSH
48150: CALL 5226 0 1
48154: IFFALSE 48174
48156: PUSH
48157: LD_EXP 1
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 8
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: IN
48172: NOT
48173: AND
48174: IFFALSE 48252
// begin for j in mpBuildings [ pos ] do
48176: LD_ADDR_VAR 0 3
48180: PUSH
48181: LD_EXP 15
48185: PUSH
48186: LD_VAR 0 8
48190: ARRAY
48191: PUSH
48192: FOR_IN
48193: IFFALSE 48250
// begin bc_level := 0 ;
48195: LD_ADDR_OWVAR 43
48199: PUSH
48200: LD_INT 0
48202: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48203: LD_ADDR_OWVAR 42
48207: PUSH
48208: LD_VAR 0 3
48212: PUSH
48213: LD_INT 1
48215: ARRAY
48216: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48217: LD_VAR 0 3
48221: PUSH
48222: LD_INT 2
48224: ARRAY
48225: PPUSH
48226: LD_VAR 0 3
48230: PUSH
48231: LD_INT 3
48233: ARRAY
48234: PPUSH
48235: LD_VAR 0 3
48239: PUSH
48240: LD_INT 4
48242: ARRAY
48243: PPUSH
48244: CALL_OW 47
// end ;
48248: GO 48192
48250: POP
48251: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48252: LD_EXP 24
48256: IFFALSE 48276
48258: PUSH
48259: LD_INT 20
48261: PPUSH
48262: LD_VAR 0 7
48266: PPUSH
48267: CALL_OW 321
48271: PUSH
48272: LD_INT 1
48274: EQUAL
48275: AND
48276: IFFALSE 48293
// SetTech ( tech_SibDet , side , state_researched ) ;
48278: LD_INT 20
48280: PPUSH
48281: LD_VAR 0 7
48285: PPUSH
48286: LD_INT 2
48288: PPUSH
48289: CALL_OW 322
// if not mpArtifacts then
48293: LD_EXP 43
48297: NOT
48298: IFFALSE 48315
// SetTech ( tech_artifact , side , state_disabled ) ;
48300: LD_INT 24
48302: PPUSH
48303: LD_VAR 0 7
48307: PPUSH
48308: LD_INT 0
48310: PPUSH
48311: CALL_OW 322
// if mpSibBomb = 1 then
48315: LD_EXP 26
48319: PUSH
48320: LD_INT 1
48322: EQUAL
48323: IFFALSE 48342
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48325: LD_INT 25
48327: PPUSH
48328: LD_VAR 0 7
48332: PPUSH
48333: LD_INT 1
48335: PPUSH
48336: CALL_OW 322
// end else
48340: GO 48357
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48342: LD_INT 25
48344: PPUSH
48345: LD_VAR 0 7
48349: PPUSH
48350: LD_INT 0
48352: PPUSH
48353: CALL_OW 322
// end ; if mpVehicles then
48357: LD_EXP 34
48361: IFFALSE 48460
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48363: LD_ADDR_VAR 0 3
48367: PUSH
48368: LD_VAR 0 7
48372: PPUSH
48373: LD_VAR 0 9
48377: PPUSH
48378: LD_EXP 34
48382: PPUSH
48383: CALL 49719 0 3
48387: PUSH
48388: FOR_IN
48389: IFFALSE 48458
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48391: LD_VAR 0 3
48395: PPUSH
48396: LD_INT 0
48398: PPUSH
48399: LD_INT 5
48401: PPUSH
48402: CALL_OW 12
48406: PPUSH
48407: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48411: LD_VAR 0 3
48415: PPUSH
48416: LD_EXP 19
48420: PUSH
48421: LD_VAR 0 8
48425: ARRAY
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PPUSH
48431: LD_EXP 19
48435: PUSH
48436: LD_VAR 0 8
48440: ARRAY
48441: PUSH
48442: LD_INT 2
48444: ARRAY
48445: PPUSH
48446: LD_INT 12
48448: PPUSH
48449: LD_INT 0
48451: PPUSH
48452: CALL_OW 50
// end ;
48456: GO 48388
48458: POP
48459: POP
// end ; uc_nation := nation ;
48460: LD_ADDR_OWVAR 21
48464: PUSH
48465: LD_VAR 0 9
48469: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48470: LD_EXP 1
48474: PUSH
48475: LD_INT 6
48477: PUSH
48478: LD_INT 7
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: IN
48485: IFFALSE 48510
48487: PUSH
48488: LD_EXP 5
48492: PUSH
48493: LD_VAR 0 2
48497: ARRAY
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: IN
48509: AND
48510: IFFALSE 48558
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48512: LD_ADDR_VAR 0 11
48516: PUSH
48517: LD_VAR 0 7
48521: PPUSH
48522: LD_VAR 0 9
48526: PPUSH
48527: LD_EXP 22
48531: PUSH
48532: LD_EXP 22
48536: PUSH
48537: LD_INT 2
48539: DIV
48540: PLUS
48541: PPUSH
48542: LD_EXP 23
48546: PUSH
48547: LD_INT 1
48549: PLUS
48550: PPUSH
48551: CALL 49174 0 4
48555: ST_TO_ADDR
48556: GO 48588
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48558: LD_ADDR_VAR 0 11
48562: PUSH
48563: LD_VAR 0 7
48567: PPUSH
48568: LD_VAR 0 9
48572: PPUSH
48573: LD_EXP 22
48577: PPUSH
48578: LD_EXP 23
48582: PPUSH
48583: CALL 49174 0 4
48587: ST_TO_ADDR
// for j in team do
48588: LD_ADDR_VAR 0 3
48592: PUSH
48593: LD_VAR 0 11
48597: PUSH
48598: FOR_IN
48599: IFFALSE 48648
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48601: LD_VAR 0 3
48605: PPUSH
48606: LD_EXP 19
48610: PUSH
48611: LD_VAR 0 8
48615: ARRAY
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: LD_EXP 19
48625: PUSH
48626: LD_VAR 0 8
48630: ARRAY
48631: PUSH
48632: LD_INT 2
48634: ARRAY
48635: PPUSH
48636: LD_INT 12
48638: PPUSH
48639: LD_INT 0
48641: PPUSH
48642: CALL_OW 50
48646: GO 48598
48648: POP
48649: POP
// if mpApemans then
48650: LD_EXP 28
48654: IFFALSE 48760
// begin for j := 1 to mpApemans do
48656: LD_ADDR_VAR 0 3
48660: PUSH
48661: DOUBLE
48662: LD_INT 1
48664: DEC
48665: ST_TO_ADDR
48666: LD_EXP 28
48670: PUSH
48671: FOR_TO
48672: IFFALSE 48758
// begin PrepareApeman ( - 5 ) ;
48674: LD_INT 5
48676: NEG
48677: PPUSH
48678: CALL 37329 0 1
// ape := CreateHuman ;
48682: LD_ADDR_VAR 0 10
48686: PUSH
48687: CALL_OW 44
48691: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48692: LD_ADDR_EXP 30
48696: PUSH
48697: LD_EXP 30
48701: PPUSH
48702: LD_VAR 0 8
48706: PPUSH
48707: LD_EXP 30
48711: PUSH
48712: LD_VAR 0 8
48716: ARRAY
48717: PPUSH
48718: LD_VAR 0 10
48722: PPUSH
48723: CALL 41202 0 2
48727: PPUSH
48728: CALL_OW 1
48732: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48733: LD_VAR 0 10
48737: PPUSH
48738: LD_EXP 29
48742: PUSH
48743: LD_VAR 0 8
48747: ARRAY
48748: PPUSH
48749: LD_INT 0
48751: PPUSH
48752: CALL_OW 49
// end ;
48756: GO 48671
48758: POP
48759: POP
// end ; end ;
48760: GO 47302
48762: POP
48763: POP
// if not mpTeamGame then
48764: LD_EXP 9
48768: NOT
48769: IFFALSE 48867
// begin for i := 1 to 8 do
48771: LD_ADDR_VAR 0 2
48775: PUSH
48776: DOUBLE
48777: LD_INT 1
48779: DEC
48780: ST_TO_ADDR
48781: LD_INT 8
48783: PUSH
48784: FOR_TO
48785: IFFALSE 48863
// for j := 1 to 8 do
48787: LD_ADDR_VAR 0 3
48791: PUSH
48792: DOUBLE
48793: LD_INT 1
48795: DEC
48796: ST_TO_ADDR
48797: LD_INT 8
48799: PUSH
48800: FOR_TO
48801: IFFALSE 48859
// if i <> j then
48803: LD_VAR 0 2
48807: PUSH
48808: LD_VAR 0 3
48812: NONEQUAL
48813: IFFALSE 48837
// SetAttitude ( i , j , att_neutral , true ) else
48815: LD_VAR 0 2
48819: PPUSH
48820: LD_VAR 0 3
48824: PPUSH
48825: LD_INT 0
48827: PPUSH
48828: LD_INT 1
48830: PPUSH
48831: CALL_OW 80
48835: GO 48857
// SetAttitude ( i , j , att_friend , true ) ;
48837: LD_VAR 0 2
48841: PPUSH
48842: LD_VAR 0 3
48846: PPUSH
48847: LD_INT 1
48849: PPUSH
48850: LD_INT 1
48852: PPUSH
48853: CALL_OW 80
48857: GO 48800
48859: POP
48860: POP
48861: GO 48784
48863: POP
48864: POP
// end else
48865: GO 49042
// begin if mpSharedVision then
48867: LD_EXP 14
48871: IFFALSE 48936
// begin for i in mpTeams do
48873: LD_ADDR_VAR 0 2
48877: PUSH
48878: LD_EXP 8
48882: PUSH
48883: FOR_IN
48884: IFFALSE 48934
// for j := 2 to i do
48886: LD_ADDR_VAR 0 3
48890: PUSH
48891: DOUBLE
48892: LD_INT 2
48894: DEC
48895: ST_TO_ADDR
48896: LD_VAR 0 2
48900: PUSH
48901: FOR_TO
48902: IFFALSE 48930
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48904: LD_VAR 0 2
48908: PUSH
48909: LD_VAR 0 3
48913: ARRAY
48914: PPUSH
48915: LD_VAR 0 2
48919: PUSH
48920: LD_INT 1
48922: ARRAY
48923: PPUSH
48924: CALL_OW 343
48928: GO 48901
48930: POP
48931: POP
48932: GO 48883
48934: POP
48935: POP
// end ; for i := 1 to 8 do
48936: LD_ADDR_VAR 0 2
48940: PUSH
48941: DOUBLE
48942: LD_INT 1
48944: DEC
48945: ST_TO_ADDR
48946: LD_INT 8
48948: PUSH
48949: FOR_TO
48950: IFFALSE 49040
// for j := 1 to 8 do
48952: LD_ADDR_VAR 0 3
48956: PUSH
48957: DOUBLE
48958: LD_INT 1
48960: DEC
48961: ST_TO_ADDR
48962: LD_INT 8
48964: PUSH
48965: FOR_TO
48966: IFFALSE 49036
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48968: LD_EXP 6
48972: PUSH
48973: LD_VAR 0 2
48977: ARRAY
48978: PUSH
48979: LD_EXP 6
48983: PUSH
48984: LD_VAR 0 3
48988: ARRAY
48989: EQUAL
48990: IFFALSE 49014
// SetAttitude ( i , j , att_friend , true ) else
48992: LD_VAR 0 2
48996: PPUSH
48997: LD_VAR 0 3
49001: PPUSH
49002: LD_INT 1
49004: PPUSH
49005: LD_INT 1
49007: PPUSH
49008: CALL_OW 80
49012: GO 49034
// SetAttitude ( i , j , att_enemy , true ) ;
49014: LD_VAR 0 2
49018: PPUSH
49019: LD_VAR 0 3
49023: PPUSH
49024: LD_INT 2
49026: PPUSH
49027: LD_INT 1
49029: PPUSH
49030: CALL_OW 80
49034: GO 48965
49036: POP
49037: POP
49038: GO 48949
49040: POP
49041: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49042: LD_ADDR_OWVAR 71
49046: PUSH
49047: LD_EXP 7
49051: PUSH
49052: LD_OWVAR 2
49056: ARRAY
49057: ST_TO_ADDR
// if IAmSpec then
49058: CALL_OW 531
49062: IFFALSE 49103
// begin FogOff ( true ) ;
49064: LD_INT 1
49066: PPUSH
49067: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49071: LD_EXP 27
49075: PUSH
49076: LD_INT 1
49078: ARRAY
49079: PUSH
49080: LD_INT 2
49082: DIV
49083: PPUSH
49084: LD_EXP 27
49088: PUSH
49089: LD_INT 2
49091: ARRAY
49092: PUSH
49093: LD_INT 2
49095: DIV
49096: PPUSH
49097: CALL_OW 86
// end else
49101: GO 49149
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49103: LD_EXP 19
49107: PUSH
49108: LD_EXP 5
49112: PUSH
49113: LD_OWVAR 2
49117: ARRAY
49118: ARRAY
49119: PUSH
49120: LD_INT 1
49122: ARRAY
49123: PPUSH
49124: LD_EXP 19
49128: PUSH
49129: LD_EXP 5
49133: PUSH
49134: LD_OWVAR 2
49138: ARRAY
49139: ARRAY
49140: PUSH
49141: LD_INT 2
49143: ARRAY
49144: PPUSH
49145: CALL_OW 86
// end ; BeginBuildUp ;
49149: CALL 50252 0 0
// enable ( mpActive ) ;
49153: LD_INT 100
49155: ENABLE_MARKED
// enable ( mpGameType ) ;
49156: LD_EXP 1
49160: ENABLE_MARKED
// mpGameActive := true ;
49161: LD_ADDR_EXP 37
49165: PUSH
49166: LD_INT 1
49168: ST_TO_ADDR
// end ;
49169: LD_VAR 0 1
49173: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49174: LD_INT 0
49176: PPUSH
49177: PPUSH
49178: PPUSH
49179: PPUSH
49180: PPUSH
// result := [ ] ;
49181: LD_ADDR_VAR 0 5
49185: PUSH
49186: EMPTY
49187: ST_TO_ADDR
// class := class_soldier ;
49188: LD_ADDR_VAR 0 8
49192: PUSH
49193: LD_INT 1
49195: ST_TO_ADDR
// uc_side := side ;
49196: LD_ADDR_OWVAR 20
49200: PUSH
49201: LD_VAR 0 1
49205: ST_TO_ADDR
// uc_nation := nation ;
49206: LD_ADDR_OWVAR 21
49210: PUSH
49211: LD_VAR 0 2
49215: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49216: LD_ADDR_OWVAR 26
49220: PUSH
49221: LD_OWVAR 19
49225: PUSH
49226: LD_VAR 0 1
49230: ARRAY
49231: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49232: LD_INT 1
49234: PPUSH
49235: LD_INT 2
49237: PPUSH
49238: CALL_OW 12
49242: PPUSH
49243: LD_VAR 0 8
49247: PPUSH
49248: LD_VAR 0 4
49252: PUSH
49253: LD_INT 2
49255: PLUS
49256: PPUSH
49257: CALL_OW 380
// hc_importance := 105 ;
49261: LD_ADDR_OWVAR 32
49265: PUSH
49266: LD_INT 105
49268: ST_TO_ADDR
// if Multiplayer then
49269: LD_OWVAR 4
49273: IFFALSE 49313
// begin hc_gallery := MULTIAVATARS ;
49275: LD_ADDR_OWVAR 33
49279: PUSH
49280: LD_STRING MULTIAVATARS
49282: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49283: LD_ADDR_OWVAR 34
49287: PUSH
49288: LD_VAR 0 1
49292: PPUSH
49293: CALL_OW 525
49297: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49298: LD_ADDR_OWVAR 27
49302: PUSH
49303: LD_VAR 0 1
49307: PPUSH
49308: CALL_OW 526
49312: ST_TO_ADDR
// end ; commander := CreateHuman ;
49313: LD_ADDR_VAR 0 9
49317: PUSH
49318: CALL_OW 44
49322: ST_TO_ADDR
// result := Join ( result , commander ) ;
49323: LD_ADDR_VAR 0 5
49327: PUSH
49328: LD_VAR 0 5
49332: PPUSH
49333: LD_VAR 0 9
49337: PPUSH
49338: CALL 41202 0 2
49342: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49343: LD_ADDR_EXP 39
49347: PUSH
49348: LD_EXP 39
49352: PPUSH
49353: LD_VAR 0 1
49357: PPUSH
49358: LD_VAR 0 9
49362: PPUSH
49363: CALL_OW 1
49367: ST_TO_ADDR
// if mpTeamPreset then
49368: LD_LOC 1
49372: IFFALSE 49468
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49374: LD_LOC 1
49378: PUSH
49379: LD_INT 1
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 5
49387: PUSH
49388: LD_VAR 0 5
49392: ARRAY
49393: PPUSH
49394: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49398: LD_VAR 0 5
49402: PUSH
49403: LD_VAR 0 5
49407: ARRAY
49408: PPUSH
49409: LD_INT 1
49411: PPUSH
49412: LD_LOC 1
49416: PUSH
49417: LD_INT 1
49419: ARRAY
49420: PPUSH
49421: LD_INT 1
49423: PPUSH
49424: CALL_OW 260
49428: PPUSH
49429: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49433: LD_VAR 0 5
49437: PUSH
49438: LD_VAR 0 5
49442: ARRAY
49443: PPUSH
49444: LD_INT 2
49446: PPUSH
49447: LD_LOC 1
49451: PUSH
49452: LD_INT 1
49454: ARRAY
49455: PPUSH
49456: LD_INT 2
49458: PPUSH
49459: CALL_OW 260
49463: PPUSH
49464: CALL_OW 239
// end ; InitHc_All ( ) ;
49468: CALL_OW 584
// class := 2 ;
49472: LD_ADDR_VAR 0 8
49476: PUSH
49477: LD_INT 2
49479: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49480: LD_ADDR_VAR 0 6
49484: PUSH
49485: DOUBLE
49486: LD_INT 1
49488: DEC
49489: ST_TO_ADDR
49490: LD_VAR 0 3
49494: PUSH
49495: LD_INT 1
49497: MINUS
49498: PUSH
49499: FOR_TO
49500: IFFALSE 49695
// begin PrepareHuman ( false , class , skill ) ;
49502: LD_INT 0
49504: PPUSH
49505: LD_VAR 0 8
49509: PPUSH
49510: LD_VAR 0 4
49514: PPUSH
49515: CALL_OW 380
// un := CreateHuman ;
49519: LD_ADDR_VAR 0 7
49523: PUSH
49524: CALL_OW 44
49528: ST_TO_ADDR
// result := Join ( result , un ) ;
49529: LD_ADDR_VAR 0 5
49533: PUSH
49534: LD_VAR 0 5
49538: PPUSH
49539: LD_VAR 0 7
49543: PPUSH
49544: CALL 41202 0 2
49548: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49549: LD_LOC 1
49553: PPUSH
49554: CALL 5226 0 1
49558: PUSH
49559: LD_VAR 0 3
49563: GREATEREQUAL
49564: IFFALSE 49660
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49566: LD_LOC 1
49570: PUSH
49571: LD_VAR 0 6
49575: PUSH
49576: LD_INT 1
49578: PLUS
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 7
49585: PPUSH
49586: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49590: LD_VAR 0 7
49594: PPUSH
49595: LD_INT 1
49597: PPUSH
49598: LD_LOC 1
49602: PUSH
49603: LD_VAR 0 6
49607: PUSH
49608: LD_INT 1
49610: PLUS
49611: ARRAY
49612: PPUSH
49613: LD_INT 1
49615: PPUSH
49616: CALL_OW 260
49620: PPUSH
49621: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49625: LD_VAR 0 7
49629: PPUSH
49630: LD_INT 2
49632: PPUSH
49633: LD_LOC 1
49637: PUSH
49638: LD_VAR 0 6
49642: PUSH
49643: LD_INT 1
49645: PLUS
49646: ARRAY
49647: PPUSH
49648: LD_INT 2
49650: PPUSH
49651: CALL_OW 260
49655: PPUSH
49656: CALL_OW 239
// end ; class := Inc ( class ) ;
49660: LD_ADDR_VAR 0 8
49664: PUSH
49665: LD_VAR 0 8
49669: PPUSH
49670: CALL 42575 0 1
49674: ST_TO_ADDR
// if class = 5 then
49675: LD_VAR 0 8
49679: PUSH
49680: LD_INT 5
49682: EQUAL
49683: IFFALSE 49693
// class := 1 ;
49685: LD_ADDR_VAR 0 8
49689: PUSH
49690: LD_INT 1
49692: ST_TO_ADDR
// end ;
49693: GO 49499
49695: POP
49696: POP
// if not mpTeamPreset then
49697: LD_LOC 1
49701: NOT
49702: IFFALSE 49714
// mpTeamPreset := result ;
49704: LD_ADDR_LOC 1
49708: PUSH
49709: LD_VAR 0 5
49713: ST_TO_ADDR
// end ;
49714: LD_VAR 0 5
49718: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49719: LD_INT 0
49721: PPUSH
49722: PPUSH
// result := [ ] ;
49723: LD_ADDR_VAR 0 4
49727: PUSH
49728: EMPTY
49729: ST_TO_ADDR
// if not vehicles then
49730: LD_VAR 0 3
49734: NOT
49735: IFFALSE 49739
// exit ;
49737: GO 49953
// for i := 1 to vehicles [ nation ] do
49739: LD_ADDR_VAR 0 5
49743: PUSH
49744: DOUBLE
49745: LD_INT 1
49747: DEC
49748: ST_TO_ADDR
49749: LD_VAR 0 3
49753: PUSH
49754: LD_VAR 0 2
49758: ARRAY
49759: PUSH
49760: FOR_TO
49761: IFFALSE 49951
// begin uc_side := side ;
49763: LD_ADDR_OWVAR 20
49767: PUSH
49768: LD_VAR 0 1
49772: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49773: LD_VAR 0 3
49777: PUSH
49778: LD_VAR 0 2
49782: ARRAY
49783: PUSH
49784: LD_VAR 0 5
49788: ARRAY
49789: PPUSH
49790: CALL 5226 0 1
49794: PUSH
49795: LD_INT 4
49797: GREATER
49798: IFFALSE 49828
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49800: LD_ADDR_OWVAR 21
49804: PUSH
49805: LD_VAR 0 3
49809: PUSH
49810: LD_VAR 0 2
49814: ARRAY
49815: PUSH
49816: LD_VAR 0 5
49820: ARRAY
49821: PUSH
49822: LD_INT 5
49824: ARRAY
49825: ST_TO_ADDR
49826: GO 49838
// uc_nation := nation ;
49828: LD_ADDR_OWVAR 21
49832: PUSH
49833: LD_VAR 0 2
49837: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49838: LD_VAR 0 3
49842: PUSH
49843: LD_VAR 0 2
49847: ARRAY
49848: PUSH
49849: LD_VAR 0 5
49853: ARRAY
49854: PUSH
49855: LD_INT 1
49857: ARRAY
49858: PPUSH
49859: LD_VAR 0 3
49863: PUSH
49864: LD_VAR 0 2
49868: ARRAY
49869: PUSH
49870: LD_VAR 0 5
49874: ARRAY
49875: PUSH
49876: LD_INT 2
49878: ARRAY
49879: PPUSH
49880: LD_VAR 0 3
49884: PUSH
49885: LD_VAR 0 2
49889: ARRAY
49890: PUSH
49891: LD_VAR 0 5
49895: ARRAY
49896: PUSH
49897: LD_INT 3
49899: ARRAY
49900: PPUSH
49901: LD_VAR 0 3
49905: PUSH
49906: LD_VAR 0 2
49910: ARRAY
49911: PUSH
49912: LD_VAR 0 5
49916: ARRAY
49917: PUSH
49918: LD_INT 4
49920: ARRAY
49921: PPUSH
49922: LD_INT 80
49924: PPUSH
49925: CALL 8022 0 5
// result := Join ( result , CreateVehicle ) ;
49929: LD_ADDR_VAR 0 4
49933: PUSH
49934: LD_VAR 0 4
49938: PPUSH
49939: CALL_OW 45
49943: PPUSH
49944: CALL 41202 0 2
49948: ST_TO_ADDR
// end ;
49949: GO 49760
49951: POP
49952: POP
// end ;
49953: LD_VAR 0 4
49957: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49958: LD_INT 0
49960: PPUSH
49961: PPUSH
// for i in mpBattleFlags do
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: LD_EXP 21
49971: PUSH
49972: FOR_IN
49973: IFFALSE 50050
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49975: LD_VAR 0 3
49979: PPUSH
49980: LD_INT 1
49982: PUSH
49983: LD_VAR 0 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_VAR 0 1
49999: PUSH
50000: LD_REAL  7.00000000000000E-0001
50003: MUL
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_VAR 0 1
50016: PUSH
50017: LD_REAL  4.00000000000000E-0001
50020: MUL
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 20
50028: PUSH
50029: LD_VAR 0 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: PPUSH
50044: CALL_OW 423
50048: GO 49972
50050: POP
50051: POP
// end ;
50052: LD_VAR 0 2
50056: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50057: LD_INT 100
50059: IFFALSE 50154
50061: GO 50063
50063: DISABLE
50064: LD_INT 0
50066: PPUSH
50067: PPUSH
// begin if mpBattleFlag <= 0 then
50068: LD_EXP 20
50072: PUSH
50073: LD_INT 0
50075: LESSEQUAL
50076: IFFALSE 50080
// exit ;
50078: GO 50154
// strength := 100 ;
50080: LD_ADDR_VAR 0 2
50084: PUSH
50085: LD_INT 100
50087: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50088: LD_EXP 20
50092: PPUSH
50093: CALL_OW 67
// strength := Dec ( strength ) ;
50097: LD_ADDR_VAR 0 2
50101: PUSH
50102: LD_VAR 0 2
50106: PPUSH
50107: CALL 42597 0 1
50111: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50112: LD_VAR 0 2
50116: PPUSH
50117: CALL 49958 0 1
// until not strength ;
50121: LD_VAR 0 2
50125: NOT
50126: IFFALSE 50088
// for i in mpBattleFlags do
50128: LD_ADDR_VAR 0 1
50132: PUSH
50133: LD_EXP 21
50137: PUSH
50138: FOR_IN
50139: IFFALSE 50152
// KillBattleFlag ( i ) ;
50141: LD_VAR 0 1
50145: PPUSH
50146: CALL_OW 419
50150: GO 50138
50152: POP
50153: POP
// end ;
50154: PPOPN 2
50156: END
// every 0 0$1 marked mpActive do var side , tmp ;
50157: GO 50159
50159: DISABLE
50160: LD_INT 0
50162: PPUSH
50163: PPUSH
// begin if mpSibBomb <= 1 then
50164: LD_EXP 26
50168: PUSH
50169: LD_INT 1
50171: LESSEQUAL
50172: IFFALSE 50176
// exit ;
50174: GO 50249
// tmp := mpSibBomb ;
50176: LD_ADDR_VAR 0 2
50180: PUSH
50181: LD_EXP 26
50185: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50186: LD_INT 35
50188: PPUSH
50189: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50193: LD_ADDR_VAR 0 2
50197: PUSH
50198: LD_VAR 0 2
50202: PUSH
50203: LD_INT 35
50205: MINUS
50206: ST_TO_ADDR
// until not tmp ;
50207: LD_VAR 0 2
50211: NOT
50212: IFFALSE 50186
// for side := 1 to 8 do
50214: LD_ADDR_VAR 0 1
50218: PUSH
50219: DOUBLE
50220: LD_INT 1
50222: DEC
50223: ST_TO_ADDR
50224: LD_INT 8
50226: PUSH
50227: FOR_TO
50228: IFFALSE 50247
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50230: LD_INT 25
50232: PPUSH
50233: LD_VAR 0 1
50237: PPUSH
50238: LD_INT 1
50240: PPUSH
50241: CALL_OW 322
50245: GO 50227
50247: POP
50248: POP
// end ;
50249: PPOPN 2
50251: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50252: LD_INT 0
50254: PPUSH
50255: PPUSH
50256: PPUSH
// mpBuildUpTimeDelay := 0 ;
50257: LD_ADDR_EXP 46
50261: PUSH
50262: LD_INT 0
50264: ST_TO_ADDR
// if not mpBuildUpTime then
50265: LD_EXP 18
50269: NOT
50270: IFFALSE 50274
// exit ;
50272: GO 50463
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50274: LD_ADDR_EXP 46
50278: PUSH
50279: LD_INT 8400
50281: PUSH
50282: LD_INT 2100
50284: PUSH
50285: LD_EXP 18
50289: MUL
50290: PLUS
50291: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50292: LD_ADDR_EXP 47
50296: PUSH
50297: LD_INT 1
50299: ST_TO_ADDR
// for i := 1 to 8 do
50300: LD_ADDR_VAR 0 2
50304: PUSH
50305: DOUBLE
50306: LD_INT 1
50308: DEC
50309: ST_TO_ADDR
50310: LD_INT 8
50312: PUSH
50313: FOR_TO
50314: IFFALSE 50461
// if mpSidePositions [ i ] then
50316: LD_EXP 5
50320: PUSH
50321: LD_VAR 0 2
50325: ARRAY
50326: IFFALSE 50459
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50328: LD_EXP 17
50332: PUSH
50333: LD_EXP 5
50337: PUSH
50338: LD_VAR 0 2
50342: ARRAY
50343: ARRAY
50344: PPUSH
50345: LD_INT 5
50347: PPUSH
50348: CALL_OW 424
// for j := 1 to 8 do
50352: LD_ADDR_VAR 0 3
50356: PUSH
50357: DOUBLE
50358: LD_INT 1
50360: DEC
50361: ST_TO_ADDR
50362: LD_INT 8
50364: PUSH
50365: FOR_TO
50366: IFFALSE 50457
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50368: LD_EXP 5
50372: PUSH
50373: LD_VAR 0 3
50377: ARRAY
50378: IFFALSE 50427
50380: PUSH
50381: LD_EXP 6
50385: PUSH
50386: LD_VAR 0 2
50390: ARRAY
50391: PUSH
50392: LD_EXP 6
50396: PUSH
50397: LD_VAR 0 3
50401: ARRAY
50402: NONEQUAL
50403: IFTRUE 50426
50405: PUSH
50406: LD_EXP 9
50410: NOT
50411: IFFALSE 50425
50413: PUSH
50414: LD_VAR 0 2
50418: PUSH
50419: LD_VAR 0 3
50423: NONEQUAL
50424: AND
50425: OR
50426: AND
50427: IFFALSE 50455
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50429: LD_VAR 0 3
50433: PPUSH
50434: LD_EXP 17
50438: PUSH
50439: LD_EXP 5
50443: PUSH
50444: LD_VAR 0 2
50448: ARRAY
50449: ARRAY
50450: PPUSH
50451: CALL_OW 333
50455: GO 50365
50457: POP
50458: POP
// end ;
50459: GO 50313
50461: POP
50462: POP
// end ;
50463: LD_VAR 0 1
50467: RET
// function EndBuildUp ; var i , j ; begin
50468: LD_INT 0
50470: PPUSH
50471: PPUSH
50472: PPUSH
// mpBuildUpTimeActive := false ;
50473: LD_ADDR_EXP 47
50477: PUSH
50478: LD_INT 0
50480: ST_TO_ADDR
// for i := 1 to 8 do
50481: LD_ADDR_VAR 0 2
50485: PUSH
50486: DOUBLE
50487: LD_INT 1
50489: DEC
50490: ST_TO_ADDR
50491: LD_INT 8
50493: PUSH
50494: FOR_TO
50495: IFFALSE 50642
// if mpSidePositions [ i ] then
50497: LD_EXP 5
50501: PUSH
50502: LD_VAR 0 2
50506: ARRAY
50507: IFFALSE 50640
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50509: LD_EXP 17
50513: PUSH
50514: LD_EXP 5
50518: PUSH
50519: LD_VAR 0 2
50523: ARRAY
50524: ARRAY
50525: PPUSH
50526: LD_INT 0
50528: PPUSH
50529: CALL_OW 424
// for j := 1 to 8 do
50533: LD_ADDR_VAR 0 3
50537: PUSH
50538: DOUBLE
50539: LD_INT 1
50541: DEC
50542: ST_TO_ADDR
50543: LD_INT 8
50545: PUSH
50546: FOR_TO
50547: IFFALSE 50638
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50549: LD_EXP 5
50553: PUSH
50554: LD_VAR 0 3
50558: ARRAY
50559: IFFALSE 50608
50561: PUSH
50562: LD_EXP 6
50566: PUSH
50567: LD_VAR 0 2
50571: ARRAY
50572: PUSH
50573: LD_EXP 6
50577: PUSH
50578: LD_VAR 0 3
50582: ARRAY
50583: NONEQUAL
50584: IFTRUE 50607
50586: PUSH
50587: LD_EXP 9
50591: NOT
50592: IFFALSE 50606
50594: PUSH
50595: LD_VAR 0 2
50599: PUSH
50600: LD_VAR 0 3
50604: NONEQUAL
50605: AND
50606: OR
50607: AND
50608: IFFALSE 50636
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50610: LD_VAR 0 3
50614: PPUSH
50615: LD_EXP 17
50619: PUSH
50620: LD_EXP 5
50624: PUSH
50625: LD_VAR 0 2
50629: ARRAY
50630: ARRAY
50631: PPUSH
50632: CALL_OW 334
50636: GO 50546
50638: POP
50639: POP
// end ;
50640: GO 50494
50642: POP
50643: POP
// end ;
50644: LD_VAR 0 1
50648: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50649: LD_EXP 47
50653: IFFALSE 50832
50655: GO 50657
50657: DISABLE
50658: LD_INT 0
50660: PPUSH
50661: PPUSH
// begin for i := 1 to 8 do
50662: LD_ADDR_VAR 0 1
50666: PUSH
50667: DOUBLE
50668: LD_INT 1
50670: DEC
50671: ST_TO_ADDR
50672: LD_INT 8
50674: PUSH
50675: FOR_TO
50676: IFFALSE 50829
// if mpSidePositions [ i ] then
50678: LD_EXP 5
50682: PUSH
50683: LD_VAR 0 1
50687: ARRAY
50688: IFFALSE 50827
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50690: LD_ADDR_VAR 0 2
50694: PUSH
50695: LD_EXP 17
50699: PUSH
50700: LD_EXP 5
50704: PUSH
50705: LD_VAR 0 1
50709: ARRAY
50710: ARRAY
50711: PPUSH
50712: LD_INT 2
50714: PUSH
50715: LD_INT 21
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 21
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 22
50742: PUSH
50743: LD_OWVAR 2
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PPUSH
50756: CALL_OW 70
50760: PUSH
50761: FOR_IN
50762: IFFALSE 50825
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50764: LD_EXP 6
50768: PUSH
50769: LD_VAR 0 1
50773: ARRAY
50774: PUSH
50775: LD_EXP 6
50779: PUSH
50780: LD_OWVAR 2
50784: ARRAY
50785: NONEQUAL
50786: IFTRUE 50809
50788: PUSH
50789: LD_EXP 9
50793: NOT
50794: IFFALSE 50808
50796: PUSH
50797: LD_VAR 0 1
50801: PUSH
50802: LD_OWVAR 2
50806: NONEQUAL
50807: AND
50808: OR
50809: IFFALSE 50823
// ComMoveToArea ( un , BuildUpEscape ) ;
50811: LD_VAR 0 2
50815: PPUSH
50816: LD_INT 17
50818: PPUSH
50819: CALL_OW 113
50823: GO 50761
50825: POP
50826: POP
50827: GO 50675
50829: POP
50830: POP
// enable ;
50831: ENABLE
// end ;
50832: PPOPN 2
50834: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50835: LD_EXP 18
50839: IFFALSE 50889
50841: GO 50843
50843: DISABLE
50844: LD_INT 0
50846: PPUSH
// begin tmp := mpBuildUpTime ;
50847: LD_ADDR_VAR 0 1
50851: PUSH
50852: LD_EXP 18
50856: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50857: LD_INT 35
50859: PPUSH
50860: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50864: LD_ADDR_VAR 0 1
50868: PUSH
50869: LD_VAR 0 1
50873: PUSH
50874: LD_INT 35
50876: MINUS
50877: ST_TO_ADDR
// until not tmp ;
50878: LD_VAR 0 1
50882: NOT
50883: IFFALSE 50857
// EndBuildUp ;
50885: CALL 50468 0 0
// end ;
50889: PPOPN 1
50891: END
// every 0 0$1 trigger mpActive marked mpWin do
50892: LD_INT 100
50894: IFFALSE 50928
50896: GO 50898
50898: DISABLE
// begin if IAmServer then
50899: CALL_OW 518
50903: IFFALSE 50912
// wait ( 0 0$3 ) ;
50905: LD_INT 105
50907: PPUSH
50908: CALL_OW 67
// if Multiplayer then
50912: LD_OWVAR 4
50916: IFFALSE 50924
// YouWinInMultiplayer else
50918: CALL_OW 106
50922: GO 50928
// YouWin ;
50924: CALL_OW 103
// end ;
50928: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50929: LD_INT 0
50931: PPUSH
// result := false ;
50932: LD_ADDR_VAR 0 3
50936: PUSH
50937: LD_INT 0
50939: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50940: LD_VAR 0 1
50944: PUSH
50945: LD_INT 1
50947: DOUBLE
50948: EQUAL
50949: IFTRUE 50971
50951: LD_INT 5
50953: DOUBLE
50954: EQUAL
50955: IFTRUE 50971
50957: LD_INT 6
50959: DOUBLE
50960: EQUAL
50961: IFTRUE 50971
50963: LD_INT 7
50965: DOUBLE
50966: EQUAL
50967: IFTRUE 50971
50969: GO 51044
50971: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50972: LD_ADDR_VAR 0 3
50976: PUSH
50977: LD_INT 22
50979: PUSH
50980: LD_VAR 0 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 21
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 33
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 33
51014: PUSH
51015: LD_INT 5
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PPUSH
51032: CALL_OW 69
51036: PPUSH
51037: CALL 5226 0 1
51041: ST_TO_ADDR
// end ; GameTypeSurvival :
51042: GO 51440
51044: LD_INT 2
51046: DOUBLE
51047: EQUAL
51048: IFTRUE 51052
51050: GO 51182
51052: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51053: LD_ADDR_VAR 0 3
51057: PUSH
51058: LD_INT 22
51060: PUSH
51061: LD_VAR 0 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: LD_INT 30
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 30
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PPUSH
51102: CALL_OW 69
51106: PPUSH
51107: CALL 5226 0 1
51111: IFFALSE 51179
51113: PUSH
51114: LD_INT 22
51116: PUSH
51117: LD_VAR 0 2
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 21
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 33
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 33
51151: PUSH
51152: LD_INT 5
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PPUSH
51169: CALL_OW 69
51173: PPUSH
51174: CALL 5226 0 1
51178: AND
51179: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
51180: GO 51440
51182: LD_INT 8
51184: DOUBLE
51185: EQUAL
51186: IFTRUE 51190
51188: GO 51339
51190: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51191: LD_ADDR_VAR 0 3
51195: PUSH
51196: LD_EXP 39
51200: PUSH
51201: LD_VAR 0 2
51205: ARRAY
51206: PPUSH
51207: CALL_OW 300
51211: IFFALSE 51268
51213: PUSH
51214: LD_INT 22
51216: PUSH
51217: LD_VAR 0 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 30
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 30
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PPUSH
51258: CALL_OW 69
51262: PPUSH
51263: CALL 5226 0 1
51267: AND
51268: IFFALSE 51336
51270: PUSH
51271: LD_INT 22
51273: PUSH
51274: LD_VAR 0 2
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 21
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 33
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 33
51308: PUSH
51309: LD_INT 5
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PPUSH
51326: CALL_OW 69
51330: PPUSH
51331: CALL 5226 0 1
51335: AND
51336: ST_TO_ADDR
// end ; GameTypeKing :
51337: GO 51440
51339: LD_INT 3
51341: DOUBLE
51342: EQUAL
51343: IFTRUE 51347
51345: GO 51439
51347: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51348: LD_ADDR_VAR 0 3
51352: PUSH
51353: LD_INT 22
51355: PUSH
51356: LD_VAR 0 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 21
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 33
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 33
51390: PUSH
51391: LD_INT 5
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PPUSH
51408: CALL_OW 69
51412: PPUSH
51413: CALL 5226 0 1
51417: IFFALSE 51436
51419: PUSH
51420: LD_VAR 0 2
51424: PPUSH
51425: CALL 56109 0 1
51429: PUSH
51430: LD_EXP 33
51434: LESS
51435: AND
51436: ST_TO_ADDR
// end ; end ;
51437: GO 51440
51439: POP
// end ;
51440: LD_VAR 0 3
51444: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51445: LD_INT 100
51447: IFFALSE 51677
51449: GO 51451
51451: DISABLE
51452: LD_INT 0
51454: PPUSH
51455: PPUSH
// begin if Multiplayer then
51456: LD_OWVAR 4
51460: IFFALSE 51468
// SetPlayerSpectator ( ) else
51462: CALL_OW 572
51466: GO 51477
// FogOff ( your_side ) ;
51468: LD_OWVAR 2
51472: PPUSH
51473: CALL_OW 344
// repeat gameIsOn := false ;
51477: LD_ADDR_VAR 0 1
51481: PUSH
51482: LD_INT 0
51484: ST_TO_ADDR
// for i := 1 to 8 do
51485: LD_ADDR_VAR 0 2
51489: PUSH
51490: DOUBLE
51491: LD_INT 1
51493: DEC
51494: ST_TO_ADDR
51495: LD_INT 8
51497: PUSH
51498: FOR_TO
51499: IFFALSE 51629
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51501: LD_EXP 5
51505: PUSH
51506: LD_VAR 0 2
51510: ARRAY
51511: IFFALSE 51524
51513: PUSH
51514: LD_VAR 0 2
51518: PPUSH
51519: CALL_OW 108
51523: AND
51524: IFFALSE 51538
51526: PUSH
51527: LD_VAR 0 2
51531: PUSH
51532: LD_OWVAR 2
51536: NONEQUAL
51537: AND
51538: IFFALSE 51627
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51540: LD_EXP 6
51544: PUSH
51545: LD_VAR 0 2
51549: ARRAY
51550: NOT
51551: IFTRUE 51599
51553: PUSH
51554: LD_EXP 6
51558: PUSH
51559: LD_VAR 0 2
51563: ARRAY
51564: PUSH
51565: LD_EXP 6
51569: PUSH
51570: LD_OWVAR 2
51574: ARRAY
51575: NONEQUAL
51576: IFFALSE 51598
51578: PUSH
51579: LD_OWVAR 2
51583: PPUSH
51584: LD_VAR 0 2
51588: PPUSH
51589: CALL_OW 81
51593: PUSH
51594: LD_INT 1
51596: NONEQUAL
51597: AND
51598: OR
51599: IFFALSE 51627
// if HasPowerByGameType ( mpGameType , i ) then
51601: LD_EXP 1
51605: PPUSH
51606: LD_VAR 0 2
51610: PPUSH
51611: CALL 50929 0 2
51615: IFFALSE 51627
// begin gameIsOn := true ;
51617: LD_ADDR_VAR 0 1
51621: PUSH
51622: LD_INT 1
51624: ST_TO_ADDR
// break ;
51625: GO 51629
// end ;
51627: GO 51498
51629: POP
51630: POP
// wait ( 100 ) ;
51631: LD_INT 100
51633: PPUSH
51634: CALL_OW 67
// until not gameIsOn ;
51638: LD_VAR 0 1
51642: NOT
51643: IFFALSE 51477
// if IAmServer then
51645: CALL_OW 518
51649: IFFALSE 51658
// wait ( 0 0$3 ) ;
51651: LD_INT 105
51653: PPUSH
51654: CALL_OW 67
// if Multiplayer then
51658: LD_OWVAR 4
51662: IFFALSE 51670
// YouLostInMultiplayer else
51664: CALL_OW 107
51668: GO 51677
// YouLost (  ) ;
51670: LD_STRING 
51672: PPUSH
51673: CALL_OW 104
// end ;
51677: PPOPN 2
51679: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51680: LD_EXP 31
51684: IFFALSE 52068
51686: GO 51688
51688: DISABLE
51689: LD_INT 0
51691: PPUSH
51692: PPUSH
51693: PPUSH
51694: PPUSH
51695: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51696: LD_ADDR_VAR 0 5
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 3
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: LD_INT 5
51715: PUSH
51716: LD_INT 6
51718: PUSH
51719: LD_INT 7
51721: PUSH
51722: LD_INT 8
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51735: LD_INT 350
51737: PPUSH
51738: CALL_OW 67
// for i := 1 to 8 do
51742: LD_ADDR_VAR 0 1
51746: PUSH
51747: DOUBLE
51748: LD_INT 1
51750: DEC
51751: ST_TO_ADDR
51752: LD_INT 8
51754: PUSH
51755: FOR_TO
51756: IFFALSE 52038
// begin j := sides [ i ] ;
51758: LD_ADDR_VAR 0 2
51762: PUSH
51763: LD_VAR 0 5
51767: PUSH
51768: LD_VAR 0 1
51772: ARRAY
51773: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51774: LD_EXP 38
51778: PUSH
51779: LD_VAR 0 2
51783: ARRAY
51784: PPUSH
51785: CALL 5226 0 1
51789: IFFALSE 51802
51791: PUSH
51792: LD_VAR 0 2
51796: PPUSH
51797: CALL_OW 108
51801: AND
51802: IFFALSE 51820
51804: PUSH
51805: LD_EXP 1
51809: PPUSH
51810: LD_VAR 0 2
51814: PPUSH
51815: CALL 50929 0 2
51819: AND
51820: IFFALSE 52036
// begin wait ( mpRespawn div 2 ) ;
51822: LD_EXP 31
51826: PUSH
51827: LD_INT 2
51829: DIV
51830: PPUSH
51831: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51835: LD_ADDR_VAR 0 3
51839: PUSH
51840: LD_INT 22
51842: PUSH
51843: LD_VAR 0 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 50
51854: PUSH
51855: EMPTY
51856: LIST
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: LD_INT 30
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 30
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: PPUSH
51891: CALL_OW 69
51895: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51896: LD_VAR 0 3
51900: NOT
51901: IFTRUE 51915
51903: PUSH
51904: LD_VAR 0 2
51908: PPUSH
51909: CALL_OW 108
51913: NOT
51914: OR
51915: IFTRUE 51934
51917: PUSH
51918: LD_EXP 1
51922: PPUSH
51923: LD_VAR 0 2
51927: PPUSH
51928: CALL 50929 0 2
51932: NOT
51933: OR
51934: IFFALSE 51938
// continue ;
51936: GO 51755
// spawn := tmp [ 1 ] ;
51938: LD_ADDR_VAR 0 4
51942: PUSH
51943: LD_VAR 0 3
51947: PUSH
51948: LD_INT 1
51950: ARRAY
51951: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51952: LD_EXP 38
51956: PUSH
51957: LD_VAR 0 2
51961: ARRAY
51962: PUSH
51963: LD_INT 1
51965: ARRAY
51966: PPUSH
51967: LD_VAR 0 4
51971: PPUSH
51972: CALL_OW 250
51976: PPUSH
51977: LD_VAR 0 4
51981: PPUSH
51982: CALL_OW 251
51986: PPUSH
51987: LD_INT 32
51989: PPUSH
51990: LD_INT 1
51992: PPUSH
51993: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51997: LD_ADDR_EXP 38
52001: PUSH
52002: LD_EXP 38
52006: PPUSH
52007: LD_VAR 0 2
52011: PPUSH
52012: LD_EXP 38
52016: PUSH
52017: LD_VAR 0 2
52021: ARRAY
52022: PPUSH
52023: LD_INT 1
52025: PPUSH
52026: CALL_OW 3
52030: PPUSH
52031: CALL_OW 1
52035: ST_TO_ADDR
// end ; end ;
52036: GO 51755
52038: POP
52039: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52040: LD_ADDR_VAR 0 5
52044: PUSH
52045: LD_VAR 0 5
52049: PPUSH
52050: LD_INT 1
52052: PPUSH
52053: LD_INT 8
52055: PPUSH
52056: LD_INT 1
52058: PPUSH
52059: CALL 7552 0 4
52063: ST_TO_ADDR
// until false ;
52064: LD_INT 0
52066: IFFALSE 51735
// end ;
52068: PPOPN 5
52070: END
// every 0 0$1 marked mpActive do
52071: GO 52073
52073: DISABLE
// begin enable ;
52074: ENABLE
// if not mpDisplayStrings then
52075: LD_EXP 36
52079: NOT
52080: IFFALSE 52091
// begin display_strings := [ ] ;
52082: LD_ADDR_OWVAR 47
52086: PUSH
52087: EMPTY
52088: ST_TO_ADDR
// exit ;
52089: GO 52101
// end ; display_strings := mpDisplayStrings ;
52091: LD_ADDR_OWVAR 47
52095: PUSH
52096: LD_EXP 36
52100: ST_TO_ADDR
// end ; end_of_file
52101: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52102: LD_INT 0
52104: PPUSH
52105: PPUSH
52106: PPUSH
52107: PPUSH
52108: PPUSH
52109: PPUSH
52110: PPUSH
52111: PPUSH
52112: PPUSH
// if GetType ( un ) = unit_vehicle then
52113: LD_VAR 0 1
52117: PPUSH
52118: CALL_OW 247
52122: PUSH
52123: LD_INT 2
52125: EQUAL
52126: IFFALSE 52130
// exit ;
52128: GO 52903
// side := GetSide ( un ) ;
52130: LD_ADDR_VAR 0 9
52134: PUSH
52135: LD_VAR 0 1
52139: PPUSH
52140: CALL_OW 255
52144: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
52145: LD_EXP 1
52149: PUSH
52150: LD_INT 2
52152: PUSH
52153: LD_INT 8
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: IN
52160: IFFALSE 52254
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52162: LD_VAR 0 1
52166: PPUSH
52167: CALL_OW 266
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: IN
52182: IFFALSE 52254
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52184: LD_ADDR_VAR 0 3
52188: PUSH
52189: LD_INT 22
52191: PUSH
52192: LD_VAR 0 9
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: PUSH
52204: LD_INT 21
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 33
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PPUSH
52233: CALL_OW 69
52237: PUSH
52238: FOR_IN
52239: IFFALSE 52252
// KillUnit ( i ) ;
52241: LD_VAR 0 3
52245: PPUSH
52246: CALL_OW 66
52250: GO 52238
52252: POP
52253: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
52254: LD_EXP 1
52258: PUSH
52259: LD_INT 8
52261: EQUAL
52262: IFFALSE 52346
// if un in mpCommanders then
52264: LD_VAR 0 1
52268: PUSH
52269: LD_EXP 39
52273: IN
52274: IFFALSE 52346
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52276: LD_ADDR_VAR 0 3
52280: PUSH
52281: LD_INT 22
52283: PUSH
52284: LD_VAR 0 9
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 21
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 33
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PPUSH
52325: CALL_OW 69
52329: PUSH
52330: FOR_IN
52331: IFFALSE 52344
// KillUnit ( i ) ;
52333: LD_VAR 0 3
52337: PPUSH
52338: CALL_OW 66
52342: GO 52330
52344: POP
52345: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52346: LD_VAR 0 1
52350: PPUSH
52351: CALL_OW 257
52355: PUSH
52356: LD_INT 12
52358: PUSH
52359: LD_INT 17
52361: PUSH
52362: LD_INT 15
52364: PUSH
52365: LD_INT 16
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: IN
52374: IFTRUE 52391
52376: PUSH
52377: LD_VAR 0 1
52381: PPUSH
52382: CALL_OW 263
52386: PUSH
52387: LD_INT 5
52389: EQUAL
52390: OR
52391: IFFALSE 52628
// begin tag := 0 ;
52393: LD_ADDR_VAR 0 5
52397: PUSH
52398: LD_INT 0
52400: ST_TO_ADDR
// for i := 1 to 8 do
52401: LD_ADDR_VAR 0 3
52405: PUSH
52406: DOUBLE
52407: LD_INT 1
52409: DEC
52410: ST_TO_ADDR
52411: LD_INT 8
52413: PUSH
52414: FOR_TO
52415: IFFALSE 52449
// if un in mpApePosIndex [ i ] then
52417: LD_VAR 0 1
52421: PUSH
52422: LD_EXP 30
52426: PUSH
52427: LD_VAR 0 3
52431: ARRAY
52432: IN
52433: IFFALSE 52447
// begin tag := i ;
52435: LD_ADDR_VAR 0 5
52439: PUSH
52440: LD_VAR 0 3
52444: ST_TO_ADDR
// break ;
52445: GO 52449
// end ;
52447: GO 52414
52449: POP
52450: POP
// if not tag then
52451: LD_VAR 0 5
52455: NOT
52456: IFFALSE 52460
// exit ;
52458: GO 52903
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52460: LD_ADDR_VAR 0 7
52464: PUSH
52465: LD_EXP 29
52469: PUSH
52470: LD_EXP 5
52474: PUSH
52475: LD_VAR 0 5
52479: ARRAY
52480: ARRAY
52481: ST_TO_ADDR
// if not area then
52482: LD_VAR 0 7
52486: NOT
52487: IFFALSE 52491
// exit ;
52489: GO 52903
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52491: LD_INT 14700
52493: PUSH
52494: LD_VAR 0 1
52498: PUSH
52499: LD_INT 5
52501: MOD
52502: PUSH
52503: LD_INT 1
52505: PLUS
52506: PUSH
52507: LD_INT 700
52509: MUL
52510: PLUS
52511: PPUSH
52512: CALL_OW 67
// repeat wait ( 10 ) ;
52516: LD_INT 10
52518: PPUSH
52519: CALL_OW 67
// until not mpBlockRespThread ;
52523: LD_EXP 45
52527: NOT
52528: IFFALSE 52516
// mpBlockRespThread := true ;
52530: LD_ADDR_EXP 45
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52538: LD_INT 0
52540: PPUSH
52541: CALL 37329 0 1
// ape := CreateHuman ;
52545: LD_ADDR_VAR 0 4
52549: PUSH
52550: CALL_OW 44
52554: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52555: LD_ADDR_EXP 30
52559: PUSH
52560: LD_EXP 30
52564: PPUSH
52565: LD_VAR 0 5
52569: PPUSH
52570: LD_EXP 30
52574: PUSH
52575: LD_VAR 0 5
52579: ARRAY
52580: PPUSH
52581: LD_VAR 0 4
52585: PPUSH
52586: CALL 41202 0 2
52590: PPUSH
52591: CALL_OW 1
52595: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52596: LD_VAR 0 4
52600: PPUSH
52601: LD_VAR 0 7
52605: PPUSH
52606: LD_INT 0
52608: PPUSH
52609: CALL_OW 49
// wait ( 10 ) ;
52613: LD_INT 10
52615: PPUSH
52616: CALL_OW 67
// mpBlockRespThread := false ;
52620: LD_ADDR_EXP 45
52624: PUSH
52625: LD_INT 0
52627: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52628: LD_VAR 0 1
52632: PPUSH
52633: CALL_OW 247
52637: PUSH
52638: LD_INT 1
52640: EQUAL
52641: IFFALSE 52658
52643: PUSH
52644: LD_VAR 0 1
52648: PPUSH
52649: CALL_OW 248
52653: PUSH
52654: LD_INT 0
52656: GREATER
52657: AND
52658: IFFALSE 52903
// begin if not mpRespawn then
52660: LD_EXP 31
52664: NOT
52665: IFFALSE 52669
// exit ;
52667: GO 52903
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52669: LD_VAR 0 9
52673: PPUSH
52674: CALL_OW 108
52678: NOT
52679: IFFALSE 52698
52681: PUSH
52682: LD_EXP 1
52686: PPUSH
52687: LD_VAR 0 9
52691: PPUSH
52692: CALL 50929 0 2
52696: NOT
52697: AND
52698: IFFALSE 52702
// exit ;
52700: GO 52903
// side := GetSide ( un ) ;
52702: LD_ADDR_VAR 0 9
52706: PUSH
52707: LD_VAR 0 1
52711: PPUSH
52712: CALL_OW 255
52716: ST_TO_ADDR
// nation := GetNation ( un ) ;
52717: LD_ADDR_VAR 0 8
52721: PUSH
52722: LD_VAR 0 1
52726: PPUSH
52727: CALL_OW 248
52731: ST_TO_ADDR
// class := GetClass ( un ) ;
52732: LD_ADDR_VAR 0 6
52736: PUSH
52737: LD_VAR 0 1
52741: PPUSH
52742: CALL_OW 257
52746: ST_TO_ADDR
// if class > 4 then
52747: LD_VAR 0 6
52751: PUSH
52752: LD_INT 4
52754: GREATER
52755: IFFALSE 52765
// class := 1 ;
52757: LD_ADDR_VAR 0 6
52761: PUSH
52762: LD_INT 1
52764: ST_TO_ADDR
// repeat wait ( 10 ) ;
52765: LD_INT 10
52767: PPUSH
52768: CALL_OW 67
// until not mpBlockRespThread ;
52772: LD_EXP 45
52776: NOT
52777: IFFALSE 52765
// mpBlockRespThread := true ;
52779: LD_ADDR_EXP 45
52783: PUSH
52784: LD_INT 1
52786: ST_TO_ADDR
// uc_side := side ;
52787: LD_ADDR_OWVAR 20
52791: PUSH
52792: LD_VAR 0 9
52796: ST_TO_ADDR
// uc_nation := nation ;
52797: LD_ADDR_OWVAR 21
52801: PUSH
52802: LD_VAR 0 8
52806: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52807: LD_INT 0
52809: PPUSH
52810: LD_VAR 0 6
52814: PPUSH
52815: LD_INT 2
52817: PPUSH
52818: CALL_OW 380
// un := CreateHuman ;
52822: LD_ADDR_VAR 0 1
52826: PUSH
52827: CALL_OW 44
52831: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52832: LD_ADDR_EXP 38
52836: PUSH
52837: LD_EXP 38
52841: PPUSH
52842: LD_VAR 0 9
52846: PPUSH
52847: LD_EXP 38
52851: PUSH
52852: LD_VAR 0 9
52856: ARRAY
52857: PPUSH
52858: LD_EXP 38
52862: PUSH
52863: LD_VAR 0 9
52867: ARRAY
52868: PUSH
52869: LD_INT 1
52871: PLUS
52872: PPUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: CALL_OW 1
52882: PPUSH
52883: CALL_OW 1
52887: ST_TO_ADDR
// wait ( 10 ) ;
52888: LD_INT 10
52890: PPUSH
52891: CALL_OW 67
// mpBlockRespThread := false ;
52895: LD_ADDR_EXP 45
52899: PUSH
52900: LD_INT 0
52902: ST_TO_ADDR
// end ; end ;
52903: LD_VAR 0 2
52907: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52908: LD_INT 0
52910: PPUSH
52911: PPUSH
52912: PPUSH
52913: PPUSH
52914: PPUSH
// tag := 0 ;
52915: LD_ADDR_VAR 0 5
52919: PUSH
52920: LD_INT 0
52922: ST_TO_ADDR
// for i := 1 to 8 do
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: DOUBLE
52929: LD_INT 1
52931: DEC
52932: ST_TO_ADDR
52933: LD_INT 8
52935: PUSH
52936: FOR_TO
52937: IFFALSE 52971
// if un in mpApePosIndex [ i ] then
52939: LD_VAR 0 2
52943: PUSH
52944: LD_EXP 30
52948: PUSH
52949: LD_VAR 0 4
52953: ARRAY
52954: IN
52955: IFFALSE 52969
// begin tag := i ;
52957: LD_ADDR_VAR 0 5
52961: PUSH
52962: LD_VAR 0 4
52966: ST_TO_ADDR
// break ;
52967: GO 52971
// end ;
52969: GO 52936
52971: POP
52972: POP
// if not tag then
52973: LD_VAR 0 5
52977: NOT
52978: IFFALSE 52982
// exit ;
52980: GO 53150
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52982: LD_ADDR_VAR 0 6
52986: PUSH
52987: LD_EXP 29
52991: PUSH
52992: LD_EXP 5
52996: PUSH
52997: LD_VAR 0 5
53001: ARRAY
53002: ARRAY
53003: ST_TO_ADDR
// if not area then
53004: LD_VAR 0 6
53008: NOT
53009: IFFALSE 53013
// exit ;
53011: GO 53150
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53013: LD_INT 14700
53015: PUSH
53016: LD_VAR 0 2
53020: PUSH
53021: LD_INT 5
53023: MOD
53024: PUSH
53025: LD_INT 1
53027: PLUS
53028: PUSH
53029: LD_INT 700
53031: MUL
53032: PLUS
53033: PPUSH
53034: CALL_OW 67
// repeat wait ( 10 ) ;
53038: LD_INT 10
53040: PPUSH
53041: CALL_OW 67
// until not mpBlockRespThread ;
53045: LD_EXP 45
53049: NOT
53050: IFFALSE 53038
// mpBlockRespThread := true ;
53052: LD_ADDR_EXP 45
53056: PUSH
53057: LD_INT 1
53059: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53060: LD_INT 0
53062: PPUSH
53063: CALL 37329 0 1
// ape := CreateHuman ;
53067: LD_ADDR_VAR 0 7
53071: PUSH
53072: CALL_OW 44
53076: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53077: LD_ADDR_EXP 30
53081: PUSH
53082: LD_EXP 30
53086: PPUSH
53087: LD_VAR 0 5
53091: PPUSH
53092: LD_EXP 30
53096: PUSH
53097: LD_VAR 0 5
53101: ARRAY
53102: PPUSH
53103: LD_VAR 0 7
53107: PPUSH
53108: CALL 41202 0 2
53112: PPUSH
53113: CALL_OW 1
53117: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53118: LD_VAR 0 7
53122: PPUSH
53123: LD_VAR 0 6
53127: PPUSH
53128: LD_INT 0
53130: PPUSH
53131: CALL_OW 49
// wait ( 10 ) ;
53135: LD_INT 10
53137: PPUSH
53138: CALL_OW 67
// mpBlockRespThread := false ;
53142: LD_ADDR_EXP 45
53146: PUSH
53147: LD_INT 0
53149: ST_TO_ADDR
// end ;
53150: LD_VAR 0 3
53154: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53155: LD_INT 0
53157: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53158: LD_VAR 0 1
53162: PPUSH
53163: CALL_OW 266
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: IN
53178: IFFALSE 53203
// SetBName ( building , @ & GetSide ( building ) ) ;
53180: LD_VAR 0 1
53184: PPUSH
53185: LD_STRING @
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 255
53197: STR
53198: PPUSH
53199: CALL_OW 500
// end ;
53203: LD_VAR 0 2
53207: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53208: LD_INT 0
53210: PPUSH
53211: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53212: LD_EXP 1
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 8
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: IN
53227: IFFALSE 53251
53229: PUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 266
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: IN
53250: AND
53251: IFFALSE 53330
// begin SetSide ( building , oldSide ) ;
53253: LD_VAR 0 1
53257: PPUSH
53258: LD_VAR 0 2
53262: PPUSH
53263: CALL_OW 235
// KillUnit ( building ) ;
53267: LD_VAR 0 1
53271: PPUSH
53272: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53276: LD_ADDR_VAR 0 5
53280: PUSH
53281: LD_INT 22
53283: PUSH
53284: LD_VAR 0 2
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 21
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PPUSH
53307: CALL_OW 69
53311: PUSH
53312: FOR_IN
53313: IFFALSE 53326
// KillUnit ( i ) ;
53315: LD_VAR 0 5
53319: PPUSH
53320: CALL_OW 66
53324: GO 53312
53326: POP
53327: POP
// exit ;
53328: GO 53375
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53330: LD_VAR 0 1
53334: PPUSH
53335: CALL_OW 266
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: IN
53350: IFFALSE 53375
// SetBName ( building , @ & GetSide ( building ) ) ;
53352: LD_VAR 0 1
53356: PPUSH
53357: LD_STRING @
53359: PUSH
53360: LD_VAR 0 1
53364: PPUSH
53365: CALL_OW 255
53369: STR
53370: PPUSH
53371: CALL_OW 500
// end ;
53375: LD_VAR 0 4
53379: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53380: LD_INT 0
53382: PPUSH
53383: PPUSH
53384: PPUSH
// if mpGameType <> GameTypeFamine then
53385: LD_EXP 1
53389: PUSH
53390: LD_INT 5
53392: NONEQUAL
53393: IFFALSE 53397
// exit ;
53395: GO 53631
// for i := 1 to mpGlobalOilDeposits do
53397: LD_ADDR_VAR 0 6
53401: PUSH
53402: DOUBLE
53403: LD_INT 1
53405: DEC
53406: ST_TO_ADDR
53407: LD_EXP 40
53411: PUSH
53412: FOR_TO
53413: IFFALSE 53629
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53415: LD_EXP 40
53419: PUSH
53420: LD_VAR 0 6
53424: ARRAY
53425: PUSH
53426: LD_INT 1
53428: ARRAY
53429: PPUSH
53430: LD_EXP 40
53434: PUSH
53435: LD_VAR 0 6
53439: ARRAY
53440: PUSH
53441: LD_INT 2
53443: ARRAY
53444: PPUSH
53445: CALL_OW 428
53449: PUSH
53450: LD_VAR 0 1
53454: EQUAL
53455: IFFALSE 53627
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53457: LD_ADDR_VAR 0 7
53461: PUSH
53462: LD_EXP 40
53466: PUSH
53467: LD_VAR 0 6
53471: ARRAY
53472: PUSH
53473: LD_INT 3
53475: ARRAY
53476: ST_TO_ADDR
// value := value - amount ;
53477: LD_ADDR_VAR 0 7
53481: PUSH
53482: LD_VAR 0 7
53486: PUSH
53487: LD_VAR 0 4
53491: MINUS
53492: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53493: LD_ADDR_EXP 40
53497: PUSH
53498: LD_EXP 40
53502: PPUSH
53503: LD_VAR 0 6
53507: PPUSH
53508: LD_EXP 40
53512: PUSH
53513: LD_VAR 0 6
53517: ARRAY
53518: PPUSH
53519: LD_INT 3
53521: PPUSH
53522: LD_VAR 0 7
53526: PPUSH
53527: CALL_OW 1
53531: PPUSH
53532: CALL_OW 1
53536: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53537: LD_VAR 0 2
53541: PUSH
53542: LD_OWVAR 2
53546: PUSH
53547: LD_INT 9
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: IN
53554: IFFALSE 53570
// SetUnitDisplayNumber ( building , value ) ;
53556: LD_VAR 0 1
53560: PPUSH
53561: LD_VAR 0 7
53565: PPUSH
53566: CALL_OW 505
// if value <= 0 then
53570: LD_VAR 0 7
53574: PUSH
53575: LD_INT 0
53577: LESSEQUAL
53578: IFFALSE 53627
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53580: LD_EXP 40
53584: PUSH
53585: LD_VAR 0 6
53589: ARRAY
53590: PUSH
53591: LD_INT 1
53593: ARRAY
53594: PPUSH
53595: LD_EXP 40
53599: PUSH
53600: LD_VAR 0 6
53604: ARRAY
53605: PUSH
53606: LD_INT 2
53608: ARRAY
53609: PPUSH
53610: CALL_OW 63
// KillUnit ( building ) ;
53614: LD_VAR 0 1
53618: PPUSH
53619: CALL_OW 66
// exit ;
53623: POP
53624: POP
53625: GO 53631
// end ; end ; end ;
53627: GO 53412
53629: POP
53630: POP
// end ;
53631: LD_VAR 0 5
53635: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53636: LD_INT 0
53638: PPUSH
53639: PPUSH
53640: PPUSH
// if mpGameType <> GameTypeFamine then
53641: LD_EXP 1
53645: PUSH
53646: LD_INT 5
53648: NONEQUAL
53649: IFFALSE 53653
// exit ;
53651: GO 53887
// for i := 1 to mpGlobalSibDeposits do
53653: LD_ADDR_VAR 0 6
53657: PUSH
53658: DOUBLE
53659: LD_INT 1
53661: DEC
53662: ST_TO_ADDR
53663: LD_EXP 41
53667: PUSH
53668: FOR_TO
53669: IFFALSE 53885
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53671: LD_EXP 41
53675: PUSH
53676: LD_VAR 0 6
53680: ARRAY
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: PPUSH
53686: LD_EXP 41
53690: PUSH
53691: LD_VAR 0 6
53695: ARRAY
53696: PUSH
53697: LD_INT 2
53699: ARRAY
53700: PPUSH
53701: CALL_OW 428
53705: PUSH
53706: LD_VAR 0 1
53710: EQUAL
53711: IFFALSE 53883
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53713: LD_ADDR_VAR 0 7
53717: PUSH
53718: LD_EXP 41
53722: PUSH
53723: LD_VAR 0 6
53727: ARRAY
53728: PUSH
53729: LD_INT 3
53731: ARRAY
53732: ST_TO_ADDR
// value := value - amount ;
53733: LD_ADDR_VAR 0 7
53737: PUSH
53738: LD_VAR 0 7
53742: PUSH
53743: LD_VAR 0 4
53747: MINUS
53748: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53749: LD_ADDR_EXP 41
53753: PUSH
53754: LD_EXP 41
53758: PPUSH
53759: LD_VAR 0 6
53763: PPUSH
53764: LD_EXP 41
53768: PUSH
53769: LD_VAR 0 6
53773: ARRAY
53774: PPUSH
53775: LD_INT 3
53777: PPUSH
53778: LD_VAR 0 7
53782: PPUSH
53783: CALL_OW 1
53787: PPUSH
53788: CALL_OW 1
53792: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53793: LD_VAR 0 2
53797: PUSH
53798: LD_OWVAR 2
53802: PUSH
53803: LD_INT 9
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: IN
53810: IFFALSE 53826
// SetUnitDisplayNumber ( building , value ) ;
53812: LD_VAR 0 1
53816: PPUSH
53817: LD_VAR 0 7
53821: PPUSH
53822: CALL_OW 505
// if value <= 0 then
53826: LD_VAR 0 7
53830: PUSH
53831: LD_INT 0
53833: LESSEQUAL
53834: IFFALSE 53883
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53836: LD_EXP 41
53840: PUSH
53841: LD_VAR 0 6
53845: ARRAY
53846: PUSH
53847: LD_INT 1
53849: ARRAY
53850: PPUSH
53851: LD_EXP 41
53855: PUSH
53856: LD_VAR 0 6
53860: ARRAY
53861: PUSH
53862: LD_INT 2
53864: ARRAY
53865: PPUSH
53866: CALL_OW 63
// KillUnit ( building ) ;
53870: LD_VAR 0 1
53874: PPUSH
53875: CALL_OW 66
// exit ;
53879: POP
53880: POP
53881: GO 53887
// end ; end ; end ;
53883: GO 53668
53885: POP
53886: POP
// end ;
53887: LD_VAR 0 5
53891: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53892: LD_INT 0
53894: PPUSH
53895: PPUSH
// side := GetSide ( factory ) ;
53896: LD_ADDR_VAR 0 7
53900: PUSH
53901: LD_VAR 0 1
53905: PPUSH
53906: CALL_OW 255
53910: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53911: LD_VAR 0 5
53915: PUSH
53916: LD_INT 81
53918: EQUAL
53919: IFFALSE 53957
53921: PUSH
53922: LD_INT 22
53924: PUSH
53925: LD_VAR 0 7
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 34
53936: PUSH
53937: LD_INT 81
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PPUSH
53948: CALL_OW 69
53952: PUSH
53953: LD_INT 0
53955: GREATER
53956: AND
53957: IFFALSE 53990
// begin ComCancel ( factory ) ;
53959: LD_VAR 0 1
53963: PPUSH
53964: CALL_OW 127
// if side = your_side then
53968: LD_VAR 0 7
53972: PUSH
53973: LD_OWVAR 2
53977: EQUAL
53978: IFFALSE 53990
// HintSpec ( VehLimit , 2 ) ;
53980: LD_STRING VehLimit
53982: PPUSH
53983: LD_INT 2
53985: PPUSH
53986: CALL_OW 338
// end ; end ;
53990: LD_VAR 0 6
53994: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53995: LD_INT 0
53997: PPUSH
53998: PPUSH
53999: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL_OW 264
54009: PUSH
54010: LD_INT 81
54012: EQUAL
54013: IFFALSE 54030
54015: PUSH
54016: LD_VAR 0 1
54020: PPUSH
54021: CALL_OW 263
54025: PUSH
54026: LD_INT 1
54028: EQUAL
54029: AND
54030: IFFALSE 54310
// begin for i := 1 to Count ( minersList ) do
54032: LD_ADDR_VAR 0 6
54036: PUSH
54037: DOUBLE
54038: LD_INT 1
54040: DEC
54041: ST_TO_ADDR
54042: LD_EXP 56
54046: PPUSH
54047: CALL 5226 0 1
54051: PUSH
54052: FOR_TO
54053: IFFALSE 54171
// begin if minersList [ i ] = oldId then
54055: LD_EXP 56
54059: PUSH
54060: LD_VAR 0 6
54064: ARRAY
54065: PUSH
54066: LD_VAR 0 2
54070: EQUAL
54071: IFFALSE 54169
// begin for j := 1 to minerMinesList [ i ] do
54073: LD_ADDR_VAR 0 7
54077: PUSH
54078: DOUBLE
54079: LD_INT 1
54081: DEC
54082: ST_TO_ADDR
54083: LD_EXP 57
54087: PUSH
54088: LD_VAR 0 6
54092: ARRAY
54093: PUSH
54094: FOR_TO
54095: IFFALSE 54145
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54097: LD_EXP 57
54101: PUSH
54102: LD_VAR 0 6
54106: ARRAY
54107: PUSH
54108: LD_VAR 0 7
54112: ARRAY
54113: PUSH
54114: LD_INT 1
54116: ARRAY
54117: PPUSH
54118: LD_EXP 57
54122: PUSH
54123: LD_VAR 0 6
54127: ARRAY
54128: PUSH
54129: LD_VAR 0 7
54133: ARRAY
54134: PUSH
54135: LD_INT 2
54137: ARRAY
54138: PPUSH
54139: CALL_OW 612
54143: GO 54094
54145: POP
54146: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54147: LD_ADDR_EXP 57
54151: PUSH
54152: LD_EXP 57
54156: PPUSH
54157: LD_VAR 0 6
54161: PPUSH
54162: CALL_OW 3
54166: ST_TO_ADDR
// break ;
54167: GO 54171
// end ; end ;
54169: GO 54052
54171: POP
54172: POP
// minersList := minersList diff oldId ;
54173: LD_ADDR_EXP 56
54177: PUSH
54178: LD_EXP 56
54182: PUSH
54183: LD_VAR 0 2
54187: DIFF
54188: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54189: LD_INT 22
54191: PUSH
54192: LD_VAR 0 4
54196: PPUSH
54197: CALL_OW 255
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 34
54208: PUSH
54209: LD_INT 81
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PPUSH
54220: CALL_OW 69
54224: PUSH
54225: LD_INT 1
54227: GREATER
54228: IFFALSE 54255
// begin ComExit ( unit ) ;
54230: LD_VAR 0 4
54234: PPUSH
54235: CALL 41600 0 1
// SetSide ( newId , oldSide ) ;
54239: LD_VAR 0 1
54243: PPUSH
54244: LD_VAR 0 3
54248: PPUSH
54249: CALL_OW 235
// exit ;
54253: GO 54310
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54255: LD_ADDR_EXP 56
54259: PUSH
54260: LD_EXP 56
54264: PPUSH
54265: LD_EXP 56
54269: PUSH
54270: LD_INT 1
54272: PLUS
54273: PPUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: CALL_OW 1
54283: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54284: LD_ADDR_EXP 57
54288: PUSH
54289: LD_EXP 57
54293: PPUSH
54294: LD_EXP 57
54298: PUSH
54299: LD_INT 1
54301: PLUS
54302: PPUSH
54303: EMPTY
54304: PPUSH
54305: CALL_OW 1
54309: ST_TO_ADDR
// end ; end ; end_of_file
54310: LD_VAR 0 5
54314: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54315: LD_EXP 37
54319: IFFALSE 54327
54321: PUSH
54322: CALL 54537 0 0
54326: AND
54327: IFFALSE 54335
54329: PUSH
54330: LD_OWVAR 4
54334: AND
54335: IFFALSE 54534
54337: GO 54339
54339: DISABLE
54340: LD_INT 0
54342: PPUSH
54343: PPUSH
// begin canWin := false ;
54344: LD_ADDR_VAR 0 2
54348: PUSH
54349: LD_INT 0
54351: ST_TO_ADDR
// if not HasPower ( your_side ) then
54352: LD_OWVAR 2
54356: PPUSH
54357: CALL 54579 0 1
54361: NOT
54362: IFFALSE 54373
// begin Multiplayer_Loose_Message ;
54364: CALL_OW 521
// enable ( mpLose ) ;
54368: LD_INT 102
54370: ENABLE_MARKED
// end else
54371: GO 54534
// begin canWin := true ;
54373: LD_ADDR_VAR 0 2
54377: PUSH
54378: LD_INT 1
54380: ST_TO_ADDR
// for i := 1 to 8 do
54381: LD_ADDR_VAR 0 1
54385: PUSH
54386: DOUBLE
54387: LD_INT 1
54389: DEC
54390: ST_TO_ADDR
54391: LD_INT 8
54393: PUSH
54394: FOR_TO
54395: IFFALSE 54520
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54397: LD_EXP 5
54401: PUSH
54402: LD_VAR 0 1
54406: ARRAY
54407: IFFALSE 54420
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 108
54419: AND
54420: IFFALSE 54434
54422: PUSH
54423: LD_VAR 0 1
54427: PUSH
54428: LD_OWVAR 2
54432: NONEQUAL
54433: AND
54434: IFFALSE 54518
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54436: LD_EXP 6
54440: PUSH
54441: LD_VAR 0 1
54445: ARRAY
54446: NOT
54447: IFTRUE 54495
54449: PUSH
54450: LD_EXP 6
54454: PUSH
54455: LD_VAR 0 1
54459: ARRAY
54460: PUSH
54461: LD_EXP 6
54465: PUSH
54466: LD_OWVAR 2
54470: ARRAY
54471: NONEQUAL
54472: IFFALSE 54494
54474: PUSH
54475: LD_OWVAR 2
54479: PPUSH
54480: LD_VAR 0 1
54484: PPUSH
54485: CALL_OW 81
54489: PUSH
54490: LD_INT 1
54492: NONEQUAL
54493: AND
54494: OR
54495: IFFALSE 54518
// if HasPower ( i ) then
54497: LD_VAR 0 1
54501: PPUSH
54502: CALL 54579 0 1
54506: IFFALSE 54518
// begin canWin := false ;
54508: LD_ADDR_VAR 0 2
54512: PUSH
54513: LD_INT 0
54515: ST_TO_ADDR
// break ;
54516: GO 54520
// end ;
54518: GO 54394
54520: POP
54521: POP
// if canWin then
54522: LD_VAR 0 2
54526: IFFALSE 54533
// enable ( mpWin ) else
54528: LD_INT 101
54530: ENABLE_MARKED
54531: GO 54534
// enable ;
54533: ENABLE
// end ; end ;
54534: PPOPN 2
54536: END
// function CanWinLoose ; begin
54537: LD_INT 0
54539: PPUSH
// result := true ;
54540: LD_ADDR_VAR 0 1
54544: PUSH
54545: LD_INT 1
54547: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54548: CALL_OW 531
54552: IFFALSE 54564
54554: PUSH
54555: CALL_OW 519
54559: PUSH
54560: LD_INT 1
54562: GREATER
54563: AND
54564: IFFALSE 54574
// result := false ;
54566: LD_ADDR_VAR 0 1
54570: PUSH
54571: LD_INT 0
54573: ST_TO_ADDR
// end ;
54574: LD_VAR 0 1
54578: RET
// function HasPower ( i ) ; begin
54579: LD_INT 0
54581: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54582: LD_ADDR_VAR 0 2
54586: PUSH
54587: LD_INT 22
54589: PUSH
54590: LD_VAR 0 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 21
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 33
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 33
54624: PUSH
54625: LD_INT 5
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PPUSH
54642: CALL_OW 69
54646: ST_TO_ADDR
// end ; end_of_file
54647: LD_VAR 0 2
54651: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54652: LD_EXP 37
54656: IFFALSE 54699
54658: GO 54660
54660: DISABLE
54661: LD_INT 0
54663: PPUSH
// begin for i := 1 to 8 do
54664: LD_ADDR_VAR 0 1
54668: PUSH
54669: DOUBLE
54670: LD_INT 1
54672: DEC
54673: ST_TO_ADDR
54674: LD_INT 8
54676: PUSH
54677: FOR_TO
54678: IFFALSE 54697
// SetRestrict ( b_depot , i , state_disabled ) ;
54680: LD_INT 0
54682: PPUSH
54683: LD_VAR 0 1
54687: PPUSH
54688: LD_INT 0
54690: PPUSH
54691: CALL_OW 324
54695: GO 54677
54697: POP
54698: POP
// end ;
54699: PPOPN 1
54701: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54702: LD_EXP 37
54706: IFFALSE 54714
54708: PUSH
54709: CALL 54924 0 0
54713: AND
54714: IFFALSE 54722
54716: PUSH
54717: LD_OWVAR 4
54721: AND
54722: IFFALSE 54921
54724: GO 54726
54726: DISABLE
54727: LD_INT 0
54729: PPUSH
54730: PPUSH
// begin canWin := false ;
54731: LD_ADDR_VAR 0 2
54735: PUSH
54736: LD_INT 0
54738: ST_TO_ADDR
// if not HasPower ( your_side ) then
54739: LD_OWVAR 2
54743: PPUSH
54744: CALL 54966 0 1
54748: NOT
54749: IFFALSE 54760
// begin Multiplayer_Loose_Message ;
54751: CALL_OW 521
// enable ( mpLose ) ;
54755: LD_INT 102
54757: ENABLE_MARKED
// end else
54758: GO 54921
// begin canWin := true ;
54760: LD_ADDR_VAR 0 2
54764: PUSH
54765: LD_INT 1
54767: ST_TO_ADDR
// for i := 1 to 8 do
54768: LD_ADDR_VAR 0 1
54772: PUSH
54773: DOUBLE
54774: LD_INT 1
54776: DEC
54777: ST_TO_ADDR
54778: LD_INT 8
54780: PUSH
54781: FOR_TO
54782: IFFALSE 54907
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54784: LD_EXP 5
54788: PUSH
54789: LD_VAR 0 1
54793: ARRAY
54794: IFFALSE 54807
54796: PUSH
54797: LD_VAR 0 1
54801: PPUSH
54802: CALL_OW 108
54806: AND
54807: IFFALSE 54821
54809: PUSH
54810: LD_VAR 0 1
54814: PUSH
54815: LD_OWVAR 2
54819: NONEQUAL
54820: AND
54821: IFFALSE 54905
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54823: LD_EXP 6
54827: PUSH
54828: LD_VAR 0 1
54832: ARRAY
54833: NOT
54834: IFTRUE 54882
54836: PUSH
54837: LD_EXP 6
54841: PUSH
54842: LD_VAR 0 1
54846: ARRAY
54847: PUSH
54848: LD_EXP 6
54852: PUSH
54853: LD_OWVAR 2
54857: ARRAY
54858: NONEQUAL
54859: IFFALSE 54881
54861: PUSH
54862: LD_OWVAR 2
54866: PPUSH
54867: LD_VAR 0 1
54871: PPUSH
54872: CALL_OW 81
54876: PUSH
54877: LD_INT 1
54879: NONEQUAL
54880: AND
54881: OR
54882: IFFALSE 54905
// if HasPower ( i ) then
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL 54966 0 1
54893: IFFALSE 54905
// begin canWin := false ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_INT 0
54902: ST_TO_ADDR
// break ;
54903: GO 54907
// end ;
54905: GO 54781
54907: POP
54908: POP
// if canWin then
54909: LD_VAR 0 2
54913: IFFALSE 54920
// enable ( mpWin ) else
54915: LD_INT 101
54917: ENABLE_MARKED
54918: GO 54921
// enable ;
54920: ENABLE
// end ; end ;
54921: PPOPN 2
54923: END
// function CanWinLoose ; begin
54924: LD_INT 0
54926: PPUSH
// result := true ;
54927: LD_ADDR_VAR 0 1
54931: PUSH
54932: LD_INT 1
54934: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54935: CALL_OW 531
54939: IFFALSE 54951
54941: PUSH
54942: CALL_OW 519
54946: PUSH
54947: LD_INT 1
54949: GREATER
54950: AND
54951: IFFALSE 54961
// result := false ;
54953: LD_ADDR_VAR 0 1
54957: PUSH
54958: LD_INT 0
54960: ST_TO_ADDR
// end ;
54961: LD_VAR 0 1
54965: RET
// function HasPower ( i ) ; begin
54966: LD_INT 0
54968: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54969: LD_INT 22
54971: PUSH
54972: LD_VAR 0 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: LD_INT 30
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 30
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PPUSH
55013: CALL_OW 69
55017: NOT
55018: IFFALSE 55022
// exit ;
55020: GO 55087
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55022: LD_ADDR_VAR 0 2
55026: PUSH
55027: LD_INT 22
55029: PUSH
55030: LD_VAR 0 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 21
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 33
55054: PUSH
55055: LD_INT 3
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 33
55064: PUSH
55065: LD_INT 5
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PPUSH
55082: CALL_OW 69
55086: ST_TO_ADDR
// end ; end_of_file
55087: LD_VAR 0 2
55091: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55092: LD_EXP 37
55096: IFFALSE 55435
55098: GO 55100
55100: DISABLE
55101: LD_INT 0
55103: PPUSH
55104: PPUSH
55105: PPUSH
// begin mpKingPoints := [ ] ;
55106: LD_ADDR_EXP 48
55110: PUSH
55111: EMPTY
55112: ST_TO_ADDR
// if mpTeamGame then
55113: LD_EXP 9
55117: IFFALSE 55171
// begin for i := 1 to Count ( mpTeams ) do
55119: LD_ADDR_VAR 0 1
55123: PUSH
55124: DOUBLE
55125: LD_INT 1
55127: DEC
55128: ST_TO_ADDR
55129: LD_EXP 8
55133: PPUSH
55134: CALL 5226 0 1
55138: PUSH
55139: FOR_TO
55140: IFFALSE 55167
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55142: LD_ADDR_EXP 48
55146: PUSH
55147: LD_EXP 48
55151: PPUSH
55152: LD_VAR 0 1
55156: PPUSH
55157: LD_INT 0
55159: PPUSH
55160: CALL_OW 1
55164: ST_TO_ADDR
55165: GO 55139
55167: POP
55168: POP
// end else
55169: GO 55214
// begin for i := 1 to 8 do
55171: LD_ADDR_VAR 0 1
55175: PUSH
55176: DOUBLE
55177: LD_INT 1
55179: DEC
55180: ST_TO_ADDR
55181: LD_INT 8
55183: PUSH
55184: FOR_TO
55185: IFFALSE 55212
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55187: LD_ADDR_EXP 48
55191: PUSH
55192: LD_EXP 48
55196: PPUSH
55197: LD_VAR 0 1
55201: PPUSH
55202: LD_INT 0
55204: PPUSH
55205: CALL_OW 1
55209: ST_TO_ADDR
55210: GO 55184
55212: POP
55213: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55214: LD_ADDR_VAR 0 3
55218: PUSH
55219: LD_INT 25
55221: PPUSH
55222: LD_INT 0
55224: PPUSH
55225: CALL_OW 517
55229: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55230: LD_ADDR_VAR 0 1
55234: PUSH
55235: DOUBLE
55236: LD_INT 1
55238: DEC
55239: ST_TO_ADDR
55240: LD_VAR 0 3
55244: PUSH
55245: LD_INT 1
55247: ARRAY
55248: PUSH
55249: FOR_TO
55250: IFFALSE 55317
// for j := 1 to 8 do
55252: LD_ADDR_VAR 0 2
55256: PUSH
55257: DOUBLE
55258: LD_INT 1
55260: DEC
55261: ST_TO_ADDR
55262: LD_INT 8
55264: PUSH
55265: FOR_TO
55266: IFFALSE 55313
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55268: LD_VAR 0 3
55272: PUSH
55273: LD_INT 1
55275: ARRAY
55276: PUSH
55277: LD_VAR 0 1
55281: ARRAY
55282: PPUSH
55283: LD_VAR 0 3
55287: PUSH
55288: LD_INT 2
55290: ARRAY
55291: PUSH
55292: LD_VAR 0 1
55296: ARRAY
55297: PPUSH
55298: LD_VAR 0 2
55302: PPUSH
55303: LD_INT 12
55305: NEG
55306: PPUSH
55307: CALL_OW 330
55311: GO 55265
55313: POP
55314: POP
55315: GO 55249
55317: POP
55318: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55319: LD_EXP 32
55323: PPUSH
55324: LD_INT 1
55326: PPUSH
55327: CALL_OW 424
// UpdateCounter ;
55331: CALL 55939 0 0
// repeat wait ( 0 0$1 ) ;
55335: LD_INT 35
55337: PPUSH
55338: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55342: LD_ADDR_VAR 0 3
55346: PUSH
55347: LD_EXP 32
55351: PPUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 57
55357: PUSH
55358: EMPTY
55359: LIST
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 50
55367: PUSH
55368: EMPTY
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 30
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 30
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: PPUSH
55404: CALL_OW 70
55408: ST_TO_ADDR
// if not tmp then
55409: LD_VAR 0 3
55413: NOT
55414: IFFALSE 55418
// continue ;
55416: GO 55335
// AddPoints ( tmp ) ;
55418: LD_VAR 0 3
55422: PPUSH
55423: CALL 55617 0 1
// UpdateCounter ;
55427: CALL 55939 0 0
// until false ;
55431: LD_INT 0
55433: IFFALSE 55335
// end ;
55435: PPOPN 3
55437: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55438: LD_EXP 37
55442: IFFALSE 55450
55444: PUSH
55445: LD_EXP 35
55449: AND
55450: IFFALSE 55614
55452: GO 55454
55454: DISABLE
55455: LD_INT 0
55457: PPUSH
55458: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55459: LD_ADDR_VAR 0 2
55463: PUSH
55464: LD_INT 25
55466: PPUSH
55467: LD_INT 0
55469: PPUSH
55470: CALL_OW 517
55474: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55475: LD_ADDR_VAR 0 1
55479: PUSH
55480: DOUBLE
55481: LD_INT 1
55483: DEC
55484: ST_TO_ADDR
55485: LD_VAR 0 2
55489: PUSH
55490: LD_INT 1
55492: ARRAY
55493: PUSH
55494: FOR_TO
55495: IFFALSE 55536
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55497: LD_VAR 0 2
55501: PUSH
55502: LD_INT 1
55504: ARRAY
55505: PUSH
55506: LD_VAR 0 1
55510: ARRAY
55511: PPUSH
55512: LD_VAR 0 2
55516: PUSH
55517: LD_INT 2
55519: ARRAY
55520: PUSH
55521: LD_VAR 0 1
55525: ARRAY
55526: PPUSH
55527: LD_INT 125
55529: PPUSH
55530: CALL_OW 495
55534: GO 55494
55536: POP
55537: POP
// repeat wait ( mpEmissions ) ;
55538: LD_EXP 35
55542: PPUSH
55543: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55547: LD_ADDR_VAR 0 1
55551: PUSH
55552: DOUBLE
55553: LD_INT 1
55555: DEC
55556: ST_TO_ADDR
55557: LD_VAR 0 2
55561: PUSH
55562: LD_INT 1
55564: ARRAY
55565: PUSH
55566: FOR_TO
55567: IFFALSE 55608
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55569: LD_VAR 0 2
55573: PUSH
55574: LD_INT 1
55576: ARRAY
55577: PUSH
55578: LD_VAR 0 1
55582: ARRAY
55583: PPUSH
55584: LD_VAR 0 2
55588: PUSH
55589: LD_INT 2
55591: ARRAY
55592: PUSH
55593: LD_VAR 0 1
55597: ARRAY
55598: PPUSH
55599: LD_INT 15
55601: PPUSH
55602: CALL_OW 495
55606: GO 55566
55608: POP
55609: POP
// until false ;
55610: LD_INT 0
55612: IFFALSE 55538
// end ;
55614: PPOPN 2
55616: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55617: LD_INT 0
55619: PPUSH
55620: PPUSH
55621: PPUSH
55622: PPUSH
55623: PPUSH
// if mpTeamGame then
55624: LD_EXP 9
55628: IFFALSE 55825
// begin first := depots [ 1 ] ;
55630: LD_ADDR_VAR 0 4
55634: PUSH
55635: LD_VAR 0 1
55639: PUSH
55640: LD_INT 1
55642: ARRAY
55643: ST_TO_ADDR
// side := GetSide ( first ) ;
55644: LD_ADDR_VAR 0 6
55648: PUSH
55649: LD_VAR 0 4
55653: PPUSH
55654: CALL_OW 255
55658: ST_TO_ADDR
// for i := 1 to mpTeams do
55659: LD_ADDR_VAR 0 3
55663: PUSH
55664: DOUBLE
55665: LD_INT 1
55667: DEC
55668: ST_TO_ADDR
55669: LD_EXP 8
55673: PUSH
55674: FOR_TO
55675: IFFALSE 55709
// if side in mpTeams [ i ] then
55677: LD_VAR 0 6
55681: PUSH
55682: LD_EXP 8
55686: PUSH
55687: LD_VAR 0 3
55691: ARRAY
55692: IN
55693: IFFALSE 55707
// begin team := i ;
55695: LD_ADDR_VAR 0 5
55699: PUSH
55700: LD_VAR 0 3
55704: ST_TO_ADDR
// break ;
55705: GO 55709
// end ;
55707: GO 55674
55709: POP
55710: POP
// if not team then
55711: LD_VAR 0 5
55715: NOT
55716: IFFALSE 55720
// exit ;
55718: GO 55934
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55720: LD_EXP 32
55724: PPUSH
55725: LD_INT 81
55727: PUSH
55728: LD_VAR 0 6
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PPUSH
55737: CALL_OW 70
55741: IFFALSE 55745
// exit ;
55743: GO 55934
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55745: LD_ADDR_EXP 48
55749: PUSH
55750: LD_EXP 48
55754: PPUSH
55755: LD_VAR 0 5
55759: PPUSH
55760: LD_EXP 48
55764: PUSH
55765: LD_VAR 0 5
55769: ARRAY
55770: PUSH
55771: LD_INT 1
55773: PLUS
55774: PPUSH
55775: CALL_OW 1
55779: ST_TO_ADDR
// for i in mpTeams [ team ] do
55780: LD_ADDR_VAR 0 3
55784: PUSH
55785: LD_EXP 8
55789: PUSH
55790: LD_VAR 0 5
55794: ARRAY
55795: PUSH
55796: FOR_IN
55797: IFFALSE 55821
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55799: LD_VAR 0 3
55803: PPUSH
55804: LD_EXP 48
55808: PUSH
55809: LD_VAR 0 5
55813: ARRAY
55814: PPUSH
55815: CALL_OW 506
55819: GO 55796
55821: POP
55822: POP
// end else
55823: GO 55934
// begin first := depots [ 1 ] ;
55825: LD_ADDR_VAR 0 4
55829: PUSH
55830: LD_VAR 0 1
55834: PUSH
55835: LD_INT 1
55837: ARRAY
55838: ST_TO_ADDR
// side := GetSide ( first ) ;
55839: LD_ADDR_VAR 0 6
55843: PUSH
55844: LD_VAR 0 4
55848: PPUSH
55849: CALL_OW 255
55853: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55854: LD_EXP 32
55858: PPUSH
55859: LD_INT 81
55861: PUSH
55862: LD_VAR 0 6
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PPUSH
55871: CALL_OW 70
55875: IFFALSE 55879
// exit ;
55877: GO 55934
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55879: LD_ADDR_EXP 48
55883: PUSH
55884: LD_EXP 48
55888: PPUSH
55889: LD_VAR 0 6
55893: PPUSH
55894: LD_EXP 48
55898: PUSH
55899: LD_VAR 0 6
55903: ARRAY
55904: PUSH
55905: LD_INT 1
55907: PLUS
55908: PPUSH
55909: CALL_OW 1
55913: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55914: LD_VAR 0 6
55918: PPUSH
55919: LD_EXP 48
55923: PUSH
55924: LD_VAR 0 6
55928: ARRAY
55929: PPUSH
55930: CALL_OW 506
// end ; end ;
55934: LD_VAR 0 2
55938: RET
// function UpdateCounter ; var i ; begin
55939: LD_INT 0
55941: PPUSH
55942: PPUSH
// result := [ ] ;
55943: LD_ADDR_VAR 0 1
55947: PUSH
55948: EMPTY
55949: ST_TO_ADDR
// if mpTeamGame then
55950: LD_EXP 9
55954: IFFALSE 56021
// begin for i := 1 to mpTeams do
55956: LD_ADDR_VAR 0 2
55960: PUSH
55961: DOUBLE
55962: LD_INT 1
55964: DEC
55965: ST_TO_ADDR
55966: LD_EXP 8
55970: PUSH
55971: FOR_TO
55972: IFFALSE 56017
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55974: LD_ADDR_VAR 0 1
55978: PUSH
55979: LD_VAR 0 1
55983: PUSH
55984: LD_STRING #KingoftheHill-Team
55986: PUSH
55987: LD_VAR 0 2
55991: PUSH
55992: LD_EXP 48
55996: PUSH
55997: LD_VAR 0 2
56001: ARRAY
56002: PUSH
56003: LD_EXP 33
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ADD
56014: ST_TO_ADDR
56015: GO 55971
56017: POP
56018: POP
// end else
56019: GO 56094
// begin for i := 1 to 8 do
56021: LD_ADDR_VAR 0 2
56025: PUSH
56026: DOUBLE
56027: LD_INT 1
56029: DEC
56030: ST_TO_ADDR
56031: LD_INT 8
56033: PUSH
56034: FOR_TO
56035: IFFALSE 56092
// if mpSidePositions [ i ] then
56037: LD_EXP 5
56041: PUSH
56042: LD_VAR 0 2
56046: ARRAY
56047: IFFALSE 56090
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56049: LD_ADDR_VAR 0 1
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_STRING #KingoftheHill-Player
56061: PUSH
56062: LD_VAR 0 2
56066: PUSH
56067: LD_EXP 48
56071: PUSH
56072: LD_VAR 0 2
56076: ARRAY
56077: PUSH
56078: LD_EXP 33
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: ADD
56089: ST_TO_ADDR
56090: GO 56034
56092: POP
56093: POP
// end ; mpDisplayStrings := result ;
56094: LD_ADDR_EXP 36
56098: PUSH
56099: LD_VAR 0 1
56103: ST_TO_ADDR
// end ;
56104: LD_VAR 0 1
56108: RET
// export function HowMuchPointsKing ( side ) ; begin
56109: LD_INT 0
56111: PPUSH
// result := HowMuchPoints ( side ) ;
56112: LD_ADDR_VAR 0 2
56116: PUSH
56117: LD_VAR 0 1
56121: PPUSH
56122: CALL 56132 0 1
56126: ST_TO_ADDR
// end ;
56127: LD_VAR 0 2
56131: RET
// function HowMuchPoints ( side ) ; var i ; begin
56132: LD_INT 0
56134: PPUSH
56135: PPUSH
// if mpTeamGame then
56136: LD_EXP 9
56140: IFFALSE 56209
// begin for i := 1 to Count ( mpTeams ) do
56142: LD_ADDR_VAR 0 3
56146: PUSH
56147: DOUBLE
56148: LD_INT 1
56150: DEC
56151: ST_TO_ADDR
56152: LD_EXP 8
56156: PPUSH
56157: CALL 5226 0 1
56161: PUSH
56162: FOR_TO
56163: IFFALSE 56205
// begin if side in mpTeams [ i ] then
56165: LD_VAR 0 1
56169: PUSH
56170: LD_EXP 8
56174: PUSH
56175: LD_VAR 0 3
56179: ARRAY
56180: IN
56181: IFFALSE 56203
// begin result := mpKingPoints [ i ] ;
56183: LD_ADDR_VAR 0 2
56187: PUSH
56188: LD_EXP 48
56192: PUSH
56193: LD_VAR 0 3
56197: ARRAY
56198: ST_TO_ADDR
// exit ;
56199: POP
56200: POP
56201: GO 56225
// end ; end ;
56203: GO 56162
56205: POP
56206: POP
// end else
56207: GO 56225
// result := mpKingPoints [ side ] ;
56209: LD_ADDR_VAR 0 2
56213: PUSH
56214: LD_EXP 48
56218: PUSH
56219: LD_VAR 0 1
56223: ARRAY
56224: ST_TO_ADDR
// end ;
56225: LD_VAR 0 2
56229: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56230: LD_EXP 37
56234: IFFALSE 56242
56236: PUSH
56237: CALL 56654 0 0
56241: AND
56242: IFFALSE 56250
56244: PUSH
56245: LD_OWVAR 4
56249: AND
56250: IFFALSE 56503
56252: GO 56254
56254: DISABLE
56255: LD_INT 0
56257: PPUSH
56258: PPUSH
// begin canWin := false ;
56259: LD_ADDR_VAR 0 2
56263: PUSH
56264: LD_INT 0
56266: ST_TO_ADDR
// if not HasPower ( your_side ) then
56267: LD_OWVAR 2
56271: PPUSH
56272: CALL 56696 0 1
56276: NOT
56277: IFFALSE 56288
// begin Multiplayer_Loose_Message ;
56279: CALL_OW 521
// enable ( mpLose ) ;
56283: LD_INT 102
56285: ENABLE_MARKED
// end else
56286: GO 56503
// begin if not EnemiesInGame then
56288: CALL 56506 0 0
56292: NOT
56293: IFFALSE 56300
// begin enable ( mpWin ) ;
56295: LD_INT 101
56297: ENABLE_MARKED
// exit ;
56298: GO 56503
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56300: LD_ADDR_VAR 0 2
56304: PUSH
56305: LD_OWVAR 2
56309: PPUSH
56310: CALL 56132 0 1
56314: PUSH
56315: LD_EXP 33
56319: GREATEREQUAL
56320: IFFALSE 56333
56322: PUSH
56323: LD_OWVAR 2
56327: PPUSH
56328: CALL 56696 0 1
56332: AND
56333: ST_TO_ADDR
// for i := 1 to 8 do
56334: LD_ADDR_VAR 0 1
56338: PUSH
56339: DOUBLE
56340: LD_INT 1
56342: DEC
56343: ST_TO_ADDR
56344: LD_INT 8
56346: PUSH
56347: FOR_TO
56348: IFFALSE 56489
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56350: LD_EXP 5
56354: PUSH
56355: LD_VAR 0 1
56359: ARRAY
56360: IFFALSE 56373
56362: PUSH
56363: LD_VAR 0 1
56367: PPUSH
56368: CALL_OW 108
56372: AND
56373: IFFALSE 56387
56375: PUSH
56376: LD_VAR 0 1
56380: PUSH
56381: LD_OWVAR 2
56385: NONEQUAL
56386: AND
56387: IFFALSE 56487
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56389: LD_EXP 6
56393: PUSH
56394: LD_VAR 0 1
56398: ARRAY
56399: NOT
56400: IFTRUE 56448
56402: PUSH
56403: LD_EXP 6
56407: PUSH
56408: LD_VAR 0 1
56412: ARRAY
56413: PUSH
56414: LD_EXP 6
56418: PUSH
56419: LD_OWVAR 2
56423: ARRAY
56424: NONEQUAL
56425: IFFALSE 56447
56427: PUSH
56428: LD_OWVAR 2
56432: PPUSH
56433: LD_VAR 0 1
56437: PPUSH
56438: CALL_OW 81
56442: PUSH
56443: LD_INT 1
56445: NONEQUAL
56446: AND
56447: OR
56448: IFFALSE 56487
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56450: LD_VAR 0 1
56454: PPUSH
56455: CALL 56132 0 1
56459: PUSH
56460: LD_EXP 33
56464: GREATEREQUAL
56465: IFFALSE 56478
56467: PUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: CALL 56696 0 1
56477: AND
56478: IFFALSE 56487
// begin enable ( mpLose ) ;
56480: LD_INT 102
56482: ENABLE_MARKED
// exit ;
56483: POP
56484: POP
56485: GO 56503
// end ;
56487: GO 56347
56489: POP
56490: POP
// if canWin then
56491: LD_VAR 0 2
56495: IFFALSE 56502
// enable ( mpWin ) else
56497: LD_INT 101
56499: ENABLE_MARKED
56500: GO 56503
// enable ;
56502: ENABLE
// end ; end ;
56503: PPOPN 2
56505: END
// function EnemiesInGame ; var i ; begin
56506: LD_INT 0
56508: PPUSH
56509: PPUSH
// result := false ;
56510: LD_ADDR_VAR 0 1
56514: PUSH
56515: LD_INT 0
56517: ST_TO_ADDR
// for i := 1 to 8 do
56518: LD_ADDR_VAR 0 2
56522: PUSH
56523: DOUBLE
56524: LD_INT 1
56526: DEC
56527: ST_TO_ADDR
56528: LD_INT 8
56530: PUSH
56531: FOR_TO
56532: IFFALSE 56647
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56534: LD_VAR 0 2
56538: PUSH
56539: LD_OWVAR 2
56543: NONEQUAL
56544: IFFALSE 56557
56546: PUSH
56547: LD_VAR 0 2
56551: PPUSH
56552: CALL 56696 0 1
56556: AND
56557: IFFALSE 56570
56559: PUSH
56560: LD_VAR 0 2
56564: PPUSH
56565: CALL_OW 108
56569: AND
56570: IFFALSE 56645
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56572: LD_EXP 6
56576: PUSH
56577: LD_VAR 0 2
56581: ARRAY
56582: NOT
56583: IFTRUE 56631
56585: PUSH
56586: LD_EXP 6
56590: PUSH
56591: LD_VAR 0 2
56595: ARRAY
56596: PUSH
56597: LD_EXP 6
56601: PUSH
56602: LD_OWVAR 2
56606: ARRAY
56607: NONEQUAL
56608: IFFALSE 56630
56610: PUSH
56611: LD_OWVAR 2
56615: PPUSH
56616: LD_VAR 0 2
56620: PPUSH
56621: CALL_OW 81
56625: PUSH
56626: LD_INT 1
56628: NONEQUAL
56629: AND
56630: OR
56631: IFFALSE 56645
// begin result := true ;
56633: LD_ADDR_VAR 0 1
56637: PUSH
56638: LD_INT 1
56640: ST_TO_ADDR
// exit ;
56641: POP
56642: POP
56643: GO 56649
// end ;
56645: GO 56531
56647: POP
56648: POP
// end ;
56649: LD_VAR 0 1
56653: RET
// function CanWinLoose ; begin
56654: LD_INT 0
56656: PPUSH
// result := true ;
56657: LD_ADDR_VAR 0 1
56661: PUSH
56662: LD_INT 1
56664: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56665: CALL_OW 531
56669: IFFALSE 56681
56671: PUSH
56672: CALL_OW 519
56676: PUSH
56677: LD_INT 1
56679: GREATER
56680: AND
56681: IFFALSE 56691
// result := false ;
56683: LD_ADDR_VAR 0 1
56687: PUSH
56688: LD_INT 0
56690: ST_TO_ADDR
// end ;
56691: LD_VAR 0 1
56695: RET
// function HasPower ( i ) ; begin
56696: LD_INT 0
56698: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56699: LD_ADDR_VAR 0 2
56703: PUSH
56704: LD_INT 22
56706: PUSH
56707: LD_VAR 0 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 21
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 33
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 33
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PPUSH
56759: CALL_OW 69
56763: ST_TO_ADDR
// end ; end_of_file end_of_file
56764: LD_VAR 0 2
56768: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56769: LD_VAR 0 1
56773: PUSH
56774: LD_INT 200
56776: DOUBLE
56777: GREATEREQUAL
56778: IFFALSE 56786
56780: LD_INT 299
56782: DOUBLE
56783: LESSEQUAL
56784: IFTRUE 56788
56786: GO 56820
56788: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56789: LD_VAR 0 1
56793: PPUSH
56794: LD_VAR 0 2
56798: PPUSH
56799: LD_VAR 0 3
56803: PPUSH
56804: LD_VAR 0 4
56808: PPUSH
56809: LD_VAR 0 5
56813: PPUSH
56814: CALL 57682 0 5
56818: GO 56897
56820: LD_INT 300
56822: DOUBLE
56823: GREATEREQUAL
56824: IFFALSE 56832
56826: LD_INT 399
56828: DOUBLE
56829: LESSEQUAL
56830: IFTRUE 56834
56832: GO 56896
56834: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56835: LD_VAR 0 1
56839: PPUSH
56840: LD_VAR 0 2
56844: PPUSH
56845: LD_VAR 0 3
56849: PPUSH
56850: LD_VAR 0 4
56854: PPUSH
56855: LD_VAR 0 5
56859: PPUSH
56860: LD_VAR 0 6
56864: PPUSH
56865: LD_VAR 0 7
56869: PPUSH
56870: LD_VAR 0 8
56874: PPUSH
56875: LD_VAR 0 9
56879: PPUSH
56880: LD_VAR 0 10
56884: PPUSH
56885: LD_VAR 0 11
56889: PPUSH
56890: CALL 64110 0 11
56894: GO 56897
56896: POP
// end ;
56897: PPOPN 11
56899: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56900: LD_VAR 0 1
56904: PPUSH
56905: LD_VAR 0 2
56909: PPUSH
56910: LD_VAR 0 3
56914: PPUSH
56915: LD_VAR 0 4
56919: PPUSH
56920: LD_VAR 0 5
56924: PPUSH
56925: CALL 56982 0 5
// end ; end_of_file
56929: PPOPN 5
56931: END
// export function SOS_UnitDestroyed ( un ) ; begin
56932: LD_INT 0
56934: PPUSH
// ComRadiation ( un ) ;
56935: LD_VAR 0 1
56939: PPUSH
56940: CALL 58102 0 1
// end ;
56944: LD_VAR 0 2
56948: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56949: LD_INT 0
56951: PPUSH
// ComRadiation ( un ) ;
56952: LD_VAR 0 1
56956: PPUSH
56957: CALL 58102 0 1
// end ;
56961: LD_VAR 0 2
56965: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56966: LD_INT 0
56968: PPUSH
// end ;
56969: LD_VAR 0 4
56973: RET
// export function SOS_Command ( cmd ) ; begin
56974: LD_INT 0
56976: PPUSH
// end ;
56977: LD_VAR 0 2
56981: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56982: LD_INT 0
56984: PPUSH
// end ;
56985: LD_VAR 0 6
56989: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56990: LD_INT 0
56992: PPUSH
56993: PPUSH
56994: PPUSH
56995: PPUSH
56996: PPUSH
// if not vehicle or not factory then
56997: LD_VAR 0 1
57001: NOT
57002: IFTRUE 57011
57004: PUSH
57005: LD_VAR 0 2
57009: NOT
57010: OR
57011: IFFALSE 57015
// exit ;
57013: GO 57677
// weapon := GetWeapon ( vehicle ) ;
57015: LD_ADDR_VAR 0 7
57019: PUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 264
57029: ST_TO_ADDR
// if weapon = ar_miner then
57030: LD_VAR 0 7
57034: PUSH
57035: LD_INT 81
57037: EQUAL
57038: IFFALSE 57095
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57040: LD_ADDR_EXP 56
57044: PUSH
57045: LD_EXP 56
57049: PPUSH
57050: LD_EXP 56
57054: PUSH
57055: LD_INT 1
57057: PLUS
57058: PPUSH
57059: LD_VAR 0 1
57063: PPUSH
57064: CALL_OW 1
57068: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57069: LD_ADDR_EXP 57
57073: PUSH
57074: LD_EXP 57
57078: PPUSH
57079: LD_EXP 57
57083: PUSH
57084: LD_INT 1
57086: PLUS
57087: PPUSH
57088: EMPTY
57089: PPUSH
57090: CALL_OW 1
57094: ST_TO_ADDR
// end ; if not factoryWaypoints then
57095: LD_EXP 59
57099: NOT
57100: IFFALSE 57104
// exit ;
57102: GO 57677
// for i := 1 to Count ( factoryWaypoints ) do
57104: LD_ADDR_VAR 0 4
57108: PUSH
57109: DOUBLE
57110: LD_INT 1
57112: DEC
57113: ST_TO_ADDR
57114: LD_EXP 59
57118: PPUSH
57119: CALL 5226 0 1
57123: PUSH
57124: FOR_TO
57125: IFFALSE 57675
// if factoryWaypoints [ i ] [ 2 ] = factory then
57127: LD_EXP 59
57131: PUSH
57132: LD_VAR 0 4
57136: ARRAY
57137: PUSH
57138: LD_INT 2
57140: ARRAY
57141: PUSH
57142: LD_VAR 0 2
57146: EQUAL
57147: IFFALSE 57673
// begin if GetControl ( vehicle ) = control_manual then
57149: LD_VAR 0 1
57153: PPUSH
57154: CALL_OW 263
57158: PUSH
57159: LD_INT 1
57161: EQUAL
57162: IFFALSE 57526
// begin driver := IsDrivenBy ( vehicle ) ;
57164: LD_ADDR_VAR 0 5
57168: PUSH
57169: LD_VAR 0 1
57173: PPUSH
57174: CALL_OW 311
57178: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57179: LD_VAR 0 5
57183: PUSH
57184: LD_EXP 60
57188: IN
57189: IFTRUE 57203
57191: PUSH
57192: LD_VAR 0 1
57196: PUSH
57197: LD_EXP 60
57201: IN
57202: OR
57203: IFFALSE 57209
// exit ;
57205: POP
57206: POP
57207: GO 57677
// if not HasTask ( driver ) then
57209: LD_VAR 0 5
57213: PPUSH
57214: CALL_OW 314
57218: NOT
57219: IFFALSE 57524
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57221: LD_ADDR_EXP 60
57225: PUSH
57226: LD_EXP 60
57230: PPUSH
57231: LD_VAR 0 5
57235: PPUSH
57236: CALL 41202 0 2
57240: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57241: LD_ADDR_EXP 60
57245: PUSH
57246: LD_EXP 60
57250: PPUSH
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL 41202 0 2
57260: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57261: LD_ADDR_VAR 0 6
57265: PUSH
57266: LD_EXP 59
57270: PUSH
57271: LD_VAR 0 4
57275: ARRAY
57276: PUSH
57277: LD_INT 3
57279: ARRAY
57280: PPUSH
57281: LD_EXP 59
57285: PUSH
57286: LD_VAR 0 4
57290: ARRAY
57291: PUSH
57292: LD_INT 4
57294: ARRAY
57295: PPUSH
57296: CALL_OW 428
57300: ST_TO_ADDR
// if hex then
57301: LD_VAR 0 6
57305: IFFALSE 57323
// ComMoveUnit ( driver , hex ) else
57307: LD_VAR 0 5
57311: PPUSH
57312: LD_VAR 0 6
57316: PPUSH
57317: CALL_OW 112
57321: GO 57407
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57323: LD_VAR 0 1
57327: PPUSH
57328: LD_EXP 59
57332: PUSH
57333: LD_VAR 0 4
57337: ARRAY
57338: PUSH
57339: LD_INT 3
57341: ARRAY
57342: PPUSH
57343: LD_EXP 59
57347: PUSH
57348: LD_VAR 0 4
57352: ARRAY
57353: PUSH
57354: LD_INT 4
57356: ARRAY
57357: PPUSH
57358: CALL_OW 297
57362: PUSH
57363: LD_INT 0
57365: GREATER
57366: IFFALSE 57407
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57368: LD_VAR 0 5
57372: PPUSH
57373: LD_EXP 59
57377: PUSH
57378: LD_VAR 0 4
57382: ARRAY
57383: PUSH
57384: LD_INT 3
57386: ARRAY
57387: PPUSH
57388: LD_EXP 59
57392: PUSH
57393: LD_VAR 0 4
57397: ARRAY
57398: PUSH
57399: LD_INT 4
57401: ARRAY
57402: PPUSH
57403: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57407: LD_VAR 0 5
57411: PPUSH
57412: CALL_OW 181
// if Multiplayer then
57416: LD_OWVAR 4
57420: IFFALSE 57469
// begin repeat wait ( 10 ) ;
57422: LD_INT 10
57424: PPUSH
57425: CALL_OW 67
// until not IsInUnit ( driver ) ;
57429: LD_VAR 0 5
57433: PPUSH
57434: CALL_OW 310
57438: NOT
57439: IFFALSE 57422
// if not HasTask ( driver ) then
57441: LD_VAR 0 5
57445: PPUSH
57446: CALL_OW 314
57450: NOT
57451: IFFALSE 57467
// ComEnterUnit ( driver , factory ) ;
57453: LD_VAR 0 5
57457: PPUSH
57458: LD_VAR 0 2
57462: PPUSH
57463: CALL_OW 120
// end else
57467: GO 57483
// AddComEnterUnit ( driver , factory ) ;
57469: LD_VAR 0 5
57473: PPUSH
57474: LD_VAR 0 2
57478: PPUSH
57479: CALL_OW 180
// wait ( 0 0$1 ) ;
57483: LD_INT 35
57485: PPUSH
57486: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57490: LD_ADDR_EXP 60
57494: PUSH
57495: LD_EXP 60
57499: PUSH
57500: LD_VAR 0 5
57504: DIFF
57505: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57506: LD_ADDR_EXP 60
57510: PUSH
57511: LD_EXP 60
57515: PUSH
57516: LD_VAR 0 1
57520: DIFF
57521: ST_TO_ADDR
// break ;
57522: GO 57675
// end ; end else
57524: GO 57673
// if GetControl ( vehicle ) = control_remote then
57526: LD_VAR 0 1
57530: PPUSH
57531: CALL_OW 263
57535: PUSH
57536: LD_INT 2
57538: EQUAL
57539: IFFALSE 57625
// begin wait ( 0 0$2 ) ;
57541: LD_INT 70
57543: PPUSH
57544: CALL_OW 67
// repeat wait ( 10 ) ;
57548: LD_INT 10
57550: PPUSH
57551: CALL_OW 67
// Connect ( vehicle ) ;
57555: LD_VAR 0 1
57559: PPUSH
57560: CALL 11504 0 1
// until IsControledBy ( vehicle ) ;
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL_OW 312
57573: IFFALSE 57548
// wait ( 10 ) ;
57575: LD_INT 10
57577: PPUSH
57578: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57582: LD_VAR 0 1
57586: PPUSH
57587: LD_EXP 59
57591: PUSH
57592: LD_VAR 0 4
57596: ARRAY
57597: PUSH
57598: LD_INT 3
57600: ARRAY
57601: PPUSH
57602: LD_EXP 59
57606: PUSH
57607: LD_VAR 0 4
57611: ARRAY
57612: PUSH
57613: LD_INT 4
57615: ARRAY
57616: PPUSH
57617: CALL_OW 111
// break ;
57621: GO 57675
// end else
57623: GO 57673
// begin wait ( 0 0$3 ) ;
57625: LD_INT 105
57627: PPUSH
57628: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57632: LD_VAR 0 1
57636: PPUSH
57637: LD_EXP 59
57641: PUSH
57642: LD_VAR 0 4
57646: ARRAY
57647: PUSH
57648: LD_INT 3
57650: ARRAY
57651: PPUSH
57652: LD_EXP 59
57656: PUSH
57657: LD_VAR 0 4
57661: ARRAY
57662: PUSH
57663: LD_INT 4
57665: ARRAY
57666: PPUSH
57667: CALL_OW 111
// break ;
57671: GO 57675
// end ; end ;
57673: GO 57124
57675: POP
57676: POP
// end ;
57677: LD_VAR 0 3
57681: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57682: LD_INT 0
57684: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57685: LD_VAR 0 1
57689: PUSH
57690: LD_INT 250
57692: EQUAL
57693: IFFALSE 57710
57695: PUSH
57696: LD_VAR 0 2
57700: PPUSH
57701: CALL_OW 264
57705: PUSH
57706: LD_INT 81
57708: EQUAL
57709: AND
57710: IFFALSE 57731
// MinerPlaceMine ( unit , x , y ) ;
57712: LD_VAR 0 2
57716: PPUSH
57717: LD_VAR 0 4
57721: PPUSH
57722: LD_VAR 0 5
57726: PPUSH
57727: CALL 61077 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57731: LD_VAR 0 1
57735: PUSH
57736: LD_INT 251
57738: EQUAL
57739: IFFALSE 57756
57741: PUSH
57742: LD_VAR 0 2
57746: PPUSH
57747: CALL_OW 264
57751: PUSH
57752: LD_INT 81
57754: EQUAL
57755: AND
57756: IFFALSE 57777
// MinerDetonateMine ( unit , x , y ) ;
57758: LD_VAR 0 2
57762: PPUSH
57763: LD_VAR 0 4
57767: PPUSH
57768: LD_VAR 0 5
57772: PPUSH
57773: CALL 61484 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57777: LD_VAR 0 1
57781: PUSH
57782: LD_INT 252
57784: EQUAL
57785: IFFALSE 57802
57787: PUSH
57788: LD_VAR 0 2
57792: PPUSH
57793: CALL_OW 264
57797: PUSH
57798: LD_INT 81
57800: EQUAL
57801: AND
57802: IFFALSE 57823
// MinerCreateMinefield ( unit , x , y ) ;
57804: LD_VAR 0 2
57808: PPUSH
57809: LD_VAR 0 4
57813: PPUSH
57814: LD_VAR 0 5
57818: PPUSH
57819: CALL 61716 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57823: LD_VAR 0 1
57827: PUSH
57828: LD_INT 253
57830: EQUAL
57831: IFFALSE 57848
57833: PUSH
57834: LD_VAR 0 2
57838: PPUSH
57839: CALL_OW 257
57843: PUSH
57844: LD_INT 5
57846: EQUAL
57847: AND
57848: IFFALSE 57869
// ComBinocular ( unit , x , y ) ;
57850: LD_VAR 0 2
57854: PPUSH
57855: LD_VAR 0 4
57859: PPUSH
57860: LD_VAR 0 5
57864: PPUSH
57865: CALL 62091 0 3
// if selectedUnit then
57869: LD_VAR 0 3
57873: IFFALSE 57933
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57875: LD_VAR 0 1
57879: PUSH
57880: LD_INT 254
57882: EQUAL
57883: IFFALSE 57900
57885: PUSH
57886: LD_VAR 0 2
57890: PPUSH
57891: CALL_OW 264
57895: PUSH
57896: LD_INT 99
57898: EQUAL
57899: AND
57900: IFFALSE 57917
57902: PUSH
57903: LD_VAR 0 3
57907: PPUSH
57908: CALL_OW 263
57912: PUSH
57913: LD_INT 3
57915: EQUAL
57916: AND
57917: IFFALSE 57933
// HackDestroyVehicle ( unit , selectedUnit ) ;
57919: LD_VAR 0 2
57923: PPUSH
57924: LD_VAR 0 3
57928: PPUSH
57929: CALL 60267 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57933: LD_VAR 0 1
57937: PUSH
57938: LD_INT 255
57940: EQUAL
57941: IFFALSE 57965
57943: PUSH
57944: LD_VAR 0 2
57948: PPUSH
57949: CALL_OW 264
57953: PUSH
57954: LD_INT 14
57956: PUSH
57957: LD_INT 53
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: IN
57964: AND
57965: IFFALSE 57983
57967: PUSH
57968: LD_VAR 0 4
57972: PPUSH
57973: LD_VAR 0 5
57977: PPUSH
57978: CALL_OW 488
57982: AND
57983: IFFALSE 58007
// CutTreeXYR ( unit , x , y , 12 ) ;
57985: LD_VAR 0 2
57989: PPUSH
57990: LD_VAR 0 4
57994: PPUSH
57995: LD_VAR 0 5
57999: PPUSH
58000: LD_INT 12
58002: PPUSH
58003: CALL 58198 0 4
// if cmd = 256 then
58007: LD_VAR 0 1
58011: PUSH
58012: LD_INT 256
58014: EQUAL
58015: IFFALSE 58036
// SetFactoryWaypoint ( unit , x , y ) ;
58017: LD_VAR 0 2
58021: PPUSH
58022: LD_VAR 0 4
58026: PPUSH
58027: LD_VAR 0 5
58031: PPUSH
58032: CALL 64118 0 3
// if cmd = 257 then
58036: LD_VAR 0 1
58040: PUSH
58041: LD_INT 257
58043: EQUAL
58044: IFFALSE 58065
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58046: LD_VAR 0 2
58050: PPUSH
58051: LD_VAR 0 4
58055: PPUSH
58056: LD_VAR 0 5
58060: PPUSH
58061: CALL 64614 0 3
// if cmd = 258 then
58065: LD_VAR 0 1
58069: PUSH
58070: LD_INT 258
58072: EQUAL
58073: IFFALSE 58097
// BurnTreeXYR ( unit , x , y , 8 ) ;
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_VAR 0 4
58084: PPUSH
58085: LD_VAR 0 5
58089: PPUSH
58090: LD_INT 8
58092: PPUSH
58093: CALL 58620 0 4
// end ;
58097: LD_VAR 0 6
58101: RET
// export function ComRadiation ( un ) ; var eff ; begin
58102: LD_INT 0
58104: PPUSH
58105: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 264
58115: PUSH
58116: LD_INT 91
58118: NONEQUAL
58119: IFFALSE 58123
// exit ;
58121: GO 58193
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58123: LD_INT 68
58125: PPUSH
58126: LD_VAR 0 1
58130: PPUSH
58131: CALL_OW 255
58135: PPUSH
58136: CALL_OW 321
58140: PUSH
58141: LD_INT 2
58143: EQUAL
58144: IFFALSE 58156
// eff := 50 else
58146: LD_ADDR_VAR 0 3
58150: PUSH
58151: LD_INT 50
58153: ST_TO_ADDR
58154: GO 58164
// eff := 25 ;
58156: LD_ADDR_VAR 0 3
58160: PUSH
58161: LD_INT 25
58163: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58164: LD_VAR 0 1
58168: PPUSH
58169: CALL_OW 250
58173: PPUSH
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL_OW 251
58183: PPUSH
58184: LD_VAR 0 3
58188: PPUSH
58189: CALL_OW 495
// end ;
58193: LD_VAR 0 2
58197: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58198: LD_INT 0
58200: PPUSH
58201: PPUSH
58202: PPUSH
58203: PPUSH
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
58208: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58209: LD_VAR 0 1
58213: PPUSH
58214: CALL_OW 302
58218: NOT
58219: IFTRUE 58238
58221: PUSH
58222: LD_VAR 0 2
58226: PPUSH
58227: LD_VAR 0 3
58231: PPUSH
58232: CALL_OW 488
58236: NOT
58237: OR
58238: IFTRUE 58247
58240: PUSH
58241: LD_VAR 0 4
58245: NOT
58246: OR
58247: IFFALSE 58251
// exit ;
58249: GO 58615
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58251: LD_VAR 0 1
58255: PPUSH
58256: CALL_OW 437
58260: PPUSH
58261: CALL 5226 0 1
58265: PUSH
58266: LD_INT 10
58268: GREATER
58269: IFFALSE 58273
// exit ;
58271: GO 58615
// list := [ ] ;
58273: LD_ADDR_VAR 0 13
58277: PUSH
58278: EMPTY
58279: ST_TO_ADDR
// if x - r < 0 then
58280: LD_VAR 0 2
58284: PUSH
58285: LD_VAR 0 4
58289: MINUS
58290: PUSH
58291: LD_INT 0
58293: LESS
58294: IFFALSE 58306
// min_x := 0 else
58296: LD_ADDR_VAR 0 7
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
58304: GO 58322
// min_x := x - r ;
58306: LD_ADDR_VAR 0 7
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: LD_VAR 0 4
58320: MINUS
58321: ST_TO_ADDR
// if y - r < 0 then
58322: LD_VAR 0 3
58326: PUSH
58327: LD_VAR 0 4
58331: MINUS
58332: PUSH
58333: LD_INT 0
58335: LESS
58336: IFFALSE 58348
// min_y := 0 else
58338: LD_ADDR_VAR 0 8
58342: PUSH
58343: LD_INT 0
58345: ST_TO_ADDR
58346: GO 58364
// min_y := y - r ;
58348: LD_ADDR_VAR 0 8
58352: PUSH
58353: LD_VAR 0 3
58357: PUSH
58358: LD_VAR 0 4
58362: MINUS
58363: ST_TO_ADDR
// max_x := x + r ;
58364: LD_ADDR_VAR 0 9
58368: PUSH
58369: LD_VAR 0 2
58373: PUSH
58374: LD_VAR 0 4
58378: PLUS
58379: ST_TO_ADDR
// max_y := y + r ;
58380: LD_ADDR_VAR 0 10
58384: PUSH
58385: LD_VAR 0 3
58389: PUSH
58390: LD_VAR 0 4
58394: PLUS
58395: ST_TO_ADDR
// for _x = min_x to max_x do
58396: LD_ADDR_VAR 0 11
58400: PUSH
58401: DOUBLE
58402: LD_VAR 0 7
58406: DEC
58407: ST_TO_ADDR
58408: LD_VAR 0 9
58412: PUSH
58413: FOR_TO
58414: IFFALSE 58533
// for _y = min_y to max_y do
58416: LD_ADDR_VAR 0 12
58420: PUSH
58421: DOUBLE
58422: LD_VAR 0 8
58426: DEC
58427: ST_TO_ADDR
58428: LD_VAR 0 10
58432: PUSH
58433: FOR_TO
58434: IFFALSE 58529
// begin if not ValidHex ( _x , _y ) then
58436: LD_VAR 0 11
58440: PPUSH
58441: LD_VAR 0 12
58445: PPUSH
58446: CALL_OW 488
58450: NOT
58451: IFFALSE 58455
// continue ;
58453: GO 58433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58455: LD_VAR 0 11
58459: PPUSH
58460: LD_VAR 0 12
58464: PPUSH
58465: CALL_OW 351
58469: IFFALSE 58487
58471: PUSH
58472: LD_VAR 0 11
58476: PPUSH
58477: LD_VAR 0 12
58481: PPUSH
58482: CALL_OW 554
58486: AND
58487: IFFALSE 58527
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58489: LD_ADDR_VAR 0 13
58493: PUSH
58494: LD_VAR 0 13
58498: PPUSH
58499: LD_VAR 0 13
58503: PUSH
58504: LD_INT 1
58506: PLUS
58507: PPUSH
58508: LD_VAR 0 11
58512: PUSH
58513: LD_VAR 0 12
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PPUSH
58522: CALL_OW 2
58526: ST_TO_ADDR
// end ;
58527: GO 58433
58529: POP
58530: POP
58531: GO 58413
58533: POP
58534: POP
// if not list then
58535: LD_VAR 0 13
58539: NOT
58540: IFFALSE 58544
// exit ;
58542: GO 58615
// for i in list do
58544: LD_ADDR_VAR 0 6
58548: PUSH
58549: LD_VAR 0 13
58553: PUSH
58554: FOR_IN
58555: IFFALSE 58613
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_STRING M
58564: PUSH
58565: LD_VAR 0 6
58569: PUSH
58570: LD_INT 1
58572: ARRAY
58573: PUSH
58574: LD_VAR 0 6
58578: PUSH
58579: LD_INT 2
58581: ARRAY
58582: PUSH
58583: LD_INT 0
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: PUSH
58604: EMPTY
58605: LIST
58606: PPUSH
58607: CALL_OW 447
58611: GO 58554
58613: POP
58614: POP
// end ;
58615: LD_VAR 0 5
58619: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
58624: PPUSH
58625: PPUSH
58626: PPUSH
58627: PPUSH
58628: PPUSH
58629: PPUSH
58630: PPUSH
58631: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58632: LD_VAR 0 1
58636: PPUSH
58637: CALL_OW 302
58641: NOT
58642: IFTRUE 58661
58644: PUSH
58645: LD_VAR 0 2
58649: PPUSH
58650: LD_VAR 0 3
58654: PPUSH
58655: CALL_OW 488
58659: NOT
58660: OR
58661: IFTRUE 58670
58663: PUSH
58664: LD_VAR 0 4
58668: NOT
58669: OR
58670: IFFALSE 58674
// exit ;
58672: GO 59213
// if Count ( GetTaskList ( flame ) ) > 10 then
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 437
58683: PPUSH
58684: CALL 5226 0 1
58688: PUSH
58689: LD_INT 10
58691: GREATER
58692: IFFALSE 58696
// exit ;
58694: GO 59213
// list := [ ] ;
58696: LD_ADDR_VAR 0 13
58700: PUSH
58701: EMPTY
58702: ST_TO_ADDR
// if x - r < 0 then
58703: LD_VAR 0 2
58707: PUSH
58708: LD_VAR 0 4
58712: MINUS
58713: PUSH
58714: LD_INT 0
58716: LESS
58717: IFFALSE 58729
// min_x := 0 else
58719: LD_ADDR_VAR 0 7
58723: PUSH
58724: LD_INT 0
58726: ST_TO_ADDR
58727: GO 58745
// min_x := x - r ;
58729: LD_ADDR_VAR 0 7
58733: PUSH
58734: LD_VAR 0 2
58738: PUSH
58739: LD_VAR 0 4
58743: MINUS
58744: ST_TO_ADDR
// if y - r < 0 then
58745: LD_VAR 0 3
58749: PUSH
58750: LD_VAR 0 4
58754: MINUS
58755: PUSH
58756: LD_INT 0
58758: LESS
58759: IFFALSE 58771
// min_y := 0 else
58761: LD_ADDR_VAR 0 8
58765: PUSH
58766: LD_INT 0
58768: ST_TO_ADDR
58769: GO 58787
// min_y := y - r ;
58771: LD_ADDR_VAR 0 8
58775: PUSH
58776: LD_VAR 0 3
58780: PUSH
58781: LD_VAR 0 4
58785: MINUS
58786: ST_TO_ADDR
// max_x := x + r ;
58787: LD_ADDR_VAR 0 9
58791: PUSH
58792: LD_VAR 0 2
58796: PUSH
58797: LD_VAR 0 4
58801: PLUS
58802: ST_TO_ADDR
// max_y := y + r ;
58803: LD_ADDR_VAR 0 10
58807: PUSH
58808: LD_VAR 0 3
58812: PUSH
58813: LD_VAR 0 4
58817: PLUS
58818: ST_TO_ADDR
// for _x = min_x to max_x do
58819: LD_ADDR_VAR 0 11
58823: PUSH
58824: DOUBLE
58825: LD_VAR 0 7
58829: DEC
58830: ST_TO_ADDR
58831: LD_VAR 0 9
58835: PUSH
58836: FOR_TO
58837: IFFALSE 58956
// for _y = min_y to max_y do
58839: LD_ADDR_VAR 0 12
58843: PUSH
58844: DOUBLE
58845: LD_VAR 0 8
58849: DEC
58850: ST_TO_ADDR
58851: LD_VAR 0 10
58855: PUSH
58856: FOR_TO
58857: IFFALSE 58952
// begin if not ValidHex ( _x , _y ) then
58859: LD_VAR 0 11
58863: PPUSH
58864: LD_VAR 0 12
58868: PPUSH
58869: CALL_OW 488
58873: NOT
58874: IFFALSE 58878
// continue ;
58876: GO 58856
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58878: LD_VAR 0 11
58882: PPUSH
58883: LD_VAR 0 12
58887: PPUSH
58888: CALL_OW 351
58892: IFFALSE 58910
58894: PUSH
58895: LD_VAR 0 11
58899: PPUSH
58900: LD_VAR 0 12
58904: PPUSH
58905: CALL_OW 554
58909: AND
58910: IFFALSE 58950
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58912: LD_ADDR_VAR 0 13
58916: PUSH
58917: LD_VAR 0 13
58921: PPUSH
58922: LD_VAR 0 13
58926: PUSH
58927: LD_INT 1
58929: PLUS
58930: PPUSH
58931: LD_VAR 0 11
58935: PUSH
58936: LD_VAR 0 12
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PPUSH
58945: CALL_OW 2
58949: ST_TO_ADDR
// end ;
58950: GO 58856
58952: POP
58953: POP
58954: GO 58836
58956: POP
58957: POP
// if not list then
58958: LD_VAR 0 13
58962: NOT
58963: IFFALSE 58967
// exit ;
58965: GO 59213
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58967: LD_ADDR_VAR 0 13
58971: PUSH
58972: LD_VAR 0 1
58976: PPUSH
58977: LD_VAR 0 13
58981: PPUSH
58982: LD_INT 1
58984: PPUSH
58985: LD_INT 1
58987: PPUSH
58988: CALL 8632 0 4
58992: ST_TO_ADDR
// ComStop ( flame ) ;
58993: LD_VAR 0 1
58997: PPUSH
58998: CALL_OW 141
// for i in list do
59002: LD_ADDR_VAR 0 6
59006: PUSH
59007: LD_VAR 0 13
59011: PUSH
59012: FOR_IN
59013: IFFALSE 59044
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59015: LD_VAR 0 1
59019: PPUSH
59020: LD_VAR 0 6
59024: PUSH
59025: LD_INT 1
59027: ARRAY
59028: PPUSH
59029: LD_VAR 0 6
59033: PUSH
59034: LD_INT 2
59036: ARRAY
59037: PPUSH
59038: CALL_OW 176
59042: GO 59012
59044: POP
59045: POP
// repeat wait ( 0 0$1 ) ;
59046: LD_INT 35
59048: PPUSH
59049: CALL_OW 67
// task := GetTaskList ( flame ) ;
59053: LD_ADDR_VAR 0 14
59057: PUSH
59058: LD_VAR 0 1
59062: PPUSH
59063: CALL_OW 437
59067: ST_TO_ADDR
// if not task then
59068: LD_VAR 0 14
59072: NOT
59073: IFFALSE 59077
// exit ;
59075: GO 59213
// if task [ 1 ] [ 1 ] <> | then
59077: LD_VAR 0 14
59081: PUSH
59082: LD_INT 1
59084: ARRAY
59085: PUSH
59086: LD_INT 1
59088: ARRAY
59089: PUSH
59090: LD_STRING |
59092: NONEQUAL
59093: IFFALSE 59097
// exit ;
59095: GO 59213
// _x := task [ 1 ] [ 2 ] ;
59097: LD_ADDR_VAR 0 11
59101: PUSH
59102: LD_VAR 0 14
59106: PUSH
59107: LD_INT 1
59109: ARRAY
59110: PUSH
59111: LD_INT 2
59113: ARRAY
59114: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59115: LD_ADDR_VAR 0 12
59119: PUSH
59120: LD_VAR 0 14
59124: PUSH
59125: LD_INT 1
59127: ARRAY
59128: PUSH
59129: LD_INT 3
59131: ARRAY
59132: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59133: LD_VAR 0 11
59137: PPUSH
59138: LD_VAR 0 12
59142: PPUSH
59143: CALL_OW 351
59147: NOT
59148: IFTRUE 59167
59150: PUSH
59151: LD_VAR 0 11
59155: PPUSH
59156: LD_VAR 0 12
59160: PPUSH
59161: CALL_OW 554
59165: NOT
59166: OR
59167: IFFALSE 59201
// begin task := Delete ( task , 1 ) ;
59169: LD_ADDR_VAR 0 14
59173: PUSH
59174: LD_VAR 0 14
59178: PPUSH
59179: LD_INT 1
59181: PPUSH
59182: CALL_OW 3
59186: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59187: LD_VAR 0 1
59191: PPUSH
59192: LD_VAR 0 14
59196: PPUSH
59197: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59201: LD_VAR 0 1
59205: PPUSH
59206: CALL_OW 314
59210: NOT
59211: IFFALSE 59046
// end ;
59213: LD_VAR 0 5
59217: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59218: LD_EXP 49
59222: NOT
59223: IFFALSE 59273
59225: GO 59227
59227: DISABLE
// begin initHack := true ;
59228: LD_ADDR_EXP 49
59232: PUSH
59233: LD_INT 1
59235: ST_TO_ADDR
// hackTanks := [ ] ;
59236: LD_ADDR_EXP 50
59240: PUSH
59241: EMPTY
59242: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59243: LD_ADDR_EXP 51
59247: PUSH
59248: EMPTY
59249: ST_TO_ADDR
// hackLimit := 3 ;
59250: LD_ADDR_EXP 52
59254: PUSH
59255: LD_INT 3
59257: ST_TO_ADDR
// hackDist := 12 ;
59258: LD_ADDR_EXP 53
59262: PUSH
59263: LD_INT 12
59265: ST_TO_ADDR
// hackCounter := [ ] ;
59266: LD_ADDR_EXP 54
59270: PUSH
59271: EMPTY
59272: ST_TO_ADDR
// end ;
59273: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59274: LD_EXP 49
59278: IFFALSE 59296
59280: PUSH
59281: LD_INT 34
59283: PUSH
59284: LD_INT 99
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PPUSH
59291: CALL_OW 69
59295: AND
59296: IFFALSE 59549
59298: GO 59300
59300: DISABLE
59301: LD_INT 0
59303: PPUSH
59304: PPUSH
// begin enable ;
59305: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59306: LD_ADDR_VAR 0 1
59310: PUSH
59311: LD_INT 34
59313: PUSH
59314: LD_INT 99
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PPUSH
59321: CALL_OW 69
59325: PUSH
59326: FOR_IN
59327: IFFALSE 59547
// begin if not i in hackTanks then
59329: LD_VAR 0 1
59333: PUSH
59334: LD_EXP 50
59338: IN
59339: NOT
59340: IFFALSE 59423
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59342: LD_ADDR_EXP 50
59346: PUSH
59347: LD_EXP 50
59351: PPUSH
59352: LD_EXP 50
59356: PUSH
59357: LD_INT 1
59359: PLUS
59360: PPUSH
59361: LD_VAR 0 1
59365: PPUSH
59366: CALL_OW 1
59370: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59371: LD_ADDR_EXP 51
59375: PUSH
59376: LD_EXP 51
59380: PPUSH
59381: LD_EXP 51
59385: PUSH
59386: LD_INT 1
59388: PLUS
59389: PPUSH
59390: EMPTY
59391: PPUSH
59392: CALL_OW 1
59396: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59397: LD_ADDR_EXP 54
59401: PUSH
59402: LD_EXP 54
59406: PPUSH
59407: LD_EXP 54
59411: PUSH
59412: LD_INT 1
59414: PLUS
59415: PPUSH
59416: EMPTY
59417: PPUSH
59418: CALL_OW 1
59422: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59423: LD_VAR 0 1
59427: PPUSH
59428: CALL_OW 302
59432: NOT
59433: IFFALSE 59446
// begin HackUnlinkAll ( i ) ;
59435: LD_VAR 0 1
59439: PPUSH
59440: CALL 59552 0 1
// continue ;
59444: GO 59326
// end ; HackCheckCapturedStatus ( i ) ;
59446: LD_VAR 0 1
59450: PPUSH
59451: CALL 59997 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59455: LD_ADDR_VAR 0 2
59459: PUSH
59460: LD_INT 81
59462: PUSH
59463: LD_VAR 0 1
59467: PPUSH
59468: CALL_OW 255
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 33
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 91
59489: PUSH
59490: LD_VAR 0 1
59494: PUSH
59495: LD_EXP 53
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 50
59507: PUSH
59508: EMPTY
59509: LIST
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: PPUSH
59517: CALL_OW 69
59521: ST_TO_ADDR
// if not tmp then
59522: LD_VAR 0 2
59526: NOT
59527: IFFALSE 59531
// continue ;
59529: GO 59326
// HackLink ( i , tmp ) ;
59531: LD_VAR 0 1
59535: PPUSH
59536: LD_VAR 0 2
59540: PPUSH
59541: CALL 59688 0 2
// end ;
59545: GO 59326
59547: POP
59548: POP
// end ;
59549: PPOPN 2
59551: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59552: LD_INT 0
59554: PPUSH
59555: PPUSH
59556: PPUSH
// if not hack in hackTanks then
59557: LD_VAR 0 1
59561: PUSH
59562: LD_EXP 50
59566: IN
59567: NOT
59568: IFFALSE 59572
// exit ;
59570: GO 59683
// index := GetElementIndex ( hackTanks , hack ) ;
59572: LD_ADDR_VAR 0 4
59576: PUSH
59577: LD_EXP 50
59581: PPUSH
59582: LD_VAR 0 1
59586: PPUSH
59587: CALL 7927 0 2
59591: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59592: LD_EXP 51
59596: PUSH
59597: LD_VAR 0 4
59601: ARRAY
59602: IFFALSE 59683
// begin for i in hackTanksCaptured [ index ] do
59604: LD_ADDR_VAR 0 3
59608: PUSH
59609: LD_EXP 51
59613: PUSH
59614: LD_VAR 0 4
59618: ARRAY
59619: PUSH
59620: FOR_IN
59621: IFFALSE 59647
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59623: LD_VAR 0 3
59627: PUSH
59628: LD_INT 1
59630: ARRAY
59631: PPUSH
59632: LD_VAR 0 3
59636: PUSH
59637: LD_INT 2
59639: ARRAY
59640: PPUSH
59641: CALL_OW 235
59645: GO 59620
59647: POP
59648: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59649: LD_ADDR_EXP 51
59653: PUSH
59654: LD_EXP 51
59658: PPUSH
59659: LD_VAR 0 4
59663: PPUSH
59664: EMPTY
59665: PPUSH
59666: CALL_OW 1
59670: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59671: LD_VAR 0 1
59675: PPUSH
59676: LD_INT 0
59678: PPUSH
59679: CALL_OW 505
// end ; end ;
59683: LD_VAR 0 2
59687: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59688: LD_INT 0
59690: PPUSH
59691: PPUSH
59692: PPUSH
// if not hack in hackTanks or not vehicles then
59693: LD_VAR 0 1
59697: PUSH
59698: LD_EXP 50
59702: IN
59703: NOT
59704: IFTRUE 59713
59706: PUSH
59707: LD_VAR 0 2
59711: NOT
59712: OR
59713: IFFALSE 59717
// exit ;
59715: GO 59992
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59717: LD_ADDR_VAR 0 2
59721: PUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: LD_VAR 0 2
59731: PPUSH
59732: LD_INT 1
59734: PPUSH
59735: LD_INT 1
59737: PPUSH
59738: CALL 8579 0 4
59742: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59743: LD_ADDR_VAR 0 5
59747: PUSH
59748: LD_EXP 50
59752: PPUSH
59753: LD_VAR 0 1
59757: PPUSH
59758: CALL 7927 0 2
59762: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59763: LD_EXP 51
59767: PUSH
59768: LD_VAR 0 5
59772: ARRAY
59773: PUSH
59774: LD_EXP 52
59778: LESS
59779: IFFALSE 59968
// begin for i := 1 to vehicles do
59781: LD_ADDR_VAR 0 4
59785: PUSH
59786: DOUBLE
59787: LD_INT 1
59789: DEC
59790: ST_TO_ADDR
59791: LD_VAR 0 2
59795: PUSH
59796: FOR_TO
59797: IFFALSE 59966
// begin if hackTanksCaptured [ index ] = hackLimit then
59799: LD_EXP 51
59803: PUSH
59804: LD_VAR 0 5
59808: ARRAY
59809: PUSH
59810: LD_EXP 52
59814: EQUAL
59815: IFFALSE 59819
// break ;
59817: GO 59966
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59819: LD_ADDR_EXP 54
59823: PUSH
59824: LD_EXP 54
59828: PPUSH
59829: LD_VAR 0 5
59833: PPUSH
59834: LD_EXP 54
59838: PUSH
59839: LD_VAR 0 5
59843: ARRAY
59844: PUSH
59845: LD_INT 1
59847: PLUS
59848: PPUSH
59849: CALL_OW 1
59853: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59854: LD_ADDR_EXP 51
59858: PUSH
59859: LD_EXP 51
59863: PPUSH
59864: LD_VAR 0 5
59868: PUSH
59869: LD_EXP 51
59873: PUSH
59874: LD_VAR 0 5
59878: ARRAY
59879: PUSH
59880: LD_INT 1
59882: PLUS
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PPUSH
59888: LD_VAR 0 2
59892: PUSH
59893: LD_VAR 0 4
59897: ARRAY
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: LD_VAR 0 4
59908: ARRAY
59909: PPUSH
59910: CALL_OW 255
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PPUSH
59919: CALL 8144 0 3
59923: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59924: LD_VAR 0 2
59928: PUSH
59929: LD_VAR 0 4
59933: ARRAY
59934: PPUSH
59935: LD_VAR 0 1
59939: PPUSH
59940: CALL_OW 255
59944: PPUSH
59945: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59949: LD_VAR 0 2
59953: PUSH
59954: LD_VAR 0 4
59958: ARRAY
59959: PPUSH
59960: CALL_OW 141
// end ;
59964: GO 59796
59966: POP
59967: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59968: LD_VAR 0 1
59972: PPUSH
59973: LD_EXP 51
59977: PUSH
59978: LD_VAR 0 5
59982: ARRAY
59983: PUSH
59984: LD_INT 0
59986: PLUS
59987: PPUSH
59988: CALL_OW 505
// end ;
59992: LD_VAR 0 3
59996: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59997: LD_INT 0
59999: PPUSH
60000: PPUSH
60001: PPUSH
60002: PPUSH
// if not hack in hackTanks then
60003: LD_VAR 0 1
60007: PUSH
60008: LD_EXP 50
60012: IN
60013: NOT
60014: IFFALSE 60018
// exit ;
60016: GO 60262
// index := GetElementIndex ( hackTanks , hack ) ;
60018: LD_ADDR_VAR 0 4
60022: PUSH
60023: LD_EXP 50
60027: PPUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: CALL 7927 0 2
60037: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60038: LD_ADDR_VAR 0 3
60042: PUSH
60043: DOUBLE
60044: LD_EXP 51
60048: PUSH
60049: LD_VAR 0 4
60053: ARRAY
60054: INC
60055: ST_TO_ADDR
60056: LD_INT 1
60058: PUSH
60059: FOR_DOWNTO
60060: IFFALSE 60236
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60062: LD_ADDR_VAR 0 5
60066: PUSH
60067: LD_EXP 51
60071: PUSH
60072: LD_VAR 0 4
60076: ARRAY
60077: PUSH
60078: LD_VAR 0 3
60082: ARRAY
60083: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60084: LD_VAR 0 5
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PPUSH
60093: CALL_OW 302
60097: NOT
60098: IFTRUE 60126
60100: PUSH
60101: LD_VAR 0 5
60105: PUSH
60106: LD_INT 1
60108: ARRAY
60109: PPUSH
60110: CALL_OW 255
60114: PUSH
60115: LD_VAR 0 1
60119: PPUSH
60120: CALL_OW 255
60124: NONEQUAL
60125: OR
60126: IFFALSE 60234
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60128: LD_VAR 0 5
60132: PUSH
60133: LD_INT 1
60135: ARRAY
60136: PPUSH
60137: CALL_OW 305
60141: IFFALSE 60169
60143: PUSH
60144: LD_VAR 0 5
60148: PUSH
60149: LD_INT 1
60151: ARRAY
60152: PPUSH
60153: CALL_OW 255
60157: PUSH
60158: LD_VAR 0 1
60162: PPUSH
60163: CALL_OW 255
60167: EQUAL
60168: AND
60169: IFFALSE 60193
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60171: LD_VAR 0 5
60175: PUSH
60176: LD_INT 1
60178: ARRAY
60179: PPUSH
60180: LD_VAR 0 5
60184: PUSH
60185: LD_INT 2
60187: ARRAY
60188: PPUSH
60189: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60193: LD_ADDR_EXP 51
60197: PUSH
60198: LD_EXP 51
60202: PPUSH
60203: LD_VAR 0 4
60207: PPUSH
60208: LD_EXP 51
60212: PUSH
60213: LD_VAR 0 4
60217: ARRAY
60218: PPUSH
60219: LD_VAR 0 3
60223: PPUSH
60224: CALL_OW 3
60228: PPUSH
60229: CALL_OW 1
60233: ST_TO_ADDR
// end ; end ;
60234: GO 60059
60236: POP
60237: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60238: LD_VAR 0 1
60242: PPUSH
60243: LD_EXP 51
60247: PUSH
60248: LD_VAR 0 4
60252: ARRAY
60253: PUSH
60254: LD_INT 0
60256: PLUS
60257: PPUSH
60258: CALL_OW 505
// end ;
60262: LD_VAR 0 2
60266: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60267: LD_INT 0
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
// if not hack in hackTanks then
60273: LD_VAR 0 1
60277: PUSH
60278: LD_EXP 50
60282: IN
60283: NOT
60284: IFFALSE 60288
// exit ;
60286: GO 60373
// index := GetElementIndex ( hackTanks , hack ) ;
60288: LD_ADDR_VAR 0 5
60292: PUSH
60293: LD_EXP 50
60297: PPUSH
60298: LD_VAR 0 1
60302: PPUSH
60303: CALL 7927 0 2
60307: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60308: LD_ADDR_VAR 0 4
60312: PUSH
60313: DOUBLE
60314: LD_INT 1
60316: DEC
60317: ST_TO_ADDR
60318: LD_EXP 51
60322: PUSH
60323: LD_VAR 0 5
60327: ARRAY
60328: PUSH
60329: FOR_TO
60330: IFFALSE 60371
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60332: LD_EXP 51
60336: PUSH
60337: LD_VAR 0 5
60341: ARRAY
60342: PUSH
60343: LD_VAR 0 4
60347: ARRAY
60348: PUSH
60349: LD_INT 1
60351: ARRAY
60352: PUSH
60353: LD_VAR 0 2
60357: EQUAL
60358: IFFALSE 60369
// KillUnit ( vehicle ) ;
60360: LD_VAR 0 2
60364: PPUSH
60365: CALL_OW 66
60369: GO 60329
60371: POP
60372: POP
// end ;
60373: LD_VAR 0 3
60377: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60378: LD_EXP 55
60382: NOT
60383: IFFALSE 60516
60385: GO 60387
60387: DISABLE
60388: LD_INT 0
60390: PPUSH
// begin initMiner := true ;
60391: LD_ADDR_EXP 55
60395: PUSH
60396: LD_INT 1
60398: ST_TO_ADDR
// minersList := [ ] ;
60399: LD_ADDR_EXP 56
60403: PUSH
60404: EMPTY
60405: ST_TO_ADDR
// minerMinesList := [ ] ;
60406: LD_ADDR_EXP 57
60410: PUSH
60411: EMPTY
60412: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60413: LD_ADDR_EXP 58
60417: PUSH
60418: LD_INT 10
60420: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60421: LD_ADDR_VAR 0 1
60425: PUSH
60426: LD_INT 34
60428: PUSH
60429: LD_INT 81
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PPUSH
60436: CALL_OW 69
60440: PUSH
60441: FOR_IN
60442: IFFALSE 60514
// begin if not i in minersList then
60444: LD_VAR 0 1
60448: PUSH
60449: LD_EXP 56
60453: IN
60454: NOT
60455: IFFALSE 60512
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60457: LD_ADDR_EXP 56
60461: PUSH
60462: LD_EXP 56
60466: PPUSH
60467: LD_EXP 56
60471: PUSH
60472: LD_INT 1
60474: PLUS
60475: PPUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: CALL_OW 1
60485: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60486: LD_ADDR_EXP 57
60490: PUSH
60491: LD_EXP 57
60495: PPUSH
60496: LD_EXP 57
60500: PUSH
60501: LD_INT 1
60503: PLUS
60504: PPUSH
60505: EMPTY
60506: PPUSH
60507: CALL_OW 1
60511: ST_TO_ADDR
// end end ;
60512: GO 60441
60514: POP
60515: POP
// end ;
60516: PPOPN 1
60518: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60519: LD_EXP 55
60523: IFFALSE 60554
60525: PUSH
60526: LD_EXP 57
60530: PPUSH
60531: CALL 5226 0 1
60535: IFTRUE 60553
60537: PUSH
60538: LD_INT 34
60540: PUSH
60541: LD_INT 81
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PPUSH
60548: CALL_OW 69
60552: OR
60553: AND
60554: IFFALSE 61074
60556: GO 60558
60558: DISABLE
60559: LD_INT 0
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
// begin enable ;
60565: ENABLE
// for i := minerMinesList downto 1 do
60566: LD_ADDR_VAR 0 1
60570: PUSH
60571: DOUBLE
60572: LD_EXP 57
60576: INC
60577: ST_TO_ADDR
60578: LD_INT 1
60580: PUSH
60581: FOR_DOWNTO
60582: IFFALSE 61072
// begin side := GetSide ( minersList [ i ] ) ;
60584: LD_ADDR_VAR 0 3
60588: PUSH
60589: LD_EXP 56
60593: PUSH
60594: LD_VAR 0 1
60598: ARRAY
60599: PPUSH
60600: CALL_OW 255
60604: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60605: LD_EXP 56
60609: PUSH
60610: LD_VAR 0 1
60614: ARRAY
60615: PPUSH
60616: CALL_OW 300
60620: IFFALSE 60641
60622: PUSH
60623: LD_VAR 0 3
60627: PUSH
60628: LD_OWVAR 2
60632: PUSH
60633: LD_INT 9
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: IN
60640: AND
60641: IFFALSE 60674
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60643: LD_EXP 56
60647: PUSH
60648: LD_VAR 0 1
60652: ARRAY
60653: PPUSH
60654: LD_EXP 57
60658: PUSH
60659: LD_VAR 0 1
60663: ARRAY
60664: PPUSH
60665: CALL 5226 0 1
60669: PPUSH
60670: CALL_OW 505
// if not minerMinesList [ i ] then
60674: LD_EXP 57
60678: PUSH
60679: LD_VAR 0 1
60683: ARRAY
60684: NOT
60685: IFFALSE 60689
// continue ;
60687: GO 60581
// for j := minerMinesList [ i ] downto 1 do
60689: LD_ADDR_VAR 0 2
60693: PUSH
60694: DOUBLE
60695: LD_EXP 57
60699: PUSH
60700: LD_VAR 0 1
60704: ARRAY
60705: INC
60706: ST_TO_ADDR
60707: LD_INT 1
60709: PUSH
60710: FOR_DOWNTO
60711: IFFALSE 61068
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60713: LD_EXP 56
60717: PUSH
60718: LD_VAR 0 1
60722: ARRAY
60723: PPUSH
60724: CALL_OW 301
60728: IFTRUE 60748
60730: PUSH
60731: LD_EXP 56
60735: PUSH
60736: LD_VAR 0 1
60740: ARRAY
60741: PPUSH
60742: CALL_OW 305
60746: NOT
60747: OR
60748: IFFALSE 60839
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60750: LD_EXP 57
60754: PUSH
60755: LD_VAR 0 1
60759: ARRAY
60760: PUSH
60761: LD_VAR 0 2
60765: ARRAY
60766: PUSH
60767: LD_INT 1
60769: ARRAY
60770: PPUSH
60771: LD_EXP 57
60775: PUSH
60776: LD_VAR 0 1
60780: ARRAY
60781: PUSH
60782: LD_VAR 0 2
60786: ARRAY
60787: PUSH
60788: LD_INT 2
60790: ARRAY
60791: PPUSH
60792: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60796: LD_ADDR_EXP 57
60800: PUSH
60801: LD_EXP 57
60805: PPUSH
60806: LD_VAR 0 1
60810: PPUSH
60811: LD_EXP 57
60815: PUSH
60816: LD_VAR 0 1
60820: ARRAY
60821: PPUSH
60822: LD_VAR 0 2
60826: PPUSH
60827: CALL_OW 3
60831: PPUSH
60832: CALL_OW 1
60836: ST_TO_ADDR
// continue ;
60837: GO 60710
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60839: LD_ADDR_VAR 0 4
60843: PUSH
60844: LD_EXP 57
60848: PUSH
60849: LD_VAR 0 1
60853: ARRAY
60854: PUSH
60855: LD_VAR 0 2
60859: ARRAY
60860: PUSH
60861: LD_INT 1
60863: ARRAY
60864: PPUSH
60865: LD_EXP 57
60869: PUSH
60870: LD_VAR 0 1
60874: ARRAY
60875: PUSH
60876: LD_VAR 0 2
60880: ARRAY
60881: PUSH
60882: LD_INT 2
60884: ARRAY
60885: PPUSH
60886: CALL_OW 428
60890: ST_TO_ADDR
// if not tmp then
60891: LD_VAR 0 4
60895: NOT
60896: IFFALSE 60900
// continue ;
60898: GO 60710
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60900: LD_VAR 0 4
60904: PUSH
60905: LD_INT 81
60907: PUSH
60908: LD_VAR 0 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PPUSH
60917: CALL_OW 69
60921: IN
60922: IFFALSE 60972
60924: PUSH
60925: LD_EXP 57
60929: PUSH
60930: LD_VAR 0 1
60934: ARRAY
60935: PUSH
60936: LD_VAR 0 2
60940: ARRAY
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PPUSH
60946: LD_EXP 57
60950: PUSH
60951: LD_VAR 0 1
60955: ARRAY
60956: PUSH
60957: LD_VAR 0 2
60961: ARRAY
60962: PUSH
60963: LD_INT 2
60965: ARRAY
60966: PPUSH
60967: CALL_OW 458
60971: AND
60972: IFFALSE 61066
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60974: LD_EXP 57
60978: PUSH
60979: LD_VAR 0 1
60983: ARRAY
60984: PUSH
60985: LD_VAR 0 2
60989: ARRAY
60990: PUSH
60991: LD_INT 1
60993: ARRAY
60994: PPUSH
60995: LD_EXP 57
60999: PUSH
61000: LD_VAR 0 1
61004: ARRAY
61005: PUSH
61006: LD_VAR 0 2
61010: ARRAY
61011: PUSH
61012: LD_INT 2
61014: ARRAY
61015: PPUSH
61016: LD_VAR 0 3
61020: PPUSH
61021: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61025: LD_ADDR_EXP 57
61029: PUSH
61030: LD_EXP 57
61034: PPUSH
61035: LD_VAR 0 1
61039: PPUSH
61040: LD_EXP 57
61044: PUSH
61045: LD_VAR 0 1
61049: ARRAY
61050: PPUSH
61051: LD_VAR 0 2
61055: PPUSH
61056: CALL_OW 3
61060: PPUSH
61061: CALL_OW 1
61065: ST_TO_ADDR
// end ; end ;
61066: GO 60710
61068: POP
61069: POP
// end ;
61070: GO 60581
61072: POP
61073: POP
// end ;
61074: PPOPN 4
61076: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61077: LD_INT 0
61079: PPUSH
61080: PPUSH
61081: PPUSH
61082: PPUSH
// result := false ;
61083: LD_ADDR_VAR 0 4
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61091: LD_VAR 0 1
61095: PPUSH
61096: CALL_OW 264
61100: PUSH
61101: LD_INT 81
61103: EQUAL
61104: NOT
61105: IFFALSE 61109
// exit ;
61107: GO 61479
// side := GetSide ( unit ) ;
61109: LD_ADDR_VAR 0 6
61113: PUSH
61114: LD_VAR 0 1
61118: PPUSH
61119: CALL_OW 255
61123: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61124: LD_ADDR_VAR 0 5
61128: PUSH
61129: LD_EXP 56
61133: PPUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL 7927 0 2
61143: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61144: LD_EXP 57
61148: PUSH
61149: LD_VAR 0 5
61153: ARRAY
61154: PUSH
61155: LD_EXP 58
61159: GREATEREQUAL
61160: IFFALSE 61164
// exit ;
61162: GO 61479
// ComMoveXY ( unit , x , y ) ;
61164: LD_VAR 0 1
61168: PPUSH
61169: LD_VAR 0 2
61173: PPUSH
61174: LD_VAR 0 3
61178: PPUSH
61179: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61183: LD_INT 35
61185: PPUSH
61186: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61190: LD_VAR 0 1
61194: PPUSH
61195: LD_VAR 0 2
61199: PPUSH
61200: LD_VAR 0 3
61204: PPUSH
61205: CALL 39983 0 3
61209: NOT
61210: IFFALSE 61223
61212: PUSH
61213: LD_VAR 0 1
61217: PPUSH
61218: CALL_OW 314
61222: AND
61223: IFFALSE 61227
// exit ;
61225: GO 61479
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61227: LD_VAR 0 2
61231: PPUSH
61232: LD_VAR 0 3
61236: PPUSH
61237: CALL_OW 428
61241: PUSH
61242: LD_VAR 0 1
61246: EQUAL
61247: IFFALSE 61261
61249: PUSH
61250: LD_VAR 0 1
61254: PPUSH
61255: CALL_OW 314
61259: NOT
61260: AND
61261: IFFALSE 61183
// if MineAtPos ( x , y ) then
61263: LD_VAR 0 2
61267: PPUSH
61268: LD_VAR 0 3
61272: PPUSH
61273: CALL_OW 458
61277: IFFALSE 61281
// exit ;
61279: GO 61479
// if your_side = side then
61281: LD_OWVAR 2
61285: PUSH
61286: LD_VAR 0 6
61290: EQUAL
61291: IFFALSE 61310
// PlaySoundXY ( x , y , PlantMine ) ;
61293: LD_VAR 0 2
61297: PPUSH
61298: LD_VAR 0 3
61302: PPUSH
61303: LD_STRING PlantMine
61305: PPUSH
61306: CALL_OW 366
// repeat wait ( 1 ) ;
61310: LD_INT 1
61312: PPUSH
61313: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61317: LD_VAR 0 2
61321: PPUSH
61322: LD_VAR 0 3
61326: PPUSH
61327: LD_VAR 0 6
61331: PPUSH
61332: LD_INT 0
61334: PPUSH
61335: CALL_OW 454
61339: IFFALSE 61310
// if MineAtPos ( x , y ) then
61341: LD_VAR 0 2
61345: PPUSH
61346: LD_VAR 0 3
61350: PPUSH
61351: CALL_OW 458
61355: IFFALSE 61471
// begin for i in minerMinesList [ index ] do
61357: LD_ADDR_VAR 0 7
61361: PUSH
61362: LD_EXP 57
61366: PUSH
61367: LD_VAR 0 5
61371: ARRAY
61372: PUSH
61373: FOR_IN
61374: IFFALSE 61416
// if i [ 1 ] = x and i [ 2 ] = y then
61376: LD_VAR 0 7
61380: PUSH
61381: LD_INT 1
61383: ARRAY
61384: PUSH
61385: LD_VAR 0 2
61389: EQUAL
61390: IFFALSE 61408
61392: PUSH
61393: LD_VAR 0 7
61397: PUSH
61398: LD_INT 2
61400: ARRAY
61401: PUSH
61402: LD_VAR 0 3
61406: EQUAL
61407: AND
61408: IFFALSE 61414
// exit ;
61410: POP
61411: POP
61412: GO 61479
61414: GO 61373
61416: POP
61417: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61418: LD_ADDR_EXP 57
61422: PUSH
61423: LD_EXP 57
61427: PPUSH
61428: LD_VAR 0 5
61432: PUSH
61433: LD_EXP 57
61437: PUSH
61438: LD_VAR 0 5
61442: ARRAY
61443: PUSH
61444: LD_INT 1
61446: PLUS
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PPUSH
61452: LD_VAR 0 2
61456: PUSH
61457: LD_VAR 0 3
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PPUSH
61466: CALL 8144 0 3
61470: ST_TO_ADDR
// end ; result := true ;
61471: LD_ADDR_VAR 0 4
61475: PUSH
61476: LD_INT 1
61478: ST_TO_ADDR
// end ;
61479: LD_VAR 0 4
61483: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61484: LD_INT 0
61486: PPUSH
61487: PPUSH
61488: PPUSH
// if not unit in minersList then
61489: LD_VAR 0 1
61493: PUSH
61494: LD_EXP 56
61498: IN
61499: NOT
61500: IFFALSE 61504
// exit ;
61502: GO 61711
// index := GetElementIndex ( minersList , unit ) ;
61504: LD_ADDR_VAR 0 6
61508: PUSH
61509: LD_EXP 56
61513: PPUSH
61514: LD_VAR 0 1
61518: PPUSH
61519: CALL 7927 0 2
61523: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61524: LD_ADDR_VAR 0 5
61528: PUSH
61529: DOUBLE
61530: LD_EXP 57
61534: PUSH
61535: LD_VAR 0 6
61539: ARRAY
61540: INC
61541: ST_TO_ADDR
61542: LD_INT 1
61544: PUSH
61545: FOR_DOWNTO
61546: IFFALSE 61709
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61548: LD_EXP 57
61552: PUSH
61553: LD_VAR 0 6
61557: ARRAY
61558: PUSH
61559: LD_VAR 0 5
61563: ARRAY
61564: PUSH
61565: LD_INT 1
61567: ARRAY
61568: PPUSH
61569: LD_EXP 57
61573: PUSH
61574: LD_VAR 0 6
61578: ARRAY
61579: PUSH
61580: LD_VAR 0 5
61584: ARRAY
61585: PUSH
61586: LD_INT 2
61588: ARRAY
61589: PPUSH
61590: LD_VAR 0 2
61594: PPUSH
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 298
61604: PUSH
61605: LD_INT 6
61607: LESS
61608: IFFALSE 61707
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61610: LD_EXP 57
61614: PUSH
61615: LD_VAR 0 6
61619: ARRAY
61620: PUSH
61621: LD_VAR 0 5
61625: ARRAY
61626: PUSH
61627: LD_INT 1
61629: ARRAY
61630: PPUSH
61631: LD_EXP 57
61635: PUSH
61636: LD_VAR 0 6
61640: ARRAY
61641: PUSH
61642: LD_VAR 0 5
61646: ARRAY
61647: PUSH
61648: LD_INT 2
61650: ARRAY
61651: PPUSH
61652: LD_VAR 0 1
61656: PPUSH
61657: CALL_OW 255
61661: PPUSH
61662: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61666: LD_ADDR_EXP 57
61670: PUSH
61671: LD_EXP 57
61675: PPUSH
61676: LD_VAR 0 6
61680: PPUSH
61681: LD_EXP 57
61685: PUSH
61686: LD_VAR 0 6
61690: ARRAY
61691: PPUSH
61692: LD_VAR 0 5
61696: PPUSH
61697: CALL_OW 3
61701: PPUSH
61702: CALL_OW 1
61706: ST_TO_ADDR
// end ; end ;
61707: GO 61545
61709: POP
61710: POP
// end ;
61711: LD_VAR 0 4
61715: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61716: LD_INT 0
61718: PPUSH
61719: PPUSH
61720: PPUSH
61721: PPUSH
61722: PPUSH
61723: PPUSH
61724: PPUSH
61725: PPUSH
61726: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61727: LD_VAR 0 1
61731: PPUSH
61732: CALL_OW 264
61736: PUSH
61737: LD_INT 81
61739: EQUAL
61740: NOT
61741: IFTRUE 61756
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: LD_EXP 56
61753: IN
61754: NOT
61755: OR
61756: IFFALSE 61760
// exit ;
61758: GO 62086
// index := GetElementIndex ( minersList , unit ) ;
61760: LD_ADDR_VAR 0 6
61764: PUSH
61765: LD_EXP 56
61769: PPUSH
61770: LD_VAR 0 1
61774: PPUSH
61775: CALL 7927 0 2
61779: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61780: LD_ADDR_VAR 0 8
61784: PUSH
61785: LD_EXP 58
61789: PUSH
61790: LD_EXP 57
61794: PUSH
61795: LD_VAR 0 6
61799: ARRAY
61800: MINUS
61801: ST_TO_ADDR
// if not minesFreeAmount then
61802: LD_VAR 0 8
61806: NOT
61807: IFFALSE 61811
// exit ;
61809: GO 62086
// tmp := [ ] ;
61811: LD_ADDR_VAR 0 7
61815: PUSH
61816: EMPTY
61817: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61818: LD_ADDR_VAR 0 5
61822: PUSH
61823: DOUBLE
61824: LD_INT 1
61826: DEC
61827: ST_TO_ADDR
61828: LD_VAR 0 8
61832: PUSH
61833: FOR_TO
61834: IFFALSE 62033
// begin _d := rand ( 0 , 5 ) ;
61836: LD_ADDR_VAR 0 11
61840: PUSH
61841: LD_INT 0
61843: PPUSH
61844: LD_INT 5
61846: PPUSH
61847: CALL_OW 12
61851: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61852: LD_ADDR_VAR 0 12
61856: PUSH
61857: LD_INT 2
61859: PPUSH
61860: LD_INT 6
61862: PPUSH
61863: CALL_OW 12
61867: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61868: LD_ADDR_VAR 0 9
61872: PUSH
61873: LD_VAR 0 2
61877: PPUSH
61878: LD_VAR 0 11
61882: PPUSH
61883: LD_VAR 0 12
61887: PPUSH
61888: CALL_OW 272
61892: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61893: LD_ADDR_VAR 0 10
61897: PUSH
61898: LD_VAR 0 3
61902: PPUSH
61903: LD_VAR 0 11
61907: PPUSH
61908: LD_VAR 0 12
61912: PPUSH
61913: CALL_OW 273
61917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61918: LD_VAR 0 9
61922: PPUSH
61923: LD_VAR 0 10
61927: PPUSH
61928: CALL_OW 488
61932: IFFALSE 61956
61934: PUSH
61935: LD_VAR 0 9
61939: PUSH
61940: LD_VAR 0 10
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_VAR 0 7
61953: IN
61954: NOT
61955: AND
61956: IFFALSE 61975
61958: PUSH
61959: LD_VAR 0 9
61963: PPUSH
61964: LD_VAR 0 10
61968: PPUSH
61969: CALL_OW 458
61973: NOT
61974: AND
61975: IFFALSE 62017
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61977: LD_ADDR_VAR 0 7
61981: PUSH
61982: LD_VAR 0 7
61986: PPUSH
61987: LD_VAR 0 7
61991: PUSH
61992: LD_INT 1
61994: PLUS
61995: PPUSH
61996: LD_VAR 0 9
62000: PUSH
62001: LD_VAR 0 10
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PPUSH
62010: CALL_OW 1
62014: ST_TO_ADDR
62015: GO 62031
// i := i - 1 ;
62017: LD_ADDR_VAR 0 5
62021: PUSH
62022: LD_VAR 0 5
62026: PUSH
62027: LD_INT 1
62029: MINUS
62030: ST_TO_ADDR
// end ;
62031: GO 61833
62033: POP
62034: POP
// for i in tmp do
62035: LD_ADDR_VAR 0 5
62039: PUSH
62040: LD_VAR 0 7
62044: PUSH
62045: FOR_IN
62046: IFFALSE 62084
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62048: LD_VAR 0 1
62052: PPUSH
62053: LD_VAR 0 5
62057: PUSH
62058: LD_INT 1
62060: ARRAY
62061: PPUSH
62062: LD_VAR 0 5
62066: PUSH
62067: LD_INT 2
62069: ARRAY
62070: PPUSH
62071: CALL 61077 0 3
62075: NOT
62076: IFFALSE 62082
// exit ;
62078: POP
62079: POP
62080: GO 62086
62082: GO 62045
62084: POP
62085: POP
// end ;
62086: LD_VAR 0 4
62090: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62091: LD_INT 0
62093: PPUSH
62094: PPUSH
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
62101: PPUSH
// if GetClass ( unit ) <> class_sniper then
62102: LD_VAR 0 1
62106: PPUSH
62107: CALL_OW 257
62111: PUSH
62112: LD_INT 5
62114: NONEQUAL
62115: IFFALSE 62119
// exit ;
62117: GO 62589
// dist := 8 ;
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: LD_INT 8
62126: ST_TO_ADDR
// viewRange := 12 ;
62127: LD_ADDR_VAR 0 8
62131: PUSH
62132: LD_INT 12
62134: ST_TO_ADDR
// side := GetSide ( unit ) ;
62135: LD_ADDR_VAR 0 6
62139: PUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 255
62149: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62150: LD_INT 61
62152: PPUSH
62153: LD_VAR 0 6
62157: PPUSH
62158: CALL_OW 321
62162: PUSH
62163: LD_INT 2
62165: EQUAL
62166: IFFALSE 62176
// viewRange := 16 ;
62168: LD_ADDR_VAR 0 8
62172: PUSH
62173: LD_INT 16
62175: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62176: LD_VAR 0 1
62180: PPUSH
62181: LD_VAR 0 2
62185: PPUSH
62186: LD_VAR 0 3
62190: PPUSH
62191: CALL_OW 297
62195: PUSH
62196: LD_VAR 0 5
62200: GREATER
62201: IFFALSE 62280
// begin ComMoveXY ( unit , x , y ) ;
62203: LD_VAR 0 1
62207: PPUSH
62208: LD_VAR 0 2
62212: PPUSH
62213: LD_VAR 0 3
62217: PPUSH
62218: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62222: LD_INT 35
62224: PPUSH
62225: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62229: LD_VAR 0 1
62233: PPUSH
62234: LD_VAR 0 2
62238: PPUSH
62239: LD_VAR 0 3
62243: PPUSH
62244: CALL 39983 0 3
62248: NOT
62249: IFFALSE 62253
// exit ;
62251: GO 62589
// until GetDistUnitXY ( unit , x , y ) < dist ;
62253: LD_VAR 0 1
62257: PPUSH
62258: LD_VAR 0 2
62262: PPUSH
62263: LD_VAR 0 3
62267: PPUSH
62268: CALL_OW 297
62272: PUSH
62273: LD_VAR 0 5
62277: LESS
62278: IFFALSE 62222
// end ; ComTurnXY ( unit , x , y ) ;
62280: LD_VAR 0 1
62284: PPUSH
62285: LD_VAR 0 2
62289: PPUSH
62290: LD_VAR 0 3
62294: PPUSH
62295: CALL_OW 118
// repeat if Multiplayer then
62299: LD_OWVAR 4
62303: IFFALSE 62314
// wait ( 35 ) else
62305: LD_INT 35
62307: PPUSH
62308: CALL_OW 67
62312: GO 62321
// wait ( 5 ) ;
62314: LD_INT 5
62316: PPUSH
62317: CALL_OW 67
// _d := GetDir ( unit ) ;
62321: LD_ADDR_VAR 0 11
62325: PUSH
62326: LD_VAR 0 1
62330: PPUSH
62331: CALL_OW 254
62335: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62336: LD_ADDR_VAR 0 7
62340: PUSH
62341: LD_VAR 0 1
62345: PPUSH
62346: CALL_OW 250
62350: PPUSH
62351: LD_VAR 0 1
62355: PPUSH
62356: CALL_OW 251
62360: PPUSH
62361: LD_VAR 0 2
62365: PPUSH
62366: LD_VAR 0 3
62370: PPUSH
62371: CALL 42619 0 4
62375: ST_TO_ADDR
// until dir = _d ;
62376: LD_VAR 0 7
62380: PUSH
62381: LD_VAR 0 11
62385: EQUAL
62386: IFFALSE 62299
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62388: LD_ADDR_VAR 0 9
62392: PUSH
62393: LD_VAR 0 1
62397: PPUSH
62398: CALL_OW 250
62402: PPUSH
62403: LD_VAR 0 7
62407: PPUSH
62408: LD_VAR 0 5
62412: PPUSH
62413: CALL_OW 272
62417: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62418: LD_ADDR_VAR 0 10
62422: PUSH
62423: LD_VAR 0 1
62427: PPUSH
62428: CALL_OW 251
62432: PPUSH
62433: LD_VAR 0 7
62437: PPUSH
62438: LD_VAR 0 5
62442: PPUSH
62443: CALL_OW 273
62447: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62448: LD_VAR 0 9
62452: PPUSH
62453: LD_VAR 0 10
62457: PPUSH
62458: CALL_OW 488
62462: NOT
62463: IFFALSE 62467
// exit ;
62465: GO 62589
// ComAnimCustom ( unit , 1 ) ;
62467: LD_VAR 0 1
62471: PPUSH
62472: LD_INT 1
62474: PPUSH
62475: CALL_OW 592
// p := 0 ;
62479: LD_ADDR_VAR 0 12
62483: PUSH
62484: LD_INT 0
62486: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62487: LD_VAR 0 9
62491: PPUSH
62492: LD_VAR 0 10
62496: PPUSH
62497: LD_VAR 0 6
62501: PPUSH
62502: LD_VAR 0 8
62506: PPUSH
62507: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62511: LD_INT 35
62513: PPUSH
62514: CALL_OW 67
// p := Inc ( p ) ;
62518: LD_ADDR_VAR 0 12
62522: PUSH
62523: LD_VAR 0 12
62527: PPUSH
62528: CALL 42575 0 1
62532: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62533: LD_VAR 0 12
62537: PUSH
62538: LD_INT 3
62540: EQUAL
62541: IFTRUE 62555
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 302
62553: NOT
62554: OR
62555: IFTRUE 62568
62557: PUSH
62558: LD_VAR 0 1
62562: PPUSH
62563: CALL_OW 301
62567: OR
62568: IFFALSE 62511
// RemoveSeeing ( _x , _y , side ) ;
62570: LD_VAR 0 9
62574: PPUSH
62575: LD_VAR 0 10
62579: PPUSH
62580: LD_VAR 0 6
62584: PPUSH
62585: CALL_OW 331
// end ;
62589: LD_VAR 0 4
62593: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62594: LD_INT 0
62596: PPUSH
62597: PPUSH
62598: PPUSH
62599: PPUSH
62600: PPUSH
62601: PPUSH
62602: PPUSH
62603: PPUSH
62604: PPUSH
62605: PPUSH
62606: PPUSH
// if not unit then
62607: LD_VAR 0 1
62611: NOT
62612: IFFALSE 62616
// exit ;
62614: GO 62887
// side := GetSide ( unit ) ;
62616: LD_ADDR_VAR 0 3
62620: PUSH
62621: LD_VAR 0 1
62625: PPUSH
62626: CALL_OW 255
62630: ST_TO_ADDR
// x := GetX ( unit ) ;
62631: LD_ADDR_VAR 0 5
62635: PUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL_OW 250
62645: ST_TO_ADDR
// y := GetY ( unit ) ;
62646: LD_ADDR_VAR 0 6
62650: PUSH
62651: LD_VAR 0 1
62655: PPUSH
62656: CALL_OW 251
62660: ST_TO_ADDR
// r := 8 ;
62661: LD_ADDR_VAR 0 4
62665: PUSH
62666: LD_INT 8
62668: ST_TO_ADDR
// if x - r < 0 then
62669: LD_VAR 0 5
62673: PUSH
62674: LD_VAR 0 4
62678: MINUS
62679: PUSH
62680: LD_INT 0
62682: LESS
62683: IFFALSE 62695
// min_x := 0 else
62685: LD_ADDR_VAR 0 7
62689: PUSH
62690: LD_INT 0
62692: ST_TO_ADDR
62693: GO 62711
// min_x := x - r ;
62695: LD_ADDR_VAR 0 7
62699: PUSH
62700: LD_VAR 0 5
62704: PUSH
62705: LD_VAR 0 4
62709: MINUS
62710: ST_TO_ADDR
// if y - r < 0 then
62711: LD_VAR 0 6
62715: PUSH
62716: LD_VAR 0 4
62720: MINUS
62721: PUSH
62722: LD_INT 0
62724: LESS
62725: IFFALSE 62737
// min_y := 0 else
62727: LD_ADDR_VAR 0 8
62731: PUSH
62732: LD_INT 0
62734: ST_TO_ADDR
62735: GO 62753
// min_y := y - r ;
62737: LD_ADDR_VAR 0 8
62741: PUSH
62742: LD_VAR 0 6
62746: PUSH
62747: LD_VAR 0 4
62751: MINUS
62752: ST_TO_ADDR
// max_x := x + r ;
62753: LD_ADDR_VAR 0 9
62757: PUSH
62758: LD_VAR 0 5
62762: PUSH
62763: LD_VAR 0 4
62767: PLUS
62768: ST_TO_ADDR
// max_y := y + r ;
62769: LD_ADDR_VAR 0 10
62773: PUSH
62774: LD_VAR 0 6
62778: PUSH
62779: LD_VAR 0 4
62783: PLUS
62784: ST_TO_ADDR
// for _x = min_x to max_x do
62785: LD_ADDR_VAR 0 11
62789: PUSH
62790: DOUBLE
62791: LD_VAR 0 7
62795: DEC
62796: ST_TO_ADDR
62797: LD_VAR 0 9
62801: PUSH
62802: FOR_TO
62803: IFFALSE 62885
// for _y = min_y to max_y do
62805: LD_ADDR_VAR 0 12
62809: PUSH
62810: DOUBLE
62811: LD_VAR 0 8
62815: DEC
62816: ST_TO_ADDR
62817: LD_VAR 0 10
62821: PUSH
62822: FOR_TO
62823: IFFALSE 62881
// begin if not ValidHex ( _x , _y ) then
62825: LD_VAR 0 11
62829: PPUSH
62830: LD_VAR 0 12
62834: PPUSH
62835: CALL_OW 488
62839: NOT
62840: IFFALSE 62844
// continue ;
62842: GO 62822
// if MineAtPos ( _x , _y ) then
62844: LD_VAR 0 11
62848: PPUSH
62849: LD_VAR 0 12
62853: PPUSH
62854: CALL_OW 458
62858: IFFALSE 62879
// ViewMineAtPos ( _x , _y , side ) ;
62860: LD_VAR 0 11
62864: PPUSH
62865: LD_VAR 0 12
62869: PPUSH
62870: LD_VAR 0 3
62874: PPUSH
62875: CALL_OW 457
// end ;
62879: GO 62822
62881: POP
62882: POP
62883: GO 62802
62885: POP
62886: POP
// end ;
62887: LD_VAR 0 2
62891: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62892: LD_INT 0
62894: PPUSH
62895: PPUSH
62896: PPUSH
62897: PPUSH
62898: PPUSH
62899: PPUSH
62900: PPUSH
// if not units then
62901: LD_VAR 0 1
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 63374
// scaners := [ ] ;
62910: LD_ADDR_VAR 0 6
62914: PUSH
62915: EMPTY
62916: ST_TO_ADDR
// for i in units do
62917: LD_ADDR_VAR 0 3
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: FOR_IN
62928: IFFALSE 63085
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62930: LD_VAR 0 3
62934: PPUSH
62935: CALL_OW 264
62939: PUSH
62940: LD_INT 11
62942: NONEQUAL
62943: IFTRUE 62957
62945: PUSH
62946: LD_VAR 0 3
62950: PPUSH
62951: CALL_OW 302
62955: NOT
62956: OR
62957: IFTRUE 62974
62959: PUSH
62960: LD_VAR 0 3
62964: PPUSH
62965: CALL_OW 110
62969: PUSH
62970: LD_INT 502
62972: EQUAL
62973: OR
62974: IFFALSE 62978
// continue ;
62976: GO 62927
// ComStop ( i ) ;
62978: LD_VAR 0 3
62982: PPUSH
62983: CALL_OW 141
// x := GetX ( i ) ;
62987: LD_ADDR_VAR 0 4
62991: PUSH
62992: LD_VAR 0 3
62996: PPUSH
62997: CALL_OW 250
63001: ST_TO_ADDR
// y := GetY ( i ) ;
63002: LD_ADDR_VAR 0 5
63006: PUSH
63007: LD_VAR 0 3
63011: PPUSH
63012: CALL_OW 251
63016: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63017: LD_VAR 0 3
63021: PPUSH
63022: CALL_OW 255
63026: PUSH
63027: LD_OWVAR 2
63031: EQUAL
63032: IFFALSE 63051
// PlaySoundXY ( x , y , mineDetector ) ;
63034: LD_VAR 0 4
63038: PPUSH
63039: LD_VAR 0 5
63043: PPUSH
63044: LD_STRING mineDetector
63046: PPUSH
63047: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63051: LD_ADDR_VAR 0 6
63055: PUSH
63056: LD_VAR 0 6
63060: PPUSH
63061: LD_VAR 0 3
63065: PPUSH
63066: CALL 41202 0 2
63070: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63071: LD_VAR 0 3
63075: PPUSH
63076: LD_INT 502
63078: PPUSH
63079: CALL_OW 109
// end ;
63083: GO 62927
63085: POP
63086: POP
// if not scaners then
63087: LD_VAR 0 6
63091: NOT
63092: IFFALSE 63096
// exit ;
63094: GO 63374
// wait ( 3 ) ;
63096: LD_INT 3
63098: PPUSH
63099: CALL_OW 67
// timer := 6 ;
63103: LD_ADDR_VAR 0 7
63107: PUSH
63108: LD_INT 6
63110: ST_TO_ADDR
// repeat for i in scaners do
63111: LD_ADDR_VAR 0 3
63115: PUSH
63116: LD_VAR 0 6
63120: PUSH
63121: FOR_IN
63122: IFFALSE 63272
// begin side := GetSide ( i ) ;
63124: LD_ADDR_VAR 0 8
63128: PUSH
63129: LD_VAR 0 3
63133: PPUSH
63134: CALL_OW 255
63138: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63139: LD_VAR 0 3
63143: PPUSH
63144: CALL_OW 302
63148: NOT
63149: IFTRUE 63162
63151: PUSH
63152: LD_VAR 0 3
63156: PPUSH
63157: CALL_OW 314
63161: OR
63162: IFTRUE 63193
63164: PUSH
63165: LD_VAR 0 3
63169: PPUSH
63170: CALL_OW 263
63174: PUSH
63175: LD_INT 1
63177: EQUAL
63178: IFFALSE 63192
63180: PUSH
63181: LD_VAR 0 3
63185: PPUSH
63186: CALL_OW 311
63190: NOT
63191: AND
63192: OR
63193: IFFALSE 63237
// begin SetUnitDisplayNumber ( i , 0 ) ;
63195: LD_VAR 0 3
63199: PPUSH
63200: LD_INT 0
63202: PPUSH
63203: CALL_OW 505
// SetTag ( i , 0 ) ;
63207: LD_VAR 0 3
63211: PPUSH
63212: LD_INT 0
63214: PPUSH
63215: CALL_OW 109
// scaners := scaners diff i ;
63219: LD_ADDR_VAR 0 6
63223: PUSH
63224: LD_VAR 0 6
63228: PUSH
63229: LD_VAR 0 3
63233: DIFF
63234: ST_TO_ADDR
// continue ;
63235: GO 63121
// end ; if side in [ your_side , 9 ] then
63237: LD_VAR 0 8
63241: PUSH
63242: LD_OWVAR 2
63246: PUSH
63247: LD_INT 9
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: IN
63254: IFFALSE 63270
// SetUnitDisplayNumber ( i , timer ) ;
63256: LD_VAR 0 3
63260: PPUSH
63261: LD_VAR 0 7
63265: PPUSH
63266: CALL_OW 505
// end ;
63270: GO 63121
63272: POP
63273: POP
// if not scaners then
63274: LD_VAR 0 6
63278: NOT
63279: IFFALSE 63283
// exit ;
63281: GO 63374
// timer := Dec ( timer ) ;
63283: LD_ADDR_VAR 0 7
63287: PUSH
63288: LD_VAR 0 7
63292: PPUSH
63293: CALL 42597 0 1
63297: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63298: LD_INT 35
63300: PPUSH
63301: CALL_OW 67
// until timer = 0 ;
63305: LD_VAR 0 7
63309: PUSH
63310: LD_INT 0
63312: EQUAL
63313: IFFALSE 63111
// if not scaners then
63315: LD_VAR 0 6
63319: NOT
63320: IFFALSE 63324
// exit ;
63322: GO 63374
// for i in scaners do
63324: LD_ADDR_VAR 0 3
63328: PUSH
63329: LD_VAR 0 6
63333: PUSH
63334: FOR_IN
63335: IFFALSE 63372
// begin SetUnitDisplayNumber ( i , 0 ) ;
63337: LD_VAR 0 3
63341: PPUSH
63342: LD_INT 0
63344: PPUSH
63345: CALL_OW 505
// SetTag ( i , 0 ) ;
63349: LD_VAR 0 3
63353: PPUSH
63354: LD_INT 0
63356: PPUSH
63357: CALL_OW 109
// RevealDetectorMine ( i ) ;
63361: LD_VAR 0 3
63365: PPUSH
63366: CALL 62594 0 1
// end ;
63370: GO 63334
63372: POP
63373: POP
// end ;
63374: LD_VAR 0 2
63378: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63379: LD_INT 0
63381: PPUSH
// if p1 = mine_detector_mode then
63382: LD_VAR 0 2
63386: PUSH
63387: LD_INT 103
63389: EQUAL
63390: IFFALSE 63401
// DetectMine ( units ) ;
63392: LD_VAR 0 1
63396: PPUSH
63397: CALL 62892 0 1
// end ; end_of_file
63401: LD_VAR 0 7
63405: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63406: PPOPN 6
63408: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63409: LD_INT 0
63411: PPUSH
// begin if not units then
63412: LD_VAR 0 1
63416: NOT
63417: IFFALSE 63421
// exit ;
63419: GO 63455
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63421: LD_VAR 0 1
63425: PPUSH
63426: LD_VAR 0 2
63430: PPUSH
63431: LD_VAR 0 3
63435: PPUSH
63436: LD_VAR 0 4
63440: PPUSH
63441: LD_VAR 0 5
63445: PPUSH
63446: LD_VAR 0 6
63450: PPUSH
63451: CALL 63379 0 6
// end ;
63455: PPOPN 7
63457: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63458: LD_EXP 1
63462: PUSH
63463: LD_INT 4
63465: EQUAL
63466: IFFALSE 63502
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63468: LD_STRING setGameDifficulty(
63470: PUSH
63471: LD_OWVAR 67
63475: STR
63476: PUSH
63477: LD_STRING )
63479: STR
63480: PPUSH
63481: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63485: LD_STRING displayDifficulty(
63487: PUSH
63488: LD_OWVAR 67
63492: STR
63493: PUSH
63494: LD_STRING )
63496: STR
63497: PPUSH
63498: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63502: CALL 63531 0 0
// end ; end_of_file
63506: PPOPN 1
63508: END
// every 0 0$1 do
63509: GO 63511
63511: DISABLE
// begin enable ;
63512: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63513: LD_STRING updateTimer(
63515: PUSH
63516: LD_OWVAR 1
63520: STR
63521: PUSH
63522: LD_STRING );
63524: STR
63525: PPUSH
63526: CALL_OW 559
// end ;
63530: END
// export function SOS_MapStart ( ) ; begin
63531: LD_INT 0
63533: PPUSH
// UpdateFactoryWaypoints ( ) ;
63534: CALL 64472 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63538: CALL 64724 0 0
// ParseMultiDataToLua ( ) ;
63542: CALL 64871 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63546: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63548: PPUSH
63549: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63553: LD_STRING setSpecLogoNumber(
63555: PUSH
63556: LD_INT 2
63558: STR
63559: PUSH
63560: LD_STRING ,
63562: STR
63563: PUSH
63564: LD_INT 1
63566: STR
63567: PUSH
63568: LD_STRING )
63570: STR
63571: PPUSH
63572: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63576: LD_STRING setSpecLogoNumber(
63578: PUSH
63579: LD_INT 3
63581: STR
63582: PUSH
63583: LD_STRING ,
63585: STR
63586: PUSH
63587: LD_INT 2
63589: STR
63590: PUSH
63591: LD_STRING )
63593: STR
63594: PPUSH
63595: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63599: LD_STRING setSpecLogoNumber(
63601: PUSH
63602: LD_INT 4
63604: STR
63605: PUSH
63606: LD_STRING ,
63608: STR
63609: PUSH
63610: LD_INT 3
63612: STR
63613: PUSH
63614: LD_STRING )
63616: STR
63617: PPUSH
63618: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63622: LD_STRING setSpecLogoNumber(
63624: PUSH
63625: LD_INT 5
63627: STR
63628: PUSH
63629: LD_STRING ,
63631: STR
63632: PUSH
63633: LD_INT 4
63635: STR
63636: PUSH
63637: LD_STRING )
63639: STR
63640: PPUSH
63641: CALL_OW 559
// end ;
63645: LD_VAR 0 1
63649: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63650: LD_INT 0
63652: PPUSH
63653: PPUSH
63654: PPUSH
63655: PPUSH
63656: PPUSH
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
// for i := 1 to 8 do
63661: LD_ADDR_VAR 0 2
63665: PUSH
63666: DOUBLE
63667: LD_INT 1
63669: DEC
63670: ST_TO_ADDR
63671: LD_INT 8
63673: PUSH
63674: FOR_TO
63675: IFFALSE 64060
// begin if mpSidePositions [ i ] then
63677: LD_EXP 5
63681: PUSH
63682: LD_VAR 0 2
63686: ARRAY
63687: IFFALSE 64058
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63689: LD_ADDR_VAR 0 7
63693: PUSH
63694: LD_INT 22
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 21
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PPUSH
63720: CALL_OW 69
63724: PPUSH
63725: CALL 5226 0 1
63729: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63730: LD_ADDR_VAR 0 9
63734: PUSH
63735: LD_INT 22
63737: PUSH
63738: LD_VAR 0 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 30
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 30
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PPUSH
63779: CALL_OW 69
63783: ST_TO_ADDR
// crates := 0 ;
63784: LD_ADDR_VAR 0 4
63788: PUSH
63789: LD_INT 0
63791: ST_TO_ADDR
// oil := 0 ;
63792: LD_ADDR_VAR 0 5
63796: PUSH
63797: LD_INT 0
63799: ST_TO_ADDR
// sib := 0 ;
63800: LD_ADDR_VAR 0 6
63804: PUSH
63805: LD_INT 0
63807: ST_TO_ADDR
// if bases then
63808: LD_VAR 0 9
63812: IFFALSE 63918
// begin for j in bases do
63814: LD_ADDR_VAR 0 3
63818: PUSH
63819: LD_VAR 0 9
63823: PUSH
63824: FOR_IN
63825: IFFALSE 63916
// begin base := GetBase ( j ) ;
63827: LD_ADDR_VAR 0 8
63831: PUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: CALL_OW 274
63841: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63842: LD_ADDR_VAR 0 4
63846: PUSH
63847: LD_VAR 0 4
63851: PUSH
63852: LD_VAR 0 8
63856: PPUSH
63857: LD_INT 1
63859: PPUSH
63860: CALL_OW 275
63864: PLUS
63865: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63866: LD_ADDR_VAR 0 5
63870: PUSH
63871: LD_VAR 0 5
63875: PUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 2
63883: PPUSH
63884: CALL_OW 275
63888: PLUS
63889: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63890: LD_ADDR_VAR 0 6
63894: PUSH
63895: LD_VAR 0 6
63899: PUSH
63900: LD_VAR 0 8
63904: PPUSH
63905: LD_INT 3
63907: PPUSH
63908: CALL_OW 275
63912: PLUS
63913: ST_TO_ADDR
// end ;
63914: GO 63824
63916: POP
63917: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63918: LD_STRING setSpecText(
63920: PUSH
63921: LD_VAR 0 2
63925: STR
63926: PUSH
63927: LD_STRING ,
63929: STR
63930: PUSH
63931: LD_INT 2
63933: STR
63934: PUSH
63935: LD_STRING ,
63937: STR
63938: PUSH
63939: LD_VAR 0 4
63943: STR
63944: PUSH
63945: LD_STRING )
63947: STR
63948: PPUSH
63949: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63953: LD_STRING setSpecText(
63955: PUSH
63956: LD_VAR 0 2
63960: STR
63961: PUSH
63962: LD_STRING ,
63964: STR
63965: PUSH
63966: LD_INT 3
63968: STR
63969: PUSH
63970: LD_STRING ,
63972: STR
63973: PUSH
63974: LD_VAR 0 5
63978: STR
63979: PUSH
63980: LD_STRING )
63982: STR
63983: PPUSH
63984: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63988: LD_STRING setSpecText(
63990: PUSH
63991: LD_VAR 0 2
63995: STR
63996: PUSH
63997: LD_STRING ,
63999: STR
64000: PUSH
64001: LD_INT 4
64003: STR
64004: PUSH
64005: LD_STRING ,
64007: STR
64008: PUSH
64009: LD_VAR 0 6
64013: STR
64014: PUSH
64015: LD_STRING )
64017: STR
64018: PPUSH
64019: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64023: LD_STRING setSpecText(
64025: PUSH
64026: LD_VAR 0 2
64030: STR
64031: PUSH
64032: LD_STRING ,
64034: STR
64035: PUSH
64036: LD_INT 5
64038: STR
64039: PUSH
64040: LD_STRING ,
64042: STR
64043: PUSH
64044: LD_VAR 0 7
64048: STR
64049: PUSH
64050: LD_STRING )
64052: STR
64053: PPUSH
64054: CALL_OW 559
// end ; end ;
64058: GO 63674
64060: POP
64061: POP
// end ;
64062: LD_VAR 0 1
64066: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64067: LD_INT 2
64069: PUSH
64070: LD_INT 30
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 30
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: PPUSH
64095: CALL_OW 69
64099: IFFALSE 64109
64101: GO 64103
64103: DISABLE
// begin enable ;
64104: ENABLE
// UpdateSpectatorBar ;
64105: CALL 63650 0 0
// end ;
64109: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64110: LD_INT 0
64112: PPUSH
// end ;
64113: LD_VAR 0 12
64117: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64118: LD_INT 0
64120: PPUSH
64121: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64122: LD_VAR 0 1
64126: NOT
64127: IFTRUE 64146
64129: PUSH
64130: LD_VAR 0 2
64134: PPUSH
64135: LD_VAR 0 3
64139: PPUSH
64140: CALL_OW 488
64144: NOT
64145: OR
64146: IFTRUE 64181
64148: PUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: CALL_OW 266
64158: PUSH
64159: LD_INT 3
64161: NONEQUAL
64162: IFFALSE 64180
64164: PUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL_OW 247
64174: PUSH
64175: LD_INT 1
64177: EQUAL
64178: NOT
64179: AND
64180: OR
64181: IFFALSE 64185
// exit ;
64183: GO 64467
// if GetType ( factory ) = unit_human then
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 247
64194: PUSH
64195: LD_INT 1
64197: EQUAL
64198: IFFALSE 64215
// factory := IsInUnit ( factory ) ;
64200: LD_ADDR_VAR 0 1
64204: PUSH
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 310
64214: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 266
64224: PUSH
64225: LD_INT 3
64227: NONEQUAL
64228: IFFALSE 64232
// exit ;
64230: GO 64467
// for i := 1 to Count ( factoryWaypoints ) do
64232: LD_ADDR_VAR 0 5
64236: PUSH
64237: DOUBLE
64238: LD_INT 1
64240: DEC
64241: ST_TO_ADDR
64242: LD_EXP 59
64246: PPUSH
64247: CALL 5226 0 1
64251: PUSH
64252: FOR_TO
64253: IFFALSE 64415
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64255: LD_VAR 0 2
64259: PPUSH
64260: LD_VAR 0 3
64264: PPUSH
64265: CALL_OW 428
64269: PUSH
64270: LD_EXP 59
64274: PUSH
64275: LD_VAR 0 5
64279: ARRAY
64280: PUSH
64281: LD_INT 2
64283: ARRAY
64284: EQUAL
64285: IFFALSE 64317
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64287: LD_ADDR_EXP 59
64291: PUSH
64292: LD_EXP 59
64296: PPUSH
64297: LD_VAR 0 5
64301: PPUSH
64302: CALL_OW 3
64306: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64307: CALL 64472 0 0
// exit ;
64311: POP
64312: POP
64313: GO 64467
// end else
64315: GO 64413
// if factory = factoryWaypoints [ i ] [ 2 ] then
64317: LD_VAR 0 1
64321: PUSH
64322: LD_EXP 59
64326: PUSH
64327: LD_VAR 0 5
64331: ARRAY
64332: PUSH
64333: LD_INT 2
64335: ARRAY
64336: EQUAL
64337: IFFALSE 64413
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64339: LD_ADDR_EXP 59
64343: PUSH
64344: LD_EXP 59
64348: PPUSH
64349: LD_VAR 0 5
64353: PPUSH
64354: CALL_OW 3
64358: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64359: LD_ADDR_EXP 59
64363: PUSH
64364: LD_EXP 59
64368: PPUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 255
64378: PUSH
64379: LD_VAR 0 1
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_VAR 0 3
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: PPUSH
64400: CALL 41202 0 2
64404: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64405: CALL 64472 0 0
// exit ;
64409: POP
64410: POP
64411: GO 64467
// end ; end ;
64413: GO 64252
64415: POP
64416: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64417: LD_ADDR_EXP 59
64421: PUSH
64422: LD_EXP 59
64426: PPUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 255
64436: PUSH
64437: LD_VAR 0 1
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_VAR 0 3
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PPUSH
64458: CALL 41202 0 2
64462: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64463: CALL 64472 0 0
// end ;
64467: LD_VAR 0 4
64471: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64472: LD_INT 0
64474: PPUSH
64475: PPUSH
64476: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64477: LD_STRING resetFactoryWaypoint();
64479: PPUSH
64480: CALL_OW 559
// if factoryWaypoints then
64484: LD_EXP 59
64488: IFFALSE 64609
// begin list := factoryWaypoints ;
64490: LD_ADDR_VAR 0 3
64494: PUSH
64495: LD_EXP 59
64499: ST_TO_ADDR
// for i := 1 to list do
64500: LD_ADDR_VAR 0 2
64504: PUSH
64505: DOUBLE
64506: LD_INT 1
64508: DEC
64509: ST_TO_ADDR
64510: LD_VAR 0 3
64514: PUSH
64515: FOR_TO
64516: IFFALSE 64607
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64518: LD_STRING setFactoryWaypointXY(
64520: PUSH
64521: LD_VAR 0 3
64525: PUSH
64526: LD_VAR 0 2
64530: ARRAY
64531: PUSH
64532: LD_INT 1
64534: ARRAY
64535: STR
64536: PUSH
64537: LD_STRING ,
64539: STR
64540: PUSH
64541: LD_VAR 0 3
64545: PUSH
64546: LD_VAR 0 2
64550: ARRAY
64551: PUSH
64552: LD_INT 2
64554: ARRAY
64555: STR
64556: PUSH
64557: LD_STRING ,
64559: STR
64560: PUSH
64561: LD_VAR 0 3
64565: PUSH
64566: LD_VAR 0 2
64570: ARRAY
64571: PUSH
64572: LD_INT 3
64574: ARRAY
64575: STR
64576: PUSH
64577: LD_STRING ,
64579: STR
64580: PUSH
64581: LD_VAR 0 3
64585: PUSH
64586: LD_VAR 0 2
64590: ARRAY
64591: PUSH
64592: LD_INT 4
64594: ARRAY
64595: STR
64596: PUSH
64597: LD_STRING )
64599: STR
64600: PPUSH
64601: CALL_OW 559
64605: GO 64515
64607: POP
64608: POP
// end ; end ;
64609: LD_VAR 0 1
64613: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64614: LD_INT 0
64616: PPUSH
// if HexInfo ( x , y ) = warehouse then
64617: LD_VAR 0 2
64621: PPUSH
64622: LD_VAR 0 3
64626: PPUSH
64627: CALL_OW 428
64631: PUSH
64632: LD_VAR 0 1
64636: EQUAL
64637: IFFALSE 64664
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64639: LD_ADDR_EXP 61
64643: PUSH
64644: LD_EXP 61
64648: PPUSH
64649: LD_VAR 0 1
64653: PPUSH
64654: LD_INT 0
64656: PPUSH
64657: CALL_OW 1
64661: ST_TO_ADDR
64662: GO 64715
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64664: LD_ADDR_EXP 61
64668: PUSH
64669: LD_EXP 61
64673: PPUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: CALL_OW 255
64688: PUSH
64689: LD_VAR 0 1
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_VAR 0 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: PPUSH
64710: CALL_OW 1
64714: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64715: CALL 64724 0 0
// end ;
64719: LD_VAR 0 4
64723: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
64728: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64729: LD_STRING resetWarehouseGatheringPoints();
64731: PPUSH
64732: CALL_OW 559
// if warehouseGatheringPoints then
64736: LD_EXP 61
64740: IFFALSE 64866
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64742: LD_ADDR_VAR 0 3
64746: PUSH
64747: LD_EXP 61
64751: PPUSH
64752: CALL 45136 0 1
64756: ST_TO_ADDR
// for i := 1 to list do
64757: LD_ADDR_VAR 0 2
64761: PUSH
64762: DOUBLE
64763: LD_INT 1
64765: DEC
64766: ST_TO_ADDR
64767: LD_VAR 0 3
64771: PUSH
64772: FOR_TO
64773: IFFALSE 64864
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64775: LD_STRING setWarehouseGatheringPointXY(
64777: PUSH
64778: LD_VAR 0 3
64782: PUSH
64783: LD_VAR 0 2
64787: ARRAY
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: STR
64793: PUSH
64794: LD_STRING ,
64796: STR
64797: PUSH
64798: LD_VAR 0 3
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PUSH
64809: LD_INT 2
64811: ARRAY
64812: STR
64813: PUSH
64814: LD_STRING ,
64816: STR
64817: PUSH
64818: LD_VAR 0 3
64822: PUSH
64823: LD_VAR 0 2
64827: ARRAY
64828: PUSH
64829: LD_INT 3
64831: ARRAY
64832: STR
64833: PUSH
64834: LD_STRING ,
64836: STR
64837: PUSH
64838: LD_VAR 0 3
64842: PUSH
64843: LD_VAR 0 2
64847: ARRAY
64848: PUSH
64849: LD_INT 4
64851: ARRAY
64852: STR
64853: PUSH
64854: LD_STRING )
64856: STR
64857: PPUSH
64858: CALL_OW 559
64862: GO 64772
64864: POP
64865: POP
// end ; end ;
64866: LD_VAR 0 1
64870: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64871: LD_INT 0
64873: PPUSH
64874: PPUSH
// if not mpSidePositions then
64875: LD_EXP 5
64879: NOT
64880: IFFALSE 64884
// exit ;
64882: GO 64955
// result :=  ;
64884: LD_ADDR_VAR 0 1
64888: PUSH
64889: LD_STRING 
64891: ST_TO_ADDR
// for i := 1 to 8 do
64892: LD_ADDR_VAR 0 2
64896: PUSH
64897: DOUBLE
64898: LD_INT 1
64900: DEC
64901: ST_TO_ADDR
64902: LD_INT 8
64904: PUSH
64905: FOR_TO
64906: IFFALSE 64936
// begin result := result & mpSidePositions [ i ] & ; ;
64908: LD_ADDR_VAR 0 1
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_EXP 5
64922: PUSH
64923: LD_VAR 0 2
64927: ARRAY
64928: STR
64929: PUSH
64930: LD_STRING ;
64932: STR
64933: ST_TO_ADDR
// end ;
64934: GO 64905
64936: POP
64937: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64938: LD_STRING setMultiplayerRealPosition("
64940: PUSH
64941: LD_VAR 0 1
64945: STR
64946: PUSH
64947: LD_STRING ");
64949: STR
64950: PPUSH
64951: CALL_OW 559
// end ; end_of_file
64955: LD_VAR 0 1
64959: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
64960: LD_EXP 37
64964: IFFALSE 65007
64966: GO 64968
64968: DISABLE
64969: LD_INT 0
64971: PPUSH
// begin for i := 1 to 8 do
64972: LD_ADDR_VAR 0 1
64976: PUSH
64977: DOUBLE
64978: LD_INT 1
64980: DEC
64981: ST_TO_ADDR
64982: LD_INT 8
64984: PUSH
64985: FOR_TO
64986: IFFALSE 65005
// SetRestrict ( b_depot , i , state_disabled ) ;
64988: LD_INT 0
64990: PPUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_INT 0
64998: PPUSH
64999: CALL_OW 324
65003: GO 64985
65005: POP
65006: POP
// end ;
65007: PPOPN 1
65009: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65010: LD_EXP 37
65014: IFFALSE 65022
65016: PUSH
65017: CALL 65232 0 0
65021: AND
65022: IFFALSE 65030
65024: PUSH
65025: LD_OWVAR 4
65029: AND
65030: IFFALSE 65229
65032: GO 65034
65034: DISABLE
65035: LD_INT 0
65037: PPUSH
65038: PPUSH
// begin canWin := false ;
65039: LD_ADDR_VAR 0 2
65043: PUSH
65044: LD_INT 0
65046: ST_TO_ADDR
// if not HasPower ( your_side ) then
65047: LD_OWVAR 2
65051: PPUSH
65052: CALL 65274 0 1
65056: NOT
65057: IFFALSE 65068
// begin Multiplayer_Loose_Message ;
65059: CALL_OW 521
// enable ( mpLose ) ;
65063: LD_INT 102
65065: ENABLE_MARKED
// end else
65066: GO 65229
// begin canWin := true ;
65068: LD_ADDR_VAR 0 2
65072: PUSH
65073: LD_INT 1
65075: ST_TO_ADDR
// for i := 1 to 8 do
65076: LD_ADDR_VAR 0 1
65080: PUSH
65081: DOUBLE
65082: LD_INT 1
65084: DEC
65085: ST_TO_ADDR
65086: LD_INT 8
65088: PUSH
65089: FOR_TO
65090: IFFALSE 65215
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65092: LD_EXP 5
65096: PUSH
65097: LD_VAR 0 1
65101: ARRAY
65102: IFFALSE 65115
65104: PUSH
65105: LD_VAR 0 1
65109: PPUSH
65110: CALL_OW 108
65114: AND
65115: IFFALSE 65129
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_OWVAR 2
65127: NONEQUAL
65128: AND
65129: IFFALSE 65213
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65131: LD_EXP 6
65135: PUSH
65136: LD_VAR 0 1
65140: ARRAY
65141: NOT
65142: IFTRUE 65190
65144: PUSH
65145: LD_EXP 6
65149: PUSH
65150: LD_VAR 0 1
65154: ARRAY
65155: PUSH
65156: LD_EXP 6
65160: PUSH
65161: LD_OWVAR 2
65165: ARRAY
65166: NONEQUAL
65167: IFFALSE 65189
65169: PUSH
65170: LD_OWVAR 2
65174: PPUSH
65175: LD_VAR 0 1
65179: PPUSH
65180: CALL_OW 81
65184: PUSH
65185: LD_INT 1
65187: NONEQUAL
65188: AND
65189: OR
65190: IFFALSE 65213
// if HasPower ( i ) then
65192: LD_VAR 0 1
65196: PPUSH
65197: CALL 65274 0 1
65201: IFFALSE 65213
// begin canWin := false ;
65203: LD_ADDR_VAR 0 2
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// break ;
65211: GO 65215
// end ;
65213: GO 65089
65215: POP
65216: POP
// if canWin then
65217: LD_VAR 0 2
65221: IFFALSE 65228
// enable ( mpWin ) else
65223: LD_INT 101
65225: ENABLE_MARKED
65226: GO 65229
// enable ;
65228: ENABLE
// end ; end ;
65229: PPOPN 2
65231: END
// function CanWinLoose ; begin
65232: LD_INT 0
65234: PPUSH
// result := true ;
65235: LD_ADDR_VAR 0 1
65239: PUSH
65240: LD_INT 1
65242: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65243: CALL_OW 531
65247: IFFALSE 65259
65249: PUSH
65250: CALL_OW 519
65254: PUSH
65255: LD_INT 1
65257: GREATER
65258: AND
65259: IFFALSE 65269
// result := false ;
65261: LD_ADDR_VAR 0 1
65265: PUSH
65266: LD_INT 0
65268: ST_TO_ADDR
// end ;
65269: LD_VAR 0 1
65273: RET
// function HasPower ( i ) ; begin
65274: LD_INT 0
65276: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65277: LD_INT 22
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 30
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 30
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PPUSH
65321: CALL_OW 69
65325: NOT
65326: IFFALSE 65330
// exit ;
65328: GO 65395
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65330: LD_ADDR_VAR 0 2
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 21
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 33
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 33
65372: PUSH
65373: LD_INT 5
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PPUSH
65390: CALL_OW 69
65394: ST_TO_ADDR
// end ;
65395: LD_VAR 0 2
65399: RET
