// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46529 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46913 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 180 , 160 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 180
 823: PUSH
 824: LD_INT 160
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 20
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 23
 900: PUSH
 901: LD_INT 18
 903: PUSH
 904: LD_INT 19
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 24
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 1 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 26
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45894 0 2
1411: PUSH
1412: LD_INT 27
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45894 0 2
1422: PUSH
1423: LD_INT 28
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45894 0 2
1433: PUSH
1434: LD_INT 29
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45894 0 2
1444: PUSH
1445: LD_INT 30
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL 45894 0 2
1455: PUSH
1456: LD_INT 31
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL 45894 0 2
1466: PUSH
1467: LD_INT 32
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL 45894 0 2
1477: PUSH
1478: LD_INT 33
1480: PPUSH
1481: LD_INT 5
1483: PPUSH
1484: CALL 45894 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5209 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 34
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45727 0 2
1667: PUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45727 0 2
1680: PUSH
1681: LD_INT 36
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45727 0 2
1693: PUSH
1694: LD_INT 37
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45727 0 2
1706: PUSH
1707: LD_INT 38
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45727 0 2
1719: PUSH
1720: LD_INT 39
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45727 0 2
1732: PUSH
1733: LD_INT 40
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45727 0 2
1745: PUSH
1746: LD_INT 41
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45727 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 42
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45727 0 2
1810: PUSH
1811: LD_INT 43
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45727 0 2
1823: PUSH
1824: LD_INT 44
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45727 0 2
1836: PUSH
1837: LD_INT 45
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45727 0 2
1849: PUSH
1850: LD_INT 46
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45727 0 2
1862: PUSH
1863: LD_INT 47
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45727 0 2
1875: PUSH
1876: LD_INT 48
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45727 0 2
1888: PUSH
1889: LD_INT 49
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45727 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 50
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45894 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45894 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 66
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45894 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 52
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 45894 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 53
2017: PPUSH
2018: LD_INT 5
2020: PPUSH
2021: CALL 45894 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 67
2032: PPUSH
2033: LD_INT 5
2035: PPUSH
2036: CALL 45894 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 54
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45894 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 55
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45894 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 68
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45894 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 56
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45894 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 57
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45894 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 69
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45894 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 58
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL 45894 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 59
2167: PPUSH
2168: LD_INT 5
2170: PPUSH
2171: CALL 45894 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 70
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL 45894 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 60
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: CALL 45894 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 61
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL 45894 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 71
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 45894 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 62
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45894 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 63
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL 45894 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 72
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL 45894 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 64
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL 45894 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 65
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL 45894 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 73
2332: PPUSH
2333: LD_INT 2
2335: PPUSH
2336: CALL 45894 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 20
2569: PUSH
2570: LD_INT 21
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 23
2578: PUSH
2579: LD_INT 18
2581: PUSH
2582: LD_INT 19
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 42548 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 56254 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 51815 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 56271 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 52522 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 56312 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 52575 0 3
2923: PPOPN 3
2925: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2926: LD_VAR 0 1
2930: PPUSH
2931: LD_VAR 0 2
2935: PPUSH
2936: LD_VAR 0 3
2940: PPUSH
2941: LD_VAR 0 4
2945: PPUSH
2946: LD_VAR 0 5
2950: PPUSH
2951: CALL 53214 0 5
2955: PPOPN 5
2957: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2958: LD_VAR 0 1
2962: PPUSH
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_VAR 0 3
2972: PPUSH
2973: LD_VAR 0 4
2977: PPUSH
2978: CALL 53317 0 4
2982: PPOPN 4
2984: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2985: LD_INT 0
2987: PPUSH
2988: PPUSH
// if exist_mode then
2989: LD_VAR 0 2
2993: IFFALSE 3039
// begin unit := CreateCharacter ( prefix & ident ) ;
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_VAR 0 3
3004: PUSH
3005: LD_VAR 0 1
3009: STR
3010: PPUSH
3011: CALL_OW 34
3015: ST_TO_ADDR
// if unit then
3016: LD_VAR 0 5
3020: IFFALSE 3037
// DeleteCharacters ( prefix & ident ) ;
3022: LD_VAR 0 3
3026: PUSH
3027: LD_VAR 0 1
3031: STR
3032: PPUSH
3033: CALL_OW 40
// end else
3037: GO 3054
// unit := NewCharacter ( ident ) ;
3039: LD_ADDR_VAR 0 5
3043: PUSH
3044: LD_VAR 0 1
3048: PPUSH
3049: CALL_OW 25
3053: ST_TO_ADDR
// result := unit ;
3054: LD_ADDR_VAR 0 4
3058: PUSH
3059: LD_VAR 0 5
3063: ST_TO_ADDR
// end ;
3064: LD_VAR 0 4
3068: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3069: LD_INT 0
3071: PPUSH
3072: PPUSH
// if exist_mode then
3073: LD_VAR 0 2
3077: IFFALSE 3102
// unit := CreateCharacter ( prefix & ident ) else
3079: LD_ADDR_VAR 0 5
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_VAR 0 1
3093: STR
3094: PPUSH
3095: CALL_OW 34
3099: ST_TO_ADDR
3100: GO 3117
// unit := NewCharacter ( ident ) ;
3102: LD_ADDR_VAR 0 5
3106: PUSH
3107: LD_VAR 0 1
3111: PPUSH
3112: CALL_OW 25
3116: ST_TO_ADDR
// result := unit ;
3117: LD_ADDR_VAR 0 4
3121: PUSH
3122: LD_VAR 0 5
3126: ST_TO_ADDR
// end ;
3127: LD_VAR 0 4
3131: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3132: LD_INT 0
3134: PPUSH
3135: PPUSH
// if not side or not nation then
3136: LD_VAR 0 1
3140: NOT
3141: IFTRUE 3150
3143: PUSH
3144: LD_VAR 0 2
3148: NOT
3149: OR
3150: IFFALSE 3154
// exit ;
3152: GO 3948
// case nation of nation_american :
3154: LD_VAR 0 2
3158: PUSH
3159: LD_INT 1
3161: DOUBLE
3162: EQUAL
3163: IFTRUE 3167
3165: GO 3389
3167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3168: LD_ADDR_VAR 0 4
3172: PUSH
3173: LD_INT 35
3175: PUSH
3176: LD_INT 45
3178: PUSH
3179: LD_INT 46
3181: PUSH
3182: LD_INT 47
3184: PUSH
3185: LD_INT 82
3187: PUSH
3188: LD_INT 83
3190: PUSH
3191: LD_INT 84
3193: PUSH
3194: LD_INT 85
3196: PUSH
3197: LD_INT 86
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: LD_INT 2
3205: PUSH
3206: LD_INT 6
3208: PUSH
3209: LD_INT 15
3211: PUSH
3212: LD_INT 16
3214: PUSH
3215: LD_INT 7
3217: PUSH
3218: LD_INT 12
3220: PUSH
3221: LD_INT 13
3223: PUSH
3224: LD_INT 10
3226: PUSH
3227: LD_INT 14
3229: PUSH
3230: LD_INT 20
3232: PUSH
3233: LD_INT 21
3235: PUSH
3236: LD_INT 22
3238: PUSH
3239: LD_INT 25
3241: PUSH
3242: LD_INT 32
3244: PUSH
3245: LD_INT 27
3247: PUSH
3248: LD_INT 36
3250: PUSH
3251: LD_INT 69
3253: PUSH
3254: LD_INT 39
3256: PUSH
3257: LD_INT 34
3259: PUSH
3260: LD_INT 40
3262: PUSH
3263: LD_INT 48
3265: PUSH
3266: LD_INT 49
3268: PUSH
3269: LD_INT 50
3271: PUSH
3272: LD_INT 51
3274: PUSH
3275: LD_INT 52
3277: PUSH
3278: LD_INT 53
3280: PUSH
3281: LD_INT 54
3283: PUSH
3284: LD_INT 55
3286: PUSH
3287: LD_INT 56
3289: PUSH
3290: LD_INT 57
3292: PUSH
3293: LD_INT 58
3295: PUSH
3296: LD_INT 59
3298: PUSH
3299: LD_INT 60
3301: PUSH
3302: LD_INT 61
3304: PUSH
3305: LD_INT 62
3307: PUSH
3308: LD_INT 80
3310: PUSH
3311: LD_INT 82
3313: PUSH
3314: LD_INT 83
3316: PUSH
3317: LD_INT 84
3319: PUSH
3320: LD_INT 85
3322: PUSH
3323: LD_INT 86
3325: PUSH
3326: LD_INT 90
3328: PUSH
3329: LD_INT 93
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: ST_TO_ADDR
3387: GO 3870
3389: LD_INT 2
3391: DOUBLE
3392: EQUAL
3393: IFTRUE 3397
3395: GO 3631
3397: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3398: LD_ADDR_VAR 0 4
3402: PUSH
3403: LD_INT 35
3405: PUSH
3406: LD_INT 45
3408: PUSH
3409: LD_INT 46
3411: PUSH
3412: LD_INT 47
3414: PUSH
3415: LD_INT 82
3417: PUSH
3418: LD_INT 83
3420: PUSH
3421: LD_INT 84
3423: PUSH
3424: LD_INT 85
3426: PUSH
3427: LD_INT 87
3429: PUSH
3430: LD_INT 70
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: LD_INT 11
3438: PUSH
3439: LD_INT 3
3441: PUSH
3442: LD_INT 4
3444: PUSH
3445: LD_INT 5
3447: PUSH
3448: LD_INT 6
3450: PUSH
3451: LD_INT 15
3453: PUSH
3454: LD_INT 18
3456: PUSH
3457: LD_INT 7
3459: PUSH
3460: LD_INT 17
3462: PUSH
3463: LD_INT 8
3465: PUSH
3466: LD_INT 20
3468: PUSH
3469: LD_INT 21
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_INT 72
3477: PUSH
3478: LD_INT 26
3480: PUSH
3481: LD_INT 69
3483: PUSH
3484: LD_INT 39
3486: PUSH
3487: LD_INT 40
3489: PUSH
3490: LD_INT 41
3492: PUSH
3493: LD_INT 42
3495: PUSH
3496: LD_INT 43
3498: PUSH
3499: LD_INT 48
3501: PUSH
3502: LD_INT 49
3504: PUSH
3505: LD_INT 50
3507: PUSH
3508: LD_INT 51
3510: PUSH
3511: LD_INT 52
3513: PUSH
3514: LD_INT 53
3516: PUSH
3517: LD_INT 54
3519: PUSH
3520: LD_INT 55
3522: PUSH
3523: LD_INT 56
3525: PUSH
3526: LD_INT 60
3528: PUSH
3529: LD_INT 61
3531: PUSH
3532: LD_INT 62
3534: PUSH
3535: LD_INT 66
3537: PUSH
3538: LD_INT 67
3540: PUSH
3541: LD_INT 68
3543: PUSH
3544: LD_INT 81
3546: PUSH
3547: LD_INT 82
3549: PUSH
3550: LD_INT 83
3552: PUSH
3553: LD_INT 84
3555: PUSH
3556: LD_INT 85
3558: PUSH
3559: LD_INT 87
3561: PUSH
3562: LD_INT 88
3564: PUSH
3565: LD_INT 92
3567: PUSH
3568: LD_INT 94
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: ST_TO_ADDR
3629: GO 3870
3631: LD_INT 3
3633: DOUBLE
3634: EQUAL
3635: IFTRUE 3639
3637: GO 3869
3639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3640: LD_ADDR_VAR 0 4
3644: PUSH
3645: LD_INT 46
3647: PUSH
3648: LD_INT 47
3650: PUSH
3651: LD_INT 1
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: LD_INT 82
3659: PUSH
3660: LD_INT 83
3662: PUSH
3663: LD_INT 84
3665: PUSH
3666: LD_INT 85
3668: PUSH
3669: LD_INT 86
3671: PUSH
3672: LD_INT 11
3674: PUSH
3675: LD_INT 9
3677: PUSH
3678: LD_INT 20
3680: PUSH
3681: LD_INT 19
3683: PUSH
3684: LD_INT 21
3686: PUSH
3687: LD_INT 24
3689: PUSH
3690: LD_INT 22
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 28
3698: PUSH
3699: LD_INT 29
3701: PUSH
3702: LD_INT 30
3704: PUSH
3705: LD_INT 31
3707: PUSH
3708: LD_INT 37
3710: PUSH
3711: LD_INT 38
3713: PUSH
3714: LD_INT 32
3716: PUSH
3717: LD_INT 27
3719: PUSH
3720: LD_INT 33
3722: PUSH
3723: LD_INT 69
3725: PUSH
3726: LD_INT 39
3728: PUSH
3729: LD_INT 34
3731: PUSH
3732: LD_INT 40
3734: PUSH
3735: LD_INT 71
3737: PUSH
3738: LD_INT 23
3740: PUSH
3741: LD_INT 44
3743: PUSH
3744: LD_INT 48
3746: PUSH
3747: LD_INT 49
3749: PUSH
3750: LD_INT 50
3752: PUSH
3753: LD_INT 51
3755: PUSH
3756: LD_INT 52
3758: PUSH
3759: LD_INT 53
3761: PUSH
3762: LD_INT 54
3764: PUSH
3765: LD_INT 55
3767: PUSH
3768: LD_INT 56
3770: PUSH
3771: LD_INT 57
3773: PUSH
3774: LD_INT 58
3776: PUSH
3777: LD_INT 59
3779: PUSH
3780: LD_INT 63
3782: PUSH
3783: LD_INT 64
3785: PUSH
3786: LD_INT 65
3788: PUSH
3789: LD_INT 82
3791: PUSH
3792: LD_INT 83
3794: PUSH
3795: LD_INT 84
3797: PUSH
3798: LD_INT 85
3800: PUSH
3801: LD_INT 86
3803: PUSH
3804: LD_INT 89
3806: PUSH
3807: LD_INT 91
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: ST_TO_ADDR
3867: GO 3870
3869: POP
// if state > - 1 and state < 3 then
3870: LD_VAR 0 3
3874: PUSH
3875: LD_INT 1
3877: NEG
3878: GREATER
3879: IFFALSE 3891
3881: PUSH
3882: LD_VAR 0 3
3886: PUSH
3887: LD_INT 3
3889: LESS
3890: AND
3891: IFFALSE 3948
// for i in result do
3893: LD_ADDR_VAR 0 5
3897: PUSH
3898: LD_VAR 0 4
3902: PUSH
3903: FOR_IN
3904: IFFALSE 3946
// if GetTech ( i , side ) <> state then
3906: LD_VAR 0 5
3910: PPUSH
3911: LD_VAR 0 1
3915: PPUSH
3916: CALL_OW 321
3920: PUSH
3921: LD_VAR 0 3
3925: NONEQUAL
3926: IFFALSE 3944
// result := result diff i ;
3928: LD_ADDR_VAR 0 4
3932: PUSH
3933: LD_VAR 0 4
3937: PUSH
3938: LD_VAR 0 5
3942: DIFF
3943: ST_TO_ADDR
3944: GO 3903
3946: POP
3947: POP
// end ;
3948: LD_VAR 0 4
3952: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3953: LD_INT 0
3955: PPUSH
3956: PPUSH
3957: PPUSH
// result := true ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 1
3965: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3966: LD_ADDR_VAR 0 5
3970: PUSH
3971: LD_VAR 0 2
3975: PPUSH
3976: CALL_OW 480
3980: ST_TO_ADDR
// if not tmp then
3981: LD_VAR 0 5
3985: NOT
3986: IFFALSE 3990
// exit ;
3988: GO 4039
// for i in tmp do
3990: LD_ADDR_VAR 0 4
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: FOR_IN
4001: IFFALSE 4037
// if GetTech ( i , side ) <> state_researched then
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 321
4017: PUSH
4018: LD_INT 2
4020: NONEQUAL
4021: IFFALSE 4035
// begin result := false ;
4023: LD_ADDR_VAR 0 3
4027: PUSH
4028: LD_INT 0
4030: ST_TO_ADDR
// exit ;
4031: POP
4032: POP
4033: GO 4039
// end ;
4035: GO 4000
4037: POP
4038: POP
// end ;
4039: LD_VAR 0 3
4043: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
4052: PPUSH
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4059: LD_VAR 0 1
4063: NOT
4064: IFTRUE 4081
4066: PUSH
4067: LD_VAR 0 1
4071: PPUSH
4072: CALL_OW 257
4076: PUSH
4077: LD_INT 9
4079: NONEQUAL
4080: OR
4081: IFFALSE 4085
// exit ;
4083: GO 4664
// side := GetSide ( unit ) ;
4085: LD_ADDR_VAR 0 9
4089: PUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 255
4099: ST_TO_ADDR
// tech_space := tech_spacanom ;
4100: LD_ADDR_VAR 0 12
4104: PUSH
4105: LD_INT 29
4107: ST_TO_ADDR
// tech_time := tech_taurad ;
4108: LD_ADDR_VAR 0 13
4112: PUSH
4113: LD_INT 28
4115: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4116: LD_ADDR_VAR 0 11
4120: PUSH
4121: LD_VAR 0 1
4125: PPUSH
4126: CALL_OW 310
4130: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4131: LD_VAR 0 11
4135: PPUSH
4136: CALL_OW 247
4140: PUSH
4141: LD_INT 2
4143: EQUAL
4144: IFFALSE 4148
// exit ;
4146: GO 4664
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4148: LD_ADDR_VAR 0 8
4152: PUSH
4153: LD_INT 81
4155: PUSH
4156: LD_VAR 0 9
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: LD_INT 21
4170: PUSH
4171: LD_INT 3
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 69
4190: ST_TO_ADDR
// if not tmp then
4191: LD_VAR 0 8
4195: NOT
4196: IFFALSE 4200
// exit ;
4198: GO 4664
// if in_unit then
4200: LD_VAR 0 11
4204: IFFALSE 4228
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4206: LD_ADDR_VAR 0 10
4210: PUSH
4211: LD_VAR 0 8
4215: PPUSH
4216: LD_VAR 0 11
4220: PPUSH
4221: CALL_OW 74
4225: ST_TO_ADDR
4226: GO 4248
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4228: LD_ADDR_VAR 0 10
4232: PUSH
4233: LD_VAR 0 8
4237: PPUSH
4238: LD_VAR 0 1
4242: PPUSH
4243: CALL_OW 74
4247: ST_TO_ADDR
// if not enemy then
4248: LD_VAR 0 10
4252: NOT
4253: IFFALSE 4257
// exit ;
4255: GO 4664
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4257: LD_VAR 0 11
4261: IFFALSE 4283
4263: PUSH
4264: LD_VAR 0 11
4268: PPUSH
4269: LD_VAR 0 10
4273: PPUSH
4274: CALL_OW 296
4278: PUSH
4279: LD_INT 13
4281: GREATER
4282: AND
4283: IFTRUE 4305
4285: PUSH
4286: LD_VAR 0 1
4290: PPUSH
4291: LD_VAR 0 10
4295: PPUSH
4296: CALL_OW 296
4300: PUSH
4301: LD_INT 12
4303: GREATER
4304: OR
4305: IFFALSE 4309
// exit ;
4307: GO 4664
// missile := [ 1 ] ;
4309: LD_ADDR_VAR 0 14
4313: PUSH
4314: LD_INT 1
4316: PUSH
4317: EMPTY
4318: LIST
4319: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4320: LD_VAR 0 9
4324: PPUSH
4325: LD_VAR 0 12
4329: PPUSH
4330: CALL_OW 325
4334: IFFALSE 4363
// missile := Replace ( missile , missile + 1 , 2 ) ;
4336: LD_ADDR_VAR 0 14
4340: PUSH
4341: LD_VAR 0 14
4345: PPUSH
4346: LD_VAR 0 14
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: LD_INT 2
4357: PPUSH
4358: CALL_OW 1
4362: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4363: LD_VAR 0 9
4367: PPUSH
4368: LD_VAR 0 13
4372: PPUSH
4373: CALL_OW 325
4377: IFFALSE 4401
4379: PUSH
4380: LD_VAR 0 10
4384: PPUSH
4385: CALL_OW 255
4389: PPUSH
4390: LD_VAR 0 13
4394: PPUSH
4395: CALL_OW 325
4399: NOT
4400: AND
4401: IFFALSE 4430
// missile := Replace ( missile , missile + 1 , 3 ) ;
4403: LD_ADDR_VAR 0 14
4407: PUSH
4408: LD_VAR 0 14
4412: PPUSH
4413: LD_VAR 0 14
4417: PUSH
4418: LD_INT 1
4420: PLUS
4421: PPUSH
4422: LD_INT 3
4424: PPUSH
4425: CALL_OW 1
4429: ST_TO_ADDR
// if missile < 2 then
4430: LD_VAR 0 14
4434: PUSH
4435: LD_INT 2
4437: LESS
4438: IFFALSE 4442
// exit ;
4440: GO 4664
// x := GetX ( enemy ) ;
4442: LD_ADDR_VAR 0 4
4446: PUSH
4447: LD_VAR 0 10
4451: PPUSH
4452: CALL_OW 250
4456: ST_TO_ADDR
// y := GetY ( enemy ) ;
4457: LD_ADDR_VAR 0 5
4461: PUSH
4462: LD_VAR 0 10
4466: PPUSH
4467: CALL_OW 251
4471: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4472: LD_ADDR_VAR 0 6
4476: PUSH
4477: LD_VAR 0 4
4481: PUSH
4482: LD_INT 1
4484: NEG
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: CALL_OW 12
4493: PLUS
4494: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4495: LD_ADDR_VAR 0 7
4499: PUSH
4500: LD_VAR 0 5
4504: PUSH
4505: LD_INT 1
4507: NEG
4508: PPUSH
4509: LD_INT 1
4511: PPUSH
4512: CALL_OW 12
4516: PLUS
4517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4518: LD_VAR 0 6
4522: PPUSH
4523: LD_VAR 0 7
4527: PPUSH
4528: CALL_OW 488
4532: NOT
4533: IFFALSE 4555
// begin _x := x ;
4535: LD_ADDR_VAR 0 6
4539: PUSH
4540: LD_VAR 0 4
4544: ST_TO_ADDR
// _y := y ;
4545: LD_ADDR_VAR 0 7
4549: PUSH
4550: LD_VAR 0 5
4554: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4555: LD_ADDR_VAR 0 3
4559: PUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_VAR 0 14
4567: PPUSH
4568: CALL_OW 12
4572: ST_TO_ADDR
// case i of 1 :
4573: LD_VAR 0 3
4577: PUSH
4578: LD_INT 1
4580: DOUBLE
4581: EQUAL
4582: IFTRUE 4586
4584: GO 4603
4586: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_VAR 0 10
4596: PPUSH
4597: CALL_OW 115
4601: GO 4664
4603: LD_INT 2
4605: DOUBLE
4606: EQUAL
4607: IFTRUE 4611
4609: GO 4633
4611: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4612: LD_VAR 0 1
4616: PPUSH
4617: LD_VAR 0 6
4621: PPUSH
4622: LD_VAR 0 7
4626: PPUSH
4627: CALL_OW 153
4631: GO 4664
4633: LD_INT 3
4635: DOUBLE
4636: EQUAL
4637: IFTRUE 4641
4639: GO 4663
4641: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_VAR 0 6
4651: PPUSH
4652: LD_VAR 0 7
4656: PPUSH
4657: CALL_OW 154
4661: GO 4664
4663: POP
// end ;
4664: LD_VAR 0 2
4668: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4669: LD_INT 0
4671: PPUSH
4672: PPUSH
4673: PPUSH
4674: PPUSH
4675: PPUSH
4676: PPUSH
// if not unit or not building then
4677: LD_VAR 0 1
4681: NOT
4682: IFTRUE 4691
4684: PUSH
4685: LD_VAR 0 2
4689: NOT
4690: OR
4691: IFFALSE 4695
// exit ;
4693: GO 4853
// x := GetX ( building ) ;
4695: LD_ADDR_VAR 0 5
4699: PUSH
4700: LD_VAR 0 2
4704: PPUSH
4705: CALL_OW 250
4709: ST_TO_ADDR
// y := GetY ( building ) ;
4710: LD_ADDR_VAR 0 6
4714: PUSH
4715: LD_VAR 0 2
4719: PPUSH
4720: CALL_OW 251
4724: ST_TO_ADDR
// for i := 0 to 5 do
4725: LD_ADDR_VAR 0 4
4729: PUSH
4730: DOUBLE
4731: LD_INT 0
4733: DEC
4734: ST_TO_ADDR
4735: LD_INT 5
4737: PUSH
4738: FOR_TO
4739: IFFALSE 4851
// begin _x := ShiftX ( x , i , 3 ) ;
4741: LD_ADDR_VAR 0 7
4745: PUSH
4746: LD_VAR 0 5
4750: PPUSH
4751: LD_VAR 0 4
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 272
4763: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4764: LD_ADDR_VAR 0 8
4768: PUSH
4769: LD_VAR 0 6
4773: PPUSH
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_INT 3
4781: PPUSH
4782: CALL_OW 273
4786: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4787: LD_VAR 0 7
4791: PPUSH
4792: LD_VAR 0 8
4796: PPUSH
4797: CALL_OW 488
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4738
// if HexInfo ( _x , _y ) = 0 then
4806: LD_VAR 0 7
4810: PPUSH
4811: LD_VAR 0 8
4815: PPUSH
4816: CALL_OW 428
4820: PUSH
4821: LD_INT 0
4823: EQUAL
4824: IFFALSE 4849
// begin ComMoveXY ( unit , _x , _y ) ;
4826: LD_VAR 0 1
4830: PPUSH
4831: LD_VAR 0 7
4835: PPUSH
4836: LD_VAR 0 8
4840: PPUSH
4841: CALL_OW 111
// exit ;
4845: POP
4846: POP
4847: GO 4853
// end ; end ;
4849: GO 4738
4851: POP
4852: POP
// end ;
4853: LD_VAR 0 3
4857: RET
// export function ScanBase ( side , base_area ) ; begin
4858: LD_INT 0
4860: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 2
4870: PPUSH
4871: LD_INT 81
4873: PUSH
4874: LD_VAR 0 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PPUSH
4883: CALL_OW 70
4887: ST_TO_ADDR
// end ;
4888: LD_VAR 0 3
4892: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// result := false ;
4899: LD_ADDR_VAR 0 2
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// side := GetSide ( unit ) ;
4907: LD_ADDR_VAR 0 3
4911: PUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 255
4921: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 1
4931: PPUSH
4932: CALL_OW 248
4936: ST_TO_ADDR
// case nat of 1 :
4937: LD_VAR 0 4
4941: PUSH
4942: LD_INT 1
4944: DOUBLE
4945: EQUAL
4946: IFTRUE 4950
4948: GO 4961
4950: POP
// tech := tech_lassight ; 2 :
4951: LD_ADDR_VAR 0 5
4955: PUSH
4956: LD_INT 12
4958: ST_TO_ADDR
4959: GO 5000
4961: LD_INT 2
4963: DOUBLE
4964: EQUAL
4965: IFTRUE 4969
4967: GO 4980
4969: POP
// tech := tech_mortar ; 3 :
4970: LD_ADDR_VAR 0 5
4974: PUSH
4975: LD_INT 41
4977: ST_TO_ADDR
4978: GO 5000
4980: LD_INT 3
4982: DOUBLE
4983: EQUAL
4984: IFTRUE 4988
4986: GO 4999
4988: POP
// tech := tech_bazooka ; end ;
4989: LD_ADDR_VAR 0 5
4993: PUSH
4994: LD_INT 44
4996: ST_TO_ADDR
4997: GO 5000
4999: POP
// if Researched ( side , tech ) then
5000: LD_VAR 0 3
5004: PPUSH
5005: LD_VAR 0 5
5009: PPUSH
5010: CALL_OW 325
5014: IFFALSE 5041
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: LD_INT 5
5023: PUSH
5024: LD_INT 8
5026: PUSH
5027: LD_INT 9
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: PUSH
5035: LD_VAR 0 4
5039: ARRAY
5040: ST_TO_ADDR
// end ;
5041: LD_VAR 0 2
5045: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5046: LD_INT 0
5048: PPUSH
5049: PPUSH
5050: PPUSH
// if not mines then
5051: LD_VAR 0 2
5055: NOT
5056: IFFALSE 5060
// exit ;
5058: GO 5204
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5060: LD_ADDR_VAR 0 5
5064: PUSH
5065: LD_INT 81
5067: PUSH
5068: LD_VAR 0 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 3
5079: PUSH
5080: LD_INT 21
5082: PUSH
5083: LD_INT 3
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: ST_TO_ADDR
// for i in mines do
5103: LD_ADDR_VAR 0 4
5107: PUSH
5108: LD_VAR 0 2
5112: PUSH
5113: FOR_IN
5114: IFFALSE 5202
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5116: LD_VAR 0 4
5120: PUSH
5121: LD_INT 1
5123: ARRAY
5124: PPUSH
5125: LD_VAR 0 4
5129: PUSH
5130: LD_INT 2
5132: ARRAY
5133: PPUSH
5134: CALL_OW 458
5138: NOT
5139: IFFALSE 5143
// continue ;
5141: GO 5113
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5143: LD_VAR 0 4
5147: PUSH
5148: LD_INT 1
5150: ARRAY
5151: PPUSH
5152: LD_VAR 0 4
5156: PUSH
5157: LD_INT 2
5159: ARRAY
5160: PPUSH
5161: CALL_OW 428
5165: PUSH
5166: LD_VAR 0 5
5170: IN
5171: IFFALSE 5200
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5173: LD_VAR 0 4
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: LD_VAR 0 4
5186: PUSH
5187: LD_INT 2
5189: ARRAY
5190: PPUSH
5191: LD_VAR 0 1
5195: PPUSH
5196: CALL_OW 456
// end ;
5200: GO 5113
5202: POP
5203: POP
// end ;
5204: LD_VAR 0 3
5208: RET
// export function Count ( array ) ; begin
5209: LD_INT 0
5211: PPUSH
// result := array + 0 ;
5212: LD_ADDR_VAR 0 2
5216: PUSH
5217: LD_VAR 0 1
5221: PUSH
5222: LD_INT 0
5224: PLUS
5225: ST_TO_ADDR
// end ;
5226: LD_VAR 0 2
5230: RET
// export function IsEmpty ( building ) ; begin
5231: LD_INT 0
5233: PPUSH
// if not building then
5234: LD_VAR 0 1
5238: NOT
5239: IFFALSE 5243
// exit ;
5241: GO 5286
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5243: LD_ADDR_VAR 0 2
5247: PUSH
5248: LD_VAR 0 1
5252: PUSH
5253: LD_INT 22
5255: PUSH
5256: LD_VAR 0 1
5260: PPUSH
5261: CALL_OW 255
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 58
5272: PUSH
5273: EMPTY
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PPUSH
5280: CALL_OW 69
5284: IN
5285: ST_TO_ADDR
// end ;
5286: LD_VAR 0 2
5290: RET
// export function IsNotFull ( building ) ; var places ; begin
5291: LD_INT 0
5293: PPUSH
5294: PPUSH
// if not building then
5295: LD_VAR 0 1
5299: NOT
5300: IFFALSE 5304
// exit ;
5302: GO 5332
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: LD_INT 3
5316: PUSH
5317: LD_INT 62
5319: PUSH
5320: EMPTY
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 72
5331: ST_TO_ADDR
// end ;
5332: LD_VAR 0 2
5336: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5337: LD_INT 0
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
// tmp := [ ] ;
5343: LD_ADDR_VAR 0 3
5347: PUSH
5348: EMPTY
5349: ST_TO_ADDR
// list := [ ] ;
5350: LD_ADDR_VAR 0 5
5354: PUSH
5355: EMPTY
5356: ST_TO_ADDR
// for i = 16 to 25 do
5357: LD_ADDR_VAR 0 4
5361: PUSH
5362: DOUBLE
5363: LD_INT 16
5365: DEC
5366: ST_TO_ADDR
5367: LD_INT 25
5369: PUSH
5370: FOR_TO
5371: IFFALSE 5444
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5373: LD_ADDR_VAR 0 3
5377: PUSH
5378: LD_VAR 0 3
5382: PUSH
5383: LD_INT 22
5385: PUSH
5386: LD_VAR 0 1
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 91
5402: PUSH
5403: LD_VAR 0 1
5407: PUSH
5408: LD_INT 6
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 30
5418: PUSH
5419: LD_VAR 0 4
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: PPUSH
5436: CALL_OW 69
5440: ADD
5441: ST_TO_ADDR
5442: GO 5370
5444: POP
5445: POP
// for i = 1 to tmp do
5446: LD_ADDR_VAR 0 4
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_VAR 0 3
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5550
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5464: LD_ADDR_VAR 0 5
5468: PUSH
5469: LD_VAR 0 5
5473: PUSH
5474: LD_VAR 0 3
5478: PUSH
5479: LD_VAR 0 4
5483: ARRAY
5484: PPUSH
5485: CALL_OW 266
5489: PUSH
5490: LD_VAR 0 3
5494: PUSH
5495: LD_VAR 0 4
5499: ARRAY
5500: PPUSH
5501: CALL_OW 250
5505: PUSH
5506: LD_VAR 0 3
5510: PUSH
5511: LD_VAR 0 4
5515: ARRAY
5516: PPUSH
5517: CALL_OW 251
5521: PUSH
5522: LD_VAR 0 3
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PPUSH
5533: CALL_OW 254
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: ADD
5547: ST_TO_ADDR
5548: GO 5461
5550: POP
5551: POP
// result := list ;
5552: LD_ADDR_VAR 0 2
5556: PUSH
5557: LD_VAR 0 5
5561: ST_TO_ADDR
// end ;
5562: LD_VAR 0 2
5566: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
5575: PPUSH
// if not factory then
5576: LD_VAR 0 1
5580: NOT
5581: IFFALSE 5585
// exit ;
5583: GO 6188
// if control = control_apeman then
5585: LD_VAR 0 4
5589: PUSH
5590: LD_INT 5
5592: EQUAL
5593: IFFALSE 5702
// begin tmp := UnitsInside ( factory ) ;
5595: LD_ADDR_VAR 0 8
5599: PUSH
5600: LD_VAR 0 1
5604: PPUSH
5605: CALL_OW 313
5609: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5610: LD_VAR 0 8
5614: PPUSH
5615: LD_INT 25
5617: PUSH
5618: LD_INT 12
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 72
5629: NOT
5630: IFFALSE 5640
// control := control_manual ;
5632: LD_ADDR_VAR 0 4
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5640: LD_ADDR_VAR 0 8
5644: PUSH
5645: LD_VAR 0 1
5649: PPUSH
5650: CALL 5337 0 1
5654: ST_TO_ADDR
// if tmp then
5655: LD_VAR 0 8
5659: IFFALSE 5702
// begin for i in tmp do
5661: LD_ADDR_VAR 0 7
5665: PUSH
5666: LD_VAR 0 8
5670: PUSH
5671: FOR_IN
5672: IFFALSE 5700
// if i [ 1 ] = b_ext_radio then
5674: LD_VAR 0 7
5678: PUSH
5679: LD_INT 1
5681: ARRAY
5682: PUSH
5683: LD_INT 22
5685: EQUAL
5686: IFFALSE 5698
// begin control := control_remote ;
5688: LD_ADDR_VAR 0 4
5692: PUSH
5693: LD_INT 2
5695: ST_TO_ADDR
// break ;
5696: GO 5700
// end ;
5698: GO 5671
5700: POP
5701: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5702: LD_VAR 0 1
5706: PPUSH
5707: LD_VAR 0 2
5711: PPUSH
5712: LD_VAR 0 3
5716: PPUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: LD_VAR 0 5
5726: PPUSH
5727: CALL_OW 448
5731: IFFALSE 5766
// begin result := [ chassis , engine , control , weapon ] ;
5733: LD_ADDR_VAR 0 6
5737: PUSH
5738: LD_VAR 0 2
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: LD_VAR 0 4
5752: PUSH
5753: LD_VAR 0 5
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: ST_TO_ADDR
// exit ;
5764: GO 6188
// end ; _chassis := AvailableChassisList ( factory ) ;
5766: LD_ADDR_VAR 0 9
5770: PUSH
5771: LD_VAR 0 1
5775: PPUSH
5776: CALL_OW 475
5780: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5781: LD_ADDR_VAR 0 11
5785: PUSH
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 476
5795: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5796: LD_ADDR_VAR 0 12
5800: PUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 477
5810: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5811: LD_ADDR_VAR 0 10
5815: PUSH
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 478
5825: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5826: LD_VAR 0 9
5830: NOT
5831: IFTRUE 5840
5833: PUSH
5834: LD_VAR 0 11
5838: NOT
5839: OR
5840: IFTRUE 5849
5842: PUSH
5843: LD_VAR 0 12
5847: NOT
5848: OR
5849: IFTRUE 5858
5851: PUSH
5852: LD_VAR 0 10
5856: NOT
5857: OR
5858: IFFALSE 5893
// begin result := [ chassis , engine , control , weapon ] ;
5860: LD_ADDR_VAR 0 6
5864: PUSH
5865: LD_VAR 0 2
5869: PUSH
5870: LD_VAR 0 3
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: LD_VAR 0 5
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: ST_TO_ADDR
// exit ;
5891: GO 6188
// end ; if not chassis in _chassis then
5893: LD_VAR 0 2
5897: PUSH
5898: LD_VAR 0 9
5902: IN
5903: NOT
5904: IFFALSE 5930
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5906: LD_ADDR_VAR 0 2
5910: PUSH
5911: LD_VAR 0 9
5915: PUSH
5916: LD_INT 1
5918: PPUSH
5919: LD_VAR 0 9
5923: PPUSH
5924: CALL_OW 12
5928: ARRAY
5929: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5930: LD_VAR 0 2
5934: PPUSH
5935: LD_VAR 0 3
5939: PPUSH
5940: CALL 6193 0 2
5944: NOT
5945: IFFALSE 6006
// repeat engine := _engine [ 1 ] ;
5947: LD_ADDR_VAR 0 3
5951: PUSH
5952: LD_VAR 0 11
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5961: LD_ADDR_VAR 0 11
5965: PUSH
5966: LD_VAR 0 11
5970: PPUSH
5971: LD_INT 1
5973: PPUSH
5974: CALL_OW 3
5978: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5979: LD_VAR 0 2
5983: PPUSH
5984: LD_VAR 0 3
5988: PPUSH
5989: CALL 6193 0 2
5993: IFTRUE 6004
5995: PUSH
5996: LD_VAR 0 11
6000: PUSH
6001: EMPTY
6002: EQUAL
6003: OR
6004: IFFALSE 5947
// if not control in _control then
6006: LD_VAR 0 4
6010: PUSH
6011: LD_VAR 0 12
6015: IN
6016: NOT
6017: IFFALSE 6043
// control := _control [ rand ( 1 , _control ) ] ;
6019: LD_ADDR_VAR 0 4
6023: PUSH
6024: LD_VAR 0 12
6028: PUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_VAR 0 12
6036: PPUSH
6037: CALL_OW 12
6041: ARRAY
6042: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6043: LD_VAR 0 2
6047: PPUSH
6048: LD_VAR 0 5
6052: PPUSH
6053: CALL 6415 0 2
6057: NOT
6058: IFFALSE 6119
// repeat weapon := _weapon [ 1 ] ;
6060: LD_ADDR_VAR 0 5
6064: PUSH
6065: LD_VAR 0 10
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6074: LD_ADDR_VAR 0 10
6078: PUSH
6079: LD_VAR 0 10
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: CALL_OW 3
6091: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6092: LD_VAR 0 2
6096: PPUSH
6097: LD_VAR 0 5
6101: PPUSH
6102: CALL 6415 0 2
6106: IFTRUE 6117
6108: PUSH
6109: LD_VAR 0 10
6113: PUSH
6114: EMPTY
6115: EQUAL
6116: OR
6117: IFFALSE 6060
// result := [ ] ;
6119: LD_ADDR_VAR 0 6
6123: PUSH
6124: EMPTY
6125: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6126: LD_VAR 0 1
6130: PPUSH
6131: LD_VAR 0 2
6135: PPUSH
6136: LD_VAR 0 3
6140: PPUSH
6141: LD_VAR 0 4
6145: PPUSH
6146: LD_VAR 0 5
6150: PPUSH
6151: CALL_OW 448
6155: IFFALSE 6188
// result := [ chassis , engine , control , weapon ] ;
6157: LD_ADDR_VAR 0 6
6161: PUSH
6162: LD_VAR 0 2
6166: PUSH
6167: LD_VAR 0 3
6171: PUSH
6172: LD_VAR 0 4
6176: PUSH
6177: LD_VAR 0 5
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: ST_TO_ADDR
// end ;
6188: LD_VAR 0 6
6192: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6193: LD_INT 0
6195: PPUSH
// if not chassis or not engine then
6196: LD_VAR 0 1
6200: NOT
6201: IFTRUE 6210
6203: PUSH
6204: LD_VAR 0 2
6208: NOT
6209: OR
6210: IFFALSE 6214
// exit ;
6212: GO 6410
// case engine of engine_solar :
6214: LD_VAR 0 2
6218: PUSH
6219: LD_INT 2
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6265
6227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_INT 11
6235: PUSH
6236: LD_INT 12
6238: PUSH
6239: LD_INT 13
6241: PUSH
6242: LD_INT 14
6244: PUSH
6245: LD_INT 1
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: LD_INT 3
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: ST_TO_ADDR
6263: GO 6394
6265: LD_INT 1
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6273
6271: GO 6335
6273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6274: LD_ADDR_VAR 0 3
6278: PUSH
6279: LD_INT 11
6281: PUSH
6282: LD_INT 12
6284: PUSH
6285: LD_INT 13
6287: PUSH
6288: LD_INT 14
6290: PUSH
6291: LD_INT 1
6293: PUSH
6294: LD_INT 2
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: LD_INT 4
6302: PUSH
6303: LD_INT 5
6305: PUSH
6306: LD_INT 21
6308: PUSH
6309: LD_INT 23
6311: PUSH
6312: LD_INT 22
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: ST_TO_ADDR
6333: GO 6394
6335: LD_INT 3
6337: DOUBLE
6338: EQUAL
6339: IFTRUE 6343
6341: GO 6393
6343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_INT 13
6351: PUSH
6352: LD_INT 14
6354: PUSH
6355: LD_INT 2
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 4
6363: PUSH
6364: LD_INT 5
6366: PUSH
6367: LD_INT 21
6369: PUSH
6370: LD_INT 22
6372: PUSH
6373: LD_INT 23
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: ST_TO_ADDR
6391: GO 6394
6393: POP
// result := ( chassis in result ) ;
6394: LD_ADDR_VAR 0 3
6398: PUSH
6399: LD_VAR 0 1
6403: PUSH
6404: LD_VAR 0 3
6408: IN
6409: ST_TO_ADDR
// end ;
6410: LD_VAR 0 3
6414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6415: LD_INT 0
6417: PPUSH
// if not chassis or not weapon then
6418: LD_VAR 0 1
6422: NOT
6423: IFTRUE 6432
6425: PUSH
6426: LD_VAR 0 2
6430: NOT
6431: OR
6432: IFFALSE 6436
// exit ;
6434: GO 7530
// case weapon of us_machine_gun :
6436: LD_VAR 0 2
6440: PUSH
6441: LD_INT 2
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6479
6449: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
6477: GO 7514
6479: LD_INT 3
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6517
6487: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_INT 1
6495: PUSH
6496: LD_INT 2
6498: PUSH
6499: LD_INT 3
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: ST_TO_ADDR
6515: GO 7514
6517: LD_INT 11
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6555
6525: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 3
6539: PUSH
6540: LD_INT 4
6542: PUSH
6543: LD_INT 5
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: ST_TO_ADDR
6553: GO 7514
6555: LD_INT 4
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6563
6561: GO 6589
6563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6564: LD_ADDR_VAR 0 3
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: LD_INT 4
6577: PUSH
6578: LD_INT 5
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: ST_TO_ADDR
6587: GO 7514
6589: LD_INT 5
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6623
6597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_INT 2
6605: PUSH
6606: LD_INT 3
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 5
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: ST_TO_ADDR
6621: GO 7514
6623: LD_INT 9
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6657
6631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: LD_INT 2
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: LD_INT 4
6645: PUSH
6646: LD_INT 5
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: ST_TO_ADDR
6655: GO 7514
6657: LD_INT 7
6659: DOUBLE
6660: EQUAL
6661: IFTRUE 6665
6663: GO 6691
6665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: LD_INT 3
6676: PUSH
6677: LD_INT 4
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: ST_TO_ADDR
6689: GO 7514
6691: LD_INT 12
6693: DOUBLE
6694: EQUAL
6695: IFTRUE 6699
6697: GO 6725
6699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6700: LD_ADDR_VAR 0 3
6704: PUSH
6705: LD_INT 2
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 4
6713: PUSH
6714: LD_INT 5
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: ST_TO_ADDR
6723: GO 7514
6725: LD_INT 13
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6759
6733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: ST_TO_ADDR
6757: GO 7514
6759: LD_INT 14
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6785
6767: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6768: LD_ADDR_VAR 0 3
6772: PUSH
6773: LD_INT 4
6775: PUSH
6776: LD_INT 5
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: ST_TO_ADDR
6783: GO 7514
6785: LD_INT 6
6787: DOUBLE
6788: EQUAL
6789: IFTRUE 6793
6791: GO 6811
6793: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6794: LD_ADDR_VAR 0 3
6798: PUSH
6799: LD_INT 4
6801: PUSH
6802: LD_INT 5
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: ST_TO_ADDR
6809: GO 7514
6811: LD_INT 10
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6837
6819: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_INT 4
6827: PUSH
6828: LD_INT 5
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: ST_TO_ADDR
6835: GO 7514
6837: LD_INT 22
6839: DOUBLE
6840: EQUAL
6841: IFTRUE 6845
6843: GO 6871
6845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6846: LD_ADDR_VAR 0 3
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: LD_INT 13
6859: PUSH
6860: LD_INT 14
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: ST_TO_ADDR
6869: GO 7514
6871: LD_INT 23
6873: DOUBLE
6874: EQUAL
6875: IFTRUE 6879
6877: GO 6905
6879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_INT 11
6887: PUSH
6888: LD_INT 12
6890: PUSH
6891: LD_INT 13
6893: PUSH
6894: LD_INT 14
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: ST_TO_ADDR
6903: GO 7514
6905: LD_INT 24
6907: DOUBLE
6908: EQUAL
6909: IFTRUE 6913
6911: GO 6939
6913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_INT 11
6921: PUSH
6922: LD_INT 12
6924: PUSH
6925: LD_INT 13
6927: PUSH
6928: LD_INT 14
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: ST_TO_ADDR
6937: GO 7514
6939: LD_INT 30
6941: DOUBLE
6942: EQUAL
6943: IFTRUE 6947
6945: GO 6973
6947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6948: LD_ADDR_VAR 0 3
6952: PUSH
6953: LD_INT 11
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 13
6961: PUSH
6962: LD_INT 14
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: ST_TO_ADDR
6971: GO 7514
6973: LD_INT 25
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 6999
6981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6982: LD_ADDR_VAR 0 3
6986: PUSH
6987: LD_INT 13
6989: PUSH
6990: LD_INT 14
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: ST_TO_ADDR
6997: GO 7514
6999: LD_INT 27
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7025
7007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7008: LD_ADDR_VAR 0 3
7012: PUSH
7013: LD_INT 13
7015: PUSH
7016: LD_INT 14
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: ST_TO_ADDR
7023: GO 7514
7025: LD_INT 92
7027: DOUBLE
7028: EQUAL
7029: IFTRUE 7033
7031: GO 7059
7033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_INT 11
7041: PUSH
7042: LD_INT 12
7044: PUSH
7045: LD_INT 13
7047: PUSH
7048: LD_INT 14
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 7514
7059: LD_INT 28
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7085
7067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7068: LD_ADDR_VAR 0 3
7072: PUSH
7073: LD_INT 13
7075: PUSH
7076: LD_INT 14
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: ST_TO_ADDR
7083: GO 7514
7085: LD_INT 29
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7111
7093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: LD_INT 13
7101: PUSH
7102: LD_INT 14
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 7514
7111: LD_INT 31
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7137
7119: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_INT 13
7127: PUSH
7128: LD_INT 14
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: ST_TO_ADDR
7135: GO 7514
7137: LD_INT 26
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7163
7145: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7146: LD_ADDR_VAR 0 3
7150: PUSH
7151: LD_INT 13
7153: PUSH
7154: LD_INT 14
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 7514
7163: LD_INT 42
7165: DOUBLE
7166: EQUAL
7167: IFTRUE 7171
7169: GO 7197
7171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7172: LD_ADDR_VAR 0 3
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 22
7182: PUSH
7183: LD_INT 23
7185: PUSH
7186: LD_INT 24
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: ST_TO_ADDR
7195: GO 7514
7197: LD_INT 43
7199: DOUBLE
7200: EQUAL
7201: IFTRUE 7205
7203: GO 7231
7205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: LD_INT 21
7213: PUSH
7214: LD_INT 22
7216: PUSH
7217: LD_INT 23
7219: PUSH
7220: LD_INT 24
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: ST_TO_ADDR
7229: GO 7514
7231: LD_INT 44
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7239
7237: GO 7265
7239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7240: LD_ADDR_VAR 0 3
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 22
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 24
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: ST_TO_ADDR
7263: GO 7514
7265: LD_INT 45
7267: DOUBLE
7268: EQUAL
7269: IFTRUE 7273
7271: GO 7299
7273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 22
7284: PUSH
7285: LD_INT 23
7287: PUSH
7288: LD_INT 24
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: ST_TO_ADDR
7297: GO 7514
7299: LD_INT 49
7301: DOUBLE
7302: EQUAL
7303: IFTRUE 7307
7305: GO 7333
7307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: LD_INT 21
7315: PUSH
7316: LD_INT 22
7318: PUSH
7319: LD_INT 23
7321: PUSH
7322: LD_INT 24
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: ST_TO_ADDR
7331: GO 7514
7333: LD_INT 51
7335: DOUBLE
7336: EQUAL
7337: IFTRUE 7341
7339: GO 7367
7341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_INT 21
7349: PUSH
7350: LD_INT 22
7352: PUSH
7353: LD_INT 23
7355: PUSH
7356: LD_INT 24
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: ST_TO_ADDR
7365: GO 7514
7367: LD_INT 52
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7401
7375: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7376: LD_ADDR_VAR 0 3
7380: PUSH
7381: LD_INT 21
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: LD_INT 23
7389: PUSH
7390: LD_INT 24
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: ST_TO_ADDR
7399: GO 7514
7401: LD_INT 53
7403: DOUBLE
7404: EQUAL
7405: IFTRUE 7409
7407: GO 7427
7409: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7410: LD_ADDR_VAR 0 3
7414: PUSH
7415: LD_INT 23
7417: PUSH
7418: LD_INT 24
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: ST_TO_ADDR
7425: GO 7514
7427: LD_INT 46
7429: DOUBLE
7430: EQUAL
7431: IFTRUE 7435
7433: GO 7453
7435: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7436: LD_ADDR_VAR 0 3
7440: PUSH
7441: LD_INT 23
7443: PUSH
7444: LD_INT 24
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: ST_TO_ADDR
7451: GO 7514
7453: LD_INT 47
7455: DOUBLE
7456: EQUAL
7457: IFTRUE 7461
7459: GO 7479
7461: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7462: LD_ADDR_VAR 0 3
7466: PUSH
7467: LD_INT 23
7469: PUSH
7470: LD_INT 24
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: ST_TO_ADDR
7477: GO 7514
7479: LD_INT 98
7481: DOUBLE
7482: EQUAL
7483: IFTRUE 7487
7485: GO 7513
7487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7488: LD_ADDR_VAR 0 3
7492: PUSH
7493: LD_INT 21
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 23
7501: PUSH
7502: LD_INT 24
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: ST_TO_ADDR
7511: GO 7514
7513: POP
// result := ( chassis in result ) ;
7514: LD_ADDR_VAR 0 3
7518: PUSH
7519: LD_VAR 0 1
7523: PUSH
7524: LD_VAR 0 3
7528: IN
7529: ST_TO_ADDR
// end ;
7530: LD_VAR 0 3
7534: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
// result := array ;
7544: LD_ADDR_VAR 0 5
7548: PUSH
7549: LD_VAR 0 1
7553: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7554: LD_VAR 0 1
7558: NOT
7559: IFTRUE 7568
7561: PUSH
7562: LD_VAR 0 2
7566: NOT
7567: OR
7568: IFTRUE 7577
7570: PUSH
7571: LD_VAR 0 3
7575: NOT
7576: OR
7577: IFTRUE 7591
7579: PUSH
7580: LD_VAR 0 2
7584: PUSH
7585: LD_VAR 0 1
7589: GREATER
7590: OR
7591: IFTRUE 7605
7593: PUSH
7594: LD_VAR 0 3
7598: PUSH
7599: LD_VAR 0 1
7603: GREATER
7604: OR
7605: IFFALSE 7609
// exit ;
7607: GO 7905
// if direction then
7609: LD_VAR 0 4
7613: IFFALSE 7677
// begin d := 1 ;
7615: LD_ADDR_VAR 0 9
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if i_from > i_to then
7623: LD_VAR 0 2
7627: PUSH
7628: LD_VAR 0 3
7632: GREATER
7633: IFFALSE 7659
// length := ( array - i_from ) + i_to else
7635: LD_ADDR_VAR 0 11
7639: PUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_VAR 0 2
7649: MINUS
7650: PUSH
7651: LD_VAR 0 3
7655: PLUS
7656: ST_TO_ADDR
7657: GO 7675
// length := i_to - i_from ;
7659: LD_ADDR_VAR 0 11
7663: PUSH
7664: LD_VAR 0 3
7668: PUSH
7669: LD_VAR 0 2
7673: MINUS
7674: ST_TO_ADDR
// end else
7675: GO 7738
// begin d := - 1 ;
7677: LD_ADDR_VAR 0 9
7681: PUSH
7682: LD_INT 1
7684: NEG
7685: ST_TO_ADDR
// if i_from > i_to then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_VAR 0 3
7695: GREATER
7696: IFFALSE 7716
// length := i_from - i_to else
7698: LD_ADDR_VAR 0 11
7702: PUSH
7703: LD_VAR 0 2
7707: PUSH
7708: LD_VAR 0 3
7712: MINUS
7713: ST_TO_ADDR
7714: GO 7738
// length := ( array - i_to ) + i_from ;
7716: LD_ADDR_VAR 0 11
7720: PUSH
7721: LD_VAR 0 1
7725: PUSH
7726: LD_VAR 0 3
7730: MINUS
7731: PUSH
7732: LD_VAR 0 2
7736: PLUS
7737: ST_TO_ADDR
// end ; if not length then
7738: LD_VAR 0 11
7742: NOT
7743: IFFALSE 7747
// exit ;
7745: GO 7905
// tmp := array ;
7747: LD_ADDR_VAR 0 10
7751: PUSH
7752: LD_VAR 0 1
7756: ST_TO_ADDR
// for i = 1 to length do
7757: LD_ADDR_VAR 0 6
7761: PUSH
7762: DOUBLE
7763: LD_INT 1
7765: DEC
7766: ST_TO_ADDR
7767: LD_VAR 0 11
7771: PUSH
7772: FOR_TO
7773: IFFALSE 7893
// begin for j = 1 to array do
7775: LD_ADDR_VAR 0 7
7779: PUSH
7780: DOUBLE
7781: LD_INT 1
7783: DEC
7784: ST_TO_ADDR
7785: LD_VAR 0 1
7789: PUSH
7790: FOR_TO
7791: IFFALSE 7879
// begin k := j + d ;
7793: LD_ADDR_VAR 0 8
7797: PUSH
7798: LD_VAR 0 7
7802: PUSH
7803: LD_VAR 0 9
7807: PLUS
7808: ST_TO_ADDR
// if k > array then
7809: LD_VAR 0 8
7813: PUSH
7814: LD_VAR 0 1
7818: GREATER
7819: IFFALSE 7829
// k := 1 ;
7821: LD_ADDR_VAR 0 8
7825: PUSH
7826: LD_INT 1
7828: ST_TO_ADDR
// if not k then
7829: LD_VAR 0 8
7833: NOT
7834: IFFALSE 7846
// k := array ;
7836: LD_ADDR_VAR 0 8
7840: PUSH
7841: LD_VAR 0 1
7845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7846: LD_ADDR_VAR 0 10
7850: PUSH
7851: LD_VAR 0 10
7855: PPUSH
7856: LD_VAR 0 8
7860: PPUSH
7861: LD_VAR 0 1
7865: PUSH
7866: LD_VAR 0 7
7870: ARRAY
7871: PPUSH
7872: CALL_OW 1
7876: ST_TO_ADDR
// end ;
7877: GO 7790
7879: POP
7880: POP
// array := tmp ;
7881: LD_ADDR_VAR 0 1
7885: PUSH
7886: LD_VAR 0 10
7890: ST_TO_ADDR
// end ;
7891: GO 7772
7893: POP
7894: POP
// result := array ;
7895: LD_ADDR_VAR 0 5
7899: PUSH
7900: LD_VAR 0 1
7904: ST_TO_ADDR
// end ;
7905: LD_VAR 0 5
7909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7910: LD_INT 0
7912: PPUSH
7913: PPUSH
// result := 0 ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_INT 0
7921: ST_TO_ADDR
// if not array or not value in array then
7922: LD_VAR 0 1
7926: NOT
7927: IFTRUE 7942
7929: PUSH
7930: LD_VAR 0 2
7934: PUSH
7935: LD_VAR 0 1
7939: IN
7940: NOT
7941: OR
7942: IFFALSE 7946
// exit ;
7944: GO 8000
// for i = 1 to array do
7946: LD_ADDR_VAR 0 4
7950: PUSH
7951: DOUBLE
7952: LD_INT 1
7954: DEC
7955: ST_TO_ADDR
7956: LD_VAR 0 1
7960: PUSH
7961: FOR_TO
7962: IFFALSE 7998
// if value = array [ i ] then
7964: LD_VAR 0 2
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_VAR 0 4
7978: ARRAY
7979: EQUAL
7980: IFFALSE 7996
// begin result := i ;
7982: LD_ADDR_VAR 0 3
7986: PUSH
7987: LD_VAR 0 4
7991: ST_TO_ADDR
// exit ;
7992: POP
7993: POP
7994: GO 8000
// end ;
7996: GO 7961
7998: POP
7999: POP
// end ;
8000: LD_VAR 0 3
8004: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8005: LD_INT 0
8007: PPUSH
// vc_chassis := chassis ;
8008: LD_ADDR_OWVAR 37
8012: PUSH
8013: LD_VAR 0 1
8017: ST_TO_ADDR
// vc_engine := engine ;
8018: LD_ADDR_OWVAR 39
8022: PUSH
8023: LD_VAR 0 2
8027: ST_TO_ADDR
// vc_control := control ;
8028: LD_ADDR_OWVAR 38
8032: PUSH
8033: LD_VAR 0 3
8037: ST_TO_ADDR
// vc_weapon := weapon ;
8038: LD_ADDR_OWVAR 40
8042: PUSH
8043: LD_VAR 0 4
8047: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8048: LD_ADDR_OWVAR 41
8052: PUSH
8053: LD_VAR 0 5
8057: ST_TO_ADDR
// end ;
8058: LD_VAR 0 6
8062: RET
// export function WantPlant ( unit ) ; var task ; begin
8063: LD_INT 0
8065: PPUSH
8066: PPUSH
// result := false ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_INT 0
8074: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8075: LD_ADDR_VAR 0 3
8079: PUSH
8080: LD_VAR 0 1
8084: PPUSH
8085: CALL_OW 437
8089: ST_TO_ADDR
// if task then
8090: LD_VAR 0 3
8094: IFFALSE 8122
// if task [ 1 ] [ 1 ] = p then
8096: LD_VAR 0 3
8100: PUSH
8101: LD_INT 1
8103: ARRAY
8104: PUSH
8105: LD_INT 1
8107: ARRAY
8108: PUSH
8109: LD_STRING p
8111: EQUAL
8112: IFFALSE 8122
// result := true ;
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// end ;
8122: LD_VAR 0 2
8126: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8127: LD_INT 0
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
// if pos < 1 then
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 1
8140: LESS
8141: IFFALSE 8145
// exit ;
8143: GO 8448
// if pos = 1 then
8145: LD_VAR 0 2
8149: PUSH
8150: LD_INT 1
8152: EQUAL
8153: IFFALSE 8186
// result := Replace ( arr , pos [ 1 ] , value ) else
8155: LD_ADDR_VAR 0 4
8159: PUSH
8160: LD_VAR 0 1
8164: PPUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_INT 1
8172: ARRAY
8173: PPUSH
8174: LD_VAR 0 3
8178: PPUSH
8179: CALL_OW 1
8183: ST_TO_ADDR
8184: GO 8448
// begin tmp := arr ;
8186: LD_ADDR_VAR 0 6
8190: PUSH
8191: LD_VAR 0 1
8195: ST_TO_ADDR
// s_arr := [ tmp ] ;
8196: LD_ADDR_VAR 0 7
8200: PUSH
8201: LD_VAR 0 6
8205: PUSH
8206: EMPTY
8207: LIST
8208: ST_TO_ADDR
// for i = 1 to pos - 1 do
8209: LD_ADDR_VAR 0 5
8213: PUSH
8214: DOUBLE
8215: LD_INT 1
8217: DEC
8218: ST_TO_ADDR
8219: LD_VAR 0 2
8223: PUSH
8224: LD_INT 1
8226: MINUS
8227: PUSH
8228: FOR_TO
8229: IFFALSE 8274
// begin tmp := tmp [ pos [ i ] ] ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_VAR 0 6
8240: PUSH
8241: LD_VAR 0 2
8245: PUSH
8246: LD_VAR 0 5
8250: ARRAY
8251: ARRAY
8252: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8253: LD_ADDR_VAR 0 7
8257: PUSH
8258: LD_VAR 0 7
8262: PUSH
8263: LD_VAR 0 6
8267: PUSH
8268: EMPTY
8269: LIST
8270: ADD
8271: ST_TO_ADDR
// end ;
8272: GO 8228
8274: POP
8275: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8276: LD_ADDR_VAR 0 6
8280: PUSH
8281: LD_VAR 0 6
8285: PPUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 2
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 3
8301: PPUSH
8302: CALL_OW 1
8306: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8307: LD_ADDR_VAR 0 7
8311: PUSH
8312: LD_VAR 0 7
8316: PPUSH
8317: LD_VAR 0 7
8321: PPUSH
8322: LD_VAR 0 6
8326: PPUSH
8327: CALL_OW 1
8331: ST_TO_ADDR
// for i = s_arr downto 2 do
8332: LD_ADDR_VAR 0 5
8336: PUSH
8337: DOUBLE
8338: LD_VAR 0 7
8342: INC
8343: ST_TO_ADDR
8344: LD_INT 2
8346: PUSH
8347: FOR_DOWNTO
8348: IFFALSE 8432
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_VAR 0 7
8359: PUSH
8360: LD_VAR 0 5
8364: PUSH
8365: LD_INT 1
8367: MINUS
8368: ARRAY
8369: PPUSH
8370: LD_VAR 0 2
8374: PUSH
8375: LD_VAR 0 5
8379: PUSH
8380: LD_INT 1
8382: MINUS
8383: ARRAY
8384: PPUSH
8385: LD_VAR 0 7
8389: PUSH
8390: LD_VAR 0 5
8394: ARRAY
8395: PPUSH
8396: CALL_OW 1
8400: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8401: LD_ADDR_VAR 0 7
8405: PUSH
8406: LD_VAR 0 7
8410: PPUSH
8411: LD_VAR 0 5
8415: PUSH
8416: LD_INT 1
8418: MINUS
8419: PPUSH
8420: LD_VAR 0 6
8424: PPUSH
8425: CALL_OW 1
8429: ST_TO_ADDR
// end ;
8430: GO 8347
8432: POP
8433: POP
// result := s_arr [ 1 ] ;
8434: LD_ADDR_VAR 0 4
8438: PUSH
8439: LD_VAR 0 7
8443: PUSH
8444: LD_INT 1
8446: ARRAY
8447: ST_TO_ADDR
// end ; end ;
8448: LD_VAR 0 4
8452: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8453: LD_INT 0
8455: PPUSH
8456: PPUSH
// if not list then
8457: LD_VAR 0 1
8461: NOT
8462: IFFALSE 8466
// exit ;
8464: GO 8557
// i := list [ pos1 ] ;
8466: LD_ADDR_VAR 0 5
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: LD_VAR 0 2
8480: ARRAY
8481: ST_TO_ADDR
// if not i then
8482: LD_VAR 0 5
8486: NOT
8487: IFFALSE 8491
// exit ;
8489: GO 8557
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8491: LD_ADDR_VAR 0 1
8495: PUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: LD_VAR 0 2
8505: PPUSH
8506: LD_VAR 0 1
8510: PUSH
8511: LD_VAR 0 3
8515: ARRAY
8516: PPUSH
8517: CALL_OW 1
8521: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8522: LD_ADDR_VAR 0 1
8526: PUSH
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_VAR 0 3
8536: PPUSH
8537: LD_VAR 0 5
8541: PPUSH
8542: CALL_OW 1
8546: ST_TO_ADDR
// result := list ;
8547: LD_ADDR_VAR 0 4
8551: PUSH
8552: LD_VAR 0 1
8556: ST_TO_ADDR
// end ;
8557: LD_VAR 0 4
8561: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8562: LD_INT 0
8564: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8565: LD_ADDR_VAR 0 5
8569: PUSH
8570: LD_VAR 0 1
8574: PPUSH
8575: CALL_OW 250
8579: PPUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 251
8589: PPUSH
8590: LD_VAR 0 2
8594: PPUSH
8595: LD_VAR 0 3
8599: PPUSH
8600: LD_VAR 0 4
8604: PPUSH
8605: CALL 8987 0 5
8609: ST_TO_ADDR
// end ;
8610: LD_VAR 0 5
8614: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8615: LD_INT 0
8617: PPUSH
8618: PPUSH
8619: PPUSH
8620: PPUSH
// if not list or not unit then
8621: LD_VAR 0 2
8625: NOT
8626: IFTRUE 8635
8628: PUSH
8629: LD_VAR 0 1
8633: NOT
8634: OR
8635: IFFALSE 8639
// exit ;
8637: GO 8982
// result := [ ] ;
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: EMPTY
8645: ST_TO_ADDR
// for i in list do
8646: LD_ADDR_VAR 0 6
8650: PUSH
8651: LD_VAR 0 2
8655: PUSH
8656: FOR_IN
8657: IFFALSE 8875
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8659: LD_ADDR_VAR 0 8
8663: PUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: LD_VAR 0 6
8673: PUSH
8674: LD_INT 1
8676: ARRAY
8677: PPUSH
8678: LD_VAR 0 6
8682: PUSH
8683: LD_INT 2
8685: ARRAY
8686: PPUSH
8687: CALL_OW 297
8691: ST_TO_ADDR
// if not Count ( result ) then
8692: LD_VAR 0 5
8696: PPUSH
8697: CALL 5209 0 1
8701: NOT
8702: IFFALSE 8735
// begin result := Join ( result , [ i , tmp ] ) ;
8704: LD_ADDR_VAR 0 5
8708: PUSH
8709: LD_VAR 0 5
8713: PPUSH
8714: LD_VAR 0 6
8718: PUSH
8719: LD_VAR 0 8
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: PPUSH
8728: CALL 41175 0 2
8732: ST_TO_ADDR
// continue ;
8733: GO 8656
// end ; if result [ result ] [ 2 ] <= tmp then
8735: LD_VAR 0 5
8739: PUSH
8740: LD_VAR 0 5
8744: ARRAY
8745: PUSH
8746: LD_INT 2
8748: ARRAY
8749: PUSH
8750: LD_VAR 0 8
8754: LESSEQUAL
8755: IFFALSE 8788
// result := Join ( result , [ i , tmp ] ) else
8757: LD_ADDR_VAR 0 5
8761: PUSH
8762: LD_VAR 0 5
8766: PPUSH
8767: LD_VAR 0 6
8771: PUSH
8772: LD_VAR 0 8
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL 41175 0 2
8785: ST_TO_ADDR
8786: GO 8873
// begin for j := 1 to Count ( result ) do
8788: LD_ADDR_VAR 0 7
8792: PUSH
8793: DOUBLE
8794: LD_INT 1
8796: DEC
8797: ST_TO_ADDR
8798: LD_VAR 0 5
8802: PPUSH
8803: CALL 5209 0 1
8807: PUSH
8808: FOR_TO
8809: IFFALSE 8871
// begin if tmp < result [ j ] [ 2 ] then
8811: LD_VAR 0 8
8815: PUSH
8816: LD_VAR 0 5
8820: PUSH
8821: LD_VAR 0 7
8825: ARRAY
8826: PUSH
8827: LD_INT 2
8829: ARRAY
8830: LESS
8831: IFFALSE 8869
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 5
8842: PPUSH
8843: LD_VAR 0 7
8847: PPUSH
8848: LD_VAR 0 6
8852: PUSH
8853: LD_VAR 0 8
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 2
8866: ST_TO_ADDR
// break ;
8867: GO 8871
// end ; end ;
8869: GO 8808
8871: POP
8872: POP
// end ; end ;
8873: GO 8656
8875: POP
8876: POP
// if result and not asc then
8877: LD_VAR 0 5
8881: IFFALSE 8890
8883: PUSH
8884: LD_VAR 0 3
8888: NOT
8889: AND
8890: IFFALSE 8907
// result := ReverseArray ( result ) ;
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_VAR 0 5
8901: PPUSH
8902: CALL 36265 0 1
8906: ST_TO_ADDR
// tmp := [ ] ;
8907: LD_ADDR_VAR 0 8
8911: PUSH
8912: EMPTY
8913: ST_TO_ADDR
// if mode then
8914: LD_VAR 0 4
8918: IFFALSE 8982
// begin for i := 1 to result do
8920: LD_ADDR_VAR 0 6
8924: PUSH
8925: DOUBLE
8926: LD_INT 1
8928: DEC
8929: ST_TO_ADDR
8930: LD_VAR 0 5
8934: PUSH
8935: FOR_TO
8936: IFFALSE 8970
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_VAR 0 8
8947: PPUSH
8948: LD_VAR 0 5
8952: PUSH
8953: LD_VAR 0 6
8957: ARRAY
8958: PUSH
8959: LD_INT 1
8961: ARRAY
8962: PPUSH
8963: CALL 41175 0 2
8967: ST_TO_ADDR
8968: GO 8935
8970: POP
8971: POP
// result := tmp ;
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: LD_VAR 0 8
8981: ST_TO_ADDR
// end ; end ;
8982: LD_VAR 0 5
8986: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8987: LD_INT 0
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
// if not list then
8993: LD_VAR 0 3
8997: NOT
8998: IFFALSE 9002
// exit ;
9000: GO 9392
// result := [ ] ;
9002: LD_ADDR_VAR 0 6
9006: PUSH
9007: EMPTY
9008: ST_TO_ADDR
// for i in list do
9009: LD_ADDR_VAR 0 7
9013: PUSH
9014: LD_VAR 0 3
9018: PUSH
9019: FOR_IN
9020: IFFALSE 9222
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9022: LD_ADDR_VAR 0 9
9026: PUSH
9027: LD_VAR 0 7
9031: PPUSH
9032: LD_VAR 0 1
9036: PPUSH
9037: LD_VAR 0 2
9041: PPUSH
9042: CALL_OW 297
9046: ST_TO_ADDR
// if not result then
9047: LD_VAR 0 6
9051: NOT
9052: IFFALSE 9078
// result := [ [ i , tmp ] ] else
9054: LD_ADDR_VAR 0 6
9058: PUSH
9059: LD_VAR 0 7
9063: PUSH
9064: LD_VAR 0 9
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: ST_TO_ADDR
9076: GO 9220
// begin if result [ result ] [ 2 ] <= tmp then
9078: LD_VAR 0 6
9082: PUSH
9083: LD_VAR 0 6
9087: ARRAY
9088: PUSH
9089: LD_INT 2
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 9
9097: LESSEQUAL
9098: IFFALSE 9140
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9100: LD_ADDR_VAR 0 6
9104: PUSH
9105: LD_VAR 0 6
9109: PPUSH
9110: LD_VAR 0 6
9114: PUSH
9115: LD_INT 1
9117: PLUS
9118: PPUSH
9119: LD_VAR 0 7
9123: PUSH
9124: LD_VAR 0 9
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 2
9137: ST_TO_ADDR
9138: GO 9220
// for j := 1 to result do
9140: LD_ADDR_VAR 0 8
9144: PUSH
9145: DOUBLE
9146: LD_INT 1
9148: DEC
9149: ST_TO_ADDR
9150: LD_VAR 0 6
9154: PUSH
9155: FOR_TO
9156: IFFALSE 9218
// begin if tmp < result [ j ] [ 2 ] then
9158: LD_VAR 0 9
9162: PUSH
9163: LD_VAR 0 6
9167: PUSH
9168: LD_VAR 0 8
9172: ARRAY
9173: PUSH
9174: LD_INT 2
9176: ARRAY
9177: LESS
9178: IFFALSE 9216
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_VAR 0 6
9189: PPUSH
9190: LD_VAR 0 8
9194: PPUSH
9195: LD_VAR 0 7
9199: PUSH
9200: LD_VAR 0 9
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PPUSH
9209: CALL_OW 2
9213: ST_TO_ADDR
// break ;
9214: GO 9218
// end ; end ;
9216: GO 9155
9218: POP
9219: POP
// end ; end ;
9220: GO 9019
9222: POP
9223: POP
// if result and not asc then
9224: LD_VAR 0 6
9228: IFFALSE 9237
9230: PUSH
9231: LD_VAR 0 4
9235: NOT
9236: AND
9237: IFFALSE 9312
// begin tmp := result ;
9239: LD_ADDR_VAR 0 9
9243: PUSH
9244: LD_VAR 0 6
9248: ST_TO_ADDR
// for i = tmp downto 1 do
9249: LD_ADDR_VAR 0 7
9253: PUSH
9254: DOUBLE
9255: LD_VAR 0 9
9259: INC
9260: ST_TO_ADDR
9261: LD_INT 1
9263: PUSH
9264: FOR_DOWNTO
9265: IFFALSE 9310
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9267: LD_ADDR_VAR 0 6
9271: PUSH
9272: LD_VAR 0 6
9276: PPUSH
9277: LD_VAR 0 9
9281: PUSH
9282: LD_VAR 0 7
9286: MINUS
9287: PUSH
9288: LD_INT 1
9290: PLUS
9291: PPUSH
9292: LD_VAR 0 9
9296: PUSH
9297: LD_VAR 0 7
9301: ARRAY
9302: PPUSH
9303: CALL_OW 1
9307: ST_TO_ADDR
9308: GO 9264
9310: POP
9311: POP
// end ; tmp := [ ] ;
9312: LD_ADDR_VAR 0 9
9316: PUSH
9317: EMPTY
9318: ST_TO_ADDR
// if mode then
9319: LD_VAR 0 5
9323: IFFALSE 9392
// begin for i = 1 to result do
9325: LD_ADDR_VAR 0 7
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_VAR 0 6
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9380
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9343: LD_ADDR_VAR 0 9
9347: PUSH
9348: LD_VAR 0 9
9352: PPUSH
9353: LD_VAR 0 7
9357: PPUSH
9358: LD_VAR 0 6
9362: PUSH
9363: LD_VAR 0 7
9367: ARRAY
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: CALL_OW 1
9377: ST_TO_ADDR
9378: GO 9340
9380: POP
9381: POP
// result := tmp ;
9382: LD_ADDR_VAR 0 6
9386: PUSH
9387: LD_VAR 0 9
9391: ST_TO_ADDR
// end ; end ;
9392: LD_VAR 0 6
9396: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9397: LD_INT 0
9399: PPUSH
9400: PPUSH
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9405: LD_ADDR_VAR 0 5
9409: PUSH
9410: LD_INT 0
9412: PUSH
9413: LD_INT 0
9415: PUSH
9416: LD_INT 0
9418: PUSH
9419: EMPTY
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: ST_TO_ADDR
// if not x or not y then
9427: LD_VAR 0 2
9431: NOT
9432: IFTRUE 9441
9434: PUSH
9435: LD_VAR 0 3
9439: NOT
9440: OR
9441: IFFALSE 9445
// exit ;
9443: GO 11101
// if not range then
9445: LD_VAR 0 4
9449: NOT
9450: IFFALSE 9460
// range := 10 ;
9452: LD_ADDR_VAR 0 4
9456: PUSH
9457: LD_INT 10
9459: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9460: LD_ADDR_VAR 0 8
9464: PUSH
9465: LD_INT 81
9467: PUSH
9468: LD_VAR 0 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 92
9479: PUSH
9480: LD_VAR 0 2
9484: PUSH
9485: LD_VAR 0 3
9489: PUSH
9490: LD_VAR 0 4
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: LD_INT 21
9506: PUSH
9507: LD_INT 3
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 69
9527: ST_TO_ADDR
// if not tmp then
9528: LD_VAR 0 8
9532: NOT
9533: IFFALSE 9537
// exit ;
9535: GO 11101
// for i in tmp do
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_VAR 0 8
9546: PUSH
9547: FOR_IN
9548: IFFALSE 11076
// begin points := [ 0 , 0 , 0 ] ;
9550: LD_ADDR_VAR 0 9
9554: PUSH
9555: LD_INT 0
9557: PUSH
9558: LD_INT 0
9560: PUSH
9561: LD_INT 0
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
// bpoints := 1 ;
9569: LD_ADDR_VAR 0 10
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 247
9586: PUSH
9587: LD_INT 1
9589: DOUBLE
9590: EQUAL
9591: IFTRUE 9595
9593: GO 10177
9595: POP
// begin if GetClass ( i ) = 1 then
9596: LD_VAR 0 6
9600: PPUSH
9601: CALL_OW 257
9605: PUSH
9606: LD_INT 1
9608: EQUAL
9609: IFFALSE 9630
// points := [ 10 , 5 , 3 ] ;
9611: LD_ADDR_VAR 0 9
9615: PUSH
9616: LD_INT 10
9618: PUSH
9619: LD_INT 5
9621: PUSH
9622: LD_INT 3
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9630: LD_VAR 0 6
9634: PPUSH
9635: CALL_OW 257
9639: PUSH
9640: LD_INT 2
9642: PUSH
9643: LD_INT 3
9645: PUSH
9646: LD_INT 4
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: IN
9654: IFFALSE 9675
// points := [ 3 , 2 , 1 ] ;
9656: LD_ADDR_VAR 0 9
9660: PUSH
9661: LD_INT 3
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 1
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: LIST
9674: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9675: LD_VAR 0 6
9679: PPUSH
9680: CALL_OW 257
9684: PUSH
9685: LD_INT 5
9687: EQUAL
9688: IFFALSE 9709
// points := [ 130 , 5 , 2 ] ;
9690: LD_ADDR_VAR 0 9
9694: PUSH
9695: LD_INT 130
9697: PUSH
9698: LD_INT 5
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9709: LD_VAR 0 6
9713: PPUSH
9714: CALL_OW 257
9718: PUSH
9719: LD_INT 8
9721: EQUAL
9722: IFFALSE 9743
// points := [ 35 , 35 , 30 ] ;
9724: LD_ADDR_VAR 0 9
9728: PUSH
9729: LD_INT 35
9731: PUSH
9732: LD_INT 35
9734: PUSH
9735: LD_INT 30
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9743: LD_VAR 0 6
9747: PPUSH
9748: CALL_OW 257
9752: PUSH
9753: LD_INT 9
9755: EQUAL
9756: IFFALSE 9777
// points := [ 20 , 55 , 40 ] ;
9758: LD_ADDR_VAR 0 9
9762: PUSH
9763: LD_INT 20
9765: PUSH
9766: LD_INT 55
9768: PUSH
9769: LD_INT 40
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9777: LD_VAR 0 6
9781: PPUSH
9782: CALL_OW 257
9786: PUSH
9787: LD_INT 12
9789: PUSH
9790: LD_INT 16
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: IN
9797: IFFALSE 9818
// points := [ 5 , 3 , 2 ] ;
9799: LD_ADDR_VAR 0 9
9803: PUSH
9804: LD_INT 5
9806: PUSH
9807: LD_INT 3
9809: PUSH
9810: LD_INT 2
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9818: LD_VAR 0 6
9822: PPUSH
9823: CALL_OW 257
9827: PUSH
9828: LD_INT 17
9830: EQUAL
9831: IFFALSE 9852
// points := [ 100 , 50 , 75 ] ;
9833: LD_ADDR_VAR 0 9
9837: PUSH
9838: LD_INT 100
9840: PUSH
9841: LD_INT 50
9843: PUSH
9844: LD_INT 75
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9852: LD_VAR 0 6
9856: PPUSH
9857: CALL_OW 257
9861: PUSH
9862: LD_INT 15
9864: EQUAL
9865: IFFALSE 9886
// points := [ 10 , 5 , 3 ] ;
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_INT 10
9874: PUSH
9875: LD_INT 5
9877: PUSH
9878: LD_INT 3
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: LIST
9885: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9886: LD_VAR 0 6
9890: PPUSH
9891: CALL_OW 257
9895: PUSH
9896: LD_INT 14
9898: EQUAL
9899: IFFALSE 9920
// points := [ 10 , 0 , 0 ] ;
9901: LD_ADDR_VAR 0 9
9905: PUSH
9906: LD_INT 10
9908: PUSH
9909: LD_INT 0
9911: PUSH
9912: LD_INT 0
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9920: LD_VAR 0 6
9924: PPUSH
9925: CALL_OW 257
9929: PUSH
9930: LD_INT 11
9932: EQUAL
9933: IFFALSE 9954
// points := [ 30 , 10 , 5 ] ;
9935: LD_ADDR_VAR 0 9
9939: PUSH
9940: LD_INT 30
9942: PUSH
9943: LD_INT 10
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9954: LD_VAR 0 1
9958: PPUSH
9959: LD_INT 5
9961: PPUSH
9962: CALL_OW 321
9966: PUSH
9967: LD_INT 2
9969: EQUAL
9970: IFFALSE 9987
// bpoints := bpoints * 1.8 ;
9972: LD_ADDR_VAR 0 10
9976: PUSH
9977: LD_VAR 0 10
9981: PUSH
9982: LD_REAL  1.80000000000000E+0000
9985: MUL
9986: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9987: LD_VAR 0 6
9991: PPUSH
9992: CALL_OW 257
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: LD_INT 3
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: IN
10015: IFFALSE 10035
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: LD_INT 51
10025: PPUSH
10026: CALL_OW 321
10030: PUSH
10031: LD_INT 2
10033: EQUAL
10034: AND
10035: IFFALSE 10052
// bpoints := bpoints * 1.2 ;
10037: LD_ADDR_VAR 0 10
10041: PUSH
10042: LD_VAR 0 10
10046: PUSH
10047: LD_REAL  1.20000000000000E+0000
10050: MUL
10051: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10052: LD_VAR 0 6
10056: PPUSH
10057: CALL_OW 257
10061: PUSH
10062: LD_INT 5
10064: PUSH
10065: LD_INT 7
10067: PUSH
10068: LD_INT 9
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: LIST
10075: IN
10076: IFFALSE 10096
10078: PUSH
10079: LD_VAR 0 1
10083: PPUSH
10084: LD_INT 52
10086: PPUSH
10087: CALL_OW 321
10091: PUSH
10092: LD_INT 2
10094: EQUAL
10095: AND
10096: IFFALSE 10113
// bpoints := bpoints * 1.5 ;
10098: LD_ADDR_VAR 0 10
10102: PUSH
10103: LD_VAR 0 10
10107: PUSH
10108: LD_REAL  1.50000000000000E+0000
10111: MUL
10112: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10113: LD_VAR 0 1
10117: PPUSH
10118: LD_INT 66
10120: PPUSH
10121: CALL_OW 321
10125: PUSH
10126: LD_INT 2
10128: EQUAL
10129: IFFALSE 10146
// bpoints := bpoints * 1.1 ;
10131: LD_ADDR_VAR 0 10
10135: PUSH
10136: LD_VAR 0 10
10140: PUSH
10141: LD_REAL  1.10000000000000E+0000
10144: MUL
10145: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10146: LD_ADDR_VAR 0 10
10150: PUSH
10151: LD_VAR 0 10
10155: PUSH
10156: LD_VAR 0 6
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 259
10168: PUSH
10169: LD_REAL  1.15000000000000E+0000
10172: MUL
10173: MUL
10174: ST_TO_ADDR
// end ; unit_vehicle :
10175: GO 11005
10177: LD_INT 2
10179: DOUBLE
10180: EQUAL
10181: IFTRUE 10185
10183: GO 10993
10185: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 264
10195: PUSH
10196: LD_INT 2
10198: PUSH
10199: LD_INT 42
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: IN
10210: IFFALSE 10231
// points := [ 25 , 5 , 3 ] ;
10212: LD_ADDR_VAR 0 9
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: LD_INT 3
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10231: LD_VAR 0 6
10235: PPUSH
10236: CALL_OW 264
10240: PUSH
10241: LD_INT 4
10243: PUSH
10244: LD_INT 43
10246: PUSH
10247: LD_INT 25
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: IN
10255: IFFALSE 10276
// points := [ 40 , 15 , 5 ] ;
10257: LD_ADDR_VAR 0 9
10261: PUSH
10262: LD_INT 40
10264: PUSH
10265: LD_INT 15
10267: PUSH
10268: LD_INT 5
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10276: LD_VAR 0 6
10280: PPUSH
10281: CALL_OW 264
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: LD_INT 23
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: IFFALSE 10317
// points := [ 7 , 25 , 8 ] ;
10298: LD_ADDR_VAR 0 9
10302: PUSH
10303: LD_INT 7
10305: PUSH
10306: LD_INT 25
10308: PUSH
10309: LD_INT 8
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10317: LD_VAR 0 6
10321: PPUSH
10322: CALL_OW 264
10326: PUSH
10327: LD_INT 5
10329: PUSH
10330: LD_INT 27
10332: PUSH
10333: LD_INT 44
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: IN
10341: IFFALSE 10362
// points := [ 14 , 50 , 16 ] ;
10343: LD_ADDR_VAR 0 9
10347: PUSH
10348: LD_INT 14
10350: PUSH
10351: LD_INT 50
10353: PUSH
10354: LD_INT 16
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10362: LD_VAR 0 6
10366: PPUSH
10367: CALL_OW 264
10371: PUSH
10372: LD_INT 6
10374: PUSH
10375: LD_INT 46
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: IN
10382: IFFALSE 10403
// points := [ 32 , 120 , 70 ] ;
10384: LD_ADDR_VAR 0 9
10388: PUSH
10389: LD_INT 32
10391: PUSH
10392: LD_INT 120
10394: PUSH
10395: LD_INT 70
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10403: LD_VAR 0 6
10407: PPUSH
10408: CALL_OW 264
10412: PUSH
10413: LD_INT 7
10415: PUSH
10416: LD_INT 28
10418: PUSH
10419: LD_INT 45
10421: PUSH
10422: LD_INT 92
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: IN
10431: IFFALSE 10452
// points := [ 35 , 20 , 45 ] ;
10433: LD_ADDR_VAR 0 9
10437: PUSH
10438: LD_INT 35
10440: PUSH
10441: LD_INT 20
10443: PUSH
10444: LD_INT 45
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10452: LD_VAR 0 6
10456: PPUSH
10457: CALL_OW 264
10461: PUSH
10462: LD_INT 47
10464: PUSH
10465: EMPTY
10466: LIST
10467: IN
10468: IFFALSE 10489
// points := [ 67 , 45 , 75 ] ;
10470: LD_ADDR_VAR 0 9
10474: PUSH
10475: LD_INT 67
10477: PUSH
10478: LD_INT 45
10480: PUSH
10481: LD_INT 75
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: LIST
10488: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10489: LD_VAR 0 6
10493: PPUSH
10494: CALL_OW 264
10498: PUSH
10499: LD_INT 26
10501: PUSH
10502: EMPTY
10503: LIST
10504: IN
10505: IFFALSE 10526
// points := [ 120 , 30 , 80 ] ;
10507: LD_ADDR_VAR 0 9
10511: PUSH
10512: LD_INT 120
10514: PUSH
10515: LD_INT 30
10517: PUSH
10518: LD_INT 80
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10526: LD_VAR 0 6
10530: PPUSH
10531: CALL_OW 264
10535: PUSH
10536: LD_INT 22
10538: PUSH
10539: EMPTY
10540: LIST
10541: IN
10542: IFFALSE 10563
// points := [ 40 , 1 , 1 ] ;
10544: LD_ADDR_VAR 0 9
10548: PUSH
10549: LD_INT 40
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10563: LD_VAR 0 6
10567: PPUSH
10568: CALL_OW 264
10572: PUSH
10573: LD_INT 29
10575: PUSH
10576: EMPTY
10577: LIST
10578: IN
10579: IFFALSE 10600
// points := [ 70 , 200 , 400 ] ;
10581: LD_ADDR_VAR 0 9
10585: PUSH
10586: LD_INT 70
10588: PUSH
10589: LD_INT 200
10591: PUSH
10592: LD_INT 400
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10600: LD_VAR 0 6
10604: PPUSH
10605: CALL_OW 264
10609: PUSH
10610: LD_INT 14
10612: PUSH
10613: LD_INT 53
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: IN
10620: IFFALSE 10641
// points := [ 40 , 10 , 20 ] ;
10622: LD_ADDR_VAR 0 9
10626: PUSH
10627: LD_INT 40
10629: PUSH
10630: LD_INT 10
10632: PUSH
10633: LD_INT 20
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: LIST
10640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10641: LD_VAR 0 6
10645: PPUSH
10646: CALL_OW 264
10650: PUSH
10651: LD_INT 9
10653: PUSH
10654: EMPTY
10655: LIST
10656: IN
10657: IFFALSE 10678
// points := [ 5 , 70 , 20 ] ;
10659: LD_ADDR_VAR 0 9
10663: PUSH
10664: LD_INT 5
10666: PUSH
10667: LD_INT 70
10669: PUSH
10670: LD_INT 20
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10678: LD_VAR 0 6
10682: PPUSH
10683: CALL_OW 264
10687: PUSH
10688: LD_INT 10
10690: PUSH
10691: EMPTY
10692: LIST
10693: IN
10694: IFFALSE 10715
// points := [ 35 , 110 , 70 ] ;
10696: LD_ADDR_VAR 0 9
10700: PUSH
10701: LD_INT 35
10703: PUSH
10704: LD_INT 110
10706: PUSH
10707: LD_INT 70
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10715: LD_VAR 0 6
10719: PPUSH
10720: CALL_OW 265
10724: PUSH
10725: LD_INT 25
10727: EQUAL
10728: IFFALSE 10749
// points := [ 80 , 65 , 100 ] ;
10730: LD_ADDR_VAR 0 9
10734: PUSH
10735: LD_INT 80
10737: PUSH
10738: LD_INT 65
10740: PUSH
10741: LD_INT 100
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10749: LD_VAR 0 6
10753: PPUSH
10754: CALL_OW 263
10758: PUSH
10759: LD_INT 1
10761: EQUAL
10762: IFFALSE 10797
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10764: LD_ADDR_VAR 0 10
10768: PUSH
10769: LD_VAR 0 10
10773: PUSH
10774: LD_VAR 0 6
10778: PPUSH
10779: CALL_OW 311
10783: PPUSH
10784: LD_INT 3
10786: PPUSH
10787: CALL_OW 259
10791: PUSH
10792: LD_INT 4
10794: MUL
10795: MUL
10796: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10797: LD_VAR 0 6
10801: PPUSH
10802: CALL_OW 263
10806: PUSH
10807: LD_INT 2
10809: EQUAL
10810: IFFALSE 10861
// begin j := IsControledBy ( i ) ;
10812: LD_ADDR_VAR 0 7
10816: PUSH
10817: LD_VAR 0 6
10821: PPUSH
10822: CALL_OW 312
10826: ST_TO_ADDR
// if j then
10827: LD_VAR 0 7
10831: IFFALSE 10861
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10833: LD_ADDR_VAR 0 10
10837: PUSH
10838: LD_VAR 0 10
10842: PUSH
10843: LD_VAR 0 7
10847: PPUSH
10848: LD_INT 3
10850: PPUSH
10851: CALL_OW 259
10855: PUSH
10856: LD_INT 3
10858: MUL
10859: MUL
10860: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10861: LD_VAR 0 6
10865: PPUSH
10866: CALL_OW 264
10870: PUSH
10871: LD_INT 5
10873: PUSH
10874: LD_INT 6
10876: PUSH
10877: LD_INT 46
10879: PUSH
10880: LD_INT 44
10882: PUSH
10883: LD_INT 47
10885: PUSH
10886: LD_INT 45
10888: PUSH
10889: LD_INT 28
10891: PUSH
10892: LD_INT 7
10894: PUSH
10895: LD_INT 27
10897: PUSH
10898: LD_INT 29
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: IN
10913: IFFALSE 10933
10915: PUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: LD_INT 52
10923: PPUSH
10924: CALL_OW 321
10928: PUSH
10929: LD_INT 2
10931: EQUAL
10932: AND
10933: IFFALSE 10950
// bpoints := bpoints * 1.2 ;
10935: LD_ADDR_VAR 0 10
10939: PUSH
10940: LD_VAR 0 10
10944: PUSH
10945: LD_REAL  1.20000000000000E+0000
10948: MUL
10949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10950: LD_VAR 0 6
10954: PPUSH
10955: CALL_OW 264
10959: PUSH
10960: LD_INT 6
10962: PUSH
10963: LD_INT 46
10965: PUSH
10966: LD_INT 47
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: IN
10974: IFFALSE 10991
// bpoints := bpoints * 1.2 ;
10976: LD_ADDR_VAR 0 10
10980: PUSH
10981: LD_VAR 0 10
10985: PUSH
10986: LD_REAL  1.20000000000000E+0000
10989: MUL
10990: ST_TO_ADDR
// end ; unit_building :
10991: GO 11005
10993: LD_INT 3
10995: DOUBLE
10996: EQUAL
10997: IFTRUE 11001
10999: GO 11004
11001: POP
// ; end ;
11002: GO 11005
11004: POP
// for j = 1 to 3 do
11005: LD_ADDR_VAR 0 7
11009: PUSH
11010: DOUBLE
11011: LD_INT 1
11013: DEC
11014: ST_TO_ADDR
11015: LD_INT 3
11017: PUSH
11018: FOR_TO
11019: IFFALSE 11072
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: LD_VAR 0 5
11030: PPUSH
11031: LD_VAR 0 7
11035: PPUSH
11036: LD_VAR 0 5
11040: PUSH
11041: LD_VAR 0 7
11045: ARRAY
11046: PUSH
11047: LD_VAR 0 9
11051: PUSH
11052: LD_VAR 0 7
11056: ARRAY
11057: PUSH
11058: LD_VAR 0 10
11062: MUL
11063: PLUS
11064: PPUSH
11065: CALL_OW 1
11069: ST_TO_ADDR
11070: GO 11018
11072: POP
11073: POP
// end ;
11074: GO 9547
11076: POP
11077: POP
// result := Replace ( result , 4 , tmp ) ;
11078: LD_ADDR_VAR 0 5
11082: PUSH
11083: LD_VAR 0 5
11087: PPUSH
11088: LD_INT 4
11090: PPUSH
11091: LD_VAR 0 8
11095: PPUSH
11096: CALL_OW 1
11100: ST_TO_ADDR
// end ;
11101: LD_VAR 0 5
11105: RET
// export function DangerAtRange ( unit , range ) ; begin
11106: LD_INT 0
11108: PPUSH
// if not unit then
11109: LD_VAR 0 1
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11163
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11118: LD_ADDR_VAR 0 3
11122: PUSH
11123: LD_VAR 0 1
11127: PPUSH
11128: CALL_OW 255
11132: PPUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: CALL_OW 250
11142: PPUSH
11143: LD_VAR 0 1
11147: PPUSH
11148: CALL_OW 251
11152: PPUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: CALL 9397 0 4
11162: ST_TO_ADDR
// end ;
11163: LD_VAR 0 3
11167: RET
// export function DangerInArea ( side , area ) ; begin
11168: LD_INT 0
11170: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 81
11183: PUSH
11184: LD_VAR 0 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 70
11197: ST_TO_ADDR
// end ;
11198: LD_VAR 0 3
11202: RET
// export function IsExtension ( b ) ; begin
11203: LD_INT 0
11205: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11206: LD_ADDR_VAR 0 2
11210: PUSH
11211: LD_VAR 0 1
11215: PUSH
11216: LD_INT 23
11218: PUSH
11219: LD_INT 20
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_INT 17
11227: PUSH
11228: LD_INT 24
11230: PUSH
11231: LD_INT 21
11233: PUSH
11234: LD_INT 19
11236: PUSH
11237: LD_INT 16
11239: PUSH
11240: LD_INT 25
11242: PUSH
11243: LD_INT 18
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: IN
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 2
11263: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
// result := [ ] ;
11269: LD_ADDR_VAR 0 4
11273: PUSH
11274: EMPTY
11275: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11276: LD_ADDR_VAR 0 5
11280: PUSH
11281: LD_VAR 0 2
11285: PPUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 3
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PPUSH
11296: CALL_OW 70
11300: ST_TO_ADDR
// if not tmp then
11301: LD_VAR 0 5
11305: NOT
11306: IFFALSE 11310
// exit ;
11308: GO 11374
// if checkLink then
11310: LD_VAR 0 3
11314: IFFALSE 11364
// begin for i in tmp do
11316: LD_ADDR_VAR 0 6
11320: PUSH
11321: LD_VAR 0 5
11325: PUSH
11326: FOR_IN
11327: IFFALSE 11362
// if GetBase ( i ) <> base then
11329: LD_VAR 0 6
11333: PPUSH
11334: CALL_OW 274
11338: PUSH
11339: LD_VAR 0 1
11343: NONEQUAL
11344: IFFALSE 11360
// ComLinkToBase ( base , i ) ;
11346: LD_VAR 0 1
11350: PPUSH
11351: LD_VAR 0 6
11355: PPUSH
11356: CALL_OW 169
11360: GO 11326
11362: POP
11363: POP
// end ; result := tmp ;
11364: LD_ADDR_VAR 0 4
11368: PUSH
11369: LD_VAR 0 5
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 4
11378: RET
// export function ComComplete ( units , b ) ; var i ; begin
11379: LD_INT 0
11381: PPUSH
11382: PPUSH
// if not units then
11383: LD_VAR 0 1
11387: NOT
11388: IFFALSE 11392
// exit ;
11390: GO 11482
// for i in units do
11392: LD_ADDR_VAR 0 4
11396: PUSH
11397: LD_VAR 0 1
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11480
// if BuildingStatus ( b ) = bs_build then
11405: LD_VAR 0 2
11409: PPUSH
11410: CALL_OW 461
11414: PUSH
11415: LD_INT 1
11417: EQUAL
11418: IFFALSE 11478
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11420: LD_VAR 0 4
11424: PPUSH
11425: LD_STRING h
11427: PUSH
11428: LD_VAR 0 2
11432: PPUSH
11433: CALL_OW 250
11437: PUSH
11438: LD_VAR 0 2
11442: PPUSH
11443: CALL_OW 251
11447: PUSH
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 0
11455: PUSH
11456: LD_INT 0
11458: PUSH
11459: LD_INT 0
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: PPUSH
11474: CALL_OW 446
11478: GO 11402
11480: POP
11481: POP
// end ;
11482: LD_VAR 0 3
11486: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11487: LD_INT 0
11489: PPUSH
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11495: LD_VAR 0 1
11499: NOT
11500: IFTRUE 11517
11502: PUSH
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 263
11512: PUSH
11513: LD_INT 2
11515: NONEQUAL
11516: OR
11517: IFFALSE 11521
// exit ;
11519: GO 11837
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11521: LD_ADDR_VAR 0 6
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_VAR 0 1
11533: PPUSH
11534: CALL_OW 255
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 30
11548: PUSH
11549: LD_INT 36
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 34
11558: PUSH
11559: LD_INT 31
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: ST_TO_ADDR
// if not tmp then
11580: LD_VAR 0 6
11584: NOT
11585: IFFALSE 11589
// exit ;
11587: GO 11837
// result := [ ] ;
11589: LD_ADDR_VAR 0 2
11593: PUSH
11594: EMPTY
11595: ST_TO_ADDR
// for i in tmp do
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: LD_VAR 0 6
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11678
// begin t := UnitsInside ( i ) ;
11609: LD_ADDR_VAR 0 4
11613: PUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: CALL_OW 313
11623: ST_TO_ADDR
// if t then
11624: LD_VAR 0 4
11628: IFFALSE 11676
// for j in t do
11630: LD_ADDR_VAR 0 7
11634: PUSH
11635: LD_VAR 0 4
11639: PUSH
11640: FOR_IN
11641: IFFALSE 11674
// result := Replace ( result , result + 1 , j ) ;
11643: LD_ADDR_VAR 0 2
11647: PUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: LD_VAR 0 2
11657: PUSH
11658: LD_INT 1
11660: PLUS
11661: PPUSH
11662: LD_VAR 0 7
11666: PPUSH
11667: CALL_OW 1
11671: ST_TO_ADDR
11672: GO 11640
11674: POP
11675: POP
// end ;
11676: GO 11606
11678: POP
11679: POP
// if not result then
11680: LD_VAR 0 2
11684: NOT
11685: IFFALSE 11689
// exit ;
11687: GO 11837
// mech := result [ 1 ] ;
11689: LD_ADDR_VAR 0 5
11693: PUSH
11694: LD_VAR 0 2
11698: PUSH
11699: LD_INT 1
11701: ARRAY
11702: ST_TO_ADDR
// if result > 1 then
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 1
11710: GREATER
11711: IFFALSE 11823
// begin for i = 2 to result do
11713: LD_ADDR_VAR 0 3
11717: PUSH
11718: DOUBLE
11719: LD_INT 2
11721: DEC
11722: ST_TO_ADDR
11723: LD_VAR 0 2
11727: PUSH
11728: FOR_TO
11729: IFFALSE 11821
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11731: LD_ADDR_VAR 0 4
11735: PUSH
11736: LD_VAR 0 2
11740: PUSH
11741: LD_VAR 0 3
11745: ARRAY
11746: PPUSH
11747: LD_INT 3
11749: PPUSH
11750: CALL_OW 259
11754: PUSH
11755: LD_VAR 0 2
11759: PUSH
11760: LD_VAR 0 3
11764: ARRAY
11765: PPUSH
11766: CALL_OW 432
11770: MINUS
11771: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11772: LD_VAR 0 4
11776: PUSH
11777: LD_VAR 0 5
11781: PPUSH
11782: LD_INT 3
11784: PPUSH
11785: CALL_OW 259
11789: PUSH
11790: LD_VAR 0 5
11794: PPUSH
11795: CALL_OW 432
11799: MINUS
11800: GREATEREQUAL
11801: IFFALSE 11819
// mech := result [ i ] ;
11803: LD_ADDR_VAR 0 5
11807: PUSH
11808: LD_VAR 0 2
11812: PUSH
11813: LD_VAR 0 3
11817: ARRAY
11818: ST_TO_ADDR
// end ;
11819: GO 11728
11821: POP
11822: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11823: LD_VAR 0 1
11827: PPUSH
11828: LD_VAR 0 5
11832: PPUSH
11833: CALL_OW 135
// end ;
11837: LD_VAR 0 2
11841: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11842: LD_INT 0
11844: PPUSH
11845: PPUSH
11846: PPUSH
11847: PPUSH
11848: PPUSH
11849: PPUSH
11850: PPUSH
11851: PPUSH
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
// result := [ ] ;
11857: LD_ADDR_VAR 0 7
11861: PUSH
11862: EMPTY
11863: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11864: LD_VAR 0 1
11868: PPUSH
11869: CALL_OW 266
11873: PUSH
11874: LD_INT 0
11876: PUSH
11877: LD_INT 1
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: IN
11884: NOT
11885: IFFALSE 11889
// exit ;
11887: GO 13529
// if name then
11889: LD_VAR 0 3
11893: IFFALSE 11909
// SetBName ( base_dep , name ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL_OW 500
// base := GetBase ( base_dep ) ;
11909: LD_ADDR_VAR 0 15
11913: PUSH
11914: LD_VAR 0 1
11918: PPUSH
11919: CALL_OW 274
11923: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11924: LD_ADDR_VAR 0 16
11928: PUSH
11929: LD_VAR 0 1
11933: PPUSH
11934: CALL_OW 255
11938: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11939: LD_ADDR_VAR 0 17
11943: PUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: CALL_OW 248
11953: ST_TO_ADDR
// if sources then
11954: LD_VAR 0 5
11958: IFFALSE 12005
// for i = 1 to 3 do
11960: LD_ADDR_VAR 0 8
11964: PUSH
11965: DOUBLE
11966: LD_INT 1
11968: DEC
11969: ST_TO_ADDR
11970: LD_INT 3
11972: PUSH
11973: FOR_TO
11974: IFFALSE 12003
// AddResourceType ( base , i , sources [ i ] ) ;
11976: LD_VAR 0 15
11980: PPUSH
11981: LD_VAR 0 8
11985: PPUSH
11986: LD_VAR 0 5
11990: PUSH
11991: LD_VAR 0 8
11995: ARRAY
11996: PPUSH
11997: CALL_OW 276
12001: GO 11973
12003: POP
12004: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12005: LD_ADDR_VAR 0 18
12009: PUSH
12010: LD_VAR 0 15
12014: PPUSH
12015: LD_VAR 0 2
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL 11264 0 3
12027: ST_TO_ADDR
// InitHc ;
12028: CALL_OW 19
// InitUc ;
12032: CALL_OW 18
// uc_side := side ;
12036: LD_ADDR_OWVAR 20
12040: PUSH
12041: LD_VAR 0 16
12045: ST_TO_ADDR
// uc_nation := nation ;
12046: LD_ADDR_OWVAR 21
12050: PUSH
12051: LD_VAR 0 17
12055: ST_TO_ADDR
// if buildings then
12056: LD_VAR 0 18
12060: IFFALSE 13388
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12062: LD_ADDR_VAR 0 19
12066: PUSH
12067: LD_VAR 0 18
12071: PPUSH
12072: LD_INT 2
12074: PUSH
12075: LD_INT 30
12077: PUSH
12078: LD_INT 29
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 30
12087: PUSH
12088: LD_INT 30
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 72
12104: ST_TO_ADDR
// if tmp then
12105: LD_VAR 0 19
12109: IFFALSE 12157
// for i in tmp do
12111: LD_ADDR_VAR 0 8
12115: PUSH
12116: LD_VAR 0 19
12120: PUSH
12121: FOR_IN
12122: IFFALSE 12155
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12124: LD_VAR 0 8
12128: PPUSH
12129: CALL_OW 250
12133: PPUSH
12134: LD_VAR 0 8
12138: PPUSH
12139: CALL_OW 251
12143: PPUSH
12144: LD_VAR 0 16
12148: PPUSH
12149: CALL_OW 441
12153: GO 12121
12155: POP
12156: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12157: LD_VAR 0 18
12161: PPUSH
12162: LD_INT 2
12164: PUSH
12165: LD_INT 30
12167: PUSH
12168: LD_INT 32
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 30
12177: PUSH
12178: LD_INT 33
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 72
12194: IFFALSE 12282
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12196: LD_ADDR_VAR 0 8
12200: PUSH
12201: LD_VAR 0 18
12205: PPUSH
12206: LD_INT 2
12208: PUSH
12209: LD_INT 30
12211: PUSH
12212: LD_INT 32
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 30
12221: PUSH
12222: LD_INT 33
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 72
12238: PUSH
12239: FOR_IN
12240: IFFALSE 12280
// begin if not GetBWeapon ( i ) then
12242: LD_VAR 0 8
12246: PPUSH
12247: CALL_OW 269
12251: NOT
12252: IFFALSE 12278
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12254: LD_VAR 0 8
12258: PPUSH
12259: LD_VAR 0 8
12263: PPUSH
12264: LD_VAR 0 2
12268: PPUSH
12269: CALL 13534 0 2
12273: PPUSH
12274: CALL_OW 431
// end ;
12278: GO 12239
12280: POP
12281: POP
// end ; for i = 1 to personel do
12282: LD_ADDR_VAR 0 8
12286: PUSH
12287: DOUBLE
12288: LD_INT 1
12290: DEC
12291: ST_TO_ADDR
12292: LD_VAR 0 6
12296: PUSH
12297: FOR_TO
12298: IFFALSE 13368
// begin if i > 4 then
12300: LD_VAR 0 8
12304: PUSH
12305: LD_INT 4
12307: GREATER
12308: IFFALSE 12312
// break ;
12310: GO 13368
// case i of 1 :
12312: LD_VAR 0 8
12316: PUSH
12317: LD_INT 1
12319: DOUBLE
12320: EQUAL
12321: IFTRUE 12325
12323: GO 12405
12325: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12326: LD_ADDR_VAR 0 12
12330: PUSH
12331: LD_VAR 0 18
12335: PPUSH
12336: LD_INT 22
12338: PUSH
12339: LD_VAR 0 16
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 58
12350: PUSH
12351: EMPTY
12352: LIST
12353: PUSH
12354: LD_INT 2
12356: PUSH
12357: LD_INT 30
12359: PUSH
12360: LD_INT 32
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 30
12369: PUSH
12370: LD_INT 4
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 30
12379: PUSH
12380: LD_INT 5
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 72
12402: ST_TO_ADDR
12403: GO 12627
12405: LD_INT 2
12407: DOUBLE
12408: EQUAL
12409: IFTRUE 12413
12411: GO 12475
12413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12414: LD_ADDR_VAR 0 12
12418: PUSH
12419: LD_VAR 0 18
12423: PPUSH
12424: LD_INT 22
12426: PUSH
12427: LD_VAR 0 16
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 2
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_INT 0
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 30
12451: PUSH
12452: LD_INT 1
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 72
12472: ST_TO_ADDR
12473: GO 12627
12475: LD_INT 3
12477: DOUBLE
12478: EQUAL
12479: IFTRUE 12483
12481: GO 12545
12483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12484: LD_ADDR_VAR 0 12
12488: PUSH
12489: LD_VAR 0 18
12493: PPUSH
12494: LD_INT 22
12496: PUSH
12497: LD_VAR 0 16
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 30
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 30
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 72
12542: ST_TO_ADDR
12543: GO 12627
12545: LD_INT 4
12547: DOUBLE
12548: EQUAL
12549: IFTRUE 12553
12551: GO 12626
12553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12554: LD_ADDR_VAR 0 12
12558: PUSH
12559: LD_VAR 0 18
12563: PPUSH
12564: LD_INT 22
12566: PUSH
12567: LD_VAR 0 16
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 2
12578: PUSH
12579: LD_INT 30
12581: PUSH
12582: LD_INT 6
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 7
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 8
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 72
12623: ST_TO_ADDR
12624: GO 12627
12626: POP
// if i = 1 then
12627: LD_VAR 0 8
12631: PUSH
12632: LD_INT 1
12634: EQUAL
12635: IFFALSE 12746
// begin tmp := [ ] ;
12637: LD_ADDR_VAR 0 19
12641: PUSH
12642: EMPTY
12643: ST_TO_ADDR
// for j in f do
12644: LD_ADDR_VAR 0 9
12648: PUSH
12649: LD_VAR 0 12
12653: PUSH
12654: FOR_IN
12655: IFFALSE 12728
// if GetBType ( j ) = b_bunker then
12657: LD_VAR 0 9
12661: PPUSH
12662: CALL_OW 266
12666: PUSH
12667: LD_INT 32
12669: EQUAL
12670: IFFALSE 12697
// tmp := Insert ( tmp , 1 , j ) else
12672: LD_ADDR_VAR 0 19
12676: PUSH
12677: LD_VAR 0 19
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: LD_VAR 0 9
12689: PPUSH
12690: CALL_OW 2
12694: ST_TO_ADDR
12695: GO 12726
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12697: LD_ADDR_VAR 0 19
12701: PUSH
12702: LD_VAR 0 19
12706: PPUSH
12707: LD_VAR 0 19
12711: PUSH
12712: LD_INT 1
12714: PLUS
12715: PPUSH
12716: LD_VAR 0 9
12720: PPUSH
12721: CALL_OW 2
12725: ST_TO_ADDR
12726: GO 12654
12728: POP
12729: POP
// if tmp then
12730: LD_VAR 0 19
12734: IFFALSE 12746
// f := tmp ;
12736: LD_ADDR_VAR 0 12
12740: PUSH
12741: LD_VAR 0 19
12745: ST_TO_ADDR
// end ; x := personel [ i ] ;
12746: LD_ADDR_VAR 0 13
12750: PUSH
12751: LD_VAR 0 6
12755: PUSH
12756: LD_VAR 0 8
12760: ARRAY
12761: ST_TO_ADDR
// if x = - 1 then
12762: LD_VAR 0 13
12766: PUSH
12767: LD_INT 1
12769: NEG
12770: EQUAL
12771: IFFALSE 12982
// begin for j in f do
12773: LD_ADDR_VAR 0 9
12777: PUSH
12778: LD_VAR 0 12
12782: PUSH
12783: FOR_IN
12784: IFFALSE 12978
// repeat InitHc ;
12786: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12790: LD_VAR 0 9
12794: PPUSH
12795: CALL_OW 266
12799: PUSH
12800: LD_INT 5
12802: EQUAL
12803: IFFALSE 12873
// begin if UnitsInside ( j ) < 3 then
12805: LD_VAR 0 9
12809: PPUSH
12810: CALL_OW 313
12814: PUSH
12815: LD_INT 3
12817: LESS
12818: IFFALSE 12854
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12820: LD_INT 0
12822: PPUSH
12823: LD_INT 5
12825: PUSH
12826: LD_INT 8
12828: PUSH
12829: LD_INT 9
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: LD_VAR 0 17
12841: ARRAY
12842: PPUSH
12843: LD_VAR 0 4
12847: PPUSH
12848: CALL_OW 380
12852: GO 12871
// PrepareHuman ( false , i , skill ) ;
12854: LD_INT 0
12856: PPUSH
12857: LD_VAR 0 8
12861: PPUSH
12862: LD_VAR 0 4
12866: PPUSH
12867: CALL_OW 380
// end else
12871: GO 12890
// PrepareHuman ( false , i , skill ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_VAR 0 8
12880: PPUSH
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 380
// un := CreateHuman ;
12890: LD_ADDR_VAR 0 14
12894: PUSH
12895: CALL_OW 44
12899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12900: LD_ADDR_VAR 0 7
12904: PUSH
12905: LD_VAR 0 7
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: LD_VAR 0 14
12917: PPUSH
12918: CALL_OW 2
12922: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12923: LD_VAR 0 14
12927: PPUSH
12928: LD_VAR 0 9
12932: PPUSH
12933: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12937: LD_VAR 0 9
12941: PPUSH
12942: CALL_OW 313
12946: PUSH
12947: LD_INT 6
12949: EQUAL
12950: IFTRUE 12974
12952: PUSH
12953: LD_VAR 0 9
12957: PPUSH
12958: CALL_OW 266
12962: PUSH
12963: LD_INT 32
12965: PUSH
12966: LD_INT 31
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: IN
12973: OR
12974: IFFALSE 12786
12976: GO 12783
12978: POP
12979: POP
// end else
12980: GO 13366
// for j = 1 to x do
12982: LD_ADDR_VAR 0 9
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_VAR 0 13
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13364
// begin InitHc ;
13000: CALL_OW 19
// if not f then
13004: LD_VAR 0 12
13008: NOT
13009: IFFALSE 13098
// begin PrepareHuman ( false , i , skill ) ;
13011: LD_INT 0
13013: PPUSH
13014: LD_VAR 0 8
13018: PPUSH
13019: LD_VAR 0 4
13023: PPUSH
13024: CALL_OW 380
// un := CreateHuman ;
13028: LD_ADDR_VAR 0 14
13032: PUSH
13033: CALL_OW 44
13037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13038: LD_ADDR_VAR 0 7
13042: PUSH
13043: LD_VAR 0 7
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 14
13055: PPUSH
13056: CALL_OW 2
13060: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13061: LD_VAR 0 14
13065: PPUSH
13066: LD_VAR 0 1
13070: PPUSH
13071: CALL_OW 250
13075: PPUSH
13076: LD_VAR 0 1
13080: PPUSH
13081: CALL_OW 251
13085: PPUSH
13086: LD_INT 10
13088: PPUSH
13089: LD_INT 0
13091: PPUSH
13092: CALL_OW 50
// continue ;
13096: GO 12997
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13098: LD_VAR 0 12
13102: PUSH
13103: LD_INT 1
13105: ARRAY
13106: PPUSH
13107: CALL_OW 313
13111: IFFALSE 13139
13113: PUSH
13114: LD_VAR 0 12
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 266
13127: PUSH
13128: LD_INT 32
13130: PUSH
13131: LD_INT 31
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: IN
13138: AND
13139: IFTRUE 13160
13141: PUSH
13142: LD_VAR 0 12
13146: PUSH
13147: LD_INT 1
13149: ARRAY
13150: PPUSH
13151: CALL_OW 313
13155: PUSH
13156: LD_INT 6
13158: EQUAL
13159: OR
13160: IFFALSE 13180
// f := Delete ( f , 1 ) ;
13162: LD_ADDR_VAR 0 12
13166: PUSH
13167: LD_VAR 0 12
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 3
13179: ST_TO_ADDR
// if not f then
13180: LD_VAR 0 12
13184: NOT
13185: IFFALSE 13203
// begin x := x + 2 ;
13187: LD_ADDR_VAR 0 13
13191: PUSH
13192: LD_VAR 0 13
13196: PUSH
13197: LD_INT 2
13199: PLUS
13200: ST_TO_ADDR
// continue ;
13201: GO 12997
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13203: LD_VAR 0 12
13207: PUSH
13208: LD_INT 1
13210: ARRAY
13211: PPUSH
13212: CALL_OW 266
13216: PUSH
13217: LD_INT 5
13219: EQUAL
13220: IFFALSE 13294
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13222: LD_VAR 0 12
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: CALL_OW 313
13235: PUSH
13236: LD_INT 3
13238: LESS
13239: IFFALSE 13275
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13241: LD_INT 0
13243: PPUSH
13244: LD_INT 5
13246: PUSH
13247: LD_INT 8
13249: PUSH
13250: LD_INT 9
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_VAR 0 17
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 4
13268: PPUSH
13269: CALL_OW 380
13273: GO 13292
// PrepareHuman ( false , i , skill ) ;
13275: LD_INT 0
13277: PPUSH
13278: LD_VAR 0 8
13282: PPUSH
13283: LD_VAR 0 4
13287: PPUSH
13288: CALL_OW 380
// end else
13292: GO 13311
// PrepareHuman ( false , i , skill ) ;
13294: LD_INT 0
13296: PPUSH
13297: LD_VAR 0 8
13301: PPUSH
13302: LD_VAR 0 4
13306: PPUSH
13307: CALL_OW 380
// un := CreateHuman ;
13311: LD_ADDR_VAR 0 14
13315: PUSH
13316: CALL_OW 44
13320: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13321: LD_ADDR_VAR 0 7
13325: PUSH
13326: LD_VAR 0 7
13330: PPUSH
13331: LD_INT 1
13333: PPUSH
13334: LD_VAR 0 14
13338: PPUSH
13339: CALL_OW 2
13343: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13344: LD_VAR 0 14
13348: PPUSH
13349: LD_VAR 0 12
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: CALL_OW 52
// end ;
13362: GO 12997
13364: POP
13365: POP
// end ;
13366: GO 12297
13368: POP
13369: POP
// result := result ^ buildings ;
13370: LD_ADDR_VAR 0 7
13374: PUSH
13375: LD_VAR 0 7
13379: PUSH
13380: LD_VAR 0 18
13384: ADD
13385: ST_TO_ADDR
// end else
13386: GO 13529
// begin for i = 1 to personel do
13388: LD_ADDR_VAR 0 8
13392: PUSH
13393: DOUBLE
13394: LD_INT 1
13396: DEC
13397: ST_TO_ADDR
13398: LD_VAR 0 6
13402: PUSH
13403: FOR_TO
13404: IFFALSE 13527
// begin if i > 4 then
13406: LD_VAR 0 8
13410: PUSH
13411: LD_INT 4
13413: GREATER
13414: IFFALSE 13418
// break ;
13416: GO 13527
// x := personel [ i ] ;
13418: LD_ADDR_VAR 0 13
13422: PUSH
13423: LD_VAR 0 6
13427: PUSH
13428: LD_VAR 0 8
13432: ARRAY
13433: ST_TO_ADDR
// if x = - 1 then
13434: LD_VAR 0 13
13438: PUSH
13439: LD_INT 1
13441: NEG
13442: EQUAL
13443: IFFALSE 13447
// continue ;
13445: GO 13403
// PrepareHuman ( false , i , skill ) ;
13447: LD_INT 0
13449: PPUSH
13450: LD_VAR 0 8
13454: PPUSH
13455: LD_VAR 0 4
13459: PPUSH
13460: CALL_OW 380
// un := CreateHuman ;
13464: LD_ADDR_VAR 0 14
13468: PUSH
13469: CALL_OW 44
13473: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13474: LD_VAR 0 14
13478: PPUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 250
13488: PPUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 251
13498: PPUSH
13499: LD_INT 10
13501: PPUSH
13502: LD_INT 0
13504: PPUSH
13505: CALL_OW 50
// result := result ^ un ;
13509: LD_ADDR_VAR 0 7
13513: PUSH
13514: LD_VAR 0 7
13518: PUSH
13519: LD_VAR 0 14
13523: ADD
13524: ST_TO_ADDR
// end ;
13525: GO 13403
13527: POP
13528: POP
// end ; end ;
13529: LD_VAR 0 7
13533: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13534: LD_INT 0
13536: PPUSH
13537: PPUSH
13538: PPUSH
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
13544: PPUSH
13545: PPUSH
13546: PPUSH
13547: PPUSH
13548: PPUSH
13549: PPUSH
13550: PPUSH
13551: PPUSH
// result := false ;
13552: LD_ADDR_VAR 0 3
13556: PUSH
13557: LD_INT 0
13559: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13560: LD_VAR 0 1
13564: NOT
13565: IFTRUE 13590
13567: PUSH
13568: LD_VAR 0 1
13572: PPUSH
13573: CALL_OW 266
13577: PUSH
13578: LD_INT 32
13580: PUSH
13581: LD_INT 33
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: IN
13588: NOT
13589: OR
13590: IFFALSE 13594
// exit ;
13592: GO 14729
// nat := GetNation ( tower ) ;
13594: LD_ADDR_VAR 0 12
13598: PUSH
13599: LD_VAR 0 1
13603: PPUSH
13604: CALL_OW 248
13608: ST_TO_ADDR
// side := GetSide ( tower ) ;
13609: LD_ADDR_VAR 0 16
13613: PUSH
13614: LD_VAR 0 1
13618: PPUSH
13619: CALL_OW 255
13623: ST_TO_ADDR
// x := GetX ( tower ) ;
13624: LD_ADDR_VAR 0 10
13628: PUSH
13629: LD_VAR 0 1
13633: PPUSH
13634: CALL_OW 250
13638: ST_TO_ADDR
// y := GetY ( tower ) ;
13639: LD_ADDR_VAR 0 11
13643: PUSH
13644: LD_VAR 0 1
13648: PPUSH
13649: CALL_OW 251
13653: ST_TO_ADDR
// if not x or not y then
13654: LD_VAR 0 10
13658: NOT
13659: IFTRUE 13668
13661: PUSH
13662: LD_VAR 0 11
13666: NOT
13667: OR
13668: IFFALSE 13672
// exit ;
13670: GO 14729
// weapon := 0 ;
13672: LD_ADDR_VAR 0 18
13676: PUSH
13677: LD_INT 0
13679: ST_TO_ADDR
// fac_list := [ ] ;
13680: LD_ADDR_VAR 0 17
13684: PUSH
13685: EMPTY
13686: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13687: LD_ADDR_VAR 0 6
13691: PUSH
13692: LD_VAR 0 1
13696: PPUSH
13697: CALL_OW 274
13701: PPUSH
13702: LD_VAR 0 2
13706: PPUSH
13707: LD_INT 0
13709: PPUSH
13710: CALL 11264 0 3
13714: PPUSH
13715: LD_INT 30
13717: PUSH
13718: LD_INT 3
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PPUSH
13725: CALL_OW 72
13729: ST_TO_ADDR
// if not factories then
13730: LD_VAR 0 6
13734: NOT
13735: IFFALSE 13739
// exit ;
13737: GO 14729
// for i in factories do
13739: LD_ADDR_VAR 0 8
13743: PUSH
13744: LD_VAR 0 6
13748: PUSH
13749: FOR_IN
13750: IFFALSE 13775
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13752: LD_ADDR_VAR 0 17
13756: PUSH
13757: LD_VAR 0 17
13761: PUSH
13762: LD_VAR 0 8
13766: PPUSH
13767: CALL_OW 478
13771: UNION
13772: ST_TO_ADDR
13773: GO 13749
13775: POP
13776: POP
// if not fac_list then
13777: LD_VAR 0 17
13781: NOT
13782: IFFALSE 13786
// exit ;
13784: GO 14729
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13786: LD_ADDR_VAR 0 5
13790: PUSH
13791: LD_INT 4
13793: PUSH
13794: LD_INT 5
13796: PUSH
13797: LD_INT 9
13799: PUSH
13800: LD_INT 10
13802: PUSH
13803: LD_INT 6
13805: PUSH
13806: LD_INT 7
13808: PUSH
13809: LD_INT 11
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 27
13823: PUSH
13824: LD_INT 28
13826: PUSH
13827: LD_INT 26
13829: PUSH
13830: LD_INT 30
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 43
13841: PUSH
13842: LD_INT 44
13844: PUSH
13845: LD_INT 46
13847: PUSH
13848: LD_INT 45
13850: PUSH
13851: LD_INT 47
13853: PUSH
13854: LD_INT 49
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: PUSH
13870: LD_VAR 0 12
13874: ARRAY
13875: ST_TO_ADDR
// list := list isect fac_list ;
13876: LD_ADDR_VAR 0 5
13880: PUSH
13881: LD_VAR 0 5
13885: PUSH
13886: LD_VAR 0 17
13890: ISECT
13891: ST_TO_ADDR
// if not list then
13892: LD_VAR 0 5
13896: NOT
13897: IFFALSE 13901
// exit ;
13899: GO 14729
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13901: LD_VAR 0 12
13905: PUSH
13906: LD_INT 3
13908: EQUAL
13909: IFFALSE 13921
13911: PUSH
13912: LD_INT 49
13914: PUSH
13915: LD_VAR 0 5
13919: IN
13920: AND
13921: IFFALSE 13941
13923: PUSH
13924: LD_INT 31
13926: PPUSH
13927: LD_VAR 0 16
13931: PPUSH
13932: CALL_OW 321
13936: PUSH
13937: LD_INT 2
13939: EQUAL
13940: AND
13941: IFFALSE 14001
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13943: LD_INT 22
13945: PUSH
13946: LD_VAR 0 16
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 35
13957: PUSH
13958: LD_INT 49
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 91
13967: PUSH
13968: LD_VAR 0 1
13972: PUSH
13973: LD_INT 10
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: NOT
13991: IFFALSE 14001
// weapon := ru_time_lapser ;
13993: LD_ADDR_VAR 0 18
13997: PUSH
13998: LD_INT 49
14000: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14001: LD_VAR 0 12
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: IN
14016: IFFALSE 14040
14018: PUSH
14019: LD_INT 11
14021: PUSH
14022: LD_VAR 0 5
14026: IN
14027: IFTRUE 14039
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_VAR 0 5
14037: IN
14038: OR
14039: AND
14040: IFFALSE 14060
14042: PUSH
14043: LD_INT 6
14045: PPUSH
14046: LD_VAR 0 16
14050: PPUSH
14051: CALL_OW 321
14055: PUSH
14056: LD_INT 2
14058: EQUAL
14059: AND
14060: IFFALSE 14227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14062: LD_INT 22
14064: PUSH
14065: LD_VAR 0 16
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 2
14076: PUSH
14077: LD_INT 35
14079: PUSH
14080: LD_INT 11
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: LD_INT 35
14089: PUSH
14090: LD_INT 30
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 91
14104: PUSH
14105: LD_VAR 0 1
14109: PUSH
14110: LD_INT 18
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: PPUSH
14123: CALL_OW 69
14127: NOT
14128: IFFALSE 14204
14130: PUSH
14131: LD_INT 22
14133: PUSH
14134: LD_VAR 0 16
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 2
14145: PUSH
14146: LD_INT 30
14148: PUSH
14149: LD_INT 32
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 30
14158: PUSH
14159: LD_INT 33
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: LD_INT 91
14173: PUSH
14174: LD_VAR 0 1
14178: PUSH
14179: LD_INT 12
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: PPUSH
14195: CALL_OW 69
14199: PUSH
14200: LD_INT 2
14202: GREATER
14203: AND
14204: IFFALSE 14227
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14206: LD_ADDR_VAR 0 18
14210: PUSH
14211: LD_INT 11
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_VAR 0 12
14225: ARRAY
14226: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14227: LD_VAR 0 18
14231: NOT
14232: IFFALSE 14252
14234: PUSH
14235: LD_INT 40
14237: PPUSH
14238: LD_VAR 0 16
14242: PPUSH
14243: CALL_OW 321
14247: PUSH
14248: LD_INT 2
14250: EQUAL
14251: AND
14252: IFFALSE 14288
14254: PUSH
14255: LD_INT 7
14257: PUSH
14258: LD_VAR 0 5
14262: IN
14263: IFTRUE 14275
14265: PUSH
14266: LD_INT 28
14268: PUSH
14269: LD_VAR 0 5
14273: IN
14274: OR
14275: IFTRUE 14287
14277: PUSH
14278: LD_INT 45
14280: PUSH
14281: LD_VAR 0 5
14285: IN
14286: OR
14287: AND
14288: IFFALSE 14542
// begin hex := GetHexInfo ( x , y ) ;
14290: LD_ADDR_VAR 0 4
14294: PUSH
14295: LD_VAR 0 10
14299: PPUSH
14300: LD_VAR 0 11
14304: PPUSH
14305: CALL_OW 546
14309: ST_TO_ADDR
// if hex [ 1 ] then
14310: LD_VAR 0 4
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: IFFALSE 14322
// exit ;
14320: GO 14729
// height := hex [ 2 ] ;
14322: LD_ADDR_VAR 0 15
14326: PUSH
14327: LD_VAR 0 4
14331: PUSH
14332: LD_INT 2
14334: ARRAY
14335: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14336: LD_ADDR_VAR 0 14
14340: PUSH
14341: LD_INT 0
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: LD_INT 3
14349: PUSH
14350: LD_INT 5
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: ST_TO_ADDR
// for i in tmp do
14359: LD_ADDR_VAR 0 8
14363: PUSH
14364: LD_VAR 0 14
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14540
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14372: LD_ADDR_VAR 0 9
14376: PUSH
14377: LD_VAR 0 10
14381: PPUSH
14382: LD_VAR 0 8
14386: PPUSH
14387: LD_INT 5
14389: PPUSH
14390: CALL_OW 272
14394: PUSH
14395: LD_VAR 0 11
14399: PPUSH
14400: LD_VAR 0 8
14404: PPUSH
14405: LD_INT 5
14407: PPUSH
14408: CALL_OW 273
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14417: LD_VAR 0 9
14421: PUSH
14422: LD_INT 1
14424: ARRAY
14425: PPUSH
14426: LD_VAR 0 9
14430: PUSH
14431: LD_INT 2
14433: ARRAY
14434: PPUSH
14435: CALL_OW 488
14439: IFFALSE 14538
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14441: LD_ADDR_VAR 0 4
14445: PUSH
14446: LD_VAR 0 9
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: LD_VAR 0 9
14459: PUSH
14460: LD_INT 2
14462: ARRAY
14463: PPUSH
14464: CALL_OW 546
14468: ST_TO_ADDR
// if hex [ 1 ] then
14469: LD_VAR 0 4
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: IFFALSE 14481
// continue ;
14479: GO 14369
// h := hex [ 2 ] ;
14481: LD_ADDR_VAR 0 13
14485: PUSH
14486: LD_VAR 0 4
14490: PUSH
14491: LD_INT 2
14493: ARRAY
14494: ST_TO_ADDR
// if h + 7 < height then
14495: LD_VAR 0 13
14499: PUSH
14500: LD_INT 7
14502: PLUS
14503: PUSH
14504: LD_VAR 0 15
14508: LESS
14509: IFFALSE 14538
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14511: LD_ADDR_VAR 0 18
14515: PUSH
14516: LD_INT 7
14518: PUSH
14519: LD_INT 28
14521: PUSH
14522: LD_INT 45
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: PUSH
14530: LD_VAR 0 12
14534: ARRAY
14535: ST_TO_ADDR
// break ;
14536: GO 14540
// end ; end ; end ;
14538: GO 14369
14540: POP
14541: POP
// end ; if not weapon then
14542: LD_VAR 0 18
14546: NOT
14547: IFFALSE 14607
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14549: LD_ADDR_VAR 0 5
14553: PUSH
14554: LD_VAR 0 5
14558: PUSH
14559: LD_INT 11
14561: PUSH
14562: LD_INT 30
14564: PUSH
14565: LD_INT 49
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: DIFF
14573: ST_TO_ADDR
// if not list then
14574: LD_VAR 0 5
14578: NOT
14579: IFFALSE 14583
// exit ;
14581: GO 14729
// weapon := list [ rand ( 1 , list ) ] ;
14583: LD_ADDR_VAR 0 18
14587: PUSH
14588: LD_VAR 0 5
14592: PUSH
14593: LD_INT 1
14595: PPUSH
14596: LD_VAR 0 5
14600: PPUSH
14601: CALL_OW 12
14605: ARRAY
14606: ST_TO_ADDR
// end ; if weapon then
14607: LD_VAR 0 18
14611: IFFALSE 14729
// begin tmp := CostOfWeapon ( weapon ) ;
14613: LD_ADDR_VAR 0 14
14617: PUSH
14618: LD_VAR 0 18
14622: PPUSH
14623: CALL_OW 451
14627: ST_TO_ADDR
// j := GetBase ( tower ) ;
14628: LD_ADDR_VAR 0 9
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 274
14642: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14643: LD_VAR 0 9
14647: PPUSH
14648: LD_INT 1
14650: PPUSH
14651: CALL_OW 275
14655: PUSH
14656: LD_VAR 0 14
14660: PUSH
14661: LD_INT 1
14663: ARRAY
14664: GREATEREQUAL
14665: IFFALSE 14691
14667: PUSH
14668: LD_VAR 0 9
14672: PPUSH
14673: LD_INT 2
14675: PPUSH
14676: CALL_OW 275
14680: PUSH
14681: LD_VAR 0 14
14685: PUSH
14686: LD_INT 2
14688: ARRAY
14689: GREATEREQUAL
14690: AND
14691: IFFALSE 14717
14693: PUSH
14694: LD_VAR 0 9
14698: PPUSH
14699: LD_INT 3
14701: PPUSH
14702: CALL_OW 275
14706: PUSH
14707: LD_VAR 0 14
14711: PUSH
14712: LD_INT 3
14714: ARRAY
14715: GREATEREQUAL
14716: AND
14717: IFFALSE 14729
// result := weapon ;
14719: LD_ADDR_VAR 0 3
14723: PUSH
14724: LD_VAR 0 18
14728: ST_TO_ADDR
// end ; end ;
14729: LD_VAR 0 3
14733: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14734: LD_INT 0
14736: PPUSH
14737: PPUSH
// result := true ;
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_INT 1
14745: ST_TO_ADDR
// if array1 = array2 then
14746: LD_VAR 0 1
14750: PUSH
14751: LD_VAR 0 2
14755: EQUAL
14756: IFFALSE 14816
// begin for i = 1 to array1 do
14758: LD_ADDR_VAR 0 4
14762: PUSH
14763: DOUBLE
14764: LD_INT 1
14766: DEC
14767: ST_TO_ADDR
14768: LD_VAR 0 1
14772: PUSH
14773: FOR_TO
14774: IFFALSE 14812
// if array1 [ i ] <> array2 [ i ] then
14776: LD_VAR 0 1
14780: PUSH
14781: LD_VAR 0 4
14785: ARRAY
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: LD_VAR 0 4
14796: ARRAY
14797: NONEQUAL
14798: IFFALSE 14810
// begin result := false ;
14800: LD_ADDR_VAR 0 3
14804: PUSH
14805: LD_INT 0
14807: ST_TO_ADDR
// break ;
14808: GO 14812
// end ;
14810: GO 14773
14812: POP
14813: POP
// end else
14814: GO 14824
// result := false ;
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: LD_INT 0
14823: ST_TO_ADDR
// end ;
14824: LD_VAR 0 3
14828: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
// if not array1 or not array2 then
14833: LD_VAR 0 1
14837: NOT
14838: IFTRUE 14847
14840: PUSH
14841: LD_VAR 0 2
14845: NOT
14846: OR
14847: IFFALSE 14851
// exit ;
14849: GO 14915
// result := true ;
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 1
14858: ST_TO_ADDR
// for i = 1 to array1 do
14859: LD_ADDR_VAR 0 4
14863: PUSH
14864: DOUBLE
14865: LD_INT 1
14867: DEC
14868: ST_TO_ADDR
14869: LD_VAR 0 1
14873: PUSH
14874: FOR_TO
14875: IFFALSE 14913
// if array1 [ i ] <> array2 [ i ] then
14877: LD_VAR 0 1
14881: PUSH
14882: LD_VAR 0 4
14886: ARRAY
14887: PUSH
14888: LD_VAR 0 2
14892: PUSH
14893: LD_VAR 0 4
14897: ARRAY
14898: NONEQUAL
14899: IFFALSE 14911
// begin result := false ;
14901: LD_ADDR_VAR 0 3
14905: PUSH
14906: LD_INT 0
14908: ST_TO_ADDR
// break ;
14909: GO 14913
// end ;
14911: GO 14874
14913: POP
14914: POP
// end ;
14915: LD_VAR 0 3
14919: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14920: LD_INT 0
14922: PPUSH
14923: PPUSH
14924: PPUSH
// pom := GetBase ( fac ) ;
14925: LD_ADDR_VAR 0 5
14929: PUSH
14930: LD_VAR 0 1
14934: PPUSH
14935: CALL_OW 274
14939: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_VAR 0 2
14949: PUSH
14950: LD_INT 1
14952: ARRAY
14953: PPUSH
14954: LD_VAR 0 2
14958: PUSH
14959: LD_INT 2
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 2
14967: PUSH
14968: LD_INT 3
14970: ARRAY
14971: PPUSH
14972: LD_VAR 0 2
14976: PUSH
14977: LD_INT 4
14979: ARRAY
14980: PPUSH
14981: CALL_OW 449
14985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14986: LD_ADDR_VAR 0 3
14990: PUSH
14991: LD_VAR 0 5
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 275
15003: PUSH
15004: LD_VAR 0 4
15008: PUSH
15009: LD_INT 1
15011: ARRAY
15012: GREATEREQUAL
15013: IFFALSE 15039
15015: PUSH
15016: LD_VAR 0 5
15020: PPUSH
15021: LD_INT 2
15023: PPUSH
15024: CALL_OW 275
15028: PUSH
15029: LD_VAR 0 4
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: GREATEREQUAL
15038: AND
15039: IFFALSE 15065
15041: PUSH
15042: LD_VAR 0 5
15046: PPUSH
15047: LD_INT 3
15049: PPUSH
15050: CALL_OW 275
15054: PUSH
15055: LD_VAR 0 4
15059: PUSH
15060: LD_INT 3
15062: ARRAY
15063: GREATEREQUAL
15064: AND
15065: ST_TO_ADDR
// end ;
15066: LD_VAR 0 3
15070: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15071: LD_INT 0
15073: PPUSH
15074: PPUSH
15075: PPUSH
15076: PPUSH
// pom := GetBase ( building ) ;
15077: LD_ADDR_VAR 0 3
15081: PUSH
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 274
15091: ST_TO_ADDR
// if not pom then
15092: LD_VAR 0 3
15096: NOT
15097: IFFALSE 15101
// exit ;
15099: GO 15275
// btype := GetBType ( building ) ;
15101: LD_ADDR_VAR 0 5
15105: PUSH
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 266
15115: ST_TO_ADDR
// if btype = b_armoury then
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 4
15123: EQUAL
15124: IFFALSE 15134
// btype := b_barracks ;
15126: LD_ADDR_VAR 0 5
15130: PUSH
15131: LD_INT 5
15133: ST_TO_ADDR
// if btype = b_depot then
15134: LD_VAR 0 5
15138: PUSH
15139: LD_INT 0
15141: EQUAL
15142: IFFALSE 15152
// btype := b_warehouse ;
15144: LD_ADDR_VAR 0 5
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if btype = b_workshop then
15152: LD_VAR 0 5
15156: PUSH
15157: LD_INT 2
15159: EQUAL
15160: IFFALSE 15170
// btype := b_factory ;
15162: LD_ADDR_VAR 0 5
15166: PUSH
15167: LD_INT 3
15169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15170: LD_ADDR_VAR 0 4
15174: PUSH
15175: LD_VAR 0 5
15179: PPUSH
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 248
15189: PPUSH
15190: CALL_OW 450
15194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15195: LD_ADDR_VAR 0 2
15199: PUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: LD_INT 1
15207: PPUSH
15208: CALL_OW 275
15212: PUSH
15213: LD_VAR 0 4
15217: PUSH
15218: LD_INT 1
15220: ARRAY
15221: GREATEREQUAL
15222: IFFALSE 15248
15224: PUSH
15225: LD_VAR 0 3
15229: PPUSH
15230: LD_INT 2
15232: PPUSH
15233: CALL_OW 275
15237: PUSH
15238: LD_VAR 0 4
15242: PUSH
15243: LD_INT 2
15245: ARRAY
15246: GREATEREQUAL
15247: AND
15248: IFFALSE 15274
15250: PUSH
15251: LD_VAR 0 3
15255: PPUSH
15256: LD_INT 3
15258: PPUSH
15259: CALL_OW 275
15263: PUSH
15264: LD_VAR 0 4
15268: PUSH
15269: LD_INT 3
15271: ARRAY
15272: GREATEREQUAL
15273: AND
15274: ST_TO_ADDR
// end ;
15275: LD_VAR 0 2
15279: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15280: LD_INT 0
15282: PPUSH
15283: PPUSH
15284: PPUSH
// pom := GetBase ( building ) ;
15285: LD_ADDR_VAR 0 4
15289: PUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 274
15299: ST_TO_ADDR
// if not pom then
15300: LD_VAR 0 4
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 15414
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15309: LD_ADDR_VAR 0 5
15313: PUSH
15314: LD_VAR 0 2
15318: PPUSH
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 248
15328: PPUSH
15329: CALL_OW 450
15333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 275
15351: PUSH
15352: LD_VAR 0 5
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: GREATEREQUAL
15361: IFFALSE 15387
15363: PUSH
15364: LD_VAR 0 4
15368: PPUSH
15369: LD_INT 2
15371: PPUSH
15372: CALL_OW 275
15376: PUSH
15377: LD_VAR 0 5
15381: PUSH
15382: LD_INT 2
15384: ARRAY
15385: GREATEREQUAL
15386: AND
15387: IFFALSE 15413
15389: PUSH
15390: LD_VAR 0 4
15394: PPUSH
15395: LD_INT 3
15397: PPUSH
15398: CALL_OW 275
15402: PUSH
15403: LD_VAR 0 5
15407: PUSH
15408: LD_INT 3
15410: ARRAY
15411: GREATEREQUAL
15412: AND
15413: ST_TO_ADDR
// end ;
15414: LD_VAR 0 3
15418: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15419: LD_INT 0
15421: PPUSH
15422: PPUSH
15423: PPUSH
15424: PPUSH
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
// result := false ;
15432: LD_ADDR_VAR 0 8
15436: PUSH
15437: LD_INT 0
15439: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15440: LD_VAR 0 5
15444: NOT
15445: IFTRUE 15454
15447: PUSH
15448: LD_VAR 0 1
15452: NOT
15453: OR
15454: IFTRUE 15463
15456: PUSH
15457: LD_VAR 0 2
15461: NOT
15462: OR
15463: IFTRUE 15472
15465: PUSH
15466: LD_VAR 0 3
15470: NOT
15471: OR
15472: IFFALSE 15476
// exit ;
15474: GO 16302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15476: LD_ADDR_VAR 0 14
15480: PUSH
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_VAR 0 2
15490: PPUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_VAR 0 4
15500: PPUSH
15501: LD_VAR 0 5
15505: PUSH
15506: LD_INT 1
15508: ARRAY
15509: PPUSH
15510: CALL_OW 248
15514: PPUSH
15515: LD_INT 0
15517: PPUSH
15518: CALL 17583 0 6
15522: ST_TO_ADDR
// if not hexes then
15523: LD_VAR 0 14
15527: NOT
15528: IFFALSE 15532
// exit ;
15530: GO 16302
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15532: LD_ADDR_VAR 0 17
15536: PUSH
15537: LD_VAR 0 5
15541: PPUSH
15542: LD_INT 22
15544: PUSH
15545: LD_VAR 0 13
15549: PPUSH
15550: CALL_OW 255
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 2
15561: PUSH
15562: LD_INT 30
15564: PUSH
15565: LD_INT 0
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 1
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PPUSH
15591: CALL_OW 72
15595: ST_TO_ADDR
// for i = 1 to hexes do
15596: LD_ADDR_VAR 0 9
15600: PUSH
15601: DOUBLE
15602: LD_INT 1
15604: DEC
15605: ST_TO_ADDR
15606: LD_VAR 0 14
15610: PUSH
15611: FOR_TO
15612: IFFALSE 16300
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15614: LD_ADDR_VAR 0 13
15618: PUSH
15619: LD_VAR 0 14
15623: PUSH
15624: LD_VAR 0 9
15628: ARRAY
15629: PUSH
15630: LD_INT 1
15632: ARRAY
15633: PPUSH
15634: LD_VAR 0 14
15638: PUSH
15639: LD_VAR 0 9
15643: ARRAY
15644: PUSH
15645: LD_INT 2
15647: ARRAY
15648: PPUSH
15649: CALL_OW 428
15653: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15654: LD_VAR 0 14
15658: PUSH
15659: LD_VAR 0 9
15663: ARRAY
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: LD_VAR 0 14
15673: PUSH
15674: LD_VAR 0 9
15678: ARRAY
15679: PUSH
15680: LD_INT 2
15682: ARRAY
15683: PPUSH
15684: CALL_OW 351
15688: IFTRUE 15727
15690: PUSH
15691: LD_VAR 0 14
15695: PUSH
15696: LD_VAR 0 9
15700: ARRAY
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: LD_VAR 0 14
15710: PUSH
15711: LD_VAR 0 9
15715: ARRAY
15716: PUSH
15717: LD_INT 2
15719: ARRAY
15720: PPUSH
15721: CALL_OW 488
15725: NOT
15726: OR
15727: IFTRUE 15744
15729: PUSH
15730: LD_VAR 0 13
15734: PPUSH
15735: CALL_OW 247
15739: PUSH
15740: LD_INT 3
15742: EQUAL
15743: OR
15744: IFFALSE 15750
// exit ;
15746: POP
15747: POP
15748: GO 16302
// if not tmp then
15750: LD_VAR 0 13
15754: NOT
15755: IFFALSE 15759
// continue ;
15757: GO 15611
// result := true ;
15759: LD_ADDR_VAR 0 8
15763: PUSH
15764: LD_INT 1
15766: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15767: LD_VAR 0 6
15771: IFFALSE 15788
15773: PUSH
15774: LD_VAR 0 13
15778: PPUSH
15779: CALL_OW 247
15783: PUSH
15784: LD_INT 2
15786: EQUAL
15787: AND
15788: IFFALSE 15805
15790: PUSH
15791: LD_VAR 0 13
15795: PPUSH
15796: CALL_OW 263
15800: PUSH
15801: LD_INT 1
15803: EQUAL
15804: AND
15805: IFFALSE 15969
// begin if IsDrivenBy ( tmp ) then
15807: LD_VAR 0 13
15811: PPUSH
15812: CALL_OW 311
15816: IFFALSE 15820
// continue ;
15818: GO 15611
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15820: LD_VAR 0 6
15824: PPUSH
15825: LD_INT 3
15827: PUSH
15828: LD_INT 60
15830: PUSH
15831: EMPTY
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 3
15840: PUSH
15841: LD_INT 55
15843: PUSH
15844: EMPTY
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: IFFALSE 15967
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15861: LD_ADDR_VAR 0 18
15865: PUSH
15866: LD_VAR 0 6
15870: PPUSH
15871: LD_INT 3
15873: PUSH
15874: LD_INT 60
15876: PUSH
15877: EMPTY
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 3
15886: PUSH
15887: LD_INT 55
15889: PUSH
15890: EMPTY
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 72
15905: PUSH
15906: LD_INT 1
15908: ARRAY
15909: ST_TO_ADDR
// if IsInUnit ( driver ) then
15910: LD_VAR 0 18
15914: PPUSH
15915: CALL_OW 310
15919: IFFALSE 15930
// ComExit ( driver ) ;
15921: LD_VAR 0 18
15925: PPUSH
15926: CALL 41573 0 1
// AddComEnterUnit ( driver , tmp ) ;
15930: LD_VAR 0 18
15934: PPUSH
15935: LD_VAR 0 13
15939: PPUSH
15940: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15944: LD_VAR 0 18
15948: PPUSH
15949: LD_VAR 0 7
15953: PPUSH
15954: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15958: LD_VAR 0 18
15962: PPUSH
15963: CALL_OW 181
// end ; continue ;
15967: GO 15611
// end ; if not cleaners or not tmp in cleaners then
15969: LD_VAR 0 6
15973: NOT
15974: IFTRUE 15989
15976: PUSH
15977: LD_VAR 0 13
15981: PUSH
15982: LD_VAR 0 6
15986: IN
15987: NOT
15988: OR
15989: IFFALSE 16298
// begin if dep then
15991: LD_VAR 0 17
15995: IFFALSE 16131
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15997: LD_ADDR_VAR 0 16
16001: PUSH
16002: LD_VAR 0 17
16006: PUSH
16007: LD_INT 1
16009: ARRAY
16010: PPUSH
16011: CALL_OW 250
16015: PPUSH
16016: LD_VAR 0 17
16020: PUSH
16021: LD_INT 1
16023: ARRAY
16024: PPUSH
16025: CALL_OW 254
16029: PPUSH
16030: LD_INT 5
16032: PPUSH
16033: CALL_OW 272
16037: PUSH
16038: LD_VAR 0 17
16042: PUSH
16043: LD_INT 1
16045: ARRAY
16046: PPUSH
16047: CALL_OW 251
16051: PPUSH
16052: LD_VAR 0 17
16056: PUSH
16057: LD_INT 1
16059: ARRAY
16060: PPUSH
16061: CALL_OW 254
16065: PPUSH
16066: LD_INT 5
16068: PPUSH
16069: CALL_OW 273
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16078: LD_VAR 0 16
16082: PUSH
16083: LD_INT 1
16085: ARRAY
16086: PPUSH
16087: LD_VAR 0 16
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: PPUSH
16096: CALL_OW 488
16100: IFFALSE 16131
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16102: LD_VAR 0 13
16106: PPUSH
16107: LD_VAR 0 16
16111: PUSH
16112: LD_INT 1
16114: ARRAY
16115: PPUSH
16116: LD_VAR 0 16
16120: PUSH
16121: LD_INT 2
16123: ARRAY
16124: PPUSH
16125: CALL_OW 111
// continue ;
16129: GO 15611
// end ; end ; r := GetDir ( tmp ) ;
16131: LD_ADDR_VAR 0 15
16135: PUSH
16136: LD_VAR 0 13
16140: PPUSH
16141: CALL_OW 254
16145: ST_TO_ADDR
// if r = 5 then
16146: LD_VAR 0 15
16150: PUSH
16151: LD_INT 5
16153: EQUAL
16154: IFFALSE 16164
// r := 0 ;
16156: LD_ADDR_VAR 0 15
16160: PUSH
16161: LD_INT 0
16163: ST_TO_ADDR
// for j = r to 5 do
16164: LD_ADDR_VAR 0 10
16168: PUSH
16169: DOUBLE
16170: LD_VAR 0 15
16174: DEC
16175: ST_TO_ADDR
16176: LD_INT 5
16178: PUSH
16179: FOR_TO
16180: IFFALSE 16296
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16182: LD_ADDR_VAR 0 11
16186: PUSH
16187: LD_VAR 0 13
16191: PPUSH
16192: CALL_OW 250
16196: PPUSH
16197: LD_VAR 0 10
16201: PPUSH
16202: LD_INT 2
16204: PPUSH
16205: CALL_OW 272
16209: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16210: LD_ADDR_VAR 0 12
16214: PUSH
16215: LD_VAR 0 13
16219: PPUSH
16220: CALL_OW 251
16224: PPUSH
16225: LD_VAR 0 10
16229: PPUSH
16230: LD_INT 2
16232: PPUSH
16233: CALL_OW 273
16237: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16238: LD_VAR 0 11
16242: PPUSH
16243: LD_VAR 0 12
16247: PPUSH
16248: CALL_OW 488
16252: IFFALSE 16271
16254: PUSH
16255: LD_VAR 0 11
16259: PPUSH
16260: LD_VAR 0 12
16264: PPUSH
16265: CALL_OW 428
16269: NOT
16270: AND
16271: IFFALSE 16294
// begin ComMoveXY ( tmp , _x , _y ) ;
16273: LD_VAR 0 13
16277: PPUSH
16278: LD_VAR 0 11
16282: PPUSH
16283: LD_VAR 0 12
16287: PPUSH
16288: CALL_OW 111
// break ;
16292: GO 16296
// end ; end ;
16294: GO 16179
16296: POP
16297: POP
// end ; end ;
16298: GO 15611
16300: POP
16301: POP
// end ;
16302: LD_VAR 0 8
16306: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16307: LD_INT 0
16309: PPUSH
// result := true ;
16310: LD_ADDR_VAR 0 3
16314: PUSH
16315: LD_INT 1
16317: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16318: LD_VAR 0 2
16322: PUSH
16323: LD_INT 24
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16337
16329: LD_INT 33
16331: DOUBLE
16332: EQUAL
16333: IFTRUE 16337
16335: GO 16362
16337: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16338: LD_ADDR_VAR 0 3
16342: PUSH
16343: LD_INT 32
16345: PPUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 321
16355: PUSH
16356: LD_INT 2
16358: EQUAL
16359: ST_TO_ADDR
16360: GO 16678
16362: LD_INT 20
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16395
16370: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_INT 6
16378: PPUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 321
16388: PUSH
16389: LD_INT 2
16391: EQUAL
16392: ST_TO_ADDR
16393: GO 16678
16395: LD_INT 22
16397: DOUBLE
16398: EQUAL
16399: IFTRUE 16409
16401: LD_INT 36
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16434
16409: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: LD_INT 15
16417: PPUSH
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 321
16427: PUSH
16428: LD_INT 2
16430: EQUAL
16431: ST_TO_ADDR
16432: GO 16678
16434: LD_INT 30
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16467
16442: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16443: LD_ADDR_VAR 0 3
16447: PUSH
16448: LD_INT 20
16450: PPUSH
16451: LD_VAR 0 1
16455: PPUSH
16456: CALL_OW 321
16460: PUSH
16461: LD_INT 2
16463: EQUAL
16464: ST_TO_ADDR
16465: GO 16678
16467: LD_INT 28
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16481
16473: LD_INT 21
16475: DOUBLE
16476: EQUAL
16477: IFTRUE 16481
16479: GO 16506
16481: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16482: LD_ADDR_VAR 0 3
16486: PUSH
16487: LD_INT 21
16489: PPUSH
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 321
16499: PUSH
16500: LD_INT 2
16502: EQUAL
16503: ST_TO_ADDR
16504: GO 16678
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16539
16514: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16515: LD_ADDR_VAR 0 3
16519: PUSH
16520: LD_INT 84
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: CALL_OW 321
16532: PUSH
16533: LD_INT 2
16535: EQUAL
16536: ST_TO_ADDR
16537: GO 16678
16539: LD_INT 19
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16553
16545: LD_INT 23
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16578
16553: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: LD_INT 83
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 321
16571: PUSH
16572: LD_INT 2
16574: EQUAL
16575: ST_TO_ADDR
16576: GO 16678
16578: LD_INT 17
16580: DOUBLE
16581: EQUAL
16582: IFTRUE 16586
16584: GO 16611
16586: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16587: LD_ADDR_VAR 0 3
16591: PUSH
16592: LD_INT 39
16594: PPUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 321
16604: PUSH
16605: LD_INT 2
16607: EQUAL
16608: ST_TO_ADDR
16609: GO 16678
16611: LD_INT 18
16613: DOUBLE
16614: EQUAL
16615: IFTRUE 16619
16617: GO 16644
16619: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_INT 40
16627: PPUSH
16628: LD_VAR 0 1
16632: PPUSH
16633: CALL_OW 321
16637: PUSH
16638: LD_INT 2
16640: EQUAL
16641: ST_TO_ADDR
16642: GO 16678
16644: LD_INT 27
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16677
16652: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: LD_INT 35
16660: PPUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 321
16670: PUSH
16671: LD_INT 2
16673: EQUAL
16674: ST_TO_ADDR
16675: GO 16678
16677: POP
// end ;
16678: LD_VAR 0 3
16682: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
16687: PPUSH
16688: PPUSH
16689: PPUSH
16690: PPUSH
16691: PPUSH
16692: PPUSH
16693: PPUSH
16694: PPUSH
16695: PPUSH
// result := false ;
16696: LD_ADDR_VAR 0 6
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// if btype = b_depot then
16704: LD_VAR 0 2
16708: PUSH
16709: LD_INT 0
16711: EQUAL
16712: IFFALSE 16724
// begin result := true ;
16714: LD_ADDR_VAR 0 6
16718: PUSH
16719: LD_INT 1
16721: ST_TO_ADDR
// exit ;
16722: GO 17578
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16724: LD_VAR 0 1
16728: NOT
16729: IFTRUE 16754
16731: PUSH
16732: LD_VAR 0 1
16736: PPUSH
16737: CALL_OW 266
16741: PUSH
16742: LD_INT 0
16744: PUSH
16745: LD_INT 1
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: IN
16752: NOT
16753: OR
16754: IFTRUE 16763
16756: PUSH
16757: LD_VAR 0 2
16761: NOT
16762: OR
16763: IFTRUE 16799
16765: PUSH
16766: LD_VAR 0 5
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: LD_INT 1
16776: PUSH
16777: LD_INT 2
16779: PUSH
16780: LD_INT 3
16782: PUSH
16783: LD_INT 4
16785: PUSH
16786: LD_INT 5
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: IN
16797: NOT
16798: OR
16799: IFTRUE 16818
16801: PUSH
16802: LD_VAR 0 3
16806: PPUSH
16807: LD_VAR 0 4
16811: PPUSH
16812: CALL_OW 488
16816: NOT
16817: OR
16818: IFFALSE 16822
// exit ;
16820: GO 17578
// side := GetSide ( depot ) ;
16822: LD_ADDR_VAR 0 9
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: CALL_OW 255
16836: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16837: LD_VAR 0 9
16841: PPUSH
16842: LD_VAR 0 2
16846: PPUSH
16847: CALL 16307 0 2
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 17578
// pom := GetBase ( depot ) ;
16856: LD_ADDR_VAR 0 10
16860: PUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: CALL_OW 274
16870: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16871: LD_ADDR_VAR 0 11
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 248
16890: PPUSH
16891: CALL_OW 450
16895: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16896: LD_VAR 0 10
16900: PPUSH
16901: LD_INT 1
16903: PPUSH
16904: CALL_OW 275
16908: PUSH
16909: LD_VAR 0 11
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: GREATEREQUAL
16918: IFFALSE 16944
16920: PUSH
16921: LD_VAR 0 10
16925: PPUSH
16926: LD_INT 2
16928: PPUSH
16929: CALL_OW 275
16933: PUSH
16934: LD_VAR 0 11
16938: PUSH
16939: LD_INT 2
16941: ARRAY
16942: GREATEREQUAL
16943: AND
16944: IFFALSE 16970
16946: PUSH
16947: LD_VAR 0 10
16951: PPUSH
16952: LD_INT 3
16954: PPUSH
16955: CALL_OW 275
16959: PUSH
16960: LD_VAR 0 11
16964: PUSH
16965: LD_INT 3
16967: ARRAY
16968: GREATEREQUAL
16969: AND
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 17578
// if GetBType ( depot ) = b_depot then
16975: LD_VAR 0 1
16979: PPUSH
16980: CALL_OW 266
16984: PUSH
16985: LD_INT 0
16987: EQUAL
16988: IFFALSE 17000
// dist := 28 else
16990: LD_ADDR_VAR 0 14
16994: PUSH
16995: LD_INT 28
16997: ST_TO_ADDR
16998: GO 17008
// dist := 36 ;
17000: LD_ADDR_VAR 0 14
17004: PUSH
17005: LD_INT 36
17007: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17008: LD_VAR 0 1
17012: PPUSH
17013: LD_VAR 0 3
17017: PPUSH
17018: LD_VAR 0 4
17022: PPUSH
17023: CALL_OW 297
17027: PUSH
17028: LD_VAR 0 14
17032: GREATER
17033: IFFALSE 17037
// exit ;
17035: GO 17578
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17037: LD_ADDR_VAR 0 12
17041: PUSH
17042: LD_VAR 0 2
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_VAR 0 4
17056: PPUSH
17057: LD_VAR 0 5
17061: PPUSH
17062: LD_VAR 0 1
17066: PPUSH
17067: CALL_OW 248
17071: PPUSH
17072: LD_INT 0
17074: PPUSH
17075: CALL 17583 0 6
17079: ST_TO_ADDR
// if not hexes then
17080: LD_VAR 0 12
17084: NOT
17085: IFFALSE 17089
// exit ;
17087: GO 17578
// hex := GetHexInfo ( x , y ) ;
17089: LD_ADDR_VAR 0 15
17093: PUSH
17094: LD_VAR 0 3
17098: PPUSH
17099: LD_VAR 0 4
17103: PPUSH
17104: CALL_OW 546
17108: ST_TO_ADDR
// if hex [ 1 ] then
17109: LD_VAR 0 15
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: IFFALSE 17121
// exit ;
17119: GO 17578
// height := hex [ 2 ] ;
17121: LD_ADDR_VAR 0 13
17125: PUSH
17126: LD_VAR 0 15
17130: PUSH
17131: LD_INT 2
17133: ARRAY
17134: ST_TO_ADDR
// for i = 1 to hexes do
17135: LD_ADDR_VAR 0 7
17139: PUSH
17140: DOUBLE
17141: LD_INT 1
17143: DEC
17144: ST_TO_ADDR
17145: LD_VAR 0 12
17149: PUSH
17150: FOR_TO
17151: IFFALSE 17495
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17153: LD_VAR 0 12
17157: PUSH
17158: LD_VAR 0 7
17162: ARRAY
17163: PUSH
17164: LD_INT 1
17166: ARRAY
17167: PPUSH
17168: LD_VAR 0 12
17172: PUSH
17173: LD_VAR 0 7
17177: ARRAY
17178: PUSH
17179: LD_INT 2
17181: ARRAY
17182: PPUSH
17183: CALL_OW 488
17187: NOT
17188: IFTRUE 17230
17190: PUSH
17191: LD_VAR 0 12
17195: PUSH
17196: LD_VAR 0 7
17200: ARRAY
17201: PUSH
17202: LD_INT 1
17204: ARRAY
17205: PPUSH
17206: LD_VAR 0 12
17210: PUSH
17211: LD_VAR 0 7
17215: ARRAY
17216: PUSH
17217: LD_INT 2
17219: ARRAY
17220: PPUSH
17221: CALL_OW 428
17225: PUSH
17226: LD_INT 0
17228: GREATER
17229: OR
17230: IFTRUE 17268
17232: PUSH
17233: LD_VAR 0 12
17237: PUSH
17238: LD_VAR 0 7
17242: ARRAY
17243: PUSH
17244: LD_INT 1
17246: ARRAY
17247: PPUSH
17248: LD_VAR 0 12
17252: PUSH
17253: LD_VAR 0 7
17257: ARRAY
17258: PUSH
17259: LD_INT 2
17261: ARRAY
17262: PPUSH
17263: CALL_OW 351
17267: OR
17268: IFFALSE 17274
// exit ;
17270: POP
17271: POP
17272: GO 17578
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17274: LD_ADDR_VAR 0 8
17278: PUSH
17279: LD_VAR 0 12
17283: PUSH
17284: LD_VAR 0 7
17288: ARRAY
17289: PUSH
17290: LD_INT 1
17292: ARRAY
17293: PPUSH
17294: LD_VAR 0 12
17298: PUSH
17299: LD_VAR 0 7
17303: ARRAY
17304: PUSH
17305: LD_INT 2
17307: ARRAY
17308: PPUSH
17309: CALL_OW 546
17313: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17314: LD_VAR 0 8
17318: PUSH
17319: LD_INT 1
17321: ARRAY
17322: IFTRUE 17344
17324: PUSH
17325: LD_VAR 0 8
17329: PUSH
17330: LD_INT 2
17332: ARRAY
17333: PUSH
17334: LD_VAR 0 13
17338: PUSH
17339: LD_INT 2
17341: PLUS
17342: GREATER
17343: OR
17344: IFTRUE 17366
17346: PUSH
17347: LD_VAR 0 8
17351: PUSH
17352: LD_INT 2
17354: ARRAY
17355: PUSH
17356: LD_VAR 0 13
17360: PUSH
17361: LD_INT 2
17363: MINUS
17364: LESS
17365: OR
17366: IFTRUE 17434
17368: PUSH
17369: LD_VAR 0 8
17373: PUSH
17374: LD_INT 3
17376: ARRAY
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: LD_INT 8
17383: PUSH
17384: LD_INT 9
17386: PUSH
17387: LD_INT 10
17389: PUSH
17390: LD_INT 11
17392: PUSH
17393: LD_INT 12
17395: PUSH
17396: LD_INT 13
17398: PUSH
17399: LD_INT 16
17401: PUSH
17402: LD_INT 17
17404: PUSH
17405: LD_INT 18
17407: PUSH
17408: LD_INT 19
17410: PUSH
17411: LD_INT 20
17413: PUSH
17414: LD_INT 21
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: IN
17432: NOT
17433: OR
17434: IFTRUE 17447
17436: PUSH
17437: LD_VAR 0 8
17441: PUSH
17442: LD_INT 5
17444: ARRAY
17445: NOT
17446: OR
17447: IFTRUE 17487
17449: PUSH
17450: LD_VAR 0 8
17454: PUSH
17455: LD_INT 6
17457: ARRAY
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 7
17467: PUSH
17468: LD_INT 9
17470: PUSH
17471: LD_INT 10
17473: PUSH
17474: LD_INT 11
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: IN
17485: NOT
17486: OR
17487: IFFALSE 17493
// exit ;
17489: POP
17490: POP
17491: GO 17578
// end ;
17493: GO 17150
17495: POP
17496: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17497: LD_VAR 0 9
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_VAR 0 4
17511: PPUSH
17512: LD_INT 20
17514: PPUSH
17515: CALL 9397 0 4
17519: PUSH
17520: LD_INT 4
17522: ARRAY
17523: IFFALSE 17527
// exit ;
17525: GO 17578
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17527: LD_VAR 0 2
17531: PUSH
17532: LD_INT 29
17534: PUSH
17535: LD_INT 30
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: IN
17542: IFFALSE 17566
17544: PUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: LD_VAR 0 4
17554: PPUSH
17555: LD_VAR 0 9
17559: PPUSH
17560: CALL_OW 440
17564: NOT
17565: AND
17566: IFFALSE 17570
// exit ;
17568: GO 17578
// result := true ;
17570: LD_ADDR_VAR 0 6
17574: PUSH
17575: LD_INT 1
17577: ST_TO_ADDR
// end ;
17578: LD_VAR 0 6
17582: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
// result = [ ] ;
17643: LD_ADDR_VAR 0 7
17647: PUSH
17648: EMPTY
17649: ST_TO_ADDR
// temp_list = [ ] ;
17650: LD_ADDR_VAR 0 9
17654: PUSH
17655: EMPTY
17656: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17657: LD_VAR 0 4
17661: PUSH
17662: LD_INT 0
17664: PUSH
17665: LD_INT 1
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: LD_INT 4
17676: PUSH
17677: LD_INT 5
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: IN
17688: NOT
17689: IFTRUE 17732
17691: PUSH
17692: LD_VAR 0 1
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: IN
17707: IFFALSE 17731
17709: PUSH
17710: LD_VAR 0 5
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: LD_INT 2
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: IN
17729: NOT
17730: AND
17731: OR
17732: IFFALSE 17736
// exit ;
17734: GO 36135
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17736: LD_VAR 0 1
17740: PUSH
17741: LD_INT 6
17743: PUSH
17744: LD_INT 7
17746: PUSH
17747: LD_INT 8
17749: PUSH
17750: LD_INT 13
17752: PUSH
17753: LD_INT 12
17755: PUSH
17756: LD_INT 15
17758: PUSH
17759: LD_INT 11
17761: PUSH
17762: LD_INT 14
17764: PUSH
17765: LD_INT 10
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: IN
17779: IFFALSE 17789
// btype = b_lab ;
17781: LD_ADDR_VAR 0 1
17785: PUSH
17786: LD_INT 6
17788: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17789: LD_VAR 0 6
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: IN
17808: NOT
17809: IFTRUE 17877
17811: PUSH
17812: LD_VAR 0 1
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 2
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: LD_INT 6
17831: PUSH
17832: LD_INT 36
17834: PUSH
17835: LD_INT 4
17837: PUSH
17838: LD_INT 5
17840: PUSH
17841: LD_INT 31
17843: PUSH
17844: LD_INT 32
17846: PUSH
17847: LD_INT 33
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: IN
17863: NOT
17864: IFFALSE 17876
17866: PUSH
17867: LD_VAR 0 6
17871: PUSH
17872: LD_INT 1
17874: EQUAL
17875: AND
17876: OR
17877: IFTRUE 17909
17879: PUSH
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: LD_INT 3
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: IN
17895: NOT
17896: IFFALSE 17908
17898: PUSH
17899: LD_VAR 0 6
17903: PUSH
17904: LD_INT 2
17906: EQUAL
17907: AND
17908: OR
17909: IFFALSE 17919
// mode = 0 ;
17911: LD_ADDR_VAR 0 6
17915: PUSH
17916: LD_INT 0
17918: ST_TO_ADDR
// case mode of 0 :
17919: LD_VAR 0 6
17923: PUSH
17924: LD_INT 0
17926: DOUBLE
17927: EQUAL
17928: IFTRUE 17932
17930: GO 29385
17932: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17933: LD_ADDR_VAR 0 11
17937: PUSH
17938: LD_INT 0
17940: PUSH
17941: LD_INT 0
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: LD_INT 1
17953: NEG
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 1
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: LD_INT 1
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: LD_INT 0
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 1
18002: NEG
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 1
18014: NEG
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 2
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 1
18040: NEG
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: LD_INT 2
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 0
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: NEG
18100: PUSH
18101: LD_INT 2
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18126: LD_ADDR_VAR 0 12
18130: PUSH
18131: LD_INT 0
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: LD_INT 1
18146: NEG
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 1
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 1
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 1
18184: NEG
18185: PUSH
18186: LD_INT 0
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: NEG
18196: PUSH
18197: LD_INT 1
18199: NEG
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 1
18238: NEG
18239: PUSH
18240: LD_INT 1
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 2
18249: NEG
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 2
18260: NEG
18261: PUSH
18262: LD_INT 1
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: NEG
18273: PUSH
18274: LD_INT 1
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 3
18283: NEG
18284: PUSH
18285: LD_INT 0
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: NEG
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18322: LD_ADDR_VAR 0 13
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 1
18342: NEG
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 1
18380: NEG
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: NEG
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: NEG
18404: PUSH
18405: LD_INT 2
18407: NEG
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 2
18425: PUSH
18426: LD_INT 2
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 2
18445: NEG
18446: PUSH
18447: LD_INT 1
18449: NEG
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 2
18457: NEG
18458: PUSH
18459: LD_INT 2
18461: NEG
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: LD_INT 3
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 3
18481: NEG
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 3
18493: NEG
18494: PUSH
18495: LD_INT 3
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18521: LD_ADDR_VAR 0 14
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: LD_INT 0
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: LD_INT 1
18541: NEG
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 1
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: LD_INT 0
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: LD_INT 1
18594: NEG
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: LD_INT 2
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 2
18617: NEG
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: PUSH
18626: LD_INT 1
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: LD_INT 2
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 1
18656: NEG
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 1
18667: NEG
18668: PUSH
18669: LD_INT 3
18671: NEG
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 3
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18717: LD_ADDR_VAR 0 15
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: LD_INT 1
18737: NEG
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 1
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 1
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: LD_INT 0
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: NEG
18787: PUSH
18788: LD_INT 1
18790: NEG
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: PUSH
18799: LD_INT 1
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 0
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 2
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 2
18840: NEG
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 2
18851: NEG
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 2
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 3
18874: PUSH
18875: LD_INT 0
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 3
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18910: LD_ADDR_VAR 0 16
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: LD_INT 0
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: LD_INT 1
18930: NEG
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: LD_INT 0
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: LD_INT 1
18983: NEG
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: LD_INT 2
18995: NEG
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: LD_INT 2
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 2
19033: NEG
19034: PUSH
19035: LD_INT 1
19037: NEG
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 2
19045: NEG
19046: PUSH
19047: LD_INT 2
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 3
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 3
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: LD_INT 3
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19103: LD_ADDR_VAR 0 17
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: LD_INT 1
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: LD_INT 1
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 1
19184: NEG
19185: PUSH
19186: LD_INT 2
19188: NEG
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 1
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 0
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 1
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: NEG
19280: PUSH
19281: LD_INT 0
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 2
19290: NEG
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 2
19302: NEG
19303: PUSH
19304: LD_INT 2
19306: NEG
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19333: LD_ADDR_VAR 0 18
19337: PUSH
19338: LD_INT 0
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 1
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 0
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 1
19391: NEG
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: NEG
19403: PUSH
19404: LD_INT 1
19406: NEG
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: LD_INT 2
19418: NEG
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 0
19426: PUSH
19427: LD_INT 2
19429: NEG
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 1
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 2
19468: PUSH
19469: LD_INT 2
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 1
19478: PUSH
19479: LD_INT 2
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 2
19509: NEG
19510: PUSH
19511: LD_INT 0
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 2
19520: NEG
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: NEG
19533: PUSH
19534: LD_INT 2
19536: NEG
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19563: LD_ADDR_VAR 0 19
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: NEG
19633: PUSH
19634: LD_INT 1
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 2
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 2
19678: PUSH
19679: LD_INT 0
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 2
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 2
19698: PUSH
19699: LD_INT 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PUSH
19709: LD_INT 2
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 2
19739: NEG
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 2
19750: NEG
19751: PUSH
19752: LD_INT 1
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: NEG
19763: PUSH
19764: LD_INT 2
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19793: LD_ADDR_VAR 0 20
19797: PUSH
19798: LD_INT 0
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: LD_INT 1
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 0
19841: PUSH
19842: LD_INT 1
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 1
19851: NEG
19852: PUSH
19853: LD_INT 0
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: NEG
19863: PUSH
19864: LD_INT 1
19866: NEG
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: LD_INT 2
19878: NEG
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 0
19886: PUSH
19887: LD_INT 2
19889: NEG
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: LD_INT 1
19900: NEG
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 2
19908: PUSH
19909: LD_INT 0
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 0
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 1
19958: NEG
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 2
19969: NEG
19970: PUSH
19971: LD_INT 0
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 2
19980: NEG
19981: PUSH
19982: LD_INT 1
19984: NEG
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 2
19992: NEG
19993: PUSH
19994: LD_INT 2
19996: NEG
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20023: LD_ADDR_VAR 0 21
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 1
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: LD_INT 0
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: NEG
20093: PUSH
20094: LD_INT 1
20096: NEG
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: LD_INT 2
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 0
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 1
20130: NEG
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 0
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: LD_INT 2
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: NEG
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: LD_INT 2
20199: NEG
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 2
20210: NEG
20211: PUSH
20212: LD_INT 1
20214: NEG
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 2
20222: NEG
20223: PUSH
20224: LD_INT 2
20226: NEG
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20253: LD_ADDR_VAR 0 22
20257: PUSH
20258: LD_INT 0
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 0
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: NEG
20312: PUSH
20313: LD_INT 0
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: NEG
20323: PUSH
20324: LD_INT 1
20326: NEG
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: LD_INT 2
20338: NEG
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 1
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 0
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 1
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 1
20418: NEG
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: NEG
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 2
20440: NEG
20441: PUSH
20442: LD_INT 1
20444: NEG
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: NEG
20453: PUSH
20454: LD_INT 2
20456: NEG
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20483: LD_ADDR_VAR 0 23
20487: PUSH
20488: LD_INT 0
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 1
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: NEG
20553: PUSH
20554: LD_INT 1
20556: NEG
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: NEG
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: LD_INT 0
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 2
20618: PUSH
20619: LD_INT 2
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 1
20648: NEG
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 2
20659: NEG
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 2
20670: NEG
20671: PUSH
20672: LD_INT 1
20674: NEG
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: LD_INT 2
20686: NEG
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: LD_INT 3
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: LD_INT 3
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20763: LD_ADDR_VAR 0 24
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: LD_INT 1
20783: NEG
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 0
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 1
20832: NEG
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 0
20856: PUSH
20857: LD_INT 2
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: LD_INT 1
20870: NEG
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: LD_INT 2
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 0
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 2
20950: NEG
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: NEG
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: LD_INT 1
20988: NEG
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 3
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21039: LD_ADDR_VAR 0 25
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: NEG
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: LD_INT 1
21108: NEG
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: LD_INT 2
21124: NEG
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 2
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 2
21215: NEG
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: NEG
21227: PUSH
21228: LD_INT 1
21230: NEG
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 2
21238: NEG
21239: PUSH
21240: LD_INT 2
21242: NEG
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 3
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: LD_INT 3
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21313: LD_ADDR_VAR 0 26
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 0
21361: PUSH
21362: LD_INT 1
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 1
21371: NEG
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: LD_INT 1
21386: NEG
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: LD_INT 2
21409: NEG
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 0
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 2
21489: NEG
21490: PUSH
21491: LD_INT 0
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 1
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 3
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: NEG
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 2
21555: NEG
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21589: LD_ADDR_VAR 0 27
21593: PUSH
21594: LD_INT 0
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 1
21609: NEG
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: NEG
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: LD_INT 2
21685: NEG
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: LD_INT 1
21696: NEG
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 2
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 2
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 0
21744: PUSH
21745: LD_INT 2
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: NEG
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 2
21788: NEG
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 3
21822: NEG
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 3
21834: NEG
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21869: LD_ADDR_VAR 0 28
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: LD_INT 0
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: LD_INT 1
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: NEG
21928: PUSH
21929: LD_INT 0
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: LD_INT 1
21942: NEG
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: LD_INT 2
21954: NEG
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 2
21965: NEG
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 1
21976: NEG
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: PUSH
21985: LD_INT 0
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 2
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 2
22045: NEG
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 2
22056: NEG
22057: PUSH
22058: LD_INT 1
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 3
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: LD_INT 3
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 3
22104: NEG
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 3
22116: NEG
22117: PUSH
22118: LD_INT 2
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22151: LD_ADDR_VAR 0 29
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: NEG
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 1
22232: NEG
22233: PUSH
22234: LD_INT 2
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 2
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 2
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PUSH
22294: LD_INT 0
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 2
22329: NEG
22330: PUSH
22331: LD_INT 2
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: LD_INT 3
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: PUSH
22354: LD_INT 1
22356: NEG
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 3
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 3
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 3
22395: NEG
22396: PUSH
22397: LD_INT 2
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22430: LD_ADDR_VAR 0 30
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 1
22488: NEG
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: NEG
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: LD_INT 2
22526: NEG
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 2
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 2
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: LD_INT 1
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: NEG
22597: PUSH
22598: LD_INT 0
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: NEG
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: NEG
22620: PUSH
22621: LD_INT 3
22623: NEG
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 2
22634: NEG
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: NEG
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 3
22673: NEG
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22708: LD_ADDR_VAR 0 31
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: NEG
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: LD_INT 2
22793: NEG
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: PUSH
22802: LD_INT 1
22804: NEG
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 2
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 2
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 0
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 1
22862: NEG
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 2
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 2
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 3
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: LD_INT 2
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22986: LD_ADDR_VAR 0 32
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 0
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 1
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: LD_INT 2
23071: NEG
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 2
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: LD_INT 2
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 2
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: LD_INT 2
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 1
23141: NEG
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: NEG
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 2
23163: NEG
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: NEG
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 3
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 3
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 3
23229: NEG
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23264: LD_ADDR_VAR 0 33
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 1
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 0
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: NEG
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 2
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 2
23430: NEG
23431: PUSH
23432: LD_INT 1
23434: NEG
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 2
23442: NEG
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 3
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 1
23469: NEG
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: LD_INT 3
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 2
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 3
23508: NEG
23509: PUSH
23510: LD_INT 2
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23543: LD_ADDR_VAR 0 34
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 1
23601: NEG
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 2
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: LD_INT 2
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 2
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 1
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 2
23699: NEG
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 2
23710: NEG
23711: PUSH
23712: LD_INT 1
23714: NEG
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 2
23722: NEG
23723: PUSH
23724: LD_INT 2
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 3
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 2
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 3
23757: PUSH
23758: LD_INT 2
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 3
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 3
23788: NEG
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23823: LD_ADDR_VAR 0 35
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: LD_INT 1
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 0
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 2
23904: PUSH
23905: LD_INT 1
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 2
23914: NEG
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23935: LD_ADDR_VAR 0 36
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: NEG
24017: PUSH
24018: LD_INT 2
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24047: LD_ADDR_VAR 0 37
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: NEG
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: LD_INT 1
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: LD_INT 1
24120: NEG
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 1
24139: NEG
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24159: LD_ADDR_VAR 0 38
24163: PUSH
24164: LD_INT 0
24166: PUSH
24167: LD_INT 0
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: PUSH
24185: LD_INT 1
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 0
24207: PUSH
24208: LD_INT 1
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 1
24217: NEG
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 1
24228: NEG
24229: PUSH
24230: LD_INT 1
24232: NEG
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 2
24250: NEG
24251: PUSH
24252: LD_INT 1
24254: NEG
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24271: LD_ADDR_VAR 0 39
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: LD_INT 0
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 1
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: NEG
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24383: LD_ADDR_VAR 0 40
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24495: LD_ADDR_VAR 0 41
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 0
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: LD_INT 1
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: NEG
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: NEG
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 2
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: NEG
24674: PUSH
24675: LD_INT 2
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 3
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 3
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 3
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 3
24738: PUSH
24739: LD_INT 3
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 2
24758: NEG
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 3
24780: NEG
24781: PUSH
24782: LD_INT 1
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 3
24792: NEG
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: NEG
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24845: LD_ADDR_VAR 0 42
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 2
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 1
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 2
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 1
24980: PUSH
24981: LD_INT 2
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: LD_INT 3
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: LD_INT 3
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: LD_INT 3
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 2
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 3
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 3
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 3
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 3
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 3
25142: NEG
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 3
25154: NEG
25155: PUSH
25156: LD_INT 3
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25195: LD_ADDR_VAR 0 43
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 0
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 1
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: NEG
25277: PUSH
25278: LD_INT 2
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: NEG
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 3
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: LD_INT 3
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 3
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 3
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 2
25480: NEG
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: NEG
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 3
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25543: LD_ADDR_VAR 0 44
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 1
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: NEG
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 2
25709: NEG
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: LD_INT 3
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 3
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 3
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 3
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 3
25786: PUSH
25787: LD_INT 3
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 3
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25893: LD_ADDR_VAR 0 45
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: LD_INT 2
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: LD_INT 2
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 3
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 3
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 3
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: LD_INT 2
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: PUSH
26150: LD_INT 3
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 3
26190: NEG
26191: PUSH
26192: LD_INT 2
26194: NEG
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 3
26202: NEG
26203: PUSH
26204: LD_INT 3
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26243: LD_ADDR_VAR 0 46
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: LD_INT 0
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 2
26409: NEG
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: NEG
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: LD_INT 3
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 0
26444: PUSH
26445: LD_INT 3
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 2
26466: PUSH
26467: LD_INT 1
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 3
26477: PUSH
26478: LD_INT 0
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: LD_INT 3
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: LD_INT 3
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 3
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 3
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26591: LD_ADDR_VAR 0 47
26595: PUSH
26596: LD_INT 0
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 2
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: NEG
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: LD_INT 2
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26742: LD_ADDR_VAR 0 48
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: NEG
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 2
26827: NEG
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 2
26838: NEG
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26889: LD_ADDR_VAR 0 49
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: LD_INT 1
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: NEG
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 1
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27033: LD_ADDR_VAR 0 50
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: LD_INT 1
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: PUSH
27122: LD_INT 2
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: LD_INT 2
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27177: LD_ADDR_VAR 0 51
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 1
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 0
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 1
27250: NEG
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: NEG
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27324: LD_ADDR_VAR 0 52
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27475: LD_ADDR_VAR 0 53
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: LD_INT 1
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: LD_INT 0
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 2
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 2
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 2
27651: NEG
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 2
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27705: LD_ADDR_VAR 0 54
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 1
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: NEG
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: LD_INT 2
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 2
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 2
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 0
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: NEG
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: NEG
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27935: LD_ADDR_VAR 0 55
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: LD_INT 1
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: LD_INT 2
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 2
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 2
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 2
28122: NEG
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28165: LD_ADDR_VAR 0 56
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 1
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: NEG
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28395: LD_ADDR_VAR 0 57
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: NEG
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: NEG
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: NEG
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 2
28594: NEG
28595: PUSH
28596: LD_INT 2
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28625: LD_ADDR_VAR 0 58
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: LD_INT 2
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 1
28732: NEG
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 2
28812: NEG
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28855: LD_ADDR_VAR 0 59
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28943: LD_ADDR_VAR 0 60
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 0
28991: PUSH
28992: LD_INT 1
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: LD_INT 0
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29031: LD_ADDR_VAR 0 61
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29119: LD_ADDR_VAR 0 62
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29207: LD_ADDR_VAR 0 63
29211: PUSH
29212: LD_INT 0
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29295: LD_ADDR_VAR 0 64
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// end ; 1 :
29383: GO 35280
29385: LD_INT 1
29387: DOUBLE
29388: EQUAL
29389: IFTRUE 29393
29391: GO 32016
29393: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29394: LD_ADDR_VAR 0 11
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 3
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: LD_INT 3
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29438: LD_ADDR_VAR 0 12
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 3
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 3
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29479: LD_ADDR_VAR 0 13
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 3
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29519: LD_ADDR_VAR 0 14
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29560: LD_ADDR_VAR 0 15
29564: PUSH
29565: LD_INT 2
29567: NEG
29568: PUSH
29569: LD_INT 1
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 3
29578: NEG
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29604: LD_ADDR_VAR 0 16
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 3
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: NEG
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29650: LD_ADDR_VAR 0 17
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: LD_INT 3
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 3
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29694: LD_ADDR_VAR 0 18
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 3
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29735: LD_ADDR_VAR 0 19
29739: PUSH
29740: LD_INT 3
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 3
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 3
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29775: LD_ADDR_VAR 0 20
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 3
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29816: LD_ADDR_VAR 0 21
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: LD_INT 1
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 3
29845: NEG
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29860: LD_ADDR_VAR 0 22
29864: PUSH
29865: LD_INT 2
29867: NEG
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 3
29891: NEG
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29906: LD_ADDR_VAR 0 23
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 3
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 4
29928: NEG
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 3
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29950: LD_ADDR_VAR 0 24
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 3
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 4
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: LIST
29990: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29991: LD_ADDR_VAR 0 25
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 4
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: LD_INT 4
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30031: LD_ADDR_VAR 0 26
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: LD_INT 4
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: LD_INT 3
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: LIST
30071: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30072: LD_ADDR_VAR 0 27
30076: PUSH
30077: LD_INT 3
30079: NEG
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 3
30090: NEG
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 4
30101: NEG
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: LIST
30115: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30116: LD_ADDR_VAR 0 28
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: NEG
30136: PUSH
30137: LD_INT 4
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 4
30147: NEG
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30162: LD_ADDR_VAR 0 29
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 3
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 4
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 4
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 5
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 5
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 4
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 6
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 6
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 5
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30317: LD_ADDR_VAR 0 30
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 3
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 3
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 4
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 4
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 4
30386: PUSH
30387: LD_INT 1
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 5
30397: PUSH
30398: LD_INT 0
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 6
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 6
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30460: LD_ADDR_VAR 0 31
30464: PUSH
30465: LD_INT 3
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 3
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 4
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 4
30507: PUSH
30508: LD_INT 4
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 4
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 5
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: LD_INT 5
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 4
30547: PUSH
30548: LD_INT 5
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 6
30557: PUSH
30558: LD_INT 5
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 6
30567: PUSH
30568: LD_INT 6
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 5
30577: PUSH
30578: LD_INT 6
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30599: LD_ADDR_VAR 0 32
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 4
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: LD_INT 4
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: LD_INT 5
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 6
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 6
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 5
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30742: LD_ADDR_VAR 0 33
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: NEG
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 3
30783: NEG
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 4
30794: NEG
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 4
30805: NEG
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 4
30817: NEG
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 5
30828: NEG
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 5
30839: NEG
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 5
30851: NEG
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 6
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 6
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30897: LD_ADDR_VAR 0 34
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: LD_INT 3
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 4
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 4
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 4
30964: NEG
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: LD_INT 5
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 5
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 5
31000: NEG
31001: PUSH
31002: LD_INT 5
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 5
31012: NEG
31013: PUSH
31014: LD_INT 6
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 6
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 6
31036: NEG
31037: PUSH
31038: LD_INT 6
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31060: LD_ADDR_VAR 0 41
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: LD_INT 3
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31104: LD_ADDR_VAR 0 42
31108: PUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: LIST
31144: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31145: LD_ADDR_VAR 0 43
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 3
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: LD_INT 3
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31185: LD_ADDR_VAR 0 44
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 3
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31226: LD_ADDR_VAR 0 45
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 3
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31270: LD_ADDR_VAR 0 46
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31316: LD_ADDR_VAR 0 47
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: LD_INT 3
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 3
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31349: LD_ADDR_VAR 0 48
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31380: LD_ADDR_VAR 0 49
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31409: LD_ADDR_VAR 0 50
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 3
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31438: LD_ADDR_VAR 0 51
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: NEG
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31469: LD_ADDR_VAR 0 52
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: LD_INT 2
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31502: LD_ADDR_VAR 0 53
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: LD_INT 3
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31546: LD_ADDR_VAR 0 54
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 3
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31587: LD_ADDR_VAR 0 55
31591: PUSH
31592: LD_INT 3
31594: PUSH
31595: LD_INT 2
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: LD_INT 3
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: LD_INT 3
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31627: LD_ADDR_VAR 0 56
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31668: LD_ADDR_VAR 0 57
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31712: LD_ADDR_VAR 0 58
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 3
31731: NEG
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: NEG
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31758: LD_ADDR_VAR 0 59
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31802: LD_ADDR_VAR 0 60
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31843: LD_ADDR_VAR 0 61
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31883: LD_ADDR_VAR 0 62
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31924: LD_ADDR_VAR 0 63
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31968: LD_ADDR_VAR 0 64
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: LD_INT 2
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: NEG
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// end ; 2 :
32014: GO 35280
32016: LD_INT 2
32018: DOUBLE
32019: EQUAL
32020: IFTRUE 32024
32022: GO 35279
32024: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32025: LD_ADDR_VAR 0 29
32029: PUSH
32030: LD_INT 4
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 5
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 5
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 3
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 4
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 4
32155: PUSH
32156: LD_INT 4
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 4
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 4
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: LD_INT 4
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 4
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 4
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 4
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 3
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 5
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 3
32308: NEG
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 3
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: NEG
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 4
32364: NEG
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 4
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 4
32387: NEG
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 2
32399: NEG
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 4
32410: NEG
32411: PUSH
32412: LD_INT 4
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 4
32422: NEG
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: LD_INT 4
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: LD_INT 3
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 4
32458: NEG
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 5
32470: NEG
32471: PUSH
32472: LD_INT 4
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 5
32482: NEG
32483: PUSH
32484: LD_INT 5
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 5
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 5
32506: NEG
32507: PUSH
32508: LD_INT 3
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32563: LD_ADDR_VAR 0 30
32567: PUSH
32568: LD_INT 4
32570: PUSH
32571: LD_INT 4
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 4
32580: PUSH
32581: LD_INT 3
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 5
32590: PUSH
32591: LD_INT 4
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 5
32600: PUSH
32601: LD_INT 5
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 4
32610: PUSH
32611: LD_INT 5
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: LD_INT 3
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 5
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 5
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 3
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 4
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 4
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 4
32753: NEG
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 4
32764: NEG
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: NEG
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 3
32787: NEG
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 4
32798: NEG
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 5
32809: NEG
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 5
32820: NEG
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 5
32832: NEG
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 3
32855: NEG
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: LD_INT 4
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 4
32915: NEG
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 4
32927: NEG
32928: PUSH
32929: LD_INT 4
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 4
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 0
32963: PUSH
32964: LD_INT 4
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 5
32977: NEG
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 4
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 3
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 3
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 4
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: NEG
33031: PUSH
33032: LD_INT 5
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: PUSH
33043: LD_INT 3
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: LD_INT 5
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33110: LD_ADDR_VAR 0 31
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 4
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 3
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: LD_INT 5
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: LD_INT 5
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 3
33210: NEG
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 3
33221: NEG
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: NEG
33234: PUSH
33235: LD_INT 0
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 3
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 4
33266: NEG
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 4
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: NEG
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 4
33312: NEG
33313: PUSH
33314: LD_INT 4
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: LD_INT 5
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 3
33336: NEG
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 3
33348: NEG
33349: PUSH
33350: LD_INT 3
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 4
33360: NEG
33361: PUSH
33362: LD_INT 3
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 5
33372: NEG
33373: PUSH
33374: LD_INT 4
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 5
33384: NEG
33385: PUSH
33386: LD_INT 5
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 3
33396: NEG
33397: PUSH
33398: LD_INT 5
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 5
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: LD_INT 4
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: LD_INT 4
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: LD_INT 4
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 4
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 4
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 5
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 5
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 4
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 3
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 5
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33660: LD_ADDR_VAR 0 32
33664: PUSH
33665: LD_INT 4
33667: NEG
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 4
33678: NEG
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 5
33723: NEG
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 5
33734: NEG
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: LD_INT 2
33750: NEG
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 3
33758: NEG
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 3
33769: NEG
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 3
33781: NEG
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 3
33817: NEG
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 4
33829: NEG
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 4
33841: NEG
33842: PUSH
33843: LD_INT 4
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 2
33853: NEG
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: LD_INT 5
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: PUSH
33900: LD_INT 4
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 3
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 4
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 5
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 3
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: LD_INT 5
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 3
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 4
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 4
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 1
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 4
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 4
34072: PUSH
34073: LD_INT 4
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 4
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 5
34092: PUSH
34093: LD_INT 4
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 5
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 4
34112: PUSH
34113: LD_INT 5
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: LD_INT 4
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 3
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 5
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34207: LD_ADDR_VAR 0 33
34211: PUSH
34212: LD_INT 4
34214: NEG
34215: PUSH
34216: LD_INT 4
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 4
34226: NEG
34227: PUSH
34228: LD_INT 5
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 3
34238: NEG
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: NEG
34251: PUSH
34252: LD_INT 3
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 4
34262: NEG
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 5
34274: NEG
34275: PUSH
34276: LD_INT 4
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 5
34286: NEG
34287: PUSH
34288: LD_INT 5
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 5
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: NEG
34311: PUSH
34312: LD_INT 3
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 4
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 3
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 2
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 3
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 4
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: NEG
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 4
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 4
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 5
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 5
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 3
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 4
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 4
34547: PUSH
34548: LD_INT 4
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 4
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 4
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 4
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 4
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 3
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 4
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 5
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 4
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 5
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34745: LD_ADDR_VAR 0 34
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 4
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 5
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 4
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 3
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: LD_INT 3
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: LD_INT 4
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: LD_INT 5
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: LD_INT 3
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: LD_INT 5
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 4
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 4
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 4
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 5
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 5
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 3
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: LD_INT 3
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 5
35017: PUSH
35018: LD_INT 3
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: LD_INT 5
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 4
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 4
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: LD_INT 4
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: NEG
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 4
35130: NEG
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 4
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 3
35153: NEG
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: NEG
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 4
35175: NEG
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 5
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 5
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 5
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: ST_TO_ADDR
// end ; end ;
35277: GO 35280
35279: POP
// case btype of b_depot , b_warehouse :
35280: LD_VAR 0 1
35284: PUSH
35285: LD_INT 0
35287: DOUBLE
35288: EQUAL
35289: IFTRUE 35299
35291: LD_INT 1
35293: DOUBLE
35294: EQUAL
35295: IFTRUE 35299
35297: GO 35500
35299: POP
// case nation of nation_american :
35300: LD_VAR 0 5
35304: PUSH
35305: LD_INT 1
35307: DOUBLE
35308: EQUAL
35309: IFTRUE 35313
35311: GO 35369
35313: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35314: LD_ADDR_VAR 0 9
35318: PUSH
35319: LD_VAR 0 11
35323: PUSH
35324: LD_VAR 0 12
35328: PUSH
35329: LD_VAR 0 13
35333: PUSH
35334: LD_VAR 0 14
35338: PUSH
35339: LD_VAR 0 15
35343: PUSH
35344: LD_VAR 0 16
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: PUSH
35357: LD_VAR 0 4
35361: PUSH
35362: LD_INT 1
35364: PLUS
35365: ARRAY
35366: ST_TO_ADDR
35367: GO 35498
35369: LD_INT 2
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35377
35375: GO 35433
35377: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35378: LD_ADDR_VAR 0 9
35382: PUSH
35383: LD_VAR 0 17
35387: PUSH
35388: LD_VAR 0 18
35392: PUSH
35393: LD_VAR 0 19
35397: PUSH
35398: LD_VAR 0 20
35402: PUSH
35403: LD_VAR 0 21
35407: PUSH
35408: LD_VAR 0 22
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: PUSH
35421: LD_VAR 0 4
35425: PUSH
35426: LD_INT 1
35428: PLUS
35429: ARRAY
35430: ST_TO_ADDR
35431: GO 35498
35433: LD_INT 3
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 35497
35441: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35442: LD_ADDR_VAR 0 9
35446: PUSH
35447: LD_VAR 0 23
35451: PUSH
35452: LD_VAR 0 24
35456: PUSH
35457: LD_VAR 0 25
35461: PUSH
35462: LD_VAR 0 26
35466: PUSH
35467: LD_VAR 0 27
35471: PUSH
35472: LD_VAR 0 28
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: PUSH
35485: LD_VAR 0 4
35489: PUSH
35490: LD_INT 1
35492: PLUS
35493: ARRAY
35494: ST_TO_ADDR
35495: GO 35498
35497: POP
35498: GO 36053
35500: LD_INT 2
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35514
35506: LD_INT 3
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35570
35514: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35515: LD_ADDR_VAR 0 9
35519: PUSH
35520: LD_VAR 0 29
35524: PUSH
35525: LD_VAR 0 30
35529: PUSH
35530: LD_VAR 0 31
35534: PUSH
35535: LD_VAR 0 32
35539: PUSH
35540: LD_VAR 0 33
35544: PUSH
35545: LD_VAR 0 34
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: PUSH
35558: LD_VAR 0 4
35562: PUSH
35563: LD_INT 1
35565: PLUS
35566: ARRAY
35567: ST_TO_ADDR
35568: GO 36053
35570: LD_INT 16
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35632
35576: LD_INT 17
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35632
35582: LD_INT 18
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35632
35588: LD_INT 19
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35632
35594: LD_INT 22
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35632
35600: LD_INT 20
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35632
35606: LD_INT 21
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35632
35612: LD_INT 23
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35632
35618: LD_INT 24
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35632
35624: LD_INT 25
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35632
35630: GO 35688
35632: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35633: LD_ADDR_VAR 0 9
35637: PUSH
35638: LD_VAR 0 35
35642: PUSH
35643: LD_VAR 0 36
35647: PUSH
35648: LD_VAR 0 37
35652: PUSH
35653: LD_VAR 0 38
35657: PUSH
35658: LD_VAR 0 39
35662: PUSH
35663: LD_VAR 0 40
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: PUSH
35676: LD_VAR 0 4
35680: PUSH
35681: LD_INT 1
35683: PLUS
35684: ARRAY
35685: ST_TO_ADDR
35686: GO 36053
35688: LD_INT 6
35690: DOUBLE
35691: EQUAL
35692: IFTRUE 35744
35694: LD_INT 7
35696: DOUBLE
35697: EQUAL
35698: IFTRUE 35744
35700: LD_INT 8
35702: DOUBLE
35703: EQUAL
35704: IFTRUE 35744
35706: LD_INT 13
35708: DOUBLE
35709: EQUAL
35710: IFTRUE 35744
35712: LD_INT 12
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35744
35718: LD_INT 15
35720: DOUBLE
35721: EQUAL
35722: IFTRUE 35744
35724: LD_INT 11
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35744
35730: LD_INT 14
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35744
35736: LD_INT 10
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35744
35742: GO 35800
35744: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35745: LD_ADDR_VAR 0 9
35749: PUSH
35750: LD_VAR 0 41
35754: PUSH
35755: LD_VAR 0 42
35759: PUSH
35760: LD_VAR 0 43
35764: PUSH
35765: LD_VAR 0 44
35769: PUSH
35770: LD_VAR 0 45
35774: PUSH
35775: LD_VAR 0 46
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: PUSH
35788: LD_VAR 0 4
35792: PUSH
35793: LD_INT 1
35795: PLUS
35796: ARRAY
35797: ST_TO_ADDR
35798: GO 36053
35800: LD_INT 36
35802: DOUBLE
35803: EQUAL
35804: IFTRUE 35808
35806: GO 35864
35808: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35809: LD_ADDR_VAR 0 9
35813: PUSH
35814: LD_VAR 0 47
35818: PUSH
35819: LD_VAR 0 48
35823: PUSH
35824: LD_VAR 0 49
35828: PUSH
35829: LD_VAR 0 50
35833: PUSH
35834: LD_VAR 0 51
35838: PUSH
35839: LD_VAR 0 52
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: LD_VAR 0 4
35856: PUSH
35857: LD_INT 1
35859: PLUS
35860: ARRAY
35861: ST_TO_ADDR
35862: GO 36053
35864: LD_INT 4
35866: DOUBLE
35867: EQUAL
35868: IFTRUE 35890
35870: LD_INT 5
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35890
35876: LD_INT 34
35878: DOUBLE
35879: EQUAL
35880: IFTRUE 35890
35882: LD_INT 37
35884: DOUBLE
35885: EQUAL
35886: IFTRUE 35890
35888: GO 35946
35890: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35891: LD_ADDR_VAR 0 9
35895: PUSH
35896: LD_VAR 0 53
35900: PUSH
35901: LD_VAR 0 54
35905: PUSH
35906: LD_VAR 0 55
35910: PUSH
35911: LD_VAR 0 56
35915: PUSH
35916: LD_VAR 0 57
35920: PUSH
35921: LD_VAR 0 58
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: PUSH
35934: LD_VAR 0 4
35938: PUSH
35939: LD_INT 1
35941: PLUS
35942: ARRAY
35943: ST_TO_ADDR
35944: GO 36053
35946: LD_INT 31
35948: DOUBLE
35949: EQUAL
35950: IFTRUE 35996
35952: LD_INT 32
35954: DOUBLE
35955: EQUAL
35956: IFTRUE 35996
35958: LD_INT 33
35960: DOUBLE
35961: EQUAL
35962: IFTRUE 35996
35964: LD_INT 27
35966: DOUBLE
35967: EQUAL
35968: IFTRUE 35996
35970: LD_INT 26
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35996
35976: LD_INT 28
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 35996
35982: LD_INT 29
35984: DOUBLE
35985: EQUAL
35986: IFTRUE 35996
35988: LD_INT 30
35990: DOUBLE
35991: EQUAL
35992: IFTRUE 35996
35994: GO 36052
35996: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35997: LD_ADDR_VAR 0 9
36001: PUSH
36002: LD_VAR 0 59
36006: PUSH
36007: LD_VAR 0 60
36011: PUSH
36012: LD_VAR 0 61
36016: PUSH
36017: LD_VAR 0 62
36021: PUSH
36022: LD_VAR 0 63
36026: PUSH
36027: LD_VAR 0 64
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: LD_VAR 0 4
36044: PUSH
36045: LD_INT 1
36047: PLUS
36048: ARRAY
36049: ST_TO_ADDR
36050: GO 36053
36052: POP
// temp_list2 = [ ] ;
36053: LD_ADDR_VAR 0 10
36057: PUSH
36058: EMPTY
36059: ST_TO_ADDR
// for i in temp_list do
36060: LD_ADDR_VAR 0 8
36064: PUSH
36065: LD_VAR 0 9
36069: PUSH
36070: FOR_IN
36071: IFFALSE 36123
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36073: LD_ADDR_VAR 0 10
36077: PUSH
36078: LD_VAR 0 10
36082: PUSH
36083: LD_VAR 0 8
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PUSH
36092: LD_VAR 0 2
36096: PLUS
36097: PUSH
36098: LD_VAR 0 8
36102: PUSH
36103: LD_INT 2
36105: ARRAY
36106: PUSH
36107: LD_VAR 0 3
36111: PLUS
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: ADD
36120: ST_TO_ADDR
36121: GO 36070
36123: POP
36124: POP
// result = temp_list2 ;
36125: LD_ADDR_VAR 0 7
36129: PUSH
36130: LD_VAR 0 10
36134: ST_TO_ADDR
// end ;
36135: LD_VAR 0 7
36139: RET
// export function EnemyInRange ( unit , dist ) ; begin
36140: LD_INT 0
36142: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36143: LD_ADDR_VAR 0 3
36147: PUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 255
36157: PPUSH
36158: LD_VAR 0 1
36162: PPUSH
36163: CALL_OW 250
36167: PPUSH
36168: LD_VAR 0 1
36172: PPUSH
36173: CALL_OW 251
36177: PPUSH
36178: LD_VAR 0 2
36182: PPUSH
36183: CALL 9397 0 4
36187: PUSH
36188: LD_INT 4
36190: ARRAY
36191: ST_TO_ADDR
// end ;
36192: LD_VAR 0 3
36196: RET
// export function PlayerSeeMe ( unit ) ; begin
36197: LD_INT 0
36199: PPUSH
// result := See ( your_side , unit ) ;
36200: LD_ADDR_VAR 0 2
36204: PUSH
36205: LD_OWVAR 2
36209: PPUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: CALL_OW 292
36219: ST_TO_ADDR
// end ;
36220: LD_VAR 0 2
36224: RET
// export function ReverseDir ( unit ) ; begin
36225: LD_INT 0
36227: PPUSH
// if not unit then
36228: LD_VAR 0 1
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36260
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36237: LD_ADDR_VAR 0 2
36241: PUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 254
36251: PUSH
36252: LD_INT 3
36254: PLUS
36255: PUSH
36256: LD_INT 6
36258: MOD
36259: ST_TO_ADDR
// end ;
36260: LD_VAR 0 2
36264: RET
// export function ReverseArray ( array ) ; var i ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
// if not array then
36269: LD_VAR 0 1
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36333
// result := [ ] ;
36278: LD_ADDR_VAR 0 2
36282: PUSH
36283: EMPTY
36284: ST_TO_ADDR
// for i := array downto 1 do
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: DOUBLE
36291: LD_VAR 0 1
36295: INC
36296: ST_TO_ADDR
36297: LD_INT 1
36299: PUSH
36300: FOR_DOWNTO
36301: IFFALSE 36331
// result := Join ( result , array [ i ] ) ;
36303: LD_ADDR_VAR 0 2
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: LD_VAR 0 1
36317: PUSH
36318: LD_VAR 0 3
36322: ARRAY
36323: PPUSH
36324: CALL 41175 0 2
36328: ST_TO_ADDR
36329: GO 36300
36331: POP
36332: POP
// end ;
36333: LD_VAR 0 2
36337: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36338: LD_INT 0
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
// if not unit or not hexes then
36346: LD_VAR 0 1
36350: NOT
36351: IFTRUE 36360
36353: PUSH
36354: LD_VAR 0 2
36358: NOT
36359: OR
36360: IFFALSE 36364
// exit ;
36362: GO 36487
// dist := 9999 ;
36364: LD_ADDR_VAR 0 5
36368: PUSH
36369: LD_INT 9999
36371: ST_TO_ADDR
// for i = 1 to hexes do
36372: LD_ADDR_VAR 0 4
36376: PUSH
36377: DOUBLE
36378: LD_INT 1
36380: DEC
36381: ST_TO_ADDR
36382: LD_VAR 0 2
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36475
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36390: LD_ADDR_VAR 0 6
36394: PUSH
36395: LD_VAR 0 1
36399: PPUSH
36400: LD_VAR 0 2
36404: PUSH
36405: LD_VAR 0 4
36409: ARRAY
36410: PUSH
36411: LD_INT 1
36413: ARRAY
36414: PPUSH
36415: LD_VAR 0 2
36419: PUSH
36420: LD_VAR 0 4
36424: ARRAY
36425: PUSH
36426: LD_INT 2
36428: ARRAY
36429: PPUSH
36430: CALL_OW 297
36434: ST_TO_ADDR
// if tdist < dist then
36435: LD_VAR 0 6
36439: PUSH
36440: LD_VAR 0 5
36444: LESS
36445: IFFALSE 36473
// begin hex := hexes [ i ] ;
36447: LD_ADDR_VAR 0 8
36451: PUSH
36452: LD_VAR 0 2
36456: PUSH
36457: LD_VAR 0 4
36461: ARRAY
36462: ST_TO_ADDR
// dist := tdist ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 6
36472: ST_TO_ADDR
// end ; end ;
36473: GO 36387
36475: POP
36476: POP
// result := hex ;
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_VAR 0 8
36486: ST_TO_ADDR
// end ;
36487: LD_VAR 0 3
36491: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36492: LD_INT 0
36494: PPUSH
36495: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36496: LD_VAR 0 1
36500: NOT
36501: IFTRUE 36540
36503: PUSH
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 21
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 23
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PPUSH
36533: CALL_OW 69
36537: IN
36538: NOT
36539: OR
36540: IFFALSE 36544
// exit ;
36542: GO 36591
// for i = 1 to 3 do
36544: LD_ADDR_VAR 0 3
36548: PUSH
36549: DOUBLE
36550: LD_INT 1
36552: DEC
36553: ST_TO_ADDR
36554: LD_INT 3
36556: PUSH
36557: FOR_TO
36558: IFFALSE 36589
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36560: LD_VAR 0 1
36564: PPUSH
36565: CALL_OW 250
36569: PPUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 251
36579: PPUSH
36580: LD_INT 1
36582: PPUSH
36583: CALL_OW 453
36587: GO 36557
36589: POP
36590: POP
// end ;
36591: LD_VAR 0 2
36595: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36596: LD_INT 0
36598: PPUSH
36599: PPUSH
36600: PPUSH
36601: PPUSH
36602: PPUSH
36603: PPUSH
// if not unit or not enemy_unit then
36604: LD_VAR 0 1
36608: NOT
36609: IFTRUE 36618
36611: PUSH
36612: LD_VAR 0 2
36616: NOT
36617: OR
36618: IFFALSE 36622
// exit ;
36620: GO 37093
// if GetLives ( i ) < 250 then
36622: LD_VAR 0 4
36626: PPUSH
36627: CALL_OW 256
36631: PUSH
36632: LD_INT 250
36634: LESS
36635: IFFALSE 36648
// begin ComAutodestruct ( i ) ;
36637: LD_VAR 0 4
36641: PPUSH
36642: CALL 36492 0 1
// exit ;
36646: GO 37093
// end ; x := GetX ( enemy_unit ) ;
36648: LD_ADDR_VAR 0 7
36652: PUSH
36653: LD_VAR 0 2
36657: PPUSH
36658: CALL_OW 250
36662: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36663: LD_ADDR_VAR 0 8
36667: PUSH
36668: LD_VAR 0 2
36672: PPUSH
36673: CALL_OW 251
36677: ST_TO_ADDR
// if not x or not y then
36678: LD_VAR 0 7
36682: NOT
36683: IFTRUE 36692
36685: PUSH
36686: LD_VAR 0 8
36690: NOT
36691: OR
36692: IFFALSE 36696
// exit ;
36694: GO 37093
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36696: LD_ADDR_VAR 0 6
36700: PUSH
36701: LD_VAR 0 7
36705: PPUSH
36706: LD_INT 0
36708: PPUSH
36709: LD_INT 4
36711: PPUSH
36712: CALL_OW 272
36716: PUSH
36717: LD_VAR 0 8
36721: PPUSH
36722: LD_INT 0
36724: PPUSH
36725: LD_INT 4
36727: PPUSH
36728: CALL_OW 273
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_VAR 0 7
36741: PPUSH
36742: LD_INT 1
36744: PPUSH
36745: LD_INT 4
36747: PPUSH
36748: CALL_OW 272
36752: PUSH
36753: LD_VAR 0 8
36757: PPUSH
36758: LD_INT 1
36760: PPUSH
36761: LD_INT 4
36763: PPUSH
36764: CALL_OW 273
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_VAR 0 7
36777: PPUSH
36778: LD_INT 2
36780: PPUSH
36781: LD_INT 4
36783: PPUSH
36784: CALL_OW 272
36788: PUSH
36789: LD_VAR 0 8
36793: PPUSH
36794: LD_INT 2
36796: PPUSH
36797: LD_INT 4
36799: PPUSH
36800: CALL_OW 273
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_VAR 0 7
36813: PPUSH
36814: LD_INT 3
36816: PPUSH
36817: LD_INT 4
36819: PPUSH
36820: CALL_OW 272
36824: PUSH
36825: LD_VAR 0 8
36829: PPUSH
36830: LD_INT 3
36832: PPUSH
36833: LD_INT 4
36835: PPUSH
36836: CALL_OW 273
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_VAR 0 7
36849: PPUSH
36850: LD_INT 4
36852: PPUSH
36853: LD_INT 4
36855: PPUSH
36856: CALL_OW 272
36860: PUSH
36861: LD_VAR 0 8
36865: PPUSH
36866: LD_INT 4
36868: PPUSH
36869: LD_INT 4
36871: PPUSH
36872: CALL_OW 273
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_VAR 0 7
36885: PPUSH
36886: LD_INT 5
36888: PPUSH
36889: LD_INT 4
36891: PPUSH
36892: CALL_OW 272
36896: PUSH
36897: LD_VAR 0 8
36901: PPUSH
36902: LD_INT 5
36904: PPUSH
36905: LD_INT 4
36907: PPUSH
36908: CALL_OW 273
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// for i = tmp downto 1 do
36925: LD_ADDR_VAR 0 4
36929: PUSH
36930: DOUBLE
36931: LD_VAR 0 6
36935: INC
36936: ST_TO_ADDR
36937: LD_INT 1
36939: PUSH
36940: FOR_DOWNTO
36941: IFFALSE 37044
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36943: LD_VAR 0 6
36947: PUSH
36948: LD_VAR 0 4
36952: ARRAY
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: PPUSH
36958: LD_VAR 0 6
36962: PUSH
36963: LD_VAR 0 4
36967: ARRAY
36968: PUSH
36969: LD_INT 2
36971: ARRAY
36972: PPUSH
36973: CALL_OW 488
36977: NOT
36978: IFTRUE 37020
36980: PUSH
36981: LD_VAR 0 6
36985: PUSH
36986: LD_VAR 0 4
36990: ARRAY
36991: PUSH
36992: LD_INT 1
36994: ARRAY
36995: PPUSH
36996: LD_VAR 0 6
37000: PUSH
37001: LD_VAR 0 4
37005: ARRAY
37006: PUSH
37007: LD_INT 2
37009: ARRAY
37010: PPUSH
37011: CALL_OW 428
37015: PUSH
37016: LD_INT 0
37018: NONEQUAL
37019: OR
37020: IFFALSE 37042
// tmp := Delete ( tmp , i ) ;
37022: LD_ADDR_VAR 0 6
37026: PUSH
37027: LD_VAR 0 6
37031: PPUSH
37032: LD_VAR 0 4
37036: PPUSH
37037: CALL_OW 3
37041: ST_TO_ADDR
37042: GO 36940
37044: POP
37045: POP
// j := GetClosestHex ( unit , tmp ) ;
37046: LD_ADDR_VAR 0 5
37050: PUSH
37051: LD_VAR 0 1
37055: PPUSH
37056: LD_VAR 0 6
37060: PPUSH
37061: CALL 36338 0 2
37065: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37066: LD_VAR 0 1
37070: PPUSH
37071: LD_VAR 0 5
37075: PUSH
37076: LD_INT 1
37078: ARRAY
37079: PPUSH
37080: LD_VAR 0 5
37084: PUSH
37085: LD_INT 2
37087: ARRAY
37088: PPUSH
37089: CALL_OW 111
// end ;
37093: LD_VAR 0 3
37097: RET
// export function PrepareApemanSoldier ( ) ; begin
37098: LD_INT 0
37100: PPUSH
// uc_nation := 0 ;
37101: LD_ADDR_OWVAR 21
37105: PUSH
37106: LD_INT 0
37108: ST_TO_ADDR
// hc_sex := sex_male ;
37109: LD_ADDR_OWVAR 27
37113: PUSH
37114: LD_INT 1
37116: ST_TO_ADDR
// hc_name :=  ;
37117: LD_ADDR_OWVAR 26
37121: PUSH
37122: LD_STRING 
37124: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37125: LD_ADDR_OWVAR 28
37129: PUSH
37130: LD_INT 15
37132: ST_TO_ADDR
// hc_gallery :=  ;
37133: LD_ADDR_OWVAR 33
37137: PUSH
37138: LD_STRING 
37140: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37141: LD_ADDR_OWVAR 31
37145: PUSH
37146: LD_INT 0
37148: PPUSH
37149: LD_INT 3
37151: PPUSH
37152: CALL_OW 12
37156: PUSH
37157: LD_INT 0
37159: PPUSH
37160: LD_INT 3
37162: PPUSH
37163: CALL_OW 12
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37180: LD_ADDR_OWVAR 29
37184: PUSH
37185: LD_INT 12
37187: PUSH
37188: LD_INT 12
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: ST_TO_ADDR
// end ;
37195: LD_VAR 0 1
37199: RET
// export function PrepareApemanEngineer ( ) ; begin
37200: LD_INT 0
37202: PPUSH
// uc_nation := 0 ;
37203: LD_ADDR_OWVAR 21
37207: PUSH
37208: LD_INT 0
37210: ST_TO_ADDR
// hc_sex := sex_male ;
37211: LD_ADDR_OWVAR 27
37215: PUSH
37216: LD_INT 1
37218: ST_TO_ADDR
// hc_name :=  ;
37219: LD_ADDR_OWVAR 26
37223: PUSH
37224: LD_STRING 
37226: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37227: LD_ADDR_OWVAR 28
37231: PUSH
37232: LD_INT 16
37234: ST_TO_ADDR
// hc_gallery :=  ;
37235: LD_ADDR_OWVAR 33
37239: PUSH
37240: LD_STRING 
37242: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37243: LD_ADDR_OWVAR 31
37247: PUSH
37248: LD_INT 0
37250: PPUSH
37251: LD_INT 3
37253: PPUSH
37254: CALL_OW 12
37258: PUSH
37259: LD_INT 0
37261: PPUSH
37262: LD_INT 3
37264: PPUSH
37265: CALL_OW 12
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37282: LD_ADDR_OWVAR 29
37286: PUSH
37287: LD_INT 12
37289: PUSH
37290: LD_INT 12
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// end ;
37297: LD_VAR 0 1
37301: RET
// export function PrepareApeman ( agressivity ) ; begin
37302: LD_INT 0
37304: PPUSH
// uc_side := 0 ;
37305: LD_ADDR_OWVAR 20
37309: PUSH
37310: LD_INT 0
37312: ST_TO_ADDR
// uc_nation := 0 ;
37313: LD_ADDR_OWVAR 21
37317: PUSH
37318: LD_INT 0
37320: ST_TO_ADDR
// hc_sex := sex_male ;
37321: LD_ADDR_OWVAR 27
37325: PUSH
37326: LD_INT 1
37328: ST_TO_ADDR
// hc_class := class_apeman ;
37329: LD_ADDR_OWVAR 28
37333: PUSH
37334: LD_INT 12
37336: ST_TO_ADDR
// hc_gallery :=  ;
37337: LD_ADDR_OWVAR 33
37341: PUSH
37342: LD_STRING 
37344: ST_TO_ADDR
// hc_name :=  ;
37345: LD_ADDR_OWVAR 26
37349: PUSH
37350: LD_STRING 
37352: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37353: LD_ADDR_OWVAR 29
37357: PUSH
37358: LD_INT 12
37360: PUSH
37361: LD_INT 12
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: ST_TO_ADDR
// if agressivity = 0 then
37368: LD_VAR 0 1
37372: PUSH
37373: LD_INT 0
37375: EQUAL
37376: IFFALSE 37388
// hc_agressivity := 0 else
37378: LD_ADDR_OWVAR 35
37382: PUSH
37383: LD_INT 0
37385: ST_TO_ADDR
37386: GO 37409
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37388: LD_ADDR_OWVAR 35
37392: PUSH
37393: LD_VAR 0 1
37397: NEG
37398: PPUSH
37399: LD_VAR 0 1
37403: PPUSH
37404: CALL_OW 12
37408: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37409: LD_ADDR_OWVAR 31
37413: PUSH
37414: LD_INT 0
37416: PPUSH
37417: LD_INT 3
37419: PPUSH
37420: CALL_OW 12
37424: PUSH
37425: LD_INT 0
37427: PPUSH
37428: LD_INT 3
37430: PPUSH
37431: CALL_OW 12
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// end ;
37448: LD_VAR 0 2
37452: RET
// export function PrepareTiger ( agressivity ) ; begin
37453: LD_INT 0
37455: PPUSH
// uc_side := 0 ;
37456: LD_ADDR_OWVAR 20
37460: PUSH
37461: LD_INT 0
37463: ST_TO_ADDR
// uc_nation := 0 ;
37464: LD_ADDR_OWVAR 21
37468: PUSH
37469: LD_INT 0
37471: ST_TO_ADDR
// InitHc ;
37472: CALL_OW 19
// hc_class := class_tiger ;
37476: LD_ADDR_OWVAR 28
37480: PUSH
37481: LD_INT 14
37483: ST_TO_ADDR
// hc_gallery :=  ;
37484: LD_ADDR_OWVAR 33
37488: PUSH
37489: LD_STRING 
37491: ST_TO_ADDR
// hc_name :=  ;
37492: LD_ADDR_OWVAR 26
37496: PUSH
37497: LD_STRING 
37499: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37500: LD_ADDR_OWVAR 35
37504: PUSH
37505: LD_VAR 0 1
37509: NEG
37510: PPUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: CALL_OW 12
37520: ST_TO_ADDR
// end ;
37521: LD_VAR 0 2
37525: RET
// export function PrepareEnchidna ( ) ; begin
37526: LD_INT 0
37528: PPUSH
// uc_side := 0 ;
37529: LD_ADDR_OWVAR 20
37533: PUSH
37534: LD_INT 0
37536: ST_TO_ADDR
// uc_nation := 0 ;
37537: LD_ADDR_OWVAR 21
37541: PUSH
37542: LD_INT 0
37544: ST_TO_ADDR
// InitHc ;
37545: CALL_OW 19
// hc_class := class_baggie ;
37549: LD_ADDR_OWVAR 28
37553: PUSH
37554: LD_INT 13
37556: ST_TO_ADDR
// hc_gallery :=  ;
37557: LD_ADDR_OWVAR 33
37561: PUSH
37562: LD_STRING 
37564: ST_TO_ADDR
// hc_name :=  ;
37565: LD_ADDR_OWVAR 26
37569: PUSH
37570: LD_STRING 
37572: ST_TO_ADDR
// end ;
37573: LD_VAR 0 1
37577: RET
// export function PrepareFrog ( ) ; begin
37578: LD_INT 0
37580: PPUSH
// uc_side := 0 ;
37581: LD_ADDR_OWVAR 20
37585: PUSH
37586: LD_INT 0
37588: ST_TO_ADDR
// uc_nation := 0 ;
37589: LD_ADDR_OWVAR 21
37593: PUSH
37594: LD_INT 0
37596: ST_TO_ADDR
// InitHc ;
37597: CALL_OW 19
// hc_class := class_frog ;
37601: LD_ADDR_OWVAR 28
37605: PUSH
37606: LD_INT 19
37608: ST_TO_ADDR
// hc_gallery :=  ;
37609: LD_ADDR_OWVAR 33
37613: PUSH
37614: LD_STRING 
37616: ST_TO_ADDR
// hc_name :=  ;
37617: LD_ADDR_OWVAR 26
37621: PUSH
37622: LD_STRING 
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 1
37629: RET
// export function PrepareFish ( ) ; begin
37630: LD_INT 0
37632: PPUSH
// uc_side := 0 ;
37633: LD_ADDR_OWVAR 20
37637: PUSH
37638: LD_INT 0
37640: ST_TO_ADDR
// uc_nation := 0 ;
37641: LD_ADDR_OWVAR 21
37645: PUSH
37646: LD_INT 0
37648: ST_TO_ADDR
// InitHc ;
37649: CALL_OW 19
// hc_class := class_fish ;
37653: LD_ADDR_OWVAR 28
37657: PUSH
37658: LD_INT 20
37660: ST_TO_ADDR
// hc_gallery :=  ;
37661: LD_ADDR_OWVAR 33
37665: PUSH
37666: LD_STRING 
37668: ST_TO_ADDR
// hc_name :=  ;
37669: LD_ADDR_OWVAR 26
37673: PUSH
37674: LD_STRING 
37676: ST_TO_ADDR
// end ;
37677: LD_VAR 0 1
37681: RET
// export function PrepareBird ( ) ; begin
37682: LD_INT 0
37684: PPUSH
// uc_side := 0 ;
37685: LD_ADDR_OWVAR 20
37689: PUSH
37690: LD_INT 0
37692: ST_TO_ADDR
// uc_nation := 0 ;
37693: LD_ADDR_OWVAR 21
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// InitHc ;
37701: CALL_OW 19
// hc_class := class_phororhacos ;
37705: LD_ADDR_OWVAR 28
37709: PUSH
37710: LD_INT 18
37712: ST_TO_ADDR
// hc_gallery :=  ;
37713: LD_ADDR_OWVAR 33
37717: PUSH
37718: LD_STRING 
37720: ST_TO_ADDR
// hc_name :=  ;
37721: LD_ADDR_OWVAR 26
37725: PUSH
37726: LD_STRING 
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 1
37733: RET
// export function PrepareHorse ( ) ; begin
37734: LD_INT 0
37736: PPUSH
// uc_side := 0 ;
37737: LD_ADDR_OWVAR 20
37741: PUSH
37742: LD_INT 0
37744: ST_TO_ADDR
// uc_nation := 0 ;
37745: LD_ADDR_OWVAR 21
37749: PUSH
37750: LD_INT 0
37752: ST_TO_ADDR
// InitHc ;
37753: CALL_OW 19
// hc_class := class_horse ;
37757: LD_ADDR_OWVAR 28
37761: PUSH
37762: LD_INT 21
37764: ST_TO_ADDR
// hc_gallery :=  ;
37765: LD_ADDR_OWVAR 33
37769: PUSH
37770: LD_STRING 
37772: ST_TO_ADDR
// hc_name :=  ;
37773: LD_ADDR_OWVAR 26
37777: PUSH
37778: LD_STRING 
37780: ST_TO_ADDR
// end ;
37781: LD_VAR 0 1
37785: RET
// export function PrepareMastodont ( ) ; begin
37786: LD_INT 0
37788: PPUSH
// uc_side := 0 ;
37789: LD_ADDR_OWVAR 20
37793: PUSH
37794: LD_INT 0
37796: ST_TO_ADDR
// uc_nation := 0 ;
37797: LD_ADDR_OWVAR 21
37801: PUSH
37802: LD_INT 0
37804: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37805: LD_ADDR_OWVAR 37
37809: PUSH
37810: LD_INT 31
37812: ST_TO_ADDR
// vc_control := control_rider ;
37813: LD_ADDR_OWVAR 38
37817: PUSH
37818: LD_INT 4
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 1
37825: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
37830: PPUSH
// uc_side = 0 ;
37831: LD_ADDR_OWVAR 20
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// uc_nation = 0 ;
37839: LD_ADDR_OWVAR 21
37843: PUSH
37844: LD_INT 0
37846: ST_TO_ADDR
// InitHc_All ( ) ;
37847: CALL_OW 584
// InitVc ;
37851: CALL_OW 20
// if mastodonts then
37855: LD_VAR 0 6
37859: IFFALSE 37926
// for i = 1 to mastodonts do
37861: LD_ADDR_VAR 0 11
37865: PUSH
37866: DOUBLE
37867: LD_INT 1
37869: DEC
37870: ST_TO_ADDR
37871: LD_VAR 0 6
37875: PUSH
37876: FOR_TO
37877: IFFALSE 37924
// begin vc_chassis := 31 ;
37879: LD_ADDR_OWVAR 37
37883: PUSH
37884: LD_INT 31
37886: ST_TO_ADDR
// vc_control := control_rider ;
37887: LD_ADDR_OWVAR 38
37891: PUSH
37892: LD_INT 4
37894: ST_TO_ADDR
// animal := CreateVehicle ;
37895: LD_ADDR_VAR 0 12
37899: PUSH
37900: CALL_OW 45
37904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37905: LD_VAR 0 12
37909: PPUSH
37910: LD_VAR 0 8
37914: PPUSH
37915: LD_INT 0
37917: PPUSH
37918: CALL 40068 0 3
// end ;
37922: GO 37876
37924: POP
37925: POP
// if horses then
37926: LD_VAR 0 5
37930: IFFALSE 37997
// for i = 1 to horses do
37932: LD_ADDR_VAR 0 11
37936: PUSH
37937: DOUBLE
37938: LD_INT 1
37940: DEC
37941: ST_TO_ADDR
37942: LD_VAR 0 5
37946: PUSH
37947: FOR_TO
37948: IFFALSE 37995
// begin hc_class := 21 ;
37950: LD_ADDR_OWVAR 28
37954: PUSH
37955: LD_INT 21
37957: ST_TO_ADDR
// hc_gallery :=  ;
37958: LD_ADDR_OWVAR 33
37962: PUSH
37963: LD_STRING 
37965: ST_TO_ADDR
// animal := CreateHuman ;
37966: LD_ADDR_VAR 0 12
37970: PUSH
37971: CALL_OW 44
37975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37976: LD_VAR 0 12
37980: PPUSH
37981: LD_VAR 0 8
37985: PPUSH
37986: LD_INT 0
37988: PPUSH
37989: CALL 40068 0 3
// end ;
37993: GO 37947
37995: POP
37996: POP
// if birds then
37997: LD_VAR 0 1
38001: IFFALSE 38068
// for i = 1 to birds do
38003: LD_ADDR_VAR 0 11
38007: PUSH
38008: DOUBLE
38009: LD_INT 1
38011: DEC
38012: ST_TO_ADDR
38013: LD_VAR 0 1
38017: PUSH
38018: FOR_TO
38019: IFFALSE 38066
// begin hc_class := 18 ;
38021: LD_ADDR_OWVAR 28
38025: PUSH
38026: LD_INT 18
38028: ST_TO_ADDR
// hc_gallery =  ;
38029: LD_ADDR_OWVAR 33
38033: PUSH
38034: LD_STRING 
38036: ST_TO_ADDR
// animal := CreateHuman ;
38037: LD_ADDR_VAR 0 12
38041: PUSH
38042: CALL_OW 44
38046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38047: LD_VAR 0 12
38051: PPUSH
38052: LD_VAR 0 8
38056: PPUSH
38057: LD_INT 0
38059: PPUSH
38060: CALL 40068 0 3
// end ;
38064: GO 38018
38066: POP
38067: POP
// if tigers then
38068: LD_VAR 0 2
38072: IFFALSE 38156
// for i = 1 to tigers do
38074: LD_ADDR_VAR 0 11
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_VAR 0 2
38088: PUSH
38089: FOR_TO
38090: IFFALSE 38154
// begin hc_class = class_tiger ;
38092: LD_ADDR_OWVAR 28
38096: PUSH
38097: LD_INT 14
38099: ST_TO_ADDR
// hc_gallery =  ;
38100: LD_ADDR_OWVAR 33
38104: PUSH
38105: LD_STRING 
38107: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38108: LD_ADDR_OWVAR 35
38112: PUSH
38113: LD_INT 7
38115: NEG
38116: PPUSH
38117: LD_INT 7
38119: PPUSH
38120: CALL_OW 12
38124: ST_TO_ADDR
// animal := CreateHuman ;
38125: LD_ADDR_VAR 0 12
38129: PUSH
38130: CALL_OW 44
38134: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38135: LD_VAR 0 12
38139: PPUSH
38140: LD_VAR 0 8
38144: PPUSH
38145: LD_INT 0
38147: PPUSH
38148: CALL 40068 0 3
// end ;
38152: GO 38089
38154: POP
38155: POP
// if apemans then
38156: LD_VAR 0 3
38160: IFFALSE 38283
// for i = 1 to apemans do
38162: LD_ADDR_VAR 0 11
38166: PUSH
38167: DOUBLE
38168: LD_INT 1
38170: DEC
38171: ST_TO_ADDR
38172: LD_VAR 0 3
38176: PUSH
38177: FOR_TO
38178: IFFALSE 38281
// begin hc_class = class_apeman ;
38180: LD_ADDR_OWVAR 28
38184: PUSH
38185: LD_INT 12
38187: ST_TO_ADDR
// hc_gallery =  ;
38188: LD_ADDR_OWVAR 33
38192: PUSH
38193: LD_STRING 
38195: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38196: LD_ADDR_OWVAR 35
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PPUSH
38205: LD_INT 2
38207: PPUSH
38208: CALL_OW 12
38212: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38213: LD_ADDR_OWVAR 31
38217: PUSH
38218: LD_INT 1
38220: PPUSH
38221: LD_INT 3
38223: PPUSH
38224: CALL_OW 12
38228: PUSH
38229: LD_INT 1
38231: PPUSH
38232: LD_INT 3
38234: PPUSH
38235: CALL_OW 12
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: ST_TO_ADDR
// animal := CreateHuman ;
38252: LD_ADDR_VAR 0 12
38256: PUSH
38257: CALL_OW 44
38261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38262: LD_VAR 0 12
38266: PPUSH
38267: LD_VAR 0 8
38271: PPUSH
38272: LD_INT 0
38274: PPUSH
38275: CALL 40068 0 3
// end ;
38279: GO 38177
38281: POP
38282: POP
// if enchidnas then
38283: LD_VAR 0 4
38287: IFFALSE 38354
// for i = 1 to enchidnas do
38289: LD_ADDR_VAR 0 11
38293: PUSH
38294: DOUBLE
38295: LD_INT 1
38297: DEC
38298: ST_TO_ADDR
38299: LD_VAR 0 4
38303: PUSH
38304: FOR_TO
38305: IFFALSE 38352
// begin hc_class = 13 ;
38307: LD_ADDR_OWVAR 28
38311: PUSH
38312: LD_INT 13
38314: ST_TO_ADDR
// hc_gallery =  ;
38315: LD_ADDR_OWVAR 33
38319: PUSH
38320: LD_STRING 
38322: ST_TO_ADDR
// animal := CreateHuman ;
38323: LD_ADDR_VAR 0 12
38327: PUSH
38328: CALL_OW 44
38332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38333: LD_VAR 0 12
38337: PPUSH
38338: LD_VAR 0 8
38342: PPUSH
38343: LD_INT 0
38345: PPUSH
38346: CALL 40068 0 3
// end ;
38350: GO 38304
38352: POP
38353: POP
// if fishes then
38354: LD_VAR 0 7
38358: IFFALSE 38425
// for i = 1 to fishes do
38360: LD_ADDR_VAR 0 11
38364: PUSH
38365: DOUBLE
38366: LD_INT 1
38368: DEC
38369: ST_TO_ADDR
38370: LD_VAR 0 7
38374: PUSH
38375: FOR_TO
38376: IFFALSE 38423
// begin hc_class = 20 ;
38378: LD_ADDR_OWVAR 28
38382: PUSH
38383: LD_INT 20
38385: ST_TO_ADDR
// hc_gallery =  ;
38386: LD_ADDR_OWVAR 33
38390: PUSH
38391: LD_STRING 
38393: ST_TO_ADDR
// animal := CreateHuman ;
38394: LD_ADDR_VAR 0 12
38398: PUSH
38399: CALL_OW 44
38403: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38404: LD_VAR 0 12
38408: PPUSH
38409: LD_VAR 0 9
38413: PPUSH
38414: LD_INT 0
38416: PPUSH
38417: CALL 40068 0 3
// end ;
38421: GO 38375
38423: POP
38424: POP
// end ;
38425: LD_VAR 0 10
38429: RET
// export function WantHeal ( sci , unit ) ; begin
38430: LD_INT 0
38432: PPUSH
// if GetTaskList ( sci ) > 0 then
38433: LD_VAR 0 1
38437: PPUSH
38438: CALL_OW 437
38442: PUSH
38443: LD_INT 0
38445: GREATER
38446: IFFALSE 38518
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38448: LD_VAR 0 1
38452: PPUSH
38453: CALL_OW 437
38457: PUSH
38458: LD_INT 1
38460: ARRAY
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: PUSH
38466: LD_STRING l
38468: EQUAL
38469: IFFALSE 38496
38471: PUSH
38472: LD_VAR 0 1
38476: PPUSH
38477: CALL_OW 437
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 4
38488: ARRAY
38489: PUSH
38490: LD_VAR 0 2
38494: EQUAL
38495: AND
38496: IFFALSE 38508
// result := true else
38498: LD_ADDR_VAR 0 3
38502: PUSH
38503: LD_INT 1
38505: ST_TO_ADDR
38506: GO 38516
// result := false ;
38508: LD_ADDR_VAR 0 3
38512: PUSH
38513: LD_INT 0
38515: ST_TO_ADDR
// end else
38516: GO 38526
// result := false ;
38518: LD_ADDR_VAR 0 3
38522: PUSH
38523: LD_INT 0
38525: ST_TO_ADDR
// end ;
38526: LD_VAR 0 3
38530: RET
// export function HealTarget ( sci ) ; begin
38531: LD_INT 0
38533: PPUSH
// if not sci then
38534: LD_VAR 0 1
38538: NOT
38539: IFFALSE 38543
// exit ;
38541: GO 38608
// result := 0 ;
38543: LD_ADDR_VAR 0 2
38547: PUSH
38548: LD_INT 0
38550: ST_TO_ADDR
// if GetTaskList ( sci ) then
38551: LD_VAR 0 1
38555: PPUSH
38556: CALL_OW 437
38560: IFFALSE 38608
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38562: LD_VAR 0 1
38566: PPUSH
38567: CALL_OW 437
38571: PUSH
38572: LD_INT 1
38574: ARRAY
38575: PUSH
38576: LD_INT 1
38578: ARRAY
38579: PUSH
38580: LD_STRING l
38582: EQUAL
38583: IFFALSE 38608
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38585: LD_ADDR_VAR 0 2
38589: PUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 437
38599: PUSH
38600: LD_INT 1
38602: ARRAY
38603: PUSH
38604: LD_INT 4
38606: ARRAY
38607: ST_TO_ADDR
// end ;
38608: LD_VAR 0 2
38612: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38613: LD_INT 0
38615: PPUSH
38616: PPUSH
38617: PPUSH
38618: PPUSH
// if not base_units then
38619: LD_VAR 0 1
38623: NOT
38624: IFFALSE 38628
// exit ;
38626: GO 38715
// result := false ;
38628: LD_ADDR_VAR 0 2
38632: PUSH
38633: LD_INT 0
38635: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38636: LD_ADDR_VAR 0 5
38640: PUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: LD_INT 21
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PPUSH
38656: CALL_OW 72
38660: ST_TO_ADDR
// if not tmp then
38661: LD_VAR 0 5
38665: NOT
38666: IFFALSE 38670
// exit ;
38668: GO 38715
// for i in tmp do
38670: LD_ADDR_VAR 0 3
38674: PUSH
38675: LD_VAR 0 5
38679: PUSH
38680: FOR_IN
38681: IFFALSE 38713
// begin result := EnemyInRange ( i , 22 ) ;
38683: LD_ADDR_VAR 0 2
38687: PUSH
38688: LD_VAR 0 3
38692: PPUSH
38693: LD_INT 22
38695: PPUSH
38696: CALL 36140 0 2
38700: ST_TO_ADDR
// if result then
38701: LD_VAR 0 2
38705: IFFALSE 38711
// exit ;
38707: POP
38708: POP
38709: GO 38715
// end ;
38711: GO 38680
38713: POP
38714: POP
// end ;
38715: LD_VAR 0 2
38719: RET
// export function FilterByTag ( units , tag ) ; begin
38720: LD_INT 0
38722: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38723: LD_ADDR_VAR 0 3
38727: PUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: LD_INT 120
38735: PUSH
38736: LD_VAR 0 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PPUSH
38745: CALL_OW 72
38749: ST_TO_ADDR
// end ;
38750: LD_VAR 0 3
38754: RET
// export function IsDriver ( un ) ; begin
38755: LD_INT 0
38757: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38758: LD_ADDR_VAR 0 2
38762: PUSH
38763: LD_VAR 0 1
38767: PUSH
38768: LD_INT 55
38770: PUSH
38771: EMPTY
38772: LIST
38773: PPUSH
38774: CALL_OW 69
38778: IN
38779: ST_TO_ADDR
// end ;
38780: LD_VAR 0 2
38784: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38785: LD_INT 0
38787: PPUSH
38788: PPUSH
// list := [ ] ;
38789: LD_ADDR_VAR 0 5
38793: PUSH
38794: EMPTY
38795: ST_TO_ADDR
// case d of 0 :
38796: LD_VAR 0 3
38800: PUSH
38801: LD_INT 0
38803: DOUBLE
38804: EQUAL
38805: IFTRUE 38809
38807: GO 38942
38809: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38810: LD_ADDR_VAR 0 5
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: LD_INT 4
38822: MINUS
38823: PUSH
38824: LD_VAR 0 2
38828: PUSH
38829: LD_INT 4
38831: MINUS
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_INT 3
38848: MINUS
38849: PUSH
38850: LD_VAR 0 2
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_VAR 0 1
38867: PUSH
38868: LD_INT 4
38870: PLUS
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 4
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: LIST
38884: PUSH
38885: LD_VAR 0 1
38889: PUSH
38890: LD_INT 3
38892: PLUS
38893: PUSH
38894: LD_VAR 0 2
38898: PUSH
38899: LD_INT 3
38901: PLUS
38902: PUSH
38903: LD_INT 5
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: LD_VAR 0 1
38915: PUSH
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 4
38923: PLUS
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: ST_TO_ADDR
// end ; 1 :
38940: GO 39640
38942: LD_INT 1
38944: DOUBLE
38945: EQUAL
38946: IFTRUE 38950
38948: GO 39083
38950: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_VAR 0 1
38960: PUSH
38961: LD_VAR 0 2
38965: PUSH
38966: LD_INT 4
38968: MINUS
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: LD_VAR 0 1
38982: PUSH
38983: LD_INT 3
38985: MINUS
38986: PUSH
38987: LD_VAR 0 2
38991: PUSH
38992: LD_INT 3
38994: MINUS
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_INT 4
39011: MINUS
39012: PUSH
39013: LD_VAR 0 2
39017: PUSH
39018: LD_INT 1
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: LD_VAR 0 1
39030: PUSH
39031: LD_VAR 0 2
39035: PUSH
39036: LD_INT 3
39038: PLUS
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PUSH
39048: LD_VAR 0 1
39052: PUSH
39053: LD_INT 4
39055: PLUS
39056: PUSH
39057: LD_VAR 0 2
39061: PUSH
39062: LD_INT 4
39064: PLUS
39065: PUSH
39066: LD_INT 5
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: ST_TO_ADDR
// end ; 2 :
39081: GO 39640
39083: LD_INT 2
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39220
39091: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39092: LD_ADDR_VAR 0 5
39096: PUSH
39097: LD_VAR 0 1
39101: PUSH
39102: LD_VAR 0 2
39106: PUSH
39107: LD_INT 3
39109: MINUS
39110: PUSH
39111: LD_INT 3
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: LD_VAR 0 1
39123: PUSH
39124: LD_INT 4
39126: PLUS
39127: PUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_INT 4
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: PUSH
39141: LD_VAR 0 1
39145: PUSH
39146: LD_VAR 0 2
39150: PUSH
39151: LD_INT 4
39153: PLUS
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: LD_VAR 0 1
39167: PUSH
39168: LD_INT 3
39170: MINUS
39171: PUSH
39172: LD_VAR 0 2
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: LD_VAR 0 1
39189: PUSH
39190: LD_INT 4
39192: MINUS
39193: PUSH
39194: LD_VAR 0 2
39198: PUSH
39199: LD_INT 4
39201: MINUS
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// end ; 3 :
39218: GO 39640
39220: LD_INT 3
39222: DOUBLE
39223: EQUAL
39224: IFTRUE 39228
39226: GO 39361
39228: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39229: LD_ADDR_VAR 0 5
39233: PUSH
39234: LD_VAR 0 1
39238: PUSH
39239: LD_INT 3
39241: PLUS
39242: PUSH
39243: LD_VAR 0 2
39247: PUSH
39248: LD_INT 4
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: PUSH
39256: LD_VAR 0 1
39260: PUSH
39261: LD_INT 4
39263: PLUS
39264: PUSH
39265: LD_VAR 0 2
39269: PUSH
39270: LD_INT 4
39272: PLUS
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: PUSH
39282: LD_VAR 0 1
39286: PUSH
39287: LD_INT 4
39289: MINUS
39290: PUSH
39291: LD_VAR 0 2
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: LIST
39303: PUSH
39304: LD_VAR 0 1
39308: PUSH
39309: LD_VAR 0 2
39313: PUSH
39314: LD_INT 4
39316: MINUS
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: PUSH
39326: LD_VAR 0 1
39330: PUSH
39331: LD_INT 3
39333: MINUS
39334: PUSH
39335: LD_VAR 0 2
39339: PUSH
39340: LD_INT 3
39342: MINUS
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: ST_TO_ADDR
// end ; 4 :
39359: GO 39640
39361: LD_INT 4
39363: DOUBLE
39364: EQUAL
39365: IFTRUE 39369
39367: GO 39502
39369: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39370: LD_ADDR_VAR 0 5
39374: PUSH
39375: LD_VAR 0 1
39379: PUSH
39380: LD_VAR 0 2
39384: PUSH
39385: LD_INT 4
39387: PLUS
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: LIST
39396: PUSH
39397: LD_VAR 0 1
39401: PUSH
39402: LD_INT 3
39404: PLUS
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: LD_INT 3
39413: PLUS
39414: PUSH
39415: LD_INT 5
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: LIST
39422: PUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_INT 4
39430: PLUS
39431: PUSH
39432: LD_VAR 0 2
39436: PUSH
39437: LD_INT 4
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: PUSH
39445: LD_VAR 0 1
39449: PUSH
39450: LD_VAR 0 2
39454: PUSH
39455: LD_INT 3
39457: MINUS
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: LIST
39466: PUSH
39467: LD_VAR 0 1
39471: PUSH
39472: LD_INT 4
39474: MINUS
39475: PUSH
39476: LD_VAR 0 2
39480: PUSH
39481: LD_INT 4
39483: MINUS
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// end ; 5 :
39500: GO 39640
39502: LD_INT 5
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39639
39510: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: LD_VAR 0 1
39520: PUSH
39521: LD_INT 4
39523: MINUS
39524: PUSH
39525: LD_VAR 0 2
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: PUSH
39538: LD_VAR 0 1
39542: PUSH
39543: LD_VAR 0 2
39547: PUSH
39548: LD_INT 4
39550: MINUS
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: PUSH
39560: LD_VAR 0 1
39564: PUSH
39565: LD_INT 4
39567: PLUS
39568: PUSH
39569: LD_VAR 0 2
39573: PUSH
39574: LD_INT 4
39576: PLUS
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: LIST
39585: PUSH
39586: LD_VAR 0 1
39590: PUSH
39591: LD_INT 3
39593: PLUS
39594: PUSH
39595: LD_VAR 0 2
39599: PUSH
39600: LD_INT 4
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: LD_VAR 0 1
39612: PUSH
39613: LD_VAR 0 2
39617: PUSH
39618: LD_INT 3
39620: PLUS
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: LIST
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: ST_TO_ADDR
// end ; end ;
39637: GO 39640
39639: POP
// result := list ;
39640: LD_ADDR_VAR 0 4
39644: PUSH
39645: LD_VAR 0 5
39649: ST_TO_ADDR
// end ;
39650: LD_VAR 0 4
39654: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
39659: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39660: LD_VAR 0 1
39664: NOT
39665: IFTRUE 39693
39667: PUSH
39668: LD_VAR 0 2
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 4
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: IN
39691: NOT
39692: OR
39693: IFFALSE 39697
// exit ;
39695: GO 39780
// tmp := [ ] ;
39697: LD_ADDR_VAR 0 5
39701: PUSH
39702: EMPTY
39703: ST_TO_ADDR
// for i in units do
39704: LD_ADDR_VAR 0 4
39708: PUSH
39709: LD_VAR 0 1
39713: PUSH
39714: FOR_IN
39715: IFFALSE 39749
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39717: LD_ADDR_VAR 0 5
39721: PUSH
39722: LD_VAR 0 5
39726: PPUSH
39727: LD_VAR 0 4
39731: PPUSH
39732: LD_VAR 0 2
39736: PPUSH
39737: CALL_OW 259
39741: PPUSH
39742: CALL 41175 0 2
39746: ST_TO_ADDR
39747: GO 39714
39749: POP
39750: POP
// if not tmp then
39751: LD_VAR 0 5
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39780
// result := SortListByListDesc ( units , tmp ) ;
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_VAR 0 1
39769: PPUSH
39770: LD_VAR 0 5
39774: PPUSH
39775: CALL_OW 77
39779: ST_TO_ADDR
// end ;
39780: LD_VAR 0 3
39784: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
39789: PPUSH
// result := false ;
39790: LD_ADDR_VAR 0 3
39794: PUSH
39795: LD_INT 0
39797: ST_TO_ADDR
// if not building then
39798: LD_VAR 0 2
39802: NOT
39803: IFFALSE 39807
// exit ;
39805: GO 39951
// x := GetX ( building ) ;
39807: LD_ADDR_VAR 0 4
39811: PUSH
39812: LD_VAR 0 2
39816: PPUSH
39817: CALL_OW 250
39821: ST_TO_ADDR
// y := GetY ( building ) ;
39822: LD_ADDR_VAR 0 5
39826: PUSH
39827: LD_VAR 0 2
39831: PPUSH
39832: CALL_OW 251
39836: ST_TO_ADDR
// if not x or not y then
39837: LD_VAR 0 4
39841: NOT
39842: IFTRUE 39851
39844: PUSH
39845: LD_VAR 0 5
39849: NOT
39850: OR
39851: IFFALSE 39855
// exit ;
39853: GO 39951
// if GetTaskList ( unit ) then
39855: LD_VAR 0 1
39859: PPUSH
39860: CALL_OW 437
39864: IFFALSE 39951
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39866: LD_STRING e
39868: PUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 437
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PUSH
39883: LD_INT 1
39885: ARRAY
39886: EQUAL
39887: IFFALSE 39914
39889: PUSH
39890: LD_VAR 0 4
39894: PUSH
39895: LD_VAR 0 1
39899: PPUSH
39900: CALL_OW 437
39904: PUSH
39905: LD_INT 1
39907: ARRAY
39908: PUSH
39909: LD_INT 2
39911: ARRAY
39912: EQUAL
39913: AND
39914: IFFALSE 39941
39916: PUSH
39917: LD_VAR 0 5
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 437
39931: PUSH
39932: LD_INT 1
39934: ARRAY
39935: PUSH
39936: LD_INT 3
39938: ARRAY
39939: EQUAL
39940: AND
39941: IFFALSE 39951
// result := true end ;
39943: LD_ADDR_VAR 0 3
39947: PUSH
39948: LD_INT 1
39950: ST_TO_ADDR
// end ;
39951: LD_VAR 0 3
39955: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39956: LD_INT 0
39958: PPUSH
// result := false ;
39959: LD_ADDR_VAR 0 4
39963: PUSH
39964: LD_INT 0
39966: ST_TO_ADDR
// if GetTaskList ( unit ) then
39967: LD_VAR 0 1
39971: PPUSH
39972: CALL_OW 437
39976: IFFALSE 40063
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39978: LD_STRING M
39980: PUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: CALL_OW 437
39990: PUSH
39991: LD_INT 1
39993: ARRAY
39994: PUSH
39995: LD_INT 1
39997: ARRAY
39998: EQUAL
39999: IFFALSE 40026
40001: PUSH
40002: LD_VAR 0 2
40006: PUSH
40007: LD_VAR 0 1
40011: PPUSH
40012: CALL_OW 437
40016: PUSH
40017: LD_INT 1
40019: ARRAY
40020: PUSH
40021: LD_INT 2
40023: ARRAY
40024: EQUAL
40025: AND
40026: IFFALSE 40053
40028: PUSH
40029: LD_VAR 0 3
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 437
40043: PUSH
40044: LD_INT 1
40046: ARRAY
40047: PUSH
40048: LD_INT 3
40050: ARRAY
40051: EQUAL
40052: AND
40053: IFFALSE 40063
// result := true ;
40055: LD_ADDR_VAR 0 4
40059: PUSH
40060: LD_INT 1
40062: ST_TO_ADDR
// end ; end ;
40063: LD_VAR 0 4
40067: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40068: LD_INT 0
40070: PPUSH
40071: PPUSH
40072: PPUSH
40073: PPUSH
// if not unit or not area then
40074: LD_VAR 0 1
40078: NOT
40079: IFTRUE 40088
40081: PUSH
40082: LD_VAR 0 2
40086: NOT
40087: OR
40088: IFFALSE 40092
// exit ;
40090: GO 40268
// tmp := AreaToList ( area , i ) ;
40092: LD_ADDR_VAR 0 6
40096: PUSH
40097: LD_VAR 0 2
40101: PPUSH
40102: LD_VAR 0 5
40106: PPUSH
40107: CALL_OW 517
40111: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40112: LD_ADDR_VAR 0 5
40116: PUSH
40117: DOUBLE
40118: LD_INT 1
40120: DEC
40121: ST_TO_ADDR
40122: LD_VAR 0 6
40126: PUSH
40127: LD_INT 1
40129: ARRAY
40130: PUSH
40131: FOR_TO
40132: IFFALSE 40266
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40134: LD_ADDR_VAR 0 7
40138: PUSH
40139: LD_VAR 0 6
40143: PUSH
40144: LD_INT 1
40146: ARRAY
40147: PUSH
40148: LD_VAR 0 5
40152: ARRAY
40153: PUSH
40154: LD_VAR 0 6
40158: PUSH
40159: LD_INT 2
40161: ARRAY
40162: PUSH
40163: LD_VAR 0 5
40167: ARRAY
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40173: LD_INT 92
40175: PUSH
40176: LD_VAR 0 7
40180: PUSH
40181: LD_INT 1
40183: ARRAY
40184: PUSH
40185: LD_VAR 0 7
40189: PUSH
40190: LD_INT 2
40192: ARRAY
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: PPUSH
40203: CALL_OW 69
40207: PUSH
40208: LD_INT 0
40210: EQUAL
40211: IFFALSE 40264
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40213: LD_VAR 0 1
40217: PPUSH
40218: LD_VAR 0 7
40222: PUSH
40223: LD_INT 1
40225: ARRAY
40226: PPUSH
40227: LD_VAR 0 7
40231: PUSH
40232: LD_INT 2
40234: ARRAY
40235: PPUSH
40236: LD_VAR 0 3
40240: PPUSH
40241: CALL_OW 48
// result := IsPlaced ( unit ) ;
40245: LD_ADDR_VAR 0 4
40249: PUSH
40250: LD_VAR 0 1
40254: PPUSH
40255: CALL_OW 305
40259: ST_TO_ADDR
// exit ;
40260: POP
40261: POP
40262: GO 40268
// end ; end ;
40264: GO 40131
40266: POP
40267: POP
// end ;
40268: LD_VAR 0 4
40272: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40273: LD_INT 0
40275: PPUSH
40276: PPUSH
40277: PPUSH
// if not side or side > 8 then
40278: LD_VAR 0 1
40282: NOT
40283: IFTRUE 40295
40285: PUSH
40286: LD_VAR 0 1
40290: PUSH
40291: LD_INT 8
40293: GREATER
40294: OR
40295: IFFALSE 40299
// exit ;
40297: GO 40486
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40299: LD_ADDR_VAR 0 4
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_VAR 0 1
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 21
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PPUSH
40330: CALL_OW 69
40334: ST_TO_ADDR
// if not tmp then
40335: LD_VAR 0 4
40339: NOT
40340: IFFALSE 40344
// exit ;
40342: GO 40486
// enable_addtolog := true ;
40344: LD_ADDR_OWVAR 81
40348: PUSH
40349: LD_INT 1
40351: ST_TO_ADDR
// AddToLog ( [ ) ;
40352: LD_STRING [
40354: PPUSH
40355: CALL_OW 561
// for i in tmp do
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_VAR 0 4
40368: PUSH
40369: FOR_IN
40370: IFFALSE 40477
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40372: LD_STRING [
40374: PUSH
40375: LD_VAR 0 3
40379: PPUSH
40380: CALL_OW 266
40384: STR
40385: PUSH
40386: LD_STRING , 
40388: STR
40389: PUSH
40390: LD_VAR 0 3
40394: PPUSH
40395: CALL_OW 250
40399: STR
40400: PUSH
40401: LD_STRING , 
40403: STR
40404: PUSH
40405: LD_VAR 0 3
40409: PPUSH
40410: CALL_OW 251
40414: STR
40415: PUSH
40416: LD_STRING , 
40418: STR
40419: PUSH
40420: LD_VAR 0 3
40424: PPUSH
40425: CALL_OW 254
40429: STR
40430: PUSH
40431: LD_STRING , 
40433: STR
40434: PUSH
40435: LD_VAR 0 3
40439: PPUSH
40440: LD_INT 1
40442: PPUSH
40443: CALL_OW 268
40447: STR
40448: PUSH
40449: LD_STRING , 
40451: STR
40452: PUSH
40453: LD_VAR 0 3
40457: PPUSH
40458: LD_INT 2
40460: PPUSH
40461: CALL_OW 268
40465: STR
40466: PUSH
40467: LD_STRING ],
40469: STR
40470: PPUSH
40471: CALL_OW 561
// end ;
40475: GO 40369
40477: POP
40478: POP
// AddToLog ( ]; ) ;
40479: LD_STRING ];
40481: PPUSH
40482: CALL_OW 561
// end ;
40486: LD_VAR 0 2
40490: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40491: LD_INT 0
40493: PPUSH
40494: PPUSH
40495: PPUSH
40496: PPUSH
40497: PPUSH
// if not area or not rate or not max then
40498: LD_VAR 0 1
40502: NOT
40503: IFTRUE 40512
40505: PUSH
40506: LD_VAR 0 2
40510: NOT
40511: OR
40512: IFTRUE 40521
40514: PUSH
40515: LD_VAR 0 4
40519: NOT
40520: OR
40521: IFFALSE 40525
// exit ;
40523: GO 40714
// while 1 do
40525: LD_INT 1
40527: IFFALSE 40714
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40529: LD_ADDR_VAR 0 9
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: CALL_OW 287
40546: PUSH
40547: LD_INT 10
40549: MUL
40550: ST_TO_ADDR
// r := rate / 10 ;
40551: LD_ADDR_VAR 0 7
40555: PUSH
40556: LD_VAR 0 2
40560: PUSH
40561: LD_INT 10
40563: DIVREAL
40564: ST_TO_ADDR
// time := 1 1$00 ;
40565: LD_ADDR_VAR 0 8
40569: PUSH
40570: LD_INT 2100
40572: ST_TO_ADDR
// if amount < min then
40573: LD_VAR 0 9
40577: PUSH
40578: LD_VAR 0 3
40582: LESS
40583: IFFALSE 40601
// r := r * 2 else
40585: LD_ADDR_VAR 0 7
40589: PUSH
40590: LD_VAR 0 7
40594: PUSH
40595: LD_INT 2
40597: MUL
40598: ST_TO_ADDR
40599: GO 40627
// if amount > max then
40601: LD_VAR 0 9
40605: PUSH
40606: LD_VAR 0 4
40610: GREATER
40611: IFFALSE 40627
// r := r / 2 ;
40613: LD_ADDR_VAR 0 7
40617: PUSH
40618: LD_VAR 0 7
40622: PUSH
40623: LD_INT 2
40625: DIVREAL
40626: ST_TO_ADDR
// time := time / r ;
40627: LD_ADDR_VAR 0 8
40631: PUSH
40632: LD_VAR 0 8
40636: PUSH
40637: LD_VAR 0 7
40641: DIVREAL
40642: ST_TO_ADDR
// if time < 0 then
40643: LD_VAR 0 8
40647: PUSH
40648: LD_INT 0
40650: LESS
40651: IFFALSE 40668
// time := time * - 1 ;
40653: LD_ADDR_VAR 0 8
40657: PUSH
40658: LD_VAR 0 8
40662: PUSH
40663: LD_INT 1
40665: NEG
40666: MUL
40667: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40668: LD_VAR 0 8
40672: PUSH
40673: LD_INT 35
40675: PPUSH
40676: LD_INT 875
40678: PPUSH
40679: CALL_OW 12
40683: PLUS
40684: PPUSH
40685: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40689: LD_INT 1
40691: PPUSH
40692: LD_INT 5
40694: PPUSH
40695: CALL_OW 12
40699: PPUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: LD_INT 1
40707: PPUSH
40708: CALL_OW 55
// end ;
40712: GO 40525
// end ;
40714: LD_VAR 0 5
40718: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40719: LD_INT 0
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
40725: PPUSH
40726: PPUSH
40727: PPUSH
40728: PPUSH
// if not turrets or not factories then
40729: LD_VAR 0 1
40733: NOT
40734: IFTRUE 40743
40736: PUSH
40737: LD_VAR 0 2
40741: NOT
40742: OR
40743: IFFALSE 40747
// exit ;
40745: GO 41054
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40747: LD_ADDR_VAR 0 10
40751: PUSH
40752: LD_INT 5
40754: PUSH
40755: LD_INT 6
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: PUSH
40765: LD_INT 4
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: PUSH
40775: LD_INT 5
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 24
40789: PUSH
40790: LD_INT 25
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 23
40799: PUSH
40800: LD_INT 27
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 42
40813: PUSH
40814: LD_INT 43
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 44
40823: PUSH
40824: LD_INT 46
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 45
40833: PUSH
40834: LD_INT 47
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: ST_TO_ADDR
// result := [ ] ;
40851: LD_ADDR_VAR 0 3
40855: PUSH
40856: EMPTY
40857: ST_TO_ADDR
// for i in turrets do
40858: LD_ADDR_VAR 0 4
40862: PUSH
40863: LD_VAR 0 1
40867: PUSH
40868: FOR_IN
40869: IFFALSE 41052
// begin nat := GetNation ( i ) ;
40871: LD_ADDR_VAR 0 7
40875: PUSH
40876: LD_VAR 0 4
40880: PPUSH
40881: CALL_OW 248
40885: ST_TO_ADDR
// weapon := 0 ;
40886: LD_ADDR_VAR 0 8
40890: PUSH
40891: LD_INT 0
40893: ST_TO_ADDR
// if not nat then
40894: LD_VAR 0 7
40898: NOT
40899: IFFALSE 40903
// continue ;
40901: GO 40868
// for j in list [ nat ] do
40903: LD_ADDR_VAR 0 5
40907: PUSH
40908: LD_VAR 0 10
40912: PUSH
40913: LD_VAR 0 7
40917: ARRAY
40918: PUSH
40919: FOR_IN
40920: IFFALSE 40961
// if GetBWeapon ( i ) = j [ 1 ] then
40922: LD_VAR 0 4
40926: PPUSH
40927: CALL_OW 269
40931: PUSH
40932: LD_VAR 0 5
40936: PUSH
40937: LD_INT 1
40939: ARRAY
40940: EQUAL
40941: IFFALSE 40959
// begin weapon := j [ 2 ] ;
40943: LD_ADDR_VAR 0 8
40947: PUSH
40948: LD_VAR 0 5
40952: PUSH
40953: LD_INT 2
40955: ARRAY
40956: ST_TO_ADDR
// break ;
40957: GO 40961
// end ;
40959: GO 40919
40961: POP
40962: POP
// if not weapon then
40963: LD_VAR 0 8
40967: NOT
40968: IFFALSE 40972
// continue ;
40970: GO 40868
// for k in factories do
40972: LD_ADDR_VAR 0 6
40976: PUSH
40977: LD_VAR 0 2
40981: PUSH
40982: FOR_IN
40983: IFFALSE 41048
// begin weapons := AvailableWeaponList ( k ) ;
40985: LD_ADDR_VAR 0 9
40989: PUSH
40990: LD_VAR 0 6
40994: PPUSH
40995: CALL_OW 478
40999: ST_TO_ADDR
// if not weapons then
41000: LD_VAR 0 9
41004: NOT
41005: IFFALSE 41009
// continue ;
41007: GO 40982
// if weapon in weapons then
41009: LD_VAR 0 8
41013: PUSH
41014: LD_VAR 0 9
41018: IN
41019: IFFALSE 41046
// begin result := [ i , weapon ] ;
41021: LD_ADDR_VAR 0 3
41025: PUSH
41026: LD_VAR 0 4
41030: PUSH
41031: LD_VAR 0 8
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: ST_TO_ADDR
// exit ;
41040: POP
41041: POP
41042: POP
41043: POP
41044: GO 41054
// end ; end ;
41046: GO 40982
41048: POP
41049: POP
// end ;
41050: GO 40868
41052: POP
41053: POP
// end ;
41054: LD_VAR 0 3
41058: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41059: LD_INT 0
41061: PPUSH
// if not side or side > 8 then
41062: LD_VAR 0 3
41066: NOT
41067: IFTRUE 41079
41069: PUSH
41070: LD_VAR 0 3
41074: PUSH
41075: LD_INT 8
41077: GREATER
41078: OR
41079: IFFALSE 41083
// exit ;
41081: GO 41142
// if not range then
41083: LD_VAR 0 4
41087: NOT
41088: IFFALSE 41099
// range := - 12 ;
41090: LD_ADDR_VAR 0 4
41094: PUSH
41095: LD_INT 12
41097: NEG
41098: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41099: LD_VAR 0 1
41103: PPUSH
41104: LD_VAR 0 2
41108: PPUSH
41109: LD_VAR 0 3
41113: PPUSH
41114: LD_VAR 0 4
41118: PPUSH
41119: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41123: LD_VAR 0 1
41127: PPUSH
41128: LD_VAR 0 2
41132: PPUSH
41133: LD_VAR 0 3
41137: PPUSH
41138: CALL_OW 331
// end ;
41142: LD_VAR 0 5
41146: RET
// export function Video ( mode ) ; begin
41147: LD_INT 0
41149: PPUSH
// ingame_video = mode ;
41150: LD_ADDR_OWVAR 52
41154: PUSH
41155: LD_VAR 0 1
41159: ST_TO_ADDR
// interface_hidden = mode ;
41160: LD_ADDR_OWVAR 54
41164: PUSH
41165: LD_VAR 0 1
41169: ST_TO_ADDR
// end ;
41170: LD_VAR 0 2
41174: RET
// export function Join ( array , element ) ; begin
41175: LD_INT 0
41177: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: LD_VAR 0 1
41187: PPUSH
41188: LD_VAR 0 1
41192: PUSH
41193: LD_INT 1
41195: PLUS
41196: PPUSH
41197: LD_VAR 0 2
41201: PPUSH
41202: CALL_OW 1
41206: ST_TO_ADDR
// end ;
41207: LD_VAR 0 3
41211: RET
// export function JoinUnion ( array , element ) ; begin
41212: LD_INT 0
41214: PPUSH
// result := array union element ;
41215: LD_ADDR_VAR 0 3
41219: PUSH
41220: LD_VAR 0 1
41224: PUSH
41225: LD_VAR 0 2
41229: UNION
41230: ST_TO_ADDR
// end ;
41231: LD_VAR 0 3
41235: RET
// export function GetBehemoths ( side ) ; begin
41236: LD_INT 0
41238: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41239: LD_ADDR_VAR 0 2
41243: PUSH
41244: LD_INT 22
41246: PUSH
41247: LD_VAR 0 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 31
41258: PUSH
41259: LD_INT 25
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PPUSH
41270: CALL_OW 69
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 2
41279: RET
// export function Shuffle ( array ) ; var i , index ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
// result := [ ] ;
41285: LD_ADDR_VAR 0 2
41289: PUSH
41290: EMPTY
41291: ST_TO_ADDR
// if not array then
41292: LD_VAR 0 1
41296: NOT
41297: IFFALSE 41301
// exit ;
41299: GO 41400
// Randomize ;
41301: CALL_OW 10
// for i = array downto 1 do
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: DOUBLE
41311: LD_VAR 0 1
41315: INC
41316: ST_TO_ADDR
41317: LD_INT 1
41319: PUSH
41320: FOR_DOWNTO
41321: IFFALSE 41398
// begin index := rand ( 1 , array ) ;
41323: LD_ADDR_VAR 0 4
41327: PUSH
41328: LD_INT 1
41330: PPUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: CALL_OW 12
41340: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41341: LD_ADDR_VAR 0 2
41345: PUSH
41346: LD_VAR 0 2
41350: PPUSH
41351: LD_VAR 0 2
41355: PUSH
41356: LD_INT 1
41358: PLUS
41359: PPUSH
41360: LD_VAR 0 1
41364: PUSH
41365: LD_VAR 0 4
41369: ARRAY
41370: PPUSH
41371: CALL_OW 2
41375: ST_TO_ADDR
// array := Delete ( array , index ) ;
41376: LD_ADDR_VAR 0 1
41380: PUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 4
41390: PPUSH
41391: CALL_OW 3
41395: ST_TO_ADDR
// end ;
41396: GO 41320
41398: POP
41399: POP
// end ;
41400: LD_VAR 0 2
41404: RET
// export function GetBaseMaterials ( base ) ; begin
41405: LD_INT 0
41407: PPUSH
// result := [ 0 , 0 , 0 ] ;
41408: LD_ADDR_VAR 0 2
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// if not base then
41427: LD_VAR 0 1
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41485
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41436: LD_ADDR_VAR 0 2
41440: PUSH
41441: LD_VAR 0 1
41445: PPUSH
41446: LD_INT 1
41448: PPUSH
41449: CALL_OW 275
41453: PUSH
41454: LD_VAR 0 1
41458: PPUSH
41459: LD_INT 2
41461: PPUSH
41462: CALL_OW 275
41466: PUSH
41467: LD_VAR 0 1
41471: PPUSH
41472: LD_INT 3
41474: PPUSH
41475: CALL_OW 275
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// end ;
41485: LD_VAR 0 2
41489: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41490: LD_INT 0
41492: PPUSH
41493: PPUSH
// result := array ;
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_VAR 0 1
41503: ST_TO_ADDR
// if size >= result then
41504: LD_VAR 0 2
41508: PUSH
41509: LD_VAR 0 3
41513: GREATEREQUAL
41514: IFFALSE 41518
// exit ;
41516: GO 41568
// if size then
41518: LD_VAR 0 2
41522: IFFALSE 41568
// for i := array downto size do
41524: LD_ADDR_VAR 0 4
41528: PUSH
41529: DOUBLE
41530: LD_VAR 0 1
41534: INC
41535: ST_TO_ADDR
41536: LD_VAR 0 2
41540: PUSH
41541: FOR_DOWNTO
41542: IFFALSE 41566
// result := Delete ( result , result ) ;
41544: LD_ADDR_VAR 0 3
41548: PUSH
41549: LD_VAR 0 3
41553: PPUSH
41554: LD_VAR 0 3
41558: PPUSH
41559: CALL_OW 3
41563: ST_TO_ADDR
41564: GO 41541
41566: POP
41567: POP
// end ;
41568: LD_VAR 0 3
41572: RET
// export function ComExit ( unit ) ; var tmp ; begin
41573: LD_INT 0
41575: PPUSH
41576: PPUSH
// if not IsInUnit ( unit ) then
41577: LD_VAR 0 1
41581: PPUSH
41582: CALL_OW 310
41586: NOT
41587: IFFALSE 41591
// exit ;
41589: GO 41651
// tmp := IsInUnit ( unit ) ;
41591: LD_ADDR_VAR 0 3
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 310
41605: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41606: LD_VAR 0 3
41610: PPUSH
41611: CALL_OW 247
41615: PUSH
41616: LD_INT 2
41618: EQUAL
41619: IFFALSE 41632
// ComExitVehicle ( unit ) else
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 121
41630: GO 41641
// ComExitBuilding ( unit ) ;
41632: LD_VAR 0 1
41636: PPUSH
41637: CALL_OW 122
// result := tmp ;
41641: LD_ADDR_VAR 0 2
41645: PUSH
41646: LD_VAR 0 3
41650: ST_TO_ADDR
// end ;
41651: LD_VAR 0 2
41655: RET
// export function ComExitAll ( units ) ; var i ; begin
41656: LD_INT 0
41658: PPUSH
41659: PPUSH
// if not units then
41660: LD_VAR 0 1
41664: NOT
41665: IFFALSE 41669
// exit ;
41667: GO 41695
// for i in units do
41669: LD_ADDR_VAR 0 3
41673: PUSH
41674: LD_VAR 0 1
41678: PUSH
41679: FOR_IN
41680: IFFALSE 41693
// ComExit ( i ) ;
41682: LD_VAR 0 3
41686: PPUSH
41687: CALL 41573 0 1
41691: GO 41679
41693: POP
41694: POP
// end ;
41695: LD_VAR 0 2
41699: RET
// export function ResetHc ; begin
41700: LD_INT 0
41702: PPUSH
// InitHc ;
41703: CALL_OW 19
// hc_importance := 0 ;
41707: LD_ADDR_OWVAR 32
41711: PUSH
41712: LD_INT 0
41714: ST_TO_ADDR
// end ;
41715: LD_VAR 0 1
41719: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41720: LD_INT 0
41722: PPUSH
41723: PPUSH
41724: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41725: LD_ADDR_VAR 0 6
41729: PUSH
41730: LD_VAR 0 1
41734: PUSH
41735: LD_VAR 0 3
41739: PLUS
41740: PUSH
41741: LD_INT 2
41743: DIV
41744: ST_TO_ADDR
// if _x < 0 then
41745: LD_VAR 0 6
41749: PUSH
41750: LD_INT 0
41752: LESS
41753: IFFALSE 41770
// _x := _x * - 1 ;
41755: LD_ADDR_VAR 0 6
41759: PUSH
41760: LD_VAR 0 6
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: MUL
41769: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41770: LD_ADDR_VAR 0 7
41774: PUSH
41775: LD_VAR 0 2
41779: PUSH
41780: LD_VAR 0 4
41784: PLUS
41785: PUSH
41786: LD_INT 2
41788: DIV
41789: ST_TO_ADDR
// if _y < 0 then
41790: LD_VAR 0 7
41794: PUSH
41795: LD_INT 0
41797: LESS
41798: IFFALSE 41815
// _y := _y * - 1 ;
41800: LD_ADDR_VAR 0 7
41804: PUSH
41805: LD_VAR 0 7
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: MUL
41814: ST_TO_ADDR
// result := [ _x , _y ] ;
41815: LD_ADDR_VAR 0 5
41819: PUSH
41820: LD_VAR 0 6
41824: PUSH
41825: LD_VAR 0 7
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: ST_TO_ADDR
// end ;
41834: LD_VAR 0 5
41838: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41839: LD_INT 0
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
// task := GetTaskList ( unit ) ;
41845: LD_ADDR_VAR 0 7
41849: PUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: CALL_OW 437
41859: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41860: LD_VAR 0 7
41864: NOT
41865: IFFALSE 41884
41867: PUSH
41868: LD_VAR 0 1
41872: PPUSH
41873: LD_VAR 0 2
41877: PPUSH
41878: CALL_OW 308
41882: NOT
41883: AND
41884: IFFALSE 41888
// exit ;
41886: GO 42006
// if IsInArea ( unit , area ) then
41888: LD_VAR 0 1
41892: PPUSH
41893: LD_VAR 0 2
41897: PPUSH
41898: CALL_OW 308
41902: IFFALSE 41920
// begin ComMoveToArea ( unit , goAway ) ;
41904: LD_VAR 0 1
41908: PPUSH
41909: LD_VAR 0 3
41913: PPUSH
41914: CALL_OW 113
// exit ;
41918: GO 42006
// end ; if task [ 1 ] [ 1 ] <> M then
41920: LD_VAR 0 7
41924: PUSH
41925: LD_INT 1
41927: ARRAY
41928: PUSH
41929: LD_INT 1
41931: ARRAY
41932: PUSH
41933: LD_STRING M
41935: NONEQUAL
41936: IFFALSE 41940
// exit ;
41938: GO 42006
// x := task [ 1 ] [ 2 ] ;
41940: LD_ADDR_VAR 0 5
41944: PUSH
41945: LD_VAR 0 7
41949: PUSH
41950: LD_INT 1
41952: ARRAY
41953: PUSH
41954: LD_INT 2
41956: ARRAY
41957: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41958: LD_ADDR_VAR 0 6
41962: PUSH
41963: LD_VAR 0 7
41967: PUSH
41968: LD_INT 1
41970: ARRAY
41971: PUSH
41972: LD_INT 3
41974: ARRAY
41975: ST_TO_ADDR
// if InArea ( x , y , area ) then
41976: LD_VAR 0 5
41980: PPUSH
41981: LD_VAR 0 6
41985: PPUSH
41986: LD_VAR 0 2
41990: PPUSH
41991: CALL_OW 309
41995: IFFALSE 42006
// ComStop ( unit ) ;
41997: LD_VAR 0 1
42001: PPUSH
42002: CALL_OW 141
// end ;
42006: LD_VAR 0 4
42010: RET
// export function Abs ( value ) ; begin
42011: LD_INT 0
42013: PPUSH
// result := value ;
42014: LD_ADDR_VAR 0 2
42018: PUSH
42019: LD_VAR 0 1
42023: ST_TO_ADDR
// if value < 0 then
42024: LD_VAR 0 1
42028: PUSH
42029: LD_INT 0
42031: LESS
42032: IFFALSE 42049
// result := value * - 1 ;
42034: LD_ADDR_VAR 0 2
42038: PUSH
42039: LD_VAR 0 1
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: MUL
42048: ST_TO_ADDR
// end ;
42049: LD_VAR 0 2
42053: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42054: LD_INT 0
42056: PPUSH
42057: PPUSH
42058: PPUSH
42059: PPUSH
42060: PPUSH
42061: PPUSH
42062: PPUSH
42063: PPUSH
// if not unit or not building then
42064: LD_VAR 0 1
42068: NOT
42069: IFTRUE 42078
42071: PUSH
42072: LD_VAR 0 2
42076: NOT
42077: OR
42078: IFFALSE 42082
// exit ;
42080: GO 42310
// x := GetX ( building ) ;
42082: LD_ADDR_VAR 0 4
42086: PUSH
42087: LD_VAR 0 2
42091: PPUSH
42092: CALL_OW 250
42096: ST_TO_ADDR
// y := GetY ( building ) ;
42097: LD_ADDR_VAR 0 6
42101: PUSH
42102: LD_VAR 0 2
42106: PPUSH
42107: CALL_OW 251
42111: ST_TO_ADDR
// d := GetDir ( building ) ;
42112: LD_ADDR_VAR 0 8
42116: PUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: CALL_OW 254
42126: ST_TO_ADDR
// r := 4 ;
42127: LD_ADDR_VAR 0 9
42131: PUSH
42132: LD_INT 4
42134: ST_TO_ADDR
// for i := 1 to 5 do
42135: LD_ADDR_VAR 0 10
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_INT 5
42147: PUSH
42148: FOR_TO
42149: IFFALSE 42308
// begin _x := ShiftX ( x , d , r + i ) ;
42151: LD_ADDR_VAR 0 5
42155: PUSH
42156: LD_VAR 0 4
42160: PPUSH
42161: LD_VAR 0 8
42165: PPUSH
42166: LD_VAR 0 9
42170: PUSH
42171: LD_VAR 0 10
42175: PLUS
42176: PPUSH
42177: CALL_OW 272
42181: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42182: LD_ADDR_VAR 0 7
42186: PUSH
42187: LD_VAR 0 6
42191: PPUSH
42192: LD_VAR 0 8
42196: PPUSH
42197: LD_VAR 0 9
42201: PUSH
42202: LD_VAR 0 10
42206: PLUS
42207: PPUSH
42208: CALL_OW 273
42212: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42213: LD_VAR 0 5
42217: PPUSH
42218: LD_VAR 0 7
42222: PPUSH
42223: CALL_OW 488
42227: IFFALSE 42262
42229: PUSH
42230: LD_VAR 0 5
42234: PPUSH
42235: LD_VAR 0 7
42239: PPUSH
42240: CALL_OW 428
42244: PPUSH
42245: CALL_OW 247
42249: PUSH
42250: LD_INT 3
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: IN
42260: NOT
42261: AND
42262: IFFALSE 42306
// begin ComMoveXY ( unit , _x , _y ) ;
42264: LD_VAR 0 1
42268: PPUSH
42269: LD_VAR 0 5
42273: PPUSH
42274: LD_VAR 0 7
42278: PPUSH
42279: CALL_OW 111
// result := [ _x , _y ] ;
42283: LD_ADDR_VAR 0 3
42287: PUSH
42288: LD_VAR 0 5
42292: PUSH
42293: LD_VAR 0 7
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// exit ;
42302: POP
42303: POP
42304: GO 42310
// end ; end ;
42306: GO 42148
42308: POP
42309: POP
// end ;
42310: LD_VAR 0 3
42314: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42315: LD_INT 0
42317: PPUSH
42318: PPUSH
42319: PPUSH
// result := 0 ;
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: LD_INT 0
42327: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42328: LD_VAR 0 1
42332: PUSH
42333: LD_INT 0
42335: LESS
42336: IFTRUE 42348
42338: PUSH
42339: LD_VAR 0 1
42343: PUSH
42344: LD_INT 8
42346: GREATER
42347: OR
42348: IFTRUE 42360
42350: PUSH
42351: LD_VAR 0 2
42355: PUSH
42356: LD_INT 0
42358: LESS
42359: OR
42360: IFTRUE 42372
42362: PUSH
42363: LD_VAR 0 2
42367: PUSH
42368: LD_INT 8
42370: GREATER
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42451
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42376: LD_ADDR_VAR 0 4
42380: PUSH
42381: LD_INT 22
42383: PUSH
42384: LD_VAR 0 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 69
42397: PUSH
42398: FOR_IN
42399: IFFALSE 42449
// begin un := UnitShoot ( i ) ;
42401: LD_ADDR_VAR 0 5
42405: PUSH
42406: LD_VAR 0 4
42410: PPUSH
42411: CALL_OW 504
42415: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42416: LD_VAR 0 5
42420: PPUSH
42421: CALL_OW 255
42425: PUSH
42426: LD_VAR 0 1
42430: EQUAL
42431: IFFALSE 42447
// begin result := un ;
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_VAR 0 5
42442: ST_TO_ADDR
// exit ;
42443: POP
42444: POP
42445: GO 42451
// end ; end ;
42447: GO 42398
42449: POP
42450: POP
// end ;
42451: LD_VAR 0 3
42455: RET
// export function GetCargoBay ( units ) ; begin
42456: LD_INT 0
42458: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42459: LD_ADDR_VAR 0 2
42463: PUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: LD_INT 2
42471: PUSH
42472: LD_INT 34
42474: PUSH
42475: LD_INT 12
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 34
42484: PUSH
42485: LD_INT 51
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 34
42494: PUSH
42495: LD_INT 32
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 34
42504: PUSH
42505: LD_INT 89
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: PPUSH
42519: CALL_OW 72
42523: ST_TO_ADDR
// end ;
42524: LD_VAR 0 2
42528: RET
// export function Negate ( value ) ; begin
42529: LD_INT 0
42531: PPUSH
// result := not value ;
42532: LD_ADDR_VAR 0 2
42536: PUSH
42537: LD_VAR 0 1
42541: NOT
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 2
42547: RET
// export function Inc ( value ) ; begin
42548: LD_INT 0
42550: PPUSH
// result := value + 1 ;
42551: LD_ADDR_VAR 0 2
42555: PUSH
42556: LD_VAR 0 1
42560: PUSH
42561: LD_INT 1
42563: PLUS
42564: ST_TO_ADDR
// end ;
42565: LD_VAR 0 2
42569: RET
// export function Dec ( value ) ; begin
42570: LD_INT 0
42572: PPUSH
// result := value - 1 ;
42573: LD_ADDR_VAR 0 2
42577: PUSH
42578: LD_VAR 0 1
42582: PUSH
42583: LD_INT 1
42585: MINUS
42586: ST_TO_ADDR
// end ;
42587: LD_VAR 0 2
42591: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42592: LD_INT 0
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
42599: PPUSH
42600: PPUSH
42601: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42602: LD_VAR 0 1
42606: PPUSH
42607: LD_VAR 0 2
42611: PPUSH
42612: CALL_OW 488
42616: NOT
42617: IFTRUE 42636
42619: PUSH
42620: LD_VAR 0 3
42624: PPUSH
42625: LD_VAR 0 4
42629: PPUSH
42630: CALL_OW 488
42634: NOT
42635: OR
42636: IFFALSE 42649
// begin result := - 1 ;
42638: LD_ADDR_VAR 0 5
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: ST_TO_ADDR
// exit ;
42647: GO 42884
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42649: LD_ADDR_VAR 0 12
42653: PUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: LD_VAR 0 2
42663: PPUSH
42664: LD_VAR 0 3
42668: PPUSH
42669: LD_VAR 0 4
42673: PPUSH
42674: CALL 41720 0 4
42678: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42679: LD_ADDR_VAR 0 11
42683: PUSH
42684: LD_VAR 0 1
42688: PPUSH
42689: LD_VAR 0 2
42693: PPUSH
42694: LD_VAR 0 12
42698: PUSH
42699: LD_INT 1
42701: ARRAY
42702: PPUSH
42703: LD_VAR 0 12
42707: PUSH
42708: LD_INT 2
42710: ARRAY
42711: PPUSH
42712: CALL_OW 298
42716: ST_TO_ADDR
// distance := 9999 ;
42717: LD_ADDR_VAR 0 10
42721: PUSH
42722: LD_INT 9999
42724: ST_TO_ADDR
// for i := 0 to 5 do
42725: LD_ADDR_VAR 0 6
42729: PUSH
42730: DOUBLE
42731: LD_INT 0
42733: DEC
42734: ST_TO_ADDR
42735: LD_INT 5
42737: PUSH
42738: FOR_TO
42739: IFFALSE 42882
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42741: LD_ADDR_VAR 0 7
42745: PUSH
42746: LD_VAR 0 1
42750: PPUSH
42751: LD_VAR 0 6
42755: PPUSH
42756: LD_VAR 0 11
42760: PPUSH
42761: CALL_OW 272
42765: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42766: LD_ADDR_VAR 0 8
42770: PUSH
42771: LD_VAR 0 2
42775: PPUSH
42776: LD_VAR 0 6
42780: PPUSH
42781: LD_VAR 0 11
42785: PPUSH
42786: CALL_OW 273
42790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42791: LD_VAR 0 7
42795: PPUSH
42796: LD_VAR 0 8
42800: PPUSH
42801: CALL_OW 488
42805: NOT
42806: IFFALSE 42810
// continue ;
42808: GO 42738
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42810: LD_ADDR_VAR 0 9
42814: PUSH
42815: LD_VAR 0 12
42819: PUSH
42820: LD_INT 1
42822: ARRAY
42823: PPUSH
42824: LD_VAR 0 12
42828: PUSH
42829: LD_INT 2
42831: ARRAY
42832: PPUSH
42833: LD_VAR 0 7
42837: PPUSH
42838: LD_VAR 0 8
42842: PPUSH
42843: CALL_OW 298
42847: ST_TO_ADDR
// if tmp < distance then
42848: LD_VAR 0 9
42852: PUSH
42853: LD_VAR 0 10
42857: LESS
42858: IFFALSE 42880
// begin result := i ;
42860: LD_ADDR_VAR 0 5
42864: PUSH
42865: LD_VAR 0 6
42869: ST_TO_ADDR
// distance := tmp ;
42870: LD_ADDR_VAR 0 10
42874: PUSH
42875: LD_VAR 0 9
42879: ST_TO_ADDR
// end ; end ;
42880: GO 42738
42882: POP
42883: POP
// end ;
42884: LD_VAR 0 5
42888: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42889: LD_INT 0
42891: PPUSH
42892: PPUSH
// if not driver or not IsInUnit ( driver ) then
42893: LD_VAR 0 1
42897: NOT
42898: IFTRUE 42912
42900: PUSH
42901: LD_VAR 0 1
42905: PPUSH
42906: CALL_OW 310
42910: NOT
42911: OR
42912: IFFALSE 42916
// exit ;
42914: GO 43006
// vehicle := IsInUnit ( driver ) ;
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_VAR 0 1
42925: PPUSH
42926: CALL_OW 310
42930: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42931: LD_VAR 0 1
42935: PPUSH
42936: LD_STRING \
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: LD_STRING E
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_VAR 0 3
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PPUSH
43002: CALL_OW 446
// end ;
43006: LD_VAR 0 2
43010: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43011: LD_INT 0
43013: PPUSH
43014: PPUSH
// if not driver or not IsInUnit ( driver ) then
43015: LD_VAR 0 1
43019: NOT
43020: IFTRUE 43034
43022: PUSH
43023: LD_VAR 0 1
43027: PPUSH
43028: CALL_OW 310
43032: NOT
43033: OR
43034: IFFALSE 43038
// exit ;
43036: GO 43128
// vehicle := IsInUnit ( driver ) ;
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_VAR 0 1
43047: PPUSH
43048: CALL_OW 310
43052: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43053: LD_VAR 0 1
43057: PPUSH
43058: LD_STRING \
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: LD_STRING E
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_VAR 0 3
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PPUSH
43124: CALL_OW 447
// end ;
43128: LD_VAR 0 2
43132: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43133: LD_INT 0
43135: PPUSH
43136: PPUSH
43137: PPUSH
// tmp := [ ] ;
43138: LD_ADDR_VAR 0 5
43142: PUSH
43143: EMPTY
43144: ST_TO_ADDR
// for i in units do
43145: LD_ADDR_VAR 0 4
43149: PUSH
43150: LD_VAR 0 1
43154: PUSH
43155: FOR_IN
43156: IFFALSE 43194
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43158: LD_ADDR_VAR 0 5
43162: PUSH
43163: LD_VAR 0 5
43167: PPUSH
43168: LD_VAR 0 5
43172: PUSH
43173: LD_INT 1
43175: PLUS
43176: PPUSH
43177: LD_VAR 0 4
43181: PPUSH
43182: CALL_OW 256
43186: PPUSH
43187: CALL_OW 2
43191: ST_TO_ADDR
43192: GO 43155
43194: POP
43195: POP
// if not tmp then
43196: LD_VAR 0 5
43200: NOT
43201: IFFALSE 43205
// exit ;
43203: GO 43253
// if asc then
43205: LD_VAR 0 2
43209: IFFALSE 43233
// result := SortListByListAsc ( units , tmp ) else
43211: LD_ADDR_VAR 0 3
43215: PUSH
43216: LD_VAR 0 1
43220: PPUSH
43221: LD_VAR 0 5
43225: PPUSH
43226: CALL_OW 76
43230: ST_TO_ADDR
43231: GO 43253
// result := SortListByListDesc ( units , tmp ) ;
43233: LD_ADDR_VAR 0 3
43237: PUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: LD_VAR 0 5
43247: PPUSH
43248: CALL_OW 77
43252: ST_TO_ADDR
// end ;
43253: LD_VAR 0 3
43257: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43258: LD_INT 0
43260: PPUSH
43261: PPUSH
// task := GetTaskList ( mech ) ;
43262: LD_ADDR_VAR 0 4
43266: PUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 437
43276: ST_TO_ADDR
// if not task then
43277: LD_VAR 0 4
43281: NOT
43282: IFFALSE 43286
// exit ;
43284: GO 43330
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_VAR 0 4
43295: PUSH
43296: LD_INT 1
43298: ARRAY
43299: PUSH
43300: LD_INT 1
43302: ARRAY
43303: PUSH
43304: LD_STRING r
43306: EQUAL
43307: IFFALSE 43329
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: LD_INT 1
43317: ARRAY
43318: PUSH
43319: LD_INT 4
43321: ARRAY
43322: PUSH
43323: LD_VAR 0 2
43327: EQUAL
43328: AND
43329: ST_TO_ADDR
// end ;
43330: LD_VAR 0 3
43334: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43335: LD_INT 0
43337: PPUSH
// SetDir ( unit , d ) ;
43338: LD_VAR 0 1
43342: PPUSH
43343: LD_VAR 0 4
43347: PPUSH
43348: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43352: LD_ADDR_VAR 0 6
43356: PUSH
43357: LD_VAR 0 1
43361: PPUSH
43362: LD_VAR 0 2
43366: PPUSH
43367: LD_VAR 0 3
43371: PPUSH
43372: LD_VAR 0 5
43376: PPUSH
43377: CALL_OW 48
43381: ST_TO_ADDR
// end ;
43382: LD_VAR 0 6
43386: RET
// export function ToNaturalNumber ( number ) ; begin
43387: LD_INT 0
43389: PPUSH
// result := number div 1 ;
43390: LD_ADDR_VAR 0 2
43394: PUSH
43395: LD_VAR 0 1
43399: PUSH
43400: LD_INT 1
43402: DIV
43403: ST_TO_ADDR
// if number < 0 then
43404: LD_VAR 0 1
43408: PUSH
43409: LD_INT 0
43411: LESS
43412: IFFALSE 43422
// result := 0 ;
43414: LD_ADDR_VAR 0 2
43418: PUSH
43419: LD_INT 0
43421: ST_TO_ADDR
// end ;
43422: LD_VAR 0 2
43426: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43427: LD_INT 0
43429: PPUSH
43430: PPUSH
43431: PPUSH
// if not buildings then
43432: LD_VAR 0 1
43436: NOT
43437: IFFALSE 43441
// exit ;
43439: GO 43556
// tmp := [ ] ;
43441: LD_ADDR_VAR 0 5
43445: PUSH
43446: EMPTY
43447: ST_TO_ADDR
// for b in buildings do
43448: LD_ADDR_VAR 0 4
43452: PUSH
43453: LD_VAR 0 1
43457: PUSH
43458: FOR_IN
43459: IFFALSE 43497
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43461: LD_ADDR_VAR 0 5
43465: PUSH
43466: LD_VAR 0 5
43470: PPUSH
43471: LD_VAR 0 5
43475: PUSH
43476: LD_INT 1
43478: PLUS
43479: PPUSH
43480: LD_VAR 0 4
43484: PPUSH
43485: CALL_OW 266
43489: PPUSH
43490: CALL_OW 1
43494: ST_TO_ADDR
43495: GO 43458
43497: POP
43498: POP
// if not tmp then
43499: LD_VAR 0 5
43503: NOT
43504: IFFALSE 43508
// exit ;
43506: GO 43556
// if asc then
43508: LD_VAR 0 2
43512: IFFALSE 43536
// result := SortListByListAsc ( buildings , tmp ) else
43514: LD_ADDR_VAR 0 3
43518: PUSH
43519: LD_VAR 0 1
43523: PPUSH
43524: LD_VAR 0 5
43528: PPUSH
43529: CALL_OW 76
43533: ST_TO_ADDR
43534: GO 43556
// result := SortListByListDesc ( buildings , tmp ) ;
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: LD_VAR 0 5
43550: PPUSH
43551: CALL_OW 77
43555: ST_TO_ADDR
// end ;
43556: LD_VAR 0 3
43560: RET
// export function SortByClass ( units , class ) ; var un ; begin
43561: LD_INT 0
43563: PPUSH
43564: PPUSH
// if not units or not class then
43565: LD_VAR 0 1
43569: NOT
43570: IFTRUE 43579
43572: PUSH
43573: LD_VAR 0 2
43577: NOT
43578: OR
43579: IFFALSE 43583
// exit ;
43581: GO 43678
// result := [ ] ;
43583: LD_ADDR_VAR 0 3
43587: PUSH
43588: EMPTY
43589: ST_TO_ADDR
// for un in units do
43590: LD_ADDR_VAR 0 4
43594: PUSH
43595: LD_VAR 0 1
43599: PUSH
43600: FOR_IN
43601: IFFALSE 43676
// if GetClass ( un ) = class then
43603: LD_VAR 0 4
43607: PPUSH
43608: CALL_OW 257
43612: PUSH
43613: LD_VAR 0 2
43617: EQUAL
43618: IFFALSE 43645
// result := Insert ( result , 1 , un ) else
43620: LD_ADDR_VAR 0 3
43624: PUSH
43625: LD_VAR 0 3
43629: PPUSH
43630: LD_INT 1
43632: PPUSH
43633: LD_VAR 0 4
43637: PPUSH
43638: CALL_OW 2
43642: ST_TO_ADDR
43643: GO 43674
// result := Replace ( result , result + 1 , un ) ;
43645: LD_ADDR_VAR 0 3
43649: PUSH
43650: LD_VAR 0 3
43654: PPUSH
43655: LD_VAR 0 3
43659: PUSH
43660: LD_INT 1
43662: PLUS
43663: PPUSH
43664: LD_VAR 0 4
43668: PPUSH
43669: CALL_OW 1
43673: ST_TO_ADDR
43674: GO 43600
43676: POP
43677: POP
// end ;
43678: LD_VAR 0 3
43682: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43683: LD_INT 0
43685: PPUSH
43686: PPUSH
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
// result := [ ] ;
43692: LD_ADDR_VAR 0 4
43696: PUSH
43697: EMPTY
43698: ST_TO_ADDR
// if x - r < 0 then
43699: LD_VAR 0 1
43703: PUSH
43704: LD_VAR 0 3
43708: MINUS
43709: PUSH
43710: LD_INT 0
43712: LESS
43713: IFFALSE 43725
// min_x := 0 else
43715: LD_ADDR_VAR 0 8
43719: PUSH
43720: LD_INT 0
43722: ST_TO_ADDR
43723: GO 43741
// min_x := x - r ;
43725: LD_ADDR_VAR 0 8
43729: PUSH
43730: LD_VAR 0 1
43734: PUSH
43735: LD_VAR 0 3
43739: MINUS
43740: ST_TO_ADDR
// if y - r < 0 then
43741: LD_VAR 0 2
43745: PUSH
43746: LD_VAR 0 3
43750: MINUS
43751: PUSH
43752: LD_INT 0
43754: LESS
43755: IFFALSE 43767
// min_y := 0 else
43757: LD_ADDR_VAR 0 7
43761: PUSH
43762: LD_INT 0
43764: ST_TO_ADDR
43765: GO 43783
// min_y := y - r ;
43767: LD_ADDR_VAR 0 7
43771: PUSH
43772: LD_VAR 0 2
43776: PUSH
43777: LD_VAR 0 3
43781: MINUS
43782: ST_TO_ADDR
// max_x := x + r ;
43783: LD_ADDR_VAR 0 9
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: LD_VAR 0 3
43797: PLUS
43798: ST_TO_ADDR
// max_y := y + r ;
43799: LD_ADDR_VAR 0 10
43803: PUSH
43804: LD_VAR 0 2
43808: PUSH
43809: LD_VAR 0 3
43813: PLUS
43814: ST_TO_ADDR
// for _x = min_x to max_x do
43815: LD_ADDR_VAR 0 5
43819: PUSH
43820: DOUBLE
43821: LD_VAR 0 8
43825: DEC
43826: ST_TO_ADDR
43827: LD_VAR 0 9
43831: PUSH
43832: FOR_TO
43833: IFFALSE 43934
// for _y = min_y to max_y do
43835: LD_ADDR_VAR 0 6
43839: PUSH
43840: DOUBLE
43841: LD_VAR 0 7
43845: DEC
43846: ST_TO_ADDR
43847: LD_VAR 0 10
43851: PUSH
43852: FOR_TO
43853: IFFALSE 43930
// begin if not ValidHex ( _x , _y ) then
43855: LD_VAR 0 5
43859: PPUSH
43860: LD_VAR 0 6
43864: PPUSH
43865: CALL_OW 488
43869: NOT
43870: IFFALSE 43874
// continue ;
43872: GO 43852
// if GetResourceTypeXY ( _x , _y ) then
43874: LD_VAR 0 5
43878: PPUSH
43879: LD_VAR 0 6
43883: PPUSH
43884: CALL_OW 283
43888: IFFALSE 43928
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43890: LD_ADDR_VAR 0 4
43894: PUSH
43895: LD_VAR 0 4
43899: PPUSH
43900: LD_VAR 0 4
43904: PUSH
43905: LD_INT 1
43907: PLUS
43908: PPUSH
43909: LD_VAR 0 5
43913: PUSH
43914: LD_VAR 0 6
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PPUSH
43923: CALL_OW 1
43927: ST_TO_ADDR
// end ;
43928: GO 43852
43930: POP
43931: POP
43932: GO 43832
43934: POP
43935: POP
// end ;
43936: LD_VAR 0 4
43940: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43941: LD_INT 0
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
// if not units then
43951: LD_VAR 0 1
43955: NOT
43956: IFFALSE 43960
// exit ;
43958: GO 44492
// result := UnitFilter ( units , [ f_ok ] ) ;
43960: LD_ADDR_VAR 0 3
43964: PUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: LD_INT 50
43972: PUSH
43973: EMPTY
43974: LIST
43975: PPUSH
43976: CALL_OW 72
43980: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43981: LD_ADDR_VAR 0 8
43985: PUSH
43986: LD_VAR 0 1
43990: PUSH
43991: LD_INT 1
43993: ARRAY
43994: PPUSH
43995: CALL_OW 255
43999: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44000: LD_ADDR_VAR 0 10
44004: PUSH
44005: LD_INT 29
44007: PUSH
44008: LD_INT 91
44010: PUSH
44011: LD_INT 49
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// if not result then
44019: LD_VAR 0 3
44023: NOT
44024: IFFALSE 44028
// exit ;
44026: GO 44492
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44028: LD_ADDR_VAR 0 5
44032: PUSH
44033: LD_INT 81
44035: PUSH
44036: LD_VAR 0 8
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PPUSH
44045: CALL_OW 69
44049: ST_TO_ADDR
// for i in result do
44050: LD_ADDR_VAR 0 4
44054: PUSH
44055: LD_VAR 0 3
44059: PUSH
44060: FOR_IN
44061: IFFALSE 44490
// begin tag := GetTag ( i ) + 1 ;
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: LD_VAR 0 4
44072: PPUSH
44073: CALL_OW 110
44077: PUSH
44078: LD_INT 1
44080: PLUS
44081: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44082: LD_ADDR_VAR 0 7
44086: PUSH
44087: LD_VAR 0 4
44091: PPUSH
44092: CALL_OW 250
44096: PPUSH
44097: LD_VAR 0 4
44101: PPUSH
44102: CALL_OW 251
44106: PPUSH
44107: LD_INT 4
44109: PPUSH
44110: CALL 43683 0 3
44114: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44115: LD_VAR 0 4
44119: PPUSH
44120: CALL_OW 247
44124: PUSH
44125: LD_INT 2
44127: EQUAL
44128: IFFALSE 44140
44130: PUSH
44131: LD_VAR 0 7
44135: PUSH
44136: LD_INT 2
44138: GREATER
44139: AND
44140: IFFALSE 44160
44142: PUSH
44143: LD_VAR 0 4
44147: PPUSH
44148: CALL_OW 264
44152: PUSH
44153: LD_VAR 0 10
44157: IN
44158: NOT
44159: AND
44160: IFFALSE 44199
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44162: LD_VAR 0 4
44166: PPUSH
44167: LD_VAR 0 7
44171: PUSH
44172: LD_INT 1
44174: ARRAY
44175: PUSH
44176: LD_INT 1
44178: ARRAY
44179: PPUSH
44180: LD_VAR 0 7
44184: PUSH
44185: LD_INT 1
44187: ARRAY
44188: PUSH
44189: LD_INT 2
44191: ARRAY
44192: PPUSH
44193: CALL_OW 116
44197: GO 44488
// if path > tag then
44199: LD_VAR 0 2
44203: PUSH
44204: LD_VAR 0 9
44208: GREATER
44209: IFFALSE 44417
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: LD_VAR 0 5
44220: PPUSH
44221: LD_INT 91
44223: PUSH
44224: LD_VAR 0 4
44228: PUSH
44229: LD_INT 8
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: PPUSH
44237: CALL_OW 72
44241: ST_TO_ADDR
// if nearEnemy then
44242: LD_VAR 0 6
44246: IFFALSE 44315
// begin if GetWeapon ( i ) = ru_time_lapser then
44248: LD_VAR 0 4
44252: PPUSH
44253: CALL_OW 264
44257: PUSH
44258: LD_INT 49
44260: EQUAL
44261: IFFALSE 44289
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44263: LD_VAR 0 4
44267: PPUSH
44268: LD_VAR 0 6
44272: PPUSH
44273: LD_VAR 0 4
44277: PPUSH
44278: CALL_OW 74
44282: PPUSH
44283: CALL_OW 112
44287: GO 44313
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44289: LD_VAR 0 4
44293: PPUSH
44294: LD_VAR 0 6
44298: PPUSH
44299: LD_VAR 0 4
44303: PPUSH
44304: CALL_OW 74
44308: PPUSH
44309: CALL 45573 0 2
// end else
44313: GO 44415
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44315: LD_VAR 0 4
44319: PPUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_VAR 0 9
44329: ARRAY
44330: PUSH
44331: LD_INT 1
44333: ARRAY
44334: PPUSH
44335: LD_VAR 0 2
44339: PUSH
44340: LD_VAR 0 9
44344: ARRAY
44345: PUSH
44346: LD_INT 2
44348: ARRAY
44349: PPUSH
44350: CALL_OW 297
44354: PUSH
44355: LD_INT 6
44357: GREATER
44358: IFFALSE 44401
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44360: LD_VAR 0 4
44364: PPUSH
44365: LD_VAR 0 2
44369: PUSH
44370: LD_VAR 0 9
44374: ARRAY
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: PPUSH
44380: LD_VAR 0 2
44384: PUSH
44385: LD_VAR 0 9
44389: ARRAY
44390: PUSH
44391: LD_INT 2
44393: ARRAY
44394: PPUSH
44395: CALL_OW 114
44399: GO 44415
// SetTag ( i , tag ) ;
44401: LD_VAR 0 4
44405: PPUSH
44406: LD_VAR 0 9
44410: PPUSH
44411: CALL_OW 109
// end else
44415: GO 44488
// if enemy then
44417: LD_VAR 0 5
44421: IFFALSE 44488
// begin if GetWeapon ( i ) = ru_time_lapser then
44423: LD_VAR 0 4
44427: PPUSH
44428: CALL_OW 264
44432: PUSH
44433: LD_INT 49
44435: EQUAL
44436: IFFALSE 44464
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44438: LD_VAR 0 4
44442: PPUSH
44443: LD_VAR 0 5
44447: PPUSH
44448: LD_VAR 0 4
44452: PPUSH
44453: CALL_OW 74
44457: PPUSH
44458: CALL_OW 112
44462: GO 44488
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44464: LD_VAR 0 4
44468: PPUSH
44469: LD_VAR 0 5
44473: PPUSH
44474: LD_VAR 0 4
44478: PPUSH
44479: CALL_OW 74
44483: PPUSH
44484: CALL 45573 0 2
// end ; end ;
44488: GO 44060
44490: POP
44491: POP
// end ;
44492: LD_VAR 0 3
44496: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44497: LD_INT 0
44499: PPUSH
44500: PPUSH
44501: PPUSH
// if not unit or IsInUnit ( unit ) then
44502: LD_VAR 0 1
44506: NOT
44507: IFTRUE 44520
44509: PUSH
44510: LD_VAR 0 1
44514: PPUSH
44515: CALL_OW 310
44519: OR
44520: IFFALSE 44524
// exit ;
44522: GO 44615
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44524: LD_ADDR_VAR 0 4
44528: PUSH
44529: LD_VAR 0 1
44533: PPUSH
44534: CALL_OW 250
44538: PPUSH
44539: LD_VAR 0 2
44543: PPUSH
44544: LD_INT 1
44546: PPUSH
44547: CALL_OW 272
44551: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44552: LD_ADDR_VAR 0 5
44556: PUSH
44557: LD_VAR 0 1
44561: PPUSH
44562: CALL_OW 251
44566: PPUSH
44567: LD_VAR 0 2
44571: PPUSH
44572: LD_INT 1
44574: PPUSH
44575: CALL_OW 273
44579: ST_TO_ADDR
// if ValidHex ( x , y ) then
44580: LD_VAR 0 4
44584: PPUSH
44585: LD_VAR 0 5
44589: PPUSH
44590: CALL_OW 488
44594: IFFALSE 44615
// ComTurnXY ( unit , x , y ) ;
44596: LD_VAR 0 1
44600: PPUSH
44601: LD_VAR 0 4
44605: PPUSH
44606: LD_VAR 0 5
44610: PPUSH
44611: CALL_OW 118
// end ;
44615: LD_VAR 0 3
44619: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44620: LD_INT 0
44622: PPUSH
44623: PPUSH
// result := false ;
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_INT 0
44631: ST_TO_ADDR
// if not units then
44632: LD_VAR 0 2
44636: NOT
44637: IFFALSE 44641
// exit ;
44639: GO 44686
// for i in units do
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 2
44650: PUSH
44651: FOR_IN
44652: IFFALSE 44684
// if See ( side , i ) then
44654: LD_VAR 0 1
44658: PPUSH
44659: LD_VAR 0 4
44663: PPUSH
44664: CALL_OW 292
44668: IFFALSE 44682
// begin result := true ;
44670: LD_ADDR_VAR 0 3
44674: PUSH
44675: LD_INT 1
44677: ST_TO_ADDR
// exit ;
44678: POP
44679: POP
44680: GO 44686
// end ;
44682: GO 44651
44684: POP
44685: POP
// end ;
44686: LD_VAR 0 3
44690: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44691: LD_INT 0
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
// if not unit or not points then
44697: LD_VAR 0 1
44701: NOT
44702: IFTRUE 44711
44704: PUSH
44705: LD_VAR 0 2
44709: NOT
44710: OR
44711: IFFALSE 44715
// exit ;
44713: GO 44805
// dist := 99999 ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: LD_INT 99999
44722: ST_TO_ADDR
// for i in points do
44723: LD_ADDR_VAR 0 4
44727: PUSH
44728: LD_VAR 0 2
44732: PUSH
44733: FOR_IN
44734: IFFALSE 44803
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44736: LD_ADDR_VAR 0 6
44740: PUSH
44741: LD_VAR 0 1
44745: PPUSH
44746: LD_VAR 0 4
44750: PUSH
44751: LD_INT 1
44753: ARRAY
44754: PPUSH
44755: LD_VAR 0 4
44759: PUSH
44760: LD_INT 2
44762: ARRAY
44763: PPUSH
44764: CALL_OW 297
44768: ST_TO_ADDR
// if tmpDist < dist then
44769: LD_VAR 0 6
44773: PUSH
44774: LD_VAR 0 5
44778: LESS
44779: IFFALSE 44801
// begin result := i ;
44781: LD_ADDR_VAR 0 3
44785: PUSH
44786: LD_VAR 0 4
44790: ST_TO_ADDR
// dist := tmpDist ;
44791: LD_ADDR_VAR 0 5
44795: PUSH
44796: LD_VAR 0 6
44800: ST_TO_ADDR
// end ; end ;
44801: GO 44733
44803: POP
44804: POP
// end ;
44805: LD_VAR 0 3
44809: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44810: LD_INT 0
44812: PPUSH
// uc_side := side ;
44813: LD_ADDR_OWVAR 20
44817: PUSH
44818: LD_VAR 0 1
44822: ST_TO_ADDR
// uc_nation := 3 ;
44823: LD_ADDR_OWVAR 21
44827: PUSH
44828: LD_INT 3
44830: ST_TO_ADDR
// vc_chassis := 25 ;
44831: LD_ADDR_OWVAR 37
44835: PUSH
44836: LD_INT 25
44838: ST_TO_ADDR
// vc_engine := engine_siberite ;
44839: LD_ADDR_OWVAR 39
44843: PUSH
44844: LD_INT 3
44846: ST_TO_ADDR
// vc_control := control_computer ;
44847: LD_ADDR_OWVAR 38
44851: PUSH
44852: LD_INT 3
44854: ST_TO_ADDR
// vc_weapon := 59 ;
44855: LD_ADDR_OWVAR 40
44859: PUSH
44860: LD_INT 59
44862: ST_TO_ADDR
// result := CreateVehicle ;
44863: LD_ADDR_VAR 0 5
44867: PUSH
44868: CALL_OW 45
44872: ST_TO_ADDR
// SetDir ( result , d ) ;
44873: LD_VAR 0 5
44877: PPUSH
44878: LD_VAR 0 4
44882: PPUSH
44883: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44887: LD_VAR 0 5
44891: PPUSH
44892: LD_VAR 0 2
44896: PPUSH
44897: LD_VAR 0 3
44901: PPUSH
44902: LD_INT 0
44904: PPUSH
44905: CALL_OW 48
// end ;
44909: LD_VAR 0 5
44913: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44914: LD_INT 0
44916: PPUSH
44917: PPUSH
44918: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44919: LD_ADDR_VAR 0 2
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44942: LD_VAR 0 1
44946: NOT
44947: IFTRUE 44980
44949: PUSH
44950: LD_VAR 0 1
44954: PPUSH
44955: CALL_OW 264
44959: PUSH
44960: LD_INT 12
44962: PUSH
44963: LD_INT 51
44965: PUSH
44966: LD_INT 32
44968: PUSH
44969: LD_INT 89
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: IN
44978: NOT
44979: OR
44980: IFFALSE 44984
// exit ;
44982: GO 45082
// for i := 1 to 3 do
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: DOUBLE
44990: LD_INT 1
44992: DEC
44993: ST_TO_ADDR
44994: LD_INT 3
44996: PUSH
44997: FOR_TO
44998: IFFALSE 45080
// begin tmp := GetCargo ( cargo , i ) ;
45000: LD_ADDR_VAR 0 4
45004: PUSH
45005: LD_VAR 0 1
45009: PPUSH
45010: LD_VAR 0 3
45014: PPUSH
45015: CALL_OW 289
45019: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45020: LD_ADDR_VAR 0 2
45024: PUSH
45025: LD_VAR 0 2
45029: PPUSH
45030: LD_VAR 0 3
45034: PPUSH
45035: LD_VAR 0 4
45039: PPUSH
45040: CALL_OW 1
45044: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45045: LD_ADDR_VAR 0 2
45049: PUSH
45050: LD_VAR 0 2
45054: PPUSH
45055: LD_INT 4
45057: PPUSH
45058: LD_VAR 0 2
45062: PUSH
45063: LD_INT 4
45065: ARRAY
45066: PUSH
45067: LD_VAR 0 4
45071: PLUS
45072: PPUSH
45073: CALL_OW 1
45077: ST_TO_ADDR
// end ;
45078: GO 44997
45080: POP
45081: POP
// end ;
45082: LD_VAR 0 2
45086: RET
// export function Length ( array ) ; begin
45087: LD_INT 0
45089: PPUSH
// result := array + 0 ;
45090: LD_ADDR_VAR 0 2
45094: PUSH
45095: LD_VAR 0 1
45099: PUSH
45100: LD_INT 0
45102: PLUS
45103: ST_TO_ADDR
// end ;
45104: LD_VAR 0 2
45108: RET
// export function PrepareArray ( array ) ; begin
45109: LD_INT 0
45111: PPUSH
// result := array diff 0 ;
45112: LD_ADDR_VAR 0 2
45116: PUSH
45117: LD_VAR 0 1
45121: PUSH
45122: LD_INT 0
45124: DIFF
45125: ST_TO_ADDR
// if not result [ 1 ] then
45126: LD_VAR 0 2
45130: PUSH
45131: LD_INT 1
45133: ARRAY
45134: NOT
45135: IFFALSE 45155
// result := Delete ( result , 1 ) ;
45137: LD_ADDR_VAR 0 2
45141: PUSH
45142: LD_VAR 0 2
45146: PPUSH
45147: LD_INT 1
45149: PPUSH
45150: CALL_OW 3
45154: ST_TO_ADDR
// end ;
45155: LD_VAR 0 2
45159: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45160: LD_INT 0
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
// sibRocketRange := 25 ;
45166: LD_ADDR_VAR 0 6
45170: PUSH
45171: LD_INT 25
45173: ST_TO_ADDR
// result := false ;
45174: LD_ADDR_VAR 0 4
45178: PUSH
45179: LD_INT 0
45181: ST_TO_ADDR
// for i := 0 to 5 do
45182: LD_ADDR_VAR 0 5
45186: PUSH
45187: DOUBLE
45188: LD_INT 0
45190: DEC
45191: ST_TO_ADDR
45192: LD_INT 5
45194: PUSH
45195: FOR_TO
45196: IFFALSE 45263
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45198: LD_VAR 0 1
45202: PPUSH
45203: LD_VAR 0 5
45207: PPUSH
45208: LD_VAR 0 6
45212: PPUSH
45213: CALL_OW 272
45217: PPUSH
45218: LD_VAR 0 2
45222: PPUSH
45223: LD_VAR 0 5
45227: PPUSH
45228: LD_VAR 0 6
45232: PPUSH
45233: CALL_OW 273
45237: PPUSH
45238: LD_VAR 0 3
45242: PPUSH
45243: CALL_OW 309
45247: IFFALSE 45261
// begin result := true ;
45249: LD_ADDR_VAR 0 4
45253: PUSH
45254: LD_INT 1
45256: ST_TO_ADDR
// exit ;
45257: POP
45258: POP
45259: GO 45265
// end ;
45261: GO 45195
45263: POP
45264: POP
// end ;
45265: LD_VAR 0 4
45269: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45270: LD_INT 0
45272: PPUSH
45273: PPUSH
45274: PPUSH
// if btype = b_depot then
45275: LD_VAR 0 2
45279: PUSH
45280: LD_INT 0
45282: EQUAL
45283: IFFALSE 45295
// begin result := true ;
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: LD_INT 1
45292: ST_TO_ADDR
// exit ;
45293: GO 45415
// end ; pom := GetBase ( depot ) ;
45295: LD_ADDR_VAR 0 4
45299: PUSH
45300: LD_VAR 0 1
45304: PPUSH
45305: CALL_OW 274
45309: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45310: LD_ADDR_VAR 0 5
45314: PUSH
45315: LD_VAR 0 2
45319: PPUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: CALL_OW 248
45329: PPUSH
45330: CALL_OW 450
45334: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45335: LD_ADDR_VAR 0 3
45339: PUSH
45340: LD_VAR 0 4
45344: PPUSH
45345: LD_INT 1
45347: PPUSH
45348: CALL_OW 275
45352: PUSH
45353: LD_VAR 0 5
45357: PUSH
45358: LD_INT 1
45360: ARRAY
45361: GREATEREQUAL
45362: IFFALSE 45388
45364: PUSH
45365: LD_VAR 0 4
45369: PPUSH
45370: LD_INT 2
45372: PPUSH
45373: CALL_OW 275
45377: PUSH
45378: LD_VAR 0 5
45382: PUSH
45383: LD_INT 2
45385: ARRAY
45386: GREATEREQUAL
45387: AND
45388: IFFALSE 45414
45390: PUSH
45391: LD_VAR 0 4
45395: PPUSH
45396: LD_INT 3
45398: PPUSH
45399: CALL_OW 275
45403: PUSH
45404: LD_VAR 0 5
45408: PUSH
45409: LD_INT 3
45411: ARRAY
45412: GREATEREQUAL
45413: AND
45414: ST_TO_ADDR
// end ;
45415: LD_VAR 0 3
45419: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45420: LD_INT 0
45422: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45423: LD_VAR 0 1
45427: PPUSH
45428: LD_VAR 0 2
45432: PPUSH
45433: LD_INT 0
45435: PPUSH
45436: LD_INT 0
45438: PPUSH
45439: LD_INT 1
45441: PPUSH
45442: LD_INT 0
45444: PPUSH
45445: CALL_OW 587
// end ;
45449: LD_VAR 0 3
45453: RET
// export function CenterOnNow ( unit ) ; begin
45454: LD_INT 0
45456: PPUSH
// result := IsInUnit ( unit ) ;
45457: LD_ADDR_VAR 0 2
45461: PUSH
45462: LD_VAR 0 1
45466: PPUSH
45467: CALL_OW 310
45471: ST_TO_ADDR
// if not result then
45472: LD_VAR 0 2
45476: NOT
45477: IFFALSE 45489
// result := unit ;
45479: LD_ADDR_VAR 0 2
45483: PUSH
45484: LD_VAR 0 1
45488: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45489: LD_VAR 0 1
45493: PPUSH
45494: CALL_OW 87
// end ;
45498: LD_VAR 0 2
45502: RET
// export function ComMoveHex ( unit , hex ) ; begin
45503: LD_INT 0
45505: PPUSH
// if not hex then
45506: LD_VAR 0 2
45510: NOT
45511: IFFALSE 45515
// exit ;
45513: GO 45568
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45515: LD_VAR 0 2
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: LD_VAR 0 2
45528: PUSH
45529: LD_INT 2
45531: ARRAY
45532: PPUSH
45533: CALL_OW 428
45537: IFFALSE 45541
// exit ;
45539: GO 45568
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45541: LD_VAR 0 1
45545: PPUSH
45546: LD_VAR 0 2
45550: PUSH
45551: LD_INT 1
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 2
45559: PUSH
45560: LD_INT 2
45562: ARRAY
45563: PPUSH
45564: CALL_OW 111
// end ;
45568: LD_VAR 0 3
45572: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45573: LD_INT 0
45575: PPUSH
45576: PPUSH
45577: PPUSH
// if not unit or not enemy then
45578: LD_VAR 0 1
45582: NOT
45583: IFTRUE 45592
45585: PUSH
45586: LD_VAR 0 2
45590: NOT
45591: OR
45592: IFFALSE 45596
// exit ;
45594: GO 45722
// x := GetX ( enemy ) ;
45596: LD_ADDR_VAR 0 4
45600: PUSH
45601: LD_VAR 0 2
45605: PPUSH
45606: CALL_OW 250
45610: ST_TO_ADDR
// y := GetY ( enemy ) ;
45611: LD_ADDR_VAR 0 5
45615: PUSH
45616: LD_VAR 0 2
45620: PPUSH
45621: CALL_OW 251
45625: ST_TO_ADDR
// if ValidHex ( x , y ) then
45626: LD_VAR 0 4
45630: PPUSH
45631: LD_VAR 0 5
45635: PPUSH
45636: CALL_OW 488
45640: IFFALSE 45722
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45642: LD_VAR 0 2
45646: PPUSH
45647: CALL_OW 247
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: IN
45662: IFTRUE 45685
45664: PUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 255
45674: PPUSH
45675: LD_VAR 0 2
45679: PPUSH
45680: CALL_OW 292
45684: OR
45685: IFFALSE 45703
// ComAttackUnit ( unit , enemy ) else
45687: LD_VAR 0 1
45691: PPUSH
45692: LD_VAR 0 2
45696: PPUSH
45697: CALL_OW 115
45701: GO 45722
// ComAgressiveMove ( unit , x , y ) ;
45703: LD_VAR 0 1
45707: PPUSH
45708: LD_VAR 0 4
45712: PPUSH
45713: LD_VAR 0 5
45717: PPUSH
45718: CALL_OW 114
// end ;
45722: LD_VAR 0 3
45726: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
45731: PPUSH
// list := AreaToList ( area , 0 ) ;
45732: LD_ADDR_VAR 0 5
45736: PUSH
45737: LD_VAR 0 1
45741: PPUSH
45742: LD_INT 0
45744: PPUSH
45745: CALL_OW 517
45749: ST_TO_ADDR
// if not list then
45750: LD_VAR 0 5
45754: NOT
45755: IFFALSE 45759
// exit ;
45757: GO 45889
// if all then
45759: LD_VAR 0 2
45763: IFFALSE 45851
// begin for i := 1 to list [ 1 ] do
45765: LD_ADDR_VAR 0 4
45769: PUSH
45770: DOUBLE
45771: LD_INT 1
45773: DEC
45774: ST_TO_ADDR
45775: LD_VAR 0 5
45779: PUSH
45780: LD_INT 1
45782: ARRAY
45783: PUSH
45784: FOR_TO
45785: IFFALSE 45847
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45787: LD_ADDR_VAR 0 3
45791: PUSH
45792: LD_VAR 0 3
45796: PPUSH
45797: LD_VAR 0 3
45801: PUSH
45802: LD_INT 1
45804: PLUS
45805: PPUSH
45806: LD_VAR 0 5
45810: PUSH
45811: LD_INT 1
45813: ARRAY
45814: PUSH
45815: LD_VAR 0 4
45819: ARRAY
45820: PUSH
45821: LD_VAR 0 5
45825: PUSH
45826: LD_INT 2
45828: ARRAY
45829: PUSH
45830: LD_VAR 0 4
45834: ARRAY
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PPUSH
45840: CALL_OW 1
45844: ST_TO_ADDR
45845: GO 45784
45847: POP
45848: POP
// exit ;
45849: GO 45889
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45851: LD_ADDR_VAR 0 3
45855: PUSH
45856: LD_VAR 0 5
45860: PUSH
45861: LD_INT 1
45863: ARRAY
45864: PUSH
45865: LD_INT 1
45867: ARRAY
45868: PUSH
45869: LD_VAR 0 5
45873: PUSH
45874: LD_INT 2
45876: ARRAY
45877: PUSH
45878: LD_INT 1
45880: ARRAY
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: ST_TO_ADDR
// end ;
45889: LD_VAR 0 3
45893: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45894: LD_INT 0
45896: PPUSH
45897: PPUSH
// list := AreaToList ( area , 0 ) ;
45898: LD_ADDR_VAR 0 4
45902: PUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: LD_INT 0
45910: PPUSH
45911: CALL_OW 517
45915: ST_TO_ADDR
// if not list then
45916: LD_VAR 0 4
45920: NOT
45921: IFFALSE 45925
// exit ;
45923: GO 45966
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45925: LD_ADDR_VAR 0 3
45929: PUSH
45930: LD_VAR 0 4
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PUSH
45943: LD_VAR 0 4
45947: PUSH
45948: LD_INT 2
45950: ARRAY
45951: PUSH
45952: LD_INT 1
45954: ARRAY
45955: PUSH
45956: LD_VAR 0 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: ST_TO_ADDR
// end ;
45966: LD_VAR 0 3
45970: RET
// export function First ( array ) ; begin
45971: LD_INT 0
45973: PPUSH
// if not array then
45974: LD_VAR 0 1
45978: NOT
45979: IFFALSE 45983
// exit ;
45981: GO 45997
// result := array [ 1 ] ;
45983: LD_ADDR_VAR 0 2
45987: PUSH
45988: LD_VAR 0 1
45992: PUSH
45993: LD_INT 1
45995: ARRAY
45996: ST_TO_ADDR
// end ;
45997: LD_VAR 0 2
46001: RET
// export function Last ( array ) ; begin
46002: LD_INT 0
46004: PPUSH
// if not array then
46005: LD_VAR 0 1
46009: NOT
46010: IFFALSE 46014
// exit ;
46012: GO 46030
// result := array [ array ] ;
46014: LD_ADDR_VAR 0 2
46018: PUSH
46019: LD_VAR 0 1
46023: PUSH
46024: LD_VAR 0 1
46028: ARRAY
46029: ST_TO_ADDR
// end ;
46030: LD_VAR 0 2
46034: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46035: LD_INT 0
46037: PPUSH
46038: PPUSH
// result := [ ] ;
46039: LD_ADDR_VAR 0 5
46043: PUSH
46044: EMPTY
46045: ST_TO_ADDR
// if not array then
46046: LD_VAR 0 1
46050: NOT
46051: IFFALSE 46055
// exit ;
46053: GO 46167
// for i := 1 to array do
46055: LD_ADDR_VAR 0 6
46059: PUSH
46060: DOUBLE
46061: LD_INT 1
46063: DEC
46064: ST_TO_ADDR
46065: LD_VAR 0 1
46069: PUSH
46070: FOR_TO
46071: IFFALSE 46165
// if array [ i ] [ index ] = value then
46073: LD_VAR 0 1
46077: PUSH
46078: LD_VAR 0 6
46082: ARRAY
46083: PUSH
46084: LD_VAR 0 2
46088: ARRAY
46089: PUSH
46090: LD_VAR 0 3
46094: EQUAL
46095: IFFALSE 46163
// begin if indexColumn then
46097: LD_VAR 0 4
46101: IFFALSE 46137
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46103: LD_ADDR_VAR 0 5
46107: PUSH
46108: LD_VAR 0 5
46112: PPUSH
46113: LD_VAR 0 1
46117: PUSH
46118: LD_VAR 0 6
46122: ARRAY
46123: PUSH
46124: LD_VAR 0 4
46128: ARRAY
46129: PPUSH
46130: CALL 41175 0 2
46134: ST_TO_ADDR
46135: GO 46163
// result := Join ( result , array [ i ] ) ;
46137: LD_ADDR_VAR 0 5
46141: PUSH
46142: LD_VAR 0 5
46146: PPUSH
46147: LD_VAR 0 1
46151: PUSH
46152: LD_VAR 0 6
46156: ARRAY
46157: PPUSH
46158: CALL 41175 0 2
46162: ST_TO_ADDR
// end ;
46163: GO 46070
46165: POP
46166: POP
// end ;
46167: LD_VAR 0 5
46171: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46172: LD_INT 0
46174: PPUSH
// if not vehicles or not parkingPoint then
46175: LD_VAR 0 1
46179: NOT
46180: IFTRUE 46189
46182: PUSH
46183: LD_VAR 0 2
46187: NOT
46188: OR
46189: IFFALSE 46193
// exit ;
46191: GO 46291
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46193: LD_ADDR_VAR 0 1
46197: PUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: LD_INT 50
46205: PUSH
46206: EMPTY
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 92
46214: PUSH
46215: LD_VAR 0 2
46219: PUSH
46220: LD_INT 1
46222: ARRAY
46223: PUSH
46224: LD_VAR 0 2
46228: PUSH
46229: LD_INT 2
46231: ARRAY
46232: PUSH
46233: LD_INT 8
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PPUSH
46250: CALL_OW 72
46254: ST_TO_ADDR
// if not vehicles then
46255: LD_VAR 0 1
46259: NOT
46260: IFFALSE 46264
// exit ;
46262: GO 46291
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46264: LD_VAR 0 1
46268: PPUSH
46269: LD_VAR 0 2
46273: PUSH
46274: LD_INT 1
46276: ARRAY
46277: PPUSH
46278: LD_VAR 0 2
46282: PUSH
46283: LD_INT 2
46285: ARRAY
46286: PPUSH
46287: CALL_OW 111
// end ;
46291: LD_VAR 0 3
46295: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46296: LD_INT 0
46298: PPUSH
46299: PPUSH
46300: PPUSH
// if not side or not area then
46301: LD_VAR 0 1
46305: NOT
46306: IFTRUE 46315
46308: PUSH
46309: LD_VAR 0 2
46313: NOT
46314: OR
46315: IFFALSE 46319
// exit ;
46317: GO 46438
// tmp := AreaToList ( area , 0 ) ;
46319: LD_ADDR_VAR 0 5
46323: PUSH
46324: LD_VAR 0 2
46328: PPUSH
46329: LD_INT 0
46331: PPUSH
46332: CALL_OW 517
46336: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46337: LD_ADDR_VAR 0 4
46341: PUSH
46342: DOUBLE
46343: LD_INT 1
46345: DEC
46346: ST_TO_ADDR
46347: LD_VAR 0 5
46351: PUSH
46352: LD_INT 1
46354: ARRAY
46355: PUSH
46356: FOR_TO
46357: IFFALSE 46436
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46359: LD_VAR 0 5
46363: PUSH
46364: LD_INT 1
46366: ARRAY
46367: PUSH
46368: LD_VAR 0 4
46372: ARRAY
46373: PPUSH
46374: LD_VAR 0 5
46378: PUSH
46379: LD_INT 2
46381: ARRAY
46382: PUSH
46383: LD_VAR 0 4
46387: ARRAY
46388: PPUSH
46389: CALL_OW 351
46393: IFFALSE 46434
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46395: LD_VAR 0 5
46399: PUSH
46400: LD_INT 1
46402: ARRAY
46403: PUSH
46404: LD_VAR 0 4
46408: ARRAY
46409: PPUSH
46410: LD_VAR 0 5
46414: PUSH
46415: LD_INT 2
46417: ARRAY
46418: PUSH
46419: LD_VAR 0 4
46423: ARRAY
46424: PPUSH
46425: LD_VAR 0 1
46429: PPUSH
46430: CALL_OW 244
// end ;
46434: GO 46356
46436: POP
46437: POP
// end ;
46438: LD_VAR 0 3
46442: RET
// export function UniqueArray ( array ) ; var i ; begin
46443: LD_INT 0
46445: PPUSH
46446: PPUSH
// result := [ ] ;
46447: LD_ADDR_VAR 0 2
46451: PUSH
46452: EMPTY
46453: ST_TO_ADDR
// if not array then
46454: LD_VAR 0 1
46458: NOT
46459: IFFALSE 46463
// exit ;
46461: GO 46524
// for i := 1 to array do
46463: LD_ADDR_VAR 0 3
46467: PUSH
46468: DOUBLE
46469: LD_INT 1
46471: DEC
46472: ST_TO_ADDR
46473: LD_VAR 0 1
46477: PUSH
46478: FOR_TO
46479: IFFALSE 46522
// if not array [ i ] in result then
46481: LD_VAR 0 1
46485: PUSH
46486: LD_VAR 0 3
46490: ARRAY
46491: PUSH
46492: LD_VAR 0 2
46496: IN
46497: NOT
46498: IFFALSE 46520
// result := Join ( result , i ) ;
46500: LD_ADDR_VAR 0 2
46504: PUSH
46505: LD_VAR 0 2
46509: PPUSH
46510: LD_VAR 0 3
46514: PPUSH
46515: CALL 41175 0 2
46519: ST_TO_ADDR
46520: GO 46478
46522: POP
46523: POP
// end ; end_of_file
46524: LD_VAR 0 2
46528: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46529: LD_INT 0
46531: PPUSH
46532: PPUSH
// disable ( mpActive ) ;
46533: LD_INT 100
46535: DISABLE_MARKED
// disable ( mpWin ) ;
46536: LD_INT 101
46538: DISABLE_MARKED
// disable ( mpLose ) ;
46539: LD_INT 102
46541: DISABLE_MARKED
// mpGameType := 0 ;
46542: LD_ADDR_EXP 1
46546: PUSH
46547: LD_INT 0
46549: ST_TO_ADDR
// mpGameSettings := [ ] ;
46550: LD_ADDR_EXP 4
46554: PUSH
46555: EMPTY
46556: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46557: LD_ADDR_EXP 2
46561: PUSH
46562: EMPTY
46563: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46564: LD_ADDR_EXP 3
46568: PUSH
46569: EMPTY
46570: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46571: LD_ADDR_EXP 27
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46586: LD_ADDR_EXP 10
46590: PUSH
46591: EMPTY
46592: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46593: LD_ADDR_EXP 11
46597: PUSH
46598: EMPTY
46599: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46600: LD_ADDR_EXP 39
46604: PUSH
46605: EMPTY
46606: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46607: LD_ADDR_EXP 40
46611: PUSH
46612: EMPTY
46613: ST_TO_ADDR
// mpDepots := [ ] ;
46614: LD_ADDR_EXP 12
46618: PUSH
46619: EMPTY
46620: ST_TO_ADDR
// mpBuildings := [ ] ;
46621: LD_ADDR_EXP 15
46625: PUSH
46626: EMPTY
46627: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46628: LD_ADDR_EXP 16
46632: PUSH
46633: EMPTY
46634: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46635: LD_ADDR_EXP 17
46639: PUSH
46640: EMPTY
46641: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46642: LD_ADDR_EXP 18
46646: PUSH
46647: EMPTY
46648: ST_TO_ADDR
// mpStartingResources := [ ] ;
46649: LD_ADDR_EXP 13
46653: PUSH
46654: EMPTY
46655: ST_TO_ADDR
// mpStartPos := [ ] ;
46656: LD_ADDR_EXP 19
46660: PUSH
46661: EMPTY
46662: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46663: LD_ADDR_EXP 20
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46672: LD_ADDR_EXP 21
46676: PUSH
46677: EMPTY
46678: ST_TO_ADDR
// mpApemans := [ ] ;
46679: LD_ADDR_EXP 28
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// mpApemansArea := [ ] ;
46686: LD_ADDR_EXP 29
46690: PUSH
46691: EMPTY
46692: ST_TO_ADDR
// mpRespawn := [ ] ;
46693: LD_ADDR_EXP 31
46697: PUSH
46698: EMPTY
46699: ST_TO_ADDR
// mpKingArea := 0 ;
46700: LD_ADDR_EXP 32
46704: PUSH
46705: LD_INT 0
46707: ST_TO_ADDR
// mpPoints := [ ] ;
46708: LD_ADDR_EXP 33
46712: PUSH
46713: EMPTY
46714: ST_TO_ADDR
// mpVehicles := 0 ;
46715: LD_ADDR_EXP 34
46719: PUSH
46720: LD_INT 0
46722: ST_TO_ADDR
// mpShipments := 0 ;
46723: LD_ADDR_EXP 25
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46731: LD_ADDR_EXP 38
46735: PUSH
46736: EMPTY
46737: PUSH
46738: EMPTY
46739: PUSH
46740: EMPTY
46741: PUSH
46742: EMPTY
46743: PUSH
46744: EMPTY
46745: PUSH
46746: EMPTY
46747: PUSH
46748: EMPTY
46749: PUSH
46750: EMPTY
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46762: LD_ADDR_EXP 30
46766: PUSH
46767: EMPTY
46768: PUSH
46769: EMPTY
46770: PUSH
46771: EMPTY
46772: PUSH
46773: EMPTY
46774: PUSH
46775: EMPTY
46776: PUSH
46777: EMPTY
46778: PUSH
46779: EMPTY
46780: PUSH
46781: EMPTY
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// mpEmissions := 0 ;
46793: LD_ADDR_EXP 35
46797: PUSH
46798: LD_INT 0
46800: ST_TO_ADDR
// mpTeleports := 0 ;
46801: LD_ADDR_EXP 41
46805: PUSH
46806: LD_INT 0
46808: ST_TO_ADDR
// mpArtifacts := 0 ;
46809: LD_ADDR_EXP 42
46813: PUSH
46814: LD_INT 0
46816: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46817: LD_ADDR_EXP 43
46821: PUSH
46822: LD_INT 0
46824: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46825: LD_ADDR_EXP 23
46829: PUSH
46830: LD_INT 3
46832: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46833: LD_ADDR_EXP 22
46837: PUSH
46838: LD_INT 15
46840: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46841: LD_ADDR_EXP 36
46845: PUSH
46846: LD_INT 0
46848: ST_TO_ADDR
// mpGameActive := false ;
46849: LD_ADDR_EXP 37
46853: PUSH
46854: LD_INT 0
46856: ST_TO_ADDR
// mpBlockRespThread := false ;
46857: LD_ADDR_EXP 44
46861: PUSH
46862: LD_INT 0
46864: ST_TO_ADDR
// for i := 1 to 32 do
46865: LD_ADDR_VAR 0 2
46869: PUSH
46870: DOUBLE
46871: LD_INT 1
46873: DEC
46874: ST_TO_ADDR
46875: LD_INT 32
46877: PUSH
46878: FOR_TO
46879: IFFALSE 46906
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46881: LD_ADDR_EXP 4
46885: PUSH
46886: LD_EXP 4
46890: PPUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: LD_INT 0
46898: PPUSH
46899: CALL_OW 1
46903: ST_TO_ADDR
46904: GO 46878
46906: POP
46907: POP
// end ;
46908: LD_VAR 0 1
46912: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46913: LD_INT 0
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46929: LD_ADDR_VAR 0 14
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 5
46945: PUSH
46946: LD_INT 6
46948: PUSH
46949: LD_INT 7
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// for i in gameTypes do
46960: LD_ADDR_VAR 0 2
46964: PUSH
46965: LD_VAR 0 14
46969: PUSH
46970: FOR_IN
46971: IFFALSE 46980
// disable ( i ) ;
46973: LD_VAR 0 2
46977: DISABLE_MARKED
46978: GO 46970
46980: POP
46981: POP
// if Multiplayer then
46982: LD_OWVAR 4
46986: IFFALSE 47170
// begin mpGameType := mp_game_type ;
46988: LD_ADDR_EXP 1
46992: PUSH
46993: LD_OWVAR 6
46997: ST_TO_ADDR
// your_side := mp_player_side ;
46998: LD_ADDR_OWVAR 2
47002: PUSH
47003: LD_OWVAR 7
47007: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47008: LD_ADDR_EXP 5
47012: PUSH
47013: LD_OWVAR 17
47017: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47018: LD_ADDR_EXP 6
47022: PUSH
47023: LD_OWVAR 15
47027: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47028: LD_ADDR_EXP 7
47032: PUSH
47033: LD_OWVAR 16
47037: ST_TO_ADDR
// mpTeams := mp_teams ;
47038: LD_ADDR_EXP 8
47042: PUSH
47043: LD_OWVAR 12
47047: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47048: LD_ADDR_VAR 0 2
47052: PUSH
47053: DOUBLE
47054: LD_INT 1
47056: DEC
47057: ST_TO_ADDR
47058: LD_EXP 2
47062: PPUSH
47063: CALL 5209 0 1
47067: PUSH
47068: FOR_TO
47069: IFFALSE 47145
// begin setting := mpGameSettingsKeys [ i ] ;
47071: LD_ADDR_VAR 0 12
47075: PUSH
47076: LD_EXP 2
47080: PUSH
47081: LD_VAR 0 2
47085: ARRAY
47086: ST_TO_ADDR
// if setting then
47087: LD_VAR 0 12
47091: IFFALSE 47143
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47093: LD_ADDR_EXP 4
47097: PUSH
47098: LD_EXP 4
47102: PPUSH
47103: LD_VAR 0 2
47107: PPUSH
47108: LD_EXP 3
47112: PUSH
47113: LD_VAR 0 2
47117: ARRAY
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_INT 1
47126: MINUS
47127: PPUSH
47128: CALL_OW 426
47132: PUSH
47133: LD_INT 1
47135: PLUS
47136: ARRAY
47137: PPUSH
47138: CALL_OW 1
47142: ST_TO_ADDR
// end ;
47143: GO 47068
47145: POP
47146: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47147: LD_ADDR_EXP 9
47151: PUSH
47152: LD_EXP 6
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: DIFF
47163: PUSH
47164: LD_INT 1
47166: GREATER
47167: ST_TO_ADDR
// end else
47168: GO 47170
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47170: LD_EXP 1
47174: PPUSH
47175: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47179: LD_EXP 16
47183: PPUSH
47184: CALL 5209 0 1
47188: IFFALSE 47219
// begin for i in mpMarkedAreas do
47190: LD_ADDR_VAR 0 2
47194: PUSH
47195: LD_EXP 16
47199: PUSH
47200: FOR_IN
47201: IFFALSE 47217
// SetAreaMapShow ( i , 0 ) ;
47203: LD_VAR 0 2
47207: PPUSH
47208: LD_INT 0
47210: PPUSH
47211: CALL_OW 424
47215: GO 47200
47217: POP
47218: POP
// end ; for i := 1 to 8 do
47219: LD_ADDR_VAR 0 2
47223: PUSH
47224: DOUBLE
47225: LD_INT 1
47227: DEC
47228: ST_TO_ADDR
47229: LD_INT 8
47231: PUSH
47232: FOR_TO
47233: IFFALSE 48668
// begin if not mpSidePositions [ i ] then
47235: LD_EXP 5
47239: PUSH
47240: LD_VAR 0 2
47244: ARRAY
47245: NOT
47246: IFFALSE 47250
// continue ;
47248: GO 47232
// side := i ;
47250: LD_ADDR_VAR 0 7
47254: PUSH
47255: LD_VAR 0 2
47259: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47260: LD_ADDR_VAR 0 9
47264: PUSH
47265: LD_EXP 7
47269: PUSH
47270: LD_VAR 0 2
47274: ARRAY
47275: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47276: LD_ADDR_VAR 0 8
47280: PUSH
47281: LD_EXP 5
47285: PUSH
47286: LD_VAR 0 2
47290: ARRAY
47291: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47292: LD_EXP 10
47296: PPUSH
47297: CALL 5209 0 1
47301: IFFALSE 47378
// begin for j in mpOilDeposits [ pos ] do
47303: LD_ADDR_VAR 0 3
47307: PUSH
47308: LD_EXP 10
47312: PUSH
47313: LD_VAR 0 8
47317: ARRAY
47318: PUSH
47319: FOR_IN
47320: IFFALSE 47376
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47322: LD_VAR 0 3
47326: PUSH
47327: LD_INT 1
47329: ARRAY
47330: PPUSH
47331: LD_VAR 0 3
47335: PUSH
47336: LD_INT 2
47338: ARRAY
47339: PPUSH
47340: LD_INT 2
47342: PPUSH
47343: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47347: LD_VAR 0 3
47351: PUSH
47352: LD_INT 1
47354: ARRAY
47355: PPUSH
47356: LD_VAR 0 3
47360: PUSH
47361: LD_INT 2
47363: ARRAY
47364: PPUSH
47365: LD_VAR 0 7
47369: PPUSH
47370: CALL_OW 441
// end ;
47374: GO 47319
47376: POP
47377: POP
// end ; if Count ( mpSibDeposits ) then
47378: LD_EXP 11
47382: PPUSH
47383: CALL 5209 0 1
47387: IFFALSE 47464
// begin for j in mpSibDeposits [ pos ] do
47389: LD_ADDR_VAR 0 3
47393: PUSH
47394: LD_EXP 11
47398: PUSH
47399: LD_VAR 0 8
47403: ARRAY
47404: PUSH
47405: FOR_IN
47406: IFFALSE 47462
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47408: LD_VAR 0 3
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: PPUSH
47417: LD_VAR 0 3
47421: PUSH
47422: LD_INT 2
47424: ARRAY
47425: PPUSH
47426: LD_INT 3
47428: PPUSH
47429: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47433: LD_VAR 0 3
47437: PUSH
47438: LD_INT 1
47440: ARRAY
47441: PPUSH
47442: LD_VAR 0 3
47446: PUSH
47447: LD_INT 2
47449: ARRAY
47450: PPUSH
47451: LD_VAR 0 7
47455: PPUSH
47456: CALL_OW 441
// end ;
47460: GO 47405
47462: POP
47463: POP
// end ; InitBc ;
47464: CALL_OW 21
// InitUc ;
47468: CALL_OW 18
// uc_side := side ;
47472: LD_ADDR_OWVAR 20
47476: PUSH
47477: LD_VAR 0 7
47481: ST_TO_ADDR
// uc_nation := nation ;
47482: LD_ADDR_OWVAR 21
47486: PUSH
47487: LD_VAR 0 9
47491: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47492: LD_EXP 20
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: GREATER
47501: IFFALSE 47660
// begin x := mpStartPos [ pos ] [ 1 ] ;
47503: LD_ADDR_VAR 0 5
47507: PUSH
47508: LD_EXP 19
47512: PUSH
47513: LD_VAR 0 8
47517: ARRAY
47518: PUSH
47519: LD_INT 1
47521: ARRAY
47522: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47523: LD_ADDR_VAR 0 6
47527: PUSH
47528: LD_EXP 19
47532: PUSH
47533: LD_VAR 0 8
47537: ARRAY
47538: PUSH
47539: LD_INT 2
47541: ARRAY
47542: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47543: LD_VAR 0 5
47547: PPUSH
47548: LD_VAR 0 6
47552: PPUSH
47553: LD_INT 12
47555: PPUSH
47556: LD_INT 2
47558: PPUSH
47559: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47563: LD_ADDR_EXP 21
47567: PUSH
47568: LD_EXP 21
47572: PPUSH
47573: LD_VAR 0 7
47577: PPUSH
47578: LD_VAR 0 7
47582: PPUSH
47583: LD_VAR 0 5
47587: PPUSH
47588: LD_VAR 0 6
47592: PPUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 100
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 70
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 3
47615: PUSH
47616: LD_INT 40
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 10
47625: PUSH
47626: LD_INT 25
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 20
47635: PUSH
47636: LD_INT 100
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: PPUSH
47650: CALL_OW 418
47654: PPUSH
47655: CALL_OW 1
47659: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47660: LD_EXP 12
47664: PPUSH
47665: CALL 5209 0 1
47669: IFFALSE 47864
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47671: LD_EXP 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 6
47681: PUSH
47682: LD_INT 7
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: IN
47690: IFFALSE 47710
// begin bc_level := 10 ;
47692: LD_ADDR_OWVAR 43
47696: PUSH
47697: LD_INT 10
47699: ST_TO_ADDR
// bc_type := b_warehouse ;
47700: LD_ADDR_OWVAR 42
47704: PUSH
47705: LD_INT 1
47707: ST_TO_ADDR
// end else
47708: GO 47726
// begin bc_level := 0 ;
47710: LD_ADDR_OWVAR 43
47714: PUSH
47715: LD_INT 0
47717: ST_TO_ADDR
// bc_type := b_depot ;
47718: LD_ADDR_OWVAR 42
47722: PUSH
47723: LD_INT 0
47725: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47726: LD_ADDR_VAR 0 4
47730: PUSH
47731: LD_EXP 12
47735: PUSH
47736: LD_VAR 0 8
47740: ARRAY
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_EXP 12
47750: PUSH
47751: LD_VAR 0 8
47755: ARRAY
47756: PUSH
47757: LD_INT 2
47759: ARRAY
47760: PPUSH
47761: LD_EXP 12
47765: PUSH
47766: LD_VAR 0 8
47770: ARRAY
47771: PUSH
47772: LD_INT 3
47774: ARRAY
47775: PPUSH
47776: CALL_OW 47
47780: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47781: LD_VAR 0 4
47785: PPUSH
47786: LD_STRING @
47788: PUSH
47789: LD_VAR 0 7
47793: STR
47794: PPUSH
47795: CALL_OW 500
// if Count ( mpStartingResources ) then
47799: LD_EXP 13
47803: PPUSH
47804: CALL 5209 0 1
47808: IFFALSE 47862
// begin for j := 1 to mpStartingResources do
47810: LD_ADDR_VAR 0 3
47814: PUSH
47815: DOUBLE
47816: LD_INT 1
47818: DEC
47819: ST_TO_ADDR
47820: LD_EXP 13
47824: PUSH
47825: FOR_TO
47826: IFFALSE 47860
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47828: LD_VAR 0 4
47832: PPUSH
47833: CALL_OW 274
47837: PPUSH
47838: LD_VAR 0 3
47842: PPUSH
47843: LD_EXP 13
47847: PUSH
47848: LD_VAR 0 3
47852: ARRAY
47853: PPUSH
47854: CALL_OW 277
47858: GO 47825
47860: POP
47861: POP
// end ; end else
47862: GO 48071
// if Count ( mpStartingResources ) then
47864: LD_EXP 13
47868: PPUSH
47869: CALL 5209 0 1
47873: IFFALSE 48071
// begin x := mpStartPos [ pos ] [ 1 ] ;
47875: LD_ADDR_VAR 0 5
47879: PUSH
47880: LD_EXP 19
47884: PUSH
47885: LD_VAR 0 8
47889: ARRAY
47890: PUSH
47891: LD_INT 1
47893: ARRAY
47894: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47895: LD_ADDR_VAR 0 6
47899: PUSH
47900: LD_EXP 19
47904: PUSH
47905: LD_VAR 0 8
47909: ARRAY
47910: PUSH
47911: LD_INT 2
47913: ARRAY
47914: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47915: LD_ADDR_VAR 0 3
47919: PUSH
47920: DOUBLE
47921: LD_INT 1
47923: DEC
47924: ST_TO_ADDR
47925: LD_EXP 13
47929: PUSH
47930: FOR_TO
47931: IFFALSE 48069
// begin resources := mpStartingResources [ j ] ;
47933: LD_ADDR_VAR 0 13
47937: PUSH
47938: LD_EXP 13
47942: PUSH
47943: LD_VAR 0 3
47947: ARRAY
47948: ST_TO_ADDR
// if resources = 0 then
47949: LD_VAR 0 13
47953: PUSH
47954: LD_INT 0
47956: EQUAL
47957: IFFALSE 47961
// continue ;
47959: GO 47930
// repeat if resources >= 50 then
47961: LD_VAR 0 13
47965: PUSH
47966: LD_INT 50
47968: GREATEREQUAL
47969: IFFALSE 48015
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47971: LD_VAR 0 3
47975: PPUSH
47976: LD_INT 5
47978: PPUSH
47979: LD_VAR 0 5
47983: PPUSH
47984: LD_VAR 0 6
47988: PPUSH
47989: LD_INT 6
47991: PPUSH
47992: LD_INT 0
47994: PPUSH
47995: CALL_OW 60
// resources := resources - 50 ;
47999: LD_ADDR_VAR 0 13
48003: PUSH
48004: LD_VAR 0 13
48008: PUSH
48009: LD_INT 50
48011: MINUS
48012: ST_TO_ADDR
// end else
48013: GO 48057
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48015: LD_VAR 0 3
48019: PPUSH
48020: LD_VAR 0 13
48024: PUSH
48025: LD_INT 10
48027: DIV
48028: PPUSH
48029: LD_VAR 0 5
48033: PPUSH
48034: LD_VAR 0 6
48038: PPUSH
48039: LD_INT 6
48041: PPUSH
48042: LD_INT 0
48044: PPUSH
48045: CALL_OW 60
// resources := 0 ;
48049: LD_ADDR_VAR 0 13
48053: PUSH
48054: LD_INT 0
48056: ST_TO_ADDR
// end ; until resources <= 0 ;
48057: LD_VAR 0 13
48061: PUSH
48062: LD_INT 0
48064: LESSEQUAL
48065: IFFALSE 47961
// end ;
48067: GO 47930
48069: POP
48070: POP
// end ; if Count ( mpBuildings ) then
48071: LD_EXP 15
48075: PPUSH
48076: CALL 5209 0 1
48080: IFFALSE 48158
// begin for j in mpBuildings [ pos ] do
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_EXP 15
48091: PUSH
48092: LD_VAR 0 8
48096: ARRAY
48097: PUSH
48098: FOR_IN
48099: IFFALSE 48156
// begin bc_level := 0 ;
48101: LD_ADDR_OWVAR 43
48105: PUSH
48106: LD_INT 0
48108: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48109: LD_ADDR_OWVAR 42
48113: PUSH
48114: LD_VAR 0 3
48118: PUSH
48119: LD_INT 1
48121: ARRAY
48122: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48123: LD_VAR 0 3
48127: PUSH
48128: LD_INT 2
48130: ARRAY
48131: PPUSH
48132: LD_VAR 0 3
48136: PUSH
48137: LD_INT 3
48139: ARRAY
48140: PPUSH
48141: LD_VAR 0 3
48145: PUSH
48146: LD_INT 4
48148: ARRAY
48149: PPUSH
48150: CALL_OW 47
// end ;
48154: GO 48098
48156: POP
48157: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48158: LD_EXP 24
48162: IFFALSE 48182
48164: PUSH
48165: LD_INT 20
48167: PPUSH
48168: LD_VAR 0 7
48172: PPUSH
48173: CALL_OW 321
48177: PUSH
48178: LD_INT 1
48180: EQUAL
48181: AND
48182: IFFALSE 48199
// SetTech ( tech_SibDet , side , state_researched ) ;
48184: LD_INT 20
48186: PPUSH
48187: LD_VAR 0 7
48191: PPUSH
48192: LD_INT 2
48194: PPUSH
48195: CALL_OW 322
// if not mpArtifacts then
48199: LD_EXP 42
48203: NOT
48204: IFFALSE 48221
// SetTech ( tech_artifact , side , state_disabled ) ;
48206: LD_INT 24
48208: PPUSH
48209: LD_VAR 0 7
48213: PPUSH
48214: LD_INT 0
48216: PPUSH
48217: CALL_OW 322
// if mpSibBomb = 1 then
48221: LD_EXP 26
48225: PUSH
48226: LD_INT 1
48228: EQUAL
48229: IFFALSE 48248
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48231: LD_INT 25
48233: PPUSH
48234: LD_VAR 0 7
48238: PPUSH
48239: LD_INT 1
48241: PPUSH
48242: CALL_OW 322
// end else
48246: GO 48263
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48248: LD_INT 25
48250: PPUSH
48251: LD_VAR 0 7
48255: PPUSH
48256: LD_INT 0
48258: PPUSH
48259: CALL_OW 322
// end ; if mpVehicles then
48263: LD_EXP 34
48267: IFFALSE 48366
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48269: LD_ADDR_VAR 0 3
48273: PUSH
48274: LD_VAR 0 7
48278: PPUSH
48279: LD_VAR 0 9
48283: PPUSH
48284: LD_EXP 34
48288: PPUSH
48289: CALL 49589 0 3
48293: PUSH
48294: FOR_IN
48295: IFFALSE 48364
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48297: LD_VAR 0 3
48301: PPUSH
48302: LD_INT 0
48304: PPUSH
48305: LD_INT 5
48307: PPUSH
48308: CALL_OW 12
48312: PPUSH
48313: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48317: LD_VAR 0 3
48321: PPUSH
48322: LD_EXP 19
48326: PUSH
48327: LD_VAR 0 8
48331: ARRAY
48332: PUSH
48333: LD_INT 1
48335: ARRAY
48336: PPUSH
48337: LD_EXP 19
48341: PUSH
48342: LD_VAR 0 8
48346: ARRAY
48347: PUSH
48348: LD_INT 2
48350: ARRAY
48351: PPUSH
48352: LD_INT 12
48354: PPUSH
48355: LD_INT 0
48357: PPUSH
48358: CALL_OW 50
// end ;
48362: GO 48294
48364: POP
48365: POP
// end ; uc_nation := nation ;
48366: LD_ADDR_OWVAR 21
48370: PUSH
48371: LD_VAR 0 9
48375: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48376: LD_EXP 1
48380: PUSH
48381: LD_INT 6
48383: PUSH
48384: LD_INT 7
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: IN
48391: IFFALSE 48416
48393: PUSH
48394: LD_EXP 5
48398: PUSH
48399: LD_VAR 0 2
48403: ARRAY
48404: PUSH
48405: LD_INT 1
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: IN
48415: AND
48416: IFFALSE 48464
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48418: LD_ADDR_VAR 0 11
48422: PUSH
48423: LD_VAR 0 7
48427: PPUSH
48428: LD_VAR 0 9
48432: PPUSH
48433: LD_EXP 22
48437: PUSH
48438: LD_EXP 22
48442: PUSH
48443: LD_INT 2
48445: DIV
48446: PLUS
48447: PPUSH
48448: LD_EXP 23
48452: PUSH
48453: LD_INT 1
48455: PLUS
48456: PPUSH
48457: CALL 49080 0 4
48461: ST_TO_ADDR
48462: GO 48494
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48464: LD_ADDR_VAR 0 11
48468: PUSH
48469: LD_VAR 0 7
48473: PPUSH
48474: LD_VAR 0 9
48478: PPUSH
48479: LD_EXP 22
48483: PPUSH
48484: LD_EXP 23
48488: PPUSH
48489: CALL 49080 0 4
48493: ST_TO_ADDR
// for j in team do
48494: LD_ADDR_VAR 0 3
48498: PUSH
48499: LD_VAR 0 11
48503: PUSH
48504: FOR_IN
48505: IFFALSE 48554
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48507: LD_VAR 0 3
48511: PPUSH
48512: LD_EXP 19
48516: PUSH
48517: LD_VAR 0 8
48521: ARRAY
48522: PUSH
48523: LD_INT 1
48525: ARRAY
48526: PPUSH
48527: LD_EXP 19
48531: PUSH
48532: LD_VAR 0 8
48536: ARRAY
48537: PUSH
48538: LD_INT 2
48540: ARRAY
48541: PPUSH
48542: LD_INT 12
48544: PPUSH
48545: LD_INT 0
48547: PPUSH
48548: CALL_OW 50
48552: GO 48504
48554: POP
48555: POP
// if mpApemans then
48556: LD_EXP 28
48560: IFFALSE 48666
// begin for j := 1 to mpApemans do
48562: LD_ADDR_VAR 0 3
48566: PUSH
48567: DOUBLE
48568: LD_INT 1
48570: DEC
48571: ST_TO_ADDR
48572: LD_EXP 28
48576: PUSH
48577: FOR_TO
48578: IFFALSE 48664
// begin PrepareApeman ( - 5 ) ;
48580: LD_INT 5
48582: NEG
48583: PPUSH
48584: CALL 37302 0 1
// ape := CreateHuman ;
48588: LD_ADDR_VAR 0 10
48592: PUSH
48593: CALL_OW 44
48597: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48598: LD_ADDR_EXP 30
48602: PUSH
48603: LD_EXP 30
48607: PPUSH
48608: LD_VAR 0 8
48612: PPUSH
48613: LD_EXP 30
48617: PUSH
48618: LD_VAR 0 8
48622: ARRAY
48623: PPUSH
48624: LD_VAR 0 10
48628: PPUSH
48629: CALL 41175 0 2
48633: PPUSH
48634: CALL_OW 1
48638: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48639: LD_VAR 0 10
48643: PPUSH
48644: LD_EXP 29
48648: PUSH
48649: LD_VAR 0 8
48653: ARRAY
48654: PPUSH
48655: LD_INT 0
48657: PPUSH
48658: CALL_OW 49
// end ;
48662: GO 48577
48664: POP
48665: POP
// end ; end ;
48666: GO 47232
48668: POP
48669: POP
// if not mpTeamGame then
48670: LD_EXP 9
48674: NOT
48675: IFFALSE 48773
// begin for i := 1 to 8 do
48677: LD_ADDR_VAR 0 2
48681: PUSH
48682: DOUBLE
48683: LD_INT 1
48685: DEC
48686: ST_TO_ADDR
48687: LD_INT 8
48689: PUSH
48690: FOR_TO
48691: IFFALSE 48769
// for j := 1 to 8 do
48693: LD_ADDR_VAR 0 3
48697: PUSH
48698: DOUBLE
48699: LD_INT 1
48701: DEC
48702: ST_TO_ADDR
48703: LD_INT 8
48705: PUSH
48706: FOR_TO
48707: IFFALSE 48765
// if i <> j then
48709: LD_VAR 0 2
48713: PUSH
48714: LD_VAR 0 3
48718: NONEQUAL
48719: IFFALSE 48743
// SetAttitude ( i , j , att_neutral , true ) else
48721: LD_VAR 0 2
48725: PPUSH
48726: LD_VAR 0 3
48730: PPUSH
48731: LD_INT 0
48733: PPUSH
48734: LD_INT 1
48736: PPUSH
48737: CALL_OW 80
48741: GO 48763
// SetAttitude ( i , j , att_friend , true ) ;
48743: LD_VAR 0 2
48747: PPUSH
48748: LD_VAR 0 3
48752: PPUSH
48753: LD_INT 1
48755: PPUSH
48756: LD_INT 1
48758: PPUSH
48759: CALL_OW 80
48763: GO 48706
48765: POP
48766: POP
48767: GO 48690
48769: POP
48770: POP
// end else
48771: GO 48948
// begin if mpSharedVision then
48773: LD_EXP 14
48777: IFFALSE 48842
// begin for i in mpTeams do
48779: LD_ADDR_VAR 0 2
48783: PUSH
48784: LD_EXP 8
48788: PUSH
48789: FOR_IN
48790: IFFALSE 48840
// for j := 2 to i do
48792: LD_ADDR_VAR 0 3
48796: PUSH
48797: DOUBLE
48798: LD_INT 2
48800: DEC
48801: ST_TO_ADDR
48802: LD_VAR 0 2
48806: PUSH
48807: FOR_TO
48808: IFFALSE 48836
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48810: LD_VAR 0 2
48814: PUSH
48815: LD_VAR 0 3
48819: ARRAY
48820: PPUSH
48821: LD_VAR 0 2
48825: PUSH
48826: LD_INT 1
48828: ARRAY
48829: PPUSH
48830: CALL_OW 343
48834: GO 48807
48836: POP
48837: POP
48838: GO 48789
48840: POP
48841: POP
// end ; for i := 1 to 8 do
48842: LD_ADDR_VAR 0 2
48846: PUSH
48847: DOUBLE
48848: LD_INT 1
48850: DEC
48851: ST_TO_ADDR
48852: LD_INT 8
48854: PUSH
48855: FOR_TO
48856: IFFALSE 48946
// for j := 1 to 8 do
48858: LD_ADDR_VAR 0 3
48862: PUSH
48863: DOUBLE
48864: LD_INT 1
48866: DEC
48867: ST_TO_ADDR
48868: LD_INT 8
48870: PUSH
48871: FOR_TO
48872: IFFALSE 48942
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48874: LD_EXP 6
48878: PUSH
48879: LD_VAR 0 2
48883: ARRAY
48884: PUSH
48885: LD_EXP 6
48889: PUSH
48890: LD_VAR 0 3
48894: ARRAY
48895: EQUAL
48896: IFFALSE 48920
// SetAttitude ( i , j , att_friend , true ) else
48898: LD_VAR 0 2
48902: PPUSH
48903: LD_VAR 0 3
48907: PPUSH
48908: LD_INT 1
48910: PPUSH
48911: LD_INT 1
48913: PPUSH
48914: CALL_OW 80
48918: GO 48940
// SetAttitude ( i , j , att_enemy , true ) ;
48920: LD_VAR 0 2
48924: PPUSH
48925: LD_VAR 0 3
48929: PPUSH
48930: LD_INT 2
48932: PPUSH
48933: LD_INT 1
48935: PPUSH
48936: CALL_OW 80
48940: GO 48871
48942: POP
48943: POP
48944: GO 48855
48946: POP
48947: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48948: LD_ADDR_OWVAR 71
48952: PUSH
48953: LD_EXP 7
48957: PUSH
48958: LD_OWVAR 2
48962: ARRAY
48963: ST_TO_ADDR
// if IAmSpec then
48964: CALL_OW 531
48968: IFFALSE 49009
// begin FogOff ( true ) ;
48970: LD_INT 1
48972: PPUSH
48973: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48977: LD_EXP 27
48981: PUSH
48982: LD_INT 1
48984: ARRAY
48985: PUSH
48986: LD_INT 2
48988: DIV
48989: PPUSH
48990: LD_EXP 27
48994: PUSH
48995: LD_INT 2
48997: ARRAY
48998: PUSH
48999: LD_INT 2
49001: DIV
49002: PPUSH
49003: CALL_OW 86
// end else
49007: GO 49055
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49009: LD_EXP 19
49013: PUSH
49014: LD_EXP 5
49018: PUSH
49019: LD_OWVAR 2
49023: ARRAY
49024: ARRAY
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: PPUSH
49030: LD_EXP 19
49034: PUSH
49035: LD_EXP 5
49039: PUSH
49040: LD_OWVAR 2
49044: ARRAY
49045: ARRAY
49046: PUSH
49047: LD_INT 2
49049: ARRAY
49050: PPUSH
49051: CALL_OW 86
// end ; BeginBuildUp ;
49055: CALL 50122 0 0
// enable ( mpActive ) ;
49059: LD_INT 100
49061: ENABLE_MARKED
// enable ( mpGameType ) ;
49062: LD_EXP 1
49066: ENABLE_MARKED
// mpGameActive := true ;
49067: LD_ADDR_EXP 37
49071: PUSH
49072: LD_INT 1
49074: ST_TO_ADDR
// end ;
49075: LD_VAR 0 1
49079: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49080: LD_INT 0
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
// result := [ ] ;
49086: LD_ADDR_VAR 0 5
49090: PUSH
49091: EMPTY
49092: ST_TO_ADDR
// class := class_soldier ;
49093: LD_ADDR_VAR 0 8
49097: PUSH
49098: LD_INT 1
49100: ST_TO_ADDR
// uc_side := side ;
49101: LD_ADDR_OWVAR 20
49105: PUSH
49106: LD_VAR 0 1
49110: ST_TO_ADDR
// uc_nation := nation ;
49111: LD_ADDR_OWVAR 21
49115: PUSH
49116: LD_VAR 0 2
49120: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49121: LD_ADDR_OWVAR 26
49125: PUSH
49126: LD_OWVAR 19
49130: PUSH
49131: LD_VAR 0 1
49135: ARRAY
49136: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49137: LD_INT 1
49139: PPUSH
49140: LD_INT 2
49142: PPUSH
49143: CALL_OW 12
49147: PPUSH
49148: LD_VAR 0 8
49152: PPUSH
49153: LD_VAR 0 4
49157: PUSH
49158: LD_INT 2
49160: PLUS
49161: PPUSH
49162: CALL_OW 380
// hc_importance := 105 ;
49166: LD_ADDR_OWVAR 32
49170: PUSH
49171: LD_INT 105
49173: ST_TO_ADDR
// if Multiplayer then
49174: LD_OWVAR 4
49178: IFFALSE 49218
// begin hc_gallery := MULTIAVATARS ;
49180: LD_ADDR_OWVAR 33
49184: PUSH
49185: LD_STRING MULTIAVATARS
49187: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49188: LD_ADDR_OWVAR 34
49192: PUSH
49193: LD_VAR 0 1
49197: PPUSH
49198: CALL_OW 525
49202: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49203: LD_ADDR_OWVAR 27
49207: PUSH
49208: LD_VAR 0 1
49212: PPUSH
49213: CALL_OW 526
49217: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49218: LD_ADDR_VAR 0 5
49222: PUSH
49223: LD_VAR 0 5
49227: PPUSH
49228: CALL_OW 44
49232: PPUSH
49233: CALL 41175 0 2
49237: ST_TO_ADDR
// if mpTeamPreset then
49238: LD_LOC 1
49242: IFFALSE 49338
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49244: LD_LOC 1
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PPUSH
49253: LD_VAR 0 5
49257: PUSH
49258: LD_VAR 0 5
49262: ARRAY
49263: PPUSH
49264: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49268: LD_VAR 0 5
49272: PUSH
49273: LD_VAR 0 5
49277: ARRAY
49278: PPUSH
49279: LD_INT 1
49281: PPUSH
49282: LD_LOC 1
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: PPUSH
49291: LD_INT 1
49293: PPUSH
49294: CALL_OW 260
49298: PPUSH
49299: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49303: LD_VAR 0 5
49307: PUSH
49308: LD_VAR 0 5
49312: ARRAY
49313: PPUSH
49314: LD_INT 2
49316: PPUSH
49317: LD_LOC 1
49321: PUSH
49322: LD_INT 1
49324: ARRAY
49325: PPUSH
49326: LD_INT 2
49328: PPUSH
49329: CALL_OW 260
49333: PPUSH
49334: CALL_OW 239
// end ; InitHc_All ( ) ;
49338: CALL_OW 584
// class := 2 ;
49342: LD_ADDR_VAR 0 8
49346: PUSH
49347: LD_INT 2
49349: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49350: LD_ADDR_VAR 0 6
49354: PUSH
49355: DOUBLE
49356: LD_INT 1
49358: DEC
49359: ST_TO_ADDR
49360: LD_VAR 0 3
49364: PUSH
49365: LD_INT 1
49367: MINUS
49368: PUSH
49369: FOR_TO
49370: IFFALSE 49565
// begin PrepareHuman ( false , class , skill ) ;
49372: LD_INT 0
49374: PPUSH
49375: LD_VAR 0 8
49379: PPUSH
49380: LD_VAR 0 4
49384: PPUSH
49385: CALL_OW 380
// un := CreateHuman ;
49389: LD_ADDR_VAR 0 7
49393: PUSH
49394: CALL_OW 44
49398: ST_TO_ADDR
// result := Join ( result , un ) ;
49399: LD_ADDR_VAR 0 5
49403: PUSH
49404: LD_VAR 0 5
49408: PPUSH
49409: LD_VAR 0 7
49413: PPUSH
49414: CALL 41175 0 2
49418: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49419: LD_LOC 1
49423: PPUSH
49424: CALL 5209 0 1
49428: PUSH
49429: LD_VAR 0 3
49433: GREATEREQUAL
49434: IFFALSE 49530
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49436: LD_LOC 1
49440: PUSH
49441: LD_VAR 0 6
49445: PUSH
49446: LD_INT 1
49448: PLUS
49449: ARRAY
49450: PPUSH
49451: LD_VAR 0 7
49455: PPUSH
49456: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49460: LD_VAR 0 7
49464: PPUSH
49465: LD_INT 1
49467: PPUSH
49468: LD_LOC 1
49472: PUSH
49473: LD_VAR 0 6
49477: PUSH
49478: LD_INT 1
49480: PLUS
49481: ARRAY
49482: PPUSH
49483: LD_INT 1
49485: PPUSH
49486: CALL_OW 260
49490: PPUSH
49491: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49495: LD_VAR 0 7
49499: PPUSH
49500: LD_INT 2
49502: PPUSH
49503: LD_LOC 1
49507: PUSH
49508: LD_VAR 0 6
49512: PUSH
49513: LD_INT 1
49515: PLUS
49516: ARRAY
49517: PPUSH
49518: LD_INT 2
49520: PPUSH
49521: CALL_OW 260
49525: PPUSH
49526: CALL_OW 239
// end ; class := Inc ( class ) ;
49530: LD_ADDR_VAR 0 8
49534: PUSH
49535: LD_VAR 0 8
49539: PPUSH
49540: CALL 42548 0 1
49544: ST_TO_ADDR
// if class = 5 then
49545: LD_VAR 0 8
49549: PUSH
49550: LD_INT 5
49552: EQUAL
49553: IFFALSE 49563
// class := 1 ;
49555: LD_ADDR_VAR 0 8
49559: PUSH
49560: LD_INT 1
49562: ST_TO_ADDR
// end ;
49563: GO 49369
49565: POP
49566: POP
// if not mpTeamPreset then
49567: LD_LOC 1
49571: NOT
49572: IFFALSE 49584
// mpTeamPreset := result ;
49574: LD_ADDR_LOC 1
49578: PUSH
49579: LD_VAR 0 5
49583: ST_TO_ADDR
// end ;
49584: LD_VAR 0 5
49588: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49589: LD_INT 0
49591: PPUSH
49592: PPUSH
// result := [ ] ;
49593: LD_ADDR_VAR 0 4
49597: PUSH
49598: EMPTY
49599: ST_TO_ADDR
// if not vehicles then
49600: LD_VAR 0 3
49604: NOT
49605: IFFALSE 49609
// exit ;
49607: GO 49823
// for i := 1 to vehicles [ nation ] do
49609: LD_ADDR_VAR 0 5
49613: PUSH
49614: DOUBLE
49615: LD_INT 1
49617: DEC
49618: ST_TO_ADDR
49619: LD_VAR 0 3
49623: PUSH
49624: LD_VAR 0 2
49628: ARRAY
49629: PUSH
49630: FOR_TO
49631: IFFALSE 49821
// begin uc_side := side ;
49633: LD_ADDR_OWVAR 20
49637: PUSH
49638: LD_VAR 0 1
49642: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49643: LD_VAR 0 3
49647: PUSH
49648: LD_VAR 0 2
49652: ARRAY
49653: PUSH
49654: LD_VAR 0 5
49658: ARRAY
49659: PPUSH
49660: CALL 5209 0 1
49664: PUSH
49665: LD_INT 4
49667: GREATER
49668: IFFALSE 49698
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49670: LD_ADDR_OWVAR 21
49674: PUSH
49675: LD_VAR 0 3
49679: PUSH
49680: LD_VAR 0 2
49684: ARRAY
49685: PUSH
49686: LD_VAR 0 5
49690: ARRAY
49691: PUSH
49692: LD_INT 5
49694: ARRAY
49695: ST_TO_ADDR
49696: GO 49708
// uc_nation := nation ;
49698: LD_ADDR_OWVAR 21
49702: PUSH
49703: LD_VAR 0 2
49707: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49708: LD_VAR 0 3
49712: PUSH
49713: LD_VAR 0 2
49717: ARRAY
49718: PUSH
49719: LD_VAR 0 5
49723: ARRAY
49724: PUSH
49725: LD_INT 1
49727: ARRAY
49728: PPUSH
49729: LD_VAR 0 3
49733: PUSH
49734: LD_VAR 0 2
49738: ARRAY
49739: PUSH
49740: LD_VAR 0 5
49744: ARRAY
49745: PUSH
49746: LD_INT 2
49748: ARRAY
49749: PPUSH
49750: LD_VAR 0 3
49754: PUSH
49755: LD_VAR 0 2
49759: ARRAY
49760: PUSH
49761: LD_VAR 0 5
49765: ARRAY
49766: PUSH
49767: LD_INT 3
49769: ARRAY
49770: PPUSH
49771: LD_VAR 0 3
49775: PUSH
49776: LD_VAR 0 2
49780: ARRAY
49781: PUSH
49782: LD_VAR 0 5
49786: ARRAY
49787: PUSH
49788: LD_INT 4
49790: ARRAY
49791: PPUSH
49792: LD_INT 80
49794: PPUSH
49795: CALL 8005 0 5
// result := Join ( result , CreateVehicle ) ;
49799: LD_ADDR_VAR 0 4
49803: PUSH
49804: LD_VAR 0 4
49808: PPUSH
49809: CALL_OW 45
49813: PPUSH
49814: CALL 41175 0 2
49818: ST_TO_ADDR
// end ;
49819: GO 49630
49821: POP
49822: POP
// end ;
49823: LD_VAR 0 4
49827: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49828: LD_INT 0
49830: PPUSH
49831: PPUSH
// for i in mpBattleFlags do
49832: LD_ADDR_VAR 0 3
49836: PUSH
49837: LD_EXP 21
49841: PUSH
49842: FOR_IN
49843: IFFALSE 49920
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49845: LD_VAR 0 3
49849: PPUSH
49850: LD_INT 1
49852: PUSH
49853: LD_VAR 0 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_VAR 0 1
49869: PUSH
49870: LD_REAL  7.00000000000000E-0001
49873: MUL
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 3
49881: PUSH
49882: LD_VAR 0 1
49886: PUSH
49887: LD_REAL  4.00000000000000E-0001
49890: MUL
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 20
49898: PUSH
49899: LD_VAR 0 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: PPUSH
49914: CALL_OW 423
49918: GO 49842
49920: POP
49921: POP
// end ;
49922: LD_VAR 0 2
49926: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49927: LD_INT 100
49929: IFFALSE 50024
49931: GO 49933
49933: DISABLE
49934: LD_INT 0
49936: PPUSH
49937: PPUSH
// begin if mpBattleFlag <= 0 then
49938: LD_EXP 20
49942: PUSH
49943: LD_INT 0
49945: LESSEQUAL
49946: IFFALSE 49950
// exit ;
49948: GO 50024
// strength := 100 ;
49950: LD_ADDR_VAR 0 2
49954: PUSH
49955: LD_INT 100
49957: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49958: LD_EXP 20
49962: PPUSH
49963: CALL_OW 67
// strength := Dec ( strength ) ;
49967: LD_ADDR_VAR 0 2
49971: PUSH
49972: LD_VAR 0 2
49976: PPUSH
49977: CALL 42570 0 1
49981: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49982: LD_VAR 0 2
49986: PPUSH
49987: CALL 49828 0 1
// until not strength ;
49991: LD_VAR 0 2
49995: NOT
49996: IFFALSE 49958
// for i in mpBattleFlags do
49998: LD_ADDR_VAR 0 1
50002: PUSH
50003: LD_EXP 21
50007: PUSH
50008: FOR_IN
50009: IFFALSE 50022
// KillBattleFlag ( i ) ;
50011: LD_VAR 0 1
50015: PPUSH
50016: CALL_OW 419
50020: GO 50008
50022: POP
50023: POP
// end ;
50024: PPOPN 2
50026: END
// every 0 0$1 marked mpActive do var side , tmp ;
50027: GO 50029
50029: DISABLE
50030: LD_INT 0
50032: PPUSH
50033: PPUSH
// begin if mpSibBomb <= 1 then
50034: LD_EXP 26
50038: PUSH
50039: LD_INT 1
50041: LESSEQUAL
50042: IFFALSE 50046
// exit ;
50044: GO 50119
// tmp := mpSibBomb ;
50046: LD_ADDR_VAR 0 2
50050: PUSH
50051: LD_EXP 26
50055: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50056: LD_INT 35
50058: PPUSH
50059: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50063: LD_ADDR_VAR 0 2
50067: PUSH
50068: LD_VAR 0 2
50072: PUSH
50073: LD_INT 35
50075: MINUS
50076: ST_TO_ADDR
// until not tmp ;
50077: LD_VAR 0 2
50081: NOT
50082: IFFALSE 50056
// for side := 1 to 8 do
50084: LD_ADDR_VAR 0 1
50088: PUSH
50089: DOUBLE
50090: LD_INT 1
50092: DEC
50093: ST_TO_ADDR
50094: LD_INT 8
50096: PUSH
50097: FOR_TO
50098: IFFALSE 50117
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50100: LD_INT 25
50102: PPUSH
50103: LD_VAR 0 1
50107: PPUSH
50108: LD_INT 1
50110: PPUSH
50111: CALL_OW 322
50115: GO 50097
50117: POP
50118: POP
// end ;
50119: PPOPN 2
50121: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50122: LD_INT 0
50124: PPUSH
50125: PPUSH
50126: PPUSH
// mpBuildUpTimeDelay := 0 ;
50127: LD_ADDR_EXP 45
50131: PUSH
50132: LD_INT 0
50134: ST_TO_ADDR
// if not mpBuildUpTime then
50135: LD_EXP 18
50139: NOT
50140: IFFALSE 50144
// exit ;
50142: GO 50333
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50144: LD_ADDR_EXP 45
50148: PUSH
50149: LD_INT 8400
50151: PUSH
50152: LD_INT 2100
50154: PUSH
50155: LD_EXP 18
50159: MUL
50160: PLUS
50161: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50162: LD_ADDR_EXP 46
50166: PUSH
50167: LD_INT 1
50169: ST_TO_ADDR
// for i := 1 to 8 do
50170: LD_ADDR_VAR 0 2
50174: PUSH
50175: DOUBLE
50176: LD_INT 1
50178: DEC
50179: ST_TO_ADDR
50180: LD_INT 8
50182: PUSH
50183: FOR_TO
50184: IFFALSE 50331
// if mpSidePositions [ i ] then
50186: LD_EXP 5
50190: PUSH
50191: LD_VAR 0 2
50195: ARRAY
50196: IFFALSE 50329
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50198: LD_EXP 17
50202: PUSH
50203: LD_EXP 5
50207: PUSH
50208: LD_VAR 0 2
50212: ARRAY
50213: ARRAY
50214: PPUSH
50215: LD_INT 5
50217: PPUSH
50218: CALL_OW 424
// for j := 1 to 8 do
50222: LD_ADDR_VAR 0 3
50226: PUSH
50227: DOUBLE
50228: LD_INT 1
50230: DEC
50231: ST_TO_ADDR
50232: LD_INT 8
50234: PUSH
50235: FOR_TO
50236: IFFALSE 50327
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50238: LD_EXP 5
50242: PUSH
50243: LD_VAR 0 3
50247: ARRAY
50248: IFFALSE 50297
50250: PUSH
50251: LD_EXP 6
50255: PUSH
50256: LD_VAR 0 2
50260: ARRAY
50261: PUSH
50262: LD_EXP 6
50266: PUSH
50267: LD_VAR 0 3
50271: ARRAY
50272: NONEQUAL
50273: IFTRUE 50296
50275: PUSH
50276: LD_EXP 9
50280: NOT
50281: IFFALSE 50295
50283: PUSH
50284: LD_VAR 0 2
50288: PUSH
50289: LD_VAR 0 3
50293: NONEQUAL
50294: AND
50295: OR
50296: AND
50297: IFFALSE 50325
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50299: LD_VAR 0 3
50303: PPUSH
50304: LD_EXP 17
50308: PUSH
50309: LD_EXP 5
50313: PUSH
50314: LD_VAR 0 2
50318: ARRAY
50319: ARRAY
50320: PPUSH
50321: CALL_OW 333
50325: GO 50235
50327: POP
50328: POP
// end ;
50329: GO 50183
50331: POP
50332: POP
// end ;
50333: LD_VAR 0 1
50337: RET
// function EndBuildUp ; var i , j ; begin
50338: LD_INT 0
50340: PPUSH
50341: PPUSH
50342: PPUSH
// mpBuildUpTimeActive := false ;
50343: LD_ADDR_EXP 46
50347: PUSH
50348: LD_INT 0
50350: ST_TO_ADDR
// for i := 1 to 8 do
50351: LD_ADDR_VAR 0 2
50355: PUSH
50356: DOUBLE
50357: LD_INT 1
50359: DEC
50360: ST_TO_ADDR
50361: LD_INT 8
50363: PUSH
50364: FOR_TO
50365: IFFALSE 50512
// if mpSidePositions [ i ] then
50367: LD_EXP 5
50371: PUSH
50372: LD_VAR 0 2
50376: ARRAY
50377: IFFALSE 50510
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50379: LD_EXP 17
50383: PUSH
50384: LD_EXP 5
50388: PUSH
50389: LD_VAR 0 2
50393: ARRAY
50394: ARRAY
50395: PPUSH
50396: LD_INT 0
50398: PPUSH
50399: CALL_OW 424
// for j := 1 to 8 do
50403: LD_ADDR_VAR 0 3
50407: PUSH
50408: DOUBLE
50409: LD_INT 1
50411: DEC
50412: ST_TO_ADDR
50413: LD_INT 8
50415: PUSH
50416: FOR_TO
50417: IFFALSE 50508
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50419: LD_EXP 5
50423: PUSH
50424: LD_VAR 0 3
50428: ARRAY
50429: IFFALSE 50478
50431: PUSH
50432: LD_EXP 6
50436: PUSH
50437: LD_VAR 0 2
50441: ARRAY
50442: PUSH
50443: LD_EXP 6
50447: PUSH
50448: LD_VAR 0 3
50452: ARRAY
50453: NONEQUAL
50454: IFTRUE 50477
50456: PUSH
50457: LD_EXP 9
50461: NOT
50462: IFFALSE 50476
50464: PUSH
50465: LD_VAR 0 2
50469: PUSH
50470: LD_VAR 0 3
50474: NONEQUAL
50475: AND
50476: OR
50477: AND
50478: IFFALSE 50506
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50480: LD_VAR 0 3
50484: PPUSH
50485: LD_EXP 17
50489: PUSH
50490: LD_EXP 5
50494: PUSH
50495: LD_VAR 0 2
50499: ARRAY
50500: ARRAY
50501: PPUSH
50502: CALL_OW 334
50506: GO 50416
50508: POP
50509: POP
// end ;
50510: GO 50364
50512: POP
50513: POP
// end ;
50514: LD_VAR 0 1
50518: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50519: LD_EXP 46
50523: IFFALSE 50702
50525: GO 50527
50527: DISABLE
50528: LD_INT 0
50530: PPUSH
50531: PPUSH
// begin for i := 1 to 8 do
50532: LD_ADDR_VAR 0 1
50536: PUSH
50537: DOUBLE
50538: LD_INT 1
50540: DEC
50541: ST_TO_ADDR
50542: LD_INT 8
50544: PUSH
50545: FOR_TO
50546: IFFALSE 50699
// if mpSidePositions [ i ] then
50548: LD_EXP 5
50552: PUSH
50553: LD_VAR 0 1
50557: ARRAY
50558: IFFALSE 50697
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50560: LD_ADDR_VAR 0 2
50564: PUSH
50565: LD_EXP 17
50569: PUSH
50570: LD_EXP 5
50574: PUSH
50575: LD_VAR 0 1
50579: ARRAY
50580: ARRAY
50581: PPUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 21
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 21
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 22
50612: PUSH
50613: LD_OWVAR 2
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PPUSH
50626: CALL_OW 70
50630: PUSH
50631: FOR_IN
50632: IFFALSE 50695
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50634: LD_EXP 6
50638: PUSH
50639: LD_VAR 0 1
50643: ARRAY
50644: PUSH
50645: LD_EXP 6
50649: PUSH
50650: LD_OWVAR 2
50654: ARRAY
50655: NONEQUAL
50656: IFTRUE 50679
50658: PUSH
50659: LD_EXP 9
50663: NOT
50664: IFFALSE 50678
50666: PUSH
50667: LD_VAR 0 1
50671: PUSH
50672: LD_OWVAR 2
50676: NONEQUAL
50677: AND
50678: OR
50679: IFFALSE 50693
// ComMoveToArea ( un , BuildUpEscape ) ;
50681: LD_VAR 0 2
50685: PPUSH
50686: LD_INT 17
50688: PPUSH
50689: CALL_OW 113
50693: GO 50631
50695: POP
50696: POP
50697: GO 50545
50699: POP
50700: POP
// enable ;
50701: ENABLE
// end ;
50702: PPOPN 2
50704: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50705: LD_EXP 18
50709: IFFALSE 50759
50711: GO 50713
50713: DISABLE
50714: LD_INT 0
50716: PPUSH
// begin tmp := mpBuildUpTime ;
50717: LD_ADDR_VAR 0 1
50721: PUSH
50722: LD_EXP 18
50726: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50727: LD_INT 35
50729: PPUSH
50730: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50734: LD_ADDR_VAR 0 1
50738: PUSH
50739: LD_VAR 0 1
50743: PUSH
50744: LD_INT 35
50746: MINUS
50747: ST_TO_ADDR
// until not tmp ;
50748: LD_VAR 0 1
50752: NOT
50753: IFFALSE 50727
// EndBuildUp ;
50755: CALL 50338 0 0
// end ;
50759: PPOPN 1
50761: END
// every 0 0$1 trigger mpActive marked mpWin do
50762: LD_INT 100
50764: IFFALSE 50798
50766: GO 50768
50768: DISABLE
// begin if IAmServer then
50769: CALL_OW 518
50773: IFFALSE 50782
// wait ( 0 0$3 ) ;
50775: LD_INT 105
50777: PPUSH
50778: CALL_OW 67
// if Multiplayer then
50782: LD_OWVAR 4
50786: IFFALSE 50794
// YouWinInMultiplayer else
50788: CALL_OW 106
50792: GO 50798
// YouWin ;
50794: CALL_OW 103
// end ;
50798: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50799: LD_INT 0
50801: PPUSH
// result := false ;
50802: LD_ADDR_VAR 0 3
50806: PUSH
50807: LD_INT 0
50809: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50810: LD_VAR 0 1
50814: PUSH
50815: LD_INT 1
50817: DOUBLE
50818: EQUAL
50819: IFTRUE 50841
50821: LD_INT 5
50823: DOUBLE
50824: EQUAL
50825: IFTRUE 50841
50827: LD_INT 6
50829: DOUBLE
50830: EQUAL
50831: IFTRUE 50841
50833: LD_INT 7
50835: DOUBLE
50836: EQUAL
50837: IFTRUE 50841
50839: GO 50914
50841: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50842: LD_ADDR_VAR 0 3
50846: PUSH
50847: LD_INT 22
50849: PUSH
50850: LD_VAR 0 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: LD_INT 21
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 33
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 33
50884: PUSH
50885: LD_INT 5
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PPUSH
50902: CALL_OW 69
50906: PPUSH
50907: CALL 5209 0 1
50911: ST_TO_ADDR
// end ; GameTypeSurvival :
50912: GO 51153
50914: LD_INT 2
50916: DOUBLE
50917: EQUAL
50918: IFTRUE 50922
50920: GO 51052
50922: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50923: LD_ADDR_VAR 0 3
50927: PUSH
50928: LD_INT 22
50930: PUSH
50931: LD_VAR 0 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: LD_INT 30
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 30
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PPUSH
50972: CALL_OW 69
50976: PPUSH
50977: CALL 5209 0 1
50981: IFFALSE 51049
50983: PUSH
50984: LD_INT 22
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 21
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 33
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 33
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PPUSH
51039: CALL_OW 69
51043: PPUSH
51044: CALL 5209 0 1
51048: AND
51049: ST_TO_ADDR
// end ; GameTypeKing :
51050: GO 51153
51052: LD_INT 3
51054: DOUBLE
51055: EQUAL
51056: IFTRUE 51060
51058: GO 51152
51060: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51061: LD_ADDR_VAR 0 3
51065: PUSH
51066: LD_INT 22
51068: PUSH
51069: LD_VAR 0 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 21
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 33
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 33
51103: PUSH
51104: LD_INT 5
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PPUSH
51121: CALL_OW 69
51125: PPUSH
51126: CALL 5209 0 1
51130: IFFALSE 51149
51132: PUSH
51133: LD_VAR 0 2
51137: PPUSH
51138: CALL 55431 0 1
51142: PUSH
51143: LD_EXP 33
51147: LESS
51148: AND
51149: ST_TO_ADDR
// end ; end ;
51150: GO 51153
51152: POP
// end ;
51153: LD_VAR 0 3
51157: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51158: LD_INT 100
51160: IFFALSE 51390
51162: GO 51164
51164: DISABLE
51165: LD_INT 0
51167: PPUSH
51168: PPUSH
// begin if Multiplayer then
51169: LD_OWVAR 4
51173: IFFALSE 51181
// SetPlayerSpectator ( ) else
51175: CALL_OW 572
51179: GO 51190
// FogOff ( your_side ) ;
51181: LD_OWVAR 2
51185: PPUSH
51186: CALL_OW 344
// repeat gameIsOn := false ;
51190: LD_ADDR_VAR 0 1
51194: PUSH
51195: LD_INT 0
51197: ST_TO_ADDR
// for i := 1 to 8 do
51198: LD_ADDR_VAR 0 2
51202: PUSH
51203: DOUBLE
51204: LD_INT 1
51206: DEC
51207: ST_TO_ADDR
51208: LD_INT 8
51210: PUSH
51211: FOR_TO
51212: IFFALSE 51342
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51214: LD_EXP 5
51218: PUSH
51219: LD_VAR 0 2
51223: ARRAY
51224: IFFALSE 51237
51226: PUSH
51227: LD_VAR 0 2
51231: PPUSH
51232: CALL_OW 108
51236: AND
51237: IFFALSE 51251
51239: PUSH
51240: LD_VAR 0 2
51244: PUSH
51245: LD_OWVAR 2
51249: NONEQUAL
51250: AND
51251: IFFALSE 51340
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51253: LD_EXP 6
51257: PUSH
51258: LD_VAR 0 2
51262: ARRAY
51263: NOT
51264: IFTRUE 51312
51266: PUSH
51267: LD_EXP 6
51271: PUSH
51272: LD_VAR 0 2
51276: ARRAY
51277: PUSH
51278: LD_EXP 6
51282: PUSH
51283: LD_OWVAR 2
51287: ARRAY
51288: NONEQUAL
51289: IFFALSE 51311
51291: PUSH
51292: LD_OWVAR 2
51296: PPUSH
51297: LD_VAR 0 2
51301: PPUSH
51302: CALL_OW 81
51306: PUSH
51307: LD_INT 1
51309: NONEQUAL
51310: AND
51311: OR
51312: IFFALSE 51340
// if HasPowerByGameType ( mpGameType , i ) then
51314: LD_EXP 1
51318: PPUSH
51319: LD_VAR 0 2
51323: PPUSH
51324: CALL 50799 0 2
51328: IFFALSE 51340
// begin gameIsOn := true ;
51330: LD_ADDR_VAR 0 1
51334: PUSH
51335: LD_INT 1
51337: ST_TO_ADDR
// break ;
51338: GO 51342
// end ;
51340: GO 51211
51342: POP
51343: POP
// wait ( 100 ) ;
51344: LD_INT 100
51346: PPUSH
51347: CALL_OW 67
// until not gameIsOn ;
51351: LD_VAR 0 1
51355: NOT
51356: IFFALSE 51190
// if IAmServer then
51358: CALL_OW 518
51362: IFFALSE 51371
// wait ( 0 0$3 ) ;
51364: LD_INT 105
51366: PPUSH
51367: CALL_OW 67
// if Multiplayer then
51371: LD_OWVAR 4
51375: IFFALSE 51383
// YouLostInMultiplayer else
51377: CALL_OW 107
51381: GO 51390
// YouLost (  ) ;
51383: LD_STRING 
51385: PPUSH
51386: CALL_OW 104
// end ;
51390: PPOPN 2
51392: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51393: LD_EXP 31
51397: IFFALSE 51781
51399: GO 51401
51401: DISABLE
51402: LD_INT 0
51404: PPUSH
51405: PPUSH
51406: PPUSH
51407: PPUSH
51408: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51409: LD_ADDR_VAR 0 5
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 2
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 4
51425: PUSH
51426: LD_INT 5
51428: PUSH
51429: LD_INT 6
51431: PUSH
51432: LD_INT 7
51434: PUSH
51435: LD_INT 8
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51448: LD_INT 350
51450: PPUSH
51451: CALL_OW 67
// for i := 1 to 8 do
51455: LD_ADDR_VAR 0 1
51459: PUSH
51460: DOUBLE
51461: LD_INT 1
51463: DEC
51464: ST_TO_ADDR
51465: LD_INT 8
51467: PUSH
51468: FOR_TO
51469: IFFALSE 51751
// begin j := sides [ i ] ;
51471: LD_ADDR_VAR 0 2
51475: PUSH
51476: LD_VAR 0 5
51480: PUSH
51481: LD_VAR 0 1
51485: ARRAY
51486: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51487: LD_EXP 38
51491: PUSH
51492: LD_VAR 0 2
51496: ARRAY
51497: PPUSH
51498: CALL 5209 0 1
51502: IFFALSE 51515
51504: PUSH
51505: LD_VAR 0 2
51509: PPUSH
51510: CALL_OW 108
51514: AND
51515: IFFALSE 51533
51517: PUSH
51518: LD_EXP 1
51522: PPUSH
51523: LD_VAR 0 2
51527: PPUSH
51528: CALL 50799 0 2
51532: AND
51533: IFFALSE 51749
// begin wait ( mpRespawn div 2 ) ;
51535: LD_EXP 31
51539: PUSH
51540: LD_INT 2
51542: DIV
51543: PPUSH
51544: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51548: LD_ADDR_VAR 0 3
51552: PUSH
51553: LD_INT 22
51555: PUSH
51556: LD_VAR 0 2
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 50
51567: PUSH
51568: EMPTY
51569: LIST
51570: PUSH
51571: LD_INT 2
51573: PUSH
51574: LD_INT 30
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 30
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: LIST
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: LIST
51603: PPUSH
51604: CALL_OW 69
51608: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51609: LD_VAR 0 3
51613: NOT
51614: IFTRUE 51628
51616: PUSH
51617: LD_VAR 0 2
51621: PPUSH
51622: CALL_OW 108
51626: NOT
51627: OR
51628: IFTRUE 51647
51630: PUSH
51631: LD_EXP 1
51635: PPUSH
51636: LD_VAR 0 2
51640: PPUSH
51641: CALL 50799 0 2
51645: NOT
51646: OR
51647: IFFALSE 51651
// continue ;
51649: GO 51468
// spawn := tmp [ 1 ] ;
51651: LD_ADDR_VAR 0 4
51655: PUSH
51656: LD_VAR 0 3
51660: PUSH
51661: LD_INT 1
51663: ARRAY
51664: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51665: LD_EXP 38
51669: PUSH
51670: LD_VAR 0 2
51674: ARRAY
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PPUSH
51680: LD_VAR 0 4
51684: PPUSH
51685: CALL_OW 250
51689: PPUSH
51690: LD_VAR 0 4
51694: PPUSH
51695: CALL_OW 251
51699: PPUSH
51700: LD_INT 32
51702: PPUSH
51703: LD_INT 1
51705: PPUSH
51706: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51710: LD_ADDR_EXP 38
51714: PUSH
51715: LD_EXP 38
51719: PPUSH
51720: LD_VAR 0 2
51724: PPUSH
51725: LD_EXP 38
51729: PUSH
51730: LD_VAR 0 2
51734: ARRAY
51735: PPUSH
51736: LD_INT 1
51738: PPUSH
51739: CALL_OW 3
51743: PPUSH
51744: CALL_OW 1
51748: ST_TO_ADDR
// end ; end ;
51749: GO 51468
51751: POP
51752: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51753: LD_ADDR_VAR 0 5
51757: PUSH
51758: LD_VAR 0 5
51762: PPUSH
51763: LD_INT 1
51765: PPUSH
51766: LD_INT 8
51768: PPUSH
51769: LD_INT 1
51771: PPUSH
51772: CALL 7535 0 4
51776: ST_TO_ADDR
// until false ;
51777: LD_INT 0
51779: IFFALSE 51448
// end ;
51781: PPOPN 5
51783: END
// every 0 0$1 marked mpActive do
51784: GO 51786
51786: DISABLE
// begin enable ;
51787: ENABLE
// if not mpDisplayStrings then
51788: LD_EXP 36
51792: NOT
51793: IFFALSE 51804
// begin display_strings := [ ] ;
51795: LD_ADDR_OWVAR 47
51799: PUSH
51800: EMPTY
51801: ST_TO_ADDR
// exit ;
51802: GO 51814
// end ; display_strings := mpDisplayStrings ;
51804: LD_ADDR_OWVAR 47
51808: PUSH
51809: LD_EXP 36
51813: ST_TO_ADDR
// end ; end_of_file
51814: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51815: LD_INT 0
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
51822: PPUSH
51823: PPUSH
51824: PPUSH
51825: PPUSH
// if GetType ( un ) = unit_vehicle then
51826: LD_VAR 0 1
51830: PPUSH
51831: CALL_OW 247
51835: PUSH
51836: LD_INT 2
51838: EQUAL
51839: IFFALSE 51843
// exit ;
51841: GO 52517
// side := GetSide ( un ) ;
51843: LD_ADDR_VAR 0 9
51847: PUSH
51848: LD_VAR 0 1
51852: PPUSH
51853: CALL_OW 255
51857: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51858: LD_EXP 1
51862: PUSH
51863: LD_INT 2
51865: EQUAL
51866: IFFALSE 51960
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51868: LD_VAR 0 1
51872: PPUSH
51873: CALL_OW 266
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: IN
51888: IFFALSE 51960
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51890: LD_ADDR_VAR 0 3
51894: PUSH
51895: LD_INT 22
51897: PUSH
51898: LD_VAR 0 9
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 21
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 33
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PPUSH
51939: CALL_OW 69
51943: PUSH
51944: FOR_IN
51945: IFFALSE 51958
// KillUnit ( i ) ;
51947: LD_VAR 0 3
51951: PPUSH
51952: CALL_OW 66
51956: GO 51944
51958: POP
51959: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51960: LD_VAR 0 1
51964: PPUSH
51965: CALL_OW 257
51969: PUSH
51970: LD_INT 12
51972: PUSH
51973: LD_INT 17
51975: PUSH
51976: LD_INT 15
51978: PUSH
51979: LD_INT 16
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: IN
51988: IFTRUE 52005
51990: PUSH
51991: LD_VAR 0 1
51995: PPUSH
51996: CALL_OW 263
52000: PUSH
52001: LD_INT 5
52003: EQUAL
52004: OR
52005: IFFALSE 52242
// begin tag := 0 ;
52007: LD_ADDR_VAR 0 5
52011: PUSH
52012: LD_INT 0
52014: ST_TO_ADDR
// for i := 1 to 8 do
52015: LD_ADDR_VAR 0 3
52019: PUSH
52020: DOUBLE
52021: LD_INT 1
52023: DEC
52024: ST_TO_ADDR
52025: LD_INT 8
52027: PUSH
52028: FOR_TO
52029: IFFALSE 52063
// if un in mpApePosIndex [ i ] then
52031: LD_VAR 0 1
52035: PUSH
52036: LD_EXP 30
52040: PUSH
52041: LD_VAR 0 3
52045: ARRAY
52046: IN
52047: IFFALSE 52061
// begin tag := i ;
52049: LD_ADDR_VAR 0 5
52053: PUSH
52054: LD_VAR 0 3
52058: ST_TO_ADDR
// break ;
52059: GO 52063
// end ;
52061: GO 52028
52063: POP
52064: POP
// if not tag then
52065: LD_VAR 0 5
52069: NOT
52070: IFFALSE 52074
// exit ;
52072: GO 52517
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52074: LD_ADDR_VAR 0 7
52078: PUSH
52079: LD_EXP 29
52083: PUSH
52084: LD_EXP 5
52088: PUSH
52089: LD_VAR 0 5
52093: ARRAY
52094: ARRAY
52095: ST_TO_ADDR
// if not area then
52096: LD_VAR 0 7
52100: NOT
52101: IFFALSE 52105
// exit ;
52103: GO 52517
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52105: LD_INT 14700
52107: PUSH
52108: LD_VAR 0 1
52112: PUSH
52113: LD_INT 5
52115: MOD
52116: PUSH
52117: LD_INT 1
52119: PLUS
52120: PUSH
52121: LD_INT 700
52123: MUL
52124: PLUS
52125: PPUSH
52126: CALL_OW 67
// repeat wait ( 10 ) ;
52130: LD_INT 10
52132: PPUSH
52133: CALL_OW 67
// until not mpBlockRespThread ;
52137: LD_EXP 44
52141: NOT
52142: IFFALSE 52130
// mpBlockRespThread := true ;
52144: LD_ADDR_EXP 44
52148: PUSH
52149: LD_INT 1
52151: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52152: LD_INT 0
52154: PPUSH
52155: CALL 37302 0 1
// ape := CreateHuman ;
52159: LD_ADDR_VAR 0 4
52163: PUSH
52164: CALL_OW 44
52168: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52169: LD_ADDR_EXP 30
52173: PUSH
52174: LD_EXP 30
52178: PPUSH
52179: LD_VAR 0 5
52183: PPUSH
52184: LD_EXP 30
52188: PUSH
52189: LD_VAR 0 5
52193: ARRAY
52194: PPUSH
52195: LD_VAR 0 4
52199: PPUSH
52200: CALL 41175 0 2
52204: PPUSH
52205: CALL_OW 1
52209: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52210: LD_VAR 0 4
52214: PPUSH
52215: LD_VAR 0 7
52219: PPUSH
52220: LD_INT 0
52222: PPUSH
52223: CALL_OW 49
// wait ( 10 ) ;
52227: LD_INT 10
52229: PPUSH
52230: CALL_OW 67
// mpBlockRespThread := false ;
52234: LD_ADDR_EXP 44
52238: PUSH
52239: LD_INT 0
52241: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52242: LD_VAR 0 1
52246: PPUSH
52247: CALL_OW 247
52251: PUSH
52252: LD_INT 1
52254: EQUAL
52255: IFFALSE 52272
52257: PUSH
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL_OW 248
52267: PUSH
52268: LD_INT 0
52270: GREATER
52271: AND
52272: IFFALSE 52517
// begin if not mpRespawn then
52274: LD_EXP 31
52278: NOT
52279: IFFALSE 52283
// exit ;
52281: GO 52517
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52283: LD_VAR 0 9
52287: PPUSH
52288: CALL_OW 108
52292: NOT
52293: IFFALSE 52312
52295: PUSH
52296: LD_EXP 1
52300: PPUSH
52301: LD_VAR 0 9
52305: PPUSH
52306: CALL 50799 0 2
52310: NOT
52311: AND
52312: IFFALSE 52316
// exit ;
52314: GO 52517
// side := GetSide ( un ) ;
52316: LD_ADDR_VAR 0 9
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 255
52330: ST_TO_ADDR
// nation := GetNation ( un ) ;
52331: LD_ADDR_VAR 0 8
52335: PUSH
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 248
52345: ST_TO_ADDR
// class := GetClass ( un ) ;
52346: LD_ADDR_VAR 0 6
52350: PUSH
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL_OW 257
52360: ST_TO_ADDR
// if class > 4 then
52361: LD_VAR 0 6
52365: PUSH
52366: LD_INT 4
52368: GREATER
52369: IFFALSE 52379
// class := 1 ;
52371: LD_ADDR_VAR 0 6
52375: PUSH
52376: LD_INT 1
52378: ST_TO_ADDR
// repeat wait ( 10 ) ;
52379: LD_INT 10
52381: PPUSH
52382: CALL_OW 67
// until not mpBlockRespThread ;
52386: LD_EXP 44
52390: NOT
52391: IFFALSE 52379
// mpBlockRespThread := true ;
52393: LD_ADDR_EXP 44
52397: PUSH
52398: LD_INT 1
52400: ST_TO_ADDR
// uc_side := side ;
52401: LD_ADDR_OWVAR 20
52405: PUSH
52406: LD_VAR 0 9
52410: ST_TO_ADDR
// uc_nation := nation ;
52411: LD_ADDR_OWVAR 21
52415: PUSH
52416: LD_VAR 0 8
52420: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52421: LD_INT 0
52423: PPUSH
52424: LD_VAR 0 6
52428: PPUSH
52429: LD_INT 2
52431: PPUSH
52432: CALL_OW 380
// un := CreateHuman ;
52436: LD_ADDR_VAR 0 1
52440: PUSH
52441: CALL_OW 44
52445: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52446: LD_ADDR_EXP 38
52450: PUSH
52451: LD_EXP 38
52455: PPUSH
52456: LD_VAR 0 9
52460: PPUSH
52461: LD_EXP 38
52465: PUSH
52466: LD_VAR 0 9
52470: ARRAY
52471: PPUSH
52472: LD_EXP 38
52476: PUSH
52477: LD_VAR 0 9
52481: ARRAY
52482: PUSH
52483: LD_INT 1
52485: PLUS
52486: PPUSH
52487: LD_VAR 0 1
52491: PPUSH
52492: CALL_OW 1
52496: PPUSH
52497: CALL_OW 1
52501: ST_TO_ADDR
// wait ( 10 ) ;
52502: LD_INT 10
52504: PPUSH
52505: CALL_OW 67
// mpBlockRespThread := false ;
52509: LD_ADDR_EXP 44
52513: PUSH
52514: LD_INT 0
52516: ST_TO_ADDR
// end ; end ;
52517: LD_VAR 0 2
52521: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52522: LD_INT 0
52524: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52525: LD_VAR 0 1
52529: PPUSH
52530: CALL_OW 266
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: IN
52545: IFFALSE 52570
// SetBName ( building , @ & GetSide ( building ) ) ;
52547: LD_VAR 0 1
52551: PPUSH
52552: LD_STRING @
52554: PUSH
52555: LD_VAR 0 1
52559: PPUSH
52560: CALL_OW 255
52564: STR
52565: PPUSH
52566: CALL_OW 500
// end ;
52570: LD_VAR 0 2
52574: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52575: LD_INT 0
52577: PPUSH
52578: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52579: LD_EXP 1
52583: PUSH
52584: LD_INT 2
52586: EQUAL
52587: IFFALSE 52611
52589: PUSH
52590: LD_VAR 0 1
52594: PPUSH
52595: CALL_OW 266
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: IN
52610: AND
52611: IFFALSE 52690
// begin SetSide ( building , oldSide ) ;
52613: LD_VAR 0 1
52617: PPUSH
52618: LD_VAR 0 2
52622: PPUSH
52623: CALL_OW 235
// KillUnit ( building ) ;
52627: LD_VAR 0 1
52631: PPUSH
52632: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52636: LD_ADDR_VAR 0 5
52640: PUSH
52641: LD_INT 22
52643: PUSH
52644: LD_VAR 0 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 21
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PPUSH
52667: CALL_OW 69
52671: PUSH
52672: FOR_IN
52673: IFFALSE 52686
// KillUnit ( i ) ;
52675: LD_VAR 0 5
52679: PPUSH
52680: CALL_OW 66
52684: GO 52672
52686: POP
52687: POP
// exit ;
52688: GO 52735
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52690: LD_VAR 0 1
52694: PPUSH
52695: CALL_OW 266
52699: PUSH
52700: LD_INT 0
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: IN
52710: IFFALSE 52735
// SetBName ( building , @ & GetSide ( building ) ) ;
52712: LD_VAR 0 1
52716: PPUSH
52717: LD_STRING @
52719: PUSH
52720: LD_VAR 0 1
52724: PPUSH
52725: CALL_OW 255
52729: STR
52730: PPUSH
52731: CALL_OW 500
// end ;
52735: LD_VAR 0 4
52739: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52740: LD_INT 0
52742: PPUSH
52743: PPUSH
52744: PPUSH
// if mpGameType <> GameTypeFamine then
52745: LD_EXP 1
52749: PUSH
52750: LD_INT 5
52752: NONEQUAL
52753: IFFALSE 52757
// exit ;
52755: GO 52972
// for i := 1 to mpGlobalOilDeposits do
52757: LD_ADDR_VAR 0 6
52761: PUSH
52762: DOUBLE
52763: LD_INT 1
52765: DEC
52766: ST_TO_ADDR
52767: LD_EXP 39
52771: PUSH
52772: FOR_TO
52773: IFFALSE 52970
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52775: LD_EXP 39
52779: PUSH
52780: LD_VAR 0 6
52784: ARRAY
52785: PUSH
52786: LD_INT 1
52788: ARRAY
52789: PPUSH
52790: LD_EXP 39
52794: PUSH
52795: LD_VAR 0 6
52799: ARRAY
52800: PUSH
52801: LD_INT 2
52803: ARRAY
52804: PPUSH
52805: CALL_OW 428
52809: PUSH
52810: LD_VAR 0 1
52814: EQUAL
52815: IFFALSE 52968
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52817: LD_ADDR_VAR 0 7
52821: PUSH
52822: LD_EXP 39
52826: PUSH
52827: LD_VAR 0 6
52831: ARRAY
52832: PUSH
52833: LD_INT 3
52835: ARRAY
52836: ST_TO_ADDR
// value := value - amount ;
52837: LD_ADDR_VAR 0 7
52841: PUSH
52842: LD_VAR 0 7
52846: PUSH
52847: LD_VAR 0 4
52851: MINUS
52852: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52853: LD_ADDR_EXP 39
52857: PUSH
52858: LD_EXP 39
52862: PPUSH
52863: LD_VAR 0 6
52867: PPUSH
52868: LD_EXP 39
52872: PUSH
52873: LD_VAR 0 6
52877: ARRAY
52878: PPUSH
52879: LD_INT 3
52881: PPUSH
52882: LD_VAR 0 7
52886: PPUSH
52887: CALL_OW 1
52891: PPUSH
52892: CALL_OW 1
52896: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52897: LD_VAR 0 1
52901: PPUSH
52902: LD_VAR 0 7
52906: PPUSH
52907: CALL_OW 505
// if value <= 0 then
52911: LD_VAR 0 7
52915: PUSH
52916: LD_INT 0
52918: LESSEQUAL
52919: IFFALSE 52968
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52921: LD_EXP 39
52925: PUSH
52926: LD_VAR 0 6
52930: ARRAY
52931: PUSH
52932: LD_INT 1
52934: ARRAY
52935: PPUSH
52936: LD_EXP 39
52940: PUSH
52941: LD_VAR 0 6
52945: ARRAY
52946: PUSH
52947: LD_INT 2
52949: ARRAY
52950: PPUSH
52951: CALL_OW 63
// KillUnit ( building ) ;
52955: LD_VAR 0 1
52959: PPUSH
52960: CALL_OW 66
// exit ;
52964: POP
52965: POP
52966: GO 52972
// end ; end ; end ;
52968: GO 52772
52970: POP
52971: POP
// end ;
52972: LD_VAR 0 5
52976: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52977: LD_INT 0
52979: PPUSH
52980: PPUSH
52981: PPUSH
// if mpGameType <> GameTypeFamine then
52982: LD_EXP 1
52986: PUSH
52987: LD_INT 5
52989: NONEQUAL
52990: IFFALSE 52994
// exit ;
52992: GO 53209
// for i := 1 to mpGlobalSibDeposits do
52994: LD_ADDR_VAR 0 6
52998: PUSH
52999: DOUBLE
53000: LD_INT 1
53002: DEC
53003: ST_TO_ADDR
53004: LD_EXP 40
53008: PUSH
53009: FOR_TO
53010: IFFALSE 53207
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53012: LD_EXP 40
53016: PUSH
53017: LD_VAR 0 6
53021: ARRAY
53022: PUSH
53023: LD_INT 1
53025: ARRAY
53026: PPUSH
53027: LD_EXP 40
53031: PUSH
53032: LD_VAR 0 6
53036: ARRAY
53037: PUSH
53038: LD_INT 2
53040: ARRAY
53041: PPUSH
53042: CALL_OW 428
53046: PUSH
53047: LD_VAR 0 1
53051: EQUAL
53052: IFFALSE 53205
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53054: LD_ADDR_VAR 0 7
53058: PUSH
53059: LD_EXP 40
53063: PUSH
53064: LD_VAR 0 6
53068: ARRAY
53069: PUSH
53070: LD_INT 3
53072: ARRAY
53073: ST_TO_ADDR
// value := value - amount ;
53074: LD_ADDR_VAR 0 7
53078: PUSH
53079: LD_VAR 0 7
53083: PUSH
53084: LD_VAR 0 4
53088: MINUS
53089: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53090: LD_ADDR_EXP 40
53094: PUSH
53095: LD_EXP 40
53099: PPUSH
53100: LD_VAR 0 6
53104: PPUSH
53105: LD_EXP 40
53109: PUSH
53110: LD_VAR 0 6
53114: ARRAY
53115: PPUSH
53116: LD_INT 3
53118: PPUSH
53119: LD_VAR 0 7
53123: PPUSH
53124: CALL_OW 1
53128: PPUSH
53129: CALL_OW 1
53133: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53134: LD_VAR 0 1
53138: PPUSH
53139: LD_VAR 0 7
53143: PPUSH
53144: CALL_OW 505
// if value <= 0 then
53148: LD_VAR 0 7
53152: PUSH
53153: LD_INT 0
53155: LESSEQUAL
53156: IFFALSE 53205
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53158: LD_EXP 40
53162: PUSH
53163: LD_VAR 0 6
53167: ARRAY
53168: PUSH
53169: LD_INT 1
53171: ARRAY
53172: PPUSH
53173: LD_EXP 40
53177: PUSH
53178: LD_VAR 0 6
53182: ARRAY
53183: PUSH
53184: LD_INT 2
53186: ARRAY
53187: PPUSH
53188: CALL_OW 63
// KillUnit ( building ) ;
53192: LD_VAR 0 1
53196: PPUSH
53197: CALL_OW 66
// exit ;
53201: POP
53202: POP
53203: GO 53209
// end ; end ; end ;
53205: GO 53009
53207: POP
53208: POP
// end ;
53209: LD_VAR 0 5
53213: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
// side := GetSide ( factory ) ;
53218: LD_ADDR_VAR 0 7
53222: PUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 255
53232: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53233: LD_VAR 0 5
53237: PUSH
53238: LD_INT 81
53240: EQUAL
53241: IFFALSE 53279
53243: PUSH
53244: LD_INT 22
53246: PUSH
53247: LD_VAR 0 7
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 34
53258: PUSH
53259: LD_INT 81
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PPUSH
53270: CALL_OW 69
53274: PUSH
53275: LD_INT 0
53277: GREATER
53278: AND
53279: IFFALSE 53312
// begin ComCancel ( factory ) ;
53281: LD_VAR 0 1
53285: PPUSH
53286: CALL_OW 127
// if side = your_side then
53290: LD_VAR 0 7
53294: PUSH
53295: LD_OWVAR 2
53299: EQUAL
53300: IFFALSE 53312
// HintSpec ( VehLimit , 2 ) ;
53302: LD_STRING VehLimit
53304: PPUSH
53305: LD_INT 2
53307: PPUSH
53308: CALL_OW 338
// end ; end ;
53312: LD_VAR 0 6
53316: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53317: LD_INT 0
53319: PPUSH
53320: PPUSH
53321: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53322: LD_VAR 0 1
53326: PPUSH
53327: CALL_OW 264
53331: PUSH
53332: LD_INT 81
53334: EQUAL
53335: IFFALSE 53352
53337: PUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: CALL_OW 263
53347: PUSH
53348: LD_INT 1
53350: EQUAL
53351: AND
53352: IFFALSE 53632
// begin for i := 1 to Count ( minersList ) do
53354: LD_ADDR_VAR 0 6
53358: PUSH
53359: DOUBLE
53360: LD_INT 1
53362: DEC
53363: ST_TO_ADDR
53364: LD_EXP 55
53368: PPUSH
53369: CALL 5209 0 1
53373: PUSH
53374: FOR_TO
53375: IFFALSE 53493
// begin if minersList [ i ] = oldId then
53377: LD_EXP 55
53381: PUSH
53382: LD_VAR 0 6
53386: ARRAY
53387: PUSH
53388: LD_VAR 0 2
53392: EQUAL
53393: IFFALSE 53491
// begin for j := 1 to minerMinesList [ i ] do
53395: LD_ADDR_VAR 0 7
53399: PUSH
53400: DOUBLE
53401: LD_INT 1
53403: DEC
53404: ST_TO_ADDR
53405: LD_EXP 56
53409: PUSH
53410: LD_VAR 0 6
53414: ARRAY
53415: PUSH
53416: FOR_TO
53417: IFFALSE 53467
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53419: LD_EXP 56
53423: PUSH
53424: LD_VAR 0 6
53428: ARRAY
53429: PUSH
53430: LD_VAR 0 7
53434: ARRAY
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PPUSH
53440: LD_EXP 56
53444: PUSH
53445: LD_VAR 0 6
53449: ARRAY
53450: PUSH
53451: LD_VAR 0 7
53455: ARRAY
53456: PUSH
53457: LD_INT 2
53459: ARRAY
53460: PPUSH
53461: CALL_OW 612
53465: GO 53416
53467: POP
53468: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53469: LD_ADDR_EXP 56
53473: PUSH
53474: LD_EXP 56
53478: PPUSH
53479: LD_VAR 0 6
53483: PPUSH
53484: CALL_OW 3
53488: ST_TO_ADDR
// break ;
53489: GO 53493
// end ; end ;
53491: GO 53374
53493: POP
53494: POP
// minersList := minersList diff oldId ;
53495: LD_ADDR_EXP 55
53499: PUSH
53500: LD_EXP 55
53504: PUSH
53505: LD_VAR 0 2
53509: DIFF
53510: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53511: LD_INT 22
53513: PUSH
53514: LD_VAR 0 4
53518: PPUSH
53519: CALL_OW 255
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 34
53530: PUSH
53531: LD_INT 81
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PPUSH
53542: CALL_OW 69
53546: PUSH
53547: LD_INT 1
53549: GREATER
53550: IFFALSE 53577
// begin ComExit ( unit ) ;
53552: LD_VAR 0 4
53556: PPUSH
53557: CALL 41573 0 1
// SetSide ( newId , oldSide ) ;
53561: LD_VAR 0 1
53565: PPUSH
53566: LD_VAR 0 3
53570: PPUSH
53571: CALL_OW 235
// exit ;
53575: GO 53632
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53577: LD_ADDR_EXP 55
53581: PUSH
53582: LD_EXP 55
53586: PPUSH
53587: LD_EXP 55
53591: PUSH
53592: LD_INT 1
53594: PLUS
53595: PPUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: CALL_OW 1
53605: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53606: LD_ADDR_EXP 56
53610: PUSH
53611: LD_EXP 56
53615: PPUSH
53616: LD_EXP 56
53620: PUSH
53621: LD_INT 1
53623: PLUS
53624: PPUSH
53625: EMPTY
53626: PPUSH
53627: CALL_OW 1
53631: ST_TO_ADDR
// end ; end ; end_of_file
53632: LD_VAR 0 5
53636: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53637: LD_EXP 37
53641: IFFALSE 53649
53643: PUSH
53644: CALL 53859 0 0
53648: AND
53649: IFFALSE 53657
53651: PUSH
53652: LD_OWVAR 4
53656: AND
53657: IFFALSE 53856
53659: GO 53661
53661: DISABLE
53662: LD_INT 0
53664: PPUSH
53665: PPUSH
// begin canWin := false ;
53666: LD_ADDR_VAR 0 2
53670: PUSH
53671: LD_INT 0
53673: ST_TO_ADDR
// if not HasPower ( your_side ) then
53674: LD_OWVAR 2
53678: PPUSH
53679: CALL 53901 0 1
53683: NOT
53684: IFFALSE 53695
// begin Multiplayer_Loose_Message ;
53686: CALL_OW 521
// enable ( mpLose ) ;
53690: LD_INT 102
53692: ENABLE_MARKED
// end else
53693: GO 53856
// begin canWin := true ;
53695: LD_ADDR_VAR 0 2
53699: PUSH
53700: LD_INT 1
53702: ST_TO_ADDR
// for i := 1 to 8 do
53703: LD_ADDR_VAR 0 1
53707: PUSH
53708: DOUBLE
53709: LD_INT 1
53711: DEC
53712: ST_TO_ADDR
53713: LD_INT 8
53715: PUSH
53716: FOR_TO
53717: IFFALSE 53842
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53719: LD_EXP 5
53723: PUSH
53724: LD_VAR 0 1
53728: ARRAY
53729: IFFALSE 53742
53731: PUSH
53732: LD_VAR 0 1
53736: PPUSH
53737: CALL_OW 108
53741: AND
53742: IFFALSE 53756
53744: PUSH
53745: LD_VAR 0 1
53749: PUSH
53750: LD_OWVAR 2
53754: NONEQUAL
53755: AND
53756: IFFALSE 53840
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53758: LD_EXP 6
53762: PUSH
53763: LD_VAR 0 1
53767: ARRAY
53768: NOT
53769: IFTRUE 53817
53771: PUSH
53772: LD_EXP 6
53776: PUSH
53777: LD_VAR 0 1
53781: ARRAY
53782: PUSH
53783: LD_EXP 6
53787: PUSH
53788: LD_OWVAR 2
53792: ARRAY
53793: NONEQUAL
53794: IFFALSE 53816
53796: PUSH
53797: LD_OWVAR 2
53801: PPUSH
53802: LD_VAR 0 1
53806: PPUSH
53807: CALL_OW 81
53811: PUSH
53812: LD_INT 1
53814: NONEQUAL
53815: AND
53816: OR
53817: IFFALSE 53840
// if HasPower ( i ) then
53819: LD_VAR 0 1
53823: PPUSH
53824: CALL 53901 0 1
53828: IFFALSE 53840
// begin canWin := false ;
53830: LD_ADDR_VAR 0 2
53834: PUSH
53835: LD_INT 0
53837: ST_TO_ADDR
// break ;
53838: GO 53842
// end ;
53840: GO 53716
53842: POP
53843: POP
// if canWin then
53844: LD_VAR 0 2
53848: IFFALSE 53855
// enable ( mpWin ) else
53850: LD_INT 101
53852: ENABLE_MARKED
53853: GO 53856
// enable ;
53855: ENABLE
// end ; end ;
53856: PPOPN 2
53858: END
// function CanWinLoose ; begin
53859: LD_INT 0
53861: PPUSH
// result := true ;
53862: LD_ADDR_VAR 0 1
53866: PUSH
53867: LD_INT 1
53869: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53870: CALL_OW 531
53874: IFFALSE 53886
53876: PUSH
53877: CALL_OW 519
53881: PUSH
53882: LD_INT 1
53884: GREATER
53885: AND
53886: IFFALSE 53896
// result := false ;
53888: LD_ADDR_VAR 0 1
53892: PUSH
53893: LD_INT 0
53895: ST_TO_ADDR
// end ;
53896: LD_VAR 0 1
53900: RET
// function HasPower ( i ) ; begin
53901: LD_INT 0
53903: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53904: LD_ADDR_VAR 0 2
53908: PUSH
53909: LD_INT 22
53911: PUSH
53912: LD_VAR 0 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 21
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 33
53936: PUSH
53937: LD_INT 3
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 33
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PPUSH
53964: CALL_OW 69
53968: ST_TO_ADDR
// end ; end_of_file
53969: LD_VAR 0 2
53973: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53974: LD_EXP 37
53978: IFFALSE 54021
53980: GO 53982
53982: DISABLE
53983: LD_INT 0
53985: PPUSH
// begin for i := 1 to 8 do
53986: LD_ADDR_VAR 0 1
53990: PUSH
53991: DOUBLE
53992: LD_INT 1
53994: DEC
53995: ST_TO_ADDR
53996: LD_INT 8
53998: PUSH
53999: FOR_TO
54000: IFFALSE 54019
// SetRestrict ( b_depot , i , state_disabled ) ;
54002: LD_INT 0
54004: PPUSH
54005: LD_VAR 0 1
54009: PPUSH
54010: LD_INT 0
54012: PPUSH
54013: CALL_OW 324
54017: GO 53999
54019: POP
54020: POP
// end ;
54021: PPOPN 1
54023: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54024: LD_EXP 37
54028: IFFALSE 54036
54030: PUSH
54031: CALL 54246 0 0
54035: AND
54036: IFFALSE 54044
54038: PUSH
54039: LD_OWVAR 4
54043: AND
54044: IFFALSE 54243
54046: GO 54048
54048: DISABLE
54049: LD_INT 0
54051: PPUSH
54052: PPUSH
// begin canWin := false ;
54053: LD_ADDR_VAR 0 2
54057: PUSH
54058: LD_INT 0
54060: ST_TO_ADDR
// if not HasPower ( your_side ) then
54061: LD_OWVAR 2
54065: PPUSH
54066: CALL 54288 0 1
54070: NOT
54071: IFFALSE 54082
// begin Multiplayer_Loose_Message ;
54073: CALL_OW 521
// enable ( mpLose ) ;
54077: LD_INT 102
54079: ENABLE_MARKED
// end else
54080: GO 54243
// begin canWin := true ;
54082: LD_ADDR_VAR 0 2
54086: PUSH
54087: LD_INT 1
54089: ST_TO_ADDR
// for i := 1 to 8 do
54090: LD_ADDR_VAR 0 1
54094: PUSH
54095: DOUBLE
54096: LD_INT 1
54098: DEC
54099: ST_TO_ADDR
54100: LD_INT 8
54102: PUSH
54103: FOR_TO
54104: IFFALSE 54229
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54106: LD_EXP 5
54110: PUSH
54111: LD_VAR 0 1
54115: ARRAY
54116: IFFALSE 54129
54118: PUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: CALL_OW 108
54128: AND
54129: IFFALSE 54143
54131: PUSH
54132: LD_VAR 0 1
54136: PUSH
54137: LD_OWVAR 2
54141: NONEQUAL
54142: AND
54143: IFFALSE 54227
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54145: LD_EXP 6
54149: PUSH
54150: LD_VAR 0 1
54154: ARRAY
54155: NOT
54156: IFTRUE 54204
54158: PUSH
54159: LD_EXP 6
54163: PUSH
54164: LD_VAR 0 1
54168: ARRAY
54169: PUSH
54170: LD_EXP 6
54174: PUSH
54175: LD_OWVAR 2
54179: ARRAY
54180: NONEQUAL
54181: IFFALSE 54203
54183: PUSH
54184: LD_OWVAR 2
54188: PPUSH
54189: LD_VAR 0 1
54193: PPUSH
54194: CALL_OW 81
54198: PUSH
54199: LD_INT 1
54201: NONEQUAL
54202: AND
54203: OR
54204: IFFALSE 54227
// if HasPower ( i ) then
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL 54288 0 1
54215: IFFALSE 54227
// begin canWin := false ;
54217: LD_ADDR_VAR 0 2
54221: PUSH
54222: LD_INT 0
54224: ST_TO_ADDR
// break ;
54225: GO 54229
// end ;
54227: GO 54103
54229: POP
54230: POP
// if canWin then
54231: LD_VAR 0 2
54235: IFFALSE 54242
// enable ( mpWin ) else
54237: LD_INT 101
54239: ENABLE_MARKED
54240: GO 54243
// enable ;
54242: ENABLE
// end ; end ;
54243: PPOPN 2
54245: END
// function CanWinLoose ; begin
54246: LD_INT 0
54248: PPUSH
// result := true ;
54249: LD_ADDR_VAR 0 1
54253: PUSH
54254: LD_INT 1
54256: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54257: CALL_OW 531
54261: IFFALSE 54273
54263: PUSH
54264: CALL_OW 519
54268: PUSH
54269: LD_INT 1
54271: GREATER
54272: AND
54273: IFFALSE 54283
// result := false ;
54275: LD_ADDR_VAR 0 1
54279: PUSH
54280: LD_INT 0
54282: ST_TO_ADDR
// end ;
54283: LD_VAR 0 1
54287: RET
// function HasPower ( i ) ; begin
54288: LD_INT 0
54290: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54291: LD_INT 22
54293: PUSH
54294: LD_VAR 0 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 30
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 30
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PPUSH
54335: CALL_OW 69
54339: NOT
54340: IFFALSE 54344
// exit ;
54342: GO 54409
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54344: LD_ADDR_VAR 0 2
54348: PUSH
54349: LD_INT 22
54351: PUSH
54352: LD_VAR 0 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: PUSH
54364: LD_INT 21
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 33
54376: PUSH
54377: LD_INT 3
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 33
54386: PUSH
54387: LD_INT 5
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PPUSH
54404: CALL_OW 69
54408: ST_TO_ADDR
// end ; end_of_file
54409: LD_VAR 0 2
54413: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54414: LD_EXP 37
54418: IFFALSE 54757
54420: GO 54422
54422: DISABLE
54423: LD_INT 0
54425: PPUSH
54426: PPUSH
54427: PPUSH
// begin mpKingPoints := [ ] ;
54428: LD_ADDR_EXP 47
54432: PUSH
54433: EMPTY
54434: ST_TO_ADDR
// if mpTeamGame then
54435: LD_EXP 9
54439: IFFALSE 54493
// begin for i := 1 to Count ( mpTeams ) do
54441: LD_ADDR_VAR 0 1
54445: PUSH
54446: DOUBLE
54447: LD_INT 1
54449: DEC
54450: ST_TO_ADDR
54451: LD_EXP 8
54455: PPUSH
54456: CALL 5209 0 1
54460: PUSH
54461: FOR_TO
54462: IFFALSE 54489
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54464: LD_ADDR_EXP 47
54468: PUSH
54469: LD_EXP 47
54473: PPUSH
54474: LD_VAR 0 1
54478: PPUSH
54479: LD_INT 0
54481: PPUSH
54482: CALL_OW 1
54486: ST_TO_ADDR
54487: GO 54461
54489: POP
54490: POP
// end else
54491: GO 54536
// begin for i := 1 to 8 do
54493: LD_ADDR_VAR 0 1
54497: PUSH
54498: DOUBLE
54499: LD_INT 1
54501: DEC
54502: ST_TO_ADDR
54503: LD_INT 8
54505: PUSH
54506: FOR_TO
54507: IFFALSE 54534
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54509: LD_ADDR_EXP 47
54513: PUSH
54514: LD_EXP 47
54518: PPUSH
54519: LD_VAR 0 1
54523: PPUSH
54524: LD_INT 0
54526: PPUSH
54527: CALL_OW 1
54531: ST_TO_ADDR
54532: GO 54506
54534: POP
54535: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54536: LD_ADDR_VAR 0 3
54540: PUSH
54541: LD_INT 25
54543: PPUSH
54544: LD_INT 0
54546: PPUSH
54547: CALL_OW 517
54551: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54552: LD_ADDR_VAR 0 1
54556: PUSH
54557: DOUBLE
54558: LD_INT 1
54560: DEC
54561: ST_TO_ADDR
54562: LD_VAR 0 3
54566: PUSH
54567: LD_INT 1
54569: ARRAY
54570: PUSH
54571: FOR_TO
54572: IFFALSE 54639
// for j := 1 to 8 do
54574: LD_ADDR_VAR 0 2
54578: PUSH
54579: DOUBLE
54580: LD_INT 1
54582: DEC
54583: ST_TO_ADDR
54584: LD_INT 8
54586: PUSH
54587: FOR_TO
54588: IFFALSE 54635
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54590: LD_VAR 0 3
54594: PUSH
54595: LD_INT 1
54597: ARRAY
54598: PUSH
54599: LD_VAR 0 1
54603: ARRAY
54604: PPUSH
54605: LD_VAR 0 3
54609: PUSH
54610: LD_INT 2
54612: ARRAY
54613: PUSH
54614: LD_VAR 0 1
54618: ARRAY
54619: PPUSH
54620: LD_VAR 0 2
54624: PPUSH
54625: LD_INT 12
54627: NEG
54628: PPUSH
54629: CALL_OW 330
54633: GO 54587
54635: POP
54636: POP
54637: GO 54571
54639: POP
54640: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54641: LD_EXP 32
54645: PPUSH
54646: LD_INT 1
54648: PPUSH
54649: CALL_OW 424
// UpdateCounter ;
54653: CALL 55261 0 0
// repeat wait ( 0 0$1 ) ;
54657: LD_INT 35
54659: PPUSH
54660: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54664: LD_ADDR_VAR 0 3
54668: PUSH
54669: LD_EXP 32
54673: PPUSH
54674: LD_INT 3
54676: PUSH
54677: LD_INT 57
54679: PUSH
54680: EMPTY
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 50
54689: PUSH
54690: EMPTY
54691: LIST
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 30
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 30
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: LIST
54725: PPUSH
54726: CALL_OW 70
54730: ST_TO_ADDR
// if not tmp then
54731: LD_VAR 0 3
54735: NOT
54736: IFFALSE 54740
// continue ;
54738: GO 54657
// AddPoints ( tmp ) ;
54740: LD_VAR 0 3
54744: PPUSH
54745: CALL 54939 0 1
// UpdateCounter ;
54749: CALL 55261 0 0
// until false ;
54753: LD_INT 0
54755: IFFALSE 54657
// end ;
54757: PPOPN 3
54759: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54760: LD_EXP 37
54764: IFFALSE 54772
54766: PUSH
54767: LD_EXP 35
54771: AND
54772: IFFALSE 54936
54774: GO 54776
54776: DISABLE
54777: LD_INT 0
54779: PPUSH
54780: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54781: LD_ADDR_VAR 0 2
54785: PUSH
54786: LD_INT 25
54788: PPUSH
54789: LD_INT 0
54791: PPUSH
54792: CALL_OW 517
54796: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54797: LD_ADDR_VAR 0 1
54801: PUSH
54802: DOUBLE
54803: LD_INT 1
54805: DEC
54806: ST_TO_ADDR
54807: LD_VAR 0 2
54811: PUSH
54812: LD_INT 1
54814: ARRAY
54815: PUSH
54816: FOR_TO
54817: IFFALSE 54858
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54819: LD_VAR 0 2
54823: PUSH
54824: LD_INT 1
54826: ARRAY
54827: PUSH
54828: LD_VAR 0 1
54832: ARRAY
54833: PPUSH
54834: LD_VAR 0 2
54838: PUSH
54839: LD_INT 2
54841: ARRAY
54842: PUSH
54843: LD_VAR 0 1
54847: ARRAY
54848: PPUSH
54849: LD_INT 125
54851: PPUSH
54852: CALL_OW 495
54856: GO 54816
54858: POP
54859: POP
// repeat wait ( mpEmissions ) ;
54860: LD_EXP 35
54864: PPUSH
54865: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54869: LD_ADDR_VAR 0 1
54873: PUSH
54874: DOUBLE
54875: LD_INT 1
54877: DEC
54878: ST_TO_ADDR
54879: LD_VAR 0 2
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: PUSH
54888: FOR_TO
54889: IFFALSE 54930
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54891: LD_VAR 0 2
54895: PUSH
54896: LD_INT 1
54898: ARRAY
54899: PUSH
54900: LD_VAR 0 1
54904: ARRAY
54905: PPUSH
54906: LD_VAR 0 2
54910: PUSH
54911: LD_INT 2
54913: ARRAY
54914: PUSH
54915: LD_VAR 0 1
54919: ARRAY
54920: PPUSH
54921: LD_INT 15
54923: PPUSH
54924: CALL_OW 495
54928: GO 54888
54930: POP
54931: POP
// until false ;
54932: LD_INT 0
54934: IFFALSE 54860
// end ;
54936: PPOPN 2
54938: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54939: LD_INT 0
54941: PPUSH
54942: PPUSH
54943: PPUSH
54944: PPUSH
54945: PPUSH
// if mpTeamGame then
54946: LD_EXP 9
54950: IFFALSE 55147
// begin first := depots [ 1 ] ;
54952: LD_ADDR_VAR 0 4
54956: PUSH
54957: LD_VAR 0 1
54961: PUSH
54962: LD_INT 1
54964: ARRAY
54965: ST_TO_ADDR
// side := GetSide ( first ) ;
54966: LD_ADDR_VAR 0 6
54970: PUSH
54971: LD_VAR 0 4
54975: PPUSH
54976: CALL_OW 255
54980: ST_TO_ADDR
// for i := 1 to mpTeams do
54981: LD_ADDR_VAR 0 3
54985: PUSH
54986: DOUBLE
54987: LD_INT 1
54989: DEC
54990: ST_TO_ADDR
54991: LD_EXP 8
54995: PUSH
54996: FOR_TO
54997: IFFALSE 55031
// if side in mpTeams [ i ] then
54999: LD_VAR 0 6
55003: PUSH
55004: LD_EXP 8
55008: PUSH
55009: LD_VAR 0 3
55013: ARRAY
55014: IN
55015: IFFALSE 55029
// begin team := i ;
55017: LD_ADDR_VAR 0 5
55021: PUSH
55022: LD_VAR 0 3
55026: ST_TO_ADDR
// break ;
55027: GO 55031
// end ;
55029: GO 54996
55031: POP
55032: POP
// if not team then
55033: LD_VAR 0 5
55037: NOT
55038: IFFALSE 55042
// exit ;
55040: GO 55256
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55042: LD_EXP 32
55046: PPUSH
55047: LD_INT 81
55049: PUSH
55050: LD_VAR 0 6
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PPUSH
55059: CALL_OW 70
55063: IFFALSE 55067
// exit ;
55065: GO 55256
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55067: LD_ADDR_EXP 47
55071: PUSH
55072: LD_EXP 47
55076: PPUSH
55077: LD_VAR 0 5
55081: PPUSH
55082: LD_EXP 47
55086: PUSH
55087: LD_VAR 0 5
55091: ARRAY
55092: PUSH
55093: LD_INT 1
55095: PLUS
55096: PPUSH
55097: CALL_OW 1
55101: ST_TO_ADDR
// for i in mpTeams [ team ] do
55102: LD_ADDR_VAR 0 3
55106: PUSH
55107: LD_EXP 8
55111: PUSH
55112: LD_VAR 0 5
55116: ARRAY
55117: PUSH
55118: FOR_IN
55119: IFFALSE 55143
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55121: LD_VAR 0 3
55125: PPUSH
55126: LD_EXP 47
55130: PUSH
55131: LD_VAR 0 5
55135: ARRAY
55136: PPUSH
55137: CALL_OW 506
55141: GO 55118
55143: POP
55144: POP
// end else
55145: GO 55256
// begin first := depots [ 1 ] ;
55147: LD_ADDR_VAR 0 4
55151: PUSH
55152: LD_VAR 0 1
55156: PUSH
55157: LD_INT 1
55159: ARRAY
55160: ST_TO_ADDR
// side := GetSide ( first ) ;
55161: LD_ADDR_VAR 0 6
55165: PUSH
55166: LD_VAR 0 4
55170: PPUSH
55171: CALL_OW 255
55175: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55176: LD_EXP 32
55180: PPUSH
55181: LD_INT 81
55183: PUSH
55184: LD_VAR 0 6
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PPUSH
55193: CALL_OW 70
55197: IFFALSE 55201
// exit ;
55199: GO 55256
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55201: LD_ADDR_EXP 47
55205: PUSH
55206: LD_EXP 47
55210: PPUSH
55211: LD_VAR 0 6
55215: PPUSH
55216: LD_EXP 47
55220: PUSH
55221: LD_VAR 0 6
55225: ARRAY
55226: PUSH
55227: LD_INT 1
55229: PLUS
55230: PPUSH
55231: CALL_OW 1
55235: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55236: LD_VAR 0 6
55240: PPUSH
55241: LD_EXP 47
55245: PUSH
55246: LD_VAR 0 6
55250: ARRAY
55251: PPUSH
55252: CALL_OW 506
// end ; end ;
55256: LD_VAR 0 2
55260: RET
// function UpdateCounter ; var i ; begin
55261: LD_INT 0
55263: PPUSH
55264: PPUSH
// result := [ ] ;
55265: LD_ADDR_VAR 0 1
55269: PUSH
55270: EMPTY
55271: ST_TO_ADDR
// if mpTeamGame then
55272: LD_EXP 9
55276: IFFALSE 55343
// begin for i := 1 to mpTeams do
55278: LD_ADDR_VAR 0 2
55282: PUSH
55283: DOUBLE
55284: LD_INT 1
55286: DEC
55287: ST_TO_ADDR
55288: LD_EXP 8
55292: PUSH
55293: FOR_TO
55294: IFFALSE 55339
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55296: LD_ADDR_VAR 0 1
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_STRING #KingoftheHill-Team
55308: PUSH
55309: LD_VAR 0 2
55313: PUSH
55314: LD_EXP 47
55318: PUSH
55319: LD_VAR 0 2
55323: ARRAY
55324: PUSH
55325: LD_EXP 33
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: ADD
55336: ST_TO_ADDR
55337: GO 55293
55339: POP
55340: POP
// end else
55341: GO 55416
// begin for i := 1 to 8 do
55343: LD_ADDR_VAR 0 2
55347: PUSH
55348: DOUBLE
55349: LD_INT 1
55351: DEC
55352: ST_TO_ADDR
55353: LD_INT 8
55355: PUSH
55356: FOR_TO
55357: IFFALSE 55414
// if mpSidePositions [ i ] then
55359: LD_EXP 5
55363: PUSH
55364: LD_VAR 0 2
55368: ARRAY
55369: IFFALSE 55412
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55371: LD_ADDR_VAR 0 1
55375: PUSH
55376: LD_VAR 0 1
55380: PUSH
55381: LD_STRING #KingoftheHill-Player
55383: PUSH
55384: LD_VAR 0 2
55388: PUSH
55389: LD_EXP 47
55393: PUSH
55394: LD_VAR 0 2
55398: ARRAY
55399: PUSH
55400: LD_EXP 33
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: ADD
55411: ST_TO_ADDR
55412: GO 55356
55414: POP
55415: POP
// end ; mpDisplayStrings := result ;
55416: LD_ADDR_EXP 36
55420: PUSH
55421: LD_VAR 0 1
55425: ST_TO_ADDR
// end ;
55426: LD_VAR 0 1
55430: RET
// export function HowMuchPointsKing ( side ) ; begin
55431: LD_INT 0
55433: PPUSH
// result := HowMuchPoints ( side ) ;
55434: LD_ADDR_VAR 0 2
55438: PUSH
55439: LD_VAR 0 1
55443: PPUSH
55444: CALL 55454 0 1
55448: ST_TO_ADDR
// end ;
55449: LD_VAR 0 2
55453: RET
// function HowMuchPoints ( side ) ; var i ; begin
55454: LD_INT 0
55456: PPUSH
55457: PPUSH
// if mpTeamGame then
55458: LD_EXP 9
55462: IFFALSE 55531
// begin for i := 1 to Count ( mpTeams ) do
55464: LD_ADDR_VAR 0 3
55468: PUSH
55469: DOUBLE
55470: LD_INT 1
55472: DEC
55473: ST_TO_ADDR
55474: LD_EXP 8
55478: PPUSH
55479: CALL 5209 0 1
55483: PUSH
55484: FOR_TO
55485: IFFALSE 55527
// begin if side in mpTeams [ i ] then
55487: LD_VAR 0 1
55491: PUSH
55492: LD_EXP 8
55496: PUSH
55497: LD_VAR 0 3
55501: ARRAY
55502: IN
55503: IFFALSE 55525
// begin result := mpKingPoints [ i ] ;
55505: LD_ADDR_VAR 0 2
55509: PUSH
55510: LD_EXP 47
55514: PUSH
55515: LD_VAR 0 3
55519: ARRAY
55520: ST_TO_ADDR
// exit ;
55521: POP
55522: POP
55523: GO 55547
// end ; end ;
55525: GO 55484
55527: POP
55528: POP
// end else
55529: GO 55547
// result := mpKingPoints [ side ] ;
55531: LD_ADDR_VAR 0 2
55535: PUSH
55536: LD_EXP 47
55540: PUSH
55541: LD_VAR 0 1
55545: ARRAY
55546: ST_TO_ADDR
// end ;
55547: LD_VAR 0 2
55551: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55552: LD_EXP 37
55556: IFFALSE 55564
55558: PUSH
55559: CALL 55976 0 0
55563: AND
55564: IFFALSE 55572
55566: PUSH
55567: LD_OWVAR 4
55571: AND
55572: IFFALSE 55825
55574: GO 55576
55576: DISABLE
55577: LD_INT 0
55579: PPUSH
55580: PPUSH
// begin canWin := false ;
55581: LD_ADDR_VAR 0 2
55585: PUSH
55586: LD_INT 0
55588: ST_TO_ADDR
// if not HasPower ( your_side ) then
55589: LD_OWVAR 2
55593: PPUSH
55594: CALL 56018 0 1
55598: NOT
55599: IFFALSE 55610
// begin Multiplayer_Loose_Message ;
55601: CALL_OW 521
// enable ( mpLose ) ;
55605: LD_INT 102
55607: ENABLE_MARKED
// end else
55608: GO 55825
// begin if not EnemiesInGame then
55610: CALL 55828 0 0
55614: NOT
55615: IFFALSE 55622
// begin enable ( mpWin ) ;
55617: LD_INT 101
55619: ENABLE_MARKED
// exit ;
55620: GO 55825
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55622: LD_ADDR_VAR 0 2
55626: PUSH
55627: LD_OWVAR 2
55631: PPUSH
55632: CALL 55454 0 1
55636: PUSH
55637: LD_EXP 33
55641: GREATEREQUAL
55642: IFFALSE 55655
55644: PUSH
55645: LD_OWVAR 2
55649: PPUSH
55650: CALL 56018 0 1
55654: AND
55655: ST_TO_ADDR
// for i := 1 to 8 do
55656: LD_ADDR_VAR 0 1
55660: PUSH
55661: DOUBLE
55662: LD_INT 1
55664: DEC
55665: ST_TO_ADDR
55666: LD_INT 8
55668: PUSH
55669: FOR_TO
55670: IFFALSE 55811
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55672: LD_EXP 5
55676: PUSH
55677: LD_VAR 0 1
55681: ARRAY
55682: IFFALSE 55695
55684: PUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: CALL_OW 108
55694: AND
55695: IFFALSE 55709
55697: PUSH
55698: LD_VAR 0 1
55702: PUSH
55703: LD_OWVAR 2
55707: NONEQUAL
55708: AND
55709: IFFALSE 55809
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55711: LD_EXP 6
55715: PUSH
55716: LD_VAR 0 1
55720: ARRAY
55721: NOT
55722: IFTRUE 55770
55724: PUSH
55725: LD_EXP 6
55729: PUSH
55730: LD_VAR 0 1
55734: ARRAY
55735: PUSH
55736: LD_EXP 6
55740: PUSH
55741: LD_OWVAR 2
55745: ARRAY
55746: NONEQUAL
55747: IFFALSE 55769
55749: PUSH
55750: LD_OWVAR 2
55754: PPUSH
55755: LD_VAR 0 1
55759: PPUSH
55760: CALL_OW 81
55764: PUSH
55765: LD_INT 1
55767: NONEQUAL
55768: AND
55769: OR
55770: IFFALSE 55809
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55772: LD_VAR 0 1
55776: PPUSH
55777: CALL 55454 0 1
55781: PUSH
55782: LD_EXP 33
55786: GREATEREQUAL
55787: IFFALSE 55800
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL 56018 0 1
55799: AND
55800: IFFALSE 55809
// begin enable ( mpLose ) ;
55802: LD_INT 102
55804: ENABLE_MARKED
// exit ;
55805: POP
55806: POP
55807: GO 55825
// end ;
55809: GO 55669
55811: POP
55812: POP
// if canWin then
55813: LD_VAR 0 2
55817: IFFALSE 55824
// enable ( mpWin ) else
55819: LD_INT 101
55821: ENABLE_MARKED
55822: GO 55825
// enable ;
55824: ENABLE
// end ; end ;
55825: PPOPN 2
55827: END
// function EnemiesInGame ; var i ; begin
55828: LD_INT 0
55830: PPUSH
55831: PPUSH
// result := false ;
55832: LD_ADDR_VAR 0 1
55836: PUSH
55837: LD_INT 0
55839: ST_TO_ADDR
// for i := 1 to 8 do
55840: LD_ADDR_VAR 0 2
55844: PUSH
55845: DOUBLE
55846: LD_INT 1
55848: DEC
55849: ST_TO_ADDR
55850: LD_INT 8
55852: PUSH
55853: FOR_TO
55854: IFFALSE 55969
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55856: LD_VAR 0 2
55860: PUSH
55861: LD_OWVAR 2
55865: NONEQUAL
55866: IFFALSE 55879
55868: PUSH
55869: LD_VAR 0 2
55873: PPUSH
55874: CALL 56018 0 1
55878: AND
55879: IFFALSE 55892
55881: PUSH
55882: LD_VAR 0 2
55886: PPUSH
55887: CALL_OW 108
55891: AND
55892: IFFALSE 55967
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55894: LD_EXP 6
55898: PUSH
55899: LD_VAR 0 2
55903: ARRAY
55904: NOT
55905: IFTRUE 55953
55907: PUSH
55908: LD_EXP 6
55912: PUSH
55913: LD_VAR 0 2
55917: ARRAY
55918: PUSH
55919: LD_EXP 6
55923: PUSH
55924: LD_OWVAR 2
55928: ARRAY
55929: NONEQUAL
55930: IFFALSE 55952
55932: PUSH
55933: LD_OWVAR 2
55937: PPUSH
55938: LD_VAR 0 2
55942: PPUSH
55943: CALL_OW 81
55947: PUSH
55948: LD_INT 1
55950: NONEQUAL
55951: AND
55952: OR
55953: IFFALSE 55967
// begin result := true ;
55955: LD_ADDR_VAR 0 1
55959: PUSH
55960: LD_INT 1
55962: ST_TO_ADDR
// exit ;
55963: POP
55964: POP
55965: GO 55971
// end ;
55967: GO 55853
55969: POP
55970: POP
// end ;
55971: LD_VAR 0 1
55975: RET
// function CanWinLoose ; begin
55976: LD_INT 0
55978: PPUSH
// result := true ;
55979: LD_ADDR_VAR 0 1
55983: PUSH
55984: LD_INT 1
55986: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55987: CALL_OW 531
55991: IFFALSE 56003
55993: PUSH
55994: CALL_OW 519
55998: PUSH
55999: LD_INT 1
56001: GREATER
56002: AND
56003: IFFALSE 56013
// result := false ;
56005: LD_ADDR_VAR 0 1
56009: PUSH
56010: LD_INT 0
56012: ST_TO_ADDR
// end ;
56013: LD_VAR 0 1
56017: RET
// function HasPower ( i ) ; begin
56018: LD_INT 0
56020: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56021: LD_ADDR_VAR 0 2
56025: PUSH
56026: LD_INT 22
56028: PUSH
56029: LD_VAR 0 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 21
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 33
56053: PUSH
56054: LD_INT 3
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 33
56063: PUSH
56064: LD_INT 5
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PPUSH
56081: CALL_OW 69
56085: ST_TO_ADDR
// end ; end_of_file end_of_file
56086: LD_VAR 0 2
56090: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56091: LD_VAR 0 1
56095: PUSH
56096: LD_INT 200
56098: DOUBLE
56099: GREATEREQUAL
56100: IFFALSE 56108
56102: LD_INT 299
56104: DOUBLE
56105: LESSEQUAL
56106: IFTRUE 56110
56108: GO 56142
56110: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56111: LD_VAR 0 1
56115: PPUSH
56116: LD_VAR 0 2
56120: PPUSH
56121: LD_VAR 0 3
56125: PPUSH
56126: LD_VAR 0 4
56130: PPUSH
56131: LD_VAR 0 5
56135: PPUSH
56136: CALL 57004 0 5
56140: GO 56219
56142: LD_INT 300
56144: DOUBLE
56145: GREATEREQUAL
56146: IFFALSE 56154
56148: LD_INT 399
56150: DOUBLE
56151: LESSEQUAL
56152: IFTRUE 56156
56154: GO 56218
56156: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56157: LD_VAR 0 1
56161: PPUSH
56162: LD_VAR 0 2
56166: PPUSH
56167: LD_VAR 0 3
56171: PPUSH
56172: LD_VAR 0 4
56176: PPUSH
56177: LD_VAR 0 5
56181: PPUSH
56182: LD_VAR 0 6
56186: PPUSH
56187: LD_VAR 0 7
56191: PPUSH
56192: LD_VAR 0 8
56196: PPUSH
56197: LD_VAR 0 9
56201: PPUSH
56202: LD_VAR 0 10
56206: PPUSH
56207: LD_VAR 0 11
56211: PPUSH
56212: CALL 63325 0 11
56216: GO 56219
56218: POP
// end ;
56219: PPOPN 11
56221: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56222: LD_VAR 0 1
56226: PPUSH
56227: LD_VAR 0 2
56231: PPUSH
56232: LD_VAR 0 3
56236: PPUSH
56237: LD_VAR 0 4
56241: PPUSH
56242: LD_VAR 0 5
56246: PPUSH
56247: CALL 56304 0 5
// end ; end_of_file
56251: PPOPN 5
56253: END
// export function SOS_UnitDestroyed ( un ) ; begin
56254: LD_INT 0
56256: PPUSH
// ComRadiation ( un ) ;
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL 57424 0 1
// end ;
56266: LD_VAR 0 2
56270: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56271: LD_INT 0
56273: PPUSH
// ComRadiation ( un ) ;
56274: LD_VAR 0 1
56278: PPUSH
56279: CALL 57424 0 1
// end ;
56283: LD_VAR 0 2
56287: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56288: LD_INT 0
56290: PPUSH
// end ;
56291: LD_VAR 0 4
56295: RET
// export function SOS_Command ( cmd ) ; begin
56296: LD_INT 0
56298: PPUSH
// end ;
56299: LD_VAR 0 2
56303: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56304: LD_INT 0
56306: PPUSH
// end ;
56307: LD_VAR 0 6
56311: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56312: LD_INT 0
56314: PPUSH
56315: PPUSH
56316: PPUSH
56317: PPUSH
56318: PPUSH
// if not vehicle or not factory then
56319: LD_VAR 0 1
56323: NOT
56324: IFTRUE 56333
56326: PUSH
56327: LD_VAR 0 2
56331: NOT
56332: OR
56333: IFFALSE 56337
// exit ;
56335: GO 56999
// weapon := GetWeapon ( vehicle ) ;
56337: LD_ADDR_VAR 0 7
56341: PUSH
56342: LD_VAR 0 1
56346: PPUSH
56347: CALL_OW 264
56351: ST_TO_ADDR
// if weapon = ar_miner then
56352: LD_VAR 0 7
56356: PUSH
56357: LD_INT 81
56359: EQUAL
56360: IFFALSE 56417
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56362: LD_ADDR_EXP 55
56366: PUSH
56367: LD_EXP 55
56371: PPUSH
56372: LD_EXP 55
56376: PUSH
56377: LD_INT 1
56379: PLUS
56380: PPUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: CALL_OW 1
56390: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56391: LD_ADDR_EXP 56
56395: PUSH
56396: LD_EXP 56
56400: PPUSH
56401: LD_EXP 56
56405: PUSH
56406: LD_INT 1
56408: PLUS
56409: PPUSH
56410: EMPTY
56411: PPUSH
56412: CALL_OW 1
56416: ST_TO_ADDR
// end ; if not factoryWaypoints then
56417: LD_EXP 58
56421: NOT
56422: IFFALSE 56426
// exit ;
56424: GO 56999
// for i := 1 to Count ( factoryWaypoints ) do
56426: LD_ADDR_VAR 0 4
56430: PUSH
56431: DOUBLE
56432: LD_INT 1
56434: DEC
56435: ST_TO_ADDR
56436: LD_EXP 58
56440: PPUSH
56441: CALL 5209 0 1
56445: PUSH
56446: FOR_TO
56447: IFFALSE 56997
// if factoryWaypoints [ i ] [ 2 ] = factory then
56449: LD_EXP 58
56453: PUSH
56454: LD_VAR 0 4
56458: ARRAY
56459: PUSH
56460: LD_INT 2
56462: ARRAY
56463: PUSH
56464: LD_VAR 0 2
56468: EQUAL
56469: IFFALSE 56995
// begin if GetControl ( vehicle ) = control_manual then
56471: LD_VAR 0 1
56475: PPUSH
56476: CALL_OW 263
56480: PUSH
56481: LD_INT 1
56483: EQUAL
56484: IFFALSE 56848
// begin driver := IsDrivenBy ( vehicle ) ;
56486: LD_ADDR_VAR 0 5
56490: PUSH
56491: LD_VAR 0 1
56495: PPUSH
56496: CALL_OW 311
56500: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56501: LD_VAR 0 5
56505: PUSH
56506: LD_EXP 59
56510: IN
56511: IFTRUE 56525
56513: PUSH
56514: LD_VAR 0 1
56518: PUSH
56519: LD_EXP 59
56523: IN
56524: OR
56525: IFFALSE 56531
// exit ;
56527: POP
56528: POP
56529: GO 56999
// if not HasTask ( driver ) then
56531: LD_VAR 0 5
56535: PPUSH
56536: CALL_OW 314
56540: NOT
56541: IFFALSE 56846
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56543: LD_ADDR_EXP 59
56547: PUSH
56548: LD_EXP 59
56552: PPUSH
56553: LD_VAR 0 5
56557: PPUSH
56558: CALL 41175 0 2
56562: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56563: LD_ADDR_EXP 59
56567: PUSH
56568: LD_EXP 59
56572: PPUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: CALL 41175 0 2
56582: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56583: LD_ADDR_VAR 0 6
56587: PUSH
56588: LD_EXP 58
56592: PUSH
56593: LD_VAR 0 4
56597: ARRAY
56598: PUSH
56599: LD_INT 3
56601: ARRAY
56602: PPUSH
56603: LD_EXP 58
56607: PUSH
56608: LD_VAR 0 4
56612: ARRAY
56613: PUSH
56614: LD_INT 4
56616: ARRAY
56617: PPUSH
56618: CALL_OW 428
56622: ST_TO_ADDR
// if hex then
56623: LD_VAR 0 6
56627: IFFALSE 56645
// ComMoveUnit ( driver , hex ) else
56629: LD_VAR 0 5
56633: PPUSH
56634: LD_VAR 0 6
56638: PPUSH
56639: CALL_OW 112
56643: GO 56729
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56645: LD_VAR 0 1
56649: PPUSH
56650: LD_EXP 58
56654: PUSH
56655: LD_VAR 0 4
56659: ARRAY
56660: PUSH
56661: LD_INT 3
56663: ARRAY
56664: PPUSH
56665: LD_EXP 58
56669: PUSH
56670: LD_VAR 0 4
56674: ARRAY
56675: PUSH
56676: LD_INT 4
56678: ARRAY
56679: PPUSH
56680: CALL_OW 297
56684: PUSH
56685: LD_INT 0
56687: GREATER
56688: IFFALSE 56729
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56690: LD_VAR 0 5
56694: PPUSH
56695: LD_EXP 58
56699: PUSH
56700: LD_VAR 0 4
56704: ARRAY
56705: PUSH
56706: LD_INT 3
56708: ARRAY
56709: PPUSH
56710: LD_EXP 58
56714: PUSH
56715: LD_VAR 0 4
56719: ARRAY
56720: PUSH
56721: LD_INT 4
56723: ARRAY
56724: PPUSH
56725: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56729: LD_VAR 0 5
56733: PPUSH
56734: CALL_OW 181
// if Multiplayer then
56738: LD_OWVAR 4
56742: IFFALSE 56791
// begin repeat wait ( 10 ) ;
56744: LD_INT 10
56746: PPUSH
56747: CALL_OW 67
// until not IsInUnit ( driver ) ;
56751: LD_VAR 0 5
56755: PPUSH
56756: CALL_OW 310
56760: NOT
56761: IFFALSE 56744
// if not HasTask ( driver ) then
56763: LD_VAR 0 5
56767: PPUSH
56768: CALL_OW 314
56772: NOT
56773: IFFALSE 56789
// ComEnterUnit ( driver , factory ) ;
56775: LD_VAR 0 5
56779: PPUSH
56780: LD_VAR 0 2
56784: PPUSH
56785: CALL_OW 120
// end else
56789: GO 56805
// AddComEnterUnit ( driver , factory ) ;
56791: LD_VAR 0 5
56795: PPUSH
56796: LD_VAR 0 2
56800: PPUSH
56801: CALL_OW 180
// wait ( 0 0$1 ) ;
56805: LD_INT 35
56807: PPUSH
56808: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56812: LD_ADDR_EXP 59
56816: PUSH
56817: LD_EXP 59
56821: PUSH
56822: LD_VAR 0 5
56826: DIFF
56827: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56828: LD_ADDR_EXP 59
56832: PUSH
56833: LD_EXP 59
56837: PUSH
56838: LD_VAR 0 1
56842: DIFF
56843: ST_TO_ADDR
// break ;
56844: GO 56997
// end ; end else
56846: GO 56995
// if GetControl ( vehicle ) = control_remote then
56848: LD_VAR 0 1
56852: PPUSH
56853: CALL_OW 263
56857: PUSH
56858: LD_INT 2
56860: EQUAL
56861: IFFALSE 56947
// begin wait ( 0 0$2 ) ;
56863: LD_INT 70
56865: PPUSH
56866: CALL_OW 67
// repeat wait ( 10 ) ;
56870: LD_INT 10
56872: PPUSH
56873: CALL_OW 67
// Connect ( vehicle ) ;
56877: LD_VAR 0 1
56881: PPUSH
56882: CALL 11487 0 1
// until IsControledBy ( vehicle ) ;
56886: LD_VAR 0 1
56890: PPUSH
56891: CALL_OW 312
56895: IFFALSE 56870
// wait ( 10 ) ;
56897: LD_INT 10
56899: PPUSH
56900: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56904: LD_VAR 0 1
56908: PPUSH
56909: LD_EXP 58
56913: PUSH
56914: LD_VAR 0 4
56918: ARRAY
56919: PUSH
56920: LD_INT 3
56922: ARRAY
56923: PPUSH
56924: LD_EXP 58
56928: PUSH
56929: LD_VAR 0 4
56933: ARRAY
56934: PUSH
56935: LD_INT 4
56937: ARRAY
56938: PPUSH
56939: CALL_OW 111
// break ;
56943: GO 56997
// end else
56945: GO 56995
// begin wait ( 0 0$3 ) ;
56947: LD_INT 105
56949: PPUSH
56950: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56954: LD_VAR 0 1
56958: PPUSH
56959: LD_EXP 58
56963: PUSH
56964: LD_VAR 0 4
56968: ARRAY
56969: PUSH
56970: LD_INT 3
56972: ARRAY
56973: PPUSH
56974: LD_EXP 58
56978: PUSH
56979: LD_VAR 0 4
56983: ARRAY
56984: PUSH
56985: LD_INT 4
56987: ARRAY
56988: PPUSH
56989: CALL_OW 111
// break ;
56993: GO 56997
// end ; end ;
56995: GO 56446
56997: POP
56998: POP
// end ;
56999: LD_VAR 0 3
57003: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57004: LD_INT 0
57006: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57007: LD_VAR 0 1
57011: PUSH
57012: LD_INT 250
57014: EQUAL
57015: IFFALSE 57032
57017: PUSH
57018: LD_VAR 0 2
57022: PPUSH
57023: CALL_OW 264
57027: PUSH
57028: LD_INT 81
57030: EQUAL
57031: AND
57032: IFFALSE 57053
// MinerPlaceMine ( unit , x , y ) ;
57034: LD_VAR 0 2
57038: PPUSH
57039: LD_VAR 0 4
57043: PPUSH
57044: LD_VAR 0 5
57048: PPUSH
57049: CALL 60334 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57053: LD_VAR 0 1
57057: PUSH
57058: LD_INT 251
57060: EQUAL
57061: IFFALSE 57078
57063: PUSH
57064: LD_VAR 0 2
57068: PPUSH
57069: CALL_OW 264
57073: PUSH
57074: LD_INT 81
57076: EQUAL
57077: AND
57078: IFFALSE 57099
// MinerDetonateMine ( unit , x , y ) ;
57080: LD_VAR 0 2
57084: PPUSH
57085: LD_VAR 0 4
57089: PPUSH
57090: LD_VAR 0 5
57094: PPUSH
57095: CALL 60741 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57099: LD_VAR 0 1
57103: PUSH
57104: LD_INT 252
57106: EQUAL
57107: IFFALSE 57124
57109: PUSH
57110: LD_VAR 0 2
57114: PPUSH
57115: CALL_OW 264
57119: PUSH
57120: LD_INT 81
57122: EQUAL
57123: AND
57124: IFFALSE 57145
// MinerCreateMinefield ( unit , x , y ) ;
57126: LD_VAR 0 2
57130: PPUSH
57131: LD_VAR 0 4
57135: PPUSH
57136: LD_VAR 0 5
57140: PPUSH
57141: CALL 60973 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57145: LD_VAR 0 1
57149: PUSH
57150: LD_INT 253
57152: EQUAL
57153: IFFALSE 57170
57155: PUSH
57156: LD_VAR 0 2
57160: PPUSH
57161: CALL_OW 257
57165: PUSH
57166: LD_INT 5
57168: EQUAL
57169: AND
57170: IFFALSE 57191
// ComBinocular ( unit , x , y ) ;
57172: LD_VAR 0 2
57176: PPUSH
57177: LD_VAR 0 4
57181: PPUSH
57182: LD_VAR 0 5
57186: PPUSH
57187: CALL 61348 0 3
// if selectedUnit then
57191: LD_VAR 0 3
57195: IFFALSE 57255
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57197: LD_VAR 0 1
57201: PUSH
57202: LD_INT 254
57204: EQUAL
57205: IFFALSE 57222
57207: PUSH
57208: LD_VAR 0 2
57212: PPUSH
57213: CALL_OW 264
57217: PUSH
57218: LD_INT 99
57220: EQUAL
57221: AND
57222: IFFALSE 57239
57224: PUSH
57225: LD_VAR 0 3
57229: PPUSH
57230: CALL_OW 263
57234: PUSH
57235: LD_INT 3
57237: EQUAL
57238: AND
57239: IFFALSE 57255
// HackDestroyVehicle ( unit , selectedUnit ) ;
57241: LD_VAR 0 2
57245: PPUSH
57246: LD_VAR 0 3
57250: PPUSH
57251: CALL 59545 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57255: LD_VAR 0 1
57259: PUSH
57260: LD_INT 255
57262: EQUAL
57263: IFFALSE 57287
57265: PUSH
57266: LD_VAR 0 2
57270: PPUSH
57271: CALL_OW 264
57275: PUSH
57276: LD_INT 14
57278: PUSH
57279: LD_INT 53
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: IN
57286: AND
57287: IFFALSE 57305
57289: PUSH
57290: LD_VAR 0 4
57294: PPUSH
57295: LD_VAR 0 5
57299: PPUSH
57300: CALL_OW 488
57304: AND
57305: IFFALSE 57329
// CutTreeXYR ( unit , x , y , 12 ) ;
57307: LD_VAR 0 2
57311: PPUSH
57312: LD_VAR 0 4
57316: PPUSH
57317: LD_VAR 0 5
57321: PPUSH
57322: LD_INT 12
57324: PPUSH
57325: CALL 57520 0 4
// if cmd = 256 then
57329: LD_VAR 0 1
57333: PUSH
57334: LD_INT 256
57336: EQUAL
57337: IFFALSE 57358
// SetFactoryWaypoint ( unit , x , y ) ;
57339: LD_VAR 0 2
57343: PPUSH
57344: LD_VAR 0 4
57348: PPUSH
57349: LD_VAR 0 5
57353: PPUSH
57354: CALL 63333 0 3
// if cmd = 257 then
57358: LD_VAR 0 1
57362: PUSH
57363: LD_INT 257
57365: EQUAL
57366: IFFALSE 57387
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57368: LD_VAR 0 2
57372: PPUSH
57373: LD_VAR 0 4
57377: PPUSH
57378: LD_VAR 0 5
57382: PPUSH
57383: CALL 63829 0 3
// if cmd = 258 then
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 258
57394: EQUAL
57395: IFFALSE 57419
// BurnTreeXYR ( unit , x , y , 8 ) ;
57397: LD_VAR 0 2
57401: PPUSH
57402: LD_VAR 0 4
57406: PPUSH
57407: LD_VAR 0 5
57411: PPUSH
57412: LD_INT 8
57414: PPUSH
57415: CALL 57920 0 4
// end ;
57419: LD_VAR 0 6
57423: RET
// export function ComRadiation ( un ) ; var eff ; begin
57424: LD_INT 0
57426: PPUSH
57427: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 264
57437: PUSH
57438: LD_INT 91
57440: NONEQUAL
57441: IFFALSE 57445
// exit ;
57443: GO 57515
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57445: LD_INT 68
57447: PPUSH
57448: LD_VAR 0 1
57452: PPUSH
57453: CALL_OW 255
57457: PPUSH
57458: CALL_OW 321
57462: PUSH
57463: LD_INT 2
57465: EQUAL
57466: IFFALSE 57478
// eff := 50 else
57468: LD_ADDR_VAR 0 3
57472: PUSH
57473: LD_INT 50
57475: ST_TO_ADDR
57476: GO 57486
// eff := 25 ;
57478: LD_ADDR_VAR 0 3
57482: PUSH
57483: LD_INT 25
57485: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57486: LD_VAR 0 1
57490: PPUSH
57491: CALL_OW 250
57495: PPUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 251
57505: PPUSH
57506: LD_VAR 0 3
57510: PPUSH
57511: CALL_OW 495
// end ;
57515: LD_VAR 0 2
57519: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57520: LD_INT 0
57522: PPUSH
57523: PPUSH
57524: PPUSH
57525: PPUSH
57526: PPUSH
57527: PPUSH
57528: PPUSH
57529: PPUSH
57530: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57531: LD_VAR 0 1
57535: PPUSH
57536: CALL_OW 302
57540: NOT
57541: IFTRUE 57560
57543: PUSH
57544: LD_VAR 0 2
57548: PPUSH
57549: LD_VAR 0 3
57553: PPUSH
57554: CALL_OW 488
57558: NOT
57559: OR
57560: IFTRUE 57569
57562: PUSH
57563: LD_VAR 0 4
57567: NOT
57568: OR
57569: IFFALSE 57573
// exit ;
57571: GO 57915
// list := [ ] ;
57573: LD_ADDR_VAR 0 13
57577: PUSH
57578: EMPTY
57579: ST_TO_ADDR
// if x - r < 0 then
57580: LD_VAR 0 2
57584: PUSH
57585: LD_VAR 0 4
57589: MINUS
57590: PUSH
57591: LD_INT 0
57593: LESS
57594: IFFALSE 57606
// min_x := 0 else
57596: LD_ADDR_VAR 0 7
57600: PUSH
57601: LD_INT 0
57603: ST_TO_ADDR
57604: GO 57622
// min_x := x - r ;
57606: LD_ADDR_VAR 0 7
57610: PUSH
57611: LD_VAR 0 2
57615: PUSH
57616: LD_VAR 0 4
57620: MINUS
57621: ST_TO_ADDR
// if y - r < 0 then
57622: LD_VAR 0 3
57626: PUSH
57627: LD_VAR 0 4
57631: MINUS
57632: PUSH
57633: LD_INT 0
57635: LESS
57636: IFFALSE 57648
// min_y := 0 else
57638: LD_ADDR_VAR 0 8
57642: PUSH
57643: LD_INT 0
57645: ST_TO_ADDR
57646: GO 57664
// min_y := y - r ;
57648: LD_ADDR_VAR 0 8
57652: PUSH
57653: LD_VAR 0 3
57657: PUSH
57658: LD_VAR 0 4
57662: MINUS
57663: ST_TO_ADDR
// max_x := x + r ;
57664: LD_ADDR_VAR 0 9
57668: PUSH
57669: LD_VAR 0 2
57673: PUSH
57674: LD_VAR 0 4
57678: PLUS
57679: ST_TO_ADDR
// max_y := y + r ;
57680: LD_ADDR_VAR 0 10
57684: PUSH
57685: LD_VAR 0 3
57689: PUSH
57690: LD_VAR 0 4
57694: PLUS
57695: ST_TO_ADDR
// for _x = min_x to max_x do
57696: LD_ADDR_VAR 0 11
57700: PUSH
57701: DOUBLE
57702: LD_VAR 0 7
57706: DEC
57707: ST_TO_ADDR
57708: LD_VAR 0 9
57712: PUSH
57713: FOR_TO
57714: IFFALSE 57833
// for _y = min_y to max_y do
57716: LD_ADDR_VAR 0 12
57720: PUSH
57721: DOUBLE
57722: LD_VAR 0 8
57726: DEC
57727: ST_TO_ADDR
57728: LD_VAR 0 10
57732: PUSH
57733: FOR_TO
57734: IFFALSE 57829
// begin if not ValidHex ( _x , _y ) then
57736: LD_VAR 0 11
57740: PPUSH
57741: LD_VAR 0 12
57745: PPUSH
57746: CALL_OW 488
57750: NOT
57751: IFFALSE 57755
// continue ;
57753: GO 57733
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57755: LD_VAR 0 11
57759: PPUSH
57760: LD_VAR 0 12
57764: PPUSH
57765: CALL_OW 351
57769: IFFALSE 57787
57771: PUSH
57772: LD_VAR 0 11
57776: PPUSH
57777: LD_VAR 0 12
57781: PPUSH
57782: CALL_OW 554
57786: AND
57787: IFFALSE 57827
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57789: LD_ADDR_VAR 0 13
57793: PUSH
57794: LD_VAR 0 13
57798: PPUSH
57799: LD_VAR 0 13
57803: PUSH
57804: LD_INT 1
57806: PLUS
57807: PPUSH
57808: LD_VAR 0 11
57812: PUSH
57813: LD_VAR 0 12
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PPUSH
57822: CALL_OW 2
57826: ST_TO_ADDR
// end ;
57827: GO 57733
57829: POP
57830: POP
57831: GO 57713
57833: POP
57834: POP
// if not list then
57835: LD_VAR 0 13
57839: NOT
57840: IFFALSE 57844
// exit ;
57842: GO 57915
// for i in list do
57844: LD_ADDR_VAR 0 6
57848: PUSH
57849: LD_VAR 0 13
57853: PUSH
57854: FOR_IN
57855: IFFALSE 57913
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57857: LD_VAR 0 1
57861: PPUSH
57862: LD_STRING M
57864: PUSH
57865: LD_VAR 0 6
57869: PUSH
57870: LD_INT 1
57872: ARRAY
57873: PUSH
57874: LD_VAR 0 6
57878: PUSH
57879: LD_INT 2
57881: ARRAY
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: PUSH
57904: EMPTY
57905: LIST
57906: PPUSH
57907: CALL_OW 447
57911: GO 57854
57913: POP
57914: POP
// end ;
57915: LD_VAR 0 5
57919: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57920: LD_INT 0
57922: PPUSH
57923: PPUSH
57924: PPUSH
57925: PPUSH
57926: PPUSH
57927: PPUSH
57928: PPUSH
57929: PPUSH
57930: PPUSH
57931: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57932: LD_VAR 0 1
57936: PPUSH
57937: CALL_OW 302
57941: NOT
57942: IFTRUE 57961
57944: PUSH
57945: LD_VAR 0 2
57949: PPUSH
57950: LD_VAR 0 3
57954: PPUSH
57955: CALL_OW 488
57959: NOT
57960: OR
57961: IFTRUE 57970
57963: PUSH
57964: LD_VAR 0 4
57968: NOT
57969: OR
57970: IFFALSE 57974
// exit ;
57972: GO 58491
// list := [ ] ;
57974: LD_ADDR_VAR 0 13
57978: PUSH
57979: EMPTY
57980: ST_TO_ADDR
// if x - r < 0 then
57981: LD_VAR 0 2
57985: PUSH
57986: LD_VAR 0 4
57990: MINUS
57991: PUSH
57992: LD_INT 0
57994: LESS
57995: IFFALSE 58007
// min_x := 0 else
57997: LD_ADDR_VAR 0 7
58001: PUSH
58002: LD_INT 0
58004: ST_TO_ADDR
58005: GO 58023
// min_x := x - r ;
58007: LD_ADDR_VAR 0 7
58011: PUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_VAR 0 4
58021: MINUS
58022: ST_TO_ADDR
// if y - r < 0 then
58023: LD_VAR 0 3
58027: PUSH
58028: LD_VAR 0 4
58032: MINUS
58033: PUSH
58034: LD_INT 0
58036: LESS
58037: IFFALSE 58049
// min_y := 0 else
58039: LD_ADDR_VAR 0 8
58043: PUSH
58044: LD_INT 0
58046: ST_TO_ADDR
58047: GO 58065
// min_y := y - r ;
58049: LD_ADDR_VAR 0 8
58053: PUSH
58054: LD_VAR 0 3
58058: PUSH
58059: LD_VAR 0 4
58063: MINUS
58064: ST_TO_ADDR
// max_x := x + r ;
58065: LD_ADDR_VAR 0 9
58069: PUSH
58070: LD_VAR 0 2
58074: PUSH
58075: LD_VAR 0 4
58079: PLUS
58080: ST_TO_ADDR
// max_y := y + r ;
58081: LD_ADDR_VAR 0 10
58085: PUSH
58086: LD_VAR 0 3
58090: PUSH
58091: LD_VAR 0 4
58095: PLUS
58096: ST_TO_ADDR
// for _x = min_x to max_x do
58097: LD_ADDR_VAR 0 11
58101: PUSH
58102: DOUBLE
58103: LD_VAR 0 7
58107: DEC
58108: ST_TO_ADDR
58109: LD_VAR 0 9
58113: PUSH
58114: FOR_TO
58115: IFFALSE 58234
// for _y = min_y to max_y do
58117: LD_ADDR_VAR 0 12
58121: PUSH
58122: DOUBLE
58123: LD_VAR 0 8
58127: DEC
58128: ST_TO_ADDR
58129: LD_VAR 0 10
58133: PUSH
58134: FOR_TO
58135: IFFALSE 58230
// begin if not ValidHex ( _x , _y ) then
58137: LD_VAR 0 11
58141: PPUSH
58142: LD_VAR 0 12
58146: PPUSH
58147: CALL_OW 488
58151: NOT
58152: IFFALSE 58156
// continue ;
58154: GO 58134
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58156: LD_VAR 0 11
58160: PPUSH
58161: LD_VAR 0 12
58165: PPUSH
58166: CALL_OW 351
58170: IFFALSE 58188
58172: PUSH
58173: LD_VAR 0 11
58177: PPUSH
58178: LD_VAR 0 12
58182: PPUSH
58183: CALL_OW 554
58187: AND
58188: IFFALSE 58228
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58190: LD_ADDR_VAR 0 13
58194: PUSH
58195: LD_VAR 0 13
58199: PPUSH
58200: LD_VAR 0 13
58204: PUSH
58205: LD_INT 1
58207: PLUS
58208: PPUSH
58209: LD_VAR 0 11
58213: PUSH
58214: LD_VAR 0 12
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PPUSH
58223: CALL_OW 2
58227: ST_TO_ADDR
// end ;
58228: GO 58134
58230: POP
58231: POP
58232: GO 58114
58234: POP
58235: POP
// if not list then
58236: LD_VAR 0 13
58240: NOT
58241: IFFALSE 58245
// exit ;
58243: GO 58491
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58245: LD_ADDR_VAR 0 13
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: LD_VAR 0 13
58259: PPUSH
58260: LD_INT 1
58262: PPUSH
58263: LD_INT 1
58265: PPUSH
58266: CALL 8615 0 4
58270: ST_TO_ADDR
// ComStop ( flame ) ;
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL_OW 141
// for i in list do
58280: LD_ADDR_VAR 0 6
58284: PUSH
58285: LD_VAR 0 13
58289: PUSH
58290: FOR_IN
58291: IFFALSE 58322
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 6
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 6
58311: PUSH
58312: LD_INT 2
58314: ARRAY
58315: PPUSH
58316: CALL_OW 176
58320: GO 58290
58322: POP
58323: POP
// repeat wait ( 0 0$1 ) ;
58324: LD_INT 35
58326: PPUSH
58327: CALL_OW 67
// task := GetTaskList ( flame ) ;
58331: LD_ADDR_VAR 0 14
58335: PUSH
58336: LD_VAR 0 1
58340: PPUSH
58341: CALL_OW 437
58345: ST_TO_ADDR
// if not task then
58346: LD_VAR 0 14
58350: NOT
58351: IFFALSE 58355
// exit ;
58353: GO 58491
// if task [ 1 ] [ 1 ] <> | then
58355: LD_VAR 0 14
58359: PUSH
58360: LD_INT 1
58362: ARRAY
58363: PUSH
58364: LD_INT 1
58366: ARRAY
58367: PUSH
58368: LD_STRING |
58370: NONEQUAL
58371: IFFALSE 58375
// exit ;
58373: GO 58491
// _x := task [ 1 ] [ 2 ] ;
58375: LD_ADDR_VAR 0 11
58379: PUSH
58380: LD_VAR 0 14
58384: PUSH
58385: LD_INT 1
58387: ARRAY
58388: PUSH
58389: LD_INT 2
58391: ARRAY
58392: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58393: LD_ADDR_VAR 0 12
58397: PUSH
58398: LD_VAR 0 14
58402: PUSH
58403: LD_INT 1
58405: ARRAY
58406: PUSH
58407: LD_INT 3
58409: ARRAY
58410: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58411: LD_VAR 0 11
58415: PPUSH
58416: LD_VAR 0 12
58420: PPUSH
58421: CALL_OW 351
58425: NOT
58426: IFTRUE 58445
58428: PUSH
58429: LD_VAR 0 11
58433: PPUSH
58434: LD_VAR 0 12
58438: PPUSH
58439: CALL_OW 554
58443: NOT
58444: OR
58445: IFFALSE 58479
// begin task := Delete ( task , 1 ) ;
58447: LD_ADDR_VAR 0 14
58451: PUSH
58452: LD_VAR 0 14
58456: PPUSH
58457: LD_INT 1
58459: PPUSH
58460: CALL_OW 3
58464: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58465: LD_VAR 0 1
58469: PPUSH
58470: LD_VAR 0 14
58474: PPUSH
58475: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58479: LD_VAR 0 1
58483: PPUSH
58484: CALL_OW 314
58488: NOT
58489: IFFALSE 58324
// end ;
58491: LD_VAR 0 5
58495: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58496: LD_EXP 48
58500: NOT
58501: IFFALSE 58551
58503: GO 58505
58505: DISABLE
// begin initHack := true ;
58506: LD_ADDR_EXP 48
58510: PUSH
58511: LD_INT 1
58513: ST_TO_ADDR
// hackTanks := [ ] ;
58514: LD_ADDR_EXP 49
58518: PUSH
58519: EMPTY
58520: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58521: LD_ADDR_EXP 50
58525: PUSH
58526: EMPTY
58527: ST_TO_ADDR
// hackLimit := 3 ;
58528: LD_ADDR_EXP 51
58532: PUSH
58533: LD_INT 3
58535: ST_TO_ADDR
// hackDist := 12 ;
58536: LD_ADDR_EXP 52
58540: PUSH
58541: LD_INT 12
58543: ST_TO_ADDR
// hackCounter := [ ] ;
58544: LD_ADDR_EXP 53
58548: PUSH
58549: EMPTY
58550: ST_TO_ADDR
// end ;
58551: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58552: LD_EXP 48
58556: IFFALSE 58574
58558: PUSH
58559: LD_INT 34
58561: PUSH
58562: LD_INT 99
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PPUSH
58569: CALL_OW 69
58573: AND
58574: IFFALSE 58827
58576: GO 58578
58578: DISABLE
58579: LD_INT 0
58581: PPUSH
58582: PPUSH
// begin enable ;
58583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58584: LD_ADDR_VAR 0 1
58588: PUSH
58589: LD_INT 34
58591: PUSH
58592: LD_INT 99
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PPUSH
58599: CALL_OW 69
58603: PUSH
58604: FOR_IN
58605: IFFALSE 58825
// begin if not i in hackTanks then
58607: LD_VAR 0 1
58611: PUSH
58612: LD_EXP 49
58616: IN
58617: NOT
58618: IFFALSE 58701
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58620: LD_ADDR_EXP 49
58624: PUSH
58625: LD_EXP 49
58629: PPUSH
58630: LD_EXP 49
58634: PUSH
58635: LD_INT 1
58637: PLUS
58638: PPUSH
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 1
58648: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58649: LD_ADDR_EXP 50
58653: PUSH
58654: LD_EXP 50
58658: PPUSH
58659: LD_EXP 50
58663: PUSH
58664: LD_INT 1
58666: PLUS
58667: PPUSH
58668: EMPTY
58669: PPUSH
58670: CALL_OW 1
58674: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58675: LD_ADDR_EXP 53
58679: PUSH
58680: LD_EXP 53
58684: PPUSH
58685: LD_EXP 53
58689: PUSH
58690: LD_INT 1
58692: PLUS
58693: PPUSH
58694: EMPTY
58695: PPUSH
58696: CALL_OW 1
58700: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 302
58710: NOT
58711: IFFALSE 58724
// begin HackUnlinkAll ( i ) ;
58713: LD_VAR 0 1
58717: PPUSH
58718: CALL 58830 0 1
// continue ;
58722: GO 58604
// end ; HackCheckCapturedStatus ( i ) ;
58724: LD_VAR 0 1
58728: PPUSH
58729: CALL 59275 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58733: LD_ADDR_VAR 0 2
58737: PUSH
58738: LD_INT 81
58740: PUSH
58741: LD_VAR 0 1
58745: PPUSH
58746: CALL_OW 255
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 33
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 91
58767: PUSH
58768: LD_VAR 0 1
58772: PUSH
58773: LD_EXP 52
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 50
58785: PUSH
58786: EMPTY
58787: LIST
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: PPUSH
58795: CALL_OW 69
58799: ST_TO_ADDR
// if not tmp then
58800: LD_VAR 0 2
58804: NOT
58805: IFFALSE 58809
// continue ;
58807: GO 58604
// HackLink ( i , tmp ) ;
58809: LD_VAR 0 1
58813: PPUSH
58814: LD_VAR 0 2
58818: PPUSH
58819: CALL 58966 0 2
// end ;
58823: GO 58604
58825: POP
58826: POP
// end ;
58827: PPOPN 2
58829: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58830: LD_INT 0
58832: PPUSH
58833: PPUSH
58834: PPUSH
// if not hack in hackTanks then
58835: LD_VAR 0 1
58839: PUSH
58840: LD_EXP 49
58844: IN
58845: NOT
58846: IFFALSE 58850
// exit ;
58848: GO 58961
// index := GetElementIndex ( hackTanks , hack ) ;
58850: LD_ADDR_VAR 0 4
58854: PUSH
58855: LD_EXP 49
58859: PPUSH
58860: LD_VAR 0 1
58864: PPUSH
58865: CALL 7910 0 2
58869: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58870: LD_EXP 50
58874: PUSH
58875: LD_VAR 0 4
58879: ARRAY
58880: IFFALSE 58961
// begin for i in hackTanksCaptured [ index ] do
58882: LD_ADDR_VAR 0 3
58886: PUSH
58887: LD_EXP 50
58891: PUSH
58892: LD_VAR 0 4
58896: ARRAY
58897: PUSH
58898: FOR_IN
58899: IFFALSE 58925
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58901: LD_VAR 0 3
58905: PUSH
58906: LD_INT 1
58908: ARRAY
58909: PPUSH
58910: LD_VAR 0 3
58914: PUSH
58915: LD_INT 2
58917: ARRAY
58918: PPUSH
58919: CALL_OW 235
58923: GO 58898
58925: POP
58926: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58927: LD_ADDR_EXP 50
58931: PUSH
58932: LD_EXP 50
58936: PPUSH
58937: LD_VAR 0 4
58941: PPUSH
58942: EMPTY
58943: PPUSH
58944: CALL_OW 1
58948: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58949: LD_VAR 0 1
58953: PPUSH
58954: LD_INT 0
58956: PPUSH
58957: CALL_OW 505
// end ; end ;
58961: LD_VAR 0 2
58965: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58966: LD_INT 0
58968: PPUSH
58969: PPUSH
58970: PPUSH
// if not hack in hackTanks or not vehicles then
58971: LD_VAR 0 1
58975: PUSH
58976: LD_EXP 49
58980: IN
58981: NOT
58982: IFTRUE 58991
58984: PUSH
58985: LD_VAR 0 2
58989: NOT
58990: OR
58991: IFFALSE 58995
// exit ;
58993: GO 59270
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58995: LD_ADDR_VAR 0 2
58999: PUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: LD_VAR 0 2
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: LD_INT 1
59015: PPUSH
59016: CALL 8562 0 4
59020: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59021: LD_ADDR_VAR 0 5
59025: PUSH
59026: LD_EXP 49
59030: PPUSH
59031: LD_VAR 0 1
59035: PPUSH
59036: CALL 7910 0 2
59040: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59041: LD_EXP 50
59045: PUSH
59046: LD_VAR 0 5
59050: ARRAY
59051: PUSH
59052: LD_EXP 51
59056: LESS
59057: IFFALSE 59246
// begin for i := 1 to vehicles do
59059: LD_ADDR_VAR 0 4
59063: PUSH
59064: DOUBLE
59065: LD_INT 1
59067: DEC
59068: ST_TO_ADDR
59069: LD_VAR 0 2
59073: PUSH
59074: FOR_TO
59075: IFFALSE 59244
// begin if hackTanksCaptured [ index ] = hackLimit then
59077: LD_EXP 50
59081: PUSH
59082: LD_VAR 0 5
59086: ARRAY
59087: PUSH
59088: LD_EXP 51
59092: EQUAL
59093: IFFALSE 59097
// break ;
59095: GO 59244
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59097: LD_ADDR_EXP 53
59101: PUSH
59102: LD_EXP 53
59106: PPUSH
59107: LD_VAR 0 5
59111: PPUSH
59112: LD_EXP 53
59116: PUSH
59117: LD_VAR 0 5
59121: ARRAY
59122: PUSH
59123: LD_INT 1
59125: PLUS
59126: PPUSH
59127: CALL_OW 1
59131: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59132: LD_ADDR_EXP 50
59136: PUSH
59137: LD_EXP 50
59141: PPUSH
59142: LD_VAR 0 5
59146: PUSH
59147: LD_EXP 50
59151: PUSH
59152: LD_VAR 0 5
59156: ARRAY
59157: PUSH
59158: LD_INT 1
59160: PLUS
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PPUSH
59166: LD_VAR 0 2
59170: PUSH
59171: LD_VAR 0 4
59175: ARRAY
59176: PUSH
59177: LD_VAR 0 2
59181: PUSH
59182: LD_VAR 0 4
59186: ARRAY
59187: PPUSH
59188: CALL_OW 255
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PPUSH
59197: CALL 8127 0 3
59201: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59202: LD_VAR 0 2
59206: PUSH
59207: LD_VAR 0 4
59211: ARRAY
59212: PPUSH
59213: LD_VAR 0 1
59217: PPUSH
59218: CALL_OW 255
59222: PPUSH
59223: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59227: LD_VAR 0 2
59231: PUSH
59232: LD_VAR 0 4
59236: ARRAY
59237: PPUSH
59238: CALL_OW 141
// end ;
59242: GO 59074
59244: POP
59245: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59246: LD_VAR 0 1
59250: PPUSH
59251: LD_EXP 50
59255: PUSH
59256: LD_VAR 0 5
59260: ARRAY
59261: PUSH
59262: LD_INT 0
59264: PLUS
59265: PPUSH
59266: CALL_OW 505
// end ;
59270: LD_VAR 0 3
59274: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59275: LD_INT 0
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
// if not hack in hackTanks then
59281: LD_VAR 0 1
59285: PUSH
59286: LD_EXP 49
59290: IN
59291: NOT
59292: IFFALSE 59296
// exit ;
59294: GO 59540
// index := GetElementIndex ( hackTanks , hack ) ;
59296: LD_ADDR_VAR 0 4
59300: PUSH
59301: LD_EXP 49
59305: PPUSH
59306: LD_VAR 0 1
59310: PPUSH
59311: CALL 7910 0 2
59315: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59316: LD_ADDR_VAR 0 3
59320: PUSH
59321: DOUBLE
59322: LD_EXP 50
59326: PUSH
59327: LD_VAR 0 4
59331: ARRAY
59332: INC
59333: ST_TO_ADDR
59334: LD_INT 1
59336: PUSH
59337: FOR_DOWNTO
59338: IFFALSE 59514
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59340: LD_ADDR_VAR 0 5
59344: PUSH
59345: LD_EXP 50
59349: PUSH
59350: LD_VAR 0 4
59354: ARRAY
59355: PUSH
59356: LD_VAR 0 3
59360: ARRAY
59361: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59362: LD_VAR 0 5
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PPUSH
59371: CALL_OW 302
59375: NOT
59376: IFTRUE 59404
59378: PUSH
59379: LD_VAR 0 5
59383: PUSH
59384: LD_INT 1
59386: ARRAY
59387: PPUSH
59388: CALL_OW 255
59392: PUSH
59393: LD_VAR 0 1
59397: PPUSH
59398: CALL_OW 255
59402: NONEQUAL
59403: OR
59404: IFFALSE 59512
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59406: LD_VAR 0 5
59410: PUSH
59411: LD_INT 1
59413: ARRAY
59414: PPUSH
59415: CALL_OW 305
59419: IFFALSE 59447
59421: PUSH
59422: LD_VAR 0 5
59426: PUSH
59427: LD_INT 1
59429: ARRAY
59430: PPUSH
59431: CALL_OW 255
59435: PUSH
59436: LD_VAR 0 1
59440: PPUSH
59441: CALL_OW 255
59445: EQUAL
59446: AND
59447: IFFALSE 59471
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59449: LD_VAR 0 5
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: PPUSH
59458: LD_VAR 0 5
59462: PUSH
59463: LD_INT 2
59465: ARRAY
59466: PPUSH
59467: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59471: LD_ADDR_EXP 50
59475: PUSH
59476: LD_EXP 50
59480: PPUSH
59481: LD_VAR 0 4
59485: PPUSH
59486: LD_EXP 50
59490: PUSH
59491: LD_VAR 0 4
59495: ARRAY
59496: PPUSH
59497: LD_VAR 0 3
59501: PPUSH
59502: CALL_OW 3
59506: PPUSH
59507: CALL_OW 1
59511: ST_TO_ADDR
// end ; end ;
59512: GO 59337
59514: POP
59515: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59516: LD_VAR 0 1
59520: PPUSH
59521: LD_EXP 50
59525: PUSH
59526: LD_VAR 0 4
59530: ARRAY
59531: PUSH
59532: LD_INT 0
59534: PLUS
59535: PPUSH
59536: CALL_OW 505
// end ;
59540: LD_VAR 0 2
59544: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59545: LD_INT 0
59547: PPUSH
59548: PPUSH
59549: PPUSH
59550: PPUSH
// if not hack in hackTanks then
59551: LD_VAR 0 1
59555: PUSH
59556: LD_EXP 49
59560: IN
59561: NOT
59562: IFFALSE 59566
// exit ;
59564: GO 59651
// index := GetElementIndex ( hackTanks , hack ) ;
59566: LD_ADDR_VAR 0 5
59570: PUSH
59571: LD_EXP 49
59575: PPUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: CALL 7910 0 2
59585: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59586: LD_ADDR_VAR 0 4
59590: PUSH
59591: DOUBLE
59592: LD_INT 1
59594: DEC
59595: ST_TO_ADDR
59596: LD_EXP 50
59600: PUSH
59601: LD_VAR 0 5
59605: ARRAY
59606: PUSH
59607: FOR_TO
59608: IFFALSE 59649
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59610: LD_EXP 50
59614: PUSH
59615: LD_VAR 0 5
59619: ARRAY
59620: PUSH
59621: LD_VAR 0 4
59625: ARRAY
59626: PUSH
59627: LD_INT 1
59629: ARRAY
59630: PUSH
59631: LD_VAR 0 2
59635: EQUAL
59636: IFFALSE 59647
// KillUnit ( vehicle ) ;
59638: LD_VAR 0 2
59642: PPUSH
59643: CALL_OW 66
59647: GO 59607
59649: POP
59650: POP
// end ;
59651: LD_VAR 0 3
59655: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59656: LD_EXP 54
59660: NOT
59661: IFFALSE 59794
59663: GO 59665
59665: DISABLE
59666: LD_INT 0
59668: PPUSH
// begin initMiner := true ;
59669: LD_ADDR_EXP 54
59673: PUSH
59674: LD_INT 1
59676: ST_TO_ADDR
// minersList := [ ] ;
59677: LD_ADDR_EXP 55
59681: PUSH
59682: EMPTY
59683: ST_TO_ADDR
// minerMinesList := [ ] ;
59684: LD_ADDR_EXP 56
59688: PUSH
59689: EMPTY
59690: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59691: LD_ADDR_EXP 57
59695: PUSH
59696: LD_INT 6
59698: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59699: LD_ADDR_VAR 0 1
59703: PUSH
59704: LD_INT 34
59706: PUSH
59707: LD_INT 81
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PPUSH
59714: CALL_OW 69
59718: PUSH
59719: FOR_IN
59720: IFFALSE 59792
// begin if not i in minersList then
59722: LD_VAR 0 1
59726: PUSH
59727: LD_EXP 55
59731: IN
59732: NOT
59733: IFFALSE 59790
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59735: LD_ADDR_EXP 55
59739: PUSH
59740: LD_EXP 55
59744: PPUSH
59745: LD_EXP 55
59749: PUSH
59750: LD_INT 1
59752: PLUS
59753: PPUSH
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 1
59763: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59764: LD_ADDR_EXP 56
59768: PUSH
59769: LD_EXP 56
59773: PPUSH
59774: LD_EXP 56
59778: PUSH
59779: LD_INT 1
59781: PLUS
59782: PPUSH
59783: EMPTY
59784: PPUSH
59785: CALL_OW 1
59789: ST_TO_ADDR
// end end ;
59790: GO 59719
59792: POP
59793: POP
// end ;
59794: PPOPN 1
59796: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59797: LD_EXP 54
59801: IFFALSE 59832
59803: PUSH
59804: LD_EXP 56
59808: PPUSH
59809: CALL 5209 0 1
59813: IFTRUE 59831
59815: PUSH
59816: LD_INT 34
59818: PUSH
59819: LD_INT 81
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PPUSH
59826: CALL_OW 69
59830: OR
59831: AND
59832: IFFALSE 60331
59834: GO 59836
59836: DISABLE
59837: LD_INT 0
59839: PPUSH
59840: PPUSH
59841: PPUSH
59842: PPUSH
// begin enable ;
59843: ENABLE
// for i := minerMinesList downto 1 do
59844: LD_ADDR_VAR 0 1
59848: PUSH
59849: DOUBLE
59850: LD_EXP 56
59854: INC
59855: ST_TO_ADDR
59856: LD_INT 1
59858: PUSH
59859: FOR_DOWNTO
59860: IFFALSE 60329
// begin if IsLive ( minersList [ i ] ) then
59862: LD_EXP 55
59866: PUSH
59867: LD_VAR 0 1
59871: ARRAY
59872: PPUSH
59873: CALL_OW 300
59877: IFFALSE 59910
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59879: LD_EXP 55
59883: PUSH
59884: LD_VAR 0 1
59888: ARRAY
59889: PPUSH
59890: LD_EXP 56
59894: PUSH
59895: LD_VAR 0 1
59899: ARRAY
59900: PPUSH
59901: CALL 5209 0 1
59905: PPUSH
59906: CALL_OW 505
// if not minerMinesList [ i ] then
59910: LD_EXP 56
59914: PUSH
59915: LD_VAR 0 1
59919: ARRAY
59920: NOT
59921: IFFALSE 59925
// continue ;
59923: GO 59859
// for j := minerMinesList [ i ] downto 1 do
59925: LD_ADDR_VAR 0 2
59929: PUSH
59930: DOUBLE
59931: LD_EXP 56
59935: PUSH
59936: LD_VAR 0 1
59940: ARRAY
59941: INC
59942: ST_TO_ADDR
59943: LD_INT 1
59945: PUSH
59946: FOR_DOWNTO
59947: IFFALSE 60325
// begin side := GetSide ( minersList [ i ] ) ;
59949: LD_ADDR_VAR 0 3
59953: PUSH
59954: LD_EXP 55
59958: PUSH
59959: LD_VAR 0 1
59963: ARRAY
59964: PPUSH
59965: CALL_OW 255
59969: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59970: LD_EXP 55
59974: PUSH
59975: LD_VAR 0 1
59979: ARRAY
59980: PPUSH
59981: CALL_OW 301
59985: IFTRUE 60005
59987: PUSH
59988: LD_EXP 55
59992: PUSH
59993: LD_VAR 0 1
59997: ARRAY
59998: PPUSH
59999: CALL_OW 305
60003: NOT
60004: OR
60005: IFFALSE 60096
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60007: LD_EXP 56
60011: PUSH
60012: LD_VAR 0 1
60016: ARRAY
60017: PUSH
60018: LD_VAR 0 2
60022: ARRAY
60023: PUSH
60024: LD_INT 1
60026: ARRAY
60027: PPUSH
60028: LD_EXP 56
60032: PUSH
60033: LD_VAR 0 1
60037: ARRAY
60038: PUSH
60039: LD_VAR 0 2
60043: ARRAY
60044: PUSH
60045: LD_INT 2
60047: ARRAY
60048: PPUSH
60049: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60053: LD_ADDR_EXP 56
60057: PUSH
60058: LD_EXP 56
60062: PPUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: LD_EXP 56
60072: PUSH
60073: LD_VAR 0 1
60077: ARRAY
60078: PPUSH
60079: LD_VAR 0 2
60083: PPUSH
60084: CALL_OW 3
60088: PPUSH
60089: CALL_OW 1
60093: ST_TO_ADDR
// continue ;
60094: GO 59946
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60096: LD_ADDR_VAR 0 4
60100: PUSH
60101: LD_EXP 56
60105: PUSH
60106: LD_VAR 0 1
60110: ARRAY
60111: PUSH
60112: LD_VAR 0 2
60116: ARRAY
60117: PUSH
60118: LD_INT 1
60120: ARRAY
60121: PPUSH
60122: LD_EXP 56
60126: PUSH
60127: LD_VAR 0 1
60131: ARRAY
60132: PUSH
60133: LD_VAR 0 2
60137: ARRAY
60138: PUSH
60139: LD_INT 2
60141: ARRAY
60142: PPUSH
60143: CALL_OW 428
60147: ST_TO_ADDR
// if not tmp then
60148: LD_VAR 0 4
60152: NOT
60153: IFFALSE 60157
// continue ;
60155: GO 59946
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60157: LD_VAR 0 4
60161: PUSH
60162: LD_INT 81
60164: PUSH
60165: LD_VAR 0 3
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PPUSH
60174: CALL_OW 69
60178: IN
60179: IFFALSE 60229
60181: PUSH
60182: LD_EXP 56
60186: PUSH
60187: LD_VAR 0 1
60191: ARRAY
60192: PUSH
60193: LD_VAR 0 2
60197: ARRAY
60198: PUSH
60199: LD_INT 1
60201: ARRAY
60202: PPUSH
60203: LD_EXP 56
60207: PUSH
60208: LD_VAR 0 1
60212: ARRAY
60213: PUSH
60214: LD_VAR 0 2
60218: ARRAY
60219: PUSH
60220: LD_INT 2
60222: ARRAY
60223: PPUSH
60224: CALL_OW 458
60228: AND
60229: IFFALSE 60323
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60231: LD_EXP 56
60235: PUSH
60236: LD_VAR 0 1
60240: ARRAY
60241: PUSH
60242: LD_VAR 0 2
60246: ARRAY
60247: PUSH
60248: LD_INT 1
60250: ARRAY
60251: PPUSH
60252: LD_EXP 56
60256: PUSH
60257: LD_VAR 0 1
60261: ARRAY
60262: PUSH
60263: LD_VAR 0 2
60267: ARRAY
60268: PUSH
60269: LD_INT 2
60271: ARRAY
60272: PPUSH
60273: LD_VAR 0 3
60277: PPUSH
60278: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60282: LD_ADDR_EXP 56
60286: PUSH
60287: LD_EXP 56
60291: PPUSH
60292: LD_VAR 0 1
60296: PPUSH
60297: LD_EXP 56
60301: PUSH
60302: LD_VAR 0 1
60306: ARRAY
60307: PPUSH
60308: LD_VAR 0 2
60312: PPUSH
60313: CALL_OW 3
60317: PPUSH
60318: CALL_OW 1
60322: ST_TO_ADDR
// end ; end ;
60323: GO 59946
60325: POP
60326: POP
// end ;
60327: GO 59859
60329: POP
60330: POP
// end ;
60331: PPOPN 4
60333: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60334: LD_INT 0
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
// result := false ;
60340: LD_ADDR_VAR 0 4
60344: PUSH
60345: LD_INT 0
60347: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60348: LD_VAR 0 1
60352: PPUSH
60353: CALL_OW 264
60357: PUSH
60358: LD_INT 81
60360: EQUAL
60361: NOT
60362: IFFALSE 60366
// exit ;
60364: GO 60736
// side := GetSide ( unit ) ;
60366: LD_ADDR_VAR 0 6
60370: PUSH
60371: LD_VAR 0 1
60375: PPUSH
60376: CALL_OW 255
60380: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60381: LD_ADDR_VAR 0 5
60385: PUSH
60386: LD_EXP 55
60390: PPUSH
60391: LD_VAR 0 1
60395: PPUSH
60396: CALL 7910 0 2
60400: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60401: LD_EXP 56
60405: PUSH
60406: LD_VAR 0 5
60410: ARRAY
60411: PUSH
60412: LD_EXP 57
60416: GREATEREQUAL
60417: IFFALSE 60421
// exit ;
60419: GO 60736
// ComMoveXY ( unit , x , y ) ;
60421: LD_VAR 0 1
60425: PPUSH
60426: LD_VAR 0 2
60430: PPUSH
60431: LD_VAR 0 3
60435: PPUSH
60436: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60440: LD_INT 35
60442: PPUSH
60443: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60447: LD_VAR 0 1
60451: PPUSH
60452: LD_VAR 0 2
60456: PPUSH
60457: LD_VAR 0 3
60461: PPUSH
60462: CALL 39956 0 3
60466: NOT
60467: IFFALSE 60480
60469: PUSH
60470: LD_VAR 0 1
60474: PPUSH
60475: CALL_OW 314
60479: AND
60480: IFFALSE 60484
// exit ;
60482: GO 60736
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60484: LD_VAR 0 2
60488: PPUSH
60489: LD_VAR 0 3
60493: PPUSH
60494: CALL_OW 428
60498: PUSH
60499: LD_VAR 0 1
60503: EQUAL
60504: IFFALSE 60518
60506: PUSH
60507: LD_VAR 0 1
60511: PPUSH
60512: CALL_OW 314
60516: NOT
60517: AND
60518: IFFALSE 60440
// if MineAtPos ( x , y ) then
60520: LD_VAR 0 2
60524: PPUSH
60525: LD_VAR 0 3
60529: PPUSH
60530: CALL_OW 458
60534: IFFALSE 60538
// exit ;
60536: GO 60736
// if your_side = side then
60538: LD_OWVAR 2
60542: PUSH
60543: LD_VAR 0 6
60547: EQUAL
60548: IFFALSE 60567
// PlaySoundXY ( x , y , PlantMine ) ;
60550: LD_VAR 0 2
60554: PPUSH
60555: LD_VAR 0 3
60559: PPUSH
60560: LD_STRING PlantMine
60562: PPUSH
60563: CALL_OW 366
// repeat wait ( 1 ) ;
60567: LD_INT 1
60569: PPUSH
60570: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60574: LD_VAR 0 2
60578: PPUSH
60579: LD_VAR 0 3
60583: PPUSH
60584: LD_VAR 0 6
60588: PPUSH
60589: LD_INT 0
60591: PPUSH
60592: CALL_OW 454
60596: IFFALSE 60567
// if MineAtPos ( x , y ) then
60598: LD_VAR 0 2
60602: PPUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: CALL_OW 458
60612: IFFALSE 60728
// begin for i in minerMinesList [ index ] do
60614: LD_ADDR_VAR 0 7
60618: PUSH
60619: LD_EXP 56
60623: PUSH
60624: LD_VAR 0 5
60628: ARRAY
60629: PUSH
60630: FOR_IN
60631: IFFALSE 60673
// if i [ 1 ] = x and i [ 2 ] = y then
60633: LD_VAR 0 7
60637: PUSH
60638: LD_INT 1
60640: ARRAY
60641: PUSH
60642: LD_VAR 0 2
60646: EQUAL
60647: IFFALSE 60665
60649: PUSH
60650: LD_VAR 0 7
60654: PUSH
60655: LD_INT 2
60657: ARRAY
60658: PUSH
60659: LD_VAR 0 3
60663: EQUAL
60664: AND
60665: IFFALSE 60671
// exit ;
60667: POP
60668: POP
60669: GO 60736
60671: GO 60630
60673: POP
60674: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60675: LD_ADDR_EXP 56
60679: PUSH
60680: LD_EXP 56
60684: PPUSH
60685: LD_VAR 0 5
60689: PUSH
60690: LD_EXP 56
60694: PUSH
60695: LD_VAR 0 5
60699: ARRAY
60700: PUSH
60701: LD_INT 1
60703: PLUS
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PPUSH
60709: LD_VAR 0 2
60713: PUSH
60714: LD_VAR 0 3
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PPUSH
60723: CALL 8127 0 3
60727: ST_TO_ADDR
// end ; result := true ;
60728: LD_ADDR_VAR 0 4
60732: PUSH
60733: LD_INT 1
60735: ST_TO_ADDR
// end ;
60736: LD_VAR 0 4
60740: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60741: LD_INT 0
60743: PPUSH
60744: PPUSH
60745: PPUSH
// if not unit in minersList then
60746: LD_VAR 0 1
60750: PUSH
60751: LD_EXP 55
60755: IN
60756: NOT
60757: IFFALSE 60761
// exit ;
60759: GO 60968
// index := GetElementIndex ( minersList , unit ) ;
60761: LD_ADDR_VAR 0 6
60765: PUSH
60766: LD_EXP 55
60770: PPUSH
60771: LD_VAR 0 1
60775: PPUSH
60776: CALL 7910 0 2
60780: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: DOUBLE
60787: LD_EXP 56
60791: PUSH
60792: LD_VAR 0 6
60796: ARRAY
60797: INC
60798: ST_TO_ADDR
60799: LD_INT 1
60801: PUSH
60802: FOR_DOWNTO
60803: IFFALSE 60966
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60805: LD_EXP 56
60809: PUSH
60810: LD_VAR 0 6
60814: ARRAY
60815: PUSH
60816: LD_VAR 0 5
60820: ARRAY
60821: PUSH
60822: LD_INT 1
60824: ARRAY
60825: PPUSH
60826: LD_EXP 56
60830: PUSH
60831: LD_VAR 0 6
60835: ARRAY
60836: PUSH
60837: LD_VAR 0 5
60841: ARRAY
60842: PUSH
60843: LD_INT 2
60845: ARRAY
60846: PPUSH
60847: LD_VAR 0 2
60851: PPUSH
60852: LD_VAR 0 3
60856: PPUSH
60857: CALL_OW 298
60861: PUSH
60862: LD_INT 6
60864: LESS
60865: IFFALSE 60964
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60867: LD_EXP 56
60871: PUSH
60872: LD_VAR 0 6
60876: ARRAY
60877: PUSH
60878: LD_VAR 0 5
60882: ARRAY
60883: PUSH
60884: LD_INT 1
60886: ARRAY
60887: PPUSH
60888: LD_EXP 56
60892: PUSH
60893: LD_VAR 0 6
60897: ARRAY
60898: PUSH
60899: LD_VAR 0 5
60903: ARRAY
60904: PUSH
60905: LD_INT 2
60907: ARRAY
60908: PPUSH
60909: LD_VAR 0 1
60913: PPUSH
60914: CALL_OW 255
60918: PPUSH
60919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60923: LD_ADDR_EXP 56
60927: PUSH
60928: LD_EXP 56
60932: PPUSH
60933: LD_VAR 0 6
60937: PPUSH
60938: LD_EXP 56
60942: PUSH
60943: LD_VAR 0 6
60947: ARRAY
60948: PPUSH
60949: LD_VAR 0 5
60953: PPUSH
60954: CALL_OW 3
60958: PPUSH
60959: CALL_OW 1
60963: ST_TO_ADDR
// end ; end ;
60964: GO 60802
60966: POP
60967: POP
// end ;
60968: LD_VAR 0 4
60972: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60973: LD_INT 0
60975: PPUSH
60976: PPUSH
60977: PPUSH
60978: PPUSH
60979: PPUSH
60980: PPUSH
60981: PPUSH
60982: PPUSH
60983: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60984: LD_VAR 0 1
60988: PPUSH
60989: CALL_OW 264
60993: PUSH
60994: LD_INT 81
60996: EQUAL
60997: NOT
60998: IFTRUE 61013
61000: PUSH
61001: LD_VAR 0 1
61005: PUSH
61006: LD_EXP 55
61010: IN
61011: NOT
61012: OR
61013: IFFALSE 61017
// exit ;
61015: GO 61343
// index := GetElementIndex ( minersList , unit ) ;
61017: LD_ADDR_VAR 0 6
61021: PUSH
61022: LD_EXP 55
61026: PPUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: CALL 7910 0 2
61036: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61037: LD_ADDR_VAR 0 8
61041: PUSH
61042: LD_EXP 57
61046: PUSH
61047: LD_EXP 56
61051: PUSH
61052: LD_VAR 0 6
61056: ARRAY
61057: MINUS
61058: ST_TO_ADDR
// if not minesFreeAmount then
61059: LD_VAR 0 8
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61343
// tmp := [ ] ;
61068: LD_ADDR_VAR 0 7
61072: PUSH
61073: EMPTY
61074: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61075: LD_ADDR_VAR 0 5
61079: PUSH
61080: DOUBLE
61081: LD_INT 1
61083: DEC
61084: ST_TO_ADDR
61085: LD_VAR 0 8
61089: PUSH
61090: FOR_TO
61091: IFFALSE 61290
// begin _d := rand ( 0 , 5 ) ;
61093: LD_ADDR_VAR 0 11
61097: PUSH
61098: LD_INT 0
61100: PPUSH
61101: LD_INT 5
61103: PPUSH
61104: CALL_OW 12
61108: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61109: LD_ADDR_VAR 0 12
61113: PUSH
61114: LD_INT 2
61116: PPUSH
61117: LD_INT 6
61119: PPUSH
61120: CALL_OW 12
61124: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61125: LD_ADDR_VAR 0 9
61129: PUSH
61130: LD_VAR 0 2
61134: PPUSH
61135: LD_VAR 0 11
61139: PPUSH
61140: LD_VAR 0 12
61144: PPUSH
61145: CALL_OW 272
61149: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61150: LD_ADDR_VAR 0 10
61154: PUSH
61155: LD_VAR 0 3
61159: PPUSH
61160: LD_VAR 0 11
61164: PPUSH
61165: LD_VAR 0 12
61169: PPUSH
61170: CALL_OW 273
61174: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61175: LD_VAR 0 9
61179: PPUSH
61180: LD_VAR 0 10
61184: PPUSH
61185: CALL_OW 488
61189: IFFALSE 61213
61191: PUSH
61192: LD_VAR 0 9
61196: PUSH
61197: LD_VAR 0 10
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_VAR 0 7
61210: IN
61211: NOT
61212: AND
61213: IFFALSE 61232
61215: PUSH
61216: LD_VAR 0 9
61220: PPUSH
61221: LD_VAR 0 10
61225: PPUSH
61226: CALL_OW 458
61230: NOT
61231: AND
61232: IFFALSE 61274
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61234: LD_ADDR_VAR 0 7
61238: PUSH
61239: LD_VAR 0 7
61243: PPUSH
61244: LD_VAR 0 7
61248: PUSH
61249: LD_INT 1
61251: PLUS
61252: PPUSH
61253: LD_VAR 0 9
61257: PUSH
61258: LD_VAR 0 10
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PPUSH
61267: CALL_OW 1
61271: ST_TO_ADDR
61272: GO 61288
// i := i - 1 ;
61274: LD_ADDR_VAR 0 5
61278: PUSH
61279: LD_VAR 0 5
61283: PUSH
61284: LD_INT 1
61286: MINUS
61287: ST_TO_ADDR
// end ;
61288: GO 61090
61290: POP
61291: POP
// for i in tmp do
61292: LD_ADDR_VAR 0 5
61296: PUSH
61297: LD_VAR 0 7
61301: PUSH
61302: FOR_IN
61303: IFFALSE 61341
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61305: LD_VAR 0 1
61309: PPUSH
61310: LD_VAR 0 5
61314: PUSH
61315: LD_INT 1
61317: ARRAY
61318: PPUSH
61319: LD_VAR 0 5
61323: PUSH
61324: LD_INT 2
61326: ARRAY
61327: PPUSH
61328: CALL 60334 0 3
61332: NOT
61333: IFFALSE 61339
// exit ;
61335: POP
61336: POP
61337: GO 61343
61339: GO 61302
61341: POP
61342: POP
// end ;
61343: LD_VAR 0 4
61347: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61348: LD_INT 0
61350: PPUSH
61351: PPUSH
61352: PPUSH
61353: PPUSH
61354: PPUSH
61355: PPUSH
61356: PPUSH
61357: PPUSH
61358: PPUSH
// if GetClass ( unit ) <> class_sniper then
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 257
61368: PUSH
61369: LD_INT 5
61371: NONEQUAL
61372: IFFALSE 61376
// exit ;
61374: GO 61846
// dist := 8 ;
61376: LD_ADDR_VAR 0 5
61380: PUSH
61381: LD_INT 8
61383: ST_TO_ADDR
// viewRange := 12 ;
61384: LD_ADDR_VAR 0 8
61388: PUSH
61389: LD_INT 12
61391: ST_TO_ADDR
// side := GetSide ( unit ) ;
61392: LD_ADDR_VAR 0 6
61396: PUSH
61397: LD_VAR 0 1
61401: PPUSH
61402: CALL_OW 255
61406: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61407: LD_INT 61
61409: PPUSH
61410: LD_VAR 0 6
61414: PPUSH
61415: CALL_OW 321
61419: PUSH
61420: LD_INT 2
61422: EQUAL
61423: IFFALSE 61433
// viewRange := 16 ;
61425: LD_ADDR_VAR 0 8
61429: PUSH
61430: LD_INT 16
61432: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61433: LD_VAR 0 1
61437: PPUSH
61438: LD_VAR 0 2
61442: PPUSH
61443: LD_VAR 0 3
61447: PPUSH
61448: CALL_OW 297
61452: PUSH
61453: LD_VAR 0 5
61457: GREATER
61458: IFFALSE 61537
// begin ComMoveXY ( unit , x , y ) ;
61460: LD_VAR 0 1
61464: PPUSH
61465: LD_VAR 0 2
61469: PPUSH
61470: LD_VAR 0 3
61474: PPUSH
61475: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61479: LD_INT 35
61481: PPUSH
61482: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61486: LD_VAR 0 1
61490: PPUSH
61491: LD_VAR 0 2
61495: PPUSH
61496: LD_VAR 0 3
61500: PPUSH
61501: CALL 39956 0 3
61505: NOT
61506: IFFALSE 61510
// exit ;
61508: GO 61846
// until GetDistUnitXY ( unit , x , y ) < dist ;
61510: LD_VAR 0 1
61514: PPUSH
61515: LD_VAR 0 2
61519: PPUSH
61520: LD_VAR 0 3
61524: PPUSH
61525: CALL_OW 297
61529: PUSH
61530: LD_VAR 0 5
61534: LESS
61535: IFFALSE 61479
// end ; ComTurnXY ( unit , x , y ) ;
61537: LD_VAR 0 1
61541: PPUSH
61542: LD_VAR 0 2
61546: PPUSH
61547: LD_VAR 0 3
61551: PPUSH
61552: CALL_OW 118
// repeat if Multiplayer then
61556: LD_OWVAR 4
61560: IFFALSE 61571
// wait ( 35 ) else
61562: LD_INT 35
61564: PPUSH
61565: CALL_OW 67
61569: GO 61578
// wait ( 5 ) ;
61571: LD_INT 5
61573: PPUSH
61574: CALL_OW 67
// _d := GetDir ( unit ) ;
61578: LD_ADDR_VAR 0 11
61582: PUSH
61583: LD_VAR 0 1
61587: PPUSH
61588: CALL_OW 254
61592: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61593: LD_ADDR_VAR 0 7
61597: PUSH
61598: LD_VAR 0 1
61602: PPUSH
61603: CALL_OW 250
61607: PPUSH
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 251
61617: PPUSH
61618: LD_VAR 0 2
61622: PPUSH
61623: LD_VAR 0 3
61627: PPUSH
61628: CALL 42592 0 4
61632: ST_TO_ADDR
// until dir = _d ;
61633: LD_VAR 0 7
61637: PUSH
61638: LD_VAR 0 11
61642: EQUAL
61643: IFFALSE 61556
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61645: LD_ADDR_VAR 0 9
61649: PUSH
61650: LD_VAR 0 1
61654: PPUSH
61655: CALL_OW 250
61659: PPUSH
61660: LD_VAR 0 7
61664: PPUSH
61665: LD_VAR 0 5
61669: PPUSH
61670: CALL_OW 272
61674: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61675: LD_ADDR_VAR 0 10
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: CALL_OW 251
61689: PPUSH
61690: LD_VAR 0 7
61694: PPUSH
61695: LD_VAR 0 5
61699: PPUSH
61700: CALL_OW 273
61704: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61705: LD_VAR 0 9
61709: PPUSH
61710: LD_VAR 0 10
61714: PPUSH
61715: CALL_OW 488
61719: NOT
61720: IFFALSE 61724
// exit ;
61722: GO 61846
// ComAnimCustom ( unit , 1 ) ;
61724: LD_VAR 0 1
61728: PPUSH
61729: LD_INT 1
61731: PPUSH
61732: CALL_OW 592
// p := 0 ;
61736: LD_ADDR_VAR 0 12
61740: PUSH
61741: LD_INT 0
61743: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61744: LD_VAR 0 9
61748: PPUSH
61749: LD_VAR 0 10
61753: PPUSH
61754: LD_VAR 0 6
61758: PPUSH
61759: LD_VAR 0 8
61763: PPUSH
61764: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61768: LD_INT 35
61770: PPUSH
61771: CALL_OW 67
// p := Inc ( p ) ;
61775: LD_ADDR_VAR 0 12
61779: PUSH
61780: LD_VAR 0 12
61784: PPUSH
61785: CALL 42548 0 1
61789: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61790: LD_VAR 0 12
61794: PUSH
61795: LD_INT 3
61797: EQUAL
61798: IFTRUE 61812
61800: PUSH
61801: LD_VAR 0 1
61805: PPUSH
61806: CALL_OW 302
61810: NOT
61811: OR
61812: IFTRUE 61825
61814: PUSH
61815: LD_VAR 0 1
61819: PPUSH
61820: CALL_OW 301
61824: OR
61825: IFFALSE 61768
// RemoveSeeing ( _x , _y , side ) ;
61827: LD_VAR 0 9
61831: PPUSH
61832: LD_VAR 0 10
61836: PPUSH
61837: LD_VAR 0 6
61841: PPUSH
61842: CALL_OW 331
// end ;
61846: LD_VAR 0 4
61850: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61851: LD_INT 0
61853: PPUSH
61854: PPUSH
61855: PPUSH
61856: PPUSH
61857: PPUSH
61858: PPUSH
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
// if not unit then
61864: LD_VAR 0 1
61868: NOT
61869: IFFALSE 61873
// exit ;
61871: GO 62144
// side := GetSide ( unit ) ;
61873: LD_ADDR_VAR 0 3
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 255
61887: ST_TO_ADDR
// x := GetX ( unit ) ;
61888: LD_ADDR_VAR 0 5
61892: PUSH
61893: LD_VAR 0 1
61897: PPUSH
61898: CALL_OW 250
61902: ST_TO_ADDR
// y := GetY ( unit ) ;
61903: LD_ADDR_VAR 0 6
61907: PUSH
61908: LD_VAR 0 1
61912: PPUSH
61913: CALL_OW 251
61917: ST_TO_ADDR
// r := 8 ;
61918: LD_ADDR_VAR 0 4
61922: PUSH
61923: LD_INT 8
61925: ST_TO_ADDR
// if x - r < 0 then
61926: LD_VAR 0 5
61930: PUSH
61931: LD_VAR 0 4
61935: MINUS
61936: PUSH
61937: LD_INT 0
61939: LESS
61940: IFFALSE 61952
// min_x := 0 else
61942: LD_ADDR_VAR 0 7
61946: PUSH
61947: LD_INT 0
61949: ST_TO_ADDR
61950: GO 61968
// min_x := x - r ;
61952: LD_ADDR_VAR 0 7
61956: PUSH
61957: LD_VAR 0 5
61961: PUSH
61962: LD_VAR 0 4
61966: MINUS
61967: ST_TO_ADDR
// if y - r < 0 then
61968: LD_VAR 0 6
61972: PUSH
61973: LD_VAR 0 4
61977: MINUS
61978: PUSH
61979: LD_INT 0
61981: LESS
61982: IFFALSE 61994
// min_y := 0 else
61984: LD_ADDR_VAR 0 8
61988: PUSH
61989: LD_INT 0
61991: ST_TO_ADDR
61992: GO 62010
// min_y := y - r ;
61994: LD_ADDR_VAR 0 8
61998: PUSH
61999: LD_VAR 0 6
62003: PUSH
62004: LD_VAR 0 4
62008: MINUS
62009: ST_TO_ADDR
// max_x := x + r ;
62010: LD_ADDR_VAR 0 9
62014: PUSH
62015: LD_VAR 0 5
62019: PUSH
62020: LD_VAR 0 4
62024: PLUS
62025: ST_TO_ADDR
// max_y := y + r ;
62026: LD_ADDR_VAR 0 10
62030: PUSH
62031: LD_VAR 0 6
62035: PUSH
62036: LD_VAR 0 4
62040: PLUS
62041: ST_TO_ADDR
// for _x = min_x to max_x do
62042: LD_ADDR_VAR 0 11
62046: PUSH
62047: DOUBLE
62048: LD_VAR 0 7
62052: DEC
62053: ST_TO_ADDR
62054: LD_VAR 0 9
62058: PUSH
62059: FOR_TO
62060: IFFALSE 62142
// for _y = min_y to max_y do
62062: LD_ADDR_VAR 0 12
62066: PUSH
62067: DOUBLE
62068: LD_VAR 0 8
62072: DEC
62073: ST_TO_ADDR
62074: LD_VAR 0 10
62078: PUSH
62079: FOR_TO
62080: IFFALSE 62138
// begin if not ValidHex ( _x , _y ) then
62082: LD_VAR 0 11
62086: PPUSH
62087: LD_VAR 0 12
62091: PPUSH
62092: CALL_OW 488
62096: NOT
62097: IFFALSE 62101
// continue ;
62099: GO 62079
// if MineAtPos ( _x , _y ) then
62101: LD_VAR 0 11
62105: PPUSH
62106: LD_VAR 0 12
62110: PPUSH
62111: CALL_OW 458
62115: IFFALSE 62136
// ViewMineAtPos ( _x , _y , side ) ;
62117: LD_VAR 0 11
62121: PPUSH
62122: LD_VAR 0 12
62126: PPUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 457
// end ;
62136: GO 62079
62138: POP
62139: POP
62140: GO 62059
62142: POP
62143: POP
// end ;
62144: LD_VAR 0 2
62148: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62149: LD_INT 0
62151: PPUSH
62152: PPUSH
62153: PPUSH
62154: PPUSH
62155: PPUSH
62156: PPUSH
// if not units then
62157: LD_VAR 0 1
62161: NOT
62162: IFFALSE 62166
// exit ;
62164: GO 62596
// scaners := [ ] ;
62166: LD_ADDR_VAR 0 6
62170: PUSH
62171: EMPTY
62172: ST_TO_ADDR
// for i in units do
62173: LD_ADDR_VAR 0 3
62177: PUSH
62178: LD_VAR 0 1
62182: PUSH
62183: FOR_IN
62184: IFFALSE 62341
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62186: LD_VAR 0 3
62190: PPUSH
62191: CALL_OW 264
62195: PUSH
62196: LD_INT 11
62198: NONEQUAL
62199: IFTRUE 62213
62201: PUSH
62202: LD_VAR 0 3
62206: PPUSH
62207: CALL_OW 302
62211: NOT
62212: OR
62213: IFTRUE 62230
62215: PUSH
62216: LD_VAR 0 3
62220: PPUSH
62221: CALL_OW 110
62225: PUSH
62226: LD_INT 502
62228: EQUAL
62229: OR
62230: IFFALSE 62234
// continue ;
62232: GO 62183
// ComStop ( i ) ;
62234: LD_VAR 0 3
62238: PPUSH
62239: CALL_OW 141
// x := GetX ( i ) ;
62243: LD_ADDR_VAR 0 4
62247: PUSH
62248: LD_VAR 0 3
62252: PPUSH
62253: CALL_OW 250
62257: ST_TO_ADDR
// y := GetY ( i ) ;
62258: LD_ADDR_VAR 0 5
62262: PUSH
62263: LD_VAR 0 3
62267: PPUSH
62268: CALL_OW 251
62272: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62273: LD_VAR 0 3
62277: PPUSH
62278: CALL_OW 255
62282: PUSH
62283: LD_OWVAR 2
62287: EQUAL
62288: IFFALSE 62307
// PlaySoundXY ( x , y , mineDetector ) ;
62290: LD_VAR 0 4
62294: PPUSH
62295: LD_VAR 0 5
62299: PPUSH
62300: LD_STRING mineDetector
62302: PPUSH
62303: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62307: LD_ADDR_VAR 0 6
62311: PUSH
62312: LD_VAR 0 6
62316: PPUSH
62317: LD_VAR 0 3
62321: PPUSH
62322: CALL 41175 0 2
62326: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62327: LD_VAR 0 3
62331: PPUSH
62332: LD_INT 502
62334: PPUSH
62335: CALL_OW 109
// end ;
62339: GO 62183
62341: POP
62342: POP
// if not scaners then
62343: LD_VAR 0 6
62347: NOT
62348: IFFALSE 62352
// exit ;
62350: GO 62596
// wait ( 3 ) ;
62352: LD_INT 3
62354: PPUSH
62355: CALL_OW 67
// timer := 6 ;
62359: LD_ADDR_VAR 0 7
62363: PUSH
62364: LD_INT 6
62366: ST_TO_ADDR
// repeat for i in scaners do
62367: LD_ADDR_VAR 0 3
62371: PUSH
62372: LD_VAR 0 6
62376: PUSH
62377: FOR_IN
62378: IFFALSE 62494
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62380: LD_VAR 0 3
62384: PPUSH
62385: CALL_OW 302
62389: NOT
62390: IFTRUE 62403
62392: PUSH
62393: LD_VAR 0 3
62397: PPUSH
62398: CALL_OW 314
62402: OR
62403: IFTRUE 62434
62405: PUSH
62406: LD_VAR 0 3
62410: PPUSH
62411: CALL_OW 263
62415: PUSH
62416: LD_INT 1
62418: EQUAL
62419: IFFALSE 62433
62421: PUSH
62422: LD_VAR 0 3
62426: PPUSH
62427: CALL_OW 311
62431: NOT
62432: AND
62433: OR
62434: IFFALSE 62478
// begin SetUnitDisplayNumber ( i , 0 ) ;
62436: LD_VAR 0 3
62440: PPUSH
62441: LD_INT 0
62443: PPUSH
62444: CALL_OW 505
// SetTag ( i , 0 ) ;
62448: LD_VAR 0 3
62452: PPUSH
62453: LD_INT 0
62455: PPUSH
62456: CALL_OW 109
// scaners := scaners diff i ;
62460: LD_ADDR_VAR 0 6
62464: PUSH
62465: LD_VAR 0 6
62469: PUSH
62470: LD_VAR 0 3
62474: DIFF
62475: ST_TO_ADDR
// continue ;
62476: GO 62377
// end ; SetUnitDisplayNumber ( i , timer ) ;
62478: LD_VAR 0 3
62482: PPUSH
62483: LD_VAR 0 7
62487: PPUSH
62488: CALL_OW 505
// end ;
62492: GO 62377
62494: POP
62495: POP
// if not scaners then
62496: LD_VAR 0 6
62500: NOT
62501: IFFALSE 62505
// exit ;
62503: GO 62596
// timer := Dec ( timer ) ;
62505: LD_ADDR_VAR 0 7
62509: PUSH
62510: LD_VAR 0 7
62514: PPUSH
62515: CALL 42570 0 1
62519: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62520: LD_INT 35
62522: PPUSH
62523: CALL_OW 67
// until timer = 0 ;
62527: LD_VAR 0 7
62531: PUSH
62532: LD_INT 0
62534: EQUAL
62535: IFFALSE 62367
// if not scaners then
62537: LD_VAR 0 6
62541: NOT
62542: IFFALSE 62546
// exit ;
62544: GO 62596
// for i in scaners do
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_VAR 0 6
62555: PUSH
62556: FOR_IN
62557: IFFALSE 62594
// begin SetUnitDisplayNumber ( i , 0 ) ;
62559: LD_VAR 0 3
62563: PPUSH
62564: LD_INT 0
62566: PPUSH
62567: CALL_OW 505
// SetTag ( i , 0 ) ;
62571: LD_VAR 0 3
62575: PPUSH
62576: LD_INT 0
62578: PPUSH
62579: CALL_OW 109
// RevealDetectorMine ( i ) ;
62583: LD_VAR 0 3
62587: PPUSH
62588: CALL 61851 0 1
// end ;
62592: GO 62556
62594: POP
62595: POP
// end ;
62596: LD_VAR 0 2
62600: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62601: LD_INT 0
62603: PPUSH
// if p1 = mine_detector_mode then
62604: LD_VAR 0 2
62608: PUSH
62609: LD_INT 103
62611: EQUAL
62612: IFFALSE 62623
// DetectMine ( units ) ;
62614: LD_VAR 0 1
62618: PPUSH
62619: CALL 62149 0 1
// end ; end_of_file
62623: LD_VAR 0 7
62627: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62628: PPOPN 6
62630: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62631: LD_INT 0
62633: PPUSH
// begin if not units then
62634: LD_VAR 0 1
62638: NOT
62639: IFFALSE 62643
// exit ;
62641: GO 62677
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62643: LD_VAR 0 1
62647: PPUSH
62648: LD_VAR 0 2
62652: PPUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: LD_VAR 0 4
62662: PPUSH
62663: LD_VAR 0 5
62667: PPUSH
62668: LD_VAR 0 6
62672: PPUSH
62673: CALL 62601 0 6
// end ;
62677: PPOPN 7
62679: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62680: LD_EXP 1
62684: PUSH
62685: LD_INT 4
62687: EQUAL
62688: IFFALSE 62724
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62690: LD_STRING setGameDifficulty(
62692: PUSH
62693: LD_OWVAR 67
62697: STR
62698: PUSH
62699: LD_STRING )
62701: STR
62702: PPUSH
62703: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62707: LD_STRING displayDifficulty(
62709: PUSH
62710: LD_OWVAR 67
62714: STR
62715: PUSH
62716: LD_STRING )
62718: STR
62719: PPUSH
62720: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62724: CALL 62753 0 0
// end ; end_of_file
62728: PPOPN 1
62730: END
// every 0 0$1 do
62731: GO 62733
62733: DISABLE
// begin enable ;
62734: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62735: LD_STRING updateTimer(
62737: PUSH
62738: LD_OWVAR 1
62742: STR
62743: PUSH
62744: LD_STRING );
62746: STR
62747: PPUSH
62748: CALL_OW 559
// end ;
62752: END
// export function SOS_MapStart ( ) ; begin
62753: LD_INT 0
62755: PPUSH
// UpdateFactoryWaypoints ( ) ;
62756: CALL 63687 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62760: CALL 63939 0 0
// ParseMultiDataToLua ( ) ;
62764: CALL 64086 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62768: LD_STRING setSpecLogoNumber(
62770: PUSH
62771: LD_INT 2
62773: STR
62774: PUSH
62775: LD_STRING ,
62777: STR
62778: PUSH
62779: LD_INT 1
62781: STR
62782: PUSH
62783: LD_STRING )
62785: STR
62786: PPUSH
62787: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62791: LD_STRING setSpecLogoNumber(
62793: PUSH
62794: LD_INT 3
62796: STR
62797: PUSH
62798: LD_STRING ,
62800: STR
62801: PUSH
62802: LD_INT 2
62804: STR
62805: PUSH
62806: LD_STRING )
62808: STR
62809: PPUSH
62810: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62814: LD_STRING setSpecLogoNumber(
62816: PUSH
62817: LD_INT 4
62819: STR
62820: PUSH
62821: LD_STRING ,
62823: STR
62824: PUSH
62825: LD_INT 3
62827: STR
62828: PUSH
62829: LD_STRING )
62831: STR
62832: PPUSH
62833: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62837: LD_STRING setSpecLogoNumber(
62839: PUSH
62840: LD_INT 5
62842: STR
62843: PUSH
62844: LD_STRING ,
62846: STR
62847: PUSH
62848: LD_INT 4
62850: STR
62851: PUSH
62852: LD_STRING )
62854: STR
62855: PPUSH
62856: CALL_OW 559
// end ;
62860: LD_VAR 0 1
62864: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62865: LD_INT 0
62867: PPUSH
62868: PPUSH
62869: PPUSH
62870: PPUSH
62871: PPUSH
62872: PPUSH
62873: PPUSH
62874: PPUSH
62875: PPUSH
// for i := 1 to 8 do
62876: LD_ADDR_VAR 0 2
62880: PUSH
62881: DOUBLE
62882: LD_INT 1
62884: DEC
62885: ST_TO_ADDR
62886: LD_INT 8
62888: PUSH
62889: FOR_TO
62890: IFFALSE 63275
// begin if mpSidePositions [ i ] then
62892: LD_EXP 5
62896: PUSH
62897: LD_VAR 0 2
62901: ARRAY
62902: IFFALSE 63273
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62904: LD_ADDR_VAR 0 7
62908: PUSH
62909: LD_INT 22
62911: PUSH
62912: LD_VAR 0 2
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 21
62923: PUSH
62924: LD_INT 1
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PPUSH
62935: CALL_OW 69
62939: PPUSH
62940: CALL 5209 0 1
62944: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62945: LD_ADDR_VAR 0 9
62949: PUSH
62950: LD_INT 22
62952: PUSH
62953: LD_VAR 0 2
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 30
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 30
62977: PUSH
62978: LD_INT 1
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: LIST
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PPUSH
62994: CALL_OW 69
62998: ST_TO_ADDR
// crates := 0 ;
62999: LD_ADDR_VAR 0 4
63003: PUSH
63004: LD_INT 0
63006: ST_TO_ADDR
// oil := 0 ;
63007: LD_ADDR_VAR 0 5
63011: PUSH
63012: LD_INT 0
63014: ST_TO_ADDR
// sib := 0 ;
63015: LD_ADDR_VAR 0 6
63019: PUSH
63020: LD_INT 0
63022: ST_TO_ADDR
// if bases then
63023: LD_VAR 0 9
63027: IFFALSE 63133
// begin for j in bases do
63029: LD_ADDR_VAR 0 3
63033: PUSH
63034: LD_VAR 0 9
63038: PUSH
63039: FOR_IN
63040: IFFALSE 63131
// begin base := GetBase ( j ) ;
63042: LD_ADDR_VAR 0 8
63046: PUSH
63047: LD_VAR 0 3
63051: PPUSH
63052: CALL_OW 274
63056: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63057: LD_ADDR_VAR 0 4
63061: PUSH
63062: LD_VAR 0 4
63066: PUSH
63067: LD_VAR 0 8
63071: PPUSH
63072: LD_INT 1
63074: PPUSH
63075: CALL_OW 275
63079: PLUS
63080: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63081: LD_ADDR_VAR 0 5
63085: PUSH
63086: LD_VAR 0 5
63090: PUSH
63091: LD_VAR 0 8
63095: PPUSH
63096: LD_INT 2
63098: PPUSH
63099: CALL_OW 275
63103: PLUS
63104: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63105: LD_ADDR_VAR 0 6
63109: PUSH
63110: LD_VAR 0 6
63114: PUSH
63115: LD_VAR 0 8
63119: PPUSH
63120: LD_INT 3
63122: PPUSH
63123: CALL_OW 275
63127: PLUS
63128: ST_TO_ADDR
// end ;
63129: GO 63039
63131: POP
63132: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63133: LD_STRING setSpecText(
63135: PUSH
63136: LD_VAR 0 2
63140: STR
63141: PUSH
63142: LD_STRING ,
63144: STR
63145: PUSH
63146: LD_INT 2
63148: STR
63149: PUSH
63150: LD_STRING ,
63152: STR
63153: PUSH
63154: LD_VAR 0 4
63158: STR
63159: PUSH
63160: LD_STRING )
63162: STR
63163: PPUSH
63164: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63168: LD_STRING setSpecText(
63170: PUSH
63171: LD_VAR 0 2
63175: STR
63176: PUSH
63177: LD_STRING ,
63179: STR
63180: PUSH
63181: LD_INT 3
63183: STR
63184: PUSH
63185: LD_STRING ,
63187: STR
63188: PUSH
63189: LD_VAR 0 5
63193: STR
63194: PUSH
63195: LD_STRING )
63197: STR
63198: PPUSH
63199: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63203: LD_STRING setSpecText(
63205: PUSH
63206: LD_VAR 0 2
63210: STR
63211: PUSH
63212: LD_STRING ,
63214: STR
63215: PUSH
63216: LD_INT 4
63218: STR
63219: PUSH
63220: LD_STRING ,
63222: STR
63223: PUSH
63224: LD_VAR 0 6
63228: STR
63229: PUSH
63230: LD_STRING )
63232: STR
63233: PPUSH
63234: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63238: LD_STRING setSpecText(
63240: PUSH
63241: LD_VAR 0 2
63245: STR
63246: PUSH
63247: LD_STRING ,
63249: STR
63250: PUSH
63251: LD_INT 5
63253: STR
63254: PUSH
63255: LD_STRING ,
63257: STR
63258: PUSH
63259: LD_VAR 0 7
63263: STR
63264: PUSH
63265: LD_STRING )
63267: STR
63268: PPUSH
63269: CALL_OW 559
// end ; end ;
63273: GO 62889
63275: POP
63276: POP
// end ;
63277: LD_VAR 0 1
63281: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63282: LD_INT 2
63284: PUSH
63285: LD_INT 30
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 30
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: LIST
63309: PPUSH
63310: CALL_OW 69
63314: IFFALSE 63324
63316: GO 63318
63318: DISABLE
// begin enable ;
63319: ENABLE
// UpdateSpectatorBar ;
63320: CALL 62865 0 0
// end ;
63324: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63325: LD_INT 0
63327: PPUSH
// end ;
63328: LD_VAR 0 12
63332: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63333: LD_INT 0
63335: PPUSH
63336: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63337: LD_VAR 0 1
63341: NOT
63342: IFTRUE 63361
63344: PUSH
63345: LD_VAR 0 2
63349: PPUSH
63350: LD_VAR 0 3
63354: PPUSH
63355: CALL_OW 488
63359: NOT
63360: OR
63361: IFTRUE 63396
63363: PUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: CALL_OW 266
63373: PUSH
63374: LD_INT 3
63376: NONEQUAL
63377: IFFALSE 63395
63379: PUSH
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 247
63389: PUSH
63390: LD_INT 1
63392: EQUAL
63393: NOT
63394: AND
63395: OR
63396: IFFALSE 63400
// exit ;
63398: GO 63682
// if GetType ( factory ) = unit_human then
63400: LD_VAR 0 1
63404: PPUSH
63405: CALL_OW 247
63409: PUSH
63410: LD_INT 1
63412: EQUAL
63413: IFFALSE 63430
// factory := IsInUnit ( factory ) ;
63415: LD_ADDR_VAR 0 1
63419: PUSH
63420: LD_VAR 0 1
63424: PPUSH
63425: CALL_OW 310
63429: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63430: LD_VAR 0 1
63434: PPUSH
63435: CALL_OW 266
63439: PUSH
63440: LD_INT 3
63442: NONEQUAL
63443: IFFALSE 63447
// exit ;
63445: GO 63682
// for i := 1 to Count ( factoryWaypoints ) do
63447: LD_ADDR_VAR 0 5
63451: PUSH
63452: DOUBLE
63453: LD_INT 1
63455: DEC
63456: ST_TO_ADDR
63457: LD_EXP 58
63461: PPUSH
63462: CALL 5209 0 1
63466: PUSH
63467: FOR_TO
63468: IFFALSE 63630
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63470: LD_VAR 0 2
63474: PPUSH
63475: LD_VAR 0 3
63479: PPUSH
63480: CALL_OW 428
63484: PUSH
63485: LD_EXP 58
63489: PUSH
63490: LD_VAR 0 5
63494: ARRAY
63495: PUSH
63496: LD_INT 2
63498: ARRAY
63499: EQUAL
63500: IFFALSE 63532
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63502: LD_ADDR_EXP 58
63506: PUSH
63507: LD_EXP 58
63511: PPUSH
63512: LD_VAR 0 5
63516: PPUSH
63517: CALL_OW 3
63521: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63522: CALL 63687 0 0
// exit ;
63526: POP
63527: POP
63528: GO 63682
// end else
63530: GO 63628
// if factory = factoryWaypoints [ i ] [ 2 ] then
63532: LD_VAR 0 1
63536: PUSH
63537: LD_EXP 58
63541: PUSH
63542: LD_VAR 0 5
63546: ARRAY
63547: PUSH
63548: LD_INT 2
63550: ARRAY
63551: EQUAL
63552: IFFALSE 63628
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63554: LD_ADDR_EXP 58
63558: PUSH
63559: LD_EXP 58
63563: PPUSH
63564: LD_VAR 0 5
63568: PPUSH
63569: CALL_OW 3
63573: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63574: LD_ADDR_EXP 58
63578: PUSH
63579: LD_EXP 58
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 255
63593: PUSH
63594: LD_VAR 0 1
63598: PUSH
63599: LD_VAR 0 2
63603: PUSH
63604: LD_VAR 0 3
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: PPUSH
63615: CALL 41175 0 2
63619: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63620: CALL 63687 0 0
// exit ;
63624: POP
63625: POP
63626: GO 63682
// end ; end ;
63628: GO 63467
63630: POP
63631: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63632: LD_ADDR_EXP 58
63636: PUSH
63637: LD_EXP 58
63641: PPUSH
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 255
63651: PUSH
63652: LD_VAR 0 1
63656: PUSH
63657: LD_VAR 0 2
63661: PUSH
63662: LD_VAR 0 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: PPUSH
63673: CALL 41175 0 2
63677: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63678: CALL 63687 0 0
// end ;
63682: LD_VAR 0 4
63686: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63687: LD_INT 0
63689: PPUSH
63690: PPUSH
63691: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63692: LD_STRING resetFactoryWaypoint();
63694: PPUSH
63695: CALL_OW 559
// if factoryWaypoints then
63699: LD_EXP 58
63703: IFFALSE 63824
// begin list := factoryWaypoints ;
63705: LD_ADDR_VAR 0 3
63709: PUSH
63710: LD_EXP 58
63714: ST_TO_ADDR
// for i := 1 to list do
63715: LD_ADDR_VAR 0 2
63719: PUSH
63720: DOUBLE
63721: LD_INT 1
63723: DEC
63724: ST_TO_ADDR
63725: LD_VAR 0 3
63729: PUSH
63730: FOR_TO
63731: IFFALSE 63822
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63733: LD_STRING setFactoryWaypointXY(
63735: PUSH
63736: LD_VAR 0 3
63740: PUSH
63741: LD_VAR 0 2
63745: ARRAY
63746: PUSH
63747: LD_INT 1
63749: ARRAY
63750: STR
63751: PUSH
63752: LD_STRING ,
63754: STR
63755: PUSH
63756: LD_VAR 0 3
63760: PUSH
63761: LD_VAR 0 2
63765: ARRAY
63766: PUSH
63767: LD_INT 2
63769: ARRAY
63770: STR
63771: PUSH
63772: LD_STRING ,
63774: STR
63775: PUSH
63776: LD_VAR 0 3
63780: PUSH
63781: LD_VAR 0 2
63785: ARRAY
63786: PUSH
63787: LD_INT 3
63789: ARRAY
63790: STR
63791: PUSH
63792: LD_STRING ,
63794: STR
63795: PUSH
63796: LD_VAR 0 3
63800: PUSH
63801: LD_VAR 0 2
63805: ARRAY
63806: PUSH
63807: LD_INT 4
63809: ARRAY
63810: STR
63811: PUSH
63812: LD_STRING )
63814: STR
63815: PPUSH
63816: CALL_OW 559
63820: GO 63730
63822: POP
63823: POP
// end ; end ;
63824: LD_VAR 0 1
63828: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63829: LD_INT 0
63831: PPUSH
// if HexInfo ( x , y ) = warehouse then
63832: LD_VAR 0 2
63836: PPUSH
63837: LD_VAR 0 3
63841: PPUSH
63842: CALL_OW 428
63846: PUSH
63847: LD_VAR 0 1
63851: EQUAL
63852: IFFALSE 63879
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63854: LD_ADDR_EXP 60
63858: PUSH
63859: LD_EXP 60
63863: PPUSH
63864: LD_VAR 0 1
63868: PPUSH
63869: LD_INT 0
63871: PPUSH
63872: CALL_OW 1
63876: ST_TO_ADDR
63877: GO 63930
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63879: LD_ADDR_EXP 60
63883: PUSH
63884: LD_EXP 60
63888: PPUSH
63889: LD_VAR 0 1
63893: PPUSH
63894: LD_VAR 0 1
63898: PPUSH
63899: CALL_OW 255
63903: PUSH
63904: LD_VAR 0 1
63908: PUSH
63909: LD_VAR 0 2
63913: PUSH
63914: LD_VAR 0 3
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: PPUSH
63925: CALL_OW 1
63929: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63930: CALL 63939 0 0
// end ;
63934: LD_VAR 0 4
63938: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63939: LD_INT 0
63941: PPUSH
63942: PPUSH
63943: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63944: LD_STRING resetWarehouseGatheringPoints();
63946: PPUSH
63947: CALL_OW 559
// if warehouseGatheringPoints then
63951: LD_EXP 60
63955: IFFALSE 64081
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63957: LD_ADDR_VAR 0 3
63961: PUSH
63962: LD_EXP 60
63966: PPUSH
63967: CALL 45109 0 1
63971: ST_TO_ADDR
// for i := 1 to list do
63972: LD_ADDR_VAR 0 2
63976: PUSH
63977: DOUBLE
63978: LD_INT 1
63980: DEC
63981: ST_TO_ADDR
63982: LD_VAR 0 3
63986: PUSH
63987: FOR_TO
63988: IFFALSE 64079
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63990: LD_STRING setWarehouseGatheringPointXY(
63992: PUSH
63993: LD_VAR 0 3
63997: PUSH
63998: LD_VAR 0 2
64002: ARRAY
64003: PUSH
64004: LD_INT 1
64006: ARRAY
64007: STR
64008: PUSH
64009: LD_STRING ,
64011: STR
64012: PUSH
64013: LD_VAR 0 3
64017: PUSH
64018: LD_VAR 0 2
64022: ARRAY
64023: PUSH
64024: LD_INT 2
64026: ARRAY
64027: STR
64028: PUSH
64029: LD_STRING ,
64031: STR
64032: PUSH
64033: LD_VAR 0 3
64037: PUSH
64038: LD_VAR 0 2
64042: ARRAY
64043: PUSH
64044: LD_INT 3
64046: ARRAY
64047: STR
64048: PUSH
64049: LD_STRING ,
64051: STR
64052: PUSH
64053: LD_VAR 0 3
64057: PUSH
64058: LD_VAR 0 2
64062: ARRAY
64063: PUSH
64064: LD_INT 4
64066: ARRAY
64067: STR
64068: PUSH
64069: LD_STRING )
64071: STR
64072: PPUSH
64073: CALL_OW 559
64077: GO 63987
64079: POP
64080: POP
// end ; end ;
64081: LD_VAR 0 1
64085: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64086: LD_INT 0
64088: PPUSH
64089: PPUSH
// if not mpSidePositions then
64090: LD_EXP 5
64094: NOT
64095: IFFALSE 64099
// exit ;
64097: GO 64170
// result :=  ;
64099: LD_ADDR_VAR 0 1
64103: PUSH
64104: LD_STRING 
64106: ST_TO_ADDR
// for i := 1 to 8 do
64107: LD_ADDR_VAR 0 2
64111: PUSH
64112: DOUBLE
64113: LD_INT 1
64115: DEC
64116: ST_TO_ADDR
64117: LD_INT 8
64119: PUSH
64120: FOR_TO
64121: IFFALSE 64151
// begin result := result & mpSidePositions [ i ] & ; ;
64123: LD_ADDR_VAR 0 1
64127: PUSH
64128: LD_VAR 0 1
64132: PUSH
64133: LD_EXP 5
64137: PUSH
64138: LD_VAR 0 2
64142: ARRAY
64143: STR
64144: PUSH
64145: LD_STRING ;
64147: STR
64148: ST_TO_ADDR
// end ;
64149: GO 64120
64151: POP
64152: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64153: LD_STRING setMultiplayerRealPosition("
64155: PUSH
64156: LD_VAR 0 1
64160: STR
64161: PUSH
64162: LD_STRING ");
64164: STR
64165: PPUSH
64166: CALL_OW 559
// end ;
64170: LD_VAR 0 1
64174: RET
