// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45701 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46016 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 20
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 22
 897: PUSH
 898: LD_INT 23
 900: PUSH
 901: LD_INT 18
 903: PUSH
 904: LD_INT 19
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingArea ;
1057: LD_ADDR_EXP 31
1061: PUSH
1062: LD_INT 24
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 32
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 34
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 31
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 32
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 33
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 30
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 1 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 26
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45156 0 2
1411: PUSH
1412: LD_INT 27
1414: PPUSH
1415: LD_INT 2
1417: PPUSH
1418: CALL 45156 0 2
1422: PUSH
1423: LD_INT 28
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL 45156 0 2
1433: PUSH
1434: LD_INT 29
1436: PPUSH
1437: LD_INT 4
1439: PPUSH
1440: CALL 45156 0 2
1444: PUSH
1445: LD_INT 30
1447: PPUSH
1448: LD_INT 1
1450: PPUSH
1451: CALL 45156 0 2
1455: PUSH
1456: LD_INT 31
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL 45156 0 2
1466: PUSH
1467: LD_INT 32
1469: PPUSH
1470: LD_INT 4
1472: PPUSH
1473: CALL 45156 0 2
1477: PUSH
1478: LD_INT 33
1480: PPUSH
1481: LD_INT 5
1483: PPUSH
1484: CALL 45156 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5028 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 34
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 44989 0 2
1667: PUSH
1668: LD_INT 35
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 44989 0 2
1680: PUSH
1681: LD_INT 36
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 44989 0 2
1693: PUSH
1694: LD_INT 37
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 44989 0 2
1706: PUSH
1707: LD_INT 38
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 44989 0 2
1719: PUSH
1720: LD_INT 39
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 44989 0 2
1732: PUSH
1733: LD_INT 40
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 44989 0 2
1745: PUSH
1746: LD_INT 41
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 44989 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 42
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 44989 0 2
1810: PUSH
1811: LD_INT 43
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 44989 0 2
1823: PUSH
1824: LD_INT 44
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 44989 0 2
1836: PUSH
1837: LD_INT 45
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 44989 0 2
1849: PUSH
1850: LD_INT 46
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 44989 0 2
1862: PUSH
1863: LD_INT 47
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 44989 0 2
1875: PUSH
1876: LD_INT 48
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 44989 0 2
1888: PUSH
1889: LD_INT 49
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 44989 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 50
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45156 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 51
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45156 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 66
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45156 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 52
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 45156 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 53
2017: PPUSH
2018: LD_INT 5
2020: PPUSH
2021: CALL 45156 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 67
2032: PPUSH
2033: LD_INT 5
2035: PPUSH
2036: CALL 45156 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 54
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL 45156 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 55
2067: PPUSH
2068: LD_INT 5
2070: PPUSH
2071: CALL 45156 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 68
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 45156 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 56
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45156 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 57
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45156 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 69
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 45156 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 58
2152: PPUSH
2153: LD_INT 4
2155: PPUSH
2156: CALL 45156 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 59
2167: PPUSH
2168: LD_INT 5
2170: PPUSH
2171: CALL 45156 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 70
2182: PPUSH
2183: LD_INT 4
2185: PPUSH
2186: CALL 45156 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 60
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: CALL 45156 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 61
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL 45156 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 71
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 45156 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 62
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45156 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 63
2267: PPUSH
2268: LD_INT 2
2270: PPUSH
2271: CALL 45156 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 72
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL 45156 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 64
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL 45156 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 65
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL 45156 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 73
2332: PPUSH
2333: LD_INT 2
2335: PPUSH
2336: CALL 45156 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 20
2569: PUSH
2570: LD_INT 21
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 23
2578: PUSH
2579: LD_INT 18
2581: PUSH
2582: LD_INT 19
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 41978 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 69468 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 50310 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 69485 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 50900 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 69526 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 50953 0 3
2923: PPOPN 3
2925: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// if exist_mode then
2930: LD_VAR 0 2
2934: IFFALSE 2959
// unit := CreateCharacter ( prefix & ident ) else
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: STR
2951: PPUSH
2952: CALL_OW 34
2956: ST_TO_ADDR
2957: GO 2974
// unit := NewCharacter ( ident ) ;
2959: LD_ADDR_VAR 0 5
2963: PUSH
2964: LD_VAR 0 1
2968: PPUSH
2969: CALL_OW 25
2973: ST_TO_ADDR
// result := unit ;
2974: LD_ADDR_VAR 0 4
2978: PUSH
2979: LD_VAR 0 5
2983: ST_TO_ADDR
// end ;
2984: LD_VAR 0 4
2988: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2989: LD_INT 0
2991: PPUSH
2992: PPUSH
// if not side or not nation then
2993: LD_VAR 0 1
2997: NOT
2998: PUSH
2999: LD_VAR 0 2
3003: NOT
3004: OR
3005: IFFALSE 3009
// exit ;
3007: GO 3777
// case nation of nation_american :
3009: LD_VAR 0 2
3013: PUSH
3014: LD_INT 1
3016: DOUBLE
3017: EQUAL
3018: IFTRUE 3022
3020: GO 3236
3022: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: LD_INT 35
3030: PUSH
3031: LD_INT 45
3033: PUSH
3034: LD_INT 46
3036: PUSH
3037: LD_INT 47
3039: PUSH
3040: LD_INT 82
3042: PUSH
3043: LD_INT 83
3045: PUSH
3046: LD_INT 84
3048: PUSH
3049: LD_INT 85
3051: PUSH
3052: LD_INT 86
3054: PUSH
3055: LD_INT 1
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: LD_INT 6
3063: PUSH
3064: LD_INT 15
3066: PUSH
3067: LD_INT 16
3069: PUSH
3070: LD_INT 7
3072: PUSH
3073: LD_INT 12
3075: PUSH
3076: LD_INT 13
3078: PUSH
3079: LD_INT 10
3081: PUSH
3082: LD_INT 14
3084: PUSH
3085: LD_INT 20
3087: PUSH
3088: LD_INT 21
3090: PUSH
3091: LD_INT 22
3093: PUSH
3094: LD_INT 25
3096: PUSH
3097: LD_INT 32
3099: PUSH
3100: LD_INT 27
3102: PUSH
3103: LD_INT 36
3105: PUSH
3106: LD_INT 69
3108: PUSH
3109: LD_INT 39
3111: PUSH
3112: LD_INT 34
3114: PUSH
3115: LD_INT 40
3117: PUSH
3118: LD_INT 48
3120: PUSH
3121: LD_INT 49
3123: PUSH
3124: LD_INT 50
3126: PUSH
3127: LD_INT 51
3129: PUSH
3130: LD_INT 52
3132: PUSH
3133: LD_INT 53
3135: PUSH
3136: LD_INT 54
3138: PUSH
3139: LD_INT 55
3141: PUSH
3142: LD_INT 56
3144: PUSH
3145: LD_INT 57
3147: PUSH
3148: LD_INT 58
3150: PUSH
3151: LD_INT 59
3153: PUSH
3154: LD_INT 60
3156: PUSH
3157: LD_INT 61
3159: PUSH
3160: LD_INT 62
3162: PUSH
3163: LD_INT 80
3165: PUSH
3166: LD_INT 82
3168: PUSH
3169: LD_INT 83
3171: PUSH
3172: LD_INT 84
3174: PUSH
3175: LD_INT 85
3177: PUSH
3178: LD_INT 86
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: LIST
3233: ST_TO_ADDR
3234: GO 3701
3236: LD_INT 2
3238: DOUBLE
3239: EQUAL
3240: IFTRUE 3244
3242: GO 3470
3244: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_INT 35
3252: PUSH
3253: LD_INT 45
3255: PUSH
3256: LD_INT 46
3258: PUSH
3259: LD_INT 47
3261: PUSH
3262: LD_INT 82
3264: PUSH
3265: LD_INT 83
3267: PUSH
3268: LD_INT 84
3270: PUSH
3271: LD_INT 85
3273: PUSH
3274: LD_INT 87
3276: PUSH
3277: LD_INT 70
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 11
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: LD_INT 15
3300: PUSH
3301: LD_INT 18
3303: PUSH
3304: LD_INT 7
3306: PUSH
3307: LD_INT 17
3309: PUSH
3310: LD_INT 8
3312: PUSH
3313: LD_INT 20
3315: PUSH
3316: LD_INT 21
3318: PUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 72
3324: PUSH
3325: LD_INT 26
3327: PUSH
3328: LD_INT 69
3330: PUSH
3331: LD_INT 39
3333: PUSH
3334: LD_INT 40
3336: PUSH
3337: LD_INT 41
3339: PUSH
3340: LD_INT 42
3342: PUSH
3343: LD_INT 43
3345: PUSH
3346: LD_INT 48
3348: PUSH
3349: LD_INT 49
3351: PUSH
3352: LD_INT 50
3354: PUSH
3355: LD_INT 51
3357: PUSH
3358: LD_INT 52
3360: PUSH
3361: LD_INT 53
3363: PUSH
3364: LD_INT 54
3366: PUSH
3367: LD_INT 55
3369: PUSH
3370: LD_INT 56
3372: PUSH
3373: LD_INT 60
3375: PUSH
3376: LD_INT 61
3378: PUSH
3379: LD_INT 62
3381: PUSH
3382: LD_INT 66
3384: PUSH
3385: LD_INT 67
3387: PUSH
3388: LD_INT 68
3390: PUSH
3391: LD_INT 81
3393: PUSH
3394: LD_INT 82
3396: PUSH
3397: LD_INT 83
3399: PUSH
3400: LD_INT 84
3402: PUSH
3403: LD_INT 85
3405: PUSH
3406: LD_INT 87
3408: PUSH
3409: LD_INT 88
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: LIST
3467: ST_TO_ADDR
3468: GO 3701
3470: LD_INT 3
3472: DOUBLE
3473: EQUAL
3474: IFTRUE 3478
3476: GO 3700
3478: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3479: LD_ADDR_VAR 0 4
3483: PUSH
3484: LD_INT 46
3486: PUSH
3487: LD_INT 47
3489: PUSH
3490: LD_INT 1
3492: PUSH
3493: LD_INT 2
3495: PUSH
3496: LD_INT 82
3498: PUSH
3499: LD_INT 83
3501: PUSH
3502: LD_INT 84
3504: PUSH
3505: LD_INT 85
3507: PUSH
3508: LD_INT 86
3510: PUSH
3511: LD_INT 11
3513: PUSH
3514: LD_INT 9
3516: PUSH
3517: LD_INT 20
3519: PUSH
3520: LD_INT 19
3522: PUSH
3523: LD_INT 21
3525: PUSH
3526: LD_INT 24
3528: PUSH
3529: LD_INT 22
3531: PUSH
3532: LD_INT 25
3534: PUSH
3535: LD_INT 28
3537: PUSH
3538: LD_INT 29
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 31
3546: PUSH
3547: LD_INT 37
3549: PUSH
3550: LD_INT 38
3552: PUSH
3553: LD_INT 32
3555: PUSH
3556: LD_INT 27
3558: PUSH
3559: LD_INT 33
3561: PUSH
3562: LD_INT 69
3564: PUSH
3565: LD_INT 39
3567: PUSH
3568: LD_INT 34
3570: PUSH
3571: LD_INT 40
3573: PUSH
3574: LD_INT 71
3576: PUSH
3577: LD_INT 23
3579: PUSH
3580: LD_INT 44
3582: PUSH
3583: LD_INT 48
3585: PUSH
3586: LD_INT 49
3588: PUSH
3589: LD_INT 50
3591: PUSH
3592: LD_INT 51
3594: PUSH
3595: LD_INT 52
3597: PUSH
3598: LD_INT 53
3600: PUSH
3601: LD_INT 54
3603: PUSH
3604: LD_INT 55
3606: PUSH
3607: LD_INT 56
3609: PUSH
3610: LD_INT 57
3612: PUSH
3613: LD_INT 58
3615: PUSH
3616: LD_INT 59
3618: PUSH
3619: LD_INT 63
3621: PUSH
3622: LD_INT 64
3624: PUSH
3625: LD_INT 65
3627: PUSH
3628: LD_INT 82
3630: PUSH
3631: LD_INT 83
3633: PUSH
3634: LD_INT 84
3636: PUSH
3637: LD_INT 85
3639: PUSH
3640: LD_INT 86
3642: PUSH
3643: EMPTY
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: ST_TO_ADDR
3698: GO 3701
3700: POP
// if state > - 1 and state < 3 then
3701: LD_VAR 0 3
3705: PUSH
3706: LD_INT 1
3708: NEG
3709: GREATER
3710: PUSH
3711: LD_VAR 0 3
3715: PUSH
3716: LD_INT 3
3718: LESS
3719: AND
3720: IFFALSE 3777
// for i in result do
3722: LD_ADDR_VAR 0 5
3726: PUSH
3727: LD_VAR 0 4
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3775
// if GetTech ( i , side ) <> state then
3735: LD_VAR 0 5
3739: PPUSH
3740: LD_VAR 0 1
3744: PPUSH
3745: CALL_OW 321
3749: PUSH
3750: LD_VAR 0 3
3754: NONEQUAL
3755: IFFALSE 3773
// result := result diff i ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_VAR 0 4
3766: PUSH
3767: LD_VAR 0 5
3771: DIFF
3772: ST_TO_ADDR
3773: GO 3732
3775: POP
3776: POP
// end ;
3777: LD_VAR 0 4
3781: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// result := true ;
3787: LD_ADDR_VAR 0 3
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3795: LD_ADDR_VAR 0 5
3799: PUSH
3800: LD_VAR 0 2
3804: PPUSH
3805: CALL_OW 480
3809: ST_TO_ADDR
// if not tmp then
3810: LD_VAR 0 5
3814: NOT
3815: IFFALSE 3819
// exit ;
3817: GO 3868
// for i in tmp do
3819: LD_ADDR_VAR 0 4
3823: PUSH
3824: LD_VAR 0 5
3828: PUSH
3829: FOR_IN
3830: IFFALSE 3866
// if GetTech ( i , side ) <> state_researched then
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_VAR 0 1
3841: PPUSH
3842: CALL_OW 321
3846: PUSH
3847: LD_INT 2
3849: NONEQUAL
3850: IFFALSE 3864
// begin result := false ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_INT 0
3859: ST_TO_ADDR
// exit ;
3860: POP
3861: POP
3862: GO 3868
// end ;
3864: GO 3829
3866: POP
3867: POP
// end ;
3868: LD_VAR 0 3
3872: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3873: LD_INT 0
3875: PPUSH
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
3887: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3888: LD_VAR 0 1
3892: NOT
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 9
3906: NONEQUAL
3907: OR
3908: IFFALSE 3912
// exit ;
3910: GO 4485
// side := GetSide ( unit ) ;
3912: LD_ADDR_VAR 0 9
3916: PUSH
3917: LD_VAR 0 1
3921: PPUSH
3922: CALL_OW 255
3926: ST_TO_ADDR
// tech_space := tech_spacanom ;
3927: LD_ADDR_VAR 0 12
3931: PUSH
3932: LD_INT 29
3934: ST_TO_ADDR
// tech_time := tech_taurad ;
3935: LD_ADDR_VAR 0 13
3939: PUSH
3940: LD_INT 28
3942: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3943: LD_ADDR_VAR 0 11
3947: PUSH
3948: LD_VAR 0 1
3952: PPUSH
3953: CALL_OW 310
3957: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3958: LD_VAR 0 11
3962: PPUSH
3963: CALL_OW 247
3967: PUSH
3968: LD_INT 2
3970: EQUAL
3971: IFFALSE 3975
// exit ;
3973: GO 4485
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3975: LD_ADDR_VAR 0 8
3979: PUSH
3980: LD_INT 81
3982: PUSH
3983: LD_VAR 0 9
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 3
3994: PUSH
3995: LD_INT 21
3997: PUSH
3998: LD_INT 3
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: ST_TO_ADDR
// if not tmp then
4018: LD_VAR 0 8
4022: NOT
4023: IFFALSE 4027
// exit ;
4025: GO 4485
// if in_unit then
4027: LD_VAR 0 11
4031: IFFALSE 4055
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4033: LD_ADDR_VAR 0 10
4037: PUSH
4038: LD_VAR 0 8
4042: PPUSH
4043: LD_VAR 0 11
4047: PPUSH
4048: CALL_OW 74
4052: ST_TO_ADDR
4053: GO 4075
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4055: LD_ADDR_VAR 0 10
4059: PUSH
4060: LD_VAR 0 8
4064: PPUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: CALL_OW 74
4074: ST_TO_ADDR
// if not enemy then
4075: LD_VAR 0 10
4079: NOT
4080: IFFALSE 4084
// exit ;
4082: GO 4485
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4084: LD_VAR 0 11
4088: PUSH
4089: LD_VAR 0 11
4093: PPUSH
4094: LD_VAR 0 10
4098: PPUSH
4099: CALL_OW 296
4103: PUSH
4104: LD_INT 13
4106: GREATER
4107: AND
4108: PUSH
4109: LD_VAR 0 1
4113: PPUSH
4114: LD_VAR 0 10
4118: PPUSH
4119: CALL_OW 296
4123: PUSH
4124: LD_INT 12
4126: GREATER
4127: OR
4128: IFFALSE 4132
// exit ;
4130: GO 4485
// missile := [ 1 ] ;
4132: LD_ADDR_VAR 0 14
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: EMPTY
4141: LIST
4142: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4143: LD_VAR 0 9
4147: PPUSH
4148: LD_VAR 0 12
4152: PPUSH
4153: CALL_OW 325
4157: IFFALSE 4186
// missile := Replace ( missile , missile + 1 , 2 ) ;
4159: LD_ADDR_VAR 0 14
4163: PUSH
4164: LD_VAR 0 14
4168: PPUSH
4169: LD_VAR 0 14
4173: PUSH
4174: LD_INT 1
4176: PLUS
4177: PPUSH
4178: LD_INT 2
4180: PPUSH
4181: CALL_OW 1
4185: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4186: LD_VAR 0 9
4190: PPUSH
4191: LD_VAR 0 13
4195: PPUSH
4196: CALL_OW 325
4200: PUSH
4201: LD_VAR 0 10
4205: PPUSH
4206: CALL_OW 255
4210: PPUSH
4211: LD_VAR 0 13
4215: PPUSH
4216: CALL_OW 325
4220: NOT
4221: AND
4222: IFFALSE 4251
// missile := Replace ( missile , missile + 1 , 3 ) ;
4224: LD_ADDR_VAR 0 14
4228: PUSH
4229: LD_VAR 0 14
4233: PPUSH
4234: LD_VAR 0 14
4238: PUSH
4239: LD_INT 1
4241: PLUS
4242: PPUSH
4243: LD_INT 3
4245: PPUSH
4246: CALL_OW 1
4250: ST_TO_ADDR
// if missile < 2 then
4251: LD_VAR 0 14
4255: PUSH
4256: LD_INT 2
4258: LESS
4259: IFFALSE 4263
// exit ;
4261: GO 4485
// x := GetX ( enemy ) ;
4263: LD_ADDR_VAR 0 4
4267: PUSH
4268: LD_VAR 0 10
4272: PPUSH
4273: CALL_OW 250
4277: ST_TO_ADDR
// y := GetY ( enemy ) ;
4278: LD_ADDR_VAR 0 5
4282: PUSH
4283: LD_VAR 0 10
4287: PPUSH
4288: CALL_OW 251
4292: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4293: LD_ADDR_VAR 0 6
4297: PUSH
4298: LD_VAR 0 4
4302: PUSH
4303: LD_INT 1
4305: NEG
4306: PPUSH
4307: LD_INT 1
4309: PPUSH
4310: CALL_OW 12
4314: PLUS
4315: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4316: LD_ADDR_VAR 0 7
4320: PUSH
4321: LD_VAR 0 5
4325: PUSH
4326: LD_INT 1
4328: NEG
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 12
4337: PLUS
4338: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4339: LD_VAR 0 6
4343: PPUSH
4344: LD_VAR 0 7
4348: PPUSH
4349: CALL_OW 488
4353: NOT
4354: IFFALSE 4376
// begin _x := x ;
4356: LD_ADDR_VAR 0 6
4360: PUSH
4361: LD_VAR 0 4
4365: ST_TO_ADDR
// _y := y ;
4366: LD_ADDR_VAR 0 7
4370: PUSH
4371: LD_VAR 0 5
4375: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_INT 1
4383: PPUSH
4384: LD_VAR 0 14
4388: PPUSH
4389: CALL_OW 12
4393: ST_TO_ADDR
// case i of 1 :
4394: LD_VAR 0 3
4398: PUSH
4399: LD_INT 1
4401: DOUBLE
4402: EQUAL
4403: IFTRUE 4407
4405: GO 4424
4407: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_VAR 0 10
4417: PPUSH
4418: CALL_OW 115
4422: GO 4485
4424: LD_INT 2
4426: DOUBLE
4427: EQUAL
4428: IFTRUE 4432
4430: GO 4454
4432: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_VAR 0 6
4442: PPUSH
4443: LD_VAR 0 7
4447: PPUSH
4448: CALL_OW 153
4452: GO 4485
4454: LD_INT 3
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4484
4462: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4463: LD_VAR 0 1
4467: PPUSH
4468: LD_VAR 0 6
4472: PPUSH
4473: LD_VAR 0 7
4477: PPUSH
4478: CALL_OW 154
4482: GO 4485
4484: POP
// end ;
4485: LD_VAR 0 2
4489: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4490: LD_INT 0
4492: PPUSH
4493: PPUSH
4494: PPUSH
4495: PPUSH
4496: PPUSH
4497: PPUSH
// if not unit or not building then
4498: LD_VAR 0 1
4502: NOT
4503: PUSH
4504: LD_VAR 0 2
4508: NOT
4509: OR
4510: IFFALSE 4514
// exit ;
4512: GO 4672
// x := GetX ( building ) ;
4514: LD_ADDR_VAR 0 5
4518: PUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 250
4528: ST_TO_ADDR
// y := GetY ( building ) ;
4529: LD_ADDR_VAR 0 6
4533: PUSH
4534: LD_VAR 0 2
4538: PPUSH
4539: CALL_OW 251
4543: ST_TO_ADDR
// for i = 0 to 5 do
4544: LD_ADDR_VAR 0 4
4548: PUSH
4549: DOUBLE
4550: LD_INT 0
4552: DEC
4553: ST_TO_ADDR
4554: LD_INT 5
4556: PUSH
4557: FOR_TO
4558: IFFALSE 4670
// begin _x := ShiftX ( x , i , 3 ) ;
4560: LD_ADDR_VAR 0 7
4564: PUSH
4565: LD_VAR 0 5
4569: PPUSH
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 272
4582: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4583: LD_ADDR_VAR 0 8
4587: PUSH
4588: LD_VAR 0 6
4592: PPUSH
4593: LD_VAR 0 4
4597: PPUSH
4598: LD_INT 3
4600: PPUSH
4601: CALL_OW 273
4605: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4606: LD_VAR 0 7
4610: PPUSH
4611: LD_VAR 0 8
4615: PPUSH
4616: CALL_OW 488
4620: NOT
4621: IFFALSE 4625
// continue ;
4623: GO 4557
// if HexInfo ( _x , _y ) = 0 then
4625: LD_VAR 0 7
4629: PPUSH
4630: LD_VAR 0 8
4634: PPUSH
4635: CALL_OW 428
4639: PUSH
4640: LD_INT 0
4642: EQUAL
4643: IFFALSE 4668
// begin ComMoveXY ( unit , _x , _y ) ;
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_VAR 0 7
4654: PPUSH
4655: LD_VAR 0 8
4659: PPUSH
4660: CALL_OW 111
// exit ;
4664: POP
4665: POP
4666: GO 4672
// end ; end ;
4668: GO 4557
4670: POP
4671: POP
// end ;
4672: LD_VAR 0 3
4676: RET
// export function ScanBase ( side , base_area ) ; begin
4677: LD_INT 0
4679: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4680: LD_ADDR_VAR 0 3
4684: PUSH
4685: LD_VAR 0 2
4689: PPUSH
4690: LD_INT 81
4692: PUSH
4693: LD_VAR 0 1
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: ST_TO_ADDR
// end ;
4707: LD_VAR 0 3
4711: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
4716: PPUSH
4717: PPUSH
// result := false ;
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// side := GetSide ( unit ) ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL_OW 255
4740: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4741: LD_ADDR_VAR 0 4
4745: PUSH
4746: LD_VAR 0 1
4750: PPUSH
4751: CALL_OW 248
4755: ST_TO_ADDR
// case nat of 1 :
4756: LD_VAR 0 4
4760: PUSH
4761: LD_INT 1
4763: DOUBLE
4764: EQUAL
4765: IFTRUE 4769
4767: GO 4780
4769: POP
// tech := tech_lassight ; 2 :
4770: LD_ADDR_VAR 0 5
4774: PUSH
4775: LD_INT 12
4777: ST_TO_ADDR
4778: GO 4819
4780: LD_INT 2
4782: DOUBLE
4783: EQUAL
4784: IFTRUE 4788
4786: GO 4799
4788: POP
// tech := tech_mortar ; 3 :
4789: LD_ADDR_VAR 0 5
4793: PUSH
4794: LD_INT 41
4796: ST_TO_ADDR
4797: GO 4819
4799: LD_INT 3
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 4818
4807: POP
// tech := tech_bazooka ; end ;
4808: LD_ADDR_VAR 0 5
4812: PUSH
4813: LD_INT 44
4815: ST_TO_ADDR
4816: GO 4819
4818: POP
// if Researched ( side , tech ) then
4819: LD_VAR 0 3
4823: PPUSH
4824: LD_VAR 0 5
4828: PPUSH
4829: CALL_OW 325
4833: IFFALSE 4860
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: LD_INT 5
4842: PUSH
4843: LD_INT 8
4845: PUSH
4846: LD_INT 9
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: LD_VAR 0 4
4858: ARRAY
4859: ST_TO_ADDR
// end ;
4860: LD_VAR 0 2
4864: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4865: LD_INT 0
4867: PPUSH
4868: PPUSH
4869: PPUSH
// if not mines then
4870: LD_VAR 0 2
4874: NOT
4875: IFFALSE 4879
// exit ;
4877: GO 5023
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4879: LD_ADDR_VAR 0 5
4883: PUSH
4884: LD_INT 81
4886: PUSH
4887: LD_VAR 0 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: ST_TO_ADDR
// for i in mines do
4922: LD_ADDR_VAR 0 4
4926: PUSH
4927: LD_VAR 0 2
4931: PUSH
4932: FOR_IN
4933: IFFALSE 5021
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4935: LD_VAR 0 4
4939: PUSH
4940: LD_INT 1
4942: ARRAY
4943: PPUSH
4944: LD_VAR 0 4
4948: PUSH
4949: LD_INT 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 458
4957: NOT
4958: IFFALSE 4962
// continue ;
4960: GO 4932
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4962: LD_VAR 0 4
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: LD_VAR 0 4
4975: PUSH
4976: LD_INT 2
4978: ARRAY
4979: PPUSH
4980: CALL_OW 428
4984: PUSH
4985: LD_VAR 0 5
4989: IN
4990: IFFALSE 5019
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4992: LD_VAR 0 4
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_VAR 0 4
5005: PUSH
5006: LD_INT 2
5008: ARRAY
5009: PPUSH
5010: LD_VAR 0 1
5014: PPUSH
5015: CALL_OW 456
// end ;
5019: GO 4932
5021: POP
5022: POP
// end ;
5023: LD_VAR 0 3
5027: RET
// export function Count ( array ) ; begin
5028: LD_INT 0
5030: PPUSH
// result := array + 0 ;
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_VAR 0 1
5040: PUSH
5041: LD_INT 0
5043: PLUS
5044: ST_TO_ADDR
// end ;
5045: LD_VAR 0 2
5049: RET
// export function IsEmpty ( building ) ; begin
5050: LD_INT 0
5052: PPUSH
// if not building then
5053: LD_VAR 0 1
5057: NOT
5058: IFFALSE 5062
// exit ;
5060: GO 5105
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5062: LD_ADDR_VAR 0 2
5066: PUSH
5067: LD_VAR 0 1
5071: PUSH
5072: LD_INT 22
5074: PUSH
5075: LD_VAR 0 1
5079: PPUSH
5080: CALL_OW 255
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 58
5091: PUSH
5092: EMPTY
5093: LIST
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: IN
5104: ST_TO_ADDR
// end ;
5105: LD_VAR 0 2
5109: RET
// export function IsNotFull ( building ) ; var places ; begin
5110: LD_INT 0
5112: PPUSH
5113: PPUSH
// if not building then
5114: LD_VAR 0 1
5118: NOT
5119: IFFALSE 5123
// exit ;
5121: GO 5151
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5123: LD_ADDR_VAR 0 2
5127: PUSH
5128: LD_VAR 0 1
5132: PPUSH
5133: LD_INT 3
5135: PUSH
5136: LD_INT 62
5138: PUSH
5139: EMPTY
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 72
5150: ST_TO_ADDR
// end ;
5151: LD_VAR 0 2
5155: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
5160: PPUSH
5161: PPUSH
// tmp := [ ] ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: EMPTY
5168: ST_TO_ADDR
// list := [ ] ;
5169: LD_ADDR_VAR 0 5
5173: PUSH
5174: EMPTY
5175: ST_TO_ADDR
// for i = 16 to 25 do
5176: LD_ADDR_VAR 0 4
5180: PUSH
5181: DOUBLE
5182: LD_INT 16
5184: DEC
5185: ST_TO_ADDR
5186: LD_INT 25
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5263
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_VAR 0 3
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_VAR 0 1
5209: PPUSH
5210: CALL_OW 255
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 91
5221: PUSH
5222: LD_VAR 0 1
5226: PUSH
5227: LD_INT 6
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 30
5237: PUSH
5238: LD_VAR 0 4
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: PPUSH
5255: CALL_OW 69
5259: ADD
5260: ST_TO_ADDR
5261: GO 5189
5263: POP
5264: POP
// for i = 1 to tmp do
5265: LD_ADDR_VAR 0 4
5269: PUSH
5270: DOUBLE
5271: LD_INT 1
5273: DEC
5274: ST_TO_ADDR
5275: LD_VAR 0 3
5279: PUSH
5280: FOR_TO
5281: IFFALSE 5369
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: LD_VAR 0 5
5292: PUSH
5293: LD_VAR 0 3
5297: PUSH
5298: LD_VAR 0 4
5302: ARRAY
5303: PPUSH
5304: CALL_OW 266
5308: PUSH
5309: LD_VAR 0 3
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PPUSH
5320: CALL_OW 250
5324: PUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PPUSH
5336: CALL_OW 251
5340: PUSH
5341: LD_VAR 0 3
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: PPUSH
5352: CALL_OW 254
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: PUSH
5363: EMPTY
5364: LIST
5365: ADD
5366: ST_TO_ADDR
5367: GO 5280
5369: POP
5370: POP
// result := list ;
5371: LD_ADDR_VAR 0 2
5375: PUSH
5376: LD_VAR 0 5
5380: ST_TO_ADDR
// end ;
5381: LD_VAR 0 2
5385: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5386: LD_INT 0
5388: PPUSH
5389: PPUSH
5390: PPUSH
5391: PPUSH
5392: PPUSH
5393: PPUSH
5394: PPUSH
// if not factory then
5395: LD_VAR 0 1
5399: NOT
5400: IFFALSE 5404
// exit ;
5402: GO 5997
// if control = control_apeman then
5404: LD_VAR 0 4
5408: PUSH
5409: LD_INT 5
5411: EQUAL
5412: IFFALSE 5521
// begin tmp := UnitsInside ( factory ) ;
5414: LD_ADDR_VAR 0 8
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 313
5428: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_INT 25
5436: PUSH
5437: LD_INT 12
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 72
5448: NOT
5449: IFFALSE 5459
// control := control_manual ;
5451: LD_ADDR_VAR 0 4
5455: PUSH
5456: LD_INT 1
5458: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5459: LD_ADDR_VAR 0 8
5463: PUSH
5464: LD_VAR 0 1
5468: PPUSH
5469: CALL 5156 0 1
5473: ST_TO_ADDR
// if tmp then
5474: LD_VAR 0 8
5478: IFFALSE 5521
// begin for i in tmp do
5480: LD_ADDR_VAR 0 7
5484: PUSH
5485: LD_VAR 0 8
5489: PUSH
5490: FOR_IN
5491: IFFALSE 5519
// if i [ 1 ] = b_ext_radio then
5493: LD_VAR 0 7
5497: PUSH
5498: LD_INT 1
5500: ARRAY
5501: PUSH
5502: LD_INT 22
5504: EQUAL
5505: IFFALSE 5517
// begin control := control_remote ;
5507: LD_ADDR_VAR 0 4
5511: PUSH
5512: LD_INT 2
5514: ST_TO_ADDR
// break ;
5515: GO 5519
// end ;
5517: GO 5490
5519: POP
5520: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: LD_VAR 0 3
5535: PPUSH
5536: LD_VAR 0 4
5540: PPUSH
5541: LD_VAR 0 5
5545: PPUSH
5546: CALL_OW 448
5550: IFFALSE 5585
// begin result := [ chassis , engine , control , weapon ] ;
5552: LD_ADDR_VAR 0 6
5556: PUSH
5557: LD_VAR 0 2
5561: PUSH
5562: LD_VAR 0 3
5566: PUSH
5567: LD_VAR 0 4
5571: PUSH
5572: LD_VAR 0 5
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// exit ;
5583: GO 5997
// end ; _chassis := AvailableChassisList ( factory ) ;
5585: LD_ADDR_VAR 0 9
5589: PUSH
5590: LD_VAR 0 1
5594: PPUSH
5595: CALL_OW 475
5599: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5600: LD_ADDR_VAR 0 11
5604: PUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: CALL_OW 476
5614: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5615: LD_ADDR_VAR 0 12
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 477
5629: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5630: LD_ADDR_VAR 0 10
5634: PUSH
5635: LD_VAR 0 1
5639: PPUSH
5640: CALL_OW 478
5644: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5645: LD_VAR 0 9
5649: NOT
5650: PUSH
5651: LD_VAR 0 11
5655: NOT
5656: OR
5657: PUSH
5658: LD_VAR 0 12
5662: NOT
5663: OR
5664: PUSH
5665: LD_VAR 0 10
5669: NOT
5670: OR
5671: IFFALSE 5706
// begin result := [ chassis , engine , control , weapon ] ;
5673: LD_ADDR_VAR 0 6
5677: PUSH
5678: LD_VAR 0 2
5682: PUSH
5683: LD_VAR 0 3
5687: PUSH
5688: LD_VAR 0 4
5692: PUSH
5693: LD_VAR 0 5
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: ST_TO_ADDR
// exit ;
5704: GO 5997
// end ; if not chassis in _chassis then
5706: LD_VAR 0 2
5710: PUSH
5711: LD_VAR 0 9
5715: IN
5716: NOT
5717: IFFALSE 5743
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: LD_VAR 0 9
5728: PUSH
5729: LD_INT 1
5731: PPUSH
5732: LD_VAR 0 9
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5743: LD_VAR 0 2
5747: PPUSH
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL 6002 0 2
5757: NOT
5758: IFFALSE 5817
// repeat engine := _engine [ 1 ] ;
5760: LD_ADDR_VAR 0 3
5764: PUSH
5765: LD_VAR 0 11
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5774: LD_ADDR_VAR 0 11
5778: PUSH
5779: LD_VAR 0 11
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 3
5791: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5792: LD_VAR 0 2
5796: PPUSH
5797: LD_VAR 0 3
5801: PPUSH
5802: CALL 6002 0 2
5806: PUSH
5807: LD_VAR 0 11
5811: PUSH
5812: EMPTY
5813: EQUAL
5814: OR
5815: IFFALSE 5760
// if not control in _control then
5817: LD_VAR 0 4
5821: PUSH
5822: LD_VAR 0 12
5826: IN
5827: NOT
5828: IFFALSE 5854
// control := _control [ rand ( 1 , _control ) ] ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 12
5839: PUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_VAR 0 12
5847: PPUSH
5848: CALL_OW 12
5852: ARRAY
5853: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_VAR 0 5
5863: PPUSH
5864: CALL 6222 0 2
5868: NOT
5869: IFFALSE 5928
// repeat weapon := _weapon [ 1 ] ;
5871: LD_ADDR_VAR 0 5
5875: PUSH
5876: LD_VAR 0 10
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5885: LD_ADDR_VAR 0 10
5889: PUSH
5890: LD_VAR 0 10
5894: PPUSH
5895: LD_INT 1
5897: PPUSH
5898: CALL_OW 3
5902: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 5
5912: PPUSH
5913: CALL 6222 0 2
5917: PUSH
5918: LD_VAR 0 10
5922: PUSH
5923: EMPTY
5924: EQUAL
5925: OR
5926: IFFALSE 5871
// result := [ ] ;
5928: LD_ADDR_VAR 0 6
5932: PUSH
5933: EMPTY
5934: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_VAR 0 2
5944: PPUSH
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: LD_VAR 0 5
5959: PPUSH
5960: CALL_OW 448
5964: IFFALSE 5997
// result := [ chassis , engine , control , weapon ] ;
5966: LD_ADDR_VAR 0 6
5970: PUSH
5971: LD_VAR 0 2
5975: PUSH
5976: LD_VAR 0 3
5980: PUSH
5981: LD_VAR 0 4
5985: PUSH
5986: LD_VAR 0 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: ST_TO_ADDR
// end ;
5997: LD_VAR 0 6
6001: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6002: LD_INT 0
6004: PPUSH
// if not chassis or not engine then
6005: LD_VAR 0 1
6009: NOT
6010: PUSH
6011: LD_VAR 0 2
6015: NOT
6016: OR
6017: IFFALSE 6021
// exit ;
6019: GO 6217
// case engine of engine_solar :
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 2
6028: DOUBLE
6029: EQUAL
6030: IFTRUE 6034
6032: GO 6072
6034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6035: LD_ADDR_VAR 0 3
6039: PUSH
6040: LD_INT 11
6042: PUSH
6043: LD_INT 12
6045: PUSH
6046: LD_INT 13
6048: PUSH
6049: LD_INT 14
6051: PUSH
6052: LD_INT 1
6054: PUSH
6055: LD_INT 2
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: ST_TO_ADDR
6070: GO 6201
6072: LD_INT 1
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6142
6080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6081: LD_ADDR_VAR 0 3
6085: PUSH
6086: LD_INT 11
6088: PUSH
6089: LD_INT 12
6091: PUSH
6092: LD_INT 13
6094: PUSH
6095: LD_INT 14
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: LD_INT 2
6103: PUSH
6104: LD_INT 3
6106: PUSH
6107: LD_INT 4
6109: PUSH
6110: LD_INT 5
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 23
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: ST_TO_ADDR
6140: GO 6201
6142: LD_INT 3
6144: DOUBLE
6145: EQUAL
6146: IFTRUE 6150
6148: GO 6200
6150: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6151: LD_ADDR_VAR 0 3
6155: PUSH
6156: LD_INT 13
6158: PUSH
6159: LD_INT 14
6161: PUSH
6162: LD_INT 2
6164: PUSH
6165: LD_INT 3
6167: PUSH
6168: LD_INT 4
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 22
6179: PUSH
6180: LD_INT 23
6182: PUSH
6183: LD_INT 24
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: ST_TO_ADDR
6198: GO 6201
6200: POP
// result := ( chassis in result ) ;
6201: LD_ADDR_VAR 0 3
6205: PUSH
6206: LD_VAR 0 1
6210: PUSH
6211: LD_VAR 0 3
6215: IN
6216: ST_TO_ADDR
// end ;
6217: LD_VAR 0 3
6221: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6222: LD_INT 0
6224: PPUSH
// if not chassis or not weapon then
6225: LD_VAR 0 1
6229: NOT
6230: PUSH
6231: LD_VAR 0 2
6235: NOT
6236: OR
6237: IFFALSE 6241
// exit ;
6239: GO 7301
// case weapon of us_machine_gun :
6241: LD_VAR 0 2
6245: PUSH
6246: LD_INT 2
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6284
6254: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6255: LD_ADDR_VAR 0 3
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: LD_INT 2
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: LD_INT 4
6271: PUSH
6272: LD_INT 5
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: ST_TO_ADDR
6282: GO 7285
6284: LD_INT 3
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6322
6292: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 3
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: ST_TO_ADDR
6320: GO 7285
6322: LD_INT 11
6324: DOUBLE
6325: EQUAL
6326: IFTRUE 6330
6328: GO 6360
6330: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6331: LD_ADDR_VAR 0 3
6335: PUSH
6336: LD_INT 1
6338: PUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: LD_INT 4
6347: PUSH
6348: LD_INT 5
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: ST_TO_ADDR
6358: GO 7285
6360: LD_INT 4
6362: DOUBLE
6363: EQUAL
6364: IFTRUE 6368
6366: GO 6394
6368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6369: LD_ADDR_VAR 0 3
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 4
6382: PUSH
6383: LD_INT 5
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: ST_TO_ADDR
6392: GO 7285
6394: LD_INT 5
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6428
6402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6403: LD_ADDR_VAR 0 3
6407: PUSH
6408: LD_INT 2
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: LD_INT 4
6416: PUSH
6417: LD_INT 5
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 7285
6428: LD_INT 9
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6462
6436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6437: LD_ADDR_VAR 0 3
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 4
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: ST_TO_ADDR
6460: GO 7285
6462: LD_INT 7
6464: DOUBLE
6465: EQUAL
6466: IFTRUE 6470
6468: GO 6496
6470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6471: LD_ADDR_VAR 0 3
6475: PUSH
6476: LD_INT 2
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: LD_INT 5
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: ST_TO_ADDR
6494: GO 7285
6496: LD_INT 12
6498: DOUBLE
6499: EQUAL
6500: IFTRUE 6504
6502: GO 6530
6504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6505: LD_ADDR_VAR 0 3
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
6528: GO 7285
6530: LD_INT 13
6532: DOUBLE
6533: EQUAL
6534: IFTRUE 6538
6536: GO 6564
6538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6539: LD_ADDR_VAR 0 3
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: LD_INT 4
6552: PUSH
6553: LD_INT 5
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: ST_TO_ADDR
6562: GO 7285
6564: LD_INT 14
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6572
6570: GO 6590
6572: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6573: LD_ADDR_VAR 0 3
6577: PUSH
6578: LD_INT 4
6580: PUSH
6581: LD_INT 5
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: ST_TO_ADDR
6588: GO 7285
6590: LD_INT 6
6592: DOUBLE
6593: EQUAL
6594: IFTRUE 6598
6596: GO 6616
6598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_INT 4
6606: PUSH
6607: LD_INT 5
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: ST_TO_ADDR
6614: GO 7285
6616: LD_INT 10
6618: DOUBLE
6619: EQUAL
6620: IFTRUE 6624
6622: GO 6642
6624: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_INT 4
6632: PUSH
6633: LD_INT 5
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ST_TO_ADDR
6640: GO 7285
6642: LD_INT 22
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6676
6650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6651: LD_ADDR_VAR 0 3
6655: PUSH
6656: LD_INT 11
6658: PUSH
6659: LD_INT 12
6661: PUSH
6662: LD_INT 13
6664: PUSH
6665: LD_INT 14
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: ST_TO_ADDR
6674: GO 7285
6676: LD_INT 23
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6684
6682: GO 6710
6684: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 11
6692: PUSH
6693: LD_INT 12
6695: PUSH
6696: LD_INT 13
6698: PUSH
6699: LD_INT 14
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: ST_TO_ADDR
6708: GO 7285
6710: LD_INT 24
6712: DOUBLE
6713: EQUAL
6714: IFTRUE 6718
6716: GO 6744
6718: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_INT 11
6726: PUSH
6727: LD_INT 12
6729: PUSH
6730: LD_INT 13
6732: PUSH
6733: LD_INT 14
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
6742: GO 7285
6744: LD_INT 30
6746: DOUBLE
6747: EQUAL
6748: IFTRUE 6752
6750: GO 6778
6752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6753: LD_ADDR_VAR 0 3
6757: PUSH
6758: LD_INT 11
6760: PUSH
6761: LD_INT 12
6763: PUSH
6764: LD_INT 13
6766: PUSH
6767: LD_INT 14
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
6776: GO 7285
6778: LD_INT 25
6780: DOUBLE
6781: EQUAL
6782: IFTRUE 6786
6784: GO 6804
6786: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_INT 13
6794: PUSH
6795: LD_INT 14
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 7285
6804: LD_INT 27
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6830
6812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 13
6820: PUSH
6821: LD_INT 14
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 7285
6830: LD_INT 92
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6864
6838: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6839: LD_ADDR_VAR 0 3
6843: PUSH
6844: LD_INT 11
6846: PUSH
6847: LD_INT 12
6849: PUSH
6850: LD_INT 13
6852: PUSH
6853: LD_INT 14
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: ST_TO_ADDR
6862: GO 7285
6864: LD_INT 28
6866: DOUBLE
6867: EQUAL
6868: IFTRUE 6872
6870: GO 6890
6872: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6873: LD_ADDR_VAR 0 3
6877: PUSH
6878: LD_INT 13
6880: PUSH
6881: LD_INT 14
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: ST_TO_ADDR
6888: GO 7285
6890: LD_INT 29
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6916
6898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_INT 13
6906: PUSH
6907: LD_INT 14
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 7285
6916: LD_INT 31
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6942
6924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_INT 13
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: ST_TO_ADDR
6940: GO 7285
6942: LD_INT 26
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6968
6950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_INT 13
6958: PUSH
6959: LD_INT 14
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: ST_TO_ADDR
6966: GO 7285
6968: LD_INT 42
6970: DOUBLE
6971: EQUAL
6972: IFTRUE 6976
6974: GO 7002
6976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 22
6987: PUSH
6988: LD_INT 23
6990: PUSH
6991: LD_INT 24
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7285
7002: LD_INT 43
7004: DOUBLE
7005: EQUAL
7006: IFTRUE 7010
7008: GO 7036
7010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 21
7018: PUSH
7019: LD_INT 22
7021: PUSH
7022: LD_INT 23
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 7285
7036: LD_INT 44
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7070
7044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7045: LD_ADDR_VAR 0 3
7049: PUSH
7050: LD_INT 21
7052: PUSH
7053: LD_INT 22
7055: PUSH
7056: LD_INT 23
7058: PUSH
7059: LD_INT 24
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: ST_TO_ADDR
7068: GO 7285
7070: LD_INT 45
7072: DOUBLE
7073: EQUAL
7074: IFTRUE 7078
7076: GO 7104
7078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7079: LD_ADDR_VAR 0 3
7083: PUSH
7084: LD_INT 21
7086: PUSH
7087: LD_INT 22
7089: PUSH
7090: LD_INT 23
7092: PUSH
7093: LD_INT 24
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
7102: GO 7285
7104: LD_INT 49
7106: DOUBLE
7107: EQUAL
7108: IFTRUE 7112
7110: GO 7138
7112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7113: LD_ADDR_VAR 0 3
7117: PUSH
7118: LD_INT 21
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 23
7126: PUSH
7127: LD_INT 24
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: ST_TO_ADDR
7136: GO 7285
7138: LD_INT 51
7140: DOUBLE
7141: EQUAL
7142: IFTRUE 7146
7144: GO 7172
7146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_INT 21
7154: PUSH
7155: LD_INT 22
7157: PUSH
7158: LD_INT 23
7160: PUSH
7161: LD_INT 24
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: ST_TO_ADDR
7170: GO 7285
7172: LD_INT 52
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7206
7180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7181: LD_ADDR_VAR 0 3
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 24
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
7204: GO 7285
7206: LD_INT 53
7208: DOUBLE
7209: EQUAL
7210: IFTRUE 7214
7212: GO 7232
7214: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7215: LD_ADDR_VAR 0 3
7219: PUSH
7220: LD_INT 23
7222: PUSH
7223: LD_INT 24
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
7230: GO 7285
7232: LD_INT 46
7234: DOUBLE
7235: EQUAL
7236: IFTRUE 7240
7238: GO 7258
7240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7241: LD_ADDR_VAR 0 3
7245: PUSH
7246: LD_INT 23
7248: PUSH
7249: LD_INT 24
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: ST_TO_ADDR
7256: GO 7285
7258: LD_INT 47
7260: DOUBLE
7261: EQUAL
7262: IFTRUE 7266
7264: GO 7284
7266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7267: LD_ADDR_VAR 0 3
7271: PUSH
7272: LD_INT 23
7274: PUSH
7275: LD_INT 24
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: ST_TO_ADDR
7282: GO 7285
7284: POP
// result := ( chassis in result ) ;
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: LD_VAR 0 1
7294: PUSH
7295: LD_VAR 0 3
7299: IN
7300: ST_TO_ADDR
// end ;
7301: LD_VAR 0 3
7305: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
7313: PPUSH
7314: PPUSH
// result := array ;
7315: LD_ADDR_VAR 0 5
7319: PUSH
7320: LD_VAR 0 1
7324: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7325: LD_VAR 0 1
7329: NOT
7330: PUSH
7331: LD_VAR 0 2
7335: NOT
7336: OR
7337: PUSH
7338: LD_VAR 0 3
7342: NOT
7343: OR
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_VAR 0 1
7354: GREATER
7355: OR
7356: PUSH
7357: LD_VAR 0 3
7361: PUSH
7362: LD_VAR 0 1
7366: GREATER
7367: OR
7368: IFFALSE 7372
// exit ;
7370: GO 7668
// if direction then
7372: LD_VAR 0 4
7376: IFFALSE 7440
// begin d := 1 ;
7378: LD_ADDR_VAR 0 9
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// if i_from > i_to then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_VAR 0 3
7395: GREATER
7396: IFFALSE 7422
// length := ( array - i_from ) + i_to else
7398: LD_ADDR_VAR 0 11
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: LD_VAR 0 2
7412: MINUS
7413: PUSH
7414: LD_VAR 0 3
7418: PLUS
7419: ST_TO_ADDR
7420: GO 7438
// length := i_to - i_from ;
7422: LD_ADDR_VAR 0 11
7426: PUSH
7427: LD_VAR 0 3
7431: PUSH
7432: LD_VAR 0 2
7436: MINUS
7437: ST_TO_ADDR
// end else
7438: GO 7501
// begin d := - 1 ;
7440: LD_ADDR_VAR 0 9
7444: PUSH
7445: LD_INT 1
7447: NEG
7448: ST_TO_ADDR
// if i_from > i_to then
7449: LD_VAR 0 2
7453: PUSH
7454: LD_VAR 0 3
7458: GREATER
7459: IFFALSE 7479
// length := i_from - i_to else
7461: LD_ADDR_VAR 0 11
7465: PUSH
7466: LD_VAR 0 2
7470: PUSH
7471: LD_VAR 0 3
7475: MINUS
7476: ST_TO_ADDR
7477: GO 7501
// length := ( array - i_to ) + i_from ;
7479: LD_ADDR_VAR 0 11
7483: PUSH
7484: LD_VAR 0 1
7488: PUSH
7489: LD_VAR 0 3
7493: MINUS
7494: PUSH
7495: LD_VAR 0 2
7499: PLUS
7500: ST_TO_ADDR
// end ; if not length then
7501: LD_VAR 0 11
7505: NOT
7506: IFFALSE 7510
// exit ;
7508: GO 7668
// tmp := array ;
7510: LD_ADDR_VAR 0 10
7514: PUSH
7515: LD_VAR 0 1
7519: ST_TO_ADDR
// for i = 1 to length do
7520: LD_ADDR_VAR 0 6
7524: PUSH
7525: DOUBLE
7526: LD_INT 1
7528: DEC
7529: ST_TO_ADDR
7530: LD_VAR 0 11
7534: PUSH
7535: FOR_TO
7536: IFFALSE 7656
// begin for j = 1 to array do
7538: LD_ADDR_VAR 0 7
7542: PUSH
7543: DOUBLE
7544: LD_INT 1
7546: DEC
7547: ST_TO_ADDR
7548: LD_VAR 0 1
7552: PUSH
7553: FOR_TO
7554: IFFALSE 7642
// begin k := j + d ;
7556: LD_ADDR_VAR 0 8
7560: PUSH
7561: LD_VAR 0 7
7565: PUSH
7566: LD_VAR 0 9
7570: PLUS
7571: ST_TO_ADDR
// if k > array then
7572: LD_VAR 0 8
7576: PUSH
7577: LD_VAR 0 1
7581: GREATER
7582: IFFALSE 7592
// k := 1 ;
7584: LD_ADDR_VAR 0 8
7588: PUSH
7589: LD_INT 1
7591: ST_TO_ADDR
// if not k then
7592: LD_VAR 0 8
7596: NOT
7597: IFFALSE 7609
// k := array ;
7599: LD_ADDR_VAR 0 8
7603: PUSH
7604: LD_VAR 0 1
7608: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7609: LD_ADDR_VAR 0 10
7613: PUSH
7614: LD_VAR 0 10
7618: PPUSH
7619: LD_VAR 0 8
7623: PPUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_VAR 0 7
7633: ARRAY
7634: PPUSH
7635: CALL_OW 1
7639: ST_TO_ADDR
// end ;
7640: GO 7553
7642: POP
7643: POP
// array := tmp ;
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_VAR 0 10
7653: ST_TO_ADDR
// end ;
7654: GO 7535
7656: POP
7657: POP
// result := array ;
7658: LD_ADDR_VAR 0 5
7662: PUSH
7663: LD_VAR 0 1
7667: ST_TO_ADDR
// end ;
7668: LD_VAR 0 5
7672: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7673: LD_INT 0
7675: PPUSH
7676: PPUSH
// result := 0 ;
7677: LD_ADDR_VAR 0 3
7681: PUSH
7682: LD_INT 0
7684: ST_TO_ADDR
// if not array or not value in array then
7685: LD_VAR 0 1
7689: NOT
7690: PUSH
7691: LD_VAR 0 2
7695: PUSH
7696: LD_VAR 0 1
7700: IN
7701: NOT
7702: OR
7703: IFFALSE 7707
// exit ;
7705: GO 7761
// for i = 1 to array do
7707: LD_ADDR_VAR 0 4
7711: PUSH
7712: DOUBLE
7713: LD_INT 1
7715: DEC
7716: ST_TO_ADDR
7717: LD_VAR 0 1
7721: PUSH
7722: FOR_TO
7723: IFFALSE 7759
// if value = array [ i ] then
7725: LD_VAR 0 2
7729: PUSH
7730: LD_VAR 0 1
7734: PUSH
7735: LD_VAR 0 4
7739: ARRAY
7740: EQUAL
7741: IFFALSE 7757
// begin result := i ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: LD_VAR 0 4
7752: ST_TO_ADDR
// exit ;
7753: POP
7754: POP
7755: GO 7761
// end ;
7757: GO 7722
7759: POP
7760: POP
// end ;
7761: LD_VAR 0 3
7765: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7766: LD_INT 0
7768: PPUSH
// vc_chassis := chassis ;
7769: LD_ADDR_OWVAR 37
7773: PUSH
7774: LD_VAR 0 1
7778: ST_TO_ADDR
// vc_engine := engine ;
7779: LD_ADDR_OWVAR 39
7783: PUSH
7784: LD_VAR 0 2
7788: ST_TO_ADDR
// vc_control := control ;
7789: LD_ADDR_OWVAR 38
7793: PUSH
7794: LD_VAR 0 3
7798: ST_TO_ADDR
// vc_weapon := weapon ;
7799: LD_ADDR_OWVAR 40
7803: PUSH
7804: LD_VAR 0 4
7808: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7809: LD_ADDR_OWVAR 41
7813: PUSH
7814: LD_VAR 0 5
7818: ST_TO_ADDR
// end ;
7819: LD_VAR 0 6
7823: RET
// export function WantPlant ( unit ) ; var task ; begin
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
// result := false ;
7828: LD_ADDR_VAR 0 2
7832: PUSH
7833: LD_INT 0
7835: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7836: LD_ADDR_VAR 0 3
7840: PUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 437
7850: ST_TO_ADDR
// if task then
7851: LD_VAR 0 3
7855: IFFALSE 7883
// if task [ 1 ] [ 1 ] = p then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 1
7864: ARRAY
7865: PUSH
7866: LD_INT 1
7868: ARRAY
7869: PUSH
7870: LD_STRING p
7872: EQUAL
7873: IFFALSE 7883
// result := true ;
7875: LD_ADDR_VAR 0 2
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// end ;
7883: LD_VAR 0 2
7887: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7888: LD_INT 0
7890: PPUSH
7891: PPUSH
7892: PPUSH
7893: PPUSH
// if pos < 1 then
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 1
7901: LESS
7902: IFFALSE 7906
// exit ;
7904: GO 8209
// if pos = 1 then
7906: LD_VAR 0 2
7910: PUSH
7911: LD_INT 1
7913: EQUAL
7914: IFFALSE 7947
// result := Replace ( arr , pos [ 1 ] , value ) else
7916: LD_ADDR_VAR 0 4
7920: PUSH
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_INT 1
7933: ARRAY
7934: PPUSH
7935: LD_VAR 0 3
7939: PPUSH
7940: CALL_OW 1
7944: ST_TO_ADDR
7945: GO 8209
// begin tmp := arr ;
7947: LD_ADDR_VAR 0 6
7951: PUSH
7952: LD_VAR 0 1
7956: ST_TO_ADDR
// s_arr := [ tmp ] ;
7957: LD_ADDR_VAR 0 7
7961: PUSH
7962: LD_VAR 0 6
7966: PUSH
7967: EMPTY
7968: LIST
7969: ST_TO_ADDR
// for i = 1 to pos - 1 do
7970: LD_ADDR_VAR 0 5
7974: PUSH
7975: DOUBLE
7976: LD_INT 1
7978: DEC
7979: ST_TO_ADDR
7980: LD_VAR 0 2
7984: PUSH
7985: LD_INT 1
7987: MINUS
7988: PUSH
7989: FOR_TO
7990: IFFALSE 8035
// begin tmp := tmp [ pos [ i ] ] ;
7992: LD_ADDR_VAR 0 6
7996: PUSH
7997: LD_VAR 0 6
8001: PUSH
8002: LD_VAR 0 2
8006: PUSH
8007: LD_VAR 0 5
8011: ARRAY
8012: ARRAY
8013: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8014: LD_ADDR_VAR 0 7
8018: PUSH
8019: LD_VAR 0 7
8023: PUSH
8024: LD_VAR 0 6
8028: PUSH
8029: EMPTY
8030: LIST
8031: ADD
8032: ST_TO_ADDR
// end ;
8033: GO 7989
8035: POP
8036: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_VAR 0 6
8046: PPUSH
8047: LD_VAR 0 2
8051: PUSH
8052: LD_VAR 0 2
8056: ARRAY
8057: PPUSH
8058: LD_VAR 0 3
8062: PPUSH
8063: CALL_OW 1
8067: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8068: LD_ADDR_VAR 0 7
8072: PUSH
8073: LD_VAR 0 7
8077: PPUSH
8078: LD_VAR 0 7
8082: PPUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 1
8092: ST_TO_ADDR
// for i = s_arr downto 2 do
8093: LD_ADDR_VAR 0 5
8097: PUSH
8098: DOUBLE
8099: LD_VAR 0 7
8103: INC
8104: ST_TO_ADDR
8105: LD_INT 2
8107: PUSH
8108: FOR_DOWNTO
8109: IFFALSE 8193
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8111: LD_ADDR_VAR 0 6
8115: PUSH
8116: LD_VAR 0 7
8120: PUSH
8121: LD_VAR 0 5
8125: PUSH
8126: LD_INT 1
8128: MINUS
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_VAR 0 5
8140: PUSH
8141: LD_INT 1
8143: MINUS
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 7
8150: PUSH
8151: LD_VAR 0 5
8155: ARRAY
8156: PPUSH
8157: CALL_OW 1
8161: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8162: LD_ADDR_VAR 0 7
8166: PUSH
8167: LD_VAR 0 7
8171: PPUSH
8172: LD_VAR 0 5
8176: PUSH
8177: LD_INT 1
8179: MINUS
8180: PPUSH
8181: LD_VAR 0 6
8185: PPUSH
8186: CALL_OW 1
8190: ST_TO_ADDR
// end ;
8191: GO 8108
8193: POP
8194: POP
// result := s_arr [ 1 ] ;
8195: LD_ADDR_VAR 0 4
8199: PUSH
8200: LD_VAR 0 7
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: ST_TO_ADDR
// end ; end ;
8209: LD_VAR 0 4
8213: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8214: LD_INT 0
8216: PPUSH
8217: PPUSH
// if not list then
8218: LD_VAR 0 1
8222: NOT
8223: IFFALSE 8227
// exit ;
8225: GO 8318
// i := list [ pos1 ] ;
8227: LD_ADDR_VAR 0 5
8231: PUSH
8232: LD_VAR 0 1
8236: PUSH
8237: LD_VAR 0 2
8241: ARRAY
8242: ST_TO_ADDR
// if not i then
8243: LD_VAR 0 5
8247: NOT
8248: IFFALSE 8252
// exit ;
8250: GO 8318
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8252: LD_ADDR_VAR 0 1
8256: PUSH
8257: LD_VAR 0 1
8261: PPUSH
8262: LD_VAR 0 2
8266: PPUSH
8267: LD_VAR 0 1
8271: PUSH
8272: LD_VAR 0 3
8276: ARRAY
8277: PPUSH
8278: CALL_OW 1
8282: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8283: LD_ADDR_VAR 0 1
8287: PUSH
8288: LD_VAR 0 1
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 5
8302: PPUSH
8303: CALL_OW 1
8307: ST_TO_ADDR
// result := list ;
8308: LD_ADDR_VAR 0 4
8312: PUSH
8313: LD_VAR 0 1
8317: ST_TO_ADDR
// end ;
8318: LD_VAR 0 4
8322: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8323: LD_INT 0
8325: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8326: LD_ADDR_VAR 0 5
8330: PUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 250
8340: PPUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 251
8350: PPUSH
8351: LD_VAR 0 2
8355: PPUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: LD_VAR 0 4
8365: PPUSH
8366: CALL 8744 0 5
8370: ST_TO_ADDR
// end ;
8371: LD_VAR 0 5
8375: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8376: LD_INT 0
8378: PPUSH
8379: PPUSH
8380: PPUSH
8381: PPUSH
// if not list or not unit then
8382: LD_VAR 0 2
8386: NOT
8387: PUSH
8388: LD_VAR 0 1
8392: NOT
8393: OR
8394: IFFALSE 8398
// exit ;
8396: GO 8739
// result := [ ] ;
8398: LD_ADDR_VAR 0 5
8402: PUSH
8403: EMPTY
8404: ST_TO_ADDR
// for i in list do
8405: LD_ADDR_VAR 0 6
8409: PUSH
8410: LD_VAR 0 2
8414: PUSH
8415: FOR_IN
8416: IFFALSE 8634
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8418: LD_ADDR_VAR 0 8
8422: PUSH
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_VAR 0 6
8432: PUSH
8433: LD_INT 1
8435: ARRAY
8436: PPUSH
8437: LD_VAR 0 6
8441: PUSH
8442: LD_INT 2
8444: ARRAY
8445: PPUSH
8446: CALL_OW 297
8450: ST_TO_ADDR
// if not Count ( result ) then
8451: LD_VAR 0 5
8455: PPUSH
8456: CALL 5028 0 1
8460: NOT
8461: IFFALSE 8494
// begin result := Join ( result , [ i , tmp ] ) ;
8463: LD_ADDR_VAR 0 5
8467: PUSH
8468: LD_VAR 0 5
8472: PPUSH
8473: LD_VAR 0 6
8477: PUSH
8478: LD_VAR 0 8
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL 40617 0 2
8491: ST_TO_ADDR
// continue ;
8492: GO 8415
// end ; if result [ result ] [ 2 ] <= tmp then
8494: LD_VAR 0 5
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PUSH
8509: LD_VAR 0 8
8513: LESSEQUAL
8514: IFFALSE 8547
// result := Join ( result , [ i , tmp ] ) else
8516: LD_ADDR_VAR 0 5
8520: PUSH
8521: LD_VAR 0 5
8525: PPUSH
8526: LD_VAR 0 6
8530: PUSH
8531: LD_VAR 0 8
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL 40617 0 2
8544: ST_TO_ADDR
8545: GO 8632
// begin for j := 1 to Count ( result ) do
8547: LD_ADDR_VAR 0 7
8551: PUSH
8552: DOUBLE
8553: LD_INT 1
8555: DEC
8556: ST_TO_ADDR
8557: LD_VAR 0 5
8561: PPUSH
8562: CALL 5028 0 1
8566: PUSH
8567: FOR_TO
8568: IFFALSE 8630
// begin if tmp < result [ j ] [ 2 ] then
8570: LD_VAR 0 8
8574: PUSH
8575: LD_VAR 0 5
8579: PUSH
8580: LD_VAR 0 7
8584: ARRAY
8585: PUSH
8586: LD_INT 2
8588: ARRAY
8589: LESS
8590: IFFALSE 8628
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8592: LD_ADDR_VAR 0 5
8596: PUSH
8597: LD_VAR 0 5
8601: PPUSH
8602: LD_VAR 0 7
8606: PPUSH
8607: LD_VAR 0 6
8611: PUSH
8612: LD_VAR 0 8
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PPUSH
8621: CALL_OW 2
8625: ST_TO_ADDR
// break ;
8626: GO 8630
// end ; end ;
8628: GO 8567
8630: POP
8631: POP
// end ; end ;
8632: GO 8415
8634: POP
8635: POP
// if result and not asc then
8636: LD_VAR 0 5
8640: PUSH
8641: LD_VAR 0 3
8645: NOT
8646: AND
8647: IFFALSE 8664
// result := ReverseArray ( result ) ;
8649: LD_ADDR_VAR 0 5
8653: PUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL 35904 0 1
8663: ST_TO_ADDR
// tmp := [ ] ;
8664: LD_ADDR_VAR 0 8
8668: PUSH
8669: EMPTY
8670: ST_TO_ADDR
// if mode then
8671: LD_VAR 0 4
8675: IFFALSE 8739
// begin for i := 1 to result do
8677: LD_ADDR_VAR 0 6
8681: PUSH
8682: DOUBLE
8683: LD_INT 1
8685: DEC
8686: ST_TO_ADDR
8687: LD_VAR 0 5
8691: PUSH
8692: FOR_TO
8693: IFFALSE 8727
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8695: LD_ADDR_VAR 0 8
8699: PUSH
8700: LD_VAR 0 8
8704: PPUSH
8705: LD_VAR 0 5
8709: PUSH
8710: LD_VAR 0 6
8714: ARRAY
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: CALL 40617 0 2
8724: ST_TO_ADDR
8725: GO 8692
8727: POP
8728: POP
// result := tmp ;
8729: LD_ADDR_VAR 0 5
8733: PUSH
8734: LD_VAR 0 8
8738: ST_TO_ADDR
// end ; end ;
8739: LD_VAR 0 5
8743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8744: LD_INT 0
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
// if not list then
8750: LD_VAR 0 3
8754: NOT
8755: IFFALSE 8759
// exit ;
8757: GO 9147
// result := [ ] ;
8759: LD_ADDR_VAR 0 6
8763: PUSH
8764: EMPTY
8765: ST_TO_ADDR
// for i in list do
8766: LD_ADDR_VAR 0 7
8770: PUSH
8771: LD_VAR 0 3
8775: PUSH
8776: FOR_IN
8777: IFFALSE 8979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8779: LD_ADDR_VAR 0 9
8783: PUSH
8784: LD_VAR 0 7
8788: PPUSH
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_VAR 0 2
8798: PPUSH
8799: CALL_OW 297
8803: ST_TO_ADDR
// if not result then
8804: LD_VAR 0 6
8808: NOT
8809: IFFALSE 8835
// result := [ [ i , tmp ] ] else
8811: LD_ADDR_VAR 0 6
8815: PUSH
8816: LD_VAR 0 7
8820: PUSH
8821: LD_VAR 0 9
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: ST_TO_ADDR
8833: GO 8977
// begin if result [ result ] [ 2 ] < tmp then
8835: LD_VAR 0 6
8839: PUSH
8840: LD_VAR 0 6
8844: ARRAY
8845: PUSH
8846: LD_INT 2
8848: ARRAY
8849: PUSH
8850: LD_VAR 0 9
8854: LESS
8855: IFFALSE 8897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: LD_VAR 0 6
8866: PPUSH
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 1
8874: PLUS
8875: PPUSH
8876: LD_VAR 0 7
8880: PUSH
8881: LD_VAR 0 9
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 2
8894: ST_TO_ADDR
8895: GO 8977
// for j = 1 to result do
8897: LD_ADDR_VAR 0 8
8901: PUSH
8902: DOUBLE
8903: LD_INT 1
8905: DEC
8906: ST_TO_ADDR
8907: LD_VAR 0 6
8911: PUSH
8912: FOR_TO
8913: IFFALSE 8975
// begin if tmp < result [ j ] [ 2 ] then
8915: LD_VAR 0 9
8919: PUSH
8920: LD_VAR 0 6
8924: PUSH
8925: LD_VAR 0 8
8929: ARRAY
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: LESS
8935: IFFALSE 8973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: LD_VAR 0 6
8946: PPUSH
8947: LD_VAR 0 8
8951: PPUSH
8952: LD_VAR 0 7
8956: PUSH
8957: LD_VAR 0 9
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 2
8970: ST_TO_ADDR
// break ;
8971: GO 8975
// end ; end ;
8973: GO 8912
8975: POP
8976: POP
// end ; end ;
8977: GO 8776
8979: POP
8980: POP
// if result and not asc then
8981: LD_VAR 0 6
8985: PUSH
8986: LD_VAR 0 4
8990: NOT
8991: AND
8992: IFFALSE 9067
// begin tmp := result ;
8994: LD_ADDR_VAR 0 9
8998: PUSH
8999: LD_VAR 0 6
9003: ST_TO_ADDR
// for i = tmp downto 1 do
9004: LD_ADDR_VAR 0 7
9008: PUSH
9009: DOUBLE
9010: LD_VAR 0 9
9014: INC
9015: ST_TO_ADDR
9016: LD_INT 1
9018: PUSH
9019: FOR_DOWNTO
9020: IFFALSE 9065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9022: LD_ADDR_VAR 0 6
9026: PUSH
9027: LD_VAR 0 6
9031: PPUSH
9032: LD_VAR 0 9
9036: PUSH
9037: LD_VAR 0 7
9041: MINUS
9042: PUSH
9043: LD_INT 1
9045: PLUS
9046: PPUSH
9047: LD_VAR 0 9
9051: PUSH
9052: LD_VAR 0 7
9056: ARRAY
9057: PPUSH
9058: CALL_OW 1
9062: ST_TO_ADDR
9063: GO 9019
9065: POP
9066: POP
// end ; tmp := [ ] ;
9067: LD_ADDR_VAR 0 9
9071: PUSH
9072: EMPTY
9073: ST_TO_ADDR
// if mode then
9074: LD_VAR 0 5
9078: IFFALSE 9147
// begin for i = 1 to result do
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: DOUBLE
9086: LD_INT 1
9088: DEC
9089: ST_TO_ADDR
9090: LD_VAR 0 6
9094: PUSH
9095: FOR_TO
9096: IFFALSE 9135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_VAR 0 9
9107: PPUSH
9108: LD_VAR 0 7
9112: PPUSH
9113: LD_VAR 0 6
9117: PUSH
9118: LD_VAR 0 7
9122: ARRAY
9123: PUSH
9124: LD_INT 1
9126: ARRAY
9127: PPUSH
9128: CALL_OW 1
9132: ST_TO_ADDR
9133: GO 9095
9135: POP
9136: POP
// result := tmp ;
9137: LD_ADDR_VAR 0 6
9141: PUSH
9142: LD_VAR 0 9
9146: ST_TO_ADDR
// end ; end ;
9147: LD_VAR 0 6
9151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9152: LD_INT 0
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9160: LD_ADDR_VAR 0 5
9164: PUSH
9165: LD_INT 0
9167: PUSH
9168: LD_INT 0
9170: PUSH
9171: LD_INT 0
9173: PUSH
9174: EMPTY
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: ST_TO_ADDR
// if not x or not y then
9182: LD_VAR 0 2
9186: NOT
9187: PUSH
9188: LD_VAR 0 3
9192: NOT
9193: OR
9194: IFFALSE 9198
// exit ;
9196: GO 10848
// if not range then
9198: LD_VAR 0 4
9202: NOT
9203: IFFALSE 9213
// range := 10 ;
9205: LD_ADDR_VAR 0 4
9209: PUSH
9210: LD_INT 10
9212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: LD_INT 81
9220: PUSH
9221: LD_VAR 0 1
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 92
9232: PUSH
9233: LD_VAR 0 2
9237: PUSH
9238: LD_VAR 0 3
9242: PUSH
9243: LD_VAR 0 4
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 3
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 3
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: ST_TO_ADDR
// if not tmp then
9281: LD_VAR 0 8
9285: NOT
9286: IFFALSE 9290
// exit ;
9288: GO 10848
// for i in tmp do
9290: LD_ADDR_VAR 0 6
9294: PUSH
9295: LD_VAR 0 8
9299: PUSH
9300: FOR_IN
9301: IFFALSE 10823
// begin points := [ 0 , 0 , 0 ] ;
9303: LD_ADDR_VAR 0 9
9307: PUSH
9308: LD_INT 0
9310: PUSH
9311: LD_INT 0
9313: PUSH
9314: LD_INT 0
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: ST_TO_ADDR
// bpoints := 1 ;
9322: LD_ADDR_VAR 0 10
9326: PUSH
9327: LD_INT 1
9329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9330: LD_VAR 0 6
9334: PPUSH
9335: CALL_OW 247
9339: PUSH
9340: LD_INT 1
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9926
9348: POP
// begin if GetClass ( i ) = 1 then
9349: LD_VAR 0 6
9353: PPUSH
9354: CALL_OW 257
9358: PUSH
9359: LD_INT 1
9361: EQUAL
9362: IFFALSE 9383
// points := [ 10 , 5 , 3 ] ;
9364: LD_ADDR_VAR 0 9
9368: PUSH
9369: LD_INT 10
9371: PUSH
9372: LD_INT 5
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9383: LD_VAR 0 6
9387: PPUSH
9388: CALL_OW 257
9392: PUSH
9393: LD_INT 2
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: LD_INT 4
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: IN
9407: IFFALSE 9428
// points := [ 3 , 2 , 1 ] ;
9409: LD_ADDR_VAR 0 9
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: LD_INT 1
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9428: LD_VAR 0 6
9432: PPUSH
9433: CALL_OW 257
9437: PUSH
9438: LD_INT 5
9440: EQUAL
9441: IFFALSE 9462
// points := [ 130 , 5 , 2 ] ;
9443: LD_ADDR_VAR 0 9
9447: PUSH
9448: LD_INT 130
9450: PUSH
9451: LD_INT 5
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9462: LD_VAR 0 6
9466: PPUSH
9467: CALL_OW 257
9471: PUSH
9472: LD_INT 8
9474: EQUAL
9475: IFFALSE 9496
// points := [ 35 , 35 , 30 ] ;
9477: LD_ADDR_VAR 0 9
9481: PUSH
9482: LD_INT 35
9484: PUSH
9485: LD_INT 35
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9496: LD_VAR 0 6
9500: PPUSH
9501: CALL_OW 257
9505: PUSH
9506: LD_INT 9
9508: EQUAL
9509: IFFALSE 9530
// points := [ 20 , 55 , 40 ] ;
9511: LD_ADDR_VAR 0 9
9515: PUSH
9516: LD_INT 20
9518: PUSH
9519: LD_INT 55
9521: PUSH
9522: LD_INT 40
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9530: LD_VAR 0 6
9534: PPUSH
9535: CALL_OW 257
9539: PUSH
9540: LD_INT 12
9542: PUSH
9543: LD_INT 16
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: IN
9550: IFFALSE 9571
// points := [ 5 , 3 , 2 ] ;
9552: LD_ADDR_VAR 0 9
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 3
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: LIST
9570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9571: LD_VAR 0 6
9575: PPUSH
9576: CALL_OW 257
9580: PUSH
9581: LD_INT 17
9583: EQUAL
9584: IFFALSE 9605
// points := [ 100 , 50 , 75 ] ;
9586: LD_ADDR_VAR 0 9
9590: PUSH
9591: LD_INT 100
9593: PUSH
9594: LD_INT 50
9596: PUSH
9597: LD_INT 75
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9605: LD_VAR 0 6
9609: PPUSH
9610: CALL_OW 257
9614: PUSH
9615: LD_INT 15
9617: EQUAL
9618: IFFALSE 9639
// points := [ 10 , 5 , 3 ] ;
9620: LD_ADDR_VAR 0 9
9624: PUSH
9625: LD_INT 10
9627: PUSH
9628: LD_INT 5
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9639: LD_VAR 0 6
9643: PPUSH
9644: CALL_OW 257
9648: PUSH
9649: LD_INT 14
9651: EQUAL
9652: IFFALSE 9673
// points := [ 10 , 0 , 0 ] ;
9654: LD_ADDR_VAR 0 9
9658: PUSH
9659: LD_INT 10
9661: PUSH
9662: LD_INT 0
9664: PUSH
9665: LD_INT 0
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9673: LD_VAR 0 6
9677: PPUSH
9678: CALL_OW 257
9682: PUSH
9683: LD_INT 11
9685: EQUAL
9686: IFFALSE 9707
// points := [ 30 , 10 , 5 ] ;
9688: LD_ADDR_VAR 0 9
9692: PUSH
9693: LD_INT 30
9695: PUSH
9696: LD_INT 10
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9707: LD_VAR 0 1
9711: PPUSH
9712: LD_INT 5
9714: PPUSH
9715: CALL_OW 321
9719: PUSH
9720: LD_INT 2
9722: EQUAL
9723: IFFALSE 9740
// bpoints := bpoints * 1.8 ;
9725: LD_ADDR_VAR 0 10
9729: PUSH
9730: LD_VAR 0 10
9734: PUSH
9735: LD_REAL  1.80000000000000E+0000
9738: MUL
9739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9740: LD_VAR 0 6
9744: PPUSH
9745: CALL_OW 257
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 2
9755: PUSH
9756: LD_INT 3
9758: PUSH
9759: LD_INT 4
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: IN
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_INT 51
9776: PPUSH
9777: CALL_OW 321
9781: PUSH
9782: LD_INT 2
9784: EQUAL
9785: AND
9786: IFFALSE 9803
// bpoints := bpoints * 1.2 ;
9788: LD_ADDR_VAR 0 10
9792: PUSH
9793: LD_VAR 0 10
9797: PUSH
9798: LD_REAL  1.20000000000000E+0000
9801: MUL
9802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 257
9812: PUSH
9813: LD_INT 5
9815: PUSH
9816: LD_INT 7
9818: PUSH
9819: LD_INT 9
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: IN
9827: PUSH
9828: LD_VAR 0 1
9832: PPUSH
9833: LD_INT 52
9835: PPUSH
9836: CALL_OW 321
9840: PUSH
9841: LD_INT 2
9843: EQUAL
9844: AND
9845: IFFALSE 9862
// bpoints := bpoints * 1.5 ;
9847: LD_ADDR_VAR 0 10
9851: PUSH
9852: LD_VAR 0 10
9856: PUSH
9857: LD_REAL  1.50000000000000E+0000
9860: MUL
9861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9862: LD_VAR 0 1
9866: PPUSH
9867: LD_INT 66
9869: PPUSH
9870: CALL_OW 321
9874: PUSH
9875: LD_INT 2
9877: EQUAL
9878: IFFALSE 9895
// bpoints := bpoints * 1.1 ;
9880: LD_ADDR_VAR 0 10
9884: PUSH
9885: LD_VAR 0 10
9889: PUSH
9890: LD_REAL  1.10000000000000E+0000
9893: MUL
9894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9895: LD_ADDR_VAR 0 10
9899: PUSH
9900: LD_VAR 0 10
9904: PUSH
9905: LD_VAR 0 6
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 259
9917: PUSH
9918: LD_REAL  1.15000000000000E+0000
9921: MUL
9922: MUL
9923: ST_TO_ADDR
// end ; unit_vehicle :
9924: GO 10752
9926: LD_INT 2
9928: DOUBLE
9929: EQUAL
9930: IFTRUE 9934
9932: GO 10740
9934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9935: LD_VAR 0 6
9939: PPUSH
9940: CALL_OW 264
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 42
9950: PUSH
9951: LD_INT 24
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: IN
9959: IFFALSE 9980
// points := [ 25 , 5 , 3 ] ;
9961: LD_ADDR_VAR 0 9
9965: PUSH
9966: LD_INT 25
9968: PUSH
9969: LD_INT 5
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9980: LD_VAR 0 6
9984: PPUSH
9985: CALL_OW 264
9989: PUSH
9990: LD_INT 4
9992: PUSH
9993: LD_INT 43
9995: PUSH
9996: LD_INT 25
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: IN
10004: IFFALSE 10025
// points := [ 40 , 15 , 5 ] ;
10006: LD_ADDR_VAR 0 9
10010: PUSH
10011: LD_INT 40
10013: PUSH
10014: LD_INT 15
10016: PUSH
10017: LD_INT 5
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10025: LD_VAR 0 6
10029: PPUSH
10030: CALL_OW 264
10034: PUSH
10035: LD_INT 3
10037: PUSH
10038: LD_INT 23
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: IN
10045: IFFALSE 10066
// points := [ 7 , 25 , 8 ] ;
10047: LD_ADDR_VAR 0 9
10051: PUSH
10052: LD_INT 7
10054: PUSH
10055: LD_INT 25
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10066: LD_VAR 0 6
10070: PPUSH
10071: CALL_OW 264
10075: PUSH
10076: LD_INT 5
10078: PUSH
10079: LD_INT 27
10081: PUSH
10082: LD_INT 44
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: IN
10090: IFFALSE 10111
// points := [ 14 , 50 , 16 ] ;
10092: LD_ADDR_VAR 0 9
10096: PUSH
10097: LD_INT 14
10099: PUSH
10100: LD_INT 50
10102: PUSH
10103: LD_INT 16
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10111: LD_VAR 0 6
10115: PPUSH
10116: CALL_OW 264
10120: PUSH
10121: LD_INT 6
10123: PUSH
10124: LD_INT 46
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: IN
10131: IFFALSE 10152
// points := [ 32 , 120 , 70 ] ;
10133: LD_ADDR_VAR 0 9
10137: PUSH
10138: LD_INT 32
10140: PUSH
10141: LD_INT 120
10143: PUSH
10144: LD_INT 70
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10152: LD_VAR 0 6
10156: PPUSH
10157: CALL_OW 264
10161: PUSH
10162: LD_INT 7
10164: PUSH
10165: LD_INT 28
10167: PUSH
10168: LD_INT 45
10170: PUSH
10171: LD_INT 92
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: IN
10180: IFFALSE 10201
// points := [ 35 , 20 , 45 ] ;
10182: LD_ADDR_VAR 0 9
10186: PUSH
10187: LD_INT 35
10189: PUSH
10190: LD_INT 20
10192: PUSH
10193: LD_INT 45
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10201: LD_VAR 0 6
10205: PPUSH
10206: CALL_OW 264
10210: PUSH
10211: LD_INT 47
10213: PUSH
10214: EMPTY
10215: LIST
10216: IN
10217: IFFALSE 10238
// points := [ 67 , 45 , 75 ] ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: LD_INT 67
10226: PUSH
10227: LD_INT 45
10229: PUSH
10230: LD_INT 75
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10238: LD_VAR 0 6
10242: PPUSH
10243: CALL_OW 264
10247: PUSH
10248: LD_INT 26
10250: PUSH
10251: EMPTY
10252: LIST
10253: IN
10254: IFFALSE 10275
// points := [ 120 , 30 , 80 ] ;
10256: LD_ADDR_VAR 0 9
10260: PUSH
10261: LD_INT 120
10263: PUSH
10264: LD_INT 30
10266: PUSH
10267: LD_INT 80
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10275: LD_VAR 0 6
10279: PPUSH
10280: CALL_OW 264
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: EMPTY
10289: LIST
10290: IN
10291: IFFALSE 10312
// points := [ 40 , 1 , 1 ] ;
10293: LD_ADDR_VAR 0 9
10297: PUSH
10298: LD_INT 40
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10312: LD_VAR 0 6
10316: PPUSH
10317: CALL_OW 264
10321: PUSH
10322: LD_INT 29
10324: PUSH
10325: EMPTY
10326: LIST
10327: IN
10328: IFFALSE 10349
// points := [ 70 , 200 , 400 ] ;
10330: LD_ADDR_VAR 0 9
10334: PUSH
10335: LD_INT 70
10337: PUSH
10338: LD_INT 200
10340: PUSH
10341: LD_INT 400
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10349: LD_VAR 0 6
10353: PPUSH
10354: CALL_OW 264
10358: PUSH
10359: LD_INT 14
10361: PUSH
10362: LD_INT 53
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: IN
10369: IFFALSE 10390
// points := [ 40 , 10 , 20 ] ;
10371: LD_ADDR_VAR 0 9
10375: PUSH
10376: LD_INT 40
10378: PUSH
10379: LD_INT 10
10381: PUSH
10382: LD_INT 20
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10390: LD_VAR 0 6
10394: PPUSH
10395: CALL_OW 264
10399: PUSH
10400: LD_INT 9
10402: PUSH
10403: EMPTY
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 5 , 70 , 20 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 5
10415: PUSH
10416: LD_INT 70
10418: PUSH
10419: LD_INT 20
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 264
10436: PUSH
10437: LD_INT 10
10439: PUSH
10440: EMPTY
10441: LIST
10442: IN
10443: IFFALSE 10464
// points := [ 35 , 110 , 70 ] ;
10445: LD_ADDR_VAR 0 9
10449: PUSH
10450: LD_INT 35
10452: PUSH
10453: LD_INT 110
10455: PUSH
10456: LD_INT 70
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL_OW 265
10473: PUSH
10474: LD_INT 25
10476: EQUAL
10477: IFFALSE 10498
// points := [ 80 , 65 , 100 ] ;
10479: LD_ADDR_VAR 0 9
10483: PUSH
10484: LD_INT 80
10486: PUSH
10487: LD_INT 65
10489: PUSH
10490: LD_INT 100
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10498: LD_VAR 0 6
10502: PPUSH
10503: CALL_OW 263
10507: PUSH
10508: LD_INT 1
10510: EQUAL
10511: IFFALSE 10546
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10513: LD_ADDR_VAR 0 10
10517: PUSH
10518: LD_VAR 0 10
10522: PUSH
10523: LD_VAR 0 6
10527: PPUSH
10528: CALL_OW 311
10532: PPUSH
10533: LD_INT 3
10535: PPUSH
10536: CALL_OW 259
10540: PUSH
10541: LD_INT 4
10543: MUL
10544: MUL
10545: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10546: LD_VAR 0 6
10550: PPUSH
10551: CALL_OW 263
10555: PUSH
10556: LD_INT 2
10558: EQUAL
10559: IFFALSE 10610
// begin j := IsControledBy ( i ) ;
10561: LD_ADDR_VAR 0 7
10565: PUSH
10566: LD_VAR 0 6
10570: PPUSH
10571: CALL_OW 312
10575: ST_TO_ADDR
// if j then
10576: LD_VAR 0 7
10580: IFFALSE 10610
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10582: LD_ADDR_VAR 0 10
10586: PUSH
10587: LD_VAR 0 10
10591: PUSH
10592: LD_VAR 0 7
10596: PPUSH
10597: LD_INT 3
10599: PPUSH
10600: CALL_OW 259
10604: PUSH
10605: LD_INT 3
10607: MUL
10608: MUL
10609: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10610: LD_VAR 0 6
10614: PPUSH
10615: CALL_OW 264
10619: PUSH
10620: LD_INT 5
10622: PUSH
10623: LD_INT 6
10625: PUSH
10626: LD_INT 46
10628: PUSH
10629: LD_INT 44
10631: PUSH
10632: LD_INT 47
10634: PUSH
10635: LD_INT 45
10637: PUSH
10638: LD_INT 28
10640: PUSH
10641: LD_INT 7
10643: PUSH
10644: LD_INT 27
10646: PUSH
10647: LD_INT 29
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: IN
10662: PUSH
10663: LD_VAR 0 1
10667: PPUSH
10668: LD_INT 52
10670: PPUSH
10671: CALL_OW 321
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: AND
10680: IFFALSE 10697
// bpoints := bpoints * 1.2 ;
10682: LD_ADDR_VAR 0 10
10686: PUSH
10687: LD_VAR 0 10
10691: PUSH
10692: LD_REAL  1.20000000000000E+0000
10695: MUL
10696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10697: LD_VAR 0 6
10701: PPUSH
10702: CALL_OW 264
10706: PUSH
10707: LD_INT 6
10709: PUSH
10710: LD_INT 46
10712: PUSH
10713: LD_INT 47
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: IN
10721: IFFALSE 10738
// bpoints := bpoints * 1.2 ;
10723: LD_ADDR_VAR 0 10
10727: PUSH
10728: LD_VAR 0 10
10732: PUSH
10733: LD_REAL  1.20000000000000E+0000
10736: MUL
10737: ST_TO_ADDR
// end ; unit_building :
10738: GO 10752
10740: LD_INT 3
10742: DOUBLE
10743: EQUAL
10744: IFTRUE 10748
10746: GO 10751
10748: POP
// ; end ;
10749: GO 10752
10751: POP
// for j = 1 to 3 do
10752: LD_ADDR_VAR 0 7
10756: PUSH
10757: DOUBLE
10758: LD_INT 1
10760: DEC
10761: ST_TO_ADDR
10762: LD_INT 3
10764: PUSH
10765: FOR_TO
10766: IFFALSE 10819
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10768: LD_ADDR_VAR 0 5
10772: PUSH
10773: LD_VAR 0 5
10777: PPUSH
10778: LD_VAR 0 7
10782: PPUSH
10783: LD_VAR 0 5
10787: PUSH
10788: LD_VAR 0 7
10792: ARRAY
10793: PUSH
10794: LD_VAR 0 9
10798: PUSH
10799: LD_VAR 0 7
10803: ARRAY
10804: PUSH
10805: LD_VAR 0 10
10809: MUL
10810: PLUS
10811: PPUSH
10812: CALL_OW 1
10816: ST_TO_ADDR
10817: GO 10765
10819: POP
10820: POP
// end ;
10821: GO 9300
10823: POP
10824: POP
// result := Replace ( result , 4 , tmp ) ;
10825: LD_ADDR_VAR 0 5
10829: PUSH
10830: LD_VAR 0 5
10834: PPUSH
10835: LD_INT 4
10837: PPUSH
10838: LD_VAR 0 8
10842: PPUSH
10843: CALL_OW 1
10847: ST_TO_ADDR
// end ;
10848: LD_VAR 0 5
10852: RET
// export function DangerAtRange ( unit , range ) ; begin
10853: LD_INT 0
10855: PPUSH
// if not unit then
10856: LD_VAR 0 1
10860: NOT
10861: IFFALSE 10865
// exit ;
10863: GO 10910
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 255
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: CALL_OW 250
10889: PPUSH
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 251
10899: PPUSH
10900: LD_VAR 0 2
10904: PPUSH
10905: CALL 9152 0 4
10909: ST_TO_ADDR
// end ;
10910: LD_VAR 0 3
10914: RET
// export function DangerInArea ( side , area ) ; begin
10915: LD_INT 0
10917: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_VAR 0 2
10927: PPUSH
10928: LD_INT 81
10930: PUSH
10931: LD_VAR 0 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 70
10944: ST_TO_ADDR
// end ;
10945: LD_VAR 0 3
10949: RET
// export function IsExtension ( b ) ; begin
10950: LD_INT 0
10952: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10953: LD_ADDR_VAR 0 2
10957: PUSH
10958: LD_VAR 0 1
10962: PUSH
10963: LD_INT 23
10965: PUSH
10966: LD_INT 20
10968: PUSH
10969: LD_INT 22
10971: PUSH
10972: LD_INT 17
10974: PUSH
10975: LD_INT 24
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 19
10983: PUSH
10984: LD_INT 16
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 18
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: IN
11005: ST_TO_ADDR
// end ;
11006: LD_VAR 0 2
11010: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
11015: PPUSH
// result := [ ] ;
11016: LD_ADDR_VAR 0 4
11020: PUSH
11021: EMPTY
11022: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11023: LD_ADDR_VAR 0 5
11027: PUSH
11028: LD_VAR 0 2
11032: PPUSH
11033: LD_INT 21
11035: PUSH
11036: LD_INT 3
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PPUSH
11043: CALL_OW 70
11047: ST_TO_ADDR
// if not tmp then
11048: LD_VAR 0 5
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11121
// if checkLink then
11057: LD_VAR 0 3
11061: IFFALSE 11111
// begin for i in tmp do
11063: LD_ADDR_VAR 0 6
11067: PUSH
11068: LD_VAR 0 5
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11109
// if GetBase ( i ) <> base then
11076: LD_VAR 0 6
11080: PPUSH
11081: CALL_OW 274
11085: PUSH
11086: LD_VAR 0 1
11090: NONEQUAL
11091: IFFALSE 11107
// ComLinkToBase ( base , i ) ;
11093: LD_VAR 0 1
11097: PPUSH
11098: LD_VAR 0 6
11102: PPUSH
11103: CALL_OW 169
11107: GO 11073
11109: POP
11110: POP
// end ; result := tmp ;
11111: LD_ADDR_VAR 0 4
11115: PUSH
11116: LD_VAR 0 5
11120: ST_TO_ADDR
// end ;
11121: LD_VAR 0 4
11125: RET
// export function ComComplete ( units , b ) ; var i ; begin
11126: LD_INT 0
11128: PPUSH
11129: PPUSH
// if not units then
11130: LD_VAR 0 1
11134: NOT
11135: IFFALSE 11139
// exit ;
11137: GO 11229
// for i in units do
11139: LD_ADDR_VAR 0 4
11143: PUSH
11144: LD_VAR 0 1
11148: PUSH
11149: FOR_IN
11150: IFFALSE 11227
// if BuildingStatus ( b ) = bs_build then
11152: LD_VAR 0 2
11156: PPUSH
11157: CALL_OW 461
11161: PUSH
11162: LD_INT 1
11164: EQUAL
11165: IFFALSE 11225
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11167: LD_VAR 0 4
11171: PPUSH
11172: LD_STRING h
11174: PUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: CALL_OW 250
11184: PUSH
11185: LD_VAR 0 2
11189: PPUSH
11190: CALL_OW 251
11194: PUSH
11195: LD_VAR 0 2
11199: PUSH
11200: LD_INT 0
11202: PUSH
11203: LD_INT 0
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: PPUSH
11221: CALL_OW 446
11225: GO 11149
11227: POP
11228: POP
// end ;
11229: LD_VAR 0 3
11233: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11234: LD_INT 0
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11242: LD_VAR 0 1
11246: NOT
11247: PUSH
11248: LD_VAR 0 1
11252: PPUSH
11253: CALL_OW 263
11257: PUSH
11258: LD_INT 2
11260: NONEQUAL
11261: OR
11262: IFFALSE 11266
// exit ;
11264: GO 11582
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11266: LD_ADDR_VAR 0 6
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 255
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: LD_INT 30
11293: PUSH
11294: LD_INT 36
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 34
11303: PUSH
11304: LD_INT 31
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 69
11324: ST_TO_ADDR
// if not tmp then
11325: LD_VAR 0 6
11329: NOT
11330: IFFALSE 11334
// exit ;
11332: GO 11582
// result := [ ] ;
11334: LD_ADDR_VAR 0 2
11338: PUSH
11339: EMPTY
11340: ST_TO_ADDR
// for i in tmp do
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_VAR 0 6
11350: PUSH
11351: FOR_IN
11352: IFFALSE 11423
// begin t := UnitsInside ( i ) ;
11354: LD_ADDR_VAR 0 4
11358: PUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: CALL_OW 313
11368: ST_TO_ADDR
// if t then
11369: LD_VAR 0 4
11373: IFFALSE 11421
// for j in t do
11375: LD_ADDR_VAR 0 7
11379: PUSH
11380: LD_VAR 0 4
11384: PUSH
11385: FOR_IN
11386: IFFALSE 11419
// result := Replace ( result , result + 1 , j ) ;
11388: LD_ADDR_VAR 0 2
11392: PUSH
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_VAR 0 2
11402: PUSH
11403: LD_INT 1
11405: PLUS
11406: PPUSH
11407: LD_VAR 0 7
11411: PPUSH
11412: CALL_OW 1
11416: ST_TO_ADDR
11417: GO 11385
11419: POP
11420: POP
// end ;
11421: GO 11351
11423: POP
11424: POP
// if not result then
11425: LD_VAR 0 2
11429: NOT
11430: IFFALSE 11434
// exit ;
11432: GO 11582
// mech := result [ 1 ] ;
11434: LD_ADDR_VAR 0 5
11438: PUSH
11439: LD_VAR 0 2
11443: PUSH
11444: LD_INT 1
11446: ARRAY
11447: ST_TO_ADDR
// if result > 1 then
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 1
11455: GREATER
11456: IFFALSE 11568
// begin for i = 2 to result do
11458: LD_ADDR_VAR 0 3
11462: PUSH
11463: DOUBLE
11464: LD_INT 2
11466: DEC
11467: ST_TO_ADDR
11468: LD_VAR 0 2
11472: PUSH
11473: FOR_TO
11474: IFFALSE 11566
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11476: LD_ADDR_VAR 0 4
11480: PUSH
11481: LD_VAR 0 2
11485: PUSH
11486: LD_VAR 0 3
11490: ARRAY
11491: PPUSH
11492: LD_INT 3
11494: PPUSH
11495: CALL_OW 259
11499: PUSH
11500: LD_VAR 0 2
11504: PUSH
11505: LD_VAR 0 3
11509: ARRAY
11510: PPUSH
11511: CALL_OW 432
11515: MINUS
11516: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11517: LD_VAR 0 4
11521: PUSH
11522: LD_VAR 0 5
11526: PPUSH
11527: LD_INT 3
11529: PPUSH
11530: CALL_OW 259
11534: PUSH
11535: LD_VAR 0 5
11539: PPUSH
11540: CALL_OW 432
11544: MINUS
11545: GREATEREQUAL
11546: IFFALSE 11564
// mech := result [ i ] ;
11548: LD_ADDR_VAR 0 5
11552: PUSH
11553: LD_VAR 0 2
11557: PUSH
11558: LD_VAR 0 3
11562: ARRAY
11563: ST_TO_ADDR
// end ;
11564: GO 11473
11566: POP
11567: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11568: LD_VAR 0 1
11572: PPUSH
11573: LD_VAR 0 5
11577: PPUSH
11578: CALL_OW 135
// end ;
11582: LD_VAR 0 2
11586: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11587: LD_INT 0
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
11594: PPUSH
11595: PPUSH
11596: PPUSH
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// result := [ ] ;
11602: LD_ADDR_VAR 0 7
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11609: LD_VAR 0 1
11613: PPUSH
11614: CALL_OW 266
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: IN
11629: NOT
11630: IFFALSE 11634
// exit ;
11632: GO 13268
// if name then
11634: LD_VAR 0 3
11638: IFFALSE 11654
// SetBName ( base_dep , name ) ;
11640: LD_VAR 0 1
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: CALL_OW 500
// base := GetBase ( base_dep ) ;
11654: LD_ADDR_VAR 0 15
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: CALL_OW 274
11668: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11669: LD_ADDR_VAR 0 16
11673: PUSH
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 255
11683: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11684: LD_ADDR_VAR 0 17
11688: PUSH
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 248
11698: ST_TO_ADDR
// if sources then
11699: LD_VAR 0 5
11703: IFFALSE 11750
// for i = 1 to 3 do
11705: LD_ADDR_VAR 0 8
11709: PUSH
11710: DOUBLE
11711: LD_INT 1
11713: DEC
11714: ST_TO_ADDR
11715: LD_INT 3
11717: PUSH
11718: FOR_TO
11719: IFFALSE 11748
// AddResourceType ( base , i , sources [ i ] ) ;
11721: LD_VAR 0 15
11725: PPUSH
11726: LD_VAR 0 8
11730: PPUSH
11731: LD_VAR 0 5
11735: PUSH
11736: LD_VAR 0 8
11740: ARRAY
11741: PPUSH
11742: CALL_OW 276
11746: GO 11718
11748: POP
11749: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11750: LD_ADDR_VAR 0 18
11754: PUSH
11755: LD_VAR 0 15
11759: PPUSH
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL 11011 0 3
11772: ST_TO_ADDR
// InitHc ;
11773: CALL_OW 19
// InitUc ;
11777: CALL_OW 18
// uc_side := side ;
11781: LD_ADDR_OWVAR 20
11785: PUSH
11786: LD_VAR 0 16
11790: ST_TO_ADDR
// uc_nation := nation ;
11791: LD_ADDR_OWVAR 21
11795: PUSH
11796: LD_VAR 0 17
11800: ST_TO_ADDR
// if buildings then
11801: LD_VAR 0 18
11805: IFFALSE 13127
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11807: LD_ADDR_VAR 0 19
11811: PUSH
11812: LD_VAR 0 18
11816: PPUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 30
11822: PUSH
11823: LD_INT 29
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 30
11832: PUSH
11833: LD_INT 30
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 72
11849: ST_TO_ADDR
// if tmp then
11850: LD_VAR 0 19
11854: IFFALSE 11902
// for i in tmp do
11856: LD_ADDR_VAR 0 8
11860: PUSH
11861: LD_VAR 0 19
11865: PUSH
11866: FOR_IN
11867: IFFALSE 11900
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11869: LD_VAR 0 8
11873: PPUSH
11874: CALL_OW 250
11878: PPUSH
11879: LD_VAR 0 8
11883: PPUSH
11884: CALL_OW 251
11888: PPUSH
11889: LD_VAR 0 16
11893: PPUSH
11894: CALL_OW 441
11898: GO 11866
11900: POP
11901: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11902: LD_VAR 0 18
11906: PPUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 30
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 30
11922: PUSH
11923: LD_INT 33
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 72
11939: IFFALSE 12027
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11941: LD_ADDR_VAR 0 8
11945: PUSH
11946: LD_VAR 0 18
11950: PPUSH
11951: LD_INT 2
11953: PUSH
11954: LD_INT 30
11956: PUSH
11957: LD_INT 32
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 30
11966: PUSH
11967: LD_INT 33
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 72
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12025
// begin if not GetBWeapon ( i ) then
11987: LD_VAR 0 8
11991: PPUSH
11992: CALL_OW 269
11996: NOT
11997: IFFALSE 12023
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11999: LD_VAR 0 8
12003: PPUSH
12004: LD_VAR 0 8
12008: PPUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: CALL 13273 0 2
12018: PPUSH
12019: CALL_OW 431
// end ;
12023: GO 11984
12025: POP
12026: POP
// end ; for i = 1 to personel do
12027: LD_ADDR_VAR 0 8
12031: PUSH
12032: DOUBLE
12033: LD_INT 1
12035: DEC
12036: ST_TO_ADDR
12037: LD_VAR 0 6
12041: PUSH
12042: FOR_TO
12043: IFFALSE 13107
// begin if i > 4 then
12045: LD_VAR 0 8
12049: PUSH
12050: LD_INT 4
12052: GREATER
12053: IFFALSE 12057
// break ;
12055: GO 13107
// case i of 1 :
12057: LD_VAR 0 8
12061: PUSH
12062: LD_INT 1
12064: DOUBLE
12065: EQUAL
12066: IFTRUE 12070
12068: GO 12150
12070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12071: LD_ADDR_VAR 0 12
12075: PUSH
12076: LD_VAR 0 18
12080: PPUSH
12081: LD_INT 22
12083: PUSH
12084: LD_VAR 0 16
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 58
12095: PUSH
12096: EMPTY
12097: LIST
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 32
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 30
12124: PUSH
12125: LD_INT 5
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 72
12147: ST_TO_ADDR
12148: GO 12372
12150: LD_INT 2
12152: DOUBLE
12153: EQUAL
12154: IFTRUE 12158
12156: GO 12220
12158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12159: LD_ADDR_VAR 0 12
12163: PUSH
12164: LD_VAR 0 18
12168: PPUSH
12169: LD_INT 22
12171: PUSH
12172: LD_VAR 0 16
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: LD_INT 30
12186: PUSH
12187: LD_INT 0
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: ST_TO_ADDR
12218: GO 12372
12220: LD_INT 3
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12290
12228: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12229: LD_ADDR_VAR 0 12
12233: PUSH
12234: LD_VAR 0 18
12238: PPUSH
12239: LD_INT 22
12241: PUSH
12242: LD_VAR 0 16
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 2
12253: PUSH
12254: LD_INT 30
12256: PUSH
12257: LD_INT 2
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 30
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 72
12287: ST_TO_ADDR
12288: GO 12372
12290: LD_INT 4
12292: DOUBLE
12293: EQUAL
12294: IFTRUE 12298
12296: GO 12371
12298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12299: LD_ADDR_VAR 0 12
12303: PUSH
12304: LD_VAR 0 18
12308: PPUSH
12309: LD_INT 22
12311: PUSH
12312: LD_VAR 0 16
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 30
12326: PUSH
12327: LD_INT 6
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 30
12336: PUSH
12337: LD_INT 7
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 30
12346: PUSH
12347: LD_INT 8
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PPUSH
12364: CALL_OW 72
12368: ST_TO_ADDR
12369: GO 12372
12371: POP
// if i = 1 then
12372: LD_VAR 0 8
12376: PUSH
12377: LD_INT 1
12379: EQUAL
12380: IFFALSE 12491
// begin tmp := [ ] ;
12382: LD_ADDR_VAR 0 19
12386: PUSH
12387: EMPTY
12388: ST_TO_ADDR
// for j in f do
12389: LD_ADDR_VAR 0 9
12393: PUSH
12394: LD_VAR 0 12
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12473
// if GetBType ( j ) = b_bunker then
12402: LD_VAR 0 9
12406: PPUSH
12407: CALL_OW 266
12411: PUSH
12412: LD_INT 32
12414: EQUAL
12415: IFFALSE 12442
// tmp := Insert ( tmp , 1 , j ) else
12417: LD_ADDR_VAR 0 19
12421: PUSH
12422: LD_VAR 0 19
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: LD_VAR 0 9
12434: PPUSH
12435: CALL_OW 2
12439: ST_TO_ADDR
12440: GO 12471
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12442: LD_ADDR_VAR 0 19
12446: PUSH
12447: LD_VAR 0 19
12451: PPUSH
12452: LD_VAR 0 19
12456: PUSH
12457: LD_INT 1
12459: PLUS
12460: PPUSH
12461: LD_VAR 0 9
12465: PPUSH
12466: CALL_OW 2
12470: ST_TO_ADDR
12471: GO 12399
12473: POP
12474: POP
// if tmp then
12475: LD_VAR 0 19
12479: IFFALSE 12491
// f := tmp ;
12481: LD_ADDR_VAR 0 12
12485: PUSH
12486: LD_VAR 0 19
12490: ST_TO_ADDR
// end ; x := personel [ i ] ;
12491: LD_ADDR_VAR 0 13
12495: PUSH
12496: LD_VAR 0 6
12500: PUSH
12501: LD_VAR 0 8
12505: ARRAY
12506: ST_TO_ADDR
// if x = - 1 then
12507: LD_VAR 0 13
12511: PUSH
12512: LD_INT 1
12514: NEG
12515: EQUAL
12516: IFFALSE 12725
// begin for j in f do
12518: LD_ADDR_VAR 0 9
12522: PUSH
12523: LD_VAR 0 12
12527: PUSH
12528: FOR_IN
12529: IFFALSE 12721
// repeat InitHc ;
12531: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12535: LD_VAR 0 9
12539: PPUSH
12540: CALL_OW 266
12544: PUSH
12545: LD_INT 5
12547: EQUAL
12548: IFFALSE 12618
// begin if UnitsInside ( j ) < 3 then
12550: LD_VAR 0 9
12554: PPUSH
12555: CALL_OW 313
12559: PUSH
12560: LD_INT 3
12562: LESS
12563: IFFALSE 12599
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12565: LD_INT 0
12567: PPUSH
12568: LD_INT 5
12570: PUSH
12571: LD_INT 8
12573: PUSH
12574: LD_INT 9
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_VAR 0 17
12586: ARRAY
12587: PPUSH
12588: LD_VAR 0 4
12592: PPUSH
12593: CALL_OW 380
12597: GO 12616
// PrepareHuman ( false , i , skill ) ;
12599: LD_INT 0
12601: PPUSH
12602: LD_VAR 0 8
12606: PPUSH
12607: LD_VAR 0 4
12611: PPUSH
12612: CALL_OW 380
// end else
12616: GO 12635
// PrepareHuman ( false , i , skill ) ;
12618: LD_INT 0
12620: PPUSH
12621: LD_VAR 0 8
12625: PPUSH
12626: LD_VAR 0 4
12630: PPUSH
12631: CALL_OW 380
// un := CreateHuman ;
12635: LD_ADDR_VAR 0 14
12639: PUSH
12640: CALL_OW 44
12644: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12645: LD_ADDR_VAR 0 7
12649: PUSH
12650: LD_VAR 0 7
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: LD_VAR 0 14
12662: PPUSH
12663: CALL_OW 2
12667: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12668: LD_VAR 0 14
12672: PPUSH
12673: LD_VAR 0 9
12677: PPUSH
12678: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12682: LD_VAR 0 9
12686: PPUSH
12687: CALL_OW 313
12691: PUSH
12692: LD_INT 6
12694: EQUAL
12695: PUSH
12696: LD_VAR 0 9
12700: PPUSH
12701: CALL_OW 266
12705: PUSH
12706: LD_INT 32
12708: PUSH
12709: LD_INT 31
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: IN
12716: OR
12717: IFFALSE 12531
12719: GO 12528
12721: POP
12722: POP
// end else
12723: GO 13105
// for j = 1 to x do
12725: LD_ADDR_VAR 0 9
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_VAR 0 13
12739: PUSH
12740: FOR_TO
12741: IFFALSE 13103
// begin InitHc ;
12743: CALL_OW 19
// if not f then
12747: LD_VAR 0 12
12751: NOT
12752: IFFALSE 12841
// begin PrepareHuman ( false , i , skill ) ;
12754: LD_INT 0
12756: PPUSH
12757: LD_VAR 0 8
12761: PPUSH
12762: LD_VAR 0 4
12766: PPUSH
12767: CALL_OW 380
// un := CreateHuman ;
12771: LD_ADDR_VAR 0 14
12775: PUSH
12776: CALL_OW 44
12780: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12781: LD_ADDR_VAR 0 7
12785: PUSH
12786: LD_VAR 0 7
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_VAR 0 14
12798: PPUSH
12799: CALL_OW 2
12803: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12804: LD_VAR 0 14
12808: PPUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 250
12818: PPUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 251
12828: PPUSH
12829: LD_INT 10
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 50
// continue ;
12839: GO 12740
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12841: LD_VAR 0 12
12845: PUSH
12846: LD_INT 1
12848: ARRAY
12849: PPUSH
12850: CALL_OW 313
12854: PUSH
12855: LD_VAR 0 12
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 266
12868: PUSH
12869: LD_INT 32
12871: PUSH
12872: LD_INT 31
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: IN
12879: AND
12880: PUSH
12881: LD_VAR 0 12
12885: PUSH
12886: LD_INT 1
12888: ARRAY
12889: PPUSH
12890: CALL_OW 313
12894: PUSH
12895: LD_INT 6
12897: EQUAL
12898: OR
12899: IFFALSE 12919
// f := Delete ( f , 1 ) ;
12901: LD_ADDR_VAR 0 12
12905: PUSH
12906: LD_VAR 0 12
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 3
12918: ST_TO_ADDR
// if not f then
12919: LD_VAR 0 12
12923: NOT
12924: IFFALSE 12942
// begin x := x + 2 ;
12926: LD_ADDR_VAR 0 13
12930: PUSH
12931: LD_VAR 0 13
12935: PUSH
12936: LD_INT 2
12938: PLUS
12939: ST_TO_ADDR
// continue ;
12940: GO 12740
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12942: LD_VAR 0 12
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: CALL_OW 266
12955: PUSH
12956: LD_INT 5
12958: EQUAL
12959: IFFALSE 13033
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12961: LD_VAR 0 12
12965: PUSH
12966: LD_INT 1
12968: ARRAY
12969: PPUSH
12970: CALL_OW 313
12974: PUSH
12975: LD_INT 3
12977: LESS
12978: IFFALSE 13014
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12980: LD_INT 0
12982: PPUSH
12983: LD_INT 5
12985: PUSH
12986: LD_INT 8
12988: PUSH
12989: LD_INT 9
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: PUSH
12997: LD_VAR 0 17
13001: ARRAY
13002: PPUSH
13003: LD_VAR 0 4
13007: PPUSH
13008: CALL_OW 380
13012: GO 13031
// PrepareHuman ( false , i , skill ) ;
13014: LD_INT 0
13016: PPUSH
13017: LD_VAR 0 8
13021: PPUSH
13022: LD_VAR 0 4
13026: PPUSH
13027: CALL_OW 380
// end else
13031: GO 13050
// PrepareHuman ( false , i , skill ) ;
13033: LD_INT 0
13035: PPUSH
13036: LD_VAR 0 8
13040: PPUSH
13041: LD_VAR 0 4
13045: PPUSH
13046: CALL_OW 380
// un := CreateHuman ;
13050: LD_ADDR_VAR 0 14
13054: PUSH
13055: CALL_OW 44
13059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13060: LD_ADDR_VAR 0 7
13064: PUSH
13065: LD_VAR 0 7
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: LD_VAR 0 14
13077: PPUSH
13078: CALL_OW 2
13082: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13083: LD_VAR 0 14
13087: PPUSH
13088: LD_VAR 0 12
13092: PUSH
13093: LD_INT 1
13095: ARRAY
13096: PPUSH
13097: CALL_OW 52
// end ;
13101: GO 12740
13103: POP
13104: POP
// end ;
13105: GO 12042
13107: POP
13108: POP
// result := result ^ buildings ;
13109: LD_ADDR_VAR 0 7
13113: PUSH
13114: LD_VAR 0 7
13118: PUSH
13119: LD_VAR 0 18
13123: ADD
13124: ST_TO_ADDR
// end else
13125: GO 13268
// begin for i = 1 to personel do
13127: LD_ADDR_VAR 0 8
13131: PUSH
13132: DOUBLE
13133: LD_INT 1
13135: DEC
13136: ST_TO_ADDR
13137: LD_VAR 0 6
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13266
// begin if i > 4 then
13145: LD_VAR 0 8
13149: PUSH
13150: LD_INT 4
13152: GREATER
13153: IFFALSE 13157
// break ;
13155: GO 13266
// x := personel [ i ] ;
13157: LD_ADDR_VAR 0 13
13161: PUSH
13162: LD_VAR 0 6
13166: PUSH
13167: LD_VAR 0 8
13171: ARRAY
13172: ST_TO_ADDR
// if x = - 1 then
13173: LD_VAR 0 13
13177: PUSH
13178: LD_INT 1
13180: NEG
13181: EQUAL
13182: IFFALSE 13186
// continue ;
13184: GO 13142
// PrepareHuman ( false , i , skill ) ;
13186: LD_INT 0
13188: PPUSH
13189: LD_VAR 0 8
13193: PPUSH
13194: LD_VAR 0 4
13198: PPUSH
13199: CALL_OW 380
// un := CreateHuman ;
13203: LD_ADDR_VAR 0 14
13207: PUSH
13208: CALL_OW 44
13212: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13213: LD_VAR 0 14
13217: PPUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: CALL_OW 250
13227: PPUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 251
13237: PPUSH
13238: LD_INT 10
13240: PPUSH
13241: LD_INT 0
13243: PPUSH
13244: CALL_OW 50
// result := result ^ un ;
13248: LD_ADDR_VAR 0 7
13252: PUSH
13253: LD_VAR 0 7
13257: PUSH
13258: LD_VAR 0 14
13262: ADD
13263: ST_TO_ADDR
// end ;
13264: GO 13142
13266: POP
13267: POP
// end ; end ;
13268: LD_VAR 0 7
13272: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
13277: PPUSH
13278: PPUSH
13279: PPUSH
13280: PPUSH
13281: PPUSH
13282: PPUSH
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
13287: PPUSH
13288: PPUSH
13289: PPUSH
13290: PPUSH
// result := false ;
13291: LD_ADDR_VAR 0 3
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13299: LD_VAR 0 1
13303: NOT
13304: PUSH
13305: LD_VAR 0 1
13309: PPUSH
13310: CALL_OW 266
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 33
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: IN
13325: NOT
13326: OR
13327: IFFALSE 13331
// exit ;
13329: GO 14440
// nat := GetNation ( tower ) ;
13331: LD_ADDR_VAR 0 12
13335: PUSH
13336: LD_VAR 0 1
13340: PPUSH
13341: CALL_OW 248
13345: ST_TO_ADDR
// side := GetSide ( tower ) ;
13346: LD_ADDR_VAR 0 16
13350: PUSH
13351: LD_VAR 0 1
13355: PPUSH
13356: CALL_OW 255
13360: ST_TO_ADDR
// x := GetX ( tower ) ;
13361: LD_ADDR_VAR 0 10
13365: PUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: CALL_OW 250
13375: ST_TO_ADDR
// y := GetY ( tower ) ;
13376: LD_ADDR_VAR 0 11
13380: PUSH
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 251
13390: ST_TO_ADDR
// if not x or not y then
13391: LD_VAR 0 10
13395: NOT
13396: PUSH
13397: LD_VAR 0 11
13401: NOT
13402: OR
13403: IFFALSE 13407
// exit ;
13405: GO 14440
// weapon := 0 ;
13407: LD_ADDR_VAR 0 18
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// fac_list := [ ] ;
13415: LD_ADDR_VAR 0 17
13419: PUSH
13420: EMPTY
13421: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13422: LD_ADDR_VAR 0 6
13426: PUSH
13427: LD_VAR 0 1
13431: PPUSH
13432: CALL_OW 274
13436: PPUSH
13437: LD_VAR 0 2
13441: PPUSH
13442: LD_INT 0
13444: PPUSH
13445: CALL 11011 0 3
13449: PPUSH
13450: LD_INT 30
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 72
13464: ST_TO_ADDR
// if not factories then
13465: LD_VAR 0 6
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 14440
// for i in factories do
13474: LD_ADDR_VAR 0 8
13478: PUSH
13479: LD_VAR 0 6
13483: PUSH
13484: FOR_IN
13485: IFFALSE 13510
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13487: LD_ADDR_VAR 0 17
13491: PUSH
13492: LD_VAR 0 17
13496: PUSH
13497: LD_VAR 0 8
13501: PPUSH
13502: CALL_OW 478
13506: UNION
13507: ST_TO_ADDR
13508: GO 13484
13510: POP
13511: POP
// if not fac_list then
13512: LD_VAR 0 17
13516: NOT
13517: IFFALSE 13521
// exit ;
13519: GO 14440
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13521: LD_ADDR_VAR 0 5
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: LD_INT 5
13531: PUSH
13532: LD_INT 9
13534: PUSH
13535: LD_INT 10
13537: PUSH
13538: LD_INT 6
13540: PUSH
13541: LD_INT 7
13543: PUSH
13544: LD_INT 11
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 27
13558: PUSH
13559: LD_INT 28
13561: PUSH
13562: LD_INT 26
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 43
13576: PUSH
13577: LD_INT 44
13579: PUSH
13580: LD_INT 46
13582: PUSH
13583: LD_INT 45
13585: PUSH
13586: LD_INT 47
13588: PUSH
13589: LD_INT 49
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: LD_VAR 0 12
13609: ARRAY
13610: ST_TO_ADDR
// list := list isect fac_list ;
13611: LD_ADDR_VAR 0 5
13615: PUSH
13616: LD_VAR 0 5
13620: PUSH
13621: LD_VAR 0 17
13625: ISECT
13626: ST_TO_ADDR
// if not list then
13627: LD_VAR 0 5
13631: NOT
13632: IFFALSE 13636
// exit ;
13634: GO 14440
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13636: LD_VAR 0 12
13640: PUSH
13641: LD_INT 3
13643: EQUAL
13644: PUSH
13645: LD_INT 49
13647: PUSH
13648: LD_VAR 0 5
13652: IN
13653: AND
13654: PUSH
13655: LD_INT 31
13657: PPUSH
13658: LD_VAR 0 16
13662: PPUSH
13663: CALL_OW 321
13667: PUSH
13668: LD_INT 2
13670: EQUAL
13671: AND
13672: IFFALSE 13732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13674: LD_INT 22
13676: PUSH
13677: LD_VAR 0 16
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 35
13688: PUSH
13689: LD_INT 49
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 91
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: LD_INT 10
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: NOT
13722: IFFALSE 13732
// weapon := ru_time_lapser ;
13724: LD_ADDR_VAR 0 18
13728: PUSH
13729: LD_INT 49
13731: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13732: LD_VAR 0 12
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: LD_INT 2
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: IN
13747: PUSH
13748: LD_INT 11
13750: PUSH
13751: LD_VAR 0 5
13755: IN
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_VAR 0 5
13764: IN
13765: OR
13766: AND
13767: PUSH
13768: LD_INT 6
13770: PPUSH
13771: LD_VAR 0 16
13775: PPUSH
13776: CALL_OW 321
13780: PUSH
13781: LD_INT 2
13783: EQUAL
13784: AND
13785: IFFALSE 13950
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13787: LD_INT 22
13789: PUSH
13790: LD_VAR 0 16
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 35
13804: PUSH
13805: LD_INT 11
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 35
13814: PUSH
13815: LD_INT 30
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 91
13829: PUSH
13830: LD_VAR 0 1
13834: PUSH
13835: LD_INT 18
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: NOT
13853: PUSH
13854: LD_INT 22
13856: PUSH
13857: LD_VAR 0 16
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 2
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_INT 32
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 30
13881: PUSH
13882: LD_INT 33
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 91
13896: PUSH
13897: LD_VAR 0 1
13901: PUSH
13902: LD_INT 12
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: LIST
13914: PUSH
13915: EMPTY
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: PUSH
13923: LD_INT 2
13925: GREATER
13926: AND
13927: IFFALSE 13950
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13929: LD_ADDR_VAR 0 18
13933: PUSH
13934: LD_INT 11
13936: PUSH
13937: LD_INT 30
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_VAR 0 12
13948: ARRAY
13949: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13950: LD_VAR 0 18
13954: NOT
13955: PUSH
13956: LD_INT 40
13958: PPUSH
13959: LD_VAR 0 16
13963: PPUSH
13964: CALL_OW 321
13968: PUSH
13969: LD_INT 2
13971: EQUAL
13972: AND
13973: PUSH
13974: LD_INT 7
13976: PUSH
13977: LD_VAR 0 5
13981: IN
13982: PUSH
13983: LD_INT 28
13985: PUSH
13986: LD_VAR 0 5
13990: IN
13991: OR
13992: PUSH
13993: LD_INT 45
13995: PUSH
13996: LD_VAR 0 5
14000: IN
14001: OR
14002: AND
14003: IFFALSE 14257
// begin hex := GetHexInfo ( x , y ) ;
14005: LD_ADDR_VAR 0 4
14009: PUSH
14010: LD_VAR 0 10
14014: PPUSH
14015: LD_VAR 0 11
14019: PPUSH
14020: CALL_OW 546
14024: ST_TO_ADDR
// if hex [ 1 ] then
14025: LD_VAR 0 4
14029: PUSH
14030: LD_INT 1
14032: ARRAY
14033: IFFALSE 14037
// exit ;
14035: GO 14440
// height := hex [ 2 ] ;
14037: LD_ADDR_VAR 0 15
14041: PUSH
14042: LD_VAR 0 4
14046: PUSH
14047: LD_INT 2
14049: ARRAY
14050: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14051: LD_ADDR_VAR 0 14
14055: PUSH
14056: LD_INT 0
14058: PUSH
14059: LD_INT 2
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: LD_INT 5
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: ST_TO_ADDR
// for i in tmp do
14074: LD_ADDR_VAR 0 8
14078: PUSH
14079: LD_VAR 0 14
14083: PUSH
14084: FOR_IN
14085: IFFALSE 14255
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14087: LD_ADDR_VAR 0 9
14091: PUSH
14092: LD_VAR 0 10
14096: PPUSH
14097: LD_VAR 0 8
14101: PPUSH
14102: LD_INT 5
14104: PPUSH
14105: CALL_OW 272
14109: PUSH
14110: LD_VAR 0 11
14114: PPUSH
14115: LD_VAR 0 8
14119: PPUSH
14120: LD_INT 5
14122: PPUSH
14123: CALL_OW 273
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14132: LD_VAR 0 9
14136: PUSH
14137: LD_INT 1
14139: ARRAY
14140: PPUSH
14141: LD_VAR 0 9
14145: PUSH
14146: LD_INT 2
14148: ARRAY
14149: PPUSH
14150: CALL_OW 488
14154: IFFALSE 14253
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14156: LD_ADDR_VAR 0 4
14160: PUSH
14161: LD_VAR 0 9
14165: PUSH
14166: LD_INT 1
14168: ARRAY
14169: PPUSH
14170: LD_VAR 0 9
14174: PUSH
14175: LD_INT 2
14177: ARRAY
14178: PPUSH
14179: CALL_OW 546
14183: ST_TO_ADDR
// if hex [ 1 ] then
14184: LD_VAR 0 4
14188: PUSH
14189: LD_INT 1
14191: ARRAY
14192: IFFALSE 14196
// continue ;
14194: GO 14084
// h := hex [ 2 ] ;
14196: LD_ADDR_VAR 0 13
14200: PUSH
14201: LD_VAR 0 4
14205: PUSH
14206: LD_INT 2
14208: ARRAY
14209: ST_TO_ADDR
// if h + 7 < height then
14210: LD_VAR 0 13
14214: PUSH
14215: LD_INT 7
14217: PLUS
14218: PUSH
14219: LD_VAR 0 15
14223: LESS
14224: IFFALSE 14253
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14226: LD_ADDR_VAR 0 18
14230: PUSH
14231: LD_INT 7
14233: PUSH
14234: LD_INT 28
14236: PUSH
14237: LD_INT 45
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_VAR 0 12
14249: ARRAY
14250: ST_TO_ADDR
// break ;
14251: GO 14255
// end ; end ; end ;
14253: GO 14084
14255: POP
14256: POP
// end ; if not weapon then
14257: LD_VAR 0 18
14261: NOT
14262: IFFALSE 14322
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14264: LD_ADDR_VAR 0 5
14268: PUSH
14269: LD_VAR 0 5
14273: PUSH
14274: LD_INT 11
14276: PUSH
14277: LD_INT 30
14279: PUSH
14280: LD_INT 49
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: DIFF
14288: ST_TO_ADDR
// if not list then
14289: LD_VAR 0 5
14293: NOT
14294: IFFALSE 14298
// exit ;
14296: GO 14440
// weapon := list [ rand ( 1 , list ) ] ;
14298: LD_ADDR_VAR 0 18
14302: PUSH
14303: LD_VAR 0 5
14307: PUSH
14308: LD_INT 1
14310: PPUSH
14311: LD_VAR 0 5
14315: PPUSH
14316: CALL_OW 12
14320: ARRAY
14321: ST_TO_ADDR
// end ; if weapon then
14322: LD_VAR 0 18
14326: IFFALSE 14440
// begin tmp := CostOfWeapon ( weapon ) ;
14328: LD_ADDR_VAR 0 14
14332: PUSH
14333: LD_VAR 0 18
14337: PPUSH
14338: CALL_OW 451
14342: ST_TO_ADDR
// j := GetBase ( tower ) ;
14343: LD_ADDR_VAR 0 9
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 274
14357: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14358: LD_VAR 0 9
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 275
14370: PUSH
14371: LD_VAR 0 14
14375: PUSH
14376: LD_INT 1
14378: ARRAY
14379: GREATEREQUAL
14380: PUSH
14381: LD_VAR 0 9
14385: PPUSH
14386: LD_INT 2
14388: PPUSH
14389: CALL_OW 275
14393: PUSH
14394: LD_VAR 0 14
14398: PUSH
14399: LD_INT 2
14401: ARRAY
14402: GREATEREQUAL
14403: AND
14404: PUSH
14405: LD_VAR 0 9
14409: PPUSH
14410: LD_INT 3
14412: PPUSH
14413: CALL_OW 275
14417: PUSH
14418: LD_VAR 0 14
14422: PUSH
14423: LD_INT 3
14425: ARRAY
14426: GREATEREQUAL
14427: AND
14428: IFFALSE 14440
// result := weapon ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_VAR 0 18
14439: ST_TO_ADDR
// end ; end ;
14440: LD_VAR 0 3
14444: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14445: LD_INT 0
14447: PPUSH
14448: PPUSH
// result := true ;
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// if array1 = array2 then
14457: LD_VAR 0 1
14461: PUSH
14462: LD_VAR 0 2
14466: EQUAL
14467: IFFALSE 14527
// begin for i = 1 to array1 do
14469: LD_ADDR_VAR 0 4
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_VAR 0 1
14483: PUSH
14484: FOR_TO
14485: IFFALSE 14523
// if array1 [ i ] <> array2 [ i ] then
14487: LD_VAR 0 1
14491: PUSH
14492: LD_VAR 0 4
14496: ARRAY
14497: PUSH
14498: LD_VAR 0 2
14502: PUSH
14503: LD_VAR 0 4
14507: ARRAY
14508: NONEQUAL
14509: IFFALSE 14521
// begin result := false ;
14511: LD_ADDR_VAR 0 3
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// break ;
14519: GO 14523
// end ;
14521: GO 14484
14523: POP
14524: POP
// end else
14525: GO 14535
// result := false ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// end ;
14535: LD_VAR 0 3
14539: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
// if not array1 or not array2 then
14544: LD_VAR 0 1
14548: NOT
14549: PUSH
14550: LD_VAR 0 2
14554: NOT
14555: OR
14556: IFFALSE 14560
// exit ;
14558: GO 14624
// result := true ;
14560: LD_ADDR_VAR 0 3
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// for i = 1 to array1 do
14568: LD_ADDR_VAR 0 4
14572: PUSH
14573: DOUBLE
14574: LD_INT 1
14576: DEC
14577: ST_TO_ADDR
14578: LD_VAR 0 1
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14622
// if array1 [ i ] <> array2 [ i ] then
14586: LD_VAR 0 1
14590: PUSH
14591: LD_VAR 0 4
14595: ARRAY
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_VAR 0 4
14606: ARRAY
14607: NONEQUAL
14608: IFFALSE 14620
// begin result := false ;
14610: LD_ADDR_VAR 0 3
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// break ;
14618: GO 14622
// end ;
14620: GO 14583
14622: POP
14623: POP
// end ;
14624: LD_VAR 0 3
14628: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14629: LD_INT 0
14631: PPUSH
14632: PPUSH
14633: PPUSH
// pom := GetBase ( fac ) ;
14634: LD_ADDR_VAR 0 5
14638: PUSH
14639: LD_VAR 0 1
14643: PPUSH
14644: CALL_OW 274
14648: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14649: LD_ADDR_VAR 0 4
14653: PUSH
14654: LD_VAR 0 2
14658: PUSH
14659: LD_INT 1
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 2
14667: PUSH
14668: LD_INT 2
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 3
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 2
14685: PUSH
14686: LD_INT 4
14688: ARRAY
14689: PPUSH
14690: CALL_OW 449
14694: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_VAR 0 5
14704: PPUSH
14705: LD_INT 1
14707: PPUSH
14708: CALL_OW 275
14712: PUSH
14713: LD_VAR 0 4
14717: PUSH
14718: LD_INT 1
14720: ARRAY
14721: GREATEREQUAL
14722: PUSH
14723: LD_VAR 0 5
14727: PPUSH
14728: LD_INT 2
14730: PPUSH
14731: CALL_OW 275
14735: PUSH
14736: LD_VAR 0 4
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: GREATEREQUAL
14745: AND
14746: PUSH
14747: LD_VAR 0 5
14751: PPUSH
14752: LD_INT 3
14754: PPUSH
14755: CALL_OW 275
14759: PUSH
14760: LD_VAR 0 4
14764: PUSH
14765: LD_INT 3
14767: ARRAY
14768: GREATEREQUAL
14769: AND
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 3
14775: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
// pom := GetBase ( building ) ;
14782: LD_ADDR_VAR 0 3
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 274
14796: ST_TO_ADDR
// if not pom then
14797: LD_VAR 0 3
14801: NOT
14802: IFFALSE 14806
// exit ;
14804: GO 14976
// btype := GetBType ( building ) ;
14806: LD_ADDR_VAR 0 5
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 266
14820: ST_TO_ADDR
// if btype = b_armoury then
14821: LD_VAR 0 5
14825: PUSH
14826: LD_INT 4
14828: EQUAL
14829: IFFALSE 14839
// btype := b_barracks ;
14831: LD_ADDR_VAR 0 5
14835: PUSH
14836: LD_INT 5
14838: ST_TO_ADDR
// if btype = b_depot then
14839: LD_VAR 0 5
14843: PUSH
14844: LD_INT 0
14846: EQUAL
14847: IFFALSE 14857
// btype := b_warehouse ;
14849: LD_ADDR_VAR 0 5
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// if btype = b_workshop then
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 2
14864: EQUAL
14865: IFFALSE 14875
// btype := b_factory ;
14867: LD_ADDR_VAR 0 5
14871: PUSH
14872: LD_INT 3
14874: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14875: LD_ADDR_VAR 0 4
14879: PUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 248
14894: PPUSH
14895: CALL_OW 450
14899: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14900: LD_ADDR_VAR 0 2
14904: PUSH
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_INT 1
14912: PPUSH
14913: CALL_OW 275
14917: PUSH
14918: LD_VAR 0 4
14922: PUSH
14923: LD_INT 1
14925: ARRAY
14926: GREATEREQUAL
14927: PUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_INT 2
14935: PPUSH
14936: CALL_OW 275
14940: PUSH
14941: LD_VAR 0 4
14945: PUSH
14946: LD_INT 2
14948: ARRAY
14949: GREATEREQUAL
14950: AND
14951: PUSH
14952: LD_VAR 0 3
14956: PPUSH
14957: LD_INT 3
14959: PPUSH
14960: CALL_OW 275
14964: PUSH
14965: LD_VAR 0 4
14969: PUSH
14970: LD_INT 3
14972: ARRAY
14973: GREATEREQUAL
14974: AND
14975: ST_TO_ADDR
// end ;
14976: LD_VAR 0 2
14980: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14981: LD_INT 0
14983: PPUSH
14984: PPUSH
14985: PPUSH
// pom := GetBase ( building ) ;
14986: LD_ADDR_VAR 0 4
14990: PUSH
14991: LD_VAR 0 1
14995: PPUSH
14996: CALL_OW 274
15000: ST_TO_ADDR
// if not pom then
15001: LD_VAR 0 4
15005: NOT
15006: IFFALSE 15010
// exit ;
15008: GO 15111
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15010: LD_ADDR_VAR 0 5
15014: PUSH
15015: LD_VAR 0 2
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: CALL_OW 248
15029: PPUSH
15030: CALL_OW 450
15034: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15035: LD_ADDR_VAR 0 3
15039: PUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: CALL_OW 275
15052: PUSH
15053: LD_VAR 0 5
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: GREATEREQUAL
15062: PUSH
15063: LD_VAR 0 4
15067: PPUSH
15068: LD_INT 2
15070: PPUSH
15071: CALL_OW 275
15075: PUSH
15076: LD_VAR 0 5
15080: PUSH
15081: LD_INT 2
15083: ARRAY
15084: GREATEREQUAL
15085: AND
15086: PUSH
15087: LD_VAR 0 4
15091: PPUSH
15092: LD_INT 3
15094: PPUSH
15095: CALL_OW 275
15099: PUSH
15100: LD_VAR 0 5
15104: PUSH
15105: LD_INT 3
15107: ARRAY
15108: GREATEREQUAL
15109: AND
15110: ST_TO_ADDR
// end ;
15111: LD_VAR 0 3
15115: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15116: LD_INT 0
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
// result := false ;
15129: LD_ADDR_VAR 0 8
15133: PUSH
15134: LD_INT 0
15136: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15137: LD_VAR 0 5
15141: NOT
15142: PUSH
15143: LD_VAR 0 1
15147: NOT
15148: OR
15149: PUSH
15150: LD_VAR 0 2
15154: NOT
15155: OR
15156: PUSH
15157: LD_VAR 0 3
15161: NOT
15162: OR
15163: IFFALSE 15167
// exit ;
15165: GO 15981
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15167: LD_ADDR_VAR 0 14
15171: PUSH
15172: LD_VAR 0 1
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_VAR 0 4
15191: PPUSH
15192: LD_VAR 0 5
15196: PUSH
15197: LD_INT 1
15199: ARRAY
15200: PPUSH
15201: CALL_OW 248
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: CALL 17234 0 6
15213: ST_TO_ADDR
// if not hexes then
15214: LD_VAR 0 14
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15981
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15223: LD_ADDR_VAR 0 17
15227: PUSH
15228: LD_VAR 0 5
15232: PPUSH
15233: LD_INT 22
15235: PUSH
15236: LD_VAR 0 13
15240: PPUSH
15241: CALL_OW 255
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 2
15252: PUSH
15253: LD_INT 30
15255: PUSH
15256: LD_INT 0
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 30
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PPUSH
15282: CALL_OW 72
15286: ST_TO_ADDR
// for i = 1 to hexes do
15287: LD_ADDR_VAR 0 9
15291: PUSH
15292: DOUBLE
15293: LD_INT 1
15295: DEC
15296: ST_TO_ADDR
15297: LD_VAR 0 14
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15979
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15305: LD_ADDR_VAR 0 13
15309: PUSH
15310: LD_VAR 0 14
15314: PUSH
15315: LD_VAR 0 9
15319: ARRAY
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: LD_VAR 0 14
15329: PUSH
15330: LD_VAR 0 9
15334: ARRAY
15335: PUSH
15336: LD_INT 2
15338: ARRAY
15339: PPUSH
15340: CALL_OW 428
15344: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15345: LD_VAR 0 14
15349: PUSH
15350: LD_VAR 0 9
15354: ARRAY
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_VAR 0 14
15364: PUSH
15365: LD_VAR 0 9
15369: ARRAY
15370: PUSH
15371: LD_INT 2
15373: ARRAY
15374: PPUSH
15375: CALL_OW 351
15379: PUSH
15380: LD_VAR 0 14
15384: PUSH
15385: LD_VAR 0 9
15389: ARRAY
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 14
15399: PUSH
15400: LD_VAR 0 9
15404: ARRAY
15405: PUSH
15406: LD_INT 2
15408: ARRAY
15409: PPUSH
15410: CALL_OW 488
15414: NOT
15415: OR
15416: PUSH
15417: LD_VAR 0 13
15421: PPUSH
15422: CALL_OW 247
15426: PUSH
15427: LD_INT 3
15429: EQUAL
15430: OR
15431: IFFALSE 15437
// exit ;
15433: POP
15434: POP
15435: GO 15981
// if not tmp then
15437: LD_VAR 0 13
15441: NOT
15442: IFFALSE 15446
// continue ;
15444: GO 15302
// result := true ;
15446: LD_ADDR_VAR 0 8
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15454: LD_VAR 0 6
15458: PUSH
15459: LD_VAR 0 13
15463: PPUSH
15464: CALL_OW 247
15468: PUSH
15469: LD_INT 2
15471: EQUAL
15472: AND
15473: PUSH
15474: LD_VAR 0 13
15478: PPUSH
15479: CALL_OW 263
15483: PUSH
15484: LD_INT 1
15486: EQUAL
15487: AND
15488: IFFALSE 15652
// begin if IsDrivenBy ( tmp ) then
15490: LD_VAR 0 13
15494: PPUSH
15495: CALL_OW 311
15499: IFFALSE 15503
// continue ;
15501: GO 15302
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15503: LD_VAR 0 6
15507: PPUSH
15508: LD_INT 3
15510: PUSH
15511: LD_INT 60
15513: PUSH
15514: EMPTY
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: LD_INT 55
15526: PUSH
15527: EMPTY
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 72
15542: IFFALSE 15650
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15544: LD_ADDR_VAR 0 18
15548: PUSH
15549: LD_VAR 0 6
15553: PPUSH
15554: LD_INT 3
15556: PUSH
15557: LD_INT 60
15559: PUSH
15560: EMPTY
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: LD_INT 55
15572: PUSH
15573: EMPTY
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 72
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: ST_TO_ADDR
// if IsInUnit ( driver ) then
15593: LD_VAR 0 18
15597: PPUSH
15598: CALL_OW 310
15602: IFFALSE 15613
// ComExit ( driver ) ;
15604: LD_VAR 0 18
15608: PPUSH
15609: CALL 41015 0 1
// AddComEnterUnit ( driver , tmp ) ;
15613: LD_VAR 0 18
15617: PPUSH
15618: LD_VAR 0 13
15622: PPUSH
15623: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15627: LD_VAR 0 18
15631: PPUSH
15632: LD_VAR 0 7
15636: PPUSH
15637: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15641: LD_VAR 0 18
15645: PPUSH
15646: CALL_OW 181
// end ; continue ;
15650: GO 15302
// end ; if not cleaners or not tmp in cleaners then
15652: LD_VAR 0 6
15656: NOT
15657: PUSH
15658: LD_VAR 0 13
15662: PUSH
15663: LD_VAR 0 6
15667: IN
15668: NOT
15669: OR
15670: IFFALSE 15977
// begin if dep then
15672: LD_VAR 0 17
15676: IFFALSE 15812
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15678: LD_ADDR_VAR 0 16
15682: PUSH
15683: LD_VAR 0 17
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: CALL_OW 250
15696: PPUSH
15697: LD_VAR 0 17
15701: PUSH
15702: LD_INT 1
15704: ARRAY
15705: PPUSH
15706: CALL_OW 254
15710: PPUSH
15711: LD_INT 5
15713: PPUSH
15714: CALL_OW 272
15718: PUSH
15719: LD_VAR 0 17
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: CALL_OW 251
15732: PPUSH
15733: LD_VAR 0 17
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: CALL_OW 254
15746: PPUSH
15747: LD_INT 5
15749: PPUSH
15750: CALL_OW 273
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15759: LD_VAR 0 16
15763: PUSH
15764: LD_INT 1
15766: ARRAY
15767: PPUSH
15768: LD_VAR 0 16
15772: PUSH
15773: LD_INT 2
15775: ARRAY
15776: PPUSH
15777: CALL_OW 488
15781: IFFALSE 15812
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15783: LD_VAR 0 13
15787: PPUSH
15788: LD_VAR 0 16
15792: PUSH
15793: LD_INT 1
15795: ARRAY
15796: PPUSH
15797: LD_VAR 0 16
15801: PUSH
15802: LD_INT 2
15804: ARRAY
15805: PPUSH
15806: CALL_OW 111
// continue ;
15810: GO 15302
// end ; end ; r := GetDir ( tmp ) ;
15812: LD_ADDR_VAR 0 15
15816: PUSH
15817: LD_VAR 0 13
15821: PPUSH
15822: CALL_OW 254
15826: ST_TO_ADDR
// if r = 5 then
15827: LD_VAR 0 15
15831: PUSH
15832: LD_INT 5
15834: EQUAL
15835: IFFALSE 15845
// r := 0 ;
15837: LD_ADDR_VAR 0 15
15841: PUSH
15842: LD_INT 0
15844: ST_TO_ADDR
// for j = r to 5 do
15845: LD_ADDR_VAR 0 10
15849: PUSH
15850: DOUBLE
15851: LD_VAR 0 15
15855: DEC
15856: ST_TO_ADDR
15857: LD_INT 5
15859: PUSH
15860: FOR_TO
15861: IFFALSE 15975
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15863: LD_ADDR_VAR 0 11
15867: PUSH
15868: LD_VAR 0 13
15872: PPUSH
15873: CALL_OW 250
15877: PPUSH
15878: LD_VAR 0 10
15882: PPUSH
15883: LD_INT 2
15885: PPUSH
15886: CALL_OW 272
15890: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15891: LD_ADDR_VAR 0 12
15895: PUSH
15896: LD_VAR 0 13
15900: PPUSH
15901: CALL_OW 251
15905: PPUSH
15906: LD_VAR 0 10
15910: PPUSH
15911: LD_INT 2
15913: PPUSH
15914: CALL_OW 273
15918: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15919: LD_VAR 0 11
15923: PPUSH
15924: LD_VAR 0 12
15928: PPUSH
15929: CALL_OW 488
15933: PUSH
15934: LD_VAR 0 11
15938: PPUSH
15939: LD_VAR 0 12
15943: PPUSH
15944: CALL_OW 428
15948: NOT
15949: AND
15950: IFFALSE 15973
// begin ComMoveXY ( tmp , _x , _y ) ;
15952: LD_VAR 0 13
15956: PPUSH
15957: LD_VAR 0 11
15961: PPUSH
15962: LD_VAR 0 12
15966: PPUSH
15967: CALL_OW 111
// break ;
15971: GO 15975
// end ; end ;
15973: GO 15860
15975: POP
15976: POP
// end ; end ;
15977: GO 15302
15979: POP
15980: POP
// end ;
15981: LD_VAR 0 8
15985: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15986: LD_INT 0
15988: PPUSH
// result := true ;
15989: LD_ADDR_VAR 0 3
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15997: LD_VAR 0 2
16001: PUSH
16002: LD_INT 24
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16016
16008: LD_INT 33
16010: DOUBLE
16011: EQUAL
16012: IFTRUE 16016
16014: GO 16041
16016: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16017: LD_ADDR_VAR 0 3
16021: PUSH
16022: LD_INT 32
16024: PPUSH
16025: LD_VAR 0 1
16029: PPUSH
16030: CALL_OW 321
16034: PUSH
16035: LD_INT 2
16037: EQUAL
16038: ST_TO_ADDR
16039: GO 16357
16041: LD_INT 20
16043: DOUBLE
16044: EQUAL
16045: IFTRUE 16049
16047: GO 16074
16049: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16050: LD_ADDR_VAR 0 3
16054: PUSH
16055: LD_INT 6
16057: PPUSH
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 321
16067: PUSH
16068: LD_INT 2
16070: EQUAL
16071: ST_TO_ADDR
16072: GO 16357
16074: LD_INT 22
16076: DOUBLE
16077: EQUAL
16078: IFTRUE 16088
16080: LD_INT 36
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16113
16088: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16089: LD_ADDR_VAR 0 3
16093: PUSH
16094: LD_INT 15
16096: PPUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 321
16106: PUSH
16107: LD_INT 2
16109: EQUAL
16110: ST_TO_ADDR
16111: GO 16357
16113: LD_INT 30
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16146
16121: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 20
16129: PPUSH
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 321
16139: PUSH
16140: LD_INT 2
16142: EQUAL
16143: ST_TO_ADDR
16144: GO 16357
16146: LD_INT 28
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16160
16152: LD_INT 21
16154: DOUBLE
16155: EQUAL
16156: IFTRUE 16160
16158: GO 16185
16160: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_INT 21
16168: PPUSH
16169: LD_VAR 0 1
16173: PPUSH
16174: CALL_OW 321
16178: PUSH
16179: LD_INT 2
16181: EQUAL
16182: ST_TO_ADDR
16183: GO 16357
16185: LD_INT 16
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16218
16193: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16194: LD_ADDR_VAR 0 3
16198: PUSH
16199: LD_INT 84
16201: PPUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 321
16211: PUSH
16212: LD_INT 2
16214: EQUAL
16215: ST_TO_ADDR
16216: GO 16357
16218: LD_INT 19
16220: DOUBLE
16221: EQUAL
16222: IFTRUE 16232
16224: LD_INT 23
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16257
16232: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 83
16240: PPUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 321
16250: PUSH
16251: LD_INT 2
16253: EQUAL
16254: ST_TO_ADDR
16255: GO 16357
16257: LD_INT 17
16259: DOUBLE
16260: EQUAL
16261: IFTRUE 16265
16263: GO 16290
16265: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: LD_INT 39
16273: PPUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 321
16283: PUSH
16284: LD_INT 2
16286: EQUAL
16287: ST_TO_ADDR
16288: GO 16357
16290: LD_INT 18
16292: DOUBLE
16293: EQUAL
16294: IFTRUE 16298
16296: GO 16323
16298: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16299: LD_ADDR_VAR 0 3
16303: PUSH
16304: LD_INT 40
16306: PPUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 321
16316: PUSH
16317: LD_INT 2
16319: EQUAL
16320: ST_TO_ADDR
16321: GO 16357
16323: LD_INT 27
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16356
16331: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16332: LD_ADDR_VAR 0 3
16336: PUSH
16337: LD_INT 35
16339: PPUSH
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 321
16349: PUSH
16350: LD_INT 2
16352: EQUAL
16353: ST_TO_ADDR
16354: GO 16357
16356: POP
// end ;
16357: LD_VAR 0 3
16361: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16362: LD_INT 0
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
16373: PPUSH
16374: PPUSH
// result := false ;
16375: LD_ADDR_VAR 0 6
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// if btype = b_depot then
16383: LD_VAR 0 2
16387: PUSH
16388: LD_INT 0
16390: EQUAL
16391: IFFALSE 16403
// begin result := true ;
16393: LD_ADDR_VAR 0 6
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// exit ;
16401: GO 17229
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16403: LD_VAR 0 1
16407: NOT
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 266
16418: PUSH
16419: LD_INT 0
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: IN
16429: NOT
16430: OR
16431: PUSH
16432: LD_VAR 0 2
16436: NOT
16437: OR
16438: PUSH
16439: LD_VAR 0 5
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: LD_INT 2
16452: PUSH
16453: LD_INT 3
16455: PUSH
16456: LD_INT 4
16458: PUSH
16459: LD_INT 5
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: IN
16470: NOT
16471: OR
16472: PUSH
16473: LD_VAR 0 3
16477: PPUSH
16478: LD_VAR 0 4
16482: PPUSH
16483: CALL_OW 488
16487: NOT
16488: OR
16489: IFFALSE 16493
// exit ;
16491: GO 17229
// side := GetSide ( depot ) ;
16493: LD_ADDR_VAR 0 9
16497: PUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 255
16507: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16508: LD_VAR 0 9
16512: PPUSH
16513: LD_VAR 0 2
16517: PPUSH
16518: CALL 15986 0 2
16522: NOT
16523: IFFALSE 16527
// exit ;
16525: GO 17229
// pom := GetBase ( depot ) ;
16527: LD_ADDR_VAR 0 10
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 274
16541: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16542: LD_ADDR_VAR 0 11
16546: PUSH
16547: LD_VAR 0 2
16551: PPUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 248
16561: PPUSH
16562: CALL_OW 450
16566: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16567: LD_VAR 0 10
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 275
16579: PUSH
16580: LD_VAR 0 11
16584: PUSH
16585: LD_INT 1
16587: ARRAY
16588: GREATEREQUAL
16589: PUSH
16590: LD_VAR 0 10
16594: PPUSH
16595: LD_INT 2
16597: PPUSH
16598: CALL_OW 275
16602: PUSH
16603: LD_VAR 0 11
16607: PUSH
16608: LD_INT 2
16610: ARRAY
16611: GREATEREQUAL
16612: AND
16613: PUSH
16614: LD_VAR 0 10
16618: PPUSH
16619: LD_INT 3
16621: PPUSH
16622: CALL_OW 275
16626: PUSH
16627: LD_VAR 0 11
16631: PUSH
16632: LD_INT 3
16634: ARRAY
16635: GREATEREQUAL
16636: AND
16637: NOT
16638: IFFALSE 16642
// exit ;
16640: GO 17229
// if GetBType ( depot ) = b_depot then
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 266
16651: PUSH
16652: LD_INT 0
16654: EQUAL
16655: IFFALSE 16667
// dist := 28 else
16657: LD_ADDR_VAR 0 14
16661: PUSH
16662: LD_INT 28
16664: ST_TO_ADDR
16665: GO 16675
// dist := 36 ;
16667: LD_ADDR_VAR 0 14
16671: PUSH
16672: LD_INT 36
16674: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16675: LD_VAR 0 1
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_VAR 0 4
16689: PPUSH
16690: CALL_OW 297
16694: PUSH
16695: LD_VAR 0 14
16699: GREATER
16700: IFFALSE 16704
// exit ;
16702: GO 17229
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16704: LD_ADDR_VAR 0 12
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_VAR 0 4
16723: PPUSH
16724: LD_VAR 0 5
16728: PPUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 248
16738: PPUSH
16739: LD_INT 0
16741: PPUSH
16742: CALL 17234 0 6
16746: ST_TO_ADDR
// if not hexes then
16747: LD_VAR 0 12
16751: NOT
16752: IFFALSE 16756
// exit ;
16754: GO 17229
// hex := GetHexInfo ( x , y ) ;
16756: LD_ADDR_VAR 0 15
16760: PUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_VAR 0 4
16770: PPUSH
16771: CALL_OW 546
16775: ST_TO_ADDR
// if hex [ 1 ] then
16776: LD_VAR 0 15
16780: PUSH
16781: LD_INT 1
16783: ARRAY
16784: IFFALSE 16788
// exit ;
16786: GO 17229
// height := hex [ 2 ] ;
16788: LD_ADDR_VAR 0 13
16792: PUSH
16793: LD_VAR 0 15
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: ST_TO_ADDR
// for i = 1 to hexes do
16802: LD_ADDR_VAR 0 7
16806: PUSH
16807: DOUBLE
16808: LD_INT 1
16810: DEC
16811: ST_TO_ADDR
16812: LD_VAR 0 12
16816: PUSH
16817: FOR_TO
16818: IFFALSE 17148
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16820: LD_VAR 0 12
16824: PUSH
16825: LD_VAR 0 7
16829: ARRAY
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: LD_VAR 0 12
16839: PUSH
16840: LD_VAR 0 7
16844: ARRAY
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 488
16854: NOT
16855: PUSH
16856: LD_VAR 0 12
16860: PUSH
16861: LD_VAR 0 7
16865: ARRAY
16866: PUSH
16867: LD_INT 1
16869: ARRAY
16870: PPUSH
16871: LD_VAR 0 12
16875: PUSH
16876: LD_VAR 0 7
16880: ARRAY
16881: PUSH
16882: LD_INT 2
16884: ARRAY
16885: PPUSH
16886: CALL_OW 428
16890: PUSH
16891: LD_INT 0
16893: GREATER
16894: OR
16895: PUSH
16896: LD_VAR 0 12
16900: PUSH
16901: LD_VAR 0 7
16905: ARRAY
16906: PUSH
16907: LD_INT 1
16909: ARRAY
16910: PPUSH
16911: LD_VAR 0 12
16915: PUSH
16916: LD_VAR 0 7
16920: ARRAY
16921: PUSH
16922: LD_INT 2
16924: ARRAY
16925: PPUSH
16926: CALL_OW 351
16930: OR
16931: IFFALSE 16937
// exit ;
16933: POP
16934: POP
16935: GO 17229
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16937: LD_ADDR_VAR 0 8
16941: PUSH
16942: LD_VAR 0 12
16946: PUSH
16947: LD_VAR 0 7
16951: ARRAY
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 12
16961: PUSH
16962: LD_VAR 0 7
16966: ARRAY
16967: PUSH
16968: LD_INT 2
16970: ARRAY
16971: PPUSH
16972: CALL_OW 546
16976: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16977: LD_VAR 0 8
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PUSH
16986: LD_VAR 0 8
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_VAR 0 13
16999: PUSH
17000: LD_INT 2
17002: PLUS
17003: GREATER
17004: OR
17005: PUSH
17006: LD_VAR 0 8
17010: PUSH
17011: LD_INT 2
17013: ARRAY
17014: PUSH
17015: LD_VAR 0 13
17019: PUSH
17020: LD_INT 2
17022: MINUS
17023: LESS
17024: OR
17025: PUSH
17026: LD_VAR 0 8
17030: PUSH
17031: LD_INT 3
17033: ARRAY
17034: PUSH
17035: LD_INT 0
17037: PUSH
17038: LD_INT 8
17040: PUSH
17041: LD_INT 9
17043: PUSH
17044: LD_INT 10
17046: PUSH
17047: LD_INT 11
17049: PUSH
17050: LD_INT 12
17052: PUSH
17053: LD_INT 13
17055: PUSH
17056: LD_INT 16
17058: PUSH
17059: LD_INT 17
17061: PUSH
17062: LD_INT 18
17064: PUSH
17065: LD_INT 19
17067: PUSH
17068: LD_INT 20
17070: PUSH
17071: LD_INT 21
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: IN
17089: NOT
17090: OR
17091: PUSH
17092: LD_VAR 0 8
17096: PUSH
17097: LD_INT 5
17099: ARRAY
17100: NOT
17101: OR
17102: PUSH
17103: LD_VAR 0 8
17107: PUSH
17108: LD_INT 6
17110: ARRAY
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 7
17120: PUSH
17121: LD_INT 9
17123: PUSH
17124: LD_INT 10
17126: PUSH
17127: LD_INT 11
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: IN
17138: NOT
17139: OR
17140: IFFALSE 17146
// exit ;
17142: POP
17143: POP
17144: GO 17229
// end ;
17146: GO 16817
17148: POP
17149: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17150: LD_VAR 0 9
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_VAR 0 4
17164: PPUSH
17165: LD_INT 20
17167: PPUSH
17168: CALL 9152 0 4
17172: PUSH
17173: LD_INT 4
17175: ARRAY
17176: IFFALSE 17180
// exit ;
17178: GO 17229
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17180: LD_VAR 0 2
17184: PUSH
17185: LD_INT 29
17187: PUSH
17188: LD_INT 30
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: IN
17195: PUSH
17196: LD_VAR 0 3
17200: PPUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_VAR 0 9
17210: PPUSH
17211: CALL_OW 440
17215: NOT
17216: AND
17217: IFFALSE 17221
// exit ;
17219: GO 17229
// result := true ;
17221: LD_ADDR_VAR 0 6
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// end ;
17229: LD_VAR 0 6
17233: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17234: LD_INT 0
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
17277: PPUSH
17278: PPUSH
17279: PPUSH
17280: PPUSH
17281: PPUSH
17282: PPUSH
17283: PPUSH
17284: PPUSH
17285: PPUSH
17286: PPUSH
17287: PPUSH
17288: PPUSH
17289: PPUSH
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
// result = [ ] ;
17294: LD_ADDR_VAR 0 7
17298: PUSH
17299: EMPTY
17300: ST_TO_ADDR
// temp_list = [ ] ;
17301: LD_ADDR_VAR 0 9
17305: PUSH
17306: EMPTY
17307: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17308: LD_VAR 0 4
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: LD_INT 4
17327: PUSH
17328: LD_INT 5
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: IN
17339: NOT
17340: PUSH
17341: LD_VAR 0 1
17345: PUSH
17346: LD_INT 0
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: IN
17356: PUSH
17357: LD_VAR 0 5
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: IN
17376: NOT
17377: AND
17378: OR
17379: IFFALSE 17383
// exit ;
17381: GO 35774
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17383: LD_VAR 0 1
17387: PUSH
17388: LD_INT 6
17390: PUSH
17391: LD_INT 7
17393: PUSH
17394: LD_INT 8
17396: PUSH
17397: LD_INT 13
17399: PUSH
17400: LD_INT 12
17402: PUSH
17403: LD_INT 15
17405: PUSH
17406: LD_INT 11
17408: PUSH
17409: LD_INT 14
17411: PUSH
17412: LD_INT 10
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: IN
17426: IFFALSE 17436
// btype = b_lab ;
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: LD_INT 6
17435: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17436: LD_VAR 0 6
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: IN
17455: NOT
17456: PUSH
17457: LD_VAR 0 1
17461: PUSH
17462: LD_INT 0
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 3
17473: PUSH
17474: LD_INT 6
17476: PUSH
17477: LD_INT 36
17479: PUSH
17480: LD_INT 4
17482: PUSH
17483: LD_INT 5
17485: PUSH
17486: LD_INT 31
17488: PUSH
17489: LD_INT 32
17491: PUSH
17492: LD_INT 33
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: IN
17508: NOT
17509: PUSH
17510: LD_VAR 0 6
17514: PUSH
17515: LD_INT 1
17517: EQUAL
17518: AND
17519: OR
17520: PUSH
17521: LD_VAR 0 1
17525: PUSH
17526: LD_INT 2
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: IN
17536: NOT
17537: PUSH
17538: LD_VAR 0 6
17542: PUSH
17543: LD_INT 2
17545: EQUAL
17546: AND
17547: OR
17548: IFFALSE 17558
// mode = 0 ;
17550: LD_ADDR_VAR 0 6
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// case mode of 0 :
17558: LD_VAR 0 6
17562: PUSH
17563: LD_INT 0
17565: DOUBLE
17566: EQUAL
17567: IFTRUE 17571
17569: GO 29024
17571: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17572: LD_ADDR_VAR 0 11
17576: PUSH
17577: LD_INT 0
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: NEG
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: NEG
17642: PUSH
17643: LD_INT 1
17645: NEG
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 1
17653: NEG
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: LD_INT 1
17679: NEG
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 0
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 1
17707: NEG
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 0
17728: PUSH
17729: LD_INT 3
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 1
17738: NEG
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17765: LD_ADDR_VAR 0 12
17769: PUSH
17770: LD_INT 0
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 0
17782: PUSH
17783: LD_INT 1
17785: NEG
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 1
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 0
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 1
17823: NEG
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 1
17834: NEG
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 0
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 1
17877: NEG
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 2
17899: NEG
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 2
17911: NEG
17912: PUSH
17913: LD_INT 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 3
17922: NEG
17923: PUSH
17924: LD_INT 0
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 3
17933: NEG
17934: PUSH
17935: LD_INT 1
17937: NEG
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17961: LD_ADDR_VAR 0 13
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: LD_INT 1
17981: NEG
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: LD_INT 0
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 0
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: LD_INT 1
18034: NEG
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: NEG
18043: PUSH
18044: LD_INT 2
18046: NEG
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: LD_INT 2
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 2
18084: NEG
18085: PUSH
18086: LD_INT 1
18088: NEG
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 2
18096: NEG
18097: PUSH
18098: LD_INT 2
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: LD_INT 3
18112: NEG
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 3
18120: NEG
18121: PUSH
18122: LD_INT 2
18124: NEG
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 3
18132: NEG
18133: PUSH
18134: LD_INT 3
18136: NEG
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18160: LD_ADDR_VAR 0 14
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 1
18180: NEG
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 0
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 0
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 1
18229: NEG
18230: PUSH
18231: LD_INT 1
18233: NEG
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 1
18241: NEG
18242: PUSH
18243: LD_INT 2
18245: NEG
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: LD_INT 1
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PUSH
18308: LD_INT 3
18310: NEG
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 3
18321: NEG
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PUSH
18330: LD_INT 2
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18356: LD_ADDR_VAR 0 15
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 1
18376: NEG
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 1
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 1
18414: NEG
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 1
18425: NEG
18426: PUSH
18427: LD_INT 1
18429: NEG
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 1
18468: NEG
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 2
18479: NEG
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 2
18490: NEG
18491: PUSH
18492: LD_INT 1
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18549: LD_ADDR_VAR 0 16
18553: PUSH
18554: LD_INT 0
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 1
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 0
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: LD_INT 1
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: LD_INT 0
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: NEG
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: NEG
18685: PUSH
18686: LD_INT 2
18688: NEG
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 3
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 3
18706: PUSH
18707: LD_INT 3
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18742: LD_ADDR_VAR 0 17
18746: PUSH
18747: LD_INT 0
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 1
18762: NEG
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: LD_INT 1
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 1
18800: NEG
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 1
18811: NEG
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 2
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 0
18835: PUSH
18836: LD_INT 2
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: LD_INT 1
18849: NEG
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: LD_INT 2
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 2
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 1
18907: NEG
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 2
18918: NEG
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 2
18929: NEG
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 2
18941: NEG
18942: PUSH
18943: LD_INT 2
18945: NEG
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18972: LD_ADDR_VAR 0 18
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 1
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 1
19053: NEG
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: LD_INT 1
19079: NEG
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 2
19148: NEG
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: NEG
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: NEG
19172: PUSH
19173: LD_INT 2
19175: NEG
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19202: LD_ADDR_VAR 0 19
19206: PUSH
19207: LD_INT 0
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 1
19260: NEG
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 2
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 0
19295: PUSH
19296: LD_INT 2
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 2
19327: PUSH
19328: LD_INT 1
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: LD_INT 2
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: LD_INT 0
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: PUSH
19387: LD_INT 2
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: NEG
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: LD_INT 2
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19432: LD_ADDR_VAR 0 20
19436: PUSH
19437: LD_INT 0
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 1
19513: NEG
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 1
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 0
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 1
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: LD_INT 2
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: LD_INT 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 1
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 0
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: LD_INT 1
19623: NEG
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: NEG
19632: PUSH
19633: LD_INT 2
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19662: LD_ADDR_VAR 0 21
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: LD_INT 1
19682: NEG
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: NEG
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 1
19743: NEG
19744: PUSH
19745: LD_INT 2
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 0
19755: PUSH
19756: LD_INT 2
19758: NEG
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 1
19766: PUSH
19767: LD_INT 1
19769: NEG
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 0
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 2
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 2
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: NEG
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: NEG
19850: PUSH
19851: LD_INT 1
19853: NEG
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: LD_INT 2
19861: NEG
19862: PUSH
19863: LD_INT 2
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19892: LD_ADDR_VAR 0 22
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 1
19950: NEG
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 1
19961: NEG
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: NEG
19974: PUSH
19975: LD_INT 2
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: LD_INT 2
19988: NEG
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 1
19996: PUSH
19997: LD_INT 1
19999: NEG
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 2
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: NEG
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 2
20079: NEG
20080: PUSH
20081: LD_INT 1
20083: NEG
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 2
20091: NEG
20092: PUSH
20093: LD_INT 2
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20122: LD_ADDR_VAR 0 23
20126: PUSH
20127: LD_INT 0
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: LD_INT 1
20142: NEG
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 1
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 1
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 1
20191: NEG
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: PUSH
20201: LD_INT 1
20203: NEG
20204: PUSH
20205: LD_INT 2
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 0
20215: PUSH
20216: LD_INT 2
20218: NEG
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 0
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 2
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: PUSH
20268: LD_INT 2
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: NEG
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: NEG
20310: PUSH
20311: LD_INT 1
20313: NEG
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: LD_INT 2
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: NEG
20334: PUSH
20335: LD_INT 3
20337: NEG
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: LD_INT 1
20345: NEG
20346: PUSH
20347: LD_INT 3
20349: NEG
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 2
20368: PUSH
20369: LD_INT 1
20371: NEG
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20402: LD_ADDR_VAR 0 24
20406: PUSH
20407: LD_INT 0
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: LD_INT 1
20422: NEG
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: LD_INT 1
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: LD_INT 0
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 1
20471: NEG
20472: PUSH
20473: LD_INT 1
20475: NEG
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: LD_INT 2
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 2
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 0
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 1
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 1
20547: PUSH
20548: LD_INT 2
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 1
20567: NEG
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 2
20578: NEG
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: NEG
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 2
20601: NEG
20602: PUSH
20603: LD_INT 2
20605: NEG
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: LD_INT 1
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 3
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20678: LD_ADDR_VAR 0 25
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 2
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 3
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: LD_INT 3
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20952: LD_ADDR_VAR 0 26
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 0
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: LD_INT 1
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: NEG
21034: PUSH
21035: LD_INT 2
21037: NEG
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 0
21045: PUSH
21046: LD_INT 2
21048: NEG
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 1
21059: NEG
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 2
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 1
21117: NEG
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: NEG
21140: PUSH
21141: LD_INT 1
21143: NEG
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: LD_INT 2
21155: NEG
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 2
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 3
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: NEG
21195: PUSH
21196: LD_INT 1
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21228: LD_ADDR_VAR 0 27
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 1
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 0
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 1
21297: NEG
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 1
21309: NEG
21310: PUSH
21311: LD_INT 2
21313: NEG
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: LD_INT 2
21324: NEG
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: LD_INT 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: NEG
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 2
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: NEG
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 3
21461: NEG
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: PUSH
21471: LD_INT 3
21473: NEG
21474: PUSH
21475: LD_INT 2
21477: NEG
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21508: LD_ADDR_VAR 0 28
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 3
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: LD_INT 3
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 3
21743: NEG
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: NEG
21756: PUSH
21757: LD_INT 2
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21790: LD_ADDR_VAR 0 29
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 1
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: LD_INT 1
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 2
21886: NEG
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: LD_INT 1
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 2
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 2
21915: PUSH
21916: LD_INT 1
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PUSH
21926: LD_INT 2
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 0
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: NEG
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: NEG
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: NEG
21981: PUSH
21982: LD_INT 3
21984: NEG
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: LD_INT 1
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 3
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 1
22023: NEG
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 3
22034: NEG
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22069: LD_ADDR_VAR 0 30
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 0
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: NEG
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 2
22246: NEG
22247: PUSH
22248: LD_INT 1
22250: NEG
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: NEG
22259: PUSH
22260: LD_INT 3
22262: NEG
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 2
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 3
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 2
22301: NEG
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 3
22312: NEG
22313: PUSH
22314: LD_INT 1
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22347: LD_ADDR_VAR 0 31
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 0
22364: PUSH
22365: LD_INT 1
22367: NEG
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 1
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: LD_INT 1
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: NEG
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 1
22428: NEG
22429: PUSH
22430: LD_INT 2
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 1
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 1
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: NEG
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 3
22590: NEG
22591: PUSH
22592: LD_INT 2
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22625: LD_ADDR_VAR 0 32
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: NEG
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 3
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22903: LD_ADDR_VAR 0 33
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 0
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 2
23081: NEG
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 2
23093: NEG
23094: PUSH
23095: LD_INT 3
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 1
23108: NEG
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: LD_INT 3
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 3
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 3
23147: NEG
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23182: LD_ADDR_VAR 0 34
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: NEG
23328: PUSH
23329: LD_INT 1
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: NEG
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 2
23361: NEG
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: LD_INT 3
23377: NEG
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 1
23385: PUSH
23386: LD_INT 2
23388: NEG
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PUSH
23394: LD_INT 3
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: LD_INT 3
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 3
23427: NEG
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23462: LD_ADDR_VAR 0 35
23466: PUSH
23467: LD_INT 0
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 0
23479: PUSH
23480: LD_INT 1
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 1
23531: NEG
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 2
23553: NEG
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23574: LD_ADDR_VAR 0 36
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 1
23602: PUSH
23603: LD_INT 0
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 0
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: LD_INT 0
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 1
23643: NEG
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 1
23667: PUSH
23668: LD_INT 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23686: LD_ADDR_VAR 0 37
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: LD_INT 1
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 1
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 1
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23798: LD_ADDR_VAR 0 38
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 1
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 0
23846: PUSH
23847: LD_INT 1
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 1
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 2
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23910: LD_ADDR_VAR 0 39
23914: PUSH
23915: LD_INT 0
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 0
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: NEG
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 2
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24022: LD_ADDR_VAR 0 40
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 0
24039: PUSH
24040: LD_INT 1
24042: NEG
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: LD_INT 0
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 1
24060: PUSH
24061: LD_INT 1
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 0
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: NEG
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24134: LD_ADDR_VAR 0 41
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 0
24151: PUSH
24152: LD_INT 1
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 1
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 0
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 2
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: LD_INT 2
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 2
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: LD_INT 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: NEG
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 3
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 3
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 3
24408: NEG
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: NEG
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 3
24431: NEG
24432: PUSH
24433: LD_INT 2
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 3
24443: NEG
24444: PUSH
24445: LD_INT 3
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24484: LD_ADDR_VAR 0 42
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 2
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: LD_INT 2
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 0
24629: PUSH
24630: LD_INT 2
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 3
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 3
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 0
24698: PUSH
24699: LD_INT 3
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: PUSH
24721: LD_INT 2
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: PUSH
24731: LD_INT 3
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: LD_INT 2
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 3
24781: NEG
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 3
24793: NEG
24794: PUSH
24795: LD_INT 3
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24834: LD_ADDR_VAR 0 43
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 1
24903: NEG
24904: PUSH
24905: LD_INT 1
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 1
24915: NEG
24916: PUSH
24917: LD_INT 2
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 2
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: LD_INT 2
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: LD_INT 1
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PUSH
24998: LD_INT 2
25000: NEG
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 2
25011: NEG
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: LD_INT 3
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 3
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 2
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 2
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 3
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: LD_INT 3
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 3
25130: NEG
25131: PUSH
25132: LD_INT 0
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 3
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: NEG
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25182: LD_ADDR_VAR 0 44
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 1
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: LD_INT 2
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 2
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 3
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 3
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: LD_INT 3
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 3
25456: NEG
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: NEG
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 3
25479: NEG
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: NEG
25492: PUSH
25493: LD_INT 3
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25532: LD_ADDR_VAR 0 45
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 0
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 2
25628: NEG
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 2
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 2
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: LD_INT 3
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: NEG
25735: PUSH
25736: LD_INT 3
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 0
25746: PUSH
25747: LD_INT 3
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 3
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 2
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 3
25829: NEG
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25882: LD_ADDR_VAR 0 46
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: LD_INT 2
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 0
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: LD_INT 1
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 0
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 1
26063: NEG
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 3
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 3
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: LD_INT 2
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 3
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 3
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 3
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: NEG
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 3
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26230: LD_ADDR_VAR 0 47
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 0
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 0
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: LD_INT 2
26315: NEG
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: LD_INT 1
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 2
26345: NEG
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26381: LD_ADDR_VAR 0 48
26385: PUSH
26386: LD_INT 0
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: LD_INT 2
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 1
26485: PUSH
26486: LD_INT 1
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 2
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26528: LD_ADDR_VAR 0 49
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: LD_INT 1
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 1
26586: NEG
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: LD_INT 1
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26672: LD_ADDR_VAR 0 50
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 2
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26816: LD_ADDR_VAR 0 51
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 1
26874: NEG
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: NEG
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 1
26897: PUSH
26898: LD_INT 2
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 2
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26963: LD_ADDR_VAR 0 52
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27114: LD_ADDR_VAR 0 53
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 0
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: PUSH
27153: LD_INT 1
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: LD_INT 2
27199: NEG
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 2
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 2
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: LD_INT 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27344: LD_ADDR_VAR 0 54
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 0
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: LD_INT 2
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: LD_INT 0
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 2
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 1
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: NEG
27510: PUSH
27511: LD_INT 1
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: LD_INT 0
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 2
27543: NEG
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27574: LD_ADDR_VAR 0 55
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: NEG
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: NEG
27656: PUSH
27657: LD_INT 2
27659: NEG
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 2
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27804: LD_ADDR_VAR 0 56
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 1
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 1
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: LD_INT 2
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: PUSH
27950: LD_INT 2
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 1
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 2
28003: NEG
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28034: LD_ADDR_VAR 0 57
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 2
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 2
28221: NEG
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 2
28233: NEG
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28264: LD_ADDR_VAR 0 58
28268: PUSH
28269: LD_INT 0
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 1
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: NEG
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: NEG
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 2
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: LD_INT 2
28360: NEG
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28494: LD_ADDR_VAR 0 59
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 0
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: NEG
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28582: LD_ADDR_VAR 0 60
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: LD_INT 1
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: NEG
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28670: LD_ADDR_VAR 0 61
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28758: LD_ADDR_VAR 0 62
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28846: LD_ADDR_VAR 0 63
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 1
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28934: LD_ADDR_VAR 0 64
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: ST_TO_ADDR
// end ; 1 :
29022: GO 34919
29024: LD_INT 1
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 31655
29032: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29033: LD_ADDR_VAR 0 11
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 3
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 3
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 2
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29077: LD_ADDR_VAR 0 12
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29118: LD_ADDR_VAR 0 13
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 3
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 2
29145: PUSH
29146: LD_INT 3
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29158: LD_ADDR_VAR 0 14
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 2
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29199: LD_ADDR_VAR 0 15
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29243: LD_ADDR_VAR 0 16
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 3
29262: NEG
29263: PUSH
29264: LD_INT 2
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 3
29274: NEG
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29289: LD_ADDR_VAR 0 17
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29333: LD_ADDR_VAR 0 18
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 3
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29374: LD_ADDR_VAR 0 19
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: LD_INT 2
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: LD_INT 3
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 2
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29414: LD_ADDR_VAR 0 20
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29455: LD_ADDR_VAR 0 21
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: NEG
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: LIST
29498: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29499: LD_ADDR_VAR 0 22
29503: PUSH
29504: LD_INT 2
29506: NEG
29507: PUSH
29508: LD_INT 3
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: LIST
29544: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29545: LD_ADDR_VAR 0 23
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 4
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 3
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29589: LD_ADDR_VAR 0 24
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 4
29617: PUSH
29618: LD_INT 1
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29630: LD_ADDR_VAR 0 25
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: LD_INT 3
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: LD_INT 3
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 4
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29670: LD_ADDR_VAR 0 26
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 4
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 3
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29711: LD_ADDR_VAR 0 27
29715: PUSH
29716: LD_INT 3
29718: NEG
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: NEG
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 4
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29755: LD_ADDR_VAR 0 28
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: NEG
29775: PUSH
29776: LD_INT 4
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 4
29786: NEG
29787: PUSH
29788: LD_INT 3
29790: NEG
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: LIST
29800: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29801: LD_ADDR_VAR 0 29
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 3
29812: NEG
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 0
29820: PUSH
29821: LD_INT 3
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: NEG
29843: PUSH
29844: LD_INT 4
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 4
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: LD_INT 5
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: LD_INT 5
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 4
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 1
29910: NEG
29911: PUSH
29912: LD_INT 6
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 6
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: LD_INT 5
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29956: LD_ADDR_VAR 0 30
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 3
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 4
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 4
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 5
30036: PUSH
30037: LD_INT 0
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 5
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 5
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 6
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 6
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30099: LD_ADDR_VAR 0 31
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 3
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 4
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 4
30146: PUSH
30147: LD_INT 4
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: LD_INT 4
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: LD_INT 4
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 4
30186: PUSH
30187: LD_INT 5
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 6
30196: PUSH
30197: LD_INT 5
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 6
30206: PUSH
30207: LD_INT 6
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 5
30216: PUSH
30217: LD_INT 6
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30238: LD_ADDR_VAR 0 32
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: LD_INT 4
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 0
30286: PUSH
30287: LD_INT 4
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 1
30296: NEG
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: LD_INT 5
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: LD_INT 5
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 1
30327: NEG
30328: PUSH
30329: LD_INT 4
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: LD_INT 6
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: LD_INT 6
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 5
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30381: LD_ADDR_VAR 0 33
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: LD_INT 0
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 3
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 4
30433: NEG
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 4
30444: NEG
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 4
30456: NEG
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 5
30467: NEG
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 5
30478: NEG
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 5
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 6
30501: NEG
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 6
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30536: LD_ADDR_VAR 0 34
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 3
30555: NEG
30556: PUSH
30557: LD_INT 2
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 3
30567: NEG
30568: PUSH
30569: LD_INT 3
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 3
30579: NEG
30580: PUSH
30581: LD_INT 4
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 4
30591: NEG
30592: PUSH
30593: LD_INT 3
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 4
30603: NEG
30604: PUSH
30605: LD_INT 4
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 4
30615: NEG
30616: PUSH
30617: LD_INT 5
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 5
30627: NEG
30628: PUSH
30629: LD_INT 4
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 5
30639: NEG
30640: PUSH
30641: LD_INT 5
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 5
30651: NEG
30652: PUSH
30653: LD_INT 6
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 6
30663: NEG
30664: PUSH
30665: LD_INT 5
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 6
30675: NEG
30676: PUSH
30677: LD_INT 6
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30699: LD_ADDR_VAR 0 41
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: LD_INT 3
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 2
30732: NEG
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30743: LD_ADDR_VAR 0 42
30747: PUSH
30748: LD_INT 2
30750: PUSH
30751: LD_INT 0
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30784: LD_ADDR_VAR 0 43
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 3
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30824: LD_ADDR_VAR 0 44
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30865: LD_ADDR_VAR 0 45
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30909: LD_ADDR_VAR 0 46
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30955: LD_ADDR_VAR 0 47
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 3
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30988: LD_ADDR_VAR 0 48
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 2
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31019: LD_ADDR_VAR 0 49
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 3
31036: PUSH
31037: LD_INT 2
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31048: LD_ADDR_VAR 0 50
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31077: LD_ADDR_VAR 0 51
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: LD_INT 2
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31108: LD_ADDR_VAR 0 52
31112: PUSH
31113: LD_INT 3
31115: NEG
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31141: LD_ADDR_VAR 0 53
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: LD_INT 3
31152: NEG
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 3
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31185: LD_ADDR_VAR 0 54
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 3
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31226: LD_ADDR_VAR 0 55
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: LD_INT 3
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: LIST
31265: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31266: LD_ADDR_VAR 0 56
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31307: LD_ADDR_VAR 0 57
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 3
31336: NEG
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31351: LD_ADDR_VAR 0 58
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 2
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 3
31382: NEG
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31397: LD_ADDR_VAR 0 59
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 2
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: LIST
31440: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31441: LD_ADDR_VAR 0 60
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31482: LD_ADDR_VAR 0 61
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31522: LD_ADDR_VAR 0 62
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 2
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: LIST
31562: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31563: LD_ADDR_VAR 0 63
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 2
31581: NEG
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 1
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31607: LD_ADDR_VAR 0 64
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: NEG
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: ST_TO_ADDR
// end ; 2 :
31653: GO 34919
31655: LD_INT 2
31657: DOUBLE
31658: EQUAL
31659: IFTRUE 31663
31661: GO 34918
31663: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31664: LD_ADDR_VAR 0 29
31668: PUSH
31669: LD_INT 4
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 5
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 5
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 4
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 2
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 5
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 4
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: LD_INT 4
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: LD_INT 3
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 4
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 4
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 4
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: LD_INT 3
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 4
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 5
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 5
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 4
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: NEG
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 3
31947: NEG
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 3
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: NEG
31971: PUSH
31972: LD_INT 0
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: NEG
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 4
32003: NEG
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 4
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 4
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 4
32049: NEG
32050: PUSH
32051: LD_INT 4
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 4
32061: NEG
32062: PUSH
32063: LD_INT 5
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: LD_INT 4
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: LD_INT 3
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 4
32097: NEG
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 5
32109: NEG
32110: PUSH
32111: LD_INT 4
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 5
32121: NEG
32122: PUSH
32123: LD_INT 5
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 3
32133: NEG
32134: PUSH
32135: LD_INT 5
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 5
32145: NEG
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32202: LD_ADDR_VAR 0 30
32206: PUSH
32207: LD_INT 4
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 5
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 5
32239: PUSH
32240: LD_INT 5
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 4
32249: PUSH
32250: LD_INT 5
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 3
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 3
32269: PUSH
32270: LD_INT 3
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 5
32279: PUSH
32280: LD_INT 3
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 3
32289: PUSH
32290: LD_INT 5
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 3
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 4
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 0
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 4
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 4
32403: NEG
32404: PUSH
32405: LD_INT 1
32407: NEG
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 3
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: NEG
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 5
32448: NEG
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 5
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 5
32471: NEG
32472: PUSH
32473: LD_INT 2
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 3
32483: NEG
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: NEG
32495: PUSH
32496: LD_INT 3
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 3
32506: NEG
32507: PUSH
32508: LD_INT 4
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: NEG
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 4
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 4
32566: NEG
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 4
32590: NEG
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 4
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 5
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 4
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 3
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 3
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: LD_INT 4
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 5
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 5
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32749: LD_ADDR_VAR 0 31
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: PUSH
32777: LD_INT 4
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 5
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 4
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 5
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 2
32872: NEG
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: NEG
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 4
32905: NEG
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 4
32916: NEG
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 4
32928: NEG
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: NEG
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 4
32963: NEG
32964: PUSH
32965: LD_INT 5
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: NEG
32976: PUSH
32977: LD_INT 4
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 3
32987: NEG
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 4
32999: NEG
33000: PUSH
33001: LD_INT 3
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 5
33011: NEG
33012: PUSH
33013: LD_INT 4
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 5
33023: NEG
33024: PUSH
33025: LD_INT 5
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 5
33047: NEG
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 3
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 4
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: NEG
33150: PUSH
33151: LD_INT 4
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 4
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 4
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 5
33182: PUSH
33183: LD_INT 0
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 5
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 4
33202: PUSH
33203: LD_INT 1
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: LD_INT 0
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 3
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33299: LD_ADDR_VAR 0 32
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 4
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 3
33329: NEG
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 3
33340: NEG
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 4
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 5
33362: NEG
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 5
33373: NEG
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 5
33385: NEG
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 4
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: LD_INT 2
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: NEG
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 4
33468: NEG
33469: PUSH
33470: LD_INT 3
33472: NEG
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 4
33480: NEG
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 4
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: NEG
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 4
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 5
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 3
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 3
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 4
33575: NEG
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 5
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 3
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 5
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 4
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 4
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 4
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 4
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 3
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: LD_INT 4
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 5
33741: PUSH
33742: LD_INT 5
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 4
33751: PUSH
33752: LD_INT 5
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 3
33761: PUSH
33762: LD_INT 4
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: LD_INT 3
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 3
33791: PUSH
33792: LD_INT 5
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33846: LD_ADDR_VAR 0 33
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: LD_INT 4
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: LD_INT 5
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 3
33877: NEG
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: NEG
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 4
33901: NEG
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 5
33913: NEG
33914: PUSH
33915: LD_INT 4
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 5
33925: NEG
33926: PUSH
33927: LD_INT 5
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 3
33937: NEG
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 5
33949: NEG
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 3
33964: NEG
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 4
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: LD_INT 3
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 3
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 4
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 4
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 4
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 4
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 5
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 5
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 5
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 4
34176: PUSH
34177: LD_INT 3
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 4
34186: PUSH
34187: LD_INT 4
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 2
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 4
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 4
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 5
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 4
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: LD_INT 5
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34384: LD_ADDR_VAR 0 34
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 4
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 5
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 3
34438: NEG
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 4
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 5
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 5
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 4
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 2
34568: NEG
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 4
34586: PUSH
34587: LD_INT 4
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 4
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: LD_INT 4
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: LD_INT 5
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 5
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 4
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: PUSH
34647: LD_INT 3
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 5
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 3
34666: PUSH
34667: LD_INT 5
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: LD_INT 3
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 4
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 0
34716: PUSH
34717: LD_INT 4
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 3
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 4
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 4
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 4
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 3
34792: NEG
34793: PUSH
34794: LD_INT 0
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 4
34814: NEG
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: NEG
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 5
34836: NEG
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 5
34848: NEG
34849: PUSH
34850: LD_INT 2
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 3
34860: NEG
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// end ; end ;
34916: GO 34919
34918: POP
// case btype of b_depot , b_warehouse :
34919: LD_VAR 0 1
34923: PUSH
34924: LD_INT 0
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34938
34930: LD_INT 1
34932: DOUBLE
34933: EQUAL
34934: IFTRUE 34938
34936: GO 35139
34938: POP
// case nation of nation_american :
34939: LD_VAR 0 5
34943: PUSH
34944: LD_INT 1
34946: DOUBLE
34947: EQUAL
34948: IFTRUE 34952
34950: GO 35008
34952: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34953: LD_ADDR_VAR 0 9
34957: PUSH
34958: LD_VAR 0 11
34962: PUSH
34963: LD_VAR 0 12
34967: PUSH
34968: LD_VAR 0 13
34972: PUSH
34973: LD_VAR 0 14
34977: PUSH
34978: LD_VAR 0 15
34982: PUSH
34983: LD_VAR 0 16
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: PUSH
34996: LD_VAR 0 4
35000: PUSH
35001: LD_INT 1
35003: PLUS
35004: ARRAY
35005: ST_TO_ADDR
35006: GO 35137
35008: LD_INT 2
35010: DOUBLE
35011: EQUAL
35012: IFTRUE 35016
35014: GO 35072
35016: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35017: LD_ADDR_VAR 0 9
35021: PUSH
35022: LD_VAR 0 17
35026: PUSH
35027: LD_VAR 0 18
35031: PUSH
35032: LD_VAR 0 19
35036: PUSH
35037: LD_VAR 0 20
35041: PUSH
35042: LD_VAR 0 21
35046: PUSH
35047: LD_VAR 0 22
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: PUSH
35060: LD_VAR 0 4
35064: PUSH
35065: LD_INT 1
35067: PLUS
35068: ARRAY
35069: ST_TO_ADDR
35070: GO 35137
35072: LD_INT 3
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35136
35080: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35081: LD_ADDR_VAR 0 9
35085: PUSH
35086: LD_VAR 0 23
35090: PUSH
35091: LD_VAR 0 24
35095: PUSH
35096: LD_VAR 0 25
35100: PUSH
35101: LD_VAR 0 26
35105: PUSH
35106: LD_VAR 0 27
35110: PUSH
35111: LD_VAR 0 28
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: PUSH
35124: LD_VAR 0 4
35128: PUSH
35129: LD_INT 1
35131: PLUS
35132: ARRAY
35133: ST_TO_ADDR
35134: GO 35137
35136: POP
35137: GO 35692
35139: LD_INT 2
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35153
35145: LD_INT 3
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35153
35151: GO 35209
35153: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35154: LD_ADDR_VAR 0 9
35158: PUSH
35159: LD_VAR 0 29
35163: PUSH
35164: LD_VAR 0 30
35168: PUSH
35169: LD_VAR 0 31
35173: PUSH
35174: LD_VAR 0 32
35178: PUSH
35179: LD_VAR 0 33
35183: PUSH
35184: LD_VAR 0 34
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: PUSH
35197: LD_VAR 0 4
35201: PUSH
35202: LD_INT 1
35204: PLUS
35205: ARRAY
35206: ST_TO_ADDR
35207: GO 35692
35209: LD_INT 16
35211: DOUBLE
35212: EQUAL
35213: IFTRUE 35271
35215: LD_INT 17
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35271
35221: LD_INT 18
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35271
35227: LD_INT 19
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35271
35233: LD_INT 22
35235: DOUBLE
35236: EQUAL
35237: IFTRUE 35271
35239: LD_INT 20
35241: DOUBLE
35242: EQUAL
35243: IFTRUE 35271
35245: LD_INT 21
35247: DOUBLE
35248: EQUAL
35249: IFTRUE 35271
35251: LD_INT 23
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35271
35257: LD_INT 24
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35271
35263: LD_INT 25
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35327
35271: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35272: LD_ADDR_VAR 0 9
35276: PUSH
35277: LD_VAR 0 35
35281: PUSH
35282: LD_VAR 0 36
35286: PUSH
35287: LD_VAR 0 37
35291: PUSH
35292: LD_VAR 0 38
35296: PUSH
35297: LD_VAR 0 39
35301: PUSH
35302: LD_VAR 0 40
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: PUSH
35315: LD_VAR 0 4
35319: PUSH
35320: LD_INT 1
35322: PLUS
35323: ARRAY
35324: ST_TO_ADDR
35325: GO 35692
35327: LD_INT 6
35329: DOUBLE
35330: EQUAL
35331: IFTRUE 35383
35333: LD_INT 7
35335: DOUBLE
35336: EQUAL
35337: IFTRUE 35383
35339: LD_INT 8
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35383
35345: LD_INT 13
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35383
35351: LD_INT 12
35353: DOUBLE
35354: EQUAL
35355: IFTRUE 35383
35357: LD_INT 15
35359: DOUBLE
35360: EQUAL
35361: IFTRUE 35383
35363: LD_INT 11
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35383
35369: LD_INT 14
35371: DOUBLE
35372: EQUAL
35373: IFTRUE 35383
35375: LD_INT 10
35377: DOUBLE
35378: EQUAL
35379: IFTRUE 35383
35381: GO 35439
35383: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35384: LD_ADDR_VAR 0 9
35388: PUSH
35389: LD_VAR 0 41
35393: PUSH
35394: LD_VAR 0 42
35398: PUSH
35399: LD_VAR 0 43
35403: PUSH
35404: LD_VAR 0 44
35408: PUSH
35409: LD_VAR 0 45
35413: PUSH
35414: LD_VAR 0 46
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: PUSH
35427: LD_VAR 0 4
35431: PUSH
35432: LD_INT 1
35434: PLUS
35435: ARRAY
35436: ST_TO_ADDR
35437: GO 35692
35439: LD_INT 36
35441: DOUBLE
35442: EQUAL
35443: IFTRUE 35447
35445: GO 35503
35447: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_VAR 0 47
35457: PUSH
35458: LD_VAR 0 48
35462: PUSH
35463: LD_VAR 0 49
35467: PUSH
35468: LD_VAR 0 50
35472: PUSH
35473: LD_VAR 0 51
35477: PUSH
35478: LD_VAR 0 52
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: PUSH
35491: LD_VAR 0 4
35495: PUSH
35496: LD_INT 1
35498: PLUS
35499: ARRAY
35500: ST_TO_ADDR
35501: GO 35692
35503: LD_INT 4
35505: DOUBLE
35506: EQUAL
35507: IFTRUE 35529
35509: LD_INT 5
35511: DOUBLE
35512: EQUAL
35513: IFTRUE 35529
35515: LD_INT 34
35517: DOUBLE
35518: EQUAL
35519: IFTRUE 35529
35521: LD_INT 37
35523: DOUBLE
35524: EQUAL
35525: IFTRUE 35529
35527: GO 35585
35529: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35530: LD_ADDR_VAR 0 9
35534: PUSH
35535: LD_VAR 0 53
35539: PUSH
35540: LD_VAR 0 54
35544: PUSH
35545: LD_VAR 0 55
35549: PUSH
35550: LD_VAR 0 56
35554: PUSH
35555: LD_VAR 0 57
35559: PUSH
35560: LD_VAR 0 58
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: PUSH
35573: LD_VAR 0 4
35577: PUSH
35578: LD_INT 1
35580: PLUS
35581: ARRAY
35582: ST_TO_ADDR
35583: GO 35692
35585: LD_INT 31
35587: DOUBLE
35588: EQUAL
35589: IFTRUE 35635
35591: LD_INT 32
35593: DOUBLE
35594: EQUAL
35595: IFTRUE 35635
35597: LD_INT 33
35599: DOUBLE
35600: EQUAL
35601: IFTRUE 35635
35603: LD_INT 27
35605: DOUBLE
35606: EQUAL
35607: IFTRUE 35635
35609: LD_INT 26
35611: DOUBLE
35612: EQUAL
35613: IFTRUE 35635
35615: LD_INT 28
35617: DOUBLE
35618: EQUAL
35619: IFTRUE 35635
35621: LD_INT 29
35623: DOUBLE
35624: EQUAL
35625: IFTRUE 35635
35627: LD_INT 30
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35691
35635: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_VAR 0 59
35645: PUSH
35646: LD_VAR 0 60
35650: PUSH
35651: LD_VAR 0 61
35655: PUSH
35656: LD_VAR 0 62
35660: PUSH
35661: LD_VAR 0 63
35665: PUSH
35666: LD_VAR 0 64
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: PUSH
35679: LD_VAR 0 4
35683: PUSH
35684: LD_INT 1
35686: PLUS
35687: ARRAY
35688: ST_TO_ADDR
35689: GO 35692
35691: POP
// temp_list2 = [ ] ;
35692: LD_ADDR_VAR 0 10
35696: PUSH
35697: EMPTY
35698: ST_TO_ADDR
// for i in temp_list do
35699: LD_ADDR_VAR 0 8
35703: PUSH
35704: LD_VAR 0 9
35708: PUSH
35709: FOR_IN
35710: IFFALSE 35762
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35712: LD_ADDR_VAR 0 10
35716: PUSH
35717: LD_VAR 0 10
35721: PUSH
35722: LD_VAR 0 8
35726: PUSH
35727: LD_INT 1
35729: ARRAY
35730: PUSH
35731: LD_VAR 0 2
35735: PLUS
35736: PUSH
35737: LD_VAR 0 8
35741: PUSH
35742: LD_INT 2
35744: ARRAY
35745: PUSH
35746: LD_VAR 0 3
35750: PLUS
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: EMPTY
35757: LIST
35758: ADD
35759: ST_TO_ADDR
35760: GO 35709
35762: POP
35763: POP
// result = temp_list2 ;
35764: LD_ADDR_VAR 0 7
35768: PUSH
35769: LD_VAR 0 10
35773: ST_TO_ADDR
// end ;
35774: LD_VAR 0 7
35778: RET
// export function EnemyInRange ( unit , dist ) ; begin
35779: LD_INT 0
35781: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35782: LD_ADDR_VAR 0 3
35786: PUSH
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL_OW 255
35796: PPUSH
35797: LD_VAR 0 1
35801: PPUSH
35802: CALL_OW 250
35806: PPUSH
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 251
35816: PPUSH
35817: LD_VAR 0 2
35821: PPUSH
35822: CALL 9152 0 4
35826: PUSH
35827: LD_INT 4
35829: ARRAY
35830: ST_TO_ADDR
// end ;
35831: LD_VAR 0 3
35835: RET
// export function PlayerSeeMe ( unit ) ; begin
35836: LD_INT 0
35838: PPUSH
// result := See ( your_side , unit ) ;
35839: LD_ADDR_VAR 0 2
35843: PUSH
35844: LD_OWVAR 2
35848: PPUSH
35849: LD_VAR 0 1
35853: PPUSH
35854: CALL_OW 292
35858: ST_TO_ADDR
// end ;
35859: LD_VAR 0 2
35863: RET
// export function ReverseDir ( unit ) ; begin
35864: LD_INT 0
35866: PPUSH
// if not unit then
35867: LD_VAR 0 1
35871: NOT
35872: IFFALSE 35876
// exit ;
35874: GO 35899
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35876: LD_ADDR_VAR 0 2
35880: PUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 254
35890: PUSH
35891: LD_INT 3
35893: PLUS
35894: PUSH
35895: LD_INT 6
35897: MOD
35898: ST_TO_ADDR
// end ;
35899: LD_VAR 0 2
35903: RET
// export function ReverseArray ( array ) ; var i ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
// if not array then
35908: LD_VAR 0 1
35912: NOT
35913: IFFALSE 35917
// exit ;
35915: GO 35972
// result := [ ] ;
35917: LD_ADDR_VAR 0 2
35921: PUSH
35922: EMPTY
35923: ST_TO_ADDR
// for i := array downto 1 do
35924: LD_ADDR_VAR 0 3
35928: PUSH
35929: DOUBLE
35930: LD_VAR 0 1
35934: INC
35935: ST_TO_ADDR
35936: LD_INT 1
35938: PUSH
35939: FOR_DOWNTO
35940: IFFALSE 35970
// result := Join ( result , array [ i ] ) ;
35942: LD_ADDR_VAR 0 2
35946: PUSH
35947: LD_VAR 0 2
35951: PPUSH
35952: LD_VAR 0 1
35956: PUSH
35957: LD_VAR 0 3
35961: ARRAY
35962: PPUSH
35963: CALL 40617 0 2
35967: ST_TO_ADDR
35968: GO 35939
35970: POP
35971: POP
// end ;
35972: LD_VAR 0 2
35976: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35977: LD_INT 0
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
35984: PPUSH
// if not unit or not hexes then
35985: LD_VAR 0 1
35989: NOT
35990: PUSH
35991: LD_VAR 0 2
35995: NOT
35996: OR
35997: IFFALSE 36001
// exit ;
35999: GO 36124
// dist := 9999 ;
36001: LD_ADDR_VAR 0 5
36005: PUSH
36006: LD_INT 9999
36008: ST_TO_ADDR
// for i = 1 to hexes do
36009: LD_ADDR_VAR 0 4
36013: PUSH
36014: DOUBLE
36015: LD_INT 1
36017: DEC
36018: ST_TO_ADDR
36019: LD_VAR 0 2
36023: PUSH
36024: FOR_TO
36025: IFFALSE 36112
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36027: LD_ADDR_VAR 0 6
36031: PUSH
36032: LD_VAR 0 1
36036: PPUSH
36037: LD_VAR 0 2
36041: PUSH
36042: LD_VAR 0 4
36046: ARRAY
36047: PUSH
36048: LD_INT 1
36050: ARRAY
36051: PPUSH
36052: LD_VAR 0 2
36056: PUSH
36057: LD_VAR 0 4
36061: ARRAY
36062: PUSH
36063: LD_INT 2
36065: ARRAY
36066: PPUSH
36067: CALL_OW 297
36071: ST_TO_ADDR
// if tdist < dist then
36072: LD_VAR 0 6
36076: PUSH
36077: LD_VAR 0 5
36081: LESS
36082: IFFALSE 36110
// begin hex := hexes [ i ] ;
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 2
36093: PUSH
36094: LD_VAR 0 4
36098: ARRAY
36099: ST_TO_ADDR
// dist := tdist ;
36100: LD_ADDR_VAR 0 5
36104: PUSH
36105: LD_VAR 0 6
36109: ST_TO_ADDR
// end ; end ;
36110: GO 36024
36112: POP
36113: POP
// result := hex ;
36114: LD_ADDR_VAR 0 3
36118: PUSH
36119: LD_VAR 0 8
36123: ST_TO_ADDR
// end ;
36124: LD_VAR 0 3
36128: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36129: LD_INT 0
36131: PPUSH
36132: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36133: LD_VAR 0 1
36137: NOT
36138: PUSH
36139: LD_VAR 0 1
36143: PUSH
36144: LD_INT 21
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 23
36156: PUSH
36157: LD_INT 2
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PPUSH
36168: CALL_OW 69
36172: IN
36173: NOT
36174: OR
36175: IFFALSE 36179
// exit ;
36177: GO 36226
// for i = 1 to 3 do
36179: LD_ADDR_VAR 0 3
36183: PUSH
36184: DOUBLE
36185: LD_INT 1
36187: DEC
36188: ST_TO_ADDR
36189: LD_INT 3
36191: PUSH
36192: FOR_TO
36193: IFFALSE 36224
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 250
36204: PPUSH
36205: LD_VAR 0 1
36209: PPUSH
36210: CALL_OW 251
36214: PPUSH
36215: LD_INT 1
36217: PPUSH
36218: CALL_OW 453
36222: GO 36192
36224: POP
36225: POP
// end ;
36226: LD_VAR 0 2
36230: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36231: LD_INT 0
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
// if not unit or not enemy_unit then
36239: LD_VAR 0 1
36243: NOT
36244: PUSH
36245: LD_VAR 0 2
36249: NOT
36250: OR
36251: IFFALSE 36255
// exit ;
36253: GO 36722
// if GetLives ( i ) < 250 then
36255: LD_VAR 0 4
36259: PPUSH
36260: CALL_OW 256
36264: PUSH
36265: LD_INT 250
36267: LESS
36268: IFFALSE 36281
// begin ComAutodestruct ( i ) ;
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL 36129 0 1
// exit ;
36279: GO 36722
// end ; x := GetX ( enemy_unit ) ;
36281: LD_ADDR_VAR 0 7
36285: PUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: CALL_OW 250
36295: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36296: LD_ADDR_VAR 0 8
36300: PUSH
36301: LD_VAR 0 2
36305: PPUSH
36306: CALL_OW 251
36310: ST_TO_ADDR
// if not x or not y then
36311: LD_VAR 0 7
36315: NOT
36316: PUSH
36317: LD_VAR 0 8
36321: NOT
36322: OR
36323: IFFALSE 36327
// exit ;
36325: GO 36722
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36327: LD_ADDR_VAR 0 6
36331: PUSH
36332: LD_VAR 0 7
36336: PPUSH
36337: LD_INT 0
36339: PPUSH
36340: LD_INT 4
36342: PPUSH
36343: CALL_OW 272
36347: PUSH
36348: LD_VAR 0 8
36352: PPUSH
36353: LD_INT 0
36355: PPUSH
36356: LD_INT 4
36358: PPUSH
36359: CALL_OW 273
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_VAR 0 7
36372: PPUSH
36373: LD_INT 1
36375: PPUSH
36376: LD_INT 4
36378: PPUSH
36379: CALL_OW 272
36383: PUSH
36384: LD_VAR 0 8
36388: PPUSH
36389: LD_INT 1
36391: PPUSH
36392: LD_INT 4
36394: PPUSH
36395: CALL_OW 273
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_VAR 0 7
36408: PPUSH
36409: LD_INT 2
36411: PPUSH
36412: LD_INT 4
36414: PPUSH
36415: CALL_OW 272
36419: PUSH
36420: LD_VAR 0 8
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: LD_INT 4
36430: PPUSH
36431: CALL_OW 273
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_VAR 0 7
36444: PPUSH
36445: LD_INT 3
36447: PPUSH
36448: LD_INT 4
36450: PPUSH
36451: CALL_OW 272
36455: PUSH
36456: LD_VAR 0 8
36460: PPUSH
36461: LD_INT 3
36463: PPUSH
36464: LD_INT 4
36466: PPUSH
36467: CALL_OW 273
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_VAR 0 7
36480: PPUSH
36481: LD_INT 4
36483: PPUSH
36484: LD_INT 4
36486: PPUSH
36487: CALL_OW 272
36491: PUSH
36492: LD_VAR 0 8
36496: PPUSH
36497: LD_INT 4
36499: PPUSH
36500: LD_INT 4
36502: PPUSH
36503: CALL_OW 273
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_VAR 0 7
36516: PPUSH
36517: LD_INT 5
36519: PPUSH
36520: LD_INT 4
36522: PPUSH
36523: CALL_OW 272
36527: PUSH
36528: LD_VAR 0 8
36532: PPUSH
36533: LD_INT 5
36535: PPUSH
36536: LD_INT 4
36538: PPUSH
36539: CALL_OW 273
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: ST_TO_ADDR
// for i = tmp downto 1 do
36556: LD_ADDR_VAR 0 4
36560: PUSH
36561: DOUBLE
36562: LD_VAR 0 6
36566: INC
36567: ST_TO_ADDR
36568: LD_INT 1
36570: PUSH
36571: FOR_DOWNTO
36572: IFFALSE 36673
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36574: LD_VAR 0 6
36578: PUSH
36579: LD_VAR 0 4
36583: ARRAY
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: LD_VAR 0 6
36593: PUSH
36594: LD_VAR 0 4
36598: ARRAY
36599: PUSH
36600: LD_INT 2
36602: ARRAY
36603: PPUSH
36604: CALL_OW 488
36608: NOT
36609: PUSH
36610: LD_VAR 0 6
36614: PUSH
36615: LD_VAR 0 4
36619: ARRAY
36620: PUSH
36621: LD_INT 1
36623: ARRAY
36624: PPUSH
36625: LD_VAR 0 6
36629: PUSH
36630: LD_VAR 0 4
36634: ARRAY
36635: PUSH
36636: LD_INT 2
36638: ARRAY
36639: PPUSH
36640: CALL_OW 428
36644: PUSH
36645: LD_INT 0
36647: NONEQUAL
36648: OR
36649: IFFALSE 36671
// tmp := Delete ( tmp , i ) ;
36651: LD_ADDR_VAR 0 6
36655: PUSH
36656: LD_VAR 0 6
36660: PPUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: CALL_OW 3
36670: ST_TO_ADDR
36671: GO 36571
36673: POP
36674: POP
// j := GetClosestHex ( unit , tmp ) ;
36675: LD_ADDR_VAR 0 5
36679: PUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: CALL 35977 0 2
36694: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36695: LD_VAR 0 1
36699: PPUSH
36700: LD_VAR 0 5
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PPUSH
36709: LD_VAR 0 5
36713: PUSH
36714: LD_INT 2
36716: ARRAY
36717: PPUSH
36718: CALL_OW 111
// end ;
36722: LD_VAR 0 3
36726: RET
// export function PrepareApemanSoldier ( ) ; begin
36727: LD_INT 0
36729: PPUSH
// uc_nation := 0 ;
36730: LD_ADDR_OWVAR 21
36734: PUSH
36735: LD_INT 0
36737: ST_TO_ADDR
// hc_sex := sex_male ;
36738: LD_ADDR_OWVAR 27
36742: PUSH
36743: LD_INT 1
36745: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36746: LD_ADDR_OWVAR 28
36750: PUSH
36751: LD_INT 15
36753: ST_TO_ADDR
// hc_gallery :=  ;
36754: LD_ADDR_OWVAR 33
36758: PUSH
36759: LD_STRING 
36761: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36762: LD_ADDR_OWVAR 31
36766: PUSH
36767: LD_INT 0
36769: PPUSH
36770: LD_INT 3
36772: PPUSH
36773: CALL_OW 12
36777: PUSH
36778: LD_INT 0
36780: PPUSH
36781: LD_INT 3
36783: PPUSH
36784: CALL_OW 12
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// end ;
36801: LD_VAR 0 1
36805: RET
// export function PrepareApemanEngineer ( ) ; begin
36806: LD_INT 0
36808: PPUSH
// uc_nation := 0 ;
36809: LD_ADDR_OWVAR 21
36813: PUSH
36814: LD_INT 0
36816: ST_TO_ADDR
// hc_sex := sex_male ;
36817: LD_ADDR_OWVAR 27
36821: PUSH
36822: LD_INT 1
36824: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36825: LD_ADDR_OWVAR 28
36829: PUSH
36830: LD_INT 16
36832: ST_TO_ADDR
// hc_gallery :=  ;
36833: LD_ADDR_OWVAR 33
36837: PUSH
36838: LD_STRING 
36840: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36841: LD_ADDR_OWVAR 31
36845: PUSH
36846: LD_INT 0
36848: PPUSH
36849: LD_INT 3
36851: PPUSH
36852: CALL_OW 12
36856: PUSH
36857: LD_INT 0
36859: PPUSH
36860: LD_INT 3
36862: PPUSH
36863: CALL_OW 12
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// end ;
36880: LD_VAR 0 1
36884: RET
// export function PrepareApeman ( agressivity ) ; begin
36885: LD_INT 0
36887: PPUSH
// uc_side := 0 ;
36888: LD_ADDR_OWVAR 20
36892: PUSH
36893: LD_INT 0
36895: ST_TO_ADDR
// uc_nation := 0 ;
36896: LD_ADDR_OWVAR 21
36900: PUSH
36901: LD_INT 0
36903: ST_TO_ADDR
// hc_sex := sex_male ;
36904: LD_ADDR_OWVAR 27
36908: PUSH
36909: LD_INT 1
36911: ST_TO_ADDR
// hc_class := class_apeman ;
36912: LD_ADDR_OWVAR 28
36916: PUSH
36917: LD_INT 12
36919: ST_TO_ADDR
// hc_gallery :=  ;
36920: LD_ADDR_OWVAR 33
36924: PUSH
36925: LD_STRING 
36927: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36928: LD_ADDR_OWVAR 35
36932: PUSH
36933: LD_VAR 0 1
36937: NEG
36938: PPUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 12
36948: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36949: LD_ADDR_OWVAR 31
36953: PUSH
36954: LD_INT 0
36956: PPUSH
36957: LD_INT 3
36959: PPUSH
36960: CALL_OW 12
36964: PUSH
36965: LD_INT 0
36967: PPUSH
36968: LD_INT 3
36970: PPUSH
36971: CALL_OW 12
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// end ;
36988: LD_VAR 0 2
36992: RET
// export function PrepareTiger ( agressivity ) ; begin
36993: LD_INT 0
36995: PPUSH
// uc_side := 0 ;
36996: LD_ADDR_OWVAR 20
37000: PUSH
37001: LD_INT 0
37003: ST_TO_ADDR
// uc_nation := 0 ;
37004: LD_ADDR_OWVAR 21
37008: PUSH
37009: LD_INT 0
37011: ST_TO_ADDR
// hc_class := class_tiger ;
37012: LD_ADDR_OWVAR 28
37016: PUSH
37017: LD_INT 14
37019: ST_TO_ADDR
// hc_gallery :=  ;
37020: LD_ADDR_OWVAR 33
37024: PUSH
37025: LD_STRING 
37027: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37028: LD_ADDR_OWVAR 35
37032: PUSH
37033: LD_VAR 0 1
37037: NEG
37038: PPUSH
37039: LD_VAR 0 1
37043: PPUSH
37044: CALL_OW 12
37048: ST_TO_ADDR
// end ;
37049: LD_VAR 0 2
37053: RET
// export function PrepareEnchidna ( ) ; begin
37054: LD_INT 0
37056: PPUSH
// uc_side := 0 ;
37057: LD_ADDR_OWVAR 20
37061: PUSH
37062: LD_INT 0
37064: ST_TO_ADDR
// uc_nation := 0 ;
37065: LD_ADDR_OWVAR 21
37069: PUSH
37070: LD_INT 0
37072: ST_TO_ADDR
// hc_class := class_baggie ;
37073: LD_ADDR_OWVAR 28
37077: PUSH
37078: LD_INT 13
37080: ST_TO_ADDR
// hc_gallery :=  ;
37081: LD_ADDR_OWVAR 33
37085: PUSH
37086: LD_STRING 
37088: ST_TO_ADDR
// end ;
37089: LD_VAR 0 1
37093: RET
// export function PrepareFrog ( ) ; begin
37094: LD_INT 0
37096: PPUSH
// uc_side := 0 ;
37097: LD_ADDR_OWVAR 20
37101: PUSH
37102: LD_INT 0
37104: ST_TO_ADDR
// uc_nation := 0 ;
37105: LD_ADDR_OWVAR 21
37109: PUSH
37110: LD_INT 0
37112: ST_TO_ADDR
// hc_class := class_frog ;
37113: LD_ADDR_OWVAR 28
37117: PUSH
37118: LD_INT 19
37120: ST_TO_ADDR
// hc_gallery :=  ;
37121: LD_ADDR_OWVAR 33
37125: PUSH
37126: LD_STRING 
37128: ST_TO_ADDR
// end ;
37129: LD_VAR 0 1
37133: RET
// export function PrepareFish ( ) ; begin
37134: LD_INT 0
37136: PPUSH
// uc_side := 0 ;
37137: LD_ADDR_OWVAR 20
37141: PUSH
37142: LD_INT 0
37144: ST_TO_ADDR
// uc_nation := 0 ;
37145: LD_ADDR_OWVAR 21
37149: PUSH
37150: LD_INT 0
37152: ST_TO_ADDR
// hc_class := class_fish ;
37153: LD_ADDR_OWVAR 28
37157: PUSH
37158: LD_INT 20
37160: ST_TO_ADDR
// hc_gallery :=  ;
37161: LD_ADDR_OWVAR 33
37165: PUSH
37166: LD_STRING 
37168: ST_TO_ADDR
// end ;
37169: LD_VAR 0 1
37173: RET
// export function PrepareBird ( ) ; begin
37174: LD_INT 0
37176: PPUSH
// uc_side := 0 ;
37177: LD_ADDR_OWVAR 20
37181: PUSH
37182: LD_INT 0
37184: ST_TO_ADDR
// uc_nation := 0 ;
37185: LD_ADDR_OWVAR 21
37189: PUSH
37190: LD_INT 0
37192: ST_TO_ADDR
// hc_class := class_phororhacos ;
37193: LD_ADDR_OWVAR 28
37197: PUSH
37198: LD_INT 18
37200: ST_TO_ADDR
// hc_gallery :=  ;
37201: LD_ADDR_OWVAR 33
37205: PUSH
37206: LD_STRING 
37208: ST_TO_ADDR
// end ;
37209: LD_VAR 0 1
37213: RET
// export function PrepareHorse ( ) ; begin
37214: LD_INT 0
37216: PPUSH
// uc_side := 0 ;
37217: LD_ADDR_OWVAR 20
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// uc_nation := 0 ;
37225: LD_ADDR_OWVAR 21
37229: PUSH
37230: LD_INT 0
37232: ST_TO_ADDR
// hc_class := class_horse ;
37233: LD_ADDR_OWVAR 28
37237: PUSH
37238: LD_INT 21
37240: ST_TO_ADDR
// hc_gallery :=  ;
37241: LD_ADDR_OWVAR 33
37245: PUSH
37246: LD_STRING 
37248: ST_TO_ADDR
// end ;
37249: LD_VAR 0 1
37253: RET
// export function PrepareMastodont ( ) ; begin
37254: LD_INT 0
37256: PPUSH
// uc_side := 0 ;
37257: LD_ADDR_OWVAR 20
37261: PUSH
37262: LD_INT 0
37264: ST_TO_ADDR
// uc_nation := 0 ;
37265: LD_ADDR_OWVAR 21
37269: PUSH
37270: LD_INT 0
37272: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37273: LD_ADDR_OWVAR 37
37277: PUSH
37278: LD_INT 31
37280: ST_TO_ADDR
// vc_control := control_rider ;
37281: LD_ADDR_OWVAR 38
37285: PUSH
37286: LD_INT 4
37288: ST_TO_ADDR
// end ;
37289: LD_VAR 0 1
37293: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37294: LD_INT 0
37296: PPUSH
37297: PPUSH
37298: PPUSH
// uc_side = 0 ;
37299: LD_ADDR_OWVAR 20
37303: PUSH
37304: LD_INT 0
37306: ST_TO_ADDR
// uc_nation = 0 ;
37307: LD_ADDR_OWVAR 21
37311: PUSH
37312: LD_INT 0
37314: ST_TO_ADDR
// InitHc_All ( ) ;
37315: CALL_OW 584
// InitVc ;
37319: CALL_OW 20
// if mastodonts then
37323: LD_VAR 0 6
37327: IFFALSE 37394
// for i = 1 to mastodonts do
37329: LD_ADDR_VAR 0 11
37333: PUSH
37334: DOUBLE
37335: LD_INT 1
37337: DEC
37338: ST_TO_ADDR
37339: LD_VAR 0 6
37343: PUSH
37344: FOR_TO
37345: IFFALSE 37392
// begin vc_chassis := 31 ;
37347: LD_ADDR_OWVAR 37
37351: PUSH
37352: LD_INT 31
37354: ST_TO_ADDR
// vc_control := control_rider ;
37355: LD_ADDR_OWVAR 38
37359: PUSH
37360: LD_INT 4
37362: ST_TO_ADDR
// animal := CreateVehicle ;
37363: LD_ADDR_VAR 0 12
37367: PUSH
37368: CALL_OW 45
37372: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37373: LD_VAR 0 12
37377: PPUSH
37378: LD_VAR 0 8
37382: PPUSH
37383: LD_INT 0
37385: PPUSH
37386: CALL 39522 0 3
// end ;
37390: GO 37344
37392: POP
37393: POP
// if horses then
37394: LD_VAR 0 5
37398: IFFALSE 37465
// for i = 1 to horses do
37400: LD_ADDR_VAR 0 11
37404: PUSH
37405: DOUBLE
37406: LD_INT 1
37408: DEC
37409: ST_TO_ADDR
37410: LD_VAR 0 5
37414: PUSH
37415: FOR_TO
37416: IFFALSE 37463
// begin hc_class := 21 ;
37418: LD_ADDR_OWVAR 28
37422: PUSH
37423: LD_INT 21
37425: ST_TO_ADDR
// hc_gallery :=  ;
37426: LD_ADDR_OWVAR 33
37430: PUSH
37431: LD_STRING 
37433: ST_TO_ADDR
// animal := CreateHuman ;
37434: LD_ADDR_VAR 0 12
37438: PUSH
37439: CALL_OW 44
37443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37444: LD_VAR 0 12
37448: PPUSH
37449: LD_VAR 0 8
37453: PPUSH
37454: LD_INT 0
37456: PPUSH
37457: CALL 39522 0 3
// end ;
37461: GO 37415
37463: POP
37464: POP
// if birds then
37465: LD_VAR 0 1
37469: IFFALSE 37536
// for i = 1 to birds do
37471: LD_ADDR_VAR 0 11
37475: PUSH
37476: DOUBLE
37477: LD_INT 1
37479: DEC
37480: ST_TO_ADDR
37481: LD_VAR 0 1
37485: PUSH
37486: FOR_TO
37487: IFFALSE 37534
// begin hc_class := 18 ;
37489: LD_ADDR_OWVAR 28
37493: PUSH
37494: LD_INT 18
37496: ST_TO_ADDR
// hc_gallery =  ;
37497: LD_ADDR_OWVAR 33
37501: PUSH
37502: LD_STRING 
37504: ST_TO_ADDR
// animal := CreateHuman ;
37505: LD_ADDR_VAR 0 12
37509: PUSH
37510: CALL_OW 44
37514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37515: LD_VAR 0 12
37519: PPUSH
37520: LD_VAR 0 8
37524: PPUSH
37525: LD_INT 0
37527: PPUSH
37528: CALL 39522 0 3
// end ;
37532: GO 37486
37534: POP
37535: POP
// if tigers then
37536: LD_VAR 0 2
37540: IFFALSE 37624
// for i = 1 to tigers do
37542: LD_ADDR_VAR 0 11
37546: PUSH
37547: DOUBLE
37548: LD_INT 1
37550: DEC
37551: ST_TO_ADDR
37552: LD_VAR 0 2
37556: PUSH
37557: FOR_TO
37558: IFFALSE 37622
// begin hc_class = class_tiger ;
37560: LD_ADDR_OWVAR 28
37564: PUSH
37565: LD_INT 14
37567: ST_TO_ADDR
// hc_gallery =  ;
37568: LD_ADDR_OWVAR 33
37572: PUSH
37573: LD_STRING 
37575: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37576: LD_ADDR_OWVAR 35
37580: PUSH
37581: LD_INT 7
37583: NEG
37584: PPUSH
37585: LD_INT 7
37587: PPUSH
37588: CALL_OW 12
37592: ST_TO_ADDR
// animal := CreateHuman ;
37593: LD_ADDR_VAR 0 12
37597: PUSH
37598: CALL_OW 44
37602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37603: LD_VAR 0 12
37607: PPUSH
37608: LD_VAR 0 8
37612: PPUSH
37613: LD_INT 0
37615: PPUSH
37616: CALL 39522 0 3
// end ;
37620: GO 37557
37622: POP
37623: POP
// if apemans then
37624: LD_VAR 0 3
37628: IFFALSE 37751
// for i = 1 to apemans do
37630: LD_ADDR_VAR 0 11
37634: PUSH
37635: DOUBLE
37636: LD_INT 1
37638: DEC
37639: ST_TO_ADDR
37640: LD_VAR 0 3
37644: PUSH
37645: FOR_TO
37646: IFFALSE 37749
// begin hc_class = class_apeman ;
37648: LD_ADDR_OWVAR 28
37652: PUSH
37653: LD_INT 12
37655: ST_TO_ADDR
// hc_gallery =  ;
37656: LD_ADDR_OWVAR 33
37660: PUSH
37661: LD_STRING 
37663: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37664: LD_ADDR_OWVAR 35
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PPUSH
37673: LD_INT 2
37675: PPUSH
37676: CALL_OW 12
37680: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37681: LD_ADDR_OWVAR 31
37685: PUSH
37686: LD_INT 1
37688: PPUSH
37689: LD_INT 3
37691: PPUSH
37692: CALL_OW 12
37696: PUSH
37697: LD_INT 1
37699: PPUSH
37700: LD_INT 3
37702: PPUSH
37703: CALL_OW 12
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: ST_TO_ADDR
// animal := CreateHuman ;
37720: LD_ADDR_VAR 0 12
37724: PUSH
37725: CALL_OW 44
37729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37730: LD_VAR 0 12
37734: PPUSH
37735: LD_VAR 0 8
37739: PPUSH
37740: LD_INT 0
37742: PPUSH
37743: CALL 39522 0 3
// end ;
37747: GO 37645
37749: POP
37750: POP
// if enchidnas then
37751: LD_VAR 0 4
37755: IFFALSE 37822
// for i = 1 to enchidnas do
37757: LD_ADDR_VAR 0 11
37761: PUSH
37762: DOUBLE
37763: LD_INT 1
37765: DEC
37766: ST_TO_ADDR
37767: LD_VAR 0 4
37771: PUSH
37772: FOR_TO
37773: IFFALSE 37820
// begin hc_class = 13 ;
37775: LD_ADDR_OWVAR 28
37779: PUSH
37780: LD_INT 13
37782: ST_TO_ADDR
// hc_gallery =  ;
37783: LD_ADDR_OWVAR 33
37787: PUSH
37788: LD_STRING 
37790: ST_TO_ADDR
// animal := CreateHuman ;
37791: LD_ADDR_VAR 0 12
37795: PUSH
37796: CALL_OW 44
37800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37801: LD_VAR 0 12
37805: PPUSH
37806: LD_VAR 0 8
37810: PPUSH
37811: LD_INT 0
37813: PPUSH
37814: CALL 39522 0 3
// end ;
37818: GO 37772
37820: POP
37821: POP
// if fishes then
37822: LD_VAR 0 7
37826: IFFALSE 37893
// for i = 1 to fishes do
37828: LD_ADDR_VAR 0 11
37832: PUSH
37833: DOUBLE
37834: LD_INT 1
37836: DEC
37837: ST_TO_ADDR
37838: LD_VAR 0 7
37842: PUSH
37843: FOR_TO
37844: IFFALSE 37891
// begin hc_class = 20 ;
37846: LD_ADDR_OWVAR 28
37850: PUSH
37851: LD_INT 20
37853: ST_TO_ADDR
// hc_gallery =  ;
37854: LD_ADDR_OWVAR 33
37858: PUSH
37859: LD_STRING 
37861: ST_TO_ADDR
// animal := CreateHuman ;
37862: LD_ADDR_VAR 0 12
37866: PUSH
37867: CALL_OW 44
37871: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37872: LD_VAR 0 12
37876: PPUSH
37877: LD_VAR 0 9
37881: PPUSH
37882: LD_INT 0
37884: PPUSH
37885: CALL 39522 0 3
// end ;
37889: GO 37843
37891: POP
37892: POP
// end ;
37893: LD_VAR 0 10
37897: RET
// export function WantHeal ( sci , unit ) ; begin
37898: LD_INT 0
37900: PPUSH
// if GetTaskList ( sci ) > 0 then
37901: LD_VAR 0 1
37905: PPUSH
37906: CALL_OW 437
37910: PUSH
37911: LD_INT 0
37913: GREATER
37914: IFFALSE 37984
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37916: LD_VAR 0 1
37920: PPUSH
37921: CALL_OW 437
37925: PUSH
37926: LD_INT 1
37928: ARRAY
37929: PUSH
37930: LD_INT 1
37932: ARRAY
37933: PUSH
37934: LD_STRING l
37936: EQUAL
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 437
37947: PUSH
37948: LD_INT 1
37950: ARRAY
37951: PUSH
37952: LD_INT 4
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 2
37960: EQUAL
37961: AND
37962: IFFALSE 37974
// result := true else
37964: LD_ADDR_VAR 0 3
37968: PUSH
37969: LD_INT 1
37971: ST_TO_ADDR
37972: GO 37982
// result := false ;
37974: LD_ADDR_VAR 0 3
37978: PUSH
37979: LD_INT 0
37981: ST_TO_ADDR
// end else
37982: GO 37992
// result := false ;
37984: LD_ADDR_VAR 0 3
37988: PUSH
37989: LD_INT 0
37991: ST_TO_ADDR
// end ;
37992: LD_VAR 0 3
37996: RET
// export function HealTarget ( sci ) ; begin
37997: LD_INT 0
37999: PPUSH
// if not sci then
38000: LD_VAR 0 1
38004: NOT
38005: IFFALSE 38009
// exit ;
38007: GO 38074
// result := 0 ;
38009: LD_ADDR_VAR 0 2
38013: PUSH
38014: LD_INT 0
38016: ST_TO_ADDR
// if GetTaskList ( sci ) then
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 437
38026: IFFALSE 38074
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38028: LD_VAR 0 1
38032: PPUSH
38033: CALL_OW 437
38037: PUSH
38038: LD_INT 1
38040: ARRAY
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PUSH
38046: LD_STRING l
38048: EQUAL
38049: IFFALSE 38074
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38051: LD_ADDR_VAR 0 2
38055: PUSH
38056: LD_VAR 0 1
38060: PPUSH
38061: CALL_OW 437
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 4
38072: ARRAY
38073: ST_TO_ADDR
// end ;
38074: LD_VAR 0 2
38078: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38079: LD_INT 0
38081: PPUSH
38082: PPUSH
38083: PPUSH
38084: PPUSH
// if not base_units then
38085: LD_VAR 0 1
38089: NOT
38090: IFFALSE 38094
// exit ;
38092: GO 38181
// result := false ;
38094: LD_ADDR_VAR 0 2
38098: PUSH
38099: LD_INT 0
38101: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38102: LD_ADDR_VAR 0 5
38106: PUSH
38107: LD_VAR 0 1
38111: PPUSH
38112: LD_INT 21
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PPUSH
38122: CALL_OW 72
38126: ST_TO_ADDR
// if not tmp then
38127: LD_VAR 0 5
38131: NOT
38132: IFFALSE 38136
// exit ;
38134: GO 38181
// for i in tmp do
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_VAR 0 5
38145: PUSH
38146: FOR_IN
38147: IFFALSE 38179
// begin result := EnemyInRange ( i , 22 ) ;
38149: LD_ADDR_VAR 0 2
38153: PUSH
38154: LD_VAR 0 3
38158: PPUSH
38159: LD_INT 22
38161: PPUSH
38162: CALL 35779 0 2
38166: ST_TO_ADDR
// if result then
38167: LD_VAR 0 2
38171: IFFALSE 38177
// exit ;
38173: POP
38174: POP
38175: GO 38181
// end ;
38177: GO 38146
38179: POP
38180: POP
// end ;
38181: LD_VAR 0 2
38185: RET
// export function FilterByTag ( units , tag ) ; begin
38186: LD_INT 0
38188: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38189: LD_ADDR_VAR 0 3
38193: PUSH
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_INT 120
38201: PUSH
38202: LD_VAR 0 2
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PPUSH
38211: CALL_OW 72
38215: ST_TO_ADDR
// end ;
38216: LD_VAR 0 3
38220: RET
// export function IsDriver ( un ) ; begin
38221: LD_INT 0
38223: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38224: LD_ADDR_VAR 0 2
38228: PUSH
38229: LD_VAR 0 1
38233: PUSH
38234: LD_INT 55
38236: PUSH
38237: EMPTY
38238: LIST
38239: PPUSH
38240: CALL_OW 69
38244: IN
38245: ST_TO_ADDR
// end ;
38246: LD_VAR 0 2
38250: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38251: LD_INT 0
38253: PPUSH
38254: PPUSH
// list := [ ] ;
38255: LD_ADDR_VAR 0 5
38259: PUSH
38260: EMPTY
38261: ST_TO_ADDR
// case d of 0 :
38262: LD_VAR 0 3
38266: PUSH
38267: LD_INT 0
38269: DOUBLE
38270: EQUAL
38271: IFTRUE 38275
38273: GO 38408
38275: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38276: LD_ADDR_VAR 0 5
38280: PUSH
38281: LD_VAR 0 1
38285: PUSH
38286: LD_INT 4
38288: MINUS
38289: PUSH
38290: LD_VAR 0 2
38294: PUSH
38295: LD_INT 4
38297: MINUS
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_INT 3
38314: MINUS
38315: PUSH
38316: LD_VAR 0 2
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: LD_INT 4
38336: PLUS
38337: PUSH
38338: LD_VAR 0 2
38342: PUSH
38343: LD_INT 4
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: PUSH
38351: LD_VAR 0 1
38355: PUSH
38356: LD_INT 3
38358: PLUS
38359: PUSH
38360: LD_VAR 0 2
38364: PUSH
38365: LD_INT 3
38367: PLUS
38368: PUSH
38369: LD_INT 5
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: LIST
38376: PUSH
38377: LD_VAR 0 1
38381: PUSH
38382: LD_VAR 0 2
38386: PUSH
38387: LD_INT 4
38389: PLUS
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: ST_TO_ADDR
// end ; 1 :
38406: GO 39106
38408: LD_INT 1
38410: DOUBLE
38411: EQUAL
38412: IFTRUE 38416
38414: GO 38549
38416: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38417: LD_ADDR_VAR 0 5
38421: PUSH
38422: LD_VAR 0 1
38426: PUSH
38427: LD_VAR 0 2
38431: PUSH
38432: LD_INT 4
38434: MINUS
38435: PUSH
38436: LD_INT 3
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: LIST
38443: PUSH
38444: LD_VAR 0 1
38448: PUSH
38449: LD_INT 3
38451: MINUS
38452: PUSH
38453: LD_VAR 0 2
38457: PUSH
38458: LD_INT 3
38460: MINUS
38461: PUSH
38462: LD_INT 2
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: PUSH
38470: LD_VAR 0 1
38474: PUSH
38475: LD_INT 4
38477: MINUS
38478: PUSH
38479: LD_VAR 0 2
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: PUSH
38492: LD_VAR 0 1
38496: PUSH
38497: LD_VAR 0 2
38501: PUSH
38502: LD_INT 3
38504: PLUS
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: PUSH
38514: LD_VAR 0 1
38518: PUSH
38519: LD_INT 4
38521: PLUS
38522: PUSH
38523: LD_VAR 0 2
38527: PUSH
38528: LD_INT 4
38530: PLUS
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// end ; 2 :
38547: GO 39106
38549: LD_INT 2
38551: DOUBLE
38552: EQUAL
38553: IFTRUE 38557
38555: GO 38686
38557: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38558: LD_ADDR_VAR 0 5
38562: PUSH
38563: LD_VAR 0 1
38567: PUSH
38568: LD_VAR 0 2
38572: PUSH
38573: LD_INT 3
38575: MINUS
38576: PUSH
38577: LD_INT 3
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: PUSH
38585: LD_VAR 0 1
38589: PUSH
38590: LD_INT 4
38592: PLUS
38593: PUSH
38594: LD_VAR 0 2
38598: PUSH
38599: LD_INT 4
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: PUSH
38607: LD_VAR 0 1
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_INT 4
38619: PLUS
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: PUSH
38629: LD_VAR 0 1
38633: PUSH
38634: LD_INT 3
38636: MINUS
38637: PUSH
38638: LD_VAR 0 2
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: PUSH
38651: LD_VAR 0 1
38655: PUSH
38656: LD_INT 4
38658: MINUS
38659: PUSH
38660: LD_VAR 0 2
38664: PUSH
38665: LD_INT 4
38667: MINUS
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// end ; 3 :
38684: GO 39106
38686: LD_INT 3
38688: DOUBLE
38689: EQUAL
38690: IFTRUE 38694
38692: GO 38827
38694: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38695: LD_ADDR_VAR 0 5
38699: PUSH
38700: LD_VAR 0 1
38704: PUSH
38705: LD_INT 3
38707: PLUS
38708: PUSH
38709: LD_VAR 0 2
38713: PUSH
38714: LD_INT 4
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: PUSH
38722: LD_VAR 0 1
38726: PUSH
38727: LD_INT 4
38729: PLUS
38730: PUSH
38731: LD_VAR 0 2
38735: PUSH
38736: LD_INT 4
38738: PLUS
38739: PUSH
38740: LD_INT 5
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: LD_VAR 0 1
38752: PUSH
38753: LD_INT 4
38755: MINUS
38756: PUSH
38757: LD_VAR 0 2
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_VAR 0 2
38779: PUSH
38780: LD_INT 4
38782: MINUS
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: LD_VAR 0 1
38796: PUSH
38797: LD_INT 3
38799: MINUS
38800: PUSH
38801: LD_VAR 0 2
38805: PUSH
38806: LD_INT 3
38808: MINUS
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// end ; 4 :
38825: GO 39106
38827: LD_INT 4
38829: DOUBLE
38830: EQUAL
38831: IFTRUE 38835
38833: GO 38968
38835: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38836: LD_ADDR_VAR 0 5
38840: PUSH
38841: LD_VAR 0 1
38845: PUSH
38846: LD_VAR 0 2
38850: PUSH
38851: LD_INT 4
38853: PLUS
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_VAR 0 1
38867: PUSH
38868: LD_INT 3
38870: PLUS
38871: PUSH
38872: LD_VAR 0 2
38876: PUSH
38877: LD_INT 3
38879: PLUS
38880: PUSH
38881: LD_INT 5
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: PUSH
38889: LD_VAR 0 1
38893: PUSH
38894: LD_INT 4
38896: PLUS
38897: PUSH
38898: LD_VAR 0 2
38902: PUSH
38903: LD_INT 4
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: LD_VAR 0 1
38915: PUSH
38916: LD_VAR 0 2
38920: PUSH
38921: LD_INT 3
38923: MINUS
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: LD_INT 4
38940: MINUS
38941: PUSH
38942: LD_VAR 0 2
38946: PUSH
38947: LD_INT 4
38949: MINUS
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: ST_TO_ADDR
// end ; 5 :
38966: GO 39106
38968: LD_INT 5
38970: DOUBLE
38971: EQUAL
38972: IFTRUE 38976
38974: GO 39105
38976: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38977: LD_ADDR_VAR 0 5
38981: PUSH
38982: LD_VAR 0 1
38986: PUSH
38987: LD_INT 4
38989: MINUS
38990: PUSH
38991: LD_VAR 0 2
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: LD_VAR 0 1
39008: PUSH
39009: LD_VAR 0 2
39013: PUSH
39014: LD_INT 4
39016: MINUS
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: LIST
39025: PUSH
39026: LD_VAR 0 1
39030: PUSH
39031: LD_INT 4
39033: PLUS
39034: PUSH
39035: LD_VAR 0 2
39039: PUSH
39040: LD_INT 4
39042: PLUS
39043: PUSH
39044: LD_INT 5
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: LD_VAR 0 1
39056: PUSH
39057: LD_INT 3
39059: PLUS
39060: PUSH
39061: LD_VAR 0 2
39065: PUSH
39066: LD_INT 4
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: PUSH
39074: LD_VAR 0 1
39078: PUSH
39079: LD_VAR 0 2
39083: PUSH
39084: LD_INT 3
39086: PLUS
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// end ; end ;
39103: GO 39106
39105: POP
// result := list ;
39106: LD_ADDR_VAR 0 4
39110: PUSH
39111: LD_VAR 0 5
39115: ST_TO_ADDR
// end ;
39116: LD_VAR 0 4
39120: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39126: LD_VAR 0 1
39130: NOT
39131: PUSH
39132: LD_VAR 0 2
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: LD_INT 4
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: IN
39155: NOT
39156: OR
39157: IFFALSE 39161
// exit ;
39159: GO 39244
// tmp := [ ] ;
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: EMPTY
39167: ST_TO_ADDR
// for i in units do
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_VAR 0 1
39177: PUSH
39178: FOR_IN
39179: IFFALSE 39213
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_VAR 0 5
39190: PPUSH
39191: LD_VAR 0 4
39195: PPUSH
39196: LD_VAR 0 2
39200: PPUSH
39201: CALL_OW 259
39205: PPUSH
39206: CALL 40617 0 2
39210: ST_TO_ADDR
39211: GO 39178
39213: POP
39214: POP
// if not tmp then
39215: LD_VAR 0 5
39219: NOT
39220: IFFALSE 39224
// exit ;
39222: GO 39244
// result := SortListByListDesc ( units , tmp ) ;
39224: LD_ADDR_VAR 0 3
39228: PUSH
39229: LD_VAR 0 1
39233: PPUSH
39234: LD_VAR 0 5
39238: PPUSH
39239: CALL_OW 77
39243: ST_TO_ADDR
// end ;
39244: LD_VAR 0 3
39248: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39249: LD_INT 0
39251: PPUSH
39252: PPUSH
39253: PPUSH
// result := false ;
39254: LD_ADDR_VAR 0 3
39258: PUSH
39259: LD_INT 0
39261: ST_TO_ADDR
// if not building then
39262: LD_VAR 0 2
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39409
// x := GetX ( building ) ;
39271: LD_ADDR_VAR 0 4
39275: PUSH
39276: LD_VAR 0 2
39280: PPUSH
39281: CALL_OW 250
39285: ST_TO_ADDR
// y := GetY ( building ) ;
39286: LD_ADDR_VAR 0 5
39290: PUSH
39291: LD_VAR 0 2
39295: PPUSH
39296: CALL_OW 251
39300: ST_TO_ADDR
// if not x or not y then
39301: LD_VAR 0 4
39305: NOT
39306: PUSH
39307: LD_VAR 0 5
39311: NOT
39312: OR
39313: IFFALSE 39317
// exit ;
39315: GO 39409
// if GetTaskList ( unit ) then
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 437
39326: IFFALSE 39409
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39328: LD_STRING e
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: CALL_OW 437
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: EQUAL
39349: PUSH
39350: LD_VAR 0 4
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 437
39364: PUSH
39365: LD_INT 1
39367: ARRAY
39368: PUSH
39369: LD_INT 2
39371: ARRAY
39372: EQUAL
39373: AND
39374: PUSH
39375: LD_VAR 0 5
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 437
39389: PUSH
39390: LD_INT 1
39392: ARRAY
39393: PUSH
39394: LD_INT 3
39396: ARRAY
39397: EQUAL
39398: AND
39399: IFFALSE 39409
// result := true end ;
39401: LD_ADDR_VAR 0 3
39405: PUSH
39406: LD_INT 1
39408: ST_TO_ADDR
// end ;
39409: LD_VAR 0 3
39413: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39414: LD_INT 0
39416: PPUSH
// result := false ;
39417: LD_ADDR_VAR 0 4
39421: PUSH
39422: LD_INT 0
39424: ST_TO_ADDR
// if GetTaskList ( unit ) then
39425: LD_VAR 0 1
39429: PPUSH
39430: CALL_OW 437
39434: IFFALSE 39517
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39436: LD_STRING M
39438: PUSH
39439: LD_VAR 0 1
39443: PPUSH
39444: CALL_OW 437
39448: PUSH
39449: LD_INT 1
39451: ARRAY
39452: PUSH
39453: LD_INT 1
39455: ARRAY
39456: EQUAL
39457: PUSH
39458: LD_VAR 0 2
39462: PUSH
39463: LD_VAR 0 1
39467: PPUSH
39468: CALL_OW 437
39472: PUSH
39473: LD_INT 1
39475: ARRAY
39476: PUSH
39477: LD_INT 2
39479: ARRAY
39480: EQUAL
39481: AND
39482: PUSH
39483: LD_VAR 0 3
39487: PUSH
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 437
39497: PUSH
39498: LD_INT 1
39500: ARRAY
39501: PUSH
39502: LD_INT 3
39504: ARRAY
39505: EQUAL
39506: AND
39507: IFFALSE 39517
// result := true ;
39509: LD_ADDR_VAR 0 4
39513: PUSH
39514: LD_INT 1
39516: ST_TO_ADDR
// end ; end ;
39517: LD_VAR 0 4
39521: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39522: LD_INT 0
39524: PPUSH
39525: PPUSH
39526: PPUSH
39527: PPUSH
// if not unit or not area then
39528: LD_VAR 0 1
39532: NOT
39533: PUSH
39534: LD_VAR 0 2
39538: NOT
39539: OR
39540: IFFALSE 39544
// exit ;
39542: GO 39720
// tmp := AreaToList ( area , i ) ;
39544: LD_ADDR_VAR 0 6
39548: PUSH
39549: LD_VAR 0 2
39553: PPUSH
39554: LD_VAR 0 5
39558: PPUSH
39559: CALL_OW 517
39563: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39564: LD_ADDR_VAR 0 5
39568: PUSH
39569: DOUBLE
39570: LD_INT 1
39572: DEC
39573: ST_TO_ADDR
39574: LD_VAR 0 6
39578: PUSH
39579: LD_INT 1
39581: ARRAY
39582: PUSH
39583: FOR_TO
39584: IFFALSE 39718
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39586: LD_ADDR_VAR 0 7
39590: PUSH
39591: LD_VAR 0 6
39595: PUSH
39596: LD_INT 1
39598: ARRAY
39599: PUSH
39600: LD_VAR 0 5
39604: ARRAY
39605: PUSH
39606: LD_VAR 0 6
39610: PUSH
39611: LD_INT 2
39613: ARRAY
39614: PUSH
39615: LD_VAR 0 5
39619: ARRAY
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39625: LD_INT 92
39627: PUSH
39628: LD_VAR 0 7
39632: PUSH
39633: LD_INT 1
39635: ARRAY
39636: PUSH
39637: LD_VAR 0 7
39641: PUSH
39642: LD_INT 2
39644: ARRAY
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: PPUSH
39655: CALL_OW 69
39659: PUSH
39660: LD_INT 0
39662: EQUAL
39663: IFFALSE 39716
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39665: LD_VAR 0 1
39669: PPUSH
39670: LD_VAR 0 7
39674: PUSH
39675: LD_INT 1
39677: ARRAY
39678: PPUSH
39679: LD_VAR 0 7
39683: PUSH
39684: LD_INT 2
39686: ARRAY
39687: PPUSH
39688: LD_VAR 0 3
39692: PPUSH
39693: CALL_OW 48
// result := IsPlaced ( unit ) ;
39697: LD_ADDR_VAR 0 4
39701: PUSH
39702: LD_VAR 0 1
39706: PPUSH
39707: CALL_OW 305
39711: ST_TO_ADDR
// exit ;
39712: POP
39713: POP
39714: GO 39720
// end ; end ;
39716: GO 39583
39718: POP
39719: POP
// end ;
39720: LD_VAR 0 4
39724: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39725: LD_INT 0
39727: PPUSH
39728: PPUSH
39729: PPUSH
// if not side or side > 8 then
39730: LD_VAR 0 1
39734: NOT
39735: PUSH
39736: LD_VAR 0 1
39740: PUSH
39741: LD_INT 8
39743: GREATER
39744: OR
39745: IFFALSE 39749
// exit ;
39747: GO 39936
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39749: LD_ADDR_VAR 0 4
39753: PUSH
39754: LD_INT 22
39756: PUSH
39757: LD_VAR 0 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 21
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PPUSH
39780: CALL_OW 69
39784: ST_TO_ADDR
// if not tmp then
39785: LD_VAR 0 4
39789: NOT
39790: IFFALSE 39794
// exit ;
39792: GO 39936
// enable_addtolog := true ;
39794: LD_ADDR_OWVAR 81
39798: PUSH
39799: LD_INT 1
39801: ST_TO_ADDR
// AddToLog ( [ ) ;
39802: LD_STRING [
39804: PPUSH
39805: CALL_OW 561
// for i in tmp do
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_VAR 0 4
39818: PUSH
39819: FOR_IN
39820: IFFALSE 39927
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39822: LD_STRING [
39824: PUSH
39825: LD_VAR 0 3
39829: PPUSH
39830: CALL_OW 266
39834: STR
39835: PUSH
39836: LD_STRING , 
39838: STR
39839: PUSH
39840: LD_VAR 0 3
39844: PPUSH
39845: CALL_OW 250
39849: STR
39850: PUSH
39851: LD_STRING , 
39853: STR
39854: PUSH
39855: LD_VAR 0 3
39859: PPUSH
39860: CALL_OW 251
39864: STR
39865: PUSH
39866: LD_STRING , 
39868: STR
39869: PUSH
39870: LD_VAR 0 3
39874: PPUSH
39875: CALL_OW 254
39879: STR
39880: PUSH
39881: LD_STRING , 
39883: STR
39884: PUSH
39885: LD_VAR 0 3
39889: PPUSH
39890: LD_INT 1
39892: PPUSH
39893: CALL_OW 268
39897: STR
39898: PUSH
39899: LD_STRING , 
39901: STR
39902: PUSH
39903: LD_VAR 0 3
39907: PPUSH
39908: LD_INT 2
39910: PPUSH
39911: CALL_OW 268
39915: STR
39916: PUSH
39917: LD_STRING ],
39919: STR
39920: PPUSH
39921: CALL_OW 561
// end ;
39925: GO 39819
39927: POP
39928: POP
// AddToLog ( ]; ) ;
39929: LD_STRING ];
39931: PPUSH
39932: CALL_OW 561
// end ;
39936: LD_VAR 0 2
39940: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39941: LD_INT 0
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
// if not area or not rate or not max then
39948: LD_VAR 0 1
39952: NOT
39953: PUSH
39954: LD_VAR 0 2
39958: NOT
39959: OR
39960: PUSH
39961: LD_VAR 0 4
39965: NOT
39966: OR
39967: IFFALSE 39971
// exit ;
39969: GO 40160
// while 1 do
39971: LD_INT 1
39973: IFFALSE 40160
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39975: LD_ADDR_VAR 0 9
39979: PUSH
39980: LD_VAR 0 1
39984: PPUSH
39985: LD_INT 1
39987: PPUSH
39988: CALL_OW 287
39992: PUSH
39993: LD_INT 10
39995: MUL
39996: ST_TO_ADDR
// r := rate / 10 ;
39997: LD_ADDR_VAR 0 7
40001: PUSH
40002: LD_VAR 0 2
40006: PUSH
40007: LD_INT 10
40009: DIVREAL
40010: ST_TO_ADDR
// time := 1 1$00 ;
40011: LD_ADDR_VAR 0 8
40015: PUSH
40016: LD_INT 2100
40018: ST_TO_ADDR
// if amount < min then
40019: LD_VAR 0 9
40023: PUSH
40024: LD_VAR 0 3
40028: LESS
40029: IFFALSE 40047
// r := r * 2 else
40031: LD_ADDR_VAR 0 7
40035: PUSH
40036: LD_VAR 0 7
40040: PUSH
40041: LD_INT 2
40043: MUL
40044: ST_TO_ADDR
40045: GO 40073
// if amount > max then
40047: LD_VAR 0 9
40051: PUSH
40052: LD_VAR 0 4
40056: GREATER
40057: IFFALSE 40073
// r := r / 2 ;
40059: LD_ADDR_VAR 0 7
40063: PUSH
40064: LD_VAR 0 7
40068: PUSH
40069: LD_INT 2
40071: DIVREAL
40072: ST_TO_ADDR
// time := time / r ;
40073: LD_ADDR_VAR 0 8
40077: PUSH
40078: LD_VAR 0 8
40082: PUSH
40083: LD_VAR 0 7
40087: DIVREAL
40088: ST_TO_ADDR
// if time < 0 then
40089: LD_VAR 0 8
40093: PUSH
40094: LD_INT 0
40096: LESS
40097: IFFALSE 40114
// time := time * - 1 ;
40099: LD_ADDR_VAR 0 8
40103: PUSH
40104: LD_VAR 0 8
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: MUL
40113: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40114: LD_VAR 0 8
40118: PUSH
40119: LD_INT 35
40121: PPUSH
40122: LD_INT 875
40124: PPUSH
40125: CALL_OW 12
40129: PLUS
40130: PPUSH
40131: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40135: LD_INT 1
40137: PPUSH
40138: LD_INT 5
40140: PPUSH
40141: CALL_OW 12
40145: PPUSH
40146: LD_VAR 0 1
40150: PPUSH
40151: LD_INT 1
40153: PPUSH
40154: CALL_OW 55
// end ;
40158: GO 39971
// end ;
40160: LD_VAR 0 5
40164: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40165: LD_INT 0
40167: PPUSH
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
40174: PPUSH
// if not turrets or not factories then
40175: LD_VAR 0 1
40179: NOT
40180: PUSH
40181: LD_VAR 0 2
40185: NOT
40186: OR
40187: IFFALSE 40191
// exit ;
40189: GO 40498
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40191: LD_ADDR_VAR 0 10
40195: PUSH
40196: LD_INT 5
40198: PUSH
40199: LD_INT 6
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 4
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 24
40233: PUSH
40234: LD_INT 25
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 23
40243: PUSH
40244: LD_INT 27
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 42
40257: PUSH
40258: LD_INT 43
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 44
40267: PUSH
40268: LD_INT 46
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 45
40277: PUSH
40278: LD_INT 47
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// result := [ ] ;
40295: LD_ADDR_VAR 0 3
40299: PUSH
40300: EMPTY
40301: ST_TO_ADDR
// for i in turrets do
40302: LD_ADDR_VAR 0 4
40306: PUSH
40307: LD_VAR 0 1
40311: PUSH
40312: FOR_IN
40313: IFFALSE 40496
// begin nat := GetNation ( i ) ;
40315: LD_ADDR_VAR 0 7
40319: PUSH
40320: LD_VAR 0 4
40324: PPUSH
40325: CALL_OW 248
40329: ST_TO_ADDR
// weapon := 0 ;
40330: LD_ADDR_VAR 0 8
40334: PUSH
40335: LD_INT 0
40337: ST_TO_ADDR
// if not nat then
40338: LD_VAR 0 7
40342: NOT
40343: IFFALSE 40347
// continue ;
40345: GO 40312
// for j in list [ nat ] do
40347: LD_ADDR_VAR 0 5
40351: PUSH
40352: LD_VAR 0 10
40356: PUSH
40357: LD_VAR 0 7
40361: ARRAY
40362: PUSH
40363: FOR_IN
40364: IFFALSE 40405
// if GetBWeapon ( i ) = j [ 1 ] then
40366: LD_VAR 0 4
40370: PPUSH
40371: CALL_OW 269
40375: PUSH
40376: LD_VAR 0 5
40380: PUSH
40381: LD_INT 1
40383: ARRAY
40384: EQUAL
40385: IFFALSE 40403
// begin weapon := j [ 2 ] ;
40387: LD_ADDR_VAR 0 8
40391: PUSH
40392: LD_VAR 0 5
40396: PUSH
40397: LD_INT 2
40399: ARRAY
40400: ST_TO_ADDR
// break ;
40401: GO 40405
// end ;
40403: GO 40363
40405: POP
40406: POP
// if not weapon then
40407: LD_VAR 0 8
40411: NOT
40412: IFFALSE 40416
// continue ;
40414: GO 40312
// for k in factories do
40416: LD_ADDR_VAR 0 6
40420: PUSH
40421: LD_VAR 0 2
40425: PUSH
40426: FOR_IN
40427: IFFALSE 40492
// begin weapons := AvailableWeaponList ( k ) ;
40429: LD_ADDR_VAR 0 9
40433: PUSH
40434: LD_VAR 0 6
40438: PPUSH
40439: CALL_OW 478
40443: ST_TO_ADDR
// if not weapons then
40444: LD_VAR 0 9
40448: NOT
40449: IFFALSE 40453
// continue ;
40451: GO 40426
// if weapon in weapons then
40453: LD_VAR 0 8
40457: PUSH
40458: LD_VAR 0 9
40462: IN
40463: IFFALSE 40490
// begin result := [ i , weapon ] ;
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: LD_VAR 0 4
40474: PUSH
40475: LD_VAR 0 8
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: ST_TO_ADDR
// exit ;
40484: POP
40485: POP
40486: POP
40487: POP
40488: GO 40498
// end ; end ;
40490: GO 40426
40492: POP
40493: POP
// end ;
40494: GO 40312
40496: POP
40497: POP
// end ;
40498: LD_VAR 0 3
40502: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40503: LD_INT 0
40505: PPUSH
// if not side or side > 8 then
40506: LD_VAR 0 3
40510: NOT
40511: PUSH
40512: LD_VAR 0 3
40516: PUSH
40517: LD_INT 8
40519: GREATER
40520: OR
40521: IFFALSE 40525
// exit ;
40523: GO 40584
// if not range then
40525: LD_VAR 0 4
40529: NOT
40530: IFFALSE 40541
// range := - 12 ;
40532: LD_ADDR_VAR 0 4
40536: PUSH
40537: LD_INT 12
40539: NEG
40540: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40541: LD_VAR 0 1
40545: PPUSH
40546: LD_VAR 0 2
40550: PPUSH
40551: LD_VAR 0 3
40555: PPUSH
40556: LD_VAR 0 4
40560: PPUSH
40561: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40565: LD_VAR 0 1
40569: PPUSH
40570: LD_VAR 0 2
40574: PPUSH
40575: LD_VAR 0 3
40579: PPUSH
40580: CALL_OW 331
// end ;
40584: LD_VAR 0 5
40588: RET
// export function Video ( mode ) ; begin
40589: LD_INT 0
40591: PPUSH
// ingame_video = mode ;
40592: LD_ADDR_OWVAR 52
40596: PUSH
40597: LD_VAR 0 1
40601: ST_TO_ADDR
// interface_hidden = mode ;
40602: LD_ADDR_OWVAR 54
40606: PUSH
40607: LD_VAR 0 1
40611: ST_TO_ADDR
// end ;
40612: LD_VAR 0 2
40616: RET
// export function Join ( array , element ) ; begin
40617: LD_INT 0
40619: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40620: LD_ADDR_VAR 0 3
40624: PUSH
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_VAR 0 1
40634: PUSH
40635: LD_INT 1
40637: PLUS
40638: PPUSH
40639: LD_VAR 0 2
40643: PPUSH
40644: CALL_OW 1
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 3
40653: RET
// export function JoinUnion ( array , element ) ; begin
40654: LD_INT 0
40656: PPUSH
// result := array union element ;
40657: LD_ADDR_VAR 0 3
40661: PUSH
40662: LD_VAR 0 1
40666: PUSH
40667: LD_VAR 0 2
40671: UNION
40672: ST_TO_ADDR
// end ;
40673: LD_VAR 0 3
40677: RET
// export function GetBehemoths ( side ) ; begin
40678: LD_INT 0
40680: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40681: LD_ADDR_VAR 0 2
40685: PUSH
40686: LD_INT 22
40688: PUSH
40689: LD_VAR 0 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 31
40700: PUSH
40701: LD_INT 25
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PPUSH
40712: CALL_OW 69
40716: ST_TO_ADDR
// end ;
40717: LD_VAR 0 2
40721: RET
// export function Shuffle ( array ) ; var i , index ; begin
40722: LD_INT 0
40724: PPUSH
40725: PPUSH
40726: PPUSH
// result := [ ] ;
40727: LD_ADDR_VAR 0 2
40731: PUSH
40732: EMPTY
40733: ST_TO_ADDR
// if not array then
40734: LD_VAR 0 1
40738: NOT
40739: IFFALSE 40743
// exit ;
40741: GO 40842
// Randomize ;
40743: CALL_OW 10
// for i = array downto 1 do
40747: LD_ADDR_VAR 0 3
40751: PUSH
40752: DOUBLE
40753: LD_VAR 0 1
40757: INC
40758: ST_TO_ADDR
40759: LD_INT 1
40761: PUSH
40762: FOR_DOWNTO
40763: IFFALSE 40840
// begin index := rand ( 1 , array ) ;
40765: LD_ADDR_VAR 0 4
40769: PUSH
40770: LD_INT 1
40772: PPUSH
40773: LD_VAR 0 1
40777: PPUSH
40778: CALL_OW 12
40782: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40783: LD_ADDR_VAR 0 2
40787: PUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_VAR 0 2
40797: PUSH
40798: LD_INT 1
40800: PLUS
40801: PPUSH
40802: LD_VAR 0 1
40806: PUSH
40807: LD_VAR 0 4
40811: ARRAY
40812: PPUSH
40813: CALL_OW 2
40817: ST_TO_ADDR
// array := Delete ( array , index ) ;
40818: LD_ADDR_VAR 0 1
40822: PUSH
40823: LD_VAR 0 1
40827: PPUSH
40828: LD_VAR 0 4
40832: PPUSH
40833: CALL_OW 3
40837: ST_TO_ADDR
// end ;
40838: GO 40762
40840: POP
40841: POP
// end ;
40842: LD_VAR 0 2
40846: RET
// export function GetBaseMaterials ( base ) ; begin
40847: LD_INT 0
40849: PPUSH
// result := [ 0 , 0 , 0 ] ;
40850: LD_ADDR_VAR 0 2
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: ST_TO_ADDR
// if not base then
40869: LD_VAR 0 1
40873: NOT
40874: IFFALSE 40878
// exit ;
40876: GO 40927
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40878: LD_ADDR_VAR 0 2
40882: PUSH
40883: LD_VAR 0 1
40887: PPUSH
40888: LD_INT 1
40890: PPUSH
40891: CALL_OW 275
40895: PUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: LD_INT 2
40903: PPUSH
40904: CALL_OW 275
40908: PUSH
40909: LD_VAR 0 1
40913: PPUSH
40914: LD_INT 3
40916: PPUSH
40917: CALL_OW 275
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: LIST
40926: ST_TO_ADDR
// end ;
40927: LD_VAR 0 2
40931: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40932: LD_INT 0
40934: PPUSH
40935: PPUSH
// result := array ;
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_VAR 0 1
40945: ST_TO_ADDR
// if size >= result then
40946: LD_VAR 0 2
40950: PUSH
40951: LD_VAR 0 3
40955: GREATEREQUAL
40956: IFFALSE 40960
// exit ;
40958: GO 41010
// if size then
40960: LD_VAR 0 2
40964: IFFALSE 41010
// for i := array downto size do
40966: LD_ADDR_VAR 0 4
40970: PUSH
40971: DOUBLE
40972: LD_VAR 0 1
40976: INC
40977: ST_TO_ADDR
40978: LD_VAR 0 2
40982: PUSH
40983: FOR_DOWNTO
40984: IFFALSE 41008
// result := Delete ( result , result ) ;
40986: LD_ADDR_VAR 0 3
40990: PUSH
40991: LD_VAR 0 3
40995: PPUSH
40996: LD_VAR 0 3
41000: PPUSH
41001: CALL_OW 3
41005: ST_TO_ADDR
41006: GO 40983
41008: POP
41009: POP
// end ;
41010: LD_VAR 0 3
41014: RET
// export function ComExit ( unit ) ; var tmp ; begin
41015: LD_INT 0
41017: PPUSH
41018: PPUSH
// if not IsInUnit ( unit ) then
41019: LD_VAR 0 1
41023: PPUSH
41024: CALL_OW 310
41028: NOT
41029: IFFALSE 41033
// exit ;
41031: GO 41093
// tmp := IsInUnit ( unit ) ;
41033: LD_ADDR_VAR 0 3
41037: PUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 310
41047: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41048: LD_VAR 0 3
41052: PPUSH
41053: CALL_OW 247
41057: PUSH
41058: LD_INT 2
41060: EQUAL
41061: IFFALSE 41074
// ComExitVehicle ( unit ) else
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 121
41072: GO 41083
// ComExitBuilding ( unit ) ;
41074: LD_VAR 0 1
41078: PPUSH
41079: CALL_OW 122
// result := tmp ;
41083: LD_ADDR_VAR 0 2
41087: PUSH
41088: LD_VAR 0 3
41092: ST_TO_ADDR
// end ;
41093: LD_VAR 0 2
41097: RET
// export function ComExitAll ( units ) ; var i ; begin
41098: LD_INT 0
41100: PPUSH
41101: PPUSH
// if not units then
41102: LD_VAR 0 1
41106: NOT
41107: IFFALSE 41111
// exit ;
41109: GO 41137
// for i in units do
41111: LD_ADDR_VAR 0 3
41115: PUSH
41116: LD_VAR 0 1
41120: PUSH
41121: FOR_IN
41122: IFFALSE 41135
// ComExit ( i ) ;
41124: LD_VAR 0 3
41128: PPUSH
41129: CALL 41015 0 1
41133: GO 41121
41135: POP
41136: POP
// end ;
41137: LD_VAR 0 2
41141: RET
// export function ResetHc ; begin
41142: LD_INT 0
41144: PPUSH
// InitHc ;
41145: CALL_OW 19
// hc_importance := 0 ;
41149: LD_ADDR_OWVAR 32
41153: PUSH
41154: LD_INT 0
41156: ST_TO_ADDR
// end ;
41157: LD_VAR 0 1
41161: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41162: LD_INT 0
41164: PPUSH
41165: PPUSH
41166: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41167: LD_ADDR_VAR 0 6
41171: PUSH
41172: LD_VAR 0 1
41176: PUSH
41177: LD_VAR 0 3
41181: PLUS
41182: PUSH
41183: LD_INT 2
41185: DIV
41186: ST_TO_ADDR
// if _x < 0 then
41187: LD_VAR 0 6
41191: PUSH
41192: LD_INT 0
41194: LESS
41195: IFFALSE 41212
// _x := _x * - 1 ;
41197: LD_ADDR_VAR 0 6
41201: PUSH
41202: LD_VAR 0 6
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: MUL
41211: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41212: LD_ADDR_VAR 0 7
41216: PUSH
41217: LD_VAR 0 2
41221: PUSH
41222: LD_VAR 0 4
41226: PLUS
41227: PUSH
41228: LD_INT 2
41230: DIV
41231: ST_TO_ADDR
// if _y < 0 then
41232: LD_VAR 0 7
41236: PUSH
41237: LD_INT 0
41239: LESS
41240: IFFALSE 41257
// _y := _y * - 1 ;
41242: LD_ADDR_VAR 0 7
41246: PUSH
41247: LD_VAR 0 7
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: MUL
41256: ST_TO_ADDR
// result := [ _x , _y ] ;
41257: LD_ADDR_VAR 0 5
41261: PUSH
41262: LD_VAR 0 6
41266: PUSH
41267: LD_VAR 0 7
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: ST_TO_ADDR
// end ;
41276: LD_VAR 0 5
41280: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41281: LD_INT 0
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
// task := GetTaskList ( unit ) ;
41287: LD_ADDR_VAR 0 7
41291: PUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 437
41301: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41302: LD_VAR 0 7
41306: NOT
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_VAR 0 2
41317: PPUSH
41318: CALL_OW 308
41322: NOT
41323: AND
41324: IFFALSE 41328
// exit ;
41326: GO 41446
// if IsInArea ( unit , area ) then
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: CALL_OW 308
41342: IFFALSE 41360
// begin ComMoveToArea ( unit , goAway ) ;
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_VAR 0 3
41353: PPUSH
41354: CALL_OW 113
// exit ;
41358: GO 41446
// end ; if task [ 1 ] [ 1 ] <> M then
41360: LD_VAR 0 7
41364: PUSH
41365: LD_INT 1
41367: ARRAY
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: PUSH
41373: LD_STRING M
41375: NONEQUAL
41376: IFFALSE 41380
// exit ;
41378: GO 41446
// x := task [ 1 ] [ 2 ] ;
41380: LD_ADDR_VAR 0 5
41384: PUSH
41385: LD_VAR 0 7
41389: PUSH
41390: LD_INT 1
41392: ARRAY
41393: PUSH
41394: LD_INT 2
41396: ARRAY
41397: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41398: LD_ADDR_VAR 0 6
41402: PUSH
41403: LD_VAR 0 7
41407: PUSH
41408: LD_INT 1
41410: ARRAY
41411: PUSH
41412: LD_INT 3
41414: ARRAY
41415: ST_TO_ADDR
// if InArea ( x , y , area ) then
41416: LD_VAR 0 5
41420: PPUSH
41421: LD_VAR 0 6
41425: PPUSH
41426: LD_VAR 0 2
41430: PPUSH
41431: CALL_OW 309
41435: IFFALSE 41446
// ComStop ( unit ) ;
41437: LD_VAR 0 1
41441: PPUSH
41442: CALL_OW 141
// end ;
41446: LD_VAR 0 4
41450: RET
// export function Abs ( value ) ; begin
41451: LD_INT 0
41453: PPUSH
// result := value ;
41454: LD_ADDR_VAR 0 2
41458: PUSH
41459: LD_VAR 0 1
41463: ST_TO_ADDR
// if value < 0 then
41464: LD_VAR 0 1
41468: PUSH
41469: LD_INT 0
41471: LESS
41472: IFFALSE 41489
// result := value * - 1 ;
41474: LD_ADDR_VAR 0 2
41478: PUSH
41479: LD_VAR 0 1
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: MUL
41488: ST_TO_ADDR
// end ;
41489: LD_VAR 0 2
41493: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41494: LD_INT 0
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
// if not unit or not building then
41504: LD_VAR 0 1
41508: NOT
41509: PUSH
41510: LD_VAR 0 2
41514: NOT
41515: OR
41516: IFFALSE 41520
// exit ;
41518: GO 41746
// x := GetX ( building ) ;
41520: LD_ADDR_VAR 0 4
41524: PUSH
41525: LD_VAR 0 2
41529: PPUSH
41530: CALL_OW 250
41534: ST_TO_ADDR
// y := GetY ( building ) ;
41535: LD_ADDR_VAR 0 6
41539: PUSH
41540: LD_VAR 0 2
41544: PPUSH
41545: CALL_OW 251
41549: ST_TO_ADDR
// d := GetDir ( building ) ;
41550: LD_ADDR_VAR 0 8
41554: PUSH
41555: LD_VAR 0 2
41559: PPUSH
41560: CALL_OW 254
41564: ST_TO_ADDR
// r := 4 ;
41565: LD_ADDR_VAR 0 9
41569: PUSH
41570: LD_INT 4
41572: ST_TO_ADDR
// for i := 1 to 5 do
41573: LD_ADDR_VAR 0 10
41577: PUSH
41578: DOUBLE
41579: LD_INT 1
41581: DEC
41582: ST_TO_ADDR
41583: LD_INT 5
41585: PUSH
41586: FOR_TO
41587: IFFALSE 41744
// begin _x := ShiftX ( x , d , r + i ) ;
41589: LD_ADDR_VAR 0 5
41593: PUSH
41594: LD_VAR 0 4
41598: PPUSH
41599: LD_VAR 0 8
41603: PPUSH
41604: LD_VAR 0 9
41608: PUSH
41609: LD_VAR 0 10
41613: PLUS
41614: PPUSH
41615: CALL_OW 272
41619: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41620: LD_ADDR_VAR 0 7
41624: PUSH
41625: LD_VAR 0 6
41629: PPUSH
41630: LD_VAR 0 8
41634: PPUSH
41635: LD_VAR 0 9
41639: PUSH
41640: LD_VAR 0 10
41644: PLUS
41645: PPUSH
41646: CALL_OW 273
41650: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41651: LD_VAR 0 5
41655: PPUSH
41656: LD_VAR 0 7
41660: PPUSH
41661: CALL_OW 488
41665: PUSH
41666: LD_VAR 0 5
41670: PPUSH
41671: LD_VAR 0 7
41675: PPUSH
41676: CALL_OW 428
41680: PPUSH
41681: CALL_OW 247
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: IN
41696: NOT
41697: AND
41698: IFFALSE 41742
// begin ComMoveXY ( unit , _x , _y ) ;
41700: LD_VAR 0 1
41704: PPUSH
41705: LD_VAR 0 5
41709: PPUSH
41710: LD_VAR 0 7
41714: PPUSH
41715: CALL_OW 111
// result := [ _x , _y ] ;
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_VAR 0 5
41728: PUSH
41729: LD_VAR 0 7
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: ST_TO_ADDR
// exit ;
41738: POP
41739: POP
41740: GO 41746
// end ; end ;
41742: GO 41586
41744: POP
41745: POP
// end ;
41746: LD_VAR 0 3
41750: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41751: LD_INT 0
41753: PPUSH
41754: PPUSH
41755: PPUSH
// result := 0 ;
41756: LD_ADDR_VAR 0 3
41760: PUSH
41761: LD_INT 0
41763: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41764: LD_VAR 0 1
41768: PUSH
41769: LD_INT 0
41771: LESS
41772: PUSH
41773: LD_VAR 0 1
41777: PUSH
41778: LD_INT 8
41780: GREATER
41781: OR
41782: PUSH
41783: LD_VAR 0 2
41787: PUSH
41788: LD_INT 0
41790: LESS
41791: OR
41792: PUSH
41793: LD_VAR 0 2
41797: PUSH
41798: LD_INT 8
41800: GREATER
41801: OR
41802: IFFALSE 41806
// exit ;
41804: GO 41881
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41806: LD_ADDR_VAR 0 4
41810: PUSH
41811: LD_INT 22
41813: PUSH
41814: LD_VAR 0 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PPUSH
41823: CALL_OW 69
41827: PUSH
41828: FOR_IN
41829: IFFALSE 41879
// begin un := UnitShoot ( i ) ;
41831: LD_ADDR_VAR 0 5
41835: PUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: CALL_OW 504
41845: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41846: LD_VAR 0 5
41850: PPUSH
41851: CALL_OW 255
41855: PUSH
41856: LD_VAR 0 1
41860: EQUAL
41861: IFFALSE 41877
// begin result := un ;
41863: LD_ADDR_VAR 0 3
41867: PUSH
41868: LD_VAR 0 5
41872: ST_TO_ADDR
// exit ;
41873: POP
41874: POP
41875: GO 41881
// end ; end ;
41877: GO 41828
41879: POP
41880: POP
// end ;
41881: LD_VAR 0 3
41885: RET
// export function GetCargoBay ( units ) ; begin
41886: LD_INT 0
41888: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41889: LD_ADDR_VAR 0 2
41893: PUSH
41894: LD_VAR 0 1
41898: PPUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 34
41904: PUSH
41905: LD_INT 12
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 34
41914: PUSH
41915: LD_INT 51
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 34
41924: PUSH
41925: LD_INT 32
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 34
41934: PUSH
41935: LD_INT 89
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: PPUSH
41949: CALL_OW 72
41953: ST_TO_ADDR
// end ;
41954: LD_VAR 0 2
41958: RET
// export function Negate ( value ) ; begin
41959: LD_INT 0
41961: PPUSH
// result := not value ;
41962: LD_ADDR_VAR 0 2
41966: PUSH
41967: LD_VAR 0 1
41971: NOT
41972: ST_TO_ADDR
// end ;
41973: LD_VAR 0 2
41977: RET
// export function Inc ( value ) ; begin
41978: LD_INT 0
41980: PPUSH
// result := value + 1 ;
41981: LD_ADDR_VAR 0 2
41985: PUSH
41986: LD_VAR 0 1
41990: PUSH
41991: LD_INT 1
41993: PLUS
41994: ST_TO_ADDR
// end ;
41995: LD_VAR 0 2
41999: RET
// export function Dec ( value ) ; begin
42000: LD_INT 0
42002: PPUSH
// result := value - 1 ;
42003: LD_ADDR_VAR 0 2
42007: PUSH
42008: LD_VAR 0 1
42012: PUSH
42013: LD_INT 1
42015: MINUS
42016: ST_TO_ADDR
// end ;
42017: LD_VAR 0 2
42021: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42022: LD_INT 0
42024: PPUSH
42025: PPUSH
42026: PPUSH
42027: PPUSH
42028: PPUSH
42029: PPUSH
42030: PPUSH
42031: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42032: LD_VAR 0 1
42036: PPUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL_OW 488
42046: NOT
42047: PUSH
42048: LD_VAR 0 3
42052: PPUSH
42053: LD_VAR 0 4
42057: PPUSH
42058: CALL_OW 488
42062: NOT
42063: OR
42064: IFFALSE 42077
// begin result := - 1 ;
42066: LD_ADDR_VAR 0 5
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: ST_TO_ADDR
// exit ;
42075: GO 42312
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42077: LD_ADDR_VAR 0 12
42081: PUSH
42082: LD_VAR 0 1
42086: PPUSH
42087: LD_VAR 0 2
42091: PPUSH
42092: LD_VAR 0 3
42096: PPUSH
42097: LD_VAR 0 4
42101: PPUSH
42102: CALL 41162 0 4
42106: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42107: LD_ADDR_VAR 0 11
42111: PUSH
42112: LD_VAR 0 1
42116: PPUSH
42117: LD_VAR 0 2
42121: PPUSH
42122: LD_VAR 0 12
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: PPUSH
42131: LD_VAR 0 12
42135: PUSH
42136: LD_INT 2
42138: ARRAY
42139: PPUSH
42140: CALL_OW 298
42144: ST_TO_ADDR
// distance := 9999 ;
42145: LD_ADDR_VAR 0 10
42149: PUSH
42150: LD_INT 9999
42152: ST_TO_ADDR
// for i := 0 to 5 do
42153: LD_ADDR_VAR 0 6
42157: PUSH
42158: DOUBLE
42159: LD_INT 0
42161: DEC
42162: ST_TO_ADDR
42163: LD_INT 5
42165: PUSH
42166: FOR_TO
42167: IFFALSE 42310
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42169: LD_ADDR_VAR 0 7
42173: PUSH
42174: LD_VAR 0 1
42178: PPUSH
42179: LD_VAR 0 6
42183: PPUSH
42184: LD_VAR 0 11
42188: PPUSH
42189: CALL_OW 272
42193: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42194: LD_ADDR_VAR 0 8
42198: PUSH
42199: LD_VAR 0 2
42203: PPUSH
42204: LD_VAR 0 6
42208: PPUSH
42209: LD_VAR 0 11
42213: PPUSH
42214: CALL_OW 273
42218: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42219: LD_VAR 0 7
42223: PPUSH
42224: LD_VAR 0 8
42228: PPUSH
42229: CALL_OW 488
42233: NOT
42234: IFFALSE 42238
// continue ;
42236: GO 42166
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42238: LD_ADDR_VAR 0 9
42242: PUSH
42243: LD_VAR 0 12
42247: PUSH
42248: LD_INT 1
42250: ARRAY
42251: PPUSH
42252: LD_VAR 0 12
42256: PUSH
42257: LD_INT 2
42259: ARRAY
42260: PPUSH
42261: LD_VAR 0 7
42265: PPUSH
42266: LD_VAR 0 8
42270: PPUSH
42271: CALL_OW 298
42275: ST_TO_ADDR
// if tmp < distance then
42276: LD_VAR 0 9
42280: PUSH
42281: LD_VAR 0 10
42285: LESS
42286: IFFALSE 42308
// begin result := i ;
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: LD_VAR 0 6
42297: ST_TO_ADDR
// distance := tmp ;
42298: LD_ADDR_VAR 0 10
42302: PUSH
42303: LD_VAR 0 9
42307: ST_TO_ADDR
// end ; end ;
42308: GO 42166
42310: POP
42311: POP
// end ;
42312: LD_VAR 0 5
42316: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42317: LD_INT 0
42319: PPUSH
42320: PPUSH
// if not driver or not IsInUnit ( driver ) then
42321: LD_VAR 0 1
42325: NOT
42326: PUSH
42327: LD_VAR 0 1
42331: PPUSH
42332: CALL_OW 310
42336: NOT
42337: OR
42338: IFFALSE 42342
// exit ;
42340: GO 42432
// vehicle := IsInUnit ( driver ) ;
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: CALL_OW 310
42356: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_STRING \
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: PUSH
42392: LD_STRING E
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_VAR 0 3
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PPUSH
42428: CALL_OW 446
// end ;
42432: LD_VAR 0 2
42436: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42437: LD_INT 0
42439: PPUSH
42440: PPUSH
// if not driver or not IsInUnit ( driver ) then
42441: LD_VAR 0 1
42445: NOT
42446: PUSH
42447: LD_VAR 0 1
42451: PPUSH
42452: CALL_OW 310
42456: NOT
42457: OR
42458: IFFALSE 42462
// exit ;
42460: GO 42552
// vehicle := IsInUnit ( driver ) ;
42462: LD_ADDR_VAR 0 3
42466: PUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 310
42476: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42477: LD_VAR 0 1
42481: PPUSH
42482: LD_STRING \
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: PUSH
42512: LD_STRING E
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: LD_VAR 0 3
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PPUSH
42548: CALL_OW 447
// end ;
42552: LD_VAR 0 2
42556: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42557: LD_INT 0
42559: PPUSH
42560: PPUSH
42561: PPUSH
// tmp := [ ] ;
42562: LD_ADDR_VAR 0 5
42566: PUSH
42567: EMPTY
42568: ST_TO_ADDR
// for i in units do
42569: LD_ADDR_VAR 0 4
42573: PUSH
42574: LD_VAR 0 1
42578: PUSH
42579: FOR_IN
42580: IFFALSE 42618
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42582: LD_ADDR_VAR 0 5
42586: PUSH
42587: LD_VAR 0 5
42591: PPUSH
42592: LD_VAR 0 5
42596: PUSH
42597: LD_INT 1
42599: PLUS
42600: PPUSH
42601: LD_VAR 0 4
42605: PPUSH
42606: CALL_OW 256
42610: PPUSH
42611: CALL_OW 2
42615: ST_TO_ADDR
42616: GO 42579
42618: POP
42619: POP
// if not tmp then
42620: LD_VAR 0 5
42624: NOT
42625: IFFALSE 42629
// exit ;
42627: GO 42677
// if asc then
42629: LD_VAR 0 2
42633: IFFALSE 42657
// result := SortListByListAsc ( units , tmp ) else
42635: LD_ADDR_VAR 0 3
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: LD_VAR 0 5
42649: PPUSH
42650: CALL_OW 76
42654: ST_TO_ADDR
42655: GO 42677
// result := SortListByListDesc ( units , tmp ) ;
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: LD_VAR 0 5
42671: PPUSH
42672: CALL_OW 77
42676: ST_TO_ADDR
// end ;
42677: LD_VAR 0 3
42681: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42682: LD_INT 0
42684: PPUSH
42685: PPUSH
// task := GetTaskList ( mech ) ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: CALL_OW 437
42700: ST_TO_ADDR
// if not task then
42701: LD_VAR 0 4
42705: NOT
42706: IFFALSE 42710
// exit ;
42708: GO 42752
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42710: LD_ADDR_VAR 0 3
42714: PUSH
42715: LD_VAR 0 4
42719: PUSH
42720: LD_INT 1
42722: ARRAY
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: PUSH
42728: LD_STRING r
42730: EQUAL
42731: PUSH
42732: LD_VAR 0 4
42736: PUSH
42737: LD_INT 1
42739: ARRAY
42740: PUSH
42741: LD_INT 4
42743: ARRAY
42744: PUSH
42745: LD_VAR 0 2
42749: EQUAL
42750: AND
42751: ST_TO_ADDR
// end ;
42752: LD_VAR 0 3
42756: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42757: LD_INT 0
42759: PPUSH
// SetDir ( unit , d ) ;
42760: LD_VAR 0 1
42764: PPUSH
42765: LD_VAR 0 4
42769: PPUSH
42770: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42774: LD_VAR 0 1
42778: PPUSH
42779: LD_VAR 0 2
42783: PPUSH
42784: LD_VAR 0 3
42788: PPUSH
42789: LD_VAR 0 5
42793: PPUSH
42794: CALL_OW 48
// end ;
42798: LD_VAR 0 6
42802: RET
// export function ToNaturalNumber ( number ) ; begin
42803: LD_INT 0
42805: PPUSH
// result := number div 1 ;
42806: LD_ADDR_VAR 0 2
42810: PUSH
42811: LD_VAR 0 1
42815: PUSH
42816: LD_INT 1
42818: DIV
42819: ST_TO_ADDR
// if number < 0 then
42820: LD_VAR 0 1
42824: PUSH
42825: LD_INT 0
42827: LESS
42828: IFFALSE 42838
// result := 0 ;
42830: LD_ADDR_VAR 0 2
42834: PUSH
42835: LD_INT 0
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 2
42842: RET
// export function SortByClass ( units , class ) ; var un ; begin
42843: LD_INT 0
42845: PPUSH
42846: PPUSH
// if not units or not class then
42847: LD_VAR 0 1
42851: NOT
42852: PUSH
42853: LD_VAR 0 2
42857: NOT
42858: OR
42859: IFFALSE 42863
// exit ;
42861: GO 42958
// result := [ ] ;
42863: LD_ADDR_VAR 0 3
42867: PUSH
42868: EMPTY
42869: ST_TO_ADDR
// for un in units do
42870: LD_ADDR_VAR 0 4
42874: PUSH
42875: LD_VAR 0 1
42879: PUSH
42880: FOR_IN
42881: IFFALSE 42956
// if GetClass ( un ) = class then
42883: LD_VAR 0 4
42887: PPUSH
42888: CALL_OW 257
42892: PUSH
42893: LD_VAR 0 2
42897: EQUAL
42898: IFFALSE 42925
// result := Insert ( result , 1 , un ) else
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_VAR 0 3
42909: PPUSH
42910: LD_INT 1
42912: PPUSH
42913: LD_VAR 0 4
42917: PPUSH
42918: CALL_OW 2
42922: ST_TO_ADDR
42923: GO 42954
// result := Replace ( result , result + 1 , un ) ;
42925: LD_ADDR_VAR 0 3
42929: PUSH
42930: LD_VAR 0 3
42934: PPUSH
42935: LD_VAR 0 3
42939: PUSH
42940: LD_INT 1
42942: PLUS
42943: PPUSH
42944: LD_VAR 0 4
42948: PPUSH
42949: CALL_OW 1
42953: ST_TO_ADDR
42954: GO 42880
42956: POP
42957: POP
// end ;
42958: LD_VAR 0 3
42962: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42963: LD_INT 0
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
// result := [ ] ;
42972: LD_ADDR_VAR 0 4
42976: PUSH
42977: EMPTY
42978: ST_TO_ADDR
// if x - r < 0 then
42979: LD_VAR 0 1
42983: PUSH
42984: LD_VAR 0 3
42988: MINUS
42989: PUSH
42990: LD_INT 0
42992: LESS
42993: IFFALSE 43005
// min_x := 0 else
42995: LD_ADDR_VAR 0 8
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
43003: GO 43021
// min_x := x - r ;
43005: LD_ADDR_VAR 0 8
43009: PUSH
43010: LD_VAR 0 1
43014: PUSH
43015: LD_VAR 0 3
43019: MINUS
43020: ST_TO_ADDR
// if y - r < 0 then
43021: LD_VAR 0 2
43025: PUSH
43026: LD_VAR 0 3
43030: MINUS
43031: PUSH
43032: LD_INT 0
43034: LESS
43035: IFFALSE 43047
// min_y := 0 else
43037: LD_ADDR_VAR 0 7
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
43045: GO 43063
// min_y := y - r ;
43047: LD_ADDR_VAR 0 7
43051: PUSH
43052: LD_VAR 0 2
43056: PUSH
43057: LD_VAR 0 3
43061: MINUS
43062: ST_TO_ADDR
// max_x := x + r ;
43063: LD_ADDR_VAR 0 9
43067: PUSH
43068: LD_VAR 0 1
43072: PUSH
43073: LD_VAR 0 3
43077: PLUS
43078: ST_TO_ADDR
// max_y := y + r ;
43079: LD_ADDR_VAR 0 10
43083: PUSH
43084: LD_VAR 0 2
43088: PUSH
43089: LD_VAR 0 3
43093: PLUS
43094: ST_TO_ADDR
// for _x = min_x to max_x do
43095: LD_ADDR_VAR 0 5
43099: PUSH
43100: DOUBLE
43101: LD_VAR 0 8
43105: DEC
43106: ST_TO_ADDR
43107: LD_VAR 0 9
43111: PUSH
43112: FOR_TO
43113: IFFALSE 43214
// for _y = min_y to max_y do
43115: LD_ADDR_VAR 0 6
43119: PUSH
43120: DOUBLE
43121: LD_VAR 0 7
43125: DEC
43126: ST_TO_ADDR
43127: LD_VAR 0 10
43131: PUSH
43132: FOR_TO
43133: IFFALSE 43210
// begin if not ValidHex ( _x , _y ) then
43135: LD_VAR 0 5
43139: PPUSH
43140: LD_VAR 0 6
43144: PPUSH
43145: CALL_OW 488
43149: NOT
43150: IFFALSE 43154
// continue ;
43152: GO 43132
// if GetResourceTypeXY ( _x , _y ) then
43154: LD_VAR 0 5
43158: PPUSH
43159: LD_VAR 0 6
43163: PPUSH
43164: CALL_OW 283
43168: IFFALSE 43208
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43170: LD_ADDR_VAR 0 4
43174: PUSH
43175: LD_VAR 0 4
43179: PPUSH
43180: LD_VAR 0 4
43184: PUSH
43185: LD_INT 1
43187: PLUS
43188: PPUSH
43189: LD_VAR 0 5
43193: PUSH
43194: LD_VAR 0 6
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PPUSH
43203: CALL_OW 1
43207: ST_TO_ADDR
// end ;
43208: GO 43132
43210: POP
43211: POP
43212: GO 43112
43214: POP
43215: POP
// end ;
43216: LD_VAR 0 4
43220: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43221: LD_INT 0
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
// if not units then
43231: LD_VAR 0 1
43235: NOT
43236: IFFALSE 43240
// exit ;
43238: GO 43768
// result := UnitFilter ( units , [ f_ok ] ) ;
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_INT 50
43252: PUSH
43253: EMPTY
43254: LIST
43255: PPUSH
43256: CALL_OW 72
43260: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43261: LD_ADDR_VAR 0 8
43265: PUSH
43266: LD_VAR 0 1
43270: PUSH
43271: LD_INT 1
43273: ARRAY
43274: PPUSH
43275: CALL_OW 255
43279: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43280: LD_ADDR_VAR 0 10
43284: PUSH
43285: LD_INT 29
43287: PUSH
43288: LD_INT 91
43290: PUSH
43291: LD_INT 49
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: ST_TO_ADDR
// if not result then
43299: LD_VAR 0 3
43303: NOT
43304: IFFALSE 43308
// exit ;
43306: GO 43768
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43308: LD_ADDR_VAR 0 5
43312: PUSH
43313: LD_INT 81
43315: PUSH
43316: LD_VAR 0 8
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PPUSH
43325: CALL_OW 69
43329: ST_TO_ADDR
// for i in result do
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: LD_VAR 0 3
43339: PUSH
43340: FOR_IN
43341: IFFALSE 43766
// begin tag := GetTag ( i ) + 1 ;
43343: LD_ADDR_VAR 0 9
43347: PUSH
43348: LD_VAR 0 4
43352: PPUSH
43353: CALL_OW 110
43357: PUSH
43358: LD_INT 1
43360: PLUS
43361: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43362: LD_ADDR_VAR 0 7
43366: PUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: CALL_OW 250
43376: PPUSH
43377: LD_VAR 0 4
43381: PPUSH
43382: CALL_OW 251
43386: PPUSH
43387: LD_INT 4
43389: PPUSH
43390: CALL 42963 0 3
43394: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43395: LD_VAR 0 4
43399: PPUSH
43400: CALL_OW 247
43404: PUSH
43405: LD_INT 2
43407: EQUAL
43408: PUSH
43409: LD_VAR 0 7
43413: PUSH
43414: LD_INT 2
43416: GREATER
43417: AND
43418: PUSH
43419: LD_VAR 0 4
43423: PPUSH
43424: CALL_OW 264
43428: PUSH
43429: LD_VAR 0 10
43433: IN
43434: NOT
43435: AND
43436: IFFALSE 43475
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43438: LD_VAR 0 4
43442: PPUSH
43443: LD_VAR 0 7
43447: PUSH
43448: LD_INT 1
43450: ARRAY
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: PPUSH
43456: LD_VAR 0 7
43460: PUSH
43461: LD_INT 1
43463: ARRAY
43464: PUSH
43465: LD_INT 2
43467: ARRAY
43468: PPUSH
43469: CALL_OW 116
43473: GO 43764
// if path > tag then
43475: LD_VAR 0 2
43479: PUSH
43480: LD_VAR 0 9
43484: GREATER
43485: IFFALSE 43693
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43487: LD_ADDR_VAR 0 6
43491: PUSH
43492: LD_VAR 0 5
43496: PPUSH
43497: LD_INT 91
43499: PUSH
43500: LD_VAR 0 4
43504: PUSH
43505: LD_INT 8
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: PPUSH
43513: CALL_OW 72
43517: ST_TO_ADDR
// if nearEnemy then
43518: LD_VAR 0 6
43522: IFFALSE 43591
// begin if GetWeapon ( i ) = ru_time_lapser then
43524: LD_VAR 0 4
43528: PPUSH
43529: CALL_OW 264
43533: PUSH
43534: LD_INT 49
43536: EQUAL
43537: IFFALSE 43565
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43539: LD_VAR 0 4
43543: PPUSH
43544: LD_VAR 0 6
43548: PPUSH
43549: LD_VAR 0 4
43553: PPUSH
43554: CALL_OW 74
43558: PPUSH
43559: CALL_OW 112
43563: GO 43589
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43565: LD_VAR 0 4
43569: PPUSH
43570: LD_VAR 0 6
43574: PPUSH
43575: LD_VAR 0 4
43579: PPUSH
43580: CALL_OW 74
43584: PPUSH
43585: CALL 44839 0 2
// end else
43589: GO 43691
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43591: LD_VAR 0 4
43595: PPUSH
43596: LD_VAR 0 2
43600: PUSH
43601: LD_VAR 0 9
43605: ARRAY
43606: PUSH
43607: LD_INT 1
43609: ARRAY
43610: PPUSH
43611: LD_VAR 0 2
43615: PUSH
43616: LD_VAR 0 9
43620: ARRAY
43621: PUSH
43622: LD_INT 2
43624: ARRAY
43625: PPUSH
43626: CALL_OW 297
43630: PUSH
43631: LD_INT 6
43633: GREATER
43634: IFFALSE 43677
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43636: LD_VAR 0 4
43640: PPUSH
43641: LD_VAR 0 2
43645: PUSH
43646: LD_VAR 0 9
43650: ARRAY
43651: PUSH
43652: LD_INT 1
43654: ARRAY
43655: PPUSH
43656: LD_VAR 0 2
43660: PUSH
43661: LD_VAR 0 9
43665: ARRAY
43666: PUSH
43667: LD_INT 2
43669: ARRAY
43670: PPUSH
43671: CALL_OW 114
43675: GO 43691
// SetTag ( i , tag ) ;
43677: LD_VAR 0 4
43681: PPUSH
43682: LD_VAR 0 9
43686: PPUSH
43687: CALL_OW 109
// end else
43691: GO 43764
// if enemy then
43693: LD_VAR 0 5
43697: IFFALSE 43764
// begin if GetWeapon ( i ) = ru_time_lapser then
43699: LD_VAR 0 4
43703: PPUSH
43704: CALL_OW 264
43708: PUSH
43709: LD_INT 49
43711: EQUAL
43712: IFFALSE 43740
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43714: LD_VAR 0 4
43718: PPUSH
43719: LD_VAR 0 5
43723: PPUSH
43724: LD_VAR 0 4
43728: PPUSH
43729: CALL_OW 74
43733: PPUSH
43734: CALL_OW 112
43738: GO 43764
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43740: LD_VAR 0 4
43744: PPUSH
43745: LD_VAR 0 5
43749: PPUSH
43750: LD_VAR 0 4
43754: PPUSH
43755: CALL_OW 74
43759: PPUSH
43760: CALL 44839 0 2
// end ; end ;
43764: GO 43340
43766: POP
43767: POP
// end ;
43768: LD_VAR 0 3
43772: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43773: LD_INT 0
43775: PPUSH
43776: PPUSH
43777: PPUSH
// if not unit or IsInUnit ( unit ) then
43778: LD_VAR 0 1
43782: NOT
43783: PUSH
43784: LD_VAR 0 1
43788: PPUSH
43789: CALL_OW 310
43793: OR
43794: IFFALSE 43798
// exit ;
43796: GO 43889
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43798: LD_ADDR_VAR 0 4
43802: PUSH
43803: LD_VAR 0 1
43807: PPUSH
43808: CALL_OW 250
43812: PPUSH
43813: LD_VAR 0 2
43817: PPUSH
43818: LD_INT 1
43820: PPUSH
43821: CALL_OW 272
43825: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43826: LD_ADDR_VAR 0 5
43830: PUSH
43831: LD_VAR 0 1
43835: PPUSH
43836: CALL_OW 251
43840: PPUSH
43841: LD_VAR 0 2
43845: PPUSH
43846: LD_INT 1
43848: PPUSH
43849: CALL_OW 273
43853: ST_TO_ADDR
// if ValidHex ( x , y ) then
43854: LD_VAR 0 4
43858: PPUSH
43859: LD_VAR 0 5
43863: PPUSH
43864: CALL_OW 488
43868: IFFALSE 43889
// ComTurnXY ( unit , x , y ) ;
43870: LD_VAR 0 1
43874: PPUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: LD_VAR 0 5
43884: PPUSH
43885: CALL_OW 118
// end ;
43889: LD_VAR 0 3
43893: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43894: LD_INT 0
43896: PPUSH
43897: PPUSH
// result := false ;
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_INT 0
43905: ST_TO_ADDR
// if not units then
43906: LD_VAR 0 2
43910: NOT
43911: IFFALSE 43915
// exit ;
43913: GO 43960
// for i in units do
43915: LD_ADDR_VAR 0 4
43919: PUSH
43920: LD_VAR 0 2
43924: PUSH
43925: FOR_IN
43926: IFFALSE 43958
// if See ( side , i ) then
43928: LD_VAR 0 1
43932: PPUSH
43933: LD_VAR 0 4
43937: PPUSH
43938: CALL_OW 292
43942: IFFALSE 43956
// begin result := true ;
43944: LD_ADDR_VAR 0 3
43948: PUSH
43949: LD_INT 1
43951: ST_TO_ADDR
// exit ;
43952: POP
43953: POP
43954: GO 43960
// end ;
43956: GO 43925
43958: POP
43959: POP
// end ;
43960: LD_VAR 0 3
43964: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43965: LD_INT 0
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
// if not unit or not points then
43971: LD_VAR 0 1
43975: NOT
43976: PUSH
43977: LD_VAR 0 2
43981: NOT
43982: OR
43983: IFFALSE 43987
// exit ;
43985: GO 44077
// dist := 99999 ;
43987: LD_ADDR_VAR 0 5
43991: PUSH
43992: LD_INT 99999
43994: ST_TO_ADDR
// for i in points do
43995: LD_ADDR_VAR 0 4
43999: PUSH
44000: LD_VAR 0 2
44004: PUSH
44005: FOR_IN
44006: IFFALSE 44075
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44008: LD_ADDR_VAR 0 6
44012: PUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: LD_VAR 0 4
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: PPUSH
44027: LD_VAR 0 4
44031: PUSH
44032: LD_INT 2
44034: ARRAY
44035: PPUSH
44036: CALL_OW 297
44040: ST_TO_ADDR
// if tmpDist < dist then
44041: LD_VAR 0 6
44045: PUSH
44046: LD_VAR 0 5
44050: LESS
44051: IFFALSE 44073
// begin result := i ;
44053: LD_ADDR_VAR 0 3
44057: PUSH
44058: LD_VAR 0 4
44062: ST_TO_ADDR
// dist := tmpDist ;
44063: LD_ADDR_VAR 0 5
44067: PUSH
44068: LD_VAR 0 6
44072: ST_TO_ADDR
// end ; end ;
44073: GO 44005
44075: POP
44076: POP
// end ;
44077: LD_VAR 0 3
44081: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44082: LD_INT 0
44084: PPUSH
// uc_side := side ;
44085: LD_ADDR_OWVAR 20
44089: PUSH
44090: LD_VAR 0 1
44094: ST_TO_ADDR
// uc_nation := 3 ;
44095: LD_ADDR_OWVAR 21
44099: PUSH
44100: LD_INT 3
44102: ST_TO_ADDR
// vc_chassis := 25 ;
44103: LD_ADDR_OWVAR 37
44107: PUSH
44108: LD_INT 25
44110: ST_TO_ADDR
// vc_engine := engine_siberite ;
44111: LD_ADDR_OWVAR 39
44115: PUSH
44116: LD_INT 3
44118: ST_TO_ADDR
// vc_control := control_computer ;
44119: LD_ADDR_OWVAR 38
44123: PUSH
44124: LD_INT 3
44126: ST_TO_ADDR
// vc_weapon := 59 ;
44127: LD_ADDR_OWVAR 40
44131: PUSH
44132: LD_INT 59
44134: ST_TO_ADDR
// result := CreateVehicle ;
44135: LD_ADDR_VAR 0 5
44139: PUSH
44140: CALL_OW 45
44144: ST_TO_ADDR
// SetDir ( result , d ) ;
44145: LD_VAR 0 5
44149: PPUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44159: LD_VAR 0 5
44163: PPUSH
44164: LD_VAR 0 2
44168: PPUSH
44169: LD_VAR 0 3
44173: PPUSH
44174: LD_INT 0
44176: PPUSH
44177: CALL_OW 48
// end ;
44181: LD_VAR 0 5
44185: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44186: LD_INT 0
44188: PPUSH
44189: PPUSH
44190: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44191: LD_ADDR_VAR 0 2
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44214: LD_VAR 0 1
44218: NOT
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 264
44229: PUSH
44230: LD_INT 12
44232: PUSH
44233: LD_INT 51
44235: PUSH
44236: LD_INT 32
44238: PUSH
44239: LD_INT 89
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: IN
44248: NOT
44249: OR
44250: IFFALSE 44254
// exit ;
44252: GO 44352
// for i := 1 to 3 do
44254: LD_ADDR_VAR 0 3
44258: PUSH
44259: DOUBLE
44260: LD_INT 1
44262: DEC
44263: ST_TO_ADDR
44264: LD_INT 3
44266: PUSH
44267: FOR_TO
44268: IFFALSE 44350
// begin tmp := GetCargo ( cargo , i ) ;
44270: LD_ADDR_VAR 0 4
44274: PUSH
44275: LD_VAR 0 1
44279: PPUSH
44280: LD_VAR 0 3
44284: PPUSH
44285: CALL_OW 289
44289: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44290: LD_ADDR_VAR 0 2
44294: PUSH
44295: LD_VAR 0 2
44299: PPUSH
44300: LD_VAR 0 3
44304: PPUSH
44305: LD_VAR 0 4
44309: PPUSH
44310: CALL_OW 1
44314: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44315: LD_ADDR_VAR 0 2
44319: PUSH
44320: LD_VAR 0 2
44324: PPUSH
44325: LD_INT 4
44327: PPUSH
44328: LD_VAR 0 2
44332: PUSH
44333: LD_INT 4
44335: ARRAY
44336: PUSH
44337: LD_VAR 0 4
44341: PLUS
44342: PPUSH
44343: CALL_OW 1
44347: ST_TO_ADDR
// end ;
44348: GO 44267
44350: POP
44351: POP
// end ;
44352: LD_VAR 0 2
44356: RET
// export function Length ( array ) ; begin
44357: LD_INT 0
44359: PPUSH
// result := array + 0 ;
44360: LD_ADDR_VAR 0 2
44364: PUSH
44365: LD_VAR 0 1
44369: PUSH
44370: LD_INT 0
44372: PLUS
44373: ST_TO_ADDR
// end ;
44374: LD_VAR 0 2
44378: RET
// export function PrepareArray ( array ) ; begin
44379: LD_INT 0
44381: PPUSH
// result := array diff 0 ;
44382: LD_ADDR_VAR 0 2
44386: PUSH
44387: LD_VAR 0 1
44391: PUSH
44392: LD_INT 0
44394: DIFF
44395: ST_TO_ADDR
// if not result [ 1 ] then
44396: LD_VAR 0 2
44400: PUSH
44401: LD_INT 1
44403: ARRAY
44404: NOT
44405: IFFALSE 44425
// result := Delete ( result , 1 ) ;
44407: LD_ADDR_VAR 0 2
44411: PUSH
44412: LD_VAR 0 2
44416: PPUSH
44417: LD_INT 1
44419: PPUSH
44420: CALL_OW 3
44424: ST_TO_ADDR
// end ;
44425: LD_VAR 0 2
44429: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44430: LD_INT 0
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
// sibRocketRange := 25 ;
44436: LD_ADDR_VAR 0 6
44440: PUSH
44441: LD_INT 25
44443: ST_TO_ADDR
// result := false ;
44444: LD_ADDR_VAR 0 4
44448: PUSH
44449: LD_INT 0
44451: ST_TO_ADDR
// for i := 0 to 5 do
44452: LD_ADDR_VAR 0 5
44456: PUSH
44457: DOUBLE
44458: LD_INT 0
44460: DEC
44461: ST_TO_ADDR
44462: LD_INT 5
44464: PUSH
44465: FOR_TO
44466: IFFALSE 44533
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44468: LD_VAR 0 1
44472: PPUSH
44473: LD_VAR 0 5
44477: PPUSH
44478: LD_VAR 0 6
44482: PPUSH
44483: CALL_OW 272
44487: PPUSH
44488: LD_VAR 0 2
44492: PPUSH
44493: LD_VAR 0 5
44497: PPUSH
44498: LD_VAR 0 6
44502: PPUSH
44503: CALL_OW 273
44507: PPUSH
44508: LD_VAR 0 3
44512: PPUSH
44513: CALL_OW 309
44517: IFFALSE 44531
// begin result := true ;
44519: LD_ADDR_VAR 0 4
44523: PUSH
44524: LD_INT 1
44526: ST_TO_ADDR
// exit ;
44527: POP
44528: POP
44529: GO 44535
// end ;
44531: GO 44465
44533: POP
44534: POP
// end ;
44535: LD_VAR 0 4
44539: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
44544: PPUSH
// if btype = b_depot then
44545: LD_VAR 0 2
44549: PUSH
44550: LD_INT 0
44552: EQUAL
44553: IFFALSE 44565
// begin result := true ;
44555: LD_ADDR_VAR 0 3
44559: PUSH
44560: LD_INT 1
44562: ST_TO_ADDR
// exit ;
44563: GO 44681
// end ; pom := GetBase ( depot ) ;
44565: LD_ADDR_VAR 0 4
44569: PUSH
44570: LD_VAR 0 1
44574: PPUSH
44575: CALL_OW 274
44579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44580: LD_ADDR_VAR 0 5
44584: PUSH
44585: LD_VAR 0 2
44589: PPUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: CALL_OW 248
44599: PPUSH
44600: CALL_OW 450
44604: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44605: LD_ADDR_VAR 0 3
44609: PUSH
44610: LD_VAR 0 4
44614: PPUSH
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 275
44622: PUSH
44623: LD_VAR 0 5
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: GREATEREQUAL
44632: PUSH
44633: LD_VAR 0 4
44637: PPUSH
44638: LD_INT 2
44640: PPUSH
44641: CALL_OW 275
44645: PUSH
44646: LD_VAR 0 5
44650: PUSH
44651: LD_INT 2
44653: ARRAY
44654: GREATEREQUAL
44655: AND
44656: PUSH
44657: LD_VAR 0 4
44661: PPUSH
44662: LD_INT 3
44664: PPUSH
44665: CALL_OW 275
44669: PUSH
44670: LD_VAR 0 5
44674: PUSH
44675: LD_INT 3
44677: ARRAY
44678: GREATEREQUAL
44679: AND
44680: ST_TO_ADDR
// end ;
44681: LD_VAR 0 3
44685: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44686: LD_INT 0
44688: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44689: LD_VAR 0 1
44693: PPUSH
44694: LD_VAR 0 2
44698: PPUSH
44699: LD_INT 0
44701: PPUSH
44702: LD_INT 0
44704: PPUSH
44705: LD_INT 1
44707: PPUSH
44708: LD_INT 0
44710: PPUSH
44711: CALL_OW 587
// end ;
44715: LD_VAR 0 3
44719: RET
// export function CenterOnNow ( unit ) ; begin
44720: LD_INT 0
44722: PPUSH
// result := IsInUnit ( unit ) ;
44723: LD_ADDR_VAR 0 2
44727: PUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: CALL_OW 310
44737: ST_TO_ADDR
// if not result then
44738: LD_VAR 0 2
44742: NOT
44743: IFFALSE 44755
// result := unit ;
44745: LD_ADDR_VAR 0 2
44749: PUSH
44750: LD_VAR 0 1
44754: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44755: LD_VAR 0 1
44759: PPUSH
44760: CALL_OW 87
// end ;
44764: LD_VAR 0 2
44768: RET
// export function ComMoveHex ( unit , hex ) ; begin
44769: LD_INT 0
44771: PPUSH
// if not hex then
44772: LD_VAR 0 2
44776: NOT
44777: IFFALSE 44781
// exit ;
44779: GO 44834
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 1
44788: ARRAY
44789: PPUSH
44790: LD_VAR 0 2
44794: PUSH
44795: LD_INT 2
44797: ARRAY
44798: PPUSH
44799: CALL_OW 428
44803: IFFALSE 44807
// exit ;
44805: GO 44834
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44807: LD_VAR 0 1
44811: PPUSH
44812: LD_VAR 0 2
44816: PUSH
44817: LD_INT 1
44819: ARRAY
44820: PPUSH
44821: LD_VAR 0 2
44825: PUSH
44826: LD_INT 2
44828: ARRAY
44829: PPUSH
44830: CALL_OW 111
// end ;
44834: LD_VAR 0 3
44838: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44839: LD_INT 0
44841: PPUSH
44842: PPUSH
44843: PPUSH
// if not unit or not enemy then
44844: LD_VAR 0 1
44848: NOT
44849: PUSH
44850: LD_VAR 0 2
44854: NOT
44855: OR
44856: IFFALSE 44860
// exit ;
44858: GO 44984
// x := GetX ( enemy ) ;
44860: LD_ADDR_VAR 0 4
44864: PUSH
44865: LD_VAR 0 2
44869: PPUSH
44870: CALL_OW 250
44874: ST_TO_ADDR
// y := GetY ( enemy ) ;
44875: LD_ADDR_VAR 0 5
44879: PUSH
44880: LD_VAR 0 2
44884: PPUSH
44885: CALL_OW 251
44889: ST_TO_ADDR
// if ValidHex ( x , y ) then
44890: LD_VAR 0 4
44894: PPUSH
44895: LD_VAR 0 5
44899: PPUSH
44900: CALL_OW 488
44904: IFFALSE 44984
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44906: LD_VAR 0 2
44910: PPUSH
44911: CALL_OW 247
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: IN
44926: PUSH
44927: LD_VAR 0 1
44931: PPUSH
44932: CALL_OW 255
44936: PPUSH
44937: LD_VAR 0 2
44941: PPUSH
44942: CALL_OW 292
44946: OR
44947: IFFALSE 44965
// ComAttackUnit ( unit , enemy ) else
44949: LD_VAR 0 1
44953: PPUSH
44954: LD_VAR 0 2
44958: PPUSH
44959: CALL_OW 115
44963: GO 44984
// ComAgressiveMove ( unit , x , y ) ;
44965: LD_VAR 0 1
44969: PPUSH
44970: LD_VAR 0 4
44974: PPUSH
44975: LD_VAR 0 5
44979: PPUSH
44980: CALL_OW 114
// end ;
44984: LD_VAR 0 3
44988: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44989: LD_INT 0
44991: PPUSH
44992: PPUSH
44993: PPUSH
// list := AreaToList ( area , 0 ) ;
44994: LD_ADDR_VAR 0 5
44998: PUSH
44999: LD_VAR 0 1
45003: PPUSH
45004: LD_INT 0
45006: PPUSH
45007: CALL_OW 517
45011: ST_TO_ADDR
// if not list then
45012: LD_VAR 0 5
45016: NOT
45017: IFFALSE 45021
// exit ;
45019: GO 45151
// if all then
45021: LD_VAR 0 2
45025: IFFALSE 45113
// begin for i := 1 to list [ 1 ] do
45027: LD_ADDR_VAR 0 4
45031: PUSH
45032: DOUBLE
45033: LD_INT 1
45035: DEC
45036: ST_TO_ADDR
45037: LD_VAR 0 5
45041: PUSH
45042: LD_INT 1
45044: ARRAY
45045: PUSH
45046: FOR_TO
45047: IFFALSE 45109
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45049: LD_ADDR_VAR 0 3
45053: PUSH
45054: LD_VAR 0 3
45058: PPUSH
45059: LD_VAR 0 3
45063: PUSH
45064: LD_INT 1
45066: PLUS
45067: PPUSH
45068: LD_VAR 0 5
45072: PUSH
45073: LD_INT 1
45075: ARRAY
45076: PUSH
45077: LD_VAR 0 4
45081: ARRAY
45082: PUSH
45083: LD_VAR 0 5
45087: PUSH
45088: LD_INT 2
45090: ARRAY
45091: PUSH
45092: LD_VAR 0 4
45096: ARRAY
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PPUSH
45102: CALL_OW 1
45106: ST_TO_ADDR
45107: GO 45046
45109: POP
45110: POP
// exit ;
45111: GO 45151
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45113: LD_ADDR_VAR 0 3
45117: PUSH
45118: LD_VAR 0 5
45122: PUSH
45123: LD_INT 1
45125: ARRAY
45126: PUSH
45127: LD_INT 1
45129: ARRAY
45130: PUSH
45131: LD_VAR 0 5
45135: PUSH
45136: LD_INT 2
45138: ARRAY
45139: PUSH
45140: LD_INT 1
45142: ARRAY
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: EMPTY
45149: LIST
45150: ST_TO_ADDR
// end ;
45151: LD_VAR 0 3
45155: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45156: LD_INT 0
45158: PPUSH
45159: PPUSH
// list := AreaToList ( area , 0 ) ;
45160: LD_ADDR_VAR 0 4
45164: PUSH
45165: LD_VAR 0 1
45169: PPUSH
45170: LD_INT 0
45172: PPUSH
45173: CALL_OW 517
45177: ST_TO_ADDR
// if not list then
45178: LD_VAR 0 4
45182: NOT
45183: IFFALSE 45187
// exit ;
45185: GO 45228
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45187: LD_ADDR_VAR 0 3
45191: PUSH
45192: LD_VAR 0 4
45196: PUSH
45197: LD_INT 1
45199: ARRAY
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: PUSH
45205: LD_VAR 0 4
45209: PUSH
45210: LD_INT 2
45212: ARRAY
45213: PUSH
45214: LD_INT 1
45216: ARRAY
45217: PUSH
45218: LD_VAR 0 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// end ;
45228: LD_VAR 0 3
45232: RET
// export function First ( array ) ; begin
45233: LD_INT 0
45235: PPUSH
// if not array then
45236: LD_VAR 0 1
45240: NOT
45241: IFFALSE 45245
// exit ;
45243: GO 45259
// result := array [ 1 ] ;
45245: LD_ADDR_VAR 0 2
45249: PUSH
45250: LD_VAR 0 1
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: ST_TO_ADDR
// end ;
45259: LD_VAR 0 2
45263: RET
// export function Last ( array ) ; begin
45264: LD_INT 0
45266: PPUSH
// if not array then
45267: LD_VAR 0 1
45271: NOT
45272: IFFALSE 45276
// exit ;
45274: GO 45292
// result := array [ array ] ;
45276: LD_ADDR_VAR 0 2
45280: PUSH
45281: LD_VAR 0 1
45285: PUSH
45286: LD_VAR 0 1
45290: ARRAY
45291: ST_TO_ADDR
// end ;
45292: LD_VAR 0 2
45296: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45297: LD_INT 0
45299: PPUSH
45300: PPUSH
// result := [ ] ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: EMPTY
45307: ST_TO_ADDR
// if not array then
45308: LD_VAR 0 1
45312: NOT
45313: IFFALSE 45317
// exit ;
45315: GO 45429
// for i := 1 to array do
45317: LD_ADDR_VAR 0 6
45321: PUSH
45322: DOUBLE
45323: LD_INT 1
45325: DEC
45326: ST_TO_ADDR
45327: LD_VAR 0 1
45331: PUSH
45332: FOR_TO
45333: IFFALSE 45427
// if array [ i ] [ index ] = value then
45335: LD_VAR 0 1
45339: PUSH
45340: LD_VAR 0 6
45344: ARRAY
45345: PUSH
45346: LD_VAR 0 2
45350: ARRAY
45351: PUSH
45352: LD_VAR 0 3
45356: EQUAL
45357: IFFALSE 45425
// begin if indexColumn then
45359: LD_VAR 0 4
45363: IFFALSE 45399
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45365: LD_ADDR_VAR 0 5
45369: PUSH
45370: LD_VAR 0 5
45374: PPUSH
45375: LD_VAR 0 1
45379: PUSH
45380: LD_VAR 0 6
45384: ARRAY
45385: PUSH
45386: LD_VAR 0 4
45390: ARRAY
45391: PPUSH
45392: CALL 40617 0 2
45396: ST_TO_ADDR
45397: GO 45425
// result := Join ( result , array [ i ] ) ;
45399: LD_ADDR_VAR 0 5
45403: PUSH
45404: LD_VAR 0 5
45408: PPUSH
45409: LD_VAR 0 1
45413: PUSH
45414: LD_VAR 0 6
45418: ARRAY
45419: PPUSH
45420: CALL 40617 0 2
45424: ST_TO_ADDR
// end ;
45425: GO 45332
45427: POP
45428: POP
// end ;
45429: LD_VAR 0 5
45433: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45434: LD_INT 0
45436: PPUSH
// if not vehicles or not parkingPoint then
45437: LD_VAR 0 1
45441: NOT
45442: PUSH
45443: LD_VAR 0 2
45447: NOT
45448: OR
45449: IFFALSE 45453
// exit ;
45451: GO 45551
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45453: LD_ADDR_VAR 0 1
45457: PUSH
45458: LD_VAR 0 1
45462: PPUSH
45463: LD_INT 50
45465: PUSH
45466: EMPTY
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: LD_INT 92
45474: PUSH
45475: LD_VAR 0 2
45479: PUSH
45480: LD_INT 1
45482: ARRAY
45483: PUSH
45484: LD_VAR 0 2
45488: PUSH
45489: LD_INT 2
45491: ARRAY
45492: PUSH
45493: LD_INT 8
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PPUSH
45510: CALL_OW 72
45514: ST_TO_ADDR
// if not vehicles then
45515: LD_VAR 0 1
45519: NOT
45520: IFFALSE 45524
// exit ;
45522: GO 45551
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45524: LD_VAR 0 1
45528: PPUSH
45529: LD_VAR 0 2
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: PPUSH
45538: LD_VAR 0 2
45542: PUSH
45543: LD_INT 2
45545: ARRAY
45546: PPUSH
45547: CALL_OW 111
// end ;
45551: LD_VAR 0 3
45555: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45556: LD_INT 0
45558: PPUSH
45559: PPUSH
45560: PPUSH
// if not side or not area then
45561: LD_VAR 0 1
45565: NOT
45566: PUSH
45567: LD_VAR 0 2
45571: NOT
45572: OR
45573: IFFALSE 45577
// exit ;
45575: GO 45696
// tmp := AreaToList ( area , 0 ) ;
45577: LD_ADDR_VAR 0 5
45581: PUSH
45582: LD_VAR 0 2
45586: PPUSH
45587: LD_INT 0
45589: PPUSH
45590: CALL_OW 517
45594: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45595: LD_ADDR_VAR 0 4
45599: PUSH
45600: DOUBLE
45601: LD_INT 1
45603: DEC
45604: ST_TO_ADDR
45605: LD_VAR 0 5
45609: PUSH
45610: LD_INT 1
45612: ARRAY
45613: PUSH
45614: FOR_TO
45615: IFFALSE 45694
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45617: LD_VAR 0 5
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: PUSH
45626: LD_VAR 0 4
45630: ARRAY
45631: PPUSH
45632: LD_VAR 0 5
45636: PUSH
45637: LD_INT 2
45639: ARRAY
45640: PUSH
45641: LD_VAR 0 4
45645: ARRAY
45646: PPUSH
45647: CALL_OW 351
45651: IFFALSE 45692
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45653: LD_VAR 0 5
45657: PUSH
45658: LD_INT 1
45660: ARRAY
45661: PUSH
45662: LD_VAR 0 4
45666: ARRAY
45667: PPUSH
45668: LD_VAR 0 5
45672: PUSH
45673: LD_INT 2
45675: ARRAY
45676: PUSH
45677: LD_VAR 0 4
45681: ARRAY
45682: PPUSH
45683: LD_VAR 0 1
45687: PPUSH
45688: CALL_OW 244
// end ;
45692: GO 45614
45694: POP
45695: POP
// end ; end_of_file
45696: LD_VAR 0 3
45700: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
// disable ( mpActive ) ;
45705: LD_INT 100
45707: DISABLE_MARKED
// disable ( mpWin ) ;
45708: LD_INT 101
45710: DISABLE_MARKED
// disable ( mpLose ) ;
45711: LD_INT 102
45713: DISABLE_MARKED
// mpGameType := 0 ;
45714: LD_ADDR_EXP 1
45718: PUSH
45719: LD_INT 0
45721: ST_TO_ADDR
// mpGameSettings := [ ] ;
45722: LD_ADDR_EXP 4
45726: PUSH
45727: EMPTY
45728: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45729: LD_ADDR_EXP 2
45733: PUSH
45734: EMPTY
45735: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45736: LD_ADDR_EXP 3
45740: PUSH
45741: EMPTY
45742: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45743: LD_ADDR_EXP 27
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45758: LD_ADDR_EXP 10
45762: PUSH
45763: EMPTY
45764: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45765: LD_ADDR_EXP 11
45769: PUSH
45770: EMPTY
45771: ST_TO_ADDR
// mpDepots := [ ] ;
45772: LD_ADDR_EXP 12
45776: PUSH
45777: EMPTY
45778: ST_TO_ADDR
// mpBuildings := [ ] ;
45779: LD_ADDR_EXP 15
45783: PUSH
45784: EMPTY
45785: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45786: LD_ADDR_EXP 16
45790: PUSH
45791: EMPTY
45792: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45793: LD_ADDR_EXP 17
45797: PUSH
45798: EMPTY
45799: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45800: LD_ADDR_EXP 18
45804: PUSH
45805: EMPTY
45806: ST_TO_ADDR
// mpStartingResources := [ ] ;
45807: LD_ADDR_EXP 13
45811: PUSH
45812: EMPTY
45813: ST_TO_ADDR
// mpStartPos := [ ] ;
45814: LD_ADDR_EXP 19
45818: PUSH
45819: EMPTY
45820: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45821: LD_ADDR_EXP 20
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45830: LD_ADDR_EXP 21
45834: PUSH
45835: EMPTY
45836: ST_TO_ADDR
// mpApemans := [ ] ;
45837: LD_ADDR_EXP 28
45841: PUSH
45842: EMPTY
45843: ST_TO_ADDR
// mpApemansArea := [ ] ;
45844: LD_ADDR_EXP 29
45848: PUSH
45849: EMPTY
45850: ST_TO_ADDR
// mpRespawn := [ ] ;
45851: LD_ADDR_EXP 30
45855: PUSH
45856: EMPTY
45857: ST_TO_ADDR
// mpKingArea := 0 ;
45858: LD_ADDR_EXP 31
45862: PUSH
45863: LD_INT 0
45865: ST_TO_ADDR
// mpPoints := [ ] ;
45866: LD_ADDR_EXP 32
45870: PUSH
45871: EMPTY
45872: ST_TO_ADDR
// mpVehicles := 0 ;
45873: LD_ADDR_EXP 33
45877: PUSH
45878: LD_INT 0
45880: ST_TO_ADDR
// mpShipments := 0 ;
45881: LD_ADDR_EXP 25
45885: PUSH
45886: LD_INT 0
45888: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45889: LD_ADDR_EXP 37
45893: PUSH
45894: EMPTY
45895: PUSH
45896: EMPTY
45897: PUSH
45898: EMPTY
45899: PUSH
45900: EMPTY
45901: PUSH
45902: EMPTY
45903: PUSH
45904: EMPTY
45905: PUSH
45906: EMPTY
45907: PUSH
45908: EMPTY
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// mpEmissions := 0 ;
45920: LD_ADDR_EXP 34
45924: PUSH
45925: LD_INT 0
45927: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45928: LD_ADDR_EXP 23
45932: PUSH
45933: LD_INT 3
45935: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45936: LD_ADDR_EXP 22
45940: PUSH
45941: LD_INT 15
45943: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45944: LD_ADDR_EXP 35
45948: PUSH
45949: LD_INT 0
45951: ST_TO_ADDR
// mpGameActive := false ;
45952: LD_ADDR_EXP 36
45956: PUSH
45957: LD_INT 0
45959: ST_TO_ADDR
// mpBlockRespThread := false ;
45960: LD_ADDR_EXP 38
45964: PUSH
45965: LD_INT 0
45967: ST_TO_ADDR
// for i := 1 to 32 do
45968: LD_ADDR_VAR 0 2
45972: PUSH
45973: DOUBLE
45974: LD_INT 1
45976: DEC
45977: ST_TO_ADDR
45978: LD_INT 32
45980: PUSH
45981: FOR_TO
45982: IFFALSE 46009
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45984: LD_ADDR_EXP 4
45988: PUSH
45989: LD_EXP 4
45993: PPUSH
45994: LD_VAR 0 2
45998: PPUSH
45999: LD_INT 0
46001: PPUSH
46002: CALL_OW 1
46006: ST_TO_ADDR
46007: GO 45981
46009: POP
46010: POP
// end ;
46011: LD_VAR 0 1
46015: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46016: LD_INT 0
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
46022: PPUSH
46023: PPUSH
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46032: LD_ADDR_VAR 0 14
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// for i in gameTypes do
46051: LD_ADDR_VAR 0 2
46055: PUSH
46056: LD_VAR 0 14
46060: PUSH
46061: FOR_IN
46062: IFFALSE 46071
// disable ( i ) ;
46064: LD_VAR 0 2
46068: DISABLE_MARKED
46069: GO 46061
46071: POP
46072: POP
// if Multiplayer then
46073: LD_OWVAR 4
46077: IFFALSE 46261
// begin mpGameType := mp_game_type ;
46079: LD_ADDR_EXP 1
46083: PUSH
46084: LD_OWVAR 6
46088: ST_TO_ADDR
// your_side := mp_player_side ;
46089: LD_ADDR_OWVAR 2
46093: PUSH
46094: LD_OWVAR 7
46098: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46099: LD_ADDR_EXP 5
46103: PUSH
46104: LD_OWVAR 17
46108: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46109: LD_ADDR_EXP 6
46113: PUSH
46114: LD_OWVAR 15
46118: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46119: LD_ADDR_EXP 7
46123: PUSH
46124: LD_OWVAR 16
46128: ST_TO_ADDR
// mpTeams := mp_teams ;
46129: LD_ADDR_EXP 8
46133: PUSH
46134: LD_OWVAR 12
46138: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46139: LD_ADDR_VAR 0 2
46143: PUSH
46144: DOUBLE
46145: LD_INT 1
46147: DEC
46148: ST_TO_ADDR
46149: LD_EXP 2
46153: PPUSH
46154: CALL 5028 0 1
46158: PUSH
46159: FOR_TO
46160: IFFALSE 46236
// begin setting := mpGameSettingsKeys [ i ] ;
46162: LD_ADDR_VAR 0 12
46166: PUSH
46167: LD_EXP 2
46171: PUSH
46172: LD_VAR 0 2
46176: ARRAY
46177: ST_TO_ADDR
// if setting then
46178: LD_VAR 0 12
46182: IFFALSE 46234
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46184: LD_ADDR_EXP 4
46188: PUSH
46189: LD_EXP 4
46193: PPUSH
46194: LD_VAR 0 2
46198: PPUSH
46199: LD_EXP 3
46203: PUSH
46204: LD_VAR 0 2
46208: ARRAY
46209: PUSH
46210: LD_VAR 0 2
46214: PUSH
46215: LD_INT 1
46217: MINUS
46218: PPUSH
46219: CALL_OW 426
46223: PUSH
46224: LD_INT 1
46226: PLUS
46227: ARRAY
46228: PPUSH
46229: CALL_OW 1
46233: ST_TO_ADDR
// end ;
46234: GO 46159
46236: POP
46237: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46238: LD_ADDR_EXP 9
46242: PUSH
46243: LD_EXP 6
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: DIFF
46254: PUSH
46255: LD_INT 1
46257: GREATER
46258: ST_TO_ADDR
// end else
46259: GO 46261
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46261: LD_EXP 1
46265: PPUSH
46266: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46270: LD_EXP 16
46274: PPUSH
46275: CALL 5028 0 1
46279: IFFALSE 46310
// begin for i in mpMarkedAreas do
46281: LD_ADDR_VAR 0 2
46285: PUSH
46286: LD_EXP 16
46290: PUSH
46291: FOR_IN
46292: IFFALSE 46308
// SetAreaMapShow ( i , 0 ) ;
46294: LD_VAR 0 2
46298: PPUSH
46299: LD_INT 0
46301: PPUSH
46302: CALL_OW 424
46306: GO 46291
46308: POP
46309: POP
// end ; for i := 1 to 8 do
46310: LD_ADDR_VAR 0 2
46314: PUSH
46315: DOUBLE
46316: LD_INT 1
46318: DEC
46319: ST_TO_ADDR
46320: LD_INT 8
46322: PUSH
46323: FOR_TO
46324: IFFALSE 47540
// begin if not mpSidePositions [ i ] then
46326: LD_EXP 5
46330: PUSH
46331: LD_VAR 0 2
46335: ARRAY
46336: NOT
46337: IFFALSE 46341
// continue ;
46339: GO 46323
// side := i ;
46341: LD_ADDR_VAR 0 7
46345: PUSH
46346: LD_VAR 0 2
46350: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46351: LD_ADDR_VAR 0 9
46355: PUSH
46356: LD_EXP 7
46360: PUSH
46361: LD_VAR 0 2
46365: ARRAY
46366: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46367: LD_ADDR_VAR 0 8
46371: PUSH
46372: LD_EXP 5
46376: PUSH
46377: LD_VAR 0 2
46381: ARRAY
46382: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46383: LD_EXP 10
46387: PPUSH
46388: CALL 5028 0 1
46392: IFFALSE 46469
// begin for j in mpOilDeposits [ pos ] do
46394: LD_ADDR_VAR 0 3
46398: PUSH
46399: LD_EXP 10
46403: PUSH
46404: LD_VAR 0 8
46408: ARRAY
46409: PUSH
46410: FOR_IN
46411: IFFALSE 46467
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46413: LD_VAR 0 3
46417: PUSH
46418: LD_INT 1
46420: ARRAY
46421: PPUSH
46422: LD_VAR 0 3
46426: PUSH
46427: LD_INT 2
46429: ARRAY
46430: PPUSH
46431: LD_INT 2
46433: PPUSH
46434: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46438: LD_VAR 0 3
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: PPUSH
46447: LD_VAR 0 3
46451: PUSH
46452: LD_INT 2
46454: ARRAY
46455: PPUSH
46456: LD_VAR 0 7
46460: PPUSH
46461: CALL_OW 441
// end ;
46465: GO 46410
46467: POP
46468: POP
// end ; if Count ( mpSibDeposits ) then
46469: LD_EXP 11
46473: PPUSH
46474: CALL 5028 0 1
46478: IFFALSE 46555
// begin for j in mpSibDeposits [ pos ] do
46480: LD_ADDR_VAR 0 3
46484: PUSH
46485: LD_EXP 11
46489: PUSH
46490: LD_VAR 0 8
46494: ARRAY
46495: PUSH
46496: FOR_IN
46497: IFFALSE 46553
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46499: LD_VAR 0 3
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PPUSH
46508: LD_VAR 0 3
46512: PUSH
46513: LD_INT 2
46515: ARRAY
46516: PPUSH
46517: LD_INT 3
46519: PPUSH
46520: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46524: LD_VAR 0 3
46528: PUSH
46529: LD_INT 1
46531: ARRAY
46532: PPUSH
46533: LD_VAR 0 3
46537: PUSH
46538: LD_INT 2
46540: ARRAY
46541: PPUSH
46542: LD_VAR 0 7
46546: PPUSH
46547: CALL_OW 441
// end ;
46551: GO 46496
46553: POP
46554: POP
// end ; InitBc ;
46555: CALL_OW 21
// InitUc ;
46559: CALL_OW 18
// uc_side := side ;
46563: LD_ADDR_OWVAR 20
46567: PUSH
46568: LD_VAR 0 7
46572: ST_TO_ADDR
// uc_nation := nation ;
46573: LD_ADDR_OWVAR 21
46577: PUSH
46578: LD_VAR 0 9
46582: ST_TO_ADDR
// if Count ( mpDepots ) then
46583: LD_EXP 12
46587: PPUSH
46588: CALL 5028 0 1
46592: IFFALSE 46762
// begin bc_level := 0 ;
46594: LD_ADDR_OWVAR 43
46598: PUSH
46599: LD_INT 0
46601: ST_TO_ADDR
// bc_type := b_depot ;
46602: LD_ADDR_OWVAR 42
46606: PUSH
46607: LD_INT 0
46609: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46610: LD_ADDR_VAR 0 4
46614: PUSH
46615: LD_EXP 12
46619: PUSH
46620: LD_VAR 0 8
46624: ARRAY
46625: PUSH
46626: LD_INT 1
46628: ARRAY
46629: PPUSH
46630: LD_EXP 12
46634: PUSH
46635: LD_VAR 0 8
46639: ARRAY
46640: PUSH
46641: LD_INT 2
46643: ARRAY
46644: PPUSH
46645: LD_EXP 12
46649: PUSH
46650: LD_VAR 0 8
46654: ARRAY
46655: PUSH
46656: LD_INT 3
46658: ARRAY
46659: PPUSH
46660: CALL_OW 47
46664: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46665: LD_VAR 0 4
46669: PPUSH
46670: LD_STRING @
46672: PUSH
46673: LD_VAR 0 7
46677: STR
46678: PPUSH
46679: CALL_OW 500
// SetTag ( b , side ) ;
46683: LD_VAR 0 4
46687: PPUSH
46688: LD_VAR 0 7
46692: PPUSH
46693: CALL_OW 109
// if Count ( mpStartingResources ) then
46697: LD_EXP 13
46701: PPUSH
46702: CALL 5028 0 1
46706: IFFALSE 46760
// begin for j := 1 to mpStartingResources do
46708: LD_ADDR_VAR 0 3
46712: PUSH
46713: DOUBLE
46714: LD_INT 1
46716: DEC
46717: ST_TO_ADDR
46718: LD_EXP 13
46722: PUSH
46723: FOR_TO
46724: IFFALSE 46758
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46726: LD_VAR 0 4
46730: PPUSH
46731: CALL_OW 274
46735: PPUSH
46736: LD_VAR 0 3
46740: PPUSH
46741: LD_EXP 13
46745: PUSH
46746: LD_VAR 0 3
46750: ARRAY
46751: PPUSH
46752: CALL_OW 277
46756: GO 46723
46758: POP
46759: POP
// end ; end else
46760: GO 46909
// if Count ( mpStartingResources ) then
46762: LD_EXP 13
46766: PPUSH
46767: CALL 5028 0 1
46771: IFFALSE 46909
// begin for j := 1 to mpStartingResources do
46773: LD_ADDR_VAR 0 3
46777: PUSH
46778: DOUBLE
46779: LD_INT 1
46781: DEC
46782: ST_TO_ADDR
46783: LD_EXP 13
46787: PUSH
46788: FOR_TO
46789: IFFALSE 46907
// begin resources := mpStartingResources [ j ] ;
46791: LD_ADDR_VAR 0 13
46795: PUSH
46796: LD_EXP 13
46800: PUSH
46801: LD_VAR 0 3
46805: ARRAY
46806: ST_TO_ADDR
// repeat if resources >= 50 then
46807: LD_VAR 0 13
46811: PUSH
46812: LD_INT 50
46814: GREATEREQUAL
46815: IFFALSE 46861
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46817: LD_VAR 0 3
46821: PPUSH
46822: LD_INT 5
46824: PPUSH
46825: LD_VAR 0 5
46829: PPUSH
46830: LD_VAR 0 6
46834: PPUSH
46835: LD_INT 4
46837: PPUSH
46838: LD_INT 0
46840: PPUSH
46841: CALL_OW 60
// resources := resources - 50 ;
46845: LD_ADDR_VAR 0 13
46849: PUSH
46850: LD_VAR 0 13
46854: PUSH
46855: LD_INT 50
46857: MINUS
46858: ST_TO_ADDR
// end else
46859: GO 46895
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46861: LD_VAR 0 3
46865: PPUSH
46866: LD_VAR 0 13
46870: PUSH
46871: LD_INT 10
46873: DIV
46874: PPUSH
46875: LD_VAR 0 5
46879: PPUSH
46880: LD_VAR 0 6
46884: PPUSH
46885: LD_INT 4
46887: PPUSH
46888: LD_INT 0
46890: PPUSH
46891: CALL_OW 60
// until resources <= 0 ;
46895: LD_VAR 0 13
46899: PUSH
46900: LD_INT 0
46902: LESSEQUAL
46903: IFFALSE 46807
// end ;
46905: GO 46788
46907: POP
46908: POP
// end ; if Count ( mpBuildings ) then
46909: LD_EXP 15
46913: PPUSH
46914: CALL 5028 0 1
46918: IFFALSE 46996
// begin for j in mpBuildings [ pos ] do
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_EXP 15
46929: PUSH
46930: LD_VAR 0 8
46934: ARRAY
46935: PUSH
46936: FOR_IN
46937: IFFALSE 46994
// begin bc_level := 0 ;
46939: LD_ADDR_OWVAR 43
46943: PUSH
46944: LD_INT 0
46946: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46947: LD_ADDR_OWVAR 42
46951: PUSH
46952: LD_VAR 0 3
46956: PUSH
46957: LD_INT 1
46959: ARRAY
46960: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46961: LD_VAR 0 3
46965: PUSH
46966: LD_INT 2
46968: ARRAY
46969: PPUSH
46970: LD_VAR 0 3
46974: PUSH
46975: LD_INT 3
46977: ARRAY
46978: PPUSH
46979: LD_VAR 0 3
46983: PUSH
46984: LD_INT 4
46986: ARRAY
46987: PPUSH
46988: CALL_OW 47
// end ;
46992: GO 46936
46994: POP
46995: POP
// end ; if mpBattleFlag > - 1 then
46996: LD_EXP 20
47000: PUSH
47001: LD_INT 1
47003: NEG
47004: GREATER
47005: IFFALSE 47164
// begin x := mpStartPos [ pos ] [ 1 ] ;
47007: LD_ADDR_VAR 0 5
47011: PUSH
47012: LD_EXP 19
47016: PUSH
47017: LD_VAR 0 8
47021: ARRAY
47022: PUSH
47023: LD_INT 1
47025: ARRAY
47026: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47027: LD_ADDR_VAR 0 6
47031: PUSH
47032: LD_EXP 19
47036: PUSH
47037: LD_VAR 0 8
47041: ARRAY
47042: PUSH
47043: LD_INT 2
47045: ARRAY
47046: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47047: LD_VAR 0 5
47051: PPUSH
47052: LD_VAR 0 6
47056: PPUSH
47057: LD_INT 12
47059: PPUSH
47060: LD_INT 2
47062: PPUSH
47063: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47067: LD_ADDR_EXP 21
47071: PUSH
47072: LD_EXP 21
47076: PPUSH
47077: LD_VAR 0 7
47081: PPUSH
47082: LD_VAR 0 7
47086: PPUSH
47087: LD_VAR 0 5
47091: PPUSH
47092: LD_VAR 0 6
47096: PPUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 100
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 70
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 40
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 10
47129: PUSH
47130: LD_INT 25
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 20
47139: PUSH
47140: LD_INT 100
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: PPUSH
47154: CALL_OW 418
47158: PPUSH
47159: CALL_OW 1
47163: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47164: LD_EXP 24
47168: PUSH
47169: LD_INT 20
47171: PPUSH
47172: LD_VAR 0 7
47176: PPUSH
47177: CALL_OW 321
47181: PUSH
47182: LD_INT 1
47184: EQUAL
47185: AND
47186: IFFALSE 47203
// SetTech ( tech_SibDet , side , state_researched ) ;
47188: LD_INT 20
47190: PPUSH
47191: LD_VAR 0 7
47195: PPUSH
47196: LD_INT 2
47198: PPUSH
47199: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47203: LD_INT 24
47205: PPUSH
47206: LD_VAR 0 7
47210: PPUSH
47211: LD_INT 0
47213: PPUSH
47214: CALL_OW 322
// if mpSibBomb = 1 then
47218: LD_EXP 26
47222: PUSH
47223: LD_INT 1
47225: EQUAL
47226: IFFALSE 47245
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47228: LD_INT 25
47230: PPUSH
47231: LD_VAR 0 7
47235: PPUSH
47236: LD_INT 1
47238: PPUSH
47239: CALL_OW 322
// end else
47243: GO 47260
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47245: LD_INT 25
47247: PPUSH
47248: LD_VAR 0 7
47252: PPUSH
47253: LD_INT 0
47255: PPUSH
47256: CALL_OW 322
// end ; if mpVehicles then
47260: LD_EXP 33
47264: IFFALSE 47363
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47266: LD_ADDR_VAR 0 3
47270: PUSH
47271: LD_VAR 0 7
47275: PPUSH
47276: LD_VAR 0 9
47280: PPUSH
47281: LD_EXP 33
47285: PPUSH
47286: CALL 48222 0 3
47290: PUSH
47291: FOR_IN
47292: IFFALSE 47361
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47294: LD_VAR 0 3
47298: PPUSH
47299: LD_INT 0
47301: PPUSH
47302: LD_INT 5
47304: PPUSH
47305: CALL_OW 12
47309: PPUSH
47310: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47314: LD_VAR 0 3
47318: PPUSH
47319: LD_EXP 19
47323: PUSH
47324: LD_VAR 0 8
47328: ARRAY
47329: PUSH
47330: LD_INT 1
47332: ARRAY
47333: PPUSH
47334: LD_EXP 19
47338: PUSH
47339: LD_VAR 0 8
47343: ARRAY
47344: PUSH
47345: LD_INT 2
47347: ARRAY
47348: PPUSH
47349: LD_INT 12
47351: PPUSH
47352: LD_INT 0
47354: PPUSH
47355: CALL_OW 50
// end ;
47359: GO 47291
47361: POP
47362: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47363: LD_ADDR_VAR 0 11
47367: PUSH
47368: LD_VAR 0 7
47372: PPUSH
47373: LD_VAR 0 9
47377: PPUSH
47378: LD_EXP 22
47382: PPUSH
47383: LD_EXP 23
47387: PPUSH
47388: CALL 47952 0 4
47392: ST_TO_ADDR
// for j in team do
47393: LD_ADDR_VAR 0 3
47397: PUSH
47398: LD_VAR 0 11
47402: PUSH
47403: FOR_IN
47404: IFFALSE 47453
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47406: LD_VAR 0 3
47410: PPUSH
47411: LD_EXP 19
47415: PUSH
47416: LD_VAR 0 8
47420: ARRAY
47421: PUSH
47422: LD_INT 1
47424: ARRAY
47425: PPUSH
47426: LD_EXP 19
47430: PUSH
47431: LD_VAR 0 8
47435: ARRAY
47436: PUSH
47437: LD_INT 2
47439: ARRAY
47440: PPUSH
47441: LD_INT 12
47443: PPUSH
47444: LD_INT 0
47446: PPUSH
47447: CALL_OW 50
47451: GO 47403
47453: POP
47454: POP
// if mpApemans then
47455: LD_EXP 28
47459: IFFALSE 47538
// begin for j := 1 to mpApemans do
47461: LD_ADDR_VAR 0 3
47465: PUSH
47466: DOUBLE
47467: LD_INT 1
47469: DEC
47470: ST_TO_ADDR
47471: LD_EXP 28
47475: PUSH
47476: FOR_TO
47477: IFFALSE 47536
// begin PrepareApeman ( - 5 ) ;
47479: LD_INT 5
47481: NEG
47482: PPUSH
47483: CALL 36885 0 1
// ape := CreateHuman ;
47487: LD_ADDR_VAR 0 10
47491: PUSH
47492: CALL_OW 44
47496: ST_TO_ADDR
// SetTag ( ape , side ) ;
47497: LD_VAR 0 10
47501: PPUSH
47502: LD_VAR 0 7
47506: PPUSH
47507: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47511: LD_VAR 0 10
47515: PPUSH
47516: LD_EXP 29
47520: PUSH
47521: LD_VAR 0 8
47525: ARRAY
47526: PPUSH
47527: LD_INT 0
47529: PPUSH
47530: CALL_OW 49
// end ;
47534: GO 47476
47536: POP
47537: POP
// end ; end ;
47538: GO 46323
47540: POP
47541: POP
// if not mpTeamGame then
47542: LD_EXP 9
47546: NOT
47547: IFFALSE 47645
// begin for i := 1 to 8 do
47549: LD_ADDR_VAR 0 2
47553: PUSH
47554: DOUBLE
47555: LD_INT 1
47557: DEC
47558: ST_TO_ADDR
47559: LD_INT 8
47561: PUSH
47562: FOR_TO
47563: IFFALSE 47641
// for j := 1 to 8 do
47565: LD_ADDR_VAR 0 3
47569: PUSH
47570: DOUBLE
47571: LD_INT 1
47573: DEC
47574: ST_TO_ADDR
47575: LD_INT 8
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47637
// if i <> j then
47581: LD_VAR 0 2
47585: PUSH
47586: LD_VAR 0 3
47590: NONEQUAL
47591: IFFALSE 47615
// SetAttitude ( i , j , att_neutral , true ) else
47593: LD_VAR 0 2
47597: PPUSH
47598: LD_VAR 0 3
47602: PPUSH
47603: LD_INT 0
47605: PPUSH
47606: LD_INT 1
47608: PPUSH
47609: CALL_OW 80
47613: GO 47635
// SetAttitude ( i , j , att_friend , true ) ;
47615: LD_VAR 0 2
47619: PPUSH
47620: LD_VAR 0 3
47624: PPUSH
47625: LD_INT 1
47627: PPUSH
47628: LD_INT 1
47630: PPUSH
47631: CALL_OW 80
47635: GO 47578
47637: POP
47638: POP
47639: GO 47562
47641: POP
47642: POP
// end else
47643: GO 47820
// begin if mpSharedVision then
47645: LD_EXP 14
47649: IFFALSE 47714
// begin for i in mpTeams do
47651: LD_ADDR_VAR 0 2
47655: PUSH
47656: LD_EXP 8
47660: PUSH
47661: FOR_IN
47662: IFFALSE 47712
// for j := 2 to i do
47664: LD_ADDR_VAR 0 3
47668: PUSH
47669: DOUBLE
47670: LD_INT 2
47672: DEC
47673: ST_TO_ADDR
47674: LD_VAR 0 2
47678: PUSH
47679: FOR_TO
47680: IFFALSE 47708
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47682: LD_VAR 0 2
47686: PUSH
47687: LD_VAR 0 3
47691: ARRAY
47692: PPUSH
47693: LD_VAR 0 2
47697: PUSH
47698: LD_INT 1
47700: ARRAY
47701: PPUSH
47702: CALL_OW 343
47706: GO 47679
47708: POP
47709: POP
47710: GO 47661
47712: POP
47713: POP
// end ; for i := 1 to 8 do
47714: LD_ADDR_VAR 0 2
47718: PUSH
47719: DOUBLE
47720: LD_INT 1
47722: DEC
47723: ST_TO_ADDR
47724: LD_INT 8
47726: PUSH
47727: FOR_TO
47728: IFFALSE 47818
// for j := 1 to 8 do
47730: LD_ADDR_VAR 0 3
47734: PUSH
47735: DOUBLE
47736: LD_INT 1
47738: DEC
47739: ST_TO_ADDR
47740: LD_INT 8
47742: PUSH
47743: FOR_TO
47744: IFFALSE 47814
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47746: LD_EXP 6
47750: PUSH
47751: LD_VAR 0 2
47755: ARRAY
47756: PUSH
47757: LD_EXP 6
47761: PUSH
47762: LD_VAR 0 3
47766: ARRAY
47767: EQUAL
47768: IFFALSE 47792
// SetAttitude ( i , j , att_friend , true ) else
47770: LD_VAR 0 2
47774: PPUSH
47775: LD_VAR 0 3
47779: PPUSH
47780: LD_INT 1
47782: PPUSH
47783: LD_INT 1
47785: PPUSH
47786: CALL_OW 80
47790: GO 47812
// SetAttitude ( i , j , att_enemy , true ) ;
47792: LD_VAR 0 2
47796: PPUSH
47797: LD_VAR 0 3
47801: PPUSH
47802: LD_INT 2
47804: PPUSH
47805: LD_INT 1
47807: PPUSH
47808: CALL_OW 80
47812: GO 47743
47814: POP
47815: POP
47816: GO 47727
47818: POP
47819: POP
// end ; music_nat := mpSideNations [ your_side ] ;
47820: LD_ADDR_OWVAR 71
47824: PUSH
47825: LD_EXP 7
47829: PUSH
47830: LD_OWVAR 2
47834: ARRAY
47835: ST_TO_ADDR
// if IAmSpec then
47836: CALL_OW 531
47840: IFFALSE 47881
// begin FogOff ( true ) ;
47842: LD_INT 1
47844: PPUSH
47845: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47849: LD_EXP 27
47853: PUSH
47854: LD_INT 1
47856: ARRAY
47857: PUSH
47858: LD_INT 2
47860: DIV
47861: PPUSH
47862: LD_EXP 27
47866: PUSH
47867: LD_INT 2
47869: ARRAY
47870: PUSH
47871: LD_INT 2
47873: DIV
47874: PPUSH
47875: CALL_OW 86
// end else
47879: GO 47927
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47881: LD_EXP 19
47885: PUSH
47886: LD_EXP 5
47890: PUSH
47891: LD_OWVAR 2
47895: ARRAY
47896: ARRAY
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: PPUSH
47902: LD_EXP 19
47906: PUSH
47907: LD_EXP 5
47911: PUSH
47912: LD_OWVAR 2
47916: ARRAY
47917: ARRAY
47918: PUSH
47919: LD_INT 2
47921: ARRAY
47922: PPUSH
47923: CALL_OW 86
// end ; BeginBuildUp ;
47927: CALL 48700 0 0
// enable ( mpActive ) ;
47931: LD_INT 100
47933: ENABLE_MARKED
// enable ( mpGameType ) ;
47934: LD_EXP 1
47938: ENABLE_MARKED
// mpGameActive := true ;
47939: LD_ADDR_EXP 36
47943: PUSH
47944: LD_INT 1
47946: ST_TO_ADDR
// end ;
47947: LD_VAR 0 1
47951: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47952: LD_INT 0
47954: PPUSH
47955: PPUSH
47956: PPUSH
// result := [ ] ;
47957: LD_ADDR_VAR 0 5
47961: PUSH
47962: EMPTY
47963: ST_TO_ADDR
// class := class_soldier ;
47964: LD_ADDR_VAR 0 7
47968: PUSH
47969: LD_INT 1
47971: ST_TO_ADDR
// uc_side := side ;
47972: LD_ADDR_OWVAR 20
47976: PUSH
47977: LD_VAR 0 1
47981: ST_TO_ADDR
// uc_nation := nation ;
47982: LD_ADDR_OWVAR 21
47986: PUSH
47987: LD_VAR 0 2
47991: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47992: LD_ADDR_OWVAR 26
47996: PUSH
47997: LD_OWVAR 19
48001: PUSH
48002: LD_VAR 0 1
48006: ARRAY
48007: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48008: LD_INT 1
48010: PPUSH
48011: LD_INT 2
48013: PPUSH
48014: CALL_OW 12
48018: PPUSH
48019: LD_VAR 0 7
48023: PPUSH
48024: LD_VAR 0 4
48028: PUSH
48029: LD_INT 2
48031: PLUS
48032: PPUSH
48033: CALL_OW 380
// hc_importance := 105 ;
48037: LD_ADDR_OWVAR 32
48041: PUSH
48042: LD_INT 105
48044: ST_TO_ADDR
// if Multiplayer then
48045: LD_OWVAR 4
48049: IFFALSE 48089
// begin hc_gallery := MULTIAVATARS ;
48051: LD_ADDR_OWVAR 33
48055: PUSH
48056: LD_STRING MULTIAVATARS
48058: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48059: LD_ADDR_OWVAR 34
48063: PUSH
48064: LD_VAR 0 1
48068: PPUSH
48069: CALL_OW 525
48073: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48074: LD_ADDR_OWVAR 27
48078: PUSH
48079: LD_VAR 0 1
48083: PPUSH
48084: CALL_OW 526
48088: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48089: LD_ADDR_VAR 0 5
48093: PUSH
48094: LD_VAR 0 5
48098: PPUSH
48099: CALL_OW 44
48103: PPUSH
48104: CALL 40617 0 2
48108: ST_TO_ADDR
// InitHc_All ( ) ;
48109: CALL_OW 584
// class := 2 ;
48113: LD_ADDR_VAR 0 7
48117: PUSH
48118: LD_INT 2
48120: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48121: LD_ADDR_VAR 0 6
48125: PUSH
48126: DOUBLE
48127: LD_INT 1
48129: DEC
48130: ST_TO_ADDR
48131: LD_VAR 0 3
48135: PUSH
48136: LD_INT 1
48138: MINUS
48139: PUSH
48140: FOR_TO
48141: IFFALSE 48215
// begin PrepareHuman ( false , class , skill ) ;
48143: LD_INT 0
48145: PPUSH
48146: LD_VAR 0 7
48150: PPUSH
48151: LD_VAR 0 4
48155: PPUSH
48156: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48160: LD_ADDR_VAR 0 5
48164: PUSH
48165: LD_VAR 0 5
48169: PPUSH
48170: CALL_OW 44
48174: PPUSH
48175: CALL 40617 0 2
48179: ST_TO_ADDR
// class := Inc ( class ) ;
48180: LD_ADDR_VAR 0 7
48184: PUSH
48185: LD_VAR 0 7
48189: PPUSH
48190: CALL 41978 0 1
48194: ST_TO_ADDR
// if class = 5 then
48195: LD_VAR 0 7
48199: PUSH
48200: LD_INT 5
48202: EQUAL
48203: IFFALSE 48213
// class := 1 ;
48205: LD_ADDR_VAR 0 7
48209: PUSH
48210: LD_INT 1
48212: ST_TO_ADDR
// end ;
48213: GO 48140
48215: POP
48216: POP
// end ;
48217: LD_VAR 0 5
48221: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48222: LD_INT 0
48224: PPUSH
48225: PPUSH
// result := [ ] ;
48226: LD_ADDR_VAR 0 4
48230: PUSH
48231: EMPTY
48232: ST_TO_ADDR
// if not vehicles then
48233: LD_VAR 0 3
48237: NOT
48238: IFFALSE 48242
// exit ;
48240: GO 48401
// for i := 1 to vehicles [ nation ] do
48242: LD_ADDR_VAR 0 5
48246: PUSH
48247: DOUBLE
48248: LD_INT 1
48250: DEC
48251: ST_TO_ADDR
48252: LD_VAR 0 3
48256: PUSH
48257: LD_VAR 0 2
48261: ARRAY
48262: PUSH
48263: FOR_TO
48264: IFFALSE 48399
// begin uc_side := side ;
48266: LD_ADDR_OWVAR 20
48270: PUSH
48271: LD_VAR 0 1
48275: ST_TO_ADDR
// uc_nation := nation ;
48276: LD_ADDR_OWVAR 21
48280: PUSH
48281: LD_VAR 0 2
48285: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48286: LD_VAR 0 3
48290: PUSH
48291: LD_VAR 0 2
48295: ARRAY
48296: PUSH
48297: LD_VAR 0 5
48301: ARRAY
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PPUSH
48307: LD_VAR 0 3
48311: PUSH
48312: LD_VAR 0 2
48316: ARRAY
48317: PUSH
48318: LD_VAR 0 5
48322: ARRAY
48323: PUSH
48324: LD_INT 2
48326: ARRAY
48327: PPUSH
48328: LD_VAR 0 3
48332: PUSH
48333: LD_VAR 0 2
48337: ARRAY
48338: PUSH
48339: LD_VAR 0 5
48343: ARRAY
48344: PUSH
48345: LD_INT 3
48347: ARRAY
48348: PPUSH
48349: LD_VAR 0 3
48353: PUSH
48354: LD_VAR 0 2
48358: ARRAY
48359: PUSH
48360: LD_VAR 0 5
48364: ARRAY
48365: PUSH
48366: LD_INT 4
48368: ARRAY
48369: PPUSH
48370: LD_INT 80
48372: PPUSH
48373: CALL 7766 0 5
// result := Join ( result , CreateVehicle ) ;
48377: LD_ADDR_VAR 0 4
48381: PUSH
48382: LD_VAR 0 4
48386: PPUSH
48387: CALL_OW 45
48391: PPUSH
48392: CALL 40617 0 2
48396: ST_TO_ADDR
// end ;
48397: GO 48263
48399: POP
48400: POP
// end ;
48401: LD_VAR 0 4
48405: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48406: LD_INT 0
48408: PPUSH
48409: PPUSH
// for i in mpBattleFlags do
48410: LD_ADDR_VAR 0 3
48414: PUSH
48415: LD_EXP 21
48419: PUSH
48420: FOR_IN
48421: IFFALSE 48498
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48423: LD_VAR 0 3
48427: PPUSH
48428: LD_INT 1
48430: PUSH
48431: LD_VAR 0 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_VAR 0 1
48447: PUSH
48448: LD_REAL  7.00000000000000E-0001
48451: MUL
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_VAR 0 1
48464: PUSH
48465: LD_REAL  4.00000000000000E-0001
48468: MUL
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 20
48476: PUSH
48477: LD_VAR 0 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: PPUSH
48492: CALL_OW 423
48496: GO 48420
48498: POP
48499: POP
// end ;
48500: LD_VAR 0 2
48504: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48505: LD_INT 100
48507: IFFALSE 48602
48509: GO 48511
48511: DISABLE
48512: LD_INT 0
48514: PPUSH
48515: PPUSH
// begin if mpBattleFlag <= 0 then
48516: LD_EXP 20
48520: PUSH
48521: LD_INT 0
48523: LESSEQUAL
48524: IFFALSE 48528
// exit ;
48526: GO 48602
// strength := 100 ;
48528: LD_ADDR_VAR 0 2
48532: PUSH
48533: LD_INT 100
48535: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48536: LD_EXP 20
48540: PPUSH
48541: CALL_OW 67
// strength := Dec ( strength ) ;
48545: LD_ADDR_VAR 0 2
48549: PUSH
48550: LD_VAR 0 2
48554: PPUSH
48555: CALL 42000 0 1
48559: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48560: LD_VAR 0 2
48564: PPUSH
48565: CALL 48406 0 1
// until not strength ;
48569: LD_VAR 0 2
48573: NOT
48574: IFFALSE 48536
// for i in mpBattleFlags do
48576: LD_ADDR_VAR 0 1
48580: PUSH
48581: LD_EXP 21
48585: PUSH
48586: FOR_IN
48587: IFFALSE 48600
// KillBattleFlag ( i ) ;
48589: LD_VAR 0 1
48593: PPUSH
48594: CALL_OW 419
48598: GO 48586
48600: POP
48601: POP
// end ;
48602: PPOPN 2
48604: END
// every 0 0$1 marked mpActive do var side , tmp ;
48605: GO 48607
48607: DISABLE
48608: LD_INT 0
48610: PPUSH
48611: PPUSH
// begin if mpSibBomb <= 1 then
48612: LD_EXP 26
48616: PUSH
48617: LD_INT 1
48619: LESSEQUAL
48620: IFFALSE 48624
// exit ;
48622: GO 48697
// tmp := mpSibBomb ;
48624: LD_ADDR_VAR 0 2
48628: PUSH
48629: LD_EXP 26
48633: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48634: LD_INT 35
48636: PPUSH
48637: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48641: LD_ADDR_VAR 0 2
48645: PUSH
48646: LD_VAR 0 2
48650: PUSH
48651: LD_INT 35
48653: MINUS
48654: ST_TO_ADDR
// until not tmp ;
48655: LD_VAR 0 2
48659: NOT
48660: IFFALSE 48634
// for side := 1 to 8 do
48662: LD_ADDR_VAR 0 1
48666: PUSH
48667: DOUBLE
48668: LD_INT 1
48670: DEC
48671: ST_TO_ADDR
48672: LD_INT 8
48674: PUSH
48675: FOR_TO
48676: IFFALSE 48695
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48678: LD_INT 25
48680: PPUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: LD_INT 1
48688: PPUSH
48689: CALL_OW 322
48693: GO 48675
48695: POP
48696: POP
// end ;
48697: PPOPN 2
48699: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48700: LD_INT 0
48702: PPUSH
48703: PPUSH
48704: PPUSH
// mpBuildUpTimeDelay := 0 ;
48705: LD_ADDR_EXP 39
48709: PUSH
48710: LD_INT 0
48712: ST_TO_ADDR
// if not mpBuildUpTime then
48713: LD_EXP 18
48717: NOT
48718: IFFALSE 48722
// exit ;
48720: GO 48905
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48722: LD_ADDR_EXP 39
48726: PUSH
48727: LD_INT 8400
48729: PUSH
48730: LD_INT 2100
48732: PUSH
48733: LD_EXP 18
48737: MUL
48738: PLUS
48739: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48740: LD_ADDR_EXP 40
48744: PUSH
48745: LD_INT 1
48747: ST_TO_ADDR
// for i := 1 to 8 do
48748: LD_ADDR_VAR 0 2
48752: PUSH
48753: DOUBLE
48754: LD_INT 1
48756: DEC
48757: ST_TO_ADDR
48758: LD_INT 8
48760: PUSH
48761: FOR_TO
48762: IFFALSE 48903
// if mpSidePositions [ i ] then
48764: LD_EXP 5
48768: PUSH
48769: LD_VAR 0 2
48773: ARRAY
48774: IFFALSE 48901
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48776: LD_EXP 17
48780: PUSH
48781: LD_EXP 5
48785: PUSH
48786: LD_VAR 0 2
48790: ARRAY
48791: ARRAY
48792: PPUSH
48793: LD_INT 5
48795: PPUSH
48796: CALL_OW 424
// for j := 1 to 8 do
48800: LD_ADDR_VAR 0 3
48804: PUSH
48805: DOUBLE
48806: LD_INT 1
48808: DEC
48809: ST_TO_ADDR
48810: LD_INT 8
48812: PUSH
48813: FOR_TO
48814: IFFALSE 48899
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48816: LD_EXP 5
48820: PUSH
48821: LD_VAR 0 3
48825: ARRAY
48826: PUSH
48827: LD_EXP 6
48831: PUSH
48832: LD_VAR 0 2
48836: ARRAY
48837: PUSH
48838: LD_EXP 6
48842: PUSH
48843: LD_VAR 0 3
48847: ARRAY
48848: NONEQUAL
48849: PUSH
48850: LD_EXP 9
48854: NOT
48855: PUSH
48856: LD_VAR 0 2
48860: PUSH
48861: LD_VAR 0 3
48865: NONEQUAL
48866: AND
48867: OR
48868: AND
48869: IFFALSE 48897
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48871: LD_VAR 0 3
48875: PPUSH
48876: LD_EXP 17
48880: PUSH
48881: LD_EXP 5
48885: PUSH
48886: LD_VAR 0 2
48890: ARRAY
48891: ARRAY
48892: PPUSH
48893: CALL_OW 333
48897: GO 48813
48899: POP
48900: POP
// end ;
48901: GO 48761
48903: POP
48904: POP
// end ;
48905: LD_VAR 0 1
48909: RET
// function EndBuildUp ; var i , j ; begin
48910: LD_INT 0
48912: PPUSH
48913: PPUSH
48914: PPUSH
// mpBuildUpTimeActive := false ;
48915: LD_ADDR_EXP 40
48919: PUSH
48920: LD_INT 0
48922: ST_TO_ADDR
// for i := 1 to 8 do
48923: LD_ADDR_VAR 0 2
48927: PUSH
48928: DOUBLE
48929: LD_INT 1
48931: DEC
48932: ST_TO_ADDR
48933: LD_INT 8
48935: PUSH
48936: FOR_TO
48937: IFFALSE 49078
// if mpSidePositions [ i ] then
48939: LD_EXP 5
48943: PUSH
48944: LD_VAR 0 2
48948: ARRAY
48949: IFFALSE 49076
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48951: LD_EXP 17
48955: PUSH
48956: LD_EXP 5
48960: PUSH
48961: LD_VAR 0 2
48965: ARRAY
48966: ARRAY
48967: PPUSH
48968: LD_INT 0
48970: PPUSH
48971: CALL_OW 424
// for j := 1 to 8 do
48975: LD_ADDR_VAR 0 3
48979: PUSH
48980: DOUBLE
48981: LD_INT 1
48983: DEC
48984: ST_TO_ADDR
48985: LD_INT 8
48987: PUSH
48988: FOR_TO
48989: IFFALSE 49074
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48991: LD_EXP 5
48995: PUSH
48996: LD_VAR 0 3
49000: ARRAY
49001: PUSH
49002: LD_EXP 6
49006: PUSH
49007: LD_VAR 0 2
49011: ARRAY
49012: PUSH
49013: LD_EXP 6
49017: PUSH
49018: LD_VAR 0 3
49022: ARRAY
49023: NONEQUAL
49024: PUSH
49025: LD_EXP 9
49029: NOT
49030: PUSH
49031: LD_VAR 0 2
49035: PUSH
49036: LD_VAR 0 3
49040: NONEQUAL
49041: AND
49042: OR
49043: AND
49044: IFFALSE 49072
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49046: LD_VAR 0 3
49050: PPUSH
49051: LD_EXP 17
49055: PUSH
49056: LD_EXP 5
49060: PUSH
49061: LD_VAR 0 2
49065: ARRAY
49066: ARRAY
49067: PPUSH
49068: CALL_OW 334
49072: GO 48988
49074: POP
49075: POP
// end ;
49076: GO 48936
49078: POP
49079: POP
// end ;
49080: LD_VAR 0 1
49084: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49085: LD_EXP 40
49089: IFFALSE 49264
49091: GO 49093
49093: DISABLE
49094: LD_INT 0
49096: PPUSH
49097: PPUSH
// begin for i := 1 to 8 do
49098: LD_ADDR_VAR 0 1
49102: PUSH
49103: DOUBLE
49104: LD_INT 1
49106: DEC
49107: ST_TO_ADDR
49108: LD_INT 8
49110: PUSH
49111: FOR_TO
49112: IFFALSE 49261
// if mpSidePositions [ i ] then
49114: LD_EXP 5
49118: PUSH
49119: LD_VAR 0 1
49123: ARRAY
49124: IFFALSE 49259
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49126: LD_ADDR_VAR 0 2
49130: PUSH
49131: LD_EXP 17
49135: PUSH
49136: LD_EXP 5
49140: PUSH
49141: LD_VAR 0 1
49145: ARRAY
49146: ARRAY
49147: PPUSH
49148: LD_INT 2
49150: PUSH
49151: LD_INT 21
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 21
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 22
49178: PUSH
49179: LD_OWVAR 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PPUSH
49192: CALL_OW 70
49196: PUSH
49197: FOR_IN
49198: IFFALSE 49257
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49200: LD_EXP 6
49204: PUSH
49205: LD_VAR 0 1
49209: ARRAY
49210: PUSH
49211: LD_EXP 6
49215: PUSH
49216: LD_OWVAR 2
49220: ARRAY
49221: NONEQUAL
49222: PUSH
49223: LD_EXP 9
49227: NOT
49228: PUSH
49229: LD_VAR 0 1
49233: PUSH
49234: LD_OWVAR 2
49238: NONEQUAL
49239: AND
49240: OR
49241: IFFALSE 49255
// ComMoveToArea ( un , BuildUpEscape ) ;
49243: LD_VAR 0 2
49247: PPUSH
49248: LD_INT 17
49250: PPUSH
49251: CALL_OW 113
49255: GO 49197
49257: POP
49258: POP
49259: GO 49111
49261: POP
49262: POP
// enable ;
49263: ENABLE
// end ;
49264: PPOPN 2
49266: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49267: LD_EXP 18
49271: IFFALSE 49321
49273: GO 49275
49275: DISABLE
49276: LD_INT 0
49278: PPUSH
// begin tmp := mpBuildUpTime ;
49279: LD_ADDR_VAR 0 1
49283: PUSH
49284: LD_EXP 18
49288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49289: LD_INT 35
49291: PPUSH
49292: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49296: LD_ADDR_VAR 0 1
49300: PUSH
49301: LD_VAR 0 1
49305: PUSH
49306: LD_INT 35
49308: MINUS
49309: ST_TO_ADDR
// until not tmp ;
49310: LD_VAR 0 1
49314: NOT
49315: IFFALSE 49289
// EndBuildUp ;
49317: CALL 48910 0 0
// end ;
49321: PPOPN 1
49323: END
// every 0 0$1 trigger mpActive marked mpWin do
49324: LD_INT 100
49326: IFFALSE 49360
49328: GO 49330
49330: DISABLE
// begin if IAmServer then
49331: CALL_OW 518
49335: IFFALSE 49344
// wait ( 0 0$3 ) ;
49337: LD_INT 105
49339: PPUSH
49340: CALL_OW 67
// if Multiplayer then
49344: LD_OWVAR 4
49348: IFFALSE 49356
// YouWinInMultiplayer else
49350: CALL_OW 106
49354: GO 49360
// YouWin ;
49356: CALL_OW 103
// end ;
49360: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49361: LD_INT 0
49363: PPUSH
// result := false ;
49364: LD_ADDR_VAR 0 3
49368: PUSH
49369: LD_INT 0
49371: ST_TO_ADDR
// case gameType of GameTypeNormal :
49372: LD_VAR 0 1
49376: PUSH
49377: LD_INT 1
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49385
49383: GO 49458
49385: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49386: LD_ADDR_VAR 0 3
49390: PUSH
49391: LD_INT 22
49393: PUSH
49394: LD_VAR 0 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 21
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 33
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 33
49428: PUSH
49429: LD_INT 5
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PPUSH
49446: CALL_OW 69
49450: PPUSH
49451: CALL 5028 0 1
49455: ST_TO_ADDR
// end ; GameTypeSurvival :
49456: GO 49693
49458: LD_INT 2
49460: DOUBLE
49461: EQUAL
49462: IFTRUE 49466
49464: GO 49594
49466: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49467: LD_ADDR_VAR 0 3
49471: PUSH
49472: LD_INT 22
49474: PUSH
49475: LD_VAR 0 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 30
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 30
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PPUSH
49516: CALL_OW 69
49520: PPUSH
49521: CALL 5028 0 1
49525: PUSH
49526: LD_INT 22
49528: PUSH
49529: LD_VAR 0 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 21
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 33
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 33
49563: PUSH
49564: LD_INT 5
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PPUSH
49581: CALL_OW 69
49585: PPUSH
49586: CALL 5028 0 1
49590: AND
49591: ST_TO_ADDR
// end ; GameTypeKing :
49592: GO 49693
49594: LD_INT 3
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49692
49602: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) or HowMuchPointsKing ( side ) >= mpPoints ;
49603: LD_ADDR_VAR 0 3
49607: PUSH
49608: LD_INT 22
49610: PUSH
49611: LD_VAR 0 2
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 2
49622: PUSH
49623: LD_INT 21
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 33
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 33
49645: PUSH
49646: LD_INT 5
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PPUSH
49663: CALL_OW 69
49667: PPUSH
49668: CALL 5028 0 1
49672: PUSH
49673: LD_VAR 0 2
49677: PPUSH
49678: CALL 52866 0 1
49682: PUSH
49683: LD_EXP 32
49687: GREATEREQUAL
49688: OR
49689: ST_TO_ADDR
// end ; end ;
49690: GO 49693
49692: POP
// end ;
49693: LD_VAR 0 3
49697: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49698: LD_INT 100
49700: IFFALSE 49922
49702: GO 49704
49704: DISABLE
49705: LD_INT 0
49707: PPUSH
49708: PPUSH
// begin if Multiplayer then
49709: LD_OWVAR 4
49713: IFFALSE 49721
// SetPlayerSpectator ( ) else
49715: CALL_OW 572
49719: GO 49730
// FogOff ( your_side ) ;
49721: LD_OWVAR 2
49725: PPUSH
49726: CALL_OW 344
// repeat gameIsOn := false ;
49730: LD_ADDR_VAR 0 1
49734: PUSH
49735: LD_INT 0
49737: ST_TO_ADDR
// for i := 1 to 8 do
49738: LD_ADDR_VAR 0 2
49742: PUSH
49743: DOUBLE
49744: LD_INT 1
49746: DEC
49747: ST_TO_ADDR
49748: LD_INT 8
49750: PUSH
49751: FOR_TO
49752: IFFALSE 49874
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49754: LD_EXP 5
49758: PUSH
49759: LD_VAR 0 2
49763: ARRAY
49764: PUSH
49765: LD_VAR 0 2
49769: PPUSH
49770: CALL_OW 108
49774: AND
49775: PUSH
49776: LD_VAR 0 2
49780: PUSH
49781: LD_OWVAR 2
49785: NONEQUAL
49786: AND
49787: IFFALSE 49872
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49789: LD_EXP 6
49793: PUSH
49794: LD_VAR 0 2
49798: ARRAY
49799: NOT
49800: PUSH
49801: LD_EXP 6
49805: PUSH
49806: LD_VAR 0 2
49810: ARRAY
49811: PUSH
49812: LD_EXP 6
49816: PUSH
49817: LD_OWVAR 2
49821: ARRAY
49822: NONEQUAL
49823: PUSH
49824: LD_OWVAR 2
49828: PPUSH
49829: LD_VAR 0 2
49833: PPUSH
49834: CALL_OW 81
49838: PUSH
49839: LD_INT 1
49841: NONEQUAL
49842: AND
49843: OR
49844: IFFALSE 49872
// if HasPowerByGameType ( mpGameType , i ) then
49846: LD_EXP 1
49850: PPUSH
49851: LD_VAR 0 2
49855: PPUSH
49856: CALL 49361 0 2
49860: IFFALSE 49872
// begin gameIsOn := true ;
49862: LD_ADDR_VAR 0 1
49866: PUSH
49867: LD_INT 1
49869: ST_TO_ADDR
// break ;
49870: GO 49874
// end ;
49872: GO 49751
49874: POP
49875: POP
// wait ( 100 ) ;
49876: LD_INT 100
49878: PPUSH
49879: CALL_OW 67
// until not gameIsOn ;
49883: LD_VAR 0 1
49887: NOT
49888: IFFALSE 49730
// if IAmServer then
49890: CALL_OW 518
49894: IFFALSE 49903
// wait ( 0 0$3 ) ;
49896: LD_INT 105
49898: PPUSH
49899: CALL_OW 67
// if Multiplayer then
49903: LD_OWVAR 4
49907: IFFALSE 49915
// YouLostInMultiplayer else
49909: CALL_OW 107
49913: GO 49922
// YouLost (  ) ;
49915: LD_STRING 
49917: PPUSH
49918: CALL_OW 104
// end ;
49922: PPOPN 2
49924: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49925: LD_EXP 30
49929: IFFALSE 50276
49931: GO 49933
49933: DISABLE
49934: LD_INT 0
49936: PPUSH
49937: PPUSH
49938: PPUSH
49939: PPUSH
49940: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49941: LD_ADDR_VAR 0 5
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: LD_INT 5
49960: PUSH
49961: LD_INT 6
49963: PUSH
49964: LD_INT 7
49966: PUSH
49967: LD_INT 8
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
49980: LD_INT 350
49982: PPUSH
49983: CALL_OW 67
// for i := 1 to 8 do
49987: LD_ADDR_VAR 0 1
49991: PUSH
49992: DOUBLE
49993: LD_INT 1
49995: DEC
49996: ST_TO_ADDR
49997: LD_INT 8
49999: PUSH
50000: FOR_TO
50001: IFFALSE 50246
// begin j := sides [ i ] ;
50003: LD_ADDR_VAR 0 2
50007: PUSH
50008: LD_VAR 0 5
50012: PUSH
50013: LD_VAR 0 1
50017: ARRAY
50018: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
50019: LD_EXP 37
50023: PUSH
50024: LD_VAR 0 2
50028: ARRAY
50029: PPUSH
50030: CALL 5028 0 1
50034: PUSH
50035: LD_VAR 0 2
50039: PPUSH
50040: CALL_OW 108
50044: AND
50045: PUSH
50046: LD_EXP 1
50050: PPUSH
50051: LD_VAR 0 2
50055: PPUSH
50056: CALL 49361 0 2
50060: AND
50061: IFFALSE 50244
// begin wait ( mpRespawn div 3 ) ;
50063: LD_EXP 30
50067: PUSH
50068: LD_INT 3
50070: DIV
50071: PPUSH
50072: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50076: LD_ADDR_VAR 0 3
50080: PUSH
50081: LD_INT 22
50083: PUSH
50084: LD_VAR 0 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 50
50095: PUSH
50096: EMPTY
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 30
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 30
50114: PUSH
50115: LD_INT 1
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: LIST
50131: PPUSH
50132: CALL_OW 69
50136: ST_TO_ADDR
// if not tmp then
50137: LD_VAR 0 3
50141: NOT
50142: IFFALSE 50146
// continue ;
50144: GO 50000
// spawn := tmp [ 1 ] ;
50146: LD_ADDR_VAR 0 4
50150: PUSH
50151: LD_VAR 0 3
50155: PUSH
50156: LD_INT 1
50158: ARRAY
50159: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50160: LD_EXP 37
50164: PUSH
50165: LD_VAR 0 2
50169: ARRAY
50170: PUSH
50171: LD_INT 1
50173: ARRAY
50174: PPUSH
50175: LD_VAR 0 4
50179: PPUSH
50180: CALL_OW 250
50184: PPUSH
50185: LD_VAR 0 4
50189: PPUSH
50190: CALL_OW 251
50194: PPUSH
50195: LD_INT 32
50197: PPUSH
50198: LD_INT 1
50200: PPUSH
50201: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50205: LD_ADDR_EXP 37
50209: PUSH
50210: LD_EXP 37
50214: PPUSH
50215: LD_VAR 0 2
50219: PPUSH
50220: LD_EXP 37
50224: PUSH
50225: LD_VAR 0 2
50229: ARRAY
50230: PPUSH
50231: LD_INT 1
50233: PPUSH
50234: CALL_OW 3
50238: PPUSH
50239: CALL_OW 1
50243: ST_TO_ADDR
// end ; end ;
50244: GO 50000
50246: POP
50247: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
50248: LD_ADDR_VAR 0 5
50252: PUSH
50253: LD_VAR 0 5
50257: PPUSH
50258: LD_INT 1
50260: PPUSH
50261: LD_INT 8
50263: PPUSH
50264: LD_INT 1
50266: PPUSH
50267: CALL 7306 0 4
50271: ST_TO_ADDR
// until false ;
50272: LD_INT 0
50274: IFFALSE 49980
// end ;
50276: PPOPN 5
50278: END
// every 0 0$1 marked mpActive do
50279: GO 50281
50281: DISABLE
// begin enable ;
50282: ENABLE
// if not mpDisplayStrings then
50283: LD_EXP 35
50287: NOT
50288: IFFALSE 50299
// begin display_strings := [ ] ;
50290: LD_ADDR_OWVAR 47
50294: PUSH
50295: EMPTY
50296: ST_TO_ADDR
// exit ;
50297: GO 50309
// end ; display_strings := mpDisplayStrings ;
50299: LD_ADDR_OWVAR 47
50303: PUSH
50304: LD_EXP 35
50308: ST_TO_ADDR
// end ; end_of_file
50309: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50310: LD_INT 0
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
50320: PPUSH
// if GetType ( un ) = unit_vehicle then
50321: LD_VAR 0 1
50325: PPUSH
50326: CALL_OW 247
50330: PUSH
50331: LD_INT 2
50333: EQUAL
50334: IFFALSE 50338
// exit ;
50336: GO 50895
// side := GetSide ( un ) ;
50338: LD_ADDR_VAR 0 9
50342: PUSH
50343: LD_VAR 0 1
50347: PPUSH
50348: CALL_OW 255
50352: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50353: LD_EXP 1
50357: PUSH
50358: LD_INT 2
50360: EQUAL
50361: IFFALSE 50454
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50363: LD_VAR 0 1
50367: PPUSH
50368: CALL_OW 266
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: IN
50383: PUSH
50384: LD_VAR 0 1
50388: PPUSH
50389: CALL_OW 110
50393: PUSH
50394: LD_VAR 0 9
50398: EQUAL
50399: AND
50400: IFFALSE 50454
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50402: LD_ADDR_VAR 0 3
50406: PUSH
50407: LD_INT 22
50409: PUSH
50410: LD_VAR 0 9
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 21
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PPUSH
50433: CALL_OW 69
50437: PUSH
50438: FOR_IN
50439: IFFALSE 50452
// KillUnit ( i ) ;
50441: LD_VAR 0 3
50445: PPUSH
50446: CALL_OW 66
50450: GO 50438
50452: POP
50453: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50454: LD_VAR 0 1
50458: PPUSH
50459: CALL_OW 257
50463: PUSH
50464: LD_INT 12
50466: PUSH
50467: LD_INT 17
50469: PUSH
50470: LD_INT 15
50472: PUSH
50473: LD_INT 16
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: IN
50482: PUSH
50483: LD_VAR 0 1
50487: PPUSH
50488: CALL_OW 263
50492: PUSH
50493: LD_INT 5
50495: EQUAL
50496: OR
50497: IFFALSE 50631
// begin tag := GetTag ( un ) ;
50499: LD_ADDR_VAR 0 5
50503: PUSH
50504: LD_VAR 0 1
50508: PPUSH
50509: CALL_OW 110
50513: ST_TO_ADDR
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
50514: LD_ADDR_VAR 0 7
50518: PUSH
50519: LD_EXP 29
50523: PUSH
50524: LD_EXP 5
50528: PUSH
50529: LD_VAR 0 5
50533: ARRAY
50534: ARRAY
50535: ST_TO_ADDR
// if not area then
50536: LD_VAR 0 7
50540: NOT
50541: IFFALSE 50545
// exit ;
50543: GO 50895
// wait ( 4 4$00 ) ;
50545: LD_INT 8400
50547: PPUSH
50548: CALL_OW 67
// repeat wait ( 10 ) ;
50552: LD_INT 10
50554: PPUSH
50555: CALL_OW 67
// until not mpBlockRespThread ;
50559: LD_EXP 38
50563: NOT
50564: IFFALSE 50552
// mpBlockRespThread := true ;
50566: LD_ADDR_EXP 38
50570: PUSH
50571: LD_INT 1
50573: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
50574: LD_INT 5
50576: NEG
50577: PPUSH
50578: CALL 36885 0 1
// ape := CreateHuman ;
50582: LD_ADDR_VAR 0 4
50586: PUSH
50587: CALL_OW 44
50591: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50592: LD_VAR 0 4
50596: PPUSH
50597: LD_VAR 0 5
50601: PPUSH
50602: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50606: LD_VAR 0 4
50610: PPUSH
50611: LD_VAR 0 7
50615: PPUSH
50616: LD_INT 0
50618: PPUSH
50619: CALL_OW 49
// mpBlockRespThread := false ;
50623: LD_ADDR_EXP 38
50627: PUSH
50628: LD_INT 0
50630: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50631: LD_VAR 0 1
50635: PPUSH
50636: CALL_OW 247
50640: PUSH
50641: LD_INT 1
50643: EQUAL
50644: PUSH
50645: LD_VAR 0 1
50649: PPUSH
50650: CALL_OW 248
50654: PUSH
50655: LD_INT 0
50657: GREATER
50658: AND
50659: IFFALSE 50895
// begin if not mpRespawn then
50661: LD_EXP 30
50665: NOT
50666: IFFALSE 50670
// exit ;
50668: GO 50895
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50670: LD_VAR 0 9
50674: PPUSH
50675: CALL_OW 108
50679: NOT
50680: PUSH
50681: LD_EXP 1
50685: PPUSH
50686: LD_VAR 0 9
50690: PPUSH
50691: CALL 49361 0 2
50695: NOT
50696: AND
50697: IFFALSE 50701
// exit ;
50699: GO 50895
// side := GetSide ( un ) ;
50701: LD_ADDR_VAR 0 9
50705: PUSH
50706: LD_VAR 0 1
50710: PPUSH
50711: CALL_OW 255
50715: ST_TO_ADDR
// nation := GetNation ( un ) ;
50716: LD_ADDR_VAR 0 8
50720: PUSH
50721: LD_VAR 0 1
50725: PPUSH
50726: CALL_OW 248
50730: ST_TO_ADDR
// class := GetClass ( un ) ;
50731: LD_ADDR_VAR 0 6
50735: PUSH
50736: LD_VAR 0 1
50740: PPUSH
50741: CALL_OW 257
50745: ST_TO_ADDR
// if class > 4 then
50746: LD_VAR 0 6
50750: PUSH
50751: LD_INT 4
50753: GREATER
50754: IFFALSE 50764
// class := 1 ;
50756: LD_ADDR_VAR 0 6
50760: PUSH
50761: LD_INT 1
50763: ST_TO_ADDR
// repeat wait ( 10 ) ;
50764: LD_INT 10
50766: PPUSH
50767: CALL_OW 67
// until not mpBlockRespThread ;
50771: LD_EXP 38
50775: NOT
50776: IFFALSE 50764
// mpBlockRespThread := true ;
50778: LD_ADDR_EXP 38
50782: PUSH
50783: LD_INT 1
50785: ST_TO_ADDR
// uc_side := side ;
50786: LD_ADDR_OWVAR 20
50790: PUSH
50791: LD_VAR 0 9
50795: ST_TO_ADDR
// uc_nation := nation ;
50796: LD_ADDR_OWVAR 21
50800: PUSH
50801: LD_VAR 0 8
50805: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50806: LD_INT 0
50808: PPUSH
50809: LD_VAR 0 6
50813: PPUSH
50814: LD_INT 2
50816: PPUSH
50817: CALL_OW 380
// un := CreateHuman ;
50821: LD_ADDR_VAR 0 1
50825: PUSH
50826: CALL_OW 44
50830: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
50831: LD_ADDR_EXP 37
50835: PUSH
50836: LD_EXP 37
50840: PPUSH
50841: LD_VAR 0 9
50845: PPUSH
50846: LD_EXP 37
50850: PUSH
50851: LD_VAR 0 9
50855: ARRAY
50856: PPUSH
50857: LD_EXP 37
50861: PUSH
50862: LD_VAR 0 9
50866: ARRAY
50867: PUSH
50868: LD_INT 1
50870: PLUS
50871: PPUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 1
50881: PPUSH
50882: CALL_OW 1
50886: ST_TO_ADDR
// mpBlockRespThread := false ;
50887: LD_ADDR_EXP 38
50891: PUSH
50892: LD_INT 0
50894: ST_TO_ADDR
// end ; end ;
50895: LD_VAR 0 2
50899: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
50900: LD_INT 0
50902: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
50903: LD_VAR 0 1
50907: PPUSH
50908: CALL_OW 266
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: IN
50923: IFFALSE 50948
// SetBName ( building , @ & GetSide ( building ) ) ;
50925: LD_VAR 0 1
50929: PPUSH
50930: LD_STRING @
50932: PUSH
50933: LD_VAR 0 1
50937: PPUSH
50938: CALL_OW 255
50942: STR
50943: PPUSH
50944: CALL_OW 500
// end ;
50948: LD_VAR 0 2
50952: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50953: LD_INT 0
50955: PPUSH
50956: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50957: LD_EXP 1
50961: PUSH
50962: LD_INT 2
50964: EQUAL
50965: PUSH
50966: LD_VAR 0 1
50970: PPUSH
50971: CALL_OW 266
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: IN
50986: AND
50987: IFFALSE 51052
// begin KillUnit ( building ) ;
50989: LD_VAR 0 1
50993: PPUSH
50994: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50998: LD_ADDR_VAR 0 5
51002: PUSH
51003: LD_INT 22
51005: PUSH
51006: LD_VAR 0 2
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 21
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PPUSH
51029: CALL_OW 69
51033: PUSH
51034: FOR_IN
51035: IFFALSE 51048
// KillUnit ( i ) ;
51037: LD_VAR 0 5
51041: PPUSH
51042: CALL_OW 66
51046: GO 51034
51048: POP
51049: POP
// exit ;
51050: GO 51097
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
51052: LD_VAR 0 1
51056: PPUSH
51057: CALL_OW 266
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: IN
51072: IFFALSE 51097
// SetBName ( building , @ & GetSide ( building ) ) ;
51074: LD_VAR 0 1
51078: PPUSH
51079: LD_STRING @
51081: PUSH
51082: LD_VAR 0 1
51086: PPUSH
51087: CALL_OW 255
51091: STR
51092: PPUSH
51093: CALL_OW 500
// end ; end_of_file
51097: LD_VAR 0 4
51101: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
51102: LD_EXP 36
51106: PUSH
51107: CALL 51312 0 0
51111: AND
51112: PUSH
51113: LD_OWVAR 4
51117: AND
51118: IFFALSE 51309
51120: GO 51122
51122: DISABLE
51123: LD_INT 0
51125: PPUSH
51126: PPUSH
// begin canWin := false ;
51127: LD_ADDR_VAR 0 2
51131: PUSH
51132: LD_INT 0
51134: ST_TO_ADDR
// if not HasPower ( your_side ) then
51135: LD_OWVAR 2
51139: PPUSH
51140: CALL 51352 0 1
51144: NOT
51145: IFFALSE 51156
// begin Multiplayer_Loose_Message ;
51147: CALL_OW 521
// enable ( mpLose ) ;
51151: LD_INT 102
51153: ENABLE_MARKED
// end else
51154: GO 51309
// begin canWin := true ;
51156: LD_ADDR_VAR 0 2
51160: PUSH
51161: LD_INT 1
51163: ST_TO_ADDR
// for i := 1 to 8 do
51164: LD_ADDR_VAR 0 1
51168: PUSH
51169: DOUBLE
51170: LD_INT 1
51172: DEC
51173: ST_TO_ADDR
51174: LD_INT 8
51176: PUSH
51177: FOR_TO
51178: IFFALSE 51295
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51180: LD_EXP 5
51184: PUSH
51185: LD_VAR 0 1
51189: ARRAY
51190: PUSH
51191: LD_VAR 0 1
51195: PPUSH
51196: CALL_OW 108
51200: AND
51201: PUSH
51202: LD_VAR 0 1
51206: PUSH
51207: LD_OWVAR 2
51211: NONEQUAL
51212: AND
51213: IFFALSE 51293
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51215: LD_EXP 6
51219: PUSH
51220: LD_VAR 0 1
51224: ARRAY
51225: NOT
51226: PUSH
51227: LD_EXP 6
51231: PUSH
51232: LD_VAR 0 1
51236: ARRAY
51237: PUSH
51238: LD_EXP 6
51242: PUSH
51243: LD_OWVAR 2
51247: ARRAY
51248: NONEQUAL
51249: PUSH
51250: LD_OWVAR 2
51254: PPUSH
51255: LD_VAR 0 1
51259: PPUSH
51260: CALL_OW 81
51264: PUSH
51265: LD_INT 1
51267: NONEQUAL
51268: AND
51269: OR
51270: IFFALSE 51293
// if HasPower ( i ) then
51272: LD_VAR 0 1
51276: PPUSH
51277: CALL 51352 0 1
51281: IFFALSE 51293
// begin canWin := false ;
51283: LD_ADDR_VAR 0 2
51287: PUSH
51288: LD_INT 0
51290: ST_TO_ADDR
// break ;
51291: GO 51295
// end ;
51293: GO 51177
51295: POP
51296: POP
// if canWin then
51297: LD_VAR 0 2
51301: IFFALSE 51308
// enable ( mpWin ) else
51303: LD_INT 101
51305: ENABLE_MARKED
51306: GO 51309
// enable ;
51308: ENABLE
// end ; end ;
51309: PPOPN 2
51311: END
// function CanWinLoose ; begin
51312: LD_INT 0
51314: PPUSH
// result := true ;
51315: LD_ADDR_VAR 0 1
51319: PUSH
51320: LD_INT 1
51322: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51323: CALL_OW 531
51327: PUSH
51328: CALL_OW 519
51332: PUSH
51333: LD_INT 1
51335: GREATER
51336: AND
51337: IFFALSE 51347
// result := false ;
51339: LD_ADDR_VAR 0 1
51343: PUSH
51344: LD_INT 0
51346: ST_TO_ADDR
// end ;
51347: LD_VAR 0 1
51351: RET
// function HasPower ( i ) ; begin
51352: LD_INT 0
51354: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51355: LD_ADDR_VAR 0 2
51359: PUSH
51360: LD_INT 22
51362: PUSH
51363: LD_VAR 0 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 21
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 33
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 33
51397: PUSH
51398: LD_INT 5
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PPUSH
51415: CALL_OW 69
51419: ST_TO_ADDR
// end ; end_of_file
51420: LD_VAR 0 2
51424: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51425: LD_EXP 36
51429: IFFALSE 51472
51431: GO 51433
51433: DISABLE
51434: LD_INT 0
51436: PPUSH
// begin for i := 1 to 8 do
51437: LD_ADDR_VAR 0 1
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_INT 8
51449: PUSH
51450: FOR_TO
51451: IFFALSE 51470
// SetRestrict ( b_depot , i , state_disabled ) ;
51453: LD_INT 0
51455: PPUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: LD_INT 0
51463: PPUSH
51464: CALL_OW 324
51468: GO 51450
51470: POP
51471: POP
// end ;
51472: PPOPN 1
51474: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51475: LD_EXP 36
51479: PUSH
51480: CALL 51685 0 0
51484: AND
51485: PUSH
51486: LD_OWVAR 4
51490: AND
51491: IFFALSE 51682
51493: GO 51495
51495: DISABLE
51496: LD_INT 0
51498: PPUSH
51499: PPUSH
// begin canWin := false ;
51500: LD_ADDR_VAR 0 2
51504: PUSH
51505: LD_INT 0
51507: ST_TO_ADDR
// if not HasPower ( your_side ) then
51508: LD_OWVAR 2
51512: PPUSH
51513: CALL 51725 0 1
51517: NOT
51518: IFFALSE 51529
// begin Multiplayer_Loose_Message ;
51520: CALL_OW 521
// enable ( mpLose ) ;
51524: LD_INT 102
51526: ENABLE_MARKED
// end else
51527: GO 51682
// begin canWin := true ;
51529: LD_ADDR_VAR 0 2
51533: PUSH
51534: LD_INT 1
51536: ST_TO_ADDR
// for i := 1 to 8 do
51537: LD_ADDR_VAR 0 1
51541: PUSH
51542: DOUBLE
51543: LD_INT 1
51545: DEC
51546: ST_TO_ADDR
51547: LD_INT 8
51549: PUSH
51550: FOR_TO
51551: IFFALSE 51668
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51553: LD_EXP 5
51557: PUSH
51558: LD_VAR 0 1
51562: ARRAY
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 108
51573: AND
51574: PUSH
51575: LD_VAR 0 1
51579: PUSH
51580: LD_OWVAR 2
51584: NONEQUAL
51585: AND
51586: IFFALSE 51666
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51588: LD_EXP 6
51592: PUSH
51593: LD_VAR 0 1
51597: ARRAY
51598: NOT
51599: PUSH
51600: LD_EXP 6
51604: PUSH
51605: LD_VAR 0 1
51609: ARRAY
51610: PUSH
51611: LD_EXP 6
51615: PUSH
51616: LD_OWVAR 2
51620: ARRAY
51621: NONEQUAL
51622: PUSH
51623: LD_OWVAR 2
51627: PPUSH
51628: LD_VAR 0 1
51632: PPUSH
51633: CALL_OW 81
51637: PUSH
51638: LD_INT 1
51640: NONEQUAL
51641: AND
51642: OR
51643: IFFALSE 51666
// if HasPower ( i ) then
51645: LD_VAR 0 1
51649: PPUSH
51650: CALL 51725 0 1
51654: IFFALSE 51666
// begin canWin := false ;
51656: LD_ADDR_VAR 0 2
51660: PUSH
51661: LD_INT 0
51663: ST_TO_ADDR
// break ;
51664: GO 51668
// end ;
51666: GO 51550
51668: POP
51669: POP
// if canWin then
51670: LD_VAR 0 2
51674: IFFALSE 51681
// enable ( mpWin ) else
51676: LD_INT 101
51678: ENABLE_MARKED
51679: GO 51682
// enable ;
51681: ENABLE
// end ; end ;
51682: PPOPN 2
51684: END
// function CanWinLoose ; begin
51685: LD_INT 0
51687: PPUSH
// result := true ;
51688: LD_ADDR_VAR 0 1
51692: PUSH
51693: LD_INT 1
51695: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51696: CALL_OW 531
51700: PUSH
51701: CALL_OW 519
51705: PUSH
51706: LD_INT 1
51708: GREATER
51709: AND
51710: IFFALSE 51720
// result := false ;
51712: LD_ADDR_VAR 0 1
51716: PUSH
51717: LD_INT 0
51719: ST_TO_ADDR
// end ;
51720: LD_VAR 0 1
51724: RET
// function HasPower ( i ) ; begin
51725: LD_INT 0
51727: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51728: LD_INT 22
51730: PUSH
51731: LD_VAR 0 1
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: PUSH
51743: LD_INT 30
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 30
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: LIST
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PPUSH
51772: CALL_OW 69
51776: NOT
51777: IFFALSE 51781
// exit ;
51779: GO 51846
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51781: LD_ADDR_VAR 0 2
51785: PUSH
51786: LD_INT 22
51788: PUSH
51789: LD_VAR 0 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: LD_INT 21
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 33
51813: PUSH
51814: LD_INT 3
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 33
51823: PUSH
51824: LD_INT 5
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PPUSH
51841: CALL_OW 69
51845: ST_TO_ADDR
// end ; end_of_file
51846: LD_VAR 0 2
51850: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51851: LD_EXP 36
51855: IFFALSE 52194
51857: GO 51859
51859: DISABLE
51860: LD_INT 0
51862: PPUSH
51863: PPUSH
51864: PPUSH
// begin mpKingPoints := [ ] ;
51865: LD_ADDR_EXP 41
51869: PUSH
51870: EMPTY
51871: ST_TO_ADDR
// if mpTeamGame then
51872: LD_EXP 9
51876: IFFALSE 51930
// begin for i := 1 to Count ( mpTeams ) do
51878: LD_ADDR_VAR 0 1
51882: PUSH
51883: DOUBLE
51884: LD_INT 1
51886: DEC
51887: ST_TO_ADDR
51888: LD_EXP 8
51892: PPUSH
51893: CALL 5028 0 1
51897: PUSH
51898: FOR_TO
51899: IFFALSE 51926
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51901: LD_ADDR_EXP 41
51905: PUSH
51906: LD_EXP 41
51910: PPUSH
51911: LD_VAR 0 1
51915: PPUSH
51916: LD_INT 0
51918: PPUSH
51919: CALL_OW 1
51923: ST_TO_ADDR
51924: GO 51898
51926: POP
51927: POP
// end else
51928: GO 51973
// begin for i := 1 to 8 do
51930: LD_ADDR_VAR 0 1
51934: PUSH
51935: DOUBLE
51936: LD_INT 1
51938: DEC
51939: ST_TO_ADDR
51940: LD_INT 8
51942: PUSH
51943: FOR_TO
51944: IFFALSE 51971
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51946: LD_ADDR_EXP 41
51950: PUSH
51951: LD_EXP 41
51955: PPUSH
51956: LD_VAR 0 1
51960: PPUSH
51961: LD_INT 0
51963: PPUSH
51964: CALL_OW 1
51968: ST_TO_ADDR
51969: GO 51943
51971: POP
51972: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51973: LD_ADDR_VAR 0 3
51977: PUSH
51978: LD_INT 25
51980: PPUSH
51981: LD_INT 0
51983: PPUSH
51984: CALL_OW 517
51988: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51989: LD_ADDR_VAR 0 1
51993: PUSH
51994: DOUBLE
51995: LD_INT 1
51997: DEC
51998: ST_TO_ADDR
51999: LD_VAR 0 3
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PUSH
52008: FOR_TO
52009: IFFALSE 52076
// for j := 1 to 8 do
52011: LD_ADDR_VAR 0 2
52015: PUSH
52016: DOUBLE
52017: LD_INT 1
52019: DEC
52020: ST_TO_ADDR
52021: LD_INT 8
52023: PUSH
52024: FOR_TO
52025: IFFALSE 52072
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
52027: LD_VAR 0 3
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PUSH
52036: LD_VAR 0 1
52040: ARRAY
52041: PPUSH
52042: LD_VAR 0 3
52046: PUSH
52047: LD_INT 2
52049: ARRAY
52050: PUSH
52051: LD_VAR 0 1
52055: ARRAY
52056: PPUSH
52057: LD_VAR 0 2
52061: PPUSH
52062: LD_INT 12
52064: NEG
52065: PPUSH
52066: CALL_OW 330
52070: GO 52024
52072: POP
52073: POP
52074: GO 52008
52076: POP
52077: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
52078: LD_EXP 31
52082: PPUSH
52083: LD_INT 1
52085: PPUSH
52086: CALL_OW 424
// UpdateCounter ;
52090: CALL 52696 0 0
// repeat wait ( 0 0$1 ) ;
52094: LD_INT 35
52096: PPUSH
52097: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52101: LD_ADDR_VAR 0 3
52105: PUSH
52106: LD_EXP 31
52110: PPUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 57
52116: PUSH
52117: EMPTY
52118: LIST
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 50
52126: PUSH
52127: EMPTY
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 30
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 30
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: PPUSH
52163: CALL_OW 70
52167: ST_TO_ADDR
// if not tmp then
52168: LD_VAR 0 3
52172: NOT
52173: IFFALSE 52177
// continue ;
52175: GO 52094
// AddPoints ( tmp ) ;
52177: LD_VAR 0 3
52181: PPUSH
52182: CALL 52374 0 1
// UpdateCounter ;
52186: CALL 52696 0 0
// until false ;
52190: LD_INT 0
52192: IFFALSE 52094
// end ;
52194: PPOPN 3
52196: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52197: LD_EXP 36
52201: PUSH
52202: LD_EXP 34
52206: AND
52207: IFFALSE 52371
52209: GO 52211
52211: DISABLE
52212: LD_INT 0
52214: PPUSH
52215: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52216: LD_ADDR_VAR 0 2
52220: PUSH
52221: LD_INT 25
52223: PPUSH
52224: LD_INT 0
52226: PPUSH
52227: CALL_OW 517
52231: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52232: LD_ADDR_VAR 0 1
52236: PUSH
52237: DOUBLE
52238: LD_INT 1
52240: DEC
52241: ST_TO_ADDR
52242: LD_VAR 0 2
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PUSH
52251: FOR_TO
52252: IFFALSE 52293
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52254: LD_VAR 0 2
52258: PUSH
52259: LD_INT 1
52261: ARRAY
52262: PUSH
52263: LD_VAR 0 1
52267: ARRAY
52268: PPUSH
52269: LD_VAR 0 2
52273: PUSH
52274: LD_INT 2
52276: ARRAY
52277: PUSH
52278: LD_VAR 0 1
52282: ARRAY
52283: PPUSH
52284: LD_INT 125
52286: PPUSH
52287: CALL_OW 495
52291: GO 52251
52293: POP
52294: POP
// repeat wait ( mpEmissions ) ;
52295: LD_EXP 34
52299: PPUSH
52300: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52304: LD_ADDR_VAR 0 1
52308: PUSH
52309: DOUBLE
52310: LD_INT 1
52312: DEC
52313: ST_TO_ADDR
52314: LD_VAR 0 2
52318: PUSH
52319: LD_INT 1
52321: ARRAY
52322: PUSH
52323: FOR_TO
52324: IFFALSE 52365
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52326: LD_VAR 0 2
52330: PUSH
52331: LD_INT 1
52333: ARRAY
52334: PUSH
52335: LD_VAR 0 1
52339: ARRAY
52340: PPUSH
52341: LD_VAR 0 2
52345: PUSH
52346: LD_INT 2
52348: ARRAY
52349: PUSH
52350: LD_VAR 0 1
52354: ARRAY
52355: PPUSH
52356: LD_INT 15
52358: PPUSH
52359: CALL_OW 495
52363: GO 52323
52365: POP
52366: POP
// until false ;
52367: LD_INT 0
52369: IFFALSE 52295
// end ;
52371: PPOPN 2
52373: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52374: LD_INT 0
52376: PPUSH
52377: PPUSH
52378: PPUSH
52379: PPUSH
52380: PPUSH
// if mpTeamGame then
52381: LD_EXP 9
52385: IFFALSE 52582
// begin first := depots [ 1 ] ;
52387: LD_ADDR_VAR 0 4
52391: PUSH
52392: LD_VAR 0 1
52396: PUSH
52397: LD_INT 1
52399: ARRAY
52400: ST_TO_ADDR
// side := GetSide ( first ) ;
52401: LD_ADDR_VAR 0 6
52405: PUSH
52406: LD_VAR 0 4
52410: PPUSH
52411: CALL_OW 255
52415: ST_TO_ADDR
// for i := 1 to mpTeams do
52416: LD_ADDR_VAR 0 3
52420: PUSH
52421: DOUBLE
52422: LD_INT 1
52424: DEC
52425: ST_TO_ADDR
52426: LD_EXP 8
52430: PUSH
52431: FOR_TO
52432: IFFALSE 52466
// if side in mpTeams [ i ] then
52434: LD_VAR 0 6
52438: PUSH
52439: LD_EXP 8
52443: PUSH
52444: LD_VAR 0 3
52448: ARRAY
52449: IN
52450: IFFALSE 52464
// begin team := i ;
52452: LD_ADDR_VAR 0 5
52456: PUSH
52457: LD_VAR 0 3
52461: ST_TO_ADDR
// break ;
52462: GO 52466
// end ;
52464: GO 52431
52466: POP
52467: POP
// if not team then
52468: LD_VAR 0 5
52472: NOT
52473: IFFALSE 52477
// exit ;
52475: GO 52691
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52477: LD_EXP 31
52481: PPUSH
52482: LD_INT 81
52484: PUSH
52485: LD_VAR 0 6
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PPUSH
52494: CALL_OW 70
52498: IFFALSE 52502
// exit ;
52500: GO 52691
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52502: LD_ADDR_EXP 41
52506: PUSH
52507: LD_EXP 41
52511: PPUSH
52512: LD_VAR 0 5
52516: PPUSH
52517: LD_EXP 41
52521: PUSH
52522: LD_VAR 0 5
52526: ARRAY
52527: PUSH
52528: LD_INT 1
52530: PLUS
52531: PPUSH
52532: CALL_OW 1
52536: ST_TO_ADDR
// for i in mpTeams [ team ] do
52537: LD_ADDR_VAR 0 3
52541: PUSH
52542: LD_EXP 8
52546: PUSH
52547: LD_VAR 0 5
52551: ARRAY
52552: PUSH
52553: FOR_IN
52554: IFFALSE 52578
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52556: LD_VAR 0 3
52560: PPUSH
52561: LD_EXP 41
52565: PUSH
52566: LD_VAR 0 5
52570: ARRAY
52571: PPUSH
52572: CALL_OW 506
52576: GO 52553
52578: POP
52579: POP
// end else
52580: GO 52691
// begin first := depots [ 1 ] ;
52582: LD_ADDR_VAR 0 4
52586: PUSH
52587: LD_VAR 0 1
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: ST_TO_ADDR
// side := GetSide ( first ) ;
52596: LD_ADDR_VAR 0 6
52600: PUSH
52601: LD_VAR 0 4
52605: PPUSH
52606: CALL_OW 255
52610: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52611: LD_EXP 31
52615: PPUSH
52616: LD_INT 81
52618: PUSH
52619: LD_VAR 0 6
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PPUSH
52628: CALL_OW 70
52632: IFFALSE 52636
// exit ;
52634: GO 52691
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52636: LD_ADDR_EXP 41
52640: PUSH
52641: LD_EXP 41
52645: PPUSH
52646: LD_VAR 0 6
52650: PPUSH
52651: LD_EXP 41
52655: PUSH
52656: LD_VAR 0 6
52660: ARRAY
52661: PUSH
52662: LD_INT 1
52664: PLUS
52665: PPUSH
52666: CALL_OW 1
52670: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52671: LD_VAR 0 6
52675: PPUSH
52676: LD_EXP 41
52680: PUSH
52681: LD_VAR 0 6
52685: ARRAY
52686: PPUSH
52687: CALL_OW 506
// end ; end ;
52691: LD_VAR 0 2
52695: RET
// function UpdateCounter ; var i ; begin
52696: LD_INT 0
52698: PPUSH
52699: PPUSH
// result := [ ] ;
52700: LD_ADDR_VAR 0 1
52704: PUSH
52705: EMPTY
52706: ST_TO_ADDR
// if mpTeamGame then
52707: LD_EXP 9
52711: IFFALSE 52778
// begin for i := 1 to mpTeams do
52713: LD_ADDR_VAR 0 2
52717: PUSH
52718: DOUBLE
52719: LD_INT 1
52721: DEC
52722: ST_TO_ADDR
52723: LD_EXP 8
52727: PUSH
52728: FOR_TO
52729: IFFALSE 52774
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52731: LD_ADDR_VAR 0 1
52735: PUSH
52736: LD_VAR 0 1
52740: PUSH
52741: LD_STRING #KingoftheHill-Team
52743: PUSH
52744: LD_VAR 0 2
52748: PUSH
52749: LD_EXP 41
52753: PUSH
52754: LD_VAR 0 2
52758: ARRAY
52759: PUSH
52760: LD_EXP 32
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: ADD
52771: ST_TO_ADDR
52772: GO 52728
52774: POP
52775: POP
// end else
52776: GO 52851
// begin for i := 1 to 8 do
52778: LD_ADDR_VAR 0 2
52782: PUSH
52783: DOUBLE
52784: LD_INT 1
52786: DEC
52787: ST_TO_ADDR
52788: LD_INT 8
52790: PUSH
52791: FOR_TO
52792: IFFALSE 52849
// if mpSidePositions [ i ] then
52794: LD_EXP 5
52798: PUSH
52799: LD_VAR 0 2
52803: ARRAY
52804: IFFALSE 52847
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52806: LD_ADDR_VAR 0 1
52810: PUSH
52811: LD_VAR 0 1
52815: PUSH
52816: LD_STRING #KingoftheHill-Player
52818: PUSH
52819: LD_VAR 0 2
52823: PUSH
52824: LD_EXP 41
52828: PUSH
52829: LD_VAR 0 2
52833: ARRAY
52834: PUSH
52835: LD_EXP 32
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ADD
52846: ST_TO_ADDR
52847: GO 52791
52849: POP
52850: POP
// end ; mpDisplayStrings := result ;
52851: LD_ADDR_EXP 35
52855: PUSH
52856: LD_VAR 0 1
52860: ST_TO_ADDR
// end ;
52861: LD_VAR 0 1
52865: RET
// export function HowMuchPointsKing ( side ) ; begin
52866: LD_INT 0
52868: PPUSH
// result := HowMuchPoints ( side ) ;
52869: LD_ADDR_VAR 0 2
52873: PUSH
52874: LD_VAR 0 1
52878: PPUSH
52879: CALL 52889 0 1
52883: ST_TO_ADDR
// end ;
52884: LD_VAR 0 2
52888: RET
// function HowMuchPoints ( side ) ; var i ; begin
52889: LD_INT 0
52891: PPUSH
52892: PPUSH
// if mpTeamGame then
52893: LD_EXP 9
52897: IFFALSE 52966
// begin for i := 1 to Count ( mpTeams ) do
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: DOUBLE
52905: LD_INT 1
52907: DEC
52908: ST_TO_ADDR
52909: LD_EXP 8
52913: PPUSH
52914: CALL 5028 0 1
52918: PUSH
52919: FOR_TO
52920: IFFALSE 52962
// begin if side in mpTeams [ i ] then
52922: LD_VAR 0 1
52926: PUSH
52927: LD_EXP 8
52931: PUSH
52932: LD_VAR 0 3
52936: ARRAY
52937: IN
52938: IFFALSE 52960
// begin result := mpKingPoints [ i ] ;
52940: LD_ADDR_VAR 0 2
52944: PUSH
52945: LD_EXP 41
52949: PUSH
52950: LD_VAR 0 3
52954: ARRAY
52955: ST_TO_ADDR
// exit ;
52956: POP
52957: POP
52958: GO 52982
// end ; end ;
52960: GO 52919
52962: POP
52963: POP
// end else
52964: GO 52982
// result := mpKingPoints [ side ] ;
52966: LD_ADDR_VAR 0 2
52970: PUSH
52971: LD_EXP 41
52975: PUSH
52976: LD_VAR 0 1
52980: ARRAY
52981: ST_TO_ADDR
// end ;
52982: LD_VAR 0 2
52986: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52987: LD_EXP 36
52991: PUSH
52992: CALL 53314 0 0
52996: AND
52997: PUSH
52998: LD_OWVAR 4
53002: AND
53003: IFFALSE 53239
53005: GO 53007
53007: DISABLE
53008: LD_INT 0
53010: PPUSH
53011: PPUSH
// begin canWin := false ;
53012: LD_ADDR_VAR 0 2
53016: PUSH
53017: LD_INT 0
53019: ST_TO_ADDR
// if not HasPower ( your_side ) then
53020: LD_OWVAR 2
53024: PPUSH
53025: CALL 53354 0 1
53029: NOT
53030: IFFALSE 53041
// begin Multiplayer_Loose_Message ;
53032: CALL_OW 521
// enable ( mpLose ) ;
53036: LD_INT 102
53038: ENABLE_MARKED
// end else
53039: GO 53239
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
53041: LD_ADDR_VAR 0 2
53045: PUSH
53046: LD_OWVAR 2
53050: PPUSH
53051: CALL 52889 0 1
53055: PUSH
53056: LD_EXP 32
53060: GREATEREQUAL
53061: PUSH
53062: LD_OWVAR 2
53066: PPUSH
53067: CALL 53354 0 1
53071: AND
53072: PUSH
53073: CALL 53242 0 0
53077: NOT
53078: OR
53079: ST_TO_ADDR
// for i := 1 to 8 do
53080: LD_ADDR_VAR 0 1
53084: PUSH
53085: DOUBLE
53086: LD_INT 1
53088: DEC
53089: ST_TO_ADDR
53090: LD_INT 8
53092: PUSH
53093: FOR_TO
53094: IFFALSE 53225
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53096: LD_EXP 5
53100: PUSH
53101: LD_VAR 0 1
53105: ARRAY
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 108
53116: AND
53117: PUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_OWVAR 2
53127: NONEQUAL
53128: AND
53129: IFFALSE 53223
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53131: LD_EXP 6
53135: PUSH
53136: LD_VAR 0 1
53140: ARRAY
53141: NOT
53142: PUSH
53143: LD_EXP 6
53147: PUSH
53148: LD_VAR 0 1
53152: ARRAY
53153: PUSH
53154: LD_EXP 6
53158: PUSH
53159: LD_OWVAR 2
53163: ARRAY
53164: NONEQUAL
53165: PUSH
53166: LD_OWVAR 2
53170: PPUSH
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 81
53180: PUSH
53181: LD_INT 1
53183: NONEQUAL
53184: AND
53185: OR
53186: IFFALSE 53223
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL 52889 0 1
53197: PUSH
53198: LD_EXP 32
53202: GREATEREQUAL
53203: PUSH
53204: LD_VAR 0 1
53208: PPUSH
53209: CALL 53354 0 1
53213: AND
53214: IFFALSE 53223
// begin enable ( mpLose ) ;
53216: LD_INT 102
53218: ENABLE_MARKED
// exit ;
53219: POP
53220: POP
53221: GO 53239
// end ;
53223: GO 53093
53225: POP
53226: POP
// if canWin then
53227: LD_VAR 0 2
53231: IFFALSE 53238
// enable ( mpWin ) else
53233: LD_INT 101
53235: ENABLE_MARKED
53236: GO 53239
// enable ;
53238: ENABLE
// end ; end ;
53239: PPOPN 2
53241: END
// function EnemiesInGame ; var i ; begin
53242: LD_INT 0
53244: PPUSH
53245: PPUSH
// result := false ;
53246: LD_ADDR_VAR 0 1
53250: PUSH
53251: LD_INT 0
53253: ST_TO_ADDR
// for i := 1 to 8 do
53254: LD_ADDR_VAR 0 2
53258: PUSH
53259: DOUBLE
53260: LD_INT 1
53262: DEC
53263: ST_TO_ADDR
53264: LD_INT 8
53266: PUSH
53267: FOR_TO
53268: IFFALSE 53307
// if i <> your_side and HasPower ( i ) then
53270: LD_VAR 0 2
53274: PUSH
53275: LD_OWVAR 2
53279: NONEQUAL
53280: PUSH
53281: LD_VAR 0 2
53285: PPUSH
53286: CALL 53354 0 1
53290: AND
53291: IFFALSE 53305
// begin result := true ;
53293: LD_ADDR_VAR 0 1
53297: PUSH
53298: LD_INT 1
53300: ST_TO_ADDR
// exit ;
53301: POP
53302: POP
53303: GO 53309
// end ;
53305: GO 53267
53307: POP
53308: POP
// end ;
53309: LD_VAR 0 1
53313: RET
// function CanWinLoose ; begin
53314: LD_INT 0
53316: PPUSH
// result := true ;
53317: LD_ADDR_VAR 0 1
53321: PUSH
53322: LD_INT 1
53324: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53325: CALL_OW 531
53329: PUSH
53330: CALL_OW 519
53334: PUSH
53335: LD_INT 1
53337: GREATER
53338: AND
53339: IFFALSE 53349
// result := false ;
53341: LD_ADDR_VAR 0 1
53345: PUSH
53346: LD_INT 0
53348: ST_TO_ADDR
// end ;
53349: LD_VAR 0 1
53353: RET
// function HasPower ( i ) ; begin
53354: LD_INT 0
53356: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53357: LD_ADDR_VAR 0 2
53361: PUSH
53362: LD_INT 22
53364: PUSH
53365: LD_VAR 0 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 21
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 33
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 33
53399: PUSH
53400: LD_INT 5
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PPUSH
53417: CALL_OW 69
53421: ST_TO_ADDR
// end ; end_of_file end_of_file
53422: LD_VAR 0 2
53426: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53427: LD_VAR 0 1
53431: PPUSH
53432: LD_VAR 0 2
53436: PPUSH
53437: LD_VAR 0 3
53441: PPUSH
53442: LD_VAR 0 4
53446: PPUSH
53447: LD_VAR 0 5
53451: PPUSH
53452: LD_VAR 0 6
53456: PPUSH
53457: CALL 53658 0 6
// end ;
53461: PPOPN 6
53463: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53464: LD_INT 0
53466: PPUSH
// begin if not units then
53467: LD_VAR 0 1
53471: NOT
53472: IFFALSE 53476
// exit ;
53474: GO 53476
// end ;
53476: PPOPN 7
53478: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53479: CALL 53545 0 0
// end ; end_of_file
53483: PPOPN 1
53485: END
// export globalGameSaveCounter ; every 0 0$1 do
53486: GO 53488
53488: DISABLE
// begin enable ;
53489: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53490: LD_STRING updateTimer(
53492: PUSH
53493: LD_OWVAR 1
53497: STR
53498: PUSH
53499: LD_STRING );
53501: STR
53502: PPUSH
53503: CALL_OW 559
// end ;
53507: END
// every 0 0$1 do
53508: GO 53510
53510: DISABLE
// begin globalGameSaveCounter := 0 ;
53511: LD_ADDR_EXP 42
53515: PUSH
53516: LD_INT 0
53518: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53519: LD_STRING setGameSaveCounter(0)
53521: PPUSH
53522: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53526: LD_STRING initStreamRollete();
53528: PPUSH
53529: CALL_OW 559
// InitStreamMode ;
53533: CALL 54876 0 0
// DefineStreamItems ( false ) ;
53537: LD_INT 0
53539: PPUSH
53540: CALL 55340 0 1
// end ;
53544: END
// export function SOS_MapStart ( ) ; begin
53545: LD_INT 0
53547: PPUSH
// if streamModeActive then
53548: LD_EXP 43
53552: IFFALSE 53561
// DefineStreamItems ( true ) ;
53554: LD_INT 1
53556: PPUSH
53557: CALL 55340 0 1
// UpdateLuaVariables ( ) ;
53561: CALL 53578 0 0
// UpdateFactoryWaypoints ( ) ;
53565: CALL 68209 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53569: CALL 68466 0 0
// end ;
53573: LD_VAR 0 1
53577: RET
// function UpdateLuaVariables ( ) ; begin
53578: LD_INT 0
53580: PPUSH
// if globalGameSaveCounter then
53581: LD_EXP 42
53585: IFFALSE 53619
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53587: LD_ADDR_EXP 42
53591: PUSH
53592: LD_EXP 42
53596: PPUSH
53597: CALL 41978 0 1
53601: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53602: LD_STRING setGameSaveCounter(
53604: PUSH
53605: LD_EXP 42
53609: STR
53610: PUSH
53611: LD_STRING )
53613: STR
53614: PPUSH
53615: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53619: LD_STRING setGameDifficulty(
53621: PUSH
53622: LD_OWVAR 67
53626: STR
53627: PUSH
53628: LD_STRING )
53630: STR
53631: PPUSH
53632: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53636: LD_STRING displayDifficulty(
53638: PUSH
53639: LD_OWVAR 67
53643: STR
53644: PUSH
53645: LD_STRING )
53647: STR
53648: PPUSH
53649: CALL_OW 559
// end ;
53653: LD_VAR 0 1
53657: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53658: LD_INT 0
53660: PPUSH
// if p2 = stream_mode then
53661: LD_VAR 0 2
53665: PUSH
53666: LD_INT 100
53668: EQUAL
53669: IFFALSE 54672
// begin if not StreamModeActive then
53671: LD_EXP 43
53675: NOT
53676: IFFALSE 53686
// StreamModeActive := true ;
53678: LD_ADDR_EXP 43
53682: PUSH
53683: LD_INT 1
53685: ST_TO_ADDR
// if p3 = 0 then
53686: LD_VAR 0 3
53690: PUSH
53691: LD_INT 0
53693: EQUAL
53694: IFFALSE 53700
// InitStreamMode ;
53696: CALL 54876 0 0
// if p3 = 1 then
53700: LD_VAR 0 3
53704: PUSH
53705: LD_INT 1
53707: EQUAL
53708: IFFALSE 53718
// sRocket := true ;
53710: LD_ADDR_EXP 48
53714: PUSH
53715: LD_INT 1
53717: ST_TO_ADDR
// if p3 = 2 then
53718: LD_VAR 0 3
53722: PUSH
53723: LD_INT 2
53725: EQUAL
53726: IFFALSE 53736
// sSpeed := true ;
53728: LD_ADDR_EXP 47
53732: PUSH
53733: LD_INT 1
53735: ST_TO_ADDR
// if p3 = 3 then
53736: LD_VAR 0 3
53740: PUSH
53741: LD_INT 3
53743: EQUAL
53744: IFFALSE 53754
// sEngine := true ;
53746: LD_ADDR_EXP 49
53750: PUSH
53751: LD_INT 1
53753: ST_TO_ADDR
// if p3 = 4 then
53754: LD_VAR 0 3
53758: PUSH
53759: LD_INT 4
53761: EQUAL
53762: IFFALSE 53772
// sSpec := true ;
53764: LD_ADDR_EXP 46
53768: PUSH
53769: LD_INT 1
53771: ST_TO_ADDR
// if p3 = 5 then
53772: LD_VAR 0 3
53776: PUSH
53777: LD_INT 5
53779: EQUAL
53780: IFFALSE 53790
// sLevel := true ;
53782: LD_ADDR_EXP 50
53786: PUSH
53787: LD_INT 1
53789: ST_TO_ADDR
// if p3 = 6 then
53790: LD_VAR 0 3
53794: PUSH
53795: LD_INT 6
53797: EQUAL
53798: IFFALSE 53808
// sArmoury := true ;
53800: LD_ADDR_EXP 51
53804: PUSH
53805: LD_INT 1
53807: ST_TO_ADDR
// if p3 = 7 then
53808: LD_VAR 0 3
53812: PUSH
53813: LD_INT 7
53815: EQUAL
53816: IFFALSE 53826
// sRadar := true ;
53818: LD_ADDR_EXP 52
53822: PUSH
53823: LD_INT 1
53825: ST_TO_ADDR
// if p3 = 8 then
53826: LD_VAR 0 3
53830: PUSH
53831: LD_INT 8
53833: EQUAL
53834: IFFALSE 53844
// sBunker := true ;
53836: LD_ADDR_EXP 53
53840: PUSH
53841: LD_INT 1
53843: ST_TO_ADDR
// if p3 = 9 then
53844: LD_VAR 0 3
53848: PUSH
53849: LD_INT 9
53851: EQUAL
53852: IFFALSE 53862
// sHack := true ;
53854: LD_ADDR_EXP 54
53858: PUSH
53859: LD_INT 1
53861: ST_TO_ADDR
// if p3 = 10 then
53862: LD_VAR 0 3
53866: PUSH
53867: LD_INT 10
53869: EQUAL
53870: IFFALSE 53880
// sFire := true ;
53872: LD_ADDR_EXP 55
53876: PUSH
53877: LD_INT 1
53879: ST_TO_ADDR
// if p3 = 11 then
53880: LD_VAR 0 3
53884: PUSH
53885: LD_INT 11
53887: EQUAL
53888: IFFALSE 53898
// sRefresh := true ;
53890: LD_ADDR_EXP 56
53894: PUSH
53895: LD_INT 1
53897: ST_TO_ADDR
// if p3 = 12 then
53898: LD_VAR 0 3
53902: PUSH
53903: LD_INT 12
53905: EQUAL
53906: IFFALSE 53916
// sExp := true ;
53908: LD_ADDR_EXP 57
53912: PUSH
53913: LD_INT 1
53915: ST_TO_ADDR
// if p3 = 13 then
53916: LD_VAR 0 3
53920: PUSH
53921: LD_INT 13
53923: EQUAL
53924: IFFALSE 53934
// sDepot := true ;
53926: LD_ADDR_EXP 58
53930: PUSH
53931: LD_INT 1
53933: ST_TO_ADDR
// if p3 = 14 then
53934: LD_VAR 0 3
53938: PUSH
53939: LD_INT 14
53941: EQUAL
53942: IFFALSE 53952
// sFlag := true ;
53944: LD_ADDR_EXP 59
53948: PUSH
53949: LD_INT 1
53951: ST_TO_ADDR
// if p3 = 15 then
53952: LD_VAR 0 3
53956: PUSH
53957: LD_INT 15
53959: EQUAL
53960: IFFALSE 53970
// sKamikadze := true ;
53962: LD_ADDR_EXP 67
53966: PUSH
53967: LD_INT 1
53969: ST_TO_ADDR
// if p3 = 16 then
53970: LD_VAR 0 3
53974: PUSH
53975: LD_INT 16
53977: EQUAL
53978: IFFALSE 53988
// sTroll := true ;
53980: LD_ADDR_EXP 68
53984: PUSH
53985: LD_INT 1
53987: ST_TO_ADDR
// if p3 = 17 then
53988: LD_VAR 0 3
53992: PUSH
53993: LD_INT 17
53995: EQUAL
53996: IFFALSE 54006
// sSlow := true ;
53998: LD_ADDR_EXP 69
54002: PUSH
54003: LD_INT 1
54005: ST_TO_ADDR
// if p3 = 18 then
54006: LD_VAR 0 3
54010: PUSH
54011: LD_INT 18
54013: EQUAL
54014: IFFALSE 54024
// sLack := true ;
54016: LD_ADDR_EXP 70
54020: PUSH
54021: LD_INT 1
54023: ST_TO_ADDR
// if p3 = 19 then
54024: LD_VAR 0 3
54028: PUSH
54029: LD_INT 19
54031: EQUAL
54032: IFFALSE 54042
// sTank := true ;
54034: LD_ADDR_EXP 72
54038: PUSH
54039: LD_INT 1
54041: ST_TO_ADDR
// if p3 = 20 then
54042: LD_VAR 0 3
54046: PUSH
54047: LD_INT 20
54049: EQUAL
54050: IFFALSE 54060
// sRemote := true ;
54052: LD_ADDR_EXP 73
54056: PUSH
54057: LD_INT 1
54059: ST_TO_ADDR
// if p3 = 21 then
54060: LD_VAR 0 3
54064: PUSH
54065: LD_INT 21
54067: EQUAL
54068: IFFALSE 54078
// sPowell := true ;
54070: LD_ADDR_EXP 74
54074: PUSH
54075: LD_INT 1
54077: ST_TO_ADDR
// if p3 = 22 then
54078: LD_VAR 0 3
54082: PUSH
54083: LD_INT 22
54085: EQUAL
54086: IFFALSE 54096
// sTeleport := true ;
54088: LD_ADDR_EXP 77
54092: PUSH
54093: LD_INT 1
54095: ST_TO_ADDR
// if p3 = 23 then
54096: LD_VAR 0 3
54100: PUSH
54101: LD_INT 23
54103: EQUAL
54104: IFFALSE 54114
// sOilTower := true ;
54106: LD_ADDR_EXP 79
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
// if p3 = 24 then
54114: LD_VAR 0 3
54118: PUSH
54119: LD_INT 24
54121: EQUAL
54122: IFFALSE 54132
// sShovel := true ;
54124: LD_ADDR_EXP 80
54128: PUSH
54129: LD_INT 1
54131: ST_TO_ADDR
// if p3 = 25 then
54132: LD_VAR 0 3
54136: PUSH
54137: LD_INT 25
54139: EQUAL
54140: IFFALSE 54150
// sSheik := true ;
54142: LD_ADDR_EXP 81
54146: PUSH
54147: LD_INT 1
54149: ST_TO_ADDR
// if p3 = 26 then
54150: LD_VAR 0 3
54154: PUSH
54155: LD_INT 26
54157: EQUAL
54158: IFFALSE 54168
// sEarthquake := true ;
54160: LD_ADDR_EXP 83
54164: PUSH
54165: LD_INT 1
54167: ST_TO_ADDR
// if p3 = 27 then
54168: LD_VAR 0 3
54172: PUSH
54173: LD_INT 27
54175: EQUAL
54176: IFFALSE 54186
// sAI := true ;
54178: LD_ADDR_EXP 84
54182: PUSH
54183: LD_INT 1
54185: ST_TO_ADDR
// if p3 = 28 then
54186: LD_VAR 0 3
54190: PUSH
54191: LD_INT 28
54193: EQUAL
54194: IFFALSE 54204
// sCargo := true ;
54196: LD_ADDR_EXP 87
54200: PUSH
54201: LD_INT 1
54203: ST_TO_ADDR
// if p3 = 29 then
54204: LD_VAR 0 3
54208: PUSH
54209: LD_INT 29
54211: EQUAL
54212: IFFALSE 54222
// sDLaser := true ;
54214: LD_ADDR_EXP 88
54218: PUSH
54219: LD_INT 1
54221: ST_TO_ADDR
// if p3 = 30 then
54222: LD_VAR 0 3
54226: PUSH
54227: LD_INT 30
54229: EQUAL
54230: IFFALSE 54240
// sExchange := true ;
54232: LD_ADDR_EXP 89
54236: PUSH
54237: LD_INT 1
54239: ST_TO_ADDR
// if p3 = 31 then
54240: LD_VAR 0 3
54244: PUSH
54245: LD_INT 31
54247: EQUAL
54248: IFFALSE 54258
// sFac := true ;
54250: LD_ADDR_EXP 90
54254: PUSH
54255: LD_INT 1
54257: ST_TO_ADDR
// if p3 = 32 then
54258: LD_VAR 0 3
54262: PUSH
54263: LD_INT 32
54265: EQUAL
54266: IFFALSE 54276
// sPower := true ;
54268: LD_ADDR_EXP 91
54272: PUSH
54273: LD_INT 1
54275: ST_TO_ADDR
// if p3 = 33 then
54276: LD_VAR 0 3
54280: PUSH
54281: LD_INT 33
54283: EQUAL
54284: IFFALSE 54294
// sRandom := true ;
54286: LD_ADDR_EXP 92
54290: PUSH
54291: LD_INT 1
54293: ST_TO_ADDR
// if p3 = 34 then
54294: LD_VAR 0 3
54298: PUSH
54299: LD_INT 34
54301: EQUAL
54302: IFFALSE 54312
// sShield := true ;
54304: LD_ADDR_EXP 93
54308: PUSH
54309: LD_INT 1
54311: ST_TO_ADDR
// if p3 = 35 then
54312: LD_VAR 0 3
54316: PUSH
54317: LD_INT 35
54319: EQUAL
54320: IFFALSE 54330
// sTime := true ;
54322: LD_ADDR_EXP 94
54326: PUSH
54327: LD_INT 1
54329: ST_TO_ADDR
// if p3 = 36 then
54330: LD_VAR 0 3
54334: PUSH
54335: LD_INT 36
54337: EQUAL
54338: IFFALSE 54348
// sTools := true ;
54340: LD_ADDR_EXP 95
54344: PUSH
54345: LD_INT 1
54347: ST_TO_ADDR
// if p3 = 101 then
54348: LD_VAR 0 3
54352: PUSH
54353: LD_INT 101
54355: EQUAL
54356: IFFALSE 54366
// sSold := true ;
54358: LD_ADDR_EXP 60
54362: PUSH
54363: LD_INT 1
54365: ST_TO_ADDR
// if p3 = 102 then
54366: LD_VAR 0 3
54370: PUSH
54371: LD_INT 102
54373: EQUAL
54374: IFFALSE 54384
// sDiff := true ;
54376: LD_ADDR_EXP 61
54380: PUSH
54381: LD_INT 1
54383: ST_TO_ADDR
// if p3 = 103 then
54384: LD_VAR 0 3
54388: PUSH
54389: LD_INT 103
54391: EQUAL
54392: IFFALSE 54402
// sFog := true ;
54394: LD_ADDR_EXP 64
54398: PUSH
54399: LD_INT 1
54401: ST_TO_ADDR
// if p3 = 104 then
54402: LD_VAR 0 3
54406: PUSH
54407: LD_INT 104
54409: EQUAL
54410: IFFALSE 54420
// sReset := true ;
54412: LD_ADDR_EXP 65
54416: PUSH
54417: LD_INT 1
54419: ST_TO_ADDR
// if p3 = 105 then
54420: LD_VAR 0 3
54424: PUSH
54425: LD_INT 105
54427: EQUAL
54428: IFFALSE 54438
// sSun := true ;
54430: LD_ADDR_EXP 66
54434: PUSH
54435: LD_INT 1
54437: ST_TO_ADDR
// if p3 = 106 then
54438: LD_VAR 0 3
54442: PUSH
54443: LD_INT 106
54445: EQUAL
54446: IFFALSE 54456
// sTiger := true ;
54448: LD_ADDR_EXP 62
54452: PUSH
54453: LD_INT 1
54455: ST_TO_ADDR
// if p3 = 107 then
54456: LD_VAR 0 3
54460: PUSH
54461: LD_INT 107
54463: EQUAL
54464: IFFALSE 54474
// sBomb := true ;
54466: LD_ADDR_EXP 63
54470: PUSH
54471: LD_INT 1
54473: ST_TO_ADDR
// if p3 = 108 then
54474: LD_VAR 0 3
54478: PUSH
54479: LD_INT 108
54481: EQUAL
54482: IFFALSE 54492
// sWound := true ;
54484: LD_ADDR_EXP 71
54488: PUSH
54489: LD_INT 1
54491: ST_TO_ADDR
// if p3 = 109 then
54492: LD_VAR 0 3
54496: PUSH
54497: LD_INT 109
54499: EQUAL
54500: IFFALSE 54510
// sBetray := true ;
54502: LD_ADDR_EXP 75
54506: PUSH
54507: LD_INT 1
54509: ST_TO_ADDR
// if p3 = 110 then
54510: LD_VAR 0 3
54514: PUSH
54515: LD_INT 110
54517: EQUAL
54518: IFFALSE 54528
// sContamin := true ;
54520: LD_ADDR_EXP 76
54524: PUSH
54525: LD_INT 1
54527: ST_TO_ADDR
// if p3 = 111 then
54528: LD_VAR 0 3
54532: PUSH
54533: LD_INT 111
54535: EQUAL
54536: IFFALSE 54546
// sOil := true ;
54538: LD_ADDR_EXP 78
54542: PUSH
54543: LD_INT 1
54545: ST_TO_ADDR
// if p3 = 112 then
54546: LD_VAR 0 3
54550: PUSH
54551: LD_INT 112
54553: EQUAL
54554: IFFALSE 54564
// sStu := true ;
54556: LD_ADDR_EXP 82
54560: PUSH
54561: LD_INT 1
54563: ST_TO_ADDR
// if p3 = 113 then
54564: LD_VAR 0 3
54568: PUSH
54569: LD_INT 113
54571: EQUAL
54572: IFFALSE 54582
// sBazooka := true ;
54574: LD_ADDR_EXP 85
54578: PUSH
54579: LD_INT 1
54581: ST_TO_ADDR
// if p3 = 114 then
54582: LD_VAR 0 3
54586: PUSH
54587: LD_INT 114
54589: EQUAL
54590: IFFALSE 54600
// sMortar := true ;
54592: LD_ADDR_EXP 86
54596: PUSH
54597: LD_INT 1
54599: ST_TO_ADDR
// if p3 = 115 then
54600: LD_VAR 0 3
54604: PUSH
54605: LD_INT 115
54607: EQUAL
54608: IFFALSE 54618
// sRanger := true ;
54610: LD_ADDR_EXP 96
54614: PUSH
54615: LD_INT 1
54617: ST_TO_ADDR
// if p3 = 116 then
54618: LD_VAR 0 3
54622: PUSH
54623: LD_INT 116
54625: EQUAL
54626: IFFALSE 54636
// sComputer := true ;
54628: LD_ADDR_EXP 97
54632: PUSH
54633: LD_INT 1
54635: ST_TO_ADDR
// if p3 = 117 then
54636: LD_VAR 0 3
54640: PUSH
54641: LD_INT 117
54643: EQUAL
54644: IFFALSE 54654
// s30 := true ;
54646: LD_ADDR_EXP 98
54650: PUSH
54651: LD_INT 1
54653: ST_TO_ADDR
// if p3 = 118 then
54654: LD_VAR 0 3
54658: PUSH
54659: LD_INT 118
54661: EQUAL
54662: IFFALSE 54672
// s60 := true ;
54664: LD_ADDR_EXP 99
54668: PUSH
54669: LD_INT 1
54671: ST_TO_ADDR
// end ; if p2 = hack_mode then
54672: LD_VAR 0 2
54676: PUSH
54677: LD_INT 101
54679: EQUAL
54680: IFFALSE 54808
// begin case p3 of 1 :
54682: LD_VAR 0 3
54686: PUSH
54687: LD_INT 1
54689: DOUBLE
54690: EQUAL
54691: IFTRUE 54695
54693: GO 54702
54695: POP
// hHackUnlimitedResources ; 2 :
54696: CALL 66955 0 0
54700: GO 54808
54702: LD_INT 2
54704: DOUBLE
54705: EQUAL
54706: IFTRUE 54710
54708: GO 54717
54710: POP
// hHackSetLevel10 ; 3 :
54711: CALL 67088 0 0
54715: GO 54808
54717: LD_INT 3
54719: DOUBLE
54720: EQUAL
54721: IFTRUE 54725
54723: GO 54732
54725: POP
// hHackSetLevel10YourUnits ; 4 :
54726: CALL 67173 0 0
54730: GO 54808
54732: LD_INT 4
54734: DOUBLE
54735: EQUAL
54736: IFTRUE 54740
54738: GO 54747
54740: POP
// hHackInvincible ; 5 :
54741: CALL 67621 0 0
54745: GO 54808
54747: LD_INT 5
54749: DOUBLE
54750: EQUAL
54751: IFTRUE 54755
54753: GO 54762
54755: POP
// hHackInvisible ; 6 :
54756: CALL 67732 0 0
54760: GO 54808
54762: LD_INT 6
54764: DOUBLE
54765: EQUAL
54766: IFTRUE 54770
54768: GO 54777
54770: POP
// hHackChangeYourSide ; 7 :
54771: CALL 67789 0 0
54775: GO 54808
54777: LD_INT 7
54779: DOUBLE
54780: EQUAL
54781: IFTRUE 54785
54783: GO 54792
54785: POP
// hHackChangeUnitSide ; 8 :
54786: CALL 67831 0 0
54790: GO 54808
54792: LD_INT 8
54794: DOUBLE
54795: EQUAL
54796: IFTRUE 54800
54798: GO 54807
54800: POP
// hHackFog ; end ;
54801: CALL 67932 0 0
54805: GO 54808
54807: POP
// end ; if p2 = game_save_mode then
54808: LD_VAR 0 2
54812: PUSH
54813: LD_INT 102
54815: EQUAL
54816: IFFALSE 54871
// begin if p3 = 1 then
54818: LD_VAR 0 3
54822: PUSH
54823: LD_INT 1
54825: EQUAL
54826: IFFALSE 54838
// globalGameSaveCounter := p4 ;
54828: LD_ADDR_EXP 42
54832: PUSH
54833: LD_VAR 0 4
54837: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54838: LD_VAR 0 3
54842: PUSH
54843: LD_INT 2
54845: EQUAL
54846: PUSH
54847: LD_EXP 42
54851: AND
54852: IFFALSE 54871
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54854: LD_STRING setGameSaveCounter(
54856: PUSH
54857: LD_EXP 42
54861: STR
54862: PUSH
54863: LD_STRING )
54865: STR
54866: PPUSH
54867: CALL_OW 559
// end ; end ;
54871: LD_VAR 0 7
54875: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54876: LD_INT 0
54878: PPUSH
// streamModeActive := false ;
54879: LD_ADDR_EXP 43
54883: PUSH
54884: LD_INT 0
54886: ST_TO_ADDR
// normalCounter := 36 ;
54887: LD_ADDR_EXP 44
54891: PUSH
54892: LD_INT 36
54894: ST_TO_ADDR
// hardcoreCounter := 18 ;
54895: LD_ADDR_EXP 45
54899: PUSH
54900: LD_INT 18
54902: ST_TO_ADDR
// sRocket := false ;
54903: LD_ADDR_EXP 48
54907: PUSH
54908: LD_INT 0
54910: ST_TO_ADDR
// sSpeed := false ;
54911: LD_ADDR_EXP 47
54915: PUSH
54916: LD_INT 0
54918: ST_TO_ADDR
// sEngine := false ;
54919: LD_ADDR_EXP 49
54923: PUSH
54924: LD_INT 0
54926: ST_TO_ADDR
// sSpec := false ;
54927: LD_ADDR_EXP 46
54931: PUSH
54932: LD_INT 0
54934: ST_TO_ADDR
// sLevel := false ;
54935: LD_ADDR_EXP 50
54939: PUSH
54940: LD_INT 0
54942: ST_TO_ADDR
// sArmoury := false ;
54943: LD_ADDR_EXP 51
54947: PUSH
54948: LD_INT 0
54950: ST_TO_ADDR
// sRadar := false ;
54951: LD_ADDR_EXP 52
54955: PUSH
54956: LD_INT 0
54958: ST_TO_ADDR
// sBunker := false ;
54959: LD_ADDR_EXP 53
54963: PUSH
54964: LD_INT 0
54966: ST_TO_ADDR
// sHack := false ;
54967: LD_ADDR_EXP 54
54971: PUSH
54972: LD_INT 0
54974: ST_TO_ADDR
// sFire := false ;
54975: LD_ADDR_EXP 55
54979: PUSH
54980: LD_INT 0
54982: ST_TO_ADDR
// sRefresh := false ;
54983: LD_ADDR_EXP 56
54987: PUSH
54988: LD_INT 0
54990: ST_TO_ADDR
// sExp := false ;
54991: LD_ADDR_EXP 57
54995: PUSH
54996: LD_INT 0
54998: ST_TO_ADDR
// sDepot := false ;
54999: LD_ADDR_EXP 58
55003: PUSH
55004: LD_INT 0
55006: ST_TO_ADDR
// sFlag := false ;
55007: LD_ADDR_EXP 59
55011: PUSH
55012: LD_INT 0
55014: ST_TO_ADDR
// sKamikadze := false ;
55015: LD_ADDR_EXP 67
55019: PUSH
55020: LD_INT 0
55022: ST_TO_ADDR
// sTroll := false ;
55023: LD_ADDR_EXP 68
55027: PUSH
55028: LD_INT 0
55030: ST_TO_ADDR
// sSlow := false ;
55031: LD_ADDR_EXP 69
55035: PUSH
55036: LD_INT 0
55038: ST_TO_ADDR
// sLack := false ;
55039: LD_ADDR_EXP 70
55043: PUSH
55044: LD_INT 0
55046: ST_TO_ADDR
// sTank := false ;
55047: LD_ADDR_EXP 72
55051: PUSH
55052: LD_INT 0
55054: ST_TO_ADDR
// sRemote := false ;
55055: LD_ADDR_EXP 73
55059: PUSH
55060: LD_INT 0
55062: ST_TO_ADDR
// sPowell := false ;
55063: LD_ADDR_EXP 74
55067: PUSH
55068: LD_INT 0
55070: ST_TO_ADDR
// sTeleport := false ;
55071: LD_ADDR_EXP 77
55075: PUSH
55076: LD_INT 0
55078: ST_TO_ADDR
// sOilTower := false ;
55079: LD_ADDR_EXP 79
55083: PUSH
55084: LD_INT 0
55086: ST_TO_ADDR
// sShovel := false ;
55087: LD_ADDR_EXP 80
55091: PUSH
55092: LD_INT 0
55094: ST_TO_ADDR
// sSheik := false ;
55095: LD_ADDR_EXP 81
55099: PUSH
55100: LD_INT 0
55102: ST_TO_ADDR
// sEarthquake := false ;
55103: LD_ADDR_EXP 83
55107: PUSH
55108: LD_INT 0
55110: ST_TO_ADDR
// sAI := false ;
55111: LD_ADDR_EXP 84
55115: PUSH
55116: LD_INT 0
55118: ST_TO_ADDR
// sCargo := false ;
55119: LD_ADDR_EXP 87
55123: PUSH
55124: LD_INT 0
55126: ST_TO_ADDR
// sDLaser := false ;
55127: LD_ADDR_EXP 88
55131: PUSH
55132: LD_INT 0
55134: ST_TO_ADDR
// sExchange := false ;
55135: LD_ADDR_EXP 89
55139: PUSH
55140: LD_INT 0
55142: ST_TO_ADDR
// sFac := false ;
55143: LD_ADDR_EXP 90
55147: PUSH
55148: LD_INT 0
55150: ST_TO_ADDR
// sPower := false ;
55151: LD_ADDR_EXP 91
55155: PUSH
55156: LD_INT 0
55158: ST_TO_ADDR
// sRandom := false ;
55159: LD_ADDR_EXP 92
55163: PUSH
55164: LD_INT 0
55166: ST_TO_ADDR
// sShield := false ;
55167: LD_ADDR_EXP 93
55171: PUSH
55172: LD_INT 0
55174: ST_TO_ADDR
// sTime := false ;
55175: LD_ADDR_EXP 94
55179: PUSH
55180: LD_INT 0
55182: ST_TO_ADDR
// sTools := false ;
55183: LD_ADDR_EXP 95
55187: PUSH
55188: LD_INT 0
55190: ST_TO_ADDR
// sSold := false ;
55191: LD_ADDR_EXP 60
55195: PUSH
55196: LD_INT 0
55198: ST_TO_ADDR
// sDiff := false ;
55199: LD_ADDR_EXP 61
55203: PUSH
55204: LD_INT 0
55206: ST_TO_ADDR
// sFog := false ;
55207: LD_ADDR_EXP 64
55211: PUSH
55212: LD_INT 0
55214: ST_TO_ADDR
// sReset := false ;
55215: LD_ADDR_EXP 65
55219: PUSH
55220: LD_INT 0
55222: ST_TO_ADDR
// sSun := false ;
55223: LD_ADDR_EXP 66
55227: PUSH
55228: LD_INT 0
55230: ST_TO_ADDR
// sTiger := false ;
55231: LD_ADDR_EXP 62
55235: PUSH
55236: LD_INT 0
55238: ST_TO_ADDR
// sBomb := false ;
55239: LD_ADDR_EXP 63
55243: PUSH
55244: LD_INT 0
55246: ST_TO_ADDR
// sWound := false ;
55247: LD_ADDR_EXP 71
55251: PUSH
55252: LD_INT 0
55254: ST_TO_ADDR
// sBetray := false ;
55255: LD_ADDR_EXP 75
55259: PUSH
55260: LD_INT 0
55262: ST_TO_ADDR
// sContamin := false ;
55263: LD_ADDR_EXP 76
55267: PUSH
55268: LD_INT 0
55270: ST_TO_ADDR
// sOil := false ;
55271: LD_ADDR_EXP 78
55275: PUSH
55276: LD_INT 0
55278: ST_TO_ADDR
// sStu := false ;
55279: LD_ADDR_EXP 82
55283: PUSH
55284: LD_INT 0
55286: ST_TO_ADDR
// sBazooka := false ;
55287: LD_ADDR_EXP 85
55291: PUSH
55292: LD_INT 0
55294: ST_TO_ADDR
// sMortar := false ;
55295: LD_ADDR_EXP 86
55299: PUSH
55300: LD_INT 0
55302: ST_TO_ADDR
// sRanger := false ;
55303: LD_ADDR_EXP 96
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
// sComputer := false ;
55311: LD_ADDR_EXP 97
55315: PUSH
55316: LD_INT 0
55318: ST_TO_ADDR
// s30 := false ;
55319: LD_ADDR_EXP 98
55323: PUSH
55324: LD_INT 0
55326: ST_TO_ADDR
// s60 := false ;
55327: LD_ADDR_EXP 99
55331: PUSH
55332: LD_INT 0
55334: ST_TO_ADDR
// end ;
55335: LD_VAR 0 1
55339: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55340: LD_INT 0
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
55347: PPUSH
55348: PPUSH
// result := [ ] ;
55349: LD_ADDR_VAR 0 2
55353: PUSH
55354: EMPTY
55355: ST_TO_ADDR
// if campaign_id = 1 then
55356: LD_OWVAR 69
55360: PUSH
55361: LD_INT 1
55363: EQUAL
55364: IFFALSE 58530
// begin case mission_number of 1 :
55366: LD_OWVAR 70
55370: PUSH
55371: LD_INT 1
55373: DOUBLE
55374: EQUAL
55375: IFTRUE 55379
55377: GO 55455
55379: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55380: LD_ADDR_VAR 0 2
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: LD_INT 11
55393: PUSH
55394: LD_INT 12
55396: PUSH
55397: LD_INT 15
55399: PUSH
55400: LD_INT 16
55402: PUSH
55403: LD_INT 22
55405: PUSH
55406: LD_INT 23
55408: PUSH
55409: LD_INT 26
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 101
55425: PUSH
55426: LD_INT 102
55428: PUSH
55429: LD_INT 106
55431: PUSH
55432: LD_INT 116
55434: PUSH
55435: LD_INT 117
55437: PUSH
55438: LD_INT 118
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: ST_TO_ADDR
55453: GO 58528
55455: LD_INT 2
55457: DOUBLE
55458: EQUAL
55459: IFTRUE 55463
55461: GO 55547
55463: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55464: LD_ADDR_VAR 0 2
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: LD_INT 4
55474: PUSH
55475: LD_INT 11
55477: PUSH
55478: LD_INT 12
55480: PUSH
55481: LD_INT 15
55483: PUSH
55484: LD_INT 16
55486: PUSH
55487: LD_INT 22
55489: PUSH
55490: LD_INT 23
55492: PUSH
55493: LD_INT 26
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 101
55509: PUSH
55510: LD_INT 102
55512: PUSH
55513: LD_INT 105
55515: PUSH
55516: LD_INT 106
55518: PUSH
55519: LD_INT 108
55521: PUSH
55522: LD_INT 116
55524: PUSH
55525: LD_INT 117
55527: PUSH
55528: LD_INT 118
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: ST_TO_ADDR
55545: GO 58528
55547: LD_INT 3
55549: DOUBLE
55550: EQUAL
55551: IFTRUE 55555
55553: GO 55643
55555: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55556: LD_ADDR_VAR 0 2
55560: PUSH
55561: LD_INT 2
55563: PUSH
55564: LD_INT 4
55566: PUSH
55567: LD_INT 5
55569: PUSH
55570: LD_INT 11
55572: PUSH
55573: LD_INT 12
55575: PUSH
55576: LD_INT 15
55578: PUSH
55579: LD_INT 16
55581: PUSH
55582: LD_INT 22
55584: PUSH
55585: LD_INT 26
55587: PUSH
55588: LD_INT 36
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 101
55605: PUSH
55606: LD_INT 102
55608: PUSH
55609: LD_INT 105
55611: PUSH
55612: LD_INT 106
55614: PUSH
55615: LD_INT 108
55617: PUSH
55618: LD_INT 116
55620: PUSH
55621: LD_INT 117
55623: PUSH
55624: LD_INT 118
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: ST_TO_ADDR
55641: GO 58528
55643: LD_INT 4
55645: DOUBLE
55646: EQUAL
55647: IFTRUE 55651
55649: GO 55747
55651: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55652: LD_ADDR_VAR 0 2
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 4
55662: PUSH
55663: LD_INT 5
55665: PUSH
55666: LD_INT 8
55668: PUSH
55669: LD_INT 11
55671: PUSH
55672: LD_INT 12
55674: PUSH
55675: LD_INT 15
55677: PUSH
55678: LD_INT 16
55680: PUSH
55681: LD_INT 22
55683: PUSH
55684: LD_INT 23
55686: PUSH
55687: LD_INT 26
55689: PUSH
55690: LD_INT 36
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 101
55709: PUSH
55710: LD_INT 102
55712: PUSH
55713: LD_INT 105
55715: PUSH
55716: LD_INT 106
55718: PUSH
55719: LD_INT 108
55721: PUSH
55722: LD_INT 116
55724: PUSH
55725: LD_INT 117
55727: PUSH
55728: LD_INT 118
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: ST_TO_ADDR
55745: GO 58528
55747: LD_INT 5
55749: DOUBLE
55750: EQUAL
55751: IFTRUE 55755
55753: GO 55867
55755: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55756: LD_ADDR_VAR 0 2
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: LD_INT 5
55769: PUSH
55770: LD_INT 6
55772: PUSH
55773: LD_INT 8
55775: PUSH
55776: LD_INT 11
55778: PUSH
55779: LD_INT 12
55781: PUSH
55782: LD_INT 15
55784: PUSH
55785: LD_INT 16
55787: PUSH
55788: LD_INT 22
55790: PUSH
55791: LD_INT 23
55793: PUSH
55794: LD_INT 25
55796: PUSH
55797: LD_INT 26
55799: PUSH
55800: LD_INT 36
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 101
55821: PUSH
55822: LD_INT 102
55824: PUSH
55825: LD_INT 105
55827: PUSH
55828: LD_INT 106
55830: PUSH
55831: LD_INT 108
55833: PUSH
55834: LD_INT 109
55836: PUSH
55837: LD_INT 112
55839: PUSH
55840: LD_INT 116
55842: PUSH
55843: LD_INT 117
55845: PUSH
55846: LD_INT 118
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: ST_TO_ADDR
55865: GO 58528
55867: LD_INT 6
55869: DOUBLE
55870: EQUAL
55871: IFTRUE 55875
55873: GO 56007
55875: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55876: LD_ADDR_VAR 0 2
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: LD_INT 5
55889: PUSH
55890: LD_INT 6
55892: PUSH
55893: LD_INT 8
55895: PUSH
55896: LD_INT 11
55898: PUSH
55899: LD_INT 12
55901: PUSH
55902: LD_INT 15
55904: PUSH
55905: LD_INT 16
55907: PUSH
55908: LD_INT 20
55910: PUSH
55911: LD_INT 21
55913: PUSH
55914: LD_INT 22
55916: PUSH
55917: LD_INT 23
55919: PUSH
55920: LD_INT 25
55922: PUSH
55923: LD_INT 26
55925: PUSH
55926: LD_INT 30
55928: PUSH
55929: LD_INT 31
55931: PUSH
55932: LD_INT 32
55934: PUSH
55935: LD_INT 36
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 101
55961: PUSH
55962: LD_INT 102
55964: PUSH
55965: LD_INT 105
55967: PUSH
55968: LD_INT 106
55970: PUSH
55971: LD_INT 108
55973: PUSH
55974: LD_INT 109
55976: PUSH
55977: LD_INT 112
55979: PUSH
55980: LD_INT 116
55982: PUSH
55983: LD_INT 117
55985: PUSH
55986: LD_INT 118
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: ST_TO_ADDR
56005: GO 58528
56007: LD_INT 7
56009: DOUBLE
56010: EQUAL
56011: IFTRUE 56015
56013: GO 56127
56015: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: LD_INT 2
56023: PUSH
56024: LD_INT 4
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: LD_INT 7
56032: PUSH
56033: LD_INT 11
56035: PUSH
56036: LD_INT 12
56038: PUSH
56039: LD_INT 15
56041: PUSH
56042: LD_INT 16
56044: PUSH
56045: LD_INT 20
56047: PUSH
56048: LD_INT 21
56050: PUSH
56051: LD_INT 22
56053: PUSH
56054: LD_INT 23
56056: PUSH
56057: LD_INT 25
56059: PUSH
56060: LD_INT 26
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 101
56081: PUSH
56082: LD_INT 102
56084: PUSH
56085: LD_INT 103
56087: PUSH
56088: LD_INT 105
56090: PUSH
56091: LD_INT 106
56093: PUSH
56094: LD_INT 108
56096: PUSH
56097: LD_INT 112
56099: PUSH
56100: LD_INT 116
56102: PUSH
56103: LD_INT 117
56105: PUSH
56106: LD_INT 118
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: ST_TO_ADDR
56125: GO 58528
56127: LD_INT 8
56129: DOUBLE
56130: EQUAL
56131: IFTRUE 56135
56133: GO 56275
56135: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56136: LD_ADDR_VAR 0 2
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: LD_INT 5
56149: PUSH
56150: LD_INT 6
56152: PUSH
56153: LD_INT 7
56155: PUSH
56156: LD_INT 8
56158: PUSH
56159: LD_INT 11
56161: PUSH
56162: LD_INT 12
56164: PUSH
56165: LD_INT 15
56167: PUSH
56168: LD_INT 16
56170: PUSH
56171: LD_INT 20
56173: PUSH
56174: LD_INT 21
56176: PUSH
56177: LD_INT 22
56179: PUSH
56180: LD_INT 23
56182: PUSH
56183: LD_INT 25
56185: PUSH
56186: LD_INT 26
56188: PUSH
56189: LD_INT 30
56191: PUSH
56192: LD_INT 31
56194: PUSH
56195: LD_INT 32
56197: PUSH
56198: LD_INT 36
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 101
56225: PUSH
56226: LD_INT 102
56228: PUSH
56229: LD_INT 103
56231: PUSH
56232: LD_INT 105
56234: PUSH
56235: LD_INT 106
56237: PUSH
56238: LD_INT 108
56240: PUSH
56241: LD_INT 109
56243: PUSH
56244: LD_INT 112
56246: PUSH
56247: LD_INT 116
56249: PUSH
56250: LD_INT 117
56252: PUSH
56253: LD_INT 118
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: ST_TO_ADDR
56273: GO 58528
56275: LD_INT 9
56277: DOUBLE
56278: EQUAL
56279: IFTRUE 56283
56281: GO 56431
56283: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56284: LD_ADDR_VAR 0 2
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: LD_INT 4
56294: PUSH
56295: LD_INT 5
56297: PUSH
56298: LD_INT 6
56300: PUSH
56301: LD_INT 7
56303: PUSH
56304: LD_INT 8
56306: PUSH
56307: LD_INT 11
56309: PUSH
56310: LD_INT 12
56312: PUSH
56313: LD_INT 15
56315: PUSH
56316: LD_INT 16
56318: PUSH
56319: LD_INT 20
56321: PUSH
56322: LD_INT 21
56324: PUSH
56325: LD_INT 22
56327: PUSH
56328: LD_INT 23
56330: PUSH
56331: LD_INT 25
56333: PUSH
56334: LD_INT 26
56336: PUSH
56337: LD_INT 28
56339: PUSH
56340: LD_INT 30
56342: PUSH
56343: LD_INT 31
56345: PUSH
56346: LD_INT 32
56348: PUSH
56349: LD_INT 36
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 101
56377: PUSH
56378: LD_INT 102
56380: PUSH
56381: LD_INT 103
56383: PUSH
56384: LD_INT 105
56386: PUSH
56387: LD_INT 106
56389: PUSH
56390: LD_INT 108
56392: PUSH
56393: LD_INT 109
56395: PUSH
56396: LD_INT 112
56398: PUSH
56399: LD_INT 114
56401: PUSH
56402: LD_INT 116
56404: PUSH
56405: LD_INT 117
56407: PUSH
56408: LD_INT 118
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: ST_TO_ADDR
56429: GO 58528
56431: LD_INT 10
56433: DOUBLE
56434: EQUAL
56435: IFTRUE 56439
56437: GO 56635
56439: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56440: LD_ADDR_VAR 0 2
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: LD_INT 4
56450: PUSH
56451: LD_INT 5
56453: PUSH
56454: LD_INT 6
56456: PUSH
56457: LD_INT 7
56459: PUSH
56460: LD_INT 8
56462: PUSH
56463: LD_INT 9
56465: PUSH
56466: LD_INT 10
56468: PUSH
56469: LD_INT 11
56471: PUSH
56472: LD_INT 12
56474: PUSH
56475: LD_INT 13
56477: PUSH
56478: LD_INT 14
56480: PUSH
56481: LD_INT 15
56483: PUSH
56484: LD_INT 16
56486: PUSH
56487: LD_INT 17
56489: PUSH
56490: LD_INT 18
56492: PUSH
56493: LD_INT 19
56495: PUSH
56496: LD_INT 20
56498: PUSH
56499: LD_INT 21
56501: PUSH
56502: LD_INT 22
56504: PUSH
56505: LD_INT 23
56507: PUSH
56508: LD_INT 24
56510: PUSH
56511: LD_INT 25
56513: PUSH
56514: LD_INT 26
56516: PUSH
56517: LD_INT 28
56519: PUSH
56520: LD_INT 30
56522: PUSH
56523: LD_INT 31
56525: PUSH
56526: LD_INT 32
56528: PUSH
56529: LD_INT 36
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 101
56565: PUSH
56566: LD_INT 102
56568: PUSH
56569: LD_INT 103
56571: PUSH
56572: LD_INT 104
56574: PUSH
56575: LD_INT 105
56577: PUSH
56578: LD_INT 106
56580: PUSH
56581: LD_INT 107
56583: PUSH
56584: LD_INT 108
56586: PUSH
56587: LD_INT 109
56589: PUSH
56590: LD_INT 110
56592: PUSH
56593: LD_INT 111
56595: PUSH
56596: LD_INT 112
56598: PUSH
56599: LD_INT 114
56601: PUSH
56602: LD_INT 116
56604: PUSH
56605: LD_INT 117
56607: PUSH
56608: LD_INT 118
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: ST_TO_ADDR
56633: GO 58528
56635: LD_INT 11
56637: DOUBLE
56638: EQUAL
56639: IFTRUE 56643
56641: GO 56847
56643: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56644: LD_ADDR_VAR 0 2
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 5
56660: PUSH
56661: LD_INT 6
56663: PUSH
56664: LD_INT 7
56666: PUSH
56667: LD_INT 8
56669: PUSH
56670: LD_INT 9
56672: PUSH
56673: LD_INT 10
56675: PUSH
56676: LD_INT 11
56678: PUSH
56679: LD_INT 12
56681: PUSH
56682: LD_INT 13
56684: PUSH
56685: LD_INT 14
56687: PUSH
56688: LD_INT 15
56690: PUSH
56691: LD_INT 16
56693: PUSH
56694: LD_INT 17
56696: PUSH
56697: LD_INT 18
56699: PUSH
56700: LD_INT 19
56702: PUSH
56703: LD_INT 20
56705: PUSH
56706: LD_INT 21
56708: PUSH
56709: LD_INT 22
56711: PUSH
56712: LD_INT 23
56714: PUSH
56715: LD_INT 24
56717: PUSH
56718: LD_INT 25
56720: PUSH
56721: LD_INT 26
56723: PUSH
56724: LD_INT 28
56726: PUSH
56727: LD_INT 30
56729: PUSH
56730: LD_INT 31
56732: PUSH
56733: LD_INT 32
56735: PUSH
56736: LD_INT 34
56738: PUSH
56739: LD_INT 36
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 101
56777: PUSH
56778: LD_INT 102
56780: PUSH
56781: LD_INT 103
56783: PUSH
56784: LD_INT 104
56786: PUSH
56787: LD_INT 105
56789: PUSH
56790: LD_INT 106
56792: PUSH
56793: LD_INT 107
56795: PUSH
56796: LD_INT 108
56798: PUSH
56799: LD_INT 109
56801: PUSH
56802: LD_INT 110
56804: PUSH
56805: LD_INT 111
56807: PUSH
56808: LD_INT 112
56810: PUSH
56811: LD_INT 114
56813: PUSH
56814: LD_INT 116
56816: PUSH
56817: LD_INT 117
56819: PUSH
56820: LD_INT 118
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: ST_TO_ADDR
56845: GO 58528
56847: LD_INT 12
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56855
56853: GO 57075
56855: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56856: LD_ADDR_VAR 0 2
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: LD_INT 3
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: LD_INT 6
56878: PUSH
56879: LD_INT 7
56881: PUSH
56882: LD_INT 8
56884: PUSH
56885: LD_INT 9
56887: PUSH
56888: LD_INT 10
56890: PUSH
56891: LD_INT 11
56893: PUSH
56894: LD_INT 12
56896: PUSH
56897: LD_INT 13
56899: PUSH
56900: LD_INT 14
56902: PUSH
56903: LD_INT 15
56905: PUSH
56906: LD_INT 16
56908: PUSH
56909: LD_INT 17
56911: PUSH
56912: LD_INT 18
56914: PUSH
56915: LD_INT 19
56917: PUSH
56918: LD_INT 20
56920: PUSH
56921: LD_INT 21
56923: PUSH
56924: LD_INT 22
56926: PUSH
56927: LD_INT 23
56929: PUSH
56930: LD_INT 24
56932: PUSH
56933: LD_INT 25
56935: PUSH
56936: LD_INT 26
56938: PUSH
56939: LD_INT 27
56941: PUSH
56942: LD_INT 28
56944: PUSH
56945: LD_INT 30
56947: PUSH
56948: LD_INT 31
56950: PUSH
56951: LD_INT 32
56953: PUSH
56954: LD_INT 33
56956: PUSH
56957: LD_INT 34
56959: PUSH
56960: LD_INT 36
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 101
57001: PUSH
57002: LD_INT 102
57004: PUSH
57005: LD_INT 103
57007: PUSH
57008: LD_INT 104
57010: PUSH
57011: LD_INT 105
57013: PUSH
57014: LD_INT 106
57016: PUSH
57017: LD_INT 107
57019: PUSH
57020: LD_INT 108
57022: PUSH
57023: LD_INT 109
57025: PUSH
57026: LD_INT 110
57028: PUSH
57029: LD_INT 111
57031: PUSH
57032: LD_INT 112
57034: PUSH
57035: LD_INT 113
57037: PUSH
57038: LD_INT 114
57040: PUSH
57041: LD_INT 116
57043: PUSH
57044: LD_INT 117
57046: PUSH
57047: LD_INT 118
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: ST_TO_ADDR
57073: GO 58528
57075: LD_INT 13
57077: DOUBLE
57078: EQUAL
57079: IFTRUE 57083
57081: GO 57291
57083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57084: LD_ADDR_VAR 0 2
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 4
57100: PUSH
57101: LD_INT 5
57103: PUSH
57104: LD_INT 8
57106: PUSH
57107: LD_INT 9
57109: PUSH
57110: LD_INT 10
57112: PUSH
57113: LD_INT 11
57115: PUSH
57116: LD_INT 12
57118: PUSH
57119: LD_INT 14
57121: PUSH
57122: LD_INT 15
57124: PUSH
57125: LD_INT 16
57127: PUSH
57128: LD_INT 17
57130: PUSH
57131: LD_INT 18
57133: PUSH
57134: LD_INT 19
57136: PUSH
57137: LD_INT 20
57139: PUSH
57140: LD_INT 21
57142: PUSH
57143: LD_INT 22
57145: PUSH
57146: LD_INT 23
57148: PUSH
57149: LD_INT 24
57151: PUSH
57152: LD_INT 25
57154: PUSH
57155: LD_INT 26
57157: PUSH
57158: LD_INT 27
57160: PUSH
57161: LD_INT 28
57163: PUSH
57164: LD_INT 30
57166: PUSH
57167: LD_INT 31
57169: PUSH
57170: LD_INT 32
57172: PUSH
57173: LD_INT 33
57175: PUSH
57176: LD_INT 34
57178: PUSH
57179: LD_INT 36
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 101
57217: PUSH
57218: LD_INT 102
57220: PUSH
57221: LD_INT 103
57223: PUSH
57224: LD_INT 104
57226: PUSH
57227: LD_INT 105
57229: PUSH
57230: LD_INT 106
57232: PUSH
57233: LD_INT 107
57235: PUSH
57236: LD_INT 108
57238: PUSH
57239: LD_INT 109
57241: PUSH
57242: LD_INT 110
57244: PUSH
57245: LD_INT 111
57247: PUSH
57248: LD_INT 112
57250: PUSH
57251: LD_INT 113
57253: PUSH
57254: LD_INT 114
57256: PUSH
57257: LD_INT 116
57259: PUSH
57260: LD_INT 117
57262: PUSH
57263: LD_INT 118
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: ST_TO_ADDR
57289: GO 58528
57291: LD_INT 14
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57299
57297: GO 57523
57299: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57300: LD_ADDR_VAR 0 2
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: LD_INT 5
57319: PUSH
57320: LD_INT 6
57322: PUSH
57323: LD_INT 7
57325: PUSH
57326: LD_INT 8
57328: PUSH
57329: LD_INT 9
57331: PUSH
57332: LD_INT 10
57334: PUSH
57335: LD_INT 11
57337: PUSH
57338: LD_INT 12
57340: PUSH
57341: LD_INT 13
57343: PUSH
57344: LD_INT 14
57346: PUSH
57347: LD_INT 15
57349: PUSH
57350: LD_INT 16
57352: PUSH
57353: LD_INT 17
57355: PUSH
57356: LD_INT 18
57358: PUSH
57359: LD_INT 19
57361: PUSH
57362: LD_INT 20
57364: PUSH
57365: LD_INT 21
57367: PUSH
57368: LD_INT 22
57370: PUSH
57371: LD_INT 23
57373: PUSH
57374: LD_INT 24
57376: PUSH
57377: LD_INT 25
57379: PUSH
57380: LD_INT 26
57382: PUSH
57383: LD_INT 27
57385: PUSH
57386: LD_INT 28
57388: PUSH
57389: LD_INT 29
57391: PUSH
57392: LD_INT 30
57394: PUSH
57395: LD_INT 31
57397: PUSH
57398: LD_INT 32
57400: PUSH
57401: LD_INT 33
57403: PUSH
57404: LD_INT 34
57406: PUSH
57407: LD_INT 36
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 101
57449: PUSH
57450: LD_INT 102
57452: PUSH
57453: LD_INT 103
57455: PUSH
57456: LD_INT 104
57458: PUSH
57459: LD_INT 105
57461: PUSH
57462: LD_INT 106
57464: PUSH
57465: LD_INT 107
57467: PUSH
57468: LD_INT 108
57470: PUSH
57471: LD_INT 109
57473: PUSH
57474: LD_INT 110
57476: PUSH
57477: LD_INT 111
57479: PUSH
57480: LD_INT 112
57482: PUSH
57483: LD_INT 113
57485: PUSH
57486: LD_INT 114
57488: PUSH
57489: LD_INT 116
57491: PUSH
57492: LD_INT 117
57494: PUSH
57495: LD_INT 118
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: ST_TO_ADDR
57521: GO 58528
57523: LD_INT 15
57525: DOUBLE
57526: EQUAL
57527: IFTRUE 57531
57529: GO 57755
57531: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57532: LD_ADDR_VAR 0 2
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 2
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: LD_INT 5
57551: PUSH
57552: LD_INT 6
57554: PUSH
57555: LD_INT 7
57557: PUSH
57558: LD_INT 8
57560: PUSH
57561: LD_INT 9
57563: PUSH
57564: LD_INT 10
57566: PUSH
57567: LD_INT 11
57569: PUSH
57570: LD_INT 12
57572: PUSH
57573: LD_INT 13
57575: PUSH
57576: LD_INT 14
57578: PUSH
57579: LD_INT 15
57581: PUSH
57582: LD_INT 16
57584: PUSH
57585: LD_INT 17
57587: PUSH
57588: LD_INT 18
57590: PUSH
57591: LD_INT 19
57593: PUSH
57594: LD_INT 20
57596: PUSH
57597: LD_INT 21
57599: PUSH
57600: LD_INT 22
57602: PUSH
57603: LD_INT 23
57605: PUSH
57606: LD_INT 24
57608: PUSH
57609: LD_INT 25
57611: PUSH
57612: LD_INT 26
57614: PUSH
57615: LD_INT 27
57617: PUSH
57618: LD_INT 28
57620: PUSH
57621: LD_INT 29
57623: PUSH
57624: LD_INT 30
57626: PUSH
57627: LD_INT 31
57629: PUSH
57630: LD_INT 32
57632: PUSH
57633: LD_INT 33
57635: PUSH
57636: LD_INT 34
57638: PUSH
57639: LD_INT 36
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 101
57681: PUSH
57682: LD_INT 102
57684: PUSH
57685: LD_INT 103
57687: PUSH
57688: LD_INT 104
57690: PUSH
57691: LD_INT 105
57693: PUSH
57694: LD_INT 106
57696: PUSH
57697: LD_INT 107
57699: PUSH
57700: LD_INT 108
57702: PUSH
57703: LD_INT 109
57705: PUSH
57706: LD_INT 110
57708: PUSH
57709: LD_INT 111
57711: PUSH
57712: LD_INT 112
57714: PUSH
57715: LD_INT 113
57717: PUSH
57718: LD_INT 114
57720: PUSH
57721: LD_INT 116
57723: PUSH
57724: LD_INT 117
57726: PUSH
57727: LD_INT 118
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: ST_TO_ADDR
57753: GO 58528
57755: LD_INT 16
57757: DOUBLE
57758: EQUAL
57759: IFTRUE 57763
57761: GO 57899
57763: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57764: LD_ADDR_VAR 0 2
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: LD_INT 4
57774: PUSH
57775: LD_INT 5
57777: PUSH
57778: LD_INT 7
57780: PUSH
57781: LD_INT 11
57783: PUSH
57784: LD_INT 12
57786: PUSH
57787: LD_INT 15
57789: PUSH
57790: LD_INT 16
57792: PUSH
57793: LD_INT 20
57795: PUSH
57796: LD_INT 21
57798: PUSH
57799: LD_INT 22
57801: PUSH
57802: LD_INT 23
57804: PUSH
57805: LD_INT 25
57807: PUSH
57808: LD_INT 26
57810: PUSH
57811: LD_INT 30
57813: PUSH
57814: LD_INT 31
57816: PUSH
57817: LD_INT 32
57819: PUSH
57820: LD_INT 33
57822: PUSH
57823: LD_INT 34
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 101
57849: PUSH
57850: LD_INT 102
57852: PUSH
57853: LD_INT 103
57855: PUSH
57856: LD_INT 106
57858: PUSH
57859: LD_INT 108
57861: PUSH
57862: LD_INT 112
57864: PUSH
57865: LD_INT 113
57867: PUSH
57868: LD_INT 114
57870: PUSH
57871: LD_INT 116
57873: PUSH
57874: LD_INT 117
57876: PUSH
57877: LD_INT 118
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: ST_TO_ADDR
57897: GO 58528
57899: LD_INT 17
57901: DOUBLE
57902: EQUAL
57903: IFTRUE 57907
57905: GO 58131
57907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57908: LD_ADDR_VAR 0 2
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: LD_INT 4
57924: PUSH
57925: LD_INT 5
57927: PUSH
57928: LD_INT 6
57930: PUSH
57931: LD_INT 7
57933: PUSH
57934: LD_INT 8
57936: PUSH
57937: LD_INT 9
57939: PUSH
57940: LD_INT 10
57942: PUSH
57943: LD_INT 11
57945: PUSH
57946: LD_INT 12
57948: PUSH
57949: LD_INT 13
57951: PUSH
57952: LD_INT 14
57954: PUSH
57955: LD_INT 15
57957: PUSH
57958: LD_INT 16
57960: PUSH
57961: LD_INT 17
57963: PUSH
57964: LD_INT 18
57966: PUSH
57967: LD_INT 19
57969: PUSH
57970: LD_INT 20
57972: PUSH
57973: LD_INT 21
57975: PUSH
57976: LD_INT 22
57978: PUSH
57979: LD_INT 23
57981: PUSH
57982: LD_INT 24
57984: PUSH
57985: LD_INT 25
57987: PUSH
57988: LD_INT 26
57990: PUSH
57991: LD_INT 27
57993: PUSH
57994: LD_INT 28
57996: PUSH
57997: LD_INT 29
57999: PUSH
58000: LD_INT 30
58002: PUSH
58003: LD_INT 31
58005: PUSH
58006: LD_INT 32
58008: PUSH
58009: LD_INT 33
58011: PUSH
58012: LD_INT 34
58014: PUSH
58015: LD_INT 36
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 101
58057: PUSH
58058: LD_INT 102
58060: PUSH
58061: LD_INT 103
58063: PUSH
58064: LD_INT 104
58066: PUSH
58067: LD_INT 105
58069: PUSH
58070: LD_INT 106
58072: PUSH
58073: LD_INT 107
58075: PUSH
58076: LD_INT 108
58078: PUSH
58079: LD_INT 109
58081: PUSH
58082: LD_INT 110
58084: PUSH
58085: LD_INT 111
58087: PUSH
58088: LD_INT 112
58090: PUSH
58091: LD_INT 113
58093: PUSH
58094: LD_INT 114
58096: PUSH
58097: LD_INT 116
58099: PUSH
58100: LD_INT 117
58102: PUSH
58103: LD_INT 118
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: ST_TO_ADDR
58129: GO 58528
58131: LD_INT 18
58133: DOUBLE
58134: EQUAL
58135: IFTRUE 58139
58137: GO 58287
58139: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58140: LD_ADDR_VAR 0 2
58144: PUSH
58145: LD_INT 2
58147: PUSH
58148: LD_INT 4
58150: PUSH
58151: LD_INT 5
58153: PUSH
58154: LD_INT 7
58156: PUSH
58157: LD_INT 11
58159: PUSH
58160: LD_INT 12
58162: PUSH
58163: LD_INT 15
58165: PUSH
58166: LD_INT 16
58168: PUSH
58169: LD_INT 20
58171: PUSH
58172: LD_INT 21
58174: PUSH
58175: LD_INT 22
58177: PUSH
58178: LD_INT 23
58180: PUSH
58181: LD_INT 25
58183: PUSH
58184: LD_INT 26
58186: PUSH
58187: LD_INT 30
58189: PUSH
58190: LD_INT 31
58192: PUSH
58193: LD_INT 32
58195: PUSH
58196: LD_INT 33
58198: PUSH
58199: LD_INT 34
58201: PUSH
58202: LD_INT 35
58204: PUSH
58205: LD_INT 36
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 101
58233: PUSH
58234: LD_INT 102
58236: PUSH
58237: LD_INT 103
58239: PUSH
58240: LD_INT 106
58242: PUSH
58243: LD_INT 108
58245: PUSH
58246: LD_INT 112
58248: PUSH
58249: LD_INT 113
58251: PUSH
58252: LD_INT 114
58254: PUSH
58255: LD_INT 115
58257: PUSH
58258: LD_INT 116
58260: PUSH
58261: LD_INT 117
58263: PUSH
58264: LD_INT 118
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: ST_TO_ADDR
58285: GO 58528
58287: LD_INT 19
58289: DOUBLE
58290: EQUAL
58291: IFTRUE 58295
58293: GO 58527
58295: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58296: LD_ADDR_VAR 0 2
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 3
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: LD_INT 5
58315: PUSH
58316: LD_INT 6
58318: PUSH
58319: LD_INT 7
58321: PUSH
58322: LD_INT 8
58324: PUSH
58325: LD_INT 9
58327: PUSH
58328: LD_INT 10
58330: PUSH
58331: LD_INT 11
58333: PUSH
58334: LD_INT 12
58336: PUSH
58337: LD_INT 13
58339: PUSH
58340: LD_INT 14
58342: PUSH
58343: LD_INT 15
58345: PUSH
58346: LD_INT 16
58348: PUSH
58349: LD_INT 17
58351: PUSH
58352: LD_INT 18
58354: PUSH
58355: LD_INT 19
58357: PUSH
58358: LD_INT 20
58360: PUSH
58361: LD_INT 21
58363: PUSH
58364: LD_INT 22
58366: PUSH
58367: LD_INT 23
58369: PUSH
58370: LD_INT 24
58372: PUSH
58373: LD_INT 25
58375: PUSH
58376: LD_INT 26
58378: PUSH
58379: LD_INT 27
58381: PUSH
58382: LD_INT 28
58384: PUSH
58385: LD_INT 29
58387: PUSH
58388: LD_INT 30
58390: PUSH
58391: LD_INT 31
58393: PUSH
58394: LD_INT 32
58396: PUSH
58397: LD_INT 33
58399: PUSH
58400: LD_INT 34
58402: PUSH
58403: LD_INT 35
58405: PUSH
58406: LD_INT 36
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 101
58449: PUSH
58450: LD_INT 102
58452: PUSH
58453: LD_INT 103
58455: PUSH
58456: LD_INT 104
58458: PUSH
58459: LD_INT 105
58461: PUSH
58462: LD_INT 106
58464: PUSH
58465: LD_INT 107
58467: PUSH
58468: LD_INT 108
58470: PUSH
58471: LD_INT 109
58473: PUSH
58474: LD_INT 110
58476: PUSH
58477: LD_INT 111
58479: PUSH
58480: LD_INT 112
58482: PUSH
58483: LD_INT 113
58485: PUSH
58486: LD_INT 114
58488: PUSH
58489: LD_INT 115
58491: PUSH
58492: LD_INT 116
58494: PUSH
58495: LD_INT 117
58497: PUSH
58498: LD_INT 118
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: ST_TO_ADDR
58525: GO 58528
58527: POP
// end else
58528: GO 58759
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58530: LD_ADDR_VAR 0 2
58534: PUSH
58535: LD_INT 1
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: LD_INT 5
58549: PUSH
58550: LD_INT 6
58552: PUSH
58553: LD_INT 7
58555: PUSH
58556: LD_INT 8
58558: PUSH
58559: LD_INT 9
58561: PUSH
58562: LD_INT 10
58564: PUSH
58565: LD_INT 11
58567: PUSH
58568: LD_INT 12
58570: PUSH
58571: LD_INT 13
58573: PUSH
58574: LD_INT 14
58576: PUSH
58577: LD_INT 15
58579: PUSH
58580: LD_INT 16
58582: PUSH
58583: LD_INT 17
58585: PUSH
58586: LD_INT 18
58588: PUSH
58589: LD_INT 19
58591: PUSH
58592: LD_INT 20
58594: PUSH
58595: LD_INT 21
58597: PUSH
58598: LD_INT 22
58600: PUSH
58601: LD_INT 23
58603: PUSH
58604: LD_INT 24
58606: PUSH
58607: LD_INT 25
58609: PUSH
58610: LD_INT 26
58612: PUSH
58613: LD_INT 27
58615: PUSH
58616: LD_INT 28
58618: PUSH
58619: LD_INT 29
58621: PUSH
58622: LD_INT 30
58624: PUSH
58625: LD_INT 31
58627: PUSH
58628: LD_INT 32
58630: PUSH
58631: LD_INT 33
58633: PUSH
58634: LD_INT 34
58636: PUSH
58637: LD_INT 35
58639: PUSH
58640: LD_INT 36
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 101
58683: PUSH
58684: LD_INT 102
58686: PUSH
58687: LD_INT 103
58689: PUSH
58690: LD_INT 104
58692: PUSH
58693: LD_INT 105
58695: PUSH
58696: LD_INT 106
58698: PUSH
58699: LD_INT 107
58701: PUSH
58702: LD_INT 108
58704: PUSH
58705: LD_INT 109
58707: PUSH
58708: LD_INT 110
58710: PUSH
58711: LD_INT 111
58713: PUSH
58714: LD_INT 112
58716: PUSH
58717: LD_INT 113
58719: PUSH
58720: LD_INT 114
58722: PUSH
58723: LD_INT 115
58725: PUSH
58726: LD_INT 116
58728: PUSH
58729: LD_INT 117
58731: PUSH
58732: LD_INT 118
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// if result then
58759: LD_VAR 0 2
58763: IFFALSE 59549
// begin normal :=  ;
58765: LD_ADDR_VAR 0 5
58769: PUSH
58770: LD_STRING 
58772: ST_TO_ADDR
// hardcore :=  ;
58773: LD_ADDR_VAR 0 6
58777: PUSH
58778: LD_STRING 
58780: ST_TO_ADDR
// active :=  ;
58781: LD_ADDR_VAR 0 7
58785: PUSH
58786: LD_STRING 
58788: ST_TO_ADDR
// for i = 1 to normalCounter do
58789: LD_ADDR_VAR 0 8
58793: PUSH
58794: DOUBLE
58795: LD_INT 1
58797: DEC
58798: ST_TO_ADDR
58799: LD_EXP 44
58803: PUSH
58804: FOR_TO
58805: IFFALSE 58906
// begin tmp := 0 ;
58807: LD_ADDR_VAR 0 3
58811: PUSH
58812: LD_STRING 0
58814: ST_TO_ADDR
// if result [ 1 ] then
58815: LD_VAR 0 2
58819: PUSH
58820: LD_INT 1
58822: ARRAY
58823: IFFALSE 58888
// if result [ 1 ] [ 1 ] = i then
58825: LD_VAR 0 2
58829: PUSH
58830: LD_INT 1
58832: ARRAY
58833: PUSH
58834: LD_INT 1
58836: ARRAY
58837: PUSH
58838: LD_VAR 0 8
58842: EQUAL
58843: IFFALSE 58888
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58845: LD_ADDR_VAR 0 2
58849: PUSH
58850: LD_VAR 0 2
58854: PPUSH
58855: LD_INT 1
58857: PPUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PPUSH
58867: LD_INT 1
58869: PPUSH
58870: CALL_OW 3
58874: PPUSH
58875: CALL_OW 1
58879: ST_TO_ADDR
// tmp := 1 ;
58880: LD_ADDR_VAR 0 3
58884: PUSH
58885: LD_STRING 1
58887: ST_TO_ADDR
// end ; normal := normal & tmp ;
58888: LD_ADDR_VAR 0 5
58892: PUSH
58893: LD_VAR 0 5
58897: PUSH
58898: LD_VAR 0 3
58902: STR
58903: ST_TO_ADDR
// end ;
58904: GO 58804
58906: POP
58907: POP
// for i = 1 to hardcoreCounter do
58908: LD_ADDR_VAR 0 8
58912: PUSH
58913: DOUBLE
58914: LD_INT 1
58916: DEC
58917: ST_TO_ADDR
58918: LD_EXP 45
58922: PUSH
58923: FOR_TO
58924: IFFALSE 59029
// begin tmp := 0 ;
58926: LD_ADDR_VAR 0 3
58930: PUSH
58931: LD_STRING 0
58933: ST_TO_ADDR
// if result [ 2 ] then
58934: LD_VAR 0 2
58938: PUSH
58939: LD_INT 2
58941: ARRAY
58942: IFFALSE 59011
// if result [ 2 ] [ 1 ] = 100 + i then
58944: LD_VAR 0 2
58948: PUSH
58949: LD_INT 2
58951: ARRAY
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PUSH
58957: LD_INT 100
58959: PUSH
58960: LD_VAR 0 8
58964: PLUS
58965: EQUAL
58966: IFFALSE 59011
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58968: LD_ADDR_VAR 0 2
58972: PUSH
58973: LD_VAR 0 2
58977: PPUSH
58978: LD_INT 2
58980: PPUSH
58981: LD_VAR 0 2
58985: PUSH
58986: LD_INT 2
58988: ARRAY
58989: PPUSH
58990: LD_INT 1
58992: PPUSH
58993: CALL_OW 3
58997: PPUSH
58998: CALL_OW 1
59002: ST_TO_ADDR
// tmp := 1 ;
59003: LD_ADDR_VAR 0 3
59007: PUSH
59008: LD_STRING 1
59010: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59011: LD_ADDR_VAR 0 6
59015: PUSH
59016: LD_VAR 0 6
59020: PUSH
59021: LD_VAR 0 3
59025: STR
59026: ST_TO_ADDR
// end ;
59027: GO 58923
59029: POP
59030: POP
// if isGameLoad then
59031: LD_VAR 0 1
59035: IFFALSE 59510
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59037: LD_ADDR_VAR 0 4
59041: PUSH
59042: LD_EXP 48
59046: PUSH
59047: LD_EXP 47
59051: PUSH
59052: LD_EXP 49
59056: PUSH
59057: LD_EXP 46
59061: PUSH
59062: LD_EXP 50
59066: PUSH
59067: LD_EXP 51
59071: PUSH
59072: LD_EXP 52
59076: PUSH
59077: LD_EXP 53
59081: PUSH
59082: LD_EXP 54
59086: PUSH
59087: LD_EXP 55
59091: PUSH
59092: LD_EXP 56
59096: PUSH
59097: LD_EXP 57
59101: PUSH
59102: LD_EXP 58
59106: PUSH
59107: LD_EXP 59
59111: PUSH
59112: LD_EXP 67
59116: PUSH
59117: LD_EXP 68
59121: PUSH
59122: LD_EXP 69
59126: PUSH
59127: LD_EXP 70
59131: PUSH
59132: LD_EXP 72
59136: PUSH
59137: LD_EXP 73
59141: PUSH
59142: LD_EXP 74
59146: PUSH
59147: LD_EXP 77
59151: PUSH
59152: LD_EXP 79
59156: PUSH
59157: LD_EXP 80
59161: PUSH
59162: LD_EXP 81
59166: PUSH
59167: LD_EXP 83
59171: PUSH
59172: LD_EXP 84
59176: PUSH
59177: LD_EXP 87
59181: PUSH
59182: LD_EXP 88
59186: PUSH
59187: LD_EXP 89
59191: PUSH
59192: LD_EXP 90
59196: PUSH
59197: LD_EXP 91
59201: PUSH
59202: LD_EXP 92
59206: PUSH
59207: LD_EXP 93
59211: PUSH
59212: LD_EXP 94
59216: PUSH
59217: LD_EXP 95
59221: PUSH
59222: LD_EXP 60
59226: PUSH
59227: LD_EXP 61
59231: PUSH
59232: LD_EXP 64
59236: PUSH
59237: LD_EXP 65
59241: PUSH
59242: LD_EXP 66
59246: PUSH
59247: LD_EXP 62
59251: PUSH
59252: LD_EXP 63
59256: PUSH
59257: LD_EXP 71
59261: PUSH
59262: LD_EXP 75
59266: PUSH
59267: LD_EXP 76
59271: PUSH
59272: LD_EXP 78
59276: PUSH
59277: LD_EXP 82
59281: PUSH
59282: LD_EXP 85
59286: PUSH
59287: LD_EXP 86
59291: PUSH
59292: LD_EXP 96
59296: PUSH
59297: LD_EXP 97
59301: PUSH
59302: LD_EXP 98
59306: PUSH
59307: LD_EXP 99
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: ST_TO_ADDR
// tmp :=  ;
59368: LD_ADDR_VAR 0 3
59372: PUSH
59373: LD_STRING 
59375: ST_TO_ADDR
// for i = 1 to normalCounter do
59376: LD_ADDR_VAR 0 8
59380: PUSH
59381: DOUBLE
59382: LD_INT 1
59384: DEC
59385: ST_TO_ADDR
59386: LD_EXP 44
59390: PUSH
59391: FOR_TO
59392: IFFALSE 59428
// begin if flags [ i ] then
59394: LD_VAR 0 4
59398: PUSH
59399: LD_VAR 0 8
59403: ARRAY
59404: IFFALSE 59426
// tmp := tmp & i & ; ;
59406: LD_ADDR_VAR 0 3
59410: PUSH
59411: LD_VAR 0 3
59415: PUSH
59416: LD_VAR 0 8
59420: STR
59421: PUSH
59422: LD_STRING ;
59424: STR
59425: ST_TO_ADDR
// end ;
59426: GO 59391
59428: POP
59429: POP
// for i = 1 to hardcoreCounter do
59430: LD_ADDR_VAR 0 8
59434: PUSH
59435: DOUBLE
59436: LD_INT 1
59438: DEC
59439: ST_TO_ADDR
59440: LD_EXP 45
59444: PUSH
59445: FOR_TO
59446: IFFALSE 59492
// begin if flags [ normalCounter + i ] then
59448: LD_VAR 0 4
59452: PUSH
59453: LD_EXP 44
59457: PUSH
59458: LD_VAR 0 8
59462: PLUS
59463: ARRAY
59464: IFFALSE 59490
// tmp := tmp & ( 100 + i ) & ; ;
59466: LD_ADDR_VAR 0 3
59470: PUSH
59471: LD_VAR 0 3
59475: PUSH
59476: LD_INT 100
59478: PUSH
59479: LD_VAR 0 8
59483: PLUS
59484: STR
59485: PUSH
59486: LD_STRING ;
59488: STR
59489: ST_TO_ADDR
// end ;
59490: GO 59445
59492: POP
59493: POP
// if tmp then
59494: LD_VAR 0 3
59498: IFFALSE 59510
// active := tmp ;
59500: LD_ADDR_VAR 0 7
59504: PUSH
59505: LD_VAR 0 3
59509: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59510: LD_STRING getStreamItemsFromMission("
59512: PUSH
59513: LD_VAR 0 5
59517: STR
59518: PUSH
59519: LD_STRING ","
59521: STR
59522: PUSH
59523: LD_VAR 0 6
59527: STR
59528: PUSH
59529: LD_STRING ","
59531: STR
59532: PUSH
59533: LD_VAR 0 7
59537: STR
59538: PUSH
59539: LD_STRING ")
59541: STR
59542: PPUSH
59543: CALL_OW 559
// end else
59547: GO 59556
// ToLua ( getStreamItemsFromMission("","","") ) ;
59549: LD_STRING getStreamItemsFromMission("","","")
59551: PPUSH
59552: CALL_OW 559
// end ;
59556: LD_VAR 0 2
59560: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59561: LD_EXP 43
59565: PUSH
59566: LD_EXP 48
59570: AND
59571: IFFALSE 59695
59573: GO 59575
59575: DISABLE
59576: LD_INT 0
59578: PPUSH
59579: PPUSH
// begin enable ;
59580: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59581: LD_ADDR_VAR 0 2
59585: PUSH
59586: LD_INT 22
59588: PUSH
59589: LD_OWVAR 2
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 2
59600: PUSH
59601: LD_INT 34
59603: PUSH
59604: LD_INT 7
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 34
59613: PUSH
59614: LD_INT 45
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 34
59623: PUSH
59624: LD_INT 28
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 34
59633: PUSH
59634: LD_INT 47
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PPUSH
59652: CALL_OW 69
59656: ST_TO_ADDR
// if not tmp then
59657: LD_VAR 0 2
59661: NOT
59662: IFFALSE 59666
// exit ;
59664: GO 59695
// for i in tmp do
59666: LD_ADDR_VAR 0 1
59670: PUSH
59671: LD_VAR 0 2
59675: PUSH
59676: FOR_IN
59677: IFFALSE 59693
// begin SetLives ( i , 0 ) ;
59679: LD_VAR 0 1
59683: PPUSH
59684: LD_INT 0
59686: PPUSH
59687: CALL_OW 234
// end ;
59691: GO 59676
59693: POP
59694: POP
// end ;
59695: PPOPN 2
59697: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59698: LD_EXP 43
59702: PUSH
59703: LD_EXP 49
59707: AND
59708: IFFALSE 59792
59710: GO 59712
59712: DISABLE
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
// begin enable ;
59717: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59718: LD_ADDR_VAR 0 2
59722: PUSH
59723: LD_INT 22
59725: PUSH
59726: LD_OWVAR 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 32
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PPUSH
59749: CALL_OW 69
59753: ST_TO_ADDR
// if not tmp then
59754: LD_VAR 0 2
59758: NOT
59759: IFFALSE 59763
// exit ;
59761: GO 59792
// for i in tmp do
59763: LD_ADDR_VAR 0 1
59767: PUSH
59768: LD_VAR 0 2
59772: PUSH
59773: FOR_IN
59774: IFFALSE 59790
// begin SetLives ( i , 0 ) ;
59776: LD_VAR 0 1
59780: PPUSH
59781: LD_INT 0
59783: PPUSH
59784: CALL_OW 234
// end ;
59788: GO 59773
59790: POP
59791: POP
// end ;
59792: PPOPN 2
59794: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59795: LD_EXP 43
59799: PUSH
59800: LD_EXP 46
59804: AND
59805: IFFALSE 59898
59807: GO 59809
59809: DISABLE
59810: LD_INT 0
59812: PPUSH
// begin enable ;
59813: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59814: LD_ADDR_VAR 0 1
59818: PUSH
59819: LD_INT 22
59821: PUSH
59822: LD_OWVAR 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: LD_INT 25
59836: PUSH
59837: LD_INT 5
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 25
59846: PUSH
59847: LD_INT 9
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 25
59856: PUSH
59857: LD_INT 8
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PPUSH
59874: CALL_OW 69
59878: PUSH
59879: FOR_IN
59880: IFFALSE 59896
// begin SetClass ( i , 1 ) ;
59882: LD_VAR 0 1
59886: PPUSH
59887: LD_INT 1
59889: PPUSH
59890: CALL_OW 336
// end ;
59894: GO 59879
59896: POP
59897: POP
// end ;
59898: PPOPN 1
59900: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59901: LD_EXP 43
59905: PUSH
59906: LD_EXP 47
59910: AND
59911: PUSH
59912: LD_OWVAR 65
59916: PUSH
59917: LD_INT 7
59919: LESS
59920: AND
59921: IFFALSE 59935
59923: GO 59925
59925: DISABLE
// begin enable ;
59926: ENABLE
// game_speed := 7 ;
59927: LD_ADDR_OWVAR 65
59931: PUSH
59932: LD_INT 7
59934: ST_TO_ADDR
// end ;
59935: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59936: LD_EXP 43
59940: PUSH
59941: LD_EXP 50
59945: AND
59946: IFFALSE 60148
59948: GO 59950
59950: DISABLE
59951: LD_INT 0
59953: PPUSH
59954: PPUSH
59955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59956: LD_ADDR_VAR 0 3
59960: PUSH
59961: LD_INT 81
59963: PUSH
59964: LD_OWVAR 2
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 21
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PPUSH
59987: CALL_OW 69
59991: ST_TO_ADDR
// if not tmp then
59992: LD_VAR 0 3
59996: NOT
59997: IFFALSE 60001
// exit ;
59999: GO 60148
// if tmp > 5 then
60001: LD_VAR 0 3
60005: PUSH
60006: LD_INT 5
60008: GREATER
60009: IFFALSE 60021
// k := 5 else
60011: LD_ADDR_VAR 0 2
60015: PUSH
60016: LD_INT 5
60018: ST_TO_ADDR
60019: GO 60031
// k := tmp ;
60021: LD_ADDR_VAR 0 2
60025: PUSH
60026: LD_VAR 0 3
60030: ST_TO_ADDR
// for i := 1 to k do
60031: LD_ADDR_VAR 0 1
60035: PUSH
60036: DOUBLE
60037: LD_INT 1
60039: DEC
60040: ST_TO_ADDR
60041: LD_VAR 0 2
60045: PUSH
60046: FOR_TO
60047: IFFALSE 60146
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60049: LD_VAR 0 3
60053: PUSH
60054: LD_VAR 0 1
60058: ARRAY
60059: PPUSH
60060: LD_VAR 0 1
60064: PUSH
60065: LD_INT 4
60067: MOD
60068: PUSH
60069: LD_INT 1
60071: PLUS
60072: PPUSH
60073: CALL_OW 259
60077: PUSH
60078: LD_INT 10
60080: LESS
60081: IFFALSE 60144
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60083: LD_VAR 0 3
60087: PUSH
60088: LD_VAR 0 1
60092: ARRAY
60093: PPUSH
60094: LD_VAR 0 1
60098: PUSH
60099: LD_INT 4
60101: MOD
60102: PUSH
60103: LD_INT 1
60105: PLUS
60106: PPUSH
60107: LD_VAR 0 3
60111: PUSH
60112: LD_VAR 0 1
60116: ARRAY
60117: PPUSH
60118: LD_VAR 0 1
60122: PUSH
60123: LD_INT 4
60125: MOD
60126: PUSH
60127: LD_INT 1
60129: PLUS
60130: PPUSH
60131: CALL_OW 259
60135: PUSH
60136: LD_INT 1
60138: PLUS
60139: PPUSH
60140: CALL_OW 237
60144: GO 60046
60146: POP
60147: POP
// end ;
60148: PPOPN 3
60150: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60151: LD_EXP 43
60155: PUSH
60156: LD_EXP 51
60160: AND
60161: IFFALSE 60181
60163: GO 60165
60165: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60166: LD_INT 4
60168: PPUSH
60169: LD_OWVAR 2
60173: PPUSH
60174: LD_INT 0
60176: PPUSH
60177: CALL_OW 324
60181: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60182: LD_EXP 43
60186: PUSH
60187: LD_EXP 80
60191: AND
60192: IFFALSE 60212
60194: GO 60196
60196: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60197: LD_INT 19
60199: PPUSH
60200: LD_OWVAR 2
60204: PPUSH
60205: LD_INT 0
60207: PPUSH
60208: CALL_OW 324
60212: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60213: LD_EXP 43
60217: PUSH
60218: LD_EXP 52
60222: AND
60223: IFFALSE 60325
60225: GO 60227
60227: DISABLE
60228: LD_INT 0
60230: PPUSH
60231: PPUSH
// begin enable ;
60232: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60233: LD_ADDR_VAR 0 2
60237: PUSH
60238: LD_INT 22
60240: PUSH
60241: LD_OWVAR 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: LD_INT 34
60255: PUSH
60256: LD_INT 11
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 34
60265: PUSH
60266: LD_INT 30
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PPUSH
60282: CALL_OW 69
60286: ST_TO_ADDR
// if not tmp then
60287: LD_VAR 0 2
60291: NOT
60292: IFFALSE 60296
// exit ;
60294: GO 60325
// for i in tmp do
60296: LD_ADDR_VAR 0 1
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: FOR_IN
60307: IFFALSE 60323
// begin SetLives ( i , 0 ) ;
60309: LD_VAR 0 1
60313: PPUSH
60314: LD_INT 0
60316: PPUSH
60317: CALL_OW 234
// end ;
60321: GO 60306
60323: POP
60324: POP
// end ;
60325: PPOPN 2
60327: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60328: LD_EXP 43
60332: PUSH
60333: LD_EXP 53
60337: AND
60338: IFFALSE 60358
60340: GO 60342
60342: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60343: LD_INT 32
60345: PPUSH
60346: LD_OWVAR 2
60350: PPUSH
60351: LD_INT 0
60353: PPUSH
60354: CALL_OW 324
60358: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60359: LD_EXP 43
60363: PUSH
60364: LD_EXP 54
60368: AND
60369: IFFALSE 60550
60371: GO 60373
60373: DISABLE
60374: LD_INT 0
60376: PPUSH
60377: PPUSH
60378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60379: LD_ADDR_VAR 0 2
60383: PUSH
60384: LD_INT 22
60386: PUSH
60387: LD_OWVAR 2
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 33
60398: PUSH
60399: LD_INT 3
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PPUSH
60410: CALL_OW 69
60414: ST_TO_ADDR
// if not tmp then
60415: LD_VAR 0 2
60419: NOT
60420: IFFALSE 60424
// exit ;
60422: GO 60550
// side := 0 ;
60424: LD_ADDR_VAR 0 3
60428: PUSH
60429: LD_INT 0
60431: ST_TO_ADDR
// for i := 1 to 8 do
60432: LD_ADDR_VAR 0 1
60436: PUSH
60437: DOUBLE
60438: LD_INT 1
60440: DEC
60441: ST_TO_ADDR
60442: LD_INT 8
60444: PUSH
60445: FOR_TO
60446: IFFALSE 60494
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60448: LD_OWVAR 2
60452: PUSH
60453: LD_VAR 0 1
60457: NONEQUAL
60458: PUSH
60459: LD_OWVAR 2
60463: PPUSH
60464: LD_VAR 0 1
60468: PPUSH
60469: CALL_OW 81
60473: PUSH
60474: LD_INT 2
60476: EQUAL
60477: AND
60478: IFFALSE 60492
// begin side := i ;
60480: LD_ADDR_VAR 0 3
60484: PUSH
60485: LD_VAR 0 1
60489: ST_TO_ADDR
// break ;
60490: GO 60494
// end ;
60492: GO 60445
60494: POP
60495: POP
// if not side then
60496: LD_VAR 0 3
60500: NOT
60501: IFFALSE 60505
// exit ;
60503: GO 60550
// for i := 1 to tmp do
60505: LD_ADDR_VAR 0 1
60509: PUSH
60510: DOUBLE
60511: LD_INT 1
60513: DEC
60514: ST_TO_ADDR
60515: LD_VAR 0 2
60519: PUSH
60520: FOR_TO
60521: IFFALSE 60548
// if Prob ( 60 ) then
60523: LD_INT 60
60525: PPUSH
60526: CALL_OW 13
60530: IFFALSE 60546
// SetSide ( i , side ) ;
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 3
60541: PPUSH
60542: CALL_OW 235
60546: GO 60520
60548: POP
60549: POP
// end ;
60550: PPOPN 3
60552: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60553: LD_EXP 43
60557: PUSH
60558: LD_EXP 56
60562: AND
60563: IFFALSE 60682
60565: GO 60567
60567: DISABLE
60568: LD_INT 0
60570: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60571: LD_ADDR_VAR 0 1
60575: PUSH
60576: LD_INT 22
60578: PUSH
60579: LD_OWVAR 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 21
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: LD_INT 23
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: LIST
60619: PPUSH
60620: CALL_OW 69
60624: PUSH
60625: FOR_IN
60626: IFFALSE 60680
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60628: LD_VAR 0 1
60632: PPUSH
60633: CALL_OW 257
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 3
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: IN
60656: IFFALSE 60678
// SetClass ( un , rand ( 1 , 4 ) ) ;
60658: LD_VAR 0 1
60662: PPUSH
60663: LD_INT 1
60665: PPUSH
60666: LD_INT 4
60668: PPUSH
60669: CALL_OW 12
60673: PPUSH
60674: CALL_OW 336
60678: GO 60625
60680: POP
60681: POP
// end ;
60682: PPOPN 1
60684: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60685: LD_EXP 43
60689: PUSH
60690: LD_EXP 55
60694: AND
60695: IFFALSE 60774
60697: GO 60699
60699: DISABLE
60700: LD_INT 0
60702: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60703: LD_ADDR_VAR 0 1
60707: PUSH
60708: LD_INT 22
60710: PUSH
60711: LD_OWVAR 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 21
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PPUSH
60734: CALL_OW 69
60738: ST_TO_ADDR
// if not tmp then
60739: LD_VAR 0 1
60743: NOT
60744: IFFALSE 60748
// exit ;
60746: GO 60774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60748: LD_VAR 0 1
60752: PUSH
60753: LD_INT 1
60755: PPUSH
60756: LD_VAR 0 1
60760: PPUSH
60761: CALL_OW 12
60765: ARRAY
60766: PPUSH
60767: LD_INT 100
60769: PPUSH
60770: CALL_OW 234
// end ;
60774: PPOPN 1
60776: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60777: LD_EXP 43
60781: PUSH
60782: LD_EXP 57
60786: AND
60787: IFFALSE 60885
60789: GO 60791
60791: DISABLE
60792: LD_INT 0
60794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60795: LD_ADDR_VAR 0 1
60799: PUSH
60800: LD_INT 22
60802: PUSH
60803: LD_OWVAR 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 21
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PPUSH
60826: CALL_OW 69
60830: ST_TO_ADDR
// if not tmp then
60831: LD_VAR 0 1
60835: NOT
60836: IFFALSE 60840
// exit ;
60838: GO 60885
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60840: LD_VAR 0 1
60844: PUSH
60845: LD_INT 1
60847: PPUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: CALL_OW 12
60857: ARRAY
60858: PPUSH
60859: LD_INT 1
60861: PPUSH
60862: LD_INT 4
60864: PPUSH
60865: CALL_OW 12
60869: PPUSH
60870: LD_INT 3000
60872: PPUSH
60873: LD_INT 9000
60875: PPUSH
60876: CALL_OW 12
60880: PPUSH
60881: CALL_OW 492
// end ;
60885: PPOPN 1
60887: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60888: LD_EXP 43
60892: PUSH
60893: LD_EXP 58
60897: AND
60898: IFFALSE 60918
60900: GO 60902
60902: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60903: LD_INT 1
60905: PPUSH
60906: LD_OWVAR 2
60910: PPUSH
60911: LD_INT 0
60913: PPUSH
60914: CALL_OW 324
60918: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60919: LD_EXP 43
60923: PUSH
60924: LD_EXP 59
60928: AND
60929: IFFALSE 61012
60931: GO 60933
60933: DISABLE
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60938: LD_ADDR_VAR 0 2
60942: PUSH
60943: LD_INT 22
60945: PUSH
60946: LD_OWVAR 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 21
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PPUSH
60969: CALL_OW 69
60973: ST_TO_ADDR
// if not tmp then
60974: LD_VAR 0 2
60978: NOT
60979: IFFALSE 60983
// exit ;
60981: GO 61012
// for i in tmp do
60983: LD_ADDR_VAR 0 1
60987: PUSH
60988: LD_VAR 0 2
60992: PUSH
60993: FOR_IN
60994: IFFALSE 61010
// SetBLevel ( i , 10 ) ;
60996: LD_VAR 0 1
61000: PPUSH
61001: LD_INT 10
61003: PPUSH
61004: CALL_OW 241
61008: GO 60993
61010: POP
61011: POP
// end ;
61012: PPOPN 2
61014: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61015: LD_EXP 43
61019: PUSH
61020: LD_EXP 60
61024: AND
61025: IFFALSE 61136
61027: GO 61029
61029: DISABLE
61030: LD_INT 0
61032: PPUSH
61033: PPUSH
61034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61035: LD_ADDR_VAR 0 3
61039: PUSH
61040: LD_INT 22
61042: PUSH
61043: LD_OWVAR 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 25
61054: PUSH
61055: LD_INT 1
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PPUSH
61066: CALL_OW 69
61070: ST_TO_ADDR
// if not tmp then
61071: LD_VAR 0 3
61075: NOT
61076: IFFALSE 61080
// exit ;
61078: GO 61136
// un := tmp [ rand ( 1 , tmp ) ] ;
61080: LD_ADDR_VAR 0 2
61084: PUSH
61085: LD_VAR 0 3
61089: PUSH
61090: LD_INT 1
61092: PPUSH
61093: LD_VAR 0 3
61097: PPUSH
61098: CALL_OW 12
61102: ARRAY
61103: ST_TO_ADDR
// if Crawls ( un ) then
61104: LD_VAR 0 2
61108: PPUSH
61109: CALL_OW 318
61113: IFFALSE 61124
// ComWalk ( un ) ;
61115: LD_VAR 0 2
61119: PPUSH
61120: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61124: LD_VAR 0 2
61128: PPUSH
61129: LD_INT 5
61131: PPUSH
61132: CALL_OW 336
// end ;
61136: PPOPN 3
61138: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61139: LD_EXP 43
61143: PUSH
61144: LD_EXP 61
61148: AND
61149: PUSH
61150: LD_OWVAR 67
61154: PUSH
61155: LD_INT 4
61157: LESS
61158: AND
61159: IFFALSE 61178
61161: GO 61163
61163: DISABLE
// begin Difficulty := Difficulty + 1 ;
61164: LD_ADDR_OWVAR 67
61168: PUSH
61169: LD_OWVAR 67
61173: PUSH
61174: LD_INT 1
61176: PLUS
61177: ST_TO_ADDR
// end ;
61178: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61179: LD_EXP 43
61183: PUSH
61184: LD_EXP 62
61188: AND
61189: IFFALSE 61292
61191: GO 61193
61193: DISABLE
61194: LD_INT 0
61196: PPUSH
// begin for i := 1 to 5 do
61197: LD_ADDR_VAR 0 1
61201: PUSH
61202: DOUBLE
61203: LD_INT 1
61205: DEC
61206: ST_TO_ADDR
61207: LD_INT 5
61209: PUSH
61210: FOR_TO
61211: IFFALSE 61290
// begin uc_nation := nation_nature ;
61213: LD_ADDR_OWVAR 21
61217: PUSH
61218: LD_INT 0
61220: ST_TO_ADDR
// uc_side := 0 ;
61221: LD_ADDR_OWVAR 20
61225: PUSH
61226: LD_INT 0
61228: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61229: LD_ADDR_OWVAR 29
61233: PUSH
61234: LD_INT 12
61236: PUSH
61237: LD_INT 12
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// hc_agressivity := 20 ;
61244: LD_ADDR_OWVAR 35
61248: PUSH
61249: LD_INT 20
61251: ST_TO_ADDR
// hc_class := class_tiger ;
61252: LD_ADDR_OWVAR 28
61256: PUSH
61257: LD_INT 14
61259: ST_TO_ADDR
// hc_gallery :=  ;
61260: LD_ADDR_OWVAR 33
61264: PUSH
61265: LD_STRING 
61267: ST_TO_ADDR
// hc_name :=  ;
61268: LD_ADDR_OWVAR 26
61272: PUSH
61273: LD_STRING 
61275: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61276: CALL_OW 44
61280: PPUSH
61281: LD_INT 0
61283: PPUSH
61284: CALL_OW 51
// end ;
61288: GO 61210
61290: POP
61291: POP
// end ;
61292: PPOPN 1
61294: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61295: LD_EXP 43
61299: PUSH
61300: LD_EXP 63
61304: AND
61305: IFFALSE 61314
61307: GO 61309
61309: DISABLE
// StreamSibBomb ;
61310: CALL 61315 0 0
61314: END
// export function StreamSibBomb ; var i , x , y ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
61319: PPUSH
61320: PPUSH
// result := false ;
61321: LD_ADDR_VAR 0 1
61325: PUSH
61326: LD_INT 0
61328: ST_TO_ADDR
// for i := 1 to 16 do
61329: LD_ADDR_VAR 0 2
61333: PUSH
61334: DOUBLE
61335: LD_INT 1
61337: DEC
61338: ST_TO_ADDR
61339: LD_INT 16
61341: PUSH
61342: FOR_TO
61343: IFFALSE 61542
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61345: LD_ADDR_VAR 0 3
61349: PUSH
61350: LD_INT 10
61352: PUSH
61353: LD_INT 20
61355: PUSH
61356: LD_INT 30
61358: PUSH
61359: LD_INT 40
61361: PUSH
61362: LD_INT 50
61364: PUSH
61365: LD_INT 60
61367: PUSH
61368: LD_INT 70
61370: PUSH
61371: LD_INT 80
61373: PUSH
61374: LD_INT 90
61376: PUSH
61377: LD_INT 100
61379: PUSH
61380: LD_INT 110
61382: PUSH
61383: LD_INT 120
61385: PUSH
61386: LD_INT 130
61388: PUSH
61389: LD_INT 140
61391: PUSH
61392: LD_INT 150
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PPUSH
61415: LD_INT 15
61417: PPUSH
61418: CALL_OW 12
61422: ARRAY
61423: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61424: LD_ADDR_VAR 0 4
61428: PUSH
61429: LD_INT 10
61431: PUSH
61432: LD_INT 20
61434: PUSH
61435: LD_INT 30
61437: PUSH
61438: LD_INT 40
61440: PUSH
61441: LD_INT 50
61443: PUSH
61444: LD_INT 60
61446: PUSH
61447: LD_INT 70
61449: PUSH
61450: LD_INT 80
61452: PUSH
61453: LD_INT 90
61455: PUSH
61456: LD_INT 100
61458: PUSH
61459: LD_INT 110
61461: PUSH
61462: LD_INT 120
61464: PUSH
61465: LD_INT 130
61467: PUSH
61468: LD_INT 140
61470: PUSH
61471: LD_INT 150
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PPUSH
61494: LD_INT 15
61496: PPUSH
61497: CALL_OW 12
61501: ARRAY
61502: ST_TO_ADDR
// if ValidHex ( x , y ) then
61503: LD_VAR 0 3
61507: PPUSH
61508: LD_VAR 0 4
61512: PPUSH
61513: CALL_OW 488
61517: IFFALSE 61540
// begin result := [ x , y ] ;
61519: LD_ADDR_VAR 0 1
61523: PUSH
61524: LD_VAR 0 3
61528: PUSH
61529: LD_VAR 0 4
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: ST_TO_ADDR
// break ;
61538: GO 61542
// end ; end ;
61540: GO 61342
61542: POP
61543: POP
// if result then
61544: LD_VAR 0 1
61548: IFFALSE 61608
// begin ToLua ( playSibBomb() ) ;
61550: LD_STRING playSibBomb()
61552: PPUSH
61553: CALL_OW 559
// wait ( 0 0$14 ) ;
61557: LD_INT 490
61559: PPUSH
61560: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61564: LD_VAR 0 1
61568: PUSH
61569: LD_INT 1
61571: ARRAY
61572: PPUSH
61573: LD_VAR 0 1
61577: PUSH
61578: LD_INT 2
61580: ARRAY
61581: PPUSH
61582: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61586: LD_VAR 0 1
61590: PUSH
61591: LD_INT 1
61593: ARRAY
61594: PPUSH
61595: LD_VAR 0 1
61599: PUSH
61600: LD_INT 2
61602: ARRAY
61603: PPUSH
61604: CALL_OW 429
// end ; end ;
61608: LD_VAR 0 1
61612: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61613: LD_EXP 43
61617: PUSH
61618: LD_EXP 65
61622: AND
61623: IFFALSE 61635
61625: GO 61627
61627: DISABLE
// YouLost (  ) ;
61628: LD_STRING 
61630: PPUSH
61631: CALL_OW 104
61635: END
// every 0 0$1 trigger StreamModeActive and sFog do
61636: LD_EXP 43
61640: PUSH
61641: LD_EXP 64
61645: AND
61646: IFFALSE 61660
61648: GO 61650
61650: DISABLE
// FogOff ( your_side ) ;
61651: LD_OWVAR 2
61655: PPUSH
61656: CALL_OW 344
61660: END
// every 0 0$1 trigger StreamModeActive and sSun do
61661: LD_EXP 43
61665: PUSH
61666: LD_EXP 66
61670: AND
61671: IFFALSE 61699
61673: GO 61675
61675: DISABLE
// begin solar_recharge_percent := 0 ;
61676: LD_ADDR_OWVAR 79
61680: PUSH
61681: LD_INT 0
61683: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61684: LD_INT 10500
61686: PPUSH
61687: CALL_OW 67
// solar_recharge_percent := 100 ;
61691: LD_ADDR_OWVAR 79
61695: PUSH
61696: LD_INT 100
61698: ST_TO_ADDR
// end ;
61699: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61700: LD_EXP 43
61704: PUSH
61705: LD_EXP 67
61709: AND
61710: IFFALSE 61949
61712: GO 61714
61714: DISABLE
61715: LD_INT 0
61717: PPUSH
61718: PPUSH
61719: PPUSH
// begin tmp := [ ] ;
61720: LD_ADDR_VAR 0 3
61724: PUSH
61725: EMPTY
61726: ST_TO_ADDR
// for i := 1 to 6 do
61727: LD_ADDR_VAR 0 1
61731: PUSH
61732: DOUBLE
61733: LD_INT 1
61735: DEC
61736: ST_TO_ADDR
61737: LD_INT 6
61739: PUSH
61740: FOR_TO
61741: IFFALSE 61846
// begin uc_nation := nation_nature ;
61743: LD_ADDR_OWVAR 21
61747: PUSH
61748: LD_INT 0
61750: ST_TO_ADDR
// uc_side := 0 ;
61751: LD_ADDR_OWVAR 20
61755: PUSH
61756: LD_INT 0
61758: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61759: LD_ADDR_OWVAR 29
61763: PUSH
61764: LD_INT 12
61766: PUSH
61767: LD_INT 12
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// hc_agressivity := 20 ;
61774: LD_ADDR_OWVAR 35
61778: PUSH
61779: LD_INT 20
61781: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61782: LD_ADDR_OWVAR 28
61786: PUSH
61787: LD_INT 17
61789: ST_TO_ADDR
// hc_gallery :=  ;
61790: LD_ADDR_OWVAR 33
61794: PUSH
61795: LD_STRING 
61797: ST_TO_ADDR
// hc_name :=  ;
61798: LD_ADDR_OWVAR 26
61802: PUSH
61803: LD_STRING 
61805: ST_TO_ADDR
// un := CreateHuman ;
61806: LD_ADDR_VAR 0 2
61810: PUSH
61811: CALL_OW 44
61815: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61816: LD_VAR 0 2
61820: PPUSH
61821: LD_INT 1
61823: PPUSH
61824: CALL_OW 51
// tmp := tmp ^ un ;
61828: LD_ADDR_VAR 0 3
61832: PUSH
61833: LD_VAR 0 3
61837: PUSH
61838: LD_VAR 0 2
61842: ADD
61843: ST_TO_ADDR
// end ;
61844: GO 61740
61846: POP
61847: POP
// repeat wait ( 0 0$1 ) ;
61848: LD_INT 35
61850: PPUSH
61851: CALL_OW 67
// for un in tmp do
61855: LD_ADDR_VAR 0 2
61859: PUSH
61860: LD_VAR 0 3
61864: PUSH
61865: FOR_IN
61866: IFFALSE 61940
// begin if IsDead ( un ) then
61868: LD_VAR 0 2
61872: PPUSH
61873: CALL_OW 301
61877: IFFALSE 61897
// begin tmp := tmp diff un ;
61879: LD_ADDR_VAR 0 3
61883: PUSH
61884: LD_VAR 0 3
61888: PUSH
61889: LD_VAR 0 2
61893: DIFF
61894: ST_TO_ADDR
// continue ;
61895: GO 61865
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61897: LD_VAR 0 2
61901: PPUSH
61902: LD_INT 3
61904: PUSH
61905: LD_INT 22
61907: PUSH
61908: LD_INT 0
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PPUSH
61919: CALL_OW 69
61923: PPUSH
61924: LD_VAR 0 2
61928: PPUSH
61929: CALL_OW 74
61933: PPUSH
61934: CALL_OW 115
// end ;
61938: GO 61865
61940: POP
61941: POP
// until not tmp ;
61942: LD_VAR 0 3
61946: NOT
61947: IFFALSE 61848
// end ;
61949: PPOPN 3
61951: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61952: LD_EXP 43
61956: PUSH
61957: LD_EXP 68
61961: AND
61962: IFFALSE 62016
61964: GO 61966
61966: DISABLE
// begin ToLua ( displayTroll(); ) ;
61967: LD_STRING displayTroll();
61969: PPUSH
61970: CALL_OW 559
// wait ( 3 3$00 ) ;
61974: LD_INT 6300
61976: PPUSH
61977: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61981: LD_STRING hideTroll();
61983: PPUSH
61984: CALL_OW 559
// wait ( 1 1$00 ) ;
61988: LD_INT 2100
61990: PPUSH
61991: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61995: LD_STRING displayTroll();
61997: PPUSH
61998: CALL_OW 559
// wait ( 1 1$00 ) ;
62002: LD_INT 2100
62004: PPUSH
62005: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62009: LD_STRING hideTroll();
62011: PPUSH
62012: CALL_OW 559
// end ;
62016: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62017: LD_EXP 43
62021: PUSH
62022: LD_EXP 69
62026: AND
62027: IFFALSE 62090
62029: GO 62031
62031: DISABLE
62032: LD_INT 0
62034: PPUSH
// begin p := 0 ;
62035: LD_ADDR_VAR 0 1
62039: PUSH
62040: LD_INT 0
62042: ST_TO_ADDR
// repeat game_speed := 1 ;
62043: LD_ADDR_OWVAR 65
62047: PUSH
62048: LD_INT 1
62050: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62051: LD_INT 35
62053: PPUSH
62054: CALL_OW 67
// p := p + 1 ;
62058: LD_ADDR_VAR 0 1
62062: PUSH
62063: LD_VAR 0 1
62067: PUSH
62068: LD_INT 1
62070: PLUS
62071: ST_TO_ADDR
// until p >= 60 ;
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 60
62079: GREATEREQUAL
62080: IFFALSE 62043
// game_speed := 4 ;
62082: LD_ADDR_OWVAR 65
62086: PUSH
62087: LD_INT 4
62089: ST_TO_ADDR
// end ;
62090: PPOPN 1
62092: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62093: LD_EXP 43
62097: PUSH
62098: LD_EXP 70
62102: AND
62103: IFFALSE 62249
62105: GO 62107
62107: DISABLE
62108: LD_INT 0
62110: PPUSH
62111: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62112: LD_ADDR_VAR 0 1
62116: PUSH
62117: LD_INT 22
62119: PUSH
62120: LD_OWVAR 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 2
62131: PUSH
62132: LD_INT 30
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 30
62144: PUSH
62145: LD_INT 1
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: LIST
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PPUSH
62161: CALL_OW 69
62165: ST_TO_ADDR
// if not depot then
62166: LD_VAR 0 1
62170: NOT
62171: IFFALSE 62175
// exit ;
62173: GO 62249
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62175: LD_ADDR_VAR 0 2
62179: PUSH
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 1
62187: PPUSH
62188: LD_VAR 0 1
62192: PPUSH
62193: CALL_OW 12
62197: ARRAY
62198: PPUSH
62199: CALL_OW 274
62203: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62204: LD_VAR 0 2
62208: PPUSH
62209: LD_INT 1
62211: PPUSH
62212: LD_INT 0
62214: PPUSH
62215: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62219: LD_VAR 0 2
62223: PPUSH
62224: LD_INT 2
62226: PPUSH
62227: LD_INT 0
62229: PPUSH
62230: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62234: LD_VAR 0 2
62238: PPUSH
62239: LD_INT 3
62241: PPUSH
62242: LD_INT 0
62244: PPUSH
62245: CALL_OW 277
// end ;
62249: PPOPN 2
62251: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62252: LD_EXP 43
62256: PUSH
62257: LD_EXP 71
62261: AND
62262: IFFALSE 62359
62264: GO 62266
62266: DISABLE
62267: LD_INT 0
62269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62270: LD_ADDR_VAR 0 1
62274: PUSH
62275: LD_INT 22
62277: PUSH
62278: LD_OWVAR 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 21
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 3
62299: PUSH
62300: LD_INT 23
62302: PUSH
62303: LD_INT 0
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: PPUSH
62319: CALL_OW 69
62323: ST_TO_ADDR
// if not tmp then
62324: LD_VAR 0 1
62328: NOT
62329: IFFALSE 62333
// exit ;
62331: GO 62359
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62333: LD_VAR 0 1
62337: PUSH
62338: LD_INT 1
62340: PPUSH
62341: LD_VAR 0 1
62345: PPUSH
62346: CALL_OW 12
62350: ARRAY
62351: PPUSH
62352: LD_INT 200
62354: PPUSH
62355: CALL_OW 234
// end ;
62359: PPOPN 1
62361: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62362: LD_EXP 43
62366: PUSH
62367: LD_EXP 72
62371: AND
62372: IFFALSE 62451
62374: GO 62376
62376: DISABLE
62377: LD_INT 0
62379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62380: LD_ADDR_VAR 0 1
62384: PUSH
62385: LD_INT 22
62387: PUSH
62388: LD_OWVAR 2
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 21
62399: PUSH
62400: LD_INT 2
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PPUSH
62411: CALL_OW 69
62415: ST_TO_ADDR
// if not tmp then
62416: LD_VAR 0 1
62420: NOT
62421: IFFALSE 62425
// exit ;
62423: GO 62451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62425: LD_VAR 0 1
62429: PUSH
62430: LD_INT 1
62432: PPUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: CALL_OW 12
62442: ARRAY
62443: PPUSH
62444: LD_INT 60
62446: PPUSH
62447: CALL_OW 234
// end ;
62451: PPOPN 1
62453: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62454: LD_EXP 43
62458: PUSH
62459: LD_EXP 73
62463: AND
62464: IFFALSE 62563
62466: GO 62468
62468: DISABLE
62469: LD_INT 0
62471: PPUSH
62472: PPUSH
// begin enable ;
62473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62474: LD_ADDR_VAR 0 1
62478: PUSH
62479: LD_INT 22
62481: PUSH
62482: LD_OWVAR 2
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 61
62493: PUSH
62494: EMPTY
62495: LIST
62496: PUSH
62497: LD_INT 33
62499: PUSH
62500: LD_INT 2
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: LIST
62511: PPUSH
62512: CALL_OW 69
62516: ST_TO_ADDR
// if not tmp then
62517: LD_VAR 0 1
62521: NOT
62522: IFFALSE 62526
// exit ;
62524: GO 62563
// for i in tmp do
62526: LD_ADDR_VAR 0 2
62530: PUSH
62531: LD_VAR 0 1
62535: PUSH
62536: FOR_IN
62537: IFFALSE 62561
// if IsControledBy ( i ) then
62539: LD_VAR 0 2
62543: PPUSH
62544: CALL_OW 312
62548: IFFALSE 62559
// ComUnlink ( i ) ;
62550: LD_VAR 0 2
62554: PPUSH
62555: CALL_OW 136
62559: GO 62536
62561: POP
62562: POP
// end ;
62563: PPOPN 2
62565: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62566: LD_EXP 43
62570: PUSH
62571: LD_EXP 74
62575: AND
62576: IFFALSE 62716
62578: GO 62580
62580: DISABLE
62581: LD_INT 0
62583: PPUSH
62584: PPUSH
// begin ToLua ( displayPowell(); ) ;
62585: LD_STRING displayPowell();
62587: PPUSH
62588: CALL_OW 559
// uc_side := 0 ;
62592: LD_ADDR_OWVAR 20
62596: PUSH
62597: LD_INT 0
62599: ST_TO_ADDR
// uc_nation := 2 ;
62600: LD_ADDR_OWVAR 21
62604: PUSH
62605: LD_INT 2
62607: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62608: LD_ADDR_OWVAR 37
62612: PUSH
62613: LD_INT 14
62615: ST_TO_ADDR
// vc_engine := engine_siberite ;
62616: LD_ADDR_OWVAR 39
62620: PUSH
62621: LD_INT 3
62623: ST_TO_ADDR
// vc_control := control_apeman ;
62624: LD_ADDR_OWVAR 38
62628: PUSH
62629: LD_INT 5
62631: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62632: LD_ADDR_OWVAR 40
62636: PUSH
62637: LD_INT 29
62639: ST_TO_ADDR
// un := CreateVehicle ;
62640: LD_ADDR_VAR 0 2
62644: PUSH
62645: CALL_OW 45
62649: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62650: LD_VAR 0 2
62654: PPUSH
62655: LD_INT 1
62657: PPUSH
62658: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62662: LD_INT 35
62664: PPUSH
62665: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62669: LD_VAR 0 2
62673: PPUSH
62674: LD_INT 22
62676: PUSH
62677: LD_OWVAR 2
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PPUSH
62686: CALL_OW 69
62690: PPUSH
62691: LD_VAR 0 2
62695: PPUSH
62696: CALL_OW 74
62700: PPUSH
62701: CALL_OW 115
// until IsDead ( un ) ;
62705: LD_VAR 0 2
62709: PPUSH
62710: CALL_OW 301
62714: IFFALSE 62662
// end ;
62716: PPOPN 2
62718: END
// every 0 0$1 trigger StreamModeActive and sStu do
62719: LD_EXP 43
62723: PUSH
62724: LD_EXP 82
62728: AND
62729: IFFALSE 62745
62731: GO 62733
62733: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62734: LD_STRING displayStucuk();
62736: PPUSH
62737: CALL_OW 559
// ResetFog ;
62741: CALL_OW 335
// end ;
62745: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62746: LD_EXP 43
62750: PUSH
62751: LD_EXP 75
62755: AND
62756: IFFALSE 62897
62758: GO 62760
62760: DISABLE
62761: LD_INT 0
62763: PPUSH
62764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62765: LD_ADDR_VAR 0 2
62769: PUSH
62770: LD_INT 22
62772: PUSH
62773: LD_OWVAR 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 21
62784: PUSH
62785: LD_INT 1
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PPUSH
62796: CALL_OW 69
62800: ST_TO_ADDR
// if not tmp then
62801: LD_VAR 0 2
62805: NOT
62806: IFFALSE 62810
// exit ;
62808: GO 62897
// un := tmp [ rand ( 1 , tmp ) ] ;
62810: LD_ADDR_VAR 0 1
62814: PUSH
62815: LD_VAR 0 2
62819: PUSH
62820: LD_INT 1
62822: PPUSH
62823: LD_VAR 0 2
62827: PPUSH
62828: CALL_OW 12
62832: ARRAY
62833: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62834: LD_VAR 0 1
62838: PPUSH
62839: LD_INT 0
62841: PPUSH
62842: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62846: LD_VAR 0 1
62850: PPUSH
62851: LD_OWVAR 3
62855: PUSH
62856: LD_VAR 0 1
62860: DIFF
62861: PPUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 74
62871: PPUSH
62872: CALL_OW 115
// wait ( 0 0$20 ) ;
62876: LD_INT 700
62878: PPUSH
62879: CALL_OW 67
// SetSide ( un , your_side ) ;
62883: LD_VAR 0 1
62887: PPUSH
62888: LD_OWVAR 2
62892: PPUSH
62893: CALL_OW 235
// end ;
62897: PPOPN 2
62899: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62900: LD_EXP 43
62904: PUSH
62905: LD_EXP 76
62909: AND
62910: IFFALSE 63016
62912: GO 62914
62914: DISABLE
62915: LD_INT 0
62917: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62918: LD_ADDR_VAR 0 1
62922: PUSH
62923: LD_INT 22
62925: PUSH
62926: LD_OWVAR 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: LD_INT 30
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 30
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PPUSH
62967: CALL_OW 69
62971: ST_TO_ADDR
// if not depot then
62972: LD_VAR 0 1
62976: NOT
62977: IFFALSE 62981
// exit ;
62979: GO 63016
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62981: LD_VAR 0 1
62985: PUSH
62986: LD_INT 1
62988: ARRAY
62989: PPUSH
62990: CALL_OW 250
62994: PPUSH
62995: LD_VAR 0 1
62999: PUSH
63000: LD_INT 1
63002: ARRAY
63003: PPUSH
63004: CALL_OW 251
63008: PPUSH
63009: LD_INT 70
63011: PPUSH
63012: CALL_OW 495
// end ;
63016: PPOPN 1
63018: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63019: LD_EXP 43
63023: PUSH
63024: LD_EXP 77
63028: AND
63029: IFFALSE 63240
63031: GO 63033
63033: DISABLE
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
63038: PPUSH
63039: PPUSH
63040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63041: LD_ADDR_VAR 0 5
63045: PUSH
63046: LD_INT 22
63048: PUSH
63049: LD_OWVAR 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 21
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PPUSH
63072: CALL_OW 69
63076: ST_TO_ADDR
// if not tmp then
63077: LD_VAR 0 5
63081: NOT
63082: IFFALSE 63086
// exit ;
63084: GO 63240
// for i in tmp do
63086: LD_ADDR_VAR 0 1
63090: PUSH
63091: LD_VAR 0 5
63095: PUSH
63096: FOR_IN
63097: IFFALSE 63238
// begin d := rand ( 0 , 5 ) ;
63099: LD_ADDR_VAR 0 4
63103: PUSH
63104: LD_INT 0
63106: PPUSH
63107: LD_INT 5
63109: PPUSH
63110: CALL_OW 12
63114: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63115: LD_ADDR_VAR 0 2
63119: PUSH
63120: LD_VAR 0 1
63124: PPUSH
63125: CALL_OW 250
63129: PPUSH
63130: LD_VAR 0 4
63134: PPUSH
63135: LD_INT 3
63137: PPUSH
63138: LD_INT 12
63140: PPUSH
63141: CALL_OW 12
63145: PPUSH
63146: CALL_OW 272
63150: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63151: LD_ADDR_VAR 0 3
63155: PUSH
63156: LD_VAR 0 1
63160: PPUSH
63161: CALL_OW 251
63165: PPUSH
63166: LD_VAR 0 4
63170: PPUSH
63171: LD_INT 3
63173: PPUSH
63174: LD_INT 12
63176: PPUSH
63177: CALL_OW 12
63181: PPUSH
63182: CALL_OW 273
63186: ST_TO_ADDR
// if ValidHex ( x , y ) then
63187: LD_VAR 0 2
63191: PPUSH
63192: LD_VAR 0 3
63196: PPUSH
63197: CALL_OW 488
63201: IFFALSE 63236
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63203: LD_VAR 0 1
63207: PPUSH
63208: LD_VAR 0 2
63212: PPUSH
63213: LD_VAR 0 3
63217: PPUSH
63218: LD_INT 3
63220: PPUSH
63221: LD_INT 6
63223: PPUSH
63224: CALL_OW 12
63228: PPUSH
63229: LD_INT 1
63231: PPUSH
63232: CALL_OW 483
// end ;
63236: GO 63096
63238: POP
63239: POP
// end ;
63240: PPOPN 5
63242: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63243: LD_EXP 43
63247: PUSH
63248: LD_EXP 78
63252: AND
63253: IFFALSE 63347
63255: GO 63257
63257: DISABLE
63258: LD_INT 0
63260: PPUSH
63261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63262: LD_ADDR_VAR 0 2
63266: PUSH
63267: LD_INT 22
63269: PUSH
63270: LD_OWVAR 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 32
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 21
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: LIST
63303: PPUSH
63304: CALL_OW 69
63308: ST_TO_ADDR
// if not tmp then
63309: LD_VAR 0 2
63313: NOT
63314: IFFALSE 63318
// exit ;
63316: GO 63347
// for i in tmp do
63318: LD_ADDR_VAR 0 1
63322: PUSH
63323: LD_VAR 0 2
63327: PUSH
63328: FOR_IN
63329: IFFALSE 63345
// SetFuel ( i , 0 ) ;
63331: LD_VAR 0 1
63335: PPUSH
63336: LD_INT 0
63338: PPUSH
63339: CALL_OW 240
63343: GO 63328
63345: POP
63346: POP
// end ;
63347: PPOPN 2
63349: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63350: LD_EXP 43
63354: PUSH
63355: LD_EXP 79
63359: AND
63360: IFFALSE 63426
63362: GO 63364
63364: DISABLE
63365: LD_INT 0
63367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63368: LD_ADDR_VAR 0 1
63372: PUSH
63373: LD_INT 22
63375: PUSH
63376: LD_OWVAR 2
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 30
63387: PUSH
63388: LD_INT 29
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PPUSH
63399: CALL_OW 69
63403: ST_TO_ADDR
// if not tmp then
63404: LD_VAR 0 1
63408: NOT
63409: IFFALSE 63413
// exit ;
63411: GO 63426
// DestroyUnit ( tmp [ 1 ] ) ;
63413: LD_VAR 0 1
63417: PUSH
63418: LD_INT 1
63420: ARRAY
63421: PPUSH
63422: CALL_OW 65
// end ;
63426: PPOPN 1
63428: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63429: LD_EXP 43
63433: PUSH
63434: LD_EXP 81
63438: AND
63439: IFFALSE 63568
63441: GO 63443
63443: DISABLE
63444: LD_INT 0
63446: PPUSH
// begin uc_side := 0 ;
63447: LD_ADDR_OWVAR 20
63451: PUSH
63452: LD_INT 0
63454: ST_TO_ADDR
// uc_nation := nation_arabian ;
63455: LD_ADDR_OWVAR 21
63459: PUSH
63460: LD_INT 2
63462: ST_TO_ADDR
// hc_gallery :=  ;
63463: LD_ADDR_OWVAR 33
63467: PUSH
63468: LD_STRING 
63470: ST_TO_ADDR
// hc_name :=  ;
63471: LD_ADDR_OWVAR 26
63475: PUSH
63476: LD_STRING 
63478: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63479: LD_INT 1
63481: PPUSH
63482: LD_INT 11
63484: PPUSH
63485: LD_INT 10
63487: PPUSH
63488: CALL_OW 380
// un := CreateHuman ;
63492: LD_ADDR_VAR 0 1
63496: PUSH
63497: CALL_OW 44
63501: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_INT 1
63509: PPUSH
63510: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63514: LD_INT 35
63516: PPUSH
63517: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63521: LD_VAR 0 1
63525: PPUSH
63526: LD_INT 22
63528: PUSH
63529: LD_OWVAR 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PPUSH
63538: CALL_OW 69
63542: PPUSH
63543: LD_VAR 0 1
63547: PPUSH
63548: CALL_OW 74
63552: PPUSH
63553: CALL_OW 115
// until IsDead ( un ) ;
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 301
63566: IFFALSE 63514
// end ;
63568: PPOPN 1
63570: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63571: LD_EXP 43
63575: PUSH
63576: LD_EXP 83
63580: AND
63581: IFFALSE 63593
63583: GO 63585
63585: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63586: LD_STRING earthquake(getX(game), 0, 32)
63588: PPUSH
63589: CALL_OW 559
63593: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63594: LD_EXP 43
63598: PUSH
63599: LD_EXP 84
63603: AND
63604: IFFALSE 63695
63606: GO 63608
63608: DISABLE
63609: LD_INT 0
63611: PPUSH
// begin enable ;
63612: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63613: LD_ADDR_VAR 0 1
63617: PUSH
63618: LD_INT 22
63620: PUSH
63621: LD_OWVAR 2
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 21
63632: PUSH
63633: LD_INT 2
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 33
63642: PUSH
63643: LD_INT 3
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: PPUSH
63655: CALL_OW 69
63659: ST_TO_ADDR
// if not tmp then
63660: LD_VAR 0 1
63664: NOT
63665: IFFALSE 63669
// exit ;
63667: GO 63695
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63669: LD_VAR 0 1
63673: PUSH
63674: LD_INT 1
63676: PPUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 12
63686: ARRAY
63687: PPUSH
63688: LD_INT 1
63690: PPUSH
63691: CALL_OW 234
// end ;
63695: PPOPN 1
63697: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63698: LD_EXP 43
63702: PUSH
63703: LD_EXP 85
63707: AND
63708: IFFALSE 63849
63710: GO 63712
63712: DISABLE
63713: LD_INT 0
63715: PPUSH
63716: PPUSH
63717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_INT 22
63725: PUSH
63726: LD_OWVAR 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 25
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PPUSH
63749: CALL_OW 69
63753: ST_TO_ADDR
// if not tmp then
63754: LD_VAR 0 3
63758: NOT
63759: IFFALSE 63763
// exit ;
63761: GO 63849
// un := tmp [ rand ( 1 , tmp ) ] ;
63763: LD_ADDR_VAR 0 2
63767: PUSH
63768: LD_VAR 0 3
63772: PUSH
63773: LD_INT 1
63775: PPUSH
63776: LD_VAR 0 3
63780: PPUSH
63781: CALL_OW 12
63785: ARRAY
63786: ST_TO_ADDR
// if Crawls ( un ) then
63787: LD_VAR 0 2
63791: PPUSH
63792: CALL_OW 318
63796: IFFALSE 63807
// ComWalk ( un ) ;
63798: LD_VAR 0 2
63802: PPUSH
63803: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63807: LD_VAR 0 2
63811: PPUSH
63812: LD_INT 9
63814: PPUSH
63815: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63819: LD_INT 28
63821: PPUSH
63822: LD_OWVAR 2
63826: PPUSH
63827: LD_INT 2
63829: PPUSH
63830: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63834: LD_INT 29
63836: PPUSH
63837: LD_OWVAR 2
63841: PPUSH
63842: LD_INT 2
63844: PPUSH
63845: CALL_OW 322
// end ;
63849: PPOPN 3
63851: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63852: LD_EXP 43
63856: PUSH
63857: LD_EXP 86
63861: AND
63862: IFFALSE 63973
63864: GO 63866
63866: DISABLE
63867: LD_INT 0
63869: PPUSH
63870: PPUSH
63871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63872: LD_ADDR_VAR 0 3
63876: PUSH
63877: LD_INT 22
63879: PUSH
63880: LD_OWVAR 2
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 25
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PPUSH
63903: CALL_OW 69
63907: ST_TO_ADDR
// if not tmp then
63908: LD_VAR 0 3
63912: NOT
63913: IFFALSE 63917
// exit ;
63915: GO 63973
// un := tmp [ rand ( 1 , tmp ) ] ;
63917: LD_ADDR_VAR 0 2
63921: PUSH
63922: LD_VAR 0 3
63926: PUSH
63927: LD_INT 1
63929: PPUSH
63930: LD_VAR 0 3
63934: PPUSH
63935: CALL_OW 12
63939: ARRAY
63940: ST_TO_ADDR
// if Crawls ( un ) then
63941: LD_VAR 0 2
63945: PPUSH
63946: CALL_OW 318
63950: IFFALSE 63961
// ComWalk ( un ) ;
63952: LD_VAR 0 2
63956: PPUSH
63957: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63961: LD_VAR 0 2
63965: PPUSH
63966: LD_INT 8
63968: PPUSH
63969: CALL_OW 336
// end ;
63973: PPOPN 3
63975: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63976: LD_EXP 43
63980: PUSH
63981: LD_EXP 87
63985: AND
63986: IFFALSE 64130
63988: GO 63990
63990: DISABLE
63991: LD_INT 0
63993: PPUSH
63994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63995: LD_ADDR_VAR 0 2
63999: PUSH
64000: LD_INT 22
64002: PUSH
64003: LD_OWVAR 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 21
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: LD_INT 34
64027: PUSH
64028: LD_INT 12
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 34
64037: PUSH
64038: LD_INT 51
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 34
64047: PUSH
64048: LD_INT 32
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: PPUSH
64066: CALL_OW 69
64070: ST_TO_ADDR
// if not tmp then
64071: LD_VAR 0 2
64075: NOT
64076: IFFALSE 64080
// exit ;
64078: GO 64130
// for i in tmp do
64080: LD_ADDR_VAR 0 1
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: FOR_IN
64091: IFFALSE 64128
// if GetCargo ( i , mat_artifact ) = 0 then
64093: LD_VAR 0 1
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL_OW 289
64105: PUSH
64106: LD_INT 0
64108: EQUAL
64109: IFFALSE 64126
// SetCargo ( i , mat_siberit , 100 ) ;
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_INT 3
64118: PPUSH
64119: LD_INT 100
64121: PPUSH
64122: CALL_OW 290
64126: GO 64090
64128: POP
64129: POP
// end ;
64130: PPOPN 2
64132: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64133: LD_EXP 43
64137: PUSH
64138: LD_EXP 88
64142: AND
64143: IFFALSE 64326
64145: GO 64147
64147: DISABLE
64148: LD_INT 0
64150: PPUSH
64151: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64152: LD_ADDR_VAR 0 2
64156: PUSH
64157: LD_INT 22
64159: PUSH
64160: LD_OWVAR 2
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PPUSH
64169: CALL_OW 69
64173: ST_TO_ADDR
// if not tmp then
64174: LD_VAR 0 2
64178: NOT
64179: IFFALSE 64183
// exit ;
64181: GO 64326
// for i := 1 to 2 do
64183: LD_ADDR_VAR 0 1
64187: PUSH
64188: DOUBLE
64189: LD_INT 1
64191: DEC
64192: ST_TO_ADDR
64193: LD_INT 2
64195: PUSH
64196: FOR_TO
64197: IFFALSE 64324
// begin uc_side := your_side ;
64199: LD_ADDR_OWVAR 20
64203: PUSH
64204: LD_OWVAR 2
64208: ST_TO_ADDR
// uc_nation := nation_american ;
64209: LD_ADDR_OWVAR 21
64213: PUSH
64214: LD_INT 1
64216: ST_TO_ADDR
// vc_chassis := us_morphling ;
64217: LD_ADDR_OWVAR 37
64221: PUSH
64222: LD_INT 5
64224: ST_TO_ADDR
// vc_engine := engine_siberite ;
64225: LD_ADDR_OWVAR 39
64229: PUSH
64230: LD_INT 3
64232: ST_TO_ADDR
// vc_control := control_computer ;
64233: LD_ADDR_OWVAR 38
64237: PUSH
64238: LD_INT 3
64240: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64241: LD_ADDR_OWVAR 40
64245: PUSH
64246: LD_INT 10
64248: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64249: LD_VAR 0 2
64253: PUSH
64254: LD_INT 1
64256: ARRAY
64257: PPUSH
64258: CALL_OW 310
64262: NOT
64263: IFFALSE 64310
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64265: CALL_OW 45
64269: PPUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_INT 1
64277: ARRAY
64278: PPUSH
64279: CALL_OW 250
64283: PPUSH
64284: LD_VAR 0 2
64288: PUSH
64289: LD_INT 1
64291: ARRAY
64292: PPUSH
64293: CALL_OW 251
64297: PPUSH
64298: LD_INT 12
64300: PPUSH
64301: LD_INT 1
64303: PPUSH
64304: CALL_OW 50
64308: GO 64322
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64310: CALL_OW 45
64314: PPUSH
64315: LD_INT 1
64317: PPUSH
64318: CALL_OW 51
// end ;
64322: GO 64196
64324: POP
64325: POP
// end ;
64326: PPOPN 2
64328: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64329: LD_EXP 43
64333: PUSH
64334: LD_EXP 89
64338: AND
64339: IFFALSE 64561
64341: GO 64343
64343: DISABLE
64344: LD_INT 0
64346: PPUSH
64347: PPUSH
64348: PPUSH
64349: PPUSH
64350: PPUSH
64351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64352: LD_ADDR_VAR 0 6
64356: PUSH
64357: LD_INT 22
64359: PUSH
64360: LD_OWVAR 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 21
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 3
64381: PUSH
64382: LD_INT 23
64384: PUSH
64385: LD_INT 0
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: PPUSH
64401: CALL_OW 69
64405: ST_TO_ADDR
// if not tmp then
64406: LD_VAR 0 6
64410: NOT
64411: IFFALSE 64415
// exit ;
64413: GO 64561
// s1 := rand ( 1 , 4 ) ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: LD_INT 1
64422: PPUSH
64423: LD_INT 4
64425: PPUSH
64426: CALL_OW 12
64430: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64431: LD_ADDR_VAR 0 4
64435: PUSH
64436: LD_VAR 0 6
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: PPUSH
64445: LD_VAR 0 2
64449: PPUSH
64450: CALL_OW 259
64454: ST_TO_ADDR
// if s1 = 1 then
64455: LD_VAR 0 2
64459: PUSH
64460: LD_INT 1
64462: EQUAL
64463: IFFALSE 64483
// s2 := rand ( 2 , 4 ) else
64465: LD_ADDR_VAR 0 3
64469: PUSH
64470: LD_INT 2
64472: PPUSH
64473: LD_INT 4
64475: PPUSH
64476: CALL_OW 12
64480: ST_TO_ADDR
64481: GO 64491
// s2 := 1 ;
64483: LD_ADDR_VAR 0 3
64487: PUSH
64488: LD_INT 1
64490: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64491: LD_ADDR_VAR 0 5
64495: PUSH
64496: LD_VAR 0 6
64500: PUSH
64501: LD_INT 1
64503: ARRAY
64504: PPUSH
64505: LD_VAR 0 3
64509: PPUSH
64510: CALL_OW 259
64514: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64515: LD_VAR 0 6
64519: PUSH
64520: LD_INT 1
64522: ARRAY
64523: PPUSH
64524: LD_VAR 0 2
64528: PPUSH
64529: LD_VAR 0 5
64533: PPUSH
64534: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64538: LD_VAR 0 6
64542: PUSH
64543: LD_INT 1
64545: ARRAY
64546: PPUSH
64547: LD_VAR 0 3
64551: PPUSH
64552: LD_VAR 0 4
64556: PPUSH
64557: CALL_OW 237
// end ;
64561: PPOPN 6
64563: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64564: LD_EXP 43
64568: PUSH
64569: LD_EXP 90
64573: AND
64574: IFFALSE 64653
64576: GO 64578
64578: DISABLE
64579: LD_INT 0
64581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64582: LD_ADDR_VAR 0 1
64586: PUSH
64587: LD_INT 22
64589: PUSH
64590: LD_OWVAR 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 30
64601: PUSH
64602: LD_INT 3
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PPUSH
64613: CALL_OW 69
64617: ST_TO_ADDR
// if not tmp then
64618: LD_VAR 0 1
64622: NOT
64623: IFFALSE 64627
// exit ;
64625: GO 64653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64627: LD_VAR 0 1
64631: PUSH
64632: LD_INT 1
64634: PPUSH
64635: LD_VAR 0 1
64639: PPUSH
64640: CALL_OW 12
64644: ARRAY
64645: PPUSH
64646: LD_INT 1
64648: PPUSH
64649: CALL_OW 234
// end ;
64653: PPOPN 1
64655: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64656: LD_EXP 43
64660: PUSH
64661: LD_EXP 91
64665: AND
64666: IFFALSE 64778
64668: GO 64670
64670: DISABLE
64671: LD_INT 0
64673: PPUSH
64674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64675: LD_ADDR_VAR 0 2
64679: PUSH
64680: LD_INT 22
64682: PUSH
64683: LD_OWVAR 2
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: LD_INT 30
64697: PUSH
64698: LD_INT 27
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 30
64707: PUSH
64708: LD_INT 26
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 30
64717: PUSH
64718: LD_INT 28
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PPUSH
64735: CALL_OW 69
64739: ST_TO_ADDR
// if not tmp then
64740: LD_VAR 0 2
64744: NOT
64745: IFFALSE 64749
// exit ;
64747: GO 64778
// for i in tmp do
64749: LD_ADDR_VAR 0 1
64753: PUSH
64754: LD_VAR 0 2
64758: PUSH
64759: FOR_IN
64760: IFFALSE 64776
// SetLives ( i , 1 ) ;
64762: LD_VAR 0 1
64766: PPUSH
64767: LD_INT 1
64769: PPUSH
64770: CALL_OW 234
64774: GO 64759
64776: POP
64777: POP
// end ;
64778: PPOPN 2
64780: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64781: LD_EXP 43
64785: PUSH
64786: LD_EXP 92
64790: AND
64791: IFFALSE 65078
64793: GO 64795
64795: DISABLE
64796: LD_INT 0
64798: PPUSH
64799: PPUSH
64800: PPUSH
// begin i := rand ( 1 , 7 ) ;
64801: LD_ADDR_VAR 0 1
64805: PUSH
64806: LD_INT 1
64808: PPUSH
64809: LD_INT 7
64811: PPUSH
64812: CALL_OW 12
64816: ST_TO_ADDR
// case i of 1 :
64817: LD_VAR 0 1
64821: PUSH
64822: LD_INT 1
64824: DOUBLE
64825: EQUAL
64826: IFTRUE 64830
64828: GO 64840
64830: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64831: LD_STRING earthquake(getX(game), 0, 32)
64833: PPUSH
64834: CALL_OW 559
64838: GO 65078
64840: LD_INT 2
64842: DOUBLE
64843: EQUAL
64844: IFTRUE 64848
64846: GO 64862
64848: POP
// begin ToLua ( displayStucuk(); ) ;
64849: LD_STRING displayStucuk();
64851: PPUSH
64852: CALL_OW 559
// ResetFog ;
64856: CALL_OW 335
// end ; 3 :
64860: GO 65078
64862: LD_INT 3
64864: DOUBLE
64865: EQUAL
64866: IFTRUE 64870
64868: GO 64974
64870: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64871: LD_ADDR_VAR 0 2
64875: PUSH
64876: LD_INT 22
64878: PUSH
64879: LD_OWVAR 2
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 25
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PPUSH
64902: CALL_OW 69
64906: ST_TO_ADDR
// if not tmp then
64907: LD_VAR 0 2
64911: NOT
64912: IFFALSE 64916
// exit ;
64914: GO 65078
// un := tmp [ rand ( 1 , tmp ) ] ;
64916: LD_ADDR_VAR 0 3
64920: PUSH
64921: LD_VAR 0 2
64925: PUSH
64926: LD_INT 1
64928: PPUSH
64929: LD_VAR 0 2
64933: PPUSH
64934: CALL_OW 12
64938: ARRAY
64939: ST_TO_ADDR
// if Crawls ( un ) then
64940: LD_VAR 0 3
64944: PPUSH
64945: CALL_OW 318
64949: IFFALSE 64960
// ComWalk ( un ) ;
64951: LD_VAR 0 3
64955: PPUSH
64956: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64960: LD_VAR 0 3
64964: PPUSH
64965: LD_INT 8
64967: PPUSH
64968: CALL_OW 336
// end ; 4 :
64972: GO 65078
64974: LD_INT 4
64976: DOUBLE
64977: EQUAL
64978: IFTRUE 64982
64980: GO 65056
64982: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 22
64990: PUSH
64991: LD_OWVAR 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 30
65002: PUSH
65003: LD_INT 29
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PPUSH
65014: CALL_OW 69
65018: ST_TO_ADDR
// if not tmp then
65019: LD_VAR 0 2
65023: NOT
65024: IFFALSE 65028
// exit ;
65026: GO 65078
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65028: LD_VAR 0 2
65032: PUSH
65033: LD_INT 1
65035: ARRAY
65036: PPUSH
65037: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65041: LD_VAR 0 2
65045: PUSH
65046: LD_INT 1
65048: ARRAY
65049: PPUSH
65050: CALL_OW 65
// end ; 5 .. 7 :
65054: GO 65078
65056: LD_INT 5
65058: DOUBLE
65059: GREATEREQUAL
65060: IFFALSE 65068
65062: LD_INT 7
65064: DOUBLE
65065: LESSEQUAL
65066: IFTRUE 65070
65068: GO 65077
65070: POP
// StreamSibBomb ; end ;
65071: CALL 61315 0 0
65075: GO 65078
65077: POP
// end ;
65078: PPOPN 3
65080: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65081: LD_EXP 43
65085: PUSH
65086: LD_EXP 93
65090: AND
65091: IFFALSE 65247
65093: GO 65095
65095: DISABLE
65096: LD_INT 0
65098: PPUSH
65099: PPUSH
65100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65101: LD_ADDR_VAR 0 2
65105: PUSH
65106: LD_INT 81
65108: PUSH
65109: LD_OWVAR 2
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 2
65120: PUSH
65121: LD_INT 21
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 21
65133: PUSH
65134: LD_INT 2
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: LIST
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PPUSH
65150: CALL_OW 69
65154: ST_TO_ADDR
// if not tmp then
65155: LD_VAR 0 2
65159: NOT
65160: IFFALSE 65164
// exit ;
65162: GO 65247
// p := 0 ;
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_INT 0
65171: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65172: LD_INT 35
65174: PPUSH
65175: CALL_OW 67
// p := p + 1 ;
65179: LD_ADDR_VAR 0 3
65183: PUSH
65184: LD_VAR 0 3
65188: PUSH
65189: LD_INT 1
65191: PLUS
65192: ST_TO_ADDR
// for i in tmp do
65193: LD_ADDR_VAR 0 1
65197: PUSH
65198: LD_VAR 0 2
65202: PUSH
65203: FOR_IN
65204: IFFALSE 65235
// if GetLives ( i ) < 1000 then
65206: LD_VAR 0 1
65210: PPUSH
65211: CALL_OW 256
65215: PUSH
65216: LD_INT 1000
65218: LESS
65219: IFFALSE 65233
// SetLives ( i , 1000 ) ;
65221: LD_VAR 0 1
65225: PPUSH
65226: LD_INT 1000
65228: PPUSH
65229: CALL_OW 234
65233: GO 65203
65235: POP
65236: POP
// until p > 20 ;
65237: LD_VAR 0 3
65241: PUSH
65242: LD_INT 20
65244: GREATER
65245: IFFALSE 65172
// end ;
65247: PPOPN 3
65249: END
// every 0 0$1 trigger StreamModeActive and sTime do
65250: LD_EXP 43
65254: PUSH
65255: LD_EXP 94
65259: AND
65260: IFFALSE 65295
65262: GO 65264
65264: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65265: LD_INT 28
65267: PPUSH
65268: LD_OWVAR 2
65272: PPUSH
65273: LD_INT 2
65275: PPUSH
65276: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65280: LD_INT 30
65282: PPUSH
65283: LD_OWVAR 2
65287: PPUSH
65288: LD_INT 2
65290: PPUSH
65291: CALL_OW 322
// end ;
65295: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65296: LD_EXP 43
65300: PUSH
65301: LD_EXP 95
65305: AND
65306: IFFALSE 65427
65308: GO 65310
65310: DISABLE
65311: LD_INT 0
65313: PPUSH
65314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65315: LD_ADDR_VAR 0 2
65319: PUSH
65320: LD_INT 22
65322: PUSH
65323: LD_OWVAR 2
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 21
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: LD_INT 23
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: PPUSH
65364: CALL_OW 69
65368: ST_TO_ADDR
// if not tmp then
65369: LD_VAR 0 2
65373: NOT
65374: IFFALSE 65378
// exit ;
65376: GO 65427
// for i in tmp do
65378: LD_ADDR_VAR 0 1
65382: PUSH
65383: LD_VAR 0 2
65387: PUSH
65388: FOR_IN
65389: IFFALSE 65425
// begin if Crawls ( i ) then
65391: LD_VAR 0 1
65395: PPUSH
65396: CALL_OW 318
65400: IFFALSE 65411
// ComWalk ( i ) ;
65402: LD_VAR 0 1
65406: PPUSH
65407: CALL_OW 138
// SetClass ( i , 2 ) ;
65411: LD_VAR 0 1
65415: PPUSH
65416: LD_INT 2
65418: PPUSH
65419: CALL_OW 336
// end ;
65423: GO 65388
65425: POP
65426: POP
// end ;
65427: PPOPN 2
65429: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65430: LD_EXP 43
65434: PUSH
65435: LD_EXP 96
65439: AND
65440: IFFALSE 65728
65442: GO 65444
65444: DISABLE
65445: LD_INT 0
65447: PPUSH
65448: PPUSH
65449: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65450: LD_OWVAR 2
65454: PPUSH
65455: LD_INT 9
65457: PPUSH
65458: LD_INT 1
65460: PPUSH
65461: LD_INT 1
65463: PPUSH
65464: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65468: LD_INT 9
65470: PPUSH
65471: LD_OWVAR 2
65475: PPUSH
65476: CALL_OW 343
// uc_side := 9 ;
65480: LD_ADDR_OWVAR 20
65484: PUSH
65485: LD_INT 9
65487: ST_TO_ADDR
// uc_nation := 2 ;
65488: LD_ADDR_OWVAR 21
65492: PUSH
65493: LD_INT 2
65495: ST_TO_ADDR
// hc_name := Dark Warrior ;
65496: LD_ADDR_OWVAR 26
65500: PUSH
65501: LD_STRING Dark Warrior
65503: ST_TO_ADDR
// hc_gallery :=  ;
65504: LD_ADDR_OWVAR 33
65508: PUSH
65509: LD_STRING 
65511: ST_TO_ADDR
// hc_noskilllimit := true ;
65512: LD_ADDR_OWVAR 76
65516: PUSH
65517: LD_INT 1
65519: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65520: LD_ADDR_OWVAR 31
65524: PUSH
65525: LD_INT 30
65527: PUSH
65528: LD_INT 30
65530: PUSH
65531: LD_INT 30
65533: PUSH
65534: LD_INT 30
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: ST_TO_ADDR
// un := CreateHuman ;
65543: LD_ADDR_VAR 0 3
65547: PUSH
65548: CALL_OW 44
65552: ST_TO_ADDR
// hc_noskilllimit := false ;
65553: LD_ADDR_OWVAR 76
65557: PUSH
65558: LD_INT 0
65560: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65561: LD_VAR 0 3
65565: PPUSH
65566: LD_INT 1
65568: PPUSH
65569: CALL_OW 51
// ToLua ( playRanger() ) ;
65573: LD_STRING playRanger()
65575: PPUSH
65576: CALL_OW 559
// p := 0 ;
65580: LD_ADDR_VAR 0 2
65584: PUSH
65585: LD_INT 0
65587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65588: LD_INT 35
65590: PPUSH
65591: CALL_OW 67
// p := p + 1 ;
65595: LD_ADDR_VAR 0 2
65599: PUSH
65600: LD_VAR 0 2
65604: PUSH
65605: LD_INT 1
65607: PLUS
65608: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65609: LD_VAR 0 3
65613: PPUSH
65614: CALL_OW 256
65618: PUSH
65619: LD_INT 1000
65621: LESS
65622: IFFALSE 65636
// SetLives ( un , 1000 ) ;
65624: LD_VAR 0 3
65628: PPUSH
65629: LD_INT 1000
65631: PPUSH
65632: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65636: LD_VAR 0 3
65640: PPUSH
65641: LD_INT 81
65643: PUSH
65644: LD_OWVAR 2
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 91
65655: PUSH
65656: LD_VAR 0 3
65660: PUSH
65661: LD_INT 30
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: LIST
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PPUSH
65673: CALL_OW 69
65677: PPUSH
65678: LD_VAR 0 3
65682: PPUSH
65683: CALL_OW 74
65687: PPUSH
65688: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65692: LD_VAR 0 2
65696: PUSH
65697: LD_INT 80
65699: GREATER
65700: PUSH
65701: LD_VAR 0 3
65705: PPUSH
65706: CALL_OW 301
65710: OR
65711: IFFALSE 65588
// if un then
65713: LD_VAR 0 3
65717: IFFALSE 65728
// RemoveUnit ( un ) ;
65719: LD_VAR 0 3
65723: PPUSH
65724: CALL_OW 64
// end ;
65728: PPOPN 3
65730: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65731: LD_EXP 97
65735: IFFALSE 65851
65737: GO 65739
65739: DISABLE
65740: LD_INT 0
65742: PPUSH
65743: PPUSH
65744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65745: LD_ADDR_VAR 0 2
65749: PUSH
65750: LD_INT 81
65752: PUSH
65753: LD_OWVAR 2
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 21
65764: PUSH
65765: LD_INT 1
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PPUSH
65776: CALL_OW 69
65780: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65781: LD_STRING playComputer()
65783: PPUSH
65784: CALL_OW 559
// if not tmp then
65788: LD_VAR 0 2
65792: NOT
65793: IFFALSE 65797
// exit ;
65795: GO 65851
// for i in tmp do
65797: LD_ADDR_VAR 0 1
65801: PUSH
65802: LD_VAR 0 2
65806: PUSH
65807: FOR_IN
65808: IFFALSE 65849
// for j := 1 to 4 do
65810: LD_ADDR_VAR 0 3
65814: PUSH
65815: DOUBLE
65816: LD_INT 1
65818: DEC
65819: ST_TO_ADDR
65820: LD_INT 4
65822: PUSH
65823: FOR_TO
65824: IFFALSE 65845
// SetSkill ( i , j , 10 ) ;
65826: LD_VAR 0 1
65830: PPUSH
65831: LD_VAR 0 3
65835: PPUSH
65836: LD_INT 10
65838: PPUSH
65839: CALL_OW 237
65843: GO 65823
65845: POP
65846: POP
65847: GO 65807
65849: POP
65850: POP
// end ;
65851: PPOPN 3
65853: END
// every 0 0$1 trigger s30 do var i , tmp ;
65854: LD_EXP 98
65858: IFFALSE 65927
65860: GO 65862
65862: DISABLE
65863: LD_INT 0
65865: PPUSH
65866: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65867: LD_ADDR_VAR 0 2
65871: PUSH
65872: LD_INT 22
65874: PUSH
65875: LD_OWVAR 2
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PPUSH
65884: CALL_OW 69
65888: ST_TO_ADDR
// if not tmp then
65889: LD_VAR 0 2
65893: NOT
65894: IFFALSE 65898
// exit ;
65896: GO 65927
// for i in tmp do
65898: LD_ADDR_VAR 0 1
65902: PUSH
65903: LD_VAR 0 2
65907: PUSH
65908: FOR_IN
65909: IFFALSE 65925
// SetLives ( i , 300 ) ;
65911: LD_VAR 0 1
65915: PPUSH
65916: LD_INT 300
65918: PPUSH
65919: CALL_OW 234
65923: GO 65908
65925: POP
65926: POP
// end ;
65927: PPOPN 2
65929: END
// every 0 0$1 trigger s60 do var i , tmp ;
65930: LD_EXP 99
65934: IFFALSE 66003
65936: GO 65938
65938: DISABLE
65939: LD_INT 0
65941: PPUSH
65942: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65943: LD_ADDR_VAR 0 2
65947: PUSH
65948: LD_INT 22
65950: PUSH
65951: LD_OWVAR 2
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PPUSH
65960: CALL_OW 69
65964: ST_TO_ADDR
// if not tmp then
65965: LD_VAR 0 2
65969: NOT
65970: IFFALSE 65974
// exit ;
65972: GO 66003
// for i in tmp do
65974: LD_ADDR_VAR 0 1
65978: PUSH
65979: LD_VAR 0 2
65983: PUSH
65984: FOR_IN
65985: IFFALSE 66001
// SetLives ( i , 600 ) ;
65987: LD_VAR 0 1
65991: PPUSH
65992: LD_INT 600
65994: PPUSH
65995: CALL_OW 234
65999: GO 65984
66001: POP
66002: POP
// end ;
66003: PPOPN 2
66005: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66006: LD_INT 0
66008: PPUSH
// case cmd of 301 :
66009: LD_VAR 0 1
66013: PUSH
66014: LD_INT 301
66016: DOUBLE
66017: EQUAL
66018: IFTRUE 66022
66020: GO 66054
66022: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66023: LD_VAR 0 6
66027: PPUSH
66028: LD_VAR 0 7
66032: PPUSH
66033: LD_VAR 0 8
66037: PPUSH
66038: LD_VAR 0 4
66042: PPUSH
66043: LD_VAR 0 5
66047: PPUSH
66048: CALL 67263 0 5
66052: GO 66175
66054: LD_INT 302
66056: DOUBLE
66057: EQUAL
66058: IFTRUE 66062
66060: GO 66099
66062: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66063: LD_VAR 0 6
66067: PPUSH
66068: LD_VAR 0 7
66072: PPUSH
66073: LD_VAR 0 8
66077: PPUSH
66078: LD_VAR 0 9
66082: PPUSH
66083: LD_VAR 0 4
66087: PPUSH
66088: LD_VAR 0 5
66092: PPUSH
66093: CALL 67354 0 6
66097: GO 66175
66099: LD_INT 303
66101: DOUBLE
66102: EQUAL
66103: IFTRUE 66107
66105: GO 66144
66107: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66108: LD_VAR 0 6
66112: PPUSH
66113: LD_VAR 0 7
66117: PPUSH
66118: LD_VAR 0 8
66122: PPUSH
66123: LD_VAR 0 9
66127: PPUSH
66128: LD_VAR 0 4
66132: PPUSH
66133: LD_VAR 0 5
66137: PPUSH
66138: CALL 66180 0 6
66142: GO 66175
66144: LD_INT 304
66146: DOUBLE
66147: EQUAL
66148: IFTRUE 66152
66150: GO 66174
66152: POP
// hHackTeleport ( unit , x , y ) ; end ;
66153: LD_VAR 0 2
66157: PPUSH
66158: LD_VAR 0 4
66162: PPUSH
66163: LD_VAR 0 5
66167: PPUSH
66168: CALL 67947 0 3
66172: GO 66175
66174: POP
// end ;
66175: LD_VAR 0 12
66179: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66180: LD_INT 0
66182: PPUSH
66183: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66184: LD_VAR 0 1
66188: PUSH
66189: LD_INT 1
66191: LESS
66192: PUSH
66193: LD_VAR 0 1
66197: PUSH
66198: LD_INT 3
66200: GREATER
66201: OR
66202: PUSH
66203: LD_VAR 0 5
66207: PPUSH
66208: LD_VAR 0 6
66212: PPUSH
66213: CALL_OW 428
66217: OR
66218: IFFALSE 66222
// exit ;
66220: GO 66950
// uc_side := your_side ;
66222: LD_ADDR_OWVAR 20
66226: PUSH
66227: LD_OWVAR 2
66231: ST_TO_ADDR
// uc_nation := nation ;
66232: LD_ADDR_OWVAR 21
66236: PUSH
66237: LD_VAR 0 1
66241: ST_TO_ADDR
// bc_level = 1 ;
66242: LD_ADDR_OWVAR 43
66246: PUSH
66247: LD_INT 1
66249: ST_TO_ADDR
// case btype of 1 :
66250: LD_VAR 0 2
66254: PUSH
66255: LD_INT 1
66257: DOUBLE
66258: EQUAL
66259: IFTRUE 66263
66261: GO 66274
66263: POP
// bc_type := b_depot ; 2 :
66264: LD_ADDR_OWVAR 42
66268: PUSH
66269: LD_INT 0
66271: ST_TO_ADDR
66272: GO 66894
66274: LD_INT 2
66276: DOUBLE
66277: EQUAL
66278: IFTRUE 66282
66280: GO 66293
66282: POP
// bc_type := b_warehouse ; 3 :
66283: LD_ADDR_OWVAR 42
66287: PUSH
66288: LD_INT 1
66290: ST_TO_ADDR
66291: GO 66894
66293: LD_INT 3
66295: DOUBLE
66296: EQUAL
66297: IFTRUE 66301
66299: GO 66312
66301: POP
// bc_type := b_lab ; 4 .. 9 :
66302: LD_ADDR_OWVAR 42
66306: PUSH
66307: LD_INT 6
66309: ST_TO_ADDR
66310: GO 66894
66312: LD_INT 4
66314: DOUBLE
66315: GREATEREQUAL
66316: IFFALSE 66324
66318: LD_INT 9
66320: DOUBLE
66321: LESSEQUAL
66322: IFTRUE 66326
66324: GO 66386
66326: POP
// begin bc_type := b_lab_half ;
66327: LD_ADDR_OWVAR 42
66331: PUSH
66332: LD_INT 7
66334: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66335: LD_ADDR_OWVAR 44
66339: PUSH
66340: LD_INT 10
66342: PUSH
66343: LD_INT 11
66345: PUSH
66346: LD_INT 12
66348: PUSH
66349: LD_INT 15
66351: PUSH
66352: LD_INT 14
66354: PUSH
66355: LD_INT 13
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: PUSH
66366: LD_VAR 0 2
66370: PUSH
66371: LD_INT 3
66373: MINUS
66374: ARRAY
66375: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66376: LD_ADDR_OWVAR 45
66380: PUSH
66381: LD_INT 9
66383: ST_TO_ADDR
// end ; 10 .. 13 :
66384: GO 66894
66386: LD_INT 10
66388: DOUBLE
66389: GREATEREQUAL
66390: IFFALSE 66398
66392: LD_INT 13
66394: DOUBLE
66395: LESSEQUAL
66396: IFTRUE 66400
66398: GO 66477
66400: POP
// begin bc_type := b_lab_full ;
66401: LD_ADDR_OWVAR 42
66405: PUSH
66406: LD_INT 8
66408: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66409: LD_ADDR_OWVAR 44
66413: PUSH
66414: LD_INT 10
66416: PUSH
66417: LD_INT 12
66419: PUSH
66420: LD_INT 14
66422: PUSH
66423: LD_INT 13
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 9
66439: MINUS
66440: ARRAY
66441: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66442: LD_ADDR_OWVAR 45
66446: PUSH
66447: LD_INT 11
66449: PUSH
66450: LD_INT 15
66452: PUSH
66453: LD_INT 12
66455: PUSH
66456: LD_INT 15
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: PUSH
66465: LD_VAR 0 2
66469: PUSH
66470: LD_INT 9
66472: MINUS
66473: ARRAY
66474: ST_TO_ADDR
// end ; 14 :
66475: GO 66894
66477: LD_INT 14
66479: DOUBLE
66480: EQUAL
66481: IFTRUE 66485
66483: GO 66496
66485: POP
// bc_type := b_workshop ; 15 :
66486: LD_ADDR_OWVAR 42
66490: PUSH
66491: LD_INT 2
66493: ST_TO_ADDR
66494: GO 66894
66496: LD_INT 15
66498: DOUBLE
66499: EQUAL
66500: IFTRUE 66504
66502: GO 66515
66504: POP
// bc_type := b_factory ; 16 :
66505: LD_ADDR_OWVAR 42
66509: PUSH
66510: LD_INT 3
66512: ST_TO_ADDR
66513: GO 66894
66515: LD_INT 16
66517: DOUBLE
66518: EQUAL
66519: IFTRUE 66523
66521: GO 66534
66523: POP
// bc_type := b_ext_gun ; 17 :
66524: LD_ADDR_OWVAR 42
66528: PUSH
66529: LD_INT 17
66531: ST_TO_ADDR
66532: GO 66894
66534: LD_INT 17
66536: DOUBLE
66537: EQUAL
66538: IFTRUE 66542
66540: GO 66570
66542: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66543: LD_ADDR_OWVAR 42
66547: PUSH
66548: LD_INT 19
66550: PUSH
66551: LD_INT 23
66553: PUSH
66554: LD_INT 19
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: LD_VAR 0 1
66566: ARRAY
66567: ST_TO_ADDR
66568: GO 66894
66570: LD_INT 18
66572: DOUBLE
66573: EQUAL
66574: IFTRUE 66578
66576: GO 66589
66578: POP
// bc_type := b_ext_radar ; 19 :
66579: LD_ADDR_OWVAR 42
66583: PUSH
66584: LD_INT 20
66586: ST_TO_ADDR
66587: GO 66894
66589: LD_INT 19
66591: DOUBLE
66592: EQUAL
66593: IFTRUE 66597
66595: GO 66608
66597: POP
// bc_type := b_ext_radio ; 20 :
66598: LD_ADDR_OWVAR 42
66602: PUSH
66603: LD_INT 22
66605: ST_TO_ADDR
66606: GO 66894
66608: LD_INT 20
66610: DOUBLE
66611: EQUAL
66612: IFTRUE 66616
66614: GO 66627
66616: POP
// bc_type := b_ext_siberium ; 21 :
66617: LD_ADDR_OWVAR 42
66621: PUSH
66622: LD_INT 21
66624: ST_TO_ADDR
66625: GO 66894
66627: LD_INT 21
66629: DOUBLE
66630: EQUAL
66631: IFTRUE 66635
66633: GO 66646
66635: POP
// bc_type := b_ext_computer ; 22 :
66636: LD_ADDR_OWVAR 42
66640: PUSH
66641: LD_INT 24
66643: ST_TO_ADDR
66644: GO 66894
66646: LD_INT 22
66648: DOUBLE
66649: EQUAL
66650: IFTRUE 66654
66652: GO 66665
66654: POP
// bc_type := b_ext_track ; 23 :
66655: LD_ADDR_OWVAR 42
66659: PUSH
66660: LD_INT 16
66662: ST_TO_ADDR
66663: GO 66894
66665: LD_INT 23
66667: DOUBLE
66668: EQUAL
66669: IFTRUE 66673
66671: GO 66684
66673: POP
// bc_type := b_ext_laser ; 24 :
66674: LD_ADDR_OWVAR 42
66678: PUSH
66679: LD_INT 25
66681: ST_TO_ADDR
66682: GO 66894
66684: LD_INT 24
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66692
66690: GO 66703
66692: POP
// bc_type := b_control_tower ; 25 :
66693: LD_ADDR_OWVAR 42
66697: PUSH
66698: LD_INT 36
66700: ST_TO_ADDR
66701: GO 66894
66703: LD_INT 25
66705: DOUBLE
66706: EQUAL
66707: IFTRUE 66711
66709: GO 66722
66711: POP
// bc_type := b_breastwork ; 26 :
66712: LD_ADDR_OWVAR 42
66716: PUSH
66717: LD_INT 31
66719: ST_TO_ADDR
66720: GO 66894
66722: LD_INT 26
66724: DOUBLE
66725: EQUAL
66726: IFTRUE 66730
66728: GO 66741
66730: POP
// bc_type := b_bunker ; 27 :
66731: LD_ADDR_OWVAR 42
66735: PUSH
66736: LD_INT 32
66738: ST_TO_ADDR
66739: GO 66894
66741: LD_INT 27
66743: DOUBLE
66744: EQUAL
66745: IFTRUE 66749
66747: GO 66760
66749: POP
// bc_type := b_turret ; 28 :
66750: LD_ADDR_OWVAR 42
66754: PUSH
66755: LD_INT 33
66757: ST_TO_ADDR
66758: GO 66894
66760: LD_INT 28
66762: DOUBLE
66763: EQUAL
66764: IFTRUE 66768
66766: GO 66779
66768: POP
// bc_type := b_armoury ; 29 :
66769: LD_ADDR_OWVAR 42
66773: PUSH
66774: LD_INT 4
66776: ST_TO_ADDR
66777: GO 66894
66779: LD_INT 29
66781: DOUBLE
66782: EQUAL
66783: IFTRUE 66787
66785: GO 66798
66787: POP
// bc_type := b_barracks ; 30 :
66788: LD_ADDR_OWVAR 42
66792: PUSH
66793: LD_INT 5
66795: ST_TO_ADDR
66796: GO 66894
66798: LD_INT 30
66800: DOUBLE
66801: EQUAL
66802: IFTRUE 66806
66804: GO 66817
66806: POP
// bc_type := b_solar_power ; 31 :
66807: LD_ADDR_OWVAR 42
66811: PUSH
66812: LD_INT 27
66814: ST_TO_ADDR
66815: GO 66894
66817: LD_INT 31
66819: DOUBLE
66820: EQUAL
66821: IFTRUE 66825
66823: GO 66836
66825: POP
// bc_type := b_oil_power ; 32 :
66826: LD_ADDR_OWVAR 42
66830: PUSH
66831: LD_INT 26
66833: ST_TO_ADDR
66834: GO 66894
66836: LD_INT 32
66838: DOUBLE
66839: EQUAL
66840: IFTRUE 66844
66842: GO 66855
66844: POP
// bc_type := b_siberite_power ; 33 :
66845: LD_ADDR_OWVAR 42
66849: PUSH
66850: LD_INT 28
66852: ST_TO_ADDR
66853: GO 66894
66855: LD_INT 33
66857: DOUBLE
66858: EQUAL
66859: IFTRUE 66863
66861: GO 66874
66863: POP
// bc_type := b_oil_mine ; 34 :
66864: LD_ADDR_OWVAR 42
66868: PUSH
66869: LD_INT 29
66871: ST_TO_ADDR
66872: GO 66894
66874: LD_INT 34
66876: DOUBLE
66877: EQUAL
66878: IFTRUE 66882
66880: GO 66893
66882: POP
// bc_type := b_siberite_mine ; end ;
66883: LD_ADDR_OWVAR 42
66887: PUSH
66888: LD_INT 30
66890: ST_TO_ADDR
66891: GO 66894
66893: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66894: LD_ADDR_VAR 0 8
66898: PUSH
66899: LD_VAR 0 5
66903: PPUSH
66904: LD_VAR 0 6
66908: PPUSH
66909: LD_VAR 0 3
66913: PPUSH
66914: CALL_OW 47
66918: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66919: LD_OWVAR 42
66923: PUSH
66924: LD_INT 32
66926: PUSH
66927: LD_INT 33
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: IN
66934: IFFALSE 66950
// PlaceWeaponTurret ( b , weapon ) ;
66936: LD_VAR 0 8
66940: PPUSH
66941: LD_VAR 0 4
66945: PPUSH
66946: CALL_OW 431
// end ;
66950: LD_VAR 0 7
66954: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66955: LD_INT 0
66957: PPUSH
66958: PPUSH
66959: PPUSH
66960: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66961: LD_ADDR_VAR 0 4
66965: PUSH
66966: LD_INT 22
66968: PUSH
66969: LD_OWVAR 2
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 2
66980: PUSH
66981: LD_INT 30
66983: PUSH
66984: LD_INT 0
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 30
66993: PUSH
66994: LD_INT 1
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PPUSH
67010: CALL_OW 69
67014: ST_TO_ADDR
// if not tmp then
67015: LD_VAR 0 4
67019: NOT
67020: IFFALSE 67024
// exit ;
67022: GO 67083
// for i in tmp do
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: LD_VAR 0 4
67033: PUSH
67034: FOR_IN
67035: IFFALSE 67081
// for j = 1 to 3 do
67037: LD_ADDR_VAR 0 3
67041: PUSH
67042: DOUBLE
67043: LD_INT 1
67045: DEC
67046: ST_TO_ADDR
67047: LD_INT 3
67049: PUSH
67050: FOR_TO
67051: IFFALSE 67077
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67053: LD_VAR 0 2
67057: PPUSH
67058: CALL_OW 274
67062: PPUSH
67063: LD_VAR 0 3
67067: PPUSH
67068: LD_INT 99999
67070: PPUSH
67071: CALL_OW 277
67075: GO 67050
67077: POP
67078: POP
67079: GO 67034
67081: POP
67082: POP
// end ;
67083: LD_VAR 0 1
67087: RET
// export function hHackSetLevel10 ; var i , j ; begin
67088: LD_INT 0
67090: PPUSH
67091: PPUSH
67092: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67093: LD_ADDR_VAR 0 2
67097: PUSH
67098: LD_INT 21
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PPUSH
67108: CALL_OW 69
67112: PUSH
67113: FOR_IN
67114: IFFALSE 67166
// if IsSelected ( i ) then
67116: LD_VAR 0 2
67120: PPUSH
67121: CALL_OW 306
67125: IFFALSE 67164
// begin for j := 1 to 4 do
67127: LD_ADDR_VAR 0 3
67131: PUSH
67132: DOUBLE
67133: LD_INT 1
67135: DEC
67136: ST_TO_ADDR
67137: LD_INT 4
67139: PUSH
67140: FOR_TO
67141: IFFALSE 67162
// SetSkill ( i , j , 10 ) ;
67143: LD_VAR 0 2
67147: PPUSH
67148: LD_VAR 0 3
67152: PPUSH
67153: LD_INT 10
67155: PPUSH
67156: CALL_OW 237
67160: GO 67140
67162: POP
67163: POP
// end ;
67164: GO 67113
67166: POP
67167: POP
// end ;
67168: LD_VAR 0 1
67172: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67173: LD_INT 0
67175: PPUSH
67176: PPUSH
67177: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67178: LD_ADDR_VAR 0 2
67182: PUSH
67183: LD_INT 22
67185: PUSH
67186: LD_OWVAR 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 21
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PPUSH
67209: CALL_OW 69
67213: PUSH
67214: FOR_IN
67215: IFFALSE 67256
// begin for j := 1 to 4 do
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: DOUBLE
67223: LD_INT 1
67225: DEC
67226: ST_TO_ADDR
67227: LD_INT 4
67229: PUSH
67230: FOR_TO
67231: IFFALSE 67252
// SetSkill ( i , j , 10 ) ;
67233: LD_VAR 0 2
67237: PPUSH
67238: LD_VAR 0 3
67242: PPUSH
67243: LD_INT 10
67245: PPUSH
67246: CALL_OW 237
67250: GO 67230
67252: POP
67253: POP
// end ;
67254: GO 67214
67256: POP
67257: POP
// end ;
67258: LD_VAR 0 1
67262: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67263: LD_INT 0
67265: PPUSH
// uc_side := your_side ;
67266: LD_ADDR_OWVAR 20
67270: PUSH
67271: LD_OWVAR 2
67275: ST_TO_ADDR
// uc_nation := nation ;
67276: LD_ADDR_OWVAR 21
67280: PUSH
67281: LD_VAR 0 1
67285: ST_TO_ADDR
// InitHc ;
67286: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67290: LD_INT 0
67292: PPUSH
67293: LD_VAR 0 2
67297: PPUSH
67298: LD_VAR 0 3
67302: PPUSH
67303: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67307: LD_VAR 0 4
67311: PPUSH
67312: LD_VAR 0 5
67316: PPUSH
67317: CALL_OW 428
67321: PUSH
67322: LD_INT 0
67324: EQUAL
67325: IFFALSE 67349
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67327: CALL_OW 44
67331: PPUSH
67332: LD_VAR 0 4
67336: PPUSH
67337: LD_VAR 0 5
67341: PPUSH
67342: LD_INT 1
67344: PPUSH
67345: CALL_OW 48
// end ;
67349: LD_VAR 0 6
67353: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67354: LD_INT 0
67356: PPUSH
67357: PPUSH
// uc_side := your_side ;
67358: LD_ADDR_OWVAR 20
67362: PUSH
67363: LD_OWVAR 2
67367: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67368: LD_VAR 0 1
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 3
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: LD_INT 5
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: IN
67395: IFFALSE 67407
// uc_nation := nation_american else
67397: LD_ADDR_OWVAR 21
67401: PUSH
67402: LD_INT 1
67404: ST_TO_ADDR
67405: GO 67450
// if chassis in [ 11 , 12 , 13 , 14 ] then
67407: LD_VAR 0 1
67411: PUSH
67412: LD_INT 11
67414: PUSH
67415: LD_INT 12
67417: PUSH
67418: LD_INT 13
67420: PUSH
67421: LD_INT 14
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: IN
67430: IFFALSE 67442
// uc_nation := nation_arabian else
67432: LD_ADDR_OWVAR 21
67436: PUSH
67437: LD_INT 2
67439: ST_TO_ADDR
67440: GO 67450
// uc_nation := nation_russian ;
67442: LD_ADDR_OWVAR 21
67446: PUSH
67447: LD_INT 3
67449: ST_TO_ADDR
// vc_chassis := chassis ;
67450: LD_ADDR_OWVAR 37
67454: PUSH
67455: LD_VAR 0 1
67459: ST_TO_ADDR
// vc_engine := engine ;
67460: LD_ADDR_OWVAR 39
67464: PUSH
67465: LD_VAR 0 2
67469: ST_TO_ADDR
// vc_control := control ;
67470: LD_ADDR_OWVAR 38
67474: PUSH
67475: LD_VAR 0 3
67479: ST_TO_ADDR
// vc_weapon := weapon ;
67480: LD_ADDR_OWVAR 40
67484: PUSH
67485: LD_VAR 0 4
67489: ST_TO_ADDR
// un := CreateVehicle ;
67490: LD_ADDR_VAR 0 8
67494: PUSH
67495: CALL_OW 45
67499: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67500: LD_VAR 0 8
67504: PPUSH
67505: LD_INT 0
67507: PPUSH
67508: LD_INT 5
67510: PPUSH
67511: CALL_OW 12
67515: PPUSH
67516: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67520: LD_VAR 0 8
67524: PPUSH
67525: LD_VAR 0 5
67529: PPUSH
67530: LD_VAR 0 6
67534: PPUSH
67535: LD_INT 1
67537: PPUSH
67538: CALL_OW 48
// end ;
67542: LD_VAR 0 7
67546: RET
// export hInvincible ; every 1 do
67547: GO 67549
67549: DISABLE
// hInvincible := [ ] ;
67550: LD_ADDR_EXP 100
67554: PUSH
67555: EMPTY
67556: ST_TO_ADDR
67557: END
// every 10 do var i ;
67558: GO 67560
67560: DISABLE
67561: LD_INT 0
67563: PPUSH
// begin enable ;
67564: ENABLE
// if not hInvincible then
67565: LD_EXP 100
67569: NOT
67570: IFFALSE 67574
// exit ;
67572: GO 67618
// for i in hInvincible do
67574: LD_ADDR_VAR 0 1
67578: PUSH
67579: LD_EXP 100
67583: PUSH
67584: FOR_IN
67585: IFFALSE 67616
// if GetLives ( i ) < 1000 then
67587: LD_VAR 0 1
67591: PPUSH
67592: CALL_OW 256
67596: PUSH
67597: LD_INT 1000
67599: LESS
67600: IFFALSE 67614
// SetLives ( i , 1000 ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_INT 1000
67609: PPUSH
67610: CALL_OW 234
67614: GO 67584
67616: POP
67617: POP
// end ;
67618: PPOPN 1
67620: END
// export function hHackInvincible ; var i ; begin
67621: LD_INT 0
67623: PPUSH
67624: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67625: LD_ADDR_VAR 0 2
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 21
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 21
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: PPUSH
67658: CALL_OW 69
67662: PUSH
67663: FOR_IN
67664: IFFALSE 67725
// if IsSelected ( i ) then
67666: LD_VAR 0 2
67670: PPUSH
67671: CALL_OW 306
67675: IFFALSE 67723
// begin if i in hInvincible then
67677: LD_VAR 0 2
67681: PUSH
67682: LD_EXP 100
67686: IN
67687: IFFALSE 67707
// hInvincible := hInvincible diff i else
67689: LD_ADDR_EXP 100
67693: PUSH
67694: LD_EXP 100
67698: PUSH
67699: LD_VAR 0 2
67703: DIFF
67704: ST_TO_ADDR
67705: GO 67723
// hInvincible := hInvincible union i ;
67707: LD_ADDR_EXP 100
67711: PUSH
67712: LD_EXP 100
67716: PUSH
67717: LD_VAR 0 2
67721: UNION
67722: ST_TO_ADDR
// end ;
67723: GO 67663
67725: POP
67726: POP
// end ;
67727: LD_VAR 0 1
67731: RET
// export function hHackInvisible ; var i , j ; begin
67732: LD_INT 0
67734: PPUSH
67735: PPUSH
67736: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67737: LD_ADDR_VAR 0 2
67741: PUSH
67742: LD_INT 21
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PPUSH
67752: CALL_OW 69
67756: PUSH
67757: FOR_IN
67758: IFFALSE 67782
// if IsSelected ( i ) then
67760: LD_VAR 0 2
67764: PPUSH
67765: CALL_OW 306
67769: IFFALSE 67780
// ComForceInvisible ( i ) ;
67771: LD_VAR 0 2
67775: PPUSH
67776: CALL_OW 496
67780: GO 67757
67782: POP
67783: POP
// end ;
67784: LD_VAR 0 1
67788: RET
// export function hHackChangeYourSide ; begin
67789: LD_INT 0
67791: PPUSH
// if your_side = 8 then
67792: LD_OWVAR 2
67796: PUSH
67797: LD_INT 8
67799: EQUAL
67800: IFFALSE 67812
// your_side := 0 else
67802: LD_ADDR_OWVAR 2
67806: PUSH
67807: LD_INT 0
67809: ST_TO_ADDR
67810: GO 67826
// your_side := your_side + 1 ;
67812: LD_ADDR_OWVAR 2
67816: PUSH
67817: LD_OWVAR 2
67821: PUSH
67822: LD_INT 1
67824: PLUS
67825: ST_TO_ADDR
// end ;
67826: LD_VAR 0 1
67830: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67831: LD_INT 0
67833: PPUSH
67834: PPUSH
67835: PPUSH
// for i in all_units do
67836: LD_ADDR_VAR 0 2
67840: PUSH
67841: LD_OWVAR 3
67845: PUSH
67846: FOR_IN
67847: IFFALSE 67925
// if IsSelected ( i ) then
67849: LD_VAR 0 2
67853: PPUSH
67854: CALL_OW 306
67858: IFFALSE 67923
// begin j := GetSide ( i ) ;
67860: LD_ADDR_VAR 0 3
67864: PUSH
67865: LD_VAR 0 2
67869: PPUSH
67870: CALL_OW 255
67874: ST_TO_ADDR
// if j = 8 then
67875: LD_VAR 0 3
67879: PUSH
67880: LD_INT 8
67882: EQUAL
67883: IFFALSE 67895
// j := 0 else
67885: LD_ADDR_VAR 0 3
67889: PUSH
67890: LD_INT 0
67892: ST_TO_ADDR
67893: GO 67909
// j := j + 1 ;
67895: LD_ADDR_VAR 0 3
67899: PUSH
67900: LD_VAR 0 3
67904: PUSH
67905: LD_INT 1
67907: PLUS
67908: ST_TO_ADDR
// SetSide ( i , j ) ;
67909: LD_VAR 0 2
67913: PPUSH
67914: LD_VAR 0 3
67918: PPUSH
67919: CALL_OW 235
// end ;
67923: GO 67846
67925: POP
67926: POP
// end ;
67927: LD_VAR 0 1
67931: RET
// export function hHackFog ; begin
67932: LD_INT 0
67934: PPUSH
// FogOff ( true ) ;
67935: LD_INT 1
67937: PPUSH
67938: CALL_OW 344
// end ;
67942: LD_VAR 0 1
67946: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67947: LD_INT 0
67949: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67950: LD_VAR 0 1
67954: PPUSH
67955: LD_VAR 0 2
67959: PPUSH
67960: LD_VAR 0 3
67964: PPUSH
67965: LD_INT 1
67967: PPUSH
67968: LD_INT 1
67970: PPUSH
67971: CALL_OW 483
// CenterOnXY ( x , y ) ;
67975: LD_VAR 0 2
67979: PPUSH
67980: LD_VAR 0 3
67984: PPUSH
67985: CALL_OW 84
// end ;
67989: LD_VAR 0 4
67993: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67994: LD_INT 0
67996: PPUSH
67997: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67998: LD_VAR 0 1
68002: NOT
68003: PUSH
68004: LD_VAR 0 2
68008: PPUSH
68009: LD_VAR 0 3
68013: PPUSH
68014: CALL_OW 488
68018: NOT
68019: OR
68020: PUSH
68021: LD_VAR 0 1
68025: PPUSH
68026: CALL_OW 266
68030: PUSH
68031: LD_INT 3
68033: NONEQUAL
68034: PUSH
68035: LD_VAR 0 1
68039: PPUSH
68040: CALL_OW 247
68044: PUSH
68045: LD_INT 1
68047: EQUAL
68048: NOT
68049: AND
68050: OR
68051: IFFALSE 68055
// exit ;
68053: GO 68204
// if GetType ( factory ) = unit_human then
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 247
68064: PUSH
68065: LD_INT 1
68067: EQUAL
68068: IFFALSE 68085
// factory := IsInUnit ( factory ) ;
68070: LD_ADDR_VAR 0 1
68074: PUSH
68075: LD_VAR 0 1
68079: PPUSH
68080: CALL_OW 310
68084: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68085: LD_VAR 0 1
68089: PPUSH
68090: CALL_OW 266
68094: PUSH
68095: LD_INT 3
68097: NONEQUAL
68098: IFFALSE 68102
// exit ;
68100: GO 68204
// if HexInfo ( x , y ) = factory then
68102: LD_VAR 0 2
68106: PPUSH
68107: LD_VAR 0 3
68111: PPUSH
68112: CALL_OW 428
68116: PUSH
68117: LD_VAR 0 1
68121: EQUAL
68122: IFFALSE 68149
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
68124: LD_ADDR_EXP 101
68128: PUSH
68129: LD_EXP 101
68133: PPUSH
68134: LD_VAR 0 1
68138: PPUSH
68139: LD_INT 0
68141: PPUSH
68142: CALL_OW 1
68146: ST_TO_ADDR
68147: GO 68200
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
68149: LD_ADDR_EXP 101
68153: PUSH
68154: LD_EXP 101
68158: PPUSH
68159: LD_VAR 0 1
68163: PPUSH
68164: LD_VAR 0 1
68168: PPUSH
68169: CALL_OW 255
68173: PUSH
68174: LD_VAR 0 1
68178: PUSH
68179: LD_VAR 0 2
68183: PUSH
68184: LD_VAR 0 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: PPUSH
68195: CALL_OW 1
68199: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68200: CALL 68209 0 0
// end ;
68204: LD_VAR 0 4
68208: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68209: LD_INT 0
68211: PPUSH
68212: PPUSH
68213: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68214: LD_STRING resetFactoryWaypoint();
68216: PPUSH
68217: CALL_OW 559
// if factoryWaypoints then
68221: LD_EXP 101
68225: IFFALSE 68351
// begin list := PrepareArray ( factoryWaypoints ) ;
68227: LD_ADDR_VAR 0 3
68231: PUSH
68232: LD_EXP 101
68236: PPUSH
68237: CALL 44379 0 1
68241: ST_TO_ADDR
// for i := 1 to list do
68242: LD_ADDR_VAR 0 2
68246: PUSH
68247: DOUBLE
68248: LD_INT 1
68250: DEC
68251: ST_TO_ADDR
68252: LD_VAR 0 3
68256: PUSH
68257: FOR_TO
68258: IFFALSE 68349
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68260: LD_STRING setFactoryWaypointXY(
68262: PUSH
68263: LD_VAR 0 3
68267: PUSH
68268: LD_VAR 0 2
68272: ARRAY
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: STR
68278: PUSH
68279: LD_STRING ,
68281: STR
68282: PUSH
68283: LD_VAR 0 3
68287: PUSH
68288: LD_VAR 0 2
68292: ARRAY
68293: PUSH
68294: LD_INT 2
68296: ARRAY
68297: STR
68298: PUSH
68299: LD_STRING ,
68301: STR
68302: PUSH
68303: LD_VAR 0 3
68307: PUSH
68308: LD_VAR 0 2
68312: ARRAY
68313: PUSH
68314: LD_INT 3
68316: ARRAY
68317: STR
68318: PUSH
68319: LD_STRING ,
68321: STR
68322: PUSH
68323: LD_VAR 0 3
68327: PUSH
68328: LD_VAR 0 2
68332: ARRAY
68333: PUSH
68334: LD_INT 4
68336: ARRAY
68337: STR
68338: PUSH
68339: LD_STRING )
68341: STR
68342: PPUSH
68343: CALL_OW 559
68347: GO 68257
68349: POP
68350: POP
// end ; end ;
68351: LD_VAR 0 1
68355: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68356: LD_INT 0
68358: PPUSH
// if HexInfo ( x , y ) = warehouse then
68359: LD_VAR 0 2
68363: PPUSH
68364: LD_VAR 0 3
68368: PPUSH
68369: CALL_OW 428
68373: PUSH
68374: LD_VAR 0 1
68378: EQUAL
68379: IFFALSE 68406
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68381: LD_ADDR_EXP 102
68385: PUSH
68386: LD_EXP 102
68390: PPUSH
68391: LD_VAR 0 1
68395: PPUSH
68396: LD_INT 0
68398: PPUSH
68399: CALL_OW 1
68403: ST_TO_ADDR
68404: GO 68457
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68406: LD_ADDR_EXP 102
68410: PUSH
68411: LD_EXP 102
68415: PPUSH
68416: LD_VAR 0 1
68420: PPUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: CALL_OW 255
68430: PUSH
68431: LD_VAR 0 1
68435: PUSH
68436: LD_VAR 0 2
68440: PUSH
68441: LD_VAR 0 3
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: PPUSH
68452: CALL_OW 1
68456: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68457: CALL 68466 0 0
// end ;
68461: LD_VAR 0 4
68465: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68466: LD_INT 0
68468: PPUSH
68469: PPUSH
68470: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68471: LD_STRING resetWarehouseGatheringPoints();
68473: PPUSH
68474: CALL_OW 559
// if warehouseGatheringPoints then
68478: LD_EXP 102
68482: IFFALSE 68608
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68484: LD_ADDR_VAR 0 3
68488: PUSH
68489: LD_EXP 102
68493: PPUSH
68494: CALL 44379 0 1
68498: ST_TO_ADDR
// for i := 1 to list do
68499: LD_ADDR_VAR 0 2
68503: PUSH
68504: DOUBLE
68505: LD_INT 1
68507: DEC
68508: ST_TO_ADDR
68509: LD_VAR 0 3
68513: PUSH
68514: FOR_TO
68515: IFFALSE 68606
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68517: LD_STRING setWarehouseGatheringPointXY(
68519: PUSH
68520: LD_VAR 0 3
68524: PUSH
68525: LD_VAR 0 2
68529: ARRAY
68530: PUSH
68531: LD_INT 1
68533: ARRAY
68534: STR
68535: PUSH
68536: LD_STRING ,
68538: STR
68539: PUSH
68540: LD_VAR 0 3
68544: PUSH
68545: LD_VAR 0 2
68549: ARRAY
68550: PUSH
68551: LD_INT 2
68553: ARRAY
68554: STR
68555: PUSH
68556: LD_STRING ,
68558: STR
68559: PUSH
68560: LD_VAR 0 3
68564: PUSH
68565: LD_VAR 0 2
68569: ARRAY
68570: PUSH
68571: LD_INT 3
68573: ARRAY
68574: STR
68575: PUSH
68576: LD_STRING ,
68578: STR
68579: PUSH
68580: LD_VAR 0 3
68584: PUSH
68585: LD_VAR 0 2
68589: ARRAY
68590: PUSH
68591: LD_INT 4
68593: ARRAY
68594: STR
68595: PUSH
68596: LD_STRING )
68598: STR
68599: PPUSH
68600: CALL_OW 559
68604: GO 68514
68606: POP
68607: POP
// end ; end ;
68608: LD_VAR 0 1
68612: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68613: LD_EXP 102
68617: IFFALSE 69302
68619: GO 68621
68621: DISABLE
68622: LD_INT 0
68624: PPUSH
68625: PPUSH
68626: PPUSH
68627: PPUSH
68628: PPUSH
68629: PPUSH
68630: PPUSH
68631: PPUSH
68632: PPUSH
// begin enable ;
68633: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68634: LD_ADDR_VAR 0 3
68638: PUSH
68639: LD_EXP 102
68643: PPUSH
68644: CALL 44379 0 1
68648: ST_TO_ADDR
// if not list then
68649: LD_VAR 0 3
68653: NOT
68654: IFFALSE 68658
// exit ;
68656: GO 69302
// for i := 1 to list do
68658: LD_ADDR_VAR 0 1
68662: PUSH
68663: DOUBLE
68664: LD_INT 1
68666: DEC
68667: ST_TO_ADDR
68668: LD_VAR 0 3
68672: PUSH
68673: FOR_TO
68674: IFFALSE 69300
// begin depot := list [ i ] [ 2 ] ;
68676: LD_ADDR_VAR 0 8
68680: PUSH
68681: LD_VAR 0 3
68685: PUSH
68686: LD_VAR 0 1
68690: ARRAY
68691: PUSH
68692: LD_INT 2
68694: ARRAY
68695: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: LD_VAR 0 3
68705: PUSH
68706: LD_VAR 0 1
68710: ARRAY
68711: PUSH
68712: LD_INT 1
68714: ARRAY
68715: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68716: LD_VAR 0 8
68720: PPUSH
68721: CALL_OW 301
68725: PUSH
68726: LD_VAR 0 5
68730: PUSH
68731: LD_VAR 0 8
68735: PPUSH
68736: CALL_OW 255
68740: NONEQUAL
68741: OR
68742: IFFALSE 68771
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68744: LD_ADDR_EXP 102
68748: PUSH
68749: LD_EXP 102
68753: PPUSH
68754: LD_VAR 0 8
68758: PPUSH
68759: LD_INT 0
68761: PPUSH
68762: CALL_OW 1
68766: ST_TO_ADDR
// exit ;
68767: POP
68768: POP
68769: GO 69302
// end ; x := list [ i ] [ 3 ] ;
68771: LD_ADDR_VAR 0 6
68775: PUSH
68776: LD_VAR 0 3
68780: PUSH
68781: LD_VAR 0 1
68785: ARRAY
68786: PUSH
68787: LD_INT 3
68789: ARRAY
68790: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68791: LD_ADDR_VAR 0 7
68795: PUSH
68796: LD_VAR 0 3
68800: PUSH
68801: LD_VAR 0 1
68805: ARRAY
68806: PUSH
68807: LD_INT 4
68809: ARRAY
68810: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68811: LD_ADDR_VAR 0 9
68815: PUSH
68816: LD_VAR 0 6
68820: PPUSH
68821: LD_VAR 0 7
68825: PPUSH
68826: LD_INT 16
68828: PPUSH
68829: CALL 42963 0 3
68833: ST_TO_ADDR
// if not cratesNearbyPoint then
68834: LD_VAR 0 9
68838: NOT
68839: IFFALSE 68845
// exit ;
68841: POP
68842: POP
68843: GO 69302
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68845: LD_ADDR_VAR 0 4
68849: PUSH
68850: LD_INT 22
68852: PUSH
68853: LD_VAR 0 5
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: LD_INT 60
68867: PUSH
68868: EMPTY
68869: LIST
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 91
68877: PUSH
68878: LD_VAR 0 8
68882: PUSH
68883: LD_INT 6
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: LD_INT 25
68896: PUSH
68897: LD_INT 2
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 25
68906: PUSH
68907: LD_INT 16
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: PPUSH
68925: CALL_OW 69
68929: PUSH
68930: LD_VAR 0 8
68934: PPUSH
68935: CALL_OW 313
68939: PPUSH
68940: LD_INT 3
68942: PUSH
68943: LD_INT 60
68945: PUSH
68946: EMPTY
68947: LIST
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: PUSH
68956: LD_INT 25
68958: PUSH
68959: LD_INT 2
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 25
68968: PUSH
68969: LD_INT 16
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PPUSH
68985: CALL_OW 72
68989: UNION
68990: ST_TO_ADDR
// if tmp then
68991: LD_VAR 0 4
68995: IFFALSE 69075
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68997: LD_ADDR_VAR 0 4
69001: PUSH
69002: LD_VAR 0 4
69006: PPUSH
69007: LD_INT 3
69009: PPUSH
69010: CALL 40932 0 2
69014: ST_TO_ADDR
// for j in tmp do
69015: LD_ADDR_VAR 0 2
69019: PUSH
69020: LD_VAR 0 4
69024: PUSH
69025: FOR_IN
69026: IFFALSE 69069
// begin if IsInUnit ( j ) then
69028: LD_VAR 0 2
69032: PPUSH
69033: CALL_OW 310
69037: IFFALSE 69048
// ComExit ( j ) ;
69039: LD_VAR 0 2
69043: PPUSH
69044: CALL 41015 0 1
// AddComCollect ( j , x , y ) ;
69048: LD_VAR 0 2
69052: PPUSH
69053: LD_VAR 0 6
69057: PPUSH
69058: LD_VAR 0 7
69062: PPUSH
69063: CALL_OW 177
// end ;
69067: GO 69025
69069: POP
69070: POP
// exit ;
69071: POP
69072: POP
69073: GO 69302
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69075: LD_ADDR_VAR 0 4
69079: PUSH
69080: LD_INT 22
69082: PUSH
69083: LD_VAR 0 5
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 91
69094: PUSH
69095: LD_VAR 0 8
69099: PUSH
69100: LD_INT 8
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: LD_INT 34
69113: PUSH
69114: LD_INT 12
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 34
69123: PUSH
69124: LD_INT 51
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 34
69133: PUSH
69134: LD_INT 32
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 34
69143: PUSH
69144: LD_INT 89
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: PPUSH
69163: CALL_OW 69
69167: ST_TO_ADDR
// if tmp then
69168: LD_VAR 0 4
69172: IFFALSE 69298
// begin for j in tmp do
69174: LD_ADDR_VAR 0 2
69178: PUSH
69179: LD_VAR 0 4
69183: PUSH
69184: FOR_IN
69185: IFFALSE 69296
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69187: LD_VAR 0 2
69191: PPUSH
69192: CALL_OW 262
69196: PUSH
69197: LD_INT 3
69199: EQUAL
69200: PUSH
69201: LD_VAR 0 2
69205: PPUSH
69206: CALL_OW 261
69210: PUSH
69211: LD_INT 20
69213: GREATER
69214: OR
69215: PUSH
69216: LD_VAR 0 2
69220: PPUSH
69221: CALL_OW 314
69225: NOT
69226: AND
69227: PUSH
69228: LD_VAR 0 2
69232: PPUSH
69233: CALL_OW 263
69237: PUSH
69238: LD_INT 1
69240: NONEQUAL
69241: PUSH
69242: LD_VAR 0 2
69246: PPUSH
69247: CALL_OW 311
69251: OR
69252: AND
69253: IFFALSE 69294
// begin ComCollect ( j , x , y ) ;
69255: LD_VAR 0 2
69259: PPUSH
69260: LD_VAR 0 6
69264: PPUSH
69265: LD_VAR 0 7
69269: PPUSH
69270: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69274: LD_VAR 0 2
69278: PPUSH
69279: LD_VAR 0 8
69283: PPUSH
69284: CALL_OW 172
// exit ;
69288: POP
69289: POP
69290: POP
69291: POP
69292: GO 69302
// end ;
69294: GO 69184
69296: POP
69297: POP
// end ; end ;
69298: GO 68673
69300: POP
69301: POP
// end ; end_of_file
69302: PPOPN 9
69304: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69305: LD_VAR 0 1
69309: PUSH
69310: LD_INT 200
69312: DOUBLE
69313: GREATEREQUAL
69314: IFFALSE 69322
69316: LD_INT 299
69318: DOUBLE
69319: LESSEQUAL
69320: IFTRUE 69324
69322: GO 69356
69324: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69325: LD_VAR 0 1
69329: PPUSH
69330: LD_VAR 0 2
69334: PPUSH
69335: LD_VAR 0 3
69339: PPUSH
69340: LD_VAR 0 4
69344: PPUSH
69345: LD_VAR 0 5
69349: PPUSH
69350: CALL 70010 0 5
69354: GO 69433
69356: LD_INT 300
69358: DOUBLE
69359: GREATEREQUAL
69360: IFFALSE 69368
69362: LD_INT 399
69364: DOUBLE
69365: LESSEQUAL
69366: IFTRUE 69370
69368: GO 69432
69370: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69371: LD_VAR 0 1
69375: PPUSH
69376: LD_VAR 0 2
69380: PPUSH
69381: LD_VAR 0 3
69385: PPUSH
69386: LD_VAR 0 4
69390: PPUSH
69391: LD_VAR 0 5
69395: PPUSH
69396: LD_VAR 0 6
69400: PPUSH
69401: LD_VAR 0 7
69405: PPUSH
69406: LD_VAR 0 8
69410: PPUSH
69411: LD_VAR 0 9
69415: PPUSH
69416: LD_VAR 0 10
69420: PPUSH
69421: LD_VAR 0 11
69425: PPUSH
69426: CALL 66006 0 11
69430: GO 69433
69432: POP
// end ;
69433: PPOPN 11
69435: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69436: LD_VAR 0 1
69440: PPUSH
69441: LD_VAR 0 2
69445: PPUSH
69446: LD_VAR 0 3
69450: PPUSH
69451: LD_VAR 0 4
69455: PPUSH
69456: LD_VAR 0 5
69460: PPUSH
69461: CALL 69518 0 5
// end ; end_of_file
69465: PPOPN 5
69467: END
// export function SOS_UnitDestroyed ( un ) ; begin
69468: LD_INT 0
69470: PPUSH
// ComRadiation ( un ) ;
69471: LD_VAR 0 1
69475: PPUSH
69476: CALL 70414 0 1
// end ;
69480: LD_VAR 0 2
69484: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69485: LD_INT 0
69487: PPUSH
// ComRadiation ( un ) ;
69488: LD_VAR 0 1
69492: PPUSH
69493: CALL 70414 0 1
// end ;
69497: LD_VAR 0 2
69501: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69502: LD_INT 0
69504: PPUSH
// end ;
69505: LD_VAR 0 4
69509: RET
// export function SOS_Command ( cmd ) ; begin
69510: LD_INT 0
69512: PPUSH
// end ;
69513: LD_VAR 0 2
69517: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69518: LD_INT 0
69520: PPUSH
// end ;
69521: LD_VAR 0 6
69525: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69526: LD_INT 0
69528: PPUSH
69529: PPUSH
69530: PPUSH
69531: PPUSH
// if not vehicle or not factory then
69532: LD_VAR 0 1
69536: NOT
69537: PUSH
69538: LD_VAR 0 2
69542: NOT
69543: OR
69544: IFFALSE 69548
// exit ;
69546: GO 70005
// if factoryWaypoints >= factory then
69548: LD_EXP 101
69552: PUSH
69553: LD_VAR 0 2
69557: GREATEREQUAL
69558: IFFALSE 70005
// if factoryWaypoints [ factory ] then
69560: LD_EXP 101
69564: PUSH
69565: LD_VAR 0 2
69569: ARRAY
69570: IFFALSE 70005
// begin if GetControl ( vehicle ) = control_manual then
69572: LD_VAR 0 1
69576: PPUSH
69577: CALL_OW 263
69581: PUSH
69582: LD_INT 1
69584: EQUAL
69585: IFFALSE 69892
// begin driver := IsDrivenBy ( vehicle ) ;
69587: LD_ADDR_VAR 0 5
69591: PUSH
69592: LD_VAR 0 1
69596: PPUSH
69597: CALL_OW 311
69601: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69602: LD_ADDR_VAR 0 4
69606: PUSH
69607: LD_VAR 0 5
69611: PPUSH
69612: CALL_OW 110
69616: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69617: LD_VAR 0 4
69621: PUSH
69622: LD_INT 501
69624: EQUAL
69625: PUSH
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL_OW 110
69635: PUSH
69636: LD_INT 501
69638: EQUAL
69639: OR
69640: IFFALSE 69644
// exit ;
69642: GO 70005
// if not HasTask ( driver ) then
69644: LD_VAR 0 5
69648: PPUSH
69649: CALL_OW 314
69653: NOT
69654: IFFALSE 69890
// begin SetTag ( driver , tDriver ) ;
69656: LD_VAR 0 5
69660: PPUSH
69661: LD_INT 501
69663: PPUSH
69664: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69668: LD_VAR 0 1
69672: PPUSH
69673: LD_INT 501
69675: PPUSH
69676: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69680: LD_ADDR_VAR 0 6
69684: PUSH
69685: LD_EXP 101
69689: PUSH
69690: LD_VAR 0 2
69694: ARRAY
69695: PUSH
69696: LD_INT 3
69698: ARRAY
69699: PPUSH
69700: LD_EXP 101
69704: PUSH
69705: LD_VAR 0 2
69709: ARRAY
69710: PUSH
69711: LD_INT 4
69713: ARRAY
69714: PPUSH
69715: CALL_OW 428
69719: ST_TO_ADDR
// if hex then
69720: LD_VAR 0 6
69724: IFFALSE 69742
// ComMoveUnit ( driver , hex ) else
69726: LD_VAR 0 5
69730: PPUSH
69731: LD_VAR 0 6
69735: PPUSH
69736: CALL_OW 112
69740: GO 69781
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69742: LD_VAR 0 5
69746: PPUSH
69747: LD_EXP 101
69751: PUSH
69752: LD_VAR 0 2
69756: ARRAY
69757: PUSH
69758: LD_INT 3
69760: ARRAY
69761: PPUSH
69762: LD_EXP 101
69766: PUSH
69767: LD_VAR 0 2
69771: ARRAY
69772: PUSH
69773: LD_INT 4
69775: ARRAY
69776: PPUSH
69777: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69781: LD_VAR 0 5
69785: PPUSH
69786: CALL_OW 181
// if Multiplayer then
69790: LD_OWVAR 4
69794: IFFALSE 69843
// begin repeat wait ( 10 ) ;
69796: LD_INT 10
69798: PPUSH
69799: CALL_OW 67
// until not IsInUnit ( driver ) ;
69803: LD_VAR 0 5
69807: PPUSH
69808: CALL_OW 310
69812: NOT
69813: IFFALSE 69796
// if not HasTask ( driver ) then
69815: LD_VAR 0 5
69819: PPUSH
69820: CALL_OW 314
69824: NOT
69825: IFFALSE 69841
// ComEnterUnit ( driver , factory ) ;
69827: LD_VAR 0 5
69831: PPUSH
69832: LD_VAR 0 2
69836: PPUSH
69837: CALL_OW 120
// end else
69841: GO 69857
// AddComEnterUnit ( driver , factory ) ;
69843: LD_VAR 0 5
69847: PPUSH
69848: LD_VAR 0 2
69852: PPUSH
69853: CALL_OW 180
// wait ( 0 0$1 ) ;
69857: LD_INT 35
69859: PPUSH
69860: CALL_OW 67
// SetTag ( driver , tag ) ;
69864: LD_VAR 0 5
69868: PPUSH
69869: LD_VAR 0 4
69873: PPUSH
69874: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69878: LD_VAR 0 1
69882: PPUSH
69883: LD_INT 0
69885: PPUSH
69886: CALL_OW 109
// end ; end else
69890: GO 70005
// if GetControl ( vehicle ) = control_remote then
69892: LD_VAR 0 1
69896: PPUSH
69897: CALL_OW 263
69901: PUSH
69902: LD_INT 2
69904: EQUAL
69905: IFFALSE 69966
// begin wait ( 0 0$2 ) ;
69907: LD_INT 70
69909: PPUSH
69910: CALL_OW 67
// if Connect ( vehicle ) then
69914: LD_VAR 0 1
69918: PPUSH
69919: CALL 11234 0 1
69923: IFFALSE 69964
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_EXP 101
69934: PUSH
69935: LD_VAR 0 2
69939: ARRAY
69940: PUSH
69941: LD_INT 3
69943: ARRAY
69944: PPUSH
69945: LD_EXP 101
69949: PUSH
69950: LD_VAR 0 2
69954: ARRAY
69955: PUSH
69956: LD_INT 4
69958: ARRAY
69959: PPUSH
69960: CALL_OW 171
// end else
69964: GO 70005
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69966: LD_VAR 0 1
69970: PPUSH
69971: LD_EXP 101
69975: PUSH
69976: LD_VAR 0 2
69980: ARRAY
69981: PUSH
69982: LD_INT 3
69984: ARRAY
69985: PPUSH
69986: LD_EXP 101
69990: PUSH
69991: LD_VAR 0 2
69995: ARRAY
69996: PUSH
69997: LD_INT 4
69999: ARRAY
70000: PPUSH
70001: CALL_OW 171
// end ; end ;
70005: LD_VAR 0 3
70009: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
70010: LD_INT 0
70012: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
70013: LD_VAR 0 1
70017: PUSH
70018: LD_INT 250
70020: EQUAL
70021: PUSH
70022: LD_VAR 0 2
70026: PPUSH
70027: CALL_OW 264
70031: PUSH
70032: LD_INT 81
70034: EQUAL
70035: AND
70036: IFFALSE 70057
// MinerPlaceMine ( unit , x , y ) ;
70038: LD_VAR 0 2
70042: PPUSH
70043: LD_VAR 0 4
70047: PPUSH
70048: LD_VAR 0 5
70052: PPUSH
70053: CALL 73149 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 251
70064: EQUAL
70065: PUSH
70066: LD_VAR 0 2
70070: PPUSH
70071: CALL_OW 264
70075: PUSH
70076: LD_INT 81
70078: EQUAL
70079: AND
70080: IFFALSE 70101
// MinerDetonateMine ( unit , x , y ) ;
70082: LD_VAR 0 2
70086: PPUSH
70087: LD_VAR 0 4
70091: PPUSH
70092: LD_VAR 0 5
70096: PPUSH
70097: CALL 73424 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
70101: LD_VAR 0 1
70105: PUSH
70106: LD_INT 252
70108: EQUAL
70109: PUSH
70110: LD_VAR 0 2
70114: PPUSH
70115: CALL_OW 264
70119: PUSH
70120: LD_INT 81
70122: EQUAL
70123: AND
70124: IFFALSE 70145
// MinerCreateMinefield ( unit , x , y ) ;
70126: LD_VAR 0 2
70130: PPUSH
70131: LD_VAR 0 4
70135: PPUSH
70136: LD_VAR 0 5
70140: PPUSH
70141: CALL 73841 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
70145: LD_VAR 0 1
70149: PUSH
70150: LD_INT 253
70152: EQUAL
70153: PUSH
70154: LD_VAR 0 2
70158: PPUSH
70159: CALL_OW 257
70163: PUSH
70164: LD_INT 5
70166: EQUAL
70167: AND
70168: IFFALSE 70189
// ComBinocular ( unit , x , y ) ;
70170: LD_VAR 0 2
70174: PPUSH
70175: LD_VAR 0 4
70179: PPUSH
70180: LD_VAR 0 5
70184: PPUSH
70185: CALL 74210 0 3
// if selectedUnit then
70189: LD_VAR 0 3
70193: IFFALSE 70249
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70195: LD_VAR 0 1
70199: PUSH
70200: LD_INT 254
70202: EQUAL
70203: PUSH
70204: LD_VAR 0 2
70208: PPUSH
70209: CALL_OW 264
70213: PUSH
70214: LD_INT 99
70216: EQUAL
70217: AND
70218: PUSH
70219: LD_VAR 0 3
70223: PPUSH
70224: CALL_OW 263
70228: PUSH
70229: LD_INT 3
70231: EQUAL
70232: AND
70233: IFFALSE 70249
// HackDestroyVehicle ( unit , selectedUnit ) ;
70235: LD_VAR 0 2
70239: PPUSH
70240: LD_VAR 0 3
70244: PPUSH
70245: CALL 72513 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70249: LD_VAR 0 1
70253: PUSH
70254: LD_INT 255
70256: EQUAL
70257: PUSH
70258: LD_VAR 0 2
70262: PPUSH
70263: CALL_OW 264
70267: PUSH
70268: LD_INT 14
70270: PUSH
70271: LD_INT 53
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: IN
70278: AND
70279: PUSH
70280: LD_VAR 0 4
70284: PPUSH
70285: LD_VAR 0 5
70289: PPUSH
70290: CALL_OW 488
70294: AND
70295: IFFALSE 70319
// CutTreeXYR ( unit , x , y , 12 ) ;
70297: LD_VAR 0 2
70301: PPUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: LD_VAR 0 5
70311: PPUSH
70312: LD_INT 12
70314: PPUSH
70315: CALL 70510 0 4
// if cmd = 256 then
70319: LD_VAR 0 1
70323: PUSH
70324: LD_INT 256
70326: EQUAL
70327: IFFALSE 70348
// SetFactoryWaypoint ( unit , x , y ) ;
70329: LD_VAR 0 2
70333: PPUSH
70334: LD_VAR 0 4
70338: PPUSH
70339: LD_VAR 0 5
70343: PPUSH
70344: CALL 67994 0 3
// if cmd = 257 then
70348: LD_VAR 0 1
70352: PUSH
70353: LD_INT 257
70355: EQUAL
70356: IFFALSE 70377
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70358: LD_VAR 0 2
70362: PPUSH
70363: LD_VAR 0 4
70367: PPUSH
70368: LD_VAR 0 5
70372: PPUSH
70373: CALL 68356 0 3
// if cmd = 258 then
70377: LD_VAR 0 1
70381: PUSH
70382: LD_INT 258
70384: EQUAL
70385: IFFALSE 70409
// BurnTreeXYR ( unit , x , y , 8 ) ;
70387: LD_VAR 0 2
70391: PPUSH
70392: LD_VAR 0 4
70396: PPUSH
70397: LD_VAR 0 5
70401: PPUSH
70402: LD_INT 8
70404: PPUSH
70405: CALL 70904 0 4
// end ;
70409: LD_VAR 0 6
70413: RET
// export function ComRadiation ( un ) ; var eff ; begin
70414: LD_INT 0
70416: PPUSH
70417: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70418: LD_VAR 0 1
70422: PPUSH
70423: CALL_OW 264
70427: PUSH
70428: LD_INT 91
70430: NONEQUAL
70431: IFFALSE 70435
// exit ;
70433: GO 70505
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70435: LD_INT 68
70437: PPUSH
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 255
70447: PPUSH
70448: CALL_OW 321
70452: PUSH
70453: LD_INT 2
70455: EQUAL
70456: IFFALSE 70468
// eff := 70 else
70458: LD_ADDR_VAR 0 3
70462: PUSH
70463: LD_INT 70
70465: ST_TO_ADDR
70466: GO 70476
// eff := 30 ;
70468: LD_ADDR_VAR 0 3
70472: PUSH
70473: LD_INT 30
70475: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70476: LD_VAR 0 1
70480: PPUSH
70481: CALL_OW 250
70485: PPUSH
70486: LD_VAR 0 1
70490: PPUSH
70491: CALL_OW 251
70495: PPUSH
70496: LD_VAR 0 3
70500: PPUSH
70501: CALL_OW 495
// end ;
70505: LD_VAR 0 2
70509: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70510: LD_INT 0
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
70516: PPUSH
70517: PPUSH
70518: PPUSH
70519: PPUSH
70520: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70521: LD_VAR 0 1
70525: PPUSH
70526: CALL_OW 302
70530: NOT
70531: PUSH
70532: LD_VAR 0 2
70536: PPUSH
70537: LD_VAR 0 3
70541: PPUSH
70542: CALL_OW 488
70546: NOT
70547: OR
70548: PUSH
70549: LD_VAR 0 4
70553: NOT
70554: OR
70555: IFFALSE 70559
// exit ;
70557: GO 70899
// list := [ ] ;
70559: LD_ADDR_VAR 0 13
70563: PUSH
70564: EMPTY
70565: ST_TO_ADDR
// if x - r < 0 then
70566: LD_VAR 0 2
70570: PUSH
70571: LD_VAR 0 4
70575: MINUS
70576: PUSH
70577: LD_INT 0
70579: LESS
70580: IFFALSE 70592
// min_x := 0 else
70582: LD_ADDR_VAR 0 7
70586: PUSH
70587: LD_INT 0
70589: ST_TO_ADDR
70590: GO 70608
// min_x := x - r ;
70592: LD_ADDR_VAR 0 7
70596: PUSH
70597: LD_VAR 0 2
70601: PUSH
70602: LD_VAR 0 4
70606: MINUS
70607: ST_TO_ADDR
// if y - r < 0 then
70608: LD_VAR 0 3
70612: PUSH
70613: LD_VAR 0 4
70617: MINUS
70618: PUSH
70619: LD_INT 0
70621: LESS
70622: IFFALSE 70634
// min_y := 0 else
70624: LD_ADDR_VAR 0 8
70628: PUSH
70629: LD_INT 0
70631: ST_TO_ADDR
70632: GO 70650
// min_y := y - r ;
70634: LD_ADDR_VAR 0 8
70638: PUSH
70639: LD_VAR 0 3
70643: PUSH
70644: LD_VAR 0 4
70648: MINUS
70649: ST_TO_ADDR
// max_x := x + r ;
70650: LD_ADDR_VAR 0 9
70654: PUSH
70655: LD_VAR 0 2
70659: PUSH
70660: LD_VAR 0 4
70664: PLUS
70665: ST_TO_ADDR
// max_y := y + r ;
70666: LD_ADDR_VAR 0 10
70670: PUSH
70671: LD_VAR 0 3
70675: PUSH
70676: LD_VAR 0 4
70680: PLUS
70681: ST_TO_ADDR
// for _x = min_x to max_x do
70682: LD_ADDR_VAR 0 11
70686: PUSH
70687: DOUBLE
70688: LD_VAR 0 7
70692: DEC
70693: ST_TO_ADDR
70694: LD_VAR 0 9
70698: PUSH
70699: FOR_TO
70700: IFFALSE 70817
// for _y = min_y to max_y do
70702: LD_ADDR_VAR 0 12
70706: PUSH
70707: DOUBLE
70708: LD_VAR 0 8
70712: DEC
70713: ST_TO_ADDR
70714: LD_VAR 0 10
70718: PUSH
70719: FOR_TO
70720: IFFALSE 70813
// begin if not ValidHex ( _x , _y ) then
70722: LD_VAR 0 11
70726: PPUSH
70727: LD_VAR 0 12
70731: PPUSH
70732: CALL_OW 488
70736: NOT
70737: IFFALSE 70741
// continue ;
70739: GO 70719
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70741: LD_VAR 0 11
70745: PPUSH
70746: LD_VAR 0 12
70750: PPUSH
70751: CALL_OW 351
70755: PUSH
70756: LD_VAR 0 11
70760: PPUSH
70761: LD_VAR 0 12
70765: PPUSH
70766: CALL_OW 554
70770: AND
70771: IFFALSE 70811
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70773: LD_ADDR_VAR 0 13
70777: PUSH
70778: LD_VAR 0 13
70782: PPUSH
70783: LD_VAR 0 13
70787: PUSH
70788: LD_INT 1
70790: PLUS
70791: PPUSH
70792: LD_VAR 0 11
70796: PUSH
70797: LD_VAR 0 12
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PPUSH
70806: CALL_OW 2
70810: ST_TO_ADDR
// end ;
70811: GO 70719
70813: POP
70814: POP
70815: GO 70699
70817: POP
70818: POP
// if not list then
70819: LD_VAR 0 13
70823: NOT
70824: IFFALSE 70828
// exit ;
70826: GO 70899
// for i in list do
70828: LD_ADDR_VAR 0 6
70832: PUSH
70833: LD_VAR 0 13
70837: PUSH
70838: FOR_IN
70839: IFFALSE 70897
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70841: LD_VAR 0 1
70845: PPUSH
70846: LD_STRING M
70848: PUSH
70849: LD_VAR 0 6
70853: PUSH
70854: LD_INT 1
70856: ARRAY
70857: PUSH
70858: LD_VAR 0 6
70862: PUSH
70863: LD_INT 2
70865: ARRAY
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: LD_INT 0
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: PPUSH
70891: CALL_OW 447
70895: GO 70838
70897: POP
70898: POP
// end ;
70899: LD_VAR 0 5
70903: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70904: LD_INT 0
70906: PPUSH
70907: PPUSH
70908: PPUSH
70909: PPUSH
70910: PPUSH
70911: PPUSH
70912: PPUSH
70913: PPUSH
70914: PPUSH
70915: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70916: LD_VAR 0 1
70920: PPUSH
70921: CALL_OW 302
70925: NOT
70926: PUSH
70927: LD_VAR 0 2
70931: PPUSH
70932: LD_VAR 0 3
70936: PPUSH
70937: CALL_OW 488
70941: NOT
70942: OR
70943: PUSH
70944: LD_VAR 0 4
70948: NOT
70949: OR
70950: IFFALSE 70954
// exit ;
70952: GO 71467
// list := [ ] ;
70954: LD_ADDR_VAR 0 13
70958: PUSH
70959: EMPTY
70960: ST_TO_ADDR
// if x - r < 0 then
70961: LD_VAR 0 2
70965: PUSH
70966: LD_VAR 0 4
70970: MINUS
70971: PUSH
70972: LD_INT 0
70974: LESS
70975: IFFALSE 70987
// min_x := 0 else
70977: LD_ADDR_VAR 0 7
70981: PUSH
70982: LD_INT 0
70984: ST_TO_ADDR
70985: GO 71003
// min_x := x - r ;
70987: LD_ADDR_VAR 0 7
70991: PUSH
70992: LD_VAR 0 2
70996: PUSH
70997: LD_VAR 0 4
71001: MINUS
71002: ST_TO_ADDR
// if y - r < 0 then
71003: LD_VAR 0 3
71007: PUSH
71008: LD_VAR 0 4
71012: MINUS
71013: PUSH
71014: LD_INT 0
71016: LESS
71017: IFFALSE 71029
// min_y := 0 else
71019: LD_ADDR_VAR 0 8
71023: PUSH
71024: LD_INT 0
71026: ST_TO_ADDR
71027: GO 71045
// min_y := y - r ;
71029: LD_ADDR_VAR 0 8
71033: PUSH
71034: LD_VAR 0 3
71038: PUSH
71039: LD_VAR 0 4
71043: MINUS
71044: ST_TO_ADDR
// max_x := x + r ;
71045: LD_ADDR_VAR 0 9
71049: PUSH
71050: LD_VAR 0 2
71054: PUSH
71055: LD_VAR 0 4
71059: PLUS
71060: ST_TO_ADDR
// max_y := y + r ;
71061: LD_ADDR_VAR 0 10
71065: PUSH
71066: LD_VAR 0 3
71070: PUSH
71071: LD_VAR 0 4
71075: PLUS
71076: ST_TO_ADDR
// for _x = min_x to max_x do
71077: LD_ADDR_VAR 0 11
71081: PUSH
71082: DOUBLE
71083: LD_VAR 0 7
71087: DEC
71088: ST_TO_ADDR
71089: LD_VAR 0 9
71093: PUSH
71094: FOR_TO
71095: IFFALSE 71212
// for _y = min_y to max_y do
71097: LD_ADDR_VAR 0 12
71101: PUSH
71102: DOUBLE
71103: LD_VAR 0 8
71107: DEC
71108: ST_TO_ADDR
71109: LD_VAR 0 10
71113: PUSH
71114: FOR_TO
71115: IFFALSE 71208
// begin if not ValidHex ( _x , _y ) then
71117: LD_VAR 0 11
71121: PPUSH
71122: LD_VAR 0 12
71126: PPUSH
71127: CALL_OW 488
71131: NOT
71132: IFFALSE 71136
// continue ;
71134: GO 71114
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71136: LD_VAR 0 11
71140: PPUSH
71141: LD_VAR 0 12
71145: PPUSH
71146: CALL_OW 351
71150: PUSH
71151: LD_VAR 0 11
71155: PPUSH
71156: LD_VAR 0 12
71160: PPUSH
71161: CALL_OW 554
71165: AND
71166: IFFALSE 71206
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71168: LD_ADDR_VAR 0 13
71172: PUSH
71173: LD_VAR 0 13
71177: PPUSH
71178: LD_VAR 0 13
71182: PUSH
71183: LD_INT 1
71185: PLUS
71186: PPUSH
71187: LD_VAR 0 11
71191: PUSH
71192: LD_VAR 0 12
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PPUSH
71201: CALL_OW 2
71205: ST_TO_ADDR
// end ;
71206: GO 71114
71208: POP
71209: POP
71210: GO 71094
71212: POP
71213: POP
// if not list then
71214: LD_VAR 0 13
71218: NOT
71219: IFFALSE 71223
// exit ;
71221: GO 71467
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71223: LD_ADDR_VAR 0 13
71227: PUSH
71228: LD_VAR 0 1
71232: PPUSH
71233: LD_VAR 0 13
71237: PPUSH
71238: LD_INT 1
71240: PPUSH
71241: LD_INT 1
71243: PPUSH
71244: CALL 8376 0 4
71248: ST_TO_ADDR
// ComStop ( flame ) ;
71249: LD_VAR 0 1
71253: PPUSH
71254: CALL_OW 141
// for i in list do
71258: LD_ADDR_VAR 0 6
71262: PUSH
71263: LD_VAR 0 13
71267: PUSH
71268: FOR_IN
71269: IFFALSE 71300
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71271: LD_VAR 0 1
71275: PPUSH
71276: LD_VAR 0 6
71280: PUSH
71281: LD_INT 1
71283: ARRAY
71284: PPUSH
71285: LD_VAR 0 6
71289: PUSH
71290: LD_INT 2
71292: ARRAY
71293: PPUSH
71294: CALL_OW 176
71298: GO 71268
71300: POP
71301: POP
// repeat wait ( 0 0$1 ) ;
71302: LD_INT 35
71304: PPUSH
71305: CALL_OW 67
// task := GetTaskList ( flame ) ;
71309: LD_ADDR_VAR 0 14
71313: PUSH
71314: LD_VAR 0 1
71318: PPUSH
71319: CALL_OW 437
71323: ST_TO_ADDR
// if not task then
71324: LD_VAR 0 14
71328: NOT
71329: IFFALSE 71333
// exit ;
71331: GO 71467
// if task [ 1 ] [ 1 ] <> | then
71333: LD_VAR 0 14
71337: PUSH
71338: LD_INT 1
71340: ARRAY
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: PUSH
71346: LD_STRING |
71348: NONEQUAL
71349: IFFALSE 71353
// exit ;
71351: GO 71467
// _x := task [ 1 ] [ 2 ] ;
71353: LD_ADDR_VAR 0 11
71357: PUSH
71358: LD_VAR 0 14
71362: PUSH
71363: LD_INT 1
71365: ARRAY
71366: PUSH
71367: LD_INT 2
71369: ARRAY
71370: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71371: LD_ADDR_VAR 0 12
71375: PUSH
71376: LD_VAR 0 14
71380: PUSH
71381: LD_INT 1
71383: ARRAY
71384: PUSH
71385: LD_INT 3
71387: ARRAY
71388: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71389: LD_VAR 0 11
71393: PPUSH
71394: LD_VAR 0 12
71398: PPUSH
71399: CALL_OW 351
71403: NOT
71404: PUSH
71405: LD_VAR 0 11
71409: PPUSH
71410: LD_VAR 0 12
71414: PPUSH
71415: CALL_OW 554
71419: NOT
71420: OR
71421: IFFALSE 71455
// begin task := Delete ( task , 1 ) ;
71423: LD_ADDR_VAR 0 14
71427: PUSH
71428: LD_VAR 0 14
71432: PPUSH
71433: LD_INT 1
71435: PPUSH
71436: CALL_OW 3
71440: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71441: LD_VAR 0 1
71445: PPUSH
71446: LD_VAR 0 14
71450: PPUSH
71451: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71455: LD_VAR 0 1
71459: PPUSH
71460: CALL_OW 314
71464: NOT
71465: IFFALSE 71302
// end ;
71467: LD_VAR 0 5
71471: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71472: LD_EXP 104
71476: NOT
71477: IFFALSE 71527
71479: GO 71481
71481: DISABLE
// begin initHack := true ;
71482: LD_ADDR_EXP 104
71486: PUSH
71487: LD_INT 1
71489: ST_TO_ADDR
// hackTanks := [ ] ;
71490: LD_ADDR_EXP 105
71494: PUSH
71495: EMPTY
71496: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71497: LD_ADDR_EXP 106
71501: PUSH
71502: EMPTY
71503: ST_TO_ADDR
// hackLimit := 3 ;
71504: LD_ADDR_EXP 107
71508: PUSH
71509: LD_INT 3
71511: ST_TO_ADDR
// hackDist := 12 ;
71512: LD_ADDR_EXP 108
71516: PUSH
71517: LD_INT 12
71519: ST_TO_ADDR
// hackCounter := [ ] ;
71520: LD_ADDR_EXP 109
71524: PUSH
71525: EMPTY
71526: ST_TO_ADDR
// end ;
71527: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71528: LD_EXP 104
71532: PUSH
71533: LD_INT 34
71535: PUSH
71536: LD_INT 99
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PPUSH
71543: CALL_OW 69
71547: AND
71548: IFFALSE 71801
71550: GO 71552
71552: DISABLE
71553: LD_INT 0
71555: PPUSH
71556: PPUSH
// begin enable ;
71557: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71558: LD_ADDR_VAR 0 1
71562: PUSH
71563: LD_INT 34
71565: PUSH
71566: LD_INT 99
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PPUSH
71573: CALL_OW 69
71577: PUSH
71578: FOR_IN
71579: IFFALSE 71799
// begin if not i in hackTanks then
71581: LD_VAR 0 1
71585: PUSH
71586: LD_EXP 105
71590: IN
71591: NOT
71592: IFFALSE 71675
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71594: LD_ADDR_EXP 105
71598: PUSH
71599: LD_EXP 105
71603: PPUSH
71604: LD_EXP 105
71608: PUSH
71609: LD_INT 1
71611: PLUS
71612: PPUSH
71613: LD_VAR 0 1
71617: PPUSH
71618: CALL_OW 1
71622: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71623: LD_ADDR_EXP 106
71627: PUSH
71628: LD_EXP 106
71632: PPUSH
71633: LD_EXP 106
71637: PUSH
71638: LD_INT 1
71640: PLUS
71641: PPUSH
71642: EMPTY
71643: PPUSH
71644: CALL_OW 1
71648: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71649: LD_ADDR_EXP 109
71653: PUSH
71654: LD_EXP 109
71658: PPUSH
71659: LD_EXP 109
71663: PUSH
71664: LD_INT 1
71666: PLUS
71667: PPUSH
71668: EMPTY
71669: PPUSH
71670: CALL_OW 1
71674: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71675: LD_VAR 0 1
71679: PPUSH
71680: CALL_OW 302
71684: NOT
71685: IFFALSE 71698
// begin HackUnlinkAll ( i ) ;
71687: LD_VAR 0 1
71691: PPUSH
71692: CALL 71804 0 1
// continue ;
71696: GO 71578
// end ; HackCheckCapturedStatus ( i ) ;
71698: LD_VAR 0 1
71702: PPUSH
71703: CALL 72247 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71707: LD_ADDR_VAR 0 2
71711: PUSH
71712: LD_INT 81
71714: PUSH
71715: LD_VAR 0 1
71719: PPUSH
71720: CALL_OW 255
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 33
71731: PUSH
71732: LD_INT 3
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 91
71741: PUSH
71742: LD_VAR 0 1
71746: PUSH
71747: LD_EXP 108
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 50
71759: PUSH
71760: EMPTY
71761: LIST
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: PPUSH
71769: CALL_OW 69
71773: ST_TO_ADDR
// if not tmp then
71774: LD_VAR 0 2
71778: NOT
71779: IFFALSE 71783
// continue ;
71781: GO 71578
// HackLink ( i , tmp ) ;
71783: LD_VAR 0 1
71787: PPUSH
71788: LD_VAR 0 2
71792: PPUSH
71793: CALL 71940 0 2
// end ;
71797: GO 71578
71799: POP
71800: POP
// end ;
71801: PPOPN 2
71803: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71804: LD_INT 0
71806: PPUSH
71807: PPUSH
71808: PPUSH
// if not hack in hackTanks then
71809: LD_VAR 0 1
71813: PUSH
71814: LD_EXP 105
71818: IN
71819: NOT
71820: IFFALSE 71824
// exit ;
71822: GO 71935
// index := GetElementIndex ( hackTanks , hack ) ;
71824: LD_ADDR_VAR 0 4
71828: PUSH
71829: LD_EXP 105
71833: PPUSH
71834: LD_VAR 0 1
71838: PPUSH
71839: CALL 7673 0 2
71843: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71844: LD_EXP 106
71848: PUSH
71849: LD_VAR 0 4
71853: ARRAY
71854: IFFALSE 71935
// begin for i in hackTanksCaptured [ index ] do
71856: LD_ADDR_VAR 0 3
71860: PUSH
71861: LD_EXP 106
71865: PUSH
71866: LD_VAR 0 4
71870: ARRAY
71871: PUSH
71872: FOR_IN
71873: IFFALSE 71899
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71875: LD_VAR 0 3
71879: PUSH
71880: LD_INT 1
71882: ARRAY
71883: PPUSH
71884: LD_VAR 0 3
71888: PUSH
71889: LD_INT 2
71891: ARRAY
71892: PPUSH
71893: CALL_OW 235
71897: GO 71872
71899: POP
71900: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71901: LD_ADDR_EXP 106
71905: PUSH
71906: LD_EXP 106
71910: PPUSH
71911: LD_VAR 0 4
71915: PPUSH
71916: EMPTY
71917: PPUSH
71918: CALL_OW 1
71922: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71923: LD_VAR 0 1
71927: PPUSH
71928: LD_INT 0
71930: PPUSH
71931: CALL_OW 505
// end ; end ;
71935: LD_VAR 0 2
71939: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71940: LD_INT 0
71942: PPUSH
71943: PPUSH
71944: PPUSH
// if not hack in hackTanks or not vehicles then
71945: LD_VAR 0 1
71949: PUSH
71950: LD_EXP 105
71954: IN
71955: NOT
71956: PUSH
71957: LD_VAR 0 2
71961: NOT
71962: OR
71963: IFFALSE 71967
// exit ;
71965: GO 72242
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71967: LD_ADDR_VAR 0 2
71971: PUSH
71972: LD_VAR 0 1
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: LD_INT 1
71984: PPUSH
71985: LD_INT 1
71987: PPUSH
71988: CALL 8323 0 4
71992: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71993: LD_ADDR_VAR 0 5
71997: PUSH
71998: LD_EXP 105
72002: PPUSH
72003: LD_VAR 0 1
72007: PPUSH
72008: CALL 7673 0 2
72012: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
72013: LD_EXP 106
72017: PUSH
72018: LD_VAR 0 5
72022: ARRAY
72023: PUSH
72024: LD_EXP 107
72028: LESS
72029: IFFALSE 72218
// begin for i := 1 to vehicles do
72031: LD_ADDR_VAR 0 4
72035: PUSH
72036: DOUBLE
72037: LD_INT 1
72039: DEC
72040: ST_TO_ADDR
72041: LD_VAR 0 2
72045: PUSH
72046: FOR_TO
72047: IFFALSE 72216
// begin if hackTanksCaptured [ index ] = hackLimit then
72049: LD_EXP 106
72053: PUSH
72054: LD_VAR 0 5
72058: ARRAY
72059: PUSH
72060: LD_EXP 107
72064: EQUAL
72065: IFFALSE 72069
// break ;
72067: GO 72216
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
72069: LD_ADDR_EXP 109
72073: PUSH
72074: LD_EXP 109
72078: PPUSH
72079: LD_VAR 0 5
72083: PPUSH
72084: LD_EXP 109
72088: PUSH
72089: LD_VAR 0 5
72093: ARRAY
72094: PUSH
72095: LD_INT 1
72097: PLUS
72098: PPUSH
72099: CALL_OW 1
72103: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
72104: LD_ADDR_EXP 106
72108: PUSH
72109: LD_EXP 106
72113: PPUSH
72114: LD_VAR 0 5
72118: PUSH
72119: LD_EXP 106
72123: PUSH
72124: LD_VAR 0 5
72128: ARRAY
72129: PUSH
72130: LD_INT 1
72132: PLUS
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PPUSH
72138: LD_VAR 0 2
72142: PUSH
72143: LD_VAR 0 4
72147: ARRAY
72148: PUSH
72149: LD_VAR 0 2
72153: PUSH
72154: LD_VAR 0 4
72158: ARRAY
72159: PPUSH
72160: CALL_OW 255
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PPUSH
72169: CALL 7888 0 3
72173: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72174: LD_VAR 0 2
72178: PUSH
72179: LD_VAR 0 4
72183: ARRAY
72184: PPUSH
72185: LD_VAR 0 1
72189: PPUSH
72190: CALL_OW 255
72194: PPUSH
72195: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72199: LD_VAR 0 2
72203: PUSH
72204: LD_VAR 0 4
72208: ARRAY
72209: PPUSH
72210: CALL_OW 141
// end ;
72214: GO 72046
72216: POP
72217: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72218: LD_VAR 0 1
72222: PPUSH
72223: LD_EXP 106
72227: PUSH
72228: LD_VAR 0 5
72232: ARRAY
72233: PUSH
72234: LD_INT 0
72236: PLUS
72237: PPUSH
72238: CALL_OW 505
// end ;
72242: LD_VAR 0 3
72246: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72247: LD_INT 0
72249: PPUSH
72250: PPUSH
72251: PPUSH
72252: PPUSH
// if not hack in hackTanks then
72253: LD_VAR 0 1
72257: PUSH
72258: LD_EXP 105
72262: IN
72263: NOT
72264: IFFALSE 72268
// exit ;
72266: GO 72508
// index := GetElementIndex ( hackTanks , hack ) ;
72268: LD_ADDR_VAR 0 4
72272: PUSH
72273: LD_EXP 105
72277: PPUSH
72278: LD_VAR 0 1
72282: PPUSH
72283: CALL 7673 0 2
72287: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72288: LD_ADDR_VAR 0 3
72292: PUSH
72293: DOUBLE
72294: LD_EXP 106
72298: PUSH
72299: LD_VAR 0 4
72303: ARRAY
72304: INC
72305: ST_TO_ADDR
72306: LD_INT 1
72308: PUSH
72309: FOR_DOWNTO
72310: IFFALSE 72482
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72312: LD_ADDR_VAR 0 5
72316: PUSH
72317: LD_EXP 106
72321: PUSH
72322: LD_VAR 0 4
72326: ARRAY
72327: PUSH
72328: LD_VAR 0 3
72332: ARRAY
72333: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72334: LD_VAR 0 5
72338: PUSH
72339: LD_INT 1
72341: ARRAY
72342: PPUSH
72343: CALL_OW 302
72347: NOT
72348: PUSH
72349: LD_VAR 0 5
72353: PUSH
72354: LD_INT 1
72356: ARRAY
72357: PPUSH
72358: CALL_OW 255
72362: PUSH
72363: LD_VAR 0 1
72367: PPUSH
72368: CALL_OW 255
72372: NONEQUAL
72373: OR
72374: IFFALSE 72480
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72376: LD_VAR 0 5
72380: PUSH
72381: LD_INT 1
72383: ARRAY
72384: PPUSH
72385: CALL_OW 305
72389: PUSH
72390: LD_VAR 0 5
72394: PUSH
72395: LD_INT 1
72397: ARRAY
72398: PPUSH
72399: CALL_OW 255
72403: PUSH
72404: LD_VAR 0 1
72408: PPUSH
72409: CALL_OW 255
72413: EQUAL
72414: AND
72415: IFFALSE 72439
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72417: LD_VAR 0 5
72421: PUSH
72422: LD_INT 1
72424: ARRAY
72425: PPUSH
72426: LD_VAR 0 5
72430: PUSH
72431: LD_INT 2
72433: ARRAY
72434: PPUSH
72435: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72439: LD_ADDR_EXP 106
72443: PUSH
72444: LD_EXP 106
72448: PPUSH
72449: LD_VAR 0 4
72453: PPUSH
72454: LD_EXP 106
72458: PUSH
72459: LD_VAR 0 4
72463: ARRAY
72464: PPUSH
72465: LD_VAR 0 3
72469: PPUSH
72470: CALL_OW 3
72474: PPUSH
72475: CALL_OW 1
72479: ST_TO_ADDR
// end ; end ;
72480: GO 72309
72482: POP
72483: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72484: LD_VAR 0 1
72488: PPUSH
72489: LD_EXP 106
72493: PUSH
72494: LD_VAR 0 4
72498: ARRAY
72499: PUSH
72500: LD_INT 0
72502: PLUS
72503: PPUSH
72504: CALL_OW 505
// end ;
72508: LD_VAR 0 2
72512: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72513: LD_INT 0
72515: PPUSH
72516: PPUSH
72517: PPUSH
72518: PPUSH
// if not hack in hackTanks then
72519: LD_VAR 0 1
72523: PUSH
72524: LD_EXP 105
72528: IN
72529: NOT
72530: IFFALSE 72534
// exit ;
72532: GO 72619
// index := GetElementIndex ( hackTanks , hack ) ;
72534: LD_ADDR_VAR 0 5
72538: PUSH
72539: LD_EXP 105
72543: PPUSH
72544: LD_VAR 0 1
72548: PPUSH
72549: CALL 7673 0 2
72553: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72554: LD_ADDR_VAR 0 4
72558: PUSH
72559: DOUBLE
72560: LD_INT 1
72562: DEC
72563: ST_TO_ADDR
72564: LD_EXP 106
72568: PUSH
72569: LD_VAR 0 5
72573: ARRAY
72574: PUSH
72575: FOR_TO
72576: IFFALSE 72617
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72578: LD_EXP 106
72582: PUSH
72583: LD_VAR 0 5
72587: ARRAY
72588: PUSH
72589: LD_VAR 0 4
72593: ARRAY
72594: PUSH
72595: LD_INT 1
72597: ARRAY
72598: PUSH
72599: LD_VAR 0 2
72603: EQUAL
72604: IFFALSE 72615
// KillUnit ( vehicle ) ;
72606: LD_VAR 0 2
72610: PPUSH
72611: CALL_OW 66
72615: GO 72575
72617: POP
72618: POP
// end ;
72619: LD_VAR 0 3
72623: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72624: LD_EXP 110
72628: NOT
72629: IFFALSE 72664
72631: GO 72633
72633: DISABLE
// begin initMiner := true ;
72634: LD_ADDR_EXP 110
72638: PUSH
72639: LD_INT 1
72641: ST_TO_ADDR
// minersList := [ ] ;
72642: LD_ADDR_EXP 111
72646: PUSH
72647: EMPTY
72648: ST_TO_ADDR
// minerMinesList := [ ] ;
72649: LD_ADDR_EXP 112
72653: PUSH
72654: EMPTY
72655: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72656: LD_ADDR_EXP 113
72660: PUSH
72661: LD_INT 5
72663: ST_TO_ADDR
// end ;
72664: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72665: LD_EXP 110
72669: PUSH
72670: LD_INT 34
72672: PUSH
72673: LD_INT 81
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PPUSH
72680: CALL_OW 69
72684: AND
72685: IFFALSE 73146
72687: GO 72689
72689: DISABLE
72690: LD_INT 0
72692: PPUSH
72693: PPUSH
72694: PPUSH
72695: PPUSH
// begin enable ;
72696: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72697: LD_ADDR_VAR 0 1
72701: PUSH
72702: LD_INT 34
72704: PUSH
72705: LD_INT 81
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PPUSH
72712: CALL_OW 69
72716: PUSH
72717: FOR_IN
72718: IFFALSE 72790
// begin if not i in minersList then
72720: LD_VAR 0 1
72724: PUSH
72725: LD_EXP 111
72729: IN
72730: NOT
72731: IFFALSE 72788
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72733: LD_ADDR_EXP 111
72737: PUSH
72738: LD_EXP 111
72742: PPUSH
72743: LD_EXP 111
72747: PUSH
72748: LD_INT 1
72750: PLUS
72751: PPUSH
72752: LD_VAR 0 1
72756: PPUSH
72757: CALL_OW 1
72761: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72762: LD_ADDR_EXP 112
72766: PUSH
72767: LD_EXP 112
72771: PPUSH
72772: LD_EXP 112
72776: PUSH
72777: LD_INT 1
72779: PLUS
72780: PPUSH
72781: EMPTY
72782: PPUSH
72783: CALL_OW 1
72787: ST_TO_ADDR
// end end ;
72788: GO 72717
72790: POP
72791: POP
// for i := minerMinesList downto 1 do
72792: LD_ADDR_VAR 0 1
72796: PUSH
72797: DOUBLE
72798: LD_EXP 112
72802: INC
72803: ST_TO_ADDR
72804: LD_INT 1
72806: PUSH
72807: FOR_DOWNTO
72808: IFFALSE 73144
// begin if IsLive ( minersList [ i ] ) then
72810: LD_EXP 111
72814: PUSH
72815: LD_VAR 0 1
72819: ARRAY
72820: PPUSH
72821: CALL_OW 300
72825: IFFALSE 72853
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72827: LD_EXP 111
72831: PUSH
72832: LD_VAR 0 1
72836: ARRAY
72837: PPUSH
72838: LD_EXP 112
72842: PUSH
72843: LD_VAR 0 1
72847: ARRAY
72848: PPUSH
72849: CALL_OW 505
// if not minerMinesList [ i ] then
72853: LD_EXP 112
72857: PUSH
72858: LD_VAR 0 1
72862: ARRAY
72863: NOT
72864: IFFALSE 72868
// continue ;
72866: GO 72807
// for j := minerMinesList [ i ] downto 1 do
72868: LD_ADDR_VAR 0 2
72872: PUSH
72873: DOUBLE
72874: LD_EXP 112
72878: PUSH
72879: LD_VAR 0 1
72883: ARRAY
72884: INC
72885: ST_TO_ADDR
72886: LD_INT 1
72888: PUSH
72889: FOR_DOWNTO
72890: IFFALSE 73140
// begin side := GetSide ( minersList [ i ] ) ;
72892: LD_ADDR_VAR 0 3
72896: PUSH
72897: LD_EXP 111
72901: PUSH
72902: LD_VAR 0 1
72906: ARRAY
72907: PPUSH
72908: CALL_OW 255
72912: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72913: LD_ADDR_VAR 0 4
72917: PUSH
72918: LD_EXP 112
72922: PUSH
72923: LD_VAR 0 1
72927: ARRAY
72928: PUSH
72929: LD_VAR 0 2
72933: ARRAY
72934: PUSH
72935: LD_INT 1
72937: ARRAY
72938: PPUSH
72939: LD_EXP 112
72943: PUSH
72944: LD_VAR 0 1
72948: ARRAY
72949: PUSH
72950: LD_VAR 0 2
72954: ARRAY
72955: PUSH
72956: LD_INT 2
72958: ARRAY
72959: PPUSH
72960: CALL_OW 428
72964: ST_TO_ADDR
// if not tmp then
72965: LD_VAR 0 4
72969: NOT
72970: IFFALSE 72974
// continue ;
72972: GO 72889
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72974: LD_VAR 0 4
72978: PUSH
72979: LD_INT 81
72981: PUSH
72982: LD_VAR 0 3
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PPUSH
72991: CALL_OW 69
72995: IN
72996: PUSH
72997: LD_EXP 112
73001: PUSH
73002: LD_VAR 0 1
73006: ARRAY
73007: PUSH
73008: LD_VAR 0 2
73012: ARRAY
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PPUSH
73018: LD_EXP 112
73022: PUSH
73023: LD_VAR 0 1
73027: ARRAY
73028: PUSH
73029: LD_VAR 0 2
73033: ARRAY
73034: PUSH
73035: LD_INT 2
73037: ARRAY
73038: PPUSH
73039: CALL_OW 458
73043: AND
73044: IFFALSE 73138
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
73046: LD_EXP 112
73050: PUSH
73051: LD_VAR 0 1
73055: ARRAY
73056: PUSH
73057: LD_VAR 0 2
73061: ARRAY
73062: PUSH
73063: LD_INT 1
73065: ARRAY
73066: PPUSH
73067: LD_EXP 112
73071: PUSH
73072: LD_VAR 0 1
73076: ARRAY
73077: PUSH
73078: LD_VAR 0 2
73082: ARRAY
73083: PUSH
73084: LD_INT 2
73086: ARRAY
73087: PPUSH
73088: LD_VAR 0 3
73092: PPUSH
73093: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
73097: LD_ADDR_EXP 112
73101: PUSH
73102: LD_EXP 112
73106: PPUSH
73107: LD_VAR 0 1
73111: PPUSH
73112: LD_EXP 112
73116: PUSH
73117: LD_VAR 0 1
73121: ARRAY
73122: PPUSH
73123: LD_VAR 0 2
73127: PPUSH
73128: CALL_OW 3
73132: PPUSH
73133: CALL_OW 1
73137: ST_TO_ADDR
// end ; end ;
73138: GO 72889
73140: POP
73141: POP
// end ;
73142: GO 72807
73144: POP
73145: POP
// end ;
73146: PPOPN 4
73148: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73149: LD_INT 0
73151: PPUSH
73152: PPUSH
// result := false ;
73153: LD_ADDR_VAR 0 4
73157: PUSH
73158: LD_INT 0
73160: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73161: LD_VAR 0 1
73165: PPUSH
73166: CALL_OW 264
73170: PUSH
73171: LD_INT 81
73173: EQUAL
73174: NOT
73175: IFFALSE 73179
// exit ;
73177: GO 73419
// index := GetElementIndex ( minersList , unit ) ;
73179: LD_ADDR_VAR 0 5
73183: PUSH
73184: LD_EXP 111
73188: PPUSH
73189: LD_VAR 0 1
73193: PPUSH
73194: CALL 7673 0 2
73198: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73199: LD_EXP 112
73203: PUSH
73204: LD_VAR 0 5
73208: ARRAY
73209: PUSH
73210: LD_EXP 113
73214: GREATEREQUAL
73215: IFFALSE 73219
// exit ;
73217: GO 73419
// ComMoveXY ( unit , x , y ) ;
73219: LD_VAR 0 1
73223: PPUSH
73224: LD_VAR 0 2
73228: PPUSH
73229: LD_VAR 0 3
73233: PPUSH
73234: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73238: LD_INT 35
73240: PPUSH
73241: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73245: LD_VAR 0 1
73249: PPUSH
73250: LD_VAR 0 2
73254: PPUSH
73255: LD_VAR 0 3
73259: PPUSH
73260: CALL 39414 0 3
73264: NOT
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: CALL_OW 314
73275: AND
73276: IFFALSE 73280
// exit ;
73278: GO 73419
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73280: LD_VAR 0 2
73284: PPUSH
73285: LD_VAR 0 3
73289: PPUSH
73290: CALL_OW 428
73294: PUSH
73295: LD_VAR 0 1
73299: EQUAL
73300: PUSH
73301: LD_VAR 0 1
73305: PPUSH
73306: CALL_OW 314
73310: NOT
73311: AND
73312: IFFALSE 73238
// PlaySoundXY ( x , y , PlantMine ) ;
73314: LD_VAR 0 2
73318: PPUSH
73319: LD_VAR 0 3
73323: PPUSH
73324: LD_STRING PlantMine
73326: PPUSH
73327: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73331: LD_VAR 0 2
73335: PPUSH
73336: LD_VAR 0 3
73340: PPUSH
73341: LD_VAR 0 1
73345: PPUSH
73346: CALL_OW 255
73350: PPUSH
73351: LD_INT 0
73353: PPUSH
73354: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73358: LD_ADDR_EXP 112
73362: PUSH
73363: LD_EXP 112
73367: PPUSH
73368: LD_VAR 0 5
73372: PUSH
73373: LD_EXP 112
73377: PUSH
73378: LD_VAR 0 5
73382: ARRAY
73383: PUSH
73384: LD_INT 1
73386: PLUS
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PPUSH
73392: LD_VAR 0 2
73396: PUSH
73397: LD_VAR 0 3
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PPUSH
73406: CALL 7888 0 3
73410: ST_TO_ADDR
// result := true ;
73411: LD_ADDR_VAR 0 4
73415: PUSH
73416: LD_INT 1
73418: ST_TO_ADDR
// end ;
73419: LD_VAR 0 4
73423: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73424: LD_INT 0
73426: PPUSH
73427: PPUSH
73428: PPUSH
// if not unit in minersList then
73429: LD_VAR 0 1
73433: PUSH
73434: LD_EXP 111
73438: IN
73439: NOT
73440: IFFALSE 73444
// exit ;
73442: GO 73836
// index := GetElementIndex ( minersList , unit ) ;
73444: LD_ADDR_VAR 0 6
73448: PUSH
73449: LD_EXP 111
73453: PPUSH
73454: LD_VAR 0 1
73458: PPUSH
73459: CALL 7673 0 2
73463: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73464: LD_ADDR_VAR 0 5
73468: PUSH
73469: DOUBLE
73470: LD_EXP 112
73474: PUSH
73475: LD_VAR 0 6
73479: ARRAY
73480: INC
73481: ST_TO_ADDR
73482: LD_INT 1
73484: PUSH
73485: FOR_DOWNTO
73486: IFFALSE 73647
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73488: LD_EXP 112
73492: PUSH
73493: LD_VAR 0 6
73497: ARRAY
73498: PUSH
73499: LD_VAR 0 5
73503: ARRAY
73504: PUSH
73505: LD_INT 1
73507: ARRAY
73508: PUSH
73509: LD_VAR 0 2
73513: EQUAL
73514: PUSH
73515: LD_EXP 112
73519: PUSH
73520: LD_VAR 0 6
73524: ARRAY
73525: PUSH
73526: LD_VAR 0 5
73530: ARRAY
73531: PUSH
73532: LD_INT 2
73534: ARRAY
73535: PUSH
73536: LD_VAR 0 3
73540: EQUAL
73541: AND
73542: IFFALSE 73645
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73544: LD_EXP 112
73548: PUSH
73549: LD_VAR 0 6
73553: ARRAY
73554: PUSH
73555: LD_VAR 0 5
73559: ARRAY
73560: PUSH
73561: LD_INT 1
73563: ARRAY
73564: PPUSH
73565: LD_EXP 112
73569: PUSH
73570: LD_VAR 0 6
73574: ARRAY
73575: PUSH
73576: LD_VAR 0 5
73580: ARRAY
73581: PUSH
73582: LD_INT 2
73584: ARRAY
73585: PPUSH
73586: LD_VAR 0 1
73590: PPUSH
73591: CALL_OW 255
73595: PPUSH
73596: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73600: LD_ADDR_EXP 112
73604: PUSH
73605: LD_EXP 112
73609: PPUSH
73610: LD_VAR 0 6
73614: PPUSH
73615: LD_EXP 112
73619: PUSH
73620: LD_VAR 0 6
73624: ARRAY
73625: PPUSH
73626: LD_VAR 0 5
73630: PPUSH
73631: CALL_OW 3
73635: PPUSH
73636: CALL_OW 1
73640: ST_TO_ADDR
// exit ;
73641: POP
73642: POP
73643: GO 73836
// end ; end ;
73645: GO 73485
73647: POP
73648: POP
// for i := minerMinesList [ index ] downto 1 do
73649: LD_ADDR_VAR 0 5
73653: PUSH
73654: DOUBLE
73655: LD_EXP 112
73659: PUSH
73660: LD_VAR 0 6
73664: ARRAY
73665: INC
73666: ST_TO_ADDR
73667: LD_INT 1
73669: PUSH
73670: FOR_DOWNTO
73671: IFFALSE 73834
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73673: LD_EXP 112
73677: PUSH
73678: LD_VAR 0 6
73682: ARRAY
73683: PUSH
73684: LD_VAR 0 5
73688: ARRAY
73689: PUSH
73690: LD_INT 1
73692: ARRAY
73693: PPUSH
73694: LD_EXP 112
73698: PUSH
73699: LD_VAR 0 6
73703: ARRAY
73704: PUSH
73705: LD_VAR 0 5
73709: ARRAY
73710: PUSH
73711: LD_INT 2
73713: ARRAY
73714: PPUSH
73715: LD_VAR 0 2
73719: PPUSH
73720: LD_VAR 0 3
73724: PPUSH
73725: CALL_OW 298
73729: PUSH
73730: LD_INT 6
73732: LESS
73733: IFFALSE 73832
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73735: LD_EXP 112
73739: PUSH
73740: LD_VAR 0 6
73744: ARRAY
73745: PUSH
73746: LD_VAR 0 5
73750: ARRAY
73751: PUSH
73752: LD_INT 1
73754: ARRAY
73755: PPUSH
73756: LD_EXP 112
73760: PUSH
73761: LD_VAR 0 6
73765: ARRAY
73766: PUSH
73767: LD_VAR 0 5
73771: ARRAY
73772: PUSH
73773: LD_INT 2
73775: ARRAY
73776: PPUSH
73777: LD_VAR 0 1
73781: PPUSH
73782: CALL_OW 255
73786: PPUSH
73787: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73791: LD_ADDR_EXP 112
73795: PUSH
73796: LD_EXP 112
73800: PPUSH
73801: LD_VAR 0 6
73805: PPUSH
73806: LD_EXP 112
73810: PUSH
73811: LD_VAR 0 6
73815: ARRAY
73816: PPUSH
73817: LD_VAR 0 5
73821: PPUSH
73822: CALL_OW 3
73826: PPUSH
73827: CALL_OW 1
73831: ST_TO_ADDR
// end ; end ;
73832: GO 73670
73834: POP
73835: POP
// end ;
73836: LD_VAR 0 4
73840: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73841: LD_INT 0
73843: PPUSH
73844: PPUSH
73845: PPUSH
73846: PPUSH
73847: PPUSH
73848: PPUSH
73849: PPUSH
73850: PPUSH
73851: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73852: LD_VAR 0 1
73856: PPUSH
73857: CALL_OW 264
73861: PUSH
73862: LD_INT 81
73864: EQUAL
73865: NOT
73866: PUSH
73867: LD_VAR 0 1
73871: PUSH
73872: LD_EXP 111
73876: IN
73877: NOT
73878: OR
73879: IFFALSE 73883
// exit ;
73881: GO 74205
// index := GetElementIndex ( minersList , unit ) ;
73883: LD_ADDR_VAR 0 6
73887: PUSH
73888: LD_EXP 111
73892: PPUSH
73893: LD_VAR 0 1
73897: PPUSH
73898: CALL 7673 0 2
73902: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73903: LD_ADDR_VAR 0 8
73907: PUSH
73908: LD_EXP 113
73912: PUSH
73913: LD_EXP 112
73917: PUSH
73918: LD_VAR 0 6
73922: ARRAY
73923: MINUS
73924: ST_TO_ADDR
// if not minesFreeAmount then
73925: LD_VAR 0 8
73929: NOT
73930: IFFALSE 73934
// exit ;
73932: GO 74205
// tmp := [ ] ;
73934: LD_ADDR_VAR 0 7
73938: PUSH
73939: EMPTY
73940: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73941: LD_ADDR_VAR 0 5
73945: PUSH
73946: DOUBLE
73947: LD_INT 1
73949: DEC
73950: ST_TO_ADDR
73951: LD_VAR 0 8
73955: PUSH
73956: FOR_TO
73957: IFFALSE 74152
// begin _d := rand ( 0 , 5 ) ;
73959: LD_ADDR_VAR 0 11
73963: PUSH
73964: LD_INT 0
73966: PPUSH
73967: LD_INT 5
73969: PPUSH
73970: CALL_OW 12
73974: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73975: LD_ADDR_VAR 0 12
73979: PUSH
73980: LD_INT 2
73982: PPUSH
73983: LD_INT 6
73985: PPUSH
73986: CALL_OW 12
73990: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73991: LD_ADDR_VAR 0 9
73995: PUSH
73996: LD_VAR 0 2
74000: PPUSH
74001: LD_VAR 0 11
74005: PPUSH
74006: LD_VAR 0 12
74010: PPUSH
74011: CALL_OW 272
74015: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
74016: LD_ADDR_VAR 0 10
74020: PUSH
74021: LD_VAR 0 3
74025: PPUSH
74026: LD_VAR 0 11
74030: PPUSH
74031: LD_VAR 0 12
74035: PPUSH
74036: CALL_OW 273
74040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
74041: LD_VAR 0 9
74045: PPUSH
74046: LD_VAR 0 10
74050: PPUSH
74051: CALL_OW 488
74055: PUSH
74056: LD_VAR 0 9
74060: PUSH
74061: LD_VAR 0 10
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_VAR 0 7
74074: IN
74075: NOT
74076: AND
74077: PUSH
74078: LD_VAR 0 9
74082: PPUSH
74083: LD_VAR 0 10
74087: PPUSH
74088: CALL_OW 458
74092: NOT
74093: AND
74094: IFFALSE 74136
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
74096: LD_ADDR_VAR 0 7
74100: PUSH
74101: LD_VAR 0 7
74105: PPUSH
74106: LD_VAR 0 7
74110: PUSH
74111: LD_INT 1
74113: PLUS
74114: PPUSH
74115: LD_VAR 0 9
74119: PUSH
74120: LD_VAR 0 10
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PPUSH
74129: CALL_OW 1
74133: ST_TO_ADDR
74134: GO 74150
// i := i - 1 ;
74136: LD_ADDR_VAR 0 5
74140: PUSH
74141: LD_VAR 0 5
74145: PUSH
74146: LD_INT 1
74148: MINUS
74149: ST_TO_ADDR
// end ;
74150: GO 73956
74152: POP
74153: POP
// for i in tmp do
74154: LD_ADDR_VAR 0 5
74158: PUSH
74159: LD_VAR 0 7
74163: PUSH
74164: FOR_IN
74165: IFFALSE 74203
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74167: LD_VAR 0 1
74171: PPUSH
74172: LD_VAR 0 5
74176: PUSH
74177: LD_INT 1
74179: ARRAY
74180: PPUSH
74181: LD_VAR 0 5
74185: PUSH
74186: LD_INT 2
74188: ARRAY
74189: PPUSH
74190: CALL 73149 0 3
74194: NOT
74195: IFFALSE 74201
// exit ;
74197: POP
74198: POP
74199: GO 74205
74201: GO 74164
74203: POP
74204: POP
// end ;
74205: LD_VAR 0 4
74209: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74210: LD_INT 0
74212: PPUSH
74213: PPUSH
74214: PPUSH
74215: PPUSH
74216: PPUSH
74217: PPUSH
74218: PPUSH
74219: PPUSH
74220: PPUSH
// if GetClass ( unit ) <> class_sniper then
74221: LD_VAR 0 1
74225: PPUSH
74226: CALL_OW 257
74230: PUSH
74231: LD_INT 5
74233: NONEQUAL
74234: IFFALSE 74238
// exit ;
74236: GO 74704
// dist := 8 ;
74238: LD_ADDR_VAR 0 5
74242: PUSH
74243: LD_INT 8
74245: ST_TO_ADDR
// viewRange := 12 ;
74246: LD_ADDR_VAR 0 8
74250: PUSH
74251: LD_INT 12
74253: ST_TO_ADDR
// side := GetSide ( unit ) ;
74254: LD_ADDR_VAR 0 6
74258: PUSH
74259: LD_VAR 0 1
74263: PPUSH
74264: CALL_OW 255
74268: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74269: LD_INT 61
74271: PPUSH
74272: LD_VAR 0 6
74276: PPUSH
74277: CALL_OW 321
74281: PUSH
74282: LD_INT 2
74284: EQUAL
74285: IFFALSE 74295
// viewRange := 16 ;
74287: LD_ADDR_VAR 0 8
74291: PUSH
74292: LD_INT 16
74294: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74295: LD_VAR 0 1
74299: PPUSH
74300: LD_VAR 0 2
74304: PPUSH
74305: LD_VAR 0 3
74309: PPUSH
74310: CALL_OW 297
74314: PUSH
74315: LD_VAR 0 5
74319: GREATER
74320: IFFALSE 74399
// begin ComMoveXY ( unit , x , y ) ;
74322: LD_VAR 0 1
74326: PPUSH
74327: LD_VAR 0 2
74331: PPUSH
74332: LD_VAR 0 3
74336: PPUSH
74337: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74341: LD_INT 35
74343: PPUSH
74344: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74348: LD_VAR 0 1
74352: PPUSH
74353: LD_VAR 0 2
74357: PPUSH
74358: LD_VAR 0 3
74362: PPUSH
74363: CALL 39414 0 3
74367: NOT
74368: IFFALSE 74372
// exit ;
74370: GO 74704
// until GetDistUnitXY ( unit , x , y ) < dist ;
74372: LD_VAR 0 1
74376: PPUSH
74377: LD_VAR 0 2
74381: PPUSH
74382: LD_VAR 0 3
74386: PPUSH
74387: CALL_OW 297
74391: PUSH
74392: LD_VAR 0 5
74396: LESS
74397: IFFALSE 74341
// end ; ComTurnXY ( unit , x , y ) ;
74399: LD_VAR 0 1
74403: PPUSH
74404: LD_VAR 0 2
74408: PPUSH
74409: LD_VAR 0 3
74413: PPUSH
74414: CALL_OW 118
// repeat if Multiplayer then
74418: LD_OWVAR 4
74422: IFFALSE 74433
// wait ( 35 ) else
74424: LD_INT 35
74426: PPUSH
74427: CALL_OW 67
74431: GO 74440
// wait ( 5 ) ;
74433: LD_INT 5
74435: PPUSH
74436: CALL_OW 67
// _d := GetDir ( unit ) ;
74440: LD_ADDR_VAR 0 11
74444: PUSH
74445: LD_VAR 0 1
74449: PPUSH
74450: CALL_OW 254
74454: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74455: LD_ADDR_VAR 0 7
74459: PUSH
74460: LD_VAR 0 1
74464: PPUSH
74465: CALL_OW 250
74469: PPUSH
74470: LD_VAR 0 1
74474: PPUSH
74475: CALL_OW 251
74479: PPUSH
74480: LD_VAR 0 2
74484: PPUSH
74485: LD_VAR 0 3
74489: PPUSH
74490: CALL 42022 0 4
74494: ST_TO_ADDR
// until dir = _d ;
74495: LD_VAR 0 7
74499: PUSH
74500: LD_VAR 0 11
74504: EQUAL
74505: IFFALSE 74418
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74507: LD_ADDR_VAR 0 9
74511: PUSH
74512: LD_VAR 0 1
74516: PPUSH
74517: CALL_OW 250
74521: PPUSH
74522: LD_VAR 0 7
74526: PPUSH
74527: LD_VAR 0 5
74531: PPUSH
74532: CALL_OW 272
74536: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74537: LD_ADDR_VAR 0 10
74541: PUSH
74542: LD_VAR 0 1
74546: PPUSH
74547: CALL_OW 251
74551: PPUSH
74552: LD_VAR 0 7
74556: PPUSH
74557: LD_VAR 0 5
74561: PPUSH
74562: CALL_OW 273
74566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74567: LD_VAR 0 9
74571: PPUSH
74572: LD_VAR 0 10
74576: PPUSH
74577: CALL_OW 488
74581: NOT
74582: IFFALSE 74586
// exit ;
74584: GO 74704
// ComAnimCustom ( unit , 1 ) ;
74586: LD_VAR 0 1
74590: PPUSH
74591: LD_INT 1
74593: PPUSH
74594: CALL_OW 592
// p := 0 ;
74598: LD_ADDR_VAR 0 12
74602: PUSH
74603: LD_INT 0
74605: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74606: LD_VAR 0 9
74610: PPUSH
74611: LD_VAR 0 10
74615: PPUSH
74616: LD_VAR 0 6
74620: PPUSH
74621: LD_VAR 0 8
74625: PPUSH
74626: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74630: LD_INT 35
74632: PPUSH
74633: CALL_OW 67
// p := Inc ( p ) ;
74637: LD_ADDR_VAR 0 12
74641: PUSH
74642: LD_VAR 0 12
74646: PPUSH
74647: CALL 41978 0 1
74651: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74652: LD_VAR 0 12
74656: PUSH
74657: LD_INT 3
74659: EQUAL
74660: PUSH
74661: LD_VAR 0 1
74665: PPUSH
74666: CALL_OW 302
74670: NOT
74671: OR
74672: PUSH
74673: LD_VAR 0 1
74677: PPUSH
74678: CALL_OW 301
74682: OR
74683: IFFALSE 74630
// RemoveSeeing ( _x , _y , side ) ;
74685: LD_VAR 0 9
74689: PPUSH
74690: LD_VAR 0 10
74694: PPUSH
74695: LD_VAR 0 6
74699: PPUSH
74700: CALL_OW 331
// end ;
74704: LD_VAR 0 4
74708: RET
