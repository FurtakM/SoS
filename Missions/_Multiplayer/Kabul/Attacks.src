Every 15$00 trigger IsOk(arDep) and GetSide(arDep) = botSides[1] do
begin

wait(5$00 - (1$00 * Difficulty));

activeArabAttacks := true;
ArabAttack(0);
End;

Every 35$00 trigger IsOk(arDep) and GetSide(arDep) = botSides[1] do
ArabAttack(Difficulty);

Every 55$00 trigger IsOk(arDep) and GetSide(arDep) = botSides[1] do
ArabAttack(Difficulty + 1);

Every 105$00 trigger IsOk(arDep) and GetSide(arDep) = botSides[1] do
ArabAttack(Difficulty + 2);

Every 0$1 trigger FilterUnitsInArea(arBaseOuterArea, [f_enemy, botSides[1]]) do
ArabAttack(Difficulty + 2);

// ARABS ATTACK
Export arAttackersInf, arAttackersVeh;
Export function ArabAttack(v);
var i, skill, un, veh, path, area;
begin
uc_side := botSides[1];
uc_nation := nation_arabian;

skill := [3, 5, 7][Difficulty];
arAttackersInf := [];
arAttackersVeh := [];

path := [ [48, 52], [135, 48] ][v mod 2 + 1];
area := [ [arAttackSpawn2Area, arAttackSpawnArea], [arAttackSpawnE2Area, arAttackSpawnEArea] ][v mod 2 + 1];

InitHC_All();

for i := 1 to [3, 4, 6][Difficulty] + v do
    begin
    PrepareSoldier(false, skill);
    un := CreateHuman;

    if i mod 2 = 0 then
       SetClass(un, class_mortar);

    SetDir(un, 1);

    PlaceUnitArea(un, area[1], false);
    arAttackersInf := Join(arAttackersInf, un);

    ComAgressiveMove(un, path[1], path[2]);
    end;

for i := 1 to 3 + v do
    begin
    PrepareMechanic(false, skill);
    un := CreateHuman;
    SetTag(un, 999);

    PrepareVehicle(ar_half_tracked, engine_combustion, control_manual, [ar_gun, ar_gatling_gun, ar_rocket_launcher, ar_flame_thrower][i mod 4 + 1], 80);
    veh := CreateVehicle;

    SetDir(veh, 1);
    PlaceUnitArea(veh, area[2], false);
    PlaceHumanInUnit(un, veh);

    ComMoveXY(un, path[1], path[2]);

    arAttackersVeh := Join(arAttackersVeh, veh);

    wait(0$2);
    end;

wait(0$2);

for i := 1 to [1, 2, 2][Difficulty] do
    begin
    PrepareVehicle(ar_half_tracked, engine_combustion, control_apeman, ar_selfpropelled_bomb, 80);
    veh := CreateVehicle;

    SetDir(veh, 1);
    PlaceUnitArea(veh, area[2], false);;

    ComMoveXY(un, path[1], path[2]);

    arAttackersVeh := Join(arAttackersVeh, veh);
    end;
End;

Every 0$2 trigger arAttackersInf do
var i, tmp, nearest, enemy, path;
begin
enable;

for i in FilterAllUnits([f_tag, tMined]) do
    SetTag(i, 0);

tmp := UnitFilter(arAttackersInf, [f_ok]);

arAttackersInf := [];

for i in UnitFilter(tmp, [f_class, class_soldier]) do
    begin
    nearest := NearestUnitToUnit(FilterAllUnits([[f_enemy, botSides[1]], [f_not, [f_tag, tMined]], [f_or, [f_type, unit_vehicle], [f_type, unit_building]]]), i);

    if not nearest then
       break;

    SetTag(nearest, tMined);
    AddComPlaceDelayedCharge(i, 0, 0, nearest);
    end;

tmp := UnitFilter(tmp, [f_ok]);

repeat
 wait(0$2);
 tmp := UnitFilter(tmp, [f_ok]);
 enemy := FilterAllUnits([f_enemy, botSides[1]]);

 for i in tmp do
     if GetClass(i) <> 1 then
        ComAttackUnit(i, NearestUnitToUnit(enemy, i))
     else if not HasTask(i) then
        begin
        nearest := NearestUnitToUnit(UnitFilter(enemy, [[f_not, [f_tag, tMined]], [f_or, [f_type, unit_vehicle], [f_type, unit_building]]]), i);

        if not nearest then
           ComAttackUnit(i, NearestUnitToUnit(enemy, i))
        else
           begin
           SetTag(nearest, tMined);
           ComPlaceDelayedCharge(i, 0, 0, nearest);
           end;
        end;
until not tmp;
End;

Every 0$2 trigger arAttackersVeh do
var i, tmp, path;
begin
enable;

tmp := arAttackersVeh;
arAttackersVeh := [];

path := [
  [ [139, 55], [155,92] ],
  [ [53, 61], [74, 98] ]
];

if GetDistUnitXY(tmp[1], 139, 55) < GetDistUnitXY(tmp[1], 53, 61) then
   path := path[1]
else
   path := path[2];

repeat
 wait(0$2);
 tmp := UnitFilter(tmp, [f_ok]);

 for i in tmp do
     AgressiveMove(i, path)
until not tmp;
End;

Every 1$00 trigger Count(arRVehicles) >= 3 do
var i, tmp;
begin
enable;

tmp := UnitFilter(arRVehicles, [f_linked]);
arRVehicles := arRVehicles diff tmp;

repeat
 wait(0$2);
 tmp := UnitFilter(tmp, [f_ok]);

 for i in tmp do
     AgressiveMove(i, [ [98, 63] ])
until not tmp;
End;


Every 0$1 trigger arVehiclesAtttackers and activeArabAttacks do
var i, mech, enemy;
begin
enable;

if not arVehiclesAtttackers then
   exit;

// tags:
// 0 - idle,
// 1 - go to parking, repair if needed
// 2 - attack

for i in arVehiclesAtttackers do
    begin
    if not IsOk(i) or GetSide(i) <> botSides[1] then
       begin
       arVehiclesAtttackers := arVehiclesAtttackers diff i;
       continue;
       end;

    if GetTag(i) = 300 then
       begin
       if GetFuel(i) < 50 then
          begin
          ComMoveXY(i, 102, 47);

          repeat
           wait(0$1);
          until GetDistUnitXY(i, 102, 47) < 4;

          SetFuel(i, 100);
          end
       else if not IsInArea(i, arParkingArea) then
          ComMoveToArea(i, arParkingArea)
       else
          SetTag(i, 301);
       end;

    if GetTag(i) = 301 then
       begin
       if GetLives(i) < 1000 then
          begin
          if not IsDrivenBy(i) then
             continue;

          mech := IsDrivenBy(i);

          ComExitVehicle(mech);
          AddComRepairVehicle(mech, i);

          repeat
           wait(0$1);
          until GetLives(i) = 1000;

          SetLives(mech, 1000);
          ComEnterUnit(mech, i);
          end
       else if IsDrivenBy(i) then
          SetTag(i, 0);
       end;

    if GetTag(i) < 300 then
       begin
       enemy := FilterUnitsInArea(arBaseArea, [f_enemy, botSides[1]]);

       if GetLives(i) < 650 then
          begin
          ComStop(i);
          SetTag(i, 300);
          continue;
          end;

       if enemy then
          begin
          if not HasTask(i) then
             ComAttackUnit(i, NearestUnitToUnit(enemy, i));
          end
       else if arVehiclesAtttackers then
          begin
          enemy := FilterAllUnits([f_enemy, botSides[1]]);

          if enemy then
             AgressiveMove(i, [ [99,66] ]);
          end;
       end;
    end;
End;

Every 0$2 trigger FilterAllUnits([[f_side, botSides[1]], [f_engine, engine_combustion]]) do
var i;
begin
enable;

for i in FilterAllUnits([[f_side, botSides[1]], [f_engine, engine_combustion]]) do
    if GetFuel(i) < 3 then
       SetFuel(i, 3);
End;
