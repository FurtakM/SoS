// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3614 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$20 , 0 0$15 , 0 0$10 , 0 0$07 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 700
 961: PUSH
 962: LD_INT 525
 964: PUSH
 965: LD_INT 350
 967: PUSH
 968: LD_INT 245
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2122 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3071 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 2 2$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// Wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2119
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2119
// begin Wait ( crates_spawn ) ;
1513: LD_EXP 12
1517: PPUSH
1518: CALL_OW 67
// crates_spawn := crates_spawn + 0 0$2 ;
1522: LD_ADDR_EXP 12
1526: PUSH
1527: LD_EXP 12
1531: PUSH
1532: LD_INT 70
1534: PLUS
1535: ST_TO_ADDR
// if crates_spawn > 2 2$00 then
1536: LD_EXP 12
1540: PUSH
1541: LD_INT 4200
1543: GREATER
1544: IFFALSE 1554
// crates_spawn := 0 0$40 ;
1546: LD_ADDR_EXP 12
1550: PUSH
1551: LD_INT 1400
1553: ST_TO_ADDR
// if cr mod 3 = 0 then
1554: LD_VAR 0 1
1558: PUSH
1559: LD_INT 3
1561: MOD
1562: PUSH
1563: LD_INT 0
1565: EQUAL
1566: IFFALSE 1731
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1568: LD_VAR 0 2
1572: PUSH
1573: LD_VAR 0 1
1577: PUSH
1578: LD_VAR 0 2
1582: MOD
1583: PUSH
1584: LD_INT 1
1586: PLUS
1587: ARRAY
1588: PPUSH
1589: LD_INT 17
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1599: LD_EXP 12
1603: PUSH
1604: LD_INT 2
1606: DIV
1607: PPUSH
1608: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1612: LD_VAR 0 2
1616: PUSH
1617: LD_VAR 0 1
1621: PUSH
1622: LD_VAR 0 2
1626: MOD
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: PPUSH
1633: LD_INT 18
1635: PPUSH
1636: LD_INT 1
1638: PPUSH
1639: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1643: LD_EXP 12
1647: PUSH
1648: LD_INT 2
1650: DIV
1651: PPUSH
1652: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1656: LD_VAR 0 2
1660: PUSH
1661: LD_VAR 0 1
1665: PUSH
1666: LD_VAR 0 2
1670: MOD
1671: PUSH
1672: LD_INT 1
1674: PLUS
1675: ARRAY
1676: PPUSH
1677: LD_INT 19
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1687: LD_EXP 12
1691: PUSH
1692: LD_INT 2
1694: DIV
1695: PPUSH
1696: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1700: LD_VAR 0 2
1704: PUSH
1705: LD_VAR 0 1
1709: PUSH
1710: LD_VAR 0 2
1714: MOD
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: PPUSH
1721: LD_INT 17
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: CALL_OW 55
// end ; if cr mod 3 = 1 then
1731: LD_VAR 0 1
1735: PUSH
1736: LD_INT 3
1738: MOD
1739: PUSH
1740: LD_INT 1
1742: EQUAL
1743: IFFALSE 1908
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1745: LD_VAR 0 2
1749: PUSH
1750: LD_VAR 0 1
1754: PUSH
1755: LD_VAR 0 2
1759: MOD
1760: PUSH
1761: LD_INT 1
1763: PLUS
1764: ARRAY
1765: PPUSH
1766: LD_INT 18
1768: PPUSH
1769: LD_INT 1
1771: PPUSH
1772: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1776: LD_EXP 12
1780: PUSH
1781: LD_INT 2
1783: DIV
1784: PPUSH
1785: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1789: LD_VAR 0 2
1793: PUSH
1794: LD_VAR 0 1
1798: PUSH
1799: LD_VAR 0 2
1803: MOD
1804: PUSH
1805: LD_INT 1
1807: PLUS
1808: ARRAY
1809: PPUSH
1810: LD_INT 17
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1820: LD_EXP 12
1824: PUSH
1825: LD_INT 2
1827: DIV
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 19
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1864: LD_EXP 12
1868: PUSH
1869: LD_INT 2
1871: DIV
1872: PPUSH
1873: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1877: LD_VAR 0 2
1881: PUSH
1882: LD_VAR 0 1
1886: PUSH
1887: LD_VAR 0 2
1891: MOD
1892: PUSH
1893: LD_INT 1
1895: PLUS
1896: ARRAY
1897: PPUSH
1898: LD_INT 18
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL_OW 55
// end ; if cr mod 3 = 2 then
1908: LD_VAR 0 1
1912: PUSH
1913: LD_INT 3
1915: MOD
1916: PUSH
1917: LD_INT 2
1919: EQUAL
1920: IFFALSE 2085
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1922: LD_VAR 0 2
1926: PUSH
1927: LD_VAR 0 1
1931: PUSH
1932: LD_VAR 0 2
1936: MOD
1937: PUSH
1938: LD_INT 1
1940: PLUS
1941: ARRAY
1942: PPUSH
1943: LD_INT 19
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1953: LD_EXP 12
1957: PUSH
1958: LD_INT 2
1960: DIV
1961: PPUSH
1962: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1966: LD_VAR 0 2
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_VAR 0 2
1980: MOD
1981: PUSH
1982: LD_INT 1
1984: PLUS
1985: ARRAY
1986: PPUSH
1987: LD_INT 18
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
1997: LD_EXP 12
2001: PUSH
2002: LD_INT 2
2004: DIV
2005: PPUSH
2006: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
2010: LD_VAR 0 2
2014: PUSH
2015: LD_VAR 0 1
2019: PUSH
2020: LD_VAR 0 2
2024: MOD
2025: PUSH
2026: LD_INT 1
2028: PLUS
2029: ARRAY
2030: PPUSH
2031: LD_INT 17
2033: PPUSH
2034: LD_INT 1
2036: PPUSH
2037: CALL_OW 55
// Wait ( crates_spawn div 2 ) ;
2041: LD_EXP 12
2045: PUSH
2046: LD_INT 2
2048: DIV
2049: PPUSH
2050: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2054: LD_VAR 0 2
2058: PUSH
2059: LD_VAR 0 1
2063: PUSH
2064: LD_VAR 0 2
2068: MOD
2069: PUSH
2070: LD_INT 1
2072: PLUS
2073: ARRAY
2074: PPUSH
2075: LD_INT 19
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// end ; cr := cr + 1 ;
2085: LD_ADDR_VAR 0 1
2089: PUSH
2090: LD_VAR 0 1
2094: PUSH
2095: LD_INT 1
2097: PLUS
2098: ST_TO_ADDR
// if cr > 150 then
2099: LD_VAR 0 1
2103: PUSH
2104: LD_INT 150
2106: GREATER
2107: IFFALSE 2117
// cr := 43 ;
2109: LD_ADDR_VAR 0 1
2113: PUSH
2114: LD_INT 43
2116: ST_TO_ADDR
// end ;
2117: GO 1509
// end ; end_of_file
2119: PPOPN 2
2121: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2122: LD_INT 0
2124: PPUSH
2125: PPUSH
2126: PPUSH
2127: PPUSH
2128: PPUSH
2129: PPUSH
2130: PPUSH
2131: PPUSH
2132: PPUSH
// to_copy := [ ] ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: EMPTY
2139: ST_TO_ADDR
// for i = 1 to 8 do
2140: LD_ADDR_VAR 0 2
2144: PUSH
2145: DOUBLE
2146: LD_INT 1
2148: DEC
2149: ST_TO_ADDR
2150: LD_INT 8
2152: PUSH
2153: FOR_TO
2154: IFFALSE 3064
// begin if Side_Positions [ i ] then
2156: LD_EXP 2
2160: PUSH
2161: LD_VAR 0 2
2165: ARRAY
2166: IFFALSE 3062
// begin uc_side := i ;
2168: LD_ADDR_OWVAR 20
2172: PUSH
2173: LD_VAR 0 2
2177: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_EXP 4
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2194: LD_ADDR_VAR 0 6
2198: PUSH
2199: LD_EXP 7
2203: PUSH
2204: LD_EXP 2
2208: PUSH
2209: LD_VAR 0 2
2213: ARRAY
2214: ARRAY
2215: PUSH
2216: LD_INT 1
2218: ARRAY
2219: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2220: LD_ADDR_VAR 0 7
2224: PUSH
2225: LD_EXP 7
2229: PUSH
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 2
2239: ARRAY
2240: ARRAY
2241: PUSH
2242: LD_INT 2
2244: ARRAY
2245: ST_TO_ADDR
// hc_importance := 100 ;
2246: LD_ADDR_OWVAR 32
2250: PUSH
2251: LD_INT 100
2253: ST_TO_ADDR
// if Multiplayer then
2254: LD_OWVAR 4
2258: IFFALSE 2316
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_OWVAR 19
2269: PUSH
2270: LD_OWVAR 20
2274: ARRAY
2275: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2276: LD_ADDR_OWVAR 33
2280: PUSH
2281: LD_STRING MULTIAVATARS
2283: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2284: LD_ADDR_OWVAR 34
2288: PUSH
2289: LD_OWVAR 20
2293: PPUSH
2294: CALL_OW 525
2298: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2299: LD_ADDR_OWVAR 27
2303: PUSH
2304: LD_OWVAR 20
2308: PPUSH
2309: CALL_OW 526
2313: ST_TO_ADDR
// end else
2314: GO 2348
// begin hc_name :=  ;
2316: LD_ADDR_OWVAR 26
2320: PUSH
2321: LD_STRING 
2323: ST_TO_ADDR
// hc_gallery :=  ;
2324: LD_ADDR_OWVAR 33
2328: PUSH
2329: LD_STRING 
2331: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2332: LD_ADDR_OWVAR 27
2336: PUSH
2337: LD_INT 1
2339: PPUSH
2340: LD_INT 2
2342: PPUSH
2343: CALL_OW 12
2347: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2348: LD_OWVAR 27
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_EXP 11
2360: PPUSH
2361: CALL_OW 380
// un := CreateHuman ;
2365: LD_ADDR_VAR 0 4
2369: PUSH
2370: CALL_OW 44
2374: ST_TO_ADDR
// if not to_copy then
2375: LD_VAR 0 5
2379: NOT
2380: IFFALSE 2407
// to_copy := Replace ( to_copy , 1 , un ) else
2382: LD_ADDR_VAR 0 5
2386: PUSH
2387: LD_VAR 0 5
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 1
2404: ST_TO_ADDR
2405: GO 2483
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2407: LD_VAR 0 5
2411: PUSH
2412: LD_INT 1
2414: ARRAY
2415: PPUSH
2416: LD_VAR 0 4
2420: PPUSH
2421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2425: LD_VAR 0 4
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_INT 1
2440: ARRAY
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: CALL_OW 260
2449: PPUSH
2450: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2454: LD_VAR 0 4
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_VAR 0 5
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL_OW 260
2478: PPUSH
2479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2483: LD_VAR 0 4
2487: PPUSH
2488: LD_VAR 0 6
2492: PPUSH
2493: LD_VAR 0 7
2497: PPUSH
2498: LD_INT 10
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 50
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_gallery :=  ;
2524: LD_ADDR_OWVAR 33
2528: PUSH
2529: LD_STRING 
2531: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2532: LD_ADDR_VAR 0 9
2536: PUSH
2537: LD_EXP 10
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_INT 4
2548: DIVREAL
2549: ST_TO_ADDR
// c := 1 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// for j = 2 to number_of_people do
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: DOUBLE
2564: LD_INT 2
2566: DEC
2567: ST_TO_ADDR
2568: LD_EXP 10
2572: PUSH
2573: FOR_TO
2574: IFFALSE 2785
// begin PrepareHuman ( false , c , skill_level ) ;
2576: LD_INT 0
2578: PPUSH
2579: LD_VAR 0 8
2583: PPUSH
2584: LD_EXP 11
2588: PPUSH
2589: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2593: LD_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: PUSH
2602: LD_VAR 0 9
2606: MOD
2607: PUSH
2608: LD_INT 0
2610: EQUAL
2611: IFFALSE 2627
// c := c + 1 ;
2613: LD_ADDR_VAR 0 8
2617: PUSH
2618: LD_VAR 0 8
2622: PUSH
2623: LD_INT 1
2625: PLUS
2626: ST_TO_ADDR
// un := CreateHuman ;
2627: LD_ADDR_VAR 0 4
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// if to_copy < j then
2637: LD_VAR 0 5
2641: PUSH
2642: LD_VAR 0 3
2646: LESS
2647: IFFALSE 2676
// to_copy := Replace ( to_copy , j , un ) else
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: LD_VAR 0 5
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: LD_VAR 0 4
2668: PPUSH
2669: CALL_OW 1
2673: ST_TO_ADDR
2674: GO 2758
// begin CopySkills ( to_copy [ j ] , un ) ;
2676: LD_VAR 0 5
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PPUSH
2687: LD_VAR 0 4
2691: PPUSH
2692: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2696: LD_VAR 0 4
2700: PPUSH
2701: LD_INT 2
2703: PPUSH
2704: LD_VAR 0 5
2708: PUSH
2709: LD_VAR 0 3
2713: ARRAY
2714: PPUSH
2715: LD_INT 2
2717: PPUSH
2718: CALL_OW 260
2722: PPUSH
2723: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2727: LD_VAR 0 4
2731: PPUSH
2732: LD_INT 1
2734: PPUSH
2735: LD_VAR 0 5
2739: PUSH
2740: LD_VAR 0 3
2744: ARRAY
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: CALL_OW 260
2753: PPUSH
2754: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2758: LD_VAR 0 4
2762: PPUSH
2763: LD_VAR 0 6
2767: PPUSH
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 10
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 50
// end ;
2783: GO 2573
2785: POP
2786: POP
// if handicap then
2787: LD_EXP 26
2791: IFFALSE 3062
// begin if handicap = 1 then
2793: LD_EXP 26
2797: PUSH
2798: LD_INT 1
2800: EQUAL
2801: IFFALSE 2880
// for j = 1 to 2 do
2803: LD_ADDR_VAR 0 3
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2878
// begin vc_chassis := ru_medium_tracked ;
2819: LD_ADDR_OWVAR 37
2823: PUSH
2824: LD_INT 22
2826: ST_TO_ADDR
// vc_engine := engine_combustion ;
2827: LD_ADDR_OWVAR 39
2831: PUSH
2832: LD_INT 1
2834: ST_TO_ADDR
// vc_control := control_manual ;
2835: LD_ADDR_OWVAR 38
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// vc_weapon := ru_gun ;
2843: LD_ADDR_OWVAR 40
2847: PUSH
2848: LD_INT 44
2850: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2851: CALL_OW 45
2855: PPUSH
2856: LD_VAR 0 6
2860: PPUSH
2861: LD_VAR 0 7
2865: PPUSH
2866: LD_INT 13
2868: PPUSH
2869: LD_INT 0
2871: PPUSH
2872: CALL_OW 50
// end ;
2876: GO 2816
2878: POP
2879: POP
// if handicap = 2 then
2880: LD_EXP 26
2884: PUSH
2885: LD_INT 2
2887: EQUAL
2888: IFFALSE 3062
// begin for j = 1 to 2 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 2
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2978
// begin vc_chassis := ru_heavy_tracked ;
2906: LD_ADDR_OWVAR 37
2910: PUSH
2911: LD_INT 24
2913: ST_TO_ADDR
// vc_engine := engine_combustion ;
2914: LD_ADDR_OWVAR 39
2918: PUSH
2919: LD_INT 1
2921: ST_TO_ADDR
// vc_control := control_manual ;
2922: LD_ADDR_OWVAR 38
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2930: LD_ADDR_OWVAR 40
2934: PUSH
2935: LD_INT 43
2937: PUSH
2938: LD_INT 46
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_VAR 0 3
2949: ARRAY
2950: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2951: CALL_OW 45
2955: PPUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_INT 13
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL_OW 50
// end ;
2976: GO 2903
2978: POP
2979: POP
// vc_chassis := ru_medium_tracked ;
2980: LD_ADDR_OWVAR 37
2984: PUSH
2985: LD_INT 22
2987: ST_TO_ADDR
// vc_engine := engine_siberite ;
2988: LD_ADDR_OWVAR 39
2992: PUSH
2993: LD_INT 3
2995: ST_TO_ADDR
// vc_control := control_computer ;
2996: LD_ADDR_OWVAR 38
3000: PUSH
3001: LD_INT 3
3003: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
3004: LD_ADDR_OWVAR 40
3008: PUSH
3009: LD_INT 51
3011: ST_TO_ADDR
// un := CreateVehicle ;
3012: LD_ADDR_VAR 0 4
3016: PUSH
3017: CALL_OW 45
3021: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 6
3031: PPUSH
3032: LD_VAR 0 7
3036: PPUSH
3037: LD_INT 13
3039: PPUSH
3040: LD_INT 0
3042: PPUSH
3043: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 100
3057: PPUSH
3058: CALL_OW 290
// end ; end ; end ; end ;
3062: GO 2153
3064: POP
3065: POP
// end ;
3066: LD_VAR 0 1
3070: RET
// export function AddApeman ( area ) ; begin
3071: LD_INT 0
3073: PPUSH
// uc_nation := 0 ;
3074: LD_ADDR_OWVAR 21
3078: PUSH
3079: LD_INT 0
3081: ST_TO_ADDR
// uc_side := 0 ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_INT 0
3089: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3090: LD_ADDR_OWVAR 35
3094: PUSH
3095: LD_INT 10
3097: NEG
3098: PPUSH
3099: LD_INT 15
3101: PPUSH
3102: CALL_OW 12
3106: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 12
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3120: LD_ADDR_OWVAR 29
3124: PUSH
3125: LD_INT 10
3127: PUSH
3128: LD_INT 12
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3135: CALL_OW 44
3139: PPUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// end ;
3152: LD_VAR 0 2
3156: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
3157: LD_INT 0
3159: PPUSH
3160: PPUSH
3161: PPUSH
3162: PPUSH
// tmp := AreaToList ( area , 0 ) ;
3163: LD_ADDR_VAR 0 5
3167: PUSH
3168: LD_VAR 0 1
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 517
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 5
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3428
// for i := 1 to n do
3190: LD_ADDR_VAR 0 4
3194: PUSH
3195: DOUBLE
3196: LD_INT 1
3198: DEC
3199: ST_TO_ADDR
3200: LD_VAR 0 2
3204: PUSH
3205: FOR_TO
3206: IFFALSE 3426
// begin r := rand ( 1 , tmp [ 1 ] ) ;
3208: LD_ADDR_VAR 0 6
3212: PUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_VAR 0 5
3220: PUSH
3221: LD_INT 1
3223: ARRAY
3224: PPUSH
3225: CALL_OW 12
3229: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , bot_side , 0 ) ;
3230: LD_VAR 0 5
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PUSH
3239: LD_VAR 0 6
3243: ARRAY
3244: PPUSH
3245: LD_VAR 0 5
3249: PUSH
3250: LD_INT 2
3252: ARRAY
3253: PUSH
3254: LD_VAR 0 6
3258: ARRAY
3259: PPUSH
3260: LD_EXP 8
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 1 ] [ r ] ) ;
3272: LD_ADDR_EXP 17
3276: PUSH
3277: LD_EXP 17
3281: PPUSH
3282: LD_EXP 17
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: PPUSH
3291: LD_VAR 0 5
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PUSH
3300: LD_VAR 0 6
3304: ARRAY
3305: PPUSH
3306: CALL_OW 2
3310: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , tmp [ 2 ] [ r ] ) ;
3311: LD_ADDR_EXP 17
3315: PUSH
3316: LD_EXP 17
3320: PPUSH
3321: LD_EXP 17
3325: PUSH
3326: LD_INT 1
3328: PLUS
3329: PPUSH
3330: LD_VAR 0 5
3334: PUSH
3335: LD_INT 2
3337: ARRAY
3338: PUSH
3339: LD_VAR 0 6
3343: ARRAY
3344: PPUSH
3345: CALL_OW 2
3349: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
3350: LD_ADDR_VAR 0 5
3354: PUSH
3355: LD_VAR 0 5
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: LD_VAR 0 5
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: LD_VAR 0 6
3376: PPUSH
3377: CALL_OW 3
3381: PPUSH
3382: CALL_OW 1
3386: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_VAR 0 5
3396: PPUSH
3397: LD_INT 2
3399: PPUSH
3400: LD_VAR 0 5
3404: PUSH
3405: LD_INT 2
3407: ARRAY
3408: PPUSH
3409: LD_VAR 0 6
3413: PPUSH
3414: CALL_OW 3
3418: PPUSH
3419: CALL_OW 1
3423: ST_TO_ADDR
// end ;
3424: GO 3205
3426: POP
3427: POP
// end ;
3428: LD_VAR 0 3
3432: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3433: LD_INT 0
3435: PPUSH
3436: PPUSH
3437: PPUSH
// if not GetControl ( veh ) = control_manual then
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 263
3447: PUSH
3448: LD_INT 1
3450: EQUAL
3451: NOT
3452: IFFALSE 3464
// result := false else
3454: LD_ADDR_VAR 0 2
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
3462: GO 3609
// if veh in FilterAllUnits ( [ f_empty ] ) then
3464: LD_VAR 0 1
3468: PUSH
3469: LD_INT 58
3471: PUSH
3472: EMPTY
3473: LIST
3474: PPUSH
3475: CALL_OW 69
3479: IN
3480: IFFALSE 3492
// result := false else
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 0
3489: ST_TO_ADDR
3490: GO 3609
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3492: LD_ADDR_VAR 0 4
3496: PUSH
3497: LD_INT 22
3499: PUSH
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 255
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 55
3516: PUSH
3517: EMPTY
3518: LIST
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// if not filter then
3529: LD_VAR 0 4
3533: NOT
3534: IFFALSE 3546
// result := false else
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
3544: GO 3609
// for i = 1 to filter do
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: DOUBLE
3552: LD_INT 1
3554: DEC
3555: ST_TO_ADDR
3556: LD_VAR 0 4
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3607
// if IsDriver ( filter [ i ] ) = veh then
3564: LD_VAR 0 4
3568: PUSH
3569: LD_VAR 0 3
3573: ARRAY
3574: PPUSH
3575: CALL 43567 0 1
3579: PUSH
3580: LD_VAR 0 1
3584: EQUAL
3585: IFFALSE 3605
// begin result := filter [ i ] ;
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_VAR 0 4
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: ST_TO_ADDR
// break ;
3603: GO 3607
// end ;
3605: GO 3561
3607: POP
3608: POP
// end ; end ; end_of_file
3609: LD_VAR 0 2
3613: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3614: LD_INT 0
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
// side := Bot_Side ;
3625: LD_ADDR_VAR 0 5
3629: PUSH
3630: LD_EXP 8
3634: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3635: LD_ADDR_VAR 0 9
3639: PUSH
3640: LD_INT 4
3642: PUSH
3643: LD_INT 6
3645: PUSH
3646: LD_INT 8
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: PUSH
3654: LD_OWVAR 67
3658: ARRAY
3659: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3660: LD_ADDR_VAR 0 8
3664: PUSH
3665: LD_INT 27
3667: PUSH
3668: LD_INT 28
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 26
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3683: LD_ADDR_EXP 22
3687: PUSH
3688: LD_INT 4
3690: PUSH
3691: LD_INT 5
3693: PUSH
3694: LD_INT 6
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: PUSH
3702: LD_OWVAR 67
3706: ARRAY
3707: ST_TO_ADDR
// ct := [ ] ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: EMPTY
3714: ST_TO_ADDR
// patrols := [ ] ;
3715: LD_ADDR_EXP 19
3719: PUSH
3720: EMPTY
3721: ST_TO_ADDR
// attackers := [ ] ;
3722: LD_ADDR_EXP 20
3726: PUSH
3727: EMPTY
3728: ST_TO_ADDR
// attackers_tmp := [ ] ;
3729: LD_ADDR_EXP 27
3733: PUSH
3734: EMPTY
3735: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3736: LD_ADDR_EXP 21
3740: PUSH
3741: LD_INT 14
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 2
3749: PUSH
3750: LD_INT 27
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 14
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: LD_INT 2
3767: PUSH
3768: LD_INT 25
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: PUSH
3777: LD_INT 14
3779: PUSH
3780: LD_INT 1
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 2
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// if Difficulty > 2 then
3819: LD_OWVAR 67
3823: PUSH
3824: LD_INT 2
3826: GREATER
3827: IFFALSE 3895
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3829: LD_ADDR_EXP 21
3833: PUSH
3834: LD_EXP 21
3838: PPUSH
3839: LD_INT 14
3841: PUSH
3842: LD_INT 1
3844: PUSH
3845: LD_INT 2
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL 45950 0 2
3861: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3862: LD_ADDR_EXP 21
3866: PUSH
3867: LD_EXP 21
3871: PPUSH
3872: LD_INT 13
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: LD_INT 2
3880: PUSH
3881: LD_INT 29
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL 45950 0 2
3894: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3895: LD_INT 2
3897: PPUSH
3898: LD_STRING newkabul
3900: PPUSH
3901: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 274
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 90000
3918: PPUSH
3919: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 274
3930: PPUSH
3931: LD_INT 2
3933: PPUSH
3934: LD_INT 9000
3936: PPUSH
3937: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3941: LD_INT 2
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 3
3951: PPUSH
3952: LD_INT 3000
3954: PPUSH
3955: CALL_OW 277
// if Difficulty > 1 then
3959: LD_OWVAR 67
3963: PUSH
3964: LD_INT 1
3966: GREATER
3967: IFFALSE 3984
// SetTech ( 5 , side , state_researched ) ;
3969: LD_INT 5
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3984: LD_INT 41
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: LD_INT 2
3994: PPUSH
3995: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3999: LD_INT 51
4001: PPUSH
4002: LD_VAR 0 5
4006: PPUSH
4007: LD_INT 2
4009: PPUSH
4010: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4014: LD_INT 52
4016: PPUSH
4017: LD_VAR 0 5
4021: PPUSH
4022: LD_INT 2
4024: PPUSH
4025: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4029: LD_INT 53
4031: PPUSH
4032: LD_VAR 0 5
4036: PPUSH
4037: LD_INT 2
4039: PPUSH
4040: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4044: LD_INT 60
4046: PPUSH
4047: LD_VAR 0 5
4051: PPUSH
4052: LD_INT 2
4054: PPUSH
4055: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4059: LD_INT 61
4061: PPUSH
4062: LD_VAR 0 5
4066: PPUSH
4067: LD_INT 2
4069: PPUSH
4070: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4074: LD_INT 62
4076: PPUSH
4077: LD_VAR 0 5
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4089: LD_ADDR_VAR 0 2
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_VAR 0 5
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 21
4108: PUSH
4109: LD_INT 3
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: PPUSH
4120: CALL_OW 69
4124: PUSH
4125: FOR_IN
4126: IFFALSE 4159
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4128: LD_VAR 0 2
4132: PPUSH
4133: LD_INT 6
4135: PUSH
4136: LD_INT 8
4138: PUSH
4139: LD_INT 10
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: LD_OWVAR 67
4151: ARRAY
4152: PPUSH
4153: CALL_OW 241
4157: GO 4125
4159: POP
4160: POP
// if Difficulty > 1 then
4161: LD_OWVAR 67
4165: PUSH
4166: LD_INT 1
4168: GREATER
4169: IFFALSE 4178
// RemoveEnvironmentArea ( forest_road ) ;
4171: LD_INT 11
4173: PPUSH
4174: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 18 ] [ Difficulty ] ) ;
4178: LD_INT 4
4180: PPUSH
4181: LD_INT 10
4183: PUSH
4184: LD_INT 12
4186: PUSH
4187: LD_INT 18
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: PUSH
4195: LD_OWVAR 67
4199: ARRAY
4200: PPUSH
4201: CALL 3157 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 7
4210: PUSH
4211: LD_INT 12
4213: PUSH
4214: LD_INT 15
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_OWVAR 67
4226: ARRAY
4227: PPUSH
4228: CALL 3157 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4232: LD_INT 7
4234: PPUSH
4235: LD_INT 5
4237: PUSH
4238: LD_INT 8
4240: PUSH
4241: LD_INT 12
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: PUSH
4249: LD_OWVAR 67
4253: ARRAY
4254: PPUSH
4255: CALL 3157 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4259: LD_INT 6
4261: PPUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 3
4267: PUSH
4268: LD_INT 5
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_OWVAR 67
4280: ARRAY
4281: PPUSH
4282: CALL 3157 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4286: LD_INT 8
4288: PPUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 5
4294: PUSH
4295: LD_INT 8
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: PUSH
4303: LD_OWVAR 67
4307: ARRAY
4308: PPUSH
4309: CALL 3157 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4313: LD_INT 9
4315: PPUSH
4316: LD_INT 0
4318: PUSH
4319: LD_INT 2
4321: PUSH
4322: LD_INT 4
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: PPUSH
4336: CALL 3157 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4340: LD_INT 10
4342: PPUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: LD_OWVAR 67
4361: ARRAY
4362: PPUSH
4363: CALL 3157 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4367: LD_INT 12
4369: PPUSH
4370: LD_INT 0
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_OWVAR 67
4388: ARRAY
4389: PPUSH
4390: CALL 3157 0 2
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4394: LD_ADDR_VAR 0 2
4398: PUSH
4399: LD_INT 22
4401: PUSH
4402: LD_VAR 0 5
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 30
4413: PUSH
4414: LD_INT 32
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PPUSH
4425: CALL_OW 69
4429: PUSH
4430: FOR_IN
4431: IFFALSE 4463
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4433: LD_VAR 0 2
4437: PPUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 1
4445: PPUSH
4446: LD_VAR 0 8
4450: PPUSH
4451: CALL_OW 12
4455: ARRAY
4456: PPUSH
4457: CALL_OW 431
4461: GO 4430
4463: POP
4464: POP
// uc_side := side ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_VAR 0 5
4474: ST_TO_ADDR
// uc_nation := 2 ;
4475: LD_ADDR_OWVAR 21
4479: PUSH
4480: LD_INT 2
4482: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4483: LD_ADDR_VAR 0 2
4487: PUSH
4488: DOUBLE
4489: LD_INT 1
4491: DEC
4492: ST_TO_ADDR
4493: LD_INT 1
4495: PUSH
4496: LD_OWVAR 67
4500: PLUS
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4593
// begin vc_chassis := ar_half_tracked ;
4505: LD_ADDR_OWVAR 37
4509: PUSH
4510: LD_INT 14
4512: ST_TO_ADDR
// vc_engine := engine_combustion ;
4513: LD_ADDR_OWVAR 39
4517: PUSH
4518: LD_INT 1
4520: ST_TO_ADDR
// vc_control := control_manual ;
4521: LD_ADDR_OWVAR 38
4525: PUSH
4526: LD_INT 1
4528: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4529: LD_ADDR_OWVAR 40
4533: PUSH
4534: LD_INT 31
4536: ST_TO_ADDR
// veh := CreateVehicle ;
4537: LD_ADDR_VAR 0 7
4541: PUSH
4542: CALL_OW 45
4546: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4547: LD_VAR 0 7
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: LD_VAR 0 9
4572: PPUSH
4573: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4577: CALL_OW 44
4581: PPUSH
4582: LD_VAR 0 7
4586: PPUSH
4587: CALL_OW 52
// end ;
4591: GO 4502
4593: POP
4594: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4595: LD_ADDR_VAR 0 2
4599: PUSH
4600: LD_INT 22
4602: PUSH
4603: LD_VAR 0 5
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PUSH
4612: LD_INT 30
4614: PUSH
4615: LD_INT 32
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PPUSH
4626: CALL_OW 69
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4665
// begin PrepareHuman ( false , 1 , skill ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: LD_VAR 0 9
4644: PPUSH
4645: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4649: CALL_OW 44
4653: PPUSH
4654: LD_VAR 0 2
4658: PPUSH
4659: CALL_OW 52
// end ;
4663: GO 4631
4665: POP
4666: POP
// for i = 1 to 4 do
4667: LD_ADDR_VAR 0 2
4671: PUSH
4672: DOUBLE
4673: LD_INT 1
4675: DEC
4676: ST_TO_ADDR
4677: LD_INT 4
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4712
// begin PrepareHuman ( false , 2 , skill ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: LD_VAR 0 9
4693: PPUSH
4694: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4698: CALL_OW 44
4702: PPUSH
4703: LD_INT 2
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4680
4712: POP
4713: POP
// for i = 1 to 6 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 6
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4759
// begin PrepareHuman ( false , 3 , skill ) ;
4730: LD_INT 0
4732: PPUSH
4733: LD_INT 3
4735: PPUSH
4736: LD_VAR 0 9
4740: PPUSH
4741: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4745: CALL_OW 44
4749: PPUSH
4750: LD_INT 12
4752: PPUSH
4753: CALL_OW 52
// end ;
4757: GO 4727
4759: POP
4760: POP
// for i = 1 to 4 do
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: DOUBLE
4767: LD_INT 1
4769: DEC
4770: ST_TO_ADDR
4771: LD_INT 4
4773: PUSH
4774: FOR_TO
4775: IFFALSE 4832
// begin PrepareHuman ( false , 4 , skill ) ;
4777: LD_INT 0
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: LD_VAR 0 9
4787: PPUSH
4788: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4792: CALL_OW 44
4796: PPUSH
4797: LD_INT 30
4799: PUSH
4800: LD_INT 8
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: PUSH
4812: LD_VAR 0 2
4816: PUSH
4817: LD_INT 2
4819: MOD
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: ARRAY
4825: PPUSH
4826: CALL_OW 52
// end ;
4830: GO 4774
4832: POP
4833: POP
// PrepareHuman ( false , class_mortar , skill ) ;
4834: LD_INT 0
4836: PPUSH
4837: LD_INT 8
4839: PPUSH
4840: LD_VAR 0 9
4844: PPUSH
4845: CALL_OW 380
// un := CreateHuman ;
4849: LD_ADDR_VAR 0 6
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// SetDir ( un , 2 ) ;
4859: LD_VAR 0 6
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
4871: LD_VAR 0 6
4875: PPUSH
4876: LD_INT 31
4878: PPUSH
4879: CALL_OW 52
// for i = 1 to 4 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 4
4895: PUSH
4896: FOR_TO
4897: IFFALSE 4953
// begin uc_nation := 0 ;
4899: LD_ADDR_OWVAR 21
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
4907: LD_INT 0
4909: PPUSH
4910: LD_INT 16
4912: PPUSH
4913: LD_INT 1
4915: PPUSH
4916: CALL_OW 380
// un := CreateHuman ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: CALL_OW 44
4929: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
4930: LD_VAR 0 6
4934: PPUSH
4935: LD_INT 106
4937: PPUSH
4938: LD_INT 46
4940: PPUSH
4941: LD_INT 8
4943: PPUSH
4944: LD_INT 0
4946: PPUSH
4947: CALL_OW 50
// end ;
4951: GO 4896
4953: POP
4954: POP
// for i = 1 to 2 * Difficulty do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 2
4967: PUSH
4968: LD_OWVAR 67
4972: MUL
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5015
// begin uc_nation := 0 ;
4977: LD_ADDR_OWVAR 21
4981: PUSH
4982: LD_INT 0
4984: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 15
4990: PPUSH
4991: LD_INT 3
4993: PPUSH
4994: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
4998: CALL_OW 44
5002: PPUSH
5003: LD_INT 20
5005: PPUSH
5006: LD_INT 0
5008: PPUSH
5009: CALL_OW 49
// end ;
5013: GO 4974
5015: POP
5016: POP
// for i = 1 to 4 * Difficulty do
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: DOUBLE
5023: LD_INT 1
5025: DEC
5026: ST_TO_ADDR
5027: LD_INT 4
5029: PUSH
5030: LD_OWVAR 67
5034: MUL
5035: PUSH
5036: FOR_TO
5037: IFFALSE 5111
// begin uc_nation := 0 ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_INT 0
5046: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5047: LD_INT 0
5049: PPUSH
5050: LD_INT 17
5052: PPUSH
5053: LD_INT 3
5055: PPUSH
5056: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5060: LD_ADDR_OWVAR 29
5064: PUSH
5065: LD_INT 11
5067: PUSH
5068: LD_INT 13
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: ST_TO_ADDR
// un := CreateHuman ;
5075: LD_ADDR_VAR 0 6
5079: PUSH
5080: CALL_OW 44
5084: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5085: LD_VAR 0 6
5089: PPUSH
5090: LD_INT 21
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 49
// ComHold ( un ) ;
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL_OW 140
// end ;
5109: GO 5036
5111: POP
5112: POP
// end ;
5113: LD_VAR 0 1
5117: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5118: LD_INT 22
5120: PUSH
5121: LD_EXP 8
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 30
5132: PUSH
5133: LD_INT 3
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: IFFALSE 5455
5150: GO 5152
5152: DISABLE
5153: LD_INT 0
5155: PPUSH
5156: PPUSH
5157: PPUSH
// begin enable ;
5158: ENABLE
// if Difficulty < 3 then
5159: LD_OWVAR 67
5163: PUSH
5164: LD_INT 3
5166: LESS
5167: IFFALSE 5176
// wait ( 1 1$00 ) ;
5169: LD_INT 2100
5171: PPUSH
5172: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: LD_EXP 23
5185: PUSH
5186: LD_EXP 24
5190: ARRAY
5191: ST_TO_ADDR
// p := 1 ;
5192: LD_ADDR_VAR 0 3
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5200: LD_ADDR_VAR 0 1
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_EXP 22
5214: PUSH
5215: LD_INT 1
5217: NEG
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_OWVAR 67
5234: ARRAY
5235: PLUS
5236: PUSH
5237: FOR_TO
5238: IFFALSE 5419
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5240: LD_INT 22
5242: PUSH
5243: LD_EXP 8
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 30
5254: PUSH
5255: LD_INT 3
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_INT 1
5273: ARRAY
5274: PPUSH
5275: LD_EXP 21
5279: PUSH
5280: LD_VAR 0 2
5284: PUSH
5285: LD_INT 10
5287: MOD
5288: ARRAY
5289: PUSH
5290: LD_INT 1
5292: ARRAY
5293: PPUSH
5294: LD_EXP 21
5298: PUSH
5299: LD_VAR 0 2
5303: PUSH
5304: LD_INT 10
5306: MOD
5307: ARRAY
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: LD_EXP 21
5317: PUSH
5318: LD_VAR 0 2
5322: PUSH
5323: LD_INT 10
5325: MOD
5326: ARRAY
5327: PUSH
5328: LD_INT 3
5330: ARRAY
5331: PPUSH
5332: LD_EXP 21
5336: PUSH
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 10
5344: MOD
5345: ARRAY
5346: PUSH
5347: LD_INT 4
5349: ARRAY
5350: PPUSH
5351: CALL_OW 185
// tmp := tmp / 10 ;
5355: LD_ADDR_VAR 0 2
5359: PUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 10
5367: DIVREAL
5368: ST_TO_ADDR
// p := p + 1 ;
5369: LD_ADDR_VAR 0 3
5373: PUSH
5374: LD_VAR 0 3
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: ST_TO_ADDR
// if p > 5 then
5383: LD_VAR 0 3
5387: PUSH
5388: LD_INT 5
5390: GREATER
5391: IFFALSE 5417
// begin p := 1 ;
5393: LD_ADDR_VAR 0 3
5397: PUSH
5398: LD_INT 1
5400: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_EXP 23
5410: PUSH
5411: LD_EXP 24
5415: ARRAY
5416: ST_TO_ADDR
// end ; end ;
5417: GO 5237
5419: POP
5420: POP
// rng := rng + 1 ;
5421: LD_ADDR_EXP 24
5425: PUSH
5426: LD_EXP 24
5430: PUSH
5431: LD_INT 1
5433: PLUS
5434: ST_TO_ADDR
// if rng > queue_codes then
5435: LD_EXP 24
5439: PUSH
5440: LD_EXP 23
5444: GREATER
5445: IFFALSE 5455
// rng := 1 ;
5447: LD_ADDR_EXP 24
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// end ;
5455: PPOPN 3
5457: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 69
5472: IFFALSE 5575
5474: GO 5476
5476: DISABLE
5477: LD_INT 0
5479: PPUSH
5480: PPUSH
// begin enable ;
5481: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5482: LD_ADDR_VAR 0 1
5486: PUSH
5487: LD_INT 25
5489: PUSH
5490: LD_INT 17
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL_OW 69
5501: PUSH
5502: FOR_IN
5503: IFFALSE 5573
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5505: LD_ADDR_VAR 0 2
5509: PUSH
5510: LD_INT 81
5512: PUSH
5513: LD_EXP 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PPUSH
5522: CALL_OW 69
5526: PPUSH
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 74
5536: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5537: LD_VAR 0 1
5541: PPUSH
5542: LD_VAR 0 2
5546: PPUSH
5547: CALL_OW 296
5551: PUSH
5552: LD_INT 15
5554: LESS
5555: IFFALSE 5571
// ComAttackUnit ( i , un ) ;
5557: LD_VAR 0 1
5561: PPUSH
5562: LD_VAR 0 2
5566: PPUSH
5567: CALL_OW 115
// end ;
5571: GO 5502
5573: POP
5574: POP
// end ;
5575: PPOPN 2
5577: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5578: LD_EXP 20
5582: IFFALSE 5649
5584: GO 5586
5586: DISABLE
5587: LD_INT 0
5589: PPUSH
// begin enable ;
5590: ENABLE
// for i in attackers do
5591: LD_ADDR_VAR 0 1
5595: PUSH
5596: LD_EXP 20
5600: PUSH
5601: FOR_IN
5602: IFFALSE 5647
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5604: LD_VAR 0 1
5608: PPUSH
5609: LD_INT 81
5611: PUSH
5612: LD_VAR 0 1
5616: PPUSH
5617: CALL_OW 255
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: PPUSH
5631: LD_VAR 0 1
5635: PPUSH
5636: CALL_OW 74
5640: PPUSH
5641: CALL_OW 115
5645: GO 5601
5647: POP
5648: POP
// end ;
5649: PPOPN 1
5651: END
// every 0 0$01 trigger not attackers marked 17 do
5652: LD_EXP 20
5656: NOT
5657: IFFALSE 5666
5659: GO 5661
5661: DISABLE
// begin enable ;
5662: ENABLE
// disable ( 17 ) ;
5663: LD_INT 17
5665: DISABLE_MARKED
// end ;
5666: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5667: LD_EXP 22
5671: PUSH
5672: LD_EXP 20
5676: LESSEQUAL
5677: IFFALSE 5690
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
5685: PPUSH
// begin enable ;
5686: ENABLE
// enable ( 17 ) ;
5687: LD_INT 17
5689: ENABLE_MARKED
// end ;
5690: PPOPN 2
5692: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5693: LD_EXP 9
5697: PUSH
5698: LD_OWVAR 1
5702: PUSH
5703: LD_INT 105000
5705: GREATEREQUAL
5706: AND
5707: IFFALSE 5726
5709: GO 5711
5711: DISABLE
// veh_counter := veh_counter + 2 ;
5712: LD_ADDR_EXP 22
5716: PUSH
5717: LD_EXP 22
5721: PUSH
5722: LD_INT 2
5724: PLUS
5725: ST_TO_ADDR
5726: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5727: LD_INT 22
5729: PUSH
5730: LD_EXP 8
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 33
5741: PUSH
5742: LD_INT 2
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 69
5757: IFFALSE 5973
5759: GO 5761
5761: DISABLE
5762: LD_INT 0
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
5769: PPUSH
5770: PPUSH
// begin enable ;
5771: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
5772: LD_ADDR_VAR 0 4
5776: PUSH
5777: LD_INT 22
5779: PUSH
5780: LD_EXP 8
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 33
5791: PUSH
5792: LD_INT 2
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 61
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: LIST
5816: PPUSH
5817: CALL_OW 69
5821: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_INT 22
5829: PUSH
5830: LD_EXP 8
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 34
5841: PUSH
5842: LD_INT 31
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: ST_TO_ADDR
// best := 10 ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_INT 10
5865: ST_TO_ADDR
// best_mechanic := - 1 ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_INT 1
5873: NEG
5874: ST_TO_ADDR
// if vehs then
5875: LD_VAR 0 4
5879: IFFALSE 5973
// begin for j in cts do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5953
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL 3433 0 1
5908: PPUSH
5909: CALL_OW 432
5913: ST_TO_ADDR
// if p < best then
5914: LD_VAR 0 7
5918: PUSH
5919: LD_VAR 0 5
5923: LESS
5924: IFFALSE 5951
// begin best := p ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 7
5935: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
5936: LD_ADDR_VAR 0 6
5940: PUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: CALL 3433 0 1
5950: ST_TO_ADDR
// end ; end ;
5951: GO 5891
5953: POP
5954: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
5955: LD_VAR 0 4
5959: PUSH
5960: LD_INT 1
5962: ARRAY
5963: PPUSH
5964: LD_VAR 0 6
5968: PPUSH
5969: CALL_OW 135
// end ; end ;
5973: PPOPN 7
5975: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
5976: GO 5978
5978: DISABLE
5979: LD_INT 0
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
// begin enable ;
5988: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5989: LD_ADDR_VAR 0 6
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_EXP 8
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 21
6008: PUSH
6009: LD_INT 3
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: LD_INT 24
6021: PUSH
6022: LD_INT 1000
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: PPUSH
6038: CALL_OW 69
6042: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6043: LD_ADDR_VAR 0 3
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_EXP 8
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 2
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 3
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 24
6104: PUSH
6105: LD_INT 750
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6126: LD_ADDR_VAR 0 4
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_EXP 8
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 25
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PPUSH
6157: CALL_OW 69
6161: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6162: LD_ADDR_VAR 0 5
6166: PUSH
6167: LD_INT 22
6169: PUSH
6170: LD_EXP 8
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 25
6181: PUSH
6182: LD_INT 2
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: PPUSH
6193: CALL_OW 69
6197: ST_TO_ADDR
// if not h and not b then
6198: LD_VAR 0 3
6202: NOT
6203: PUSH
6204: LD_VAR 0 6
6208: NOT
6209: AND
6210: IFFALSE 6494
// begin if sci then
6212: LD_VAR 0 4
6216: IFFALSE 6353
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6218: LD_VAR 0 4
6222: PPUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 54
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 72
6240: PUSH
6241: LD_INT 22
6243: PUSH
6244: LD_EXP 8
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 30
6255: PUSH
6256: LD_INT 8
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 69
6271: AND
6272: IFFALSE 6353
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6274: LD_ADDR_VAR 0 2
6278: PUSH
6279: LD_VAR 0 4
6283: PPUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 54
6289: PUSH
6290: EMPTY
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 72
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6351
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6305: LD_VAR 0 2
6309: PPUSH
6310: LD_INT 22
6312: PUSH
6313: LD_EXP 8
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 30
6324: PUSH
6325: LD_INT 8
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PPUSH
6336: CALL_OW 69
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: CALL_OW 120
6349: GO 6302
6351: POP
6352: POP
// if eng then
6353: LD_VAR 0 5
6357: IFFALSE 6494
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6359: LD_VAR 0 5
6363: PPUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 54
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 72
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_EXP 8
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 1
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PPUSH
6408: CALL_OW 69
6412: AND
6413: IFFALSE 6494
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: LD_VAR 0 5
6424: PPUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 54
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 72
6442: PUSH
6443: FOR_IN
6444: IFFALSE 6492
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_EXP 8
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 30
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 120
6490: GO 6443
6492: POP
6493: POP
// end ; p := 1 ;
6494: LD_ADDR_VAR 0 7
6498: PUSH
6499: LD_INT 1
6501: ST_TO_ADDR
// if b and eng then
6502: LD_VAR 0 6
6506: PUSH
6507: LD_VAR 0 5
6511: AND
6512: IFFALSE 6646
// for j in eng do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: LD_VAR 0 5
6523: PUSH
6524: FOR_IN
6525: IFFALSE 6644
// begin if IsInUnit ( j ) then
6527: LD_VAR 0 2
6531: PPUSH
6532: CALL_OW 310
6536: IFFALSE 6549
// ComExitBuilding ( j ) else
6538: LD_VAR 0 2
6542: PPUSH
6543: CALL_OW 122
6547: GO 6642
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6549: LD_VAR 0 2
6553: PPUSH
6554: CALL_OW 314
6558: NOT
6559: PUSH
6560: LD_VAR 0 2
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 750
6572: GREATER
6573: AND
6574: IFFALSE 6642
// begin if b > p then
6576: LD_VAR 0 6
6580: PUSH
6581: LD_VAR 0 7
6585: GREATER
6586: IFFALSE 6624
// begin ComRepairBuilding ( j , b [ p ] ) ;
6588: LD_VAR 0 2
6592: PPUSH
6593: LD_VAR 0 6
6597: PUSH
6598: LD_VAR 0 7
6602: ARRAY
6603: PPUSH
6604: CALL_OW 130
// p := p + 1 ;
6608: LD_ADDR_VAR 0 7
6612: PUSH
6613: LD_VAR 0 7
6617: PUSH
6618: LD_INT 1
6620: PLUS
6621: ST_TO_ADDR
// end else
6622: GO 6642
// ComRepairBuilding ( j , b [ 1 ] ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: LD_VAR 0 6
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: PPUSH
6638: CALL_OW 130
// end ; end ;
6642: GO 6524
6644: POP
6645: POP
// if h and sci then
6646: LD_VAR 0 3
6650: PUSH
6651: LD_VAR 0 4
6655: AND
6656: IFFALSE 6795
// for i in h do
6658: LD_ADDR_VAR 0 1
6662: PUSH
6663: LD_VAR 0 3
6667: PUSH
6668: FOR_IN
6669: IFFALSE 6793
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6671: LD_VAR 0 1
6675: PPUSH
6676: LD_INT 108
6678: PPUSH
6679: LD_INT 42
6681: PPUSH
6682: CALL_OW 297
6686: PUSH
6687: LD_INT 10
6689: GREATER
6690: IFFALSE 6709
// ComMoveXY ( i , 108 , 42 ) else
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_INT 108
6699: PPUSH
6700: LD_INT 42
6702: PPUSH
6703: CALL_OW 111
6707: GO 6791
// begin for j in sci do
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_VAR 0 4
6718: PUSH
6719: FOR_IN
6720: IFFALSE 6789
// begin if GetTag ( j ) > 0 then
6722: LD_VAR 0 2
6726: PPUSH
6727: CALL_OW 110
6731: PUSH
6732: LD_INT 0
6734: GREATER
6735: IFFALSE 6739
// continue ;
6737: GO 6719
// if IsInUnit ( j ) then
6739: LD_VAR 0 2
6743: PPUSH
6744: CALL_OW 310
6748: IFFALSE 6761
// ComExitBuilding ( j ) else
6750: LD_VAR 0 2
6754: PPUSH
6755: CALL_OW 122
6759: GO 6787
// if not HasTask ( j ) then
6761: LD_VAR 0 2
6765: PPUSH
6766: CALL_OW 314
6770: NOT
6771: IFFALSE 6787
// ComHeal ( j , h ) ;
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 128
// end ;
6787: GO 6719
6789: POP
6790: POP
// end ;
6791: GO 6668
6793: POP
6794: POP
// end ;
6795: PPOPN 7
6797: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
6798: LD_INT 155
6800: PPUSH
6801: LD_INT 88
6803: PPUSH
6804: CALL_OW 428
6808: PUSH
6809: LD_INT 155
6811: PPUSH
6812: LD_INT 88
6814: PPUSH
6815: CALL_OW 428
6819: PUSH
6820: LD_INT 30
6822: EQUAL
6823: PPUSH
6824: CALL_OW 266
6828: AND
6829: IFFALSE 7078
6831: GO 6833
6833: DISABLE
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 155
6845: PPUSH
6846: LD_INT 88
6848: PPUSH
6849: CALL_OW 428
6853: PPUSH
6854: CALL_OW 255
6858: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
6859: LD_INT 11550
6861: PUSH
6862: LD_INT 13755
6864: PUSH
6865: LD_INT 13335
6867: PUSH
6868: LD_INT 18340
6870: PUSH
6871: LD_INT 19985
6873: PUSH
6874: LD_INT 9555
6876: PUSH
6877: LD_INT 18935
6879: PUSH
6880: LD_INT 10535
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: PUSH
6893: LD_VAR 0 2
6897: ARRAY
6898: PPUSH
6899: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
6903: LD_INT 22
6905: PUSH
6906: LD_EXP 8
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 25
6917: PUSH
6918: LD_INT 4
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: PUSH
6934: LD_INT 0
6936: EQUAL
6937: IFFALSE 6941
// exit ;
6939: GO 7078
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
6941: LD_ADDR_VAR 0 1
6945: PUSH
6946: LD_INT 22
6948: PUSH
6949: LD_EXP 8
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 4
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
6981: LD_VAR 0 1
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: CALL_OW 109
// ComExitBuilding ( sci ) ;
6993: LD_VAR 0 1
6997: PPUSH
6998: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_INT 126
7009: PPUSH
7010: LD_INT 59
7012: PPUSH
7013: CALL_OW 171
// if p mod 2 = 0 then
7017: LD_VAR 0 2
7021: PUSH
7022: LD_INT 2
7024: MOD
7025: PUSH
7026: LD_INT 0
7028: EQUAL
7029: IFFALSE 7048
// AddComMoveXY ( sci , 148 , 66 ) else
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 148
7038: PPUSH
7039: LD_INT 66
7041: PPUSH
7042: CALL_OW 171
7046: GO 7063
// AddComMoveXY ( sci , 135 , 84 ) ;
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_INT 135
7055: PPUSH
7056: LD_INT 84
7058: PPUSH
7059: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7063: LD_VAR 0 1
7067: PPUSH
7068: LD_INT 155
7070: PPUSH
7071: LD_INT 88
7073: PPUSH
7074: CALL_OW 218
// end ;
7078: PPOPN 2
7080: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7081: LD_INT 33
7083: PPUSH
7084: LD_INT 10
7086: PPUSH
7087: CALL_OW 428
7091: PUSH
7092: LD_INT 33
7094: PPUSH
7095: LD_INT 10
7097: PPUSH
7098: CALL_OW 428
7102: PUSH
7103: LD_INT 30
7105: EQUAL
7106: PPUSH
7107: CALL_OW 266
7111: AND
7112: IFFALSE 7363
7114: GO 7116
7116: DISABLE
7117: LD_INT 0
7119: PPUSH
7120: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: LD_INT 33
7128: PPUSH
7129: LD_INT 10
7131: PPUSH
7132: CALL_OW 428
7136: PPUSH
7137: CALL_OW 255
7141: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7142: LD_INT 9450
7144: PUSH
7145: LD_INT 11655
7147: PUSH
7148: LD_INT 7035
7150: PUSH
7151: LD_INT 9940
7153: PUSH
7154: LD_INT 7385
7156: PUSH
7157: LD_INT 11655
7159: PUSH
7160: LD_INT 6335
7162: PUSH
7163: LD_INT 16835
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_VAR 0 2
7180: ARRAY
7181: PPUSH
7182: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7186: LD_INT 22
7188: PUSH
7189: LD_EXP 8
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 25
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PUSH
7217: LD_INT 0
7219: EQUAL
7220: IFFALSE 7224
// exit ;
7222: GO 7363
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7224: LD_ADDR_VAR 0 1
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_EXP 8
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 4
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 69
7259: PUSH
7260: LD_VAR 0 1
7264: ARRAY
7265: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 109
// ComExitBuilding ( sci ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7287: LD_VAR 0 1
7291: PPUSH
7292: LD_INT 67
7294: PPUSH
7295: LD_INT 13
7297: PPUSH
7298: CALL_OW 171
// if p mod 2 = 0 then
7302: LD_VAR 0 2
7306: PUSH
7307: LD_INT 2
7309: MOD
7310: PUSH
7311: LD_INT 0
7313: EQUAL
7314: IFFALSE 7333
// AddComMoveXY ( sci , 37 , 3 ) else
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_INT 37
7323: PPUSH
7324: LD_INT 3
7326: PPUSH
7327: CALL_OW 171
7331: GO 7348
// AddComMoveXY ( sci , 45 , 20 ) ;
7333: LD_VAR 0 1
7337: PPUSH
7338: LD_INT 45
7340: PPUSH
7341: LD_INT 20
7343: PPUSH
7344: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_INT 33
7355: PPUSH
7356: LD_INT 10
7358: PPUSH
7359: CALL_OW 218
// end ;
7363: PPOPN 2
7365: END
// every 0 0$01 trigger mines_list do var i , p ;
7366: LD_EXP 17
7370: IFFALSE 7596
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin enable ;
7379: ENABLE
// p := 1 ;
7380: LD_ADDR_VAR 0 2
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7388: LD_ADDR_VAR 0 1
7392: PUSH
7393: DOUBLE
7394: LD_INT 1
7396: DEC
7397: ST_TO_ADDR
7398: LD_EXP 17
7402: PUSH
7403: LD_INT 2
7405: DIVREAL
7406: PUSH
7407: FOR_TO
7408: IFFALSE 7594
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7410: LD_EXP 17
7414: PUSH
7415: LD_VAR 0 2
7419: ARRAY
7420: PPUSH
7421: LD_EXP 17
7425: PUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: PLUS
7434: ARRAY
7435: PPUSH
7436: CALL_OW 428
7440: PUSH
7441: LD_INT 0
7443: GREATER
7444: IFFALSE 7578
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7446: LD_EXP 17
7450: PUSH
7451: LD_VAR 0 2
7455: ARRAY
7456: PPUSH
7457: LD_EXP 17
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_INT 1
7469: PLUS
7470: ARRAY
7471: PPUSH
7472: CALL_OW 428
7476: PPUSH
7477: CALL_OW 255
7481: PUSH
7482: LD_EXP 8
7486: NONEQUAL
7487: IFFALSE 7578
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7489: LD_EXP 17
7493: PUSH
7494: LD_VAR 0 2
7498: ARRAY
7499: PPUSH
7500: LD_EXP 17
7504: PUSH
7505: LD_VAR 0 2
7509: PUSH
7510: LD_INT 1
7512: PLUS
7513: ARRAY
7514: PPUSH
7515: LD_EXP 8
7519: PPUSH
7520: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7524: LD_ADDR_EXP 17
7528: PUSH
7529: LD_EXP 17
7533: PPUSH
7534: LD_VAR 0 2
7538: PPUSH
7539: CALL_OW 3
7543: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7544: LD_ADDR_EXP 17
7548: PUSH
7549: LD_EXP 17
7553: PPUSH
7554: LD_VAR 0 2
7558: PPUSH
7559: CALL_OW 3
7563: ST_TO_ADDR
// p := p - 2 ;
7564: LD_ADDR_VAR 0 2
7568: PUSH
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: MINUS
7577: ST_TO_ADDR
// end ; p := p + 2 ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_VAR 0 2
7587: PUSH
7588: LD_INT 2
7590: PLUS
7591: ST_TO_ADDR
// end ;
7592: GO 7407
7594: POP
7595: POP
// end ;
7596: PPOPN 2
7598: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7599: GO 7601
7601: DISABLE
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
7608: PPUSH
// begin enable ;
7609: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7610: LD_ADDR_VAR 0 4
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: EMPTY
7619: LIST
7620: PUSH
7621: LD_INT 22
7623: PUSH
7624: LD_EXP 8
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 16
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: PPUSH
7648: CALL_OW 69
7652: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7653: LD_ADDR_VAR 0 5
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_EXP 8
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 30
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 30
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 13
7714: PPUSH
7715: CALL_OW 435
7719: ST_TO_ADDR
// if filter and skr then
7720: LD_VAR 0 4
7724: PUSH
7725: LD_VAR 0 3
7729: AND
7730: IFFALSE 7805
// for i = 1 to filter do
7732: LD_ADDR_VAR 0 1
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 4
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7803
// if not HasTask ( filter [ i ] ) then
7750: LD_VAR 0 4
7754: PUSH
7755: LD_VAR 0 1
7759: ARRAY
7760: PPUSH
7761: CALL_OW 314
7765: NOT
7766: IFFALSE 7801
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7768: LD_VAR 0 4
7772: PUSH
7773: LD_VAR 0 1
7777: ARRAY
7778: PPUSH
7779: LD_VAR 0 3
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PPUSH
7797: CALL_OW 117
7801: GO 7747
7803: POP
7804: POP
// end ; end_of_file
7805: PPOPN 5
7807: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin if un in attackers then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_EXP 20
7823: IN
7824: IFFALSE 7842
// attackers := attackers diff un ;
7826: LD_ADDR_EXP 20
7830: PUSH
7831: LD_EXP 20
7835: PUSH
7836: LD_VAR 0 1
7840: DIFF
7841: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 255
7851: PUSH
7852: LD_EXP 8
7856: NONEQUAL
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 255
7867: PUSH
7868: LD_INT 0
7870: GREATER
7871: AND
7872: PUSH
7873: LD_VAR 0 1
7877: PUSH
7878: LD_INT 21
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: IN
7893: AND
7894: IFFALSE 8078
// begin if respawning_time_min > 0 0$00 then
7896: LD_EXP 13
7900: PUSH
7901: LD_INT 0
7903: GREATER
7904: IFFALSE 8078
// begin s := GetSide ( un ) ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 255
7920: ST_TO_ADDR
// n := GetNation ( un ) ;
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 248
7935: ST_TO_ADDR
// cl := GetClass ( un ) ;
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 257
7950: ST_TO_ADDR
// wait ( respawning_time_min ) ;
7951: LD_EXP 13
7955: PPUSH
7956: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
7960: LD_EXP 14
7964: PUSH
7965: LD_INT 350
7967: PUSH
7968: LD_OWVAR 1
7972: MUL
7973: PUSH
7974: LD_INT 10
7976: MOD
7977: PUSH
7978: LD_INT 1
7980: PLUS
7981: PUSH
7982: LD_VAR 0 3
7986: MUL
7987: MINUS
7988: PPUSH
7989: CALL_OW 67
// uc_side := s ;
7993: LD_ADDR_OWVAR 20
7997: PUSH
7998: LD_VAR 0 4
8002: ST_TO_ADDR
// uc_nation := n ;
8003: LD_ADDR_OWVAR 21
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8013: LD_INT 0
8015: PPUSH
8016: LD_VAR 0 3
8020: PPUSH
8021: LD_EXP 11
8025: PUSH
8026: LD_INT 2
8028: MINUS
8029: PPUSH
8030: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8034: CALL_OW 44
8038: PPUSH
8039: LD_INT 17
8041: PUSH
8042: LD_INT 19
8044: PUSH
8045: LD_INT 18
8047: PUSH
8048: LD_INT 19
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_VAR 0 3
8061: PUSH
8062: LD_INT 4
8064: MOD
8065: PUSH
8066: LD_INT 1
8068: PLUS
8069: ARRAY
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 49
// end ; end ; end ;
8078: PPOPN 5
8080: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 255
8090: PUSH
8091: LD_EXP 8
8095: EQUAL
8096: PUSH
8097: LD_VAR 0 1
8101: PUSH
8102: LD_INT 33
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 21
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PPUSH
8126: CALL_OW 69
8130: IN
8131: AND
8132: IFFALSE 8255
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8134: LD_OWVAR 3
8138: PUSH
8139: LD_VAR 0 1
8143: DIFF
8144: PPUSH
8145: LD_VAR 0 1
8149: PPUSH
8150: CALL_OW 74
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_EXP 8
8164: NONEQUAL
8165: IFFALSE 8255
// begin Wait ( 0 0$1.3 ) ;
8167: LD_INT 46
8169: PPUSH
8170: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 250
8183: PPUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 251
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 250
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 251
8220: PPUSH
8221: LD_INT 1
8223: PPUSH
8224: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 250
8237: PPUSH
8238: LD_VAR 0 1
8242: PPUSH
8243: CALL_OW 251
8247: PPUSH
8248: LD_INT 1
8250: PPUSH
8251: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 263
8264: PUSH
8265: LD_INT 2
8267: EQUAL
8268: IFFALSE 8279
// ComUnlink ( un ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 136
// end ;
8279: PPOPN 1
8281: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 255
8291: PUSH
8292: LD_EXP 8
8296: EQUAL
8297: IFFALSE 8328
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8299: LD_ADDR_EXP 20
8303: PUSH
8304: LD_EXP 20
8308: PPUSH
8309: LD_EXP 20
8313: PUSH
8314: LD_INT 1
8316: PLUS
8317: PPUSH
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 2
8327: ST_TO_ADDR
// end ;
8328: PPOPN 2
8330: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8331: LD_INT 0
8333: PPUSH
8334: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 255
8344: PUSH
8345: LD_EXP 8
8349: EQUAL
8350: PUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: CALL_OW 266
8360: PUSH
8361: LD_INT 32
8363: EQUAL
8364: AND
8365: IFFALSE 8463
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8367: LD_ADDR_VAR 0 4
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_EXP 8
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 5
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: ST_TO_ADDR
// for i in arm do
8403: LD_ADDR_VAR 0 3
8407: PUSH
8408: LD_VAR 0 4
8412: PUSH
8413: FOR_IN
8414: IFFALSE 8461
// if UnitsInside ( i ) < 6 then
8416: LD_VAR 0 3
8420: PPUSH
8421: CALL_OW 313
8425: PUSH
8426: LD_INT 6
8428: LESS
8429: IFFALSE 8459
// begin ComEnterUnit ( un , i ) ;
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_VAR 0 3
8440: PPUSH
8441: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8445: LD_VAR 0 2
8449: PPUSH
8450: LD_INT 8
8452: PPUSH
8453: CALL_OW 183
// break ;
8457: GO 8461
// end ;
8459: GO 8413
8461: POP
8462: POP
// end ; end ; end_of_file
8463: PPOPN 4
8465: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 200
8473: DOUBLE
8474: GREATEREQUAL
8475: IFFALSE 8483
8477: LD_INT 299
8479: DOUBLE
8480: LESSEQUAL
8481: IFTRUE 8485
8483: GO 8517
8485: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8486: LD_VAR 0 1
8490: PPUSH
8491: LD_VAR 0 2
8495: PPUSH
8496: LD_VAR 0 3
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: LD_VAR 0 5
8510: PPUSH
8511: CALL 66350 0 5
8515: GO 8594
8517: LD_INT 300
8519: DOUBLE
8520: GREATEREQUAL
8521: IFFALSE 8529
8523: LD_INT 399
8525: DOUBLE
8526: LESSEQUAL
8527: IFTRUE 8531
8529: GO 8593
8531: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8532: LD_VAR 0 1
8536: PPUSH
8537: LD_VAR 0 2
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 4
8551: PPUSH
8552: LD_VAR 0 5
8556: PPUSH
8557: LD_VAR 0 6
8561: PPUSH
8562: LD_VAR 0 7
8566: PPUSH
8567: LD_VAR 0 8
8571: PPUSH
8572: LD_VAR 0 9
8576: PPUSH
8577: LD_VAR 0 10
8581: PPUSH
8582: LD_VAR 0 11
8586: PPUSH
8587: CALL 62675 0 11
8591: GO 8594
8593: POP
// end ;
8594: PPOPN 11
8596: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_VAR 0 2
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_VAR 0 4
8616: PPUSH
8617: LD_VAR 0 5
8621: PPUSH
8622: CALL 66086 0 5
// end ; end_of_file
8626: PPOPN 5
8628: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8629: LD_INT 0
8631: PPUSH
8632: PPUSH
// if exist_mode then
8633: LD_VAR 0 2
8637: IFFALSE 8662
// unit := CreateCharacter ( prefix & ident ) else
8639: LD_ADDR_VAR 0 5
8643: PUSH
8644: LD_VAR 0 3
8648: PUSH
8649: LD_VAR 0 1
8653: STR
8654: PPUSH
8655: CALL_OW 34
8659: ST_TO_ADDR
8660: GO 8677
// unit := NewCharacter ( ident ) ;
8662: LD_ADDR_VAR 0 5
8666: PUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 25
8676: ST_TO_ADDR
// result := unit ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_VAR 0 5
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 4
8691: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// if not side or not nation then
8696: LD_VAR 0 1
8700: NOT
8701: PUSH
8702: LD_VAR 0 2
8706: NOT
8707: OR
8708: IFFALSE 8712
// exit ;
8710: GO 9480
// case nation of nation_american :
8712: LD_VAR 0 2
8716: PUSH
8717: LD_INT 1
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8939
8725: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8726: LD_ADDR_VAR 0 4
8730: PUSH
8731: LD_INT 35
8733: PUSH
8734: LD_INT 45
8736: PUSH
8737: LD_INT 46
8739: PUSH
8740: LD_INT 47
8742: PUSH
8743: LD_INT 82
8745: PUSH
8746: LD_INT 83
8748: PUSH
8749: LD_INT 84
8751: PUSH
8752: LD_INT 85
8754: PUSH
8755: LD_INT 86
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 6
8766: PUSH
8767: LD_INT 15
8769: PUSH
8770: LD_INT 16
8772: PUSH
8773: LD_INT 7
8775: PUSH
8776: LD_INT 12
8778: PUSH
8779: LD_INT 13
8781: PUSH
8782: LD_INT 10
8784: PUSH
8785: LD_INT 14
8787: PUSH
8788: LD_INT 20
8790: PUSH
8791: LD_INT 21
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 25
8799: PUSH
8800: LD_INT 32
8802: PUSH
8803: LD_INT 27
8805: PUSH
8806: LD_INT 36
8808: PUSH
8809: LD_INT 69
8811: PUSH
8812: LD_INT 39
8814: PUSH
8815: LD_INT 34
8817: PUSH
8818: LD_INT 40
8820: PUSH
8821: LD_INT 48
8823: PUSH
8824: LD_INT 49
8826: PUSH
8827: LD_INT 50
8829: PUSH
8830: LD_INT 51
8832: PUSH
8833: LD_INT 52
8835: PUSH
8836: LD_INT 53
8838: PUSH
8839: LD_INT 54
8841: PUSH
8842: LD_INT 55
8844: PUSH
8845: LD_INT 56
8847: PUSH
8848: LD_INT 57
8850: PUSH
8851: LD_INT 58
8853: PUSH
8854: LD_INT 59
8856: PUSH
8857: LD_INT 60
8859: PUSH
8860: LD_INT 61
8862: PUSH
8863: LD_INT 62
8865: PUSH
8866: LD_INT 80
8868: PUSH
8869: LD_INT 82
8871: PUSH
8872: LD_INT 83
8874: PUSH
8875: LD_INT 84
8877: PUSH
8878: LD_INT 85
8880: PUSH
8881: LD_INT 86
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: ST_TO_ADDR
8937: GO 9404
8939: LD_INT 2
8941: DOUBLE
8942: EQUAL
8943: IFTRUE 8947
8945: GO 9173
8947: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8948: LD_ADDR_VAR 0 4
8952: PUSH
8953: LD_INT 35
8955: PUSH
8956: LD_INT 45
8958: PUSH
8959: LD_INT 46
8961: PUSH
8962: LD_INT 47
8964: PUSH
8965: LD_INT 82
8967: PUSH
8968: LD_INT 83
8970: PUSH
8971: LD_INT 84
8973: PUSH
8974: LD_INT 85
8976: PUSH
8977: LD_INT 87
8979: PUSH
8980: LD_INT 70
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: LD_INT 11
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: LD_INT 4
8994: PUSH
8995: LD_INT 5
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: LD_INT 15
9003: PUSH
9004: LD_INT 18
9006: PUSH
9007: LD_INT 7
9009: PUSH
9010: LD_INT 17
9012: PUSH
9013: LD_INT 8
9015: PUSH
9016: LD_INT 20
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 72
9027: PUSH
9028: LD_INT 26
9030: PUSH
9031: LD_INT 69
9033: PUSH
9034: LD_INT 39
9036: PUSH
9037: LD_INT 40
9039: PUSH
9040: LD_INT 41
9042: PUSH
9043: LD_INT 42
9045: PUSH
9046: LD_INT 43
9048: PUSH
9049: LD_INT 48
9051: PUSH
9052: LD_INT 49
9054: PUSH
9055: LD_INT 50
9057: PUSH
9058: LD_INT 51
9060: PUSH
9061: LD_INT 52
9063: PUSH
9064: LD_INT 53
9066: PUSH
9067: LD_INT 54
9069: PUSH
9070: LD_INT 55
9072: PUSH
9073: LD_INT 56
9075: PUSH
9076: LD_INT 60
9078: PUSH
9079: LD_INT 61
9081: PUSH
9082: LD_INT 62
9084: PUSH
9085: LD_INT 66
9087: PUSH
9088: LD_INT 67
9090: PUSH
9091: LD_INT 68
9093: PUSH
9094: LD_INT 81
9096: PUSH
9097: LD_INT 82
9099: PUSH
9100: LD_INT 83
9102: PUSH
9103: LD_INT 84
9105: PUSH
9106: LD_INT 85
9108: PUSH
9109: LD_INT 87
9111: PUSH
9112: LD_INT 88
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: ST_TO_ADDR
9171: GO 9404
9173: LD_INT 3
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9403
9181: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_INT 46
9189: PUSH
9190: LD_INT 47
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 82
9201: PUSH
9202: LD_INT 83
9204: PUSH
9205: LD_INT 84
9207: PUSH
9208: LD_INT 85
9210: PUSH
9211: LD_INT 86
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 9
9219: PUSH
9220: LD_INT 20
9222: PUSH
9223: LD_INT 19
9225: PUSH
9226: LD_INT 21
9228: PUSH
9229: LD_INT 24
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 25
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 37
9252: PUSH
9253: LD_INT 38
9255: PUSH
9256: LD_INT 32
9258: PUSH
9259: LD_INT 27
9261: PUSH
9262: LD_INT 33
9264: PUSH
9265: LD_INT 69
9267: PUSH
9268: LD_INT 39
9270: PUSH
9271: LD_INT 34
9273: PUSH
9274: LD_INT 40
9276: PUSH
9277: LD_INT 71
9279: PUSH
9280: LD_INT 23
9282: PUSH
9283: LD_INT 44
9285: PUSH
9286: LD_INT 48
9288: PUSH
9289: LD_INT 49
9291: PUSH
9292: LD_INT 50
9294: PUSH
9295: LD_INT 51
9297: PUSH
9298: LD_INT 52
9300: PUSH
9301: LD_INT 53
9303: PUSH
9304: LD_INT 54
9306: PUSH
9307: LD_INT 55
9309: PUSH
9310: LD_INT 56
9312: PUSH
9313: LD_INT 57
9315: PUSH
9316: LD_INT 58
9318: PUSH
9319: LD_INT 59
9321: PUSH
9322: LD_INT 63
9324: PUSH
9325: LD_INT 64
9327: PUSH
9328: LD_INT 65
9330: PUSH
9331: LD_INT 82
9333: PUSH
9334: LD_INT 83
9336: PUSH
9337: LD_INT 84
9339: PUSH
9340: LD_INT 85
9342: PUSH
9343: LD_INT 86
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
9401: GO 9404
9403: POP
// if state > - 1 and state < 3 then
9404: LD_VAR 0 3
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: GREATER
9413: PUSH
9414: LD_VAR 0 3
9418: PUSH
9419: LD_INT 3
9421: LESS
9422: AND
9423: IFFALSE 9480
// for i in result do
9425: LD_ADDR_VAR 0 5
9429: PUSH
9430: LD_VAR 0 4
9434: PUSH
9435: FOR_IN
9436: IFFALSE 9478
// if GetTech ( i , side ) <> state then
9438: LD_VAR 0 5
9442: PPUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 321
9452: PUSH
9453: LD_VAR 0 3
9457: NONEQUAL
9458: IFFALSE 9476
// result := result diff i ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: LD_VAR 0 4
9469: PUSH
9470: LD_VAR 0 5
9474: DIFF
9475: ST_TO_ADDR
9476: GO 9435
9478: POP
9479: POP
// end ;
9480: LD_VAR 0 4
9484: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9485: LD_INT 0
9487: PPUSH
9488: PPUSH
9489: PPUSH
// result := true ;
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9498: LD_ADDR_VAR 0 5
9502: PUSH
9503: LD_VAR 0 2
9507: PPUSH
9508: CALL_OW 480
9512: ST_TO_ADDR
// if not tmp then
9513: LD_VAR 0 5
9517: NOT
9518: IFFALSE 9522
// exit ;
9520: GO 9571
// for i in tmp do
9522: LD_ADDR_VAR 0 4
9526: PUSH
9527: LD_VAR 0 5
9531: PUSH
9532: FOR_IN
9533: IFFALSE 9569
// if GetTech ( i , side ) <> state_researched then
9535: LD_VAR 0 4
9539: PPUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 321
9549: PUSH
9550: LD_INT 2
9552: NONEQUAL
9553: IFFALSE 9567
// begin result := false ;
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_INT 0
9562: ST_TO_ADDR
// exit ;
9563: POP
9564: POP
9565: GO 9571
// end ;
9567: GO 9532
9569: POP
9570: POP
// end ;
9571: LD_VAR 0 3
9575: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9576: LD_INT 0
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9591: LD_VAR 0 1
9595: NOT
9596: PUSH
9597: LD_VAR 0 1
9601: PPUSH
9602: CALL_OW 257
9606: PUSH
9607: LD_INT 9
9609: NONEQUAL
9610: OR
9611: IFFALSE 9615
// exit ;
9613: GO 10188
// side := GetSide ( unit ) ;
9615: LD_ADDR_VAR 0 9
9619: PUSH
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 255
9629: ST_TO_ADDR
// tech_space := tech_spacanom ;
9630: LD_ADDR_VAR 0 12
9634: PUSH
9635: LD_INT 29
9637: ST_TO_ADDR
// tech_time := tech_taurad ;
9638: LD_ADDR_VAR 0 13
9642: PUSH
9643: LD_INT 28
9645: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9646: LD_ADDR_VAR 0 11
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 310
9660: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9661: LD_VAR 0 11
9665: PPUSH
9666: CALL_OW 247
9670: PUSH
9671: LD_INT 2
9673: EQUAL
9674: IFFALSE 9678
// exit ;
9676: GO 10188
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9678: LD_ADDR_VAR 0 8
9682: PUSH
9683: LD_INT 81
9685: PUSH
9686: LD_VAR 0 9
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 3
9697: PUSH
9698: LD_INT 21
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// if not tmp then
9721: LD_VAR 0 8
9725: NOT
9726: IFFALSE 9730
// exit ;
9728: GO 10188
// if in_unit then
9730: LD_VAR 0 11
9734: IFFALSE 9758
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9736: LD_ADDR_VAR 0 10
9740: PUSH
9741: LD_VAR 0 8
9745: PPUSH
9746: LD_VAR 0 11
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
9756: GO 9778
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9758: LD_ADDR_VAR 0 10
9762: PUSH
9763: LD_VAR 0 8
9767: PPUSH
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 74
9777: ST_TO_ADDR
// if not enemy then
9778: LD_VAR 0 10
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 10188
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9787: LD_VAR 0 11
9791: PUSH
9792: LD_VAR 0 11
9796: PPUSH
9797: LD_VAR 0 10
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 13
9809: GREATER
9810: AND
9811: PUSH
9812: LD_VAR 0 1
9816: PPUSH
9817: LD_VAR 0 10
9821: PPUSH
9822: CALL_OW 296
9826: PUSH
9827: LD_INT 12
9829: GREATER
9830: OR
9831: IFFALSE 9835
// exit ;
9833: GO 10188
// missile := [ 1 ] ;
9835: LD_ADDR_VAR 0 14
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9846: LD_VAR 0 9
9850: PPUSH
9851: LD_VAR 0 12
9855: PPUSH
9856: CALL_OW 325
9860: IFFALSE 9889
// missile := Replace ( missile , missile + 1 , 2 ) ;
9862: LD_ADDR_VAR 0 14
9866: PUSH
9867: LD_VAR 0 14
9871: PPUSH
9872: LD_VAR 0 14
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: PPUSH
9881: LD_INT 2
9883: PPUSH
9884: CALL_OW 1
9888: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9889: LD_VAR 0 9
9893: PPUSH
9894: LD_VAR 0 13
9898: PPUSH
9899: CALL_OW 325
9903: PUSH
9904: LD_VAR 0 10
9908: PPUSH
9909: CALL_OW 255
9913: PPUSH
9914: LD_VAR 0 13
9918: PPUSH
9919: CALL_OW 325
9923: NOT
9924: AND
9925: IFFALSE 9954
// missile := Replace ( missile , missile + 1 , 3 ) ;
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_VAR 0 14
9936: PPUSH
9937: LD_VAR 0 14
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: PPUSH
9946: LD_INT 3
9948: PPUSH
9949: CALL_OW 1
9953: ST_TO_ADDR
// if missile < 2 then
9954: LD_VAR 0 14
9958: PUSH
9959: LD_INT 2
9961: LESS
9962: IFFALSE 9966
// exit ;
9964: GO 10188
// x := GetX ( enemy ) ;
9966: LD_ADDR_VAR 0 4
9970: PUSH
9971: LD_VAR 0 10
9975: PPUSH
9976: CALL_OW 250
9980: ST_TO_ADDR
// y := GetY ( enemy ) ;
9981: LD_ADDR_VAR 0 5
9985: PUSH
9986: LD_VAR 0 10
9990: PPUSH
9991: CALL_OW 251
9995: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9996: LD_ADDR_VAR 0 6
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 1
10008: NEG
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 12
10017: PLUS
10018: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10019: LD_ADDR_VAR 0 7
10023: PUSH
10024: LD_VAR 0 5
10028: PUSH
10029: LD_INT 1
10031: NEG
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 12
10040: PLUS
10041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10042: LD_VAR 0 6
10046: PPUSH
10047: LD_VAR 0 7
10051: PPUSH
10052: CALL_OW 488
10056: NOT
10057: IFFALSE 10079
// begin _x := x ;
10059: LD_ADDR_VAR 0 6
10063: PUSH
10064: LD_VAR 0 4
10068: ST_TO_ADDR
// _y := y ;
10069: LD_ADDR_VAR 0 7
10073: PUSH
10074: LD_VAR 0 5
10078: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10079: LD_ADDR_VAR 0 3
10083: PUSH
10084: LD_INT 1
10086: PPUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: CALL_OW 12
10096: ST_TO_ADDR
// case i of 1 :
10097: LD_VAR 0 3
10101: PUSH
10102: LD_INT 1
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10127
10110: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10111: LD_VAR 0 1
10115: PPUSH
10116: LD_VAR 0 10
10120: PPUSH
10121: CALL_OW 115
10125: GO 10188
10127: LD_INT 2
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10157
10135: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10136: LD_VAR 0 1
10140: PPUSH
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: CALL_OW 153
10155: GO 10188
10157: LD_INT 3
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10187
10165: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_VAR 0 7
10180: PPUSH
10181: CALL_OW 154
10185: GO 10188
10187: POP
// end ;
10188: LD_VAR 0 2
10192: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10193: LD_INT 0
10195: PPUSH
10196: PPUSH
10197: PPUSH
10198: PPUSH
10199: PPUSH
10200: PPUSH
// if not unit or not building then
10201: LD_VAR 0 1
10205: NOT
10206: PUSH
10207: LD_VAR 0 2
10211: NOT
10212: OR
10213: IFFALSE 10217
// exit ;
10215: GO 10375
// x := GetX ( building ) ;
10217: LD_ADDR_VAR 0 5
10221: PUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: CALL_OW 250
10231: ST_TO_ADDR
// y := GetY ( building ) ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: LD_VAR 0 2
10241: PPUSH
10242: CALL_OW 251
10246: ST_TO_ADDR
// for i = 0 to 5 do
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: DOUBLE
10253: LD_INT 0
10255: DEC
10256: ST_TO_ADDR
10257: LD_INT 5
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10373
// begin _x := ShiftX ( x , i , 3 ) ;
10263: LD_ADDR_VAR 0 7
10267: PUSH
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_VAR 0 4
10277: PPUSH
10278: LD_INT 3
10280: PPUSH
10281: CALL_OW 272
10285: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10286: LD_ADDR_VAR 0 8
10290: PUSH
10291: LD_VAR 0 6
10295: PPUSH
10296: LD_VAR 0 4
10300: PPUSH
10301: LD_INT 3
10303: PPUSH
10304: CALL_OW 273
10308: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10309: LD_VAR 0 7
10313: PPUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: CALL_OW 488
10323: NOT
10324: IFFALSE 10328
// continue ;
10326: GO 10260
// if HexInfo ( _x , _y ) = 0 then
10328: LD_VAR 0 7
10332: PPUSH
10333: LD_VAR 0 8
10337: PPUSH
10338: CALL_OW 428
10342: PUSH
10343: LD_INT 0
10345: EQUAL
10346: IFFALSE 10371
// begin ComMoveXY ( unit , _x , _y ) ;
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_VAR 0 7
10357: PPUSH
10358: LD_VAR 0 8
10362: PPUSH
10363: CALL_OW 111
// exit ;
10367: POP
10368: POP
10369: GO 10375
// end ; end ;
10371: GO 10260
10373: POP
10374: POP
// end ;
10375: LD_VAR 0 3
10379: RET
// export function ScanBase ( side , base_area ) ; begin
10380: LD_INT 0
10382: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10383: LD_ADDR_VAR 0 3
10387: PUSH
10388: LD_VAR 0 2
10392: PPUSH
10393: LD_INT 81
10395: PUSH
10396: LD_VAR 0 1
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 70
10409: ST_TO_ADDR
// end ;
10410: LD_VAR 0 3
10414: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
// result := false ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// side := GetSide ( unit ) ;
10429: LD_ADDR_VAR 0 3
10433: PUSH
10434: LD_VAR 0 1
10438: PPUSH
10439: CALL_OW 255
10443: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10444: LD_ADDR_VAR 0 4
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 248
10458: ST_TO_ADDR
// case nat of 1 :
10459: LD_VAR 0 4
10463: PUSH
10464: LD_INT 1
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10483
10472: POP
// tech := tech_lassight ; 2 :
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_INT 12
10480: ST_TO_ADDR
10481: GO 10522
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10502
10491: POP
// tech := tech_mortar ; 3 :
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: LD_INT 41
10499: ST_TO_ADDR
10500: GO 10522
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10521
10510: POP
// tech := tech_bazooka ; end ;
10511: LD_ADDR_VAR 0 5
10515: PUSH
10516: LD_INT 44
10518: ST_TO_ADDR
10519: GO 10522
10521: POP
// if Researched ( side , tech ) then
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_VAR 0 5
10531: PPUSH
10532: CALL_OW 325
10536: IFFALSE 10563
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 5
10545: PUSH
10546: LD_INT 8
10548: PUSH
10549: LD_INT 9
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// end ;
10563: LD_VAR 0 2
10567: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10568: LD_INT 0
10570: PPUSH
10571: PPUSH
10572: PPUSH
// if not mines then
10573: LD_VAR 0 2
10577: NOT
10578: IFFALSE 10582
// exit ;
10580: GO 10726
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10582: LD_ADDR_VAR 0 5
10586: PUSH
10587: LD_INT 81
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 3
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 3
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: ST_TO_ADDR
// for i in mines do
10625: LD_ADDR_VAR 0 4
10629: PUSH
10630: LD_VAR 0 2
10634: PUSH
10635: FOR_IN
10636: IFFALSE 10724
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10638: LD_VAR 0 4
10642: PUSH
10643: LD_INT 1
10645: ARRAY
10646: PPUSH
10647: LD_VAR 0 4
10651: PUSH
10652: LD_INT 2
10654: ARRAY
10655: PPUSH
10656: CALL_OW 458
10660: NOT
10661: IFFALSE 10665
// continue ;
10663: GO 10635
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10665: LD_VAR 0 4
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: PPUSH
10674: LD_VAR 0 4
10678: PUSH
10679: LD_INT 2
10681: ARRAY
10682: PPUSH
10683: CALL_OW 428
10687: PUSH
10688: LD_VAR 0 5
10692: IN
10693: IFFALSE 10722
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10695: LD_VAR 0 4
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 4
10708: PUSH
10709: LD_INT 2
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 456
// end ;
10722: GO 10635
10724: POP
10725: POP
// end ;
10726: LD_VAR 0 3
10730: RET
// export function Count ( array ) ; begin
10731: LD_INT 0
10733: PPUSH
// result := array + 0 ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 1
10743: PUSH
10744: LD_INT 0
10746: PLUS
10747: ST_TO_ADDR
// end ;
10748: LD_VAR 0 2
10752: RET
// export function IsEmpty ( building ) ; begin
10753: LD_INT 0
10755: PPUSH
// if not building then
10756: LD_VAR 0 1
10760: NOT
10761: IFFALSE 10765
// exit ;
10763: GO 10808
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10765: LD_ADDR_VAR 0 2
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 255
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 58
10794: PUSH
10795: EMPTY
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PPUSH
10802: CALL_OW 69
10806: IN
10807: ST_TO_ADDR
// end ;
10808: LD_VAR 0 2
10812: RET
// export function IsNotFull ( building ) ; var places ; begin
10813: LD_INT 0
10815: PPUSH
10816: PPUSH
// if not building then
10817: LD_VAR 0 1
10821: NOT
10822: IFFALSE 10826
// exit ;
10824: GO 10854
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: LD_INT 3
10838: PUSH
10839: LD_INT 62
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PPUSH
10849: CALL_OW 72
10853: ST_TO_ADDR
// end ;
10854: LD_VAR 0 2
10858: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10859: LD_INT 0
10861: PPUSH
10862: PPUSH
10863: PPUSH
10864: PPUSH
// tmp := [ ] ;
10865: LD_ADDR_VAR 0 3
10869: PUSH
10870: EMPTY
10871: ST_TO_ADDR
// list := [ ] ;
10872: LD_ADDR_VAR 0 5
10876: PUSH
10877: EMPTY
10878: ST_TO_ADDR
// for i = 16 to 25 do
10879: LD_ADDR_VAR 0 4
10883: PUSH
10884: DOUBLE
10885: LD_INT 16
10887: DEC
10888: ST_TO_ADDR
10889: LD_INT 25
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10966
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10895: LD_ADDR_VAR 0 3
10899: PUSH
10900: LD_VAR 0 3
10904: PUSH
10905: LD_INT 22
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 255
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 91
10924: PUSH
10925: LD_VAR 0 1
10929: PUSH
10930: LD_INT 6
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 30
10940: PUSH
10941: LD_VAR 0 4
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: EMPTY
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ADD
10963: ST_TO_ADDR
10964: GO 10892
10966: POP
10967: POP
// for i = 1 to tmp do
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_VAR 0 3
10982: PUSH
10983: FOR_TO
10984: IFFALSE 11072
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_VAR 0 5
10995: PUSH
10996: LD_VAR 0 3
11000: PUSH
11001: LD_VAR 0 4
11005: ARRAY
11006: PPUSH
11007: CALL_OW 266
11011: PUSH
11012: LD_VAR 0 3
11016: PUSH
11017: LD_VAR 0 4
11021: ARRAY
11022: PPUSH
11023: CALL_OW 250
11027: PUSH
11028: LD_VAR 0 3
11032: PUSH
11033: LD_VAR 0 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 251
11043: PUSH
11044: LD_VAR 0 3
11048: PUSH
11049: LD_VAR 0 4
11053: ARRAY
11054: PPUSH
11055: CALL_OW 254
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: ADD
11069: ST_TO_ADDR
11070: GO 10983
11072: POP
11073: POP
// result := list ;
11074: LD_ADDR_VAR 0 2
11078: PUSH
11079: LD_VAR 0 5
11083: ST_TO_ADDR
// end ;
11084: LD_VAR 0 2
11088: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11089: LD_INT 0
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not factory then
11098: LD_VAR 0 1
11102: NOT
11103: IFFALSE 11107
// exit ;
11105: GO 11700
// if control = control_apeman then
11107: LD_VAR 0 4
11111: PUSH
11112: LD_INT 5
11114: EQUAL
11115: IFFALSE 11224
// begin tmp := UnitsInside ( factory ) ;
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 313
11131: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11132: LD_VAR 0 8
11136: PPUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 12
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 72
11151: NOT
11152: IFFALSE 11162
// control := control_manual ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_INT 1
11161: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL 10859 0 1
11176: ST_TO_ADDR
// if tmp then
11177: LD_VAR 0 8
11181: IFFALSE 11224
// begin for i in tmp do
11183: LD_ADDR_VAR 0 7
11187: PUSH
11188: LD_VAR 0 8
11192: PUSH
11193: FOR_IN
11194: IFFALSE 11222
// if i [ 1 ] = b_ext_radio then
11196: LD_VAR 0 7
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: PUSH
11205: LD_INT 22
11207: EQUAL
11208: IFFALSE 11220
// begin control := control_remote ;
11210: LD_ADDR_VAR 0 4
11214: PUSH
11215: LD_INT 2
11217: ST_TO_ADDR
// break ;
11218: GO 11222
// end ;
11220: GO 11193
11222: POP
11223: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11224: LD_VAR 0 1
11228: PPUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_VAR 0 4
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 448
11253: IFFALSE 11288
// begin result := [ chassis , engine , control , weapon ] ;
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_VAR 0 3
11269: PUSH
11270: LD_VAR 0 4
11274: PUSH
11275: LD_VAR 0 5
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: ST_TO_ADDR
// exit ;
11286: GO 11700
// end ; _chassis := AvailableChassisList ( factory ) ;
11288: LD_ADDR_VAR 0 9
11292: PUSH
11293: LD_VAR 0 1
11297: PPUSH
11298: CALL_OW 475
11302: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11303: LD_ADDR_VAR 0 11
11307: PUSH
11308: LD_VAR 0 1
11312: PPUSH
11313: CALL_OW 476
11317: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11318: LD_ADDR_VAR 0 12
11322: PUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 477
11332: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11333: LD_ADDR_VAR 0 10
11337: PUSH
11338: LD_VAR 0 1
11342: PPUSH
11343: CALL_OW 478
11347: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11348: LD_VAR 0 9
11352: NOT
11353: PUSH
11354: LD_VAR 0 11
11358: NOT
11359: OR
11360: PUSH
11361: LD_VAR 0 12
11365: NOT
11366: OR
11367: PUSH
11368: LD_VAR 0 10
11372: NOT
11373: OR
11374: IFFALSE 11409
// begin result := [ chassis , engine , control , weapon ] ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PUSH
11386: LD_VAR 0 3
11390: PUSH
11391: LD_VAR 0 4
11395: PUSH
11396: LD_VAR 0 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: ST_TO_ADDR
// exit ;
11407: GO 11700
// end ; if not chassis in _chassis then
11409: LD_VAR 0 2
11413: PUSH
11414: LD_VAR 0 9
11418: IN
11419: NOT
11420: IFFALSE 11446
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11422: LD_ADDR_VAR 0 2
11426: PUSH
11427: LD_VAR 0 9
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_VAR 0 9
11439: PPUSH
11440: CALL_OW 12
11444: ARRAY
11445: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11446: LD_VAR 0 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: CALL 11705 0 2
11460: NOT
11461: IFFALSE 11520
// repeat engine := _engine [ 1 ] ;
11463: LD_ADDR_VAR 0 3
11467: PUSH
11468: LD_VAR 0 11
11472: PUSH
11473: LD_INT 1
11475: ARRAY
11476: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11477: LD_ADDR_VAR 0 11
11481: PUSH
11482: LD_VAR 0 11
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 3
11494: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: CALL 11705 0 2
11509: PUSH
11510: LD_VAR 0 11
11514: PUSH
11515: EMPTY
11516: EQUAL
11517: OR
11518: IFFALSE 11463
// if not control in _control then
11520: LD_VAR 0 4
11524: PUSH
11525: LD_VAR 0 12
11529: IN
11530: NOT
11531: IFFALSE 11557
// control := _control [ rand ( 1 , _control ) ] ;
11533: LD_ADDR_VAR 0 4
11537: PUSH
11538: LD_VAR 0 12
11542: PUSH
11543: LD_INT 1
11545: PPUSH
11546: LD_VAR 0 12
11550: PPUSH
11551: CALL_OW 12
11555: ARRAY
11556: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11557: LD_VAR 0 2
11561: PPUSH
11562: LD_VAR 0 5
11566: PPUSH
11567: CALL 11925 0 2
11571: NOT
11572: IFFALSE 11631
// repeat weapon := _weapon [ 1 ] ;
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: LD_VAR 0 10
11583: PUSH
11584: LD_INT 1
11586: ARRAY
11587: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11588: LD_ADDR_VAR 0 10
11592: PUSH
11593: LD_VAR 0 10
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 3
11605: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11606: LD_VAR 0 2
11610: PPUSH
11611: LD_VAR 0 5
11615: PPUSH
11616: CALL 11925 0 2
11620: PUSH
11621: LD_VAR 0 10
11625: PUSH
11626: EMPTY
11627: EQUAL
11628: OR
11629: IFFALSE 11574
// result := [ ] ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: EMPTY
11637: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11638: LD_VAR 0 1
11642: PPUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_VAR 0 4
11657: PPUSH
11658: LD_VAR 0 5
11662: PPUSH
11663: CALL_OW 448
11667: IFFALSE 11700
// result := [ chassis , engine , control , weapon ] ;
11669: LD_ADDR_VAR 0 6
11673: PUSH
11674: LD_VAR 0 2
11678: PUSH
11679: LD_VAR 0 3
11683: PUSH
11684: LD_VAR 0 4
11688: PUSH
11689: LD_VAR 0 5
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: ST_TO_ADDR
// end ;
11700: LD_VAR 0 6
11704: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11705: LD_INT 0
11707: PPUSH
// if not chassis or not engine then
11708: LD_VAR 0 1
11712: NOT
11713: PUSH
11714: LD_VAR 0 2
11718: NOT
11719: OR
11720: IFFALSE 11724
// exit ;
11722: GO 11920
// case engine of engine_solar :
11724: LD_VAR 0 2
11728: PUSH
11729: LD_INT 2
11731: DOUBLE
11732: EQUAL
11733: IFTRUE 11737
11735: GO 11775
11737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11738: LD_ADDR_VAR 0 3
11742: PUSH
11743: LD_INT 11
11745: PUSH
11746: LD_INT 12
11748: PUSH
11749: LD_INT 13
11751: PUSH
11752: LD_INT 14
11754: PUSH
11755: LD_INT 1
11757: PUSH
11758: LD_INT 2
11760: PUSH
11761: LD_INT 3
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: ST_TO_ADDR
11773: GO 11904
11775: LD_INT 1
11777: DOUBLE
11778: EQUAL
11779: IFTRUE 11783
11781: GO 11845
11783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11784: LD_ADDR_VAR 0 3
11788: PUSH
11789: LD_INT 11
11791: PUSH
11792: LD_INT 12
11794: PUSH
11795: LD_INT 13
11797: PUSH
11798: LD_INT 14
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 3
11809: PUSH
11810: LD_INT 4
11812: PUSH
11813: LD_INT 5
11815: PUSH
11816: LD_INT 21
11818: PUSH
11819: LD_INT 23
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_INT 24
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: ST_TO_ADDR
11843: GO 11904
11845: LD_INT 3
11847: DOUBLE
11848: EQUAL
11849: IFTRUE 11853
11851: GO 11903
11853: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: LD_INT 3
11870: PUSH
11871: LD_INT 4
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 23
11885: PUSH
11886: LD_INT 24
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: ST_TO_ADDR
11901: GO 11904
11903: POP
// result := ( chassis in result ) ;
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: LD_VAR 0 1
11913: PUSH
11914: LD_VAR 0 3
11918: IN
11919: ST_TO_ADDR
// end ;
11920: LD_VAR 0 3
11924: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11925: LD_INT 0
11927: PPUSH
// if not chassis or not weapon then
11928: LD_VAR 0 1
11932: NOT
11933: PUSH
11934: LD_VAR 0 2
11938: NOT
11939: OR
11940: IFFALSE 11944
// exit ;
11942: GO 13004
// case weapon of us_machine_gun :
11944: LD_VAR 0 2
11948: PUSH
11949: LD_INT 2
11951: DOUBLE
11952: EQUAL
11953: IFTRUE 11957
11955: GO 11987
11957: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 3
11971: PUSH
11972: LD_INT 4
11974: PUSH
11975: LD_INT 5
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: ST_TO_ADDR
11985: GO 12988
11987: LD_INT 3
11989: DOUBLE
11990: EQUAL
11991: IFTRUE 11995
11993: GO 12025
11995: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: LD_INT 2
12006: PUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 5
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 12988
12025: LD_INT 11
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12063
12033: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: LD_INT 1
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: LD_INT 4
12050: PUSH
12051: LD_INT 5
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: ST_TO_ADDR
12061: GO 12988
12063: LD_INT 4
12065: DOUBLE
12066: EQUAL
12067: IFTRUE 12071
12069: GO 12097
12071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12072: LD_ADDR_VAR 0 3
12076: PUSH
12077: LD_INT 2
12079: PUSH
12080: LD_INT 3
12082: PUSH
12083: LD_INT 4
12085: PUSH
12086: LD_INT 5
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: ST_TO_ADDR
12095: GO 12988
12097: LD_INT 5
12099: DOUBLE
12100: EQUAL
12101: IFTRUE 12105
12103: GO 12131
12105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12106: LD_ADDR_VAR 0 3
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 3
12116: PUSH
12117: LD_INT 4
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: ST_TO_ADDR
12129: GO 12988
12131: LD_INT 9
12133: DOUBLE
12134: EQUAL
12135: IFTRUE 12139
12137: GO 12165
12139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12140: LD_ADDR_VAR 0 3
12144: PUSH
12145: LD_INT 2
12147: PUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 4
12153: PUSH
12154: LD_INT 5
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: ST_TO_ADDR
12163: GO 12988
12165: LD_INT 7
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12199
12173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12174: LD_ADDR_VAR 0 3
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: ST_TO_ADDR
12197: GO 12988
12199: LD_INT 12
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12233
12207: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12208: LD_ADDR_VAR 0 3
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: ST_TO_ADDR
12231: GO 12988
12233: LD_INT 13
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12267
12241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12988
12267: LD_INT 14
12269: DOUBLE
12270: EQUAL
12271: IFTRUE 12275
12273: GO 12293
12275: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12276: LD_ADDR_VAR 0 3
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: ST_TO_ADDR
12291: GO 12988
12293: LD_INT 6
12295: DOUBLE
12296: EQUAL
12297: IFTRUE 12301
12299: GO 12319
12301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12302: LD_ADDR_VAR 0 3
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: LD_INT 5
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: ST_TO_ADDR
12317: GO 12988
12319: LD_INT 10
12321: DOUBLE
12322: EQUAL
12323: IFTRUE 12327
12325: GO 12345
12327: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_INT 4
12335: PUSH
12336: LD_INT 5
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: ST_TO_ADDR
12343: GO 12988
12345: LD_INT 22
12347: DOUBLE
12348: EQUAL
12349: IFTRUE 12353
12351: GO 12379
12353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12354: LD_ADDR_VAR 0 3
12358: PUSH
12359: LD_INT 11
12361: PUSH
12362: LD_INT 12
12364: PUSH
12365: LD_INT 13
12367: PUSH
12368: LD_INT 14
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: ST_TO_ADDR
12377: GO 12988
12379: LD_INT 23
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12387
12385: GO 12413
12387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_INT 11
12395: PUSH
12396: LD_INT 12
12398: PUSH
12399: LD_INT 13
12401: PUSH
12402: LD_INT 14
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: ST_TO_ADDR
12411: GO 12988
12413: LD_INT 24
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12447
12421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12422: LD_ADDR_VAR 0 3
12426: PUSH
12427: LD_INT 11
12429: PUSH
12430: LD_INT 12
12432: PUSH
12433: LD_INT 13
12435: PUSH
12436: LD_INT 14
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12988
12447: LD_INT 30
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12481
12455: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 11
12463: PUSH
12464: LD_INT 12
12466: PUSH
12467: LD_INT 13
12469: PUSH
12470: LD_INT 14
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: ST_TO_ADDR
12479: GO 12988
12481: LD_INT 25
12483: DOUBLE
12484: EQUAL
12485: IFTRUE 12489
12487: GO 12507
12489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12490: LD_ADDR_VAR 0 3
12494: PUSH
12495: LD_INT 13
12497: PUSH
12498: LD_INT 14
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: ST_TO_ADDR
12505: GO 12988
12507: LD_INT 27
12509: DOUBLE
12510: EQUAL
12511: IFTRUE 12515
12513: GO 12533
12515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: LD_INT 13
12523: PUSH
12524: LD_INT 14
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
12531: GO 12988
12533: LD_INT 92
12535: DOUBLE
12536: EQUAL
12537: IFTRUE 12541
12539: GO 12567
12541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_INT 11
12549: PUSH
12550: LD_INT 12
12552: PUSH
12553: LD_INT 13
12555: PUSH
12556: LD_INT 14
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: ST_TO_ADDR
12565: GO 12988
12567: LD_INT 28
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 12593
12575: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12576: LD_ADDR_VAR 0 3
12580: PUSH
12581: LD_INT 13
12583: PUSH
12584: LD_INT 14
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12988
12593: LD_INT 29
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12619
12601: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 14
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: ST_TO_ADDR
12617: GO 12988
12619: LD_INT 31
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 12645
12627: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 13
12635: PUSH
12636: LD_INT 14
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: ST_TO_ADDR
12643: GO 12988
12645: LD_INT 26
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12671
12653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12654: LD_ADDR_VAR 0 3
12658: PUSH
12659: LD_INT 13
12661: PUSH
12662: LD_INT 14
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: ST_TO_ADDR
12669: GO 12988
12671: LD_INT 42
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12705
12679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 21
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_INT 23
12693: PUSH
12694: LD_INT 24
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: ST_TO_ADDR
12703: GO 12988
12705: LD_INT 43
12707: DOUBLE
12708: EQUAL
12709: IFTRUE 12713
12711: GO 12739
12713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12714: LD_ADDR_VAR 0 3
12718: PUSH
12719: LD_INT 21
12721: PUSH
12722: LD_INT 22
12724: PUSH
12725: LD_INT 23
12727: PUSH
12728: LD_INT 24
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: ST_TO_ADDR
12737: GO 12988
12739: LD_INT 44
12741: DOUBLE
12742: EQUAL
12743: IFTRUE 12747
12745: GO 12773
12747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_INT 21
12755: PUSH
12756: LD_INT 22
12758: PUSH
12759: LD_INT 23
12761: PUSH
12762: LD_INT 24
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 12988
12773: LD_INT 45
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12807
12781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 21
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_INT 23
12795: PUSH
12796: LD_INT 24
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
12805: GO 12988
12807: LD_INT 49
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12815
12813: GO 12841
12815: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 22
12826: PUSH
12827: LD_INT 23
12829: PUSH
12830: LD_INT 24
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: ST_TO_ADDR
12839: GO 12988
12841: LD_INT 51
12843: DOUBLE
12844: EQUAL
12845: IFTRUE 12849
12847: GO 12875
12849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12850: LD_ADDR_VAR 0 3
12854: PUSH
12855: LD_INT 21
12857: PUSH
12858: LD_INT 22
12860: PUSH
12861: LD_INT 23
12863: PUSH
12864: LD_INT 24
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
12873: GO 12988
12875: LD_INT 52
12877: DOUBLE
12878: EQUAL
12879: IFTRUE 12883
12881: GO 12909
12883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12884: LD_ADDR_VAR 0 3
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 23
12897: PUSH
12898: LD_INT 24
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
12907: GO 12988
12909: LD_INT 53
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12935
12917: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: ST_TO_ADDR
12933: GO 12988
12935: LD_INT 46
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12961
12943: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12944: LD_ADDR_VAR 0 3
12948: PUSH
12949: LD_INT 23
12951: PUSH
12952: LD_INT 24
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: ST_TO_ADDR
12959: GO 12988
12961: LD_INT 47
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12987
12969: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: LD_INT 23
12977: PUSH
12978: LD_INT 24
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 12988
12987: POP
// result := ( chassis in result ) ;
12988: LD_ADDR_VAR 0 3
12992: PUSH
12993: LD_VAR 0 1
12997: PUSH
12998: LD_VAR 0 3
13002: IN
13003: ST_TO_ADDR
// end ;
13004: LD_VAR 0 3
13008: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13009: LD_INT 0
13011: PPUSH
13012: PPUSH
13013: PPUSH
13014: PPUSH
13015: PPUSH
13016: PPUSH
13017: PPUSH
// result := array ;
13018: LD_ADDR_VAR 0 5
13022: PUSH
13023: LD_VAR 0 1
13027: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13028: LD_VAR 0 1
13032: NOT
13033: PUSH
13034: LD_VAR 0 2
13038: NOT
13039: OR
13040: PUSH
13041: LD_VAR 0 3
13045: NOT
13046: OR
13047: PUSH
13048: LD_VAR 0 2
13052: PUSH
13053: LD_VAR 0 1
13057: GREATER
13058: OR
13059: PUSH
13060: LD_VAR 0 3
13064: PUSH
13065: LD_VAR 0 1
13069: GREATER
13070: OR
13071: IFFALSE 13075
// exit ;
13073: GO 13371
// if direction then
13075: LD_VAR 0 4
13079: IFFALSE 13143
// begin d := 1 ;
13081: LD_ADDR_VAR 0 9
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if i_from > i_to then
13089: LD_VAR 0 2
13093: PUSH
13094: LD_VAR 0 3
13098: GREATER
13099: IFFALSE 13125
// length := ( array - i_from ) + i_to else
13101: LD_ADDR_VAR 0 11
13105: PUSH
13106: LD_VAR 0 1
13110: PUSH
13111: LD_VAR 0 2
13115: MINUS
13116: PUSH
13117: LD_VAR 0 3
13121: PLUS
13122: ST_TO_ADDR
13123: GO 13141
// length := i_to - i_from ;
13125: LD_ADDR_VAR 0 11
13129: PUSH
13130: LD_VAR 0 3
13134: PUSH
13135: LD_VAR 0 2
13139: MINUS
13140: ST_TO_ADDR
// end else
13141: GO 13204
// begin d := - 1 ;
13143: LD_ADDR_VAR 0 9
13147: PUSH
13148: LD_INT 1
13150: NEG
13151: ST_TO_ADDR
// if i_from > i_to then
13152: LD_VAR 0 2
13156: PUSH
13157: LD_VAR 0 3
13161: GREATER
13162: IFFALSE 13182
// length := i_from - i_to else
13164: LD_ADDR_VAR 0 11
13168: PUSH
13169: LD_VAR 0 2
13173: PUSH
13174: LD_VAR 0 3
13178: MINUS
13179: ST_TO_ADDR
13180: GO 13204
// length := ( array - i_to ) + i_from ;
13182: LD_ADDR_VAR 0 11
13186: PUSH
13187: LD_VAR 0 1
13191: PUSH
13192: LD_VAR 0 3
13196: MINUS
13197: PUSH
13198: LD_VAR 0 2
13202: PLUS
13203: ST_TO_ADDR
// end ; if not length then
13204: LD_VAR 0 11
13208: NOT
13209: IFFALSE 13213
// exit ;
13211: GO 13371
// tmp := array ;
13213: LD_ADDR_VAR 0 10
13217: PUSH
13218: LD_VAR 0 1
13222: ST_TO_ADDR
// for i = 1 to length do
13223: LD_ADDR_VAR 0 6
13227: PUSH
13228: DOUBLE
13229: LD_INT 1
13231: DEC
13232: ST_TO_ADDR
13233: LD_VAR 0 11
13237: PUSH
13238: FOR_TO
13239: IFFALSE 13359
// begin for j = 1 to array do
13241: LD_ADDR_VAR 0 7
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_VAR 0 1
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13345
// begin k := j + d ;
13259: LD_ADDR_VAR 0 8
13263: PUSH
13264: LD_VAR 0 7
13268: PUSH
13269: LD_VAR 0 9
13273: PLUS
13274: ST_TO_ADDR
// if k > array then
13275: LD_VAR 0 8
13279: PUSH
13280: LD_VAR 0 1
13284: GREATER
13285: IFFALSE 13295
// k := 1 ;
13287: LD_ADDR_VAR 0 8
13291: PUSH
13292: LD_INT 1
13294: ST_TO_ADDR
// if not k then
13295: LD_VAR 0 8
13299: NOT
13300: IFFALSE 13312
// k := array ;
13302: LD_ADDR_VAR 0 8
13306: PUSH
13307: LD_VAR 0 1
13311: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13312: LD_ADDR_VAR 0 10
13316: PUSH
13317: LD_VAR 0 10
13321: PPUSH
13322: LD_VAR 0 8
13326: PPUSH
13327: LD_VAR 0 1
13331: PUSH
13332: LD_VAR 0 7
13336: ARRAY
13337: PPUSH
13338: CALL_OW 1
13342: ST_TO_ADDR
// end ;
13343: GO 13256
13345: POP
13346: POP
// array := tmp ;
13347: LD_ADDR_VAR 0 1
13351: PUSH
13352: LD_VAR 0 10
13356: ST_TO_ADDR
// end ;
13357: GO 13238
13359: POP
13360: POP
// result := array ;
13361: LD_ADDR_VAR 0 5
13365: PUSH
13366: LD_VAR 0 1
13370: ST_TO_ADDR
// end ;
13371: LD_VAR 0 5
13375: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
// result := 0 ;
13380: LD_ADDR_VAR 0 3
13384: PUSH
13385: LD_INT 0
13387: ST_TO_ADDR
// if not array or not value in array then
13388: LD_VAR 0 1
13392: NOT
13393: PUSH
13394: LD_VAR 0 2
13398: PUSH
13399: LD_VAR 0 1
13403: IN
13404: NOT
13405: OR
13406: IFFALSE 13410
// exit ;
13408: GO 13464
// for i = 1 to array do
13410: LD_ADDR_VAR 0 4
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 1
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13462
// if value = array [ i ] then
13428: LD_VAR 0 2
13432: PUSH
13433: LD_VAR 0 1
13437: PUSH
13438: LD_VAR 0 4
13442: ARRAY
13443: EQUAL
13444: IFFALSE 13460
// begin result := i ;
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_VAR 0 4
13455: ST_TO_ADDR
// exit ;
13456: POP
13457: POP
13458: GO 13464
// end ;
13460: GO 13425
13462: POP
13463: POP
// end ;
13464: LD_VAR 0 3
13468: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13469: LD_INT 0
13471: PPUSH
// vc_chassis := chassis ;
13472: LD_ADDR_OWVAR 37
13476: PUSH
13477: LD_VAR 0 1
13481: ST_TO_ADDR
// vc_engine := engine ;
13482: LD_ADDR_OWVAR 39
13486: PUSH
13487: LD_VAR 0 2
13491: ST_TO_ADDR
// vc_control := control ;
13492: LD_ADDR_OWVAR 38
13496: PUSH
13497: LD_VAR 0 3
13501: ST_TO_ADDR
// vc_weapon := weapon ;
13502: LD_ADDR_OWVAR 40
13506: PUSH
13507: LD_VAR 0 4
13511: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13512: LD_ADDR_OWVAR 41
13516: PUSH
13517: LD_VAR 0 5
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 6
13526: RET
// export function WantPlant ( unit ) ; var task ; begin
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// result := false ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13539: LD_ADDR_VAR 0 3
13543: PUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 437
13553: ST_TO_ADDR
// if task then
13554: LD_VAR 0 3
13558: IFFALSE 13586
// if task [ 1 ] [ 1 ] = p then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PUSH
13569: LD_INT 1
13571: ARRAY
13572: PUSH
13573: LD_STRING p
13575: EQUAL
13576: IFFALSE 13586
// result := true ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 1
13585: ST_TO_ADDR
// end ;
13586: LD_VAR 0 2
13590: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
// if pos < 1 then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: LESS
13605: IFFALSE 13609
// exit ;
13607: GO 13912
// if pos = 1 then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 1
13616: EQUAL
13617: IFFALSE 13650
// result := Replace ( arr , pos [ 1 ] , value ) else
13619: LD_ADDR_VAR 0 4
13623: PUSH
13624: LD_VAR 0 1
13628: PPUSH
13629: LD_VAR 0 2
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: CALL_OW 1
13647: ST_TO_ADDR
13648: GO 13912
// begin tmp := arr ;
13650: LD_ADDR_VAR 0 6
13654: PUSH
13655: LD_VAR 0 1
13659: ST_TO_ADDR
// s_arr := [ tmp ] ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 6
13669: PUSH
13670: EMPTY
13671: LIST
13672: ST_TO_ADDR
// for i = 1 to pos - 1 do
13673: LD_ADDR_VAR 0 5
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 2
13687: PUSH
13688: LD_INT 1
13690: MINUS
13691: PUSH
13692: FOR_TO
13693: IFFALSE 13738
// begin tmp := tmp [ pos [ i ] ] ;
13695: LD_ADDR_VAR 0 6
13699: PUSH
13700: LD_VAR 0 6
13704: PUSH
13705: LD_VAR 0 2
13709: PUSH
13710: LD_VAR 0 5
13714: ARRAY
13715: ARRAY
13716: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13717: LD_ADDR_VAR 0 7
13721: PUSH
13722: LD_VAR 0 7
13726: PUSH
13727: LD_VAR 0 6
13731: PUSH
13732: EMPTY
13733: LIST
13734: ADD
13735: ST_TO_ADDR
// end ;
13736: GO 13692
13738: POP
13739: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13740: LD_ADDR_VAR 0 6
13744: PUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: LD_VAR 0 2
13754: PUSH
13755: LD_VAR 0 2
13759: ARRAY
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: CALL_OW 1
13770: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13771: LD_ADDR_VAR 0 7
13775: PUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: LD_VAR 0 6
13790: PPUSH
13791: CALL_OW 1
13795: ST_TO_ADDR
// for i = s_arr downto 2 do
13796: LD_ADDR_VAR 0 5
13800: PUSH
13801: DOUBLE
13802: LD_VAR 0 7
13806: INC
13807: ST_TO_ADDR
13808: LD_INT 2
13810: PUSH
13811: FOR_DOWNTO
13812: IFFALSE 13896
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_VAR 0 7
13823: PUSH
13824: LD_VAR 0 5
13828: PUSH
13829: LD_INT 1
13831: MINUS
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 2
13838: PUSH
13839: LD_VAR 0 5
13843: PUSH
13844: LD_INT 1
13846: MINUS
13847: ARRAY
13848: PPUSH
13849: LD_VAR 0 7
13853: PUSH
13854: LD_VAR 0 5
13858: ARRAY
13859: PPUSH
13860: CALL_OW 1
13864: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13865: LD_ADDR_VAR 0 7
13869: PUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: LD_VAR 0 5
13879: PUSH
13880: LD_INT 1
13882: MINUS
13883: PPUSH
13884: LD_VAR 0 6
13888: PPUSH
13889: CALL_OW 1
13893: ST_TO_ADDR
// end ;
13894: GO 13811
13896: POP
13897: POP
// result := s_arr [ 1 ] ;
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: LD_VAR 0 7
13907: PUSH
13908: LD_INT 1
13910: ARRAY
13911: ST_TO_ADDR
// end ; end ;
13912: LD_VAR 0 4
13916: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// if not list then
13921: LD_VAR 0 1
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 14021
// i := list [ pos1 ] ;
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_VAR 0 1
13939: PUSH
13940: LD_VAR 0 2
13944: ARRAY
13945: ST_TO_ADDR
// if not i then
13946: LD_VAR 0 5
13950: NOT
13951: IFFALSE 13955
// exit ;
13953: GO 14021
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13955: LD_ADDR_VAR 0 1
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: LD_VAR 0 2
13969: PPUSH
13970: LD_VAR 0 1
13974: PUSH
13975: LD_VAR 0 3
13979: ARRAY
13980: PPUSH
13981: CALL_OW 1
13985: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_VAR 0 1
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: LD_VAR 0 5
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// result := list ;
14011: LD_ADDR_VAR 0 4
14015: PUSH
14016: LD_VAR 0 1
14020: ST_TO_ADDR
// end ;
14021: LD_VAR 0 4
14025: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14026: LD_INT 0
14028: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14029: LD_ADDR_VAR 0 5
14033: PUSH
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 251
14053: PPUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: CALL 14079 0 5
14073: ST_TO_ADDR
// end ;
14074: LD_VAR 0 5
14078: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
// if not list then
14085: LD_VAR 0 3
14089: NOT
14090: IFFALSE 14094
// exit ;
14092: GO 14482
// result := [ ] ;
14094: LD_ADDR_VAR 0 6
14098: PUSH
14099: EMPTY
14100: ST_TO_ADDR
// for i in list do
14101: LD_ADDR_VAR 0 7
14105: PUSH
14106: LD_VAR 0 3
14110: PUSH
14111: FOR_IN
14112: IFFALSE 14314
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14114: LD_ADDR_VAR 0 9
14118: PUSH
14119: LD_VAR 0 7
14123: PPUSH
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: CALL_OW 297
14138: ST_TO_ADDR
// if not result then
14139: LD_VAR 0 6
14143: NOT
14144: IFFALSE 14170
// result := [ [ i , tmp ] ] else
14146: LD_ADDR_VAR 0 6
14150: PUSH
14151: LD_VAR 0 7
14155: PUSH
14156: LD_VAR 0 9
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: ST_TO_ADDR
14168: GO 14312
// begin if result [ result ] [ 2 ] < tmp then
14170: LD_VAR 0 6
14174: PUSH
14175: LD_VAR 0 6
14179: ARRAY
14180: PUSH
14181: LD_INT 2
14183: ARRAY
14184: PUSH
14185: LD_VAR 0 9
14189: LESS
14190: IFFALSE 14232
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14192: LD_ADDR_VAR 0 6
14196: PUSH
14197: LD_VAR 0 6
14201: PPUSH
14202: LD_VAR 0 6
14206: PUSH
14207: LD_INT 1
14209: PLUS
14210: PPUSH
14211: LD_VAR 0 7
14215: PUSH
14216: LD_VAR 0 9
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 2
14229: ST_TO_ADDR
14230: GO 14312
// for j = 1 to result do
14232: LD_ADDR_VAR 0 8
14236: PUSH
14237: DOUBLE
14238: LD_INT 1
14240: DEC
14241: ST_TO_ADDR
14242: LD_VAR 0 6
14246: PUSH
14247: FOR_TO
14248: IFFALSE 14310
// begin if tmp < result [ j ] [ 2 ] then
14250: LD_VAR 0 9
14254: PUSH
14255: LD_VAR 0 6
14259: PUSH
14260: LD_VAR 0 8
14264: ARRAY
14265: PUSH
14266: LD_INT 2
14268: ARRAY
14269: LESS
14270: IFFALSE 14308
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14272: LD_ADDR_VAR 0 6
14276: PUSH
14277: LD_VAR 0 6
14281: PPUSH
14282: LD_VAR 0 8
14286: PPUSH
14287: LD_VAR 0 7
14291: PUSH
14292: LD_VAR 0 9
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PPUSH
14301: CALL_OW 2
14305: ST_TO_ADDR
// break ;
14306: GO 14310
// end ; end ;
14308: GO 14247
14310: POP
14311: POP
// end ; end ;
14312: GO 14111
14314: POP
14315: POP
// if result and not asc then
14316: LD_VAR 0 6
14320: PUSH
14321: LD_VAR 0 4
14325: NOT
14326: AND
14327: IFFALSE 14402
// begin tmp := result ;
14329: LD_ADDR_VAR 0 9
14333: PUSH
14334: LD_VAR 0 6
14338: ST_TO_ADDR
// for i = tmp downto 1 do
14339: LD_ADDR_VAR 0 7
14343: PUSH
14344: DOUBLE
14345: LD_VAR 0 9
14349: INC
14350: ST_TO_ADDR
14351: LD_INT 1
14353: PUSH
14354: FOR_DOWNTO
14355: IFFALSE 14400
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14357: LD_ADDR_VAR 0 6
14361: PUSH
14362: LD_VAR 0 6
14366: PPUSH
14367: LD_VAR 0 9
14371: PUSH
14372: LD_VAR 0 7
14376: MINUS
14377: PUSH
14378: LD_INT 1
14380: PLUS
14381: PPUSH
14382: LD_VAR 0 9
14386: PUSH
14387: LD_VAR 0 7
14391: ARRAY
14392: PPUSH
14393: CALL_OW 1
14397: ST_TO_ADDR
14398: GO 14354
14400: POP
14401: POP
// end ; tmp := [ ] ;
14402: LD_ADDR_VAR 0 9
14406: PUSH
14407: EMPTY
14408: ST_TO_ADDR
// if mode then
14409: LD_VAR 0 5
14413: IFFALSE 14482
// begin for i = 1 to result do
14415: LD_ADDR_VAR 0 7
14419: PUSH
14420: DOUBLE
14421: LD_INT 1
14423: DEC
14424: ST_TO_ADDR
14425: LD_VAR 0 6
14429: PUSH
14430: FOR_TO
14431: IFFALSE 14470
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14433: LD_ADDR_VAR 0 9
14437: PUSH
14438: LD_VAR 0 9
14442: PPUSH
14443: LD_VAR 0 7
14447: PPUSH
14448: LD_VAR 0 6
14452: PUSH
14453: LD_VAR 0 7
14457: ARRAY
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: CALL_OW 1
14467: ST_TO_ADDR
14468: GO 14430
14470: POP
14471: POP
// result := tmp ;
14472: LD_ADDR_VAR 0 6
14476: PUSH
14477: LD_VAR 0 9
14481: ST_TO_ADDR
// end ; end ;
14482: LD_VAR 0 6
14486: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14495: LD_ADDR_VAR 0 5
14499: PUSH
14500: LD_INT 0
14502: PUSH
14503: LD_INT 0
14505: PUSH
14506: LD_INT 0
14508: PUSH
14509: EMPTY
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: ST_TO_ADDR
// if not x or not y then
14517: LD_VAR 0 2
14521: NOT
14522: PUSH
14523: LD_VAR 0 3
14527: NOT
14528: OR
14529: IFFALSE 14533
// exit ;
14531: GO 16183
// if not range then
14533: LD_VAR 0 4
14537: NOT
14538: IFFALSE 14548
// range := 10 ;
14540: LD_ADDR_VAR 0 4
14544: PUSH
14545: LD_INT 10
14547: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14548: LD_ADDR_VAR 0 8
14552: PUSH
14553: LD_INT 81
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 92
14567: PUSH
14568: LD_VAR 0 2
14572: PUSH
14573: LD_VAR 0 3
14577: PUSH
14578: LD_VAR 0 4
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 3
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: ST_TO_ADDR
// if not tmp then
14616: LD_VAR 0 8
14620: NOT
14621: IFFALSE 14625
// exit ;
14623: GO 16183
// for i in tmp do
14625: LD_ADDR_VAR 0 6
14629: PUSH
14630: LD_VAR 0 8
14634: PUSH
14635: FOR_IN
14636: IFFALSE 16158
// begin points := [ 0 , 0 , 0 ] ;
14638: LD_ADDR_VAR 0 9
14642: PUSH
14643: LD_INT 0
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: LD_INT 0
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: ST_TO_ADDR
// bpoints := 1 ;
14657: LD_ADDR_VAR 0 10
14661: PUSH
14662: LD_INT 1
14664: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14665: LD_VAR 0 6
14669: PPUSH
14670: CALL_OW 247
14674: PUSH
14675: LD_INT 1
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 15261
14683: POP
// begin if GetClass ( i ) = 1 then
14684: LD_VAR 0 6
14688: PPUSH
14689: CALL_OW 257
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: IFFALSE 14718
// points := [ 10 , 5 , 3 ] ;
14699: LD_ADDR_VAR 0 9
14703: PUSH
14704: LD_INT 10
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14718: LD_VAR 0 6
14722: PPUSH
14723: CALL_OW 257
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: LD_INT 4
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: IN
14742: IFFALSE 14763
// points := [ 3 , 2 , 1 ] ;
14744: LD_ADDR_VAR 0 9
14748: PUSH
14749: LD_INT 3
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14763: LD_VAR 0 6
14767: PPUSH
14768: CALL_OW 257
14772: PUSH
14773: LD_INT 5
14775: EQUAL
14776: IFFALSE 14797
// points := [ 130 , 5 , 2 ] ;
14778: LD_ADDR_VAR 0 9
14782: PUSH
14783: LD_INT 130
14785: PUSH
14786: LD_INT 5
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14797: LD_VAR 0 6
14801: PPUSH
14802: CALL_OW 257
14806: PUSH
14807: LD_INT 8
14809: EQUAL
14810: IFFALSE 14831
// points := [ 35 , 35 , 30 ] ;
14812: LD_ADDR_VAR 0 9
14816: PUSH
14817: LD_INT 35
14819: PUSH
14820: LD_INT 35
14822: PUSH
14823: LD_INT 30
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14831: LD_VAR 0 6
14835: PPUSH
14836: CALL_OW 257
14840: PUSH
14841: LD_INT 9
14843: EQUAL
14844: IFFALSE 14865
// points := [ 20 , 55 , 40 ] ;
14846: LD_ADDR_VAR 0 9
14850: PUSH
14851: LD_INT 20
14853: PUSH
14854: LD_INT 55
14856: PUSH
14857: LD_INT 40
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14865: LD_VAR 0 6
14869: PPUSH
14870: CALL_OW 257
14874: PUSH
14875: LD_INT 12
14877: PUSH
14878: LD_INT 16
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: IN
14885: IFFALSE 14906
// points := [ 5 , 3 , 2 ] ;
14887: LD_ADDR_VAR 0 9
14891: PUSH
14892: LD_INT 5
14894: PUSH
14895: LD_INT 3
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14906: LD_VAR 0 6
14910: PPUSH
14911: CALL_OW 257
14915: PUSH
14916: LD_INT 17
14918: EQUAL
14919: IFFALSE 14940
// points := [ 100 , 50 , 75 ] ;
14921: LD_ADDR_VAR 0 9
14925: PUSH
14926: LD_INT 100
14928: PUSH
14929: LD_INT 50
14931: PUSH
14932: LD_INT 75
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14940: LD_VAR 0 6
14944: PPUSH
14945: CALL_OW 257
14949: PUSH
14950: LD_INT 15
14952: EQUAL
14953: IFFALSE 14974
// points := [ 10 , 5 , 3 ] ;
14955: LD_ADDR_VAR 0 9
14959: PUSH
14960: LD_INT 10
14962: PUSH
14963: LD_INT 5
14965: PUSH
14966: LD_INT 3
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14974: LD_VAR 0 6
14978: PPUSH
14979: CALL_OW 257
14983: PUSH
14984: LD_INT 14
14986: EQUAL
14987: IFFALSE 15008
// points := [ 10 , 0 , 0 ] ;
14989: LD_ADDR_VAR 0 9
14993: PUSH
14994: LD_INT 10
14996: PUSH
14997: LD_INT 0
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15008: LD_VAR 0 6
15012: PPUSH
15013: CALL_OW 257
15017: PUSH
15018: LD_INT 11
15020: EQUAL
15021: IFFALSE 15042
// points := [ 30 , 10 , 5 ] ;
15023: LD_ADDR_VAR 0 9
15027: PUSH
15028: LD_INT 30
15030: PUSH
15031: LD_INT 10
15033: PUSH
15034: LD_INT 5
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: LIST
15041: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15042: LD_VAR 0 1
15046: PPUSH
15047: LD_INT 5
15049: PPUSH
15050: CALL_OW 321
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: IFFALSE 15075
// bpoints := bpoints * 1.8 ;
15060: LD_ADDR_VAR 0 10
15064: PUSH
15065: LD_VAR 0 10
15069: PUSH
15070: LD_REAL  1.80000000000000E+0000
15073: MUL
15074: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15075: LD_VAR 0 6
15079: PPUSH
15080: CALL_OW 257
15084: PUSH
15085: LD_INT 1
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: LD_INT 4
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: IN
15103: PUSH
15104: LD_VAR 0 1
15108: PPUSH
15109: LD_INT 51
15111: PPUSH
15112: CALL_OW 321
15116: PUSH
15117: LD_INT 2
15119: EQUAL
15120: AND
15121: IFFALSE 15138
// bpoints := bpoints * 1.2 ;
15123: LD_ADDR_VAR 0 10
15127: PUSH
15128: LD_VAR 0 10
15132: PUSH
15133: LD_REAL  1.20000000000000E+0000
15136: MUL
15137: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15138: LD_VAR 0 6
15142: PPUSH
15143: CALL_OW 257
15147: PUSH
15148: LD_INT 5
15150: PUSH
15151: LD_INT 7
15153: PUSH
15154: LD_INT 9
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: IN
15162: PUSH
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 52
15170: PPUSH
15171: CALL_OW 321
15175: PUSH
15176: LD_INT 2
15178: EQUAL
15179: AND
15180: IFFALSE 15197
// bpoints := bpoints * 1.5 ;
15182: LD_ADDR_VAR 0 10
15186: PUSH
15187: LD_VAR 0 10
15191: PUSH
15192: LD_REAL  1.50000000000000E+0000
15195: MUL
15196: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15197: LD_VAR 0 1
15201: PPUSH
15202: LD_INT 66
15204: PPUSH
15205: CALL_OW 321
15209: PUSH
15210: LD_INT 2
15212: EQUAL
15213: IFFALSE 15230
// bpoints := bpoints * 1.1 ;
15215: LD_ADDR_VAR 0 10
15219: PUSH
15220: LD_VAR 0 10
15224: PUSH
15225: LD_REAL  1.10000000000000E+0000
15228: MUL
15229: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15230: LD_ADDR_VAR 0 10
15234: PUSH
15235: LD_VAR 0 10
15239: PUSH
15240: LD_VAR 0 6
15244: PPUSH
15245: LD_INT 1
15247: PPUSH
15248: CALL_OW 259
15252: PUSH
15253: LD_REAL  1.15000000000000E+0000
15256: MUL
15257: MUL
15258: ST_TO_ADDR
// end ; unit_vehicle :
15259: GO 16087
15261: LD_INT 2
15263: DOUBLE
15264: EQUAL
15265: IFTRUE 15269
15267: GO 16075
15269: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15270: LD_VAR 0 6
15274: PPUSH
15275: CALL_OW 264
15279: PUSH
15280: LD_INT 2
15282: PUSH
15283: LD_INT 42
15285: PUSH
15286: LD_INT 24
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: LIST
15293: IN
15294: IFFALSE 15315
// points := [ 25 , 5 , 3 ] ;
15296: LD_ADDR_VAR 0 9
15300: PUSH
15301: LD_INT 25
15303: PUSH
15304: LD_INT 5
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15315: LD_VAR 0 6
15319: PPUSH
15320: CALL_OW 264
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: LD_INT 43
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: IN
15339: IFFALSE 15360
// points := [ 40 , 15 , 5 ] ;
15341: LD_ADDR_VAR 0 9
15345: PUSH
15346: LD_INT 40
15348: PUSH
15349: LD_INT 15
15351: PUSH
15352: LD_INT 5
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15360: LD_VAR 0 6
15364: PPUSH
15365: CALL_OW 264
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 23
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: IN
15380: IFFALSE 15401
// points := [ 7 , 25 , 8 ] ;
15382: LD_ADDR_VAR 0 9
15386: PUSH
15387: LD_INT 7
15389: PUSH
15390: LD_INT 25
15392: PUSH
15393: LD_INT 8
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15401: LD_VAR 0 6
15405: PPUSH
15406: CALL_OW 264
15410: PUSH
15411: LD_INT 5
15413: PUSH
15414: LD_INT 27
15416: PUSH
15417: LD_INT 44
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: IN
15425: IFFALSE 15446
// points := [ 14 , 50 , 16 ] ;
15427: LD_ADDR_VAR 0 9
15431: PUSH
15432: LD_INT 14
15434: PUSH
15435: LD_INT 50
15437: PUSH
15438: LD_INT 16
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: LIST
15445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15446: LD_VAR 0 6
15450: PPUSH
15451: CALL_OW 264
15455: PUSH
15456: LD_INT 6
15458: PUSH
15459: LD_INT 46
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: IN
15466: IFFALSE 15487
// points := [ 32 , 120 , 70 ] ;
15468: LD_ADDR_VAR 0 9
15472: PUSH
15473: LD_INT 32
15475: PUSH
15476: LD_INT 120
15478: PUSH
15479: LD_INT 70
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15487: LD_VAR 0 6
15491: PPUSH
15492: CALL_OW 264
15496: PUSH
15497: LD_INT 7
15499: PUSH
15500: LD_INT 28
15502: PUSH
15503: LD_INT 45
15505: PUSH
15506: LD_INT 92
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: IN
15515: IFFALSE 15536
// points := [ 35 , 20 , 45 ] ;
15517: LD_ADDR_VAR 0 9
15521: PUSH
15522: LD_INT 35
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 45
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15536: LD_VAR 0 6
15540: PPUSH
15541: CALL_OW 264
15545: PUSH
15546: LD_INT 47
15548: PUSH
15549: EMPTY
15550: LIST
15551: IN
15552: IFFALSE 15573
// points := [ 67 , 45 , 75 ] ;
15554: LD_ADDR_VAR 0 9
15558: PUSH
15559: LD_INT 67
15561: PUSH
15562: LD_INT 45
15564: PUSH
15565: LD_INT 75
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: LIST
15572: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15573: LD_VAR 0 6
15577: PPUSH
15578: CALL_OW 264
15582: PUSH
15583: LD_INT 26
15585: PUSH
15586: EMPTY
15587: LIST
15588: IN
15589: IFFALSE 15610
// points := [ 120 , 30 , 80 ] ;
15591: LD_ADDR_VAR 0 9
15595: PUSH
15596: LD_INT 120
15598: PUSH
15599: LD_INT 30
15601: PUSH
15602: LD_INT 80
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15610: LD_VAR 0 6
15614: PPUSH
15615: CALL_OW 264
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: EMPTY
15624: LIST
15625: IN
15626: IFFALSE 15647
// points := [ 40 , 1 , 1 ] ;
15628: LD_ADDR_VAR 0 9
15632: PUSH
15633: LD_INT 40
15635: PUSH
15636: LD_INT 1
15638: PUSH
15639: LD_INT 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: LIST
15646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15647: LD_VAR 0 6
15651: PPUSH
15652: CALL_OW 264
15656: PUSH
15657: LD_INT 29
15659: PUSH
15660: EMPTY
15661: LIST
15662: IN
15663: IFFALSE 15684
// points := [ 70 , 200 , 400 ] ;
15665: LD_ADDR_VAR 0 9
15669: PUSH
15670: LD_INT 70
15672: PUSH
15673: LD_INT 200
15675: PUSH
15676: LD_INT 400
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15684: LD_VAR 0 6
15688: PPUSH
15689: CALL_OW 264
15693: PUSH
15694: LD_INT 14
15696: PUSH
15697: LD_INT 53
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: IN
15704: IFFALSE 15725
// points := [ 40 , 10 , 20 ] ;
15706: LD_ADDR_VAR 0 9
15710: PUSH
15711: LD_INT 40
15713: PUSH
15714: LD_INT 10
15716: PUSH
15717: LD_INT 20
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15725: LD_VAR 0 6
15729: PPUSH
15730: CALL_OW 264
15734: PUSH
15735: LD_INT 9
15737: PUSH
15738: EMPTY
15739: LIST
15740: IN
15741: IFFALSE 15762
// points := [ 5 , 70 , 20 ] ;
15743: LD_ADDR_VAR 0 9
15747: PUSH
15748: LD_INT 5
15750: PUSH
15751: LD_INT 70
15753: PUSH
15754: LD_INT 20
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15762: LD_VAR 0 6
15766: PPUSH
15767: CALL_OW 264
15771: PUSH
15772: LD_INT 10
15774: PUSH
15775: EMPTY
15776: LIST
15777: IN
15778: IFFALSE 15799
// points := [ 35 , 110 , 70 ] ;
15780: LD_ADDR_VAR 0 9
15784: PUSH
15785: LD_INT 35
15787: PUSH
15788: LD_INT 110
15790: PUSH
15791: LD_INT 70
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15799: LD_VAR 0 6
15803: PPUSH
15804: CALL_OW 265
15808: PUSH
15809: LD_INT 25
15811: EQUAL
15812: IFFALSE 15833
// points := [ 80 , 65 , 100 ] ;
15814: LD_ADDR_VAR 0 9
15818: PUSH
15819: LD_INT 80
15821: PUSH
15822: LD_INT 65
15824: PUSH
15825: LD_INT 100
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15833: LD_VAR 0 6
15837: PPUSH
15838: CALL_OW 263
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: IFFALSE 15881
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15848: LD_ADDR_VAR 0 10
15852: PUSH
15853: LD_VAR 0 10
15857: PUSH
15858: LD_VAR 0 6
15862: PPUSH
15863: CALL_OW 311
15867: PPUSH
15868: LD_INT 3
15870: PPUSH
15871: CALL_OW 259
15875: PUSH
15876: LD_INT 4
15878: MUL
15879: MUL
15880: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15881: LD_VAR 0 6
15885: PPUSH
15886: CALL_OW 263
15890: PUSH
15891: LD_INT 2
15893: EQUAL
15894: IFFALSE 15945
// begin j := IsControledBy ( i ) ;
15896: LD_ADDR_VAR 0 7
15900: PUSH
15901: LD_VAR 0 6
15905: PPUSH
15906: CALL_OW 312
15910: ST_TO_ADDR
// if j then
15911: LD_VAR 0 7
15915: IFFALSE 15945
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15917: LD_ADDR_VAR 0 10
15921: PUSH
15922: LD_VAR 0 10
15926: PUSH
15927: LD_VAR 0 7
15931: PPUSH
15932: LD_INT 3
15934: PPUSH
15935: CALL_OW 259
15939: PUSH
15940: LD_INT 3
15942: MUL
15943: MUL
15944: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15945: LD_VAR 0 6
15949: PPUSH
15950: CALL_OW 264
15954: PUSH
15955: LD_INT 5
15957: PUSH
15958: LD_INT 6
15960: PUSH
15961: LD_INT 46
15963: PUSH
15964: LD_INT 44
15966: PUSH
15967: LD_INT 47
15969: PUSH
15970: LD_INT 45
15972: PUSH
15973: LD_INT 28
15975: PUSH
15976: LD_INT 7
15978: PUSH
15979: LD_INT 27
15981: PUSH
15982: LD_INT 29
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: IN
15997: PUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: LD_INT 52
16005: PPUSH
16006: CALL_OW 321
16010: PUSH
16011: LD_INT 2
16013: EQUAL
16014: AND
16015: IFFALSE 16032
// bpoints := bpoints * 1.2 ;
16017: LD_ADDR_VAR 0 10
16021: PUSH
16022: LD_VAR 0 10
16026: PUSH
16027: LD_REAL  1.20000000000000E+0000
16030: MUL
16031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16032: LD_VAR 0 6
16036: PPUSH
16037: CALL_OW 264
16041: PUSH
16042: LD_INT 6
16044: PUSH
16045: LD_INT 46
16047: PUSH
16048: LD_INT 47
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: IN
16056: IFFALSE 16073
// bpoints := bpoints * 1.2 ;
16058: LD_ADDR_VAR 0 10
16062: PUSH
16063: LD_VAR 0 10
16067: PUSH
16068: LD_REAL  1.20000000000000E+0000
16071: MUL
16072: ST_TO_ADDR
// end ; unit_building :
16073: GO 16087
16075: LD_INT 3
16077: DOUBLE
16078: EQUAL
16079: IFTRUE 16083
16081: GO 16086
16083: POP
// ; end ;
16084: GO 16087
16086: POP
// for j = 1 to 3 do
16087: LD_ADDR_VAR 0 7
16091: PUSH
16092: DOUBLE
16093: LD_INT 1
16095: DEC
16096: ST_TO_ADDR
16097: LD_INT 3
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16154
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16103: LD_ADDR_VAR 0 5
16107: PUSH
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_VAR 0 7
16117: PPUSH
16118: LD_VAR 0 5
16122: PUSH
16123: LD_VAR 0 7
16127: ARRAY
16128: PUSH
16129: LD_VAR 0 9
16133: PUSH
16134: LD_VAR 0 7
16138: ARRAY
16139: PUSH
16140: LD_VAR 0 10
16144: MUL
16145: PLUS
16146: PPUSH
16147: CALL_OW 1
16151: ST_TO_ADDR
16152: GO 16100
16154: POP
16155: POP
// end ;
16156: GO 14635
16158: POP
16159: POP
// result := Replace ( result , 4 , tmp ) ;
16160: LD_ADDR_VAR 0 5
16164: PUSH
16165: LD_VAR 0 5
16169: PPUSH
16170: LD_INT 4
16172: PPUSH
16173: LD_VAR 0 8
16177: PPUSH
16178: CALL_OW 1
16182: ST_TO_ADDR
// end ;
16183: LD_VAR 0 5
16187: RET
// export function DangerAtRange ( unit , range ) ; begin
16188: LD_INT 0
16190: PPUSH
// if not unit then
16191: LD_VAR 0 1
16195: NOT
16196: IFFALSE 16200
// exit ;
16198: GO 16245
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PPUSH
16215: LD_VAR 0 1
16219: PPUSH
16220: CALL_OW 250
16224: PPUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 251
16234: PPUSH
16235: LD_VAR 0 2
16239: PPUSH
16240: CALL 14487 0 4
16244: ST_TO_ADDR
// end ;
16245: LD_VAR 0 3
16249: RET
// export function DangerInArea ( side , area ) ; begin
16250: LD_INT 0
16252: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: LD_INT 81
16265: PUSH
16266: LD_VAR 0 1
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PPUSH
16275: CALL_OW 70
16279: ST_TO_ADDR
// end ;
16280: LD_VAR 0 3
16284: RET
// export function IsExtension ( b ) ; begin
16285: LD_INT 0
16287: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_VAR 0 1
16297: PUSH
16298: LD_INT 23
16300: PUSH
16301: LD_INT 20
16303: PUSH
16304: LD_INT 22
16306: PUSH
16307: LD_INT 17
16309: PUSH
16310: LD_INT 24
16312: PUSH
16313: LD_INT 21
16315: PUSH
16316: LD_INT 19
16318: PUSH
16319: LD_INT 16
16321: PUSH
16322: LD_INT 25
16324: PUSH
16325: LD_INT 18
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: IN
16340: ST_TO_ADDR
// end ;
16341: LD_VAR 0 2
16345: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
16350: PPUSH
// result := [ ] ;
16351: LD_ADDR_VAR 0 4
16355: PUSH
16356: EMPTY
16357: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16358: LD_ADDR_VAR 0 5
16362: PUSH
16363: LD_VAR 0 2
16367: PPUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 3
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 70
16382: ST_TO_ADDR
// if not tmp then
16383: LD_VAR 0 5
16387: NOT
16388: IFFALSE 16392
// exit ;
16390: GO 16456
// if checkLink then
16392: LD_VAR 0 3
16396: IFFALSE 16446
// begin for i in tmp do
16398: LD_ADDR_VAR 0 6
16402: PUSH
16403: LD_VAR 0 5
16407: PUSH
16408: FOR_IN
16409: IFFALSE 16444
// if GetBase ( i ) <> base then
16411: LD_VAR 0 6
16415: PPUSH
16416: CALL_OW 274
16420: PUSH
16421: LD_VAR 0 1
16425: NONEQUAL
16426: IFFALSE 16442
// ComLinkToBase ( base , i ) ;
16428: LD_VAR 0 1
16432: PPUSH
16433: LD_VAR 0 6
16437: PPUSH
16438: CALL_OW 169
16442: GO 16408
16444: POP
16445: POP
// end ; result := tmp ;
16446: LD_ADDR_VAR 0 4
16450: PUSH
16451: LD_VAR 0 5
16455: ST_TO_ADDR
// end ;
16456: LD_VAR 0 4
16460: RET
// export function ComComplete ( units , b ) ; var i ; begin
16461: LD_INT 0
16463: PPUSH
16464: PPUSH
// if not units then
16465: LD_VAR 0 1
16469: NOT
16470: IFFALSE 16474
// exit ;
16472: GO 16564
// for i in units do
16474: LD_ADDR_VAR 0 4
16478: PUSH
16479: LD_VAR 0 1
16483: PUSH
16484: FOR_IN
16485: IFFALSE 16562
// if BuildingStatus ( b ) = bs_build then
16487: LD_VAR 0 2
16491: PPUSH
16492: CALL_OW 461
16496: PUSH
16497: LD_INT 1
16499: EQUAL
16500: IFFALSE 16560
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16502: LD_VAR 0 4
16506: PPUSH
16507: LD_STRING h
16509: PUSH
16510: LD_VAR 0 2
16514: PPUSH
16515: CALL_OW 250
16519: PUSH
16520: LD_VAR 0 2
16524: PPUSH
16525: CALL_OW 251
16529: PUSH
16530: LD_VAR 0 2
16534: PUSH
16535: LD_INT 0
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: PUSH
16553: EMPTY
16554: LIST
16555: PPUSH
16556: CALL_OW 446
16560: GO 16484
16562: POP
16563: POP
// end ;
16564: LD_VAR 0 3
16568: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
16575: PPUSH
16576: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16577: LD_VAR 0 1
16581: NOT
16582: PUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 263
16592: PUSH
16593: LD_INT 2
16595: NONEQUAL
16596: OR
16597: IFFALSE 16601
// exit ;
16599: GO 16917
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16601: LD_ADDR_VAR 0 6
16605: PUSH
16606: LD_INT 22
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 255
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 2
16625: PUSH
16626: LD_INT 30
16628: PUSH
16629: LD_INT 36
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 34
16638: PUSH
16639: LD_INT 31
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PPUSH
16655: CALL_OW 69
16659: ST_TO_ADDR
// if not tmp then
16660: LD_VAR 0 6
16664: NOT
16665: IFFALSE 16669
// exit ;
16667: GO 16917
// result := [ ] ;
16669: LD_ADDR_VAR 0 2
16673: PUSH
16674: EMPTY
16675: ST_TO_ADDR
// for i in tmp do
16676: LD_ADDR_VAR 0 3
16680: PUSH
16681: LD_VAR 0 6
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16758
// begin t := UnitsInside ( i ) ;
16689: LD_ADDR_VAR 0 4
16693: PUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: CALL_OW 313
16703: ST_TO_ADDR
// if t then
16704: LD_VAR 0 4
16708: IFFALSE 16756
// for j in t do
16710: LD_ADDR_VAR 0 7
16714: PUSH
16715: LD_VAR 0 4
16719: PUSH
16720: FOR_IN
16721: IFFALSE 16754
// result := Replace ( result , result + 1 , j ) ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_VAR 0 2
16737: PUSH
16738: LD_INT 1
16740: PLUS
16741: PPUSH
16742: LD_VAR 0 7
16746: PPUSH
16747: CALL_OW 1
16751: ST_TO_ADDR
16752: GO 16720
16754: POP
16755: POP
// end ;
16756: GO 16686
16758: POP
16759: POP
// if not result then
16760: LD_VAR 0 2
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 16917
// mech := result [ 1 ] ;
16769: LD_ADDR_VAR 0 5
16773: PUSH
16774: LD_VAR 0 2
16778: PUSH
16779: LD_INT 1
16781: ARRAY
16782: ST_TO_ADDR
// if result > 1 then
16783: LD_VAR 0 2
16787: PUSH
16788: LD_INT 1
16790: GREATER
16791: IFFALSE 16903
// begin for i = 2 to result do
16793: LD_ADDR_VAR 0 3
16797: PUSH
16798: DOUBLE
16799: LD_INT 2
16801: DEC
16802: ST_TO_ADDR
16803: LD_VAR 0 2
16807: PUSH
16808: FOR_TO
16809: IFFALSE 16901
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16811: LD_ADDR_VAR 0 4
16815: PUSH
16816: LD_VAR 0 2
16820: PUSH
16821: LD_VAR 0 3
16825: ARRAY
16826: PPUSH
16827: LD_INT 3
16829: PPUSH
16830: CALL_OW 259
16834: PUSH
16835: LD_VAR 0 2
16839: PUSH
16840: LD_VAR 0 3
16844: ARRAY
16845: PPUSH
16846: CALL_OW 432
16850: MINUS
16851: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16852: LD_VAR 0 4
16856: PUSH
16857: LD_VAR 0 5
16861: PPUSH
16862: LD_INT 3
16864: PPUSH
16865: CALL_OW 259
16869: PUSH
16870: LD_VAR 0 5
16874: PPUSH
16875: CALL_OW 432
16879: MINUS
16880: GREATEREQUAL
16881: IFFALSE 16899
// mech := result [ i ] ;
16883: LD_ADDR_VAR 0 5
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_VAR 0 3
16897: ARRAY
16898: ST_TO_ADDR
// end ;
16899: GO 16808
16901: POP
16902: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16903: LD_VAR 0 1
16907: PPUSH
16908: LD_VAR 0 5
16912: PPUSH
16913: CALL_OW 135
// end ;
16917: LD_VAR 0 2
16921: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
16927: PPUSH
16928: PPUSH
16929: PPUSH
16930: PPUSH
16931: PPUSH
16932: PPUSH
16933: PPUSH
16934: PPUSH
16935: PPUSH
16936: PPUSH
// result := [ ] ;
16937: LD_ADDR_VAR 0 7
16941: PUSH
16942: EMPTY
16943: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 266
16953: PUSH
16954: LD_INT 0
16956: PUSH
16957: LD_INT 1
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: IN
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 18603
// if name then
16969: LD_VAR 0 3
16973: IFFALSE 16989
// SetBName ( base_dep , name ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: CALL_OW 500
// base := GetBase ( base_dep ) ;
16989: LD_ADDR_VAR 0 15
16993: PUSH
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 274
17003: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17004: LD_ADDR_VAR 0 16
17008: PUSH
17009: LD_VAR 0 1
17013: PPUSH
17014: CALL_OW 255
17018: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17019: LD_ADDR_VAR 0 17
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 248
17033: ST_TO_ADDR
// if sources then
17034: LD_VAR 0 5
17038: IFFALSE 17085
// for i = 1 to 3 do
17040: LD_ADDR_VAR 0 8
17044: PUSH
17045: DOUBLE
17046: LD_INT 1
17048: DEC
17049: ST_TO_ADDR
17050: LD_INT 3
17052: PUSH
17053: FOR_TO
17054: IFFALSE 17083
// AddResourceType ( base , i , sources [ i ] ) ;
17056: LD_VAR 0 15
17060: PPUSH
17061: LD_VAR 0 8
17065: PPUSH
17066: LD_VAR 0 5
17070: PUSH
17071: LD_VAR 0 8
17075: ARRAY
17076: PPUSH
17077: CALL_OW 276
17081: GO 17053
17083: POP
17084: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17085: LD_ADDR_VAR 0 18
17089: PUSH
17090: LD_VAR 0 15
17094: PPUSH
17095: LD_VAR 0 2
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL 16346 0 3
17107: ST_TO_ADDR
// InitHc ;
17108: CALL_OW 19
// InitUc ;
17112: CALL_OW 18
// uc_side := side ;
17116: LD_ADDR_OWVAR 20
17120: PUSH
17121: LD_VAR 0 16
17125: ST_TO_ADDR
// uc_nation := nation ;
17126: LD_ADDR_OWVAR 21
17130: PUSH
17131: LD_VAR 0 17
17135: ST_TO_ADDR
// if buildings then
17136: LD_VAR 0 18
17140: IFFALSE 18462
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17142: LD_ADDR_VAR 0 19
17146: PUSH
17147: LD_VAR 0 18
17151: PPUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 30
17157: PUSH
17158: LD_INT 29
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 30
17167: PUSH
17168: LD_INT 30
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 72
17184: ST_TO_ADDR
// if tmp then
17185: LD_VAR 0 19
17189: IFFALSE 17237
// for i in tmp do
17191: LD_ADDR_VAR 0 8
17195: PUSH
17196: LD_VAR 0 19
17200: PUSH
17201: FOR_IN
17202: IFFALSE 17235
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17204: LD_VAR 0 8
17208: PPUSH
17209: CALL_OW 250
17213: PPUSH
17214: LD_VAR 0 8
17218: PPUSH
17219: CALL_OW 251
17223: PPUSH
17224: LD_VAR 0 16
17228: PPUSH
17229: CALL_OW 441
17233: GO 17201
17235: POP
17236: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17237: LD_VAR 0 18
17241: PPUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 30
17247: PUSH
17248: LD_INT 32
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 30
17257: PUSH
17258: LD_INT 33
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 72
17274: IFFALSE 17362
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17276: LD_ADDR_VAR 0 8
17280: PUSH
17281: LD_VAR 0 18
17285: PPUSH
17286: LD_INT 2
17288: PUSH
17289: LD_INT 30
17291: PUSH
17292: LD_INT 32
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 30
17301: PUSH
17302: LD_INT 33
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 72
17318: PUSH
17319: FOR_IN
17320: IFFALSE 17360
// begin if not GetBWeapon ( i ) then
17322: LD_VAR 0 8
17326: PPUSH
17327: CALL_OW 269
17331: NOT
17332: IFFALSE 17358
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17334: LD_VAR 0 8
17338: PPUSH
17339: LD_VAR 0 8
17343: PPUSH
17344: LD_VAR 0 2
17348: PPUSH
17349: CALL 18608 0 2
17353: PPUSH
17354: CALL_OW 431
// end ;
17358: GO 17319
17360: POP
17361: POP
// end ; for i = 1 to personel do
17362: LD_ADDR_VAR 0 8
17366: PUSH
17367: DOUBLE
17368: LD_INT 1
17370: DEC
17371: ST_TO_ADDR
17372: LD_VAR 0 6
17376: PUSH
17377: FOR_TO
17378: IFFALSE 18442
// begin if i > 4 then
17380: LD_VAR 0 8
17384: PUSH
17385: LD_INT 4
17387: GREATER
17388: IFFALSE 17392
// break ;
17390: GO 18442
// case i of 1 :
17392: LD_VAR 0 8
17396: PUSH
17397: LD_INT 1
17399: DOUBLE
17400: EQUAL
17401: IFTRUE 17405
17403: GO 17485
17405: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17406: LD_ADDR_VAR 0 12
17410: PUSH
17411: LD_VAR 0 18
17415: PPUSH
17416: LD_INT 22
17418: PUSH
17419: LD_VAR 0 16
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 58
17430: PUSH
17431: EMPTY
17432: LIST
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: LD_INT 30
17439: PUSH
17440: LD_INT 32
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 30
17449: PUSH
17450: LD_INT 4
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 30
17459: PUSH
17460: LD_INT 5
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL_OW 72
17482: ST_TO_ADDR
17483: GO 17707
17485: LD_INT 2
17487: DOUBLE
17488: EQUAL
17489: IFTRUE 17493
17491: GO 17555
17493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17494: LD_ADDR_VAR 0 12
17498: PUSH
17499: LD_VAR 0 18
17503: PPUSH
17504: LD_INT 22
17506: PUSH
17507: LD_VAR 0 16
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: LD_INT 30
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 30
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PPUSH
17548: CALL_OW 72
17552: ST_TO_ADDR
17553: GO 17707
17555: LD_INT 3
17557: DOUBLE
17558: EQUAL
17559: IFTRUE 17563
17561: GO 17625
17563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17564: LD_ADDR_VAR 0 12
17568: PUSH
17569: LD_VAR 0 18
17573: PPUSH
17574: LD_INT 22
17576: PUSH
17577: LD_VAR 0 16
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: LD_INT 30
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 30
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 72
17622: ST_TO_ADDR
17623: GO 17707
17625: LD_INT 4
17627: DOUBLE
17628: EQUAL
17629: IFTRUE 17633
17631: GO 17706
17633: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17634: LD_ADDR_VAR 0 12
17638: PUSH
17639: LD_VAR 0 18
17643: PPUSH
17644: LD_INT 22
17646: PUSH
17647: LD_VAR 0 16
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 30
17661: PUSH
17662: LD_INT 6
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 30
17671: PUSH
17672: LD_INT 7
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 30
17681: PUSH
17682: LD_INT 8
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PPUSH
17699: CALL_OW 72
17703: ST_TO_ADDR
17704: GO 17707
17706: POP
// if i = 1 then
17707: LD_VAR 0 8
17711: PUSH
17712: LD_INT 1
17714: EQUAL
17715: IFFALSE 17826
// begin tmp := [ ] ;
17717: LD_ADDR_VAR 0 19
17721: PUSH
17722: EMPTY
17723: ST_TO_ADDR
// for j in f do
17724: LD_ADDR_VAR 0 9
17728: PUSH
17729: LD_VAR 0 12
17733: PUSH
17734: FOR_IN
17735: IFFALSE 17808
// if GetBType ( j ) = b_bunker then
17737: LD_VAR 0 9
17741: PPUSH
17742: CALL_OW 266
17746: PUSH
17747: LD_INT 32
17749: EQUAL
17750: IFFALSE 17777
// tmp := Insert ( tmp , 1 , j ) else
17752: LD_ADDR_VAR 0 19
17756: PUSH
17757: LD_VAR 0 19
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: LD_VAR 0 9
17769: PPUSH
17770: CALL_OW 2
17774: ST_TO_ADDR
17775: GO 17806
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17777: LD_ADDR_VAR 0 19
17781: PUSH
17782: LD_VAR 0 19
17786: PPUSH
17787: LD_VAR 0 19
17791: PUSH
17792: LD_INT 1
17794: PLUS
17795: PPUSH
17796: LD_VAR 0 9
17800: PPUSH
17801: CALL_OW 2
17805: ST_TO_ADDR
17806: GO 17734
17808: POP
17809: POP
// if tmp then
17810: LD_VAR 0 19
17814: IFFALSE 17826
// f := tmp ;
17816: LD_ADDR_VAR 0 12
17820: PUSH
17821: LD_VAR 0 19
17825: ST_TO_ADDR
// end ; x := personel [ i ] ;
17826: LD_ADDR_VAR 0 13
17830: PUSH
17831: LD_VAR 0 6
17835: PUSH
17836: LD_VAR 0 8
17840: ARRAY
17841: ST_TO_ADDR
// if x = - 1 then
17842: LD_VAR 0 13
17846: PUSH
17847: LD_INT 1
17849: NEG
17850: EQUAL
17851: IFFALSE 18060
// begin for j in f do
17853: LD_ADDR_VAR 0 9
17857: PUSH
17858: LD_VAR 0 12
17862: PUSH
17863: FOR_IN
17864: IFFALSE 18056
// repeat InitHc ;
17866: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17870: LD_VAR 0 9
17874: PPUSH
17875: CALL_OW 266
17879: PUSH
17880: LD_INT 5
17882: EQUAL
17883: IFFALSE 17953
// begin if UnitsInside ( j ) < 3 then
17885: LD_VAR 0 9
17889: PPUSH
17890: CALL_OW 313
17894: PUSH
17895: LD_INT 3
17897: LESS
17898: IFFALSE 17934
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17900: LD_INT 0
17902: PPUSH
17903: LD_INT 5
17905: PUSH
17906: LD_INT 8
17908: PUSH
17909: LD_INT 9
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: PUSH
17917: LD_VAR 0 17
17921: ARRAY
17922: PPUSH
17923: LD_VAR 0 4
17927: PPUSH
17928: CALL_OW 380
17932: GO 17951
// PrepareHuman ( false , i , skill ) ;
17934: LD_INT 0
17936: PPUSH
17937: LD_VAR 0 8
17941: PPUSH
17942: LD_VAR 0 4
17946: PPUSH
17947: CALL_OW 380
// end else
17951: GO 17970
// PrepareHuman ( false , i , skill ) ;
17953: LD_INT 0
17955: PPUSH
17956: LD_VAR 0 8
17960: PPUSH
17961: LD_VAR 0 4
17965: PPUSH
17966: CALL_OW 380
// un := CreateHuman ;
17970: LD_ADDR_VAR 0 14
17974: PUSH
17975: CALL_OW 44
17979: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17980: LD_ADDR_VAR 0 7
17984: PUSH
17985: LD_VAR 0 7
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: LD_VAR 0 14
17997: PPUSH
17998: CALL_OW 2
18002: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18003: LD_VAR 0 14
18007: PPUSH
18008: LD_VAR 0 9
18012: PPUSH
18013: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18017: LD_VAR 0 9
18021: PPUSH
18022: CALL_OW 313
18026: PUSH
18027: LD_INT 6
18029: EQUAL
18030: PUSH
18031: LD_VAR 0 9
18035: PPUSH
18036: CALL_OW 266
18040: PUSH
18041: LD_INT 32
18043: PUSH
18044: LD_INT 31
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: IN
18051: OR
18052: IFFALSE 17866
18054: GO 17863
18056: POP
18057: POP
// end else
18058: GO 18440
// for j = 1 to x do
18060: LD_ADDR_VAR 0 9
18064: PUSH
18065: DOUBLE
18066: LD_INT 1
18068: DEC
18069: ST_TO_ADDR
18070: LD_VAR 0 13
18074: PUSH
18075: FOR_TO
18076: IFFALSE 18438
// begin InitHc ;
18078: CALL_OW 19
// if not f then
18082: LD_VAR 0 12
18086: NOT
18087: IFFALSE 18176
// begin PrepareHuman ( false , i , skill ) ;
18089: LD_INT 0
18091: PPUSH
18092: LD_VAR 0 8
18096: PPUSH
18097: LD_VAR 0 4
18101: PPUSH
18102: CALL_OW 380
// un := CreateHuman ;
18106: LD_ADDR_VAR 0 14
18110: PUSH
18111: CALL_OW 44
18115: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18116: LD_ADDR_VAR 0 7
18120: PUSH
18121: LD_VAR 0 7
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_VAR 0 14
18133: PPUSH
18134: CALL_OW 2
18138: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18139: LD_VAR 0 14
18143: PPUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 250
18153: PPUSH
18154: LD_VAR 0 1
18158: PPUSH
18159: CALL_OW 251
18163: PPUSH
18164: LD_INT 10
18166: PPUSH
18167: LD_INT 0
18169: PPUSH
18170: CALL_OW 50
// continue ;
18174: GO 18075
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18176: LD_VAR 0 12
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: CALL_OW 313
18189: PUSH
18190: LD_VAR 0 12
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PPUSH
18199: CALL_OW 266
18203: PUSH
18204: LD_INT 32
18206: PUSH
18207: LD_INT 31
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: IN
18214: AND
18215: PUSH
18216: LD_VAR 0 12
18220: PUSH
18221: LD_INT 1
18223: ARRAY
18224: PPUSH
18225: CALL_OW 313
18229: PUSH
18230: LD_INT 6
18232: EQUAL
18233: OR
18234: IFFALSE 18254
// f := Delete ( f , 1 ) ;
18236: LD_ADDR_VAR 0 12
18240: PUSH
18241: LD_VAR 0 12
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 3
18253: ST_TO_ADDR
// if not f then
18254: LD_VAR 0 12
18258: NOT
18259: IFFALSE 18277
// begin x := x + 2 ;
18261: LD_ADDR_VAR 0 13
18265: PUSH
18266: LD_VAR 0 13
18270: PUSH
18271: LD_INT 2
18273: PLUS
18274: ST_TO_ADDR
// continue ;
18275: GO 18075
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18277: LD_VAR 0 12
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: CALL_OW 266
18290: PUSH
18291: LD_INT 5
18293: EQUAL
18294: IFFALSE 18368
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18296: LD_VAR 0 12
18300: PUSH
18301: LD_INT 1
18303: ARRAY
18304: PPUSH
18305: CALL_OW 313
18309: PUSH
18310: LD_INT 3
18312: LESS
18313: IFFALSE 18349
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18315: LD_INT 0
18317: PPUSH
18318: LD_INT 5
18320: PUSH
18321: LD_INT 8
18323: PUSH
18324: LD_INT 9
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: PUSH
18332: LD_VAR 0 17
18336: ARRAY
18337: PPUSH
18338: LD_VAR 0 4
18342: PPUSH
18343: CALL_OW 380
18347: GO 18366
// PrepareHuman ( false , i , skill ) ;
18349: LD_INT 0
18351: PPUSH
18352: LD_VAR 0 8
18356: PPUSH
18357: LD_VAR 0 4
18361: PPUSH
18362: CALL_OW 380
// end else
18366: GO 18385
// PrepareHuman ( false , i , skill ) ;
18368: LD_INT 0
18370: PPUSH
18371: LD_VAR 0 8
18375: PPUSH
18376: LD_VAR 0 4
18380: PPUSH
18381: CALL_OW 380
// un := CreateHuman ;
18385: LD_ADDR_VAR 0 14
18389: PUSH
18390: CALL_OW 44
18394: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18395: LD_ADDR_VAR 0 7
18399: PUSH
18400: LD_VAR 0 7
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: LD_VAR 0 14
18412: PPUSH
18413: CALL_OW 2
18417: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18418: LD_VAR 0 14
18422: PPUSH
18423: LD_VAR 0 12
18427: PUSH
18428: LD_INT 1
18430: ARRAY
18431: PPUSH
18432: CALL_OW 52
// end ;
18436: GO 18075
18438: POP
18439: POP
// end ;
18440: GO 17377
18442: POP
18443: POP
// result := result ^ buildings ;
18444: LD_ADDR_VAR 0 7
18448: PUSH
18449: LD_VAR 0 7
18453: PUSH
18454: LD_VAR 0 18
18458: ADD
18459: ST_TO_ADDR
// end else
18460: GO 18603
// begin for i = 1 to personel do
18462: LD_ADDR_VAR 0 8
18466: PUSH
18467: DOUBLE
18468: LD_INT 1
18470: DEC
18471: ST_TO_ADDR
18472: LD_VAR 0 6
18476: PUSH
18477: FOR_TO
18478: IFFALSE 18601
// begin if i > 4 then
18480: LD_VAR 0 8
18484: PUSH
18485: LD_INT 4
18487: GREATER
18488: IFFALSE 18492
// break ;
18490: GO 18601
// x := personel [ i ] ;
18492: LD_ADDR_VAR 0 13
18496: PUSH
18497: LD_VAR 0 6
18501: PUSH
18502: LD_VAR 0 8
18506: ARRAY
18507: ST_TO_ADDR
// if x = - 1 then
18508: LD_VAR 0 13
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: EQUAL
18517: IFFALSE 18521
// continue ;
18519: GO 18477
// PrepareHuman ( false , i , skill ) ;
18521: LD_INT 0
18523: PPUSH
18524: LD_VAR 0 8
18528: PPUSH
18529: LD_VAR 0 4
18533: PPUSH
18534: CALL_OW 380
// un := CreateHuman ;
18538: LD_ADDR_VAR 0 14
18542: PUSH
18543: CALL_OW 44
18547: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18548: LD_VAR 0 14
18552: PPUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 250
18562: PPUSH
18563: LD_VAR 0 1
18567: PPUSH
18568: CALL_OW 251
18572: PPUSH
18573: LD_INT 10
18575: PPUSH
18576: LD_INT 0
18578: PPUSH
18579: CALL_OW 50
// result := result ^ un ;
18583: LD_ADDR_VAR 0 7
18587: PUSH
18588: LD_VAR 0 7
18592: PUSH
18593: LD_VAR 0 14
18597: ADD
18598: ST_TO_ADDR
// end ;
18599: GO 18477
18601: POP
18602: POP
// end ; end ;
18603: LD_VAR 0 7
18607: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18608: LD_INT 0
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
// result := false ;
18626: LD_ADDR_VAR 0 3
18630: PUSH
18631: LD_INT 0
18633: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18634: LD_VAR 0 1
18638: NOT
18639: PUSH
18640: LD_VAR 0 1
18644: PPUSH
18645: CALL_OW 266
18649: PUSH
18650: LD_INT 32
18652: PUSH
18653: LD_INT 33
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: IN
18660: NOT
18661: OR
18662: IFFALSE 18666
// exit ;
18664: GO 19775
// nat := GetNation ( tower ) ;
18666: LD_ADDR_VAR 0 12
18670: PUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 248
18680: ST_TO_ADDR
// side := GetSide ( tower ) ;
18681: LD_ADDR_VAR 0 16
18685: PUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 255
18695: ST_TO_ADDR
// x := GetX ( tower ) ;
18696: LD_ADDR_VAR 0 10
18700: PUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 250
18710: ST_TO_ADDR
// y := GetY ( tower ) ;
18711: LD_ADDR_VAR 0 11
18715: PUSH
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 251
18725: ST_TO_ADDR
// if not x or not y then
18726: LD_VAR 0 10
18730: NOT
18731: PUSH
18732: LD_VAR 0 11
18736: NOT
18737: OR
18738: IFFALSE 18742
// exit ;
18740: GO 19775
// weapon := 0 ;
18742: LD_ADDR_VAR 0 18
18746: PUSH
18747: LD_INT 0
18749: ST_TO_ADDR
// fac_list := [ ] ;
18750: LD_ADDR_VAR 0 17
18754: PUSH
18755: EMPTY
18756: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18757: LD_ADDR_VAR 0 6
18761: PUSH
18762: LD_VAR 0 1
18766: PPUSH
18767: CALL_OW 274
18771: PPUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_INT 0
18779: PPUSH
18780: CALL 16346 0 3
18784: PPUSH
18785: LD_INT 30
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PPUSH
18795: CALL_OW 72
18799: ST_TO_ADDR
// if not factories then
18800: LD_VAR 0 6
18804: NOT
18805: IFFALSE 18809
// exit ;
18807: GO 19775
// for i in factories do
18809: LD_ADDR_VAR 0 8
18813: PUSH
18814: LD_VAR 0 6
18818: PUSH
18819: FOR_IN
18820: IFFALSE 18845
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18822: LD_ADDR_VAR 0 17
18826: PUSH
18827: LD_VAR 0 17
18831: PUSH
18832: LD_VAR 0 8
18836: PPUSH
18837: CALL_OW 478
18841: UNION
18842: ST_TO_ADDR
18843: GO 18819
18845: POP
18846: POP
// if not fac_list then
18847: LD_VAR 0 17
18851: NOT
18852: IFFALSE 18856
// exit ;
18854: GO 19775
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18856: LD_ADDR_VAR 0 5
18860: PUSH
18861: LD_INT 4
18863: PUSH
18864: LD_INT 5
18866: PUSH
18867: LD_INT 9
18869: PUSH
18870: LD_INT 10
18872: PUSH
18873: LD_INT 6
18875: PUSH
18876: LD_INT 7
18878: PUSH
18879: LD_INT 11
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 27
18893: PUSH
18894: LD_INT 28
18896: PUSH
18897: LD_INT 26
18899: PUSH
18900: LD_INT 30
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 43
18911: PUSH
18912: LD_INT 44
18914: PUSH
18915: LD_INT 46
18917: PUSH
18918: LD_INT 45
18920: PUSH
18921: LD_INT 47
18923: PUSH
18924: LD_INT 49
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: LD_VAR 0 12
18944: ARRAY
18945: ST_TO_ADDR
// list := list isect fac_list ;
18946: LD_ADDR_VAR 0 5
18950: PUSH
18951: LD_VAR 0 5
18955: PUSH
18956: LD_VAR 0 17
18960: ISECT
18961: ST_TO_ADDR
// if not list then
18962: LD_VAR 0 5
18966: NOT
18967: IFFALSE 18971
// exit ;
18969: GO 19775
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18971: LD_VAR 0 12
18975: PUSH
18976: LD_INT 3
18978: EQUAL
18979: PUSH
18980: LD_INT 49
18982: PUSH
18983: LD_VAR 0 5
18987: IN
18988: AND
18989: PUSH
18990: LD_INT 31
18992: PPUSH
18993: LD_VAR 0 16
18997: PPUSH
18998: CALL_OW 321
19002: PUSH
19003: LD_INT 2
19005: EQUAL
19006: AND
19007: IFFALSE 19067
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19009: LD_INT 22
19011: PUSH
19012: LD_VAR 0 16
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 35
19023: PUSH
19024: LD_INT 49
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 91
19033: PUSH
19034: LD_VAR 0 1
19038: PUSH
19039: LD_INT 10
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: PPUSH
19052: CALL_OW 69
19056: NOT
19057: IFFALSE 19067
// weapon := ru_time_lapser ;
19059: LD_ADDR_VAR 0 18
19063: PUSH
19064: LD_INT 49
19066: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19067: LD_VAR 0 12
19071: PUSH
19072: LD_INT 1
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: IN
19082: PUSH
19083: LD_INT 11
19085: PUSH
19086: LD_VAR 0 5
19090: IN
19091: PUSH
19092: LD_INT 30
19094: PUSH
19095: LD_VAR 0 5
19099: IN
19100: OR
19101: AND
19102: PUSH
19103: LD_INT 6
19105: PPUSH
19106: LD_VAR 0 16
19110: PPUSH
19111: CALL_OW 321
19115: PUSH
19116: LD_INT 2
19118: EQUAL
19119: AND
19120: IFFALSE 19285
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19122: LD_INT 22
19124: PUSH
19125: LD_VAR 0 16
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: LD_INT 35
19139: PUSH
19140: LD_INT 11
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 35
19149: PUSH
19150: LD_INT 30
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 91
19164: PUSH
19165: LD_VAR 0 1
19169: PUSH
19170: LD_INT 18
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PPUSH
19183: CALL_OW 69
19187: NOT
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_VAR 0 16
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: LD_INT 30
19206: PUSH
19207: LD_INT 32
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 30
19216: PUSH
19217: LD_INT 33
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 91
19231: PUSH
19232: LD_VAR 0 1
19236: PUSH
19237: LD_INT 12
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: PPUSH
19253: CALL_OW 69
19257: PUSH
19258: LD_INT 2
19260: GREATER
19261: AND
19262: IFFALSE 19285
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19264: LD_ADDR_VAR 0 18
19268: PUSH
19269: LD_INT 11
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_VAR 0 12
19283: ARRAY
19284: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19285: LD_VAR 0 18
19289: NOT
19290: PUSH
19291: LD_INT 40
19293: PPUSH
19294: LD_VAR 0 16
19298: PPUSH
19299: CALL_OW 321
19303: PUSH
19304: LD_INT 2
19306: EQUAL
19307: AND
19308: PUSH
19309: LD_INT 7
19311: PUSH
19312: LD_VAR 0 5
19316: IN
19317: PUSH
19318: LD_INT 28
19320: PUSH
19321: LD_VAR 0 5
19325: IN
19326: OR
19327: PUSH
19328: LD_INT 45
19330: PUSH
19331: LD_VAR 0 5
19335: IN
19336: OR
19337: AND
19338: IFFALSE 19592
// begin hex := GetHexInfo ( x , y ) ;
19340: LD_ADDR_VAR 0 4
19344: PUSH
19345: LD_VAR 0 10
19349: PPUSH
19350: LD_VAR 0 11
19354: PPUSH
19355: CALL_OW 546
19359: ST_TO_ADDR
// if hex [ 1 ] then
19360: LD_VAR 0 4
19364: PUSH
19365: LD_INT 1
19367: ARRAY
19368: IFFALSE 19372
// exit ;
19370: GO 19775
// height := hex [ 2 ] ;
19372: LD_ADDR_VAR 0 15
19376: PUSH
19377: LD_VAR 0 4
19381: PUSH
19382: LD_INT 2
19384: ARRAY
19385: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19386: LD_ADDR_VAR 0 14
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: LD_INT 3
19399: PUSH
19400: LD_INT 5
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: ST_TO_ADDR
// for i in tmp do
19409: LD_ADDR_VAR 0 8
19413: PUSH
19414: LD_VAR 0 14
19418: PUSH
19419: FOR_IN
19420: IFFALSE 19590
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19422: LD_ADDR_VAR 0 9
19426: PUSH
19427: LD_VAR 0 10
19431: PPUSH
19432: LD_VAR 0 8
19436: PPUSH
19437: LD_INT 5
19439: PPUSH
19440: CALL_OW 272
19444: PUSH
19445: LD_VAR 0 11
19449: PPUSH
19450: LD_VAR 0 8
19454: PPUSH
19455: LD_INT 5
19457: PPUSH
19458: CALL_OW 273
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19467: LD_VAR 0 9
19471: PUSH
19472: LD_INT 1
19474: ARRAY
19475: PPUSH
19476: LD_VAR 0 9
19480: PUSH
19481: LD_INT 2
19483: ARRAY
19484: PPUSH
19485: CALL_OW 488
19489: IFFALSE 19588
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19491: LD_ADDR_VAR 0 4
19495: PUSH
19496: LD_VAR 0 9
19500: PUSH
19501: LD_INT 1
19503: ARRAY
19504: PPUSH
19505: LD_VAR 0 9
19509: PUSH
19510: LD_INT 2
19512: ARRAY
19513: PPUSH
19514: CALL_OW 546
19518: ST_TO_ADDR
// if hex [ 1 ] then
19519: LD_VAR 0 4
19523: PUSH
19524: LD_INT 1
19526: ARRAY
19527: IFFALSE 19531
// continue ;
19529: GO 19419
// h := hex [ 2 ] ;
19531: LD_ADDR_VAR 0 13
19535: PUSH
19536: LD_VAR 0 4
19540: PUSH
19541: LD_INT 2
19543: ARRAY
19544: ST_TO_ADDR
// if h + 7 < height then
19545: LD_VAR 0 13
19549: PUSH
19550: LD_INT 7
19552: PLUS
19553: PUSH
19554: LD_VAR 0 15
19558: LESS
19559: IFFALSE 19588
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19561: LD_ADDR_VAR 0 18
19565: PUSH
19566: LD_INT 7
19568: PUSH
19569: LD_INT 28
19571: PUSH
19572: LD_INT 45
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: PUSH
19580: LD_VAR 0 12
19584: ARRAY
19585: ST_TO_ADDR
// break ;
19586: GO 19590
// end ; end ; end ;
19588: GO 19419
19590: POP
19591: POP
// end ; if not weapon then
19592: LD_VAR 0 18
19596: NOT
19597: IFFALSE 19657
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19599: LD_ADDR_VAR 0 5
19603: PUSH
19604: LD_VAR 0 5
19608: PUSH
19609: LD_INT 11
19611: PUSH
19612: LD_INT 30
19614: PUSH
19615: LD_INT 49
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: DIFF
19623: ST_TO_ADDR
// if not list then
19624: LD_VAR 0 5
19628: NOT
19629: IFFALSE 19633
// exit ;
19631: GO 19775
// weapon := list [ rand ( 1 , list ) ] ;
19633: LD_ADDR_VAR 0 18
19637: PUSH
19638: LD_VAR 0 5
19642: PUSH
19643: LD_INT 1
19645: PPUSH
19646: LD_VAR 0 5
19650: PPUSH
19651: CALL_OW 12
19655: ARRAY
19656: ST_TO_ADDR
// end ; if weapon then
19657: LD_VAR 0 18
19661: IFFALSE 19775
// begin tmp := CostOfWeapon ( weapon ) ;
19663: LD_ADDR_VAR 0 14
19667: PUSH
19668: LD_VAR 0 18
19672: PPUSH
19673: CALL_OW 451
19677: ST_TO_ADDR
// j := GetBase ( tower ) ;
19678: LD_ADDR_VAR 0 9
19682: PUSH
19683: LD_VAR 0 1
19687: PPUSH
19688: CALL_OW 274
19692: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19693: LD_VAR 0 9
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 275
19705: PUSH
19706: LD_VAR 0 14
19710: PUSH
19711: LD_INT 1
19713: ARRAY
19714: GREATEREQUAL
19715: PUSH
19716: LD_VAR 0 9
19720: PPUSH
19721: LD_INT 2
19723: PPUSH
19724: CALL_OW 275
19728: PUSH
19729: LD_VAR 0 14
19733: PUSH
19734: LD_INT 2
19736: ARRAY
19737: GREATEREQUAL
19738: AND
19739: PUSH
19740: LD_VAR 0 9
19744: PPUSH
19745: LD_INT 3
19747: PPUSH
19748: CALL_OW 275
19752: PUSH
19753: LD_VAR 0 14
19757: PUSH
19758: LD_INT 3
19760: ARRAY
19761: GREATEREQUAL
19762: AND
19763: IFFALSE 19775
// result := weapon ;
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_VAR 0 18
19774: ST_TO_ADDR
// end ; end ;
19775: LD_VAR 0 3
19779: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
// result := true ;
19784: LD_ADDR_VAR 0 3
19788: PUSH
19789: LD_INT 1
19791: ST_TO_ADDR
// if array1 = array2 then
19792: LD_VAR 0 1
19796: PUSH
19797: LD_VAR 0 2
19801: EQUAL
19802: IFFALSE 19862
// begin for i = 1 to array1 do
19804: LD_ADDR_VAR 0 4
19808: PUSH
19809: DOUBLE
19810: LD_INT 1
19812: DEC
19813: ST_TO_ADDR
19814: LD_VAR 0 1
19818: PUSH
19819: FOR_TO
19820: IFFALSE 19858
// if array1 [ i ] <> array2 [ i ] then
19822: LD_VAR 0 1
19826: PUSH
19827: LD_VAR 0 4
19831: ARRAY
19832: PUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_VAR 0 4
19842: ARRAY
19843: NONEQUAL
19844: IFFALSE 19856
// begin result := false ;
19846: LD_ADDR_VAR 0 3
19850: PUSH
19851: LD_INT 0
19853: ST_TO_ADDR
// break ;
19854: GO 19858
// end ;
19856: GO 19819
19858: POP
19859: POP
// end else
19860: GO 19870
// result := false ;
19862: LD_ADDR_VAR 0 3
19866: PUSH
19867: LD_INT 0
19869: ST_TO_ADDR
// end ;
19870: LD_VAR 0 3
19874: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
// if not array1 or not array2 then
19879: LD_VAR 0 1
19883: NOT
19884: PUSH
19885: LD_VAR 0 2
19889: NOT
19890: OR
19891: IFFALSE 19895
// exit ;
19893: GO 19959
// result := true ;
19895: LD_ADDR_VAR 0 3
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// for i = 1 to array1 do
19903: LD_ADDR_VAR 0 4
19907: PUSH
19908: DOUBLE
19909: LD_INT 1
19911: DEC
19912: ST_TO_ADDR
19913: LD_VAR 0 1
19917: PUSH
19918: FOR_TO
19919: IFFALSE 19957
// if array1 [ i ] <> array2 [ i ] then
19921: LD_VAR 0 1
19925: PUSH
19926: LD_VAR 0 4
19930: ARRAY
19931: PUSH
19932: LD_VAR 0 2
19936: PUSH
19937: LD_VAR 0 4
19941: ARRAY
19942: NONEQUAL
19943: IFFALSE 19955
// begin result := false ;
19945: LD_ADDR_VAR 0 3
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// break ;
19953: GO 19957
// end ;
19955: GO 19918
19957: POP
19958: POP
// end ;
19959: LD_VAR 0 3
19963: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19964: LD_INT 0
19966: PPUSH
19967: PPUSH
19968: PPUSH
// pom := GetBase ( fac ) ;
19969: LD_ADDR_VAR 0 5
19973: PUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 274
19983: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19984: LD_ADDR_VAR 0 4
19988: PUSH
19989: LD_VAR 0 2
19993: PUSH
19994: LD_INT 1
19996: ARRAY
19997: PPUSH
19998: LD_VAR 0 2
20002: PUSH
20003: LD_INT 2
20005: ARRAY
20006: PPUSH
20007: LD_VAR 0 2
20011: PUSH
20012: LD_INT 3
20014: ARRAY
20015: PPUSH
20016: LD_VAR 0 2
20020: PUSH
20021: LD_INT 4
20023: ARRAY
20024: PPUSH
20025: CALL_OW 449
20029: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20030: LD_ADDR_VAR 0 3
20034: PUSH
20035: LD_VAR 0 5
20039: PPUSH
20040: LD_INT 1
20042: PPUSH
20043: CALL_OW 275
20047: PUSH
20048: LD_VAR 0 4
20052: PUSH
20053: LD_INT 1
20055: ARRAY
20056: GREATEREQUAL
20057: PUSH
20058: LD_VAR 0 5
20062: PPUSH
20063: LD_INT 2
20065: PPUSH
20066: CALL_OW 275
20070: PUSH
20071: LD_VAR 0 4
20075: PUSH
20076: LD_INT 2
20078: ARRAY
20079: GREATEREQUAL
20080: AND
20081: PUSH
20082: LD_VAR 0 5
20086: PPUSH
20087: LD_INT 3
20089: PPUSH
20090: CALL_OW 275
20094: PUSH
20095: LD_VAR 0 4
20099: PUSH
20100: LD_INT 3
20102: ARRAY
20103: GREATEREQUAL
20104: AND
20105: ST_TO_ADDR
// end ;
20106: LD_VAR 0 3
20110: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20111: LD_INT 0
20113: PPUSH
20114: PPUSH
20115: PPUSH
20116: PPUSH
// pom := GetBase ( building ) ;
20117: LD_ADDR_VAR 0 3
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL_OW 274
20131: ST_TO_ADDR
// if not pom then
20132: LD_VAR 0 3
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20311
// btype := GetBType ( building ) ;
20141: LD_ADDR_VAR 0 5
20145: PUSH
20146: LD_VAR 0 1
20150: PPUSH
20151: CALL_OW 266
20155: ST_TO_ADDR
// if btype = b_armoury then
20156: LD_VAR 0 5
20160: PUSH
20161: LD_INT 4
20163: EQUAL
20164: IFFALSE 20174
// btype := b_barracks ;
20166: LD_ADDR_VAR 0 5
20170: PUSH
20171: LD_INT 5
20173: ST_TO_ADDR
// if btype = b_depot then
20174: LD_VAR 0 5
20178: PUSH
20179: LD_INT 0
20181: EQUAL
20182: IFFALSE 20192
// btype := b_warehouse ;
20184: LD_ADDR_VAR 0 5
20188: PUSH
20189: LD_INT 1
20191: ST_TO_ADDR
// if btype = b_workshop then
20192: LD_VAR 0 5
20196: PUSH
20197: LD_INT 2
20199: EQUAL
20200: IFFALSE 20210
// btype := b_factory ;
20202: LD_ADDR_VAR 0 5
20206: PUSH
20207: LD_INT 3
20209: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20210: LD_ADDR_VAR 0 4
20214: PUSH
20215: LD_VAR 0 5
20219: PPUSH
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL_OW 248
20229: PPUSH
20230: CALL_OW 450
20234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20235: LD_ADDR_VAR 0 2
20239: PUSH
20240: LD_VAR 0 3
20244: PPUSH
20245: LD_INT 1
20247: PPUSH
20248: CALL_OW 275
20252: PUSH
20253: LD_VAR 0 4
20257: PUSH
20258: LD_INT 1
20260: ARRAY
20261: GREATEREQUAL
20262: PUSH
20263: LD_VAR 0 3
20267: PPUSH
20268: LD_INT 2
20270: PPUSH
20271: CALL_OW 275
20275: PUSH
20276: LD_VAR 0 4
20280: PUSH
20281: LD_INT 2
20283: ARRAY
20284: GREATEREQUAL
20285: AND
20286: PUSH
20287: LD_VAR 0 3
20291: PPUSH
20292: LD_INT 3
20294: PPUSH
20295: CALL_OW 275
20299: PUSH
20300: LD_VAR 0 4
20304: PUSH
20305: LD_INT 3
20307: ARRAY
20308: GREATEREQUAL
20309: AND
20310: ST_TO_ADDR
// end ;
20311: LD_VAR 0 2
20315: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20316: LD_INT 0
20318: PPUSH
20319: PPUSH
20320: PPUSH
// pom := GetBase ( building ) ;
20321: LD_ADDR_VAR 0 4
20325: PUSH
20326: LD_VAR 0 1
20330: PPUSH
20331: CALL_OW 274
20335: ST_TO_ADDR
// if not pom then
20336: LD_VAR 0 4
20340: NOT
20341: IFFALSE 20345
// exit ;
20343: GO 20446
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20345: LD_ADDR_VAR 0 5
20349: PUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 248
20364: PPUSH
20365: CALL_OW 450
20369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_VAR 0 4
20379: PPUSH
20380: LD_INT 1
20382: PPUSH
20383: CALL_OW 275
20387: PUSH
20388: LD_VAR 0 5
20392: PUSH
20393: LD_INT 1
20395: ARRAY
20396: GREATEREQUAL
20397: PUSH
20398: LD_VAR 0 4
20402: PPUSH
20403: LD_INT 2
20405: PPUSH
20406: CALL_OW 275
20410: PUSH
20411: LD_VAR 0 5
20415: PUSH
20416: LD_INT 2
20418: ARRAY
20419: GREATEREQUAL
20420: AND
20421: PUSH
20422: LD_VAR 0 4
20426: PPUSH
20427: LD_INT 3
20429: PPUSH
20430: CALL_OW 275
20434: PUSH
20435: LD_VAR 0 5
20439: PUSH
20440: LD_INT 3
20442: ARRAY
20443: GREATEREQUAL
20444: AND
20445: ST_TO_ADDR
// end ;
20446: LD_VAR 0 3
20450: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
// result := false ;
20464: LD_ADDR_VAR 0 8
20468: PUSH
20469: LD_INT 0
20471: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20472: LD_VAR 0 5
20476: NOT
20477: PUSH
20478: LD_VAR 0 1
20482: NOT
20483: OR
20484: PUSH
20485: LD_VAR 0 2
20489: NOT
20490: OR
20491: PUSH
20492: LD_VAR 0 3
20496: NOT
20497: OR
20498: IFFALSE 20502
// exit ;
20500: GO 21316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20502: LD_ADDR_VAR 0 14
20506: PUSH
20507: LD_VAR 0 1
20511: PPUSH
20512: LD_VAR 0 2
20516: PPUSH
20517: LD_VAR 0 3
20521: PPUSH
20522: LD_VAR 0 4
20526: PPUSH
20527: LD_VAR 0 5
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: CALL_OW 248
20540: PPUSH
20541: LD_INT 0
20543: PPUSH
20544: CALL 22569 0 6
20548: ST_TO_ADDR
// if not hexes then
20549: LD_VAR 0 14
20553: NOT
20554: IFFALSE 20558
// exit ;
20556: GO 21316
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20558: LD_ADDR_VAR 0 17
20562: PUSH
20563: LD_VAR 0 5
20567: PPUSH
20568: LD_INT 22
20570: PUSH
20571: LD_VAR 0 13
20575: PPUSH
20576: CALL_OW 255
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 2
20587: PUSH
20588: LD_INT 30
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 30
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PPUSH
20617: CALL_OW 72
20621: ST_TO_ADDR
// for i = 1 to hexes do
20622: LD_ADDR_VAR 0 9
20626: PUSH
20627: DOUBLE
20628: LD_INT 1
20630: DEC
20631: ST_TO_ADDR
20632: LD_VAR 0 14
20636: PUSH
20637: FOR_TO
20638: IFFALSE 21314
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20640: LD_ADDR_VAR 0 13
20644: PUSH
20645: LD_VAR 0 14
20649: PUSH
20650: LD_VAR 0 9
20654: ARRAY
20655: PUSH
20656: LD_INT 1
20658: ARRAY
20659: PPUSH
20660: LD_VAR 0 14
20664: PUSH
20665: LD_VAR 0 9
20669: ARRAY
20670: PUSH
20671: LD_INT 2
20673: ARRAY
20674: PPUSH
20675: CALL_OW 428
20679: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20680: LD_VAR 0 14
20684: PUSH
20685: LD_VAR 0 9
20689: ARRAY
20690: PUSH
20691: LD_INT 1
20693: ARRAY
20694: PPUSH
20695: LD_VAR 0 14
20699: PUSH
20700: LD_VAR 0 9
20704: ARRAY
20705: PUSH
20706: LD_INT 2
20708: ARRAY
20709: PPUSH
20710: CALL_OW 351
20714: PUSH
20715: LD_VAR 0 14
20719: PUSH
20720: LD_VAR 0 9
20724: ARRAY
20725: PUSH
20726: LD_INT 1
20728: ARRAY
20729: PPUSH
20730: LD_VAR 0 14
20734: PUSH
20735: LD_VAR 0 9
20739: ARRAY
20740: PUSH
20741: LD_INT 2
20743: ARRAY
20744: PPUSH
20745: CALL_OW 488
20749: NOT
20750: OR
20751: PUSH
20752: LD_VAR 0 13
20756: PPUSH
20757: CALL_OW 247
20761: PUSH
20762: LD_INT 3
20764: EQUAL
20765: OR
20766: IFFALSE 20772
// exit ;
20768: POP
20769: POP
20770: GO 21316
// if not tmp then
20772: LD_VAR 0 13
20776: NOT
20777: IFFALSE 20781
// continue ;
20779: GO 20637
// result := true ;
20781: LD_ADDR_VAR 0 8
20785: PUSH
20786: LD_INT 1
20788: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20789: LD_VAR 0 6
20793: PUSH
20794: LD_VAR 0 13
20798: PPUSH
20799: CALL_OW 247
20803: PUSH
20804: LD_INT 2
20806: EQUAL
20807: AND
20808: PUSH
20809: LD_VAR 0 13
20813: PPUSH
20814: CALL_OW 263
20818: PUSH
20819: LD_INT 1
20821: EQUAL
20822: AND
20823: IFFALSE 20987
// begin if IsDrivenBy ( tmp ) then
20825: LD_VAR 0 13
20829: PPUSH
20830: CALL_OW 311
20834: IFFALSE 20838
// continue ;
20836: GO 20637
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20838: LD_VAR 0 6
20842: PPUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 60
20848: PUSH
20849: EMPTY
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 55
20861: PUSH
20862: EMPTY
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 72
20877: IFFALSE 20985
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20879: LD_ADDR_VAR 0 18
20883: PUSH
20884: LD_VAR 0 6
20888: PPUSH
20889: LD_INT 3
20891: PUSH
20892: LD_INT 60
20894: PUSH
20895: EMPTY
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: LD_INT 55
20907: PUSH
20908: EMPTY
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 72
20923: PUSH
20924: LD_INT 1
20926: ARRAY
20927: ST_TO_ADDR
// if IsInUnit ( driver ) then
20928: LD_VAR 0 18
20932: PPUSH
20933: CALL_OW 310
20937: IFFALSE 20948
// ComExit ( driver ) ;
20939: LD_VAR 0 18
20943: PPUSH
20944: CALL 46348 0 1
// AddComEnterUnit ( driver , tmp ) ;
20948: LD_VAR 0 18
20952: PPUSH
20953: LD_VAR 0 13
20957: PPUSH
20958: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20962: LD_VAR 0 18
20966: PPUSH
20967: LD_VAR 0 7
20971: PPUSH
20972: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20976: LD_VAR 0 18
20980: PPUSH
20981: CALL_OW 181
// end ; continue ;
20985: GO 20637
// end ; if not cleaners or not tmp in cleaners then
20987: LD_VAR 0 6
20991: NOT
20992: PUSH
20993: LD_VAR 0 13
20997: PUSH
20998: LD_VAR 0 6
21002: IN
21003: NOT
21004: OR
21005: IFFALSE 21312
// begin if dep then
21007: LD_VAR 0 17
21011: IFFALSE 21147
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21013: LD_ADDR_VAR 0 16
21017: PUSH
21018: LD_VAR 0 17
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: CALL_OW 250
21031: PPUSH
21032: LD_VAR 0 17
21036: PUSH
21037: LD_INT 1
21039: ARRAY
21040: PPUSH
21041: CALL_OW 254
21045: PPUSH
21046: LD_INT 5
21048: PPUSH
21049: CALL_OW 272
21053: PUSH
21054: LD_VAR 0 17
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: PPUSH
21063: CALL_OW 251
21067: PPUSH
21068: LD_VAR 0 17
21072: PUSH
21073: LD_INT 1
21075: ARRAY
21076: PPUSH
21077: CALL_OW 254
21081: PPUSH
21082: LD_INT 5
21084: PPUSH
21085: CALL_OW 273
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21094: LD_VAR 0 16
21098: PUSH
21099: LD_INT 1
21101: ARRAY
21102: PPUSH
21103: LD_VAR 0 16
21107: PUSH
21108: LD_INT 2
21110: ARRAY
21111: PPUSH
21112: CALL_OW 488
21116: IFFALSE 21147
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21118: LD_VAR 0 13
21122: PPUSH
21123: LD_VAR 0 16
21127: PUSH
21128: LD_INT 1
21130: ARRAY
21131: PPUSH
21132: LD_VAR 0 16
21136: PUSH
21137: LD_INT 2
21139: ARRAY
21140: PPUSH
21141: CALL_OW 111
// continue ;
21145: GO 20637
// end ; end ; r := GetDir ( tmp ) ;
21147: LD_ADDR_VAR 0 15
21151: PUSH
21152: LD_VAR 0 13
21156: PPUSH
21157: CALL_OW 254
21161: ST_TO_ADDR
// if r = 5 then
21162: LD_VAR 0 15
21166: PUSH
21167: LD_INT 5
21169: EQUAL
21170: IFFALSE 21180
// r := 0 ;
21172: LD_ADDR_VAR 0 15
21176: PUSH
21177: LD_INT 0
21179: ST_TO_ADDR
// for j = r to 5 do
21180: LD_ADDR_VAR 0 10
21184: PUSH
21185: DOUBLE
21186: LD_VAR 0 15
21190: DEC
21191: ST_TO_ADDR
21192: LD_INT 5
21194: PUSH
21195: FOR_TO
21196: IFFALSE 21310
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21198: LD_ADDR_VAR 0 11
21202: PUSH
21203: LD_VAR 0 13
21207: PPUSH
21208: CALL_OW 250
21212: PPUSH
21213: LD_VAR 0 10
21217: PPUSH
21218: LD_INT 2
21220: PPUSH
21221: CALL_OW 272
21225: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21226: LD_ADDR_VAR 0 12
21230: PUSH
21231: LD_VAR 0 13
21235: PPUSH
21236: CALL_OW 251
21240: PPUSH
21241: LD_VAR 0 10
21245: PPUSH
21246: LD_INT 2
21248: PPUSH
21249: CALL_OW 273
21253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21254: LD_VAR 0 11
21258: PPUSH
21259: LD_VAR 0 12
21263: PPUSH
21264: CALL_OW 488
21268: PUSH
21269: LD_VAR 0 11
21273: PPUSH
21274: LD_VAR 0 12
21278: PPUSH
21279: CALL_OW 428
21283: NOT
21284: AND
21285: IFFALSE 21308
// begin ComMoveXY ( tmp , _x , _y ) ;
21287: LD_VAR 0 13
21291: PPUSH
21292: LD_VAR 0 11
21296: PPUSH
21297: LD_VAR 0 12
21301: PPUSH
21302: CALL_OW 111
// break ;
21306: GO 21310
// end ; end ;
21308: GO 21195
21310: POP
21311: POP
// end ; end ;
21312: GO 20637
21314: POP
21315: POP
// end ;
21316: LD_VAR 0 8
21320: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21321: LD_INT 0
21323: PPUSH
// result := true ;
21324: LD_ADDR_VAR 0 3
21328: PUSH
21329: LD_INT 1
21331: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21332: LD_VAR 0 2
21336: PUSH
21337: LD_INT 24
21339: DOUBLE
21340: EQUAL
21341: IFTRUE 21351
21343: LD_INT 33
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21351
21349: GO 21376
21351: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21352: LD_ADDR_VAR 0 3
21356: PUSH
21357: LD_INT 32
21359: PPUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 321
21369: PUSH
21370: LD_INT 2
21372: EQUAL
21373: ST_TO_ADDR
21374: GO 21692
21376: LD_INT 20
21378: DOUBLE
21379: EQUAL
21380: IFTRUE 21384
21382: GO 21409
21384: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21385: LD_ADDR_VAR 0 3
21389: PUSH
21390: LD_INT 6
21392: PPUSH
21393: LD_VAR 0 1
21397: PPUSH
21398: CALL_OW 321
21402: PUSH
21403: LD_INT 2
21405: EQUAL
21406: ST_TO_ADDR
21407: GO 21692
21409: LD_INT 22
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21423
21415: LD_INT 36
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21448
21423: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21424: LD_ADDR_VAR 0 3
21428: PUSH
21429: LD_INT 15
21431: PPUSH
21432: LD_VAR 0 1
21436: PPUSH
21437: CALL_OW 321
21441: PUSH
21442: LD_INT 2
21444: EQUAL
21445: ST_TO_ADDR
21446: GO 21692
21448: LD_INT 30
21450: DOUBLE
21451: EQUAL
21452: IFTRUE 21456
21454: GO 21481
21456: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21457: LD_ADDR_VAR 0 3
21461: PUSH
21462: LD_INT 20
21464: PPUSH
21465: LD_VAR 0 1
21469: PPUSH
21470: CALL_OW 321
21474: PUSH
21475: LD_INT 2
21477: EQUAL
21478: ST_TO_ADDR
21479: GO 21692
21481: LD_INT 28
21483: DOUBLE
21484: EQUAL
21485: IFTRUE 21495
21487: LD_INT 21
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21520
21495: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21496: LD_ADDR_VAR 0 3
21500: PUSH
21501: LD_INT 21
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: CALL_OW 321
21513: PUSH
21514: LD_INT 2
21516: EQUAL
21517: ST_TO_ADDR
21518: GO 21692
21520: LD_INT 16
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21553
21528: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21529: LD_ADDR_VAR 0 3
21533: PUSH
21534: LD_INT 84
21536: PPUSH
21537: LD_VAR 0 1
21541: PPUSH
21542: CALL_OW 321
21546: PUSH
21547: LD_INT 2
21549: EQUAL
21550: ST_TO_ADDR
21551: GO 21692
21553: LD_INT 19
21555: DOUBLE
21556: EQUAL
21557: IFTRUE 21567
21559: LD_INT 23
21561: DOUBLE
21562: EQUAL
21563: IFTRUE 21567
21565: GO 21592
21567: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21568: LD_ADDR_VAR 0 3
21572: PUSH
21573: LD_INT 83
21575: PPUSH
21576: LD_VAR 0 1
21580: PPUSH
21581: CALL_OW 321
21585: PUSH
21586: LD_INT 2
21588: EQUAL
21589: ST_TO_ADDR
21590: GO 21692
21592: LD_INT 17
21594: DOUBLE
21595: EQUAL
21596: IFTRUE 21600
21598: GO 21625
21600: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21601: LD_ADDR_VAR 0 3
21605: PUSH
21606: LD_INT 39
21608: PPUSH
21609: LD_VAR 0 1
21613: PPUSH
21614: CALL_OW 321
21618: PUSH
21619: LD_INT 2
21621: EQUAL
21622: ST_TO_ADDR
21623: GO 21692
21625: LD_INT 18
21627: DOUBLE
21628: EQUAL
21629: IFTRUE 21633
21631: GO 21658
21633: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: LD_INT 40
21641: PPUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 321
21651: PUSH
21652: LD_INT 2
21654: EQUAL
21655: ST_TO_ADDR
21656: GO 21692
21658: LD_INT 27
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21691
21666: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21667: LD_ADDR_VAR 0 3
21671: PUSH
21672: LD_INT 35
21674: PPUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 321
21684: PUSH
21685: LD_INT 2
21687: EQUAL
21688: ST_TO_ADDR
21689: GO 21692
21691: POP
// end ;
21692: LD_VAR 0 3
21696: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21697: LD_INT 0
21699: PPUSH
21700: PPUSH
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
// result := false ;
21710: LD_ADDR_VAR 0 6
21714: PUSH
21715: LD_INT 0
21717: ST_TO_ADDR
// if btype = b_depot then
21718: LD_VAR 0 2
21722: PUSH
21723: LD_INT 0
21725: EQUAL
21726: IFFALSE 21738
// begin result := true ;
21728: LD_ADDR_VAR 0 6
21732: PUSH
21733: LD_INT 1
21735: ST_TO_ADDR
// exit ;
21736: GO 22564
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21738: LD_VAR 0 1
21742: NOT
21743: PUSH
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 266
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: IN
21764: NOT
21765: OR
21766: PUSH
21767: LD_VAR 0 2
21771: NOT
21772: OR
21773: PUSH
21774: LD_VAR 0 5
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: LD_INT 4
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: IN
21805: NOT
21806: OR
21807: PUSH
21808: LD_VAR 0 3
21812: PPUSH
21813: LD_VAR 0 4
21817: PPUSH
21818: CALL_OW 488
21822: NOT
21823: OR
21824: IFFALSE 21828
// exit ;
21826: GO 22564
// side := GetSide ( depot ) ;
21828: LD_ADDR_VAR 0 9
21832: PUSH
21833: LD_VAR 0 1
21837: PPUSH
21838: CALL_OW 255
21842: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21843: LD_VAR 0 9
21847: PPUSH
21848: LD_VAR 0 2
21852: PPUSH
21853: CALL 21321 0 2
21857: NOT
21858: IFFALSE 21862
// exit ;
21860: GO 22564
// pom := GetBase ( depot ) ;
21862: LD_ADDR_VAR 0 10
21866: PUSH
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 274
21876: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21877: LD_ADDR_VAR 0 11
21881: PUSH
21882: LD_VAR 0 2
21886: PPUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 248
21896: PPUSH
21897: CALL_OW 450
21901: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21902: LD_VAR 0 10
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL_OW 275
21914: PUSH
21915: LD_VAR 0 11
21919: PUSH
21920: LD_INT 1
21922: ARRAY
21923: GREATEREQUAL
21924: PUSH
21925: LD_VAR 0 10
21929: PPUSH
21930: LD_INT 2
21932: PPUSH
21933: CALL_OW 275
21937: PUSH
21938: LD_VAR 0 11
21942: PUSH
21943: LD_INT 2
21945: ARRAY
21946: GREATEREQUAL
21947: AND
21948: PUSH
21949: LD_VAR 0 10
21953: PPUSH
21954: LD_INT 3
21956: PPUSH
21957: CALL_OW 275
21961: PUSH
21962: LD_VAR 0 11
21966: PUSH
21967: LD_INT 3
21969: ARRAY
21970: GREATEREQUAL
21971: AND
21972: NOT
21973: IFFALSE 21977
// exit ;
21975: GO 22564
// if GetBType ( depot ) = b_depot then
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 266
21986: PUSH
21987: LD_INT 0
21989: EQUAL
21990: IFFALSE 22002
// dist := 28 else
21992: LD_ADDR_VAR 0 14
21996: PUSH
21997: LD_INT 28
21999: ST_TO_ADDR
22000: GO 22010
// dist := 36 ;
22002: LD_ADDR_VAR 0 14
22006: PUSH
22007: LD_INT 36
22009: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: LD_VAR 0 4
22024: PPUSH
22025: CALL_OW 297
22029: PUSH
22030: LD_VAR 0 14
22034: GREATER
22035: IFFALSE 22039
// exit ;
22037: GO 22564
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22039: LD_ADDR_VAR 0 12
22043: PUSH
22044: LD_VAR 0 2
22048: PPUSH
22049: LD_VAR 0 3
22053: PPUSH
22054: LD_VAR 0 4
22058: PPUSH
22059: LD_VAR 0 5
22063: PPUSH
22064: LD_VAR 0 1
22068: PPUSH
22069: CALL_OW 248
22073: PPUSH
22074: LD_INT 0
22076: PPUSH
22077: CALL 22569 0 6
22081: ST_TO_ADDR
// if not hexes then
22082: LD_VAR 0 12
22086: NOT
22087: IFFALSE 22091
// exit ;
22089: GO 22564
// hex := GetHexInfo ( x , y ) ;
22091: LD_ADDR_VAR 0 15
22095: PUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: LD_VAR 0 4
22105: PPUSH
22106: CALL_OW 546
22110: ST_TO_ADDR
// if hex [ 1 ] then
22111: LD_VAR 0 15
22115: PUSH
22116: LD_INT 1
22118: ARRAY
22119: IFFALSE 22123
// exit ;
22121: GO 22564
// height := hex [ 2 ] ;
22123: LD_ADDR_VAR 0 13
22127: PUSH
22128: LD_VAR 0 15
22132: PUSH
22133: LD_INT 2
22135: ARRAY
22136: ST_TO_ADDR
// for i = 1 to hexes do
22137: LD_ADDR_VAR 0 7
22141: PUSH
22142: DOUBLE
22143: LD_INT 1
22145: DEC
22146: ST_TO_ADDR
22147: LD_VAR 0 12
22151: PUSH
22152: FOR_TO
22153: IFFALSE 22483
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22155: LD_VAR 0 12
22159: PUSH
22160: LD_VAR 0 7
22164: ARRAY
22165: PUSH
22166: LD_INT 1
22168: ARRAY
22169: PPUSH
22170: LD_VAR 0 12
22174: PUSH
22175: LD_VAR 0 7
22179: ARRAY
22180: PUSH
22181: LD_INT 2
22183: ARRAY
22184: PPUSH
22185: CALL_OW 488
22189: NOT
22190: PUSH
22191: LD_VAR 0 12
22195: PUSH
22196: LD_VAR 0 7
22200: ARRAY
22201: PUSH
22202: LD_INT 1
22204: ARRAY
22205: PPUSH
22206: LD_VAR 0 12
22210: PUSH
22211: LD_VAR 0 7
22215: ARRAY
22216: PUSH
22217: LD_INT 2
22219: ARRAY
22220: PPUSH
22221: CALL_OW 428
22225: PUSH
22226: LD_INT 0
22228: GREATER
22229: OR
22230: PUSH
22231: LD_VAR 0 12
22235: PUSH
22236: LD_VAR 0 7
22240: ARRAY
22241: PUSH
22242: LD_INT 1
22244: ARRAY
22245: PPUSH
22246: LD_VAR 0 12
22250: PUSH
22251: LD_VAR 0 7
22255: ARRAY
22256: PUSH
22257: LD_INT 2
22259: ARRAY
22260: PPUSH
22261: CALL_OW 351
22265: OR
22266: IFFALSE 22272
// exit ;
22268: POP
22269: POP
22270: GO 22564
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22272: LD_ADDR_VAR 0 8
22276: PUSH
22277: LD_VAR 0 12
22281: PUSH
22282: LD_VAR 0 7
22286: ARRAY
22287: PUSH
22288: LD_INT 1
22290: ARRAY
22291: PPUSH
22292: LD_VAR 0 12
22296: PUSH
22297: LD_VAR 0 7
22301: ARRAY
22302: PUSH
22303: LD_INT 2
22305: ARRAY
22306: PPUSH
22307: CALL_OW 546
22311: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22312: LD_VAR 0 8
22316: PUSH
22317: LD_INT 1
22319: ARRAY
22320: PUSH
22321: LD_VAR 0 8
22325: PUSH
22326: LD_INT 2
22328: ARRAY
22329: PUSH
22330: LD_VAR 0 13
22334: PUSH
22335: LD_INT 2
22337: PLUS
22338: GREATER
22339: OR
22340: PUSH
22341: LD_VAR 0 8
22345: PUSH
22346: LD_INT 2
22348: ARRAY
22349: PUSH
22350: LD_VAR 0 13
22354: PUSH
22355: LD_INT 2
22357: MINUS
22358: LESS
22359: OR
22360: PUSH
22361: LD_VAR 0 8
22365: PUSH
22366: LD_INT 3
22368: ARRAY
22369: PUSH
22370: LD_INT 0
22372: PUSH
22373: LD_INT 8
22375: PUSH
22376: LD_INT 9
22378: PUSH
22379: LD_INT 10
22381: PUSH
22382: LD_INT 11
22384: PUSH
22385: LD_INT 12
22387: PUSH
22388: LD_INT 13
22390: PUSH
22391: LD_INT 16
22393: PUSH
22394: LD_INT 17
22396: PUSH
22397: LD_INT 18
22399: PUSH
22400: LD_INT 19
22402: PUSH
22403: LD_INT 20
22405: PUSH
22406: LD_INT 21
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: IN
22424: NOT
22425: OR
22426: PUSH
22427: LD_VAR 0 8
22431: PUSH
22432: LD_INT 5
22434: ARRAY
22435: NOT
22436: OR
22437: PUSH
22438: LD_VAR 0 8
22442: PUSH
22443: LD_INT 6
22445: ARRAY
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: LD_INT 2
22452: PUSH
22453: LD_INT 7
22455: PUSH
22456: LD_INT 9
22458: PUSH
22459: LD_INT 10
22461: PUSH
22462: LD_INT 11
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: IN
22473: NOT
22474: OR
22475: IFFALSE 22481
// exit ;
22477: POP
22478: POP
22479: GO 22564
// end ;
22481: GO 22152
22483: POP
22484: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22485: LD_VAR 0 9
22489: PPUSH
22490: LD_VAR 0 3
22494: PPUSH
22495: LD_VAR 0 4
22499: PPUSH
22500: LD_INT 20
22502: PPUSH
22503: CALL 14487 0 4
22507: PUSH
22508: LD_INT 4
22510: ARRAY
22511: IFFALSE 22515
// exit ;
22513: GO 22564
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22515: LD_VAR 0 2
22519: PUSH
22520: LD_INT 29
22522: PUSH
22523: LD_INT 30
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: IN
22530: PUSH
22531: LD_VAR 0 3
22535: PPUSH
22536: LD_VAR 0 4
22540: PPUSH
22541: LD_VAR 0 9
22545: PPUSH
22546: CALL_OW 440
22550: NOT
22551: AND
22552: IFFALSE 22556
// exit ;
22554: GO 22564
// result := true ;
22556: LD_ADDR_VAR 0 6
22560: PUSH
22561: LD_INT 1
22563: ST_TO_ADDR
// end ;
22564: LD_VAR 0 6
22568: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22569: LD_INT 0
22571: PPUSH
22572: PPUSH
22573: PPUSH
22574: PPUSH
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
22580: PPUSH
22581: PPUSH
22582: PPUSH
22583: PPUSH
22584: PPUSH
22585: PPUSH
22586: PPUSH
22587: PPUSH
22588: PPUSH
22589: PPUSH
22590: PPUSH
22591: PPUSH
22592: PPUSH
22593: PPUSH
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
22600: PPUSH
22601: PPUSH
22602: PPUSH
22603: PPUSH
22604: PPUSH
22605: PPUSH
22606: PPUSH
22607: PPUSH
22608: PPUSH
22609: PPUSH
22610: PPUSH
22611: PPUSH
22612: PPUSH
22613: PPUSH
22614: PPUSH
22615: PPUSH
22616: PPUSH
22617: PPUSH
22618: PPUSH
22619: PPUSH
22620: PPUSH
22621: PPUSH
22622: PPUSH
22623: PPUSH
22624: PPUSH
22625: PPUSH
22626: PPUSH
22627: PPUSH
22628: PPUSH
// result = [ ] ;
22629: LD_ADDR_VAR 0 7
22633: PUSH
22634: EMPTY
22635: ST_TO_ADDR
// temp_list = [ ] ;
22636: LD_ADDR_VAR 0 9
22640: PUSH
22641: EMPTY
22642: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22643: LD_VAR 0 4
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 2
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 5
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: IN
22674: NOT
22675: PUSH
22676: LD_VAR 0 1
22680: PUSH
22681: LD_INT 0
22683: PUSH
22684: LD_INT 1
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: IN
22691: PUSH
22692: LD_VAR 0 5
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: IN
22711: NOT
22712: AND
22713: OR
22714: IFFALSE 22718
// exit ;
22716: GO 41109
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22718: LD_VAR 0 1
22722: PUSH
22723: LD_INT 6
22725: PUSH
22726: LD_INT 7
22728: PUSH
22729: LD_INT 8
22731: PUSH
22732: LD_INT 13
22734: PUSH
22735: LD_INT 12
22737: PUSH
22738: LD_INT 15
22740: PUSH
22741: LD_INT 11
22743: PUSH
22744: LD_INT 14
22746: PUSH
22747: LD_INT 10
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: IN
22761: IFFALSE 22771
// btype = b_lab ;
22763: LD_ADDR_VAR 0 1
22767: PUSH
22768: LD_INT 6
22770: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22771: LD_VAR 0 6
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: IN
22790: NOT
22791: PUSH
22792: LD_VAR 0 1
22796: PUSH
22797: LD_INT 0
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 3
22808: PUSH
22809: LD_INT 6
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: LD_INT 4
22817: PUSH
22818: LD_INT 5
22820: PUSH
22821: LD_INT 31
22823: PUSH
22824: LD_INT 32
22826: PUSH
22827: LD_INT 33
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: IN
22843: NOT
22844: PUSH
22845: LD_VAR 0 6
22849: PUSH
22850: LD_INT 1
22852: EQUAL
22853: AND
22854: OR
22855: PUSH
22856: LD_VAR 0 1
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: IN
22871: NOT
22872: PUSH
22873: LD_VAR 0 6
22877: PUSH
22878: LD_INT 2
22880: EQUAL
22881: AND
22882: OR
22883: IFFALSE 22893
// mode = 0 ;
22885: LD_ADDR_VAR 0 6
22889: PUSH
22890: LD_INT 0
22892: ST_TO_ADDR
// case mode of 0 :
22893: LD_VAR 0 6
22897: PUSH
22898: LD_INT 0
22900: DOUBLE
22901: EQUAL
22902: IFTRUE 22906
22904: GO 34359
22906: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22907: LD_ADDR_VAR 0 11
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 0
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: LD_INT 1
22980: NEG
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: NEG
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 2
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 2
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 1
23042: NEG
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 3
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23100: LD_ADDR_VAR 0 12
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 1
23138: PUSH
23139: LD_INT 1
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 0
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 1
23169: NEG
23170: PUSH
23171: LD_INT 1
23173: NEG
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 1
23181: PUSH
23182: LD_INT 1
23184: NEG
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 2
23223: NEG
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: NEG
23235: PUSH
23236: LD_INT 1
23238: NEG
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 3
23257: NEG
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 3
23268: NEG
23269: PUSH
23270: LD_INT 1
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23296: LD_ADDR_VAR 0 13
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 0
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 1
23365: NEG
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 3
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 3
23455: NEG
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 3
23467: NEG
23468: PUSH
23469: LD_INT 3
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23495: LD_ADDR_VAR 0 14
23499: PUSH
23500: LD_INT 0
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 0
23588: PUSH
23589: LD_INT 2
23591: NEG
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 1
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 2
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 2
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: LD_INT 3
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: LD_INT 3
23656: NEG
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23691: LD_ADDR_VAR 0 15
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 1
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: NEG
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 1
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 2
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 3
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23884: LD_ADDR_VAR 0 16
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 0
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 0
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 1
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: LD_INT 0
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: NEG
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 2
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: LD_INT 3
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: LD_INT 3
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24077: LD_ADDR_VAR 0 17
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: LD_INT 0
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: LD_INT 1
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: NEG
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: NEG
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 2
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 2
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: PUSH
24223: LD_INT 2
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: NEG
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: NEG
24277: PUSH
24278: LD_INT 2
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24307: LD_ADDR_VAR 0 18
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 0
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: LD_INT 0
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 2
24392: NEG
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 2
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 2
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 2
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 2
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: LD_INT 2
24510: NEG
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24537: LD_ADDR_VAR 0 19
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 1
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: NEG
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 2
24622: NEG
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 2
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 0
24692: PUSH
24693: LD_INT 2
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: NEG
24703: PUSH
24704: LD_INT 1
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 2
24724: NEG
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 2
24736: NEG
24737: PUSH
24738: LD_INT 2
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24767: LD_ADDR_VAR 0 20
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24997: LD_ADDR_VAR 0 21
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: NEG
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 1
25070: NEG
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 2
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: LD_INT 1
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: NEG
25185: PUSH
25186: LD_INT 1
25188: NEG
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 2
25196: NEG
25197: PUSH
25198: LD_INT 2
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25227: LD_ADDR_VAR 0 22
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 0
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: LD_INT 2
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 2
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25457: LD_ADDR_VAR 0 23
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 1
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 2
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: LD_INT 1
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: LD_INT 2
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: LD_INT 3
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: LD_INT 3
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25737: LD_ADDR_VAR 0 24
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 0
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: NEG
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: NEG
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: LD_INT 2
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 2
25913: NEG
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: LD_INT 2
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: PUSH
25949: LD_INT 2
25951: NEG
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 1
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 3
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26013: LD_ADDR_VAR 0 25
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 2
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 2
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 1
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: NEG
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 2
26212: NEG
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 3
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 3
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 2
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 3
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26287: LD_ADDR_VAR 0 26
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 0
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 2
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 2
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 2
26463: NEG
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 2
26486: NEG
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: LD_INT 3
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 1
26518: NEG
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26563: LD_ADDR_VAR 0 27
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: LD_INT 0
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: LD_INT 1
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: LD_INT 2
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 2
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: NEG
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: NEG
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: NEG
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 3
26796: NEG
26797: PUSH
26798: LD_INT 1
26800: NEG
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 3
26808: NEG
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26843: LD_ADDR_VAR 0 28
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: LD_INT 0
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: NEG
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: NEG
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 2
27054: NEG
27055: PUSH
27056: LD_INT 3
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 3
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 3
27078: NEG
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 3
27090: NEG
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27125: LD_ADDR_VAR 0 29
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: PUSH
27208: LD_INT 2
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 2
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 2
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 2
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: NEG
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 3
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 3
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 3
27369: NEG
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27404: LD_ADDR_VAR 0 30
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 1
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 2
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 3
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 3
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 3
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: NEG
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 3
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27682: LD_ADDR_VAR 0 31
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 0
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 0
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: LD_INT 2
27767: NEG
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: LD_INT 1
27778: NEG
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 2
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: LD_INT 2
27863: NEG
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 2
27871: NEG
27872: PUSH
27873: LD_INT 3
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 3
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27960: LD_ADDR_VAR 0 32
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: NEG
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: LD_INT 3
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: LD_INT 2
28164: NEG
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 3
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: NEG
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 3
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28238: LD_ADDR_VAR 0 33
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 0
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: NEG
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 2
28404: NEG
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 2
28428: NEG
28429: PUSH
28430: LD_INT 3
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28517: LD_ADDR_VAR 0 34
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 2
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: LD_INT 3
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: LD_INT 2
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 3
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 3
28762: NEG
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28797: LD_ADDR_VAR 0 35
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 0
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: LD_INT 0
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 1
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: LD_INT 1
28870: NEG
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 2
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28909: LD_ADDR_VAR 0 36
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 1
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29021: LD_ADDR_VAR 0 37
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 1
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29133: LD_ADDR_VAR 0 38
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29245: LD_ADDR_VAR 0 39
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 1
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: NEG
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: NEG
29327: PUSH
29328: LD_INT 2
29330: NEG
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29357: LD_ADDR_VAR 0 40
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 1
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29469: LD_ADDR_VAR 0 41
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 1
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 2
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: LD_INT 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 2
29624: NEG
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 2
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 3
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 3
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 3
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 3
29743: NEG
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 3
29754: NEG
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 3
29766: NEG
29767: PUSH
29768: LD_INT 2
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: LD_INT 3
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29819: LD_ADDR_VAR 0 42
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: LD_INT 0
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: LD_INT 2
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 2
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: LD_INT 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: LD_INT 2
30001: NEG
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 3
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 2
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 3
30116: NEG
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 3
30128: NEG
30129: PUSH
30130: LD_INT 3
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30169: LD_ADDR_VAR 0 43
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 1
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: LD_INT 2
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: LD_INT 2
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: LD_INT 0
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: PUSH
30360: LD_INT 3
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 2
30392: PUSH
30393: LD_INT 1
30395: NEG
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 3
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 3
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 3
30465: NEG
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: NEG
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30517: LD_ADDR_VAR 0 44
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 1
30586: NEG
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 0
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 2
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: LD_INT 2
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 2
30695: NEG
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: LD_INT 3
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 3
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: LD_INT 2
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 3
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 3
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 3
30814: NEG
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 3
30826: NEG
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30867: LD_ADDR_VAR 0 45
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: NEG
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 2
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: LD_INT 2
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 3
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 3
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 3
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 3
31113: PUSH
31114: LD_INT 3
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 0
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: NEG
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 3
31164: NEG
31165: PUSH
31166: LD_INT 2
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31217: LD_ADDR_VAR 0 46
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 2
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: NEG
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: LD_INT 3
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 3
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 3
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 3
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 3
31513: NEG
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 3
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31565: LD_ADDR_VAR 0 47
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 2
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: LD_INT 2
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31716: LD_ADDR_VAR 0 48
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 1
31785: NEG
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: LD_INT 2
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 2
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31863: LD_ADDR_VAR 0 49
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: NEG
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32007: LD_ADDR_VAR 0 50
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: LD_INT 2
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32151: LD_ADDR_VAR 0 51
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: NEG
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32298: LD_ADDR_VAR 0 52
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: LD_INT 2
32429: NEG
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32449: LD_ADDR_VAR 0 53
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32679: LD_ADDR_VAR 0 54
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32909: LD_ADDR_VAR 0 55
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33139: LD_ADDR_VAR 0 56
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 2
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33369: LD_ADDR_VAR 0 57
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 2
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: NEG
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33599: LD_ADDR_VAR 0 58
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33829: LD_ADDR_VAR 0 59
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33917: LD_ADDR_VAR 0 60
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34005: LD_ADDR_VAR 0 61
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34093: LD_ADDR_VAR 0 62
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 1
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34181: LD_ADDR_VAR 0 63
34185: PUSH
34186: LD_INT 0
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34269: LD_ADDR_VAR 0 64
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: ST_TO_ADDR
// end ; 1 :
34357: GO 40254
34359: LD_INT 1
34361: DOUBLE
34362: EQUAL
34363: IFTRUE 34367
34365: GO 36990
34367: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34368: LD_ADDR_VAR 0 11
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 3
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 3
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 2
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34412: LD_ADDR_VAR 0 12
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 3
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34453: LD_ADDR_VAR 0 13
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 3
34470: PUSH
34471: LD_INT 3
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 3
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34493: LD_ADDR_VAR 0 14
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: NEG
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34534: LD_ADDR_VAR 0 15
34538: PUSH
34539: LD_INT 2
34541: NEG
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: NEG
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34578: LD_ADDR_VAR 0 16
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: LD_INT 3
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 3
34609: NEG
34610: PUSH
34611: LD_INT 3
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: LIST
34623: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34624: LD_ADDR_VAR 0 17
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 3
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 3
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: LIST
34667: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34668: LD_ADDR_VAR 0 18
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 1
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34709: LD_ADDR_VAR 0 19
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 3
34726: PUSH
34727: LD_INT 3
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34749: LD_ADDR_VAR 0 20
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: NEG
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34790: LD_ADDR_VAR 0 21
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: NEG
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34834: LD_ADDR_VAR 0 22
34838: PUSH
34839: LD_INT 2
34841: NEG
34842: PUSH
34843: LD_INT 3
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 3
34853: NEG
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 3
34865: NEG
34866: PUSH
34867: LD_INT 3
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: LIST
34879: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34880: LD_ADDR_VAR 0 23
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 3
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: LD_INT 4
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 3
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34924: LD_ADDR_VAR 0 24
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 4
34952: PUSH
34953: LD_INT 1
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34965: LD_ADDR_VAR 0 25
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 3
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 4
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35005: LD_ADDR_VAR 0 26
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 4
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 3
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: LIST
35045: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35046: LD_ADDR_VAR 0 27
35050: PUSH
35051: LD_INT 3
35053: NEG
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 3
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 4
35075: NEG
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35090: LD_ADDR_VAR 0 28
35094: PUSH
35095: LD_INT 3
35097: NEG
35098: PUSH
35099: LD_INT 3
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: NEG
35110: PUSH
35111: LD_INT 4
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 4
35121: NEG
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35136: LD_ADDR_VAR 0 29
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 3
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: LD_INT 3
35158: NEG
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: PUSH
35167: LD_INT 2
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 4
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 4
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: LD_INT 3
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 5
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 5
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 4
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 6
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 6
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 5
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35291: LD_ADDR_VAR 0 30
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: LD_INT 1
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 4
35340: PUSH
35341: LD_INT 0
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 4
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 5
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 5
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 5
35391: PUSH
35392: LD_INT 1
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 6
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 6
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35434: LD_ADDR_VAR 0 31
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 3
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 4
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 4
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: PUSH
35492: LD_INT 4
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 5
35501: PUSH
35502: LD_INT 4
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 5
35511: PUSH
35512: LD_INT 5
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 4
35521: PUSH
35522: LD_INT 5
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 6
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 6
35541: PUSH
35542: LD_INT 6
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 5
35551: PUSH
35552: LD_INT 6
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35573: LD_ADDR_VAR 0 32
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: LD_INT 2
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: PUSH
35612: LD_INT 4
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: LD_INT 5
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 5
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 4
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 6
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 6
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 5
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35716: LD_ADDR_VAR 0 33
35720: PUSH
35721: LD_INT 2
35723: NEG
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 3
35734: NEG
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 3
35757: NEG
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 4
35768: NEG
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 4
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 4
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 5
35802: NEG
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 5
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 5
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 6
35836: NEG
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 6
35847: NEG
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35871: LD_ADDR_VAR 0 34
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: LD_INT 3
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 3
35890: NEG
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 3
35902: NEG
35903: PUSH
35904: LD_INT 3
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: LD_INT 4
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 4
35926: NEG
35927: PUSH
35928: LD_INT 3
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 4
35938: NEG
35939: PUSH
35940: LD_INT 4
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 4
35950: NEG
35951: PUSH
35952: LD_INT 5
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 5
35962: NEG
35963: PUSH
35964: LD_INT 4
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 5
35974: NEG
35975: PUSH
35976: LD_INT 5
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 5
35986: NEG
35987: PUSH
35988: LD_INT 6
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 6
35998: NEG
35999: PUSH
36000: LD_INT 5
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 6
36010: NEG
36011: PUSH
36012: LD_INT 6
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36034: LD_ADDR_VAR 0 41
36038: PUSH
36039: LD_INT 0
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: LD_INT 3
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 2
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36078: LD_ADDR_VAR 0 42
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 3
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36119: LD_ADDR_VAR 0 43
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 3
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36159: LD_ADDR_VAR 0 44
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 2
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36200: LD_ADDR_VAR 0 45
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 3
36229: NEG
36230: PUSH
36231: LD_INT 1
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36244: LD_ADDR_VAR 0 46
36248: PUSH
36249: LD_INT 2
36251: NEG
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: LD_INT 3
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36290: LD_ADDR_VAR 0 47
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: LD_INT 3
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: NEG
36310: PUSH
36311: LD_INT 3
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36323: LD_ADDR_VAR 0 48
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36354: LD_ADDR_VAR 0 49
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36383: LD_ADDR_VAR 0 50
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36412: LD_ADDR_VAR 0 51
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36443: LD_ADDR_VAR 0 52
36447: PUSH
36448: LD_INT 3
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36476: LD_ADDR_VAR 0 53
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 3
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: LD_INT 3
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36520: LD_ADDR_VAR 0 54
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 3
36548: PUSH
36549: LD_INT 1
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36561: LD_ADDR_VAR 0 55
36565: PUSH
36566: LD_INT 3
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36601: LD_ADDR_VAR 0 56
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 3
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36642: LD_ADDR_VAR 0 57
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: NEG
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 3
36671: NEG
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36686: LD_ADDR_VAR 0 58
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 3
36705: NEG
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 3
36717: NEG
36718: PUSH
36719: LD_INT 3
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36732: LD_ADDR_VAR 0 59
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36776: LD_ADDR_VAR 0 60
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36817: LD_ADDR_VAR 0 61
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36857: LD_ADDR_VAR 0 62
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36898: LD_ADDR_VAR 0 63
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36942: LD_ADDR_VAR 0 64
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: ST_TO_ADDR
// end ; 2 :
36988: GO 40254
36990: LD_INT 2
36992: DOUBLE
36993: EQUAL
36994: IFTRUE 36998
36996: GO 40253
36998: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36999: LD_ADDR_VAR 0 29
37003: PUSH
37004: LD_INT 4
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 4
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 4
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 3
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 3
37109: PUSH
37110: LD_INT 2
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: LD_INT 3
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 4
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: LD_INT 4
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 4
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 4
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 4
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 4
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: LD_INT 5
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 0
37229: PUSH
37230: LD_INT 5
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 4
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: PUSH
37262: LD_INT 5
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 3
37293: NEG
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 2
37305: NEG
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: NEG
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 3
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 4
37338: NEG
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 4
37349: NEG
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 4
37361: NEG
37362: PUSH
37363: LD_INT 2
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 4
37384: NEG
37385: PUSH
37386: LD_INT 4
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 4
37396: NEG
37397: PUSH
37398: LD_INT 5
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 3
37408: NEG
37409: PUSH
37410: LD_INT 4
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 4
37432: NEG
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 5
37444: NEG
37445: PUSH
37446: LD_INT 4
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 5
37456: NEG
37457: PUSH
37458: LD_INT 5
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: NEG
37469: PUSH
37470: LD_INT 5
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 5
37480: NEG
37481: PUSH
37482: LD_INT 3
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37537: LD_ADDR_VAR 0 30
37541: PUSH
37542: LD_INT 4
37544: PUSH
37545: LD_INT 4
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 4
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 5
37564: PUSH
37565: LD_INT 4
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 5
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 4
37584: PUSH
37585: LD_INT 5
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: LD_INT 4
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: LD_INT 3
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 5
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 3
37624: PUSH
37625: LD_INT 5
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 4
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 4
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 3
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 4
37727: NEG
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 4
37738: NEG
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: NEG
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 3
37761: NEG
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 5
37783: NEG
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 5
37794: NEG
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 5
37806: NEG
37807: PUSH
37808: LD_INT 2
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 3
37829: NEG
37830: PUSH
37831: LD_INT 3
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 3
37841: NEG
37842: PUSH
37843: LD_INT 4
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: LD_INT 3
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: LD_INT 2
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 3
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 4
37889: NEG
37890: PUSH
37891: LD_INT 3
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 4
37901: NEG
37902: PUSH
37903: LD_INT 4
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 4
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 4
37925: NEG
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 4
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 5
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 4
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 3
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 4
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 5
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: LD_INT 5
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38084: LD_ADDR_VAR 0 31
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 4
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: LD_INT 5
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 5
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 4
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 5
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 2
38173: NEG
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: NEG
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 4
38240: NEG
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 4
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 4
38286: NEG
38287: PUSH
38288: LD_INT 4
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 4
38298: NEG
38299: PUSH
38300: LD_INT 5
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 3
38310: NEG
38311: PUSH
38312: LD_INT 4
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 4
38334: NEG
38335: PUSH
38336: LD_INT 3
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 5
38346: NEG
38347: PUSH
38348: LD_INT 4
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 5
38358: NEG
38359: PUSH
38360: LD_INT 5
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: LD_INT 5
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 5
38382: NEG
38383: PUSH
38384: LD_INT 3
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 3
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 4
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: LD_INT 2
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 4
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: PUSH
38474: LD_INT 2
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: LD_INT 4
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 4
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 4
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 5
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 5
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 4
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 5
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38634: LD_ADDR_VAR 0 32
38638: PUSH
38639: LD_INT 4
38641: NEG
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 4
38652: NEG
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 3
38664: NEG
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 4
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 5
38697: NEG
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 5
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 5
38720: NEG
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 3
38743: NEG
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 3
38755: NEG
38756: PUSH
38757: LD_INT 4
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 3
38791: NEG
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 4
38803: NEG
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 4
38815: NEG
38816: PUSH
38817: LD_INT 4
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 4
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 4
38839: NEG
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 4
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 5
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 4
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: NEG
38907: PUSH
38908: LD_INT 4
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 5
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 5
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 4
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 4
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 4
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 4
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 4
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 5
39066: PUSH
39067: LD_INT 4
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 5
39076: PUSH
39077: LD_INT 5
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 4
39086: PUSH
39087: LD_INT 5
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 3
39096: PUSH
39097: LD_INT 4
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 5
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39181: LD_ADDR_VAR 0 33
39185: PUSH
39186: LD_INT 4
39188: NEG
39189: PUSH
39190: LD_INT 4
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 4
39200: NEG
39201: PUSH
39202: LD_INT 5
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: LD_INT 4
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 4
39236: NEG
39237: PUSH
39238: LD_INT 3
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 5
39248: NEG
39249: PUSH
39250: LD_INT 4
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 5
39260: NEG
39261: PUSH
39262: LD_INT 5
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 3
39272: NEG
39273: PUSH
39274: LD_INT 5
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 5
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: LD_INT 4
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 4
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 2
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 4
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 4
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 4
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 5
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 5
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 4
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 3
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 4
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 4
39521: PUSH
39522: LD_INT 4
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 4
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 2
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 2
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: LD_INT 4
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: LD_INT 3
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: LD_INT 4
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 5
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: LD_INT 4
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: LD_INT 3
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 5
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: LD_INT 3
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39719: LD_ADDR_VAR 0 34
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 4
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 5
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 4
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 3
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 4
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 5
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 5
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 3
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 4
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 4
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 4
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 4
39921: PUSH
39922: LD_INT 4
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 4
39931: PUSH
39932: LD_INT 3
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 5
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 5
39951: PUSH
39952: LD_INT 5
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 4
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: LD_INT 4
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 5
39991: PUSH
39992: LD_INT 3
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: LD_INT 5
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 3
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 2
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 4
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 4
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 2
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 4
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 4
40104: NEG
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 4
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 4
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 5
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 5
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 5
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// end ; end ;
40251: GO 40254
40253: POP
// case btype of b_depot , b_warehouse :
40254: LD_VAR 0 1
40258: PUSH
40259: LD_INT 0
40261: DOUBLE
40262: EQUAL
40263: IFTRUE 40273
40265: LD_INT 1
40267: DOUBLE
40268: EQUAL
40269: IFTRUE 40273
40271: GO 40474
40273: POP
// case nation of nation_american :
40274: LD_VAR 0 5
40278: PUSH
40279: LD_INT 1
40281: DOUBLE
40282: EQUAL
40283: IFTRUE 40287
40285: GO 40343
40287: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40288: LD_ADDR_VAR 0 9
40292: PUSH
40293: LD_VAR 0 11
40297: PUSH
40298: LD_VAR 0 12
40302: PUSH
40303: LD_VAR 0 13
40307: PUSH
40308: LD_VAR 0 14
40312: PUSH
40313: LD_VAR 0 15
40317: PUSH
40318: LD_VAR 0 16
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: PUSH
40331: LD_VAR 0 4
40335: PUSH
40336: LD_INT 1
40338: PLUS
40339: ARRAY
40340: ST_TO_ADDR
40341: GO 40472
40343: LD_INT 2
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40407
40351: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40352: LD_ADDR_VAR 0 9
40356: PUSH
40357: LD_VAR 0 17
40361: PUSH
40362: LD_VAR 0 18
40366: PUSH
40367: LD_VAR 0 19
40371: PUSH
40372: LD_VAR 0 20
40376: PUSH
40377: LD_VAR 0 21
40381: PUSH
40382: LD_VAR 0 22
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: PUSH
40395: LD_VAR 0 4
40399: PUSH
40400: LD_INT 1
40402: PLUS
40403: ARRAY
40404: ST_TO_ADDR
40405: GO 40472
40407: LD_INT 3
40409: DOUBLE
40410: EQUAL
40411: IFTRUE 40415
40413: GO 40471
40415: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40416: LD_ADDR_VAR 0 9
40420: PUSH
40421: LD_VAR 0 23
40425: PUSH
40426: LD_VAR 0 24
40430: PUSH
40431: LD_VAR 0 25
40435: PUSH
40436: LD_VAR 0 26
40440: PUSH
40441: LD_VAR 0 27
40445: PUSH
40446: LD_VAR 0 28
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: PUSH
40459: LD_VAR 0 4
40463: PUSH
40464: LD_INT 1
40466: PLUS
40467: ARRAY
40468: ST_TO_ADDR
40469: GO 40472
40471: POP
40472: GO 41027
40474: LD_INT 2
40476: DOUBLE
40477: EQUAL
40478: IFTRUE 40488
40480: LD_INT 3
40482: DOUBLE
40483: EQUAL
40484: IFTRUE 40488
40486: GO 40544
40488: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40489: LD_ADDR_VAR 0 9
40493: PUSH
40494: LD_VAR 0 29
40498: PUSH
40499: LD_VAR 0 30
40503: PUSH
40504: LD_VAR 0 31
40508: PUSH
40509: LD_VAR 0 32
40513: PUSH
40514: LD_VAR 0 33
40518: PUSH
40519: LD_VAR 0 34
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: PUSH
40532: LD_VAR 0 4
40536: PUSH
40537: LD_INT 1
40539: PLUS
40540: ARRAY
40541: ST_TO_ADDR
40542: GO 41027
40544: LD_INT 16
40546: DOUBLE
40547: EQUAL
40548: IFTRUE 40606
40550: LD_INT 17
40552: DOUBLE
40553: EQUAL
40554: IFTRUE 40606
40556: LD_INT 18
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40606
40562: LD_INT 19
40564: DOUBLE
40565: EQUAL
40566: IFTRUE 40606
40568: LD_INT 22
40570: DOUBLE
40571: EQUAL
40572: IFTRUE 40606
40574: LD_INT 20
40576: DOUBLE
40577: EQUAL
40578: IFTRUE 40606
40580: LD_INT 21
40582: DOUBLE
40583: EQUAL
40584: IFTRUE 40606
40586: LD_INT 23
40588: DOUBLE
40589: EQUAL
40590: IFTRUE 40606
40592: LD_INT 24
40594: DOUBLE
40595: EQUAL
40596: IFTRUE 40606
40598: LD_INT 25
40600: DOUBLE
40601: EQUAL
40602: IFTRUE 40606
40604: GO 40662
40606: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_VAR 0 35
40616: PUSH
40617: LD_VAR 0 36
40621: PUSH
40622: LD_VAR 0 37
40626: PUSH
40627: LD_VAR 0 38
40631: PUSH
40632: LD_VAR 0 39
40636: PUSH
40637: LD_VAR 0 40
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: PUSH
40650: LD_VAR 0 4
40654: PUSH
40655: LD_INT 1
40657: PLUS
40658: ARRAY
40659: ST_TO_ADDR
40660: GO 41027
40662: LD_INT 6
40664: DOUBLE
40665: EQUAL
40666: IFTRUE 40718
40668: LD_INT 7
40670: DOUBLE
40671: EQUAL
40672: IFTRUE 40718
40674: LD_INT 8
40676: DOUBLE
40677: EQUAL
40678: IFTRUE 40718
40680: LD_INT 13
40682: DOUBLE
40683: EQUAL
40684: IFTRUE 40718
40686: LD_INT 12
40688: DOUBLE
40689: EQUAL
40690: IFTRUE 40718
40692: LD_INT 15
40694: DOUBLE
40695: EQUAL
40696: IFTRUE 40718
40698: LD_INT 11
40700: DOUBLE
40701: EQUAL
40702: IFTRUE 40718
40704: LD_INT 14
40706: DOUBLE
40707: EQUAL
40708: IFTRUE 40718
40710: LD_INT 10
40712: DOUBLE
40713: EQUAL
40714: IFTRUE 40718
40716: GO 40774
40718: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40719: LD_ADDR_VAR 0 9
40723: PUSH
40724: LD_VAR 0 41
40728: PUSH
40729: LD_VAR 0 42
40733: PUSH
40734: LD_VAR 0 43
40738: PUSH
40739: LD_VAR 0 44
40743: PUSH
40744: LD_VAR 0 45
40748: PUSH
40749: LD_VAR 0 46
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: PUSH
40762: LD_VAR 0 4
40766: PUSH
40767: LD_INT 1
40769: PLUS
40770: ARRAY
40771: ST_TO_ADDR
40772: GO 41027
40774: LD_INT 36
40776: DOUBLE
40777: EQUAL
40778: IFTRUE 40782
40780: GO 40838
40782: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40783: LD_ADDR_VAR 0 9
40787: PUSH
40788: LD_VAR 0 47
40792: PUSH
40793: LD_VAR 0 48
40797: PUSH
40798: LD_VAR 0 49
40802: PUSH
40803: LD_VAR 0 50
40807: PUSH
40808: LD_VAR 0 51
40812: PUSH
40813: LD_VAR 0 52
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: PUSH
40826: LD_VAR 0 4
40830: PUSH
40831: LD_INT 1
40833: PLUS
40834: ARRAY
40835: ST_TO_ADDR
40836: GO 41027
40838: LD_INT 4
40840: DOUBLE
40841: EQUAL
40842: IFTRUE 40864
40844: LD_INT 5
40846: DOUBLE
40847: EQUAL
40848: IFTRUE 40864
40850: LD_INT 34
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40864
40856: LD_INT 37
40858: DOUBLE
40859: EQUAL
40860: IFTRUE 40864
40862: GO 40920
40864: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40865: LD_ADDR_VAR 0 9
40869: PUSH
40870: LD_VAR 0 53
40874: PUSH
40875: LD_VAR 0 54
40879: PUSH
40880: LD_VAR 0 55
40884: PUSH
40885: LD_VAR 0 56
40889: PUSH
40890: LD_VAR 0 57
40894: PUSH
40895: LD_VAR 0 58
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: PUSH
40908: LD_VAR 0 4
40912: PUSH
40913: LD_INT 1
40915: PLUS
40916: ARRAY
40917: ST_TO_ADDR
40918: GO 41027
40920: LD_INT 31
40922: DOUBLE
40923: EQUAL
40924: IFTRUE 40970
40926: LD_INT 32
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40970
40932: LD_INT 33
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40970
40938: LD_INT 27
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40970
40944: LD_INT 26
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 40970
40950: LD_INT 28
40952: DOUBLE
40953: EQUAL
40954: IFTRUE 40970
40956: LD_INT 29
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40970
40962: LD_INT 30
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 41026
40970: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40971: LD_ADDR_VAR 0 9
40975: PUSH
40976: LD_VAR 0 59
40980: PUSH
40981: LD_VAR 0 60
40985: PUSH
40986: LD_VAR 0 61
40990: PUSH
40991: LD_VAR 0 62
40995: PUSH
40996: LD_VAR 0 63
41000: PUSH
41001: LD_VAR 0 64
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: PUSH
41014: LD_VAR 0 4
41018: PUSH
41019: LD_INT 1
41021: PLUS
41022: ARRAY
41023: ST_TO_ADDR
41024: GO 41027
41026: POP
// temp_list2 = [ ] ;
41027: LD_ADDR_VAR 0 10
41031: PUSH
41032: EMPTY
41033: ST_TO_ADDR
// for i in temp_list do
41034: LD_ADDR_VAR 0 8
41038: PUSH
41039: LD_VAR 0 9
41043: PUSH
41044: FOR_IN
41045: IFFALSE 41097
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41047: LD_ADDR_VAR 0 10
41051: PUSH
41052: LD_VAR 0 10
41056: PUSH
41057: LD_VAR 0 8
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PUSH
41066: LD_VAR 0 2
41070: PLUS
41071: PUSH
41072: LD_VAR 0 8
41076: PUSH
41077: LD_INT 2
41079: ARRAY
41080: PUSH
41081: LD_VAR 0 3
41085: PLUS
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: ADD
41094: ST_TO_ADDR
41095: GO 41044
41097: POP
41098: POP
// result = temp_list2 ;
41099: LD_ADDR_VAR 0 7
41103: PUSH
41104: LD_VAR 0 10
41108: ST_TO_ADDR
// end ;
41109: LD_VAR 0 7
41113: RET
// export function EnemyInRange ( unit , dist ) ; begin
41114: LD_INT 0
41116: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41117: LD_ADDR_VAR 0 3
41121: PUSH
41122: LD_VAR 0 1
41126: PPUSH
41127: CALL_OW 255
41131: PPUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 250
41141: PPUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 251
41151: PPUSH
41152: LD_VAR 0 2
41156: PPUSH
41157: CALL 14487 0 4
41161: PUSH
41162: LD_INT 4
41164: ARRAY
41165: ST_TO_ADDR
// end ;
41166: LD_VAR 0 3
41170: RET
// export function PlayerSeeMe ( unit ) ; begin
41171: LD_INT 0
41173: PPUSH
// result := See ( your_side , unit ) ;
41174: LD_ADDR_VAR 0 2
41178: PUSH
41179: LD_OWVAR 2
41183: PPUSH
41184: LD_VAR 0 1
41188: PPUSH
41189: CALL_OW 292
41193: ST_TO_ADDR
// end ;
41194: LD_VAR 0 2
41198: RET
// export function ReverseDir ( unit ) ; begin
41199: LD_INT 0
41201: PPUSH
// if not unit then
41202: LD_VAR 0 1
41206: NOT
41207: IFFALSE 41211
// exit ;
41209: GO 41234
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41211: LD_ADDR_VAR 0 2
41215: PUSH
41216: LD_VAR 0 1
41220: PPUSH
41221: CALL_OW 254
41225: PUSH
41226: LD_INT 3
41228: PLUS
41229: PUSH
41230: LD_INT 6
41232: MOD
41233: ST_TO_ADDR
// end ;
41234: LD_VAR 0 2
41238: RET
// export function ReverseArray ( array ) ; var i ; begin
41239: LD_INT 0
41241: PPUSH
41242: PPUSH
// if not array then
41243: LD_VAR 0 1
41247: NOT
41248: IFFALSE 41252
// exit ;
41250: GO 41307
// result := [ ] ;
41252: LD_ADDR_VAR 0 2
41256: PUSH
41257: EMPTY
41258: ST_TO_ADDR
// for i := array downto 1 do
41259: LD_ADDR_VAR 0 3
41263: PUSH
41264: DOUBLE
41265: LD_VAR 0 1
41269: INC
41270: ST_TO_ADDR
41271: LD_INT 1
41273: PUSH
41274: FOR_DOWNTO
41275: IFFALSE 41305
// result := Join ( result , array [ i ] ) ;
41277: LD_ADDR_VAR 0 2
41281: PUSH
41282: LD_VAR 0 2
41286: PPUSH
41287: LD_VAR 0 1
41291: PUSH
41292: LD_VAR 0 3
41296: ARRAY
41297: PPUSH
41298: CALL 45950 0 2
41302: ST_TO_ADDR
41303: GO 41274
41305: POP
41306: POP
// end ;
41307: LD_VAR 0 2
41311: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41312: LD_INT 0
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
// if not unit or not hexes then
41320: LD_VAR 0 1
41324: NOT
41325: PUSH
41326: LD_VAR 0 2
41330: NOT
41331: OR
41332: IFFALSE 41336
// exit ;
41334: GO 41459
// dist := 9999 ;
41336: LD_ADDR_VAR 0 5
41340: PUSH
41341: LD_INT 9999
41343: ST_TO_ADDR
// for i = 1 to hexes do
41344: LD_ADDR_VAR 0 4
41348: PUSH
41349: DOUBLE
41350: LD_INT 1
41352: DEC
41353: ST_TO_ADDR
41354: LD_VAR 0 2
41358: PUSH
41359: FOR_TO
41360: IFFALSE 41447
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41362: LD_ADDR_VAR 0 6
41366: PUSH
41367: LD_VAR 0 1
41371: PPUSH
41372: LD_VAR 0 2
41376: PUSH
41377: LD_VAR 0 4
41381: ARRAY
41382: PUSH
41383: LD_INT 1
41385: ARRAY
41386: PPUSH
41387: LD_VAR 0 2
41391: PUSH
41392: LD_VAR 0 4
41396: ARRAY
41397: PUSH
41398: LD_INT 2
41400: ARRAY
41401: PPUSH
41402: CALL_OW 297
41406: ST_TO_ADDR
// if tdist < dist then
41407: LD_VAR 0 6
41411: PUSH
41412: LD_VAR 0 5
41416: LESS
41417: IFFALSE 41445
// begin hex := hexes [ i ] ;
41419: LD_ADDR_VAR 0 8
41423: PUSH
41424: LD_VAR 0 2
41428: PUSH
41429: LD_VAR 0 4
41433: ARRAY
41434: ST_TO_ADDR
// dist := tdist ;
41435: LD_ADDR_VAR 0 5
41439: PUSH
41440: LD_VAR 0 6
41444: ST_TO_ADDR
// end ; end ;
41445: GO 41359
41447: POP
41448: POP
// result := hex ;
41449: LD_ADDR_VAR 0 3
41453: PUSH
41454: LD_VAR 0 8
41458: ST_TO_ADDR
// end ;
41459: LD_VAR 0 3
41463: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41464: LD_INT 0
41466: PPUSH
41467: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41468: LD_VAR 0 1
41472: NOT
41473: PUSH
41474: LD_VAR 0 1
41478: PUSH
41479: LD_INT 21
41481: PUSH
41482: LD_INT 2
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 23
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PPUSH
41503: CALL_OW 69
41507: IN
41508: NOT
41509: OR
41510: IFFALSE 41514
// exit ;
41512: GO 41561
// for i = 1 to 3 do
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: DOUBLE
41520: LD_INT 1
41522: DEC
41523: ST_TO_ADDR
41524: LD_INT 3
41526: PUSH
41527: FOR_TO
41528: IFFALSE 41559
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41530: LD_VAR 0 1
41534: PPUSH
41535: CALL_OW 250
41539: PPUSH
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 251
41549: PPUSH
41550: LD_INT 1
41552: PPUSH
41553: CALL_OW 453
41557: GO 41527
41559: POP
41560: POP
// end ;
41561: LD_VAR 0 2
41565: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41566: LD_INT 0
41568: PPUSH
41569: PPUSH
41570: PPUSH
41571: PPUSH
41572: PPUSH
41573: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41574: LD_VAR 0 1
41578: NOT
41579: PUSH
41580: LD_VAR 0 2
41584: NOT
41585: OR
41586: PUSH
41587: LD_VAR 0 1
41591: PPUSH
41592: CALL_OW 314
41596: OR
41597: IFFALSE 41601
// exit ;
41599: GO 42068
// if GetLives ( i ) < 250 then
41601: LD_VAR 0 4
41605: PPUSH
41606: CALL_OW 256
41610: PUSH
41611: LD_INT 250
41613: LESS
41614: IFFALSE 41627
// begin ComAutodestruct ( i ) ;
41616: LD_VAR 0 4
41620: PPUSH
41621: CALL 41464 0 1
// exit ;
41625: GO 42068
// end ; x := GetX ( enemy_unit ) ;
41627: LD_ADDR_VAR 0 7
41631: PUSH
41632: LD_VAR 0 2
41636: PPUSH
41637: CALL_OW 250
41641: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41642: LD_ADDR_VAR 0 8
41646: PUSH
41647: LD_VAR 0 2
41651: PPUSH
41652: CALL_OW 251
41656: ST_TO_ADDR
// if not x or not y then
41657: LD_VAR 0 7
41661: NOT
41662: PUSH
41663: LD_VAR 0 8
41667: NOT
41668: OR
41669: IFFALSE 41673
// exit ;
41671: GO 42068
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41673: LD_ADDR_VAR 0 6
41677: PUSH
41678: LD_VAR 0 7
41682: PPUSH
41683: LD_INT 0
41685: PPUSH
41686: LD_INT 4
41688: PPUSH
41689: CALL_OW 272
41693: PUSH
41694: LD_VAR 0 8
41698: PPUSH
41699: LD_INT 0
41701: PPUSH
41702: LD_INT 4
41704: PPUSH
41705: CALL_OW 273
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_VAR 0 7
41718: PPUSH
41719: LD_INT 1
41721: PPUSH
41722: LD_INT 4
41724: PPUSH
41725: CALL_OW 272
41729: PUSH
41730: LD_VAR 0 8
41734: PPUSH
41735: LD_INT 1
41737: PPUSH
41738: LD_INT 4
41740: PPUSH
41741: CALL_OW 273
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_VAR 0 7
41754: PPUSH
41755: LD_INT 2
41757: PPUSH
41758: LD_INT 4
41760: PPUSH
41761: CALL_OW 272
41765: PUSH
41766: LD_VAR 0 8
41770: PPUSH
41771: LD_INT 2
41773: PPUSH
41774: LD_INT 4
41776: PPUSH
41777: CALL_OW 273
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_VAR 0 7
41790: PPUSH
41791: LD_INT 3
41793: PPUSH
41794: LD_INT 4
41796: PPUSH
41797: CALL_OW 272
41801: PUSH
41802: LD_VAR 0 8
41806: PPUSH
41807: LD_INT 3
41809: PPUSH
41810: LD_INT 4
41812: PPUSH
41813: CALL_OW 273
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_VAR 0 7
41826: PPUSH
41827: LD_INT 4
41829: PPUSH
41830: LD_INT 4
41832: PPUSH
41833: CALL_OW 272
41837: PUSH
41838: LD_VAR 0 8
41842: PPUSH
41843: LD_INT 4
41845: PPUSH
41846: LD_INT 4
41848: PPUSH
41849: CALL_OW 273
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_VAR 0 7
41862: PPUSH
41863: LD_INT 5
41865: PPUSH
41866: LD_INT 4
41868: PPUSH
41869: CALL_OW 272
41873: PUSH
41874: LD_VAR 0 8
41878: PPUSH
41879: LD_INT 5
41881: PPUSH
41882: LD_INT 4
41884: PPUSH
41885: CALL_OW 273
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: ST_TO_ADDR
// for i = tmp downto 1 do
41902: LD_ADDR_VAR 0 4
41906: PUSH
41907: DOUBLE
41908: LD_VAR 0 6
41912: INC
41913: ST_TO_ADDR
41914: LD_INT 1
41916: PUSH
41917: FOR_DOWNTO
41918: IFFALSE 42019
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41920: LD_VAR 0 6
41924: PUSH
41925: LD_VAR 0 4
41929: ARRAY
41930: PUSH
41931: LD_INT 1
41933: ARRAY
41934: PPUSH
41935: LD_VAR 0 6
41939: PUSH
41940: LD_VAR 0 4
41944: ARRAY
41945: PUSH
41946: LD_INT 2
41948: ARRAY
41949: PPUSH
41950: CALL_OW 488
41954: NOT
41955: PUSH
41956: LD_VAR 0 6
41960: PUSH
41961: LD_VAR 0 4
41965: ARRAY
41966: PUSH
41967: LD_INT 1
41969: ARRAY
41970: PPUSH
41971: LD_VAR 0 6
41975: PUSH
41976: LD_VAR 0 4
41980: ARRAY
41981: PUSH
41982: LD_INT 2
41984: ARRAY
41985: PPUSH
41986: CALL_OW 428
41990: PUSH
41991: LD_INT 0
41993: NONEQUAL
41994: OR
41995: IFFALSE 42017
// tmp := Delete ( tmp , i ) ;
41997: LD_ADDR_VAR 0 6
42001: PUSH
42002: LD_VAR 0 6
42006: PPUSH
42007: LD_VAR 0 4
42011: PPUSH
42012: CALL_OW 3
42016: ST_TO_ADDR
42017: GO 41917
42019: POP
42020: POP
// j := GetClosestHex ( unit , tmp ) ;
42021: LD_ADDR_VAR 0 5
42025: PUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: LD_VAR 0 6
42035: PPUSH
42036: CALL 41312 0 2
42040: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42041: LD_VAR 0 1
42045: PPUSH
42046: LD_VAR 0 5
42050: PUSH
42051: LD_INT 1
42053: ARRAY
42054: PPUSH
42055: LD_VAR 0 5
42059: PUSH
42060: LD_INT 2
42062: ARRAY
42063: PPUSH
42064: CALL_OW 111
// end ;
42068: LD_VAR 0 3
42072: RET
// export function PrepareApemanSoldier ( ) ; begin
42073: LD_INT 0
42075: PPUSH
// uc_nation := 0 ;
42076: LD_ADDR_OWVAR 21
42080: PUSH
42081: LD_INT 0
42083: ST_TO_ADDR
// hc_sex := sex_male ;
42084: LD_ADDR_OWVAR 27
42088: PUSH
42089: LD_INT 1
42091: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42092: LD_ADDR_OWVAR 28
42096: PUSH
42097: LD_INT 15
42099: ST_TO_ADDR
// hc_gallery :=  ;
42100: LD_ADDR_OWVAR 33
42104: PUSH
42105: LD_STRING 
42107: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42108: LD_ADDR_OWVAR 31
42112: PUSH
42113: LD_INT 0
42115: PPUSH
42116: LD_INT 3
42118: PPUSH
42119: CALL_OW 12
42123: PUSH
42124: LD_INT 0
42126: PPUSH
42127: LD_INT 3
42129: PPUSH
42130: CALL_OW 12
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 1
42151: RET
// export function PrepareApemanEngineer ( ) ; begin
42152: LD_INT 0
42154: PPUSH
// uc_nation := 0 ;
42155: LD_ADDR_OWVAR 21
42159: PUSH
42160: LD_INT 0
42162: ST_TO_ADDR
// hc_sex := sex_male ;
42163: LD_ADDR_OWVAR 27
42167: PUSH
42168: LD_INT 1
42170: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42171: LD_ADDR_OWVAR 28
42175: PUSH
42176: LD_INT 16
42178: ST_TO_ADDR
// hc_gallery :=  ;
42179: LD_ADDR_OWVAR 33
42183: PUSH
42184: LD_STRING 
42186: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42187: LD_ADDR_OWVAR 31
42191: PUSH
42192: LD_INT 0
42194: PPUSH
42195: LD_INT 3
42197: PPUSH
42198: CALL_OW 12
42202: PUSH
42203: LD_INT 0
42205: PPUSH
42206: LD_INT 3
42208: PPUSH
42209: CALL_OW 12
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
// end ;
42226: LD_VAR 0 1
42230: RET
// export function PrepareApeman ( agressivity ) ; begin
42231: LD_INT 0
42233: PPUSH
// uc_side := 0 ;
42234: LD_ADDR_OWVAR 20
42238: PUSH
42239: LD_INT 0
42241: ST_TO_ADDR
// uc_nation := 0 ;
42242: LD_ADDR_OWVAR 21
42246: PUSH
42247: LD_INT 0
42249: ST_TO_ADDR
// hc_sex := sex_male ;
42250: LD_ADDR_OWVAR 27
42254: PUSH
42255: LD_INT 1
42257: ST_TO_ADDR
// hc_class := class_apeman ;
42258: LD_ADDR_OWVAR 28
42262: PUSH
42263: LD_INT 12
42265: ST_TO_ADDR
// hc_gallery :=  ;
42266: LD_ADDR_OWVAR 33
42270: PUSH
42271: LD_STRING 
42273: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42274: LD_ADDR_OWVAR 35
42278: PUSH
42279: LD_VAR 0 1
42283: NEG
42284: PPUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL_OW 12
42294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42295: LD_ADDR_OWVAR 31
42299: PUSH
42300: LD_INT 0
42302: PPUSH
42303: LD_INT 3
42305: PPUSH
42306: CALL_OW 12
42310: PUSH
42311: LD_INT 0
42313: PPUSH
42314: LD_INT 3
42316: PPUSH
42317: CALL_OW 12
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
// end ;
42334: LD_VAR 0 2
42338: RET
// export function PrepareTiger ( agressivity ) ; begin
42339: LD_INT 0
42341: PPUSH
// uc_side := 0 ;
42342: LD_ADDR_OWVAR 20
42346: PUSH
42347: LD_INT 0
42349: ST_TO_ADDR
// uc_nation := 0 ;
42350: LD_ADDR_OWVAR 21
42354: PUSH
42355: LD_INT 0
42357: ST_TO_ADDR
// hc_class := class_tiger ;
42358: LD_ADDR_OWVAR 28
42362: PUSH
42363: LD_INT 14
42365: ST_TO_ADDR
// hc_gallery :=  ;
42366: LD_ADDR_OWVAR 33
42370: PUSH
42371: LD_STRING 
42373: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42374: LD_ADDR_OWVAR 35
42378: PUSH
42379: LD_VAR 0 1
42383: NEG
42384: PPUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 12
42394: ST_TO_ADDR
// end ;
42395: LD_VAR 0 2
42399: RET
// export function PrepareEnchidna ( ) ; begin
42400: LD_INT 0
42402: PPUSH
// uc_side := 0 ;
42403: LD_ADDR_OWVAR 20
42407: PUSH
42408: LD_INT 0
42410: ST_TO_ADDR
// uc_nation := 0 ;
42411: LD_ADDR_OWVAR 21
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
// hc_class := class_baggie ;
42419: LD_ADDR_OWVAR 28
42423: PUSH
42424: LD_INT 13
42426: ST_TO_ADDR
// hc_gallery :=  ;
42427: LD_ADDR_OWVAR 33
42431: PUSH
42432: LD_STRING 
42434: ST_TO_ADDR
// end ;
42435: LD_VAR 0 1
42439: RET
// export function PrepareFrog ( ) ; begin
42440: LD_INT 0
42442: PPUSH
// uc_side := 0 ;
42443: LD_ADDR_OWVAR 20
42447: PUSH
42448: LD_INT 0
42450: ST_TO_ADDR
// uc_nation := 0 ;
42451: LD_ADDR_OWVAR 21
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// hc_class := class_frog ;
42459: LD_ADDR_OWVAR 28
42463: PUSH
42464: LD_INT 19
42466: ST_TO_ADDR
// hc_gallery :=  ;
42467: LD_ADDR_OWVAR 33
42471: PUSH
42472: LD_STRING 
42474: ST_TO_ADDR
// end ;
42475: LD_VAR 0 1
42479: RET
// export function PrepareFish ( ) ; begin
42480: LD_INT 0
42482: PPUSH
// uc_side := 0 ;
42483: LD_ADDR_OWVAR 20
42487: PUSH
42488: LD_INT 0
42490: ST_TO_ADDR
// uc_nation := 0 ;
42491: LD_ADDR_OWVAR 21
42495: PUSH
42496: LD_INT 0
42498: ST_TO_ADDR
// hc_class := class_fish ;
42499: LD_ADDR_OWVAR 28
42503: PUSH
42504: LD_INT 20
42506: ST_TO_ADDR
// hc_gallery :=  ;
42507: LD_ADDR_OWVAR 33
42511: PUSH
42512: LD_STRING 
42514: ST_TO_ADDR
// end ;
42515: LD_VAR 0 1
42519: RET
// export function PrepareBird ( ) ; begin
42520: LD_INT 0
42522: PPUSH
// uc_side := 0 ;
42523: LD_ADDR_OWVAR 20
42527: PUSH
42528: LD_INT 0
42530: ST_TO_ADDR
// uc_nation := 0 ;
42531: LD_ADDR_OWVAR 21
42535: PUSH
42536: LD_INT 0
42538: ST_TO_ADDR
// hc_class := class_phororhacos ;
42539: LD_ADDR_OWVAR 28
42543: PUSH
42544: LD_INT 18
42546: ST_TO_ADDR
// hc_gallery :=  ;
42547: LD_ADDR_OWVAR 33
42551: PUSH
42552: LD_STRING 
42554: ST_TO_ADDR
// end ;
42555: LD_VAR 0 1
42559: RET
// export function PrepareHorse ( ) ; begin
42560: LD_INT 0
42562: PPUSH
// uc_side := 0 ;
42563: LD_ADDR_OWVAR 20
42567: PUSH
42568: LD_INT 0
42570: ST_TO_ADDR
// uc_nation := 0 ;
42571: LD_ADDR_OWVAR 21
42575: PUSH
42576: LD_INT 0
42578: ST_TO_ADDR
// hc_class := class_horse ;
42579: LD_ADDR_OWVAR 28
42583: PUSH
42584: LD_INT 21
42586: ST_TO_ADDR
// hc_gallery :=  ;
42587: LD_ADDR_OWVAR 33
42591: PUSH
42592: LD_STRING 
42594: ST_TO_ADDR
// end ;
42595: LD_VAR 0 1
42599: RET
// export function PrepareMastodont ( ) ; begin
42600: LD_INT 0
42602: PPUSH
// uc_side := 0 ;
42603: LD_ADDR_OWVAR 20
42607: PUSH
42608: LD_INT 0
42610: ST_TO_ADDR
// uc_nation := 0 ;
42611: LD_ADDR_OWVAR 21
42615: PUSH
42616: LD_INT 0
42618: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42619: LD_ADDR_OWVAR 37
42623: PUSH
42624: LD_INT 31
42626: ST_TO_ADDR
// vc_control := control_rider ;
42627: LD_ADDR_OWVAR 38
42631: PUSH
42632: LD_INT 4
42634: ST_TO_ADDR
// end ;
42635: LD_VAR 0 1
42639: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42640: LD_INT 0
42642: PPUSH
42643: PPUSH
42644: PPUSH
// uc_side = 0 ;
42645: LD_ADDR_OWVAR 20
42649: PUSH
42650: LD_INT 0
42652: ST_TO_ADDR
// uc_nation = 0 ;
42653: LD_ADDR_OWVAR 21
42657: PUSH
42658: LD_INT 0
42660: ST_TO_ADDR
// InitHc_All ( ) ;
42661: CALL_OW 584
// InitVc ;
42665: CALL_OW 20
// if mastodonts then
42669: LD_VAR 0 6
42673: IFFALSE 42740
// for i = 1 to mastodonts do
42675: LD_ADDR_VAR 0 11
42679: PUSH
42680: DOUBLE
42681: LD_INT 1
42683: DEC
42684: ST_TO_ADDR
42685: LD_VAR 0 6
42689: PUSH
42690: FOR_TO
42691: IFFALSE 42738
// begin vc_chassis := 31 ;
42693: LD_ADDR_OWVAR 37
42697: PUSH
42698: LD_INT 31
42700: ST_TO_ADDR
// vc_control := control_rider ;
42701: LD_ADDR_OWVAR 38
42705: PUSH
42706: LD_INT 4
42708: ST_TO_ADDR
// animal := CreateVehicle ;
42709: LD_ADDR_VAR 0 12
42713: PUSH
42714: CALL_OW 45
42718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42719: LD_VAR 0 12
42723: PPUSH
42724: LD_VAR 0 8
42728: PPUSH
42729: LD_INT 0
42731: PPUSH
42732: CALL 44868 0 3
// end ;
42736: GO 42690
42738: POP
42739: POP
// if horses then
42740: LD_VAR 0 5
42744: IFFALSE 42811
// for i = 1 to horses do
42746: LD_ADDR_VAR 0 11
42750: PUSH
42751: DOUBLE
42752: LD_INT 1
42754: DEC
42755: ST_TO_ADDR
42756: LD_VAR 0 5
42760: PUSH
42761: FOR_TO
42762: IFFALSE 42809
// begin hc_class := 21 ;
42764: LD_ADDR_OWVAR 28
42768: PUSH
42769: LD_INT 21
42771: ST_TO_ADDR
// hc_gallery :=  ;
42772: LD_ADDR_OWVAR 33
42776: PUSH
42777: LD_STRING 
42779: ST_TO_ADDR
// animal := CreateHuman ;
42780: LD_ADDR_VAR 0 12
42784: PUSH
42785: CALL_OW 44
42789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42790: LD_VAR 0 12
42794: PPUSH
42795: LD_VAR 0 8
42799: PPUSH
42800: LD_INT 0
42802: PPUSH
42803: CALL 44868 0 3
// end ;
42807: GO 42761
42809: POP
42810: POP
// if birds then
42811: LD_VAR 0 1
42815: IFFALSE 42882
// for i = 1 to birds do
42817: LD_ADDR_VAR 0 11
42821: PUSH
42822: DOUBLE
42823: LD_INT 1
42825: DEC
42826: ST_TO_ADDR
42827: LD_VAR 0 1
42831: PUSH
42832: FOR_TO
42833: IFFALSE 42880
// begin hc_class := 18 ;
42835: LD_ADDR_OWVAR 28
42839: PUSH
42840: LD_INT 18
42842: ST_TO_ADDR
// hc_gallery =  ;
42843: LD_ADDR_OWVAR 33
42847: PUSH
42848: LD_STRING 
42850: ST_TO_ADDR
// animal := CreateHuman ;
42851: LD_ADDR_VAR 0 12
42855: PUSH
42856: CALL_OW 44
42860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42861: LD_VAR 0 12
42865: PPUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_INT 0
42873: PPUSH
42874: CALL 44868 0 3
// end ;
42878: GO 42832
42880: POP
42881: POP
// if tigers then
42882: LD_VAR 0 2
42886: IFFALSE 42970
// for i = 1 to tigers do
42888: LD_ADDR_VAR 0 11
42892: PUSH
42893: DOUBLE
42894: LD_INT 1
42896: DEC
42897: ST_TO_ADDR
42898: LD_VAR 0 2
42902: PUSH
42903: FOR_TO
42904: IFFALSE 42968
// begin hc_class = class_tiger ;
42906: LD_ADDR_OWVAR 28
42910: PUSH
42911: LD_INT 14
42913: ST_TO_ADDR
// hc_gallery =  ;
42914: LD_ADDR_OWVAR 33
42918: PUSH
42919: LD_STRING 
42921: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42922: LD_ADDR_OWVAR 35
42926: PUSH
42927: LD_INT 7
42929: NEG
42930: PPUSH
42931: LD_INT 7
42933: PPUSH
42934: CALL_OW 12
42938: ST_TO_ADDR
// animal := CreateHuman ;
42939: LD_ADDR_VAR 0 12
42943: PUSH
42944: CALL_OW 44
42948: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42949: LD_VAR 0 12
42953: PPUSH
42954: LD_VAR 0 8
42958: PPUSH
42959: LD_INT 0
42961: PPUSH
42962: CALL 44868 0 3
// end ;
42966: GO 42903
42968: POP
42969: POP
// if apemans then
42970: LD_VAR 0 3
42974: IFFALSE 43097
// for i = 1 to apemans do
42976: LD_ADDR_VAR 0 11
42980: PUSH
42981: DOUBLE
42982: LD_INT 1
42984: DEC
42985: ST_TO_ADDR
42986: LD_VAR 0 3
42990: PUSH
42991: FOR_TO
42992: IFFALSE 43095
// begin hc_class = class_apeman ;
42994: LD_ADDR_OWVAR 28
42998: PUSH
42999: LD_INT 12
43001: ST_TO_ADDR
// hc_gallery =  ;
43002: LD_ADDR_OWVAR 33
43006: PUSH
43007: LD_STRING 
43009: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43010: LD_ADDR_OWVAR 35
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PPUSH
43019: LD_INT 2
43021: PPUSH
43022: CALL_OW 12
43026: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43027: LD_ADDR_OWVAR 31
43031: PUSH
43032: LD_INT 1
43034: PPUSH
43035: LD_INT 3
43037: PPUSH
43038: CALL_OW 12
43042: PUSH
43043: LD_INT 1
43045: PPUSH
43046: LD_INT 3
43048: PPUSH
43049: CALL_OW 12
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
// animal := CreateHuman ;
43066: LD_ADDR_VAR 0 12
43070: PUSH
43071: CALL_OW 44
43075: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43076: LD_VAR 0 12
43080: PPUSH
43081: LD_VAR 0 8
43085: PPUSH
43086: LD_INT 0
43088: PPUSH
43089: CALL 44868 0 3
// end ;
43093: GO 42991
43095: POP
43096: POP
// if enchidnas then
43097: LD_VAR 0 4
43101: IFFALSE 43168
// for i = 1 to enchidnas do
43103: LD_ADDR_VAR 0 11
43107: PUSH
43108: DOUBLE
43109: LD_INT 1
43111: DEC
43112: ST_TO_ADDR
43113: LD_VAR 0 4
43117: PUSH
43118: FOR_TO
43119: IFFALSE 43166
// begin hc_class = 13 ;
43121: LD_ADDR_OWVAR 28
43125: PUSH
43126: LD_INT 13
43128: ST_TO_ADDR
// hc_gallery =  ;
43129: LD_ADDR_OWVAR 33
43133: PUSH
43134: LD_STRING 
43136: ST_TO_ADDR
// animal := CreateHuman ;
43137: LD_ADDR_VAR 0 12
43141: PUSH
43142: CALL_OW 44
43146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43147: LD_VAR 0 12
43151: PPUSH
43152: LD_VAR 0 8
43156: PPUSH
43157: LD_INT 0
43159: PPUSH
43160: CALL 44868 0 3
// end ;
43164: GO 43118
43166: POP
43167: POP
// if fishes then
43168: LD_VAR 0 7
43172: IFFALSE 43239
// for i = 1 to fishes do
43174: LD_ADDR_VAR 0 11
43178: PUSH
43179: DOUBLE
43180: LD_INT 1
43182: DEC
43183: ST_TO_ADDR
43184: LD_VAR 0 7
43188: PUSH
43189: FOR_TO
43190: IFFALSE 43237
// begin hc_class = 20 ;
43192: LD_ADDR_OWVAR 28
43196: PUSH
43197: LD_INT 20
43199: ST_TO_ADDR
// hc_gallery =  ;
43200: LD_ADDR_OWVAR 33
43204: PUSH
43205: LD_STRING 
43207: ST_TO_ADDR
// animal := CreateHuman ;
43208: LD_ADDR_VAR 0 12
43212: PUSH
43213: CALL_OW 44
43217: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43218: LD_VAR 0 12
43222: PPUSH
43223: LD_VAR 0 9
43227: PPUSH
43228: LD_INT 0
43230: PPUSH
43231: CALL 44868 0 3
// end ;
43235: GO 43189
43237: POP
43238: POP
// end ;
43239: LD_VAR 0 10
43243: RET
// export function WantHeal ( sci , unit ) ; begin
43244: LD_INT 0
43246: PPUSH
// if GetTaskList ( sci ) > 0 then
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 437
43256: PUSH
43257: LD_INT 0
43259: GREATER
43260: IFFALSE 43330
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43262: LD_VAR 0 1
43266: PPUSH
43267: CALL_OW 437
43271: PUSH
43272: LD_INT 1
43274: ARRAY
43275: PUSH
43276: LD_INT 1
43278: ARRAY
43279: PUSH
43280: LD_STRING l
43282: EQUAL
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: CALL_OW 437
43293: PUSH
43294: LD_INT 1
43296: ARRAY
43297: PUSH
43298: LD_INT 4
43300: ARRAY
43301: PUSH
43302: LD_VAR 0 2
43306: EQUAL
43307: AND
43308: IFFALSE 43320
// result := true else
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_INT 1
43317: ST_TO_ADDR
43318: GO 43328
// result := false ;
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_INT 0
43327: ST_TO_ADDR
// end else
43328: GO 43338
// result := false ;
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_INT 0
43337: ST_TO_ADDR
// end ;
43338: LD_VAR 0 3
43342: RET
// export function HealTarget ( sci ) ; begin
43343: LD_INT 0
43345: PPUSH
// if not sci then
43346: LD_VAR 0 1
43350: NOT
43351: IFFALSE 43355
// exit ;
43353: GO 43420
// result := 0 ;
43355: LD_ADDR_VAR 0 2
43359: PUSH
43360: LD_INT 0
43362: ST_TO_ADDR
// if GetTaskList ( sci ) then
43363: LD_VAR 0 1
43367: PPUSH
43368: CALL_OW 437
43372: IFFALSE 43420
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43374: LD_VAR 0 1
43378: PPUSH
43379: CALL_OW 437
43383: PUSH
43384: LD_INT 1
43386: ARRAY
43387: PUSH
43388: LD_INT 1
43390: ARRAY
43391: PUSH
43392: LD_STRING l
43394: EQUAL
43395: IFFALSE 43420
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43397: LD_ADDR_VAR 0 2
43401: PUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: CALL_OW 437
43411: PUSH
43412: LD_INT 1
43414: ARRAY
43415: PUSH
43416: LD_INT 4
43418: ARRAY
43419: ST_TO_ADDR
// end ;
43420: LD_VAR 0 2
43424: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43425: LD_INT 0
43427: PPUSH
43428: PPUSH
43429: PPUSH
43430: PPUSH
// if not base_units then
43431: LD_VAR 0 1
43435: NOT
43436: IFFALSE 43440
// exit ;
43438: GO 43527
// result := false ;
43440: LD_ADDR_VAR 0 2
43444: PUSH
43445: LD_INT 0
43447: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43448: LD_ADDR_VAR 0 5
43452: PUSH
43453: LD_VAR 0 1
43457: PPUSH
43458: LD_INT 21
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PPUSH
43468: CALL_OW 72
43472: ST_TO_ADDR
// if not tmp then
43473: LD_VAR 0 5
43477: NOT
43478: IFFALSE 43482
// exit ;
43480: GO 43527
// for i in tmp do
43482: LD_ADDR_VAR 0 3
43486: PUSH
43487: LD_VAR 0 5
43491: PUSH
43492: FOR_IN
43493: IFFALSE 43525
// begin result := EnemyInRange ( i , 22 ) ;
43495: LD_ADDR_VAR 0 2
43499: PUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: LD_INT 22
43507: PPUSH
43508: CALL 41114 0 2
43512: ST_TO_ADDR
// if result then
43513: LD_VAR 0 2
43517: IFFALSE 43523
// exit ;
43519: POP
43520: POP
43521: GO 43527
// end ;
43523: GO 43492
43525: POP
43526: POP
// end ;
43527: LD_VAR 0 2
43531: RET
// export function FilterByTag ( units , tag ) ; begin
43532: LD_INT 0
43534: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_VAR 0 1
43544: PPUSH
43545: LD_INT 120
43547: PUSH
43548: LD_VAR 0 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PPUSH
43557: CALL_OW 72
43561: ST_TO_ADDR
// end ;
43562: LD_VAR 0 3
43566: RET
// export function IsDriver ( un ) ; begin
43567: LD_INT 0
43569: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43570: LD_ADDR_VAR 0 2
43574: PUSH
43575: LD_VAR 0 1
43579: PUSH
43580: LD_INT 55
43582: PUSH
43583: EMPTY
43584: LIST
43585: PPUSH
43586: CALL_OW 69
43590: IN
43591: ST_TO_ADDR
// end ;
43592: LD_VAR 0 2
43596: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43597: LD_INT 0
43599: PPUSH
43600: PPUSH
// list := [ ] ;
43601: LD_ADDR_VAR 0 5
43605: PUSH
43606: EMPTY
43607: ST_TO_ADDR
// case d of 0 :
43608: LD_VAR 0 3
43612: PUSH
43613: LD_INT 0
43615: DOUBLE
43616: EQUAL
43617: IFTRUE 43621
43619: GO 43754
43621: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43622: LD_ADDR_VAR 0 5
43626: PUSH
43627: LD_VAR 0 1
43631: PUSH
43632: LD_INT 4
43634: MINUS
43635: PUSH
43636: LD_VAR 0 2
43640: PUSH
43641: LD_INT 4
43643: MINUS
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: LIST
43652: PUSH
43653: LD_VAR 0 1
43657: PUSH
43658: LD_INT 3
43660: MINUS
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: PUSH
43675: LD_VAR 0 1
43679: PUSH
43680: LD_INT 4
43682: PLUS
43683: PUSH
43684: LD_VAR 0 2
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: PUSH
43697: LD_VAR 0 1
43701: PUSH
43702: LD_INT 3
43704: PLUS
43705: PUSH
43706: LD_VAR 0 2
43710: PUSH
43711: LD_INT 3
43713: PLUS
43714: PUSH
43715: LD_INT 5
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: LIST
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: LD_INT 4
43735: PLUS
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// end ; 1 :
43752: GO 44452
43754: LD_INT 1
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43762
43760: GO 43895
43762: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43763: LD_ADDR_VAR 0 5
43767: PUSH
43768: LD_VAR 0 1
43772: PUSH
43773: LD_VAR 0 2
43777: PUSH
43778: LD_INT 4
43780: MINUS
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: LIST
43789: PUSH
43790: LD_VAR 0 1
43794: PUSH
43795: LD_INT 3
43797: MINUS
43798: PUSH
43799: LD_VAR 0 2
43803: PUSH
43804: LD_INT 3
43806: MINUS
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: PUSH
43816: LD_VAR 0 1
43820: PUSH
43821: LD_INT 4
43823: MINUS
43824: PUSH
43825: LD_VAR 0 2
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: LIST
43837: PUSH
43838: LD_VAR 0 1
43842: PUSH
43843: LD_VAR 0 2
43847: PUSH
43848: LD_INT 3
43850: PLUS
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: PUSH
43860: LD_VAR 0 1
43864: PUSH
43865: LD_INT 4
43867: PLUS
43868: PUSH
43869: LD_VAR 0 2
43873: PUSH
43874: LD_INT 4
43876: PLUS
43877: PUSH
43878: LD_INT 5
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// end ; 2 :
43893: GO 44452
43895: LD_INT 2
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43903
43901: GO 44032
43903: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43904: LD_ADDR_VAR 0 5
43908: PUSH
43909: LD_VAR 0 1
43913: PUSH
43914: LD_VAR 0 2
43918: PUSH
43919: LD_INT 3
43921: MINUS
43922: PUSH
43923: LD_INT 3
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: PUSH
43931: LD_VAR 0 1
43935: PUSH
43936: LD_INT 4
43938: PLUS
43939: PUSH
43940: LD_VAR 0 2
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: LIST
43952: PUSH
43953: LD_VAR 0 1
43957: PUSH
43958: LD_VAR 0 2
43962: PUSH
43963: LD_INT 4
43965: PLUS
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: PUSH
43975: LD_VAR 0 1
43979: PUSH
43980: LD_INT 3
43982: MINUS
43983: PUSH
43984: LD_VAR 0 2
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PUSH
43997: LD_VAR 0 1
44001: PUSH
44002: LD_INT 4
44004: MINUS
44005: PUSH
44006: LD_VAR 0 2
44010: PUSH
44011: LD_INT 4
44013: MINUS
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: ST_TO_ADDR
// end ; 3 :
44030: GO 44452
44032: LD_INT 3
44034: DOUBLE
44035: EQUAL
44036: IFTRUE 44040
44038: GO 44173
44040: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44041: LD_ADDR_VAR 0 5
44045: PUSH
44046: LD_VAR 0 1
44050: PUSH
44051: LD_INT 3
44053: PLUS
44054: PUSH
44055: LD_VAR 0 2
44059: PUSH
44060: LD_INT 4
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: PUSH
44068: LD_VAR 0 1
44072: PUSH
44073: LD_INT 4
44075: PLUS
44076: PUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_INT 4
44084: PLUS
44085: PUSH
44086: LD_INT 5
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: PUSH
44094: LD_VAR 0 1
44098: PUSH
44099: LD_INT 4
44101: MINUS
44102: PUSH
44103: LD_VAR 0 2
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: PUSH
44116: LD_VAR 0 1
44120: PUSH
44121: LD_VAR 0 2
44125: PUSH
44126: LD_INT 4
44128: MINUS
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: PUSH
44138: LD_VAR 0 1
44142: PUSH
44143: LD_INT 3
44145: MINUS
44146: PUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_INT 3
44154: MINUS
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: ST_TO_ADDR
// end ; 4 :
44171: GO 44452
44173: LD_INT 4
44175: DOUBLE
44176: EQUAL
44177: IFTRUE 44181
44179: GO 44314
44181: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44182: LD_ADDR_VAR 0 5
44186: PUSH
44187: LD_VAR 0 1
44191: PUSH
44192: LD_VAR 0 2
44196: PUSH
44197: LD_INT 4
44199: PLUS
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: LIST
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_INT 3
44216: PLUS
44217: PUSH
44218: LD_VAR 0 2
44222: PUSH
44223: LD_INT 3
44225: PLUS
44226: PUSH
44227: LD_INT 5
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: LIST
44234: PUSH
44235: LD_VAR 0 1
44239: PUSH
44240: LD_INT 4
44242: PLUS
44243: PUSH
44244: LD_VAR 0 2
44248: PUSH
44249: LD_INT 4
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: PUSH
44257: LD_VAR 0 1
44261: PUSH
44262: LD_VAR 0 2
44266: PUSH
44267: LD_INT 3
44269: MINUS
44270: PUSH
44271: LD_INT 3
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: LIST
44278: PUSH
44279: LD_VAR 0 1
44283: PUSH
44284: LD_INT 4
44286: MINUS
44287: PUSH
44288: LD_VAR 0 2
44292: PUSH
44293: LD_INT 4
44295: MINUS
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: ST_TO_ADDR
// end ; 5 :
44312: GO 44452
44314: LD_INT 5
44316: DOUBLE
44317: EQUAL
44318: IFTRUE 44322
44320: GO 44451
44322: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44323: LD_ADDR_VAR 0 5
44327: PUSH
44328: LD_VAR 0 1
44332: PUSH
44333: LD_INT 4
44335: MINUS
44336: PUSH
44337: LD_VAR 0 2
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: PUSH
44350: LD_VAR 0 1
44354: PUSH
44355: LD_VAR 0 2
44359: PUSH
44360: LD_INT 4
44362: MINUS
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: PUSH
44372: LD_VAR 0 1
44376: PUSH
44377: LD_INT 4
44379: PLUS
44380: PUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_INT 4
44388: PLUS
44389: PUSH
44390: LD_INT 5
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: PUSH
44398: LD_VAR 0 1
44402: PUSH
44403: LD_INT 3
44405: PLUS
44406: PUSH
44407: LD_VAR 0 2
44411: PUSH
44412: LD_INT 4
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: PUSH
44420: LD_VAR 0 1
44424: PUSH
44425: LD_VAR 0 2
44429: PUSH
44430: LD_INT 3
44432: PLUS
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// end ; end ;
44449: GO 44452
44451: POP
// result := list ;
44452: LD_ADDR_VAR 0 4
44456: PUSH
44457: LD_VAR 0 5
44461: ST_TO_ADDR
// end ;
44462: LD_VAR 0 4
44466: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44467: LD_INT 0
44469: PPUSH
44470: PPUSH
44471: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44472: LD_VAR 0 1
44476: NOT
44477: PUSH
44478: LD_VAR 0 2
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 4
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: IN
44501: NOT
44502: OR
44503: IFFALSE 44507
// exit ;
44505: GO 44590
// tmp := [ ] ;
44507: LD_ADDR_VAR 0 5
44511: PUSH
44512: EMPTY
44513: ST_TO_ADDR
// for i in units do
44514: LD_ADDR_VAR 0 4
44518: PUSH
44519: LD_VAR 0 1
44523: PUSH
44524: FOR_IN
44525: IFFALSE 44559
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44527: LD_ADDR_VAR 0 5
44531: PUSH
44532: LD_VAR 0 5
44536: PPUSH
44537: LD_VAR 0 4
44541: PPUSH
44542: LD_VAR 0 2
44546: PPUSH
44547: CALL_OW 259
44551: PPUSH
44552: CALL 45950 0 2
44556: ST_TO_ADDR
44557: GO 44524
44559: POP
44560: POP
// if not tmp then
44561: LD_VAR 0 5
44565: NOT
44566: IFFALSE 44570
// exit ;
44568: GO 44590
// result := SortListByListDesc ( units , tmp ) ;
44570: LD_ADDR_VAR 0 3
44574: PUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: LD_VAR 0 5
44584: PPUSH
44585: CALL_OW 77
44589: ST_TO_ADDR
// end ;
44590: LD_VAR 0 3
44594: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44595: LD_INT 0
44597: PPUSH
44598: PPUSH
44599: PPUSH
// result := false ;
44600: LD_ADDR_VAR 0 3
44604: PUSH
44605: LD_INT 0
44607: ST_TO_ADDR
// if not building then
44608: LD_VAR 0 2
44612: NOT
44613: IFFALSE 44617
// exit ;
44615: GO 44755
// x := GetX ( building ) ;
44617: LD_ADDR_VAR 0 4
44621: PUSH
44622: LD_VAR 0 2
44626: PPUSH
44627: CALL_OW 250
44631: ST_TO_ADDR
// y := GetY ( building ) ;
44632: LD_ADDR_VAR 0 5
44636: PUSH
44637: LD_VAR 0 2
44641: PPUSH
44642: CALL_OW 251
44646: ST_TO_ADDR
// if not x or not y then
44647: LD_VAR 0 4
44651: NOT
44652: PUSH
44653: LD_VAR 0 5
44657: NOT
44658: OR
44659: IFFALSE 44663
// exit ;
44661: GO 44755
// if GetTaskList ( unit ) then
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 437
44672: IFFALSE 44755
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44674: LD_STRING e
44676: PUSH
44677: LD_VAR 0 1
44681: PPUSH
44682: CALL_OW 437
44686: PUSH
44687: LD_INT 1
44689: ARRAY
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: EQUAL
44695: PUSH
44696: LD_VAR 0 4
44700: PUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 437
44710: PUSH
44711: LD_INT 1
44713: ARRAY
44714: PUSH
44715: LD_INT 2
44717: ARRAY
44718: EQUAL
44719: AND
44720: PUSH
44721: LD_VAR 0 5
44725: PUSH
44726: LD_VAR 0 1
44730: PPUSH
44731: CALL_OW 437
44735: PUSH
44736: LD_INT 1
44738: ARRAY
44739: PUSH
44740: LD_INT 3
44742: ARRAY
44743: EQUAL
44744: AND
44745: IFFALSE 44755
// result := true end ;
44747: LD_ADDR_VAR 0 3
44751: PUSH
44752: LD_INT 1
44754: ST_TO_ADDR
// end ;
44755: LD_VAR 0 3
44759: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44760: LD_INT 0
44762: PPUSH
// result := false ;
44763: LD_ADDR_VAR 0 4
44767: PUSH
44768: LD_INT 0
44770: ST_TO_ADDR
// if GetTaskList ( unit ) then
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL_OW 437
44780: IFFALSE 44863
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44782: LD_STRING M
44784: PUSH
44785: LD_VAR 0 1
44789: PPUSH
44790: CALL_OW 437
44794: PUSH
44795: LD_INT 1
44797: ARRAY
44798: PUSH
44799: LD_INT 1
44801: ARRAY
44802: EQUAL
44803: PUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_VAR 0 1
44813: PPUSH
44814: CALL_OW 437
44818: PUSH
44819: LD_INT 1
44821: ARRAY
44822: PUSH
44823: LD_INT 2
44825: ARRAY
44826: EQUAL
44827: AND
44828: PUSH
44829: LD_VAR 0 3
44833: PUSH
44834: LD_VAR 0 1
44838: PPUSH
44839: CALL_OW 437
44843: PUSH
44844: LD_INT 1
44846: ARRAY
44847: PUSH
44848: LD_INT 3
44850: ARRAY
44851: EQUAL
44852: AND
44853: IFFALSE 44863
// result := true ;
44855: LD_ADDR_VAR 0 4
44859: PUSH
44860: LD_INT 1
44862: ST_TO_ADDR
// end ; end ;
44863: LD_VAR 0 4
44867: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44868: LD_INT 0
44870: PPUSH
44871: PPUSH
44872: PPUSH
44873: PPUSH
// if not unit or not area then
44874: LD_VAR 0 1
44878: NOT
44879: PUSH
44880: LD_VAR 0 2
44884: NOT
44885: OR
44886: IFFALSE 44890
// exit ;
44888: GO 45053
// tmp := AreaToList ( area , i ) ;
44890: LD_ADDR_VAR 0 6
44894: PUSH
44895: LD_VAR 0 2
44899: PPUSH
44900: LD_VAR 0 5
44904: PPUSH
44905: CALL_OW 517
44909: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44910: LD_ADDR_VAR 0 5
44914: PUSH
44915: DOUBLE
44916: LD_INT 1
44918: DEC
44919: ST_TO_ADDR
44920: LD_VAR 0 6
44924: PUSH
44925: LD_INT 1
44927: ARRAY
44928: PUSH
44929: FOR_TO
44930: IFFALSE 45051
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44932: LD_ADDR_VAR 0 7
44936: PUSH
44937: LD_VAR 0 6
44941: PUSH
44942: LD_INT 1
44944: ARRAY
44945: PUSH
44946: LD_VAR 0 5
44950: ARRAY
44951: PUSH
44952: LD_VAR 0 6
44956: PUSH
44957: LD_INT 2
44959: ARRAY
44960: PUSH
44961: LD_VAR 0 5
44965: ARRAY
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
44971: LD_INT 92
44973: PUSH
44974: LD_VAR 0 7
44978: PUSH
44979: LD_INT 1
44981: ARRAY
44982: PUSH
44983: LD_VAR 0 7
44987: PUSH
44988: LD_INT 2
44990: ARRAY
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: PPUSH
45001: CALL_OW 69
45005: PUSH
45006: LD_INT 0
45008: EQUAL
45009: IFFALSE 45049
// begin PlaceUnitArea ( unit , area , mode ) ;
45011: LD_VAR 0 1
45015: PPUSH
45016: LD_VAR 0 2
45020: PPUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: CALL_OW 49
// result := IsPlaced ( unit ) ;
45030: LD_ADDR_VAR 0 4
45034: PUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: CALL_OW 305
45044: ST_TO_ADDR
// exit ;
45045: POP
45046: POP
45047: GO 45053
// end ; end ;
45049: GO 44929
45051: POP
45052: POP
// end ;
45053: LD_VAR 0 4
45057: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
45062: PPUSH
// if not side or side > 8 then
45063: LD_VAR 0 1
45067: NOT
45068: PUSH
45069: LD_VAR 0 1
45073: PUSH
45074: LD_INT 8
45076: GREATER
45077: OR
45078: IFFALSE 45082
// exit ;
45080: GO 45269
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45082: LD_ADDR_VAR 0 4
45086: PUSH
45087: LD_INT 22
45089: PUSH
45090: LD_VAR 0 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 21
45101: PUSH
45102: LD_INT 3
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PPUSH
45113: CALL_OW 69
45117: ST_TO_ADDR
// if not tmp then
45118: LD_VAR 0 4
45122: NOT
45123: IFFALSE 45127
// exit ;
45125: GO 45269
// enable_addtolog := true ;
45127: LD_ADDR_OWVAR 81
45131: PUSH
45132: LD_INT 1
45134: ST_TO_ADDR
// AddToLog ( [ ) ;
45135: LD_STRING [
45137: PPUSH
45138: CALL_OW 561
// for i in tmp do
45142: LD_ADDR_VAR 0 3
45146: PUSH
45147: LD_VAR 0 4
45151: PUSH
45152: FOR_IN
45153: IFFALSE 45260
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45155: LD_STRING [
45157: PUSH
45158: LD_VAR 0 3
45162: PPUSH
45163: CALL_OW 266
45167: STR
45168: PUSH
45169: LD_STRING , 
45171: STR
45172: PUSH
45173: LD_VAR 0 3
45177: PPUSH
45178: CALL_OW 250
45182: STR
45183: PUSH
45184: LD_STRING , 
45186: STR
45187: PUSH
45188: LD_VAR 0 3
45192: PPUSH
45193: CALL_OW 251
45197: STR
45198: PUSH
45199: LD_STRING , 
45201: STR
45202: PUSH
45203: LD_VAR 0 3
45207: PPUSH
45208: CALL_OW 254
45212: STR
45213: PUSH
45214: LD_STRING , 
45216: STR
45217: PUSH
45218: LD_VAR 0 3
45222: PPUSH
45223: LD_INT 1
45225: PPUSH
45226: CALL_OW 268
45230: STR
45231: PUSH
45232: LD_STRING , 
45234: STR
45235: PUSH
45236: LD_VAR 0 3
45240: PPUSH
45241: LD_INT 2
45243: PPUSH
45244: CALL_OW 268
45248: STR
45249: PUSH
45250: LD_STRING ],
45252: STR
45253: PPUSH
45254: CALL_OW 561
// end ;
45258: GO 45152
45260: POP
45261: POP
// AddToLog ( ]; ) ;
45262: LD_STRING ];
45264: PPUSH
45265: CALL_OW 561
// end ;
45269: LD_VAR 0 2
45273: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45274: LD_INT 0
45276: PPUSH
45277: PPUSH
45278: PPUSH
45279: PPUSH
45280: PPUSH
// if not area or not rate or not max then
45281: LD_VAR 0 1
45285: NOT
45286: PUSH
45287: LD_VAR 0 2
45291: NOT
45292: OR
45293: PUSH
45294: LD_VAR 0 4
45298: NOT
45299: OR
45300: IFFALSE 45304
// exit ;
45302: GO 45493
// while 1 do
45304: LD_INT 1
45306: IFFALSE 45493
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45308: LD_ADDR_VAR 0 9
45312: PUSH
45313: LD_VAR 0 1
45317: PPUSH
45318: LD_INT 1
45320: PPUSH
45321: CALL_OW 287
45325: PUSH
45326: LD_INT 10
45328: MUL
45329: ST_TO_ADDR
// r := rate / 10 ;
45330: LD_ADDR_VAR 0 7
45334: PUSH
45335: LD_VAR 0 2
45339: PUSH
45340: LD_INT 10
45342: DIVREAL
45343: ST_TO_ADDR
// time := 1 1$00 ;
45344: LD_ADDR_VAR 0 8
45348: PUSH
45349: LD_INT 2100
45351: ST_TO_ADDR
// if amount < min then
45352: LD_VAR 0 9
45356: PUSH
45357: LD_VAR 0 3
45361: LESS
45362: IFFALSE 45380
// r := r * 2 else
45364: LD_ADDR_VAR 0 7
45368: PUSH
45369: LD_VAR 0 7
45373: PUSH
45374: LD_INT 2
45376: MUL
45377: ST_TO_ADDR
45378: GO 45406
// if amount > max then
45380: LD_VAR 0 9
45384: PUSH
45385: LD_VAR 0 4
45389: GREATER
45390: IFFALSE 45406
// r := r / 2 ;
45392: LD_ADDR_VAR 0 7
45396: PUSH
45397: LD_VAR 0 7
45401: PUSH
45402: LD_INT 2
45404: DIVREAL
45405: ST_TO_ADDR
// time := time / r ;
45406: LD_ADDR_VAR 0 8
45410: PUSH
45411: LD_VAR 0 8
45415: PUSH
45416: LD_VAR 0 7
45420: DIVREAL
45421: ST_TO_ADDR
// if time < 0 then
45422: LD_VAR 0 8
45426: PUSH
45427: LD_INT 0
45429: LESS
45430: IFFALSE 45447
// time := time * - 1 ;
45432: LD_ADDR_VAR 0 8
45436: PUSH
45437: LD_VAR 0 8
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: MUL
45446: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45447: LD_VAR 0 8
45451: PUSH
45452: LD_INT 35
45454: PPUSH
45455: LD_INT 875
45457: PPUSH
45458: CALL_OW 12
45462: PLUS
45463: PPUSH
45464: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45468: LD_INT 1
45470: PPUSH
45471: LD_INT 5
45473: PPUSH
45474: CALL_OW 12
45478: PPUSH
45479: LD_VAR 0 1
45483: PPUSH
45484: LD_INT 1
45486: PPUSH
45487: CALL_OW 55
// end ;
45491: GO 45304
// end ;
45493: LD_VAR 0 5
45497: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45498: LD_INT 0
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
// if not turrets or not factories then
45508: LD_VAR 0 1
45512: NOT
45513: PUSH
45514: LD_VAR 0 2
45518: NOT
45519: OR
45520: IFFALSE 45524
// exit ;
45522: GO 45831
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45524: LD_ADDR_VAR 0 10
45528: PUSH
45529: LD_INT 5
45531: PUSH
45532: LD_INT 6
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 4
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: LD_INT 5
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 24
45566: PUSH
45567: LD_INT 25
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 23
45576: PUSH
45577: LD_INT 27
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 42
45590: PUSH
45591: LD_INT 43
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 44
45600: PUSH
45601: LD_INT 46
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 45
45610: PUSH
45611: LD_INT 47
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: ST_TO_ADDR
// result := [ ] ;
45628: LD_ADDR_VAR 0 3
45632: PUSH
45633: EMPTY
45634: ST_TO_ADDR
// for i in turrets do
45635: LD_ADDR_VAR 0 4
45639: PUSH
45640: LD_VAR 0 1
45644: PUSH
45645: FOR_IN
45646: IFFALSE 45829
// begin nat := GetNation ( i ) ;
45648: LD_ADDR_VAR 0 7
45652: PUSH
45653: LD_VAR 0 4
45657: PPUSH
45658: CALL_OW 248
45662: ST_TO_ADDR
// weapon := 0 ;
45663: LD_ADDR_VAR 0 8
45667: PUSH
45668: LD_INT 0
45670: ST_TO_ADDR
// if not nat then
45671: LD_VAR 0 7
45675: NOT
45676: IFFALSE 45680
// continue ;
45678: GO 45645
// for j in list [ nat ] do
45680: LD_ADDR_VAR 0 5
45684: PUSH
45685: LD_VAR 0 10
45689: PUSH
45690: LD_VAR 0 7
45694: ARRAY
45695: PUSH
45696: FOR_IN
45697: IFFALSE 45738
// if GetBWeapon ( i ) = j [ 1 ] then
45699: LD_VAR 0 4
45703: PPUSH
45704: CALL_OW 269
45708: PUSH
45709: LD_VAR 0 5
45713: PUSH
45714: LD_INT 1
45716: ARRAY
45717: EQUAL
45718: IFFALSE 45736
// begin weapon := j [ 2 ] ;
45720: LD_ADDR_VAR 0 8
45724: PUSH
45725: LD_VAR 0 5
45729: PUSH
45730: LD_INT 2
45732: ARRAY
45733: ST_TO_ADDR
// break ;
45734: GO 45738
// end ;
45736: GO 45696
45738: POP
45739: POP
// if not weapon then
45740: LD_VAR 0 8
45744: NOT
45745: IFFALSE 45749
// continue ;
45747: GO 45645
// for k in factories do
45749: LD_ADDR_VAR 0 6
45753: PUSH
45754: LD_VAR 0 2
45758: PUSH
45759: FOR_IN
45760: IFFALSE 45825
// begin weapons := AvailableWeaponList ( k ) ;
45762: LD_ADDR_VAR 0 9
45766: PUSH
45767: LD_VAR 0 6
45771: PPUSH
45772: CALL_OW 478
45776: ST_TO_ADDR
// if not weapons then
45777: LD_VAR 0 9
45781: NOT
45782: IFFALSE 45786
// continue ;
45784: GO 45759
// if weapon in weapons then
45786: LD_VAR 0 8
45790: PUSH
45791: LD_VAR 0 9
45795: IN
45796: IFFALSE 45823
// begin result := [ i , weapon ] ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_VAR 0 4
45807: PUSH
45808: LD_VAR 0 8
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// exit ;
45817: POP
45818: POP
45819: POP
45820: POP
45821: GO 45831
// end ; end ;
45823: GO 45759
45825: POP
45826: POP
// end ;
45827: GO 45645
45829: POP
45830: POP
// end ;
45831: LD_VAR 0 3
45835: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45836: LD_INT 0
45838: PPUSH
// if not side or side > 8 then
45839: LD_VAR 0 3
45843: NOT
45844: PUSH
45845: LD_VAR 0 3
45849: PUSH
45850: LD_INT 8
45852: GREATER
45853: OR
45854: IFFALSE 45858
// exit ;
45856: GO 45917
// if not range then
45858: LD_VAR 0 4
45862: NOT
45863: IFFALSE 45874
// range := - 12 ;
45865: LD_ADDR_VAR 0 4
45869: PUSH
45870: LD_INT 12
45872: NEG
45873: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45874: LD_VAR 0 1
45878: PPUSH
45879: LD_VAR 0 2
45883: PPUSH
45884: LD_VAR 0 3
45888: PPUSH
45889: LD_VAR 0 4
45893: PPUSH
45894: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45898: LD_VAR 0 1
45902: PPUSH
45903: LD_VAR 0 2
45907: PPUSH
45908: LD_VAR 0 3
45912: PPUSH
45913: CALL_OW 331
// end ;
45917: LD_VAR 0 5
45921: RET
// export function Video ( mode ) ; begin
45922: LD_INT 0
45924: PPUSH
// ingame_video = mode ;
45925: LD_ADDR_OWVAR 52
45929: PUSH
45930: LD_VAR 0 1
45934: ST_TO_ADDR
// interface_hidden = mode ;
45935: LD_ADDR_OWVAR 54
45939: PUSH
45940: LD_VAR 0 1
45944: ST_TO_ADDR
// end ;
45945: LD_VAR 0 2
45949: RET
// export function Join ( array , element ) ; begin
45950: LD_INT 0
45952: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45953: LD_ADDR_VAR 0 3
45957: PUSH
45958: LD_VAR 0 1
45962: PPUSH
45963: LD_VAR 0 1
45967: PUSH
45968: LD_INT 1
45970: PLUS
45971: PPUSH
45972: LD_VAR 0 2
45976: PPUSH
45977: CALL_OW 1
45981: ST_TO_ADDR
// end ;
45982: LD_VAR 0 3
45986: RET
// export function JoinUnion ( array , element ) ; begin
45987: LD_INT 0
45989: PPUSH
// result := array union element ;
45990: LD_ADDR_VAR 0 3
45994: PUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_VAR 0 2
46004: UNION
46005: ST_TO_ADDR
// end ;
46006: LD_VAR 0 3
46010: RET
// export function GetBehemoths ( side ) ; begin
46011: LD_INT 0
46013: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46014: LD_ADDR_VAR 0 2
46018: PUSH
46019: LD_INT 22
46021: PUSH
46022: LD_VAR 0 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 31
46033: PUSH
46034: LD_INT 25
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PPUSH
46045: CALL_OW 69
46049: ST_TO_ADDR
// end ;
46050: LD_VAR 0 2
46054: RET
// export function Shuffle ( array ) ; var i , index ; begin
46055: LD_INT 0
46057: PPUSH
46058: PPUSH
46059: PPUSH
// result := [ ] ;
46060: LD_ADDR_VAR 0 2
46064: PUSH
46065: EMPTY
46066: ST_TO_ADDR
// if not array then
46067: LD_VAR 0 1
46071: NOT
46072: IFFALSE 46076
// exit ;
46074: GO 46175
// Randomize ;
46076: CALL_OW 10
// for i = array downto 1 do
46080: LD_ADDR_VAR 0 3
46084: PUSH
46085: DOUBLE
46086: LD_VAR 0 1
46090: INC
46091: ST_TO_ADDR
46092: LD_INT 1
46094: PUSH
46095: FOR_DOWNTO
46096: IFFALSE 46173
// begin index := rand ( 1 , array ) ;
46098: LD_ADDR_VAR 0 4
46102: PUSH
46103: LD_INT 1
46105: PPUSH
46106: LD_VAR 0 1
46110: PPUSH
46111: CALL_OW 12
46115: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46116: LD_ADDR_VAR 0 2
46120: PUSH
46121: LD_VAR 0 2
46125: PPUSH
46126: LD_VAR 0 2
46130: PUSH
46131: LD_INT 1
46133: PLUS
46134: PPUSH
46135: LD_VAR 0 1
46139: PUSH
46140: LD_VAR 0 4
46144: ARRAY
46145: PPUSH
46146: CALL_OW 2
46150: ST_TO_ADDR
// array := Delete ( array , index ) ;
46151: LD_ADDR_VAR 0 1
46155: PUSH
46156: LD_VAR 0 1
46160: PPUSH
46161: LD_VAR 0 4
46165: PPUSH
46166: CALL_OW 3
46170: ST_TO_ADDR
// end ;
46171: GO 46095
46173: POP
46174: POP
// end ;
46175: LD_VAR 0 2
46179: RET
// export function GetBaseMaterials ( base ) ; begin
46180: LD_INT 0
46182: PPUSH
// result := [ 0 , 0 , 0 ] ;
46183: LD_ADDR_VAR 0 2
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// if not base then
46202: LD_VAR 0 1
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 46260
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46211: LD_ADDR_VAR 0 2
46215: PUSH
46216: LD_VAR 0 1
46220: PPUSH
46221: LD_INT 1
46223: PPUSH
46224: CALL_OW 275
46228: PUSH
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_INT 2
46236: PPUSH
46237: CALL_OW 275
46241: PUSH
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_INT 3
46249: PPUSH
46250: CALL_OW 275
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: ST_TO_ADDR
// end ;
46260: LD_VAR 0 2
46264: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46265: LD_INT 0
46267: PPUSH
46268: PPUSH
// result := array ;
46269: LD_ADDR_VAR 0 3
46273: PUSH
46274: LD_VAR 0 1
46278: ST_TO_ADDR
// if size >= result then
46279: LD_VAR 0 2
46283: PUSH
46284: LD_VAR 0 3
46288: GREATEREQUAL
46289: IFFALSE 46293
// exit ;
46291: GO 46343
// if size then
46293: LD_VAR 0 2
46297: IFFALSE 46343
// for i := array downto size do
46299: LD_ADDR_VAR 0 4
46303: PUSH
46304: DOUBLE
46305: LD_VAR 0 1
46309: INC
46310: ST_TO_ADDR
46311: LD_VAR 0 2
46315: PUSH
46316: FOR_DOWNTO
46317: IFFALSE 46341
// result := Delete ( result , result ) ;
46319: LD_ADDR_VAR 0 3
46323: PUSH
46324: LD_VAR 0 3
46328: PPUSH
46329: LD_VAR 0 3
46333: PPUSH
46334: CALL_OW 3
46338: ST_TO_ADDR
46339: GO 46316
46341: POP
46342: POP
// end ;
46343: LD_VAR 0 3
46347: RET
// export function ComExit ( unit ) ; var tmp ; begin
46348: LD_INT 0
46350: PPUSH
46351: PPUSH
// if not IsInUnit ( unit ) then
46352: LD_VAR 0 1
46356: PPUSH
46357: CALL_OW 310
46361: NOT
46362: IFFALSE 46366
// exit ;
46364: GO 46426
// tmp := IsInUnit ( unit ) ;
46366: LD_ADDR_VAR 0 3
46370: PUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 310
46380: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46381: LD_VAR 0 3
46385: PPUSH
46386: CALL_OW 247
46390: PUSH
46391: LD_INT 2
46393: EQUAL
46394: IFFALSE 46407
// ComExitVehicle ( unit ) else
46396: LD_VAR 0 1
46400: PPUSH
46401: CALL_OW 121
46405: GO 46416
// ComExitBuilding ( unit ) ;
46407: LD_VAR 0 1
46411: PPUSH
46412: CALL_OW 122
// result := tmp ;
46416: LD_ADDR_VAR 0 2
46420: PUSH
46421: LD_VAR 0 3
46425: ST_TO_ADDR
// end ;
46426: LD_VAR 0 2
46430: RET
// export function ComExitAll ( units ) ; var i ; begin
46431: LD_INT 0
46433: PPUSH
46434: PPUSH
// if not units then
46435: LD_VAR 0 1
46439: NOT
46440: IFFALSE 46444
// exit ;
46442: GO 46470
// for i in units do
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_VAR 0 1
46453: PUSH
46454: FOR_IN
46455: IFFALSE 46468
// ComExit ( i ) ;
46457: LD_VAR 0 3
46461: PPUSH
46462: CALL 46348 0 1
46466: GO 46454
46468: POP
46469: POP
// end ;
46470: LD_VAR 0 2
46474: RET
// export function ResetHc ; begin
46475: LD_INT 0
46477: PPUSH
// InitHc ;
46478: CALL_OW 19
// hc_importance := 0 ;
46482: LD_ADDR_OWVAR 32
46486: PUSH
46487: LD_INT 0
46489: ST_TO_ADDR
// end ;
46490: LD_VAR 0 1
46494: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46495: LD_INT 0
46497: PPUSH
46498: PPUSH
46499: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46500: LD_ADDR_VAR 0 6
46504: PUSH
46505: LD_VAR 0 1
46509: PUSH
46510: LD_VAR 0 3
46514: PLUS
46515: PUSH
46516: LD_INT 2
46518: DIV
46519: ST_TO_ADDR
// if _x < 0 then
46520: LD_VAR 0 6
46524: PUSH
46525: LD_INT 0
46527: LESS
46528: IFFALSE 46545
// _x := _x * - 1 ;
46530: LD_ADDR_VAR 0 6
46534: PUSH
46535: LD_VAR 0 6
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: MUL
46544: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46545: LD_ADDR_VAR 0 7
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_VAR 0 4
46559: PLUS
46560: PUSH
46561: LD_INT 2
46563: DIV
46564: ST_TO_ADDR
// if _y < 0 then
46565: LD_VAR 0 7
46569: PUSH
46570: LD_INT 0
46572: LESS
46573: IFFALSE 46590
// _y := _y * - 1 ;
46575: LD_ADDR_VAR 0 7
46579: PUSH
46580: LD_VAR 0 7
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: MUL
46589: ST_TO_ADDR
// result := [ _x , _y ] ;
46590: LD_ADDR_VAR 0 5
46594: PUSH
46595: LD_VAR 0 6
46599: PUSH
46600: LD_VAR 0 7
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: ST_TO_ADDR
// end ;
46609: LD_VAR 0 5
46613: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46614: LD_INT 0
46616: PPUSH
46617: PPUSH
46618: PPUSH
46619: PPUSH
// task := GetTaskList ( unit ) ;
46620: LD_ADDR_VAR 0 7
46624: PUSH
46625: LD_VAR 0 1
46629: PPUSH
46630: CALL_OW 437
46634: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46635: LD_VAR 0 7
46639: NOT
46640: PUSH
46641: LD_VAR 0 1
46645: PPUSH
46646: LD_VAR 0 2
46650: PPUSH
46651: CALL_OW 308
46655: NOT
46656: AND
46657: IFFALSE 46661
// exit ;
46659: GO 46779
// if IsInArea ( unit , area ) then
46661: LD_VAR 0 1
46665: PPUSH
46666: LD_VAR 0 2
46670: PPUSH
46671: CALL_OW 308
46675: IFFALSE 46693
// begin ComMoveToArea ( unit , goAway ) ;
46677: LD_VAR 0 1
46681: PPUSH
46682: LD_VAR 0 3
46686: PPUSH
46687: CALL_OW 113
// exit ;
46691: GO 46779
// end ; if task [ 1 ] [ 1 ] <> M then
46693: LD_VAR 0 7
46697: PUSH
46698: LD_INT 1
46700: ARRAY
46701: PUSH
46702: LD_INT 1
46704: ARRAY
46705: PUSH
46706: LD_STRING M
46708: NONEQUAL
46709: IFFALSE 46713
// exit ;
46711: GO 46779
// x := task [ 1 ] [ 2 ] ;
46713: LD_ADDR_VAR 0 5
46717: PUSH
46718: LD_VAR 0 7
46722: PUSH
46723: LD_INT 1
46725: ARRAY
46726: PUSH
46727: LD_INT 2
46729: ARRAY
46730: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46731: LD_ADDR_VAR 0 6
46735: PUSH
46736: LD_VAR 0 7
46740: PUSH
46741: LD_INT 1
46743: ARRAY
46744: PUSH
46745: LD_INT 3
46747: ARRAY
46748: ST_TO_ADDR
// if InArea ( x , y , area ) then
46749: LD_VAR 0 5
46753: PPUSH
46754: LD_VAR 0 6
46758: PPUSH
46759: LD_VAR 0 2
46763: PPUSH
46764: CALL_OW 309
46768: IFFALSE 46779
// ComStop ( unit ) ;
46770: LD_VAR 0 1
46774: PPUSH
46775: CALL_OW 141
// end ;
46779: LD_VAR 0 4
46783: RET
// export function Abs ( value ) ; begin
46784: LD_INT 0
46786: PPUSH
// result := value ;
46787: LD_ADDR_VAR 0 2
46791: PUSH
46792: LD_VAR 0 1
46796: ST_TO_ADDR
// if value < 0 then
46797: LD_VAR 0 1
46801: PUSH
46802: LD_INT 0
46804: LESS
46805: IFFALSE 46822
// result := value * - 1 ;
46807: LD_ADDR_VAR 0 2
46811: PUSH
46812: LD_VAR 0 1
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: MUL
46821: ST_TO_ADDR
// end ;
46822: LD_VAR 0 2
46826: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46827: LD_INT 0
46829: PPUSH
46830: PPUSH
46831: PPUSH
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
// if not unit or not building then
46837: LD_VAR 0 1
46841: NOT
46842: PUSH
46843: LD_VAR 0 2
46847: NOT
46848: OR
46849: IFFALSE 46853
// exit ;
46851: GO 47079
// x := GetX ( building ) ;
46853: LD_ADDR_VAR 0 4
46857: PUSH
46858: LD_VAR 0 2
46862: PPUSH
46863: CALL_OW 250
46867: ST_TO_ADDR
// y := GetY ( building ) ;
46868: LD_ADDR_VAR 0 6
46872: PUSH
46873: LD_VAR 0 2
46877: PPUSH
46878: CALL_OW 251
46882: ST_TO_ADDR
// d := GetDir ( building ) ;
46883: LD_ADDR_VAR 0 8
46887: PUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: CALL_OW 254
46897: ST_TO_ADDR
// r := 4 ;
46898: LD_ADDR_VAR 0 9
46902: PUSH
46903: LD_INT 4
46905: ST_TO_ADDR
// for i := 1 to 5 do
46906: LD_ADDR_VAR 0 10
46910: PUSH
46911: DOUBLE
46912: LD_INT 1
46914: DEC
46915: ST_TO_ADDR
46916: LD_INT 5
46918: PUSH
46919: FOR_TO
46920: IFFALSE 47077
// begin _x := ShiftX ( x , d , r + i ) ;
46922: LD_ADDR_VAR 0 5
46926: PUSH
46927: LD_VAR 0 4
46931: PPUSH
46932: LD_VAR 0 8
46936: PPUSH
46937: LD_VAR 0 9
46941: PUSH
46942: LD_VAR 0 10
46946: PLUS
46947: PPUSH
46948: CALL_OW 272
46952: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46953: LD_ADDR_VAR 0 7
46957: PUSH
46958: LD_VAR 0 6
46962: PPUSH
46963: LD_VAR 0 8
46967: PPUSH
46968: LD_VAR 0 9
46972: PUSH
46973: LD_VAR 0 10
46977: PLUS
46978: PPUSH
46979: CALL_OW 273
46983: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46984: LD_VAR 0 5
46988: PPUSH
46989: LD_VAR 0 7
46993: PPUSH
46994: CALL_OW 488
46998: PUSH
46999: LD_VAR 0 5
47003: PPUSH
47004: LD_VAR 0 7
47008: PPUSH
47009: CALL_OW 428
47013: PPUSH
47014: CALL_OW 247
47018: PUSH
47019: LD_INT 3
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: IN
47029: NOT
47030: AND
47031: IFFALSE 47075
// begin ComMoveXY ( unit , _x , _y ) ;
47033: LD_VAR 0 1
47037: PPUSH
47038: LD_VAR 0 5
47042: PPUSH
47043: LD_VAR 0 7
47047: PPUSH
47048: CALL_OW 111
// result := [ _x , _y ] ;
47052: LD_ADDR_VAR 0 3
47056: PUSH
47057: LD_VAR 0 5
47061: PUSH
47062: LD_VAR 0 7
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: ST_TO_ADDR
// exit ;
47071: POP
47072: POP
47073: GO 47079
// end ; end ;
47075: GO 46919
47077: POP
47078: POP
// end ;
47079: LD_VAR 0 3
47083: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47084: LD_INT 0
47086: PPUSH
47087: PPUSH
47088: PPUSH
// result := 0 ;
47089: LD_ADDR_VAR 0 3
47093: PUSH
47094: LD_INT 0
47096: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47097: LD_VAR 0 1
47101: PUSH
47102: LD_INT 0
47104: LESS
47105: PUSH
47106: LD_VAR 0 1
47110: PUSH
47111: LD_INT 8
47113: GREATER
47114: OR
47115: PUSH
47116: LD_VAR 0 2
47120: PUSH
47121: LD_INT 0
47123: LESS
47124: OR
47125: PUSH
47126: LD_VAR 0 2
47130: PUSH
47131: LD_INT 8
47133: GREATER
47134: OR
47135: IFFALSE 47139
// exit ;
47137: GO 47214
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47139: LD_ADDR_VAR 0 4
47143: PUSH
47144: LD_INT 22
47146: PUSH
47147: LD_VAR 0 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PPUSH
47156: CALL_OW 69
47160: PUSH
47161: FOR_IN
47162: IFFALSE 47212
// begin un := UnitShoot ( i ) ;
47164: LD_ADDR_VAR 0 5
47168: PUSH
47169: LD_VAR 0 4
47173: PPUSH
47174: CALL_OW 504
47178: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47179: LD_VAR 0 5
47183: PPUSH
47184: CALL_OW 255
47188: PUSH
47189: LD_VAR 0 1
47193: EQUAL
47194: IFFALSE 47210
// begin result := un ;
47196: LD_ADDR_VAR 0 3
47200: PUSH
47201: LD_VAR 0 5
47205: ST_TO_ADDR
// exit ;
47206: POP
47207: POP
47208: GO 47214
// end ; end ;
47210: GO 47161
47212: POP
47213: POP
// end ;
47214: LD_VAR 0 3
47218: RET
// export function GetCargoBay ( units ) ; begin
47219: LD_INT 0
47221: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47222: LD_ADDR_VAR 0 2
47226: PUSH
47227: LD_VAR 0 1
47231: PPUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 34
47237: PUSH
47238: LD_INT 12
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 34
47247: PUSH
47248: LD_INT 51
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 34
47257: PUSH
47258: LD_INT 32
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 34
47267: PUSH
47268: LD_INT 89
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: PPUSH
47282: CALL_OW 72
47286: ST_TO_ADDR
// end ;
47287: LD_VAR 0 2
47291: RET
// export function Negate ( value ) ; begin
47292: LD_INT 0
47294: PPUSH
// result := not value ;
47295: LD_ADDR_VAR 0 2
47299: PUSH
47300: LD_VAR 0 1
47304: NOT
47305: ST_TO_ADDR
// end ;
47306: LD_VAR 0 2
47310: RET
// export function Inc ( value ) ; begin
47311: LD_INT 0
47313: PPUSH
// result := value + 1 ;
47314: LD_ADDR_VAR 0 2
47318: PUSH
47319: LD_VAR 0 1
47323: PUSH
47324: LD_INT 1
47326: PLUS
47327: ST_TO_ADDR
// end ;
47328: LD_VAR 0 2
47332: RET
// export function Dec ( value ) ; begin
47333: LD_INT 0
47335: PPUSH
// result := value - 1 ;
47336: LD_ADDR_VAR 0 2
47340: PUSH
47341: LD_VAR 0 1
47345: PUSH
47346: LD_INT 1
47348: MINUS
47349: ST_TO_ADDR
// end ;
47350: LD_VAR 0 2
47354: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47355: LD_INT 0
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47365: LD_VAR 0 1
47369: PPUSH
47370: LD_VAR 0 2
47374: PPUSH
47375: CALL_OW 488
47379: NOT
47380: PUSH
47381: LD_VAR 0 3
47385: PPUSH
47386: LD_VAR 0 4
47390: PPUSH
47391: CALL_OW 488
47395: NOT
47396: OR
47397: IFFALSE 47410
// begin result := - 1 ;
47399: LD_ADDR_VAR 0 5
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: ST_TO_ADDR
// exit ;
47408: GO 47645
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47410: LD_ADDR_VAR 0 12
47414: PUSH
47415: LD_VAR 0 1
47419: PPUSH
47420: LD_VAR 0 2
47424: PPUSH
47425: LD_VAR 0 3
47429: PPUSH
47430: LD_VAR 0 4
47434: PPUSH
47435: CALL 46495 0 4
47439: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47440: LD_ADDR_VAR 0 11
47444: PUSH
47445: LD_VAR 0 1
47449: PPUSH
47450: LD_VAR 0 2
47454: PPUSH
47455: LD_VAR 0 12
47459: PUSH
47460: LD_INT 1
47462: ARRAY
47463: PPUSH
47464: LD_VAR 0 12
47468: PUSH
47469: LD_INT 2
47471: ARRAY
47472: PPUSH
47473: CALL_OW 298
47477: ST_TO_ADDR
// distance := 9999 ;
47478: LD_ADDR_VAR 0 10
47482: PUSH
47483: LD_INT 9999
47485: ST_TO_ADDR
// for i := 0 to 5 do
47486: LD_ADDR_VAR 0 6
47490: PUSH
47491: DOUBLE
47492: LD_INT 0
47494: DEC
47495: ST_TO_ADDR
47496: LD_INT 5
47498: PUSH
47499: FOR_TO
47500: IFFALSE 47643
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47502: LD_ADDR_VAR 0 7
47506: PUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: LD_VAR 0 6
47516: PPUSH
47517: LD_VAR 0 11
47521: PPUSH
47522: CALL_OW 272
47526: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47527: LD_ADDR_VAR 0 8
47531: PUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: LD_VAR 0 6
47541: PPUSH
47542: LD_VAR 0 11
47546: PPUSH
47547: CALL_OW 273
47551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47552: LD_VAR 0 7
47556: PPUSH
47557: LD_VAR 0 8
47561: PPUSH
47562: CALL_OW 488
47566: NOT
47567: IFFALSE 47571
// continue ;
47569: GO 47499
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47571: LD_ADDR_VAR 0 9
47575: PUSH
47576: LD_VAR 0 12
47580: PUSH
47581: LD_INT 1
47583: ARRAY
47584: PPUSH
47585: LD_VAR 0 12
47589: PUSH
47590: LD_INT 2
47592: ARRAY
47593: PPUSH
47594: LD_VAR 0 7
47598: PPUSH
47599: LD_VAR 0 8
47603: PPUSH
47604: CALL_OW 298
47608: ST_TO_ADDR
// if tmp < distance then
47609: LD_VAR 0 9
47613: PUSH
47614: LD_VAR 0 10
47618: LESS
47619: IFFALSE 47641
// begin result := i ;
47621: LD_ADDR_VAR 0 5
47625: PUSH
47626: LD_VAR 0 6
47630: ST_TO_ADDR
// distance := tmp ;
47631: LD_ADDR_VAR 0 10
47635: PUSH
47636: LD_VAR 0 9
47640: ST_TO_ADDR
// end ; end ;
47641: GO 47499
47643: POP
47644: POP
// end ;
47645: LD_VAR 0 5
47649: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47650: LD_INT 0
47652: PPUSH
47653: PPUSH
// if not driver or not IsInUnit ( driver ) then
47654: LD_VAR 0 1
47658: NOT
47659: PUSH
47660: LD_VAR 0 1
47664: PPUSH
47665: CALL_OW 310
47669: NOT
47670: OR
47671: IFFALSE 47675
// exit ;
47673: GO 47765
// vehicle := IsInUnit ( driver ) ;
47675: LD_ADDR_VAR 0 3
47679: PUSH
47680: LD_VAR 0 1
47684: PPUSH
47685: CALL_OW 310
47689: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47690: LD_VAR 0 1
47694: PPUSH
47695: LD_STRING \
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: PUSH
47725: LD_STRING E
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: LD_VAR 0 3
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PPUSH
47761: CALL_OW 446
// end ;
47765: LD_VAR 0 2
47769: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47770: LD_INT 0
47772: PPUSH
47773: PPUSH
// if not driver or not IsInUnit ( driver ) then
47774: LD_VAR 0 1
47778: NOT
47779: PUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: CALL_OW 310
47789: NOT
47790: OR
47791: IFFALSE 47795
// exit ;
47793: GO 47885
// vehicle := IsInUnit ( driver ) ;
47795: LD_ADDR_VAR 0 3
47799: PUSH
47800: LD_VAR 0 1
47804: PPUSH
47805: CALL_OW 310
47809: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47810: LD_VAR 0 1
47814: PPUSH
47815: LD_STRING \
47817: PUSH
47818: LD_INT 0
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: PUSH
47845: LD_STRING E
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_VAR 0 3
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PPUSH
47881: CALL_OW 447
// end ;
47885: LD_VAR 0 2
47889: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47890: LD_INT 0
47892: PPUSH
47893: PPUSH
47894: PPUSH
// tmp := [ ] ;
47895: LD_ADDR_VAR 0 5
47899: PUSH
47900: EMPTY
47901: ST_TO_ADDR
// for i in units do
47902: LD_ADDR_VAR 0 4
47906: PUSH
47907: LD_VAR 0 1
47911: PUSH
47912: FOR_IN
47913: IFFALSE 47951
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47915: LD_ADDR_VAR 0 5
47919: PUSH
47920: LD_VAR 0 5
47924: PPUSH
47925: LD_VAR 0 5
47929: PUSH
47930: LD_INT 1
47932: PLUS
47933: PPUSH
47934: LD_VAR 0 4
47938: PPUSH
47939: CALL_OW 256
47943: PPUSH
47944: CALL_OW 2
47948: ST_TO_ADDR
47949: GO 47912
47951: POP
47952: POP
// if not tmp then
47953: LD_VAR 0 5
47957: NOT
47958: IFFALSE 47962
// exit ;
47960: GO 48010
// if asc then
47962: LD_VAR 0 2
47966: IFFALSE 47990
// result := SortListByListAsc ( units , tmp ) else
47968: LD_ADDR_VAR 0 3
47972: PUSH
47973: LD_VAR 0 1
47977: PPUSH
47978: LD_VAR 0 5
47982: PPUSH
47983: CALL_OW 76
47987: ST_TO_ADDR
47988: GO 48010
// result := SortListByListDesc ( units , tmp ) ;
47990: LD_ADDR_VAR 0 3
47994: PUSH
47995: LD_VAR 0 1
47999: PPUSH
48000: LD_VAR 0 5
48004: PPUSH
48005: CALL_OW 77
48009: ST_TO_ADDR
// end ;
48010: LD_VAR 0 3
48014: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48015: LD_INT 0
48017: PPUSH
48018: PPUSH
// task := GetTaskList ( mech ) ;
48019: LD_ADDR_VAR 0 4
48023: PUSH
48024: LD_VAR 0 1
48028: PPUSH
48029: CALL_OW 437
48033: ST_TO_ADDR
// if not task then
48034: LD_VAR 0 4
48038: NOT
48039: IFFALSE 48043
// exit ;
48041: GO 48085
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48043: LD_ADDR_VAR 0 3
48047: PUSH
48048: LD_VAR 0 4
48052: PUSH
48053: LD_INT 1
48055: ARRAY
48056: PUSH
48057: LD_INT 1
48059: ARRAY
48060: PUSH
48061: LD_STRING r
48063: EQUAL
48064: PUSH
48065: LD_VAR 0 4
48069: PUSH
48070: LD_INT 1
48072: ARRAY
48073: PUSH
48074: LD_INT 4
48076: ARRAY
48077: PUSH
48078: LD_VAR 0 2
48082: EQUAL
48083: AND
48084: ST_TO_ADDR
// end ;
48085: LD_VAR 0 3
48089: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48090: LD_INT 0
48092: PPUSH
// SetDir ( unit , d ) ;
48093: LD_VAR 0 1
48097: PPUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48107: LD_VAR 0 1
48111: PPUSH
48112: LD_VAR 0 2
48116: PPUSH
48117: LD_VAR 0 3
48121: PPUSH
48122: LD_VAR 0 5
48126: PPUSH
48127: CALL_OW 48
// end ;
48131: LD_VAR 0 6
48135: RET
// export function ToNaturalNumber ( number ) ; begin
48136: LD_INT 0
48138: PPUSH
// result := number div 1 ;
48139: LD_ADDR_VAR 0 2
48143: PUSH
48144: LD_VAR 0 1
48148: PUSH
48149: LD_INT 1
48151: DIV
48152: ST_TO_ADDR
// if number < 0 then
48153: LD_VAR 0 1
48157: PUSH
48158: LD_INT 0
48160: LESS
48161: IFFALSE 48171
// result := 0 ;
48163: LD_ADDR_VAR 0 2
48167: PUSH
48168: LD_INT 0
48170: ST_TO_ADDR
// end ;
48171: LD_VAR 0 2
48175: RET
// export function SortByClass ( units , class ) ; var un ; begin
48176: LD_INT 0
48178: PPUSH
48179: PPUSH
// if not units or not class then
48180: LD_VAR 0 1
48184: NOT
48185: PUSH
48186: LD_VAR 0 2
48190: NOT
48191: OR
48192: IFFALSE 48196
// exit ;
48194: GO 48291
// result := [ ] ;
48196: LD_ADDR_VAR 0 3
48200: PUSH
48201: EMPTY
48202: ST_TO_ADDR
// for un in units do
48203: LD_ADDR_VAR 0 4
48207: PUSH
48208: LD_VAR 0 1
48212: PUSH
48213: FOR_IN
48214: IFFALSE 48289
// if GetClass ( un ) = class then
48216: LD_VAR 0 4
48220: PPUSH
48221: CALL_OW 257
48225: PUSH
48226: LD_VAR 0 2
48230: EQUAL
48231: IFFALSE 48258
// result := Insert ( result , 1 , un ) else
48233: LD_ADDR_VAR 0 3
48237: PUSH
48238: LD_VAR 0 3
48242: PPUSH
48243: LD_INT 1
48245: PPUSH
48246: LD_VAR 0 4
48250: PPUSH
48251: CALL_OW 2
48255: ST_TO_ADDR
48256: GO 48287
// result := Replace ( result , result + 1 , un ) ;
48258: LD_ADDR_VAR 0 3
48262: PUSH
48263: LD_VAR 0 3
48267: PPUSH
48268: LD_VAR 0 3
48272: PUSH
48273: LD_INT 1
48275: PLUS
48276: PPUSH
48277: LD_VAR 0 4
48281: PPUSH
48282: CALL_OW 1
48286: ST_TO_ADDR
48287: GO 48213
48289: POP
48290: POP
// end ;
48291: LD_VAR 0 3
48295: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48296: LD_INT 0
48298: PPUSH
48299: PPUSH
48300: PPUSH
48301: PPUSH
48302: PPUSH
48303: PPUSH
48304: PPUSH
// result := [ ] ;
48305: LD_ADDR_VAR 0 4
48309: PUSH
48310: EMPTY
48311: ST_TO_ADDR
// if x - r < 0 then
48312: LD_VAR 0 1
48316: PUSH
48317: LD_VAR 0 3
48321: MINUS
48322: PUSH
48323: LD_INT 0
48325: LESS
48326: IFFALSE 48338
// min_x := 0 else
48328: LD_ADDR_VAR 0 8
48332: PUSH
48333: LD_INT 0
48335: ST_TO_ADDR
48336: GO 48354
// min_x := x - r ;
48338: LD_ADDR_VAR 0 8
48342: PUSH
48343: LD_VAR 0 1
48347: PUSH
48348: LD_VAR 0 3
48352: MINUS
48353: ST_TO_ADDR
// if y - r < 0 then
48354: LD_VAR 0 2
48358: PUSH
48359: LD_VAR 0 3
48363: MINUS
48364: PUSH
48365: LD_INT 0
48367: LESS
48368: IFFALSE 48380
// min_y := 0 else
48370: LD_ADDR_VAR 0 7
48374: PUSH
48375: LD_INT 0
48377: ST_TO_ADDR
48378: GO 48396
// min_y := y - r ;
48380: LD_ADDR_VAR 0 7
48384: PUSH
48385: LD_VAR 0 2
48389: PUSH
48390: LD_VAR 0 3
48394: MINUS
48395: ST_TO_ADDR
// max_x := x + r ;
48396: LD_ADDR_VAR 0 9
48400: PUSH
48401: LD_VAR 0 1
48405: PUSH
48406: LD_VAR 0 3
48410: PLUS
48411: ST_TO_ADDR
// max_y := y + r ;
48412: LD_ADDR_VAR 0 10
48416: PUSH
48417: LD_VAR 0 2
48421: PUSH
48422: LD_VAR 0 3
48426: PLUS
48427: ST_TO_ADDR
// for _x = min_x to max_x do
48428: LD_ADDR_VAR 0 5
48432: PUSH
48433: DOUBLE
48434: LD_VAR 0 8
48438: DEC
48439: ST_TO_ADDR
48440: LD_VAR 0 9
48444: PUSH
48445: FOR_TO
48446: IFFALSE 48547
// for _y = min_y to max_y do
48448: LD_ADDR_VAR 0 6
48452: PUSH
48453: DOUBLE
48454: LD_VAR 0 7
48458: DEC
48459: ST_TO_ADDR
48460: LD_VAR 0 10
48464: PUSH
48465: FOR_TO
48466: IFFALSE 48543
// begin if not ValidHex ( _x , _y ) then
48468: LD_VAR 0 5
48472: PPUSH
48473: LD_VAR 0 6
48477: PPUSH
48478: CALL_OW 488
48482: NOT
48483: IFFALSE 48487
// continue ;
48485: GO 48465
// if GetResourceTypeXY ( _x , _y ) then
48487: LD_VAR 0 5
48491: PPUSH
48492: LD_VAR 0 6
48496: PPUSH
48497: CALL_OW 283
48501: IFFALSE 48541
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48503: LD_ADDR_VAR 0 4
48507: PUSH
48508: LD_VAR 0 4
48512: PPUSH
48513: LD_VAR 0 4
48517: PUSH
48518: LD_INT 1
48520: PLUS
48521: PPUSH
48522: LD_VAR 0 5
48526: PUSH
48527: LD_VAR 0 6
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PPUSH
48536: CALL_OW 1
48540: ST_TO_ADDR
// end ;
48541: GO 48465
48543: POP
48544: POP
48545: GO 48445
48547: POP
48548: POP
// end ;
48549: LD_VAR 0 4
48553: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48554: LD_INT 0
48556: PPUSH
48557: PPUSH
48558: PPUSH
48559: PPUSH
48560: PPUSH
48561: PPUSH
48562: PPUSH
48563: PPUSH
// if not units then
48564: LD_VAR 0 1
48568: NOT
48569: IFFALSE 48573
// exit ;
48571: GO 49097
// result := UnitFilter ( units , [ f_ok ] ) ;
48573: LD_ADDR_VAR 0 3
48577: PUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: LD_INT 50
48585: PUSH
48586: EMPTY
48587: LIST
48588: PPUSH
48589: CALL_OW 72
48593: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48594: LD_ADDR_VAR 0 8
48598: PUSH
48599: LD_VAR 0 1
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: PPUSH
48608: CALL_OW 255
48612: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48613: LD_ADDR_VAR 0 10
48617: PUSH
48618: LD_INT 29
48620: PUSH
48621: LD_INT 91
48623: PUSH
48624: LD_INT 49
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: ST_TO_ADDR
// if not result then
48632: LD_VAR 0 3
48636: NOT
48637: IFFALSE 48641
// exit ;
48639: GO 49097
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48641: LD_ADDR_VAR 0 5
48645: PUSH
48646: LD_INT 81
48648: PUSH
48649: LD_VAR 0 8
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PPUSH
48658: CALL_OW 69
48662: ST_TO_ADDR
// for i in result do
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: LD_VAR 0 3
48672: PUSH
48673: FOR_IN
48674: IFFALSE 49095
// begin tag := GetTag ( i ) + 1 ;
48676: LD_ADDR_VAR 0 9
48680: PUSH
48681: LD_VAR 0 4
48685: PPUSH
48686: CALL_OW 110
48690: PUSH
48691: LD_INT 1
48693: PLUS
48694: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48695: LD_ADDR_VAR 0 7
48699: PUSH
48700: LD_VAR 0 4
48704: PPUSH
48705: CALL_OW 250
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: CALL_OW 251
48719: PPUSH
48720: LD_INT 6
48722: PPUSH
48723: CALL 48296 0 3
48727: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48728: LD_VAR 0 4
48732: PPUSH
48733: CALL_OW 247
48737: PUSH
48738: LD_INT 2
48740: EQUAL
48741: PUSH
48742: LD_VAR 0 7
48746: AND
48747: PUSH
48748: LD_VAR 0 4
48752: PPUSH
48753: CALL_OW 264
48757: PUSH
48758: LD_VAR 0 10
48762: IN
48763: NOT
48764: AND
48765: IFFALSE 48804
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48767: LD_VAR 0 4
48771: PPUSH
48772: LD_VAR 0 7
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PUSH
48781: LD_INT 1
48783: ARRAY
48784: PPUSH
48785: LD_VAR 0 7
48789: PUSH
48790: LD_INT 1
48792: ARRAY
48793: PUSH
48794: LD_INT 2
48796: ARRAY
48797: PPUSH
48798: CALL_OW 116
48802: GO 49093
// if path > tag then
48804: LD_VAR 0 2
48808: PUSH
48809: LD_VAR 0 9
48813: GREATER
48814: IFFALSE 49022
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
48816: LD_ADDR_VAR 0 6
48820: PUSH
48821: LD_VAR 0 5
48825: PPUSH
48826: LD_INT 91
48828: PUSH
48829: LD_VAR 0 4
48833: PUSH
48834: LD_INT 8
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: PPUSH
48842: CALL_OW 72
48846: ST_TO_ADDR
// if nearEnemy then
48847: LD_VAR 0 6
48851: IFFALSE 48920
// begin if GetWeapon ( i ) = ru_time_lapser then
48853: LD_VAR 0 4
48857: PPUSH
48858: CALL_OW 264
48862: PUSH
48863: LD_INT 49
48865: EQUAL
48866: IFFALSE 48894
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48868: LD_VAR 0 4
48872: PPUSH
48873: LD_VAR 0 6
48877: PPUSH
48878: LD_VAR 0 4
48882: PPUSH
48883: CALL_OW 74
48887: PPUSH
48888: CALL_OW 112
48892: GO 48918
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48894: LD_VAR 0 4
48898: PPUSH
48899: LD_VAR 0 6
48903: PPUSH
48904: LD_VAR 0 4
48908: PPUSH
48909: CALL_OW 74
48913: PPUSH
48914: CALL 50022 0 2
// end else
48918: GO 49020
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48920: LD_VAR 0 4
48924: PPUSH
48925: LD_VAR 0 2
48929: PUSH
48930: LD_VAR 0 9
48934: ARRAY
48935: PUSH
48936: LD_INT 1
48938: ARRAY
48939: PPUSH
48940: LD_VAR 0 2
48944: PUSH
48945: LD_VAR 0 9
48949: ARRAY
48950: PUSH
48951: LD_INT 2
48953: ARRAY
48954: PPUSH
48955: CALL_OW 297
48959: PUSH
48960: LD_INT 6
48962: GREATER
48963: IFFALSE 49006
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48965: LD_VAR 0 4
48969: PPUSH
48970: LD_VAR 0 2
48974: PUSH
48975: LD_VAR 0 9
48979: ARRAY
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: PPUSH
48985: LD_VAR 0 2
48989: PUSH
48990: LD_VAR 0 9
48994: ARRAY
48995: PUSH
48996: LD_INT 2
48998: ARRAY
48999: PPUSH
49000: CALL_OW 114
49004: GO 49020
// SetTag ( i , tag ) ;
49006: LD_VAR 0 4
49010: PPUSH
49011: LD_VAR 0 9
49015: PPUSH
49016: CALL_OW 109
// end else
49020: GO 49093
// if enemy then
49022: LD_VAR 0 5
49026: IFFALSE 49093
// begin if GetWeapon ( i ) = ru_time_lapser then
49028: LD_VAR 0 4
49032: PPUSH
49033: CALL_OW 264
49037: PUSH
49038: LD_INT 49
49040: EQUAL
49041: IFFALSE 49069
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49043: LD_VAR 0 4
49047: PPUSH
49048: LD_VAR 0 5
49052: PPUSH
49053: LD_VAR 0 4
49057: PPUSH
49058: CALL_OW 74
49062: PPUSH
49063: CALL_OW 112
49067: GO 49093
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49069: LD_VAR 0 4
49073: PPUSH
49074: LD_VAR 0 5
49078: PPUSH
49079: LD_VAR 0 4
49083: PPUSH
49084: CALL_OW 74
49088: PPUSH
49089: CALL 50022 0 2
// end ; end ;
49093: GO 48673
49095: POP
49096: POP
// end ;
49097: LD_VAR 0 3
49101: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49102: LD_INT 0
49104: PPUSH
49105: PPUSH
49106: PPUSH
// if not unit or IsInUnit ( unit ) then
49107: LD_VAR 0 1
49111: NOT
49112: PUSH
49113: LD_VAR 0 1
49117: PPUSH
49118: CALL_OW 310
49122: OR
49123: IFFALSE 49127
// exit ;
49125: GO 49218
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49127: LD_ADDR_VAR 0 4
49131: PUSH
49132: LD_VAR 0 1
49136: PPUSH
49137: CALL_OW 250
49141: PPUSH
49142: LD_VAR 0 2
49146: PPUSH
49147: LD_INT 1
49149: PPUSH
49150: CALL_OW 272
49154: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49155: LD_ADDR_VAR 0 5
49159: PUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: CALL_OW 251
49169: PPUSH
49170: LD_VAR 0 2
49174: PPUSH
49175: LD_INT 1
49177: PPUSH
49178: CALL_OW 273
49182: ST_TO_ADDR
// if ValidHex ( x , y ) then
49183: LD_VAR 0 4
49187: PPUSH
49188: LD_VAR 0 5
49192: PPUSH
49193: CALL_OW 488
49197: IFFALSE 49218
// ComTurnXY ( unit , x , y ) ;
49199: LD_VAR 0 1
49203: PPUSH
49204: LD_VAR 0 4
49208: PPUSH
49209: LD_VAR 0 5
49213: PPUSH
49214: CALL_OW 118
// end ;
49218: LD_VAR 0 3
49222: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49223: LD_INT 0
49225: PPUSH
49226: PPUSH
// result := false ;
49227: LD_ADDR_VAR 0 3
49231: PUSH
49232: LD_INT 0
49234: ST_TO_ADDR
// if not units then
49235: LD_VAR 0 2
49239: NOT
49240: IFFALSE 49244
// exit ;
49242: GO 49289
// for i in units do
49244: LD_ADDR_VAR 0 4
49248: PUSH
49249: LD_VAR 0 2
49253: PUSH
49254: FOR_IN
49255: IFFALSE 49287
// if See ( side , i ) then
49257: LD_VAR 0 1
49261: PPUSH
49262: LD_VAR 0 4
49266: PPUSH
49267: CALL_OW 292
49271: IFFALSE 49285
// begin result := true ;
49273: LD_ADDR_VAR 0 3
49277: PUSH
49278: LD_INT 1
49280: ST_TO_ADDR
// exit ;
49281: POP
49282: POP
49283: GO 49289
// end ;
49285: GO 49254
49287: POP
49288: POP
// end ;
49289: LD_VAR 0 3
49293: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49294: LD_INT 0
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
// if not unit or not points then
49300: LD_VAR 0 1
49304: NOT
49305: PUSH
49306: LD_VAR 0 2
49310: NOT
49311: OR
49312: IFFALSE 49316
// exit ;
49314: GO 49406
// dist := 99999 ;
49316: LD_ADDR_VAR 0 5
49320: PUSH
49321: LD_INT 99999
49323: ST_TO_ADDR
// for i in points do
49324: LD_ADDR_VAR 0 4
49328: PUSH
49329: LD_VAR 0 2
49333: PUSH
49334: FOR_IN
49335: IFFALSE 49404
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49337: LD_ADDR_VAR 0 6
49341: PUSH
49342: LD_VAR 0 1
49346: PPUSH
49347: LD_VAR 0 4
49351: PUSH
49352: LD_INT 1
49354: ARRAY
49355: PPUSH
49356: LD_VAR 0 4
49360: PUSH
49361: LD_INT 2
49363: ARRAY
49364: PPUSH
49365: CALL_OW 297
49369: ST_TO_ADDR
// if tmpDist < dist then
49370: LD_VAR 0 6
49374: PUSH
49375: LD_VAR 0 5
49379: LESS
49380: IFFALSE 49402
// begin result := i ;
49382: LD_ADDR_VAR 0 3
49386: PUSH
49387: LD_VAR 0 4
49391: ST_TO_ADDR
// dist := tmpDist ;
49392: LD_ADDR_VAR 0 5
49396: PUSH
49397: LD_VAR 0 6
49401: ST_TO_ADDR
// end ; end ;
49402: GO 49334
49404: POP
49405: POP
// end ;
49406: LD_VAR 0 3
49410: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49411: LD_INT 0
49413: PPUSH
// uc_side := side ;
49414: LD_ADDR_OWVAR 20
49418: PUSH
49419: LD_VAR 0 1
49423: ST_TO_ADDR
// uc_nation := 3 ;
49424: LD_ADDR_OWVAR 21
49428: PUSH
49429: LD_INT 3
49431: ST_TO_ADDR
// vc_chassis := 25 ;
49432: LD_ADDR_OWVAR 37
49436: PUSH
49437: LD_INT 25
49439: ST_TO_ADDR
// vc_engine := engine_siberite ;
49440: LD_ADDR_OWVAR 39
49444: PUSH
49445: LD_INT 3
49447: ST_TO_ADDR
// vc_control := control_computer ;
49448: LD_ADDR_OWVAR 38
49452: PUSH
49453: LD_INT 3
49455: ST_TO_ADDR
// vc_weapon := 59 ;
49456: LD_ADDR_OWVAR 40
49460: PUSH
49461: LD_INT 59
49463: ST_TO_ADDR
// result := CreateVehicle ;
49464: LD_ADDR_VAR 0 5
49468: PUSH
49469: CALL_OW 45
49473: ST_TO_ADDR
// SetDir ( result , d ) ;
49474: LD_VAR 0 5
49478: PPUSH
49479: LD_VAR 0 4
49483: PPUSH
49484: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49488: LD_VAR 0 5
49492: PPUSH
49493: LD_VAR 0 2
49497: PPUSH
49498: LD_VAR 0 3
49502: PPUSH
49503: LD_INT 0
49505: PPUSH
49506: CALL_OW 48
// end ;
49510: LD_VAR 0 5
49514: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49515: LD_INT 0
49517: PPUSH
49518: PPUSH
49519: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49520: LD_ADDR_VAR 0 2
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49543: LD_VAR 0 1
49547: NOT
49548: PUSH
49549: LD_VAR 0 1
49553: PPUSH
49554: CALL_OW 264
49558: PUSH
49559: LD_INT 12
49561: PUSH
49562: LD_INT 51
49564: PUSH
49565: LD_INT 32
49567: PUSH
49568: LD_INT 89
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: IN
49577: NOT
49578: OR
49579: IFFALSE 49583
// exit ;
49581: GO 49681
// for i := 1 to 3 do
49583: LD_ADDR_VAR 0 3
49587: PUSH
49588: DOUBLE
49589: LD_INT 1
49591: DEC
49592: ST_TO_ADDR
49593: LD_INT 3
49595: PUSH
49596: FOR_TO
49597: IFFALSE 49679
// begin tmp := GetCargo ( cargo , i ) ;
49599: LD_ADDR_VAR 0 4
49603: PUSH
49604: LD_VAR 0 1
49608: PPUSH
49609: LD_VAR 0 3
49613: PPUSH
49614: CALL_OW 289
49618: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49619: LD_ADDR_VAR 0 2
49623: PUSH
49624: LD_VAR 0 2
49628: PPUSH
49629: LD_VAR 0 3
49633: PPUSH
49634: LD_VAR 0 4
49638: PPUSH
49639: CALL_OW 1
49643: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
49644: LD_ADDR_VAR 0 2
49648: PUSH
49649: LD_VAR 0 2
49653: PPUSH
49654: LD_INT 4
49656: PPUSH
49657: LD_VAR 0 2
49661: PUSH
49662: LD_INT 4
49664: ARRAY
49665: PUSH
49666: LD_VAR 0 4
49670: PLUS
49671: PPUSH
49672: CALL_OW 1
49676: ST_TO_ADDR
// end ;
49677: GO 49596
49679: POP
49680: POP
// end ;
49681: LD_VAR 0 2
49685: RET
// export function Length ( array ) ; begin
49686: LD_INT 0
49688: PPUSH
// result := array + 0 ;
49689: LD_ADDR_VAR 0 2
49693: PUSH
49694: LD_VAR 0 1
49698: PUSH
49699: LD_INT 0
49701: PLUS
49702: ST_TO_ADDR
// end ;
49703: LD_VAR 0 2
49707: RET
// export function PrepareArray ( array ) ; begin
49708: LD_INT 0
49710: PPUSH
// result := array diff 0 ;
49711: LD_ADDR_VAR 0 2
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_INT 0
49723: DIFF
49724: ST_TO_ADDR
// if not result [ 1 ] then
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: NOT
49734: IFFALSE 49754
// result := Delete ( result , 1 ) ;
49736: LD_ADDR_VAR 0 2
49740: PUSH
49741: LD_VAR 0 2
49745: PPUSH
49746: LD_INT 1
49748: PPUSH
49749: CALL_OW 3
49753: ST_TO_ADDR
// end ;
49754: LD_VAR 0 2
49758: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
49759: LD_INT 0
49761: PPUSH
49762: PPUSH
49763: PPUSH
49764: PPUSH
// sibRocketRange := 25 ;
49765: LD_ADDR_VAR 0 6
49769: PUSH
49770: LD_INT 25
49772: ST_TO_ADDR
// result := false ;
49773: LD_ADDR_VAR 0 4
49777: PUSH
49778: LD_INT 0
49780: ST_TO_ADDR
// for i := 0 to 5 do
49781: LD_ADDR_VAR 0 5
49785: PUSH
49786: DOUBLE
49787: LD_INT 0
49789: DEC
49790: ST_TO_ADDR
49791: LD_INT 5
49793: PUSH
49794: FOR_TO
49795: IFFALSE 49862
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
49797: LD_VAR 0 1
49801: PPUSH
49802: LD_VAR 0 5
49806: PPUSH
49807: LD_VAR 0 6
49811: PPUSH
49812: CALL_OW 272
49816: PPUSH
49817: LD_VAR 0 2
49821: PPUSH
49822: LD_VAR 0 5
49826: PPUSH
49827: LD_VAR 0 6
49831: PPUSH
49832: CALL_OW 273
49836: PPUSH
49837: LD_VAR 0 3
49841: PPUSH
49842: CALL_OW 309
49846: IFFALSE 49860
// begin result := true ;
49848: LD_ADDR_VAR 0 4
49852: PUSH
49853: LD_INT 1
49855: ST_TO_ADDR
// exit ;
49856: POP
49857: POP
49858: GO 49864
// end ;
49860: GO 49794
49862: POP
49863: POP
// end ;
49864: LD_VAR 0 4
49868: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
49869: LD_INT 0
49871: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
49872: LD_VAR 0 1
49876: PPUSH
49877: LD_VAR 0 2
49881: PPUSH
49882: LD_INT 0
49884: PPUSH
49885: LD_INT 0
49887: PPUSH
49888: LD_INT 1
49890: PPUSH
49891: LD_INT 0
49893: PPUSH
49894: CALL_OW 587
// end ;
49898: LD_VAR 0 3
49902: RET
// export function CenterOnNow ( unit ) ; begin
49903: LD_INT 0
49905: PPUSH
// result := IsInUnit ( unit ) ;
49906: LD_ADDR_VAR 0 2
49910: PUSH
49911: LD_VAR 0 1
49915: PPUSH
49916: CALL_OW 310
49920: ST_TO_ADDR
// if not result then
49921: LD_VAR 0 2
49925: NOT
49926: IFFALSE 49938
// result := unit ;
49928: LD_ADDR_VAR 0 2
49932: PUSH
49933: LD_VAR 0 1
49937: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
49938: LD_VAR 0 1
49942: PPUSH
49943: CALL_OW 87
// end ;
49947: LD_VAR 0 2
49951: RET
// export function ComMoveHex ( unit , hex ) ; begin
49952: LD_INT 0
49954: PPUSH
// if not hex then
49955: LD_VAR 0 2
49959: NOT
49960: IFFALSE 49964
// exit ;
49962: GO 50017
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
49964: LD_VAR 0 2
49968: PUSH
49969: LD_INT 1
49971: ARRAY
49972: PPUSH
49973: LD_VAR 0 2
49977: PUSH
49978: LD_INT 2
49980: ARRAY
49981: PPUSH
49982: CALL_OW 428
49986: IFFALSE 49990
// exit ;
49988: GO 50017
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
49990: LD_VAR 0 1
49994: PPUSH
49995: LD_VAR 0 2
49999: PUSH
50000: LD_INT 1
50002: ARRAY
50003: PPUSH
50004: LD_VAR 0 2
50008: PUSH
50009: LD_INT 2
50011: ARRAY
50012: PPUSH
50013: CALL_OW 111
// end ;
50017: LD_VAR 0 3
50021: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50022: LD_INT 0
50024: PPUSH
50025: PPUSH
50026: PPUSH
// if not unit or not enemy then
50027: LD_VAR 0 1
50031: NOT
50032: PUSH
50033: LD_VAR 0 2
50037: NOT
50038: OR
50039: IFFALSE 50043
// exit ;
50041: GO 50167
// x := GetX ( enemy ) ;
50043: LD_ADDR_VAR 0 4
50047: PUSH
50048: LD_VAR 0 2
50052: PPUSH
50053: CALL_OW 250
50057: ST_TO_ADDR
// y := GetY ( enemy ) ;
50058: LD_ADDR_VAR 0 5
50062: PUSH
50063: LD_VAR 0 2
50067: PPUSH
50068: CALL_OW 251
50072: ST_TO_ADDR
// if ValidHex ( x , y ) then
50073: LD_VAR 0 4
50077: PPUSH
50078: LD_VAR 0 5
50082: PPUSH
50083: CALL_OW 488
50087: IFFALSE 50167
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
50089: LD_VAR 0 2
50093: PPUSH
50094: CALL_OW 247
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: IN
50109: PUSH
50110: LD_VAR 0 1
50114: PPUSH
50115: CALL_OW 255
50119: PPUSH
50120: LD_VAR 0 2
50124: PPUSH
50125: CALL_OW 292
50129: AND
50130: IFFALSE 50148
// ComAttackUnit ( unit , enemy ) else
50132: LD_VAR 0 1
50136: PPUSH
50137: LD_VAR 0 2
50141: PPUSH
50142: CALL_OW 115
50146: GO 50167
// ComAgressiveMove ( unit , x , y ) ;
50148: LD_VAR 0 1
50152: PPUSH
50153: LD_VAR 0 4
50157: PPUSH
50158: LD_VAR 0 5
50162: PPUSH
50163: CALL_OW 114
// end ; end_of_file
50167: LD_VAR 0 3
50171: RET
// export globalGameSaveCounter ; every 0 0$1 do
50172: GO 50174
50174: DISABLE
// begin enable ;
50175: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50176: LD_STRING updateTimer(
50178: PUSH
50179: LD_OWVAR 1
50183: STR
50184: PUSH
50185: LD_STRING );
50187: STR
50188: PPUSH
50189: CALL_OW 559
// end ;
50193: END
// every 0 0$1 do
50194: GO 50196
50196: DISABLE
// begin globalGameSaveCounter := 0 ;
50197: LD_ADDR_EXP 28
50201: PUSH
50202: LD_INT 0
50204: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50205: LD_STRING setGameSaveCounter(0)
50207: PPUSH
50208: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50212: LD_STRING initStreamRollete();
50214: PPUSH
50215: CALL_OW 559
// InitStreamMode ;
50219: CALL 51545 0 0
// DefineStreamItems ( false ) ;
50223: LD_INT 0
50225: PPUSH
50226: CALL 52009 0 1
// end ;
50230: END
// export function SOS_MapStart ( ) ; begin
50231: LD_INT 0
50233: PPUSH
// if streamModeActive then
50234: LD_EXP 29
50238: IFFALSE 50247
// DefineStreamItems ( true ) ;
50240: LD_INT 1
50242: PPUSH
50243: CALL 52009 0 1
// UpdateLuaVariables ( ) ;
50247: CALL 50264 0 0
// UpdateFactoryWaypoints ( ) ;
50251: CALL 64878 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50255: CALL 65135 0 0
// end ;
50259: LD_VAR 0 1
50263: RET
// function UpdateLuaVariables ( ) ; begin
50264: LD_INT 0
50266: PPUSH
// if globalGameSaveCounter then
50267: LD_EXP 28
50271: IFFALSE 50305
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50273: LD_ADDR_EXP 28
50277: PUSH
50278: LD_EXP 28
50282: PPUSH
50283: CALL 47311 0 1
50287: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50288: LD_STRING setGameSaveCounter(
50290: PUSH
50291: LD_EXP 28
50295: STR
50296: PUSH
50297: LD_STRING )
50299: STR
50300: PPUSH
50301: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50305: LD_STRING setGameDifficulty(
50307: PUSH
50308: LD_OWVAR 67
50312: STR
50313: PUSH
50314: LD_STRING )
50316: STR
50317: PPUSH
50318: CALL_OW 559
// end ;
50322: LD_VAR 0 1
50326: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50327: LD_INT 0
50329: PPUSH
// if p2 = stream_mode then
50330: LD_VAR 0 2
50334: PUSH
50335: LD_INT 100
50337: EQUAL
50338: IFFALSE 51341
// begin if not StreamModeActive then
50340: LD_EXP 29
50344: NOT
50345: IFFALSE 50355
// StreamModeActive := true ;
50347: LD_ADDR_EXP 29
50351: PUSH
50352: LD_INT 1
50354: ST_TO_ADDR
// if p3 = 0 then
50355: LD_VAR 0 3
50359: PUSH
50360: LD_INT 0
50362: EQUAL
50363: IFFALSE 50369
// InitStreamMode ;
50365: CALL 51545 0 0
// if p3 = 1 then
50369: LD_VAR 0 3
50373: PUSH
50374: LD_INT 1
50376: EQUAL
50377: IFFALSE 50387
// sRocket := true ;
50379: LD_ADDR_EXP 34
50383: PUSH
50384: LD_INT 1
50386: ST_TO_ADDR
// if p3 = 2 then
50387: LD_VAR 0 3
50391: PUSH
50392: LD_INT 2
50394: EQUAL
50395: IFFALSE 50405
// sSpeed := true ;
50397: LD_ADDR_EXP 33
50401: PUSH
50402: LD_INT 1
50404: ST_TO_ADDR
// if p3 = 3 then
50405: LD_VAR 0 3
50409: PUSH
50410: LD_INT 3
50412: EQUAL
50413: IFFALSE 50423
// sEngine := true ;
50415: LD_ADDR_EXP 35
50419: PUSH
50420: LD_INT 1
50422: ST_TO_ADDR
// if p3 = 4 then
50423: LD_VAR 0 3
50427: PUSH
50428: LD_INT 4
50430: EQUAL
50431: IFFALSE 50441
// sSpec := true ;
50433: LD_ADDR_EXP 32
50437: PUSH
50438: LD_INT 1
50440: ST_TO_ADDR
// if p3 = 5 then
50441: LD_VAR 0 3
50445: PUSH
50446: LD_INT 5
50448: EQUAL
50449: IFFALSE 50459
// sLevel := true ;
50451: LD_ADDR_EXP 36
50455: PUSH
50456: LD_INT 1
50458: ST_TO_ADDR
// if p3 = 6 then
50459: LD_VAR 0 3
50463: PUSH
50464: LD_INT 6
50466: EQUAL
50467: IFFALSE 50477
// sArmoury := true ;
50469: LD_ADDR_EXP 37
50473: PUSH
50474: LD_INT 1
50476: ST_TO_ADDR
// if p3 = 7 then
50477: LD_VAR 0 3
50481: PUSH
50482: LD_INT 7
50484: EQUAL
50485: IFFALSE 50495
// sRadar := true ;
50487: LD_ADDR_EXP 38
50491: PUSH
50492: LD_INT 1
50494: ST_TO_ADDR
// if p3 = 8 then
50495: LD_VAR 0 3
50499: PUSH
50500: LD_INT 8
50502: EQUAL
50503: IFFALSE 50513
// sBunker := true ;
50505: LD_ADDR_EXP 39
50509: PUSH
50510: LD_INT 1
50512: ST_TO_ADDR
// if p3 = 9 then
50513: LD_VAR 0 3
50517: PUSH
50518: LD_INT 9
50520: EQUAL
50521: IFFALSE 50531
// sHack := true ;
50523: LD_ADDR_EXP 40
50527: PUSH
50528: LD_INT 1
50530: ST_TO_ADDR
// if p3 = 10 then
50531: LD_VAR 0 3
50535: PUSH
50536: LD_INT 10
50538: EQUAL
50539: IFFALSE 50549
// sFire := true ;
50541: LD_ADDR_EXP 41
50545: PUSH
50546: LD_INT 1
50548: ST_TO_ADDR
// if p3 = 11 then
50549: LD_VAR 0 3
50553: PUSH
50554: LD_INT 11
50556: EQUAL
50557: IFFALSE 50567
// sRefresh := true ;
50559: LD_ADDR_EXP 42
50563: PUSH
50564: LD_INT 1
50566: ST_TO_ADDR
// if p3 = 12 then
50567: LD_VAR 0 3
50571: PUSH
50572: LD_INT 12
50574: EQUAL
50575: IFFALSE 50585
// sExp := true ;
50577: LD_ADDR_EXP 43
50581: PUSH
50582: LD_INT 1
50584: ST_TO_ADDR
// if p3 = 13 then
50585: LD_VAR 0 3
50589: PUSH
50590: LD_INT 13
50592: EQUAL
50593: IFFALSE 50603
// sDepot := true ;
50595: LD_ADDR_EXP 44
50599: PUSH
50600: LD_INT 1
50602: ST_TO_ADDR
// if p3 = 14 then
50603: LD_VAR 0 3
50607: PUSH
50608: LD_INT 14
50610: EQUAL
50611: IFFALSE 50621
// sFlag := true ;
50613: LD_ADDR_EXP 45
50617: PUSH
50618: LD_INT 1
50620: ST_TO_ADDR
// if p3 = 15 then
50621: LD_VAR 0 3
50625: PUSH
50626: LD_INT 15
50628: EQUAL
50629: IFFALSE 50639
// sKamikadze := true ;
50631: LD_ADDR_EXP 53
50635: PUSH
50636: LD_INT 1
50638: ST_TO_ADDR
// if p3 = 16 then
50639: LD_VAR 0 3
50643: PUSH
50644: LD_INT 16
50646: EQUAL
50647: IFFALSE 50657
// sTroll := true ;
50649: LD_ADDR_EXP 54
50653: PUSH
50654: LD_INT 1
50656: ST_TO_ADDR
// if p3 = 17 then
50657: LD_VAR 0 3
50661: PUSH
50662: LD_INT 17
50664: EQUAL
50665: IFFALSE 50675
// sSlow := true ;
50667: LD_ADDR_EXP 55
50671: PUSH
50672: LD_INT 1
50674: ST_TO_ADDR
// if p3 = 18 then
50675: LD_VAR 0 3
50679: PUSH
50680: LD_INT 18
50682: EQUAL
50683: IFFALSE 50693
// sLack := true ;
50685: LD_ADDR_EXP 56
50689: PUSH
50690: LD_INT 1
50692: ST_TO_ADDR
// if p3 = 19 then
50693: LD_VAR 0 3
50697: PUSH
50698: LD_INT 19
50700: EQUAL
50701: IFFALSE 50711
// sTank := true ;
50703: LD_ADDR_EXP 58
50707: PUSH
50708: LD_INT 1
50710: ST_TO_ADDR
// if p3 = 20 then
50711: LD_VAR 0 3
50715: PUSH
50716: LD_INT 20
50718: EQUAL
50719: IFFALSE 50729
// sRemote := true ;
50721: LD_ADDR_EXP 59
50725: PUSH
50726: LD_INT 1
50728: ST_TO_ADDR
// if p3 = 21 then
50729: LD_VAR 0 3
50733: PUSH
50734: LD_INT 21
50736: EQUAL
50737: IFFALSE 50747
// sPowell := true ;
50739: LD_ADDR_EXP 60
50743: PUSH
50744: LD_INT 1
50746: ST_TO_ADDR
// if p3 = 22 then
50747: LD_VAR 0 3
50751: PUSH
50752: LD_INT 22
50754: EQUAL
50755: IFFALSE 50765
// sTeleport := true ;
50757: LD_ADDR_EXP 63
50761: PUSH
50762: LD_INT 1
50764: ST_TO_ADDR
// if p3 = 23 then
50765: LD_VAR 0 3
50769: PUSH
50770: LD_INT 23
50772: EQUAL
50773: IFFALSE 50783
// sOilTower := true ;
50775: LD_ADDR_EXP 65
50779: PUSH
50780: LD_INT 1
50782: ST_TO_ADDR
// if p3 = 24 then
50783: LD_VAR 0 3
50787: PUSH
50788: LD_INT 24
50790: EQUAL
50791: IFFALSE 50801
// sShovel := true ;
50793: LD_ADDR_EXP 66
50797: PUSH
50798: LD_INT 1
50800: ST_TO_ADDR
// if p3 = 25 then
50801: LD_VAR 0 3
50805: PUSH
50806: LD_INT 25
50808: EQUAL
50809: IFFALSE 50819
// sSheik := true ;
50811: LD_ADDR_EXP 67
50815: PUSH
50816: LD_INT 1
50818: ST_TO_ADDR
// if p3 = 26 then
50819: LD_VAR 0 3
50823: PUSH
50824: LD_INT 26
50826: EQUAL
50827: IFFALSE 50837
// sEarthquake := true ;
50829: LD_ADDR_EXP 69
50833: PUSH
50834: LD_INT 1
50836: ST_TO_ADDR
// if p3 = 27 then
50837: LD_VAR 0 3
50841: PUSH
50842: LD_INT 27
50844: EQUAL
50845: IFFALSE 50855
// sAI := true ;
50847: LD_ADDR_EXP 70
50851: PUSH
50852: LD_INT 1
50854: ST_TO_ADDR
// if p3 = 28 then
50855: LD_VAR 0 3
50859: PUSH
50860: LD_INT 28
50862: EQUAL
50863: IFFALSE 50873
// sCargo := true ;
50865: LD_ADDR_EXP 73
50869: PUSH
50870: LD_INT 1
50872: ST_TO_ADDR
// if p3 = 29 then
50873: LD_VAR 0 3
50877: PUSH
50878: LD_INT 29
50880: EQUAL
50881: IFFALSE 50891
// sDLaser := true ;
50883: LD_ADDR_EXP 74
50887: PUSH
50888: LD_INT 1
50890: ST_TO_ADDR
// if p3 = 30 then
50891: LD_VAR 0 3
50895: PUSH
50896: LD_INT 30
50898: EQUAL
50899: IFFALSE 50909
// sExchange := true ;
50901: LD_ADDR_EXP 75
50905: PUSH
50906: LD_INT 1
50908: ST_TO_ADDR
// if p3 = 31 then
50909: LD_VAR 0 3
50913: PUSH
50914: LD_INT 31
50916: EQUAL
50917: IFFALSE 50927
// sFac := true ;
50919: LD_ADDR_EXP 76
50923: PUSH
50924: LD_INT 1
50926: ST_TO_ADDR
// if p3 = 32 then
50927: LD_VAR 0 3
50931: PUSH
50932: LD_INT 32
50934: EQUAL
50935: IFFALSE 50945
// sPower := true ;
50937: LD_ADDR_EXP 77
50941: PUSH
50942: LD_INT 1
50944: ST_TO_ADDR
// if p3 = 33 then
50945: LD_VAR 0 3
50949: PUSH
50950: LD_INT 33
50952: EQUAL
50953: IFFALSE 50963
// sRandom := true ;
50955: LD_ADDR_EXP 78
50959: PUSH
50960: LD_INT 1
50962: ST_TO_ADDR
// if p3 = 34 then
50963: LD_VAR 0 3
50967: PUSH
50968: LD_INT 34
50970: EQUAL
50971: IFFALSE 50981
// sShield := true ;
50973: LD_ADDR_EXP 79
50977: PUSH
50978: LD_INT 1
50980: ST_TO_ADDR
// if p3 = 35 then
50981: LD_VAR 0 3
50985: PUSH
50986: LD_INT 35
50988: EQUAL
50989: IFFALSE 50999
// sTime := true ;
50991: LD_ADDR_EXP 80
50995: PUSH
50996: LD_INT 1
50998: ST_TO_ADDR
// if p3 = 36 then
50999: LD_VAR 0 3
51003: PUSH
51004: LD_INT 36
51006: EQUAL
51007: IFFALSE 51017
// sTools := true ;
51009: LD_ADDR_EXP 81
51013: PUSH
51014: LD_INT 1
51016: ST_TO_ADDR
// if p3 = 101 then
51017: LD_VAR 0 3
51021: PUSH
51022: LD_INT 101
51024: EQUAL
51025: IFFALSE 51035
// sSold := true ;
51027: LD_ADDR_EXP 46
51031: PUSH
51032: LD_INT 1
51034: ST_TO_ADDR
// if p3 = 102 then
51035: LD_VAR 0 3
51039: PUSH
51040: LD_INT 102
51042: EQUAL
51043: IFFALSE 51053
// sDiff := true ;
51045: LD_ADDR_EXP 47
51049: PUSH
51050: LD_INT 1
51052: ST_TO_ADDR
// if p3 = 103 then
51053: LD_VAR 0 3
51057: PUSH
51058: LD_INT 103
51060: EQUAL
51061: IFFALSE 51071
// sFog := true ;
51063: LD_ADDR_EXP 50
51067: PUSH
51068: LD_INT 1
51070: ST_TO_ADDR
// if p3 = 104 then
51071: LD_VAR 0 3
51075: PUSH
51076: LD_INT 104
51078: EQUAL
51079: IFFALSE 51089
// sReset := true ;
51081: LD_ADDR_EXP 51
51085: PUSH
51086: LD_INT 1
51088: ST_TO_ADDR
// if p3 = 105 then
51089: LD_VAR 0 3
51093: PUSH
51094: LD_INT 105
51096: EQUAL
51097: IFFALSE 51107
// sSun := true ;
51099: LD_ADDR_EXP 52
51103: PUSH
51104: LD_INT 1
51106: ST_TO_ADDR
// if p3 = 106 then
51107: LD_VAR 0 3
51111: PUSH
51112: LD_INT 106
51114: EQUAL
51115: IFFALSE 51125
// sTiger := true ;
51117: LD_ADDR_EXP 48
51121: PUSH
51122: LD_INT 1
51124: ST_TO_ADDR
// if p3 = 107 then
51125: LD_VAR 0 3
51129: PUSH
51130: LD_INT 107
51132: EQUAL
51133: IFFALSE 51143
// sBomb := true ;
51135: LD_ADDR_EXP 49
51139: PUSH
51140: LD_INT 1
51142: ST_TO_ADDR
// if p3 = 108 then
51143: LD_VAR 0 3
51147: PUSH
51148: LD_INT 108
51150: EQUAL
51151: IFFALSE 51161
// sWound := true ;
51153: LD_ADDR_EXP 57
51157: PUSH
51158: LD_INT 1
51160: ST_TO_ADDR
// if p3 = 109 then
51161: LD_VAR 0 3
51165: PUSH
51166: LD_INT 109
51168: EQUAL
51169: IFFALSE 51179
// sBetray := true ;
51171: LD_ADDR_EXP 61
51175: PUSH
51176: LD_INT 1
51178: ST_TO_ADDR
// if p3 = 110 then
51179: LD_VAR 0 3
51183: PUSH
51184: LD_INT 110
51186: EQUAL
51187: IFFALSE 51197
// sContamin := true ;
51189: LD_ADDR_EXP 62
51193: PUSH
51194: LD_INT 1
51196: ST_TO_ADDR
// if p3 = 111 then
51197: LD_VAR 0 3
51201: PUSH
51202: LD_INT 111
51204: EQUAL
51205: IFFALSE 51215
// sOil := true ;
51207: LD_ADDR_EXP 64
51211: PUSH
51212: LD_INT 1
51214: ST_TO_ADDR
// if p3 = 112 then
51215: LD_VAR 0 3
51219: PUSH
51220: LD_INT 112
51222: EQUAL
51223: IFFALSE 51233
// sStu := true ;
51225: LD_ADDR_EXP 68
51229: PUSH
51230: LD_INT 1
51232: ST_TO_ADDR
// if p3 = 113 then
51233: LD_VAR 0 3
51237: PUSH
51238: LD_INT 113
51240: EQUAL
51241: IFFALSE 51251
// sBazooka := true ;
51243: LD_ADDR_EXP 71
51247: PUSH
51248: LD_INT 1
51250: ST_TO_ADDR
// if p3 = 114 then
51251: LD_VAR 0 3
51255: PUSH
51256: LD_INT 114
51258: EQUAL
51259: IFFALSE 51269
// sMortar := true ;
51261: LD_ADDR_EXP 72
51265: PUSH
51266: LD_INT 1
51268: ST_TO_ADDR
// if p3 = 115 then
51269: LD_VAR 0 3
51273: PUSH
51274: LD_INT 115
51276: EQUAL
51277: IFFALSE 51287
// sRanger := true ;
51279: LD_ADDR_EXP 82
51283: PUSH
51284: LD_INT 1
51286: ST_TO_ADDR
// if p3 = 116 then
51287: LD_VAR 0 3
51291: PUSH
51292: LD_INT 116
51294: EQUAL
51295: IFFALSE 51305
// sComputer := true ;
51297: LD_ADDR_EXP 83
51301: PUSH
51302: LD_INT 1
51304: ST_TO_ADDR
// if p3 = 117 then
51305: LD_VAR 0 3
51309: PUSH
51310: LD_INT 117
51312: EQUAL
51313: IFFALSE 51323
// s30 := true ;
51315: LD_ADDR_EXP 84
51319: PUSH
51320: LD_INT 1
51322: ST_TO_ADDR
// if p3 = 118 then
51323: LD_VAR 0 3
51327: PUSH
51328: LD_INT 118
51330: EQUAL
51331: IFFALSE 51341
// s60 := true ;
51333: LD_ADDR_EXP 85
51337: PUSH
51338: LD_INT 1
51340: ST_TO_ADDR
// end ; if p2 = hack_mode then
51341: LD_VAR 0 2
51345: PUSH
51346: LD_INT 101
51348: EQUAL
51349: IFFALSE 51477
// begin case p3 of 1 :
51351: LD_VAR 0 3
51355: PUSH
51356: LD_INT 1
51358: DOUBLE
51359: EQUAL
51360: IFTRUE 51364
51362: GO 51371
51364: POP
// hHackUnlimitedResources ; 2 :
51365: CALL 63624 0 0
51369: GO 51477
51371: LD_INT 2
51373: DOUBLE
51374: EQUAL
51375: IFTRUE 51379
51377: GO 51386
51379: POP
// hHackSetLevel10 ; 3 :
51380: CALL 63757 0 0
51384: GO 51477
51386: LD_INT 3
51388: DOUBLE
51389: EQUAL
51390: IFTRUE 51394
51392: GO 51401
51394: POP
// hHackSetLevel10YourUnits ; 4 :
51395: CALL 63842 0 0
51399: GO 51477
51401: LD_INT 4
51403: DOUBLE
51404: EQUAL
51405: IFTRUE 51409
51407: GO 51416
51409: POP
// hHackInvincible ; 5 :
51410: CALL 64290 0 0
51414: GO 51477
51416: LD_INT 5
51418: DOUBLE
51419: EQUAL
51420: IFTRUE 51424
51422: GO 51431
51424: POP
// hHackInvisible ; 6 :
51425: CALL 64401 0 0
51429: GO 51477
51431: LD_INT 6
51433: DOUBLE
51434: EQUAL
51435: IFTRUE 51439
51437: GO 51446
51439: POP
// hHackChangeYourSide ; 7 :
51440: CALL 64458 0 0
51444: GO 51477
51446: LD_INT 7
51448: DOUBLE
51449: EQUAL
51450: IFTRUE 51454
51452: GO 51461
51454: POP
// hHackChangeUnitSide ; 8 :
51455: CALL 64500 0 0
51459: GO 51477
51461: LD_INT 8
51463: DOUBLE
51464: EQUAL
51465: IFTRUE 51469
51467: GO 51476
51469: POP
// hHackFog ; end ;
51470: CALL 64601 0 0
51474: GO 51477
51476: POP
// end ; if p2 = game_save_mode then
51477: LD_VAR 0 2
51481: PUSH
51482: LD_INT 102
51484: EQUAL
51485: IFFALSE 51540
// begin if p3 = 1 then
51487: LD_VAR 0 3
51491: PUSH
51492: LD_INT 1
51494: EQUAL
51495: IFFALSE 51507
// globalGameSaveCounter := p4 ;
51497: LD_ADDR_EXP 28
51501: PUSH
51502: LD_VAR 0 4
51506: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51507: LD_VAR 0 3
51511: PUSH
51512: LD_INT 2
51514: EQUAL
51515: PUSH
51516: LD_EXP 28
51520: AND
51521: IFFALSE 51540
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51523: LD_STRING setGameSaveCounter(
51525: PUSH
51526: LD_EXP 28
51530: STR
51531: PUSH
51532: LD_STRING )
51534: STR
51535: PPUSH
51536: CALL_OW 559
// end ; end ;
51540: LD_VAR 0 7
51544: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51545: LD_INT 0
51547: PPUSH
// streamModeActive := false ;
51548: LD_ADDR_EXP 29
51552: PUSH
51553: LD_INT 0
51555: ST_TO_ADDR
// normalCounter := 36 ;
51556: LD_ADDR_EXP 30
51560: PUSH
51561: LD_INT 36
51563: ST_TO_ADDR
// hardcoreCounter := 18 ;
51564: LD_ADDR_EXP 31
51568: PUSH
51569: LD_INT 18
51571: ST_TO_ADDR
// sRocket := false ;
51572: LD_ADDR_EXP 34
51576: PUSH
51577: LD_INT 0
51579: ST_TO_ADDR
// sSpeed := false ;
51580: LD_ADDR_EXP 33
51584: PUSH
51585: LD_INT 0
51587: ST_TO_ADDR
// sEngine := false ;
51588: LD_ADDR_EXP 35
51592: PUSH
51593: LD_INT 0
51595: ST_TO_ADDR
// sSpec := false ;
51596: LD_ADDR_EXP 32
51600: PUSH
51601: LD_INT 0
51603: ST_TO_ADDR
// sLevel := false ;
51604: LD_ADDR_EXP 36
51608: PUSH
51609: LD_INT 0
51611: ST_TO_ADDR
// sArmoury := false ;
51612: LD_ADDR_EXP 37
51616: PUSH
51617: LD_INT 0
51619: ST_TO_ADDR
// sRadar := false ;
51620: LD_ADDR_EXP 38
51624: PUSH
51625: LD_INT 0
51627: ST_TO_ADDR
// sBunker := false ;
51628: LD_ADDR_EXP 39
51632: PUSH
51633: LD_INT 0
51635: ST_TO_ADDR
// sHack := false ;
51636: LD_ADDR_EXP 40
51640: PUSH
51641: LD_INT 0
51643: ST_TO_ADDR
// sFire := false ;
51644: LD_ADDR_EXP 41
51648: PUSH
51649: LD_INT 0
51651: ST_TO_ADDR
// sRefresh := false ;
51652: LD_ADDR_EXP 42
51656: PUSH
51657: LD_INT 0
51659: ST_TO_ADDR
// sExp := false ;
51660: LD_ADDR_EXP 43
51664: PUSH
51665: LD_INT 0
51667: ST_TO_ADDR
// sDepot := false ;
51668: LD_ADDR_EXP 44
51672: PUSH
51673: LD_INT 0
51675: ST_TO_ADDR
// sFlag := false ;
51676: LD_ADDR_EXP 45
51680: PUSH
51681: LD_INT 0
51683: ST_TO_ADDR
// sKamikadze := false ;
51684: LD_ADDR_EXP 53
51688: PUSH
51689: LD_INT 0
51691: ST_TO_ADDR
// sTroll := false ;
51692: LD_ADDR_EXP 54
51696: PUSH
51697: LD_INT 0
51699: ST_TO_ADDR
// sSlow := false ;
51700: LD_ADDR_EXP 55
51704: PUSH
51705: LD_INT 0
51707: ST_TO_ADDR
// sLack := false ;
51708: LD_ADDR_EXP 56
51712: PUSH
51713: LD_INT 0
51715: ST_TO_ADDR
// sTank := false ;
51716: LD_ADDR_EXP 58
51720: PUSH
51721: LD_INT 0
51723: ST_TO_ADDR
// sRemote := false ;
51724: LD_ADDR_EXP 59
51728: PUSH
51729: LD_INT 0
51731: ST_TO_ADDR
// sPowell := false ;
51732: LD_ADDR_EXP 60
51736: PUSH
51737: LD_INT 0
51739: ST_TO_ADDR
// sTeleport := false ;
51740: LD_ADDR_EXP 63
51744: PUSH
51745: LD_INT 0
51747: ST_TO_ADDR
// sOilTower := false ;
51748: LD_ADDR_EXP 65
51752: PUSH
51753: LD_INT 0
51755: ST_TO_ADDR
// sShovel := false ;
51756: LD_ADDR_EXP 66
51760: PUSH
51761: LD_INT 0
51763: ST_TO_ADDR
// sSheik := false ;
51764: LD_ADDR_EXP 67
51768: PUSH
51769: LD_INT 0
51771: ST_TO_ADDR
// sEarthquake := false ;
51772: LD_ADDR_EXP 69
51776: PUSH
51777: LD_INT 0
51779: ST_TO_ADDR
// sAI := false ;
51780: LD_ADDR_EXP 70
51784: PUSH
51785: LD_INT 0
51787: ST_TO_ADDR
// sCargo := false ;
51788: LD_ADDR_EXP 73
51792: PUSH
51793: LD_INT 0
51795: ST_TO_ADDR
// sDLaser := false ;
51796: LD_ADDR_EXP 74
51800: PUSH
51801: LD_INT 0
51803: ST_TO_ADDR
// sExchange := false ;
51804: LD_ADDR_EXP 75
51808: PUSH
51809: LD_INT 0
51811: ST_TO_ADDR
// sFac := false ;
51812: LD_ADDR_EXP 76
51816: PUSH
51817: LD_INT 0
51819: ST_TO_ADDR
// sPower := false ;
51820: LD_ADDR_EXP 77
51824: PUSH
51825: LD_INT 0
51827: ST_TO_ADDR
// sRandom := false ;
51828: LD_ADDR_EXP 78
51832: PUSH
51833: LD_INT 0
51835: ST_TO_ADDR
// sShield := false ;
51836: LD_ADDR_EXP 79
51840: PUSH
51841: LD_INT 0
51843: ST_TO_ADDR
// sTime := false ;
51844: LD_ADDR_EXP 80
51848: PUSH
51849: LD_INT 0
51851: ST_TO_ADDR
// sTools := false ;
51852: LD_ADDR_EXP 81
51856: PUSH
51857: LD_INT 0
51859: ST_TO_ADDR
// sSold := false ;
51860: LD_ADDR_EXP 46
51864: PUSH
51865: LD_INT 0
51867: ST_TO_ADDR
// sDiff := false ;
51868: LD_ADDR_EXP 47
51872: PUSH
51873: LD_INT 0
51875: ST_TO_ADDR
// sFog := false ;
51876: LD_ADDR_EXP 50
51880: PUSH
51881: LD_INT 0
51883: ST_TO_ADDR
// sReset := false ;
51884: LD_ADDR_EXP 51
51888: PUSH
51889: LD_INT 0
51891: ST_TO_ADDR
// sSun := false ;
51892: LD_ADDR_EXP 52
51896: PUSH
51897: LD_INT 0
51899: ST_TO_ADDR
// sTiger := false ;
51900: LD_ADDR_EXP 48
51904: PUSH
51905: LD_INT 0
51907: ST_TO_ADDR
// sBomb := false ;
51908: LD_ADDR_EXP 49
51912: PUSH
51913: LD_INT 0
51915: ST_TO_ADDR
// sWound := false ;
51916: LD_ADDR_EXP 57
51920: PUSH
51921: LD_INT 0
51923: ST_TO_ADDR
// sBetray := false ;
51924: LD_ADDR_EXP 61
51928: PUSH
51929: LD_INT 0
51931: ST_TO_ADDR
// sContamin := false ;
51932: LD_ADDR_EXP 62
51936: PUSH
51937: LD_INT 0
51939: ST_TO_ADDR
// sOil := false ;
51940: LD_ADDR_EXP 64
51944: PUSH
51945: LD_INT 0
51947: ST_TO_ADDR
// sStu := false ;
51948: LD_ADDR_EXP 68
51952: PUSH
51953: LD_INT 0
51955: ST_TO_ADDR
// sBazooka := false ;
51956: LD_ADDR_EXP 71
51960: PUSH
51961: LD_INT 0
51963: ST_TO_ADDR
// sMortar := false ;
51964: LD_ADDR_EXP 72
51968: PUSH
51969: LD_INT 0
51971: ST_TO_ADDR
// sRanger := false ;
51972: LD_ADDR_EXP 82
51976: PUSH
51977: LD_INT 0
51979: ST_TO_ADDR
// sComputer := false ;
51980: LD_ADDR_EXP 83
51984: PUSH
51985: LD_INT 0
51987: ST_TO_ADDR
// s30 := false ;
51988: LD_ADDR_EXP 84
51992: PUSH
51993: LD_INT 0
51995: ST_TO_ADDR
// s60 := false ;
51996: LD_ADDR_EXP 85
52000: PUSH
52001: LD_INT 0
52003: ST_TO_ADDR
// end ;
52004: LD_VAR 0 1
52008: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52009: LD_INT 0
52011: PPUSH
52012: PPUSH
52013: PPUSH
52014: PPUSH
52015: PPUSH
52016: PPUSH
52017: PPUSH
// result := [ ] ;
52018: LD_ADDR_VAR 0 2
52022: PUSH
52023: EMPTY
52024: ST_TO_ADDR
// if campaign_id = 1 then
52025: LD_OWVAR 69
52029: PUSH
52030: LD_INT 1
52032: EQUAL
52033: IFFALSE 55199
// begin case mission_number of 1 :
52035: LD_OWVAR 70
52039: PUSH
52040: LD_INT 1
52042: DOUBLE
52043: EQUAL
52044: IFTRUE 52048
52046: GO 52124
52048: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52049: LD_ADDR_VAR 0 2
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: LD_INT 11
52062: PUSH
52063: LD_INT 12
52065: PUSH
52066: LD_INT 15
52068: PUSH
52069: LD_INT 16
52071: PUSH
52072: LD_INT 22
52074: PUSH
52075: LD_INT 23
52077: PUSH
52078: LD_INT 26
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 101
52094: PUSH
52095: LD_INT 102
52097: PUSH
52098: LD_INT 106
52100: PUSH
52101: LD_INT 116
52103: PUSH
52104: LD_INT 117
52106: PUSH
52107: LD_INT 118
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: ST_TO_ADDR
52122: GO 55197
52124: LD_INT 2
52126: DOUBLE
52127: EQUAL
52128: IFTRUE 52132
52130: GO 52216
52132: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52133: LD_ADDR_VAR 0 2
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 11
52146: PUSH
52147: LD_INT 12
52149: PUSH
52150: LD_INT 15
52152: PUSH
52153: LD_INT 16
52155: PUSH
52156: LD_INT 22
52158: PUSH
52159: LD_INT 23
52161: PUSH
52162: LD_INT 26
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 101
52178: PUSH
52179: LD_INT 102
52181: PUSH
52182: LD_INT 105
52184: PUSH
52185: LD_INT 106
52187: PUSH
52188: LD_INT 108
52190: PUSH
52191: LD_INT 116
52193: PUSH
52194: LD_INT 117
52196: PUSH
52197: LD_INT 118
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: ST_TO_ADDR
52214: GO 55197
52216: LD_INT 3
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52224
52222: GO 52312
52224: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52225: LD_ADDR_VAR 0 2
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: LD_INT 11
52241: PUSH
52242: LD_INT 12
52244: PUSH
52245: LD_INT 15
52247: PUSH
52248: LD_INT 16
52250: PUSH
52251: LD_INT 22
52253: PUSH
52254: LD_INT 26
52256: PUSH
52257: LD_INT 36
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 101
52274: PUSH
52275: LD_INT 102
52277: PUSH
52278: LD_INT 105
52280: PUSH
52281: LD_INT 106
52283: PUSH
52284: LD_INT 108
52286: PUSH
52287: LD_INT 116
52289: PUSH
52290: LD_INT 117
52292: PUSH
52293: LD_INT 118
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: ST_TO_ADDR
52310: GO 55197
52312: LD_INT 4
52314: DOUBLE
52315: EQUAL
52316: IFTRUE 52320
52318: GO 52416
52320: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52321: LD_ADDR_VAR 0 2
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 4
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: LD_INT 8
52337: PUSH
52338: LD_INT 11
52340: PUSH
52341: LD_INT 12
52343: PUSH
52344: LD_INT 15
52346: PUSH
52347: LD_INT 16
52349: PUSH
52350: LD_INT 22
52352: PUSH
52353: LD_INT 23
52355: PUSH
52356: LD_INT 26
52358: PUSH
52359: LD_INT 36
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 101
52378: PUSH
52379: LD_INT 102
52381: PUSH
52382: LD_INT 105
52384: PUSH
52385: LD_INT 106
52387: PUSH
52388: LD_INT 108
52390: PUSH
52391: LD_INT 116
52393: PUSH
52394: LD_INT 117
52396: PUSH
52397: LD_INT 118
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: ST_TO_ADDR
52414: GO 55197
52416: LD_INT 5
52418: DOUBLE
52419: EQUAL
52420: IFTRUE 52424
52422: GO 52536
52424: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52425: LD_ADDR_VAR 0 2
52429: PUSH
52430: LD_INT 2
52432: PUSH
52433: LD_INT 4
52435: PUSH
52436: LD_INT 5
52438: PUSH
52439: LD_INT 6
52441: PUSH
52442: LD_INT 8
52444: PUSH
52445: LD_INT 11
52447: PUSH
52448: LD_INT 12
52450: PUSH
52451: LD_INT 15
52453: PUSH
52454: LD_INT 16
52456: PUSH
52457: LD_INT 22
52459: PUSH
52460: LD_INT 23
52462: PUSH
52463: LD_INT 25
52465: PUSH
52466: LD_INT 26
52468: PUSH
52469: LD_INT 36
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 101
52490: PUSH
52491: LD_INT 102
52493: PUSH
52494: LD_INT 105
52496: PUSH
52497: LD_INT 106
52499: PUSH
52500: LD_INT 108
52502: PUSH
52503: LD_INT 109
52505: PUSH
52506: LD_INT 112
52508: PUSH
52509: LD_INT 116
52511: PUSH
52512: LD_INT 117
52514: PUSH
52515: LD_INT 118
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: ST_TO_ADDR
52534: GO 55197
52536: LD_INT 6
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52544
52542: GO 52676
52544: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52545: LD_ADDR_VAR 0 2
52549: PUSH
52550: LD_INT 2
52552: PUSH
52553: LD_INT 4
52555: PUSH
52556: LD_INT 5
52558: PUSH
52559: LD_INT 6
52561: PUSH
52562: LD_INT 8
52564: PUSH
52565: LD_INT 11
52567: PUSH
52568: LD_INT 12
52570: PUSH
52571: LD_INT 15
52573: PUSH
52574: LD_INT 16
52576: PUSH
52577: LD_INT 20
52579: PUSH
52580: LD_INT 21
52582: PUSH
52583: LD_INT 22
52585: PUSH
52586: LD_INT 23
52588: PUSH
52589: LD_INT 25
52591: PUSH
52592: LD_INT 26
52594: PUSH
52595: LD_INT 30
52597: PUSH
52598: LD_INT 31
52600: PUSH
52601: LD_INT 32
52603: PUSH
52604: LD_INT 36
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 101
52630: PUSH
52631: LD_INT 102
52633: PUSH
52634: LD_INT 105
52636: PUSH
52637: LD_INT 106
52639: PUSH
52640: LD_INT 108
52642: PUSH
52643: LD_INT 109
52645: PUSH
52646: LD_INT 112
52648: PUSH
52649: LD_INT 116
52651: PUSH
52652: LD_INT 117
52654: PUSH
52655: LD_INT 118
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: ST_TO_ADDR
52674: GO 55197
52676: LD_INT 7
52678: DOUBLE
52679: EQUAL
52680: IFTRUE 52684
52682: GO 52796
52684: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 4
52695: PUSH
52696: LD_INT 5
52698: PUSH
52699: LD_INT 7
52701: PUSH
52702: LD_INT 11
52704: PUSH
52705: LD_INT 12
52707: PUSH
52708: LD_INT 15
52710: PUSH
52711: LD_INT 16
52713: PUSH
52714: LD_INT 20
52716: PUSH
52717: LD_INT 21
52719: PUSH
52720: LD_INT 22
52722: PUSH
52723: LD_INT 23
52725: PUSH
52726: LD_INT 25
52728: PUSH
52729: LD_INT 26
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 101
52750: PUSH
52751: LD_INT 102
52753: PUSH
52754: LD_INT 103
52756: PUSH
52757: LD_INT 105
52759: PUSH
52760: LD_INT 106
52762: PUSH
52763: LD_INT 108
52765: PUSH
52766: LD_INT 112
52768: PUSH
52769: LD_INT 116
52771: PUSH
52772: LD_INT 117
52774: PUSH
52775: LD_INT 118
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: ST_TO_ADDR
52794: GO 55197
52796: LD_INT 8
52798: DOUBLE
52799: EQUAL
52800: IFTRUE 52804
52802: GO 52944
52804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52805: LD_ADDR_VAR 0 2
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 4
52815: PUSH
52816: LD_INT 5
52818: PUSH
52819: LD_INT 6
52821: PUSH
52822: LD_INT 7
52824: PUSH
52825: LD_INT 8
52827: PUSH
52828: LD_INT 11
52830: PUSH
52831: LD_INT 12
52833: PUSH
52834: LD_INT 15
52836: PUSH
52837: LD_INT 16
52839: PUSH
52840: LD_INT 20
52842: PUSH
52843: LD_INT 21
52845: PUSH
52846: LD_INT 22
52848: PUSH
52849: LD_INT 23
52851: PUSH
52852: LD_INT 25
52854: PUSH
52855: LD_INT 26
52857: PUSH
52858: LD_INT 30
52860: PUSH
52861: LD_INT 31
52863: PUSH
52864: LD_INT 32
52866: PUSH
52867: LD_INT 36
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 101
52894: PUSH
52895: LD_INT 102
52897: PUSH
52898: LD_INT 103
52900: PUSH
52901: LD_INT 105
52903: PUSH
52904: LD_INT 106
52906: PUSH
52907: LD_INT 108
52909: PUSH
52910: LD_INT 109
52912: PUSH
52913: LD_INT 112
52915: PUSH
52916: LD_INT 116
52918: PUSH
52919: LD_INT 117
52921: PUSH
52922: LD_INT 118
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: ST_TO_ADDR
52942: GO 55197
52944: LD_INT 9
52946: DOUBLE
52947: EQUAL
52948: IFTRUE 52952
52950: GO 53100
52952: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52953: LD_ADDR_VAR 0 2
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 4
52963: PUSH
52964: LD_INT 5
52966: PUSH
52967: LD_INT 6
52969: PUSH
52970: LD_INT 7
52972: PUSH
52973: LD_INT 8
52975: PUSH
52976: LD_INT 11
52978: PUSH
52979: LD_INT 12
52981: PUSH
52982: LD_INT 15
52984: PUSH
52985: LD_INT 16
52987: PUSH
52988: LD_INT 20
52990: PUSH
52991: LD_INT 21
52993: PUSH
52994: LD_INT 22
52996: PUSH
52997: LD_INT 23
52999: PUSH
53000: LD_INT 25
53002: PUSH
53003: LD_INT 26
53005: PUSH
53006: LD_INT 28
53008: PUSH
53009: LD_INT 30
53011: PUSH
53012: LD_INT 31
53014: PUSH
53015: LD_INT 32
53017: PUSH
53018: LD_INT 36
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 101
53046: PUSH
53047: LD_INT 102
53049: PUSH
53050: LD_INT 103
53052: PUSH
53053: LD_INT 105
53055: PUSH
53056: LD_INT 106
53058: PUSH
53059: LD_INT 108
53061: PUSH
53062: LD_INT 109
53064: PUSH
53065: LD_INT 112
53067: PUSH
53068: LD_INT 114
53070: PUSH
53071: LD_INT 116
53073: PUSH
53074: LD_INT 117
53076: PUSH
53077: LD_INT 118
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: ST_TO_ADDR
53098: GO 55197
53100: LD_INT 10
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53304
53108: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53109: LD_ADDR_VAR 0 2
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: LD_INT 5
53122: PUSH
53123: LD_INT 6
53125: PUSH
53126: LD_INT 7
53128: PUSH
53129: LD_INT 8
53131: PUSH
53132: LD_INT 9
53134: PUSH
53135: LD_INT 10
53137: PUSH
53138: LD_INT 11
53140: PUSH
53141: LD_INT 12
53143: PUSH
53144: LD_INT 13
53146: PUSH
53147: LD_INT 14
53149: PUSH
53150: LD_INT 15
53152: PUSH
53153: LD_INT 16
53155: PUSH
53156: LD_INT 17
53158: PUSH
53159: LD_INT 18
53161: PUSH
53162: LD_INT 19
53164: PUSH
53165: LD_INT 20
53167: PUSH
53168: LD_INT 21
53170: PUSH
53171: LD_INT 22
53173: PUSH
53174: LD_INT 23
53176: PUSH
53177: LD_INT 24
53179: PUSH
53180: LD_INT 25
53182: PUSH
53183: LD_INT 26
53185: PUSH
53186: LD_INT 28
53188: PUSH
53189: LD_INT 30
53191: PUSH
53192: LD_INT 31
53194: PUSH
53195: LD_INT 32
53197: PUSH
53198: LD_INT 36
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 101
53234: PUSH
53235: LD_INT 102
53237: PUSH
53238: LD_INT 103
53240: PUSH
53241: LD_INT 104
53243: PUSH
53244: LD_INT 105
53246: PUSH
53247: LD_INT 106
53249: PUSH
53250: LD_INT 107
53252: PUSH
53253: LD_INT 108
53255: PUSH
53256: LD_INT 109
53258: PUSH
53259: LD_INT 110
53261: PUSH
53262: LD_INT 111
53264: PUSH
53265: LD_INT 112
53267: PUSH
53268: LD_INT 114
53270: PUSH
53271: LD_INT 116
53273: PUSH
53274: LD_INT 117
53276: PUSH
53277: LD_INT 118
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: ST_TO_ADDR
53302: GO 55197
53304: LD_INT 11
53306: DOUBLE
53307: EQUAL
53308: IFTRUE 53312
53310: GO 53516
53312: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53313: LD_ADDR_VAR 0 2
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 4
53326: PUSH
53327: LD_INT 5
53329: PUSH
53330: LD_INT 6
53332: PUSH
53333: LD_INT 7
53335: PUSH
53336: LD_INT 8
53338: PUSH
53339: LD_INT 9
53341: PUSH
53342: LD_INT 10
53344: PUSH
53345: LD_INT 11
53347: PUSH
53348: LD_INT 12
53350: PUSH
53351: LD_INT 13
53353: PUSH
53354: LD_INT 14
53356: PUSH
53357: LD_INT 15
53359: PUSH
53360: LD_INT 16
53362: PUSH
53363: LD_INT 17
53365: PUSH
53366: LD_INT 18
53368: PUSH
53369: LD_INT 19
53371: PUSH
53372: LD_INT 20
53374: PUSH
53375: LD_INT 21
53377: PUSH
53378: LD_INT 22
53380: PUSH
53381: LD_INT 23
53383: PUSH
53384: LD_INT 24
53386: PUSH
53387: LD_INT 25
53389: PUSH
53390: LD_INT 26
53392: PUSH
53393: LD_INT 28
53395: PUSH
53396: LD_INT 30
53398: PUSH
53399: LD_INT 31
53401: PUSH
53402: LD_INT 32
53404: PUSH
53405: LD_INT 34
53407: PUSH
53408: LD_INT 36
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 101
53446: PUSH
53447: LD_INT 102
53449: PUSH
53450: LD_INT 103
53452: PUSH
53453: LD_INT 104
53455: PUSH
53456: LD_INT 105
53458: PUSH
53459: LD_INT 106
53461: PUSH
53462: LD_INT 107
53464: PUSH
53465: LD_INT 108
53467: PUSH
53468: LD_INT 109
53470: PUSH
53471: LD_INT 110
53473: PUSH
53474: LD_INT 111
53476: PUSH
53477: LD_INT 112
53479: PUSH
53480: LD_INT 114
53482: PUSH
53483: LD_INT 116
53485: PUSH
53486: LD_INT 117
53488: PUSH
53489: LD_INT 118
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: ST_TO_ADDR
53514: GO 55197
53516: LD_INT 12
53518: DOUBLE
53519: EQUAL
53520: IFTRUE 53524
53522: GO 53744
53524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53525: LD_ADDR_VAR 0 2
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: LD_INT 4
53541: PUSH
53542: LD_INT 5
53544: PUSH
53545: LD_INT 6
53547: PUSH
53548: LD_INT 7
53550: PUSH
53551: LD_INT 8
53553: PUSH
53554: LD_INT 9
53556: PUSH
53557: LD_INT 10
53559: PUSH
53560: LD_INT 11
53562: PUSH
53563: LD_INT 12
53565: PUSH
53566: LD_INT 13
53568: PUSH
53569: LD_INT 14
53571: PUSH
53572: LD_INT 15
53574: PUSH
53575: LD_INT 16
53577: PUSH
53578: LD_INT 17
53580: PUSH
53581: LD_INT 18
53583: PUSH
53584: LD_INT 19
53586: PUSH
53587: LD_INT 20
53589: PUSH
53590: LD_INT 21
53592: PUSH
53593: LD_INT 22
53595: PUSH
53596: LD_INT 23
53598: PUSH
53599: LD_INT 24
53601: PUSH
53602: LD_INT 25
53604: PUSH
53605: LD_INT 26
53607: PUSH
53608: LD_INT 27
53610: PUSH
53611: LD_INT 28
53613: PUSH
53614: LD_INT 30
53616: PUSH
53617: LD_INT 31
53619: PUSH
53620: LD_INT 32
53622: PUSH
53623: LD_INT 33
53625: PUSH
53626: LD_INT 34
53628: PUSH
53629: LD_INT 36
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 101
53670: PUSH
53671: LD_INT 102
53673: PUSH
53674: LD_INT 103
53676: PUSH
53677: LD_INT 104
53679: PUSH
53680: LD_INT 105
53682: PUSH
53683: LD_INT 106
53685: PUSH
53686: LD_INT 107
53688: PUSH
53689: LD_INT 108
53691: PUSH
53692: LD_INT 109
53694: PUSH
53695: LD_INT 110
53697: PUSH
53698: LD_INT 111
53700: PUSH
53701: LD_INT 112
53703: PUSH
53704: LD_INT 113
53706: PUSH
53707: LD_INT 114
53709: PUSH
53710: LD_INT 116
53712: PUSH
53713: LD_INT 117
53715: PUSH
53716: LD_INT 118
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: ST_TO_ADDR
53742: GO 55197
53744: LD_INT 13
53746: DOUBLE
53747: EQUAL
53748: IFTRUE 53752
53750: GO 53960
53752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53753: LD_ADDR_VAR 0 2
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 3
53766: PUSH
53767: LD_INT 4
53769: PUSH
53770: LD_INT 5
53772: PUSH
53773: LD_INT 8
53775: PUSH
53776: LD_INT 9
53778: PUSH
53779: LD_INT 10
53781: PUSH
53782: LD_INT 11
53784: PUSH
53785: LD_INT 12
53787: PUSH
53788: LD_INT 14
53790: PUSH
53791: LD_INT 15
53793: PUSH
53794: LD_INT 16
53796: PUSH
53797: LD_INT 17
53799: PUSH
53800: LD_INT 18
53802: PUSH
53803: LD_INT 19
53805: PUSH
53806: LD_INT 20
53808: PUSH
53809: LD_INT 21
53811: PUSH
53812: LD_INT 22
53814: PUSH
53815: LD_INT 23
53817: PUSH
53818: LD_INT 24
53820: PUSH
53821: LD_INT 25
53823: PUSH
53824: LD_INT 26
53826: PUSH
53827: LD_INT 27
53829: PUSH
53830: LD_INT 28
53832: PUSH
53833: LD_INT 30
53835: PUSH
53836: LD_INT 31
53838: PUSH
53839: LD_INT 32
53841: PUSH
53842: LD_INT 33
53844: PUSH
53845: LD_INT 34
53847: PUSH
53848: LD_INT 36
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 101
53886: PUSH
53887: LD_INT 102
53889: PUSH
53890: LD_INT 103
53892: PUSH
53893: LD_INT 104
53895: PUSH
53896: LD_INT 105
53898: PUSH
53899: LD_INT 106
53901: PUSH
53902: LD_INT 107
53904: PUSH
53905: LD_INT 108
53907: PUSH
53908: LD_INT 109
53910: PUSH
53911: LD_INT 110
53913: PUSH
53914: LD_INT 111
53916: PUSH
53917: LD_INT 112
53919: PUSH
53920: LD_INT 113
53922: PUSH
53923: LD_INT 114
53925: PUSH
53926: LD_INT 116
53928: PUSH
53929: LD_INT 117
53931: PUSH
53932: LD_INT 118
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: ST_TO_ADDR
53958: GO 55197
53960: LD_INT 14
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53968
53966: GO 54192
53968: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53969: LD_ADDR_VAR 0 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 4
53985: PUSH
53986: LD_INT 5
53988: PUSH
53989: LD_INT 6
53991: PUSH
53992: LD_INT 7
53994: PUSH
53995: LD_INT 8
53997: PUSH
53998: LD_INT 9
54000: PUSH
54001: LD_INT 10
54003: PUSH
54004: LD_INT 11
54006: PUSH
54007: LD_INT 12
54009: PUSH
54010: LD_INT 13
54012: PUSH
54013: LD_INT 14
54015: PUSH
54016: LD_INT 15
54018: PUSH
54019: LD_INT 16
54021: PUSH
54022: LD_INT 17
54024: PUSH
54025: LD_INT 18
54027: PUSH
54028: LD_INT 19
54030: PUSH
54031: LD_INT 20
54033: PUSH
54034: LD_INT 21
54036: PUSH
54037: LD_INT 22
54039: PUSH
54040: LD_INT 23
54042: PUSH
54043: LD_INT 24
54045: PUSH
54046: LD_INT 25
54048: PUSH
54049: LD_INT 26
54051: PUSH
54052: LD_INT 27
54054: PUSH
54055: LD_INT 28
54057: PUSH
54058: LD_INT 29
54060: PUSH
54061: LD_INT 30
54063: PUSH
54064: LD_INT 31
54066: PUSH
54067: LD_INT 32
54069: PUSH
54070: LD_INT 33
54072: PUSH
54073: LD_INT 34
54075: PUSH
54076: LD_INT 36
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 101
54118: PUSH
54119: LD_INT 102
54121: PUSH
54122: LD_INT 103
54124: PUSH
54125: LD_INT 104
54127: PUSH
54128: LD_INT 105
54130: PUSH
54131: LD_INT 106
54133: PUSH
54134: LD_INT 107
54136: PUSH
54137: LD_INT 108
54139: PUSH
54140: LD_INT 109
54142: PUSH
54143: LD_INT 110
54145: PUSH
54146: LD_INT 111
54148: PUSH
54149: LD_INT 112
54151: PUSH
54152: LD_INT 113
54154: PUSH
54155: LD_INT 114
54157: PUSH
54158: LD_INT 116
54160: PUSH
54161: LD_INT 117
54163: PUSH
54164: LD_INT 118
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: ST_TO_ADDR
54190: GO 55197
54192: LD_INT 15
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54200
54198: GO 54424
54200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54201: LD_ADDR_VAR 0 2
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: LD_INT 5
54220: PUSH
54221: LD_INT 6
54223: PUSH
54224: LD_INT 7
54226: PUSH
54227: LD_INT 8
54229: PUSH
54230: LD_INT 9
54232: PUSH
54233: LD_INT 10
54235: PUSH
54236: LD_INT 11
54238: PUSH
54239: LD_INT 12
54241: PUSH
54242: LD_INT 13
54244: PUSH
54245: LD_INT 14
54247: PUSH
54248: LD_INT 15
54250: PUSH
54251: LD_INT 16
54253: PUSH
54254: LD_INT 17
54256: PUSH
54257: LD_INT 18
54259: PUSH
54260: LD_INT 19
54262: PUSH
54263: LD_INT 20
54265: PUSH
54266: LD_INT 21
54268: PUSH
54269: LD_INT 22
54271: PUSH
54272: LD_INT 23
54274: PUSH
54275: LD_INT 24
54277: PUSH
54278: LD_INT 25
54280: PUSH
54281: LD_INT 26
54283: PUSH
54284: LD_INT 27
54286: PUSH
54287: LD_INT 28
54289: PUSH
54290: LD_INT 29
54292: PUSH
54293: LD_INT 30
54295: PUSH
54296: LD_INT 31
54298: PUSH
54299: LD_INT 32
54301: PUSH
54302: LD_INT 33
54304: PUSH
54305: LD_INT 34
54307: PUSH
54308: LD_INT 36
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 101
54350: PUSH
54351: LD_INT 102
54353: PUSH
54354: LD_INT 103
54356: PUSH
54357: LD_INT 104
54359: PUSH
54360: LD_INT 105
54362: PUSH
54363: LD_INT 106
54365: PUSH
54366: LD_INT 107
54368: PUSH
54369: LD_INT 108
54371: PUSH
54372: LD_INT 109
54374: PUSH
54375: LD_INT 110
54377: PUSH
54378: LD_INT 111
54380: PUSH
54381: LD_INT 112
54383: PUSH
54384: LD_INT 113
54386: PUSH
54387: LD_INT 114
54389: PUSH
54390: LD_INT 116
54392: PUSH
54393: LD_INT 117
54395: PUSH
54396: LD_INT 118
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: ST_TO_ADDR
54422: GO 55197
54424: LD_INT 16
54426: DOUBLE
54427: EQUAL
54428: IFTRUE 54432
54430: GO 54568
54432: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54433: LD_ADDR_VAR 0 2
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 4
54443: PUSH
54444: LD_INT 5
54446: PUSH
54447: LD_INT 7
54449: PUSH
54450: LD_INT 11
54452: PUSH
54453: LD_INT 12
54455: PUSH
54456: LD_INT 15
54458: PUSH
54459: LD_INT 16
54461: PUSH
54462: LD_INT 20
54464: PUSH
54465: LD_INT 21
54467: PUSH
54468: LD_INT 22
54470: PUSH
54471: LD_INT 23
54473: PUSH
54474: LD_INT 25
54476: PUSH
54477: LD_INT 26
54479: PUSH
54480: LD_INT 30
54482: PUSH
54483: LD_INT 31
54485: PUSH
54486: LD_INT 32
54488: PUSH
54489: LD_INT 33
54491: PUSH
54492: LD_INT 34
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 101
54518: PUSH
54519: LD_INT 102
54521: PUSH
54522: LD_INT 103
54524: PUSH
54525: LD_INT 106
54527: PUSH
54528: LD_INT 108
54530: PUSH
54531: LD_INT 112
54533: PUSH
54534: LD_INT 113
54536: PUSH
54537: LD_INT 114
54539: PUSH
54540: LD_INT 116
54542: PUSH
54543: LD_INT 117
54545: PUSH
54546: LD_INT 118
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: ST_TO_ADDR
54566: GO 55197
54568: LD_INT 17
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 54800
54576: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54577: LD_ADDR_VAR 0 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 4
54593: PUSH
54594: LD_INT 5
54596: PUSH
54597: LD_INT 6
54599: PUSH
54600: LD_INT 7
54602: PUSH
54603: LD_INT 8
54605: PUSH
54606: LD_INT 9
54608: PUSH
54609: LD_INT 10
54611: PUSH
54612: LD_INT 11
54614: PUSH
54615: LD_INT 12
54617: PUSH
54618: LD_INT 13
54620: PUSH
54621: LD_INT 14
54623: PUSH
54624: LD_INT 15
54626: PUSH
54627: LD_INT 16
54629: PUSH
54630: LD_INT 17
54632: PUSH
54633: LD_INT 18
54635: PUSH
54636: LD_INT 19
54638: PUSH
54639: LD_INT 20
54641: PUSH
54642: LD_INT 21
54644: PUSH
54645: LD_INT 22
54647: PUSH
54648: LD_INT 23
54650: PUSH
54651: LD_INT 24
54653: PUSH
54654: LD_INT 25
54656: PUSH
54657: LD_INT 26
54659: PUSH
54660: LD_INT 27
54662: PUSH
54663: LD_INT 28
54665: PUSH
54666: LD_INT 29
54668: PUSH
54669: LD_INT 30
54671: PUSH
54672: LD_INT 31
54674: PUSH
54675: LD_INT 32
54677: PUSH
54678: LD_INT 33
54680: PUSH
54681: LD_INT 34
54683: PUSH
54684: LD_INT 36
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 101
54726: PUSH
54727: LD_INT 102
54729: PUSH
54730: LD_INT 103
54732: PUSH
54733: LD_INT 104
54735: PUSH
54736: LD_INT 105
54738: PUSH
54739: LD_INT 106
54741: PUSH
54742: LD_INT 107
54744: PUSH
54745: LD_INT 108
54747: PUSH
54748: LD_INT 109
54750: PUSH
54751: LD_INT 110
54753: PUSH
54754: LD_INT 111
54756: PUSH
54757: LD_INT 112
54759: PUSH
54760: LD_INT 113
54762: PUSH
54763: LD_INT 114
54765: PUSH
54766: LD_INT 116
54768: PUSH
54769: LD_INT 117
54771: PUSH
54772: LD_INT 118
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: ST_TO_ADDR
54798: GO 55197
54800: LD_INT 18
54802: DOUBLE
54803: EQUAL
54804: IFTRUE 54808
54806: GO 54956
54808: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54809: LD_ADDR_VAR 0 2
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: LD_INT 5
54822: PUSH
54823: LD_INT 7
54825: PUSH
54826: LD_INT 11
54828: PUSH
54829: LD_INT 12
54831: PUSH
54832: LD_INT 15
54834: PUSH
54835: LD_INT 16
54837: PUSH
54838: LD_INT 20
54840: PUSH
54841: LD_INT 21
54843: PUSH
54844: LD_INT 22
54846: PUSH
54847: LD_INT 23
54849: PUSH
54850: LD_INT 25
54852: PUSH
54853: LD_INT 26
54855: PUSH
54856: LD_INT 30
54858: PUSH
54859: LD_INT 31
54861: PUSH
54862: LD_INT 32
54864: PUSH
54865: LD_INT 33
54867: PUSH
54868: LD_INT 34
54870: PUSH
54871: LD_INT 35
54873: PUSH
54874: LD_INT 36
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 101
54902: PUSH
54903: LD_INT 102
54905: PUSH
54906: LD_INT 103
54908: PUSH
54909: LD_INT 106
54911: PUSH
54912: LD_INT 108
54914: PUSH
54915: LD_INT 112
54917: PUSH
54918: LD_INT 113
54920: PUSH
54921: LD_INT 114
54923: PUSH
54924: LD_INT 115
54926: PUSH
54927: LD_INT 116
54929: PUSH
54930: LD_INT 117
54932: PUSH
54933: LD_INT 118
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: ST_TO_ADDR
54954: GO 55197
54956: LD_INT 19
54958: DOUBLE
54959: EQUAL
54960: IFTRUE 54964
54962: GO 55196
54964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54965: LD_ADDR_VAR 0 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: LD_INT 6
54987: PUSH
54988: LD_INT 7
54990: PUSH
54991: LD_INT 8
54993: PUSH
54994: LD_INT 9
54996: PUSH
54997: LD_INT 10
54999: PUSH
55000: LD_INT 11
55002: PUSH
55003: LD_INT 12
55005: PUSH
55006: LD_INT 13
55008: PUSH
55009: LD_INT 14
55011: PUSH
55012: LD_INT 15
55014: PUSH
55015: LD_INT 16
55017: PUSH
55018: LD_INT 17
55020: PUSH
55021: LD_INT 18
55023: PUSH
55024: LD_INT 19
55026: PUSH
55027: LD_INT 20
55029: PUSH
55030: LD_INT 21
55032: PUSH
55033: LD_INT 22
55035: PUSH
55036: LD_INT 23
55038: PUSH
55039: LD_INT 24
55041: PUSH
55042: LD_INT 25
55044: PUSH
55045: LD_INT 26
55047: PUSH
55048: LD_INT 27
55050: PUSH
55051: LD_INT 28
55053: PUSH
55054: LD_INT 29
55056: PUSH
55057: LD_INT 30
55059: PUSH
55060: LD_INT 31
55062: PUSH
55063: LD_INT 32
55065: PUSH
55066: LD_INT 33
55068: PUSH
55069: LD_INT 34
55071: PUSH
55072: LD_INT 35
55074: PUSH
55075: LD_INT 36
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 101
55118: PUSH
55119: LD_INT 102
55121: PUSH
55122: LD_INT 103
55124: PUSH
55125: LD_INT 104
55127: PUSH
55128: LD_INT 105
55130: PUSH
55131: LD_INT 106
55133: PUSH
55134: LD_INT 107
55136: PUSH
55137: LD_INT 108
55139: PUSH
55140: LD_INT 109
55142: PUSH
55143: LD_INT 110
55145: PUSH
55146: LD_INT 111
55148: PUSH
55149: LD_INT 112
55151: PUSH
55152: LD_INT 113
55154: PUSH
55155: LD_INT 114
55157: PUSH
55158: LD_INT 115
55160: PUSH
55161: LD_INT 116
55163: PUSH
55164: LD_INT 117
55166: PUSH
55167: LD_INT 118
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: ST_TO_ADDR
55194: GO 55197
55196: POP
// end else
55197: GO 55428
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55199: LD_ADDR_VAR 0 2
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: LD_INT 5
55218: PUSH
55219: LD_INT 6
55221: PUSH
55222: LD_INT 7
55224: PUSH
55225: LD_INT 8
55227: PUSH
55228: LD_INT 9
55230: PUSH
55231: LD_INT 10
55233: PUSH
55234: LD_INT 11
55236: PUSH
55237: LD_INT 12
55239: PUSH
55240: LD_INT 13
55242: PUSH
55243: LD_INT 14
55245: PUSH
55246: LD_INT 15
55248: PUSH
55249: LD_INT 16
55251: PUSH
55252: LD_INT 17
55254: PUSH
55255: LD_INT 18
55257: PUSH
55258: LD_INT 19
55260: PUSH
55261: LD_INT 20
55263: PUSH
55264: LD_INT 21
55266: PUSH
55267: LD_INT 22
55269: PUSH
55270: LD_INT 23
55272: PUSH
55273: LD_INT 24
55275: PUSH
55276: LD_INT 25
55278: PUSH
55279: LD_INT 26
55281: PUSH
55282: LD_INT 27
55284: PUSH
55285: LD_INT 28
55287: PUSH
55288: LD_INT 29
55290: PUSH
55291: LD_INT 30
55293: PUSH
55294: LD_INT 31
55296: PUSH
55297: LD_INT 32
55299: PUSH
55300: LD_INT 33
55302: PUSH
55303: LD_INT 34
55305: PUSH
55306: LD_INT 35
55308: PUSH
55309: LD_INT 36
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 101
55352: PUSH
55353: LD_INT 102
55355: PUSH
55356: LD_INT 103
55358: PUSH
55359: LD_INT 104
55361: PUSH
55362: LD_INT 105
55364: PUSH
55365: LD_INT 106
55367: PUSH
55368: LD_INT 107
55370: PUSH
55371: LD_INT 108
55373: PUSH
55374: LD_INT 109
55376: PUSH
55377: LD_INT 110
55379: PUSH
55380: LD_INT 111
55382: PUSH
55383: LD_INT 112
55385: PUSH
55386: LD_INT 113
55388: PUSH
55389: LD_INT 114
55391: PUSH
55392: LD_INT 115
55394: PUSH
55395: LD_INT 116
55397: PUSH
55398: LD_INT 117
55400: PUSH
55401: LD_INT 118
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// if result then
55428: LD_VAR 0 2
55432: IFFALSE 56218
// begin normal :=  ;
55434: LD_ADDR_VAR 0 5
55438: PUSH
55439: LD_STRING 
55441: ST_TO_ADDR
// hardcore :=  ;
55442: LD_ADDR_VAR 0 6
55446: PUSH
55447: LD_STRING 
55449: ST_TO_ADDR
// active :=  ;
55450: LD_ADDR_VAR 0 7
55454: PUSH
55455: LD_STRING 
55457: ST_TO_ADDR
// for i = 1 to normalCounter do
55458: LD_ADDR_VAR 0 8
55462: PUSH
55463: DOUBLE
55464: LD_INT 1
55466: DEC
55467: ST_TO_ADDR
55468: LD_EXP 30
55472: PUSH
55473: FOR_TO
55474: IFFALSE 55575
// begin tmp := 0 ;
55476: LD_ADDR_VAR 0 3
55480: PUSH
55481: LD_STRING 0
55483: ST_TO_ADDR
// if result [ 1 ] then
55484: LD_VAR 0 2
55488: PUSH
55489: LD_INT 1
55491: ARRAY
55492: IFFALSE 55557
// if result [ 1 ] [ 1 ] = i then
55494: LD_VAR 0 2
55498: PUSH
55499: LD_INT 1
55501: ARRAY
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PUSH
55507: LD_VAR 0 8
55511: EQUAL
55512: IFFALSE 55557
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55514: LD_ADDR_VAR 0 2
55518: PUSH
55519: LD_VAR 0 2
55523: PPUSH
55524: LD_INT 1
55526: PPUSH
55527: LD_VAR 0 2
55531: PUSH
55532: LD_INT 1
55534: ARRAY
55535: PPUSH
55536: LD_INT 1
55538: PPUSH
55539: CALL_OW 3
55543: PPUSH
55544: CALL_OW 1
55548: ST_TO_ADDR
// tmp := 1 ;
55549: LD_ADDR_VAR 0 3
55553: PUSH
55554: LD_STRING 1
55556: ST_TO_ADDR
// end ; normal := normal & tmp ;
55557: LD_ADDR_VAR 0 5
55561: PUSH
55562: LD_VAR 0 5
55566: PUSH
55567: LD_VAR 0 3
55571: STR
55572: ST_TO_ADDR
// end ;
55573: GO 55473
55575: POP
55576: POP
// for i = 1 to hardcoreCounter do
55577: LD_ADDR_VAR 0 8
55581: PUSH
55582: DOUBLE
55583: LD_INT 1
55585: DEC
55586: ST_TO_ADDR
55587: LD_EXP 31
55591: PUSH
55592: FOR_TO
55593: IFFALSE 55698
// begin tmp := 0 ;
55595: LD_ADDR_VAR 0 3
55599: PUSH
55600: LD_STRING 0
55602: ST_TO_ADDR
// if result [ 2 ] then
55603: LD_VAR 0 2
55607: PUSH
55608: LD_INT 2
55610: ARRAY
55611: IFFALSE 55680
// if result [ 2 ] [ 1 ] = 100 + i then
55613: LD_VAR 0 2
55617: PUSH
55618: LD_INT 2
55620: ARRAY
55621: PUSH
55622: LD_INT 1
55624: ARRAY
55625: PUSH
55626: LD_INT 100
55628: PUSH
55629: LD_VAR 0 8
55633: PLUS
55634: EQUAL
55635: IFFALSE 55680
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55637: LD_ADDR_VAR 0 2
55641: PUSH
55642: LD_VAR 0 2
55646: PPUSH
55647: LD_INT 2
55649: PPUSH
55650: LD_VAR 0 2
55654: PUSH
55655: LD_INT 2
55657: ARRAY
55658: PPUSH
55659: LD_INT 1
55661: PPUSH
55662: CALL_OW 3
55666: PPUSH
55667: CALL_OW 1
55671: ST_TO_ADDR
// tmp := 1 ;
55672: LD_ADDR_VAR 0 3
55676: PUSH
55677: LD_STRING 1
55679: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55680: LD_ADDR_VAR 0 6
55684: PUSH
55685: LD_VAR 0 6
55689: PUSH
55690: LD_VAR 0 3
55694: STR
55695: ST_TO_ADDR
// end ;
55696: GO 55592
55698: POP
55699: POP
// if isGameLoad then
55700: LD_VAR 0 1
55704: IFFALSE 56179
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55706: LD_ADDR_VAR 0 4
55710: PUSH
55711: LD_EXP 34
55715: PUSH
55716: LD_EXP 33
55720: PUSH
55721: LD_EXP 35
55725: PUSH
55726: LD_EXP 32
55730: PUSH
55731: LD_EXP 36
55735: PUSH
55736: LD_EXP 37
55740: PUSH
55741: LD_EXP 38
55745: PUSH
55746: LD_EXP 39
55750: PUSH
55751: LD_EXP 40
55755: PUSH
55756: LD_EXP 41
55760: PUSH
55761: LD_EXP 42
55765: PUSH
55766: LD_EXP 43
55770: PUSH
55771: LD_EXP 44
55775: PUSH
55776: LD_EXP 45
55780: PUSH
55781: LD_EXP 53
55785: PUSH
55786: LD_EXP 54
55790: PUSH
55791: LD_EXP 55
55795: PUSH
55796: LD_EXP 56
55800: PUSH
55801: LD_EXP 58
55805: PUSH
55806: LD_EXP 59
55810: PUSH
55811: LD_EXP 60
55815: PUSH
55816: LD_EXP 63
55820: PUSH
55821: LD_EXP 65
55825: PUSH
55826: LD_EXP 66
55830: PUSH
55831: LD_EXP 67
55835: PUSH
55836: LD_EXP 69
55840: PUSH
55841: LD_EXP 70
55845: PUSH
55846: LD_EXP 73
55850: PUSH
55851: LD_EXP 74
55855: PUSH
55856: LD_EXP 75
55860: PUSH
55861: LD_EXP 76
55865: PUSH
55866: LD_EXP 77
55870: PUSH
55871: LD_EXP 78
55875: PUSH
55876: LD_EXP 79
55880: PUSH
55881: LD_EXP 80
55885: PUSH
55886: LD_EXP 81
55890: PUSH
55891: LD_EXP 46
55895: PUSH
55896: LD_EXP 47
55900: PUSH
55901: LD_EXP 50
55905: PUSH
55906: LD_EXP 51
55910: PUSH
55911: LD_EXP 52
55915: PUSH
55916: LD_EXP 48
55920: PUSH
55921: LD_EXP 49
55925: PUSH
55926: LD_EXP 57
55930: PUSH
55931: LD_EXP 61
55935: PUSH
55936: LD_EXP 62
55940: PUSH
55941: LD_EXP 64
55945: PUSH
55946: LD_EXP 68
55950: PUSH
55951: LD_EXP 71
55955: PUSH
55956: LD_EXP 72
55960: PUSH
55961: LD_EXP 82
55965: PUSH
55966: LD_EXP 83
55970: PUSH
55971: LD_EXP 84
55975: PUSH
55976: LD_EXP 85
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// tmp :=  ;
56037: LD_ADDR_VAR 0 3
56041: PUSH
56042: LD_STRING 
56044: ST_TO_ADDR
// for i = 1 to normalCounter do
56045: LD_ADDR_VAR 0 8
56049: PUSH
56050: DOUBLE
56051: LD_INT 1
56053: DEC
56054: ST_TO_ADDR
56055: LD_EXP 30
56059: PUSH
56060: FOR_TO
56061: IFFALSE 56097
// begin if flags [ i ] then
56063: LD_VAR 0 4
56067: PUSH
56068: LD_VAR 0 8
56072: ARRAY
56073: IFFALSE 56095
// tmp := tmp & i & ; ;
56075: LD_ADDR_VAR 0 3
56079: PUSH
56080: LD_VAR 0 3
56084: PUSH
56085: LD_VAR 0 8
56089: STR
56090: PUSH
56091: LD_STRING ;
56093: STR
56094: ST_TO_ADDR
// end ;
56095: GO 56060
56097: POP
56098: POP
// for i = 1 to hardcoreCounter do
56099: LD_ADDR_VAR 0 8
56103: PUSH
56104: DOUBLE
56105: LD_INT 1
56107: DEC
56108: ST_TO_ADDR
56109: LD_EXP 31
56113: PUSH
56114: FOR_TO
56115: IFFALSE 56161
// begin if flags [ normalCounter + i ] then
56117: LD_VAR 0 4
56121: PUSH
56122: LD_EXP 30
56126: PUSH
56127: LD_VAR 0 8
56131: PLUS
56132: ARRAY
56133: IFFALSE 56159
// tmp := tmp & ( 100 + i ) & ; ;
56135: LD_ADDR_VAR 0 3
56139: PUSH
56140: LD_VAR 0 3
56144: PUSH
56145: LD_INT 100
56147: PUSH
56148: LD_VAR 0 8
56152: PLUS
56153: STR
56154: PUSH
56155: LD_STRING ;
56157: STR
56158: ST_TO_ADDR
// end ;
56159: GO 56114
56161: POP
56162: POP
// if tmp then
56163: LD_VAR 0 3
56167: IFFALSE 56179
// active := tmp ;
56169: LD_ADDR_VAR 0 7
56173: PUSH
56174: LD_VAR 0 3
56178: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56179: LD_STRING getStreamItemsFromMission("
56181: PUSH
56182: LD_VAR 0 5
56186: STR
56187: PUSH
56188: LD_STRING ","
56190: STR
56191: PUSH
56192: LD_VAR 0 6
56196: STR
56197: PUSH
56198: LD_STRING ","
56200: STR
56201: PUSH
56202: LD_VAR 0 7
56206: STR
56207: PUSH
56208: LD_STRING ")
56210: STR
56211: PPUSH
56212: CALL_OW 559
// end else
56216: GO 56225
// ToLua ( getStreamItemsFromMission("","","") ) ;
56218: LD_STRING getStreamItemsFromMission("","","")
56220: PPUSH
56221: CALL_OW 559
// end ;
56225: LD_VAR 0 2
56229: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56230: LD_EXP 29
56234: PUSH
56235: LD_EXP 34
56239: AND
56240: IFFALSE 56364
56242: GO 56244
56244: DISABLE
56245: LD_INT 0
56247: PPUSH
56248: PPUSH
// begin enable ;
56249: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56250: LD_ADDR_VAR 0 2
56254: PUSH
56255: LD_INT 22
56257: PUSH
56258: LD_OWVAR 2
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 34
56272: PUSH
56273: LD_INT 7
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 34
56282: PUSH
56283: LD_INT 45
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 34
56292: PUSH
56293: LD_INT 28
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 34
56302: PUSH
56303: LD_INT 47
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PPUSH
56321: CALL_OW 69
56325: ST_TO_ADDR
// if not tmp then
56326: LD_VAR 0 2
56330: NOT
56331: IFFALSE 56335
// exit ;
56333: GO 56364
// for i in tmp do
56335: LD_ADDR_VAR 0 1
56339: PUSH
56340: LD_VAR 0 2
56344: PUSH
56345: FOR_IN
56346: IFFALSE 56362
// begin SetLives ( i , 0 ) ;
56348: LD_VAR 0 1
56352: PPUSH
56353: LD_INT 0
56355: PPUSH
56356: CALL_OW 234
// end ;
56360: GO 56345
56362: POP
56363: POP
// end ;
56364: PPOPN 2
56366: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56367: LD_EXP 29
56371: PUSH
56372: LD_EXP 35
56376: AND
56377: IFFALSE 56461
56379: GO 56381
56381: DISABLE
56382: LD_INT 0
56384: PPUSH
56385: PPUSH
// begin enable ;
56386: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56387: LD_ADDR_VAR 0 2
56391: PUSH
56392: LD_INT 22
56394: PUSH
56395: LD_OWVAR 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 32
56406: PUSH
56407: LD_INT 3
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PPUSH
56418: CALL_OW 69
56422: ST_TO_ADDR
// if not tmp then
56423: LD_VAR 0 2
56427: NOT
56428: IFFALSE 56432
// exit ;
56430: GO 56461
// for i in tmp do
56432: LD_ADDR_VAR 0 1
56436: PUSH
56437: LD_VAR 0 2
56441: PUSH
56442: FOR_IN
56443: IFFALSE 56459
// begin SetLives ( i , 0 ) ;
56445: LD_VAR 0 1
56449: PPUSH
56450: LD_INT 0
56452: PPUSH
56453: CALL_OW 234
// end ;
56457: GO 56442
56459: POP
56460: POP
// end ;
56461: PPOPN 2
56463: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56464: LD_EXP 29
56468: PUSH
56469: LD_EXP 32
56473: AND
56474: IFFALSE 56567
56476: GO 56478
56478: DISABLE
56479: LD_INT 0
56481: PPUSH
// begin enable ;
56482: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56483: LD_ADDR_VAR 0 1
56487: PUSH
56488: LD_INT 22
56490: PUSH
56491: LD_OWVAR 2
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 25
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 25
56515: PUSH
56516: LD_INT 9
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 25
56525: PUSH
56526: LD_INT 8
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL_OW 69
56547: PUSH
56548: FOR_IN
56549: IFFALSE 56565
// begin SetClass ( i , 1 ) ;
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_INT 1
56558: PPUSH
56559: CALL_OW 336
// end ;
56563: GO 56548
56565: POP
56566: POP
// end ;
56567: PPOPN 1
56569: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56570: LD_EXP 29
56574: PUSH
56575: LD_EXP 33
56579: AND
56580: PUSH
56581: LD_OWVAR 65
56585: PUSH
56586: LD_INT 7
56588: LESS
56589: AND
56590: IFFALSE 56604
56592: GO 56594
56594: DISABLE
// begin enable ;
56595: ENABLE
// game_speed := 7 ;
56596: LD_ADDR_OWVAR 65
56600: PUSH
56601: LD_INT 7
56603: ST_TO_ADDR
// end ;
56604: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56605: LD_EXP 29
56609: PUSH
56610: LD_EXP 36
56614: AND
56615: IFFALSE 56817
56617: GO 56619
56619: DISABLE
56620: LD_INT 0
56622: PPUSH
56623: PPUSH
56624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56625: LD_ADDR_VAR 0 3
56629: PUSH
56630: LD_INT 81
56632: PUSH
56633: LD_OWVAR 2
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 21
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PPUSH
56656: CALL_OW 69
56660: ST_TO_ADDR
// if not tmp then
56661: LD_VAR 0 3
56665: NOT
56666: IFFALSE 56670
// exit ;
56668: GO 56817
// if tmp > 5 then
56670: LD_VAR 0 3
56674: PUSH
56675: LD_INT 5
56677: GREATER
56678: IFFALSE 56690
// k := 5 else
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_INT 5
56687: ST_TO_ADDR
56688: GO 56700
// k := tmp ;
56690: LD_ADDR_VAR 0 2
56694: PUSH
56695: LD_VAR 0 3
56699: ST_TO_ADDR
// for i := 1 to k do
56700: LD_ADDR_VAR 0 1
56704: PUSH
56705: DOUBLE
56706: LD_INT 1
56708: DEC
56709: ST_TO_ADDR
56710: LD_VAR 0 2
56714: PUSH
56715: FOR_TO
56716: IFFALSE 56815
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56718: LD_VAR 0 3
56722: PUSH
56723: LD_VAR 0 1
56727: ARRAY
56728: PPUSH
56729: LD_VAR 0 1
56733: PUSH
56734: LD_INT 4
56736: MOD
56737: PUSH
56738: LD_INT 1
56740: PLUS
56741: PPUSH
56742: CALL_OW 259
56746: PUSH
56747: LD_INT 10
56749: LESS
56750: IFFALSE 56813
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56752: LD_VAR 0 3
56756: PUSH
56757: LD_VAR 0 1
56761: ARRAY
56762: PPUSH
56763: LD_VAR 0 1
56767: PUSH
56768: LD_INT 4
56770: MOD
56771: PUSH
56772: LD_INT 1
56774: PLUS
56775: PPUSH
56776: LD_VAR 0 3
56780: PUSH
56781: LD_VAR 0 1
56785: ARRAY
56786: PPUSH
56787: LD_VAR 0 1
56791: PUSH
56792: LD_INT 4
56794: MOD
56795: PUSH
56796: LD_INT 1
56798: PLUS
56799: PPUSH
56800: CALL_OW 259
56804: PUSH
56805: LD_INT 1
56807: PLUS
56808: PPUSH
56809: CALL_OW 237
56813: GO 56715
56815: POP
56816: POP
// end ;
56817: PPOPN 3
56819: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56820: LD_EXP 29
56824: PUSH
56825: LD_EXP 37
56829: AND
56830: IFFALSE 56850
56832: GO 56834
56834: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56835: LD_INT 4
56837: PPUSH
56838: LD_OWVAR 2
56842: PPUSH
56843: LD_INT 0
56845: PPUSH
56846: CALL_OW 324
56850: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56851: LD_EXP 29
56855: PUSH
56856: LD_EXP 66
56860: AND
56861: IFFALSE 56881
56863: GO 56865
56865: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56866: LD_INT 19
56868: PPUSH
56869: LD_OWVAR 2
56873: PPUSH
56874: LD_INT 0
56876: PPUSH
56877: CALL_OW 324
56881: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56882: LD_EXP 29
56886: PUSH
56887: LD_EXP 38
56891: AND
56892: IFFALSE 56994
56894: GO 56896
56896: DISABLE
56897: LD_INT 0
56899: PPUSH
56900: PPUSH
// begin enable ;
56901: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56902: LD_ADDR_VAR 0 2
56906: PUSH
56907: LD_INT 22
56909: PUSH
56910: LD_OWVAR 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 34
56924: PUSH
56925: LD_INT 11
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 34
56934: PUSH
56935: LD_INT 30
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PPUSH
56951: CALL_OW 69
56955: ST_TO_ADDR
// if not tmp then
56956: LD_VAR 0 2
56960: NOT
56961: IFFALSE 56965
// exit ;
56963: GO 56994
// for i in tmp do
56965: LD_ADDR_VAR 0 1
56969: PUSH
56970: LD_VAR 0 2
56974: PUSH
56975: FOR_IN
56976: IFFALSE 56992
// begin SetLives ( i , 0 ) ;
56978: LD_VAR 0 1
56982: PPUSH
56983: LD_INT 0
56985: PPUSH
56986: CALL_OW 234
// end ;
56990: GO 56975
56992: POP
56993: POP
// end ;
56994: PPOPN 2
56996: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56997: LD_EXP 29
57001: PUSH
57002: LD_EXP 39
57006: AND
57007: IFFALSE 57027
57009: GO 57011
57011: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57012: LD_INT 32
57014: PPUSH
57015: LD_OWVAR 2
57019: PPUSH
57020: LD_INT 0
57022: PPUSH
57023: CALL_OW 324
57027: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57028: LD_EXP 29
57032: PUSH
57033: LD_EXP 40
57037: AND
57038: IFFALSE 57219
57040: GO 57042
57042: DISABLE
57043: LD_INT 0
57045: PPUSH
57046: PPUSH
57047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57048: LD_ADDR_VAR 0 2
57052: PUSH
57053: LD_INT 22
57055: PUSH
57056: LD_OWVAR 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 33
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PPUSH
57079: CALL_OW 69
57083: ST_TO_ADDR
// if not tmp then
57084: LD_VAR 0 2
57088: NOT
57089: IFFALSE 57093
// exit ;
57091: GO 57219
// side := 0 ;
57093: LD_ADDR_VAR 0 3
57097: PUSH
57098: LD_INT 0
57100: ST_TO_ADDR
// for i := 1 to 8 do
57101: LD_ADDR_VAR 0 1
57105: PUSH
57106: DOUBLE
57107: LD_INT 1
57109: DEC
57110: ST_TO_ADDR
57111: LD_INT 8
57113: PUSH
57114: FOR_TO
57115: IFFALSE 57163
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57117: LD_OWVAR 2
57121: PUSH
57122: LD_VAR 0 1
57126: NONEQUAL
57127: PUSH
57128: LD_OWVAR 2
57132: PPUSH
57133: LD_VAR 0 1
57137: PPUSH
57138: CALL_OW 81
57142: PUSH
57143: LD_INT 2
57145: EQUAL
57146: AND
57147: IFFALSE 57161
// begin side := i ;
57149: LD_ADDR_VAR 0 3
57153: PUSH
57154: LD_VAR 0 1
57158: ST_TO_ADDR
// break ;
57159: GO 57163
// end ;
57161: GO 57114
57163: POP
57164: POP
// if not side then
57165: LD_VAR 0 3
57169: NOT
57170: IFFALSE 57174
// exit ;
57172: GO 57219
// for i := 1 to tmp do
57174: LD_ADDR_VAR 0 1
57178: PUSH
57179: DOUBLE
57180: LD_INT 1
57182: DEC
57183: ST_TO_ADDR
57184: LD_VAR 0 2
57188: PUSH
57189: FOR_TO
57190: IFFALSE 57217
// if Prob ( 60 ) then
57192: LD_INT 60
57194: PPUSH
57195: CALL_OW 13
57199: IFFALSE 57215
// SetSide ( i , side ) ;
57201: LD_VAR 0 1
57205: PPUSH
57206: LD_VAR 0 3
57210: PPUSH
57211: CALL_OW 235
57215: GO 57189
57217: POP
57218: POP
// end ;
57219: PPOPN 3
57221: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57222: LD_EXP 29
57226: PUSH
57227: LD_EXP 42
57231: AND
57232: IFFALSE 57351
57234: GO 57236
57236: DISABLE
57237: LD_INT 0
57239: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57240: LD_ADDR_VAR 0 1
57244: PUSH
57245: LD_INT 22
57247: PUSH
57248: LD_OWVAR 2
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 21
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 23
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: PPUSH
57289: CALL_OW 69
57293: PUSH
57294: FOR_IN
57295: IFFALSE 57349
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57297: LD_VAR 0 1
57301: PPUSH
57302: CALL_OW 257
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: LD_INT 2
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 4
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: IN
57325: IFFALSE 57347
// SetClass ( un , rand ( 1 , 4 ) ) ;
57327: LD_VAR 0 1
57331: PPUSH
57332: LD_INT 1
57334: PPUSH
57335: LD_INT 4
57337: PPUSH
57338: CALL_OW 12
57342: PPUSH
57343: CALL_OW 336
57347: GO 57294
57349: POP
57350: POP
// end ;
57351: PPOPN 1
57353: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57354: LD_EXP 29
57358: PUSH
57359: LD_EXP 41
57363: AND
57364: IFFALSE 57443
57366: GO 57368
57368: DISABLE
57369: LD_INT 0
57371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57372: LD_ADDR_VAR 0 1
57376: PUSH
57377: LD_INT 22
57379: PUSH
57380: LD_OWVAR 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 21
57391: PUSH
57392: LD_INT 3
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PPUSH
57403: CALL_OW 69
57407: ST_TO_ADDR
// if not tmp then
57408: LD_VAR 0 1
57412: NOT
57413: IFFALSE 57417
// exit ;
57415: GO 57443
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57417: LD_VAR 0 1
57421: PUSH
57422: LD_INT 1
57424: PPUSH
57425: LD_VAR 0 1
57429: PPUSH
57430: CALL_OW 12
57434: ARRAY
57435: PPUSH
57436: LD_INT 100
57438: PPUSH
57439: CALL_OW 234
// end ;
57443: PPOPN 1
57445: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57446: LD_EXP 29
57450: PUSH
57451: LD_EXP 43
57455: AND
57456: IFFALSE 57554
57458: GO 57460
57460: DISABLE
57461: LD_INT 0
57463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57464: LD_ADDR_VAR 0 1
57468: PUSH
57469: LD_INT 22
57471: PUSH
57472: LD_OWVAR 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 21
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PPUSH
57495: CALL_OW 69
57499: ST_TO_ADDR
// if not tmp then
57500: LD_VAR 0 1
57504: NOT
57505: IFFALSE 57509
// exit ;
57507: GO 57554
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57509: LD_VAR 0 1
57513: PUSH
57514: LD_INT 1
57516: PPUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: CALL_OW 12
57526: ARRAY
57527: PPUSH
57528: LD_INT 1
57530: PPUSH
57531: LD_INT 4
57533: PPUSH
57534: CALL_OW 12
57538: PPUSH
57539: LD_INT 3000
57541: PPUSH
57542: LD_INT 9000
57544: PPUSH
57545: CALL_OW 12
57549: PPUSH
57550: CALL_OW 492
// end ;
57554: PPOPN 1
57556: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57557: LD_EXP 29
57561: PUSH
57562: LD_EXP 44
57566: AND
57567: IFFALSE 57587
57569: GO 57571
57571: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57572: LD_INT 1
57574: PPUSH
57575: LD_OWVAR 2
57579: PPUSH
57580: LD_INT 0
57582: PPUSH
57583: CALL_OW 324
57587: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57588: LD_EXP 29
57592: PUSH
57593: LD_EXP 45
57597: AND
57598: IFFALSE 57681
57600: GO 57602
57602: DISABLE
57603: LD_INT 0
57605: PPUSH
57606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57607: LD_ADDR_VAR 0 2
57611: PUSH
57612: LD_INT 22
57614: PUSH
57615: LD_OWVAR 2
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 21
57626: PUSH
57627: LD_INT 3
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PPUSH
57638: CALL_OW 69
57642: ST_TO_ADDR
// if not tmp then
57643: LD_VAR 0 2
57647: NOT
57648: IFFALSE 57652
// exit ;
57650: GO 57681
// for i in tmp do
57652: LD_ADDR_VAR 0 1
57656: PUSH
57657: LD_VAR 0 2
57661: PUSH
57662: FOR_IN
57663: IFFALSE 57679
// SetBLevel ( i , 10 ) ;
57665: LD_VAR 0 1
57669: PPUSH
57670: LD_INT 10
57672: PPUSH
57673: CALL_OW 241
57677: GO 57662
57679: POP
57680: POP
// end ;
57681: PPOPN 2
57683: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57684: LD_EXP 29
57688: PUSH
57689: LD_EXP 46
57693: AND
57694: IFFALSE 57805
57696: GO 57698
57698: DISABLE
57699: LD_INT 0
57701: PPUSH
57702: PPUSH
57703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57704: LD_ADDR_VAR 0 3
57708: PUSH
57709: LD_INT 22
57711: PUSH
57712: LD_OWVAR 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 25
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PPUSH
57735: CALL_OW 69
57739: ST_TO_ADDR
// if not tmp then
57740: LD_VAR 0 3
57744: NOT
57745: IFFALSE 57749
// exit ;
57747: GO 57805
// un := tmp [ rand ( 1 , tmp ) ] ;
57749: LD_ADDR_VAR 0 2
57753: PUSH
57754: LD_VAR 0 3
57758: PUSH
57759: LD_INT 1
57761: PPUSH
57762: LD_VAR 0 3
57766: PPUSH
57767: CALL_OW 12
57771: ARRAY
57772: ST_TO_ADDR
// if Crawls ( un ) then
57773: LD_VAR 0 2
57777: PPUSH
57778: CALL_OW 318
57782: IFFALSE 57793
// ComWalk ( un ) ;
57784: LD_VAR 0 2
57788: PPUSH
57789: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57793: LD_VAR 0 2
57797: PPUSH
57798: LD_INT 5
57800: PPUSH
57801: CALL_OW 336
// end ;
57805: PPOPN 3
57807: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57808: LD_EXP 29
57812: PUSH
57813: LD_EXP 47
57817: AND
57818: PUSH
57819: LD_OWVAR 67
57823: PUSH
57824: LD_INT 4
57826: LESS
57827: AND
57828: IFFALSE 57847
57830: GO 57832
57832: DISABLE
// begin Difficulty := Difficulty + 1 ;
57833: LD_ADDR_OWVAR 67
57837: PUSH
57838: LD_OWVAR 67
57842: PUSH
57843: LD_INT 1
57845: PLUS
57846: ST_TO_ADDR
// end ;
57847: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57848: LD_EXP 29
57852: PUSH
57853: LD_EXP 48
57857: AND
57858: IFFALSE 57961
57860: GO 57862
57862: DISABLE
57863: LD_INT 0
57865: PPUSH
// begin for i := 1 to 5 do
57866: LD_ADDR_VAR 0 1
57870: PUSH
57871: DOUBLE
57872: LD_INT 1
57874: DEC
57875: ST_TO_ADDR
57876: LD_INT 5
57878: PUSH
57879: FOR_TO
57880: IFFALSE 57959
// begin uc_nation := nation_nature ;
57882: LD_ADDR_OWVAR 21
57886: PUSH
57887: LD_INT 0
57889: ST_TO_ADDR
// uc_side := 0 ;
57890: LD_ADDR_OWVAR 20
57894: PUSH
57895: LD_INT 0
57897: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57898: LD_ADDR_OWVAR 29
57902: PUSH
57903: LD_INT 12
57905: PUSH
57906: LD_INT 12
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: ST_TO_ADDR
// hc_agressivity := 20 ;
57913: LD_ADDR_OWVAR 35
57917: PUSH
57918: LD_INT 20
57920: ST_TO_ADDR
// hc_class := class_tiger ;
57921: LD_ADDR_OWVAR 28
57925: PUSH
57926: LD_INT 14
57928: ST_TO_ADDR
// hc_gallery :=  ;
57929: LD_ADDR_OWVAR 33
57933: PUSH
57934: LD_STRING 
57936: ST_TO_ADDR
// hc_name :=  ;
57937: LD_ADDR_OWVAR 26
57941: PUSH
57942: LD_STRING 
57944: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57945: CALL_OW 44
57949: PPUSH
57950: LD_INT 0
57952: PPUSH
57953: CALL_OW 51
// end ;
57957: GO 57879
57959: POP
57960: POP
// end ;
57961: PPOPN 1
57963: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57964: LD_EXP 29
57968: PUSH
57969: LD_EXP 49
57973: AND
57974: IFFALSE 57983
57976: GO 57978
57978: DISABLE
// StreamSibBomb ;
57979: CALL 57984 0 0
57983: END
// export function StreamSibBomb ; var i , x , y ; begin
57984: LD_INT 0
57986: PPUSH
57987: PPUSH
57988: PPUSH
57989: PPUSH
// result := false ;
57990: LD_ADDR_VAR 0 1
57994: PUSH
57995: LD_INT 0
57997: ST_TO_ADDR
// for i := 1 to 16 do
57998: LD_ADDR_VAR 0 2
58002: PUSH
58003: DOUBLE
58004: LD_INT 1
58006: DEC
58007: ST_TO_ADDR
58008: LD_INT 16
58010: PUSH
58011: FOR_TO
58012: IFFALSE 58211
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58014: LD_ADDR_VAR 0 3
58018: PUSH
58019: LD_INT 10
58021: PUSH
58022: LD_INT 20
58024: PUSH
58025: LD_INT 30
58027: PUSH
58028: LD_INT 40
58030: PUSH
58031: LD_INT 50
58033: PUSH
58034: LD_INT 60
58036: PUSH
58037: LD_INT 70
58039: PUSH
58040: LD_INT 80
58042: PUSH
58043: LD_INT 90
58045: PUSH
58046: LD_INT 100
58048: PUSH
58049: LD_INT 110
58051: PUSH
58052: LD_INT 120
58054: PUSH
58055: LD_INT 130
58057: PUSH
58058: LD_INT 140
58060: PUSH
58061: LD_INT 150
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PPUSH
58084: LD_INT 15
58086: PPUSH
58087: CALL_OW 12
58091: ARRAY
58092: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58093: LD_ADDR_VAR 0 4
58097: PUSH
58098: LD_INT 10
58100: PUSH
58101: LD_INT 20
58103: PUSH
58104: LD_INT 30
58106: PUSH
58107: LD_INT 40
58109: PUSH
58110: LD_INT 50
58112: PUSH
58113: LD_INT 60
58115: PUSH
58116: LD_INT 70
58118: PUSH
58119: LD_INT 80
58121: PUSH
58122: LD_INT 90
58124: PUSH
58125: LD_INT 100
58127: PUSH
58128: LD_INT 110
58130: PUSH
58131: LD_INT 120
58133: PUSH
58134: LD_INT 130
58136: PUSH
58137: LD_INT 140
58139: PUSH
58140: LD_INT 150
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PPUSH
58163: LD_INT 15
58165: PPUSH
58166: CALL_OW 12
58170: ARRAY
58171: ST_TO_ADDR
// if ValidHex ( x , y ) then
58172: LD_VAR 0 3
58176: PPUSH
58177: LD_VAR 0 4
58181: PPUSH
58182: CALL_OW 488
58186: IFFALSE 58209
// begin result := [ x , y ] ;
58188: LD_ADDR_VAR 0 1
58192: PUSH
58193: LD_VAR 0 3
58197: PUSH
58198: LD_VAR 0 4
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// break ;
58207: GO 58211
// end ; end ;
58209: GO 58011
58211: POP
58212: POP
// if result then
58213: LD_VAR 0 1
58217: IFFALSE 58277
// begin ToLua ( playSibBomb() ) ;
58219: LD_STRING playSibBomb()
58221: PPUSH
58222: CALL_OW 559
// wait ( 0 0$14 ) ;
58226: LD_INT 490
58228: PPUSH
58229: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58233: LD_VAR 0 1
58237: PUSH
58238: LD_INT 1
58240: ARRAY
58241: PPUSH
58242: LD_VAR 0 1
58246: PUSH
58247: LD_INT 2
58249: ARRAY
58250: PPUSH
58251: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58255: LD_VAR 0 1
58259: PUSH
58260: LD_INT 1
58262: ARRAY
58263: PPUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_INT 2
58271: ARRAY
58272: PPUSH
58273: CALL_OW 429
// end ; end ;
58277: LD_VAR 0 1
58281: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58282: LD_EXP 29
58286: PUSH
58287: LD_EXP 51
58291: AND
58292: IFFALSE 58304
58294: GO 58296
58296: DISABLE
// YouLost (  ) ;
58297: LD_STRING 
58299: PPUSH
58300: CALL_OW 104
58304: END
// every 0 0$1 trigger StreamModeActive and sFog do
58305: LD_EXP 29
58309: PUSH
58310: LD_EXP 50
58314: AND
58315: IFFALSE 58329
58317: GO 58319
58319: DISABLE
// FogOff ( your_side ) ;
58320: LD_OWVAR 2
58324: PPUSH
58325: CALL_OW 344
58329: END
// every 0 0$1 trigger StreamModeActive and sSun do
58330: LD_EXP 29
58334: PUSH
58335: LD_EXP 52
58339: AND
58340: IFFALSE 58368
58342: GO 58344
58344: DISABLE
// begin solar_recharge_percent := 0 ;
58345: LD_ADDR_OWVAR 79
58349: PUSH
58350: LD_INT 0
58352: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58353: LD_INT 10500
58355: PPUSH
58356: CALL_OW 67
// solar_recharge_percent := 100 ;
58360: LD_ADDR_OWVAR 79
58364: PUSH
58365: LD_INT 100
58367: ST_TO_ADDR
// end ;
58368: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58369: LD_EXP 29
58373: PUSH
58374: LD_EXP 53
58378: AND
58379: IFFALSE 58618
58381: GO 58383
58383: DISABLE
58384: LD_INT 0
58386: PPUSH
58387: PPUSH
58388: PPUSH
// begin tmp := [ ] ;
58389: LD_ADDR_VAR 0 3
58393: PUSH
58394: EMPTY
58395: ST_TO_ADDR
// for i := 1 to 6 do
58396: LD_ADDR_VAR 0 1
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_INT 6
58408: PUSH
58409: FOR_TO
58410: IFFALSE 58515
// begin uc_nation := nation_nature ;
58412: LD_ADDR_OWVAR 21
58416: PUSH
58417: LD_INT 0
58419: ST_TO_ADDR
// uc_side := 0 ;
58420: LD_ADDR_OWVAR 20
58424: PUSH
58425: LD_INT 0
58427: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58428: LD_ADDR_OWVAR 29
58432: PUSH
58433: LD_INT 12
58435: PUSH
58436: LD_INT 12
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: ST_TO_ADDR
// hc_agressivity := 20 ;
58443: LD_ADDR_OWVAR 35
58447: PUSH
58448: LD_INT 20
58450: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58451: LD_ADDR_OWVAR 28
58455: PUSH
58456: LD_INT 17
58458: ST_TO_ADDR
// hc_gallery :=  ;
58459: LD_ADDR_OWVAR 33
58463: PUSH
58464: LD_STRING 
58466: ST_TO_ADDR
// hc_name :=  ;
58467: LD_ADDR_OWVAR 26
58471: PUSH
58472: LD_STRING 
58474: ST_TO_ADDR
// un := CreateHuman ;
58475: LD_ADDR_VAR 0 2
58479: PUSH
58480: CALL_OW 44
58484: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58485: LD_VAR 0 2
58489: PPUSH
58490: LD_INT 1
58492: PPUSH
58493: CALL_OW 51
// tmp := tmp ^ un ;
58497: LD_ADDR_VAR 0 3
58501: PUSH
58502: LD_VAR 0 3
58506: PUSH
58507: LD_VAR 0 2
58511: ADD
58512: ST_TO_ADDR
// end ;
58513: GO 58409
58515: POP
58516: POP
// repeat wait ( 0 0$1 ) ;
58517: LD_INT 35
58519: PPUSH
58520: CALL_OW 67
// for un in tmp do
58524: LD_ADDR_VAR 0 2
58528: PUSH
58529: LD_VAR 0 3
58533: PUSH
58534: FOR_IN
58535: IFFALSE 58609
// begin if IsDead ( un ) then
58537: LD_VAR 0 2
58541: PPUSH
58542: CALL_OW 301
58546: IFFALSE 58566
// begin tmp := tmp diff un ;
58548: LD_ADDR_VAR 0 3
58552: PUSH
58553: LD_VAR 0 3
58557: PUSH
58558: LD_VAR 0 2
58562: DIFF
58563: ST_TO_ADDR
// continue ;
58564: GO 58534
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58566: LD_VAR 0 2
58570: PPUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 22
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PPUSH
58588: CALL_OW 69
58592: PPUSH
58593: LD_VAR 0 2
58597: PPUSH
58598: CALL_OW 74
58602: PPUSH
58603: CALL_OW 115
// end ;
58607: GO 58534
58609: POP
58610: POP
// until not tmp ;
58611: LD_VAR 0 3
58615: NOT
58616: IFFALSE 58517
// end ;
58618: PPOPN 3
58620: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58621: LD_EXP 29
58625: PUSH
58626: LD_EXP 54
58630: AND
58631: IFFALSE 58685
58633: GO 58635
58635: DISABLE
// begin ToLua ( displayTroll(); ) ;
58636: LD_STRING displayTroll();
58638: PPUSH
58639: CALL_OW 559
// wait ( 3 3$00 ) ;
58643: LD_INT 6300
58645: PPUSH
58646: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58650: LD_STRING hideTroll();
58652: PPUSH
58653: CALL_OW 559
// wait ( 1 1$00 ) ;
58657: LD_INT 2100
58659: PPUSH
58660: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58664: LD_STRING displayTroll();
58666: PPUSH
58667: CALL_OW 559
// wait ( 1 1$00 ) ;
58671: LD_INT 2100
58673: PPUSH
58674: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58678: LD_STRING hideTroll();
58680: PPUSH
58681: CALL_OW 559
// end ;
58685: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58686: LD_EXP 29
58690: PUSH
58691: LD_EXP 55
58695: AND
58696: IFFALSE 58759
58698: GO 58700
58700: DISABLE
58701: LD_INT 0
58703: PPUSH
// begin p := 0 ;
58704: LD_ADDR_VAR 0 1
58708: PUSH
58709: LD_INT 0
58711: ST_TO_ADDR
// repeat game_speed := 1 ;
58712: LD_ADDR_OWVAR 65
58716: PUSH
58717: LD_INT 1
58719: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58720: LD_INT 35
58722: PPUSH
58723: CALL_OW 67
// p := p + 1 ;
58727: LD_ADDR_VAR 0 1
58731: PUSH
58732: LD_VAR 0 1
58736: PUSH
58737: LD_INT 1
58739: PLUS
58740: ST_TO_ADDR
// until p >= 60 ;
58741: LD_VAR 0 1
58745: PUSH
58746: LD_INT 60
58748: GREATEREQUAL
58749: IFFALSE 58712
// game_speed := 4 ;
58751: LD_ADDR_OWVAR 65
58755: PUSH
58756: LD_INT 4
58758: ST_TO_ADDR
// end ;
58759: PPOPN 1
58761: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58762: LD_EXP 29
58766: PUSH
58767: LD_EXP 56
58771: AND
58772: IFFALSE 58918
58774: GO 58776
58776: DISABLE
58777: LD_INT 0
58779: PPUSH
58780: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58781: LD_ADDR_VAR 0 1
58785: PUSH
58786: LD_INT 22
58788: PUSH
58789: LD_OWVAR 2
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: PUSH
58801: LD_INT 30
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 30
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PPUSH
58830: CALL_OW 69
58834: ST_TO_ADDR
// if not depot then
58835: LD_VAR 0 1
58839: NOT
58840: IFFALSE 58844
// exit ;
58842: GO 58918
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58844: LD_ADDR_VAR 0 2
58848: PUSH
58849: LD_VAR 0 1
58853: PUSH
58854: LD_INT 1
58856: PPUSH
58857: LD_VAR 0 1
58861: PPUSH
58862: CALL_OW 12
58866: ARRAY
58867: PPUSH
58868: CALL_OW 274
58872: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58873: LD_VAR 0 2
58877: PPUSH
58878: LD_INT 1
58880: PPUSH
58881: LD_INT 0
58883: PPUSH
58884: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58888: LD_VAR 0 2
58892: PPUSH
58893: LD_INT 2
58895: PPUSH
58896: LD_INT 0
58898: PPUSH
58899: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58903: LD_VAR 0 2
58907: PPUSH
58908: LD_INT 3
58910: PPUSH
58911: LD_INT 0
58913: PPUSH
58914: CALL_OW 277
// end ;
58918: PPOPN 2
58920: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58921: LD_EXP 29
58925: PUSH
58926: LD_EXP 57
58930: AND
58931: IFFALSE 59028
58933: GO 58935
58935: DISABLE
58936: LD_INT 0
58938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58939: LD_ADDR_VAR 0 1
58943: PUSH
58944: LD_INT 22
58946: PUSH
58947: LD_OWVAR 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 21
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 23
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: PPUSH
58988: CALL_OW 69
58992: ST_TO_ADDR
// if not tmp then
58993: LD_VAR 0 1
58997: NOT
58998: IFFALSE 59002
// exit ;
59000: GO 59028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59002: LD_VAR 0 1
59006: PUSH
59007: LD_INT 1
59009: PPUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: CALL_OW 12
59019: ARRAY
59020: PPUSH
59021: LD_INT 200
59023: PPUSH
59024: CALL_OW 234
// end ;
59028: PPOPN 1
59030: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59031: LD_EXP 29
59035: PUSH
59036: LD_EXP 58
59040: AND
59041: IFFALSE 59120
59043: GO 59045
59045: DISABLE
59046: LD_INT 0
59048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59049: LD_ADDR_VAR 0 1
59053: PUSH
59054: LD_INT 22
59056: PUSH
59057: LD_OWVAR 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 21
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PPUSH
59080: CALL_OW 69
59084: ST_TO_ADDR
// if not tmp then
59085: LD_VAR 0 1
59089: NOT
59090: IFFALSE 59094
// exit ;
59092: GO 59120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59094: LD_VAR 0 1
59098: PUSH
59099: LD_INT 1
59101: PPUSH
59102: LD_VAR 0 1
59106: PPUSH
59107: CALL_OW 12
59111: ARRAY
59112: PPUSH
59113: LD_INT 60
59115: PPUSH
59116: CALL_OW 234
// end ;
59120: PPOPN 1
59122: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59123: LD_EXP 29
59127: PUSH
59128: LD_EXP 59
59132: AND
59133: IFFALSE 59232
59135: GO 59137
59137: DISABLE
59138: LD_INT 0
59140: PPUSH
59141: PPUSH
// begin enable ;
59142: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59143: LD_ADDR_VAR 0 1
59147: PUSH
59148: LD_INT 22
59150: PUSH
59151: LD_OWVAR 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 61
59162: PUSH
59163: EMPTY
59164: LIST
59165: PUSH
59166: LD_INT 33
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: LIST
59180: PPUSH
59181: CALL_OW 69
59185: ST_TO_ADDR
// if not tmp then
59186: LD_VAR 0 1
59190: NOT
59191: IFFALSE 59195
// exit ;
59193: GO 59232
// for i in tmp do
59195: LD_ADDR_VAR 0 2
59199: PUSH
59200: LD_VAR 0 1
59204: PUSH
59205: FOR_IN
59206: IFFALSE 59230
// if IsControledBy ( i ) then
59208: LD_VAR 0 2
59212: PPUSH
59213: CALL_OW 312
59217: IFFALSE 59228
// ComUnlink ( i ) ;
59219: LD_VAR 0 2
59223: PPUSH
59224: CALL_OW 136
59228: GO 59205
59230: POP
59231: POP
// end ;
59232: PPOPN 2
59234: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59235: LD_EXP 29
59239: PUSH
59240: LD_EXP 60
59244: AND
59245: IFFALSE 59385
59247: GO 59249
59249: DISABLE
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
// begin ToLua ( displayPowell(); ) ;
59254: LD_STRING displayPowell();
59256: PPUSH
59257: CALL_OW 559
// uc_side := 0 ;
59261: LD_ADDR_OWVAR 20
59265: PUSH
59266: LD_INT 0
59268: ST_TO_ADDR
// uc_nation := 2 ;
59269: LD_ADDR_OWVAR 21
59273: PUSH
59274: LD_INT 2
59276: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59277: LD_ADDR_OWVAR 37
59281: PUSH
59282: LD_INT 14
59284: ST_TO_ADDR
// vc_engine := engine_siberite ;
59285: LD_ADDR_OWVAR 39
59289: PUSH
59290: LD_INT 3
59292: ST_TO_ADDR
// vc_control := control_apeman ;
59293: LD_ADDR_OWVAR 38
59297: PUSH
59298: LD_INT 5
59300: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59301: LD_ADDR_OWVAR 40
59305: PUSH
59306: LD_INT 29
59308: ST_TO_ADDR
// un := CreateVehicle ;
59309: LD_ADDR_VAR 0 2
59313: PUSH
59314: CALL_OW 45
59318: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59319: LD_VAR 0 2
59323: PPUSH
59324: LD_INT 1
59326: PPUSH
59327: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59331: LD_INT 35
59333: PPUSH
59334: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59338: LD_VAR 0 2
59342: PPUSH
59343: LD_INT 22
59345: PUSH
59346: LD_OWVAR 2
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PPUSH
59355: CALL_OW 69
59359: PPUSH
59360: LD_VAR 0 2
59364: PPUSH
59365: CALL_OW 74
59369: PPUSH
59370: CALL_OW 115
// until IsDead ( un ) ;
59374: LD_VAR 0 2
59378: PPUSH
59379: CALL_OW 301
59383: IFFALSE 59331
// end ;
59385: PPOPN 2
59387: END
// every 0 0$1 trigger StreamModeActive and sStu do
59388: LD_EXP 29
59392: PUSH
59393: LD_EXP 68
59397: AND
59398: IFFALSE 59414
59400: GO 59402
59402: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59403: LD_STRING displayStucuk();
59405: PPUSH
59406: CALL_OW 559
// ResetFog ;
59410: CALL_OW 335
// end ;
59414: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59415: LD_EXP 29
59419: PUSH
59420: LD_EXP 61
59424: AND
59425: IFFALSE 59566
59427: GO 59429
59429: DISABLE
59430: LD_INT 0
59432: PPUSH
59433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59434: LD_ADDR_VAR 0 2
59438: PUSH
59439: LD_INT 22
59441: PUSH
59442: LD_OWVAR 2
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 21
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PPUSH
59465: CALL_OW 69
59469: ST_TO_ADDR
// if not tmp then
59470: LD_VAR 0 2
59474: NOT
59475: IFFALSE 59479
// exit ;
59477: GO 59566
// un := tmp [ rand ( 1 , tmp ) ] ;
59479: LD_ADDR_VAR 0 1
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 12
59501: ARRAY
59502: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59503: LD_VAR 0 1
59507: PPUSH
59508: LD_INT 0
59510: PPUSH
59511: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59515: LD_VAR 0 1
59519: PPUSH
59520: LD_OWVAR 3
59524: PUSH
59525: LD_VAR 0 1
59529: DIFF
59530: PPUSH
59531: LD_VAR 0 1
59535: PPUSH
59536: CALL_OW 74
59540: PPUSH
59541: CALL_OW 115
// wait ( 0 0$20 ) ;
59545: LD_INT 700
59547: PPUSH
59548: CALL_OW 67
// SetSide ( un , your_side ) ;
59552: LD_VAR 0 1
59556: PPUSH
59557: LD_OWVAR 2
59561: PPUSH
59562: CALL_OW 235
// end ;
59566: PPOPN 2
59568: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59569: LD_EXP 29
59573: PUSH
59574: LD_EXP 62
59578: AND
59579: IFFALSE 59685
59581: GO 59583
59583: DISABLE
59584: LD_INT 0
59586: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59587: LD_ADDR_VAR 0 1
59591: PUSH
59592: LD_INT 22
59594: PUSH
59595: LD_OWVAR 2
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 2
59606: PUSH
59607: LD_INT 30
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 30
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PPUSH
59636: CALL_OW 69
59640: ST_TO_ADDR
// if not depot then
59641: LD_VAR 0 1
59645: NOT
59646: IFFALSE 59650
// exit ;
59648: GO 59685
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59650: LD_VAR 0 1
59654: PUSH
59655: LD_INT 1
59657: ARRAY
59658: PPUSH
59659: CALL_OW 250
59663: PPUSH
59664: LD_VAR 0 1
59668: PUSH
59669: LD_INT 1
59671: ARRAY
59672: PPUSH
59673: CALL_OW 251
59677: PPUSH
59678: LD_INT 70
59680: PPUSH
59681: CALL_OW 495
// end ;
59685: PPOPN 1
59687: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59688: LD_EXP 29
59692: PUSH
59693: LD_EXP 63
59697: AND
59698: IFFALSE 59909
59700: GO 59702
59702: DISABLE
59703: LD_INT 0
59705: PPUSH
59706: PPUSH
59707: PPUSH
59708: PPUSH
59709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59710: LD_ADDR_VAR 0 5
59714: PUSH
59715: LD_INT 22
59717: PUSH
59718: LD_OWVAR 2
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 21
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PPUSH
59741: CALL_OW 69
59745: ST_TO_ADDR
// if not tmp then
59746: LD_VAR 0 5
59750: NOT
59751: IFFALSE 59755
// exit ;
59753: GO 59909
// for i in tmp do
59755: LD_ADDR_VAR 0 1
59759: PUSH
59760: LD_VAR 0 5
59764: PUSH
59765: FOR_IN
59766: IFFALSE 59907
// begin d := rand ( 0 , 5 ) ;
59768: LD_ADDR_VAR 0 4
59772: PUSH
59773: LD_INT 0
59775: PPUSH
59776: LD_INT 5
59778: PPUSH
59779: CALL_OW 12
59783: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59784: LD_ADDR_VAR 0 2
59788: PUSH
59789: LD_VAR 0 1
59793: PPUSH
59794: CALL_OW 250
59798: PPUSH
59799: LD_VAR 0 4
59803: PPUSH
59804: LD_INT 3
59806: PPUSH
59807: LD_INT 12
59809: PPUSH
59810: CALL_OW 12
59814: PPUSH
59815: CALL_OW 272
59819: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59820: LD_ADDR_VAR 0 3
59824: PUSH
59825: LD_VAR 0 1
59829: PPUSH
59830: CALL_OW 251
59834: PPUSH
59835: LD_VAR 0 4
59839: PPUSH
59840: LD_INT 3
59842: PPUSH
59843: LD_INT 12
59845: PPUSH
59846: CALL_OW 12
59850: PPUSH
59851: CALL_OW 273
59855: ST_TO_ADDR
// if ValidHex ( x , y ) then
59856: LD_VAR 0 2
59860: PPUSH
59861: LD_VAR 0 3
59865: PPUSH
59866: CALL_OW 488
59870: IFFALSE 59905
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59872: LD_VAR 0 1
59876: PPUSH
59877: LD_VAR 0 2
59881: PPUSH
59882: LD_VAR 0 3
59886: PPUSH
59887: LD_INT 3
59889: PPUSH
59890: LD_INT 6
59892: PPUSH
59893: CALL_OW 12
59897: PPUSH
59898: LD_INT 1
59900: PPUSH
59901: CALL_OW 483
// end ;
59905: GO 59765
59907: POP
59908: POP
// end ;
59909: PPOPN 5
59911: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59912: LD_EXP 29
59916: PUSH
59917: LD_EXP 64
59921: AND
59922: IFFALSE 60016
59924: GO 59926
59926: DISABLE
59927: LD_INT 0
59929: PPUSH
59930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59931: LD_ADDR_VAR 0 2
59935: PUSH
59936: LD_INT 22
59938: PUSH
59939: LD_OWVAR 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 32
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 21
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: PPUSH
59973: CALL_OW 69
59977: ST_TO_ADDR
// if not tmp then
59978: LD_VAR 0 2
59982: NOT
59983: IFFALSE 59987
// exit ;
59985: GO 60016
// for i in tmp do
59987: LD_ADDR_VAR 0 1
59991: PUSH
59992: LD_VAR 0 2
59996: PUSH
59997: FOR_IN
59998: IFFALSE 60014
// SetFuel ( i , 0 ) ;
60000: LD_VAR 0 1
60004: PPUSH
60005: LD_INT 0
60007: PPUSH
60008: CALL_OW 240
60012: GO 59997
60014: POP
60015: POP
// end ;
60016: PPOPN 2
60018: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60019: LD_EXP 29
60023: PUSH
60024: LD_EXP 65
60028: AND
60029: IFFALSE 60095
60031: GO 60033
60033: DISABLE
60034: LD_INT 0
60036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60037: LD_ADDR_VAR 0 1
60041: PUSH
60042: LD_INT 22
60044: PUSH
60045: LD_OWVAR 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 30
60056: PUSH
60057: LD_INT 29
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PPUSH
60068: CALL_OW 69
60072: ST_TO_ADDR
// if not tmp then
60073: LD_VAR 0 1
60077: NOT
60078: IFFALSE 60082
// exit ;
60080: GO 60095
// DestroyUnit ( tmp [ 1 ] ) ;
60082: LD_VAR 0 1
60086: PUSH
60087: LD_INT 1
60089: ARRAY
60090: PPUSH
60091: CALL_OW 65
// end ;
60095: PPOPN 1
60097: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60098: LD_EXP 29
60102: PUSH
60103: LD_EXP 67
60107: AND
60108: IFFALSE 60237
60110: GO 60112
60112: DISABLE
60113: LD_INT 0
60115: PPUSH
// begin uc_side := 0 ;
60116: LD_ADDR_OWVAR 20
60120: PUSH
60121: LD_INT 0
60123: ST_TO_ADDR
// uc_nation := nation_arabian ;
60124: LD_ADDR_OWVAR 21
60128: PUSH
60129: LD_INT 2
60131: ST_TO_ADDR
// hc_gallery :=  ;
60132: LD_ADDR_OWVAR 33
60136: PUSH
60137: LD_STRING 
60139: ST_TO_ADDR
// hc_name :=  ;
60140: LD_ADDR_OWVAR 26
60144: PUSH
60145: LD_STRING 
60147: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60148: LD_INT 1
60150: PPUSH
60151: LD_INT 11
60153: PPUSH
60154: LD_INT 10
60156: PPUSH
60157: CALL_OW 380
// un := CreateHuman ;
60161: LD_ADDR_VAR 0 1
60165: PUSH
60166: CALL_OW 44
60170: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60171: LD_VAR 0 1
60175: PPUSH
60176: LD_INT 1
60178: PPUSH
60179: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60183: LD_INT 35
60185: PPUSH
60186: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: LD_INT 22
60197: PUSH
60198: LD_OWVAR 2
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PPUSH
60207: CALL_OW 69
60211: PPUSH
60212: LD_VAR 0 1
60216: PPUSH
60217: CALL_OW 74
60221: PPUSH
60222: CALL_OW 115
// until IsDead ( un ) ;
60226: LD_VAR 0 1
60230: PPUSH
60231: CALL_OW 301
60235: IFFALSE 60183
// end ;
60237: PPOPN 1
60239: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60240: LD_EXP 29
60244: PUSH
60245: LD_EXP 69
60249: AND
60250: IFFALSE 60262
60252: GO 60254
60254: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60255: LD_STRING earthquake(getX(game), 0, 32)
60257: PPUSH
60258: CALL_OW 559
60262: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60263: LD_EXP 29
60267: PUSH
60268: LD_EXP 70
60272: AND
60273: IFFALSE 60364
60275: GO 60277
60277: DISABLE
60278: LD_INT 0
60280: PPUSH
// begin enable ;
60281: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60282: LD_ADDR_VAR 0 1
60286: PUSH
60287: LD_INT 22
60289: PUSH
60290: LD_OWVAR 2
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 21
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 33
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: PPUSH
60324: CALL_OW 69
60328: ST_TO_ADDR
// if not tmp then
60329: LD_VAR 0 1
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60364
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60338: LD_VAR 0 1
60342: PUSH
60343: LD_INT 1
60345: PPUSH
60346: LD_VAR 0 1
60350: PPUSH
60351: CALL_OW 12
60355: ARRAY
60356: PPUSH
60357: LD_INT 1
60359: PPUSH
60360: CALL_OW 234
// end ;
60364: PPOPN 1
60366: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60367: LD_EXP 29
60371: PUSH
60372: LD_EXP 71
60376: AND
60377: IFFALSE 60518
60379: GO 60381
60381: DISABLE
60382: LD_INT 0
60384: PPUSH
60385: PPUSH
60386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60387: LD_ADDR_VAR 0 3
60391: PUSH
60392: LD_INT 22
60394: PUSH
60395: LD_OWVAR 2
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 25
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PPUSH
60418: CALL_OW 69
60422: ST_TO_ADDR
// if not tmp then
60423: LD_VAR 0 3
60427: NOT
60428: IFFALSE 60432
// exit ;
60430: GO 60518
// un := tmp [ rand ( 1 , tmp ) ] ;
60432: LD_ADDR_VAR 0 2
60436: PUSH
60437: LD_VAR 0 3
60441: PUSH
60442: LD_INT 1
60444: PPUSH
60445: LD_VAR 0 3
60449: PPUSH
60450: CALL_OW 12
60454: ARRAY
60455: ST_TO_ADDR
// if Crawls ( un ) then
60456: LD_VAR 0 2
60460: PPUSH
60461: CALL_OW 318
60465: IFFALSE 60476
// ComWalk ( un ) ;
60467: LD_VAR 0 2
60471: PPUSH
60472: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60476: LD_VAR 0 2
60480: PPUSH
60481: LD_INT 9
60483: PPUSH
60484: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60488: LD_INT 28
60490: PPUSH
60491: LD_OWVAR 2
60495: PPUSH
60496: LD_INT 2
60498: PPUSH
60499: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60503: LD_INT 29
60505: PPUSH
60506: LD_OWVAR 2
60510: PPUSH
60511: LD_INT 2
60513: PPUSH
60514: CALL_OW 322
// end ;
60518: PPOPN 3
60520: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60521: LD_EXP 29
60525: PUSH
60526: LD_EXP 72
60530: AND
60531: IFFALSE 60642
60533: GO 60535
60535: DISABLE
60536: LD_INT 0
60538: PPUSH
60539: PPUSH
60540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60541: LD_ADDR_VAR 0 3
60545: PUSH
60546: LD_INT 22
60548: PUSH
60549: LD_OWVAR 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 25
60560: PUSH
60561: LD_INT 1
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PPUSH
60572: CALL_OW 69
60576: ST_TO_ADDR
// if not tmp then
60577: LD_VAR 0 3
60581: NOT
60582: IFFALSE 60586
// exit ;
60584: GO 60642
// un := tmp [ rand ( 1 , tmp ) ] ;
60586: LD_ADDR_VAR 0 2
60590: PUSH
60591: LD_VAR 0 3
60595: PUSH
60596: LD_INT 1
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: CALL_OW 12
60608: ARRAY
60609: ST_TO_ADDR
// if Crawls ( un ) then
60610: LD_VAR 0 2
60614: PPUSH
60615: CALL_OW 318
60619: IFFALSE 60630
// ComWalk ( un ) ;
60621: LD_VAR 0 2
60625: PPUSH
60626: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60630: LD_VAR 0 2
60634: PPUSH
60635: LD_INT 8
60637: PPUSH
60638: CALL_OW 336
// end ;
60642: PPOPN 3
60644: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60645: LD_EXP 29
60649: PUSH
60650: LD_EXP 73
60654: AND
60655: IFFALSE 60799
60657: GO 60659
60659: DISABLE
60660: LD_INT 0
60662: PPUSH
60663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60664: LD_ADDR_VAR 0 2
60668: PUSH
60669: LD_INT 22
60671: PUSH
60672: LD_OWVAR 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 21
60683: PUSH
60684: LD_INT 2
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 34
60696: PUSH
60697: LD_INT 12
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 34
60706: PUSH
60707: LD_INT 51
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 34
60716: PUSH
60717: LD_INT 32
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: LIST
60734: PPUSH
60735: CALL_OW 69
60739: ST_TO_ADDR
// if not tmp then
60740: LD_VAR 0 2
60744: NOT
60745: IFFALSE 60749
// exit ;
60747: GO 60799
// for i in tmp do
60749: LD_ADDR_VAR 0 1
60753: PUSH
60754: LD_VAR 0 2
60758: PUSH
60759: FOR_IN
60760: IFFALSE 60797
// if GetCargo ( i , mat_artifact ) = 0 then
60762: LD_VAR 0 1
60766: PPUSH
60767: LD_INT 4
60769: PPUSH
60770: CALL_OW 289
60774: PUSH
60775: LD_INT 0
60777: EQUAL
60778: IFFALSE 60795
// SetCargo ( i , mat_siberit , 100 ) ;
60780: LD_VAR 0 1
60784: PPUSH
60785: LD_INT 3
60787: PPUSH
60788: LD_INT 100
60790: PPUSH
60791: CALL_OW 290
60795: GO 60759
60797: POP
60798: POP
// end ;
60799: PPOPN 2
60801: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60802: LD_EXP 29
60806: PUSH
60807: LD_EXP 74
60811: AND
60812: IFFALSE 60995
60814: GO 60816
60816: DISABLE
60817: LD_INT 0
60819: PPUSH
60820: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60821: LD_ADDR_VAR 0 2
60825: PUSH
60826: LD_INT 22
60828: PUSH
60829: LD_OWVAR 2
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PPUSH
60838: CALL_OW 69
60842: ST_TO_ADDR
// if not tmp then
60843: LD_VAR 0 2
60847: NOT
60848: IFFALSE 60852
// exit ;
60850: GO 60995
// for i := 1 to 2 do
60852: LD_ADDR_VAR 0 1
60856: PUSH
60857: DOUBLE
60858: LD_INT 1
60860: DEC
60861: ST_TO_ADDR
60862: LD_INT 2
60864: PUSH
60865: FOR_TO
60866: IFFALSE 60993
// begin uc_side := your_side ;
60868: LD_ADDR_OWVAR 20
60872: PUSH
60873: LD_OWVAR 2
60877: ST_TO_ADDR
// uc_nation := nation_american ;
60878: LD_ADDR_OWVAR 21
60882: PUSH
60883: LD_INT 1
60885: ST_TO_ADDR
// vc_chassis := us_morphling ;
60886: LD_ADDR_OWVAR 37
60890: PUSH
60891: LD_INT 5
60893: ST_TO_ADDR
// vc_engine := engine_siberite ;
60894: LD_ADDR_OWVAR 39
60898: PUSH
60899: LD_INT 3
60901: ST_TO_ADDR
// vc_control := control_computer ;
60902: LD_ADDR_OWVAR 38
60906: PUSH
60907: LD_INT 3
60909: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60910: LD_ADDR_OWVAR 40
60914: PUSH
60915: LD_INT 10
60917: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60918: LD_VAR 0 2
60922: PUSH
60923: LD_INT 1
60925: ARRAY
60926: PPUSH
60927: CALL_OW 310
60931: NOT
60932: IFFALSE 60979
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60934: CALL_OW 45
60938: PPUSH
60939: LD_VAR 0 2
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: PPUSH
60948: CALL_OW 250
60952: PPUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 1
60960: ARRAY
60961: PPUSH
60962: CALL_OW 251
60966: PPUSH
60967: LD_INT 12
60969: PPUSH
60970: LD_INT 1
60972: PPUSH
60973: CALL_OW 50
60977: GO 60991
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60979: CALL_OW 45
60983: PPUSH
60984: LD_INT 1
60986: PPUSH
60987: CALL_OW 51
// end ;
60991: GO 60865
60993: POP
60994: POP
// end ;
60995: PPOPN 2
60997: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60998: LD_EXP 29
61002: PUSH
61003: LD_EXP 75
61007: AND
61008: IFFALSE 61230
61010: GO 61012
61012: DISABLE
61013: LD_INT 0
61015: PPUSH
61016: PPUSH
61017: PPUSH
61018: PPUSH
61019: PPUSH
61020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61021: LD_ADDR_VAR 0 6
61025: PUSH
61026: LD_INT 22
61028: PUSH
61029: LD_OWVAR 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 21
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: PUSH
61051: LD_INT 23
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: LIST
61069: PPUSH
61070: CALL_OW 69
61074: ST_TO_ADDR
// if not tmp then
61075: LD_VAR 0 6
61079: NOT
61080: IFFALSE 61084
// exit ;
61082: GO 61230
// s1 := rand ( 1 , 4 ) ;
61084: LD_ADDR_VAR 0 2
61088: PUSH
61089: LD_INT 1
61091: PPUSH
61092: LD_INT 4
61094: PPUSH
61095: CALL_OW 12
61099: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61100: LD_ADDR_VAR 0 4
61104: PUSH
61105: LD_VAR 0 6
61109: PUSH
61110: LD_INT 1
61112: ARRAY
61113: PPUSH
61114: LD_VAR 0 2
61118: PPUSH
61119: CALL_OW 259
61123: ST_TO_ADDR
// if s1 = 1 then
61124: LD_VAR 0 2
61128: PUSH
61129: LD_INT 1
61131: EQUAL
61132: IFFALSE 61152
// s2 := rand ( 2 , 4 ) else
61134: LD_ADDR_VAR 0 3
61138: PUSH
61139: LD_INT 2
61141: PPUSH
61142: LD_INT 4
61144: PPUSH
61145: CALL_OW 12
61149: ST_TO_ADDR
61150: GO 61160
// s2 := 1 ;
61152: LD_ADDR_VAR 0 3
61156: PUSH
61157: LD_INT 1
61159: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61160: LD_ADDR_VAR 0 5
61164: PUSH
61165: LD_VAR 0 6
61169: PUSH
61170: LD_INT 1
61172: ARRAY
61173: PPUSH
61174: LD_VAR 0 3
61178: PPUSH
61179: CALL_OW 259
61183: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61184: LD_VAR 0 6
61188: PUSH
61189: LD_INT 1
61191: ARRAY
61192: PPUSH
61193: LD_VAR 0 2
61197: PPUSH
61198: LD_VAR 0 5
61202: PPUSH
61203: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61207: LD_VAR 0 6
61211: PUSH
61212: LD_INT 1
61214: ARRAY
61215: PPUSH
61216: LD_VAR 0 3
61220: PPUSH
61221: LD_VAR 0 4
61225: PPUSH
61226: CALL_OW 237
// end ;
61230: PPOPN 6
61232: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61233: LD_EXP 29
61237: PUSH
61238: LD_EXP 76
61242: AND
61243: IFFALSE 61322
61245: GO 61247
61247: DISABLE
61248: LD_INT 0
61250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61251: LD_ADDR_VAR 0 1
61255: PUSH
61256: LD_INT 22
61258: PUSH
61259: LD_OWVAR 2
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 30
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PPUSH
61282: CALL_OW 69
61286: ST_TO_ADDR
// if not tmp then
61287: LD_VAR 0 1
61291: NOT
61292: IFFALSE 61296
// exit ;
61294: GO 61322
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61296: LD_VAR 0 1
61300: PUSH
61301: LD_INT 1
61303: PPUSH
61304: LD_VAR 0 1
61308: PPUSH
61309: CALL_OW 12
61313: ARRAY
61314: PPUSH
61315: LD_INT 1
61317: PPUSH
61318: CALL_OW 234
// end ;
61322: PPOPN 1
61324: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61325: LD_EXP 29
61329: PUSH
61330: LD_EXP 77
61334: AND
61335: IFFALSE 61447
61337: GO 61339
61339: DISABLE
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61344: LD_ADDR_VAR 0 2
61348: PUSH
61349: LD_INT 22
61351: PUSH
61352: LD_OWVAR 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: LD_INT 30
61366: PUSH
61367: LD_INT 27
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 30
61376: PUSH
61377: LD_INT 26
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 30
61386: PUSH
61387: LD_INT 28
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PPUSH
61404: CALL_OW 69
61408: ST_TO_ADDR
// if not tmp then
61409: LD_VAR 0 2
61413: NOT
61414: IFFALSE 61418
// exit ;
61416: GO 61447
// for i in tmp do
61418: LD_ADDR_VAR 0 1
61422: PUSH
61423: LD_VAR 0 2
61427: PUSH
61428: FOR_IN
61429: IFFALSE 61445
// SetLives ( i , 1 ) ;
61431: LD_VAR 0 1
61435: PPUSH
61436: LD_INT 1
61438: PPUSH
61439: CALL_OW 234
61443: GO 61428
61445: POP
61446: POP
// end ;
61447: PPOPN 2
61449: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61450: LD_EXP 29
61454: PUSH
61455: LD_EXP 78
61459: AND
61460: IFFALSE 61747
61462: GO 61464
61464: DISABLE
61465: LD_INT 0
61467: PPUSH
61468: PPUSH
61469: PPUSH
// begin i := rand ( 1 , 7 ) ;
61470: LD_ADDR_VAR 0 1
61474: PUSH
61475: LD_INT 1
61477: PPUSH
61478: LD_INT 7
61480: PPUSH
61481: CALL_OW 12
61485: ST_TO_ADDR
// case i of 1 :
61486: LD_VAR 0 1
61490: PUSH
61491: LD_INT 1
61493: DOUBLE
61494: EQUAL
61495: IFTRUE 61499
61497: GO 61509
61499: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61500: LD_STRING earthquake(getX(game), 0, 32)
61502: PPUSH
61503: CALL_OW 559
61507: GO 61747
61509: LD_INT 2
61511: DOUBLE
61512: EQUAL
61513: IFTRUE 61517
61515: GO 61531
61517: POP
// begin ToLua ( displayStucuk(); ) ;
61518: LD_STRING displayStucuk();
61520: PPUSH
61521: CALL_OW 559
// ResetFog ;
61525: CALL_OW 335
// end ; 3 :
61529: GO 61747
61531: LD_INT 3
61533: DOUBLE
61534: EQUAL
61535: IFTRUE 61539
61537: GO 61643
61539: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: LD_INT 22
61547: PUSH
61548: LD_OWVAR 2
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 25
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PPUSH
61571: CALL_OW 69
61575: ST_TO_ADDR
// if not tmp then
61576: LD_VAR 0 2
61580: NOT
61581: IFFALSE 61585
// exit ;
61583: GO 61747
// un := tmp [ rand ( 1 , tmp ) ] ;
61585: LD_ADDR_VAR 0 3
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_INT 1
61597: PPUSH
61598: LD_VAR 0 2
61602: PPUSH
61603: CALL_OW 12
61607: ARRAY
61608: ST_TO_ADDR
// if Crawls ( un ) then
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 318
61618: IFFALSE 61629
// ComWalk ( un ) ;
61620: LD_VAR 0 3
61624: PPUSH
61625: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61629: LD_VAR 0 3
61633: PPUSH
61634: LD_INT 8
61636: PPUSH
61637: CALL_OW 336
// end ; 4 :
61641: GO 61747
61643: LD_INT 4
61645: DOUBLE
61646: EQUAL
61647: IFTRUE 61651
61649: GO 61725
61651: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61652: LD_ADDR_VAR 0 2
61656: PUSH
61657: LD_INT 22
61659: PUSH
61660: LD_OWVAR 2
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 30
61671: PUSH
61672: LD_INT 29
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PPUSH
61683: CALL_OW 69
61687: ST_TO_ADDR
// if not tmp then
61688: LD_VAR 0 2
61692: NOT
61693: IFFALSE 61697
// exit ;
61695: GO 61747
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61697: LD_VAR 0 2
61701: PUSH
61702: LD_INT 1
61704: ARRAY
61705: PPUSH
61706: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61710: LD_VAR 0 2
61714: PUSH
61715: LD_INT 1
61717: ARRAY
61718: PPUSH
61719: CALL_OW 65
// end ; 5 .. 7 :
61723: GO 61747
61725: LD_INT 5
61727: DOUBLE
61728: GREATEREQUAL
61729: IFFALSE 61737
61731: LD_INT 7
61733: DOUBLE
61734: LESSEQUAL
61735: IFTRUE 61739
61737: GO 61746
61739: POP
// StreamSibBomb ; end ;
61740: CALL 57984 0 0
61744: GO 61747
61746: POP
// end ;
61747: PPOPN 3
61749: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61750: LD_EXP 29
61754: PUSH
61755: LD_EXP 79
61759: AND
61760: IFFALSE 61916
61762: GO 61764
61764: DISABLE
61765: LD_INT 0
61767: PPUSH
61768: PPUSH
61769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61770: LD_ADDR_VAR 0 2
61774: PUSH
61775: LD_INT 81
61777: PUSH
61778: LD_OWVAR 2
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 2
61789: PUSH
61790: LD_INT 21
61792: PUSH
61793: LD_INT 1
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 21
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PPUSH
61819: CALL_OW 69
61823: ST_TO_ADDR
// if not tmp then
61824: LD_VAR 0 2
61828: NOT
61829: IFFALSE 61833
// exit ;
61831: GO 61916
// p := 0 ;
61833: LD_ADDR_VAR 0 3
61837: PUSH
61838: LD_INT 0
61840: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61841: LD_INT 35
61843: PPUSH
61844: CALL_OW 67
// p := p + 1 ;
61848: LD_ADDR_VAR 0 3
61852: PUSH
61853: LD_VAR 0 3
61857: PUSH
61858: LD_INT 1
61860: PLUS
61861: ST_TO_ADDR
// for i in tmp do
61862: LD_ADDR_VAR 0 1
61866: PUSH
61867: LD_VAR 0 2
61871: PUSH
61872: FOR_IN
61873: IFFALSE 61904
// if GetLives ( i ) < 1000 then
61875: LD_VAR 0 1
61879: PPUSH
61880: CALL_OW 256
61884: PUSH
61885: LD_INT 1000
61887: LESS
61888: IFFALSE 61902
// SetLives ( i , 1000 ) ;
61890: LD_VAR 0 1
61894: PPUSH
61895: LD_INT 1000
61897: PPUSH
61898: CALL_OW 234
61902: GO 61872
61904: POP
61905: POP
// until p > 20 ;
61906: LD_VAR 0 3
61910: PUSH
61911: LD_INT 20
61913: GREATER
61914: IFFALSE 61841
// end ;
61916: PPOPN 3
61918: END
// every 0 0$1 trigger StreamModeActive and sTime do
61919: LD_EXP 29
61923: PUSH
61924: LD_EXP 80
61928: AND
61929: IFFALSE 61964
61931: GO 61933
61933: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61934: LD_INT 28
61936: PPUSH
61937: LD_OWVAR 2
61941: PPUSH
61942: LD_INT 2
61944: PPUSH
61945: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61949: LD_INT 30
61951: PPUSH
61952: LD_OWVAR 2
61956: PPUSH
61957: LD_INT 2
61959: PPUSH
61960: CALL_OW 322
// end ;
61964: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61965: LD_EXP 29
61969: PUSH
61970: LD_EXP 81
61974: AND
61975: IFFALSE 62096
61977: GO 61979
61979: DISABLE
61980: LD_INT 0
61982: PPUSH
61983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61984: LD_ADDR_VAR 0 2
61988: PUSH
61989: LD_INT 22
61991: PUSH
61992: LD_OWVAR 2
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 21
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: PUSH
62014: LD_INT 23
62016: PUSH
62017: LD_INT 0
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: PPUSH
62033: CALL_OW 69
62037: ST_TO_ADDR
// if not tmp then
62038: LD_VAR 0 2
62042: NOT
62043: IFFALSE 62047
// exit ;
62045: GO 62096
// for i in tmp do
62047: LD_ADDR_VAR 0 1
62051: PUSH
62052: LD_VAR 0 2
62056: PUSH
62057: FOR_IN
62058: IFFALSE 62094
// begin if Crawls ( i ) then
62060: LD_VAR 0 1
62064: PPUSH
62065: CALL_OW 318
62069: IFFALSE 62080
// ComWalk ( i ) ;
62071: LD_VAR 0 1
62075: PPUSH
62076: CALL_OW 138
// SetClass ( i , 2 ) ;
62080: LD_VAR 0 1
62084: PPUSH
62085: LD_INT 2
62087: PPUSH
62088: CALL_OW 336
// end ;
62092: GO 62057
62094: POP
62095: POP
// end ;
62096: PPOPN 2
62098: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62099: LD_EXP 29
62103: PUSH
62104: LD_EXP 82
62108: AND
62109: IFFALSE 62397
62111: GO 62113
62113: DISABLE
62114: LD_INT 0
62116: PPUSH
62117: PPUSH
62118: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62119: LD_OWVAR 2
62123: PPUSH
62124: LD_INT 9
62126: PPUSH
62127: LD_INT 1
62129: PPUSH
62130: LD_INT 1
62132: PPUSH
62133: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62137: LD_INT 9
62139: PPUSH
62140: LD_OWVAR 2
62144: PPUSH
62145: CALL_OW 343
// uc_side := 9 ;
62149: LD_ADDR_OWVAR 20
62153: PUSH
62154: LD_INT 9
62156: ST_TO_ADDR
// uc_nation := 2 ;
62157: LD_ADDR_OWVAR 21
62161: PUSH
62162: LD_INT 2
62164: ST_TO_ADDR
// hc_name := Dark Warrior ;
62165: LD_ADDR_OWVAR 26
62169: PUSH
62170: LD_STRING Dark Warrior
62172: ST_TO_ADDR
// hc_gallery :=  ;
62173: LD_ADDR_OWVAR 33
62177: PUSH
62178: LD_STRING 
62180: ST_TO_ADDR
// hc_noskilllimit := true ;
62181: LD_ADDR_OWVAR 76
62185: PUSH
62186: LD_INT 1
62188: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62189: LD_ADDR_OWVAR 31
62193: PUSH
62194: LD_INT 30
62196: PUSH
62197: LD_INT 30
62199: PUSH
62200: LD_INT 30
62202: PUSH
62203: LD_INT 30
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: ST_TO_ADDR
// un := CreateHuman ;
62212: LD_ADDR_VAR 0 3
62216: PUSH
62217: CALL_OW 44
62221: ST_TO_ADDR
// hc_noskilllimit := false ;
62222: LD_ADDR_OWVAR 76
62226: PUSH
62227: LD_INT 0
62229: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62230: LD_VAR 0 3
62234: PPUSH
62235: LD_INT 1
62237: PPUSH
62238: CALL_OW 51
// ToLua ( playRanger() ) ;
62242: LD_STRING playRanger()
62244: PPUSH
62245: CALL_OW 559
// p := 0 ;
62249: LD_ADDR_VAR 0 2
62253: PUSH
62254: LD_INT 0
62256: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62257: LD_INT 35
62259: PPUSH
62260: CALL_OW 67
// p := p + 1 ;
62264: LD_ADDR_VAR 0 2
62268: PUSH
62269: LD_VAR 0 2
62273: PUSH
62274: LD_INT 1
62276: PLUS
62277: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62278: LD_VAR 0 3
62282: PPUSH
62283: CALL_OW 256
62287: PUSH
62288: LD_INT 1000
62290: LESS
62291: IFFALSE 62305
// SetLives ( un , 1000 ) ;
62293: LD_VAR 0 3
62297: PPUSH
62298: LD_INT 1000
62300: PPUSH
62301: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62305: LD_VAR 0 3
62309: PPUSH
62310: LD_INT 81
62312: PUSH
62313: LD_OWVAR 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 91
62324: PUSH
62325: LD_VAR 0 3
62329: PUSH
62330: LD_INT 30
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PPUSH
62342: CALL_OW 69
62346: PPUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: CALL_OW 74
62356: PPUSH
62357: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62361: LD_VAR 0 2
62365: PUSH
62366: LD_INT 80
62368: GREATER
62369: PUSH
62370: LD_VAR 0 3
62374: PPUSH
62375: CALL_OW 301
62379: OR
62380: IFFALSE 62257
// if un then
62382: LD_VAR 0 3
62386: IFFALSE 62397
// RemoveUnit ( un ) ;
62388: LD_VAR 0 3
62392: PPUSH
62393: CALL_OW 64
// end ;
62397: PPOPN 3
62399: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62400: LD_EXP 83
62404: IFFALSE 62520
62406: GO 62408
62408: DISABLE
62409: LD_INT 0
62411: PPUSH
62412: PPUSH
62413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62414: LD_ADDR_VAR 0 2
62418: PUSH
62419: LD_INT 81
62421: PUSH
62422: LD_OWVAR 2
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 21
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PPUSH
62445: CALL_OW 69
62449: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62450: LD_STRING playComputer()
62452: PPUSH
62453: CALL_OW 559
// if not tmp then
62457: LD_VAR 0 2
62461: NOT
62462: IFFALSE 62466
// exit ;
62464: GO 62520
// for i in tmp do
62466: LD_ADDR_VAR 0 1
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: FOR_IN
62477: IFFALSE 62518
// for j := 1 to 4 do
62479: LD_ADDR_VAR 0 3
62483: PUSH
62484: DOUBLE
62485: LD_INT 1
62487: DEC
62488: ST_TO_ADDR
62489: LD_INT 4
62491: PUSH
62492: FOR_TO
62493: IFFALSE 62514
// SetSkill ( i , j , 10 ) ;
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_VAR 0 3
62504: PPUSH
62505: LD_INT 10
62507: PPUSH
62508: CALL_OW 237
62512: GO 62492
62514: POP
62515: POP
62516: GO 62476
62518: POP
62519: POP
// end ;
62520: PPOPN 3
62522: END
// every 0 0$1 trigger s30 do var i , tmp ;
62523: LD_EXP 84
62527: IFFALSE 62596
62529: GO 62531
62531: DISABLE
62532: LD_INT 0
62534: PPUSH
62535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62536: LD_ADDR_VAR 0 2
62540: PUSH
62541: LD_INT 22
62543: PUSH
62544: LD_OWVAR 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PPUSH
62553: CALL_OW 69
62557: ST_TO_ADDR
// if not tmp then
62558: LD_VAR 0 2
62562: NOT
62563: IFFALSE 62567
// exit ;
62565: GO 62596
// for i in tmp do
62567: LD_ADDR_VAR 0 1
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: FOR_IN
62578: IFFALSE 62594
// SetLives ( i , 300 ) ;
62580: LD_VAR 0 1
62584: PPUSH
62585: LD_INT 300
62587: PPUSH
62588: CALL_OW 234
62592: GO 62577
62594: POP
62595: POP
// end ;
62596: PPOPN 2
62598: END
// every 0 0$1 trigger s60 do var i , tmp ;
62599: LD_EXP 85
62603: IFFALSE 62672
62605: GO 62607
62607: DISABLE
62608: LD_INT 0
62610: PPUSH
62611: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62612: LD_ADDR_VAR 0 2
62616: PUSH
62617: LD_INT 22
62619: PUSH
62620: LD_OWVAR 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PPUSH
62629: CALL_OW 69
62633: ST_TO_ADDR
// if not tmp then
62634: LD_VAR 0 2
62638: NOT
62639: IFFALSE 62643
// exit ;
62641: GO 62672
// for i in tmp do
62643: LD_ADDR_VAR 0 1
62647: PUSH
62648: LD_VAR 0 2
62652: PUSH
62653: FOR_IN
62654: IFFALSE 62670
// SetLives ( i , 600 ) ;
62656: LD_VAR 0 1
62660: PPUSH
62661: LD_INT 600
62663: PPUSH
62664: CALL_OW 234
62668: GO 62653
62670: POP
62671: POP
// end ;
62672: PPOPN 2
62674: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62675: LD_INT 0
62677: PPUSH
// case cmd of 301 :
62678: LD_VAR 0 1
62682: PUSH
62683: LD_INT 301
62685: DOUBLE
62686: EQUAL
62687: IFTRUE 62691
62689: GO 62723
62691: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62692: LD_VAR 0 6
62696: PPUSH
62697: LD_VAR 0 7
62701: PPUSH
62702: LD_VAR 0 8
62706: PPUSH
62707: LD_VAR 0 4
62711: PPUSH
62712: LD_VAR 0 5
62716: PPUSH
62717: CALL 63932 0 5
62721: GO 62844
62723: LD_INT 302
62725: DOUBLE
62726: EQUAL
62727: IFTRUE 62731
62729: GO 62768
62731: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62732: LD_VAR 0 6
62736: PPUSH
62737: LD_VAR 0 7
62741: PPUSH
62742: LD_VAR 0 8
62746: PPUSH
62747: LD_VAR 0 9
62751: PPUSH
62752: LD_VAR 0 4
62756: PPUSH
62757: LD_VAR 0 5
62761: PPUSH
62762: CALL 64023 0 6
62766: GO 62844
62768: LD_INT 303
62770: DOUBLE
62771: EQUAL
62772: IFTRUE 62776
62774: GO 62813
62776: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62777: LD_VAR 0 6
62781: PPUSH
62782: LD_VAR 0 7
62786: PPUSH
62787: LD_VAR 0 8
62791: PPUSH
62792: LD_VAR 0 9
62796: PPUSH
62797: LD_VAR 0 4
62801: PPUSH
62802: LD_VAR 0 5
62806: PPUSH
62807: CALL 62849 0 6
62811: GO 62844
62813: LD_INT 304
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62821
62819: GO 62843
62821: POP
// hHackTeleport ( unit , x , y ) ; end ;
62822: LD_VAR 0 2
62826: PPUSH
62827: LD_VAR 0 4
62831: PPUSH
62832: LD_VAR 0 5
62836: PPUSH
62837: CALL 64616 0 3
62841: GO 62844
62843: POP
// end ;
62844: LD_VAR 0 12
62848: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62849: LD_INT 0
62851: PPUSH
62852: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62853: LD_VAR 0 1
62857: PUSH
62858: LD_INT 1
62860: LESS
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_INT 3
62869: GREATER
62870: OR
62871: PUSH
62872: LD_VAR 0 5
62876: PPUSH
62877: LD_VAR 0 6
62881: PPUSH
62882: CALL_OW 428
62886: OR
62887: IFFALSE 62891
// exit ;
62889: GO 63619
// uc_side := your_side ;
62891: LD_ADDR_OWVAR 20
62895: PUSH
62896: LD_OWVAR 2
62900: ST_TO_ADDR
// uc_nation := nation ;
62901: LD_ADDR_OWVAR 21
62905: PUSH
62906: LD_VAR 0 1
62910: ST_TO_ADDR
// bc_level = 1 ;
62911: LD_ADDR_OWVAR 43
62915: PUSH
62916: LD_INT 1
62918: ST_TO_ADDR
// case btype of 1 :
62919: LD_VAR 0 2
62923: PUSH
62924: LD_INT 1
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62932
62930: GO 62943
62932: POP
// bc_type := b_depot ; 2 :
62933: LD_ADDR_OWVAR 42
62937: PUSH
62938: LD_INT 0
62940: ST_TO_ADDR
62941: GO 63563
62943: LD_INT 2
62945: DOUBLE
62946: EQUAL
62947: IFTRUE 62951
62949: GO 62962
62951: POP
// bc_type := b_warehouse ; 3 :
62952: LD_ADDR_OWVAR 42
62956: PUSH
62957: LD_INT 1
62959: ST_TO_ADDR
62960: GO 63563
62962: LD_INT 3
62964: DOUBLE
62965: EQUAL
62966: IFTRUE 62970
62968: GO 62981
62970: POP
// bc_type := b_lab ; 4 .. 9 :
62971: LD_ADDR_OWVAR 42
62975: PUSH
62976: LD_INT 6
62978: ST_TO_ADDR
62979: GO 63563
62981: LD_INT 4
62983: DOUBLE
62984: GREATEREQUAL
62985: IFFALSE 62993
62987: LD_INT 9
62989: DOUBLE
62990: LESSEQUAL
62991: IFTRUE 62995
62993: GO 63055
62995: POP
// begin bc_type := b_lab_half ;
62996: LD_ADDR_OWVAR 42
63000: PUSH
63001: LD_INT 7
63003: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63004: LD_ADDR_OWVAR 44
63008: PUSH
63009: LD_INT 10
63011: PUSH
63012: LD_INT 11
63014: PUSH
63015: LD_INT 12
63017: PUSH
63018: LD_INT 15
63020: PUSH
63021: LD_INT 14
63023: PUSH
63024: LD_INT 13
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: PUSH
63035: LD_VAR 0 2
63039: PUSH
63040: LD_INT 3
63042: MINUS
63043: ARRAY
63044: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63045: LD_ADDR_OWVAR 45
63049: PUSH
63050: LD_INT 9
63052: ST_TO_ADDR
// end ; 10 .. 13 :
63053: GO 63563
63055: LD_INT 10
63057: DOUBLE
63058: GREATEREQUAL
63059: IFFALSE 63067
63061: LD_INT 13
63063: DOUBLE
63064: LESSEQUAL
63065: IFTRUE 63069
63067: GO 63146
63069: POP
// begin bc_type := b_lab_full ;
63070: LD_ADDR_OWVAR 42
63074: PUSH
63075: LD_INT 8
63077: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63078: LD_ADDR_OWVAR 44
63082: PUSH
63083: LD_INT 10
63085: PUSH
63086: LD_INT 12
63088: PUSH
63089: LD_INT 14
63091: PUSH
63092: LD_INT 13
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: PUSH
63101: LD_VAR 0 2
63105: PUSH
63106: LD_INT 9
63108: MINUS
63109: ARRAY
63110: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63111: LD_ADDR_OWVAR 45
63115: PUSH
63116: LD_INT 11
63118: PUSH
63119: LD_INT 15
63121: PUSH
63122: LD_INT 12
63124: PUSH
63125: LD_INT 15
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: PUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_INT 9
63141: MINUS
63142: ARRAY
63143: ST_TO_ADDR
// end ; 14 :
63144: GO 63563
63146: LD_INT 14
63148: DOUBLE
63149: EQUAL
63150: IFTRUE 63154
63152: GO 63165
63154: POP
// bc_type := b_workshop ; 15 :
63155: LD_ADDR_OWVAR 42
63159: PUSH
63160: LD_INT 2
63162: ST_TO_ADDR
63163: GO 63563
63165: LD_INT 15
63167: DOUBLE
63168: EQUAL
63169: IFTRUE 63173
63171: GO 63184
63173: POP
// bc_type := b_factory ; 16 :
63174: LD_ADDR_OWVAR 42
63178: PUSH
63179: LD_INT 3
63181: ST_TO_ADDR
63182: GO 63563
63184: LD_INT 16
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63192
63190: GO 63203
63192: POP
// bc_type := b_ext_gun ; 17 :
63193: LD_ADDR_OWVAR 42
63197: PUSH
63198: LD_INT 17
63200: ST_TO_ADDR
63201: GO 63563
63203: LD_INT 17
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63211
63209: GO 63239
63211: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63212: LD_ADDR_OWVAR 42
63216: PUSH
63217: LD_INT 19
63219: PUSH
63220: LD_INT 23
63222: PUSH
63223: LD_INT 19
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: PUSH
63231: LD_VAR 0 1
63235: ARRAY
63236: ST_TO_ADDR
63237: GO 63563
63239: LD_INT 18
63241: DOUBLE
63242: EQUAL
63243: IFTRUE 63247
63245: GO 63258
63247: POP
// bc_type := b_ext_radar ; 19 :
63248: LD_ADDR_OWVAR 42
63252: PUSH
63253: LD_INT 20
63255: ST_TO_ADDR
63256: GO 63563
63258: LD_INT 19
63260: DOUBLE
63261: EQUAL
63262: IFTRUE 63266
63264: GO 63277
63266: POP
// bc_type := b_ext_radio ; 20 :
63267: LD_ADDR_OWVAR 42
63271: PUSH
63272: LD_INT 22
63274: ST_TO_ADDR
63275: GO 63563
63277: LD_INT 20
63279: DOUBLE
63280: EQUAL
63281: IFTRUE 63285
63283: GO 63296
63285: POP
// bc_type := b_ext_siberium ; 21 :
63286: LD_ADDR_OWVAR 42
63290: PUSH
63291: LD_INT 21
63293: ST_TO_ADDR
63294: GO 63563
63296: LD_INT 21
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63304
63302: GO 63315
63304: POP
// bc_type := b_ext_computer ; 22 :
63305: LD_ADDR_OWVAR 42
63309: PUSH
63310: LD_INT 24
63312: ST_TO_ADDR
63313: GO 63563
63315: LD_INT 22
63317: DOUBLE
63318: EQUAL
63319: IFTRUE 63323
63321: GO 63334
63323: POP
// bc_type := b_ext_track ; 23 :
63324: LD_ADDR_OWVAR 42
63328: PUSH
63329: LD_INT 16
63331: ST_TO_ADDR
63332: GO 63563
63334: LD_INT 23
63336: DOUBLE
63337: EQUAL
63338: IFTRUE 63342
63340: GO 63353
63342: POP
// bc_type := b_ext_laser ; 24 :
63343: LD_ADDR_OWVAR 42
63347: PUSH
63348: LD_INT 25
63350: ST_TO_ADDR
63351: GO 63563
63353: LD_INT 24
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63361
63359: GO 63372
63361: POP
// bc_type := b_control_tower ; 25 :
63362: LD_ADDR_OWVAR 42
63366: PUSH
63367: LD_INT 36
63369: ST_TO_ADDR
63370: GO 63563
63372: LD_INT 25
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63391
63380: POP
// bc_type := b_breastwork ; 26 :
63381: LD_ADDR_OWVAR 42
63385: PUSH
63386: LD_INT 31
63388: ST_TO_ADDR
63389: GO 63563
63391: LD_INT 26
63393: DOUBLE
63394: EQUAL
63395: IFTRUE 63399
63397: GO 63410
63399: POP
// bc_type := b_bunker ; 27 :
63400: LD_ADDR_OWVAR 42
63404: PUSH
63405: LD_INT 32
63407: ST_TO_ADDR
63408: GO 63563
63410: LD_INT 27
63412: DOUBLE
63413: EQUAL
63414: IFTRUE 63418
63416: GO 63429
63418: POP
// bc_type := b_turret ; 28 :
63419: LD_ADDR_OWVAR 42
63423: PUSH
63424: LD_INT 33
63426: ST_TO_ADDR
63427: GO 63563
63429: LD_INT 28
63431: DOUBLE
63432: EQUAL
63433: IFTRUE 63437
63435: GO 63448
63437: POP
// bc_type := b_armoury ; 29 :
63438: LD_ADDR_OWVAR 42
63442: PUSH
63443: LD_INT 4
63445: ST_TO_ADDR
63446: GO 63563
63448: LD_INT 29
63450: DOUBLE
63451: EQUAL
63452: IFTRUE 63456
63454: GO 63467
63456: POP
// bc_type := b_barracks ; 30 :
63457: LD_ADDR_OWVAR 42
63461: PUSH
63462: LD_INT 5
63464: ST_TO_ADDR
63465: GO 63563
63467: LD_INT 30
63469: DOUBLE
63470: EQUAL
63471: IFTRUE 63475
63473: GO 63486
63475: POP
// bc_type := b_solar_power ; 31 :
63476: LD_ADDR_OWVAR 42
63480: PUSH
63481: LD_INT 27
63483: ST_TO_ADDR
63484: GO 63563
63486: LD_INT 31
63488: DOUBLE
63489: EQUAL
63490: IFTRUE 63494
63492: GO 63505
63494: POP
// bc_type := b_oil_power ; 32 :
63495: LD_ADDR_OWVAR 42
63499: PUSH
63500: LD_INT 26
63502: ST_TO_ADDR
63503: GO 63563
63505: LD_INT 32
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63513
63511: GO 63524
63513: POP
// bc_type := b_siberite_power ; 33 :
63514: LD_ADDR_OWVAR 42
63518: PUSH
63519: LD_INT 28
63521: ST_TO_ADDR
63522: GO 63563
63524: LD_INT 33
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63532
63530: GO 63543
63532: POP
// bc_type := b_oil_mine ; 34 :
63533: LD_ADDR_OWVAR 42
63537: PUSH
63538: LD_INT 29
63540: ST_TO_ADDR
63541: GO 63563
63543: LD_INT 34
63545: DOUBLE
63546: EQUAL
63547: IFTRUE 63551
63549: GO 63562
63551: POP
// bc_type := b_siberite_mine ; end ;
63552: LD_ADDR_OWVAR 42
63556: PUSH
63557: LD_INT 30
63559: ST_TO_ADDR
63560: GO 63563
63562: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63563: LD_ADDR_VAR 0 8
63567: PUSH
63568: LD_VAR 0 5
63572: PPUSH
63573: LD_VAR 0 6
63577: PPUSH
63578: LD_VAR 0 3
63582: PPUSH
63583: CALL_OW 47
63587: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63588: LD_OWVAR 42
63592: PUSH
63593: LD_INT 32
63595: PUSH
63596: LD_INT 33
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: IN
63603: IFFALSE 63619
// PlaceWeaponTurret ( b , weapon ) ;
63605: LD_VAR 0 8
63609: PPUSH
63610: LD_VAR 0 4
63614: PPUSH
63615: CALL_OW 431
// end ;
63619: LD_VAR 0 7
63623: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
63629: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63630: LD_ADDR_VAR 0 4
63634: PUSH
63635: LD_INT 22
63637: PUSH
63638: LD_OWVAR 2
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: LD_INT 30
63652: PUSH
63653: LD_INT 0
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 30
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: LIST
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PPUSH
63679: CALL_OW 69
63683: ST_TO_ADDR
// if not tmp then
63684: LD_VAR 0 4
63688: NOT
63689: IFFALSE 63693
// exit ;
63691: GO 63752
// for i in tmp do
63693: LD_ADDR_VAR 0 2
63697: PUSH
63698: LD_VAR 0 4
63702: PUSH
63703: FOR_IN
63704: IFFALSE 63750
// for j = 1 to 3 do
63706: LD_ADDR_VAR 0 3
63710: PUSH
63711: DOUBLE
63712: LD_INT 1
63714: DEC
63715: ST_TO_ADDR
63716: LD_INT 3
63718: PUSH
63719: FOR_TO
63720: IFFALSE 63746
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63722: LD_VAR 0 2
63726: PPUSH
63727: CALL_OW 274
63731: PPUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: LD_INT 99999
63739: PPUSH
63740: CALL_OW 277
63744: GO 63719
63746: POP
63747: POP
63748: GO 63703
63750: POP
63751: POP
// end ;
63752: LD_VAR 0 1
63756: RET
// export function hHackSetLevel10 ; var i , j ; begin
63757: LD_INT 0
63759: PPUSH
63760: PPUSH
63761: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63762: LD_ADDR_VAR 0 2
63766: PUSH
63767: LD_INT 21
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PPUSH
63777: CALL_OW 69
63781: PUSH
63782: FOR_IN
63783: IFFALSE 63835
// if IsSelected ( i ) then
63785: LD_VAR 0 2
63789: PPUSH
63790: CALL_OW 306
63794: IFFALSE 63833
// begin for j := 1 to 4 do
63796: LD_ADDR_VAR 0 3
63800: PUSH
63801: DOUBLE
63802: LD_INT 1
63804: DEC
63805: ST_TO_ADDR
63806: LD_INT 4
63808: PUSH
63809: FOR_TO
63810: IFFALSE 63831
// SetSkill ( i , j , 10 ) ;
63812: LD_VAR 0 2
63816: PPUSH
63817: LD_VAR 0 3
63821: PPUSH
63822: LD_INT 10
63824: PPUSH
63825: CALL_OW 237
63829: GO 63809
63831: POP
63832: POP
// end ;
63833: GO 63782
63835: POP
63836: POP
// end ;
63837: LD_VAR 0 1
63841: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63842: LD_INT 0
63844: PPUSH
63845: PPUSH
63846: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63847: LD_ADDR_VAR 0 2
63851: PUSH
63852: LD_INT 22
63854: PUSH
63855: LD_OWVAR 2
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 21
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PPUSH
63878: CALL_OW 69
63882: PUSH
63883: FOR_IN
63884: IFFALSE 63925
// begin for j := 1 to 4 do
63886: LD_ADDR_VAR 0 3
63890: PUSH
63891: DOUBLE
63892: LD_INT 1
63894: DEC
63895: ST_TO_ADDR
63896: LD_INT 4
63898: PUSH
63899: FOR_TO
63900: IFFALSE 63921
// SetSkill ( i , j , 10 ) ;
63902: LD_VAR 0 2
63906: PPUSH
63907: LD_VAR 0 3
63911: PPUSH
63912: LD_INT 10
63914: PPUSH
63915: CALL_OW 237
63919: GO 63899
63921: POP
63922: POP
// end ;
63923: GO 63883
63925: POP
63926: POP
// end ;
63927: LD_VAR 0 1
63931: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63932: LD_INT 0
63934: PPUSH
// uc_side := your_side ;
63935: LD_ADDR_OWVAR 20
63939: PUSH
63940: LD_OWVAR 2
63944: ST_TO_ADDR
// uc_nation := nation ;
63945: LD_ADDR_OWVAR 21
63949: PUSH
63950: LD_VAR 0 1
63954: ST_TO_ADDR
// InitHc ;
63955: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63959: LD_INT 0
63961: PPUSH
63962: LD_VAR 0 2
63966: PPUSH
63967: LD_VAR 0 3
63971: PPUSH
63972: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63976: LD_VAR 0 4
63980: PPUSH
63981: LD_VAR 0 5
63985: PPUSH
63986: CALL_OW 428
63990: PUSH
63991: LD_INT 0
63993: EQUAL
63994: IFFALSE 64018
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63996: CALL_OW 44
64000: PPUSH
64001: LD_VAR 0 4
64005: PPUSH
64006: LD_VAR 0 5
64010: PPUSH
64011: LD_INT 1
64013: PPUSH
64014: CALL_OW 48
// end ;
64018: LD_VAR 0 6
64022: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64023: LD_INT 0
64025: PPUSH
64026: PPUSH
// uc_side := your_side ;
64027: LD_ADDR_OWVAR 20
64031: PUSH
64032: LD_OWVAR 2
64036: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64037: LD_VAR 0 1
64041: PUSH
64042: LD_INT 1
64044: PUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 3
64050: PUSH
64051: LD_INT 4
64053: PUSH
64054: LD_INT 5
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: IN
64064: IFFALSE 64076
// uc_nation := nation_american else
64066: LD_ADDR_OWVAR 21
64070: PUSH
64071: LD_INT 1
64073: ST_TO_ADDR
64074: GO 64119
// if chassis in [ 11 , 12 , 13 , 14 ] then
64076: LD_VAR 0 1
64080: PUSH
64081: LD_INT 11
64083: PUSH
64084: LD_INT 12
64086: PUSH
64087: LD_INT 13
64089: PUSH
64090: LD_INT 14
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: IN
64099: IFFALSE 64111
// uc_nation := nation_arabian else
64101: LD_ADDR_OWVAR 21
64105: PUSH
64106: LD_INT 2
64108: ST_TO_ADDR
64109: GO 64119
// uc_nation := nation_russian ;
64111: LD_ADDR_OWVAR 21
64115: PUSH
64116: LD_INT 3
64118: ST_TO_ADDR
// vc_chassis := chassis ;
64119: LD_ADDR_OWVAR 37
64123: PUSH
64124: LD_VAR 0 1
64128: ST_TO_ADDR
// vc_engine := engine ;
64129: LD_ADDR_OWVAR 39
64133: PUSH
64134: LD_VAR 0 2
64138: ST_TO_ADDR
// vc_control := control ;
64139: LD_ADDR_OWVAR 38
64143: PUSH
64144: LD_VAR 0 3
64148: ST_TO_ADDR
// vc_weapon := weapon ;
64149: LD_ADDR_OWVAR 40
64153: PUSH
64154: LD_VAR 0 4
64158: ST_TO_ADDR
// un := CreateVehicle ;
64159: LD_ADDR_VAR 0 8
64163: PUSH
64164: CALL_OW 45
64168: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64169: LD_VAR 0 8
64173: PPUSH
64174: LD_INT 0
64176: PPUSH
64177: LD_INT 5
64179: PPUSH
64180: CALL_OW 12
64184: PPUSH
64185: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64189: LD_VAR 0 8
64193: PPUSH
64194: LD_VAR 0 5
64198: PPUSH
64199: LD_VAR 0 6
64203: PPUSH
64204: LD_INT 1
64206: PPUSH
64207: CALL_OW 48
// end ;
64211: LD_VAR 0 7
64215: RET
// export hInvincible ; every 1 do
64216: GO 64218
64218: DISABLE
// hInvincible := [ ] ;
64219: LD_ADDR_EXP 86
64223: PUSH
64224: EMPTY
64225: ST_TO_ADDR
64226: END
// every 10 do var i ;
64227: GO 64229
64229: DISABLE
64230: LD_INT 0
64232: PPUSH
// begin enable ;
64233: ENABLE
// if not hInvincible then
64234: LD_EXP 86
64238: NOT
64239: IFFALSE 64243
// exit ;
64241: GO 64287
// for i in hInvincible do
64243: LD_ADDR_VAR 0 1
64247: PUSH
64248: LD_EXP 86
64252: PUSH
64253: FOR_IN
64254: IFFALSE 64285
// if GetLives ( i ) < 1000 then
64256: LD_VAR 0 1
64260: PPUSH
64261: CALL_OW 256
64265: PUSH
64266: LD_INT 1000
64268: LESS
64269: IFFALSE 64283
// SetLives ( i , 1000 ) ;
64271: LD_VAR 0 1
64275: PPUSH
64276: LD_INT 1000
64278: PPUSH
64279: CALL_OW 234
64283: GO 64253
64285: POP
64286: POP
// end ;
64287: PPOPN 1
64289: END
// export function hHackInvincible ; var i ; begin
64290: LD_INT 0
64292: PPUSH
64293: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64294: LD_ADDR_VAR 0 2
64298: PUSH
64299: LD_INT 2
64301: PUSH
64302: LD_INT 21
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 21
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: PPUSH
64327: CALL_OW 69
64331: PUSH
64332: FOR_IN
64333: IFFALSE 64394
// if IsSelected ( i ) then
64335: LD_VAR 0 2
64339: PPUSH
64340: CALL_OW 306
64344: IFFALSE 64392
// begin if i in hInvincible then
64346: LD_VAR 0 2
64350: PUSH
64351: LD_EXP 86
64355: IN
64356: IFFALSE 64376
// hInvincible := hInvincible diff i else
64358: LD_ADDR_EXP 86
64362: PUSH
64363: LD_EXP 86
64367: PUSH
64368: LD_VAR 0 2
64372: DIFF
64373: ST_TO_ADDR
64374: GO 64392
// hInvincible := hInvincible union i ;
64376: LD_ADDR_EXP 86
64380: PUSH
64381: LD_EXP 86
64385: PUSH
64386: LD_VAR 0 2
64390: UNION
64391: ST_TO_ADDR
// end ;
64392: GO 64332
64394: POP
64395: POP
// end ;
64396: LD_VAR 0 1
64400: RET
// export function hHackInvisible ; var i , j ; begin
64401: LD_INT 0
64403: PPUSH
64404: PPUSH
64405: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64406: LD_ADDR_VAR 0 2
64410: PUSH
64411: LD_INT 21
64413: PUSH
64414: LD_INT 1
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PPUSH
64421: CALL_OW 69
64425: PUSH
64426: FOR_IN
64427: IFFALSE 64451
// if IsSelected ( i ) then
64429: LD_VAR 0 2
64433: PPUSH
64434: CALL_OW 306
64438: IFFALSE 64449
// ComForceInvisible ( i ) ;
64440: LD_VAR 0 2
64444: PPUSH
64445: CALL_OW 496
64449: GO 64426
64451: POP
64452: POP
// end ;
64453: LD_VAR 0 1
64457: RET
// export function hHackChangeYourSide ; begin
64458: LD_INT 0
64460: PPUSH
// if your_side = 8 then
64461: LD_OWVAR 2
64465: PUSH
64466: LD_INT 8
64468: EQUAL
64469: IFFALSE 64481
// your_side := 0 else
64471: LD_ADDR_OWVAR 2
64475: PUSH
64476: LD_INT 0
64478: ST_TO_ADDR
64479: GO 64495
// your_side := your_side + 1 ;
64481: LD_ADDR_OWVAR 2
64485: PUSH
64486: LD_OWVAR 2
64490: PUSH
64491: LD_INT 1
64493: PLUS
64494: ST_TO_ADDR
// end ;
64495: LD_VAR 0 1
64499: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64500: LD_INT 0
64502: PPUSH
64503: PPUSH
64504: PPUSH
// for i in all_units do
64505: LD_ADDR_VAR 0 2
64509: PUSH
64510: LD_OWVAR 3
64514: PUSH
64515: FOR_IN
64516: IFFALSE 64594
// if IsSelected ( i ) then
64518: LD_VAR 0 2
64522: PPUSH
64523: CALL_OW 306
64527: IFFALSE 64592
// begin j := GetSide ( i ) ;
64529: LD_ADDR_VAR 0 3
64533: PUSH
64534: LD_VAR 0 2
64538: PPUSH
64539: CALL_OW 255
64543: ST_TO_ADDR
// if j = 8 then
64544: LD_VAR 0 3
64548: PUSH
64549: LD_INT 8
64551: EQUAL
64552: IFFALSE 64564
// j := 0 else
64554: LD_ADDR_VAR 0 3
64558: PUSH
64559: LD_INT 0
64561: ST_TO_ADDR
64562: GO 64578
// j := j + 1 ;
64564: LD_ADDR_VAR 0 3
64568: PUSH
64569: LD_VAR 0 3
64573: PUSH
64574: LD_INT 1
64576: PLUS
64577: ST_TO_ADDR
// SetSide ( i , j ) ;
64578: LD_VAR 0 2
64582: PPUSH
64583: LD_VAR 0 3
64587: PPUSH
64588: CALL_OW 235
// end ;
64592: GO 64515
64594: POP
64595: POP
// end ;
64596: LD_VAR 0 1
64600: RET
// export function hHackFog ; begin
64601: LD_INT 0
64603: PPUSH
// FogOff ( true ) ;
64604: LD_INT 1
64606: PPUSH
64607: CALL_OW 344
// end ;
64611: LD_VAR 0 1
64615: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64616: LD_INT 0
64618: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64619: LD_VAR 0 1
64623: PPUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: LD_VAR 0 3
64633: PPUSH
64634: LD_INT 1
64636: PPUSH
64637: LD_INT 1
64639: PPUSH
64640: CALL_OW 483
// CenterOnXY ( x , y ) ;
64644: LD_VAR 0 2
64648: PPUSH
64649: LD_VAR 0 3
64653: PPUSH
64654: CALL_OW 84
// end ;
64658: LD_VAR 0 4
64662: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64663: LD_INT 0
64665: PPUSH
64666: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64667: LD_VAR 0 1
64671: NOT
64672: PUSH
64673: LD_VAR 0 2
64677: PPUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: CALL_OW 488
64687: NOT
64688: OR
64689: PUSH
64690: LD_VAR 0 1
64694: PPUSH
64695: CALL_OW 266
64699: PUSH
64700: LD_INT 3
64702: NONEQUAL
64703: PUSH
64704: LD_VAR 0 1
64708: PPUSH
64709: CALL_OW 247
64713: PUSH
64714: LD_INT 1
64716: EQUAL
64717: NOT
64718: AND
64719: OR
64720: IFFALSE 64724
// exit ;
64722: GO 64873
// if GetType ( factory ) = unit_human then
64724: LD_VAR 0 1
64728: PPUSH
64729: CALL_OW 247
64733: PUSH
64734: LD_INT 1
64736: EQUAL
64737: IFFALSE 64754
// factory := IsInUnit ( factory ) ;
64739: LD_ADDR_VAR 0 1
64743: PUSH
64744: LD_VAR 0 1
64748: PPUSH
64749: CALL_OW 310
64753: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64754: LD_VAR 0 1
64758: PPUSH
64759: CALL_OW 266
64763: PUSH
64764: LD_INT 3
64766: NONEQUAL
64767: IFFALSE 64771
// exit ;
64769: GO 64873
// if HexInfo ( x , y ) = factory then
64771: LD_VAR 0 2
64775: PPUSH
64776: LD_VAR 0 3
64780: PPUSH
64781: CALL_OW 428
64785: PUSH
64786: LD_VAR 0 1
64790: EQUAL
64791: IFFALSE 64818
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64793: LD_ADDR_EXP 87
64797: PUSH
64798: LD_EXP 87
64802: PPUSH
64803: LD_VAR 0 1
64807: PPUSH
64808: LD_INT 0
64810: PPUSH
64811: CALL_OW 1
64815: ST_TO_ADDR
64816: GO 64869
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64818: LD_ADDR_EXP 87
64822: PUSH
64823: LD_EXP 87
64827: PPUSH
64828: LD_VAR 0 1
64832: PPUSH
64833: LD_VAR 0 1
64837: PPUSH
64838: CALL_OW 255
64842: PUSH
64843: LD_VAR 0 1
64847: PUSH
64848: LD_VAR 0 2
64852: PUSH
64853: LD_VAR 0 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: PPUSH
64864: CALL_OW 1
64868: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64869: CALL 64878 0 0
// end ;
64873: LD_VAR 0 4
64877: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64878: LD_INT 0
64880: PPUSH
64881: PPUSH
64882: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64883: LD_STRING resetFactoryWaypoint();
64885: PPUSH
64886: CALL_OW 559
// if factoryWaypoints then
64890: LD_EXP 87
64894: IFFALSE 65020
// begin list := PrepareArray ( factoryWaypoints ) ;
64896: LD_ADDR_VAR 0 3
64900: PUSH
64901: LD_EXP 87
64905: PPUSH
64906: CALL 49708 0 1
64910: ST_TO_ADDR
// for i := 1 to list do
64911: LD_ADDR_VAR 0 2
64915: PUSH
64916: DOUBLE
64917: LD_INT 1
64919: DEC
64920: ST_TO_ADDR
64921: LD_VAR 0 3
64925: PUSH
64926: FOR_TO
64927: IFFALSE 65018
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64929: LD_STRING setFactoryWaypointXY(
64931: PUSH
64932: LD_VAR 0 3
64936: PUSH
64937: LD_VAR 0 2
64941: ARRAY
64942: PUSH
64943: LD_INT 1
64945: ARRAY
64946: STR
64947: PUSH
64948: LD_STRING ,
64950: STR
64951: PUSH
64952: LD_VAR 0 3
64956: PUSH
64957: LD_VAR 0 2
64961: ARRAY
64962: PUSH
64963: LD_INT 2
64965: ARRAY
64966: STR
64967: PUSH
64968: LD_STRING ,
64970: STR
64971: PUSH
64972: LD_VAR 0 3
64976: PUSH
64977: LD_VAR 0 2
64981: ARRAY
64982: PUSH
64983: LD_INT 3
64985: ARRAY
64986: STR
64987: PUSH
64988: LD_STRING ,
64990: STR
64991: PUSH
64992: LD_VAR 0 3
64996: PUSH
64997: LD_VAR 0 2
65001: ARRAY
65002: PUSH
65003: LD_INT 4
65005: ARRAY
65006: STR
65007: PUSH
65008: LD_STRING )
65010: STR
65011: PPUSH
65012: CALL_OW 559
65016: GO 64926
65018: POP
65019: POP
// end ; end ;
65020: LD_VAR 0 1
65024: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65025: LD_INT 0
65027: PPUSH
// if HexInfo ( x , y ) = warehouse then
65028: LD_VAR 0 2
65032: PPUSH
65033: LD_VAR 0 3
65037: PPUSH
65038: CALL_OW 428
65042: PUSH
65043: LD_VAR 0 1
65047: EQUAL
65048: IFFALSE 65075
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65050: LD_ADDR_EXP 88
65054: PUSH
65055: LD_EXP 88
65059: PPUSH
65060: LD_VAR 0 1
65064: PPUSH
65065: LD_INT 0
65067: PPUSH
65068: CALL_OW 1
65072: ST_TO_ADDR
65073: GO 65126
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65075: LD_ADDR_EXP 88
65079: PUSH
65080: LD_EXP 88
65084: PPUSH
65085: LD_VAR 0 1
65089: PPUSH
65090: LD_VAR 0 1
65094: PPUSH
65095: CALL_OW 255
65099: PUSH
65100: LD_VAR 0 1
65104: PUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_VAR 0 3
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: PPUSH
65121: CALL_OW 1
65125: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65126: CALL 65135 0 0
// end ;
65130: LD_VAR 0 4
65134: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65135: LD_INT 0
65137: PPUSH
65138: PPUSH
65139: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65140: LD_STRING resetWarehouseGatheringPoints();
65142: PPUSH
65143: CALL_OW 559
// if warehouseGatheringPoints then
65147: LD_EXP 88
65151: IFFALSE 65277
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65153: LD_ADDR_VAR 0 3
65157: PUSH
65158: LD_EXP 88
65162: PPUSH
65163: CALL 49708 0 1
65167: ST_TO_ADDR
// for i := 1 to list do
65168: LD_ADDR_VAR 0 2
65172: PUSH
65173: DOUBLE
65174: LD_INT 1
65176: DEC
65177: ST_TO_ADDR
65178: LD_VAR 0 3
65182: PUSH
65183: FOR_TO
65184: IFFALSE 65275
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65186: LD_STRING setWarehouseGatheringPointXY(
65188: PUSH
65189: LD_VAR 0 3
65193: PUSH
65194: LD_VAR 0 2
65198: ARRAY
65199: PUSH
65200: LD_INT 1
65202: ARRAY
65203: STR
65204: PUSH
65205: LD_STRING ,
65207: STR
65208: PUSH
65209: LD_VAR 0 3
65213: PUSH
65214: LD_VAR 0 2
65218: ARRAY
65219: PUSH
65220: LD_INT 2
65222: ARRAY
65223: STR
65224: PUSH
65225: LD_STRING ,
65227: STR
65228: PUSH
65229: LD_VAR 0 3
65233: PUSH
65234: LD_VAR 0 2
65238: ARRAY
65239: PUSH
65240: LD_INT 3
65242: ARRAY
65243: STR
65244: PUSH
65245: LD_STRING ,
65247: STR
65248: PUSH
65249: LD_VAR 0 3
65253: PUSH
65254: LD_VAR 0 2
65258: ARRAY
65259: PUSH
65260: LD_INT 4
65262: ARRAY
65263: STR
65264: PUSH
65265: LD_STRING )
65267: STR
65268: PPUSH
65269: CALL_OW 559
65273: GO 65183
65275: POP
65276: POP
// end ; end ;
65277: LD_VAR 0 1
65281: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65282: LD_EXP 88
65286: IFFALSE 65971
65288: GO 65290
65290: DISABLE
65291: LD_INT 0
65293: PPUSH
65294: PPUSH
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
65299: PPUSH
65300: PPUSH
65301: PPUSH
// begin enable ;
65302: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65303: LD_ADDR_VAR 0 3
65307: PUSH
65308: LD_EXP 88
65312: PPUSH
65313: CALL 49708 0 1
65317: ST_TO_ADDR
// if not list then
65318: LD_VAR 0 3
65322: NOT
65323: IFFALSE 65327
// exit ;
65325: GO 65971
// for i := 1 to list do
65327: LD_ADDR_VAR 0 1
65331: PUSH
65332: DOUBLE
65333: LD_INT 1
65335: DEC
65336: ST_TO_ADDR
65337: LD_VAR 0 3
65341: PUSH
65342: FOR_TO
65343: IFFALSE 65969
// begin depot := list [ i ] [ 2 ] ;
65345: LD_ADDR_VAR 0 8
65349: PUSH
65350: LD_VAR 0 3
65354: PUSH
65355: LD_VAR 0 1
65359: ARRAY
65360: PUSH
65361: LD_INT 2
65363: ARRAY
65364: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65365: LD_ADDR_VAR 0 5
65369: PUSH
65370: LD_VAR 0 3
65374: PUSH
65375: LD_VAR 0 1
65379: ARRAY
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65385: LD_VAR 0 8
65389: PPUSH
65390: CALL_OW 301
65394: PUSH
65395: LD_VAR 0 5
65399: PUSH
65400: LD_VAR 0 8
65404: PPUSH
65405: CALL_OW 255
65409: NONEQUAL
65410: OR
65411: IFFALSE 65440
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65413: LD_ADDR_EXP 88
65417: PUSH
65418: LD_EXP 88
65422: PPUSH
65423: LD_VAR 0 8
65427: PPUSH
65428: LD_INT 0
65430: PPUSH
65431: CALL_OW 1
65435: ST_TO_ADDR
// exit ;
65436: POP
65437: POP
65438: GO 65971
// end ; x := list [ i ] [ 3 ] ;
65440: LD_ADDR_VAR 0 6
65444: PUSH
65445: LD_VAR 0 3
65449: PUSH
65450: LD_VAR 0 1
65454: ARRAY
65455: PUSH
65456: LD_INT 3
65458: ARRAY
65459: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65460: LD_ADDR_VAR 0 7
65464: PUSH
65465: LD_VAR 0 3
65469: PUSH
65470: LD_VAR 0 1
65474: ARRAY
65475: PUSH
65476: LD_INT 4
65478: ARRAY
65479: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65480: LD_ADDR_VAR 0 9
65484: PUSH
65485: LD_VAR 0 6
65489: PPUSH
65490: LD_VAR 0 7
65494: PPUSH
65495: LD_INT 16
65497: PPUSH
65498: CALL 48296 0 3
65502: ST_TO_ADDR
// if not cratesNearbyPoint then
65503: LD_VAR 0 9
65507: NOT
65508: IFFALSE 65514
// exit ;
65510: POP
65511: POP
65512: GO 65971
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65514: LD_ADDR_VAR 0 4
65518: PUSH
65519: LD_INT 22
65521: PUSH
65522: LD_VAR 0 5
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 60
65536: PUSH
65537: EMPTY
65538: LIST
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 91
65546: PUSH
65547: LD_VAR 0 8
65551: PUSH
65552: LD_INT 6
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 25
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 25
65575: PUSH
65576: LD_INT 16
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: PPUSH
65594: CALL_OW 69
65598: PUSH
65599: LD_VAR 0 8
65603: PPUSH
65604: CALL_OW 313
65608: PPUSH
65609: LD_INT 3
65611: PUSH
65612: LD_INT 60
65614: PUSH
65615: EMPTY
65616: LIST
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: PUSH
65625: LD_INT 25
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 25
65637: PUSH
65638: LD_INT 16
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PPUSH
65654: CALL_OW 72
65658: UNION
65659: ST_TO_ADDR
// if tmp then
65660: LD_VAR 0 4
65664: IFFALSE 65744
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65666: LD_ADDR_VAR 0 4
65670: PUSH
65671: LD_VAR 0 4
65675: PPUSH
65676: LD_INT 3
65678: PPUSH
65679: CALL 46265 0 2
65683: ST_TO_ADDR
// for j in tmp do
65684: LD_ADDR_VAR 0 2
65688: PUSH
65689: LD_VAR 0 4
65693: PUSH
65694: FOR_IN
65695: IFFALSE 65738
// begin if IsInUnit ( j ) then
65697: LD_VAR 0 2
65701: PPUSH
65702: CALL_OW 310
65706: IFFALSE 65717
// ComExit ( j ) ;
65708: LD_VAR 0 2
65712: PPUSH
65713: CALL 46348 0 1
// AddComCollect ( j , x , y ) ;
65717: LD_VAR 0 2
65721: PPUSH
65722: LD_VAR 0 6
65726: PPUSH
65727: LD_VAR 0 7
65731: PPUSH
65732: CALL_OW 177
// end ;
65736: GO 65694
65738: POP
65739: POP
// exit ;
65740: POP
65741: POP
65742: GO 65971
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65744: LD_ADDR_VAR 0 4
65748: PUSH
65749: LD_INT 22
65751: PUSH
65752: LD_VAR 0 5
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 91
65763: PUSH
65764: LD_VAR 0 8
65768: PUSH
65769: LD_INT 8
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 2
65779: PUSH
65780: LD_INT 34
65782: PUSH
65783: LD_INT 12
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 34
65792: PUSH
65793: LD_INT 51
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 34
65802: PUSH
65803: LD_INT 32
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 34
65812: PUSH
65813: LD_INT 89
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: PPUSH
65832: CALL_OW 69
65836: ST_TO_ADDR
// if tmp then
65837: LD_VAR 0 4
65841: IFFALSE 65967
// begin for j in tmp do
65843: LD_ADDR_VAR 0 2
65847: PUSH
65848: LD_VAR 0 4
65852: PUSH
65853: FOR_IN
65854: IFFALSE 65965
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65856: LD_VAR 0 2
65860: PPUSH
65861: CALL_OW 262
65865: PUSH
65866: LD_INT 3
65868: EQUAL
65869: PUSH
65870: LD_VAR 0 2
65874: PPUSH
65875: CALL_OW 261
65879: PUSH
65880: LD_INT 20
65882: GREATER
65883: OR
65884: PUSH
65885: LD_VAR 0 2
65889: PPUSH
65890: CALL_OW 314
65894: NOT
65895: AND
65896: PUSH
65897: LD_VAR 0 2
65901: PPUSH
65902: CALL_OW 263
65906: PUSH
65907: LD_INT 1
65909: NONEQUAL
65910: PUSH
65911: LD_VAR 0 2
65915: PPUSH
65916: CALL_OW 311
65920: OR
65921: AND
65922: IFFALSE 65963
// begin ComCollect ( j , x , y ) ;
65924: LD_VAR 0 2
65928: PPUSH
65929: LD_VAR 0 6
65933: PPUSH
65934: LD_VAR 0 7
65938: PPUSH
65939: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65943: LD_VAR 0 2
65947: PPUSH
65948: LD_VAR 0 8
65952: PPUSH
65953: CALL_OW 172
// exit ;
65957: POP
65958: POP
65959: POP
65960: POP
65961: GO 65971
// end ;
65963: GO 65853
65965: POP
65966: POP
// end ; end ;
65967: GO 65342
65969: POP
65970: POP
// end ; end_of_file
65971: PPOPN 9
65973: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65974: LD_INT 0
65976: PPUSH
65977: PPUSH
65978: PPUSH
65979: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65980: LD_VAR 0 1
65984: PPUSH
65985: CALL_OW 264
65989: PUSH
65990: LD_INT 91
65992: EQUAL
65993: IFFALSE 66065
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65995: LD_INT 68
65997: PPUSH
65998: LD_VAR 0 1
66002: PPUSH
66003: CALL_OW 255
66007: PPUSH
66008: CALL_OW 321
66012: PUSH
66013: LD_INT 2
66015: EQUAL
66016: IFFALSE 66028
// eff := 70 else
66018: LD_ADDR_VAR 0 4
66022: PUSH
66023: LD_INT 70
66025: ST_TO_ADDR
66026: GO 66036
// eff := 30 ;
66028: LD_ADDR_VAR 0 4
66032: PUSH
66033: LD_INT 30
66035: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66036: LD_VAR 0 1
66040: PPUSH
66041: CALL_OW 250
66045: PPUSH
66046: LD_VAR 0 1
66050: PPUSH
66051: CALL_OW 251
66055: PPUSH
66056: LD_VAR 0 4
66060: PPUSH
66061: CALL_OW 495
// end ; end ;
66065: LD_VAR 0 2
66069: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66070: LD_INT 0
66072: PPUSH
// end ;
66073: LD_VAR 0 4
66077: RET
// export function SOS_Command ( cmd ) ; begin
66078: LD_INT 0
66080: PPUSH
// end ;
66081: LD_VAR 0 2
66085: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66086: LD_INT 0
66088: PPUSH
// end ;
66089: LD_VAR 0 6
66093: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66094: LD_INT 0
66096: PPUSH
66097: PPUSH
// if not vehicle or not factory then
66098: LD_VAR 0 1
66102: NOT
66103: PUSH
66104: LD_VAR 0 2
66108: NOT
66109: OR
66110: IFFALSE 66114
// exit ;
66112: GO 66345
// if factoryWaypoints >= factory then
66114: LD_EXP 87
66118: PUSH
66119: LD_VAR 0 2
66123: GREATEREQUAL
66124: IFFALSE 66345
// if factoryWaypoints [ factory ] then
66126: LD_EXP 87
66130: PUSH
66131: LD_VAR 0 2
66135: ARRAY
66136: IFFALSE 66345
// begin if GetControl ( vehicle ) = control_manual then
66138: LD_VAR 0 1
66142: PPUSH
66143: CALL_OW 263
66147: PUSH
66148: LD_INT 1
66150: EQUAL
66151: IFFALSE 66232
// begin driver := IsDrivenBy ( vehicle ) ;
66153: LD_ADDR_VAR 0 4
66157: PUSH
66158: LD_VAR 0 1
66162: PPUSH
66163: CALL_OW 311
66167: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66168: LD_VAR 0 4
66172: PPUSH
66173: LD_EXP 87
66177: PUSH
66178: LD_VAR 0 2
66182: ARRAY
66183: PUSH
66184: LD_INT 3
66186: ARRAY
66187: PPUSH
66188: LD_EXP 87
66192: PUSH
66193: LD_VAR 0 2
66197: ARRAY
66198: PUSH
66199: LD_INT 4
66201: ARRAY
66202: PPUSH
66203: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66207: LD_VAR 0 4
66211: PPUSH
66212: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66216: LD_VAR 0 4
66220: PPUSH
66221: LD_VAR 0 2
66225: PPUSH
66226: CALL_OW 180
// end else
66230: GO 66345
// if GetControl ( vehicle ) = control_remote then
66232: LD_VAR 0 1
66236: PPUSH
66237: CALL_OW 263
66241: PUSH
66242: LD_INT 2
66244: EQUAL
66245: IFFALSE 66306
// begin wait ( 0 0$2 ) ;
66247: LD_INT 70
66249: PPUSH
66250: CALL_OW 67
// if Connect ( vehicle ) then
66254: LD_VAR 0 1
66258: PPUSH
66259: CALL 16569 0 1
66263: IFFALSE 66304
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66265: LD_VAR 0 1
66269: PPUSH
66270: LD_EXP 87
66274: PUSH
66275: LD_VAR 0 2
66279: ARRAY
66280: PUSH
66281: LD_INT 3
66283: ARRAY
66284: PPUSH
66285: LD_EXP 87
66289: PUSH
66290: LD_VAR 0 2
66294: ARRAY
66295: PUSH
66296: LD_INT 4
66298: ARRAY
66299: PPUSH
66300: CALL_OW 171
// end else
66304: GO 66345
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66306: LD_VAR 0 1
66310: PPUSH
66311: LD_EXP 87
66315: PUSH
66316: LD_VAR 0 2
66320: ARRAY
66321: PUSH
66322: LD_INT 3
66324: ARRAY
66325: PPUSH
66326: LD_EXP 87
66330: PUSH
66331: LD_VAR 0 2
66335: ARRAY
66336: PUSH
66337: LD_INT 4
66339: ARRAY
66340: PPUSH
66341: CALL_OW 171
// end ; end ;
66345: LD_VAR 0 3
66349: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66350: LD_INT 0
66352: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66353: LD_VAR 0 1
66357: PUSH
66358: LD_INT 250
66360: EQUAL
66361: PUSH
66362: LD_VAR 0 2
66366: PPUSH
66367: CALL_OW 264
66371: PUSH
66372: LD_INT 81
66374: EQUAL
66375: AND
66376: IFFALSE 66397
// MinerPlaceMine ( unit , x , y ) ;
66378: LD_VAR 0 2
66382: PPUSH
66383: LD_VAR 0 4
66387: PPUSH
66388: LD_VAR 0 5
66392: PPUSH
66393: CALL 68782 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 251
66404: EQUAL
66405: PUSH
66406: LD_VAR 0 2
66410: PPUSH
66411: CALL_OW 264
66415: PUSH
66416: LD_INT 81
66418: EQUAL
66419: AND
66420: IFFALSE 66441
// MinerDetonateMine ( unit , x , y ) ;
66422: LD_VAR 0 2
66426: PPUSH
66427: LD_VAR 0 4
66431: PPUSH
66432: LD_VAR 0 5
66436: PPUSH
66437: CALL 69057 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66441: LD_VAR 0 1
66445: PUSH
66446: LD_INT 252
66448: EQUAL
66449: PUSH
66450: LD_VAR 0 2
66454: PPUSH
66455: CALL_OW 264
66459: PUSH
66460: LD_INT 81
66462: EQUAL
66463: AND
66464: IFFALSE 66485
// MinerCreateMinefield ( unit , x , y ) ;
66466: LD_VAR 0 2
66470: PPUSH
66471: LD_VAR 0 4
66475: PPUSH
66476: LD_VAR 0 5
66480: PPUSH
66481: CALL 69474 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66485: LD_VAR 0 1
66489: PUSH
66490: LD_INT 253
66492: EQUAL
66493: PUSH
66494: LD_VAR 0 2
66498: PPUSH
66499: CALL_OW 257
66503: PUSH
66504: LD_INT 5
66506: EQUAL
66507: AND
66508: IFFALSE 66529
// ComBinocular ( unit , x , y ) ;
66510: LD_VAR 0 2
66514: PPUSH
66515: LD_VAR 0 4
66519: PPUSH
66520: LD_VAR 0 5
66524: PPUSH
66525: CALL 69843 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66529: LD_VAR 0 1
66533: PUSH
66534: LD_INT 254
66536: EQUAL
66537: PUSH
66538: LD_VAR 0 2
66542: PPUSH
66543: CALL_OW 264
66547: PUSH
66548: LD_INT 99
66550: EQUAL
66551: AND
66552: PUSH
66553: LD_VAR 0 3
66557: PPUSH
66558: CALL_OW 263
66562: PUSH
66563: LD_INT 3
66565: EQUAL
66566: AND
66567: IFFALSE 66583
// HackDestroyVehicle ( unit , selectedUnit ) ;
66569: LD_VAR 0 2
66573: PPUSH
66574: LD_VAR 0 3
66578: PPUSH
66579: CALL 68146 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 255
66590: EQUAL
66591: PUSH
66592: LD_VAR 0 2
66596: PPUSH
66597: CALL_OW 264
66601: PUSH
66602: LD_INT 14
66604: PUSH
66605: LD_INT 53
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: IN
66612: AND
66613: PUSH
66614: LD_VAR 0 4
66618: PPUSH
66619: LD_VAR 0 5
66623: PPUSH
66624: CALL_OW 488
66628: AND
66629: IFFALSE 66653
// CutTreeXYR ( unit , x , y , 12 ) ;
66631: LD_VAR 0 2
66635: PPUSH
66636: LD_VAR 0 4
66640: PPUSH
66641: LD_VAR 0 5
66645: PPUSH
66646: LD_INT 12
66648: PPUSH
66649: CALL 66716 0 4
// if cmd = 256 then
66653: LD_VAR 0 1
66657: PUSH
66658: LD_INT 256
66660: EQUAL
66661: IFFALSE 66682
// SetFactoryWaypoint ( unit , x , y ) ;
66663: LD_VAR 0 2
66667: PPUSH
66668: LD_VAR 0 4
66672: PPUSH
66673: LD_VAR 0 5
66677: PPUSH
66678: CALL 64663 0 3
// if cmd = 257 then
66682: LD_VAR 0 1
66686: PUSH
66687: LD_INT 257
66689: EQUAL
66690: IFFALSE 66711
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66692: LD_VAR 0 2
66696: PPUSH
66697: LD_VAR 0 4
66701: PPUSH
66702: LD_VAR 0 5
66706: PPUSH
66707: CALL 65025 0 3
// end ;
66711: LD_VAR 0 6
66715: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
66721: PPUSH
66722: PPUSH
66723: PPUSH
66724: PPUSH
66725: PPUSH
66726: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66727: LD_VAR 0 1
66731: NOT
66732: PUSH
66733: LD_VAR 0 2
66737: PPUSH
66738: LD_VAR 0 3
66742: PPUSH
66743: CALL_OW 488
66747: NOT
66748: OR
66749: PUSH
66750: LD_VAR 0 4
66754: NOT
66755: OR
66756: IFFALSE 66760
// exit ;
66758: GO 67100
// list := [ ] ;
66760: LD_ADDR_VAR 0 13
66764: PUSH
66765: EMPTY
66766: ST_TO_ADDR
// if x - r < 0 then
66767: LD_VAR 0 2
66771: PUSH
66772: LD_VAR 0 4
66776: MINUS
66777: PUSH
66778: LD_INT 0
66780: LESS
66781: IFFALSE 66793
// min_x := 0 else
66783: LD_ADDR_VAR 0 7
66787: PUSH
66788: LD_INT 0
66790: ST_TO_ADDR
66791: GO 66809
// min_x := x - r ;
66793: LD_ADDR_VAR 0 7
66797: PUSH
66798: LD_VAR 0 2
66802: PUSH
66803: LD_VAR 0 4
66807: MINUS
66808: ST_TO_ADDR
// if y - r < 0 then
66809: LD_VAR 0 3
66813: PUSH
66814: LD_VAR 0 4
66818: MINUS
66819: PUSH
66820: LD_INT 0
66822: LESS
66823: IFFALSE 66835
// min_y := 0 else
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_INT 0
66832: ST_TO_ADDR
66833: GO 66851
// min_y := y - r ;
66835: LD_ADDR_VAR 0 8
66839: PUSH
66840: LD_VAR 0 3
66844: PUSH
66845: LD_VAR 0 4
66849: MINUS
66850: ST_TO_ADDR
// max_x := x + r ;
66851: LD_ADDR_VAR 0 9
66855: PUSH
66856: LD_VAR 0 2
66860: PUSH
66861: LD_VAR 0 4
66865: PLUS
66866: ST_TO_ADDR
// max_y := y + r ;
66867: LD_ADDR_VAR 0 10
66871: PUSH
66872: LD_VAR 0 3
66876: PUSH
66877: LD_VAR 0 4
66881: PLUS
66882: ST_TO_ADDR
// for _x = min_x to max_x do
66883: LD_ADDR_VAR 0 11
66887: PUSH
66888: DOUBLE
66889: LD_VAR 0 7
66893: DEC
66894: ST_TO_ADDR
66895: LD_VAR 0 9
66899: PUSH
66900: FOR_TO
66901: IFFALSE 67018
// for _y = min_y to max_y do
66903: LD_ADDR_VAR 0 12
66907: PUSH
66908: DOUBLE
66909: LD_VAR 0 8
66913: DEC
66914: ST_TO_ADDR
66915: LD_VAR 0 10
66919: PUSH
66920: FOR_TO
66921: IFFALSE 67014
// begin if not ValidHex ( _x , _y ) then
66923: LD_VAR 0 11
66927: PPUSH
66928: LD_VAR 0 12
66932: PPUSH
66933: CALL_OW 488
66937: NOT
66938: IFFALSE 66942
// continue ;
66940: GO 66920
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66942: LD_VAR 0 11
66946: PPUSH
66947: LD_VAR 0 12
66951: PPUSH
66952: CALL_OW 351
66956: PUSH
66957: LD_VAR 0 11
66961: PPUSH
66962: LD_VAR 0 12
66966: PPUSH
66967: CALL_OW 554
66971: AND
66972: IFFALSE 67012
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66974: LD_ADDR_VAR 0 13
66978: PUSH
66979: LD_VAR 0 13
66983: PPUSH
66984: LD_VAR 0 13
66988: PUSH
66989: LD_INT 1
66991: PLUS
66992: PPUSH
66993: LD_VAR 0 11
66997: PUSH
66998: LD_VAR 0 12
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PPUSH
67007: CALL_OW 2
67011: ST_TO_ADDR
// end ;
67012: GO 66920
67014: POP
67015: POP
67016: GO 66900
67018: POP
67019: POP
// if not list then
67020: LD_VAR 0 13
67024: NOT
67025: IFFALSE 67029
// exit ;
67027: GO 67100
// for i in list do
67029: LD_ADDR_VAR 0 6
67033: PUSH
67034: LD_VAR 0 13
67038: PUSH
67039: FOR_IN
67040: IFFALSE 67098
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67042: LD_VAR 0 1
67046: PPUSH
67047: LD_STRING M
67049: PUSH
67050: LD_VAR 0 6
67054: PUSH
67055: LD_INT 1
67057: ARRAY
67058: PUSH
67059: LD_VAR 0 6
67063: PUSH
67064: LD_INT 2
67066: ARRAY
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: PUSH
67089: EMPTY
67090: LIST
67091: PPUSH
67092: CALL_OW 447
67096: GO 67039
67098: POP
67099: POP
// end ;
67100: LD_VAR 0 5
67104: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67105: LD_EXP 90
67109: NOT
67110: IFFALSE 67160
67112: GO 67114
67114: DISABLE
// begin initHack := true ;
67115: LD_ADDR_EXP 90
67119: PUSH
67120: LD_INT 1
67122: ST_TO_ADDR
// hackTanks := [ ] ;
67123: LD_ADDR_EXP 91
67127: PUSH
67128: EMPTY
67129: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67130: LD_ADDR_EXP 92
67134: PUSH
67135: EMPTY
67136: ST_TO_ADDR
// hackLimit := 3 ;
67137: LD_ADDR_EXP 93
67141: PUSH
67142: LD_INT 3
67144: ST_TO_ADDR
// hackDist := 12 ;
67145: LD_ADDR_EXP 94
67149: PUSH
67150: LD_INT 12
67152: ST_TO_ADDR
// hackCounter := [ ] ;
67153: LD_ADDR_EXP 95
67157: PUSH
67158: EMPTY
67159: ST_TO_ADDR
// end ;
67160: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67161: LD_EXP 90
67165: PUSH
67166: LD_INT 34
67168: PUSH
67169: LD_INT 99
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PPUSH
67176: CALL_OW 69
67180: AND
67181: IFFALSE 67434
67183: GO 67185
67185: DISABLE
67186: LD_INT 0
67188: PPUSH
67189: PPUSH
// begin enable ;
67190: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67191: LD_ADDR_VAR 0 1
67195: PUSH
67196: LD_INT 34
67198: PUSH
67199: LD_INT 99
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PPUSH
67206: CALL_OW 69
67210: PUSH
67211: FOR_IN
67212: IFFALSE 67432
// begin if not i in hackTanks then
67214: LD_VAR 0 1
67218: PUSH
67219: LD_EXP 91
67223: IN
67224: NOT
67225: IFFALSE 67308
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67227: LD_ADDR_EXP 91
67231: PUSH
67232: LD_EXP 91
67236: PPUSH
67237: LD_EXP 91
67241: PUSH
67242: LD_INT 1
67244: PLUS
67245: PPUSH
67246: LD_VAR 0 1
67250: PPUSH
67251: CALL_OW 1
67255: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67256: LD_ADDR_EXP 92
67260: PUSH
67261: LD_EXP 92
67265: PPUSH
67266: LD_EXP 92
67270: PUSH
67271: LD_INT 1
67273: PLUS
67274: PPUSH
67275: EMPTY
67276: PPUSH
67277: CALL_OW 1
67281: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67282: LD_ADDR_EXP 95
67286: PUSH
67287: LD_EXP 95
67291: PPUSH
67292: LD_EXP 95
67296: PUSH
67297: LD_INT 1
67299: PLUS
67300: PPUSH
67301: EMPTY
67302: PPUSH
67303: CALL_OW 1
67307: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67308: LD_VAR 0 1
67312: PPUSH
67313: CALL_OW 302
67317: NOT
67318: IFFALSE 67331
// begin HackUnlinkAll ( i ) ;
67320: LD_VAR 0 1
67324: PPUSH
67325: CALL 67437 0 1
// continue ;
67329: GO 67211
// end ; HackCheckCapturedStatus ( i ) ;
67331: LD_VAR 0 1
67335: PPUSH
67336: CALL 67880 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67340: LD_ADDR_VAR 0 2
67344: PUSH
67345: LD_INT 81
67347: PUSH
67348: LD_VAR 0 1
67352: PPUSH
67353: CALL_OW 255
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 33
67364: PUSH
67365: LD_INT 3
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 91
67374: PUSH
67375: LD_VAR 0 1
67379: PUSH
67380: LD_EXP 94
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: LIST
67389: PUSH
67390: LD_INT 50
67392: PUSH
67393: EMPTY
67394: LIST
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: PPUSH
67402: CALL_OW 69
67406: ST_TO_ADDR
// if not tmp then
67407: LD_VAR 0 2
67411: NOT
67412: IFFALSE 67416
// continue ;
67414: GO 67211
// HackLink ( i , tmp ) ;
67416: LD_VAR 0 1
67420: PPUSH
67421: LD_VAR 0 2
67425: PPUSH
67426: CALL 67573 0 2
// end ;
67430: GO 67211
67432: POP
67433: POP
// end ;
67434: PPOPN 2
67436: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67437: LD_INT 0
67439: PPUSH
67440: PPUSH
67441: PPUSH
// if not hack in hackTanks then
67442: LD_VAR 0 1
67446: PUSH
67447: LD_EXP 91
67451: IN
67452: NOT
67453: IFFALSE 67457
// exit ;
67455: GO 67568
// index := GetElementIndex ( hackTanks , hack ) ;
67457: LD_ADDR_VAR 0 4
67461: PUSH
67462: LD_EXP 91
67466: PPUSH
67467: LD_VAR 0 1
67471: PPUSH
67472: CALL 13376 0 2
67476: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67477: LD_EXP 92
67481: PUSH
67482: LD_VAR 0 4
67486: ARRAY
67487: IFFALSE 67568
// begin for i in hackTanksCaptured [ index ] do
67489: LD_ADDR_VAR 0 3
67493: PUSH
67494: LD_EXP 92
67498: PUSH
67499: LD_VAR 0 4
67503: ARRAY
67504: PUSH
67505: FOR_IN
67506: IFFALSE 67532
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67508: LD_VAR 0 3
67512: PUSH
67513: LD_INT 1
67515: ARRAY
67516: PPUSH
67517: LD_VAR 0 3
67521: PUSH
67522: LD_INT 2
67524: ARRAY
67525: PPUSH
67526: CALL_OW 235
67530: GO 67505
67532: POP
67533: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67534: LD_ADDR_EXP 92
67538: PUSH
67539: LD_EXP 92
67543: PPUSH
67544: LD_VAR 0 4
67548: PPUSH
67549: EMPTY
67550: PPUSH
67551: CALL_OW 1
67555: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67556: LD_VAR 0 1
67560: PPUSH
67561: LD_INT 0
67563: PPUSH
67564: CALL_OW 505
// end ; end ;
67568: LD_VAR 0 2
67572: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67573: LD_INT 0
67575: PPUSH
67576: PPUSH
67577: PPUSH
// if not hack in hackTanks or not vehicles then
67578: LD_VAR 0 1
67582: PUSH
67583: LD_EXP 91
67587: IN
67588: NOT
67589: PUSH
67590: LD_VAR 0 2
67594: NOT
67595: OR
67596: IFFALSE 67600
// exit ;
67598: GO 67875
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67600: LD_ADDR_VAR 0 2
67604: PUSH
67605: LD_VAR 0 1
67609: PPUSH
67610: LD_VAR 0 2
67614: PPUSH
67615: LD_INT 1
67617: PPUSH
67618: LD_INT 1
67620: PPUSH
67621: CALL 14026 0 4
67625: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67626: LD_ADDR_VAR 0 5
67630: PUSH
67631: LD_EXP 91
67635: PPUSH
67636: LD_VAR 0 1
67640: PPUSH
67641: CALL 13376 0 2
67645: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67646: LD_EXP 92
67650: PUSH
67651: LD_VAR 0 5
67655: ARRAY
67656: PUSH
67657: LD_EXP 93
67661: LESS
67662: IFFALSE 67851
// begin for i := 1 to vehicles do
67664: LD_ADDR_VAR 0 4
67668: PUSH
67669: DOUBLE
67670: LD_INT 1
67672: DEC
67673: ST_TO_ADDR
67674: LD_VAR 0 2
67678: PUSH
67679: FOR_TO
67680: IFFALSE 67849
// begin if hackTanksCaptured [ index ] = hackLimit then
67682: LD_EXP 92
67686: PUSH
67687: LD_VAR 0 5
67691: ARRAY
67692: PUSH
67693: LD_EXP 93
67697: EQUAL
67698: IFFALSE 67702
// break ;
67700: GO 67849
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67702: LD_ADDR_EXP 95
67706: PUSH
67707: LD_EXP 95
67711: PPUSH
67712: LD_VAR 0 5
67716: PPUSH
67717: LD_EXP 95
67721: PUSH
67722: LD_VAR 0 5
67726: ARRAY
67727: PUSH
67728: LD_INT 1
67730: PLUS
67731: PPUSH
67732: CALL_OW 1
67736: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67737: LD_ADDR_EXP 92
67741: PUSH
67742: LD_EXP 92
67746: PPUSH
67747: LD_VAR 0 5
67751: PUSH
67752: LD_EXP 92
67756: PUSH
67757: LD_VAR 0 5
67761: ARRAY
67762: PUSH
67763: LD_INT 1
67765: PLUS
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PPUSH
67771: LD_VAR 0 2
67775: PUSH
67776: LD_VAR 0 4
67780: ARRAY
67781: PUSH
67782: LD_VAR 0 2
67786: PUSH
67787: LD_VAR 0 4
67791: ARRAY
67792: PPUSH
67793: CALL_OW 255
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PPUSH
67802: CALL 13591 0 3
67806: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67807: LD_VAR 0 2
67811: PUSH
67812: LD_VAR 0 4
67816: ARRAY
67817: PPUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: CALL_OW 255
67827: PPUSH
67828: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67832: LD_VAR 0 2
67836: PUSH
67837: LD_VAR 0 4
67841: ARRAY
67842: PPUSH
67843: CALL_OW 141
// end ;
67847: GO 67679
67849: POP
67850: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67851: LD_VAR 0 1
67855: PPUSH
67856: LD_EXP 92
67860: PUSH
67861: LD_VAR 0 5
67865: ARRAY
67866: PUSH
67867: LD_INT 0
67869: PLUS
67870: PPUSH
67871: CALL_OW 505
// end ;
67875: LD_VAR 0 3
67879: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67880: LD_INT 0
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
// if not hack in hackTanks then
67886: LD_VAR 0 1
67890: PUSH
67891: LD_EXP 91
67895: IN
67896: NOT
67897: IFFALSE 67901
// exit ;
67899: GO 68141
// index := GetElementIndex ( hackTanks , hack ) ;
67901: LD_ADDR_VAR 0 4
67905: PUSH
67906: LD_EXP 91
67910: PPUSH
67911: LD_VAR 0 1
67915: PPUSH
67916: CALL 13376 0 2
67920: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67921: LD_ADDR_VAR 0 3
67925: PUSH
67926: DOUBLE
67927: LD_EXP 92
67931: PUSH
67932: LD_VAR 0 4
67936: ARRAY
67937: INC
67938: ST_TO_ADDR
67939: LD_INT 1
67941: PUSH
67942: FOR_DOWNTO
67943: IFFALSE 68115
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67945: LD_ADDR_VAR 0 5
67949: PUSH
67950: LD_EXP 92
67954: PUSH
67955: LD_VAR 0 4
67959: ARRAY
67960: PUSH
67961: LD_VAR 0 3
67965: ARRAY
67966: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67967: LD_VAR 0 5
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PPUSH
67976: CALL_OW 302
67980: NOT
67981: PUSH
67982: LD_VAR 0 5
67986: PUSH
67987: LD_INT 1
67989: ARRAY
67990: PPUSH
67991: CALL_OW 255
67995: PUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 255
68005: NONEQUAL
68006: OR
68007: IFFALSE 68113
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68009: LD_VAR 0 5
68013: PUSH
68014: LD_INT 1
68016: ARRAY
68017: PPUSH
68018: CALL_OW 305
68022: PUSH
68023: LD_VAR 0 5
68027: PUSH
68028: LD_INT 1
68030: ARRAY
68031: PPUSH
68032: CALL_OW 255
68036: PUSH
68037: LD_VAR 0 1
68041: PPUSH
68042: CALL_OW 255
68046: EQUAL
68047: AND
68048: IFFALSE 68072
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68050: LD_VAR 0 5
68054: PUSH
68055: LD_INT 1
68057: ARRAY
68058: PPUSH
68059: LD_VAR 0 5
68063: PUSH
68064: LD_INT 2
68066: ARRAY
68067: PPUSH
68068: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68072: LD_ADDR_EXP 92
68076: PUSH
68077: LD_EXP 92
68081: PPUSH
68082: LD_VAR 0 4
68086: PPUSH
68087: LD_EXP 92
68091: PUSH
68092: LD_VAR 0 4
68096: ARRAY
68097: PPUSH
68098: LD_VAR 0 3
68102: PPUSH
68103: CALL_OW 3
68107: PPUSH
68108: CALL_OW 1
68112: ST_TO_ADDR
// end ; end ;
68113: GO 67942
68115: POP
68116: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68117: LD_VAR 0 1
68121: PPUSH
68122: LD_EXP 92
68126: PUSH
68127: LD_VAR 0 4
68131: ARRAY
68132: PUSH
68133: LD_INT 0
68135: PLUS
68136: PPUSH
68137: CALL_OW 505
// end ;
68141: LD_VAR 0 2
68145: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68146: LD_INT 0
68148: PPUSH
68149: PPUSH
68150: PPUSH
68151: PPUSH
// if not hack in hackTanks then
68152: LD_VAR 0 1
68156: PUSH
68157: LD_EXP 91
68161: IN
68162: NOT
68163: IFFALSE 68167
// exit ;
68165: GO 68252
// index := GetElementIndex ( hackTanks , hack ) ;
68167: LD_ADDR_VAR 0 5
68171: PUSH
68172: LD_EXP 91
68176: PPUSH
68177: LD_VAR 0 1
68181: PPUSH
68182: CALL 13376 0 2
68186: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68187: LD_ADDR_VAR 0 4
68191: PUSH
68192: DOUBLE
68193: LD_INT 1
68195: DEC
68196: ST_TO_ADDR
68197: LD_EXP 92
68201: PUSH
68202: LD_VAR 0 5
68206: ARRAY
68207: PUSH
68208: FOR_TO
68209: IFFALSE 68250
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68211: LD_EXP 92
68215: PUSH
68216: LD_VAR 0 5
68220: ARRAY
68221: PUSH
68222: LD_VAR 0 4
68226: ARRAY
68227: PUSH
68228: LD_INT 1
68230: ARRAY
68231: PUSH
68232: LD_VAR 0 2
68236: EQUAL
68237: IFFALSE 68248
// KillUnit ( vehicle ) ;
68239: LD_VAR 0 2
68243: PPUSH
68244: CALL_OW 66
68248: GO 68208
68250: POP
68251: POP
// end ;
68252: LD_VAR 0 3
68256: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68257: LD_EXP 96
68261: NOT
68262: IFFALSE 68297
68264: GO 68266
68266: DISABLE
// begin initMiner := true ;
68267: LD_ADDR_EXP 96
68271: PUSH
68272: LD_INT 1
68274: ST_TO_ADDR
// minersList := [ ] ;
68275: LD_ADDR_EXP 97
68279: PUSH
68280: EMPTY
68281: ST_TO_ADDR
// minerMinesList := [ ] ;
68282: LD_ADDR_EXP 98
68286: PUSH
68287: EMPTY
68288: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68289: LD_ADDR_EXP 99
68293: PUSH
68294: LD_INT 5
68296: ST_TO_ADDR
// end ;
68297: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68298: LD_EXP 96
68302: PUSH
68303: LD_INT 34
68305: PUSH
68306: LD_INT 81
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PPUSH
68313: CALL_OW 69
68317: AND
68318: IFFALSE 68779
68320: GO 68322
68322: DISABLE
68323: LD_INT 0
68325: PPUSH
68326: PPUSH
68327: PPUSH
68328: PPUSH
// begin enable ;
68329: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68330: LD_ADDR_VAR 0 1
68334: PUSH
68335: LD_INT 34
68337: PUSH
68338: LD_INT 81
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: PPUSH
68345: CALL_OW 69
68349: PUSH
68350: FOR_IN
68351: IFFALSE 68423
// begin if not i in minersList then
68353: LD_VAR 0 1
68357: PUSH
68358: LD_EXP 97
68362: IN
68363: NOT
68364: IFFALSE 68421
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68366: LD_ADDR_EXP 97
68370: PUSH
68371: LD_EXP 97
68375: PPUSH
68376: LD_EXP 97
68380: PUSH
68381: LD_INT 1
68383: PLUS
68384: PPUSH
68385: LD_VAR 0 1
68389: PPUSH
68390: CALL_OW 1
68394: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68395: LD_ADDR_EXP 98
68399: PUSH
68400: LD_EXP 98
68404: PPUSH
68405: LD_EXP 98
68409: PUSH
68410: LD_INT 1
68412: PLUS
68413: PPUSH
68414: EMPTY
68415: PPUSH
68416: CALL_OW 1
68420: ST_TO_ADDR
// end end ;
68421: GO 68350
68423: POP
68424: POP
// for i := minerMinesList downto 1 do
68425: LD_ADDR_VAR 0 1
68429: PUSH
68430: DOUBLE
68431: LD_EXP 98
68435: INC
68436: ST_TO_ADDR
68437: LD_INT 1
68439: PUSH
68440: FOR_DOWNTO
68441: IFFALSE 68777
// begin if IsLive ( minersList [ i ] ) then
68443: LD_EXP 97
68447: PUSH
68448: LD_VAR 0 1
68452: ARRAY
68453: PPUSH
68454: CALL_OW 300
68458: IFFALSE 68486
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68460: LD_EXP 97
68464: PUSH
68465: LD_VAR 0 1
68469: ARRAY
68470: PPUSH
68471: LD_EXP 98
68475: PUSH
68476: LD_VAR 0 1
68480: ARRAY
68481: PPUSH
68482: CALL_OW 505
// if not minerMinesList [ i ] then
68486: LD_EXP 98
68490: PUSH
68491: LD_VAR 0 1
68495: ARRAY
68496: NOT
68497: IFFALSE 68501
// continue ;
68499: GO 68440
// for j := minerMinesList [ i ] downto 1 do
68501: LD_ADDR_VAR 0 2
68505: PUSH
68506: DOUBLE
68507: LD_EXP 98
68511: PUSH
68512: LD_VAR 0 1
68516: ARRAY
68517: INC
68518: ST_TO_ADDR
68519: LD_INT 1
68521: PUSH
68522: FOR_DOWNTO
68523: IFFALSE 68773
// begin side := GetSide ( minersList [ i ] ) ;
68525: LD_ADDR_VAR 0 3
68529: PUSH
68530: LD_EXP 97
68534: PUSH
68535: LD_VAR 0 1
68539: ARRAY
68540: PPUSH
68541: CALL_OW 255
68545: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68546: LD_ADDR_VAR 0 4
68550: PUSH
68551: LD_EXP 98
68555: PUSH
68556: LD_VAR 0 1
68560: ARRAY
68561: PUSH
68562: LD_VAR 0 2
68566: ARRAY
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: PPUSH
68572: LD_EXP 98
68576: PUSH
68577: LD_VAR 0 1
68581: ARRAY
68582: PUSH
68583: LD_VAR 0 2
68587: ARRAY
68588: PUSH
68589: LD_INT 2
68591: ARRAY
68592: PPUSH
68593: CALL_OW 428
68597: ST_TO_ADDR
// if not tmp then
68598: LD_VAR 0 4
68602: NOT
68603: IFFALSE 68607
// continue ;
68605: GO 68522
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68607: LD_VAR 0 4
68611: PUSH
68612: LD_INT 81
68614: PUSH
68615: LD_VAR 0 3
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PPUSH
68624: CALL_OW 69
68628: IN
68629: PUSH
68630: LD_EXP 98
68634: PUSH
68635: LD_VAR 0 1
68639: ARRAY
68640: PUSH
68641: LD_VAR 0 2
68645: ARRAY
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PPUSH
68651: LD_EXP 98
68655: PUSH
68656: LD_VAR 0 1
68660: ARRAY
68661: PUSH
68662: LD_VAR 0 2
68666: ARRAY
68667: PUSH
68668: LD_INT 2
68670: ARRAY
68671: PPUSH
68672: CALL_OW 458
68676: AND
68677: IFFALSE 68771
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68679: LD_EXP 98
68683: PUSH
68684: LD_VAR 0 1
68688: ARRAY
68689: PUSH
68690: LD_VAR 0 2
68694: ARRAY
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PPUSH
68700: LD_EXP 98
68704: PUSH
68705: LD_VAR 0 1
68709: ARRAY
68710: PUSH
68711: LD_VAR 0 2
68715: ARRAY
68716: PUSH
68717: LD_INT 2
68719: ARRAY
68720: PPUSH
68721: LD_VAR 0 3
68725: PPUSH
68726: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68730: LD_ADDR_EXP 98
68734: PUSH
68735: LD_EXP 98
68739: PPUSH
68740: LD_VAR 0 1
68744: PPUSH
68745: LD_EXP 98
68749: PUSH
68750: LD_VAR 0 1
68754: ARRAY
68755: PPUSH
68756: LD_VAR 0 2
68760: PPUSH
68761: CALL_OW 3
68765: PPUSH
68766: CALL_OW 1
68770: ST_TO_ADDR
// end ; end ;
68771: GO 68522
68773: POP
68774: POP
// end ;
68775: GO 68440
68777: POP
68778: POP
// end ;
68779: PPOPN 4
68781: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68782: LD_INT 0
68784: PPUSH
68785: PPUSH
// result := false ;
68786: LD_ADDR_VAR 0 4
68790: PUSH
68791: LD_INT 0
68793: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68794: LD_VAR 0 1
68798: PPUSH
68799: CALL_OW 264
68803: PUSH
68804: LD_INT 81
68806: EQUAL
68807: NOT
68808: IFFALSE 68812
// exit ;
68810: GO 69052
// index := GetElementIndex ( minersList , unit ) ;
68812: LD_ADDR_VAR 0 5
68816: PUSH
68817: LD_EXP 97
68821: PPUSH
68822: LD_VAR 0 1
68826: PPUSH
68827: CALL 13376 0 2
68831: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68832: LD_EXP 98
68836: PUSH
68837: LD_VAR 0 5
68841: ARRAY
68842: PUSH
68843: LD_EXP 99
68847: GREATEREQUAL
68848: IFFALSE 68852
// exit ;
68850: GO 69052
// ComMoveXY ( unit , x , y ) ;
68852: LD_VAR 0 1
68856: PPUSH
68857: LD_VAR 0 2
68861: PPUSH
68862: LD_VAR 0 3
68866: PPUSH
68867: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68871: LD_INT 35
68873: PPUSH
68874: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68878: LD_VAR 0 1
68882: PPUSH
68883: LD_VAR 0 2
68887: PPUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: CALL 44760 0 3
68897: NOT
68898: PUSH
68899: LD_VAR 0 1
68903: PPUSH
68904: CALL_OW 314
68908: AND
68909: IFFALSE 68913
// exit ;
68911: GO 69052
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68913: LD_VAR 0 2
68917: PPUSH
68918: LD_VAR 0 3
68922: PPUSH
68923: CALL_OW 428
68927: PUSH
68928: LD_VAR 0 1
68932: EQUAL
68933: PUSH
68934: LD_VAR 0 1
68938: PPUSH
68939: CALL_OW 314
68943: NOT
68944: AND
68945: IFFALSE 68871
// PlaySoundXY ( x , y , PlantMine ) ;
68947: LD_VAR 0 2
68951: PPUSH
68952: LD_VAR 0 3
68956: PPUSH
68957: LD_STRING PlantMine
68959: PPUSH
68960: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68964: LD_VAR 0 2
68968: PPUSH
68969: LD_VAR 0 3
68973: PPUSH
68974: LD_VAR 0 1
68978: PPUSH
68979: CALL_OW 255
68983: PPUSH
68984: LD_INT 0
68986: PPUSH
68987: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68991: LD_ADDR_EXP 98
68995: PUSH
68996: LD_EXP 98
69000: PPUSH
69001: LD_VAR 0 5
69005: PUSH
69006: LD_EXP 98
69010: PUSH
69011: LD_VAR 0 5
69015: ARRAY
69016: PUSH
69017: LD_INT 1
69019: PLUS
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PPUSH
69025: LD_VAR 0 2
69029: PUSH
69030: LD_VAR 0 3
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PPUSH
69039: CALL 13591 0 3
69043: ST_TO_ADDR
// result := true ;
69044: LD_ADDR_VAR 0 4
69048: PUSH
69049: LD_INT 1
69051: ST_TO_ADDR
// end ;
69052: LD_VAR 0 4
69056: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69057: LD_INT 0
69059: PPUSH
69060: PPUSH
69061: PPUSH
// if not unit in minersList then
69062: LD_VAR 0 1
69066: PUSH
69067: LD_EXP 97
69071: IN
69072: NOT
69073: IFFALSE 69077
// exit ;
69075: GO 69469
// index := GetElementIndex ( minersList , unit ) ;
69077: LD_ADDR_VAR 0 6
69081: PUSH
69082: LD_EXP 97
69086: PPUSH
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL 13376 0 2
69096: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69097: LD_ADDR_VAR 0 5
69101: PUSH
69102: DOUBLE
69103: LD_EXP 98
69107: PUSH
69108: LD_VAR 0 6
69112: ARRAY
69113: INC
69114: ST_TO_ADDR
69115: LD_INT 1
69117: PUSH
69118: FOR_DOWNTO
69119: IFFALSE 69280
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69121: LD_EXP 98
69125: PUSH
69126: LD_VAR 0 6
69130: ARRAY
69131: PUSH
69132: LD_VAR 0 5
69136: ARRAY
69137: PUSH
69138: LD_INT 1
69140: ARRAY
69141: PUSH
69142: LD_VAR 0 2
69146: EQUAL
69147: PUSH
69148: LD_EXP 98
69152: PUSH
69153: LD_VAR 0 6
69157: ARRAY
69158: PUSH
69159: LD_VAR 0 5
69163: ARRAY
69164: PUSH
69165: LD_INT 2
69167: ARRAY
69168: PUSH
69169: LD_VAR 0 3
69173: EQUAL
69174: AND
69175: IFFALSE 69278
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69177: LD_EXP 98
69181: PUSH
69182: LD_VAR 0 6
69186: ARRAY
69187: PUSH
69188: LD_VAR 0 5
69192: ARRAY
69193: PUSH
69194: LD_INT 1
69196: ARRAY
69197: PPUSH
69198: LD_EXP 98
69202: PUSH
69203: LD_VAR 0 6
69207: ARRAY
69208: PUSH
69209: LD_VAR 0 5
69213: ARRAY
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: PPUSH
69219: LD_VAR 0 1
69223: PPUSH
69224: CALL_OW 255
69228: PPUSH
69229: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69233: LD_ADDR_EXP 98
69237: PUSH
69238: LD_EXP 98
69242: PPUSH
69243: LD_VAR 0 6
69247: PPUSH
69248: LD_EXP 98
69252: PUSH
69253: LD_VAR 0 6
69257: ARRAY
69258: PPUSH
69259: LD_VAR 0 5
69263: PPUSH
69264: CALL_OW 3
69268: PPUSH
69269: CALL_OW 1
69273: ST_TO_ADDR
// exit ;
69274: POP
69275: POP
69276: GO 69469
// end ; end ;
69278: GO 69118
69280: POP
69281: POP
// for i := minerMinesList [ index ] downto 1 do
69282: LD_ADDR_VAR 0 5
69286: PUSH
69287: DOUBLE
69288: LD_EXP 98
69292: PUSH
69293: LD_VAR 0 6
69297: ARRAY
69298: INC
69299: ST_TO_ADDR
69300: LD_INT 1
69302: PUSH
69303: FOR_DOWNTO
69304: IFFALSE 69467
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69306: LD_EXP 98
69310: PUSH
69311: LD_VAR 0 6
69315: ARRAY
69316: PUSH
69317: LD_VAR 0 5
69321: ARRAY
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PPUSH
69327: LD_EXP 98
69331: PUSH
69332: LD_VAR 0 6
69336: ARRAY
69337: PUSH
69338: LD_VAR 0 5
69342: ARRAY
69343: PUSH
69344: LD_INT 2
69346: ARRAY
69347: PPUSH
69348: LD_VAR 0 2
69352: PPUSH
69353: LD_VAR 0 3
69357: PPUSH
69358: CALL_OW 298
69362: PUSH
69363: LD_INT 6
69365: LESS
69366: IFFALSE 69465
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69368: LD_EXP 98
69372: PUSH
69373: LD_VAR 0 6
69377: ARRAY
69378: PUSH
69379: LD_VAR 0 5
69383: ARRAY
69384: PUSH
69385: LD_INT 1
69387: ARRAY
69388: PPUSH
69389: LD_EXP 98
69393: PUSH
69394: LD_VAR 0 6
69398: ARRAY
69399: PUSH
69400: LD_VAR 0 5
69404: ARRAY
69405: PUSH
69406: LD_INT 2
69408: ARRAY
69409: PPUSH
69410: LD_VAR 0 1
69414: PPUSH
69415: CALL_OW 255
69419: PPUSH
69420: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69424: LD_ADDR_EXP 98
69428: PUSH
69429: LD_EXP 98
69433: PPUSH
69434: LD_VAR 0 6
69438: PPUSH
69439: LD_EXP 98
69443: PUSH
69444: LD_VAR 0 6
69448: ARRAY
69449: PPUSH
69450: LD_VAR 0 5
69454: PPUSH
69455: CALL_OW 3
69459: PPUSH
69460: CALL_OW 1
69464: ST_TO_ADDR
// end ; end ;
69465: GO 69303
69467: POP
69468: POP
// end ;
69469: LD_VAR 0 4
69473: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69474: LD_INT 0
69476: PPUSH
69477: PPUSH
69478: PPUSH
69479: PPUSH
69480: PPUSH
69481: PPUSH
69482: PPUSH
69483: PPUSH
69484: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL_OW 264
69494: PUSH
69495: LD_INT 81
69497: EQUAL
69498: NOT
69499: PUSH
69500: LD_VAR 0 1
69504: PUSH
69505: LD_EXP 97
69509: IN
69510: NOT
69511: OR
69512: IFFALSE 69516
// exit ;
69514: GO 69838
// index := GetElementIndex ( minersList , unit ) ;
69516: LD_ADDR_VAR 0 6
69520: PUSH
69521: LD_EXP 97
69525: PPUSH
69526: LD_VAR 0 1
69530: PPUSH
69531: CALL 13376 0 2
69535: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69536: LD_ADDR_VAR 0 8
69540: PUSH
69541: LD_EXP 99
69545: PUSH
69546: LD_EXP 98
69550: PUSH
69551: LD_VAR 0 6
69555: ARRAY
69556: MINUS
69557: ST_TO_ADDR
// if not minesFreeAmount then
69558: LD_VAR 0 8
69562: NOT
69563: IFFALSE 69567
// exit ;
69565: GO 69838
// tmp := [ ] ;
69567: LD_ADDR_VAR 0 7
69571: PUSH
69572: EMPTY
69573: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69574: LD_ADDR_VAR 0 5
69578: PUSH
69579: DOUBLE
69580: LD_INT 1
69582: DEC
69583: ST_TO_ADDR
69584: LD_VAR 0 8
69588: PUSH
69589: FOR_TO
69590: IFFALSE 69785
// begin _d := rand ( 0 , 5 ) ;
69592: LD_ADDR_VAR 0 11
69596: PUSH
69597: LD_INT 0
69599: PPUSH
69600: LD_INT 5
69602: PPUSH
69603: CALL_OW 12
69607: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69608: LD_ADDR_VAR 0 12
69612: PUSH
69613: LD_INT 2
69615: PPUSH
69616: LD_INT 6
69618: PPUSH
69619: CALL_OW 12
69623: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69624: LD_ADDR_VAR 0 9
69628: PUSH
69629: LD_VAR 0 2
69633: PPUSH
69634: LD_VAR 0 11
69638: PPUSH
69639: LD_VAR 0 12
69643: PPUSH
69644: CALL_OW 272
69648: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69649: LD_ADDR_VAR 0 10
69653: PUSH
69654: LD_VAR 0 3
69658: PPUSH
69659: LD_VAR 0 11
69663: PPUSH
69664: LD_VAR 0 12
69668: PPUSH
69669: CALL_OW 273
69673: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69674: LD_VAR 0 9
69678: PPUSH
69679: LD_VAR 0 10
69683: PPUSH
69684: CALL_OW 488
69688: PUSH
69689: LD_VAR 0 9
69693: PUSH
69694: LD_VAR 0 10
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_VAR 0 7
69707: IN
69708: NOT
69709: AND
69710: PUSH
69711: LD_VAR 0 9
69715: PPUSH
69716: LD_VAR 0 10
69720: PPUSH
69721: CALL_OW 458
69725: NOT
69726: AND
69727: IFFALSE 69769
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69729: LD_ADDR_VAR 0 7
69733: PUSH
69734: LD_VAR 0 7
69738: PPUSH
69739: LD_VAR 0 7
69743: PUSH
69744: LD_INT 1
69746: PLUS
69747: PPUSH
69748: LD_VAR 0 9
69752: PUSH
69753: LD_VAR 0 10
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PPUSH
69762: CALL_OW 1
69766: ST_TO_ADDR
69767: GO 69783
// i := i - 1 ;
69769: LD_ADDR_VAR 0 5
69773: PUSH
69774: LD_VAR 0 5
69778: PUSH
69779: LD_INT 1
69781: MINUS
69782: ST_TO_ADDR
// end ;
69783: GO 69589
69785: POP
69786: POP
// for i in tmp do
69787: LD_ADDR_VAR 0 5
69791: PUSH
69792: LD_VAR 0 7
69796: PUSH
69797: FOR_IN
69798: IFFALSE 69836
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69800: LD_VAR 0 1
69804: PPUSH
69805: LD_VAR 0 5
69809: PUSH
69810: LD_INT 1
69812: ARRAY
69813: PPUSH
69814: LD_VAR 0 5
69818: PUSH
69819: LD_INT 2
69821: ARRAY
69822: PPUSH
69823: CALL 68782 0 3
69827: NOT
69828: IFFALSE 69834
// exit ;
69830: POP
69831: POP
69832: GO 69838
69834: GO 69797
69836: POP
69837: POP
// end ;
69838: LD_VAR 0 4
69842: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69843: LD_INT 0
69845: PPUSH
69846: PPUSH
69847: PPUSH
69848: PPUSH
69849: PPUSH
69850: PPUSH
69851: PPUSH
// if not GetClass ( unit ) = class_sniper then
69852: LD_VAR 0 1
69856: PPUSH
69857: CALL_OW 257
69861: PUSH
69862: LD_INT 5
69864: EQUAL
69865: NOT
69866: IFFALSE 69870
// exit ;
69868: GO 70258
// dist := 8 ;
69870: LD_ADDR_VAR 0 5
69874: PUSH
69875: LD_INT 8
69877: ST_TO_ADDR
// viewRange := 12 ;
69878: LD_ADDR_VAR 0 7
69882: PUSH
69883: LD_INT 12
69885: ST_TO_ADDR
// side := GetSide ( unit ) ;
69886: LD_ADDR_VAR 0 6
69890: PUSH
69891: LD_VAR 0 1
69895: PPUSH
69896: CALL_OW 255
69900: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69901: LD_INT 61
69903: PPUSH
69904: LD_VAR 0 6
69908: PPUSH
69909: CALL_OW 321
69913: PUSH
69914: LD_INT 2
69916: EQUAL
69917: IFFALSE 69927
// viewRange := 16 ;
69919: LD_ADDR_VAR 0 7
69923: PUSH
69924: LD_INT 16
69926: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69927: LD_VAR 0 1
69931: PPUSH
69932: LD_VAR 0 2
69936: PPUSH
69937: LD_VAR 0 3
69941: PPUSH
69942: CALL_OW 297
69946: PUSH
69947: LD_VAR 0 5
69951: GREATER
69952: IFFALSE 70031
// begin ComMoveXY ( unit , x , y ) ;
69954: LD_VAR 0 1
69958: PPUSH
69959: LD_VAR 0 2
69963: PPUSH
69964: LD_VAR 0 3
69968: PPUSH
69969: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69973: LD_INT 35
69975: PPUSH
69976: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69980: LD_VAR 0 1
69984: PPUSH
69985: LD_VAR 0 2
69989: PPUSH
69990: LD_VAR 0 3
69994: PPUSH
69995: CALL 44760 0 3
69999: NOT
70000: IFFALSE 70004
// exit ;
70002: GO 70258
// until GetDistUnitXY ( unit , x , y ) < dist ;
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 2
70013: PPUSH
70014: LD_VAR 0 3
70018: PPUSH
70019: CALL_OW 297
70023: PUSH
70024: LD_VAR 0 5
70028: LESS
70029: IFFALSE 69973
// end ; ComTurnXY ( unit , x , y ) ;
70031: LD_VAR 0 1
70035: PPUSH
70036: LD_VAR 0 2
70040: PPUSH
70041: LD_VAR 0 3
70045: PPUSH
70046: CALL_OW 118
// wait ( 5 ) ;
70050: LD_INT 5
70052: PPUSH
70053: CALL_OW 67
// _d := GetDir ( unit ) ;
70057: LD_ADDR_VAR 0 10
70061: PUSH
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 254
70071: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70072: LD_ADDR_VAR 0 8
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: CALL_OW 250
70086: PPUSH
70087: LD_VAR 0 10
70091: PPUSH
70092: LD_VAR 0 5
70096: PPUSH
70097: CALL_OW 272
70101: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70102: LD_ADDR_VAR 0 9
70106: PUSH
70107: LD_VAR 0 1
70111: PPUSH
70112: CALL_OW 251
70116: PPUSH
70117: LD_VAR 0 10
70121: PPUSH
70122: LD_VAR 0 5
70126: PPUSH
70127: CALL_OW 273
70131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70132: LD_VAR 0 8
70136: PPUSH
70137: LD_VAR 0 9
70141: PPUSH
70142: CALL_OW 488
70146: NOT
70147: IFFALSE 70151
// exit ;
70149: GO 70258
// ComAnimCustom ( unit , 1 ) ;
70151: LD_VAR 0 1
70155: PPUSH
70156: LD_INT 1
70158: PPUSH
70159: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70163: LD_VAR 0 8
70167: PPUSH
70168: LD_VAR 0 9
70172: PPUSH
70173: LD_VAR 0 6
70177: PPUSH
70178: LD_VAR 0 7
70182: PPUSH
70183: CALL_OW 330
// repeat wait ( 1 ) ;
70187: LD_INT 1
70189: PPUSH
70190: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70194: LD_VAR 0 1
70198: PPUSH
70199: CALL_OW 316
70203: PUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: CALL_OW 314
70213: OR
70214: PUSH
70215: LD_VAR 0 1
70219: PPUSH
70220: CALL_OW 302
70224: NOT
70225: OR
70226: PUSH
70227: LD_VAR 0 1
70231: PPUSH
70232: CALL_OW 301
70236: OR
70237: IFFALSE 70187
// RemoveSeeing ( _x , _y , side ) ;
70239: LD_VAR 0 8
70243: PPUSH
70244: LD_VAR 0 9
70248: PPUSH
70249: LD_VAR 0 6
70253: PPUSH
70254: CALL_OW 331
// end ;
70258: LD_VAR 0 4
70262: RET
