// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5049 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 6388 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8151 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 8263 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := 1 ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 1
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 8799 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 13766 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 26
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arDrivers := [ ] ;
 288: LD_ADDR_EXP 10
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 295: LD_ADDR_EXP 12
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// arMinesList := [ ] ;
 303: LD_ADDR_EXP 13
 307: PUSH
 308: EMPTY
 309: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 310: LD_ADDR_EXP 11
 314: PUSH
 315: LD_INT 8
 317: PUSH
 318: LD_INT 11
 320: PUSH
 321: LD_INT 12
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: PUSH
 329: LD_OWVAR 67
 333: ARRAY
 334: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 3
 342: PPUSH
 343: CALL 56329 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
 347: LD_INT 4
 349: PPUSH
 350: LD_INT 7
 352: PUSH
 353: LD_INT 9
 355: PUSH
 356: LD_INT 11
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: LD_OWVAR 67
 368: ARRAY
 369: PPUSH
 370: CALL 851 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
 374: LD_ADDR_VAR 0 8
 378: PUSH
 379: LD_INT 3
 381: PUSH
 382: LD_INT 4
 384: PUSH
 385: LD_INT 5
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_OWVAR 67
 397: ARRAY
 398: ST_TO_ADDR
// uc_side := side ;
 399: LD_ADDR_OWVAR 20
 403: PUSH
 404: LD_VAR 0 1
 408: ST_TO_ADDR
// uc_nation := 2 ;
 409: LD_ADDR_OWVAR 21
 413: PUSH
 414: LD_INT 2
 416: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 417: LD_ADDR_EXP 14
 421: PUSH
 422: LD_INT 2
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_STRING 
 430: PPUSH
 431: LD_VAR 0 8
 435: PPUSH
 436: LD_INT 800
 438: PUSH
 439: LD_INT 120
 441: PUSH
 442: LD_INT 0
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: LD_INT 10
 452: PUSH
 453: LD_INT 11
 455: PUSH
 456: LD_INT 12
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: LIST
 463: PUSH
 464: LD_OWVAR 67
 468: ARRAY
 469: PUSH
 470: LD_INT 4
 472: PUSH
 473: LD_INT 6
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL 22364 0 6
 489: ST_TO_ADDR
// arForceTmp := [ ] ;
 490: LD_ADDR_EXP 15
 494: PUSH
 495: EMPTY
 496: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 497: LD_ADDR_VAR 0 3
 501: PUSH
 502: LD_INT 22
 504: PUSH
 505: LD_VAR 0 1
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 31
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: LD_INT 95
 529: PUSH
 530: LD_INT 1
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 58
 543: PUSH
 544: EMPTY
 545: LIST
 546: PUSH
 547: EMPTY
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 688
// begin d := GetDir ( i ) ;
 561: LD_ADDR_VAR 0 4
 565: PUSH
 566: LD_VAR 0 3
 570: PPUSH
 571: CALL_OW 254
 575: ST_TO_ADDR
// if d < 3 then
 576: LD_VAR 0 4
 580: PUSH
 581: LD_INT 3
 583: LESS
 584: IFFALSE 602
// d := d + 3 else
 586: LD_ADDR_VAR 0 4
 590: PUSH
 591: LD_VAR 0 4
 595: PUSH
 596: LD_INT 3
 598: PLUS
 599: ST_TO_ADDR
 600: GO 616
// d := d - 3 ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: LD_VAR 0 4
 611: PUSH
 612: LD_INT 3
 614: MINUS
 615: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 616: LD_INT 0
 618: PPUSH
 619: LD_VAR 0 8
 623: PPUSH
 624: CALL_OW 381
// un := CreateHuman ;
 628: LD_ADDR_VAR 0 6
 632: PUSH
 633: CALL_OW 44
 637: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 638: LD_ADDR_EXP 15
 642: PUSH
 643: LD_EXP 15
 647: PPUSH
 648: LD_VAR 0 6
 652: PPUSH
 653: CALL 51394 0 2
 657: ST_TO_ADDR
// SetDir ( un , d ) ;
 658: LD_VAR 0 6
 662: PPUSH
 663: LD_VAR 0 4
 667: PPUSH
 668: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 672: LD_VAR 0 6
 676: PPUSH
 677: LD_VAR 0 3
 681: PPUSH
 682: CALL_OW 52
// end ;
 686: GO 558
 688: POP
 689: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 690: LD_ADDR_VAR 0 3
 694: PUSH
 695: LD_INT 22
 697: PUSH
 698: LD_VAR 0 1
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 3
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PPUSH
 721: CALL_OW 69
 725: PUSH
 726: FOR_IN
 727: IFFALSE 760
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 729: LD_VAR 0 3
 733: PPUSH
 734: LD_INT 3
 736: PUSH
 737: LD_INT 5
 739: PUSH
 740: LD_INT 7
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: PUSH
 748: LD_OWVAR 67
 752: ARRAY
 753: PPUSH
 754: CALL_OW 241
 758: GO 726
 760: POP
 761: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 22
 769: PUSH
 770: LD_VAR 0 1
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: LD_INT 30
 781: PUSH
 782: LD_INT 32
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PPUSH
 793: CALL_OW 69
 797: PUSH
 798: FOR_IN
 799: IFFALSE 844
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 801: LD_VAR 0 3
 805: PPUSH
 806: LD_INT 27
 808: PUSH
 809: LD_INT 25
 811: PUSH
 812: LD_INT 28
 814: PUSH
 815: LD_INT 27
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_VAR 0 3
 828: PUSH
 829: LD_INT 4
 831: MOD
 832: PUSH
 833: LD_INT 1
 835: PLUS
 836: ARRAY
 837: PPUSH
 838: CALL_OW 431
 842: GO 798
 844: POP
 845: POP
// end ;
 846: LD_VAR 0 2
 850: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 851: LD_INT 0
 853: PPUSH
 854: PPUSH
 855: PPUSH
 856: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 517
 874: ST_TO_ADDR
// if not tmp then
 875: LD_VAR 0 5
 879: NOT
 880: IFFALSE 884
// exit ;
 882: GO 1126
// for i := 1 to n do
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: DOUBLE
 890: LD_INT 1
 892: DEC
 893: ST_TO_ADDR
 894: LD_VAR 0 2
 898: PUSH
 899: FOR_TO
 900: IFFALSE 1124
// begin r := rand ( 1 , tmp [ 1 ] ) ;
 902: LD_ADDR_VAR 0 6
 906: PUSH
 907: LD_INT 1
 909: PPUSH
 910: LD_VAR 0 5
 914: PUSH
 915: LD_INT 1
 917: ARRAY
 918: PPUSH
 919: CALL_OW 12
 923: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
 924: LD_VAR 0 5
 928: PUSH
 929: LD_INT 1
 931: ARRAY
 932: PUSH
 933: LD_VAR 0 6
 937: ARRAY
 938: PPUSH
 939: LD_VAR 0 5
 943: PUSH
 944: LD_INT 2
 946: ARRAY
 947: PUSH
 948: LD_VAR 0 6
 952: ARRAY
 953: PPUSH
 954: LD_EXP 3
 958: PUSH
 959: LD_INT 1
 961: ARRAY
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
 970: LD_ADDR_EXP 13
 974: PUSH
 975: LD_EXP 13
 979: PPUSH
 980: LD_EXP 13
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_VAR 0 5
 993: PUSH
 994: LD_INT 1
 996: ARRAY
 997: PUSH
 998: LD_VAR 0 6
1002: ARRAY
1003: PPUSH
1004: CALL_OW 2
1008: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1009: LD_ADDR_EXP 13
1013: PUSH
1014: LD_EXP 13
1018: PPUSH
1019: LD_EXP 13
1023: PUSH
1024: LD_INT 1
1026: PLUS
1027: PPUSH
1028: LD_VAR 0 5
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 6
1041: ARRAY
1042: PPUSH
1043: CALL_OW 2
1047: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1048: LD_ADDR_VAR 0 5
1052: PUSH
1053: LD_VAR 0 5
1057: PPUSH
1058: LD_INT 1
1060: PPUSH
1061: LD_VAR 0 5
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_VAR 0 6
1074: PPUSH
1075: CALL_OW 3
1079: PPUSH
1080: CALL_OW 1
1084: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1085: LD_ADDR_VAR 0 5
1089: PUSH
1090: LD_VAR 0 5
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: LD_VAR 0 5
1102: PUSH
1103: LD_INT 2
1105: ARRAY
1106: PPUSH
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 3
1116: PPUSH
1117: CALL_OW 1
1121: ST_TO_ADDR
// end ;
1122: GO 899
1124: POP
1125: POP
// end ;
1126: LD_VAR 0 3
1130: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1131: LD_INT 0
1133: PPUSH
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
1138: PPUSH
1139: PPUSH
1140: PPUSH
1141: PPUSH
1142: PPUSH
1143: PPUSH
1144: PPUSH
1145: PPUSH
1146: PPUSH
1147: PPUSH
1148: PPUSH
1149: PPUSH
1150: PPUSH
1151: PPUSH
1152: PPUSH
1153: PPUSH
1154: PPUSH
1155: PPUSH
1156: PPUSH
1157: PPUSH
1158: PPUSH
1159: PPUSH
1160: PPUSH
// enable ;
1161: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1162: LD_ADDR_VAR 0 11
1166: PUSH
1167: LD_INT 81
1169: PUSH
1170: LD_VAR 0 1
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 69
1183: ST_TO_ADDR
// if tmp then
1184: LD_VAR 0 11
1188: IFFALSE 1209
// enemySide := GetSide ( tmp [ 1 ] ) ;
1190: LD_ADDR_VAR 0 35
1194: PUSH
1195: LD_VAR 0 11
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: CALL_OW 255
1208: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1209: LD_ADDR_VAR 0 23
1213: PUSH
1214: LD_VAR 0 3
1218: PPUSH
1219: LD_INT 81
1221: PUSH
1222: LD_VAR 0 1
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 70
1235: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1236: LD_ADDR_VAR 0 24
1240: PUSH
1241: LD_VAR 0 4
1245: PPUSH
1246: LD_INT 81
1248: PUSH
1249: LD_VAR 0 1
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PPUSH
1258: CALL_OW 70
1262: ST_TO_ADDR
// vehicles := arVehicles ;
1263: LD_ADDR_VAR 0 27
1267: PUSH
1268: LD_EXP 8
1272: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1273: LD_ADDR_VAR 0 33
1277: PUSH
1278: LD_VAR 0 3
1282: PPUSH
1283: LD_INT 22
1285: PUSH
1286: LD_VAR 0 1
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 2
1297: PUSH
1298: LD_INT 30
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 1
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 70
1331: ST_TO_ADDR
// if depot then
1332: LD_VAR 0 33
1336: IFFALSE 1352
// depot := depot [ 1 ] ;
1338: LD_ADDR_VAR 0 33
1342: PUSH
1343: LD_VAR 0 33
1347: PUSH
1348: LD_INT 1
1350: ARRAY
1351: ST_TO_ADDR
// if arTech then
1352: LD_EXP 5
1356: IFFALSE 1550
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1358: LD_ADDR_VAR 0 13
1362: PUSH
1363: LD_VAR 0 3
1367: PPUSH
1368: LD_INT 22
1370: PUSH
1371: LD_VAR 0 1
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 50
1382: PUSH
1383: EMPTY
1384: LIST
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: LD_INT 30
1391: PUSH
1392: LD_INT 6
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 30
1401: PUSH
1402: LD_INT 7
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: LD_INT 30
1411: PUSH
1412: LD_INT 8
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: ST_TO_ADDR
// if lab then
1435: LD_VAR 0 13
1439: IFFALSE 1550
// begin for j := 1 to Count ( lab ) do
1441: LD_ADDR_VAR 0 10
1445: PUSH
1446: DOUBLE
1447: LD_INT 1
1449: DEC
1450: ST_TO_ADDR
1451: LD_VAR 0 13
1455: PPUSH
1456: CALL 15805 0 1
1460: PUSH
1461: FOR_TO
1462: IFFALSE 1548
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1464: LD_VAR 0 13
1468: PUSH
1469: LD_VAR 0 10
1473: ARRAY
1474: PPUSH
1475: CALL_OW 461
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1546
// begin for i in arTech do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_EXP 5
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1544
// if CanBeResearched ( lab [ j ] , i ) then
1498: LD_VAR 0 13
1502: PUSH
1503: LD_VAR 0 10
1507: ARRAY
1508: PPUSH
1509: LD_VAR 0 9
1513: PPUSH
1514: CALL_OW 430
1518: IFFALSE 1542
// begin ComResearch ( lab [ j ] , i ) ;
1520: LD_VAR 0 13
1524: PUSH
1525: LD_VAR 0 10
1529: ARRAY
1530: PPUSH
1531: LD_VAR 0 9
1535: PPUSH
1536: CALL_OW 124
// break ;
1540: GO 1544
// end ;
1542: GO 1495
1544: POP
1545: POP
// end ;
1546: GO 1461
1548: POP
1549: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
1550: LD_ADDR_VAR 0 30
1554: PUSH
1555: LD_VAR 0 3
1559: PPUSH
1560: LD_INT 22
1562: PUSH
1563: LD_VAR 0 1
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 30
1574: PUSH
1575: LD_INT 3
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 50
1584: PUSH
1585: EMPTY
1586: LIST
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: PPUSH
1593: CALL_OW 70
1597: ST_TO_ADDR
// if fac then
1598: LD_VAR 0 30
1602: IFFALSE 1937
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
1604: LD_VAR 0 30
1608: PUSH
1609: LD_INT 1
1611: ARRAY
1612: PPUSH
1613: CALL_OW 461
1617: PUSH
1618: LD_INT 2
1620: EQUAL
1621: IFFALSE 1937
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
1623: LD_ADDR_VAR 0 31
1627: PUSH
1628: LD_VAR 0 3
1632: PPUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 30
1638: PUSH
1639: LD_INT 32
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 30
1648: PUSH
1649: LD_INT 33
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: LD_INT 35
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: PPUSH
1675: CALL_OW 70
1679: ST_TO_ADDR
// if emptyTowers then
1680: LD_VAR 0 31
1684: IFFALSE 1734
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
1686: LD_ADDR_VAR 0 32
1690: PUSH
1691: LD_VAR 0 31
1695: PUSH
1696: LD_INT 1
1698: ARRAY
1699: PPUSH
1700: LD_VAR 0 3
1704: PPUSH
1705: CALL 24050 0 2
1709: ST_TO_ADDR
// if weapon then
1710: LD_VAR 0 32
1714: IFFALSE 1734
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
1716: LD_VAR 0 31
1720: PUSH
1721: LD_INT 1
1723: ARRAY
1724: PPUSH
1725: LD_VAR 0 32
1729: PPUSH
1730: CALL_OW 148
// end ; if arConstructList then
1734: LD_EXP 6
1738: IFFALSE 1937
// for i := 1 to Count ( arConstructList ) do
1740: LD_ADDR_VAR 0 9
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_EXP 6
1754: PPUSH
1755: CALL 15805 0 1
1759: PUSH
1760: FOR_TO
1761: IFFALSE 1935
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
1763: LD_VAR 0 30
1767: PUSH
1768: LD_INT 1
1770: ARRAY
1771: PPUSH
1772: LD_EXP 6
1776: PUSH
1777: LD_VAR 0 9
1781: ARRAY
1782: PUSH
1783: LD_INT 1
1785: ARRAY
1786: PPUSH
1787: LD_EXP 6
1791: PUSH
1792: LD_VAR 0 9
1796: ARRAY
1797: PUSH
1798: LD_INT 2
1800: ARRAY
1801: PPUSH
1802: LD_EXP 6
1806: PUSH
1807: LD_VAR 0 9
1811: ARRAY
1812: PUSH
1813: LD_INT 3
1815: ARRAY
1816: PPUSH
1817: LD_EXP 6
1821: PUSH
1822: LD_VAR 0 9
1826: ARRAY
1827: PUSH
1828: LD_INT 4
1830: ARRAY
1831: PPUSH
1832: CALL_OW 448
1836: IFFALSE 1933
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
1838: LD_VAR 0 30
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: LD_EXP 6
1851: PUSH
1852: LD_VAR 0 9
1856: ARRAY
1857: PUSH
1858: LD_INT 1
1860: ARRAY
1861: PPUSH
1862: LD_EXP 6
1866: PUSH
1867: LD_VAR 0 9
1871: ARRAY
1872: PUSH
1873: LD_INT 2
1875: ARRAY
1876: PPUSH
1877: LD_EXP 6
1881: PUSH
1882: LD_VAR 0 9
1886: ARRAY
1887: PUSH
1888: LD_INT 3
1890: ARRAY
1891: PPUSH
1892: LD_EXP 6
1896: PUSH
1897: LD_VAR 0 9
1901: ARRAY
1902: PUSH
1903: LD_INT 4
1905: ARRAY
1906: PPUSH
1907: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
1911: LD_ADDR_EXP 6
1915: PUSH
1916: LD_EXP 6
1920: PPUSH
1921: LD_VAR 0 9
1925: PPUSH
1926: CALL_OW 3
1930: ST_TO_ADDR
// break ;
1931: GO 1935
// end ; end ;
1933: GO 1760
1935: POP
1936: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
1937: LD_ADDR_VAR 0 11
1941: PUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 21
1949: PUSH
1950: LD_INT 3
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 3
1959: PUSH
1960: LD_INT 57
1962: PUSH
1963: EMPTY
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 3
1972: PUSH
1973: LD_INT 24
1975: PUSH
1976: LD_INT 1000
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: PPUSH
1992: CALL_OW 70
1996: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
1997: LD_ADDR_VAR 0 18
2001: PUSH
2002: LD_VAR 0 3
2006: PPUSH
2007: CALL_OW 435
2011: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2012: LD_ADDR_VAR 0 15
2016: PUSH
2017: LD_VAR 0 5
2021: PPUSH
2022: LD_INT 25
2024: PUSH
2025: LD_INT 3
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 50
2034: PUSH
2035: EMPTY
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL_OW 72
2046: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2047: LD_VAR 0 15
2051: PPUSH
2052: LD_INT 3
2054: PUSH
2055: LD_INT 120
2057: PUSH
2058: LD_INT 7
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 3
2071: PUSH
2072: LD_INT 54
2074: PUSH
2075: EMPTY
2076: LIST
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PPUSH
2086: CALL_OW 72
2090: PUSH
2091: LD_VAR 0 30
2095: PUSH
2096: LD_INT 1
2098: ARRAY
2099: PPUSH
2100: CALL_OW 302
2104: AND
2105: IFFALSE 2164
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2107: LD_VAR 0 15
2111: PPUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 120
2117: PUSH
2118: LD_INT 7
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: LD_INT 54
2134: PUSH
2135: EMPTY
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PPUSH
2146: CALL_OW 72
2150: PPUSH
2151: LD_VAR 0 30
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
2164: LD_ADDR_VAR 0 19
2168: PUSH
2169: LD_VAR 0 5
2173: PPUSH
2174: LD_INT 25
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 50
2186: PUSH
2187: EMPTY
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PPUSH
2194: CALL_OW 72
2198: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2199: LD_ADDR_VAR 0 13
2203: PUSH
2204: LD_VAR 0 3
2208: PPUSH
2209: LD_INT 2
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 6
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: LD_INT 30
2224: PUSH
2225: LD_INT 7
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 30
2234: PUSH
2235: LD_INT 8
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 70
2252: ST_TO_ADDR
// if sci then
2253: LD_VAR 0 19
2257: IFFALSE 2418
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2259: LD_ADDR_VAR 0 21
2263: PUSH
2264: LD_VAR 0 5
2268: PPUSH
2269: LD_INT 95
2271: PUSH
2272: LD_VAR 0 3
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 120
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PPUSH
2295: CALL_OW 72
2299: ST_TO_ADDR
// if hurtUnits then
2300: LD_VAR 0 21
2304: IFFALSE 2365
// begin for i in sci do
2306: LD_ADDR_VAR 0 9
2310: PUSH
2311: LD_VAR 0 19
2315: PUSH
2316: FOR_IN
2317: IFFALSE 2361
// if IsInUnit ( i ) then
2319: LD_VAR 0 9
2323: PPUSH
2324: CALL_OW 310
2328: IFFALSE 2341
// ComExitBuilding ( i ) else
2330: LD_VAR 0 9
2334: PPUSH
2335: CALL_OW 122
2339: GO 2359
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2341: LD_VAR 0 9
2345: PPUSH
2346: LD_VAR 0 21
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: CALL_OW 128
2359: GO 2316
2361: POP
2362: POP
// end else
2363: GO 2418
// if lab then
2365: LD_VAR 0 13
2369: IFFALSE 2418
// begin for i in sci do
2371: LD_ADDR_VAR 0 9
2375: PUSH
2376: LD_VAR 0 19
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2416
// if not IsInUnit ( i ) then
2384: LD_VAR 0 9
2388: PPUSH
2389: CALL_OW 310
2393: NOT
2394: IFFALSE 2414
// ComEnterUnit ( i , lab [ 1 ] ) ;
2396: LD_VAR 0 9
2400: PPUSH
2401: LD_VAR 0 13
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: CALL_OW 120
2414: GO 2381
2416: POP
2417: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2418: LD_ADDR_VAR 0 14
2422: PUSH
2423: LD_VAR 0 5
2427: PPUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 2
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 72
2442: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2443: LD_ADDR_VAR 0 34
2447: PUSH
2448: LD_EXP 7
2452: ST_TO_ADDR
// if eng then
2453: LD_VAR 0 14
2457: IFFALSE 3291
// begin for i in eng do
2459: LD_ADDR_VAR 0 9
2463: PUSH
2464: LD_VAR 0 14
2468: PUSH
2469: FOR_IN
2470: IFFALSE 3289
// begin tag := GetTag ( i ) ;
2472: LD_ADDR_VAR 0 16
2476: PUSH
2477: LD_VAR 0 9
2481: PPUSH
2482: CALL_OW 110
2486: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2487: LD_VAR 0 9
2491: PPUSH
2492: LD_VAR 0 4
2496: PPUSH
2497: CALL_OW 308
2501: IFFALSE 2532
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
2503: LD_VAR 0 9
2507: PPUSH
2508: LD_VAR 0 7
2512: PUSH
2513: LD_INT 1
2515: ARRAY
2516: PPUSH
2517: LD_VAR 0 7
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: PPUSH
2526: CALL_OW 111
// continue ;
2530: GO 2469
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
2532: LD_VAR 0 9
2536: PPUSH
2537: CALL_OW 256
2541: PUSH
2542: LD_INT 800
2544: LESS
2545: PUSH
2546: LD_VAR 0 16
2550: PUSH
2551: LD_INT 1
2553: NONEQUAL
2554: AND
2555: IFFALSE 2605
// begin SetTag ( i , tHeal ) ;
2557: LD_VAR 0 9
2561: PPUSH
2562: LD_INT 1
2564: PPUSH
2565: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
2569: LD_VAR 0 9
2573: PPUSH
2574: LD_VAR 0 6
2578: PUSH
2579: LD_INT 1
2581: ARRAY
2582: PPUSH
2583: LD_VAR 0 6
2587: PUSH
2588: LD_INT 2
2590: ARRAY
2591: PPUSH
2592: CALL_OW 111
// AddComHold ( i ) ;
2596: LD_VAR 0 9
2600: PPUSH
2601: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
2605: LD_VAR 0 16
2609: PUSH
2610: LD_INT 1
2612: EQUAL
2613: PUSH
2614: LD_VAR 0 9
2618: PPUSH
2619: CALL_OW 256
2623: PUSH
2624: LD_INT 1000
2626: EQUAL
2627: AND
2628: IFFALSE 2642
// SetTag ( i , 0 ) ;
2630: LD_VAR 0 9
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: CALL_OW 109
// if not tag then
2642: LD_VAR 0 16
2646: NOT
2647: IFFALSE 2814
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
2649: LD_ADDR_VAR 0 12
2653: PUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 57
2661: PUSH
2662: EMPTY
2663: LIST
2664: PPUSH
2665: CALL_OW 70
2669: ST_TO_ADDR
// if undone then
2670: LD_VAR 0 12
2674: IFFALSE 2696
// begin ComComplete ( i , undone [ 1 ] ) ;
2676: LD_VAR 0 9
2680: PPUSH
2681: LD_VAR 0 12
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: PPUSH
2690: CALL 21903 0 2
// continue ;
2694: GO 2469
// end ; if cr or tmp or buildingsToBuild then
2696: LD_VAR 0 18
2700: PUSH
2701: LD_VAR 0 11
2705: OR
2706: PUSH
2707: LD_VAR 0 34
2711: OR
2712: IFFALSE 2788
// begin if IsInUnit ( i ) then
2714: LD_VAR 0 9
2718: PPUSH
2719: CALL_OW 310
2723: IFFALSE 2734
// ComExitBuilding ( i ) ;
2725: LD_VAR 0 9
2729: PPUSH
2730: CALL_OW 122
// if tmp then
2734: LD_VAR 0 11
2738: IFFALSE 2754
// SetTag ( i , tRepair ) else
2740: LD_VAR 0 9
2744: PPUSH
2745: LD_INT 3
2747: PPUSH
2748: CALL_OW 109
2752: GO 2786
// if cr then
2754: LD_VAR 0 18
2758: IFFALSE 2774
// SetTag ( i , tCrates ) else
2760: LD_VAR 0 9
2764: PPUSH
2765: LD_INT 2
2767: PPUSH
2768: CALL_OW 109
2772: GO 2786
// SetTag ( i , tBuild ) ;
2774: LD_VAR 0 9
2778: PPUSH
2779: LD_INT 5
2781: PPUSH
2782: CALL_OW 109
// end else
2786: GO 2814
// if not IsInUnit ( i ) then
2788: LD_VAR 0 9
2792: PPUSH
2793: CALL_OW 310
2797: NOT
2798: IFFALSE 2814
// ComEnterUnit ( i , depot ) ;
2800: LD_VAR 0 9
2804: PPUSH
2805: LD_VAR 0 33
2809: PPUSH
2810: CALL_OW 120
// end ; if tag = tRepair then
2814: LD_VAR 0 16
2818: PUSH
2819: LD_INT 3
2821: EQUAL
2822: IFFALSE 2928
// begin if IsInUnit ( i ) then
2824: LD_VAR 0 9
2828: PPUSH
2829: CALL_OW 310
2833: IFFALSE 2846
// begin ComExitBuilding ( i ) ;
2835: LD_VAR 0 9
2839: PPUSH
2840: CALL_OW 122
// continue ;
2844: GO 2469
// end ; if not tmp then
2846: LD_VAR 0 11
2850: NOT
2851: IFFALSE 2867
// begin SetTag ( i , 0 ) ;
2853: LD_VAR 0 9
2857: PPUSH
2858: LD_INT 0
2860: PPUSH
2861: CALL_OW 109
// continue ;
2865: GO 2469
// end ; if not HasTask ( i ) then
2867: LD_VAR 0 9
2871: PPUSH
2872: CALL_OW 314
2876: NOT
2877: IFFALSE 2897
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
2879: LD_VAR 0 9
2883: PPUSH
2884: LD_VAR 0 11
2888: PUSH
2889: LD_INT 1
2891: ARRAY
2892: PPUSH
2893: CALL_OW 130
// if not IsInArea ( i , area ) then
2897: LD_VAR 0 9
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL_OW 308
2911: NOT
2912: IFFALSE 2928
// ComMoveToArea ( i , area ) ;
2914: LD_VAR 0 9
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: CALL_OW 113
// end ; if tag = tBuild then
2928: LD_VAR 0 16
2932: PUSH
2933: LD_INT 5
2935: EQUAL
2936: IFFALSE 3142
// begin if IsInUnit ( i ) then
2938: LD_VAR 0 9
2942: PPUSH
2943: CALL_OW 310
2947: IFFALSE 2960
// begin ComExitBuilding ( i ) ;
2949: LD_VAR 0 9
2953: PPUSH
2954: CALL_OW 122
// continue ;
2958: GO 2469
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
2960: LD_VAR 0 34
2964: NOT
2965: PUSH
2966: LD_VAR 0 23
2970: OR
2971: PUSH
2972: LD_VAR 0 24
2976: OR
2977: IFFALSE 2995
// begin SetTag ( i , 0 ) ;
2979: LD_VAR 0 9
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 109
// continue ;
2991: GO 2469
// end else
2993: GO 3034
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
2995: LD_VAR 0 33
2999: PPUSH
3000: LD_VAR 0 34
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: PPUSH
3013: CALL 55313 0 2
3017: NOT
3018: IFFALSE 3034
// begin SetTag ( i , 0 ) ;
3020: LD_VAR 0 9
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 109
// continue ;
3032: GO 2469
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3034: LD_ADDR_VAR 0 12
3038: PUSH
3039: LD_VAR 0 3
3043: PPUSH
3044: LD_INT 57
3046: PUSH
3047: EMPTY
3048: LIST
3049: PPUSH
3050: CALL_OW 70
3054: ST_TO_ADDR
// if undone then
3055: LD_VAR 0 12
3059: IFFALSE 3081
// begin ComComplete ( i , undone [ 1 ] ) ;
3061: LD_VAR 0 9
3065: PPUSH
3066: LD_VAR 0 12
3070: PUSH
3071: LD_INT 1
3073: ARRAY
3074: PPUSH
3075: CALL 21903 0 2
// continue ;
3079: GO 2469
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3081: LD_VAR 0 9
3085: PPUSH
3086: LD_VAR 0 34
3090: PUSH
3091: LD_INT 1
3093: ARRAY
3094: PUSH
3095: LD_INT 1
3097: ARRAY
3098: PPUSH
3099: LD_VAR 0 34
3103: PUSH
3104: LD_INT 1
3106: ARRAY
3107: PUSH
3108: LD_INT 2
3110: ARRAY
3111: PPUSH
3112: LD_VAR 0 34
3116: PUSH
3117: LD_INT 1
3119: ARRAY
3120: PUSH
3121: LD_INT 3
3123: ARRAY
3124: PPUSH
3125: LD_VAR 0 34
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PUSH
3134: LD_INT 4
3136: ARRAY
3137: PPUSH
3138: CALL_OW 145
// end ; if tag = tCrates then
3142: LD_VAR 0 16
3146: PUSH
3147: LD_INT 2
3149: EQUAL
3150: IFFALSE 3287
// begin if IsInUnit ( i ) then
3152: LD_VAR 0 9
3156: PPUSH
3157: CALL_OW 310
3161: IFFALSE 3174
// begin ComExitBuilding ( i ) ;
3163: LD_VAR 0 9
3167: PPUSH
3168: CALL_OW 122
// continue ;
3172: GO 2469
// end ; if not cr then
3174: LD_VAR 0 18
3178: NOT
3179: IFFALSE 3195
// begin SetTag ( i , 0 ) ;
3181: LD_VAR 0 9
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 109
// continue ;
3193: GO 2469
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3195: LD_VAR 0 9
3199: PPUSH
3200: CALL_OW 314
3204: NOT
3205: PUSH
3206: LD_INT 81
3208: PUSH
3209: LD_VAR 0 1
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 92
3220: PUSH
3221: LD_VAR 0 18
3225: PUSH
3226: LD_INT 1
3228: ARRAY
3229: PUSH
3230: LD_VAR 0 18
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PUSH
3239: LD_INT 12
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: NOT
3257: AND
3258: IFFALSE 3287
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3260: LD_VAR 0 9
3264: PPUSH
3265: LD_VAR 0 18
3269: PUSH
3270: LD_INT 1
3272: ARRAY
3273: PPUSH
3274: LD_VAR 0 18
3278: PUSH
3279: LD_INT 2
3281: ARRAY
3282: PPUSH
3283: CALL_OW 117
// end ; end ;
3287: GO 2469
3289: POP
3290: POP
// end ; if vehicles then
3291: LD_VAR 0 27
3295: IFFALSE 4095
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3297: LD_ADDR_VAR 0 27
3301: PUSH
3302: LD_VAR 0 27
3306: PPUSH
3307: LD_INT 3
3309: PUSH
3310: LD_INT 2
3312: PUSH
3313: LD_INT 34
3315: PUSH
3316: LD_INT 88
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 34
3325: PUSH
3326: LD_INT 32
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: LIST
3337: PUSH
3338: EMPTY
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 50
3344: PUSH
3345: EMPTY
3346: LIST
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: CALL_OW 72
3356: ST_TO_ADDR
// if vehicles then
3357: LD_VAR 0 27
3361: IFFALSE 4095
// begin for i in vehicles do
3363: LD_ADDR_VAR 0 9
3367: PUSH
3368: LD_VAR 0 27
3372: PUSH
3373: FOR_IN
3374: IFFALSE 4093
// begin tag := GetTag ( i ) ;
3376: LD_ADDR_VAR 0 16
3380: PUSH
3381: LD_VAR 0 9
3385: PPUSH
3386: CALL_OW 110
3390: ST_TO_ADDR
// if not tag then
3391: LD_VAR 0 16
3395: NOT
3396: IFFALSE 3542
// begin if GetControl ( i ) = control_manual then
3398: LD_VAR 0 9
3402: PPUSH
3403: CALL_OW 263
3407: PUSH
3408: LD_INT 1
3410: EQUAL
3411: IFFALSE 3528
// begin drivers := arDrivers ;
3413: LD_ADDR_VAR 0 25
3417: PUSH
3418: LD_EXP 10
3422: ST_TO_ADDR
// if not drivers then
3423: LD_VAR 0 25
3427: NOT
3428: IFFALSE 3508
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3430: LD_ADDR_VAR 0 25
3434: PUSH
3435: LD_VAR 0 15
3439: PPUSH
3440: LD_INT 3
3442: PUSH
3443: LD_INT 120
3445: PUSH
3446: LD_INT 7
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PPUSH
3457: CALL_OW 72
3461: ST_TO_ADDR
// if drivers then
3462: LD_VAR 0 25
3466: IFFALSE 3508
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3468: LD_VAR 0 25
3472: PUSH
3473: LD_INT 1
3475: ARRAY
3476: PPUSH
3477: LD_INT 7
3479: PPUSH
3480: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3484: LD_ADDR_EXP 10
3488: PUSH
3489: LD_EXP 10
3493: PPUSH
3494: LD_VAR 0 25
3498: PUSH
3499: LD_INT 1
3501: ARRAY
3502: PPUSH
3503: CALL 51394 0 2
3507: ST_TO_ADDR
// end ; end ; if drivers then
3508: LD_VAR 0 25
3512: IFFALSE 3526
// SetTag ( i , tBusy ) ;
3514: LD_VAR 0 9
3518: PPUSH
3519: LD_INT 8
3521: PPUSH
3522: CALL_OW 109
// continue ;
3526: GO 3373
// end ; SetTag ( i , tBusy ) ;
3528: LD_VAR 0 9
3532: PPUSH
3533: LD_INT 8
3535: PPUSH
3536: CALL_OW 109
// end else
3540: GO 4091
// if tag = tBusy then
3542: LD_VAR 0 16
3546: PUSH
3547: LD_INT 8
3549: EQUAL
3550: IFFALSE 3762
// begin if GetLives ( i ) = 1000 then
3552: LD_VAR 0 9
3556: PPUSH
3557: CALL_OW 256
3561: PUSH
3562: LD_INT 1000
3564: EQUAL
3565: IFFALSE 3760
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
3567: LD_VAR 0 9
3571: PPUSH
3572: CALL_OW 263
3576: PUSH
3577: LD_INT 1
3579: EQUAL
3580: PUSH
3581: LD_VAR 0 9
3585: PPUSH
3586: CALL_OW 311
3590: NOT
3591: AND
3592: IFFALSE 3748
// begin drivers := arDrivers ;
3594: LD_ADDR_VAR 0 25
3598: PUSH
3599: LD_EXP 10
3603: ST_TO_ADDR
// if not drivers then
3604: LD_VAR 0 25
3608: NOT
3609: IFFALSE 3625
// begin SetTag ( i , 0 ) ;
3611: LD_VAR 0 9
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL_OW 109
// continue ;
3623: GO 3373
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
3625: LD_VAR 0 25
3629: PUSH
3630: LD_INT 1
3632: ARRAY
3633: PPUSH
3634: CALL_OW 310
3638: PUSH
3639: LD_VAR 0 25
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL 48998 0 1
3652: NOT
3653: AND
3654: IFFALSE 3669
// ComExitBuilding ( drivers [ 1 ] ) ;
3656: LD_VAR 0 25
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
3669: LD_VAR 0 27
3673: PPUSH
3674: LD_INT 120
3676: PUSH
3677: LD_INT 3
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: PPUSH
3684: CALL_OW 72
3688: PUSH
3689: LD_VAR 0 25
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: AND
3704: PUSH
3705: LD_VAR 0 27
3709: PPUSH
3710: LD_INT 120
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 72
3724: NOT
3725: OR
3726: IFFALSE 3746
// ComEnterUnit ( drivers [ 1 ] , i ) ;
3728: LD_VAR 0 25
3732: PUSH
3733: LD_INT 1
3735: ARRAY
3736: PPUSH
3737: LD_VAR 0 9
3741: PPUSH
3742: CALL_OW 120
// continue ;
3746: GO 3373
// end ; SetTag ( i , tAttack ) ;
3748: LD_VAR 0 9
3752: PPUSH
3753: LD_INT 13
3755: PPUSH
3756: CALL_OW 109
// end ; end else
3760: GO 4091
// if tag = tAttack then
3762: LD_VAR 0 16
3766: PUSH
3767: LD_INT 13
3769: EQUAL
3770: IFFALSE 3950
// begin enemy := enemyInBase ;
3772: LD_ADDR_VAR 0 22
3776: PUSH
3777: LD_VAR 0 23
3781: ST_TO_ADDR
// if not enemy then
3782: LD_VAR 0 22
3786: NOT
3787: IFFALSE 3799
// enemy := enemyOuterBase ;
3789: LD_ADDR_VAR 0 22
3793: PUSH
3794: LD_VAR 0 24
3798: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
3799: LD_VAR 0 22
3803: NOT
3804: PUSH
3805: LD_VAR 0 9
3809: PPUSH
3810: LD_VAR 0 7
3814: PUSH
3815: LD_INT 1
3817: ARRAY
3818: PPUSH
3819: LD_VAR 0 7
3823: PUSH
3824: LD_INT 2
3826: ARRAY
3827: PPUSH
3828: CALL_OW 297
3832: PUSH
3833: LD_INT 10
3835: GREATER
3836: AND
3837: IFFALSE 3868
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3839: LD_VAR 0 9
3843: PPUSH
3844: LD_VAR 0 7
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_VAR 0 7
3857: PUSH
3858: LD_INT 2
3860: ARRAY
3861: PPUSH
3862: CALL_OW 111
// continue ;
3866: GO 3373
// end ; if GetLives ( i ) < 650 then
3868: LD_VAR 0 9
3872: PPUSH
3873: CALL_OW 256
3877: PUSH
3878: LD_INT 650
3880: LESS
3881: IFFALSE 3924
// begin SetTag ( i , tVehRepair ) ;
3883: LD_VAR 0 9
3887: PPUSH
3888: LD_INT 9
3890: PPUSH
3891: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3895: LD_VAR 0 9
3899: PPUSH
3900: LD_VAR 0 7
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: PPUSH
3909: LD_VAR 0 7
3913: PUSH
3914: LD_INT 2
3916: ARRAY
3917: PPUSH
3918: CALL_OW 111
// continue ;
3922: GO 3373
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
3924: LD_VAR 0 9
3928: PPUSH
3929: LD_VAR 0 22
3933: PPUSH
3934: LD_VAR 0 9
3938: PPUSH
3939: CALL_OW 74
3943: PPUSH
3944: CALL_OW 115
// end else
3948: GO 4091
// if tag = tVehRepair then
3950: LD_VAR 0 16
3954: PUSH
3955: LD_INT 9
3957: EQUAL
3958: IFFALSE 4091
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
3960: LD_VAR 0 9
3964: PPUSH
3965: LD_VAR 0 7
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 7
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: CALL_OW 297
3987: PUSH
3988: LD_INT 10
3990: GREATER
3991: IFFALSE 4022
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3993: LD_VAR 0 9
3997: PPUSH
3998: LD_VAR 0 7
4002: PUSH
4003: LD_INT 1
4005: ARRAY
4006: PPUSH
4007: LD_VAR 0 7
4011: PUSH
4012: LD_INT 2
4014: ARRAY
4015: PPUSH
4016: CALL_OW 111
// continue ;
4020: GO 3373
// end ; if GetLives ( i ) = 1000 then
4022: LD_VAR 0 9
4026: PPUSH
4027: CALL_OW 256
4031: PUSH
4032: LD_INT 1000
4034: EQUAL
4035: IFFALSE 4051
// begin SetTag ( i , tBusy ) ;
4037: LD_VAR 0 9
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: CALL_OW 109
// continue ;
4049: GO 3373
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4051: LD_VAR 0 9
4055: PPUSH
4056: CALL_OW 263
4060: PUSH
4061: LD_INT 1
4063: EQUAL
4064: PUSH
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 311
4074: AND
4075: IFFALSE 4091
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4077: LD_VAR 0 9
4081: PPUSH
4082: CALL_OW 311
4086: PPUSH
4087: CALL 53094 0 1
// end ; end ;
4091: GO 3373
4093: POP
4094: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4095: LD_ADDR_VAR 0 20
4099: PUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 25
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 25
4120: PUSH
4121: LD_INT 8
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 25
4130: PUSH
4131: LD_INT 5
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 25
4140: PUSH
4141: LD_INT 9
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 50
4157: PUSH
4158: EMPTY
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 72
4169: ST_TO_ADDR
// if sol then
4170: LD_VAR 0 20
4174: IFFALSE 4682
// begin if enemyInBase then
4176: LD_VAR 0 23
4180: IFFALSE 4359
// begin for i in sol do
4182: LD_ADDR_VAR 0 9
4186: PUSH
4187: LD_VAR 0 20
4191: PUSH
4192: FOR_IN
4193: IFFALSE 4355
// begin tw := IsInUnit ( i ) ;
4195: LD_ADDR_VAR 0 17
4199: PUSH
4200: LD_VAR 0 9
4204: PPUSH
4205: CALL_OW 310
4209: ST_TO_ADDR
// if tw then
4210: LD_VAR 0 17
4214: IFFALSE 4297
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4216: LD_VAR 0 17
4220: PUSH
4221: LD_INT 22
4223: PUSH
4224: LD_VAR 0 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 101
4235: PUSH
4236: LD_VAR 0 35
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: LD_INT 30
4250: PUSH
4251: LD_INT 32
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 30
4260: PUSH
4261: LD_INT 31
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: LIST
4277: PPUSH
4278: CALL_OW 69
4282: IN
4283: NOT
4284: IFFALSE 4295
// ComExitBuilding ( i ) ;
4286: LD_VAR 0 9
4290: PPUSH
4291: CALL_OW 122
// end else
4295: GO 4353
// if IsInArea ( i , area ) then
4297: LD_VAR 0 9
4301: PPUSH
4302: LD_VAR 0 3
4306: PPUSH
4307: CALL_OW 308
4311: IFFALSE 4339
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4313: LD_VAR 0 9
4317: PPUSH
4318: LD_VAR 0 23
4322: PPUSH
4323: LD_VAR 0 9
4327: PPUSH
4328: CALL_OW 74
4332: PPUSH
4333: CALL_OW 115
4337: GO 4353
// ComMoveToArea ( i , area ) ;
4339: LD_VAR 0 9
4343: PPUSH
4344: LD_VAR 0 3
4348: PPUSH
4349: CALL_OW 113
// end ;
4353: GO 4192
4355: POP
4356: POP
// end else
4357: GO 4682
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4359: LD_ADDR_VAR 0 29
4363: PUSH
4364: LD_VAR 0 3
4368: PPUSH
4369: LD_INT 3
4371: PUSH
4372: LD_INT 62
4374: PUSH
4375: EMPTY
4376: LIST
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 30
4387: PUSH
4388: LD_INT 32
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 4
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 30
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 30
4417: PUSH
4418: LD_INT 31
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PPUSH
4436: CALL_OW 70
4440: ST_TO_ADDR
// if empty then
4441: LD_VAR 0 29
4445: IFFALSE 4462
// empty := ReverseArray ( empty ) ;
4447: LD_ADDR_VAR 0 29
4451: PUSH
4452: LD_VAR 0 29
4456: PPUSH
4457: CALL 46681 0 1
4461: ST_TO_ADDR
// for i in sol do
4462: LD_ADDR_VAR 0 9
4466: PUSH
4467: LD_VAR 0 20
4471: PUSH
4472: FOR_IN
4473: IFFALSE 4680
// begin tag := GetTag ( i ) ;
4475: LD_ADDR_VAR 0 16
4479: PUSH
4480: LD_VAR 0 9
4484: PPUSH
4485: CALL_OW 110
4489: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4490: LD_VAR 0 9
4494: PPUSH
4495: CALL_OW 256
4499: PUSH
4500: LD_INT 1000
4502: LESS
4503: PUSH
4504: LD_VAR 0 16
4508: PUSH
4509: LD_INT 1
4511: NONEQUAL
4512: AND
4513: IFFALSE 4565
// begin SetTag ( i , tHeal ) ;
4515: LD_VAR 0 9
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
4527: LD_VAR 0 9
4531: PPUSH
4532: LD_VAR 0 6
4536: PUSH
4537: LD_INT 1
4539: ARRAY
4540: PPUSH
4541: LD_VAR 0 6
4545: PUSH
4546: LD_INT 2
4548: ARRAY
4549: PPUSH
4550: CALL_OW 111
// AddComHold ( i ) ;
4554: LD_VAR 0 9
4558: PPUSH
4559: CALL_OW 200
// continue ;
4563: GO 4472
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
4565: LD_VAR 0 9
4569: PPUSH
4570: CALL_OW 256
4574: PUSH
4575: LD_INT 1000
4577: EQUAL
4578: PUSH
4579: LD_VAR 0 16
4583: PUSH
4584: LD_INT 1
4586: EQUAL
4587: AND
4588: IFFALSE 4604
// begin SetTag ( i , 0 ) ;
4590: LD_VAR 0 9
4594: PPUSH
4595: LD_INT 0
4597: PPUSH
4598: CALL_OW 109
// continue ;
4602: GO 4472
// end ; if HasTask ( i ) then
4604: LD_VAR 0 9
4608: PPUSH
4609: CALL_OW 314
4613: IFFALSE 4617
// continue ;
4615: GO 4472
// if not IsInUnit ( i ) and not tag and empty then
4617: LD_VAR 0 9
4621: PPUSH
4622: CALL_OW 310
4626: NOT
4627: PUSH
4628: LD_VAR 0 16
4632: NOT
4633: AND
4634: PUSH
4635: LD_VAR 0 29
4639: AND
4640: IFFALSE 4678
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
4642: LD_VAR 0 9
4646: PPUSH
4647: LD_VAR 0 29
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
4660: LD_ADDR_VAR 0 29
4664: PUSH
4665: LD_VAR 0 29
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL_OW 3
4677: ST_TO_ADDR
// end ; end ;
4678: GO 4472
4680: POP
4681: POP
// end ; end ; end ;
4682: LD_VAR 0 8
4686: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
4687: LD_EXP 14
4691: PPUSH
4692: LD_INT 50
4694: PUSH
4695: EMPTY
4696: LIST
4697: PPUSH
4698: CALL_OW 72
4702: IFFALSE 4755
4704: GO 4706
4706: DISABLE
// begin enable ;
4707: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
4708: LD_EXP 3
4712: PUSH
4713: LD_INT 1
4715: ARRAY
4716: PPUSH
4717: LD_INT 1
4719: PPUSH
4720: LD_INT 1
4722: PPUSH
4723: LD_INT 2
4725: PPUSH
4726: LD_EXP 14
4730: PPUSH
4731: LD_INT 109
4733: PUSH
4734: LD_INT 43
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PPUSH
4741: LD_INT 112
4743: PUSH
4744: LD_INT 52
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PPUSH
4751: CALL 1131 0 7
// end ;
4755: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
4756: LD_EXP 13
4760: IFFALSE 4980
4762: GO 4764
4764: DISABLE
4765: LD_INT 0
4767: PPUSH
4768: PPUSH
4769: PPUSH
// begin enable ;
4770: ENABLE
// p := 1 ;
4771: LD_ADDR_VAR 0 2
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
4779: LD_ADDR_VAR 0 1
4783: PUSH
4784: DOUBLE
4785: LD_INT 1
4787: DEC
4788: ST_TO_ADDR
4789: LD_EXP 13
4793: PPUSH
4794: CALL 15805 0 1
4798: PUSH
4799: LD_INT 2
4801: DIV
4802: PUSH
4803: FOR_TO
4804: IFFALSE 4978
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: LD_EXP 13
4815: PUSH
4816: LD_VAR 0 2
4820: ARRAY
4821: PPUSH
4822: LD_EXP 13
4826: PUSH
4827: LD_VAR 0 2
4831: PUSH
4832: LD_INT 1
4834: PLUS
4835: ARRAY
4836: PPUSH
4837: CALL_OW 428
4841: ST_TO_ADDR
// if tmp then
4842: LD_VAR 0 3
4846: IFFALSE 4962
// if GetSide ( tmp ) <> botSides [ 1 ] then
4848: LD_VAR 0 3
4852: PPUSH
4853: CALL_OW 255
4857: PUSH
4858: LD_EXP 3
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: NONEQUAL
4867: IFFALSE 4962
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
4869: LD_EXP 13
4873: PUSH
4874: LD_VAR 0 2
4878: ARRAY
4879: PPUSH
4880: LD_EXP 13
4884: PUSH
4885: LD_VAR 0 2
4889: PUSH
4890: LD_INT 1
4892: PLUS
4893: ARRAY
4894: PPUSH
4895: LD_EXP 3
4899: PUSH
4900: LD_INT 1
4902: ARRAY
4903: PPUSH
4904: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
4908: LD_ADDR_EXP 13
4912: PUSH
4913: LD_EXP 13
4917: PPUSH
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 3
4927: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
4928: LD_ADDR_EXP 13
4932: PUSH
4933: LD_EXP 13
4937: PPUSH
4938: LD_VAR 0 2
4942: PPUSH
4943: CALL_OW 3
4947: ST_TO_ADDR
// p := p - 2 ;
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: LD_VAR 0 2
4957: PUSH
4958: LD_INT 2
4960: MINUS
4961: ST_TO_ADDR
// end ; p := p + 2 ;
4962: LD_ADDR_VAR 0 2
4966: PUSH
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 2
4974: PLUS
4975: ST_TO_ADDR
// end ;
4976: GO 4803
4978: POP
4979: POP
// end ;
4980: PPOPN 3
4982: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
4983: LD_INT 2
4985: PPUSH
4986: CALL_OW 302
4990: PUSH
4991: LD_EXP 6
4995: NOT
4996: AND
4997: IFFALSE 5048
4999: GO 5001
5001: DISABLE
// begin enable ;
5002: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ;
5003: LD_ADDR_EXP 6
5007: PUSH
5008: LD_INT 14
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: LD_INT 27
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 14
5028: PUSH
5029: LD_INT 1
5031: PUSH
5032: LD_INT 1
5034: PUSH
5035: LD_INT 26
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: ST_TO_ADDR
// end ; end_of_file
5048: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , mulit_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5049: LD_INT 0
5051: PPUSH
5052: PPUSH
5053: PPUSH
5054: PPUSH
5055: PPUSH
// multi_settings_counter := 6 ;
5056: LD_ADDR_EXP 28
5060: PUSH
5061: LD_INT 6
5063: ST_TO_ADDR
// multi_settings := [ ] ;
5064: LD_ADDR_EXP 27
5068: PUSH
5069: EMPTY
5070: ST_TO_ADDR
// if Multiplayer then
5071: LD_OWVAR 4
5075: IFFALSE 5255
// begin your_side := mp_player_side ;
5077: LD_ADDR_OWVAR 2
5081: PUSH
5082: LD_OWVAR 7
5086: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5087: LD_ADDR_EXP 16
5091: PUSH
5092: LD_OWVAR 6
5096: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5097: LD_ADDR_EXP 17
5101: PUSH
5102: LD_OWVAR 17
5106: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5107: LD_ADDR_EXP 18
5111: PUSH
5112: LD_OWVAR 15
5116: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5117: LD_ADDR_EXP 19
5121: PUSH
5122: LD_OWVAR 16
5126: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5127: LD_ADDR_EXP 20
5131: PUSH
5132: EMPTY
5133: PUSH
5134: EMPTY
5135: LIST
5136: ST_TO_ADDR
// for i in mp_teams do
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: LD_OWVAR 12
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5191
// if i then
5150: LD_VAR 0 2
5154: IFFALSE 5189
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5156: LD_ADDR_EXP 20
5160: PUSH
5161: LD_EXP 20
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: LD_EXP 20
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PUSH
5178: LD_VAR 0 2
5182: UNION
5183: PPUSH
5184: CALL_OW 1
5188: ST_TO_ADDR
5189: GO 5147
5191: POP
5192: POP
// for i := 1 to multi_settings_counter do
5193: LD_ADDR_VAR 0 2
5197: PUSH
5198: DOUBLE
5199: LD_INT 1
5201: DEC
5202: ST_TO_ADDR
5203: LD_EXP 28
5207: PUSH
5208: FOR_TO
5209: IFFALSE 5251
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5211: LD_ADDR_EXP 27
5215: PUSH
5216: LD_EXP 27
5220: PPUSH
5221: LD_EXP 27
5225: PUSH
5226: LD_INT 1
5228: PLUS
5229: PPUSH
5230: LD_VAR 0 2
5234: PPUSH
5235: CALL_OW 426
5239: PUSH
5240: LD_INT 1
5242: PLUS
5243: PPUSH
5244: CALL_OW 1
5248: ST_TO_ADDR
5249: GO 5208
5251: POP
5252: POP
// end else
5253: GO 5441
// begin your_side := 3 ;
5255: LD_ADDR_OWVAR 2
5259: PUSH
5260: LD_INT 3
5262: ST_TO_ADDR
// multi_gametype := 1 ;
5263: LD_ADDR_EXP 16
5267: PUSH
5268: LD_INT 1
5270: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5271: LD_ADDR_EXP 17
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: LD_INT 0
5281: PUSH
5282: LD_INT 1
5284: PUSH
5285: LD_INT 2
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 0
5293: PUSH
5294: LD_INT 0
5296: PUSH
5297: LD_INT 0
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5310: LD_ADDR_EXP 18
5314: PUSH
5315: LD_INT 0
5317: PUSH
5318: LD_INT 0
5320: PUSH
5321: LD_INT 1
5323: PUSH
5324: LD_INT 1
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: LD_INT 0
5332: PUSH
5333: LD_INT 0
5335: PUSH
5336: LD_INT 0
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5349: LD_ADDR_EXP 19
5353: PUSH
5354: LD_INT 0
5356: PUSH
5357: LD_INT 0
5359: PUSH
5360: LD_INT 3
5362: PUSH
5363: LD_INT 3
5365: PUSH
5366: LD_INT 3
5368: PUSH
5369: LD_INT 0
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
5388: LD_ADDR_EXP 20
5392: PUSH
5393: LD_INT 3
5395: PUSH
5396: LD_INT 4
5398: PUSH
5399: LD_INT 5
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
5410: LD_ADDR_EXP 27
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 4
5420: PUSH
5421: LD_INT 4
5423: PUSH
5424: LD_INT 3
5426: PUSH
5427: LD_INT 1
5429: PUSH
5430: LD_INT 3
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5441: LD_ADDR_EXP 21
5445: PUSH
5446: LD_INT 0
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: LD_INT 0
5454: PUSH
5455: LD_INT 0
5457: PUSH
5458: LD_INT 0
5460: PUSH
5461: LD_INT 0
5463: PUSH
5464: LD_INT 0
5466: PUSH
5467: LD_INT 0
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5480: LD_ADDR_EXP 24
5484: PUSH
5485: LD_INT 0
5487: PUSH
5488: LD_INT 0
5490: PUSH
5491: LD_INT 0
5493: PUSH
5494: LD_INT 0
5496: PUSH
5497: LD_INT 0
5499: PUSH
5500: LD_INT 0
5502: PUSH
5503: LD_INT 0
5505: PUSH
5506: LD_INT 0
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5519: LD_ADDR_EXP 35
5523: PUSH
5524: LD_INT 0
5526: PUSH
5527: LD_INT 0
5529: PUSH
5530: LD_INT 0
5532: PUSH
5533: LD_INT 0
5535: PUSH
5536: LD_INT 0
5538: PUSH
5539: LD_INT 0
5541: PUSH
5542: LD_INT 0
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: ST_TO_ADDR
// multi_teamgame := true ;
5558: LD_ADDR_EXP 25
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
5566: LD_ADDR_EXP 23
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: ST_TO_ADDR
// multi_custom_commanders := true ;
5577: LD_ADDR_EXP 26
5581: PUSH
5582: LD_INT 1
5584: ST_TO_ADDR
// multi_commanders := [ ] ;
5585: LD_ADDR_EXP 34
5589: PUSH
5590: EMPTY
5591: ST_TO_ADDR
// multi_reinforcements := [ ] ;
5592: LD_ADDR_EXP 37
5596: PUSH
5597: EMPTY
5598: ST_TO_ADDR
// multi_players_amount := 0 ;
5599: LD_ADDR_EXP 36
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
5607: LD_ADDR_EXP 22
5611: PUSH
5612: LD_INT 5
5614: PUSH
5615: LD_INT 6
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 7
5624: PUSH
5625: LD_INT 8
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 9
5634: PUSH
5635: LD_INT 10
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5647: LD_ADDR_EXP 39
5651: PUSH
5652: EMPTY
5653: PUSH
5654: EMPTY
5655: PUSH
5656: EMPTY
5657: PUSH
5658: EMPTY
5659: PUSH
5660: EMPTY
5661: PUSH
5662: EMPTY
5663: PUSH
5664: EMPTY
5665: PUSH
5666: EMPTY
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: ST_TO_ADDR
// for i := 1 to 8 do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_INT 8
5690: PUSH
5691: FOR_TO
5692: IFFALSE 6021
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5694: LD_VAR 0 2
5698: PPUSH
5699: CALL_OW 530
5703: IFFALSE 5861
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5705: LD_ADDR_EXP 21
5709: PUSH
5710: LD_EXP 21
5714: PPUSH
5715: LD_VAR 0 2
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 1
5727: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5728: LD_ADDR_EXP 19
5732: PUSH
5733: LD_EXP 19
5737: PPUSH
5738: LD_VAR 0 2
5742: PPUSH
5743: LD_INT 0
5745: PPUSH
5746: CALL_OW 1
5750: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5751: LD_ADDR_EXP 17
5755: PUSH
5756: LD_EXP 17
5760: PPUSH
5761: LD_VAR 0 2
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: CALL_OW 1
5773: ST_TO_ADDR
// for j = 1 to multi_teams do
5774: LD_ADDR_VAR 0 3
5778: PUSH
5779: DOUBLE
5780: LD_INT 1
5782: DEC
5783: ST_TO_ADDR
5784: LD_EXP 20
5788: PUSH
5789: FOR_TO
5790: IFFALSE 5859
// begin if i in multi_teams [ j ] then
5792: LD_VAR 0 2
5796: PUSH
5797: LD_EXP 20
5801: PUSH
5802: LD_VAR 0 3
5806: ARRAY
5807: IN
5808: IFFALSE 5857
// begin tmp := multi_teams [ j ] diff i ;
5810: LD_ADDR_VAR 0 5
5814: PUSH
5815: LD_EXP 20
5819: PUSH
5820: LD_VAR 0 3
5824: ARRAY
5825: PUSH
5826: LD_VAR 0 2
5830: DIFF
5831: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5832: LD_ADDR_EXP 20
5836: PUSH
5837: LD_EXP 20
5841: PPUSH
5842: LD_VAR 0 3
5846: PPUSH
5847: LD_VAR 0 5
5851: PPUSH
5852: CALL_OW 1
5856: ST_TO_ADDR
// end ; end ;
5857: GO 5789
5859: POP
5860: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5861: LD_EXP 19
5865: PUSH
5866: LD_VAR 0 2
5870: ARRAY
5871: PUSH
5872: LD_EXP 19
5876: PUSH
5877: LD_VAR 0 2
5881: ARRAY
5882: PUSH
5883: LD_EXP 23
5887: IN
5888: NOT
5889: AND
5890: IFFALSE 5931
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5892: LD_ADDR_EXP 19
5896: PUSH
5897: LD_EXP 19
5901: PPUSH
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_EXP 23
5911: PUSH
5912: LD_INT 1
5914: PPUSH
5915: LD_EXP 23
5919: PPUSH
5920: CALL_OW 12
5924: ARRAY
5925: PPUSH
5926: CALL_OW 1
5930: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5931: LD_EXP 19
5935: PUSH
5936: LD_VAR 0 2
5940: ARRAY
5941: NOT
5942: PUSH
5943: LD_EXP 17
5947: PUSH
5948: LD_VAR 0 2
5952: ARRAY
5953: NOT
5954: AND
5955: PUSH
5956: LD_EXP 21
5960: PUSH
5961: LD_VAR 0 2
5965: ARRAY
5966: NOT
5967: AND
5968: IFFALSE 5993
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5970: LD_ADDR_EXP 24
5974: PUSH
5975: LD_EXP 24
5979: PPUSH
5980: LD_VAR 0 2
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 1
5992: ST_TO_ADDR
// if multi_sides [ i ] then
5993: LD_EXP 17
5997: PUSH
5998: LD_VAR 0 2
6002: ARRAY
6003: IFFALSE 6019
// multi_players_amount := multi_players_amount + 1 ;
6005: LD_ADDR_EXP 36
6009: PUSH
6010: LD_EXP 36
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ST_TO_ADDR
// end ;
6019: GO 5691
6021: POP
6022: POP
// for i in multi_teams do
6023: LD_ADDR_VAR 0 2
6027: PUSH
6028: LD_EXP 20
6032: PUSH
6033: FOR_IN
6034: IFFALSE 6142
// begin for j = 2 to i do
6036: LD_ADDR_VAR 0 3
6040: PUSH
6041: DOUBLE
6042: LD_INT 2
6044: DEC
6045: ST_TO_ADDR
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_TO
6052: IFFALSE 6138
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6054: LD_VAR 0 2
6058: PUSH
6059: LD_VAR 0 3
6063: ARRAY
6064: PPUSH
6065: LD_VAR 0 2
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: CALL_OW 343
// for x = 1 to j - 1 do
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: DOUBLE
6084: LD_INT 1
6086: DEC
6087: ST_TO_ADDR
6088: LD_VAR 0 3
6092: PUSH
6093: LD_INT 1
6095: MINUS
6096: PUSH
6097: FOR_TO
6098: IFFALSE 6134
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6100: LD_VAR 0 2
6104: PUSH
6105: LD_VAR 0 3
6109: ARRAY
6110: PPUSH
6111: LD_VAR 0 2
6115: PUSH
6116: LD_VAR 0 4
6120: ARRAY
6121: PPUSH
6122: LD_INT 1
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 80
6132: GO 6097
6134: POP
6135: POP
// end ;
6136: GO 6051
6138: POP
6139: POP
// end ;
6140: GO 6033
6142: POP
6143: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6144: LD_ADDR_OWVAR 67
6148: PUSH
6149: LD_INT 1
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_EXP 27
6167: PUSH
6168: LD_INT 1
6170: ARRAY
6171: ARRAY
6172: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
6173: LD_ADDR_EXP 29
6177: PUSH
6178: LD_INT 6
6180: PUSH
6181: LD_INT 7
6183: PUSH
6184: LD_INT 8
6186: PUSH
6187: LD_INT 9
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: LD_EXP 27
6200: PUSH
6201: LD_INT 2
6203: ARRAY
6204: ARRAY
6205: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6206: LD_ADDR_EXP 30
6210: PUSH
6211: LD_INT 1
6213: PUSH
6214: LD_INT 2
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 5
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_EXP 27
6233: PUSH
6234: LD_INT 3
6236: ARRAY
6237: ARRAY
6238: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6239: LD_ADDR_EXP 31
6243: PUSH
6244: LD_INT 3000
6246: PUSH
6247: LD_INT 1120
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 5000
6256: PUSH
6257: LD_INT 770
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 6000
6266: PUSH
6267: LD_INT 490
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 8000
6276: PUSH
6277: LD_INT 420
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: PUSH
6290: LD_EXP 27
6294: PUSH
6295: LD_INT 4
6297: ARRAY
6298: ARRAY
6299: ST_TO_ADDR
// mulit_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
6300: LD_ADDR_EXP 32
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: LD_INT 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_EXP 27
6323: PUSH
6324: LD_INT 5
6326: ARRAY
6327: ARRAY
6328: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6329: LD_ADDR_EXP 33
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: LD_INT 2
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: PUSH
6348: LD_EXP 27
6352: PUSH
6353: LD_INT 6
6355: ARRAY
6356: ARRAY
6357: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
6358: LD_ADDR_EXP 38
6362: PUSH
6363: LD_INT 10500
6365: PUSH
6366: LD_INT 31500
6368: PUSH
6369: LD_INT 52500
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: PUSH
6377: LD_OWVAR 67
6381: ARRAY
6382: ST_TO_ADDR
// end ;
6383: LD_VAR 0 1
6387: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
// if not multi_sides [ preferSide ] then
6392: LD_EXP 17
6396: PUSH
6397: LD_VAR 0 1
6401: ARRAY
6402: NOT
6403: IFFALSE 6417
// begin result := preferSide ;
6405: LD_ADDR_VAR 0 2
6409: PUSH
6410: LD_VAR 0 1
6414: ST_TO_ADDR
// exit ;
6415: GO 6464
// end ; for i := 1 to 8 do
6417: LD_ADDR_VAR 0 3
6421: PUSH
6422: DOUBLE
6423: LD_INT 1
6425: DEC
6426: ST_TO_ADDR
6427: LD_INT 8
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6462
// if not multi_sides [ i ] then
6433: LD_EXP 17
6437: PUSH
6438: LD_VAR 0 3
6442: ARRAY
6443: NOT
6444: IFFALSE 6460
// begin result := i ;
6446: LD_ADDR_VAR 0 2
6450: PUSH
6451: LD_VAR 0 3
6455: ST_TO_ADDR
// exit ;
6456: POP
6457: POP
6458: GO 6464
// end ;
6460: GO 6430
6462: POP
6463: POP
// end ;
6464: LD_VAR 0 2
6468: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
6469: LD_INT 0
6471: PPUSH
// uc_side := side ;
6472: LD_ADDR_OWVAR 20
6476: PUSH
6477: LD_VAR 0 1
6481: ST_TO_ADDR
// uc_nation := nation_russian ;
6482: LD_ADDR_OWVAR 21
6486: PUSH
6487: LD_INT 3
6489: ST_TO_ADDR
// hc_importance := 100 ;
6490: LD_ADDR_OWVAR 32
6494: PUSH
6495: LD_INT 100
6497: ST_TO_ADDR
// hc_class := class_soldier ;
6498: LD_ADDR_OWVAR 28
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// if num = 1 then
6506: LD_VAR 0 2
6510: PUSH
6511: LD_INT 1
6513: EQUAL
6514: IFFALSE 6596
// begin hc_gallery := ru ;
6516: LD_ADDR_OWVAR 33
6520: PUSH
6521: LD_STRING ru
6523: ST_TO_ADDR
// hc_face_number := 10 ;
6524: LD_ADDR_OWVAR 34
6528: PUSH
6529: LD_INT 10
6531: ST_TO_ADDR
// hc_name := Popov ;
6532: LD_ADDR_OWVAR 26
6536: PUSH
6537: LD_STRING Popov
6539: ST_TO_ADDR
// hc_sex := sex_male ;
6540: LD_ADDR_OWVAR 27
6544: PUSH
6545: LD_INT 1
6547: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 2 ] ;
6548: LD_ADDR_OWVAR 31
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 1
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
6571: LD_ADDR_OWVAR 29
6575: PUSH
6576: LD_INT 10
6578: PUSH
6579: LD_INT 10
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// result := CreateHuman ;
6586: LD_ADDR_VAR 0 3
6590: PUSH
6591: CALL_OW 44
6595: ST_TO_ADDR
// end ; if num = 2 then
6596: LD_VAR 0 2
6600: PUSH
6601: LD_INT 2
6603: EQUAL
6604: IFFALSE 6694
// begin hc_class := class_mechanic ;
6606: LD_ADDR_OWVAR 28
6610: PUSH
6611: LD_INT 3
6613: ST_TO_ADDR
// hc_gallery := ru ;
6614: LD_ADDR_OWVAR 33
6618: PUSH
6619: LD_STRING ru
6621: ST_TO_ADDR
// hc_face_number := 1 ;
6622: LD_ADDR_OWVAR 34
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// hc_name := Burlak ;
6630: LD_ADDR_OWVAR 26
6634: PUSH
6635: LD_STRING Burlak
6637: ST_TO_ADDR
// hc_sex := sex_male ;
6638: LD_ADDR_OWVAR 27
6642: PUSH
6643: LD_INT 1
6645: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 0 ] ;
6646: LD_ADDR_OWVAR 31
6650: PUSH
6651: LD_INT 1
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 0
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6669: LD_ADDR_OWVAR 29
6673: PUSH
6674: LD_INT 10
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: ST_TO_ADDR
// result := CreateHuman ;
6684: LD_ADDR_VAR 0 3
6688: PUSH
6689: CALL_OW 44
6693: ST_TO_ADDR
// end ; if num = 3 then
6694: LD_VAR 0 2
6698: PUSH
6699: LD_INT 3
6701: EQUAL
6702: IFFALSE 6784
// begin hc_gallery := ru ;
6704: LD_ADDR_OWVAR 33
6708: PUSH
6709: LD_STRING ru
6711: ST_TO_ADDR
// hc_face_number := 8 ;
6712: LD_ADDR_OWVAR 34
6716: PUSH
6717: LD_INT 8
6719: ST_TO_ADDR
// hc_name := Kurin ;
6720: LD_ADDR_OWVAR 26
6724: PUSH
6725: LD_STRING Kurin
6727: ST_TO_ADDR
// hc_sex := sex_male ;
6728: LD_ADDR_OWVAR 27
6732: PUSH
6733: LD_INT 1
6735: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 0 , 1 ] ;
6736: LD_ADDR_OWVAR 31
6740: PUSH
6741: LD_INT 4
6743: PUSH
6744: LD_INT 1
6746: PUSH
6747: LD_INT 0
6749: PUSH
6750: LD_INT 1
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
6759: LD_ADDR_OWVAR 29
6763: PUSH
6764: LD_INT 12
6766: PUSH
6767: LD_INT 11
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
// result := CreateHuman ;
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: CALL_OW 44
6783: ST_TO_ADDR
// end ; end ;
6784: LD_VAR 0 3
6788: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
6789: LD_INT 0
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
// for i := 1 to 8 do
6801: LD_ADDR_VAR 0 2
6805: PUSH
6806: DOUBLE
6807: LD_INT 1
6809: DEC
6810: ST_TO_ADDR
6811: LD_INT 8
6813: PUSH
6814: FOR_TO
6815: IFFALSE 7836
// begin if not multi_sides [ i ] then
6817: LD_EXP 17
6821: PUSH
6822: LD_VAR 0 2
6826: ARRAY
6827: NOT
6828: IFFALSE 6832
// continue ;
6830: GO 6814
// if multi_buildings [ multi_sides [ i ] ] then
6832: LD_EXP 39
6836: PUSH
6837: LD_EXP 17
6841: PUSH
6842: LD_VAR 0 2
6846: ARRAY
6847: ARRAY
6848: IFFALSE 7082
// begin uc_side := i ;
6850: LD_ADDR_OWVAR 20
6854: PUSH
6855: LD_VAR 0 2
6859: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6860: LD_ADDR_OWVAR 21
6864: PUSH
6865: LD_EXP 19
6869: PUSH
6870: LD_VAR 0 2
6874: ARRAY
6875: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6876: LD_ADDR_VAR 0 3
6880: PUSH
6881: LD_EXP 39
6885: PUSH
6886: LD_EXP 17
6890: PUSH
6891: LD_VAR 0 2
6895: ARRAY
6896: ARRAY
6897: PUSH
6898: FOR_IN
6899: IFFALSE 7080
// begin bc_type := j [ 1 ] ;
6901: LD_ADDR_OWVAR 42
6905: PUSH
6906: LD_VAR 0 3
6910: PUSH
6911: LD_INT 1
6913: ARRAY
6914: ST_TO_ADDR
// bc_level := 2 ;
6915: LD_ADDR_OWVAR 43
6919: PUSH
6920: LD_INT 2
6922: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6923: LD_ADDR_VAR 0 4
6927: PUSH
6928: LD_VAR 0 3
6932: PUSH
6933: LD_INT 2
6935: ARRAY
6936: PUSH
6937: LD_INT 1
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 3
6945: PUSH
6946: LD_INT 2
6948: ARRAY
6949: PUSH
6950: LD_INT 2
6952: ARRAY
6953: PPUSH
6954: LD_VAR 0 3
6958: PUSH
6959: LD_INT 2
6961: ARRAY
6962: PUSH
6963: LD_INT 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 47
6971: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PUSH
6981: LD_INT 0
6983: EQUAL
6984: IFFALSE 7078
// begin SetBName ( b , j [ 3 ] ) ;
6986: LD_VAR 0 4
6990: PPUSH
6991: LD_VAR 0 3
6995: PUSH
6996: LD_INT 3
6998: ARRAY
6999: PPUSH
7000: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7004: LD_VAR 0 4
7008: PPUSH
7009: CALL_OW 274
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_INT 120
7019: PUSH
7020: LD_INT 100
7022: PUSH
7023: LD_INT 80
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: PUSH
7031: LD_OWVAR 67
7035: ARRAY
7036: PPUSH
7037: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7041: LD_VAR 0 4
7045: PPUSH
7046: CALL_OW 274
7050: PPUSH
7051: LD_INT 2
7053: PPUSH
7054: LD_INT 90
7056: PUSH
7057: LD_INT 60
7059: PUSH
7060: LD_INT 30
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: LD_OWVAR 67
7072: ARRAY
7073: PPUSH
7074: CALL_OW 277
// end ; end ;
7078: GO 6898
7080: POP
7081: POP
// end ; if multi_custom_commanders then
7082: LD_EXP 26
7086: IFFALSE 7178
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7088: LD_ADDR_VAR 0 6
7092: PUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: LD_EXP 17
7102: PUSH
7103: LD_VAR 0 2
7107: ARRAY
7108: PPUSH
7109: CALL 6469 0 2
7113: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7114: LD_ADDR_EXP 34
7118: PUSH
7119: LD_EXP 34
7123: PPUSH
7124: LD_EXP 34
7128: PUSH
7129: LD_INT 1
7131: PLUS
7132: PPUSH
7133: LD_VAR 0 6
7137: PPUSH
7138: CALL_OW 2
7142: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7143: LD_VAR 0 6
7147: PPUSH
7148: LD_EXP 22
7152: PUSH
7153: LD_EXP 17
7157: PUSH
7158: LD_VAR 0 2
7162: ARRAY
7163: ARRAY
7164: PUSH
7165: LD_INT 1
7167: ARRAY
7168: PPUSH
7169: LD_INT 0
7171: PPUSH
7172: CALL_OW 49
// end else
7176: GO 7389
// begin uc_side := i ;
7178: LD_ADDR_OWVAR 20
7182: PUSH
7183: LD_VAR 0 2
7187: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7188: LD_ADDR_OWVAR 21
7192: PUSH
7193: LD_EXP 19
7197: PUSH
7198: LD_VAR 0 2
7202: ARRAY
7203: ST_TO_ADDR
// hc_importance := 100 ;
7204: LD_ADDR_OWVAR 32
7208: PUSH
7209: LD_INT 100
7211: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
7212: LD_INT 0
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_EXP 30
7222: PPUSH
7223: CALL_OW 380
// if multiplayer then
7227: LD_OWVAR 4
7231: IFFALSE 7289
// begin hc_name := mp_sides_players_names [ i ] ;
7233: LD_ADDR_OWVAR 26
7237: PUSH
7238: LD_OWVAR 19
7242: PUSH
7243: LD_VAR 0 2
7247: ARRAY
7248: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
7249: LD_ADDR_OWVAR 33
7253: PUSH
7254: LD_STRING MULTIAVATARS
7256: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
7257: LD_ADDR_OWVAR 34
7261: PUSH
7262: LD_VAR 0 2
7266: PPUSH
7267: CALL_OW 525
7271: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
7272: LD_ADDR_OWVAR 27
7276: PUSH
7277: LD_VAR 0 2
7281: PPUSH
7282: CALL_OW 526
7286: ST_TO_ADDR
// end else
7287: GO 7321
// begin hc_gallery :=  ;
7289: LD_ADDR_OWVAR 33
7293: PUSH
7294: LD_STRING 
7296: ST_TO_ADDR
// hc_name :=  ;
7297: LD_ADDR_OWVAR 26
7301: PUSH
7302: LD_STRING 
7304: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
7305: LD_ADDR_OWVAR 27
7309: PUSH
7310: LD_INT 1
7312: PPUSH
7313: LD_INT 2
7315: PPUSH
7316: CALL_OW 12
7320: ST_TO_ADDR
// end ; un := CreateHuman ;
7321: LD_ADDR_VAR 0 6
7325: PUSH
7326: CALL_OW 44
7330: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7331: LD_VAR 0 6
7335: PPUSH
7336: LD_EXP 22
7340: PUSH
7341: LD_EXP 17
7345: PUSH
7346: LD_VAR 0 2
7350: ARRAY
7351: ARRAY
7352: PUSH
7353: LD_INT 1
7355: ARRAY
7356: PPUSH
7357: LD_INT 0
7359: PPUSH
7360: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
7364: LD_ADDR_EXP 34
7368: PUSH
7369: LD_EXP 34
7373: PPUSH
7374: LD_VAR 0 2
7378: PPUSH
7379: LD_VAR 0 6
7383: PPUSH
7384: CALL_OW 1
7388: ST_TO_ADDR
// end ; InitHc ;
7389: CALL_OW 19
// InitUc ;
7393: CALL_OW 18
// uc_side := i ;
7397: LD_ADDR_OWVAR 20
7401: PUSH
7402: LD_VAR 0 2
7406: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7407: LD_ADDR_OWVAR 21
7411: PUSH
7412: LD_EXP 19
7416: PUSH
7417: LD_VAR 0 2
7421: ARRAY
7422: ST_TO_ADDR
// hc_gallery :=  ;
7423: LD_ADDR_OWVAR 33
7427: PUSH
7428: LD_STRING 
7430: ST_TO_ADDR
// hc_name :=  ;
7431: LD_ADDR_OWVAR 26
7435: PUSH
7436: LD_STRING 
7438: ST_TO_ADDR
// hc_importance := 0 ;
7439: LD_ADDR_OWVAR 32
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// cl := 1 ;
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_INT 1
7454: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
7455: LD_ADDR_VAR 0 3
7459: PUSH
7460: DOUBLE
7461: LD_INT 2
7463: DEC
7464: ST_TO_ADDR
7465: LD_EXP 29
7469: PUSH
7470: FOR_TO
7471: IFFALSE 7832
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
7473: LD_VAR 0 3
7477: PUSH
7478: LD_INT 1
7480: MINUS
7481: PUSH
7482: LD_EXP 29
7486: PUSH
7487: LD_INT 1
7489: MINUS
7490: PUSH
7491: LD_INT 4
7493: DIVREAL
7494: MOD
7495: PUSH
7496: LD_INT 0
7498: EQUAL
7499: IFFALSE 7515
// cl := cl + 1 ;
7501: LD_ADDR_VAR 0 5
7505: PUSH
7506: LD_VAR 0 5
7510: PUSH
7511: LD_INT 1
7513: PLUS
7514: ST_TO_ADDR
// if cl > 4 then
7515: LD_VAR 0 5
7519: PUSH
7520: LD_INT 4
7522: GREATER
7523: IFFALSE 7533
// cl := 1 ;
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
7533: LD_INT 0
7535: PPUSH
7536: LD_VAR 0 5
7540: PPUSH
7541: LD_EXP 30
7545: PPUSH
7546: CALL_OW 380
// un := CreateHuman ;
7550: LD_ADDR_VAR 0 6
7554: PUSH
7555: CALL_OW 44
7559: ST_TO_ADDR
// if j > copy then
7560: LD_VAR 0 3
7564: PUSH
7565: LD_VAR 0 9
7569: GREATER
7570: IFFALSE 7599
// copy := Replace ( copy , j , un ) else
7572: LD_ADDR_VAR 0 9
7576: PUSH
7577: LD_VAR 0 9
7581: PPUSH
7582: LD_VAR 0 3
7586: PPUSH
7587: LD_VAR 0 6
7591: PPUSH
7592: CALL_OW 1
7596: ST_TO_ADDR
7597: GO 7681
// begin CopySkills ( copy [ j ] , un ) ;
7599: LD_VAR 0 9
7603: PUSH
7604: LD_VAR 0 3
7608: ARRAY
7609: PPUSH
7610: LD_VAR 0 6
7614: PPUSH
7615: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
7619: LD_VAR 0 6
7623: PPUSH
7624: LD_INT 2
7626: PPUSH
7627: LD_VAR 0 9
7631: PUSH
7632: LD_VAR 0 3
7636: ARRAY
7637: PPUSH
7638: LD_INT 2
7640: PPUSH
7641: CALL_OW 260
7645: PPUSH
7646: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
7650: LD_VAR 0 6
7654: PPUSH
7655: LD_INT 1
7657: PPUSH
7658: LD_VAR 0 9
7662: PUSH
7663: LD_VAR 0 3
7667: ARRAY
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: CALL_OW 260
7676: PPUSH
7677: CALL_OW 239
// end ; if multi_pos_area then
7681: LD_EXP 22
7685: IFFALSE 7830
// begin if GetClass ( un ) = 3 then
7687: LD_VAR 0 6
7691: PPUSH
7692: CALL_OW 257
7696: PUSH
7697: LD_INT 3
7699: EQUAL
7700: IFFALSE 7797
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
7702: LD_INT 21
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: LD_INT 1
7710: PPUSH
7711: LD_INT 43
7713: PUSH
7714: LD_INT 42
7716: PUSH
7717: LD_INT 42
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_OWVAR 67
7729: ARRAY
7730: PPUSH
7731: LD_INT 80
7733: PPUSH
7734: CALL 18543 0 5
// veh := CreateVehicle ;
7738: LD_ADDR_VAR 0 7
7742: PUSH
7743: CALL_OW 45
7747: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7748: LD_VAR 0 7
7752: PPUSH
7753: LD_EXP 22
7757: PUSH
7758: LD_EXP 17
7762: PUSH
7763: LD_VAR 0 2
7767: ARRAY
7768: ARRAY
7769: PUSH
7770: LD_INT 2
7772: ARRAY
7773: PPUSH
7774: LD_INT 0
7776: PPUSH
7777: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7781: LD_VAR 0 6
7785: PPUSH
7786: LD_VAR 0 7
7790: PPUSH
7791: CALL_OW 52
// continue ;
7795: GO 7470
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7797: LD_VAR 0 6
7801: PPUSH
7802: LD_EXP 22
7806: PUSH
7807: LD_EXP 17
7811: PUSH
7812: LD_VAR 0 2
7816: ARRAY
7817: ARRAY
7818: PUSH
7819: LD_INT 1
7821: ARRAY
7822: PPUSH
7823: LD_INT 0
7825: PPUSH
7826: CALL_OW 49
// end ; end ;
7830: GO 7470
7832: POP
7833: POP
// end ;
7834: GO 6814
7836: POP
7837: POP
// end ;
7838: LD_VAR 0 1
7842: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
7843: LD_INT 0
7845: PPUSH
7846: PPUSH
7847: PPUSH
7848: PPUSH
7849: PPUSH
// if not multi_support then
7850: LD_EXP 33
7854: NOT
7855: IFFALSE 7859
// exit ;
7857: GO 8146
// result := [ ] ;
7859: LD_ADDR_VAR 0 1
7863: PUSH
7864: EMPTY
7865: ST_TO_ADDR
// for i := 1 to 8 do
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: DOUBLE
7872: LD_INT 1
7874: DEC
7875: ST_TO_ADDR
7876: LD_INT 8
7878: PUSH
7879: FOR_TO
7880: IFFALSE 8144
// begin result := Replace ( result , i , [ ] ) ;
7882: LD_ADDR_VAR 0 1
7886: PUSH
7887: LD_VAR 0 1
7891: PPUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: EMPTY
7898: PPUSH
7899: CALL_OW 1
7903: ST_TO_ADDR
// if multi_sides [ i ] then
7904: LD_EXP 17
7908: PUSH
7909: LD_VAR 0 2
7913: ARRAY
7914: IFFALSE 8142
// begin tmp := [ ] ;
7916: LD_ADDR_VAR 0 5
7920: PUSH
7921: EMPTY
7922: ST_TO_ADDR
// if multi_support = 1 then
7923: LD_EXP 33
7927: PUSH
7928: LD_INT 1
7930: EQUAL
7931: IFFALSE 8020
// begin uc_side := i ;
7933: LD_ADDR_OWVAR 20
7937: PUSH
7938: LD_VAR 0 2
7942: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7943: LD_ADDR_OWVAR 21
7947: PUSH
7948: LD_EXP 19
7952: PUSH
7953: LD_VAR 0 2
7957: ARRAY
7958: ST_TO_ADDR
// for j := 1 to 2 do
7959: LD_ADDR_VAR 0 3
7963: PUSH
7964: DOUBLE
7965: LD_INT 1
7967: DEC
7968: ST_TO_ADDR
7969: LD_INT 2
7971: PUSH
7972: FOR_TO
7973: IFFALSE 8018
// begin InitHC_All ( ) ;
7975: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
7979: LD_INT 0
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: LD_INT 4
7987: PPUSH
7988: CALL_OW 12
7992: PPUSH
7993: LD_INT 1
7995: PPUSH
7996: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8000: LD_ADDR_VAR 0 5
8004: PUSH
8005: LD_VAR 0 5
8009: PUSH
8010: CALL_OW 44
8014: ADD
8015: ST_TO_ADDR
// end ;
8016: GO 7972
8018: POP
8019: POP
// end ; if multi_support = 2 then
8020: LD_EXP 33
8024: PUSH
8025: LD_INT 2
8027: EQUAL
8028: IFFALSE 8117
// begin uc_side := i ;
8030: LD_ADDR_OWVAR 20
8034: PUSH
8035: LD_VAR 0 2
8039: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8040: LD_ADDR_OWVAR 21
8044: PUSH
8045: LD_EXP 19
8049: PUSH
8050: LD_VAR 0 2
8054: ARRAY
8055: ST_TO_ADDR
// for j := 1 to 4 do
8056: LD_ADDR_VAR 0 3
8060: PUSH
8061: DOUBLE
8062: LD_INT 1
8064: DEC
8065: ST_TO_ADDR
8066: LD_INT 4
8068: PUSH
8069: FOR_TO
8070: IFFALSE 8115
// begin InitHC_All ( ) ;
8072: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8076: LD_INT 0
8078: PPUSH
8079: LD_INT 1
8081: PPUSH
8082: LD_INT 4
8084: PPUSH
8085: CALL_OW 12
8089: PPUSH
8090: LD_INT 2
8092: PPUSH
8093: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8097: LD_ADDR_VAR 0 5
8101: PUSH
8102: LD_VAR 0 5
8106: PUSH
8107: CALL_OW 44
8111: ADD
8112: ST_TO_ADDR
// end ;
8113: GO 8069
8115: POP
8116: POP
// end ; result := Replace ( result , i , tmp ) ;
8117: LD_ADDR_VAR 0 1
8121: PUSH
8122: LD_VAR 0 1
8126: PPUSH
8127: LD_VAR 0 2
8131: PPUSH
8132: LD_VAR 0 5
8136: PPUSH
8137: CALL_OW 1
8141: ST_TO_ADDR
// end ; end ;
8142: GO 7879
8144: POP
8145: POP
// end ;
8146: LD_VAR 0 1
8150: RET
// export function Multiplayer_Start ( ) ; begin
8151: LD_INT 0
8153: PPUSH
// Multiplayer_PreparePlayers ( ) ;
8154: CALL 6789 0 0
// Multiplayer_InitPointSystem ( ) ;
8158: CALL 8888 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
8162: LD_INT 20
8164: PPUSH
8165: CALL 9064 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
8169: LD_INT 150
8171: PPUSH
8172: CALL 9064 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
8176: LD_INT 5
8178: PPUSH
8179: CALL 9064 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
8183: LD_INT 40
8185: NEG
8186: PPUSH
8187: CALL 9064 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
8191: LD_INT 200
8193: PPUSH
8194: CALL 9064 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
8198: LD_INT 2
8200: PPUSH
8201: CALL 9064 0 1
// if multi_support then
8205: LD_EXP 33
8209: IFFALSE 8221
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
8211: LD_ADDR_EXP 37
8215: PUSH
8216: CALL 7843 0 0
8220: ST_TO_ADDR
// if multi_sides [ your_side ] then
8221: LD_EXP 17
8225: PUSH
8226: LD_OWVAR 2
8230: ARRAY
8231: IFFALSE 8258
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
8233: LD_INT 22
8235: PUSH
8236: LD_OWVAR 2
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PPUSH
8245: CALL_OW 69
8249: PUSH
8250: LD_INT 1
8252: ARRAY
8253: PPUSH
8254: CALL_OW 87
// end ;
8258: LD_VAR 0 1
8262: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
8263: LD_INT 0
8265: PPUSH
8266: PPUSH
8267: PPUSH
// repeat wait ( 0 0$1 ) ;
8268: LD_INT 35
8270: PPUSH
8271: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
8275: LD_OWVAR 1
8279: PUSH
8280: LD_EXP 38
8284: GREATER
8285: PUSH
8286: LD_EXP 33
8290: AND
8291: IFFALSE 8456
// begin if tick mod 1 1$00 = 0 then
8293: LD_OWVAR 1
8297: PUSH
8298: LD_INT 2100
8300: MOD
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: IFFALSE 8456
// begin for i := 1 to 8 do
8307: LD_ADDR_VAR 0 2
8311: PUSH
8312: DOUBLE
8313: LD_INT 1
8315: DEC
8316: ST_TO_ADDR
8317: LD_INT 8
8319: PUSH
8320: FOR_TO
8321: IFFALSE 8454
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
8323: LD_EXP 17
8327: PUSH
8328: LD_VAR 0 2
8332: ARRAY
8333: PUSH
8334: LD_EXP 35
8338: PUSH
8339: LD_VAR 0 2
8343: ARRAY
8344: NOT
8345: AND
8346: PUSH
8347: LD_EXP 37
8351: PUSH
8352: LD_VAR 0 2
8356: ARRAY
8357: AND
8358: PUSH
8359: LD_INT 80
8361: PUSH
8362: LD_INT 60
8364: PUSH
8365: LD_INT 40
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: PUSH
8373: LD_OWVAR 67
8377: ARRAY
8378: PPUSH
8379: CALL_OW 13
8383: AND
8384: IFFALSE 8452
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
8386: LD_EXP 37
8390: PUSH
8391: LD_VAR 0 2
8395: ARRAY
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: LD_INT 11
8403: PPUSH
8404: LD_INT 1
8406: PPUSH
8407: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
8411: LD_ADDR_EXP 37
8415: PUSH
8416: LD_EXP 37
8420: PPUSH
8421: LD_VAR 0 2
8425: PPUSH
8426: LD_EXP 37
8430: PUSH
8431: LD_VAR 0 2
8435: ARRAY
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: CALL_OW 3
8444: PPUSH
8445: CALL_OW 1
8449: ST_TO_ADDR
// break ;
8450: GO 8454
// end ; end ;
8452: GO 8320
8454: POP
8455: POP
// end ; end ; if not multi_custom_commanders then
8456: LD_EXP 26
8460: NOT
8461: IFFALSE 8574
// begin for i := 1 to 8 do
8463: LD_ADDR_VAR 0 2
8467: PUSH
8468: DOUBLE
8469: LD_INT 1
8471: DEC
8472: ST_TO_ADDR
8473: LD_INT 8
8475: PUSH
8476: FOR_TO
8477: IFFALSE 8548
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
8479: LD_INT 22
8481: PUSH
8482: LD_VAR 0 2
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PPUSH
8491: CALL_OW 69
8495: PUSH
8496: LD_INT 0
8498: EQUAL
8499: PUSH
8500: LD_EXP 35
8504: PUSH
8505: LD_VAR 0 2
8509: ARRAY
8510: NOT
8511: AND
8512: IFFALSE 8546
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
8514: LD_ADDR_EXP 35
8518: PUSH
8519: LD_EXP 35
8523: PPUSH
8524: LD_VAR 0 2
8528: PPUSH
8529: LD_INT 1
8531: PPUSH
8532: CALL_OW 1
8536: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
8537: LD_VAR 0 2
8541: PPUSH
8542: CALL 9134 0 1
// end ; end ;
8546: GO 8476
8548: POP
8549: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
8550: LD_EXP 35
8554: PPUSH
8555: CALL 15805 0 1
8559: PUSH
8560: LD_EXP 17
8564: PPUSH
8565: CALL 15805 0 1
8569: EQUAL
8570: IFFALSE 8574
// break ;
8572: GO 8594
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
8574: CALL 8708 0 0
8578: NOT
8579: PUSH
8580: LD_EXP 2
8584: AND
8585: PUSH
8586: LD_EXP 34
8590: NOT
8591: OR
8592: IFFALSE 8268
// game := false ;
8594: LD_ADDR_EXP 2
8598: PUSH
8599: LD_INT 0
8601: ST_TO_ADDR
// for i := 1 to 8 do
8602: LD_ADDR_VAR 0 2
8606: PUSH
8607: DOUBLE
8608: LD_INT 1
8610: DEC
8611: ST_TO_ADDR
8612: LD_INT 8
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8652
// begin if multi_sides [ i ] then
8618: LD_EXP 17
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: IFFALSE 8650
// SetMultiScore ( i , multi_points [ i ] ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: LD_EXP 40
8639: PUSH
8640: LD_VAR 0 2
8644: ARRAY
8645: PPUSH
8646: CALL_OW 506
// end ;
8650: GO 8615
8652: POP
8653: POP
// if multi_loosers [ your_side ] then
8654: LD_EXP 35
8658: PUSH
8659: LD_OWVAR 2
8663: ARRAY
8664: IFFALSE 8687
// begin if Multiplayer then
8666: LD_OWVAR 4
8670: IFFALSE 8678
// YouLostInMultiplayer else
8672: CALL_OW 107
8676: GO 8685
// YouLost (  ) ;
8678: LD_STRING 
8680: PPUSH
8681: CALL_OW 104
// end else
8685: GO 8703
// begin if Multiplayer then
8687: LD_OWVAR 4
8691: IFFALSE 8699
// YouWinInMultiplayer else
8693: CALL_OW 106
8697: GO 8703
// YouWin ;
8699: CALL_OW 103
// end ; end ;
8703: LD_VAR 0 1
8707: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
8708: LD_INT 0
8710: PPUSH
8711: PPUSH
// result := false ;
8712: LD_ADDR_VAR 0 1
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// for side in botSides do
8720: LD_ADDR_VAR 0 2
8724: PUSH
8725: LD_EXP 3
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8792
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
8733: LD_ADDR_VAR 0 1
8737: PUSH
8738: LD_INT 22
8740: PUSH
8741: LD_VAR 0 2
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 21
8752: PUSH
8753: LD_INT 1
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: LD_INT 50
8762: PUSH
8763: EMPTY
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: PUSH
8776: LD_INT 0
8778: GREATER
8779: ST_TO_ADDR
// if result then
8780: LD_VAR 0 1
8784: IFFALSE 8790
// exit ;
8786: POP
8787: POP
8788: GO 8794
// end ;
8790: GO 8730
8792: POP
8793: POP
// end ;
8794: LD_VAR 0 1
8798: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
8799: LD_INT 0
8801: PPUSH
8802: PPUSH
// result := [ ] ;
8803: LD_ADDR_VAR 0 1
8807: PUSH
8808: EMPTY
8809: ST_TO_ADDR
// for i := 1 to 8 do
8810: LD_ADDR_VAR 0 2
8814: PUSH
8815: DOUBLE
8816: LD_INT 1
8818: DEC
8819: ST_TO_ADDR
8820: LD_INT 8
8822: PUSH
8823: FOR_TO
8824: IFFALSE 8881
// begin if multi_sides [ i ] then
8826: LD_EXP 17
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: IFFALSE 8879
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8838: LD_ADDR_VAR 0 1
8842: PUSH
8843: LD_VAR 0 1
8847: PUSH
8848: LD_STRING #coop-points
8850: PUSH
8851: LD_VAR 0 2
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: LD_EXP 40
8865: PUSH
8866: LD_VAR 0 2
8870: ARRAY
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: ADD
8878: ST_TO_ADDR
// end ; end ;
8879: GO 8823
8881: POP
8882: POP
// end ;
8883: LD_VAR 0 1
8887: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8888: LD_INT 0
8890: PPUSH
8891: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8892: LD_ADDR_EXP 40
8896: PUSH
8897: LD_INT 0
8899: PUSH
8900: LD_INT 0
8902: PUSH
8903: LD_INT 0
8905: PUSH
8906: LD_INT 0
8908: PUSH
8909: LD_INT 0
8911: PUSH
8912: LD_INT 0
8914: PUSH
8915: LD_INT 0
8917: PUSH
8918: LD_INT 0
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8931: LD_ADDR_EXP 41
8935: PUSH
8936: EMPTY
8937: ST_TO_ADDR
// end ;
8938: LD_VAR 0 1
8942: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8943: LD_INT 0
8945: PPUSH
// if not multi_points or not side or side > 8 then
8946: LD_EXP 40
8950: NOT
8951: PUSH
8952: LD_VAR 0 1
8956: NOT
8957: OR
8958: PUSH
8959: LD_VAR 0 1
8963: PUSH
8964: LD_INT 8
8966: GREATER
8967: OR
8968: IFFALSE 8972
// exit ;
8970: GO 9009
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8972: LD_ADDR_EXP 40
8976: PUSH
8977: LD_EXP 40
8981: PPUSH
8982: LD_VAR 0 1
8986: PPUSH
8987: LD_EXP 40
8991: PUSH
8992: LD_VAR 0 1
8996: ARRAY
8997: PUSH
8998: LD_VAR 0 2
9002: PLUS
9003: PPUSH
9004: CALL_OW 1
9008: ST_TO_ADDR
// end ;
9009: LD_VAR 0 3
9013: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9014: LD_INT 0
9016: PPUSH
// if not multi_points or not side or side > 8 then
9017: LD_EXP 40
9021: NOT
9022: PUSH
9023: LD_VAR 0 1
9027: NOT
9028: OR
9029: PUSH
9030: LD_VAR 0 1
9034: PUSH
9035: LD_INT 8
9037: GREATER
9038: OR
9039: IFFALSE 9043
// exit ;
9041: GO 9059
// result := multi_points [ side ] ;
9043: LD_ADDR_VAR 0 2
9047: PUSH
9048: LD_EXP 40
9052: PUSH
9053: LD_VAR 0 1
9057: ARRAY
9058: ST_TO_ADDR
// end ;
9059: LD_VAR 0 2
9063: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9064: LD_INT 0
9066: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9067: LD_ADDR_EXP 41
9071: PUSH
9072: LD_EXP 41
9076: PPUSH
9077: LD_EXP 41
9081: PUSH
9082: LD_INT 1
9084: PLUS
9085: PPUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 1
9095: ST_TO_ADDR
// end ;
9096: LD_VAR 0 2
9100: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9101: LD_INT 0
9103: PPUSH
// if not id then
9104: LD_VAR 0 1
9108: NOT
9109: IFFALSE 9113
// exit ;
9111: GO 9129
// result := multi_points_conditions [ id ] ;
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_EXP 41
9122: PUSH
9123: LD_VAR 0 1
9127: ARRAY
9128: ST_TO_ADDR
// end ;
9129: LD_VAR 0 2
9133: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9134: LD_INT 0
9136: PPUSH
9137: PPUSH
9138: PPUSH
9139: PPUSH
9140: PPUSH
// players := [ ] ;
9141: LD_ADDR_VAR 0 3
9145: PUSH
9146: EMPTY
9147: ST_TO_ADDR
// for i = 1 to 8 do
9148: LD_ADDR_VAR 0 4
9152: PUSH
9153: DOUBLE
9154: LD_INT 1
9156: DEC
9157: ST_TO_ADDR
9158: LD_INT 8
9160: PUSH
9161: FOR_TO
9162: IFFALSE 9221
// begin if i = side then
9164: LD_VAR 0 4
9168: PUSH
9169: LD_VAR 0 1
9173: EQUAL
9174: IFFALSE 9178
// continue ;
9176: GO 9161
// if multi_sides [ i ] and not multi_loosers [ i ] then
9178: LD_EXP 17
9182: PUSH
9183: LD_VAR 0 4
9187: ARRAY
9188: PUSH
9189: LD_EXP 35
9193: PUSH
9194: LD_VAR 0 4
9198: ARRAY
9199: NOT
9200: AND
9201: IFFALSE 9219
// players := players ^ i ;
9203: LD_ADDR_VAR 0 3
9207: PUSH
9208: LD_VAR 0 3
9212: PUSH
9213: LD_VAR 0 4
9217: ADD
9218: ST_TO_ADDR
// end ;
9219: GO 9161
9221: POP
9222: POP
// if not players then
9223: LD_VAR 0 3
9227: NOT
9228: IFFALSE 9232
// exit ;
9230: GO 9499
// if players = 1 then
9232: LD_VAR 0 3
9236: PUSH
9237: LD_INT 1
9239: EQUAL
9240: IFFALSE 9301
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
9242: LD_ADDR_VAR 0 4
9246: PUSH
9247: LD_INT 22
9249: PUSH
9250: LD_VAR 0 1
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 51
9261: PUSH
9262: EMPTY
9263: LIST
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PPUSH
9269: CALL_OW 69
9273: PUSH
9274: FOR_IN
9275: IFFALSE 9297
// SetSide ( i , players [ 1 ] ) ;
9277: LD_VAR 0 4
9281: PPUSH
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 1
9289: ARRAY
9290: PPUSH
9291: CALL_OW 235
9295: GO 9274
9297: POP
9298: POP
// end else
9299: GO 9499
// begin j := 1 ;
9301: LD_ADDR_VAR 0 5
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
9309: LD_ADDR_VAR 0 4
9313: PUSH
9314: LD_INT 22
9316: PUSH
9317: LD_VAR 0 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: LD_INT 21
9331: PUSH
9332: LD_INT 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 51
9341: PUSH
9342: EMPTY
9343: LIST
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 21
9351: PUSH
9352: LD_INT 2
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 69
9372: PUSH
9373: FOR_IN
9374: IFFALSE 9497
// begin SetSide ( i , players [ j ] ) ;
9376: LD_VAR 0 4
9380: PPUSH
9381: LD_VAR 0 3
9385: PUSH
9386: LD_VAR 0 5
9390: ARRAY
9391: PPUSH
9392: CALL_OW 235
// if IsDrivenBy ( i ) then
9396: LD_VAR 0 4
9400: PPUSH
9401: CALL_OW 311
9405: IFFALSE 9432
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
9407: LD_VAR 0 4
9411: PPUSH
9412: CALL_OW 311
9416: PPUSH
9417: LD_VAR 0 3
9421: PUSH
9422: LD_VAR 0 5
9426: ARRAY
9427: PPUSH
9428: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
9432: LD_VAR 0 4
9436: PPUSH
9437: CALL_OW 310
9441: PPUSH
9442: CALL_OW 247
9446: PUSH
9447: LD_INT 3
9449: EQUAL
9450: IFFALSE 9461
// ComExitBuilding ( i ) ;
9452: LD_VAR 0 4
9456: PPUSH
9457: CALL_OW 122
// j := j + 1 ;
9461: LD_ADDR_VAR 0 5
9465: PUSH
9466: LD_VAR 0 5
9470: PUSH
9471: LD_INT 1
9473: PLUS
9474: ST_TO_ADDR
// if j > players then
9475: LD_VAR 0 5
9479: PUSH
9480: LD_VAR 0 3
9484: GREATER
9485: IFFALSE 9495
// j := 1 ;
9487: LD_ADDR_VAR 0 5
9491: PUSH
9492: LD_INT 1
9494: ST_TO_ADDR
// end ;
9495: GO 9373
9497: POP
9498: POP
// end ; end ;
9499: LD_VAR 0 2
9503: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
// i := 3 ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: LD_INT 3
9516: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
9517: LD_ADDR_VAR 0 3
9521: PUSH
9522: LD_INT 5
9524: PUSH
9525: LD_INT 10
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 120
9534: PUSH
9535: LD_INT 2
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 101
9544: PUSH
9545: LD_INT 8
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 27
9554: PUSH
9555: LD_INT 4
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
9568: LD_INT 4
9570: PPUSH
9571: LD_INT 5
9573: PPUSH
9574: LD_VAR 0 3
9578: PUSH
9579: LD_VAR 0 2
9583: ARRAY
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PPUSH
9589: LD_VAR 0 3
9593: PUSH
9594: LD_VAR 0 2
9598: ARRAY
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: LD_INT 0
9606: PPUSH
9607: CALL_OW 58
// end ;
9611: LD_VAR 0 1
9615: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
9616: LD_INT 0
9618: PPUSH
// if not side or side > 8 then
9619: LD_VAR 0 1
9623: NOT
9624: PUSH
9625: LD_VAR 0 1
9629: PUSH
9630: LD_INT 8
9632: GREATER
9633: OR
9634: IFFALSE 9638
// exit ;
9636: GO 9655
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
9638: LD_VAR 0 1
9642: PPUSH
9643: LD_INT 6
9645: PPUSH
9646: CALL 9101 0 1
9650: PPUSH
9651: CALL 8943 0 2
// end ;
9655: LD_VAR 0 2
9659: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
9660: LD_INT 0
9662: PPUSH
// if not side or side > 8 then
9663: LD_VAR 0 1
9667: NOT
9668: PUSH
9669: LD_VAR 0 1
9673: PUSH
9674: LD_INT 8
9676: GREATER
9677: OR
9678: IFFALSE 9682
// exit ;
9680: GO 9699
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: LD_INT 4
9689: PPUSH
9690: CALL 9101 0 1
9694: PPUSH
9695: CALL 8943 0 2
// end ;
9699: LD_VAR 0 2
9703: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
9704: LD_INT 0
9706: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
9707: LD_VAR 0 1
9711: NOT
9712: PUSH
9713: LD_VAR 0 1
9717: PUSH
9718: LD_INT 8
9720: GREATER
9721: OR
9722: PUSH
9723: LD_VAR 0 2
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 6
9733: PUSH
9734: LD_INT 36
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: IN
9746: NOT
9747: OR
9748: IFFALSE 9752
// exit ;
9750: GO 9769
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_INT 3
9759: PPUSH
9760: CALL 9101 0 1
9764: PPUSH
9765: CALL 8943 0 2
// end ;
9769: LD_VAR 0 3
9773: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
9774: LD_INT 0
9776: PPUSH
9777: PPUSH
// if not un then
9778: LD_VAR 0 1
9782: NOT
9783: IFFALSE 9787
// exit ;
9785: GO 9833
// if not points then
9787: LD_VAR 0 3
9791: NOT
9792: IFFALSE 9809
// gained_points := Multiplayer_GetCondition ( 1 ) else
9794: LD_ADDR_VAR 0 5
9798: PUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL 9101 0 1
9806: ST_TO_ADDR
9807: GO 9819
// gained_points := points ;
9809: LD_ADDR_VAR 0 5
9813: PUSH
9814: LD_VAR 0 3
9818: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
9819: LD_VAR 0 2
9823: PPUSH
9824: LD_VAR 0 5
9828: PPUSH
9829: CALL 8943 0 2
9833: LD_VAR 0 4
9837: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
9838: LD_INT 0
9840: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
9841: LD_VAR 0 1
9845: PPUSH
9846: LD_INT 2
9848: PPUSH
9849: CALL 9101 0 1
9853: PPUSH
9854: CALL 8943 0 2
// end ; end_of_file
9858: LD_VAR 0 2
9862: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
9863: LD_VAR 0 1
9867: PPUSH
9868: CALL_OW 255
9872: PUSH
9873: LD_EXP 3
9877: IN
9878: NOT
9879: IFFALSE 9883
// exit ;
9881: GO 9900
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9883: LD_VAR 0 1
9887: PPUSH
9888: LD_VAR 0 2
9892: PPUSH
9893: LD_INT 0
9895: PPUSH
9896: CALL 9774 0 3
// end ;
9900: PPOPN 3
9902: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9903: LD_INT 0
9905: PPUSH
9906: PPUSH
9907: PPUSH
9908: PPUSH
9909: PPUSH
9910: PPUSH
9911: PPUSH
9912: PPUSH
9913: PPUSH
9914: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL 72293 0 1
// side := GetSide ( un ) ;
9924: LD_ADDR_VAR 0 3
9928: PUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 255
9938: ST_TO_ADDR
// if multi_sides [ side ] then
9939: LD_EXP 17
9943: PUSH
9944: LD_VAR 0 3
9948: ARRAY
9949: IFFALSE 9975
// if GetType ( un ) = unit_human then
9951: LD_VAR 0 1
9955: PPUSH
9956: CALL_OW 247
9960: PUSH
9961: LD_INT 1
9963: EQUAL
9964: IFFALSE 9975
// MultiplayerEvent_HumanLost ( side ) ;
9966: LD_VAR 0 3
9970: PPUSH
9971: CALL 9660 0 1
// if side in botSides then
9975: LD_VAR 0 3
9979: PUSH
9980: LD_EXP 3
9984: IN
9985: IFFALSE 10501
// begin if side = botSides [ 1 ] then
9987: LD_VAR 0 3
9991: PUSH
9992: LD_EXP 3
9996: PUSH
9997: LD_INT 1
9999: ARRAY
10000: EQUAL
10001: IFFALSE 10501
// begin if un in arForce then
10003: LD_VAR 0 1
10007: PUSH
10008: LD_EXP 14
10012: IN
10013: IFFALSE 10031
// arForce := arForce diff un ;
10015: LD_ADDR_EXP 14
10019: PUSH
10020: LD_EXP 14
10024: PUSH
10025: LD_VAR 0 1
10029: DIFF
10030: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10031: LD_VAR 0 1
10035: PPUSH
10036: CALL_OW 257
10040: PUSH
10041: LD_INT 3
10043: EQUAL
10044: PUSH
10045: LD_VAR 0 1
10049: PPUSH
10050: CALL_OW 110
10054: PUSH
10055: LD_INT 999
10057: LESS
10058: AND
10059: PUSH
10060: LD_EXP 11
10064: AND
10065: IFFALSE 10206
// begin if not IsOk ( arDep ) then
10067: LD_INT 2
10069: PPUSH
10070: CALL_OW 302
10074: NOT
10075: IFFALSE 10079
// exit ;
10077: GO 10573
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
10079: LD_ADDR_EXP 11
10083: PUSH
10084: LD_EXP 11
10088: PPUSH
10089: CALL 52777 0 1
10093: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
10094: LD_ADDR_OWVAR 20
10098: PUSH
10099: LD_EXP 3
10103: PUSH
10104: LD_INT 1
10106: ARRAY
10107: ST_TO_ADDR
// uc_nation := nation_arabian ;
10108: LD_ADDR_OWVAR 21
10112: PUSH
10113: LD_INT 2
10115: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
10116: LD_INT 0
10118: PPUSH
10119: LD_INT 1
10121: PUSH
10122: LD_INT 2
10124: PUSH
10125: LD_INT 3
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: LD_OWVAR 67
10137: ARRAY
10138: PPUSH
10139: CALL_OW 383
// un := CreateHuman ;
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: CALL_OW 44
10152: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
10153: LD_VAR 0 1
10157: PPUSH
10158: LD_INT 178
10160: PPUSH
10161: LD_INT 2
10163: PPUSH
10164: LD_INT 0
10166: PPUSH
10167: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
10171: LD_VAR 0 1
10175: PPUSH
10176: LD_INT 204
10178: PPUSH
10179: LD_INT 35
10181: PPUSH
10182: CALL_OW 111
// arForce := Join ( arForce , un ) ;
10186: LD_ADDR_EXP 14
10190: PUSH
10191: LD_EXP 14
10195: PPUSH
10196: LD_VAR 0 1
10200: PPUSH
10201: CALL 51394 0 2
10205: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
10206: LD_VAR 0 1
10210: PPUSH
10211: CALL_OW 247
10215: PUSH
10216: LD_INT 3
10218: EQUAL
10219: IFFALSE 10362
// begin btype := GetBType ( un ) ;
10221: LD_ADDR_VAR 0 11
10225: PUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: CALL_OW 266
10235: ST_TO_ADDR
// if btype = b_barracks then
10236: LD_VAR 0 11
10240: PUSH
10241: LD_INT 5
10243: EQUAL
10244: IFFALSE 10254
// btype := b_armoury ;
10246: LD_ADDR_VAR 0 11
10250: PUSH
10251: LD_INT 4
10253: ST_TO_ADDR
// if btype = b_factory then
10254: LD_VAR 0 11
10258: PUSH
10259: LD_INT 3
10261: EQUAL
10262: IFFALSE 10272
// btype := b_workshop ;
10264: LD_ADDR_VAR 0 11
10268: PUSH
10269: LD_INT 2
10271: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
10272: LD_VAR 0 11
10276: PUSH
10277: LD_INT 8
10279: PUSH
10280: LD_INT 7
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: IN
10287: IFFALSE 10297
// btype := b_lab ;
10289: LD_ADDR_VAR 0 11
10293: PUSH
10294: LD_INT 6
10296: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
10297: LD_ADDR_EXP 7
10301: PUSH
10302: LD_EXP 7
10306: PPUSH
10307: LD_EXP 7
10311: PUSH
10312: LD_INT 1
10314: PLUS
10315: PPUSH
10316: LD_VAR 0 11
10320: PUSH
10321: LD_VAR 0 1
10325: PPUSH
10326: CALL_OW 250
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 251
10340: PUSH
10341: LD_VAR 0 1
10345: PPUSH
10346: CALL_OW 254
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 1
10361: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
10362: LD_VAR 0 1
10366: PPUSH
10367: CALL_OW 247
10371: PUSH
10372: LD_INT 2
10374: EQUAL
10375: IFFALSE 10501
// begin chassis := GetChassis ( un ) ;
10377: LD_ADDR_VAR 0 5
10381: PUSH
10382: LD_VAR 0 1
10386: PPUSH
10387: CALL_OW 265
10391: ST_TO_ADDR
// engine := GetEngine ( un ) ;
10392: LD_ADDR_VAR 0 6
10396: PUSH
10397: LD_VAR 0 1
10401: PPUSH
10402: CALL_OW 262
10406: ST_TO_ADDR
// control := GetControl ( un ) ;
10407: LD_ADDR_VAR 0 7
10411: PUSH
10412: LD_VAR 0 1
10416: PPUSH
10417: CALL_OW 263
10421: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
10422: LD_ADDR_VAR 0 8
10426: PUSH
10427: LD_VAR 0 1
10431: PPUSH
10432: CALL_OW 264
10436: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
10437: LD_ADDR_VAR 0 9
10441: PUSH
10442: LD_VAR 0 10
10446: PPUSH
10447: LD_VAR 0 5
10451: PPUSH
10452: LD_VAR 0 6
10456: PPUSH
10457: LD_VAR 0 7
10461: PPUSH
10462: LD_VAR 0 8
10466: PPUSH
10467: CALL 16163 0 5
10471: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
10472: LD_ADDR_EXP 6
10476: PUSH
10477: LD_EXP 6
10481: PPUSH
10482: LD_EXP 6
10486: PUSH
10487: LD_INT 1
10489: PLUS
10490: PPUSH
10491: LD_VAR 0 9
10495: PPUSH
10496: CALL_OW 1
10500: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
10501: LD_EXP 34
10505: PUSH
10506: LD_EXP 26
10510: AND
10511: IFFALSE 10573
// if un in multi_commanders then
10513: LD_VAR 0 1
10517: PUSH
10518: LD_EXP 34
10522: IN
10523: IFFALSE 10573
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
10525: LD_ADDR_EXP 35
10529: PUSH
10530: LD_EXP 35
10534: PPUSH
10535: LD_VAR 0 3
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 1
10547: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
10548: LD_ADDR_EXP 34
10552: PUSH
10553: LD_EXP 34
10557: PUSH
10558: LD_VAR 0 1
10562: DIFF
10563: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
10564: LD_VAR 0 3
10568: PPUSH
10569: CALL 9134 0 1
// end ; end ;
10573: PPOPN 11
10575: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
10576: LD_INT 0
10578: PPUSH
10579: PPUSH
10580: PPUSH
10581: PPUSH
// begin side := GetSide ( building ) ;
10582: LD_ADDR_VAR 0 4
10586: PUSH
10587: LD_VAR 0 1
10591: PPUSH
10592: CALL_OW 255
10596: ST_TO_ADDR
// if multi_sides [ side ] then
10597: LD_EXP 17
10601: PUSH
10602: LD_VAR 0 4
10606: ARRAY
10607: IFFALSE 10628
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
10609: LD_VAR 0 4
10613: PPUSH
10614: LD_VAR 0 1
10618: PPUSH
10619: CALL_OW 266
10623: PPUSH
10624: CALL 9704 0 2
// if side = botSides [ 1 ] then
10628: LD_VAR 0 4
10632: PUSH
10633: LD_EXP 3
10637: PUSH
10638: LD_INT 1
10640: ARRAY
10641: EQUAL
10642: IFFALSE 10738
// begin arBuildings := Delete ( arBuildings , 1 ) ;
10644: LD_ADDR_EXP 7
10648: PUSH
10649: LD_EXP 7
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 3
10661: ST_TO_ADDR
// btype := GetBType ( building ) ;
10662: LD_ADDR_VAR 0 5
10666: PUSH
10667: LD_VAR 0 1
10671: PPUSH
10672: CALL_OW 266
10676: ST_TO_ADDR
// case btype of b_workshop :
10677: LD_VAR 0 5
10681: PUSH
10682: LD_INT 2
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10702
10690: POP
// ComUpgrade ( building ) ; b_lab :
10691: LD_VAR 0 1
10695: PPUSH
10696: CALL_OW 146
10700: GO 10738
10702: LD_INT 6
10704: DOUBLE
10705: EQUAL
10706: IFTRUE 10710
10708: GO 10737
10710: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
10711: LD_VAR 0 1
10715: PPUSH
10716: LD_INT 10
10718: PPUSH
10719: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
10723: LD_VAR 0 1
10727: PPUSH
10728: LD_INT 15
10730: PPUSH
10731: CALL_OW 207
// end ; end ;
10735: GO 10738
10737: POP
// end ; end ;
10738: PPOPN 5
10740: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
10741: LD_VAR 0 2
10745: PPUSH
10746: CALL_OW 255
10750: PUSH
10751: LD_EXP 3
10755: IN
10756: NOT
10757: IFFALSE 10761
// exit ;
10759: GO 10761
// end ;
10761: PPOPN 2
10763: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
10764: LD_INT 0
10766: PPUSH
10767: PPUSH
10768: PPUSH
10769: PPUSH
10770: PPUSH
10771: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_VAR 0 2
10781: PPUSH
10782: CALL 72413 0 2
// side := GetSide ( vehicle ) ;
10786: LD_ADDR_VAR 0 4
10790: PUSH
10791: LD_VAR 0 1
10795: PPUSH
10796: CALL_OW 255
10800: ST_TO_ADDR
// if multi_sides [ side ] then
10801: LD_EXP 17
10805: PUSH
10806: LD_VAR 0 4
10810: ARRAY
10811: IFFALSE 10822
// MultiplayerEvent_Produced ( side ) ;
10813: LD_VAR 0 4
10817: PPUSH
10818: CALL 9616 0 1
// if side = botSides [ 1 ] then
10822: LD_VAR 0 4
10826: PUSH
10827: LD_EXP 3
10831: PUSH
10832: LD_INT 1
10834: ARRAY
10835: EQUAL
10836: IFFALSE 10972
// begin driver := IsDrivenBy ( vehicle ) ;
10838: LD_ADDR_VAR 0 8
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 311
10852: ST_TO_ADDR
// if driver then
10853: LD_VAR 0 8
10857: IFFALSE 10891
// begin SetTag ( driver , tMech ) ;
10859: LD_VAR 0 8
10863: PPUSH
10864: LD_INT 7
10866: PPUSH
10867: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
10871: LD_ADDR_EXP 10
10875: PUSH
10876: LD_EXP 10
10880: PPUSH
10881: LD_VAR 0 8
10885: PPUSH
10886: CALL 51394 0 2
10890: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
10891: LD_EXP 12
10895: PUSH
10896: LD_EXP 8
10900: PPUSH
10901: CALL 15805 0 1
10905: GREATER
10906: PUSH
10907: LD_VAR 0 1
10911: PPUSH
10912: CALL_OW 266
10916: PUSH
10917: LD_INT 32
10919: PUSH
10920: LD_INT 88
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: IN
10927: OR
10928: IFFALSE 10952
// arVehicles := Join ( arVehicles , vehicle ) else
10930: LD_ADDR_EXP 8
10934: PUSH
10935: LD_EXP 8
10939: PPUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: CALL 51394 0 2
10949: ST_TO_ADDR
10950: GO 10972
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
10952: LD_ADDR_EXP 9
10956: PUSH
10957: LD_EXP 9
10961: PPUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL 51394 0 2
10971: ST_TO_ADDR
// end ; end ;
10972: PPOPN 8
10974: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 110
10984: PUSH
10985: LD_INT 7
10987: EQUAL
10988: IFFALSE 11002
// SetTag ( driver , 0 ) ;
10990: LD_VAR 0 1
10994: PPUSH
10995: LD_INT 0
10997: PPUSH
10998: CALL_OW 109
// end ;
11002: PPOPN 4
11004: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
11005: LD_VAR 0 2
11009: PPUSH
11010: CALL_OW 255
11014: PUSH
11015: LD_EXP 3
11019: PUSH
11020: LD_INT 1
11022: ARRAY
11023: EQUAL
11024: IFFALSE 11054
// if tech in arTech then
11026: LD_VAR 0 1
11030: PUSH
11031: LD_EXP 5
11035: IN
11036: IFFALSE 11054
// arTech := arTech diff tech ;
11038: LD_ADDR_EXP 5
11042: PUSH
11043: LD_EXP 5
11047: PUSH
11048: LD_VAR 0 1
11052: DIFF
11053: ST_TO_ADDR
// end ; end_of_file
11054: PPOPN 2
11056: END
// every 25 25$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
11057: LD_INT 2
11059: PPUSH
11060: CALL_OW 302
11064: PUSH
11065: LD_INT 2
11067: PPUSH
11068: CALL_OW 255
11072: PUSH
11073: LD_EXP 3
11077: PUSH
11078: LD_INT 1
11080: ARRAY
11081: EQUAL
11082: AND
11083: IFFALSE 11120
11085: GO 11087
11087: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
11088: LD_INT 10500
11090: PUSH
11091: LD_INT 2100
11093: PUSH
11094: LD_OWVAR 67
11098: MUL
11099: MINUS
11100: PPUSH
11101: CALL_OW 67
// activeArabAttacks := true ;
11105: LD_ADDR_EXP 4
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// ArabAttack ( 0 ) ;
11113: LD_INT 0
11115: PPUSH
11116: CALL 11162 0 1
// end ;
11120: END
// every 45 45$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
11121: LD_INT 2
11123: PPUSH
11124: CALL_OW 302
11128: PUSH
11129: LD_INT 2
11131: PPUSH
11132: CALL_OW 255
11136: PUSH
11137: LD_EXP 3
11141: PUSH
11142: LD_INT 1
11144: ARRAY
11145: EQUAL
11146: AND
11147: IFFALSE 11161
11149: GO 11151
11151: DISABLE
// ArabAttack ( Difficulty ) ;
11152: LD_OWVAR 67
11156: PPUSH
11157: CALL 11162 0 1
11161: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
11162: LD_INT 0
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
11168: PPUSH
// uc_side := botSides [ 1 ] ;
11169: LD_ADDR_OWVAR 20
11173: PUSH
11174: LD_EXP 3
11178: PUSH
11179: LD_INT 1
11181: ARRAY
11182: ST_TO_ADDR
// uc_nation := nation_arabian ;
11183: LD_ADDR_OWVAR 21
11187: PUSH
11188: LD_INT 2
11190: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
11191: LD_ADDR_VAR 0 4
11195: PUSH
11196: LD_INT 3
11198: PUSH
11199: LD_INT 4
11201: PUSH
11202: LD_INT 5
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: PUSH
11210: LD_OWVAR 67
11214: ARRAY
11215: ST_TO_ADDR
// arAttackersInf := [ ] ;
11216: LD_ADDR_EXP 42
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// arAttackersVeh := [ ] ;
11223: LD_ADDR_EXP 43
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// InitHC_All ( ) ;
11230: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
11234: LD_ADDR_VAR 0 3
11238: PUSH
11239: DOUBLE
11240: LD_INT 1
11242: DEC
11243: ST_TO_ADDR
11244: LD_INT 3
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_OWVAR 67
11262: ARRAY
11263: PUSH
11264: LD_VAR 0 1
11268: PLUS
11269: PUSH
11270: FOR_TO
11271: IFFALSE 11385
// begin PrepareSoldier ( false , skill ) ;
11273: LD_INT 0
11275: PPUSH
11276: LD_VAR 0 4
11280: PPUSH
11281: CALL_OW 381
// un := CreateHuman ;
11285: LD_ADDR_VAR 0 5
11289: PUSH
11290: CALL_OW 44
11294: ST_TO_ADDR
// if i mod 2 = 0 then
11295: LD_VAR 0 3
11299: PUSH
11300: LD_INT 2
11302: MOD
11303: PUSH
11304: LD_INT 0
11306: EQUAL
11307: IFFALSE 11321
// SetClass ( un , class_mortar ) ;
11309: LD_VAR 0 5
11313: PPUSH
11314: LD_INT 8
11316: PPUSH
11317: CALL_OW 336
// SetDir ( un , 1 ) ;
11321: LD_VAR 0 5
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 233
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
11333: LD_VAR 0 5
11337: PPUSH
11338: LD_INT 12
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
11348: LD_ADDR_EXP 42
11352: PUSH
11353: LD_EXP 42
11357: PPUSH
11358: LD_VAR 0 5
11362: PPUSH
11363: CALL 51394 0 2
11367: ST_TO_ADDR
// ComAgressiveMove ( un , 18 , 20 ) ;
11368: LD_VAR 0 5
11372: PPUSH
11373: LD_INT 18
11375: PPUSH
11376: LD_INT 20
11378: PPUSH
11379: CALL_OW 114
// end ;
11383: GO 11270
11385: POP
11386: POP
// for i := 1 to 3 + v do
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 3
11399: PUSH
11400: LD_VAR 0 1
11404: PLUS
11405: PUSH
11406: FOR_TO
11407: IFFALSE 11586
// begin PrepareMechanic ( false , skill ) ;
11409: LD_INT 0
11411: PPUSH
11412: LD_VAR 0 4
11416: PPUSH
11417: CALL_OW 383
// un := CreateHuman ;
11421: LD_ADDR_VAR 0 5
11425: PUSH
11426: CALL_OW 44
11430: ST_TO_ADDR
// SetTag ( un , 999 ) ;
11431: LD_VAR 0 5
11435: PPUSH
11436: LD_INT 999
11438: PPUSH
11439: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
11443: LD_INT 14
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: LD_INT 27
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 28
11460: PUSH
11461: LD_INT 26
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: LD_VAR 0 3
11474: PUSH
11475: LD_INT 4
11477: MOD
11478: PUSH
11479: LD_INT 1
11481: PLUS
11482: ARRAY
11483: PPUSH
11484: LD_INT 80
11486: PPUSH
11487: CALL 18543 0 5
// veh := CreateVehicle ;
11491: LD_ADDR_VAR 0 6
11495: PUSH
11496: CALL_OW 45
11500: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11501: LD_VAR 0 6
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
11513: LD_VAR 0 6
11517: PPUSH
11518: LD_INT 13
11520: PPUSH
11521: LD_INT 0
11523: PPUSH
11524: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
11528: LD_VAR 0 5
11532: PPUSH
11533: LD_VAR 0 6
11537: PPUSH
11538: CALL_OW 52
// ComMoveXY ( un , 45 , 55 ) ;
11542: LD_VAR 0 5
11546: PPUSH
11547: LD_INT 45
11549: PPUSH
11550: LD_INT 55
11552: PPUSH
11553: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
11557: LD_ADDR_EXP 43
11561: PUSH
11562: LD_EXP 43
11566: PPUSH
11567: LD_VAR 0 6
11571: PPUSH
11572: CALL 51394 0 2
11576: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11577: LD_INT 70
11579: PPUSH
11580: CALL_OW 67
// end ;
11584: GO 11406
11586: POP
11587: POP
// wait ( 0 0$2 ) ;
11588: LD_INT 70
11590: PPUSH
11591: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
11595: LD_ADDR_VAR 0 3
11599: PUSH
11600: DOUBLE
11601: LD_INT 1
11603: DEC
11604: ST_TO_ADDR
11605: LD_INT 1
11607: PUSH
11608: LD_INT 2
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: LD_OWVAR 67
11623: ARRAY
11624: PUSH
11625: FOR_TO
11626: IFFALSE 11721
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
11628: LD_INT 14
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: LD_INT 5
11636: PPUSH
11637: LD_INT 29
11639: PPUSH
11640: LD_INT 80
11642: PPUSH
11643: CALL 18543 0 5
// veh := CreateVehicle ;
11647: LD_ADDR_VAR 0 6
11651: PUSH
11652: CALL_OW 45
11656: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
11657: LD_VAR 0 6
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
11669: LD_VAR 0 6
11673: PPUSH
11674: LD_INT 13
11676: PPUSH
11677: LD_INT 0
11679: PPUSH
11680: CALL_OW 49
// ; ComMoveXY ( un , 60 , 63 ) ;
11684: LD_VAR 0 5
11688: PPUSH
11689: LD_INT 60
11691: PPUSH
11692: LD_INT 63
11694: PPUSH
11695: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
11699: LD_ADDR_EXP 43
11703: PUSH
11704: LD_EXP 43
11708: PPUSH
11709: LD_VAR 0 6
11713: PPUSH
11714: CALL 51394 0 2
11718: ST_TO_ADDR
// end ;
11719: GO 11625
11721: POP
11722: POP
// end ;
11723: LD_VAR 0 2
11727: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
11728: LD_EXP 42
11732: IFFALSE 12259
11734: GO 11736
11736: DISABLE
11737: LD_INT 0
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
// begin enable ;
11743: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11744: LD_ADDR_VAR 0 2
11748: PUSH
11749: LD_EXP 42
11753: PPUSH
11754: LD_INT 50
11756: PUSH
11757: EMPTY
11758: LIST
11759: PPUSH
11760: CALL_OW 72
11764: ST_TO_ADDR
// arAttackersInf := [ ] ;
11765: LD_ADDR_EXP 42
11769: PUSH
11770: EMPTY
11771: ST_TO_ADDR
// ComMoveXY ( tmp , 46 , 43 ) ;
11772: LD_VAR 0 2
11776: PPUSH
11777: LD_INT 46
11779: PPUSH
11780: LD_INT 43
11782: PPUSH
11783: CALL_OW 111
// wait ( 0 0$10 ) ;
11787: LD_INT 350
11789: PPUSH
11790: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11794: LD_ADDR_VAR 0 1
11798: PUSH
11799: LD_VAR 0 2
11803: PPUSH
11804: LD_INT 25
11806: PUSH
11807: LD_INT 1
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PPUSH
11814: CALL_OW 72
11818: PUSH
11819: FOR_IN
11820: IFFALSE 11951
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: LD_INT 81
11829: PUSH
11830: LD_EXP 3
11834: PUSH
11835: LD_INT 1
11837: ARRAY
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 3
11845: PUSH
11846: LD_INT 120
11848: PUSH
11849: LD_INT 11
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: LD_INT 21
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 3
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: PPUSH
11898: LD_VAR 0 1
11902: PPUSH
11903: CALL_OW 74
11907: ST_TO_ADDR
// if not nearest then
11908: LD_VAR 0 3
11912: NOT
11913: IFFALSE 11917
// break ;
11915: GO 11951
// SetTag ( nearest , tMined ) ;
11917: LD_VAR 0 3
11921: PPUSH
11922: LD_INT 11
11924: PPUSH
11925: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11929: LD_VAR 0 1
11933: PPUSH
11934: LD_INT 0
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: LD_VAR 0 3
11944: PPUSH
11945: CALL_OW 192
// end ;
11949: GO 11819
11951: POP
11952: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11953: LD_ADDR_VAR 0 2
11957: PUSH
11958: LD_VAR 0 2
11962: PPUSH
11963: LD_INT 50
11965: PUSH
11966: EMPTY
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: ST_TO_ADDR
// AddComMoveXY ( tmp , 103 , 85 ) ;
11974: LD_VAR 0 2
11978: PPUSH
11979: LD_INT 103
11981: PPUSH
11982: LD_INT 85
11984: PPUSH
11985: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
11989: LD_INT 70
11991: PPUSH
11992: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11996: LD_ADDR_VAR 0 2
12000: PUSH
12001: LD_VAR 0 2
12005: PPUSH
12006: LD_INT 50
12008: PUSH
12009: EMPTY
12010: LIST
12011: PPUSH
12012: CALL_OW 72
12016: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
12017: LD_ADDR_VAR 0 4
12021: PUSH
12022: LD_INT 81
12024: PUSH
12025: LD_EXP 3
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: ST_TO_ADDR
// for i in tmp do
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_VAR 0 2
12052: PUSH
12053: FOR_IN
12054: IFFALSE 12250
// if GetClass ( i ) <> 1 then
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 257
12065: PUSH
12066: LD_INT 1
12068: NONEQUAL
12069: IFFALSE 12097
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12071: LD_VAR 0 1
12075: PPUSH
12076: LD_VAR 0 4
12080: PPUSH
12081: LD_VAR 0 1
12085: PPUSH
12086: CALL_OW 74
12090: PPUSH
12091: CALL_OW 115
12095: GO 12248
// if not HasTask ( i ) then
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 314
12106: NOT
12107: IFFALSE 12248
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: LD_VAR 0 4
12118: PPUSH
12119: LD_INT 3
12121: PUSH
12122: LD_INT 120
12124: PUSH
12125: LD_INT 11
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 2
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 21
12151: PUSH
12152: LD_INT 3
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: PPUSH
12173: LD_VAR 0 1
12177: PPUSH
12178: CALL_OW 74
12182: ST_TO_ADDR
// if not nearest then
12183: LD_VAR 0 3
12187: NOT
12188: IFFALSE 12216
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_VAR 0 4
12199: PPUSH
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 74
12209: PPUSH
12210: CALL_OW 115
12214: GO 12248
// begin SetTag ( nearest , tMined ) ;
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 11
12223: PPUSH
12224: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12228: LD_VAR 0 1
12232: PPUSH
12233: LD_INT 0
12235: PPUSH
12236: LD_INT 0
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: CALL_OW 132
// end ; end ;
12248: GO 12053
12250: POP
12251: POP
// until not tmp ;
12252: LD_VAR 0 2
12256: NOT
12257: IFFALSE 11989
// end ;
12259: PPOPN 4
12261: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
12262: LD_EXP 43
12266: IFFALSE 12378
12268: GO 12270
12270: DISABLE
12271: LD_INT 0
12273: PPUSH
12274: PPUSH
// begin enable ;
12275: ENABLE
// tmp := arAttackersVeh ;
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: LD_EXP 43
12285: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12286: LD_ADDR_EXP 43
12290: PUSH
12291: EMPTY
12292: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
12293: LD_INT 70
12295: PPUSH
12296: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: LD_VAR 0 2
12309: PPUSH
12310: LD_INT 50
12312: PUSH
12313: EMPTY
12314: LIST
12315: PPUSH
12316: CALL_OW 72
12320: ST_TO_ADDR
// for i in tmp do
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_VAR 0 2
12330: PUSH
12331: FOR_IN
12332: IFFALSE 12369
// AgressiveMove ( i , [ [ 58 , 77 ] , [ 73 , 98 ] ] ) until not tmp ;
12334: LD_VAR 0 1
12338: PPUSH
12339: LD_INT 58
12341: PUSH
12342: LD_INT 77
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 73
12351: PUSH
12352: LD_INT 98
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PPUSH
12363: CALL 53998 0 2
12367: GO 12331
12369: POP
12370: POP
12371: LD_VAR 0 2
12375: NOT
12376: IFFALSE 12293
// end ;
12378: PPOPN 2
12380: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
12381: LD_EXP 9
12385: PUSH
12386: LD_EXP 4
12390: AND
12391: IFFALSE 12970
12393: GO 12395
12395: DISABLE
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
12400: PPUSH
// begin enable ;
12401: ENABLE
// if not arVehiclesAtttackers then
12402: LD_EXP 9
12406: NOT
12407: IFFALSE 12411
// exit ;
12409: GO 12970
// for i in arVehiclesAtttackers do
12411: LD_ADDR_VAR 0 1
12415: PUSH
12416: LD_EXP 9
12420: PUSH
12421: FOR_IN
12422: IFFALSE 12968
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
12424: LD_VAR 0 1
12428: PPUSH
12429: CALL_OW 302
12433: NOT
12434: PUSH
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 255
12444: PUSH
12445: LD_EXP 3
12449: PUSH
12450: LD_INT 1
12452: ARRAY
12453: NONEQUAL
12454: OR
12455: IFFALSE 12475
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
12457: LD_ADDR_EXP 9
12461: PUSH
12462: LD_EXP 9
12466: PUSH
12467: LD_VAR 0 1
12471: DIFF
12472: ST_TO_ADDR
// continue ;
12473: GO 12421
// end ; if GetTag ( i ) = 300 then
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 110
12484: PUSH
12485: LD_INT 300
12487: EQUAL
12488: IFFALSE 12603
// begin if GetFuel ( i ) < 50 then
12490: LD_VAR 0 1
12494: PPUSH
12495: CALL_OW 261
12499: PUSH
12500: LD_INT 50
12502: LESS
12503: IFFALSE 12562
// begin ComMoveXY ( i , 102 , 47 ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: LD_INT 102
12512: PPUSH
12513: LD_INT 47
12515: PPUSH
12516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12520: LD_INT 35
12522: PPUSH
12523: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
12527: LD_VAR 0 1
12531: PPUSH
12532: LD_INT 102
12534: PPUSH
12535: LD_INT 47
12537: PPUSH
12538: CALL_OW 297
12542: PUSH
12543: LD_INT 4
12545: LESS
12546: IFFALSE 12520
// SetFuel ( i , 100 ) ;
12548: LD_VAR 0 1
12552: PPUSH
12553: LD_INT 100
12555: PPUSH
12556: CALL_OW 240
// end else
12560: GO 12603
// if not IsInArea ( i , arParkingArea ) then
12562: LD_VAR 0 1
12566: PPUSH
12567: LD_INT 14
12569: PPUSH
12570: CALL_OW 308
12574: NOT
12575: IFFALSE 12591
// ComMoveToArea ( i , arParkingArea ) else
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_INT 14
12584: PPUSH
12585: CALL_OW 113
12589: GO 12603
// SetTag ( i , 301 ) ;
12591: LD_VAR 0 1
12595: PPUSH
12596: LD_INT 301
12598: PPUSH
12599: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 110
12612: PUSH
12613: LD_INT 301
12615: EQUAL
12616: IFFALSE 12758
// begin if GetLives ( i ) < 1000 then
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 256
12627: PUSH
12628: LD_INT 1000
12630: LESS
12631: IFFALSE 12735
// begin if not IsDrivenBy ( i ) then
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 311
12642: NOT
12643: IFFALSE 12647
// continue ;
12645: GO 12421
// mech := IsDrivenBy ( i ) ;
12647: LD_ADDR_VAR 0 2
12651: PUSH
12652: LD_VAR 0 1
12656: PPUSH
12657: CALL_OW 311
12661: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12662: LD_VAR 0 2
12666: PPUSH
12667: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
12671: LD_VAR 0 2
12675: PPUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
12685: LD_INT 35
12687: PPUSH
12688: CALL_OW 67
// until GetLives ( i ) = 1000 ;
12692: LD_VAR 0 1
12696: PPUSH
12697: CALL_OW 256
12701: PUSH
12702: LD_INT 1000
12704: EQUAL
12705: IFFALSE 12685
// SetLives ( mech , 1000 ) ;
12707: LD_VAR 0 2
12711: PPUSH
12712: LD_INT 1000
12714: PPUSH
12715: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
12719: LD_VAR 0 2
12723: PPUSH
12724: LD_VAR 0 1
12728: PPUSH
12729: CALL_OW 120
// end else
12733: GO 12758
// if IsDrivenBy ( i ) then
12735: LD_VAR 0 1
12739: PPUSH
12740: CALL_OW 311
12744: IFFALSE 12758
// SetTag ( i , 0 ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_INT 0
12753: PPUSH
12754: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
12758: LD_VAR 0 1
12762: PPUSH
12763: CALL_OW 110
12767: PUSH
12768: LD_INT 300
12770: LESS
12771: IFFALSE 12966
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
12773: LD_ADDR_VAR 0 3
12777: PUSH
12778: LD_INT 1
12780: PPUSH
12781: LD_INT 81
12783: PUSH
12784: LD_EXP 3
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PPUSH
12797: CALL_OW 70
12801: ST_TO_ADDR
// if GetLives ( i ) < 650 then
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 256
12811: PUSH
12812: LD_INT 650
12814: LESS
12815: IFFALSE 12840
// begin ComStop ( i ) ;
12817: LD_VAR 0 1
12821: PPUSH
12822: CALL_OW 141
// SetTag ( i , 300 ) ;
12826: LD_VAR 0 1
12830: PPUSH
12831: LD_INT 300
12833: PPUSH
12834: CALL_OW 109
// continue ;
12838: GO 12421
// end ; if enemy then
12840: LD_VAR 0 3
12844: IFFALSE 12884
// begin if not HasTask ( i ) then
12846: LD_VAR 0 1
12850: PPUSH
12851: CALL_OW 314
12855: NOT
12856: IFFALSE 12882
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
12858: LD_VAR 0 1
12862: PPUSH
12863: LD_VAR 0 3
12867: PPUSH
12868: LD_VAR 0 1
12872: PPUSH
12873: CALL_OW 74
12877: PPUSH
12878: CALL_OW 115
// end else
12882: GO 12966
// if arVehiclesAtttackers then
12884: LD_EXP 9
12888: IFFALSE 12966
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_INT 81
12897: PUSH
12898: LD_EXP 3
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 69
12915: ST_TO_ADDR
// if enemy then
12916: LD_VAR 0 3
12920: IFFALSE 12966
// AgressiveMove ( i , [ [ 69 , 55 ] , [ 55 , 64 ] , [ 60 , 79 ] ] ) ;
12922: LD_VAR 0 1
12926: PPUSH
12927: LD_INT 69
12929: PUSH
12930: LD_INT 55
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 55
12939: PUSH
12940: LD_INT 64
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 60
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL 53998 0 2
// end ; end ; end ;
12966: GO 12421
12968: POP
12969: POP
// end ;
12970: PPOPN 3
12972: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
12973: LD_INT 22
12975: PUSH
12976: LD_EXP 3
12980: PUSH
12981: LD_INT 1
12983: ARRAY
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 32
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: CALL_OW 69
13007: IFFALSE 13090
13009: GO 13011
13011: DISABLE
13012: LD_INT 0
13014: PPUSH
// begin enable ;
13015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
13016: LD_ADDR_VAR 0 1
13020: PUSH
13021: LD_INT 22
13023: PUSH
13024: LD_EXP 3
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 32
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: FOR_IN
13057: IFFALSE 13088
// if GetFuel ( i ) < 3 then
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 261
13068: PUSH
13069: LD_INT 3
13071: LESS
13072: IFFALSE 13086
// SetFuel ( i , 3 ) ;
13074: LD_VAR 0 1
13078: PPUSH
13079: LD_INT 3
13081: PPUSH
13082: CALL_OW 240
13086: GO 13056
13088: POP
13089: POP
// end ; end_of_file
13090: PPOPN 1
13092: END
// every 0 0$20 trigger game do
13093: LD_EXP 2
13097: IFFALSE 13142
13099: GO 13101
13101: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13102: LD_INT 15
13104: PUSH
13105: LD_INT 17
13107: PUSH
13108: LD_INT 16
13110: PUSH
13111: LD_INT 1
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PPUSH
13120: LD_EXP 31
13124: PUSH
13125: LD_INT 2
13127: ARRAY
13128: PPUSH
13129: LD_EXP 31
13133: PUSH
13134: LD_INT 1
13136: ARRAY
13137: PPUSH
13138: CALL 13143 0 3
13142: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
13143: LD_INT 0
13145: PPUSH
13146: PPUSH
13147: PPUSH
13148: PPUSH
// if not areas then
13149: LD_VAR 0 1
13153: NOT
13154: IFFALSE 13158
// exit ;
13156: GO 13535
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
13158: LD_ADDR_VAR 0 7
13162: PUSH
13163: LD_INT 18
13165: PUSH
13166: LD_INT 19
13168: PUSH
13169: LD_INT 20
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: ST_TO_ADDR
// x := 5 ;
13177: LD_ADDR_VAR 0 6
13181: PUSH
13182: LD_INT 5
13184: ST_TO_ADDR
// repeat wait ( time ) ;
13185: LD_VAR 0 2
13189: PPUSH
13190: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
13194: LD_OWVAR 1
13198: PUSH
13199: LD_INT 37800
13201: PUSH
13202: LD_INT 31500
13204: PUSH
13205: LD_INT 25200
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: PUSH
13213: LD_OWVAR 67
13217: ARRAY
13218: LESS
13219: IFFALSE 13358
// begin for i := 1 to multi_sides do
13221: LD_ADDR_VAR 0 5
13225: PUSH
13226: DOUBLE
13227: LD_INT 1
13229: DEC
13230: ST_TO_ADDR
13231: LD_EXP 17
13235: PUSH
13236: FOR_TO
13237: IFFALSE 13349
// if multi_sides [ i ] then
13239: LD_EXP 17
13243: PUSH
13244: LD_VAR 0 5
13248: ARRAY
13249: IFFALSE 13347
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
13251: LD_VAR 0 7
13255: PUSH
13256: LD_EXP 17
13260: PUSH
13261: LD_VAR 0 5
13265: ARRAY
13266: ARRAY
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 287
13275: PUSH
13276: LD_INT 32
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 23
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PUSH
13290: LD_OWVAR 67
13294: ARRAY
13295: LESS
13296: IFFALSE 13347
// begin amount := amount - ( x * 10 ) ;
13298: LD_ADDR_VAR 0 3
13302: PUSH
13303: LD_VAR 0 3
13307: PUSH
13308: LD_VAR 0 6
13312: PUSH
13313: LD_INT 10
13315: MUL
13316: MINUS
13317: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
13318: LD_VAR 0 6
13322: PPUSH
13323: LD_VAR 0 7
13327: PUSH
13328: LD_EXP 17
13332: PUSH
13333: LD_VAR 0 5
13337: ARRAY
13338: ARRAY
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 55
// end ; end ;
13347: GO 13236
13349: POP
13350: POP
// wait ( 0 0$2 ) ;
13351: LD_INT 70
13353: PPUSH
13354: CALL_OW 67
// end ; for i in areas do
13358: LD_ADDR_VAR 0 5
13362: PUSH
13363: LD_VAR 0 1
13367: PUSH
13368: FOR_IN
13369: IFFALSE 13452
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13371: LD_VAR 0 5
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 287
13383: PUSH
13384: LD_INT 25
13386: PUSH
13387: LD_INT 22
13389: PUSH
13390: LD_INT 20
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: LD_OWVAR 67
13402: ARRAY
13403: LESS
13404: IFFALSE 13450
// begin wait ( 0 0$5 ) ;
13406: LD_INT 175
13408: PPUSH
13409: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
13413: LD_VAR 0 6
13417: PPUSH
13418: LD_VAR 0 5
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 55
// amount := amount - ( x * 10 ) ;
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_VAR 0 3
13439: PUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_INT 10
13447: MUL
13448: MINUS
13449: ST_TO_ADDR
// end ; end ;
13450: GO 13368
13452: POP
13453: POP
// time := time + 0 0$2 ;
13454: LD_ADDR_VAR 0 2
13458: PUSH
13459: LD_VAR 0 2
13463: PUSH
13464: LD_INT 70
13466: PLUS
13467: ST_TO_ADDR
// x := x - 1 ;
13468: LD_ADDR_VAR 0 6
13472: PUSH
13473: LD_VAR 0 6
13477: PUSH
13478: LD_INT 1
13480: MINUS
13481: ST_TO_ADDR
// if x = 0 then
13482: LD_VAR 0 6
13486: PUSH
13487: LD_INT 0
13489: EQUAL
13490: IFFALSE 13500
// x := 5 ;
13492: LD_ADDR_VAR 0 6
13496: PUSH
13497: LD_INT 5
13499: ST_TO_ADDR
// if time > 2 2$00 then
13500: LD_VAR 0 2
13504: PUSH
13505: LD_INT 4200
13507: GREATER
13508: IFFALSE 13518
// time := 0 0$30 ;
13510: LD_ADDR_VAR 0 2
13514: PUSH
13515: LD_INT 1050
13517: ST_TO_ADDR
// until not game or amount <= 0 ;
13518: LD_EXP 2
13522: NOT
13523: PUSH
13524: LD_VAR 0 3
13528: PUSH
13529: LD_INT 0
13531: LESSEQUAL
13532: OR
13533: IFFALSE 13185
// end ; end_of_file
13535: LD_VAR 0 4
13539: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
13540: LD_VAR 0 1
13544: PUSH
13545: LD_INT 200
13547: DOUBLE
13548: GREATEREQUAL
13549: IFFALSE 13557
13551: LD_INT 299
13553: DOUBLE
13554: LESSEQUAL
13555: IFTRUE 13559
13557: GO 13591
13559: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
13560: LD_VAR 0 1
13564: PPUSH
13565: LD_VAR 0 2
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: LD_VAR 0 5
13584: PPUSH
13585: CALL 72669 0 5
13589: GO 13668
13591: LD_INT 300
13593: DOUBLE
13594: GREATEREQUAL
13595: IFFALSE 13603
13597: LD_INT 399
13599: DOUBLE
13600: LESSEQUAL
13601: IFTRUE 13605
13603: GO 13667
13605: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
13606: LD_VAR 0 1
13610: PPUSH
13611: LD_VAR 0 2
13615: PPUSH
13616: LD_VAR 0 3
13620: PPUSH
13621: LD_VAR 0 4
13625: PPUSH
13626: LD_VAR 0 5
13630: PPUSH
13631: LD_VAR 0 6
13635: PPUSH
13636: LD_VAR 0 7
13640: PPUSH
13641: LD_VAR 0 8
13645: PPUSH
13646: LD_VAR 0 9
13650: PPUSH
13651: LD_VAR 0 10
13655: PPUSH
13656: LD_VAR 0 11
13660: PPUSH
13661: CALL 68994 0 11
13665: GO 13668
13667: POP
// end ;
13668: PPOPN 11
13670: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
13671: LD_VAR 0 1
13675: PPUSH
13676: LD_VAR 0 2
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: LD_VAR 0 4
13690: PPUSH
13691: LD_VAR 0 5
13695: PPUSH
13696: CALL 72405 0 5
// end ; end_of_file
13700: PPOPN 5
13702: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13703: LD_INT 0
13705: PPUSH
13706: PPUSH
// if exist_mode then
13707: LD_VAR 0 2
13711: IFFALSE 13736
// unit := CreateCharacter ( prefix & ident ) else
13713: LD_ADDR_VAR 0 5
13717: PUSH
13718: LD_VAR 0 3
13722: PUSH
13723: LD_VAR 0 1
13727: STR
13728: PPUSH
13729: CALL_OW 34
13733: ST_TO_ADDR
13734: GO 13751
// unit := NewCharacter ( ident ) ;
13736: LD_ADDR_VAR 0 5
13740: PUSH
13741: LD_VAR 0 1
13745: PPUSH
13746: CALL_OW 25
13750: ST_TO_ADDR
// result := unit ;
13751: LD_ADDR_VAR 0 4
13755: PUSH
13756: LD_VAR 0 5
13760: ST_TO_ADDR
// end ;
13761: LD_VAR 0 4
13765: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13766: LD_INT 0
13768: PPUSH
13769: PPUSH
// if not side or not nation then
13770: LD_VAR 0 1
13774: NOT
13775: PUSH
13776: LD_VAR 0 2
13780: NOT
13781: OR
13782: IFFALSE 13786
// exit ;
13784: GO 14554
// case nation of nation_american :
13786: LD_VAR 0 2
13790: PUSH
13791: LD_INT 1
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 14013
13799: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13800: LD_ADDR_VAR 0 4
13804: PUSH
13805: LD_INT 35
13807: PUSH
13808: LD_INT 45
13810: PUSH
13811: LD_INT 46
13813: PUSH
13814: LD_INT 47
13816: PUSH
13817: LD_INT 82
13819: PUSH
13820: LD_INT 83
13822: PUSH
13823: LD_INT 84
13825: PUSH
13826: LD_INT 85
13828: PUSH
13829: LD_INT 86
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 6
13840: PUSH
13841: LD_INT 15
13843: PUSH
13844: LD_INT 16
13846: PUSH
13847: LD_INT 7
13849: PUSH
13850: LD_INT 12
13852: PUSH
13853: LD_INT 13
13855: PUSH
13856: LD_INT 10
13858: PUSH
13859: LD_INT 14
13861: PUSH
13862: LD_INT 20
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 22
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 32
13876: PUSH
13877: LD_INT 27
13879: PUSH
13880: LD_INT 36
13882: PUSH
13883: LD_INT 69
13885: PUSH
13886: LD_INT 39
13888: PUSH
13889: LD_INT 34
13891: PUSH
13892: LD_INT 40
13894: PUSH
13895: LD_INT 48
13897: PUSH
13898: LD_INT 49
13900: PUSH
13901: LD_INT 50
13903: PUSH
13904: LD_INT 51
13906: PUSH
13907: LD_INT 52
13909: PUSH
13910: LD_INT 53
13912: PUSH
13913: LD_INT 54
13915: PUSH
13916: LD_INT 55
13918: PUSH
13919: LD_INT 56
13921: PUSH
13922: LD_INT 57
13924: PUSH
13925: LD_INT 58
13927: PUSH
13928: LD_INT 59
13930: PUSH
13931: LD_INT 60
13933: PUSH
13934: LD_INT 61
13936: PUSH
13937: LD_INT 62
13939: PUSH
13940: LD_INT 80
13942: PUSH
13943: LD_INT 82
13945: PUSH
13946: LD_INT 83
13948: PUSH
13949: LD_INT 84
13951: PUSH
13952: LD_INT 85
13954: PUSH
13955: LD_INT 86
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: ST_TO_ADDR
14011: GO 14478
14013: LD_INT 2
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14247
14021: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14022: LD_ADDR_VAR 0 4
14026: PUSH
14027: LD_INT 35
14029: PUSH
14030: LD_INT 45
14032: PUSH
14033: LD_INT 46
14035: PUSH
14036: LD_INT 47
14038: PUSH
14039: LD_INT 82
14041: PUSH
14042: LD_INT 83
14044: PUSH
14045: LD_INT 84
14047: PUSH
14048: LD_INT 85
14050: PUSH
14051: LD_INT 87
14053: PUSH
14054: LD_INT 70
14056: PUSH
14057: LD_INT 1
14059: PUSH
14060: LD_INT 11
14062: PUSH
14063: LD_INT 3
14065: PUSH
14066: LD_INT 4
14068: PUSH
14069: LD_INT 5
14071: PUSH
14072: LD_INT 6
14074: PUSH
14075: LD_INT 15
14077: PUSH
14078: LD_INT 18
14080: PUSH
14081: LD_INT 7
14083: PUSH
14084: LD_INT 17
14086: PUSH
14087: LD_INT 8
14089: PUSH
14090: LD_INT 20
14092: PUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 72
14101: PUSH
14102: LD_INT 26
14104: PUSH
14105: LD_INT 69
14107: PUSH
14108: LD_INT 39
14110: PUSH
14111: LD_INT 40
14113: PUSH
14114: LD_INT 41
14116: PUSH
14117: LD_INT 42
14119: PUSH
14120: LD_INT 43
14122: PUSH
14123: LD_INT 48
14125: PUSH
14126: LD_INT 49
14128: PUSH
14129: LD_INT 50
14131: PUSH
14132: LD_INT 51
14134: PUSH
14135: LD_INT 52
14137: PUSH
14138: LD_INT 53
14140: PUSH
14141: LD_INT 54
14143: PUSH
14144: LD_INT 55
14146: PUSH
14147: LD_INT 56
14149: PUSH
14150: LD_INT 60
14152: PUSH
14153: LD_INT 61
14155: PUSH
14156: LD_INT 62
14158: PUSH
14159: LD_INT 66
14161: PUSH
14162: LD_INT 67
14164: PUSH
14165: LD_INT 68
14167: PUSH
14168: LD_INT 81
14170: PUSH
14171: LD_INT 82
14173: PUSH
14174: LD_INT 83
14176: PUSH
14177: LD_INT 84
14179: PUSH
14180: LD_INT 85
14182: PUSH
14183: LD_INT 87
14185: PUSH
14186: LD_INT 88
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: ST_TO_ADDR
14245: GO 14478
14247: LD_INT 3
14249: DOUBLE
14250: EQUAL
14251: IFTRUE 14255
14253: GO 14477
14255: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14256: LD_ADDR_VAR 0 4
14260: PUSH
14261: LD_INT 46
14263: PUSH
14264: LD_INT 47
14266: PUSH
14267: LD_INT 1
14269: PUSH
14270: LD_INT 2
14272: PUSH
14273: LD_INT 82
14275: PUSH
14276: LD_INT 83
14278: PUSH
14279: LD_INT 84
14281: PUSH
14282: LD_INT 85
14284: PUSH
14285: LD_INT 86
14287: PUSH
14288: LD_INT 11
14290: PUSH
14291: LD_INT 9
14293: PUSH
14294: LD_INT 20
14296: PUSH
14297: LD_INT 19
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 24
14305: PUSH
14306: LD_INT 22
14308: PUSH
14309: LD_INT 25
14311: PUSH
14312: LD_INT 28
14314: PUSH
14315: LD_INT 29
14317: PUSH
14318: LD_INT 30
14320: PUSH
14321: LD_INT 31
14323: PUSH
14324: LD_INT 37
14326: PUSH
14327: LD_INT 38
14329: PUSH
14330: LD_INT 32
14332: PUSH
14333: LD_INT 27
14335: PUSH
14336: LD_INT 33
14338: PUSH
14339: LD_INT 69
14341: PUSH
14342: LD_INT 39
14344: PUSH
14345: LD_INT 34
14347: PUSH
14348: LD_INT 40
14350: PUSH
14351: LD_INT 71
14353: PUSH
14354: LD_INT 23
14356: PUSH
14357: LD_INT 44
14359: PUSH
14360: LD_INT 48
14362: PUSH
14363: LD_INT 49
14365: PUSH
14366: LD_INT 50
14368: PUSH
14369: LD_INT 51
14371: PUSH
14372: LD_INT 52
14374: PUSH
14375: LD_INT 53
14377: PUSH
14378: LD_INT 54
14380: PUSH
14381: LD_INT 55
14383: PUSH
14384: LD_INT 56
14386: PUSH
14387: LD_INT 57
14389: PUSH
14390: LD_INT 58
14392: PUSH
14393: LD_INT 59
14395: PUSH
14396: LD_INT 63
14398: PUSH
14399: LD_INT 64
14401: PUSH
14402: LD_INT 65
14404: PUSH
14405: LD_INT 82
14407: PUSH
14408: LD_INT 83
14410: PUSH
14411: LD_INT 84
14413: PUSH
14414: LD_INT 85
14416: PUSH
14417: LD_INT 86
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: ST_TO_ADDR
14475: GO 14478
14477: POP
// if state > - 1 and state < 3 then
14478: LD_VAR 0 3
14482: PUSH
14483: LD_INT 1
14485: NEG
14486: GREATER
14487: PUSH
14488: LD_VAR 0 3
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: AND
14497: IFFALSE 14554
// for i in result do
14499: LD_ADDR_VAR 0 5
14503: PUSH
14504: LD_VAR 0 4
14508: PUSH
14509: FOR_IN
14510: IFFALSE 14552
// if GetTech ( i , side ) <> state then
14512: LD_VAR 0 5
14516: PPUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 321
14526: PUSH
14527: LD_VAR 0 3
14531: NONEQUAL
14532: IFFALSE 14550
// result := result diff i ;
14534: LD_ADDR_VAR 0 4
14538: PUSH
14539: LD_VAR 0 4
14543: PUSH
14544: LD_VAR 0 5
14548: DIFF
14549: ST_TO_ADDR
14550: GO 14509
14552: POP
14553: POP
// end ;
14554: LD_VAR 0 4
14558: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
14563: PPUSH
// result := true ;
14564: LD_ADDR_VAR 0 3
14568: PUSH
14569: LD_INT 1
14571: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_VAR 0 2
14581: PPUSH
14582: CALL_OW 480
14586: ST_TO_ADDR
// if not tmp then
14587: LD_VAR 0 5
14591: NOT
14592: IFFALSE 14596
// exit ;
14594: GO 14645
// for i in tmp do
14596: LD_ADDR_VAR 0 4
14600: PUSH
14601: LD_VAR 0 5
14605: PUSH
14606: FOR_IN
14607: IFFALSE 14643
// if GetTech ( i , side ) <> state_researched then
14609: LD_VAR 0 4
14613: PPUSH
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 321
14623: PUSH
14624: LD_INT 2
14626: NONEQUAL
14627: IFFALSE 14641
// begin result := false ;
14629: LD_ADDR_VAR 0 3
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// exit ;
14637: POP
14638: POP
14639: GO 14645
// end ;
14641: GO 14606
14643: POP
14644: POP
// end ;
14645: LD_VAR 0 3
14649: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14650: LD_INT 0
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14665: LD_VAR 0 1
14669: NOT
14670: PUSH
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 257
14680: PUSH
14681: LD_INT 9
14683: NONEQUAL
14684: OR
14685: IFFALSE 14689
// exit ;
14687: GO 15262
// side := GetSide ( unit ) ;
14689: LD_ADDR_VAR 0 9
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 255
14703: ST_TO_ADDR
// tech_space := tech_spacanom ;
14704: LD_ADDR_VAR 0 12
14708: PUSH
14709: LD_INT 29
14711: ST_TO_ADDR
// tech_time := tech_taurad ;
14712: LD_ADDR_VAR 0 13
14716: PUSH
14717: LD_INT 28
14719: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14720: LD_ADDR_VAR 0 11
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 310
14734: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14735: LD_VAR 0 11
14739: PPUSH
14740: CALL_OW 247
14744: PUSH
14745: LD_INT 2
14747: EQUAL
14748: IFFALSE 14752
// exit ;
14750: GO 15262
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14752: LD_ADDR_VAR 0 8
14756: PUSH
14757: LD_INT 81
14759: PUSH
14760: LD_VAR 0 9
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: LD_INT 21
14774: PUSH
14775: LD_INT 3
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PPUSH
14790: CALL_OW 69
14794: ST_TO_ADDR
// if not tmp then
14795: LD_VAR 0 8
14799: NOT
14800: IFFALSE 14804
// exit ;
14802: GO 15262
// if in_unit then
14804: LD_VAR 0 11
14808: IFFALSE 14832
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14810: LD_ADDR_VAR 0 10
14814: PUSH
14815: LD_VAR 0 8
14819: PPUSH
14820: LD_VAR 0 11
14824: PPUSH
14825: CALL_OW 74
14829: ST_TO_ADDR
14830: GO 14852
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14832: LD_ADDR_VAR 0 10
14836: PUSH
14837: LD_VAR 0 8
14841: PPUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 74
14851: ST_TO_ADDR
// if not enemy then
14852: LD_VAR 0 10
14856: NOT
14857: IFFALSE 14861
// exit ;
14859: GO 15262
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14861: LD_VAR 0 11
14865: PUSH
14866: LD_VAR 0 11
14870: PPUSH
14871: LD_VAR 0 10
14875: PPUSH
14876: CALL_OW 296
14880: PUSH
14881: LD_INT 13
14883: GREATER
14884: AND
14885: PUSH
14886: LD_VAR 0 1
14890: PPUSH
14891: LD_VAR 0 10
14895: PPUSH
14896: CALL_OW 296
14900: PUSH
14901: LD_INT 12
14903: GREATER
14904: OR
14905: IFFALSE 14909
// exit ;
14907: GO 15262
// missile := [ 1 ] ;
14909: LD_ADDR_VAR 0 14
14913: PUSH
14914: LD_INT 1
14916: PUSH
14917: EMPTY
14918: LIST
14919: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14920: LD_VAR 0 9
14924: PPUSH
14925: LD_VAR 0 12
14929: PPUSH
14930: CALL_OW 325
14934: IFFALSE 14963
// missile := Replace ( missile , missile + 1 , 2 ) ;
14936: LD_ADDR_VAR 0 14
14940: PUSH
14941: LD_VAR 0 14
14945: PPUSH
14946: LD_VAR 0 14
14950: PUSH
14951: LD_INT 1
14953: PLUS
14954: PPUSH
14955: LD_INT 2
14957: PPUSH
14958: CALL_OW 1
14962: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14963: LD_VAR 0 9
14967: PPUSH
14968: LD_VAR 0 13
14972: PPUSH
14973: CALL_OW 325
14977: PUSH
14978: LD_VAR 0 10
14982: PPUSH
14983: CALL_OW 255
14987: PPUSH
14988: LD_VAR 0 13
14992: PPUSH
14993: CALL_OW 325
14997: NOT
14998: AND
14999: IFFALSE 15028
// missile := Replace ( missile , missile + 1 , 3 ) ;
15001: LD_ADDR_VAR 0 14
15005: PUSH
15006: LD_VAR 0 14
15010: PPUSH
15011: LD_VAR 0 14
15015: PUSH
15016: LD_INT 1
15018: PLUS
15019: PPUSH
15020: LD_INT 3
15022: PPUSH
15023: CALL_OW 1
15027: ST_TO_ADDR
// if missile < 2 then
15028: LD_VAR 0 14
15032: PUSH
15033: LD_INT 2
15035: LESS
15036: IFFALSE 15040
// exit ;
15038: GO 15262
// x := GetX ( enemy ) ;
15040: LD_ADDR_VAR 0 4
15044: PUSH
15045: LD_VAR 0 10
15049: PPUSH
15050: CALL_OW 250
15054: ST_TO_ADDR
// y := GetY ( enemy ) ;
15055: LD_ADDR_VAR 0 5
15059: PUSH
15060: LD_VAR 0 10
15064: PPUSH
15065: CALL_OW 251
15069: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15070: LD_ADDR_VAR 0 6
15074: PUSH
15075: LD_VAR 0 4
15079: PUSH
15080: LD_INT 1
15082: NEG
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: CALL_OW 12
15091: PLUS
15092: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15093: LD_ADDR_VAR 0 7
15097: PUSH
15098: LD_VAR 0 5
15102: PUSH
15103: LD_INT 1
15105: NEG
15106: PPUSH
15107: LD_INT 1
15109: PPUSH
15110: CALL_OW 12
15114: PLUS
15115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15116: LD_VAR 0 6
15120: PPUSH
15121: LD_VAR 0 7
15125: PPUSH
15126: CALL_OW 488
15130: NOT
15131: IFFALSE 15153
// begin _x := x ;
15133: LD_ADDR_VAR 0 6
15137: PUSH
15138: LD_VAR 0 4
15142: ST_TO_ADDR
// _y := y ;
15143: LD_ADDR_VAR 0 7
15147: PUSH
15148: LD_VAR 0 5
15152: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15153: LD_ADDR_VAR 0 3
15157: PUSH
15158: LD_INT 1
15160: PPUSH
15161: LD_VAR 0 14
15165: PPUSH
15166: CALL_OW 12
15170: ST_TO_ADDR
// case i of 1 :
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 1
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15201
15184: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_VAR 0 10
15194: PPUSH
15195: CALL_OW 115
15199: GO 15262
15201: LD_INT 2
15203: DOUBLE
15204: EQUAL
15205: IFTRUE 15209
15207: GO 15231
15209: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15210: LD_VAR 0 1
15214: PPUSH
15215: LD_VAR 0 6
15219: PPUSH
15220: LD_VAR 0 7
15224: PPUSH
15225: CALL_OW 153
15229: GO 15262
15231: LD_INT 3
15233: DOUBLE
15234: EQUAL
15235: IFTRUE 15239
15237: GO 15261
15239: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15240: LD_VAR 0 1
15244: PPUSH
15245: LD_VAR 0 6
15249: PPUSH
15250: LD_VAR 0 7
15254: PPUSH
15255: CALL_OW 154
15259: GO 15262
15261: POP
// end ;
15262: LD_VAR 0 2
15266: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
// if not unit or not building then
15275: LD_VAR 0 1
15279: NOT
15280: PUSH
15281: LD_VAR 0 2
15285: NOT
15286: OR
15287: IFFALSE 15291
// exit ;
15289: GO 15449
// x := GetX ( building ) ;
15291: LD_ADDR_VAR 0 5
15295: PUSH
15296: LD_VAR 0 2
15300: PPUSH
15301: CALL_OW 250
15305: ST_TO_ADDR
// y := GetY ( building ) ;
15306: LD_ADDR_VAR 0 6
15310: PUSH
15311: LD_VAR 0 2
15315: PPUSH
15316: CALL_OW 251
15320: ST_TO_ADDR
// for i = 0 to 5 do
15321: LD_ADDR_VAR 0 4
15325: PUSH
15326: DOUBLE
15327: LD_INT 0
15329: DEC
15330: ST_TO_ADDR
15331: LD_INT 5
15333: PUSH
15334: FOR_TO
15335: IFFALSE 15447
// begin _x := ShiftX ( x , i , 3 ) ;
15337: LD_ADDR_VAR 0 7
15341: PUSH
15342: LD_VAR 0 5
15346: PPUSH
15347: LD_VAR 0 4
15351: PPUSH
15352: LD_INT 3
15354: PPUSH
15355: CALL_OW 272
15359: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15360: LD_ADDR_VAR 0 8
15364: PUSH
15365: LD_VAR 0 6
15369: PPUSH
15370: LD_VAR 0 4
15374: PPUSH
15375: LD_INT 3
15377: PPUSH
15378: CALL_OW 273
15382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15383: LD_VAR 0 7
15387: PPUSH
15388: LD_VAR 0 8
15392: PPUSH
15393: CALL_OW 488
15397: NOT
15398: IFFALSE 15402
// continue ;
15400: GO 15334
// if HexInfo ( _x , _y ) = 0 then
15402: LD_VAR 0 7
15406: PPUSH
15407: LD_VAR 0 8
15411: PPUSH
15412: CALL_OW 428
15416: PUSH
15417: LD_INT 0
15419: EQUAL
15420: IFFALSE 15445
// begin ComMoveXY ( unit , _x , _y ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_VAR 0 7
15431: PPUSH
15432: LD_VAR 0 8
15436: PPUSH
15437: CALL_OW 111
// exit ;
15441: POP
15442: POP
15443: GO 15449
// end ; end ;
15445: GO 15334
15447: POP
15448: POP
// end ;
15449: LD_VAR 0 3
15453: RET
// export function ScanBase ( side , base_area ) ; begin
15454: LD_INT 0
15456: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15457: LD_ADDR_VAR 0 3
15461: PUSH
15462: LD_VAR 0 2
15466: PPUSH
15467: LD_INT 81
15469: PUSH
15470: LD_VAR 0 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 70
15483: ST_TO_ADDR
// end ;
15484: LD_VAR 0 3
15488: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
// result := false ;
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: LD_INT 0
15502: ST_TO_ADDR
// side := GetSide ( unit ) ;
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 255
15517: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 248
15532: ST_TO_ADDR
// case nat of 1 :
15533: LD_VAR 0 4
15537: PUSH
15538: LD_INT 1
15540: DOUBLE
15541: EQUAL
15542: IFTRUE 15546
15544: GO 15557
15546: POP
// tech := tech_lassight ; 2 :
15547: LD_ADDR_VAR 0 5
15551: PUSH
15552: LD_INT 12
15554: ST_TO_ADDR
15555: GO 15596
15557: LD_INT 2
15559: DOUBLE
15560: EQUAL
15561: IFTRUE 15565
15563: GO 15576
15565: POP
// tech := tech_mortar ; 3 :
15566: LD_ADDR_VAR 0 5
15570: PUSH
15571: LD_INT 41
15573: ST_TO_ADDR
15574: GO 15596
15576: LD_INT 3
15578: DOUBLE
15579: EQUAL
15580: IFTRUE 15584
15582: GO 15595
15584: POP
// tech := tech_bazooka ; end ;
15585: LD_ADDR_VAR 0 5
15589: PUSH
15590: LD_INT 44
15592: ST_TO_ADDR
15593: GO 15596
15595: POP
// if Researched ( side , tech ) then
15596: LD_VAR 0 3
15600: PPUSH
15601: LD_VAR 0 5
15605: PPUSH
15606: CALL_OW 325
15610: IFFALSE 15637
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15612: LD_ADDR_VAR 0 2
15616: PUSH
15617: LD_INT 5
15619: PUSH
15620: LD_INT 8
15622: PUSH
15623: LD_INT 9
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: LD_VAR 0 4
15635: ARRAY
15636: ST_TO_ADDR
// end ;
15637: LD_VAR 0 2
15641: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
15646: PPUSH
// if not mines then
15647: LD_VAR 0 2
15651: NOT
15652: IFFALSE 15656
// exit ;
15654: GO 15800
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15656: LD_ADDR_VAR 0 5
15660: PUSH
15661: LD_INT 81
15663: PUSH
15664: LD_VAR 0 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 3
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// for i in mines do
15699: LD_ADDR_VAR 0 4
15703: PUSH
15704: LD_VAR 0 2
15708: PUSH
15709: FOR_IN
15710: IFFALSE 15798
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15712: LD_VAR 0 4
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: LD_VAR 0 4
15725: PUSH
15726: LD_INT 2
15728: ARRAY
15729: PPUSH
15730: CALL_OW 458
15734: NOT
15735: IFFALSE 15739
// continue ;
15737: GO 15709
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15739: LD_VAR 0 4
15743: PUSH
15744: LD_INT 1
15746: ARRAY
15747: PPUSH
15748: LD_VAR 0 4
15752: PUSH
15753: LD_INT 2
15755: ARRAY
15756: PPUSH
15757: CALL_OW 428
15761: PUSH
15762: LD_VAR 0 5
15766: IN
15767: IFFALSE 15796
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15769: LD_VAR 0 4
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: LD_VAR 0 4
15782: PUSH
15783: LD_INT 2
15785: ARRAY
15786: PPUSH
15787: LD_VAR 0 1
15791: PPUSH
15792: CALL_OW 456
// end ;
15796: GO 15709
15798: POP
15799: POP
// end ;
15800: LD_VAR 0 3
15804: RET
// export function Count ( array ) ; begin
15805: LD_INT 0
15807: PPUSH
// result := array + 0 ;
15808: LD_ADDR_VAR 0 2
15812: PUSH
15813: LD_VAR 0 1
15817: PUSH
15818: LD_INT 0
15820: PLUS
15821: ST_TO_ADDR
// end ;
15822: LD_VAR 0 2
15826: RET
// export function IsEmpty ( building ) ; begin
15827: LD_INT 0
15829: PPUSH
// if not building then
15830: LD_VAR 0 1
15834: NOT
15835: IFFALSE 15839
// exit ;
15837: GO 15882
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15839: LD_ADDR_VAR 0 2
15843: PUSH
15844: LD_VAR 0 1
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: CALL_OW 255
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 58
15868: PUSH
15869: EMPTY
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: IN
15881: ST_TO_ADDR
// end ;
15882: LD_VAR 0 2
15886: RET
// export function IsNotFull ( building ) ; var places ; begin
15887: LD_INT 0
15889: PPUSH
15890: PPUSH
// if not building then
15891: LD_VAR 0 1
15895: NOT
15896: IFFALSE 15900
// exit ;
15898: GO 15928
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
15900: LD_ADDR_VAR 0 2
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 62
15915: PUSH
15916: EMPTY
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 72
15927: ST_TO_ADDR
// end ;
15928: LD_VAR 0 2
15932: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15933: LD_INT 0
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
// tmp := [ ] ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: EMPTY
15945: ST_TO_ADDR
// list := [ ] ;
15946: LD_ADDR_VAR 0 5
15950: PUSH
15951: EMPTY
15952: ST_TO_ADDR
// for i = 16 to 25 do
15953: LD_ADDR_VAR 0 4
15957: PUSH
15958: DOUBLE
15959: LD_INT 16
15961: DEC
15962: ST_TO_ADDR
15963: LD_INT 25
15965: PUSH
15966: FOR_TO
15967: IFFALSE 16040
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: LD_VAR 0 3
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 255
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 91
15998: PUSH
15999: LD_VAR 0 1
16003: PUSH
16004: LD_INT 6
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 30
16014: PUSH
16015: LD_VAR 0 4
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: ADD
16037: ST_TO_ADDR
16038: GO 15966
16040: POP
16041: POP
// for i = 1 to tmp do
16042: LD_ADDR_VAR 0 4
16046: PUSH
16047: DOUBLE
16048: LD_INT 1
16050: DEC
16051: ST_TO_ADDR
16052: LD_VAR 0 3
16056: PUSH
16057: FOR_TO
16058: IFFALSE 16146
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16060: LD_ADDR_VAR 0 5
16064: PUSH
16065: LD_VAR 0 5
16069: PUSH
16070: LD_VAR 0 3
16074: PUSH
16075: LD_VAR 0 4
16079: ARRAY
16080: PPUSH
16081: CALL_OW 266
16085: PUSH
16086: LD_VAR 0 3
16090: PUSH
16091: LD_VAR 0 4
16095: ARRAY
16096: PPUSH
16097: CALL_OW 250
16101: PUSH
16102: LD_VAR 0 3
16106: PUSH
16107: LD_VAR 0 4
16111: ARRAY
16112: PPUSH
16113: CALL_OW 251
16117: PUSH
16118: LD_VAR 0 3
16122: PUSH
16123: LD_VAR 0 4
16127: ARRAY
16128: PPUSH
16129: CALL_OW 254
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: ADD
16143: ST_TO_ADDR
16144: GO 16057
16146: POP
16147: POP
// result := list ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 5
16157: ST_TO_ADDR
// end ;
16158: LD_VAR 0 2
16162: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16163: LD_INT 0
16165: PPUSH
16166: PPUSH
16167: PPUSH
16168: PPUSH
16169: PPUSH
16170: PPUSH
16171: PPUSH
// if not factory then
16172: LD_VAR 0 1
16176: NOT
16177: IFFALSE 16181
// exit ;
16179: GO 16774
// if control = control_apeman then
16181: LD_VAR 0 4
16185: PUSH
16186: LD_INT 5
16188: EQUAL
16189: IFFALSE 16298
// begin tmp := UnitsInside ( factory ) ;
16191: LD_ADDR_VAR 0 8
16195: PUSH
16196: LD_VAR 0 1
16200: PPUSH
16201: CALL_OW 313
16205: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16206: LD_VAR 0 8
16210: PPUSH
16211: LD_INT 25
16213: PUSH
16214: LD_INT 12
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 72
16225: NOT
16226: IFFALSE 16236
// control := control_manual ;
16228: LD_ADDR_VAR 0 4
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16236: LD_ADDR_VAR 0 8
16240: PUSH
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL 15933 0 1
16250: ST_TO_ADDR
// if tmp then
16251: LD_VAR 0 8
16255: IFFALSE 16298
// begin for i in tmp do
16257: LD_ADDR_VAR 0 7
16261: PUSH
16262: LD_VAR 0 8
16266: PUSH
16267: FOR_IN
16268: IFFALSE 16296
// if i [ 1 ] = b_ext_radio then
16270: LD_VAR 0 7
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PUSH
16279: LD_INT 22
16281: EQUAL
16282: IFFALSE 16294
// begin control := control_remote ;
16284: LD_ADDR_VAR 0 4
16288: PUSH
16289: LD_INT 2
16291: ST_TO_ADDR
// break ;
16292: GO 16296
// end ;
16294: GO 16267
16296: POP
16297: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_VAR 0 2
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_VAR 0 4
16317: PPUSH
16318: LD_VAR 0 5
16322: PPUSH
16323: CALL_OW 448
16327: IFFALSE 16362
// begin result := [ chassis , engine , control , weapon ] ;
16329: LD_ADDR_VAR 0 6
16333: PUSH
16334: LD_VAR 0 2
16338: PUSH
16339: LD_VAR 0 3
16343: PUSH
16344: LD_VAR 0 4
16348: PUSH
16349: LD_VAR 0 5
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
// exit ;
16360: GO 16774
// end ; _chassis := AvailableChassisList ( factory ) ;
16362: LD_ADDR_VAR 0 9
16366: PUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 475
16376: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16377: LD_ADDR_VAR 0 11
16381: PUSH
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 476
16391: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16392: LD_ADDR_VAR 0 12
16396: PUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 477
16406: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16407: LD_ADDR_VAR 0 10
16411: PUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 478
16421: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16422: LD_VAR 0 9
16426: NOT
16427: PUSH
16428: LD_VAR 0 11
16432: NOT
16433: OR
16434: PUSH
16435: LD_VAR 0 12
16439: NOT
16440: OR
16441: PUSH
16442: LD_VAR 0 10
16446: NOT
16447: OR
16448: IFFALSE 16483
// begin result := [ chassis , engine , control , weapon ] ;
16450: LD_ADDR_VAR 0 6
16454: PUSH
16455: LD_VAR 0 2
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_VAR 0 4
16469: PUSH
16470: LD_VAR 0 5
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: ST_TO_ADDR
// exit ;
16481: GO 16774
// end ; if not chassis in _chassis then
16483: LD_VAR 0 2
16487: PUSH
16488: LD_VAR 0 9
16492: IN
16493: NOT
16494: IFFALSE 16520
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16496: LD_ADDR_VAR 0 2
16500: PUSH
16501: LD_VAR 0 9
16505: PUSH
16506: LD_INT 1
16508: PPUSH
16509: LD_VAR 0 9
16513: PPUSH
16514: CALL_OW 12
16518: ARRAY
16519: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16520: LD_VAR 0 2
16524: PPUSH
16525: LD_VAR 0 3
16529: PPUSH
16530: CALL 16779 0 2
16534: NOT
16535: IFFALSE 16594
// repeat engine := _engine [ 1 ] ;
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_VAR 0 11
16546: PUSH
16547: LD_INT 1
16549: ARRAY
16550: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16551: LD_ADDR_VAR 0 11
16555: PUSH
16556: LD_VAR 0 11
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 3
16568: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16569: LD_VAR 0 2
16573: PPUSH
16574: LD_VAR 0 3
16578: PPUSH
16579: CALL 16779 0 2
16583: PUSH
16584: LD_VAR 0 11
16588: PUSH
16589: EMPTY
16590: EQUAL
16591: OR
16592: IFFALSE 16537
// if not control in _control then
16594: LD_VAR 0 4
16598: PUSH
16599: LD_VAR 0 12
16603: IN
16604: NOT
16605: IFFALSE 16631
// control := _control [ rand ( 1 , _control ) ] ;
16607: LD_ADDR_VAR 0 4
16611: PUSH
16612: LD_VAR 0 12
16616: PUSH
16617: LD_INT 1
16619: PPUSH
16620: LD_VAR 0 12
16624: PPUSH
16625: CALL_OW 12
16629: ARRAY
16630: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16631: LD_VAR 0 2
16635: PPUSH
16636: LD_VAR 0 5
16640: PPUSH
16641: CALL 16999 0 2
16645: NOT
16646: IFFALSE 16705
// repeat weapon := _weapon [ 1 ] ;
16648: LD_ADDR_VAR 0 5
16652: PUSH
16653: LD_VAR 0 10
16657: PUSH
16658: LD_INT 1
16660: ARRAY
16661: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16662: LD_ADDR_VAR 0 10
16666: PUSH
16667: LD_VAR 0 10
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 3
16679: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16680: LD_VAR 0 2
16684: PPUSH
16685: LD_VAR 0 5
16689: PPUSH
16690: CALL 16999 0 2
16694: PUSH
16695: LD_VAR 0 10
16699: PUSH
16700: EMPTY
16701: EQUAL
16702: OR
16703: IFFALSE 16648
// result := [ ] ;
16705: LD_ADDR_VAR 0 6
16709: PUSH
16710: EMPTY
16711: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_VAR 0 2
16721: PPUSH
16722: LD_VAR 0 3
16726: PPUSH
16727: LD_VAR 0 4
16731: PPUSH
16732: LD_VAR 0 5
16736: PPUSH
16737: CALL_OW 448
16741: IFFALSE 16774
// result := [ chassis , engine , control , weapon ] ;
16743: LD_ADDR_VAR 0 6
16747: PUSH
16748: LD_VAR 0 2
16752: PUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 4
16762: PUSH
16763: LD_VAR 0 5
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: ST_TO_ADDR
// end ;
16774: LD_VAR 0 6
16778: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16779: LD_INT 0
16781: PPUSH
// if not chassis or not engine then
16782: LD_VAR 0 1
16786: NOT
16787: PUSH
16788: LD_VAR 0 2
16792: NOT
16793: OR
16794: IFFALSE 16798
// exit ;
16796: GO 16994
// case engine of engine_solar :
16798: LD_VAR 0 2
16802: PUSH
16803: LD_INT 2
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16849
16811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_INT 11
16819: PUSH
16820: LD_INT 12
16822: PUSH
16823: LD_INT 13
16825: PUSH
16826: LD_INT 14
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: LD_INT 3
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: ST_TO_ADDR
16847: GO 16978
16849: LD_INT 1
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16919
16857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16858: LD_ADDR_VAR 0 3
16862: PUSH
16863: LD_INT 11
16865: PUSH
16866: LD_INT 12
16868: PUSH
16869: LD_INT 13
16871: PUSH
16872: LD_INT 14
16874: PUSH
16875: LD_INT 1
16877: PUSH
16878: LD_INT 2
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 4
16886: PUSH
16887: LD_INT 5
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 22
16898: PUSH
16899: LD_INT 24
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: ST_TO_ADDR
16917: GO 16978
16919: LD_INT 3
16921: DOUBLE
16922: EQUAL
16923: IFTRUE 16927
16925: GO 16977
16927: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16928: LD_ADDR_VAR 0 3
16932: PUSH
16933: LD_INT 13
16935: PUSH
16936: LD_INT 14
16938: PUSH
16939: LD_INT 2
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: LD_INT 4
16947: PUSH
16948: LD_INT 5
16950: PUSH
16951: LD_INT 21
16953: PUSH
16954: LD_INT 22
16956: PUSH
16957: LD_INT 23
16959: PUSH
16960: LD_INT 24
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: ST_TO_ADDR
16975: GO 16978
16977: POP
// result := ( chassis in result ) ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_VAR 0 1
16987: PUSH
16988: LD_VAR 0 3
16992: IN
16993: ST_TO_ADDR
// end ;
16994: LD_VAR 0 3
16998: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16999: LD_INT 0
17001: PPUSH
// if not chassis or not weapon then
17002: LD_VAR 0 1
17006: NOT
17007: PUSH
17008: LD_VAR 0 2
17012: NOT
17013: OR
17014: IFFALSE 17018
// exit ;
17016: GO 18078
// case weapon of us_machine_gun :
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 2
17025: DOUBLE
17026: EQUAL
17027: IFTRUE 17031
17029: GO 17061
17031: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: LD_INT 4
17048: PUSH
17049: LD_INT 5
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
17059: GO 18062
17061: LD_INT 3
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17099
17069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 1
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: LD_INT 3
17083: PUSH
17084: LD_INT 4
17086: PUSH
17087: LD_INT 5
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: ST_TO_ADDR
17097: GO 18062
17099: LD_INT 11
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17137
17107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17108: LD_ADDR_VAR 0 3
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: LD_INT 2
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: LD_INT 4
17124: PUSH
17125: LD_INT 5
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
17135: GO 18062
17137: LD_INT 4
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17171
17145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17146: LD_ADDR_VAR 0 3
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 3
17156: PUSH
17157: LD_INT 4
17159: PUSH
17160: LD_INT 5
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: ST_TO_ADDR
17169: GO 18062
17171: LD_INT 5
17173: DOUBLE
17174: EQUAL
17175: IFTRUE 17179
17177: GO 17205
17179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17180: LD_ADDR_VAR 0 3
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: LD_INT 4
17193: PUSH
17194: LD_INT 5
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: ST_TO_ADDR
17203: GO 18062
17205: LD_INT 9
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17239
17213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: LD_INT 3
17224: PUSH
17225: LD_INT 4
17227: PUSH
17228: LD_INT 5
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: ST_TO_ADDR
17237: GO 18062
17239: LD_INT 7
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17273
17247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17248: LD_ADDR_VAR 0 3
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: LD_INT 3
17258: PUSH
17259: LD_INT 4
17261: PUSH
17262: LD_INT 5
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: ST_TO_ADDR
17271: GO 18062
17273: LD_INT 12
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17307
17281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17282: LD_ADDR_VAR 0 3
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: LD_INT 4
17295: PUSH
17296: LD_INT 5
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: ST_TO_ADDR
17305: GO 18062
17307: LD_INT 13
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17341
17315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 3
17326: PUSH
17327: LD_INT 4
17329: PUSH
17330: LD_INT 5
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: ST_TO_ADDR
17339: GO 18062
17341: LD_INT 14
17343: DOUBLE
17344: EQUAL
17345: IFTRUE 17349
17347: GO 17367
17349: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17350: LD_ADDR_VAR 0 3
17354: PUSH
17355: LD_INT 4
17357: PUSH
17358: LD_INT 5
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: ST_TO_ADDR
17365: GO 18062
17367: LD_INT 6
17369: DOUBLE
17370: EQUAL
17371: IFTRUE 17375
17373: GO 17393
17375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_INT 4
17383: PUSH
17384: LD_INT 5
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: ST_TO_ADDR
17391: GO 18062
17393: LD_INT 10
17395: DOUBLE
17396: EQUAL
17397: IFTRUE 17401
17399: GO 17419
17401: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17402: LD_ADDR_VAR 0 3
17406: PUSH
17407: LD_INT 4
17409: PUSH
17410: LD_INT 5
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: ST_TO_ADDR
17417: GO 18062
17419: LD_INT 22
17421: DOUBLE
17422: EQUAL
17423: IFTRUE 17427
17425: GO 17453
17427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17428: LD_ADDR_VAR 0 3
17432: PUSH
17433: LD_INT 11
17435: PUSH
17436: LD_INT 12
17438: PUSH
17439: LD_INT 13
17441: PUSH
17442: LD_INT 14
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: ST_TO_ADDR
17451: GO 18062
17453: LD_INT 23
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17487
17461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: LD_INT 11
17469: PUSH
17470: LD_INT 12
17472: PUSH
17473: LD_INT 13
17475: PUSH
17476: LD_INT 14
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
17485: GO 18062
17487: LD_INT 24
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17521
17495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17496: LD_ADDR_VAR 0 3
17500: PUSH
17501: LD_INT 11
17503: PUSH
17504: LD_INT 12
17506: PUSH
17507: LD_INT 13
17509: PUSH
17510: LD_INT 14
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: ST_TO_ADDR
17519: GO 18062
17521: LD_INT 30
17523: DOUBLE
17524: EQUAL
17525: IFTRUE 17529
17527: GO 17555
17529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17530: LD_ADDR_VAR 0 3
17534: PUSH
17535: LD_INT 11
17537: PUSH
17538: LD_INT 12
17540: PUSH
17541: LD_INT 13
17543: PUSH
17544: LD_INT 14
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: ST_TO_ADDR
17553: GO 18062
17555: LD_INT 25
17557: DOUBLE
17558: EQUAL
17559: IFTRUE 17563
17561: GO 17581
17563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17564: LD_ADDR_VAR 0 3
17568: PUSH
17569: LD_INT 13
17571: PUSH
17572: LD_INT 14
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: ST_TO_ADDR
17579: GO 18062
17581: LD_INT 27
17583: DOUBLE
17584: EQUAL
17585: IFTRUE 17589
17587: GO 17607
17589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17590: LD_ADDR_VAR 0 3
17594: PUSH
17595: LD_INT 13
17597: PUSH
17598: LD_INT 14
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: ST_TO_ADDR
17605: GO 18062
17607: LD_INT 92
17609: DOUBLE
17610: EQUAL
17611: IFTRUE 17615
17613: GO 17641
17615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17616: LD_ADDR_VAR 0 3
17620: PUSH
17621: LD_INT 11
17623: PUSH
17624: LD_INT 12
17626: PUSH
17627: LD_INT 13
17629: PUSH
17630: LD_INT 14
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: ST_TO_ADDR
17639: GO 18062
17641: LD_INT 28
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 17667
17649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_INT 13
17657: PUSH
17658: LD_INT 14
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: ST_TO_ADDR
17665: GO 18062
17667: LD_INT 29
17669: DOUBLE
17670: EQUAL
17671: IFTRUE 17675
17673: GO 17693
17675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17676: LD_ADDR_VAR 0 3
17680: PUSH
17681: LD_INT 13
17683: PUSH
17684: LD_INT 14
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: ST_TO_ADDR
17691: GO 18062
17693: LD_INT 31
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17719
17701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_INT 13
17709: PUSH
17710: LD_INT 14
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: ST_TO_ADDR
17717: GO 18062
17719: LD_INT 26
17721: DOUBLE
17722: EQUAL
17723: IFTRUE 17727
17725: GO 17745
17727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17728: LD_ADDR_VAR 0 3
17732: PUSH
17733: LD_INT 13
17735: PUSH
17736: LD_INT 14
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: ST_TO_ADDR
17743: GO 18062
17745: LD_INT 42
17747: DOUBLE
17748: EQUAL
17749: IFTRUE 17753
17751: GO 17779
17753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_INT 21
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_INT 23
17767: PUSH
17768: LD_INT 24
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: ST_TO_ADDR
17777: GO 18062
17779: LD_INT 43
17781: DOUBLE
17782: EQUAL
17783: IFTRUE 17787
17785: GO 17813
17787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17788: LD_ADDR_VAR 0 3
17792: PUSH
17793: LD_INT 21
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_INT 23
17801: PUSH
17802: LD_INT 24
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: ST_TO_ADDR
17811: GO 18062
17813: LD_INT 44
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17847
17821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17822: LD_ADDR_VAR 0 3
17826: PUSH
17827: LD_INT 21
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_INT 23
17835: PUSH
17836: LD_INT 24
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
17845: GO 18062
17847: LD_INT 45
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17881
17855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17856: LD_ADDR_VAR 0 3
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_INT 23
17869: PUSH
17870: LD_INT 24
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
17879: GO 18062
17881: LD_INT 49
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17915
17889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17890: LD_ADDR_VAR 0 3
17894: PUSH
17895: LD_INT 21
17897: PUSH
17898: LD_INT 22
17900: PUSH
17901: LD_INT 23
17903: PUSH
17904: LD_INT 24
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: ST_TO_ADDR
17913: GO 18062
17915: LD_INT 51
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 17949
17923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17924: LD_ADDR_VAR 0 3
17928: PUSH
17929: LD_INT 21
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_INT 23
17937: PUSH
17938: LD_INT 24
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: ST_TO_ADDR
17947: GO 18062
17949: LD_INT 52
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 17983
17957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17958: LD_ADDR_VAR 0 3
17962: PUSH
17963: LD_INT 21
17965: PUSH
17966: LD_INT 22
17968: PUSH
17969: LD_INT 23
17971: PUSH
17972: LD_INT 24
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: ST_TO_ADDR
17981: GO 18062
17983: LD_INT 53
17985: DOUBLE
17986: EQUAL
17987: IFTRUE 17991
17989: GO 18009
17991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17992: LD_ADDR_VAR 0 3
17996: PUSH
17997: LD_INT 23
17999: PUSH
18000: LD_INT 24
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
18007: GO 18062
18009: LD_INT 46
18011: DOUBLE
18012: EQUAL
18013: IFTRUE 18017
18015: GO 18035
18017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18018: LD_ADDR_VAR 0 3
18022: PUSH
18023: LD_INT 23
18025: PUSH
18026: LD_INT 24
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: ST_TO_ADDR
18033: GO 18062
18035: LD_INT 47
18037: DOUBLE
18038: EQUAL
18039: IFTRUE 18043
18041: GO 18061
18043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18044: LD_ADDR_VAR 0 3
18048: PUSH
18049: LD_INT 23
18051: PUSH
18052: LD_INT 24
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: ST_TO_ADDR
18059: GO 18062
18061: POP
// result := ( chassis in result ) ;
18062: LD_ADDR_VAR 0 3
18066: PUSH
18067: LD_VAR 0 1
18071: PUSH
18072: LD_VAR 0 3
18076: IN
18077: ST_TO_ADDR
// end ;
18078: LD_VAR 0 3
18082: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18083: LD_INT 0
18085: PPUSH
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
// result := array ;
18092: LD_ADDR_VAR 0 5
18096: PUSH
18097: LD_VAR 0 1
18101: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18102: LD_VAR 0 1
18106: NOT
18107: PUSH
18108: LD_VAR 0 2
18112: NOT
18113: OR
18114: PUSH
18115: LD_VAR 0 3
18119: NOT
18120: OR
18121: PUSH
18122: LD_VAR 0 2
18126: PUSH
18127: LD_VAR 0 1
18131: GREATER
18132: OR
18133: PUSH
18134: LD_VAR 0 3
18138: PUSH
18139: LD_VAR 0 1
18143: GREATER
18144: OR
18145: IFFALSE 18149
// exit ;
18147: GO 18445
// if direction then
18149: LD_VAR 0 4
18153: IFFALSE 18217
// begin d := 1 ;
18155: LD_ADDR_VAR 0 9
18159: PUSH
18160: LD_INT 1
18162: ST_TO_ADDR
// if i_from > i_to then
18163: LD_VAR 0 2
18167: PUSH
18168: LD_VAR 0 3
18172: GREATER
18173: IFFALSE 18199
// length := ( array - i_from ) + i_to else
18175: LD_ADDR_VAR 0 11
18179: PUSH
18180: LD_VAR 0 1
18184: PUSH
18185: LD_VAR 0 2
18189: MINUS
18190: PUSH
18191: LD_VAR 0 3
18195: PLUS
18196: ST_TO_ADDR
18197: GO 18215
// length := i_to - i_from ;
18199: LD_ADDR_VAR 0 11
18203: PUSH
18204: LD_VAR 0 3
18208: PUSH
18209: LD_VAR 0 2
18213: MINUS
18214: ST_TO_ADDR
// end else
18215: GO 18278
// begin d := - 1 ;
18217: LD_ADDR_VAR 0 9
18221: PUSH
18222: LD_INT 1
18224: NEG
18225: ST_TO_ADDR
// if i_from > i_to then
18226: LD_VAR 0 2
18230: PUSH
18231: LD_VAR 0 3
18235: GREATER
18236: IFFALSE 18256
// length := i_from - i_to else
18238: LD_ADDR_VAR 0 11
18242: PUSH
18243: LD_VAR 0 2
18247: PUSH
18248: LD_VAR 0 3
18252: MINUS
18253: ST_TO_ADDR
18254: GO 18278
// length := ( array - i_to ) + i_from ;
18256: LD_ADDR_VAR 0 11
18260: PUSH
18261: LD_VAR 0 1
18265: PUSH
18266: LD_VAR 0 3
18270: MINUS
18271: PUSH
18272: LD_VAR 0 2
18276: PLUS
18277: ST_TO_ADDR
// end ; if not length then
18278: LD_VAR 0 11
18282: NOT
18283: IFFALSE 18287
// exit ;
18285: GO 18445
// tmp := array ;
18287: LD_ADDR_VAR 0 10
18291: PUSH
18292: LD_VAR 0 1
18296: ST_TO_ADDR
// for i = 1 to length do
18297: LD_ADDR_VAR 0 6
18301: PUSH
18302: DOUBLE
18303: LD_INT 1
18305: DEC
18306: ST_TO_ADDR
18307: LD_VAR 0 11
18311: PUSH
18312: FOR_TO
18313: IFFALSE 18433
// begin for j = 1 to array do
18315: LD_ADDR_VAR 0 7
18319: PUSH
18320: DOUBLE
18321: LD_INT 1
18323: DEC
18324: ST_TO_ADDR
18325: LD_VAR 0 1
18329: PUSH
18330: FOR_TO
18331: IFFALSE 18419
// begin k := j + d ;
18333: LD_ADDR_VAR 0 8
18337: PUSH
18338: LD_VAR 0 7
18342: PUSH
18343: LD_VAR 0 9
18347: PLUS
18348: ST_TO_ADDR
// if k > array then
18349: LD_VAR 0 8
18353: PUSH
18354: LD_VAR 0 1
18358: GREATER
18359: IFFALSE 18369
// k := 1 ;
18361: LD_ADDR_VAR 0 8
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// if not k then
18369: LD_VAR 0 8
18373: NOT
18374: IFFALSE 18386
// k := array ;
18376: LD_ADDR_VAR 0 8
18380: PUSH
18381: LD_VAR 0 1
18385: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18386: LD_ADDR_VAR 0 10
18390: PUSH
18391: LD_VAR 0 10
18395: PPUSH
18396: LD_VAR 0 8
18400: PPUSH
18401: LD_VAR 0 1
18405: PUSH
18406: LD_VAR 0 7
18410: ARRAY
18411: PPUSH
18412: CALL_OW 1
18416: ST_TO_ADDR
// end ;
18417: GO 18330
18419: POP
18420: POP
// array := tmp ;
18421: LD_ADDR_VAR 0 1
18425: PUSH
18426: LD_VAR 0 10
18430: ST_TO_ADDR
// end ;
18431: GO 18312
18433: POP
18434: POP
// result := array ;
18435: LD_ADDR_VAR 0 5
18439: PUSH
18440: LD_VAR 0 1
18444: ST_TO_ADDR
// end ;
18445: LD_VAR 0 5
18449: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18450: LD_INT 0
18452: PPUSH
18453: PPUSH
// result := 0 ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_INT 0
18461: ST_TO_ADDR
// if not array or not value in array then
18462: LD_VAR 0 1
18466: NOT
18467: PUSH
18468: LD_VAR 0 2
18472: PUSH
18473: LD_VAR 0 1
18477: IN
18478: NOT
18479: OR
18480: IFFALSE 18484
// exit ;
18482: GO 18538
// for i = 1 to array do
18484: LD_ADDR_VAR 0 4
18488: PUSH
18489: DOUBLE
18490: LD_INT 1
18492: DEC
18493: ST_TO_ADDR
18494: LD_VAR 0 1
18498: PUSH
18499: FOR_TO
18500: IFFALSE 18536
// if value = array [ i ] then
18502: LD_VAR 0 2
18506: PUSH
18507: LD_VAR 0 1
18511: PUSH
18512: LD_VAR 0 4
18516: ARRAY
18517: EQUAL
18518: IFFALSE 18534
// begin result := i ;
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_VAR 0 4
18529: ST_TO_ADDR
// exit ;
18530: POP
18531: POP
18532: GO 18538
// end ;
18534: GO 18499
18536: POP
18537: POP
// end ;
18538: LD_VAR 0 3
18542: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18543: LD_INT 0
18545: PPUSH
// vc_chassis := chassis ;
18546: LD_ADDR_OWVAR 37
18550: PUSH
18551: LD_VAR 0 1
18555: ST_TO_ADDR
// vc_engine := engine ;
18556: LD_ADDR_OWVAR 39
18560: PUSH
18561: LD_VAR 0 2
18565: ST_TO_ADDR
// vc_control := control ;
18566: LD_ADDR_OWVAR 38
18570: PUSH
18571: LD_VAR 0 3
18575: ST_TO_ADDR
// vc_weapon := weapon ;
18576: LD_ADDR_OWVAR 40
18580: PUSH
18581: LD_VAR 0 4
18585: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18586: LD_ADDR_OWVAR 41
18590: PUSH
18591: LD_VAR 0 5
18595: ST_TO_ADDR
// end ;
18596: LD_VAR 0 6
18600: RET
// export function WantPlant ( unit ) ; var task ; begin
18601: LD_INT 0
18603: PPUSH
18604: PPUSH
// result := false ;
18605: LD_ADDR_VAR 0 2
18609: PUSH
18610: LD_INT 0
18612: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18613: LD_ADDR_VAR 0 3
18617: PUSH
18618: LD_VAR 0 1
18622: PPUSH
18623: CALL_OW 437
18627: ST_TO_ADDR
// if task then
18628: LD_VAR 0 3
18632: IFFALSE 18660
// if task [ 1 ] [ 1 ] = p then
18634: LD_VAR 0 3
18638: PUSH
18639: LD_INT 1
18641: ARRAY
18642: PUSH
18643: LD_INT 1
18645: ARRAY
18646: PUSH
18647: LD_STRING p
18649: EQUAL
18650: IFFALSE 18660
// result := true ;
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 1
18659: ST_TO_ADDR
// end ;
18660: LD_VAR 0 2
18664: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
18669: PPUSH
18670: PPUSH
// if pos < 1 then
18671: LD_VAR 0 2
18675: PUSH
18676: LD_INT 1
18678: LESS
18679: IFFALSE 18683
// exit ;
18681: GO 18986
// if pos = 1 then
18683: LD_VAR 0 2
18687: PUSH
18688: LD_INT 1
18690: EQUAL
18691: IFFALSE 18724
// result := Replace ( arr , pos [ 1 ] , value ) else
18693: LD_ADDR_VAR 0 4
18697: PUSH
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_VAR 0 2
18707: PUSH
18708: LD_INT 1
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 1
18721: ST_TO_ADDR
18722: GO 18986
// begin tmp := arr ;
18724: LD_ADDR_VAR 0 6
18728: PUSH
18729: LD_VAR 0 1
18733: ST_TO_ADDR
// s_arr := [ tmp ] ;
18734: LD_ADDR_VAR 0 7
18738: PUSH
18739: LD_VAR 0 6
18743: PUSH
18744: EMPTY
18745: LIST
18746: ST_TO_ADDR
// for i = 1 to pos - 1 do
18747: LD_ADDR_VAR 0 5
18751: PUSH
18752: DOUBLE
18753: LD_INT 1
18755: DEC
18756: ST_TO_ADDR
18757: LD_VAR 0 2
18761: PUSH
18762: LD_INT 1
18764: MINUS
18765: PUSH
18766: FOR_TO
18767: IFFALSE 18812
// begin tmp := tmp [ pos [ i ] ] ;
18769: LD_ADDR_VAR 0 6
18773: PUSH
18774: LD_VAR 0 6
18778: PUSH
18779: LD_VAR 0 2
18783: PUSH
18784: LD_VAR 0 5
18788: ARRAY
18789: ARRAY
18790: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18791: LD_ADDR_VAR 0 7
18795: PUSH
18796: LD_VAR 0 7
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: EMPTY
18807: LIST
18808: ADD
18809: ST_TO_ADDR
// end ;
18810: GO 18766
18812: POP
18813: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18814: LD_ADDR_VAR 0 6
18818: PUSH
18819: LD_VAR 0 6
18823: PPUSH
18824: LD_VAR 0 2
18828: PUSH
18829: LD_VAR 0 2
18833: ARRAY
18834: PPUSH
18835: LD_VAR 0 3
18839: PPUSH
18840: CALL_OW 1
18844: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18845: LD_ADDR_VAR 0 7
18849: PUSH
18850: LD_VAR 0 7
18854: PPUSH
18855: LD_VAR 0 7
18859: PPUSH
18860: LD_VAR 0 6
18864: PPUSH
18865: CALL_OW 1
18869: ST_TO_ADDR
// for i = s_arr downto 2 do
18870: LD_ADDR_VAR 0 5
18874: PUSH
18875: DOUBLE
18876: LD_VAR 0 7
18880: INC
18881: ST_TO_ADDR
18882: LD_INT 2
18884: PUSH
18885: FOR_DOWNTO
18886: IFFALSE 18970
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18888: LD_ADDR_VAR 0 6
18892: PUSH
18893: LD_VAR 0 7
18897: PUSH
18898: LD_VAR 0 5
18902: PUSH
18903: LD_INT 1
18905: MINUS
18906: ARRAY
18907: PPUSH
18908: LD_VAR 0 2
18912: PUSH
18913: LD_VAR 0 5
18917: PUSH
18918: LD_INT 1
18920: MINUS
18921: ARRAY
18922: PPUSH
18923: LD_VAR 0 7
18927: PUSH
18928: LD_VAR 0 5
18932: ARRAY
18933: PPUSH
18934: CALL_OW 1
18938: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18939: LD_ADDR_VAR 0 7
18943: PUSH
18944: LD_VAR 0 7
18948: PPUSH
18949: LD_VAR 0 5
18953: PUSH
18954: LD_INT 1
18956: MINUS
18957: PPUSH
18958: LD_VAR 0 6
18962: PPUSH
18963: CALL_OW 1
18967: ST_TO_ADDR
// end ;
18968: GO 18885
18970: POP
18971: POP
// result := s_arr [ 1 ] ;
18972: LD_ADDR_VAR 0 4
18976: PUSH
18977: LD_VAR 0 7
18981: PUSH
18982: LD_INT 1
18984: ARRAY
18985: ST_TO_ADDR
// end ; end ;
18986: LD_VAR 0 4
18990: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18991: LD_INT 0
18993: PPUSH
18994: PPUSH
// if not list then
18995: LD_VAR 0 1
18999: NOT
19000: IFFALSE 19004
// exit ;
19002: GO 19095
// i := list [ pos1 ] ;
19004: LD_ADDR_VAR 0 5
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_VAR 0 2
19018: ARRAY
19019: ST_TO_ADDR
// if not i then
19020: LD_VAR 0 5
19024: NOT
19025: IFFALSE 19029
// exit ;
19027: GO 19095
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_VAR 0 1
19038: PPUSH
19039: LD_VAR 0 2
19043: PPUSH
19044: LD_VAR 0 1
19048: PUSH
19049: LD_VAR 0 3
19053: ARRAY
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_VAR 0 1
19069: PPUSH
19070: LD_VAR 0 3
19074: PPUSH
19075: LD_VAR 0 5
19079: PPUSH
19080: CALL_OW 1
19084: ST_TO_ADDR
// result := list ;
19085: LD_ADDR_VAR 0 4
19089: PUSH
19090: LD_VAR 0 1
19094: ST_TO_ADDR
// end ;
19095: LD_VAR 0 4
19099: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19100: LD_INT 0
19102: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19103: LD_ADDR_VAR 0 5
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 250
19117: PPUSH
19118: LD_VAR 0 1
19122: PPUSH
19123: CALL_OW 251
19127: PPUSH
19128: LD_VAR 0 2
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_VAR 0 4
19142: PPUSH
19143: CALL 19521 0 5
19147: ST_TO_ADDR
// end ;
19148: LD_VAR 0 5
19152: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
19157: PPUSH
19158: PPUSH
// if not list or not unit then
19159: LD_VAR 0 2
19163: NOT
19164: PUSH
19165: LD_VAR 0 1
19169: NOT
19170: OR
19171: IFFALSE 19175
// exit ;
19173: GO 19516
// result := [ ] ;
19175: LD_ADDR_VAR 0 5
19179: PUSH
19180: EMPTY
19181: ST_TO_ADDR
// for i in list do
19182: LD_ADDR_VAR 0 6
19186: PUSH
19187: LD_VAR 0 2
19191: PUSH
19192: FOR_IN
19193: IFFALSE 19411
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
19195: LD_ADDR_VAR 0 8
19199: PUSH
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_VAR 0 6
19209: PUSH
19210: LD_INT 1
19212: ARRAY
19213: PPUSH
19214: LD_VAR 0 6
19218: PUSH
19219: LD_INT 2
19221: ARRAY
19222: PPUSH
19223: CALL_OW 297
19227: ST_TO_ADDR
// if not Count ( result ) then
19228: LD_VAR 0 5
19232: PPUSH
19233: CALL 15805 0 1
19237: NOT
19238: IFFALSE 19271
// begin result := Join ( result , [ i , tmp ] ) ;
19240: LD_ADDR_VAR 0 5
19244: PUSH
19245: LD_VAR 0 5
19249: PPUSH
19250: LD_VAR 0 6
19254: PUSH
19255: LD_VAR 0 8
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL 51394 0 2
19268: ST_TO_ADDR
// continue ;
19269: GO 19192
// end ; if result [ result ] [ 2 ] <= tmp then
19271: LD_VAR 0 5
19275: PUSH
19276: LD_VAR 0 5
19280: ARRAY
19281: PUSH
19282: LD_INT 2
19284: ARRAY
19285: PUSH
19286: LD_VAR 0 8
19290: LESSEQUAL
19291: IFFALSE 19324
// result := Join ( result , [ i , tmp ] ) else
19293: LD_ADDR_VAR 0 5
19297: PUSH
19298: LD_VAR 0 5
19302: PPUSH
19303: LD_VAR 0 6
19307: PUSH
19308: LD_VAR 0 8
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PPUSH
19317: CALL 51394 0 2
19321: ST_TO_ADDR
19322: GO 19409
// begin for j := 1 to Count ( result ) do
19324: LD_ADDR_VAR 0 7
19328: PUSH
19329: DOUBLE
19330: LD_INT 1
19332: DEC
19333: ST_TO_ADDR
19334: LD_VAR 0 5
19338: PPUSH
19339: CALL 15805 0 1
19343: PUSH
19344: FOR_TO
19345: IFFALSE 19407
// begin if tmp < result [ j ] [ 2 ] then
19347: LD_VAR 0 8
19351: PUSH
19352: LD_VAR 0 5
19356: PUSH
19357: LD_VAR 0 7
19361: ARRAY
19362: PUSH
19363: LD_INT 2
19365: ARRAY
19366: LESS
19367: IFFALSE 19405
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19369: LD_ADDR_VAR 0 5
19373: PUSH
19374: LD_VAR 0 5
19378: PPUSH
19379: LD_VAR 0 7
19383: PPUSH
19384: LD_VAR 0 6
19388: PUSH
19389: LD_VAR 0 8
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PPUSH
19398: CALL_OW 2
19402: ST_TO_ADDR
// break ;
19403: GO 19407
// end ; end ;
19405: GO 19344
19407: POP
19408: POP
// end ; end ;
19409: GO 19192
19411: POP
19412: POP
// if result and not asc then
19413: LD_VAR 0 5
19417: PUSH
19418: LD_VAR 0 3
19422: NOT
19423: AND
19424: IFFALSE 19441
// result := ReverseArray ( result ) ;
19426: LD_ADDR_VAR 0 5
19430: PUSH
19431: LD_VAR 0 5
19435: PPUSH
19436: CALL 46681 0 1
19440: ST_TO_ADDR
// tmp := [ ] ;
19441: LD_ADDR_VAR 0 8
19445: PUSH
19446: EMPTY
19447: ST_TO_ADDR
// if mode then
19448: LD_VAR 0 4
19452: IFFALSE 19516
// begin for i := 1 to result do
19454: LD_ADDR_VAR 0 6
19458: PUSH
19459: DOUBLE
19460: LD_INT 1
19462: DEC
19463: ST_TO_ADDR
19464: LD_VAR 0 5
19468: PUSH
19469: FOR_TO
19470: IFFALSE 19504
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
19472: LD_ADDR_VAR 0 8
19476: PUSH
19477: LD_VAR 0 8
19481: PPUSH
19482: LD_VAR 0 5
19486: PUSH
19487: LD_VAR 0 6
19491: ARRAY
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: PPUSH
19497: CALL 51394 0 2
19501: ST_TO_ADDR
19502: GO 19469
19504: POP
19505: POP
// result := tmp ;
19506: LD_ADDR_VAR 0 5
19510: PUSH
19511: LD_VAR 0 8
19515: ST_TO_ADDR
// end ; end ;
19516: LD_VAR 0 5
19520: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19521: LD_INT 0
19523: PPUSH
19524: PPUSH
19525: PPUSH
19526: PPUSH
// if not list then
19527: LD_VAR 0 3
19531: NOT
19532: IFFALSE 19536
// exit ;
19534: GO 19924
// result := [ ] ;
19536: LD_ADDR_VAR 0 6
19540: PUSH
19541: EMPTY
19542: ST_TO_ADDR
// for i in list do
19543: LD_ADDR_VAR 0 7
19547: PUSH
19548: LD_VAR 0 3
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19756
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19556: LD_ADDR_VAR 0 9
19560: PUSH
19561: LD_VAR 0 7
19565: PPUSH
19566: LD_VAR 0 1
19570: PPUSH
19571: LD_VAR 0 2
19575: PPUSH
19576: CALL_OW 297
19580: ST_TO_ADDR
// if not result then
19581: LD_VAR 0 6
19585: NOT
19586: IFFALSE 19612
// result := [ [ i , tmp ] ] else
19588: LD_ADDR_VAR 0 6
19592: PUSH
19593: LD_VAR 0 7
19597: PUSH
19598: LD_VAR 0 9
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: EMPTY
19608: LIST
19609: ST_TO_ADDR
19610: GO 19754
// begin if result [ result ] [ 2 ] < tmp then
19612: LD_VAR 0 6
19616: PUSH
19617: LD_VAR 0 6
19621: ARRAY
19622: PUSH
19623: LD_INT 2
19625: ARRAY
19626: PUSH
19627: LD_VAR 0 9
19631: LESS
19632: IFFALSE 19674
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19634: LD_ADDR_VAR 0 6
19638: PUSH
19639: LD_VAR 0 6
19643: PPUSH
19644: LD_VAR 0 6
19648: PUSH
19649: LD_INT 1
19651: PLUS
19652: PPUSH
19653: LD_VAR 0 7
19657: PUSH
19658: LD_VAR 0 9
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: CALL_OW 2
19671: ST_TO_ADDR
19672: GO 19754
// for j = 1 to result do
19674: LD_ADDR_VAR 0 8
19678: PUSH
19679: DOUBLE
19680: LD_INT 1
19682: DEC
19683: ST_TO_ADDR
19684: LD_VAR 0 6
19688: PUSH
19689: FOR_TO
19690: IFFALSE 19752
// begin if tmp < result [ j ] [ 2 ] then
19692: LD_VAR 0 9
19696: PUSH
19697: LD_VAR 0 6
19701: PUSH
19702: LD_VAR 0 8
19706: ARRAY
19707: PUSH
19708: LD_INT 2
19710: ARRAY
19711: LESS
19712: IFFALSE 19750
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19714: LD_ADDR_VAR 0 6
19718: PUSH
19719: LD_VAR 0 6
19723: PPUSH
19724: LD_VAR 0 8
19728: PPUSH
19729: LD_VAR 0 7
19733: PUSH
19734: LD_VAR 0 9
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PPUSH
19743: CALL_OW 2
19747: ST_TO_ADDR
// break ;
19748: GO 19752
// end ; end ;
19750: GO 19689
19752: POP
19753: POP
// end ; end ;
19754: GO 19553
19756: POP
19757: POP
// if result and not asc then
19758: LD_VAR 0 6
19762: PUSH
19763: LD_VAR 0 4
19767: NOT
19768: AND
19769: IFFALSE 19844
// begin tmp := result ;
19771: LD_ADDR_VAR 0 9
19775: PUSH
19776: LD_VAR 0 6
19780: ST_TO_ADDR
// for i = tmp downto 1 do
19781: LD_ADDR_VAR 0 7
19785: PUSH
19786: DOUBLE
19787: LD_VAR 0 9
19791: INC
19792: ST_TO_ADDR
19793: LD_INT 1
19795: PUSH
19796: FOR_DOWNTO
19797: IFFALSE 19842
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19799: LD_ADDR_VAR 0 6
19803: PUSH
19804: LD_VAR 0 6
19808: PPUSH
19809: LD_VAR 0 9
19813: PUSH
19814: LD_VAR 0 7
19818: MINUS
19819: PUSH
19820: LD_INT 1
19822: PLUS
19823: PPUSH
19824: LD_VAR 0 9
19828: PUSH
19829: LD_VAR 0 7
19833: ARRAY
19834: PPUSH
19835: CALL_OW 1
19839: ST_TO_ADDR
19840: GO 19796
19842: POP
19843: POP
// end ; tmp := [ ] ;
19844: LD_ADDR_VAR 0 9
19848: PUSH
19849: EMPTY
19850: ST_TO_ADDR
// if mode then
19851: LD_VAR 0 5
19855: IFFALSE 19924
// begin for i = 1 to result do
19857: LD_ADDR_VAR 0 7
19861: PUSH
19862: DOUBLE
19863: LD_INT 1
19865: DEC
19866: ST_TO_ADDR
19867: LD_VAR 0 6
19871: PUSH
19872: FOR_TO
19873: IFFALSE 19912
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19875: LD_ADDR_VAR 0 9
19879: PUSH
19880: LD_VAR 0 9
19884: PPUSH
19885: LD_VAR 0 7
19889: PPUSH
19890: LD_VAR 0 6
19894: PUSH
19895: LD_VAR 0 7
19899: ARRAY
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PPUSH
19905: CALL_OW 1
19909: ST_TO_ADDR
19910: GO 19872
19912: POP
19913: POP
// result := tmp ;
19914: LD_ADDR_VAR 0 6
19918: PUSH
19919: LD_VAR 0 9
19923: ST_TO_ADDR
// end ; end ;
19924: LD_VAR 0 6
19928: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19929: LD_INT 0
19931: PPUSH
19932: PPUSH
19933: PPUSH
19934: PPUSH
19935: PPUSH
19936: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19937: LD_ADDR_VAR 0 5
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: LD_INT 0
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: EMPTY
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: ST_TO_ADDR
// if not x or not y then
19959: LD_VAR 0 2
19963: NOT
19964: PUSH
19965: LD_VAR 0 3
19969: NOT
19970: OR
19971: IFFALSE 19975
// exit ;
19973: GO 21625
// if not range then
19975: LD_VAR 0 4
19979: NOT
19980: IFFALSE 19990
// range := 10 ;
19982: LD_ADDR_VAR 0 4
19986: PUSH
19987: LD_INT 10
19989: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19990: LD_ADDR_VAR 0 8
19994: PUSH
19995: LD_INT 81
19997: PUSH
19998: LD_VAR 0 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 92
20009: PUSH
20010: LD_VAR 0 2
20014: PUSH
20015: LD_VAR 0 3
20019: PUSH
20020: LD_VAR 0 4
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 3
20033: PUSH
20034: LD_INT 21
20036: PUSH
20037: LD_INT 3
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: PPUSH
20053: CALL_OW 69
20057: ST_TO_ADDR
// if not tmp then
20058: LD_VAR 0 8
20062: NOT
20063: IFFALSE 20067
// exit ;
20065: GO 21625
// for i in tmp do
20067: LD_ADDR_VAR 0 6
20071: PUSH
20072: LD_VAR 0 8
20076: PUSH
20077: FOR_IN
20078: IFFALSE 21600
// begin points := [ 0 , 0 , 0 ] ;
20080: LD_ADDR_VAR 0 9
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
// bpoints := 1 ;
20099: LD_ADDR_VAR 0 10
20103: PUSH
20104: LD_INT 1
20106: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20107: LD_VAR 0 6
20111: PPUSH
20112: CALL_OW 247
20116: PUSH
20117: LD_INT 1
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20703
20125: POP
// begin if GetClass ( i ) = 1 then
20126: LD_VAR 0 6
20130: PPUSH
20131: CALL_OW 257
20135: PUSH
20136: LD_INT 1
20138: EQUAL
20139: IFFALSE 20160
// points := [ 10 , 5 , 3 ] ;
20141: LD_ADDR_VAR 0 9
20145: PUSH
20146: LD_INT 10
20148: PUSH
20149: LD_INT 5
20151: PUSH
20152: LD_INT 3
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20160: LD_VAR 0 6
20164: PPUSH
20165: CALL_OW 257
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 3
20175: PUSH
20176: LD_INT 4
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: IN
20184: IFFALSE 20205
// points := [ 3 , 2 , 1 ] ;
20186: LD_ADDR_VAR 0 9
20190: PUSH
20191: LD_INT 3
20193: PUSH
20194: LD_INT 2
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20205: LD_VAR 0 6
20209: PPUSH
20210: CALL_OW 257
20214: PUSH
20215: LD_INT 5
20217: EQUAL
20218: IFFALSE 20239
// points := [ 130 , 5 , 2 ] ;
20220: LD_ADDR_VAR 0 9
20224: PUSH
20225: LD_INT 130
20227: PUSH
20228: LD_INT 5
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20239: LD_VAR 0 6
20243: PPUSH
20244: CALL_OW 257
20248: PUSH
20249: LD_INT 8
20251: EQUAL
20252: IFFALSE 20273
// points := [ 35 , 35 , 30 ] ;
20254: LD_ADDR_VAR 0 9
20258: PUSH
20259: LD_INT 35
20261: PUSH
20262: LD_INT 35
20264: PUSH
20265: LD_INT 30
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20273: LD_VAR 0 6
20277: PPUSH
20278: CALL_OW 257
20282: PUSH
20283: LD_INT 9
20285: EQUAL
20286: IFFALSE 20307
// points := [ 20 , 55 , 40 ] ;
20288: LD_ADDR_VAR 0 9
20292: PUSH
20293: LD_INT 20
20295: PUSH
20296: LD_INT 55
20298: PUSH
20299: LD_INT 40
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: LIST
20306: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20307: LD_VAR 0 6
20311: PPUSH
20312: CALL_OW 257
20316: PUSH
20317: LD_INT 12
20319: PUSH
20320: LD_INT 16
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: IN
20327: IFFALSE 20348
// points := [ 5 , 3 , 2 ] ;
20329: LD_ADDR_VAR 0 9
20333: PUSH
20334: LD_INT 5
20336: PUSH
20337: LD_INT 3
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20348: LD_VAR 0 6
20352: PPUSH
20353: CALL_OW 257
20357: PUSH
20358: LD_INT 17
20360: EQUAL
20361: IFFALSE 20382
// points := [ 100 , 50 , 75 ] ;
20363: LD_ADDR_VAR 0 9
20367: PUSH
20368: LD_INT 100
20370: PUSH
20371: LD_INT 50
20373: PUSH
20374: LD_INT 75
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20382: LD_VAR 0 6
20386: PPUSH
20387: CALL_OW 257
20391: PUSH
20392: LD_INT 15
20394: EQUAL
20395: IFFALSE 20416
// points := [ 10 , 5 , 3 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_INT 10
20404: PUSH
20405: LD_INT 5
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20416: LD_VAR 0 6
20420: PPUSH
20421: CALL_OW 257
20425: PUSH
20426: LD_INT 14
20428: EQUAL
20429: IFFALSE 20450
// points := [ 10 , 0 , 0 ] ;
20431: LD_ADDR_VAR 0 9
20435: PUSH
20436: LD_INT 10
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: LD_INT 0
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: LIST
20449: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20450: LD_VAR 0 6
20454: PPUSH
20455: CALL_OW 257
20459: PUSH
20460: LD_INT 11
20462: EQUAL
20463: IFFALSE 20484
// points := [ 30 , 10 , 5 ] ;
20465: LD_ADDR_VAR 0 9
20469: PUSH
20470: LD_INT 30
20472: PUSH
20473: LD_INT 10
20475: PUSH
20476: LD_INT 5
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: LIST
20483: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20484: LD_VAR 0 1
20488: PPUSH
20489: LD_INT 5
20491: PPUSH
20492: CALL_OW 321
20496: PUSH
20497: LD_INT 2
20499: EQUAL
20500: IFFALSE 20517
// bpoints := bpoints * 1.8 ;
20502: LD_ADDR_VAR 0 10
20506: PUSH
20507: LD_VAR 0 10
20511: PUSH
20512: LD_REAL  1.80000000000000E+0000
20515: MUL
20516: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20517: LD_VAR 0 6
20521: PPUSH
20522: CALL_OW 257
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 3
20535: PUSH
20536: LD_INT 4
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: IN
20545: PUSH
20546: LD_VAR 0 1
20550: PPUSH
20551: LD_INT 51
20553: PPUSH
20554: CALL_OW 321
20558: PUSH
20559: LD_INT 2
20561: EQUAL
20562: AND
20563: IFFALSE 20580
// bpoints := bpoints * 1.2 ;
20565: LD_ADDR_VAR 0 10
20569: PUSH
20570: LD_VAR 0 10
20574: PUSH
20575: LD_REAL  1.20000000000000E+0000
20578: MUL
20579: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20580: LD_VAR 0 6
20584: PPUSH
20585: CALL_OW 257
20589: PUSH
20590: LD_INT 5
20592: PUSH
20593: LD_INT 7
20595: PUSH
20596: LD_INT 9
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: LIST
20603: IN
20604: PUSH
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 52
20612: PPUSH
20613: CALL_OW 321
20617: PUSH
20618: LD_INT 2
20620: EQUAL
20621: AND
20622: IFFALSE 20639
// bpoints := bpoints * 1.5 ;
20624: LD_ADDR_VAR 0 10
20628: PUSH
20629: LD_VAR 0 10
20633: PUSH
20634: LD_REAL  1.50000000000000E+0000
20637: MUL
20638: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_INT 66
20646: PPUSH
20647: CALL_OW 321
20651: PUSH
20652: LD_INT 2
20654: EQUAL
20655: IFFALSE 20672
// bpoints := bpoints * 1.1 ;
20657: LD_ADDR_VAR 0 10
20661: PUSH
20662: LD_VAR 0 10
20666: PUSH
20667: LD_REAL  1.10000000000000E+0000
20670: MUL
20671: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20672: LD_ADDR_VAR 0 10
20676: PUSH
20677: LD_VAR 0 10
20681: PUSH
20682: LD_VAR 0 6
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 259
20694: PUSH
20695: LD_REAL  1.15000000000000E+0000
20698: MUL
20699: MUL
20700: ST_TO_ADDR
// end ; unit_vehicle :
20701: GO 21529
20703: LD_INT 2
20705: DOUBLE
20706: EQUAL
20707: IFTRUE 20711
20709: GO 21517
20711: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20712: LD_VAR 0 6
20716: PPUSH
20717: CALL_OW 264
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 42
20727: PUSH
20728: LD_INT 24
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: IN
20736: IFFALSE 20757
// points := [ 25 , 5 , 3 ] ;
20738: LD_ADDR_VAR 0 9
20742: PUSH
20743: LD_INT 25
20745: PUSH
20746: LD_INT 5
20748: PUSH
20749: LD_INT 3
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20757: LD_VAR 0 6
20761: PPUSH
20762: CALL_OW 264
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 43
20772: PUSH
20773: LD_INT 25
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: IN
20781: IFFALSE 20802
// points := [ 40 , 15 , 5 ] ;
20783: LD_ADDR_VAR 0 9
20787: PUSH
20788: LD_INT 40
20790: PUSH
20791: LD_INT 15
20793: PUSH
20794: LD_INT 5
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20802: LD_VAR 0 6
20806: PPUSH
20807: CALL_OW 264
20811: PUSH
20812: LD_INT 3
20814: PUSH
20815: LD_INT 23
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: IN
20822: IFFALSE 20843
// points := [ 7 , 25 , 8 ] ;
20824: LD_ADDR_VAR 0 9
20828: PUSH
20829: LD_INT 7
20831: PUSH
20832: LD_INT 25
20834: PUSH
20835: LD_INT 8
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20843: LD_VAR 0 6
20847: PPUSH
20848: CALL_OW 264
20852: PUSH
20853: LD_INT 5
20855: PUSH
20856: LD_INT 27
20858: PUSH
20859: LD_INT 44
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: IN
20867: IFFALSE 20888
// points := [ 14 , 50 , 16 ] ;
20869: LD_ADDR_VAR 0 9
20873: PUSH
20874: LD_INT 14
20876: PUSH
20877: LD_INT 50
20879: PUSH
20880: LD_INT 16
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20888: LD_VAR 0 6
20892: PPUSH
20893: CALL_OW 264
20897: PUSH
20898: LD_INT 6
20900: PUSH
20901: LD_INT 46
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: IN
20908: IFFALSE 20929
// points := [ 32 , 120 , 70 ] ;
20910: LD_ADDR_VAR 0 9
20914: PUSH
20915: LD_INT 32
20917: PUSH
20918: LD_INT 120
20920: PUSH
20921: LD_INT 70
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20929: LD_VAR 0 6
20933: PPUSH
20934: CALL_OW 264
20938: PUSH
20939: LD_INT 7
20941: PUSH
20942: LD_INT 28
20944: PUSH
20945: LD_INT 45
20947: PUSH
20948: LD_INT 92
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: IN
20957: IFFALSE 20978
// points := [ 35 , 20 , 45 ] ;
20959: LD_ADDR_VAR 0 9
20963: PUSH
20964: LD_INT 35
20966: PUSH
20967: LD_INT 20
20969: PUSH
20970: LD_INT 45
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20978: LD_VAR 0 6
20982: PPUSH
20983: CALL_OW 264
20987: PUSH
20988: LD_INT 47
20990: PUSH
20991: EMPTY
20992: LIST
20993: IN
20994: IFFALSE 21015
// points := [ 67 , 45 , 75 ] ;
20996: LD_ADDR_VAR 0 9
21000: PUSH
21001: LD_INT 67
21003: PUSH
21004: LD_INT 45
21006: PUSH
21007: LD_INT 75
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21015: LD_VAR 0 6
21019: PPUSH
21020: CALL_OW 264
21024: PUSH
21025: LD_INT 26
21027: PUSH
21028: EMPTY
21029: LIST
21030: IN
21031: IFFALSE 21052
// points := [ 120 , 30 , 80 ] ;
21033: LD_ADDR_VAR 0 9
21037: PUSH
21038: LD_INT 120
21040: PUSH
21041: LD_INT 30
21043: PUSH
21044: LD_INT 80
21046: PUSH
21047: EMPTY
21048: LIST
21049: LIST
21050: LIST
21051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21052: LD_VAR 0 6
21056: PPUSH
21057: CALL_OW 264
21061: PUSH
21062: LD_INT 22
21064: PUSH
21065: EMPTY
21066: LIST
21067: IN
21068: IFFALSE 21089
// points := [ 40 , 1 , 1 ] ;
21070: LD_ADDR_VAR 0 9
21074: PUSH
21075: LD_INT 40
21077: PUSH
21078: LD_INT 1
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21089: LD_VAR 0 6
21093: PPUSH
21094: CALL_OW 264
21098: PUSH
21099: LD_INT 29
21101: PUSH
21102: EMPTY
21103: LIST
21104: IN
21105: IFFALSE 21126
// points := [ 70 , 200 , 400 ] ;
21107: LD_ADDR_VAR 0 9
21111: PUSH
21112: LD_INT 70
21114: PUSH
21115: LD_INT 200
21117: PUSH
21118: LD_INT 400
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21126: LD_VAR 0 6
21130: PPUSH
21131: CALL_OW 264
21135: PUSH
21136: LD_INT 14
21138: PUSH
21139: LD_INT 53
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: IN
21146: IFFALSE 21167
// points := [ 40 , 10 , 20 ] ;
21148: LD_ADDR_VAR 0 9
21152: PUSH
21153: LD_INT 40
21155: PUSH
21156: LD_INT 10
21158: PUSH
21159: LD_INT 20
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21167: LD_VAR 0 6
21171: PPUSH
21172: CALL_OW 264
21176: PUSH
21177: LD_INT 9
21179: PUSH
21180: EMPTY
21181: LIST
21182: IN
21183: IFFALSE 21204
// points := [ 5 , 70 , 20 ] ;
21185: LD_ADDR_VAR 0 9
21189: PUSH
21190: LD_INT 5
21192: PUSH
21193: LD_INT 70
21195: PUSH
21196: LD_INT 20
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21204: LD_VAR 0 6
21208: PPUSH
21209: CALL_OW 264
21213: PUSH
21214: LD_INT 10
21216: PUSH
21217: EMPTY
21218: LIST
21219: IN
21220: IFFALSE 21241
// points := [ 35 , 110 , 70 ] ;
21222: LD_ADDR_VAR 0 9
21226: PUSH
21227: LD_INT 35
21229: PUSH
21230: LD_INT 110
21232: PUSH
21233: LD_INT 70
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: LIST
21240: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21241: LD_VAR 0 6
21245: PPUSH
21246: CALL_OW 265
21250: PUSH
21251: LD_INT 25
21253: EQUAL
21254: IFFALSE 21275
// points := [ 80 , 65 , 100 ] ;
21256: LD_ADDR_VAR 0 9
21260: PUSH
21261: LD_INT 80
21263: PUSH
21264: LD_INT 65
21266: PUSH
21267: LD_INT 100
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21275: LD_VAR 0 6
21279: PPUSH
21280: CALL_OW 263
21284: PUSH
21285: LD_INT 1
21287: EQUAL
21288: IFFALSE 21323
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21290: LD_ADDR_VAR 0 10
21294: PUSH
21295: LD_VAR 0 10
21299: PUSH
21300: LD_VAR 0 6
21304: PPUSH
21305: CALL_OW 311
21309: PPUSH
21310: LD_INT 3
21312: PPUSH
21313: CALL_OW 259
21317: PUSH
21318: LD_INT 4
21320: MUL
21321: MUL
21322: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21323: LD_VAR 0 6
21327: PPUSH
21328: CALL_OW 263
21332: PUSH
21333: LD_INT 2
21335: EQUAL
21336: IFFALSE 21387
// begin j := IsControledBy ( i ) ;
21338: LD_ADDR_VAR 0 7
21342: PUSH
21343: LD_VAR 0 6
21347: PPUSH
21348: CALL_OW 312
21352: ST_TO_ADDR
// if j then
21353: LD_VAR 0 7
21357: IFFALSE 21387
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21359: LD_ADDR_VAR 0 10
21363: PUSH
21364: LD_VAR 0 10
21368: PUSH
21369: LD_VAR 0 7
21373: PPUSH
21374: LD_INT 3
21376: PPUSH
21377: CALL_OW 259
21381: PUSH
21382: LD_INT 3
21384: MUL
21385: MUL
21386: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21387: LD_VAR 0 6
21391: PPUSH
21392: CALL_OW 264
21396: PUSH
21397: LD_INT 5
21399: PUSH
21400: LD_INT 6
21402: PUSH
21403: LD_INT 46
21405: PUSH
21406: LD_INT 44
21408: PUSH
21409: LD_INT 47
21411: PUSH
21412: LD_INT 45
21414: PUSH
21415: LD_INT 28
21417: PUSH
21418: LD_INT 7
21420: PUSH
21421: LD_INT 27
21423: PUSH
21424: LD_INT 29
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: IN
21439: PUSH
21440: LD_VAR 0 1
21444: PPUSH
21445: LD_INT 52
21447: PPUSH
21448: CALL_OW 321
21452: PUSH
21453: LD_INT 2
21455: EQUAL
21456: AND
21457: IFFALSE 21474
// bpoints := bpoints * 1.2 ;
21459: LD_ADDR_VAR 0 10
21463: PUSH
21464: LD_VAR 0 10
21468: PUSH
21469: LD_REAL  1.20000000000000E+0000
21472: MUL
21473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21474: LD_VAR 0 6
21478: PPUSH
21479: CALL_OW 264
21483: PUSH
21484: LD_INT 6
21486: PUSH
21487: LD_INT 46
21489: PUSH
21490: LD_INT 47
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: IN
21498: IFFALSE 21515
// bpoints := bpoints * 1.2 ;
21500: LD_ADDR_VAR 0 10
21504: PUSH
21505: LD_VAR 0 10
21509: PUSH
21510: LD_REAL  1.20000000000000E+0000
21513: MUL
21514: ST_TO_ADDR
// end ; unit_building :
21515: GO 21529
21517: LD_INT 3
21519: DOUBLE
21520: EQUAL
21521: IFTRUE 21525
21523: GO 21528
21525: POP
// ; end ;
21526: GO 21529
21528: POP
// for j = 1 to 3 do
21529: LD_ADDR_VAR 0 7
21533: PUSH
21534: DOUBLE
21535: LD_INT 1
21537: DEC
21538: ST_TO_ADDR
21539: LD_INT 3
21541: PUSH
21542: FOR_TO
21543: IFFALSE 21596
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21545: LD_ADDR_VAR 0 5
21549: PUSH
21550: LD_VAR 0 5
21554: PPUSH
21555: LD_VAR 0 7
21559: PPUSH
21560: LD_VAR 0 5
21564: PUSH
21565: LD_VAR 0 7
21569: ARRAY
21570: PUSH
21571: LD_VAR 0 9
21575: PUSH
21576: LD_VAR 0 7
21580: ARRAY
21581: PUSH
21582: LD_VAR 0 10
21586: MUL
21587: PLUS
21588: PPUSH
21589: CALL_OW 1
21593: ST_TO_ADDR
21594: GO 21542
21596: POP
21597: POP
// end ;
21598: GO 20077
21600: POP
21601: POP
// result := Replace ( result , 4 , tmp ) ;
21602: LD_ADDR_VAR 0 5
21606: PUSH
21607: LD_VAR 0 5
21611: PPUSH
21612: LD_INT 4
21614: PPUSH
21615: LD_VAR 0 8
21619: PPUSH
21620: CALL_OW 1
21624: ST_TO_ADDR
// end ;
21625: LD_VAR 0 5
21629: RET
// export function DangerAtRange ( unit , range ) ; begin
21630: LD_INT 0
21632: PPUSH
// if not unit then
21633: LD_VAR 0 1
21637: NOT
21638: IFFALSE 21642
// exit ;
21640: GO 21687
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21642: LD_ADDR_VAR 0 3
21646: PUSH
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 255
21656: PPUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 250
21666: PPUSH
21667: LD_VAR 0 1
21671: PPUSH
21672: CALL_OW 251
21676: PPUSH
21677: LD_VAR 0 2
21681: PPUSH
21682: CALL 19929 0 4
21686: ST_TO_ADDR
// end ;
21687: LD_VAR 0 3
21691: RET
// export function DangerInArea ( side , area ) ; begin
21692: LD_INT 0
21694: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21695: LD_ADDR_VAR 0 3
21699: PUSH
21700: LD_VAR 0 2
21704: PPUSH
21705: LD_INT 81
21707: PUSH
21708: LD_VAR 0 1
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PPUSH
21717: CALL_OW 70
21721: ST_TO_ADDR
// end ;
21722: LD_VAR 0 3
21726: RET
// export function IsExtension ( b ) ; begin
21727: LD_INT 0
21729: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_VAR 0 1
21739: PUSH
21740: LD_INT 23
21742: PUSH
21743: LD_INT 20
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_INT 17
21751: PUSH
21752: LD_INT 24
21754: PUSH
21755: LD_INT 21
21757: PUSH
21758: LD_INT 19
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 25
21766: PUSH
21767: LD_INT 18
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: IN
21782: ST_TO_ADDR
// end ;
21783: LD_VAR 0 2
21787: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21788: LD_INT 0
21790: PPUSH
21791: PPUSH
21792: PPUSH
// result := [ ] ;
21793: LD_ADDR_VAR 0 4
21797: PUSH
21798: EMPTY
21799: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21800: LD_ADDR_VAR 0 5
21804: PUSH
21805: LD_VAR 0 2
21809: PPUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 3
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PPUSH
21820: CALL_OW 70
21824: ST_TO_ADDR
// if not tmp then
21825: LD_VAR 0 5
21829: NOT
21830: IFFALSE 21834
// exit ;
21832: GO 21898
// if checkLink then
21834: LD_VAR 0 3
21838: IFFALSE 21888
// begin for i in tmp do
21840: LD_ADDR_VAR 0 6
21844: PUSH
21845: LD_VAR 0 5
21849: PUSH
21850: FOR_IN
21851: IFFALSE 21886
// if GetBase ( i ) <> base then
21853: LD_VAR 0 6
21857: PPUSH
21858: CALL_OW 274
21862: PUSH
21863: LD_VAR 0 1
21867: NONEQUAL
21868: IFFALSE 21884
// ComLinkToBase ( base , i ) ;
21870: LD_VAR 0 1
21874: PPUSH
21875: LD_VAR 0 6
21879: PPUSH
21880: CALL_OW 169
21884: GO 21850
21886: POP
21887: POP
// end ; result := tmp ;
21888: LD_ADDR_VAR 0 4
21892: PUSH
21893: LD_VAR 0 5
21897: ST_TO_ADDR
// end ;
21898: LD_VAR 0 4
21902: RET
// export function ComComplete ( units , b ) ; var i ; begin
21903: LD_INT 0
21905: PPUSH
21906: PPUSH
// if not units then
21907: LD_VAR 0 1
21911: NOT
21912: IFFALSE 21916
// exit ;
21914: GO 22006
// for i in units do
21916: LD_ADDR_VAR 0 4
21920: PUSH
21921: LD_VAR 0 1
21925: PUSH
21926: FOR_IN
21927: IFFALSE 22004
// if BuildingStatus ( b ) = bs_build then
21929: LD_VAR 0 2
21933: PPUSH
21934: CALL_OW 461
21938: PUSH
21939: LD_INT 1
21941: EQUAL
21942: IFFALSE 22002
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21944: LD_VAR 0 4
21948: PPUSH
21949: LD_STRING h
21951: PUSH
21952: LD_VAR 0 2
21956: PPUSH
21957: CALL_OW 250
21961: PUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: CALL_OW 251
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: PUSH
21995: EMPTY
21996: LIST
21997: PPUSH
21998: CALL_OW 446
22002: GO 21926
22004: POP
22005: POP
// end ;
22006: LD_VAR 0 3
22010: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22011: LD_INT 0
22013: PPUSH
22014: PPUSH
22015: PPUSH
22016: PPUSH
22017: PPUSH
22018: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22019: LD_VAR 0 1
22023: NOT
22024: PUSH
22025: LD_VAR 0 1
22029: PPUSH
22030: CALL_OW 263
22034: PUSH
22035: LD_INT 2
22037: NONEQUAL
22038: OR
22039: IFFALSE 22043
// exit ;
22041: GO 22359
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22043: LD_ADDR_VAR 0 6
22047: PUSH
22048: LD_INT 22
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 255
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 30
22070: PUSH
22071: LD_INT 36
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 34
22080: PUSH
22081: LD_INT 31
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PPUSH
22097: CALL_OW 69
22101: ST_TO_ADDR
// if not tmp then
22102: LD_VAR 0 6
22106: NOT
22107: IFFALSE 22111
// exit ;
22109: GO 22359
// result := [ ] ;
22111: LD_ADDR_VAR 0 2
22115: PUSH
22116: EMPTY
22117: ST_TO_ADDR
// for i in tmp do
22118: LD_ADDR_VAR 0 3
22122: PUSH
22123: LD_VAR 0 6
22127: PUSH
22128: FOR_IN
22129: IFFALSE 22200
// begin t := UnitsInside ( i ) ;
22131: LD_ADDR_VAR 0 4
22135: PUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: CALL_OW 313
22145: ST_TO_ADDR
// if t then
22146: LD_VAR 0 4
22150: IFFALSE 22198
// for j in t do
22152: LD_ADDR_VAR 0 7
22156: PUSH
22157: LD_VAR 0 4
22161: PUSH
22162: FOR_IN
22163: IFFALSE 22196
// result := Replace ( result , result + 1 , j ) ;
22165: LD_ADDR_VAR 0 2
22169: PUSH
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 2
22179: PUSH
22180: LD_INT 1
22182: PLUS
22183: PPUSH
22184: LD_VAR 0 7
22188: PPUSH
22189: CALL_OW 1
22193: ST_TO_ADDR
22194: GO 22162
22196: POP
22197: POP
// end ;
22198: GO 22128
22200: POP
22201: POP
// if not result then
22202: LD_VAR 0 2
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22359
// mech := result [ 1 ] ;
22211: LD_ADDR_VAR 0 5
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: LD_INT 1
22223: ARRAY
22224: ST_TO_ADDR
// if result > 1 then
22225: LD_VAR 0 2
22229: PUSH
22230: LD_INT 1
22232: GREATER
22233: IFFALSE 22345
// begin for i = 2 to result do
22235: LD_ADDR_VAR 0 3
22239: PUSH
22240: DOUBLE
22241: LD_INT 2
22243: DEC
22244: ST_TO_ADDR
22245: LD_VAR 0 2
22249: PUSH
22250: FOR_TO
22251: IFFALSE 22343
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22253: LD_ADDR_VAR 0 4
22257: PUSH
22258: LD_VAR 0 2
22262: PUSH
22263: LD_VAR 0 3
22267: ARRAY
22268: PPUSH
22269: LD_INT 3
22271: PPUSH
22272: CALL_OW 259
22276: PUSH
22277: LD_VAR 0 2
22281: PUSH
22282: LD_VAR 0 3
22286: ARRAY
22287: PPUSH
22288: CALL_OW 432
22292: MINUS
22293: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22294: LD_VAR 0 4
22298: PUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: LD_INT 3
22306: PPUSH
22307: CALL_OW 259
22311: PUSH
22312: LD_VAR 0 5
22316: PPUSH
22317: CALL_OW 432
22321: MINUS
22322: GREATEREQUAL
22323: IFFALSE 22341
// mech := result [ i ] ;
22325: LD_ADDR_VAR 0 5
22329: PUSH
22330: LD_VAR 0 2
22334: PUSH
22335: LD_VAR 0 3
22339: ARRAY
22340: ST_TO_ADDR
// end ;
22341: GO 22250
22343: POP
22344: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22345: LD_VAR 0 1
22349: PPUSH
22350: LD_VAR 0 5
22354: PPUSH
22355: CALL_OW 135
// end ;
22359: LD_VAR 0 2
22363: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
22376: PPUSH
22377: PPUSH
22378: PPUSH
// result := [ ] ;
22379: LD_ADDR_VAR 0 7
22383: PUSH
22384: EMPTY
22385: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22386: LD_VAR 0 1
22390: PPUSH
22391: CALL_OW 266
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 1
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: IN
22406: NOT
22407: IFFALSE 22411
// exit ;
22409: GO 24045
// if name then
22411: LD_VAR 0 3
22415: IFFALSE 22431
// SetBName ( base_dep , name ) ;
22417: LD_VAR 0 1
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: CALL_OW 500
// base := GetBase ( base_dep ) ;
22431: LD_ADDR_VAR 0 15
22435: PUSH
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 274
22445: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22446: LD_ADDR_VAR 0 16
22450: PUSH
22451: LD_VAR 0 1
22455: PPUSH
22456: CALL_OW 255
22460: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22461: LD_ADDR_VAR 0 17
22465: PUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: CALL_OW 248
22475: ST_TO_ADDR
// if sources then
22476: LD_VAR 0 5
22480: IFFALSE 22527
// for i = 1 to 3 do
22482: LD_ADDR_VAR 0 8
22486: PUSH
22487: DOUBLE
22488: LD_INT 1
22490: DEC
22491: ST_TO_ADDR
22492: LD_INT 3
22494: PUSH
22495: FOR_TO
22496: IFFALSE 22525
// AddResourceType ( base , i , sources [ i ] ) ;
22498: LD_VAR 0 15
22502: PPUSH
22503: LD_VAR 0 8
22507: PPUSH
22508: LD_VAR 0 5
22512: PUSH
22513: LD_VAR 0 8
22517: ARRAY
22518: PPUSH
22519: CALL_OW 276
22523: GO 22495
22525: POP
22526: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22527: LD_ADDR_VAR 0 18
22531: PUSH
22532: LD_VAR 0 15
22536: PPUSH
22537: LD_VAR 0 2
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL 21788 0 3
22549: ST_TO_ADDR
// InitHc ;
22550: CALL_OW 19
// InitUc ;
22554: CALL_OW 18
// uc_side := side ;
22558: LD_ADDR_OWVAR 20
22562: PUSH
22563: LD_VAR 0 16
22567: ST_TO_ADDR
// uc_nation := nation ;
22568: LD_ADDR_OWVAR 21
22572: PUSH
22573: LD_VAR 0 17
22577: ST_TO_ADDR
// if buildings then
22578: LD_VAR 0 18
22582: IFFALSE 23904
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22584: LD_ADDR_VAR 0 19
22588: PUSH
22589: LD_VAR 0 18
22593: PPUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 30
22599: PUSH
22600: LD_INT 29
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 30
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: LIST
22621: PPUSH
22622: CALL_OW 72
22626: ST_TO_ADDR
// if tmp then
22627: LD_VAR 0 19
22631: IFFALSE 22679
// for i in tmp do
22633: LD_ADDR_VAR 0 8
22637: PUSH
22638: LD_VAR 0 19
22642: PUSH
22643: FOR_IN
22644: IFFALSE 22677
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22646: LD_VAR 0 8
22650: PPUSH
22651: CALL_OW 250
22655: PPUSH
22656: LD_VAR 0 8
22660: PPUSH
22661: CALL_OW 251
22665: PPUSH
22666: LD_VAR 0 16
22670: PPUSH
22671: CALL_OW 441
22675: GO 22643
22677: POP
22678: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22679: LD_VAR 0 18
22683: PPUSH
22684: LD_INT 2
22686: PUSH
22687: LD_INT 30
22689: PUSH
22690: LD_INT 32
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 30
22699: PUSH
22700: LD_INT 33
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 72
22716: IFFALSE 22804
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22718: LD_ADDR_VAR 0 8
22722: PUSH
22723: LD_VAR 0 18
22727: PPUSH
22728: LD_INT 2
22730: PUSH
22731: LD_INT 30
22733: PUSH
22734: LD_INT 32
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 30
22743: PUSH
22744: LD_INT 33
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 72
22760: PUSH
22761: FOR_IN
22762: IFFALSE 22802
// begin if not GetBWeapon ( i ) then
22764: LD_VAR 0 8
22768: PPUSH
22769: CALL_OW 269
22773: NOT
22774: IFFALSE 22800
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22776: LD_VAR 0 8
22780: PPUSH
22781: LD_VAR 0 8
22785: PPUSH
22786: LD_VAR 0 2
22790: PPUSH
22791: CALL 24050 0 2
22795: PPUSH
22796: CALL_OW 431
// end ;
22800: GO 22761
22802: POP
22803: POP
// end ; for i = 1 to personel do
22804: LD_ADDR_VAR 0 8
22808: PUSH
22809: DOUBLE
22810: LD_INT 1
22812: DEC
22813: ST_TO_ADDR
22814: LD_VAR 0 6
22818: PUSH
22819: FOR_TO
22820: IFFALSE 23884
// begin if i > 4 then
22822: LD_VAR 0 8
22826: PUSH
22827: LD_INT 4
22829: GREATER
22830: IFFALSE 22834
// break ;
22832: GO 23884
// case i of 1 :
22834: LD_VAR 0 8
22838: PUSH
22839: LD_INT 1
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 22927
22847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22848: LD_ADDR_VAR 0 12
22852: PUSH
22853: LD_VAR 0 18
22857: PPUSH
22858: LD_INT 22
22860: PUSH
22861: LD_VAR 0 16
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 58
22872: PUSH
22873: EMPTY
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: LD_INT 30
22881: PUSH
22882: LD_INT 32
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 30
22891: PUSH
22892: LD_INT 4
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 30
22901: PUSH
22902: LD_INT 5
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 72
22924: ST_TO_ADDR
22925: GO 23149
22927: LD_INT 2
22929: DOUBLE
22930: EQUAL
22931: IFTRUE 22935
22933: GO 22997
22935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22936: LD_ADDR_VAR 0 12
22940: PUSH
22941: LD_VAR 0 18
22945: PPUSH
22946: LD_INT 22
22948: PUSH
22949: LD_VAR 0 16
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 30
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 30
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 72
22994: ST_TO_ADDR
22995: GO 23149
22997: LD_INT 3
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23067
23005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23006: LD_ADDR_VAR 0 12
23010: PUSH
23011: LD_VAR 0 18
23015: PPUSH
23016: LD_INT 22
23018: PUSH
23019: LD_VAR 0 16
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 30
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 72
23064: ST_TO_ADDR
23065: GO 23149
23067: LD_INT 4
23069: DOUBLE
23070: EQUAL
23071: IFTRUE 23075
23073: GO 23148
23075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23076: LD_ADDR_VAR 0 12
23080: PUSH
23081: LD_VAR 0 18
23085: PPUSH
23086: LD_INT 22
23088: PUSH
23089: LD_VAR 0 16
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 30
23103: PUSH
23104: LD_INT 6
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: LD_INT 7
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 30
23123: PUSH
23124: LD_INT 8
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PPUSH
23141: CALL_OW 72
23145: ST_TO_ADDR
23146: GO 23149
23148: POP
// if i = 1 then
23149: LD_VAR 0 8
23153: PUSH
23154: LD_INT 1
23156: EQUAL
23157: IFFALSE 23268
// begin tmp := [ ] ;
23159: LD_ADDR_VAR 0 19
23163: PUSH
23164: EMPTY
23165: ST_TO_ADDR
// for j in f do
23166: LD_ADDR_VAR 0 9
23170: PUSH
23171: LD_VAR 0 12
23175: PUSH
23176: FOR_IN
23177: IFFALSE 23250
// if GetBType ( j ) = b_bunker then
23179: LD_VAR 0 9
23183: PPUSH
23184: CALL_OW 266
23188: PUSH
23189: LD_INT 32
23191: EQUAL
23192: IFFALSE 23219
// tmp := Insert ( tmp , 1 , j ) else
23194: LD_ADDR_VAR 0 19
23198: PUSH
23199: LD_VAR 0 19
23203: PPUSH
23204: LD_INT 1
23206: PPUSH
23207: LD_VAR 0 9
23211: PPUSH
23212: CALL_OW 2
23216: ST_TO_ADDR
23217: GO 23248
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23219: LD_ADDR_VAR 0 19
23223: PUSH
23224: LD_VAR 0 19
23228: PPUSH
23229: LD_VAR 0 19
23233: PUSH
23234: LD_INT 1
23236: PLUS
23237: PPUSH
23238: LD_VAR 0 9
23242: PPUSH
23243: CALL_OW 2
23247: ST_TO_ADDR
23248: GO 23176
23250: POP
23251: POP
// if tmp then
23252: LD_VAR 0 19
23256: IFFALSE 23268
// f := tmp ;
23258: LD_ADDR_VAR 0 12
23262: PUSH
23263: LD_VAR 0 19
23267: ST_TO_ADDR
// end ; x := personel [ i ] ;
23268: LD_ADDR_VAR 0 13
23272: PUSH
23273: LD_VAR 0 6
23277: PUSH
23278: LD_VAR 0 8
23282: ARRAY
23283: ST_TO_ADDR
// if x = - 1 then
23284: LD_VAR 0 13
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: EQUAL
23293: IFFALSE 23502
// begin for j in f do
23295: LD_ADDR_VAR 0 9
23299: PUSH
23300: LD_VAR 0 12
23304: PUSH
23305: FOR_IN
23306: IFFALSE 23498
// repeat InitHc ;
23308: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23312: LD_VAR 0 9
23316: PPUSH
23317: CALL_OW 266
23321: PUSH
23322: LD_INT 5
23324: EQUAL
23325: IFFALSE 23395
// begin if UnitsInside ( j ) < 3 then
23327: LD_VAR 0 9
23331: PPUSH
23332: CALL_OW 313
23336: PUSH
23337: LD_INT 3
23339: LESS
23340: IFFALSE 23376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23342: LD_INT 0
23344: PPUSH
23345: LD_INT 5
23347: PUSH
23348: LD_INT 8
23350: PUSH
23351: LD_INT 9
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: PUSH
23359: LD_VAR 0 17
23363: ARRAY
23364: PPUSH
23365: LD_VAR 0 4
23369: PPUSH
23370: CALL_OW 380
23374: GO 23393
// PrepareHuman ( false , i , skill ) ;
23376: LD_INT 0
23378: PPUSH
23379: LD_VAR 0 8
23383: PPUSH
23384: LD_VAR 0 4
23388: PPUSH
23389: CALL_OW 380
// end else
23393: GO 23412
// PrepareHuman ( false , i , skill ) ;
23395: LD_INT 0
23397: PPUSH
23398: LD_VAR 0 8
23402: PPUSH
23403: LD_VAR 0 4
23407: PPUSH
23408: CALL_OW 380
// un := CreateHuman ;
23412: LD_ADDR_VAR 0 14
23416: PUSH
23417: CALL_OW 44
23421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23422: LD_ADDR_VAR 0 7
23426: PUSH
23427: LD_VAR 0 7
23431: PPUSH
23432: LD_INT 1
23434: PPUSH
23435: LD_VAR 0 14
23439: PPUSH
23440: CALL_OW 2
23444: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23445: LD_VAR 0 14
23449: PPUSH
23450: LD_VAR 0 9
23454: PPUSH
23455: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23459: LD_VAR 0 9
23463: PPUSH
23464: CALL_OW 313
23468: PUSH
23469: LD_INT 6
23471: EQUAL
23472: PUSH
23473: LD_VAR 0 9
23477: PPUSH
23478: CALL_OW 266
23482: PUSH
23483: LD_INT 32
23485: PUSH
23486: LD_INT 31
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: IN
23493: OR
23494: IFFALSE 23308
23496: GO 23305
23498: POP
23499: POP
// end else
23500: GO 23882
// for j = 1 to x do
23502: LD_ADDR_VAR 0 9
23506: PUSH
23507: DOUBLE
23508: LD_INT 1
23510: DEC
23511: ST_TO_ADDR
23512: LD_VAR 0 13
23516: PUSH
23517: FOR_TO
23518: IFFALSE 23880
// begin InitHc ;
23520: CALL_OW 19
// if not f then
23524: LD_VAR 0 12
23528: NOT
23529: IFFALSE 23618
// begin PrepareHuman ( false , i , skill ) ;
23531: LD_INT 0
23533: PPUSH
23534: LD_VAR 0 8
23538: PPUSH
23539: LD_VAR 0 4
23543: PPUSH
23544: CALL_OW 380
// un := CreateHuman ;
23548: LD_ADDR_VAR 0 14
23552: PUSH
23553: CALL_OW 44
23557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23558: LD_ADDR_VAR 0 7
23562: PUSH
23563: LD_VAR 0 7
23567: PPUSH
23568: LD_INT 1
23570: PPUSH
23571: LD_VAR 0 14
23575: PPUSH
23576: CALL_OW 2
23580: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23581: LD_VAR 0 14
23585: PPUSH
23586: LD_VAR 0 1
23590: PPUSH
23591: CALL_OW 250
23595: PPUSH
23596: LD_VAR 0 1
23600: PPUSH
23601: CALL_OW 251
23605: PPUSH
23606: LD_INT 10
23608: PPUSH
23609: LD_INT 0
23611: PPUSH
23612: CALL_OW 50
// continue ;
23616: GO 23517
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23618: LD_VAR 0 12
23622: PUSH
23623: LD_INT 1
23625: ARRAY
23626: PPUSH
23627: CALL_OW 313
23631: PUSH
23632: LD_VAR 0 12
23636: PUSH
23637: LD_INT 1
23639: ARRAY
23640: PPUSH
23641: CALL_OW 266
23645: PUSH
23646: LD_INT 32
23648: PUSH
23649: LD_INT 31
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: IN
23656: AND
23657: PUSH
23658: LD_VAR 0 12
23662: PUSH
23663: LD_INT 1
23665: ARRAY
23666: PPUSH
23667: CALL_OW 313
23671: PUSH
23672: LD_INT 6
23674: EQUAL
23675: OR
23676: IFFALSE 23696
// f := Delete ( f , 1 ) ;
23678: LD_ADDR_VAR 0 12
23682: PUSH
23683: LD_VAR 0 12
23687: PPUSH
23688: LD_INT 1
23690: PPUSH
23691: CALL_OW 3
23695: ST_TO_ADDR
// if not f then
23696: LD_VAR 0 12
23700: NOT
23701: IFFALSE 23719
// begin x := x + 2 ;
23703: LD_ADDR_VAR 0 13
23707: PUSH
23708: LD_VAR 0 13
23712: PUSH
23713: LD_INT 2
23715: PLUS
23716: ST_TO_ADDR
// continue ;
23717: GO 23517
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23719: LD_VAR 0 12
23723: PUSH
23724: LD_INT 1
23726: ARRAY
23727: PPUSH
23728: CALL_OW 266
23732: PUSH
23733: LD_INT 5
23735: EQUAL
23736: IFFALSE 23810
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23738: LD_VAR 0 12
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PPUSH
23747: CALL_OW 313
23751: PUSH
23752: LD_INT 3
23754: LESS
23755: IFFALSE 23791
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23757: LD_INT 0
23759: PPUSH
23760: LD_INT 5
23762: PUSH
23763: LD_INT 8
23765: PUSH
23766: LD_INT 9
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: PUSH
23774: LD_VAR 0 17
23778: ARRAY
23779: PPUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: CALL_OW 380
23789: GO 23808
// PrepareHuman ( false , i , skill ) ;
23791: LD_INT 0
23793: PPUSH
23794: LD_VAR 0 8
23798: PPUSH
23799: LD_VAR 0 4
23803: PPUSH
23804: CALL_OW 380
// end else
23808: GO 23827
// PrepareHuman ( false , i , skill ) ;
23810: LD_INT 0
23812: PPUSH
23813: LD_VAR 0 8
23817: PPUSH
23818: LD_VAR 0 4
23822: PPUSH
23823: CALL_OW 380
// un := CreateHuman ;
23827: LD_ADDR_VAR 0 14
23831: PUSH
23832: CALL_OW 44
23836: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23837: LD_ADDR_VAR 0 7
23841: PUSH
23842: LD_VAR 0 7
23846: PPUSH
23847: LD_INT 1
23849: PPUSH
23850: LD_VAR 0 14
23854: PPUSH
23855: CALL_OW 2
23859: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23860: LD_VAR 0 14
23864: PPUSH
23865: LD_VAR 0 12
23869: PUSH
23870: LD_INT 1
23872: ARRAY
23873: PPUSH
23874: CALL_OW 52
// end ;
23878: GO 23517
23880: POP
23881: POP
// end ;
23882: GO 22819
23884: POP
23885: POP
// result := result ^ buildings ;
23886: LD_ADDR_VAR 0 7
23890: PUSH
23891: LD_VAR 0 7
23895: PUSH
23896: LD_VAR 0 18
23900: ADD
23901: ST_TO_ADDR
// end else
23902: GO 24045
// begin for i = 1 to personel do
23904: LD_ADDR_VAR 0 8
23908: PUSH
23909: DOUBLE
23910: LD_INT 1
23912: DEC
23913: ST_TO_ADDR
23914: LD_VAR 0 6
23918: PUSH
23919: FOR_TO
23920: IFFALSE 24043
// begin if i > 4 then
23922: LD_VAR 0 8
23926: PUSH
23927: LD_INT 4
23929: GREATER
23930: IFFALSE 23934
// break ;
23932: GO 24043
// x := personel [ i ] ;
23934: LD_ADDR_VAR 0 13
23938: PUSH
23939: LD_VAR 0 6
23943: PUSH
23944: LD_VAR 0 8
23948: ARRAY
23949: ST_TO_ADDR
// if x = - 1 then
23950: LD_VAR 0 13
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: EQUAL
23959: IFFALSE 23963
// continue ;
23961: GO 23919
// PrepareHuman ( false , i , skill ) ;
23963: LD_INT 0
23965: PPUSH
23966: LD_VAR 0 8
23970: PPUSH
23971: LD_VAR 0 4
23975: PPUSH
23976: CALL_OW 380
// un := CreateHuman ;
23980: LD_ADDR_VAR 0 14
23984: PUSH
23985: CALL_OW 44
23989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23990: LD_VAR 0 14
23994: PPUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 250
24004: PPUSH
24005: LD_VAR 0 1
24009: PPUSH
24010: CALL_OW 251
24014: PPUSH
24015: LD_INT 10
24017: PPUSH
24018: LD_INT 0
24020: PPUSH
24021: CALL_OW 50
// result := result ^ un ;
24025: LD_ADDR_VAR 0 7
24029: PUSH
24030: LD_VAR 0 7
24034: PUSH
24035: LD_VAR 0 14
24039: ADD
24040: ST_TO_ADDR
// end ;
24041: GO 23919
24043: POP
24044: POP
// end ; end ;
24045: LD_VAR 0 7
24049: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
24054: PPUSH
24055: PPUSH
24056: PPUSH
24057: PPUSH
24058: PPUSH
24059: PPUSH
24060: PPUSH
24061: PPUSH
24062: PPUSH
24063: PPUSH
24064: PPUSH
24065: PPUSH
24066: PPUSH
24067: PPUSH
// result := false ;
24068: LD_ADDR_VAR 0 3
24072: PUSH
24073: LD_INT 0
24075: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24076: LD_VAR 0 1
24080: NOT
24081: PUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 266
24091: PUSH
24092: LD_INT 32
24094: PUSH
24095: LD_INT 33
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: IN
24102: NOT
24103: OR
24104: IFFALSE 24108
// exit ;
24106: GO 25217
// nat := GetNation ( tower ) ;
24108: LD_ADDR_VAR 0 12
24112: PUSH
24113: LD_VAR 0 1
24117: PPUSH
24118: CALL_OW 248
24122: ST_TO_ADDR
// side := GetSide ( tower ) ;
24123: LD_ADDR_VAR 0 16
24127: PUSH
24128: LD_VAR 0 1
24132: PPUSH
24133: CALL_OW 255
24137: ST_TO_ADDR
// x := GetX ( tower ) ;
24138: LD_ADDR_VAR 0 10
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 250
24152: ST_TO_ADDR
// y := GetY ( tower ) ;
24153: LD_ADDR_VAR 0 11
24157: PUSH
24158: LD_VAR 0 1
24162: PPUSH
24163: CALL_OW 251
24167: ST_TO_ADDR
// if not x or not y then
24168: LD_VAR 0 10
24172: NOT
24173: PUSH
24174: LD_VAR 0 11
24178: NOT
24179: OR
24180: IFFALSE 24184
// exit ;
24182: GO 25217
// weapon := 0 ;
24184: LD_ADDR_VAR 0 18
24188: PUSH
24189: LD_INT 0
24191: ST_TO_ADDR
// fac_list := [ ] ;
24192: LD_ADDR_VAR 0 17
24196: PUSH
24197: EMPTY
24198: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24199: LD_ADDR_VAR 0 6
24203: PUSH
24204: LD_VAR 0 1
24208: PPUSH
24209: CALL_OW 274
24213: PPUSH
24214: LD_VAR 0 2
24218: PPUSH
24219: LD_INT 0
24221: PPUSH
24222: CALL 21788 0 3
24226: PPUSH
24227: LD_INT 30
24229: PUSH
24230: LD_INT 3
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PPUSH
24237: CALL_OW 72
24241: ST_TO_ADDR
// if not factories then
24242: LD_VAR 0 6
24246: NOT
24247: IFFALSE 24251
// exit ;
24249: GO 25217
// for i in factories do
24251: LD_ADDR_VAR 0 8
24255: PUSH
24256: LD_VAR 0 6
24260: PUSH
24261: FOR_IN
24262: IFFALSE 24287
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24264: LD_ADDR_VAR 0 17
24268: PUSH
24269: LD_VAR 0 17
24273: PUSH
24274: LD_VAR 0 8
24278: PPUSH
24279: CALL_OW 478
24283: UNION
24284: ST_TO_ADDR
24285: GO 24261
24287: POP
24288: POP
// if not fac_list then
24289: LD_VAR 0 17
24293: NOT
24294: IFFALSE 24298
// exit ;
24296: GO 25217
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24298: LD_ADDR_VAR 0 5
24302: PUSH
24303: LD_INT 4
24305: PUSH
24306: LD_INT 5
24308: PUSH
24309: LD_INT 9
24311: PUSH
24312: LD_INT 10
24314: PUSH
24315: LD_INT 6
24317: PUSH
24318: LD_INT 7
24320: PUSH
24321: LD_INT 11
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 27
24335: PUSH
24336: LD_INT 28
24338: PUSH
24339: LD_INT 26
24341: PUSH
24342: LD_INT 30
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 43
24353: PUSH
24354: LD_INT 44
24356: PUSH
24357: LD_INT 46
24359: PUSH
24360: LD_INT 45
24362: PUSH
24363: LD_INT 47
24365: PUSH
24366: LD_INT 49
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: PUSH
24382: LD_VAR 0 12
24386: ARRAY
24387: ST_TO_ADDR
// list := list isect fac_list ;
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: LD_VAR 0 5
24397: PUSH
24398: LD_VAR 0 17
24402: ISECT
24403: ST_TO_ADDR
// if not list then
24404: LD_VAR 0 5
24408: NOT
24409: IFFALSE 24413
// exit ;
24411: GO 25217
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24413: LD_VAR 0 12
24417: PUSH
24418: LD_INT 3
24420: EQUAL
24421: PUSH
24422: LD_INT 49
24424: PUSH
24425: LD_VAR 0 5
24429: IN
24430: AND
24431: PUSH
24432: LD_INT 31
24434: PPUSH
24435: LD_VAR 0 16
24439: PPUSH
24440: CALL_OW 321
24444: PUSH
24445: LD_INT 2
24447: EQUAL
24448: AND
24449: IFFALSE 24509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24451: LD_INT 22
24453: PUSH
24454: LD_VAR 0 16
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 35
24465: PUSH
24466: LD_INT 49
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 91
24475: PUSH
24476: LD_VAR 0 1
24480: PUSH
24481: LD_INT 10
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: PPUSH
24494: CALL_OW 69
24498: NOT
24499: IFFALSE 24509
// weapon := ru_time_lapser ;
24501: LD_ADDR_VAR 0 18
24505: PUSH
24506: LD_INT 49
24508: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24509: LD_VAR 0 12
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: IN
24524: PUSH
24525: LD_INT 11
24527: PUSH
24528: LD_VAR 0 5
24532: IN
24533: PUSH
24534: LD_INT 30
24536: PUSH
24537: LD_VAR 0 5
24541: IN
24542: OR
24543: AND
24544: PUSH
24545: LD_INT 6
24547: PPUSH
24548: LD_VAR 0 16
24552: PPUSH
24553: CALL_OW 321
24557: PUSH
24558: LD_INT 2
24560: EQUAL
24561: AND
24562: IFFALSE 24727
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24564: LD_INT 22
24566: PUSH
24567: LD_VAR 0 16
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: LD_INT 35
24581: PUSH
24582: LD_INT 11
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 35
24591: PUSH
24592: LD_INT 30
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 91
24606: PUSH
24607: LD_VAR 0 1
24611: PUSH
24612: LD_INT 18
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: LIST
24624: PPUSH
24625: CALL_OW 69
24629: NOT
24630: PUSH
24631: LD_INT 22
24633: PUSH
24634: LD_VAR 0 16
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 30
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 30
24658: PUSH
24659: LD_INT 33
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 91
24673: PUSH
24674: LD_VAR 0 1
24678: PUSH
24679: LD_INT 12
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: LIST
24691: PUSH
24692: EMPTY
24693: LIST
24694: PPUSH
24695: CALL_OW 69
24699: PUSH
24700: LD_INT 2
24702: GREATER
24703: AND
24704: IFFALSE 24727
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24706: LD_ADDR_VAR 0 18
24710: PUSH
24711: LD_INT 11
24713: PUSH
24714: LD_INT 30
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_VAR 0 12
24725: ARRAY
24726: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24727: LD_VAR 0 18
24731: NOT
24732: PUSH
24733: LD_INT 40
24735: PPUSH
24736: LD_VAR 0 16
24740: PPUSH
24741: CALL_OW 321
24745: PUSH
24746: LD_INT 2
24748: EQUAL
24749: AND
24750: PUSH
24751: LD_INT 7
24753: PUSH
24754: LD_VAR 0 5
24758: IN
24759: PUSH
24760: LD_INT 28
24762: PUSH
24763: LD_VAR 0 5
24767: IN
24768: OR
24769: PUSH
24770: LD_INT 45
24772: PUSH
24773: LD_VAR 0 5
24777: IN
24778: OR
24779: AND
24780: IFFALSE 25034
// begin hex := GetHexInfo ( x , y ) ;
24782: LD_ADDR_VAR 0 4
24786: PUSH
24787: LD_VAR 0 10
24791: PPUSH
24792: LD_VAR 0 11
24796: PPUSH
24797: CALL_OW 546
24801: ST_TO_ADDR
// if hex [ 1 ] then
24802: LD_VAR 0 4
24806: PUSH
24807: LD_INT 1
24809: ARRAY
24810: IFFALSE 24814
// exit ;
24812: GO 25217
// height := hex [ 2 ] ;
24814: LD_ADDR_VAR 0 15
24818: PUSH
24819: LD_VAR 0 4
24823: PUSH
24824: LD_INT 2
24826: ARRAY
24827: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24828: LD_ADDR_VAR 0 14
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: LD_INT 5
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: ST_TO_ADDR
// for i in tmp do
24851: LD_ADDR_VAR 0 8
24855: PUSH
24856: LD_VAR 0 14
24860: PUSH
24861: FOR_IN
24862: IFFALSE 25032
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24864: LD_ADDR_VAR 0 9
24868: PUSH
24869: LD_VAR 0 10
24873: PPUSH
24874: LD_VAR 0 8
24878: PPUSH
24879: LD_INT 5
24881: PPUSH
24882: CALL_OW 272
24886: PUSH
24887: LD_VAR 0 11
24891: PPUSH
24892: LD_VAR 0 8
24896: PPUSH
24897: LD_INT 5
24899: PPUSH
24900: CALL_OW 273
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24909: LD_VAR 0 9
24913: PUSH
24914: LD_INT 1
24916: ARRAY
24917: PPUSH
24918: LD_VAR 0 9
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: PPUSH
24927: CALL_OW 488
24931: IFFALSE 25030
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24933: LD_ADDR_VAR 0 4
24937: PUSH
24938: LD_VAR 0 9
24942: PUSH
24943: LD_INT 1
24945: ARRAY
24946: PPUSH
24947: LD_VAR 0 9
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: PPUSH
24956: CALL_OW 546
24960: ST_TO_ADDR
// if hex [ 1 ] then
24961: LD_VAR 0 4
24965: PUSH
24966: LD_INT 1
24968: ARRAY
24969: IFFALSE 24973
// continue ;
24971: GO 24861
// h := hex [ 2 ] ;
24973: LD_ADDR_VAR 0 13
24977: PUSH
24978: LD_VAR 0 4
24982: PUSH
24983: LD_INT 2
24985: ARRAY
24986: ST_TO_ADDR
// if h + 7 < height then
24987: LD_VAR 0 13
24991: PUSH
24992: LD_INT 7
24994: PLUS
24995: PUSH
24996: LD_VAR 0 15
25000: LESS
25001: IFFALSE 25030
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25003: LD_ADDR_VAR 0 18
25007: PUSH
25008: LD_INT 7
25010: PUSH
25011: LD_INT 28
25013: PUSH
25014: LD_INT 45
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: LD_VAR 0 12
25026: ARRAY
25027: ST_TO_ADDR
// break ;
25028: GO 25032
// end ; end ; end ;
25030: GO 24861
25032: POP
25033: POP
// end ; if not weapon then
25034: LD_VAR 0 18
25038: NOT
25039: IFFALSE 25099
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25041: LD_ADDR_VAR 0 5
25045: PUSH
25046: LD_VAR 0 5
25050: PUSH
25051: LD_INT 11
25053: PUSH
25054: LD_INT 30
25056: PUSH
25057: LD_INT 49
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: DIFF
25065: ST_TO_ADDR
// if not list then
25066: LD_VAR 0 5
25070: NOT
25071: IFFALSE 25075
// exit ;
25073: GO 25217
// weapon := list [ rand ( 1 , list ) ] ;
25075: LD_ADDR_VAR 0 18
25079: PUSH
25080: LD_VAR 0 5
25084: PUSH
25085: LD_INT 1
25087: PPUSH
25088: LD_VAR 0 5
25092: PPUSH
25093: CALL_OW 12
25097: ARRAY
25098: ST_TO_ADDR
// end ; if weapon then
25099: LD_VAR 0 18
25103: IFFALSE 25217
// begin tmp := CostOfWeapon ( weapon ) ;
25105: LD_ADDR_VAR 0 14
25109: PUSH
25110: LD_VAR 0 18
25114: PPUSH
25115: CALL_OW 451
25119: ST_TO_ADDR
// j := GetBase ( tower ) ;
25120: LD_ADDR_VAR 0 9
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 274
25134: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25135: LD_VAR 0 9
25139: PPUSH
25140: LD_INT 1
25142: PPUSH
25143: CALL_OW 275
25147: PUSH
25148: LD_VAR 0 14
25152: PUSH
25153: LD_INT 1
25155: ARRAY
25156: GREATEREQUAL
25157: PUSH
25158: LD_VAR 0 9
25162: PPUSH
25163: LD_INT 2
25165: PPUSH
25166: CALL_OW 275
25170: PUSH
25171: LD_VAR 0 14
25175: PUSH
25176: LD_INT 2
25178: ARRAY
25179: GREATEREQUAL
25180: AND
25181: PUSH
25182: LD_VAR 0 9
25186: PPUSH
25187: LD_INT 3
25189: PPUSH
25190: CALL_OW 275
25194: PUSH
25195: LD_VAR 0 14
25199: PUSH
25200: LD_INT 3
25202: ARRAY
25203: GREATEREQUAL
25204: AND
25205: IFFALSE 25217
// result := weapon ;
25207: LD_ADDR_VAR 0 3
25211: PUSH
25212: LD_VAR 0 18
25216: ST_TO_ADDR
// end ; end ;
25217: LD_VAR 0 3
25221: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25222: LD_INT 0
25224: PPUSH
25225: PPUSH
// result := true ;
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_INT 1
25233: ST_TO_ADDR
// if array1 = array2 then
25234: LD_VAR 0 1
25238: PUSH
25239: LD_VAR 0 2
25243: EQUAL
25244: IFFALSE 25304
// begin for i = 1 to array1 do
25246: LD_ADDR_VAR 0 4
25250: PUSH
25251: DOUBLE
25252: LD_INT 1
25254: DEC
25255: ST_TO_ADDR
25256: LD_VAR 0 1
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25300
// if array1 [ i ] <> array2 [ i ] then
25264: LD_VAR 0 1
25268: PUSH
25269: LD_VAR 0 4
25273: ARRAY
25274: PUSH
25275: LD_VAR 0 2
25279: PUSH
25280: LD_VAR 0 4
25284: ARRAY
25285: NONEQUAL
25286: IFFALSE 25298
// begin result := false ;
25288: LD_ADDR_VAR 0 3
25292: PUSH
25293: LD_INT 0
25295: ST_TO_ADDR
// break ;
25296: GO 25300
// end ;
25298: GO 25261
25300: POP
25301: POP
// end else
25302: GO 25312
// result := false ;
25304: LD_ADDR_VAR 0 3
25308: PUSH
25309: LD_INT 0
25311: ST_TO_ADDR
// end ;
25312: LD_VAR 0 3
25316: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
// if not array1 or not array2 then
25321: LD_VAR 0 1
25325: NOT
25326: PUSH
25327: LD_VAR 0 2
25331: NOT
25332: OR
25333: IFFALSE 25337
// exit ;
25335: GO 25401
// result := true ;
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_INT 1
25344: ST_TO_ADDR
// for i = 1 to array1 do
25345: LD_ADDR_VAR 0 4
25349: PUSH
25350: DOUBLE
25351: LD_INT 1
25353: DEC
25354: ST_TO_ADDR
25355: LD_VAR 0 1
25359: PUSH
25360: FOR_TO
25361: IFFALSE 25399
// if array1 [ i ] <> array2 [ i ] then
25363: LD_VAR 0 1
25367: PUSH
25368: LD_VAR 0 4
25372: ARRAY
25373: PUSH
25374: LD_VAR 0 2
25378: PUSH
25379: LD_VAR 0 4
25383: ARRAY
25384: NONEQUAL
25385: IFFALSE 25397
// begin result := false ;
25387: LD_ADDR_VAR 0 3
25391: PUSH
25392: LD_INT 0
25394: ST_TO_ADDR
// break ;
25395: GO 25399
// end ;
25397: GO 25360
25399: POP
25400: POP
// end ;
25401: LD_VAR 0 3
25405: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25406: LD_INT 0
25408: PPUSH
25409: PPUSH
25410: PPUSH
// pom := GetBase ( fac ) ;
25411: LD_ADDR_VAR 0 5
25415: PUSH
25416: LD_VAR 0 1
25420: PPUSH
25421: CALL_OW 274
25425: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25426: LD_ADDR_VAR 0 4
25430: PUSH
25431: LD_VAR 0 2
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: LD_VAR 0 2
25444: PUSH
25445: LD_INT 2
25447: ARRAY
25448: PPUSH
25449: LD_VAR 0 2
25453: PUSH
25454: LD_INT 3
25456: ARRAY
25457: PPUSH
25458: LD_VAR 0 2
25462: PUSH
25463: LD_INT 4
25465: ARRAY
25466: PPUSH
25467: CALL_OW 449
25471: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_VAR 0 5
25481: PPUSH
25482: LD_INT 1
25484: PPUSH
25485: CALL_OW 275
25489: PUSH
25490: LD_VAR 0 4
25494: PUSH
25495: LD_INT 1
25497: ARRAY
25498: GREATEREQUAL
25499: PUSH
25500: LD_VAR 0 5
25504: PPUSH
25505: LD_INT 2
25507: PPUSH
25508: CALL_OW 275
25512: PUSH
25513: LD_VAR 0 4
25517: PUSH
25518: LD_INT 2
25520: ARRAY
25521: GREATEREQUAL
25522: AND
25523: PUSH
25524: LD_VAR 0 5
25528: PPUSH
25529: LD_INT 3
25531: PPUSH
25532: CALL_OW 275
25536: PUSH
25537: LD_VAR 0 4
25541: PUSH
25542: LD_INT 3
25544: ARRAY
25545: GREATEREQUAL
25546: AND
25547: ST_TO_ADDR
// end ;
25548: LD_VAR 0 3
25552: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25553: LD_INT 0
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
// pom := GetBase ( building ) ;
25559: LD_ADDR_VAR 0 3
25563: PUSH
25564: LD_VAR 0 1
25568: PPUSH
25569: CALL_OW 274
25573: ST_TO_ADDR
// if not pom then
25574: LD_VAR 0 3
25578: NOT
25579: IFFALSE 25583
// exit ;
25581: GO 25753
// btype := GetBType ( building ) ;
25583: LD_ADDR_VAR 0 5
25587: PUSH
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 266
25597: ST_TO_ADDR
// if btype = b_armoury then
25598: LD_VAR 0 5
25602: PUSH
25603: LD_INT 4
25605: EQUAL
25606: IFFALSE 25616
// btype := b_barracks ;
25608: LD_ADDR_VAR 0 5
25612: PUSH
25613: LD_INT 5
25615: ST_TO_ADDR
// if btype = b_depot then
25616: LD_VAR 0 5
25620: PUSH
25621: LD_INT 0
25623: EQUAL
25624: IFFALSE 25634
// btype := b_warehouse ;
25626: LD_ADDR_VAR 0 5
25630: PUSH
25631: LD_INT 1
25633: ST_TO_ADDR
// if btype = b_workshop then
25634: LD_VAR 0 5
25638: PUSH
25639: LD_INT 2
25641: EQUAL
25642: IFFALSE 25652
// btype := b_factory ;
25644: LD_ADDR_VAR 0 5
25648: PUSH
25649: LD_INT 3
25651: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25652: LD_ADDR_VAR 0 4
25656: PUSH
25657: LD_VAR 0 5
25661: PPUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: CALL_OW 248
25671: PPUSH
25672: CALL_OW 450
25676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25677: LD_ADDR_VAR 0 2
25681: PUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: LD_INT 1
25689: PPUSH
25690: CALL_OW 275
25694: PUSH
25695: LD_VAR 0 4
25699: PUSH
25700: LD_INT 1
25702: ARRAY
25703: GREATEREQUAL
25704: PUSH
25705: LD_VAR 0 3
25709: PPUSH
25710: LD_INT 2
25712: PPUSH
25713: CALL_OW 275
25717: PUSH
25718: LD_VAR 0 4
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: GREATEREQUAL
25727: AND
25728: PUSH
25729: LD_VAR 0 3
25733: PPUSH
25734: LD_INT 3
25736: PPUSH
25737: CALL_OW 275
25741: PUSH
25742: LD_VAR 0 4
25746: PUSH
25747: LD_INT 3
25749: ARRAY
25750: GREATEREQUAL
25751: AND
25752: ST_TO_ADDR
// end ;
25753: LD_VAR 0 2
25757: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
25762: PPUSH
// pom := GetBase ( building ) ;
25763: LD_ADDR_VAR 0 4
25767: PUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 274
25777: ST_TO_ADDR
// if not pom then
25778: LD_VAR 0 4
25782: NOT
25783: IFFALSE 25787
// exit ;
25785: GO 25888
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25787: LD_ADDR_VAR 0 5
25791: PUSH
25792: LD_VAR 0 2
25796: PPUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 248
25806: PPUSH
25807: CALL_OW 450
25811: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25812: LD_ADDR_VAR 0 3
25816: PUSH
25817: LD_VAR 0 4
25821: PPUSH
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 275
25829: PUSH
25830: LD_VAR 0 5
25834: PUSH
25835: LD_INT 1
25837: ARRAY
25838: GREATEREQUAL
25839: PUSH
25840: LD_VAR 0 4
25844: PPUSH
25845: LD_INT 2
25847: PPUSH
25848: CALL_OW 275
25852: PUSH
25853: LD_VAR 0 5
25857: PUSH
25858: LD_INT 2
25860: ARRAY
25861: GREATEREQUAL
25862: AND
25863: PUSH
25864: LD_VAR 0 4
25868: PPUSH
25869: LD_INT 3
25871: PPUSH
25872: CALL_OW 275
25876: PUSH
25877: LD_VAR 0 5
25881: PUSH
25882: LD_INT 3
25884: ARRAY
25885: GREATEREQUAL
25886: AND
25887: ST_TO_ADDR
// end ;
25888: LD_VAR 0 3
25892: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25893: LD_INT 0
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
25904: PPUSH
25905: PPUSH
// result := false ;
25906: LD_ADDR_VAR 0 8
25910: PUSH
25911: LD_INT 0
25913: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25914: LD_VAR 0 5
25918: NOT
25919: PUSH
25920: LD_VAR 0 1
25924: NOT
25925: OR
25926: PUSH
25927: LD_VAR 0 2
25931: NOT
25932: OR
25933: PUSH
25934: LD_VAR 0 3
25938: NOT
25939: OR
25940: IFFALSE 25944
// exit ;
25942: GO 26758
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25944: LD_ADDR_VAR 0 14
25948: PUSH
25949: LD_VAR 0 1
25953: PPUSH
25954: LD_VAR 0 2
25958: PPUSH
25959: LD_VAR 0 3
25963: PPUSH
25964: LD_VAR 0 4
25968: PPUSH
25969: LD_VAR 0 5
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: CALL_OW 248
25982: PPUSH
25983: LD_INT 0
25985: PPUSH
25986: CALL 28011 0 6
25990: ST_TO_ADDR
// if not hexes then
25991: LD_VAR 0 14
25995: NOT
25996: IFFALSE 26000
// exit ;
25998: GO 26758
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26000: LD_ADDR_VAR 0 17
26004: PUSH
26005: LD_VAR 0 5
26009: PPUSH
26010: LD_INT 22
26012: PUSH
26013: LD_VAR 0 13
26017: PPUSH
26018: CALL_OW 255
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 30
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 30
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PPUSH
26059: CALL_OW 72
26063: ST_TO_ADDR
// for i = 1 to hexes do
26064: LD_ADDR_VAR 0 9
26068: PUSH
26069: DOUBLE
26070: LD_INT 1
26072: DEC
26073: ST_TO_ADDR
26074: LD_VAR 0 14
26078: PUSH
26079: FOR_TO
26080: IFFALSE 26756
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26082: LD_ADDR_VAR 0 13
26086: PUSH
26087: LD_VAR 0 14
26091: PUSH
26092: LD_VAR 0 9
26096: ARRAY
26097: PUSH
26098: LD_INT 1
26100: ARRAY
26101: PPUSH
26102: LD_VAR 0 14
26106: PUSH
26107: LD_VAR 0 9
26111: ARRAY
26112: PUSH
26113: LD_INT 2
26115: ARRAY
26116: PPUSH
26117: CALL_OW 428
26121: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26122: LD_VAR 0 14
26126: PUSH
26127: LD_VAR 0 9
26131: ARRAY
26132: PUSH
26133: LD_INT 1
26135: ARRAY
26136: PPUSH
26137: LD_VAR 0 14
26141: PUSH
26142: LD_VAR 0 9
26146: ARRAY
26147: PUSH
26148: LD_INT 2
26150: ARRAY
26151: PPUSH
26152: CALL_OW 351
26156: PUSH
26157: LD_VAR 0 14
26161: PUSH
26162: LD_VAR 0 9
26166: ARRAY
26167: PUSH
26168: LD_INT 1
26170: ARRAY
26171: PPUSH
26172: LD_VAR 0 14
26176: PUSH
26177: LD_VAR 0 9
26181: ARRAY
26182: PUSH
26183: LD_INT 2
26185: ARRAY
26186: PPUSH
26187: CALL_OW 488
26191: NOT
26192: OR
26193: PUSH
26194: LD_VAR 0 13
26198: PPUSH
26199: CALL_OW 247
26203: PUSH
26204: LD_INT 3
26206: EQUAL
26207: OR
26208: IFFALSE 26214
// exit ;
26210: POP
26211: POP
26212: GO 26758
// if not tmp then
26214: LD_VAR 0 13
26218: NOT
26219: IFFALSE 26223
// continue ;
26221: GO 26079
// result := true ;
26223: LD_ADDR_VAR 0 8
26227: PUSH
26228: LD_INT 1
26230: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26231: LD_VAR 0 6
26235: PUSH
26236: LD_VAR 0 13
26240: PPUSH
26241: CALL_OW 247
26245: PUSH
26246: LD_INT 2
26248: EQUAL
26249: AND
26250: PUSH
26251: LD_VAR 0 13
26255: PPUSH
26256: CALL_OW 263
26260: PUSH
26261: LD_INT 1
26263: EQUAL
26264: AND
26265: IFFALSE 26429
// begin if IsDrivenBy ( tmp ) then
26267: LD_VAR 0 13
26271: PPUSH
26272: CALL_OW 311
26276: IFFALSE 26280
// continue ;
26278: GO 26079
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26280: LD_VAR 0 6
26284: PPUSH
26285: LD_INT 3
26287: PUSH
26288: LD_INT 60
26290: PUSH
26291: EMPTY
26292: LIST
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 55
26303: PUSH
26304: EMPTY
26305: LIST
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PPUSH
26315: CALL_OW 72
26319: IFFALSE 26427
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26321: LD_ADDR_VAR 0 18
26325: PUSH
26326: LD_VAR 0 6
26330: PPUSH
26331: LD_INT 3
26333: PUSH
26334: LD_INT 60
26336: PUSH
26337: EMPTY
26338: LIST
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 3
26346: PUSH
26347: LD_INT 55
26349: PUSH
26350: EMPTY
26351: LIST
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 72
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: ST_TO_ADDR
// if IsInUnit ( driver ) then
26370: LD_VAR 0 18
26374: PPUSH
26375: CALL_OW 310
26379: IFFALSE 26390
// ComExit ( driver ) ;
26381: LD_VAR 0 18
26385: PPUSH
26386: CALL 51792 0 1
// AddComEnterUnit ( driver , tmp ) ;
26390: LD_VAR 0 18
26394: PPUSH
26395: LD_VAR 0 13
26399: PPUSH
26400: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26404: LD_VAR 0 18
26408: PPUSH
26409: LD_VAR 0 7
26413: PPUSH
26414: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26418: LD_VAR 0 18
26422: PPUSH
26423: CALL_OW 181
// end ; continue ;
26427: GO 26079
// end ; if not cleaners or not tmp in cleaners then
26429: LD_VAR 0 6
26433: NOT
26434: PUSH
26435: LD_VAR 0 13
26439: PUSH
26440: LD_VAR 0 6
26444: IN
26445: NOT
26446: OR
26447: IFFALSE 26754
// begin if dep then
26449: LD_VAR 0 17
26453: IFFALSE 26589
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26455: LD_ADDR_VAR 0 16
26459: PUSH
26460: LD_VAR 0 17
26464: PUSH
26465: LD_INT 1
26467: ARRAY
26468: PPUSH
26469: CALL_OW 250
26473: PPUSH
26474: LD_VAR 0 17
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: CALL_OW 254
26487: PPUSH
26488: LD_INT 5
26490: PPUSH
26491: CALL_OW 272
26495: PUSH
26496: LD_VAR 0 17
26500: PUSH
26501: LD_INT 1
26503: ARRAY
26504: PPUSH
26505: CALL_OW 251
26509: PPUSH
26510: LD_VAR 0 17
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: PPUSH
26519: CALL_OW 254
26523: PPUSH
26524: LD_INT 5
26526: PPUSH
26527: CALL_OW 273
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26536: LD_VAR 0 16
26540: PUSH
26541: LD_INT 1
26543: ARRAY
26544: PPUSH
26545: LD_VAR 0 16
26549: PUSH
26550: LD_INT 2
26552: ARRAY
26553: PPUSH
26554: CALL_OW 488
26558: IFFALSE 26589
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26560: LD_VAR 0 13
26564: PPUSH
26565: LD_VAR 0 16
26569: PUSH
26570: LD_INT 1
26572: ARRAY
26573: PPUSH
26574: LD_VAR 0 16
26578: PUSH
26579: LD_INT 2
26581: ARRAY
26582: PPUSH
26583: CALL_OW 111
// continue ;
26587: GO 26079
// end ; end ; r := GetDir ( tmp ) ;
26589: LD_ADDR_VAR 0 15
26593: PUSH
26594: LD_VAR 0 13
26598: PPUSH
26599: CALL_OW 254
26603: ST_TO_ADDR
// if r = 5 then
26604: LD_VAR 0 15
26608: PUSH
26609: LD_INT 5
26611: EQUAL
26612: IFFALSE 26622
// r := 0 ;
26614: LD_ADDR_VAR 0 15
26618: PUSH
26619: LD_INT 0
26621: ST_TO_ADDR
// for j = r to 5 do
26622: LD_ADDR_VAR 0 10
26626: PUSH
26627: DOUBLE
26628: LD_VAR 0 15
26632: DEC
26633: ST_TO_ADDR
26634: LD_INT 5
26636: PUSH
26637: FOR_TO
26638: IFFALSE 26752
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26640: LD_ADDR_VAR 0 11
26644: PUSH
26645: LD_VAR 0 13
26649: PPUSH
26650: CALL_OW 250
26654: PPUSH
26655: LD_VAR 0 10
26659: PPUSH
26660: LD_INT 2
26662: PPUSH
26663: CALL_OW 272
26667: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26668: LD_ADDR_VAR 0 12
26672: PUSH
26673: LD_VAR 0 13
26677: PPUSH
26678: CALL_OW 251
26682: PPUSH
26683: LD_VAR 0 10
26687: PPUSH
26688: LD_INT 2
26690: PPUSH
26691: CALL_OW 273
26695: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26696: LD_VAR 0 11
26700: PPUSH
26701: LD_VAR 0 12
26705: PPUSH
26706: CALL_OW 488
26710: PUSH
26711: LD_VAR 0 11
26715: PPUSH
26716: LD_VAR 0 12
26720: PPUSH
26721: CALL_OW 428
26725: NOT
26726: AND
26727: IFFALSE 26750
// begin ComMoveXY ( tmp , _x , _y ) ;
26729: LD_VAR 0 13
26733: PPUSH
26734: LD_VAR 0 11
26738: PPUSH
26739: LD_VAR 0 12
26743: PPUSH
26744: CALL_OW 111
// break ;
26748: GO 26752
// end ; end ;
26750: GO 26637
26752: POP
26753: POP
// end ; end ;
26754: GO 26079
26756: POP
26757: POP
// end ;
26758: LD_VAR 0 8
26762: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26763: LD_INT 0
26765: PPUSH
// result := true ;
26766: LD_ADDR_VAR 0 3
26770: PUSH
26771: LD_INT 1
26773: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26774: LD_VAR 0 2
26778: PUSH
26779: LD_INT 24
26781: DOUBLE
26782: EQUAL
26783: IFTRUE 26793
26785: LD_INT 33
26787: DOUBLE
26788: EQUAL
26789: IFTRUE 26793
26791: GO 26818
26793: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26794: LD_ADDR_VAR 0 3
26798: PUSH
26799: LD_INT 32
26801: PPUSH
26802: LD_VAR 0 1
26806: PPUSH
26807: CALL_OW 321
26811: PUSH
26812: LD_INT 2
26814: EQUAL
26815: ST_TO_ADDR
26816: GO 27134
26818: LD_INT 20
26820: DOUBLE
26821: EQUAL
26822: IFTRUE 26826
26824: GO 26851
26826: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26827: LD_ADDR_VAR 0 3
26831: PUSH
26832: LD_INT 6
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 321
26844: PUSH
26845: LD_INT 2
26847: EQUAL
26848: ST_TO_ADDR
26849: GO 27134
26851: LD_INT 22
26853: DOUBLE
26854: EQUAL
26855: IFTRUE 26865
26857: LD_INT 36
26859: DOUBLE
26860: EQUAL
26861: IFTRUE 26865
26863: GO 26890
26865: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_INT 15
26873: PPUSH
26874: LD_VAR 0 1
26878: PPUSH
26879: CALL_OW 321
26883: PUSH
26884: LD_INT 2
26886: EQUAL
26887: ST_TO_ADDR
26888: GO 27134
26890: LD_INT 30
26892: DOUBLE
26893: EQUAL
26894: IFTRUE 26898
26896: GO 26923
26898: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26899: LD_ADDR_VAR 0 3
26903: PUSH
26904: LD_INT 20
26906: PPUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 321
26916: PUSH
26917: LD_INT 2
26919: EQUAL
26920: ST_TO_ADDR
26921: GO 27134
26923: LD_INT 28
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26937
26929: LD_INT 21
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26937
26935: GO 26962
26937: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26938: LD_ADDR_VAR 0 3
26942: PUSH
26943: LD_INT 21
26945: PPUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 321
26955: PUSH
26956: LD_INT 2
26958: EQUAL
26959: ST_TO_ADDR
26960: GO 27134
26962: LD_INT 16
26964: DOUBLE
26965: EQUAL
26966: IFTRUE 26970
26968: GO 26995
26970: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26971: LD_ADDR_VAR 0 3
26975: PUSH
26976: LD_INT 84
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 321
26988: PUSH
26989: LD_INT 2
26991: EQUAL
26992: ST_TO_ADDR
26993: GO 27134
26995: LD_INT 19
26997: DOUBLE
26998: EQUAL
26999: IFTRUE 27009
27001: LD_INT 23
27003: DOUBLE
27004: EQUAL
27005: IFTRUE 27009
27007: GO 27034
27009: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 83
27017: PPUSH
27018: LD_VAR 0 1
27022: PPUSH
27023: CALL_OW 321
27027: PUSH
27028: LD_INT 2
27030: EQUAL
27031: ST_TO_ADDR
27032: GO 27134
27034: LD_INT 17
27036: DOUBLE
27037: EQUAL
27038: IFTRUE 27042
27040: GO 27067
27042: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 39
27050: PPUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 321
27060: PUSH
27061: LD_INT 2
27063: EQUAL
27064: ST_TO_ADDR
27065: GO 27134
27067: LD_INT 18
27069: DOUBLE
27070: EQUAL
27071: IFTRUE 27075
27073: GO 27100
27075: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27076: LD_ADDR_VAR 0 3
27080: PUSH
27081: LD_INT 40
27083: PPUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 321
27093: PUSH
27094: LD_INT 2
27096: EQUAL
27097: ST_TO_ADDR
27098: GO 27134
27100: LD_INT 27
27102: DOUBLE
27103: EQUAL
27104: IFTRUE 27108
27106: GO 27133
27108: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: LD_INT 35
27116: PPUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 321
27126: PUSH
27127: LD_INT 2
27129: EQUAL
27130: ST_TO_ADDR
27131: GO 27134
27133: POP
// end ;
27134: LD_VAR 0 3
27138: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27139: LD_INT 0
27141: PPUSH
27142: PPUSH
27143: PPUSH
27144: PPUSH
27145: PPUSH
27146: PPUSH
27147: PPUSH
27148: PPUSH
27149: PPUSH
27150: PPUSH
27151: PPUSH
// result := false ;
27152: LD_ADDR_VAR 0 6
27156: PUSH
27157: LD_INT 0
27159: ST_TO_ADDR
// if btype = b_depot then
27160: LD_VAR 0 2
27164: PUSH
27165: LD_INT 0
27167: EQUAL
27168: IFFALSE 27180
// begin result := true ;
27170: LD_ADDR_VAR 0 6
27174: PUSH
27175: LD_INT 1
27177: ST_TO_ADDR
// exit ;
27178: GO 28006
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27180: LD_VAR 0 1
27184: NOT
27185: PUSH
27186: LD_VAR 0 1
27190: PPUSH
27191: CALL_OW 266
27195: PUSH
27196: LD_INT 0
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: IN
27206: NOT
27207: OR
27208: PUSH
27209: LD_VAR 0 2
27213: NOT
27214: OR
27215: PUSH
27216: LD_VAR 0 5
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 2
27229: PUSH
27230: LD_INT 3
27232: PUSH
27233: LD_INT 4
27235: PUSH
27236: LD_INT 5
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: IN
27247: NOT
27248: OR
27249: PUSH
27250: LD_VAR 0 3
27254: PPUSH
27255: LD_VAR 0 4
27259: PPUSH
27260: CALL_OW 488
27264: NOT
27265: OR
27266: IFFALSE 27270
// exit ;
27268: GO 28006
// side := GetSide ( depot ) ;
27270: LD_ADDR_VAR 0 9
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 255
27284: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27285: LD_VAR 0 9
27289: PPUSH
27290: LD_VAR 0 2
27294: PPUSH
27295: CALL 26763 0 2
27299: NOT
27300: IFFALSE 27304
// exit ;
27302: GO 28006
// pom := GetBase ( depot ) ;
27304: LD_ADDR_VAR 0 10
27308: PUSH
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 274
27318: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27319: LD_ADDR_VAR 0 11
27323: PUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 248
27338: PPUSH
27339: CALL_OW 450
27343: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27344: LD_VAR 0 10
27348: PPUSH
27349: LD_INT 1
27351: PPUSH
27352: CALL_OW 275
27356: PUSH
27357: LD_VAR 0 11
27361: PUSH
27362: LD_INT 1
27364: ARRAY
27365: GREATEREQUAL
27366: PUSH
27367: LD_VAR 0 10
27371: PPUSH
27372: LD_INT 2
27374: PPUSH
27375: CALL_OW 275
27379: PUSH
27380: LD_VAR 0 11
27384: PUSH
27385: LD_INT 2
27387: ARRAY
27388: GREATEREQUAL
27389: AND
27390: PUSH
27391: LD_VAR 0 10
27395: PPUSH
27396: LD_INT 3
27398: PPUSH
27399: CALL_OW 275
27403: PUSH
27404: LD_VAR 0 11
27408: PUSH
27409: LD_INT 3
27411: ARRAY
27412: GREATEREQUAL
27413: AND
27414: NOT
27415: IFFALSE 27419
// exit ;
27417: GO 28006
// if GetBType ( depot ) = b_depot then
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL_OW 266
27428: PUSH
27429: LD_INT 0
27431: EQUAL
27432: IFFALSE 27444
// dist := 28 else
27434: LD_ADDR_VAR 0 14
27438: PUSH
27439: LD_INT 28
27441: ST_TO_ADDR
27442: GO 27452
// dist := 36 ;
27444: LD_ADDR_VAR 0 14
27448: PUSH
27449: LD_INT 36
27451: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27452: LD_VAR 0 1
27456: PPUSH
27457: LD_VAR 0 3
27461: PPUSH
27462: LD_VAR 0 4
27466: PPUSH
27467: CALL_OW 297
27471: PUSH
27472: LD_VAR 0 14
27476: GREATER
27477: IFFALSE 27481
// exit ;
27479: GO 28006
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27481: LD_ADDR_VAR 0 12
27485: PUSH
27486: LD_VAR 0 2
27490: PPUSH
27491: LD_VAR 0 3
27495: PPUSH
27496: LD_VAR 0 4
27500: PPUSH
27501: LD_VAR 0 5
27505: PPUSH
27506: LD_VAR 0 1
27510: PPUSH
27511: CALL_OW 248
27515: PPUSH
27516: LD_INT 0
27518: PPUSH
27519: CALL 28011 0 6
27523: ST_TO_ADDR
// if not hexes then
27524: LD_VAR 0 12
27528: NOT
27529: IFFALSE 27533
// exit ;
27531: GO 28006
// hex := GetHexInfo ( x , y ) ;
27533: LD_ADDR_VAR 0 15
27537: PUSH
27538: LD_VAR 0 3
27542: PPUSH
27543: LD_VAR 0 4
27547: PPUSH
27548: CALL_OW 546
27552: ST_TO_ADDR
// if hex [ 1 ] then
27553: LD_VAR 0 15
27557: PUSH
27558: LD_INT 1
27560: ARRAY
27561: IFFALSE 27565
// exit ;
27563: GO 28006
// height := hex [ 2 ] ;
27565: LD_ADDR_VAR 0 13
27569: PUSH
27570: LD_VAR 0 15
27574: PUSH
27575: LD_INT 2
27577: ARRAY
27578: ST_TO_ADDR
// for i = 1 to hexes do
27579: LD_ADDR_VAR 0 7
27583: PUSH
27584: DOUBLE
27585: LD_INT 1
27587: DEC
27588: ST_TO_ADDR
27589: LD_VAR 0 12
27593: PUSH
27594: FOR_TO
27595: IFFALSE 27925
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27597: LD_VAR 0 12
27601: PUSH
27602: LD_VAR 0 7
27606: ARRAY
27607: PUSH
27608: LD_INT 1
27610: ARRAY
27611: PPUSH
27612: LD_VAR 0 12
27616: PUSH
27617: LD_VAR 0 7
27621: ARRAY
27622: PUSH
27623: LD_INT 2
27625: ARRAY
27626: PPUSH
27627: CALL_OW 488
27631: NOT
27632: PUSH
27633: LD_VAR 0 12
27637: PUSH
27638: LD_VAR 0 7
27642: ARRAY
27643: PUSH
27644: LD_INT 1
27646: ARRAY
27647: PPUSH
27648: LD_VAR 0 12
27652: PUSH
27653: LD_VAR 0 7
27657: ARRAY
27658: PUSH
27659: LD_INT 2
27661: ARRAY
27662: PPUSH
27663: CALL_OW 428
27667: PUSH
27668: LD_INT 0
27670: GREATER
27671: OR
27672: PUSH
27673: LD_VAR 0 12
27677: PUSH
27678: LD_VAR 0 7
27682: ARRAY
27683: PUSH
27684: LD_INT 1
27686: ARRAY
27687: PPUSH
27688: LD_VAR 0 12
27692: PUSH
27693: LD_VAR 0 7
27697: ARRAY
27698: PUSH
27699: LD_INT 2
27701: ARRAY
27702: PPUSH
27703: CALL_OW 351
27707: OR
27708: IFFALSE 27714
// exit ;
27710: POP
27711: POP
27712: GO 28006
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27714: LD_ADDR_VAR 0 8
27718: PUSH
27719: LD_VAR 0 12
27723: PUSH
27724: LD_VAR 0 7
27728: ARRAY
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PPUSH
27734: LD_VAR 0 12
27738: PUSH
27739: LD_VAR 0 7
27743: ARRAY
27744: PUSH
27745: LD_INT 2
27747: ARRAY
27748: PPUSH
27749: CALL_OW 546
27753: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27754: LD_VAR 0 8
27758: PUSH
27759: LD_INT 1
27761: ARRAY
27762: PUSH
27763: LD_VAR 0 8
27767: PUSH
27768: LD_INT 2
27770: ARRAY
27771: PUSH
27772: LD_VAR 0 13
27776: PUSH
27777: LD_INT 2
27779: PLUS
27780: GREATER
27781: OR
27782: PUSH
27783: LD_VAR 0 8
27787: PUSH
27788: LD_INT 2
27790: ARRAY
27791: PUSH
27792: LD_VAR 0 13
27796: PUSH
27797: LD_INT 2
27799: MINUS
27800: LESS
27801: OR
27802: PUSH
27803: LD_VAR 0 8
27807: PUSH
27808: LD_INT 3
27810: ARRAY
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 8
27817: PUSH
27818: LD_INT 9
27820: PUSH
27821: LD_INT 10
27823: PUSH
27824: LD_INT 11
27826: PUSH
27827: LD_INT 12
27829: PUSH
27830: LD_INT 13
27832: PUSH
27833: LD_INT 16
27835: PUSH
27836: LD_INT 17
27838: PUSH
27839: LD_INT 18
27841: PUSH
27842: LD_INT 19
27844: PUSH
27845: LD_INT 20
27847: PUSH
27848: LD_INT 21
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: IN
27866: NOT
27867: OR
27868: PUSH
27869: LD_VAR 0 8
27873: PUSH
27874: LD_INT 5
27876: ARRAY
27877: NOT
27878: OR
27879: PUSH
27880: LD_VAR 0 8
27884: PUSH
27885: LD_INT 6
27887: ARRAY
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 7
27897: PUSH
27898: LD_INT 9
27900: PUSH
27901: LD_INT 10
27903: PUSH
27904: LD_INT 11
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: IN
27915: NOT
27916: OR
27917: IFFALSE 27923
// exit ;
27919: POP
27920: POP
27921: GO 28006
// end ;
27923: GO 27594
27925: POP
27926: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27927: LD_VAR 0 9
27931: PPUSH
27932: LD_VAR 0 3
27936: PPUSH
27937: LD_VAR 0 4
27941: PPUSH
27942: LD_INT 20
27944: PPUSH
27945: CALL 19929 0 4
27949: PUSH
27950: LD_INT 4
27952: ARRAY
27953: IFFALSE 27957
// exit ;
27955: GO 28006
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27957: LD_VAR 0 2
27961: PUSH
27962: LD_INT 29
27964: PUSH
27965: LD_INT 30
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: IN
27972: PUSH
27973: LD_VAR 0 3
27977: PPUSH
27978: LD_VAR 0 4
27982: PPUSH
27983: LD_VAR 0 9
27987: PPUSH
27988: CALL_OW 440
27992: NOT
27993: AND
27994: IFFALSE 27998
// exit ;
27996: GO 28006
// result := true ;
27998: LD_ADDR_VAR 0 6
28002: PUSH
28003: LD_INT 1
28005: ST_TO_ADDR
// end ;
28006: LD_VAR 0 6
28010: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28011: LD_INT 0
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
28020: PPUSH
28021: PPUSH
28022: PPUSH
28023: PPUSH
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
28032: PPUSH
28033: PPUSH
28034: PPUSH
28035: PPUSH
28036: PPUSH
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
28047: PPUSH
28048: PPUSH
28049: PPUSH
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
// result = [ ] ;
28071: LD_ADDR_VAR 0 7
28075: PUSH
28076: EMPTY
28077: ST_TO_ADDR
// temp_list = [ ] ;
28078: LD_ADDR_VAR 0 9
28082: PUSH
28083: EMPTY
28084: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28085: LD_VAR 0 4
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 3
28101: PUSH
28102: LD_INT 4
28104: PUSH
28105: LD_INT 5
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: IN
28116: NOT
28117: PUSH
28118: LD_VAR 0 1
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: IN
28133: PUSH
28134: LD_VAR 0 5
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 3
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: LIST
28152: IN
28153: NOT
28154: AND
28155: OR
28156: IFFALSE 28160
// exit ;
28158: GO 46551
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28160: LD_VAR 0 1
28164: PUSH
28165: LD_INT 6
28167: PUSH
28168: LD_INT 7
28170: PUSH
28171: LD_INT 8
28173: PUSH
28174: LD_INT 13
28176: PUSH
28177: LD_INT 12
28179: PUSH
28180: LD_INT 15
28182: PUSH
28183: LD_INT 11
28185: PUSH
28186: LD_INT 14
28188: PUSH
28189: LD_INT 10
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: IN
28203: IFFALSE 28213
// btype = b_lab ;
28205: LD_ADDR_VAR 0 1
28209: PUSH
28210: LD_INT 6
28212: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28213: LD_VAR 0 6
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: LIST
28231: IN
28232: NOT
28233: PUSH
28234: LD_VAR 0 1
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: LD_INT 6
28253: PUSH
28254: LD_INT 36
28256: PUSH
28257: LD_INT 4
28259: PUSH
28260: LD_INT 5
28262: PUSH
28263: LD_INT 31
28265: PUSH
28266: LD_INT 32
28268: PUSH
28269: LD_INT 33
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: IN
28285: NOT
28286: PUSH
28287: LD_VAR 0 6
28291: PUSH
28292: LD_INT 1
28294: EQUAL
28295: AND
28296: OR
28297: PUSH
28298: LD_VAR 0 1
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: LD_INT 3
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: IN
28313: NOT
28314: PUSH
28315: LD_VAR 0 6
28319: PUSH
28320: LD_INT 2
28322: EQUAL
28323: AND
28324: OR
28325: IFFALSE 28335
// mode = 0 ;
28327: LD_ADDR_VAR 0 6
28331: PUSH
28332: LD_INT 0
28334: ST_TO_ADDR
// case mode of 0 :
28335: LD_VAR 0 6
28339: PUSH
28340: LD_INT 0
28342: DOUBLE
28343: EQUAL
28344: IFTRUE 28348
28346: GO 39801
28348: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28349: LD_ADDR_VAR 0 11
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 1
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 0
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: LD_INT 2
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 0
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 2
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 2
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 1
28484: NEG
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28542: LD_ADDR_VAR 0 12
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 1
28600: NEG
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: LD_INT 2
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: LD_INT 1
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 1
28654: NEG
28655: PUSH
28656: LD_INT 1
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 2
28665: NEG
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 2
28676: NEG
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 2
28688: NEG
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 3
28699: NEG
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 3
28710: NEG
28711: PUSH
28712: LD_INT 1
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28738: LD_ADDR_VAR 0 13
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 2
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: PUSH
28832: LD_INT 1
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: LD_INT 1
28865: NEG
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 2
28873: NEG
28874: PUSH
28875: LD_INT 2
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 2
28885: NEG
28886: PUSH
28887: LD_INT 3
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 3
28897: NEG
28898: PUSH
28899: LD_INT 2
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: NEG
28910: PUSH
28911: LD_INT 3
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28937: LD_ADDR_VAR 0 14
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 0
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 0
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 0
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: LD_INT 2
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: LD_INT 3
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 0
29095: PUSH
29096: LD_INT 3
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29133: LD_ADDR_VAR 0 15
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 1
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 2
29256: NEG
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: NEG
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 1
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 3
29300: PUSH
29301: LD_INT 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29326: LD_ADDR_VAR 0 16
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: NEG
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 2
29461: NEG
29462: PUSH
29463: LD_INT 2
29465: NEG
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 2
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 3
29483: PUSH
29484: LD_INT 3
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29519: LD_ADDR_VAR 0 17
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 0
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 2
29644: PUSH
29645: LD_INT 1
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: NEG
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29749: LD_ADDR_VAR 0 18
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 2
29925: NEG
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 2
29936: NEG
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29979: LD_ADDR_VAR 0 19
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: LD_INT 1
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: LD_INT 2
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 2
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 2
30155: NEG
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 2
30166: NEG
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: LD_INT 2
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30209: LD_ADDR_VAR 0 20
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 1
30229: NEG
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 2
30305: NEG
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 1
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: LD_INT 0
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30439: LD_ADDR_VAR 0 21
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 0
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 0
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: LD_INT 1
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 2
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: LD_INT 1
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 2
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 2
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 2
30615: NEG
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 2
30638: NEG
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30669: LD_ADDR_VAR 0 22
30673: PUSH
30674: LD_INT 0
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: LD_INT 2
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30899: LD_ADDR_VAR 0 23
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: LD_INT 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 0
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 2
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 2
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 2
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 3
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 2
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31179: LD_ADDR_VAR 0 24
31183: PUSH
31184: LD_INT 0
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 0
31227: PUSH
31228: LD_INT 1
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 1
31248: NEG
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: LD_INT 2
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: LD_INT 2
31275: NEG
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 1
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 3
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 3
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31455: LD_ADDR_VAR 0 25
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 2
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 2
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 3
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 3
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 3
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 3
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31729: LD_ADDR_VAR 0 26
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: LD_INT 1
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: LD_INT 1
31802: NEG
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: NEG
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: NEG
31917: PUSH
31918: LD_INT 1
31920: NEG
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: LD_INT 2
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 3
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 3
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32005: LD_ADDR_VAR 0 27
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 2
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: NEG
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 3
32250: NEG
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32285: LD_ADDR_VAR 0 28
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 2
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 3
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: LD_INT 3
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 3
32520: NEG
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 3
32532: NEG
32533: PUSH
32534: LD_INT 2
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32567: LD_ADDR_VAR 0 29
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: NEG
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 2
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: NEG
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 2
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32846: LD_ADDR_VAR 0 30
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: NEG
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33124: LD_ADDR_VAR 0 31
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 1
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 2
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 0
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: NEG
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: NEG
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 3
33367: NEG
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33402: LD_ADDR_VAR 0 32
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 0
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 3
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 3
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33680: LD_ADDR_VAR 0 33
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: NEG
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 3
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: LD_INT 3
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 3
33924: NEG
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33959: LD_ADDR_VAR 0 34
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 2
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 2
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 2
34115: NEG
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: LD_INT 2
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 3
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 2
34193: NEG
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: LD_INT 1
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34239: LD_ADDR_VAR 0 35
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 0
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: NEG
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34351: LD_ADDR_VAR 0 36
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 0
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34463: LD_ADDR_VAR 0 37
34467: PUSH
34468: LD_INT 0
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: NEG
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34575: LD_ADDR_VAR 0 38
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 2
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34687: LD_ADDR_VAR 0 39
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34799: LD_ADDR_VAR 0 40
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 0
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34911: LD_ADDR_VAR 0 41
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 0
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 2
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 2
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 2
35089: NEG
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: NEG
35102: PUSH
35103: LD_INT 3
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 3
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 3
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 3
35185: NEG
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: LD_INT 2
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 3
35220: NEG
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35261: LD_ADDR_VAR 0 42
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 2
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: LD_INT 3
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 3
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: LD_INT 3
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 3
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: LD_INT 3
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: LD_INT 3
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 3
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: LD_INT 3
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: NEG
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 3
35570: NEG
35571: PUSH
35572: LD_INT 3
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35611: LD_ADDR_VAR 0 43
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 2
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 2
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 3
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 3
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 3
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 3
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 3
35907: NEG
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 3
35918: NEG
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35959: LD_ADDR_VAR 0 44
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 1
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 2
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 2
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: LD_INT 2
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: LD_INT 3
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 3
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 3
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 3
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 3
36202: PUSH
36203: LD_INT 3
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: PUSH
36213: LD_INT 3
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 3
36233: NEG
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 3
36244: NEG
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 3
36256: NEG
36257: PUSH
36258: LD_INT 2
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 3
36268: NEG
36269: PUSH
36270: LD_INT 3
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36309: LD_ADDR_VAR 0 45
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 1
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 3
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 3
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 3
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: LD_INT 3
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: NEG
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36659: LD_ADDR_VAR 0 46
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 3
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 3
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 3
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 3
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37007: LD_ADDR_VAR 0 47
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37158: LD_ADDR_VAR 0 48
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: NEG
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37305: LD_ADDR_VAR 0 49
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 2
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 2
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37449: LD_ADDR_VAR 0 50
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 1
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37593: LD_ADDR_VAR 0 51
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 2
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37740: LD_ADDR_VAR 0 52
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: NEG
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: NEG
37856: PUSH
37857: LD_INT 1
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37891: LD_ADDR_VAR 0 53
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: NEG
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 2
37987: NEG
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: LD_INT 1
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38121: LD_ADDR_VAR 0 54
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: LD_INT 2
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: NEG
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 2
38320: NEG
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38351: LD_ADDR_VAR 0 55
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: LD_INT 0
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 0
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: NEG
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 2
38436: NEG
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 2
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 2
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38581: LD_ADDR_VAR 0 56
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 2
38768: NEG
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38811: LD_ADDR_VAR 0 57
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 1
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 2
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 2
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39041: LD_ADDR_VAR 0 58
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: LD_INT 0
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: NEG
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 2
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 2
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 0
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39271: LD_ADDR_VAR 0 59
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39359: LD_ADDR_VAR 0 60
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39447: LD_ADDR_VAR 0 61
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39535: LD_ADDR_VAR 0 62
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39623: LD_ADDR_VAR 0 63
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39711: LD_ADDR_VAR 0 64
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
// end ; 1 :
39799: GO 45696
39801: LD_INT 1
39803: DOUBLE
39804: EQUAL
39805: IFTRUE 39809
39807: GO 42432
39809: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39810: LD_ADDR_VAR 0 11
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39854: LD_ADDR_VAR 0 12
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 3
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39895: LD_ADDR_VAR 0 13
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: LD_INT 2
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 3
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39935: LD_ADDR_VAR 0 14
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 3
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39976: LD_ADDR_VAR 0 15
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 3
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 3
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: LIST
40019: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40020: LD_ADDR_VAR 0 16
40024: PUSH
40025: LD_INT 2
40027: NEG
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 3
40039: NEG
40040: PUSH
40041: LD_INT 2
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 3
40051: NEG
40052: PUSH
40053: LD_INT 3
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40066: LD_ADDR_VAR 0 17
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40110: LD_ADDR_VAR 0 18
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: LIST
40150: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40151: LD_ADDR_VAR 0 19
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: LD_INT 3
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 3
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40191: LD_ADDR_VAR 0 20
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 3
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40232: LD_ADDR_VAR 0 21
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 3
40250: NEG
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 3
40261: NEG
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40276: LD_ADDR_VAR 0 22
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: LD_INT 3
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 3
40295: NEG
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 3
40307: NEG
40308: PUSH
40309: LD_INT 3
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40322: LD_ADDR_VAR 0 23
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 3
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 4
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40366: LD_ADDR_VAR 0 24
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 4
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40407: LD_ADDR_VAR 0 25
40411: PUSH
40412: LD_INT 3
40414: PUSH
40415: LD_INT 3
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 4
40424: PUSH
40425: LD_INT 3
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 3
40434: PUSH
40435: LD_INT 4
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40447: LD_ADDR_VAR 0 26
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 4
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 3
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40488: LD_ADDR_VAR 0 27
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 3
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 4
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40532: LD_ADDR_VAR 0 28
40536: PUSH
40537: LD_INT 3
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: LD_INT 4
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 4
40563: NEG
40564: PUSH
40565: LD_INT 3
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40578: LD_ADDR_VAR 0 29
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 3
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: LD_INT 4
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: LD_INT 4
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: LD_INT 3
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 5
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 5
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 4
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 6
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 0
40699: PUSH
40700: LD_INT 6
40702: NEG
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 5
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40733: LD_ADDR_VAR 0 30
40737: PUSH
40738: LD_INT 2
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 4
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 4
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 4
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 5
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 5
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 5
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 6
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 6
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40876: LD_ADDR_VAR 0 31
40880: PUSH
40881: LD_INT 3
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 3
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 4
40913: PUSH
40914: LD_INT 3
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: PUSH
40934: LD_INT 4
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 5
40943: PUSH
40944: LD_INT 4
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 5
40953: PUSH
40954: LD_INT 5
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 4
40963: PUSH
40964: LD_INT 5
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 6
40973: PUSH
40974: LD_INT 5
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 6
40983: PUSH
40984: LD_INT 6
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 5
40993: PUSH
40994: LD_INT 6
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41015: LD_ADDR_VAR 0 32
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 3
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 3
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 4
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 3
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 5
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 5
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 4
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 6
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 6
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 5
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41158: LD_ADDR_VAR 0 33
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 4
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 4
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 5
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 5
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 5
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 6
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 6
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41313: LD_ADDR_VAR 0 34
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 3
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 3
41344: NEG
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 3
41356: NEG
41357: PUSH
41358: LD_INT 4
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 4
41368: NEG
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 4
41380: NEG
41381: PUSH
41382: LD_INT 4
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 4
41392: NEG
41393: PUSH
41394: LD_INT 5
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 5
41404: NEG
41405: PUSH
41406: LD_INT 4
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 5
41416: NEG
41417: PUSH
41418: LD_INT 5
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 5
41428: NEG
41429: PUSH
41430: LD_INT 6
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 6
41440: NEG
41441: PUSH
41442: LD_INT 5
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 6
41452: NEG
41453: PUSH
41454: LD_INT 6
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41476: LD_ADDR_VAR 0 41
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 2
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41520: LD_ADDR_VAR 0 42
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41561: LD_ADDR_VAR 0 43
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41601: LD_ADDR_VAR 0 44
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 3
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 2
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41642: LD_ADDR_VAR 0 45
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41686: LD_ADDR_VAR 0 46
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41732: LD_ADDR_VAR 0 47
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 3
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: LD_INT 3
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41765: LD_ADDR_VAR 0 48
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41796: LD_ADDR_VAR 0 49
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41825: LD_ADDR_VAR 0 50
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41854: LD_ADDR_VAR 0 51
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41885: LD_ADDR_VAR 0 52
41889: PUSH
41890: LD_INT 3
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41918: LD_ADDR_VAR 0 53
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 3
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 3
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41962: LD_ADDR_VAR 0 54
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 3
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42003: LD_ADDR_VAR 0 55
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 3
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 3
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42043: LD_ADDR_VAR 0 56
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: LD_INT 3
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 3
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: NEG
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42084: LD_ADDR_VAR 0 57
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 3
42113: NEG
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42128: LD_ADDR_VAR 0 58
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 3
42139: NEG
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: NEG
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42174: LD_ADDR_VAR 0 59
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42218: LD_ADDR_VAR 0 60
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42259: LD_ADDR_VAR 0 61
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42299: LD_ADDR_VAR 0 62
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42340: LD_ADDR_VAR 0 63
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42384: LD_ADDR_VAR 0 64
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// end ; 2 :
42430: GO 45696
42432: LD_INT 2
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42440
42438: GO 45695
42440: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42441: LD_ADDR_VAR 0 29
42445: PUSH
42446: LD_INT 4
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 4
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 5
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 5
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 4
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 5
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 3
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: LD_INT 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 4
42561: PUSH
42562: LD_INT 3
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 4
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 3
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 4
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 4
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 4
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: LD_INT 4
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: LD_INT 5
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 5
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 4
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 3
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 3
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 4
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 4
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 4
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: LD_INT 4
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 4
42838: NEG
42839: PUSH
42840: LD_INT 5
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 4
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 4
42874: NEG
42875: PUSH
42876: LD_INT 3
42878: NEG
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 5
42886: NEG
42887: PUSH
42888: LD_INT 4
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 5
42898: NEG
42899: PUSH
42900: LD_INT 5
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 3
42910: NEG
42911: PUSH
42912: LD_INT 5
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 5
42922: NEG
42923: PUSH
42924: LD_INT 3
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42979: LD_ADDR_VAR 0 30
42983: PUSH
42984: LD_INT 4
42986: PUSH
42987: LD_INT 4
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 4
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 5
43006: PUSH
43007: LD_INT 4
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 5
43016: PUSH
43017: LD_INT 5
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 4
43026: PUSH
43027: LD_INT 5
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 3
43036: PUSH
43037: LD_INT 4
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 5
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 3
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 4
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 4
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 4
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 4
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 4
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 4
43214: NEG
43215: PUSH
43216: LD_INT 1
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 5
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 5
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 5
43248: NEG
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: LD_INT 2
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 3
43271: NEG
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 3
43283: NEG
43284: PUSH
43285: LD_INT 4
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 4
43331: NEG
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 4
43343: NEG
43344: PUSH
43345: LD_INT 4
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: LD_INT 4
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 4
43367: NEG
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 4
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 5
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 4
43404: NEG
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 4
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 5
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: LD_INT 5
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43526: LD_ADDR_VAR 0 31
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 4
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 3
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 4
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: LD_INT 5
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 5
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 4
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: NEG
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 5
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 3
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 4
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 4
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 4
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 4
43728: NEG
43729: PUSH
43730: LD_INT 4
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 4
43740: NEG
43741: PUSH
43742: LD_INT 5
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: NEG
43753: PUSH
43754: LD_INT 4
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 3
43764: NEG
43765: PUSH
43766: LD_INT 3
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 4
43776: NEG
43777: PUSH
43778: LD_INT 3
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 5
43788: NEG
43789: PUSH
43790: LD_INT 4
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 5
43800: NEG
43801: PUSH
43802: LD_INT 5
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: LD_INT 5
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 5
43824: NEG
43825: PUSH
43826: LD_INT 3
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 4
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 4
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 2
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 4
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 4
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 4
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 5
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 4
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 5
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44076: LD_ADDR_VAR 0 32
44080: PUSH
44081: LD_INT 4
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 4
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 4
44128: NEG
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 5
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 5
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 5
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 3
44174: NEG
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 3
44197: NEG
44198: PUSH
44199: LD_INT 4
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 2
44209: NEG
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 3
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 4
44257: NEG
44258: PUSH
44259: LD_INT 4
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 4
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 4
44281: NEG
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: LD_INT 4
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 5
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 4
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 3
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 4
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 5
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 3
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 5
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 4
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 4
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 4
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: LD_INT 4
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 4
44498: PUSH
44499: LD_INT 3
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 5
44508: PUSH
44509: LD_INT 4
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 5
44518: PUSH
44519: LD_INT 5
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 4
44528: PUSH
44529: LD_INT 5
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: LD_INT 4
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 5
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 5
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44623: LD_ADDR_VAR 0 33
44627: PUSH
44628: LD_INT 4
44630: NEG
44631: PUSH
44632: LD_INT 4
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 4
44642: NEG
44643: PUSH
44644: LD_INT 5
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: LD_INT 4
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: NEG
44667: PUSH
44668: LD_INT 3
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 4
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 5
44690: NEG
44691: PUSH
44692: LD_INT 4
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 5
44702: NEG
44703: PUSH
44704: LD_INT 5
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 3
44714: NEG
44715: PUSH
44716: LD_INT 5
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 5
44726: NEG
44727: PUSH
44728: LD_INT 3
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 4
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 4
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: LD_INT 4
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 4
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 4
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 5
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 5
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 4
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 3
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 5
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 3
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 3
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 4
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 4
44963: PUSH
44964: LD_INT 4
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: LD_INT 4
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 4
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 4
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: LD_INT 4
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 4
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 5
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: LD_INT 5
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: LD_INT 4
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: LD_INT 5
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45161: LD_ADDR_VAR 0 34
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 5
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: PUSH
45191: LD_INT 4
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: LD_INT 3
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 5
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: PUSH
45248: LD_INT 3
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: LD_INT 5
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 4
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 4
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 2
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 4
45363: PUSH
45364: LD_INT 4
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 4
45373: PUSH
45374: LD_INT 3
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 5
45383: PUSH
45384: LD_INT 4
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 5
45393: PUSH
45394: LD_INT 5
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 4
45403: PUSH
45404: LD_INT 5
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 5
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: LD_INT 5
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 3
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 4
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 4
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 4
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 4
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 4
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 4
45591: NEG
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 5
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 5
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 5
45625: NEG
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: ST_TO_ADDR
// end ; end ;
45693: GO 45696
45695: POP
// case btype of b_depot , b_warehouse :
45696: LD_VAR 0 1
45700: PUSH
45701: LD_INT 0
45703: DOUBLE
45704: EQUAL
45705: IFTRUE 45715
45707: LD_INT 1
45709: DOUBLE
45710: EQUAL
45711: IFTRUE 45715
45713: GO 45916
45715: POP
// case nation of nation_american :
45716: LD_VAR 0 5
45720: PUSH
45721: LD_INT 1
45723: DOUBLE
45724: EQUAL
45725: IFTRUE 45729
45727: GO 45785
45729: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45730: LD_ADDR_VAR 0 9
45734: PUSH
45735: LD_VAR 0 11
45739: PUSH
45740: LD_VAR 0 12
45744: PUSH
45745: LD_VAR 0 13
45749: PUSH
45750: LD_VAR 0 14
45754: PUSH
45755: LD_VAR 0 15
45759: PUSH
45760: LD_VAR 0 16
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: PUSH
45773: LD_VAR 0 4
45777: PUSH
45778: LD_INT 1
45780: PLUS
45781: ARRAY
45782: ST_TO_ADDR
45783: GO 45914
45785: LD_INT 2
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45793
45791: GO 45849
45793: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45794: LD_ADDR_VAR 0 9
45798: PUSH
45799: LD_VAR 0 17
45803: PUSH
45804: LD_VAR 0 18
45808: PUSH
45809: LD_VAR 0 19
45813: PUSH
45814: LD_VAR 0 20
45818: PUSH
45819: LD_VAR 0 21
45823: PUSH
45824: LD_VAR 0 22
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: LD_VAR 0 4
45841: PUSH
45842: LD_INT 1
45844: PLUS
45845: ARRAY
45846: ST_TO_ADDR
45847: GO 45914
45849: LD_INT 3
45851: DOUBLE
45852: EQUAL
45853: IFTRUE 45857
45855: GO 45913
45857: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45858: LD_ADDR_VAR 0 9
45862: PUSH
45863: LD_VAR 0 23
45867: PUSH
45868: LD_VAR 0 24
45872: PUSH
45873: LD_VAR 0 25
45877: PUSH
45878: LD_VAR 0 26
45882: PUSH
45883: LD_VAR 0 27
45887: PUSH
45888: LD_VAR 0 28
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: PUSH
45901: LD_VAR 0 4
45905: PUSH
45906: LD_INT 1
45908: PLUS
45909: ARRAY
45910: ST_TO_ADDR
45911: GO 45914
45913: POP
45914: GO 46469
45916: LD_INT 2
45918: DOUBLE
45919: EQUAL
45920: IFTRUE 45930
45922: LD_INT 3
45924: DOUBLE
45925: EQUAL
45926: IFTRUE 45930
45928: GO 45986
45930: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45931: LD_ADDR_VAR 0 9
45935: PUSH
45936: LD_VAR 0 29
45940: PUSH
45941: LD_VAR 0 30
45945: PUSH
45946: LD_VAR 0 31
45950: PUSH
45951: LD_VAR 0 32
45955: PUSH
45956: LD_VAR 0 33
45960: PUSH
45961: LD_VAR 0 34
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: LD_VAR 0 4
45978: PUSH
45979: LD_INT 1
45981: PLUS
45982: ARRAY
45983: ST_TO_ADDR
45984: GO 46469
45986: LD_INT 16
45988: DOUBLE
45989: EQUAL
45990: IFTRUE 46048
45992: LD_INT 17
45994: DOUBLE
45995: EQUAL
45996: IFTRUE 46048
45998: LD_INT 18
46000: DOUBLE
46001: EQUAL
46002: IFTRUE 46048
46004: LD_INT 19
46006: DOUBLE
46007: EQUAL
46008: IFTRUE 46048
46010: LD_INT 22
46012: DOUBLE
46013: EQUAL
46014: IFTRUE 46048
46016: LD_INT 20
46018: DOUBLE
46019: EQUAL
46020: IFTRUE 46048
46022: LD_INT 21
46024: DOUBLE
46025: EQUAL
46026: IFTRUE 46048
46028: LD_INT 23
46030: DOUBLE
46031: EQUAL
46032: IFTRUE 46048
46034: LD_INT 24
46036: DOUBLE
46037: EQUAL
46038: IFTRUE 46048
46040: LD_INT 25
46042: DOUBLE
46043: EQUAL
46044: IFTRUE 46048
46046: GO 46104
46048: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46049: LD_ADDR_VAR 0 9
46053: PUSH
46054: LD_VAR 0 35
46058: PUSH
46059: LD_VAR 0 36
46063: PUSH
46064: LD_VAR 0 37
46068: PUSH
46069: LD_VAR 0 38
46073: PUSH
46074: LD_VAR 0 39
46078: PUSH
46079: LD_VAR 0 40
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: LD_VAR 0 4
46096: PUSH
46097: LD_INT 1
46099: PLUS
46100: ARRAY
46101: ST_TO_ADDR
46102: GO 46469
46104: LD_INT 6
46106: DOUBLE
46107: EQUAL
46108: IFTRUE 46160
46110: LD_INT 7
46112: DOUBLE
46113: EQUAL
46114: IFTRUE 46160
46116: LD_INT 8
46118: DOUBLE
46119: EQUAL
46120: IFTRUE 46160
46122: LD_INT 13
46124: DOUBLE
46125: EQUAL
46126: IFTRUE 46160
46128: LD_INT 12
46130: DOUBLE
46131: EQUAL
46132: IFTRUE 46160
46134: LD_INT 15
46136: DOUBLE
46137: EQUAL
46138: IFTRUE 46160
46140: LD_INT 11
46142: DOUBLE
46143: EQUAL
46144: IFTRUE 46160
46146: LD_INT 14
46148: DOUBLE
46149: EQUAL
46150: IFTRUE 46160
46152: LD_INT 10
46154: DOUBLE
46155: EQUAL
46156: IFTRUE 46160
46158: GO 46216
46160: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46161: LD_ADDR_VAR 0 9
46165: PUSH
46166: LD_VAR 0 41
46170: PUSH
46171: LD_VAR 0 42
46175: PUSH
46176: LD_VAR 0 43
46180: PUSH
46181: LD_VAR 0 44
46185: PUSH
46186: LD_VAR 0 45
46190: PUSH
46191: LD_VAR 0 46
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_VAR 0 4
46208: PUSH
46209: LD_INT 1
46211: PLUS
46212: ARRAY
46213: ST_TO_ADDR
46214: GO 46469
46216: LD_INT 36
46218: DOUBLE
46219: EQUAL
46220: IFTRUE 46224
46222: GO 46280
46224: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46225: LD_ADDR_VAR 0 9
46229: PUSH
46230: LD_VAR 0 47
46234: PUSH
46235: LD_VAR 0 48
46239: PUSH
46240: LD_VAR 0 49
46244: PUSH
46245: LD_VAR 0 50
46249: PUSH
46250: LD_VAR 0 51
46254: PUSH
46255: LD_VAR 0 52
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: PUSH
46268: LD_VAR 0 4
46272: PUSH
46273: LD_INT 1
46275: PLUS
46276: ARRAY
46277: ST_TO_ADDR
46278: GO 46469
46280: LD_INT 4
46282: DOUBLE
46283: EQUAL
46284: IFTRUE 46306
46286: LD_INT 5
46288: DOUBLE
46289: EQUAL
46290: IFTRUE 46306
46292: LD_INT 34
46294: DOUBLE
46295: EQUAL
46296: IFTRUE 46306
46298: LD_INT 37
46300: DOUBLE
46301: EQUAL
46302: IFTRUE 46306
46304: GO 46362
46306: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46307: LD_ADDR_VAR 0 9
46311: PUSH
46312: LD_VAR 0 53
46316: PUSH
46317: LD_VAR 0 54
46321: PUSH
46322: LD_VAR 0 55
46326: PUSH
46327: LD_VAR 0 56
46331: PUSH
46332: LD_VAR 0 57
46336: PUSH
46337: LD_VAR 0 58
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: PUSH
46350: LD_VAR 0 4
46354: PUSH
46355: LD_INT 1
46357: PLUS
46358: ARRAY
46359: ST_TO_ADDR
46360: GO 46469
46362: LD_INT 31
46364: DOUBLE
46365: EQUAL
46366: IFTRUE 46412
46368: LD_INT 32
46370: DOUBLE
46371: EQUAL
46372: IFTRUE 46412
46374: LD_INT 33
46376: DOUBLE
46377: EQUAL
46378: IFTRUE 46412
46380: LD_INT 27
46382: DOUBLE
46383: EQUAL
46384: IFTRUE 46412
46386: LD_INT 26
46388: DOUBLE
46389: EQUAL
46390: IFTRUE 46412
46392: LD_INT 28
46394: DOUBLE
46395: EQUAL
46396: IFTRUE 46412
46398: LD_INT 29
46400: DOUBLE
46401: EQUAL
46402: IFTRUE 46412
46404: LD_INT 30
46406: DOUBLE
46407: EQUAL
46408: IFTRUE 46412
46410: GO 46468
46412: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46413: LD_ADDR_VAR 0 9
46417: PUSH
46418: LD_VAR 0 59
46422: PUSH
46423: LD_VAR 0 60
46427: PUSH
46428: LD_VAR 0 61
46432: PUSH
46433: LD_VAR 0 62
46437: PUSH
46438: LD_VAR 0 63
46442: PUSH
46443: LD_VAR 0 64
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: LD_VAR 0 4
46460: PUSH
46461: LD_INT 1
46463: PLUS
46464: ARRAY
46465: ST_TO_ADDR
46466: GO 46469
46468: POP
// temp_list2 = [ ] ;
46469: LD_ADDR_VAR 0 10
46473: PUSH
46474: EMPTY
46475: ST_TO_ADDR
// for i in temp_list do
46476: LD_ADDR_VAR 0 8
46480: PUSH
46481: LD_VAR 0 9
46485: PUSH
46486: FOR_IN
46487: IFFALSE 46539
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46489: LD_ADDR_VAR 0 10
46493: PUSH
46494: LD_VAR 0 10
46498: PUSH
46499: LD_VAR 0 8
46503: PUSH
46504: LD_INT 1
46506: ARRAY
46507: PUSH
46508: LD_VAR 0 2
46512: PLUS
46513: PUSH
46514: LD_VAR 0 8
46518: PUSH
46519: LD_INT 2
46521: ARRAY
46522: PUSH
46523: LD_VAR 0 3
46527: PLUS
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: EMPTY
46534: LIST
46535: ADD
46536: ST_TO_ADDR
46537: GO 46486
46539: POP
46540: POP
// result = temp_list2 ;
46541: LD_ADDR_VAR 0 7
46545: PUSH
46546: LD_VAR 0 10
46550: ST_TO_ADDR
// end ;
46551: LD_VAR 0 7
46555: RET
// export function EnemyInRange ( unit , dist ) ; begin
46556: LD_INT 0
46558: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_VAR 0 1
46568: PPUSH
46569: CALL_OW 255
46573: PPUSH
46574: LD_VAR 0 1
46578: PPUSH
46579: CALL_OW 250
46583: PPUSH
46584: LD_VAR 0 1
46588: PPUSH
46589: CALL_OW 251
46593: PPUSH
46594: LD_VAR 0 2
46598: PPUSH
46599: CALL 19929 0 4
46603: PUSH
46604: LD_INT 4
46606: ARRAY
46607: ST_TO_ADDR
// end ;
46608: LD_VAR 0 3
46612: RET
// export function PlayerSeeMe ( unit ) ; begin
46613: LD_INT 0
46615: PPUSH
// result := See ( your_side , unit ) ;
46616: LD_ADDR_VAR 0 2
46620: PUSH
46621: LD_OWVAR 2
46625: PPUSH
46626: LD_VAR 0 1
46630: PPUSH
46631: CALL_OW 292
46635: ST_TO_ADDR
// end ;
46636: LD_VAR 0 2
46640: RET
// export function ReverseDir ( unit ) ; begin
46641: LD_INT 0
46643: PPUSH
// if not unit then
46644: LD_VAR 0 1
46648: NOT
46649: IFFALSE 46653
// exit ;
46651: GO 46676
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46653: LD_ADDR_VAR 0 2
46657: PUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: CALL_OW 254
46667: PUSH
46668: LD_INT 3
46670: PLUS
46671: PUSH
46672: LD_INT 6
46674: MOD
46675: ST_TO_ADDR
// end ;
46676: LD_VAR 0 2
46680: RET
// export function ReverseArray ( array ) ; var i ; begin
46681: LD_INT 0
46683: PPUSH
46684: PPUSH
// if not array then
46685: LD_VAR 0 1
46689: NOT
46690: IFFALSE 46694
// exit ;
46692: GO 46749
// result := [ ] ;
46694: LD_ADDR_VAR 0 2
46698: PUSH
46699: EMPTY
46700: ST_TO_ADDR
// for i := array downto 1 do
46701: LD_ADDR_VAR 0 3
46705: PUSH
46706: DOUBLE
46707: LD_VAR 0 1
46711: INC
46712: ST_TO_ADDR
46713: LD_INT 1
46715: PUSH
46716: FOR_DOWNTO
46717: IFFALSE 46747
// result := Join ( result , array [ i ] ) ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 2
46728: PPUSH
46729: LD_VAR 0 1
46733: PUSH
46734: LD_VAR 0 3
46738: ARRAY
46739: PPUSH
46740: CALL 51394 0 2
46744: ST_TO_ADDR
46745: GO 46716
46747: POP
46748: POP
// end ;
46749: LD_VAR 0 2
46753: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
// if not unit or not hexes then
46762: LD_VAR 0 1
46766: NOT
46767: PUSH
46768: LD_VAR 0 2
46772: NOT
46773: OR
46774: IFFALSE 46778
// exit ;
46776: GO 46901
// dist := 9999 ;
46778: LD_ADDR_VAR 0 5
46782: PUSH
46783: LD_INT 9999
46785: ST_TO_ADDR
// for i = 1 to hexes do
46786: LD_ADDR_VAR 0 4
46790: PUSH
46791: DOUBLE
46792: LD_INT 1
46794: DEC
46795: ST_TO_ADDR
46796: LD_VAR 0 2
46800: PUSH
46801: FOR_TO
46802: IFFALSE 46889
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46804: LD_ADDR_VAR 0 6
46808: PUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: LD_VAR 0 2
46818: PUSH
46819: LD_VAR 0 4
46823: ARRAY
46824: PUSH
46825: LD_INT 1
46827: ARRAY
46828: PPUSH
46829: LD_VAR 0 2
46833: PUSH
46834: LD_VAR 0 4
46838: ARRAY
46839: PUSH
46840: LD_INT 2
46842: ARRAY
46843: PPUSH
46844: CALL_OW 297
46848: ST_TO_ADDR
// if tdist < dist then
46849: LD_VAR 0 6
46853: PUSH
46854: LD_VAR 0 5
46858: LESS
46859: IFFALSE 46887
// begin hex := hexes [ i ] ;
46861: LD_ADDR_VAR 0 8
46865: PUSH
46866: LD_VAR 0 2
46870: PUSH
46871: LD_VAR 0 4
46875: ARRAY
46876: ST_TO_ADDR
// dist := tdist ;
46877: LD_ADDR_VAR 0 5
46881: PUSH
46882: LD_VAR 0 6
46886: ST_TO_ADDR
// end ; end ;
46887: GO 46801
46889: POP
46890: POP
// result := hex ;
46891: LD_ADDR_VAR 0 3
46895: PUSH
46896: LD_VAR 0 8
46900: ST_TO_ADDR
// end ;
46901: LD_VAR 0 3
46905: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46906: LD_INT 0
46908: PPUSH
46909: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46910: LD_VAR 0 1
46914: NOT
46915: PUSH
46916: LD_VAR 0 1
46920: PUSH
46921: LD_INT 21
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 23
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PPUSH
46945: CALL_OW 69
46949: IN
46950: NOT
46951: OR
46952: IFFALSE 46956
// exit ;
46954: GO 47003
// for i = 1 to 3 do
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: DOUBLE
46962: LD_INT 1
46964: DEC
46965: ST_TO_ADDR
46966: LD_INT 3
46968: PUSH
46969: FOR_TO
46970: IFFALSE 47001
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46972: LD_VAR 0 1
46976: PPUSH
46977: CALL_OW 250
46981: PPUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: CALL_OW 251
46991: PPUSH
46992: LD_INT 1
46994: PPUSH
46995: CALL_OW 453
46999: GO 46969
47001: POP
47002: POP
// end ;
47003: LD_VAR 0 2
47007: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47008: LD_INT 0
47010: PPUSH
47011: PPUSH
47012: PPUSH
47013: PPUSH
47014: PPUSH
47015: PPUSH
// if not unit or not enemy_unit then
47016: LD_VAR 0 1
47020: NOT
47021: PUSH
47022: LD_VAR 0 2
47026: NOT
47027: OR
47028: IFFALSE 47032
// exit ;
47030: GO 47499
// if GetLives ( i ) < 250 then
47032: LD_VAR 0 4
47036: PPUSH
47037: CALL_OW 256
47041: PUSH
47042: LD_INT 250
47044: LESS
47045: IFFALSE 47058
// begin ComAutodestruct ( i ) ;
47047: LD_VAR 0 4
47051: PPUSH
47052: CALL 46906 0 1
// exit ;
47056: GO 47499
// end ; x := GetX ( enemy_unit ) ;
47058: LD_ADDR_VAR 0 7
47062: PUSH
47063: LD_VAR 0 2
47067: PPUSH
47068: CALL_OW 250
47072: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47073: LD_ADDR_VAR 0 8
47077: PUSH
47078: LD_VAR 0 2
47082: PPUSH
47083: CALL_OW 251
47087: ST_TO_ADDR
// if not x or not y then
47088: LD_VAR 0 7
47092: NOT
47093: PUSH
47094: LD_VAR 0 8
47098: NOT
47099: OR
47100: IFFALSE 47104
// exit ;
47102: GO 47499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47104: LD_ADDR_VAR 0 6
47108: PUSH
47109: LD_VAR 0 7
47113: PPUSH
47114: LD_INT 0
47116: PPUSH
47117: LD_INT 4
47119: PPUSH
47120: CALL_OW 272
47124: PUSH
47125: LD_VAR 0 8
47129: PPUSH
47130: LD_INT 0
47132: PPUSH
47133: LD_INT 4
47135: PPUSH
47136: CALL_OW 273
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_VAR 0 7
47149: PPUSH
47150: LD_INT 1
47152: PPUSH
47153: LD_INT 4
47155: PPUSH
47156: CALL_OW 272
47160: PUSH
47161: LD_VAR 0 8
47165: PPUSH
47166: LD_INT 1
47168: PPUSH
47169: LD_INT 4
47171: PPUSH
47172: CALL_OW 273
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_VAR 0 7
47185: PPUSH
47186: LD_INT 2
47188: PPUSH
47189: LD_INT 4
47191: PPUSH
47192: CALL_OW 272
47196: PUSH
47197: LD_VAR 0 8
47201: PPUSH
47202: LD_INT 2
47204: PPUSH
47205: LD_INT 4
47207: PPUSH
47208: CALL_OW 273
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_VAR 0 7
47221: PPUSH
47222: LD_INT 3
47224: PPUSH
47225: LD_INT 4
47227: PPUSH
47228: CALL_OW 272
47232: PUSH
47233: LD_VAR 0 8
47237: PPUSH
47238: LD_INT 3
47240: PPUSH
47241: LD_INT 4
47243: PPUSH
47244: CALL_OW 273
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_VAR 0 7
47257: PPUSH
47258: LD_INT 4
47260: PPUSH
47261: LD_INT 4
47263: PPUSH
47264: CALL_OW 272
47268: PUSH
47269: LD_VAR 0 8
47273: PPUSH
47274: LD_INT 4
47276: PPUSH
47277: LD_INT 4
47279: PPUSH
47280: CALL_OW 273
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_VAR 0 7
47293: PPUSH
47294: LD_INT 5
47296: PPUSH
47297: LD_INT 4
47299: PPUSH
47300: CALL_OW 272
47304: PUSH
47305: LD_VAR 0 8
47309: PPUSH
47310: LD_INT 5
47312: PPUSH
47313: LD_INT 4
47315: PPUSH
47316: CALL_OW 273
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: ST_TO_ADDR
// for i = tmp downto 1 do
47333: LD_ADDR_VAR 0 4
47337: PUSH
47338: DOUBLE
47339: LD_VAR 0 6
47343: INC
47344: ST_TO_ADDR
47345: LD_INT 1
47347: PUSH
47348: FOR_DOWNTO
47349: IFFALSE 47450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47351: LD_VAR 0 6
47355: PUSH
47356: LD_VAR 0 4
47360: ARRAY
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: PPUSH
47366: LD_VAR 0 6
47370: PUSH
47371: LD_VAR 0 4
47375: ARRAY
47376: PUSH
47377: LD_INT 2
47379: ARRAY
47380: PPUSH
47381: CALL_OW 488
47385: NOT
47386: PUSH
47387: LD_VAR 0 6
47391: PUSH
47392: LD_VAR 0 4
47396: ARRAY
47397: PUSH
47398: LD_INT 1
47400: ARRAY
47401: PPUSH
47402: LD_VAR 0 6
47406: PUSH
47407: LD_VAR 0 4
47411: ARRAY
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: CALL_OW 428
47421: PUSH
47422: LD_INT 0
47424: NONEQUAL
47425: OR
47426: IFFALSE 47448
// tmp := Delete ( tmp , i ) ;
47428: LD_ADDR_VAR 0 6
47432: PUSH
47433: LD_VAR 0 6
47437: PPUSH
47438: LD_VAR 0 4
47442: PPUSH
47443: CALL_OW 3
47447: ST_TO_ADDR
47448: GO 47348
47450: POP
47451: POP
// j := GetClosestHex ( unit , tmp ) ;
47452: LD_ADDR_VAR 0 5
47456: PUSH
47457: LD_VAR 0 1
47461: PPUSH
47462: LD_VAR 0 6
47466: PPUSH
47467: CALL 46754 0 2
47471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47472: LD_VAR 0 1
47476: PPUSH
47477: LD_VAR 0 5
47481: PUSH
47482: LD_INT 1
47484: ARRAY
47485: PPUSH
47486: LD_VAR 0 5
47490: PUSH
47491: LD_INT 2
47493: ARRAY
47494: PPUSH
47495: CALL_OW 111
// end ;
47499: LD_VAR 0 3
47503: RET
// export function PrepareApemanSoldier ( ) ; begin
47504: LD_INT 0
47506: PPUSH
// uc_nation := 0 ;
47507: LD_ADDR_OWVAR 21
47511: PUSH
47512: LD_INT 0
47514: ST_TO_ADDR
// hc_sex := sex_male ;
47515: LD_ADDR_OWVAR 27
47519: PUSH
47520: LD_INT 1
47522: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47523: LD_ADDR_OWVAR 28
47527: PUSH
47528: LD_INT 15
47530: ST_TO_ADDR
// hc_gallery :=  ;
47531: LD_ADDR_OWVAR 33
47535: PUSH
47536: LD_STRING 
47538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47539: LD_ADDR_OWVAR 31
47543: PUSH
47544: LD_INT 0
47546: PPUSH
47547: LD_INT 3
47549: PPUSH
47550: CALL_OW 12
47554: PUSH
47555: LD_INT 0
47557: PPUSH
47558: LD_INT 3
47560: PPUSH
47561: CALL_OW 12
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// end ;
47578: LD_VAR 0 1
47582: RET
// export function PrepareApemanEngineer ( ) ; begin
47583: LD_INT 0
47585: PPUSH
// uc_nation := 0 ;
47586: LD_ADDR_OWVAR 21
47590: PUSH
47591: LD_INT 0
47593: ST_TO_ADDR
// hc_sex := sex_male ;
47594: LD_ADDR_OWVAR 27
47598: PUSH
47599: LD_INT 1
47601: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47602: LD_ADDR_OWVAR 28
47606: PUSH
47607: LD_INT 16
47609: ST_TO_ADDR
// hc_gallery :=  ;
47610: LD_ADDR_OWVAR 33
47614: PUSH
47615: LD_STRING 
47617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47618: LD_ADDR_OWVAR 31
47622: PUSH
47623: LD_INT 0
47625: PPUSH
47626: LD_INT 3
47628: PPUSH
47629: CALL_OW 12
47633: PUSH
47634: LD_INT 0
47636: PPUSH
47637: LD_INT 3
47639: PPUSH
47640: CALL_OW 12
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: ST_TO_ADDR
// end ;
47657: LD_VAR 0 1
47661: RET
// export function PrepareApeman ( agressivity ) ; begin
47662: LD_INT 0
47664: PPUSH
// uc_side := 0 ;
47665: LD_ADDR_OWVAR 20
47669: PUSH
47670: LD_INT 0
47672: ST_TO_ADDR
// uc_nation := 0 ;
47673: LD_ADDR_OWVAR 21
47677: PUSH
47678: LD_INT 0
47680: ST_TO_ADDR
// hc_sex := sex_male ;
47681: LD_ADDR_OWVAR 27
47685: PUSH
47686: LD_INT 1
47688: ST_TO_ADDR
// hc_class := class_apeman ;
47689: LD_ADDR_OWVAR 28
47693: PUSH
47694: LD_INT 12
47696: ST_TO_ADDR
// hc_gallery :=  ;
47697: LD_ADDR_OWVAR 33
47701: PUSH
47702: LD_STRING 
47704: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47705: LD_ADDR_OWVAR 35
47709: PUSH
47710: LD_VAR 0 1
47714: NEG
47715: PPUSH
47716: LD_VAR 0 1
47720: PPUSH
47721: CALL_OW 12
47725: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47726: LD_ADDR_OWVAR 31
47730: PUSH
47731: LD_INT 0
47733: PPUSH
47734: LD_INT 3
47736: PPUSH
47737: CALL_OW 12
47741: PUSH
47742: LD_INT 0
47744: PPUSH
47745: LD_INT 3
47747: PPUSH
47748: CALL_OW 12
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: ST_TO_ADDR
// end ;
47765: LD_VAR 0 2
47769: RET
// export function PrepareTiger ( agressivity ) ; begin
47770: LD_INT 0
47772: PPUSH
// uc_side := 0 ;
47773: LD_ADDR_OWVAR 20
47777: PUSH
47778: LD_INT 0
47780: ST_TO_ADDR
// uc_nation := 0 ;
47781: LD_ADDR_OWVAR 21
47785: PUSH
47786: LD_INT 0
47788: ST_TO_ADDR
// hc_class := class_tiger ;
47789: LD_ADDR_OWVAR 28
47793: PUSH
47794: LD_INT 14
47796: ST_TO_ADDR
// hc_gallery :=  ;
47797: LD_ADDR_OWVAR 33
47801: PUSH
47802: LD_STRING 
47804: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47805: LD_ADDR_OWVAR 35
47809: PUSH
47810: LD_VAR 0 1
47814: NEG
47815: PPUSH
47816: LD_VAR 0 1
47820: PPUSH
47821: CALL_OW 12
47825: ST_TO_ADDR
// end ;
47826: LD_VAR 0 2
47830: RET
// export function PrepareEnchidna ( ) ; begin
47831: LD_INT 0
47833: PPUSH
// uc_side := 0 ;
47834: LD_ADDR_OWVAR 20
47838: PUSH
47839: LD_INT 0
47841: ST_TO_ADDR
// uc_nation := 0 ;
47842: LD_ADDR_OWVAR 21
47846: PUSH
47847: LD_INT 0
47849: ST_TO_ADDR
// hc_class := class_baggie ;
47850: LD_ADDR_OWVAR 28
47854: PUSH
47855: LD_INT 13
47857: ST_TO_ADDR
// hc_gallery :=  ;
47858: LD_ADDR_OWVAR 33
47862: PUSH
47863: LD_STRING 
47865: ST_TO_ADDR
// end ;
47866: LD_VAR 0 1
47870: RET
// export function PrepareFrog ( ) ; begin
47871: LD_INT 0
47873: PPUSH
// uc_side := 0 ;
47874: LD_ADDR_OWVAR 20
47878: PUSH
47879: LD_INT 0
47881: ST_TO_ADDR
// uc_nation := 0 ;
47882: LD_ADDR_OWVAR 21
47886: PUSH
47887: LD_INT 0
47889: ST_TO_ADDR
// hc_class := class_frog ;
47890: LD_ADDR_OWVAR 28
47894: PUSH
47895: LD_INT 19
47897: ST_TO_ADDR
// hc_gallery :=  ;
47898: LD_ADDR_OWVAR 33
47902: PUSH
47903: LD_STRING 
47905: ST_TO_ADDR
// end ;
47906: LD_VAR 0 1
47910: RET
// export function PrepareFish ( ) ; begin
47911: LD_INT 0
47913: PPUSH
// uc_side := 0 ;
47914: LD_ADDR_OWVAR 20
47918: PUSH
47919: LD_INT 0
47921: ST_TO_ADDR
// uc_nation := 0 ;
47922: LD_ADDR_OWVAR 21
47926: PUSH
47927: LD_INT 0
47929: ST_TO_ADDR
// hc_class := class_fish ;
47930: LD_ADDR_OWVAR 28
47934: PUSH
47935: LD_INT 20
47937: ST_TO_ADDR
// hc_gallery :=  ;
47938: LD_ADDR_OWVAR 33
47942: PUSH
47943: LD_STRING 
47945: ST_TO_ADDR
// end ;
47946: LD_VAR 0 1
47950: RET
// export function PrepareBird ( ) ; begin
47951: LD_INT 0
47953: PPUSH
// uc_side := 0 ;
47954: LD_ADDR_OWVAR 20
47958: PUSH
47959: LD_INT 0
47961: ST_TO_ADDR
// uc_nation := 0 ;
47962: LD_ADDR_OWVAR 21
47966: PUSH
47967: LD_INT 0
47969: ST_TO_ADDR
// hc_class := class_phororhacos ;
47970: LD_ADDR_OWVAR 28
47974: PUSH
47975: LD_INT 18
47977: ST_TO_ADDR
// hc_gallery :=  ;
47978: LD_ADDR_OWVAR 33
47982: PUSH
47983: LD_STRING 
47985: ST_TO_ADDR
// end ;
47986: LD_VAR 0 1
47990: RET
// export function PrepareHorse ( ) ; begin
47991: LD_INT 0
47993: PPUSH
// uc_side := 0 ;
47994: LD_ADDR_OWVAR 20
47998: PUSH
47999: LD_INT 0
48001: ST_TO_ADDR
// uc_nation := 0 ;
48002: LD_ADDR_OWVAR 21
48006: PUSH
48007: LD_INT 0
48009: ST_TO_ADDR
// hc_class := class_horse ;
48010: LD_ADDR_OWVAR 28
48014: PUSH
48015: LD_INT 21
48017: ST_TO_ADDR
// hc_gallery :=  ;
48018: LD_ADDR_OWVAR 33
48022: PUSH
48023: LD_STRING 
48025: ST_TO_ADDR
// end ;
48026: LD_VAR 0 1
48030: RET
// export function PrepareMastodont ( ) ; begin
48031: LD_INT 0
48033: PPUSH
// uc_side := 0 ;
48034: LD_ADDR_OWVAR 20
48038: PUSH
48039: LD_INT 0
48041: ST_TO_ADDR
// uc_nation := 0 ;
48042: LD_ADDR_OWVAR 21
48046: PUSH
48047: LD_INT 0
48049: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48050: LD_ADDR_OWVAR 37
48054: PUSH
48055: LD_INT 31
48057: ST_TO_ADDR
// vc_control := control_rider ;
48058: LD_ADDR_OWVAR 38
48062: PUSH
48063: LD_INT 4
48065: ST_TO_ADDR
// end ;
48066: LD_VAR 0 1
48070: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48071: LD_INT 0
48073: PPUSH
48074: PPUSH
48075: PPUSH
// uc_side = 0 ;
48076: LD_ADDR_OWVAR 20
48080: PUSH
48081: LD_INT 0
48083: ST_TO_ADDR
// uc_nation = 0 ;
48084: LD_ADDR_OWVAR 21
48088: PUSH
48089: LD_INT 0
48091: ST_TO_ADDR
// InitHc_All ( ) ;
48092: CALL_OW 584
// InitVc ;
48096: CALL_OW 20
// if mastodonts then
48100: LD_VAR 0 6
48104: IFFALSE 48171
// for i = 1 to mastodonts do
48106: LD_ADDR_VAR 0 11
48110: PUSH
48111: DOUBLE
48112: LD_INT 1
48114: DEC
48115: ST_TO_ADDR
48116: LD_VAR 0 6
48120: PUSH
48121: FOR_TO
48122: IFFALSE 48169
// begin vc_chassis := 31 ;
48124: LD_ADDR_OWVAR 37
48128: PUSH
48129: LD_INT 31
48131: ST_TO_ADDR
// vc_control := control_rider ;
48132: LD_ADDR_OWVAR 38
48136: PUSH
48137: LD_INT 4
48139: ST_TO_ADDR
// animal := CreateVehicle ;
48140: LD_ADDR_VAR 0 12
48144: PUSH
48145: CALL_OW 45
48149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48150: LD_VAR 0 12
48154: PPUSH
48155: LD_VAR 0 8
48159: PPUSH
48160: LD_INT 0
48162: PPUSH
48163: CALL 50299 0 3
// end ;
48167: GO 48121
48169: POP
48170: POP
// if horses then
48171: LD_VAR 0 5
48175: IFFALSE 48242
// for i = 1 to horses do
48177: LD_ADDR_VAR 0 11
48181: PUSH
48182: DOUBLE
48183: LD_INT 1
48185: DEC
48186: ST_TO_ADDR
48187: LD_VAR 0 5
48191: PUSH
48192: FOR_TO
48193: IFFALSE 48240
// begin hc_class := 21 ;
48195: LD_ADDR_OWVAR 28
48199: PUSH
48200: LD_INT 21
48202: ST_TO_ADDR
// hc_gallery :=  ;
48203: LD_ADDR_OWVAR 33
48207: PUSH
48208: LD_STRING 
48210: ST_TO_ADDR
// animal := CreateHuman ;
48211: LD_ADDR_VAR 0 12
48215: PUSH
48216: CALL_OW 44
48220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48221: LD_VAR 0 12
48225: PPUSH
48226: LD_VAR 0 8
48230: PPUSH
48231: LD_INT 0
48233: PPUSH
48234: CALL 50299 0 3
// end ;
48238: GO 48192
48240: POP
48241: POP
// if birds then
48242: LD_VAR 0 1
48246: IFFALSE 48313
// for i = 1 to birds do
48248: LD_ADDR_VAR 0 11
48252: PUSH
48253: DOUBLE
48254: LD_INT 1
48256: DEC
48257: ST_TO_ADDR
48258: LD_VAR 0 1
48262: PUSH
48263: FOR_TO
48264: IFFALSE 48311
// begin hc_class := 18 ;
48266: LD_ADDR_OWVAR 28
48270: PUSH
48271: LD_INT 18
48273: ST_TO_ADDR
// hc_gallery =  ;
48274: LD_ADDR_OWVAR 33
48278: PUSH
48279: LD_STRING 
48281: ST_TO_ADDR
// animal := CreateHuman ;
48282: LD_ADDR_VAR 0 12
48286: PUSH
48287: CALL_OW 44
48291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48292: LD_VAR 0 12
48296: PPUSH
48297: LD_VAR 0 8
48301: PPUSH
48302: LD_INT 0
48304: PPUSH
48305: CALL 50299 0 3
// end ;
48309: GO 48263
48311: POP
48312: POP
// if tigers then
48313: LD_VAR 0 2
48317: IFFALSE 48401
// for i = 1 to tigers do
48319: LD_ADDR_VAR 0 11
48323: PUSH
48324: DOUBLE
48325: LD_INT 1
48327: DEC
48328: ST_TO_ADDR
48329: LD_VAR 0 2
48333: PUSH
48334: FOR_TO
48335: IFFALSE 48399
// begin hc_class = class_tiger ;
48337: LD_ADDR_OWVAR 28
48341: PUSH
48342: LD_INT 14
48344: ST_TO_ADDR
// hc_gallery =  ;
48345: LD_ADDR_OWVAR 33
48349: PUSH
48350: LD_STRING 
48352: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48353: LD_ADDR_OWVAR 35
48357: PUSH
48358: LD_INT 7
48360: NEG
48361: PPUSH
48362: LD_INT 7
48364: PPUSH
48365: CALL_OW 12
48369: ST_TO_ADDR
// animal := CreateHuman ;
48370: LD_ADDR_VAR 0 12
48374: PUSH
48375: CALL_OW 44
48379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48380: LD_VAR 0 12
48384: PPUSH
48385: LD_VAR 0 8
48389: PPUSH
48390: LD_INT 0
48392: PPUSH
48393: CALL 50299 0 3
// end ;
48397: GO 48334
48399: POP
48400: POP
// if apemans then
48401: LD_VAR 0 3
48405: IFFALSE 48528
// for i = 1 to apemans do
48407: LD_ADDR_VAR 0 11
48411: PUSH
48412: DOUBLE
48413: LD_INT 1
48415: DEC
48416: ST_TO_ADDR
48417: LD_VAR 0 3
48421: PUSH
48422: FOR_TO
48423: IFFALSE 48526
// begin hc_class = class_apeman ;
48425: LD_ADDR_OWVAR 28
48429: PUSH
48430: LD_INT 12
48432: ST_TO_ADDR
// hc_gallery =  ;
48433: LD_ADDR_OWVAR 33
48437: PUSH
48438: LD_STRING 
48440: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48441: LD_ADDR_OWVAR 35
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PPUSH
48450: LD_INT 2
48452: PPUSH
48453: CALL_OW 12
48457: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48458: LD_ADDR_OWVAR 31
48462: PUSH
48463: LD_INT 1
48465: PPUSH
48466: LD_INT 3
48468: PPUSH
48469: CALL_OW 12
48473: PUSH
48474: LD_INT 1
48476: PPUSH
48477: LD_INT 3
48479: PPUSH
48480: CALL_OW 12
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// animal := CreateHuman ;
48497: LD_ADDR_VAR 0 12
48501: PUSH
48502: CALL_OW 44
48506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48507: LD_VAR 0 12
48511: PPUSH
48512: LD_VAR 0 8
48516: PPUSH
48517: LD_INT 0
48519: PPUSH
48520: CALL 50299 0 3
// end ;
48524: GO 48422
48526: POP
48527: POP
// if enchidnas then
48528: LD_VAR 0 4
48532: IFFALSE 48599
// for i = 1 to enchidnas do
48534: LD_ADDR_VAR 0 11
48538: PUSH
48539: DOUBLE
48540: LD_INT 1
48542: DEC
48543: ST_TO_ADDR
48544: LD_VAR 0 4
48548: PUSH
48549: FOR_TO
48550: IFFALSE 48597
// begin hc_class = 13 ;
48552: LD_ADDR_OWVAR 28
48556: PUSH
48557: LD_INT 13
48559: ST_TO_ADDR
// hc_gallery =  ;
48560: LD_ADDR_OWVAR 33
48564: PUSH
48565: LD_STRING 
48567: ST_TO_ADDR
// animal := CreateHuman ;
48568: LD_ADDR_VAR 0 12
48572: PUSH
48573: CALL_OW 44
48577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48578: LD_VAR 0 12
48582: PPUSH
48583: LD_VAR 0 8
48587: PPUSH
48588: LD_INT 0
48590: PPUSH
48591: CALL 50299 0 3
// end ;
48595: GO 48549
48597: POP
48598: POP
// if fishes then
48599: LD_VAR 0 7
48603: IFFALSE 48670
// for i = 1 to fishes do
48605: LD_ADDR_VAR 0 11
48609: PUSH
48610: DOUBLE
48611: LD_INT 1
48613: DEC
48614: ST_TO_ADDR
48615: LD_VAR 0 7
48619: PUSH
48620: FOR_TO
48621: IFFALSE 48668
// begin hc_class = 20 ;
48623: LD_ADDR_OWVAR 28
48627: PUSH
48628: LD_INT 20
48630: ST_TO_ADDR
// hc_gallery =  ;
48631: LD_ADDR_OWVAR 33
48635: PUSH
48636: LD_STRING 
48638: ST_TO_ADDR
// animal := CreateHuman ;
48639: LD_ADDR_VAR 0 12
48643: PUSH
48644: CALL_OW 44
48648: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48649: LD_VAR 0 12
48653: PPUSH
48654: LD_VAR 0 9
48658: PPUSH
48659: LD_INT 0
48661: PPUSH
48662: CALL 50299 0 3
// end ;
48666: GO 48620
48668: POP
48669: POP
// end ;
48670: LD_VAR 0 10
48674: RET
// export function WantHeal ( sci , unit ) ; begin
48675: LD_INT 0
48677: PPUSH
// if GetTaskList ( sci ) > 0 then
48678: LD_VAR 0 1
48682: PPUSH
48683: CALL_OW 437
48687: PUSH
48688: LD_INT 0
48690: GREATER
48691: IFFALSE 48761
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48693: LD_VAR 0 1
48697: PPUSH
48698: CALL_OW 437
48702: PUSH
48703: LD_INT 1
48705: ARRAY
48706: PUSH
48707: LD_INT 1
48709: ARRAY
48710: PUSH
48711: LD_STRING l
48713: EQUAL
48714: PUSH
48715: LD_VAR 0 1
48719: PPUSH
48720: CALL_OW 437
48724: PUSH
48725: LD_INT 1
48727: ARRAY
48728: PUSH
48729: LD_INT 4
48731: ARRAY
48732: PUSH
48733: LD_VAR 0 2
48737: EQUAL
48738: AND
48739: IFFALSE 48751
// result := true else
48741: LD_ADDR_VAR 0 3
48745: PUSH
48746: LD_INT 1
48748: ST_TO_ADDR
48749: GO 48759
// result := false ;
48751: LD_ADDR_VAR 0 3
48755: PUSH
48756: LD_INT 0
48758: ST_TO_ADDR
// end else
48759: GO 48769
// result := false ;
48761: LD_ADDR_VAR 0 3
48765: PUSH
48766: LD_INT 0
48768: ST_TO_ADDR
// end ;
48769: LD_VAR 0 3
48773: RET
// export function HealTarget ( sci ) ; begin
48774: LD_INT 0
48776: PPUSH
// if not sci then
48777: LD_VAR 0 1
48781: NOT
48782: IFFALSE 48786
// exit ;
48784: GO 48851
// result := 0 ;
48786: LD_ADDR_VAR 0 2
48790: PUSH
48791: LD_INT 0
48793: ST_TO_ADDR
// if GetTaskList ( sci ) then
48794: LD_VAR 0 1
48798: PPUSH
48799: CALL_OW 437
48803: IFFALSE 48851
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48805: LD_VAR 0 1
48809: PPUSH
48810: CALL_OW 437
48814: PUSH
48815: LD_INT 1
48817: ARRAY
48818: PUSH
48819: LD_INT 1
48821: ARRAY
48822: PUSH
48823: LD_STRING l
48825: EQUAL
48826: IFFALSE 48851
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48828: LD_ADDR_VAR 0 2
48832: PUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 437
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: PUSH
48847: LD_INT 4
48849: ARRAY
48850: ST_TO_ADDR
// end ;
48851: LD_VAR 0 2
48855: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48856: LD_INT 0
48858: PPUSH
48859: PPUSH
48860: PPUSH
48861: PPUSH
// if not base_units then
48862: LD_VAR 0 1
48866: NOT
48867: IFFALSE 48871
// exit ;
48869: GO 48958
// result := false ;
48871: LD_ADDR_VAR 0 2
48875: PUSH
48876: LD_INT 0
48878: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48879: LD_ADDR_VAR 0 5
48883: PUSH
48884: LD_VAR 0 1
48888: PPUSH
48889: LD_INT 21
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PPUSH
48899: CALL_OW 72
48903: ST_TO_ADDR
// if not tmp then
48904: LD_VAR 0 5
48908: NOT
48909: IFFALSE 48913
// exit ;
48911: GO 48958
// for i in tmp do
48913: LD_ADDR_VAR 0 3
48917: PUSH
48918: LD_VAR 0 5
48922: PUSH
48923: FOR_IN
48924: IFFALSE 48956
// begin result := EnemyInRange ( i , 22 ) ;
48926: LD_ADDR_VAR 0 2
48930: PUSH
48931: LD_VAR 0 3
48935: PPUSH
48936: LD_INT 22
48938: PPUSH
48939: CALL 46556 0 2
48943: ST_TO_ADDR
// if result then
48944: LD_VAR 0 2
48948: IFFALSE 48954
// exit ;
48950: POP
48951: POP
48952: GO 48958
// end ;
48954: GO 48923
48956: POP
48957: POP
// end ;
48958: LD_VAR 0 2
48962: RET
// export function FilterByTag ( units , tag ) ; begin
48963: LD_INT 0
48965: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
48966: LD_ADDR_VAR 0 3
48970: PUSH
48971: LD_VAR 0 1
48975: PPUSH
48976: LD_INT 120
48978: PUSH
48979: LD_VAR 0 2
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PPUSH
48988: CALL_OW 72
48992: ST_TO_ADDR
// end ;
48993: LD_VAR 0 3
48997: RET
// export function IsDriver ( un ) ; begin
48998: LD_INT 0
49000: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49001: LD_ADDR_VAR 0 2
49005: PUSH
49006: LD_VAR 0 1
49010: PUSH
49011: LD_INT 55
49013: PUSH
49014: EMPTY
49015: LIST
49016: PPUSH
49017: CALL_OW 69
49021: IN
49022: ST_TO_ADDR
// end ;
49023: LD_VAR 0 2
49027: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49028: LD_INT 0
49030: PPUSH
49031: PPUSH
// list := [ ] ;
49032: LD_ADDR_VAR 0 5
49036: PUSH
49037: EMPTY
49038: ST_TO_ADDR
// case d of 0 :
49039: LD_VAR 0 3
49043: PUSH
49044: LD_INT 0
49046: DOUBLE
49047: EQUAL
49048: IFTRUE 49052
49050: GO 49185
49052: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49053: LD_ADDR_VAR 0 5
49057: PUSH
49058: LD_VAR 0 1
49062: PUSH
49063: LD_INT 4
49065: MINUS
49066: PUSH
49067: LD_VAR 0 2
49071: PUSH
49072: LD_INT 4
49074: MINUS
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: PUSH
49084: LD_VAR 0 1
49088: PUSH
49089: LD_INT 3
49091: MINUS
49092: PUSH
49093: LD_VAR 0 2
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: PUSH
49106: LD_VAR 0 1
49110: PUSH
49111: LD_INT 4
49113: PLUS
49114: PUSH
49115: LD_VAR 0 2
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: PUSH
49128: LD_VAR 0 1
49132: PUSH
49133: LD_INT 3
49135: PLUS
49136: PUSH
49137: LD_VAR 0 2
49141: PUSH
49142: LD_INT 3
49144: PLUS
49145: PUSH
49146: LD_INT 5
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: PUSH
49154: LD_VAR 0 1
49158: PUSH
49159: LD_VAR 0 2
49163: PUSH
49164: LD_INT 4
49166: PLUS
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: ST_TO_ADDR
// end ; 1 :
49183: GO 49883
49185: LD_INT 1
49187: DOUBLE
49188: EQUAL
49189: IFTRUE 49193
49191: GO 49326
49193: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49194: LD_ADDR_VAR 0 5
49198: PUSH
49199: LD_VAR 0 1
49203: PUSH
49204: LD_VAR 0 2
49208: PUSH
49209: LD_INT 4
49211: MINUS
49212: PUSH
49213: LD_INT 3
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: PUSH
49221: LD_VAR 0 1
49225: PUSH
49226: LD_INT 3
49228: MINUS
49229: PUSH
49230: LD_VAR 0 2
49234: PUSH
49235: LD_INT 3
49237: MINUS
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: PUSH
49247: LD_VAR 0 1
49251: PUSH
49252: LD_INT 4
49254: MINUS
49255: PUSH
49256: LD_VAR 0 2
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: PUSH
49269: LD_VAR 0 1
49273: PUSH
49274: LD_VAR 0 2
49278: PUSH
49279: LD_INT 3
49281: PLUS
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: LIST
49290: PUSH
49291: LD_VAR 0 1
49295: PUSH
49296: LD_INT 4
49298: PLUS
49299: PUSH
49300: LD_VAR 0 2
49304: PUSH
49305: LD_INT 4
49307: PLUS
49308: PUSH
49309: LD_INT 5
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// end ; 2 :
49324: GO 49883
49326: LD_INT 2
49328: DOUBLE
49329: EQUAL
49330: IFTRUE 49334
49332: GO 49463
49334: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49335: LD_ADDR_VAR 0 5
49339: PUSH
49340: LD_VAR 0 1
49344: PUSH
49345: LD_VAR 0 2
49349: PUSH
49350: LD_INT 3
49352: MINUS
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: PUSH
49362: LD_VAR 0 1
49366: PUSH
49367: LD_INT 4
49369: PLUS
49370: PUSH
49371: LD_VAR 0 2
49375: PUSH
49376: LD_INT 4
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: PUSH
49384: LD_VAR 0 1
49388: PUSH
49389: LD_VAR 0 2
49393: PUSH
49394: LD_INT 4
49396: PLUS
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: PUSH
49406: LD_VAR 0 1
49410: PUSH
49411: LD_INT 3
49413: MINUS
49414: PUSH
49415: LD_VAR 0 2
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: LIST
49427: PUSH
49428: LD_VAR 0 1
49432: PUSH
49433: LD_INT 4
49435: MINUS
49436: PUSH
49437: LD_VAR 0 2
49441: PUSH
49442: LD_INT 4
49444: MINUS
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// end ; 3 :
49461: GO 49883
49463: LD_INT 3
49465: DOUBLE
49466: EQUAL
49467: IFTRUE 49471
49469: GO 49604
49471: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49472: LD_ADDR_VAR 0 5
49476: PUSH
49477: LD_VAR 0 1
49481: PUSH
49482: LD_INT 3
49484: PLUS
49485: PUSH
49486: LD_VAR 0 2
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: PUSH
49499: LD_VAR 0 1
49503: PUSH
49504: LD_INT 4
49506: PLUS
49507: PUSH
49508: LD_VAR 0 2
49512: PUSH
49513: LD_INT 4
49515: PLUS
49516: PUSH
49517: LD_INT 5
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: LD_VAR 0 1
49529: PUSH
49530: LD_INT 4
49532: MINUS
49533: PUSH
49534: LD_VAR 0 2
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: PUSH
49547: LD_VAR 0 1
49551: PUSH
49552: LD_VAR 0 2
49556: PUSH
49557: LD_INT 4
49559: MINUS
49560: PUSH
49561: LD_INT 3
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: LIST
49568: PUSH
49569: LD_VAR 0 1
49573: PUSH
49574: LD_INT 3
49576: MINUS
49577: PUSH
49578: LD_VAR 0 2
49582: PUSH
49583: LD_INT 3
49585: MINUS
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// end ; 4 :
49602: GO 49883
49604: LD_INT 4
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49612
49610: GO 49745
49612: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49613: LD_ADDR_VAR 0 5
49617: PUSH
49618: LD_VAR 0 1
49622: PUSH
49623: LD_VAR 0 2
49627: PUSH
49628: LD_INT 4
49630: PLUS
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: PUSH
49640: LD_VAR 0 1
49644: PUSH
49645: LD_INT 3
49647: PLUS
49648: PUSH
49649: LD_VAR 0 2
49653: PUSH
49654: LD_INT 3
49656: PLUS
49657: PUSH
49658: LD_INT 5
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: PUSH
49666: LD_VAR 0 1
49670: PUSH
49671: LD_INT 4
49673: PLUS
49674: PUSH
49675: LD_VAR 0 2
49679: PUSH
49680: LD_INT 4
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: PUSH
49688: LD_VAR 0 1
49692: PUSH
49693: LD_VAR 0 2
49697: PUSH
49698: LD_INT 3
49700: MINUS
49701: PUSH
49702: LD_INT 3
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: LIST
49709: PUSH
49710: LD_VAR 0 1
49714: PUSH
49715: LD_INT 4
49717: MINUS
49718: PUSH
49719: LD_VAR 0 2
49723: PUSH
49724: LD_INT 4
49726: MINUS
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: LIST
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// end ; 5 :
49743: GO 49883
49745: LD_INT 5
49747: DOUBLE
49748: EQUAL
49749: IFTRUE 49753
49751: GO 49882
49753: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49754: LD_ADDR_VAR 0 5
49758: PUSH
49759: LD_VAR 0 1
49763: PUSH
49764: LD_INT 4
49766: MINUS
49767: PUSH
49768: LD_VAR 0 2
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: PUSH
49781: LD_VAR 0 1
49785: PUSH
49786: LD_VAR 0 2
49790: PUSH
49791: LD_INT 4
49793: MINUS
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: PUSH
49803: LD_VAR 0 1
49807: PUSH
49808: LD_INT 4
49810: PLUS
49811: PUSH
49812: LD_VAR 0 2
49816: PUSH
49817: LD_INT 4
49819: PLUS
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: PUSH
49829: LD_VAR 0 1
49833: PUSH
49834: LD_INT 3
49836: PLUS
49837: PUSH
49838: LD_VAR 0 2
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: PUSH
49851: LD_VAR 0 1
49855: PUSH
49856: LD_VAR 0 2
49860: PUSH
49861: LD_INT 3
49863: PLUS
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: LIST
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// end ; end ;
49880: GO 49883
49882: POP
// result := list ;
49883: LD_ADDR_VAR 0 4
49887: PUSH
49888: LD_VAR 0 5
49892: ST_TO_ADDR
// end ;
49893: LD_VAR 0 4
49897: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49898: LD_INT 0
49900: PPUSH
49901: PPUSH
49902: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49903: LD_VAR 0 1
49907: NOT
49908: PUSH
49909: LD_VAR 0 2
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 4
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: IN
49932: NOT
49933: OR
49934: IFFALSE 49938
// exit ;
49936: GO 50021
// tmp := [ ] ;
49938: LD_ADDR_VAR 0 5
49942: PUSH
49943: EMPTY
49944: ST_TO_ADDR
// for i in units do
49945: LD_ADDR_VAR 0 4
49949: PUSH
49950: LD_VAR 0 1
49954: PUSH
49955: FOR_IN
49956: IFFALSE 49990
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
49958: LD_ADDR_VAR 0 5
49962: PUSH
49963: LD_VAR 0 5
49967: PPUSH
49968: LD_VAR 0 4
49972: PPUSH
49973: LD_VAR 0 2
49977: PPUSH
49978: CALL_OW 259
49982: PPUSH
49983: CALL 51394 0 2
49987: ST_TO_ADDR
49988: GO 49955
49990: POP
49991: POP
// if not tmp then
49992: LD_VAR 0 5
49996: NOT
49997: IFFALSE 50001
// exit ;
49999: GO 50021
// result := SortListByListDesc ( units , tmp ) ;
50001: LD_ADDR_VAR 0 3
50005: PUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: LD_VAR 0 5
50015: PPUSH
50016: CALL_OW 77
50020: ST_TO_ADDR
// end ;
50021: LD_VAR 0 3
50025: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50026: LD_INT 0
50028: PPUSH
50029: PPUSH
50030: PPUSH
// result := false ;
50031: LD_ADDR_VAR 0 3
50035: PUSH
50036: LD_INT 0
50038: ST_TO_ADDR
// if not building then
50039: LD_VAR 0 2
50043: NOT
50044: IFFALSE 50048
// exit ;
50046: GO 50186
// x := GetX ( building ) ;
50048: LD_ADDR_VAR 0 4
50052: PUSH
50053: LD_VAR 0 2
50057: PPUSH
50058: CALL_OW 250
50062: ST_TO_ADDR
// y := GetY ( building ) ;
50063: LD_ADDR_VAR 0 5
50067: PUSH
50068: LD_VAR 0 2
50072: PPUSH
50073: CALL_OW 251
50077: ST_TO_ADDR
// if not x or not y then
50078: LD_VAR 0 4
50082: NOT
50083: PUSH
50084: LD_VAR 0 5
50088: NOT
50089: OR
50090: IFFALSE 50094
// exit ;
50092: GO 50186
// if GetTaskList ( unit ) then
50094: LD_VAR 0 1
50098: PPUSH
50099: CALL_OW 437
50103: IFFALSE 50186
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50105: LD_STRING e
50107: PUSH
50108: LD_VAR 0 1
50112: PPUSH
50113: CALL_OW 437
50117: PUSH
50118: LD_INT 1
50120: ARRAY
50121: PUSH
50122: LD_INT 1
50124: ARRAY
50125: EQUAL
50126: PUSH
50127: LD_VAR 0 4
50131: PUSH
50132: LD_VAR 0 1
50136: PPUSH
50137: CALL_OW 437
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PUSH
50146: LD_INT 2
50148: ARRAY
50149: EQUAL
50150: AND
50151: PUSH
50152: LD_VAR 0 5
50156: PUSH
50157: LD_VAR 0 1
50161: PPUSH
50162: CALL_OW 437
50166: PUSH
50167: LD_INT 1
50169: ARRAY
50170: PUSH
50171: LD_INT 3
50173: ARRAY
50174: EQUAL
50175: AND
50176: IFFALSE 50186
// result := true end ;
50178: LD_ADDR_VAR 0 3
50182: PUSH
50183: LD_INT 1
50185: ST_TO_ADDR
// end ;
50186: LD_VAR 0 3
50190: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50191: LD_INT 0
50193: PPUSH
// result := false ;
50194: LD_ADDR_VAR 0 4
50198: PUSH
50199: LD_INT 0
50201: ST_TO_ADDR
// if GetTaskList ( unit ) then
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL_OW 437
50211: IFFALSE 50294
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50213: LD_STRING M
50215: PUSH
50216: LD_VAR 0 1
50220: PPUSH
50221: CALL_OW 437
50225: PUSH
50226: LD_INT 1
50228: ARRAY
50229: PUSH
50230: LD_INT 1
50232: ARRAY
50233: EQUAL
50234: PUSH
50235: LD_VAR 0 2
50239: PUSH
50240: LD_VAR 0 1
50244: PPUSH
50245: CALL_OW 437
50249: PUSH
50250: LD_INT 1
50252: ARRAY
50253: PUSH
50254: LD_INT 2
50256: ARRAY
50257: EQUAL
50258: AND
50259: PUSH
50260: LD_VAR 0 3
50264: PUSH
50265: LD_VAR 0 1
50269: PPUSH
50270: CALL_OW 437
50274: PUSH
50275: LD_INT 1
50277: ARRAY
50278: PUSH
50279: LD_INT 3
50281: ARRAY
50282: EQUAL
50283: AND
50284: IFFALSE 50294
// result := true ;
50286: LD_ADDR_VAR 0 4
50290: PUSH
50291: LD_INT 1
50293: ST_TO_ADDR
// end ; end ;
50294: LD_VAR 0 4
50298: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50299: LD_INT 0
50301: PPUSH
50302: PPUSH
50303: PPUSH
50304: PPUSH
// if not unit or not area then
50305: LD_VAR 0 1
50309: NOT
50310: PUSH
50311: LD_VAR 0 2
50315: NOT
50316: OR
50317: IFFALSE 50321
// exit ;
50319: GO 50497
// tmp := AreaToList ( area , i ) ;
50321: LD_ADDR_VAR 0 6
50325: PUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: LD_VAR 0 5
50335: PPUSH
50336: CALL_OW 517
50340: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50341: LD_ADDR_VAR 0 5
50345: PUSH
50346: DOUBLE
50347: LD_INT 1
50349: DEC
50350: ST_TO_ADDR
50351: LD_VAR 0 6
50355: PUSH
50356: LD_INT 1
50358: ARRAY
50359: PUSH
50360: FOR_TO
50361: IFFALSE 50495
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50363: LD_ADDR_VAR 0 7
50367: PUSH
50368: LD_VAR 0 6
50372: PUSH
50373: LD_INT 1
50375: ARRAY
50376: PUSH
50377: LD_VAR 0 5
50381: ARRAY
50382: PUSH
50383: LD_VAR 0 6
50387: PUSH
50388: LD_INT 2
50390: ARRAY
50391: PUSH
50392: LD_VAR 0 5
50396: ARRAY
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
50402: LD_INT 92
50404: PUSH
50405: LD_VAR 0 7
50409: PUSH
50410: LD_INT 1
50412: ARRAY
50413: PUSH
50414: LD_VAR 0 7
50418: PUSH
50419: LD_INT 2
50421: ARRAY
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: PPUSH
50432: CALL_OW 69
50436: PUSH
50437: LD_INT 0
50439: EQUAL
50440: IFFALSE 50493
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50442: LD_VAR 0 1
50446: PPUSH
50447: LD_VAR 0 7
50451: PUSH
50452: LD_INT 1
50454: ARRAY
50455: PPUSH
50456: LD_VAR 0 7
50460: PUSH
50461: LD_INT 2
50463: ARRAY
50464: PPUSH
50465: LD_VAR 0 3
50469: PPUSH
50470: CALL_OW 48
// result := IsPlaced ( unit ) ;
50474: LD_ADDR_VAR 0 4
50478: PUSH
50479: LD_VAR 0 1
50483: PPUSH
50484: CALL_OW 305
50488: ST_TO_ADDR
// exit ;
50489: POP
50490: POP
50491: GO 50497
// end ; end ;
50493: GO 50360
50495: POP
50496: POP
// end ;
50497: LD_VAR 0 4
50501: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50502: LD_INT 0
50504: PPUSH
50505: PPUSH
50506: PPUSH
// if not side or side > 8 then
50507: LD_VAR 0 1
50511: NOT
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: LD_INT 8
50520: GREATER
50521: OR
50522: IFFALSE 50526
// exit ;
50524: GO 50713
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50526: LD_ADDR_VAR 0 4
50530: PUSH
50531: LD_INT 22
50533: PUSH
50534: LD_VAR 0 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 21
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PPUSH
50557: CALL_OW 69
50561: ST_TO_ADDR
// if not tmp then
50562: LD_VAR 0 4
50566: NOT
50567: IFFALSE 50571
// exit ;
50569: GO 50713
// enable_addtolog := true ;
50571: LD_ADDR_OWVAR 81
50575: PUSH
50576: LD_INT 1
50578: ST_TO_ADDR
// AddToLog ( [ ) ;
50579: LD_STRING [
50581: PPUSH
50582: CALL_OW 561
// for i in tmp do
50586: LD_ADDR_VAR 0 3
50590: PUSH
50591: LD_VAR 0 4
50595: PUSH
50596: FOR_IN
50597: IFFALSE 50704
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50599: LD_STRING [
50601: PUSH
50602: LD_VAR 0 3
50606: PPUSH
50607: CALL_OW 266
50611: STR
50612: PUSH
50613: LD_STRING , 
50615: STR
50616: PUSH
50617: LD_VAR 0 3
50621: PPUSH
50622: CALL_OW 250
50626: STR
50627: PUSH
50628: LD_STRING , 
50630: STR
50631: PUSH
50632: LD_VAR 0 3
50636: PPUSH
50637: CALL_OW 251
50641: STR
50642: PUSH
50643: LD_STRING , 
50645: STR
50646: PUSH
50647: LD_VAR 0 3
50651: PPUSH
50652: CALL_OW 254
50656: STR
50657: PUSH
50658: LD_STRING , 
50660: STR
50661: PUSH
50662: LD_VAR 0 3
50666: PPUSH
50667: LD_INT 1
50669: PPUSH
50670: CALL_OW 268
50674: STR
50675: PUSH
50676: LD_STRING , 
50678: STR
50679: PUSH
50680: LD_VAR 0 3
50684: PPUSH
50685: LD_INT 2
50687: PPUSH
50688: CALL_OW 268
50692: STR
50693: PUSH
50694: LD_STRING ],
50696: STR
50697: PPUSH
50698: CALL_OW 561
// end ;
50702: GO 50596
50704: POP
50705: POP
// AddToLog ( ]; ) ;
50706: LD_STRING ];
50708: PPUSH
50709: CALL_OW 561
// end ;
50713: LD_VAR 0 2
50717: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50718: LD_INT 0
50720: PPUSH
50721: PPUSH
50722: PPUSH
50723: PPUSH
50724: PPUSH
// if not area or not rate or not max then
50725: LD_VAR 0 1
50729: NOT
50730: PUSH
50731: LD_VAR 0 2
50735: NOT
50736: OR
50737: PUSH
50738: LD_VAR 0 4
50742: NOT
50743: OR
50744: IFFALSE 50748
// exit ;
50746: GO 50937
// while 1 do
50748: LD_INT 1
50750: IFFALSE 50937
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50752: LD_ADDR_VAR 0 9
50756: PUSH
50757: LD_VAR 0 1
50761: PPUSH
50762: LD_INT 1
50764: PPUSH
50765: CALL_OW 287
50769: PUSH
50770: LD_INT 10
50772: MUL
50773: ST_TO_ADDR
// r := rate / 10 ;
50774: LD_ADDR_VAR 0 7
50778: PUSH
50779: LD_VAR 0 2
50783: PUSH
50784: LD_INT 10
50786: DIVREAL
50787: ST_TO_ADDR
// time := 1 1$00 ;
50788: LD_ADDR_VAR 0 8
50792: PUSH
50793: LD_INT 2100
50795: ST_TO_ADDR
// if amount < min then
50796: LD_VAR 0 9
50800: PUSH
50801: LD_VAR 0 3
50805: LESS
50806: IFFALSE 50824
// r := r * 2 else
50808: LD_ADDR_VAR 0 7
50812: PUSH
50813: LD_VAR 0 7
50817: PUSH
50818: LD_INT 2
50820: MUL
50821: ST_TO_ADDR
50822: GO 50850
// if amount > max then
50824: LD_VAR 0 9
50828: PUSH
50829: LD_VAR 0 4
50833: GREATER
50834: IFFALSE 50850
// r := r / 2 ;
50836: LD_ADDR_VAR 0 7
50840: PUSH
50841: LD_VAR 0 7
50845: PUSH
50846: LD_INT 2
50848: DIVREAL
50849: ST_TO_ADDR
// time := time / r ;
50850: LD_ADDR_VAR 0 8
50854: PUSH
50855: LD_VAR 0 8
50859: PUSH
50860: LD_VAR 0 7
50864: DIVREAL
50865: ST_TO_ADDR
// if time < 0 then
50866: LD_VAR 0 8
50870: PUSH
50871: LD_INT 0
50873: LESS
50874: IFFALSE 50891
// time := time * - 1 ;
50876: LD_ADDR_VAR 0 8
50880: PUSH
50881: LD_VAR 0 8
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: MUL
50890: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
50891: LD_VAR 0 8
50895: PUSH
50896: LD_INT 35
50898: PPUSH
50899: LD_INT 875
50901: PPUSH
50902: CALL_OW 12
50906: PLUS
50907: PPUSH
50908: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50912: LD_INT 1
50914: PPUSH
50915: LD_INT 5
50917: PPUSH
50918: CALL_OW 12
50922: PPUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_INT 1
50930: PPUSH
50931: CALL_OW 55
// end ;
50935: GO 50748
// end ;
50937: LD_VAR 0 5
50941: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50942: LD_INT 0
50944: PPUSH
50945: PPUSH
50946: PPUSH
50947: PPUSH
50948: PPUSH
50949: PPUSH
50950: PPUSH
50951: PPUSH
// if not turrets or not factories then
50952: LD_VAR 0 1
50956: NOT
50957: PUSH
50958: LD_VAR 0 2
50962: NOT
50963: OR
50964: IFFALSE 50968
// exit ;
50966: GO 51275
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50968: LD_ADDR_VAR 0 10
50972: PUSH
50973: LD_INT 5
50975: PUSH
50976: LD_INT 6
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: LD_INT 5
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 24
51010: PUSH
51011: LD_INT 25
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 23
51020: PUSH
51021: LD_INT 27
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 42
51034: PUSH
51035: LD_INT 43
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 44
51044: PUSH
51045: LD_INT 46
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 45
51054: PUSH
51055: LD_INT 47
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// result := [ ] ;
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: EMPTY
51078: ST_TO_ADDR
// for i in turrets do
51079: LD_ADDR_VAR 0 4
51083: PUSH
51084: LD_VAR 0 1
51088: PUSH
51089: FOR_IN
51090: IFFALSE 51273
// begin nat := GetNation ( i ) ;
51092: LD_ADDR_VAR 0 7
51096: PUSH
51097: LD_VAR 0 4
51101: PPUSH
51102: CALL_OW 248
51106: ST_TO_ADDR
// weapon := 0 ;
51107: LD_ADDR_VAR 0 8
51111: PUSH
51112: LD_INT 0
51114: ST_TO_ADDR
// if not nat then
51115: LD_VAR 0 7
51119: NOT
51120: IFFALSE 51124
// continue ;
51122: GO 51089
// for j in list [ nat ] do
51124: LD_ADDR_VAR 0 5
51128: PUSH
51129: LD_VAR 0 10
51133: PUSH
51134: LD_VAR 0 7
51138: ARRAY
51139: PUSH
51140: FOR_IN
51141: IFFALSE 51182
// if GetBWeapon ( i ) = j [ 1 ] then
51143: LD_VAR 0 4
51147: PPUSH
51148: CALL_OW 269
51152: PUSH
51153: LD_VAR 0 5
51157: PUSH
51158: LD_INT 1
51160: ARRAY
51161: EQUAL
51162: IFFALSE 51180
// begin weapon := j [ 2 ] ;
51164: LD_ADDR_VAR 0 8
51168: PUSH
51169: LD_VAR 0 5
51173: PUSH
51174: LD_INT 2
51176: ARRAY
51177: ST_TO_ADDR
// break ;
51178: GO 51182
// end ;
51180: GO 51140
51182: POP
51183: POP
// if not weapon then
51184: LD_VAR 0 8
51188: NOT
51189: IFFALSE 51193
// continue ;
51191: GO 51089
// for k in factories do
51193: LD_ADDR_VAR 0 6
51197: PUSH
51198: LD_VAR 0 2
51202: PUSH
51203: FOR_IN
51204: IFFALSE 51269
// begin weapons := AvailableWeaponList ( k ) ;
51206: LD_ADDR_VAR 0 9
51210: PUSH
51211: LD_VAR 0 6
51215: PPUSH
51216: CALL_OW 478
51220: ST_TO_ADDR
// if not weapons then
51221: LD_VAR 0 9
51225: NOT
51226: IFFALSE 51230
// continue ;
51228: GO 51203
// if weapon in weapons then
51230: LD_VAR 0 8
51234: PUSH
51235: LD_VAR 0 9
51239: IN
51240: IFFALSE 51267
// begin result := [ i , weapon ] ;
51242: LD_ADDR_VAR 0 3
51246: PUSH
51247: LD_VAR 0 4
51251: PUSH
51252: LD_VAR 0 8
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: ST_TO_ADDR
// exit ;
51261: POP
51262: POP
51263: POP
51264: POP
51265: GO 51275
// end ; end ;
51267: GO 51203
51269: POP
51270: POP
// end ;
51271: GO 51089
51273: POP
51274: POP
// end ;
51275: LD_VAR 0 3
51279: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51280: LD_INT 0
51282: PPUSH
// if not side or side > 8 then
51283: LD_VAR 0 3
51287: NOT
51288: PUSH
51289: LD_VAR 0 3
51293: PUSH
51294: LD_INT 8
51296: GREATER
51297: OR
51298: IFFALSE 51302
// exit ;
51300: GO 51361
// if not range then
51302: LD_VAR 0 4
51306: NOT
51307: IFFALSE 51318
// range := - 12 ;
51309: LD_ADDR_VAR 0 4
51313: PUSH
51314: LD_INT 12
51316: NEG
51317: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51318: LD_VAR 0 1
51322: PPUSH
51323: LD_VAR 0 2
51327: PPUSH
51328: LD_VAR 0 3
51332: PPUSH
51333: LD_VAR 0 4
51337: PPUSH
51338: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51342: LD_VAR 0 1
51346: PPUSH
51347: LD_VAR 0 2
51351: PPUSH
51352: LD_VAR 0 3
51356: PPUSH
51357: CALL_OW 331
// end ;
51361: LD_VAR 0 5
51365: RET
// export function Video ( mode ) ; begin
51366: LD_INT 0
51368: PPUSH
// ingame_video = mode ;
51369: LD_ADDR_OWVAR 52
51373: PUSH
51374: LD_VAR 0 1
51378: ST_TO_ADDR
// interface_hidden = mode ;
51379: LD_ADDR_OWVAR 54
51383: PUSH
51384: LD_VAR 0 1
51388: ST_TO_ADDR
// end ;
51389: LD_VAR 0 2
51393: RET
// export function Join ( array , element ) ; begin
51394: LD_INT 0
51396: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51397: LD_ADDR_VAR 0 3
51401: PUSH
51402: LD_VAR 0 1
51406: PPUSH
51407: LD_VAR 0 1
51411: PUSH
51412: LD_INT 1
51414: PLUS
51415: PPUSH
51416: LD_VAR 0 2
51420: PPUSH
51421: CALL_OW 1
51425: ST_TO_ADDR
// end ;
51426: LD_VAR 0 3
51430: RET
// export function JoinUnion ( array , element ) ; begin
51431: LD_INT 0
51433: PPUSH
// result := array union element ;
51434: LD_ADDR_VAR 0 3
51438: PUSH
51439: LD_VAR 0 1
51443: PUSH
51444: LD_VAR 0 2
51448: UNION
51449: ST_TO_ADDR
// end ;
51450: LD_VAR 0 3
51454: RET
// export function GetBehemoths ( side ) ; begin
51455: LD_INT 0
51457: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51458: LD_ADDR_VAR 0 2
51462: PUSH
51463: LD_INT 22
51465: PUSH
51466: LD_VAR 0 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 31
51477: PUSH
51478: LD_INT 25
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PPUSH
51489: CALL_OW 69
51493: ST_TO_ADDR
// end ;
51494: LD_VAR 0 2
51498: RET
// export function Shuffle ( array ) ; var i , index ; begin
51499: LD_INT 0
51501: PPUSH
51502: PPUSH
51503: PPUSH
// result := [ ] ;
51504: LD_ADDR_VAR 0 2
51508: PUSH
51509: EMPTY
51510: ST_TO_ADDR
// if not array then
51511: LD_VAR 0 1
51515: NOT
51516: IFFALSE 51520
// exit ;
51518: GO 51619
// Randomize ;
51520: CALL_OW 10
// for i = array downto 1 do
51524: LD_ADDR_VAR 0 3
51528: PUSH
51529: DOUBLE
51530: LD_VAR 0 1
51534: INC
51535: ST_TO_ADDR
51536: LD_INT 1
51538: PUSH
51539: FOR_DOWNTO
51540: IFFALSE 51617
// begin index := rand ( 1 , array ) ;
51542: LD_ADDR_VAR 0 4
51546: PUSH
51547: LD_INT 1
51549: PPUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 12
51559: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51560: LD_ADDR_VAR 0 2
51564: PUSH
51565: LD_VAR 0 2
51569: PPUSH
51570: LD_VAR 0 2
51574: PUSH
51575: LD_INT 1
51577: PLUS
51578: PPUSH
51579: LD_VAR 0 1
51583: PUSH
51584: LD_VAR 0 4
51588: ARRAY
51589: PPUSH
51590: CALL_OW 2
51594: ST_TO_ADDR
// array := Delete ( array , index ) ;
51595: LD_ADDR_VAR 0 1
51599: PUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: LD_VAR 0 4
51609: PPUSH
51610: CALL_OW 3
51614: ST_TO_ADDR
// end ;
51615: GO 51539
51617: POP
51618: POP
// end ;
51619: LD_VAR 0 2
51623: RET
// export function GetBaseMaterials ( base ) ; begin
51624: LD_INT 0
51626: PPUSH
// result := [ 0 , 0 , 0 ] ;
51627: LD_ADDR_VAR 0 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: ST_TO_ADDR
// if not base then
51646: LD_VAR 0 1
51650: NOT
51651: IFFALSE 51655
// exit ;
51653: GO 51704
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51655: LD_ADDR_VAR 0 2
51659: PUSH
51660: LD_VAR 0 1
51664: PPUSH
51665: LD_INT 1
51667: PPUSH
51668: CALL_OW 275
51672: PUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: LD_INT 2
51680: PPUSH
51681: CALL_OW 275
51685: PUSH
51686: LD_VAR 0 1
51690: PPUSH
51691: LD_INT 3
51693: PPUSH
51694: CALL_OW 275
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: ST_TO_ADDR
// end ;
51704: LD_VAR 0 2
51708: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51709: LD_INT 0
51711: PPUSH
51712: PPUSH
// result := array ;
51713: LD_ADDR_VAR 0 3
51717: PUSH
51718: LD_VAR 0 1
51722: ST_TO_ADDR
// if size >= result then
51723: LD_VAR 0 2
51727: PUSH
51728: LD_VAR 0 3
51732: GREATEREQUAL
51733: IFFALSE 51737
// exit ;
51735: GO 51787
// if size then
51737: LD_VAR 0 2
51741: IFFALSE 51787
// for i := array downto size do
51743: LD_ADDR_VAR 0 4
51747: PUSH
51748: DOUBLE
51749: LD_VAR 0 1
51753: INC
51754: ST_TO_ADDR
51755: LD_VAR 0 2
51759: PUSH
51760: FOR_DOWNTO
51761: IFFALSE 51785
// result := Delete ( result , result ) ;
51763: LD_ADDR_VAR 0 3
51767: PUSH
51768: LD_VAR 0 3
51772: PPUSH
51773: LD_VAR 0 3
51777: PPUSH
51778: CALL_OW 3
51782: ST_TO_ADDR
51783: GO 51760
51785: POP
51786: POP
// end ;
51787: LD_VAR 0 3
51791: RET
// export function ComExit ( unit ) ; var tmp ; begin
51792: LD_INT 0
51794: PPUSH
51795: PPUSH
// if not IsInUnit ( unit ) then
51796: LD_VAR 0 1
51800: PPUSH
51801: CALL_OW 310
51805: NOT
51806: IFFALSE 51810
// exit ;
51808: GO 51870
// tmp := IsInUnit ( unit ) ;
51810: LD_ADDR_VAR 0 3
51814: PUSH
51815: LD_VAR 0 1
51819: PPUSH
51820: CALL_OW 310
51824: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51825: LD_VAR 0 3
51829: PPUSH
51830: CALL_OW 247
51834: PUSH
51835: LD_INT 2
51837: EQUAL
51838: IFFALSE 51851
// ComExitVehicle ( unit ) else
51840: LD_VAR 0 1
51844: PPUSH
51845: CALL_OW 121
51849: GO 51860
// ComExitBuilding ( unit ) ;
51851: LD_VAR 0 1
51855: PPUSH
51856: CALL_OW 122
// result := tmp ;
51860: LD_ADDR_VAR 0 2
51864: PUSH
51865: LD_VAR 0 3
51869: ST_TO_ADDR
// end ;
51870: LD_VAR 0 2
51874: RET
// export function ComExitAll ( units ) ; var i ; begin
51875: LD_INT 0
51877: PPUSH
51878: PPUSH
// if not units then
51879: LD_VAR 0 1
51883: NOT
51884: IFFALSE 51888
// exit ;
51886: GO 51914
// for i in units do
51888: LD_ADDR_VAR 0 3
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: FOR_IN
51899: IFFALSE 51912
// ComExit ( i ) ;
51901: LD_VAR 0 3
51905: PPUSH
51906: CALL 51792 0 1
51910: GO 51898
51912: POP
51913: POP
// end ;
51914: LD_VAR 0 2
51918: RET
// export function ResetHc ; begin
51919: LD_INT 0
51921: PPUSH
// InitHc ;
51922: CALL_OW 19
// hc_importance := 0 ;
51926: LD_ADDR_OWVAR 32
51930: PUSH
51931: LD_INT 0
51933: ST_TO_ADDR
// end ;
51934: LD_VAR 0 1
51938: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
51939: LD_INT 0
51941: PPUSH
51942: PPUSH
51943: PPUSH
// _x := ( x1 + x2 ) div 2 ;
51944: LD_ADDR_VAR 0 6
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_VAR 0 3
51958: PLUS
51959: PUSH
51960: LD_INT 2
51962: DIV
51963: ST_TO_ADDR
// if _x < 0 then
51964: LD_VAR 0 6
51968: PUSH
51969: LD_INT 0
51971: LESS
51972: IFFALSE 51989
// _x := _x * - 1 ;
51974: LD_ADDR_VAR 0 6
51978: PUSH
51979: LD_VAR 0 6
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: MUL
51988: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
51989: LD_ADDR_VAR 0 7
51993: PUSH
51994: LD_VAR 0 2
51998: PUSH
51999: LD_VAR 0 4
52003: PLUS
52004: PUSH
52005: LD_INT 2
52007: DIV
52008: ST_TO_ADDR
// if _y < 0 then
52009: LD_VAR 0 7
52013: PUSH
52014: LD_INT 0
52016: LESS
52017: IFFALSE 52034
// _y := _y * - 1 ;
52019: LD_ADDR_VAR 0 7
52023: PUSH
52024: LD_VAR 0 7
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: MUL
52033: ST_TO_ADDR
// result := [ _x , _y ] ;
52034: LD_ADDR_VAR 0 5
52038: PUSH
52039: LD_VAR 0 6
52043: PUSH
52044: LD_VAR 0 7
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: ST_TO_ADDR
// end ;
52053: LD_VAR 0 5
52057: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52058: LD_INT 0
52060: PPUSH
52061: PPUSH
52062: PPUSH
52063: PPUSH
// task := GetTaskList ( unit ) ;
52064: LD_ADDR_VAR 0 7
52068: PUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 437
52078: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52079: LD_VAR 0 7
52083: NOT
52084: PUSH
52085: LD_VAR 0 1
52089: PPUSH
52090: LD_VAR 0 2
52094: PPUSH
52095: CALL_OW 308
52099: NOT
52100: AND
52101: IFFALSE 52105
// exit ;
52103: GO 52223
// if IsInArea ( unit , area ) then
52105: LD_VAR 0 1
52109: PPUSH
52110: LD_VAR 0 2
52114: PPUSH
52115: CALL_OW 308
52119: IFFALSE 52137
// begin ComMoveToArea ( unit , goAway ) ;
52121: LD_VAR 0 1
52125: PPUSH
52126: LD_VAR 0 3
52130: PPUSH
52131: CALL_OW 113
// exit ;
52135: GO 52223
// end ; if task [ 1 ] [ 1 ] <> M then
52137: LD_VAR 0 7
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PUSH
52146: LD_INT 1
52148: ARRAY
52149: PUSH
52150: LD_STRING M
52152: NONEQUAL
52153: IFFALSE 52157
// exit ;
52155: GO 52223
// x := task [ 1 ] [ 2 ] ;
52157: LD_ADDR_VAR 0 5
52161: PUSH
52162: LD_VAR 0 7
52166: PUSH
52167: LD_INT 1
52169: ARRAY
52170: PUSH
52171: LD_INT 2
52173: ARRAY
52174: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52175: LD_ADDR_VAR 0 6
52179: PUSH
52180: LD_VAR 0 7
52184: PUSH
52185: LD_INT 1
52187: ARRAY
52188: PUSH
52189: LD_INT 3
52191: ARRAY
52192: ST_TO_ADDR
// if InArea ( x , y , area ) then
52193: LD_VAR 0 5
52197: PPUSH
52198: LD_VAR 0 6
52202: PPUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: CALL_OW 309
52212: IFFALSE 52223
// ComStop ( unit ) ;
52214: LD_VAR 0 1
52218: PPUSH
52219: CALL_OW 141
// end ;
52223: LD_VAR 0 4
52227: RET
// export function Abs ( value ) ; begin
52228: LD_INT 0
52230: PPUSH
// result := value ;
52231: LD_ADDR_VAR 0 2
52235: PUSH
52236: LD_VAR 0 1
52240: ST_TO_ADDR
// if value < 0 then
52241: LD_VAR 0 1
52245: PUSH
52246: LD_INT 0
52248: LESS
52249: IFFALSE 52266
// result := value * - 1 ;
52251: LD_ADDR_VAR 0 2
52255: PUSH
52256: LD_VAR 0 1
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: MUL
52265: ST_TO_ADDR
// end ;
52266: LD_VAR 0 2
52270: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52271: LD_INT 0
52273: PPUSH
52274: PPUSH
52275: PPUSH
52276: PPUSH
52277: PPUSH
52278: PPUSH
52279: PPUSH
52280: PPUSH
// if not unit or not building then
52281: LD_VAR 0 1
52285: NOT
52286: PUSH
52287: LD_VAR 0 2
52291: NOT
52292: OR
52293: IFFALSE 52297
// exit ;
52295: GO 52523
// x := GetX ( building ) ;
52297: LD_ADDR_VAR 0 4
52301: PUSH
52302: LD_VAR 0 2
52306: PPUSH
52307: CALL_OW 250
52311: ST_TO_ADDR
// y := GetY ( building ) ;
52312: LD_ADDR_VAR 0 6
52316: PUSH
52317: LD_VAR 0 2
52321: PPUSH
52322: CALL_OW 251
52326: ST_TO_ADDR
// d := GetDir ( building ) ;
52327: LD_ADDR_VAR 0 8
52331: PUSH
52332: LD_VAR 0 2
52336: PPUSH
52337: CALL_OW 254
52341: ST_TO_ADDR
// r := 4 ;
52342: LD_ADDR_VAR 0 9
52346: PUSH
52347: LD_INT 4
52349: ST_TO_ADDR
// for i := 1 to 5 do
52350: LD_ADDR_VAR 0 10
52354: PUSH
52355: DOUBLE
52356: LD_INT 1
52358: DEC
52359: ST_TO_ADDR
52360: LD_INT 5
52362: PUSH
52363: FOR_TO
52364: IFFALSE 52521
// begin _x := ShiftX ( x , d , r + i ) ;
52366: LD_ADDR_VAR 0 5
52370: PUSH
52371: LD_VAR 0 4
52375: PPUSH
52376: LD_VAR 0 8
52380: PPUSH
52381: LD_VAR 0 9
52385: PUSH
52386: LD_VAR 0 10
52390: PLUS
52391: PPUSH
52392: CALL_OW 272
52396: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52397: LD_ADDR_VAR 0 7
52401: PUSH
52402: LD_VAR 0 6
52406: PPUSH
52407: LD_VAR 0 8
52411: PPUSH
52412: LD_VAR 0 9
52416: PUSH
52417: LD_VAR 0 10
52421: PLUS
52422: PPUSH
52423: CALL_OW 273
52427: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52428: LD_VAR 0 5
52432: PPUSH
52433: LD_VAR 0 7
52437: PPUSH
52438: CALL_OW 488
52442: PUSH
52443: LD_VAR 0 5
52447: PPUSH
52448: LD_VAR 0 7
52452: PPUSH
52453: CALL_OW 428
52457: PPUSH
52458: CALL_OW 247
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: IN
52473: NOT
52474: AND
52475: IFFALSE 52519
// begin ComMoveXY ( unit , _x , _y ) ;
52477: LD_VAR 0 1
52481: PPUSH
52482: LD_VAR 0 5
52486: PPUSH
52487: LD_VAR 0 7
52491: PPUSH
52492: CALL_OW 111
// result := [ _x , _y ] ;
52496: LD_ADDR_VAR 0 3
52500: PUSH
52501: LD_VAR 0 5
52505: PUSH
52506: LD_VAR 0 7
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: ST_TO_ADDR
// exit ;
52515: POP
52516: POP
52517: GO 52523
// end ; end ;
52519: GO 52363
52521: POP
52522: POP
// end ;
52523: LD_VAR 0 3
52527: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52528: LD_INT 0
52530: PPUSH
52531: PPUSH
52532: PPUSH
// result := 0 ;
52533: LD_ADDR_VAR 0 3
52537: PUSH
52538: LD_INT 0
52540: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52541: LD_VAR 0 1
52545: PUSH
52546: LD_INT 0
52548: LESS
52549: PUSH
52550: LD_VAR 0 1
52554: PUSH
52555: LD_INT 8
52557: GREATER
52558: OR
52559: PUSH
52560: LD_VAR 0 2
52564: PUSH
52565: LD_INT 0
52567: LESS
52568: OR
52569: PUSH
52570: LD_VAR 0 2
52574: PUSH
52575: LD_INT 8
52577: GREATER
52578: OR
52579: IFFALSE 52583
// exit ;
52581: GO 52658
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52583: LD_ADDR_VAR 0 4
52587: PUSH
52588: LD_INT 22
52590: PUSH
52591: LD_VAR 0 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PPUSH
52600: CALL_OW 69
52604: PUSH
52605: FOR_IN
52606: IFFALSE 52656
// begin un := UnitShoot ( i ) ;
52608: LD_ADDR_VAR 0 5
52612: PUSH
52613: LD_VAR 0 4
52617: PPUSH
52618: CALL_OW 504
52622: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52623: LD_VAR 0 5
52627: PPUSH
52628: CALL_OW 255
52632: PUSH
52633: LD_VAR 0 1
52637: EQUAL
52638: IFFALSE 52654
// begin result := un ;
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_VAR 0 5
52649: ST_TO_ADDR
// exit ;
52650: POP
52651: POP
52652: GO 52658
// end ; end ;
52654: GO 52605
52656: POP
52657: POP
// end ;
52658: LD_VAR 0 3
52662: RET
// export function GetCargoBay ( units ) ; begin
52663: LD_INT 0
52665: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52666: LD_ADDR_VAR 0 2
52670: PUSH
52671: LD_VAR 0 1
52675: PPUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 34
52681: PUSH
52682: LD_INT 12
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 34
52691: PUSH
52692: LD_INT 51
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 34
52701: PUSH
52702: LD_INT 32
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 34
52711: PUSH
52712: LD_INT 89
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: PPUSH
52726: CALL_OW 72
52730: ST_TO_ADDR
// end ;
52731: LD_VAR 0 2
52735: RET
// export function Negate ( value ) ; begin
52736: LD_INT 0
52738: PPUSH
// result := not value ;
52739: LD_ADDR_VAR 0 2
52743: PUSH
52744: LD_VAR 0 1
52748: NOT
52749: ST_TO_ADDR
// end ;
52750: LD_VAR 0 2
52754: RET
// export function Inc ( value ) ; begin
52755: LD_INT 0
52757: PPUSH
// result := value + 1 ;
52758: LD_ADDR_VAR 0 2
52762: PUSH
52763: LD_VAR 0 1
52767: PUSH
52768: LD_INT 1
52770: PLUS
52771: ST_TO_ADDR
// end ;
52772: LD_VAR 0 2
52776: RET
// export function Dec ( value ) ; begin
52777: LD_INT 0
52779: PPUSH
// result := value - 1 ;
52780: LD_ADDR_VAR 0 2
52784: PUSH
52785: LD_VAR 0 1
52789: PUSH
52790: LD_INT 1
52792: MINUS
52793: ST_TO_ADDR
// end ;
52794: LD_VAR 0 2
52798: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
52799: LD_INT 0
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
52805: PPUSH
52806: PPUSH
52807: PPUSH
52808: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
52809: LD_VAR 0 1
52813: PPUSH
52814: LD_VAR 0 2
52818: PPUSH
52819: CALL_OW 488
52823: NOT
52824: PUSH
52825: LD_VAR 0 3
52829: PPUSH
52830: LD_VAR 0 4
52834: PPUSH
52835: CALL_OW 488
52839: NOT
52840: OR
52841: IFFALSE 52854
// begin result := - 1 ;
52843: LD_ADDR_VAR 0 5
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: ST_TO_ADDR
// exit ;
52852: GO 53089
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
52854: LD_ADDR_VAR 0 12
52858: PUSH
52859: LD_VAR 0 1
52863: PPUSH
52864: LD_VAR 0 2
52868: PPUSH
52869: LD_VAR 0 3
52873: PPUSH
52874: LD_VAR 0 4
52878: PPUSH
52879: CALL 51939 0 4
52883: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
52884: LD_ADDR_VAR 0 11
52888: PUSH
52889: LD_VAR 0 1
52893: PPUSH
52894: LD_VAR 0 2
52898: PPUSH
52899: LD_VAR 0 12
52903: PUSH
52904: LD_INT 1
52906: ARRAY
52907: PPUSH
52908: LD_VAR 0 12
52912: PUSH
52913: LD_INT 2
52915: ARRAY
52916: PPUSH
52917: CALL_OW 298
52921: ST_TO_ADDR
// distance := 9999 ;
52922: LD_ADDR_VAR 0 10
52926: PUSH
52927: LD_INT 9999
52929: ST_TO_ADDR
// for i := 0 to 5 do
52930: LD_ADDR_VAR 0 6
52934: PUSH
52935: DOUBLE
52936: LD_INT 0
52938: DEC
52939: ST_TO_ADDR
52940: LD_INT 5
52942: PUSH
52943: FOR_TO
52944: IFFALSE 53087
// begin _x := ShiftX ( x1 , i , centerDist ) ;
52946: LD_ADDR_VAR 0 7
52950: PUSH
52951: LD_VAR 0 1
52955: PPUSH
52956: LD_VAR 0 6
52960: PPUSH
52961: LD_VAR 0 11
52965: PPUSH
52966: CALL_OW 272
52970: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
52971: LD_ADDR_VAR 0 8
52975: PUSH
52976: LD_VAR 0 2
52980: PPUSH
52981: LD_VAR 0 6
52985: PPUSH
52986: LD_VAR 0 11
52990: PPUSH
52991: CALL_OW 273
52995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52996: LD_VAR 0 7
53000: PPUSH
53001: LD_VAR 0 8
53005: PPUSH
53006: CALL_OW 488
53010: NOT
53011: IFFALSE 53015
// continue ;
53013: GO 52943
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53015: LD_ADDR_VAR 0 9
53019: PUSH
53020: LD_VAR 0 12
53024: PUSH
53025: LD_INT 1
53027: ARRAY
53028: PPUSH
53029: LD_VAR 0 12
53033: PUSH
53034: LD_INT 2
53036: ARRAY
53037: PPUSH
53038: LD_VAR 0 7
53042: PPUSH
53043: LD_VAR 0 8
53047: PPUSH
53048: CALL_OW 298
53052: ST_TO_ADDR
// if tmp < distance then
53053: LD_VAR 0 9
53057: PUSH
53058: LD_VAR 0 10
53062: LESS
53063: IFFALSE 53085
// begin result := i ;
53065: LD_ADDR_VAR 0 5
53069: PUSH
53070: LD_VAR 0 6
53074: ST_TO_ADDR
// distance := tmp ;
53075: LD_ADDR_VAR 0 10
53079: PUSH
53080: LD_VAR 0 9
53084: ST_TO_ADDR
// end ; end ;
53085: GO 52943
53087: POP
53088: POP
// end ;
53089: LD_VAR 0 5
53093: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53094: LD_INT 0
53096: PPUSH
53097: PPUSH
// if not driver or not IsInUnit ( driver ) then
53098: LD_VAR 0 1
53102: NOT
53103: PUSH
53104: LD_VAR 0 1
53108: PPUSH
53109: CALL_OW 310
53113: NOT
53114: OR
53115: IFFALSE 53119
// exit ;
53117: GO 53209
// vehicle := IsInUnit ( driver ) ;
53119: LD_ADDR_VAR 0 3
53123: PUSH
53124: LD_VAR 0 1
53128: PPUSH
53129: CALL_OW 310
53133: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53134: LD_VAR 0 1
53138: PPUSH
53139: LD_STRING \
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: PUSH
53169: LD_STRING E
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_VAR 0 3
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PPUSH
53205: CALL_OW 446
// end ;
53209: LD_VAR 0 2
53213: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53214: LD_INT 0
53216: PPUSH
53217: PPUSH
// if not driver or not IsInUnit ( driver ) then
53218: LD_VAR 0 1
53222: NOT
53223: PUSH
53224: LD_VAR 0 1
53228: PPUSH
53229: CALL_OW 310
53233: NOT
53234: OR
53235: IFFALSE 53239
// exit ;
53237: GO 53329
// vehicle := IsInUnit ( driver ) ;
53239: LD_ADDR_VAR 0 3
53243: PUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 310
53253: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53254: LD_VAR 0 1
53258: PPUSH
53259: LD_STRING \
53261: PUSH
53262: LD_INT 0
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: PUSH
53289: LD_STRING E
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: LD_VAR 0 3
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PPUSH
53325: CALL_OW 447
// end ;
53329: LD_VAR 0 2
53333: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53334: LD_INT 0
53336: PPUSH
53337: PPUSH
53338: PPUSH
// tmp := [ ] ;
53339: LD_ADDR_VAR 0 5
53343: PUSH
53344: EMPTY
53345: ST_TO_ADDR
// for i in units do
53346: LD_ADDR_VAR 0 4
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: FOR_IN
53357: IFFALSE 53395
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53359: LD_ADDR_VAR 0 5
53363: PUSH
53364: LD_VAR 0 5
53368: PPUSH
53369: LD_VAR 0 5
53373: PUSH
53374: LD_INT 1
53376: PLUS
53377: PPUSH
53378: LD_VAR 0 4
53382: PPUSH
53383: CALL_OW 256
53387: PPUSH
53388: CALL_OW 2
53392: ST_TO_ADDR
53393: GO 53356
53395: POP
53396: POP
// if not tmp then
53397: LD_VAR 0 5
53401: NOT
53402: IFFALSE 53406
// exit ;
53404: GO 53454
// if asc then
53406: LD_VAR 0 2
53410: IFFALSE 53434
// result := SortListByListAsc ( units , tmp ) else
53412: LD_ADDR_VAR 0 3
53416: PUSH
53417: LD_VAR 0 1
53421: PPUSH
53422: LD_VAR 0 5
53426: PPUSH
53427: CALL_OW 76
53431: ST_TO_ADDR
53432: GO 53454
// result := SortListByListDesc ( units , tmp ) ;
53434: LD_ADDR_VAR 0 3
53438: PUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: LD_VAR 0 5
53448: PPUSH
53449: CALL_OW 77
53453: ST_TO_ADDR
// end ;
53454: LD_VAR 0 3
53458: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53459: LD_INT 0
53461: PPUSH
53462: PPUSH
// task := GetTaskList ( mech ) ;
53463: LD_ADDR_VAR 0 4
53467: PUSH
53468: LD_VAR 0 1
53472: PPUSH
53473: CALL_OW 437
53477: ST_TO_ADDR
// if not task then
53478: LD_VAR 0 4
53482: NOT
53483: IFFALSE 53487
// exit ;
53485: GO 53529
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53487: LD_ADDR_VAR 0 3
53491: PUSH
53492: LD_VAR 0 4
53496: PUSH
53497: LD_INT 1
53499: ARRAY
53500: PUSH
53501: LD_INT 1
53503: ARRAY
53504: PUSH
53505: LD_STRING r
53507: EQUAL
53508: PUSH
53509: LD_VAR 0 4
53513: PUSH
53514: LD_INT 1
53516: ARRAY
53517: PUSH
53518: LD_INT 4
53520: ARRAY
53521: PUSH
53522: LD_VAR 0 2
53526: EQUAL
53527: AND
53528: ST_TO_ADDR
// end ;
53529: LD_VAR 0 3
53533: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53534: LD_INT 0
53536: PPUSH
// SetDir ( unit , d ) ;
53537: LD_VAR 0 1
53541: PPUSH
53542: LD_VAR 0 4
53546: PPUSH
53547: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53551: LD_VAR 0 1
53555: PPUSH
53556: LD_VAR 0 2
53560: PPUSH
53561: LD_VAR 0 3
53565: PPUSH
53566: LD_VAR 0 5
53570: PPUSH
53571: CALL_OW 48
// end ;
53575: LD_VAR 0 6
53579: RET
// export function ToNaturalNumber ( number ) ; begin
53580: LD_INT 0
53582: PPUSH
// result := number div 1 ;
53583: LD_ADDR_VAR 0 2
53587: PUSH
53588: LD_VAR 0 1
53592: PUSH
53593: LD_INT 1
53595: DIV
53596: ST_TO_ADDR
// if number < 0 then
53597: LD_VAR 0 1
53601: PUSH
53602: LD_INT 0
53604: LESS
53605: IFFALSE 53615
// result := 0 ;
53607: LD_ADDR_VAR 0 2
53611: PUSH
53612: LD_INT 0
53614: ST_TO_ADDR
// end ;
53615: LD_VAR 0 2
53619: RET
// export function SortByClass ( units , class ) ; var un ; begin
53620: LD_INT 0
53622: PPUSH
53623: PPUSH
// if not units or not class then
53624: LD_VAR 0 1
53628: NOT
53629: PUSH
53630: LD_VAR 0 2
53634: NOT
53635: OR
53636: IFFALSE 53640
// exit ;
53638: GO 53735
// result := [ ] ;
53640: LD_ADDR_VAR 0 3
53644: PUSH
53645: EMPTY
53646: ST_TO_ADDR
// for un in units do
53647: LD_ADDR_VAR 0 4
53651: PUSH
53652: LD_VAR 0 1
53656: PUSH
53657: FOR_IN
53658: IFFALSE 53733
// if GetClass ( un ) = class then
53660: LD_VAR 0 4
53664: PPUSH
53665: CALL_OW 257
53669: PUSH
53670: LD_VAR 0 2
53674: EQUAL
53675: IFFALSE 53702
// result := Insert ( result , 1 , un ) else
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_VAR 0 3
53686: PPUSH
53687: LD_INT 1
53689: PPUSH
53690: LD_VAR 0 4
53694: PPUSH
53695: CALL_OW 2
53699: ST_TO_ADDR
53700: GO 53731
// result := Replace ( result , result + 1 , un ) ;
53702: LD_ADDR_VAR 0 3
53706: PUSH
53707: LD_VAR 0 3
53711: PPUSH
53712: LD_VAR 0 3
53716: PUSH
53717: LD_INT 1
53719: PLUS
53720: PPUSH
53721: LD_VAR 0 4
53725: PPUSH
53726: CALL_OW 1
53730: ST_TO_ADDR
53731: GO 53657
53733: POP
53734: POP
// end ;
53735: LD_VAR 0 3
53739: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53740: LD_INT 0
53742: PPUSH
53743: PPUSH
53744: PPUSH
53745: PPUSH
53746: PPUSH
53747: PPUSH
53748: PPUSH
// result := [ ] ;
53749: LD_ADDR_VAR 0 4
53753: PUSH
53754: EMPTY
53755: ST_TO_ADDR
// if x - r < 0 then
53756: LD_VAR 0 1
53760: PUSH
53761: LD_VAR 0 3
53765: MINUS
53766: PUSH
53767: LD_INT 0
53769: LESS
53770: IFFALSE 53782
// min_x := 0 else
53772: LD_ADDR_VAR 0 8
53776: PUSH
53777: LD_INT 0
53779: ST_TO_ADDR
53780: GO 53798
// min_x := x - r ;
53782: LD_ADDR_VAR 0 8
53786: PUSH
53787: LD_VAR 0 1
53791: PUSH
53792: LD_VAR 0 3
53796: MINUS
53797: ST_TO_ADDR
// if y - r < 0 then
53798: LD_VAR 0 2
53802: PUSH
53803: LD_VAR 0 3
53807: MINUS
53808: PUSH
53809: LD_INT 0
53811: LESS
53812: IFFALSE 53824
// min_y := 0 else
53814: LD_ADDR_VAR 0 7
53818: PUSH
53819: LD_INT 0
53821: ST_TO_ADDR
53822: GO 53840
// min_y := y - r ;
53824: LD_ADDR_VAR 0 7
53828: PUSH
53829: LD_VAR 0 2
53833: PUSH
53834: LD_VAR 0 3
53838: MINUS
53839: ST_TO_ADDR
// max_x := x + r ;
53840: LD_ADDR_VAR 0 9
53844: PUSH
53845: LD_VAR 0 1
53849: PUSH
53850: LD_VAR 0 3
53854: PLUS
53855: ST_TO_ADDR
// max_y := y + r ;
53856: LD_ADDR_VAR 0 10
53860: PUSH
53861: LD_VAR 0 2
53865: PUSH
53866: LD_VAR 0 3
53870: PLUS
53871: ST_TO_ADDR
// for _x = min_x to max_x do
53872: LD_ADDR_VAR 0 5
53876: PUSH
53877: DOUBLE
53878: LD_VAR 0 8
53882: DEC
53883: ST_TO_ADDR
53884: LD_VAR 0 9
53888: PUSH
53889: FOR_TO
53890: IFFALSE 53991
// for _y = min_y to max_y do
53892: LD_ADDR_VAR 0 6
53896: PUSH
53897: DOUBLE
53898: LD_VAR 0 7
53902: DEC
53903: ST_TO_ADDR
53904: LD_VAR 0 10
53908: PUSH
53909: FOR_TO
53910: IFFALSE 53987
// begin if not ValidHex ( _x , _y ) then
53912: LD_VAR 0 5
53916: PPUSH
53917: LD_VAR 0 6
53921: PPUSH
53922: CALL_OW 488
53926: NOT
53927: IFFALSE 53931
// continue ;
53929: GO 53909
// if GetResourceTypeXY ( _x , _y ) then
53931: LD_VAR 0 5
53935: PPUSH
53936: LD_VAR 0 6
53940: PPUSH
53941: CALL_OW 283
53945: IFFALSE 53985
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53947: LD_ADDR_VAR 0 4
53951: PUSH
53952: LD_VAR 0 4
53956: PPUSH
53957: LD_VAR 0 4
53961: PUSH
53962: LD_INT 1
53964: PLUS
53965: PPUSH
53966: LD_VAR 0 5
53970: PUSH
53971: LD_VAR 0 6
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PPUSH
53980: CALL_OW 1
53984: ST_TO_ADDR
// end ;
53985: GO 53909
53987: POP
53988: POP
53989: GO 53889
53991: POP
53992: POP
// end ;
53993: LD_VAR 0 4
53997: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53998: LD_INT 0
54000: PPUSH
54001: PPUSH
54002: PPUSH
54003: PPUSH
54004: PPUSH
54005: PPUSH
54006: PPUSH
54007: PPUSH
// if not units then
54008: LD_VAR 0 1
54012: NOT
54013: IFFALSE 54017
// exit ;
54015: GO 54541
// result := UnitFilter ( units , [ f_ok ] ) ;
54017: LD_ADDR_VAR 0 3
54021: PUSH
54022: LD_VAR 0 1
54026: PPUSH
54027: LD_INT 50
54029: PUSH
54030: EMPTY
54031: LIST
54032: PPUSH
54033: CALL_OW 72
54037: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54038: LD_ADDR_VAR 0 8
54042: PUSH
54043: LD_VAR 0 1
54047: PUSH
54048: LD_INT 1
54050: ARRAY
54051: PPUSH
54052: CALL_OW 255
54056: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54057: LD_ADDR_VAR 0 10
54061: PUSH
54062: LD_INT 29
54064: PUSH
54065: LD_INT 91
54067: PUSH
54068: LD_INT 49
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: ST_TO_ADDR
// if not result then
54076: LD_VAR 0 3
54080: NOT
54081: IFFALSE 54085
// exit ;
54083: GO 54541
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54085: LD_ADDR_VAR 0 5
54089: PUSH
54090: LD_INT 81
54092: PUSH
54093: LD_VAR 0 8
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PPUSH
54102: CALL_OW 69
54106: ST_TO_ADDR
// for i in result do
54107: LD_ADDR_VAR 0 4
54111: PUSH
54112: LD_VAR 0 3
54116: PUSH
54117: FOR_IN
54118: IFFALSE 54539
// begin tag := GetTag ( i ) + 1 ;
54120: LD_ADDR_VAR 0 9
54124: PUSH
54125: LD_VAR 0 4
54129: PPUSH
54130: CALL_OW 110
54134: PUSH
54135: LD_INT 1
54137: PLUS
54138: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
54139: LD_ADDR_VAR 0 7
54143: PUSH
54144: LD_VAR 0 4
54148: PPUSH
54149: CALL_OW 250
54153: PPUSH
54154: LD_VAR 0 4
54158: PPUSH
54159: CALL_OW 251
54163: PPUSH
54164: LD_INT 6
54166: PPUSH
54167: CALL 53740 0 3
54171: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
54172: LD_VAR 0 4
54176: PPUSH
54177: CALL_OW 247
54181: PUSH
54182: LD_INT 2
54184: EQUAL
54185: PUSH
54186: LD_VAR 0 7
54190: AND
54191: PUSH
54192: LD_VAR 0 4
54196: PPUSH
54197: CALL_OW 264
54201: PUSH
54202: LD_VAR 0 10
54206: IN
54207: NOT
54208: AND
54209: IFFALSE 54248
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54211: LD_VAR 0 4
54215: PPUSH
54216: LD_VAR 0 7
54220: PUSH
54221: LD_INT 1
54223: ARRAY
54224: PUSH
54225: LD_INT 1
54227: ARRAY
54228: PPUSH
54229: LD_VAR 0 7
54233: PUSH
54234: LD_INT 1
54236: ARRAY
54237: PUSH
54238: LD_INT 2
54240: ARRAY
54241: PPUSH
54242: CALL_OW 116
54246: GO 54537
// if path > tag then
54248: LD_VAR 0 2
54252: PUSH
54253: LD_VAR 0 9
54257: GREATER
54258: IFFALSE 54466
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54260: LD_ADDR_VAR 0 6
54264: PUSH
54265: LD_VAR 0 5
54269: PPUSH
54270: LD_INT 91
54272: PUSH
54273: LD_VAR 0 4
54277: PUSH
54278: LD_INT 8
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: PPUSH
54286: CALL_OW 72
54290: ST_TO_ADDR
// if nearEnemy then
54291: LD_VAR 0 6
54295: IFFALSE 54364
// begin if GetWeapon ( i ) = ru_time_lapser then
54297: LD_VAR 0 4
54301: PPUSH
54302: CALL_OW 264
54306: PUSH
54307: LD_INT 49
54309: EQUAL
54310: IFFALSE 54338
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54312: LD_VAR 0 4
54316: PPUSH
54317: LD_VAR 0 6
54321: PPUSH
54322: LD_VAR 0 4
54326: PPUSH
54327: CALL_OW 74
54331: PPUSH
54332: CALL_OW 112
54336: GO 54362
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54338: LD_VAR 0 4
54342: PPUSH
54343: LD_VAR 0 6
54347: PPUSH
54348: LD_VAR 0 4
54352: PPUSH
54353: CALL_OW 74
54357: PPUSH
54358: CALL 55612 0 2
// end else
54362: GO 54464
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54364: LD_VAR 0 4
54368: PPUSH
54369: LD_VAR 0 2
54373: PUSH
54374: LD_VAR 0 9
54378: ARRAY
54379: PUSH
54380: LD_INT 1
54382: ARRAY
54383: PPUSH
54384: LD_VAR 0 2
54388: PUSH
54389: LD_VAR 0 9
54393: ARRAY
54394: PUSH
54395: LD_INT 2
54397: ARRAY
54398: PPUSH
54399: CALL_OW 297
54403: PUSH
54404: LD_INT 6
54406: GREATER
54407: IFFALSE 54450
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54409: LD_VAR 0 4
54413: PPUSH
54414: LD_VAR 0 2
54418: PUSH
54419: LD_VAR 0 9
54423: ARRAY
54424: PUSH
54425: LD_INT 1
54427: ARRAY
54428: PPUSH
54429: LD_VAR 0 2
54433: PUSH
54434: LD_VAR 0 9
54438: ARRAY
54439: PUSH
54440: LD_INT 2
54442: ARRAY
54443: PPUSH
54444: CALL_OW 114
54448: GO 54464
// SetTag ( i , tag ) ;
54450: LD_VAR 0 4
54454: PPUSH
54455: LD_VAR 0 9
54459: PPUSH
54460: CALL_OW 109
// end else
54464: GO 54537
// if enemy then
54466: LD_VAR 0 5
54470: IFFALSE 54537
// begin if GetWeapon ( i ) = ru_time_lapser then
54472: LD_VAR 0 4
54476: PPUSH
54477: CALL_OW 264
54481: PUSH
54482: LD_INT 49
54484: EQUAL
54485: IFFALSE 54513
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54487: LD_VAR 0 4
54491: PPUSH
54492: LD_VAR 0 5
54496: PPUSH
54497: LD_VAR 0 4
54501: PPUSH
54502: CALL_OW 74
54506: PPUSH
54507: CALL_OW 112
54511: GO 54537
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54513: LD_VAR 0 4
54517: PPUSH
54518: LD_VAR 0 5
54522: PPUSH
54523: LD_VAR 0 4
54527: PPUSH
54528: CALL_OW 74
54532: PPUSH
54533: CALL 55612 0 2
// end ; end ;
54537: GO 54117
54539: POP
54540: POP
// end ;
54541: LD_VAR 0 3
54545: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
// if not unit or IsInUnit ( unit ) then
54551: LD_VAR 0 1
54555: NOT
54556: PUSH
54557: LD_VAR 0 1
54561: PPUSH
54562: CALL_OW 310
54566: OR
54567: IFFALSE 54571
// exit ;
54569: GO 54662
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54571: LD_ADDR_VAR 0 4
54575: PUSH
54576: LD_VAR 0 1
54580: PPUSH
54581: CALL_OW 250
54585: PPUSH
54586: LD_VAR 0 2
54590: PPUSH
54591: LD_INT 1
54593: PPUSH
54594: CALL_OW 272
54598: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54599: LD_ADDR_VAR 0 5
54603: PUSH
54604: LD_VAR 0 1
54608: PPUSH
54609: CALL_OW 251
54613: PPUSH
54614: LD_VAR 0 2
54618: PPUSH
54619: LD_INT 1
54621: PPUSH
54622: CALL_OW 273
54626: ST_TO_ADDR
// if ValidHex ( x , y ) then
54627: LD_VAR 0 4
54631: PPUSH
54632: LD_VAR 0 5
54636: PPUSH
54637: CALL_OW 488
54641: IFFALSE 54662
// ComTurnXY ( unit , x , y ) ;
54643: LD_VAR 0 1
54647: PPUSH
54648: LD_VAR 0 4
54652: PPUSH
54653: LD_VAR 0 5
54657: PPUSH
54658: CALL_OW 118
// end ;
54662: LD_VAR 0 3
54666: RET
// export function SeeUnits ( side , units ) ; var i ; begin
54667: LD_INT 0
54669: PPUSH
54670: PPUSH
// result := false ;
54671: LD_ADDR_VAR 0 3
54675: PUSH
54676: LD_INT 0
54678: ST_TO_ADDR
// if not units then
54679: LD_VAR 0 2
54683: NOT
54684: IFFALSE 54688
// exit ;
54686: GO 54733
// for i in units do
54688: LD_ADDR_VAR 0 4
54692: PUSH
54693: LD_VAR 0 2
54697: PUSH
54698: FOR_IN
54699: IFFALSE 54731
// if See ( side , i ) then
54701: LD_VAR 0 1
54705: PPUSH
54706: LD_VAR 0 4
54710: PPUSH
54711: CALL_OW 292
54715: IFFALSE 54729
// begin result := true ;
54717: LD_ADDR_VAR 0 3
54721: PUSH
54722: LD_INT 1
54724: ST_TO_ADDR
// exit ;
54725: POP
54726: POP
54727: GO 54733
// end ;
54729: GO 54698
54731: POP
54732: POP
// end ;
54733: LD_VAR 0 3
54737: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
54738: LD_INT 0
54740: PPUSH
54741: PPUSH
54742: PPUSH
54743: PPUSH
// if not unit or not points then
54744: LD_VAR 0 1
54748: NOT
54749: PUSH
54750: LD_VAR 0 2
54754: NOT
54755: OR
54756: IFFALSE 54760
// exit ;
54758: GO 54850
// dist := 99999 ;
54760: LD_ADDR_VAR 0 5
54764: PUSH
54765: LD_INT 99999
54767: ST_TO_ADDR
// for i in points do
54768: LD_ADDR_VAR 0 4
54772: PUSH
54773: LD_VAR 0 2
54777: PUSH
54778: FOR_IN
54779: IFFALSE 54848
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
54781: LD_ADDR_VAR 0 6
54785: PUSH
54786: LD_VAR 0 1
54790: PPUSH
54791: LD_VAR 0 4
54795: PUSH
54796: LD_INT 1
54798: ARRAY
54799: PPUSH
54800: LD_VAR 0 4
54804: PUSH
54805: LD_INT 2
54807: ARRAY
54808: PPUSH
54809: CALL_OW 297
54813: ST_TO_ADDR
// if tmpDist < dist then
54814: LD_VAR 0 6
54818: PUSH
54819: LD_VAR 0 5
54823: LESS
54824: IFFALSE 54846
// begin result := i ;
54826: LD_ADDR_VAR 0 3
54830: PUSH
54831: LD_VAR 0 4
54835: ST_TO_ADDR
// dist := tmpDist ;
54836: LD_ADDR_VAR 0 5
54840: PUSH
54841: LD_VAR 0 6
54845: ST_TO_ADDR
// end ; end ;
54846: GO 54778
54848: POP
54849: POP
// end ;
54850: LD_VAR 0 3
54854: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
54855: LD_INT 0
54857: PPUSH
// uc_side := side ;
54858: LD_ADDR_OWVAR 20
54862: PUSH
54863: LD_VAR 0 1
54867: ST_TO_ADDR
// uc_nation := 3 ;
54868: LD_ADDR_OWVAR 21
54872: PUSH
54873: LD_INT 3
54875: ST_TO_ADDR
// vc_chassis := 25 ;
54876: LD_ADDR_OWVAR 37
54880: PUSH
54881: LD_INT 25
54883: ST_TO_ADDR
// vc_engine := engine_siberite ;
54884: LD_ADDR_OWVAR 39
54888: PUSH
54889: LD_INT 3
54891: ST_TO_ADDR
// vc_control := control_computer ;
54892: LD_ADDR_OWVAR 38
54896: PUSH
54897: LD_INT 3
54899: ST_TO_ADDR
// vc_weapon := 59 ;
54900: LD_ADDR_OWVAR 40
54904: PUSH
54905: LD_INT 59
54907: ST_TO_ADDR
// result := CreateVehicle ;
54908: LD_ADDR_VAR 0 5
54912: PUSH
54913: CALL_OW 45
54917: ST_TO_ADDR
// SetDir ( result , d ) ;
54918: LD_VAR 0 5
54922: PPUSH
54923: LD_VAR 0 4
54927: PPUSH
54928: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54932: LD_VAR 0 5
54936: PPUSH
54937: LD_VAR 0 2
54941: PPUSH
54942: LD_VAR 0 3
54946: PPUSH
54947: LD_INT 0
54949: PPUSH
54950: CALL_OW 48
// end ;
54954: LD_VAR 0 5
54958: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54959: LD_INT 0
54961: PPUSH
54962: PPUSH
54963: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54964: LD_ADDR_VAR 0 2
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54987: LD_VAR 0 1
54991: NOT
54992: PUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: CALL_OW 264
55002: PUSH
55003: LD_INT 12
55005: PUSH
55006: LD_INT 51
55008: PUSH
55009: LD_INT 32
55011: PUSH
55012: LD_INT 89
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: IN
55021: NOT
55022: OR
55023: IFFALSE 55027
// exit ;
55025: GO 55125
// for i := 1 to 3 do
55027: LD_ADDR_VAR 0 3
55031: PUSH
55032: DOUBLE
55033: LD_INT 1
55035: DEC
55036: ST_TO_ADDR
55037: LD_INT 3
55039: PUSH
55040: FOR_TO
55041: IFFALSE 55123
// begin tmp := GetCargo ( cargo , i ) ;
55043: LD_ADDR_VAR 0 4
55047: PUSH
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_VAR 0 3
55057: PPUSH
55058: CALL_OW 289
55062: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55063: LD_ADDR_VAR 0 2
55067: PUSH
55068: LD_VAR 0 2
55072: PPUSH
55073: LD_VAR 0 3
55077: PPUSH
55078: LD_VAR 0 4
55082: PPUSH
55083: CALL_OW 1
55087: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55088: LD_ADDR_VAR 0 2
55092: PUSH
55093: LD_VAR 0 2
55097: PPUSH
55098: LD_INT 4
55100: PPUSH
55101: LD_VAR 0 2
55105: PUSH
55106: LD_INT 4
55108: ARRAY
55109: PUSH
55110: LD_VAR 0 4
55114: PLUS
55115: PPUSH
55116: CALL_OW 1
55120: ST_TO_ADDR
// end ;
55121: GO 55040
55123: POP
55124: POP
// end ;
55125: LD_VAR 0 2
55129: RET
// export function Length ( array ) ; begin
55130: LD_INT 0
55132: PPUSH
// result := array + 0 ;
55133: LD_ADDR_VAR 0 2
55137: PUSH
55138: LD_VAR 0 1
55142: PUSH
55143: LD_INT 0
55145: PLUS
55146: ST_TO_ADDR
// end ;
55147: LD_VAR 0 2
55151: RET
// export function PrepareArray ( array ) ; begin
55152: LD_INT 0
55154: PPUSH
// result := array diff 0 ;
55155: LD_ADDR_VAR 0 2
55159: PUSH
55160: LD_VAR 0 1
55164: PUSH
55165: LD_INT 0
55167: DIFF
55168: ST_TO_ADDR
// if not result [ 1 ] then
55169: LD_VAR 0 2
55173: PUSH
55174: LD_INT 1
55176: ARRAY
55177: NOT
55178: IFFALSE 55198
// result := Delete ( result , 1 ) ;
55180: LD_ADDR_VAR 0 2
55184: PUSH
55185: LD_VAR 0 2
55189: PPUSH
55190: LD_INT 1
55192: PPUSH
55193: CALL_OW 3
55197: ST_TO_ADDR
// end ;
55198: LD_VAR 0 2
55202: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
55203: LD_INT 0
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
// sibRocketRange := 25 ;
55209: LD_ADDR_VAR 0 6
55213: PUSH
55214: LD_INT 25
55216: ST_TO_ADDR
// result := false ;
55217: LD_ADDR_VAR 0 4
55221: PUSH
55222: LD_INT 0
55224: ST_TO_ADDR
// for i := 0 to 5 do
55225: LD_ADDR_VAR 0 5
55229: PUSH
55230: DOUBLE
55231: LD_INT 0
55233: DEC
55234: ST_TO_ADDR
55235: LD_INT 5
55237: PUSH
55238: FOR_TO
55239: IFFALSE 55306
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55241: LD_VAR 0 1
55245: PPUSH
55246: LD_VAR 0 5
55250: PPUSH
55251: LD_VAR 0 6
55255: PPUSH
55256: CALL_OW 272
55260: PPUSH
55261: LD_VAR 0 2
55265: PPUSH
55266: LD_VAR 0 5
55270: PPUSH
55271: LD_VAR 0 6
55275: PPUSH
55276: CALL_OW 273
55280: PPUSH
55281: LD_VAR 0 3
55285: PPUSH
55286: CALL_OW 309
55290: IFFALSE 55304
// begin result := true ;
55292: LD_ADDR_VAR 0 4
55296: PUSH
55297: LD_INT 1
55299: ST_TO_ADDR
// exit ;
55300: POP
55301: POP
55302: GO 55308
// end ;
55304: GO 55238
55306: POP
55307: POP
// end ;
55308: LD_VAR 0 4
55312: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55313: LD_INT 0
55315: PPUSH
55316: PPUSH
55317: PPUSH
// if btype = b_depot then
55318: LD_VAR 0 2
55322: PUSH
55323: LD_INT 0
55325: EQUAL
55326: IFFALSE 55338
// begin result := true ;
55328: LD_ADDR_VAR 0 3
55332: PUSH
55333: LD_INT 1
55335: ST_TO_ADDR
// exit ;
55336: GO 55454
// end ; pom := GetBase ( depot ) ;
55338: LD_ADDR_VAR 0 4
55342: PUSH
55343: LD_VAR 0 1
55347: PPUSH
55348: CALL_OW 274
55352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55353: LD_ADDR_VAR 0 5
55357: PUSH
55358: LD_VAR 0 2
55362: PPUSH
55363: LD_VAR 0 1
55367: PPUSH
55368: CALL_OW 248
55372: PPUSH
55373: CALL_OW 450
55377: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55378: LD_ADDR_VAR 0 3
55382: PUSH
55383: LD_VAR 0 4
55387: PPUSH
55388: LD_INT 1
55390: PPUSH
55391: CALL_OW 275
55395: PUSH
55396: LD_VAR 0 5
55400: PUSH
55401: LD_INT 1
55403: ARRAY
55404: GREATEREQUAL
55405: PUSH
55406: LD_VAR 0 4
55410: PPUSH
55411: LD_INT 2
55413: PPUSH
55414: CALL_OW 275
55418: PUSH
55419: LD_VAR 0 5
55423: PUSH
55424: LD_INT 2
55426: ARRAY
55427: GREATEREQUAL
55428: AND
55429: PUSH
55430: LD_VAR 0 4
55434: PPUSH
55435: LD_INT 3
55437: PPUSH
55438: CALL_OW 275
55442: PUSH
55443: LD_VAR 0 5
55447: PUSH
55448: LD_INT 3
55450: ARRAY
55451: GREATEREQUAL
55452: AND
55453: ST_TO_ADDR
// end ;
55454: LD_VAR 0 3
55458: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55459: LD_INT 0
55461: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55462: LD_VAR 0 1
55466: PPUSH
55467: LD_VAR 0 2
55471: PPUSH
55472: LD_INT 0
55474: PPUSH
55475: LD_INT 0
55477: PPUSH
55478: LD_INT 1
55480: PPUSH
55481: LD_INT 0
55483: PPUSH
55484: CALL_OW 587
// end ;
55488: LD_VAR 0 3
55492: RET
// export function CenterOnNow ( unit ) ; begin
55493: LD_INT 0
55495: PPUSH
// result := IsInUnit ( unit ) ;
55496: LD_ADDR_VAR 0 2
55500: PUSH
55501: LD_VAR 0 1
55505: PPUSH
55506: CALL_OW 310
55510: ST_TO_ADDR
// if not result then
55511: LD_VAR 0 2
55515: NOT
55516: IFFALSE 55528
// result := unit ;
55518: LD_ADDR_VAR 0 2
55522: PUSH
55523: LD_VAR 0 1
55527: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
55528: LD_VAR 0 1
55532: PPUSH
55533: CALL_OW 87
// end ;
55537: LD_VAR 0 2
55541: RET
// export function ComMoveHex ( unit , hex ) ; begin
55542: LD_INT 0
55544: PPUSH
// if not hex then
55545: LD_VAR 0 2
55549: NOT
55550: IFFALSE 55554
// exit ;
55552: GO 55607
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
55554: LD_VAR 0 2
55558: PUSH
55559: LD_INT 1
55561: ARRAY
55562: PPUSH
55563: LD_VAR 0 2
55567: PUSH
55568: LD_INT 2
55570: ARRAY
55571: PPUSH
55572: CALL_OW 428
55576: IFFALSE 55580
// exit ;
55578: GO 55607
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
55580: LD_VAR 0 1
55584: PPUSH
55585: LD_VAR 0 2
55589: PUSH
55590: LD_INT 1
55592: ARRAY
55593: PPUSH
55594: LD_VAR 0 2
55598: PUSH
55599: LD_INT 2
55601: ARRAY
55602: PPUSH
55603: CALL_OW 111
// end ;
55607: LD_VAR 0 3
55611: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
55612: LD_INT 0
55614: PPUSH
55615: PPUSH
55616: PPUSH
// if not unit or not enemy then
55617: LD_VAR 0 1
55621: NOT
55622: PUSH
55623: LD_VAR 0 2
55627: NOT
55628: OR
55629: IFFALSE 55633
// exit ;
55631: GO 55757
// x := GetX ( enemy ) ;
55633: LD_ADDR_VAR 0 4
55637: PUSH
55638: LD_VAR 0 2
55642: PPUSH
55643: CALL_OW 250
55647: ST_TO_ADDR
// y := GetY ( enemy ) ;
55648: LD_ADDR_VAR 0 5
55652: PUSH
55653: LD_VAR 0 2
55657: PPUSH
55658: CALL_OW 251
55662: ST_TO_ADDR
// if ValidHex ( x , y ) then
55663: LD_VAR 0 4
55667: PPUSH
55668: LD_VAR 0 5
55672: PPUSH
55673: CALL_OW 488
55677: IFFALSE 55757
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
55679: LD_VAR 0 2
55683: PPUSH
55684: CALL_OW 247
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: IN
55699: PUSH
55700: LD_VAR 0 1
55704: PPUSH
55705: CALL_OW 255
55709: PPUSH
55710: LD_VAR 0 2
55714: PPUSH
55715: CALL_OW 292
55719: OR
55720: IFFALSE 55738
// ComAttackUnit ( unit , enemy ) else
55722: LD_VAR 0 1
55726: PPUSH
55727: LD_VAR 0 2
55731: PPUSH
55732: CALL_OW 115
55736: GO 55757
// ComAgressiveMove ( unit , x , y ) ;
55738: LD_VAR 0 1
55742: PPUSH
55743: LD_VAR 0 4
55747: PPUSH
55748: LD_VAR 0 5
55752: PPUSH
55753: CALL_OW 114
// end ;
55757: LD_VAR 0 3
55761: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
55762: LD_INT 0
55764: PPUSH
55765: PPUSH
55766: PPUSH
// list := AreaToList ( area , 0 ) ;
55767: LD_ADDR_VAR 0 5
55771: PUSH
55772: LD_VAR 0 1
55776: PPUSH
55777: LD_INT 0
55779: PPUSH
55780: CALL_OW 517
55784: ST_TO_ADDR
// if not list then
55785: LD_VAR 0 5
55789: NOT
55790: IFFALSE 55794
// exit ;
55792: GO 55924
// if all then
55794: LD_VAR 0 2
55798: IFFALSE 55886
// begin for i := 1 to list [ 1 ] do
55800: LD_ADDR_VAR 0 4
55804: PUSH
55805: DOUBLE
55806: LD_INT 1
55808: DEC
55809: ST_TO_ADDR
55810: LD_VAR 0 5
55814: PUSH
55815: LD_INT 1
55817: ARRAY
55818: PUSH
55819: FOR_TO
55820: IFFALSE 55882
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
55822: LD_ADDR_VAR 0 3
55826: PUSH
55827: LD_VAR 0 3
55831: PPUSH
55832: LD_VAR 0 3
55836: PUSH
55837: LD_INT 1
55839: PLUS
55840: PPUSH
55841: LD_VAR 0 5
55845: PUSH
55846: LD_INT 1
55848: ARRAY
55849: PUSH
55850: LD_VAR 0 4
55854: ARRAY
55855: PUSH
55856: LD_VAR 0 5
55860: PUSH
55861: LD_INT 2
55863: ARRAY
55864: PUSH
55865: LD_VAR 0 4
55869: ARRAY
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PPUSH
55875: CALL_OW 1
55879: ST_TO_ADDR
55880: GO 55819
55882: POP
55883: POP
// exit ;
55884: GO 55924
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
55886: LD_ADDR_VAR 0 3
55890: PUSH
55891: LD_VAR 0 5
55895: PUSH
55896: LD_INT 1
55898: ARRAY
55899: PUSH
55900: LD_INT 1
55902: ARRAY
55903: PUSH
55904: LD_VAR 0 5
55908: PUSH
55909: LD_INT 2
55911: ARRAY
55912: PUSH
55913: LD_INT 1
55915: ARRAY
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: ST_TO_ADDR
// end ;
55924: LD_VAR 0 3
55928: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
55929: LD_INT 0
55931: PPUSH
55932: PPUSH
// list := AreaToList ( area , 0 ) ;
55933: LD_ADDR_VAR 0 4
55937: PUSH
55938: LD_VAR 0 1
55942: PPUSH
55943: LD_INT 0
55945: PPUSH
55946: CALL_OW 517
55950: ST_TO_ADDR
// if not list then
55951: LD_VAR 0 4
55955: NOT
55956: IFFALSE 55960
// exit ;
55958: GO 56001
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
55960: LD_ADDR_VAR 0 3
55964: PUSH
55965: LD_VAR 0 4
55969: PUSH
55970: LD_INT 1
55972: ARRAY
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_VAR 0 4
55982: PUSH
55983: LD_INT 2
55985: ARRAY
55986: PUSH
55987: LD_INT 1
55989: ARRAY
55990: PUSH
55991: LD_VAR 0 2
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// end ;
56001: LD_VAR 0 3
56005: RET
// export function First ( array ) ; begin
56006: LD_INT 0
56008: PPUSH
// if not array then
56009: LD_VAR 0 1
56013: NOT
56014: IFFALSE 56018
// exit ;
56016: GO 56032
// result := array [ 1 ] ;
56018: LD_ADDR_VAR 0 2
56022: PUSH
56023: LD_VAR 0 1
56027: PUSH
56028: LD_INT 1
56030: ARRAY
56031: ST_TO_ADDR
// end ;
56032: LD_VAR 0 2
56036: RET
// export function Last ( array ) ; begin
56037: LD_INT 0
56039: PPUSH
// if not array then
56040: LD_VAR 0 1
56044: NOT
56045: IFFALSE 56049
// exit ;
56047: GO 56065
// result := array [ array ] ;
56049: LD_ADDR_VAR 0 2
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_VAR 0 1
56063: ARRAY
56064: ST_TO_ADDR
// end ;
56065: LD_VAR 0 2
56069: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
56070: LD_INT 0
56072: PPUSH
56073: PPUSH
// result := [ ] ;
56074: LD_ADDR_VAR 0 5
56078: PUSH
56079: EMPTY
56080: ST_TO_ADDR
// if not array then
56081: LD_VAR 0 1
56085: NOT
56086: IFFALSE 56090
// exit ;
56088: GO 56202
// for i := 1 to array do
56090: LD_ADDR_VAR 0 6
56094: PUSH
56095: DOUBLE
56096: LD_INT 1
56098: DEC
56099: ST_TO_ADDR
56100: LD_VAR 0 1
56104: PUSH
56105: FOR_TO
56106: IFFALSE 56200
// if array [ i ] [ index ] = value then
56108: LD_VAR 0 1
56112: PUSH
56113: LD_VAR 0 6
56117: ARRAY
56118: PUSH
56119: LD_VAR 0 2
56123: ARRAY
56124: PUSH
56125: LD_VAR 0 3
56129: EQUAL
56130: IFFALSE 56198
// begin if indexColumn then
56132: LD_VAR 0 4
56136: IFFALSE 56172
// result := Join ( result , array [ i ] [ indexColumn ] ) else
56138: LD_ADDR_VAR 0 5
56142: PUSH
56143: LD_VAR 0 5
56147: PPUSH
56148: LD_VAR 0 1
56152: PUSH
56153: LD_VAR 0 6
56157: ARRAY
56158: PUSH
56159: LD_VAR 0 4
56163: ARRAY
56164: PPUSH
56165: CALL 51394 0 2
56169: ST_TO_ADDR
56170: GO 56198
// result := Join ( result , array [ i ] ) ;
56172: LD_ADDR_VAR 0 5
56176: PUSH
56177: LD_VAR 0 5
56181: PPUSH
56182: LD_VAR 0 1
56186: PUSH
56187: LD_VAR 0 6
56191: ARRAY
56192: PPUSH
56193: CALL 51394 0 2
56197: ST_TO_ADDR
// end ;
56198: GO 56105
56200: POP
56201: POP
// end ;
56202: LD_VAR 0 5
56206: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
56207: LD_INT 0
56209: PPUSH
// if not vehicles or not parkingPoint then
56210: LD_VAR 0 1
56214: NOT
56215: PUSH
56216: LD_VAR 0 2
56220: NOT
56221: OR
56222: IFFALSE 56226
// exit ;
56224: GO 56324
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
56226: LD_ADDR_VAR 0 1
56230: PUSH
56231: LD_VAR 0 1
56235: PPUSH
56236: LD_INT 50
56238: PUSH
56239: EMPTY
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: LD_INT 92
56247: PUSH
56248: LD_VAR 0 2
56252: PUSH
56253: LD_INT 1
56255: ARRAY
56256: PUSH
56257: LD_VAR 0 2
56261: PUSH
56262: LD_INT 2
56264: ARRAY
56265: PUSH
56266: LD_INT 8
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 72
56287: ST_TO_ADDR
// if not vehicles then
56288: LD_VAR 0 1
56292: NOT
56293: IFFALSE 56297
// exit ;
56295: GO 56324
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56297: LD_VAR 0 1
56301: PPUSH
56302: LD_VAR 0 2
56306: PUSH
56307: LD_INT 1
56309: ARRAY
56310: PPUSH
56311: LD_VAR 0 2
56315: PUSH
56316: LD_INT 2
56318: ARRAY
56319: PPUSH
56320: CALL_OW 111
// end ;
56324: LD_VAR 0 3
56328: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56329: LD_INT 0
56331: PPUSH
56332: PPUSH
56333: PPUSH
// if not side or not area then
56334: LD_VAR 0 1
56338: NOT
56339: PUSH
56340: LD_VAR 0 2
56344: NOT
56345: OR
56346: IFFALSE 56350
// exit ;
56348: GO 56469
// tmp := AreaToList ( area , 0 ) ;
56350: LD_ADDR_VAR 0 5
56354: PUSH
56355: LD_VAR 0 2
56359: PPUSH
56360: LD_INT 0
56362: PPUSH
56363: CALL_OW 517
56367: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56368: LD_ADDR_VAR 0 4
56372: PUSH
56373: DOUBLE
56374: LD_INT 1
56376: DEC
56377: ST_TO_ADDR
56378: LD_VAR 0 5
56382: PUSH
56383: LD_INT 1
56385: ARRAY
56386: PUSH
56387: FOR_TO
56388: IFFALSE 56467
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56390: LD_VAR 0 5
56394: PUSH
56395: LD_INT 1
56397: ARRAY
56398: PUSH
56399: LD_VAR 0 4
56403: ARRAY
56404: PPUSH
56405: LD_VAR 0 5
56409: PUSH
56410: LD_INT 2
56412: ARRAY
56413: PUSH
56414: LD_VAR 0 4
56418: ARRAY
56419: PPUSH
56420: CALL_OW 351
56424: IFFALSE 56465
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56426: LD_VAR 0 5
56430: PUSH
56431: LD_INT 1
56433: ARRAY
56434: PUSH
56435: LD_VAR 0 4
56439: ARRAY
56440: PPUSH
56441: LD_VAR 0 5
56445: PUSH
56446: LD_INT 2
56448: ARRAY
56449: PUSH
56450: LD_VAR 0 4
56454: ARRAY
56455: PPUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: CALL_OW 244
// end ;
56465: GO 56387
56467: POP
56468: POP
// end ; end_of_file
56469: LD_VAR 0 3
56473: RET
// export globalGameSaveCounter ; every 0 0$1 do
56474: GO 56476
56476: DISABLE
// begin enable ;
56477: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56478: LD_STRING updateTimer(
56480: PUSH
56481: LD_OWVAR 1
56485: STR
56486: PUSH
56487: LD_STRING );
56489: STR
56490: PPUSH
56491: CALL_OW 559
// end ;
56495: END
// every 0 0$1 do
56496: GO 56498
56498: DISABLE
// begin globalGameSaveCounter := 0 ;
56499: LD_ADDR_EXP 44
56503: PUSH
56504: LD_INT 0
56506: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
56507: LD_STRING setGameSaveCounter(0)
56509: PPUSH
56510: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
56514: LD_STRING initStreamRollete();
56516: PPUSH
56517: CALL_OW 559
// InitStreamMode ;
56521: CALL 57864 0 0
// DefineStreamItems ( false ) ;
56525: LD_INT 0
56527: PPUSH
56528: CALL 58328 0 1
// end ;
56532: END
// export function SOS_MapStart ( ) ; begin
56533: LD_INT 0
56535: PPUSH
// if streamModeActive then
56536: LD_EXP 45
56540: IFFALSE 56549
// DefineStreamItems ( true ) ;
56542: LD_INT 1
56544: PPUSH
56545: CALL 58328 0 1
// UpdateLuaVariables ( ) ;
56549: CALL 56566 0 0
// UpdateFactoryWaypoints ( ) ;
56553: CALL 71197 0 0
// UpdateWarehouseGatheringPoints ( ) ;
56557: CALL 71454 0 0
// end ;
56561: LD_VAR 0 1
56565: RET
// function UpdateLuaVariables ( ) ; begin
56566: LD_INT 0
56568: PPUSH
// if globalGameSaveCounter then
56569: LD_EXP 44
56573: IFFALSE 56607
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
56575: LD_ADDR_EXP 44
56579: PUSH
56580: LD_EXP 44
56584: PPUSH
56585: CALL 52755 0 1
56589: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
56590: LD_STRING setGameSaveCounter(
56592: PUSH
56593: LD_EXP 44
56597: STR
56598: PUSH
56599: LD_STRING )
56601: STR
56602: PPUSH
56603: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
56607: LD_STRING setGameDifficulty(
56609: PUSH
56610: LD_OWVAR 67
56614: STR
56615: PUSH
56616: LD_STRING )
56618: STR
56619: PPUSH
56620: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
56624: LD_STRING displayDifficulty(
56626: PUSH
56627: LD_OWVAR 67
56631: STR
56632: PUSH
56633: LD_STRING )
56635: STR
56636: PPUSH
56637: CALL_OW 559
// end ;
56641: LD_VAR 0 1
56645: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56646: LD_INT 0
56648: PPUSH
// if p2 = stream_mode then
56649: LD_VAR 0 2
56653: PUSH
56654: LD_INT 100
56656: EQUAL
56657: IFFALSE 57660
// begin if not StreamModeActive then
56659: LD_EXP 45
56663: NOT
56664: IFFALSE 56674
// StreamModeActive := true ;
56666: LD_ADDR_EXP 45
56670: PUSH
56671: LD_INT 1
56673: ST_TO_ADDR
// if p3 = 0 then
56674: LD_VAR 0 3
56678: PUSH
56679: LD_INT 0
56681: EQUAL
56682: IFFALSE 56688
// InitStreamMode ;
56684: CALL 57864 0 0
// if p3 = 1 then
56688: LD_VAR 0 3
56692: PUSH
56693: LD_INT 1
56695: EQUAL
56696: IFFALSE 56706
// sRocket := true ;
56698: LD_ADDR_EXP 50
56702: PUSH
56703: LD_INT 1
56705: ST_TO_ADDR
// if p3 = 2 then
56706: LD_VAR 0 3
56710: PUSH
56711: LD_INT 2
56713: EQUAL
56714: IFFALSE 56724
// sSpeed := true ;
56716: LD_ADDR_EXP 49
56720: PUSH
56721: LD_INT 1
56723: ST_TO_ADDR
// if p3 = 3 then
56724: LD_VAR 0 3
56728: PUSH
56729: LD_INT 3
56731: EQUAL
56732: IFFALSE 56742
// sEngine := true ;
56734: LD_ADDR_EXP 51
56738: PUSH
56739: LD_INT 1
56741: ST_TO_ADDR
// if p3 = 4 then
56742: LD_VAR 0 3
56746: PUSH
56747: LD_INT 4
56749: EQUAL
56750: IFFALSE 56760
// sSpec := true ;
56752: LD_ADDR_EXP 48
56756: PUSH
56757: LD_INT 1
56759: ST_TO_ADDR
// if p3 = 5 then
56760: LD_VAR 0 3
56764: PUSH
56765: LD_INT 5
56767: EQUAL
56768: IFFALSE 56778
// sLevel := true ;
56770: LD_ADDR_EXP 52
56774: PUSH
56775: LD_INT 1
56777: ST_TO_ADDR
// if p3 = 6 then
56778: LD_VAR 0 3
56782: PUSH
56783: LD_INT 6
56785: EQUAL
56786: IFFALSE 56796
// sArmoury := true ;
56788: LD_ADDR_EXP 53
56792: PUSH
56793: LD_INT 1
56795: ST_TO_ADDR
// if p3 = 7 then
56796: LD_VAR 0 3
56800: PUSH
56801: LD_INT 7
56803: EQUAL
56804: IFFALSE 56814
// sRadar := true ;
56806: LD_ADDR_EXP 54
56810: PUSH
56811: LD_INT 1
56813: ST_TO_ADDR
// if p3 = 8 then
56814: LD_VAR 0 3
56818: PUSH
56819: LD_INT 8
56821: EQUAL
56822: IFFALSE 56832
// sBunker := true ;
56824: LD_ADDR_EXP 55
56828: PUSH
56829: LD_INT 1
56831: ST_TO_ADDR
// if p3 = 9 then
56832: LD_VAR 0 3
56836: PUSH
56837: LD_INT 9
56839: EQUAL
56840: IFFALSE 56850
// sHack := true ;
56842: LD_ADDR_EXP 56
56846: PUSH
56847: LD_INT 1
56849: ST_TO_ADDR
// if p3 = 10 then
56850: LD_VAR 0 3
56854: PUSH
56855: LD_INT 10
56857: EQUAL
56858: IFFALSE 56868
// sFire := true ;
56860: LD_ADDR_EXP 57
56864: PUSH
56865: LD_INT 1
56867: ST_TO_ADDR
// if p3 = 11 then
56868: LD_VAR 0 3
56872: PUSH
56873: LD_INT 11
56875: EQUAL
56876: IFFALSE 56886
// sRefresh := true ;
56878: LD_ADDR_EXP 58
56882: PUSH
56883: LD_INT 1
56885: ST_TO_ADDR
// if p3 = 12 then
56886: LD_VAR 0 3
56890: PUSH
56891: LD_INT 12
56893: EQUAL
56894: IFFALSE 56904
// sExp := true ;
56896: LD_ADDR_EXP 59
56900: PUSH
56901: LD_INT 1
56903: ST_TO_ADDR
// if p3 = 13 then
56904: LD_VAR 0 3
56908: PUSH
56909: LD_INT 13
56911: EQUAL
56912: IFFALSE 56922
// sDepot := true ;
56914: LD_ADDR_EXP 60
56918: PUSH
56919: LD_INT 1
56921: ST_TO_ADDR
// if p3 = 14 then
56922: LD_VAR 0 3
56926: PUSH
56927: LD_INT 14
56929: EQUAL
56930: IFFALSE 56940
// sFlag := true ;
56932: LD_ADDR_EXP 61
56936: PUSH
56937: LD_INT 1
56939: ST_TO_ADDR
// if p3 = 15 then
56940: LD_VAR 0 3
56944: PUSH
56945: LD_INT 15
56947: EQUAL
56948: IFFALSE 56958
// sKamikadze := true ;
56950: LD_ADDR_EXP 69
56954: PUSH
56955: LD_INT 1
56957: ST_TO_ADDR
// if p3 = 16 then
56958: LD_VAR 0 3
56962: PUSH
56963: LD_INT 16
56965: EQUAL
56966: IFFALSE 56976
// sTroll := true ;
56968: LD_ADDR_EXP 70
56972: PUSH
56973: LD_INT 1
56975: ST_TO_ADDR
// if p3 = 17 then
56976: LD_VAR 0 3
56980: PUSH
56981: LD_INT 17
56983: EQUAL
56984: IFFALSE 56994
// sSlow := true ;
56986: LD_ADDR_EXP 71
56990: PUSH
56991: LD_INT 1
56993: ST_TO_ADDR
// if p3 = 18 then
56994: LD_VAR 0 3
56998: PUSH
56999: LD_INT 18
57001: EQUAL
57002: IFFALSE 57012
// sLack := true ;
57004: LD_ADDR_EXP 72
57008: PUSH
57009: LD_INT 1
57011: ST_TO_ADDR
// if p3 = 19 then
57012: LD_VAR 0 3
57016: PUSH
57017: LD_INT 19
57019: EQUAL
57020: IFFALSE 57030
// sTank := true ;
57022: LD_ADDR_EXP 74
57026: PUSH
57027: LD_INT 1
57029: ST_TO_ADDR
// if p3 = 20 then
57030: LD_VAR 0 3
57034: PUSH
57035: LD_INT 20
57037: EQUAL
57038: IFFALSE 57048
// sRemote := true ;
57040: LD_ADDR_EXP 75
57044: PUSH
57045: LD_INT 1
57047: ST_TO_ADDR
// if p3 = 21 then
57048: LD_VAR 0 3
57052: PUSH
57053: LD_INT 21
57055: EQUAL
57056: IFFALSE 57066
// sPowell := true ;
57058: LD_ADDR_EXP 76
57062: PUSH
57063: LD_INT 1
57065: ST_TO_ADDR
// if p3 = 22 then
57066: LD_VAR 0 3
57070: PUSH
57071: LD_INT 22
57073: EQUAL
57074: IFFALSE 57084
// sTeleport := true ;
57076: LD_ADDR_EXP 79
57080: PUSH
57081: LD_INT 1
57083: ST_TO_ADDR
// if p3 = 23 then
57084: LD_VAR 0 3
57088: PUSH
57089: LD_INT 23
57091: EQUAL
57092: IFFALSE 57102
// sOilTower := true ;
57094: LD_ADDR_EXP 81
57098: PUSH
57099: LD_INT 1
57101: ST_TO_ADDR
// if p3 = 24 then
57102: LD_VAR 0 3
57106: PUSH
57107: LD_INT 24
57109: EQUAL
57110: IFFALSE 57120
// sShovel := true ;
57112: LD_ADDR_EXP 82
57116: PUSH
57117: LD_INT 1
57119: ST_TO_ADDR
// if p3 = 25 then
57120: LD_VAR 0 3
57124: PUSH
57125: LD_INT 25
57127: EQUAL
57128: IFFALSE 57138
// sSheik := true ;
57130: LD_ADDR_EXP 83
57134: PUSH
57135: LD_INT 1
57137: ST_TO_ADDR
// if p3 = 26 then
57138: LD_VAR 0 3
57142: PUSH
57143: LD_INT 26
57145: EQUAL
57146: IFFALSE 57156
// sEarthquake := true ;
57148: LD_ADDR_EXP 85
57152: PUSH
57153: LD_INT 1
57155: ST_TO_ADDR
// if p3 = 27 then
57156: LD_VAR 0 3
57160: PUSH
57161: LD_INT 27
57163: EQUAL
57164: IFFALSE 57174
// sAI := true ;
57166: LD_ADDR_EXP 86
57170: PUSH
57171: LD_INT 1
57173: ST_TO_ADDR
// if p3 = 28 then
57174: LD_VAR 0 3
57178: PUSH
57179: LD_INT 28
57181: EQUAL
57182: IFFALSE 57192
// sCargo := true ;
57184: LD_ADDR_EXP 89
57188: PUSH
57189: LD_INT 1
57191: ST_TO_ADDR
// if p3 = 29 then
57192: LD_VAR 0 3
57196: PUSH
57197: LD_INT 29
57199: EQUAL
57200: IFFALSE 57210
// sDLaser := true ;
57202: LD_ADDR_EXP 90
57206: PUSH
57207: LD_INT 1
57209: ST_TO_ADDR
// if p3 = 30 then
57210: LD_VAR 0 3
57214: PUSH
57215: LD_INT 30
57217: EQUAL
57218: IFFALSE 57228
// sExchange := true ;
57220: LD_ADDR_EXP 91
57224: PUSH
57225: LD_INT 1
57227: ST_TO_ADDR
// if p3 = 31 then
57228: LD_VAR 0 3
57232: PUSH
57233: LD_INT 31
57235: EQUAL
57236: IFFALSE 57246
// sFac := true ;
57238: LD_ADDR_EXP 92
57242: PUSH
57243: LD_INT 1
57245: ST_TO_ADDR
// if p3 = 32 then
57246: LD_VAR 0 3
57250: PUSH
57251: LD_INT 32
57253: EQUAL
57254: IFFALSE 57264
// sPower := true ;
57256: LD_ADDR_EXP 93
57260: PUSH
57261: LD_INT 1
57263: ST_TO_ADDR
// if p3 = 33 then
57264: LD_VAR 0 3
57268: PUSH
57269: LD_INT 33
57271: EQUAL
57272: IFFALSE 57282
// sRandom := true ;
57274: LD_ADDR_EXP 94
57278: PUSH
57279: LD_INT 1
57281: ST_TO_ADDR
// if p3 = 34 then
57282: LD_VAR 0 3
57286: PUSH
57287: LD_INT 34
57289: EQUAL
57290: IFFALSE 57300
// sShield := true ;
57292: LD_ADDR_EXP 95
57296: PUSH
57297: LD_INT 1
57299: ST_TO_ADDR
// if p3 = 35 then
57300: LD_VAR 0 3
57304: PUSH
57305: LD_INT 35
57307: EQUAL
57308: IFFALSE 57318
// sTime := true ;
57310: LD_ADDR_EXP 96
57314: PUSH
57315: LD_INT 1
57317: ST_TO_ADDR
// if p3 = 36 then
57318: LD_VAR 0 3
57322: PUSH
57323: LD_INT 36
57325: EQUAL
57326: IFFALSE 57336
// sTools := true ;
57328: LD_ADDR_EXP 97
57332: PUSH
57333: LD_INT 1
57335: ST_TO_ADDR
// if p3 = 101 then
57336: LD_VAR 0 3
57340: PUSH
57341: LD_INT 101
57343: EQUAL
57344: IFFALSE 57354
// sSold := true ;
57346: LD_ADDR_EXP 62
57350: PUSH
57351: LD_INT 1
57353: ST_TO_ADDR
// if p3 = 102 then
57354: LD_VAR 0 3
57358: PUSH
57359: LD_INT 102
57361: EQUAL
57362: IFFALSE 57372
// sDiff := true ;
57364: LD_ADDR_EXP 63
57368: PUSH
57369: LD_INT 1
57371: ST_TO_ADDR
// if p3 = 103 then
57372: LD_VAR 0 3
57376: PUSH
57377: LD_INT 103
57379: EQUAL
57380: IFFALSE 57390
// sFog := true ;
57382: LD_ADDR_EXP 66
57386: PUSH
57387: LD_INT 1
57389: ST_TO_ADDR
// if p3 = 104 then
57390: LD_VAR 0 3
57394: PUSH
57395: LD_INT 104
57397: EQUAL
57398: IFFALSE 57408
// sReset := true ;
57400: LD_ADDR_EXP 67
57404: PUSH
57405: LD_INT 1
57407: ST_TO_ADDR
// if p3 = 105 then
57408: LD_VAR 0 3
57412: PUSH
57413: LD_INT 105
57415: EQUAL
57416: IFFALSE 57426
// sSun := true ;
57418: LD_ADDR_EXP 68
57422: PUSH
57423: LD_INT 1
57425: ST_TO_ADDR
// if p3 = 106 then
57426: LD_VAR 0 3
57430: PUSH
57431: LD_INT 106
57433: EQUAL
57434: IFFALSE 57444
// sTiger := true ;
57436: LD_ADDR_EXP 64
57440: PUSH
57441: LD_INT 1
57443: ST_TO_ADDR
// if p3 = 107 then
57444: LD_VAR 0 3
57448: PUSH
57449: LD_INT 107
57451: EQUAL
57452: IFFALSE 57462
// sBomb := true ;
57454: LD_ADDR_EXP 65
57458: PUSH
57459: LD_INT 1
57461: ST_TO_ADDR
// if p3 = 108 then
57462: LD_VAR 0 3
57466: PUSH
57467: LD_INT 108
57469: EQUAL
57470: IFFALSE 57480
// sWound := true ;
57472: LD_ADDR_EXP 73
57476: PUSH
57477: LD_INT 1
57479: ST_TO_ADDR
// if p3 = 109 then
57480: LD_VAR 0 3
57484: PUSH
57485: LD_INT 109
57487: EQUAL
57488: IFFALSE 57498
// sBetray := true ;
57490: LD_ADDR_EXP 77
57494: PUSH
57495: LD_INT 1
57497: ST_TO_ADDR
// if p3 = 110 then
57498: LD_VAR 0 3
57502: PUSH
57503: LD_INT 110
57505: EQUAL
57506: IFFALSE 57516
// sContamin := true ;
57508: LD_ADDR_EXP 78
57512: PUSH
57513: LD_INT 1
57515: ST_TO_ADDR
// if p3 = 111 then
57516: LD_VAR 0 3
57520: PUSH
57521: LD_INT 111
57523: EQUAL
57524: IFFALSE 57534
// sOil := true ;
57526: LD_ADDR_EXP 80
57530: PUSH
57531: LD_INT 1
57533: ST_TO_ADDR
// if p3 = 112 then
57534: LD_VAR 0 3
57538: PUSH
57539: LD_INT 112
57541: EQUAL
57542: IFFALSE 57552
// sStu := true ;
57544: LD_ADDR_EXP 84
57548: PUSH
57549: LD_INT 1
57551: ST_TO_ADDR
// if p3 = 113 then
57552: LD_VAR 0 3
57556: PUSH
57557: LD_INT 113
57559: EQUAL
57560: IFFALSE 57570
// sBazooka := true ;
57562: LD_ADDR_EXP 87
57566: PUSH
57567: LD_INT 1
57569: ST_TO_ADDR
// if p3 = 114 then
57570: LD_VAR 0 3
57574: PUSH
57575: LD_INT 114
57577: EQUAL
57578: IFFALSE 57588
// sMortar := true ;
57580: LD_ADDR_EXP 88
57584: PUSH
57585: LD_INT 1
57587: ST_TO_ADDR
// if p3 = 115 then
57588: LD_VAR 0 3
57592: PUSH
57593: LD_INT 115
57595: EQUAL
57596: IFFALSE 57606
// sRanger := true ;
57598: LD_ADDR_EXP 98
57602: PUSH
57603: LD_INT 1
57605: ST_TO_ADDR
// if p3 = 116 then
57606: LD_VAR 0 3
57610: PUSH
57611: LD_INT 116
57613: EQUAL
57614: IFFALSE 57624
// sComputer := true ;
57616: LD_ADDR_EXP 99
57620: PUSH
57621: LD_INT 1
57623: ST_TO_ADDR
// if p3 = 117 then
57624: LD_VAR 0 3
57628: PUSH
57629: LD_INT 117
57631: EQUAL
57632: IFFALSE 57642
// s30 := true ;
57634: LD_ADDR_EXP 100
57638: PUSH
57639: LD_INT 1
57641: ST_TO_ADDR
// if p3 = 118 then
57642: LD_VAR 0 3
57646: PUSH
57647: LD_INT 118
57649: EQUAL
57650: IFFALSE 57660
// s60 := true ;
57652: LD_ADDR_EXP 101
57656: PUSH
57657: LD_INT 1
57659: ST_TO_ADDR
// end ; if p2 = hack_mode then
57660: LD_VAR 0 2
57664: PUSH
57665: LD_INT 101
57667: EQUAL
57668: IFFALSE 57796
// begin case p3 of 1 :
57670: LD_VAR 0 3
57674: PUSH
57675: LD_INT 1
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57683
57681: GO 57690
57683: POP
// hHackUnlimitedResources ; 2 :
57684: CALL 69943 0 0
57688: GO 57796
57690: LD_INT 2
57692: DOUBLE
57693: EQUAL
57694: IFTRUE 57698
57696: GO 57705
57698: POP
// hHackSetLevel10 ; 3 :
57699: CALL 70076 0 0
57703: GO 57796
57705: LD_INT 3
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57713
57711: GO 57720
57713: POP
// hHackSetLevel10YourUnits ; 4 :
57714: CALL 70161 0 0
57718: GO 57796
57720: LD_INT 4
57722: DOUBLE
57723: EQUAL
57724: IFTRUE 57728
57726: GO 57735
57728: POP
// hHackInvincible ; 5 :
57729: CALL 70609 0 0
57733: GO 57796
57735: LD_INT 5
57737: DOUBLE
57738: EQUAL
57739: IFTRUE 57743
57741: GO 57750
57743: POP
// hHackInvisible ; 6 :
57744: CALL 70720 0 0
57748: GO 57796
57750: LD_INT 6
57752: DOUBLE
57753: EQUAL
57754: IFTRUE 57758
57756: GO 57765
57758: POP
// hHackChangeYourSide ; 7 :
57759: CALL 70777 0 0
57763: GO 57796
57765: LD_INT 7
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57773
57771: GO 57780
57773: POP
// hHackChangeUnitSide ; 8 :
57774: CALL 70819 0 0
57778: GO 57796
57780: LD_INT 8
57782: DOUBLE
57783: EQUAL
57784: IFTRUE 57788
57786: GO 57795
57788: POP
// hHackFog ; end ;
57789: CALL 70920 0 0
57793: GO 57796
57795: POP
// end ; if p2 = game_save_mode then
57796: LD_VAR 0 2
57800: PUSH
57801: LD_INT 102
57803: EQUAL
57804: IFFALSE 57859
// begin if p3 = 1 then
57806: LD_VAR 0 3
57810: PUSH
57811: LD_INT 1
57813: EQUAL
57814: IFFALSE 57826
// globalGameSaveCounter := p4 ;
57816: LD_ADDR_EXP 44
57820: PUSH
57821: LD_VAR 0 4
57825: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
57826: LD_VAR 0 3
57830: PUSH
57831: LD_INT 2
57833: EQUAL
57834: PUSH
57835: LD_EXP 44
57839: AND
57840: IFFALSE 57859
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57842: LD_STRING setGameSaveCounter(
57844: PUSH
57845: LD_EXP 44
57849: STR
57850: PUSH
57851: LD_STRING )
57853: STR
57854: PPUSH
57855: CALL_OW 559
// end ; end ;
57859: LD_VAR 0 7
57863: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
57864: LD_INT 0
57866: PPUSH
// streamModeActive := false ;
57867: LD_ADDR_EXP 45
57871: PUSH
57872: LD_INT 0
57874: ST_TO_ADDR
// normalCounter := 36 ;
57875: LD_ADDR_EXP 46
57879: PUSH
57880: LD_INT 36
57882: ST_TO_ADDR
// hardcoreCounter := 18 ;
57883: LD_ADDR_EXP 47
57887: PUSH
57888: LD_INT 18
57890: ST_TO_ADDR
// sRocket := false ;
57891: LD_ADDR_EXP 50
57895: PUSH
57896: LD_INT 0
57898: ST_TO_ADDR
// sSpeed := false ;
57899: LD_ADDR_EXP 49
57903: PUSH
57904: LD_INT 0
57906: ST_TO_ADDR
// sEngine := false ;
57907: LD_ADDR_EXP 51
57911: PUSH
57912: LD_INT 0
57914: ST_TO_ADDR
// sSpec := false ;
57915: LD_ADDR_EXP 48
57919: PUSH
57920: LD_INT 0
57922: ST_TO_ADDR
// sLevel := false ;
57923: LD_ADDR_EXP 52
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// sArmoury := false ;
57931: LD_ADDR_EXP 53
57935: PUSH
57936: LD_INT 0
57938: ST_TO_ADDR
// sRadar := false ;
57939: LD_ADDR_EXP 54
57943: PUSH
57944: LD_INT 0
57946: ST_TO_ADDR
// sBunker := false ;
57947: LD_ADDR_EXP 55
57951: PUSH
57952: LD_INT 0
57954: ST_TO_ADDR
// sHack := false ;
57955: LD_ADDR_EXP 56
57959: PUSH
57960: LD_INT 0
57962: ST_TO_ADDR
// sFire := false ;
57963: LD_ADDR_EXP 57
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// sRefresh := false ;
57971: LD_ADDR_EXP 58
57975: PUSH
57976: LD_INT 0
57978: ST_TO_ADDR
// sExp := false ;
57979: LD_ADDR_EXP 59
57983: PUSH
57984: LD_INT 0
57986: ST_TO_ADDR
// sDepot := false ;
57987: LD_ADDR_EXP 60
57991: PUSH
57992: LD_INT 0
57994: ST_TO_ADDR
// sFlag := false ;
57995: LD_ADDR_EXP 61
57999: PUSH
58000: LD_INT 0
58002: ST_TO_ADDR
// sKamikadze := false ;
58003: LD_ADDR_EXP 69
58007: PUSH
58008: LD_INT 0
58010: ST_TO_ADDR
// sTroll := false ;
58011: LD_ADDR_EXP 70
58015: PUSH
58016: LD_INT 0
58018: ST_TO_ADDR
// sSlow := false ;
58019: LD_ADDR_EXP 71
58023: PUSH
58024: LD_INT 0
58026: ST_TO_ADDR
// sLack := false ;
58027: LD_ADDR_EXP 72
58031: PUSH
58032: LD_INT 0
58034: ST_TO_ADDR
// sTank := false ;
58035: LD_ADDR_EXP 74
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
// sRemote := false ;
58043: LD_ADDR_EXP 75
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// sPowell := false ;
58051: LD_ADDR_EXP 76
58055: PUSH
58056: LD_INT 0
58058: ST_TO_ADDR
// sTeleport := false ;
58059: LD_ADDR_EXP 79
58063: PUSH
58064: LD_INT 0
58066: ST_TO_ADDR
// sOilTower := false ;
58067: LD_ADDR_EXP 81
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
// sShovel := false ;
58075: LD_ADDR_EXP 82
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// sSheik := false ;
58083: LD_ADDR_EXP 83
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// sEarthquake := false ;
58091: LD_ADDR_EXP 85
58095: PUSH
58096: LD_INT 0
58098: ST_TO_ADDR
// sAI := false ;
58099: LD_ADDR_EXP 86
58103: PUSH
58104: LD_INT 0
58106: ST_TO_ADDR
// sCargo := false ;
58107: LD_ADDR_EXP 89
58111: PUSH
58112: LD_INT 0
58114: ST_TO_ADDR
// sDLaser := false ;
58115: LD_ADDR_EXP 90
58119: PUSH
58120: LD_INT 0
58122: ST_TO_ADDR
// sExchange := false ;
58123: LD_ADDR_EXP 91
58127: PUSH
58128: LD_INT 0
58130: ST_TO_ADDR
// sFac := false ;
58131: LD_ADDR_EXP 92
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// sPower := false ;
58139: LD_ADDR_EXP 93
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// sRandom := false ;
58147: LD_ADDR_EXP 94
58151: PUSH
58152: LD_INT 0
58154: ST_TO_ADDR
// sShield := false ;
58155: LD_ADDR_EXP 95
58159: PUSH
58160: LD_INT 0
58162: ST_TO_ADDR
// sTime := false ;
58163: LD_ADDR_EXP 96
58167: PUSH
58168: LD_INT 0
58170: ST_TO_ADDR
// sTools := false ;
58171: LD_ADDR_EXP 97
58175: PUSH
58176: LD_INT 0
58178: ST_TO_ADDR
// sSold := false ;
58179: LD_ADDR_EXP 62
58183: PUSH
58184: LD_INT 0
58186: ST_TO_ADDR
// sDiff := false ;
58187: LD_ADDR_EXP 63
58191: PUSH
58192: LD_INT 0
58194: ST_TO_ADDR
// sFog := false ;
58195: LD_ADDR_EXP 66
58199: PUSH
58200: LD_INT 0
58202: ST_TO_ADDR
// sReset := false ;
58203: LD_ADDR_EXP 67
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// sSun := false ;
58211: LD_ADDR_EXP 68
58215: PUSH
58216: LD_INT 0
58218: ST_TO_ADDR
// sTiger := false ;
58219: LD_ADDR_EXP 64
58223: PUSH
58224: LD_INT 0
58226: ST_TO_ADDR
// sBomb := false ;
58227: LD_ADDR_EXP 65
58231: PUSH
58232: LD_INT 0
58234: ST_TO_ADDR
// sWound := false ;
58235: LD_ADDR_EXP 73
58239: PUSH
58240: LD_INT 0
58242: ST_TO_ADDR
// sBetray := false ;
58243: LD_ADDR_EXP 77
58247: PUSH
58248: LD_INT 0
58250: ST_TO_ADDR
// sContamin := false ;
58251: LD_ADDR_EXP 78
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// sOil := false ;
58259: LD_ADDR_EXP 80
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// sStu := false ;
58267: LD_ADDR_EXP 84
58271: PUSH
58272: LD_INT 0
58274: ST_TO_ADDR
// sBazooka := false ;
58275: LD_ADDR_EXP 87
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
// sMortar := false ;
58283: LD_ADDR_EXP 88
58287: PUSH
58288: LD_INT 0
58290: ST_TO_ADDR
// sRanger := false ;
58291: LD_ADDR_EXP 98
58295: PUSH
58296: LD_INT 0
58298: ST_TO_ADDR
// sComputer := false ;
58299: LD_ADDR_EXP 99
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// s30 := false ;
58307: LD_ADDR_EXP 100
58311: PUSH
58312: LD_INT 0
58314: ST_TO_ADDR
// s60 := false ;
58315: LD_ADDR_EXP 101
58319: PUSH
58320: LD_INT 0
58322: ST_TO_ADDR
// end ;
58323: LD_VAR 0 1
58327: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58328: LD_INT 0
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
58336: PPUSH
// result := [ ] ;
58337: LD_ADDR_VAR 0 2
58341: PUSH
58342: EMPTY
58343: ST_TO_ADDR
// if campaign_id = 1 then
58344: LD_OWVAR 69
58348: PUSH
58349: LD_INT 1
58351: EQUAL
58352: IFFALSE 61518
// begin case mission_number of 1 :
58354: LD_OWVAR 70
58358: PUSH
58359: LD_INT 1
58361: DOUBLE
58362: EQUAL
58363: IFTRUE 58367
58365: GO 58443
58367: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58368: LD_ADDR_VAR 0 2
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: LD_INT 4
58378: PUSH
58379: LD_INT 11
58381: PUSH
58382: LD_INT 12
58384: PUSH
58385: LD_INT 15
58387: PUSH
58388: LD_INT 16
58390: PUSH
58391: LD_INT 22
58393: PUSH
58394: LD_INT 23
58396: PUSH
58397: LD_INT 26
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 101
58413: PUSH
58414: LD_INT 102
58416: PUSH
58417: LD_INT 106
58419: PUSH
58420: LD_INT 116
58422: PUSH
58423: LD_INT 117
58425: PUSH
58426: LD_INT 118
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: ST_TO_ADDR
58441: GO 61516
58443: LD_INT 2
58445: DOUBLE
58446: EQUAL
58447: IFTRUE 58451
58449: GO 58535
58451: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58452: LD_ADDR_VAR 0 2
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: LD_INT 11
58465: PUSH
58466: LD_INT 12
58468: PUSH
58469: LD_INT 15
58471: PUSH
58472: LD_INT 16
58474: PUSH
58475: LD_INT 22
58477: PUSH
58478: LD_INT 23
58480: PUSH
58481: LD_INT 26
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 101
58497: PUSH
58498: LD_INT 102
58500: PUSH
58501: LD_INT 105
58503: PUSH
58504: LD_INT 106
58506: PUSH
58507: LD_INT 108
58509: PUSH
58510: LD_INT 116
58512: PUSH
58513: LD_INT 117
58515: PUSH
58516: LD_INT 118
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: ST_TO_ADDR
58533: GO 61516
58535: LD_INT 3
58537: DOUBLE
58538: EQUAL
58539: IFTRUE 58543
58541: GO 58631
58543: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 5
58557: PUSH
58558: LD_INT 11
58560: PUSH
58561: LD_INT 12
58563: PUSH
58564: LD_INT 15
58566: PUSH
58567: LD_INT 16
58569: PUSH
58570: LD_INT 22
58572: PUSH
58573: LD_INT 26
58575: PUSH
58576: LD_INT 36
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 101
58593: PUSH
58594: LD_INT 102
58596: PUSH
58597: LD_INT 105
58599: PUSH
58600: LD_INT 106
58602: PUSH
58603: LD_INT 108
58605: PUSH
58606: LD_INT 116
58608: PUSH
58609: LD_INT 117
58611: PUSH
58612: LD_INT 118
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: ST_TO_ADDR
58629: GO 61516
58631: LD_INT 4
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58639
58637: GO 58735
58639: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
58640: LD_ADDR_VAR 0 2
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: LD_INT 8
58656: PUSH
58657: LD_INT 11
58659: PUSH
58660: LD_INT 12
58662: PUSH
58663: LD_INT 15
58665: PUSH
58666: LD_INT 16
58668: PUSH
58669: LD_INT 22
58671: PUSH
58672: LD_INT 23
58674: PUSH
58675: LD_INT 26
58677: PUSH
58678: LD_INT 36
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 101
58697: PUSH
58698: LD_INT 102
58700: PUSH
58701: LD_INT 105
58703: PUSH
58704: LD_INT 106
58706: PUSH
58707: LD_INT 108
58709: PUSH
58710: LD_INT 116
58712: PUSH
58713: LD_INT 117
58715: PUSH
58716: LD_INT 118
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: ST_TO_ADDR
58733: GO 61516
58735: LD_INT 5
58737: DOUBLE
58738: EQUAL
58739: IFTRUE 58743
58741: GO 58855
58743: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
58744: LD_ADDR_VAR 0 2
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 5
58757: PUSH
58758: LD_INT 6
58760: PUSH
58761: LD_INT 8
58763: PUSH
58764: LD_INT 11
58766: PUSH
58767: LD_INT 12
58769: PUSH
58770: LD_INT 15
58772: PUSH
58773: LD_INT 16
58775: PUSH
58776: LD_INT 22
58778: PUSH
58779: LD_INT 23
58781: PUSH
58782: LD_INT 25
58784: PUSH
58785: LD_INT 26
58787: PUSH
58788: LD_INT 36
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 101
58809: PUSH
58810: LD_INT 102
58812: PUSH
58813: LD_INT 105
58815: PUSH
58816: LD_INT 106
58818: PUSH
58819: LD_INT 108
58821: PUSH
58822: LD_INT 109
58824: PUSH
58825: LD_INT 112
58827: PUSH
58828: LD_INT 116
58830: PUSH
58831: LD_INT 117
58833: PUSH
58834: LD_INT 118
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: ST_TO_ADDR
58853: GO 61516
58855: LD_INT 6
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58863
58861: GO 58995
58863: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
58864: LD_ADDR_VAR 0 2
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: LD_INT 6
58880: PUSH
58881: LD_INT 8
58883: PUSH
58884: LD_INT 11
58886: PUSH
58887: LD_INT 12
58889: PUSH
58890: LD_INT 15
58892: PUSH
58893: LD_INT 16
58895: PUSH
58896: LD_INT 20
58898: PUSH
58899: LD_INT 21
58901: PUSH
58902: LD_INT 22
58904: PUSH
58905: LD_INT 23
58907: PUSH
58908: LD_INT 25
58910: PUSH
58911: LD_INT 26
58913: PUSH
58914: LD_INT 30
58916: PUSH
58917: LD_INT 31
58919: PUSH
58920: LD_INT 32
58922: PUSH
58923: LD_INT 36
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 101
58949: PUSH
58950: LD_INT 102
58952: PUSH
58953: LD_INT 105
58955: PUSH
58956: LD_INT 106
58958: PUSH
58959: LD_INT 108
58961: PUSH
58962: LD_INT 109
58964: PUSH
58965: LD_INT 112
58967: PUSH
58968: LD_INT 116
58970: PUSH
58971: LD_INT 117
58973: PUSH
58974: LD_INT 118
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: ST_TO_ADDR
58993: GO 61516
58995: LD_INT 7
58997: DOUBLE
58998: EQUAL
58999: IFTRUE 59003
59001: GO 59115
59003: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59004: LD_ADDR_VAR 0 2
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: LD_INT 4
59014: PUSH
59015: LD_INT 5
59017: PUSH
59018: LD_INT 7
59020: PUSH
59021: LD_INT 11
59023: PUSH
59024: LD_INT 12
59026: PUSH
59027: LD_INT 15
59029: PUSH
59030: LD_INT 16
59032: PUSH
59033: LD_INT 20
59035: PUSH
59036: LD_INT 21
59038: PUSH
59039: LD_INT 22
59041: PUSH
59042: LD_INT 23
59044: PUSH
59045: LD_INT 25
59047: PUSH
59048: LD_INT 26
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 101
59069: PUSH
59070: LD_INT 102
59072: PUSH
59073: LD_INT 103
59075: PUSH
59076: LD_INT 105
59078: PUSH
59079: LD_INT 106
59081: PUSH
59082: LD_INT 108
59084: PUSH
59085: LD_INT 112
59087: PUSH
59088: LD_INT 116
59090: PUSH
59091: LD_INT 117
59093: PUSH
59094: LD_INT 118
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: ST_TO_ADDR
59113: GO 61516
59115: LD_INT 8
59117: DOUBLE
59118: EQUAL
59119: IFTRUE 59123
59121: GO 59263
59123: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59124: LD_ADDR_VAR 0 2
59128: PUSH
59129: LD_INT 2
59131: PUSH
59132: LD_INT 4
59134: PUSH
59135: LD_INT 5
59137: PUSH
59138: LD_INT 6
59140: PUSH
59141: LD_INT 7
59143: PUSH
59144: LD_INT 8
59146: PUSH
59147: LD_INT 11
59149: PUSH
59150: LD_INT 12
59152: PUSH
59153: LD_INT 15
59155: PUSH
59156: LD_INT 16
59158: PUSH
59159: LD_INT 20
59161: PUSH
59162: LD_INT 21
59164: PUSH
59165: LD_INT 22
59167: PUSH
59168: LD_INT 23
59170: PUSH
59171: LD_INT 25
59173: PUSH
59174: LD_INT 26
59176: PUSH
59177: LD_INT 30
59179: PUSH
59180: LD_INT 31
59182: PUSH
59183: LD_INT 32
59185: PUSH
59186: LD_INT 36
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 101
59213: PUSH
59214: LD_INT 102
59216: PUSH
59217: LD_INT 103
59219: PUSH
59220: LD_INT 105
59222: PUSH
59223: LD_INT 106
59225: PUSH
59226: LD_INT 108
59228: PUSH
59229: LD_INT 109
59231: PUSH
59232: LD_INT 112
59234: PUSH
59235: LD_INT 116
59237: PUSH
59238: LD_INT 117
59240: PUSH
59241: LD_INT 118
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: ST_TO_ADDR
59261: GO 61516
59263: LD_INT 9
59265: DOUBLE
59266: EQUAL
59267: IFTRUE 59271
59269: GO 59419
59271: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59272: LD_ADDR_VAR 0 2
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 5
59285: PUSH
59286: LD_INT 6
59288: PUSH
59289: LD_INT 7
59291: PUSH
59292: LD_INT 8
59294: PUSH
59295: LD_INT 11
59297: PUSH
59298: LD_INT 12
59300: PUSH
59301: LD_INT 15
59303: PUSH
59304: LD_INT 16
59306: PUSH
59307: LD_INT 20
59309: PUSH
59310: LD_INT 21
59312: PUSH
59313: LD_INT 22
59315: PUSH
59316: LD_INT 23
59318: PUSH
59319: LD_INT 25
59321: PUSH
59322: LD_INT 26
59324: PUSH
59325: LD_INT 28
59327: PUSH
59328: LD_INT 30
59330: PUSH
59331: LD_INT 31
59333: PUSH
59334: LD_INT 32
59336: PUSH
59337: LD_INT 36
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 101
59365: PUSH
59366: LD_INT 102
59368: PUSH
59369: LD_INT 103
59371: PUSH
59372: LD_INT 105
59374: PUSH
59375: LD_INT 106
59377: PUSH
59378: LD_INT 108
59380: PUSH
59381: LD_INT 109
59383: PUSH
59384: LD_INT 112
59386: PUSH
59387: LD_INT 114
59389: PUSH
59390: LD_INT 116
59392: PUSH
59393: LD_INT 117
59395: PUSH
59396: LD_INT 118
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: ST_TO_ADDR
59417: GO 61516
59419: LD_INT 10
59421: DOUBLE
59422: EQUAL
59423: IFTRUE 59427
59425: GO 59623
59427: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59428: LD_ADDR_VAR 0 2
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 4
59438: PUSH
59439: LD_INT 5
59441: PUSH
59442: LD_INT 6
59444: PUSH
59445: LD_INT 7
59447: PUSH
59448: LD_INT 8
59450: PUSH
59451: LD_INT 9
59453: PUSH
59454: LD_INT 10
59456: PUSH
59457: LD_INT 11
59459: PUSH
59460: LD_INT 12
59462: PUSH
59463: LD_INT 13
59465: PUSH
59466: LD_INT 14
59468: PUSH
59469: LD_INT 15
59471: PUSH
59472: LD_INT 16
59474: PUSH
59475: LD_INT 17
59477: PUSH
59478: LD_INT 18
59480: PUSH
59481: LD_INT 19
59483: PUSH
59484: LD_INT 20
59486: PUSH
59487: LD_INT 21
59489: PUSH
59490: LD_INT 22
59492: PUSH
59493: LD_INT 23
59495: PUSH
59496: LD_INT 24
59498: PUSH
59499: LD_INT 25
59501: PUSH
59502: LD_INT 26
59504: PUSH
59505: LD_INT 28
59507: PUSH
59508: LD_INT 30
59510: PUSH
59511: LD_INT 31
59513: PUSH
59514: LD_INT 32
59516: PUSH
59517: LD_INT 36
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 101
59553: PUSH
59554: LD_INT 102
59556: PUSH
59557: LD_INT 103
59559: PUSH
59560: LD_INT 104
59562: PUSH
59563: LD_INT 105
59565: PUSH
59566: LD_INT 106
59568: PUSH
59569: LD_INT 107
59571: PUSH
59572: LD_INT 108
59574: PUSH
59575: LD_INT 109
59577: PUSH
59578: LD_INT 110
59580: PUSH
59581: LD_INT 111
59583: PUSH
59584: LD_INT 112
59586: PUSH
59587: LD_INT 114
59589: PUSH
59590: LD_INT 116
59592: PUSH
59593: LD_INT 117
59595: PUSH
59596: LD_INT 118
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: ST_TO_ADDR
59621: GO 61516
59623: LD_INT 11
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59631
59629: GO 59835
59631: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
59632: LD_ADDR_VAR 0 2
59636: PUSH
59637: LD_INT 2
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: LD_INT 5
59648: PUSH
59649: LD_INT 6
59651: PUSH
59652: LD_INT 7
59654: PUSH
59655: LD_INT 8
59657: PUSH
59658: LD_INT 9
59660: PUSH
59661: LD_INT 10
59663: PUSH
59664: LD_INT 11
59666: PUSH
59667: LD_INT 12
59669: PUSH
59670: LD_INT 13
59672: PUSH
59673: LD_INT 14
59675: PUSH
59676: LD_INT 15
59678: PUSH
59679: LD_INT 16
59681: PUSH
59682: LD_INT 17
59684: PUSH
59685: LD_INT 18
59687: PUSH
59688: LD_INT 19
59690: PUSH
59691: LD_INT 20
59693: PUSH
59694: LD_INT 21
59696: PUSH
59697: LD_INT 22
59699: PUSH
59700: LD_INT 23
59702: PUSH
59703: LD_INT 24
59705: PUSH
59706: LD_INT 25
59708: PUSH
59709: LD_INT 26
59711: PUSH
59712: LD_INT 28
59714: PUSH
59715: LD_INT 30
59717: PUSH
59718: LD_INT 31
59720: PUSH
59721: LD_INT 32
59723: PUSH
59724: LD_INT 34
59726: PUSH
59727: LD_INT 36
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 101
59765: PUSH
59766: LD_INT 102
59768: PUSH
59769: LD_INT 103
59771: PUSH
59772: LD_INT 104
59774: PUSH
59775: LD_INT 105
59777: PUSH
59778: LD_INT 106
59780: PUSH
59781: LD_INT 107
59783: PUSH
59784: LD_INT 108
59786: PUSH
59787: LD_INT 109
59789: PUSH
59790: LD_INT 110
59792: PUSH
59793: LD_INT 111
59795: PUSH
59796: LD_INT 112
59798: PUSH
59799: LD_INT 114
59801: PUSH
59802: LD_INT 116
59804: PUSH
59805: LD_INT 117
59807: PUSH
59808: LD_INT 118
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: ST_TO_ADDR
59833: GO 61516
59835: LD_INT 12
59837: DOUBLE
59838: EQUAL
59839: IFTRUE 59843
59841: GO 60063
59843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
59844: LD_ADDR_VAR 0 2
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 5
59863: PUSH
59864: LD_INT 6
59866: PUSH
59867: LD_INT 7
59869: PUSH
59870: LD_INT 8
59872: PUSH
59873: LD_INT 9
59875: PUSH
59876: LD_INT 10
59878: PUSH
59879: LD_INT 11
59881: PUSH
59882: LD_INT 12
59884: PUSH
59885: LD_INT 13
59887: PUSH
59888: LD_INT 14
59890: PUSH
59891: LD_INT 15
59893: PUSH
59894: LD_INT 16
59896: PUSH
59897: LD_INT 17
59899: PUSH
59900: LD_INT 18
59902: PUSH
59903: LD_INT 19
59905: PUSH
59906: LD_INT 20
59908: PUSH
59909: LD_INT 21
59911: PUSH
59912: LD_INT 22
59914: PUSH
59915: LD_INT 23
59917: PUSH
59918: LD_INT 24
59920: PUSH
59921: LD_INT 25
59923: PUSH
59924: LD_INT 26
59926: PUSH
59927: LD_INT 27
59929: PUSH
59930: LD_INT 28
59932: PUSH
59933: LD_INT 30
59935: PUSH
59936: LD_INT 31
59938: PUSH
59939: LD_INT 32
59941: PUSH
59942: LD_INT 33
59944: PUSH
59945: LD_INT 34
59947: PUSH
59948: LD_INT 36
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 101
59989: PUSH
59990: LD_INT 102
59992: PUSH
59993: LD_INT 103
59995: PUSH
59996: LD_INT 104
59998: PUSH
59999: LD_INT 105
60001: PUSH
60002: LD_INT 106
60004: PUSH
60005: LD_INT 107
60007: PUSH
60008: LD_INT 108
60010: PUSH
60011: LD_INT 109
60013: PUSH
60014: LD_INT 110
60016: PUSH
60017: LD_INT 111
60019: PUSH
60020: LD_INT 112
60022: PUSH
60023: LD_INT 113
60025: PUSH
60026: LD_INT 114
60028: PUSH
60029: LD_INT 116
60031: PUSH
60032: LD_INT 117
60034: PUSH
60035: LD_INT 118
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: ST_TO_ADDR
60061: GO 61516
60063: LD_INT 13
60065: DOUBLE
60066: EQUAL
60067: IFTRUE 60071
60069: GO 60279
60071: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60072: LD_ADDR_VAR 0 2
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: LD_INT 8
60094: PUSH
60095: LD_INT 9
60097: PUSH
60098: LD_INT 10
60100: PUSH
60101: LD_INT 11
60103: PUSH
60104: LD_INT 12
60106: PUSH
60107: LD_INT 14
60109: PUSH
60110: LD_INT 15
60112: PUSH
60113: LD_INT 16
60115: PUSH
60116: LD_INT 17
60118: PUSH
60119: LD_INT 18
60121: PUSH
60122: LD_INT 19
60124: PUSH
60125: LD_INT 20
60127: PUSH
60128: LD_INT 21
60130: PUSH
60131: LD_INT 22
60133: PUSH
60134: LD_INT 23
60136: PUSH
60137: LD_INT 24
60139: PUSH
60140: LD_INT 25
60142: PUSH
60143: LD_INT 26
60145: PUSH
60146: LD_INT 27
60148: PUSH
60149: LD_INT 28
60151: PUSH
60152: LD_INT 30
60154: PUSH
60155: LD_INT 31
60157: PUSH
60158: LD_INT 32
60160: PUSH
60161: LD_INT 33
60163: PUSH
60164: LD_INT 34
60166: PUSH
60167: LD_INT 36
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 101
60205: PUSH
60206: LD_INT 102
60208: PUSH
60209: LD_INT 103
60211: PUSH
60212: LD_INT 104
60214: PUSH
60215: LD_INT 105
60217: PUSH
60218: LD_INT 106
60220: PUSH
60221: LD_INT 107
60223: PUSH
60224: LD_INT 108
60226: PUSH
60227: LD_INT 109
60229: PUSH
60230: LD_INT 110
60232: PUSH
60233: LD_INT 111
60235: PUSH
60236: LD_INT 112
60238: PUSH
60239: LD_INT 113
60241: PUSH
60242: LD_INT 114
60244: PUSH
60245: LD_INT 116
60247: PUSH
60248: LD_INT 117
60250: PUSH
60251: LD_INT 118
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: ST_TO_ADDR
60277: GO 61516
60279: LD_INT 14
60281: DOUBLE
60282: EQUAL
60283: IFTRUE 60287
60285: GO 60511
60287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60288: LD_ADDR_VAR 0 2
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 2
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: LD_INT 4
60304: PUSH
60305: LD_INT 5
60307: PUSH
60308: LD_INT 6
60310: PUSH
60311: LD_INT 7
60313: PUSH
60314: LD_INT 8
60316: PUSH
60317: LD_INT 9
60319: PUSH
60320: LD_INT 10
60322: PUSH
60323: LD_INT 11
60325: PUSH
60326: LD_INT 12
60328: PUSH
60329: LD_INT 13
60331: PUSH
60332: LD_INT 14
60334: PUSH
60335: LD_INT 15
60337: PUSH
60338: LD_INT 16
60340: PUSH
60341: LD_INT 17
60343: PUSH
60344: LD_INT 18
60346: PUSH
60347: LD_INT 19
60349: PUSH
60350: LD_INT 20
60352: PUSH
60353: LD_INT 21
60355: PUSH
60356: LD_INT 22
60358: PUSH
60359: LD_INT 23
60361: PUSH
60362: LD_INT 24
60364: PUSH
60365: LD_INT 25
60367: PUSH
60368: LD_INT 26
60370: PUSH
60371: LD_INT 27
60373: PUSH
60374: LD_INT 28
60376: PUSH
60377: LD_INT 29
60379: PUSH
60380: LD_INT 30
60382: PUSH
60383: LD_INT 31
60385: PUSH
60386: LD_INT 32
60388: PUSH
60389: LD_INT 33
60391: PUSH
60392: LD_INT 34
60394: PUSH
60395: LD_INT 36
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 101
60437: PUSH
60438: LD_INT 102
60440: PUSH
60441: LD_INT 103
60443: PUSH
60444: LD_INT 104
60446: PUSH
60447: LD_INT 105
60449: PUSH
60450: LD_INT 106
60452: PUSH
60453: LD_INT 107
60455: PUSH
60456: LD_INT 108
60458: PUSH
60459: LD_INT 109
60461: PUSH
60462: LD_INT 110
60464: PUSH
60465: LD_INT 111
60467: PUSH
60468: LD_INT 112
60470: PUSH
60471: LD_INT 113
60473: PUSH
60474: LD_INT 114
60476: PUSH
60477: LD_INT 116
60479: PUSH
60480: LD_INT 117
60482: PUSH
60483: LD_INT 118
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: ST_TO_ADDR
60509: GO 61516
60511: LD_INT 15
60513: DOUBLE
60514: EQUAL
60515: IFTRUE 60519
60517: GO 60743
60519: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60520: LD_ADDR_VAR 0 2
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: LD_INT 5
60539: PUSH
60540: LD_INT 6
60542: PUSH
60543: LD_INT 7
60545: PUSH
60546: LD_INT 8
60548: PUSH
60549: LD_INT 9
60551: PUSH
60552: LD_INT 10
60554: PUSH
60555: LD_INT 11
60557: PUSH
60558: LD_INT 12
60560: PUSH
60561: LD_INT 13
60563: PUSH
60564: LD_INT 14
60566: PUSH
60567: LD_INT 15
60569: PUSH
60570: LD_INT 16
60572: PUSH
60573: LD_INT 17
60575: PUSH
60576: LD_INT 18
60578: PUSH
60579: LD_INT 19
60581: PUSH
60582: LD_INT 20
60584: PUSH
60585: LD_INT 21
60587: PUSH
60588: LD_INT 22
60590: PUSH
60591: LD_INT 23
60593: PUSH
60594: LD_INT 24
60596: PUSH
60597: LD_INT 25
60599: PUSH
60600: LD_INT 26
60602: PUSH
60603: LD_INT 27
60605: PUSH
60606: LD_INT 28
60608: PUSH
60609: LD_INT 29
60611: PUSH
60612: LD_INT 30
60614: PUSH
60615: LD_INT 31
60617: PUSH
60618: LD_INT 32
60620: PUSH
60621: LD_INT 33
60623: PUSH
60624: LD_INT 34
60626: PUSH
60627: LD_INT 36
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 101
60669: PUSH
60670: LD_INT 102
60672: PUSH
60673: LD_INT 103
60675: PUSH
60676: LD_INT 104
60678: PUSH
60679: LD_INT 105
60681: PUSH
60682: LD_INT 106
60684: PUSH
60685: LD_INT 107
60687: PUSH
60688: LD_INT 108
60690: PUSH
60691: LD_INT 109
60693: PUSH
60694: LD_INT 110
60696: PUSH
60697: LD_INT 111
60699: PUSH
60700: LD_INT 112
60702: PUSH
60703: LD_INT 113
60705: PUSH
60706: LD_INT 114
60708: PUSH
60709: LD_INT 116
60711: PUSH
60712: LD_INT 117
60714: PUSH
60715: LD_INT 118
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: ST_TO_ADDR
60741: GO 61516
60743: LD_INT 16
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60751
60749: GO 60887
60751: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 4
60762: PUSH
60763: LD_INT 5
60765: PUSH
60766: LD_INT 7
60768: PUSH
60769: LD_INT 11
60771: PUSH
60772: LD_INT 12
60774: PUSH
60775: LD_INT 15
60777: PUSH
60778: LD_INT 16
60780: PUSH
60781: LD_INT 20
60783: PUSH
60784: LD_INT 21
60786: PUSH
60787: LD_INT 22
60789: PUSH
60790: LD_INT 23
60792: PUSH
60793: LD_INT 25
60795: PUSH
60796: LD_INT 26
60798: PUSH
60799: LD_INT 30
60801: PUSH
60802: LD_INT 31
60804: PUSH
60805: LD_INT 32
60807: PUSH
60808: LD_INT 33
60810: PUSH
60811: LD_INT 34
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 101
60837: PUSH
60838: LD_INT 102
60840: PUSH
60841: LD_INT 103
60843: PUSH
60844: LD_INT 106
60846: PUSH
60847: LD_INT 108
60849: PUSH
60850: LD_INT 112
60852: PUSH
60853: LD_INT 113
60855: PUSH
60856: LD_INT 114
60858: PUSH
60859: LD_INT 116
60861: PUSH
60862: LD_INT 117
60864: PUSH
60865: LD_INT 118
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: ST_TO_ADDR
60885: GO 61516
60887: LD_INT 17
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60895
60893: GO 61119
60895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: LD_INT 3
60909: PUSH
60910: LD_INT 4
60912: PUSH
60913: LD_INT 5
60915: PUSH
60916: LD_INT 6
60918: PUSH
60919: LD_INT 7
60921: PUSH
60922: LD_INT 8
60924: PUSH
60925: LD_INT 9
60927: PUSH
60928: LD_INT 10
60930: PUSH
60931: LD_INT 11
60933: PUSH
60934: LD_INT 12
60936: PUSH
60937: LD_INT 13
60939: PUSH
60940: LD_INT 14
60942: PUSH
60943: LD_INT 15
60945: PUSH
60946: LD_INT 16
60948: PUSH
60949: LD_INT 17
60951: PUSH
60952: LD_INT 18
60954: PUSH
60955: LD_INT 19
60957: PUSH
60958: LD_INT 20
60960: PUSH
60961: LD_INT 21
60963: PUSH
60964: LD_INT 22
60966: PUSH
60967: LD_INT 23
60969: PUSH
60970: LD_INT 24
60972: PUSH
60973: LD_INT 25
60975: PUSH
60976: LD_INT 26
60978: PUSH
60979: LD_INT 27
60981: PUSH
60982: LD_INT 28
60984: PUSH
60985: LD_INT 29
60987: PUSH
60988: LD_INT 30
60990: PUSH
60991: LD_INT 31
60993: PUSH
60994: LD_INT 32
60996: PUSH
60997: LD_INT 33
60999: PUSH
61000: LD_INT 34
61002: PUSH
61003: LD_INT 36
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 101
61045: PUSH
61046: LD_INT 102
61048: PUSH
61049: LD_INT 103
61051: PUSH
61052: LD_INT 104
61054: PUSH
61055: LD_INT 105
61057: PUSH
61058: LD_INT 106
61060: PUSH
61061: LD_INT 107
61063: PUSH
61064: LD_INT 108
61066: PUSH
61067: LD_INT 109
61069: PUSH
61070: LD_INT 110
61072: PUSH
61073: LD_INT 111
61075: PUSH
61076: LD_INT 112
61078: PUSH
61079: LD_INT 113
61081: PUSH
61082: LD_INT 114
61084: PUSH
61085: LD_INT 116
61087: PUSH
61088: LD_INT 117
61090: PUSH
61091: LD_INT 118
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: ST_TO_ADDR
61117: GO 61516
61119: LD_INT 18
61121: DOUBLE
61122: EQUAL
61123: IFTRUE 61127
61125: GO 61275
61127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61128: LD_ADDR_VAR 0 2
61132: PUSH
61133: LD_INT 2
61135: PUSH
61136: LD_INT 4
61138: PUSH
61139: LD_INT 5
61141: PUSH
61142: LD_INT 7
61144: PUSH
61145: LD_INT 11
61147: PUSH
61148: LD_INT 12
61150: PUSH
61151: LD_INT 15
61153: PUSH
61154: LD_INT 16
61156: PUSH
61157: LD_INT 20
61159: PUSH
61160: LD_INT 21
61162: PUSH
61163: LD_INT 22
61165: PUSH
61166: LD_INT 23
61168: PUSH
61169: LD_INT 25
61171: PUSH
61172: LD_INT 26
61174: PUSH
61175: LD_INT 30
61177: PUSH
61178: LD_INT 31
61180: PUSH
61181: LD_INT 32
61183: PUSH
61184: LD_INT 33
61186: PUSH
61187: LD_INT 34
61189: PUSH
61190: LD_INT 35
61192: PUSH
61193: LD_INT 36
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 101
61221: PUSH
61222: LD_INT 102
61224: PUSH
61225: LD_INT 103
61227: PUSH
61228: LD_INT 106
61230: PUSH
61231: LD_INT 108
61233: PUSH
61234: LD_INT 112
61236: PUSH
61237: LD_INT 113
61239: PUSH
61240: LD_INT 114
61242: PUSH
61243: LD_INT 115
61245: PUSH
61246: LD_INT 116
61248: PUSH
61249: LD_INT 117
61251: PUSH
61252: LD_INT 118
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: ST_TO_ADDR
61273: GO 61516
61275: LD_INT 19
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61515
61283: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61284: LD_ADDR_VAR 0 2
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 3
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: LD_INT 6
61306: PUSH
61307: LD_INT 7
61309: PUSH
61310: LD_INT 8
61312: PUSH
61313: LD_INT 9
61315: PUSH
61316: LD_INT 10
61318: PUSH
61319: LD_INT 11
61321: PUSH
61322: LD_INT 12
61324: PUSH
61325: LD_INT 13
61327: PUSH
61328: LD_INT 14
61330: PUSH
61331: LD_INT 15
61333: PUSH
61334: LD_INT 16
61336: PUSH
61337: LD_INT 17
61339: PUSH
61340: LD_INT 18
61342: PUSH
61343: LD_INT 19
61345: PUSH
61346: LD_INT 20
61348: PUSH
61349: LD_INT 21
61351: PUSH
61352: LD_INT 22
61354: PUSH
61355: LD_INT 23
61357: PUSH
61358: LD_INT 24
61360: PUSH
61361: LD_INT 25
61363: PUSH
61364: LD_INT 26
61366: PUSH
61367: LD_INT 27
61369: PUSH
61370: LD_INT 28
61372: PUSH
61373: LD_INT 29
61375: PUSH
61376: LD_INT 30
61378: PUSH
61379: LD_INT 31
61381: PUSH
61382: LD_INT 32
61384: PUSH
61385: LD_INT 33
61387: PUSH
61388: LD_INT 34
61390: PUSH
61391: LD_INT 35
61393: PUSH
61394: LD_INT 36
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 101
61437: PUSH
61438: LD_INT 102
61440: PUSH
61441: LD_INT 103
61443: PUSH
61444: LD_INT 104
61446: PUSH
61447: LD_INT 105
61449: PUSH
61450: LD_INT 106
61452: PUSH
61453: LD_INT 107
61455: PUSH
61456: LD_INT 108
61458: PUSH
61459: LD_INT 109
61461: PUSH
61462: LD_INT 110
61464: PUSH
61465: LD_INT 111
61467: PUSH
61468: LD_INT 112
61470: PUSH
61471: LD_INT 113
61473: PUSH
61474: LD_INT 114
61476: PUSH
61477: LD_INT 115
61479: PUSH
61480: LD_INT 116
61482: PUSH
61483: LD_INT 117
61485: PUSH
61486: LD_INT 118
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: ST_TO_ADDR
61513: GO 61516
61515: POP
// end else
61516: GO 61747
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61518: LD_ADDR_VAR 0 2
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 4
61534: PUSH
61535: LD_INT 5
61537: PUSH
61538: LD_INT 6
61540: PUSH
61541: LD_INT 7
61543: PUSH
61544: LD_INT 8
61546: PUSH
61547: LD_INT 9
61549: PUSH
61550: LD_INT 10
61552: PUSH
61553: LD_INT 11
61555: PUSH
61556: LD_INT 12
61558: PUSH
61559: LD_INT 13
61561: PUSH
61562: LD_INT 14
61564: PUSH
61565: LD_INT 15
61567: PUSH
61568: LD_INT 16
61570: PUSH
61571: LD_INT 17
61573: PUSH
61574: LD_INT 18
61576: PUSH
61577: LD_INT 19
61579: PUSH
61580: LD_INT 20
61582: PUSH
61583: LD_INT 21
61585: PUSH
61586: LD_INT 22
61588: PUSH
61589: LD_INT 23
61591: PUSH
61592: LD_INT 24
61594: PUSH
61595: LD_INT 25
61597: PUSH
61598: LD_INT 26
61600: PUSH
61601: LD_INT 27
61603: PUSH
61604: LD_INT 28
61606: PUSH
61607: LD_INT 29
61609: PUSH
61610: LD_INT 30
61612: PUSH
61613: LD_INT 31
61615: PUSH
61616: LD_INT 32
61618: PUSH
61619: LD_INT 33
61621: PUSH
61622: LD_INT 34
61624: PUSH
61625: LD_INT 35
61627: PUSH
61628: LD_INT 36
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 101
61671: PUSH
61672: LD_INT 102
61674: PUSH
61675: LD_INT 103
61677: PUSH
61678: LD_INT 104
61680: PUSH
61681: LD_INT 105
61683: PUSH
61684: LD_INT 106
61686: PUSH
61687: LD_INT 107
61689: PUSH
61690: LD_INT 108
61692: PUSH
61693: LD_INT 109
61695: PUSH
61696: LD_INT 110
61698: PUSH
61699: LD_INT 111
61701: PUSH
61702: LD_INT 112
61704: PUSH
61705: LD_INT 113
61707: PUSH
61708: LD_INT 114
61710: PUSH
61711: LD_INT 115
61713: PUSH
61714: LD_INT 116
61716: PUSH
61717: LD_INT 117
61719: PUSH
61720: LD_INT 118
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: ST_TO_ADDR
// if result then
61747: LD_VAR 0 2
61751: IFFALSE 62537
// begin normal :=  ;
61753: LD_ADDR_VAR 0 5
61757: PUSH
61758: LD_STRING 
61760: ST_TO_ADDR
// hardcore :=  ;
61761: LD_ADDR_VAR 0 6
61765: PUSH
61766: LD_STRING 
61768: ST_TO_ADDR
// active :=  ;
61769: LD_ADDR_VAR 0 7
61773: PUSH
61774: LD_STRING 
61776: ST_TO_ADDR
// for i = 1 to normalCounter do
61777: LD_ADDR_VAR 0 8
61781: PUSH
61782: DOUBLE
61783: LD_INT 1
61785: DEC
61786: ST_TO_ADDR
61787: LD_EXP 46
61791: PUSH
61792: FOR_TO
61793: IFFALSE 61894
// begin tmp := 0 ;
61795: LD_ADDR_VAR 0 3
61799: PUSH
61800: LD_STRING 0
61802: ST_TO_ADDR
// if result [ 1 ] then
61803: LD_VAR 0 2
61807: PUSH
61808: LD_INT 1
61810: ARRAY
61811: IFFALSE 61876
// if result [ 1 ] [ 1 ] = i then
61813: LD_VAR 0 2
61817: PUSH
61818: LD_INT 1
61820: ARRAY
61821: PUSH
61822: LD_INT 1
61824: ARRAY
61825: PUSH
61826: LD_VAR 0 8
61830: EQUAL
61831: IFFALSE 61876
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61833: LD_ADDR_VAR 0 2
61837: PUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: LD_INT 1
61845: PPUSH
61846: LD_VAR 0 2
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: PPUSH
61855: LD_INT 1
61857: PPUSH
61858: CALL_OW 3
61862: PPUSH
61863: CALL_OW 1
61867: ST_TO_ADDR
// tmp := 1 ;
61868: LD_ADDR_VAR 0 3
61872: PUSH
61873: LD_STRING 1
61875: ST_TO_ADDR
// end ; normal := normal & tmp ;
61876: LD_ADDR_VAR 0 5
61880: PUSH
61881: LD_VAR 0 5
61885: PUSH
61886: LD_VAR 0 3
61890: STR
61891: ST_TO_ADDR
// end ;
61892: GO 61792
61894: POP
61895: POP
// for i = 1 to hardcoreCounter do
61896: LD_ADDR_VAR 0 8
61900: PUSH
61901: DOUBLE
61902: LD_INT 1
61904: DEC
61905: ST_TO_ADDR
61906: LD_EXP 47
61910: PUSH
61911: FOR_TO
61912: IFFALSE 62017
// begin tmp := 0 ;
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: LD_STRING 0
61921: ST_TO_ADDR
// if result [ 2 ] then
61922: LD_VAR 0 2
61926: PUSH
61927: LD_INT 2
61929: ARRAY
61930: IFFALSE 61999
// if result [ 2 ] [ 1 ] = 100 + i then
61932: LD_VAR 0 2
61936: PUSH
61937: LD_INT 2
61939: ARRAY
61940: PUSH
61941: LD_INT 1
61943: ARRAY
61944: PUSH
61945: LD_INT 100
61947: PUSH
61948: LD_VAR 0 8
61952: PLUS
61953: EQUAL
61954: IFFALSE 61999
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
61956: LD_ADDR_VAR 0 2
61960: PUSH
61961: LD_VAR 0 2
61965: PPUSH
61966: LD_INT 2
61968: PPUSH
61969: LD_VAR 0 2
61973: PUSH
61974: LD_INT 2
61976: ARRAY
61977: PPUSH
61978: LD_INT 1
61980: PPUSH
61981: CALL_OW 3
61985: PPUSH
61986: CALL_OW 1
61990: ST_TO_ADDR
// tmp := 1 ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_STRING 1
61998: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
61999: LD_ADDR_VAR 0 6
62003: PUSH
62004: LD_VAR 0 6
62008: PUSH
62009: LD_VAR 0 3
62013: STR
62014: ST_TO_ADDR
// end ;
62015: GO 61911
62017: POP
62018: POP
// if isGameLoad then
62019: LD_VAR 0 1
62023: IFFALSE 62498
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62025: LD_ADDR_VAR 0 4
62029: PUSH
62030: LD_EXP 50
62034: PUSH
62035: LD_EXP 49
62039: PUSH
62040: LD_EXP 51
62044: PUSH
62045: LD_EXP 48
62049: PUSH
62050: LD_EXP 52
62054: PUSH
62055: LD_EXP 53
62059: PUSH
62060: LD_EXP 54
62064: PUSH
62065: LD_EXP 55
62069: PUSH
62070: LD_EXP 56
62074: PUSH
62075: LD_EXP 57
62079: PUSH
62080: LD_EXP 58
62084: PUSH
62085: LD_EXP 59
62089: PUSH
62090: LD_EXP 60
62094: PUSH
62095: LD_EXP 61
62099: PUSH
62100: LD_EXP 69
62104: PUSH
62105: LD_EXP 70
62109: PUSH
62110: LD_EXP 71
62114: PUSH
62115: LD_EXP 72
62119: PUSH
62120: LD_EXP 74
62124: PUSH
62125: LD_EXP 75
62129: PUSH
62130: LD_EXP 76
62134: PUSH
62135: LD_EXP 79
62139: PUSH
62140: LD_EXP 81
62144: PUSH
62145: LD_EXP 82
62149: PUSH
62150: LD_EXP 83
62154: PUSH
62155: LD_EXP 85
62159: PUSH
62160: LD_EXP 86
62164: PUSH
62165: LD_EXP 89
62169: PUSH
62170: LD_EXP 90
62174: PUSH
62175: LD_EXP 91
62179: PUSH
62180: LD_EXP 92
62184: PUSH
62185: LD_EXP 93
62189: PUSH
62190: LD_EXP 94
62194: PUSH
62195: LD_EXP 95
62199: PUSH
62200: LD_EXP 96
62204: PUSH
62205: LD_EXP 97
62209: PUSH
62210: LD_EXP 62
62214: PUSH
62215: LD_EXP 63
62219: PUSH
62220: LD_EXP 66
62224: PUSH
62225: LD_EXP 67
62229: PUSH
62230: LD_EXP 68
62234: PUSH
62235: LD_EXP 64
62239: PUSH
62240: LD_EXP 65
62244: PUSH
62245: LD_EXP 73
62249: PUSH
62250: LD_EXP 77
62254: PUSH
62255: LD_EXP 78
62259: PUSH
62260: LD_EXP 80
62264: PUSH
62265: LD_EXP 84
62269: PUSH
62270: LD_EXP 87
62274: PUSH
62275: LD_EXP 88
62279: PUSH
62280: LD_EXP 98
62284: PUSH
62285: LD_EXP 99
62289: PUSH
62290: LD_EXP 100
62294: PUSH
62295: LD_EXP 101
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: ST_TO_ADDR
// tmp :=  ;
62356: LD_ADDR_VAR 0 3
62360: PUSH
62361: LD_STRING 
62363: ST_TO_ADDR
// for i = 1 to normalCounter do
62364: LD_ADDR_VAR 0 8
62368: PUSH
62369: DOUBLE
62370: LD_INT 1
62372: DEC
62373: ST_TO_ADDR
62374: LD_EXP 46
62378: PUSH
62379: FOR_TO
62380: IFFALSE 62416
// begin if flags [ i ] then
62382: LD_VAR 0 4
62386: PUSH
62387: LD_VAR 0 8
62391: ARRAY
62392: IFFALSE 62414
// tmp := tmp & i & ; ;
62394: LD_ADDR_VAR 0 3
62398: PUSH
62399: LD_VAR 0 3
62403: PUSH
62404: LD_VAR 0 8
62408: STR
62409: PUSH
62410: LD_STRING ;
62412: STR
62413: ST_TO_ADDR
// end ;
62414: GO 62379
62416: POP
62417: POP
// for i = 1 to hardcoreCounter do
62418: LD_ADDR_VAR 0 8
62422: PUSH
62423: DOUBLE
62424: LD_INT 1
62426: DEC
62427: ST_TO_ADDR
62428: LD_EXP 47
62432: PUSH
62433: FOR_TO
62434: IFFALSE 62480
// begin if flags [ normalCounter + i ] then
62436: LD_VAR 0 4
62440: PUSH
62441: LD_EXP 46
62445: PUSH
62446: LD_VAR 0 8
62450: PLUS
62451: ARRAY
62452: IFFALSE 62478
// tmp := tmp & ( 100 + i ) & ; ;
62454: LD_ADDR_VAR 0 3
62458: PUSH
62459: LD_VAR 0 3
62463: PUSH
62464: LD_INT 100
62466: PUSH
62467: LD_VAR 0 8
62471: PLUS
62472: STR
62473: PUSH
62474: LD_STRING ;
62476: STR
62477: ST_TO_ADDR
// end ;
62478: GO 62433
62480: POP
62481: POP
// if tmp then
62482: LD_VAR 0 3
62486: IFFALSE 62498
// active := tmp ;
62488: LD_ADDR_VAR 0 7
62492: PUSH
62493: LD_VAR 0 3
62497: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62498: LD_STRING getStreamItemsFromMission("
62500: PUSH
62501: LD_VAR 0 5
62505: STR
62506: PUSH
62507: LD_STRING ","
62509: STR
62510: PUSH
62511: LD_VAR 0 6
62515: STR
62516: PUSH
62517: LD_STRING ","
62519: STR
62520: PUSH
62521: LD_VAR 0 7
62525: STR
62526: PUSH
62527: LD_STRING ")
62529: STR
62530: PPUSH
62531: CALL_OW 559
// end else
62535: GO 62544
// ToLua ( getStreamItemsFromMission("","","") ) ;
62537: LD_STRING getStreamItemsFromMission("","","")
62539: PPUSH
62540: CALL_OW 559
// end ;
62544: LD_VAR 0 2
62548: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62549: LD_EXP 45
62553: PUSH
62554: LD_EXP 50
62558: AND
62559: IFFALSE 62683
62561: GO 62563
62563: DISABLE
62564: LD_INT 0
62566: PPUSH
62567: PPUSH
// begin enable ;
62568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62569: LD_ADDR_VAR 0 2
62573: PUSH
62574: LD_INT 22
62576: PUSH
62577: LD_OWVAR 2
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 34
62591: PUSH
62592: LD_INT 7
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 34
62601: PUSH
62602: LD_INT 45
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 34
62611: PUSH
62612: LD_INT 28
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 34
62621: PUSH
62622: LD_INT 47
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PPUSH
62640: CALL_OW 69
62644: ST_TO_ADDR
// if not tmp then
62645: LD_VAR 0 2
62649: NOT
62650: IFFALSE 62654
// exit ;
62652: GO 62683
// for i in tmp do
62654: LD_ADDR_VAR 0 1
62658: PUSH
62659: LD_VAR 0 2
62663: PUSH
62664: FOR_IN
62665: IFFALSE 62681
// begin SetLives ( i , 0 ) ;
62667: LD_VAR 0 1
62671: PPUSH
62672: LD_INT 0
62674: PPUSH
62675: CALL_OW 234
// end ;
62679: GO 62664
62681: POP
62682: POP
// end ;
62683: PPOPN 2
62685: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
62686: LD_EXP 45
62690: PUSH
62691: LD_EXP 51
62695: AND
62696: IFFALSE 62780
62698: GO 62700
62700: DISABLE
62701: LD_INT 0
62703: PPUSH
62704: PPUSH
// begin enable ;
62705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
62706: LD_ADDR_VAR 0 2
62710: PUSH
62711: LD_INT 22
62713: PUSH
62714: LD_OWVAR 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 32
62725: PUSH
62726: LD_INT 3
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PPUSH
62737: CALL_OW 69
62741: ST_TO_ADDR
// if not tmp then
62742: LD_VAR 0 2
62746: NOT
62747: IFFALSE 62751
// exit ;
62749: GO 62780
// for i in tmp do
62751: LD_ADDR_VAR 0 1
62755: PUSH
62756: LD_VAR 0 2
62760: PUSH
62761: FOR_IN
62762: IFFALSE 62778
// begin SetLives ( i , 0 ) ;
62764: LD_VAR 0 1
62768: PPUSH
62769: LD_INT 0
62771: PPUSH
62772: CALL_OW 234
// end ;
62776: GO 62761
62778: POP
62779: POP
// end ;
62780: PPOPN 2
62782: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
62783: LD_EXP 45
62787: PUSH
62788: LD_EXP 48
62792: AND
62793: IFFALSE 62886
62795: GO 62797
62797: DISABLE
62798: LD_INT 0
62800: PPUSH
// begin enable ;
62801: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
62802: LD_ADDR_VAR 0 1
62806: PUSH
62807: LD_INT 22
62809: PUSH
62810: LD_OWVAR 2
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 25
62824: PUSH
62825: LD_INT 5
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_INT 25
62834: PUSH
62835: LD_INT 9
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 25
62844: PUSH
62845: LD_INT 8
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PPUSH
62862: CALL_OW 69
62866: PUSH
62867: FOR_IN
62868: IFFALSE 62884
// begin SetClass ( i , 1 ) ;
62870: LD_VAR 0 1
62874: PPUSH
62875: LD_INT 1
62877: PPUSH
62878: CALL_OW 336
// end ;
62882: GO 62867
62884: POP
62885: POP
// end ;
62886: PPOPN 1
62888: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
62889: LD_EXP 45
62893: PUSH
62894: LD_EXP 49
62898: AND
62899: PUSH
62900: LD_OWVAR 65
62904: PUSH
62905: LD_INT 7
62907: LESS
62908: AND
62909: IFFALSE 62923
62911: GO 62913
62913: DISABLE
// begin enable ;
62914: ENABLE
// game_speed := 7 ;
62915: LD_ADDR_OWVAR 65
62919: PUSH
62920: LD_INT 7
62922: ST_TO_ADDR
// end ;
62923: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
62924: LD_EXP 45
62928: PUSH
62929: LD_EXP 52
62933: AND
62934: IFFALSE 63136
62936: GO 62938
62938: DISABLE
62939: LD_INT 0
62941: PPUSH
62942: PPUSH
62943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62944: LD_ADDR_VAR 0 3
62948: PUSH
62949: LD_INT 81
62951: PUSH
62952: LD_OWVAR 2
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 21
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PPUSH
62975: CALL_OW 69
62979: ST_TO_ADDR
// if not tmp then
62980: LD_VAR 0 3
62984: NOT
62985: IFFALSE 62989
// exit ;
62987: GO 63136
// if tmp > 5 then
62989: LD_VAR 0 3
62993: PUSH
62994: LD_INT 5
62996: GREATER
62997: IFFALSE 63009
// k := 5 else
62999: LD_ADDR_VAR 0 2
63003: PUSH
63004: LD_INT 5
63006: ST_TO_ADDR
63007: GO 63019
// k := tmp ;
63009: LD_ADDR_VAR 0 2
63013: PUSH
63014: LD_VAR 0 3
63018: ST_TO_ADDR
// for i := 1 to k do
63019: LD_ADDR_VAR 0 1
63023: PUSH
63024: DOUBLE
63025: LD_INT 1
63027: DEC
63028: ST_TO_ADDR
63029: LD_VAR 0 2
63033: PUSH
63034: FOR_TO
63035: IFFALSE 63134
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63037: LD_VAR 0 3
63041: PUSH
63042: LD_VAR 0 1
63046: ARRAY
63047: PPUSH
63048: LD_VAR 0 1
63052: PUSH
63053: LD_INT 4
63055: MOD
63056: PUSH
63057: LD_INT 1
63059: PLUS
63060: PPUSH
63061: CALL_OW 259
63065: PUSH
63066: LD_INT 10
63068: LESS
63069: IFFALSE 63132
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63071: LD_VAR 0 3
63075: PUSH
63076: LD_VAR 0 1
63080: ARRAY
63081: PPUSH
63082: LD_VAR 0 1
63086: PUSH
63087: LD_INT 4
63089: MOD
63090: PUSH
63091: LD_INT 1
63093: PLUS
63094: PPUSH
63095: LD_VAR 0 3
63099: PUSH
63100: LD_VAR 0 1
63104: ARRAY
63105: PPUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_INT 4
63113: MOD
63114: PUSH
63115: LD_INT 1
63117: PLUS
63118: PPUSH
63119: CALL_OW 259
63123: PUSH
63124: LD_INT 1
63126: PLUS
63127: PPUSH
63128: CALL_OW 237
63132: GO 63034
63134: POP
63135: POP
// end ;
63136: PPOPN 3
63138: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63139: LD_EXP 45
63143: PUSH
63144: LD_EXP 53
63148: AND
63149: IFFALSE 63169
63151: GO 63153
63153: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63154: LD_INT 4
63156: PPUSH
63157: LD_OWVAR 2
63161: PPUSH
63162: LD_INT 0
63164: PPUSH
63165: CALL_OW 324
63169: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63170: LD_EXP 45
63174: PUSH
63175: LD_EXP 82
63179: AND
63180: IFFALSE 63200
63182: GO 63184
63184: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63185: LD_INT 19
63187: PPUSH
63188: LD_OWVAR 2
63192: PPUSH
63193: LD_INT 0
63195: PPUSH
63196: CALL_OW 324
63200: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63201: LD_EXP 45
63205: PUSH
63206: LD_EXP 54
63210: AND
63211: IFFALSE 63313
63213: GO 63215
63215: DISABLE
63216: LD_INT 0
63218: PPUSH
63219: PPUSH
// begin enable ;
63220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63221: LD_ADDR_VAR 0 2
63225: PUSH
63226: LD_INT 22
63228: PUSH
63229: LD_OWVAR 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: PUSH
63241: LD_INT 34
63243: PUSH
63244: LD_INT 11
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 34
63253: PUSH
63254: LD_INT 30
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PPUSH
63270: CALL_OW 69
63274: ST_TO_ADDR
// if not tmp then
63275: LD_VAR 0 2
63279: NOT
63280: IFFALSE 63284
// exit ;
63282: GO 63313
// for i in tmp do
63284: LD_ADDR_VAR 0 1
63288: PUSH
63289: LD_VAR 0 2
63293: PUSH
63294: FOR_IN
63295: IFFALSE 63311
// begin SetLives ( i , 0 ) ;
63297: LD_VAR 0 1
63301: PPUSH
63302: LD_INT 0
63304: PPUSH
63305: CALL_OW 234
// end ;
63309: GO 63294
63311: POP
63312: POP
// end ;
63313: PPOPN 2
63315: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63316: LD_EXP 45
63320: PUSH
63321: LD_EXP 55
63325: AND
63326: IFFALSE 63346
63328: GO 63330
63330: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63331: LD_INT 32
63333: PPUSH
63334: LD_OWVAR 2
63338: PPUSH
63339: LD_INT 0
63341: PPUSH
63342: CALL_OW 324
63346: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63347: LD_EXP 45
63351: PUSH
63352: LD_EXP 56
63356: AND
63357: IFFALSE 63538
63359: GO 63361
63361: DISABLE
63362: LD_INT 0
63364: PPUSH
63365: PPUSH
63366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63367: LD_ADDR_VAR 0 2
63371: PUSH
63372: LD_INT 22
63374: PUSH
63375: LD_OWVAR 2
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 33
63386: PUSH
63387: LD_INT 3
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PPUSH
63398: CALL_OW 69
63402: ST_TO_ADDR
// if not tmp then
63403: LD_VAR 0 2
63407: NOT
63408: IFFALSE 63412
// exit ;
63410: GO 63538
// side := 0 ;
63412: LD_ADDR_VAR 0 3
63416: PUSH
63417: LD_INT 0
63419: ST_TO_ADDR
// for i := 1 to 8 do
63420: LD_ADDR_VAR 0 1
63424: PUSH
63425: DOUBLE
63426: LD_INT 1
63428: DEC
63429: ST_TO_ADDR
63430: LD_INT 8
63432: PUSH
63433: FOR_TO
63434: IFFALSE 63482
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63436: LD_OWVAR 2
63440: PUSH
63441: LD_VAR 0 1
63445: NONEQUAL
63446: PUSH
63447: LD_OWVAR 2
63451: PPUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: CALL_OW 81
63461: PUSH
63462: LD_INT 2
63464: EQUAL
63465: AND
63466: IFFALSE 63480
// begin side := i ;
63468: LD_ADDR_VAR 0 3
63472: PUSH
63473: LD_VAR 0 1
63477: ST_TO_ADDR
// break ;
63478: GO 63482
// end ;
63480: GO 63433
63482: POP
63483: POP
// if not side then
63484: LD_VAR 0 3
63488: NOT
63489: IFFALSE 63493
// exit ;
63491: GO 63538
// for i := 1 to tmp do
63493: LD_ADDR_VAR 0 1
63497: PUSH
63498: DOUBLE
63499: LD_INT 1
63501: DEC
63502: ST_TO_ADDR
63503: LD_VAR 0 2
63507: PUSH
63508: FOR_TO
63509: IFFALSE 63536
// if Prob ( 60 ) then
63511: LD_INT 60
63513: PPUSH
63514: CALL_OW 13
63518: IFFALSE 63534
// SetSide ( i , side ) ;
63520: LD_VAR 0 1
63524: PPUSH
63525: LD_VAR 0 3
63529: PPUSH
63530: CALL_OW 235
63534: GO 63508
63536: POP
63537: POP
// end ;
63538: PPOPN 3
63540: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63541: LD_EXP 45
63545: PUSH
63546: LD_EXP 58
63550: AND
63551: IFFALSE 63670
63553: GO 63555
63555: DISABLE
63556: LD_INT 0
63558: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63559: LD_ADDR_VAR 0 1
63563: PUSH
63564: LD_INT 22
63566: PUSH
63567: LD_OWVAR 2
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 21
63578: PUSH
63579: LD_INT 1
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 3
63588: PUSH
63589: LD_INT 23
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PPUSH
63608: CALL_OW 69
63612: PUSH
63613: FOR_IN
63614: IFFALSE 63668
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
63616: LD_VAR 0 1
63620: PPUSH
63621: CALL_OW 257
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: LD_INT 2
63631: PUSH
63632: LD_INT 3
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: IN
63644: IFFALSE 63666
// SetClass ( un , rand ( 1 , 4 ) ) ;
63646: LD_VAR 0 1
63650: PPUSH
63651: LD_INT 1
63653: PPUSH
63654: LD_INT 4
63656: PPUSH
63657: CALL_OW 12
63661: PPUSH
63662: CALL_OW 336
63666: GO 63613
63668: POP
63669: POP
// end ;
63670: PPOPN 1
63672: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
63673: LD_EXP 45
63677: PUSH
63678: LD_EXP 57
63682: AND
63683: IFFALSE 63762
63685: GO 63687
63687: DISABLE
63688: LD_INT 0
63690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63691: LD_ADDR_VAR 0 1
63695: PUSH
63696: LD_INT 22
63698: PUSH
63699: LD_OWVAR 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 21
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PPUSH
63722: CALL_OW 69
63726: ST_TO_ADDR
// if not tmp then
63727: LD_VAR 0 1
63731: NOT
63732: IFFALSE 63736
// exit ;
63734: GO 63762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
63736: LD_VAR 0 1
63740: PUSH
63741: LD_INT 1
63743: PPUSH
63744: LD_VAR 0 1
63748: PPUSH
63749: CALL_OW 12
63753: ARRAY
63754: PPUSH
63755: LD_INT 100
63757: PPUSH
63758: CALL_OW 234
// end ;
63762: PPOPN 1
63764: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
63765: LD_EXP 45
63769: PUSH
63770: LD_EXP 59
63774: AND
63775: IFFALSE 63873
63777: GO 63779
63779: DISABLE
63780: LD_INT 0
63782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63783: LD_ADDR_VAR 0 1
63787: PUSH
63788: LD_INT 22
63790: PUSH
63791: LD_OWVAR 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 21
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PPUSH
63814: CALL_OW 69
63818: ST_TO_ADDR
// if not tmp then
63819: LD_VAR 0 1
63823: NOT
63824: IFFALSE 63828
// exit ;
63826: GO 63873
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
63828: LD_VAR 0 1
63832: PUSH
63833: LD_INT 1
63835: PPUSH
63836: LD_VAR 0 1
63840: PPUSH
63841: CALL_OW 12
63845: ARRAY
63846: PPUSH
63847: LD_INT 1
63849: PPUSH
63850: LD_INT 4
63852: PPUSH
63853: CALL_OW 12
63857: PPUSH
63858: LD_INT 3000
63860: PPUSH
63861: LD_INT 9000
63863: PPUSH
63864: CALL_OW 12
63868: PPUSH
63869: CALL_OW 492
// end ;
63873: PPOPN 1
63875: END
// every 0 0$1 trigger StreamModeActive and sDepot do
63876: LD_EXP 45
63880: PUSH
63881: LD_EXP 60
63885: AND
63886: IFFALSE 63906
63888: GO 63890
63890: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
63891: LD_INT 1
63893: PPUSH
63894: LD_OWVAR 2
63898: PPUSH
63899: LD_INT 0
63901: PPUSH
63902: CALL_OW 324
63906: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
63907: LD_EXP 45
63911: PUSH
63912: LD_EXP 61
63916: AND
63917: IFFALSE 64000
63919: GO 63921
63921: DISABLE
63922: LD_INT 0
63924: PPUSH
63925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63926: LD_ADDR_VAR 0 2
63930: PUSH
63931: LD_INT 22
63933: PUSH
63934: LD_OWVAR 2
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 21
63945: PUSH
63946: LD_INT 3
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PPUSH
63957: CALL_OW 69
63961: ST_TO_ADDR
// if not tmp then
63962: LD_VAR 0 2
63966: NOT
63967: IFFALSE 63971
// exit ;
63969: GO 64000
// for i in tmp do
63971: LD_ADDR_VAR 0 1
63975: PUSH
63976: LD_VAR 0 2
63980: PUSH
63981: FOR_IN
63982: IFFALSE 63998
// SetBLevel ( i , 10 ) ;
63984: LD_VAR 0 1
63988: PPUSH
63989: LD_INT 10
63991: PPUSH
63992: CALL_OW 241
63996: GO 63981
63998: POP
63999: POP
// end ;
64000: PPOPN 2
64002: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64003: LD_EXP 45
64007: PUSH
64008: LD_EXP 62
64012: AND
64013: IFFALSE 64124
64015: GO 64017
64017: DISABLE
64018: LD_INT 0
64020: PPUSH
64021: PPUSH
64022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64023: LD_ADDR_VAR 0 3
64027: PUSH
64028: LD_INT 22
64030: PUSH
64031: LD_OWVAR 2
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 25
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PPUSH
64054: CALL_OW 69
64058: ST_TO_ADDR
// if not tmp then
64059: LD_VAR 0 3
64063: NOT
64064: IFFALSE 64068
// exit ;
64066: GO 64124
// un := tmp [ rand ( 1 , tmp ) ] ;
64068: LD_ADDR_VAR 0 2
64072: PUSH
64073: LD_VAR 0 3
64077: PUSH
64078: LD_INT 1
64080: PPUSH
64081: LD_VAR 0 3
64085: PPUSH
64086: CALL_OW 12
64090: ARRAY
64091: ST_TO_ADDR
// if Crawls ( un ) then
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 318
64101: IFFALSE 64112
// ComWalk ( un ) ;
64103: LD_VAR 0 2
64107: PPUSH
64108: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64112: LD_VAR 0 2
64116: PPUSH
64117: LD_INT 5
64119: PPUSH
64120: CALL_OW 336
// end ;
64124: PPOPN 3
64126: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64127: LD_EXP 45
64131: PUSH
64132: LD_EXP 63
64136: AND
64137: PUSH
64138: LD_OWVAR 67
64142: PUSH
64143: LD_INT 4
64145: LESS
64146: AND
64147: IFFALSE 64166
64149: GO 64151
64151: DISABLE
// begin Difficulty := Difficulty + 1 ;
64152: LD_ADDR_OWVAR 67
64156: PUSH
64157: LD_OWVAR 67
64161: PUSH
64162: LD_INT 1
64164: PLUS
64165: ST_TO_ADDR
// end ;
64166: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64167: LD_EXP 45
64171: PUSH
64172: LD_EXP 64
64176: AND
64177: IFFALSE 64280
64179: GO 64181
64181: DISABLE
64182: LD_INT 0
64184: PPUSH
// begin for i := 1 to 5 do
64185: LD_ADDR_VAR 0 1
64189: PUSH
64190: DOUBLE
64191: LD_INT 1
64193: DEC
64194: ST_TO_ADDR
64195: LD_INT 5
64197: PUSH
64198: FOR_TO
64199: IFFALSE 64278
// begin uc_nation := nation_nature ;
64201: LD_ADDR_OWVAR 21
64205: PUSH
64206: LD_INT 0
64208: ST_TO_ADDR
// uc_side := 0 ;
64209: LD_ADDR_OWVAR 20
64213: PUSH
64214: LD_INT 0
64216: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64217: LD_ADDR_OWVAR 29
64221: PUSH
64222: LD_INT 12
64224: PUSH
64225: LD_INT 12
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: ST_TO_ADDR
// hc_agressivity := 20 ;
64232: LD_ADDR_OWVAR 35
64236: PUSH
64237: LD_INT 20
64239: ST_TO_ADDR
// hc_class := class_tiger ;
64240: LD_ADDR_OWVAR 28
64244: PUSH
64245: LD_INT 14
64247: ST_TO_ADDR
// hc_gallery :=  ;
64248: LD_ADDR_OWVAR 33
64252: PUSH
64253: LD_STRING 
64255: ST_TO_ADDR
// hc_name :=  ;
64256: LD_ADDR_OWVAR 26
64260: PUSH
64261: LD_STRING 
64263: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64264: CALL_OW 44
64268: PPUSH
64269: LD_INT 0
64271: PPUSH
64272: CALL_OW 51
// end ;
64276: GO 64198
64278: POP
64279: POP
// end ;
64280: PPOPN 1
64282: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64283: LD_EXP 45
64287: PUSH
64288: LD_EXP 65
64292: AND
64293: IFFALSE 64302
64295: GO 64297
64297: DISABLE
// StreamSibBomb ;
64298: CALL 64303 0 0
64302: END
// export function StreamSibBomb ; var i , x , y ; begin
64303: LD_INT 0
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
// result := false ;
64309: LD_ADDR_VAR 0 1
64313: PUSH
64314: LD_INT 0
64316: ST_TO_ADDR
// for i := 1 to 16 do
64317: LD_ADDR_VAR 0 2
64321: PUSH
64322: DOUBLE
64323: LD_INT 1
64325: DEC
64326: ST_TO_ADDR
64327: LD_INT 16
64329: PUSH
64330: FOR_TO
64331: IFFALSE 64530
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: LD_INT 10
64340: PUSH
64341: LD_INT 20
64343: PUSH
64344: LD_INT 30
64346: PUSH
64347: LD_INT 40
64349: PUSH
64350: LD_INT 50
64352: PUSH
64353: LD_INT 60
64355: PUSH
64356: LD_INT 70
64358: PUSH
64359: LD_INT 80
64361: PUSH
64362: LD_INT 90
64364: PUSH
64365: LD_INT 100
64367: PUSH
64368: LD_INT 110
64370: PUSH
64371: LD_INT 120
64373: PUSH
64374: LD_INT 130
64376: PUSH
64377: LD_INT 140
64379: PUSH
64380: LD_INT 150
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PPUSH
64403: LD_INT 15
64405: PPUSH
64406: CALL_OW 12
64410: ARRAY
64411: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64412: LD_ADDR_VAR 0 4
64416: PUSH
64417: LD_INT 10
64419: PUSH
64420: LD_INT 20
64422: PUSH
64423: LD_INT 30
64425: PUSH
64426: LD_INT 40
64428: PUSH
64429: LD_INT 50
64431: PUSH
64432: LD_INT 60
64434: PUSH
64435: LD_INT 70
64437: PUSH
64438: LD_INT 80
64440: PUSH
64441: LD_INT 90
64443: PUSH
64444: LD_INT 100
64446: PUSH
64447: LD_INT 110
64449: PUSH
64450: LD_INT 120
64452: PUSH
64453: LD_INT 130
64455: PUSH
64456: LD_INT 140
64458: PUSH
64459: LD_INT 150
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: PPUSH
64482: LD_INT 15
64484: PPUSH
64485: CALL_OW 12
64489: ARRAY
64490: ST_TO_ADDR
// if ValidHex ( x , y ) then
64491: LD_VAR 0 3
64495: PPUSH
64496: LD_VAR 0 4
64500: PPUSH
64501: CALL_OW 488
64505: IFFALSE 64528
// begin result := [ x , y ] ;
64507: LD_ADDR_VAR 0 1
64511: PUSH
64512: LD_VAR 0 3
64516: PUSH
64517: LD_VAR 0 4
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// break ;
64526: GO 64530
// end ; end ;
64528: GO 64330
64530: POP
64531: POP
// if result then
64532: LD_VAR 0 1
64536: IFFALSE 64596
// begin ToLua ( playSibBomb() ) ;
64538: LD_STRING playSibBomb()
64540: PPUSH
64541: CALL_OW 559
// wait ( 0 0$14 ) ;
64545: LD_INT 490
64547: PPUSH
64548: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64552: LD_VAR 0 1
64556: PUSH
64557: LD_INT 1
64559: ARRAY
64560: PPUSH
64561: LD_VAR 0 1
64565: PUSH
64566: LD_INT 2
64568: ARRAY
64569: PPUSH
64570: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64574: LD_VAR 0 1
64578: PUSH
64579: LD_INT 1
64581: ARRAY
64582: PPUSH
64583: LD_VAR 0 1
64587: PUSH
64588: LD_INT 2
64590: ARRAY
64591: PPUSH
64592: CALL_OW 429
// end ; end ;
64596: LD_VAR 0 1
64600: RET
// every 0 0$1 trigger StreamModeActive and sReset do
64601: LD_EXP 45
64605: PUSH
64606: LD_EXP 67
64610: AND
64611: IFFALSE 64623
64613: GO 64615
64615: DISABLE
// YouLost (  ) ;
64616: LD_STRING 
64618: PPUSH
64619: CALL_OW 104
64623: END
// every 0 0$1 trigger StreamModeActive and sFog do
64624: LD_EXP 45
64628: PUSH
64629: LD_EXP 66
64633: AND
64634: IFFALSE 64648
64636: GO 64638
64638: DISABLE
// FogOff ( your_side ) ;
64639: LD_OWVAR 2
64643: PPUSH
64644: CALL_OW 344
64648: END
// every 0 0$1 trigger StreamModeActive and sSun do
64649: LD_EXP 45
64653: PUSH
64654: LD_EXP 68
64658: AND
64659: IFFALSE 64687
64661: GO 64663
64663: DISABLE
// begin solar_recharge_percent := 0 ;
64664: LD_ADDR_OWVAR 79
64668: PUSH
64669: LD_INT 0
64671: ST_TO_ADDR
// wait ( 5 5$00 ) ;
64672: LD_INT 10500
64674: PPUSH
64675: CALL_OW 67
// solar_recharge_percent := 100 ;
64679: LD_ADDR_OWVAR 79
64683: PUSH
64684: LD_INT 100
64686: ST_TO_ADDR
// end ;
64687: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
64688: LD_EXP 45
64692: PUSH
64693: LD_EXP 69
64697: AND
64698: IFFALSE 64937
64700: GO 64702
64702: DISABLE
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
64707: PPUSH
// begin tmp := [ ] ;
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: EMPTY
64714: ST_TO_ADDR
// for i := 1 to 6 do
64715: LD_ADDR_VAR 0 1
64719: PUSH
64720: DOUBLE
64721: LD_INT 1
64723: DEC
64724: ST_TO_ADDR
64725: LD_INT 6
64727: PUSH
64728: FOR_TO
64729: IFFALSE 64834
// begin uc_nation := nation_nature ;
64731: LD_ADDR_OWVAR 21
64735: PUSH
64736: LD_INT 0
64738: ST_TO_ADDR
// uc_side := 0 ;
64739: LD_ADDR_OWVAR 20
64743: PUSH
64744: LD_INT 0
64746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64747: LD_ADDR_OWVAR 29
64751: PUSH
64752: LD_INT 12
64754: PUSH
64755: LD_INT 12
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// hc_agressivity := 20 ;
64762: LD_ADDR_OWVAR 35
64766: PUSH
64767: LD_INT 20
64769: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
64770: LD_ADDR_OWVAR 28
64774: PUSH
64775: LD_INT 17
64777: ST_TO_ADDR
// hc_gallery :=  ;
64778: LD_ADDR_OWVAR 33
64782: PUSH
64783: LD_STRING 
64785: ST_TO_ADDR
// hc_name :=  ;
64786: LD_ADDR_OWVAR 26
64790: PUSH
64791: LD_STRING 
64793: ST_TO_ADDR
// un := CreateHuman ;
64794: LD_ADDR_VAR 0 2
64798: PUSH
64799: CALL_OW 44
64803: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
64804: LD_VAR 0 2
64808: PPUSH
64809: LD_INT 1
64811: PPUSH
64812: CALL_OW 51
// tmp := tmp ^ un ;
64816: LD_ADDR_VAR 0 3
64820: PUSH
64821: LD_VAR 0 3
64825: PUSH
64826: LD_VAR 0 2
64830: ADD
64831: ST_TO_ADDR
// end ;
64832: GO 64728
64834: POP
64835: POP
// repeat wait ( 0 0$1 ) ;
64836: LD_INT 35
64838: PPUSH
64839: CALL_OW 67
// for un in tmp do
64843: LD_ADDR_VAR 0 2
64847: PUSH
64848: LD_VAR 0 3
64852: PUSH
64853: FOR_IN
64854: IFFALSE 64928
// begin if IsDead ( un ) then
64856: LD_VAR 0 2
64860: PPUSH
64861: CALL_OW 301
64865: IFFALSE 64885
// begin tmp := tmp diff un ;
64867: LD_ADDR_VAR 0 3
64871: PUSH
64872: LD_VAR 0 3
64876: PUSH
64877: LD_VAR 0 2
64881: DIFF
64882: ST_TO_ADDR
// continue ;
64883: GO 64853
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
64885: LD_VAR 0 2
64889: PPUSH
64890: LD_INT 3
64892: PUSH
64893: LD_INT 22
64895: PUSH
64896: LD_INT 0
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PPUSH
64907: CALL_OW 69
64911: PPUSH
64912: LD_VAR 0 2
64916: PPUSH
64917: CALL_OW 74
64921: PPUSH
64922: CALL_OW 115
// end ;
64926: GO 64853
64928: POP
64929: POP
// until not tmp ;
64930: LD_VAR 0 3
64934: NOT
64935: IFFALSE 64836
// end ;
64937: PPOPN 3
64939: END
// every 0 0$1 trigger StreamModeActive and sTroll do
64940: LD_EXP 45
64944: PUSH
64945: LD_EXP 70
64949: AND
64950: IFFALSE 65004
64952: GO 64954
64954: DISABLE
// begin ToLua ( displayTroll(); ) ;
64955: LD_STRING displayTroll();
64957: PPUSH
64958: CALL_OW 559
// wait ( 3 3$00 ) ;
64962: LD_INT 6300
64964: PPUSH
64965: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64969: LD_STRING hideTroll();
64971: PPUSH
64972: CALL_OW 559
// wait ( 1 1$00 ) ;
64976: LD_INT 2100
64978: PPUSH
64979: CALL_OW 67
// ToLua ( displayTroll(); ) ;
64983: LD_STRING displayTroll();
64985: PPUSH
64986: CALL_OW 559
// wait ( 1 1$00 ) ;
64990: LD_INT 2100
64992: PPUSH
64993: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64997: LD_STRING hideTroll();
64999: PPUSH
65000: CALL_OW 559
// end ;
65004: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65005: LD_EXP 45
65009: PUSH
65010: LD_EXP 71
65014: AND
65015: IFFALSE 65078
65017: GO 65019
65019: DISABLE
65020: LD_INT 0
65022: PPUSH
// begin p := 0 ;
65023: LD_ADDR_VAR 0 1
65027: PUSH
65028: LD_INT 0
65030: ST_TO_ADDR
// repeat game_speed := 1 ;
65031: LD_ADDR_OWVAR 65
65035: PUSH
65036: LD_INT 1
65038: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65039: LD_INT 35
65041: PPUSH
65042: CALL_OW 67
// p := p + 1 ;
65046: LD_ADDR_VAR 0 1
65050: PUSH
65051: LD_VAR 0 1
65055: PUSH
65056: LD_INT 1
65058: PLUS
65059: ST_TO_ADDR
// until p >= 60 ;
65060: LD_VAR 0 1
65064: PUSH
65065: LD_INT 60
65067: GREATEREQUAL
65068: IFFALSE 65031
// game_speed := 4 ;
65070: LD_ADDR_OWVAR 65
65074: PUSH
65075: LD_INT 4
65077: ST_TO_ADDR
// end ;
65078: PPOPN 1
65080: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65081: LD_EXP 45
65085: PUSH
65086: LD_EXP 72
65090: AND
65091: IFFALSE 65237
65093: GO 65095
65095: DISABLE
65096: LD_INT 0
65098: PPUSH
65099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65100: LD_ADDR_VAR 0 1
65104: PUSH
65105: LD_INT 22
65107: PUSH
65108: LD_OWVAR 2
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 2
65119: PUSH
65120: LD_INT 30
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 30
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PPUSH
65149: CALL_OW 69
65153: ST_TO_ADDR
// if not depot then
65154: LD_VAR 0 1
65158: NOT
65159: IFFALSE 65163
// exit ;
65161: GO 65237
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65163: LD_ADDR_VAR 0 2
65167: PUSH
65168: LD_VAR 0 1
65172: PUSH
65173: LD_INT 1
65175: PPUSH
65176: LD_VAR 0 1
65180: PPUSH
65181: CALL_OW 12
65185: ARRAY
65186: PPUSH
65187: CALL_OW 274
65191: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65192: LD_VAR 0 2
65196: PPUSH
65197: LD_INT 1
65199: PPUSH
65200: LD_INT 0
65202: PPUSH
65203: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65207: LD_VAR 0 2
65211: PPUSH
65212: LD_INT 2
65214: PPUSH
65215: LD_INT 0
65217: PPUSH
65218: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65222: LD_VAR 0 2
65226: PPUSH
65227: LD_INT 3
65229: PPUSH
65230: LD_INT 0
65232: PPUSH
65233: CALL_OW 277
// end ;
65237: PPOPN 2
65239: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65240: LD_EXP 45
65244: PUSH
65245: LD_EXP 73
65249: AND
65250: IFFALSE 65347
65252: GO 65254
65254: DISABLE
65255: LD_INT 0
65257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65258: LD_ADDR_VAR 0 1
65262: PUSH
65263: LD_INT 22
65265: PUSH
65266: LD_OWVAR 2
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 21
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 3
65287: PUSH
65288: LD_INT 23
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: LIST
65306: PPUSH
65307: CALL_OW 69
65311: ST_TO_ADDR
// if not tmp then
65312: LD_VAR 0 1
65316: NOT
65317: IFFALSE 65321
// exit ;
65319: GO 65347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65321: LD_VAR 0 1
65325: PUSH
65326: LD_INT 1
65328: PPUSH
65329: LD_VAR 0 1
65333: PPUSH
65334: CALL_OW 12
65338: ARRAY
65339: PPUSH
65340: LD_INT 200
65342: PPUSH
65343: CALL_OW 234
// end ;
65347: PPOPN 1
65349: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65350: LD_EXP 45
65354: PUSH
65355: LD_EXP 74
65359: AND
65360: IFFALSE 65439
65362: GO 65364
65364: DISABLE
65365: LD_INT 0
65367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65368: LD_ADDR_VAR 0 1
65372: PUSH
65373: LD_INT 22
65375: PUSH
65376: LD_OWVAR 2
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 21
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PPUSH
65399: CALL_OW 69
65403: ST_TO_ADDR
// if not tmp then
65404: LD_VAR 0 1
65408: NOT
65409: IFFALSE 65413
// exit ;
65411: GO 65439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65413: LD_VAR 0 1
65417: PUSH
65418: LD_INT 1
65420: PPUSH
65421: LD_VAR 0 1
65425: PPUSH
65426: CALL_OW 12
65430: ARRAY
65431: PPUSH
65432: LD_INT 60
65434: PPUSH
65435: CALL_OW 234
// end ;
65439: PPOPN 1
65441: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65442: LD_EXP 45
65446: PUSH
65447: LD_EXP 75
65451: AND
65452: IFFALSE 65551
65454: GO 65456
65456: DISABLE
65457: LD_INT 0
65459: PPUSH
65460: PPUSH
// begin enable ;
65461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65462: LD_ADDR_VAR 0 1
65466: PUSH
65467: LD_INT 22
65469: PUSH
65470: LD_OWVAR 2
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 61
65481: PUSH
65482: EMPTY
65483: LIST
65484: PUSH
65485: LD_INT 33
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: LIST
65499: PPUSH
65500: CALL_OW 69
65504: ST_TO_ADDR
// if not tmp then
65505: LD_VAR 0 1
65509: NOT
65510: IFFALSE 65514
// exit ;
65512: GO 65551
// for i in tmp do
65514: LD_ADDR_VAR 0 2
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: FOR_IN
65525: IFFALSE 65549
// if IsControledBy ( i ) then
65527: LD_VAR 0 2
65531: PPUSH
65532: CALL_OW 312
65536: IFFALSE 65547
// ComUnlink ( i ) ;
65538: LD_VAR 0 2
65542: PPUSH
65543: CALL_OW 136
65547: GO 65524
65549: POP
65550: POP
// end ;
65551: PPOPN 2
65553: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65554: LD_EXP 45
65558: PUSH
65559: LD_EXP 76
65563: AND
65564: IFFALSE 65704
65566: GO 65568
65568: DISABLE
65569: LD_INT 0
65571: PPUSH
65572: PPUSH
// begin ToLua ( displayPowell(); ) ;
65573: LD_STRING displayPowell();
65575: PPUSH
65576: CALL_OW 559
// uc_side := 0 ;
65580: LD_ADDR_OWVAR 20
65584: PUSH
65585: LD_INT 0
65587: ST_TO_ADDR
// uc_nation := 2 ;
65588: LD_ADDR_OWVAR 21
65592: PUSH
65593: LD_INT 2
65595: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
65596: LD_ADDR_OWVAR 37
65600: PUSH
65601: LD_INT 14
65603: ST_TO_ADDR
// vc_engine := engine_siberite ;
65604: LD_ADDR_OWVAR 39
65608: PUSH
65609: LD_INT 3
65611: ST_TO_ADDR
// vc_control := control_apeman ;
65612: LD_ADDR_OWVAR 38
65616: PUSH
65617: LD_INT 5
65619: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
65620: LD_ADDR_OWVAR 40
65624: PUSH
65625: LD_INT 29
65627: ST_TO_ADDR
// un := CreateVehicle ;
65628: LD_ADDR_VAR 0 2
65632: PUSH
65633: CALL_OW 45
65637: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65638: LD_VAR 0 2
65642: PPUSH
65643: LD_INT 1
65645: PPUSH
65646: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65650: LD_INT 35
65652: PPUSH
65653: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65657: LD_VAR 0 2
65661: PPUSH
65662: LD_INT 22
65664: PUSH
65665: LD_OWVAR 2
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PPUSH
65674: CALL_OW 69
65678: PPUSH
65679: LD_VAR 0 2
65683: PPUSH
65684: CALL_OW 74
65688: PPUSH
65689: CALL_OW 115
// until IsDead ( un ) ;
65693: LD_VAR 0 2
65697: PPUSH
65698: CALL_OW 301
65702: IFFALSE 65650
// end ;
65704: PPOPN 2
65706: END
// every 0 0$1 trigger StreamModeActive and sStu do
65707: LD_EXP 45
65711: PUSH
65712: LD_EXP 84
65716: AND
65717: IFFALSE 65733
65719: GO 65721
65721: DISABLE
// begin ToLua ( displayStucuk(); ) ;
65722: LD_STRING displayStucuk();
65724: PPUSH
65725: CALL_OW 559
// ResetFog ;
65729: CALL_OW 335
// end ;
65733: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
65734: LD_EXP 45
65738: PUSH
65739: LD_EXP 77
65743: AND
65744: IFFALSE 65885
65746: GO 65748
65748: DISABLE
65749: LD_INT 0
65751: PPUSH
65752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65753: LD_ADDR_VAR 0 2
65757: PUSH
65758: LD_INT 22
65760: PUSH
65761: LD_OWVAR 2
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 21
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PPUSH
65784: CALL_OW 69
65788: ST_TO_ADDR
// if not tmp then
65789: LD_VAR 0 2
65793: NOT
65794: IFFALSE 65798
// exit ;
65796: GO 65885
// un := tmp [ rand ( 1 , tmp ) ] ;
65798: LD_ADDR_VAR 0 1
65802: PUSH
65803: LD_VAR 0 2
65807: PUSH
65808: LD_INT 1
65810: PPUSH
65811: LD_VAR 0 2
65815: PPUSH
65816: CALL_OW 12
65820: ARRAY
65821: ST_TO_ADDR
// SetSide ( un , 0 ) ;
65822: LD_VAR 0 1
65826: PPUSH
65827: LD_INT 0
65829: PPUSH
65830: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
65834: LD_VAR 0 1
65838: PPUSH
65839: LD_OWVAR 3
65843: PUSH
65844: LD_VAR 0 1
65848: DIFF
65849: PPUSH
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 74
65859: PPUSH
65860: CALL_OW 115
// wait ( 0 0$20 ) ;
65864: LD_INT 700
65866: PPUSH
65867: CALL_OW 67
// SetSide ( un , your_side ) ;
65871: LD_VAR 0 1
65875: PPUSH
65876: LD_OWVAR 2
65880: PPUSH
65881: CALL_OW 235
// end ;
65885: PPOPN 2
65887: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
65888: LD_EXP 45
65892: PUSH
65893: LD_EXP 78
65897: AND
65898: IFFALSE 66004
65900: GO 65902
65902: DISABLE
65903: LD_INT 0
65905: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65906: LD_ADDR_VAR 0 1
65910: PUSH
65911: LD_INT 22
65913: PUSH
65914: LD_OWVAR 2
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 2
65925: PUSH
65926: LD_INT 30
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 30
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PPUSH
65955: CALL_OW 69
65959: ST_TO_ADDR
// if not depot then
65960: LD_VAR 0 1
65964: NOT
65965: IFFALSE 65969
// exit ;
65967: GO 66004
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
65969: LD_VAR 0 1
65973: PUSH
65974: LD_INT 1
65976: ARRAY
65977: PPUSH
65978: CALL_OW 250
65982: PPUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_INT 1
65990: ARRAY
65991: PPUSH
65992: CALL_OW 251
65996: PPUSH
65997: LD_INT 70
65999: PPUSH
66000: CALL_OW 495
// end ;
66004: PPOPN 1
66006: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66007: LD_EXP 45
66011: PUSH
66012: LD_EXP 79
66016: AND
66017: IFFALSE 66228
66019: GO 66021
66021: DISABLE
66022: LD_INT 0
66024: PPUSH
66025: PPUSH
66026: PPUSH
66027: PPUSH
66028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66029: LD_ADDR_VAR 0 5
66033: PUSH
66034: LD_INT 22
66036: PUSH
66037: LD_OWVAR 2
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 21
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PPUSH
66060: CALL_OW 69
66064: ST_TO_ADDR
// if not tmp then
66065: LD_VAR 0 5
66069: NOT
66070: IFFALSE 66074
// exit ;
66072: GO 66228
// for i in tmp do
66074: LD_ADDR_VAR 0 1
66078: PUSH
66079: LD_VAR 0 5
66083: PUSH
66084: FOR_IN
66085: IFFALSE 66226
// begin d := rand ( 0 , 5 ) ;
66087: LD_ADDR_VAR 0 4
66091: PUSH
66092: LD_INT 0
66094: PPUSH
66095: LD_INT 5
66097: PPUSH
66098: CALL_OW 12
66102: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66103: LD_ADDR_VAR 0 2
66107: PUSH
66108: LD_VAR 0 1
66112: PPUSH
66113: CALL_OW 250
66117: PPUSH
66118: LD_VAR 0 4
66122: PPUSH
66123: LD_INT 3
66125: PPUSH
66126: LD_INT 12
66128: PPUSH
66129: CALL_OW 12
66133: PPUSH
66134: CALL_OW 272
66138: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66139: LD_ADDR_VAR 0 3
66143: PUSH
66144: LD_VAR 0 1
66148: PPUSH
66149: CALL_OW 251
66153: PPUSH
66154: LD_VAR 0 4
66158: PPUSH
66159: LD_INT 3
66161: PPUSH
66162: LD_INT 12
66164: PPUSH
66165: CALL_OW 12
66169: PPUSH
66170: CALL_OW 273
66174: ST_TO_ADDR
// if ValidHex ( x , y ) then
66175: LD_VAR 0 2
66179: PPUSH
66180: LD_VAR 0 3
66184: PPUSH
66185: CALL_OW 488
66189: IFFALSE 66224
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66191: LD_VAR 0 1
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_VAR 0 3
66205: PPUSH
66206: LD_INT 3
66208: PPUSH
66209: LD_INT 6
66211: PPUSH
66212: CALL_OW 12
66216: PPUSH
66217: LD_INT 1
66219: PPUSH
66220: CALL_OW 483
// end ;
66224: GO 66084
66226: POP
66227: POP
// end ;
66228: PPOPN 5
66230: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66231: LD_EXP 45
66235: PUSH
66236: LD_EXP 80
66240: AND
66241: IFFALSE 66335
66243: GO 66245
66245: DISABLE
66246: LD_INT 0
66248: PPUSH
66249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66250: LD_ADDR_VAR 0 2
66254: PUSH
66255: LD_INT 22
66257: PUSH
66258: LD_OWVAR 2
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 32
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 21
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: PPUSH
66292: CALL_OW 69
66296: ST_TO_ADDR
// if not tmp then
66297: LD_VAR 0 2
66301: NOT
66302: IFFALSE 66306
// exit ;
66304: GO 66335
// for i in tmp do
66306: LD_ADDR_VAR 0 1
66310: PUSH
66311: LD_VAR 0 2
66315: PUSH
66316: FOR_IN
66317: IFFALSE 66333
// SetFuel ( i , 0 ) ;
66319: LD_VAR 0 1
66323: PPUSH
66324: LD_INT 0
66326: PPUSH
66327: CALL_OW 240
66331: GO 66316
66333: POP
66334: POP
// end ;
66335: PPOPN 2
66337: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66338: LD_EXP 45
66342: PUSH
66343: LD_EXP 81
66347: AND
66348: IFFALSE 66414
66350: GO 66352
66352: DISABLE
66353: LD_INT 0
66355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66356: LD_ADDR_VAR 0 1
66360: PUSH
66361: LD_INT 22
66363: PUSH
66364: LD_OWVAR 2
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 30
66375: PUSH
66376: LD_INT 29
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PPUSH
66387: CALL_OW 69
66391: ST_TO_ADDR
// if not tmp then
66392: LD_VAR 0 1
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 66414
// DestroyUnit ( tmp [ 1 ] ) ;
66401: LD_VAR 0 1
66405: PUSH
66406: LD_INT 1
66408: ARRAY
66409: PPUSH
66410: CALL_OW 65
// end ;
66414: PPOPN 1
66416: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66417: LD_EXP 45
66421: PUSH
66422: LD_EXP 83
66426: AND
66427: IFFALSE 66556
66429: GO 66431
66431: DISABLE
66432: LD_INT 0
66434: PPUSH
// begin uc_side := 0 ;
66435: LD_ADDR_OWVAR 20
66439: PUSH
66440: LD_INT 0
66442: ST_TO_ADDR
// uc_nation := nation_arabian ;
66443: LD_ADDR_OWVAR 21
66447: PUSH
66448: LD_INT 2
66450: ST_TO_ADDR
// hc_gallery :=  ;
66451: LD_ADDR_OWVAR 33
66455: PUSH
66456: LD_STRING 
66458: ST_TO_ADDR
// hc_name :=  ;
66459: LD_ADDR_OWVAR 26
66463: PUSH
66464: LD_STRING 
66466: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66467: LD_INT 1
66469: PPUSH
66470: LD_INT 11
66472: PPUSH
66473: LD_INT 10
66475: PPUSH
66476: CALL_OW 380
// un := CreateHuman ;
66480: LD_ADDR_VAR 0 1
66484: PUSH
66485: CALL_OW 44
66489: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_INT 1
66497: PPUSH
66498: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66502: LD_INT 35
66504: PPUSH
66505: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66509: LD_VAR 0 1
66513: PPUSH
66514: LD_INT 22
66516: PUSH
66517: LD_OWVAR 2
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PPUSH
66526: CALL_OW 69
66530: PPUSH
66531: LD_VAR 0 1
66535: PPUSH
66536: CALL_OW 74
66540: PPUSH
66541: CALL_OW 115
// until IsDead ( un ) ;
66545: LD_VAR 0 1
66549: PPUSH
66550: CALL_OW 301
66554: IFFALSE 66502
// end ;
66556: PPOPN 1
66558: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66559: LD_EXP 45
66563: PUSH
66564: LD_EXP 85
66568: AND
66569: IFFALSE 66581
66571: GO 66573
66573: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66574: LD_STRING earthquake(getX(game), 0, 32)
66576: PPUSH
66577: CALL_OW 559
66581: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66582: LD_EXP 45
66586: PUSH
66587: LD_EXP 86
66591: AND
66592: IFFALSE 66683
66594: GO 66596
66596: DISABLE
66597: LD_INT 0
66599: PPUSH
// begin enable ;
66600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
66601: LD_ADDR_VAR 0 1
66605: PUSH
66606: LD_INT 22
66608: PUSH
66609: LD_OWVAR 2
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 21
66620: PUSH
66621: LD_INT 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 33
66630: PUSH
66631: LD_INT 3
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PPUSH
66643: CALL_OW 69
66647: ST_TO_ADDR
// if not tmp then
66648: LD_VAR 0 1
66652: NOT
66653: IFFALSE 66657
// exit ;
66655: GO 66683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66657: LD_VAR 0 1
66661: PUSH
66662: LD_INT 1
66664: PPUSH
66665: LD_VAR 0 1
66669: PPUSH
66670: CALL_OW 12
66674: ARRAY
66675: PPUSH
66676: LD_INT 1
66678: PPUSH
66679: CALL_OW 234
// end ;
66683: PPOPN 1
66685: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
66686: LD_EXP 45
66690: PUSH
66691: LD_EXP 87
66695: AND
66696: IFFALSE 66837
66698: GO 66700
66700: DISABLE
66701: LD_INT 0
66703: PPUSH
66704: PPUSH
66705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66706: LD_ADDR_VAR 0 3
66710: PUSH
66711: LD_INT 22
66713: PUSH
66714: LD_OWVAR 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 25
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: PPUSH
66737: CALL_OW 69
66741: ST_TO_ADDR
// if not tmp then
66742: LD_VAR 0 3
66746: NOT
66747: IFFALSE 66751
// exit ;
66749: GO 66837
// un := tmp [ rand ( 1 , tmp ) ] ;
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 3
66760: PUSH
66761: LD_INT 1
66763: PPUSH
66764: LD_VAR 0 3
66768: PPUSH
66769: CALL_OW 12
66773: ARRAY
66774: ST_TO_ADDR
// if Crawls ( un ) then
66775: LD_VAR 0 2
66779: PPUSH
66780: CALL_OW 318
66784: IFFALSE 66795
// ComWalk ( un ) ;
66786: LD_VAR 0 2
66790: PPUSH
66791: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
66795: LD_VAR 0 2
66799: PPUSH
66800: LD_INT 9
66802: PPUSH
66803: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
66807: LD_INT 28
66809: PPUSH
66810: LD_OWVAR 2
66814: PPUSH
66815: LD_INT 2
66817: PPUSH
66818: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
66822: LD_INT 29
66824: PPUSH
66825: LD_OWVAR 2
66829: PPUSH
66830: LD_INT 2
66832: PPUSH
66833: CALL_OW 322
// end ;
66837: PPOPN 3
66839: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
66840: LD_EXP 45
66844: PUSH
66845: LD_EXP 88
66849: AND
66850: IFFALSE 66961
66852: GO 66854
66854: DISABLE
66855: LD_INT 0
66857: PPUSH
66858: PPUSH
66859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66860: LD_ADDR_VAR 0 3
66864: PUSH
66865: LD_INT 22
66867: PUSH
66868: LD_OWVAR 2
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 25
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PPUSH
66891: CALL_OW 69
66895: ST_TO_ADDR
// if not tmp then
66896: LD_VAR 0 3
66900: NOT
66901: IFFALSE 66905
// exit ;
66903: GO 66961
// un := tmp [ rand ( 1 , tmp ) ] ;
66905: LD_ADDR_VAR 0 2
66909: PUSH
66910: LD_VAR 0 3
66914: PUSH
66915: LD_INT 1
66917: PPUSH
66918: LD_VAR 0 3
66922: PPUSH
66923: CALL_OW 12
66927: ARRAY
66928: ST_TO_ADDR
// if Crawls ( un ) then
66929: LD_VAR 0 2
66933: PPUSH
66934: CALL_OW 318
66938: IFFALSE 66949
// ComWalk ( un ) ;
66940: LD_VAR 0 2
66944: PPUSH
66945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66949: LD_VAR 0 2
66953: PPUSH
66954: LD_INT 8
66956: PPUSH
66957: CALL_OW 336
// end ;
66961: PPOPN 3
66963: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
66964: LD_EXP 45
66968: PUSH
66969: LD_EXP 89
66973: AND
66974: IFFALSE 67118
66976: GO 66978
66978: DISABLE
66979: LD_INT 0
66981: PPUSH
66982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
66983: LD_ADDR_VAR 0 2
66987: PUSH
66988: LD_INT 22
66990: PUSH
66991: LD_OWVAR 2
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 21
67002: PUSH
67003: LD_INT 2
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 2
67012: PUSH
67013: LD_INT 34
67015: PUSH
67016: LD_INT 12
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 34
67025: PUSH
67026: LD_INT 51
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 34
67035: PUSH
67036: LD_INT 32
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: LIST
67053: PPUSH
67054: CALL_OW 69
67058: ST_TO_ADDR
// if not tmp then
67059: LD_VAR 0 2
67063: NOT
67064: IFFALSE 67068
// exit ;
67066: GO 67118
// for i in tmp do
67068: LD_ADDR_VAR 0 1
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: FOR_IN
67079: IFFALSE 67116
// if GetCargo ( i , mat_artifact ) = 0 then
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_INT 4
67088: PPUSH
67089: CALL_OW 289
67093: PUSH
67094: LD_INT 0
67096: EQUAL
67097: IFFALSE 67114
// SetCargo ( i , mat_siberit , 100 ) ;
67099: LD_VAR 0 1
67103: PPUSH
67104: LD_INT 3
67106: PPUSH
67107: LD_INT 100
67109: PPUSH
67110: CALL_OW 290
67114: GO 67078
67116: POP
67117: POP
// end ;
67118: PPOPN 2
67120: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67121: LD_EXP 45
67125: PUSH
67126: LD_EXP 90
67130: AND
67131: IFFALSE 67314
67133: GO 67135
67135: DISABLE
67136: LD_INT 0
67138: PPUSH
67139: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67140: LD_ADDR_VAR 0 2
67144: PUSH
67145: LD_INT 22
67147: PUSH
67148: LD_OWVAR 2
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PPUSH
67157: CALL_OW 69
67161: ST_TO_ADDR
// if not tmp then
67162: LD_VAR 0 2
67166: NOT
67167: IFFALSE 67171
// exit ;
67169: GO 67314
// for i := 1 to 2 do
67171: LD_ADDR_VAR 0 1
67175: PUSH
67176: DOUBLE
67177: LD_INT 1
67179: DEC
67180: ST_TO_ADDR
67181: LD_INT 2
67183: PUSH
67184: FOR_TO
67185: IFFALSE 67312
// begin uc_side := your_side ;
67187: LD_ADDR_OWVAR 20
67191: PUSH
67192: LD_OWVAR 2
67196: ST_TO_ADDR
// uc_nation := nation_american ;
67197: LD_ADDR_OWVAR 21
67201: PUSH
67202: LD_INT 1
67204: ST_TO_ADDR
// vc_chassis := us_morphling ;
67205: LD_ADDR_OWVAR 37
67209: PUSH
67210: LD_INT 5
67212: ST_TO_ADDR
// vc_engine := engine_siberite ;
67213: LD_ADDR_OWVAR 39
67217: PUSH
67218: LD_INT 3
67220: ST_TO_ADDR
// vc_control := control_computer ;
67221: LD_ADDR_OWVAR 38
67225: PUSH
67226: LD_INT 3
67228: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67229: LD_ADDR_OWVAR 40
67233: PUSH
67234: LD_INT 10
67236: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67237: LD_VAR 0 2
67241: PUSH
67242: LD_INT 1
67244: ARRAY
67245: PPUSH
67246: CALL_OW 310
67250: NOT
67251: IFFALSE 67298
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67253: CALL_OW 45
67257: PPUSH
67258: LD_VAR 0 2
67262: PUSH
67263: LD_INT 1
67265: ARRAY
67266: PPUSH
67267: CALL_OW 250
67271: PPUSH
67272: LD_VAR 0 2
67276: PUSH
67277: LD_INT 1
67279: ARRAY
67280: PPUSH
67281: CALL_OW 251
67285: PPUSH
67286: LD_INT 12
67288: PPUSH
67289: LD_INT 1
67291: PPUSH
67292: CALL_OW 50
67296: GO 67310
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67298: CALL_OW 45
67302: PPUSH
67303: LD_INT 1
67305: PPUSH
67306: CALL_OW 51
// end ;
67310: GO 67184
67312: POP
67313: POP
// end ;
67314: PPOPN 2
67316: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67317: LD_EXP 45
67321: PUSH
67322: LD_EXP 91
67326: AND
67327: IFFALSE 67549
67329: GO 67331
67331: DISABLE
67332: LD_INT 0
67334: PPUSH
67335: PPUSH
67336: PPUSH
67337: PPUSH
67338: PPUSH
67339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67340: LD_ADDR_VAR 0 6
67344: PUSH
67345: LD_INT 22
67347: PUSH
67348: LD_OWVAR 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 21
67359: PUSH
67360: LD_INT 1
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 23
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: LIST
67388: PPUSH
67389: CALL_OW 69
67393: ST_TO_ADDR
// if not tmp then
67394: LD_VAR 0 6
67398: NOT
67399: IFFALSE 67403
// exit ;
67401: GO 67549
// s1 := rand ( 1 , 4 ) ;
67403: LD_ADDR_VAR 0 2
67407: PUSH
67408: LD_INT 1
67410: PPUSH
67411: LD_INT 4
67413: PPUSH
67414: CALL_OW 12
67418: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67419: LD_ADDR_VAR 0 4
67423: PUSH
67424: LD_VAR 0 6
67428: PUSH
67429: LD_INT 1
67431: ARRAY
67432: PPUSH
67433: LD_VAR 0 2
67437: PPUSH
67438: CALL_OW 259
67442: ST_TO_ADDR
// if s1 = 1 then
67443: LD_VAR 0 2
67447: PUSH
67448: LD_INT 1
67450: EQUAL
67451: IFFALSE 67471
// s2 := rand ( 2 , 4 ) else
67453: LD_ADDR_VAR 0 3
67457: PUSH
67458: LD_INT 2
67460: PPUSH
67461: LD_INT 4
67463: PPUSH
67464: CALL_OW 12
67468: ST_TO_ADDR
67469: GO 67479
// s2 := 1 ;
67471: LD_ADDR_VAR 0 3
67475: PUSH
67476: LD_INT 1
67478: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67479: LD_ADDR_VAR 0 5
67483: PUSH
67484: LD_VAR 0 6
67488: PUSH
67489: LD_INT 1
67491: ARRAY
67492: PPUSH
67493: LD_VAR 0 3
67497: PPUSH
67498: CALL_OW 259
67502: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67503: LD_VAR 0 6
67507: PUSH
67508: LD_INT 1
67510: ARRAY
67511: PPUSH
67512: LD_VAR 0 2
67516: PPUSH
67517: LD_VAR 0 5
67521: PPUSH
67522: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67526: LD_VAR 0 6
67530: PUSH
67531: LD_INT 1
67533: ARRAY
67534: PPUSH
67535: LD_VAR 0 3
67539: PPUSH
67540: LD_VAR 0 4
67544: PPUSH
67545: CALL_OW 237
// end ;
67549: PPOPN 6
67551: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67552: LD_EXP 45
67556: PUSH
67557: LD_EXP 92
67561: AND
67562: IFFALSE 67641
67564: GO 67566
67566: DISABLE
67567: LD_INT 0
67569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67570: LD_ADDR_VAR 0 1
67574: PUSH
67575: LD_INT 22
67577: PUSH
67578: LD_OWVAR 2
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 30
67589: PUSH
67590: LD_INT 3
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PPUSH
67601: CALL_OW 69
67605: ST_TO_ADDR
// if not tmp then
67606: LD_VAR 0 1
67610: NOT
67611: IFFALSE 67615
// exit ;
67613: GO 67641
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67615: LD_VAR 0 1
67619: PUSH
67620: LD_INT 1
67622: PPUSH
67623: LD_VAR 0 1
67627: PPUSH
67628: CALL_OW 12
67632: ARRAY
67633: PPUSH
67634: LD_INT 1
67636: PPUSH
67637: CALL_OW 234
// end ;
67641: PPOPN 1
67643: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
67644: LD_EXP 45
67648: PUSH
67649: LD_EXP 93
67653: AND
67654: IFFALSE 67766
67656: GO 67658
67658: DISABLE
67659: LD_INT 0
67661: PPUSH
67662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
67663: LD_ADDR_VAR 0 2
67667: PUSH
67668: LD_INT 22
67670: PUSH
67671: LD_OWVAR 2
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 30
67685: PUSH
67686: LD_INT 27
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 30
67695: PUSH
67696: LD_INT 26
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 30
67705: PUSH
67706: LD_INT 28
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PPUSH
67723: CALL_OW 69
67727: ST_TO_ADDR
// if not tmp then
67728: LD_VAR 0 2
67732: NOT
67733: IFFALSE 67737
// exit ;
67735: GO 67766
// for i in tmp do
67737: LD_ADDR_VAR 0 1
67741: PUSH
67742: LD_VAR 0 2
67746: PUSH
67747: FOR_IN
67748: IFFALSE 67764
// SetLives ( i , 1 ) ;
67750: LD_VAR 0 1
67754: PPUSH
67755: LD_INT 1
67757: PPUSH
67758: CALL_OW 234
67762: GO 67747
67764: POP
67765: POP
// end ;
67766: PPOPN 2
67768: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
67769: LD_EXP 45
67773: PUSH
67774: LD_EXP 94
67778: AND
67779: IFFALSE 68066
67781: GO 67783
67783: DISABLE
67784: LD_INT 0
67786: PPUSH
67787: PPUSH
67788: PPUSH
// begin i := rand ( 1 , 7 ) ;
67789: LD_ADDR_VAR 0 1
67793: PUSH
67794: LD_INT 1
67796: PPUSH
67797: LD_INT 7
67799: PPUSH
67800: CALL_OW 12
67804: ST_TO_ADDR
// case i of 1 :
67805: LD_VAR 0 1
67809: PUSH
67810: LD_INT 1
67812: DOUBLE
67813: EQUAL
67814: IFTRUE 67818
67816: GO 67828
67818: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
67819: LD_STRING earthquake(getX(game), 0, 32)
67821: PPUSH
67822: CALL_OW 559
67826: GO 68066
67828: LD_INT 2
67830: DOUBLE
67831: EQUAL
67832: IFTRUE 67836
67834: GO 67850
67836: POP
// begin ToLua ( displayStucuk(); ) ;
67837: LD_STRING displayStucuk();
67839: PPUSH
67840: CALL_OW 559
// ResetFog ;
67844: CALL_OW 335
// end ; 3 :
67848: GO 68066
67850: LD_INT 3
67852: DOUBLE
67853: EQUAL
67854: IFTRUE 67858
67856: GO 67962
67858: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67859: LD_ADDR_VAR 0 2
67863: PUSH
67864: LD_INT 22
67866: PUSH
67867: LD_OWVAR 2
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 25
67878: PUSH
67879: LD_INT 1
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PPUSH
67890: CALL_OW 69
67894: ST_TO_ADDR
// if not tmp then
67895: LD_VAR 0 2
67899: NOT
67900: IFFALSE 67904
// exit ;
67902: GO 68066
// un := tmp [ rand ( 1 , tmp ) ] ;
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: LD_VAR 0 2
67913: PUSH
67914: LD_INT 1
67916: PPUSH
67917: LD_VAR 0 2
67921: PPUSH
67922: CALL_OW 12
67926: ARRAY
67927: ST_TO_ADDR
// if Crawls ( un ) then
67928: LD_VAR 0 3
67932: PPUSH
67933: CALL_OW 318
67937: IFFALSE 67948
// ComWalk ( un ) ;
67939: LD_VAR 0 3
67943: PPUSH
67944: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67948: LD_VAR 0 3
67952: PPUSH
67953: LD_INT 8
67955: PPUSH
67956: CALL_OW 336
// end ; 4 :
67960: GO 68066
67962: LD_INT 4
67964: DOUBLE
67965: EQUAL
67966: IFTRUE 67970
67968: GO 68044
67970: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67971: LD_ADDR_VAR 0 2
67975: PUSH
67976: LD_INT 22
67978: PUSH
67979: LD_OWVAR 2
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 30
67990: PUSH
67991: LD_INT 29
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PPUSH
68002: CALL_OW 69
68006: ST_TO_ADDR
// if not tmp then
68007: LD_VAR 0 2
68011: NOT
68012: IFFALSE 68016
// exit ;
68014: GO 68066
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68016: LD_VAR 0 2
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PPUSH
68025: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68029: LD_VAR 0 2
68033: PUSH
68034: LD_INT 1
68036: ARRAY
68037: PPUSH
68038: CALL_OW 65
// end ; 5 .. 7 :
68042: GO 68066
68044: LD_INT 5
68046: DOUBLE
68047: GREATEREQUAL
68048: IFFALSE 68056
68050: LD_INT 7
68052: DOUBLE
68053: LESSEQUAL
68054: IFTRUE 68058
68056: GO 68065
68058: POP
// StreamSibBomb ; end ;
68059: CALL 64303 0 0
68063: GO 68066
68065: POP
// end ;
68066: PPOPN 3
68068: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68069: LD_EXP 45
68073: PUSH
68074: LD_EXP 95
68078: AND
68079: IFFALSE 68235
68081: GO 68083
68083: DISABLE
68084: LD_INT 0
68086: PPUSH
68087: PPUSH
68088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68089: LD_ADDR_VAR 0 2
68093: PUSH
68094: LD_INT 81
68096: PUSH
68097: LD_OWVAR 2
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: LD_INT 21
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 21
68121: PUSH
68122: LD_INT 2
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PPUSH
68138: CALL_OW 69
68142: ST_TO_ADDR
// if not tmp then
68143: LD_VAR 0 2
68147: NOT
68148: IFFALSE 68152
// exit ;
68150: GO 68235
// p := 0 ;
68152: LD_ADDR_VAR 0 3
68156: PUSH
68157: LD_INT 0
68159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68160: LD_INT 35
68162: PPUSH
68163: CALL_OW 67
// p := p + 1 ;
68167: LD_ADDR_VAR 0 3
68171: PUSH
68172: LD_VAR 0 3
68176: PUSH
68177: LD_INT 1
68179: PLUS
68180: ST_TO_ADDR
// for i in tmp do
68181: LD_ADDR_VAR 0 1
68185: PUSH
68186: LD_VAR 0 2
68190: PUSH
68191: FOR_IN
68192: IFFALSE 68223
// if GetLives ( i ) < 1000 then
68194: LD_VAR 0 1
68198: PPUSH
68199: CALL_OW 256
68203: PUSH
68204: LD_INT 1000
68206: LESS
68207: IFFALSE 68221
// SetLives ( i , 1000 ) ;
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_INT 1000
68216: PPUSH
68217: CALL_OW 234
68221: GO 68191
68223: POP
68224: POP
// until p > 20 ;
68225: LD_VAR 0 3
68229: PUSH
68230: LD_INT 20
68232: GREATER
68233: IFFALSE 68160
// end ;
68235: PPOPN 3
68237: END
// every 0 0$1 trigger StreamModeActive and sTime do
68238: LD_EXP 45
68242: PUSH
68243: LD_EXP 96
68247: AND
68248: IFFALSE 68283
68250: GO 68252
68252: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68253: LD_INT 28
68255: PPUSH
68256: LD_OWVAR 2
68260: PPUSH
68261: LD_INT 2
68263: PPUSH
68264: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68268: LD_INT 30
68270: PPUSH
68271: LD_OWVAR 2
68275: PPUSH
68276: LD_INT 2
68278: PPUSH
68279: CALL_OW 322
// end ;
68283: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68284: LD_EXP 45
68288: PUSH
68289: LD_EXP 97
68293: AND
68294: IFFALSE 68415
68296: GO 68298
68298: DISABLE
68299: LD_INT 0
68301: PPUSH
68302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_INT 22
68310: PUSH
68311: LD_OWVAR 2
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 21
68322: PUSH
68323: LD_INT 1
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 3
68332: PUSH
68333: LD_INT 23
68335: PUSH
68336: LD_INT 0
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 69
68356: ST_TO_ADDR
// if not tmp then
68357: LD_VAR 0 2
68361: NOT
68362: IFFALSE 68366
// exit ;
68364: GO 68415
// for i in tmp do
68366: LD_ADDR_VAR 0 1
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: FOR_IN
68377: IFFALSE 68413
// begin if Crawls ( i ) then
68379: LD_VAR 0 1
68383: PPUSH
68384: CALL_OW 318
68388: IFFALSE 68399
// ComWalk ( i ) ;
68390: LD_VAR 0 1
68394: PPUSH
68395: CALL_OW 138
// SetClass ( i , 2 ) ;
68399: LD_VAR 0 1
68403: PPUSH
68404: LD_INT 2
68406: PPUSH
68407: CALL_OW 336
// end ;
68411: GO 68376
68413: POP
68414: POP
// end ;
68415: PPOPN 2
68417: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68418: LD_EXP 45
68422: PUSH
68423: LD_EXP 98
68427: AND
68428: IFFALSE 68716
68430: GO 68432
68432: DISABLE
68433: LD_INT 0
68435: PPUSH
68436: PPUSH
68437: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68438: LD_OWVAR 2
68442: PPUSH
68443: LD_INT 9
68445: PPUSH
68446: LD_INT 1
68448: PPUSH
68449: LD_INT 1
68451: PPUSH
68452: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68456: LD_INT 9
68458: PPUSH
68459: LD_OWVAR 2
68463: PPUSH
68464: CALL_OW 343
// uc_side := 9 ;
68468: LD_ADDR_OWVAR 20
68472: PUSH
68473: LD_INT 9
68475: ST_TO_ADDR
// uc_nation := 2 ;
68476: LD_ADDR_OWVAR 21
68480: PUSH
68481: LD_INT 2
68483: ST_TO_ADDR
// hc_name := Dark Warrior ;
68484: LD_ADDR_OWVAR 26
68488: PUSH
68489: LD_STRING Dark Warrior
68491: ST_TO_ADDR
// hc_gallery :=  ;
68492: LD_ADDR_OWVAR 33
68496: PUSH
68497: LD_STRING 
68499: ST_TO_ADDR
// hc_noskilllimit := true ;
68500: LD_ADDR_OWVAR 76
68504: PUSH
68505: LD_INT 1
68507: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68508: LD_ADDR_OWVAR 31
68512: PUSH
68513: LD_INT 30
68515: PUSH
68516: LD_INT 30
68518: PUSH
68519: LD_INT 30
68521: PUSH
68522: LD_INT 30
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: ST_TO_ADDR
// un := CreateHuman ;
68531: LD_ADDR_VAR 0 3
68535: PUSH
68536: CALL_OW 44
68540: ST_TO_ADDR
// hc_noskilllimit := false ;
68541: LD_ADDR_OWVAR 76
68545: PUSH
68546: LD_INT 0
68548: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68549: LD_VAR 0 3
68553: PPUSH
68554: LD_INT 1
68556: PPUSH
68557: CALL_OW 51
// ToLua ( playRanger() ) ;
68561: LD_STRING playRanger()
68563: PPUSH
68564: CALL_OW 559
// p := 0 ;
68568: LD_ADDR_VAR 0 2
68572: PUSH
68573: LD_INT 0
68575: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68576: LD_INT 35
68578: PPUSH
68579: CALL_OW 67
// p := p + 1 ;
68583: LD_ADDR_VAR 0 2
68587: PUSH
68588: LD_VAR 0 2
68592: PUSH
68593: LD_INT 1
68595: PLUS
68596: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
68597: LD_VAR 0 3
68601: PPUSH
68602: CALL_OW 256
68606: PUSH
68607: LD_INT 1000
68609: LESS
68610: IFFALSE 68624
// SetLives ( un , 1000 ) ;
68612: LD_VAR 0 3
68616: PPUSH
68617: LD_INT 1000
68619: PPUSH
68620: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
68624: LD_VAR 0 3
68628: PPUSH
68629: LD_INT 81
68631: PUSH
68632: LD_OWVAR 2
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 91
68643: PUSH
68644: LD_VAR 0 3
68648: PUSH
68649: LD_INT 30
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: LIST
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PPUSH
68661: CALL_OW 69
68665: PPUSH
68666: LD_VAR 0 3
68670: PPUSH
68671: CALL_OW 74
68675: PPUSH
68676: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
68680: LD_VAR 0 2
68684: PUSH
68685: LD_INT 80
68687: GREATER
68688: PUSH
68689: LD_VAR 0 3
68693: PPUSH
68694: CALL_OW 301
68698: OR
68699: IFFALSE 68576
// if un then
68701: LD_VAR 0 3
68705: IFFALSE 68716
// RemoveUnit ( un ) ;
68707: LD_VAR 0 3
68711: PPUSH
68712: CALL_OW 64
// end ;
68716: PPOPN 3
68718: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
68719: LD_EXP 99
68723: IFFALSE 68839
68725: GO 68727
68727: DISABLE
68728: LD_INT 0
68730: PPUSH
68731: PPUSH
68732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68733: LD_ADDR_VAR 0 2
68737: PUSH
68738: LD_INT 81
68740: PUSH
68741: LD_OWVAR 2
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 21
68752: PUSH
68753: LD_INT 1
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PPUSH
68764: CALL_OW 69
68768: ST_TO_ADDR
// ToLua ( playComputer() ) ;
68769: LD_STRING playComputer()
68771: PPUSH
68772: CALL_OW 559
// if not tmp then
68776: LD_VAR 0 2
68780: NOT
68781: IFFALSE 68785
// exit ;
68783: GO 68839
// for i in tmp do
68785: LD_ADDR_VAR 0 1
68789: PUSH
68790: LD_VAR 0 2
68794: PUSH
68795: FOR_IN
68796: IFFALSE 68837
// for j := 1 to 4 do
68798: LD_ADDR_VAR 0 3
68802: PUSH
68803: DOUBLE
68804: LD_INT 1
68806: DEC
68807: ST_TO_ADDR
68808: LD_INT 4
68810: PUSH
68811: FOR_TO
68812: IFFALSE 68833
// SetSkill ( i , j , 10 ) ;
68814: LD_VAR 0 1
68818: PPUSH
68819: LD_VAR 0 3
68823: PPUSH
68824: LD_INT 10
68826: PPUSH
68827: CALL_OW 237
68831: GO 68811
68833: POP
68834: POP
68835: GO 68795
68837: POP
68838: POP
// end ;
68839: PPOPN 3
68841: END
// every 0 0$1 trigger s30 do var i , tmp ;
68842: LD_EXP 100
68846: IFFALSE 68915
68848: GO 68850
68850: DISABLE
68851: LD_INT 0
68853: PPUSH
68854: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68855: LD_ADDR_VAR 0 2
68859: PUSH
68860: LD_INT 22
68862: PUSH
68863: LD_OWVAR 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PPUSH
68872: CALL_OW 69
68876: ST_TO_ADDR
// if not tmp then
68877: LD_VAR 0 2
68881: NOT
68882: IFFALSE 68886
// exit ;
68884: GO 68915
// for i in tmp do
68886: LD_ADDR_VAR 0 1
68890: PUSH
68891: LD_VAR 0 2
68895: PUSH
68896: FOR_IN
68897: IFFALSE 68913
// SetLives ( i , 300 ) ;
68899: LD_VAR 0 1
68903: PPUSH
68904: LD_INT 300
68906: PPUSH
68907: CALL_OW 234
68911: GO 68896
68913: POP
68914: POP
// end ;
68915: PPOPN 2
68917: END
// every 0 0$1 trigger s60 do var i , tmp ;
68918: LD_EXP 101
68922: IFFALSE 68991
68924: GO 68926
68926: DISABLE
68927: LD_INT 0
68929: PPUSH
68930: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68931: LD_ADDR_VAR 0 2
68935: PUSH
68936: LD_INT 22
68938: PUSH
68939: LD_OWVAR 2
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PPUSH
68948: CALL_OW 69
68952: ST_TO_ADDR
// if not tmp then
68953: LD_VAR 0 2
68957: NOT
68958: IFFALSE 68962
// exit ;
68960: GO 68991
// for i in tmp do
68962: LD_ADDR_VAR 0 1
68966: PUSH
68967: LD_VAR 0 2
68971: PUSH
68972: FOR_IN
68973: IFFALSE 68989
// SetLives ( i , 600 ) ;
68975: LD_VAR 0 1
68979: PPUSH
68980: LD_INT 600
68982: PPUSH
68983: CALL_OW 234
68987: GO 68972
68989: POP
68990: POP
// end ;
68991: PPOPN 2
68993: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68994: LD_INT 0
68996: PPUSH
// case cmd of 301 :
68997: LD_VAR 0 1
69001: PUSH
69002: LD_INT 301
69004: DOUBLE
69005: EQUAL
69006: IFTRUE 69010
69008: GO 69042
69010: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69011: LD_VAR 0 6
69015: PPUSH
69016: LD_VAR 0 7
69020: PPUSH
69021: LD_VAR 0 8
69025: PPUSH
69026: LD_VAR 0 4
69030: PPUSH
69031: LD_VAR 0 5
69035: PPUSH
69036: CALL 70251 0 5
69040: GO 69163
69042: LD_INT 302
69044: DOUBLE
69045: EQUAL
69046: IFTRUE 69050
69048: GO 69087
69050: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69051: LD_VAR 0 6
69055: PPUSH
69056: LD_VAR 0 7
69060: PPUSH
69061: LD_VAR 0 8
69065: PPUSH
69066: LD_VAR 0 9
69070: PPUSH
69071: LD_VAR 0 4
69075: PPUSH
69076: LD_VAR 0 5
69080: PPUSH
69081: CALL 70342 0 6
69085: GO 69163
69087: LD_INT 303
69089: DOUBLE
69090: EQUAL
69091: IFTRUE 69095
69093: GO 69132
69095: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69096: LD_VAR 0 6
69100: PPUSH
69101: LD_VAR 0 7
69105: PPUSH
69106: LD_VAR 0 8
69110: PPUSH
69111: LD_VAR 0 9
69115: PPUSH
69116: LD_VAR 0 4
69120: PPUSH
69121: LD_VAR 0 5
69125: PPUSH
69126: CALL 69168 0 6
69130: GO 69163
69132: LD_INT 304
69134: DOUBLE
69135: EQUAL
69136: IFTRUE 69140
69138: GO 69162
69140: POP
// hHackTeleport ( unit , x , y ) ; end ;
69141: LD_VAR 0 2
69145: PPUSH
69146: LD_VAR 0 4
69150: PPUSH
69151: LD_VAR 0 5
69155: PPUSH
69156: CALL 70935 0 3
69160: GO 69163
69162: POP
// end ;
69163: LD_VAR 0 12
69167: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69168: LD_INT 0
69170: PPUSH
69171: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69172: LD_VAR 0 1
69176: PUSH
69177: LD_INT 1
69179: LESS
69180: PUSH
69181: LD_VAR 0 1
69185: PUSH
69186: LD_INT 3
69188: GREATER
69189: OR
69190: PUSH
69191: LD_VAR 0 5
69195: PPUSH
69196: LD_VAR 0 6
69200: PPUSH
69201: CALL_OW 428
69205: OR
69206: IFFALSE 69210
// exit ;
69208: GO 69938
// uc_side := your_side ;
69210: LD_ADDR_OWVAR 20
69214: PUSH
69215: LD_OWVAR 2
69219: ST_TO_ADDR
// uc_nation := nation ;
69220: LD_ADDR_OWVAR 21
69224: PUSH
69225: LD_VAR 0 1
69229: ST_TO_ADDR
// bc_level = 1 ;
69230: LD_ADDR_OWVAR 43
69234: PUSH
69235: LD_INT 1
69237: ST_TO_ADDR
// case btype of 1 :
69238: LD_VAR 0 2
69242: PUSH
69243: LD_INT 1
69245: DOUBLE
69246: EQUAL
69247: IFTRUE 69251
69249: GO 69262
69251: POP
// bc_type := b_depot ; 2 :
69252: LD_ADDR_OWVAR 42
69256: PUSH
69257: LD_INT 0
69259: ST_TO_ADDR
69260: GO 69882
69262: LD_INT 2
69264: DOUBLE
69265: EQUAL
69266: IFTRUE 69270
69268: GO 69281
69270: POP
// bc_type := b_warehouse ; 3 :
69271: LD_ADDR_OWVAR 42
69275: PUSH
69276: LD_INT 1
69278: ST_TO_ADDR
69279: GO 69882
69281: LD_INT 3
69283: DOUBLE
69284: EQUAL
69285: IFTRUE 69289
69287: GO 69300
69289: POP
// bc_type := b_lab ; 4 .. 9 :
69290: LD_ADDR_OWVAR 42
69294: PUSH
69295: LD_INT 6
69297: ST_TO_ADDR
69298: GO 69882
69300: LD_INT 4
69302: DOUBLE
69303: GREATEREQUAL
69304: IFFALSE 69312
69306: LD_INT 9
69308: DOUBLE
69309: LESSEQUAL
69310: IFTRUE 69314
69312: GO 69374
69314: POP
// begin bc_type := b_lab_half ;
69315: LD_ADDR_OWVAR 42
69319: PUSH
69320: LD_INT 7
69322: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69323: LD_ADDR_OWVAR 44
69327: PUSH
69328: LD_INT 10
69330: PUSH
69331: LD_INT 11
69333: PUSH
69334: LD_INT 12
69336: PUSH
69337: LD_INT 15
69339: PUSH
69340: LD_INT 14
69342: PUSH
69343: LD_INT 13
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: PUSH
69354: LD_VAR 0 2
69358: PUSH
69359: LD_INT 3
69361: MINUS
69362: ARRAY
69363: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
69364: LD_ADDR_OWVAR 45
69368: PUSH
69369: LD_INT 9
69371: ST_TO_ADDR
// end ; 10 .. 13 :
69372: GO 69882
69374: LD_INT 10
69376: DOUBLE
69377: GREATEREQUAL
69378: IFFALSE 69386
69380: LD_INT 13
69382: DOUBLE
69383: LESSEQUAL
69384: IFTRUE 69388
69386: GO 69465
69388: POP
// begin bc_type := b_lab_full ;
69389: LD_ADDR_OWVAR 42
69393: PUSH
69394: LD_INT 8
69396: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69397: LD_ADDR_OWVAR 44
69401: PUSH
69402: LD_INT 10
69404: PUSH
69405: LD_INT 12
69407: PUSH
69408: LD_INT 14
69410: PUSH
69411: LD_INT 13
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: PUSH
69420: LD_VAR 0 2
69424: PUSH
69425: LD_INT 9
69427: MINUS
69428: ARRAY
69429: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69430: LD_ADDR_OWVAR 45
69434: PUSH
69435: LD_INT 11
69437: PUSH
69438: LD_INT 15
69440: PUSH
69441: LD_INT 12
69443: PUSH
69444: LD_INT 15
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: PUSH
69453: LD_VAR 0 2
69457: PUSH
69458: LD_INT 9
69460: MINUS
69461: ARRAY
69462: ST_TO_ADDR
// end ; 14 :
69463: GO 69882
69465: LD_INT 14
69467: DOUBLE
69468: EQUAL
69469: IFTRUE 69473
69471: GO 69484
69473: POP
// bc_type := b_workshop ; 15 :
69474: LD_ADDR_OWVAR 42
69478: PUSH
69479: LD_INT 2
69481: ST_TO_ADDR
69482: GO 69882
69484: LD_INT 15
69486: DOUBLE
69487: EQUAL
69488: IFTRUE 69492
69490: GO 69503
69492: POP
// bc_type := b_factory ; 16 :
69493: LD_ADDR_OWVAR 42
69497: PUSH
69498: LD_INT 3
69500: ST_TO_ADDR
69501: GO 69882
69503: LD_INT 16
69505: DOUBLE
69506: EQUAL
69507: IFTRUE 69511
69509: GO 69522
69511: POP
// bc_type := b_ext_gun ; 17 :
69512: LD_ADDR_OWVAR 42
69516: PUSH
69517: LD_INT 17
69519: ST_TO_ADDR
69520: GO 69882
69522: LD_INT 17
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69558
69530: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69531: LD_ADDR_OWVAR 42
69535: PUSH
69536: LD_INT 19
69538: PUSH
69539: LD_INT 23
69541: PUSH
69542: LD_INT 19
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: PUSH
69550: LD_VAR 0 1
69554: ARRAY
69555: ST_TO_ADDR
69556: GO 69882
69558: LD_INT 18
69560: DOUBLE
69561: EQUAL
69562: IFTRUE 69566
69564: GO 69577
69566: POP
// bc_type := b_ext_radar ; 19 :
69567: LD_ADDR_OWVAR 42
69571: PUSH
69572: LD_INT 20
69574: ST_TO_ADDR
69575: GO 69882
69577: LD_INT 19
69579: DOUBLE
69580: EQUAL
69581: IFTRUE 69585
69583: GO 69596
69585: POP
// bc_type := b_ext_radio ; 20 :
69586: LD_ADDR_OWVAR 42
69590: PUSH
69591: LD_INT 22
69593: ST_TO_ADDR
69594: GO 69882
69596: LD_INT 20
69598: DOUBLE
69599: EQUAL
69600: IFTRUE 69604
69602: GO 69615
69604: POP
// bc_type := b_ext_siberium ; 21 :
69605: LD_ADDR_OWVAR 42
69609: PUSH
69610: LD_INT 21
69612: ST_TO_ADDR
69613: GO 69882
69615: LD_INT 21
69617: DOUBLE
69618: EQUAL
69619: IFTRUE 69623
69621: GO 69634
69623: POP
// bc_type := b_ext_computer ; 22 :
69624: LD_ADDR_OWVAR 42
69628: PUSH
69629: LD_INT 24
69631: ST_TO_ADDR
69632: GO 69882
69634: LD_INT 22
69636: DOUBLE
69637: EQUAL
69638: IFTRUE 69642
69640: GO 69653
69642: POP
// bc_type := b_ext_track ; 23 :
69643: LD_ADDR_OWVAR 42
69647: PUSH
69648: LD_INT 16
69650: ST_TO_ADDR
69651: GO 69882
69653: LD_INT 23
69655: DOUBLE
69656: EQUAL
69657: IFTRUE 69661
69659: GO 69672
69661: POP
// bc_type := b_ext_laser ; 24 :
69662: LD_ADDR_OWVAR 42
69666: PUSH
69667: LD_INT 25
69669: ST_TO_ADDR
69670: GO 69882
69672: LD_INT 24
69674: DOUBLE
69675: EQUAL
69676: IFTRUE 69680
69678: GO 69691
69680: POP
// bc_type := b_control_tower ; 25 :
69681: LD_ADDR_OWVAR 42
69685: PUSH
69686: LD_INT 36
69688: ST_TO_ADDR
69689: GO 69882
69691: LD_INT 25
69693: DOUBLE
69694: EQUAL
69695: IFTRUE 69699
69697: GO 69710
69699: POP
// bc_type := b_breastwork ; 26 :
69700: LD_ADDR_OWVAR 42
69704: PUSH
69705: LD_INT 31
69707: ST_TO_ADDR
69708: GO 69882
69710: LD_INT 26
69712: DOUBLE
69713: EQUAL
69714: IFTRUE 69718
69716: GO 69729
69718: POP
// bc_type := b_bunker ; 27 :
69719: LD_ADDR_OWVAR 42
69723: PUSH
69724: LD_INT 32
69726: ST_TO_ADDR
69727: GO 69882
69729: LD_INT 27
69731: DOUBLE
69732: EQUAL
69733: IFTRUE 69737
69735: GO 69748
69737: POP
// bc_type := b_turret ; 28 :
69738: LD_ADDR_OWVAR 42
69742: PUSH
69743: LD_INT 33
69745: ST_TO_ADDR
69746: GO 69882
69748: LD_INT 28
69750: DOUBLE
69751: EQUAL
69752: IFTRUE 69756
69754: GO 69767
69756: POP
// bc_type := b_armoury ; 29 :
69757: LD_ADDR_OWVAR 42
69761: PUSH
69762: LD_INT 4
69764: ST_TO_ADDR
69765: GO 69882
69767: LD_INT 29
69769: DOUBLE
69770: EQUAL
69771: IFTRUE 69775
69773: GO 69786
69775: POP
// bc_type := b_barracks ; 30 :
69776: LD_ADDR_OWVAR 42
69780: PUSH
69781: LD_INT 5
69783: ST_TO_ADDR
69784: GO 69882
69786: LD_INT 30
69788: DOUBLE
69789: EQUAL
69790: IFTRUE 69794
69792: GO 69805
69794: POP
// bc_type := b_solar_power ; 31 :
69795: LD_ADDR_OWVAR 42
69799: PUSH
69800: LD_INT 27
69802: ST_TO_ADDR
69803: GO 69882
69805: LD_INT 31
69807: DOUBLE
69808: EQUAL
69809: IFTRUE 69813
69811: GO 69824
69813: POP
// bc_type := b_oil_power ; 32 :
69814: LD_ADDR_OWVAR 42
69818: PUSH
69819: LD_INT 26
69821: ST_TO_ADDR
69822: GO 69882
69824: LD_INT 32
69826: DOUBLE
69827: EQUAL
69828: IFTRUE 69832
69830: GO 69843
69832: POP
// bc_type := b_siberite_power ; 33 :
69833: LD_ADDR_OWVAR 42
69837: PUSH
69838: LD_INT 28
69840: ST_TO_ADDR
69841: GO 69882
69843: LD_INT 33
69845: DOUBLE
69846: EQUAL
69847: IFTRUE 69851
69849: GO 69862
69851: POP
// bc_type := b_oil_mine ; 34 :
69852: LD_ADDR_OWVAR 42
69856: PUSH
69857: LD_INT 29
69859: ST_TO_ADDR
69860: GO 69882
69862: LD_INT 34
69864: DOUBLE
69865: EQUAL
69866: IFTRUE 69870
69868: GO 69881
69870: POP
// bc_type := b_siberite_mine ; end ;
69871: LD_ADDR_OWVAR 42
69875: PUSH
69876: LD_INT 30
69878: ST_TO_ADDR
69879: GO 69882
69881: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
69882: LD_ADDR_VAR 0 8
69886: PUSH
69887: LD_VAR 0 5
69891: PPUSH
69892: LD_VAR 0 6
69896: PPUSH
69897: LD_VAR 0 3
69901: PPUSH
69902: CALL_OW 47
69906: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
69907: LD_OWVAR 42
69911: PUSH
69912: LD_INT 32
69914: PUSH
69915: LD_INT 33
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: IN
69922: IFFALSE 69938
// PlaceWeaponTurret ( b , weapon ) ;
69924: LD_VAR 0 8
69928: PPUSH
69929: LD_VAR 0 4
69933: PPUSH
69934: CALL_OW 431
// end ;
69938: LD_VAR 0 7
69942: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
69943: LD_INT 0
69945: PPUSH
69946: PPUSH
69947: PPUSH
69948: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69949: LD_ADDR_VAR 0 4
69953: PUSH
69954: LD_INT 22
69956: PUSH
69957: LD_OWVAR 2
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 30
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 30
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PPUSH
69998: CALL_OW 69
70002: ST_TO_ADDR
// if not tmp then
70003: LD_VAR 0 4
70007: NOT
70008: IFFALSE 70012
// exit ;
70010: GO 70071
// for i in tmp do
70012: LD_ADDR_VAR 0 2
70016: PUSH
70017: LD_VAR 0 4
70021: PUSH
70022: FOR_IN
70023: IFFALSE 70069
// for j = 1 to 3 do
70025: LD_ADDR_VAR 0 3
70029: PUSH
70030: DOUBLE
70031: LD_INT 1
70033: DEC
70034: ST_TO_ADDR
70035: LD_INT 3
70037: PUSH
70038: FOR_TO
70039: IFFALSE 70065
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70041: LD_VAR 0 2
70045: PPUSH
70046: CALL_OW 274
70050: PPUSH
70051: LD_VAR 0 3
70055: PPUSH
70056: LD_INT 99999
70058: PPUSH
70059: CALL_OW 277
70063: GO 70038
70065: POP
70066: POP
70067: GO 70022
70069: POP
70070: POP
// end ;
70071: LD_VAR 0 1
70075: RET
// export function hHackSetLevel10 ; var i , j ; begin
70076: LD_INT 0
70078: PPUSH
70079: PPUSH
70080: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70081: LD_ADDR_VAR 0 2
70085: PUSH
70086: LD_INT 21
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PPUSH
70096: CALL_OW 69
70100: PUSH
70101: FOR_IN
70102: IFFALSE 70154
// if IsSelected ( i ) then
70104: LD_VAR 0 2
70108: PPUSH
70109: CALL_OW 306
70113: IFFALSE 70152
// begin for j := 1 to 4 do
70115: LD_ADDR_VAR 0 3
70119: PUSH
70120: DOUBLE
70121: LD_INT 1
70123: DEC
70124: ST_TO_ADDR
70125: LD_INT 4
70127: PUSH
70128: FOR_TO
70129: IFFALSE 70150
// SetSkill ( i , j , 10 ) ;
70131: LD_VAR 0 2
70135: PPUSH
70136: LD_VAR 0 3
70140: PPUSH
70141: LD_INT 10
70143: PPUSH
70144: CALL_OW 237
70148: GO 70128
70150: POP
70151: POP
// end ;
70152: GO 70101
70154: POP
70155: POP
// end ;
70156: LD_VAR 0 1
70160: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70161: LD_INT 0
70163: PPUSH
70164: PPUSH
70165: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70166: LD_ADDR_VAR 0 2
70170: PUSH
70171: LD_INT 22
70173: PUSH
70174: LD_OWVAR 2
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 21
70185: PUSH
70186: LD_INT 1
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PPUSH
70197: CALL_OW 69
70201: PUSH
70202: FOR_IN
70203: IFFALSE 70244
// begin for j := 1 to 4 do
70205: LD_ADDR_VAR 0 3
70209: PUSH
70210: DOUBLE
70211: LD_INT 1
70213: DEC
70214: ST_TO_ADDR
70215: LD_INT 4
70217: PUSH
70218: FOR_TO
70219: IFFALSE 70240
// SetSkill ( i , j , 10 ) ;
70221: LD_VAR 0 2
70225: PPUSH
70226: LD_VAR 0 3
70230: PPUSH
70231: LD_INT 10
70233: PPUSH
70234: CALL_OW 237
70238: GO 70218
70240: POP
70241: POP
// end ;
70242: GO 70202
70244: POP
70245: POP
// end ;
70246: LD_VAR 0 1
70250: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70251: LD_INT 0
70253: PPUSH
// uc_side := your_side ;
70254: LD_ADDR_OWVAR 20
70258: PUSH
70259: LD_OWVAR 2
70263: ST_TO_ADDR
// uc_nation := nation ;
70264: LD_ADDR_OWVAR 21
70268: PUSH
70269: LD_VAR 0 1
70273: ST_TO_ADDR
// InitHc ;
70274: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70278: LD_INT 0
70280: PPUSH
70281: LD_VAR 0 2
70285: PPUSH
70286: LD_VAR 0 3
70290: PPUSH
70291: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70295: LD_VAR 0 4
70299: PPUSH
70300: LD_VAR 0 5
70304: PPUSH
70305: CALL_OW 428
70309: PUSH
70310: LD_INT 0
70312: EQUAL
70313: IFFALSE 70337
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70315: CALL_OW 44
70319: PPUSH
70320: LD_VAR 0 4
70324: PPUSH
70325: LD_VAR 0 5
70329: PPUSH
70330: LD_INT 1
70332: PPUSH
70333: CALL_OW 48
// end ;
70337: LD_VAR 0 6
70341: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70342: LD_INT 0
70344: PPUSH
70345: PPUSH
// uc_side := your_side ;
70346: LD_ADDR_OWVAR 20
70350: PUSH
70351: LD_OWVAR 2
70355: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70356: LD_VAR 0 1
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: LD_INT 4
70372: PUSH
70373: LD_INT 5
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: IN
70383: IFFALSE 70395
// uc_nation := nation_american else
70385: LD_ADDR_OWVAR 21
70389: PUSH
70390: LD_INT 1
70392: ST_TO_ADDR
70393: GO 70438
// if chassis in [ 11 , 12 , 13 , 14 ] then
70395: LD_VAR 0 1
70399: PUSH
70400: LD_INT 11
70402: PUSH
70403: LD_INT 12
70405: PUSH
70406: LD_INT 13
70408: PUSH
70409: LD_INT 14
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: IN
70418: IFFALSE 70430
// uc_nation := nation_arabian else
70420: LD_ADDR_OWVAR 21
70424: PUSH
70425: LD_INT 2
70427: ST_TO_ADDR
70428: GO 70438
// uc_nation := nation_russian ;
70430: LD_ADDR_OWVAR 21
70434: PUSH
70435: LD_INT 3
70437: ST_TO_ADDR
// vc_chassis := chassis ;
70438: LD_ADDR_OWVAR 37
70442: PUSH
70443: LD_VAR 0 1
70447: ST_TO_ADDR
// vc_engine := engine ;
70448: LD_ADDR_OWVAR 39
70452: PUSH
70453: LD_VAR 0 2
70457: ST_TO_ADDR
// vc_control := control ;
70458: LD_ADDR_OWVAR 38
70462: PUSH
70463: LD_VAR 0 3
70467: ST_TO_ADDR
// vc_weapon := weapon ;
70468: LD_ADDR_OWVAR 40
70472: PUSH
70473: LD_VAR 0 4
70477: ST_TO_ADDR
// un := CreateVehicle ;
70478: LD_ADDR_VAR 0 8
70482: PUSH
70483: CALL_OW 45
70487: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70488: LD_VAR 0 8
70492: PPUSH
70493: LD_INT 0
70495: PPUSH
70496: LD_INT 5
70498: PPUSH
70499: CALL_OW 12
70503: PPUSH
70504: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70508: LD_VAR 0 8
70512: PPUSH
70513: LD_VAR 0 5
70517: PPUSH
70518: LD_VAR 0 6
70522: PPUSH
70523: LD_INT 1
70525: PPUSH
70526: CALL_OW 48
// end ;
70530: LD_VAR 0 7
70534: RET
// export hInvincible ; every 1 do
70535: GO 70537
70537: DISABLE
// hInvincible := [ ] ;
70538: LD_ADDR_EXP 102
70542: PUSH
70543: EMPTY
70544: ST_TO_ADDR
70545: END
// every 10 do var i ;
70546: GO 70548
70548: DISABLE
70549: LD_INT 0
70551: PPUSH
// begin enable ;
70552: ENABLE
// if not hInvincible then
70553: LD_EXP 102
70557: NOT
70558: IFFALSE 70562
// exit ;
70560: GO 70606
// for i in hInvincible do
70562: LD_ADDR_VAR 0 1
70566: PUSH
70567: LD_EXP 102
70571: PUSH
70572: FOR_IN
70573: IFFALSE 70604
// if GetLives ( i ) < 1000 then
70575: LD_VAR 0 1
70579: PPUSH
70580: CALL_OW 256
70584: PUSH
70585: LD_INT 1000
70587: LESS
70588: IFFALSE 70602
// SetLives ( i , 1000 ) ;
70590: LD_VAR 0 1
70594: PPUSH
70595: LD_INT 1000
70597: PPUSH
70598: CALL_OW 234
70602: GO 70572
70604: POP
70605: POP
// end ;
70606: PPOPN 1
70608: END
// export function hHackInvincible ; var i ; begin
70609: LD_INT 0
70611: PPUSH
70612: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
70613: LD_ADDR_VAR 0 2
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: LD_INT 21
70623: PUSH
70624: LD_INT 1
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 21
70633: PUSH
70634: LD_INT 2
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: PPUSH
70646: CALL_OW 69
70650: PUSH
70651: FOR_IN
70652: IFFALSE 70713
// if IsSelected ( i ) then
70654: LD_VAR 0 2
70658: PPUSH
70659: CALL_OW 306
70663: IFFALSE 70711
// begin if i in hInvincible then
70665: LD_VAR 0 2
70669: PUSH
70670: LD_EXP 102
70674: IN
70675: IFFALSE 70695
// hInvincible := hInvincible diff i else
70677: LD_ADDR_EXP 102
70681: PUSH
70682: LD_EXP 102
70686: PUSH
70687: LD_VAR 0 2
70691: DIFF
70692: ST_TO_ADDR
70693: GO 70711
// hInvincible := hInvincible union i ;
70695: LD_ADDR_EXP 102
70699: PUSH
70700: LD_EXP 102
70704: PUSH
70705: LD_VAR 0 2
70709: UNION
70710: ST_TO_ADDR
// end ;
70711: GO 70651
70713: POP
70714: POP
// end ;
70715: LD_VAR 0 1
70719: RET
// export function hHackInvisible ; var i , j ; begin
70720: LD_INT 0
70722: PPUSH
70723: PPUSH
70724: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70725: LD_ADDR_VAR 0 2
70729: PUSH
70730: LD_INT 21
70732: PUSH
70733: LD_INT 1
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PPUSH
70740: CALL_OW 69
70744: PUSH
70745: FOR_IN
70746: IFFALSE 70770
// if IsSelected ( i ) then
70748: LD_VAR 0 2
70752: PPUSH
70753: CALL_OW 306
70757: IFFALSE 70768
// ComForceInvisible ( i ) ;
70759: LD_VAR 0 2
70763: PPUSH
70764: CALL_OW 496
70768: GO 70745
70770: POP
70771: POP
// end ;
70772: LD_VAR 0 1
70776: RET
// export function hHackChangeYourSide ; begin
70777: LD_INT 0
70779: PPUSH
// if your_side = 8 then
70780: LD_OWVAR 2
70784: PUSH
70785: LD_INT 8
70787: EQUAL
70788: IFFALSE 70800
// your_side := 0 else
70790: LD_ADDR_OWVAR 2
70794: PUSH
70795: LD_INT 0
70797: ST_TO_ADDR
70798: GO 70814
// your_side := your_side + 1 ;
70800: LD_ADDR_OWVAR 2
70804: PUSH
70805: LD_OWVAR 2
70809: PUSH
70810: LD_INT 1
70812: PLUS
70813: ST_TO_ADDR
// end ;
70814: LD_VAR 0 1
70818: RET
// export function hHackChangeUnitSide ; var i , j ; begin
70819: LD_INT 0
70821: PPUSH
70822: PPUSH
70823: PPUSH
// for i in all_units do
70824: LD_ADDR_VAR 0 2
70828: PUSH
70829: LD_OWVAR 3
70833: PUSH
70834: FOR_IN
70835: IFFALSE 70913
// if IsSelected ( i ) then
70837: LD_VAR 0 2
70841: PPUSH
70842: CALL_OW 306
70846: IFFALSE 70911
// begin j := GetSide ( i ) ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: LD_VAR 0 2
70857: PPUSH
70858: CALL_OW 255
70862: ST_TO_ADDR
// if j = 8 then
70863: LD_VAR 0 3
70867: PUSH
70868: LD_INT 8
70870: EQUAL
70871: IFFALSE 70883
// j := 0 else
70873: LD_ADDR_VAR 0 3
70877: PUSH
70878: LD_INT 0
70880: ST_TO_ADDR
70881: GO 70897
// j := j + 1 ;
70883: LD_ADDR_VAR 0 3
70887: PUSH
70888: LD_VAR 0 3
70892: PUSH
70893: LD_INT 1
70895: PLUS
70896: ST_TO_ADDR
// SetSide ( i , j ) ;
70897: LD_VAR 0 2
70901: PPUSH
70902: LD_VAR 0 3
70906: PPUSH
70907: CALL_OW 235
// end ;
70911: GO 70834
70913: POP
70914: POP
// end ;
70915: LD_VAR 0 1
70919: RET
// export function hHackFog ; begin
70920: LD_INT 0
70922: PPUSH
// FogOff ( true ) ;
70923: LD_INT 1
70925: PPUSH
70926: CALL_OW 344
// end ;
70930: LD_VAR 0 1
70934: RET
// export function hHackTeleport ( unit , x , y ) ; begin
70935: LD_INT 0
70937: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
70938: LD_VAR 0 1
70942: PPUSH
70943: LD_VAR 0 2
70947: PPUSH
70948: LD_VAR 0 3
70952: PPUSH
70953: LD_INT 1
70955: PPUSH
70956: LD_INT 1
70958: PPUSH
70959: CALL_OW 483
// CenterOnXY ( x , y ) ;
70963: LD_VAR 0 2
70967: PPUSH
70968: LD_VAR 0 3
70972: PPUSH
70973: CALL_OW 84
// end ;
70977: LD_VAR 0 4
70981: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
70982: LD_INT 0
70984: PPUSH
70985: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
70986: LD_VAR 0 1
70990: NOT
70991: PUSH
70992: LD_VAR 0 2
70996: PPUSH
70997: LD_VAR 0 3
71001: PPUSH
71002: CALL_OW 488
71006: NOT
71007: OR
71008: PUSH
71009: LD_VAR 0 1
71013: PPUSH
71014: CALL_OW 266
71018: PUSH
71019: LD_INT 3
71021: NONEQUAL
71022: PUSH
71023: LD_VAR 0 1
71027: PPUSH
71028: CALL_OW 247
71032: PUSH
71033: LD_INT 1
71035: EQUAL
71036: NOT
71037: AND
71038: OR
71039: IFFALSE 71043
// exit ;
71041: GO 71192
// if GetType ( factory ) = unit_human then
71043: LD_VAR 0 1
71047: PPUSH
71048: CALL_OW 247
71052: PUSH
71053: LD_INT 1
71055: EQUAL
71056: IFFALSE 71073
// factory := IsInUnit ( factory ) ;
71058: LD_ADDR_VAR 0 1
71062: PUSH
71063: LD_VAR 0 1
71067: PPUSH
71068: CALL_OW 310
71072: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 266
71082: PUSH
71083: LD_INT 3
71085: NONEQUAL
71086: IFFALSE 71090
// exit ;
71088: GO 71192
// if HexInfo ( x , y ) = factory then
71090: LD_VAR 0 2
71094: PPUSH
71095: LD_VAR 0 3
71099: PPUSH
71100: CALL_OW 428
71104: PUSH
71105: LD_VAR 0 1
71109: EQUAL
71110: IFFALSE 71137
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
71112: LD_ADDR_EXP 103
71116: PUSH
71117: LD_EXP 103
71121: PPUSH
71122: LD_VAR 0 1
71126: PPUSH
71127: LD_INT 0
71129: PPUSH
71130: CALL_OW 1
71134: ST_TO_ADDR
71135: GO 71188
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
71137: LD_ADDR_EXP 103
71141: PUSH
71142: LD_EXP 103
71146: PPUSH
71147: LD_VAR 0 1
71151: PPUSH
71152: LD_VAR 0 1
71156: PPUSH
71157: CALL_OW 255
71161: PUSH
71162: LD_VAR 0 1
71166: PUSH
71167: LD_VAR 0 2
71171: PUSH
71172: LD_VAR 0 3
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: PPUSH
71183: CALL_OW 1
71187: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71188: CALL 71197 0 0
// end ;
71192: LD_VAR 0 4
71196: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
71197: LD_INT 0
71199: PPUSH
71200: PPUSH
71201: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
71202: LD_STRING resetFactoryWaypoint();
71204: PPUSH
71205: CALL_OW 559
// if factoryWaypoints then
71209: LD_EXP 103
71213: IFFALSE 71339
// begin list := PrepareArray ( factoryWaypoints ) ;
71215: LD_ADDR_VAR 0 3
71219: PUSH
71220: LD_EXP 103
71224: PPUSH
71225: CALL 55152 0 1
71229: ST_TO_ADDR
// for i := 1 to list do
71230: LD_ADDR_VAR 0 2
71234: PUSH
71235: DOUBLE
71236: LD_INT 1
71238: DEC
71239: ST_TO_ADDR
71240: LD_VAR 0 3
71244: PUSH
71245: FOR_TO
71246: IFFALSE 71337
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71248: LD_STRING setFactoryWaypointXY(
71250: PUSH
71251: LD_VAR 0 3
71255: PUSH
71256: LD_VAR 0 2
71260: ARRAY
71261: PUSH
71262: LD_INT 1
71264: ARRAY
71265: STR
71266: PUSH
71267: LD_STRING ,
71269: STR
71270: PUSH
71271: LD_VAR 0 3
71275: PUSH
71276: LD_VAR 0 2
71280: ARRAY
71281: PUSH
71282: LD_INT 2
71284: ARRAY
71285: STR
71286: PUSH
71287: LD_STRING ,
71289: STR
71290: PUSH
71291: LD_VAR 0 3
71295: PUSH
71296: LD_VAR 0 2
71300: ARRAY
71301: PUSH
71302: LD_INT 3
71304: ARRAY
71305: STR
71306: PUSH
71307: LD_STRING ,
71309: STR
71310: PUSH
71311: LD_VAR 0 3
71315: PUSH
71316: LD_VAR 0 2
71320: ARRAY
71321: PUSH
71322: LD_INT 4
71324: ARRAY
71325: STR
71326: PUSH
71327: LD_STRING )
71329: STR
71330: PPUSH
71331: CALL_OW 559
71335: GO 71245
71337: POP
71338: POP
// end ; end ;
71339: LD_VAR 0 1
71343: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
71344: LD_INT 0
71346: PPUSH
// if HexInfo ( x , y ) = warehouse then
71347: LD_VAR 0 2
71351: PPUSH
71352: LD_VAR 0 3
71356: PPUSH
71357: CALL_OW 428
71361: PUSH
71362: LD_VAR 0 1
71366: EQUAL
71367: IFFALSE 71394
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
71369: LD_ADDR_EXP 104
71373: PUSH
71374: LD_EXP 104
71378: PPUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_INT 0
71386: PPUSH
71387: CALL_OW 1
71391: ST_TO_ADDR
71392: GO 71445
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
71394: LD_ADDR_EXP 104
71398: PUSH
71399: LD_EXP 104
71403: PPUSH
71404: LD_VAR 0 1
71408: PPUSH
71409: LD_VAR 0 1
71413: PPUSH
71414: CALL_OW 255
71418: PUSH
71419: LD_VAR 0 1
71423: PUSH
71424: LD_VAR 0 2
71428: PUSH
71429: LD_VAR 0 3
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: PPUSH
71440: CALL_OW 1
71444: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
71445: CALL 71454 0 0
// end ;
71449: LD_VAR 0 4
71453: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
71454: LD_INT 0
71456: PPUSH
71457: PPUSH
71458: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
71459: LD_STRING resetWarehouseGatheringPoints();
71461: PPUSH
71462: CALL_OW 559
// if warehouseGatheringPoints then
71466: LD_EXP 104
71470: IFFALSE 71596
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
71472: LD_ADDR_VAR 0 3
71476: PUSH
71477: LD_EXP 104
71481: PPUSH
71482: CALL 55152 0 1
71486: ST_TO_ADDR
// for i := 1 to list do
71487: LD_ADDR_VAR 0 2
71491: PUSH
71492: DOUBLE
71493: LD_INT 1
71495: DEC
71496: ST_TO_ADDR
71497: LD_VAR 0 3
71501: PUSH
71502: FOR_TO
71503: IFFALSE 71594
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71505: LD_STRING setWarehouseGatheringPointXY(
71507: PUSH
71508: LD_VAR 0 3
71512: PUSH
71513: LD_VAR 0 2
71517: ARRAY
71518: PUSH
71519: LD_INT 1
71521: ARRAY
71522: STR
71523: PUSH
71524: LD_STRING ,
71526: STR
71527: PUSH
71528: LD_VAR 0 3
71532: PUSH
71533: LD_VAR 0 2
71537: ARRAY
71538: PUSH
71539: LD_INT 2
71541: ARRAY
71542: STR
71543: PUSH
71544: LD_STRING ,
71546: STR
71547: PUSH
71548: LD_VAR 0 3
71552: PUSH
71553: LD_VAR 0 2
71557: ARRAY
71558: PUSH
71559: LD_INT 3
71561: ARRAY
71562: STR
71563: PUSH
71564: LD_STRING ,
71566: STR
71567: PUSH
71568: LD_VAR 0 3
71572: PUSH
71573: LD_VAR 0 2
71577: ARRAY
71578: PUSH
71579: LD_INT 4
71581: ARRAY
71582: STR
71583: PUSH
71584: LD_STRING )
71586: STR
71587: PPUSH
71588: CALL_OW 559
71592: GO 71502
71594: POP
71595: POP
// end ; end ;
71596: LD_VAR 0 1
71600: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
71601: LD_EXP 104
71605: IFFALSE 72290
71607: GO 71609
71609: DISABLE
71610: LD_INT 0
71612: PPUSH
71613: PPUSH
71614: PPUSH
71615: PPUSH
71616: PPUSH
71617: PPUSH
71618: PPUSH
71619: PPUSH
71620: PPUSH
// begin enable ;
71621: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
71622: LD_ADDR_VAR 0 3
71626: PUSH
71627: LD_EXP 104
71631: PPUSH
71632: CALL 55152 0 1
71636: ST_TO_ADDR
// if not list then
71637: LD_VAR 0 3
71641: NOT
71642: IFFALSE 71646
// exit ;
71644: GO 72290
// for i := 1 to list do
71646: LD_ADDR_VAR 0 1
71650: PUSH
71651: DOUBLE
71652: LD_INT 1
71654: DEC
71655: ST_TO_ADDR
71656: LD_VAR 0 3
71660: PUSH
71661: FOR_TO
71662: IFFALSE 72288
// begin depot := list [ i ] [ 2 ] ;
71664: LD_ADDR_VAR 0 8
71668: PUSH
71669: LD_VAR 0 3
71673: PUSH
71674: LD_VAR 0 1
71678: ARRAY
71679: PUSH
71680: LD_INT 2
71682: ARRAY
71683: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
71684: LD_ADDR_VAR 0 5
71688: PUSH
71689: LD_VAR 0 3
71693: PUSH
71694: LD_VAR 0 1
71698: ARRAY
71699: PUSH
71700: LD_INT 1
71702: ARRAY
71703: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
71704: LD_VAR 0 8
71708: PPUSH
71709: CALL_OW 301
71713: PUSH
71714: LD_VAR 0 5
71718: PUSH
71719: LD_VAR 0 8
71723: PPUSH
71724: CALL_OW 255
71728: NONEQUAL
71729: OR
71730: IFFALSE 71759
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
71732: LD_ADDR_EXP 104
71736: PUSH
71737: LD_EXP 104
71741: PPUSH
71742: LD_VAR 0 8
71746: PPUSH
71747: LD_INT 0
71749: PPUSH
71750: CALL_OW 1
71754: ST_TO_ADDR
// exit ;
71755: POP
71756: POP
71757: GO 72290
// end ; x := list [ i ] [ 3 ] ;
71759: LD_ADDR_VAR 0 6
71763: PUSH
71764: LD_VAR 0 3
71768: PUSH
71769: LD_VAR 0 1
71773: ARRAY
71774: PUSH
71775: LD_INT 3
71777: ARRAY
71778: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
71779: LD_ADDR_VAR 0 7
71783: PUSH
71784: LD_VAR 0 3
71788: PUSH
71789: LD_VAR 0 1
71793: ARRAY
71794: PUSH
71795: LD_INT 4
71797: ARRAY
71798: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
71799: LD_ADDR_VAR 0 9
71803: PUSH
71804: LD_VAR 0 6
71808: PPUSH
71809: LD_VAR 0 7
71813: PPUSH
71814: LD_INT 16
71816: PPUSH
71817: CALL 53740 0 3
71821: ST_TO_ADDR
// if not cratesNearbyPoint then
71822: LD_VAR 0 9
71826: NOT
71827: IFFALSE 71833
// exit ;
71829: POP
71830: POP
71831: GO 72290
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
71833: LD_ADDR_VAR 0 4
71837: PUSH
71838: LD_INT 22
71840: PUSH
71841: LD_VAR 0 5
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 3
71852: PUSH
71853: LD_INT 60
71855: PUSH
71856: EMPTY
71857: LIST
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 91
71865: PUSH
71866: LD_VAR 0 8
71870: PUSH
71871: LD_INT 6
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 2
71881: PUSH
71882: LD_INT 25
71884: PUSH
71885: LD_INT 2
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: LD_INT 25
71894: PUSH
71895: LD_INT 16
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: PPUSH
71913: CALL_OW 69
71917: PUSH
71918: LD_VAR 0 8
71922: PPUSH
71923: CALL_OW 313
71927: PPUSH
71928: LD_INT 3
71930: PUSH
71931: LD_INT 60
71933: PUSH
71934: EMPTY
71935: LIST
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 2
71943: PUSH
71944: LD_INT 25
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 25
71956: PUSH
71957: LD_INT 16
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PPUSH
71973: CALL_OW 72
71977: UNION
71978: ST_TO_ADDR
// if tmp then
71979: LD_VAR 0 4
71983: IFFALSE 72063
// begin tmp := ShrinkArray ( tmp , 3 ) ;
71985: LD_ADDR_VAR 0 4
71989: PUSH
71990: LD_VAR 0 4
71994: PPUSH
71995: LD_INT 3
71997: PPUSH
71998: CALL 51709 0 2
72002: ST_TO_ADDR
// for j in tmp do
72003: LD_ADDR_VAR 0 2
72007: PUSH
72008: LD_VAR 0 4
72012: PUSH
72013: FOR_IN
72014: IFFALSE 72057
// begin if IsInUnit ( j ) then
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 310
72025: IFFALSE 72036
// ComExit ( j ) ;
72027: LD_VAR 0 2
72031: PPUSH
72032: CALL 51792 0 1
// AddComCollect ( j , x , y ) ;
72036: LD_VAR 0 2
72040: PPUSH
72041: LD_VAR 0 6
72045: PPUSH
72046: LD_VAR 0 7
72050: PPUSH
72051: CALL_OW 177
// end ;
72055: GO 72013
72057: POP
72058: POP
// exit ;
72059: POP
72060: POP
72061: GO 72290
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
72063: LD_ADDR_VAR 0 4
72067: PUSH
72068: LD_INT 22
72070: PUSH
72071: LD_VAR 0 5
72075: PUSH
72076: EMPTY
72077: LIST
72078: LIST
72079: PUSH
72080: LD_INT 91
72082: PUSH
72083: LD_VAR 0 8
72087: PUSH
72088: LD_INT 8
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 2
72098: PUSH
72099: LD_INT 34
72101: PUSH
72102: LD_INT 12
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 34
72111: PUSH
72112: LD_INT 51
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 34
72121: PUSH
72122: LD_INT 32
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 34
72131: PUSH
72132: LD_INT 89
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: LIST
72150: PPUSH
72151: CALL_OW 69
72155: ST_TO_ADDR
// if tmp then
72156: LD_VAR 0 4
72160: IFFALSE 72286
// begin for j in tmp do
72162: LD_ADDR_VAR 0 2
72166: PUSH
72167: LD_VAR 0 4
72171: PUSH
72172: FOR_IN
72173: IFFALSE 72284
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
72175: LD_VAR 0 2
72179: PPUSH
72180: CALL_OW 262
72184: PUSH
72185: LD_INT 3
72187: EQUAL
72188: PUSH
72189: LD_VAR 0 2
72193: PPUSH
72194: CALL_OW 261
72198: PUSH
72199: LD_INT 20
72201: GREATER
72202: OR
72203: PUSH
72204: LD_VAR 0 2
72208: PPUSH
72209: CALL_OW 314
72213: NOT
72214: AND
72215: PUSH
72216: LD_VAR 0 2
72220: PPUSH
72221: CALL_OW 263
72225: PUSH
72226: LD_INT 1
72228: NONEQUAL
72229: PUSH
72230: LD_VAR 0 2
72234: PPUSH
72235: CALL_OW 311
72239: OR
72240: AND
72241: IFFALSE 72282
// begin ComCollect ( j , x , y ) ;
72243: LD_VAR 0 2
72247: PPUSH
72248: LD_VAR 0 6
72252: PPUSH
72253: LD_VAR 0 7
72257: PPUSH
72258: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
72262: LD_VAR 0 2
72266: PPUSH
72267: LD_VAR 0 8
72271: PPUSH
72272: CALL_OW 172
// exit ;
72276: POP
72277: POP
72278: POP
72279: POP
72280: GO 72290
// end ;
72282: GO 72172
72284: POP
72285: POP
// end ; end ;
72286: GO 71661
72288: POP
72289: POP
// end ; end_of_file
72290: PPOPN 9
72292: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72293: LD_INT 0
72295: PPUSH
72296: PPUSH
72297: PPUSH
72298: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72299: LD_VAR 0 1
72303: PPUSH
72304: CALL_OW 264
72308: PUSH
72309: LD_INT 91
72311: EQUAL
72312: IFFALSE 72384
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72314: LD_INT 68
72316: PPUSH
72317: LD_VAR 0 1
72321: PPUSH
72322: CALL_OW 255
72326: PPUSH
72327: CALL_OW 321
72331: PUSH
72332: LD_INT 2
72334: EQUAL
72335: IFFALSE 72347
// eff := 70 else
72337: LD_ADDR_VAR 0 4
72341: PUSH
72342: LD_INT 70
72344: ST_TO_ADDR
72345: GO 72355
// eff := 30 ;
72347: LD_ADDR_VAR 0 4
72351: PUSH
72352: LD_INT 30
72354: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 250
72364: PPUSH
72365: LD_VAR 0 1
72369: PPUSH
72370: CALL_OW 251
72374: PPUSH
72375: LD_VAR 0 4
72379: PPUSH
72380: CALL_OW 495
// end ; end ;
72384: LD_VAR 0 2
72388: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72389: LD_INT 0
72391: PPUSH
// end ;
72392: LD_VAR 0 4
72396: RET
// export function SOS_Command ( cmd ) ; begin
72397: LD_INT 0
72399: PPUSH
// end ;
72400: LD_VAR 0 2
72404: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
72405: LD_INT 0
72407: PPUSH
// end ;
72408: LD_VAR 0 6
72412: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
72413: LD_INT 0
72415: PPUSH
72416: PPUSH
// if not vehicle or not factory then
72417: LD_VAR 0 1
72421: NOT
72422: PUSH
72423: LD_VAR 0 2
72427: NOT
72428: OR
72429: IFFALSE 72433
// exit ;
72431: GO 72664
// if factoryWaypoints >= factory then
72433: LD_EXP 103
72437: PUSH
72438: LD_VAR 0 2
72442: GREATEREQUAL
72443: IFFALSE 72664
// if factoryWaypoints [ factory ] then
72445: LD_EXP 103
72449: PUSH
72450: LD_VAR 0 2
72454: ARRAY
72455: IFFALSE 72664
// begin if GetControl ( vehicle ) = control_manual then
72457: LD_VAR 0 1
72461: PPUSH
72462: CALL_OW 263
72466: PUSH
72467: LD_INT 1
72469: EQUAL
72470: IFFALSE 72551
// begin driver := IsDrivenBy ( vehicle ) ;
72472: LD_ADDR_VAR 0 4
72476: PUSH
72477: LD_VAR 0 1
72481: PPUSH
72482: CALL_OW 311
72486: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72487: LD_VAR 0 4
72491: PPUSH
72492: LD_EXP 103
72496: PUSH
72497: LD_VAR 0 2
72501: ARRAY
72502: PUSH
72503: LD_INT 3
72505: ARRAY
72506: PPUSH
72507: LD_EXP 103
72511: PUSH
72512: LD_VAR 0 2
72516: ARRAY
72517: PUSH
72518: LD_INT 4
72520: ARRAY
72521: PPUSH
72522: CALL_OW 171
// AddComExitVehicle ( driver ) ;
72526: LD_VAR 0 4
72530: PPUSH
72531: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
72535: LD_VAR 0 4
72539: PPUSH
72540: LD_VAR 0 2
72544: PPUSH
72545: CALL_OW 180
// end else
72549: GO 72664
// if GetControl ( vehicle ) = control_remote then
72551: LD_VAR 0 1
72555: PPUSH
72556: CALL_OW 263
72560: PUSH
72561: LD_INT 2
72563: EQUAL
72564: IFFALSE 72625
// begin wait ( 0 0$2 ) ;
72566: LD_INT 70
72568: PPUSH
72569: CALL_OW 67
// if Connect ( vehicle ) then
72573: LD_VAR 0 1
72577: PPUSH
72578: CALL 22011 0 1
72582: IFFALSE 72623
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72584: LD_VAR 0 1
72588: PPUSH
72589: LD_EXP 103
72593: PUSH
72594: LD_VAR 0 2
72598: ARRAY
72599: PUSH
72600: LD_INT 3
72602: ARRAY
72603: PPUSH
72604: LD_EXP 103
72608: PUSH
72609: LD_VAR 0 2
72613: ARRAY
72614: PUSH
72615: LD_INT 4
72617: ARRAY
72618: PPUSH
72619: CALL_OW 171
// end else
72623: GO 72664
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_EXP 103
72634: PUSH
72635: LD_VAR 0 2
72639: ARRAY
72640: PUSH
72641: LD_INT 3
72643: ARRAY
72644: PPUSH
72645: LD_EXP 103
72649: PUSH
72650: LD_VAR 0 2
72654: ARRAY
72655: PUSH
72656: LD_INT 4
72658: ARRAY
72659: PPUSH
72660: CALL_OW 171
// end ; end ;
72664: LD_VAR 0 3
72668: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
72669: LD_INT 0
72671: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
72672: LD_VAR 0 1
72676: PUSH
72677: LD_INT 250
72679: EQUAL
72680: PUSH
72681: LD_VAR 0 2
72685: PPUSH
72686: CALL_OW 264
72690: PUSH
72691: LD_INT 81
72693: EQUAL
72694: AND
72695: IFFALSE 72716
// MinerPlaceMine ( unit , x , y ) ;
72697: LD_VAR 0 2
72701: PPUSH
72702: LD_VAR 0 4
72706: PPUSH
72707: LD_VAR 0 5
72711: PPUSH
72712: CALL 75706 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
72716: LD_VAR 0 1
72720: PUSH
72721: LD_INT 251
72723: EQUAL
72724: PUSH
72725: LD_VAR 0 2
72729: PPUSH
72730: CALL_OW 264
72734: PUSH
72735: LD_INT 81
72737: EQUAL
72738: AND
72739: IFFALSE 72760
// MinerDetonateMine ( unit , x , y ) ;
72741: LD_VAR 0 2
72745: PPUSH
72746: LD_VAR 0 4
72750: PPUSH
72751: LD_VAR 0 5
72755: PPUSH
72756: CALL 75981 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
72760: LD_VAR 0 1
72764: PUSH
72765: LD_INT 252
72767: EQUAL
72768: PUSH
72769: LD_VAR 0 2
72773: PPUSH
72774: CALL_OW 264
72778: PUSH
72779: LD_INT 81
72781: EQUAL
72782: AND
72783: IFFALSE 72804
// MinerCreateMinefield ( unit , x , y ) ;
72785: LD_VAR 0 2
72789: PPUSH
72790: LD_VAR 0 4
72794: PPUSH
72795: LD_VAR 0 5
72799: PPUSH
72800: CALL 76398 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72804: LD_VAR 0 1
72808: PUSH
72809: LD_INT 253
72811: EQUAL
72812: PUSH
72813: LD_VAR 0 2
72817: PPUSH
72818: CALL_OW 257
72822: PUSH
72823: LD_INT 5
72825: EQUAL
72826: AND
72827: IFFALSE 72848
// ComBinocular ( unit , x , y ) ;
72829: LD_VAR 0 2
72833: PPUSH
72834: LD_VAR 0 4
72838: PPUSH
72839: LD_VAR 0 5
72843: PPUSH
72844: CALL 76767 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72848: LD_VAR 0 1
72852: PUSH
72853: LD_INT 254
72855: EQUAL
72856: PUSH
72857: LD_VAR 0 2
72861: PPUSH
72862: CALL_OW 264
72866: PUSH
72867: LD_INT 99
72869: EQUAL
72870: AND
72871: PUSH
72872: LD_VAR 0 3
72876: PPUSH
72877: CALL_OW 263
72881: PUSH
72882: LD_INT 3
72884: EQUAL
72885: AND
72886: IFFALSE 72902
// HackDestroyVehicle ( unit , selectedUnit ) ;
72888: LD_VAR 0 2
72892: PPUSH
72893: LD_VAR 0 3
72897: PPUSH
72898: CALL 75070 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72902: LD_VAR 0 1
72906: PUSH
72907: LD_INT 255
72909: EQUAL
72910: PUSH
72911: LD_VAR 0 2
72915: PPUSH
72916: CALL_OW 264
72920: PUSH
72921: LD_INT 14
72923: PUSH
72924: LD_INT 53
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: IN
72931: AND
72932: PUSH
72933: LD_VAR 0 4
72937: PPUSH
72938: LD_VAR 0 5
72942: PPUSH
72943: CALL_OW 488
72947: AND
72948: IFFALSE 72972
// CutTreeXYR ( unit , x , y , 12 ) ;
72950: LD_VAR 0 2
72954: PPUSH
72955: LD_VAR 0 4
72959: PPUSH
72960: LD_VAR 0 5
72964: PPUSH
72965: LD_INT 12
72967: PPUSH
72968: CALL 73067 0 4
// if cmd = 256 then
72972: LD_VAR 0 1
72976: PUSH
72977: LD_INT 256
72979: EQUAL
72980: IFFALSE 73001
// SetFactoryWaypoint ( unit , x , y ) ;
72982: LD_VAR 0 2
72986: PPUSH
72987: LD_VAR 0 4
72991: PPUSH
72992: LD_VAR 0 5
72996: PPUSH
72997: CALL 70982 0 3
// if cmd = 257 then
73001: LD_VAR 0 1
73005: PUSH
73006: LD_INT 257
73008: EQUAL
73009: IFFALSE 73030
// SetWarehouseGatheringPoint ( unit , x , y ) ;
73011: LD_VAR 0 2
73015: PPUSH
73016: LD_VAR 0 4
73020: PPUSH
73021: LD_VAR 0 5
73025: PPUSH
73026: CALL 71344 0 3
// if cmd = 258 then
73030: LD_VAR 0 1
73034: PUSH
73035: LD_INT 258
73037: EQUAL
73038: IFFALSE 73062
// BurnTreeXYR ( unit , x , y , 8 ) ;
73040: LD_VAR 0 2
73044: PPUSH
73045: LD_VAR 0 4
73049: PPUSH
73050: LD_VAR 0 5
73054: PPUSH
73055: LD_INT 8
73057: PPUSH
73058: CALL 73461 0 4
// end ;
73062: LD_VAR 0 6
73066: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73067: LD_INT 0
73069: PPUSH
73070: PPUSH
73071: PPUSH
73072: PPUSH
73073: PPUSH
73074: PPUSH
73075: PPUSH
73076: PPUSH
73077: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
73078: LD_VAR 0 1
73082: PPUSH
73083: CALL_OW 302
73087: NOT
73088: PUSH
73089: LD_VAR 0 2
73093: PPUSH
73094: LD_VAR 0 3
73098: PPUSH
73099: CALL_OW 488
73103: NOT
73104: OR
73105: PUSH
73106: LD_VAR 0 4
73110: NOT
73111: OR
73112: IFFALSE 73116
// exit ;
73114: GO 73456
// list := [ ] ;
73116: LD_ADDR_VAR 0 13
73120: PUSH
73121: EMPTY
73122: ST_TO_ADDR
// if x - r < 0 then
73123: LD_VAR 0 2
73127: PUSH
73128: LD_VAR 0 4
73132: MINUS
73133: PUSH
73134: LD_INT 0
73136: LESS
73137: IFFALSE 73149
// min_x := 0 else
73139: LD_ADDR_VAR 0 7
73143: PUSH
73144: LD_INT 0
73146: ST_TO_ADDR
73147: GO 73165
// min_x := x - r ;
73149: LD_ADDR_VAR 0 7
73153: PUSH
73154: LD_VAR 0 2
73158: PUSH
73159: LD_VAR 0 4
73163: MINUS
73164: ST_TO_ADDR
// if y - r < 0 then
73165: LD_VAR 0 3
73169: PUSH
73170: LD_VAR 0 4
73174: MINUS
73175: PUSH
73176: LD_INT 0
73178: LESS
73179: IFFALSE 73191
// min_y := 0 else
73181: LD_ADDR_VAR 0 8
73185: PUSH
73186: LD_INT 0
73188: ST_TO_ADDR
73189: GO 73207
// min_y := y - r ;
73191: LD_ADDR_VAR 0 8
73195: PUSH
73196: LD_VAR 0 3
73200: PUSH
73201: LD_VAR 0 4
73205: MINUS
73206: ST_TO_ADDR
// max_x := x + r ;
73207: LD_ADDR_VAR 0 9
73211: PUSH
73212: LD_VAR 0 2
73216: PUSH
73217: LD_VAR 0 4
73221: PLUS
73222: ST_TO_ADDR
// max_y := y + r ;
73223: LD_ADDR_VAR 0 10
73227: PUSH
73228: LD_VAR 0 3
73232: PUSH
73233: LD_VAR 0 4
73237: PLUS
73238: ST_TO_ADDR
// for _x = min_x to max_x do
73239: LD_ADDR_VAR 0 11
73243: PUSH
73244: DOUBLE
73245: LD_VAR 0 7
73249: DEC
73250: ST_TO_ADDR
73251: LD_VAR 0 9
73255: PUSH
73256: FOR_TO
73257: IFFALSE 73374
// for _y = min_y to max_y do
73259: LD_ADDR_VAR 0 12
73263: PUSH
73264: DOUBLE
73265: LD_VAR 0 8
73269: DEC
73270: ST_TO_ADDR
73271: LD_VAR 0 10
73275: PUSH
73276: FOR_TO
73277: IFFALSE 73370
// begin if not ValidHex ( _x , _y ) then
73279: LD_VAR 0 11
73283: PPUSH
73284: LD_VAR 0 12
73288: PPUSH
73289: CALL_OW 488
73293: NOT
73294: IFFALSE 73298
// continue ;
73296: GO 73276
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73298: LD_VAR 0 11
73302: PPUSH
73303: LD_VAR 0 12
73307: PPUSH
73308: CALL_OW 351
73312: PUSH
73313: LD_VAR 0 11
73317: PPUSH
73318: LD_VAR 0 12
73322: PPUSH
73323: CALL_OW 554
73327: AND
73328: IFFALSE 73368
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73330: LD_ADDR_VAR 0 13
73334: PUSH
73335: LD_VAR 0 13
73339: PPUSH
73340: LD_VAR 0 13
73344: PUSH
73345: LD_INT 1
73347: PLUS
73348: PPUSH
73349: LD_VAR 0 11
73353: PUSH
73354: LD_VAR 0 12
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: PPUSH
73363: CALL_OW 2
73367: ST_TO_ADDR
// end ;
73368: GO 73276
73370: POP
73371: POP
73372: GO 73256
73374: POP
73375: POP
// if not list then
73376: LD_VAR 0 13
73380: NOT
73381: IFFALSE 73385
// exit ;
73383: GO 73456
// for i in list do
73385: LD_ADDR_VAR 0 6
73389: PUSH
73390: LD_VAR 0 13
73394: PUSH
73395: FOR_IN
73396: IFFALSE 73454
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73398: LD_VAR 0 1
73402: PPUSH
73403: LD_STRING M
73405: PUSH
73406: LD_VAR 0 6
73410: PUSH
73411: LD_INT 1
73413: ARRAY
73414: PUSH
73415: LD_VAR 0 6
73419: PUSH
73420: LD_INT 2
73422: ARRAY
73423: PUSH
73424: LD_INT 0
73426: PUSH
73427: LD_INT 0
73429: PUSH
73430: LD_INT 0
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: PUSH
73445: EMPTY
73446: LIST
73447: PPUSH
73448: CALL_OW 447
73452: GO 73395
73454: POP
73455: POP
// end ;
73456: LD_VAR 0 5
73460: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
73461: LD_INT 0
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
73467: PPUSH
73468: PPUSH
73469: PPUSH
73470: PPUSH
73471: PPUSH
73472: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
73473: LD_VAR 0 1
73477: PPUSH
73478: CALL_OW 302
73482: NOT
73483: PUSH
73484: LD_VAR 0 2
73488: PPUSH
73489: LD_VAR 0 3
73493: PPUSH
73494: CALL_OW 488
73498: NOT
73499: OR
73500: PUSH
73501: LD_VAR 0 4
73505: NOT
73506: OR
73507: IFFALSE 73511
// exit ;
73509: GO 74024
// list := [ ] ;
73511: LD_ADDR_VAR 0 13
73515: PUSH
73516: EMPTY
73517: ST_TO_ADDR
// if x - r < 0 then
73518: LD_VAR 0 2
73522: PUSH
73523: LD_VAR 0 4
73527: MINUS
73528: PUSH
73529: LD_INT 0
73531: LESS
73532: IFFALSE 73544
// min_x := 0 else
73534: LD_ADDR_VAR 0 7
73538: PUSH
73539: LD_INT 0
73541: ST_TO_ADDR
73542: GO 73560
// min_x := x - r ;
73544: LD_ADDR_VAR 0 7
73548: PUSH
73549: LD_VAR 0 2
73553: PUSH
73554: LD_VAR 0 4
73558: MINUS
73559: ST_TO_ADDR
// if y - r < 0 then
73560: LD_VAR 0 3
73564: PUSH
73565: LD_VAR 0 4
73569: MINUS
73570: PUSH
73571: LD_INT 0
73573: LESS
73574: IFFALSE 73586
// min_y := 0 else
73576: LD_ADDR_VAR 0 8
73580: PUSH
73581: LD_INT 0
73583: ST_TO_ADDR
73584: GO 73602
// min_y := y - r ;
73586: LD_ADDR_VAR 0 8
73590: PUSH
73591: LD_VAR 0 3
73595: PUSH
73596: LD_VAR 0 4
73600: MINUS
73601: ST_TO_ADDR
// max_x := x + r ;
73602: LD_ADDR_VAR 0 9
73606: PUSH
73607: LD_VAR 0 2
73611: PUSH
73612: LD_VAR 0 4
73616: PLUS
73617: ST_TO_ADDR
// max_y := y + r ;
73618: LD_ADDR_VAR 0 10
73622: PUSH
73623: LD_VAR 0 3
73627: PUSH
73628: LD_VAR 0 4
73632: PLUS
73633: ST_TO_ADDR
// for _x = min_x to max_x do
73634: LD_ADDR_VAR 0 11
73638: PUSH
73639: DOUBLE
73640: LD_VAR 0 7
73644: DEC
73645: ST_TO_ADDR
73646: LD_VAR 0 9
73650: PUSH
73651: FOR_TO
73652: IFFALSE 73769
// for _y = min_y to max_y do
73654: LD_ADDR_VAR 0 12
73658: PUSH
73659: DOUBLE
73660: LD_VAR 0 8
73664: DEC
73665: ST_TO_ADDR
73666: LD_VAR 0 10
73670: PUSH
73671: FOR_TO
73672: IFFALSE 73765
// begin if not ValidHex ( _x , _y ) then
73674: LD_VAR 0 11
73678: PPUSH
73679: LD_VAR 0 12
73683: PPUSH
73684: CALL_OW 488
73688: NOT
73689: IFFALSE 73693
// continue ;
73691: GO 73671
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73693: LD_VAR 0 11
73697: PPUSH
73698: LD_VAR 0 12
73702: PPUSH
73703: CALL_OW 351
73707: PUSH
73708: LD_VAR 0 11
73712: PPUSH
73713: LD_VAR 0 12
73717: PPUSH
73718: CALL_OW 554
73722: AND
73723: IFFALSE 73763
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73725: LD_ADDR_VAR 0 13
73729: PUSH
73730: LD_VAR 0 13
73734: PPUSH
73735: LD_VAR 0 13
73739: PUSH
73740: LD_INT 1
73742: PLUS
73743: PPUSH
73744: LD_VAR 0 11
73748: PUSH
73749: LD_VAR 0 12
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PPUSH
73758: CALL_OW 2
73762: ST_TO_ADDR
// end ;
73763: GO 73671
73765: POP
73766: POP
73767: GO 73651
73769: POP
73770: POP
// if not list then
73771: LD_VAR 0 13
73775: NOT
73776: IFFALSE 73780
// exit ;
73778: GO 74024
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
73780: LD_ADDR_VAR 0 13
73784: PUSH
73785: LD_VAR 0 1
73789: PPUSH
73790: LD_VAR 0 13
73794: PPUSH
73795: LD_INT 1
73797: PPUSH
73798: LD_INT 1
73800: PPUSH
73801: CALL 19153 0 4
73805: ST_TO_ADDR
// ComStop ( flame ) ;
73806: LD_VAR 0 1
73810: PPUSH
73811: CALL_OW 141
// for i in list do
73815: LD_ADDR_VAR 0 6
73819: PUSH
73820: LD_VAR 0 13
73824: PUSH
73825: FOR_IN
73826: IFFALSE 73857
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
73828: LD_VAR 0 1
73832: PPUSH
73833: LD_VAR 0 6
73837: PUSH
73838: LD_INT 1
73840: ARRAY
73841: PPUSH
73842: LD_VAR 0 6
73846: PUSH
73847: LD_INT 2
73849: ARRAY
73850: PPUSH
73851: CALL_OW 176
73855: GO 73825
73857: POP
73858: POP
// repeat wait ( 0 0$1 ) ;
73859: LD_INT 35
73861: PPUSH
73862: CALL_OW 67
// task := GetTaskList ( flame ) ;
73866: LD_ADDR_VAR 0 14
73870: PUSH
73871: LD_VAR 0 1
73875: PPUSH
73876: CALL_OW 437
73880: ST_TO_ADDR
// if not task then
73881: LD_VAR 0 14
73885: NOT
73886: IFFALSE 73890
// exit ;
73888: GO 74024
// if task [ 1 ] [ 1 ] <> | then
73890: LD_VAR 0 14
73894: PUSH
73895: LD_INT 1
73897: ARRAY
73898: PUSH
73899: LD_INT 1
73901: ARRAY
73902: PUSH
73903: LD_STRING |
73905: NONEQUAL
73906: IFFALSE 73910
// exit ;
73908: GO 74024
// _x := task [ 1 ] [ 2 ] ;
73910: LD_ADDR_VAR 0 11
73914: PUSH
73915: LD_VAR 0 14
73919: PUSH
73920: LD_INT 1
73922: ARRAY
73923: PUSH
73924: LD_INT 2
73926: ARRAY
73927: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
73928: LD_ADDR_VAR 0 12
73932: PUSH
73933: LD_VAR 0 14
73937: PUSH
73938: LD_INT 1
73940: ARRAY
73941: PUSH
73942: LD_INT 3
73944: ARRAY
73945: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
73946: LD_VAR 0 11
73950: PPUSH
73951: LD_VAR 0 12
73955: PPUSH
73956: CALL_OW 351
73960: NOT
73961: PUSH
73962: LD_VAR 0 11
73966: PPUSH
73967: LD_VAR 0 12
73971: PPUSH
73972: CALL_OW 554
73976: NOT
73977: OR
73978: IFFALSE 74012
// begin task := Delete ( task , 1 ) ;
73980: LD_ADDR_VAR 0 14
73984: PUSH
73985: LD_VAR 0 14
73989: PPUSH
73990: LD_INT 1
73992: PPUSH
73993: CALL_OW 3
73997: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
73998: LD_VAR 0 1
74002: PPUSH
74003: LD_VAR 0 14
74007: PPUSH
74008: CALL_OW 446
// end ; until not HasTask ( flame ) ;
74012: LD_VAR 0 1
74016: PPUSH
74017: CALL_OW 314
74021: NOT
74022: IFFALSE 73859
// end ;
74024: LD_VAR 0 5
74028: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74029: LD_EXP 106
74033: NOT
74034: IFFALSE 74084
74036: GO 74038
74038: DISABLE
// begin initHack := true ;
74039: LD_ADDR_EXP 106
74043: PUSH
74044: LD_INT 1
74046: ST_TO_ADDR
// hackTanks := [ ] ;
74047: LD_ADDR_EXP 107
74051: PUSH
74052: EMPTY
74053: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74054: LD_ADDR_EXP 108
74058: PUSH
74059: EMPTY
74060: ST_TO_ADDR
// hackLimit := 3 ;
74061: LD_ADDR_EXP 109
74065: PUSH
74066: LD_INT 3
74068: ST_TO_ADDR
// hackDist := 12 ;
74069: LD_ADDR_EXP 110
74073: PUSH
74074: LD_INT 12
74076: ST_TO_ADDR
// hackCounter := [ ] ;
74077: LD_ADDR_EXP 111
74081: PUSH
74082: EMPTY
74083: ST_TO_ADDR
// end ;
74084: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74085: LD_EXP 106
74089: PUSH
74090: LD_INT 34
74092: PUSH
74093: LD_INT 99
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PPUSH
74100: CALL_OW 69
74104: AND
74105: IFFALSE 74358
74107: GO 74109
74109: DISABLE
74110: LD_INT 0
74112: PPUSH
74113: PPUSH
// begin enable ;
74114: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74115: LD_ADDR_VAR 0 1
74119: PUSH
74120: LD_INT 34
74122: PUSH
74123: LD_INT 99
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PPUSH
74130: CALL_OW 69
74134: PUSH
74135: FOR_IN
74136: IFFALSE 74356
// begin if not i in hackTanks then
74138: LD_VAR 0 1
74142: PUSH
74143: LD_EXP 107
74147: IN
74148: NOT
74149: IFFALSE 74232
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
74151: LD_ADDR_EXP 107
74155: PUSH
74156: LD_EXP 107
74160: PPUSH
74161: LD_EXP 107
74165: PUSH
74166: LD_INT 1
74168: PLUS
74169: PPUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: CALL_OW 1
74179: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
74180: LD_ADDR_EXP 108
74184: PUSH
74185: LD_EXP 108
74189: PPUSH
74190: LD_EXP 108
74194: PUSH
74195: LD_INT 1
74197: PLUS
74198: PPUSH
74199: EMPTY
74200: PPUSH
74201: CALL_OW 1
74205: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
74206: LD_ADDR_EXP 111
74210: PUSH
74211: LD_EXP 111
74215: PPUSH
74216: LD_EXP 111
74220: PUSH
74221: LD_INT 1
74223: PLUS
74224: PPUSH
74225: EMPTY
74226: PPUSH
74227: CALL_OW 1
74231: ST_TO_ADDR
// end ; if not IsOk ( i ) then
74232: LD_VAR 0 1
74236: PPUSH
74237: CALL_OW 302
74241: NOT
74242: IFFALSE 74255
// begin HackUnlinkAll ( i ) ;
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL 74361 0 1
// continue ;
74253: GO 74135
// end ; HackCheckCapturedStatus ( i ) ;
74255: LD_VAR 0 1
74259: PPUSH
74260: CALL 74804 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
74264: LD_ADDR_VAR 0 2
74268: PUSH
74269: LD_INT 81
74271: PUSH
74272: LD_VAR 0 1
74276: PPUSH
74277: CALL_OW 255
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 33
74288: PUSH
74289: LD_INT 3
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 91
74298: PUSH
74299: LD_VAR 0 1
74303: PUSH
74304: LD_EXP 110
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 50
74316: PUSH
74317: EMPTY
74318: LIST
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: PPUSH
74326: CALL_OW 69
74330: ST_TO_ADDR
// if not tmp then
74331: LD_VAR 0 2
74335: NOT
74336: IFFALSE 74340
// continue ;
74338: GO 74135
// HackLink ( i , tmp ) ;
74340: LD_VAR 0 1
74344: PPUSH
74345: LD_VAR 0 2
74349: PPUSH
74350: CALL 74497 0 2
// end ;
74354: GO 74135
74356: POP
74357: POP
// end ;
74358: PPOPN 2
74360: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
74361: LD_INT 0
74363: PPUSH
74364: PPUSH
74365: PPUSH
// if not hack in hackTanks then
74366: LD_VAR 0 1
74370: PUSH
74371: LD_EXP 107
74375: IN
74376: NOT
74377: IFFALSE 74381
// exit ;
74379: GO 74492
// index := GetElementIndex ( hackTanks , hack ) ;
74381: LD_ADDR_VAR 0 4
74385: PUSH
74386: LD_EXP 107
74390: PPUSH
74391: LD_VAR 0 1
74395: PPUSH
74396: CALL 18450 0 2
74400: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
74401: LD_EXP 108
74405: PUSH
74406: LD_VAR 0 4
74410: ARRAY
74411: IFFALSE 74492
// begin for i in hackTanksCaptured [ index ] do
74413: LD_ADDR_VAR 0 3
74417: PUSH
74418: LD_EXP 108
74422: PUSH
74423: LD_VAR 0 4
74427: ARRAY
74428: PUSH
74429: FOR_IN
74430: IFFALSE 74456
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
74432: LD_VAR 0 3
74436: PUSH
74437: LD_INT 1
74439: ARRAY
74440: PPUSH
74441: LD_VAR 0 3
74445: PUSH
74446: LD_INT 2
74448: ARRAY
74449: PPUSH
74450: CALL_OW 235
74454: GO 74429
74456: POP
74457: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74458: LD_ADDR_EXP 108
74462: PUSH
74463: LD_EXP 108
74467: PPUSH
74468: LD_VAR 0 4
74472: PPUSH
74473: EMPTY
74474: PPUSH
74475: CALL_OW 1
74479: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74480: LD_VAR 0 1
74484: PPUSH
74485: LD_INT 0
74487: PPUSH
74488: CALL_OW 505
// end ; end ;
74492: LD_VAR 0 2
74496: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74497: LD_INT 0
74499: PPUSH
74500: PPUSH
74501: PPUSH
// if not hack in hackTanks or not vehicles then
74502: LD_VAR 0 1
74506: PUSH
74507: LD_EXP 107
74511: IN
74512: NOT
74513: PUSH
74514: LD_VAR 0 2
74518: NOT
74519: OR
74520: IFFALSE 74524
// exit ;
74522: GO 74799
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74524: LD_ADDR_VAR 0 2
74528: PUSH
74529: LD_VAR 0 1
74533: PPUSH
74534: LD_VAR 0 2
74538: PPUSH
74539: LD_INT 1
74541: PPUSH
74542: LD_INT 1
74544: PPUSH
74545: CALL 19100 0 4
74549: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74550: LD_ADDR_VAR 0 5
74554: PUSH
74555: LD_EXP 107
74559: PPUSH
74560: LD_VAR 0 1
74564: PPUSH
74565: CALL 18450 0 2
74569: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74570: LD_EXP 108
74574: PUSH
74575: LD_VAR 0 5
74579: ARRAY
74580: PUSH
74581: LD_EXP 109
74585: LESS
74586: IFFALSE 74775
// begin for i := 1 to vehicles do
74588: LD_ADDR_VAR 0 4
74592: PUSH
74593: DOUBLE
74594: LD_INT 1
74596: DEC
74597: ST_TO_ADDR
74598: LD_VAR 0 2
74602: PUSH
74603: FOR_TO
74604: IFFALSE 74773
// begin if hackTanksCaptured [ index ] = hackLimit then
74606: LD_EXP 108
74610: PUSH
74611: LD_VAR 0 5
74615: ARRAY
74616: PUSH
74617: LD_EXP 109
74621: EQUAL
74622: IFFALSE 74626
// break ;
74624: GO 74773
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74626: LD_ADDR_EXP 111
74630: PUSH
74631: LD_EXP 111
74635: PPUSH
74636: LD_VAR 0 5
74640: PPUSH
74641: LD_EXP 111
74645: PUSH
74646: LD_VAR 0 5
74650: ARRAY
74651: PUSH
74652: LD_INT 1
74654: PLUS
74655: PPUSH
74656: CALL_OW 1
74660: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74661: LD_ADDR_EXP 108
74665: PUSH
74666: LD_EXP 108
74670: PPUSH
74671: LD_VAR 0 5
74675: PUSH
74676: LD_EXP 108
74680: PUSH
74681: LD_VAR 0 5
74685: ARRAY
74686: PUSH
74687: LD_INT 1
74689: PLUS
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PPUSH
74695: LD_VAR 0 2
74699: PUSH
74700: LD_VAR 0 4
74704: ARRAY
74705: PUSH
74706: LD_VAR 0 2
74710: PUSH
74711: LD_VAR 0 4
74715: ARRAY
74716: PPUSH
74717: CALL_OW 255
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PPUSH
74726: CALL 18665 0 3
74730: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74731: LD_VAR 0 2
74735: PUSH
74736: LD_VAR 0 4
74740: ARRAY
74741: PPUSH
74742: LD_VAR 0 1
74746: PPUSH
74747: CALL_OW 255
74751: PPUSH
74752: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74756: LD_VAR 0 2
74760: PUSH
74761: LD_VAR 0 4
74765: ARRAY
74766: PPUSH
74767: CALL_OW 141
// end ;
74771: GO 74603
74773: POP
74774: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74775: LD_VAR 0 1
74779: PPUSH
74780: LD_EXP 108
74784: PUSH
74785: LD_VAR 0 5
74789: ARRAY
74790: PUSH
74791: LD_INT 0
74793: PLUS
74794: PPUSH
74795: CALL_OW 505
// end ;
74799: LD_VAR 0 3
74803: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74804: LD_INT 0
74806: PPUSH
74807: PPUSH
74808: PPUSH
74809: PPUSH
// if not hack in hackTanks then
74810: LD_VAR 0 1
74814: PUSH
74815: LD_EXP 107
74819: IN
74820: NOT
74821: IFFALSE 74825
// exit ;
74823: GO 75065
// index := GetElementIndex ( hackTanks , hack ) ;
74825: LD_ADDR_VAR 0 4
74829: PUSH
74830: LD_EXP 107
74834: PPUSH
74835: LD_VAR 0 1
74839: PPUSH
74840: CALL 18450 0 2
74844: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74845: LD_ADDR_VAR 0 3
74849: PUSH
74850: DOUBLE
74851: LD_EXP 108
74855: PUSH
74856: LD_VAR 0 4
74860: ARRAY
74861: INC
74862: ST_TO_ADDR
74863: LD_INT 1
74865: PUSH
74866: FOR_DOWNTO
74867: IFFALSE 75039
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
74869: LD_ADDR_VAR 0 5
74873: PUSH
74874: LD_EXP 108
74878: PUSH
74879: LD_VAR 0 4
74883: ARRAY
74884: PUSH
74885: LD_VAR 0 3
74889: ARRAY
74890: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
74891: LD_VAR 0 5
74895: PUSH
74896: LD_INT 1
74898: ARRAY
74899: PPUSH
74900: CALL_OW 302
74904: NOT
74905: PUSH
74906: LD_VAR 0 5
74910: PUSH
74911: LD_INT 1
74913: ARRAY
74914: PPUSH
74915: CALL_OW 255
74919: PUSH
74920: LD_VAR 0 1
74924: PPUSH
74925: CALL_OW 255
74929: NONEQUAL
74930: OR
74931: IFFALSE 75037
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
74933: LD_VAR 0 5
74937: PUSH
74938: LD_INT 1
74940: ARRAY
74941: PPUSH
74942: CALL_OW 305
74946: PUSH
74947: LD_VAR 0 5
74951: PUSH
74952: LD_INT 1
74954: ARRAY
74955: PPUSH
74956: CALL_OW 255
74960: PUSH
74961: LD_VAR 0 1
74965: PPUSH
74966: CALL_OW 255
74970: EQUAL
74971: AND
74972: IFFALSE 74996
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
74974: LD_VAR 0 5
74978: PUSH
74979: LD_INT 1
74981: ARRAY
74982: PPUSH
74983: LD_VAR 0 5
74987: PUSH
74988: LD_INT 2
74990: ARRAY
74991: PPUSH
74992: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
74996: LD_ADDR_EXP 108
75000: PUSH
75001: LD_EXP 108
75005: PPUSH
75006: LD_VAR 0 4
75010: PPUSH
75011: LD_EXP 108
75015: PUSH
75016: LD_VAR 0 4
75020: ARRAY
75021: PPUSH
75022: LD_VAR 0 3
75026: PPUSH
75027: CALL_OW 3
75031: PPUSH
75032: CALL_OW 1
75036: ST_TO_ADDR
// end ; end ;
75037: GO 74866
75039: POP
75040: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75041: LD_VAR 0 1
75045: PPUSH
75046: LD_EXP 108
75050: PUSH
75051: LD_VAR 0 4
75055: ARRAY
75056: PUSH
75057: LD_INT 0
75059: PLUS
75060: PPUSH
75061: CALL_OW 505
// end ;
75065: LD_VAR 0 2
75069: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75070: LD_INT 0
75072: PPUSH
75073: PPUSH
75074: PPUSH
75075: PPUSH
// if not hack in hackTanks then
75076: LD_VAR 0 1
75080: PUSH
75081: LD_EXP 107
75085: IN
75086: NOT
75087: IFFALSE 75091
// exit ;
75089: GO 75176
// index := GetElementIndex ( hackTanks , hack ) ;
75091: LD_ADDR_VAR 0 5
75095: PUSH
75096: LD_EXP 107
75100: PPUSH
75101: LD_VAR 0 1
75105: PPUSH
75106: CALL 18450 0 2
75110: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75111: LD_ADDR_VAR 0 4
75115: PUSH
75116: DOUBLE
75117: LD_INT 1
75119: DEC
75120: ST_TO_ADDR
75121: LD_EXP 108
75125: PUSH
75126: LD_VAR 0 5
75130: ARRAY
75131: PUSH
75132: FOR_TO
75133: IFFALSE 75174
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75135: LD_EXP 108
75139: PUSH
75140: LD_VAR 0 5
75144: ARRAY
75145: PUSH
75146: LD_VAR 0 4
75150: ARRAY
75151: PUSH
75152: LD_INT 1
75154: ARRAY
75155: PUSH
75156: LD_VAR 0 2
75160: EQUAL
75161: IFFALSE 75172
// KillUnit ( vehicle ) ;
75163: LD_VAR 0 2
75167: PPUSH
75168: CALL_OW 66
75172: GO 75132
75174: POP
75175: POP
// end ;
75176: LD_VAR 0 3
75180: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
75181: LD_EXP 112
75185: NOT
75186: IFFALSE 75221
75188: GO 75190
75190: DISABLE
// begin initMiner := true ;
75191: LD_ADDR_EXP 112
75195: PUSH
75196: LD_INT 1
75198: ST_TO_ADDR
// minersList := [ ] ;
75199: LD_ADDR_EXP 113
75203: PUSH
75204: EMPTY
75205: ST_TO_ADDR
// minerMinesList := [ ] ;
75206: LD_ADDR_EXP 114
75210: PUSH
75211: EMPTY
75212: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
75213: LD_ADDR_EXP 115
75217: PUSH
75218: LD_INT 5
75220: ST_TO_ADDR
// end ;
75221: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
75222: LD_EXP 112
75226: PUSH
75227: LD_INT 34
75229: PUSH
75230: LD_INT 81
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PPUSH
75237: CALL_OW 69
75241: AND
75242: IFFALSE 75703
75244: GO 75246
75246: DISABLE
75247: LD_INT 0
75249: PPUSH
75250: PPUSH
75251: PPUSH
75252: PPUSH
// begin enable ;
75253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
75254: LD_ADDR_VAR 0 1
75258: PUSH
75259: LD_INT 34
75261: PUSH
75262: LD_INT 81
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PPUSH
75269: CALL_OW 69
75273: PUSH
75274: FOR_IN
75275: IFFALSE 75347
// begin if not i in minersList then
75277: LD_VAR 0 1
75281: PUSH
75282: LD_EXP 113
75286: IN
75287: NOT
75288: IFFALSE 75345
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
75290: LD_ADDR_EXP 113
75294: PUSH
75295: LD_EXP 113
75299: PPUSH
75300: LD_EXP 113
75304: PUSH
75305: LD_INT 1
75307: PLUS
75308: PPUSH
75309: LD_VAR 0 1
75313: PPUSH
75314: CALL_OW 1
75318: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75319: LD_ADDR_EXP 114
75323: PUSH
75324: LD_EXP 114
75328: PPUSH
75329: LD_EXP 114
75333: PUSH
75334: LD_INT 1
75336: PLUS
75337: PPUSH
75338: EMPTY
75339: PPUSH
75340: CALL_OW 1
75344: ST_TO_ADDR
// end end ;
75345: GO 75274
75347: POP
75348: POP
// for i := minerMinesList downto 1 do
75349: LD_ADDR_VAR 0 1
75353: PUSH
75354: DOUBLE
75355: LD_EXP 114
75359: INC
75360: ST_TO_ADDR
75361: LD_INT 1
75363: PUSH
75364: FOR_DOWNTO
75365: IFFALSE 75701
// begin if IsLive ( minersList [ i ] ) then
75367: LD_EXP 113
75371: PUSH
75372: LD_VAR 0 1
75376: ARRAY
75377: PPUSH
75378: CALL_OW 300
75382: IFFALSE 75410
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
75384: LD_EXP 113
75388: PUSH
75389: LD_VAR 0 1
75393: ARRAY
75394: PPUSH
75395: LD_EXP 114
75399: PUSH
75400: LD_VAR 0 1
75404: ARRAY
75405: PPUSH
75406: CALL_OW 505
// if not minerMinesList [ i ] then
75410: LD_EXP 114
75414: PUSH
75415: LD_VAR 0 1
75419: ARRAY
75420: NOT
75421: IFFALSE 75425
// continue ;
75423: GO 75364
// for j := minerMinesList [ i ] downto 1 do
75425: LD_ADDR_VAR 0 2
75429: PUSH
75430: DOUBLE
75431: LD_EXP 114
75435: PUSH
75436: LD_VAR 0 1
75440: ARRAY
75441: INC
75442: ST_TO_ADDR
75443: LD_INT 1
75445: PUSH
75446: FOR_DOWNTO
75447: IFFALSE 75697
// begin side := GetSide ( minersList [ i ] ) ;
75449: LD_ADDR_VAR 0 3
75453: PUSH
75454: LD_EXP 113
75458: PUSH
75459: LD_VAR 0 1
75463: ARRAY
75464: PPUSH
75465: CALL_OW 255
75469: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75470: LD_ADDR_VAR 0 4
75474: PUSH
75475: LD_EXP 114
75479: PUSH
75480: LD_VAR 0 1
75484: ARRAY
75485: PUSH
75486: LD_VAR 0 2
75490: ARRAY
75491: PUSH
75492: LD_INT 1
75494: ARRAY
75495: PPUSH
75496: LD_EXP 114
75500: PUSH
75501: LD_VAR 0 1
75505: ARRAY
75506: PUSH
75507: LD_VAR 0 2
75511: ARRAY
75512: PUSH
75513: LD_INT 2
75515: ARRAY
75516: PPUSH
75517: CALL_OW 428
75521: ST_TO_ADDR
// if not tmp then
75522: LD_VAR 0 4
75526: NOT
75527: IFFALSE 75531
// continue ;
75529: GO 75446
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75531: LD_VAR 0 4
75535: PUSH
75536: LD_INT 81
75538: PUSH
75539: LD_VAR 0 3
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: PPUSH
75548: CALL_OW 69
75552: IN
75553: PUSH
75554: LD_EXP 114
75558: PUSH
75559: LD_VAR 0 1
75563: ARRAY
75564: PUSH
75565: LD_VAR 0 2
75569: ARRAY
75570: PUSH
75571: LD_INT 1
75573: ARRAY
75574: PPUSH
75575: LD_EXP 114
75579: PUSH
75580: LD_VAR 0 1
75584: ARRAY
75585: PUSH
75586: LD_VAR 0 2
75590: ARRAY
75591: PUSH
75592: LD_INT 2
75594: ARRAY
75595: PPUSH
75596: CALL_OW 458
75600: AND
75601: IFFALSE 75695
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75603: LD_EXP 114
75607: PUSH
75608: LD_VAR 0 1
75612: ARRAY
75613: PUSH
75614: LD_VAR 0 2
75618: ARRAY
75619: PUSH
75620: LD_INT 1
75622: ARRAY
75623: PPUSH
75624: LD_EXP 114
75628: PUSH
75629: LD_VAR 0 1
75633: ARRAY
75634: PUSH
75635: LD_VAR 0 2
75639: ARRAY
75640: PUSH
75641: LD_INT 2
75643: ARRAY
75644: PPUSH
75645: LD_VAR 0 3
75649: PPUSH
75650: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75654: LD_ADDR_EXP 114
75658: PUSH
75659: LD_EXP 114
75663: PPUSH
75664: LD_VAR 0 1
75668: PPUSH
75669: LD_EXP 114
75673: PUSH
75674: LD_VAR 0 1
75678: ARRAY
75679: PPUSH
75680: LD_VAR 0 2
75684: PPUSH
75685: CALL_OW 3
75689: PPUSH
75690: CALL_OW 1
75694: ST_TO_ADDR
// end ; end ;
75695: GO 75446
75697: POP
75698: POP
// end ;
75699: GO 75364
75701: POP
75702: POP
// end ;
75703: PPOPN 4
75705: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75706: LD_INT 0
75708: PPUSH
75709: PPUSH
// result := false ;
75710: LD_ADDR_VAR 0 4
75714: PUSH
75715: LD_INT 0
75717: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75718: LD_VAR 0 1
75722: PPUSH
75723: CALL_OW 264
75727: PUSH
75728: LD_INT 81
75730: EQUAL
75731: NOT
75732: IFFALSE 75736
// exit ;
75734: GO 75976
// index := GetElementIndex ( minersList , unit ) ;
75736: LD_ADDR_VAR 0 5
75740: PUSH
75741: LD_EXP 113
75745: PPUSH
75746: LD_VAR 0 1
75750: PPUSH
75751: CALL 18450 0 2
75755: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75756: LD_EXP 114
75760: PUSH
75761: LD_VAR 0 5
75765: ARRAY
75766: PUSH
75767: LD_EXP 115
75771: GREATEREQUAL
75772: IFFALSE 75776
// exit ;
75774: GO 75976
// ComMoveXY ( unit , x , y ) ;
75776: LD_VAR 0 1
75780: PPUSH
75781: LD_VAR 0 2
75785: PPUSH
75786: LD_VAR 0 3
75790: PPUSH
75791: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75795: LD_INT 35
75797: PPUSH
75798: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_VAR 0 2
75811: PPUSH
75812: LD_VAR 0 3
75816: PPUSH
75817: CALL 50191 0 3
75821: NOT
75822: PUSH
75823: LD_VAR 0 1
75827: PPUSH
75828: CALL_OW 314
75832: AND
75833: IFFALSE 75837
// exit ;
75835: GO 75976
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75837: LD_VAR 0 2
75841: PPUSH
75842: LD_VAR 0 3
75846: PPUSH
75847: CALL_OW 428
75851: PUSH
75852: LD_VAR 0 1
75856: EQUAL
75857: PUSH
75858: LD_VAR 0 1
75862: PPUSH
75863: CALL_OW 314
75867: NOT
75868: AND
75869: IFFALSE 75795
// PlaySoundXY ( x , y , PlantMine ) ;
75871: LD_VAR 0 2
75875: PPUSH
75876: LD_VAR 0 3
75880: PPUSH
75881: LD_STRING PlantMine
75883: PPUSH
75884: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
75888: LD_VAR 0 2
75892: PPUSH
75893: LD_VAR 0 3
75897: PPUSH
75898: LD_VAR 0 1
75902: PPUSH
75903: CALL_OW 255
75907: PPUSH
75908: LD_INT 0
75910: PPUSH
75911: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
75915: LD_ADDR_EXP 114
75919: PUSH
75920: LD_EXP 114
75924: PPUSH
75925: LD_VAR 0 5
75929: PUSH
75930: LD_EXP 114
75934: PUSH
75935: LD_VAR 0 5
75939: ARRAY
75940: PUSH
75941: LD_INT 1
75943: PLUS
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PPUSH
75949: LD_VAR 0 2
75953: PUSH
75954: LD_VAR 0 3
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PPUSH
75963: CALL 18665 0 3
75967: ST_TO_ADDR
// result := true ;
75968: LD_ADDR_VAR 0 4
75972: PUSH
75973: LD_INT 1
75975: ST_TO_ADDR
// end ;
75976: LD_VAR 0 4
75980: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
75981: LD_INT 0
75983: PPUSH
75984: PPUSH
75985: PPUSH
// if not unit in minersList then
75986: LD_VAR 0 1
75990: PUSH
75991: LD_EXP 113
75995: IN
75996: NOT
75997: IFFALSE 76001
// exit ;
75999: GO 76393
// index := GetElementIndex ( minersList , unit ) ;
76001: LD_ADDR_VAR 0 6
76005: PUSH
76006: LD_EXP 113
76010: PPUSH
76011: LD_VAR 0 1
76015: PPUSH
76016: CALL 18450 0 2
76020: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76021: LD_ADDR_VAR 0 5
76025: PUSH
76026: DOUBLE
76027: LD_EXP 114
76031: PUSH
76032: LD_VAR 0 6
76036: ARRAY
76037: INC
76038: ST_TO_ADDR
76039: LD_INT 1
76041: PUSH
76042: FOR_DOWNTO
76043: IFFALSE 76204
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76045: LD_EXP 114
76049: PUSH
76050: LD_VAR 0 6
76054: ARRAY
76055: PUSH
76056: LD_VAR 0 5
76060: ARRAY
76061: PUSH
76062: LD_INT 1
76064: ARRAY
76065: PUSH
76066: LD_VAR 0 2
76070: EQUAL
76071: PUSH
76072: LD_EXP 114
76076: PUSH
76077: LD_VAR 0 6
76081: ARRAY
76082: PUSH
76083: LD_VAR 0 5
76087: ARRAY
76088: PUSH
76089: LD_INT 2
76091: ARRAY
76092: PUSH
76093: LD_VAR 0 3
76097: EQUAL
76098: AND
76099: IFFALSE 76202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76101: LD_EXP 114
76105: PUSH
76106: LD_VAR 0 6
76110: ARRAY
76111: PUSH
76112: LD_VAR 0 5
76116: ARRAY
76117: PUSH
76118: LD_INT 1
76120: ARRAY
76121: PPUSH
76122: LD_EXP 114
76126: PUSH
76127: LD_VAR 0 6
76131: ARRAY
76132: PUSH
76133: LD_VAR 0 5
76137: ARRAY
76138: PUSH
76139: LD_INT 2
76141: ARRAY
76142: PPUSH
76143: LD_VAR 0 1
76147: PPUSH
76148: CALL_OW 255
76152: PPUSH
76153: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76157: LD_ADDR_EXP 114
76161: PUSH
76162: LD_EXP 114
76166: PPUSH
76167: LD_VAR 0 6
76171: PPUSH
76172: LD_EXP 114
76176: PUSH
76177: LD_VAR 0 6
76181: ARRAY
76182: PPUSH
76183: LD_VAR 0 5
76187: PPUSH
76188: CALL_OW 3
76192: PPUSH
76193: CALL_OW 1
76197: ST_TO_ADDR
// exit ;
76198: POP
76199: POP
76200: GO 76393
// end ; end ;
76202: GO 76042
76204: POP
76205: POP
// for i := minerMinesList [ index ] downto 1 do
76206: LD_ADDR_VAR 0 5
76210: PUSH
76211: DOUBLE
76212: LD_EXP 114
76216: PUSH
76217: LD_VAR 0 6
76221: ARRAY
76222: INC
76223: ST_TO_ADDR
76224: LD_INT 1
76226: PUSH
76227: FOR_DOWNTO
76228: IFFALSE 76391
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
76230: LD_EXP 114
76234: PUSH
76235: LD_VAR 0 6
76239: ARRAY
76240: PUSH
76241: LD_VAR 0 5
76245: ARRAY
76246: PUSH
76247: LD_INT 1
76249: ARRAY
76250: PPUSH
76251: LD_EXP 114
76255: PUSH
76256: LD_VAR 0 6
76260: ARRAY
76261: PUSH
76262: LD_VAR 0 5
76266: ARRAY
76267: PUSH
76268: LD_INT 2
76270: ARRAY
76271: PPUSH
76272: LD_VAR 0 2
76276: PPUSH
76277: LD_VAR 0 3
76281: PPUSH
76282: CALL_OW 298
76286: PUSH
76287: LD_INT 6
76289: LESS
76290: IFFALSE 76389
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76292: LD_EXP 114
76296: PUSH
76297: LD_VAR 0 6
76301: ARRAY
76302: PUSH
76303: LD_VAR 0 5
76307: ARRAY
76308: PUSH
76309: LD_INT 1
76311: ARRAY
76312: PPUSH
76313: LD_EXP 114
76317: PUSH
76318: LD_VAR 0 6
76322: ARRAY
76323: PUSH
76324: LD_VAR 0 5
76328: ARRAY
76329: PUSH
76330: LD_INT 2
76332: ARRAY
76333: PPUSH
76334: LD_VAR 0 1
76338: PPUSH
76339: CALL_OW 255
76343: PPUSH
76344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76348: LD_ADDR_EXP 114
76352: PUSH
76353: LD_EXP 114
76357: PPUSH
76358: LD_VAR 0 6
76362: PPUSH
76363: LD_EXP 114
76367: PUSH
76368: LD_VAR 0 6
76372: ARRAY
76373: PPUSH
76374: LD_VAR 0 5
76378: PPUSH
76379: CALL_OW 3
76383: PPUSH
76384: CALL_OW 1
76388: ST_TO_ADDR
// end ; end ;
76389: GO 76227
76391: POP
76392: POP
// end ;
76393: LD_VAR 0 4
76397: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
76398: LD_INT 0
76400: PPUSH
76401: PPUSH
76402: PPUSH
76403: PPUSH
76404: PPUSH
76405: PPUSH
76406: PPUSH
76407: PPUSH
76408: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
76409: LD_VAR 0 1
76413: PPUSH
76414: CALL_OW 264
76418: PUSH
76419: LD_INT 81
76421: EQUAL
76422: NOT
76423: PUSH
76424: LD_VAR 0 1
76428: PUSH
76429: LD_EXP 113
76433: IN
76434: NOT
76435: OR
76436: IFFALSE 76440
// exit ;
76438: GO 76762
// index := GetElementIndex ( minersList , unit ) ;
76440: LD_ADDR_VAR 0 6
76444: PUSH
76445: LD_EXP 113
76449: PPUSH
76450: LD_VAR 0 1
76454: PPUSH
76455: CALL 18450 0 2
76459: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76460: LD_ADDR_VAR 0 8
76464: PUSH
76465: LD_EXP 115
76469: PUSH
76470: LD_EXP 114
76474: PUSH
76475: LD_VAR 0 6
76479: ARRAY
76480: MINUS
76481: ST_TO_ADDR
// if not minesFreeAmount then
76482: LD_VAR 0 8
76486: NOT
76487: IFFALSE 76491
// exit ;
76489: GO 76762
// tmp := [ ] ;
76491: LD_ADDR_VAR 0 7
76495: PUSH
76496: EMPTY
76497: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76498: LD_ADDR_VAR 0 5
76502: PUSH
76503: DOUBLE
76504: LD_INT 1
76506: DEC
76507: ST_TO_ADDR
76508: LD_VAR 0 8
76512: PUSH
76513: FOR_TO
76514: IFFALSE 76709
// begin _d := rand ( 0 , 5 ) ;
76516: LD_ADDR_VAR 0 11
76520: PUSH
76521: LD_INT 0
76523: PPUSH
76524: LD_INT 5
76526: PPUSH
76527: CALL_OW 12
76531: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76532: LD_ADDR_VAR 0 12
76536: PUSH
76537: LD_INT 2
76539: PPUSH
76540: LD_INT 6
76542: PPUSH
76543: CALL_OW 12
76547: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76548: LD_ADDR_VAR 0 9
76552: PUSH
76553: LD_VAR 0 2
76557: PPUSH
76558: LD_VAR 0 11
76562: PPUSH
76563: LD_VAR 0 12
76567: PPUSH
76568: CALL_OW 272
76572: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76573: LD_ADDR_VAR 0 10
76577: PUSH
76578: LD_VAR 0 3
76582: PPUSH
76583: LD_VAR 0 11
76587: PPUSH
76588: LD_VAR 0 12
76592: PPUSH
76593: CALL_OW 273
76597: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76598: LD_VAR 0 9
76602: PPUSH
76603: LD_VAR 0 10
76607: PPUSH
76608: CALL_OW 488
76612: PUSH
76613: LD_VAR 0 9
76617: PUSH
76618: LD_VAR 0 10
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_VAR 0 7
76631: IN
76632: NOT
76633: AND
76634: PUSH
76635: LD_VAR 0 9
76639: PPUSH
76640: LD_VAR 0 10
76644: PPUSH
76645: CALL_OW 458
76649: NOT
76650: AND
76651: IFFALSE 76693
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76653: LD_ADDR_VAR 0 7
76657: PUSH
76658: LD_VAR 0 7
76662: PPUSH
76663: LD_VAR 0 7
76667: PUSH
76668: LD_INT 1
76670: PLUS
76671: PPUSH
76672: LD_VAR 0 9
76676: PUSH
76677: LD_VAR 0 10
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PPUSH
76686: CALL_OW 1
76690: ST_TO_ADDR
76691: GO 76707
// i := i - 1 ;
76693: LD_ADDR_VAR 0 5
76697: PUSH
76698: LD_VAR 0 5
76702: PUSH
76703: LD_INT 1
76705: MINUS
76706: ST_TO_ADDR
// end ;
76707: GO 76513
76709: POP
76710: POP
// for i in tmp do
76711: LD_ADDR_VAR 0 5
76715: PUSH
76716: LD_VAR 0 7
76720: PUSH
76721: FOR_IN
76722: IFFALSE 76760
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_VAR 0 5
76733: PUSH
76734: LD_INT 1
76736: ARRAY
76737: PPUSH
76738: LD_VAR 0 5
76742: PUSH
76743: LD_INT 2
76745: ARRAY
76746: PPUSH
76747: CALL 75706 0 3
76751: NOT
76752: IFFALSE 76758
// exit ;
76754: POP
76755: POP
76756: GO 76762
76758: GO 76721
76760: POP
76761: POP
// end ;
76762: LD_VAR 0 4
76766: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76767: LD_INT 0
76769: PPUSH
76770: PPUSH
76771: PPUSH
76772: PPUSH
76773: PPUSH
76774: PPUSH
76775: PPUSH
// if not GetClass ( unit ) = class_sniper then
76776: LD_VAR 0 1
76780: PPUSH
76781: CALL_OW 257
76785: PUSH
76786: LD_INT 5
76788: EQUAL
76789: NOT
76790: IFFALSE 76794
// exit ;
76792: GO 77182
// dist := 8 ;
76794: LD_ADDR_VAR 0 5
76798: PUSH
76799: LD_INT 8
76801: ST_TO_ADDR
// viewRange := 12 ;
76802: LD_ADDR_VAR 0 7
76806: PUSH
76807: LD_INT 12
76809: ST_TO_ADDR
// side := GetSide ( unit ) ;
76810: LD_ADDR_VAR 0 6
76814: PUSH
76815: LD_VAR 0 1
76819: PPUSH
76820: CALL_OW 255
76824: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76825: LD_INT 61
76827: PPUSH
76828: LD_VAR 0 6
76832: PPUSH
76833: CALL_OW 321
76837: PUSH
76838: LD_INT 2
76840: EQUAL
76841: IFFALSE 76851
// viewRange := 16 ;
76843: LD_ADDR_VAR 0 7
76847: PUSH
76848: LD_INT 16
76850: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76851: LD_VAR 0 1
76855: PPUSH
76856: LD_VAR 0 2
76860: PPUSH
76861: LD_VAR 0 3
76865: PPUSH
76866: CALL_OW 297
76870: PUSH
76871: LD_VAR 0 5
76875: GREATER
76876: IFFALSE 76955
// begin ComMoveXY ( unit , x , y ) ;
76878: LD_VAR 0 1
76882: PPUSH
76883: LD_VAR 0 2
76887: PPUSH
76888: LD_VAR 0 3
76892: PPUSH
76893: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76897: LD_INT 35
76899: PPUSH
76900: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
76904: LD_VAR 0 1
76908: PPUSH
76909: LD_VAR 0 2
76913: PPUSH
76914: LD_VAR 0 3
76918: PPUSH
76919: CALL 50191 0 3
76923: NOT
76924: IFFALSE 76928
// exit ;
76926: GO 77182
// until GetDistUnitXY ( unit , x , y ) < dist ;
76928: LD_VAR 0 1
76932: PPUSH
76933: LD_VAR 0 2
76937: PPUSH
76938: LD_VAR 0 3
76942: PPUSH
76943: CALL_OW 297
76947: PUSH
76948: LD_VAR 0 5
76952: LESS
76953: IFFALSE 76897
// end ; ComTurnXY ( unit , x , y ) ;
76955: LD_VAR 0 1
76959: PPUSH
76960: LD_VAR 0 2
76964: PPUSH
76965: LD_VAR 0 3
76969: PPUSH
76970: CALL_OW 118
// wait ( 5 ) ;
76974: LD_INT 5
76976: PPUSH
76977: CALL_OW 67
// _d := GetDir ( unit ) ;
76981: LD_ADDR_VAR 0 10
76985: PUSH
76986: LD_VAR 0 1
76990: PPUSH
76991: CALL_OW 254
76995: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
76996: LD_ADDR_VAR 0 8
77000: PUSH
77001: LD_VAR 0 1
77005: PPUSH
77006: CALL_OW 250
77010: PPUSH
77011: LD_VAR 0 10
77015: PPUSH
77016: LD_VAR 0 5
77020: PPUSH
77021: CALL_OW 272
77025: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77026: LD_ADDR_VAR 0 9
77030: PUSH
77031: LD_VAR 0 1
77035: PPUSH
77036: CALL_OW 251
77040: PPUSH
77041: LD_VAR 0 10
77045: PPUSH
77046: LD_VAR 0 5
77050: PPUSH
77051: CALL_OW 273
77055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77056: LD_VAR 0 8
77060: PPUSH
77061: LD_VAR 0 9
77065: PPUSH
77066: CALL_OW 488
77070: NOT
77071: IFFALSE 77075
// exit ;
77073: GO 77182
// ComAnimCustom ( unit , 1 ) ;
77075: LD_VAR 0 1
77079: PPUSH
77080: LD_INT 1
77082: PPUSH
77083: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77087: LD_VAR 0 8
77091: PPUSH
77092: LD_VAR 0 9
77096: PPUSH
77097: LD_VAR 0 6
77101: PPUSH
77102: LD_VAR 0 7
77106: PPUSH
77107: CALL_OW 330
// repeat wait ( 1 ) ;
77111: LD_INT 1
77113: PPUSH
77114: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77118: LD_VAR 0 1
77122: PPUSH
77123: CALL_OW 316
77127: PUSH
77128: LD_VAR 0 1
77132: PPUSH
77133: CALL_OW 314
77137: OR
77138: PUSH
77139: LD_VAR 0 1
77143: PPUSH
77144: CALL_OW 302
77148: NOT
77149: OR
77150: PUSH
77151: LD_VAR 0 1
77155: PPUSH
77156: CALL_OW 301
77160: OR
77161: IFFALSE 77111
// RemoveSeeing ( _x , _y , side ) ;
77163: LD_VAR 0 8
77167: PPUSH
77168: LD_VAR 0 9
77172: PPUSH
77173: LD_VAR 0 6
77177: PPUSH
77178: CALL_OW 331
// end ; end_of_file
77182: LD_VAR 0 4
77186: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77187: LD_VAR 0 1
77191: PPUSH
77192: LD_VAR 0 2
77196: PPUSH
77197: LD_VAR 0 3
77201: PPUSH
77202: LD_VAR 0 4
77206: PPUSH
77207: LD_VAR 0 5
77211: PPUSH
77212: LD_VAR 0 6
77216: PPUSH
77217: CALL 56646 0 6
// end ;
77221: PPOPN 6
77223: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77224: LD_INT 0
77226: PPUSH
// begin if not units then
77227: LD_VAR 0 1
77231: NOT
77232: IFFALSE 77236
// exit ;
77234: GO 77236
// end ;
77236: PPOPN 7
77238: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77239: CALL 56533 0 0
// end ; end_of_file
77243: PPOPN 1
77245: END
