// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3636 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 306
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 244
// if i then
 203: LD_VAR 0 2
 207: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i ) ;
 209: LD_ADDR_EXP 5
 213: PUSH
 214: LD_EXP 5
 218: PPUSH
 219: LD_INT 1
 221: PPUSH
 222: LD_EXP 5
 226: PUSH
 227: LD_INT 1
 229: ARRAY
 230: PUSH
 231: LD_VAR 0 2
 235: UNION
 236: PPUSH
 237: CALL_OW 1
 241: ST_TO_ADDR
 242: GO 200
 244: POP
 245: POP
// for i = 0 to 6 do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 0
 254: DEC
 255: ST_TO_ADDR
 256: LD_INT 6
 258: PUSH
 259: FOR_TO
 260: IFFALSE 302
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 262: LD_ADDR_EXP 16
 266: PUSH
 267: LD_EXP 16
 271: PPUSH
 272: LD_EXP 16
 276: PUSH
 277: LD_INT 1
 279: PLUS
 280: PPUSH
 281: LD_VAR 0 2
 285: PPUSH
 286: CALL_OW 426
 290: PUSH
 291: LD_INT 1
 293: PLUS
 294: PPUSH
 295: CALL_OW 2
 299: ST_TO_ADDR
 300: GO 259
 302: POP
 303: POP
// end else
 304: GO 461
// begin Game_Type := 1 ;
 306: LD_ADDR_EXP 1
 310: PUSH
 311: LD_INT 1
 313: ST_TO_ADDR
// Your_Side := 2 ;
 314: LD_ADDR_OWVAR 2
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// Side_Positions := [ 1 , 0 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 322: LD_ADDR_EXP 2
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: LD_INT 0
 332: PUSH
 333: LD_INT 0
 335: PUSH
 336: LD_INT 0
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: ST_TO_ADDR
// Side_Teams := [ 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 361: LD_ADDR_EXP 3
 365: PUSH
 366: LD_INT 1
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 1
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: LIST
 399: ST_TO_ADDR
// Side_Nations := [ 3 , 0 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 400: LD_ADDR_EXP 4
 404: PUSH
 405: LD_INT 3
 407: PUSH
 408: LD_INT 0
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: LD_INT 3
 419: PUSH
 420: LD_INT 0
 422: PUSH
 423: LD_INT 3
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: ST_TO_ADDR
// Teams := [ [ 1 , 5 , 7 ] ] ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 1
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 7
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: EMPTY
 459: LIST
 460: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 461: LD_ADDR_EXP 7
 465: PUSH
 466: LD_INT 203
 468: PUSH
 469: LD_INT 174
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 114
 478: PUSH
 479: LD_INT 171
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: LD_INT 26
 488: PUSH
 489: LD_INT 44
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: ST_TO_ADDR
// Bot_Side := 2 ;
 516: LD_ADDR_EXP 8
 520: PUSH
 521: LD_INT 2
 523: ST_TO_ADDR
// for i = 1 to 8 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 8
 536: PUSH
 537: FOR_TO
 538: IFFALSE 632
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 540: LD_VAR 0 2
 544: PPUSH
 545: CALL_OW 530
 549: PUSH
 550: LD_VAR 0 2
 554: PPUSH
 555: CALL_OW 532
 559: OR
 560: IFFALSE 585
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 562: LD_ADDR_EXP 2
 566: PUSH
 567: LD_EXP 2
 571: PPUSH
 572: LD_VAR 0 2
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 1
 584: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 585: LD_EXP 4
 589: PUSH
 590: LD_VAR 0 2
 594: ARRAY
 595: PUSH
 596: LD_EXP 4
 600: PUSH
 601: LD_INT 3
 603: NONEQUAL
 604: AND
 605: IFFALSE 630
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 607: LD_ADDR_EXP 4
 611: PUSH
 612: LD_EXP 4
 616: PPUSH
 617: LD_VAR 0 2
 621: PPUSH
 622: LD_INT 3
 624: PPUSH
 625: CALL_OW 1
 629: ST_TO_ADDR
// end ;
 630: GO 537
 632: POP
 633: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 634: LD_EXP 8
 638: PUSH
 639: LD_INT 2
 641: EQUAL
 642: PUSH
 643: LD_EXP 2
 647: PUSH
 648: LD_INT 2
 650: ARRAY
 651: AND
 652: IFFALSE 662
// bot_side := 5 ;
 654: LD_ADDR_EXP 8
 658: PUSH
 659: LD_INT 5
 661: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 662: LD_EXP 8
 666: PUSH
 667: LD_INT 5
 669: EQUAL
 670: PUSH
 671: LD_EXP 2
 675: PUSH
 676: LD_INT 5
 678: ARRAY
 679: AND
 680: IFFALSE 690
// bot_side := 8 ;
 682: LD_ADDR_EXP 8
 686: PUSH
 687: LD_INT 8
 689: ST_TO_ADDR
// Team_Game := true ;
 690: LD_ADDR_EXP 6
 694: PUSH
 695: LD_INT 1
 697: ST_TO_ADDR
// for i = 1 to 8 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 8
 710: PUSH
 711: FOR_TO
 712: IFFALSE 748
// if i <> bot_side then
 714: LD_VAR 0 2
 718: PUSH
 719: LD_EXP 8
 723: NONEQUAL
 724: IFFALSE 746
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_EXP 8
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL_OW 80
 746: GO 711
 748: POP
 749: POP
// for i := 2 to Teams [ 1 ] do
 750: LD_ADDR_VAR 0 2
 754: PUSH
 755: DOUBLE
 756: LD_INT 2
 758: DEC
 759: ST_TO_ADDR
 760: LD_EXP 5
 764: PUSH
 765: LD_INT 1
 767: ARRAY
 768: PUSH
 769: FOR_TO
 770: IFFALSE 844
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 772: LD_EXP 5
 776: PUSH
 777: LD_INT 1
 779: ARRAY
 780: PUSH
 781: LD_VAR 0 2
 785: ARRAY
 786: PPUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_INT 1
 798: ARRAY
 799: PPUSH
 800: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 804: LD_EXP 5
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PPUSH
 819: LD_EXP 5
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: PUSH
 828: LD_INT 1
 830: ARRAY
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 80
// end ;
 842: GO 769
 844: POP
 845: POP
// if not Multiplayer then
 846: LD_OWVAR 4
 850: NOT
 851: IFFALSE 888
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 853: LD_ADDR_EXP 16
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 1
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: LD_INT 3
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 888: LD_ADDR_EXP 10
 892: PUSH
 893: LD_INT 9
 895: PUSH
 896: LD_INT 12
 898: PUSH
 899: LD_INT 15
 901: PUSH
 902: LD_INT 24
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: ARRAY
 920: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 921: LD_ADDR_EXP 11
 925: PUSH
 926: LD_INT 2
 928: PUSH
 929: LD_INT 4
 931: PUSH
 932: LD_INT 6
 934: PUSH
 935: LD_INT 8
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: LD_EXP 16
 948: PUSH
 949: LD_INT 2
 951: ARRAY
 952: ARRAY
 953: ST_TO_ADDR
// crates_spawn := [ 0 0$30 , 0 0$25 , 0 0$20 , 0 0$17 ] [ definitions [ 3 ] ] ;
 954: LD_ADDR_EXP 12
 958: PUSH
 959: LD_INT 1050
 961: PUSH
 962: LD_INT 875
 964: PUSH
 965: LD_INT 700
 967: PUSH
 968: LD_INT 595
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: LD_EXP 16
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: ARRAY
 986: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 987: LD_ADDR_EXP 13
 991: PUSH
 992: LD_INT 0
 994: PUSH
 995: LD_INT 10500
 997: PUSH
 998: LD_INT 6300
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_EXP 16
1010: PUSH
1011: LD_INT 4
1013: ARRAY
1014: ARRAY
1015: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1016: LD_ADDR_EXP 14
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 31500
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_EXP 16
1039: PUSH
1040: LD_INT 4
1042: ARRAY
1043: ARRAY
1044: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1045: LD_ADDR_EXP 15
1049: PUSH
1050: LD_INT 0
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 5
1058: PUSH
1059: LD_INT 7
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: PUSH
1068: LD_EXP 16
1072: PUSH
1073: LD_INT 5
1075: ARRAY
1076: ARRAY
1077: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1078: LD_ADDR_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: LD_INT 6
1104: ARRAY
1105: ARRAY
1106: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1107: LD_ADDR_EXP 26
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_EXP 16
1130: PUSH
1131: LD_INT 7
1133: ARRAY
1134: ARRAY
1135: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1136: LD_ADDR_EXP 23
1140: PUSH
1141: LD_INT 11353
1143: PUSH
1144: LD_INT 12244
1146: PUSH
1147: LD_INT 44444
1149: PUSH
1150: LD_INT 12345
1152: PUSH
1153: LD_INT 43413
1155: PUSH
1156: LD_INT 14152
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1167: LD_ADDR_EXP 24
1171: PUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 6
1177: PPUSH
1178: CALL_OW 12
1182: ST_TO_ADDR
// if bot_side <> 2 then
1183: LD_EXP 8
1187: PUSH
1188: LD_INT 2
1190: NONEQUAL
1191: IFFALSE 1234
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: LD_INT 22
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 69
1212: PUSH
1213: FOR_IN
1214: IFFALSE 1232
// SetSide ( i , bot_side ) ;
1216: LD_VAR 0 2
1220: PPUSH
1221: LD_EXP 8
1225: PPUSH
1226: CALL_OW 235
1230: GO 1213
1232: POP
1233: POP
// ResetFog ;
1234: CALL_OW 335
// PreparePeople ( ) ;
1238: CALL 2068 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1242: LD_ADDR_EXP 18
1246: PUSH
1247: LD_INT 14
1249: PUSH
1250: LD_INT 15
1252: PUSH
1253: LD_INT 16
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// if amount_of_apeman then
1261: LD_EXP 15
1265: IFFALSE 1315
// for j in apeman_areas do
1267: LD_ADDR_VAR 0 3
1271: PUSH
1272: LD_EXP 18
1276: PUSH
1277: FOR_IN
1278: IFFALSE 1313
// for i = 1 to amount_of_apeman do
1280: LD_ADDR_VAR 0 2
1284: PUSH
1285: DOUBLE
1286: LD_INT 1
1288: DEC
1289: ST_TO_ADDR
1290: LD_EXP 15
1294: PUSH
1295: FOR_TO
1296: IFFALSE 1309
// AddApeman ( j ) ;
1298: LD_VAR 0 3
1302: PPUSH
1303: CALL 3017 0 1
1307: GO 1295
1309: POP
1310: POP
1311: GO 1277
1313: POP
1314: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1315: LD_INT 22
1317: PUSH
1318: LD_OWVAR 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PPUSH
1327: CALL_OW 69
1331: PUSH
1332: LD_INT 1
1334: ARRAY
1335: PPUSH
1336: CALL_OW 87
// disable ( 17 ) ;
1340: LD_INT 17
1342: DISABLE_MARKED
// end ;
1343: LD_VAR 0 1
1347: RET
// every 3 3$40 trigger game_start do
1348: LD_EXP 9
1352: IFFALSE 1408
1354: GO 1356
1356: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1357: LD_OWVAR 1
1361: PUSH
1362: LD_INT 5
1364: MOD
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: PPUSH
1370: LD_INT 13
1372: PPUSH
1373: LD_INT 1
1375: PPUSH
1376: CALL_OW 55
// Wait ( 0 0$15 ) ;
1380: LD_INT 525
1382: PPUSH
1383: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1387: LD_OWVAR 1
1391: PUSH
1392: LD_INT 5
1394: MOD
1395: PUSH
1396: LD_INT 1
1398: PLUS
1399: PPUSH
1400: LD_INT 1
1402: PPUSH
1403: CALL_OW 57
// enable ;
1407: ENABLE
// end ;
1408: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1409: LD_EXP 9
1413: IFFALSE 2065
1415: GO 1417
1417: DISABLE
1418: LD_INT 0
1420: PPUSH
1421: PPUSH
// begin cr := 1 ;
1422: LD_ADDR_VAR 0 1
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_INT 1
1437: PPUSH
1438: LD_INT 3
1440: PPUSH
1441: CALL_OW 12
1445: PUSH
1446: LD_INT 2
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL_OW 12
1456: PUSH
1457: LD_INT 3
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 12
1467: PUSH
1468: LD_INT 3
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PUSH
1479: LD_INT 2
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL_OW 12
1489: PUSH
1490: LD_INT 1
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 12
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: ST_TO_ADDR
// while ( true ) do
1509: LD_INT 1
1511: IFFALSE 2065
// begin Wait ( crates_spawn + ( tick mod 35 * 60 ) ) ;
1513: LD_EXP 12
1517: PUSH
1518: LD_OWVAR 1
1522: PUSH
1523: LD_INT 35
1525: MOD
1526: PUSH
1527: LD_INT 60
1529: MUL
1530: PLUS
1531: PPUSH
1532: CALL_OW 67
// if cr mod 3 = 0 then
1536: LD_VAR 0 1
1540: PUSH
1541: LD_INT 3
1543: MOD
1544: PUSH
1545: LD_INT 0
1547: EQUAL
1548: IFFALSE 1701
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1550: LD_VAR 0 2
1554: PUSH
1555: LD_VAR 0 1
1559: PUSH
1560: LD_VAR 0 2
1564: MOD
1565: PUSH
1566: LD_INT 1
1568: PLUS
1569: ARRAY
1570: PPUSH
1571: LD_INT 17
1573: PPUSH
1574: LD_INT 1
1576: PPUSH
1577: CALL_OW 55
// Wait ( crates_spawn ) ;
1581: LD_EXP 12
1585: PPUSH
1586: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1590: LD_VAR 0 2
1594: PUSH
1595: LD_VAR 0 1
1599: PUSH
1600: LD_VAR 0 2
1604: MOD
1605: PUSH
1606: LD_INT 1
1608: PLUS
1609: ARRAY
1610: PPUSH
1611: LD_INT 18
1613: PPUSH
1614: LD_INT 1
1616: PPUSH
1617: CALL_OW 55
// Wait ( crates_spawn ) ;
1621: LD_EXP 12
1625: PPUSH
1626: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1630: LD_VAR 0 2
1634: PUSH
1635: LD_VAR 0 1
1639: PUSH
1640: LD_VAR 0 2
1644: MOD
1645: PUSH
1646: LD_INT 1
1648: PLUS
1649: ARRAY
1650: PPUSH
1651: LD_INT 19
1653: PPUSH
1654: LD_INT 1
1656: PPUSH
1657: CALL_OW 55
// Wait ( crates_spawn ) ;
1661: LD_EXP 12
1665: PPUSH
1666: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1670: LD_VAR 0 2
1674: PUSH
1675: LD_VAR 0 1
1679: PUSH
1680: LD_VAR 0 2
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: ARRAY
1690: PPUSH
1691: LD_INT 17
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: CALL_OW 55
// end ; if cr mod 3 = 1 then
1701: LD_VAR 0 1
1705: PUSH
1706: LD_INT 3
1708: MOD
1709: PUSH
1710: LD_INT 1
1712: EQUAL
1713: IFFALSE 1866
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1715: LD_VAR 0 2
1719: PUSH
1720: LD_VAR 0 1
1724: PUSH
1725: LD_VAR 0 2
1729: MOD
1730: PUSH
1731: LD_INT 1
1733: PLUS
1734: ARRAY
1735: PPUSH
1736: LD_INT 18
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 55
// Wait ( crates_spawn ) ;
1746: LD_EXP 12
1750: PPUSH
1751: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1755: LD_VAR 0 2
1759: PUSH
1760: LD_VAR 0 1
1764: PUSH
1765: LD_VAR 0 2
1769: MOD
1770: PUSH
1771: LD_INT 1
1773: PLUS
1774: ARRAY
1775: PPUSH
1776: LD_INT 17
1778: PPUSH
1779: LD_INT 1
1781: PPUSH
1782: CALL_OW 55
// Wait ( crates_spawn ) ;
1786: LD_EXP 12
1790: PPUSH
1791: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1795: LD_VAR 0 2
1799: PUSH
1800: LD_VAR 0 1
1804: PUSH
1805: LD_VAR 0 2
1809: MOD
1810: PUSH
1811: LD_INT 1
1813: PLUS
1814: ARRAY
1815: PPUSH
1816: LD_INT 19
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 55
// Wait ( crates_spawn ) ;
1826: LD_EXP 12
1830: PPUSH
1831: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1835: LD_VAR 0 2
1839: PUSH
1840: LD_VAR 0 1
1844: PUSH
1845: LD_VAR 0 2
1849: MOD
1850: PUSH
1851: LD_INT 1
1853: PLUS
1854: ARRAY
1855: PPUSH
1856: LD_INT 18
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL_OW 55
// end ; if cr mod 3 = 2 then
1866: LD_VAR 0 1
1870: PUSH
1871: LD_INT 3
1873: MOD
1874: PUSH
1875: LD_INT 2
1877: EQUAL
1878: IFFALSE 2031
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1880: LD_VAR 0 2
1884: PUSH
1885: LD_VAR 0 1
1889: PUSH
1890: LD_VAR 0 2
1894: MOD
1895: PUSH
1896: LD_INT 1
1898: PLUS
1899: ARRAY
1900: PPUSH
1901: LD_INT 19
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: CALL_OW 55
// Wait ( crates_spawn ) ;
1911: LD_EXP 12
1915: PPUSH
1916: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1920: LD_VAR 0 2
1924: PUSH
1925: LD_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: MOD
1935: PUSH
1936: LD_INT 1
1938: PLUS
1939: ARRAY
1940: PPUSH
1941: LD_INT 18
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: CALL_OW 55
// Wait ( crates_spawn ) ;
1951: LD_EXP 12
1955: PPUSH
1956: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1960: LD_VAR 0 2
1964: PUSH
1965: LD_VAR 0 1
1969: PUSH
1970: LD_VAR 0 2
1974: MOD
1975: PUSH
1976: LD_INT 1
1978: PLUS
1979: ARRAY
1980: PPUSH
1981: LD_INT 17
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: CALL_OW 55
// Wait ( crates_spawn ) ;
1991: LD_EXP 12
1995: PPUSH
1996: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2000: LD_VAR 0 2
2004: PUSH
2005: LD_VAR 0 1
2009: PUSH
2010: LD_VAR 0 2
2014: MOD
2015: PUSH
2016: LD_INT 1
2018: PLUS
2019: ARRAY
2020: PPUSH
2021: LD_INT 19
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 55
// end ; cr := cr + 1 ;
2031: LD_ADDR_VAR 0 1
2035: PUSH
2036: LD_VAR 0 1
2040: PUSH
2041: LD_INT 1
2043: PLUS
2044: ST_TO_ADDR
// if cr > 150 then
2045: LD_VAR 0 1
2049: PUSH
2050: LD_INT 150
2052: GREATER
2053: IFFALSE 2063
// cr := 43 ;
2055: LD_ADDR_VAR 0 1
2059: PUSH
2060: LD_INT 43
2062: ST_TO_ADDR
// end ;
2063: GO 1509
// end ; end_of_file
2065: PPOPN 2
2067: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
// to_copy := [ ] ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: EMPTY
2085: ST_TO_ADDR
// for i = 1 to 8 do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_INT 8
2098: PUSH
2099: FOR_TO
2100: IFFALSE 3010
// begin if Side_Positions [ i ] then
2102: LD_EXP 2
2106: PUSH
2107: LD_VAR 0 2
2111: ARRAY
2112: IFFALSE 3008
// begin uc_side := i ;
2114: LD_ADDR_OWVAR 20
2118: PUSH
2119: LD_VAR 0 2
2123: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2124: LD_ADDR_OWVAR 21
2128: PUSH
2129: LD_EXP 4
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2140: LD_ADDR_VAR 0 6
2144: PUSH
2145: LD_EXP 7
2149: PUSH
2150: LD_EXP 2
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: ARRAY
2161: PUSH
2162: LD_INT 1
2164: ARRAY
2165: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2166: LD_ADDR_VAR 0 7
2170: PUSH
2171: LD_EXP 7
2175: PUSH
2176: LD_EXP 2
2180: PUSH
2181: LD_VAR 0 2
2185: ARRAY
2186: ARRAY
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: ST_TO_ADDR
// hc_importance := 100 ;
2192: LD_ADDR_OWVAR 32
2196: PUSH
2197: LD_INT 100
2199: ST_TO_ADDR
// if Multiplayer then
2200: LD_OWVAR 4
2204: IFFALSE 2262
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2206: LD_ADDR_OWVAR 26
2210: PUSH
2211: LD_OWVAR 19
2215: PUSH
2216: LD_OWVAR 20
2220: ARRAY
2221: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2222: LD_ADDR_OWVAR 33
2226: PUSH
2227: LD_STRING MULTIAVATARS
2229: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2230: LD_ADDR_OWVAR 34
2234: PUSH
2235: LD_OWVAR 20
2239: PPUSH
2240: CALL_OW 525
2244: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2245: LD_ADDR_OWVAR 27
2249: PUSH
2250: LD_OWVAR 20
2254: PPUSH
2255: CALL_OW 526
2259: ST_TO_ADDR
// end else
2260: GO 2294
// begin hc_name :=  ;
2262: LD_ADDR_OWVAR 26
2266: PUSH
2267: LD_STRING 
2269: ST_TO_ADDR
// hc_gallery :=  ;
2270: LD_ADDR_OWVAR 33
2274: PUSH
2275: LD_STRING 
2277: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2278: LD_ADDR_OWVAR 27
2282: PUSH
2283: LD_INT 1
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL_OW 12
2293: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2294: LD_OWVAR 27
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: LD_EXP 11
2306: PPUSH
2307: CALL_OW 380
// un := CreateHuman ;
2311: LD_ADDR_VAR 0 4
2315: PUSH
2316: CALL_OW 44
2320: ST_TO_ADDR
// if not to_copy then
2321: LD_VAR 0 5
2325: NOT
2326: IFFALSE 2353
// to_copy := Replace ( to_copy , 1 , un ) else
2328: LD_ADDR_VAR 0 5
2332: PUSH
2333: LD_VAR 0 5
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: LD_VAR 0 4
2345: PPUSH
2346: CALL_OW 1
2350: ST_TO_ADDR
2351: GO 2429
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2353: LD_VAR 0 5
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_VAR 0 4
2366: PPUSH
2367: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2371: LD_VAR 0 4
2375: PPUSH
2376: LD_INT 2
2378: PPUSH
2379: LD_VAR 0 5
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 260
2395: PPUSH
2396: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2400: LD_VAR 0 4
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_VAR 0 5
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: CALL_OW 260
2424: PPUSH
2425: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2429: LD_VAR 0 4
2433: PPUSH
2434: LD_VAR 0 6
2438: PPUSH
2439: LD_VAR 0 7
2443: PPUSH
2444: LD_INT 10
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 50
// hc_importance := 0 ;
2454: LD_ADDR_OWVAR 32
2458: PUSH
2459: LD_INT 0
2461: ST_TO_ADDR
// hc_name :=  ;
2462: LD_ADDR_OWVAR 26
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// hc_gallery :=  ;
2470: LD_ADDR_OWVAR 33
2474: PUSH
2475: LD_STRING 
2477: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2478: LD_ADDR_VAR 0 9
2482: PUSH
2483: LD_EXP 10
2487: PUSH
2488: LD_INT 1
2490: MINUS
2491: PUSH
2492: LD_INT 4
2494: DIVREAL
2495: ST_TO_ADDR
// c := 1 ;
2496: LD_ADDR_VAR 0 8
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// for j = 2 to number_of_people do
2504: LD_ADDR_VAR 0 3
2508: PUSH
2509: DOUBLE
2510: LD_INT 2
2512: DEC
2513: ST_TO_ADDR
2514: LD_EXP 10
2518: PUSH
2519: FOR_TO
2520: IFFALSE 2731
// begin PrepareHuman ( false , c , skill_level ) ;
2522: LD_INT 0
2524: PPUSH
2525: LD_VAR 0 8
2529: PPUSH
2530: LD_EXP 11
2534: PPUSH
2535: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2539: LD_VAR 0 3
2543: PUSH
2544: LD_INT 1
2546: MINUS
2547: PUSH
2548: LD_VAR 0 9
2552: MOD
2553: PUSH
2554: LD_INT 0
2556: EQUAL
2557: IFFALSE 2573
// c := c + 1 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 8
2568: PUSH
2569: LD_INT 1
2571: PLUS
2572: ST_TO_ADDR
// un := CreateHuman ;
2573: LD_ADDR_VAR 0 4
2577: PUSH
2578: CALL_OW 44
2582: ST_TO_ADDR
// if to_copy < j then
2583: LD_VAR 0 5
2587: PUSH
2588: LD_VAR 0 3
2592: LESS
2593: IFFALSE 2622
// to_copy := Replace ( to_copy , j , un ) else
2595: LD_ADDR_VAR 0 5
2599: PUSH
2600: LD_VAR 0 5
2604: PPUSH
2605: LD_VAR 0 3
2609: PPUSH
2610: LD_VAR 0 4
2614: PPUSH
2615: CALL_OW 1
2619: ST_TO_ADDR
2620: GO 2704
// begin CopySkills ( to_copy [ j ] , un ) ;
2622: LD_VAR 0 5
2626: PUSH
2627: LD_VAR 0 3
2631: ARRAY
2632: PPUSH
2633: LD_VAR 0 4
2637: PPUSH
2638: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2642: LD_VAR 0 4
2646: PPUSH
2647: LD_INT 2
2649: PPUSH
2650: LD_VAR 0 5
2654: PUSH
2655: LD_VAR 0 3
2659: ARRAY
2660: PPUSH
2661: LD_INT 2
2663: PPUSH
2664: CALL_OW 260
2668: PPUSH
2669: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2673: LD_VAR 0 4
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_VAR 0 5
2685: PUSH
2686: LD_VAR 0 3
2690: ARRAY
2691: PPUSH
2692: LD_INT 1
2694: PPUSH
2695: CALL_OW 260
2699: PPUSH
2700: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2704: LD_VAR 0 4
2708: PPUSH
2709: LD_VAR 0 6
2713: PPUSH
2714: LD_VAR 0 7
2718: PPUSH
2719: LD_INT 10
2721: PPUSH
2722: LD_INT 0
2724: PPUSH
2725: CALL_OW 50
// end ;
2729: GO 2519
2731: POP
2732: POP
// if handicap then
2733: LD_EXP 26
2737: IFFALSE 3008
// begin if handicap = 1 then
2739: LD_EXP 26
2743: PUSH
2744: LD_INT 1
2746: EQUAL
2747: IFFALSE 2826
// for j = 1 to 2 do
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: DOUBLE
2755: LD_INT 1
2757: DEC
2758: ST_TO_ADDR
2759: LD_INT 2
2761: PUSH
2762: FOR_TO
2763: IFFALSE 2824
// begin vc_chassis := ru_medium_tracked ;
2765: LD_ADDR_OWVAR 37
2769: PUSH
2770: LD_INT 22
2772: ST_TO_ADDR
// vc_engine := engine_combustion ;
2773: LD_ADDR_OWVAR 39
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// vc_control := control_manual ;
2781: LD_ADDR_OWVAR 38
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// vc_weapon := ru_gun ;
2789: LD_ADDR_OWVAR 40
2793: PUSH
2794: LD_INT 44
2796: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2797: CALL_OW 45
2801: PPUSH
2802: LD_VAR 0 6
2806: PPUSH
2807: LD_VAR 0 7
2811: PPUSH
2812: LD_INT 13
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 50
// end ;
2822: GO 2762
2824: POP
2825: POP
// if handicap = 2 then
2826: LD_EXP 26
2830: PUSH
2831: LD_INT 2
2833: EQUAL
2834: IFFALSE 3008
// begin for j = 1 to 2 do
2836: LD_ADDR_VAR 0 3
2840: PUSH
2841: DOUBLE
2842: LD_INT 1
2844: DEC
2845: ST_TO_ADDR
2846: LD_INT 2
2848: PUSH
2849: FOR_TO
2850: IFFALSE 2924
// begin vc_chassis := ru_heavy_tracked ;
2852: LD_ADDR_OWVAR 37
2856: PUSH
2857: LD_INT 24
2859: ST_TO_ADDR
// vc_engine := engine_combustion ;
2860: LD_ADDR_OWVAR 39
2864: PUSH
2865: LD_INT 1
2867: ST_TO_ADDR
// vc_control := control_manual ;
2868: LD_ADDR_OWVAR 38
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2876: LD_ADDR_OWVAR 40
2880: PUSH
2881: LD_INT 43
2883: PUSH
2884: LD_INT 46
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_VAR 0 3
2895: ARRAY
2896: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2897: CALL_OW 45
2901: PPUSH
2902: LD_VAR 0 6
2906: PPUSH
2907: LD_VAR 0 7
2911: PPUSH
2912: LD_INT 13
2914: PPUSH
2915: LD_INT 0
2917: PPUSH
2918: CALL_OW 50
// end ;
2922: GO 2849
2924: POP
2925: POP
// vc_chassis := ru_medium_tracked ;
2926: LD_ADDR_OWVAR 37
2930: PUSH
2931: LD_INT 22
2933: ST_TO_ADDR
// vc_engine := engine_siberite ;
2934: LD_ADDR_OWVAR 39
2938: PUSH
2939: LD_INT 3
2941: ST_TO_ADDR
// vc_control := control_computer ;
2942: LD_ADDR_OWVAR 38
2946: PUSH
2947: LD_INT 3
2949: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2950: LD_ADDR_OWVAR 40
2954: PUSH
2955: LD_INT 51
2957: ST_TO_ADDR
// un := CreateVehicle ;
2958: LD_ADDR_VAR 0 4
2962: PUSH
2963: CALL_OW 45
2967: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
2968: LD_VAR 0 4
2972: PPUSH
2973: LD_VAR 0 6
2977: PPUSH
2978: LD_VAR 0 7
2982: PPUSH
2983: LD_INT 13
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
2993: LD_VAR 0 4
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 100
3003: PPUSH
3004: CALL_OW 290
// end ; end ; end ; end ;
3008: GO 2099
3010: POP
3011: POP
// end ;
3012: LD_VAR 0 1
3016: RET
// export function AddApeman ( area ) ; begin
3017: LD_INT 0
3019: PPUSH
// uc_nation := 0 ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// uc_side := 0 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 0
3035: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3036: LD_ADDR_OWVAR 35
3040: PUSH
3041: LD_INT 10
3043: NEG
3044: PPUSH
3045: LD_INT 15
3047: PPUSH
3048: CALL_OW 12
3052: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3053: LD_INT 0
3055: PPUSH
3056: LD_INT 12
3058: PPUSH
3059: LD_INT 0
3061: PPUSH
3062: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3066: LD_ADDR_OWVAR 29
3070: PUSH
3071: LD_INT 10
3073: PUSH
3074: LD_INT 12
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3081: CALL_OW 44
3085: PPUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: LD_INT 0
3093: PPUSH
3094: CALL_OW 49
// end ;
3098: LD_VAR 0 2
3102: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
// r := 100 ;
3109: LD_ADDR_VAR 0 5
3113: PUSH
3114: LD_INT 100
3116: ST_TO_ADDR
// x := 0 ;
3117: LD_ADDR_VAR 0 6
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// while ( x < n ) do
3125: LD_VAR 0 6
3129: PUSH
3130: LD_VAR 0 2
3134: LESS
3135: IFFALSE 3450
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
3137: LD_ADDR_VAR 0 4
3141: PUSH
3142: DOUBLE
3143: LD_INT 1
3145: DEC
3146: ST_TO_ADDR
3147: LD_VAR 0 1
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 517
3159: PUSH
3160: LD_INT 1
3162: ARRAY
3163: PUSH
3164: FOR_TO
3165: IFFALSE 3446
// begin if r > 50 then
3167: LD_VAR 0 5
3171: PUSH
3172: LD_INT 50
3174: GREATER
3175: IFFALSE 3422
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 517
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PUSH
3194: LD_VAR 0 4
3198: ARRAY
3199: PPUSH
3200: LD_VAR 0 1
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL_OW 517
3212: PUSH
3213: LD_INT 2
3215: ARRAY
3216: PUSH
3217: LD_VAR 0 4
3221: ARRAY
3222: PPUSH
3223: CALL_OW 458
3227: NOT
3228: IFFALSE 3406
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , bot_side , 0 ) ;
3230: LD_VAR 0 1
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 517
3242: PUSH
3243: LD_INT 1
3245: ARRAY
3246: PUSH
3247: LD_VAR 0 4
3251: ARRAY
3252: PPUSH
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: CALL_OW 517
3265: PUSH
3266: LD_INT 2
3268: ARRAY
3269: PUSH
3270: LD_VAR 0 4
3274: ARRAY
3275: PPUSH
3276: LD_EXP 8
3280: PPUSH
3281: LD_INT 0
3283: PPUSH
3284: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 1 ] [ i ] ) ;
3288: LD_ADDR_EXP 17
3292: PUSH
3293: LD_EXP 17
3297: PPUSH
3298: LD_EXP 17
3302: PUSH
3303: LD_INT 1
3305: PLUS
3306: PPUSH
3307: LD_VAR 0 1
3311: PPUSH
3312: LD_INT 0
3314: PPUSH
3315: CALL_OW 517
3319: PUSH
3320: LD_INT 1
3322: ARRAY
3323: PUSH
3324: LD_VAR 0 4
3328: ARRAY
3329: PPUSH
3330: CALL_OW 2
3334: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 2 ] [ i ] ) ;
3335: LD_ADDR_EXP 17
3339: PUSH
3340: LD_EXP 17
3344: PPUSH
3345: LD_EXP 17
3349: PUSH
3350: LD_INT 1
3352: PLUS
3353: PPUSH
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_INT 0
3361: PPUSH
3362: CALL_OW 517
3366: PUSH
3367: LD_INT 2
3369: ARRAY
3370: PUSH
3371: LD_VAR 0 4
3375: ARRAY
3376: PPUSH
3377: CALL_OW 2
3381: ST_TO_ADDR
// r := 0 ;
3382: LD_ADDR_VAR 0 5
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// x := x + 1 ;
3390: LD_ADDR_VAR 0 6
3394: PUSH
3395: LD_VAR 0 6
3399: PUSH
3400: LD_INT 1
3402: PLUS
3403: ST_TO_ADDR
// end else
3404: GO 3420
// r := r + 35 ;
3406: LD_ADDR_VAR 0 5
3410: PUSH
3411: LD_VAR 0 5
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end else
3420: GO 3444
// r := r + rand ( 10 , 25 ) ;
3422: LD_ADDR_VAR 0 5
3426: PUSH
3427: LD_VAR 0 5
3431: PUSH
3432: LD_INT 10
3434: PPUSH
3435: LD_INT 25
3437: PPUSH
3438: CALL_OW 12
3442: PLUS
3443: ST_TO_ADDR
// end ;
3444: GO 3164
3446: POP
3447: POP
3448: GO 3125
// end ;
3450: LD_VAR 0 3
3454: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3455: LD_INT 0
3457: PPUSH
3458: PPUSH
3459: PPUSH
// if not GetControl ( veh ) = control_manual then
3460: LD_VAR 0 1
3464: PPUSH
3465: CALL_OW 263
3469: PUSH
3470: LD_INT 1
3472: EQUAL
3473: NOT
3474: IFFALSE 3486
// result := false else
3476: LD_ADDR_VAR 0 2
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
3484: GO 3631
// if veh in FilterAllUnits ( [ f_empty ] ) then
3486: LD_VAR 0 1
3490: PUSH
3491: LD_INT 58
3493: PUSH
3494: EMPTY
3495: LIST
3496: PPUSH
3497: CALL_OW 69
3501: IN
3502: IFFALSE 3514
// result := false else
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: LD_INT 0
3511: ST_TO_ADDR
3512: GO 3631
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 22
3521: PUSH
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 255
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 55
3538: PUSH
3539: EMPTY
3540: LIST
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PPUSH
3546: CALL_OW 69
3550: ST_TO_ADDR
// if not filter then
3551: LD_VAR 0 4
3555: NOT
3556: IFFALSE 3568
// result := false else
3558: LD_ADDR_VAR 0 2
3562: PUSH
3563: LD_INT 0
3565: ST_TO_ADDR
3566: GO 3631
// for i = 1 to filter do
3568: LD_ADDR_VAR 0 3
3572: PUSH
3573: DOUBLE
3574: LD_INT 1
3576: DEC
3577: ST_TO_ADDR
3578: LD_VAR 0 4
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3629
// if IsDriver ( filter [ i ] ) = veh then
3586: LD_VAR 0 4
3590: PUSH
3591: LD_VAR 0 3
3595: ARRAY
3596: PPUSH
3597: CALL 43943 0 1
3601: PUSH
3602: LD_VAR 0 1
3606: EQUAL
3607: IFFALSE 3627
// begin result := filter [ i ] ;
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_VAR 0 4
3618: PUSH
3619: LD_VAR 0 3
3623: ARRAY
3624: ST_TO_ADDR
// break ;
3625: GO 3629
// end ;
3627: GO 3583
3629: POP
3630: POP
// end ; end ; end_of_file
3631: LD_VAR 0 2
3635: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3636: LD_INT 0
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
3644: PPUSH
3645: PPUSH
3646: PPUSH
// side := Bot_Side ;
3647: LD_ADDR_VAR 0 5
3651: PUSH
3652: LD_EXP 8
3656: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3657: LD_ADDR_VAR 0 9
3661: PUSH
3662: LD_INT 4
3664: PUSH
3665: LD_INT 6
3667: PUSH
3668: LD_INT 8
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: PUSH
3676: LD_OWVAR 67
3680: ARRAY
3681: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3682: LD_ADDR_VAR 0 8
3686: PUSH
3687: LD_INT 27
3689: PUSH
3690: LD_INT 28
3692: PUSH
3693: LD_INT 25
3695: PUSH
3696: LD_INT 26
3698: PUSH
3699: EMPTY
3700: LIST
3701: LIST
3702: LIST
3703: LIST
3704: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3705: LD_ADDR_EXP 22
3709: PUSH
3710: LD_INT 4
3712: PUSH
3713: LD_INT 5
3715: PUSH
3716: LD_INT 6
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_OWVAR 67
3728: ARRAY
3729: ST_TO_ADDR
// ct := [ ] ;
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: EMPTY
3736: ST_TO_ADDR
// patrols := [ ] ;
3737: LD_ADDR_EXP 19
3741: PUSH
3742: EMPTY
3743: ST_TO_ADDR
// attackers := [ ] ;
3744: LD_ADDR_EXP 20
3748: PUSH
3749: EMPTY
3750: ST_TO_ADDR
// attackers_tmp := [ ] ;
3751: LD_ADDR_EXP 27
3755: PUSH
3756: EMPTY
3757: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
3758: LD_ADDR_EXP 21
3762: PUSH
3763: LD_INT 14
3765: PUSH
3766: LD_INT 1
3768: PUSH
3769: LD_INT 2
3771: PUSH
3772: LD_INT 27
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 14
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: LD_INT 25
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 14
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 2
3807: PUSH
3808: LD_INT 28
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 14
3819: PUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 2
3825: PUSH
3826: LD_INT 29
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// if Difficulty > 2 then
3841: LD_OWVAR 67
3845: PUSH
3846: LD_INT 2
3848: GREATER
3849: IFFALSE 3917
// begin to_produce := Join ( to_produce , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ) ;
3851: LD_ADDR_EXP 21
3855: PUSH
3856: LD_EXP 21
3860: PPUSH
3861: LD_INT 14
3863: PUSH
3864: LD_INT 1
3866: PUSH
3867: LD_INT 2
3869: PUSH
3870: LD_INT 27
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PPUSH
3879: CALL 46327 0 2
3883: ST_TO_ADDR
// to_produce := Join ( to_produce , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
3884: LD_ADDR_EXP 21
3888: PUSH
3889: LD_EXP 21
3893: PPUSH
3894: LD_INT 13
3896: PUSH
3897: LD_INT 3
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: LD_INT 29
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: CALL 46327 0 2
3916: ST_TO_ADDR
// end ; SetBName ( ar_dep , newkabul ) ;
3917: LD_INT 2
3919: PPUSH
3920: LD_STRING newkabul
3922: PPUSH
3923: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3927: LD_INT 2
3929: PPUSH
3930: CALL_OW 274
3934: PPUSH
3935: LD_INT 1
3937: PPUSH
3938: LD_INT 90000
3940: PPUSH
3941: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3945: LD_INT 2
3947: PPUSH
3948: CALL_OW 274
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_INT 9000
3958: PPUSH
3959: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3963: LD_INT 2
3965: PPUSH
3966: CALL_OW 274
3970: PPUSH
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 3000
3976: PPUSH
3977: CALL_OW 277
// if Difficulty > 1 then
3981: LD_OWVAR 67
3985: PUSH
3986: LD_INT 1
3988: GREATER
3989: IFFALSE 4006
// SetTech ( 5 , side , state_researched ) ;
3991: LD_INT 5
3993: PPUSH
3994: LD_VAR 0 5
3998: PPUSH
3999: LD_INT 2
4001: PPUSH
4002: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
4006: LD_INT 41
4008: PPUSH
4009: LD_VAR 0 5
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
4021: LD_INT 51
4023: PPUSH
4024: LD_VAR 0 5
4028: PPUSH
4029: LD_INT 2
4031: PPUSH
4032: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4036: LD_INT 52
4038: PPUSH
4039: LD_VAR 0 5
4043: PPUSH
4044: LD_INT 2
4046: PPUSH
4047: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4051: LD_INT 53
4053: PPUSH
4054: LD_VAR 0 5
4058: PPUSH
4059: LD_INT 2
4061: PPUSH
4062: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4066: LD_INT 60
4068: PPUSH
4069: LD_VAR 0 5
4073: PPUSH
4074: LD_INT 2
4076: PPUSH
4077: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4081: LD_INT 61
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4096: LD_INT 62
4098: PPUSH
4099: LD_VAR 0 5
4103: PPUSH
4104: LD_INT 2
4106: PPUSH
4107: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: LD_INT 22
4118: PUSH
4119: LD_VAR 0 5
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 21
4130: PUSH
4131: LD_INT 3
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 69
4146: PUSH
4147: FOR_IN
4148: IFFALSE 4181
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4150: LD_VAR 0 2
4154: PPUSH
4155: LD_INT 6
4157: PUSH
4158: LD_INT 8
4160: PUSH
4161: LD_INT 10
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: LD_OWVAR 67
4173: ARRAY
4174: PPUSH
4175: CALL_OW 241
4179: GO 4147
4181: POP
4182: POP
// if Difficulty > 1 then
4183: LD_OWVAR 67
4187: PUSH
4188: LD_INT 1
4190: GREATER
4191: IFFALSE 4200
// RemoveEnvironmentArea ( forest_road ) ;
4193: LD_INT 11
4195: PPUSH
4196: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 12 , 25 ] [ Difficulty ] ) ;
4200: LD_INT 4
4202: PPUSH
4203: LD_INT 10
4205: PUSH
4206: LD_INT 12
4208: PUSH
4209: LD_INT 25
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_OWVAR 67
4221: ARRAY
4222: PPUSH
4223: CALL 3103 0 2
// PlaceMines ( mine_east_zone , [ 7 , 12 , 15 ] [ Difficulty ] ) ;
4227: LD_INT 5
4229: PPUSH
4230: LD_INT 7
4232: PUSH
4233: LD_INT 12
4235: PUSH
4236: LD_INT 15
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_OWVAR 67
4248: ARRAY
4249: PPUSH
4250: CALL 3103 0 2
// PlaceMines ( mine_south_zone , [ 5 , 8 , 12 ] [ Difficulty ] ) ;
4254: LD_INT 7
4256: PPUSH
4257: LD_INT 5
4259: PUSH
4260: LD_INT 8
4262: PUSH
4263: LD_INT 12
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_OWVAR 67
4275: ARRAY
4276: PPUSH
4277: CALL 3103 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4281: LD_INT 6
4283: PPUSH
4284: LD_INT 0
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: LD_INT 5
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: PUSH
4298: LD_OWVAR 67
4302: ARRAY
4303: PPUSH
4304: CALL 3103 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4308: LD_INT 8
4310: PPUSH
4311: LD_INT 2
4313: PUSH
4314: LD_INT 5
4316: PUSH
4317: LD_INT 8
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: LD_OWVAR 67
4329: ARRAY
4330: PPUSH
4331: CALL 3103 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4335: LD_INT 9
4337: PPUSH
4338: LD_INT 0
4340: PUSH
4341: LD_INT 2
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PUSH
4352: LD_OWVAR 67
4356: ARRAY
4357: PPUSH
4358: CALL 3103 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4362: LD_INT 10
4364: PPUSH
4365: LD_INT 0
4367: PUSH
4368: LD_INT 1
4370: PUSH
4371: LD_INT 1
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL 3103 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4389: LD_INT 12
4391: PPUSH
4392: LD_INT 0
4394: PUSH
4395: LD_INT 1
4397: PUSH
4398: LD_INT 1
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_OWVAR 67
4410: ARRAY
4411: PPUSH
4412: CALL 3103 0 2
// for i = 1 to [ 3 , 6 , 9 ] [ Difficulty ] do
4416: LD_ADDR_VAR 0 2
4420: PUSH
4421: DOUBLE
4422: LD_INT 1
4424: DEC
4425: ST_TO_ADDR
4426: LD_INT 3
4428: PUSH
4429: LD_INT 6
4431: PUSH
4432: LD_INT 9
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: PUSH
4440: LD_OWVAR 67
4444: ARRAY
4445: PUSH
4446: FOR_TO
4447: IFFALSE 4622
// begin hex := RandHexXYR ( 134 , 73 , 10 , false ) ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_INT 134
4456: PPUSH
4457: LD_INT 73
4459: PPUSH
4460: LD_INT 10
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 17
4470: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 and not MineAtPos ( hex [ 1 ] , hex [ 2 ] ) then
4471: LD_VAR 0 4
4475: PUSH
4476: LD_INT 1
4478: ARRAY
4479: PPUSH
4480: LD_VAR 0 4
4484: PUSH
4485: LD_INT 2
4487: ARRAY
4488: PPUSH
4489: CALL_OW 428
4493: PUSH
4494: LD_INT 0
4496: EQUAL
4497: PUSH
4498: LD_VAR 0 4
4502: PUSH
4503: LD_INT 1
4505: ARRAY
4506: PPUSH
4507: LD_VAR 0 4
4511: PUSH
4512: LD_INT 2
4514: ARRAY
4515: PPUSH
4516: CALL_OW 458
4520: NOT
4521: AND
4522: IFFALSE 4620
// begin mines_list := Insert ( mines_list , mines_list + 1 , hex [ 1 ] ) ;
4524: LD_ADDR_EXP 17
4528: PUSH
4529: LD_EXP 17
4533: PPUSH
4534: LD_EXP 17
4538: PUSH
4539: LD_INT 1
4541: PLUS
4542: PPUSH
4543: LD_VAR 0 4
4547: PUSH
4548: LD_INT 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 2
4556: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , hex [ 2 ] ) ;
4557: LD_ADDR_EXP 17
4561: PUSH
4562: LD_EXP 17
4566: PPUSH
4567: LD_EXP 17
4571: PUSH
4572: LD_INT 1
4574: PLUS
4575: PPUSH
4576: LD_VAR 0 4
4580: PUSH
4581: LD_INT 2
4583: ARRAY
4584: PPUSH
4585: CALL_OW 2
4589: ST_TO_ADDR
// PlaceMine ( hex [ 1 ] , hex [ 2 ] , bot_side , 0 ) ;
4590: LD_VAR 0 4
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: PPUSH
4599: LD_VAR 0 4
4603: PUSH
4604: LD_INT 2
4606: ARRAY
4607: PPUSH
4608: LD_EXP 8
4612: PPUSH
4613: LD_INT 0
4615: PPUSH
4616: CALL_OW 454
// end ; end ;
4620: GO 4446
4622: POP
4623: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: LD_INT 22
4631: PUSH
4632: LD_VAR 0 5
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 30
4643: PUSH
4644: LD_INT 32
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PPUSH
4655: CALL_OW 69
4659: PUSH
4660: FOR_IN
4661: IFFALSE 4693
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4663: LD_VAR 0 2
4667: PPUSH
4668: LD_VAR 0 8
4672: PUSH
4673: LD_INT 1
4675: PPUSH
4676: LD_VAR 0 8
4680: PPUSH
4681: CALL_OW 12
4685: ARRAY
4686: PPUSH
4687: CALL_OW 431
4691: GO 4660
4693: POP
4694: POP
// uc_side := side ;
4695: LD_ADDR_OWVAR 20
4699: PUSH
4700: LD_VAR 0 5
4704: ST_TO_ADDR
// uc_nation := 2 ;
4705: LD_ADDR_OWVAR 21
4709: PUSH
4710: LD_INT 2
4712: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4713: LD_ADDR_VAR 0 2
4717: PUSH
4718: DOUBLE
4719: LD_INT 1
4721: DEC
4722: ST_TO_ADDR
4723: LD_INT 1
4725: PUSH
4726: LD_OWVAR 67
4730: PLUS
4731: PUSH
4732: FOR_TO
4733: IFFALSE 4823
// begin vc_chassis := ar_half_tracked ;
4735: LD_ADDR_OWVAR 37
4739: PUSH
4740: LD_INT 14
4742: ST_TO_ADDR
// vc_engine := engine_combustion ;
4743: LD_ADDR_OWVAR 39
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// vc_control := control_manual ;
4751: LD_ADDR_OWVAR 38
4755: PUSH
4756: LD_INT 1
4758: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4759: LD_ADDR_OWVAR 40
4763: PUSH
4764: LD_INT 31
4766: ST_TO_ADDR
// veh := CreateVehicle ;
4767: LD_ADDR_VAR 0 7
4771: PUSH
4772: CALL_OW 45
4776: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4777: LD_VAR 0 7
4781: PPUSH
4782: LD_INT 3
4784: PPUSH
4785: LD_INT 0
4787: PPUSH
4788: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4792: LD_INT 0
4794: PPUSH
4795: LD_INT 3
4797: PPUSH
4798: LD_VAR 0 9
4802: PPUSH
4803: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4807: CALL_OW 44
4811: PPUSH
4812: LD_VAR 0 7
4816: PPUSH
4817: CALL_OW 52
// end ;
4821: GO 4732
4823: POP
4824: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4825: LD_ADDR_VAR 0 2
4829: PUSH
4830: LD_INT 22
4832: PUSH
4833: LD_VAR 0 5
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: LD_INT 32
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PPUSH
4856: CALL_OW 69
4860: PUSH
4861: FOR_IN
4862: IFFALSE 4895
// begin PrepareHuman ( false , 1 , skill ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_VAR 0 9
4874: PPUSH
4875: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4879: CALL_OW 44
4883: PPUSH
4884: LD_VAR 0 2
4888: PPUSH
4889: CALL_OW 52
// end ;
4893: GO 4861
4895: POP
4896: POP
// for i = 1 to 4 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 4
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4942
// begin PrepareHuman ( false , 2 , skill ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_INT 2
4918: PPUSH
4919: LD_VAR 0 9
4923: PPUSH
4924: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4928: CALL_OW 44
4932: PPUSH
4933: LD_INT 2
4935: PPUSH
4936: CALL_OW 52
// end ;
4940: GO 4910
4942: POP
4943: POP
// for i = 1 to 6 do
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: DOUBLE
4950: LD_INT 1
4952: DEC
4953: ST_TO_ADDR
4954: LD_INT 6
4956: PUSH
4957: FOR_TO
4958: IFFALSE 4989
// begin PrepareHuman ( false , 3 , skill ) ;
4960: LD_INT 0
4962: PPUSH
4963: LD_INT 3
4965: PPUSH
4966: LD_VAR 0 9
4970: PPUSH
4971: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4975: CALL_OW 44
4979: PPUSH
4980: LD_INT 12
4982: PPUSH
4983: CALL_OW 52
// end ;
4987: GO 4957
4989: POP
4990: POP
// for i = 1 to 4 do
4991: LD_ADDR_VAR 0 2
4995: PUSH
4996: DOUBLE
4997: LD_INT 1
4999: DEC
5000: ST_TO_ADDR
5001: LD_INT 4
5003: PUSH
5004: FOR_TO
5005: IFFALSE 5062
// begin PrepareHuman ( false , 4 , skill ) ;
5007: LD_INT 0
5009: PPUSH
5010: LD_INT 4
5012: PPUSH
5013: LD_VAR 0 9
5017: PPUSH
5018: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
5022: CALL_OW 44
5026: PPUSH
5027: LD_INT 30
5029: PUSH
5030: LD_INT 8
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: CALL_OW 69
5041: PUSH
5042: LD_VAR 0 2
5046: PUSH
5047: LD_INT 2
5049: MOD
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: ARRAY
5055: PPUSH
5056: CALL_OW 52
// end ;
5060: GO 5004
5062: POP
5063: POP
// PrepareHuman ( false , class_mortar , skill ) ;
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 8
5069: PPUSH
5070: LD_VAR 0 9
5074: PPUSH
5075: CALL_OW 380
// un := CreateHuman ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: CALL_OW 44
5088: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5089: LD_VAR 0 6
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
5101: LD_VAR 0 6
5105: PPUSH
5106: LD_INT 31
5108: PPUSH
5109: CALL_OW 52
// for i = 1 to 4 do
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: DOUBLE
5119: LD_INT 1
5121: DEC
5122: ST_TO_ADDR
5123: LD_INT 4
5125: PUSH
5126: FOR_TO
5127: IFFALSE 5183
// begin uc_nation := 0 ;
5129: LD_ADDR_OWVAR 21
5133: PUSH
5134: LD_INT 0
5136: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
5137: LD_INT 0
5139: PPUSH
5140: LD_INT 16
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 380
// un := CreateHuman ;
5150: LD_ADDR_VAR 0 6
5154: PUSH
5155: CALL_OW 44
5159: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
5160: LD_VAR 0 6
5164: PPUSH
5165: LD_INT 106
5167: PPUSH
5168: LD_INT 46
5170: PPUSH
5171: LD_INT 8
5173: PPUSH
5174: LD_INT 0
5176: PPUSH
5177: CALL_OW 50
// end ;
5181: GO 5126
5183: POP
5184: POP
// for i = 1 to 2 * Difficulty do
5185: LD_ADDR_VAR 0 2
5189: PUSH
5190: DOUBLE
5191: LD_INT 1
5193: DEC
5194: ST_TO_ADDR
5195: LD_INT 2
5197: PUSH
5198: LD_OWVAR 67
5202: MUL
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5245
// begin uc_nation := 0 ;
5207: LD_ADDR_OWVAR 21
5211: PUSH
5212: LD_INT 0
5214: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
5215: LD_INT 0
5217: PPUSH
5218: LD_INT 15
5220: PPUSH
5221: LD_INT 3
5223: PPUSH
5224: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
5228: CALL_OW 44
5232: PPUSH
5233: LD_INT 20
5235: PPUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 49
// end ;
5243: GO 5204
5245: POP
5246: POP
// for i = 1 to 4 * Difficulty do
5247: LD_ADDR_VAR 0 2
5251: PUSH
5252: DOUBLE
5253: LD_INT 1
5255: DEC
5256: ST_TO_ADDR
5257: LD_INT 4
5259: PUSH
5260: LD_OWVAR 67
5264: MUL
5265: PUSH
5266: FOR_TO
5267: IFFALSE 5341
// begin uc_nation := 0 ;
5269: LD_ADDR_OWVAR 21
5273: PUSH
5274: LD_INT 0
5276: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5277: LD_INT 0
5279: PPUSH
5280: LD_INT 17
5282: PPUSH
5283: LD_INT 3
5285: PPUSH
5286: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5290: LD_ADDR_OWVAR 29
5294: PUSH
5295: LD_INT 11
5297: PUSH
5298: LD_INT 13
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: ST_TO_ADDR
// un := CreateHuman ;
5305: LD_ADDR_VAR 0 6
5309: PUSH
5310: CALL_OW 44
5314: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5315: LD_VAR 0 6
5319: PPUSH
5320: LD_INT 21
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: CALL_OW 49
// ComHold ( un ) ;
5330: LD_VAR 0 6
5334: PPUSH
5335: CALL_OW 140
// end ;
5339: GO 5266
5341: POP
5342: POP
// end ;
5343: LD_VAR 0 1
5347: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5348: LD_INT 22
5350: PUSH
5351: LD_EXP 8
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 30
5362: PUSH
5363: LD_INT 3
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL_OW 69
5378: IFFALSE 5685
5380: GO 5382
5382: DISABLE
5383: LD_INT 0
5385: PPUSH
5386: PPUSH
5387: PPUSH
// begin enable ;
5388: ENABLE
// if Difficulty < 3 then
5389: LD_OWVAR 67
5393: PUSH
5394: LD_INT 3
5396: LESS
5397: IFFALSE 5406
// wait ( 1 1$00 ) ;
5399: LD_INT 2100
5401: PPUSH
5402: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5406: LD_ADDR_VAR 0 2
5410: PUSH
5411: LD_EXP 23
5415: PUSH
5416: LD_EXP 24
5420: ARRAY
5421: ST_TO_ADDR
// p := 1 ;
5422: LD_ADDR_VAR 0 3
5426: PUSH
5427: LD_INT 1
5429: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5430: LD_ADDR_VAR 0 1
5434: PUSH
5435: DOUBLE
5436: LD_INT 1
5438: DEC
5439: ST_TO_ADDR
5440: LD_EXP 22
5444: PUSH
5445: LD_INT 1
5447: NEG
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: PLUS
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5649
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5470: LD_INT 22
5472: PUSH
5473: LD_EXP 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 30
5484: PUSH
5485: LD_INT 3
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PPUSH
5496: CALL_OW 69
5500: PUSH
5501: LD_INT 1
5503: ARRAY
5504: PPUSH
5505: LD_EXP 21
5509: PUSH
5510: LD_VAR 0 2
5514: PUSH
5515: LD_INT 10
5517: MOD
5518: ARRAY
5519: PUSH
5520: LD_INT 1
5522: ARRAY
5523: PPUSH
5524: LD_EXP 21
5528: PUSH
5529: LD_VAR 0 2
5533: PUSH
5534: LD_INT 10
5536: MOD
5537: ARRAY
5538: PUSH
5539: LD_INT 2
5541: ARRAY
5542: PPUSH
5543: LD_EXP 21
5547: PUSH
5548: LD_VAR 0 2
5552: PUSH
5553: LD_INT 10
5555: MOD
5556: ARRAY
5557: PUSH
5558: LD_INT 3
5560: ARRAY
5561: PPUSH
5562: LD_EXP 21
5566: PUSH
5567: LD_VAR 0 2
5571: PUSH
5572: LD_INT 10
5574: MOD
5575: ARRAY
5576: PUSH
5577: LD_INT 4
5579: ARRAY
5580: PPUSH
5581: CALL_OW 185
// tmp := tmp / 10 ;
5585: LD_ADDR_VAR 0 2
5589: PUSH
5590: LD_VAR 0 2
5594: PUSH
5595: LD_INT 10
5597: DIVREAL
5598: ST_TO_ADDR
// p := p + 1 ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_VAR 0 3
5608: PUSH
5609: LD_INT 1
5611: PLUS
5612: ST_TO_ADDR
// if p > 5 then
5613: LD_VAR 0 3
5617: PUSH
5618: LD_INT 5
5620: GREATER
5621: IFFALSE 5647
// begin p := 1 ;
5623: LD_ADDR_VAR 0 3
5627: PUSH
5628: LD_INT 1
5630: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5631: LD_ADDR_VAR 0 2
5635: PUSH
5636: LD_EXP 23
5640: PUSH
5641: LD_EXP 24
5645: ARRAY
5646: ST_TO_ADDR
// end ; end ;
5647: GO 5467
5649: POP
5650: POP
// rng := rng + 1 ;
5651: LD_ADDR_EXP 24
5655: PUSH
5656: LD_EXP 24
5660: PUSH
5661: LD_INT 1
5663: PLUS
5664: ST_TO_ADDR
// if rng > queue_codes then
5665: LD_EXP 24
5669: PUSH
5670: LD_EXP 23
5674: GREATER
5675: IFFALSE 5685
// rng := 1 ;
5677: LD_ADDR_EXP 24
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// end ;
5685: PPOPN 3
5687: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5688: LD_INT 25
5690: PUSH
5691: LD_INT 17
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 69
5702: IFFALSE 5805
5704: GO 5706
5706: DISABLE
5707: LD_INT 0
5709: PPUSH
5710: PPUSH
// begin enable ;
5711: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5712: LD_ADDR_VAR 0 1
5716: PUSH
5717: LD_INT 25
5719: PUSH
5720: LD_INT 17
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PPUSH
5727: CALL_OW 69
5731: PUSH
5732: FOR_IN
5733: IFFALSE 5803
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5735: LD_ADDR_VAR 0 2
5739: PUSH
5740: LD_INT 81
5742: PUSH
5743: LD_EXP 8
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PPUSH
5752: CALL_OW 69
5756: PPUSH
5757: LD_VAR 0 1
5761: PPUSH
5762: CALL_OW 74
5766: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5767: LD_VAR 0 1
5771: PPUSH
5772: LD_VAR 0 2
5776: PPUSH
5777: CALL_OW 296
5781: PUSH
5782: LD_INT 15
5784: LESS
5785: IFFALSE 5801
// ComAttackUnit ( i , un ) ;
5787: LD_VAR 0 1
5791: PPUSH
5792: LD_VAR 0 2
5796: PPUSH
5797: CALL_OW 115
// end ;
5801: GO 5732
5803: POP
5804: POP
// end ;
5805: PPOPN 2
5807: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5808: LD_EXP 20
5812: IFFALSE 5879
5814: GO 5816
5816: DISABLE
5817: LD_INT 0
5819: PPUSH
// begin enable ;
5820: ENABLE
// for i in attackers do
5821: LD_ADDR_VAR 0 1
5825: PUSH
5826: LD_EXP 20
5830: PUSH
5831: FOR_IN
5832: IFFALSE 5877
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5834: LD_VAR 0 1
5838: PPUSH
5839: LD_INT 81
5841: PUSH
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 255
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: PPUSH
5856: CALL_OW 69
5860: PPUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 74
5870: PPUSH
5871: CALL_OW 115
5875: GO 5831
5877: POP
5878: POP
// end ;
5879: PPOPN 1
5881: END
// every 0 0$01 trigger not attackers marked 17 do
5882: LD_EXP 20
5886: NOT
5887: IFFALSE 5896
5889: GO 5891
5891: DISABLE
// begin enable ;
5892: ENABLE
// disable ( 17 ) ;
5893: LD_INT 17
5895: DISABLE_MARKED
// end ;
5896: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5897: LD_EXP 22
5901: PUSH
5902: LD_EXP 20
5906: LESSEQUAL
5907: IFFALSE 5920
5909: GO 5911
5911: DISABLE
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
// begin enable ;
5916: ENABLE
// enable ( 17 ) ;
5917: LD_INT 17
5919: ENABLE_MARKED
// end ;
5920: PPOPN 2
5922: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5923: LD_EXP 9
5927: PUSH
5928: LD_OWVAR 1
5932: PUSH
5933: LD_INT 105000
5935: GREATEREQUAL
5936: AND
5937: IFFALSE 5956
5939: GO 5941
5941: DISABLE
// veh_counter := veh_counter + 2 ;
5942: LD_ADDR_EXP 22
5946: PUSH
5947: LD_EXP 22
5951: PUSH
5952: LD_INT 2
5954: PLUS
5955: ST_TO_ADDR
5956: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5957: LD_INT 22
5959: PUSH
5960: LD_EXP 8
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 33
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: IFFALSE 6203
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
5999: PPUSH
6000: PPUSH
// begin enable ;
6001: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
6002: LD_ADDR_VAR 0 4
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_EXP 8
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 33
6021: PUSH
6022: LD_INT 2
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: LD_INT 61
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PPUSH
6047: CALL_OW 69
6051: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
6052: LD_ADDR_VAR 0 3
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_EXP 8
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 34
6071: PUSH
6072: LD_INT 31
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PPUSH
6083: CALL_OW 69
6087: ST_TO_ADDR
// best := 10 ;
6088: LD_ADDR_VAR 0 5
6092: PUSH
6093: LD_INT 10
6095: ST_TO_ADDR
// best_mechanic := - 1 ;
6096: LD_ADDR_VAR 0 6
6100: PUSH
6101: LD_INT 1
6103: NEG
6104: ST_TO_ADDR
// if vehs then
6105: LD_VAR 0 4
6109: IFFALSE 6203
// begin for j in cts do
6111: LD_ADDR_VAR 0 2
6115: PUSH
6116: LD_VAR 0 3
6120: PUSH
6121: FOR_IN
6122: IFFALSE 6183
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
6124: LD_ADDR_VAR 0 7
6128: PUSH
6129: LD_VAR 0 2
6133: PPUSH
6134: CALL 3455 0 1
6138: PPUSH
6139: CALL_OW 432
6143: ST_TO_ADDR
// if p < best then
6144: LD_VAR 0 7
6148: PUSH
6149: LD_VAR 0 5
6153: LESS
6154: IFFALSE 6181
// begin best := p ;
6156: LD_ADDR_VAR 0 5
6160: PUSH
6161: LD_VAR 0 7
6165: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
6166: LD_ADDR_VAR 0 6
6170: PUSH
6171: LD_VAR 0 2
6175: PPUSH
6176: CALL 3455 0 1
6180: ST_TO_ADDR
// end ; end ;
6181: GO 6121
6183: POP
6184: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
6185: LD_VAR 0 4
6189: PUSH
6190: LD_INT 1
6192: ARRAY
6193: PPUSH
6194: LD_VAR 0 6
6198: PPUSH
6199: CALL_OW 135
// end ; end ;
6203: PPOPN 7
6205: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
6206: GO 6208
6208: DISABLE
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// begin enable ;
6218: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6219: LD_ADDR_VAR 0 6
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_EXP 8
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 21
6238: PUSH
6239: LD_INT 3
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 24
6251: PUSH
6252: LD_INT 1000
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 69
6272: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6273: LD_ADDR_VAR 0 3
6277: PUSH
6278: LD_INT 22
6280: PUSH
6281: LD_EXP 8
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 25
6295: PUSH
6296: LD_INT 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 25
6305: PUSH
6306: LD_INT 2
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 25
6315: PUSH
6316: LD_INT 3
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 3
6331: PUSH
6332: LD_INT 24
6334: PUSH
6335: LD_INT 750
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 69
6355: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6356: LD_ADDR_VAR 0 4
6360: PUSH
6361: LD_INT 22
6363: PUSH
6364: LD_EXP 8
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 25
6375: PUSH
6376: LD_INT 4
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PPUSH
6387: CALL_OW 69
6391: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6392: LD_ADDR_VAR 0 5
6396: PUSH
6397: LD_INT 22
6399: PUSH
6400: LD_EXP 8
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 25
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 69
6427: ST_TO_ADDR
// if not h and not b then
6428: LD_VAR 0 3
6432: NOT
6433: PUSH
6434: LD_VAR 0 6
6438: NOT
6439: AND
6440: IFFALSE 6724
// begin if sci then
6442: LD_VAR 0 4
6446: IFFALSE 6583
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_INT 3
6455: PUSH
6456: LD_INT 54
6458: PUSH
6459: EMPTY
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PPUSH
6466: CALL_OW 72
6470: PUSH
6471: LD_INT 22
6473: PUSH
6474: LD_EXP 8
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 30
6485: PUSH
6486: LD_INT 8
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 69
6501: AND
6502: IFFALSE 6583
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6504: LD_ADDR_VAR 0 2
6508: PUSH
6509: LD_VAR 0 4
6513: PPUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 54
6519: PUSH
6520: EMPTY
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PPUSH
6527: CALL_OW 72
6531: PUSH
6532: FOR_IN
6533: IFFALSE 6581
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6535: LD_VAR 0 2
6539: PPUSH
6540: LD_INT 22
6542: PUSH
6543: LD_EXP 8
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 30
6554: PUSH
6555: LD_INT 8
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 69
6570: PUSH
6571: LD_INT 1
6573: ARRAY
6574: PPUSH
6575: CALL_OW 120
6579: GO 6532
6581: POP
6582: POP
// if eng then
6583: LD_VAR 0 5
6587: IFFALSE 6724
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6589: LD_VAR 0 5
6593: PPUSH
6594: LD_INT 3
6596: PUSH
6597: LD_INT 54
6599: PUSH
6600: EMPTY
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PPUSH
6607: CALL_OW 72
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_EXP 8
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 30
6626: PUSH
6627: LD_INT 1
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PPUSH
6638: CALL_OW 69
6642: AND
6643: IFFALSE 6724
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6645: LD_ADDR_VAR 0 2
6649: PUSH
6650: LD_VAR 0 5
6654: PPUSH
6655: LD_INT 3
6657: PUSH
6658: LD_INT 54
6660: PUSH
6661: EMPTY
6662: LIST
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PPUSH
6668: CALL_OW 72
6672: PUSH
6673: FOR_IN
6674: IFFALSE 6722
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6676: LD_VAR 0 2
6680: PPUSH
6681: LD_INT 22
6683: PUSH
6684: LD_EXP 8
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 1
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: PUSH
6712: LD_INT 1
6714: ARRAY
6715: PPUSH
6716: CALL_OW 120
6720: GO 6673
6722: POP
6723: POP
// end ; p := 1 ;
6724: LD_ADDR_VAR 0 7
6728: PUSH
6729: LD_INT 1
6731: ST_TO_ADDR
// if b and eng then
6732: LD_VAR 0 6
6736: PUSH
6737: LD_VAR 0 5
6741: AND
6742: IFFALSE 6876
// for j in eng do
6744: LD_ADDR_VAR 0 2
6748: PUSH
6749: LD_VAR 0 5
6753: PUSH
6754: FOR_IN
6755: IFFALSE 6874
// begin if IsInUnit ( j ) then
6757: LD_VAR 0 2
6761: PPUSH
6762: CALL_OW 310
6766: IFFALSE 6779
// ComExitBuilding ( j ) else
6768: LD_VAR 0 2
6772: PPUSH
6773: CALL_OW 122
6777: GO 6872
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6779: LD_VAR 0 2
6783: PPUSH
6784: CALL_OW 314
6788: NOT
6789: PUSH
6790: LD_VAR 0 2
6794: PPUSH
6795: CALL_OW 256
6799: PUSH
6800: LD_INT 750
6802: GREATER
6803: AND
6804: IFFALSE 6872
// begin if b > p then
6806: LD_VAR 0 6
6810: PUSH
6811: LD_VAR 0 7
6815: GREATER
6816: IFFALSE 6854
// begin ComRepairBuilding ( j , b [ p ] ) ;
6818: LD_VAR 0 2
6822: PPUSH
6823: LD_VAR 0 6
6827: PUSH
6828: LD_VAR 0 7
6832: ARRAY
6833: PPUSH
6834: CALL_OW 130
// p := p + 1 ;
6838: LD_ADDR_VAR 0 7
6842: PUSH
6843: LD_VAR 0 7
6847: PUSH
6848: LD_INT 1
6850: PLUS
6851: ST_TO_ADDR
// end else
6852: GO 6872
// ComRepairBuilding ( j , b [ 1 ] ) ;
6854: LD_VAR 0 2
6858: PPUSH
6859: LD_VAR 0 6
6863: PUSH
6864: LD_INT 1
6866: ARRAY
6867: PPUSH
6868: CALL_OW 130
// end ; end ;
6872: GO 6754
6874: POP
6875: POP
// if h and sci then
6876: LD_VAR 0 3
6880: PUSH
6881: LD_VAR 0 4
6885: AND
6886: IFFALSE 7025
// for i in h do
6888: LD_ADDR_VAR 0 1
6892: PUSH
6893: LD_VAR 0 3
6897: PUSH
6898: FOR_IN
6899: IFFALSE 7023
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_INT 108
6908: PPUSH
6909: LD_INT 42
6911: PPUSH
6912: CALL_OW 297
6916: PUSH
6917: LD_INT 10
6919: GREATER
6920: IFFALSE 6939
// ComMoveXY ( i , 108 , 42 ) else
6922: LD_VAR 0 1
6926: PPUSH
6927: LD_INT 108
6929: PPUSH
6930: LD_INT 42
6932: PPUSH
6933: CALL_OW 111
6937: GO 7021
// begin for j in sci do
6939: LD_ADDR_VAR 0 2
6943: PUSH
6944: LD_VAR 0 4
6948: PUSH
6949: FOR_IN
6950: IFFALSE 7019
// begin if GetTag ( j ) > 0 then
6952: LD_VAR 0 2
6956: PPUSH
6957: CALL_OW 110
6961: PUSH
6962: LD_INT 0
6964: GREATER
6965: IFFALSE 6969
// continue ;
6967: GO 6949
// if IsInUnit ( j ) then
6969: LD_VAR 0 2
6973: PPUSH
6974: CALL_OW 310
6978: IFFALSE 6991
// ComExitBuilding ( j ) else
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
6989: GO 7017
// if not HasTask ( j ) then
6991: LD_VAR 0 2
6995: PPUSH
6996: CALL_OW 314
7000: NOT
7001: IFFALSE 7017
// ComHeal ( j , h ) ;
7003: LD_VAR 0 2
7007: PPUSH
7008: LD_VAR 0 3
7012: PPUSH
7013: CALL_OW 128
// end ;
7017: GO 6949
7019: POP
7020: POP
// end ;
7021: GO 6898
7023: POP
7024: POP
// end ;
7025: PPOPN 7
7027: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
7028: LD_INT 155
7030: PPUSH
7031: LD_INT 88
7033: PPUSH
7034: CALL_OW 428
7038: PUSH
7039: LD_INT 155
7041: PPUSH
7042: LD_INT 88
7044: PPUSH
7045: CALL_OW 428
7049: PUSH
7050: LD_INT 30
7052: EQUAL
7053: PPUSH
7054: CALL_OW 266
7058: AND
7059: IFFALSE 7308
7061: GO 7063
7063: DISABLE
7064: LD_INT 0
7066: PPUSH
7067: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 155
7075: PPUSH
7076: LD_INT 88
7078: PPUSH
7079: CALL_OW 428
7083: PPUSH
7084: CALL_OW 255
7088: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
7089: LD_INT 11550
7091: PUSH
7092: LD_INT 13755
7094: PUSH
7095: LD_INT 13335
7097: PUSH
7098: LD_INT 18340
7100: PUSH
7101: LD_INT 19985
7103: PUSH
7104: LD_INT 9555
7106: PUSH
7107: LD_INT 18935
7109: PUSH
7110: LD_INT 10535
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: LD_VAR 0 2
7127: ARRAY
7128: PPUSH
7129: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7133: LD_INT 22
7135: PUSH
7136: LD_EXP 8
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 25
7147: PUSH
7148: LD_INT 4
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 69
7163: PUSH
7164: LD_INT 0
7166: EQUAL
7167: IFFALSE 7171
// exit ;
7169: GO 7308
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
7171: LD_ADDR_VAR 0 1
7175: PUSH
7176: LD_INT 22
7178: PUSH
7179: LD_EXP 8
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 25
7190: PUSH
7191: LD_INT 4
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PPUSH
7202: CALL_OW 69
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_INT 1
7218: PPUSH
7219: CALL_OW 109
// ComExitBuilding ( sci ) ;
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7232: LD_VAR 0 1
7236: PPUSH
7237: LD_INT 126
7239: PPUSH
7240: LD_INT 59
7242: PPUSH
7243: CALL_OW 171
// if p mod 2 = 0 then
7247: LD_VAR 0 2
7251: PUSH
7252: LD_INT 2
7254: MOD
7255: PUSH
7256: LD_INT 0
7258: EQUAL
7259: IFFALSE 7278
// AddComMoveXY ( sci , 148 , 66 ) else
7261: LD_VAR 0 1
7265: PPUSH
7266: LD_INT 148
7268: PPUSH
7269: LD_INT 66
7271: PPUSH
7272: CALL_OW 171
7276: GO 7293
// AddComMoveXY ( sci , 135 , 84 ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_INT 135
7285: PPUSH
7286: LD_INT 84
7288: PPUSH
7289: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7293: LD_VAR 0 1
7297: PPUSH
7298: LD_INT 155
7300: PPUSH
7301: LD_INT 88
7303: PPUSH
7304: CALL_OW 218
// end ;
7308: PPOPN 2
7310: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7311: LD_INT 33
7313: PPUSH
7314: LD_INT 10
7316: PPUSH
7317: CALL_OW 428
7321: PUSH
7322: LD_INT 33
7324: PPUSH
7325: LD_INT 10
7327: PPUSH
7328: CALL_OW 428
7332: PUSH
7333: LD_INT 30
7335: EQUAL
7336: PPUSH
7337: CALL_OW 266
7341: AND
7342: IFFALSE 7593
7344: GO 7346
7346: DISABLE
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7351: LD_ADDR_VAR 0 2
7355: PUSH
7356: LD_INT 33
7358: PPUSH
7359: LD_INT 10
7361: PPUSH
7362: CALL_OW 428
7366: PPUSH
7367: CALL_OW 255
7371: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7372: LD_INT 9450
7374: PUSH
7375: LD_INT 11655
7377: PUSH
7378: LD_INT 7035
7380: PUSH
7381: LD_INT 9940
7383: PUSH
7384: LD_INT 7385
7386: PUSH
7387: LD_INT 11655
7389: PUSH
7390: LD_INT 6335
7392: PUSH
7393: LD_INT 16835
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: LD_VAR 0 2
7410: ARRAY
7411: PPUSH
7412: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7416: LD_INT 22
7418: PUSH
7419: LD_EXP 8
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 4
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: PUSH
7447: LD_INT 0
7449: EQUAL
7450: IFFALSE 7454
// exit ;
7452: GO 7593
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_EXP 8
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 25
7473: PUSH
7474: LD_INT 4
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_VAR 0 1
7494: ARRAY
7495: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_INT 1
7503: PPUSH
7504: CALL_OW 109
// ComExitBuilding ( sci ) ;
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7517: LD_VAR 0 1
7521: PPUSH
7522: LD_INT 67
7524: PPUSH
7525: LD_INT 13
7527: PPUSH
7528: CALL_OW 171
// if p mod 2 = 0 then
7532: LD_VAR 0 2
7536: PUSH
7537: LD_INT 2
7539: MOD
7540: PUSH
7541: LD_INT 0
7543: EQUAL
7544: IFFALSE 7563
// AddComMoveXY ( sci , 37 , 3 ) else
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_INT 37
7553: PPUSH
7554: LD_INT 3
7556: PPUSH
7557: CALL_OW 171
7561: GO 7578
// AddComMoveXY ( sci , 45 , 20 ) ;
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_INT 45
7570: PPUSH
7571: LD_INT 20
7573: PPUSH
7574: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7578: LD_VAR 0 1
7582: PPUSH
7583: LD_INT 33
7585: PPUSH
7586: LD_INT 10
7588: PPUSH
7589: CALL_OW 218
// end ;
7593: PPOPN 2
7595: END
// every 0 0$01 trigger mines_list do var i , p ;
7596: LD_EXP 17
7600: IFFALSE 7826
7602: GO 7604
7604: DISABLE
7605: LD_INT 0
7607: PPUSH
7608: PPUSH
// begin enable ;
7609: ENABLE
// p := 1 ;
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7618: LD_ADDR_VAR 0 1
7622: PUSH
7623: DOUBLE
7624: LD_INT 1
7626: DEC
7627: ST_TO_ADDR
7628: LD_EXP 17
7632: PUSH
7633: LD_INT 2
7635: DIVREAL
7636: PUSH
7637: FOR_TO
7638: IFFALSE 7824
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7640: LD_EXP 17
7644: PUSH
7645: LD_VAR 0 2
7649: ARRAY
7650: PPUSH
7651: LD_EXP 17
7655: PUSH
7656: LD_VAR 0 2
7660: PUSH
7661: LD_INT 1
7663: PLUS
7664: ARRAY
7665: PPUSH
7666: CALL_OW 428
7670: PUSH
7671: LD_INT 0
7673: GREATER
7674: IFFALSE 7808
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7676: LD_EXP 17
7680: PUSH
7681: LD_VAR 0 2
7685: ARRAY
7686: PPUSH
7687: LD_EXP 17
7691: PUSH
7692: LD_VAR 0 2
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: PPUSH
7702: CALL_OW 428
7706: PPUSH
7707: CALL_OW 255
7711: PUSH
7712: LD_EXP 8
7716: NONEQUAL
7717: IFFALSE 7808
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7719: LD_EXP 17
7723: PUSH
7724: LD_VAR 0 2
7728: ARRAY
7729: PPUSH
7730: LD_EXP 17
7734: PUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 1
7742: PLUS
7743: ARRAY
7744: PPUSH
7745: LD_EXP 8
7749: PPUSH
7750: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7754: LD_ADDR_EXP 17
7758: PUSH
7759: LD_EXP 17
7763: PPUSH
7764: LD_VAR 0 2
7768: PPUSH
7769: CALL_OW 3
7773: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7774: LD_ADDR_EXP 17
7778: PUSH
7779: LD_EXP 17
7783: PPUSH
7784: LD_VAR 0 2
7788: PPUSH
7789: CALL_OW 3
7793: ST_TO_ADDR
// p := p - 2 ;
7794: LD_ADDR_VAR 0 2
7798: PUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_INT 2
7806: MINUS
7807: ST_TO_ADDR
// end ; p := p + 2 ;
7808: LD_ADDR_VAR 0 2
7812: PUSH
7813: LD_VAR 0 2
7817: PUSH
7818: LD_INT 2
7820: PLUS
7821: ST_TO_ADDR
// end ;
7822: GO 7637
7824: POP
7825: POP
// end ;
7826: PPOPN 2
7828: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7829: GO 7831
7831: DISABLE
7832: LD_INT 0
7834: PPUSH
7835: PPUSH
7836: PPUSH
7837: PPUSH
7838: PPUSH
// begin enable ;
7839: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_INT 50
7847: PUSH
7848: EMPTY
7849: LIST
7850: PUSH
7851: LD_INT 22
7853: PUSH
7854: LD_EXP 8
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 25
7865: PUSH
7866: LD_INT 16
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7883: LD_ADDR_VAR 0 5
7887: PUSH
7888: LD_INT 22
7890: PUSH
7891: LD_EXP 8
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: LD_INT 30
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 30
7915: PUSH
7916: LD_INT 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PPUSH
7932: CALL_OW 69
7936: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_INT 13
7944: PPUSH
7945: CALL_OW 435
7949: ST_TO_ADDR
// if filter and skr then
7950: LD_VAR 0 4
7954: PUSH
7955: LD_VAR 0 3
7959: AND
7960: IFFALSE 8035
// for i = 1 to filter do
7962: LD_ADDR_VAR 0 1
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_VAR 0 4
7976: PUSH
7977: FOR_TO
7978: IFFALSE 8033
// if not HasTask ( filter [ i ] ) then
7980: LD_VAR 0 4
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: PPUSH
7991: CALL_OW 314
7995: NOT
7996: IFFALSE 8031
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
7998: LD_VAR 0 4
8002: PUSH
8003: LD_VAR 0 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 3
8013: PUSH
8014: LD_INT 1
8016: ARRAY
8017: PPUSH
8018: LD_VAR 0 3
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PPUSH
8027: CALL_OW 117
8031: GO 7977
8033: POP
8034: POP
// end ; end_of_file
8035: PPOPN 5
8037: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
8038: LD_INT 0
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
// begin if un in attackers then
8044: LD_VAR 0 1
8048: PUSH
8049: LD_EXP 20
8053: IN
8054: IFFALSE 8072
// attackers := attackers diff un ;
8056: LD_ADDR_EXP 20
8060: PUSH
8061: LD_EXP 20
8065: PUSH
8066: LD_VAR 0 1
8070: DIFF
8071: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
8072: LD_VAR 0 1
8076: PPUSH
8077: CALL_OW 255
8081: PUSH
8082: LD_EXP 8
8086: NONEQUAL
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 255
8097: PUSH
8098: LD_INT 0
8100: GREATER
8101: AND
8102: PUSH
8103: LD_VAR 0 1
8107: PUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 1
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PPUSH
8118: CALL_OW 69
8122: IN
8123: AND
8124: IFFALSE 8308
// begin if respawning_time_min > 0 0$00 then
8126: LD_EXP 13
8130: PUSH
8131: LD_INT 0
8133: GREATER
8134: IFFALSE 8308
// begin s := GetSide ( un ) ;
8136: LD_ADDR_VAR 0 4
8140: PUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 255
8150: ST_TO_ADDR
// n := GetNation ( un ) ;
8151: LD_ADDR_VAR 0 5
8155: PUSH
8156: LD_VAR 0 1
8160: PPUSH
8161: CALL_OW 248
8165: ST_TO_ADDR
// cl := GetClass ( un ) ;
8166: LD_ADDR_VAR 0 3
8170: PUSH
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 257
8180: ST_TO_ADDR
// wait ( respawning_time_min ) ;
8181: LD_EXP 13
8185: PPUSH
8186: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
8190: LD_EXP 14
8194: PUSH
8195: LD_INT 350
8197: PUSH
8198: LD_OWVAR 1
8202: MUL
8203: PUSH
8204: LD_INT 10
8206: MOD
8207: PUSH
8208: LD_INT 1
8210: PLUS
8211: PUSH
8212: LD_VAR 0 3
8216: MUL
8217: MINUS
8218: PPUSH
8219: CALL_OW 67
// uc_side := s ;
8223: LD_ADDR_OWVAR 20
8227: PUSH
8228: LD_VAR 0 4
8232: ST_TO_ADDR
// uc_nation := n ;
8233: LD_ADDR_OWVAR 21
8237: PUSH
8238: LD_VAR 0 5
8242: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8243: LD_INT 0
8245: PPUSH
8246: LD_VAR 0 3
8250: PPUSH
8251: LD_EXP 11
8255: PUSH
8256: LD_INT 2
8258: MINUS
8259: PPUSH
8260: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8264: CALL_OW 44
8268: PPUSH
8269: LD_INT 17
8271: PUSH
8272: LD_INT 19
8274: PUSH
8275: LD_INT 18
8277: PUSH
8278: LD_INT 19
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: PUSH
8287: LD_VAR 0 3
8291: PUSH
8292: LD_INT 4
8294: MOD
8295: PUSH
8296: LD_INT 1
8298: PLUS
8299: ARRAY
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 49
// end ; end ; end ;
8308: PPOPN 5
8310: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 255
8320: PUSH
8321: LD_EXP 8
8325: EQUAL
8326: PUSH
8327: LD_VAR 0 1
8331: PUSH
8332: LD_INT 33
8334: PUSH
8335: LD_INT 2
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 21
8344: PUSH
8345: LD_INT 2
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PPUSH
8356: CALL_OW 69
8360: IN
8361: AND
8362: IFFALSE 8485
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8364: LD_OWVAR 3
8368: PUSH
8369: LD_VAR 0 1
8373: DIFF
8374: PPUSH
8375: LD_VAR 0 1
8379: PPUSH
8380: CALL_OW 74
8384: PPUSH
8385: CALL_OW 255
8389: PUSH
8390: LD_EXP 8
8394: NONEQUAL
8395: IFFALSE 8485
// begin Wait ( 0 0$1.3 ) ;
8397: LD_INT 46
8399: PPUSH
8400: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 250
8413: PPUSH
8414: LD_VAR 0 1
8418: PPUSH
8419: CALL_OW 251
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 250
8440: PPUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 251
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8458: LD_VAR 0 1
8462: PPUSH
8463: CALL_OW 250
8467: PPUSH
8468: LD_VAR 0 1
8472: PPUSH
8473: CALL_OW 251
8477: PPUSH
8478: LD_INT 1
8480: PPUSH
8481: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 263
8494: PUSH
8495: LD_INT 2
8497: EQUAL
8498: IFFALSE 8509
// ComUnlink ( un ) ;
8500: LD_VAR 0 1
8504: PPUSH
8505: CALL_OW 136
// end ;
8509: PPOPN 1
8511: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 255
8521: PUSH
8522: LD_EXP 8
8526: EQUAL
8527: IFFALSE 8558
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8529: LD_ADDR_EXP 20
8533: PUSH
8534: LD_EXP 20
8538: PPUSH
8539: LD_EXP 20
8543: PUSH
8544: LD_INT 1
8546: PLUS
8547: PPUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 2
8557: ST_TO_ADDR
// end ;
8558: PPOPN 2
8560: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8561: LD_INT 0
8563: PPUSH
8564: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 255
8574: PUSH
8575: LD_EXP 8
8579: EQUAL
8580: PUSH
8581: LD_VAR 0 1
8585: PPUSH
8586: CALL_OW 266
8590: PUSH
8591: LD_INT 32
8593: EQUAL
8594: AND
8595: IFFALSE 8693
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: LD_INT 22
8604: PUSH
8605: LD_EXP 8
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 30
8616: PUSH
8617: LD_INT 5
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: ST_TO_ADDR
// for i in arm do
8633: LD_ADDR_VAR 0 3
8637: PUSH
8638: LD_VAR 0 4
8642: PUSH
8643: FOR_IN
8644: IFFALSE 8691
// if UnitsInside ( i ) < 6 then
8646: LD_VAR 0 3
8650: PPUSH
8651: CALL_OW 313
8655: PUSH
8656: LD_INT 6
8658: LESS
8659: IFFALSE 8689
// begin ComEnterUnit ( un , i ) ;
8661: LD_VAR 0 2
8665: PPUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8675: LD_VAR 0 2
8679: PPUSH
8680: LD_INT 8
8682: PPUSH
8683: CALL_OW 183
// break ;
8687: GO 8691
// end ;
8689: GO 8643
8691: POP
8692: POP
// end ; end ; end_of_file
8693: PPOPN 4
8695: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8696: LD_VAR 0 1
8700: PUSH
8701: LD_INT 200
8703: DOUBLE
8704: GREATEREQUAL
8705: IFFALSE 8713
8707: LD_INT 299
8709: DOUBLE
8710: LESSEQUAL
8711: IFTRUE 8715
8713: GO 8747
8715: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_VAR 0 2
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: LD_VAR 0 4
8735: PPUSH
8736: LD_VAR 0 5
8740: PPUSH
8741: CALL 66450 0 5
8745: GO 8824
8747: LD_INT 300
8749: DOUBLE
8750: GREATEREQUAL
8751: IFFALSE 8759
8753: LD_INT 399
8755: DOUBLE
8756: LESSEQUAL
8757: IFTRUE 8761
8759: GO 8823
8761: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8762: LD_VAR 0 1
8766: PPUSH
8767: LD_VAR 0 2
8771: PPUSH
8772: LD_VAR 0 3
8776: PPUSH
8777: LD_VAR 0 4
8781: PPUSH
8782: LD_VAR 0 5
8786: PPUSH
8787: LD_VAR 0 6
8791: PPUSH
8792: LD_VAR 0 7
8796: PPUSH
8797: LD_VAR 0 8
8801: PPUSH
8802: LD_VAR 0 9
8806: PPUSH
8807: LD_VAR 0 10
8811: PPUSH
8812: LD_VAR 0 11
8816: PPUSH
8817: CALL 62783 0 11
8821: GO 8824
8823: POP
// end ;
8824: PPOPN 11
8826: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: LD_VAR 0 2
8836: PPUSH
8837: LD_VAR 0 3
8841: PPUSH
8842: LD_VAR 0 4
8846: PPUSH
8847: LD_VAR 0 5
8851: PPUSH
8852: CALL 66186 0 5
// end ; end_of_file
8856: PPOPN 5
8858: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8859: LD_INT 0
8861: PPUSH
8862: PPUSH
// if exist_mode then
8863: LD_VAR 0 2
8867: IFFALSE 8892
// unit := CreateCharacter ( prefix & ident ) else
8869: LD_ADDR_VAR 0 5
8873: PUSH
8874: LD_VAR 0 3
8878: PUSH
8879: LD_VAR 0 1
8883: STR
8884: PPUSH
8885: CALL_OW 34
8889: ST_TO_ADDR
8890: GO 8907
// unit := NewCharacter ( ident ) ;
8892: LD_ADDR_VAR 0 5
8896: PUSH
8897: LD_VAR 0 1
8901: PPUSH
8902: CALL_OW 25
8906: ST_TO_ADDR
// result := unit ;
8907: LD_ADDR_VAR 0 4
8911: PUSH
8912: LD_VAR 0 5
8916: ST_TO_ADDR
// end ;
8917: LD_VAR 0 4
8921: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8922: LD_INT 0
8924: PPUSH
8925: PPUSH
// if not side or not nation then
8926: LD_VAR 0 1
8930: NOT
8931: PUSH
8932: LD_VAR 0 2
8936: NOT
8937: OR
8938: IFFALSE 8942
// exit ;
8940: GO 9710
// case nation of nation_american :
8942: LD_VAR 0 2
8946: PUSH
8947: LD_INT 1
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 9169
8955: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8956: LD_ADDR_VAR 0 4
8960: PUSH
8961: LD_INT 35
8963: PUSH
8964: LD_INT 45
8966: PUSH
8967: LD_INT 46
8969: PUSH
8970: LD_INT 47
8972: PUSH
8973: LD_INT 82
8975: PUSH
8976: LD_INT 83
8978: PUSH
8979: LD_INT 84
8981: PUSH
8982: LD_INT 85
8984: PUSH
8985: LD_INT 86
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: LD_INT 2
8993: PUSH
8994: LD_INT 6
8996: PUSH
8997: LD_INT 15
8999: PUSH
9000: LD_INT 16
9002: PUSH
9003: LD_INT 7
9005: PUSH
9006: LD_INT 12
9008: PUSH
9009: LD_INT 13
9011: PUSH
9012: LD_INT 10
9014: PUSH
9015: LD_INT 14
9017: PUSH
9018: LD_INT 20
9020: PUSH
9021: LD_INT 21
9023: PUSH
9024: LD_INT 22
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 32
9032: PUSH
9033: LD_INT 27
9035: PUSH
9036: LD_INT 36
9038: PUSH
9039: LD_INT 69
9041: PUSH
9042: LD_INT 39
9044: PUSH
9045: LD_INT 34
9047: PUSH
9048: LD_INT 40
9050: PUSH
9051: LD_INT 48
9053: PUSH
9054: LD_INT 49
9056: PUSH
9057: LD_INT 50
9059: PUSH
9060: LD_INT 51
9062: PUSH
9063: LD_INT 52
9065: PUSH
9066: LD_INT 53
9068: PUSH
9069: LD_INT 54
9071: PUSH
9072: LD_INT 55
9074: PUSH
9075: LD_INT 56
9077: PUSH
9078: LD_INT 57
9080: PUSH
9081: LD_INT 58
9083: PUSH
9084: LD_INT 59
9086: PUSH
9087: LD_INT 60
9089: PUSH
9090: LD_INT 61
9092: PUSH
9093: LD_INT 62
9095: PUSH
9096: LD_INT 80
9098: PUSH
9099: LD_INT 82
9101: PUSH
9102: LD_INT 83
9104: PUSH
9105: LD_INT 84
9107: PUSH
9108: LD_INT 85
9110: PUSH
9111: LD_INT 86
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: ST_TO_ADDR
9167: GO 9634
9169: LD_INT 2
9171: DOUBLE
9172: EQUAL
9173: IFTRUE 9177
9175: GO 9403
9177: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9178: LD_ADDR_VAR 0 4
9182: PUSH
9183: LD_INT 35
9185: PUSH
9186: LD_INT 45
9188: PUSH
9189: LD_INT 46
9191: PUSH
9192: LD_INT 47
9194: PUSH
9195: LD_INT 82
9197: PUSH
9198: LD_INT 83
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 85
9206: PUSH
9207: LD_INT 87
9209: PUSH
9210: LD_INT 70
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: LD_INT 11
9218: PUSH
9219: LD_INT 3
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: LD_INT 5
9227: PUSH
9228: LD_INT 6
9230: PUSH
9231: LD_INT 15
9233: PUSH
9234: LD_INT 18
9236: PUSH
9237: LD_INT 7
9239: PUSH
9240: LD_INT 17
9242: PUSH
9243: LD_INT 8
9245: PUSH
9246: LD_INT 20
9248: PUSH
9249: LD_INT 21
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 72
9257: PUSH
9258: LD_INT 26
9260: PUSH
9261: LD_INT 69
9263: PUSH
9264: LD_INT 39
9266: PUSH
9267: LD_INT 40
9269: PUSH
9270: LD_INT 41
9272: PUSH
9273: LD_INT 42
9275: PUSH
9276: LD_INT 43
9278: PUSH
9279: LD_INT 48
9281: PUSH
9282: LD_INT 49
9284: PUSH
9285: LD_INT 50
9287: PUSH
9288: LD_INT 51
9290: PUSH
9291: LD_INT 52
9293: PUSH
9294: LD_INT 53
9296: PUSH
9297: LD_INT 54
9299: PUSH
9300: LD_INT 55
9302: PUSH
9303: LD_INT 56
9305: PUSH
9306: LD_INT 60
9308: PUSH
9309: LD_INT 61
9311: PUSH
9312: LD_INT 62
9314: PUSH
9315: LD_INT 66
9317: PUSH
9318: LD_INT 67
9320: PUSH
9321: LD_INT 68
9323: PUSH
9324: LD_INT 81
9326: PUSH
9327: LD_INT 82
9329: PUSH
9330: LD_INT 83
9332: PUSH
9333: LD_INT 84
9335: PUSH
9336: LD_INT 85
9338: PUSH
9339: LD_INT 87
9341: PUSH
9342: LD_INT 88
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: ST_TO_ADDR
9401: GO 9634
9403: LD_INT 3
9405: DOUBLE
9406: EQUAL
9407: IFTRUE 9411
9409: GO 9633
9411: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9412: LD_ADDR_VAR 0 4
9416: PUSH
9417: LD_INT 46
9419: PUSH
9420: LD_INT 47
9422: PUSH
9423: LD_INT 1
9425: PUSH
9426: LD_INT 2
9428: PUSH
9429: LD_INT 82
9431: PUSH
9432: LD_INT 83
9434: PUSH
9435: LD_INT 84
9437: PUSH
9438: LD_INT 85
9440: PUSH
9441: LD_INT 86
9443: PUSH
9444: LD_INT 11
9446: PUSH
9447: LD_INT 9
9449: PUSH
9450: LD_INT 20
9452: PUSH
9453: LD_INT 19
9455: PUSH
9456: LD_INT 21
9458: PUSH
9459: LD_INT 24
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 28
9470: PUSH
9471: LD_INT 29
9473: PUSH
9474: LD_INT 30
9476: PUSH
9477: LD_INT 31
9479: PUSH
9480: LD_INT 37
9482: PUSH
9483: LD_INT 38
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: LD_INT 27
9491: PUSH
9492: LD_INT 33
9494: PUSH
9495: LD_INT 69
9497: PUSH
9498: LD_INT 39
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 40
9506: PUSH
9507: LD_INT 71
9509: PUSH
9510: LD_INT 23
9512: PUSH
9513: LD_INT 44
9515: PUSH
9516: LD_INT 48
9518: PUSH
9519: LD_INT 49
9521: PUSH
9522: LD_INT 50
9524: PUSH
9525: LD_INT 51
9527: PUSH
9528: LD_INT 52
9530: PUSH
9531: LD_INT 53
9533: PUSH
9534: LD_INT 54
9536: PUSH
9537: LD_INT 55
9539: PUSH
9540: LD_INT 56
9542: PUSH
9543: LD_INT 57
9545: PUSH
9546: LD_INT 58
9548: PUSH
9549: LD_INT 59
9551: PUSH
9552: LD_INT 63
9554: PUSH
9555: LD_INT 64
9557: PUSH
9558: LD_INT 65
9560: PUSH
9561: LD_INT 82
9563: PUSH
9564: LD_INT 83
9566: PUSH
9567: LD_INT 84
9569: PUSH
9570: LD_INT 85
9572: PUSH
9573: LD_INT 86
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
9631: GO 9634
9633: POP
// if state > - 1 and state < 3 then
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 1
9641: NEG
9642: GREATER
9643: PUSH
9644: LD_VAR 0 3
9648: PUSH
9649: LD_INT 3
9651: LESS
9652: AND
9653: IFFALSE 9710
// for i in result do
9655: LD_ADDR_VAR 0 5
9659: PUSH
9660: LD_VAR 0 4
9664: PUSH
9665: FOR_IN
9666: IFFALSE 9708
// if GetTech ( i , side ) <> state then
9668: LD_VAR 0 5
9672: PPUSH
9673: LD_VAR 0 1
9677: PPUSH
9678: CALL_OW 321
9682: PUSH
9683: LD_VAR 0 3
9687: NONEQUAL
9688: IFFALSE 9706
// result := result diff i ;
9690: LD_ADDR_VAR 0 4
9694: PUSH
9695: LD_VAR 0 4
9699: PUSH
9700: LD_VAR 0 5
9704: DIFF
9705: ST_TO_ADDR
9706: GO 9665
9708: POP
9709: POP
// end ;
9710: LD_VAR 0 4
9714: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9715: LD_INT 0
9717: PPUSH
9718: PPUSH
9719: PPUSH
// result := true ;
9720: LD_ADDR_VAR 0 3
9724: PUSH
9725: LD_INT 1
9727: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9728: LD_ADDR_VAR 0 5
9732: PUSH
9733: LD_VAR 0 2
9737: PPUSH
9738: CALL_OW 480
9742: ST_TO_ADDR
// if not tmp then
9743: LD_VAR 0 5
9747: NOT
9748: IFFALSE 9752
// exit ;
9750: GO 9801
// for i in tmp do
9752: LD_ADDR_VAR 0 4
9756: PUSH
9757: LD_VAR 0 5
9761: PUSH
9762: FOR_IN
9763: IFFALSE 9799
// if GetTech ( i , side ) <> state_researched then
9765: LD_VAR 0 4
9769: PPUSH
9770: LD_VAR 0 1
9774: PPUSH
9775: CALL_OW 321
9779: PUSH
9780: LD_INT 2
9782: NONEQUAL
9783: IFFALSE 9797
// begin result := false ;
9785: LD_ADDR_VAR 0 3
9789: PUSH
9790: LD_INT 0
9792: ST_TO_ADDR
// exit ;
9793: POP
9794: POP
9795: GO 9801
// end ;
9797: GO 9762
9799: POP
9800: POP
// end ;
9801: LD_VAR 0 3
9805: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9806: LD_INT 0
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
9819: PPUSH
9820: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9821: LD_VAR 0 1
9825: NOT
9826: PUSH
9827: LD_VAR 0 1
9831: PPUSH
9832: CALL_OW 257
9836: PUSH
9837: LD_INT 9
9839: NONEQUAL
9840: OR
9841: IFFALSE 9845
// exit ;
9843: GO 10418
// side := GetSide ( unit ) ;
9845: LD_ADDR_VAR 0 9
9849: PUSH
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 255
9859: ST_TO_ADDR
// tech_space := tech_spacanom ;
9860: LD_ADDR_VAR 0 12
9864: PUSH
9865: LD_INT 29
9867: ST_TO_ADDR
// tech_time := tech_taurad ;
9868: LD_ADDR_VAR 0 13
9872: PUSH
9873: LD_INT 28
9875: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9876: LD_ADDR_VAR 0 11
9880: PUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 310
9890: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9891: LD_VAR 0 11
9895: PPUSH
9896: CALL_OW 247
9900: PUSH
9901: LD_INT 2
9903: EQUAL
9904: IFFALSE 9908
// exit ;
9906: GO 10418
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9908: LD_ADDR_VAR 0 8
9912: PUSH
9913: LD_INT 81
9915: PUSH
9916: LD_VAR 0 9
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 3
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 3
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PPUSH
9946: CALL_OW 69
9950: ST_TO_ADDR
// if not tmp then
9951: LD_VAR 0 8
9955: NOT
9956: IFFALSE 9960
// exit ;
9958: GO 10418
// if in_unit then
9960: LD_VAR 0 11
9964: IFFALSE 9988
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9966: LD_ADDR_VAR 0 10
9970: PUSH
9971: LD_VAR 0 8
9975: PPUSH
9976: LD_VAR 0 11
9980: PPUSH
9981: CALL_OW 74
9985: ST_TO_ADDR
9986: GO 10008
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9988: LD_ADDR_VAR 0 10
9992: PUSH
9993: LD_VAR 0 8
9997: PPUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 74
10007: ST_TO_ADDR
// if not enemy then
10008: LD_VAR 0 10
10012: NOT
10013: IFFALSE 10017
// exit ;
10015: GO 10418
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10017: LD_VAR 0 11
10021: PUSH
10022: LD_VAR 0 11
10026: PPUSH
10027: LD_VAR 0 10
10031: PPUSH
10032: CALL_OW 296
10036: PUSH
10037: LD_INT 13
10039: GREATER
10040: AND
10041: PUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: LD_VAR 0 10
10051: PPUSH
10052: CALL_OW 296
10056: PUSH
10057: LD_INT 12
10059: GREATER
10060: OR
10061: IFFALSE 10065
// exit ;
10063: GO 10418
// missile := [ 1 ] ;
10065: LD_ADDR_VAR 0 14
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10076: LD_VAR 0 9
10080: PPUSH
10081: LD_VAR 0 12
10085: PPUSH
10086: CALL_OW 325
10090: IFFALSE 10119
// missile := Replace ( missile , missile + 1 , 2 ) ;
10092: LD_ADDR_VAR 0 14
10096: PUSH
10097: LD_VAR 0 14
10101: PPUSH
10102: LD_VAR 0 14
10106: PUSH
10107: LD_INT 1
10109: PLUS
10110: PPUSH
10111: LD_INT 2
10113: PPUSH
10114: CALL_OW 1
10118: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10119: LD_VAR 0 9
10123: PPUSH
10124: LD_VAR 0 13
10128: PPUSH
10129: CALL_OW 325
10133: PUSH
10134: LD_VAR 0 10
10138: PPUSH
10139: CALL_OW 255
10143: PPUSH
10144: LD_VAR 0 13
10148: PPUSH
10149: CALL_OW 325
10153: NOT
10154: AND
10155: IFFALSE 10184
// missile := Replace ( missile , missile + 1 , 3 ) ;
10157: LD_ADDR_VAR 0 14
10161: PUSH
10162: LD_VAR 0 14
10166: PPUSH
10167: LD_VAR 0 14
10171: PUSH
10172: LD_INT 1
10174: PLUS
10175: PPUSH
10176: LD_INT 3
10178: PPUSH
10179: CALL_OW 1
10183: ST_TO_ADDR
// if missile < 2 then
10184: LD_VAR 0 14
10188: PUSH
10189: LD_INT 2
10191: LESS
10192: IFFALSE 10196
// exit ;
10194: GO 10418
// x := GetX ( enemy ) ;
10196: LD_ADDR_VAR 0 4
10200: PUSH
10201: LD_VAR 0 10
10205: PPUSH
10206: CALL_OW 250
10210: ST_TO_ADDR
// y := GetY ( enemy ) ;
10211: LD_ADDR_VAR 0 5
10215: PUSH
10216: LD_VAR 0 10
10220: PPUSH
10221: CALL_OW 251
10225: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10226: LD_ADDR_VAR 0 6
10230: PUSH
10231: LD_VAR 0 4
10235: PUSH
10236: LD_INT 1
10238: NEG
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 12
10247: PLUS
10248: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10249: LD_ADDR_VAR 0 7
10253: PUSH
10254: LD_VAR 0 5
10258: PUSH
10259: LD_INT 1
10261: NEG
10262: PPUSH
10263: LD_INT 1
10265: PPUSH
10266: CALL_OW 12
10270: PLUS
10271: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10272: LD_VAR 0 6
10276: PPUSH
10277: LD_VAR 0 7
10281: PPUSH
10282: CALL_OW 488
10286: NOT
10287: IFFALSE 10309
// begin _x := x ;
10289: LD_ADDR_VAR 0 6
10293: PUSH
10294: LD_VAR 0 4
10298: ST_TO_ADDR
// _y := y ;
10299: LD_ADDR_VAR 0 7
10303: PUSH
10304: LD_VAR 0 5
10308: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10309: LD_ADDR_VAR 0 3
10313: PUSH
10314: LD_INT 1
10316: PPUSH
10317: LD_VAR 0 14
10321: PPUSH
10322: CALL_OW 12
10326: ST_TO_ADDR
// case i of 1 :
10327: LD_VAR 0 3
10331: PUSH
10332: LD_INT 1
10334: DOUBLE
10335: EQUAL
10336: IFTRUE 10340
10338: GO 10357
10340: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10341: LD_VAR 0 1
10345: PPUSH
10346: LD_VAR 0 10
10350: PPUSH
10351: CALL_OW 115
10355: GO 10418
10357: LD_INT 2
10359: DOUBLE
10360: EQUAL
10361: IFTRUE 10365
10363: GO 10387
10365: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_VAR 0 6
10375: PPUSH
10376: LD_VAR 0 7
10380: PPUSH
10381: CALL_OW 153
10385: GO 10418
10387: LD_INT 3
10389: DOUBLE
10390: EQUAL
10391: IFTRUE 10395
10393: GO 10417
10395: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10396: LD_VAR 0 1
10400: PPUSH
10401: LD_VAR 0 6
10405: PPUSH
10406: LD_VAR 0 7
10410: PPUSH
10411: CALL_OW 154
10415: GO 10418
10417: POP
// end ;
10418: LD_VAR 0 2
10422: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10423: LD_INT 0
10425: PPUSH
10426: PPUSH
10427: PPUSH
10428: PPUSH
10429: PPUSH
10430: PPUSH
// if not unit or not building then
10431: LD_VAR 0 1
10435: NOT
10436: PUSH
10437: LD_VAR 0 2
10441: NOT
10442: OR
10443: IFFALSE 10447
// exit ;
10445: GO 10605
// x := GetX ( building ) ;
10447: LD_ADDR_VAR 0 5
10451: PUSH
10452: LD_VAR 0 2
10456: PPUSH
10457: CALL_OW 250
10461: ST_TO_ADDR
// y := GetY ( building ) ;
10462: LD_ADDR_VAR 0 6
10466: PUSH
10467: LD_VAR 0 2
10471: PPUSH
10472: CALL_OW 251
10476: ST_TO_ADDR
// for i = 0 to 5 do
10477: LD_ADDR_VAR 0 4
10481: PUSH
10482: DOUBLE
10483: LD_INT 0
10485: DEC
10486: ST_TO_ADDR
10487: LD_INT 5
10489: PUSH
10490: FOR_TO
10491: IFFALSE 10603
// begin _x := ShiftX ( x , i , 3 ) ;
10493: LD_ADDR_VAR 0 7
10497: PUSH
10498: LD_VAR 0 5
10502: PPUSH
10503: LD_VAR 0 4
10507: PPUSH
10508: LD_INT 3
10510: PPUSH
10511: CALL_OW 272
10515: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10516: LD_ADDR_VAR 0 8
10520: PUSH
10521: LD_VAR 0 6
10525: PPUSH
10526: LD_VAR 0 4
10530: PPUSH
10531: LD_INT 3
10533: PPUSH
10534: CALL_OW 273
10538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10539: LD_VAR 0 7
10543: PPUSH
10544: LD_VAR 0 8
10548: PPUSH
10549: CALL_OW 488
10553: NOT
10554: IFFALSE 10558
// continue ;
10556: GO 10490
// if HexInfo ( _x , _y ) = 0 then
10558: LD_VAR 0 7
10562: PPUSH
10563: LD_VAR 0 8
10567: PPUSH
10568: CALL_OW 428
10572: PUSH
10573: LD_INT 0
10575: EQUAL
10576: IFFALSE 10601
// begin ComMoveXY ( unit , _x , _y ) ;
10578: LD_VAR 0 1
10582: PPUSH
10583: LD_VAR 0 7
10587: PPUSH
10588: LD_VAR 0 8
10592: PPUSH
10593: CALL_OW 111
// exit ;
10597: POP
10598: POP
10599: GO 10605
// end ; end ;
10601: GO 10490
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 3
10609: RET
// export function ScanBase ( side , base_area ) ; begin
10610: LD_INT 0
10612: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10613: LD_ADDR_VAR 0 3
10617: PUSH
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_INT 81
10625: PUSH
10626: LD_VAR 0 1
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 70
10639: ST_TO_ADDR
// end ;
10640: LD_VAR 0 3
10644: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10645: LD_INT 0
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
// result := false ;
10651: LD_ADDR_VAR 0 2
10655: PUSH
10656: LD_INT 0
10658: ST_TO_ADDR
// side := GetSide ( unit ) ;
10659: LD_ADDR_VAR 0 3
10663: PUSH
10664: LD_VAR 0 1
10668: PPUSH
10669: CALL_OW 255
10673: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10674: LD_ADDR_VAR 0 4
10678: PUSH
10679: LD_VAR 0 1
10683: PPUSH
10684: CALL_OW 248
10688: ST_TO_ADDR
// case nat of 1 :
10689: LD_VAR 0 4
10693: PUSH
10694: LD_INT 1
10696: DOUBLE
10697: EQUAL
10698: IFTRUE 10702
10700: GO 10713
10702: POP
// tech := tech_lassight ; 2 :
10703: LD_ADDR_VAR 0 5
10707: PUSH
10708: LD_INT 12
10710: ST_TO_ADDR
10711: GO 10752
10713: LD_INT 2
10715: DOUBLE
10716: EQUAL
10717: IFTRUE 10721
10719: GO 10732
10721: POP
// tech := tech_mortar ; 3 :
10722: LD_ADDR_VAR 0 5
10726: PUSH
10727: LD_INT 41
10729: ST_TO_ADDR
10730: GO 10752
10732: LD_INT 3
10734: DOUBLE
10735: EQUAL
10736: IFTRUE 10740
10738: GO 10751
10740: POP
// tech := tech_bazooka ; end ;
10741: LD_ADDR_VAR 0 5
10745: PUSH
10746: LD_INT 44
10748: ST_TO_ADDR
10749: GO 10752
10751: POP
// if Researched ( side , tech ) then
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_VAR 0 5
10761: PPUSH
10762: CALL_OW 325
10766: IFFALSE 10793
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10768: LD_ADDR_VAR 0 2
10772: PUSH
10773: LD_INT 5
10775: PUSH
10776: LD_INT 8
10778: PUSH
10779: LD_INT 9
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_VAR 0 4
10791: ARRAY
10792: ST_TO_ADDR
// end ;
10793: LD_VAR 0 2
10797: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10798: LD_INT 0
10800: PPUSH
10801: PPUSH
10802: PPUSH
// if not mines then
10803: LD_VAR 0 2
10807: NOT
10808: IFFALSE 10812
// exit ;
10810: GO 10956
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10812: LD_ADDR_VAR 0 5
10816: PUSH
10817: LD_INT 81
10819: PUSH
10820: LD_VAR 0 1
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 3
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 69
10854: ST_TO_ADDR
// for i in mines do
10855: LD_ADDR_VAR 0 4
10859: PUSH
10860: LD_VAR 0 2
10864: PUSH
10865: FOR_IN
10866: IFFALSE 10954
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10868: LD_VAR 0 4
10872: PUSH
10873: LD_INT 1
10875: ARRAY
10876: PPUSH
10877: LD_VAR 0 4
10881: PUSH
10882: LD_INT 2
10884: ARRAY
10885: PPUSH
10886: CALL_OW 458
10890: NOT
10891: IFFALSE 10895
// continue ;
10893: GO 10865
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10895: LD_VAR 0 4
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: PPUSH
10904: LD_VAR 0 4
10908: PUSH
10909: LD_INT 2
10911: ARRAY
10912: PPUSH
10913: CALL_OW 428
10917: PUSH
10918: LD_VAR 0 5
10922: IN
10923: IFFALSE 10952
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10925: LD_VAR 0 4
10929: PUSH
10930: LD_INT 1
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 4
10938: PUSH
10939: LD_INT 2
10941: ARRAY
10942: PPUSH
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 456
// end ;
10952: GO 10865
10954: POP
10955: POP
// end ;
10956: LD_VAR 0 3
10960: RET
// export function Count ( array ) ; var i ; begin
10961: LD_INT 0
10963: PPUSH
10964: PPUSH
// result := 0 ;
10965: LD_ADDR_VAR 0 2
10969: PUSH
10970: LD_INT 0
10972: ST_TO_ADDR
// for i in array do
10973: LD_ADDR_VAR 0 3
10977: PUSH
10978: LD_VAR 0 1
10982: PUSH
10983: FOR_IN
10984: IFFALSE 11008
// if i then
10986: LD_VAR 0 3
10990: IFFALSE 11006
// result := result + 1 ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: LD_VAR 0 2
11001: PUSH
11002: LD_INT 1
11004: PLUS
11005: ST_TO_ADDR
11006: GO 10983
11008: POP
11009: POP
// end ;
11010: LD_VAR 0 2
11014: RET
// export function IsEmpty ( building ) ; begin
11015: LD_INT 0
11017: PPUSH
// if not building then
11018: LD_VAR 0 1
11022: NOT
11023: IFFALSE 11027
// exit ;
11025: GO 11070
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11027: LD_ADDR_VAR 0 2
11031: PUSH
11032: LD_VAR 0 1
11036: PUSH
11037: LD_INT 22
11039: PUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 255
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 58
11056: PUSH
11057: EMPTY
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: IN
11069: ST_TO_ADDR
// end ;
11070: LD_VAR 0 2
11074: RET
// export function IsNotFull ( building ) ; var places ; begin
11075: LD_INT 0
11077: PPUSH
11078: PPUSH
// if not building then
11079: LD_VAR 0 1
11083: NOT
11084: IFFALSE 11088
// exit ;
11086: GO 11259
// result := false ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// places := 0 ;
11096: LD_ADDR_VAR 0 3
11100: PUSH
11101: LD_INT 0
11103: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 266
11113: PUSH
11114: LD_INT 0
11116: DOUBLE
11117: EQUAL
11118: IFTRUE 11176
11120: LD_INT 1
11122: DOUBLE
11123: EQUAL
11124: IFTRUE 11176
11126: LD_INT 6
11128: DOUBLE
11129: EQUAL
11130: IFTRUE 11176
11132: LD_INT 7
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11176
11138: LD_INT 8
11140: DOUBLE
11141: EQUAL
11142: IFTRUE 11176
11144: LD_INT 4
11146: DOUBLE
11147: EQUAL
11148: IFTRUE 11176
11150: LD_INT 5
11152: DOUBLE
11153: EQUAL
11154: IFTRUE 11176
11156: LD_INT 2
11158: DOUBLE
11159: EQUAL
11160: IFTRUE 11176
11162: LD_INT 3
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11176
11168: LD_INT 35
11170: DOUBLE
11171: EQUAL
11172: IFTRUE 11176
11174: GO 11187
11176: POP
// places := 6 ; b_bunker , b_breastwork :
11177: LD_ADDR_VAR 0 3
11181: PUSH
11182: LD_INT 6
11184: ST_TO_ADDR
11185: GO 11232
11187: LD_INT 32
11189: DOUBLE
11190: EQUAL
11191: IFTRUE 11201
11193: LD_INT 31
11195: DOUBLE
11196: EQUAL
11197: IFTRUE 11201
11199: GO 11212
11201: POP
// places := 1 ; b_control_tower :
11202: LD_ADDR_VAR 0 3
11206: PUSH
11207: LD_INT 1
11209: ST_TO_ADDR
11210: GO 11232
11212: LD_INT 36
11214: DOUBLE
11215: EQUAL
11216: IFTRUE 11220
11218: GO 11231
11220: POP
// places := 3 ; end ;
11221: LD_ADDR_VAR 0 3
11225: PUSH
11226: LD_INT 3
11228: ST_TO_ADDR
11229: GO 11232
11231: POP
// if places then
11232: LD_VAR 0 3
11236: IFFALSE 11259
// result := UnitsInside ( building ) < places ;
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: LD_VAR 0 1
11247: PPUSH
11248: CALL_OW 313
11252: PUSH
11253: LD_VAR 0 3
11257: LESS
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 2
11263: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
// tmp := [ ] ;
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: EMPTY
11276: ST_TO_ADDR
// list := [ ] ;
11277: LD_ADDR_VAR 0 5
11281: PUSH
11282: EMPTY
11283: ST_TO_ADDR
// for i = 16 to 25 do
11284: LD_ADDR_VAR 0 4
11288: PUSH
11289: DOUBLE
11290: LD_INT 16
11292: DEC
11293: ST_TO_ADDR
11294: LD_INT 25
11296: PUSH
11297: FOR_TO
11298: IFFALSE 11371
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11300: LD_ADDR_VAR 0 3
11304: PUSH
11305: LD_VAR 0 3
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_VAR 0 1
11317: PPUSH
11318: CALL_OW 255
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 91
11329: PUSH
11330: LD_VAR 0 1
11334: PUSH
11335: LD_INT 6
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 30
11345: PUSH
11346: LD_VAR 0 4
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: ADD
11368: ST_TO_ADDR
11369: GO 11297
11371: POP
11372: POP
// for i = 1 to tmp do
11373: LD_ADDR_VAR 0 4
11377: PUSH
11378: DOUBLE
11379: LD_INT 1
11381: DEC
11382: ST_TO_ADDR
11383: LD_VAR 0 3
11387: PUSH
11388: FOR_TO
11389: IFFALSE 11477
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11391: LD_ADDR_VAR 0 5
11395: PUSH
11396: LD_VAR 0 5
11400: PUSH
11401: LD_VAR 0 3
11405: PUSH
11406: LD_VAR 0 4
11410: ARRAY
11411: PPUSH
11412: CALL_OW 266
11416: PUSH
11417: LD_VAR 0 3
11421: PUSH
11422: LD_VAR 0 4
11426: ARRAY
11427: PPUSH
11428: CALL_OW 250
11432: PUSH
11433: LD_VAR 0 3
11437: PUSH
11438: LD_VAR 0 4
11442: ARRAY
11443: PPUSH
11444: CALL_OW 251
11448: PUSH
11449: LD_VAR 0 3
11453: PUSH
11454: LD_VAR 0 4
11458: ARRAY
11459: PPUSH
11460: CALL_OW 254
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: EMPTY
11472: LIST
11473: ADD
11474: ST_TO_ADDR
11475: GO 11388
11477: POP
11478: POP
// result := list ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_VAR 0 5
11488: ST_TO_ADDR
// end ;
11489: LD_VAR 0 2
11493: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
11501: PPUSH
11502: PPUSH
// if not factory then
11503: LD_VAR 0 1
11507: NOT
11508: IFFALSE 11512
// exit ;
11510: GO 12105
// if control = control_apeman then
11512: LD_VAR 0 4
11516: PUSH
11517: LD_INT 5
11519: EQUAL
11520: IFFALSE 11629
// begin tmp := UnitsInside ( factory ) ;
11522: LD_ADDR_VAR 0 8
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 313
11536: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11537: LD_VAR 0 8
11541: PPUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 12
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PPUSH
11552: CALL_OW 72
11556: NOT
11557: IFFALSE 11567
// control := control_manual ;
11559: LD_ADDR_VAR 0 4
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11567: LD_ADDR_VAR 0 8
11571: PUSH
11572: LD_VAR 0 1
11576: PPUSH
11577: CALL 11264 0 1
11581: ST_TO_ADDR
// if tmp then
11582: LD_VAR 0 8
11586: IFFALSE 11629
// begin for i in tmp do
11588: LD_ADDR_VAR 0 7
11592: PUSH
11593: LD_VAR 0 8
11597: PUSH
11598: FOR_IN
11599: IFFALSE 11627
// if i [ 1 ] = b_ext_radio then
11601: LD_VAR 0 7
11605: PUSH
11606: LD_INT 1
11608: ARRAY
11609: PUSH
11610: LD_INT 22
11612: EQUAL
11613: IFFALSE 11625
// begin control := control_remote ;
11615: LD_ADDR_VAR 0 4
11619: PUSH
11620: LD_INT 2
11622: ST_TO_ADDR
// break ;
11623: GO 11627
// end ;
11625: GO 11598
11627: POP
11628: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11629: LD_VAR 0 1
11633: PPUSH
11634: LD_VAR 0 2
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_VAR 0 4
11648: PPUSH
11649: LD_VAR 0 5
11653: PPUSH
11654: CALL_OW 448
11658: IFFALSE 11693
// begin result := [ chassis , engine , control , weapon ] ;
11660: LD_ADDR_VAR 0 6
11664: PUSH
11665: LD_VAR 0 2
11669: PUSH
11670: LD_VAR 0 3
11674: PUSH
11675: LD_VAR 0 4
11679: PUSH
11680: LD_VAR 0 5
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: ST_TO_ADDR
// exit ;
11691: GO 12105
// end ; _chassis := AvailableChassisList ( factory ) ;
11693: LD_ADDR_VAR 0 9
11697: PUSH
11698: LD_VAR 0 1
11702: PPUSH
11703: CALL_OW 475
11707: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11708: LD_ADDR_VAR 0 11
11712: PUSH
11713: LD_VAR 0 1
11717: PPUSH
11718: CALL_OW 476
11722: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11723: LD_ADDR_VAR 0 12
11727: PUSH
11728: LD_VAR 0 1
11732: PPUSH
11733: CALL_OW 477
11737: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11738: LD_ADDR_VAR 0 10
11742: PUSH
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 478
11752: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11753: LD_VAR 0 9
11757: NOT
11758: PUSH
11759: LD_VAR 0 11
11763: NOT
11764: OR
11765: PUSH
11766: LD_VAR 0 12
11770: NOT
11771: OR
11772: PUSH
11773: LD_VAR 0 10
11777: NOT
11778: OR
11779: IFFALSE 11814
// begin result := [ chassis , engine , control , weapon ] ;
11781: LD_ADDR_VAR 0 6
11785: PUSH
11786: LD_VAR 0 2
11790: PUSH
11791: LD_VAR 0 3
11795: PUSH
11796: LD_VAR 0 4
11800: PUSH
11801: LD_VAR 0 5
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: ST_TO_ADDR
// exit ;
11812: GO 12105
// end ; if not chassis in _chassis then
11814: LD_VAR 0 2
11818: PUSH
11819: LD_VAR 0 9
11823: IN
11824: NOT
11825: IFFALSE 11851
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_VAR 0 9
11836: PUSH
11837: LD_INT 1
11839: PPUSH
11840: LD_VAR 0 9
11844: PPUSH
11845: CALL_OW 12
11849: ARRAY
11850: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11851: LD_VAR 0 2
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: CALL 12110 0 2
11865: NOT
11866: IFFALSE 11925
// repeat engine := _engine [ 1 ] ;
11868: LD_ADDR_VAR 0 3
11872: PUSH
11873: LD_VAR 0 11
11877: PUSH
11878: LD_INT 1
11880: ARRAY
11881: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11882: LD_ADDR_VAR 0 11
11886: PUSH
11887: LD_VAR 0 11
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 3
11899: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11900: LD_VAR 0 2
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: CALL 12110 0 2
11914: PUSH
11915: LD_VAR 0 11
11919: PUSH
11920: EMPTY
11921: EQUAL
11922: OR
11923: IFFALSE 11868
// if not control in _control then
11925: LD_VAR 0 4
11929: PUSH
11930: LD_VAR 0 12
11934: IN
11935: NOT
11936: IFFALSE 11962
// control := _control [ rand ( 1 , _control ) ] ;
11938: LD_ADDR_VAR 0 4
11942: PUSH
11943: LD_VAR 0 12
11947: PUSH
11948: LD_INT 1
11950: PPUSH
11951: LD_VAR 0 12
11955: PPUSH
11956: CALL_OW 12
11960: ARRAY
11961: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11962: LD_VAR 0 2
11966: PPUSH
11967: LD_VAR 0 5
11971: PPUSH
11972: CALL 12330 0 2
11976: NOT
11977: IFFALSE 12036
// repeat weapon := _weapon [ 1 ] ;
11979: LD_ADDR_VAR 0 5
11983: PUSH
11984: LD_VAR 0 10
11988: PUSH
11989: LD_INT 1
11991: ARRAY
11992: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11993: LD_ADDR_VAR 0 10
11997: PUSH
11998: LD_VAR 0 10
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 3
12010: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12011: LD_VAR 0 2
12015: PPUSH
12016: LD_VAR 0 5
12020: PPUSH
12021: CALL 12330 0 2
12025: PUSH
12026: LD_VAR 0 10
12030: PUSH
12031: EMPTY
12032: EQUAL
12033: OR
12034: IFFALSE 11979
// result := [ ] ;
12036: LD_ADDR_VAR 0 6
12040: PUSH
12041: EMPTY
12042: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_VAR 0 3
12057: PPUSH
12058: LD_VAR 0 4
12062: PPUSH
12063: LD_VAR 0 5
12067: PPUSH
12068: CALL_OW 448
12072: IFFALSE 12105
// result := [ chassis , engine , control , weapon ] ;
12074: LD_ADDR_VAR 0 6
12078: PUSH
12079: LD_VAR 0 2
12083: PUSH
12084: LD_VAR 0 3
12088: PUSH
12089: LD_VAR 0 4
12093: PUSH
12094: LD_VAR 0 5
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: ST_TO_ADDR
// end ;
12105: LD_VAR 0 6
12109: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12110: LD_INT 0
12112: PPUSH
// if not chassis or not engine then
12113: LD_VAR 0 1
12117: NOT
12118: PUSH
12119: LD_VAR 0 2
12123: NOT
12124: OR
12125: IFFALSE 12129
// exit ;
12127: GO 12325
// case engine of engine_solar :
12129: LD_VAR 0 2
12133: PUSH
12134: LD_INT 2
12136: DOUBLE
12137: EQUAL
12138: IFTRUE 12142
12140: GO 12180
12142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12143: LD_ADDR_VAR 0 3
12147: PUSH
12148: LD_INT 11
12150: PUSH
12151: LD_INT 12
12153: PUSH
12154: LD_INT 13
12156: PUSH
12157: LD_INT 14
12159: PUSH
12160: LD_INT 1
12162: PUSH
12163: LD_INT 2
12165: PUSH
12166: LD_INT 3
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: ST_TO_ADDR
12178: GO 12309
12180: LD_INT 1
12182: DOUBLE
12183: EQUAL
12184: IFTRUE 12188
12186: GO 12250
12188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12189: LD_ADDR_VAR 0 3
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: LD_INT 12
12199: PUSH
12200: LD_INT 13
12202: PUSH
12203: LD_INT 14
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: LD_INT 3
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: LD_INT 21
12223: PUSH
12224: LD_INT 23
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_INT 24
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: ST_TO_ADDR
12248: GO 12309
12250: LD_INT 3
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12308
12258: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12259: LD_ADDR_VAR 0 3
12263: PUSH
12264: LD_INT 13
12266: PUSH
12267: LD_INT 14
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: LD_INT 4
12278: PUSH
12279: LD_INT 5
12281: PUSH
12282: LD_INT 21
12284: PUSH
12285: LD_INT 22
12287: PUSH
12288: LD_INT 23
12290: PUSH
12291: LD_INT 24
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: ST_TO_ADDR
12306: GO 12309
12308: POP
// result := ( chassis in result ) ;
12309: LD_ADDR_VAR 0 3
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: LD_VAR 0 3
12323: IN
12324: ST_TO_ADDR
// end ;
12325: LD_VAR 0 3
12329: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12330: LD_INT 0
12332: PPUSH
// if not chassis or not weapon then
12333: LD_VAR 0 1
12337: NOT
12338: PUSH
12339: LD_VAR 0 2
12343: NOT
12344: OR
12345: IFFALSE 12349
// exit ;
12347: GO 13409
// case weapon of us_machine_gun :
12349: LD_VAR 0 2
12353: PUSH
12354: LD_INT 2
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12392
12362: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_INT 1
12370: PUSH
12371: LD_INT 2
12373: PUSH
12374: LD_INT 3
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: LD_INT 5
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: ST_TO_ADDR
12390: GO 13393
12392: LD_INT 3
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12430
12400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12401: LD_ADDR_VAR 0 3
12405: PUSH
12406: LD_INT 1
12408: PUSH
12409: LD_INT 2
12411: PUSH
12412: LD_INT 3
12414: PUSH
12415: LD_INT 4
12417: PUSH
12418: LD_INT 5
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: ST_TO_ADDR
12428: GO 13393
12430: LD_INT 11
12432: DOUBLE
12433: EQUAL
12434: IFTRUE 12438
12436: GO 12468
12438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12439: LD_ADDR_VAR 0 3
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: LD_INT 3
12452: PUSH
12453: LD_INT 4
12455: PUSH
12456: LD_INT 5
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: ST_TO_ADDR
12466: GO 13393
12468: LD_INT 4
12470: DOUBLE
12471: EQUAL
12472: IFTRUE 12476
12474: GO 12502
12476: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: LD_INT 4
12490: PUSH
12491: LD_INT 5
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: ST_TO_ADDR
12500: GO 13393
12502: LD_INT 5
12504: DOUBLE
12505: EQUAL
12506: IFTRUE 12510
12508: GO 12536
12510: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: ST_TO_ADDR
12534: GO 13393
12536: LD_INT 9
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12570
12544: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12545: LD_ADDR_VAR 0 3
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: LD_INT 3
12555: PUSH
12556: LD_INT 4
12558: PUSH
12559: LD_INT 5
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: ST_TO_ADDR
12568: GO 13393
12570: LD_INT 7
12572: DOUBLE
12573: EQUAL
12574: IFTRUE 12578
12576: GO 12604
12578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12579: LD_ADDR_VAR 0 3
12583: PUSH
12584: LD_INT 2
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: LD_INT 4
12592: PUSH
12593: LD_INT 5
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: ST_TO_ADDR
12602: GO 13393
12604: LD_INT 12
12606: DOUBLE
12607: EQUAL
12608: IFTRUE 12612
12610: GO 12638
12612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12613: LD_ADDR_VAR 0 3
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: LD_INT 4
12626: PUSH
12627: LD_INT 5
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: ST_TO_ADDR
12636: GO 13393
12638: LD_INT 13
12640: DOUBLE
12641: EQUAL
12642: IFTRUE 12646
12644: GO 12672
12646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12647: LD_ADDR_VAR 0 3
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 3
12657: PUSH
12658: LD_INT 4
12660: PUSH
12661: LD_INT 5
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: ST_TO_ADDR
12670: GO 13393
12672: LD_INT 14
12674: DOUBLE
12675: EQUAL
12676: IFTRUE 12680
12678: GO 12698
12680: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12681: LD_ADDR_VAR 0 3
12685: PUSH
12686: LD_INT 4
12688: PUSH
12689: LD_INT 5
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: ST_TO_ADDR
12696: GO 13393
12698: LD_INT 6
12700: DOUBLE
12701: EQUAL
12702: IFTRUE 12706
12704: GO 12724
12706: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12707: LD_ADDR_VAR 0 3
12711: PUSH
12712: LD_INT 4
12714: PUSH
12715: LD_INT 5
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: ST_TO_ADDR
12722: GO 13393
12724: LD_INT 10
12726: DOUBLE
12727: EQUAL
12728: IFTRUE 12732
12730: GO 12750
12732: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12733: LD_ADDR_VAR 0 3
12737: PUSH
12738: LD_INT 4
12740: PUSH
12741: LD_INT 5
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: ST_TO_ADDR
12748: GO 13393
12750: LD_INT 22
12752: DOUBLE
12753: EQUAL
12754: IFTRUE 12758
12756: GO 12784
12758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12759: LD_ADDR_VAR 0 3
12763: PUSH
12764: LD_INT 11
12766: PUSH
12767: LD_INT 12
12769: PUSH
12770: LD_INT 13
12772: PUSH
12773: LD_INT 14
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: ST_TO_ADDR
12782: GO 13393
12784: LD_INT 23
12786: DOUBLE
12787: EQUAL
12788: IFTRUE 12792
12790: GO 12818
12792: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12793: LD_ADDR_VAR 0 3
12797: PUSH
12798: LD_INT 11
12800: PUSH
12801: LD_INT 12
12803: PUSH
12804: LD_INT 13
12806: PUSH
12807: LD_INT 14
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: ST_TO_ADDR
12816: GO 13393
12818: LD_INT 24
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12826
12824: GO 12852
12826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_INT 11
12834: PUSH
12835: LD_INT 12
12837: PUSH
12838: LD_INT 13
12840: PUSH
12841: LD_INT 14
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: ST_TO_ADDR
12850: GO 13393
12852: LD_INT 30
12854: DOUBLE
12855: EQUAL
12856: IFTRUE 12860
12858: GO 12886
12860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12861: LD_ADDR_VAR 0 3
12865: PUSH
12866: LD_INT 11
12868: PUSH
12869: LD_INT 12
12871: PUSH
12872: LD_INT 13
12874: PUSH
12875: LD_INT 14
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 13393
12886: LD_INT 25
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12912
12894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_INT 13
12902: PUSH
12903: LD_INT 14
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: ST_TO_ADDR
12910: GO 13393
12912: LD_INT 27
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 12938
12920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: LD_INT 13
12928: PUSH
12929: LD_INT 14
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
12936: GO 13393
12938: LD_INT 92
12940: DOUBLE
12941: EQUAL
12942: IFTRUE 12946
12944: GO 12972
12946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12947: LD_ADDR_VAR 0 3
12951: PUSH
12952: LD_INT 11
12954: PUSH
12955: LD_INT 12
12957: PUSH
12958: LD_INT 13
12960: PUSH
12961: LD_INT 14
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: ST_TO_ADDR
12970: GO 13393
12972: LD_INT 28
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 12998
12980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12981: LD_ADDR_VAR 0 3
12985: PUSH
12986: LD_INT 13
12988: PUSH
12989: LD_INT 14
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: ST_TO_ADDR
12996: GO 13393
12998: LD_INT 29
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13024
13006: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: LD_INT 13
13014: PUSH
13015: LD_INT 14
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: ST_TO_ADDR
13022: GO 13393
13024: LD_INT 31
13026: DOUBLE
13027: EQUAL
13028: IFTRUE 13032
13030: GO 13050
13032: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_INT 13
13040: PUSH
13041: LD_INT 14
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: ST_TO_ADDR
13048: GO 13393
13050: LD_INT 26
13052: DOUBLE
13053: EQUAL
13054: IFTRUE 13058
13056: GO 13076
13058: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13059: LD_ADDR_VAR 0 3
13063: PUSH
13064: LD_INT 13
13066: PUSH
13067: LD_INT 14
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: ST_TO_ADDR
13074: GO 13393
13076: LD_INT 42
13078: DOUBLE
13079: EQUAL
13080: IFTRUE 13084
13082: GO 13110
13084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13085: LD_ADDR_VAR 0 3
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 22
13095: PUSH
13096: LD_INT 23
13098: PUSH
13099: LD_INT 24
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 13393
13110: LD_INT 43
13112: DOUBLE
13113: EQUAL
13114: IFTRUE 13118
13116: GO 13144
13118: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: LD_INT 21
13126: PUSH
13127: LD_INT 22
13129: PUSH
13130: LD_INT 23
13132: PUSH
13133: LD_INT 24
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: ST_TO_ADDR
13142: GO 13393
13144: LD_INT 44
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13178
13152: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13153: LD_ADDR_VAR 0 3
13157: PUSH
13158: LD_INT 21
13160: PUSH
13161: LD_INT 22
13163: PUSH
13164: LD_INT 23
13166: PUSH
13167: LD_INT 24
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: ST_TO_ADDR
13176: GO 13393
13178: LD_INT 45
13180: DOUBLE
13181: EQUAL
13182: IFTRUE 13186
13184: GO 13212
13186: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13187: LD_ADDR_VAR 0 3
13191: PUSH
13192: LD_INT 21
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_INT 23
13200: PUSH
13201: LD_INT 24
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
13210: GO 13393
13212: LD_INT 49
13214: DOUBLE
13215: EQUAL
13216: IFTRUE 13220
13218: GO 13246
13220: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13221: LD_ADDR_VAR 0 3
13225: PUSH
13226: LD_INT 21
13228: PUSH
13229: LD_INT 22
13231: PUSH
13232: LD_INT 23
13234: PUSH
13235: LD_INT 24
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: ST_TO_ADDR
13244: GO 13393
13246: LD_INT 51
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13280
13254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 21
13262: PUSH
13263: LD_INT 22
13265: PUSH
13266: LD_INT 23
13268: PUSH
13269: LD_INT 24
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: ST_TO_ADDR
13278: GO 13393
13280: LD_INT 52
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13314
13288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_INT 21
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_INT 23
13302: PUSH
13303: LD_INT 24
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: ST_TO_ADDR
13312: GO 13393
13314: LD_INT 53
13316: DOUBLE
13317: EQUAL
13318: IFTRUE 13322
13320: GO 13340
13322: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13323: LD_ADDR_VAR 0 3
13327: PUSH
13328: LD_INT 23
13330: PUSH
13331: LD_INT 24
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 13393
13340: LD_INT 46
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13366
13348: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13349: LD_ADDR_VAR 0 3
13353: PUSH
13354: LD_INT 23
13356: PUSH
13357: LD_INT 24
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: ST_TO_ADDR
13364: GO 13393
13366: LD_INT 47
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13392
13374: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13375: LD_ADDR_VAR 0 3
13379: PUSH
13380: LD_INT 23
13382: PUSH
13383: LD_INT 24
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: ST_TO_ADDR
13390: GO 13393
13392: POP
// result := ( chassis in result ) ;
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: LD_VAR 0 3
13407: IN
13408: ST_TO_ADDR
// end ;
13409: LD_VAR 0 3
13413: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
13418: PPUSH
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
// result := array ;
13423: LD_ADDR_VAR 0 5
13427: PUSH
13428: LD_VAR 0 1
13432: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13433: LD_VAR 0 1
13437: NOT
13438: PUSH
13439: LD_VAR 0 2
13443: NOT
13444: OR
13445: PUSH
13446: LD_VAR 0 3
13450: NOT
13451: OR
13452: PUSH
13453: LD_VAR 0 2
13457: PUSH
13458: LD_VAR 0 1
13462: GREATER
13463: OR
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_VAR 0 1
13474: GREATER
13475: OR
13476: IFFALSE 13480
// exit ;
13478: GO 13776
// if direction then
13480: LD_VAR 0 4
13484: IFFALSE 13548
// begin d := 1 ;
13486: LD_ADDR_VAR 0 9
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// if i_from > i_to then
13494: LD_VAR 0 2
13498: PUSH
13499: LD_VAR 0 3
13503: GREATER
13504: IFFALSE 13530
// length := ( array - i_from ) + i_to else
13506: LD_ADDR_VAR 0 11
13510: PUSH
13511: LD_VAR 0 1
13515: PUSH
13516: LD_VAR 0 2
13520: MINUS
13521: PUSH
13522: LD_VAR 0 3
13526: PLUS
13527: ST_TO_ADDR
13528: GO 13546
// length := i_to - i_from ;
13530: LD_ADDR_VAR 0 11
13534: PUSH
13535: LD_VAR 0 3
13539: PUSH
13540: LD_VAR 0 2
13544: MINUS
13545: ST_TO_ADDR
// end else
13546: GO 13609
// begin d := - 1 ;
13548: LD_ADDR_VAR 0 9
13552: PUSH
13553: LD_INT 1
13555: NEG
13556: ST_TO_ADDR
// if i_from > i_to then
13557: LD_VAR 0 2
13561: PUSH
13562: LD_VAR 0 3
13566: GREATER
13567: IFFALSE 13587
// length := i_from - i_to else
13569: LD_ADDR_VAR 0 11
13573: PUSH
13574: LD_VAR 0 2
13578: PUSH
13579: LD_VAR 0 3
13583: MINUS
13584: ST_TO_ADDR
13585: GO 13609
// length := ( array - i_to ) + i_from ;
13587: LD_ADDR_VAR 0 11
13591: PUSH
13592: LD_VAR 0 1
13596: PUSH
13597: LD_VAR 0 3
13601: MINUS
13602: PUSH
13603: LD_VAR 0 2
13607: PLUS
13608: ST_TO_ADDR
// end ; if not length then
13609: LD_VAR 0 11
13613: NOT
13614: IFFALSE 13618
// exit ;
13616: GO 13776
// tmp := array ;
13618: LD_ADDR_VAR 0 10
13622: PUSH
13623: LD_VAR 0 1
13627: ST_TO_ADDR
// for i = 1 to length do
13628: LD_ADDR_VAR 0 6
13632: PUSH
13633: DOUBLE
13634: LD_INT 1
13636: DEC
13637: ST_TO_ADDR
13638: LD_VAR 0 11
13642: PUSH
13643: FOR_TO
13644: IFFALSE 13764
// begin for j = 1 to array do
13646: LD_ADDR_VAR 0 7
13650: PUSH
13651: DOUBLE
13652: LD_INT 1
13654: DEC
13655: ST_TO_ADDR
13656: LD_VAR 0 1
13660: PUSH
13661: FOR_TO
13662: IFFALSE 13750
// begin k := j + d ;
13664: LD_ADDR_VAR 0 8
13668: PUSH
13669: LD_VAR 0 7
13673: PUSH
13674: LD_VAR 0 9
13678: PLUS
13679: ST_TO_ADDR
// if k > array then
13680: LD_VAR 0 8
13684: PUSH
13685: LD_VAR 0 1
13689: GREATER
13690: IFFALSE 13700
// k := 1 ;
13692: LD_ADDR_VAR 0 8
13696: PUSH
13697: LD_INT 1
13699: ST_TO_ADDR
// if not k then
13700: LD_VAR 0 8
13704: NOT
13705: IFFALSE 13717
// k := array ;
13707: LD_ADDR_VAR 0 8
13711: PUSH
13712: LD_VAR 0 1
13716: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13717: LD_ADDR_VAR 0 10
13721: PUSH
13722: LD_VAR 0 10
13726: PPUSH
13727: LD_VAR 0 8
13731: PPUSH
13732: LD_VAR 0 1
13736: PUSH
13737: LD_VAR 0 7
13741: ARRAY
13742: PPUSH
13743: CALL_OW 1
13747: ST_TO_ADDR
// end ;
13748: GO 13661
13750: POP
13751: POP
// array := tmp ;
13752: LD_ADDR_VAR 0 1
13756: PUSH
13757: LD_VAR 0 10
13761: ST_TO_ADDR
// end ;
13762: GO 13643
13764: POP
13765: POP
// result := array ;
13766: LD_ADDR_VAR 0 5
13770: PUSH
13771: LD_VAR 0 1
13775: ST_TO_ADDR
// end ;
13776: LD_VAR 0 5
13780: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
// result := 0 ;
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// if not array or not value in array then
13793: LD_VAR 0 1
13797: NOT
13798: PUSH
13799: LD_VAR 0 2
13803: PUSH
13804: LD_VAR 0 1
13808: IN
13809: NOT
13810: OR
13811: IFFALSE 13815
// exit ;
13813: GO 13869
// for i = 1 to array do
13815: LD_ADDR_VAR 0 4
13819: PUSH
13820: DOUBLE
13821: LD_INT 1
13823: DEC
13824: ST_TO_ADDR
13825: LD_VAR 0 1
13829: PUSH
13830: FOR_TO
13831: IFFALSE 13867
// if value = array [ i ] then
13833: LD_VAR 0 2
13837: PUSH
13838: LD_VAR 0 1
13842: PUSH
13843: LD_VAR 0 4
13847: ARRAY
13848: EQUAL
13849: IFFALSE 13865
// begin result := i ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: LD_VAR 0 4
13860: ST_TO_ADDR
// exit ;
13861: POP
13862: POP
13863: GO 13869
// end ;
13865: GO 13830
13867: POP
13868: POP
// end ;
13869: LD_VAR 0 3
13873: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13874: LD_INT 0
13876: PPUSH
// vc_chassis := chassis ;
13877: LD_ADDR_OWVAR 37
13881: PUSH
13882: LD_VAR 0 1
13886: ST_TO_ADDR
// vc_engine := engine ;
13887: LD_ADDR_OWVAR 39
13891: PUSH
13892: LD_VAR 0 2
13896: ST_TO_ADDR
// vc_control := control ;
13897: LD_ADDR_OWVAR 38
13901: PUSH
13902: LD_VAR 0 3
13906: ST_TO_ADDR
// vc_weapon := weapon ;
13907: LD_ADDR_OWVAR 40
13911: PUSH
13912: LD_VAR 0 4
13916: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13917: LD_ADDR_OWVAR 41
13921: PUSH
13922: LD_VAR 0 5
13926: ST_TO_ADDR
// end ;
13927: LD_VAR 0 6
13931: RET
// export function WantPlant ( unit ) ; var task ; begin
13932: LD_INT 0
13934: PPUSH
13935: PPUSH
// result := false ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_INT 0
13943: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13944: LD_ADDR_VAR 0 3
13948: PUSH
13949: LD_VAR 0 1
13953: PPUSH
13954: CALL_OW 437
13958: ST_TO_ADDR
// if task then
13959: LD_VAR 0 3
13963: IFFALSE 13991
// if task [ 1 ] [ 1 ] = p then
13965: LD_VAR 0 3
13969: PUSH
13970: LD_INT 1
13972: ARRAY
13973: PUSH
13974: LD_INT 1
13976: ARRAY
13977: PUSH
13978: LD_STRING p
13980: EQUAL
13981: IFFALSE 13991
// result := true ;
13983: LD_ADDR_VAR 0 2
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// end ;
13991: LD_VAR 0 2
13995: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13996: LD_INT 0
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
// if pos < 1 then
14002: LD_VAR 0 2
14006: PUSH
14007: LD_INT 1
14009: LESS
14010: IFFALSE 14014
// exit ;
14012: GO 14317
// if pos = 1 then
14014: LD_VAR 0 2
14018: PUSH
14019: LD_INT 1
14021: EQUAL
14022: IFFALSE 14055
// result := Replace ( arr , pos [ 1 ] , value ) else
14024: LD_ADDR_VAR 0 4
14028: PUSH
14029: LD_VAR 0 1
14033: PPUSH
14034: LD_VAR 0 2
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: PPUSH
14043: LD_VAR 0 3
14047: PPUSH
14048: CALL_OW 1
14052: ST_TO_ADDR
14053: GO 14317
// begin tmp := arr ;
14055: LD_ADDR_VAR 0 6
14059: PUSH
14060: LD_VAR 0 1
14064: ST_TO_ADDR
// s_arr := [ tmp ] ;
14065: LD_ADDR_VAR 0 7
14069: PUSH
14070: LD_VAR 0 6
14074: PUSH
14075: EMPTY
14076: LIST
14077: ST_TO_ADDR
// for i = 1 to pos - 1 do
14078: LD_ADDR_VAR 0 5
14082: PUSH
14083: DOUBLE
14084: LD_INT 1
14086: DEC
14087: ST_TO_ADDR
14088: LD_VAR 0 2
14092: PUSH
14093: LD_INT 1
14095: MINUS
14096: PUSH
14097: FOR_TO
14098: IFFALSE 14143
// begin tmp := tmp [ pos [ i ] ] ;
14100: LD_ADDR_VAR 0 6
14104: PUSH
14105: LD_VAR 0 6
14109: PUSH
14110: LD_VAR 0 2
14114: PUSH
14115: LD_VAR 0 5
14119: ARRAY
14120: ARRAY
14121: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14122: LD_ADDR_VAR 0 7
14126: PUSH
14127: LD_VAR 0 7
14131: PUSH
14132: LD_VAR 0 6
14136: PUSH
14137: EMPTY
14138: LIST
14139: ADD
14140: ST_TO_ADDR
// end ;
14141: GO 14097
14143: POP
14144: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14145: LD_ADDR_VAR 0 6
14149: PUSH
14150: LD_VAR 0 6
14154: PPUSH
14155: LD_VAR 0 2
14159: PUSH
14160: LD_VAR 0 2
14164: ARRAY
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: CALL_OW 1
14175: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: LD_VAR 0 7
14185: PPUSH
14186: LD_VAR 0 7
14190: PPUSH
14191: LD_VAR 0 6
14195: PPUSH
14196: CALL_OW 1
14200: ST_TO_ADDR
// for i = s_arr downto 2 do
14201: LD_ADDR_VAR 0 5
14205: PUSH
14206: DOUBLE
14207: LD_VAR 0 7
14211: INC
14212: ST_TO_ADDR
14213: LD_INT 2
14215: PUSH
14216: FOR_DOWNTO
14217: IFFALSE 14301
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14219: LD_ADDR_VAR 0 6
14223: PUSH
14224: LD_VAR 0 7
14228: PUSH
14229: LD_VAR 0 5
14233: PUSH
14234: LD_INT 1
14236: MINUS
14237: ARRAY
14238: PPUSH
14239: LD_VAR 0 2
14243: PUSH
14244: LD_VAR 0 5
14248: PUSH
14249: LD_INT 1
14251: MINUS
14252: ARRAY
14253: PPUSH
14254: LD_VAR 0 7
14258: PUSH
14259: LD_VAR 0 5
14263: ARRAY
14264: PPUSH
14265: CALL_OW 1
14269: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14270: LD_ADDR_VAR 0 7
14274: PUSH
14275: LD_VAR 0 7
14279: PPUSH
14280: LD_VAR 0 5
14284: PUSH
14285: LD_INT 1
14287: MINUS
14288: PPUSH
14289: LD_VAR 0 6
14293: PPUSH
14294: CALL_OW 1
14298: ST_TO_ADDR
// end ;
14299: GO 14216
14301: POP
14302: POP
// result := s_arr [ 1 ] ;
14303: LD_ADDR_VAR 0 4
14307: PUSH
14308: LD_VAR 0 7
14312: PUSH
14313: LD_INT 1
14315: ARRAY
14316: ST_TO_ADDR
// end ; end ;
14317: LD_VAR 0 4
14321: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
// if not list then
14326: LD_VAR 0 1
14330: NOT
14331: IFFALSE 14335
// exit ;
14333: GO 14426
// i := list [ pos1 ] ;
14335: LD_ADDR_VAR 0 5
14339: PUSH
14340: LD_VAR 0 1
14344: PUSH
14345: LD_VAR 0 2
14349: ARRAY
14350: ST_TO_ADDR
// if not i then
14351: LD_VAR 0 5
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 14426
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14360: LD_ADDR_VAR 0 1
14364: PUSH
14365: LD_VAR 0 1
14369: PPUSH
14370: LD_VAR 0 2
14374: PPUSH
14375: LD_VAR 0 1
14379: PUSH
14380: LD_VAR 0 3
14384: ARRAY
14385: PPUSH
14386: CALL_OW 1
14390: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14391: LD_ADDR_VAR 0 1
14395: PUSH
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_VAR 0 5
14410: PPUSH
14411: CALL_OW 1
14415: ST_TO_ADDR
// result := list ;
14416: LD_ADDR_VAR 0 4
14420: PUSH
14421: LD_VAR 0 1
14425: ST_TO_ADDR
// end ;
14426: LD_VAR 0 4
14430: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14431: LD_INT 0
14433: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14434: LD_ADDR_VAR 0 5
14438: PUSH
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 250
14448: PPUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 251
14458: PPUSH
14459: LD_VAR 0 2
14463: PPUSH
14464: LD_VAR 0 3
14468: PPUSH
14469: LD_VAR 0 4
14473: PPUSH
14474: CALL 14484 0 5
14478: ST_TO_ADDR
// end ;
14479: LD_VAR 0 5
14483: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14484: LD_INT 0
14486: PPUSH
14487: PPUSH
14488: PPUSH
14489: PPUSH
// if not list then
14490: LD_VAR 0 3
14494: NOT
14495: IFFALSE 14499
// exit ;
14497: GO 14887
// result := [ ] ;
14499: LD_ADDR_VAR 0 6
14503: PUSH
14504: EMPTY
14505: ST_TO_ADDR
// for i in list do
14506: LD_ADDR_VAR 0 7
14510: PUSH
14511: LD_VAR 0 3
14515: PUSH
14516: FOR_IN
14517: IFFALSE 14719
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14519: LD_ADDR_VAR 0 9
14523: PUSH
14524: LD_VAR 0 7
14528: PPUSH
14529: LD_VAR 0 1
14533: PPUSH
14534: LD_VAR 0 2
14538: PPUSH
14539: CALL_OW 297
14543: ST_TO_ADDR
// if not result then
14544: LD_VAR 0 6
14548: NOT
14549: IFFALSE 14575
// result := [ [ i , tmp ] ] else
14551: LD_ADDR_VAR 0 6
14555: PUSH
14556: LD_VAR 0 7
14560: PUSH
14561: LD_VAR 0 9
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: ST_TO_ADDR
14573: GO 14717
// begin if result [ result ] [ 2 ] < tmp then
14575: LD_VAR 0 6
14579: PUSH
14580: LD_VAR 0 6
14584: ARRAY
14585: PUSH
14586: LD_INT 2
14588: ARRAY
14589: PUSH
14590: LD_VAR 0 9
14594: LESS
14595: IFFALSE 14637
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14597: LD_ADDR_VAR 0 6
14601: PUSH
14602: LD_VAR 0 6
14606: PPUSH
14607: LD_VAR 0 6
14611: PUSH
14612: LD_INT 1
14614: PLUS
14615: PPUSH
14616: LD_VAR 0 7
14620: PUSH
14621: LD_VAR 0 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 2
14634: ST_TO_ADDR
14635: GO 14717
// for j = 1 to result do
14637: LD_ADDR_VAR 0 8
14641: PUSH
14642: DOUBLE
14643: LD_INT 1
14645: DEC
14646: ST_TO_ADDR
14647: LD_VAR 0 6
14651: PUSH
14652: FOR_TO
14653: IFFALSE 14715
// begin if tmp < result [ j ] [ 2 ] then
14655: LD_VAR 0 9
14659: PUSH
14660: LD_VAR 0 6
14664: PUSH
14665: LD_VAR 0 8
14669: ARRAY
14670: PUSH
14671: LD_INT 2
14673: ARRAY
14674: LESS
14675: IFFALSE 14713
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14677: LD_ADDR_VAR 0 6
14681: PUSH
14682: LD_VAR 0 6
14686: PPUSH
14687: LD_VAR 0 8
14691: PPUSH
14692: LD_VAR 0 7
14696: PUSH
14697: LD_VAR 0 9
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PPUSH
14706: CALL_OW 2
14710: ST_TO_ADDR
// break ;
14711: GO 14715
// end ; end ;
14713: GO 14652
14715: POP
14716: POP
// end ; end ;
14717: GO 14516
14719: POP
14720: POP
// if result and not asc then
14721: LD_VAR 0 6
14725: PUSH
14726: LD_VAR 0 4
14730: NOT
14731: AND
14732: IFFALSE 14807
// begin tmp := result ;
14734: LD_ADDR_VAR 0 9
14738: PUSH
14739: LD_VAR 0 6
14743: ST_TO_ADDR
// for i = tmp downto 1 do
14744: LD_ADDR_VAR 0 7
14748: PUSH
14749: DOUBLE
14750: LD_VAR 0 9
14754: INC
14755: ST_TO_ADDR
14756: LD_INT 1
14758: PUSH
14759: FOR_DOWNTO
14760: IFFALSE 14805
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14762: LD_ADDR_VAR 0 6
14766: PUSH
14767: LD_VAR 0 6
14771: PPUSH
14772: LD_VAR 0 9
14776: PUSH
14777: LD_VAR 0 7
14781: MINUS
14782: PUSH
14783: LD_INT 1
14785: PLUS
14786: PPUSH
14787: LD_VAR 0 9
14791: PUSH
14792: LD_VAR 0 7
14796: ARRAY
14797: PPUSH
14798: CALL_OW 1
14802: ST_TO_ADDR
14803: GO 14759
14805: POP
14806: POP
// end ; tmp := [ ] ;
14807: LD_ADDR_VAR 0 9
14811: PUSH
14812: EMPTY
14813: ST_TO_ADDR
// if mode then
14814: LD_VAR 0 5
14818: IFFALSE 14887
// begin for i = 1 to result do
14820: LD_ADDR_VAR 0 7
14824: PUSH
14825: DOUBLE
14826: LD_INT 1
14828: DEC
14829: ST_TO_ADDR
14830: LD_VAR 0 6
14834: PUSH
14835: FOR_TO
14836: IFFALSE 14875
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14838: LD_ADDR_VAR 0 9
14842: PUSH
14843: LD_VAR 0 9
14847: PPUSH
14848: LD_VAR 0 7
14852: PPUSH
14853: LD_VAR 0 6
14857: PUSH
14858: LD_VAR 0 7
14862: ARRAY
14863: PUSH
14864: LD_INT 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 1
14872: ST_TO_ADDR
14873: GO 14835
14875: POP
14876: POP
// result := tmp ;
14877: LD_ADDR_VAR 0 6
14881: PUSH
14882: LD_VAR 0 9
14886: ST_TO_ADDR
// end ; end ;
14887: LD_VAR 0 6
14891: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14892: LD_INT 0
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
14898: PPUSH
14899: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14900: LD_ADDR_VAR 0 5
14904: PUSH
14905: LD_INT 0
14907: PUSH
14908: LD_INT 0
14910: PUSH
14911: LD_INT 0
14913: PUSH
14914: EMPTY
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: ST_TO_ADDR
// if not x or not y then
14922: LD_VAR 0 2
14926: NOT
14927: PUSH
14928: LD_VAR 0 3
14932: NOT
14933: OR
14934: IFFALSE 14938
// exit ;
14936: GO 16588
// if not range then
14938: LD_VAR 0 4
14942: NOT
14943: IFFALSE 14953
// range := 10 ;
14945: LD_ADDR_VAR 0 4
14949: PUSH
14950: LD_INT 10
14952: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14953: LD_ADDR_VAR 0 8
14957: PUSH
14958: LD_INT 81
14960: PUSH
14961: LD_VAR 0 1
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 92
14972: PUSH
14973: LD_VAR 0 2
14977: PUSH
14978: LD_VAR 0 3
14982: PUSH
14983: LD_VAR 0 4
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 3
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: ST_TO_ADDR
// if not tmp then
15021: LD_VAR 0 8
15025: NOT
15026: IFFALSE 15030
// exit ;
15028: GO 16588
// for i in tmp do
15030: LD_ADDR_VAR 0 6
15034: PUSH
15035: LD_VAR 0 8
15039: PUSH
15040: FOR_IN
15041: IFFALSE 16563
// begin points := [ 0 , 0 , 0 ] ;
15043: LD_ADDR_VAR 0 9
15047: PUSH
15048: LD_INT 0
15050: PUSH
15051: LD_INT 0
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: LIST
15061: ST_TO_ADDR
// bpoints := 1 ;
15062: LD_ADDR_VAR 0 10
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15070: LD_VAR 0 6
15074: PPUSH
15075: CALL_OW 247
15079: PUSH
15080: LD_INT 1
15082: DOUBLE
15083: EQUAL
15084: IFTRUE 15088
15086: GO 15666
15088: POP
// begin if GetClass ( i ) = 1 then
15089: LD_VAR 0 6
15093: PPUSH
15094: CALL_OW 257
15098: PUSH
15099: LD_INT 1
15101: EQUAL
15102: IFFALSE 15123
// points := [ 10 , 5 , 3 ] ;
15104: LD_ADDR_VAR 0 9
15108: PUSH
15109: LD_INT 10
15111: PUSH
15112: LD_INT 5
15114: PUSH
15115: LD_INT 3
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15123: LD_VAR 0 6
15127: PPUSH
15128: CALL_OW 257
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: LD_INT 3
15138: PUSH
15139: LD_INT 4
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: LIST
15146: IN
15147: IFFALSE 15168
// points := [ 3 , 2 , 1 ] ;
15149: LD_ADDR_VAR 0 9
15153: PUSH
15154: LD_INT 3
15156: PUSH
15157: LD_INT 2
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15168: LD_VAR 0 6
15172: PPUSH
15173: CALL_OW 257
15177: PUSH
15178: LD_INT 5
15180: EQUAL
15181: IFFALSE 15202
// points := [ 130 , 5 , 2 ] ;
15183: LD_ADDR_VAR 0 9
15187: PUSH
15188: LD_INT 130
15190: PUSH
15191: LD_INT 5
15193: PUSH
15194: LD_INT 2
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15202: LD_VAR 0 6
15206: PPUSH
15207: CALL_OW 257
15211: PUSH
15212: LD_INT 8
15214: EQUAL
15215: IFFALSE 15236
// points := [ 35 , 35 , 30 ] ;
15217: LD_ADDR_VAR 0 9
15221: PUSH
15222: LD_INT 35
15224: PUSH
15225: LD_INT 35
15227: PUSH
15228: LD_INT 30
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: LIST
15235: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15236: LD_VAR 0 6
15240: PPUSH
15241: CALL_OW 257
15245: PUSH
15246: LD_INT 9
15248: EQUAL
15249: IFFALSE 15270
// points := [ 20 , 55 , 40 ] ;
15251: LD_ADDR_VAR 0 9
15255: PUSH
15256: LD_INT 20
15258: PUSH
15259: LD_INT 55
15261: PUSH
15262: LD_INT 40
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15270: LD_VAR 0 6
15274: PPUSH
15275: CALL_OW 257
15279: PUSH
15280: LD_INT 12
15282: PUSH
15283: LD_INT 16
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: IN
15290: IFFALSE 15311
// points := [ 5 , 3 , 2 ] ;
15292: LD_ADDR_VAR 0 9
15296: PUSH
15297: LD_INT 5
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: LD_INT 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: LIST
15310: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15311: LD_VAR 0 6
15315: PPUSH
15316: CALL_OW 257
15320: PUSH
15321: LD_INT 17
15323: EQUAL
15324: IFFALSE 15345
// points := [ 100 , 50 , 75 ] ;
15326: LD_ADDR_VAR 0 9
15330: PUSH
15331: LD_INT 100
15333: PUSH
15334: LD_INT 50
15336: PUSH
15337: LD_INT 75
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15345: LD_VAR 0 6
15349: PPUSH
15350: CALL_OW 257
15354: PUSH
15355: LD_INT 15
15357: EQUAL
15358: IFFALSE 15379
// points := [ 10 , 5 , 3 ] ;
15360: LD_ADDR_VAR 0 9
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 5
15370: PUSH
15371: LD_INT 3
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15379: LD_VAR 0 6
15383: PPUSH
15384: CALL_OW 257
15388: PUSH
15389: LD_INT 14
15391: EQUAL
15392: IFFALSE 15413
// points := [ 10 , 0 , 0 ] ;
15394: LD_ADDR_VAR 0 9
15398: PUSH
15399: LD_INT 10
15401: PUSH
15402: LD_INT 0
15404: PUSH
15405: LD_INT 0
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15413: LD_VAR 0 6
15417: PPUSH
15418: CALL_OW 257
15422: PUSH
15423: LD_INT 11
15425: EQUAL
15426: IFFALSE 15447
// points := [ 30 , 10 , 5 ] ;
15428: LD_ADDR_VAR 0 9
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 10
15438: PUSH
15439: LD_INT 5
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15447: LD_VAR 0 1
15451: PPUSH
15452: LD_INT 5
15454: PPUSH
15455: CALL_OW 321
15459: PUSH
15460: LD_INT 2
15462: EQUAL
15463: IFFALSE 15480
// bpoints := bpoints * 1.8 ;
15465: LD_ADDR_VAR 0 10
15469: PUSH
15470: LD_VAR 0 10
15474: PUSH
15475: LD_REAL  1.80000000000000E+0000
15478: MUL
15479: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15480: LD_VAR 0 6
15484: PPUSH
15485: CALL_OW 257
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: LD_INT 2
15495: PUSH
15496: LD_INT 3
15498: PUSH
15499: LD_INT 4
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: IN
15508: PUSH
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_INT 51
15516: PPUSH
15517: CALL_OW 321
15521: PUSH
15522: LD_INT 2
15524: EQUAL
15525: AND
15526: IFFALSE 15543
// bpoints := bpoints * 1.2 ;
15528: LD_ADDR_VAR 0 10
15532: PUSH
15533: LD_VAR 0 10
15537: PUSH
15538: LD_REAL  1.20000000000000E+0000
15541: MUL
15542: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15543: LD_VAR 0 6
15547: PPUSH
15548: CALL_OW 257
15552: PUSH
15553: LD_INT 5
15555: PUSH
15556: LD_INT 7
15558: PUSH
15559: LD_INT 9
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: IN
15567: PUSH
15568: LD_VAR 0 1
15572: PPUSH
15573: LD_INT 52
15575: PPUSH
15576: CALL_OW 321
15580: PUSH
15581: LD_INT 2
15583: EQUAL
15584: AND
15585: IFFALSE 15602
// bpoints := bpoints * 1.5 ;
15587: LD_ADDR_VAR 0 10
15591: PUSH
15592: LD_VAR 0 10
15596: PUSH
15597: LD_REAL  1.50000000000000E+0000
15600: MUL
15601: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15602: LD_VAR 0 1
15606: PPUSH
15607: LD_INT 66
15609: PPUSH
15610: CALL_OW 321
15614: PUSH
15615: LD_INT 2
15617: EQUAL
15618: IFFALSE 15635
// bpoints := bpoints * 1.1 ;
15620: LD_ADDR_VAR 0 10
15624: PUSH
15625: LD_VAR 0 10
15629: PUSH
15630: LD_REAL  1.10000000000000E+0000
15633: MUL
15634: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15635: LD_ADDR_VAR 0 10
15639: PUSH
15640: LD_VAR 0 10
15644: PUSH
15645: LD_VAR 0 6
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 259
15657: PUSH
15658: LD_REAL  1.15000000000000E+0000
15661: MUL
15662: MUL
15663: ST_TO_ADDR
// end ; unit_vehicle :
15664: GO 16492
15666: LD_INT 2
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 16480
15674: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15675: LD_VAR 0 6
15679: PPUSH
15680: CALL_OW 264
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 42
15690: PUSH
15691: LD_INT 24
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: IN
15699: IFFALSE 15720
// points := [ 25 , 5 , 3 ] ;
15701: LD_ADDR_VAR 0 9
15705: PUSH
15706: LD_INT 25
15708: PUSH
15709: LD_INT 5
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: LIST
15719: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15720: LD_VAR 0 6
15724: PPUSH
15725: CALL_OW 264
15729: PUSH
15730: LD_INT 4
15732: PUSH
15733: LD_INT 43
15735: PUSH
15736: LD_INT 25
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: IN
15744: IFFALSE 15765
// points := [ 40 , 15 , 5 ] ;
15746: LD_ADDR_VAR 0 9
15750: PUSH
15751: LD_INT 40
15753: PUSH
15754: LD_INT 15
15756: PUSH
15757: LD_INT 5
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15765: LD_VAR 0 6
15769: PPUSH
15770: CALL_OW 264
15774: PUSH
15775: LD_INT 3
15777: PUSH
15778: LD_INT 23
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: IN
15785: IFFALSE 15806
// points := [ 7 , 25 , 8 ] ;
15787: LD_ADDR_VAR 0 9
15791: PUSH
15792: LD_INT 7
15794: PUSH
15795: LD_INT 25
15797: PUSH
15798: LD_INT 8
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15806: LD_VAR 0 6
15810: PPUSH
15811: CALL_OW 264
15815: PUSH
15816: LD_INT 5
15818: PUSH
15819: LD_INT 27
15821: PUSH
15822: LD_INT 44
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: IN
15830: IFFALSE 15851
// points := [ 14 , 50 , 16 ] ;
15832: LD_ADDR_VAR 0 9
15836: PUSH
15837: LD_INT 14
15839: PUSH
15840: LD_INT 50
15842: PUSH
15843: LD_INT 16
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15851: LD_VAR 0 6
15855: PPUSH
15856: CALL_OW 264
15860: PUSH
15861: LD_INT 6
15863: PUSH
15864: LD_INT 46
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: IN
15871: IFFALSE 15892
// points := [ 32 , 120 , 70 ] ;
15873: LD_ADDR_VAR 0 9
15877: PUSH
15878: LD_INT 32
15880: PUSH
15881: LD_INT 120
15883: PUSH
15884: LD_INT 70
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15892: LD_VAR 0 6
15896: PPUSH
15897: CALL_OW 264
15901: PUSH
15902: LD_INT 7
15904: PUSH
15905: LD_INT 28
15907: PUSH
15908: LD_INT 45
15910: PUSH
15911: LD_INT 92
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: IN
15920: IFFALSE 15941
// points := [ 35 , 20 , 45 ] ;
15922: LD_ADDR_VAR 0 9
15926: PUSH
15927: LD_INT 35
15929: PUSH
15930: LD_INT 20
15932: PUSH
15933: LD_INT 45
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15941: LD_VAR 0 6
15945: PPUSH
15946: CALL_OW 264
15950: PUSH
15951: LD_INT 47
15953: PUSH
15954: EMPTY
15955: LIST
15956: IN
15957: IFFALSE 15978
// points := [ 67 , 45 , 75 ] ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_INT 67
15966: PUSH
15967: LD_INT 45
15969: PUSH
15970: LD_INT 75
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15978: LD_VAR 0 6
15982: PPUSH
15983: CALL_OW 264
15987: PUSH
15988: LD_INT 26
15990: PUSH
15991: EMPTY
15992: LIST
15993: IN
15994: IFFALSE 16015
// points := [ 120 , 30 , 80 ] ;
15996: LD_ADDR_VAR 0 9
16000: PUSH
16001: LD_INT 120
16003: PUSH
16004: LD_INT 30
16006: PUSH
16007: LD_INT 80
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16015: LD_VAR 0 6
16019: PPUSH
16020: CALL_OW 264
16024: PUSH
16025: LD_INT 22
16027: PUSH
16028: EMPTY
16029: LIST
16030: IN
16031: IFFALSE 16052
// points := [ 40 , 1 , 1 ] ;
16033: LD_ADDR_VAR 0 9
16037: PUSH
16038: LD_INT 40
16040: PUSH
16041: LD_INT 1
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16052: LD_VAR 0 6
16056: PPUSH
16057: CALL_OW 264
16061: PUSH
16062: LD_INT 29
16064: PUSH
16065: EMPTY
16066: LIST
16067: IN
16068: IFFALSE 16089
// points := [ 70 , 200 , 400 ] ;
16070: LD_ADDR_VAR 0 9
16074: PUSH
16075: LD_INT 70
16077: PUSH
16078: LD_INT 200
16080: PUSH
16081: LD_INT 400
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16089: LD_VAR 0 6
16093: PPUSH
16094: CALL_OW 264
16098: PUSH
16099: LD_INT 14
16101: PUSH
16102: LD_INT 53
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: IN
16109: IFFALSE 16130
// points := [ 40 , 10 , 20 ] ;
16111: LD_ADDR_VAR 0 9
16115: PUSH
16116: LD_INT 40
16118: PUSH
16119: LD_INT 10
16121: PUSH
16122: LD_INT 20
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16130: LD_VAR 0 6
16134: PPUSH
16135: CALL_OW 264
16139: PUSH
16140: LD_INT 9
16142: PUSH
16143: EMPTY
16144: LIST
16145: IN
16146: IFFALSE 16167
// points := [ 5 , 70 , 20 ] ;
16148: LD_ADDR_VAR 0 9
16152: PUSH
16153: LD_INT 5
16155: PUSH
16156: LD_INT 70
16158: PUSH
16159: LD_INT 20
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16167: LD_VAR 0 6
16171: PPUSH
16172: CALL_OW 264
16176: PUSH
16177: LD_INT 10
16179: PUSH
16180: EMPTY
16181: LIST
16182: IN
16183: IFFALSE 16204
// points := [ 35 , 110 , 70 ] ;
16185: LD_ADDR_VAR 0 9
16189: PUSH
16190: LD_INT 35
16192: PUSH
16193: LD_INT 110
16195: PUSH
16196: LD_INT 70
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: LIST
16203: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16204: LD_VAR 0 6
16208: PPUSH
16209: CALL_OW 265
16213: PUSH
16214: LD_INT 25
16216: EQUAL
16217: IFFALSE 16238
// points := [ 80 , 65 , 100 ] ;
16219: LD_ADDR_VAR 0 9
16223: PUSH
16224: LD_INT 80
16226: PUSH
16227: LD_INT 65
16229: PUSH
16230: LD_INT 100
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16238: LD_VAR 0 6
16242: PPUSH
16243: CALL_OW 263
16247: PUSH
16248: LD_INT 1
16250: EQUAL
16251: IFFALSE 16286
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16253: LD_ADDR_VAR 0 10
16257: PUSH
16258: LD_VAR 0 10
16262: PUSH
16263: LD_VAR 0 6
16267: PPUSH
16268: CALL_OW 311
16272: PPUSH
16273: LD_INT 3
16275: PPUSH
16276: CALL_OW 259
16280: PUSH
16281: LD_INT 4
16283: MUL
16284: MUL
16285: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16286: LD_VAR 0 6
16290: PPUSH
16291: CALL_OW 263
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: IFFALSE 16350
// begin j := IsControledBy ( i ) ;
16301: LD_ADDR_VAR 0 7
16305: PUSH
16306: LD_VAR 0 6
16310: PPUSH
16311: CALL_OW 312
16315: ST_TO_ADDR
// if j then
16316: LD_VAR 0 7
16320: IFFALSE 16350
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16322: LD_ADDR_VAR 0 10
16326: PUSH
16327: LD_VAR 0 10
16331: PUSH
16332: LD_VAR 0 7
16336: PPUSH
16337: LD_INT 3
16339: PPUSH
16340: CALL_OW 259
16344: PUSH
16345: LD_INT 3
16347: MUL
16348: MUL
16349: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16350: LD_VAR 0 6
16354: PPUSH
16355: CALL_OW 264
16359: PUSH
16360: LD_INT 5
16362: PUSH
16363: LD_INT 6
16365: PUSH
16366: LD_INT 46
16368: PUSH
16369: LD_INT 44
16371: PUSH
16372: LD_INT 47
16374: PUSH
16375: LD_INT 45
16377: PUSH
16378: LD_INT 28
16380: PUSH
16381: LD_INT 7
16383: PUSH
16384: LD_INT 27
16386: PUSH
16387: LD_INT 29
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: IN
16402: PUSH
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_INT 52
16410: PPUSH
16411: CALL_OW 321
16415: PUSH
16416: LD_INT 2
16418: EQUAL
16419: AND
16420: IFFALSE 16437
// bpoints := bpoints * 1.2 ;
16422: LD_ADDR_VAR 0 10
16426: PUSH
16427: LD_VAR 0 10
16431: PUSH
16432: LD_REAL  1.20000000000000E+0000
16435: MUL
16436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16437: LD_VAR 0 6
16441: PPUSH
16442: CALL_OW 264
16446: PUSH
16447: LD_INT 6
16449: PUSH
16450: LD_INT 46
16452: PUSH
16453: LD_INT 47
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: IN
16461: IFFALSE 16478
// bpoints := bpoints * 1.2 ;
16463: LD_ADDR_VAR 0 10
16467: PUSH
16468: LD_VAR 0 10
16472: PUSH
16473: LD_REAL  1.20000000000000E+0000
16476: MUL
16477: ST_TO_ADDR
// end ; unit_building :
16478: GO 16492
16480: LD_INT 3
16482: DOUBLE
16483: EQUAL
16484: IFTRUE 16488
16486: GO 16491
16488: POP
// ; end ;
16489: GO 16492
16491: POP
// for j = 1 to 3 do
16492: LD_ADDR_VAR 0 7
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_INT 3
16504: PUSH
16505: FOR_TO
16506: IFFALSE 16559
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16508: LD_ADDR_VAR 0 5
16512: PUSH
16513: LD_VAR 0 5
16517: PPUSH
16518: LD_VAR 0 7
16522: PPUSH
16523: LD_VAR 0 5
16527: PUSH
16528: LD_VAR 0 7
16532: ARRAY
16533: PUSH
16534: LD_VAR 0 9
16538: PUSH
16539: LD_VAR 0 7
16543: ARRAY
16544: PUSH
16545: LD_VAR 0 10
16549: MUL
16550: PLUS
16551: PPUSH
16552: CALL_OW 1
16556: ST_TO_ADDR
16557: GO 16505
16559: POP
16560: POP
// end ;
16561: GO 15040
16563: POP
16564: POP
// result := Replace ( result , 4 , tmp ) ;
16565: LD_ADDR_VAR 0 5
16569: PUSH
16570: LD_VAR 0 5
16574: PPUSH
16575: LD_INT 4
16577: PPUSH
16578: LD_VAR 0 8
16582: PPUSH
16583: CALL_OW 1
16587: ST_TO_ADDR
// end ;
16588: LD_VAR 0 5
16592: RET
// export function DangerAtRange ( unit , range ) ; begin
16593: LD_INT 0
16595: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16596: LD_ADDR_VAR 0 3
16600: PUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 255
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 250
16620: PPUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 251
16630: PPUSH
16631: LD_VAR 0 2
16635: PPUSH
16636: CALL 14892 0 4
16640: ST_TO_ADDR
// end ;
16641: LD_VAR 0 3
16645: RET
// export function DangerInArea ( side , area ) ; begin
16646: LD_INT 0
16648: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16649: LD_ADDR_VAR 0 3
16653: PUSH
16654: LD_VAR 0 2
16658: PPUSH
16659: LD_INT 81
16661: PUSH
16662: LD_VAR 0 1
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PPUSH
16671: CALL_OW 70
16675: ST_TO_ADDR
// end ;
16676: LD_VAR 0 3
16680: RET
// export function IsExtension ( b ) ; begin
16681: LD_INT 0
16683: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_VAR 0 1
16693: PUSH
16694: LD_INT 23
16696: PUSH
16697: LD_INT 20
16699: PUSH
16700: LD_INT 22
16702: PUSH
16703: LD_INT 17
16705: PUSH
16706: LD_INT 24
16708: PUSH
16709: LD_INT 21
16711: PUSH
16712: LD_INT 19
16714: PUSH
16715: LD_INT 16
16717: PUSH
16718: LD_INT 25
16720: PUSH
16721: LD_INT 18
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: IN
16736: ST_TO_ADDR
// end ;
16737: LD_VAR 0 2
16741: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16742: LD_INT 0
16744: PPUSH
16745: PPUSH
16746: PPUSH
// result := [ ] ;
16747: LD_ADDR_VAR 0 4
16751: PUSH
16752: EMPTY
16753: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16754: LD_ADDR_VAR 0 5
16758: PUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: LD_INT 21
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PPUSH
16774: CALL_OW 70
16778: ST_TO_ADDR
// if not tmp then
16779: LD_VAR 0 5
16783: NOT
16784: IFFALSE 16788
// exit ;
16786: GO 16852
// if checkLink then
16788: LD_VAR 0 3
16792: IFFALSE 16842
// begin for i in tmp do
16794: LD_ADDR_VAR 0 6
16798: PUSH
16799: LD_VAR 0 5
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16840
// if GetBase ( i ) <> base then
16807: LD_VAR 0 6
16811: PPUSH
16812: CALL_OW 274
16816: PUSH
16817: LD_VAR 0 1
16821: NONEQUAL
16822: IFFALSE 16838
// ComLinkToBase ( base , i ) ;
16824: LD_VAR 0 1
16828: PPUSH
16829: LD_VAR 0 6
16833: PPUSH
16834: CALL_OW 169
16838: GO 16804
16840: POP
16841: POP
// end ; result := tmp ;
16842: LD_ADDR_VAR 0 4
16846: PUSH
16847: LD_VAR 0 5
16851: ST_TO_ADDR
// end ;
16852: LD_VAR 0 4
16856: RET
// export function ComComplete ( units , b ) ; var i ; begin
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// if not units then
16861: LD_VAR 0 1
16865: NOT
16866: IFFALSE 16870
// exit ;
16868: GO 16960
// for i in units do
16870: LD_ADDR_VAR 0 4
16874: PUSH
16875: LD_VAR 0 1
16879: PUSH
16880: FOR_IN
16881: IFFALSE 16958
// if BuildingStatus ( b ) = bs_build then
16883: LD_VAR 0 2
16887: PPUSH
16888: CALL_OW 461
16892: PUSH
16893: LD_INT 1
16895: EQUAL
16896: IFFALSE 16956
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16898: LD_VAR 0 4
16902: PPUSH
16903: LD_STRING h
16905: PUSH
16906: LD_VAR 0 2
16910: PPUSH
16911: CALL_OW 250
16915: PUSH
16916: LD_VAR 0 2
16920: PPUSH
16921: CALL_OW 251
16925: PUSH
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: LD_INT 0
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: PPUSH
16952: CALL_OW 446
16956: GO 16880
16958: POP
16959: POP
// end ;
16960: LD_VAR 0 3
16964: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16965: LD_INT 0
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16973: LD_VAR 0 1
16977: NOT
16978: PUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 263
16988: PUSH
16989: LD_INT 2
16991: NONEQUAL
16992: OR
16993: IFFALSE 16997
// exit ;
16995: GO 17313
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16997: LD_ADDR_VAR 0 6
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 255
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: LD_INT 30
17024: PUSH
17025: LD_INT 36
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 34
17034: PUSH
17035: LD_INT 31
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 69
17055: ST_TO_ADDR
// if not tmp then
17056: LD_VAR 0 6
17060: NOT
17061: IFFALSE 17065
// exit ;
17063: GO 17313
// result := [ ] ;
17065: LD_ADDR_VAR 0 2
17069: PUSH
17070: EMPTY
17071: ST_TO_ADDR
// for i in tmp do
17072: LD_ADDR_VAR 0 3
17076: PUSH
17077: LD_VAR 0 6
17081: PUSH
17082: FOR_IN
17083: IFFALSE 17154
// begin t := UnitsInside ( i ) ;
17085: LD_ADDR_VAR 0 4
17089: PUSH
17090: LD_VAR 0 3
17094: PPUSH
17095: CALL_OW 313
17099: ST_TO_ADDR
// if t then
17100: LD_VAR 0 4
17104: IFFALSE 17152
// for j in t do
17106: LD_ADDR_VAR 0 7
17110: PUSH
17111: LD_VAR 0 4
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17150
// result := Replace ( result , result + 1 , j ) ;
17119: LD_ADDR_VAR 0 2
17123: PUSH
17124: LD_VAR 0 2
17128: PPUSH
17129: LD_VAR 0 2
17133: PUSH
17134: LD_INT 1
17136: PLUS
17137: PPUSH
17138: LD_VAR 0 7
17142: PPUSH
17143: CALL_OW 1
17147: ST_TO_ADDR
17148: GO 17116
17150: POP
17151: POP
// end ;
17152: GO 17082
17154: POP
17155: POP
// if not result then
17156: LD_VAR 0 2
17160: NOT
17161: IFFALSE 17165
// exit ;
17163: GO 17313
// mech := result [ 1 ] ;
17165: LD_ADDR_VAR 0 5
17169: PUSH
17170: LD_VAR 0 2
17174: PUSH
17175: LD_INT 1
17177: ARRAY
17178: ST_TO_ADDR
// if result > 1 then
17179: LD_VAR 0 2
17183: PUSH
17184: LD_INT 1
17186: GREATER
17187: IFFALSE 17299
// begin for i = 2 to result do
17189: LD_ADDR_VAR 0 3
17193: PUSH
17194: DOUBLE
17195: LD_INT 2
17197: DEC
17198: ST_TO_ADDR
17199: LD_VAR 0 2
17203: PUSH
17204: FOR_TO
17205: IFFALSE 17297
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_VAR 0 2
17216: PUSH
17217: LD_VAR 0 3
17221: ARRAY
17222: PPUSH
17223: LD_INT 3
17225: PPUSH
17226: CALL_OW 259
17230: PUSH
17231: LD_VAR 0 2
17235: PUSH
17236: LD_VAR 0 3
17240: ARRAY
17241: PPUSH
17242: CALL_OW 432
17246: MINUS
17247: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17248: LD_VAR 0 4
17252: PUSH
17253: LD_VAR 0 5
17257: PPUSH
17258: LD_INT 3
17260: PPUSH
17261: CALL_OW 259
17265: PUSH
17266: LD_VAR 0 5
17270: PPUSH
17271: CALL_OW 432
17275: MINUS
17276: GREATEREQUAL
17277: IFFALSE 17295
// mech := result [ i ] ;
17279: LD_ADDR_VAR 0 5
17283: PUSH
17284: LD_VAR 0 2
17288: PUSH
17289: LD_VAR 0 3
17293: ARRAY
17294: ST_TO_ADDR
// end ;
17295: GO 17204
17297: POP
17298: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17299: LD_VAR 0 1
17303: PPUSH
17304: LD_VAR 0 5
17308: PPUSH
17309: CALL_OW 135
// end ;
17313: LD_VAR 0 2
17317: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17318: LD_INT 0
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
17329: PPUSH
17330: PPUSH
17331: PPUSH
17332: PPUSH
// result := [ ] ;
17333: LD_ADDR_VAR 0 7
17337: PUSH
17338: EMPTY
17339: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 266
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: IN
17360: NOT
17361: IFFALSE 17365
// exit ;
17363: GO 18999
// if name then
17365: LD_VAR 0 3
17369: IFFALSE 17385
// SetBName ( base_dep , name ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_VAR 0 3
17380: PPUSH
17381: CALL_OW 500
// base := GetBase ( base_dep ) ;
17385: LD_ADDR_VAR 0 15
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 274
17399: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17400: LD_ADDR_VAR 0 16
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 255
17414: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17415: LD_ADDR_VAR 0 17
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 248
17429: ST_TO_ADDR
// if sources then
17430: LD_VAR 0 5
17434: IFFALSE 17481
// for i = 1 to 3 do
17436: LD_ADDR_VAR 0 8
17440: PUSH
17441: DOUBLE
17442: LD_INT 1
17444: DEC
17445: ST_TO_ADDR
17446: LD_INT 3
17448: PUSH
17449: FOR_TO
17450: IFFALSE 17479
// AddResourceType ( base , i , sources [ i ] ) ;
17452: LD_VAR 0 15
17456: PPUSH
17457: LD_VAR 0 8
17461: PPUSH
17462: LD_VAR 0 5
17466: PUSH
17467: LD_VAR 0 8
17471: ARRAY
17472: PPUSH
17473: CALL_OW 276
17477: GO 17449
17479: POP
17480: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17481: LD_ADDR_VAR 0 18
17485: PUSH
17486: LD_VAR 0 15
17490: PPUSH
17491: LD_VAR 0 2
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL 16742 0 3
17503: ST_TO_ADDR
// InitHc ;
17504: CALL_OW 19
// InitUc ;
17508: CALL_OW 18
// uc_side := side ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_VAR 0 16
17521: ST_TO_ADDR
// uc_nation := nation ;
17522: LD_ADDR_OWVAR 21
17526: PUSH
17527: LD_VAR 0 17
17531: ST_TO_ADDR
// if buildings then
17532: LD_VAR 0 18
17536: IFFALSE 18858
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17538: LD_ADDR_VAR 0 19
17542: PUSH
17543: LD_VAR 0 18
17547: PPUSH
17548: LD_INT 2
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 29
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 30
17563: PUSH
17564: LD_INT 30
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: PPUSH
17576: CALL_OW 72
17580: ST_TO_ADDR
// if tmp then
17581: LD_VAR 0 19
17585: IFFALSE 17633
// for i in tmp do
17587: LD_ADDR_VAR 0 8
17591: PUSH
17592: LD_VAR 0 19
17596: PUSH
17597: FOR_IN
17598: IFFALSE 17631
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17600: LD_VAR 0 8
17604: PPUSH
17605: CALL_OW 250
17609: PPUSH
17610: LD_VAR 0 8
17614: PPUSH
17615: CALL_OW 251
17619: PPUSH
17620: LD_VAR 0 16
17624: PPUSH
17625: CALL_OW 441
17629: GO 17597
17631: POP
17632: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17633: LD_VAR 0 18
17637: PPUSH
17638: LD_INT 2
17640: PUSH
17641: LD_INT 30
17643: PUSH
17644: LD_INT 32
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 30
17653: PUSH
17654: LD_INT 33
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 72
17670: IFFALSE 17758
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17672: LD_ADDR_VAR 0 8
17676: PUSH
17677: LD_VAR 0 18
17681: PPUSH
17682: LD_INT 2
17684: PUSH
17685: LD_INT 30
17687: PUSH
17688: LD_INT 32
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 30
17697: PUSH
17698: LD_INT 33
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: PPUSH
17710: CALL_OW 72
17714: PUSH
17715: FOR_IN
17716: IFFALSE 17756
// begin if not GetBWeapon ( i ) then
17718: LD_VAR 0 8
17722: PPUSH
17723: CALL_OW 269
17727: NOT
17728: IFFALSE 17754
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17730: LD_VAR 0 8
17734: PPUSH
17735: LD_VAR 0 8
17739: PPUSH
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL 19004 0 2
17749: PPUSH
17750: CALL_OW 431
// end ;
17754: GO 17715
17756: POP
17757: POP
// end ; for i = 1 to personel do
17758: LD_ADDR_VAR 0 8
17762: PUSH
17763: DOUBLE
17764: LD_INT 1
17766: DEC
17767: ST_TO_ADDR
17768: LD_VAR 0 6
17772: PUSH
17773: FOR_TO
17774: IFFALSE 18838
// begin if i > 4 then
17776: LD_VAR 0 8
17780: PUSH
17781: LD_INT 4
17783: GREATER
17784: IFFALSE 17788
// break ;
17786: GO 18838
// case i of 1 :
17788: LD_VAR 0 8
17792: PUSH
17793: LD_INT 1
17795: DOUBLE
17796: EQUAL
17797: IFTRUE 17801
17799: GO 17881
17801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17802: LD_ADDR_VAR 0 12
17806: PUSH
17807: LD_VAR 0 18
17811: PPUSH
17812: LD_INT 22
17814: PUSH
17815: LD_VAR 0 16
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 58
17826: PUSH
17827: EMPTY
17828: LIST
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: LD_INT 30
17835: PUSH
17836: LD_INT 32
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 30
17845: PUSH
17846: LD_INT 4
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 30
17855: PUSH
17856: LD_INT 5
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: PPUSH
17874: CALL_OW 72
17878: ST_TO_ADDR
17879: GO 18103
17881: LD_INT 2
17883: DOUBLE
17884: EQUAL
17885: IFTRUE 17889
17887: GO 17951
17889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17890: LD_ADDR_VAR 0 12
17894: PUSH
17895: LD_VAR 0 18
17899: PPUSH
17900: LD_INT 22
17902: PUSH
17903: LD_VAR 0 16
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 2
17914: PUSH
17915: LD_INT 30
17917: PUSH
17918: LD_INT 0
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 30
17927: PUSH
17928: LD_INT 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PPUSH
17944: CALL_OW 72
17948: ST_TO_ADDR
17949: GO 18103
17951: LD_INT 3
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 17959
17957: GO 18021
17959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17960: LD_ADDR_VAR 0 12
17964: PUSH
17965: LD_VAR 0 18
17969: PPUSH
17970: LD_INT 22
17972: PUSH
17973: LD_VAR 0 16
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: LD_INT 30
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 30
17997: PUSH
17998: LD_INT 3
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 72
18018: ST_TO_ADDR
18019: GO 18103
18021: LD_INT 4
18023: DOUBLE
18024: EQUAL
18025: IFTRUE 18029
18027: GO 18102
18029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18030: LD_ADDR_VAR 0 12
18034: PUSH
18035: LD_VAR 0 18
18039: PPUSH
18040: LD_INT 22
18042: PUSH
18043: LD_VAR 0 16
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: LD_INT 30
18057: PUSH
18058: LD_INT 6
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 30
18067: PUSH
18068: LD_INT 7
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 30
18077: PUSH
18078: LD_INT 8
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PPUSH
18095: CALL_OW 72
18099: ST_TO_ADDR
18100: GO 18103
18102: POP
// if i = 1 then
18103: LD_VAR 0 8
18107: PUSH
18108: LD_INT 1
18110: EQUAL
18111: IFFALSE 18222
// begin tmp := [ ] ;
18113: LD_ADDR_VAR 0 19
18117: PUSH
18118: EMPTY
18119: ST_TO_ADDR
// for j in f do
18120: LD_ADDR_VAR 0 9
18124: PUSH
18125: LD_VAR 0 12
18129: PUSH
18130: FOR_IN
18131: IFFALSE 18204
// if GetBType ( j ) = b_bunker then
18133: LD_VAR 0 9
18137: PPUSH
18138: CALL_OW 266
18142: PUSH
18143: LD_INT 32
18145: EQUAL
18146: IFFALSE 18173
// tmp := Insert ( tmp , 1 , j ) else
18148: LD_ADDR_VAR 0 19
18152: PUSH
18153: LD_VAR 0 19
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_VAR 0 9
18165: PPUSH
18166: CALL_OW 2
18170: ST_TO_ADDR
18171: GO 18202
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18173: LD_ADDR_VAR 0 19
18177: PUSH
18178: LD_VAR 0 19
18182: PPUSH
18183: LD_VAR 0 19
18187: PUSH
18188: LD_INT 1
18190: PLUS
18191: PPUSH
18192: LD_VAR 0 9
18196: PPUSH
18197: CALL_OW 2
18201: ST_TO_ADDR
18202: GO 18130
18204: POP
18205: POP
// if tmp then
18206: LD_VAR 0 19
18210: IFFALSE 18222
// f := tmp ;
18212: LD_ADDR_VAR 0 12
18216: PUSH
18217: LD_VAR 0 19
18221: ST_TO_ADDR
// end ; x := personel [ i ] ;
18222: LD_ADDR_VAR 0 13
18226: PUSH
18227: LD_VAR 0 6
18231: PUSH
18232: LD_VAR 0 8
18236: ARRAY
18237: ST_TO_ADDR
// if x = - 1 then
18238: LD_VAR 0 13
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: EQUAL
18247: IFFALSE 18456
// begin for j in f do
18249: LD_ADDR_VAR 0 9
18253: PUSH
18254: LD_VAR 0 12
18258: PUSH
18259: FOR_IN
18260: IFFALSE 18452
// repeat InitHc ;
18262: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18266: LD_VAR 0 9
18270: PPUSH
18271: CALL_OW 266
18275: PUSH
18276: LD_INT 5
18278: EQUAL
18279: IFFALSE 18349
// begin if UnitsInside ( j ) < 3 then
18281: LD_VAR 0 9
18285: PPUSH
18286: CALL_OW 313
18290: PUSH
18291: LD_INT 3
18293: LESS
18294: IFFALSE 18330
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18296: LD_INT 0
18298: PPUSH
18299: LD_INT 5
18301: PUSH
18302: LD_INT 8
18304: PUSH
18305: LD_INT 9
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: LD_VAR 0 17
18317: ARRAY
18318: PPUSH
18319: LD_VAR 0 4
18323: PPUSH
18324: CALL_OW 380
18328: GO 18347
// PrepareHuman ( false , i , skill ) ;
18330: LD_INT 0
18332: PPUSH
18333: LD_VAR 0 8
18337: PPUSH
18338: LD_VAR 0 4
18342: PPUSH
18343: CALL_OW 380
// end else
18347: GO 18366
// PrepareHuman ( false , i , skill ) ;
18349: LD_INT 0
18351: PPUSH
18352: LD_VAR 0 8
18356: PPUSH
18357: LD_VAR 0 4
18361: PPUSH
18362: CALL_OW 380
// un := CreateHuman ;
18366: LD_ADDR_VAR 0 14
18370: PUSH
18371: CALL_OW 44
18375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18376: LD_ADDR_VAR 0 7
18380: PUSH
18381: LD_VAR 0 7
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: LD_VAR 0 14
18393: PPUSH
18394: CALL_OW 2
18398: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18399: LD_VAR 0 14
18403: PPUSH
18404: LD_VAR 0 9
18408: PPUSH
18409: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18413: LD_VAR 0 9
18417: PPUSH
18418: CALL_OW 313
18422: PUSH
18423: LD_INT 6
18425: EQUAL
18426: PUSH
18427: LD_VAR 0 9
18431: PPUSH
18432: CALL_OW 266
18436: PUSH
18437: LD_INT 32
18439: PUSH
18440: LD_INT 31
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: IN
18447: OR
18448: IFFALSE 18262
18450: GO 18259
18452: POP
18453: POP
// end else
18454: GO 18836
// for j = 1 to x do
18456: LD_ADDR_VAR 0 9
18460: PUSH
18461: DOUBLE
18462: LD_INT 1
18464: DEC
18465: ST_TO_ADDR
18466: LD_VAR 0 13
18470: PUSH
18471: FOR_TO
18472: IFFALSE 18834
// begin InitHc ;
18474: CALL_OW 19
// if not f then
18478: LD_VAR 0 12
18482: NOT
18483: IFFALSE 18572
// begin PrepareHuman ( false , i , skill ) ;
18485: LD_INT 0
18487: PPUSH
18488: LD_VAR 0 8
18492: PPUSH
18493: LD_VAR 0 4
18497: PPUSH
18498: CALL_OW 380
// un := CreateHuman ;
18502: LD_ADDR_VAR 0 14
18506: PUSH
18507: CALL_OW 44
18511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18512: LD_ADDR_VAR 0 7
18516: PUSH
18517: LD_VAR 0 7
18521: PPUSH
18522: LD_INT 1
18524: PPUSH
18525: LD_VAR 0 14
18529: PPUSH
18530: CALL_OW 2
18534: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18535: LD_VAR 0 14
18539: PPUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 250
18549: PPUSH
18550: LD_VAR 0 1
18554: PPUSH
18555: CALL_OW 251
18559: PPUSH
18560: LD_INT 10
18562: PPUSH
18563: LD_INT 0
18565: PPUSH
18566: CALL_OW 50
// continue ;
18570: GO 18471
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18572: LD_VAR 0 12
18576: PUSH
18577: LD_INT 1
18579: ARRAY
18580: PPUSH
18581: CALL_OW 313
18585: PUSH
18586: LD_VAR 0 12
18590: PUSH
18591: LD_INT 1
18593: ARRAY
18594: PPUSH
18595: CALL_OW 266
18599: PUSH
18600: LD_INT 32
18602: PUSH
18603: LD_INT 31
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: IN
18610: AND
18611: PUSH
18612: LD_VAR 0 12
18616: PUSH
18617: LD_INT 1
18619: ARRAY
18620: PPUSH
18621: CALL_OW 313
18625: PUSH
18626: LD_INT 6
18628: EQUAL
18629: OR
18630: IFFALSE 18650
// f := Delete ( f , 1 ) ;
18632: LD_ADDR_VAR 0 12
18636: PUSH
18637: LD_VAR 0 12
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 3
18649: ST_TO_ADDR
// if not f then
18650: LD_VAR 0 12
18654: NOT
18655: IFFALSE 18673
// begin x := x + 2 ;
18657: LD_ADDR_VAR 0 13
18661: PUSH
18662: LD_VAR 0 13
18666: PUSH
18667: LD_INT 2
18669: PLUS
18670: ST_TO_ADDR
// continue ;
18671: GO 18471
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18673: LD_VAR 0 12
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: PPUSH
18682: CALL_OW 266
18686: PUSH
18687: LD_INT 5
18689: EQUAL
18690: IFFALSE 18764
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18692: LD_VAR 0 12
18696: PUSH
18697: LD_INT 1
18699: ARRAY
18700: PPUSH
18701: CALL_OW 313
18705: PUSH
18706: LD_INT 3
18708: LESS
18709: IFFALSE 18745
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18711: LD_INT 0
18713: PPUSH
18714: LD_INT 5
18716: PUSH
18717: LD_INT 8
18719: PUSH
18720: LD_INT 9
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: PUSH
18728: LD_VAR 0 17
18732: ARRAY
18733: PPUSH
18734: LD_VAR 0 4
18738: PPUSH
18739: CALL_OW 380
18743: GO 18762
// PrepareHuman ( false , i , skill ) ;
18745: LD_INT 0
18747: PPUSH
18748: LD_VAR 0 8
18752: PPUSH
18753: LD_VAR 0 4
18757: PPUSH
18758: CALL_OW 380
// end else
18762: GO 18781
// PrepareHuman ( false , i , skill ) ;
18764: LD_INT 0
18766: PPUSH
18767: LD_VAR 0 8
18771: PPUSH
18772: LD_VAR 0 4
18776: PPUSH
18777: CALL_OW 380
// un := CreateHuman ;
18781: LD_ADDR_VAR 0 14
18785: PUSH
18786: CALL_OW 44
18790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18791: LD_ADDR_VAR 0 7
18795: PUSH
18796: LD_VAR 0 7
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: LD_VAR 0 14
18808: PPUSH
18809: CALL_OW 2
18813: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18814: LD_VAR 0 14
18818: PPUSH
18819: LD_VAR 0 12
18823: PUSH
18824: LD_INT 1
18826: ARRAY
18827: PPUSH
18828: CALL_OW 52
// end ;
18832: GO 18471
18834: POP
18835: POP
// end ;
18836: GO 17773
18838: POP
18839: POP
// result := result ^ buildings ;
18840: LD_ADDR_VAR 0 7
18844: PUSH
18845: LD_VAR 0 7
18849: PUSH
18850: LD_VAR 0 18
18854: ADD
18855: ST_TO_ADDR
// end else
18856: GO 18999
// begin for i = 1 to personel do
18858: LD_ADDR_VAR 0 8
18862: PUSH
18863: DOUBLE
18864: LD_INT 1
18866: DEC
18867: ST_TO_ADDR
18868: LD_VAR 0 6
18872: PUSH
18873: FOR_TO
18874: IFFALSE 18997
// begin if i > 4 then
18876: LD_VAR 0 8
18880: PUSH
18881: LD_INT 4
18883: GREATER
18884: IFFALSE 18888
// break ;
18886: GO 18997
// x := personel [ i ] ;
18888: LD_ADDR_VAR 0 13
18892: PUSH
18893: LD_VAR 0 6
18897: PUSH
18898: LD_VAR 0 8
18902: ARRAY
18903: ST_TO_ADDR
// if x = - 1 then
18904: LD_VAR 0 13
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: EQUAL
18913: IFFALSE 18917
// continue ;
18915: GO 18873
// PrepareHuman ( false , i , skill ) ;
18917: LD_INT 0
18919: PPUSH
18920: LD_VAR 0 8
18924: PPUSH
18925: LD_VAR 0 4
18929: PPUSH
18930: CALL_OW 380
// un := CreateHuman ;
18934: LD_ADDR_VAR 0 14
18938: PUSH
18939: CALL_OW 44
18943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18944: LD_VAR 0 14
18948: PPUSH
18949: LD_VAR 0 1
18953: PPUSH
18954: CALL_OW 250
18958: PPUSH
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 251
18968: PPUSH
18969: LD_INT 10
18971: PPUSH
18972: LD_INT 0
18974: PPUSH
18975: CALL_OW 50
// result := result ^ un ;
18979: LD_ADDR_VAR 0 7
18983: PUSH
18984: LD_VAR 0 7
18988: PUSH
18989: LD_VAR 0 14
18993: ADD
18994: ST_TO_ADDR
// end ;
18995: GO 18873
18997: POP
18998: POP
// end ; end ;
18999: LD_VAR 0 7
19003: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19004: LD_INT 0
19006: PPUSH
19007: PPUSH
19008: PPUSH
19009: PPUSH
19010: PPUSH
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
19018: PPUSH
19019: PPUSH
19020: PPUSH
19021: PPUSH
// result := false ;
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_INT 0
19029: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19030: LD_VAR 0 1
19034: NOT
19035: PUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 266
19045: PUSH
19046: LD_INT 32
19048: PUSH
19049: LD_INT 33
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: IN
19056: NOT
19057: OR
19058: IFFALSE 19062
// exit ;
19060: GO 20171
// nat := GetNation ( tower ) ;
19062: LD_ADDR_VAR 0 12
19066: PUSH
19067: LD_VAR 0 1
19071: PPUSH
19072: CALL_OW 248
19076: ST_TO_ADDR
// side := GetSide ( tower ) ;
19077: LD_ADDR_VAR 0 16
19081: PUSH
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 255
19091: ST_TO_ADDR
// x := GetX ( tower ) ;
19092: LD_ADDR_VAR 0 10
19096: PUSH
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 250
19106: ST_TO_ADDR
// y := GetY ( tower ) ;
19107: LD_ADDR_VAR 0 11
19111: PUSH
19112: LD_VAR 0 1
19116: PPUSH
19117: CALL_OW 251
19121: ST_TO_ADDR
// if not x or not y then
19122: LD_VAR 0 10
19126: NOT
19127: PUSH
19128: LD_VAR 0 11
19132: NOT
19133: OR
19134: IFFALSE 19138
// exit ;
19136: GO 20171
// weapon := 0 ;
19138: LD_ADDR_VAR 0 18
19142: PUSH
19143: LD_INT 0
19145: ST_TO_ADDR
// fac_list := [ ] ;
19146: LD_ADDR_VAR 0 17
19150: PUSH
19151: EMPTY
19152: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19153: LD_ADDR_VAR 0 6
19157: PUSH
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 274
19167: PPUSH
19168: LD_VAR 0 2
19172: PPUSH
19173: LD_INT 0
19175: PPUSH
19176: CALL 16742 0 3
19180: PPUSH
19181: LD_INT 30
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 72
19195: ST_TO_ADDR
// if not factories then
19196: LD_VAR 0 6
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 20171
// for i in factories do
19205: LD_ADDR_VAR 0 8
19209: PUSH
19210: LD_VAR 0 6
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19241
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19218: LD_ADDR_VAR 0 17
19222: PUSH
19223: LD_VAR 0 17
19227: PUSH
19228: LD_VAR 0 8
19232: PPUSH
19233: CALL_OW 478
19237: UNION
19238: ST_TO_ADDR
19239: GO 19215
19241: POP
19242: POP
// if not fac_list then
19243: LD_VAR 0 17
19247: NOT
19248: IFFALSE 19252
// exit ;
19250: GO 20171
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19252: LD_ADDR_VAR 0 5
19256: PUSH
19257: LD_INT 4
19259: PUSH
19260: LD_INT 5
19262: PUSH
19263: LD_INT 9
19265: PUSH
19266: LD_INT 10
19268: PUSH
19269: LD_INT 6
19271: PUSH
19272: LD_INT 7
19274: PUSH
19275: LD_INT 11
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 27
19289: PUSH
19290: LD_INT 28
19292: PUSH
19293: LD_INT 26
19295: PUSH
19296: LD_INT 30
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 43
19307: PUSH
19308: LD_INT 44
19310: PUSH
19311: LD_INT 46
19313: PUSH
19314: LD_INT 45
19316: PUSH
19317: LD_INT 47
19319: PUSH
19320: LD_INT 49
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: LD_VAR 0 12
19340: ARRAY
19341: ST_TO_ADDR
// list := list isect fac_list ;
19342: LD_ADDR_VAR 0 5
19346: PUSH
19347: LD_VAR 0 5
19351: PUSH
19352: LD_VAR 0 17
19356: ISECT
19357: ST_TO_ADDR
// if not list then
19358: LD_VAR 0 5
19362: NOT
19363: IFFALSE 19367
// exit ;
19365: GO 20171
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19367: LD_VAR 0 12
19371: PUSH
19372: LD_INT 3
19374: EQUAL
19375: PUSH
19376: LD_INT 49
19378: PUSH
19379: LD_VAR 0 5
19383: IN
19384: AND
19385: PUSH
19386: LD_INT 31
19388: PPUSH
19389: LD_VAR 0 16
19393: PPUSH
19394: CALL_OW 321
19398: PUSH
19399: LD_INT 2
19401: EQUAL
19402: AND
19403: IFFALSE 19463
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19405: LD_INT 22
19407: PUSH
19408: LD_VAR 0 16
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 35
19419: PUSH
19420: LD_INT 49
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 91
19429: PUSH
19430: LD_VAR 0 1
19434: PUSH
19435: LD_INT 10
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: NOT
19453: IFFALSE 19463
// weapon := ru_time_lapser ;
19455: LD_ADDR_VAR 0 18
19459: PUSH
19460: LD_INT 49
19462: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19463: LD_VAR 0 12
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: IN
19478: PUSH
19479: LD_INT 11
19481: PUSH
19482: LD_VAR 0 5
19486: IN
19487: PUSH
19488: LD_INT 30
19490: PUSH
19491: LD_VAR 0 5
19495: IN
19496: OR
19497: AND
19498: PUSH
19499: LD_INT 6
19501: PPUSH
19502: LD_VAR 0 16
19506: PPUSH
19507: CALL_OW 321
19511: PUSH
19512: LD_INT 2
19514: EQUAL
19515: AND
19516: IFFALSE 19681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19518: LD_INT 22
19520: PUSH
19521: LD_VAR 0 16
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 2
19532: PUSH
19533: LD_INT 35
19535: PUSH
19536: LD_INT 11
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 35
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 91
19560: PUSH
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 18
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: PPUSH
19579: CALL_OW 69
19583: NOT
19584: PUSH
19585: LD_INT 22
19587: PUSH
19588: LD_VAR 0 16
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 2
19599: PUSH
19600: LD_INT 30
19602: PUSH
19603: LD_INT 32
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 30
19612: PUSH
19613: LD_INT 33
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 91
19627: PUSH
19628: LD_VAR 0 1
19632: PUSH
19633: LD_INT 12
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: PUSH
19654: LD_INT 2
19656: GREATER
19657: AND
19658: IFFALSE 19681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19660: LD_ADDR_VAR 0 18
19664: PUSH
19665: LD_INT 11
19667: PUSH
19668: LD_INT 30
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_VAR 0 12
19679: ARRAY
19680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19681: LD_VAR 0 18
19685: NOT
19686: PUSH
19687: LD_INT 40
19689: PPUSH
19690: LD_VAR 0 16
19694: PPUSH
19695: CALL_OW 321
19699: PUSH
19700: LD_INT 2
19702: EQUAL
19703: AND
19704: PUSH
19705: LD_INT 7
19707: PUSH
19708: LD_VAR 0 5
19712: IN
19713: PUSH
19714: LD_INT 28
19716: PUSH
19717: LD_VAR 0 5
19721: IN
19722: OR
19723: PUSH
19724: LD_INT 45
19726: PUSH
19727: LD_VAR 0 5
19731: IN
19732: OR
19733: AND
19734: IFFALSE 19988
// begin hex := GetHexInfo ( x , y ) ;
19736: LD_ADDR_VAR 0 4
19740: PUSH
19741: LD_VAR 0 10
19745: PPUSH
19746: LD_VAR 0 11
19750: PPUSH
19751: CALL_OW 546
19755: ST_TO_ADDR
// if hex [ 1 ] then
19756: LD_VAR 0 4
19760: PUSH
19761: LD_INT 1
19763: ARRAY
19764: IFFALSE 19768
// exit ;
19766: GO 20171
// height := hex [ 2 ] ;
19768: LD_ADDR_VAR 0 15
19772: PUSH
19773: LD_VAR 0 4
19777: PUSH
19778: LD_INT 2
19780: ARRAY
19781: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19782: LD_ADDR_VAR 0 14
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 3
19795: PUSH
19796: LD_INT 5
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: ST_TO_ADDR
// for i in tmp do
19805: LD_ADDR_VAR 0 8
19809: PUSH
19810: LD_VAR 0 14
19814: PUSH
19815: FOR_IN
19816: IFFALSE 19986
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19818: LD_ADDR_VAR 0 9
19822: PUSH
19823: LD_VAR 0 10
19827: PPUSH
19828: LD_VAR 0 8
19832: PPUSH
19833: LD_INT 5
19835: PPUSH
19836: CALL_OW 272
19840: PUSH
19841: LD_VAR 0 11
19845: PPUSH
19846: LD_VAR 0 8
19850: PPUSH
19851: LD_INT 5
19853: PPUSH
19854: CALL_OW 273
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19863: LD_VAR 0 9
19867: PUSH
19868: LD_INT 1
19870: ARRAY
19871: PPUSH
19872: LD_VAR 0 9
19876: PUSH
19877: LD_INT 2
19879: ARRAY
19880: PPUSH
19881: CALL_OW 488
19885: IFFALSE 19984
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19887: LD_ADDR_VAR 0 4
19891: PUSH
19892: LD_VAR 0 9
19896: PUSH
19897: LD_INT 1
19899: ARRAY
19900: PPUSH
19901: LD_VAR 0 9
19905: PUSH
19906: LD_INT 2
19908: ARRAY
19909: PPUSH
19910: CALL_OW 546
19914: ST_TO_ADDR
// if hex [ 1 ] then
19915: LD_VAR 0 4
19919: PUSH
19920: LD_INT 1
19922: ARRAY
19923: IFFALSE 19927
// continue ;
19925: GO 19815
// h := hex [ 2 ] ;
19927: LD_ADDR_VAR 0 13
19931: PUSH
19932: LD_VAR 0 4
19936: PUSH
19937: LD_INT 2
19939: ARRAY
19940: ST_TO_ADDR
// if h + 7 < height then
19941: LD_VAR 0 13
19945: PUSH
19946: LD_INT 7
19948: PLUS
19949: PUSH
19950: LD_VAR 0 15
19954: LESS
19955: IFFALSE 19984
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19957: LD_ADDR_VAR 0 18
19961: PUSH
19962: LD_INT 7
19964: PUSH
19965: LD_INT 28
19967: PUSH
19968: LD_INT 45
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: PUSH
19976: LD_VAR 0 12
19980: ARRAY
19981: ST_TO_ADDR
// break ;
19982: GO 19986
// end ; end ; end ;
19984: GO 19815
19986: POP
19987: POP
// end ; if not weapon then
19988: LD_VAR 0 18
19992: NOT
19993: IFFALSE 20053
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19995: LD_ADDR_VAR 0 5
19999: PUSH
20000: LD_VAR 0 5
20004: PUSH
20005: LD_INT 11
20007: PUSH
20008: LD_INT 30
20010: PUSH
20011: LD_INT 49
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: DIFF
20019: ST_TO_ADDR
// if not list then
20020: LD_VAR 0 5
20024: NOT
20025: IFFALSE 20029
// exit ;
20027: GO 20171
// weapon := list [ rand ( 1 , list ) ] ;
20029: LD_ADDR_VAR 0 18
20033: PUSH
20034: LD_VAR 0 5
20038: PUSH
20039: LD_INT 1
20041: PPUSH
20042: LD_VAR 0 5
20046: PPUSH
20047: CALL_OW 12
20051: ARRAY
20052: ST_TO_ADDR
// end ; if weapon then
20053: LD_VAR 0 18
20057: IFFALSE 20171
// begin tmp := CostOfWeapon ( weapon ) ;
20059: LD_ADDR_VAR 0 14
20063: PUSH
20064: LD_VAR 0 18
20068: PPUSH
20069: CALL_OW 451
20073: ST_TO_ADDR
// j := GetBase ( tower ) ;
20074: LD_ADDR_VAR 0 9
20078: PUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: CALL_OW 274
20088: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20089: LD_VAR 0 9
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: CALL_OW 275
20101: PUSH
20102: LD_VAR 0 14
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: GREATEREQUAL
20111: PUSH
20112: LD_VAR 0 9
20116: PPUSH
20117: LD_INT 2
20119: PPUSH
20120: CALL_OW 275
20124: PUSH
20125: LD_VAR 0 14
20129: PUSH
20130: LD_INT 2
20132: ARRAY
20133: GREATEREQUAL
20134: AND
20135: PUSH
20136: LD_VAR 0 9
20140: PPUSH
20141: LD_INT 3
20143: PPUSH
20144: CALL_OW 275
20148: PUSH
20149: LD_VAR 0 14
20153: PUSH
20154: LD_INT 3
20156: ARRAY
20157: GREATEREQUAL
20158: AND
20159: IFFALSE 20171
// result := weapon ;
20161: LD_ADDR_VAR 0 3
20165: PUSH
20166: LD_VAR 0 18
20170: ST_TO_ADDR
// end ; end ;
20171: LD_VAR 0 3
20175: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
// result := true ;
20180: LD_ADDR_VAR 0 3
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if array1 = array2 then
20188: LD_VAR 0 1
20192: PUSH
20193: LD_VAR 0 2
20197: EQUAL
20198: IFFALSE 20258
// begin for i = 1 to array1 do
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_VAR 0 1
20214: PUSH
20215: FOR_TO
20216: IFFALSE 20254
// if array1 [ i ] <> array2 [ i ] then
20218: LD_VAR 0 1
20222: PUSH
20223: LD_VAR 0 4
20227: ARRAY
20228: PUSH
20229: LD_VAR 0 2
20233: PUSH
20234: LD_VAR 0 4
20238: ARRAY
20239: NONEQUAL
20240: IFFALSE 20252
// begin result := false ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_INT 0
20249: ST_TO_ADDR
// break ;
20250: GO 20254
// end ;
20252: GO 20215
20254: POP
20255: POP
// end else
20256: GO 20266
// result := false ;
20258: LD_ADDR_VAR 0 3
20262: PUSH
20263: LD_INT 0
20265: ST_TO_ADDR
// end ;
20266: LD_VAR 0 3
20270: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20271: LD_INT 0
20273: PPUSH
20274: PPUSH
// if not array1 or not array2 then
20275: LD_VAR 0 1
20279: NOT
20280: PUSH
20281: LD_VAR 0 2
20285: NOT
20286: OR
20287: IFFALSE 20291
// exit ;
20289: GO 20355
// result := true ;
20291: LD_ADDR_VAR 0 3
20295: PUSH
20296: LD_INT 1
20298: ST_TO_ADDR
// for i = 1 to array1 do
20299: LD_ADDR_VAR 0 4
20303: PUSH
20304: DOUBLE
20305: LD_INT 1
20307: DEC
20308: ST_TO_ADDR
20309: LD_VAR 0 1
20313: PUSH
20314: FOR_TO
20315: IFFALSE 20353
// if array1 [ i ] <> array2 [ i ] then
20317: LD_VAR 0 1
20321: PUSH
20322: LD_VAR 0 4
20326: ARRAY
20327: PUSH
20328: LD_VAR 0 2
20332: PUSH
20333: LD_VAR 0 4
20337: ARRAY
20338: NONEQUAL
20339: IFFALSE 20351
// begin result := false ;
20341: LD_ADDR_VAR 0 3
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// break ;
20349: GO 20353
// end ;
20351: GO 20314
20353: POP
20354: POP
// end ;
20355: LD_VAR 0 3
20359: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20360: LD_INT 0
20362: PPUSH
20363: PPUSH
20364: PPUSH
// pom := GetBase ( fac ) ;
20365: LD_ADDR_VAR 0 5
20369: PUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 274
20379: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20380: LD_ADDR_VAR 0 4
20384: PUSH
20385: LD_VAR 0 2
20389: PUSH
20390: LD_INT 1
20392: ARRAY
20393: PPUSH
20394: LD_VAR 0 2
20398: PUSH
20399: LD_INT 2
20401: ARRAY
20402: PPUSH
20403: LD_VAR 0 2
20407: PUSH
20408: LD_INT 3
20410: ARRAY
20411: PPUSH
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 4
20419: ARRAY
20420: PPUSH
20421: CALL_OW 449
20425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_VAR 0 5
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 275
20443: PUSH
20444: LD_VAR 0 4
20448: PUSH
20449: LD_INT 1
20451: ARRAY
20452: GREATEREQUAL
20453: PUSH
20454: LD_VAR 0 5
20458: PPUSH
20459: LD_INT 2
20461: PPUSH
20462: CALL_OW 275
20466: PUSH
20467: LD_VAR 0 4
20471: PUSH
20472: LD_INT 2
20474: ARRAY
20475: GREATEREQUAL
20476: AND
20477: PUSH
20478: LD_VAR 0 5
20482: PPUSH
20483: LD_INT 3
20485: PPUSH
20486: CALL_OW 275
20490: PUSH
20491: LD_VAR 0 4
20495: PUSH
20496: LD_INT 3
20498: ARRAY
20499: GREATEREQUAL
20500: AND
20501: ST_TO_ADDR
// end ;
20502: LD_VAR 0 3
20506: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// pom := GetBase ( building ) ;
20513: LD_ADDR_VAR 0 3
20517: PUSH
20518: LD_VAR 0 1
20522: PPUSH
20523: CALL_OW 274
20527: ST_TO_ADDR
// if not pom then
20528: LD_VAR 0 3
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20707
// btype := GetBType ( building ) ;
20537: LD_ADDR_VAR 0 5
20541: PUSH
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 266
20551: ST_TO_ADDR
// if btype = b_armoury then
20552: LD_VAR 0 5
20556: PUSH
20557: LD_INT 4
20559: EQUAL
20560: IFFALSE 20570
// btype := b_barracks ;
20562: LD_ADDR_VAR 0 5
20566: PUSH
20567: LD_INT 5
20569: ST_TO_ADDR
// if btype = b_depot then
20570: LD_VAR 0 5
20574: PUSH
20575: LD_INT 0
20577: EQUAL
20578: IFFALSE 20588
// btype := b_warehouse ;
20580: LD_ADDR_VAR 0 5
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// if btype = b_workshop then
20588: LD_VAR 0 5
20592: PUSH
20593: LD_INT 2
20595: EQUAL
20596: IFFALSE 20606
// btype := b_factory ;
20598: LD_ADDR_VAR 0 5
20602: PUSH
20603: LD_INT 3
20605: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20606: LD_ADDR_VAR 0 4
20610: PUSH
20611: LD_VAR 0 5
20615: PPUSH
20616: LD_VAR 0 1
20620: PPUSH
20621: CALL_OW 248
20625: PPUSH
20626: CALL_OW 450
20630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20631: LD_ADDR_VAR 0 2
20635: PUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: CALL_OW 275
20648: PUSH
20649: LD_VAR 0 4
20653: PUSH
20654: LD_INT 1
20656: ARRAY
20657: GREATEREQUAL
20658: PUSH
20659: LD_VAR 0 3
20663: PPUSH
20664: LD_INT 2
20666: PPUSH
20667: CALL_OW 275
20671: PUSH
20672: LD_VAR 0 4
20676: PUSH
20677: LD_INT 2
20679: ARRAY
20680: GREATEREQUAL
20681: AND
20682: PUSH
20683: LD_VAR 0 3
20687: PPUSH
20688: LD_INT 3
20690: PPUSH
20691: CALL_OW 275
20695: PUSH
20696: LD_VAR 0 4
20700: PUSH
20701: LD_INT 3
20703: ARRAY
20704: GREATEREQUAL
20705: AND
20706: ST_TO_ADDR
// end ;
20707: LD_VAR 0 2
20711: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
20716: PPUSH
// pom := GetBase ( building ) ;
20717: LD_ADDR_VAR 0 4
20721: PUSH
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 274
20731: ST_TO_ADDR
// if not pom then
20732: LD_VAR 0 4
20736: NOT
20737: IFFALSE 20741
// exit ;
20739: GO 20842
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20741: LD_ADDR_VAR 0 5
20745: PUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: LD_VAR 0 1
20755: PPUSH
20756: CALL_OW 248
20760: PPUSH
20761: CALL_OW 450
20765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: LD_VAR 0 4
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 275
20783: PUSH
20784: LD_VAR 0 5
20788: PUSH
20789: LD_INT 1
20791: ARRAY
20792: GREATEREQUAL
20793: PUSH
20794: LD_VAR 0 4
20798: PPUSH
20799: LD_INT 2
20801: PPUSH
20802: CALL_OW 275
20806: PUSH
20807: LD_VAR 0 5
20811: PUSH
20812: LD_INT 2
20814: ARRAY
20815: GREATEREQUAL
20816: AND
20817: PUSH
20818: LD_VAR 0 4
20822: PPUSH
20823: LD_INT 3
20825: PPUSH
20826: CALL_OW 275
20830: PUSH
20831: LD_VAR 0 5
20835: PUSH
20836: LD_INT 3
20838: ARRAY
20839: GREATEREQUAL
20840: AND
20841: ST_TO_ADDR
// end ;
20842: LD_VAR 0 3
20846: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20847: LD_INT 0
20849: PPUSH
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// result := false ;
20860: LD_ADDR_VAR 0 8
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20868: LD_VAR 0 5
20872: NOT
20873: PUSH
20874: LD_VAR 0 1
20878: NOT
20879: OR
20880: PUSH
20881: LD_VAR 0 2
20885: NOT
20886: OR
20887: PUSH
20888: LD_VAR 0 3
20892: NOT
20893: OR
20894: IFFALSE 20898
// exit ;
20896: GO 21712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20898: LD_ADDR_VAR 0 14
20902: PUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: LD_VAR 0 3
20917: PPUSH
20918: LD_VAR 0 4
20922: PPUSH
20923: LD_VAR 0 5
20927: PUSH
20928: LD_INT 1
20930: ARRAY
20931: PPUSH
20932: CALL_OW 248
20936: PPUSH
20937: LD_INT 0
20939: PPUSH
20940: CALL 22945 0 6
20944: ST_TO_ADDR
// if not hexes then
20945: LD_VAR 0 14
20949: NOT
20950: IFFALSE 20954
// exit ;
20952: GO 21712
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20954: LD_ADDR_VAR 0 17
20958: PUSH
20959: LD_VAR 0 5
20963: PPUSH
20964: LD_INT 22
20966: PUSH
20967: LD_VAR 0 13
20971: PPUSH
20972: CALL_OW 255
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 2
20983: PUSH
20984: LD_INT 30
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 30
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 72
21017: ST_TO_ADDR
// for i = 1 to hexes do
21018: LD_ADDR_VAR 0 9
21022: PUSH
21023: DOUBLE
21024: LD_INT 1
21026: DEC
21027: ST_TO_ADDR
21028: LD_VAR 0 14
21032: PUSH
21033: FOR_TO
21034: IFFALSE 21710
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21036: LD_ADDR_VAR 0 13
21040: PUSH
21041: LD_VAR 0 14
21045: PUSH
21046: LD_VAR 0 9
21050: ARRAY
21051: PUSH
21052: LD_INT 1
21054: ARRAY
21055: PPUSH
21056: LD_VAR 0 14
21060: PUSH
21061: LD_VAR 0 9
21065: ARRAY
21066: PUSH
21067: LD_INT 2
21069: ARRAY
21070: PPUSH
21071: CALL_OW 428
21075: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21076: LD_VAR 0 14
21080: PUSH
21081: LD_VAR 0 9
21085: ARRAY
21086: PUSH
21087: LD_INT 1
21089: ARRAY
21090: PPUSH
21091: LD_VAR 0 14
21095: PUSH
21096: LD_VAR 0 9
21100: ARRAY
21101: PUSH
21102: LD_INT 2
21104: ARRAY
21105: PPUSH
21106: CALL_OW 351
21110: PUSH
21111: LD_VAR 0 14
21115: PUSH
21116: LD_VAR 0 9
21120: ARRAY
21121: PUSH
21122: LD_INT 1
21124: ARRAY
21125: PPUSH
21126: LD_VAR 0 14
21130: PUSH
21131: LD_VAR 0 9
21135: ARRAY
21136: PUSH
21137: LD_INT 2
21139: ARRAY
21140: PPUSH
21141: CALL_OW 488
21145: NOT
21146: OR
21147: PUSH
21148: LD_VAR 0 13
21152: PPUSH
21153: CALL_OW 247
21157: PUSH
21158: LD_INT 3
21160: EQUAL
21161: OR
21162: IFFALSE 21168
// exit ;
21164: POP
21165: POP
21166: GO 21712
// if not tmp then
21168: LD_VAR 0 13
21172: NOT
21173: IFFALSE 21177
// continue ;
21175: GO 21033
// result := true ;
21177: LD_ADDR_VAR 0 8
21181: PUSH
21182: LD_INT 1
21184: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21185: LD_VAR 0 6
21189: PUSH
21190: LD_VAR 0 13
21194: PPUSH
21195: CALL_OW 247
21199: PUSH
21200: LD_INT 2
21202: EQUAL
21203: AND
21204: PUSH
21205: LD_VAR 0 13
21209: PPUSH
21210: CALL_OW 263
21214: PUSH
21215: LD_INT 1
21217: EQUAL
21218: AND
21219: IFFALSE 21383
// begin if IsDrivenBy ( tmp ) then
21221: LD_VAR 0 13
21225: PPUSH
21226: CALL_OW 311
21230: IFFALSE 21234
// continue ;
21232: GO 21033
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21234: LD_VAR 0 6
21238: PPUSH
21239: LD_INT 3
21241: PUSH
21242: LD_INT 60
21244: PUSH
21245: EMPTY
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 3
21254: PUSH
21255: LD_INT 55
21257: PUSH
21258: EMPTY
21259: LIST
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PPUSH
21269: CALL_OW 72
21273: IFFALSE 21381
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21275: LD_ADDR_VAR 0 18
21279: PUSH
21280: LD_VAR 0 6
21284: PPUSH
21285: LD_INT 3
21287: PUSH
21288: LD_INT 60
21290: PUSH
21291: EMPTY
21292: LIST
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 3
21300: PUSH
21301: LD_INT 55
21303: PUSH
21304: EMPTY
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 72
21319: PUSH
21320: LD_INT 1
21322: ARRAY
21323: ST_TO_ADDR
// if IsInUnit ( driver ) then
21324: LD_VAR 0 18
21328: PPUSH
21329: CALL_OW 310
21333: IFFALSE 21344
// ComExit ( driver ) ;
21335: LD_VAR 0 18
21339: PPUSH
21340: CALL 46725 0 1
// AddComEnterUnit ( driver , tmp ) ;
21344: LD_VAR 0 18
21348: PPUSH
21349: LD_VAR 0 13
21353: PPUSH
21354: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21358: LD_VAR 0 18
21362: PPUSH
21363: LD_VAR 0 7
21367: PPUSH
21368: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21372: LD_VAR 0 18
21376: PPUSH
21377: CALL_OW 181
// end ; continue ;
21381: GO 21033
// end ; if not cleaners or not tmp in cleaners then
21383: LD_VAR 0 6
21387: NOT
21388: PUSH
21389: LD_VAR 0 13
21393: PUSH
21394: LD_VAR 0 6
21398: IN
21399: NOT
21400: OR
21401: IFFALSE 21708
// begin if dep then
21403: LD_VAR 0 17
21407: IFFALSE 21543
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21409: LD_ADDR_VAR 0 16
21413: PUSH
21414: LD_VAR 0 17
21418: PUSH
21419: LD_INT 1
21421: ARRAY
21422: PPUSH
21423: CALL_OW 250
21427: PPUSH
21428: LD_VAR 0 17
21432: PUSH
21433: LD_INT 1
21435: ARRAY
21436: PPUSH
21437: CALL_OW 254
21441: PPUSH
21442: LD_INT 5
21444: PPUSH
21445: CALL_OW 272
21449: PUSH
21450: LD_VAR 0 17
21454: PUSH
21455: LD_INT 1
21457: ARRAY
21458: PPUSH
21459: CALL_OW 251
21463: PPUSH
21464: LD_VAR 0 17
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: PPUSH
21473: CALL_OW 254
21477: PPUSH
21478: LD_INT 5
21480: PPUSH
21481: CALL_OW 273
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21490: LD_VAR 0 16
21494: PUSH
21495: LD_INT 1
21497: ARRAY
21498: PPUSH
21499: LD_VAR 0 16
21503: PUSH
21504: LD_INT 2
21506: ARRAY
21507: PPUSH
21508: CALL_OW 488
21512: IFFALSE 21543
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21514: LD_VAR 0 13
21518: PPUSH
21519: LD_VAR 0 16
21523: PUSH
21524: LD_INT 1
21526: ARRAY
21527: PPUSH
21528: LD_VAR 0 16
21532: PUSH
21533: LD_INT 2
21535: ARRAY
21536: PPUSH
21537: CALL_OW 111
// continue ;
21541: GO 21033
// end ; end ; r := GetDir ( tmp ) ;
21543: LD_ADDR_VAR 0 15
21547: PUSH
21548: LD_VAR 0 13
21552: PPUSH
21553: CALL_OW 254
21557: ST_TO_ADDR
// if r = 5 then
21558: LD_VAR 0 15
21562: PUSH
21563: LD_INT 5
21565: EQUAL
21566: IFFALSE 21576
// r := 0 ;
21568: LD_ADDR_VAR 0 15
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// for j = r to 5 do
21576: LD_ADDR_VAR 0 10
21580: PUSH
21581: DOUBLE
21582: LD_VAR 0 15
21586: DEC
21587: ST_TO_ADDR
21588: LD_INT 5
21590: PUSH
21591: FOR_TO
21592: IFFALSE 21706
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21594: LD_ADDR_VAR 0 11
21598: PUSH
21599: LD_VAR 0 13
21603: PPUSH
21604: CALL_OW 250
21608: PPUSH
21609: LD_VAR 0 10
21613: PPUSH
21614: LD_INT 2
21616: PPUSH
21617: CALL_OW 272
21621: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21622: LD_ADDR_VAR 0 12
21626: PUSH
21627: LD_VAR 0 13
21631: PPUSH
21632: CALL_OW 251
21636: PPUSH
21637: LD_VAR 0 10
21641: PPUSH
21642: LD_INT 2
21644: PPUSH
21645: CALL_OW 273
21649: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21650: LD_VAR 0 11
21654: PPUSH
21655: LD_VAR 0 12
21659: PPUSH
21660: CALL_OW 488
21664: PUSH
21665: LD_VAR 0 11
21669: PPUSH
21670: LD_VAR 0 12
21674: PPUSH
21675: CALL_OW 428
21679: NOT
21680: AND
21681: IFFALSE 21704
// begin ComMoveXY ( tmp , _x , _y ) ;
21683: LD_VAR 0 13
21687: PPUSH
21688: LD_VAR 0 11
21692: PPUSH
21693: LD_VAR 0 12
21697: PPUSH
21698: CALL_OW 111
// break ;
21702: GO 21706
// end ; end ;
21704: GO 21591
21706: POP
21707: POP
// end ; end ;
21708: GO 21033
21710: POP
21711: POP
// end ;
21712: LD_VAR 0 8
21716: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21717: LD_INT 0
21719: PPUSH
// result := true ;
21720: LD_ADDR_VAR 0 3
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21728: LD_VAR 0 2
21732: PUSH
21733: LD_INT 24
21735: DOUBLE
21736: EQUAL
21737: IFTRUE 21747
21739: LD_INT 33
21741: DOUBLE
21742: EQUAL
21743: IFTRUE 21747
21745: GO 21772
21747: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21748: LD_ADDR_VAR 0 3
21752: PUSH
21753: LD_INT 32
21755: PPUSH
21756: LD_VAR 0 1
21760: PPUSH
21761: CALL_OW 321
21765: PUSH
21766: LD_INT 2
21768: EQUAL
21769: ST_TO_ADDR
21770: GO 22088
21772: LD_INT 20
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21805
21780: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21781: LD_ADDR_VAR 0 3
21785: PUSH
21786: LD_INT 6
21788: PPUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 321
21798: PUSH
21799: LD_INT 2
21801: EQUAL
21802: ST_TO_ADDR
21803: GO 22088
21805: LD_INT 22
21807: DOUBLE
21808: EQUAL
21809: IFTRUE 21819
21811: LD_INT 36
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21844
21819: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21820: LD_ADDR_VAR 0 3
21824: PUSH
21825: LD_INT 15
21827: PPUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 321
21837: PUSH
21838: LD_INT 2
21840: EQUAL
21841: ST_TO_ADDR
21842: GO 22088
21844: LD_INT 30
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21877
21852: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21853: LD_ADDR_VAR 0 3
21857: PUSH
21858: LD_INT 20
21860: PPUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: CALL_OW 321
21870: PUSH
21871: LD_INT 2
21873: EQUAL
21874: ST_TO_ADDR
21875: GO 22088
21877: LD_INT 28
21879: DOUBLE
21880: EQUAL
21881: IFTRUE 21891
21883: LD_INT 21
21885: DOUBLE
21886: EQUAL
21887: IFTRUE 21891
21889: GO 21916
21891: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: LD_INT 21
21899: PPUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 321
21909: PUSH
21910: LD_INT 2
21912: EQUAL
21913: ST_TO_ADDR
21914: GO 22088
21916: LD_INT 16
21918: DOUBLE
21919: EQUAL
21920: IFTRUE 21924
21922: GO 21949
21924: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21925: LD_ADDR_VAR 0 3
21929: PUSH
21930: LD_INT 84
21932: PPUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 321
21942: PUSH
21943: LD_INT 2
21945: EQUAL
21946: ST_TO_ADDR
21947: GO 22088
21949: LD_INT 19
21951: DOUBLE
21952: EQUAL
21953: IFTRUE 21963
21955: LD_INT 23
21957: DOUBLE
21958: EQUAL
21959: IFTRUE 21963
21961: GO 21988
21963: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21964: LD_ADDR_VAR 0 3
21968: PUSH
21969: LD_INT 83
21971: PPUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 321
21981: PUSH
21982: LD_INT 2
21984: EQUAL
21985: ST_TO_ADDR
21986: GO 22088
21988: LD_INT 17
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22021
21996: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_INT 39
22004: PPUSH
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 321
22014: PUSH
22015: LD_INT 2
22017: EQUAL
22018: ST_TO_ADDR
22019: GO 22088
22021: LD_INT 18
22023: DOUBLE
22024: EQUAL
22025: IFTRUE 22029
22027: GO 22054
22029: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22030: LD_ADDR_VAR 0 3
22034: PUSH
22035: LD_INT 40
22037: PPUSH
22038: LD_VAR 0 1
22042: PPUSH
22043: CALL_OW 321
22047: PUSH
22048: LD_INT 2
22050: EQUAL
22051: ST_TO_ADDR
22052: GO 22088
22054: LD_INT 27
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22087
22062: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22063: LD_ADDR_VAR 0 3
22067: PUSH
22068: LD_INT 35
22070: PPUSH
22071: LD_VAR 0 1
22075: PPUSH
22076: CALL_OW 321
22080: PUSH
22081: LD_INT 2
22083: EQUAL
22084: ST_TO_ADDR
22085: GO 22088
22087: POP
// end ;
22088: LD_VAR 0 3
22092: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22093: LD_INT 0
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
// result := false ;
22106: LD_ADDR_VAR 0 6
22110: PUSH
22111: LD_INT 0
22113: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22114: LD_VAR 0 1
22118: NOT
22119: PUSH
22120: LD_VAR 0 1
22124: PPUSH
22125: CALL_OW 266
22129: PUSH
22130: LD_INT 0
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: IN
22140: NOT
22141: OR
22142: PUSH
22143: LD_VAR 0 2
22147: NOT
22148: OR
22149: PUSH
22150: LD_VAR 0 5
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: LD_INT 4
22169: PUSH
22170: LD_INT 5
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: IN
22181: NOT
22182: OR
22183: PUSH
22184: LD_VAR 0 3
22188: PPUSH
22189: LD_VAR 0 4
22193: PPUSH
22194: CALL_OW 488
22198: NOT
22199: OR
22200: IFFALSE 22204
// exit ;
22202: GO 22940
// side := GetSide ( depot ) ;
22204: LD_ADDR_VAR 0 9
22208: PUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 255
22218: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22219: LD_VAR 0 9
22223: PPUSH
22224: LD_VAR 0 2
22228: PPUSH
22229: CALL 21717 0 2
22233: NOT
22234: IFFALSE 22238
// exit ;
22236: GO 22940
// pom := GetBase ( depot ) ;
22238: LD_ADDR_VAR 0 10
22242: PUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 274
22252: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22253: LD_ADDR_VAR 0 11
22257: PUSH
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 1
22267: PPUSH
22268: CALL_OW 248
22272: PPUSH
22273: CALL_OW 450
22277: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22278: LD_VAR 0 10
22282: PPUSH
22283: LD_INT 1
22285: PPUSH
22286: CALL_OW 275
22290: PUSH
22291: LD_VAR 0 11
22295: PUSH
22296: LD_INT 1
22298: ARRAY
22299: GREATEREQUAL
22300: PUSH
22301: LD_VAR 0 10
22305: PPUSH
22306: LD_INT 2
22308: PPUSH
22309: CALL_OW 275
22313: PUSH
22314: LD_VAR 0 11
22318: PUSH
22319: LD_INT 2
22321: ARRAY
22322: GREATEREQUAL
22323: AND
22324: PUSH
22325: LD_VAR 0 10
22329: PPUSH
22330: LD_INT 3
22332: PPUSH
22333: CALL_OW 275
22337: PUSH
22338: LD_VAR 0 11
22342: PUSH
22343: LD_INT 3
22345: ARRAY
22346: GREATEREQUAL
22347: AND
22348: NOT
22349: IFFALSE 22353
// exit ;
22351: GO 22940
// if GetBType ( depot ) = b_depot then
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 266
22362: PUSH
22363: LD_INT 0
22365: EQUAL
22366: IFFALSE 22378
// dist := 28 else
22368: LD_ADDR_VAR 0 14
22372: PUSH
22373: LD_INT 28
22375: ST_TO_ADDR
22376: GO 22386
// dist := 36 ;
22378: LD_ADDR_VAR 0 14
22382: PUSH
22383: LD_INT 36
22385: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_VAR 0 3
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: CALL_OW 297
22405: PUSH
22406: LD_VAR 0 14
22410: GREATER
22411: IFFALSE 22415
// exit ;
22413: GO 22940
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22415: LD_ADDR_VAR 0 12
22419: PUSH
22420: LD_VAR 0 2
22424: PPUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_VAR 0 4
22434: PPUSH
22435: LD_VAR 0 5
22439: PPUSH
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 248
22449: PPUSH
22450: LD_INT 0
22452: PPUSH
22453: CALL 22945 0 6
22457: ST_TO_ADDR
// if not hexes then
22458: LD_VAR 0 12
22462: NOT
22463: IFFALSE 22467
// exit ;
22465: GO 22940
// hex := GetHexInfo ( x , y ) ;
22467: LD_ADDR_VAR 0 15
22471: PUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: LD_VAR 0 4
22481: PPUSH
22482: CALL_OW 546
22486: ST_TO_ADDR
// if hex [ 1 ] then
22487: LD_VAR 0 15
22491: PUSH
22492: LD_INT 1
22494: ARRAY
22495: IFFALSE 22499
// exit ;
22497: GO 22940
// height := hex [ 2 ] ;
22499: LD_ADDR_VAR 0 13
22503: PUSH
22504: LD_VAR 0 15
22508: PUSH
22509: LD_INT 2
22511: ARRAY
22512: ST_TO_ADDR
// for i = 1 to hexes do
22513: LD_ADDR_VAR 0 7
22517: PUSH
22518: DOUBLE
22519: LD_INT 1
22521: DEC
22522: ST_TO_ADDR
22523: LD_VAR 0 12
22527: PUSH
22528: FOR_TO
22529: IFFALSE 22859
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22531: LD_VAR 0 12
22535: PUSH
22536: LD_VAR 0 7
22540: ARRAY
22541: PUSH
22542: LD_INT 1
22544: ARRAY
22545: PPUSH
22546: LD_VAR 0 12
22550: PUSH
22551: LD_VAR 0 7
22555: ARRAY
22556: PUSH
22557: LD_INT 2
22559: ARRAY
22560: PPUSH
22561: CALL_OW 488
22565: NOT
22566: PUSH
22567: LD_VAR 0 12
22571: PUSH
22572: LD_VAR 0 7
22576: ARRAY
22577: PUSH
22578: LD_INT 1
22580: ARRAY
22581: PPUSH
22582: LD_VAR 0 12
22586: PUSH
22587: LD_VAR 0 7
22591: ARRAY
22592: PUSH
22593: LD_INT 2
22595: ARRAY
22596: PPUSH
22597: CALL_OW 428
22601: PUSH
22602: LD_INT 0
22604: GREATER
22605: OR
22606: PUSH
22607: LD_VAR 0 12
22611: PUSH
22612: LD_VAR 0 7
22616: ARRAY
22617: PUSH
22618: LD_INT 1
22620: ARRAY
22621: PPUSH
22622: LD_VAR 0 12
22626: PUSH
22627: LD_VAR 0 7
22631: ARRAY
22632: PUSH
22633: LD_INT 2
22635: ARRAY
22636: PPUSH
22637: CALL_OW 351
22641: OR
22642: IFFALSE 22648
// exit ;
22644: POP
22645: POP
22646: GO 22940
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22648: LD_ADDR_VAR 0 8
22652: PUSH
22653: LD_VAR 0 12
22657: PUSH
22658: LD_VAR 0 7
22662: ARRAY
22663: PUSH
22664: LD_INT 1
22666: ARRAY
22667: PPUSH
22668: LD_VAR 0 12
22672: PUSH
22673: LD_VAR 0 7
22677: ARRAY
22678: PUSH
22679: LD_INT 2
22681: ARRAY
22682: PPUSH
22683: CALL_OW 546
22687: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22688: LD_VAR 0 8
22692: PUSH
22693: LD_INT 1
22695: ARRAY
22696: PUSH
22697: LD_VAR 0 8
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PUSH
22706: LD_VAR 0 13
22710: PUSH
22711: LD_INT 2
22713: PLUS
22714: GREATER
22715: OR
22716: PUSH
22717: LD_VAR 0 8
22721: PUSH
22722: LD_INT 2
22724: ARRAY
22725: PUSH
22726: LD_VAR 0 13
22730: PUSH
22731: LD_INT 2
22733: MINUS
22734: LESS
22735: OR
22736: PUSH
22737: LD_VAR 0 8
22741: PUSH
22742: LD_INT 3
22744: ARRAY
22745: PUSH
22746: LD_INT 0
22748: PUSH
22749: LD_INT 8
22751: PUSH
22752: LD_INT 9
22754: PUSH
22755: LD_INT 10
22757: PUSH
22758: LD_INT 11
22760: PUSH
22761: LD_INT 12
22763: PUSH
22764: LD_INT 13
22766: PUSH
22767: LD_INT 16
22769: PUSH
22770: LD_INT 17
22772: PUSH
22773: LD_INT 18
22775: PUSH
22776: LD_INT 19
22778: PUSH
22779: LD_INT 20
22781: PUSH
22782: LD_INT 21
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: IN
22800: NOT
22801: OR
22802: PUSH
22803: LD_VAR 0 8
22807: PUSH
22808: LD_INT 5
22810: ARRAY
22811: NOT
22812: OR
22813: PUSH
22814: LD_VAR 0 8
22818: PUSH
22819: LD_INT 6
22821: ARRAY
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 7
22831: PUSH
22832: LD_INT 9
22834: PUSH
22835: LD_INT 10
22837: PUSH
22838: LD_INT 11
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: IN
22849: NOT
22850: OR
22851: IFFALSE 22857
// exit ;
22853: POP
22854: POP
22855: GO 22940
// end ;
22857: GO 22528
22859: POP
22860: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22861: LD_VAR 0 9
22865: PPUSH
22866: LD_VAR 0 3
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: LD_INT 20
22878: PPUSH
22879: CALL 14892 0 4
22883: PUSH
22884: LD_INT 4
22886: ARRAY
22887: IFFALSE 22891
// exit ;
22889: GO 22940
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22891: LD_VAR 0 2
22895: PUSH
22896: LD_INT 29
22898: PUSH
22899: LD_INT 30
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: IN
22906: PUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_VAR 0 4
22916: PPUSH
22917: LD_VAR 0 9
22921: PPUSH
22922: CALL_OW 440
22926: NOT
22927: AND
22928: IFFALSE 22932
// exit ;
22930: GO 22940
// result := true ;
22932: LD_ADDR_VAR 0 6
22936: PUSH
22937: LD_INT 1
22939: ST_TO_ADDR
// end ;
22940: LD_VAR 0 6
22944: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22945: LD_INT 0
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
22961: PPUSH
22962: PPUSH
22963: PPUSH
22964: PPUSH
22965: PPUSH
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
22977: PPUSH
22978: PPUSH
22979: PPUSH
22980: PPUSH
22981: PPUSH
22982: PPUSH
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
22987: PPUSH
22988: PPUSH
22989: PPUSH
22990: PPUSH
22991: PPUSH
22992: PPUSH
22993: PPUSH
22994: PPUSH
22995: PPUSH
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
23002: PPUSH
23003: PPUSH
23004: PPUSH
// result = [ ] ;
23005: LD_ADDR_VAR 0 7
23009: PUSH
23010: EMPTY
23011: ST_TO_ADDR
// temp_list = [ ] ;
23012: LD_ADDR_VAR 0 9
23016: PUSH
23017: EMPTY
23018: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23019: LD_VAR 0 4
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 3
23035: PUSH
23036: LD_INT 4
23038: PUSH
23039: LD_INT 5
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: IN
23050: NOT
23051: PUSH
23052: LD_VAR 0 1
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: IN
23067: PUSH
23068: LD_VAR 0 5
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 2
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: IN
23087: NOT
23088: AND
23089: OR
23090: IFFALSE 23094
// exit ;
23092: GO 41485
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23094: LD_VAR 0 1
23098: PUSH
23099: LD_INT 6
23101: PUSH
23102: LD_INT 7
23104: PUSH
23105: LD_INT 8
23107: PUSH
23108: LD_INT 13
23110: PUSH
23111: LD_INT 12
23113: PUSH
23114: LD_INT 15
23116: PUSH
23117: LD_INT 11
23119: PUSH
23120: LD_INT 14
23122: PUSH
23123: LD_INT 10
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: IN
23137: IFFALSE 23147
// btype = b_lab ;
23139: LD_ADDR_VAR 0 1
23143: PUSH
23144: LD_INT 6
23146: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23147: LD_VAR 0 6
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: IN
23166: NOT
23167: PUSH
23168: LD_VAR 0 1
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: LD_INT 2
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: LD_INT 6
23187: PUSH
23188: LD_INT 36
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: LD_INT 5
23196: PUSH
23197: LD_INT 31
23199: PUSH
23200: LD_INT 32
23202: PUSH
23203: LD_INT 33
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: IN
23219: NOT
23220: PUSH
23221: LD_VAR 0 6
23225: PUSH
23226: LD_INT 1
23228: EQUAL
23229: AND
23230: OR
23231: PUSH
23232: LD_VAR 0 1
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: IN
23247: NOT
23248: PUSH
23249: LD_VAR 0 6
23253: PUSH
23254: LD_INT 2
23256: EQUAL
23257: AND
23258: OR
23259: IFFALSE 23269
// mode = 0 ;
23261: LD_ADDR_VAR 0 6
23265: PUSH
23266: LD_INT 0
23268: ST_TO_ADDR
// case mode of 0 :
23269: LD_VAR 0 6
23273: PUSH
23274: LD_INT 0
23276: DOUBLE
23277: EQUAL
23278: IFTRUE 23282
23280: GO 34735
23282: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23283: LD_ADDR_VAR 0 11
23287: PUSH
23288: LD_INT 0
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: LD_INT 1
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 1
23341: NEG
23342: PUSH
23343: LD_INT 0
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 1
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: NEG
23365: PUSH
23366: LD_INT 2
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 2
23379: NEG
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: LD_INT 1
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 3
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23476: LD_ADDR_VAR 0 12
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 1
23496: NEG
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: LD_INT 1
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: LD_INT 1
23549: NEG
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 1
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 2
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 3
23633: NEG
23634: PUSH
23635: LD_INT 0
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: NEG
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23672: LD_ADDR_VAR 0 13
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 0
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: LD_INT 0
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: LD_INT 1
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: LD_INT 2
23757: NEG
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 2
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 2
23819: NEG
23820: PUSH
23821: LD_INT 3
23823: NEG
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 3
23831: NEG
23832: PUSH
23833: LD_INT 2
23835: NEG
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 3
23843: NEG
23844: PUSH
23845: LD_INT 3
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23871: LD_ADDR_VAR 0 14
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 0
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: LD_INT 1
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 1
23952: NEG
23953: PUSH
23954: LD_INT 2
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: LD_INT 3
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: LD_INT 3
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: LD_INT 2
24043: NEG
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24067: LD_ADDR_VAR 0 15
24071: PUSH
24072: LD_INT 0
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: LD_INT 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 1
24125: NEG
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: NEG
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 2
24201: NEG
24202: PUSH
24203: LD_INT 1
24205: NEG
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 3
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24260: LD_ADDR_VAR 0 16
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 2
24383: NEG
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: NEG
24396: PUSH
24397: LD_INT 2
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 3
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 3
24417: PUSH
24418: LD_INT 3
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24453: LD_ADDR_VAR 0 17
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 2
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: LD_INT 2
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24683: LD_ADDR_VAR 0 18
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 1
24752: NEG
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 2
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 2
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 2
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 2
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: NEG
24860: PUSH
24861: LD_INT 0
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: NEG
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 2
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24913: LD_ADDR_VAR 0 19
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: LD_INT 2
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25143: LD_ADDR_VAR 0 20
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: LD_INT 2
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 2
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: NEG
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: LD_INT 2
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25373: LD_ADDR_VAR 0 21
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 0
25390: PUSH
25391: LD_INT 1
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 1
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 2
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: PUSH
25489: LD_INT 0
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 1
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: NEG
25550: PUSH
25551: LD_INT 0
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25603: LD_ADDR_VAR 0 22
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: NEG
25685: PUSH
25686: LD_INT 2
25688: NEG
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 0
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: LD_INT 2
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: NEG
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: NEG
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: LD_INT 2
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25833: LD_ADDR_VAR 0 23
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 0
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 1
25891: NEG
25892: PUSH
25893: LD_INT 0
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 1
25902: NEG
25903: PUSH
25904: LD_INT 1
25906: NEG
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 2
25918: NEG
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 2
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 2
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 3
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 2
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26113: LD_ADDR_VAR 0 24
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 3
26346: PUSH
26347: LD_INT 1
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 3
26356: PUSH
26357: LD_INT 2
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26389: LD_ADDR_VAR 0 25
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: LD_INT 1
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 2
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 3
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 3
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 3
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 3
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26663: LD_ADDR_VAR 0 26
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 3
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26939: LD_ADDR_VAR 0 27
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 0
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 2
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 3
27172: NEG
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 3
27184: NEG
27185: PUSH
27186: LD_INT 2
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27219: LD_ADDR_VAR 0 28
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 2
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: LD_INT 2
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 2
27406: NEG
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 2
27418: NEG
27419: PUSH
27420: LD_INT 2
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: LD_INT 3
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: LD_INT 3
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 3
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 3
27466: NEG
27467: PUSH
27468: LD_INT 2
27470: NEG
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27501: LD_ADDR_VAR 0 29
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: NEG
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 1
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 2
27667: NEG
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: LD_INT 3
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 3
27745: NEG
27746: PUSH
27747: LD_INT 2
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27780: LD_ADDR_VAR 0 30
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 1
27849: NEG
27850: PUSH
27851: LD_INT 1
27853: NEG
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 2
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: LD_INT 1
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: NEG
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 3
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 3
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: PUSH
28003: LD_INT 3
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 3
28023: NEG
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28058: LD_ADDR_VAR 0 31
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 0
28202: PUSH
28203: LD_INT 2
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: NEG
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: NEG
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 3
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 3
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 3
28301: NEG
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28336: LD_ADDR_VAR 0 32
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 1
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 1
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 2
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: LD_INT 3
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 3
28579: NEG
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28614: LD_ADDR_VAR 0 33
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 2
28804: NEG
28805: PUSH
28806: LD_INT 3
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 3
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 1
28847: NEG
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 3
28858: NEG
28859: PUSH
28860: LD_INT 2
28862: NEG
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28893: LD_ADDR_VAR 0 34
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 1
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: NEG
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: NEG
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: LD_INT 1
29064: NEG
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: LD_INT 2
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: NEG
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 3
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 2
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 3
29138: NEG
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29173: LD_ADDR_VAR 0 35
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: LD_INT 0
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29285: LD_ADDR_VAR 0 36
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 1
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: NEG
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: LD_INT 2
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29397: LD_ADDR_VAR 0 37
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 0
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 0
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 0
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29509: LD_ADDR_VAR 0 38
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 1
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 0
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29621: LD_ADDR_VAR 0 39
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: LD_INT 2
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29733: LD_ADDR_VAR 0 40
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 1
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29845: LD_ADDR_VAR 0 41
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 1
29903: NEG
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 2
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: PUSH
29950: LD_INT 0
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: PUSH
29970: LD_INT 2
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 1
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: NEG
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 2
30023: NEG
30024: PUSH
30025: LD_INT 2
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: LD_INT 3
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 3
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 3
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 2
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 3
30154: NEG
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30195: LD_ADDR_VAR 0 42
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 1
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: NEG
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 2
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: NEG
30374: PUSH
30375: LD_INT 2
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 2
30385: NEG
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 3
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 2
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 3
30492: NEG
30493: PUSH
30494: LD_INT 2
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 3
30504: NEG
30505: PUSH
30506: LD_INT 3
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30545: LD_ADDR_VAR 0 43
30549: PUSH
30550: LD_INT 0
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 0
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: LD_INT 1
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: LD_INT 2
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 2
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 3
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: PUSH
30780: LD_INT 0
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: LD_INT 3
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 1
30819: NEG
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 2
30830: NEG
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 3
30841: NEG
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30893: LD_ADDR_VAR 0 44
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 1
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 0
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 1
30962: NEG
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 2
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: NEG
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 2
31059: NEG
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: NEG
31084: PUSH
31085: LD_INT 3
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 3
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 3
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 3
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: NEG
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 3
31167: NEG
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 3
31178: NEG
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: NEG
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 3
31202: NEG
31203: PUSH
31204: LD_INT 3
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31243: LD_ADDR_VAR 0 45
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: LD_INT 1
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: NEG
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 3
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 3
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: LD_INT 3
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: PUSH
31500: LD_INT 3
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 2
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31593: LD_ADDR_VAR 0 46
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: LD_INT 0
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 1
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 1
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: NEG
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: NEG
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 3
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 3
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 3
31889: NEG
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 3
31900: NEG
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31941: LD_ADDR_VAR 0 47
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 0
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32092: LD_ADDR_VAR 0 48
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: LD_INT 0
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: LD_INT 2
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 1
32199: NEG
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32239: LD_ADDR_VAR 0 49
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32383: LD_ADDR_VAR 0 50
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 0
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: NEG
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: NEG
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32527: LD_ADDR_VAR 0 51
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 2
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 2
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: LD_INT 1
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32674: LD_ADDR_VAR 0 52
32678: PUSH
32679: LD_INT 0
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: NEG
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32825: LD_ADDR_VAR 0 53
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 2
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: LD_INT 1
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33055: LD_ADDR_VAR 0 54
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: NEG
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33285: LD_ADDR_VAR 0 55
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33515: LD_ADDR_VAR 0 56
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33745: LD_ADDR_VAR 0 57
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 0
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 1
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 2
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33975: LD_ADDR_VAR 0 58
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: NEG
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: LD_INT 2
34060: NEG
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 1
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34205: LD_ADDR_VAR 0 59
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34293: LD_ADDR_VAR 0 60
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34381: LD_ADDR_VAR 0 61
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: NEG
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34469: LD_ADDR_VAR 0 62
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34557: LD_ADDR_VAR 0 63
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34645: LD_ADDR_VAR 0 64
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: ST_TO_ADDR
// end ; 1 :
34733: GO 40630
34735: LD_INT 1
34737: DOUBLE
34738: EQUAL
34739: IFTRUE 34743
34741: GO 37366
34743: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34744: LD_ADDR_VAR 0 11
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34788: LD_ADDR_VAR 0 12
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34829: LD_ADDR_VAR 0 13
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 2
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34869: LD_ADDR_VAR 0 14
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34910: LD_ADDR_VAR 0 15
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 1
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 3
34928: NEG
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 3
34939: NEG
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34954: LD_ADDR_VAR 0 16
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: NEG
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 3
34985: NEG
34986: PUSH
34987: LD_INT 3
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35000: LD_ADDR_VAR 0 17
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 3
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: LD_INT 3
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: LIST
35043: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35044: LD_ADDR_VAR 0 18
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35085: LD_ADDR_VAR 0 19
35089: PUSH
35090: LD_INT 3
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35125: LD_ADDR_VAR 0 20
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 3
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35166: LD_ADDR_VAR 0 21
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 3
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: LIST
35209: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35210: LD_ADDR_VAR 0 22
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 3
35229: NEG
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35256: LD_ADDR_VAR 0 23
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: LD_INT 4
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: LD_INT 3
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: LIST
35299: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35300: LD_ADDR_VAR 0 24
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 4
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35341: LD_ADDR_VAR 0 25
35345: PUSH
35346: LD_INT 3
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 4
35358: PUSH
35359: LD_INT 3
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 3
35368: PUSH
35369: LD_INT 4
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35381: LD_ADDR_VAR 0 26
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: LD_INT 3
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: LD_INT 4
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35422: LD_ADDR_VAR 0 27
35426: PUSH
35427: LD_INT 3
35429: NEG
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 3
35440: NEG
35441: PUSH
35442: LD_INT 1
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 4
35451: NEG
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: LIST
35465: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35466: LD_ADDR_VAR 0 28
35470: PUSH
35471: LD_INT 3
35473: NEG
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 3
35485: NEG
35486: PUSH
35487: LD_INT 4
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 4
35497: NEG
35498: PUSH
35499: LD_INT 3
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35512: LD_ADDR_VAR 0 29
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 3
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: LD_INT 4
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 4
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 3
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 5
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 5
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 4
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: LD_INT 6
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 6
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 5
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35667: LD_ADDR_VAR 0 30
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 3
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 4
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 4
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 4
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 5
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 5
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 5
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 6
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 6
35788: PUSH
35789: LD_INT 1
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35810: LD_ADDR_VAR 0 31
35814: PUSH
35815: LD_INT 3
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: LD_INT 3
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 2
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 4
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 4
35857: PUSH
35858: LD_INT 4
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 3
35867: PUSH
35868: LD_INT 4
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 5
35877: PUSH
35878: LD_INT 4
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 5
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 4
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 6
35907: PUSH
35908: LD_INT 5
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 6
35917: PUSH
35918: LD_INT 6
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 5
35927: PUSH
35928: LD_INT 6
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35949: LD_ADDR_VAR 0 32
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 3
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 2
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 4
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 5
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: LD_INT 4
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 6
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 6
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 5
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36092: LD_ADDR_VAR 0 33
36096: PUSH
36097: LD_INT 2
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: NEG
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 3
36121: NEG
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 3
36133: NEG
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 4
36144: NEG
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 4
36155: NEG
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 4
36167: NEG
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 5
36178: NEG
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 5
36189: NEG
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 5
36201: NEG
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 6
36212: NEG
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 6
36223: NEG
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36247: LD_ADDR_VAR 0 34
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 3
36266: NEG
36267: PUSH
36268: LD_INT 2
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 3
36278: NEG
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 3
36290: NEG
36291: PUSH
36292: LD_INT 4
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 4
36302: NEG
36303: PUSH
36304: LD_INT 3
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 4
36314: NEG
36315: PUSH
36316: LD_INT 4
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 4
36326: NEG
36327: PUSH
36328: LD_INT 5
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 5
36338: NEG
36339: PUSH
36340: LD_INT 4
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 5
36350: NEG
36351: PUSH
36352: LD_INT 5
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 5
36362: NEG
36363: PUSH
36364: LD_INT 6
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 6
36374: NEG
36375: PUSH
36376: LD_INT 5
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 6
36386: NEG
36387: PUSH
36388: LD_INT 6
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36410: LD_ADDR_VAR 0 41
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 3
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 2
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36454: LD_ADDR_VAR 0 42
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36495: LD_ADDR_VAR 0 43
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 2
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: LD_INT 2
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 3
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36535: LD_ADDR_VAR 0 44
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: LIST
36575: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36576: LD_ADDR_VAR 0 45
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 3
36605: NEG
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36620: LD_ADDR_VAR 0 46
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 3
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36666: LD_ADDR_VAR 0 47
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: LD_INT 3
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 3
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36699: LD_ADDR_VAR 0 48
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36730: LD_ADDR_VAR 0 49
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36759: LD_ADDR_VAR 0 50
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: LD_INT 3
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36788: LD_ADDR_VAR 0 51
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 2
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36819: LD_ADDR_VAR 0 52
36823: PUSH
36824: LD_INT 3
36826: NEG
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 3
36838: NEG
36839: PUSH
36840: LD_INT 2
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36852: LD_ADDR_VAR 0 53
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 3
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 2
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36896: LD_ADDR_VAR 0 54
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36937: LD_ADDR_VAR 0 55
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: LD_INT 3
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36977: LD_ADDR_VAR 0 56
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: LD_INT 3
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37018: LD_ADDR_VAR 0 57
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 3
37036: NEG
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37062: LD_ADDR_VAR 0 58
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 3
37081: NEG
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 3
37093: NEG
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37108: LD_ADDR_VAR 0 59
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37152: LD_ADDR_VAR 0 60
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 2
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37193: LD_ADDR_VAR 0 61
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37233: LD_ADDR_VAR 0 62
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: LD_INT 2
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37274: LD_ADDR_VAR 0 63
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: NEG
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37318: LD_ADDR_VAR 0 64
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: LD_INT 2
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
// end ; 2 :
37364: GO 40630
37366: LD_INT 2
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37374
37372: GO 40629
37374: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37375: LD_ADDR_VAR 0 29
37379: PUSH
37380: LD_INT 4
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 5
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 5
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: PUSH
37486: LD_INT 2
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 4
37495: PUSH
37496: LD_INT 3
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 4
37505: PUSH
37506: LD_INT 4
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: LD_INT 4
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 3
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: LD_INT 2
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 4
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 4
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 3
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 4
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 5
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 5
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 3
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 5
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 3
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 3
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 4
37714: NEG
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 4
37725: NEG
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 4
37737: NEG
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 4
37760: NEG
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: LD_INT 5
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: LD_INT 4
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: NEG
37797: PUSH
37798: LD_INT 3
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 4
37808: NEG
37809: PUSH
37810: LD_INT 3
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 5
37820: NEG
37821: PUSH
37822: LD_INT 4
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 5
37832: NEG
37833: PUSH
37834: LD_INT 5
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 3
37844: NEG
37845: PUSH
37846: LD_INT 5
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: NEG
37857: PUSH
37858: LD_INT 3
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37913: LD_ADDR_VAR 0 30
37917: PUSH
37918: LD_INT 4
37920: PUSH
37921: LD_INT 4
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 4
37930: PUSH
37931: LD_INT 3
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 5
37940: PUSH
37941: LD_INT 4
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 5
37950: PUSH
37951: LD_INT 5
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 4
37960: PUSH
37961: LD_INT 5
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: LD_INT 3
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 5
37990: PUSH
37991: LD_INT 3
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: PUSH
38001: LD_INT 5
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 3
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 2
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 3
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 4
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 4
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 4
38103: NEG
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 4
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: NEG
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: NEG
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 4
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 5
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 5
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 5
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: NEG
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 3
38205: NEG
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 3
38217: NEG
38218: PUSH
38219: LD_INT 4
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: LD_INT 3
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 2
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 4
38265: NEG
38266: PUSH
38267: LD_INT 3
38269: NEG
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 4
38277: NEG
38278: PUSH
38279: LD_INT 4
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 4
38301: NEG
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 4
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 5
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 4
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 3
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 3
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 4
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 5
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 3
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: LD_INT 5
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38460: LD_ADDR_VAR 0 31
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 4
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 3
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 4
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 5
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 5
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 4
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: PUSH
38540: LD_INT 5
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 3
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: NEG
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 4
38616: NEG
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 4
38627: NEG
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 4
38639: NEG
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 2
38651: NEG
38652: PUSH
38653: LD_INT 2
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 4
38662: NEG
38663: PUSH
38664: LD_INT 4
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 4
38674: NEG
38675: PUSH
38676: LD_INT 5
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 3
38686: NEG
38687: PUSH
38688: LD_INT 4
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 3
38698: NEG
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 4
38710: NEG
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 5
38722: NEG
38723: PUSH
38724: LD_INT 4
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 5
38734: NEG
38735: PUSH
38736: LD_INT 5
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: LD_INT 5
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 5
38758: NEG
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 4
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 3
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: NEG
38838: PUSH
38839: LD_INT 4
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 4
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 4
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 4
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 5
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 3
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 5
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39010: LD_ADDR_VAR 0 32
39014: PUSH
39015: LD_INT 4
39017: NEG
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 4
39028: NEG
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 3
39051: NEG
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 4
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 5
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 5
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 5
39096: NEG
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 3
39108: NEG
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 3
39119: NEG
39120: PUSH
39121: LD_INT 3
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 3
39131: NEG
39132: PUSH
39133: LD_INT 4
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 2
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 4
39179: NEG
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 4
39191: NEG
39192: PUSH
39193: LD_INT 4
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 4
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 4
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 4
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 5
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 4
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 3
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 4
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 5
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: NEG
39318: PUSH
39319: LD_INT 5
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 3
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 3
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 4
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 4
39422: PUSH
39423: LD_INT 4
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 4
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 5
39442: PUSH
39443: LD_INT 4
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 5
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 4
39462: PUSH
39463: LD_INT 5
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 4
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 5
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 5
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39557: LD_ADDR_VAR 0 33
39561: PUSH
39562: LD_INT 4
39564: NEG
39565: PUSH
39566: LD_INT 4
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 4
39576: NEG
39577: PUSH
39578: LD_INT 5
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: NEG
39589: PUSH
39590: LD_INT 4
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 3
39600: NEG
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 4
39612: NEG
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 5
39624: NEG
39625: PUSH
39626: LD_INT 4
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 5
39636: NEG
39637: PUSH
39638: LD_INT 5
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 3
39648: NEG
39649: PUSH
39650: LD_INT 5
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 5
39660: NEG
39661: PUSH
39662: LD_INT 3
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 4
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 3
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 2
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 3
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 4
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 4
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 4
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 4
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 5
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 5
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 4
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 5
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 4
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: LD_INT 4
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 4
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 4
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 4
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 4
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 5
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 5
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 4
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: LD_INT 5
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40095: LD_ADDR_VAR 0 34
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 4
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 5
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 4
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 3
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 3
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 4
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 5
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 3
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 5
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 4
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 4
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 4
40287: PUSH
40288: LD_INT 2
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 4
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 4
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 5
40317: PUSH
40318: LD_INT 4
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 5
40327: PUSH
40328: LD_INT 5
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: PUSH
40338: LD_INT 5
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 4
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 5
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 3
40377: PUSH
40378: LD_INT 5
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 3
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 3
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 4
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 4
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 4
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 4
40480: NEG
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 4
40491: NEG
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 3
40503: NEG
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 4
40525: NEG
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 5
40536: NEG
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 5
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 5
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: ST_TO_ADDR
// end ; end ;
40627: GO 40630
40629: POP
// case btype of b_depot , b_warehouse :
40630: LD_VAR 0 1
40634: PUSH
40635: LD_INT 0
40637: DOUBLE
40638: EQUAL
40639: IFTRUE 40649
40641: LD_INT 1
40643: DOUBLE
40644: EQUAL
40645: IFTRUE 40649
40647: GO 40850
40649: POP
// case nation of nation_american :
40650: LD_VAR 0 5
40654: PUSH
40655: LD_INT 1
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40663
40661: GO 40719
40663: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40664: LD_ADDR_VAR 0 9
40668: PUSH
40669: LD_VAR 0 11
40673: PUSH
40674: LD_VAR 0 12
40678: PUSH
40679: LD_VAR 0 13
40683: PUSH
40684: LD_VAR 0 14
40688: PUSH
40689: LD_VAR 0 15
40693: PUSH
40694: LD_VAR 0 16
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: PUSH
40707: LD_VAR 0 4
40711: PUSH
40712: LD_INT 1
40714: PLUS
40715: ARRAY
40716: ST_TO_ADDR
40717: GO 40848
40719: LD_INT 2
40721: DOUBLE
40722: EQUAL
40723: IFTRUE 40727
40725: GO 40783
40727: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40728: LD_ADDR_VAR 0 9
40732: PUSH
40733: LD_VAR 0 17
40737: PUSH
40738: LD_VAR 0 18
40742: PUSH
40743: LD_VAR 0 19
40747: PUSH
40748: LD_VAR 0 20
40752: PUSH
40753: LD_VAR 0 21
40757: PUSH
40758: LD_VAR 0 22
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: PUSH
40771: LD_VAR 0 4
40775: PUSH
40776: LD_INT 1
40778: PLUS
40779: ARRAY
40780: ST_TO_ADDR
40781: GO 40848
40783: LD_INT 3
40785: DOUBLE
40786: EQUAL
40787: IFTRUE 40791
40789: GO 40847
40791: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40792: LD_ADDR_VAR 0 9
40796: PUSH
40797: LD_VAR 0 23
40801: PUSH
40802: LD_VAR 0 24
40806: PUSH
40807: LD_VAR 0 25
40811: PUSH
40812: LD_VAR 0 26
40816: PUSH
40817: LD_VAR 0 27
40821: PUSH
40822: LD_VAR 0 28
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: PUSH
40835: LD_VAR 0 4
40839: PUSH
40840: LD_INT 1
40842: PLUS
40843: ARRAY
40844: ST_TO_ADDR
40845: GO 40848
40847: POP
40848: GO 41403
40850: LD_INT 2
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40864
40856: LD_INT 3
40858: DOUBLE
40859: EQUAL
40860: IFTRUE 40864
40862: GO 40920
40864: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40865: LD_ADDR_VAR 0 9
40869: PUSH
40870: LD_VAR 0 29
40874: PUSH
40875: LD_VAR 0 30
40879: PUSH
40880: LD_VAR 0 31
40884: PUSH
40885: LD_VAR 0 32
40889: PUSH
40890: LD_VAR 0 33
40894: PUSH
40895: LD_VAR 0 34
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: PUSH
40908: LD_VAR 0 4
40912: PUSH
40913: LD_INT 1
40915: PLUS
40916: ARRAY
40917: ST_TO_ADDR
40918: GO 41403
40920: LD_INT 16
40922: DOUBLE
40923: EQUAL
40924: IFTRUE 40982
40926: LD_INT 17
40928: DOUBLE
40929: EQUAL
40930: IFTRUE 40982
40932: LD_INT 18
40934: DOUBLE
40935: EQUAL
40936: IFTRUE 40982
40938: LD_INT 19
40940: DOUBLE
40941: EQUAL
40942: IFTRUE 40982
40944: LD_INT 22
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 40982
40950: LD_INT 20
40952: DOUBLE
40953: EQUAL
40954: IFTRUE 40982
40956: LD_INT 21
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40982
40962: LD_INT 23
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40982
40968: LD_INT 24
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40982
40974: LD_INT 25
40976: DOUBLE
40977: EQUAL
40978: IFTRUE 40982
40980: GO 41038
40982: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40983: LD_ADDR_VAR 0 9
40987: PUSH
40988: LD_VAR 0 35
40992: PUSH
40993: LD_VAR 0 36
40997: PUSH
40998: LD_VAR 0 37
41002: PUSH
41003: LD_VAR 0 38
41007: PUSH
41008: LD_VAR 0 39
41012: PUSH
41013: LD_VAR 0 40
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: PUSH
41026: LD_VAR 0 4
41030: PUSH
41031: LD_INT 1
41033: PLUS
41034: ARRAY
41035: ST_TO_ADDR
41036: GO 41403
41038: LD_INT 6
41040: DOUBLE
41041: EQUAL
41042: IFTRUE 41094
41044: LD_INT 7
41046: DOUBLE
41047: EQUAL
41048: IFTRUE 41094
41050: LD_INT 8
41052: DOUBLE
41053: EQUAL
41054: IFTRUE 41094
41056: LD_INT 13
41058: DOUBLE
41059: EQUAL
41060: IFTRUE 41094
41062: LD_INT 12
41064: DOUBLE
41065: EQUAL
41066: IFTRUE 41094
41068: LD_INT 15
41070: DOUBLE
41071: EQUAL
41072: IFTRUE 41094
41074: LD_INT 11
41076: DOUBLE
41077: EQUAL
41078: IFTRUE 41094
41080: LD_INT 14
41082: DOUBLE
41083: EQUAL
41084: IFTRUE 41094
41086: LD_INT 10
41088: DOUBLE
41089: EQUAL
41090: IFTRUE 41094
41092: GO 41150
41094: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41095: LD_ADDR_VAR 0 9
41099: PUSH
41100: LD_VAR 0 41
41104: PUSH
41105: LD_VAR 0 42
41109: PUSH
41110: LD_VAR 0 43
41114: PUSH
41115: LD_VAR 0 44
41119: PUSH
41120: LD_VAR 0 45
41124: PUSH
41125: LD_VAR 0 46
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: PUSH
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 1
41145: PLUS
41146: ARRAY
41147: ST_TO_ADDR
41148: GO 41403
41150: LD_INT 36
41152: DOUBLE
41153: EQUAL
41154: IFTRUE 41158
41156: GO 41214
41158: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41159: LD_ADDR_VAR 0 9
41163: PUSH
41164: LD_VAR 0 47
41168: PUSH
41169: LD_VAR 0 48
41173: PUSH
41174: LD_VAR 0 49
41178: PUSH
41179: LD_VAR 0 50
41183: PUSH
41184: LD_VAR 0 51
41188: PUSH
41189: LD_VAR 0 52
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: PUSH
41202: LD_VAR 0 4
41206: PUSH
41207: LD_INT 1
41209: PLUS
41210: ARRAY
41211: ST_TO_ADDR
41212: GO 41403
41214: LD_INT 4
41216: DOUBLE
41217: EQUAL
41218: IFTRUE 41240
41220: LD_INT 5
41222: DOUBLE
41223: EQUAL
41224: IFTRUE 41240
41226: LD_INT 34
41228: DOUBLE
41229: EQUAL
41230: IFTRUE 41240
41232: LD_INT 37
41234: DOUBLE
41235: EQUAL
41236: IFTRUE 41240
41238: GO 41296
41240: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41241: LD_ADDR_VAR 0 9
41245: PUSH
41246: LD_VAR 0 53
41250: PUSH
41251: LD_VAR 0 54
41255: PUSH
41256: LD_VAR 0 55
41260: PUSH
41261: LD_VAR 0 56
41265: PUSH
41266: LD_VAR 0 57
41270: PUSH
41271: LD_VAR 0 58
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: PUSH
41284: LD_VAR 0 4
41288: PUSH
41289: LD_INT 1
41291: PLUS
41292: ARRAY
41293: ST_TO_ADDR
41294: GO 41403
41296: LD_INT 31
41298: DOUBLE
41299: EQUAL
41300: IFTRUE 41346
41302: LD_INT 32
41304: DOUBLE
41305: EQUAL
41306: IFTRUE 41346
41308: LD_INT 33
41310: DOUBLE
41311: EQUAL
41312: IFTRUE 41346
41314: LD_INT 27
41316: DOUBLE
41317: EQUAL
41318: IFTRUE 41346
41320: LD_INT 26
41322: DOUBLE
41323: EQUAL
41324: IFTRUE 41346
41326: LD_INT 28
41328: DOUBLE
41329: EQUAL
41330: IFTRUE 41346
41332: LD_INT 29
41334: DOUBLE
41335: EQUAL
41336: IFTRUE 41346
41338: LD_INT 30
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41346
41344: GO 41402
41346: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41347: LD_ADDR_VAR 0 9
41351: PUSH
41352: LD_VAR 0 59
41356: PUSH
41357: LD_VAR 0 60
41361: PUSH
41362: LD_VAR 0 61
41366: PUSH
41367: LD_VAR 0 62
41371: PUSH
41372: LD_VAR 0 63
41376: PUSH
41377: LD_VAR 0 64
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: PUSH
41390: LD_VAR 0 4
41394: PUSH
41395: LD_INT 1
41397: PLUS
41398: ARRAY
41399: ST_TO_ADDR
41400: GO 41403
41402: POP
// temp_list2 = [ ] ;
41403: LD_ADDR_VAR 0 10
41407: PUSH
41408: EMPTY
41409: ST_TO_ADDR
// for i in temp_list do
41410: LD_ADDR_VAR 0 8
41414: PUSH
41415: LD_VAR 0 9
41419: PUSH
41420: FOR_IN
41421: IFFALSE 41473
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41423: LD_ADDR_VAR 0 10
41427: PUSH
41428: LD_VAR 0 10
41432: PUSH
41433: LD_VAR 0 8
41437: PUSH
41438: LD_INT 1
41440: ARRAY
41441: PUSH
41442: LD_VAR 0 2
41446: PLUS
41447: PUSH
41448: LD_VAR 0 8
41452: PUSH
41453: LD_INT 2
41455: ARRAY
41456: PUSH
41457: LD_VAR 0 3
41461: PLUS
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: ADD
41470: ST_TO_ADDR
41471: GO 41420
41473: POP
41474: POP
// result = temp_list2 ;
41475: LD_ADDR_VAR 0 7
41479: PUSH
41480: LD_VAR 0 10
41484: ST_TO_ADDR
// end ;
41485: LD_VAR 0 7
41489: RET
// export function EnemyInRange ( unit , dist ) ; begin
41490: LD_INT 0
41492: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41493: LD_ADDR_VAR 0 3
41497: PUSH
41498: LD_VAR 0 1
41502: PPUSH
41503: CALL_OW 255
41507: PPUSH
41508: LD_VAR 0 1
41512: PPUSH
41513: CALL_OW 250
41517: PPUSH
41518: LD_VAR 0 1
41522: PPUSH
41523: CALL_OW 251
41527: PPUSH
41528: LD_VAR 0 2
41532: PPUSH
41533: CALL 14892 0 4
41537: PUSH
41538: LD_INT 4
41540: ARRAY
41541: ST_TO_ADDR
// end ;
41542: LD_VAR 0 3
41546: RET
// export function PlayerSeeMe ( unit ) ; begin
41547: LD_INT 0
41549: PPUSH
// result := See ( your_side , unit ) ;
41550: LD_ADDR_VAR 0 2
41554: PUSH
41555: LD_OWVAR 2
41559: PPUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 292
41569: ST_TO_ADDR
// end ;
41570: LD_VAR 0 2
41574: RET
// export function ReverseDir ( unit ) ; begin
41575: LD_INT 0
41577: PPUSH
// if not unit then
41578: LD_VAR 0 1
41582: NOT
41583: IFFALSE 41587
// exit ;
41585: GO 41610
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41587: LD_ADDR_VAR 0 2
41591: PUSH
41592: LD_VAR 0 1
41596: PPUSH
41597: CALL_OW 254
41601: PUSH
41602: LD_INT 3
41604: PLUS
41605: PUSH
41606: LD_INT 6
41608: MOD
41609: ST_TO_ADDR
// end ;
41610: LD_VAR 0 2
41614: RET
// export function ReverseArray ( array ) ; var i ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
// if not array then
41619: LD_VAR 0 1
41623: NOT
41624: IFFALSE 41628
// exit ;
41626: GO 41683
// result := [ ] ;
41628: LD_ADDR_VAR 0 2
41632: PUSH
41633: EMPTY
41634: ST_TO_ADDR
// for i := array downto 1 do
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: DOUBLE
41641: LD_VAR 0 1
41645: INC
41646: ST_TO_ADDR
41647: LD_INT 1
41649: PUSH
41650: FOR_DOWNTO
41651: IFFALSE 41681
// result := Join ( result , array [ i ] ) ;
41653: LD_ADDR_VAR 0 2
41657: PUSH
41658: LD_VAR 0 2
41662: PPUSH
41663: LD_VAR 0 1
41667: PUSH
41668: LD_VAR 0 3
41672: ARRAY
41673: PPUSH
41674: CALL 46327 0 2
41678: ST_TO_ADDR
41679: GO 41650
41681: POP
41682: POP
// end ;
41683: LD_VAR 0 2
41687: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41688: LD_INT 0
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
// if not unit or not hexes then
41696: LD_VAR 0 1
41700: NOT
41701: PUSH
41702: LD_VAR 0 2
41706: NOT
41707: OR
41708: IFFALSE 41712
// exit ;
41710: GO 41835
// dist := 9999 ;
41712: LD_ADDR_VAR 0 5
41716: PUSH
41717: LD_INT 9999
41719: ST_TO_ADDR
// for i = 1 to hexes do
41720: LD_ADDR_VAR 0 4
41724: PUSH
41725: DOUBLE
41726: LD_INT 1
41728: DEC
41729: ST_TO_ADDR
41730: LD_VAR 0 2
41734: PUSH
41735: FOR_TO
41736: IFFALSE 41823
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41738: LD_ADDR_VAR 0 6
41742: PUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: LD_VAR 0 2
41752: PUSH
41753: LD_VAR 0 4
41757: ARRAY
41758: PUSH
41759: LD_INT 1
41761: ARRAY
41762: PPUSH
41763: LD_VAR 0 2
41767: PUSH
41768: LD_VAR 0 4
41772: ARRAY
41773: PUSH
41774: LD_INT 2
41776: ARRAY
41777: PPUSH
41778: CALL_OW 297
41782: ST_TO_ADDR
// if tdist < dist then
41783: LD_VAR 0 6
41787: PUSH
41788: LD_VAR 0 5
41792: LESS
41793: IFFALSE 41821
// begin hex := hexes [ i ] ;
41795: LD_ADDR_VAR 0 8
41799: PUSH
41800: LD_VAR 0 2
41804: PUSH
41805: LD_VAR 0 4
41809: ARRAY
41810: ST_TO_ADDR
// dist := tdist ;
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: LD_VAR 0 6
41820: ST_TO_ADDR
// end ; end ;
41821: GO 41735
41823: POP
41824: POP
// result := hex ;
41825: LD_ADDR_VAR 0 3
41829: PUSH
41830: LD_VAR 0 8
41834: ST_TO_ADDR
// end ;
41835: LD_VAR 0 3
41839: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41840: LD_INT 0
41842: PPUSH
41843: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41844: LD_VAR 0 1
41848: NOT
41849: PUSH
41850: LD_VAR 0 1
41854: PUSH
41855: LD_INT 21
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 23
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PPUSH
41879: CALL_OW 69
41883: IN
41884: NOT
41885: OR
41886: IFFALSE 41890
// exit ;
41888: GO 41937
// for i = 1 to 3 do
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: DOUBLE
41896: LD_INT 1
41898: DEC
41899: ST_TO_ADDR
41900: LD_INT 3
41902: PUSH
41903: FOR_TO
41904: IFFALSE 41935
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41906: LD_VAR 0 1
41910: PPUSH
41911: CALL_OW 250
41915: PPUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 251
41925: PPUSH
41926: LD_INT 1
41928: PPUSH
41929: CALL_OW 453
41933: GO 41903
41935: POP
41936: POP
// end ;
41937: LD_VAR 0 2
41941: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41942: LD_INT 0
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41950: LD_VAR 0 1
41954: NOT
41955: PUSH
41956: LD_VAR 0 2
41960: NOT
41961: OR
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: CALL_OW 314
41972: OR
41973: IFFALSE 41977
// exit ;
41975: GO 42444
// if GetLives ( i ) < 250 then
41977: LD_VAR 0 4
41981: PPUSH
41982: CALL_OW 256
41986: PUSH
41987: LD_INT 250
41989: LESS
41990: IFFALSE 42003
// begin ComAutodestruct ( i ) ;
41992: LD_VAR 0 4
41996: PPUSH
41997: CALL 41840 0 1
// exit ;
42001: GO 42444
// end ; x := GetX ( enemy_unit ) ;
42003: LD_ADDR_VAR 0 7
42007: PUSH
42008: LD_VAR 0 2
42012: PPUSH
42013: CALL_OW 250
42017: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42018: LD_ADDR_VAR 0 8
42022: PUSH
42023: LD_VAR 0 2
42027: PPUSH
42028: CALL_OW 251
42032: ST_TO_ADDR
// if not x or not y then
42033: LD_VAR 0 7
42037: NOT
42038: PUSH
42039: LD_VAR 0 8
42043: NOT
42044: OR
42045: IFFALSE 42049
// exit ;
42047: GO 42444
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42049: LD_ADDR_VAR 0 6
42053: PUSH
42054: LD_VAR 0 7
42058: PPUSH
42059: LD_INT 0
42061: PPUSH
42062: LD_INT 4
42064: PPUSH
42065: CALL_OW 272
42069: PUSH
42070: LD_VAR 0 8
42074: PPUSH
42075: LD_INT 0
42077: PPUSH
42078: LD_INT 4
42080: PPUSH
42081: CALL_OW 273
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_VAR 0 7
42094: PPUSH
42095: LD_INT 1
42097: PPUSH
42098: LD_INT 4
42100: PPUSH
42101: CALL_OW 272
42105: PUSH
42106: LD_VAR 0 8
42110: PPUSH
42111: LD_INT 1
42113: PPUSH
42114: LD_INT 4
42116: PPUSH
42117: CALL_OW 273
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_VAR 0 7
42130: PPUSH
42131: LD_INT 2
42133: PPUSH
42134: LD_INT 4
42136: PPUSH
42137: CALL_OW 272
42141: PUSH
42142: LD_VAR 0 8
42146: PPUSH
42147: LD_INT 2
42149: PPUSH
42150: LD_INT 4
42152: PPUSH
42153: CALL_OW 273
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_VAR 0 7
42166: PPUSH
42167: LD_INT 3
42169: PPUSH
42170: LD_INT 4
42172: PPUSH
42173: CALL_OW 272
42177: PUSH
42178: LD_VAR 0 8
42182: PPUSH
42183: LD_INT 3
42185: PPUSH
42186: LD_INT 4
42188: PPUSH
42189: CALL_OW 273
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_VAR 0 7
42202: PPUSH
42203: LD_INT 4
42205: PPUSH
42206: LD_INT 4
42208: PPUSH
42209: CALL_OW 272
42213: PUSH
42214: LD_VAR 0 8
42218: PPUSH
42219: LD_INT 4
42221: PPUSH
42222: LD_INT 4
42224: PPUSH
42225: CALL_OW 273
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_VAR 0 7
42238: PPUSH
42239: LD_INT 5
42241: PPUSH
42242: LD_INT 4
42244: PPUSH
42245: CALL_OW 272
42249: PUSH
42250: LD_VAR 0 8
42254: PPUSH
42255: LD_INT 5
42257: PPUSH
42258: LD_INT 4
42260: PPUSH
42261: CALL_OW 273
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: ST_TO_ADDR
// for i = tmp downto 1 do
42278: LD_ADDR_VAR 0 4
42282: PUSH
42283: DOUBLE
42284: LD_VAR 0 6
42288: INC
42289: ST_TO_ADDR
42290: LD_INT 1
42292: PUSH
42293: FOR_DOWNTO
42294: IFFALSE 42395
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42296: LD_VAR 0 6
42300: PUSH
42301: LD_VAR 0 4
42305: ARRAY
42306: PUSH
42307: LD_INT 1
42309: ARRAY
42310: PPUSH
42311: LD_VAR 0 6
42315: PUSH
42316: LD_VAR 0 4
42320: ARRAY
42321: PUSH
42322: LD_INT 2
42324: ARRAY
42325: PPUSH
42326: CALL_OW 488
42330: NOT
42331: PUSH
42332: LD_VAR 0 6
42336: PUSH
42337: LD_VAR 0 4
42341: ARRAY
42342: PUSH
42343: LD_INT 1
42345: ARRAY
42346: PPUSH
42347: LD_VAR 0 6
42351: PUSH
42352: LD_VAR 0 4
42356: ARRAY
42357: PUSH
42358: LD_INT 2
42360: ARRAY
42361: PPUSH
42362: CALL_OW 428
42366: PUSH
42367: LD_INT 0
42369: NONEQUAL
42370: OR
42371: IFFALSE 42393
// tmp := Delete ( tmp , i ) ;
42373: LD_ADDR_VAR 0 6
42377: PUSH
42378: LD_VAR 0 6
42382: PPUSH
42383: LD_VAR 0 4
42387: PPUSH
42388: CALL_OW 3
42392: ST_TO_ADDR
42393: GO 42293
42395: POP
42396: POP
// j := GetClosestHex ( unit , tmp ) ;
42397: LD_ADDR_VAR 0 5
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: LD_VAR 0 6
42411: PPUSH
42412: CALL 41688 0 2
42416: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42417: LD_VAR 0 1
42421: PPUSH
42422: LD_VAR 0 5
42426: PUSH
42427: LD_INT 1
42429: ARRAY
42430: PPUSH
42431: LD_VAR 0 5
42435: PUSH
42436: LD_INT 2
42438: ARRAY
42439: PPUSH
42440: CALL_OW 111
// end ;
42444: LD_VAR 0 3
42448: RET
// export function PrepareApemanSoldier ( ) ; begin
42449: LD_INT 0
42451: PPUSH
// uc_nation := 0 ;
42452: LD_ADDR_OWVAR 21
42456: PUSH
42457: LD_INT 0
42459: ST_TO_ADDR
// hc_sex := sex_male ;
42460: LD_ADDR_OWVAR 27
42464: PUSH
42465: LD_INT 1
42467: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42468: LD_ADDR_OWVAR 28
42472: PUSH
42473: LD_INT 15
42475: ST_TO_ADDR
// hc_gallery :=  ;
42476: LD_ADDR_OWVAR 33
42480: PUSH
42481: LD_STRING 
42483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42484: LD_ADDR_OWVAR 31
42488: PUSH
42489: LD_INT 0
42491: PPUSH
42492: LD_INT 3
42494: PPUSH
42495: CALL_OW 12
42499: PUSH
42500: LD_INT 0
42502: PPUSH
42503: LD_INT 3
42505: PPUSH
42506: CALL_OW 12
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// end ;
42523: LD_VAR 0 1
42527: RET
// export function PrepareApemanEngineer ( ) ; begin
42528: LD_INT 0
42530: PPUSH
// uc_nation := 0 ;
42531: LD_ADDR_OWVAR 21
42535: PUSH
42536: LD_INT 0
42538: ST_TO_ADDR
// hc_sex := sex_male ;
42539: LD_ADDR_OWVAR 27
42543: PUSH
42544: LD_INT 1
42546: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42547: LD_ADDR_OWVAR 28
42551: PUSH
42552: LD_INT 16
42554: ST_TO_ADDR
// hc_gallery :=  ;
42555: LD_ADDR_OWVAR 33
42559: PUSH
42560: LD_STRING 
42562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42563: LD_ADDR_OWVAR 31
42567: PUSH
42568: LD_INT 0
42570: PPUSH
42571: LD_INT 3
42573: PPUSH
42574: CALL_OW 12
42578: PUSH
42579: LD_INT 0
42581: PPUSH
42582: LD_INT 3
42584: PPUSH
42585: CALL_OW 12
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// end ;
42602: LD_VAR 0 1
42606: RET
// export function PrepareApeman ( agressivity ) ; begin
42607: LD_INT 0
42609: PPUSH
// uc_side := 0 ;
42610: LD_ADDR_OWVAR 20
42614: PUSH
42615: LD_INT 0
42617: ST_TO_ADDR
// uc_nation := 0 ;
42618: LD_ADDR_OWVAR 21
42622: PUSH
42623: LD_INT 0
42625: ST_TO_ADDR
// hc_sex := sex_male ;
42626: LD_ADDR_OWVAR 27
42630: PUSH
42631: LD_INT 1
42633: ST_TO_ADDR
// hc_class := class_apeman ;
42634: LD_ADDR_OWVAR 28
42638: PUSH
42639: LD_INT 12
42641: ST_TO_ADDR
// hc_gallery :=  ;
42642: LD_ADDR_OWVAR 33
42646: PUSH
42647: LD_STRING 
42649: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42650: LD_ADDR_OWVAR 35
42654: PUSH
42655: LD_VAR 0 1
42659: NEG
42660: PPUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: CALL_OW 12
42670: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42671: LD_ADDR_OWVAR 31
42675: PUSH
42676: LD_INT 0
42678: PPUSH
42679: LD_INT 3
42681: PPUSH
42682: CALL_OW 12
42686: PUSH
42687: LD_INT 0
42689: PPUSH
42690: LD_INT 3
42692: PPUSH
42693: CALL_OW 12
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// end ;
42710: LD_VAR 0 2
42714: RET
// export function PrepareTiger ( agressivity ) ; begin
42715: LD_INT 0
42717: PPUSH
// uc_side := 0 ;
42718: LD_ADDR_OWVAR 20
42722: PUSH
42723: LD_INT 0
42725: ST_TO_ADDR
// uc_nation := 0 ;
42726: LD_ADDR_OWVAR 21
42730: PUSH
42731: LD_INT 0
42733: ST_TO_ADDR
// hc_class := class_tiger ;
42734: LD_ADDR_OWVAR 28
42738: PUSH
42739: LD_INT 14
42741: ST_TO_ADDR
// hc_gallery :=  ;
42742: LD_ADDR_OWVAR 33
42746: PUSH
42747: LD_STRING 
42749: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42750: LD_ADDR_OWVAR 35
42754: PUSH
42755: LD_VAR 0 1
42759: NEG
42760: PPUSH
42761: LD_VAR 0 1
42765: PPUSH
42766: CALL_OW 12
42770: ST_TO_ADDR
// end ;
42771: LD_VAR 0 2
42775: RET
// export function PrepareEnchidna ( ) ; begin
42776: LD_INT 0
42778: PPUSH
// uc_side := 0 ;
42779: LD_ADDR_OWVAR 20
42783: PUSH
42784: LD_INT 0
42786: ST_TO_ADDR
// uc_nation := 0 ;
42787: LD_ADDR_OWVAR 21
42791: PUSH
42792: LD_INT 0
42794: ST_TO_ADDR
// hc_class := class_baggie ;
42795: LD_ADDR_OWVAR 28
42799: PUSH
42800: LD_INT 13
42802: ST_TO_ADDR
// hc_gallery :=  ;
42803: LD_ADDR_OWVAR 33
42807: PUSH
42808: LD_STRING 
42810: ST_TO_ADDR
// end ;
42811: LD_VAR 0 1
42815: RET
// export function PrepareFrog ( ) ; begin
42816: LD_INT 0
42818: PPUSH
// uc_side := 0 ;
42819: LD_ADDR_OWVAR 20
42823: PUSH
42824: LD_INT 0
42826: ST_TO_ADDR
// uc_nation := 0 ;
42827: LD_ADDR_OWVAR 21
42831: PUSH
42832: LD_INT 0
42834: ST_TO_ADDR
// hc_class := class_frog ;
42835: LD_ADDR_OWVAR 28
42839: PUSH
42840: LD_INT 19
42842: ST_TO_ADDR
// hc_gallery :=  ;
42843: LD_ADDR_OWVAR 33
42847: PUSH
42848: LD_STRING 
42850: ST_TO_ADDR
// end ;
42851: LD_VAR 0 1
42855: RET
// export function PrepareFish ( ) ; begin
42856: LD_INT 0
42858: PPUSH
// uc_side := 0 ;
42859: LD_ADDR_OWVAR 20
42863: PUSH
42864: LD_INT 0
42866: ST_TO_ADDR
// uc_nation := 0 ;
42867: LD_ADDR_OWVAR 21
42871: PUSH
42872: LD_INT 0
42874: ST_TO_ADDR
// hc_class := class_fish ;
42875: LD_ADDR_OWVAR 28
42879: PUSH
42880: LD_INT 20
42882: ST_TO_ADDR
// hc_gallery :=  ;
42883: LD_ADDR_OWVAR 33
42887: PUSH
42888: LD_STRING 
42890: ST_TO_ADDR
// end ;
42891: LD_VAR 0 1
42895: RET
// export function PrepareBird ( ) ; begin
42896: LD_INT 0
42898: PPUSH
// uc_side := 0 ;
42899: LD_ADDR_OWVAR 20
42903: PUSH
42904: LD_INT 0
42906: ST_TO_ADDR
// uc_nation := 0 ;
42907: LD_ADDR_OWVAR 21
42911: PUSH
42912: LD_INT 0
42914: ST_TO_ADDR
// hc_class := class_phororhacos ;
42915: LD_ADDR_OWVAR 28
42919: PUSH
42920: LD_INT 18
42922: ST_TO_ADDR
// hc_gallery :=  ;
42923: LD_ADDR_OWVAR 33
42927: PUSH
42928: LD_STRING 
42930: ST_TO_ADDR
// end ;
42931: LD_VAR 0 1
42935: RET
// export function PrepareHorse ( ) ; begin
42936: LD_INT 0
42938: PPUSH
// uc_side := 0 ;
42939: LD_ADDR_OWVAR 20
42943: PUSH
42944: LD_INT 0
42946: ST_TO_ADDR
// uc_nation := 0 ;
42947: LD_ADDR_OWVAR 21
42951: PUSH
42952: LD_INT 0
42954: ST_TO_ADDR
// hc_class := class_horse ;
42955: LD_ADDR_OWVAR 28
42959: PUSH
42960: LD_INT 21
42962: ST_TO_ADDR
// hc_gallery :=  ;
42963: LD_ADDR_OWVAR 33
42967: PUSH
42968: LD_STRING 
42970: ST_TO_ADDR
// end ;
42971: LD_VAR 0 1
42975: RET
// export function PrepareMastodont ( ) ; begin
42976: LD_INT 0
42978: PPUSH
// uc_side := 0 ;
42979: LD_ADDR_OWVAR 20
42983: PUSH
42984: LD_INT 0
42986: ST_TO_ADDR
// uc_nation := 0 ;
42987: LD_ADDR_OWVAR 21
42991: PUSH
42992: LD_INT 0
42994: ST_TO_ADDR
// vc_chassis := class_mastodont ;
42995: LD_ADDR_OWVAR 37
42999: PUSH
43000: LD_INT 31
43002: ST_TO_ADDR
// vc_control := control_rider ;
43003: LD_ADDR_OWVAR 38
43007: PUSH
43008: LD_INT 4
43010: ST_TO_ADDR
// end ;
43011: LD_VAR 0 1
43015: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
43020: PPUSH
// uc_side = 0 ;
43021: LD_ADDR_OWVAR 20
43025: PUSH
43026: LD_INT 0
43028: ST_TO_ADDR
// uc_nation = 0 ;
43029: LD_ADDR_OWVAR 21
43033: PUSH
43034: LD_INT 0
43036: ST_TO_ADDR
// InitHc_All ( ) ;
43037: CALL_OW 584
// InitVc ;
43041: CALL_OW 20
// if mastodonts then
43045: LD_VAR 0 6
43049: IFFALSE 43116
// for i = 1 to mastodonts do
43051: LD_ADDR_VAR 0 11
43055: PUSH
43056: DOUBLE
43057: LD_INT 1
43059: DEC
43060: ST_TO_ADDR
43061: LD_VAR 0 6
43065: PUSH
43066: FOR_TO
43067: IFFALSE 43114
// begin vc_chassis := 31 ;
43069: LD_ADDR_OWVAR 37
43073: PUSH
43074: LD_INT 31
43076: ST_TO_ADDR
// vc_control := control_rider ;
43077: LD_ADDR_OWVAR 38
43081: PUSH
43082: LD_INT 4
43084: ST_TO_ADDR
// animal := CreateVehicle ;
43085: LD_ADDR_VAR 0 12
43089: PUSH
43090: CALL_OW 45
43094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43095: LD_VAR 0 12
43099: PPUSH
43100: LD_VAR 0 8
43104: PPUSH
43105: LD_INT 0
43107: PPUSH
43108: CALL 45244 0 3
// end ;
43112: GO 43066
43114: POP
43115: POP
// if horses then
43116: LD_VAR 0 5
43120: IFFALSE 43187
// for i = 1 to horses do
43122: LD_ADDR_VAR 0 11
43126: PUSH
43127: DOUBLE
43128: LD_INT 1
43130: DEC
43131: ST_TO_ADDR
43132: LD_VAR 0 5
43136: PUSH
43137: FOR_TO
43138: IFFALSE 43185
// begin hc_class := 21 ;
43140: LD_ADDR_OWVAR 28
43144: PUSH
43145: LD_INT 21
43147: ST_TO_ADDR
// hc_gallery :=  ;
43148: LD_ADDR_OWVAR 33
43152: PUSH
43153: LD_STRING 
43155: ST_TO_ADDR
// animal := CreateHuman ;
43156: LD_ADDR_VAR 0 12
43160: PUSH
43161: CALL_OW 44
43165: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43166: LD_VAR 0 12
43170: PPUSH
43171: LD_VAR 0 8
43175: PPUSH
43176: LD_INT 0
43178: PPUSH
43179: CALL 45244 0 3
// end ;
43183: GO 43137
43185: POP
43186: POP
// if birds then
43187: LD_VAR 0 1
43191: IFFALSE 43258
// for i = 1 to birds do
43193: LD_ADDR_VAR 0 11
43197: PUSH
43198: DOUBLE
43199: LD_INT 1
43201: DEC
43202: ST_TO_ADDR
43203: LD_VAR 0 1
43207: PUSH
43208: FOR_TO
43209: IFFALSE 43256
// begin hc_class = 18 ;
43211: LD_ADDR_OWVAR 28
43215: PUSH
43216: LD_INT 18
43218: ST_TO_ADDR
// hc_gallery =  ;
43219: LD_ADDR_OWVAR 33
43223: PUSH
43224: LD_STRING 
43226: ST_TO_ADDR
// animal := CreateHuman ;
43227: LD_ADDR_VAR 0 12
43231: PUSH
43232: CALL_OW 44
43236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43237: LD_VAR 0 12
43241: PPUSH
43242: LD_VAR 0 8
43246: PPUSH
43247: LD_INT 0
43249: PPUSH
43250: CALL 45244 0 3
// end ;
43254: GO 43208
43256: POP
43257: POP
// if tigers then
43258: LD_VAR 0 2
43262: IFFALSE 43346
// for i = 1 to tigers do
43264: LD_ADDR_VAR 0 11
43268: PUSH
43269: DOUBLE
43270: LD_INT 1
43272: DEC
43273: ST_TO_ADDR
43274: LD_VAR 0 2
43278: PUSH
43279: FOR_TO
43280: IFFALSE 43344
// begin hc_class = class_tiger ;
43282: LD_ADDR_OWVAR 28
43286: PUSH
43287: LD_INT 14
43289: ST_TO_ADDR
// hc_gallery =  ;
43290: LD_ADDR_OWVAR 33
43294: PUSH
43295: LD_STRING 
43297: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43298: LD_ADDR_OWVAR 35
43302: PUSH
43303: LD_INT 7
43305: NEG
43306: PPUSH
43307: LD_INT 7
43309: PPUSH
43310: CALL_OW 12
43314: ST_TO_ADDR
// animal := CreateHuman ;
43315: LD_ADDR_VAR 0 12
43319: PUSH
43320: CALL_OW 44
43324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43325: LD_VAR 0 12
43329: PPUSH
43330: LD_VAR 0 8
43334: PPUSH
43335: LD_INT 0
43337: PPUSH
43338: CALL 45244 0 3
// end ;
43342: GO 43279
43344: POP
43345: POP
// if apemans then
43346: LD_VAR 0 3
43350: IFFALSE 43473
// for i = 1 to apemans do
43352: LD_ADDR_VAR 0 11
43356: PUSH
43357: DOUBLE
43358: LD_INT 1
43360: DEC
43361: ST_TO_ADDR
43362: LD_VAR 0 3
43366: PUSH
43367: FOR_TO
43368: IFFALSE 43471
// begin hc_class = class_apeman ;
43370: LD_ADDR_OWVAR 28
43374: PUSH
43375: LD_INT 12
43377: ST_TO_ADDR
// hc_gallery =  ;
43378: LD_ADDR_OWVAR 33
43382: PUSH
43383: LD_STRING 
43385: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43386: LD_ADDR_OWVAR 35
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PPUSH
43395: LD_INT 2
43397: PPUSH
43398: CALL_OW 12
43402: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43403: LD_ADDR_OWVAR 31
43407: PUSH
43408: LD_INT 1
43410: PPUSH
43411: LD_INT 3
43413: PPUSH
43414: CALL_OW 12
43418: PUSH
43419: LD_INT 1
43421: PPUSH
43422: LD_INT 3
43424: PPUSH
43425: CALL_OW 12
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: ST_TO_ADDR
// animal := CreateHuman ;
43442: LD_ADDR_VAR 0 12
43446: PUSH
43447: CALL_OW 44
43451: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43452: LD_VAR 0 12
43456: PPUSH
43457: LD_VAR 0 8
43461: PPUSH
43462: LD_INT 0
43464: PPUSH
43465: CALL 45244 0 3
// end ;
43469: GO 43367
43471: POP
43472: POP
// if enchidnas then
43473: LD_VAR 0 4
43477: IFFALSE 43544
// for i = 1 to enchidnas do
43479: LD_ADDR_VAR 0 11
43483: PUSH
43484: DOUBLE
43485: LD_INT 1
43487: DEC
43488: ST_TO_ADDR
43489: LD_VAR 0 4
43493: PUSH
43494: FOR_TO
43495: IFFALSE 43542
// begin hc_class = 13 ;
43497: LD_ADDR_OWVAR 28
43501: PUSH
43502: LD_INT 13
43504: ST_TO_ADDR
// hc_gallery =  ;
43505: LD_ADDR_OWVAR 33
43509: PUSH
43510: LD_STRING 
43512: ST_TO_ADDR
// animal := CreateHuman ;
43513: LD_ADDR_VAR 0 12
43517: PUSH
43518: CALL_OW 44
43522: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43523: LD_VAR 0 12
43527: PPUSH
43528: LD_VAR 0 8
43532: PPUSH
43533: LD_INT 0
43535: PPUSH
43536: CALL 45244 0 3
// end ;
43540: GO 43494
43542: POP
43543: POP
// if fishes then
43544: LD_VAR 0 7
43548: IFFALSE 43615
// for i = 1 to fishes do
43550: LD_ADDR_VAR 0 11
43554: PUSH
43555: DOUBLE
43556: LD_INT 1
43558: DEC
43559: ST_TO_ADDR
43560: LD_VAR 0 7
43564: PUSH
43565: FOR_TO
43566: IFFALSE 43613
// begin hc_class = 20 ;
43568: LD_ADDR_OWVAR 28
43572: PUSH
43573: LD_INT 20
43575: ST_TO_ADDR
// hc_gallery =  ;
43576: LD_ADDR_OWVAR 33
43580: PUSH
43581: LD_STRING 
43583: ST_TO_ADDR
// animal := CreateHuman ;
43584: LD_ADDR_VAR 0 12
43588: PUSH
43589: CALL_OW 44
43593: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43594: LD_VAR 0 12
43598: PPUSH
43599: LD_VAR 0 9
43603: PPUSH
43604: LD_INT 0
43606: PPUSH
43607: CALL 45244 0 3
// end ;
43611: GO 43565
43613: POP
43614: POP
// end ;
43615: LD_VAR 0 10
43619: RET
// export function WantHeal ( sci , unit ) ; begin
43620: LD_INT 0
43622: PPUSH
// if GetTaskList ( sci ) > 0 then
43623: LD_VAR 0 1
43627: PPUSH
43628: CALL_OW 437
43632: PUSH
43633: LD_INT 0
43635: GREATER
43636: IFFALSE 43706
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43638: LD_VAR 0 1
43642: PPUSH
43643: CALL_OW 437
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PUSH
43652: LD_INT 1
43654: ARRAY
43655: PUSH
43656: LD_STRING l
43658: EQUAL
43659: PUSH
43660: LD_VAR 0 1
43664: PPUSH
43665: CALL_OW 437
43669: PUSH
43670: LD_INT 1
43672: ARRAY
43673: PUSH
43674: LD_INT 4
43676: ARRAY
43677: PUSH
43678: LD_VAR 0 2
43682: EQUAL
43683: AND
43684: IFFALSE 43696
// result := true else
43686: LD_ADDR_VAR 0 3
43690: PUSH
43691: LD_INT 1
43693: ST_TO_ADDR
43694: GO 43704
// result := false ;
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_INT 0
43703: ST_TO_ADDR
// end else
43704: GO 43714
// result := false ;
43706: LD_ADDR_VAR 0 3
43710: PUSH
43711: LD_INT 0
43713: ST_TO_ADDR
// end ;
43714: LD_VAR 0 3
43718: RET
// export function HealTarget ( sci ) ; begin
43719: LD_INT 0
43721: PPUSH
// if not sci then
43722: LD_VAR 0 1
43726: NOT
43727: IFFALSE 43731
// exit ;
43729: GO 43796
// result := 0 ;
43731: LD_ADDR_VAR 0 2
43735: PUSH
43736: LD_INT 0
43738: ST_TO_ADDR
// if GetTaskList ( sci ) then
43739: LD_VAR 0 1
43743: PPUSH
43744: CALL_OW 437
43748: IFFALSE 43796
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43750: LD_VAR 0 1
43754: PPUSH
43755: CALL_OW 437
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PUSH
43764: LD_INT 1
43766: ARRAY
43767: PUSH
43768: LD_STRING l
43770: EQUAL
43771: IFFALSE 43796
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43773: LD_ADDR_VAR 0 2
43777: PUSH
43778: LD_VAR 0 1
43782: PPUSH
43783: CALL_OW 437
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PUSH
43792: LD_INT 4
43794: ARRAY
43795: ST_TO_ADDR
// end ;
43796: LD_VAR 0 2
43800: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43801: LD_INT 0
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
// if not base_units then
43807: LD_VAR 0 1
43811: NOT
43812: IFFALSE 43816
// exit ;
43814: GO 43903
// result := false ;
43816: LD_ADDR_VAR 0 2
43820: PUSH
43821: LD_INT 0
43823: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43824: LD_ADDR_VAR 0 5
43828: PUSH
43829: LD_VAR 0 1
43833: PPUSH
43834: LD_INT 21
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PPUSH
43844: CALL_OW 72
43848: ST_TO_ADDR
// if not tmp then
43849: LD_VAR 0 5
43853: NOT
43854: IFFALSE 43858
// exit ;
43856: GO 43903
// for i in tmp do
43858: LD_ADDR_VAR 0 3
43862: PUSH
43863: LD_VAR 0 5
43867: PUSH
43868: FOR_IN
43869: IFFALSE 43901
// begin result := EnemyInRange ( i , 22 ) ;
43871: LD_ADDR_VAR 0 2
43875: PUSH
43876: LD_VAR 0 3
43880: PPUSH
43881: LD_INT 22
43883: PPUSH
43884: CALL 41490 0 2
43888: ST_TO_ADDR
// if result then
43889: LD_VAR 0 2
43893: IFFALSE 43899
// exit ;
43895: POP
43896: POP
43897: GO 43903
// end ;
43899: GO 43868
43901: POP
43902: POP
// end ;
43903: LD_VAR 0 2
43907: RET
// export function FilterByTag ( units , tag ) ; begin
43908: LD_INT 0
43910: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_VAR 0 1
43920: PPUSH
43921: LD_INT 120
43923: PUSH
43924: LD_VAR 0 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PPUSH
43933: CALL_OW 72
43937: ST_TO_ADDR
// end ;
43938: LD_VAR 0 3
43942: RET
// export function IsDriver ( un ) ; begin
43943: LD_INT 0
43945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43946: LD_ADDR_VAR 0 2
43950: PUSH
43951: LD_VAR 0 1
43955: PUSH
43956: LD_INT 55
43958: PUSH
43959: EMPTY
43960: LIST
43961: PPUSH
43962: CALL_OW 69
43966: IN
43967: ST_TO_ADDR
// end ;
43968: LD_VAR 0 2
43972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43973: LD_INT 0
43975: PPUSH
43976: PPUSH
// list := [ ] ;
43977: LD_ADDR_VAR 0 5
43981: PUSH
43982: EMPTY
43983: ST_TO_ADDR
// case d of 0 :
43984: LD_VAR 0 3
43988: PUSH
43989: LD_INT 0
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44130
43997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43998: LD_ADDR_VAR 0 5
44002: PUSH
44003: LD_VAR 0 1
44007: PUSH
44008: LD_INT 4
44010: MINUS
44011: PUSH
44012: LD_VAR 0 2
44016: PUSH
44017: LD_INT 4
44019: MINUS
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: LIST
44028: PUSH
44029: LD_VAR 0 1
44033: PUSH
44034: LD_INT 3
44036: MINUS
44037: PUSH
44038: LD_VAR 0 2
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: PUSH
44051: LD_VAR 0 1
44055: PUSH
44056: LD_INT 4
44058: PLUS
44059: PUSH
44060: LD_VAR 0 2
44064: PUSH
44065: LD_INT 4
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: PUSH
44073: LD_VAR 0 1
44077: PUSH
44078: LD_INT 3
44080: PLUS
44081: PUSH
44082: LD_VAR 0 2
44086: PUSH
44087: LD_INT 3
44089: PLUS
44090: PUSH
44091: LD_INT 5
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: PUSH
44099: LD_VAR 0 1
44103: PUSH
44104: LD_VAR 0 2
44108: PUSH
44109: LD_INT 4
44111: PLUS
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: ST_TO_ADDR
// end ; 1 :
44128: GO 44828
44130: LD_INT 1
44132: DOUBLE
44133: EQUAL
44134: IFTRUE 44138
44136: GO 44271
44138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44139: LD_ADDR_VAR 0 5
44143: PUSH
44144: LD_VAR 0 1
44148: PUSH
44149: LD_VAR 0 2
44153: PUSH
44154: LD_INT 4
44156: MINUS
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: PUSH
44166: LD_VAR 0 1
44170: PUSH
44171: LD_INT 3
44173: MINUS
44174: PUSH
44175: LD_VAR 0 2
44179: PUSH
44180: LD_INT 3
44182: MINUS
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: PUSH
44192: LD_VAR 0 1
44196: PUSH
44197: LD_INT 4
44199: MINUS
44200: PUSH
44201: LD_VAR 0 2
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: PUSH
44214: LD_VAR 0 1
44218: PUSH
44219: LD_VAR 0 2
44223: PUSH
44224: LD_INT 3
44226: PLUS
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: LIST
44235: PUSH
44236: LD_VAR 0 1
44240: PUSH
44241: LD_INT 4
44243: PLUS
44244: PUSH
44245: LD_VAR 0 2
44249: PUSH
44250: LD_INT 4
44252: PLUS
44253: PUSH
44254: LD_INT 5
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
// end ; 2 :
44269: GO 44828
44271: LD_INT 2
44273: DOUBLE
44274: EQUAL
44275: IFTRUE 44279
44277: GO 44408
44279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44280: LD_ADDR_VAR 0 5
44284: PUSH
44285: LD_VAR 0 1
44289: PUSH
44290: LD_VAR 0 2
44294: PUSH
44295: LD_INT 3
44297: MINUS
44298: PUSH
44299: LD_INT 3
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: LIST
44306: PUSH
44307: LD_VAR 0 1
44311: PUSH
44312: LD_INT 4
44314: PLUS
44315: PUSH
44316: LD_VAR 0 2
44320: PUSH
44321: LD_INT 4
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: PUSH
44329: LD_VAR 0 1
44333: PUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_INT 4
44341: PLUS
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: LD_VAR 0 1
44355: PUSH
44356: LD_INT 3
44358: MINUS
44359: PUSH
44360: LD_VAR 0 2
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: PUSH
44373: LD_VAR 0 1
44377: PUSH
44378: LD_INT 4
44380: MINUS
44381: PUSH
44382: LD_VAR 0 2
44386: PUSH
44387: LD_INT 4
44389: MINUS
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// end ; 3 :
44406: GO 44828
44408: LD_INT 3
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44416
44414: GO 44549
44416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44417: LD_ADDR_VAR 0 5
44421: PUSH
44422: LD_VAR 0 1
44426: PUSH
44427: LD_INT 3
44429: PLUS
44430: PUSH
44431: LD_VAR 0 2
44435: PUSH
44436: LD_INT 4
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: LIST
44443: PUSH
44444: LD_VAR 0 1
44448: PUSH
44449: LD_INT 4
44451: PLUS
44452: PUSH
44453: LD_VAR 0 2
44457: PUSH
44458: LD_INT 4
44460: PLUS
44461: PUSH
44462: LD_INT 5
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: LIST
44469: PUSH
44470: LD_VAR 0 1
44474: PUSH
44475: LD_INT 4
44477: MINUS
44478: PUSH
44479: LD_VAR 0 2
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: LD_VAR 0 1
44496: PUSH
44497: LD_VAR 0 2
44501: PUSH
44502: LD_INT 4
44504: MINUS
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: LIST
44513: PUSH
44514: LD_VAR 0 1
44518: PUSH
44519: LD_INT 3
44521: MINUS
44522: PUSH
44523: LD_VAR 0 2
44527: PUSH
44528: LD_INT 3
44530: MINUS
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
// end ; 4 :
44547: GO 44828
44549: LD_INT 4
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44690
44557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44558: LD_ADDR_VAR 0 5
44562: PUSH
44563: LD_VAR 0 1
44567: PUSH
44568: LD_VAR 0 2
44572: PUSH
44573: LD_INT 4
44575: PLUS
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: PUSH
44585: LD_VAR 0 1
44589: PUSH
44590: LD_INT 3
44592: PLUS
44593: PUSH
44594: LD_VAR 0 2
44598: PUSH
44599: LD_INT 3
44601: PLUS
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: PUSH
44611: LD_VAR 0 1
44615: PUSH
44616: LD_INT 4
44618: PLUS
44619: PUSH
44620: LD_VAR 0 2
44624: PUSH
44625: LD_INT 4
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: LIST
44632: PUSH
44633: LD_VAR 0 1
44637: PUSH
44638: LD_VAR 0 2
44642: PUSH
44643: LD_INT 3
44645: MINUS
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: PUSH
44655: LD_VAR 0 1
44659: PUSH
44660: LD_INT 4
44662: MINUS
44663: PUSH
44664: LD_VAR 0 2
44668: PUSH
44669: LD_INT 4
44671: MINUS
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// end ; 5 :
44688: GO 44828
44690: LD_INT 5
44692: DOUBLE
44693: EQUAL
44694: IFTRUE 44698
44696: GO 44827
44698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44699: LD_ADDR_VAR 0 5
44703: PUSH
44704: LD_VAR 0 1
44708: PUSH
44709: LD_INT 4
44711: MINUS
44712: PUSH
44713: LD_VAR 0 2
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: LIST
44725: PUSH
44726: LD_VAR 0 1
44730: PUSH
44731: LD_VAR 0 2
44735: PUSH
44736: LD_INT 4
44738: MINUS
44739: PUSH
44740: LD_INT 3
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: LIST
44747: PUSH
44748: LD_VAR 0 1
44752: PUSH
44753: LD_INT 4
44755: PLUS
44756: PUSH
44757: LD_VAR 0 2
44761: PUSH
44762: LD_INT 4
44764: PLUS
44765: PUSH
44766: LD_INT 5
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: PUSH
44774: LD_VAR 0 1
44778: PUSH
44779: LD_INT 3
44781: PLUS
44782: PUSH
44783: LD_VAR 0 2
44787: PUSH
44788: LD_INT 4
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: LIST
44795: PUSH
44796: LD_VAR 0 1
44800: PUSH
44801: LD_VAR 0 2
44805: PUSH
44806: LD_INT 3
44808: PLUS
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// end ; end ;
44825: GO 44828
44827: POP
// result := list ;
44828: LD_ADDR_VAR 0 4
44832: PUSH
44833: LD_VAR 0 5
44837: ST_TO_ADDR
// end ;
44838: LD_VAR 0 4
44842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44843: LD_INT 0
44845: PPUSH
44846: PPUSH
44847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44848: LD_VAR 0 1
44852: NOT
44853: PUSH
44854: LD_VAR 0 2
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: LD_INT 4
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: IN
44877: NOT
44878: OR
44879: IFFALSE 44883
// exit ;
44881: GO 44966
// tmp := [ ] ;
44883: LD_ADDR_VAR 0 5
44887: PUSH
44888: EMPTY
44889: ST_TO_ADDR
// for i in units do
44890: LD_ADDR_VAR 0 4
44894: PUSH
44895: LD_VAR 0 1
44899: PUSH
44900: FOR_IN
44901: IFFALSE 44935
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
44903: LD_ADDR_VAR 0 5
44907: PUSH
44908: LD_VAR 0 5
44912: PPUSH
44913: LD_VAR 0 4
44917: PPUSH
44918: LD_VAR 0 2
44922: PPUSH
44923: CALL_OW 259
44927: PPUSH
44928: CALL 46327 0 2
44932: ST_TO_ADDR
44933: GO 44900
44935: POP
44936: POP
// if not tmp then
44937: LD_VAR 0 5
44941: NOT
44942: IFFALSE 44946
// exit ;
44944: GO 44966
// result := SortListByListDesc ( units , tmp ) ;
44946: LD_ADDR_VAR 0 3
44950: PUSH
44951: LD_VAR 0 1
44955: PPUSH
44956: LD_VAR 0 5
44960: PPUSH
44961: CALL_OW 77
44965: ST_TO_ADDR
// end ;
44966: LD_VAR 0 3
44970: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44971: LD_INT 0
44973: PPUSH
44974: PPUSH
44975: PPUSH
// result := false ;
44976: LD_ADDR_VAR 0 3
44980: PUSH
44981: LD_INT 0
44983: ST_TO_ADDR
// if not building then
44984: LD_VAR 0 2
44988: NOT
44989: IFFALSE 44993
// exit ;
44991: GO 45131
// x := GetX ( building ) ;
44993: LD_ADDR_VAR 0 4
44997: PUSH
44998: LD_VAR 0 2
45002: PPUSH
45003: CALL_OW 250
45007: ST_TO_ADDR
// y := GetY ( building ) ;
45008: LD_ADDR_VAR 0 5
45012: PUSH
45013: LD_VAR 0 2
45017: PPUSH
45018: CALL_OW 251
45022: ST_TO_ADDR
// if not x or not y then
45023: LD_VAR 0 4
45027: NOT
45028: PUSH
45029: LD_VAR 0 5
45033: NOT
45034: OR
45035: IFFALSE 45039
// exit ;
45037: GO 45131
// if GetTaskList ( unit ) then
45039: LD_VAR 0 1
45043: PPUSH
45044: CALL_OW 437
45048: IFFALSE 45131
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45050: LD_STRING e
45052: PUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 437
45062: PUSH
45063: LD_INT 1
45065: ARRAY
45066: PUSH
45067: LD_INT 1
45069: ARRAY
45070: EQUAL
45071: PUSH
45072: LD_VAR 0 4
45076: PUSH
45077: LD_VAR 0 1
45081: PPUSH
45082: CALL_OW 437
45086: PUSH
45087: LD_INT 1
45089: ARRAY
45090: PUSH
45091: LD_INT 2
45093: ARRAY
45094: EQUAL
45095: AND
45096: PUSH
45097: LD_VAR 0 5
45101: PUSH
45102: LD_VAR 0 1
45106: PPUSH
45107: CALL_OW 437
45111: PUSH
45112: LD_INT 1
45114: ARRAY
45115: PUSH
45116: LD_INT 3
45118: ARRAY
45119: EQUAL
45120: AND
45121: IFFALSE 45131
// result := true end ;
45123: LD_ADDR_VAR 0 3
45127: PUSH
45128: LD_INT 1
45130: ST_TO_ADDR
// end ;
45131: LD_VAR 0 3
45135: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45136: LD_INT 0
45138: PPUSH
// result := false ;
45139: LD_ADDR_VAR 0 4
45143: PUSH
45144: LD_INT 0
45146: ST_TO_ADDR
// if GetTaskList ( unit ) then
45147: LD_VAR 0 1
45151: PPUSH
45152: CALL_OW 437
45156: IFFALSE 45239
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45158: LD_STRING M
45160: PUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 437
45170: PUSH
45171: LD_INT 1
45173: ARRAY
45174: PUSH
45175: LD_INT 1
45177: ARRAY
45178: EQUAL
45179: PUSH
45180: LD_VAR 0 2
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 437
45194: PUSH
45195: LD_INT 1
45197: ARRAY
45198: PUSH
45199: LD_INT 2
45201: ARRAY
45202: EQUAL
45203: AND
45204: PUSH
45205: LD_VAR 0 3
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 437
45219: PUSH
45220: LD_INT 1
45222: ARRAY
45223: PUSH
45224: LD_INT 3
45226: ARRAY
45227: EQUAL
45228: AND
45229: IFFALSE 45239
// result := true ;
45231: LD_ADDR_VAR 0 4
45235: PUSH
45236: LD_INT 1
45238: ST_TO_ADDR
// end ; end ;
45239: LD_VAR 0 4
45243: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45244: LD_INT 0
45246: PPUSH
45247: PPUSH
45248: PPUSH
45249: PPUSH
// if not unit or not area then
45250: LD_VAR 0 1
45254: NOT
45255: PUSH
45256: LD_VAR 0 2
45260: NOT
45261: OR
45262: IFFALSE 45266
// exit ;
45264: GO 45430
// tmp := AreaToList ( area , i ) ;
45266: LD_ADDR_VAR 0 6
45270: PUSH
45271: LD_VAR 0 2
45275: PPUSH
45276: LD_VAR 0 5
45280: PPUSH
45281: CALL_OW 517
45285: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45286: LD_ADDR_VAR 0 5
45290: PUSH
45291: DOUBLE
45292: LD_INT 1
45294: DEC
45295: ST_TO_ADDR
45296: LD_VAR 0 6
45300: PUSH
45301: LD_INT 1
45303: ARRAY
45304: PUSH
45305: FOR_TO
45306: IFFALSE 45428
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45308: LD_ADDR_VAR 0 7
45312: PUSH
45313: LD_VAR 0 6
45317: PUSH
45318: LD_INT 1
45320: ARRAY
45321: PUSH
45322: LD_VAR 0 5
45326: ARRAY
45327: PUSH
45328: LD_VAR 0 6
45332: PUSH
45333: LD_INT 2
45335: ARRAY
45336: PUSH
45337: LD_VAR 0 5
45341: ARRAY
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45347: LD_VAR 0 7
45351: PUSH
45352: LD_INT 1
45354: ARRAY
45355: PPUSH
45356: LD_VAR 0 7
45360: PUSH
45361: LD_INT 2
45363: ARRAY
45364: PPUSH
45365: CALL_OW 428
45369: PUSH
45370: LD_INT 0
45372: EQUAL
45373: IFFALSE 45426
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45375: LD_VAR 0 1
45379: PPUSH
45380: LD_VAR 0 7
45384: PUSH
45385: LD_INT 1
45387: ARRAY
45388: PPUSH
45389: LD_VAR 0 7
45393: PUSH
45394: LD_INT 2
45396: ARRAY
45397: PPUSH
45398: LD_VAR 0 3
45402: PPUSH
45403: CALL_OW 48
// result := IsPlaced ( unit ) ;
45407: LD_ADDR_VAR 0 4
45411: PUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: CALL_OW 305
45421: ST_TO_ADDR
// exit ;
45422: POP
45423: POP
45424: GO 45430
// end ; end ;
45426: GO 45305
45428: POP
45429: POP
// end ;
45430: LD_VAR 0 4
45434: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45435: LD_INT 0
45437: PPUSH
45438: PPUSH
45439: PPUSH
// if not side or side > 8 then
45440: LD_VAR 0 1
45444: NOT
45445: PUSH
45446: LD_VAR 0 1
45450: PUSH
45451: LD_INT 8
45453: GREATER
45454: OR
45455: IFFALSE 45459
// exit ;
45457: GO 45646
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45459: LD_ADDR_VAR 0 4
45463: PUSH
45464: LD_INT 22
45466: PUSH
45467: LD_VAR 0 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 21
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PPUSH
45490: CALL_OW 69
45494: ST_TO_ADDR
// if not tmp then
45495: LD_VAR 0 4
45499: NOT
45500: IFFALSE 45504
// exit ;
45502: GO 45646
// enable_addtolog := true ;
45504: LD_ADDR_OWVAR 81
45508: PUSH
45509: LD_INT 1
45511: ST_TO_ADDR
// AddToLog ( [ ) ;
45512: LD_STRING [
45514: PPUSH
45515: CALL_OW 561
// for i in tmp do
45519: LD_ADDR_VAR 0 3
45523: PUSH
45524: LD_VAR 0 4
45528: PUSH
45529: FOR_IN
45530: IFFALSE 45637
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45532: LD_STRING [
45534: PUSH
45535: LD_VAR 0 3
45539: PPUSH
45540: CALL_OW 266
45544: STR
45545: PUSH
45546: LD_STRING , 
45548: STR
45549: PUSH
45550: LD_VAR 0 3
45554: PPUSH
45555: CALL_OW 250
45559: STR
45560: PUSH
45561: LD_STRING , 
45563: STR
45564: PUSH
45565: LD_VAR 0 3
45569: PPUSH
45570: CALL_OW 251
45574: STR
45575: PUSH
45576: LD_STRING , 
45578: STR
45579: PUSH
45580: LD_VAR 0 3
45584: PPUSH
45585: CALL_OW 254
45589: STR
45590: PUSH
45591: LD_STRING , 
45593: STR
45594: PUSH
45595: LD_VAR 0 3
45599: PPUSH
45600: LD_INT 1
45602: PPUSH
45603: CALL_OW 268
45607: STR
45608: PUSH
45609: LD_STRING , 
45611: STR
45612: PUSH
45613: LD_VAR 0 3
45617: PPUSH
45618: LD_INT 2
45620: PPUSH
45621: CALL_OW 268
45625: STR
45626: PUSH
45627: LD_STRING ],
45629: STR
45630: PPUSH
45631: CALL_OW 561
// end ;
45635: GO 45529
45637: POP
45638: POP
// AddToLog ( ]; ) ;
45639: LD_STRING ];
45641: PPUSH
45642: CALL_OW 561
// end ;
45646: LD_VAR 0 2
45650: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45651: LD_INT 0
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
// if not area or not rate or not max then
45658: LD_VAR 0 1
45662: NOT
45663: PUSH
45664: LD_VAR 0 2
45668: NOT
45669: OR
45670: PUSH
45671: LD_VAR 0 4
45675: NOT
45676: OR
45677: IFFALSE 45681
// exit ;
45679: GO 45870
// while 1 do
45681: LD_INT 1
45683: IFFALSE 45870
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45685: LD_ADDR_VAR 0 9
45689: PUSH
45690: LD_VAR 0 1
45694: PPUSH
45695: LD_INT 1
45697: PPUSH
45698: CALL_OW 287
45702: PUSH
45703: LD_INT 10
45705: MUL
45706: ST_TO_ADDR
// r := rate / 10 ;
45707: LD_ADDR_VAR 0 7
45711: PUSH
45712: LD_VAR 0 2
45716: PUSH
45717: LD_INT 10
45719: DIVREAL
45720: ST_TO_ADDR
// time := 1 1$00 ;
45721: LD_ADDR_VAR 0 8
45725: PUSH
45726: LD_INT 2100
45728: ST_TO_ADDR
// if amount < min then
45729: LD_VAR 0 9
45733: PUSH
45734: LD_VAR 0 3
45738: LESS
45739: IFFALSE 45757
// r := r * 2 else
45741: LD_ADDR_VAR 0 7
45745: PUSH
45746: LD_VAR 0 7
45750: PUSH
45751: LD_INT 2
45753: MUL
45754: ST_TO_ADDR
45755: GO 45783
// if amount > max then
45757: LD_VAR 0 9
45761: PUSH
45762: LD_VAR 0 4
45766: GREATER
45767: IFFALSE 45783
// r := r / 2 ;
45769: LD_ADDR_VAR 0 7
45773: PUSH
45774: LD_VAR 0 7
45778: PUSH
45779: LD_INT 2
45781: DIVREAL
45782: ST_TO_ADDR
// time := time / r ;
45783: LD_ADDR_VAR 0 8
45787: PUSH
45788: LD_VAR 0 8
45792: PUSH
45793: LD_VAR 0 7
45797: DIVREAL
45798: ST_TO_ADDR
// if time < 0 then
45799: LD_VAR 0 8
45803: PUSH
45804: LD_INT 0
45806: LESS
45807: IFFALSE 45824
// time := time * - 1 ;
45809: LD_ADDR_VAR 0 8
45813: PUSH
45814: LD_VAR 0 8
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: MUL
45823: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45824: LD_VAR 0 8
45828: PUSH
45829: LD_INT 35
45831: PPUSH
45832: LD_INT 875
45834: PPUSH
45835: CALL_OW 12
45839: PLUS
45840: PPUSH
45841: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45845: LD_INT 1
45847: PPUSH
45848: LD_INT 5
45850: PPUSH
45851: CALL_OW 12
45855: PPUSH
45856: LD_VAR 0 1
45860: PPUSH
45861: LD_INT 1
45863: PPUSH
45864: CALL_OW 55
// end ;
45868: GO 45681
// end ;
45870: LD_VAR 0 5
45874: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45875: LD_INT 0
45877: PPUSH
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
45882: PPUSH
45883: PPUSH
45884: PPUSH
// if not turrets or not factories then
45885: LD_VAR 0 1
45889: NOT
45890: PUSH
45891: LD_VAR 0 2
45895: NOT
45896: OR
45897: IFFALSE 45901
// exit ;
45899: GO 46208
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45901: LD_ADDR_VAR 0 10
45905: PUSH
45906: LD_INT 5
45908: PUSH
45909: LD_INT 6
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 4
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 3
45928: PUSH
45929: LD_INT 5
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 24
45943: PUSH
45944: LD_INT 25
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 23
45953: PUSH
45954: LD_INT 27
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 42
45967: PUSH
45968: LD_INT 43
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 44
45977: PUSH
45978: LD_INT 46
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 45
45987: PUSH
45988: LD_INT 47
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
// result := [ ] ;
46005: LD_ADDR_VAR 0 3
46009: PUSH
46010: EMPTY
46011: ST_TO_ADDR
// for i in turrets do
46012: LD_ADDR_VAR 0 4
46016: PUSH
46017: LD_VAR 0 1
46021: PUSH
46022: FOR_IN
46023: IFFALSE 46206
// begin nat := GetNation ( i ) ;
46025: LD_ADDR_VAR 0 7
46029: PUSH
46030: LD_VAR 0 4
46034: PPUSH
46035: CALL_OW 248
46039: ST_TO_ADDR
// weapon := 0 ;
46040: LD_ADDR_VAR 0 8
46044: PUSH
46045: LD_INT 0
46047: ST_TO_ADDR
// if not nat then
46048: LD_VAR 0 7
46052: NOT
46053: IFFALSE 46057
// continue ;
46055: GO 46022
// for j in list [ nat ] do
46057: LD_ADDR_VAR 0 5
46061: PUSH
46062: LD_VAR 0 10
46066: PUSH
46067: LD_VAR 0 7
46071: ARRAY
46072: PUSH
46073: FOR_IN
46074: IFFALSE 46115
// if GetBWeapon ( i ) = j [ 1 ] then
46076: LD_VAR 0 4
46080: PPUSH
46081: CALL_OW 269
46085: PUSH
46086: LD_VAR 0 5
46090: PUSH
46091: LD_INT 1
46093: ARRAY
46094: EQUAL
46095: IFFALSE 46113
// begin weapon := j [ 2 ] ;
46097: LD_ADDR_VAR 0 8
46101: PUSH
46102: LD_VAR 0 5
46106: PUSH
46107: LD_INT 2
46109: ARRAY
46110: ST_TO_ADDR
// break ;
46111: GO 46115
// end ;
46113: GO 46073
46115: POP
46116: POP
// if not weapon then
46117: LD_VAR 0 8
46121: NOT
46122: IFFALSE 46126
// continue ;
46124: GO 46022
// for k in factories do
46126: LD_ADDR_VAR 0 6
46130: PUSH
46131: LD_VAR 0 2
46135: PUSH
46136: FOR_IN
46137: IFFALSE 46202
// begin weapons := AvailableWeaponList ( k ) ;
46139: LD_ADDR_VAR 0 9
46143: PUSH
46144: LD_VAR 0 6
46148: PPUSH
46149: CALL_OW 478
46153: ST_TO_ADDR
// if not weapons then
46154: LD_VAR 0 9
46158: NOT
46159: IFFALSE 46163
// continue ;
46161: GO 46136
// if weapon in weapons then
46163: LD_VAR 0 8
46167: PUSH
46168: LD_VAR 0 9
46172: IN
46173: IFFALSE 46200
// begin result := [ i , weapon ] ;
46175: LD_ADDR_VAR 0 3
46179: PUSH
46180: LD_VAR 0 4
46184: PUSH
46185: LD_VAR 0 8
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// exit ;
46194: POP
46195: POP
46196: POP
46197: POP
46198: GO 46208
// end ; end ;
46200: GO 46136
46202: POP
46203: POP
// end ;
46204: GO 46022
46206: POP
46207: POP
// end ;
46208: LD_VAR 0 3
46212: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46213: LD_INT 0
46215: PPUSH
// if not side or side > 8 then
46216: LD_VAR 0 3
46220: NOT
46221: PUSH
46222: LD_VAR 0 3
46226: PUSH
46227: LD_INT 8
46229: GREATER
46230: OR
46231: IFFALSE 46235
// exit ;
46233: GO 46294
// if not range then
46235: LD_VAR 0 4
46239: NOT
46240: IFFALSE 46251
// range := - 12 ;
46242: LD_ADDR_VAR 0 4
46246: PUSH
46247: LD_INT 12
46249: NEG
46250: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46251: LD_VAR 0 1
46255: PPUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: LD_VAR 0 3
46265: PPUSH
46266: LD_VAR 0 4
46270: PPUSH
46271: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46275: LD_VAR 0 1
46279: PPUSH
46280: LD_VAR 0 2
46284: PPUSH
46285: LD_VAR 0 3
46289: PPUSH
46290: CALL_OW 331
// end ;
46294: LD_VAR 0 5
46298: RET
// export function Video ( mode ) ; begin
46299: LD_INT 0
46301: PPUSH
// ingame_video = mode ;
46302: LD_ADDR_OWVAR 52
46306: PUSH
46307: LD_VAR 0 1
46311: ST_TO_ADDR
// interface_hidden = mode ;
46312: LD_ADDR_OWVAR 54
46316: PUSH
46317: LD_VAR 0 1
46321: ST_TO_ADDR
// end ;
46322: LD_VAR 0 2
46326: RET
// export function Join ( array , element ) ; begin
46327: LD_INT 0
46329: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46330: LD_ADDR_VAR 0 3
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: LD_VAR 0 1
46344: PUSH
46345: LD_INT 1
46347: PLUS
46348: PPUSH
46349: LD_VAR 0 2
46353: PPUSH
46354: CALL_OW 1
46358: ST_TO_ADDR
// end ;
46359: LD_VAR 0 3
46363: RET
// export function JoinUnion ( array , element ) ; begin
46364: LD_INT 0
46366: PPUSH
// result := array union element ;
46367: LD_ADDR_VAR 0 3
46371: PUSH
46372: LD_VAR 0 1
46376: PUSH
46377: LD_VAR 0 2
46381: UNION
46382: ST_TO_ADDR
// end ;
46383: LD_VAR 0 3
46387: RET
// export function GetBehemoths ( side ) ; begin
46388: LD_INT 0
46390: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46391: LD_ADDR_VAR 0 2
46395: PUSH
46396: LD_INT 22
46398: PUSH
46399: LD_VAR 0 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 31
46410: PUSH
46411: LD_INT 25
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 69
46426: ST_TO_ADDR
// end ;
46427: LD_VAR 0 2
46431: RET
// export function Shuffle ( array ) ; var i , index ; begin
46432: LD_INT 0
46434: PPUSH
46435: PPUSH
46436: PPUSH
// result := [ ] ;
46437: LD_ADDR_VAR 0 2
46441: PUSH
46442: EMPTY
46443: ST_TO_ADDR
// if not array then
46444: LD_VAR 0 1
46448: NOT
46449: IFFALSE 46453
// exit ;
46451: GO 46552
// Randomize ;
46453: CALL_OW 10
// for i = array downto 1 do
46457: LD_ADDR_VAR 0 3
46461: PUSH
46462: DOUBLE
46463: LD_VAR 0 1
46467: INC
46468: ST_TO_ADDR
46469: LD_INT 1
46471: PUSH
46472: FOR_DOWNTO
46473: IFFALSE 46550
// begin index := rand ( 1 , array ) ;
46475: LD_ADDR_VAR 0 4
46479: PUSH
46480: LD_INT 1
46482: PPUSH
46483: LD_VAR 0 1
46487: PPUSH
46488: CALL_OW 12
46492: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46493: LD_ADDR_VAR 0 2
46497: PUSH
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_VAR 0 2
46507: PUSH
46508: LD_INT 1
46510: PLUS
46511: PPUSH
46512: LD_VAR 0 1
46516: PUSH
46517: LD_VAR 0 4
46521: ARRAY
46522: PPUSH
46523: CALL_OW 2
46527: ST_TO_ADDR
// array := Delete ( array , index ) ;
46528: LD_ADDR_VAR 0 1
46532: PUSH
46533: LD_VAR 0 1
46537: PPUSH
46538: LD_VAR 0 4
46542: PPUSH
46543: CALL_OW 3
46547: ST_TO_ADDR
// end ;
46548: GO 46472
46550: POP
46551: POP
// end ;
46552: LD_VAR 0 2
46556: RET
// export function GetBaseMaterials ( base ) ; begin
46557: LD_INT 0
46559: PPUSH
// result := [ 0 , 0 , 0 ] ;
46560: LD_ADDR_VAR 0 2
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: ST_TO_ADDR
// if not base then
46579: LD_VAR 0 1
46583: NOT
46584: IFFALSE 46588
// exit ;
46586: GO 46637
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46588: LD_ADDR_VAR 0 2
46592: PUSH
46593: LD_VAR 0 1
46597: PPUSH
46598: LD_INT 1
46600: PPUSH
46601: CALL_OW 275
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: LD_INT 2
46613: PPUSH
46614: CALL_OW 275
46618: PUSH
46619: LD_VAR 0 1
46623: PPUSH
46624: LD_INT 3
46626: PPUSH
46627: CALL_OW 275
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: ST_TO_ADDR
// end ;
46637: LD_VAR 0 2
46641: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46642: LD_INT 0
46644: PPUSH
46645: PPUSH
// result := array ;
46646: LD_ADDR_VAR 0 3
46650: PUSH
46651: LD_VAR 0 1
46655: ST_TO_ADDR
// if size >= result then
46656: LD_VAR 0 2
46660: PUSH
46661: LD_VAR 0 3
46665: GREATEREQUAL
46666: IFFALSE 46670
// exit ;
46668: GO 46720
// if size then
46670: LD_VAR 0 2
46674: IFFALSE 46720
// for i := array downto size do
46676: LD_ADDR_VAR 0 4
46680: PUSH
46681: DOUBLE
46682: LD_VAR 0 1
46686: INC
46687: ST_TO_ADDR
46688: LD_VAR 0 2
46692: PUSH
46693: FOR_DOWNTO
46694: IFFALSE 46718
// result := Delete ( result , result ) ;
46696: LD_ADDR_VAR 0 3
46700: PUSH
46701: LD_VAR 0 3
46705: PPUSH
46706: LD_VAR 0 3
46710: PPUSH
46711: CALL_OW 3
46715: ST_TO_ADDR
46716: GO 46693
46718: POP
46719: POP
// end ;
46720: LD_VAR 0 3
46724: RET
// export function ComExit ( unit ) ; var tmp ; begin
46725: LD_INT 0
46727: PPUSH
46728: PPUSH
// if not IsInUnit ( unit ) then
46729: LD_VAR 0 1
46733: PPUSH
46734: CALL_OW 310
46738: NOT
46739: IFFALSE 46743
// exit ;
46741: GO 46803
// tmp := IsInUnit ( unit ) ;
46743: LD_ADDR_VAR 0 3
46747: PUSH
46748: LD_VAR 0 1
46752: PPUSH
46753: CALL_OW 310
46757: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46758: LD_VAR 0 3
46762: PPUSH
46763: CALL_OW 247
46767: PUSH
46768: LD_INT 2
46770: EQUAL
46771: IFFALSE 46784
// ComExitVehicle ( unit ) else
46773: LD_VAR 0 1
46777: PPUSH
46778: CALL_OW 121
46782: GO 46793
// ComExitBuilding ( unit ) ;
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 122
// result := tmp ;
46793: LD_ADDR_VAR 0 2
46797: PUSH
46798: LD_VAR 0 3
46802: ST_TO_ADDR
// end ;
46803: LD_VAR 0 2
46807: RET
// export function ComExitAll ( units ) ; var i ; begin
46808: LD_INT 0
46810: PPUSH
46811: PPUSH
// if not units then
46812: LD_VAR 0 1
46816: NOT
46817: IFFALSE 46821
// exit ;
46819: GO 46847
// for i in units do
46821: LD_ADDR_VAR 0 3
46825: PUSH
46826: LD_VAR 0 1
46830: PUSH
46831: FOR_IN
46832: IFFALSE 46845
// ComExit ( i ) ;
46834: LD_VAR 0 3
46838: PPUSH
46839: CALL 46725 0 1
46843: GO 46831
46845: POP
46846: POP
// end ;
46847: LD_VAR 0 2
46851: RET
// export function ResetHc ; begin
46852: LD_INT 0
46854: PPUSH
// InitHc ;
46855: CALL_OW 19
// hc_importance := 0 ;
46859: LD_ADDR_OWVAR 32
46863: PUSH
46864: LD_INT 0
46866: ST_TO_ADDR
// end ;
46867: LD_VAR 0 1
46871: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46872: LD_INT 0
46874: PPUSH
46875: PPUSH
46876: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46877: LD_ADDR_VAR 0 6
46881: PUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_VAR 0 3
46891: PLUS
46892: PUSH
46893: LD_INT 2
46895: DIV
46896: ST_TO_ADDR
// if _x < 0 then
46897: LD_VAR 0 6
46901: PUSH
46902: LD_INT 0
46904: LESS
46905: IFFALSE 46922
// _x := _x * - 1 ;
46907: LD_ADDR_VAR 0 6
46911: PUSH
46912: LD_VAR 0 6
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: MUL
46921: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46922: LD_ADDR_VAR 0 7
46926: PUSH
46927: LD_VAR 0 2
46931: PUSH
46932: LD_VAR 0 4
46936: PLUS
46937: PUSH
46938: LD_INT 2
46940: DIV
46941: ST_TO_ADDR
// if _y < 0 then
46942: LD_VAR 0 7
46946: PUSH
46947: LD_INT 0
46949: LESS
46950: IFFALSE 46967
// _y := _y * - 1 ;
46952: LD_ADDR_VAR 0 7
46956: PUSH
46957: LD_VAR 0 7
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: MUL
46966: ST_TO_ADDR
// result := [ _x , _y ] ;
46967: LD_ADDR_VAR 0 5
46971: PUSH
46972: LD_VAR 0 6
46976: PUSH
46977: LD_VAR 0 7
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// end ;
46986: LD_VAR 0 5
46990: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46991: LD_INT 0
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
// task := GetTaskList ( unit ) ;
46997: LD_ADDR_VAR 0 7
47001: PUSH
47002: LD_VAR 0 1
47006: PPUSH
47007: CALL_OW 437
47011: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47012: LD_VAR 0 7
47016: NOT
47017: PUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: LD_VAR 0 2
47027: PPUSH
47028: CALL_OW 308
47032: NOT
47033: AND
47034: IFFALSE 47038
// exit ;
47036: GO 47156
// if IsInArea ( unit , area ) then
47038: LD_VAR 0 1
47042: PPUSH
47043: LD_VAR 0 2
47047: PPUSH
47048: CALL_OW 308
47052: IFFALSE 47070
// begin ComMoveToArea ( unit , goAway ) ;
47054: LD_VAR 0 1
47058: PPUSH
47059: LD_VAR 0 3
47063: PPUSH
47064: CALL_OW 113
// exit ;
47068: GO 47156
// end ; if task [ 1 ] [ 1 ] <> M then
47070: LD_VAR 0 7
47074: PUSH
47075: LD_INT 1
47077: ARRAY
47078: PUSH
47079: LD_INT 1
47081: ARRAY
47082: PUSH
47083: LD_STRING M
47085: NONEQUAL
47086: IFFALSE 47090
// exit ;
47088: GO 47156
// x := task [ 1 ] [ 2 ] ;
47090: LD_ADDR_VAR 0 5
47094: PUSH
47095: LD_VAR 0 7
47099: PUSH
47100: LD_INT 1
47102: ARRAY
47103: PUSH
47104: LD_INT 2
47106: ARRAY
47107: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47108: LD_ADDR_VAR 0 6
47112: PUSH
47113: LD_VAR 0 7
47117: PUSH
47118: LD_INT 1
47120: ARRAY
47121: PUSH
47122: LD_INT 3
47124: ARRAY
47125: ST_TO_ADDR
// if InArea ( x , y , area ) then
47126: LD_VAR 0 5
47130: PPUSH
47131: LD_VAR 0 6
47135: PPUSH
47136: LD_VAR 0 2
47140: PPUSH
47141: CALL_OW 309
47145: IFFALSE 47156
// ComStop ( unit ) ;
47147: LD_VAR 0 1
47151: PPUSH
47152: CALL_OW 141
// end ;
47156: LD_VAR 0 4
47160: RET
// export function Abs ( value ) ; begin
47161: LD_INT 0
47163: PPUSH
// result := value ;
47164: LD_ADDR_VAR 0 2
47168: PUSH
47169: LD_VAR 0 1
47173: ST_TO_ADDR
// if value < 0 then
47174: LD_VAR 0 1
47178: PUSH
47179: LD_INT 0
47181: LESS
47182: IFFALSE 47199
// result := value * - 1 ;
47184: LD_ADDR_VAR 0 2
47188: PUSH
47189: LD_VAR 0 1
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: MUL
47198: ST_TO_ADDR
// end ;
47199: LD_VAR 0 2
47203: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47204: LD_INT 0
47206: PPUSH
47207: PPUSH
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
47212: PPUSH
47213: PPUSH
// if not unit or not building then
47214: LD_VAR 0 1
47218: NOT
47219: PUSH
47220: LD_VAR 0 2
47224: NOT
47225: OR
47226: IFFALSE 47230
// exit ;
47228: GO 47456
// x := GetX ( building ) ;
47230: LD_ADDR_VAR 0 4
47234: PUSH
47235: LD_VAR 0 2
47239: PPUSH
47240: CALL_OW 250
47244: ST_TO_ADDR
// y := GetY ( building ) ;
47245: LD_ADDR_VAR 0 6
47249: PUSH
47250: LD_VAR 0 2
47254: PPUSH
47255: CALL_OW 251
47259: ST_TO_ADDR
// d := GetDir ( building ) ;
47260: LD_ADDR_VAR 0 8
47264: PUSH
47265: LD_VAR 0 2
47269: PPUSH
47270: CALL_OW 254
47274: ST_TO_ADDR
// r := 4 ;
47275: LD_ADDR_VAR 0 9
47279: PUSH
47280: LD_INT 4
47282: ST_TO_ADDR
// for i := 1 to 5 do
47283: LD_ADDR_VAR 0 10
47287: PUSH
47288: DOUBLE
47289: LD_INT 1
47291: DEC
47292: ST_TO_ADDR
47293: LD_INT 5
47295: PUSH
47296: FOR_TO
47297: IFFALSE 47454
// begin _x := ShiftX ( x , d , r + i ) ;
47299: LD_ADDR_VAR 0 5
47303: PUSH
47304: LD_VAR 0 4
47308: PPUSH
47309: LD_VAR 0 8
47313: PPUSH
47314: LD_VAR 0 9
47318: PUSH
47319: LD_VAR 0 10
47323: PLUS
47324: PPUSH
47325: CALL_OW 272
47329: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47330: LD_ADDR_VAR 0 7
47334: PUSH
47335: LD_VAR 0 6
47339: PPUSH
47340: LD_VAR 0 8
47344: PPUSH
47345: LD_VAR 0 9
47349: PUSH
47350: LD_VAR 0 10
47354: PLUS
47355: PPUSH
47356: CALL_OW 273
47360: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47361: LD_VAR 0 5
47365: PPUSH
47366: LD_VAR 0 7
47370: PPUSH
47371: CALL_OW 488
47375: PUSH
47376: LD_VAR 0 5
47380: PPUSH
47381: LD_VAR 0 7
47385: PPUSH
47386: CALL_OW 428
47390: PPUSH
47391: CALL_OW 247
47395: PUSH
47396: LD_INT 3
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: IN
47406: NOT
47407: AND
47408: IFFALSE 47452
// begin ComMoveXY ( unit , _x , _y ) ;
47410: LD_VAR 0 1
47414: PPUSH
47415: LD_VAR 0 5
47419: PPUSH
47420: LD_VAR 0 7
47424: PPUSH
47425: CALL_OW 111
// result := [ _x , _y ] ;
47429: LD_ADDR_VAR 0 3
47433: PUSH
47434: LD_VAR 0 5
47438: PUSH
47439: LD_VAR 0 7
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: ST_TO_ADDR
// exit ;
47448: POP
47449: POP
47450: GO 47456
// end ; end ;
47452: GO 47296
47454: POP
47455: POP
// end ;
47456: LD_VAR 0 3
47460: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47461: LD_INT 0
47463: PPUSH
47464: PPUSH
47465: PPUSH
// result := 0 ;
47466: LD_ADDR_VAR 0 3
47470: PUSH
47471: LD_INT 0
47473: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47474: LD_VAR 0 1
47478: PUSH
47479: LD_INT 0
47481: LESS
47482: PUSH
47483: LD_VAR 0 1
47487: PUSH
47488: LD_INT 8
47490: GREATER
47491: OR
47492: PUSH
47493: LD_VAR 0 2
47497: PUSH
47498: LD_INT 0
47500: LESS
47501: OR
47502: PUSH
47503: LD_VAR 0 2
47507: PUSH
47508: LD_INT 8
47510: GREATER
47511: OR
47512: IFFALSE 47516
// exit ;
47514: GO 47591
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47516: LD_ADDR_VAR 0 4
47520: PUSH
47521: LD_INT 22
47523: PUSH
47524: LD_VAR 0 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PPUSH
47533: CALL_OW 69
47537: PUSH
47538: FOR_IN
47539: IFFALSE 47589
// begin un := UnitShoot ( i ) ;
47541: LD_ADDR_VAR 0 5
47545: PUSH
47546: LD_VAR 0 4
47550: PPUSH
47551: CALL_OW 504
47555: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47556: LD_VAR 0 5
47560: PPUSH
47561: CALL_OW 255
47565: PUSH
47566: LD_VAR 0 1
47570: EQUAL
47571: IFFALSE 47587
// begin result := un ;
47573: LD_ADDR_VAR 0 3
47577: PUSH
47578: LD_VAR 0 5
47582: ST_TO_ADDR
// exit ;
47583: POP
47584: POP
47585: GO 47591
// end ; end ;
47587: GO 47538
47589: POP
47590: POP
// end ;
47591: LD_VAR 0 3
47595: RET
// export function GetCargoBay ( units ) ; begin
47596: LD_INT 0
47598: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47599: LD_ADDR_VAR 0 2
47603: PUSH
47604: LD_VAR 0 1
47608: PPUSH
47609: LD_INT 2
47611: PUSH
47612: LD_INT 34
47614: PUSH
47615: LD_INT 12
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 34
47624: PUSH
47625: LD_INT 51
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 34
47634: PUSH
47635: LD_INT 32
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 34
47644: PUSH
47645: LD_INT 89
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: PPUSH
47659: CALL_OW 72
47663: ST_TO_ADDR
// end ;
47664: LD_VAR 0 2
47668: RET
// export function Negate ( value ) ; begin
47669: LD_INT 0
47671: PPUSH
// result := not value ;
47672: LD_ADDR_VAR 0 2
47676: PUSH
47677: LD_VAR 0 1
47681: NOT
47682: ST_TO_ADDR
// end ;
47683: LD_VAR 0 2
47687: RET
// export function Inc ( value ) ; begin
47688: LD_INT 0
47690: PPUSH
// result := value + 1 ;
47691: LD_ADDR_VAR 0 2
47695: PUSH
47696: LD_VAR 0 1
47700: PUSH
47701: LD_INT 1
47703: PLUS
47704: ST_TO_ADDR
// end ;
47705: LD_VAR 0 2
47709: RET
// export function Dec ( value ) ; begin
47710: LD_INT 0
47712: PPUSH
// result := value - 1 ;
47713: LD_ADDR_VAR 0 2
47717: PUSH
47718: LD_VAR 0 1
47722: PUSH
47723: LD_INT 1
47725: MINUS
47726: ST_TO_ADDR
// end ;
47727: LD_VAR 0 2
47731: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47732: LD_INT 0
47734: PPUSH
47735: PPUSH
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47742: LD_VAR 0 1
47746: PPUSH
47747: LD_VAR 0 2
47751: PPUSH
47752: CALL_OW 488
47756: NOT
47757: PUSH
47758: LD_VAR 0 3
47762: PPUSH
47763: LD_VAR 0 4
47767: PPUSH
47768: CALL_OW 488
47772: NOT
47773: OR
47774: IFFALSE 47787
// begin result := - 1 ;
47776: LD_ADDR_VAR 0 5
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: ST_TO_ADDR
// exit ;
47785: GO 48022
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47787: LD_ADDR_VAR 0 12
47791: PUSH
47792: LD_VAR 0 1
47796: PPUSH
47797: LD_VAR 0 2
47801: PPUSH
47802: LD_VAR 0 3
47806: PPUSH
47807: LD_VAR 0 4
47811: PPUSH
47812: CALL 46872 0 4
47816: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47817: LD_ADDR_VAR 0 11
47821: PUSH
47822: LD_VAR 0 1
47826: PPUSH
47827: LD_VAR 0 2
47831: PPUSH
47832: LD_VAR 0 12
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PPUSH
47841: LD_VAR 0 12
47845: PUSH
47846: LD_INT 2
47848: ARRAY
47849: PPUSH
47850: CALL_OW 298
47854: ST_TO_ADDR
// distance := 9999 ;
47855: LD_ADDR_VAR 0 10
47859: PUSH
47860: LD_INT 9999
47862: ST_TO_ADDR
// for i := 0 to 5 do
47863: LD_ADDR_VAR 0 6
47867: PUSH
47868: DOUBLE
47869: LD_INT 0
47871: DEC
47872: ST_TO_ADDR
47873: LD_INT 5
47875: PUSH
47876: FOR_TO
47877: IFFALSE 48020
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47879: LD_ADDR_VAR 0 7
47883: PUSH
47884: LD_VAR 0 1
47888: PPUSH
47889: LD_VAR 0 6
47893: PPUSH
47894: LD_VAR 0 11
47898: PPUSH
47899: CALL_OW 272
47903: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47904: LD_ADDR_VAR 0 8
47908: PUSH
47909: LD_VAR 0 2
47913: PPUSH
47914: LD_VAR 0 6
47918: PPUSH
47919: LD_VAR 0 11
47923: PPUSH
47924: CALL_OW 273
47928: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47929: LD_VAR 0 7
47933: PPUSH
47934: LD_VAR 0 8
47938: PPUSH
47939: CALL_OW 488
47943: NOT
47944: IFFALSE 47948
// continue ;
47946: GO 47876
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47948: LD_ADDR_VAR 0 9
47952: PUSH
47953: LD_VAR 0 12
47957: PUSH
47958: LD_INT 1
47960: ARRAY
47961: PPUSH
47962: LD_VAR 0 12
47966: PUSH
47967: LD_INT 2
47969: ARRAY
47970: PPUSH
47971: LD_VAR 0 7
47975: PPUSH
47976: LD_VAR 0 8
47980: PPUSH
47981: CALL_OW 298
47985: ST_TO_ADDR
// if tmp < distance then
47986: LD_VAR 0 9
47990: PUSH
47991: LD_VAR 0 10
47995: LESS
47996: IFFALSE 48018
// begin result := i ;
47998: LD_ADDR_VAR 0 5
48002: PUSH
48003: LD_VAR 0 6
48007: ST_TO_ADDR
// distance := tmp ;
48008: LD_ADDR_VAR 0 10
48012: PUSH
48013: LD_VAR 0 9
48017: ST_TO_ADDR
// end ; end ;
48018: GO 47876
48020: POP
48021: POP
// end ;
48022: LD_VAR 0 5
48026: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48027: LD_INT 0
48029: PPUSH
48030: PPUSH
// if not driver or not IsInUnit ( driver ) then
48031: LD_VAR 0 1
48035: NOT
48036: PUSH
48037: LD_VAR 0 1
48041: PPUSH
48042: CALL_OW 310
48046: NOT
48047: OR
48048: IFFALSE 48052
// exit ;
48050: GO 48142
// vehicle := IsInUnit ( driver ) ;
48052: LD_ADDR_VAR 0 3
48056: PUSH
48057: LD_VAR 0 1
48061: PPUSH
48062: CALL_OW 310
48066: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48067: LD_VAR 0 1
48071: PPUSH
48072: LD_STRING \
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: PUSH
48102: LD_STRING E
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_VAR 0 3
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PPUSH
48138: CALL_OW 446
// end ;
48142: LD_VAR 0 2
48146: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48147: LD_INT 0
48149: PPUSH
48150: PPUSH
// if not driver or not IsInUnit ( driver ) then
48151: LD_VAR 0 1
48155: NOT
48156: PUSH
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 310
48166: NOT
48167: OR
48168: IFFALSE 48172
// exit ;
48170: GO 48262
// vehicle := IsInUnit ( driver ) ;
48172: LD_ADDR_VAR 0 3
48176: PUSH
48177: LD_VAR 0 1
48181: PPUSH
48182: CALL_OW 310
48186: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48187: LD_VAR 0 1
48191: PPUSH
48192: LD_STRING \
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: PUSH
48222: LD_STRING E
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_VAR 0 3
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PPUSH
48258: CALL_OW 447
// end ;
48262: LD_VAR 0 2
48266: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48267: LD_INT 0
48269: PPUSH
48270: PPUSH
48271: PPUSH
// tmp := [ ] ;
48272: LD_ADDR_VAR 0 5
48276: PUSH
48277: EMPTY
48278: ST_TO_ADDR
// for i in units do
48279: LD_ADDR_VAR 0 4
48283: PUSH
48284: LD_VAR 0 1
48288: PUSH
48289: FOR_IN
48290: IFFALSE 48328
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48292: LD_ADDR_VAR 0 5
48296: PUSH
48297: LD_VAR 0 5
48301: PPUSH
48302: LD_VAR 0 5
48306: PUSH
48307: LD_INT 1
48309: PLUS
48310: PPUSH
48311: LD_VAR 0 4
48315: PPUSH
48316: CALL_OW 256
48320: PPUSH
48321: CALL_OW 2
48325: ST_TO_ADDR
48326: GO 48289
48328: POP
48329: POP
// if not tmp then
48330: LD_VAR 0 5
48334: NOT
48335: IFFALSE 48339
// exit ;
48337: GO 48387
// if asc then
48339: LD_VAR 0 2
48343: IFFALSE 48367
// result := SortListByListAsc ( units , tmp ) else
48345: LD_ADDR_VAR 0 3
48349: PUSH
48350: LD_VAR 0 1
48354: PPUSH
48355: LD_VAR 0 5
48359: PPUSH
48360: CALL_OW 76
48364: ST_TO_ADDR
48365: GO 48387
// result := SortListByListDesc ( units , tmp ) ;
48367: LD_ADDR_VAR 0 3
48371: PUSH
48372: LD_VAR 0 1
48376: PPUSH
48377: LD_VAR 0 5
48381: PPUSH
48382: CALL_OW 77
48386: ST_TO_ADDR
// end ;
48387: LD_VAR 0 3
48391: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48392: LD_INT 0
48394: PPUSH
48395: PPUSH
// task := GetTaskList ( mech ) ;
48396: LD_ADDR_VAR 0 4
48400: PUSH
48401: LD_VAR 0 1
48405: PPUSH
48406: CALL_OW 437
48410: ST_TO_ADDR
// if not task then
48411: LD_VAR 0 4
48415: NOT
48416: IFFALSE 48420
// exit ;
48418: GO 48462
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48420: LD_ADDR_VAR 0 3
48424: PUSH
48425: LD_VAR 0 4
48429: PUSH
48430: LD_INT 1
48432: ARRAY
48433: PUSH
48434: LD_INT 1
48436: ARRAY
48437: PUSH
48438: LD_STRING r
48440: EQUAL
48441: PUSH
48442: LD_VAR 0 4
48446: PUSH
48447: LD_INT 1
48449: ARRAY
48450: PUSH
48451: LD_INT 4
48453: ARRAY
48454: PUSH
48455: LD_VAR 0 2
48459: EQUAL
48460: AND
48461: ST_TO_ADDR
// end ;
48462: LD_VAR 0 3
48466: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48467: LD_INT 0
48469: PPUSH
// SetDir ( unit , d ) ;
48470: LD_VAR 0 1
48474: PPUSH
48475: LD_VAR 0 4
48479: PPUSH
48480: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48484: LD_VAR 0 1
48488: PPUSH
48489: LD_VAR 0 2
48493: PPUSH
48494: LD_VAR 0 3
48498: PPUSH
48499: LD_VAR 0 5
48503: PPUSH
48504: CALL_OW 48
// end ;
48508: LD_VAR 0 6
48512: RET
// export function ToNaturalNumber ( number ) ; begin
48513: LD_INT 0
48515: PPUSH
// result := number div 1 ;
48516: LD_ADDR_VAR 0 2
48520: PUSH
48521: LD_VAR 0 1
48525: PUSH
48526: LD_INT 1
48528: DIV
48529: ST_TO_ADDR
// if number < 0 then
48530: LD_VAR 0 1
48534: PUSH
48535: LD_INT 0
48537: LESS
48538: IFFALSE 48548
// result := 0 ;
48540: LD_ADDR_VAR 0 2
48544: PUSH
48545: LD_INT 0
48547: ST_TO_ADDR
// end ;
48548: LD_VAR 0 2
48552: RET
// export function SortByClass ( units , class ) ; var un ; begin
48553: LD_INT 0
48555: PPUSH
48556: PPUSH
// if not units or not class then
48557: LD_VAR 0 1
48561: NOT
48562: PUSH
48563: LD_VAR 0 2
48567: NOT
48568: OR
48569: IFFALSE 48573
// exit ;
48571: GO 48668
// result := [ ] ;
48573: LD_ADDR_VAR 0 3
48577: PUSH
48578: EMPTY
48579: ST_TO_ADDR
// for un in units do
48580: LD_ADDR_VAR 0 4
48584: PUSH
48585: LD_VAR 0 1
48589: PUSH
48590: FOR_IN
48591: IFFALSE 48666
// if GetClass ( un ) = class then
48593: LD_VAR 0 4
48597: PPUSH
48598: CALL_OW 257
48602: PUSH
48603: LD_VAR 0 2
48607: EQUAL
48608: IFFALSE 48635
// result := Insert ( result , 1 , un ) else
48610: LD_ADDR_VAR 0 3
48614: PUSH
48615: LD_VAR 0 3
48619: PPUSH
48620: LD_INT 1
48622: PPUSH
48623: LD_VAR 0 4
48627: PPUSH
48628: CALL_OW 2
48632: ST_TO_ADDR
48633: GO 48664
// result := Replace ( result , result + 1 , un ) ;
48635: LD_ADDR_VAR 0 3
48639: PUSH
48640: LD_VAR 0 3
48644: PPUSH
48645: LD_VAR 0 3
48649: PUSH
48650: LD_INT 1
48652: PLUS
48653: PPUSH
48654: LD_VAR 0 4
48658: PPUSH
48659: CALL_OW 1
48663: ST_TO_ADDR
48664: GO 48590
48666: POP
48667: POP
// end ;
48668: LD_VAR 0 3
48672: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48673: LD_INT 0
48675: PPUSH
48676: PPUSH
48677: PPUSH
48678: PPUSH
48679: PPUSH
48680: PPUSH
48681: PPUSH
// result := [ ] ;
48682: LD_ADDR_VAR 0 4
48686: PUSH
48687: EMPTY
48688: ST_TO_ADDR
// if x - r < 0 then
48689: LD_VAR 0 1
48693: PUSH
48694: LD_VAR 0 3
48698: MINUS
48699: PUSH
48700: LD_INT 0
48702: LESS
48703: IFFALSE 48715
// min_x := 0 else
48705: LD_ADDR_VAR 0 8
48709: PUSH
48710: LD_INT 0
48712: ST_TO_ADDR
48713: GO 48731
// min_x := x - r ;
48715: LD_ADDR_VAR 0 8
48719: PUSH
48720: LD_VAR 0 1
48724: PUSH
48725: LD_VAR 0 3
48729: MINUS
48730: ST_TO_ADDR
// if y - r < 0 then
48731: LD_VAR 0 2
48735: PUSH
48736: LD_VAR 0 3
48740: MINUS
48741: PUSH
48742: LD_INT 0
48744: LESS
48745: IFFALSE 48757
// min_y := 0 else
48747: LD_ADDR_VAR 0 7
48751: PUSH
48752: LD_INT 0
48754: ST_TO_ADDR
48755: GO 48773
// min_y := y - r ;
48757: LD_ADDR_VAR 0 7
48761: PUSH
48762: LD_VAR 0 2
48766: PUSH
48767: LD_VAR 0 3
48771: MINUS
48772: ST_TO_ADDR
// max_x := x + r ;
48773: LD_ADDR_VAR 0 9
48777: PUSH
48778: LD_VAR 0 1
48782: PUSH
48783: LD_VAR 0 3
48787: PLUS
48788: ST_TO_ADDR
// max_y := y + r ;
48789: LD_ADDR_VAR 0 10
48793: PUSH
48794: LD_VAR 0 2
48798: PUSH
48799: LD_VAR 0 3
48803: PLUS
48804: ST_TO_ADDR
// for _x = min_x to max_x do
48805: LD_ADDR_VAR 0 5
48809: PUSH
48810: DOUBLE
48811: LD_VAR 0 8
48815: DEC
48816: ST_TO_ADDR
48817: LD_VAR 0 9
48821: PUSH
48822: FOR_TO
48823: IFFALSE 48924
// for _y = min_y to max_y do
48825: LD_ADDR_VAR 0 6
48829: PUSH
48830: DOUBLE
48831: LD_VAR 0 7
48835: DEC
48836: ST_TO_ADDR
48837: LD_VAR 0 10
48841: PUSH
48842: FOR_TO
48843: IFFALSE 48920
// begin if not ValidHex ( _x , _y ) then
48845: LD_VAR 0 5
48849: PPUSH
48850: LD_VAR 0 6
48854: PPUSH
48855: CALL_OW 488
48859: NOT
48860: IFFALSE 48864
// continue ;
48862: GO 48842
// if GetResourceTypeXY ( _x , _y ) then
48864: LD_VAR 0 5
48868: PPUSH
48869: LD_VAR 0 6
48873: PPUSH
48874: CALL_OW 283
48878: IFFALSE 48918
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48880: LD_ADDR_VAR 0 4
48884: PUSH
48885: LD_VAR 0 4
48889: PPUSH
48890: LD_VAR 0 4
48894: PUSH
48895: LD_INT 1
48897: PLUS
48898: PPUSH
48899: LD_VAR 0 5
48903: PUSH
48904: LD_VAR 0 6
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PPUSH
48913: CALL_OW 1
48917: ST_TO_ADDR
// end ;
48918: GO 48842
48920: POP
48921: POP
48922: GO 48822
48924: POP
48925: POP
// end ;
48926: LD_VAR 0 4
48930: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48931: LD_INT 0
48933: PPUSH
48934: PPUSH
48935: PPUSH
48936: PPUSH
48937: PPUSH
48938: PPUSH
48939: PPUSH
48940: PPUSH
// if not units then
48941: LD_VAR 0 1
48945: NOT
48946: IFFALSE 48950
// exit ;
48948: GO 49474
// result := UnitFilter ( units , [ f_ok ] ) ;
48950: LD_ADDR_VAR 0 3
48954: PUSH
48955: LD_VAR 0 1
48959: PPUSH
48960: LD_INT 50
48962: PUSH
48963: EMPTY
48964: LIST
48965: PPUSH
48966: CALL_OW 72
48970: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48971: LD_ADDR_VAR 0 8
48975: PUSH
48976: LD_VAR 0 1
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: PPUSH
48985: CALL_OW 255
48989: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
48990: LD_ADDR_VAR 0 10
48994: PUSH
48995: LD_INT 29
48997: PUSH
48998: LD_INT 91
49000: PUSH
49001: LD_INT 49
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// if not result then
49009: LD_VAR 0 3
49013: NOT
49014: IFFALSE 49018
// exit ;
49016: GO 49474
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49018: LD_ADDR_VAR 0 5
49022: PUSH
49023: LD_INT 81
49025: PUSH
49026: LD_VAR 0 8
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PPUSH
49035: CALL_OW 69
49039: ST_TO_ADDR
// for i in result do
49040: LD_ADDR_VAR 0 4
49044: PUSH
49045: LD_VAR 0 3
49049: PUSH
49050: FOR_IN
49051: IFFALSE 49472
// begin tag := GetTag ( i ) + 1 ;
49053: LD_ADDR_VAR 0 9
49057: PUSH
49058: LD_VAR 0 4
49062: PPUSH
49063: CALL_OW 110
49067: PUSH
49068: LD_INT 1
49070: PLUS
49071: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49072: LD_ADDR_VAR 0 7
49076: PUSH
49077: LD_VAR 0 4
49081: PPUSH
49082: CALL_OW 250
49086: PPUSH
49087: LD_VAR 0 4
49091: PPUSH
49092: CALL_OW 251
49096: PPUSH
49097: LD_INT 6
49099: PPUSH
49100: CALL 48673 0 3
49104: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49105: LD_VAR 0 4
49109: PPUSH
49110: CALL_OW 247
49114: PUSH
49115: LD_INT 2
49117: EQUAL
49118: PUSH
49119: LD_VAR 0 7
49123: AND
49124: PUSH
49125: LD_VAR 0 4
49129: PPUSH
49130: CALL_OW 264
49134: PUSH
49135: LD_VAR 0 10
49139: IN
49140: NOT
49141: AND
49142: IFFALSE 49181
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49144: LD_VAR 0 4
49148: PPUSH
49149: LD_VAR 0 7
49153: PUSH
49154: LD_INT 1
49156: ARRAY
49157: PUSH
49158: LD_INT 1
49160: ARRAY
49161: PPUSH
49162: LD_VAR 0 7
49166: PUSH
49167: LD_INT 1
49169: ARRAY
49170: PUSH
49171: LD_INT 2
49173: ARRAY
49174: PPUSH
49175: CALL_OW 116
49179: GO 49470
// if path > tag then
49181: LD_VAR 0 2
49185: PUSH
49186: LD_VAR 0 9
49190: GREATER
49191: IFFALSE 49399
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49193: LD_ADDR_VAR 0 6
49197: PUSH
49198: LD_VAR 0 5
49202: PPUSH
49203: LD_INT 91
49205: PUSH
49206: LD_VAR 0 4
49210: PUSH
49211: LD_INT 8
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: PPUSH
49219: CALL_OW 72
49223: ST_TO_ADDR
// if nearEnemy then
49224: LD_VAR 0 6
49228: IFFALSE 49297
// begin if GetWeapon ( i ) = ru_time_lapser then
49230: LD_VAR 0 4
49234: PPUSH
49235: CALL_OW 264
49239: PUSH
49240: LD_INT 49
49242: EQUAL
49243: IFFALSE 49271
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49245: LD_VAR 0 4
49249: PPUSH
49250: LD_VAR 0 6
49254: PPUSH
49255: LD_VAR 0 4
49259: PPUSH
49260: CALL_OW 74
49264: PPUSH
49265: CALL_OW 112
49269: GO 49295
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49271: LD_VAR 0 4
49275: PPUSH
49276: LD_VAR 0 6
49280: PPUSH
49281: LD_VAR 0 4
49285: PPUSH
49286: CALL_OW 74
49290: PPUSH
49291: CALL_OW 115
// end else
49295: GO 49397
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49297: LD_VAR 0 4
49301: PPUSH
49302: LD_VAR 0 2
49306: PUSH
49307: LD_VAR 0 9
49311: ARRAY
49312: PUSH
49313: LD_INT 1
49315: ARRAY
49316: PPUSH
49317: LD_VAR 0 2
49321: PUSH
49322: LD_VAR 0 9
49326: ARRAY
49327: PUSH
49328: LD_INT 2
49330: ARRAY
49331: PPUSH
49332: CALL_OW 297
49336: PUSH
49337: LD_INT 6
49339: GREATER
49340: IFFALSE 49383
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49342: LD_VAR 0 4
49346: PPUSH
49347: LD_VAR 0 2
49351: PUSH
49352: LD_VAR 0 9
49356: ARRAY
49357: PUSH
49358: LD_INT 1
49360: ARRAY
49361: PPUSH
49362: LD_VAR 0 2
49366: PUSH
49367: LD_VAR 0 9
49371: ARRAY
49372: PUSH
49373: LD_INT 2
49375: ARRAY
49376: PPUSH
49377: CALL_OW 114
49381: GO 49397
// SetTag ( i , tag ) ;
49383: LD_VAR 0 4
49387: PPUSH
49388: LD_VAR 0 9
49392: PPUSH
49393: CALL_OW 109
// end else
49397: GO 49470
// if enemy then
49399: LD_VAR 0 5
49403: IFFALSE 49470
// begin if GetWeapon ( i ) = ru_time_lapser then
49405: LD_VAR 0 4
49409: PPUSH
49410: CALL_OW 264
49414: PUSH
49415: LD_INT 49
49417: EQUAL
49418: IFFALSE 49446
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49420: LD_VAR 0 4
49424: PPUSH
49425: LD_VAR 0 5
49429: PPUSH
49430: LD_VAR 0 4
49434: PPUSH
49435: CALL_OW 74
49439: PPUSH
49440: CALL_OW 112
49444: GO 49470
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49446: LD_VAR 0 4
49450: PPUSH
49451: LD_VAR 0 5
49455: PPUSH
49456: LD_VAR 0 4
49460: PPUSH
49461: CALL_OW 74
49465: PPUSH
49466: CALL_OW 115
// end ; end ;
49470: GO 49050
49472: POP
49473: POP
// end ;
49474: LD_VAR 0 3
49478: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49479: LD_INT 0
49481: PPUSH
49482: PPUSH
49483: PPUSH
// if not unit or IsInUnit ( unit ) then
49484: LD_VAR 0 1
49488: NOT
49489: PUSH
49490: LD_VAR 0 1
49494: PPUSH
49495: CALL_OW 310
49499: OR
49500: IFFALSE 49504
// exit ;
49502: GO 49595
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49504: LD_ADDR_VAR 0 4
49508: PUSH
49509: LD_VAR 0 1
49513: PPUSH
49514: CALL_OW 250
49518: PPUSH
49519: LD_VAR 0 2
49523: PPUSH
49524: LD_INT 1
49526: PPUSH
49527: CALL_OW 272
49531: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49532: LD_ADDR_VAR 0 5
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: CALL_OW 251
49546: PPUSH
49547: LD_VAR 0 2
49551: PPUSH
49552: LD_INT 1
49554: PPUSH
49555: CALL_OW 273
49559: ST_TO_ADDR
// if ValidHex ( x , y ) then
49560: LD_VAR 0 4
49564: PPUSH
49565: LD_VAR 0 5
49569: PPUSH
49570: CALL_OW 488
49574: IFFALSE 49595
// ComTurnXY ( unit , x , y ) ;
49576: LD_VAR 0 1
49580: PPUSH
49581: LD_VAR 0 4
49585: PPUSH
49586: LD_VAR 0 5
49590: PPUSH
49591: CALL_OW 118
// end ;
49595: LD_VAR 0 3
49599: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49600: LD_INT 0
49602: PPUSH
49603: PPUSH
// result := false ;
49604: LD_ADDR_VAR 0 3
49608: PUSH
49609: LD_INT 0
49611: ST_TO_ADDR
// if not units then
49612: LD_VAR 0 2
49616: NOT
49617: IFFALSE 49621
// exit ;
49619: GO 49666
// for i in units do
49621: LD_ADDR_VAR 0 4
49625: PUSH
49626: LD_VAR 0 2
49630: PUSH
49631: FOR_IN
49632: IFFALSE 49664
// if See ( side , i ) then
49634: LD_VAR 0 1
49638: PPUSH
49639: LD_VAR 0 4
49643: PPUSH
49644: CALL_OW 292
49648: IFFALSE 49662
// begin result := true ;
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_INT 1
49657: ST_TO_ADDR
// exit ;
49658: POP
49659: POP
49660: GO 49666
// end ;
49662: GO 49631
49664: POP
49665: POP
// end ;
49666: LD_VAR 0 3
49670: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49671: LD_INT 0
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
// if not unit or not points then
49677: LD_VAR 0 1
49681: NOT
49682: PUSH
49683: LD_VAR 0 2
49687: NOT
49688: OR
49689: IFFALSE 49693
// exit ;
49691: GO 49783
// dist := 99999 ;
49693: LD_ADDR_VAR 0 5
49697: PUSH
49698: LD_INT 99999
49700: ST_TO_ADDR
// for i in points do
49701: LD_ADDR_VAR 0 4
49705: PUSH
49706: LD_VAR 0 2
49710: PUSH
49711: FOR_IN
49712: IFFALSE 49781
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49714: LD_ADDR_VAR 0 6
49718: PUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: LD_VAR 0 4
49728: PUSH
49729: LD_INT 1
49731: ARRAY
49732: PPUSH
49733: LD_VAR 0 4
49737: PUSH
49738: LD_INT 2
49740: ARRAY
49741: PPUSH
49742: CALL_OW 297
49746: ST_TO_ADDR
// if tmpDist < dist then
49747: LD_VAR 0 6
49751: PUSH
49752: LD_VAR 0 5
49756: LESS
49757: IFFALSE 49779
// begin result := i ;
49759: LD_ADDR_VAR 0 3
49763: PUSH
49764: LD_VAR 0 4
49768: ST_TO_ADDR
// dist := tmpDist ;
49769: LD_ADDR_VAR 0 5
49773: PUSH
49774: LD_VAR 0 6
49778: ST_TO_ADDR
// end ; end ;
49779: GO 49711
49781: POP
49782: POP
// end ;
49783: LD_VAR 0 3
49787: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49788: LD_INT 0
49790: PPUSH
// uc_side := side ;
49791: LD_ADDR_OWVAR 20
49795: PUSH
49796: LD_VAR 0 1
49800: ST_TO_ADDR
// uc_nation := 3 ;
49801: LD_ADDR_OWVAR 21
49805: PUSH
49806: LD_INT 3
49808: ST_TO_ADDR
// vc_chassis := 25 ;
49809: LD_ADDR_OWVAR 37
49813: PUSH
49814: LD_INT 25
49816: ST_TO_ADDR
// vc_engine := engine_siberite ;
49817: LD_ADDR_OWVAR 39
49821: PUSH
49822: LD_INT 3
49824: ST_TO_ADDR
// vc_control := control_computer ;
49825: LD_ADDR_OWVAR 38
49829: PUSH
49830: LD_INT 3
49832: ST_TO_ADDR
// vc_weapon := 59 ;
49833: LD_ADDR_OWVAR 40
49837: PUSH
49838: LD_INT 59
49840: ST_TO_ADDR
// result := CreateVehicle ;
49841: LD_ADDR_VAR 0 5
49845: PUSH
49846: CALL_OW 45
49850: ST_TO_ADDR
// SetDir ( result , d ) ;
49851: LD_VAR 0 5
49855: PPUSH
49856: LD_VAR 0 4
49860: PPUSH
49861: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49865: LD_VAR 0 5
49869: PPUSH
49870: LD_VAR 0 2
49874: PPUSH
49875: LD_VAR 0 3
49879: PPUSH
49880: LD_INT 0
49882: PPUSH
49883: CALL_OW 48
// end ;
49887: LD_VAR 0 5
49891: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
49892: LD_INT 0
49894: PPUSH
49895: PPUSH
49896: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
49897: LD_ADDR_VAR 0 2
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
49920: LD_VAR 0 1
49924: NOT
49925: PUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 264
49935: PUSH
49936: LD_INT 12
49938: PUSH
49939: LD_INT 51
49941: PUSH
49942: LD_INT 32
49944: PUSH
49945: LD_INT 89
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: IN
49954: NOT
49955: OR
49956: IFFALSE 49960
// exit ;
49958: GO 50058
// for i := 1 to 3 do
49960: LD_ADDR_VAR 0 3
49964: PUSH
49965: DOUBLE
49966: LD_INT 1
49968: DEC
49969: ST_TO_ADDR
49970: LD_INT 3
49972: PUSH
49973: FOR_TO
49974: IFFALSE 50056
// begin tmp := GetCargo ( cargo , i ) ;
49976: LD_ADDR_VAR 0 4
49980: PUSH
49981: LD_VAR 0 1
49985: PPUSH
49986: LD_VAR 0 3
49990: PPUSH
49991: CALL_OW 289
49995: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
49996: LD_ADDR_VAR 0 2
50000: PUSH
50001: LD_VAR 0 2
50005: PPUSH
50006: LD_VAR 0 3
50010: PPUSH
50011: LD_VAR 0 4
50015: PPUSH
50016: CALL_OW 1
50020: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50021: LD_ADDR_VAR 0 2
50025: PUSH
50026: LD_VAR 0 2
50030: PPUSH
50031: LD_INT 4
50033: PPUSH
50034: LD_VAR 0 2
50038: PUSH
50039: LD_INT 4
50041: ARRAY
50042: PUSH
50043: LD_VAR 0 4
50047: PLUS
50048: PPUSH
50049: CALL_OW 1
50053: ST_TO_ADDR
// end ;
50054: GO 49973
50056: POP
50057: POP
// end ;
50058: LD_VAR 0 2
50062: RET
// export function Length ( array ) ; begin
50063: LD_INT 0
50065: PPUSH
// result := array + 0 ;
50066: LD_ADDR_VAR 0 2
50070: PUSH
50071: LD_VAR 0 1
50075: PUSH
50076: LD_INT 0
50078: PLUS
50079: ST_TO_ADDR
// end ;
50080: LD_VAR 0 2
50084: RET
// export function PrepareArray ( array ) ; begin
50085: LD_INT 0
50087: PPUSH
// result := array diff 0 ;
50088: LD_ADDR_VAR 0 2
50092: PUSH
50093: LD_VAR 0 1
50097: PUSH
50098: LD_INT 0
50100: DIFF
50101: ST_TO_ADDR
// if not result [ 1 ] then
50102: LD_VAR 0 2
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: NOT
50111: IFFALSE 50131
// result := Delete ( result , 1 ) ;
50113: LD_ADDR_VAR 0 2
50117: PUSH
50118: LD_VAR 0 2
50122: PPUSH
50123: LD_INT 1
50125: PPUSH
50126: CALL_OW 3
50130: ST_TO_ADDR
// end ;
50131: LD_VAR 0 2
50135: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50136: LD_INT 0
50138: PPUSH
50139: PPUSH
50140: PPUSH
50141: PPUSH
// sibRocketRange := 25 ;
50142: LD_ADDR_VAR 0 6
50146: PUSH
50147: LD_INT 25
50149: ST_TO_ADDR
// result := false ;
50150: LD_ADDR_VAR 0 4
50154: PUSH
50155: LD_INT 0
50157: ST_TO_ADDR
// for i := 0 to 5 do
50158: LD_ADDR_VAR 0 5
50162: PUSH
50163: DOUBLE
50164: LD_INT 0
50166: DEC
50167: ST_TO_ADDR
50168: LD_INT 5
50170: PUSH
50171: FOR_TO
50172: IFFALSE 50239
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50174: LD_VAR 0 1
50178: PPUSH
50179: LD_VAR 0 5
50183: PPUSH
50184: LD_VAR 0 6
50188: PPUSH
50189: CALL_OW 272
50193: PPUSH
50194: LD_VAR 0 2
50198: PPUSH
50199: LD_VAR 0 5
50203: PPUSH
50204: LD_VAR 0 6
50208: PPUSH
50209: CALL_OW 273
50213: PPUSH
50214: LD_VAR 0 3
50218: PPUSH
50219: CALL_OW 309
50223: IFFALSE 50237
// begin result := true ;
50225: LD_ADDR_VAR 0 4
50229: PUSH
50230: LD_INT 1
50232: ST_TO_ADDR
// exit ;
50233: POP
50234: POP
50235: GO 50241
// end ;
50237: GO 50171
50239: POP
50240: POP
// end ;
50241: LD_VAR 0 4
50245: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50246: LD_INT 0
50248: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50249: LD_VAR 0 1
50253: PPUSH
50254: LD_VAR 0 2
50258: PPUSH
50259: LD_INT 0
50261: PPUSH
50262: LD_INT 0
50264: PPUSH
50265: LD_INT 1
50267: PPUSH
50268: LD_INT 0
50270: PPUSH
50271: CALL_OW 587
// end ; end_of_file
50275: LD_VAR 0 3
50279: RET
// export globalGameSaveCounter ; every 0 0$1 do
50280: GO 50282
50282: DISABLE
// begin enable ;
50283: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50284: LD_STRING updateTimer(
50286: PUSH
50287: LD_OWVAR 1
50291: STR
50292: PUSH
50293: LD_STRING );
50295: STR
50296: PPUSH
50297: CALL_OW 559
// end ;
50301: END
// every 0 0$1 do
50302: GO 50304
50304: DISABLE
// begin globalGameSaveCounter := 0 ;
50305: LD_ADDR_EXP 28
50309: PUSH
50310: LD_INT 0
50312: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50313: LD_STRING setGameSaveCounter(0)
50315: PPUSH
50316: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50320: LD_STRING initStreamRollete();
50322: PPUSH
50323: CALL_OW 559
// InitStreamMode ;
50327: CALL 51653 0 0
// DefineStreamItems ( false ) ;
50331: LD_INT 0
50333: PPUSH
50334: CALL 52117 0 1
// end ;
50338: END
// export function SOS_MapStart ( ) ; begin
50339: LD_INT 0
50341: PPUSH
// if streamModeActive then
50342: LD_EXP 29
50346: IFFALSE 50355
// DefineStreamItems ( true ) ;
50348: LD_INT 1
50350: PPUSH
50351: CALL 52117 0 1
// UpdateLuaVariables ( ) ;
50355: CALL 50372 0 0
// UpdateFactoryWaypoints ( ) ;
50359: CALL 64978 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50363: CALL 65235 0 0
// end ;
50367: LD_VAR 0 1
50371: RET
// function UpdateLuaVariables ( ) ; begin
50372: LD_INT 0
50374: PPUSH
// if globalGameSaveCounter then
50375: LD_EXP 28
50379: IFFALSE 50413
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50381: LD_ADDR_EXP 28
50385: PUSH
50386: LD_EXP 28
50390: PPUSH
50391: CALL 47688 0 1
50395: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50396: LD_STRING setGameSaveCounter(
50398: PUSH
50399: LD_EXP 28
50403: STR
50404: PUSH
50405: LD_STRING )
50407: STR
50408: PPUSH
50409: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50413: LD_STRING setGameDifficulty(
50415: PUSH
50416: LD_OWVAR 67
50420: STR
50421: PUSH
50422: LD_STRING )
50424: STR
50425: PPUSH
50426: CALL_OW 559
// end ;
50430: LD_VAR 0 1
50434: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50435: LD_INT 0
50437: PPUSH
// if p2 = stream_mode then
50438: LD_VAR 0 2
50442: PUSH
50443: LD_INT 100
50445: EQUAL
50446: IFFALSE 51449
// begin if not StreamModeActive then
50448: LD_EXP 29
50452: NOT
50453: IFFALSE 50463
// StreamModeActive := true ;
50455: LD_ADDR_EXP 29
50459: PUSH
50460: LD_INT 1
50462: ST_TO_ADDR
// if p3 = 0 then
50463: LD_VAR 0 3
50467: PUSH
50468: LD_INT 0
50470: EQUAL
50471: IFFALSE 50477
// InitStreamMode ;
50473: CALL 51653 0 0
// if p3 = 1 then
50477: LD_VAR 0 3
50481: PUSH
50482: LD_INT 1
50484: EQUAL
50485: IFFALSE 50495
// sRocket := true ;
50487: LD_ADDR_EXP 34
50491: PUSH
50492: LD_INT 1
50494: ST_TO_ADDR
// if p3 = 2 then
50495: LD_VAR 0 3
50499: PUSH
50500: LD_INT 2
50502: EQUAL
50503: IFFALSE 50513
// sSpeed := true ;
50505: LD_ADDR_EXP 33
50509: PUSH
50510: LD_INT 1
50512: ST_TO_ADDR
// if p3 = 3 then
50513: LD_VAR 0 3
50517: PUSH
50518: LD_INT 3
50520: EQUAL
50521: IFFALSE 50531
// sEngine := true ;
50523: LD_ADDR_EXP 35
50527: PUSH
50528: LD_INT 1
50530: ST_TO_ADDR
// if p3 = 4 then
50531: LD_VAR 0 3
50535: PUSH
50536: LD_INT 4
50538: EQUAL
50539: IFFALSE 50549
// sSpec := true ;
50541: LD_ADDR_EXP 32
50545: PUSH
50546: LD_INT 1
50548: ST_TO_ADDR
// if p3 = 5 then
50549: LD_VAR 0 3
50553: PUSH
50554: LD_INT 5
50556: EQUAL
50557: IFFALSE 50567
// sLevel := true ;
50559: LD_ADDR_EXP 36
50563: PUSH
50564: LD_INT 1
50566: ST_TO_ADDR
// if p3 = 6 then
50567: LD_VAR 0 3
50571: PUSH
50572: LD_INT 6
50574: EQUAL
50575: IFFALSE 50585
// sArmoury := true ;
50577: LD_ADDR_EXP 37
50581: PUSH
50582: LD_INT 1
50584: ST_TO_ADDR
// if p3 = 7 then
50585: LD_VAR 0 3
50589: PUSH
50590: LD_INT 7
50592: EQUAL
50593: IFFALSE 50603
// sRadar := true ;
50595: LD_ADDR_EXP 38
50599: PUSH
50600: LD_INT 1
50602: ST_TO_ADDR
// if p3 = 8 then
50603: LD_VAR 0 3
50607: PUSH
50608: LD_INT 8
50610: EQUAL
50611: IFFALSE 50621
// sBunker := true ;
50613: LD_ADDR_EXP 39
50617: PUSH
50618: LD_INT 1
50620: ST_TO_ADDR
// if p3 = 9 then
50621: LD_VAR 0 3
50625: PUSH
50626: LD_INT 9
50628: EQUAL
50629: IFFALSE 50639
// sHack := true ;
50631: LD_ADDR_EXP 40
50635: PUSH
50636: LD_INT 1
50638: ST_TO_ADDR
// if p3 = 10 then
50639: LD_VAR 0 3
50643: PUSH
50644: LD_INT 10
50646: EQUAL
50647: IFFALSE 50657
// sFire := true ;
50649: LD_ADDR_EXP 41
50653: PUSH
50654: LD_INT 1
50656: ST_TO_ADDR
// if p3 = 11 then
50657: LD_VAR 0 3
50661: PUSH
50662: LD_INT 11
50664: EQUAL
50665: IFFALSE 50675
// sRefresh := true ;
50667: LD_ADDR_EXP 42
50671: PUSH
50672: LD_INT 1
50674: ST_TO_ADDR
// if p3 = 12 then
50675: LD_VAR 0 3
50679: PUSH
50680: LD_INT 12
50682: EQUAL
50683: IFFALSE 50693
// sExp := true ;
50685: LD_ADDR_EXP 43
50689: PUSH
50690: LD_INT 1
50692: ST_TO_ADDR
// if p3 = 13 then
50693: LD_VAR 0 3
50697: PUSH
50698: LD_INT 13
50700: EQUAL
50701: IFFALSE 50711
// sDepot := true ;
50703: LD_ADDR_EXP 44
50707: PUSH
50708: LD_INT 1
50710: ST_TO_ADDR
// if p3 = 14 then
50711: LD_VAR 0 3
50715: PUSH
50716: LD_INT 14
50718: EQUAL
50719: IFFALSE 50729
// sFlag := true ;
50721: LD_ADDR_EXP 45
50725: PUSH
50726: LD_INT 1
50728: ST_TO_ADDR
// if p3 = 15 then
50729: LD_VAR 0 3
50733: PUSH
50734: LD_INT 15
50736: EQUAL
50737: IFFALSE 50747
// sKamikadze := true ;
50739: LD_ADDR_EXP 53
50743: PUSH
50744: LD_INT 1
50746: ST_TO_ADDR
// if p3 = 16 then
50747: LD_VAR 0 3
50751: PUSH
50752: LD_INT 16
50754: EQUAL
50755: IFFALSE 50765
// sTroll := true ;
50757: LD_ADDR_EXP 54
50761: PUSH
50762: LD_INT 1
50764: ST_TO_ADDR
// if p3 = 17 then
50765: LD_VAR 0 3
50769: PUSH
50770: LD_INT 17
50772: EQUAL
50773: IFFALSE 50783
// sSlow := true ;
50775: LD_ADDR_EXP 55
50779: PUSH
50780: LD_INT 1
50782: ST_TO_ADDR
// if p3 = 18 then
50783: LD_VAR 0 3
50787: PUSH
50788: LD_INT 18
50790: EQUAL
50791: IFFALSE 50801
// sLack := true ;
50793: LD_ADDR_EXP 56
50797: PUSH
50798: LD_INT 1
50800: ST_TO_ADDR
// if p3 = 19 then
50801: LD_VAR 0 3
50805: PUSH
50806: LD_INT 19
50808: EQUAL
50809: IFFALSE 50819
// sTank := true ;
50811: LD_ADDR_EXP 58
50815: PUSH
50816: LD_INT 1
50818: ST_TO_ADDR
// if p3 = 20 then
50819: LD_VAR 0 3
50823: PUSH
50824: LD_INT 20
50826: EQUAL
50827: IFFALSE 50837
// sRemote := true ;
50829: LD_ADDR_EXP 59
50833: PUSH
50834: LD_INT 1
50836: ST_TO_ADDR
// if p3 = 21 then
50837: LD_VAR 0 3
50841: PUSH
50842: LD_INT 21
50844: EQUAL
50845: IFFALSE 50855
// sPowell := true ;
50847: LD_ADDR_EXP 60
50851: PUSH
50852: LD_INT 1
50854: ST_TO_ADDR
// if p3 = 22 then
50855: LD_VAR 0 3
50859: PUSH
50860: LD_INT 22
50862: EQUAL
50863: IFFALSE 50873
// sTeleport := true ;
50865: LD_ADDR_EXP 63
50869: PUSH
50870: LD_INT 1
50872: ST_TO_ADDR
// if p3 = 23 then
50873: LD_VAR 0 3
50877: PUSH
50878: LD_INT 23
50880: EQUAL
50881: IFFALSE 50891
// sOilTower := true ;
50883: LD_ADDR_EXP 65
50887: PUSH
50888: LD_INT 1
50890: ST_TO_ADDR
// if p3 = 24 then
50891: LD_VAR 0 3
50895: PUSH
50896: LD_INT 24
50898: EQUAL
50899: IFFALSE 50909
// sShovel := true ;
50901: LD_ADDR_EXP 66
50905: PUSH
50906: LD_INT 1
50908: ST_TO_ADDR
// if p3 = 25 then
50909: LD_VAR 0 3
50913: PUSH
50914: LD_INT 25
50916: EQUAL
50917: IFFALSE 50927
// sSheik := true ;
50919: LD_ADDR_EXP 67
50923: PUSH
50924: LD_INT 1
50926: ST_TO_ADDR
// if p3 = 26 then
50927: LD_VAR 0 3
50931: PUSH
50932: LD_INT 26
50934: EQUAL
50935: IFFALSE 50945
// sEarthquake := true ;
50937: LD_ADDR_EXP 69
50941: PUSH
50942: LD_INT 1
50944: ST_TO_ADDR
// if p3 = 27 then
50945: LD_VAR 0 3
50949: PUSH
50950: LD_INT 27
50952: EQUAL
50953: IFFALSE 50963
// sAI := true ;
50955: LD_ADDR_EXP 70
50959: PUSH
50960: LD_INT 1
50962: ST_TO_ADDR
// if p3 = 28 then
50963: LD_VAR 0 3
50967: PUSH
50968: LD_INT 28
50970: EQUAL
50971: IFFALSE 50981
// sCargo := true ;
50973: LD_ADDR_EXP 73
50977: PUSH
50978: LD_INT 1
50980: ST_TO_ADDR
// if p3 = 29 then
50981: LD_VAR 0 3
50985: PUSH
50986: LD_INT 29
50988: EQUAL
50989: IFFALSE 50999
// sDLaser := true ;
50991: LD_ADDR_EXP 74
50995: PUSH
50996: LD_INT 1
50998: ST_TO_ADDR
// if p3 = 30 then
50999: LD_VAR 0 3
51003: PUSH
51004: LD_INT 30
51006: EQUAL
51007: IFFALSE 51017
// sExchange := true ;
51009: LD_ADDR_EXP 75
51013: PUSH
51014: LD_INT 1
51016: ST_TO_ADDR
// if p3 = 31 then
51017: LD_VAR 0 3
51021: PUSH
51022: LD_INT 31
51024: EQUAL
51025: IFFALSE 51035
// sFac := true ;
51027: LD_ADDR_EXP 76
51031: PUSH
51032: LD_INT 1
51034: ST_TO_ADDR
// if p3 = 32 then
51035: LD_VAR 0 3
51039: PUSH
51040: LD_INT 32
51042: EQUAL
51043: IFFALSE 51053
// sPower := true ;
51045: LD_ADDR_EXP 77
51049: PUSH
51050: LD_INT 1
51052: ST_TO_ADDR
// if p3 = 33 then
51053: LD_VAR 0 3
51057: PUSH
51058: LD_INT 33
51060: EQUAL
51061: IFFALSE 51071
// sRandom := true ;
51063: LD_ADDR_EXP 78
51067: PUSH
51068: LD_INT 1
51070: ST_TO_ADDR
// if p3 = 34 then
51071: LD_VAR 0 3
51075: PUSH
51076: LD_INT 34
51078: EQUAL
51079: IFFALSE 51089
// sShield := true ;
51081: LD_ADDR_EXP 79
51085: PUSH
51086: LD_INT 1
51088: ST_TO_ADDR
// if p3 = 35 then
51089: LD_VAR 0 3
51093: PUSH
51094: LD_INT 35
51096: EQUAL
51097: IFFALSE 51107
// sTime := true ;
51099: LD_ADDR_EXP 80
51103: PUSH
51104: LD_INT 1
51106: ST_TO_ADDR
// if p3 = 36 then
51107: LD_VAR 0 3
51111: PUSH
51112: LD_INT 36
51114: EQUAL
51115: IFFALSE 51125
// sTools := true ;
51117: LD_ADDR_EXP 81
51121: PUSH
51122: LD_INT 1
51124: ST_TO_ADDR
// if p3 = 101 then
51125: LD_VAR 0 3
51129: PUSH
51130: LD_INT 101
51132: EQUAL
51133: IFFALSE 51143
// sSold := true ;
51135: LD_ADDR_EXP 46
51139: PUSH
51140: LD_INT 1
51142: ST_TO_ADDR
// if p3 = 102 then
51143: LD_VAR 0 3
51147: PUSH
51148: LD_INT 102
51150: EQUAL
51151: IFFALSE 51161
// sDiff := true ;
51153: LD_ADDR_EXP 47
51157: PUSH
51158: LD_INT 1
51160: ST_TO_ADDR
// if p3 = 103 then
51161: LD_VAR 0 3
51165: PUSH
51166: LD_INT 103
51168: EQUAL
51169: IFFALSE 51179
// sFog := true ;
51171: LD_ADDR_EXP 50
51175: PUSH
51176: LD_INT 1
51178: ST_TO_ADDR
// if p3 = 104 then
51179: LD_VAR 0 3
51183: PUSH
51184: LD_INT 104
51186: EQUAL
51187: IFFALSE 51197
// sReset := true ;
51189: LD_ADDR_EXP 51
51193: PUSH
51194: LD_INT 1
51196: ST_TO_ADDR
// if p3 = 105 then
51197: LD_VAR 0 3
51201: PUSH
51202: LD_INT 105
51204: EQUAL
51205: IFFALSE 51215
// sSun := true ;
51207: LD_ADDR_EXP 52
51211: PUSH
51212: LD_INT 1
51214: ST_TO_ADDR
// if p3 = 106 then
51215: LD_VAR 0 3
51219: PUSH
51220: LD_INT 106
51222: EQUAL
51223: IFFALSE 51233
// sTiger := true ;
51225: LD_ADDR_EXP 48
51229: PUSH
51230: LD_INT 1
51232: ST_TO_ADDR
// if p3 = 107 then
51233: LD_VAR 0 3
51237: PUSH
51238: LD_INT 107
51240: EQUAL
51241: IFFALSE 51251
// sBomb := true ;
51243: LD_ADDR_EXP 49
51247: PUSH
51248: LD_INT 1
51250: ST_TO_ADDR
// if p3 = 108 then
51251: LD_VAR 0 3
51255: PUSH
51256: LD_INT 108
51258: EQUAL
51259: IFFALSE 51269
// sWound := true ;
51261: LD_ADDR_EXP 57
51265: PUSH
51266: LD_INT 1
51268: ST_TO_ADDR
// if p3 = 109 then
51269: LD_VAR 0 3
51273: PUSH
51274: LD_INT 109
51276: EQUAL
51277: IFFALSE 51287
// sBetray := true ;
51279: LD_ADDR_EXP 61
51283: PUSH
51284: LD_INT 1
51286: ST_TO_ADDR
// if p3 = 110 then
51287: LD_VAR 0 3
51291: PUSH
51292: LD_INT 110
51294: EQUAL
51295: IFFALSE 51305
// sContamin := true ;
51297: LD_ADDR_EXP 62
51301: PUSH
51302: LD_INT 1
51304: ST_TO_ADDR
// if p3 = 111 then
51305: LD_VAR 0 3
51309: PUSH
51310: LD_INT 111
51312: EQUAL
51313: IFFALSE 51323
// sOil := true ;
51315: LD_ADDR_EXP 64
51319: PUSH
51320: LD_INT 1
51322: ST_TO_ADDR
// if p3 = 112 then
51323: LD_VAR 0 3
51327: PUSH
51328: LD_INT 112
51330: EQUAL
51331: IFFALSE 51341
// sStu := true ;
51333: LD_ADDR_EXP 68
51337: PUSH
51338: LD_INT 1
51340: ST_TO_ADDR
// if p3 = 113 then
51341: LD_VAR 0 3
51345: PUSH
51346: LD_INT 113
51348: EQUAL
51349: IFFALSE 51359
// sBazooka := true ;
51351: LD_ADDR_EXP 71
51355: PUSH
51356: LD_INT 1
51358: ST_TO_ADDR
// if p3 = 114 then
51359: LD_VAR 0 3
51363: PUSH
51364: LD_INT 114
51366: EQUAL
51367: IFFALSE 51377
// sMortar := true ;
51369: LD_ADDR_EXP 72
51373: PUSH
51374: LD_INT 1
51376: ST_TO_ADDR
// if p3 = 115 then
51377: LD_VAR 0 3
51381: PUSH
51382: LD_INT 115
51384: EQUAL
51385: IFFALSE 51395
// sRanger := true ;
51387: LD_ADDR_EXP 82
51391: PUSH
51392: LD_INT 1
51394: ST_TO_ADDR
// if p3 = 116 then
51395: LD_VAR 0 3
51399: PUSH
51400: LD_INT 116
51402: EQUAL
51403: IFFALSE 51413
// sComputer := true ;
51405: LD_ADDR_EXP 83
51409: PUSH
51410: LD_INT 1
51412: ST_TO_ADDR
// if p3 = 117 then
51413: LD_VAR 0 3
51417: PUSH
51418: LD_INT 117
51420: EQUAL
51421: IFFALSE 51431
// s30 := true ;
51423: LD_ADDR_EXP 84
51427: PUSH
51428: LD_INT 1
51430: ST_TO_ADDR
// if p3 = 118 then
51431: LD_VAR 0 3
51435: PUSH
51436: LD_INT 118
51438: EQUAL
51439: IFFALSE 51449
// s60 := true ;
51441: LD_ADDR_EXP 85
51445: PUSH
51446: LD_INT 1
51448: ST_TO_ADDR
// end ; if p2 = hack_mode then
51449: LD_VAR 0 2
51453: PUSH
51454: LD_INT 101
51456: EQUAL
51457: IFFALSE 51585
// begin case p3 of 1 :
51459: LD_VAR 0 3
51463: PUSH
51464: LD_INT 1
51466: DOUBLE
51467: EQUAL
51468: IFTRUE 51472
51470: GO 51479
51472: POP
// hHackUnlimitedResources ; 2 :
51473: CALL 63724 0 0
51477: GO 51585
51479: LD_INT 2
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51494
51487: POP
// hHackSetLevel10 ; 3 :
51488: CALL 63857 0 0
51492: GO 51585
51494: LD_INT 3
51496: DOUBLE
51497: EQUAL
51498: IFTRUE 51502
51500: GO 51509
51502: POP
// hHackSetLevel10YourUnits ; 4 :
51503: CALL 63942 0 0
51507: GO 51585
51509: LD_INT 4
51511: DOUBLE
51512: EQUAL
51513: IFTRUE 51517
51515: GO 51524
51517: POP
// hHackInvincible ; 5 :
51518: CALL 64390 0 0
51522: GO 51585
51524: LD_INT 5
51526: DOUBLE
51527: EQUAL
51528: IFTRUE 51532
51530: GO 51539
51532: POP
// hHackInvisible ; 6 :
51533: CALL 64501 0 0
51537: GO 51585
51539: LD_INT 6
51541: DOUBLE
51542: EQUAL
51543: IFTRUE 51547
51545: GO 51554
51547: POP
// hHackChangeYourSide ; 7 :
51548: CALL 64558 0 0
51552: GO 51585
51554: LD_INT 7
51556: DOUBLE
51557: EQUAL
51558: IFTRUE 51562
51560: GO 51569
51562: POP
// hHackChangeUnitSide ; 8 :
51563: CALL 64600 0 0
51567: GO 51585
51569: LD_INT 8
51571: DOUBLE
51572: EQUAL
51573: IFTRUE 51577
51575: GO 51584
51577: POP
// hHackFog ; end ;
51578: CALL 64701 0 0
51582: GO 51585
51584: POP
// end ; if p2 = game_save_mode then
51585: LD_VAR 0 2
51589: PUSH
51590: LD_INT 102
51592: EQUAL
51593: IFFALSE 51648
// begin if p3 = 1 then
51595: LD_VAR 0 3
51599: PUSH
51600: LD_INT 1
51602: EQUAL
51603: IFFALSE 51615
// globalGameSaveCounter := p4 ;
51605: LD_ADDR_EXP 28
51609: PUSH
51610: LD_VAR 0 4
51614: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51615: LD_VAR 0 3
51619: PUSH
51620: LD_INT 2
51622: EQUAL
51623: PUSH
51624: LD_EXP 28
51628: AND
51629: IFFALSE 51648
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51631: LD_STRING setGameSaveCounter(
51633: PUSH
51634: LD_EXP 28
51638: STR
51639: PUSH
51640: LD_STRING )
51642: STR
51643: PPUSH
51644: CALL_OW 559
// end ; end ;
51648: LD_VAR 0 7
51652: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51653: LD_INT 0
51655: PPUSH
// streamModeActive := false ;
51656: LD_ADDR_EXP 29
51660: PUSH
51661: LD_INT 0
51663: ST_TO_ADDR
// normalCounter := 36 ;
51664: LD_ADDR_EXP 30
51668: PUSH
51669: LD_INT 36
51671: ST_TO_ADDR
// hardcoreCounter := 18 ;
51672: LD_ADDR_EXP 31
51676: PUSH
51677: LD_INT 18
51679: ST_TO_ADDR
// sRocket := false ;
51680: LD_ADDR_EXP 34
51684: PUSH
51685: LD_INT 0
51687: ST_TO_ADDR
// sSpeed := false ;
51688: LD_ADDR_EXP 33
51692: PUSH
51693: LD_INT 0
51695: ST_TO_ADDR
// sEngine := false ;
51696: LD_ADDR_EXP 35
51700: PUSH
51701: LD_INT 0
51703: ST_TO_ADDR
// sSpec := false ;
51704: LD_ADDR_EXP 32
51708: PUSH
51709: LD_INT 0
51711: ST_TO_ADDR
// sLevel := false ;
51712: LD_ADDR_EXP 36
51716: PUSH
51717: LD_INT 0
51719: ST_TO_ADDR
// sArmoury := false ;
51720: LD_ADDR_EXP 37
51724: PUSH
51725: LD_INT 0
51727: ST_TO_ADDR
// sRadar := false ;
51728: LD_ADDR_EXP 38
51732: PUSH
51733: LD_INT 0
51735: ST_TO_ADDR
// sBunker := false ;
51736: LD_ADDR_EXP 39
51740: PUSH
51741: LD_INT 0
51743: ST_TO_ADDR
// sHack := false ;
51744: LD_ADDR_EXP 40
51748: PUSH
51749: LD_INT 0
51751: ST_TO_ADDR
// sFire := false ;
51752: LD_ADDR_EXP 41
51756: PUSH
51757: LD_INT 0
51759: ST_TO_ADDR
// sRefresh := false ;
51760: LD_ADDR_EXP 42
51764: PUSH
51765: LD_INT 0
51767: ST_TO_ADDR
// sExp := false ;
51768: LD_ADDR_EXP 43
51772: PUSH
51773: LD_INT 0
51775: ST_TO_ADDR
// sDepot := false ;
51776: LD_ADDR_EXP 44
51780: PUSH
51781: LD_INT 0
51783: ST_TO_ADDR
// sFlag := false ;
51784: LD_ADDR_EXP 45
51788: PUSH
51789: LD_INT 0
51791: ST_TO_ADDR
// sKamikadze := false ;
51792: LD_ADDR_EXP 53
51796: PUSH
51797: LD_INT 0
51799: ST_TO_ADDR
// sTroll := false ;
51800: LD_ADDR_EXP 54
51804: PUSH
51805: LD_INT 0
51807: ST_TO_ADDR
// sSlow := false ;
51808: LD_ADDR_EXP 55
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
// sLack := false ;
51816: LD_ADDR_EXP 56
51820: PUSH
51821: LD_INT 0
51823: ST_TO_ADDR
// sTank := false ;
51824: LD_ADDR_EXP 58
51828: PUSH
51829: LD_INT 0
51831: ST_TO_ADDR
// sRemote := false ;
51832: LD_ADDR_EXP 59
51836: PUSH
51837: LD_INT 0
51839: ST_TO_ADDR
// sPowell := false ;
51840: LD_ADDR_EXP 60
51844: PUSH
51845: LD_INT 0
51847: ST_TO_ADDR
// sTeleport := false ;
51848: LD_ADDR_EXP 63
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
// sOilTower := false ;
51856: LD_ADDR_EXP 65
51860: PUSH
51861: LD_INT 0
51863: ST_TO_ADDR
// sShovel := false ;
51864: LD_ADDR_EXP 66
51868: PUSH
51869: LD_INT 0
51871: ST_TO_ADDR
// sSheik := false ;
51872: LD_ADDR_EXP 67
51876: PUSH
51877: LD_INT 0
51879: ST_TO_ADDR
// sEarthquake := false ;
51880: LD_ADDR_EXP 69
51884: PUSH
51885: LD_INT 0
51887: ST_TO_ADDR
// sAI := false ;
51888: LD_ADDR_EXP 70
51892: PUSH
51893: LD_INT 0
51895: ST_TO_ADDR
// sCargo := false ;
51896: LD_ADDR_EXP 73
51900: PUSH
51901: LD_INT 0
51903: ST_TO_ADDR
// sDLaser := false ;
51904: LD_ADDR_EXP 74
51908: PUSH
51909: LD_INT 0
51911: ST_TO_ADDR
// sExchange := false ;
51912: LD_ADDR_EXP 75
51916: PUSH
51917: LD_INT 0
51919: ST_TO_ADDR
// sFac := false ;
51920: LD_ADDR_EXP 76
51924: PUSH
51925: LD_INT 0
51927: ST_TO_ADDR
// sPower := false ;
51928: LD_ADDR_EXP 77
51932: PUSH
51933: LD_INT 0
51935: ST_TO_ADDR
// sRandom := false ;
51936: LD_ADDR_EXP 78
51940: PUSH
51941: LD_INT 0
51943: ST_TO_ADDR
// sShield := false ;
51944: LD_ADDR_EXP 79
51948: PUSH
51949: LD_INT 0
51951: ST_TO_ADDR
// sTime := false ;
51952: LD_ADDR_EXP 80
51956: PUSH
51957: LD_INT 0
51959: ST_TO_ADDR
// sTools := false ;
51960: LD_ADDR_EXP 81
51964: PUSH
51965: LD_INT 0
51967: ST_TO_ADDR
// sSold := false ;
51968: LD_ADDR_EXP 46
51972: PUSH
51973: LD_INT 0
51975: ST_TO_ADDR
// sDiff := false ;
51976: LD_ADDR_EXP 47
51980: PUSH
51981: LD_INT 0
51983: ST_TO_ADDR
// sFog := false ;
51984: LD_ADDR_EXP 50
51988: PUSH
51989: LD_INT 0
51991: ST_TO_ADDR
// sReset := false ;
51992: LD_ADDR_EXP 51
51996: PUSH
51997: LD_INT 0
51999: ST_TO_ADDR
// sSun := false ;
52000: LD_ADDR_EXP 52
52004: PUSH
52005: LD_INT 0
52007: ST_TO_ADDR
// sTiger := false ;
52008: LD_ADDR_EXP 48
52012: PUSH
52013: LD_INT 0
52015: ST_TO_ADDR
// sBomb := false ;
52016: LD_ADDR_EXP 49
52020: PUSH
52021: LD_INT 0
52023: ST_TO_ADDR
// sWound := false ;
52024: LD_ADDR_EXP 57
52028: PUSH
52029: LD_INT 0
52031: ST_TO_ADDR
// sBetray := false ;
52032: LD_ADDR_EXP 61
52036: PUSH
52037: LD_INT 0
52039: ST_TO_ADDR
// sContamin := false ;
52040: LD_ADDR_EXP 62
52044: PUSH
52045: LD_INT 0
52047: ST_TO_ADDR
// sOil := false ;
52048: LD_ADDR_EXP 64
52052: PUSH
52053: LD_INT 0
52055: ST_TO_ADDR
// sStu := false ;
52056: LD_ADDR_EXP 68
52060: PUSH
52061: LD_INT 0
52063: ST_TO_ADDR
// sBazooka := false ;
52064: LD_ADDR_EXP 71
52068: PUSH
52069: LD_INT 0
52071: ST_TO_ADDR
// sMortar := false ;
52072: LD_ADDR_EXP 72
52076: PUSH
52077: LD_INT 0
52079: ST_TO_ADDR
// sRanger := false ;
52080: LD_ADDR_EXP 82
52084: PUSH
52085: LD_INT 0
52087: ST_TO_ADDR
// sComputer := false ;
52088: LD_ADDR_EXP 83
52092: PUSH
52093: LD_INT 0
52095: ST_TO_ADDR
// s30 := false ;
52096: LD_ADDR_EXP 84
52100: PUSH
52101: LD_INT 0
52103: ST_TO_ADDR
// s60 := false ;
52104: LD_ADDR_EXP 85
52108: PUSH
52109: LD_INT 0
52111: ST_TO_ADDR
// end ;
52112: LD_VAR 0 1
52116: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52117: LD_INT 0
52119: PPUSH
52120: PPUSH
52121: PPUSH
52122: PPUSH
52123: PPUSH
52124: PPUSH
52125: PPUSH
// result := [ ] ;
52126: LD_ADDR_VAR 0 2
52130: PUSH
52131: EMPTY
52132: ST_TO_ADDR
// if campaign_id = 1 then
52133: LD_OWVAR 69
52137: PUSH
52138: LD_INT 1
52140: EQUAL
52141: IFFALSE 55307
// begin case mission_number of 1 :
52143: LD_OWVAR 70
52147: PUSH
52148: LD_INT 1
52150: DOUBLE
52151: EQUAL
52152: IFTRUE 52156
52154: GO 52232
52156: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52157: LD_ADDR_VAR 0 2
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: LD_INT 11
52170: PUSH
52171: LD_INT 12
52173: PUSH
52174: LD_INT 15
52176: PUSH
52177: LD_INT 16
52179: PUSH
52180: LD_INT 22
52182: PUSH
52183: LD_INT 23
52185: PUSH
52186: LD_INT 26
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 101
52202: PUSH
52203: LD_INT 102
52205: PUSH
52206: LD_INT 106
52208: PUSH
52209: LD_INT 116
52211: PUSH
52212: LD_INT 117
52214: PUSH
52215: LD_INT 118
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: ST_TO_ADDR
52230: GO 55305
52232: LD_INT 2
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52240
52238: GO 52324
52240: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52241: LD_ADDR_VAR 0 2
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 4
52251: PUSH
52252: LD_INT 11
52254: PUSH
52255: LD_INT 12
52257: PUSH
52258: LD_INT 15
52260: PUSH
52261: LD_INT 16
52263: PUSH
52264: LD_INT 22
52266: PUSH
52267: LD_INT 23
52269: PUSH
52270: LD_INT 26
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 101
52286: PUSH
52287: LD_INT 102
52289: PUSH
52290: LD_INT 105
52292: PUSH
52293: LD_INT 106
52295: PUSH
52296: LD_INT 108
52298: PUSH
52299: LD_INT 116
52301: PUSH
52302: LD_INT 117
52304: PUSH
52305: LD_INT 118
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: ST_TO_ADDR
52322: GO 55305
52324: LD_INT 3
52326: DOUBLE
52327: EQUAL
52328: IFTRUE 52332
52330: GO 52420
52332: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52333: LD_ADDR_VAR 0 2
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 4
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: LD_INT 11
52349: PUSH
52350: LD_INT 12
52352: PUSH
52353: LD_INT 15
52355: PUSH
52356: LD_INT 16
52358: PUSH
52359: LD_INT 22
52361: PUSH
52362: LD_INT 26
52364: PUSH
52365: LD_INT 36
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 101
52382: PUSH
52383: LD_INT 102
52385: PUSH
52386: LD_INT 105
52388: PUSH
52389: LD_INT 106
52391: PUSH
52392: LD_INT 108
52394: PUSH
52395: LD_INT 116
52397: PUSH
52398: LD_INT 117
52400: PUSH
52401: LD_INT 118
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: ST_TO_ADDR
52418: GO 55305
52420: LD_INT 4
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52428
52426: GO 52524
52428: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52429: LD_ADDR_VAR 0 2
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: LD_INT 4
52439: PUSH
52440: LD_INT 5
52442: PUSH
52443: LD_INT 8
52445: PUSH
52446: LD_INT 11
52448: PUSH
52449: LD_INT 12
52451: PUSH
52452: LD_INT 15
52454: PUSH
52455: LD_INT 16
52457: PUSH
52458: LD_INT 22
52460: PUSH
52461: LD_INT 23
52463: PUSH
52464: LD_INT 26
52466: PUSH
52467: LD_INT 36
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 101
52486: PUSH
52487: LD_INT 102
52489: PUSH
52490: LD_INT 105
52492: PUSH
52493: LD_INT 106
52495: PUSH
52496: LD_INT 108
52498: PUSH
52499: LD_INT 116
52501: PUSH
52502: LD_INT 117
52504: PUSH
52505: LD_INT 118
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: ST_TO_ADDR
52522: GO 55305
52524: LD_INT 5
52526: DOUBLE
52527: EQUAL
52528: IFTRUE 52532
52530: GO 52644
52532: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52533: LD_ADDR_VAR 0 2
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: LD_INT 4
52543: PUSH
52544: LD_INT 5
52546: PUSH
52547: LD_INT 6
52549: PUSH
52550: LD_INT 8
52552: PUSH
52553: LD_INT 11
52555: PUSH
52556: LD_INT 12
52558: PUSH
52559: LD_INT 15
52561: PUSH
52562: LD_INT 16
52564: PUSH
52565: LD_INT 22
52567: PUSH
52568: LD_INT 23
52570: PUSH
52571: LD_INT 25
52573: PUSH
52574: LD_INT 26
52576: PUSH
52577: LD_INT 36
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 101
52598: PUSH
52599: LD_INT 102
52601: PUSH
52602: LD_INT 105
52604: PUSH
52605: LD_INT 106
52607: PUSH
52608: LD_INT 108
52610: PUSH
52611: LD_INT 109
52613: PUSH
52614: LD_INT 112
52616: PUSH
52617: LD_INT 116
52619: PUSH
52620: LD_INT 117
52622: PUSH
52623: LD_INT 118
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: ST_TO_ADDR
52642: GO 55305
52644: LD_INT 6
52646: DOUBLE
52647: EQUAL
52648: IFTRUE 52652
52650: GO 52784
52652: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52653: LD_ADDR_VAR 0 2
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: LD_INT 5
52666: PUSH
52667: LD_INT 6
52669: PUSH
52670: LD_INT 8
52672: PUSH
52673: LD_INT 11
52675: PUSH
52676: LD_INT 12
52678: PUSH
52679: LD_INT 15
52681: PUSH
52682: LD_INT 16
52684: PUSH
52685: LD_INT 20
52687: PUSH
52688: LD_INT 21
52690: PUSH
52691: LD_INT 22
52693: PUSH
52694: LD_INT 23
52696: PUSH
52697: LD_INT 25
52699: PUSH
52700: LD_INT 26
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 31
52708: PUSH
52709: LD_INT 32
52711: PUSH
52712: LD_INT 36
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 101
52738: PUSH
52739: LD_INT 102
52741: PUSH
52742: LD_INT 105
52744: PUSH
52745: LD_INT 106
52747: PUSH
52748: LD_INT 108
52750: PUSH
52751: LD_INT 109
52753: PUSH
52754: LD_INT 112
52756: PUSH
52757: LD_INT 116
52759: PUSH
52760: LD_INT 117
52762: PUSH
52763: LD_INT 118
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: ST_TO_ADDR
52782: GO 55305
52784: LD_INT 7
52786: DOUBLE
52787: EQUAL
52788: IFTRUE 52792
52790: GO 52904
52792: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52793: LD_ADDR_VAR 0 2
52797: PUSH
52798: LD_INT 2
52800: PUSH
52801: LD_INT 4
52803: PUSH
52804: LD_INT 5
52806: PUSH
52807: LD_INT 7
52809: PUSH
52810: LD_INT 11
52812: PUSH
52813: LD_INT 12
52815: PUSH
52816: LD_INT 15
52818: PUSH
52819: LD_INT 16
52821: PUSH
52822: LD_INT 20
52824: PUSH
52825: LD_INT 21
52827: PUSH
52828: LD_INT 22
52830: PUSH
52831: LD_INT 23
52833: PUSH
52834: LD_INT 25
52836: PUSH
52837: LD_INT 26
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 101
52858: PUSH
52859: LD_INT 102
52861: PUSH
52862: LD_INT 103
52864: PUSH
52865: LD_INT 105
52867: PUSH
52868: LD_INT 106
52870: PUSH
52871: LD_INT 108
52873: PUSH
52874: LD_INT 112
52876: PUSH
52877: LD_INT 116
52879: PUSH
52880: LD_INT 117
52882: PUSH
52883: LD_INT 118
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: ST_TO_ADDR
52902: GO 55305
52904: LD_INT 8
52906: DOUBLE
52907: EQUAL
52908: IFTRUE 52912
52910: GO 53052
52912: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52913: LD_ADDR_VAR 0 2
52917: PUSH
52918: LD_INT 2
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: LD_INT 5
52926: PUSH
52927: LD_INT 6
52929: PUSH
52930: LD_INT 7
52932: PUSH
52933: LD_INT 8
52935: PUSH
52936: LD_INT 11
52938: PUSH
52939: LD_INT 12
52941: PUSH
52942: LD_INT 15
52944: PUSH
52945: LD_INT 16
52947: PUSH
52948: LD_INT 20
52950: PUSH
52951: LD_INT 21
52953: PUSH
52954: LD_INT 22
52956: PUSH
52957: LD_INT 23
52959: PUSH
52960: LD_INT 25
52962: PUSH
52963: LD_INT 26
52965: PUSH
52966: LD_INT 30
52968: PUSH
52969: LD_INT 31
52971: PUSH
52972: LD_INT 32
52974: PUSH
52975: LD_INT 36
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 101
53002: PUSH
53003: LD_INT 102
53005: PUSH
53006: LD_INT 103
53008: PUSH
53009: LD_INT 105
53011: PUSH
53012: LD_INT 106
53014: PUSH
53015: LD_INT 108
53017: PUSH
53018: LD_INT 109
53020: PUSH
53021: LD_INT 112
53023: PUSH
53024: LD_INT 116
53026: PUSH
53027: LD_INT 117
53029: PUSH
53030: LD_INT 118
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: ST_TO_ADDR
53050: GO 55305
53052: LD_INT 9
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53060
53058: GO 53208
53060: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53061: LD_ADDR_VAR 0 2
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: LD_INT 5
53074: PUSH
53075: LD_INT 6
53077: PUSH
53078: LD_INT 7
53080: PUSH
53081: LD_INT 8
53083: PUSH
53084: LD_INT 11
53086: PUSH
53087: LD_INT 12
53089: PUSH
53090: LD_INT 15
53092: PUSH
53093: LD_INT 16
53095: PUSH
53096: LD_INT 20
53098: PUSH
53099: LD_INT 21
53101: PUSH
53102: LD_INT 22
53104: PUSH
53105: LD_INT 23
53107: PUSH
53108: LD_INT 25
53110: PUSH
53111: LD_INT 26
53113: PUSH
53114: LD_INT 28
53116: PUSH
53117: LD_INT 30
53119: PUSH
53120: LD_INT 31
53122: PUSH
53123: LD_INT 32
53125: PUSH
53126: LD_INT 36
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 101
53154: PUSH
53155: LD_INT 102
53157: PUSH
53158: LD_INT 103
53160: PUSH
53161: LD_INT 105
53163: PUSH
53164: LD_INT 106
53166: PUSH
53167: LD_INT 108
53169: PUSH
53170: LD_INT 109
53172: PUSH
53173: LD_INT 112
53175: PUSH
53176: LD_INT 114
53178: PUSH
53179: LD_INT 116
53181: PUSH
53182: LD_INT 117
53184: PUSH
53185: LD_INT 118
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: ST_TO_ADDR
53206: GO 55305
53208: LD_INT 10
53210: DOUBLE
53211: EQUAL
53212: IFTRUE 53216
53214: GO 53412
53216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53217: LD_ADDR_VAR 0 2
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 5
53230: PUSH
53231: LD_INT 6
53233: PUSH
53234: LD_INT 7
53236: PUSH
53237: LD_INT 8
53239: PUSH
53240: LD_INT 9
53242: PUSH
53243: LD_INT 10
53245: PUSH
53246: LD_INT 11
53248: PUSH
53249: LD_INT 12
53251: PUSH
53252: LD_INT 13
53254: PUSH
53255: LD_INT 14
53257: PUSH
53258: LD_INT 15
53260: PUSH
53261: LD_INT 16
53263: PUSH
53264: LD_INT 17
53266: PUSH
53267: LD_INT 18
53269: PUSH
53270: LD_INT 19
53272: PUSH
53273: LD_INT 20
53275: PUSH
53276: LD_INT 21
53278: PUSH
53279: LD_INT 22
53281: PUSH
53282: LD_INT 23
53284: PUSH
53285: LD_INT 24
53287: PUSH
53288: LD_INT 25
53290: PUSH
53291: LD_INT 26
53293: PUSH
53294: LD_INT 28
53296: PUSH
53297: LD_INT 30
53299: PUSH
53300: LD_INT 31
53302: PUSH
53303: LD_INT 32
53305: PUSH
53306: LD_INT 36
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 101
53342: PUSH
53343: LD_INT 102
53345: PUSH
53346: LD_INT 103
53348: PUSH
53349: LD_INT 104
53351: PUSH
53352: LD_INT 105
53354: PUSH
53355: LD_INT 106
53357: PUSH
53358: LD_INT 107
53360: PUSH
53361: LD_INT 108
53363: PUSH
53364: LD_INT 109
53366: PUSH
53367: LD_INT 110
53369: PUSH
53370: LD_INT 111
53372: PUSH
53373: LD_INT 112
53375: PUSH
53376: LD_INT 114
53378: PUSH
53379: LD_INT 116
53381: PUSH
53382: LD_INT 117
53384: PUSH
53385: LD_INT 118
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: ST_TO_ADDR
53410: GO 55305
53412: LD_INT 11
53414: DOUBLE
53415: EQUAL
53416: IFTRUE 53420
53418: GO 53624
53420: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53421: LD_ADDR_VAR 0 2
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: LD_INT 6
53440: PUSH
53441: LD_INT 7
53443: PUSH
53444: LD_INT 8
53446: PUSH
53447: LD_INT 9
53449: PUSH
53450: LD_INT 10
53452: PUSH
53453: LD_INT 11
53455: PUSH
53456: LD_INT 12
53458: PUSH
53459: LD_INT 13
53461: PUSH
53462: LD_INT 14
53464: PUSH
53465: LD_INT 15
53467: PUSH
53468: LD_INT 16
53470: PUSH
53471: LD_INT 17
53473: PUSH
53474: LD_INT 18
53476: PUSH
53477: LD_INT 19
53479: PUSH
53480: LD_INT 20
53482: PUSH
53483: LD_INT 21
53485: PUSH
53486: LD_INT 22
53488: PUSH
53489: LD_INT 23
53491: PUSH
53492: LD_INT 24
53494: PUSH
53495: LD_INT 25
53497: PUSH
53498: LD_INT 26
53500: PUSH
53501: LD_INT 28
53503: PUSH
53504: LD_INT 30
53506: PUSH
53507: LD_INT 31
53509: PUSH
53510: LD_INT 32
53512: PUSH
53513: LD_INT 34
53515: PUSH
53516: LD_INT 36
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 101
53554: PUSH
53555: LD_INT 102
53557: PUSH
53558: LD_INT 103
53560: PUSH
53561: LD_INT 104
53563: PUSH
53564: LD_INT 105
53566: PUSH
53567: LD_INT 106
53569: PUSH
53570: LD_INT 107
53572: PUSH
53573: LD_INT 108
53575: PUSH
53576: LD_INT 109
53578: PUSH
53579: LD_INT 110
53581: PUSH
53582: LD_INT 111
53584: PUSH
53585: LD_INT 112
53587: PUSH
53588: LD_INT 114
53590: PUSH
53591: LD_INT 116
53593: PUSH
53594: LD_INT 117
53596: PUSH
53597: LD_INT 118
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: ST_TO_ADDR
53622: GO 55305
53624: LD_INT 12
53626: DOUBLE
53627: EQUAL
53628: IFTRUE 53632
53630: GO 53852
53632: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53633: LD_ADDR_VAR 0 2
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 4
53649: PUSH
53650: LD_INT 5
53652: PUSH
53653: LD_INT 6
53655: PUSH
53656: LD_INT 7
53658: PUSH
53659: LD_INT 8
53661: PUSH
53662: LD_INT 9
53664: PUSH
53665: LD_INT 10
53667: PUSH
53668: LD_INT 11
53670: PUSH
53671: LD_INT 12
53673: PUSH
53674: LD_INT 13
53676: PUSH
53677: LD_INT 14
53679: PUSH
53680: LD_INT 15
53682: PUSH
53683: LD_INT 16
53685: PUSH
53686: LD_INT 17
53688: PUSH
53689: LD_INT 18
53691: PUSH
53692: LD_INT 19
53694: PUSH
53695: LD_INT 20
53697: PUSH
53698: LD_INT 21
53700: PUSH
53701: LD_INT 22
53703: PUSH
53704: LD_INT 23
53706: PUSH
53707: LD_INT 24
53709: PUSH
53710: LD_INT 25
53712: PUSH
53713: LD_INT 26
53715: PUSH
53716: LD_INT 27
53718: PUSH
53719: LD_INT 28
53721: PUSH
53722: LD_INT 30
53724: PUSH
53725: LD_INT 31
53727: PUSH
53728: LD_INT 32
53730: PUSH
53731: LD_INT 33
53733: PUSH
53734: LD_INT 34
53736: PUSH
53737: LD_INT 36
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 101
53778: PUSH
53779: LD_INT 102
53781: PUSH
53782: LD_INT 103
53784: PUSH
53785: LD_INT 104
53787: PUSH
53788: LD_INT 105
53790: PUSH
53791: LD_INT 106
53793: PUSH
53794: LD_INT 107
53796: PUSH
53797: LD_INT 108
53799: PUSH
53800: LD_INT 109
53802: PUSH
53803: LD_INT 110
53805: PUSH
53806: LD_INT 111
53808: PUSH
53809: LD_INT 112
53811: PUSH
53812: LD_INT 113
53814: PUSH
53815: LD_INT 114
53817: PUSH
53818: LD_INT 116
53820: PUSH
53821: LD_INT 117
53823: PUSH
53824: LD_INT 118
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: ST_TO_ADDR
53850: GO 55305
53852: LD_INT 13
53854: DOUBLE
53855: EQUAL
53856: IFTRUE 53860
53858: GO 54068
53860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53861: LD_ADDR_VAR 0 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: LD_INT 5
53880: PUSH
53881: LD_INT 8
53883: PUSH
53884: LD_INT 9
53886: PUSH
53887: LD_INT 10
53889: PUSH
53890: LD_INT 11
53892: PUSH
53893: LD_INT 12
53895: PUSH
53896: LD_INT 14
53898: PUSH
53899: LD_INT 15
53901: PUSH
53902: LD_INT 16
53904: PUSH
53905: LD_INT 17
53907: PUSH
53908: LD_INT 18
53910: PUSH
53911: LD_INT 19
53913: PUSH
53914: LD_INT 20
53916: PUSH
53917: LD_INT 21
53919: PUSH
53920: LD_INT 22
53922: PUSH
53923: LD_INT 23
53925: PUSH
53926: LD_INT 24
53928: PUSH
53929: LD_INT 25
53931: PUSH
53932: LD_INT 26
53934: PUSH
53935: LD_INT 27
53937: PUSH
53938: LD_INT 28
53940: PUSH
53941: LD_INT 30
53943: PUSH
53944: LD_INT 31
53946: PUSH
53947: LD_INT 32
53949: PUSH
53950: LD_INT 33
53952: PUSH
53953: LD_INT 34
53955: PUSH
53956: LD_INT 36
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 101
53994: PUSH
53995: LD_INT 102
53997: PUSH
53998: LD_INT 103
54000: PUSH
54001: LD_INT 104
54003: PUSH
54004: LD_INT 105
54006: PUSH
54007: LD_INT 106
54009: PUSH
54010: LD_INT 107
54012: PUSH
54013: LD_INT 108
54015: PUSH
54016: LD_INT 109
54018: PUSH
54019: LD_INT 110
54021: PUSH
54022: LD_INT 111
54024: PUSH
54025: LD_INT 112
54027: PUSH
54028: LD_INT 113
54030: PUSH
54031: LD_INT 114
54033: PUSH
54034: LD_INT 116
54036: PUSH
54037: LD_INT 117
54039: PUSH
54040: LD_INT 118
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: ST_TO_ADDR
54066: GO 55305
54068: LD_INT 14
54070: DOUBLE
54071: EQUAL
54072: IFTRUE 54076
54074: GO 54300
54076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54077: LD_ADDR_VAR 0 2
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: LD_INT 4
54093: PUSH
54094: LD_INT 5
54096: PUSH
54097: LD_INT 6
54099: PUSH
54100: LD_INT 7
54102: PUSH
54103: LD_INT 8
54105: PUSH
54106: LD_INT 9
54108: PUSH
54109: LD_INT 10
54111: PUSH
54112: LD_INT 11
54114: PUSH
54115: LD_INT 12
54117: PUSH
54118: LD_INT 13
54120: PUSH
54121: LD_INT 14
54123: PUSH
54124: LD_INT 15
54126: PUSH
54127: LD_INT 16
54129: PUSH
54130: LD_INT 17
54132: PUSH
54133: LD_INT 18
54135: PUSH
54136: LD_INT 19
54138: PUSH
54139: LD_INT 20
54141: PUSH
54142: LD_INT 21
54144: PUSH
54145: LD_INT 22
54147: PUSH
54148: LD_INT 23
54150: PUSH
54151: LD_INT 24
54153: PUSH
54154: LD_INT 25
54156: PUSH
54157: LD_INT 26
54159: PUSH
54160: LD_INT 27
54162: PUSH
54163: LD_INT 28
54165: PUSH
54166: LD_INT 29
54168: PUSH
54169: LD_INT 30
54171: PUSH
54172: LD_INT 31
54174: PUSH
54175: LD_INT 32
54177: PUSH
54178: LD_INT 33
54180: PUSH
54181: LD_INT 34
54183: PUSH
54184: LD_INT 36
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 101
54226: PUSH
54227: LD_INT 102
54229: PUSH
54230: LD_INT 103
54232: PUSH
54233: LD_INT 104
54235: PUSH
54236: LD_INT 105
54238: PUSH
54239: LD_INT 106
54241: PUSH
54242: LD_INT 107
54244: PUSH
54245: LD_INT 108
54247: PUSH
54248: LD_INT 109
54250: PUSH
54251: LD_INT 110
54253: PUSH
54254: LD_INT 111
54256: PUSH
54257: LD_INT 112
54259: PUSH
54260: LD_INT 113
54262: PUSH
54263: LD_INT 114
54265: PUSH
54266: LD_INT 116
54268: PUSH
54269: LD_INT 117
54271: PUSH
54272: LD_INT 118
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: ST_TO_ADDR
54298: GO 55305
54300: LD_INT 15
54302: DOUBLE
54303: EQUAL
54304: IFTRUE 54308
54306: GO 54532
54308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54309: LD_ADDR_VAR 0 2
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: LD_INT 5
54328: PUSH
54329: LD_INT 6
54331: PUSH
54332: LD_INT 7
54334: PUSH
54335: LD_INT 8
54337: PUSH
54338: LD_INT 9
54340: PUSH
54341: LD_INT 10
54343: PUSH
54344: LD_INT 11
54346: PUSH
54347: LD_INT 12
54349: PUSH
54350: LD_INT 13
54352: PUSH
54353: LD_INT 14
54355: PUSH
54356: LD_INT 15
54358: PUSH
54359: LD_INT 16
54361: PUSH
54362: LD_INT 17
54364: PUSH
54365: LD_INT 18
54367: PUSH
54368: LD_INT 19
54370: PUSH
54371: LD_INT 20
54373: PUSH
54374: LD_INT 21
54376: PUSH
54377: LD_INT 22
54379: PUSH
54380: LD_INT 23
54382: PUSH
54383: LD_INT 24
54385: PUSH
54386: LD_INT 25
54388: PUSH
54389: LD_INT 26
54391: PUSH
54392: LD_INT 27
54394: PUSH
54395: LD_INT 28
54397: PUSH
54398: LD_INT 29
54400: PUSH
54401: LD_INT 30
54403: PUSH
54404: LD_INT 31
54406: PUSH
54407: LD_INT 32
54409: PUSH
54410: LD_INT 33
54412: PUSH
54413: LD_INT 34
54415: PUSH
54416: LD_INT 36
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 101
54458: PUSH
54459: LD_INT 102
54461: PUSH
54462: LD_INT 103
54464: PUSH
54465: LD_INT 104
54467: PUSH
54468: LD_INT 105
54470: PUSH
54471: LD_INT 106
54473: PUSH
54474: LD_INT 107
54476: PUSH
54477: LD_INT 108
54479: PUSH
54480: LD_INT 109
54482: PUSH
54483: LD_INT 110
54485: PUSH
54486: LD_INT 111
54488: PUSH
54489: LD_INT 112
54491: PUSH
54492: LD_INT 113
54494: PUSH
54495: LD_INT 114
54497: PUSH
54498: LD_INT 116
54500: PUSH
54501: LD_INT 117
54503: PUSH
54504: LD_INT 118
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: ST_TO_ADDR
54530: GO 55305
54532: LD_INT 16
54534: DOUBLE
54535: EQUAL
54536: IFTRUE 54540
54538: GO 54676
54540: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54541: LD_ADDR_VAR 0 2
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: LD_INT 5
54554: PUSH
54555: LD_INT 7
54557: PUSH
54558: LD_INT 11
54560: PUSH
54561: LD_INT 12
54563: PUSH
54564: LD_INT 15
54566: PUSH
54567: LD_INT 16
54569: PUSH
54570: LD_INT 20
54572: PUSH
54573: LD_INT 21
54575: PUSH
54576: LD_INT 22
54578: PUSH
54579: LD_INT 23
54581: PUSH
54582: LD_INT 25
54584: PUSH
54585: LD_INT 26
54587: PUSH
54588: LD_INT 30
54590: PUSH
54591: LD_INT 31
54593: PUSH
54594: LD_INT 32
54596: PUSH
54597: LD_INT 33
54599: PUSH
54600: LD_INT 34
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 101
54626: PUSH
54627: LD_INT 102
54629: PUSH
54630: LD_INT 103
54632: PUSH
54633: LD_INT 106
54635: PUSH
54636: LD_INT 108
54638: PUSH
54639: LD_INT 112
54641: PUSH
54642: LD_INT 113
54644: PUSH
54645: LD_INT 114
54647: PUSH
54648: LD_INT 116
54650: PUSH
54651: LD_INT 117
54653: PUSH
54654: LD_INT 118
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: ST_TO_ADDR
54674: GO 55305
54676: LD_INT 17
54678: DOUBLE
54679: EQUAL
54680: IFTRUE 54684
54682: GO 54908
54684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54685: LD_ADDR_VAR 0 2
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: LD_INT 4
54701: PUSH
54702: LD_INT 5
54704: PUSH
54705: LD_INT 6
54707: PUSH
54708: LD_INT 7
54710: PUSH
54711: LD_INT 8
54713: PUSH
54714: LD_INT 9
54716: PUSH
54717: LD_INT 10
54719: PUSH
54720: LD_INT 11
54722: PUSH
54723: LD_INT 12
54725: PUSH
54726: LD_INT 13
54728: PUSH
54729: LD_INT 14
54731: PUSH
54732: LD_INT 15
54734: PUSH
54735: LD_INT 16
54737: PUSH
54738: LD_INT 17
54740: PUSH
54741: LD_INT 18
54743: PUSH
54744: LD_INT 19
54746: PUSH
54747: LD_INT 20
54749: PUSH
54750: LD_INT 21
54752: PUSH
54753: LD_INT 22
54755: PUSH
54756: LD_INT 23
54758: PUSH
54759: LD_INT 24
54761: PUSH
54762: LD_INT 25
54764: PUSH
54765: LD_INT 26
54767: PUSH
54768: LD_INT 27
54770: PUSH
54771: LD_INT 28
54773: PUSH
54774: LD_INT 29
54776: PUSH
54777: LD_INT 30
54779: PUSH
54780: LD_INT 31
54782: PUSH
54783: LD_INT 32
54785: PUSH
54786: LD_INT 33
54788: PUSH
54789: LD_INT 34
54791: PUSH
54792: LD_INT 36
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 101
54834: PUSH
54835: LD_INT 102
54837: PUSH
54838: LD_INT 103
54840: PUSH
54841: LD_INT 104
54843: PUSH
54844: LD_INT 105
54846: PUSH
54847: LD_INT 106
54849: PUSH
54850: LD_INT 107
54852: PUSH
54853: LD_INT 108
54855: PUSH
54856: LD_INT 109
54858: PUSH
54859: LD_INT 110
54861: PUSH
54862: LD_INT 111
54864: PUSH
54865: LD_INT 112
54867: PUSH
54868: LD_INT 113
54870: PUSH
54871: LD_INT 114
54873: PUSH
54874: LD_INT 116
54876: PUSH
54877: LD_INT 117
54879: PUSH
54880: LD_INT 118
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: ST_TO_ADDR
54906: GO 55305
54908: LD_INT 18
54910: DOUBLE
54911: EQUAL
54912: IFTRUE 54916
54914: GO 55064
54916: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54917: LD_ADDR_VAR 0 2
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: LD_INT 4
54927: PUSH
54928: LD_INT 5
54930: PUSH
54931: LD_INT 7
54933: PUSH
54934: LD_INT 11
54936: PUSH
54937: LD_INT 12
54939: PUSH
54940: LD_INT 15
54942: PUSH
54943: LD_INT 16
54945: PUSH
54946: LD_INT 20
54948: PUSH
54949: LD_INT 21
54951: PUSH
54952: LD_INT 22
54954: PUSH
54955: LD_INT 23
54957: PUSH
54958: LD_INT 25
54960: PUSH
54961: LD_INT 26
54963: PUSH
54964: LD_INT 30
54966: PUSH
54967: LD_INT 31
54969: PUSH
54970: LD_INT 32
54972: PUSH
54973: LD_INT 33
54975: PUSH
54976: LD_INT 34
54978: PUSH
54979: LD_INT 35
54981: PUSH
54982: LD_INT 36
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 101
55010: PUSH
55011: LD_INT 102
55013: PUSH
55014: LD_INT 103
55016: PUSH
55017: LD_INT 106
55019: PUSH
55020: LD_INT 108
55022: PUSH
55023: LD_INT 112
55025: PUSH
55026: LD_INT 113
55028: PUSH
55029: LD_INT 114
55031: PUSH
55032: LD_INT 115
55034: PUSH
55035: LD_INT 116
55037: PUSH
55038: LD_INT 117
55040: PUSH
55041: LD_INT 118
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: ST_TO_ADDR
55062: GO 55305
55064: LD_INT 19
55066: DOUBLE
55067: EQUAL
55068: IFTRUE 55072
55070: GO 55304
55072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55073: LD_ADDR_VAR 0 2
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 5
55092: PUSH
55093: LD_INT 6
55095: PUSH
55096: LD_INT 7
55098: PUSH
55099: LD_INT 8
55101: PUSH
55102: LD_INT 9
55104: PUSH
55105: LD_INT 10
55107: PUSH
55108: LD_INT 11
55110: PUSH
55111: LD_INT 12
55113: PUSH
55114: LD_INT 13
55116: PUSH
55117: LD_INT 14
55119: PUSH
55120: LD_INT 15
55122: PUSH
55123: LD_INT 16
55125: PUSH
55126: LD_INT 17
55128: PUSH
55129: LD_INT 18
55131: PUSH
55132: LD_INT 19
55134: PUSH
55135: LD_INT 20
55137: PUSH
55138: LD_INT 21
55140: PUSH
55141: LD_INT 22
55143: PUSH
55144: LD_INT 23
55146: PUSH
55147: LD_INT 24
55149: PUSH
55150: LD_INT 25
55152: PUSH
55153: LD_INT 26
55155: PUSH
55156: LD_INT 27
55158: PUSH
55159: LD_INT 28
55161: PUSH
55162: LD_INT 29
55164: PUSH
55165: LD_INT 30
55167: PUSH
55168: LD_INT 31
55170: PUSH
55171: LD_INT 32
55173: PUSH
55174: LD_INT 33
55176: PUSH
55177: LD_INT 34
55179: PUSH
55180: LD_INT 35
55182: PUSH
55183: LD_INT 36
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 101
55226: PUSH
55227: LD_INT 102
55229: PUSH
55230: LD_INT 103
55232: PUSH
55233: LD_INT 104
55235: PUSH
55236: LD_INT 105
55238: PUSH
55239: LD_INT 106
55241: PUSH
55242: LD_INT 107
55244: PUSH
55245: LD_INT 108
55247: PUSH
55248: LD_INT 109
55250: PUSH
55251: LD_INT 110
55253: PUSH
55254: LD_INT 111
55256: PUSH
55257: LD_INT 112
55259: PUSH
55260: LD_INT 113
55262: PUSH
55263: LD_INT 114
55265: PUSH
55266: LD_INT 115
55268: PUSH
55269: LD_INT 116
55271: PUSH
55272: LD_INT 117
55274: PUSH
55275: LD_INT 118
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: ST_TO_ADDR
55302: GO 55305
55304: POP
// end else
55305: GO 55536
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55307: LD_ADDR_VAR 0 2
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 4
55323: PUSH
55324: LD_INT 5
55326: PUSH
55327: LD_INT 6
55329: PUSH
55330: LD_INT 7
55332: PUSH
55333: LD_INT 8
55335: PUSH
55336: LD_INT 9
55338: PUSH
55339: LD_INT 10
55341: PUSH
55342: LD_INT 11
55344: PUSH
55345: LD_INT 12
55347: PUSH
55348: LD_INT 13
55350: PUSH
55351: LD_INT 14
55353: PUSH
55354: LD_INT 15
55356: PUSH
55357: LD_INT 16
55359: PUSH
55360: LD_INT 17
55362: PUSH
55363: LD_INT 18
55365: PUSH
55366: LD_INT 19
55368: PUSH
55369: LD_INT 20
55371: PUSH
55372: LD_INT 21
55374: PUSH
55375: LD_INT 22
55377: PUSH
55378: LD_INT 23
55380: PUSH
55381: LD_INT 24
55383: PUSH
55384: LD_INT 25
55386: PUSH
55387: LD_INT 26
55389: PUSH
55390: LD_INT 27
55392: PUSH
55393: LD_INT 28
55395: PUSH
55396: LD_INT 29
55398: PUSH
55399: LD_INT 30
55401: PUSH
55402: LD_INT 31
55404: PUSH
55405: LD_INT 32
55407: PUSH
55408: LD_INT 33
55410: PUSH
55411: LD_INT 34
55413: PUSH
55414: LD_INT 35
55416: PUSH
55417: LD_INT 36
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 101
55460: PUSH
55461: LD_INT 102
55463: PUSH
55464: LD_INT 103
55466: PUSH
55467: LD_INT 104
55469: PUSH
55470: LD_INT 105
55472: PUSH
55473: LD_INT 106
55475: PUSH
55476: LD_INT 107
55478: PUSH
55479: LD_INT 108
55481: PUSH
55482: LD_INT 109
55484: PUSH
55485: LD_INT 110
55487: PUSH
55488: LD_INT 111
55490: PUSH
55491: LD_INT 112
55493: PUSH
55494: LD_INT 113
55496: PUSH
55497: LD_INT 114
55499: PUSH
55500: LD_INT 115
55502: PUSH
55503: LD_INT 116
55505: PUSH
55506: LD_INT 117
55508: PUSH
55509: LD_INT 118
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// if result then
55536: LD_VAR 0 2
55540: IFFALSE 56326
// begin normal :=  ;
55542: LD_ADDR_VAR 0 5
55546: PUSH
55547: LD_STRING 
55549: ST_TO_ADDR
// hardcore :=  ;
55550: LD_ADDR_VAR 0 6
55554: PUSH
55555: LD_STRING 
55557: ST_TO_ADDR
// active :=  ;
55558: LD_ADDR_VAR 0 7
55562: PUSH
55563: LD_STRING 
55565: ST_TO_ADDR
// for i = 1 to normalCounter do
55566: LD_ADDR_VAR 0 8
55570: PUSH
55571: DOUBLE
55572: LD_INT 1
55574: DEC
55575: ST_TO_ADDR
55576: LD_EXP 30
55580: PUSH
55581: FOR_TO
55582: IFFALSE 55683
// begin tmp := 0 ;
55584: LD_ADDR_VAR 0 3
55588: PUSH
55589: LD_STRING 0
55591: ST_TO_ADDR
// if result [ 1 ] then
55592: LD_VAR 0 2
55596: PUSH
55597: LD_INT 1
55599: ARRAY
55600: IFFALSE 55665
// if result [ 1 ] [ 1 ] = i then
55602: LD_VAR 0 2
55606: PUSH
55607: LD_INT 1
55609: ARRAY
55610: PUSH
55611: LD_INT 1
55613: ARRAY
55614: PUSH
55615: LD_VAR 0 8
55619: EQUAL
55620: IFFALSE 55665
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55622: LD_ADDR_VAR 0 2
55626: PUSH
55627: LD_VAR 0 2
55631: PPUSH
55632: LD_INT 1
55634: PPUSH
55635: LD_VAR 0 2
55639: PUSH
55640: LD_INT 1
55642: ARRAY
55643: PPUSH
55644: LD_INT 1
55646: PPUSH
55647: CALL_OW 3
55651: PPUSH
55652: CALL_OW 1
55656: ST_TO_ADDR
// tmp := 1 ;
55657: LD_ADDR_VAR 0 3
55661: PUSH
55662: LD_STRING 1
55664: ST_TO_ADDR
// end ; normal := normal & tmp ;
55665: LD_ADDR_VAR 0 5
55669: PUSH
55670: LD_VAR 0 5
55674: PUSH
55675: LD_VAR 0 3
55679: STR
55680: ST_TO_ADDR
// end ;
55681: GO 55581
55683: POP
55684: POP
// for i = 1 to hardcoreCounter do
55685: LD_ADDR_VAR 0 8
55689: PUSH
55690: DOUBLE
55691: LD_INT 1
55693: DEC
55694: ST_TO_ADDR
55695: LD_EXP 31
55699: PUSH
55700: FOR_TO
55701: IFFALSE 55806
// begin tmp := 0 ;
55703: LD_ADDR_VAR 0 3
55707: PUSH
55708: LD_STRING 0
55710: ST_TO_ADDR
// if result [ 2 ] then
55711: LD_VAR 0 2
55715: PUSH
55716: LD_INT 2
55718: ARRAY
55719: IFFALSE 55788
// if result [ 2 ] [ 1 ] = 100 + i then
55721: LD_VAR 0 2
55725: PUSH
55726: LD_INT 2
55728: ARRAY
55729: PUSH
55730: LD_INT 1
55732: ARRAY
55733: PUSH
55734: LD_INT 100
55736: PUSH
55737: LD_VAR 0 8
55741: PLUS
55742: EQUAL
55743: IFFALSE 55788
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55745: LD_ADDR_VAR 0 2
55749: PUSH
55750: LD_VAR 0 2
55754: PPUSH
55755: LD_INT 2
55757: PPUSH
55758: LD_VAR 0 2
55762: PUSH
55763: LD_INT 2
55765: ARRAY
55766: PPUSH
55767: LD_INT 1
55769: PPUSH
55770: CALL_OW 3
55774: PPUSH
55775: CALL_OW 1
55779: ST_TO_ADDR
// tmp := 1 ;
55780: LD_ADDR_VAR 0 3
55784: PUSH
55785: LD_STRING 1
55787: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55788: LD_ADDR_VAR 0 6
55792: PUSH
55793: LD_VAR 0 6
55797: PUSH
55798: LD_VAR 0 3
55802: STR
55803: ST_TO_ADDR
// end ;
55804: GO 55700
55806: POP
55807: POP
// if isGameLoad then
55808: LD_VAR 0 1
55812: IFFALSE 56287
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55814: LD_ADDR_VAR 0 4
55818: PUSH
55819: LD_EXP 34
55823: PUSH
55824: LD_EXP 33
55828: PUSH
55829: LD_EXP 35
55833: PUSH
55834: LD_EXP 32
55838: PUSH
55839: LD_EXP 36
55843: PUSH
55844: LD_EXP 37
55848: PUSH
55849: LD_EXP 38
55853: PUSH
55854: LD_EXP 39
55858: PUSH
55859: LD_EXP 40
55863: PUSH
55864: LD_EXP 41
55868: PUSH
55869: LD_EXP 42
55873: PUSH
55874: LD_EXP 43
55878: PUSH
55879: LD_EXP 44
55883: PUSH
55884: LD_EXP 45
55888: PUSH
55889: LD_EXP 53
55893: PUSH
55894: LD_EXP 54
55898: PUSH
55899: LD_EXP 55
55903: PUSH
55904: LD_EXP 56
55908: PUSH
55909: LD_EXP 58
55913: PUSH
55914: LD_EXP 59
55918: PUSH
55919: LD_EXP 60
55923: PUSH
55924: LD_EXP 63
55928: PUSH
55929: LD_EXP 65
55933: PUSH
55934: LD_EXP 66
55938: PUSH
55939: LD_EXP 67
55943: PUSH
55944: LD_EXP 69
55948: PUSH
55949: LD_EXP 70
55953: PUSH
55954: LD_EXP 73
55958: PUSH
55959: LD_EXP 74
55963: PUSH
55964: LD_EXP 75
55968: PUSH
55969: LD_EXP 76
55973: PUSH
55974: LD_EXP 77
55978: PUSH
55979: LD_EXP 78
55983: PUSH
55984: LD_EXP 79
55988: PUSH
55989: LD_EXP 80
55993: PUSH
55994: LD_EXP 81
55998: PUSH
55999: LD_EXP 46
56003: PUSH
56004: LD_EXP 47
56008: PUSH
56009: LD_EXP 50
56013: PUSH
56014: LD_EXP 51
56018: PUSH
56019: LD_EXP 52
56023: PUSH
56024: LD_EXP 48
56028: PUSH
56029: LD_EXP 49
56033: PUSH
56034: LD_EXP 57
56038: PUSH
56039: LD_EXP 61
56043: PUSH
56044: LD_EXP 62
56048: PUSH
56049: LD_EXP 64
56053: PUSH
56054: LD_EXP 68
56058: PUSH
56059: LD_EXP 71
56063: PUSH
56064: LD_EXP 72
56068: PUSH
56069: LD_EXP 82
56073: PUSH
56074: LD_EXP 83
56078: PUSH
56079: LD_EXP 84
56083: PUSH
56084: LD_EXP 85
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// tmp :=  ;
56145: LD_ADDR_VAR 0 3
56149: PUSH
56150: LD_STRING 
56152: ST_TO_ADDR
// for i = 1 to normalCounter do
56153: LD_ADDR_VAR 0 8
56157: PUSH
56158: DOUBLE
56159: LD_INT 1
56161: DEC
56162: ST_TO_ADDR
56163: LD_EXP 30
56167: PUSH
56168: FOR_TO
56169: IFFALSE 56205
// begin if flags [ i ] then
56171: LD_VAR 0 4
56175: PUSH
56176: LD_VAR 0 8
56180: ARRAY
56181: IFFALSE 56203
// tmp := tmp & i & ; ;
56183: LD_ADDR_VAR 0 3
56187: PUSH
56188: LD_VAR 0 3
56192: PUSH
56193: LD_VAR 0 8
56197: STR
56198: PUSH
56199: LD_STRING ;
56201: STR
56202: ST_TO_ADDR
// end ;
56203: GO 56168
56205: POP
56206: POP
// for i = 1 to hardcoreCounter do
56207: LD_ADDR_VAR 0 8
56211: PUSH
56212: DOUBLE
56213: LD_INT 1
56215: DEC
56216: ST_TO_ADDR
56217: LD_EXP 31
56221: PUSH
56222: FOR_TO
56223: IFFALSE 56269
// begin if flags [ normalCounter + i ] then
56225: LD_VAR 0 4
56229: PUSH
56230: LD_EXP 30
56234: PUSH
56235: LD_VAR 0 8
56239: PLUS
56240: ARRAY
56241: IFFALSE 56267
// tmp := tmp & ( 100 + i ) & ; ;
56243: LD_ADDR_VAR 0 3
56247: PUSH
56248: LD_VAR 0 3
56252: PUSH
56253: LD_INT 100
56255: PUSH
56256: LD_VAR 0 8
56260: PLUS
56261: STR
56262: PUSH
56263: LD_STRING ;
56265: STR
56266: ST_TO_ADDR
// end ;
56267: GO 56222
56269: POP
56270: POP
// if tmp then
56271: LD_VAR 0 3
56275: IFFALSE 56287
// active := tmp ;
56277: LD_ADDR_VAR 0 7
56281: PUSH
56282: LD_VAR 0 3
56286: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56287: LD_STRING getStreamItemsFromMission("
56289: PUSH
56290: LD_VAR 0 5
56294: STR
56295: PUSH
56296: LD_STRING ","
56298: STR
56299: PUSH
56300: LD_VAR 0 6
56304: STR
56305: PUSH
56306: LD_STRING ","
56308: STR
56309: PUSH
56310: LD_VAR 0 7
56314: STR
56315: PUSH
56316: LD_STRING ")
56318: STR
56319: PPUSH
56320: CALL_OW 559
// end else
56324: GO 56333
// ToLua ( getStreamItemsFromMission("","","") ) ;
56326: LD_STRING getStreamItemsFromMission("","","")
56328: PPUSH
56329: CALL_OW 559
// end ;
56333: LD_VAR 0 2
56337: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56338: LD_EXP 29
56342: PUSH
56343: LD_EXP 34
56347: AND
56348: IFFALSE 56472
56350: GO 56352
56352: DISABLE
56353: LD_INT 0
56355: PPUSH
56356: PPUSH
// begin enable ;
56357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56358: LD_ADDR_VAR 0 2
56362: PUSH
56363: LD_INT 22
56365: PUSH
56366: LD_OWVAR 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 34
56380: PUSH
56381: LD_INT 7
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 34
56390: PUSH
56391: LD_INT 45
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 34
56400: PUSH
56401: LD_INT 28
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 34
56410: PUSH
56411: LD_INT 47
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PPUSH
56429: CALL_OW 69
56433: ST_TO_ADDR
// if not tmp then
56434: LD_VAR 0 2
56438: NOT
56439: IFFALSE 56443
// exit ;
56441: GO 56472
// for i in tmp do
56443: LD_ADDR_VAR 0 1
56447: PUSH
56448: LD_VAR 0 2
56452: PUSH
56453: FOR_IN
56454: IFFALSE 56470
// begin SetLives ( i , 0 ) ;
56456: LD_VAR 0 1
56460: PPUSH
56461: LD_INT 0
56463: PPUSH
56464: CALL_OW 234
// end ;
56468: GO 56453
56470: POP
56471: POP
// end ;
56472: PPOPN 2
56474: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56475: LD_EXP 29
56479: PUSH
56480: LD_EXP 35
56484: AND
56485: IFFALSE 56569
56487: GO 56489
56489: DISABLE
56490: LD_INT 0
56492: PPUSH
56493: PPUSH
// begin enable ;
56494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56495: LD_ADDR_VAR 0 2
56499: PUSH
56500: LD_INT 22
56502: PUSH
56503: LD_OWVAR 2
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 32
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PPUSH
56526: CALL_OW 69
56530: ST_TO_ADDR
// if not tmp then
56531: LD_VAR 0 2
56535: NOT
56536: IFFALSE 56540
// exit ;
56538: GO 56569
// for i in tmp do
56540: LD_ADDR_VAR 0 1
56544: PUSH
56545: LD_VAR 0 2
56549: PUSH
56550: FOR_IN
56551: IFFALSE 56567
// begin SetLives ( i , 0 ) ;
56553: LD_VAR 0 1
56557: PPUSH
56558: LD_INT 0
56560: PPUSH
56561: CALL_OW 234
// end ;
56565: GO 56550
56567: POP
56568: POP
// end ;
56569: PPOPN 2
56571: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56572: LD_EXP 29
56576: PUSH
56577: LD_EXP 32
56581: AND
56582: IFFALSE 56675
56584: GO 56586
56586: DISABLE
56587: LD_INT 0
56589: PPUSH
// begin enable ;
56590: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56591: LD_ADDR_VAR 0 1
56595: PUSH
56596: LD_INT 22
56598: PUSH
56599: LD_OWVAR 2
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 25
56613: PUSH
56614: LD_INT 5
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 25
56623: PUSH
56624: LD_INT 9
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 25
56633: PUSH
56634: LD_INT 8
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PPUSH
56651: CALL_OW 69
56655: PUSH
56656: FOR_IN
56657: IFFALSE 56673
// begin SetClass ( i , 1 ) ;
56659: LD_VAR 0 1
56663: PPUSH
56664: LD_INT 1
56666: PPUSH
56667: CALL_OW 336
// end ;
56671: GO 56656
56673: POP
56674: POP
// end ;
56675: PPOPN 1
56677: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56678: LD_EXP 29
56682: PUSH
56683: LD_EXP 33
56687: AND
56688: PUSH
56689: LD_OWVAR 65
56693: PUSH
56694: LD_INT 7
56696: LESS
56697: AND
56698: IFFALSE 56712
56700: GO 56702
56702: DISABLE
// begin enable ;
56703: ENABLE
// game_speed := 7 ;
56704: LD_ADDR_OWVAR 65
56708: PUSH
56709: LD_INT 7
56711: ST_TO_ADDR
// end ;
56712: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56713: LD_EXP 29
56717: PUSH
56718: LD_EXP 36
56722: AND
56723: IFFALSE 56925
56725: GO 56727
56727: DISABLE
56728: LD_INT 0
56730: PPUSH
56731: PPUSH
56732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56733: LD_ADDR_VAR 0 3
56737: PUSH
56738: LD_INT 81
56740: PUSH
56741: LD_OWVAR 2
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 21
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PPUSH
56764: CALL_OW 69
56768: ST_TO_ADDR
// if not tmp then
56769: LD_VAR 0 3
56773: NOT
56774: IFFALSE 56778
// exit ;
56776: GO 56925
// if tmp > 5 then
56778: LD_VAR 0 3
56782: PUSH
56783: LD_INT 5
56785: GREATER
56786: IFFALSE 56798
// k := 5 else
56788: LD_ADDR_VAR 0 2
56792: PUSH
56793: LD_INT 5
56795: ST_TO_ADDR
56796: GO 56808
// k := tmp ;
56798: LD_ADDR_VAR 0 2
56802: PUSH
56803: LD_VAR 0 3
56807: ST_TO_ADDR
// for i := 1 to k do
56808: LD_ADDR_VAR 0 1
56812: PUSH
56813: DOUBLE
56814: LD_INT 1
56816: DEC
56817: ST_TO_ADDR
56818: LD_VAR 0 2
56822: PUSH
56823: FOR_TO
56824: IFFALSE 56923
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56826: LD_VAR 0 3
56830: PUSH
56831: LD_VAR 0 1
56835: ARRAY
56836: PPUSH
56837: LD_VAR 0 1
56841: PUSH
56842: LD_INT 4
56844: MOD
56845: PUSH
56846: LD_INT 1
56848: PLUS
56849: PPUSH
56850: CALL_OW 259
56854: PUSH
56855: LD_INT 10
56857: LESS
56858: IFFALSE 56921
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56860: LD_VAR 0 3
56864: PUSH
56865: LD_VAR 0 1
56869: ARRAY
56870: PPUSH
56871: LD_VAR 0 1
56875: PUSH
56876: LD_INT 4
56878: MOD
56879: PUSH
56880: LD_INT 1
56882: PLUS
56883: PPUSH
56884: LD_VAR 0 3
56888: PUSH
56889: LD_VAR 0 1
56893: ARRAY
56894: PPUSH
56895: LD_VAR 0 1
56899: PUSH
56900: LD_INT 4
56902: MOD
56903: PUSH
56904: LD_INT 1
56906: PLUS
56907: PPUSH
56908: CALL_OW 259
56912: PUSH
56913: LD_INT 1
56915: PLUS
56916: PPUSH
56917: CALL_OW 237
56921: GO 56823
56923: POP
56924: POP
// end ;
56925: PPOPN 3
56927: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56928: LD_EXP 29
56932: PUSH
56933: LD_EXP 37
56937: AND
56938: IFFALSE 56958
56940: GO 56942
56942: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56943: LD_INT 4
56945: PPUSH
56946: LD_OWVAR 2
56950: PPUSH
56951: LD_INT 0
56953: PPUSH
56954: CALL_OW 324
56958: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56959: LD_EXP 29
56963: PUSH
56964: LD_EXP 66
56968: AND
56969: IFFALSE 56989
56971: GO 56973
56973: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56974: LD_INT 19
56976: PPUSH
56977: LD_OWVAR 2
56981: PPUSH
56982: LD_INT 0
56984: PPUSH
56985: CALL_OW 324
56989: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56990: LD_EXP 29
56994: PUSH
56995: LD_EXP 38
56999: AND
57000: IFFALSE 57102
57002: GO 57004
57004: DISABLE
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
// begin enable ;
57009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57010: LD_ADDR_VAR 0 2
57014: PUSH
57015: LD_INT 22
57017: PUSH
57018: LD_OWVAR 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: LD_INT 34
57032: PUSH
57033: LD_INT 11
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 34
57042: PUSH
57043: LD_INT 30
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PPUSH
57059: CALL_OW 69
57063: ST_TO_ADDR
// if not tmp then
57064: LD_VAR 0 2
57068: NOT
57069: IFFALSE 57073
// exit ;
57071: GO 57102
// for i in tmp do
57073: LD_ADDR_VAR 0 1
57077: PUSH
57078: LD_VAR 0 2
57082: PUSH
57083: FOR_IN
57084: IFFALSE 57100
// begin SetLives ( i , 0 ) ;
57086: LD_VAR 0 1
57090: PPUSH
57091: LD_INT 0
57093: PPUSH
57094: CALL_OW 234
// end ;
57098: GO 57083
57100: POP
57101: POP
// end ;
57102: PPOPN 2
57104: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57105: LD_EXP 29
57109: PUSH
57110: LD_EXP 39
57114: AND
57115: IFFALSE 57135
57117: GO 57119
57119: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57120: LD_INT 32
57122: PPUSH
57123: LD_OWVAR 2
57127: PPUSH
57128: LD_INT 0
57130: PPUSH
57131: CALL_OW 324
57135: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57136: LD_EXP 29
57140: PUSH
57141: LD_EXP 40
57145: AND
57146: IFFALSE 57327
57148: GO 57150
57150: DISABLE
57151: LD_INT 0
57153: PPUSH
57154: PPUSH
57155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57156: LD_ADDR_VAR 0 2
57160: PUSH
57161: LD_INT 22
57163: PUSH
57164: LD_OWVAR 2
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 33
57175: PUSH
57176: LD_INT 3
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PPUSH
57187: CALL_OW 69
57191: ST_TO_ADDR
// if not tmp then
57192: LD_VAR 0 2
57196: NOT
57197: IFFALSE 57201
// exit ;
57199: GO 57327
// side := 0 ;
57201: LD_ADDR_VAR 0 3
57205: PUSH
57206: LD_INT 0
57208: ST_TO_ADDR
// for i := 1 to 8 do
57209: LD_ADDR_VAR 0 1
57213: PUSH
57214: DOUBLE
57215: LD_INT 1
57217: DEC
57218: ST_TO_ADDR
57219: LD_INT 8
57221: PUSH
57222: FOR_TO
57223: IFFALSE 57271
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57225: LD_OWVAR 2
57229: PUSH
57230: LD_VAR 0 1
57234: NONEQUAL
57235: PUSH
57236: LD_OWVAR 2
57240: PPUSH
57241: LD_VAR 0 1
57245: PPUSH
57246: CALL_OW 81
57250: PUSH
57251: LD_INT 2
57253: EQUAL
57254: AND
57255: IFFALSE 57269
// begin side := i ;
57257: LD_ADDR_VAR 0 3
57261: PUSH
57262: LD_VAR 0 1
57266: ST_TO_ADDR
// break ;
57267: GO 57271
// end ;
57269: GO 57222
57271: POP
57272: POP
// if not side then
57273: LD_VAR 0 3
57277: NOT
57278: IFFALSE 57282
// exit ;
57280: GO 57327
// for i := 1 to tmp do
57282: LD_ADDR_VAR 0 1
57286: PUSH
57287: DOUBLE
57288: LD_INT 1
57290: DEC
57291: ST_TO_ADDR
57292: LD_VAR 0 2
57296: PUSH
57297: FOR_TO
57298: IFFALSE 57325
// if Prob ( 60 ) then
57300: LD_INT 60
57302: PPUSH
57303: CALL_OW 13
57307: IFFALSE 57323
// SetSide ( i , side ) ;
57309: LD_VAR 0 1
57313: PPUSH
57314: LD_VAR 0 3
57318: PPUSH
57319: CALL_OW 235
57323: GO 57297
57325: POP
57326: POP
// end ;
57327: PPOPN 3
57329: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57330: LD_EXP 29
57334: PUSH
57335: LD_EXP 42
57339: AND
57340: IFFALSE 57459
57342: GO 57344
57344: DISABLE
57345: LD_INT 0
57347: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57348: LD_ADDR_VAR 0 1
57352: PUSH
57353: LD_INT 22
57355: PUSH
57356: LD_OWVAR 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 21
57367: PUSH
57368: LD_INT 1
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 23
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: PPUSH
57397: CALL_OW 69
57401: PUSH
57402: FOR_IN
57403: IFFALSE 57457
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57405: LD_VAR 0 1
57409: PPUSH
57410: CALL_OW 257
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 3
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: IN
57433: IFFALSE 57455
// SetClass ( un , rand ( 1 , 4 ) ) ;
57435: LD_VAR 0 1
57439: PPUSH
57440: LD_INT 1
57442: PPUSH
57443: LD_INT 4
57445: PPUSH
57446: CALL_OW 12
57450: PPUSH
57451: CALL_OW 336
57455: GO 57402
57457: POP
57458: POP
// end ;
57459: PPOPN 1
57461: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57462: LD_EXP 29
57466: PUSH
57467: LD_EXP 41
57471: AND
57472: IFFALSE 57551
57474: GO 57476
57476: DISABLE
57477: LD_INT 0
57479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57480: LD_ADDR_VAR 0 1
57484: PUSH
57485: LD_INT 22
57487: PUSH
57488: LD_OWVAR 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 21
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PPUSH
57511: CALL_OW 69
57515: ST_TO_ADDR
// if not tmp then
57516: LD_VAR 0 1
57520: NOT
57521: IFFALSE 57525
// exit ;
57523: GO 57551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57525: LD_VAR 0 1
57529: PUSH
57530: LD_INT 1
57532: PPUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 12
57542: ARRAY
57543: PPUSH
57544: LD_INT 100
57546: PPUSH
57547: CALL_OW 234
// end ;
57551: PPOPN 1
57553: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57554: LD_EXP 29
57558: PUSH
57559: LD_EXP 43
57563: AND
57564: IFFALSE 57662
57566: GO 57568
57568: DISABLE
57569: LD_INT 0
57571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57572: LD_ADDR_VAR 0 1
57576: PUSH
57577: LD_INT 22
57579: PUSH
57580: LD_OWVAR 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 21
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PPUSH
57603: CALL_OW 69
57607: ST_TO_ADDR
// if not tmp then
57608: LD_VAR 0 1
57612: NOT
57613: IFFALSE 57617
// exit ;
57615: GO 57662
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57617: LD_VAR 0 1
57621: PUSH
57622: LD_INT 1
57624: PPUSH
57625: LD_VAR 0 1
57629: PPUSH
57630: CALL_OW 12
57634: ARRAY
57635: PPUSH
57636: LD_INT 1
57638: PPUSH
57639: LD_INT 4
57641: PPUSH
57642: CALL_OW 12
57646: PPUSH
57647: LD_INT 3000
57649: PPUSH
57650: LD_INT 9000
57652: PPUSH
57653: CALL_OW 12
57657: PPUSH
57658: CALL_OW 492
// end ;
57662: PPOPN 1
57664: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57665: LD_EXP 29
57669: PUSH
57670: LD_EXP 44
57674: AND
57675: IFFALSE 57695
57677: GO 57679
57679: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57680: LD_INT 1
57682: PPUSH
57683: LD_OWVAR 2
57687: PPUSH
57688: LD_INT 0
57690: PPUSH
57691: CALL_OW 324
57695: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57696: LD_EXP 29
57700: PUSH
57701: LD_EXP 45
57705: AND
57706: IFFALSE 57789
57708: GO 57710
57710: DISABLE
57711: LD_INT 0
57713: PPUSH
57714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57715: LD_ADDR_VAR 0 2
57719: PUSH
57720: LD_INT 22
57722: PUSH
57723: LD_OWVAR 2
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 21
57734: PUSH
57735: LD_INT 3
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PPUSH
57746: CALL_OW 69
57750: ST_TO_ADDR
// if not tmp then
57751: LD_VAR 0 2
57755: NOT
57756: IFFALSE 57760
// exit ;
57758: GO 57789
// for i in tmp do
57760: LD_ADDR_VAR 0 1
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: FOR_IN
57771: IFFALSE 57787
// SetBLevel ( i , 10 ) ;
57773: LD_VAR 0 1
57777: PPUSH
57778: LD_INT 10
57780: PPUSH
57781: CALL_OW 241
57785: GO 57770
57787: POP
57788: POP
// end ;
57789: PPOPN 2
57791: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57792: LD_EXP 29
57796: PUSH
57797: LD_EXP 46
57801: AND
57802: IFFALSE 57913
57804: GO 57806
57806: DISABLE
57807: LD_INT 0
57809: PPUSH
57810: PPUSH
57811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57812: LD_ADDR_VAR 0 3
57816: PUSH
57817: LD_INT 22
57819: PUSH
57820: LD_OWVAR 2
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 25
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PPUSH
57843: CALL_OW 69
57847: ST_TO_ADDR
// if not tmp then
57848: LD_VAR 0 3
57852: NOT
57853: IFFALSE 57857
// exit ;
57855: GO 57913
// un := tmp [ rand ( 1 , tmp ) ] ;
57857: LD_ADDR_VAR 0 2
57861: PUSH
57862: LD_VAR 0 3
57866: PUSH
57867: LD_INT 1
57869: PPUSH
57870: LD_VAR 0 3
57874: PPUSH
57875: CALL_OW 12
57879: ARRAY
57880: ST_TO_ADDR
// if Crawls ( un ) then
57881: LD_VAR 0 2
57885: PPUSH
57886: CALL_OW 318
57890: IFFALSE 57901
// ComWalk ( un ) ;
57892: LD_VAR 0 2
57896: PPUSH
57897: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57901: LD_VAR 0 2
57905: PPUSH
57906: LD_INT 5
57908: PPUSH
57909: CALL_OW 336
// end ;
57913: PPOPN 3
57915: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57916: LD_EXP 29
57920: PUSH
57921: LD_EXP 47
57925: AND
57926: PUSH
57927: LD_OWVAR 67
57931: PUSH
57932: LD_INT 4
57934: LESS
57935: AND
57936: IFFALSE 57955
57938: GO 57940
57940: DISABLE
// begin Difficulty := Difficulty + 1 ;
57941: LD_ADDR_OWVAR 67
57945: PUSH
57946: LD_OWVAR 67
57950: PUSH
57951: LD_INT 1
57953: PLUS
57954: ST_TO_ADDR
// end ;
57955: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57956: LD_EXP 29
57960: PUSH
57961: LD_EXP 48
57965: AND
57966: IFFALSE 58069
57968: GO 57970
57970: DISABLE
57971: LD_INT 0
57973: PPUSH
// begin for i := 1 to 5 do
57974: LD_ADDR_VAR 0 1
57978: PUSH
57979: DOUBLE
57980: LD_INT 1
57982: DEC
57983: ST_TO_ADDR
57984: LD_INT 5
57986: PUSH
57987: FOR_TO
57988: IFFALSE 58067
// begin uc_nation := nation_nature ;
57990: LD_ADDR_OWVAR 21
57994: PUSH
57995: LD_INT 0
57997: ST_TO_ADDR
// uc_side := 0 ;
57998: LD_ADDR_OWVAR 20
58002: PUSH
58003: LD_INT 0
58005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58006: LD_ADDR_OWVAR 29
58010: PUSH
58011: LD_INT 12
58013: PUSH
58014: LD_INT 12
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// hc_agressivity := 20 ;
58021: LD_ADDR_OWVAR 35
58025: PUSH
58026: LD_INT 20
58028: ST_TO_ADDR
// hc_class := class_tiger ;
58029: LD_ADDR_OWVAR 28
58033: PUSH
58034: LD_INT 14
58036: ST_TO_ADDR
// hc_gallery :=  ;
58037: LD_ADDR_OWVAR 33
58041: PUSH
58042: LD_STRING 
58044: ST_TO_ADDR
// hc_name :=  ;
58045: LD_ADDR_OWVAR 26
58049: PUSH
58050: LD_STRING 
58052: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58053: CALL_OW 44
58057: PPUSH
58058: LD_INT 0
58060: PPUSH
58061: CALL_OW 51
// end ;
58065: GO 57987
58067: POP
58068: POP
// end ;
58069: PPOPN 1
58071: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58072: LD_EXP 29
58076: PUSH
58077: LD_EXP 49
58081: AND
58082: IFFALSE 58091
58084: GO 58086
58086: DISABLE
// StreamSibBomb ;
58087: CALL 58092 0 0
58091: END
// export function StreamSibBomb ; var i , x , y ; begin
58092: LD_INT 0
58094: PPUSH
58095: PPUSH
58096: PPUSH
58097: PPUSH
// result := false ;
58098: LD_ADDR_VAR 0 1
58102: PUSH
58103: LD_INT 0
58105: ST_TO_ADDR
// for i := 1 to 16 do
58106: LD_ADDR_VAR 0 2
58110: PUSH
58111: DOUBLE
58112: LD_INT 1
58114: DEC
58115: ST_TO_ADDR
58116: LD_INT 16
58118: PUSH
58119: FOR_TO
58120: IFFALSE 58319
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58122: LD_ADDR_VAR 0 3
58126: PUSH
58127: LD_INT 10
58129: PUSH
58130: LD_INT 20
58132: PUSH
58133: LD_INT 30
58135: PUSH
58136: LD_INT 40
58138: PUSH
58139: LD_INT 50
58141: PUSH
58142: LD_INT 60
58144: PUSH
58145: LD_INT 70
58147: PUSH
58148: LD_INT 80
58150: PUSH
58151: LD_INT 90
58153: PUSH
58154: LD_INT 100
58156: PUSH
58157: LD_INT 110
58159: PUSH
58160: LD_INT 120
58162: PUSH
58163: LD_INT 130
58165: PUSH
58166: LD_INT 140
58168: PUSH
58169: LD_INT 150
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: PPUSH
58192: LD_INT 15
58194: PPUSH
58195: CALL_OW 12
58199: ARRAY
58200: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58201: LD_ADDR_VAR 0 4
58205: PUSH
58206: LD_INT 10
58208: PUSH
58209: LD_INT 20
58211: PUSH
58212: LD_INT 30
58214: PUSH
58215: LD_INT 40
58217: PUSH
58218: LD_INT 50
58220: PUSH
58221: LD_INT 60
58223: PUSH
58224: LD_INT 70
58226: PUSH
58227: LD_INT 80
58229: PUSH
58230: LD_INT 90
58232: PUSH
58233: LD_INT 100
58235: PUSH
58236: LD_INT 110
58238: PUSH
58239: LD_INT 120
58241: PUSH
58242: LD_INT 130
58244: PUSH
58245: LD_INT 140
58247: PUSH
58248: LD_INT 150
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: PPUSH
58271: LD_INT 15
58273: PPUSH
58274: CALL_OW 12
58278: ARRAY
58279: ST_TO_ADDR
// if ValidHex ( x , y ) then
58280: LD_VAR 0 3
58284: PPUSH
58285: LD_VAR 0 4
58289: PPUSH
58290: CALL_OW 488
58294: IFFALSE 58317
// begin result := [ x , y ] ;
58296: LD_ADDR_VAR 0 1
58300: PUSH
58301: LD_VAR 0 3
58305: PUSH
58306: LD_VAR 0 4
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: ST_TO_ADDR
// break ;
58315: GO 58319
// end ; end ;
58317: GO 58119
58319: POP
58320: POP
// if result then
58321: LD_VAR 0 1
58325: IFFALSE 58385
// begin ToLua ( playSibBomb() ) ;
58327: LD_STRING playSibBomb()
58329: PPUSH
58330: CALL_OW 559
// wait ( 0 0$14 ) ;
58334: LD_INT 490
58336: PPUSH
58337: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58341: LD_VAR 0 1
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: PPUSH
58350: LD_VAR 0 1
58354: PUSH
58355: LD_INT 2
58357: ARRAY
58358: PPUSH
58359: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58363: LD_VAR 0 1
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PPUSH
58372: LD_VAR 0 1
58376: PUSH
58377: LD_INT 2
58379: ARRAY
58380: PPUSH
58381: CALL_OW 429
// end ; end ;
58385: LD_VAR 0 1
58389: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58390: LD_EXP 29
58394: PUSH
58395: LD_EXP 51
58399: AND
58400: IFFALSE 58412
58402: GO 58404
58404: DISABLE
// YouLost (  ) ;
58405: LD_STRING 
58407: PPUSH
58408: CALL_OW 104
58412: END
// every 0 0$1 trigger StreamModeActive and sFog do
58413: LD_EXP 29
58417: PUSH
58418: LD_EXP 50
58422: AND
58423: IFFALSE 58437
58425: GO 58427
58427: DISABLE
// FogOff ( your_side ) ;
58428: LD_OWVAR 2
58432: PPUSH
58433: CALL_OW 344
58437: END
// every 0 0$1 trigger StreamModeActive and sSun do
58438: LD_EXP 29
58442: PUSH
58443: LD_EXP 52
58447: AND
58448: IFFALSE 58476
58450: GO 58452
58452: DISABLE
// begin solar_recharge_percent := 0 ;
58453: LD_ADDR_OWVAR 79
58457: PUSH
58458: LD_INT 0
58460: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58461: LD_INT 10500
58463: PPUSH
58464: CALL_OW 67
// solar_recharge_percent := 100 ;
58468: LD_ADDR_OWVAR 79
58472: PUSH
58473: LD_INT 100
58475: ST_TO_ADDR
// end ;
58476: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58477: LD_EXP 29
58481: PUSH
58482: LD_EXP 53
58486: AND
58487: IFFALSE 58726
58489: GO 58491
58491: DISABLE
58492: LD_INT 0
58494: PPUSH
58495: PPUSH
58496: PPUSH
// begin tmp := [ ] ;
58497: LD_ADDR_VAR 0 3
58501: PUSH
58502: EMPTY
58503: ST_TO_ADDR
// for i := 1 to 6 do
58504: LD_ADDR_VAR 0 1
58508: PUSH
58509: DOUBLE
58510: LD_INT 1
58512: DEC
58513: ST_TO_ADDR
58514: LD_INT 6
58516: PUSH
58517: FOR_TO
58518: IFFALSE 58623
// begin uc_nation := nation_nature ;
58520: LD_ADDR_OWVAR 21
58524: PUSH
58525: LD_INT 0
58527: ST_TO_ADDR
// uc_side := 0 ;
58528: LD_ADDR_OWVAR 20
58532: PUSH
58533: LD_INT 0
58535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58536: LD_ADDR_OWVAR 29
58540: PUSH
58541: LD_INT 12
58543: PUSH
58544: LD_INT 12
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// hc_agressivity := 20 ;
58551: LD_ADDR_OWVAR 35
58555: PUSH
58556: LD_INT 20
58558: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58559: LD_ADDR_OWVAR 28
58563: PUSH
58564: LD_INT 17
58566: ST_TO_ADDR
// hc_gallery :=  ;
58567: LD_ADDR_OWVAR 33
58571: PUSH
58572: LD_STRING 
58574: ST_TO_ADDR
// hc_name :=  ;
58575: LD_ADDR_OWVAR 26
58579: PUSH
58580: LD_STRING 
58582: ST_TO_ADDR
// un := CreateHuman ;
58583: LD_ADDR_VAR 0 2
58587: PUSH
58588: CALL_OW 44
58592: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58593: LD_VAR 0 2
58597: PPUSH
58598: LD_INT 1
58600: PPUSH
58601: CALL_OW 51
// tmp := tmp ^ un ;
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: LD_VAR 0 3
58614: PUSH
58615: LD_VAR 0 2
58619: ADD
58620: ST_TO_ADDR
// end ;
58621: GO 58517
58623: POP
58624: POP
// repeat wait ( 0 0$1 ) ;
58625: LD_INT 35
58627: PPUSH
58628: CALL_OW 67
// for un in tmp do
58632: LD_ADDR_VAR 0 2
58636: PUSH
58637: LD_VAR 0 3
58641: PUSH
58642: FOR_IN
58643: IFFALSE 58717
// begin if IsDead ( un ) then
58645: LD_VAR 0 2
58649: PPUSH
58650: CALL_OW 301
58654: IFFALSE 58674
// begin tmp := tmp diff un ;
58656: LD_ADDR_VAR 0 3
58660: PUSH
58661: LD_VAR 0 3
58665: PUSH
58666: LD_VAR 0 2
58670: DIFF
58671: ST_TO_ADDR
// continue ;
58672: GO 58642
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58674: LD_VAR 0 2
58678: PPUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 22
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PPUSH
58696: CALL_OW 69
58700: PPUSH
58701: LD_VAR 0 2
58705: PPUSH
58706: CALL_OW 74
58710: PPUSH
58711: CALL_OW 115
// end ;
58715: GO 58642
58717: POP
58718: POP
// until not tmp ;
58719: LD_VAR 0 3
58723: NOT
58724: IFFALSE 58625
// end ;
58726: PPOPN 3
58728: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58729: LD_EXP 29
58733: PUSH
58734: LD_EXP 54
58738: AND
58739: IFFALSE 58793
58741: GO 58743
58743: DISABLE
// begin ToLua ( displayTroll(); ) ;
58744: LD_STRING displayTroll();
58746: PPUSH
58747: CALL_OW 559
// wait ( 3 3$00 ) ;
58751: LD_INT 6300
58753: PPUSH
58754: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58758: LD_STRING hideTroll();
58760: PPUSH
58761: CALL_OW 559
// wait ( 1 1$00 ) ;
58765: LD_INT 2100
58767: PPUSH
58768: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58772: LD_STRING displayTroll();
58774: PPUSH
58775: CALL_OW 559
// wait ( 1 1$00 ) ;
58779: LD_INT 2100
58781: PPUSH
58782: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58786: LD_STRING hideTroll();
58788: PPUSH
58789: CALL_OW 559
// end ;
58793: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58794: LD_EXP 29
58798: PUSH
58799: LD_EXP 55
58803: AND
58804: IFFALSE 58867
58806: GO 58808
58808: DISABLE
58809: LD_INT 0
58811: PPUSH
// begin p := 0 ;
58812: LD_ADDR_VAR 0 1
58816: PUSH
58817: LD_INT 0
58819: ST_TO_ADDR
// repeat game_speed := 1 ;
58820: LD_ADDR_OWVAR 65
58824: PUSH
58825: LD_INT 1
58827: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58828: LD_INT 35
58830: PPUSH
58831: CALL_OW 67
// p := p + 1 ;
58835: LD_ADDR_VAR 0 1
58839: PUSH
58840: LD_VAR 0 1
58844: PUSH
58845: LD_INT 1
58847: PLUS
58848: ST_TO_ADDR
// until p >= 60 ;
58849: LD_VAR 0 1
58853: PUSH
58854: LD_INT 60
58856: GREATEREQUAL
58857: IFFALSE 58820
// game_speed := 4 ;
58859: LD_ADDR_OWVAR 65
58863: PUSH
58864: LD_INT 4
58866: ST_TO_ADDR
// end ;
58867: PPOPN 1
58869: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58870: LD_EXP 29
58874: PUSH
58875: LD_EXP 56
58879: AND
58880: IFFALSE 59026
58882: GO 58884
58884: DISABLE
58885: LD_INT 0
58887: PPUSH
58888: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58889: LD_ADDR_VAR 0 1
58893: PUSH
58894: LD_INT 22
58896: PUSH
58897: LD_OWVAR 2
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: PUSH
58909: LD_INT 30
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 30
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PPUSH
58938: CALL_OW 69
58942: ST_TO_ADDR
// if not depot then
58943: LD_VAR 0 1
58947: NOT
58948: IFFALSE 58952
// exit ;
58950: GO 59026
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: LD_VAR 0 1
58961: PUSH
58962: LD_INT 1
58964: PPUSH
58965: LD_VAR 0 1
58969: PPUSH
58970: CALL_OW 12
58974: ARRAY
58975: PPUSH
58976: CALL_OW 274
58980: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58981: LD_VAR 0 2
58985: PPUSH
58986: LD_INT 1
58988: PPUSH
58989: LD_INT 0
58991: PPUSH
58992: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58996: LD_VAR 0 2
59000: PPUSH
59001: LD_INT 2
59003: PPUSH
59004: LD_INT 0
59006: PPUSH
59007: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59011: LD_VAR 0 2
59015: PPUSH
59016: LD_INT 3
59018: PPUSH
59019: LD_INT 0
59021: PPUSH
59022: CALL_OW 277
// end ;
59026: PPOPN 2
59028: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59029: LD_EXP 29
59033: PUSH
59034: LD_EXP 57
59038: AND
59039: IFFALSE 59136
59041: GO 59043
59043: DISABLE
59044: LD_INT 0
59046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59047: LD_ADDR_VAR 0 1
59051: PUSH
59052: LD_INT 22
59054: PUSH
59055: LD_OWVAR 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 21
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 3
59076: PUSH
59077: LD_INT 23
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: PPUSH
59096: CALL_OW 69
59100: ST_TO_ADDR
// if not tmp then
59101: LD_VAR 0 1
59105: NOT
59106: IFFALSE 59110
// exit ;
59108: GO 59136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59110: LD_VAR 0 1
59114: PUSH
59115: LD_INT 1
59117: PPUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 12
59127: ARRAY
59128: PPUSH
59129: LD_INT 200
59131: PPUSH
59132: CALL_OW 234
// end ;
59136: PPOPN 1
59138: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59139: LD_EXP 29
59143: PUSH
59144: LD_EXP 58
59148: AND
59149: IFFALSE 59228
59151: GO 59153
59153: DISABLE
59154: LD_INT 0
59156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59157: LD_ADDR_VAR 0 1
59161: PUSH
59162: LD_INT 22
59164: PUSH
59165: LD_OWVAR 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 21
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PPUSH
59188: CALL_OW 69
59192: ST_TO_ADDR
// if not tmp then
59193: LD_VAR 0 1
59197: NOT
59198: IFFALSE 59202
// exit ;
59200: GO 59228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59202: LD_VAR 0 1
59206: PUSH
59207: LD_INT 1
59209: PPUSH
59210: LD_VAR 0 1
59214: PPUSH
59215: CALL_OW 12
59219: ARRAY
59220: PPUSH
59221: LD_INT 60
59223: PPUSH
59224: CALL_OW 234
// end ;
59228: PPOPN 1
59230: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59231: LD_EXP 29
59235: PUSH
59236: LD_EXP 59
59240: AND
59241: IFFALSE 59340
59243: GO 59245
59245: DISABLE
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
// begin enable ;
59250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59251: LD_ADDR_VAR 0 1
59255: PUSH
59256: LD_INT 22
59258: PUSH
59259: LD_OWVAR 2
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 61
59270: PUSH
59271: EMPTY
59272: LIST
59273: PUSH
59274: LD_INT 33
59276: PUSH
59277: LD_INT 2
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: PPUSH
59289: CALL_OW 69
59293: ST_TO_ADDR
// if not tmp then
59294: LD_VAR 0 1
59298: NOT
59299: IFFALSE 59303
// exit ;
59301: GO 59340
// for i in tmp do
59303: LD_ADDR_VAR 0 2
59307: PUSH
59308: LD_VAR 0 1
59312: PUSH
59313: FOR_IN
59314: IFFALSE 59338
// if IsControledBy ( i ) then
59316: LD_VAR 0 2
59320: PPUSH
59321: CALL_OW 312
59325: IFFALSE 59336
// ComUnlink ( i ) ;
59327: LD_VAR 0 2
59331: PPUSH
59332: CALL_OW 136
59336: GO 59313
59338: POP
59339: POP
// end ;
59340: PPOPN 2
59342: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59343: LD_EXP 29
59347: PUSH
59348: LD_EXP 60
59352: AND
59353: IFFALSE 59493
59355: GO 59357
59357: DISABLE
59358: LD_INT 0
59360: PPUSH
59361: PPUSH
// begin ToLua ( displayPowell(); ) ;
59362: LD_STRING displayPowell();
59364: PPUSH
59365: CALL_OW 559
// uc_side := 0 ;
59369: LD_ADDR_OWVAR 20
59373: PUSH
59374: LD_INT 0
59376: ST_TO_ADDR
// uc_nation := 2 ;
59377: LD_ADDR_OWVAR 21
59381: PUSH
59382: LD_INT 2
59384: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59385: LD_ADDR_OWVAR 37
59389: PUSH
59390: LD_INT 14
59392: ST_TO_ADDR
// vc_engine := engine_siberite ;
59393: LD_ADDR_OWVAR 39
59397: PUSH
59398: LD_INT 3
59400: ST_TO_ADDR
// vc_control := control_apeman ;
59401: LD_ADDR_OWVAR 38
59405: PUSH
59406: LD_INT 5
59408: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59409: LD_ADDR_OWVAR 40
59413: PUSH
59414: LD_INT 29
59416: ST_TO_ADDR
// un := CreateVehicle ;
59417: LD_ADDR_VAR 0 2
59421: PUSH
59422: CALL_OW 45
59426: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59427: LD_VAR 0 2
59431: PPUSH
59432: LD_INT 1
59434: PPUSH
59435: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59439: LD_INT 35
59441: PPUSH
59442: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59446: LD_VAR 0 2
59450: PPUSH
59451: LD_INT 22
59453: PUSH
59454: LD_OWVAR 2
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PPUSH
59463: CALL_OW 69
59467: PPUSH
59468: LD_VAR 0 2
59472: PPUSH
59473: CALL_OW 74
59477: PPUSH
59478: CALL_OW 115
// until IsDead ( un ) ;
59482: LD_VAR 0 2
59486: PPUSH
59487: CALL_OW 301
59491: IFFALSE 59439
// end ;
59493: PPOPN 2
59495: END
// every 0 0$1 trigger StreamModeActive and sStu do
59496: LD_EXP 29
59500: PUSH
59501: LD_EXP 68
59505: AND
59506: IFFALSE 59522
59508: GO 59510
59510: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59511: LD_STRING displayStucuk();
59513: PPUSH
59514: CALL_OW 559
// ResetFog ;
59518: CALL_OW 335
// end ;
59522: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59523: LD_EXP 29
59527: PUSH
59528: LD_EXP 61
59532: AND
59533: IFFALSE 59674
59535: GO 59537
59537: DISABLE
59538: LD_INT 0
59540: PPUSH
59541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59542: LD_ADDR_VAR 0 2
59546: PUSH
59547: LD_INT 22
59549: PUSH
59550: LD_OWVAR 2
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 21
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PPUSH
59573: CALL_OW 69
59577: ST_TO_ADDR
// if not tmp then
59578: LD_VAR 0 2
59582: NOT
59583: IFFALSE 59587
// exit ;
59585: GO 59674
// un := tmp [ rand ( 1 , tmp ) ] ;
59587: LD_ADDR_VAR 0 1
59591: PUSH
59592: LD_VAR 0 2
59596: PUSH
59597: LD_INT 1
59599: PPUSH
59600: LD_VAR 0 2
59604: PPUSH
59605: CALL_OW 12
59609: ARRAY
59610: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59611: LD_VAR 0 1
59615: PPUSH
59616: LD_INT 0
59618: PPUSH
59619: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59623: LD_VAR 0 1
59627: PPUSH
59628: LD_OWVAR 3
59632: PUSH
59633: LD_VAR 0 1
59637: DIFF
59638: PPUSH
59639: LD_VAR 0 1
59643: PPUSH
59644: CALL_OW 74
59648: PPUSH
59649: CALL_OW 115
// wait ( 0 0$20 ) ;
59653: LD_INT 700
59655: PPUSH
59656: CALL_OW 67
// SetSide ( un , your_side ) ;
59660: LD_VAR 0 1
59664: PPUSH
59665: LD_OWVAR 2
59669: PPUSH
59670: CALL_OW 235
// end ;
59674: PPOPN 2
59676: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59677: LD_EXP 29
59681: PUSH
59682: LD_EXP 62
59686: AND
59687: IFFALSE 59793
59689: GO 59691
59691: DISABLE
59692: LD_INT 0
59694: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59695: LD_ADDR_VAR 0 1
59699: PUSH
59700: LD_INT 22
59702: PUSH
59703: LD_OWVAR 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 30
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 30
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PPUSH
59744: CALL_OW 69
59748: ST_TO_ADDR
// if not depot then
59749: LD_VAR 0 1
59753: NOT
59754: IFFALSE 59758
// exit ;
59756: GO 59793
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59758: LD_VAR 0 1
59762: PUSH
59763: LD_INT 1
59765: ARRAY
59766: PPUSH
59767: CALL_OW 250
59771: PPUSH
59772: LD_VAR 0 1
59776: PUSH
59777: LD_INT 1
59779: ARRAY
59780: PPUSH
59781: CALL_OW 251
59785: PPUSH
59786: LD_INT 70
59788: PPUSH
59789: CALL_OW 495
// end ;
59793: PPOPN 1
59795: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59796: LD_EXP 29
59800: PUSH
59801: LD_EXP 63
59805: AND
59806: IFFALSE 60017
59808: GO 59810
59810: DISABLE
59811: LD_INT 0
59813: PPUSH
59814: PPUSH
59815: PPUSH
59816: PPUSH
59817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59818: LD_ADDR_VAR 0 5
59822: PUSH
59823: LD_INT 22
59825: PUSH
59826: LD_OWVAR 2
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 21
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PPUSH
59849: CALL_OW 69
59853: ST_TO_ADDR
// if not tmp then
59854: LD_VAR 0 5
59858: NOT
59859: IFFALSE 59863
// exit ;
59861: GO 60017
// for i in tmp do
59863: LD_ADDR_VAR 0 1
59867: PUSH
59868: LD_VAR 0 5
59872: PUSH
59873: FOR_IN
59874: IFFALSE 60015
// begin d := rand ( 0 , 5 ) ;
59876: LD_ADDR_VAR 0 4
59880: PUSH
59881: LD_INT 0
59883: PPUSH
59884: LD_INT 5
59886: PPUSH
59887: CALL_OW 12
59891: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59892: LD_ADDR_VAR 0 2
59896: PUSH
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL_OW 250
59906: PPUSH
59907: LD_VAR 0 4
59911: PPUSH
59912: LD_INT 3
59914: PPUSH
59915: LD_INT 12
59917: PPUSH
59918: CALL_OW 12
59922: PPUSH
59923: CALL_OW 272
59927: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 251
59942: PPUSH
59943: LD_VAR 0 4
59947: PPUSH
59948: LD_INT 3
59950: PPUSH
59951: LD_INT 12
59953: PPUSH
59954: CALL_OW 12
59958: PPUSH
59959: CALL_OW 273
59963: ST_TO_ADDR
// if ValidHex ( x , y ) then
59964: LD_VAR 0 2
59968: PPUSH
59969: LD_VAR 0 3
59973: PPUSH
59974: CALL_OW 488
59978: IFFALSE 60013
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59980: LD_VAR 0 1
59984: PPUSH
59985: LD_VAR 0 2
59989: PPUSH
59990: LD_VAR 0 3
59994: PPUSH
59995: LD_INT 3
59997: PPUSH
59998: LD_INT 6
60000: PPUSH
60001: CALL_OW 12
60005: PPUSH
60006: LD_INT 1
60008: PPUSH
60009: CALL_OW 483
// end ;
60013: GO 59873
60015: POP
60016: POP
// end ;
60017: PPOPN 5
60019: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60020: LD_EXP 29
60024: PUSH
60025: LD_EXP 64
60029: AND
60030: IFFALSE 60124
60032: GO 60034
60034: DISABLE
60035: LD_INT 0
60037: PPUSH
60038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60039: LD_ADDR_VAR 0 2
60043: PUSH
60044: LD_INT 22
60046: PUSH
60047: LD_OWVAR 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 32
60058: PUSH
60059: LD_INT 1
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 21
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: PPUSH
60081: CALL_OW 69
60085: ST_TO_ADDR
// if not tmp then
60086: LD_VAR 0 2
60090: NOT
60091: IFFALSE 60095
// exit ;
60093: GO 60124
// for i in tmp do
60095: LD_ADDR_VAR 0 1
60099: PUSH
60100: LD_VAR 0 2
60104: PUSH
60105: FOR_IN
60106: IFFALSE 60122
// SetFuel ( i , 0 ) ;
60108: LD_VAR 0 1
60112: PPUSH
60113: LD_INT 0
60115: PPUSH
60116: CALL_OW 240
60120: GO 60105
60122: POP
60123: POP
// end ;
60124: PPOPN 2
60126: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60127: LD_EXP 29
60131: PUSH
60132: LD_EXP 65
60136: AND
60137: IFFALSE 60203
60139: GO 60141
60141: DISABLE
60142: LD_INT 0
60144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60145: LD_ADDR_VAR 0 1
60149: PUSH
60150: LD_INT 22
60152: PUSH
60153: LD_OWVAR 2
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 30
60164: PUSH
60165: LD_INT 29
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PPUSH
60176: CALL_OW 69
60180: ST_TO_ADDR
// if not tmp then
60181: LD_VAR 0 1
60185: NOT
60186: IFFALSE 60190
// exit ;
60188: GO 60203
// DestroyUnit ( tmp [ 1 ] ) ;
60190: LD_VAR 0 1
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: PPUSH
60199: CALL_OW 65
// end ;
60203: PPOPN 1
60205: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60206: LD_EXP 29
60210: PUSH
60211: LD_EXP 67
60215: AND
60216: IFFALSE 60345
60218: GO 60220
60220: DISABLE
60221: LD_INT 0
60223: PPUSH
// begin uc_side := 0 ;
60224: LD_ADDR_OWVAR 20
60228: PUSH
60229: LD_INT 0
60231: ST_TO_ADDR
// uc_nation := nation_arabian ;
60232: LD_ADDR_OWVAR 21
60236: PUSH
60237: LD_INT 2
60239: ST_TO_ADDR
// hc_gallery :=  ;
60240: LD_ADDR_OWVAR 33
60244: PUSH
60245: LD_STRING 
60247: ST_TO_ADDR
// hc_name :=  ;
60248: LD_ADDR_OWVAR 26
60252: PUSH
60253: LD_STRING 
60255: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60256: LD_INT 1
60258: PPUSH
60259: LD_INT 11
60261: PPUSH
60262: LD_INT 10
60264: PPUSH
60265: CALL_OW 380
// un := CreateHuman ;
60269: LD_ADDR_VAR 0 1
60273: PUSH
60274: CALL_OW 44
60278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60279: LD_VAR 0 1
60283: PPUSH
60284: LD_INT 1
60286: PPUSH
60287: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60291: LD_INT 35
60293: PPUSH
60294: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60298: LD_VAR 0 1
60302: PPUSH
60303: LD_INT 22
60305: PUSH
60306: LD_OWVAR 2
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PPUSH
60315: CALL_OW 69
60319: PPUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: CALL_OW 74
60329: PPUSH
60330: CALL_OW 115
// until IsDead ( un ) ;
60334: LD_VAR 0 1
60338: PPUSH
60339: CALL_OW 301
60343: IFFALSE 60291
// end ;
60345: PPOPN 1
60347: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60348: LD_EXP 29
60352: PUSH
60353: LD_EXP 69
60357: AND
60358: IFFALSE 60370
60360: GO 60362
60362: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60363: LD_STRING earthquake(getX(game), 0, 32)
60365: PPUSH
60366: CALL_OW 559
60370: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60371: LD_EXP 29
60375: PUSH
60376: LD_EXP 70
60380: AND
60381: IFFALSE 60472
60383: GO 60385
60385: DISABLE
60386: LD_INT 0
60388: PPUSH
// begin enable ;
60389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60390: LD_ADDR_VAR 0 1
60394: PUSH
60395: LD_INT 22
60397: PUSH
60398: LD_OWVAR 2
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 21
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 33
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: PPUSH
60432: CALL_OW 69
60436: ST_TO_ADDR
// if not tmp then
60437: LD_VAR 0 1
60441: NOT
60442: IFFALSE 60446
// exit ;
60444: GO 60472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60446: LD_VAR 0 1
60450: PUSH
60451: LD_INT 1
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 12
60463: ARRAY
60464: PPUSH
60465: LD_INT 1
60467: PPUSH
60468: CALL_OW 234
// end ;
60472: PPOPN 1
60474: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60475: LD_EXP 29
60479: PUSH
60480: LD_EXP 71
60484: AND
60485: IFFALSE 60626
60487: GO 60489
60489: DISABLE
60490: LD_INT 0
60492: PPUSH
60493: PPUSH
60494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60495: LD_ADDR_VAR 0 3
60499: PUSH
60500: LD_INT 22
60502: PUSH
60503: LD_OWVAR 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 25
60514: PUSH
60515: LD_INT 1
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PPUSH
60526: CALL_OW 69
60530: ST_TO_ADDR
// if not tmp then
60531: LD_VAR 0 3
60535: NOT
60536: IFFALSE 60540
// exit ;
60538: GO 60626
// un := tmp [ rand ( 1 , tmp ) ] ;
60540: LD_ADDR_VAR 0 2
60544: PUSH
60545: LD_VAR 0 3
60549: PUSH
60550: LD_INT 1
60552: PPUSH
60553: LD_VAR 0 3
60557: PPUSH
60558: CALL_OW 12
60562: ARRAY
60563: ST_TO_ADDR
// if Crawls ( un ) then
60564: LD_VAR 0 2
60568: PPUSH
60569: CALL_OW 318
60573: IFFALSE 60584
// ComWalk ( un ) ;
60575: LD_VAR 0 2
60579: PPUSH
60580: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60584: LD_VAR 0 2
60588: PPUSH
60589: LD_INT 9
60591: PPUSH
60592: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60596: LD_INT 28
60598: PPUSH
60599: LD_OWVAR 2
60603: PPUSH
60604: LD_INT 2
60606: PPUSH
60607: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60611: LD_INT 29
60613: PPUSH
60614: LD_OWVAR 2
60618: PPUSH
60619: LD_INT 2
60621: PPUSH
60622: CALL_OW 322
// end ;
60626: PPOPN 3
60628: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60629: LD_EXP 29
60633: PUSH
60634: LD_EXP 72
60638: AND
60639: IFFALSE 60750
60641: GO 60643
60643: DISABLE
60644: LD_INT 0
60646: PPUSH
60647: PPUSH
60648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60649: LD_ADDR_VAR 0 3
60653: PUSH
60654: LD_INT 22
60656: PUSH
60657: LD_OWVAR 2
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 25
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PPUSH
60680: CALL_OW 69
60684: ST_TO_ADDR
// if not tmp then
60685: LD_VAR 0 3
60689: NOT
60690: IFFALSE 60694
// exit ;
60692: GO 60750
// un := tmp [ rand ( 1 , tmp ) ] ;
60694: LD_ADDR_VAR 0 2
60698: PUSH
60699: LD_VAR 0 3
60703: PUSH
60704: LD_INT 1
60706: PPUSH
60707: LD_VAR 0 3
60711: PPUSH
60712: CALL_OW 12
60716: ARRAY
60717: ST_TO_ADDR
// if Crawls ( un ) then
60718: LD_VAR 0 2
60722: PPUSH
60723: CALL_OW 318
60727: IFFALSE 60738
// ComWalk ( un ) ;
60729: LD_VAR 0 2
60733: PPUSH
60734: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60738: LD_VAR 0 2
60742: PPUSH
60743: LD_INT 8
60745: PPUSH
60746: CALL_OW 336
// end ;
60750: PPOPN 3
60752: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60753: LD_EXP 29
60757: PUSH
60758: LD_EXP 73
60762: AND
60763: IFFALSE 60907
60765: GO 60767
60767: DISABLE
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60772: LD_ADDR_VAR 0 2
60776: PUSH
60777: LD_INT 22
60779: PUSH
60780: LD_OWVAR 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 21
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 34
60804: PUSH
60805: LD_INT 12
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 34
60814: PUSH
60815: LD_INT 51
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 34
60824: PUSH
60825: LD_INT 32
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: PPUSH
60843: CALL_OW 69
60847: ST_TO_ADDR
// if not tmp then
60848: LD_VAR 0 2
60852: NOT
60853: IFFALSE 60857
// exit ;
60855: GO 60907
// for i in tmp do
60857: LD_ADDR_VAR 0 1
60861: PUSH
60862: LD_VAR 0 2
60866: PUSH
60867: FOR_IN
60868: IFFALSE 60905
// if GetCargo ( i , mat_artifact ) = 0 then
60870: LD_VAR 0 1
60874: PPUSH
60875: LD_INT 4
60877: PPUSH
60878: CALL_OW 289
60882: PUSH
60883: LD_INT 0
60885: EQUAL
60886: IFFALSE 60903
// SetCargo ( i , mat_siberit , 100 ) ;
60888: LD_VAR 0 1
60892: PPUSH
60893: LD_INT 3
60895: PPUSH
60896: LD_INT 100
60898: PPUSH
60899: CALL_OW 290
60903: GO 60867
60905: POP
60906: POP
// end ;
60907: PPOPN 2
60909: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60910: LD_EXP 29
60914: PUSH
60915: LD_EXP 74
60919: AND
60920: IFFALSE 61103
60922: GO 60924
60924: DISABLE
60925: LD_INT 0
60927: PPUSH
60928: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60929: LD_ADDR_VAR 0 2
60933: PUSH
60934: LD_INT 22
60936: PUSH
60937: LD_OWVAR 2
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PPUSH
60946: CALL_OW 69
60950: ST_TO_ADDR
// if not tmp then
60951: LD_VAR 0 2
60955: NOT
60956: IFFALSE 60960
// exit ;
60958: GO 61103
// for i := 1 to 2 do
60960: LD_ADDR_VAR 0 1
60964: PUSH
60965: DOUBLE
60966: LD_INT 1
60968: DEC
60969: ST_TO_ADDR
60970: LD_INT 2
60972: PUSH
60973: FOR_TO
60974: IFFALSE 61101
// begin uc_side := your_side ;
60976: LD_ADDR_OWVAR 20
60980: PUSH
60981: LD_OWVAR 2
60985: ST_TO_ADDR
// uc_nation := nation_american ;
60986: LD_ADDR_OWVAR 21
60990: PUSH
60991: LD_INT 1
60993: ST_TO_ADDR
// vc_chassis := us_morphling ;
60994: LD_ADDR_OWVAR 37
60998: PUSH
60999: LD_INT 5
61001: ST_TO_ADDR
// vc_engine := engine_siberite ;
61002: LD_ADDR_OWVAR 39
61006: PUSH
61007: LD_INT 3
61009: ST_TO_ADDR
// vc_control := control_computer ;
61010: LD_ADDR_OWVAR 38
61014: PUSH
61015: LD_INT 3
61017: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61018: LD_ADDR_OWVAR 40
61022: PUSH
61023: LD_INT 10
61025: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61026: LD_VAR 0 2
61030: PUSH
61031: LD_INT 1
61033: ARRAY
61034: PPUSH
61035: CALL_OW 310
61039: NOT
61040: IFFALSE 61087
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61042: CALL_OW 45
61046: PPUSH
61047: LD_VAR 0 2
61051: PUSH
61052: LD_INT 1
61054: ARRAY
61055: PPUSH
61056: CALL_OW 250
61060: PPUSH
61061: LD_VAR 0 2
61065: PUSH
61066: LD_INT 1
61068: ARRAY
61069: PPUSH
61070: CALL_OW 251
61074: PPUSH
61075: LD_INT 12
61077: PPUSH
61078: LD_INT 1
61080: PPUSH
61081: CALL_OW 50
61085: GO 61099
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61087: CALL_OW 45
61091: PPUSH
61092: LD_INT 1
61094: PPUSH
61095: CALL_OW 51
// end ;
61099: GO 60973
61101: POP
61102: POP
// end ;
61103: PPOPN 2
61105: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61106: LD_EXP 29
61110: PUSH
61111: LD_EXP 75
61115: AND
61116: IFFALSE 61338
61118: GO 61120
61120: DISABLE
61121: LD_INT 0
61123: PPUSH
61124: PPUSH
61125: PPUSH
61126: PPUSH
61127: PPUSH
61128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61129: LD_ADDR_VAR 0 6
61133: PUSH
61134: LD_INT 22
61136: PUSH
61137: LD_OWVAR 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 21
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: LD_INT 23
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: PPUSH
61178: CALL_OW 69
61182: ST_TO_ADDR
// if not tmp then
61183: LD_VAR 0 6
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61338
// s1 := rand ( 1 , 4 ) ;
61192: LD_ADDR_VAR 0 2
61196: PUSH
61197: LD_INT 1
61199: PPUSH
61200: LD_INT 4
61202: PPUSH
61203: CALL_OW 12
61207: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61208: LD_ADDR_VAR 0 4
61212: PUSH
61213: LD_VAR 0 6
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: PPUSH
61222: LD_VAR 0 2
61226: PPUSH
61227: CALL_OW 259
61231: ST_TO_ADDR
// if s1 = 1 then
61232: LD_VAR 0 2
61236: PUSH
61237: LD_INT 1
61239: EQUAL
61240: IFFALSE 61260
// s2 := rand ( 2 , 4 ) else
61242: LD_ADDR_VAR 0 3
61246: PUSH
61247: LD_INT 2
61249: PPUSH
61250: LD_INT 4
61252: PPUSH
61253: CALL_OW 12
61257: ST_TO_ADDR
61258: GO 61268
// s2 := 1 ;
61260: LD_ADDR_VAR 0 3
61264: PUSH
61265: LD_INT 1
61267: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61268: LD_ADDR_VAR 0 5
61272: PUSH
61273: LD_VAR 0 6
61277: PUSH
61278: LD_INT 1
61280: ARRAY
61281: PPUSH
61282: LD_VAR 0 3
61286: PPUSH
61287: CALL_OW 259
61291: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61292: LD_VAR 0 6
61296: PUSH
61297: LD_INT 1
61299: ARRAY
61300: PPUSH
61301: LD_VAR 0 2
61305: PPUSH
61306: LD_VAR 0 5
61310: PPUSH
61311: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61315: LD_VAR 0 6
61319: PUSH
61320: LD_INT 1
61322: ARRAY
61323: PPUSH
61324: LD_VAR 0 3
61328: PPUSH
61329: LD_VAR 0 4
61333: PPUSH
61334: CALL_OW 237
// end ;
61338: PPOPN 6
61340: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61341: LD_EXP 29
61345: PUSH
61346: LD_EXP 76
61350: AND
61351: IFFALSE 61430
61353: GO 61355
61355: DISABLE
61356: LD_INT 0
61358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61359: LD_ADDR_VAR 0 1
61363: PUSH
61364: LD_INT 22
61366: PUSH
61367: LD_OWVAR 2
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 30
61378: PUSH
61379: LD_INT 3
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PPUSH
61390: CALL_OW 69
61394: ST_TO_ADDR
// if not tmp then
61395: LD_VAR 0 1
61399: NOT
61400: IFFALSE 61404
// exit ;
61402: GO 61430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61404: LD_VAR 0 1
61408: PUSH
61409: LD_INT 1
61411: PPUSH
61412: LD_VAR 0 1
61416: PPUSH
61417: CALL_OW 12
61421: ARRAY
61422: PPUSH
61423: LD_INT 1
61425: PPUSH
61426: CALL_OW 234
// end ;
61430: PPOPN 1
61432: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61433: LD_EXP 29
61437: PUSH
61438: LD_EXP 77
61442: AND
61443: IFFALSE 61555
61445: GO 61447
61447: DISABLE
61448: LD_INT 0
61450: PPUSH
61451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61452: LD_ADDR_VAR 0 2
61456: PUSH
61457: LD_INT 22
61459: PUSH
61460: LD_OWVAR 2
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: LD_INT 30
61474: PUSH
61475: LD_INT 27
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 30
61484: PUSH
61485: LD_INT 26
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 30
61494: PUSH
61495: LD_INT 28
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PPUSH
61512: CALL_OW 69
61516: ST_TO_ADDR
// if not tmp then
61517: LD_VAR 0 2
61521: NOT
61522: IFFALSE 61526
// exit ;
61524: GO 61555
// for i in tmp do
61526: LD_ADDR_VAR 0 1
61530: PUSH
61531: LD_VAR 0 2
61535: PUSH
61536: FOR_IN
61537: IFFALSE 61553
// SetLives ( i , 1 ) ;
61539: LD_VAR 0 1
61543: PPUSH
61544: LD_INT 1
61546: PPUSH
61547: CALL_OW 234
61551: GO 61536
61553: POP
61554: POP
// end ;
61555: PPOPN 2
61557: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61558: LD_EXP 29
61562: PUSH
61563: LD_EXP 78
61567: AND
61568: IFFALSE 61855
61570: GO 61572
61572: DISABLE
61573: LD_INT 0
61575: PPUSH
61576: PPUSH
61577: PPUSH
// begin i := rand ( 1 , 7 ) ;
61578: LD_ADDR_VAR 0 1
61582: PUSH
61583: LD_INT 1
61585: PPUSH
61586: LD_INT 7
61588: PPUSH
61589: CALL_OW 12
61593: ST_TO_ADDR
// case i of 1 :
61594: LD_VAR 0 1
61598: PUSH
61599: LD_INT 1
61601: DOUBLE
61602: EQUAL
61603: IFTRUE 61607
61605: GO 61617
61607: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61608: LD_STRING earthquake(getX(game), 0, 32)
61610: PPUSH
61611: CALL_OW 559
61615: GO 61855
61617: LD_INT 2
61619: DOUBLE
61620: EQUAL
61621: IFTRUE 61625
61623: GO 61639
61625: POP
// begin ToLua ( displayStucuk(); ) ;
61626: LD_STRING displayStucuk();
61628: PPUSH
61629: CALL_OW 559
// ResetFog ;
61633: CALL_OW 335
// end ; 3 :
61637: GO 61855
61639: LD_INT 3
61641: DOUBLE
61642: EQUAL
61643: IFTRUE 61647
61645: GO 61751
61647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61648: LD_ADDR_VAR 0 2
61652: PUSH
61653: LD_INT 22
61655: PUSH
61656: LD_OWVAR 2
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 25
61667: PUSH
61668: LD_INT 1
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PPUSH
61679: CALL_OW 69
61683: ST_TO_ADDR
// if not tmp then
61684: LD_VAR 0 2
61688: NOT
61689: IFFALSE 61693
// exit ;
61691: GO 61855
// un := tmp [ rand ( 1 , tmp ) ] ;
61693: LD_ADDR_VAR 0 3
61697: PUSH
61698: LD_VAR 0 2
61702: PUSH
61703: LD_INT 1
61705: PPUSH
61706: LD_VAR 0 2
61710: PPUSH
61711: CALL_OW 12
61715: ARRAY
61716: ST_TO_ADDR
// if Crawls ( un ) then
61717: LD_VAR 0 3
61721: PPUSH
61722: CALL_OW 318
61726: IFFALSE 61737
// ComWalk ( un ) ;
61728: LD_VAR 0 3
61732: PPUSH
61733: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61737: LD_VAR 0 3
61741: PPUSH
61742: LD_INT 8
61744: PPUSH
61745: CALL_OW 336
// end ; 4 :
61749: GO 61855
61751: LD_INT 4
61753: DOUBLE
61754: EQUAL
61755: IFTRUE 61759
61757: GO 61833
61759: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61760: LD_ADDR_VAR 0 2
61764: PUSH
61765: LD_INT 22
61767: PUSH
61768: LD_OWVAR 2
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 30
61779: PUSH
61780: LD_INT 29
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PPUSH
61791: CALL_OW 69
61795: ST_TO_ADDR
// if not tmp then
61796: LD_VAR 0 2
61800: NOT
61801: IFFALSE 61805
// exit ;
61803: GO 61855
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61805: LD_VAR 0 2
61809: PUSH
61810: LD_INT 1
61812: ARRAY
61813: PPUSH
61814: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61818: LD_VAR 0 2
61822: PUSH
61823: LD_INT 1
61825: ARRAY
61826: PPUSH
61827: CALL_OW 65
// end ; 5 .. 7 :
61831: GO 61855
61833: LD_INT 5
61835: DOUBLE
61836: GREATEREQUAL
61837: IFFALSE 61845
61839: LD_INT 7
61841: DOUBLE
61842: LESSEQUAL
61843: IFTRUE 61847
61845: GO 61854
61847: POP
// StreamSibBomb ; end ;
61848: CALL 58092 0 0
61852: GO 61855
61854: POP
// end ;
61855: PPOPN 3
61857: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61858: LD_EXP 29
61862: PUSH
61863: LD_EXP 79
61867: AND
61868: IFFALSE 62024
61870: GO 61872
61872: DISABLE
61873: LD_INT 0
61875: PPUSH
61876: PPUSH
61877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61878: LD_ADDR_VAR 0 2
61882: PUSH
61883: LD_INT 81
61885: PUSH
61886: LD_OWVAR 2
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: PUSH
61898: LD_INT 21
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 21
61910: PUSH
61911: LD_INT 2
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PPUSH
61927: CALL_OW 69
61931: ST_TO_ADDR
// if not tmp then
61932: LD_VAR 0 2
61936: NOT
61937: IFFALSE 61941
// exit ;
61939: GO 62024
// p := 0 ;
61941: LD_ADDR_VAR 0 3
61945: PUSH
61946: LD_INT 0
61948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61949: LD_INT 35
61951: PPUSH
61952: CALL_OW 67
// p := p + 1 ;
61956: LD_ADDR_VAR 0 3
61960: PUSH
61961: LD_VAR 0 3
61965: PUSH
61966: LD_INT 1
61968: PLUS
61969: ST_TO_ADDR
// for i in tmp do
61970: LD_ADDR_VAR 0 1
61974: PUSH
61975: LD_VAR 0 2
61979: PUSH
61980: FOR_IN
61981: IFFALSE 62012
// if GetLives ( i ) < 1000 then
61983: LD_VAR 0 1
61987: PPUSH
61988: CALL_OW 256
61992: PUSH
61993: LD_INT 1000
61995: LESS
61996: IFFALSE 62010
// SetLives ( i , 1000 ) ;
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_INT 1000
62005: PPUSH
62006: CALL_OW 234
62010: GO 61980
62012: POP
62013: POP
// until p > 20 ;
62014: LD_VAR 0 3
62018: PUSH
62019: LD_INT 20
62021: GREATER
62022: IFFALSE 61949
// end ;
62024: PPOPN 3
62026: END
// every 0 0$1 trigger StreamModeActive and sTime do
62027: LD_EXP 29
62031: PUSH
62032: LD_EXP 80
62036: AND
62037: IFFALSE 62072
62039: GO 62041
62041: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62042: LD_INT 28
62044: PPUSH
62045: LD_OWVAR 2
62049: PPUSH
62050: LD_INT 2
62052: PPUSH
62053: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62057: LD_INT 30
62059: PPUSH
62060: LD_OWVAR 2
62064: PPUSH
62065: LD_INT 2
62067: PPUSH
62068: CALL_OW 322
// end ;
62072: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62073: LD_EXP 29
62077: PUSH
62078: LD_EXP 81
62082: AND
62083: IFFALSE 62204
62085: GO 62087
62087: DISABLE
62088: LD_INT 0
62090: PPUSH
62091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62092: LD_ADDR_VAR 0 2
62096: PUSH
62097: LD_INT 22
62099: PUSH
62100: LD_OWVAR 2
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 21
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 23
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: PPUSH
62141: CALL_OW 69
62145: ST_TO_ADDR
// if not tmp then
62146: LD_VAR 0 2
62150: NOT
62151: IFFALSE 62155
// exit ;
62153: GO 62204
// for i in tmp do
62155: LD_ADDR_VAR 0 1
62159: PUSH
62160: LD_VAR 0 2
62164: PUSH
62165: FOR_IN
62166: IFFALSE 62202
// begin if Crawls ( i ) then
62168: LD_VAR 0 1
62172: PPUSH
62173: CALL_OW 318
62177: IFFALSE 62188
// ComWalk ( i ) ;
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 138
// SetClass ( i , 2 ) ;
62188: LD_VAR 0 1
62192: PPUSH
62193: LD_INT 2
62195: PPUSH
62196: CALL_OW 336
// end ;
62200: GO 62165
62202: POP
62203: POP
// end ;
62204: PPOPN 2
62206: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62207: LD_EXP 29
62211: PUSH
62212: LD_EXP 82
62216: AND
62217: IFFALSE 62505
62219: GO 62221
62221: DISABLE
62222: LD_INT 0
62224: PPUSH
62225: PPUSH
62226: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62227: LD_OWVAR 2
62231: PPUSH
62232: LD_INT 9
62234: PPUSH
62235: LD_INT 1
62237: PPUSH
62238: LD_INT 1
62240: PPUSH
62241: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62245: LD_INT 9
62247: PPUSH
62248: LD_OWVAR 2
62252: PPUSH
62253: CALL_OW 343
// uc_side := 9 ;
62257: LD_ADDR_OWVAR 20
62261: PUSH
62262: LD_INT 9
62264: ST_TO_ADDR
// uc_nation := 2 ;
62265: LD_ADDR_OWVAR 21
62269: PUSH
62270: LD_INT 2
62272: ST_TO_ADDR
// hc_name := Dark Warrior ;
62273: LD_ADDR_OWVAR 26
62277: PUSH
62278: LD_STRING Dark Warrior
62280: ST_TO_ADDR
// hc_gallery :=  ;
62281: LD_ADDR_OWVAR 33
62285: PUSH
62286: LD_STRING 
62288: ST_TO_ADDR
// hc_noskilllimit := true ;
62289: LD_ADDR_OWVAR 76
62293: PUSH
62294: LD_INT 1
62296: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62297: LD_ADDR_OWVAR 31
62301: PUSH
62302: LD_INT 30
62304: PUSH
62305: LD_INT 30
62307: PUSH
62308: LD_INT 30
62310: PUSH
62311: LD_INT 30
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// un := CreateHuman ;
62320: LD_ADDR_VAR 0 3
62324: PUSH
62325: CALL_OW 44
62329: ST_TO_ADDR
// hc_noskilllimit := false ;
62330: LD_ADDR_OWVAR 76
62334: PUSH
62335: LD_INT 0
62337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62338: LD_VAR 0 3
62342: PPUSH
62343: LD_INT 1
62345: PPUSH
62346: CALL_OW 51
// ToLua ( playRanger() ) ;
62350: LD_STRING playRanger()
62352: PPUSH
62353: CALL_OW 559
// p := 0 ;
62357: LD_ADDR_VAR 0 2
62361: PUSH
62362: LD_INT 0
62364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62365: LD_INT 35
62367: PPUSH
62368: CALL_OW 67
// p := p + 1 ;
62372: LD_ADDR_VAR 0 2
62376: PUSH
62377: LD_VAR 0 2
62381: PUSH
62382: LD_INT 1
62384: PLUS
62385: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62386: LD_VAR 0 3
62390: PPUSH
62391: CALL_OW 256
62395: PUSH
62396: LD_INT 1000
62398: LESS
62399: IFFALSE 62413
// SetLives ( un , 1000 ) ;
62401: LD_VAR 0 3
62405: PPUSH
62406: LD_INT 1000
62408: PPUSH
62409: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62413: LD_VAR 0 3
62417: PPUSH
62418: LD_INT 81
62420: PUSH
62421: LD_OWVAR 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 91
62432: PUSH
62433: LD_VAR 0 3
62437: PUSH
62438: LD_INT 30
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: LIST
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PPUSH
62450: CALL_OW 69
62454: PPUSH
62455: LD_VAR 0 3
62459: PPUSH
62460: CALL_OW 74
62464: PPUSH
62465: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62469: LD_VAR 0 2
62473: PUSH
62474: LD_INT 80
62476: GREATER
62477: PUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 301
62487: OR
62488: IFFALSE 62365
// if un then
62490: LD_VAR 0 3
62494: IFFALSE 62505
// RemoveUnit ( un ) ;
62496: LD_VAR 0 3
62500: PPUSH
62501: CALL_OW 64
// end ;
62505: PPOPN 3
62507: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62508: LD_EXP 83
62512: IFFALSE 62628
62514: GO 62516
62516: DISABLE
62517: LD_INT 0
62519: PPUSH
62520: PPUSH
62521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62522: LD_ADDR_VAR 0 2
62526: PUSH
62527: LD_INT 81
62529: PUSH
62530: LD_OWVAR 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 21
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PPUSH
62553: CALL_OW 69
62557: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62558: LD_STRING playComputer()
62560: PPUSH
62561: CALL_OW 559
// if not tmp then
62565: LD_VAR 0 2
62569: NOT
62570: IFFALSE 62574
// exit ;
62572: GO 62628
// for i in tmp do
62574: LD_ADDR_VAR 0 1
62578: PUSH
62579: LD_VAR 0 2
62583: PUSH
62584: FOR_IN
62585: IFFALSE 62626
// for j := 1 to 4 do
62587: LD_ADDR_VAR 0 3
62591: PUSH
62592: DOUBLE
62593: LD_INT 1
62595: DEC
62596: ST_TO_ADDR
62597: LD_INT 4
62599: PUSH
62600: FOR_TO
62601: IFFALSE 62622
// SetSkill ( i , j , 10 ) ;
62603: LD_VAR 0 1
62607: PPUSH
62608: LD_VAR 0 3
62612: PPUSH
62613: LD_INT 10
62615: PPUSH
62616: CALL_OW 237
62620: GO 62600
62622: POP
62623: POP
62624: GO 62584
62626: POP
62627: POP
// end ;
62628: PPOPN 3
62630: END
// every 0 0$1 trigger s30 do var i , tmp ;
62631: LD_EXP 84
62635: IFFALSE 62704
62637: GO 62639
62639: DISABLE
62640: LD_INT 0
62642: PPUSH
62643: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_INT 22
62651: PUSH
62652: LD_OWVAR 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PPUSH
62661: CALL_OW 69
62665: ST_TO_ADDR
// if not tmp then
62666: LD_VAR 0 2
62670: NOT
62671: IFFALSE 62675
// exit ;
62673: GO 62704
// for i in tmp do
62675: LD_ADDR_VAR 0 1
62679: PUSH
62680: LD_VAR 0 2
62684: PUSH
62685: FOR_IN
62686: IFFALSE 62702
// SetLives ( i , 300 ) ;
62688: LD_VAR 0 1
62692: PPUSH
62693: LD_INT 300
62695: PPUSH
62696: CALL_OW 234
62700: GO 62685
62702: POP
62703: POP
// end ;
62704: PPOPN 2
62706: END
// every 0 0$1 trigger s60 do var i , tmp ;
62707: LD_EXP 85
62711: IFFALSE 62780
62713: GO 62715
62715: DISABLE
62716: LD_INT 0
62718: PPUSH
62719: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62720: LD_ADDR_VAR 0 2
62724: PUSH
62725: LD_INT 22
62727: PUSH
62728: LD_OWVAR 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PPUSH
62737: CALL_OW 69
62741: ST_TO_ADDR
// if not tmp then
62742: LD_VAR 0 2
62746: NOT
62747: IFFALSE 62751
// exit ;
62749: GO 62780
// for i in tmp do
62751: LD_ADDR_VAR 0 1
62755: PUSH
62756: LD_VAR 0 2
62760: PUSH
62761: FOR_IN
62762: IFFALSE 62778
// SetLives ( i , 600 ) ;
62764: LD_VAR 0 1
62768: PPUSH
62769: LD_INT 600
62771: PPUSH
62772: CALL_OW 234
62776: GO 62761
62778: POP
62779: POP
// end ;
62780: PPOPN 2
62782: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62783: LD_INT 0
62785: PPUSH
// case cmd of 301 :
62786: LD_VAR 0 1
62790: PUSH
62791: LD_INT 301
62793: DOUBLE
62794: EQUAL
62795: IFTRUE 62799
62797: GO 62831
62799: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62800: LD_VAR 0 6
62804: PPUSH
62805: LD_VAR 0 7
62809: PPUSH
62810: LD_VAR 0 8
62814: PPUSH
62815: LD_VAR 0 4
62819: PPUSH
62820: LD_VAR 0 5
62824: PPUSH
62825: CALL 64032 0 5
62829: GO 62952
62831: LD_INT 302
62833: DOUBLE
62834: EQUAL
62835: IFTRUE 62839
62837: GO 62876
62839: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62840: LD_VAR 0 6
62844: PPUSH
62845: LD_VAR 0 7
62849: PPUSH
62850: LD_VAR 0 8
62854: PPUSH
62855: LD_VAR 0 9
62859: PPUSH
62860: LD_VAR 0 4
62864: PPUSH
62865: LD_VAR 0 5
62869: PPUSH
62870: CALL 64123 0 6
62874: GO 62952
62876: LD_INT 303
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62884
62882: GO 62921
62884: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62885: LD_VAR 0 6
62889: PPUSH
62890: LD_VAR 0 7
62894: PPUSH
62895: LD_VAR 0 8
62899: PPUSH
62900: LD_VAR 0 9
62904: PPUSH
62905: LD_VAR 0 4
62909: PPUSH
62910: LD_VAR 0 5
62914: PPUSH
62915: CALL 62957 0 6
62919: GO 62952
62921: LD_INT 304
62923: DOUBLE
62924: EQUAL
62925: IFTRUE 62929
62927: GO 62951
62929: POP
// hHackTeleport ( unit , x , y ) ; end ;
62930: LD_VAR 0 2
62934: PPUSH
62935: LD_VAR 0 4
62939: PPUSH
62940: LD_VAR 0 5
62944: PPUSH
62945: CALL 64716 0 3
62949: GO 62952
62951: POP
// end ;
62952: LD_VAR 0 12
62956: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62957: LD_INT 0
62959: PPUSH
62960: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62961: LD_VAR 0 1
62965: PUSH
62966: LD_INT 1
62968: LESS
62969: PUSH
62970: LD_VAR 0 1
62974: PUSH
62975: LD_INT 3
62977: GREATER
62978: OR
62979: PUSH
62980: LD_VAR 0 5
62984: PPUSH
62985: LD_VAR 0 6
62989: PPUSH
62990: CALL_OW 428
62994: OR
62995: IFFALSE 62999
// exit ;
62997: GO 63719
// uc_side := your_side ;
62999: LD_ADDR_OWVAR 20
63003: PUSH
63004: LD_OWVAR 2
63008: ST_TO_ADDR
// uc_nation := nation ;
63009: LD_ADDR_OWVAR 21
63013: PUSH
63014: LD_VAR 0 1
63018: ST_TO_ADDR
// bc_level = 1 ;
63019: LD_ADDR_OWVAR 43
63023: PUSH
63024: LD_INT 1
63026: ST_TO_ADDR
// case btype of 1 :
63027: LD_VAR 0 2
63031: PUSH
63032: LD_INT 1
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63040
63038: GO 63051
63040: POP
// bc_type := b_depot ; 2 :
63041: LD_ADDR_OWVAR 42
63045: PUSH
63046: LD_INT 0
63048: ST_TO_ADDR
63049: GO 63663
63051: LD_INT 2
63053: DOUBLE
63054: EQUAL
63055: IFTRUE 63059
63057: GO 63070
63059: POP
// bc_type := b_warehouse ; 3 :
63060: LD_ADDR_OWVAR 42
63064: PUSH
63065: LD_INT 1
63067: ST_TO_ADDR
63068: GO 63663
63070: LD_INT 3
63072: DOUBLE
63073: EQUAL
63074: IFTRUE 63078
63076: GO 63089
63078: POP
// bc_type := b_lab ; 4 .. 9 :
63079: LD_ADDR_OWVAR 42
63083: PUSH
63084: LD_INT 6
63086: ST_TO_ADDR
63087: GO 63663
63089: LD_INT 4
63091: DOUBLE
63092: GREATEREQUAL
63093: IFFALSE 63101
63095: LD_INT 9
63097: DOUBLE
63098: LESSEQUAL
63099: IFTRUE 63103
63101: GO 63155
63103: POP
// begin bc_type := b_lab_half ;
63104: LD_ADDR_OWVAR 42
63108: PUSH
63109: LD_INT 7
63111: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63112: LD_ADDR_OWVAR 44
63116: PUSH
63117: LD_INT 10
63119: PUSH
63120: LD_INT 11
63122: PUSH
63123: LD_INT 12
63125: PUSH
63126: LD_INT 15
63128: PUSH
63129: LD_INT 14
63131: PUSH
63132: LD_INT 13
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: PUSH
63143: LD_VAR 0 2
63147: PUSH
63148: LD_INT 3
63150: MINUS
63151: ARRAY
63152: ST_TO_ADDR
// end ; 10 .. 13 :
63153: GO 63663
63155: LD_INT 10
63157: DOUBLE
63158: GREATEREQUAL
63159: IFFALSE 63167
63161: LD_INT 13
63163: DOUBLE
63164: LESSEQUAL
63165: IFTRUE 63169
63167: GO 63246
63169: POP
// begin bc_type := b_lab_full ;
63170: LD_ADDR_OWVAR 42
63174: PUSH
63175: LD_INT 8
63177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63178: LD_ADDR_OWVAR 44
63182: PUSH
63183: LD_INT 10
63185: PUSH
63186: LD_INT 12
63188: PUSH
63189: LD_INT 14
63191: PUSH
63192: LD_INT 13
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: PUSH
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 9
63208: MINUS
63209: ARRAY
63210: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63211: LD_ADDR_OWVAR 45
63215: PUSH
63216: LD_INT 11
63218: PUSH
63219: LD_INT 15
63221: PUSH
63222: LD_INT 12
63224: PUSH
63225: LD_INT 15
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: LD_VAR 0 2
63238: PUSH
63239: LD_INT 9
63241: MINUS
63242: ARRAY
63243: ST_TO_ADDR
// end ; 14 :
63244: GO 63663
63246: LD_INT 14
63248: DOUBLE
63249: EQUAL
63250: IFTRUE 63254
63252: GO 63265
63254: POP
// bc_type := b_workshop ; 15 :
63255: LD_ADDR_OWVAR 42
63259: PUSH
63260: LD_INT 2
63262: ST_TO_ADDR
63263: GO 63663
63265: LD_INT 15
63267: DOUBLE
63268: EQUAL
63269: IFTRUE 63273
63271: GO 63284
63273: POP
// bc_type := b_factory ; 16 :
63274: LD_ADDR_OWVAR 42
63278: PUSH
63279: LD_INT 3
63281: ST_TO_ADDR
63282: GO 63663
63284: LD_INT 16
63286: DOUBLE
63287: EQUAL
63288: IFTRUE 63292
63290: GO 63303
63292: POP
// bc_type := b_ext_gun ; 17 :
63293: LD_ADDR_OWVAR 42
63297: PUSH
63298: LD_INT 17
63300: ST_TO_ADDR
63301: GO 63663
63303: LD_INT 17
63305: DOUBLE
63306: EQUAL
63307: IFTRUE 63311
63309: GO 63339
63311: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63312: LD_ADDR_OWVAR 42
63316: PUSH
63317: LD_INT 19
63319: PUSH
63320: LD_INT 23
63322: PUSH
63323: LD_INT 19
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: LD_VAR 0 1
63335: ARRAY
63336: ST_TO_ADDR
63337: GO 63663
63339: LD_INT 18
63341: DOUBLE
63342: EQUAL
63343: IFTRUE 63347
63345: GO 63358
63347: POP
// bc_type := b_ext_radar ; 19 :
63348: LD_ADDR_OWVAR 42
63352: PUSH
63353: LD_INT 20
63355: ST_TO_ADDR
63356: GO 63663
63358: LD_INT 19
63360: DOUBLE
63361: EQUAL
63362: IFTRUE 63366
63364: GO 63377
63366: POP
// bc_type := b_ext_radio ; 20 :
63367: LD_ADDR_OWVAR 42
63371: PUSH
63372: LD_INT 22
63374: ST_TO_ADDR
63375: GO 63663
63377: LD_INT 20
63379: DOUBLE
63380: EQUAL
63381: IFTRUE 63385
63383: GO 63396
63385: POP
// bc_type := b_ext_siberium ; 21 :
63386: LD_ADDR_OWVAR 42
63390: PUSH
63391: LD_INT 21
63393: ST_TO_ADDR
63394: GO 63663
63396: LD_INT 21
63398: DOUBLE
63399: EQUAL
63400: IFTRUE 63404
63402: GO 63415
63404: POP
// bc_type := b_ext_computer ; 22 :
63405: LD_ADDR_OWVAR 42
63409: PUSH
63410: LD_INT 24
63412: ST_TO_ADDR
63413: GO 63663
63415: LD_INT 22
63417: DOUBLE
63418: EQUAL
63419: IFTRUE 63423
63421: GO 63434
63423: POP
// bc_type := b_ext_track ; 23 :
63424: LD_ADDR_OWVAR 42
63428: PUSH
63429: LD_INT 16
63431: ST_TO_ADDR
63432: GO 63663
63434: LD_INT 23
63436: DOUBLE
63437: EQUAL
63438: IFTRUE 63442
63440: GO 63453
63442: POP
// bc_type := b_ext_laser ; 24 :
63443: LD_ADDR_OWVAR 42
63447: PUSH
63448: LD_INT 25
63450: ST_TO_ADDR
63451: GO 63663
63453: LD_INT 24
63455: DOUBLE
63456: EQUAL
63457: IFTRUE 63461
63459: GO 63472
63461: POP
// bc_type := b_control_tower ; 25 :
63462: LD_ADDR_OWVAR 42
63466: PUSH
63467: LD_INT 36
63469: ST_TO_ADDR
63470: GO 63663
63472: LD_INT 25
63474: DOUBLE
63475: EQUAL
63476: IFTRUE 63480
63478: GO 63491
63480: POP
// bc_type := b_breastwork ; 26 :
63481: LD_ADDR_OWVAR 42
63485: PUSH
63486: LD_INT 31
63488: ST_TO_ADDR
63489: GO 63663
63491: LD_INT 26
63493: DOUBLE
63494: EQUAL
63495: IFTRUE 63499
63497: GO 63510
63499: POP
// bc_type := b_bunker ; 27 :
63500: LD_ADDR_OWVAR 42
63504: PUSH
63505: LD_INT 32
63507: ST_TO_ADDR
63508: GO 63663
63510: LD_INT 27
63512: DOUBLE
63513: EQUAL
63514: IFTRUE 63518
63516: GO 63529
63518: POP
// bc_type := b_turret ; 28 :
63519: LD_ADDR_OWVAR 42
63523: PUSH
63524: LD_INT 33
63526: ST_TO_ADDR
63527: GO 63663
63529: LD_INT 28
63531: DOUBLE
63532: EQUAL
63533: IFTRUE 63537
63535: GO 63548
63537: POP
// bc_type := b_armoury ; 29 :
63538: LD_ADDR_OWVAR 42
63542: PUSH
63543: LD_INT 4
63545: ST_TO_ADDR
63546: GO 63663
63548: LD_INT 29
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63556
63554: GO 63567
63556: POP
// bc_type := b_barracks ; 30 :
63557: LD_ADDR_OWVAR 42
63561: PUSH
63562: LD_INT 5
63564: ST_TO_ADDR
63565: GO 63663
63567: LD_INT 30
63569: DOUBLE
63570: EQUAL
63571: IFTRUE 63575
63573: GO 63586
63575: POP
// bc_type := b_solar_power ; 31 :
63576: LD_ADDR_OWVAR 42
63580: PUSH
63581: LD_INT 27
63583: ST_TO_ADDR
63584: GO 63663
63586: LD_INT 31
63588: DOUBLE
63589: EQUAL
63590: IFTRUE 63594
63592: GO 63605
63594: POP
// bc_type := b_oil_power ; 32 :
63595: LD_ADDR_OWVAR 42
63599: PUSH
63600: LD_INT 26
63602: ST_TO_ADDR
63603: GO 63663
63605: LD_INT 32
63607: DOUBLE
63608: EQUAL
63609: IFTRUE 63613
63611: GO 63624
63613: POP
// bc_type := b_siberite_power ; 33 :
63614: LD_ADDR_OWVAR 42
63618: PUSH
63619: LD_INT 28
63621: ST_TO_ADDR
63622: GO 63663
63624: LD_INT 33
63626: DOUBLE
63627: EQUAL
63628: IFTRUE 63632
63630: GO 63643
63632: POP
// bc_type := b_oil_mine ; 34 :
63633: LD_ADDR_OWVAR 42
63637: PUSH
63638: LD_INT 29
63640: ST_TO_ADDR
63641: GO 63663
63643: LD_INT 34
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63651
63649: GO 63662
63651: POP
// bc_type := b_siberite_mine ; end ;
63652: LD_ADDR_OWVAR 42
63656: PUSH
63657: LD_INT 30
63659: ST_TO_ADDR
63660: GO 63663
63662: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63663: LD_ADDR_VAR 0 8
63667: PUSH
63668: LD_VAR 0 5
63672: PPUSH
63673: LD_VAR 0 6
63677: PPUSH
63678: LD_VAR 0 3
63682: PPUSH
63683: CALL_OW 47
63687: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63688: LD_OWVAR 42
63692: PUSH
63693: LD_INT 32
63695: PUSH
63696: LD_INT 33
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: IN
63703: IFFALSE 63719
// PlaceWeaponTurret ( b , weapon ) ;
63705: LD_VAR 0 8
63709: PPUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: CALL_OW 431
// end ;
63719: LD_VAR 0 7
63723: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63724: LD_INT 0
63726: PPUSH
63727: PPUSH
63728: PPUSH
63729: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63730: LD_ADDR_VAR 0 4
63734: PUSH
63735: LD_INT 22
63737: PUSH
63738: LD_OWVAR 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 30
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 30
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PPUSH
63779: CALL_OW 69
63783: ST_TO_ADDR
// if not tmp then
63784: LD_VAR 0 4
63788: NOT
63789: IFFALSE 63793
// exit ;
63791: GO 63852
// for i in tmp do
63793: LD_ADDR_VAR 0 2
63797: PUSH
63798: LD_VAR 0 4
63802: PUSH
63803: FOR_IN
63804: IFFALSE 63850
// for j = 1 to 3 do
63806: LD_ADDR_VAR 0 3
63810: PUSH
63811: DOUBLE
63812: LD_INT 1
63814: DEC
63815: ST_TO_ADDR
63816: LD_INT 3
63818: PUSH
63819: FOR_TO
63820: IFFALSE 63846
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63822: LD_VAR 0 2
63826: PPUSH
63827: CALL_OW 274
63831: PPUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: LD_INT 99999
63839: PPUSH
63840: CALL_OW 277
63844: GO 63819
63846: POP
63847: POP
63848: GO 63803
63850: POP
63851: POP
// end ;
63852: LD_VAR 0 1
63856: RET
// export function hHackSetLevel10 ; var i , j ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
63861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63862: LD_ADDR_VAR 0 2
63866: PUSH
63867: LD_INT 21
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PPUSH
63877: CALL_OW 69
63881: PUSH
63882: FOR_IN
63883: IFFALSE 63935
// if IsSelected ( i ) then
63885: LD_VAR 0 2
63889: PPUSH
63890: CALL_OW 306
63894: IFFALSE 63933
// begin for j := 1 to 4 do
63896: LD_ADDR_VAR 0 3
63900: PUSH
63901: DOUBLE
63902: LD_INT 1
63904: DEC
63905: ST_TO_ADDR
63906: LD_INT 4
63908: PUSH
63909: FOR_TO
63910: IFFALSE 63931
// SetSkill ( i , j , 10 ) ;
63912: LD_VAR 0 2
63916: PPUSH
63917: LD_VAR 0 3
63921: PPUSH
63922: LD_INT 10
63924: PPUSH
63925: CALL_OW 237
63929: GO 63909
63931: POP
63932: POP
// end ;
63933: GO 63882
63935: POP
63936: POP
// end ;
63937: LD_VAR 0 1
63941: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63942: LD_INT 0
63944: PPUSH
63945: PPUSH
63946: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63947: LD_ADDR_VAR 0 2
63951: PUSH
63952: LD_INT 22
63954: PUSH
63955: LD_OWVAR 2
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 21
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PPUSH
63978: CALL_OW 69
63982: PUSH
63983: FOR_IN
63984: IFFALSE 64025
// begin for j := 1 to 4 do
63986: LD_ADDR_VAR 0 3
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_INT 4
63998: PUSH
63999: FOR_TO
64000: IFFALSE 64021
// SetSkill ( i , j , 10 ) ;
64002: LD_VAR 0 2
64006: PPUSH
64007: LD_VAR 0 3
64011: PPUSH
64012: LD_INT 10
64014: PPUSH
64015: CALL_OW 237
64019: GO 63999
64021: POP
64022: POP
// end ;
64023: GO 63983
64025: POP
64026: POP
// end ;
64027: LD_VAR 0 1
64031: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64032: LD_INT 0
64034: PPUSH
// uc_side := your_side ;
64035: LD_ADDR_OWVAR 20
64039: PUSH
64040: LD_OWVAR 2
64044: ST_TO_ADDR
// uc_nation := nation ;
64045: LD_ADDR_OWVAR 21
64049: PUSH
64050: LD_VAR 0 1
64054: ST_TO_ADDR
// InitHc ;
64055: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64059: LD_INT 0
64061: PPUSH
64062: LD_VAR 0 2
64066: PPUSH
64067: LD_VAR 0 3
64071: PPUSH
64072: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64076: LD_VAR 0 4
64080: PPUSH
64081: LD_VAR 0 5
64085: PPUSH
64086: CALL_OW 428
64090: PUSH
64091: LD_INT 0
64093: EQUAL
64094: IFFALSE 64118
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64096: CALL_OW 44
64100: PPUSH
64101: LD_VAR 0 4
64105: PPUSH
64106: LD_VAR 0 5
64110: PPUSH
64111: LD_INT 1
64113: PPUSH
64114: CALL_OW 48
// end ;
64118: LD_VAR 0 6
64122: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64123: LD_INT 0
64125: PPUSH
64126: PPUSH
// uc_side := your_side ;
64127: LD_ADDR_OWVAR 20
64131: PUSH
64132: LD_OWVAR 2
64136: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64137: LD_VAR 0 1
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 2
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: LD_INT 5
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: IN
64164: IFFALSE 64176
// uc_nation := nation_american else
64166: LD_ADDR_OWVAR 21
64170: PUSH
64171: LD_INT 1
64173: ST_TO_ADDR
64174: GO 64219
// if chassis in [ 11 , 12 , 13 , 14 ] then
64176: LD_VAR 0 1
64180: PUSH
64181: LD_INT 11
64183: PUSH
64184: LD_INT 12
64186: PUSH
64187: LD_INT 13
64189: PUSH
64190: LD_INT 14
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: IN
64199: IFFALSE 64211
// uc_nation := nation_arabian else
64201: LD_ADDR_OWVAR 21
64205: PUSH
64206: LD_INT 2
64208: ST_TO_ADDR
64209: GO 64219
// uc_nation := nation_russian ;
64211: LD_ADDR_OWVAR 21
64215: PUSH
64216: LD_INT 3
64218: ST_TO_ADDR
// vc_chassis := chassis ;
64219: LD_ADDR_OWVAR 37
64223: PUSH
64224: LD_VAR 0 1
64228: ST_TO_ADDR
// vc_engine := engine ;
64229: LD_ADDR_OWVAR 39
64233: PUSH
64234: LD_VAR 0 2
64238: ST_TO_ADDR
// vc_control := control ;
64239: LD_ADDR_OWVAR 38
64243: PUSH
64244: LD_VAR 0 3
64248: ST_TO_ADDR
// vc_weapon := weapon ;
64249: LD_ADDR_OWVAR 40
64253: PUSH
64254: LD_VAR 0 4
64258: ST_TO_ADDR
// un := CreateVehicle ;
64259: LD_ADDR_VAR 0 8
64263: PUSH
64264: CALL_OW 45
64268: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64269: LD_VAR 0 8
64273: PPUSH
64274: LD_INT 0
64276: PPUSH
64277: LD_INT 5
64279: PPUSH
64280: CALL_OW 12
64284: PPUSH
64285: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_VAR 0 6
64303: PPUSH
64304: LD_INT 1
64306: PPUSH
64307: CALL_OW 48
// end ;
64311: LD_VAR 0 7
64315: RET
// export hInvincible ; every 1 do
64316: GO 64318
64318: DISABLE
// hInvincible := [ ] ;
64319: LD_ADDR_EXP 86
64323: PUSH
64324: EMPTY
64325: ST_TO_ADDR
64326: END
// every 10 do var i ;
64327: GO 64329
64329: DISABLE
64330: LD_INT 0
64332: PPUSH
// begin enable ;
64333: ENABLE
// if not hInvincible then
64334: LD_EXP 86
64338: NOT
64339: IFFALSE 64343
// exit ;
64341: GO 64387
// for i in hInvincible do
64343: LD_ADDR_VAR 0 1
64347: PUSH
64348: LD_EXP 86
64352: PUSH
64353: FOR_IN
64354: IFFALSE 64385
// if GetLives ( i ) < 1000 then
64356: LD_VAR 0 1
64360: PPUSH
64361: CALL_OW 256
64365: PUSH
64366: LD_INT 1000
64368: LESS
64369: IFFALSE 64383
// SetLives ( i , 1000 ) ;
64371: LD_VAR 0 1
64375: PPUSH
64376: LD_INT 1000
64378: PPUSH
64379: CALL_OW 234
64383: GO 64353
64385: POP
64386: POP
// end ;
64387: PPOPN 1
64389: END
// export function hHackInvincible ; var i ; begin
64390: LD_INT 0
64392: PPUSH
64393: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64394: LD_ADDR_VAR 0 2
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 21
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 21
64414: PUSH
64415: LD_INT 2
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: PPUSH
64427: CALL_OW 69
64431: PUSH
64432: FOR_IN
64433: IFFALSE 64494
// if IsSelected ( i ) then
64435: LD_VAR 0 2
64439: PPUSH
64440: CALL_OW 306
64444: IFFALSE 64492
// begin if i in hInvincible then
64446: LD_VAR 0 2
64450: PUSH
64451: LD_EXP 86
64455: IN
64456: IFFALSE 64476
// hInvincible := hInvincible diff i else
64458: LD_ADDR_EXP 86
64462: PUSH
64463: LD_EXP 86
64467: PUSH
64468: LD_VAR 0 2
64472: DIFF
64473: ST_TO_ADDR
64474: GO 64492
// hInvincible := hInvincible union i ;
64476: LD_ADDR_EXP 86
64480: PUSH
64481: LD_EXP 86
64485: PUSH
64486: LD_VAR 0 2
64490: UNION
64491: ST_TO_ADDR
// end ;
64492: GO 64432
64494: POP
64495: POP
// end ;
64496: LD_VAR 0 1
64500: RET
// export function hHackInvisible ; var i , j ; begin
64501: LD_INT 0
64503: PPUSH
64504: PPUSH
64505: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64506: LD_ADDR_VAR 0 2
64510: PUSH
64511: LD_INT 21
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PPUSH
64521: CALL_OW 69
64525: PUSH
64526: FOR_IN
64527: IFFALSE 64551
// if IsSelected ( i ) then
64529: LD_VAR 0 2
64533: PPUSH
64534: CALL_OW 306
64538: IFFALSE 64549
// ComForceInvisible ( i ) ;
64540: LD_VAR 0 2
64544: PPUSH
64545: CALL_OW 496
64549: GO 64526
64551: POP
64552: POP
// end ;
64553: LD_VAR 0 1
64557: RET
// export function hHackChangeYourSide ; begin
64558: LD_INT 0
64560: PPUSH
// if your_side = 8 then
64561: LD_OWVAR 2
64565: PUSH
64566: LD_INT 8
64568: EQUAL
64569: IFFALSE 64581
// your_side := 0 else
64571: LD_ADDR_OWVAR 2
64575: PUSH
64576: LD_INT 0
64578: ST_TO_ADDR
64579: GO 64595
// your_side := your_side + 1 ;
64581: LD_ADDR_OWVAR 2
64585: PUSH
64586: LD_OWVAR 2
64590: PUSH
64591: LD_INT 1
64593: PLUS
64594: ST_TO_ADDR
// end ;
64595: LD_VAR 0 1
64599: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64600: LD_INT 0
64602: PPUSH
64603: PPUSH
64604: PPUSH
// for i in all_units do
64605: LD_ADDR_VAR 0 2
64609: PUSH
64610: LD_OWVAR 3
64614: PUSH
64615: FOR_IN
64616: IFFALSE 64694
// if IsSelected ( i ) then
64618: LD_VAR 0 2
64622: PPUSH
64623: CALL_OW 306
64627: IFFALSE 64692
// begin j := GetSide ( i ) ;
64629: LD_ADDR_VAR 0 3
64633: PUSH
64634: LD_VAR 0 2
64638: PPUSH
64639: CALL_OW 255
64643: ST_TO_ADDR
// if j = 8 then
64644: LD_VAR 0 3
64648: PUSH
64649: LD_INT 8
64651: EQUAL
64652: IFFALSE 64664
// j := 0 else
64654: LD_ADDR_VAR 0 3
64658: PUSH
64659: LD_INT 0
64661: ST_TO_ADDR
64662: GO 64678
// j := j + 1 ;
64664: LD_ADDR_VAR 0 3
64668: PUSH
64669: LD_VAR 0 3
64673: PUSH
64674: LD_INT 1
64676: PLUS
64677: ST_TO_ADDR
// SetSide ( i , j ) ;
64678: LD_VAR 0 2
64682: PPUSH
64683: LD_VAR 0 3
64687: PPUSH
64688: CALL_OW 235
// end ;
64692: GO 64615
64694: POP
64695: POP
// end ;
64696: LD_VAR 0 1
64700: RET
// export function hHackFog ; begin
64701: LD_INT 0
64703: PPUSH
// FogOff ( true ) ;
64704: LD_INT 1
64706: PPUSH
64707: CALL_OW 344
// end ;
64711: LD_VAR 0 1
64715: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64716: LD_INT 0
64718: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64719: LD_VAR 0 1
64723: PPUSH
64724: LD_VAR 0 2
64728: PPUSH
64729: LD_VAR 0 3
64733: PPUSH
64734: LD_INT 1
64736: PPUSH
64737: LD_INT 1
64739: PPUSH
64740: CALL_OW 483
// CenterOnXY ( x , y ) ;
64744: LD_VAR 0 2
64748: PPUSH
64749: LD_VAR 0 3
64753: PPUSH
64754: CALL_OW 84
// end ;
64758: LD_VAR 0 4
64762: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64763: LD_INT 0
64765: PPUSH
64766: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64767: LD_VAR 0 1
64771: NOT
64772: PUSH
64773: LD_VAR 0 2
64777: PPUSH
64778: LD_VAR 0 3
64782: PPUSH
64783: CALL_OW 488
64787: NOT
64788: OR
64789: PUSH
64790: LD_VAR 0 1
64794: PPUSH
64795: CALL_OW 266
64799: PUSH
64800: LD_INT 3
64802: NONEQUAL
64803: PUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: CALL_OW 247
64813: PUSH
64814: LD_INT 1
64816: EQUAL
64817: NOT
64818: AND
64819: OR
64820: IFFALSE 64824
// exit ;
64822: GO 64973
// if GetType ( factory ) = unit_human then
64824: LD_VAR 0 1
64828: PPUSH
64829: CALL_OW 247
64833: PUSH
64834: LD_INT 1
64836: EQUAL
64837: IFFALSE 64854
// factory := IsInUnit ( factory ) ;
64839: LD_ADDR_VAR 0 1
64843: PUSH
64844: LD_VAR 0 1
64848: PPUSH
64849: CALL_OW 310
64853: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 266
64863: PUSH
64864: LD_INT 3
64866: NONEQUAL
64867: IFFALSE 64871
// exit ;
64869: GO 64973
// if HexInfo ( x , y ) = factory then
64871: LD_VAR 0 2
64875: PPUSH
64876: LD_VAR 0 3
64880: PPUSH
64881: CALL_OW 428
64885: PUSH
64886: LD_VAR 0 1
64890: EQUAL
64891: IFFALSE 64918
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64893: LD_ADDR_EXP 87
64897: PUSH
64898: LD_EXP 87
64902: PPUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_INT 0
64910: PPUSH
64911: CALL_OW 1
64915: ST_TO_ADDR
64916: GO 64969
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64918: LD_ADDR_EXP 87
64922: PUSH
64923: LD_EXP 87
64927: PPUSH
64928: LD_VAR 0 1
64932: PPUSH
64933: LD_VAR 0 1
64937: PPUSH
64938: CALL_OW 255
64942: PUSH
64943: LD_VAR 0 1
64947: PUSH
64948: LD_VAR 0 2
64952: PUSH
64953: LD_VAR 0 3
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: PPUSH
64964: CALL_OW 1
64968: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64969: CALL 64978 0 0
// end ;
64973: LD_VAR 0 4
64977: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64978: LD_INT 0
64980: PPUSH
64981: PPUSH
64982: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64983: LD_STRING resetFactoryWaypoint();
64985: PPUSH
64986: CALL_OW 559
// if factoryWaypoints then
64990: LD_EXP 87
64994: IFFALSE 65120
// begin list := PrepareArray ( factoryWaypoints ) ;
64996: LD_ADDR_VAR 0 3
65000: PUSH
65001: LD_EXP 87
65005: PPUSH
65006: CALL 50085 0 1
65010: ST_TO_ADDR
// for i := 1 to list do
65011: LD_ADDR_VAR 0 2
65015: PUSH
65016: DOUBLE
65017: LD_INT 1
65019: DEC
65020: ST_TO_ADDR
65021: LD_VAR 0 3
65025: PUSH
65026: FOR_TO
65027: IFFALSE 65118
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65029: LD_STRING setFactoryWaypointXY(
65031: PUSH
65032: LD_VAR 0 3
65036: PUSH
65037: LD_VAR 0 2
65041: ARRAY
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: STR
65047: PUSH
65048: LD_STRING ,
65050: STR
65051: PUSH
65052: LD_VAR 0 3
65056: PUSH
65057: LD_VAR 0 2
65061: ARRAY
65062: PUSH
65063: LD_INT 2
65065: ARRAY
65066: STR
65067: PUSH
65068: LD_STRING ,
65070: STR
65071: PUSH
65072: LD_VAR 0 3
65076: PUSH
65077: LD_VAR 0 2
65081: ARRAY
65082: PUSH
65083: LD_INT 3
65085: ARRAY
65086: STR
65087: PUSH
65088: LD_STRING ,
65090: STR
65091: PUSH
65092: LD_VAR 0 3
65096: PUSH
65097: LD_VAR 0 2
65101: ARRAY
65102: PUSH
65103: LD_INT 4
65105: ARRAY
65106: STR
65107: PUSH
65108: LD_STRING )
65110: STR
65111: PPUSH
65112: CALL_OW 559
65116: GO 65026
65118: POP
65119: POP
// end ; end ;
65120: LD_VAR 0 1
65124: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65125: LD_INT 0
65127: PPUSH
// if HexInfo ( x , y ) = warehouse then
65128: LD_VAR 0 2
65132: PPUSH
65133: LD_VAR 0 3
65137: PPUSH
65138: CALL_OW 428
65142: PUSH
65143: LD_VAR 0 1
65147: EQUAL
65148: IFFALSE 65175
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65150: LD_ADDR_EXP 88
65154: PUSH
65155: LD_EXP 88
65159: PPUSH
65160: LD_VAR 0 1
65164: PPUSH
65165: LD_INT 0
65167: PPUSH
65168: CALL_OW 1
65172: ST_TO_ADDR
65173: GO 65226
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65175: LD_ADDR_EXP 88
65179: PUSH
65180: LD_EXP 88
65184: PPUSH
65185: LD_VAR 0 1
65189: PPUSH
65190: LD_VAR 0 1
65194: PPUSH
65195: CALL_OW 255
65199: PUSH
65200: LD_VAR 0 1
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_VAR 0 3
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: PPUSH
65221: CALL_OW 1
65225: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65226: CALL 65235 0 0
// end ;
65230: LD_VAR 0 4
65234: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65235: LD_INT 0
65237: PPUSH
65238: PPUSH
65239: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65240: LD_STRING resetWarehouseGatheringPoints();
65242: PPUSH
65243: CALL_OW 559
// if warehouseGatheringPoints then
65247: LD_EXP 88
65251: IFFALSE 65377
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65253: LD_ADDR_VAR 0 3
65257: PUSH
65258: LD_EXP 88
65262: PPUSH
65263: CALL 50085 0 1
65267: ST_TO_ADDR
// for i := 1 to list do
65268: LD_ADDR_VAR 0 2
65272: PUSH
65273: DOUBLE
65274: LD_INT 1
65276: DEC
65277: ST_TO_ADDR
65278: LD_VAR 0 3
65282: PUSH
65283: FOR_TO
65284: IFFALSE 65375
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65286: LD_STRING setWarehouseGatheringPointXY(
65288: PUSH
65289: LD_VAR 0 3
65293: PUSH
65294: LD_VAR 0 2
65298: ARRAY
65299: PUSH
65300: LD_INT 1
65302: ARRAY
65303: STR
65304: PUSH
65305: LD_STRING ,
65307: STR
65308: PUSH
65309: LD_VAR 0 3
65313: PUSH
65314: LD_VAR 0 2
65318: ARRAY
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: STR
65324: PUSH
65325: LD_STRING ,
65327: STR
65328: PUSH
65329: LD_VAR 0 3
65333: PUSH
65334: LD_VAR 0 2
65338: ARRAY
65339: PUSH
65340: LD_INT 3
65342: ARRAY
65343: STR
65344: PUSH
65345: LD_STRING ,
65347: STR
65348: PUSH
65349: LD_VAR 0 3
65353: PUSH
65354: LD_VAR 0 2
65358: ARRAY
65359: PUSH
65360: LD_INT 4
65362: ARRAY
65363: STR
65364: PUSH
65365: LD_STRING )
65367: STR
65368: PPUSH
65369: CALL_OW 559
65373: GO 65283
65375: POP
65376: POP
// end ; end ;
65377: LD_VAR 0 1
65381: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65382: LD_EXP 88
65386: IFFALSE 66071
65388: GO 65390
65390: DISABLE
65391: LD_INT 0
65393: PPUSH
65394: PPUSH
65395: PPUSH
65396: PPUSH
65397: PPUSH
65398: PPUSH
65399: PPUSH
65400: PPUSH
65401: PPUSH
// begin enable ;
65402: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65403: LD_ADDR_VAR 0 3
65407: PUSH
65408: LD_EXP 88
65412: PPUSH
65413: CALL 50085 0 1
65417: ST_TO_ADDR
// if not list then
65418: LD_VAR 0 3
65422: NOT
65423: IFFALSE 65427
// exit ;
65425: GO 66071
// for i := 1 to list do
65427: LD_ADDR_VAR 0 1
65431: PUSH
65432: DOUBLE
65433: LD_INT 1
65435: DEC
65436: ST_TO_ADDR
65437: LD_VAR 0 3
65441: PUSH
65442: FOR_TO
65443: IFFALSE 66069
// begin depot := list [ i ] [ 2 ] ;
65445: LD_ADDR_VAR 0 8
65449: PUSH
65450: LD_VAR 0 3
65454: PUSH
65455: LD_VAR 0 1
65459: ARRAY
65460: PUSH
65461: LD_INT 2
65463: ARRAY
65464: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65465: LD_ADDR_VAR 0 5
65469: PUSH
65470: LD_VAR 0 3
65474: PUSH
65475: LD_VAR 0 1
65479: ARRAY
65480: PUSH
65481: LD_INT 1
65483: ARRAY
65484: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65485: LD_VAR 0 8
65489: PPUSH
65490: CALL_OW 301
65494: PUSH
65495: LD_VAR 0 5
65499: PUSH
65500: LD_VAR 0 8
65504: PPUSH
65505: CALL_OW 255
65509: NONEQUAL
65510: OR
65511: IFFALSE 65540
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65513: LD_ADDR_EXP 88
65517: PUSH
65518: LD_EXP 88
65522: PPUSH
65523: LD_VAR 0 8
65527: PPUSH
65528: LD_INT 0
65530: PPUSH
65531: CALL_OW 1
65535: ST_TO_ADDR
// exit ;
65536: POP
65537: POP
65538: GO 66071
// end ; x := list [ i ] [ 3 ] ;
65540: LD_ADDR_VAR 0 6
65544: PUSH
65545: LD_VAR 0 3
65549: PUSH
65550: LD_VAR 0 1
65554: ARRAY
65555: PUSH
65556: LD_INT 3
65558: ARRAY
65559: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65560: LD_ADDR_VAR 0 7
65564: PUSH
65565: LD_VAR 0 3
65569: PUSH
65570: LD_VAR 0 1
65574: ARRAY
65575: PUSH
65576: LD_INT 4
65578: ARRAY
65579: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65580: LD_ADDR_VAR 0 9
65584: PUSH
65585: LD_VAR 0 6
65589: PPUSH
65590: LD_VAR 0 7
65594: PPUSH
65595: LD_INT 16
65597: PPUSH
65598: CALL 48673 0 3
65602: ST_TO_ADDR
// if not cratesNearbyPoint then
65603: LD_VAR 0 9
65607: NOT
65608: IFFALSE 65614
// exit ;
65610: POP
65611: POP
65612: GO 66071
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65614: LD_ADDR_VAR 0 4
65618: PUSH
65619: LD_INT 22
65621: PUSH
65622: LD_VAR 0 5
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: PUSH
65634: LD_INT 60
65636: PUSH
65637: EMPTY
65638: LIST
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 91
65646: PUSH
65647: LD_VAR 0 8
65651: PUSH
65652: LD_INT 6
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 25
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 25
65675: PUSH
65676: LD_INT 16
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: PPUSH
65694: CALL_OW 69
65698: PUSH
65699: LD_VAR 0 8
65703: PPUSH
65704: CALL_OW 313
65708: PPUSH
65709: LD_INT 3
65711: PUSH
65712: LD_INT 60
65714: PUSH
65715: EMPTY
65716: LIST
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: PUSH
65725: LD_INT 25
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 25
65737: PUSH
65738: LD_INT 16
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PPUSH
65754: CALL_OW 72
65758: UNION
65759: ST_TO_ADDR
// if tmp then
65760: LD_VAR 0 4
65764: IFFALSE 65844
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65766: LD_ADDR_VAR 0 4
65770: PUSH
65771: LD_VAR 0 4
65775: PPUSH
65776: LD_INT 3
65778: PPUSH
65779: CALL 46642 0 2
65783: ST_TO_ADDR
// for j in tmp do
65784: LD_ADDR_VAR 0 2
65788: PUSH
65789: LD_VAR 0 4
65793: PUSH
65794: FOR_IN
65795: IFFALSE 65838
// begin if IsInUnit ( j ) then
65797: LD_VAR 0 2
65801: PPUSH
65802: CALL_OW 310
65806: IFFALSE 65817
// ComExit ( j ) ;
65808: LD_VAR 0 2
65812: PPUSH
65813: CALL 46725 0 1
// AddComCollect ( j , x , y ) ;
65817: LD_VAR 0 2
65821: PPUSH
65822: LD_VAR 0 6
65826: PPUSH
65827: LD_VAR 0 7
65831: PPUSH
65832: CALL_OW 177
// end ;
65836: GO 65794
65838: POP
65839: POP
// exit ;
65840: POP
65841: POP
65842: GO 66071
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65844: LD_ADDR_VAR 0 4
65848: PUSH
65849: LD_INT 22
65851: PUSH
65852: LD_VAR 0 5
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 91
65863: PUSH
65864: LD_VAR 0 8
65868: PUSH
65869: LD_INT 8
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: LD_INT 34
65882: PUSH
65883: LD_INT 12
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 34
65892: PUSH
65893: LD_INT 51
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 34
65902: PUSH
65903: LD_INT 32
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 34
65912: PUSH
65913: LD_INT 89
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: PPUSH
65932: CALL_OW 69
65936: ST_TO_ADDR
// if tmp then
65937: LD_VAR 0 4
65941: IFFALSE 66067
// begin for j in tmp do
65943: LD_ADDR_VAR 0 2
65947: PUSH
65948: LD_VAR 0 4
65952: PUSH
65953: FOR_IN
65954: IFFALSE 66065
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65956: LD_VAR 0 2
65960: PPUSH
65961: CALL_OW 262
65965: PUSH
65966: LD_INT 3
65968: EQUAL
65969: PUSH
65970: LD_VAR 0 2
65974: PPUSH
65975: CALL_OW 261
65979: PUSH
65980: LD_INT 20
65982: GREATER
65983: OR
65984: PUSH
65985: LD_VAR 0 2
65989: PPUSH
65990: CALL_OW 314
65994: NOT
65995: AND
65996: PUSH
65997: LD_VAR 0 2
66001: PPUSH
66002: CALL_OW 263
66006: PUSH
66007: LD_INT 1
66009: NONEQUAL
66010: PUSH
66011: LD_VAR 0 2
66015: PPUSH
66016: CALL_OW 311
66020: OR
66021: AND
66022: IFFALSE 66063
// begin ComCollect ( j , x , y ) ;
66024: LD_VAR 0 2
66028: PPUSH
66029: LD_VAR 0 6
66033: PPUSH
66034: LD_VAR 0 7
66038: PPUSH
66039: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66043: LD_VAR 0 2
66047: PPUSH
66048: LD_VAR 0 8
66052: PPUSH
66053: CALL_OW 172
// exit ;
66057: POP
66058: POP
66059: POP
66060: POP
66061: GO 66071
// end ;
66063: GO 65953
66065: POP
66066: POP
// end ; end ;
66067: GO 65442
66069: POP
66070: POP
// end ; end_of_file
66071: PPOPN 9
66073: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
66074: LD_INT 0
66076: PPUSH
66077: PPUSH
66078: PPUSH
66079: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
66080: LD_VAR 0 1
66084: PPUSH
66085: CALL_OW 264
66089: PUSH
66090: LD_INT 91
66092: EQUAL
66093: IFFALSE 66165
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66095: LD_INT 68
66097: PPUSH
66098: LD_VAR 0 1
66102: PPUSH
66103: CALL_OW 255
66107: PPUSH
66108: CALL_OW 321
66112: PUSH
66113: LD_INT 2
66115: EQUAL
66116: IFFALSE 66128
// eff := 70 else
66118: LD_ADDR_VAR 0 4
66122: PUSH
66123: LD_INT 70
66125: ST_TO_ADDR
66126: GO 66136
// eff := 30 ;
66128: LD_ADDR_VAR 0 4
66132: PUSH
66133: LD_INT 30
66135: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66136: LD_VAR 0 1
66140: PPUSH
66141: CALL_OW 250
66145: PPUSH
66146: LD_VAR 0 1
66150: PPUSH
66151: CALL_OW 251
66155: PPUSH
66156: LD_VAR 0 4
66160: PPUSH
66161: CALL_OW 495
// end ; end ;
66165: LD_VAR 0 2
66169: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66170: LD_INT 0
66172: PPUSH
// end ;
66173: LD_VAR 0 4
66177: RET
// export function SOS_Command ( cmd ) ; begin
66178: LD_INT 0
66180: PPUSH
// end ;
66181: LD_VAR 0 2
66185: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66186: LD_INT 0
66188: PPUSH
// end ;
66189: LD_VAR 0 6
66193: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
66194: LD_INT 0
66196: PPUSH
66197: PPUSH
// if not vehicle or not factory then
66198: LD_VAR 0 1
66202: NOT
66203: PUSH
66204: LD_VAR 0 2
66208: NOT
66209: OR
66210: IFFALSE 66214
// exit ;
66212: GO 66445
// if factoryWaypoints >= factory then
66214: LD_EXP 87
66218: PUSH
66219: LD_VAR 0 2
66223: GREATEREQUAL
66224: IFFALSE 66445
// if factoryWaypoints [ factory ] then
66226: LD_EXP 87
66230: PUSH
66231: LD_VAR 0 2
66235: ARRAY
66236: IFFALSE 66445
// begin if GetControl ( vehicle ) = control_manual then
66238: LD_VAR 0 1
66242: PPUSH
66243: CALL_OW 263
66247: PUSH
66248: LD_INT 1
66250: EQUAL
66251: IFFALSE 66332
// begin driver := IsDrivenBy ( vehicle ) ;
66253: LD_ADDR_VAR 0 4
66257: PUSH
66258: LD_VAR 0 1
66262: PPUSH
66263: CALL_OW 311
66267: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66268: LD_VAR 0 4
66272: PPUSH
66273: LD_EXP 87
66277: PUSH
66278: LD_VAR 0 2
66282: ARRAY
66283: PUSH
66284: LD_INT 3
66286: ARRAY
66287: PPUSH
66288: LD_EXP 87
66292: PUSH
66293: LD_VAR 0 2
66297: ARRAY
66298: PUSH
66299: LD_INT 4
66301: ARRAY
66302: PPUSH
66303: CALL_OW 171
// AddComExitVehicle ( driver ) ;
66307: LD_VAR 0 4
66311: PPUSH
66312: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
66316: LD_VAR 0 4
66320: PPUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: CALL_OW 180
// end else
66330: GO 66445
// if GetControl ( vehicle ) = control_remote then
66332: LD_VAR 0 1
66336: PPUSH
66337: CALL_OW 263
66341: PUSH
66342: LD_INT 2
66344: EQUAL
66345: IFFALSE 66406
// begin wait ( 0 0$2 ) ;
66347: LD_INT 70
66349: PPUSH
66350: CALL_OW 67
// if Connect ( vehicle ) then
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL 16965 0 1
66363: IFFALSE 66404
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66365: LD_VAR 0 1
66369: PPUSH
66370: LD_EXP 87
66374: PUSH
66375: LD_VAR 0 2
66379: ARRAY
66380: PUSH
66381: LD_INT 3
66383: ARRAY
66384: PPUSH
66385: LD_EXP 87
66389: PUSH
66390: LD_VAR 0 2
66394: ARRAY
66395: PUSH
66396: LD_INT 4
66398: ARRAY
66399: PPUSH
66400: CALL_OW 171
// end else
66404: GO 66445
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_EXP 87
66415: PUSH
66416: LD_VAR 0 2
66420: ARRAY
66421: PUSH
66422: LD_INT 3
66424: ARRAY
66425: PPUSH
66426: LD_EXP 87
66430: PUSH
66431: LD_VAR 0 2
66435: ARRAY
66436: PUSH
66437: LD_INT 4
66439: ARRAY
66440: PPUSH
66441: CALL_OW 171
// end ; end ;
66445: LD_VAR 0 3
66449: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66450: LD_INT 0
66452: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66453: LD_VAR 0 1
66457: PUSH
66458: LD_INT 250
66460: EQUAL
66461: PUSH
66462: LD_VAR 0 2
66466: PPUSH
66467: CALL_OW 264
66471: PUSH
66472: LD_INT 81
66474: EQUAL
66475: AND
66476: IFFALSE 66497
// MinerPlaceMine ( unit , x , y ) ;
66478: LD_VAR 0 2
66482: PPUSH
66483: LD_VAR 0 4
66487: PPUSH
66488: LD_VAR 0 5
66492: PPUSH
66493: CALL 68882 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66497: LD_VAR 0 1
66501: PUSH
66502: LD_INT 251
66504: EQUAL
66505: PUSH
66506: LD_VAR 0 2
66510: PPUSH
66511: CALL_OW 264
66515: PUSH
66516: LD_INT 81
66518: EQUAL
66519: AND
66520: IFFALSE 66541
// MinerDetonateMine ( unit , x , y ) ;
66522: LD_VAR 0 2
66526: PPUSH
66527: LD_VAR 0 4
66531: PPUSH
66532: LD_VAR 0 5
66536: PPUSH
66537: CALL 69157 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66541: LD_VAR 0 1
66545: PUSH
66546: LD_INT 252
66548: EQUAL
66549: PUSH
66550: LD_VAR 0 2
66554: PPUSH
66555: CALL_OW 264
66559: PUSH
66560: LD_INT 81
66562: EQUAL
66563: AND
66564: IFFALSE 66585
// MinerCreateMinefield ( unit , x , y ) ;
66566: LD_VAR 0 2
66570: PPUSH
66571: LD_VAR 0 4
66575: PPUSH
66576: LD_VAR 0 5
66580: PPUSH
66581: CALL 69574 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66585: LD_VAR 0 1
66589: PUSH
66590: LD_INT 253
66592: EQUAL
66593: PUSH
66594: LD_VAR 0 2
66598: PPUSH
66599: CALL_OW 257
66603: PUSH
66604: LD_INT 5
66606: EQUAL
66607: AND
66608: IFFALSE 66629
// ComBinocular ( unit , x , y ) ;
66610: LD_VAR 0 2
66614: PPUSH
66615: LD_VAR 0 4
66619: PPUSH
66620: LD_VAR 0 5
66624: PPUSH
66625: CALL 69943 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66629: LD_VAR 0 1
66633: PUSH
66634: LD_INT 254
66636: EQUAL
66637: PUSH
66638: LD_VAR 0 2
66642: PPUSH
66643: CALL_OW 264
66647: PUSH
66648: LD_INT 99
66650: EQUAL
66651: AND
66652: PUSH
66653: LD_VAR 0 3
66657: PPUSH
66658: CALL_OW 263
66662: PUSH
66663: LD_INT 3
66665: EQUAL
66666: AND
66667: IFFALSE 66683
// HackDestroyVehicle ( unit , selectedUnit ) ;
66669: LD_VAR 0 2
66673: PPUSH
66674: LD_VAR 0 3
66678: PPUSH
66679: CALL 68246 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66683: LD_VAR 0 1
66687: PUSH
66688: LD_INT 255
66690: EQUAL
66691: PUSH
66692: LD_VAR 0 2
66696: PPUSH
66697: CALL_OW 264
66701: PUSH
66702: LD_INT 14
66704: PUSH
66705: LD_INT 53
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: IN
66712: AND
66713: PUSH
66714: LD_VAR 0 4
66718: PPUSH
66719: LD_VAR 0 5
66723: PPUSH
66724: CALL_OW 488
66728: AND
66729: IFFALSE 66753
// CutTreeXYR ( unit , x , y , 12 ) ;
66731: LD_VAR 0 2
66735: PPUSH
66736: LD_VAR 0 4
66740: PPUSH
66741: LD_VAR 0 5
66745: PPUSH
66746: LD_INT 12
66748: PPUSH
66749: CALL 66816 0 4
// if cmd = 256 then
66753: LD_VAR 0 1
66757: PUSH
66758: LD_INT 256
66760: EQUAL
66761: IFFALSE 66782
// SetFactoryWaypoint ( unit , x , y ) ;
66763: LD_VAR 0 2
66767: PPUSH
66768: LD_VAR 0 4
66772: PPUSH
66773: LD_VAR 0 5
66777: PPUSH
66778: CALL 64763 0 3
// if cmd = 257 then
66782: LD_VAR 0 1
66786: PUSH
66787: LD_INT 257
66789: EQUAL
66790: IFFALSE 66811
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66792: LD_VAR 0 2
66796: PPUSH
66797: LD_VAR 0 4
66801: PPUSH
66802: LD_VAR 0 5
66806: PPUSH
66807: CALL 65125 0 3
// end ;
66811: LD_VAR 0 6
66815: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66816: LD_INT 0
66818: PPUSH
66819: PPUSH
66820: PPUSH
66821: PPUSH
66822: PPUSH
66823: PPUSH
66824: PPUSH
66825: PPUSH
66826: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
66827: LD_VAR 0 1
66831: NOT
66832: PUSH
66833: LD_VAR 0 2
66837: PPUSH
66838: LD_VAR 0 3
66842: PPUSH
66843: CALL_OW 488
66847: NOT
66848: OR
66849: PUSH
66850: LD_VAR 0 4
66854: NOT
66855: OR
66856: IFFALSE 66860
// exit ;
66858: GO 67200
// list := [ ] ;
66860: LD_ADDR_VAR 0 13
66864: PUSH
66865: EMPTY
66866: ST_TO_ADDR
// if x - r < 0 then
66867: LD_VAR 0 2
66871: PUSH
66872: LD_VAR 0 4
66876: MINUS
66877: PUSH
66878: LD_INT 0
66880: LESS
66881: IFFALSE 66893
// min_x := 0 else
66883: LD_ADDR_VAR 0 7
66887: PUSH
66888: LD_INT 0
66890: ST_TO_ADDR
66891: GO 66909
// min_x := x - r ;
66893: LD_ADDR_VAR 0 7
66897: PUSH
66898: LD_VAR 0 2
66902: PUSH
66903: LD_VAR 0 4
66907: MINUS
66908: ST_TO_ADDR
// if y - r < 0 then
66909: LD_VAR 0 3
66913: PUSH
66914: LD_VAR 0 4
66918: MINUS
66919: PUSH
66920: LD_INT 0
66922: LESS
66923: IFFALSE 66935
// min_y := 0 else
66925: LD_ADDR_VAR 0 8
66929: PUSH
66930: LD_INT 0
66932: ST_TO_ADDR
66933: GO 66951
// min_y := y - r ;
66935: LD_ADDR_VAR 0 8
66939: PUSH
66940: LD_VAR 0 3
66944: PUSH
66945: LD_VAR 0 4
66949: MINUS
66950: ST_TO_ADDR
// max_x := x + r ;
66951: LD_ADDR_VAR 0 9
66955: PUSH
66956: LD_VAR 0 2
66960: PUSH
66961: LD_VAR 0 4
66965: PLUS
66966: ST_TO_ADDR
// max_y := y + r ;
66967: LD_ADDR_VAR 0 10
66971: PUSH
66972: LD_VAR 0 3
66976: PUSH
66977: LD_VAR 0 4
66981: PLUS
66982: ST_TO_ADDR
// for _x = min_x to max_x do
66983: LD_ADDR_VAR 0 11
66987: PUSH
66988: DOUBLE
66989: LD_VAR 0 7
66993: DEC
66994: ST_TO_ADDR
66995: LD_VAR 0 9
66999: PUSH
67000: FOR_TO
67001: IFFALSE 67118
// for _y = min_y to max_y do
67003: LD_ADDR_VAR 0 12
67007: PUSH
67008: DOUBLE
67009: LD_VAR 0 8
67013: DEC
67014: ST_TO_ADDR
67015: LD_VAR 0 10
67019: PUSH
67020: FOR_TO
67021: IFFALSE 67114
// begin if not ValidHex ( _x , _y ) then
67023: LD_VAR 0 11
67027: PPUSH
67028: LD_VAR 0 12
67032: PPUSH
67033: CALL_OW 488
67037: NOT
67038: IFFALSE 67042
// continue ;
67040: GO 67020
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67042: LD_VAR 0 11
67046: PPUSH
67047: LD_VAR 0 12
67051: PPUSH
67052: CALL_OW 351
67056: PUSH
67057: LD_VAR 0 11
67061: PPUSH
67062: LD_VAR 0 12
67066: PPUSH
67067: CALL_OW 554
67071: AND
67072: IFFALSE 67112
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67074: LD_ADDR_VAR 0 13
67078: PUSH
67079: LD_VAR 0 13
67083: PPUSH
67084: LD_VAR 0 13
67088: PUSH
67089: LD_INT 1
67091: PLUS
67092: PPUSH
67093: LD_VAR 0 11
67097: PUSH
67098: LD_VAR 0 12
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PPUSH
67107: CALL_OW 2
67111: ST_TO_ADDR
// end ;
67112: GO 67020
67114: POP
67115: POP
67116: GO 67000
67118: POP
67119: POP
// if not list then
67120: LD_VAR 0 13
67124: NOT
67125: IFFALSE 67129
// exit ;
67127: GO 67200
// for i in list do
67129: LD_ADDR_VAR 0 6
67133: PUSH
67134: LD_VAR 0 13
67138: PUSH
67139: FOR_IN
67140: IFFALSE 67198
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_STRING M
67149: PUSH
67150: LD_VAR 0 6
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PUSH
67159: LD_VAR 0 6
67163: PUSH
67164: LD_INT 2
67166: ARRAY
67167: PUSH
67168: LD_INT 0
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 0
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: PUSH
67189: EMPTY
67190: LIST
67191: PPUSH
67192: CALL_OW 447
67196: GO 67139
67198: POP
67199: POP
// end ;
67200: LD_VAR 0 5
67204: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67205: LD_EXP 90
67209: NOT
67210: IFFALSE 67260
67212: GO 67214
67214: DISABLE
// begin initHack := true ;
67215: LD_ADDR_EXP 90
67219: PUSH
67220: LD_INT 1
67222: ST_TO_ADDR
// hackTanks := [ ] ;
67223: LD_ADDR_EXP 91
67227: PUSH
67228: EMPTY
67229: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67230: LD_ADDR_EXP 92
67234: PUSH
67235: EMPTY
67236: ST_TO_ADDR
// hackLimit := 3 ;
67237: LD_ADDR_EXP 93
67241: PUSH
67242: LD_INT 3
67244: ST_TO_ADDR
// hackDist := 12 ;
67245: LD_ADDR_EXP 94
67249: PUSH
67250: LD_INT 12
67252: ST_TO_ADDR
// hackCounter := [ ] ;
67253: LD_ADDR_EXP 95
67257: PUSH
67258: EMPTY
67259: ST_TO_ADDR
// end ;
67260: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67261: LD_EXP 90
67265: PUSH
67266: LD_INT 34
67268: PUSH
67269: LD_INT 99
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PPUSH
67276: CALL_OW 69
67280: AND
67281: IFFALSE 67534
67283: GO 67285
67285: DISABLE
67286: LD_INT 0
67288: PPUSH
67289: PPUSH
// begin enable ;
67290: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67291: LD_ADDR_VAR 0 1
67295: PUSH
67296: LD_INT 34
67298: PUSH
67299: LD_INT 99
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PPUSH
67306: CALL_OW 69
67310: PUSH
67311: FOR_IN
67312: IFFALSE 67532
// begin if not i in hackTanks then
67314: LD_VAR 0 1
67318: PUSH
67319: LD_EXP 91
67323: IN
67324: NOT
67325: IFFALSE 67408
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67327: LD_ADDR_EXP 91
67331: PUSH
67332: LD_EXP 91
67336: PPUSH
67337: LD_EXP 91
67341: PUSH
67342: LD_INT 1
67344: PLUS
67345: PPUSH
67346: LD_VAR 0 1
67350: PPUSH
67351: CALL_OW 1
67355: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67356: LD_ADDR_EXP 92
67360: PUSH
67361: LD_EXP 92
67365: PPUSH
67366: LD_EXP 92
67370: PUSH
67371: LD_INT 1
67373: PLUS
67374: PPUSH
67375: EMPTY
67376: PPUSH
67377: CALL_OW 1
67381: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67382: LD_ADDR_EXP 95
67386: PUSH
67387: LD_EXP 95
67391: PPUSH
67392: LD_EXP 95
67396: PUSH
67397: LD_INT 1
67399: PLUS
67400: PPUSH
67401: EMPTY
67402: PPUSH
67403: CALL_OW 1
67407: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67408: LD_VAR 0 1
67412: PPUSH
67413: CALL_OW 302
67417: NOT
67418: IFFALSE 67431
// begin HackUnlinkAll ( i ) ;
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL 67537 0 1
// continue ;
67429: GO 67311
// end ; HackCheckCapturedStatus ( i ) ;
67431: LD_VAR 0 1
67435: PPUSH
67436: CALL 67980 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67440: LD_ADDR_VAR 0 2
67444: PUSH
67445: LD_INT 81
67447: PUSH
67448: LD_VAR 0 1
67452: PPUSH
67453: CALL_OW 255
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 33
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 91
67474: PUSH
67475: LD_VAR 0 1
67479: PUSH
67480: LD_EXP 94
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 50
67492: PUSH
67493: EMPTY
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: PPUSH
67502: CALL_OW 69
67506: ST_TO_ADDR
// if not tmp then
67507: LD_VAR 0 2
67511: NOT
67512: IFFALSE 67516
// continue ;
67514: GO 67311
// HackLink ( i , tmp ) ;
67516: LD_VAR 0 1
67520: PPUSH
67521: LD_VAR 0 2
67525: PPUSH
67526: CALL 67673 0 2
// end ;
67530: GO 67311
67532: POP
67533: POP
// end ;
67534: PPOPN 2
67536: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
67541: PPUSH
// if not hack in hackTanks then
67542: LD_VAR 0 1
67546: PUSH
67547: LD_EXP 91
67551: IN
67552: NOT
67553: IFFALSE 67557
// exit ;
67555: GO 67668
// index := GetElementIndex ( hackTanks , hack ) ;
67557: LD_ADDR_VAR 0 4
67561: PUSH
67562: LD_EXP 91
67566: PPUSH
67567: LD_VAR 0 1
67571: PPUSH
67572: CALL 13781 0 2
67576: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67577: LD_EXP 92
67581: PUSH
67582: LD_VAR 0 4
67586: ARRAY
67587: IFFALSE 67668
// begin for i in hackTanksCaptured [ index ] do
67589: LD_ADDR_VAR 0 3
67593: PUSH
67594: LD_EXP 92
67598: PUSH
67599: LD_VAR 0 4
67603: ARRAY
67604: PUSH
67605: FOR_IN
67606: IFFALSE 67632
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67608: LD_VAR 0 3
67612: PUSH
67613: LD_INT 1
67615: ARRAY
67616: PPUSH
67617: LD_VAR 0 3
67621: PUSH
67622: LD_INT 2
67624: ARRAY
67625: PPUSH
67626: CALL_OW 235
67630: GO 67605
67632: POP
67633: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67634: LD_ADDR_EXP 92
67638: PUSH
67639: LD_EXP 92
67643: PPUSH
67644: LD_VAR 0 4
67648: PPUSH
67649: EMPTY
67650: PPUSH
67651: CALL_OW 1
67655: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67656: LD_VAR 0 1
67660: PPUSH
67661: LD_INT 0
67663: PPUSH
67664: CALL_OW 505
// end ; end ;
67668: LD_VAR 0 2
67672: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67673: LD_INT 0
67675: PPUSH
67676: PPUSH
67677: PPUSH
// if not hack in hackTanks or not vehicles then
67678: LD_VAR 0 1
67682: PUSH
67683: LD_EXP 91
67687: IN
67688: NOT
67689: PUSH
67690: LD_VAR 0 2
67694: NOT
67695: OR
67696: IFFALSE 67700
// exit ;
67698: GO 67975
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67700: LD_ADDR_VAR 0 2
67704: PUSH
67705: LD_VAR 0 1
67709: PPUSH
67710: LD_VAR 0 2
67714: PPUSH
67715: LD_INT 1
67717: PPUSH
67718: LD_INT 1
67720: PPUSH
67721: CALL 14431 0 4
67725: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67726: LD_ADDR_VAR 0 5
67730: PUSH
67731: LD_EXP 91
67735: PPUSH
67736: LD_VAR 0 1
67740: PPUSH
67741: CALL 13781 0 2
67745: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67746: LD_EXP 92
67750: PUSH
67751: LD_VAR 0 5
67755: ARRAY
67756: PUSH
67757: LD_EXP 93
67761: LESS
67762: IFFALSE 67951
// begin for i := 1 to vehicles do
67764: LD_ADDR_VAR 0 4
67768: PUSH
67769: DOUBLE
67770: LD_INT 1
67772: DEC
67773: ST_TO_ADDR
67774: LD_VAR 0 2
67778: PUSH
67779: FOR_TO
67780: IFFALSE 67949
// begin if hackTanksCaptured [ index ] = hackLimit then
67782: LD_EXP 92
67786: PUSH
67787: LD_VAR 0 5
67791: ARRAY
67792: PUSH
67793: LD_EXP 93
67797: EQUAL
67798: IFFALSE 67802
// break ;
67800: GO 67949
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67802: LD_ADDR_EXP 95
67806: PUSH
67807: LD_EXP 95
67811: PPUSH
67812: LD_VAR 0 5
67816: PPUSH
67817: LD_EXP 95
67821: PUSH
67822: LD_VAR 0 5
67826: ARRAY
67827: PUSH
67828: LD_INT 1
67830: PLUS
67831: PPUSH
67832: CALL_OW 1
67836: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67837: LD_ADDR_EXP 92
67841: PUSH
67842: LD_EXP 92
67846: PPUSH
67847: LD_VAR 0 5
67851: PUSH
67852: LD_EXP 92
67856: PUSH
67857: LD_VAR 0 5
67861: ARRAY
67862: PUSH
67863: LD_INT 1
67865: PLUS
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PPUSH
67871: LD_VAR 0 2
67875: PUSH
67876: LD_VAR 0 4
67880: ARRAY
67881: PUSH
67882: LD_VAR 0 2
67886: PUSH
67887: LD_VAR 0 4
67891: ARRAY
67892: PPUSH
67893: CALL_OW 255
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PPUSH
67902: CALL 13996 0 3
67906: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67907: LD_VAR 0 2
67911: PUSH
67912: LD_VAR 0 4
67916: ARRAY
67917: PPUSH
67918: LD_VAR 0 1
67922: PPUSH
67923: CALL_OW 255
67927: PPUSH
67928: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67932: LD_VAR 0 2
67936: PUSH
67937: LD_VAR 0 4
67941: ARRAY
67942: PPUSH
67943: CALL_OW 141
// end ;
67947: GO 67779
67949: POP
67950: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67951: LD_VAR 0 1
67955: PPUSH
67956: LD_EXP 92
67960: PUSH
67961: LD_VAR 0 5
67965: ARRAY
67966: PUSH
67967: LD_INT 0
67969: PLUS
67970: PPUSH
67971: CALL_OW 505
// end ;
67975: LD_VAR 0 3
67979: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
67984: PPUSH
67985: PPUSH
// if not hack in hackTanks then
67986: LD_VAR 0 1
67990: PUSH
67991: LD_EXP 91
67995: IN
67996: NOT
67997: IFFALSE 68001
// exit ;
67999: GO 68241
// index := GetElementIndex ( hackTanks , hack ) ;
68001: LD_ADDR_VAR 0 4
68005: PUSH
68006: LD_EXP 91
68010: PPUSH
68011: LD_VAR 0 1
68015: PPUSH
68016: CALL 13781 0 2
68020: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68021: LD_ADDR_VAR 0 3
68025: PUSH
68026: DOUBLE
68027: LD_EXP 92
68031: PUSH
68032: LD_VAR 0 4
68036: ARRAY
68037: INC
68038: ST_TO_ADDR
68039: LD_INT 1
68041: PUSH
68042: FOR_DOWNTO
68043: IFFALSE 68215
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68045: LD_ADDR_VAR 0 5
68049: PUSH
68050: LD_EXP 92
68054: PUSH
68055: LD_VAR 0 4
68059: ARRAY
68060: PUSH
68061: LD_VAR 0 3
68065: ARRAY
68066: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68067: LD_VAR 0 5
68071: PUSH
68072: LD_INT 1
68074: ARRAY
68075: PPUSH
68076: CALL_OW 302
68080: NOT
68081: PUSH
68082: LD_VAR 0 5
68086: PUSH
68087: LD_INT 1
68089: ARRAY
68090: PPUSH
68091: CALL_OW 255
68095: PUSH
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 255
68105: NONEQUAL
68106: OR
68107: IFFALSE 68213
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68109: LD_VAR 0 5
68113: PUSH
68114: LD_INT 1
68116: ARRAY
68117: PPUSH
68118: CALL_OW 305
68122: PUSH
68123: LD_VAR 0 5
68127: PUSH
68128: LD_INT 1
68130: ARRAY
68131: PPUSH
68132: CALL_OW 255
68136: PUSH
68137: LD_VAR 0 1
68141: PPUSH
68142: CALL_OW 255
68146: EQUAL
68147: AND
68148: IFFALSE 68172
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68150: LD_VAR 0 5
68154: PUSH
68155: LD_INT 1
68157: ARRAY
68158: PPUSH
68159: LD_VAR 0 5
68163: PUSH
68164: LD_INT 2
68166: ARRAY
68167: PPUSH
68168: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68172: LD_ADDR_EXP 92
68176: PUSH
68177: LD_EXP 92
68181: PPUSH
68182: LD_VAR 0 4
68186: PPUSH
68187: LD_EXP 92
68191: PUSH
68192: LD_VAR 0 4
68196: ARRAY
68197: PPUSH
68198: LD_VAR 0 3
68202: PPUSH
68203: CALL_OW 3
68207: PPUSH
68208: CALL_OW 1
68212: ST_TO_ADDR
// end ; end ;
68213: GO 68042
68215: POP
68216: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68217: LD_VAR 0 1
68221: PPUSH
68222: LD_EXP 92
68226: PUSH
68227: LD_VAR 0 4
68231: ARRAY
68232: PUSH
68233: LD_INT 0
68235: PLUS
68236: PPUSH
68237: CALL_OW 505
// end ;
68241: LD_VAR 0 2
68245: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68246: LD_INT 0
68248: PPUSH
68249: PPUSH
68250: PPUSH
68251: PPUSH
// if not hack in hackTanks then
68252: LD_VAR 0 1
68256: PUSH
68257: LD_EXP 91
68261: IN
68262: NOT
68263: IFFALSE 68267
// exit ;
68265: GO 68352
// index := GetElementIndex ( hackTanks , hack ) ;
68267: LD_ADDR_VAR 0 5
68271: PUSH
68272: LD_EXP 91
68276: PPUSH
68277: LD_VAR 0 1
68281: PPUSH
68282: CALL 13781 0 2
68286: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68287: LD_ADDR_VAR 0 4
68291: PUSH
68292: DOUBLE
68293: LD_INT 1
68295: DEC
68296: ST_TO_ADDR
68297: LD_EXP 92
68301: PUSH
68302: LD_VAR 0 5
68306: ARRAY
68307: PUSH
68308: FOR_TO
68309: IFFALSE 68350
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68311: LD_EXP 92
68315: PUSH
68316: LD_VAR 0 5
68320: ARRAY
68321: PUSH
68322: LD_VAR 0 4
68326: ARRAY
68327: PUSH
68328: LD_INT 1
68330: ARRAY
68331: PUSH
68332: LD_VAR 0 2
68336: EQUAL
68337: IFFALSE 68348
// KillUnit ( vehicle ) ;
68339: LD_VAR 0 2
68343: PPUSH
68344: CALL_OW 66
68348: GO 68308
68350: POP
68351: POP
// end ;
68352: LD_VAR 0 3
68356: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68357: LD_EXP 96
68361: NOT
68362: IFFALSE 68397
68364: GO 68366
68366: DISABLE
// begin initMiner := true ;
68367: LD_ADDR_EXP 96
68371: PUSH
68372: LD_INT 1
68374: ST_TO_ADDR
// minersList := [ ] ;
68375: LD_ADDR_EXP 97
68379: PUSH
68380: EMPTY
68381: ST_TO_ADDR
// minerMinesList := [ ] ;
68382: LD_ADDR_EXP 98
68386: PUSH
68387: EMPTY
68388: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68389: LD_ADDR_EXP 99
68393: PUSH
68394: LD_INT 5
68396: ST_TO_ADDR
// end ;
68397: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68398: LD_EXP 96
68402: PUSH
68403: LD_INT 34
68405: PUSH
68406: LD_INT 81
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PPUSH
68413: CALL_OW 69
68417: AND
68418: IFFALSE 68879
68420: GO 68422
68422: DISABLE
68423: LD_INT 0
68425: PPUSH
68426: PPUSH
68427: PPUSH
68428: PPUSH
// begin enable ;
68429: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68430: LD_ADDR_VAR 0 1
68434: PUSH
68435: LD_INT 34
68437: PUSH
68438: LD_INT 81
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PPUSH
68445: CALL_OW 69
68449: PUSH
68450: FOR_IN
68451: IFFALSE 68523
// begin if not i in minersList then
68453: LD_VAR 0 1
68457: PUSH
68458: LD_EXP 97
68462: IN
68463: NOT
68464: IFFALSE 68521
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68466: LD_ADDR_EXP 97
68470: PUSH
68471: LD_EXP 97
68475: PPUSH
68476: LD_EXP 97
68480: PUSH
68481: LD_INT 1
68483: PLUS
68484: PPUSH
68485: LD_VAR 0 1
68489: PPUSH
68490: CALL_OW 1
68494: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68495: LD_ADDR_EXP 98
68499: PUSH
68500: LD_EXP 98
68504: PPUSH
68505: LD_EXP 98
68509: PUSH
68510: LD_INT 1
68512: PLUS
68513: PPUSH
68514: EMPTY
68515: PPUSH
68516: CALL_OW 1
68520: ST_TO_ADDR
// end end ;
68521: GO 68450
68523: POP
68524: POP
// for i := minerMinesList downto 1 do
68525: LD_ADDR_VAR 0 1
68529: PUSH
68530: DOUBLE
68531: LD_EXP 98
68535: INC
68536: ST_TO_ADDR
68537: LD_INT 1
68539: PUSH
68540: FOR_DOWNTO
68541: IFFALSE 68877
// begin if IsLive ( minersList [ i ] ) then
68543: LD_EXP 97
68547: PUSH
68548: LD_VAR 0 1
68552: ARRAY
68553: PPUSH
68554: CALL_OW 300
68558: IFFALSE 68586
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68560: LD_EXP 97
68564: PUSH
68565: LD_VAR 0 1
68569: ARRAY
68570: PPUSH
68571: LD_EXP 98
68575: PUSH
68576: LD_VAR 0 1
68580: ARRAY
68581: PPUSH
68582: CALL_OW 505
// if not minerMinesList [ i ] then
68586: LD_EXP 98
68590: PUSH
68591: LD_VAR 0 1
68595: ARRAY
68596: NOT
68597: IFFALSE 68601
// continue ;
68599: GO 68540
// for j := minerMinesList [ i ] downto 1 do
68601: LD_ADDR_VAR 0 2
68605: PUSH
68606: DOUBLE
68607: LD_EXP 98
68611: PUSH
68612: LD_VAR 0 1
68616: ARRAY
68617: INC
68618: ST_TO_ADDR
68619: LD_INT 1
68621: PUSH
68622: FOR_DOWNTO
68623: IFFALSE 68873
// begin side := GetSide ( minersList [ i ] ) ;
68625: LD_ADDR_VAR 0 3
68629: PUSH
68630: LD_EXP 97
68634: PUSH
68635: LD_VAR 0 1
68639: ARRAY
68640: PPUSH
68641: CALL_OW 255
68645: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68646: LD_ADDR_VAR 0 4
68650: PUSH
68651: LD_EXP 98
68655: PUSH
68656: LD_VAR 0 1
68660: ARRAY
68661: PUSH
68662: LD_VAR 0 2
68666: ARRAY
68667: PUSH
68668: LD_INT 1
68670: ARRAY
68671: PPUSH
68672: LD_EXP 98
68676: PUSH
68677: LD_VAR 0 1
68681: ARRAY
68682: PUSH
68683: LD_VAR 0 2
68687: ARRAY
68688: PUSH
68689: LD_INT 2
68691: ARRAY
68692: PPUSH
68693: CALL_OW 428
68697: ST_TO_ADDR
// if not tmp then
68698: LD_VAR 0 4
68702: NOT
68703: IFFALSE 68707
// continue ;
68705: GO 68622
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68707: LD_VAR 0 4
68711: PUSH
68712: LD_INT 81
68714: PUSH
68715: LD_VAR 0 3
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PPUSH
68724: CALL_OW 69
68728: IN
68729: PUSH
68730: LD_EXP 98
68734: PUSH
68735: LD_VAR 0 1
68739: ARRAY
68740: PUSH
68741: LD_VAR 0 2
68745: ARRAY
68746: PUSH
68747: LD_INT 1
68749: ARRAY
68750: PPUSH
68751: LD_EXP 98
68755: PUSH
68756: LD_VAR 0 1
68760: ARRAY
68761: PUSH
68762: LD_VAR 0 2
68766: ARRAY
68767: PUSH
68768: LD_INT 2
68770: ARRAY
68771: PPUSH
68772: CALL_OW 458
68776: AND
68777: IFFALSE 68871
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68779: LD_EXP 98
68783: PUSH
68784: LD_VAR 0 1
68788: ARRAY
68789: PUSH
68790: LD_VAR 0 2
68794: ARRAY
68795: PUSH
68796: LD_INT 1
68798: ARRAY
68799: PPUSH
68800: LD_EXP 98
68804: PUSH
68805: LD_VAR 0 1
68809: ARRAY
68810: PUSH
68811: LD_VAR 0 2
68815: ARRAY
68816: PUSH
68817: LD_INT 2
68819: ARRAY
68820: PPUSH
68821: LD_VAR 0 3
68825: PPUSH
68826: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68830: LD_ADDR_EXP 98
68834: PUSH
68835: LD_EXP 98
68839: PPUSH
68840: LD_VAR 0 1
68844: PPUSH
68845: LD_EXP 98
68849: PUSH
68850: LD_VAR 0 1
68854: ARRAY
68855: PPUSH
68856: LD_VAR 0 2
68860: PPUSH
68861: CALL_OW 3
68865: PPUSH
68866: CALL_OW 1
68870: ST_TO_ADDR
// end ; end ;
68871: GO 68622
68873: POP
68874: POP
// end ;
68875: GO 68540
68877: POP
68878: POP
// end ;
68879: PPOPN 4
68881: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68882: LD_INT 0
68884: PPUSH
68885: PPUSH
// result := false ;
68886: LD_ADDR_VAR 0 4
68890: PUSH
68891: LD_INT 0
68893: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68894: LD_VAR 0 1
68898: PPUSH
68899: CALL_OW 264
68903: PUSH
68904: LD_INT 81
68906: EQUAL
68907: NOT
68908: IFFALSE 68912
// exit ;
68910: GO 69152
// index := GetElementIndex ( minersList , unit ) ;
68912: LD_ADDR_VAR 0 5
68916: PUSH
68917: LD_EXP 97
68921: PPUSH
68922: LD_VAR 0 1
68926: PPUSH
68927: CALL 13781 0 2
68931: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68932: LD_EXP 98
68936: PUSH
68937: LD_VAR 0 5
68941: ARRAY
68942: PUSH
68943: LD_EXP 99
68947: GREATEREQUAL
68948: IFFALSE 68952
// exit ;
68950: GO 69152
// ComMoveXY ( unit , x , y ) ;
68952: LD_VAR 0 1
68956: PPUSH
68957: LD_VAR 0 2
68961: PPUSH
68962: LD_VAR 0 3
68966: PPUSH
68967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68971: LD_INT 35
68973: PPUSH
68974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68978: LD_VAR 0 1
68982: PPUSH
68983: LD_VAR 0 2
68987: PPUSH
68988: LD_VAR 0 3
68992: PPUSH
68993: CALL 45136 0 3
68997: NOT
68998: PUSH
68999: LD_VAR 0 1
69003: PPUSH
69004: CALL_OW 314
69008: AND
69009: IFFALSE 69013
// exit ;
69011: GO 69152
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69013: LD_VAR 0 2
69017: PPUSH
69018: LD_VAR 0 3
69022: PPUSH
69023: CALL_OW 428
69027: PUSH
69028: LD_VAR 0 1
69032: EQUAL
69033: PUSH
69034: LD_VAR 0 1
69038: PPUSH
69039: CALL_OW 314
69043: NOT
69044: AND
69045: IFFALSE 68971
// PlaySoundXY ( x , y , PlantMine ) ;
69047: LD_VAR 0 2
69051: PPUSH
69052: LD_VAR 0 3
69056: PPUSH
69057: LD_STRING PlantMine
69059: PPUSH
69060: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69064: LD_VAR 0 2
69068: PPUSH
69069: LD_VAR 0 3
69073: PPUSH
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL_OW 255
69083: PPUSH
69084: LD_INT 0
69086: PPUSH
69087: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69091: LD_ADDR_EXP 98
69095: PUSH
69096: LD_EXP 98
69100: PPUSH
69101: LD_VAR 0 5
69105: PUSH
69106: LD_EXP 98
69110: PUSH
69111: LD_VAR 0 5
69115: ARRAY
69116: PUSH
69117: LD_INT 1
69119: PLUS
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PPUSH
69125: LD_VAR 0 2
69129: PUSH
69130: LD_VAR 0 3
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PPUSH
69139: CALL 13996 0 3
69143: ST_TO_ADDR
// result := true ;
69144: LD_ADDR_VAR 0 4
69148: PUSH
69149: LD_INT 1
69151: ST_TO_ADDR
// end ;
69152: LD_VAR 0 4
69156: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69157: LD_INT 0
69159: PPUSH
69160: PPUSH
69161: PPUSH
// if not unit in minersList then
69162: LD_VAR 0 1
69166: PUSH
69167: LD_EXP 97
69171: IN
69172: NOT
69173: IFFALSE 69177
// exit ;
69175: GO 69569
// index := GetElementIndex ( minersList , unit ) ;
69177: LD_ADDR_VAR 0 6
69181: PUSH
69182: LD_EXP 97
69186: PPUSH
69187: LD_VAR 0 1
69191: PPUSH
69192: CALL 13781 0 2
69196: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69197: LD_ADDR_VAR 0 5
69201: PUSH
69202: DOUBLE
69203: LD_EXP 98
69207: PUSH
69208: LD_VAR 0 6
69212: ARRAY
69213: INC
69214: ST_TO_ADDR
69215: LD_INT 1
69217: PUSH
69218: FOR_DOWNTO
69219: IFFALSE 69380
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69221: LD_EXP 98
69225: PUSH
69226: LD_VAR 0 6
69230: ARRAY
69231: PUSH
69232: LD_VAR 0 5
69236: ARRAY
69237: PUSH
69238: LD_INT 1
69240: ARRAY
69241: PUSH
69242: LD_VAR 0 2
69246: EQUAL
69247: PUSH
69248: LD_EXP 98
69252: PUSH
69253: LD_VAR 0 6
69257: ARRAY
69258: PUSH
69259: LD_VAR 0 5
69263: ARRAY
69264: PUSH
69265: LD_INT 2
69267: ARRAY
69268: PUSH
69269: LD_VAR 0 3
69273: EQUAL
69274: AND
69275: IFFALSE 69378
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69277: LD_EXP 98
69281: PUSH
69282: LD_VAR 0 6
69286: ARRAY
69287: PUSH
69288: LD_VAR 0 5
69292: ARRAY
69293: PUSH
69294: LD_INT 1
69296: ARRAY
69297: PPUSH
69298: LD_EXP 98
69302: PUSH
69303: LD_VAR 0 6
69307: ARRAY
69308: PUSH
69309: LD_VAR 0 5
69313: ARRAY
69314: PUSH
69315: LD_INT 2
69317: ARRAY
69318: PPUSH
69319: LD_VAR 0 1
69323: PPUSH
69324: CALL_OW 255
69328: PPUSH
69329: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69333: LD_ADDR_EXP 98
69337: PUSH
69338: LD_EXP 98
69342: PPUSH
69343: LD_VAR 0 6
69347: PPUSH
69348: LD_EXP 98
69352: PUSH
69353: LD_VAR 0 6
69357: ARRAY
69358: PPUSH
69359: LD_VAR 0 5
69363: PPUSH
69364: CALL_OW 3
69368: PPUSH
69369: CALL_OW 1
69373: ST_TO_ADDR
// exit ;
69374: POP
69375: POP
69376: GO 69569
// end ; end ;
69378: GO 69218
69380: POP
69381: POP
// for i := minerMinesList [ index ] downto 1 do
69382: LD_ADDR_VAR 0 5
69386: PUSH
69387: DOUBLE
69388: LD_EXP 98
69392: PUSH
69393: LD_VAR 0 6
69397: ARRAY
69398: INC
69399: ST_TO_ADDR
69400: LD_INT 1
69402: PUSH
69403: FOR_DOWNTO
69404: IFFALSE 69567
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69406: LD_EXP 98
69410: PUSH
69411: LD_VAR 0 6
69415: ARRAY
69416: PUSH
69417: LD_VAR 0 5
69421: ARRAY
69422: PUSH
69423: LD_INT 1
69425: ARRAY
69426: PPUSH
69427: LD_EXP 98
69431: PUSH
69432: LD_VAR 0 6
69436: ARRAY
69437: PUSH
69438: LD_VAR 0 5
69442: ARRAY
69443: PUSH
69444: LD_INT 2
69446: ARRAY
69447: PPUSH
69448: LD_VAR 0 2
69452: PPUSH
69453: LD_VAR 0 3
69457: PPUSH
69458: CALL_OW 298
69462: PUSH
69463: LD_INT 6
69465: LESS
69466: IFFALSE 69565
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69468: LD_EXP 98
69472: PUSH
69473: LD_VAR 0 6
69477: ARRAY
69478: PUSH
69479: LD_VAR 0 5
69483: ARRAY
69484: PUSH
69485: LD_INT 1
69487: ARRAY
69488: PPUSH
69489: LD_EXP 98
69493: PUSH
69494: LD_VAR 0 6
69498: ARRAY
69499: PUSH
69500: LD_VAR 0 5
69504: ARRAY
69505: PUSH
69506: LD_INT 2
69508: ARRAY
69509: PPUSH
69510: LD_VAR 0 1
69514: PPUSH
69515: CALL_OW 255
69519: PPUSH
69520: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69524: LD_ADDR_EXP 98
69528: PUSH
69529: LD_EXP 98
69533: PPUSH
69534: LD_VAR 0 6
69538: PPUSH
69539: LD_EXP 98
69543: PUSH
69544: LD_VAR 0 6
69548: ARRAY
69549: PPUSH
69550: LD_VAR 0 5
69554: PPUSH
69555: CALL_OW 3
69559: PPUSH
69560: CALL_OW 1
69564: ST_TO_ADDR
// end ; end ;
69565: GO 69403
69567: POP
69568: POP
// end ;
69569: LD_VAR 0 4
69573: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69574: LD_INT 0
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 264
69594: PUSH
69595: LD_INT 81
69597: EQUAL
69598: NOT
69599: PUSH
69600: LD_VAR 0 1
69604: PUSH
69605: LD_EXP 97
69609: IN
69610: NOT
69611: OR
69612: IFFALSE 69616
// exit ;
69614: GO 69938
// index := GetElementIndex ( minersList , unit ) ;
69616: LD_ADDR_VAR 0 6
69620: PUSH
69621: LD_EXP 97
69625: PPUSH
69626: LD_VAR 0 1
69630: PPUSH
69631: CALL 13781 0 2
69635: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69636: LD_ADDR_VAR 0 8
69640: PUSH
69641: LD_EXP 99
69645: PUSH
69646: LD_EXP 98
69650: PUSH
69651: LD_VAR 0 6
69655: ARRAY
69656: MINUS
69657: ST_TO_ADDR
// if not minesFreeAmount then
69658: LD_VAR 0 8
69662: NOT
69663: IFFALSE 69667
// exit ;
69665: GO 69938
// tmp := [ ] ;
69667: LD_ADDR_VAR 0 7
69671: PUSH
69672: EMPTY
69673: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69674: LD_ADDR_VAR 0 5
69678: PUSH
69679: DOUBLE
69680: LD_INT 1
69682: DEC
69683: ST_TO_ADDR
69684: LD_VAR 0 8
69688: PUSH
69689: FOR_TO
69690: IFFALSE 69885
// begin _d := rand ( 0 , 5 ) ;
69692: LD_ADDR_VAR 0 11
69696: PUSH
69697: LD_INT 0
69699: PPUSH
69700: LD_INT 5
69702: PPUSH
69703: CALL_OW 12
69707: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69708: LD_ADDR_VAR 0 12
69712: PUSH
69713: LD_INT 2
69715: PPUSH
69716: LD_INT 6
69718: PPUSH
69719: CALL_OW 12
69723: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69724: LD_ADDR_VAR 0 9
69728: PUSH
69729: LD_VAR 0 2
69733: PPUSH
69734: LD_VAR 0 11
69738: PPUSH
69739: LD_VAR 0 12
69743: PPUSH
69744: CALL_OW 272
69748: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69749: LD_ADDR_VAR 0 10
69753: PUSH
69754: LD_VAR 0 3
69758: PPUSH
69759: LD_VAR 0 11
69763: PPUSH
69764: LD_VAR 0 12
69768: PPUSH
69769: CALL_OW 273
69773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69774: LD_VAR 0 9
69778: PPUSH
69779: LD_VAR 0 10
69783: PPUSH
69784: CALL_OW 488
69788: PUSH
69789: LD_VAR 0 9
69793: PUSH
69794: LD_VAR 0 10
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_VAR 0 7
69807: IN
69808: NOT
69809: AND
69810: PUSH
69811: LD_VAR 0 9
69815: PPUSH
69816: LD_VAR 0 10
69820: PPUSH
69821: CALL_OW 458
69825: NOT
69826: AND
69827: IFFALSE 69869
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69829: LD_ADDR_VAR 0 7
69833: PUSH
69834: LD_VAR 0 7
69838: PPUSH
69839: LD_VAR 0 7
69843: PUSH
69844: LD_INT 1
69846: PLUS
69847: PPUSH
69848: LD_VAR 0 9
69852: PUSH
69853: LD_VAR 0 10
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PPUSH
69862: CALL_OW 1
69866: ST_TO_ADDR
69867: GO 69883
// i := i - 1 ;
69869: LD_ADDR_VAR 0 5
69873: PUSH
69874: LD_VAR 0 5
69878: PUSH
69879: LD_INT 1
69881: MINUS
69882: ST_TO_ADDR
// end ;
69883: GO 69689
69885: POP
69886: POP
// for i in tmp do
69887: LD_ADDR_VAR 0 5
69891: PUSH
69892: LD_VAR 0 7
69896: PUSH
69897: FOR_IN
69898: IFFALSE 69936
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69900: LD_VAR 0 1
69904: PPUSH
69905: LD_VAR 0 5
69909: PUSH
69910: LD_INT 1
69912: ARRAY
69913: PPUSH
69914: LD_VAR 0 5
69918: PUSH
69919: LD_INT 2
69921: ARRAY
69922: PPUSH
69923: CALL 68882 0 3
69927: NOT
69928: IFFALSE 69934
// exit ;
69930: POP
69931: POP
69932: GO 69938
69934: GO 69897
69936: POP
69937: POP
// end ;
69938: LD_VAR 0 4
69942: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69943: LD_INT 0
69945: PPUSH
69946: PPUSH
69947: PPUSH
69948: PPUSH
69949: PPUSH
69950: PPUSH
69951: PPUSH
// if not GetClass ( unit ) = class_sniper then
69952: LD_VAR 0 1
69956: PPUSH
69957: CALL_OW 257
69961: PUSH
69962: LD_INT 5
69964: EQUAL
69965: NOT
69966: IFFALSE 69970
// exit ;
69968: GO 70358
// dist := 8 ;
69970: LD_ADDR_VAR 0 5
69974: PUSH
69975: LD_INT 8
69977: ST_TO_ADDR
// viewRange := 12 ;
69978: LD_ADDR_VAR 0 7
69982: PUSH
69983: LD_INT 12
69985: ST_TO_ADDR
// side := GetSide ( unit ) ;
69986: LD_ADDR_VAR 0 6
69990: PUSH
69991: LD_VAR 0 1
69995: PPUSH
69996: CALL_OW 255
70000: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70001: LD_INT 61
70003: PPUSH
70004: LD_VAR 0 6
70008: PPUSH
70009: CALL_OW 321
70013: PUSH
70014: LD_INT 2
70016: EQUAL
70017: IFFALSE 70027
// viewRange := 16 ;
70019: LD_ADDR_VAR 0 7
70023: PUSH
70024: LD_INT 16
70026: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70027: LD_VAR 0 1
70031: PPUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: LD_VAR 0 3
70041: PPUSH
70042: CALL_OW 297
70046: PUSH
70047: LD_VAR 0 5
70051: GREATER
70052: IFFALSE 70131
// begin ComMoveXY ( unit , x , y ) ;
70054: LD_VAR 0 1
70058: PPUSH
70059: LD_VAR 0 2
70063: PPUSH
70064: LD_VAR 0 3
70068: PPUSH
70069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70073: LD_INT 35
70075: PPUSH
70076: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70080: LD_VAR 0 1
70084: PPUSH
70085: LD_VAR 0 2
70089: PPUSH
70090: LD_VAR 0 3
70094: PPUSH
70095: CALL 45136 0 3
70099: NOT
70100: IFFALSE 70104
// exit ;
70102: GO 70358
// until GetDistUnitXY ( unit , x , y ) < dist ;
70104: LD_VAR 0 1
70108: PPUSH
70109: LD_VAR 0 2
70113: PPUSH
70114: LD_VAR 0 3
70118: PPUSH
70119: CALL_OW 297
70123: PUSH
70124: LD_VAR 0 5
70128: LESS
70129: IFFALSE 70073
// end ; ComTurnXY ( unit , x , y ) ;
70131: LD_VAR 0 1
70135: PPUSH
70136: LD_VAR 0 2
70140: PPUSH
70141: LD_VAR 0 3
70145: PPUSH
70146: CALL_OW 118
// wait ( 5 ) ;
70150: LD_INT 5
70152: PPUSH
70153: CALL_OW 67
// _d := GetDir ( unit ) ;
70157: LD_ADDR_VAR 0 10
70161: PUSH
70162: LD_VAR 0 1
70166: PPUSH
70167: CALL_OW 254
70171: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
70172: LD_ADDR_VAR 0 8
70176: PUSH
70177: LD_VAR 0 1
70181: PPUSH
70182: CALL_OW 250
70186: PPUSH
70187: LD_VAR 0 10
70191: PPUSH
70192: LD_VAR 0 5
70196: PPUSH
70197: CALL_OW 272
70201: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
70202: LD_ADDR_VAR 0 9
70206: PUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 251
70216: PPUSH
70217: LD_VAR 0 10
70221: PPUSH
70222: LD_VAR 0 5
70226: PPUSH
70227: CALL_OW 273
70231: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70232: LD_VAR 0 8
70236: PPUSH
70237: LD_VAR 0 9
70241: PPUSH
70242: CALL_OW 488
70246: NOT
70247: IFFALSE 70251
// exit ;
70249: GO 70358
// ComAnimCustom ( unit , 1 ) ;
70251: LD_VAR 0 1
70255: PPUSH
70256: LD_INT 1
70258: PPUSH
70259: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70263: LD_VAR 0 8
70267: PPUSH
70268: LD_VAR 0 9
70272: PPUSH
70273: LD_VAR 0 6
70277: PPUSH
70278: LD_VAR 0 7
70282: PPUSH
70283: CALL_OW 330
// repeat wait ( 1 ) ;
70287: LD_INT 1
70289: PPUSH
70290: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70294: LD_VAR 0 1
70298: PPUSH
70299: CALL_OW 316
70303: PUSH
70304: LD_VAR 0 1
70308: PPUSH
70309: CALL_OW 314
70313: OR
70314: PUSH
70315: LD_VAR 0 1
70319: PPUSH
70320: CALL_OW 302
70324: NOT
70325: OR
70326: PUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: CALL_OW 301
70336: OR
70337: IFFALSE 70287
// RemoveSeeing ( _x , _y , side ) ;
70339: LD_VAR 0 8
70343: PPUSH
70344: LD_VAR 0 9
70348: PPUSH
70349: LD_VAR 0 6
70353: PPUSH
70354: CALL_OW 331
// end ;
70358: LD_VAR 0 4
70362: RET
