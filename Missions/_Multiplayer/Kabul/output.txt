// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3634 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 304
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := [ [ ] ] ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: EMPTY
 186: PUSH
 187: EMPTY
 188: LIST
 189: ST_TO_ADDR
// for i in mp_teams do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: LD_OWVAR 12
 199: PUSH
 200: FOR_IN
 201: IFFALSE 242
// Teams := Replace ( Teams , 1 , Teams [ 1 ] union i [ 1 ] ) ;
 203: LD_ADDR_EXP 5
 207: PUSH
 208: LD_EXP 5
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_EXP 5
 220: PUSH
 221: LD_INT 1
 223: ARRAY
 224: PUSH
 225: LD_VAR 0 2
 229: PUSH
 230: LD_INT 1
 232: ARRAY
 233: UNION
 234: PPUSH
 235: CALL_OW 1
 239: ST_TO_ADDR
 240: GO 200
 242: POP
 243: POP
// for i = 0 to 6 do
 244: LD_ADDR_VAR 0 2
 248: PUSH
 249: DOUBLE
 250: LD_INT 0
 252: DEC
 253: ST_TO_ADDR
 254: LD_INT 6
 256: PUSH
 257: FOR_TO
 258: IFFALSE 300
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 260: LD_ADDR_EXP 16
 264: PUSH
 265: LD_EXP 16
 269: PPUSH
 270: LD_EXP 16
 274: PUSH
 275: LD_INT 1
 277: PLUS
 278: PPUSH
 279: LD_VAR 0 2
 283: PPUSH
 284: CALL_OW 426
 288: PUSH
 289: LD_INT 1
 291: PLUS
 292: PPUSH
 293: CALL_OW 2
 297: ST_TO_ADDR
 298: GO 257
 300: POP
 301: POP
// end else
 302: GO 459
// begin Game_Type := 1 ;
 304: LD_ADDR_EXP 1
 308: PUSH
 309: LD_INT 1
 311: ST_TO_ADDR
// Your_Side := 2 ;
 312: LD_ADDR_OWVAR 2
 316: PUSH
 317: LD_INT 2
 319: ST_TO_ADDR
// Side_Positions := [ 0 , 1 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 320: LD_ADDR_EXP 2
 324: PUSH
 325: LD_INT 0
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: LD_INT 0
 336: PUSH
 337: LD_INT 2
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: LD_INT 3
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: ST_TO_ADDR
// Side_Teams := [ 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 0
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: LD_INT 0
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 0
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: LIST
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 398: LD_ADDR_EXP 4
 402: PUSH
 403: LD_INT 0
 405: PUSH
 406: LD_INT 3
 408: PUSH
 409: LD_INT 0
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: LD_INT 3
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 3
 423: PUSH
 424: LD_INT 0
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: LIST
 433: LIST
 434: LIST
 435: LIST
 436: ST_TO_ADDR
// Teams := [ [ 2 , 5 , 7 ] ] ;
 437: LD_ADDR_EXP 5
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 5
 447: PUSH
 448: LD_INT 7
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 459: LD_ADDR_EXP 7
 463: PUSH
 464: LD_INT 203
 466: PUSH
 467: LD_INT 174
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: LD_INT 114
 476: PUSH
 477: LD_INT 171
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 26
 486: PUSH
 487: LD_INT 44
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: PUSH
 496: EMPTY
 497: PUSH
 498: EMPTY
 499: PUSH
 500: EMPTY
 501: PUSH
 502: EMPTY
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: ST_TO_ADDR
// Bot_Side := 2 ;
 514: LD_ADDR_EXP 8
 518: PUSH
 519: LD_INT 2
 521: ST_TO_ADDR
// for i = 1 to 8 do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: DOUBLE
 528: LD_INT 1
 530: DEC
 531: ST_TO_ADDR
 532: LD_INT 8
 534: PUSH
 535: FOR_TO
 536: IFFALSE 630
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 530
 547: PUSH
 548: LD_VAR 0 2
 552: PPUSH
 553: CALL_OW 532
 557: OR
 558: IFFALSE 583
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 560: LD_ADDR_EXP 2
 564: PUSH
 565: LD_EXP 2
 569: PPUSH
 570: LD_VAR 0 2
 574: PPUSH
 575: LD_INT 0
 577: PPUSH
 578: CALL_OW 1
 582: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 583: LD_EXP 4
 587: PUSH
 588: LD_VAR 0 2
 592: ARRAY
 593: PUSH
 594: LD_EXP 4
 598: PUSH
 599: LD_INT 3
 601: NONEQUAL
 602: AND
 603: IFFALSE 628
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 605: LD_ADDR_EXP 4
 609: PUSH
 610: LD_EXP 4
 614: PPUSH
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 3
 622: PPUSH
 623: CALL_OW 1
 627: ST_TO_ADDR
// end ;
 628: GO 535
 630: POP
 631: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 632: LD_EXP 8
 636: PUSH
 637: LD_INT 2
 639: EQUAL
 640: PUSH
 641: LD_EXP 2
 645: PUSH
 646: LD_INT 2
 648: ARRAY
 649: AND
 650: IFFALSE 660
// bot_side := 5 ;
 652: LD_ADDR_EXP 8
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 660: LD_EXP 8
 664: PUSH
 665: LD_INT 5
 667: EQUAL
 668: PUSH
 669: LD_EXP 2
 673: PUSH
 674: LD_INT 5
 676: ARRAY
 677: AND
 678: IFFALSE 688
// bot_side := 8 ;
 680: LD_ADDR_EXP 8
 684: PUSH
 685: LD_INT 8
 687: ST_TO_ADDR
// Team_Game := true ;
 688: LD_ADDR_EXP 6
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// for i = 1 to 8 do
 696: LD_ADDR_VAR 0 2
 700: PUSH
 701: DOUBLE
 702: LD_INT 1
 704: DEC
 705: ST_TO_ADDR
 706: LD_INT 8
 708: PUSH
 709: FOR_TO
 710: IFFALSE 746
// if i <> bot_side then
 712: LD_VAR 0 2
 716: PUSH
 717: LD_EXP 8
 721: NONEQUAL
 722: IFFALSE 744
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 724: LD_VAR 0 2
 728: PPUSH
 729: LD_EXP 8
 733: PPUSH
 734: LD_INT 2
 736: PPUSH
 737: LD_INT 1
 739: PPUSH
 740: CALL_OW 80
 744: GO 709
 746: POP
 747: POP
// for i := 2 to Teams [ 1 ] do
 748: LD_ADDR_VAR 0 2
 752: PUSH
 753: DOUBLE
 754: LD_INT 2
 756: DEC
 757: ST_TO_ADDR
 758: LD_EXP 5
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PUSH
 767: FOR_TO
 768: IFFALSE 842
// begin ChangeSideFog ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] ) ;
 770: LD_EXP 5
 774: PUSH
 775: LD_INT 1
 777: ARRAY
 778: PUSH
 779: LD_VAR 0 2
 783: ARRAY
 784: PPUSH
 785: LD_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PUSH
 794: LD_INT 1
 796: ARRAY
 797: PPUSH
 798: CALL_OW 343
// SetAttitude ( Teams [ 1 ] [ i ] , Teams [ 1 ] [ 1 ] , att_friend , true ) ;
 802: LD_EXP 5
 806: PUSH
 807: LD_INT 1
 809: ARRAY
 810: PUSH
 811: LD_VAR 0 2
 815: ARRAY
 816: PPUSH
 817: LD_EXP 5
 821: PUSH
 822: LD_INT 1
 824: ARRAY
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: CALL_OW 80
// end ;
 840: GO 767
 842: POP
 843: POP
// if not Multiplayer then
 844: LD_OWVAR 4
 848: NOT
 849: IFFALSE 886
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 851: LD_ADDR_EXP 16
 855: PUSH
 856: LD_INT 1
 858: PUSH
 859: LD_INT 1
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: LD_INT 3
 873: PUSH
 874: LD_INT 3
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 886: LD_ADDR_EXP 10
 890: PUSH
 891: LD_INT 9
 893: PUSH
 894: LD_INT 12
 896: PUSH
 897: LD_INT 15
 899: PUSH
 900: LD_INT 24
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_EXP 16
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: ARRAY
 918: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 919: LD_ADDR_EXP 11
 923: PUSH
 924: LD_INT 2
 926: PUSH
 927: LD_INT 4
 929: PUSH
 930: LD_INT 6
 932: PUSH
 933: LD_INT 8
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_EXP 16
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: ARRAY
 951: ST_TO_ADDR
// crates_spawn := [ 0 0$30 , 0 0$25 , 0 0$20 , 0 0$17 ] [ definitions [ 3 ] ] ;
 952: LD_ADDR_EXP 12
 956: PUSH
 957: LD_INT 1050
 959: PUSH
 960: LD_INT 875
 962: PUSH
 963: LD_INT 700
 965: PUSH
 966: LD_INT 595
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: PUSH
 975: LD_EXP 16
 979: PUSH
 980: LD_INT 3
 982: ARRAY
 983: ARRAY
 984: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
 985: LD_ADDR_EXP 13
 989: PUSH
 990: LD_INT 0
 992: PUSH
 993: LD_INT 10500
 995: PUSH
 996: LD_INT 6300
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: PUSH
1004: LD_EXP 16
1008: PUSH
1009: LD_INT 4
1011: ARRAY
1012: ARRAY
1013: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1014: LD_ADDR_EXP 14
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 31500
1024: PUSH
1025: LD_INT 10500
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 16
1037: PUSH
1038: LD_INT 4
1040: ARRAY
1041: ARRAY
1042: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1043: LD_ADDR_EXP 15
1047: PUSH
1048: LD_INT 0
1050: PUSH
1051: LD_INT 3
1053: PUSH
1054: LD_INT 5
1056: PUSH
1057: LD_INT 7
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_EXP 16
1070: PUSH
1071: LD_INT 5
1073: ARRAY
1074: ARRAY
1075: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1076: LD_ADDR_OWVAR 67
1080: PUSH
1081: LD_INT 1
1083: PUSH
1084: LD_INT 2
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 16
1099: PUSH
1100: LD_INT 6
1102: ARRAY
1103: ARRAY
1104: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1105: LD_ADDR_EXP 26
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 16
1128: PUSH
1129: LD_INT 7
1131: ARRAY
1132: ARRAY
1133: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1134: LD_ADDR_EXP 23
1138: PUSH
1139: LD_INT 11353
1141: PUSH
1142: LD_INT 12244
1144: PUSH
1145: LD_INT 44444
1147: PUSH
1148: LD_INT 12345
1150: PUSH
1151: LD_INT 43413
1153: PUSH
1154: LD_INT 14152
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: LIST
1164: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1165: LD_ADDR_EXP 24
1169: PUSH
1170: LD_INT 1
1172: PPUSH
1173: LD_INT 6
1175: PPUSH
1176: CALL_OW 12
1180: ST_TO_ADDR
// if bot_side <> 2 then
1181: LD_EXP 8
1185: PUSH
1186: LD_INT 2
1188: NONEQUAL
1189: IFFALSE 1232
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1191: LD_ADDR_VAR 0 2
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 69
1210: PUSH
1211: FOR_IN
1212: IFFALSE 1230
// SetSide ( i , bot_side ) ;
1214: LD_VAR 0 2
1218: PPUSH
1219: LD_EXP 8
1223: PPUSH
1224: CALL_OW 235
1228: GO 1211
1230: POP
1231: POP
// ResetFog ;
1232: CALL_OW 335
// PreparePeople ( ) ;
1236: CALL 2066 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_INT 14
1247: PUSH
1248: LD_INT 15
1250: PUSH
1251: LD_INT 16
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// if amount_of_apeman then
1259: LD_EXP 15
1263: IFFALSE 1313
// for j in apeman_areas do
1265: LD_ADDR_VAR 0 3
1269: PUSH
1270: LD_EXP 18
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1311
// for i = 1 to amount_of_apeman do
1278: LD_ADDR_VAR 0 2
1282: PUSH
1283: DOUBLE
1284: LD_INT 1
1286: DEC
1287: ST_TO_ADDR
1288: LD_EXP 15
1292: PUSH
1293: FOR_TO
1294: IFFALSE 1307
// AddApeman ( j ) ;
1296: LD_VAR 0 3
1300: PPUSH
1301: CALL 3015 0 1
1305: GO 1293
1307: POP
1308: POP
1309: GO 1275
1311: POP
1312: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1313: LD_INT 22
1315: PUSH
1316: LD_OWVAR 2
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 87
// disable ( 17 ) ;
1338: LD_INT 17
1340: DISABLE_MARKED
// end ;
1341: LD_VAR 0 1
1345: RET
// every 3 3$40 trigger game_start do
1346: LD_EXP 9
1350: IFFALSE 1406
1352: GO 1354
1354: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1355: LD_OWVAR 1
1359: PUSH
1360: LD_INT 5
1362: MOD
1363: PUSH
1364: LD_INT 1
1366: PLUS
1367: PPUSH
1368: LD_INT 13
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: CALL_OW 55
// Wait ( 0 0$15 ) ;
1378: LD_INT 525
1380: PPUSH
1381: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1385: LD_OWVAR 1
1389: PUSH
1390: LD_INT 5
1392: MOD
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 57
// enable ;
1405: ENABLE
// end ;
1406: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1407: LD_EXP 9
1411: IFFALSE 2063
1413: GO 1415
1415: DISABLE
1416: LD_INT 0
1418: PPUSH
1419: PPUSH
// begin cr := 1 ;
1420: LD_ADDR_VAR 0 1
1424: PUSH
1425: LD_INT 1
1427: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1428: LD_ADDR_VAR 0 2
1432: PUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_INT 3
1438: PPUSH
1439: CALL_OW 12
1443: PUSH
1444: LD_INT 2
1446: PPUSH
1447: LD_INT 4
1449: PPUSH
1450: CALL_OW 12
1454: PUSH
1455: LD_INT 3
1457: PPUSH
1458: LD_INT 5
1460: PPUSH
1461: CALL_OW 12
1465: PUSH
1466: LD_INT 3
1468: PPUSH
1469: LD_INT 5
1471: PPUSH
1472: CALL_OW 12
1476: PUSH
1477: LD_INT 2
1479: PPUSH
1480: LD_INT 5
1482: PPUSH
1483: CALL_OW 12
1487: PUSH
1488: LD_INT 1
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 12
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: ST_TO_ADDR
// while ( true ) do
1507: LD_INT 1
1509: IFFALSE 2063
// begin Wait ( crates_spawn + ( tick mod 35 * 60 ) ) ;
1511: LD_EXP 12
1515: PUSH
1516: LD_OWVAR 1
1520: PUSH
1521: LD_INT 35
1523: MOD
1524: PUSH
1525: LD_INT 60
1527: MUL
1528: PLUS
1529: PPUSH
1530: CALL_OW 67
// if cr mod 3 = 0 then
1534: LD_VAR 0 1
1538: PUSH
1539: LD_INT 3
1541: MOD
1542: PUSH
1543: LD_INT 0
1545: EQUAL
1546: IFFALSE 1699
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1548: LD_VAR 0 2
1552: PUSH
1553: LD_VAR 0 1
1557: PUSH
1558: LD_VAR 0 2
1562: MOD
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PPUSH
1569: LD_INT 17
1571: PPUSH
1572: LD_INT 1
1574: PPUSH
1575: CALL_OW 55
// Wait ( crates_spawn ) ;
1579: LD_EXP 12
1583: PPUSH
1584: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1588: LD_VAR 0 2
1592: PUSH
1593: LD_VAR 0 1
1597: PUSH
1598: LD_VAR 0 2
1602: MOD
1603: PUSH
1604: LD_INT 1
1606: PLUS
1607: ARRAY
1608: PPUSH
1609: LD_INT 18
1611: PPUSH
1612: LD_INT 1
1614: PPUSH
1615: CALL_OW 55
// Wait ( crates_spawn ) ;
1619: LD_EXP 12
1623: PPUSH
1624: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_VAR 0 1
1637: PUSH
1638: LD_VAR 0 2
1642: MOD
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: PPUSH
1649: LD_INT 19
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: CALL_OW 55
// Wait ( crates_spawn ) ;
1659: LD_EXP 12
1663: PPUSH
1664: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1668: LD_VAR 0 2
1672: PUSH
1673: LD_VAR 0 1
1677: PUSH
1678: LD_VAR 0 2
1682: MOD
1683: PUSH
1684: LD_INT 1
1686: PLUS
1687: ARRAY
1688: PPUSH
1689: LD_INT 17
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: CALL_OW 55
// end ; if cr mod 3 = 1 then
1699: LD_VAR 0 1
1703: PUSH
1704: LD_INT 3
1706: MOD
1707: PUSH
1708: LD_INT 1
1710: EQUAL
1711: IFFALSE 1864
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1713: LD_VAR 0 2
1717: PUSH
1718: LD_VAR 0 1
1722: PUSH
1723: LD_VAR 0 2
1727: MOD
1728: PUSH
1729: LD_INT 1
1731: PLUS
1732: ARRAY
1733: PPUSH
1734: LD_INT 18
1736: PPUSH
1737: LD_INT 1
1739: PPUSH
1740: CALL_OW 55
// Wait ( crates_spawn ) ;
1744: LD_EXP 12
1748: PPUSH
1749: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1753: LD_VAR 0 2
1757: PUSH
1758: LD_VAR 0 1
1762: PUSH
1763: LD_VAR 0 2
1767: MOD
1768: PUSH
1769: LD_INT 1
1771: PLUS
1772: ARRAY
1773: PPUSH
1774: LD_INT 17
1776: PPUSH
1777: LD_INT 1
1779: PPUSH
1780: CALL_OW 55
// Wait ( crates_spawn ) ;
1784: LD_EXP 12
1788: PPUSH
1789: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1793: LD_VAR 0 2
1797: PUSH
1798: LD_VAR 0 1
1802: PUSH
1803: LD_VAR 0 2
1807: MOD
1808: PUSH
1809: LD_INT 1
1811: PLUS
1812: ARRAY
1813: PPUSH
1814: LD_INT 19
1816: PPUSH
1817: LD_INT 1
1819: PPUSH
1820: CALL_OW 55
// Wait ( crates_spawn ) ;
1824: LD_EXP 12
1828: PPUSH
1829: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1833: LD_VAR 0 2
1837: PUSH
1838: LD_VAR 0 1
1842: PUSH
1843: LD_VAR 0 2
1847: MOD
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: PPUSH
1854: LD_INT 18
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: CALL_OW 55
// end ; if cr mod 3 = 2 then
1864: LD_VAR 0 1
1868: PUSH
1869: LD_INT 3
1871: MOD
1872: PUSH
1873: LD_INT 2
1875: EQUAL
1876: IFFALSE 2029
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1878: LD_VAR 0 2
1882: PUSH
1883: LD_VAR 0 1
1887: PUSH
1888: LD_VAR 0 2
1892: MOD
1893: PUSH
1894: LD_INT 1
1896: PLUS
1897: ARRAY
1898: PPUSH
1899: LD_INT 19
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: CALL_OW 55
// Wait ( crates_spawn ) ;
1909: LD_EXP 12
1913: PPUSH
1914: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1918: LD_VAR 0 2
1922: PUSH
1923: LD_VAR 0 1
1927: PUSH
1928: LD_VAR 0 2
1932: MOD
1933: PUSH
1934: LD_INT 1
1936: PLUS
1937: ARRAY
1938: PPUSH
1939: LD_INT 18
1941: PPUSH
1942: LD_INT 1
1944: PPUSH
1945: CALL_OW 55
// Wait ( crates_spawn ) ;
1949: LD_EXP 12
1953: PPUSH
1954: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1958: LD_VAR 0 2
1962: PUSH
1963: LD_VAR 0 1
1967: PUSH
1968: LD_VAR 0 2
1972: MOD
1973: PUSH
1974: LD_INT 1
1976: PLUS
1977: ARRAY
1978: PPUSH
1979: LD_INT 17
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: CALL_OW 55
// Wait ( crates_spawn ) ;
1989: LD_EXP 12
1993: PPUSH
1994: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1998: LD_VAR 0 2
2002: PUSH
2003: LD_VAR 0 1
2007: PUSH
2008: LD_VAR 0 2
2012: MOD
2013: PUSH
2014: LD_INT 1
2016: PLUS
2017: ARRAY
2018: PPUSH
2019: LD_INT 19
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 55
// end ; cr := cr + 1 ;
2029: LD_ADDR_VAR 0 1
2033: PUSH
2034: LD_VAR 0 1
2038: PUSH
2039: LD_INT 1
2041: PLUS
2042: ST_TO_ADDR
// if cr > 150 then
2043: LD_VAR 0 1
2047: PUSH
2048: LD_INT 150
2050: GREATER
2051: IFFALSE 2061
// cr := 43 ;
2053: LD_ADDR_VAR 0 1
2057: PUSH
2058: LD_INT 43
2060: ST_TO_ADDR
// end ;
2061: GO 1507
// end ; end_of_file
2063: PPOPN 2
2065: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2066: LD_INT 0
2068: PPUSH
2069: PPUSH
2070: PPUSH
2071: PPUSH
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
// to_copy := [ ] ;
2077: LD_ADDR_VAR 0 5
2081: PUSH
2082: EMPTY
2083: ST_TO_ADDR
// for i = 1 to 8 do
2084: LD_ADDR_VAR 0 2
2088: PUSH
2089: DOUBLE
2090: LD_INT 1
2092: DEC
2093: ST_TO_ADDR
2094: LD_INT 8
2096: PUSH
2097: FOR_TO
2098: IFFALSE 3008
// begin if Side_Positions [ i ] then
2100: LD_EXP 2
2104: PUSH
2105: LD_VAR 0 2
2109: ARRAY
2110: IFFALSE 3006
// begin uc_side := i ;
2112: LD_ADDR_OWVAR 20
2116: PUSH
2117: LD_VAR 0 2
2121: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2122: LD_ADDR_OWVAR 21
2126: PUSH
2127: LD_EXP 4
2131: PUSH
2132: LD_VAR 0 2
2136: ARRAY
2137: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2138: LD_ADDR_VAR 0 6
2142: PUSH
2143: LD_EXP 7
2147: PUSH
2148: LD_EXP 2
2152: PUSH
2153: LD_VAR 0 2
2157: ARRAY
2158: ARRAY
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2164: LD_ADDR_VAR 0 7
2168: PUSH
2169: LD_EXP 7
2173: PUSH
2174: LD_EXP 2
2178: PUSH
2179: LD_VAR 0 2
2183: ARRAY
2184: ARRAY
2185: PUSH
2186: LD_INT 2
2188: ARRAY
2189: ST_TO_ADDR
// hc_importance := 100 ;
2190: LD_ADDR_OWVAR 32
2194: PUSH
2195: LD_INT 100
2197: ST_TO_ADDR
// if Multiplayer then
2198: LD_OWVAR 4
2202: IFFALSE 2260
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2204: LD_ADDR_OWVAR 26
2208: PUSH
2209: LD_OWVAR 19
2213: PUSH
2214: LD_OWVAR 20
2218: ARRAY
2219: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2220: LD_ADDR_OWVAR 33
2224: PUSH
2225: LD_STRING MULTIAVATARS
2227: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2228: LD_ADDR_OWVAR 34
2232: PUSH
2233: LD_OWVAR 20
2237: PPUSH
2238: CALL_OW 525
2242: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2243: LD_ADDR_OWVAR 27
2247: PUSH
2248: LD_OWVAR 20
2252: PPUSH
2253: CALL_OW 526
2257: ST_TO_ADDR
// end else
2258: GO 2292
// begin hc_name :=  ;
2260: LD_ADDR_OWVAR 26
2264: PUSH
2265: LD_STRING 
2267: ST_TO_ADDR
// hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2276: LD_ADDR_OWVAR 27
2280: PUSH
2281: LD_INT 1
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL_OW 12
2291: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2292: LD_OWVAR 27
2296: PPUSH
2297: LD_INT 1
2299: PPUSH
2300: LD_EXP 11
2304: PPUSH
2305: CALL_OW 380
// un := CreateHuman ;
2309: LD_ADDR_VAR 0 4
2313: PUSH
2314: CALL_OW 44
2318: ST_TO_ADDR
// if not to_copy then
2319: LD_VAR 0 5
2323: NOT
2324: IFFALSE 2351
// to_copy := Replace ( to_copy , 1 , un ) else
2326: LD_ADDR_VAR 0 5
2330: PUSH
2331: LD_VAR 0 5
2335: PPUSH
2336: LD_INT 1
2338: PPUSH
2339: LD_VAR 0 4
2343: PPUSH
2344: CALL_OW 1
2348: ST_TO_ADDR
2349: GO 2427
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2351: LD_VAR 0 5
2355: PUSH
2356: LD_INT 1
2358: ARRAY
2359: PPUSH
2360: LD_VAR 0 4
2364: PPUSH
2365: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: LD_VAR 0 5
2381: PUSH
2382: LD_INT 1
2384: ARRAY
2385: PPUSH
2386: LD_INT 2
2388: PPUSH
2389: CALL_OW 260
2393: PPUSH
2394: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2398: LD_VAR 0 4
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_INT 1
2413: ARRAY
2414: PPUSH
2415: LD_INT 1
2417: PPUSH
2418: CALL_OW 260
2422: PPUSH
2423: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2427: LD_VAR 0 4
2431: PPUSH
2432: LD_VAR 0 6
2436: PPUSH
2437: LD_VAR 0 7
2441: PPUSH
2442: LD_INT 10
2444: PPUSH
2445: LD_INT 0
2447: PPUSH
2448: CALL_OW 50
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// hc_name :=  ;
2460: LD_ADDR_OWVAR 26
2464: PUSH
2465: LD_STRING 
2467: ST_TO_ADDR
// hc_gallery :=  ;
2468: LD_ADDR_OWVAR 33
2472: PUSH
2473: LD_STRING 
2475: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2476: LD_ADDR_VAR 0 9
2480: PUSH
2481: LD_EXP 10
2485: PUSH
2486: LD_INT 1
2488: MINUS
2489: PUSH
2490: LD_INT 4
2492: DIVREAL
2493: ST_TO_ADDR
// c := 1 ;
2494: LD_ADDR_VAR 0 8
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// for j = 2 to number_of_people do
2502: LD_ADDR_VAR 0 3
2506: PUSH
2507: DOUBLE
2508: LD_INT 2
2510: DEC
2511: ST_TO_ADDR
2512: LD_EXP 10
2516: PUSH
2517: FOR_TO
2518: IFFALSE 2729
// begin PrepareHuman ( false , c , skill_level ) ;
2520: LD_INT 0
2522: PPUSH
2523: LD_VAR 0 8
2527: PPUSH
2528: LD_EXP 11
2532: PPUSH
2533: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: MINUS
2545: PUSH
2546: LD_VAR 0 9
2550: MOD
2551: PUSH
2552: LD_INT 0
2554: EQUAL
2555: IFFALSE 2571
// c := c + 1 ;
2557: LD_ADDR_VAR 0 8
2561: PUSH
2562: LD_VAR 0 8
2566: PUSH
2567: LD_INT 1
2569: PLUS
2570: ST_TO_ADDR
// un := CreateHuman ;
2571: LD_ADDR_VAR 0 4
2575: PUSH
2576: CALL_OW 44
2580: ST_TO_ADDR
// if to_copy < j then
2581: LD_VAR 0 5
2585: PUSH
2586: LD_VAR 0 3
2590: LESS
2591: IFFALSE 2620
// to_copy := Replace ( to_copy , j , un ) else
2593: LD_ADDR_VAR 0 5
2597: PUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_VAR 0 3
2607: PPUSH
2608: LD_VAR 0 4
2612: PPUSH
2613: CALL_OW 1
2617: ST_TO_ADDR
2618: GO 2702
// begin CopySkills ( to_copy [ j ] , un ) ;
2620: LD_VAR 0 5
2624: PUSH
2625: LD_VAR 0 3
2629: ARRAY
2630: PPUSH
2631: LD_VAR 0 4
2635: PPUSH
2636: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2640: LD_VAR 0 4
2644: PPUSH
2645: LD_INT 2
2647: PPUSH
2648: LD_VAR 0 5
2652: PUSH
2653: LD_VAR 0 3
2657: ARRAY
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 260
2666: PPUSH
2667: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2671: LD_VAR 0 4
2675: PPUSH
2676: LD_INT 1
2678: PPUSH
2679: LD_VAR 0 5
2683: PUSH
2684: LD_VAR 0 3
2688: ARRAY
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: CALL_OW 260
2697: PPUSH
2698: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2702: LD_VAR 0 4
2706: PPUSH
2707: LD_VAR 0 6
2711: PPUSH
2712: LD_VAR 0 7
2716: PPUSH
2717: LD_INT 10
2719: PPUSH
2720: LD_INT 0
2722: PPUSH
2723: CALL_OW 50
// end ;
2727: GO 2517
2729: POP
2730: POP
// if handicap then
2731: LD_EXP 26
2735: IFFALSE 3006
// begin if handicap = 1 then
2737: LD_EXP 26
2741: PUSH
2742: LD_INT 1
2744: EQUAL
2745: IFFALSE 2824
// for j = 1 to 2 do
2747: LD_ADDR_VAR 0 3
2751: PUSH
2752: DOUBLE
2753: LD_INT 1
2755: DEC
2756: ST_TO_ADDR
2757: LD_INT 2
2759: PUSH
2760: FOR_TO
2761: IFFALSE 2822
// begin vc_chassis := ru_medium_tracked ;
2763: LD_ADDR_OWVAR 37
2767: PUSH
2768: LD_INT 22
2770: ST_TO_ADDR
// vc_engine := engine_combustion ;
2771: LD_ADDR_OWVAR 39
2775: PUSH
2776: LD_INT 1
2778: ST_TO_ADDR
// vc_control := control_manual ;
2779: LD_ADDR_OWVAR 38
2783: PUSH
2784: LD_INT 1
2786: ST_TO_ADDR
// vc_weapon := ru_gun ;
2787: LD_ADDR_OWVAR 40
2791: PUSH
2792: LD_INT 44
2794: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2795: CALL_OW 45
2799: PPUSH
2800: LD_VAR 0 6
2804: PPUSH
2805: LD_VAR 0 7
2809: PPUSH
2810: LD_INT 13
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 50
// end ;
2820: GO 2760
2822: POP
2823: POP
// if handicap = 2 then
2824: LD_EXP 26
2828: PUSH
2829: LD_INT 2
2831: EQUAL
2832: IFFALSE 3006
// begin for j = 1 to 2 do
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: DOUBLE
2840: LD_INT 1
2842: DEC
2843: ST_TO_ADDR
2844: LD_INT 2
2846: PUSH
2847: FOR_TO
2848: IFFALSE 2922
// begin vc_chassis := ru_heavy_tracked ;
2850: LD_ADDR_OWVAR 37
2854: PUSH
2855: LD_INT 24
2857: ST_TO_ADDR
// vc_engine := engine_combustion ;
2858: LD_ADDR_OWVAR 39
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// vc_control := control_manual ;
2866: LD_ADDR_OWVAR 38
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2874: LD_ADDR_OWVAR 40
2878: PUSH
2879: LD_INT 43
2881: PUSH
2882: LD_INT 46
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_VAR 0 3
2893: ARRAY
2894: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_VAR 0 6
2904: PPUSH
2905: LD_VAR 0 7
2909: PPUSH
2910: LD_INT 13
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 50
// end ;
2920: GO 2847
2922: POP
2923: POP
// vc_chassis := ru_medium_tracked ;
2924: LD_ADDR_OWVAR 37
2928: PUSH
2929: LD_INT 22
2931: ST_TO_ADDR
// vc_engine := engine_siberite ;
2932: LD_ADDR_OWVAR 39
2936: PUSH
2937: LD_INT 3
2939: ST_TO_ADDR
// vc_control := control_computer ;
2940: LD_ADDR_OWVAR 38
2944: PUSH
2945: LD_INT 3
2947: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2948: LD_ADDR_OWVAR 40
2952: PUSH
2953: LD_INT 51
2955: ST_TO_ADDR
// un := CreateVehicle ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 45
2965: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_VAR 0 6
2975: PPUSH
2976: LD_VAR 0 7
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
2991: LD_VAR 0 4
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: LD_INT 100
3001: PPUSH
3002: CALL_OW 290
// end ; end ; end ; end ;
3006: GO 2097
3008: POP
3009: POP
// end ;
3010: LD_VAR 0 1
3014: RET
// export function AddApeman ( area ) ; begin
3015: LD_INT 0
3017: PPUSH
// uc_nation := 0 ;
3018: LD_ADDR_OWVAR 21
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// uc_side := 0 ;
3026: LD_ADDR_OWVAR 20
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3034: LD_ADDR_OWVAR 35
3038: PUSH
3039: LD_INT 10
3041: NEG
3042: PPUSH
3043: LD_INT 15
3045: PPUSH
3046: CALL_OW 12
3050: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3051: LD_INT 0
3053: PPUSH
3054: LD_INT 12
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3064: LD_ADDR_OWVAR 29
3068: PUSH
3069: LD_INT 10
3071: PUSH
3072: LD_INT 12
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3079: CALL_OW 44
3083: PPUSH
3084: LD_VAR 0 1
3088: PPUSH
3089: LD_INT 0
3091: PPUSH
3092: CALL_OW 49
// end ;
3096: LD_VAR 0 2
3100: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
3101: LD_INT 0
3103: PPUSH
3104: PPUSH
3105: PPUSH
3106: PPUSH
// r := 100 ;
3107: LD_ADDR_VAR 0 5
3111: PUSH
3112: LD_INT 100
3114: ST_TO_ADDR
// x := 0 ;
3115: LD_ADDR_VAR 0 6
3119: PUSH
3120: LD_INT 0
3122: ST_TO_ADDR
// while ( x < n ) do
3123: LD_VAR 0 6
3127: PUSH
3128: LD_VAR 0 2
3132: LESS
3133: IFFALSE 3448
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: DOUBLE
3141: LD_INT 1
3143: DEC
3144: ST_TO_ADDR
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 517
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PUSH
3162: FOR_TO
3163: IFFALSE 3444
// begin if r > 50 then
3165: LD_VAR 0 5
3169: PUSH
3170: LD_INT 50
3172: GREATER
3173: IFFALSE 3420
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
3175: LD_VAR 0 1
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 517
3187: PUSH
3188: LD_INT 1
3190: ARRAY
3191: PUSH
3192: LD_VAR 0 4
3196: ARRAY
3197: PPUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 517
3210: PUSH
3211: LD_INT 2
3213: ARRAY
3214: PUSH
3215: LD_VAR 0 4
3219: ARRAY
3220: PPUSH
3221: CALL_OW 458
3225: NOT
3226: IFFALSE 3404
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , bot_side , 0 ) ;
3228: LD_VAR 0 1
3232: PPUSH
3233: LD_INT 0
3235: PPUSH
3236: CALL_OW 517
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PUSH
3245: LD_VAR 0 4
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: LD_INT 0
3258: PPUSH
3259: CALL_OW 517
3263: PUSH
3264: LD_INT 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 4
3272: ARRAY
3273: PPUSH
3274: LD_EXP 8
3278: PPUSH
3279: LD_INT 0
3281: PPUSH
3282: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 1 ] [ i ] ) ;
3286: LD_ADDR_EXP 17
3290: PUSH
3291: LD_EXP 17
3295: PPUSH
3296: LD_EXP 17
3300: PUSH
3301: LD_INT 1
3303: PLUS
3304: PPUSH
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL_OW 517
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PUSH
3322: LD_VAR 0 4
3326: ARRAY
3327: PPUSH
3328: CALL_OW 2
3332: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 2 ] [ i ] ) ;
3333: LD_ADDR_EXP 17
3337: PUSH
3338: LD_EXP 17
3342: PPUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_INT 1
3350: PLUS
3351: PPUSH
3352: LD_VAR 0 1
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 517
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: PUSH
3369: LD_VAR 0 4
3373: ARRAY
3374: PPUSH
3375: CALL_OW 2
3379: ST_TO_ADDR
// r := 0 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 0
3387: ST_TO_ADDR
// x := x + 1 ;
3388: LD_ADDR_VAR 0 6
3392: PUSH
3393: LD_VAR 0 6
3397: PUSH
3398: LD_INT 1
3400: PLUS
3401: ST_TO_ADDR
// end else
3402: GO 3418
// r := r + 35 ;
3404: LD_ADDR_VAR 0 5
3408: PUSH
3409: LD_VAR 0 5
3413: PUSH
3414: LD_INT 35
3416: PLUS
3417: ST_TO_ADDR
// end else
3418: GO 3442
// r := r + rand ( 10 , 25 ) ;
3420: LD_ADDR_VAR 0 5
3424: PUSH
3425: LD_VAR 0 5
3429: PUSH
3430: LD_INT 10
3432: PPUSH
3433: LD_INT 25
3435: PPUSH
3436: CALL_OW 12
3440: PLUS
3441: ST_TO_ADDR
// end ;
3442: GO 3162
3444: POP
3445: POP
3446: GO 3123
// end ;
3448: LD_VAR 0 3
3452: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
3457: PPUSH
// if not GetControl ( veh ) = control_manual then
3458: LD_VAR 0 1
3462: PPUSH
3463: CALL_OW 263
3467: PUSH
3468: LD_INT 1
3470: EQUAL
3471: NOT
3472: IFFALSE 3484
// result := false else
3474: LD_ADDR_VAR 0 2
3478: PUSH
3479: LD_INT 0
3481: ST_TO_ADDR
3482: GO 3629
// if veh in FilterAllUnits ( [ f_empty ] ) then
3484: LD_VAR 0 1
3488: PUSH
3489: LD_INT 58
3491: PUSH
3492: EMPTY
3493: LIST
3494: PPUSH
3495: CALL_OW 69
3499: IN
3500: IFFALSE 3512
// result := false else
3502: LD_ADDR_VAR 0 2
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
3510: GO 3629
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_INT 22
3519: PUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 255
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 55
3536: PUSH
3537: EMPTY
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PPUSH
3544: CALL_OW 69
3548: ST_TO_ADDR
// if not filter then
3549: LD_VAR 0 4
3553: NOT
3554: IFFALSE 3566
// result := false else
3556: LD_ADDR_VAR 0 2
3560: PUSH
3561: LD_INT 0
3563: ST_TO_ADDR
3564: GO 3629
// for i = 1 to filter do
3566: LD_ADDR_VAR 0 3
3570: PUSH
3571: DOUBLE
3572: LD_INT 1
3574: DEC
3575: ST_TO_ADDR
3576: LD_VAR 0 4
3580: PUSH
3581: FOR_TO
3582: IFFALSE 3627
// if IsDriver ( filter [ i ] ) = veh then
3584: LD_VAR 0 4
3588: PUSH
3589: LD_VAR 0 3
3593: ARRAY
3594: PPUSH
3595: CALL 42450 0 1
3599: PUSH
3600: LD_VAR 0 1
3604: EQUAL
3605: IFFALSE 3625
// begin result := filter [ i ] ;
3607: LD_ADDR_VAR 0 2
3611: PUSH
3612: LD_VAR 0 4
3616: PUSH
3617: LD_VAR 0 3
3621: ARRAY
3622: ST_TO_ADDR
// break ;
3623: GO 3627
// end ;
3625: GO 3581
3627: POP
3628: POP
// end ; end ; end_of_file
3629: LD_VAR 0 2
3633: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
3644: PPUSH
// side := Bot_Side ;
3645: LD_ADDR_VAR 0 5
3649: PUSH
3650: LD_EXP 8
3654: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_INT 4
3662: PUSH
3663: LD_INT 6
3665: PUSH
3666: LD_INT 8
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: PUSH
3674: LD_OWVAR 67
3678: ARRAY
3679: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3680: LD_ADDR_VAR 0 8
3684: PUSH
3685: LD_INT 27
3687: PUSH
3688: LD_INT 28
3690: PUSH
3691: LD_INT 25
3693: PUSH
3694: LD_INT 26
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3703: LD_ADDR_EXP 22
3707: PUSH
3708: LD_INT 4
3710: PUSH
3711: LD_INT 5
3713: PUSH
3714: LD_INT 6
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: LD_OWVAR 67
3726: ARRAY
3727: ST_TO_ADDR
// ct := [ ] ;
3728: LD_ADDR_VAR 0 3
3732: PUSH
3733: EMPTY
3734: ST_TO_ADDR
// patrols := [ ] ;
3735: LD_ADDR_EXP 19
3739: PUSH
3740: EMPTY
3741: ST_TO_ADDR
// attackers := [ ] ;
3742: LD_ADDR_EXP 20
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// attackers_tmp := [ ] ;
3749: LD_ADDR_EXP 27
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
3756: LD_ADDR_EXP 21
3760: PUSH
3761: LD_INT 14
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: LD_INT 27
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 14
3781: PUSH
3782: LD_INT 1
3784: PUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 25
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 14
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 28
3808: PUSH
3809: EMPTY
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 14
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: LD_INT 29
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 14
3835: PUSH
3836: LD_INT 1
3838: PUSH
3839: LD_INT 2
3841: PUSH
3842: LD_INT 27
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: LD_INT 13
3853: PUSH
3854: LD_INT 3
3856: PUSH
3857: LD_INT 2
3859: PUSH
3860: LD_INT 29
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: ST_TO_ADDR
// SetBName ( ar_dep , newkabul ) ;
3877: LD_INT 2
3879: PPUSH
3880: LD_STRING newkabul
3882: PPUSH
3883: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3887: LD_INT 2
3889: PPUSH
3890: CALL_OW 274
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: LD_INT 90000
3900: PPUSH
3901: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3905: LD_INT 2
3907: PPUSH
3908: CALL_OW 274
3912: PPUSH
3913: LD_INT 2
3915: PPUSH
3916: LD_INT 9000
3918: PPUSH
3919: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 274
3930: PPUSH
3931: LD_INT 3
3933: PPUSH
3934: LD_INT 3000
3936: PPUSH
3937: CALL_OW 277
// if Difficulty > 1 then
3941: LD_OWVAR 67
3945: PUSH
3946: LD_INT 1
3948: GREATER
3949: IFFALSE 3966
// SetTech ( 5 , side , state_researched ) ;
3951: LD_INT 5
3953: PPUSH
3954: LD_VAR 0 5
3958: PPUSH
3959: LD_INT 2
3961: PPUSH
3962: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
3966: LD_INT 41
3968: PPUSH
3969: LD_VAR 0 5
3973: PPUSH
3974: LD_INT 2
3976: PPUSH
3977: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
3981: LD_INT 51
3983: PPUSH
3984: LD_VAR 0 5
3988: PPUSH
3989: LD_INT 2
3991: PPUSH
3992: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
3996: LD_INT 52
3998: PPUSH
3999: LD_VAR 0 5
4003: PPUSH
4004: LD_INT 2
4006: PPUSH
4007: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4011: LD_INT 53
4013: PPUSH
4014: LD_VAR 0 5
4018: PPUSH
4019: LD_INT 2
4021: PPUSH
4022: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4026: LD_INT 60
4028: PPUSH
4029: LD_VAR 0 5
4033: PPUSH
4034: LD_INT 2
4036: PPUSH
4037: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4041: LD_INT 61
4043: PPUSH
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 2
4051: PPUSH
4052: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4056: LD_INT 62
4058: PPUSH
4059: LD_VAR 0 5
4063: PPUSH
4064: LD_INT 2
4066: PPUSH
4067: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: LD_INT 22
4078: PUSH
4079: LD_VAR 0 5
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 21
4090: PUSH
4091: LD_INT 3
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: FOR_IN
4108: IFFALSE 4141
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4110: LD_VAR 0 2
4114: PPUSH
4115: LD_INT 6
4117: PUSH
4118: LD_INT 8
4120: PUSH
4121: LD_INT 10
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_OWVAR 67
4133: ARRAY
4134: PPUSH
4135: CALL_OW 241
4139: GO 4107
4141: POP
4142: POP
// if Difficulty > 1 then
4143: LD_OWVAR 67
4147: PUSH
4148: LD_INT 1
4150: GREATER
4151: IFFALSE 4160
// RemoveEnvironmentArea ( forest_road ) ;
4153: LD_INT 11
4155: PPUSH
4156: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 15 , 20 ] [ Difficulty ] ) ;
4160: LD_INT 4
4162: PPUSH
4163: LD_INT 10
4165: PUSH
4166: LD_INT 15
4168: PUSH
4169: LD_INT 20
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: LD_OWVAR 67
4181: ARRAY
4182: PPUSH
4183: CALL 3101 0 2
// PlaceMines ( mine_east_zone , [ 7 , 14 , 18 ] [ Difficulty ] ) ;
4187: LD_INT 5
4189: PPUSH
4190: LD_INT 7
4192: PUSH
4193: LD_INT 14
4195: PUSH
4196: LD_INT 18
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_OWVAR 67
4208: ARRAY
4209: PPUSH
4210: CALL 3101 0 2
// PlaceMines ( mine_south_zone , [ 5 , 11 , 17 ] [ Difficulty ] ) ;
4214: LD_INT 7
4216: PPUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 11
4222: PUSH
4223: LD_INT 17
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_OWVAR 67
4235: ARRAY
4236: PPUSH
4237: CALL 3101 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4241: LD_INT 6
4243: PPUSH
4244: LD_INT 0
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: LD_INT 5
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: LD_OWVAR 67
4262: ARRAY
4263: PPUSH
4264: CALL 3101 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4268: LD_INT 8
4270: PPUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: LD_INT 8
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_OWVAR 67
4289: ARRAY
4290: PPUSH
4291: CALL 3101 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4295: LD_INT 9
4297: PPUSH
4298: LD_INT 0
4300: PUSH
4301: LD_INT 2
4303: PUSH
4304: LD_INT 4
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_OWVAR 67
4316: ARRAY
4317: PPUSH
4318: CALL 3101 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4322: LD_INT 10
4324: PPUSH
4325: LD_INT 0
4327: PUSH
4328: LD_INT 1
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: PUSH
4339: LD_OWVAR 67
4343: ARRAY
4344: PPUSH
4345: CALL 3101 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4349: LD_INT 12
4351: PPUSH
4352: LD_INT 0
4354: PUSH
4355: LD_INT 1
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: PUSH
4366: LD_OWVAR 67
4370: ARRAY
4371: PPUSH
4372: CALL 3101 0 2
// for i = 1 to [ 8 , 11 , 14 ] [ Difficulty ] do
4376: LD_ADDR_VAR 0 2
4380: PUSH
4381: DOUBLE
4382: LD_INT 1
4384: DEC
4385: ST_TO_ADDR
4386: LD_INT 8
4388: PUSH
4389: LD_INT 11
4391: PUSH
4392: LD_INT 14
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_OWVAR 67
4404: ARRAY
4405: PUSH
4406: FOR_TO
4407: IFFALSE 4582
// begin hex := RandHexXYR ( 134 , 73 , 10 , false ) ;
4409: LD_ADDR_VAR 0 4
4413: PUSH
4414: LD_INT 134
4416: PPUSH
4417: LD_INT 73
4419: PPUSH
4420: LD_INT 10
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 17
4430: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 and not MineAtPos ( hex [ 1 ] , hex [ 2 ] ) then
4431: LD_VAR 0 4
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_VAR 0 4
4444: PUSH
4445: LD_INT 2
4447: ARRAY
4448: PPUSH
4449: CALL_OW 428
4453: PUSH
4454: LD_INT 0
4456: EQUAL
4457: PUSH
4458: LD_VAR 0 4
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: PPUSH
4467: LD_VAR 0 4
4471: PUSH
4472: LD_INT 2
4474: ARRAY
4475: PPUSH
4476: CALL_OW 458
4480: NOT
4481: AND
4482: IFFALSE 4580
// begin mines_list := Insert ( mines_list , mines_list + 1 , hex [ 1 ] ) ;
4484: LD_ADDR_EXP 17
4488: PUSH
4489: LD_EXP 17
4493: PPUSH
4494: LD_EXP 17
4498: PUSH
4499: LD_INT 1
4501: PLUS
4502: PPUSH
4503: LD_VAR 0 4
4507: PUSH
4508: LD_INT 1
4510: ARRAY
4511: PPUSH
4512: CALL_OW 2
4516: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , hex [ 2 ] ) ;
4517: LD_ADDR_EXP 17
4521: PUSH
4522: LD_EXP 17
4526: PPUSH
4527: LD_EXP 17
4531: PUSH
4532: LD_INT 1
4534: PLUS
4535: PPUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_INT 2
4543: ARRAY
4544: PPUSH
4545: CALL_OW 2
4549: ST_TO_ADDR
// PlaceMine ( hex [ 1 ] , hex [ 2 ] , bot_side , 0 ) ;
4550: LD_VAR 0 4
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_VAR 0 4
4563: PUSH
4564: LD_INT 2
4566: ARRAY
4567: PPUSH
4568: LD_EXP 8
4572: PPUSH
4573: LD_INT 0
4575: PPUSH
4576: CALL_OW 454
// end ; end ;
4580: GO 4406
4582: POP
4583: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4584: LD_ADDR_VAR 0 2
4588: PUSH
4589: LD_INT 22
4591: PUSH
4592: LD_VAR 0 5
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 30
4603: PUSH
4604: LD_INT 32
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 69
4619: PUSH
4620: FOR_IN
4621: IFFALSE 4653
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4623: LD_VAR 0 2
4627: PPUSH
4628: LD_VAR 0 8
4632: PUSH
4633: LD_INT 1
4635: PPUSH
4636: LD_VAR 0 8
4640: PPUSH
4641: CALL_OW 12
4645: ARRAY
4646: PPUSH
4647: CALL_OW 431
4651: GO 4620
4653: POP
4654: POP
// uc_side := side ;
4655: LD_ADDR_OWVAR 20
4659: PUSH
4660: LD_VAR 0 5
4664: ST_TO_ADDR
// uc_nation := 2 ;
4665: LD_ADDR_OWVAR 21
4669: PUSH
4670: LD_INT 2
4672: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4673: LD_ADDR_VAR 0 2
4677: PUSH
4678: DOUBLE
4679: LD_INT 1
4681: DEC
4682: ST_TO_ADDR
4683: LD_INT 1
4685: PUSH
4686: LD_OWVAR 67
4690: PLUS
4691: PUSH
4692: FOR_TO
4693: IFFALSE 4783
// begin vc_chassis := ar_half_tracked ;
4695: LD_ADDR_OWVAR 37
4699: PUSH
4700: LD_INT 14
4702: ST_TO_ADDR
// vc_engine := engine_combustion ;
4703: LD_ADDR_OWVAR 39
4707: PUSH
4708: LD_INT 1
4710: ST_TO_ADDR
// vc_control := control_manual ;
4711: LD_ADDR_OWVAR 38
4715: PUSH
4716: LD_INT 1
4718: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4719: LD_ADDR_OWVAR 40
4723: PUSH
4724: LD_INT 31
4726: ST_TO_ADDR
// veh := CreateVehicle ;
4727: LD_ADDR_VAR 0 7
4731: PUSH
4732: CALL_OW 45
4736: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4737: LD_VAR 0 7
4741: PPUSH
4742: LD_INT 3
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4752: LD_INT 0
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: LD_VAR 0 9
4762: PPUSH
4763: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4767: CALL_OW 44
4771: PPUSH
4772: LD_VAR 0 7
4776: PPUSH
4777: CALL_OW 52
// end ;
4781: GO 4692
4783: POP
4784: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: LD_INT 22
4792: PUSH
4793: LD_VAR 0 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 30
4804: PUSH
4805: LD_INT 32
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: PUSH
4821: FOR_IN
4822: IFFALSE 4855
// begin PrepareHuman ( false , 1 , skill ) ;
4824: LD_INT 0
4826: PPUSH
4827: LD_INT 1
4829: PPUSH
4830: LD_VAR 0 9
4834: PPUSH
4835: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4839: CALL_OW 44
4843: PPUSH
4844: LD_VAR 0 2
4848: PPUSH
4849: CALL_OW 52
// end ;
4853: GO 4821
4855: POP
4856: POP
// for i = 1 to 4 do
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: DOUBLE
4863: LD_INT 1
4865: DEC
4866: ST_TO_ADDR
4867: LD_INT 4
4869: PUSH
4870: FOR_TO
4871: IFFALSE 4902
// begin PrepareHuman ( false , 2 , skill ) ;
4873: LD_INT 0
4875: PPUSH
4876: LD_INT 2
4878: PPUSH
4879: LD_VAR 0 9
4883: PPUSH
4884: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4888: CALL_OW 44
4892: PPUSH
4893: LD_INT 2
4895: PPUSH
4896: CALL_OW 52
// end ;
4900: GO 4870
4902: POP
4903: POP
// for i = 1 to 6 do
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: DOUBLE
4910: LD_INT 1
4912: DEC
4913: ST_TO_ADDR
4914: LD_INT 6
4916: PUSH
4917: FOR_TO
4918: IFFALSE 4949
// begin PrepareHuman ( false , 3 , skill ) ;
4920: LD_INT 0
4922: PPUSH
4923: LD_INT 3
4925: PPUSH
4926: LD_VAR 0 9
4930: PPUSH
4931: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4935: CALL_OW 44
4939: PPUSH
4940: LD_INT 12
4942: PPUSH
4943: CALL_OW 52
// end ;
4947: GO 4917
4949: POP
4950: POP
// for i = 1 to 4 do
4951: LD_ADDR_VAR 0 2
4955: PUSH
4956: DOUBLE
4957: LD_INT 1
4959: DEC
4960: ST_TO_ADDR
4961: LD_INT 4
4963: PUSH
4964: FOR_TO
4965: IFFALSE 5022
// begin PrepareHuman ( false , 4 , skill ) ;
4967: LD_INT 0
4969: PPUSH
4970: LD_INT 4
4972: PPUSH
4973: LD_VAR 0 9
4977: PPUSH
4978: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
4982: CALL_OW 44
4986: PPUSH
4987: LD_INT 30
4989: PUSH
4990: LD_INT 8
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PPUSH
4997: CALL_OW 69
5001: PUSH
5002: LD_VAR 0 2
5006: PUSH
5007: LD_INT 2
5009: MOD
5010: PUSH
5011: LD_INT 1
5013: PLUS
5014: ARRAY
5015: PPUSH
5016: CALL_OW 52
// end ;
5020: GO 4964
5022: POP
5023: POP
// PrepareHuman ( false , class_mortar , skill ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 8
5029: PPUSH
5030: LD_VAR 0 9
5034: PPUSH
5035: CALL_OW 380
// un := CreateHuman ;
5039: LD_ADDR_VAR 0 6
5043: PUSH
5044: CALL_OW 44
5048: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5049: LD_VAR 0 6
5053: PPUSH
5054: LD_INT 2
5056: PPUSH
5057: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
5061: LD_VAR 0 6
5065: PPUSH
5066: LD_INT 31
5068: PPUSH
5069: CALL_OW 52
// for i = 1 to 4 do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 4
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5143
// begin uc_nation := 0 ;
5089: LD_ADDR_OWVAR 21
5093: PUSH
5094: LD_INT 0
5096: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
5097: LD_INT 0
5099: PPUSH
5100: LD_INT 16
5102: PPUSH
5103: LD_INT 1
5105: PPUSH
5106: CALL_OW 380
// un := CreateHuman ;
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: CALL_OW 44
5119: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
5120: LD_VAR 0 6
5124: PPUSH
5125: LD_INT 106
5127: PPUSH
5128: LD_INT 46
5130: PPUSH
5131: LD_INT 8
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 50
// end ;
5141: GO 5086
5143: POP
5144: POP
// for i = 1 to 2 * Difficulty do
5145: LD_ADDR_VAR 0 2
5149: PUSH
5150: DOUBLE
5151: LD_INT 1
5153: DEC
5154: ST_TO_ADDR
5155: LD_INT 2
5157: PUSH
5158: LD_OWVAR 67
5162: MUL
5163: PUSH
5164: FOR_TO
5165: IFFALSE 5205
// begin uc_nation := 0 ;
5167: LD_ADDR_OWVAR 21
5171: PUSH
5172: LD_INT 0
5174: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
5175: LD_INT 0
5177: PPUSH
5178: LD_INT 15
5180: PPUSH
5181: LD_INT 3
5183: PPUSH
5184: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
5188: CALL_OW 44
5192: PPUSH
5193: LD_INT 20
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// end ;
5203: GO 5164
5205: POP
5206: POP
// for i = 1 to 4 * Difficulty do
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_INT 4
5219: PUSH
5220: LD_OWVAR 67
5224: MUL
5225: PUSH
5226: FOR_TO
5227: IFFALSE 5301
// begin uc_nation := 0 ;
5229: LD_ADDR_OWVAR 21
5233: PUSH
5234: LD_INT 0
5236: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5237: LD_INT 0
5239: PPUSH
5240: LD_INT 17
5242: PPUSH
5243: LD_INT 3
5245: PPUSH
5246: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5250: LD_ADDR_OWVAR 29
5254: PUSH
5255: LD_INT 11
5257: PUSH
5258: LD_INT 13
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: ST_TO_ADDR
// un := CreateHuman ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: CALL_OW 44
5274: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5275: LD_VAR 0 6
5279: PPUSH
5280: LD_INT 21
5282: PPUSH
5283: LD_INT 0
5285: PPUSH
5286: CALL_OW 49
// ComHold ( un ) ;
5290: LD_VAR 0 6
5294: PPUSH
5295: CALL_OW 140
// end ;
5299: GO 5226
5301: POP
5302: POP
// end ;
5303: LD_VAR 0 1
5307: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5308: LD_INT 22
5310: PUSH
5311: LD_EXP 8
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PUSH
5320: LD_INT 30
5322: PUSH
5323: LD_INT 3
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 69
5338: IFFALSE 5645
5340: GO 5342
5342: DISABLE
5343: LD_INT 0
5345: PPUSH
5346: PPUSH
5347: PPUSH
// begin enable ;
5348: ENABLE
// if Difficulty < 3 then
5349: LD_OWVAR 67
5353: PUSH
5354: LD_INT 3
5356: LESS
5357: IFFALSE 5366
// wait ( 1 1$00 ) ;
5359: LD_INT 2100
5361: PPUSH
5362: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5366: LD_ADDR_VAR 0 2
5370: PUSH
5371: LD_EXP 23
5375: PUSH
5376: LD_EXP 24
5380: ARRAY
5381: ST_TO_ADDR
// p := 1 ;
5382: LD_ADDR_VAR 0 3
5386: PUSH
5387: LD_INT 1
5389: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5390: LD_ADDR_VAR 0 1
5394: PUSH
5395: DOUBLE
5396: LD_INT 1
5398: DEC
5399: ST_TO_ADDR
5400: LD_EXP 22
5404: PUSH
5405: LD_INT 1
5407: NEG
5408: PUSH
5409: LD_INT 0
5411: PUSH
5412: LD_INT 1
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_OWVAR 67
5424: ARRAY
5425: PLUS
5426: PUSH
5427: FOR_TO
5428: IFFALSE 5609
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5430: LD_INT 22
5432: PUSH
5433: LD_EXP 8
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 30
5444: PUSH
5445: LD_INT 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PPUSH
5456: CALL_OW 69
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: LD_EXP 21
5469: PUSH
5470: LD_VAR 0 2
5474: PUSH
5475: LD_INT 10
5477: MOD
5478: ARRAY
5479: PUSH
5480: LD_INT 1
5482: ARRAY
5483: PPUSH
5484: LD_EXP 21
5488: PUSH
5489: LD_VAR 0 2
5493: PUSH
5494: LD_INT 10
5496: MOD
5497: ARRAY
5498: PUSH
5499: LD_INT 2
5501: ARRAY
5502: PPUSH
5503: LD_EXP 21
5507: PUSH
5508: LD_VAR 0 2
5512: PUSH
5513: LD_INT 10
5515: MOD
5516: ARRAY
5517: PUSH
5518: LD_INT 3
5520: ARRAY
5521: PPUSH
5522: LD_EXP 21
5526: PUSH
5527: LD_VAR 0 2
5531: PUSH
5532: LD_INT 10
5534: MOD
5535: ARRAY
5536: PUSH
5537: LD_INT 4
5539: ARRAY
5540: PPUSH
5541: CALL_OW 185
// tmp := tmp / 10 ;
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: LD_VAR 0 2
5554: PUSH
5555: LD_INT 10
5557: DIVREAL
5558: ST_TO_ADDR
// p := p + 1 ;
5559: LD_ADDR_VAR 0 3
5563: PUSH
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 1
5571: PLUS
5572: ST_TO_ADDR
// if p > 5 then
5573: LD_VAR 0 3
5577: PUSH
5578: LD_INT 5
5580: GREATER
5581: IFFALSE 5607
// begin p := 1 ;
5583: LD_ADDR_VAR 0 3
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5591: LD_ADDR_VAR 0 2
5595: PUSH
5596: LD_EXP 23
5600: PUSH
5601: LD_EXP 24
5605: ARRAY
5606: ST_TO_ADDR
// end ; end ;
5607: GO 5427
5609: POP
5610: POP
// rng := rng + 1 ;
5611: LD_ADDR_EXP 24
5615: PUSH
5616: LD_EXP 24
5620: PUSH
5621: LD_INT 1
5623: PLUS
5624: ST_TO_ADDR
// if rng > queue_codes then
5625: LD_EXP 24
5629: PUSH
5630: LD_EXP 23
5634: GREATER
5635: IFFALSE 5645
// rng := 1 ;
5637: LD_ADDR_EXP 24
5641: PUSH
5642: LD_INT 1
5644: ST_TO_ADDR
// end ;
5645: PPOPN 3
5647: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5648: LD_INT 25
5650: PUSH
5651: LD_INT 17
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: IFFALSE 5765
5664: GO 5666
5666: DISABLE
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
// begin enable ;
5671: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5672: LD_ADDR_VAR 0 1
5676: PUSH
5677: LD_INT 25
5679: PUSH
5680: LD_INT 17
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 69
5691: PUSH
5692: FOR_IN
5693: IFFALSE 5763
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5695: LD_ADDR_VAR 0 2
5699: PUSH
5700: LD_INT 81
5702: PUSH
5703: LD_EXP 8
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PPUSH
5712: CALL_OW 69
5716: PPUSH
5717: LD_VAR 0 1
5721: PPUSH
5722: CALL_OW 74
5726: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_VAR 0 2
5736: PPUSH
5737: CALL_OW 296
5741: PUSH
5742: LD_INT 15
5744: LESS
5745: IFFALSE 5761
// ComAttackUnit ( i , un ) ;
5747: LD_VAR 0 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PPUSH
5757: CALL_OW 115
// end ;
5761: GO 5692
5763: POP
5764: POP
// end ;
5765: PPOPN 2
5767: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5768: LD_EXP 20
5772: IFFALSE 5839
5774: GO 5776
5776: DISABLE
5777: LD_INT 0
5779: PPUSH
// begin enable ;
5780: ENABLE
// for i in attackers do
5781: LD_ADDR_VAR 0 1
5785: PUSH
5786: LD_EXP 20
5790: PUSH
5791: FOR_IN
5792: IFFALSE 5837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 81
5801: PUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 255
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PPUSH
5821: LD_VAR 0 1
5825: PPUSH
5826: CALL_OW 74
5830: PPUSH
5831: CALL_OW 115
5835: GO 5791
5837: POP
5838: POP
// end ;
5839: PPOPN 1
5841: END
// every 0 0$01 trigger not attackers marked 17 do
5842: LD_EXP 20
5846: NOT
5847: IFFALSE 5856
5849: GO 5851
5851: DISABLE
// begin enable ;
5852: ENABLE
// disable ( 17 ) ;
5853: LD_INT 17
5855: DISABLE_MARKED
// end ;
5856: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5857: LD_EXP 22
5861: PUSH
5862: LD_EXP 20
5866: LESSEQUAL
5867: IFFALSE 5880
5869: GO 5871
5871: DISABLE
5872: LD_INT 0
5874: PPUSH
5875: PPUSH
// begin enable ;
5876: ENABLE
// enable ( 17 ) ;
5877: LD_INT 17
5879: ENABLE_MARKED
// end ;
5880: PPOPN 2
5882: END
// every 0 0$01 trigger game_start and tick >= 30 30$00 do
5883: LD_EXP 9
5887: PUSH
5888: LD_OWVAR 1
5892: PUSH
5893: LD_INT 63000
5895: GREATEREQUAL
5896: AND
5897: IFFALSE 5916
5899: GO 5901
5901: DISABLE
// begin veh_counter := veh_counter + 1 ;
5902: LD_ADDR_EXP 22
5906: PUSH
5907: LD_EXP 22
5911: PUSH
5912: LD_INT 1
5914: PLUS
5915: ST_TO_ADDR
// end ;
5916: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5917: LD_EXP 9
5921: PUSH
5922: LD_OWVAR 1
5926: PUSH
5927: LD_INT 105000
5929: GREATEREQUAL
5930: AND
5931: IFFALSE 5950
5933: GO 5935
5935: DISABLE
// begin veh_counter := veh_counter + 2 ;
5936: LD_ADDR_EXP 22
5940: PUSH
5941: LD_EXP 22
5945: PUSH
5946: LD_INT 2
5948: PLUS
5949: ST_TO_ADDR
// end ;
5950: END
// every 0 0$01 trigger game_start and tick >= 80 80$00 do
5951: LD_EXP 9
5955: PUSH
5956: LD_OWVAR 1
5960: PUSH
5961: LD_INT 168000
5963: GREATEREQUAL
5964: AND
5965: IFFALSE 5984
5967: GO 5969
5969: DISABLE
// begin veh_counter := veh_counter + 3 ;
5970: LD_ADDR_EXP 22
5974: PUSH
5975: LD_EXP 22
5979: PUSH
5980: LD_INT 3
5982: PLUS
5983: ST_TO_ADDR
// end ;
5984: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
5985: LD_INT 22
5987: PUSH
5988: LD_EXP 8
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 33
5999: PUSH
6000: LD_INT 2
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL_OW 69
6015: IFFALSE 6231
6017: GO 6019
6019: DISABLE
6020: LD_INT 0
6022: PPUSH
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
6027: PPUSH
6028: PPUSH
// begin enable ;
6029: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: LD_INT 22
6037: PUSH
6038: LD_EXP 8
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 33
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 3
6059: PUSH
6060: LD_INT 61
6062: PUSH
6063: EMPTY
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: PPUSH
6075: CALL_OW 69
6079: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
6080: LD_ADDR_VAR 0 3
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_EXP 8
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 34
6099: PUSH
6100: LD_INT 31
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PPUSH
6111: CALL_OW 69
6115: ST_TO_ADDR
// best := 10 ;
6116: LD_ADDR_VAR 0 5
6120: PUSH
6121: LD_INT 10
6123: ST_TO_ADDR
// best_mechanic := - 1 ;
6124: LD_ADDR_VAR 0 6
6128: PUSH
6129: LD_INT 1
6131: NEG
6132: ST_TO_ADDR
// if vehs then
6133: LD_VAR 0 4
6137: IFFALSE 6231
// begin for j in cts do
6139: LD_ADDR_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: PUSH
6149: FOR_IN
6150: IFFALSE 6211
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
6152: LD_ADDR_VAR 0 7
6156: PUSH
6157: LD_VAR 0 2
6161: PPUSH
6162: CALL 3453 0 1
6166: PPUSH
6167: CALL_OW 432
6171: ST_TO_ADDR
// if p < best then
6172: LD_VAR 0 7
6176: PUSH
6177: LD_VAR 0 5
6181: LESS
6182: IFFALSE 6209
// begin best := p ;
6184: LD_ADDR_VAR 0 5
6188: PUSH
6189: LD_VAR 0 7
6193: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: LD_VAR 0 2
6203: PPUSH
6204: CALL 3453 0 1
6208: ST_TO_ADDR
// end ; end ;
6209: GO 6149
6211: POP
6212: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
6213: LD_VAR 0 4
6217: PUSH
6218: LD_INT 1
6220: ARRAY
6221: PPUSH
6222: LD_VAR 0 6
6226: PPUSH
6227: CALL_OW 135
// end ; end ;
6231: PPOPN 7
6233: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
6234: GO 6236
6236: DISABLE
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
6245: PPUSH
// begin enable ;
6246: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6247: LD_ADDR_VAR 0 6
6251: PUSH
6252: LD_INT 22
6254: PUSH
6255: LD_EXP 8
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 21
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 3
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: LD_INT 1000
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: LIST
6295: PPUSH
6296: CALL_OW 69
6300: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6301: LD_ADDR_VAR 0 3
6305: PUSH
6306: LD_INT 22
6308: PUSH
6309: LD_EXP 8
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 25
6323: PUSH
6324: LD_INT 1
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 25
6333: PUSH
6334: LD_INT 2
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: LD_INT 24
6362: PUSH
6363: LD_INT 750
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 69
6383: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6384: LD_ADDR_VAR 0 4
6388: PUSH
6389: LD_INT 22
6391: PUSH
6392: LD_EXP 8
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 25
6403: PUSH
6404: LD_INT 4
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 69
6419: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: LD_INT 22
6427: PUSH
6428: LD_EXP 8
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 69
6455: ST_TO_ADDR
// if not h and not b then
6456: LD_VAR 0 3
6460: NOT
6461: PUSH
6462: LD_VAR 0 6
6466: NOT
6467: AND
6468: IFFALSE 6752
// begin if sci then
6470: LD_VAR 0 4
6474: IFFALSE 6611
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6476: LD_VAR 0 4
6480: PPUSH
6481: LD_INT 3
6483: PUSH
6484: LD_INT 54
6486: PUSH
6487: EMPTY
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PPUSH
6494: CALL_OW 72
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_EXP 8
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 30
6513: PUSH
6514: LD_INT 8
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PPUSH
6525: CALL_OW 69
6529: AND
6530: IFFALSE 6611
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6532: LD_ADDR_VAR 0 2
6536: PUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 54
6547: PUSH
6548: EMPTY
6549: LIST
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 72
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6609
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6563: LD_VAR 0 2
6567: PPUSH
6568: LD_INT 22
6570: PUSH
6571: LD_EXP 8
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 30
6582: PUSH
6583: LD_INT 8
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 69
6598: PUSH
6599: LD_INT 1
6601: ARRAY
6602: PPUSH
6603: CALL_OW 120
6607: GO 6560
6609: POP
6610: POP
// if eng then
6611: LD_VAR 0 5
6615: IFFALSE 6752
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6617: LD_VAR 0 5
6621: PPUSH
6622: LD_INT 3
6624: PUSH
6625: LD_INT 54
6627: PUSH
6628: EMPTY
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PPUSH
6635: CALL_OW 72
6639: PUSH
6640: LD_INT 22
6642: PUSH
6643: LD_EXP 8
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 69
6670: AND
6671: IFFALSE 6752
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6673: LD_ADDR_VAR 0 2
6677: PUSH
6678: LD_VAR 0 5
6682: PPUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 54
6688: PUSH
6689: EMPTY
6690: LIST
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PPUSH
6696: CALL_OW 72
6700: PUSH
6701: FOR_IN
6702: IFFALSE 6750
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6704: LD_VAR 0 2
6708: PPUSH
6709: LD_INT 22
6711: PUSH
6712: LD_EXP 8
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: LD_INT 30
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PPUSH
6735: CALL_OW 69
6739: PUSH
6740: LD_INT 1
6742: ARRAY
6743: PPUSH
6744: CALL_OW 120
6748: GO 6701
6750: POP
6751: POP
// end ; p := 1 ;
6752: LD_ADDR_VAR 0 7
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// if b and eng then
6760: LD_VAR 0 6
6764: PUSH
6765: LD_VAR 0 5
6769: AND
6770: IFFALSE 6904
// for j in eng do
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 5
6781: PUSH
6782: FOR_IN
6783: IFFALSE 6902
// begin if IsInUnit ( j ) then
6785: LD_VAR 0 2
6789: PPUSH
6790: CALL_OW 310
6794: IFFALSE 6807
// ComExitBuilding ( j ) else
6796: LD_VAR 0 2
6800: PPUSH
6801: CALL_OW 122
6805: GO 6900
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6807: LD_VAR 0 2
6811: PPUSH
6812: CALL_OW 314
6816: NOT
6817: PUSH
6818: LD_VAR 0 2
6822: PPUSH
6823: CALL_OW 256
6827: PUSH
6828: LD_INT 750
6830: GREATER
6831: AND
6832: IFFALSE 6900
// begin if b > p then
6834: LD_VAR 0 6
6838: PUSH
6839: LD_VAR 0 7
6843: GREATER
6844: IFFALSE 6882
// begin ComRepairBuilding ( j , b [ p ] ) ;
6846: LD_VAR 0 2
6850: PPUSH
6851: LD_VAR 0 6
6855: PUSH
6856: LD_VAR 0 7
6860: ARRAY
6861: PPUSH
6862: CALL_OW 130
// p := p + 1 ;
6866: LD_ADDR_VAR 0 7
6870: PUSH
6871: LD_VAR 0 7
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: ST_TO_ADDR
// end else
6880: GO 6900
// ComRepairBuilding ( j , b [ 1 ] ) ;
6882: LD_VAR 0 2
6886: PPUSH
6887: LD_VAR 0 6
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: CALL_OW 130
// end ; end ;
6900: GO 6782
6902: POP
6903: POP
// if h and sci then
6904: LD_VAR 0 3
6908: PUSH
6909: LD_VAR 0 4
6913: AND
6914: IFFALSE 7053
// for i in h do
6916: LD_ADDR_VAR 0 1
6920: PUSH
6921: LD_VAR 0 3
6925: PUSH
6926: FOR_IN
6927: IFFALSE 7051
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_INT 108
6936: PPUSH
6937: LD_INT 42
6939: PPUSH
6940: CALL_OW 297
6944: PUSH
6945: LD_INT 10
6947: GREATER
6948: IFFALSE 6967
// ComMoveXY ( i , 108 , 42 ) else
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_INT 108
6957: PPUSH
6958: LD_INT 42
6960: PPUSH
6961: CALL_OW 111
6965: GO 7049
// begin for j in sci do
6967: LD_ADDR_VAR 0 2
6971: PUSH
6972: LD_VAR 0 4
6976: PUSH
6977: FOR_IN
6978: IFFALSE 7047
// begin if GetTag ( j ) > 0 then
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 110
6989: PUSH
6990: LD_INT 0
6992: GREATER
6993: IFFALSE 6997
// continue ;
6995: GO 6977
// if IsInUnit ( j ) then
6997: LD_VAR 0 2
7001: PPUSH
7002: CALL_OW 310
7006: IFFALSE 7019
// ComExitBuilding ( j ) else
7008: LD_VAR 0 2
7012: PPUSH
7013: CALL_OW 122
7017: GO 7045
// if not HasTask ( j ) then
7019: LD_VAR 0 2
7023: PPUSH
7024: CALL_OW 314
7028: NOT
7029: IFFALSE 7045
// ComHeal ( j , h ) ;
7031: LD_VAR 0 2
7035: PPUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: CALL_OW 128
// end ;
7045: GO 6977
7047: POP
7048: POP
// end ;
7049: GO 6926
7051: POP
7052: POP
// end ;
7053: PPOPN 7
7055: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
7056: LD_INT 155
7058: PPUSH
7059: LD_INT 88
7061: PPUSH
7062: CALL_OW 428
7066: PUSH
7067: LD_INT 155
7069: PPUSH
7070: LD_INT 88
7072: PPUSH
7073: CALL_OW 428
7077: PUSH
7078: LD_INT 30
7080: EQUAL
7081: PPUSH
7082: CALL_OW 266
7086: AND
7087: IFFALSE 7336
7089: GO 7091
7091: DISABLE
7092: LD_INT 0
7094: PPUSH
7095: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 155
7103: PPUSH
7104: LD_INT 88
7106: PPUSH
7107: CALL_OW 428
7111: PPUSH
7112: CALL_OW 255
7116: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
7117: LD_INT 11550
7119: PUSH
7120: LD_INT 13755
7122: PUSH
7123: LD_INT 13335
7125: PUSH
7126: LD_INT 18340
7128: PUSH
7129: LD_INT 19985
7131: PUSH
7132: LD_INT 9555
7134: PUSH
7135: LD_INT 18935
7137: PUSH
7138: LD_INT 10535
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: PUSH
7151: LD_VAR 0 2
7155: ARRAY
7156: PPUSH
7157: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7161: LD_INT 22
7163: PUSH
7164: LD_EXP 8
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 4
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PPUSH
7187: CALL_OW 69
7191: PUSH
7192: LD_INT 0
7194: EQUAL
7195: IFFALSE 7199
// exit ;
7197: GO 7336
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_EXP 8
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 25
7218: PUSH
7219: LD_INT 4
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PPUSH
7230: CALL_OW 69
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 1
7246: PPUSH
7247: CALL_OW 109
// ComExitBuilding ( sci ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7260: LD_VAR 0 1
7264: PPUSH
7265: LD_INT 126
7267: PPUSH
7268: LD_INT 59
7270: PPUSH
7271: CALL_OW 171
// if p mod 2 = 0 then
7275: LD_VAR 0 2
7279: PUSH
7280: LD_INT 2
7282: MOD
7283: PUSH
7284: LD_INT 0
7286: EQUAL
7287: IFFALSE 7306
// AddComMoveXY ( sci , 148 , 66 ) else
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 148
7296: PPUSH
7297: LD_INT 66
7299: PPUSH
7300: CALL_OW 171
7304: GO 7321
// AddComMoveXY ( sci , 135 , 84 ) ;
7306: LD_VAR 0 1
7310: PPUSH
7311: LD_INT 135
7313: PPUSH
7314: LD_INT 84
7316: PPUSH
7317: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7321: LD_VAR 0 1
7325: PPUSH
7326: LD_INT 155
7328: PPUSH
7329: LD_INT 88
7331: PPUSH
7332: CALL_OW 218
// end ;
7336: PPOPN 2
7338: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7339: LD_INT 33
7341: PPUSH
7342: LD_INT 10
7344: PPUSH
7345: CALL_OW 428
7349: PUSH
7350: LD_INT 33
7352: PPUSH
7353: LD_INT 10
7355: PPUSH
7356: CALL_OW 428
7360: PUSH
7361: LD_INT 30
7363: EQUAL
7364: PPUSH
7365: CALL_OW 266
7369: AND
7370: IFFALSE 7621
7372: GO 7374
7374: DISABLE
7375: LD_INT 0
7377: PPUSH
7378: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7379: LD_ADDR_VAR 0 2
7383: PUSH
7384: LD_INT 33
7386: PPUSH
7387: LD_INT 10
7389: PPUSH
7390: CALL_OW 428
7394: PPUSH
7395: CALL_OW 255
7399: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7400: LD_INT 9450
7402: PUSH
7403: LD_INT 11655
7405: PUSH
7406: LD_INT 7035
7408: PUSH
7409: LD_INT 9940
7411: PUSH
7412: LD_INT 7385
7414: PUSH
7415: LD_INT 11655
7417: PUSH
7418: LD_INT 6335
7420: PUSH
7421: LD_INT 16835
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_VAR 0 2
7438: ARRAY
7439: PPUSH
7440: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7444: LD_INT 22
7446: PUSH
7447: LD_EXP 8
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 25
7458: PUSH
7459: LD_INT 4
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PPUSH
7470: CALL_OW 69
7474: PUSH
7475: LD_INT 0
7477: EQUAL
7478: IFFALSE 7482
// exit ;
7480: GO 7621
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7482: LD_ADDR_VAR 0 1
7486: PUSH
7487: LD_INT 22
7489: PUSH
7490: LD_EXP 8
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 4
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: PUSH
7518: LD_VAR 0 1
7522: ARRAY
7523: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7524: LD_VAR 0 1
7528: PPUSH
7529: LD_INT 1
7531: PPUSH
7532: CALL_OW 109
// ComExitBuilding ( sci ) ;
7536: LD_VAR 0 1
7540: PPUSH
7541: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_INT 67
7552: PPUSH
7553: LD_INT 13
7555: PPUSH
7556: CALL_OW 171
// if p mod 2 = 0 then
7560: LD_VAR 0 2
7564: PUSH
7565: LD_INT 2
7567: MOD
7568: PUSH
7569: LD_INT 0
7571: EQUAL
7572: IFFALSE 7591
// AddComMoveXY ( sci , 37 , 3 ) else
7574: LD_VAR 0 1
7578: PPUSH
7579: LD_INT 37
7581: PPUSH
7582: LD_INT 3
7584: PPUSH
7585: CALL_OW 171
7589: GO 7606
// AddComMoveXY ( sci , 45 , 20 ) ;
7591: LD_VAR 0 1
7595: PPUSH
7596: LD_INT 45
7598: PPUSH
7599: LD_INT 20
7601: PPUSH
7602: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7606: LD_VAR 0 1
7610: PPUSH
7611: LD_INT 33
7613: PPUSH
7614: LD_INT 10
7616: PPUSH
7617: CALL_OW 218
// end ;
7621: PPOPN 2
7623: END
// every 0 0$01 trigger mines_list do var i , p ;
7624: LD_EXP 17
7628: IFFALSE 7854
7630: GO 7632
7632: DISABLE
7633: LD_INT 0
7635: PPUSH
7636: PPUSH
// begin enable ;
7637: ENABLE
// p := 1 ;
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_INT 1
7645: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7646: LD_ADDR_VAR 0 1
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_EXP 17
7660: PUSH
7661: LD_INT 2
7663: DIVREAL
7664: PUSH
7665: FOR_TO
7666: IFFALSE 7852
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7668: LD_EXP 17
7672: PUSH
7673: LD_VAR 0 2
7677: ARRAY
7678: PPUSH
7679: LD_EXP 17
7683: PUSH
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 1
7691: PLUS
7692: ARRAY
7693: PPUSH
7694: CALL_OW 428
7698: PUSH
7699: LD_INT 0
7701: GREATER
7702: IFFALSE 7836
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7704: LD_EXP 17
7708: PUSH
7709: LD_VAR 0 2
7713: ARRAY
7714: PPUSH
7715: LD_EXP 17
7719: PUSH
7720: LD_VAR 0 2
7724: PUSH
7725: LD_INT 1
7727: PLUS
7728: ARRAY
7729: PPUSH
7730: CALL_OW 428
7734: PPUSH
7735: CALL_OW 255
7739: PUSH
7740: LD_EXP 8
7744: NONEQUAL
7745: IFFALSE 7836
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7747: LD_EXP 17
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: PPUSH
7758: LD_EXP 17
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_INT 1
7770: PLUS
7771: ARRAY
7772: PPUSH
7773: LD_EXP 8
7777: PPUSH
7778: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7782: LD_ADDR_EXP 17
7786: PUSH
7787: LD_EXP 17
7791: PPUSH
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 3
7801: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7802: LD_ADDR_EXP 17
7806: PUSH
7807: LD_EXP 17
7811: PPUSH
7812: LD_VAR 0 2
7816: PPUSH
7817: CALL_OW 3
7821: ST_TO_ADDR
// p := p - 2 ;
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_INT 2
7834: MINUS
7835: ST_TO_ADDR
// end ; p := p + 2 ;
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_VAR 0 2
7845: PUSH
7846: LD_INT 2
7848: PLUS
7849: ST_TO_ADDR
// end ;
7850: GO 7665
7852: POP
7853: POP
// end ;
7854: PPOPN 2
7856: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7857: GO 7859
7859: DISABLE
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
7864: PPUSH
7865: PPUSH
7866: PPUSH
// begin enable ;
7867: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7868: LD_ADDR_VAR 0 4
7872: PUSH
7873: LD_INT 50
7875: PUSH
7876: EMPTY
7877: LIST
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_EXP 8
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 25
7893: PUSH
7894: LD_INT 16
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7911: LD_ADDR_VAR 0 5
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_EXP 8
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 30
7933: PUSH
7934: LD_INT 0
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 30
7943: PUSH
7944: LD_INT 1
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_INT 13
7972: PPUSH
7973: CALL_OW 435
7977: ST_TO_ADDR
// if filter and skr then
7978: LD_VAR 0 4
7982: PUSH
7983: LD_VAR 0 3
7987: AND
7988: IFFALSE 8063
// for i = 1 to filter do
7990: LD_ADDR_VAR 0 1
7994: PUSH
7995: DOUBLE
7996: LD_INT 1
7998: DEC
7999: ST_TO_ADDR
8000: LD_VAR 0 4
8004: PUSH
8005: FOR_TO
8006: IFFALSE 8061
// if not HasTask ( filter [ i ] ) then
8008: LD_VAR 0 4
8012: PUSH
8013: LD_VAR 0 1
8017: ARRAY
8018: PPUSH
8019: CALL_OW 314
8023: NOT
8024: IFFALSE 8059
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
8026: LD_VAR 0 4
8030: PUSH
8031: LD_VAR 0 1
8035: ARRAY
8036: PPUSH
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 1
8044: ARRAY
8045: PPUSH
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 2
8053: ARRAY
8054: PPUSH
8055: CALL_OW 117
8059: GO 8005
8061: POP
8062: POP
// end ; end_of_file
8063: PPOPN 5
8065: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
// begin if un in attackers then
8072: LD_VAR 0 1
8076: PUSH
8077: LD_EXP 20
8081: IN
8082: IFFALSE 8100
// attackers := attackers diff un ;
8084: LD_ADDR_EXP 20
8088: PUSH
8089: LD_EXP 20
8093: PUSH
8094: LD_VAR 0 1
8098: DIFF
8099: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
8100: LD_VAR 0 1
8104: PPUSH
8105: CALL_OW 255
8109: PUSH
8110: LD_EXP 8
8114: NONEQUAL
8115: PUSH
8116: LD_VAR 0 1
8120: PPUSH
8121: CALL_OW 255
8125: PUSH
8126: LD_INT 0
8128: GREATER
8129: AND
8130: PUSH
8131: LD_VAR 0 1
8135: PUSH
8136: LD_INT 21
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 69
8150: IN
8151: AND
8152: IFFALSE 8336
// begin if respawning_time_min > 0 0$00 then
8154: LD_EXP 13
8158: PUSH
8159: LD_INT 0
8161: GREATER
8162: IFFALSE 8336
// begin s := GetSide ( un ) ;
8164: LD_ADDR_VAR 0 4
8168: PUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 255
8178: ST_TO_ADDR
// n := GetNation ( un ) ;
8179: LD_ADDR_VAR 0 5
8183: PUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 248
8193: ST_TO_ADDR
// cl := GetClass ( un ) ;
8194: LD_ADDR_VAR 0 3
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 257
8208: ST_TO_ADDR
// wait ( respawning_time_min ) ;
8209: LD_EXP 13
8213: PPUSH
8214: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
8218: LD_EXP 14
8222: PUSH
8223: LD_INT 350
8225: PUSH
8226: LD_OWVAR 1
8230: MUL
8231: PUSH
8232: LD_INT 10
8234: MOD
8235: PUSH
8236: LD_INT 1
8238: PLUS
8239: PUSH
8240: LD_VAR 0 3
8244: MUL
8245: MINUS
8246: PPUSH
8247: CALL_OW 67
// uc_side := s ;
8251: LD_ADDR_OWVAR 20
8255: PUSH
8256: LD_VAR 0 4
8260: ST_TO_ADDR
// uc_nation := n ;
8261: LD_ADDR_OWVAR 21
8265: PUSH
8266: LD_VAR 0 5
8270: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8271: LD_INT 0
8273: PPUSH
8274: LD_VAR 0 3
8278: PPUSH
8279: LD_EXP 11
8283: PUSH
8284: LD_INT 2
8286: MINUS
8287: PPUSH
8288: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8292: CALL_OW 44
8296: PPUSH
8297: LD_INT 17
8299: PUSH
8300: LD_INT 19
8302: PUSH
8303: LD_INT 18
8305: PUSH
8306: LD_INT 19
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: PUSH
8315: LD_VAR 0 3
8319: PUSH
8320: LD_INT 4
8322: MOD
8323: PUSH
8324: LD_INT 1
8326: PLUS
8327: ARRAY
8328: PPUSH
8329: LD_INT 1
8331: PPUSH
8332: CALL_OW 49
// end ; end ; end ;
8336: PPOPN 5
8338: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8339: LD_VAR 0 1
8343: PPUSH
8344: CALL_OW 255
8348: PUSH
8349: LD_EXP 8
8353: EQUAL
8354: PUSH
8355: LD_VAR 0 1
8359: PUSH
8360: LD_INT 33
8362: PUSH
8363: LD_INT 2
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: LD_INT 21
8372: PUSH
8373: LD_INT 2
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: IN
8389: AND
8390: IFFALSE 8513
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8392: LD_OWVAR 3
8396: PUSH
8397: LD_VAR 0 1
8401: DIFF
8402: PPUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 74
8412: PPUSH
8413: CALL_OW 255
8417: PUSH
8418: LD_EXP 8
8422: NONEQUAL
8423: IFFALSE 8513
// begin Wait ( 0 0$1.3 ) ;
8425: LD_INT 46
8427: PPUSH
8428: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 250
8441: PPUSH
8442: LD_VAR 0 1
8446: PPUSH
8447: CALL_OW 251
8451: PPUSH
8452: LD_INT 1
8454: PPUSH
8455: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 250
8468: PPUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: CALL_OW 251
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 250
8495: PPUSH
8496: LD_VAR 0 1
8500: PPUSH
8501: CALL_OW 251
8505: PPUSH
8506: LD_INT 1
8508: PPUSH
8509: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 263
8522: PUSH
8523: LD_INT 2
8525: EQUAL
8526: IFFALSE 8537
// ComUnlink ( un ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 136
// end ;
8537: PPOPN 1
8539: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL_OW 255
8549: PUSH
8550: LD_EXP 8
8554: EQUAL
8555: IFFALSE 8586
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8557: LD_ADDR_EXP 20
8561: PUSH
8562: LD_EXP 20
8566: PPUSH
8567: LD_EXP 20
8571: PUSH
8572: LD_INT 1
8574: PLUS
8575: PPUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 2
8585: ST_TO_ADDR
// end ;
8586: PPOPN 2
8588: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 255
8602: PUSH
8603: LD_EXP 8
8607: EQUAL
8608: PUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 266
8618: PUSH
8619: LD_INT 32
8621: EQUAL
8622: AND
8623: IFFALSE 8721
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8625: LD_ADDR_VAR 0 4
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_EXP 8
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 30
8644: PUSH
8645: LD_INT 5
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 69
8660: ST_TO_ADDR
// for i in arm do
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: LD_VAR 0 4
8670: PUSH
8671: FOR_IN
8672: IFFALSE 8719
// if UnitsInside ( i ) < 6 then
8674: LD_VAR 0 3
8678: PPUSH
8679: CALL_OW 313
8683: PUSH
8684: LD_INT 6
8686: LESS
8687: IFFALSE 8717
// begin ComEnterUnit ( un , i ) ;
8689: LD_VAR 0 2
8693: PPUSH
8694: LD_VAR 0 3
8698: PPUSH
8699: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8703: LD_VAR 0 2
8707: PPUSH
8708: LD_INT 8
8710: PPUSH
8711: CALL_OW 183
// break ;
8715: GO 8719
// end ;
8717: GO 8671
8719: POP
8720: POP
// end ; end ; end_of_file
8721: PPOPN 4
8723: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8724: LD_VAR 0 1
8728: PUSH
8729: LD_INT 200
8731: DOUBLE
8732: GREATEREQUAL
8733: IFFALSE 8741
8735: LD_INT 299
8737: DOUBLE
8738: LESSEQUAL
8739: IFTRUE 8743
8741: GO 8775
8743: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8744: LD_VAR 0 1
8748: PPUSH
8749: LD_VAR 0 2
8753: PPUSH
8754: LD_VAR 0 3
8758: PPUSH
8759: LD_VAR 0 4
8763: PPUSH
8764: LD_VAR 0 5
8768: PPUSH
8769: CALL 59358 0 5
8773: GO 8852
8775: LD_INT 300
8777: DOUBLE
8778: GREATEREQUAL
8779: IFFALSE 8787
8781: LD_INT 399
8783: DOUBLE
8784: LESSEQUAL
8785: IFTRUE 8789
8787: GO 8851
8789: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8790: LD_VAR 0 1
8794: PPUSH
8795: LD_VAR 0 2
8799: PPUSH
8800: LD_VAR 0 3
8804: PPUSH
8805: LD_VAR 0 4
8809: PPUSH
8810: LD_VAR 0 5
8814: PPUSH
8815: LD_VAR 0 6
8819: PPUSH
8820: LD_VAR 0 7
8824: PPUSH
8825: LD_VAR 0 8
8829: PPUSH
8830: LD_VAR 0 9
8834: PPUSH
8835: LD_VAR 0 10
8839: PPUSH
8840: LD_VAR 0 11
8844: PPUSH
8845: CALL 57246 0 11
8849: GO 8852
8851: POP
// end ; end_of_file
8852: PPOPN 11
8854: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8855: LD_INT 0
8857: PPUSH
8858: PPUSH
// if exist_mode then
8859: LD_VAR 0 2
8863: IFFALSE 8888
// unit := CreateCharacter ( prefix & ident ) else
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_VAR 0 3
8874: PUSH
8875: LD_VAR 0 1
8879: STR
8880: PPUSH
8881: CALL_OW 34
8885: ST_TO_ADDR
8886: GO 8903
// unit := NewCharacter ( ident ) ;
8888: LD_ADDR_VAR 0 5
8892: PUSH
8893: LD_VAR 0 1
8897: PPUSH
8898: CALL_OW 25
8902: ST_TO_ADDR
// result := unit ;
8903: LD_ADDR_VAR 0 4
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// end ;
8913: LD_VAR 0 4
8917: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8918: LD_INT 0
8920: PPUSH
8921: PPUSH
// if not side or not nation then
8922: LD_VAR 0 1
8926: NOT
8927: PUSH
8928: LD_VAR 0 2
8932: NOT
8933: OR
8934: IFFALSE 8938
// exit ;
8936: GO 9702
// case nation of nation_american :
8938: LD_VAR 0 2
8942: PUSH
8943: LD_INT 1
8945: DOUBLE
8946: EQUAL
8947: IFTRUE 8951
8949: GO 9165
8951: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8952: LD_ADDR_VAR 0 4
8956: PUSH
8957: LD_INT 35
8959: PUSH
8960: LD_INT 45
8962: PUSH
8963: LD_INT 46
8965: PUSH
8966: LD_INT 47
8968: PUSH
8969: LD_INT 82
8971: PUSH
8972: LD_INT 83
8974: PUSH
8975: LD_INT 84
8977: PUSH
8978: LD_INT 85
8980: PUSH
8981: LD_INT 86
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: LD_INT 6
8992: PUSH
8993: LD_INT 15
8995: PUSH
8996: LD_INT 16
8998: PUSH
8999: LD_INT 7
9001: PUSH
9002: LD_INT 12
9004: PUSH
9005: LD_INT 13
9007: PUSH
9008: LD_INT 10
9010: PUSH
9011: LD_INT 14
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 25
9025: PUSH
9026: LD_INT 32
9028: PUSH
9029: LD_INT 27
9031: PUSH
9032: LD_INT 36
9034: PUSH
9035: LD_INT 69
9037: PUSH
9038: LD_INT 39
9040: PUSH
9041: LD_INT 34
9043: PUSH
9044: LD_INT 40
9046: PUSH
9047: LD_INT 48
9049: PUSH
9050: LD_INT 49
9052: PUSH
9053: LD_INT 50
9055: PUSH
9056: LD_INT 51
9058: PUSH
9059: LD_INT 52
9061: PUSH
9062: LD_INT 53
9064: PUSH
9065: LD_INT 54
9067: PUSH
9068: LD_INT 55
9070: PUSH
9071: LD_INT 56
9073: PUSH
9074: LD_INT 57
9076: PUSH
9077: LD_INT 58
9079: PUSH
9080: LD_INT 59
9082: PUSH
9083: LD_INT 60
9085: PUSH
9086: LD_INT 61
9088: PUSH
9089: LD_INT 62
9091: PUSH
9092: LD_INT 80
9094: PUSH
9095: LD_INT 82
9097: PUSH
9098: LD_INT 83
9100: PUSH
9101: LD_INT 84
9103: PUSH
9104: LD_INT 85
9106: PUSH
9107: LD_INT 86
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: ST_TO_ADDR
9163: GO 9626
9165: LD_INT 2
9167: DOUBLE
9168: EQUAL
9169: IFTRUE 9173
9171: GO 9395
9173: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
9174: LD_ADDR_VAR 0 4
9178: PUSH
9179: LD_INT 35
9181: PUSH
9182: LD_INT 45
9184: PUSH
9185: LD_INT 46
9187: PUSH
9188: LD_INT 47
9190: PUSH
9191: LD_INT 82
9193: PUSH
9194: LD_INT 83
9196: PUSH
9197: LD_INT 84
9199: PUSH
9200: LD_INT 85
9202: PUSH
9203: LD_INT 87
9205: PUSH
9206: LD_INT 70
9208: PUSH
9209: LD_INT 1
9211: PUSH
9212: LD_INT 11
9214: PUSH
9215: LD_INT 3
9217: PUSH
9218: LD_INT 4
9220: PUSH
9221: LD_INT 5
9223: PUSH
9224: LD_INT 6
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 18
9232: PUSH
9233: LD_INT 7
9235: PUSH
9236: LD_INT 17
9238: PUSH
9239: LD_INT 8
9241: PUSH
9242: LD_INT 20
9244: PUSH
9245: LD_INT 21
9247: PUSH
9248: LD_INT 22
9250: PUSH
9251: LD_INT 72
9253: PUSH
9254: LD_INT 26
9256: PUSH
9257: LD_INT 69
9259: PUSH
9260: LD_INT 39
9262: PUSH
9263: LD_INT 40
9265: PUSH
9266: LD_INT 41
9268: PUSH
9269: LD_INT 42
9271: PUSH
9272: LD_INT 43
9274: PUSH
9275: LD_INT 48
9277: PUSH
9278: LD_INT 49
9280: PUSH
9281: LD_INT 50
9283: PUSH
9284: LD_INT 51
9286: PUSH
9287: LD_INT 52
9289: PUSH
9290: LD_INT 53
9292: PUSH
9293: LD_INT 54
9295: PUSH
9296: LD_INT 55
9298: PUSH
9299: LD_INT 56
9301: PUSH
9302: LD_INT 60
9304: PUSH
9305: LD_INT 61
9307: PUSH
9308: LD_INT 62
9310: PUSH
9311: LD_INT 66
9313: PUSH
9314: LD_INT 67
9316: PUSH
9317: LD_INT 68
9319: PUSH
9320: LD_INT 81
9322: PUSH
9323: LD_INT 82
9325: PUSH
9326: LD_INT 83
9328: PUSH
9329: LD_INT 84
9331: PUSH
9332: LD_INT 85
9334: PUSH
9335: LD_INT 87
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: ST_TO_ADDR
9393: GO 9626
9395: LD_INT 3
9397: DOUBLE
9398: EQUAL
9399: IFTRUE 9403
9401: GO 9625
9403: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9404: LD_ADDR_VAR 0 4
9408: PUSH
9409: LD_INT 46
9411: PUSH
9412: LD_INT 47
9414: PUSH
9415: LD_INT 1
9417: PUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 82
9423: PUSH
9424: LD_INT 83
9426: PUSH
9427: LD_INT 84
9429: PUSH
9430: LD_INT 85
9432: PUSH
9433: LD_INT 86
9435: PUSH
9436: LD_INT 11
9438: PUSH
9439: LD_INT 9
9441: PUSH
9442: LD_INT 20
9444: PUSH
9445: LD_INT 19
9447: PUSH
9448: LD_INT 21
9450: PUSH
9451: LD_INT 24
9453: PUSH
9454: LD_INT 22
9456: PUSH
9457: LD_INT 25
9459: PUSH
9460: LD_INT 28
9462: PUSH
9463: LD_INT 29
9465: PUSH
9466: LD_INT 30
9468: PUSH
9469: LD_INT 31
9471: PUSH
9472: LD_INT 37
9474: PUSH
9475: LD_INT 38
9477: PUSH
9478: LD_INT 32
9480: PUSH
9481: LD_INT 27
9483: PUSH
9484: LD_INT 33
9486: PUSH
9487: LD_INT 69
9489: PUSH
9490: LD_INT 39
9492: PUSH
9493: LD_INT 34
9495: PUSH
9496: LD_INT 40
9498: PUSH
9499: LD_INT 71
9501: PUSH
9502: LD_INT 23
9504: PUSH
9505: LD_INT 44
9507: PUSH
9508: LD_INT 48
9510: PUSH
9511: LD_INT 49
9513: PUSH
9514: LD_INT 50
9516: PUSH
9517: LD_INT 51
9519: PUSH
9520: LD_INT 52
9522: PUSH
9523: LD_INT 53
9525: PUSH
9526: LD_INT 54
9528: PUSH
9529: LD_INT 55
9531: PUSH
9532: LD_INT 56
9534: PUSH
9535: LD_INT 57
9537: PUSH
9538: LD_INT 58
9540: PUSH
9541: LD_INT 59
9543: PUSH
9544: LD_INT 63
9546: PUSH
9547: LD_INT 64
9549: PUSH
9550: LD_INT 65
9552: PUSH
9553: LD_INT 82
9555: PUSH
9556: LD_INT 83
9558: PUSH
9559: LD_INT 84
9561: PUSH
9562: LD_INT 85
9564: PUSH
9565: LD_INT 86
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
9623: GO 9626
9625: POP
// if state > - 1 and state < 3 then
9626: LD_VAR 0 3
9630: PUSH
9631: LD_INT 1
9633: NEG
9634: GREATER
9635: PUSH
9636: LD_VAR 0 3
9640: PUSH
9641: LD_INT 3
9643: LESS
9644: AND
9645: IFFALSE 9702
// for i in result do
9647: LD_ADDR_VAR 0 5
9651: PUSH
9652: LD_VAR 0 4
9656: PUSH
9657: FOR_IN
9658: IFFALSE 9700
// if GetTech ( i , side ) <> state then
9660: LD_VAR 0 5
9664: PPUSH
9665: LD_VAR 0 1
9669: PPUSH
9670: CALL_OW 321
9674: PUSH
9675: LD_VAR 0 3
9679: NONEQUAL
9680: IFFALSE 9698
// result := result diff i ;
9682: LD_ADDR_VAR 0 4
9686: PUSH
9687: LD_VAR 0 4
9691: PUSH
9692: LD_VAR 0 5
9696: DIFF
9697: ST_TO_ADDR
9698: GO 9657
9700: POP
9701: POP
// end ;
9702: LD_VAR 0 4
9706: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9707: LD_INT 0
9709: PPUSH
9710: PPUSH
9711: PPUSH
// result := true ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_INT 1
9719: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9720: LD_ADDR_VAR 0 5
9724: PUSH
9725: LD_VAR 0 2
9729: PPUSH
9730: CALL_OW 480
9734: ST_TO_ADDR
// if not tmp then
9735: LD_VAR 0 5
9739: NOT
9740: IFFALSE 9744
// exit ;
9742: GO 9793
// for i in tmp do
9744: LD_ADDR_VAR 0 4
9748: PUSH
9749: LD_VAR 0 5
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9791
// if GetTech ( i , side ) <> state_researched then
9757: LD_VAR 0 4
9761: PPUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 321
9771: PUSH
9772: LD_INT 2
9774: NONEQUAL
9775: IFFALSE 9789
// begin result := false ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_INT 0
9784: ST_TO_ADDR
// exit ;
9785: POP
9786: POP
9787: GO 9793
// end ;
9789: GO 9754
9791: POP
9792: POP
// end ;
9793: LD_VAR 0 3
9797: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9798: LD_INT 0
9800: PPUSH
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9813: LD_VAR 0 1
9817: NOT
9818: PUSH
9819: LD_VAR 0 1
9823: PPUSH
9824: CALL_OW 257
9828: PUSH
9829: LD_INT 9
9831: NONEQUAL
9832: OR
9833: IFFALSE 9837
// exit ;
9835: GO 10410
// side := GetSide ( unit ) ;
9837: LD_ADDR_VAR 0 9
9841: PUSH
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL_OW 255
9851: ST_TO_ADDR
// tech_space := tech_spacanom ;
9852: LD_ADDR_VAR 0 12
9856: PUSH
9857: LD_INT 29
9859: ST_TO_ADDR
// tech_time := tech_taurad ;
9860: LD_ADDR_VAR 0 13
9864: PUSH
9865: LD_INT 28
9867: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9868: LD_ADDR_VAR 0 11
9872: PUSH
9873: LD_VAR 0 1
9877: PPUSH
9878: CALL_OW 310
9882: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9883: LD_VAR 0 11
9887: PPUSH
9888: CALL_OW 247
9892: PUSH
9893: LD_INT 2
9895: EQUAL
9896: IFFALSE 9900
// exit ;
9898: GO 10410
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9900: LD_ADDR_VAR 0 8
9904: PUSH
9905: LD_INT 81
9907: PUSH
9908: LD_VAR 0 9
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: LD_INT 21
9922: PUSH
9923: LD_INT 3
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PPUSH
9938: CALL_OW 69
9942: ST_TO_ADDR
// if not tmp then
9943: LD_VAR 0 8
9947: NOT
9948: IFFALSE 9952
// exit ;
9950: GO 10410
// if in_unit then
9952: LD_VAR 0 11
9956: IFFALSE 9980
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9958: LD_ADDR_VAR 0 10
9962: PUSH
9963: LD_VAR 0 8
9967: PPUSH
9968: LD_VAR 0 11
9972: PPUSH
9973: CALL_OW 74
9977: ST_TO_ADDR
9978: GO 10000
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9980: LD_ADDR_VAR 0 10
9984: PUSH
9985: LD_VAR 0 8
9989: PPUSH
9990: LD_VAR 0 1
9994: PPUSH
9995: CALL_OW 74
9999: ST_TO_ADDR
// if not enemy then
10000: LD_VAR 0 10
10004: NOT
10005: IFFALSE 10009
// exit ;
10007: GO 10410
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10009: LD_VAR 0 11
10013: PUSH
10014: LD_VAR 0 11
10018: PPUSH
10019: LD_VAR 0 10
10023: PPUSH
10024: CALL_OW 296
10028: PUSH
10029: LD_INT 13
10031: GREATER
10032: AND
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: LD_VAR 0 10
10043: PPUSH
10044: CALL_OW 296
10048: PUSH
10049: LD_INT 12
10051: GREATER
10052: OR
10053: IFFALSE 10057
// exit ;
10055: GO 10410
// missile := [ 1 ] ;
10057: LD_ADDR_VAR 0 14
10061: PUSH
10062: LD_INT 1
10064: PUSH
10065: EMPTY
10066: LIST
10067: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10068: LD_VAR 0 9
10072: PPUSH
10073: LD_VAR 0 12
10077: PPUSH
10078: CALL_OW 325
10082: IFFALSE 10111
// missile := Insert ( missile , missile + 1 , 2 ) ;
10084: LD_ADDR_VAR 0 14
10088: PUSH
10089: LD_VAR 0 14
10093: PPUSH
10094: LD_VAR 0 14
10098: PUSH
10099: LD_INT 1
10101: PLUS
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: CALL_OW 2
10110: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10111: LD_VAR 0 9
10115: PPUSH
10116: LD_VAR 0 13
10120: PPUSH
10121: CALL_OW 325
10125: PUSH
10126: LD_VAR 0 10
10130: PPUSH
10131: CALL_OW 255
10135: PPUSH
10136: LD_VAR 0 13
10140: PPUSH
10141: CALL_OW 325
10145: NOT
10146: AND
10147: IFFALSE 10176
// missile := Insert ( missile , missile + 1 , 3 ) ;
10149: LD_ADDR_VAR 0 14
10153: PUSH
10154: LD_VAR 0 14
10158: PPUSH
10159: LD_VAR 0 14
10163: PUSH
10164: LD_INT 1
10166: PLUS
10167: PPUSH
10168: LD_INT 3
10170: PPUSH
10171: CALL_OW 2
10175: ST_TO_ADDR
// if missile < 2 then
10176: LD_VAR 0 14
10180: PUSH
10181: LD_INT 2
10183: LESS
10184: IFFALSE 10188
// exit ;
10186: GO 10410
// x := GetX ( enemy ) ;
10188: LD_ADDR_VAR 0 4
10192: PUSH
10193: LD_VAR 0 10
10197: PPUSH
10198: CALL_OW 250
10202: ST_TO_ADDR
// y := GetY ( enemy ) ;
10203: LD_ADDR_VAR 0 5
10207: PUSH
10208: LD_VAR 0 10
10212: PPUSH
10213: CALL_OW 251
10217: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10218: LD_ADDR_VAR 0 6
10222: PUSH
10223: LD_VAR 0 4
10227: PUSH
10228: LD_INT 1
10230: NEG
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 12
10239: PLUS
10240: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_VAR 0 5
10250: PUSH
10251: LD_INT 1
10253: NEG
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 12
10262: PLUS
10263: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10264: LD_VAR 0 6
10268: PPUSH
10269: LD_VAR 0 7
10273: PPUSH
10274: CALL_OW 488
10278: NOT
10279: IFFALSE 10301
// begin _x := x ;
10281: LD_ADDR_VAR 0 6
10285: PUSH
10286: LD_VAR 0 4
10290: ST_TO_ADDR
// _y := y ;
10291: LD_ADDR_VAR 0 7
10295: PUSH
10296: LD_VAR 0 5
10300: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10301: LD_ADDR_VAR 0 3
10305: PUSH
10306: LD_INT 1
10308: PPUSH
10309: LD_VAR 0 14
10313: PPUSH
10314: CALL_OW 12
10318: ST_TO_ADDR
// case i of 1 :
10319: LD_VAR 0 3
10323: PUSH
10324: LD_INT 1
10326: DOUBLE
10327: EQUAL
10328: IFTRUE 10332
10330: GO 10349
10332: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10333: LD_VAR 0 1
10337: PPUSH
10338: LD_VAR 0 10
10342: PPUSH
10343: CALL_OW 115
10347: GO 10410
10349: LD_INT 2
10351: DOUBLE
10352: EQUAL
10353: IFTRUE 10357
10355: GO 10379
10357: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10358: LD_VAR 0 1
10362: PPUSH
10363: LD_VAR 0 6
10367: PPUSH
10368: LD_VAR 0 7
10372: PPUSH
10373: CALL_OW 153
10377: GO 10410
10379: LD_INT 3
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10409
10387: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10388: LD_VAR 0 1
10392: PPUSH
10393: LD_VAR 0 6
10397: PPUSH
10398: LD_VAR 0 7
10402: PPUSH
10403: CALL_OW 154
10407: GO 10410
10409: POP
// end ;
10410: LD_VAR 0 2
10414: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
10420: PPUSH
10421: PPUSH
10422: PPUSH
// if not unit or not building then
10423: LD_VAR 0 1
10427: NOT
10428: PUSH
10429: LD_VAR 0 2
10433: NOT
10434: OR
10435: IFFALSE 10439
// exit ;
10437: GO 10597
// x := GetX ( building ) ;
10439: LD_ADDR_VAR 0 5
10443: PUSH
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 250
10453: ST_TO_ADDR
// y := GetY ( building ) ;
10454: LD_ADDR_VAR 0 6
10458: PUSH
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 251
10468: ST_TO_ADDR
// for i = 0 to 5 do
10469: LD_ADDR_VAR 0 4
10473: PUSH
10474: DOUBLE
10475: LD_INT 0
10477: DEC
10478: ST_TO_ADDR
10479: LD_INT 5
10481: PUSH
10482: FOR_TO
10483: IFFALSE 10595
// begin _x := ShiftX ( x , i , 3 ) ;
10485: LD_ADDR_VAR 0 7
10489: PUSH
10490: LD_VAR 0 5
10494: PPUSH
10495: LD_VAR 0 4
10499: PPUSH
10500: LD_INT 3
10502: PPUSH
10503: CALL_OW 272
10507: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10508: LD_ADDR_VAR 0 8
10512: PUSH
10513: LD_VAR 0 6
10517: PPUSH
10518: LD_VAR 0 4
10522: PPUSH
10523: LD_INT 3
10525: PPUSH
10526: CALL_OW 273
10530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10531: LD_VAR 0 7
10535: PPUSH
10536: LD_VAR 0 8
10540: PPUSH
10541: CALL_OW 488
10545: NOT
10546: IFFALSE 10550
// continue ;
10548: GO 10482
// if HexInfo ( _x , _y ) = 0 then
10550: LD_VAR 0 7
10554: PPUSH
10555: LD_VAR 0 8
10559: PPUSH
10560: CALL_OW 428
10564: PUSH
10565: LD_INT 0
10567: EQUAL
10568: IFFALSE 10593
// begin ComMoveXY ( unit , _x , _y ) ;
10570: LD_VAR 0 1
10574: PPUSH
10575: LD_VAR 0 7
10579: PPUSH
10580: LD_VAR 0 8
10584: PPUSH
10585: CALL_OW 111
// exit ;
10589: POP
10590: POP
10591: GO 10597
// end ; end ;
10593: GO 10482
10595: POP
10596: POP
// end ;
10597: LD_VAR 0 3
10601: RET
// export function ScanBase ( side , base_area ) ; begin
10602: LD_INT 0
10604: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: LD_VAR 0 2
10614: PPUSH
10615: LD_INT 81
10617: PUSH
10618: LD_VAR 0 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PPUSH
10627: CALL_OW 70
10631: ST_TO_ADDR
// end ;
10632: LD_VAR 0 3
10636: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10637: LD_INT 0
10639: PPUSH
10640: PPUSH
10641: PPUSH
10642: PPUSH
// result := false ;
10643: LD_ADDR_VAR 0 2
10647: PUSH
10648: LD_INT 0
10650: ST_TO_ADDR
// side := GetSide ( unit ) ;
10651: LD_ADDR_VAR 0 3
10655: PUSH
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 255
10665: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10666: LD_ADDR_VAR 0 4
10670: PUSH
10671: LD_VAR 0 1
10675: PPUSH
10676: CALL_OW 248
10680: ST_TO_ADDR
// case nat of 1 :
10681: LD_VAR 0 4
10685: PUSH
10686: LD_INT 1
10688: DOUBLE
10689: EQUAL
10690: IFTRUE 10694
10692: GO 10705
10694: POP
// tech := tech_lassight ; 2 :
10695: LD_ADDR_VAR 0 5
10699: PUSH
10700: LD_INT 12
10702: ST_TO_ADDR
10703: GO 10744
10705: LD_INT 2
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10724
10713: POP
// tech := tech_mortar ; 3 :
10714: LD_ADDR_VAR 0 5
10718: PUSH
10719: LD_INT 41
10721: ST_TO_ADDR
10722: GO 10744
10724: LD_INT 3
10726: DOUBLE
10727: EQUAL
10728: IFTRUE 10732
10730: GO 10743
10732: POP
// tech := tech_bazooka ; end ;
10733: LD_ADDR_VAR 0 5
10737: PUSH
10738: LD_INT 44
10740: ST_TO_ADDR
10741: GO 10744
10743: POP
// if Researched ( side , tech ) then
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_VAR 0 5
10753: PPUSH
10754: CALL_OW 325
10758: IFFALSE 10785
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10760: LD_ADDR_VAR 0 2
10764: PUSH
10765: LD_INT 5
10767: PUSH
10768: LD_INT 8
10770: PUSH
10771: LD_INT 9
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: LD_VAR 0 4
10783: ARRAY
10784: ST_TO_ADDR
// end ;
10785: LD_VAR 0 2
10789: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
// if not mines then
10795: LD_VAR 0 2
10799: NOT
10800: IFFALSE 10804
// exit ;
10802: GO 10948
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10804: LD_ADDR_VAR 0 5
10808: PUSH
10809: LD_INT 81
10811: PUSH
10812: LD_VAR 0 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 3
10823: PUSH
10824: LD_INT 21
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: ST_TO_ADDR
// for i in mines do
10847: LD_ADDR_VAR 0 4
10851: PUSH
10852: LD_VAR 0 2
10856: PUSH
10857: FOR_IN
10858: IFFALSE 10946
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10860: LD_VAR 0 4
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PPUSH
10869: LD_VAR 0 4
10873: PUSH
10874: LD_INT 2
10876: ARRAY
10877: PPUSH
10878: CALL_OW 458
10882: NOT
10883: IFFALSE 10887
// continue ;
10885: GO 10857
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10887: LD_VAR 0 4
10891: PUSH
10892: LD_INT 1
10894: ARRAY
10895: PPUSH
10896: LD_VAR 0 4
10900: PUSH
10901: LD_INT 2
10903: ARRAY
10904: PPUSH
10905: CALL_OW 428
10909: PUSH
10910: LD_VAR 0 5
10914: IN
10915: IFFALSE 10944
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10917: LD_VAR 0 4
10921: PUSH
10922: LD_INT 1
10924: ARRAY
10925: PPUSH
10926: LD_VAR 0 4
10930: PUSH
10931: LD_INT 2
10933: ARRAY
10934: PPUSH
10935: LD_VAR 0 1
10939: PPUSH
10940: CALL_OW 456
// end ;
10944: GO 10857
10946: POP
10947: POP
// end ;
10948: LD_VAR 0 3
10952: RET
// export function Count ( array ) ; var i ; begin
10953: LD_INT 0
10955: PPUSH
10956: PPUSH
// result := 0 ;
10957: LD_ADDR_VAR 0 2
10961: PUSH
10962: LD_INT 0
10964: ST_TO_ADDR
// for i in array do
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_VAR 0 1
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11000
// if i then
10978: LD_VAR 0 3
10982: IFFALSE 10998
// result := result + 1 ;
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_INT 1
10996: PLUS
10997: ST_TO_ADDR
10998: GO 10975
11000: POP
11001: POP
// end ;
11002: LD_VAR 0 2
11006: RET
// export function IsEmpty ( building ) ; begin
11007: LD_INT 0
11009: PPUSH
// if not building then
11010: LD_VAR 0 1
11014: NOT
11015: IFFALSE 11019
// exit ;
11017: GO 11062
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11019: LD_ADDR_VAR 0 2
11023: PUSH
11024: LD_VAR 0 1
11028: PUSH
11029: LD_INT 22
11031: PUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 255
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 58
11048: PUSH
11049: EMPTY
11050: LIST
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PPUSH
11056: CALL_OW 69
11060: IN
11061: ST_TO_ADDR
// end ;
11062: LD_VAR 0 2
11066: RET
// export function IsNotFull ( building ) ; begin
11067: LD_INT 0
11069: PPUSH
// if not building then
11070: LD_VAR 0 1
11074: NOT
11075: IFFALSE 11079
// exit ;
11077: GO 11098
// result := UnitsInside ( building ) < 6 ;
11079: LD_ADDR_VAR 0 2
11083: PUSH
11084: LD_VAR 0 1
11088: PPUSH
11089: CALL_OW 313
11093: PUSH
11094: LD_INT 6
11096: LESS
11097: ST_TO_ADDR
// end ;
11098: LD_VAR 0 2
11102: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11103: LD_INT 0
11105: PPUSH
11106: PPUSH
11107: PPUSH
11108: PPUSH
// tmp := [ ] ;
11109: LD_ADDR_VAR 0 3
11113: PUSH
11114: EMPTY
11115: ST_TO_ADDR
// list := [ ] ;
11116: LD_ADDR_VAR 0 5
11120: PUSH
11121: EMPTY
11122: ST_TO_ADDR
// for i = 16 to 25 do
11123: LD_ADDR_VAR 0 4
11127: PUSH
11128: DOUBLE
11129: LD_INT 16
11131: DEC
11132: ST_TO_ADDR
11133: LD_INT 25
11135: PUSH
11136: FOR_TO
11137: IFFALSE 11210
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11139: LD_ADDR_VAR 0 3
11143: PUSH
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 22
11151: PUSH
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 255
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 91
11168: PUSH
11169: LD_VAR 0 1
11173: PUSH
11174: LD_INT 6
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_VAR 0 4
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: PUSH
11199: EMPTY
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: ADD
11207: ST_TO_ADDR
11208: GO 11136
11210: POP
11211: POP
// for i = 1 to tmp do
11212: LD_ADDR_VAR 0 4
11216: PUSH
11217: DOUBLE
11218: LD_INT 1
11220: DEC
11221: ST_TO_ADDR
11222: LD_VAR 0 3
11226: PUSH
11227: FOR_TO
11228: IFFALSE 11316
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11230: LD_ADDR_VAR 0 5
11234: PUSH
11235: LD_VAR 0 5
11239: PUSH
11240: LD_VAR 0 3
11244: PUSH
11245: LD_VAR 0 4
11249: ARRAY
11250: PPUSH
11251: CALL_OW 266
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_VAR 0 4
11265: ARRAY
11266: PPUSH
11267: CALL_OW 250
11271: PUSH
11272: LD_VAR 0 3
11276: PUSH
11277: LD_VAR 0 4
11281: ARRAY
11282: PPUSH
11283: CALL_OW 251
11287: PUSH
11288: LD_VAR 0 3
11292: PUSH
11293: LD_VAR 0 4
11297: ARRAY
11298: PPUSH
11299: CALL_OW 254
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: ADD
11313: ST_TO_ADDR
11314: GO 11227
11316: POP
11317: POP
// result := list ;
11318: LD_ADDR_VAR 0 2
11322: PUSH
11323: LD_VAR 0 5
11327: ST_TO_ADDR
// end ;
11328: LD_VAR 0 2
11332: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11333: LD_INT 0
11335: PPUSH
11336: PPUSH
11337: PPUSH
11338: PPUSH
11339: PPUSH
11340: PPUSH
11341: PPUSH
// if not factory then
11342: LD_VAR 0 1
11346: NOT
11347: IFFALSE 11351
// exit ;
11349: GO 11944
// if control = control_apeman then
11351: LD_VAR 0 4
11355: PUSH
11356: LD_INT 5
11358: EQUAL
11359: IFFALSE 11468
// begin tmp := UnitsInside ( factory ) ;
11361: LD_ADDR_VAR 0 8
11365: PUSH
11366: LD_VAR 0 1
11370: PPUSH
11371: CALL_OW 313
11375: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11376: LD_VAR 0 8
11380: PPUSH
11381: LD_INT 25
11383: PUSH
11384: LD_INT 12
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PPUSH
11391: CALL_OW 72
11395: NOT
11396: IFFALSE 11406
// control := control_manual ;
11398: LD_ADDR_VAR 0 4
11402: PUSH
11403: LD_INT 1
11405: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11406: LD_ADDR_VAR 0 8
11410: PUSH
11411: LD_VAR 0 1
11415: PPUSH
11416: CALL 11103 0 1
11420: ST_TO_ADDR
// if tmp then
11421: LD_VAR 0 8
11425: IFFALSE 11468
// begin for i in tmp do
11427: LD_ADDR_VAR 0 7
11431: PUSH
11432: LD_VAR 0 8
11436: PUSH
11437: FOR_IN
11438: IFFALSE 11466
// if i [ 1 ] = b_ext_radio then
11440: LD_VAR 0 7
11444: PUSH
11445: LD_INT 1
11447: ARRAY
11448: PUSH
11449: LD_INT 22
11451: EQUAL
11452: IFFALSE 11464
// begin control := control_remote ;
11454: LD_ADDR_VAR 0 4
11458: PUSH
11459: LD_INT 2
11461: ST_TO_ADDR
// break ;
11462: GO 11466
// end ;
11464: GO 11437
11466: POP
11467: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11468: LD_VAR 0 1
11472: PPUSH
11473: LD_VAR 0 2
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_VAR 0 4
11487: PPUSH
11488: LD_VAR 0 5
11492: PPUSH
11493: CALL_OW 448
11497: IFFALSE 11532
// begin result := [ chassis , engine , control , weapon ] ;
11499: LD_ADDR_VAR 0 6
11503: PUSH
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 3
11513: PUSH
11514: LD_VAR 0 4
11518: PUSH
11519: LD_VAR 0 5
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// exit ;
11530: GO 11944
// end ; _chassis := AvailableChassisList ( factory ) ;
11532: LD_ADDR_VAR 0 9
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 475
11546: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11547: LD_ADDR_VAR 0 11
11551: PUSH
11552: LD_VAR 0 1
11556: PPUSH
11557: CALL_OW 476
11561: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11562: LD_ADDR_VAR 0 12
11566: PUSH
11567: LD_VAR 0 1
11571: PPUSH
11572: CALL_OW 477
11576: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11577: LD_ADDR_VAR 0 10
11581: PUSH
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 478
11591: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11592: LD_VAR 0 9
11596: NOT
11597: PUSH
11598: LD_VAR 0 11
11602: NOT
11603: OR
11604: PUSH
11605: LD_VAR 0 12
11609: NOT
11610: OR
11611: PUSH
11612: LD_VAR 0 10
11616: NOT
11617: OR
11618: IFFALSE 11653
// begin result := [ chassis , engine , control , weapon ] ;
11620: LD_ADDR_VAR 0 6
11624: PUSH
11625: LD_VAR 0 2
11629: PUSH
11630: LD_VAR 0 3
11634: PUSH
11635: LD_VAR 0 4
11639: PUSH
11640: LD_VAR 0 5
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: ST_TO_ADDR
// exit ;
11651: GO 11944
// end ; if not chassis in _chassis then
11653: LD_VAR 0 2
11657: PUSH
11658: LD_VAR 0 9
11662: IN
11663: NOT
11664: IFFALSE 11690
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11666: LD_ADDR_VAR 0 2
11670: PUSH
11671: LD_VAR 0 9
11675: PUSH
11676: LD_INT 1
11678: PPUSH
11679: LD_VAR 0 9
11683: PPUSH
11684: CALL_OW 12
11688: ARRAY
11689: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11690: LD_VAR 0 2
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: CALL 11949 0 2
11704: NOT
11705: IFFALSE 11764
// repeat engine := _engine [ 1 ] ;
11707: LD_ADDR_VAR 0 3
11711: PUSH
11712: LD_VAR 0 11
11716: PUSH
11717: LD_INT 1
11719: ARRAY
11720: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11721: LD_ADDR_VAR 0 11
11725: PUSH
11726: LD_VAR 0 11
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 3
11738: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11739: LD_VAR 0 2
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: CALL 11949 0 2
11753: PUSH
11754: LD_VAR 0 11
11758: PUSH
11759: EMPTY
11760: EQUAL
11761: OR
11762: IFFALSE 11707
// if not control in _control then
11764: LD_VAR 0 4
11768: PUSH
11769: LD_VAR 0 12
11773: IN
11774: NOT
11775: IFFALSE 11801
// control := _control [ rand ( 1 , _control ) ] ;
11777: LD_ADDR_VAR 0 4
11781: PUSH
11782: LD_VAR 0 12
11786: PUSH
11787: LD_INT 1
11789: PPUSH
11790: LD_VAR 0 12
11794: PPUSH
11795: CALL_OW 12
11799: ARRAY
11800: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_VAR 0 5
11810: PPUSH
11811: CALL 12169 0 2
11815: NOT
11816: IFFALSE 11875
// repeat weapon := _weapon [ 1 ] ;
11818: LD_ADDR_VAR 0 5
11822: PUSH
11823: LD_VAR 0 10
11827: PUSH
11828: LD_INT 1
11830: ARRAY
11831: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11832: LD_ADDR_VAR 0 10
11836: PUSH
11837: LD_VAR 0 10
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 3
11849: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11850: LD_VAR 0 2
11854: PPUSH
11855: LD_VAR 0 5
11859: PPUSH
11860: CALL 12169 0 2
11864: PUSH
11865: LD_VAR 0 10
11869: PUSH
11870: EMPTY
11871: EQUAL
11872: OR
11873: IFFALSE 11818
// result := [ ] ;
11875: LD_ADDR_VAR 0 6
11879: PUSH
11880: EMPTY
11881: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_VAR 0 2
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_VAR 0 4
11901: PPUSH
11902: LD_VAR 0 5
11906: PPUSH
11907: CALL_OW 448
11911: IFFALSE 11944
// result := [ chassis , engine , control , weapon ] ;
11913: LD_ADDR_VAR 0 6
11917: PUSH
11918: LD_VAR 0 2
11922: PUSH
11923: LD_VAR 0 3
11927: PUSH
11928: LD_VAR 0 4
11932: PUSH
11933: LD_VAR 0 5
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: ST_TO_ADDR
// end ;
11944: LD_VAR 0 6
11948: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11949: LD_INT 0
11951: PPUSH
// if not chassis or not engine then
11952: LD_VAR 0 1
11956: NOT
11957: PUSH
11958: LD_VAR 0 2
11962: NOT
11963: OR
11964: IFFALSE 11968
// exit ;
11966: GO 12164
// case engine of engine_solar :
11968: LD_VAR 0 2
11972: PUSH
11973: LD_INT 2
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 12019
11981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: LD_INT 11
11989: PUSH
11990: LD_INT 12
11992: PUSH
11993: LD_INT 13
11995: PUSH
11996: LD_INT 14
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: ST_TO_ADDR
12017: GO 12148
12019: LD_INT 1
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12089
12027: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12028: LD_ADDR_VAR 0 3
12032: PUSH
12033: LD_INT 11
12035: PUSH
12036: LD_INT 12
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: LD_INT 14
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: LD_INT 3
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: LD_INT 5
12059: PUSH
12060: LD_INT 21
12062: PUSH
12063: LD_INT 23
12065: PUSH
12066: LD_INT 22
12068: PUSH
12069: LD_INT 24
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 12148
12089: LD_INT 3
12091: DOUBLE
12092: EQUAL
12093: IFTRUE 12097
12095: GO 12147
12097: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12098: LD_ADDR_VAR 0 3
12102: PUSH
12103: LD_INT 13
12105: PUSH
12106: LD_INT 14
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: LD_INT 5
12120: PUSH
12121: LD_INT 21
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_INT 23
12129: PUSH
12130: LD_INT 24
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: ST_TO_ADDR
12145: GO 12148
12147: POP
// result := ( chassis in result ) ;
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_VAR 0 1
12157: PUSH
12158: LD_VAR 0 3
12162: IN
12163: ST_TO_ADDR
// end ;
12164: LD_VAR 0 3
12168: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12169: LD_INT 0
12171: PPUSH
// if not chassis or not weapon then
12172: LD_VAR 0 1
12176: NOT
12177: PUSH
12178: LD_VAR 0 2
12182: NOT
12183: OR
12184: IFFALSE 12188
// exit ;
12186: GO 13214
// case weapon of us_machine_gun :
12188: LD_VAR 0 2
12192: PUSH
12193: LD_INT 2
12195: DOUBLE
12196: EQUAL
12197: IFTRUE 12201
12199: GO 12231
12201: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12202: LD_ADDR_VAR 0 3
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: LD_INT 2
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: LD_INT 5
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: ST_TO_ADDR
12229: GO 13198
12231: LD_INT 3
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12269
12239: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 4
12256: PUSH
12257: LD_INT 5
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: ST_TO_ADDR
12267: GO 13198
12269: LD_INT 11
12271: DOUBLE
12272: EQUAL
12273: IFTRUE 12277
12275: GO 12307
12277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12278: LD_ADDR_VAR 0 3
12282: PUSH
12283: LD_INT 1
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: LD_INT 3
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: LD_INT 5
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
12305: GO 13198
12307: LD_INT 4
12309: DOUBLE
12310: EQUAL
12311: IFTRUE 12315
12313: GO 12341
12315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 13198
12341: LD_INT 5
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12375
12349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: ST_TO_ADDR
12373: GO 13198
12375: LD_INT 9
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12409
12383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 3
12394: PUSH
12395: LD_INT 4
12397: PUSH
12398: LD_INT 5
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: ST_TO_ADDR
12407: GO 13198
12409: LD_INT 7
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12443
12417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 4
12431: PUSH
12432: LD_INT 5
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: ST_TO_ADDR
12441: GO 13198
12443: LD_INT 12
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12477
12451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: LD_INT 5
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: ST_TO_ADDR
12475: GO 13198
12477: LD_INT 13
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12511
12485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 3
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: LD_INT 5
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: ST_TO_ADDR
12509: GO 13198
12511: LD_INT 14
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 12537
12519: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12520: LD_ADDR_VAR 0 3
12524: PUSH
12525: LD_INT 4
12527: PUSH
12528: LD_INT 5
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 13198
12537: LD_INT 6
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12563
12545: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12546: LD_ADDR_VAR 0 3
12550: PUSH
12551: LD_INT 4
12553: PUSH
12554: LD_INT 5
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: ST_TO_ADDR
12561: GO 13198
12563: LD_INT 10
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12589
12571: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12572: LD_ADDR_VAR 0 3
12576: PUSH
12577: LD_INT 4
12579: PUSH
12580: LD_INT 5
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: ST_TO_ADDR
12587: GO 13198
12589: LD_INT 22
12591: DOUBLE
12592: EQUAL
12593: IFTRUE 12597
12595: GO 12623
12597: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12598: LD_ADDR_VAR 0 3
12602: PUSH
12603: LD_INT 11
12605: PUSH
12606: LD_INT 12
12608: PUSH
12609: LD_INT 13
12611: PUSH
12612: LD_INT 14
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: ST_TO_ADDR
12621: GO 13198
12623: LD_INT 23
12625: DOUBLE
12626: EQUAL
12627: IFTRUE 12631
12629: GO 12657
12631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12632: LD_ADDR_VAR 0 3
12636: PUSH
12637: LD_INT 11
12639: PUSH
12640: LD_INT 12
12642: PUSH
12643: LD_INT 13
12645: PUSH
12646: LD_INT 14
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 13198
12657: LD_INT 24
12659: DOUBLE
12660: EQUAL
12661: IFTRUE 12665
12663: GO 12691
12665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12666: LD_ADDR_VAR 0 3
12670: PUSH
12671: LD_INT 11
12673: PUSH
12674: LD_INT 12
12676: PUSH
12677: LD_INT 13
12679: PUSH
12680: LD_INT 14
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: ST_TO_ADDR
12689: GO 13198
12691: LD_INT 30
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12725
12699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 11
12707: PUSH
12708: LD_INT 12
12710: PUSH
12711: LD_INT 13
12713: PUSH
12714: LD_INT 14
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: ST_TO_ADDR
12723: GO 13198
12725: LD_INT 25
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12751
12733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12734: LD_ADDR_VAR 0 3
12738: PUSH
12739: LD_INT 13
12741: PUSH
12742: LD_INT 14
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: ST_TO_ADDR
12749: GO 13198
12751: LD_INT 27
12753: DOUBLE
12754: EQUAL
12755: IFTRUE 12759
12757: GO 12777
12759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12760: LD_ADDR_VAR 0 3
12764: PUSH
12765: LD_INT 13
12767: PUSH
12768: LD_INT 14
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: ST_TO_ADDR
12775: GO 13198
12777: LD_INT 28
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12803
12785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12786: LD_ADDR_VAR 0 3
12790: PUSH
12791: LD_INT 13
12793: PUSH
12794: LD_INT 14
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: ST_TO_ADDR
12801: GO 13198
12803: LD_INT 29
12805: DOUBLE
12806: EQUAL
12807: IFTRUE 12811
12809: GO 12829
12811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12812: LD_ADDR_VAR 0 3
12816: PUSH
12817: LD_INT 13
12819: PUSH
12820: LD_INT 14
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: ST_TO_ADDR
12827: GO 13198
12829: LD_INT 31
12831: DOUBLE
12832: EQUAL
12833: IFTRUE 12837
12835: GO 12855
12837: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12838: LD_ADDR_VAR 0 3
12842: PUSH
12843: LD_INT 13
12845: PUSH
12846: LD_INT 14
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: ST_TO_ADDR
12853: GO 13198
12855: LD_INT 26
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12881
12863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_INT 13
12871: PUSH
12872: LD_INT 14
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: ST_TO_ADDR
12879: GO 13198
12881: LD_INT 42
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12915
12889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 22
12900: PUSH
12901: LD_INT 23
12903: PUSH
12904: LD_INT 24
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: ST_TO_ADDR
12913: GO 13198
12915: LD_INT 43
12917: DOUBLE
12918: EQUAL
12919: IFTRUE 12923
12921: GO 12949
12923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12924: LD_ADDR_VAR 0 3
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 23
12937: PUSH
12938: LD_INT 24
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: ST_TO_ADDR
12947: GO 13198
12949: LD_INT 44
12951: DOUBLE
12952: EQUAL
12953: IFTRUE 12957
12955: GO 12983
12957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 24
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
12981: GO 13198
12983: LD_INT 45
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13017
12991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_INT 21
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 23
13005: PUSH
13006: LD_INT 24
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 13198
13017: LD_INT 49
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13051
13025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_INT 21
13033: PUSH
13034: LD_INT 22
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 24
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: ST_TO_ADDR
13049: GO 13198
13051: LD_INT 51
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13085
13059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_INT 21
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 23
13073: PUSH
13074: LD_INT 24
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: ST_TO_ADDR
13083: GO 13198
13085: LD_INT 52
13087: DOUBLE
13088: EQUAL
13089: IFTRUE 13093
13091: GO 13119
13093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13094: LD_ADDR_VAR 0 3
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 22
13104: PUSH
13105: LD_INT 23
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: ST_TO_ADDR
13117: GO 13198
13119: LD_INT 53
13121: DOUBLE
13122: EQUAL
13123: IFTRUE 13127
13125: GO 13145
13127: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: LD_INT 23
13135: PUSH
13136: LD_INT 24
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: ST_TO_ADDR
13143: GO 13198
13145: LD_INT 46
13147: DOUBLE
13148: EQUAL
13149: IFTRUE 13153
13151: GO 13171
13153: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_INT 23
13161: PUSH
13162: LD_INT 24
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: ST_TO_ADDR
13169: GO 13198
13171: LD_INT 47
13173: DOUBLE
13174: EQUAL
13175: IFTRUE 13179
13177: GO 13197
13179: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: LD_INT 23
13187: PUSH
13188: LD_INT 24
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 13198
13197: POP
// result := ( chassis in result ) ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: LD_VAR 0 3
13212: IN
13213: ST_TO_ADDR
// end ;
13214: LD_VAR 0 3
13218: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13219: LD_INT 0
13221: PPUSH
13222: PPUSH
13223: PPUSH
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
// result := array ;
13228: LD_ADDR_VAR 0 5
13232: PUSH
13233: LD_VAR 0 1
13237: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13238: LD_VAR 0 1
13242: NOT
13243: PUSH
13244: LD_VAR 0 2
13248: NOT
13249: OR
13250: PUSH
13251: LD_VAR 0 3
13255: NOT
13256: OR
13257: PUSH
13258: LD_VAR 0 2
13262: PUSH
13263: LD_VAR 0 1
13267: GREATER
13268: OR
13269: PUSH
13270: LD_VAR 0 3
13274: PUSH
13275: LD_VAR 0 1
13279: GREATER
13280: OR
13281: IFFALSE 13285
// exit ;
13283: GO 13581
// if direction then
13285: LD_VAR 0 4
13289: IFFALSE 13353
// begin d := 1 ;
13291: LD_ADDR_VAR 0 9
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// if i_from > i_to then
13299: LD_VAR 0 2
13303: PUSH
13304: LD_VAR 0 3
13308: GREATER
13309: IFFALSE 13335
// length := ( array - i_from ) + i_to else
13311: LD_ADDR_VAR 0 11
13315: PUSH
13316: LD_VAR 0 1
13320: PUSH
13321: LD_VAR 0 2
13325: MINUS
13326: PUSH
13327: LD_VAR 0 3
13331: PLUS
13332: ST_TO_ADDR
13333: GO 13351
// length := i_to - i_from ;
13335: LD_ADDR_VAR 0 11
13339: PUSH
13340: LD_VAR 0 3
13344: PUSH
13345: LD_VAR 0 2
13349: MINUS
13350: ST_TO_ADDR
// end else
13351: GO 13414
// begin d := - 1 ;
13353: LD_ADDR_VAR 0 9
13357: PUSH
13358: LD_INT 1
13360: NEG
13361: ST_TO_ADDR
// if i_from > i_to then
13362: LD_VAR 0 2
13366: PUSH
13367: LD_VAR 0 3
13371: GREATER
13372: IFFALSE 13392
// length := i_from - i_to else
13374: LD_ADDR_VAR 0 11
13378: PUSH
13379: LD_VAR 0 2
13383: PUSH
13384: LD_VAR 0 3
13388: MINUS
13389: ST_TO_ADDR
13390: GO 13414
// length := ( array - i_to ) + i_from ;
13392: LD_ADDR_VAR 0 11
13396: PUSH
13397: LD_VAR 0 1
13401: PUSH
13402: LD_VAR 0 3
13406: MINUS
13407: PUSH
13408: LD_VAR 0 2
13412: PLUS
13413: ST_TO_ADDR
// end ; if not length then
13414: LD_VAR 0 11
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13581
// tmp := array ;
13423: LD_ADDR_VAR 0 10
13427: PUSH
13428: LD_VAR 0 1
13432: ST_TO_ADDR
// for i = 1 to length do
13433: LD_ADDR_VAR 0 6
13437: PUSH
13438: DOUBLE
13439: LD_INT 1
13441: DEC
13442: ST_TO_ADDR
13443: LD_VAR 0 11
13447: PUSH
13448: FOR_TO
13449: IFFALSE 13569
// begin for j = 1 to array do
13451: LD_ADDR_VAR 0 7
13455: PUSH
13456: DOUBLE
13457: LD_INT 1
13459: DEC
13460: ST_TO_ADDR
13461: LD_VAR 0 1
13465: PUSH
13466: FOR_TO
13467: IFFALSE 13555
// begin k := j + d ;
13469: LD_ADDR_VAR 0 8
13473: PUSH
13474: LD_VAR 0 7
13478: PUSH
13479: LD_VAR 0 9
13483: PLUS
13484: ST_TO_ADDR
// if k > array then
13485: LD_VAR 0 8
13489: PUSH
13490: LD_VAR 0 1
13494: GREATER
13495: IFFALSE 13505
// k := 1 ;
13497: LD_ADDR_VAR 0 8
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// if not k then
13505: LD_VAR 0 8
13509: NOT
13510: IFFALSE 13522
// k := array ;
13512: LD_ADDR_VAR 0 8
13516: PUSH
13517: LD_VAR 0 1
13521: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13522: LD_ADDR_VAR 0 10
13526: PUSH
13527: LD_VAR 0 10
13531: PPUSH
13532: LD_VAR 0 8
13536: PPUSH
13537: LD_VAR 0 1
13541: PUSH
13542: LD_VAR 0 7
13546: ARRAY
13547: PPUSH
13548: CALL_OW 1
13552: ST_TO_ADDR
// end ;
13553: GO 13466
13555: POP
13556: POP
// array := tmp ;
13557: LD_ADDR_VAR 0 1
13561: PUSH
13562: LD_VAR 0 10
13566: ST_TO_ADDR
// end ;
13567: GO 13448
13569: POP
13570: POP
// result := array ;
13571: LD_ADDR_VAR 0 5
13575: PUSH
13576: LD_VAR 0 1
13580: ST_TO_ADDR
// end ;
13581: LD_VAR 0 5
13585: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13586: LD_INT 0
13588: PPUSH
13589: PPUSH
// result := 0 ;
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_INT 0
13597: ST_TO_ADDR
// if not array or not value in array then
13598: LD_VAR 0 1
13602: NOT
13603: PUSH
13604: LD_VAR 0 2
13608: PUSH
13609: LD_VAR 0 1
13613: IN
13614: NOT
13615: OR
13616: IFFALSE 13620
// exit ;
13618: GO 13674
// for i = 1 to array do
13620: LD_ADDR_VAR 0 4
13624: PUSH
13625: DOUBLE
13626: LD_INT 1
13628: DEC
13629: ST_TO_ADDR
13630: LD_VAR 0 1
13634: PUSH
13635: FOR_TO
13636: IFFALSE 13672
// if value = array [ i ] then
13638: LD_VAR 0 2
13642: PUSH
13643: LD_VAR 0 1
13647: PUSH
13648: LD_VAR 0 4
13652: ARRAY
13653: EQUAL
13654: IFFALSE 13670
// begin result := i ;
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: LD_VAR 0 4
13665: ST_TO_ADDR
// exit ;
13666: POP
13667: POP
13668: GO 13674
// end ;
13670: GO 13635
13672: POP
13673: POP
// end ;
13674: LD_VAR 0 3
13678: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13679: LD_INT 0
13681: PPUSH
// vc_chassis := chassis ;
13682: LD_ADDR_OWVAR 37
13686: PUSH
13687: LD_VAR 0 1
13691: ST_TO_ADDR
// vc_engine := engine ;
13692: LD_ADDR_OWVAR 39
13696: PUSH
13697: LD_VAR 0 2
13701: ST_TO_ADDR
// vc_control := control ;
13702: LD_ADDR_OWVAR 38
13706: PUSH
13707: LD_VAR 0 3
13711: ST_TO_ADDR
// vc_weapon := weapon ;
13712: LD_ADDR_OWVAR 40
13716: PUSH
13717: LD_VAR 0 4
13721: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13722: LD_ADDR_OWVAR 41
13726: PUSH
13727: LD_VAR 0 5
13731: ST_TO_ADDR
// end ;
13732: LD_VAR 0 6
13736: RET
// export function WantPlant ( unit ) ; var task ; begin
13737: LD_INT 0
13739: PPUSH
13740: PPUSH
// result := false ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 437
13763: ST_TO_ADDR
// if task then
13764: LD_VAR 0 3
13768: IFFALSE 13796
// if task [ 1 ] [ 1 ] = p then
13770: LD_VAR 0 3
13774: PUSH
13775: LD_INT 1
13777: ARRAY
13778: PUSH
13779: LD_INT 1
13781: ARRAY
13782: PUSH
13783: LD_STRING p
13785: EQUAL
13786: IFFALSE 13796
// result := true ;
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_INT 1
13795: ST_TO_ADDR
// end ;
13796: LD_VAR 0 2
13800: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13801: LD_INT 0
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
// if pos < 1 then
13807: LD_VAR 0 2
13811: PUSH
13812: LD_INT 1
13814: LESS
13815: IFFALSE 13819
// exit ;
13817: GO 14122
// if pos = 1 then
13819: LD_VAR 0 2
13823: PUSH
13824: LD_INT 1
13826: EQUAL
13827: IFFALSE 13860
// result := Replace ( arr , pos [ 1 ] , value ) else
13829: LD_ADDR_VAR 0 4
13833: PUSH
13834: LD_VAR 0 1
13838: PPUSH
13839: LD_VAR 0 2
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: PPUSH
13848: LD_VAR 0 3
13852: PPUSH
13853: CALL_OW 1
13857: ST_TO_ADDR
13858: GO 14122
// begin tmp := arr ;
13860: LD_ADDR_VAR 0 6
13864: PUSH
13865: LD_VAR 0 1
13869: ST_TO_ADDR
// s_arr := [ tmp ] ;
13870: LD_ADDR_VAR 0 7
13874: PUSH
13875: LD_VAR 0 6
13879: PUSH
13880: EMPTY
13881: LIST
13882: ST_TO_ADDR
// for i = 1 to pos - 1 do
13883: LD_ADDR_VAR 0 5
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_VAR 0 2
13897: PUSH
13898: LD_INT 1
13900: MINUS
13901: PUSH
13902: FOR_TO
13903: IFFALSE 13948
// begin tmp := tmp [ pos [ i ] ] ;
13905: LD_ADDR_VAR 0 6
13909: PUSH
13910: LD_VAR 0 6
13914: PUSH
13915: LD_VAR 0 2
13919: PUSH
13920: LD_VAR 0 5
13924: ARRAY
13925: ARRAY
13926: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13927: LD_ADDR_VAR 0 7
13931: PUSH
13932: LD_VAR 0 7
13936: PUSH
13937: LD_VAR 0 6
13941: PUSH
13942: EMPTY
13943: LIST
13944: ADD
13945: ST_TO_ADDR
// end ;
13946: GO 13902
13948: POP
13949: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13950: LD_ADDR_VAR 0 6
13954: PUSH
13955: LD_VAR 0 6
13959: PPUSH
13960: LD_VAR 0 2
13964: PUSH
13965: LD_VAR 0 2
13969: ARRAY
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 1
13980: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13981: LD_ADDR_VAR 0 7
13985: PUSH
13986: LD_VAR 0 7
13990: PPUSH
13991: LD_VAR 0 7
13995: PPUSH
13996: LD_VAR 0 6
14000: PPUSH
14001: CALL_OW 1
14005: ST_TO_ADDR
// for i = s_arr downto 2 do
14006: LD_ADDR_VAR 0 5
14010: PUSH
14011: DOUBLE
14012: LD_VAR 0 7
14016: INC
14017: ST_TO_ADDR
14018: LD_INT 2
14020: PUSH
14021: FOR_DOWNTO
14022: IFFALSE 14106
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14024: LD_ADDR_VAR 0 6
14028: PUSH
14029: LD_VAR 0 7
14033: PUSH
14034: LD_VAR 0 5
14038: PUSH
14039: LD_INT 1
14041: MINUS
14042: ARRAY
14043: PPUSH
14044: LD_VAR 0 2
14048: PUSH
14049: LD_VAR 0 5
14053: PUSH
14054: LD_INT 1
14056: MINUS
14057: ARRAY
14058: PPUSH
14059: LD_VAR 0 7
14063: PUSH
14064: LD_VAR 0 5
14068: ARRAY
14069: PPUSH
14070: CALL_OW 1
14074: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14075: LD_ADDR_VAR 0 7
14079: PUSH
14080: LD_VAR 0 7
14084: PPUSH
14085: LD_VAR 0 5
14089: PUSH
14090: LD_INT 1
14092: MINUS
14093: PPUSH
14094: LD_VAR 0 6
14098: PPUSH
14099: CALL_OW 1
14103: ST_TO_ADDR
// end ;
14104: GO 14021
14106: POP
14107: POP
// result := s_arr [ 1 ] ;
14108: LD_ADDR_VAR 0 4
14112: PUSH
14113: LD_VAR 0 7
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: ST_TO_ADDR
// end ; end ;
14122: LD_VAR 0 4
14126: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14127: LD_INT 0
14129: PPUSH
14130: PPUSH
// if not list then
14131: LD_VAR 0 1
14135: NOT
14136: IFFALSE 14140
// exit ;
14138: GO 14231
// i := list [ pos1 ] ;
14140: LD_ADDR_VAR 0 5
14144: PUSH
14145: LD_VAR 0 1
14149: PUSH
14150: LD_VAR 0 2
14154: ARRAY
14155: ST_TO_ADDR
// if not i then
14156: LD_VAR 0 5
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14231
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_VAR 0 1
14174: PPUSH
14175: LD_VAR 0 2
14179: PPUSH
14180: LD_VAR 0 1
14184: PUSH
14185: LD_VAR 0 3
14189: ARRAY
14190: PPUSH
14191: CALL_OW 1
14195: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: LD_VAR 0 1
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_VAR 0 5
14215: PPUSH
14216: CALL_OW 1
14220: ST_TO_ADDR
// result := list ;
14221: LD_ADDR_VAR 0 4
14225: PUSH
14226: LD_VAR 0 1
14230: ST_TO_ADDR
// end ;
14231: LD_VAR 0 4
14235: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14236: LD_INT 0
14238: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14239: LD_ADDR_VAR 0 5
14243: PUSH
14244: LD_VAR 0 1
14248: PPUSH
14249: CALL_OW 250
14253: PPUSH
14254: LD_VAR 0 1
14258: PPUSH
14259: CALL_OW 251
14263: PPUSH
14264: LD_VAR 0 2
14268: PPUSH
14269: LD_VAR 0 3
14273: PPUSH
14274: LD_VAR 0 4
14278: PPUSH
14279: CALL 14289 0 5
14283: ST_TO_ADDR
// end ;
14284: LD_VAR 0 5
14288: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
14293: PPUSH
14294: PPUSH
// if not list then
14295: LD_VAR 0 3
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14692
// result := [ ] ;
14304: LD_ADDR_VAR 0 6
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// for i in list do
14311: LD_ADDR_VAR 0 7
14315: PUSH
14316: LD_VAR 0 3
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14524
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14324: LD_ADDR_VAR 0 9
14328: PUSH
14329: LD_VAR 0 7
14333: PPUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: LD_VAR 0 2
14343: PPUSH
14344: CALL_OW 297
14348: ST_TO_ADDR
// if not result then
14349: LD_VAR 0 6
14353: NOT
14354: IFFALSE 14380
// result := [ [ i , tmp ] ] else
14356: LD_ADDR_VAR 0 6
14360: PUSH
14361: LD_VAR 0 7
14365: PUSH
14366: LD_VAR 0 9
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: ST_TO_ADDR
14378: GO 14522
// begin if result [ result ] [ 2 ] < tmp then
14380: LD_VAR 0 6
14384: PUSH
14385: LD_VAR 0 6
14389: ARRAY
14390: PUSH
14391: LD_INT 2
14393: ARRAY
14394: PUSH
14395: LD_VAR 0 9
14399: LESS
14400: IFFALSE 14442
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14402: LD_ADDR_VAR 0 6
14406: PUSH
14407: LD_VAR 0 6
14411: PPUSH
14412: LD_VAR 0 6
14416: PUSH
14417: LD_INT 1
14419: PLUS
14420: PPUSH
14421: LD_VAR 0 7
14425: PUSH
14426: LD_VAR 0 9
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PPUSH
14435: CALL_OW 2
14439: ST_TO_ADDR
14440: GO 14522
// for j = 1 to result do
14442: LD_ADDR_VAR 0 8
14446: PUSH
14447: DOUBLE
14448: LD_INT 1
14450: DEC
14451: ST_TO_ADDR
14452: LD_VAR 0 6
14456: PUSH
14457: FOR_TO
14458: IFFALSE 14520
// begin if tmp < result [ j ] [ 2 ] then
14460: LD_VAR 0 9
14464: PUSH
14465: LD_VAR 0 6
14469: PUSH
14470: LD_VAR 0 8
14474: ARRAY
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: LESS
14480: IFFALSE 14518
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14482: LD_ADDR_VAR 0 6
14486: PUSH
14487: LD_VAR 0 6
14491: PPUSH
14492: LD_VAR 0 8
14496: PPUSH
14497: LD_VAR 0 7
14501: PUSH
14502: LD_VAR 0 9
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PPUSH
14511: CALL_OW 2
14515: ST_TO_ADDR
// break ;
14516: GO 14520
// end ; end ;
14518: GO 14457
14520: POP
14521: POP
// end ; end ;
14522: GO 14321
14524: POP
14525: POP
// if result and not asc then
14526: LD_VAR 0 6
14530: PUSH
14531: LD_VAR 0 4
14535: NOT
14536: AND
14537: IFFALSE 14612
// begin tmp := result ;
14539: LD_ADDR_VAR 0 9
14543: PUSH
14544: LD_VAR 0 6
14548: ST_TO_ADDR
// for i = tmp downto 1 do
14549: LD_ADDR_VAR 0 7
14553: PUSH
14554: DOUBLE
14555: LD_VAR 0 9
14559: INC
14560: ST_TO_ADDR
14561: LD_INT 1
14563: PUSH
14564: FOR_DOWNTO
14565: IFFALSE 14610
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14567: LD_ADDR_VAR 0 6
14571: PUSH
14572: LD_VAR 0 6
14576: PPUSH
14577: LD_VAR 0 9
14581: PUSH
14582: LD_VAR 0 7
14586: MINUS
14587: PUSH
14588: LD_INT 1
14590: PLUS
14591: PPUSH
14592: LD_VAR 0 9
14596: PUSH
14597: LD_VAR 0 7
14601: ARRAY
14602: PPUSH
14603: CALL_OW 1
14607: ST_TO_ADDR
14608: GO 14564
14610: POP
14611: POP
// end ; tmp := [ ] ;
14612: LD_ADDR_VAR 0 9
14616: PUSH
14617: EMPTY
14618: ST_TO_ADDR
// if mode then
14619: LD_VAR 0 5
14623: IFFALSE 14692
// begin for i = 1 to result do
14625: LD_ADDR_VAR 0 7
14629: PUSH
14630: DOUBLE
14631: LD_INT 1
14633: DEC
14634: ST_TO_ADDR
14635: LD_VAR 0 6
14639: PUSH
14640: FOR_TO
14641: IFFALSE 14680
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14643: LD_ADDR_VAR 0 9
14647: PUSH
14648: LD_VAR 0 9
14652: PPUSH
14653: LD_VAR 0 7
14657: PPUSH
14658: LD_VAR 0 6
14662: PUSH
14663: LD_VAR 0 7
14667: ARRAY
14668: PUSH
14669: LD_INT 1
14671: ARRAY
14672: PPUSH
14673: CALL_OW 1
14677: ST_TO_ADDR
14678: GO 14640
14680: POP
14681: POP
// result := tmp ;
14682: LD_ADDR_VAR 0 6
14686: PUSH
14687: LD_VAR 0 9
14691: ST_TO_ADDR
// end ; end ;
14692: LD_VAR 0 6
14696: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
14703: PPUSH
14704: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14705: LD_ADDR_VAR 0 5
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: LD_INT 0
14715: PUSH
14716: LD_INT 0
14718: PUSH
14719: EMPTY
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: ST_TO_ADDR
// if not x or not y then
14727: LD_VAR 0 2
14731: NOT
14732: PUSH
14733: LD_VAR 0 3
14737: NOT
14738: OR
14739: IFFALSE 14743
// exit ;
14741: GO 16389
// if not range then
14743: LD_VAR 0 4
14747: NOT
14748: IFFALSE 14758
// range := 10 ;
14750: LD_ADDR_VAR 0 4
14754: PUSH
14755: LD_INT 10
14757: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14758: LD_ADDR_VAR 0 8
14762: PUSH
14763: LD_INT 81
14765: PUSH
14766: LD_VAR 0 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 92
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_VAR 0 3
14787: PUSH
14788: LD_VAR 0 4
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 3
14801: PUSH
14802: LD_INT 21
14804: PUSH
14805: LD_INT 3
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: ST_TO_ADDR
// if not tmp then
14826: LD_VAR 0 8
14830: NOT
14831: IFFALSE 14835
// exit ;
14833: GO 16389
// for i in tmp do
14835: LD_ADDR_VAR 0 6
14839: PUSH
14840: LD_VAR 0 8
14844: PUSH
14845: FOR_IN
14846: IFFALSE 16364
// begin points := [ 0 , 0 , 0 ] ;
14848: LD_ADDR_VAR 0 9
14852: PUSH
14853: LD_INT 0
14855: PUSH
14856: LD_INT 0
14858: PUSH
14859: LD_INT 0
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: ST_TO_ADDR
// bpoints := 1 ;
14867: LD_ADDR_VAR 0 10
14871: PUSH
14872: LD_INT 1
14874: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14875: LD_VAR 0 6
14879: PPUSH
14880: CALL_OW 247
14884: PUSH
14885: LD_INT 1
14887: DOUBLE
14888: EQUAL
14889: IFTRUE 14893
14891: GO 15471
14893: POP
// begin if GetClass ( i ) = 1 then
14894: LD_VAR 0 6
14898: PPUSH
14899: CALL_OW 257
14903: PUSH
14904: LD_INT 1
14906: EQUAL
14907: IFFALSE 14928
// points := [ 10 , 5 , 3 ] ;
14909: LD_ADDR_VAR 0 9
14913: PUSH
14914: LD_INT 10
14916: PUSH
14917: LD_INT 5
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14928: LD_VAR 0 6
14932: PPUSH
14933: CALL_OW 257
14937: PUSH
14938: LD_INT 2
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: LD_INT 4
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: IN
14952: IFFALSE 14973
// points := [ 3 , 2 , 1 ] ;
14954: LD_ADDR_VAR 0 9
14958: PUSH
14959: LD_INT 3
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14973: LD_VAR 0 6
14977: PPUSH
14978: CALL_OW 257
14982: PUSH
14983: LD_INT 5
14985: EQUAL
14986: IFFALSE 15007
// points := [ 130 , 5 , 2 ] ;
14988: LD_ADDR_VAR 0 9
14992: PUSH
14993: LD_INT 130
14995: PUSH
14996: LD_INT 5
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15007: LD_VAR 0 6
15011: PPUSH
15012: CALL_OW 257
15016: PUSH
15017: LD_INT 8
15019: EQUAL
15020: IFFALSE 15041
// points := [ 35 , 35 , 30 ] ;
15022: LD_ADDR_VAR 0 9
15026: PUSH
15027: LD_INT 35
15029: PUSH
15030: LD_INT 35
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15041: LD_VAR 0 6
15045: PPUSH
15046: CALL_OW 257
15050: PUSH
15051: LD_INT 9
15053: EQUAL
15054: IFFALSE 15075
// points := [ 20 , 55 , 40 ] ;
15056: LD_ADDR_VAR 0 9
15060: PUSH
15061: LD_INT 20
15063: PUSH
15064: LD_INT 55
15066: PUSH
15067: LD_INT 40
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15075: LD_VAR 0 6
15079: PPUSH
15080: CALL_OW 257
15084: PUSH
15085: LD_INT 12
15087: PUSH
15088: LD_INT 16
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: IN
15095: IFFALSE 15116
// points := [ 5 , 3 , 2 ] ;
15097: LD_ADDR_VAR 0 9
15101: PUSH
15102: LD_INT 5
15104: PUSH
15105: LD_INT 3
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15116: LD_VAR 0 6
15120: PPUSH
15121: CALL_OW 257
15125: PUSH
15126: LD_INT 17
15128: EQUAL
15129: IFFALSE 15150
// points := [ 100 , 50 , 75 ] ;
15131: LD_ADDR_VAR 0 9
15135: PUSH
15136: LD_INT 100
15138: PUSH
15139: LD_INT 50
15141: PUSH
15142: LD_INT 75
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15150: LD_VAR 0 6
15154: PPUSH
15155: CALL_OW 257
15159: PUSH
15160: LD_INT 15
15162: EQUAL
15163: IFFALSE 15184
// points := [ 10 , 5 , 3 ] ;
15165: LD_ADDR_VAR 0 9
15169: PUSH
15170: LD_INT 10
15172: PUSH
15173: LD_INT 5
15175: PUSH
15176: LD_INT 3
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15184: LD_VAR 0 6
15188: PPUSH
15189: CALL_OW 257
15193: PUSH
15194: LD_INT 14
15196: EQUAL
15197: IFFALSE 15218
// points := [ 10 , 0 , 0 ] ;
15199: LD_ADDR_VAR 0 9
15203: PUSH
15204: LD_INT 10
15206: PUSH
15207: LD_INT 0
15209: PUSH
15210: LD_INT 0
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 257
15227: PUSH
15228: LD_INT 11
15230: EQUAL
15231: IFFALSE 15252
// points := [ 30 , 10 , 5 ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_INT 30
15240: PUSH
15241: LD_INT 10
15243: PUSH
15244: LD_INT 5
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15252: LD_VAR 0 1
15256: PPUSH
15257: LD_INT 5
15259: PPUSH
15260: CALL_OW 321
15264: PUSH
15265: LD_INT 2
15267: EQUAL
15268: IFFALSE 15285
// bpoints := bpoints * 1.8 ;
15270: LD_ADDR_VAR 0 10
15274: PUSH
15275: LD_VAR 0 10
15279: PUSH
15280: LD_REAL  1.80000000000000E+0000
15283: MUL
15284: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15285: LD_VAR 0 6
15289: PPUSH
15290: CALL_OW 257
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: LD_INT 2
15300: PUSH
15301: LD_INT 3
15303: PUSH
15304: LD_INT 4
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: IN
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: LD_INT 51
15321: PPUSH
15322: CALL_OW 321
15326: PUSH
15327: LD_INT 2
15329: EQUAL
15330: AND
15331: IFFALSE 15348
// bpoints := bpoints * 1.2 ;
15333: LD_ADDR_VAR 0 10
15337: PUSH
15338: LD_VAR 0 10
15342: PUSH
15343: LD_REAL  1.20000000000000E+0000
15346: MUL
15347: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15348: LD_VAR 0 6
15352: PPUSH
15353: CALL_OW 257
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: LD_INT 7
15363: PUSH
15364: LD_INT 9
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: IN
15372: PUSH
15373: LD_VAR 0 1
15377: PPUSH
15378: LD_INT 52
15380: PPUSH
15381: CALL_OW 321
15385: PUSH
15386: LD_INT 2
15388: EQUAL
15389: AND
15390: IFFALSE 15407
// bpoints := bpoints * 1.5 ;
15392: LD_ADDR_VAR 0 10
15396: PUSH
15397: LD_VAR 0 10
15401: PUSH
15402: LD_REAL  1.50000000000000E+0000
15405: MUL
15406: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_INT 66
15414: PPUSH
15415: CALL_OW 321
15419: PUSH
15420: LD_INT 2
15422: EQUAL
15423: IFFALSE 15440
// bpoints := bpoints * 1.1 ;
15425: LD_ADDR_VAR 0 10
15429: PUSH
15430: LD_VAR 0 10
15434: PUSH
15435: LD_REAL  1.10000000000000E+0000
15438: MUL
15439: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15440: LD_ADDR_VAR 0 10
15444: PUSH
15445: LD_VAR 0 10
15449: PUSH
15450: LD_VAR 0 6
15454: PPUSH
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 259
15462: PUSH
15463: LD_REAL  1.15000000000000E+0000
15466: MUL
15467: MUL
15468: ST_TO_ADDR
// end ; unit_vehicle :
15469: GO 16293
15471: LD_INT 2
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 16281
15479: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15480: LD_VAR 0 6
15484: PPUSH
15485: CALL_OW 264
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: LD_INT 42
15495: PUSH
15496: LD_INT 24
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: LIST
15503: IN
15504: IFFALSE 15525
// points := [ 25 , 5 , 3 ] ;
15506: LD_ADDR_VAR 0 9
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 5
15516: PUSH
15517: LD_INT 3
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15525: LD_VAR 0 6
15529: PPUSH
15530: CALL_OW 264
15534: PUSH
15535: LD_INT 4
15537: PUSH
15538: LD_INT 43
15540: PUSH
15541: LD_INT 25
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: IN
15549: IFFALSE 15570
// points := [ 40 , 15 , 5 ] ;
15551: LD_ADDR_VAR 0 9
15555: PUSH
15556: LD_INT 40
15558: PUSH
15559: LD_INT 15
15561: PUSH
15562: LD_INT 5
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15570: LD_VAR 0 6
15574: PPUSH
15575: CALL_OW 264
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: LD_INT 23
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: IN
15590: IFFALSE 15611
// points := [ 7 , 25 , 8 ] ;
15592: LD_ADDR_VAR 0 9
15596: PUSH
15597: LD_INT 7
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 8
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: LIST
15610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15611: LD_VAR 0 6
15615: PPUSH
15616: CALL_OW 264
15620: PUSH
15621: LD_INT 5
15623: PUSH
15624: LD_INT 27
15626: PUSH
15627: LD_INT 44
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: IN
15635: IFFALSE 15656
// points := [ 14 , 50 , 16 ] ;
15637: LD_ADDR_VAR 0 9
15641: PUSH
15642: LD_INT 14
15644: PUSH
15645: LD_INT 50
15647: PUSH
15648: LD_INT 16
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15656: LD_VAR 0 6
15660: PPUSH
15661: CALL_OW 264
15665: PUSH
15666: LD_INT 6
15668: PUSH
15669: LD_INT 46
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: IN
15676: IFFALSE 15697
// points := [ 32 , 120 , 70 ] ;
15678: LD_ADDR_VAR 0 9
15682: PUSH
15683: LD_INT 32
15685: PUSH
15686: LD_INT 120
15688: PUSH
15689: LD_INT 70
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
15697: LD_VAR 0 6
15701: PPUSH
15702: CALL_OW 264
15706: PUSH
15707: LD_INT 7
15709: PUSH
15710: LD_INT 28
15712: PUSH
15713: LD_INT 45
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: IN
15721: IFFALSE 15742
// points := [ 35 , 20 , 45 ] ;
15723: LD_ADDR_VAR 0 9
15727: PUSH
15728: LD_INT 35
15730: PUSH
15731: LD_INT 20
15733: PUSH
15734: LD_INT 45
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: LIST
15741: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15742: LD_VAR 0 6
15746: PPUSH
15747: CALL_OW 264
15751: PUSH
15752: LD_INT 47
15754: PUSH
15755: EMPTY
15756: LIST
15757: IN
15758: IFFALSE 15779
// points := [ 67 , 45 , 75 ] ;
15760: LD_ADDR_VAR 0 9
15764: PUSH
15765: LD_INT 67
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: LD_INT 75
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: LIST
15778: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15779: LD_VAR 0 6
15783: PPUSH
15784: CALL_OW 264
15788: PUSH
15789: LD_INT 26
15791: PUSH
15792: EMPTY
15793: LIST
15794: IN
15795: IFFALSE 15816
// points := [ 120 , 30 , 80 ] ;
15797: LD_ADDR_VAR 0 9
15801: PUSH
15802: LD_INT 120
15804: PUSH
15805: LD_INT 30
15807: PUSH
15808: LD_INT 80
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15816: LD_VAR 0 6
15820: PPUSH
15821: CALL_OW 264
15825: PUSH
15826: LD_INT 22
15828: PUSH
15829: EMPTY
15830: LIST
15831: IN
15832: IFFALSE 15853
// points := [ 40 , 1 , 1 ] ;
15834: LD_ADDR_VAR 0 9
15838: PUSH
15839: LD_INT 40
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15853: LD_VAR 0 6
15857: PPUSH
15858: CALL_OW 264
15862: PUSH
15863: LD_INT 29
15865: PUSH
15866: EMPTY
15867: LIST
15868: IN
15869: IFFALSE 15890
// points := [ 70 , 200 , 400 ] ;
15871: LD_ADDR_VAR 0 9
15875: PUSH
15876: LD_INT 70
15878: PUSH
15879: LD_INT 200
15881: PUSH
15882: LD_INT 400
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15890: LD_VAR 0 6
15894: PPUSH
15895: CALL_OW 264
15899: PUSH
15900: LD_INT 14
15902: PUSH
15903: LD_INT 53
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: IN
15910: IFFALSE 15931
// points := [ 40 , 10 , 20 ] ;
15912: LD_ADDR_VAR 0 9
15916: PUSH
15917: LD_INT 40
15919: PUSH
15920: LD_INT 10
15922: PUSH
15923: LD_INT 20
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15931: LD_VAR 0 6
15935: PPUSH
15936: CALL_OW 264
15940: PUSH
15941: LD_INT 9
15943: PUSH
15944: EMPTY
15945: LIST
15946: IN
15947: IFFALSE 15968
// points := [ 5 , 70 , 20 ] ;
15949: LD_ADDR_VAR 0 9
15953: PUSH
15954: LD_INT 5
15956: PUSH
15957: LD_INT 70
15959: PUSH
15960: LD_INT 20
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15968: LD_VAR 0 6
15972: PPUSH
15973: CALL_OW 264
15977: PUSH
15978: LD_INT 10
15980: PUSH
15981: EMPTY
15982: LIST
15983: IN
15984: IFFALSE 16005
// points := [ 35 , 110 , 70 ] ;
15986: LD_ADDR_VAR 0 9
15990: PUSH
15991: LD_INT 35
15993: PUSH
15994: LD_INT 110
15996: PUSH
15997: LD_INT 70
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: LIST
16004: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16005: LD_VAR 0 6
16009: PPUSH
16010: CALL_OW 265
16014: PUSH
16015: LD_INT 25
16017: EQUAL
16018: IFFALSE 16039
// points := [ 80 , 65 , 100 ] ;
16020: LD_ADDR_VAR 0 9
16024: PUSH
16025: LD_INT 80
16027: PUSH
16028: LD_INT 65
16030: PUSH
16031: LD_INT 100
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16039: LD_VAR 0 6
16043: PPUSH
16044: CALL_OW 263
16048: PUSH
16049: LD_INT 1
16051: EQUAL
16052: IFFALSE 16087
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16054: LD_ADDR_VAR 0 10
16058: PUSH
16059: LD_VAR 0 10
16063: PUSH
16064: LD_VAR 0 6
16068: PPUSH
16069: CALL_OW 311
16073: PPUSH
16074: LD_INT 3
16076: PPUSH
16077: CALL_OW 259
16081: PUSH
16082: LD_INT 4
16084: MUL
16085: MUL
16086: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16087: LD_VAR 0 6
16091: PPUSH
16092: CALL_OW 263
16096: PUSH
16097: LD_INT 2
16099: EQUAL
16100: IFFALSE 16151
// begin j := IsControledBy ( i ) ;
16102: LD_ADDR_VAR 0 7
16106: PUSH
16107: LD_VAR 0 6
16111: PPUSH
16112: CALL_OW 312
16116: ST_TO_ADDR
// if j then
16117: LD_VAR 0 7
16121: IFFALSE 16151
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16123: LD_ADDR_VAR 0 10
16127: PUSH
16128: LD_VAR 0 10
16132: PUSH
16133: LD_VAR 0 7
16137: PPUSH
16138: LD_INT 3
16140: PPUSH
16141: CALL_OW 259
16145: PUSH
16146: LD_INT 3
16148: MUL
16149: MUL
16150: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16151: LD_VAR 0 6
16155: PPUSH
16156: CALL_OW 264
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: LD_INT 6
16166: PUSH
16167: LD_INT 46
16169: PUSH
16170: LD_INT 44
16172: PUSH
16173: LD_INT 47
16175: PUSH
16176: LD_INT 45
16178: PUSH
16179: LD_INT 28
16181: PUSH
16182: LD_INT 7
16184: PUSH
16185: LD_INT 27
16187: PUSH
16188: LD_INT 29
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: IN
16203: PUSH
16204: LD_VAR 0 1
16208: PPUSH
16209: LD_INT 52
16211: PPUSH
16212: CALL_OW 321
16216: PUSH
16217: LD_INT 2
16219: EQUAL
16220: AND
16221: IFFALSE 16238
// bpoints := bpoints * 1.2 ;
16223: LD_ADDR_VAR 0 10
16227: PUSH
16228: LD_VAR 0 10
16232: PUSH
16233: LD_REAL  1.20000000000000E+0000
16236: MUL
16237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16238: LD_VAR 0 6
16242: PPUSH
16243: CALL_OW 264
16247: PUSH
16248: LD_INT 6
16250: PUSH
16251: LD_INT 46
16253: PUSH
16254: LD_INT 47
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: IN
16262: IFFALSE 16279
// bpoints := bpoints * 1.2 ;
16264: LD_ADDR_VAR 0 10
16268: PUSH
16269: LD_VAR 0 10
16273: PUSH
16274: LD_REAL  1.20000000000000E+0000
16277: MUL
16278: ST_TO_ADDR
// end ; unit_building :
16279: GO 16293
16281: LD_INT 3
16283: DOUBLE
16284: EQUAL
16285: IFTRUE 16289
16287: GO 16292
16289: POP
// ; end ;
16290: GO 16293
16292: POP
// for j = 1 to 3 do
16293: LD_ADDR_VAR 0 7
16297: PUSH
16298: DOUBLE
16299: LD_INT 1
16301: DEC
16302: ST_TO_ADDR
16303: LD_INT 3
16305: PUSH
16306: FOR_TO
16307: IFFALSE 16360
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16309: LD_ADDR_VAR 0 5
16313: PUSH
16314: LD_VAR 0 5
16318: PPUSH
16319: LD_VAR 0 7
16323: PPUSH
16324: LD_VAR 0 5
16328: PUSH
16329: LD_VAR 0 7
16333: ARRAY
16334: PUSH
16335: LD_VAR 0 9
16339: PUSH
16340: LD_VAR 0 7
16344: ARRAY
16345: PUSH
16346: LD_VAR 0 10
16350: MUL
16351: PLUS
16352: PPUSH
16353: CALL_OW 1
16357: ST_TO_ADDR
16358: GO 16306
16360: POP
16361: POP
// end ;
16362: GO 14845
16364: POP
16365: POP
// result := Replace ( result , 4 , tmp ) ;
16366: LD_ADDR_VAR 0 5
16370: PUSH
16371: LD_VAR 0 5
16375: PPUSH
16376: LD_INT 4
16378: PPUSH
16379: LD_VAR 0 8
16383: PPUSH
16384: CALL_OW 1
16388: ST_TO_ADDR
// end ;
16389: LD_VAR 0 5
16393: RET
// export function DangerAtRange ( unit , range ) ; begin
16394: LD_INT 0
16396: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16397: LD_ADDR_VAR 0 3
16401: PUSH
16402: LD_VAR 0 1
16406: PPUSH
16407: CALL_OW 255
16411: PPUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 250
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 251
16431: PPUSH
16432: LD_VAR 0 2
16436: PPUSH
16437: CALL 14697 0 4
16441: ST_TO_ADDR
// end ;
16442: LD_VAR 0 3
16446: RET
// export function DangerInArea ( side , area ) ; begin
16447: LD_INT 0
16449: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_VAR 0 2
16459: PPUSH
16460: LD_INT 81
16462: PUSH
16463: LD_VAR 0 1
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 70
16476: ST_TO_ADDR
// end ;
16477: LD_VAR 0 3
16481: RET
// export function IsExtension ( b ) ; begin
16482: LD_INT 0
16484: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_VAR 0 1
16494: PUSH
16495: LD_INT 23
16497: PUSH
16498: LD_INT 20
16500: PUSH
16501: LD_INT 22
16503: PUSH
16504: LD_INT 17
16506: PUSH
16507: LD_INT 24
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 19
16515: PUSH
16516: LD_INT 16
16518: PUSH
16519: LD_INT 25
16521: PUSH
16522: LD_INT 18
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: IN
16537: ST_TO_ADDR
// end ;
16538: LD_VAR 0 2
16542: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
16543: LD_INT 0
16545: PPUSH
16546: PPUSH
16547: PPUSH
// result := [ ] ;
16548: LD_ADDR_VAR 0 3
16552: PUSH
16553: EMPTY
16554: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16555: LD_ADDR_VAR 0 4
16559: PUSH
16560: LD_VAR 0 2
16564: PPUSH
16565: LD_INT 21
16567: PUSH
16568: LD_INT 3
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PPUSH
16575: CALL_OW 70
16579: ST_TO_ADDR
// if not tmp then
16580: LD_VAR 0 4
16584: NOT
16585: IFFALSE 16589
// exit ;
16587: GO 16647
// for i in tmp do
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_VAR 0 4
16598: PUSH
16599: FOR_IN
16600: IFFALSE 16635
// if GetBase ( i ) <> base then
16602: LD_VAR 0 5
16606: PPUSH
16607: CALL_OW 274
16611: PUSH
16612: LD_VAR 0 1
16616: NONEQUAL
16617: IFFALSE 16633
// ComLinkToBase ( base , i ) ;
16619: LD_VAR 0 1
16623: PPUSH
16624: LD_VAR 0 5
16628: PPUSH
16629: CALL_OW 169
16633: GO 16599
16635: POP
16636: POP
// result := tmp ;
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_VAR 0 4
16646: ST_TO_ADDR
// end ;
16647: LD_VAR 0 3
16651: RET
// export function ComComplete ( unit , b ) ; var i ; begin
16652: LD_INT 0
16654: PPUSH
16655: PPUSH
// if BuildingStatus ( b ) = bs_build then
16656: LD_VAR 0 2
16660: PPUSH
16661: CALL_OW 461
16665: PUSH
16666: LD_INT 1
16668: EQUAL
16669: IFFALSE 16729
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16671: LD_VAR 0 1
16675: PPUSH
16676: LD_STRING h
16678: PUSH
16679: LD_VAR 0 2
16683: PPUSH
16684: CALL_OW 250
16688: PUSH
16689: LD_VAR 0 2
16693: PPUSH
16694: CALL_OW 251
16698: PUSH
16699: LD_VAR 0 2
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: LD_INT 0
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: PPUSH
16725: CALL_OW 446
// end ;
16729: LD_VAR 0 3
16733: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16734: LD_INT 0
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
16742: LD_VAR 0 1
16746: NOT
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 263
16757: PUSH
16758: LD_INT 2
16760: EQUAL
16761: NOT
16762: OR
16763: IFFALSE 16767
// exit ;
16765: GO 17083
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16767: LD_ADDR_VAR 0 6
16771: PUSH
16772: LD_INT 22
16774: PUSH
16775: LD_VAR 0 1
16779: PPUSH
16780: CALL_OW 255
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 2
16791: PUSH
16792: LD_INT 30
16794: PUSH
16795: LD_INT 36
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 34
16804: PUSH
16805: LD_INT 31
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PPUSH
16821: CALL_OW 69
16825: ST_TO_ADDR
// if not tmp then
16826: LD_VAR 0 6
16830: NOT
16831: IFFALSE 16835
// exit ;
16833: GO 17083
// result := [ ] ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: EMPTY
16841: ST_TO_ADDR
// for i in tmp do
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_VAR 0 6
16851: PUSH
16852: FOR_IN
16853: IFFALSE 16924
// begin t := UnitsInside ( i ) ;
16855: LD_ADDR_VAR 0 4
16859: PUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: CALL_OW 313
16869: ST_TO_ADDR
// if t then
16870: LD_VAR 0 4
16874: IFFALSE 16922
// for j in t do
16876: LD_ADDR_VAR 0 7
16880: PUSH
16881: LD_VAR 0 4
16885: PUSH
16886: FOR_IN
16887: IFFALSE 16920
// result := Insert ( result , result + 1 , j ) ;
16889: LD_ADDR_VAR 0 2
16893: PUSH
16894: LD_VAR 0 2
16898: PPUSH
16899: LD_VAR 0 2
16903: PUSH
16904: LD_INT 1
16906: PLUS
16907: PPUSH
16908: LD_VAR 0 7
16912: PPUSH
16913: CALL_OW 2
16917: ST_TO_ADDR
16918: GO 16886
16920: POP
16921: POP
// end ;
16922: GO 16852
16924: POP
16925: POP
// if not result then
16926: LD_VAR 0 2
16930: NOT
16931: IFFALSE 16935
// exit ;
16933: GO 17083
// mech := result [ 1 ] ;
16935: LD_ADDR_VAR 0 5
16939: PUSH
16940: LD_VAR 0 2
16944: PUSH
16945: LD_INT 1
16947: ARRAY
16948: ST_TO_ADDR
// if result > 1 then
16949: LD_VAR 0 2
16953: PUSH
16954: LD_INT 1
16956: GREATER
16957: IFFALSE 17069
// for i = 2 to result do
16959: LD_ADDR_VAR 0 3
16963: PUSH
16964: DOUBLE
16965: LD_INT 2
16967: DEC
16968: ST_TO_ADDR
16969: LD_VAR 0 2
16973: PUSH
16974: FOR_TO
16975: IFFALSE 17067
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16977: LD_ADDR_VAR 0 4
16981: PUSH
16982: LD_VAR 0 2
16986: PUSH
16987: LD_VAR 0 3
16991: ARRAY
16992: PPUSH
16993: LD_INT 3
16995: PPUSH
16996: CALL_OW 259
17000: PUSH
17001: LD_VAR 0 2
17005: PUSH
17006: LD_VAR 0 3
17010: ARRAY
17011: PPUSH
17012: CALL_OW 432
17016: MINUS
17017: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17018: LD_VAR 0 4
17022: PUSH
17023: LD_VAR 0 5
17027: PPUSH
17028: LD_INT 3
17030: PPUSH
17031: CALL_OW 259
17035: PUSH
17036: LD_VAR 0 5
17040: PPUSH
17041: CALL_OW 432
17045: MINUS
17046: GREATEREQUAL
17047: IFFALSE 17065
// mech := result [ i ] ;
17049: LD_ADDR_VAR 0 5
17053: PUSH
17054: LD_VAR 0 2
17058: PUSH
17059: LD_VAR 0 3
17063: ARRAY
17064: ST_TO_ADDR
// end ;
17065: GO 16974
17067: POP
17068: POP
// ComLinkTo ( vehicle , mech ) ;
17069: LD_VAR 0 1
17073: PPUSH
17074: LD_VAR 0 5
17078: PPUSH
17079: CALL_OW 135
// end ;
17083: LD_VAR 0 2
17087: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17088: LD_INT 0
17090: PPUSH
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
17096: PPUSH
17097: PPUSH
17098: PPUSH
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
// result := [ ] ;
17103: LD_ADDR_VAR 0 7
17107: PUSH
17108: EMPTY
17109: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17110: LD_VAR 0 1
17114: PPUSH
17115: CALL_OW 266
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: IN
17130: NOT
17131: IFFALSE 17135
// exit ;
17133: GO 18766
// if name then
17135: LD_VAR 0 3
17139: IFFALSE 17155
// SetBName ( base_dep , name ) ;
17141: LD_VAR 0 1
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: CALL_OW 500
// base := GetBase ( base_dep ) ;
17155: LD_ADDR_VAR 0 15
17159: PUSH
17160: LD_VAR 0 1
17164: PPUSH
17165: CALL_OW 274
17169: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17170: LD_ADDR_VAR 0 16
17174: PUSH
17175: LD_VAR 0 1
17179: PPUSH
17180: CALL_OW 255
17184: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17185: LD_ADDR_VAR 0 17
17189: PUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 248
17199: ST_TO_ADDR
// if sources then
17200: LD_VAR 0 5
17204: IFFALSE 17251
// for i = 1 to 3 do
17206: LD_ADDR_VAR 0 8
17210: PUSH
17211: DOUBLE
17212: LD_INT 1
17214: DEC
17215: ST_TO_ADDR
17216: LD_INT 3
17218: PUSH
17219: FOR_TO
17220: IFFALSE 17249
// AddResourceType ( base , i , sources [ i ] ) ;
17222: LD_VAR 0 15
17226: PPUSH
17227: LD_VAR 0 8
17231: PPUSH
17232: LD_VAR 0 5
17236: PUSH
17237: LD_VAR 0 8
17241: ARRAY
17242: PPUSH
17243: CALL_OW 276
17247: GO 17219
17249: POP
17250: POP
// buildings := GetBaseBuildings ( base , area ) ;
17251: LD_ADDR_VAR 0 18
17255: PUSH
17256: LD_VAR 0 15
17260: PPUSH
17261: LD_VAR 0 2
17265: PPUSH
17266: CALL 16543 0 2
17270: ST_TO_ADDR
// InitHc ;
17271: CALL_OW 19
// InitUc ;
17275: CALL_OW 18
// uc_side := side ;
17279: LD_ADDR_OWVAR 20
17283: PUSH
17284: LD_VAR 0 16
17288: ST_TO_ADDR
// uc_nation := nation ;
17289: LD_ADDR_OWVAR 21
17293: PUSH
17294: LD_VAR 0 17
17298: ST_TO_ADDR
// if buildings then
17299: LD_VAR 0 18
17303: IFFALSE 18625
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17305: LD_ADDR_VAR 0 19
17309: PUSH
17310: LD_VAR 0 18
17314: PPUSH
17315: LD_INT 2
17317: PUSH
17318: LD_INT 30
17320: PUSH
17321: LD_INT 29
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 30
17330: PUSH
17331: LD_INT 30
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: PPUSH
17343: CALL_OW 72
17347: ST_TO_ADDR
// if tmp then
17348: LD_VAR 0 19
17352: IFFALSE 17400
// for i in tmp do
17354: LD_ADDR_VAR 0 8
17358: PUSH
17359: LD_VAR 0 19
17363: PUSH
17364: FOR_IN
17365: IFFALSE 17398
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17367: LD_VAR 0 8
17371: PPUSH
17372: CALL_OW 250
17376: PPUSH
17377: LD_VAR 0 8
17381: PPUSH
17382: CALL_OW 251
17386: PPUSH
17387: LD_VAR 0 16
17391: PPUSH
17392: CALL_OW 441
17396: GO 17364
17398: POP
17399: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17400: LD_VAR 0 18
17404: PPUSH
17405: LD_INT 2
17407: PUSH
17408: LD_INT 30
17410: PUSH
17411: LD_INT 32
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 30
17420: PUSH
17421: LD_INT 33
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: PPUSH
17433: CALL_OW 72
17437: IFFALSE 17525
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17439: LD_ADDR_VAR 0 8
17443: PUSH
17444: LD_VAR 0 18
17448: PPUSH
17449: LD_INT 2
17451: PUSH
17452: LD_INT 30
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 30
17464: PUSH
17465: LD_INT 33
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 72
17481: PUSH
17482: FOR_IN
17483: IFFALSE 17523
// begin if not GetBWeapon ( i ) then
17485: LD_VAR 0 8
17489: PPUSH
17490: CALL_OW 269
17494: NOT
17495: IFFALSE 17521
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17497: LD_VAR 0 8
17501: PPUSH
17502: LD_VAR 0 8
17506: PPUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: CALL 18771 0 2
17516: PPUSH
17517: CALL_OW 431
// end ;
17521: GO 17482
17523: POP
17524: POP
// end ; for i = 1 to personel do
17525: LD_ADDR_VAR 0 8
17529: PUSH
17530: DOUBLE
17531: LD_INT 1
17533: DEC
17534: ST_TO_ADDR
17535: LD_VAR 0 6
17539: PUSH
17540: FOR_TO
17541: IFFALSE 18605
// begin if i > 4 then
17543: LD_VAR 0 8
17547: PUSH
17548: LD_INT 4
17550: GREATER
17551: IFFALSE 17555
// break ;
17553: GO 18605
// case i of 1 :
17555: LD_VAR 0 8
17559: PUSH
17560: LD_INT 1
17562: DOUBLE
17563: EQUAL
17564: IFTRUE 17568
17566: GO 17648
17568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17569: LD_ADDR_VAR 0 12
17573: PUSH
17574: LD_VAR 0 18
17578: PPUSH
17579: LD_INT 22
17581: PUSH
17582: LD_VAR 0 16
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 58
17593: PUSH
17594: EMPTY
17595: LIST
17596: PUSH
17597: LD_INT 2
17599: PUSH
17600: LD_INT 30
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 4
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 30
17622: PUSH
17623: LD_INT 5
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PPUSH
17641: CALL_OW 72
17645: ST_TO_ADDR
17646: GO 17870
17648: LD_INT 2
17650: DOUBLE
17651: EQUAL
17652: IFTRUE 17656
17654: GO 17718
17656: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17657: LD_ADDR_VAR 0 12
17661: PUSH
17662: LD_VAR 0 18
17666: PPUSH
17667: LD_INT 22
17669: PUSH
17670: LD_VAR 0 16
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 2
17681: PUSH
17682: LD_INT 30
17684: PUSH
17685: LD_INT 0
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PPUSH
17711: CALL_OW 72
17715: ST_TO_ADDR
17716: GO 17870
17718: LD_INT 3
17720: DOUBLE
17721: EQUAL
17722: IFTRUE 17726
17724: GO 17788
17726: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17727: LD_ADDR_VAR 0 12
17731: PUSH
17732: LD_VAR 0 18
17736: PPUSH
17737: LD_INT 22
17739: PUSH
17740: LD_VAR 0 16
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: PUSH
17752: LD_INT 30
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 30
17764: PUSH
17765: LD_INT 3
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 72
17785: ST_TO_ADDR
17786: GO 17870
17788: LD_INT 4
17790: DOUBLE
17791: EQUAL
17792: IFTRUE 17796
17794: GO 17869
17796: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17797: LD_ADDR_VAR 0 12
17801: PUSH
17802: LD_VAR 0 18
17806: PPUSH
17807: LD_INT 22
17809: PUSH
17810: LD_VAR 0 16
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: LD_INT 30
17824: PUSH
17825: LD_INT 6
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 30
17834: PUSH
17835: LD_INT 7
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 30
17844: PUSH
17845: LD_INT 8
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PPUSH
17862: CALL_OW 72
17866: ST_TO_ADDR
17867: GO 17870
17869: POP
// if i = 1 then
17870: LD_VAR 0 8
17874: PUSH
17875: LD_INT 1
17877: EQUAL
17878: IFFALSE 17989
// begin tmp := [ ] ;
17880: LD_ADDR_VAR 0 19
17884: PUSH
17885: EMPTY
17886: ST_TO_ADDR
// for j in f do
17887: LD_ADDR_VAR 0 9
17891: PUSH
17892: LD_VAR 0 12
17896: PUSH
17897: FOR_IN
17898: IFFALSE 17971
// if GetBType ( j ) = b_bunker then
17900: LD_VAR 0 9
17904: PPUSH
17905: CALL_OW 266
17909: PUSH
17910: LD_INT 32
17912: EQUAL
17913: IFFALSE 17940
// tmp := Insert ( tmp , 1 , j ) else
17915: LD_ADDR_VAR 0 19
17919: PUSH
17920: LD_VAR 0 19
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_VAR 0 9
17932: PPUSH
17933: CALL_OW 2
17937: ST_TO_ADDR
17938: GO 17969
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17940: LD_ADDR_VAR 0 19
17944: PUSH
17945: LD_VAR 0 19
17949: PPUSH
17950: LD_VAR 0 19
17954: PUSH
17955: LD_INT 1
17957: PLUS
17958: PPUSH
17959: LD_VAR 0 9
17963: PPUSH
17964: CALL_OW 2
17968: ST_TO_ADDR
17969: GO 17897
17971: POP
17972: POP
// if tmp then
17973: LD_VAR 0 19
17977: IFFALSE 17989
// f := tmp ;
17979: LD_ADDR_VAR 0 12
17983: PUSH
17984: LD_VAR 0 19
17988: ST_TO_ADDR
// end ; x := personel [ i ] ;
17989: LD_ADDR_VAR 0 13
17993: PUSH
17994: LD_VAR 0 6
17998: PUSH
17999: LD_VAR 0 8
18003: ARRAY
18004: ST_TO_ADDR
// if x = - 1 then
18005: LD_VAR 0 13
18009: PUSH
18010: LD_INT 1
18012: NEG
18013: EQUAL
18014: IFFALSE 18223
// begin for j in f do
18016: LD_ADDR_VAR 0 9
18020: PUSH
18021: LD_VAR 0 12
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18219
// repeat InitHc ;
18029: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18033: LD_VAR 0 9
18037: PPUSH
18038: CALL_OW 266
18042: PUSH
18043: LD_INT 5
18045: EQUAL
18046: IFFALSE 18116
// begin if UnitsInside ( j ) < 3 then
18048: LD_VAR 0 9
18052: PPUSH
18053: CALL_OW 313
18057: PUSH
18058: LD_INT 3
18060: LESS
18061: IFFALSE 18097
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18063: LD_INT 0
18065: PPUSH
18066: LD_INT 5
18068: PUSH
18069: LD_INT 8
18071: PUSH
18072: LD_INT 9
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: LIST
18079: PUSH
18080: LD_VAR 0 17
18084: ARRAY
18085: PPUSH
18086: LD_VAR 0 4
18090: PPUSH
18091: CALL_OW 380
18095: GO 18114
// PrepareHuman ( false , i , skill ) ;
18097: LD_INT 0
18099: PPUSH
18100: LD_VAR 0 8
18104: PPUSH
18105: LD_VAR 0 4
18109: PPUSH
18110: CALL_OW 380
// end else
18114: GO 18133
// PrepareHuman ( false , i , skill ) ;
18116: LD_INT 0
18118: PPUSH
18119: LD_VAR 0 8
18123: PPUSH
18124: LD_VAR 0 4
18128: PPUSH
18129: CALL_OW 380
// un := CreateHuman ;
18133: LD_ADDR_VAR 0 14
18137: PUSH
18138: CALL_OW 44
18142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18143: LD_ADDR_VAR 0 7
18147: PUSH
18148: LD_VAR 0 7
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: LD_VAR 0 14
18160: PPUSH
18161: CALL_OW 2
18165: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18166: LD_VAR 0 14
18170: PPUSH
18171: LD_VAR 0 9
18175: PPUSH
18176: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18180: LD_VAR 0 9
18184: PPUSH
18185: CALL_OW 313
18189: PUSH
18190: LD_INT 6
18192: EQUAL
18193: PUSH
18194: LD_VAR 0 9
18198: PPUSH
18199: CALL_OW 266
18203: PUSH
18204: LD_INT 32
18206: PUSH
18207: LD_INT 31
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: IN
18214: OR
18215: IFFALSE 18029
18217: GO 18026
18219: POP
18220: POP
// end else
18221: GO 18603
// for j = 1 to x do
18223: LD_ADDR_VAR 0 9
18227: PUSH
18228: DOUBLE
18229: LD_INT 1
18231: DEC
18232: ST_TO_ADDR
18233: LD_VAR 0 13
18237: PUSH
18238: FOR_TO
18239: IFFALSE 18601
// begin InitHc ;
18241: CALL_OW 19
// if not f then
18245: LD_VAR 0 12
18249: NOT
18250: IFFALSE 18339
// begin PrepareHuman ( false , i , skill ) ;
18252: LD_INT 0
18254: PPUSH
18255: LD_VAR 0 8
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: CALL_OW 380
// un := CreateHuman ;
18269: LD_ADDR_VAR 0 14
18273: PUSH
18274: CALL_OW 44
18278: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18279: LD_ADDR_VAR 0 7
18283: PUSH
18284: LD_VAR 0 7
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_VAR 0 14
18296: PPUSH
18297: CALL_OW 2
18301: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18302: LD_VAR 0 14
18306: PPUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 250
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: CALL_OW 251
18326: PPUSH
18327: LD_INT 10
18329: PPUSH
18330: LD_INT 0
18332: PPUSH
18333: CALL_OW 50
// continue ;
18337: GO 18238
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18339: LD_VAR 0 12
18343: PUSH
18344: LD_INT 1
18346: ARRAY
18347: PPUSH
18348: CALL_OW 313
18352: PUSH
18353: LD_VAR 0 12
18357: PUSH
18358: LD_INT 1
18360: ARRAY
18361: PPUSH
18362: CALL_OW 266
18366: PUSH
18367: LD_INT 32
18369: PUSH
18370: LD_INT 31
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: IN
18377: AND
18378: PUSH
18379: LD_VAR 0 12
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: CALL_OW 313
18392: PUSH
18393: LD_INT 6
18395: EQUAL
18396: OR
18397: IFFALSE 18417
// f := Delete ( f , 1 ) ;
18399: LD_ADDR_VAR 0 12
18403: PUSH
18404: LD_VAR 0 12
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 3
18416: ST_TO_ADDR
// if not f then
18417: LD_VAR 0 12
18421: NOT
18422: IFFALSE 18440
// begin x := x + 2 ;
18424: LD_ADDR_VAR 0 13
18428: PUSH
18429: LD_VAR 0 13
18433: PUSH
18434: LD_INT 2
18436: PLUS
18437: ST_TO_ADDR
// continue ;
18438: GO 18238
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18440: LD_VAR 0 12
18444: PUSH
18445: LD_INT 1
18447: ARRAY
18448: PPUSH
18449: CALL_OW 266
18453: PUSH
18454: LD_INT 5
18456: EQUAL
18457: IFFALSE 18531
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18459: LD_VAR 0 12
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: CALL_OW 313
18472: PUSH
18473: LD_INT 3
18475: LESS
18476: IFFALSE 18512
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18478: LD_INT 0
18480: PPUSH
18481: LD_INT 5
18483: PUSH
18484: LD_INT 8
18486: PUSH
18487: LD_INT 9
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: LD_VAR 0 17
18499: ARRAY
18500: PPUSH
18501: LD_VAR 0 4
18505: PPUSH
18506: CALL_OW 380
18510: GO 18529
// PrepareHuman ( false , i , skill ) ;
18512: LD_INT 0
18514: PPUSH
18515: LD_VAR 0 8
18519: PPUSH
18520: LD_VAR 0 4
18524: PPUSH
18525: CALL_OW 380
// end else
18529: GO 18548
// PrepareHuman ( false , i , skill ) ;
18531: LD_INT 0
18533: PPUSH
18534: LD_VAR 0 8
18538: PPUSH
18539: LD_VAR 0 4
18543: PPUSH
18544: CALL_OW 380
// un := CreateHuman ;
18548: LD_ADDR_VAR 0 14
18552: PUSH
18553: CALL_OW 44
18557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18558: LD_ADDR_VAR 0 7
18562: PUSH
18563: LD_VAR 0 7
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_VAR 0 14
18575: PPUSH
18576: CALL_OW 2
18580: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18581: LD_VAR 0 14
18585: PPUSH
18586: LD_VAR 0 12
18590: PUSH
18591: LD_INT 1
18593: ARRAY
18594: PPUSH
18595: CALL_OW 52
// end ;
18599: GO 18238
18601: POP
18602: POP
// end ;
18603: GO 17540
18605: POP
18606: POP
// result := result ^ buildings ;
18607: LD_ADDR_VAR 0 7
18611: PUSH
18612: LD_VAR 0 7
18616: PUSH
18617: LD_VAR 0 18
18621: ADD
18622: ST_TO_ADDR
// end else
18623: GO 18766
// begin for i = 1 to personel do
18625: LD_ADDR_VAR 0 8
18629: PUSH
18630: DOUBLE
18631: LD_INT 1
18633: DEC
18634: ST_TO_ADDR
18635: LD_VAR 0 6
18639: PUSH
18640: FOR_TO
18641: IFFALSE 18764
// begin if i > 4 then
18643: LD_VAR 0 8
18647: PUSH
18648: LD_INT 4
18650: GREATER
18651: IFFALSE 18655
// break ;
18653: GO 18764
// x := personel [ i ] ;
18655: LD_ADDR_VAR 0 13
18659: PUSH
18660: LD_VAR 0 6
18664: PUSH
18665: LD_VAR 0 8
18669: ARRAY
18670: ST_TO_ADDR
// if x = - 1 then
18671: LD_VAR 0 13
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: EQUAL
18680: IFFALSE 18684
// continue ;
18682: GO 18640
// PrepareHuman ( false , i , skill ) ;
18684: LD_INT 0
18686: PPUSH
18687: LD_VAR 0 8
18691: PPUSH
18692: LD_VAR 0 4
18696: PPUSH
18697: CALL_OW 380
// un := CreateHuman ;
18701: LD_ADDR_VAR 0 14
18705: PUSH
18706: CALL_OW 44
18710: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18711: LD_VAR 0 14
18715: PPUSH
18716: LD_VAR 0 1
18720: PPUSH
18721: CALL_OW 250
18725: PPUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 251
18735: PPUSH
18736: LD_INT 10
18738: PPUSH
18739: LD_INT 0
18741: PPUSH
18742: CALL_OW 50
// result := result ^ un ;
18746: LD_ADDR_VAR 0 7
18750: PUSH
18751: LD_VAR 0 7
18755: PUSH
18756: LD_VAR 0 14
18760: ADD
18761: ST_TO_ADDR
// end ;
18762: GO 18640
18764: POP
18765: POP
// end ; end ;
18766: LD_VAR 0 7
18770: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
18775: PPUSH
18776: PPUSH
18777: PPUSH
18778: PPUSH
18779: PPUSH
18780: PPUSH
18781: PPUSH
18782: PPUSH
18783: PPUSH
18784: PPUSH
18785: PPUSH
18786: PPUSH
18787: PPUSH
18788: PPUSH
// result := false ;
18789: LD_ADDR_VAR 0 3
18793: PUSH
18794: LD_INT 0
18796: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18797: LD_VAR 0 1
18801: NOT
18802: PUSH
18803: LD_VAR 0 1
18807: PPUSH
18808: CALL_OW 266
18812: PUSH
18813: LD_INT 32
18815: PUSH
18816: LD_INT 33
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: IN
18823: NOT
18824: OR
18825: IFFALSE 18829
// exit ;
18827: GO 19965
// nat := GetNation ( tower ) ;
18829: LD_ADDR_VAR 0 12
18833: PUSH
18834: LD_VAR 0 1
18838: PPUSH
18839: CALL_OW 248
18843: ST_TO_ADDR
// side := GetSide ( tower ) ;
18844: LD_ADDR_VAR 0 16
18848: PUSH
18849: LD_VAR 0 1
18853: PPUSH
18854: CALL_OW 255
18858: ST_TO_ADDR
// x := GetX ( tower ) ;
18859: LD_ADDR_VAR 0 10
18863: PUSH
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 250
18873: ST_TO_ADDR
// y := GetY ( tower ) ;
18874: LD_ADDR_VAR 0 11
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 251
18888: ST_TO_ADDR
// if not x or not y then
18889: LD_VAR 0 10
18893: NOT
18894: PUSH
18895: LD_VAR 0 11
18899: NOT
18900: OR
18901: IFFALSE 18905
// exit ;
18903: GO 19965
// weapon := 0 ;
18905: LD_ADDR_VAR 0 18
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// fac_list := [ ] ;
18913: LD_ADDR_VAR 0 17
18917: PUSH
18918: EMPTY
18919: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
18920: LD_ADDR_VAR 0 6
18924: PUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 274
18934: PPUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: CALL 16543 0 2
18944: PPUSH
18945: LD_INT 30
18947: PUSH
18948: LD_INT 3
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 72
18959: ST_TO_ADDR
// if not factories then
18960: LD_VAR 0 6
18964: NOT
18965: IFFALSE 18969
// exit ;
18967: GO 19965
// for i in factories do
18969: LD_ADDR_VAR 0 8
18973: PUSH
18974: LD_VAR 0 6
18978: PUSH
18979: FOR_IN
18980: IFFALSE 19005
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18982: LD_ADDR_VAR 0 17
18986: PUSH
18987: LD_VAR 0 17
18991: PUSH
18992: LD_VAR 0 8
18996: PPUSH
18997: CALL_OW 478
19001: UNION
19002: ST_TO_ADDR
19003: GO 18979
19005: POP
19006: POP
// if not fac_list then
19007: LD_VAR 0 17
19011: NOT
19012: IFFALSE 19016
// exit ;
19014: GO 19965
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19016: LD_ADDR_VAR 0 5
19020: PUSH
19021: LD_INT 4
19023: PUSH
19024: LD_INT 5
19026: PUSH
19027: LD_INT 9
19029: PUSH
19030: LD_INT 10
19032: PUSH
19033: LD_INT 6
19035: PUSH
19036: LD_INT 7
19038: PUSH
19039: LD_INT 11
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 27
19053: PUSH
19054: LD_INT 28
19056: PUSH
19057: LD_INT 26
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 43
19071: PUSH
19072: LD_INT 44
19074: PUSH
19075: LD_INT 46
19077: PUSH
19078: LD_INT 45
19080: PUSH
19081: LD_INT 47
19083: PUSH
19084: LD_INT 49
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: LD_VAR 0 12
19104: ARRAY
19105: ST_TO_ADDR
// for i in list do
19106: LD_ADDR_VAR 0 8
19110: PUSH
19111: LD_VAR 0 5
19115: PUSH
19116: FOR_IN
19117: IFFALSE 19150
// if not i in fac_list then
19119: LD_VAR 0 8
19123: PUSH
19124: LD_VAR 0 17
19128: IN
19129: NOT
19130: IFFALSE 19148
// list := list diff i ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 8
19146: DIFF
19147: ST_TO_ADDR
19148: GO 19116
19150: POP
19151: POP
// if not list then
19152: LD_VAR 0 5
19156: NOT
19157: IFFALSE 19161
// exit ;
19159: GO 19965
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19161: LD_VAR 0 12
19165: PUSH
19166: LD_INT 3
19168: EQUAL
19169: PUSH
19170: LD_INT 49
19172: PUSH
19173: LD_VAR 0 5
19177: IN
19178: AND
19179: PUSH
19180: LD_INT 31
19182: PPUSH
19183: LD_VAR 0 16
19187: PPUSH
19188: CALL_OW 321
19192: PUSH
19193: LD_INT 2
19195: EQUAL
19196: AND
19197: IFFALSE 19257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19199: LD_INT 22
19201: PUSH
19202: LD_VAR 0 16
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 35
19213: PUSH
19214: LD_INT 49
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 91
19223: PUSH
19224: LD_VAR 0 1
19228: PUSH
19229: LD_INT 10
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PPUSH
19242: CALL_OW 69
19246: NOT
19247: IFFALSE 19257
// weapon := ru_time_lapser ;
19249: LD_ADDR_VAR 0 18
19253: PUSH
19254: LD_INT 49
19256: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19257: LD_VAR 0 12
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: IN
19272: PUSH
19273: LD_INT 11
19275: PUSH
19276: LD_VAR 0 5
19280: IN
19281: PUSH
19282: LD_INT 30
19284: PUSH
19285: LD_VAR 0 5
19289: IN
19290: OR
19291: AND
19292: PUSH
19293: LD_INT 6
19295: PPUSH
19296: LD_VAR 0 16
19300: PPUSH
19301: CALL_OW 321
19305: PUSH
19306: LD_INT 2
19308: EQUAL
19309: AND
19310: IFFALSE 19475
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19312: LD_INT 22
19314: PUSH
19315: LD_VAR 0 16
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: LD_INT 35
19329: PUSH
19330: LD_INT 11
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 35
19339: PUSH
19340: LD_INT 30
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 91
19354: PUSH
19355: LD_VAR 0 1
19359: PUSH
19360: LD_INT 18
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: PPUSH
19373: CALL_OW 69
19377: NOT
19378: PUSH
19379: LD_INT 22
19381: PUSH
19382: LD_VAR 0 16
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 30
19396: PUSH
19397: LD_INT 32
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 30
19406: PUSH
19407: LD_INT 33
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 91
19421: PUSH
19422: LD_VAR 0 1
19426: PUSH
19427: LD_INT 12
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: PPUSH
19443: CALL_OW 69
19447: PUSH
19448: LD_INT 2
19450: GREATER
19451: AND
19452: IFFALSE 19475
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19454: LD_ADDR_VAR 0 18
19458: PUSH
19459: LD_INT 11
19461: PUSH
19462: LD_INT 30
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_VAR 0 12
19473: ARRAY
19474: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19475: LD_VAR 0 18
19479: NOT
19480: PUSH
19481: LD_INT 40
19483: PPUSH
19484: LD_VAR 0 16
19488: PPUSH
19489: CALL_OW 321
19493: PUSH
19494: LD_INT 2
19496: EQUAL
19497: AND
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_VAR 0 5
19506: IN
19507: PUSH
19508: LD_INT 28
19510: PUSH
19511: LD_VAR 0 5
19515: IN
19516: OR
19517: PUSH
19518: LD_INT 45
19520: PUSH
19521: LD_VAR 0 5
19525: IN
19526: OR
19527: AND
19528: IFFALSE 19782
// begin hex := GetHexInfo ( x , y ) ;
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_VAR 0 10
19539: PPUSH
19540: LD_VAR 0 11
19544: PPUSH
19545: CALL_OW 546
19549: ST_TO_ADDR
// if hex [ 1 ] then
19550: LD_VAR 0 4
19554: PUSH
19555: LD_INT 1
19557: ARRAY
19558: IFFALSE 19562
// exit ;
19560: GO 19965
// height := hex [ 2 ] ;
19562: LD_ADDR_VAR 0 15
19566: PUSH
19567: LD_VAR 0 4
19571: PUSH
19572: LD_INT 2
19574: ARRAY
19575: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19576: LD_ADDR_VAR 0 14
19580: PUSH
19581: LD_INT 0
19583: PUSH
19584: LD_INT 2
19586: PUSH
19587: LD_INT 3
19589: PUSH
19590: LD_INT 5
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: ST_TO_ADDR
// for i in tmp do
19599: LD_ADDR_VAR 0 8
19603: PUSH
19604: LD_VAR 0 14
19608: PUSH
19609: FOR_IN
19610: IFFALSE 19780
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19612: LD_ADDR_VAR 0 9
19616: PUSH
19617: LD_VAR 0 10
19621: PPUSH
19622: LD_VAR 0 8
19626: PPUSH
19627: LD_INT 5
19629: PPUSH
19630: CALL_OW 272
19634: PUSH
19635: LD_VAR 0 11
19639: PPUSH
19640: LD_VAR 0 8
19644: PPUSH
19645: LD_INT 5
19647: PPUSH
19648: CALL_OW 273
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19657: LD_VAR 0 9
19661: PUSH
19662: LD_INT 1
19664: ARRAY
19665: PPUSH
19666: LD_VAR 0 9
19670: PUSH
19671: LD_INT 2
19673: ARRAY
19674: PPUSH
19675: CALL_OW 488
19679: IFFALSE 19778
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19681: LD_ADDR_VAR 0 4
19685: PUSH
19686: LD_VAR 0 9
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PPUSH
19695: LD_VAR 0 9
19699: PUSH
19700: LD_INT 2
19702: ARRAY
19703: PPUSH
19704: CALL_OW 546
19708: ST_TO_ADDR
// if hex [ 1 ] then
19709: LD_VAR 0 4
19713: PUSH
19714: LD_INT 1
19716: ARRAY
19717: IFFALSE 19721
// continue ;
19719: GO 19609
// h := hex [ 2 ] ;
19721: LD_ADDR_VAR 0 13
19725: PUSH
19726: LD_VAR 0 4
19730: PUSH
19731: LD_INT 2
19733: ARRAY
19734: ST_TO_ADDR
// if h + 7 < height then
19735: LD_VAR 0 13
19739: PUSH
19740: LD_INT 7
19742: PLUS
19743: PUSH
19744: LD_VAR 0 15
19748: LESS
19749: IFFALSE 19778
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19751: LD_ADDR_VAR 0 18
19755: PUSH
19756: LD_INT 7
19758: PUSH
19759: LD_INT 28
19761: PUSH
19762: LD_INT 45
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: LIST
19769: PUSH
19770: LD_VAR 0 12
19774: ARRAY
19775: ST_TO_ADDR
// break ;
19776: GO 19780
// end ; end ; end ;
19778: GO 19609
19780: POP
19781: POP
// end ; if not weapon then
19782: LD_VAR 0 18
19786: NOT
19787: IFFALSE 19847
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19789: LD_ADDR_VAR 0 5
19793: PUSH
19794: LD_VAR 0 5
19798: PUSH
19799: LD_INT 11
19801: PUSH
19802: LD_INT 30
19804: PUSH
19805: LD_INT 49
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: DIFF
19813: ST_TO_ADDR
// if not list then
19814: LD_VAR 0 5
19818: NOT
19819: IFFALSE 19823
// exit ;
19821: GO 19965
// weapon := list [ rand ( 1 , list ) ] ;
19823: LD_ADDR_VAR 0 18
19827: PUSH
19828: LD_VAR 0 5
19832: PUSH
19833: LD_INT 1
19835: PPUSH
19836: LD_VAR 0 5
19840: PPUSH
19841: CALL_OW 12
19845: ARRAY
19846: ST_TO_ADDR
// end ; if weapon then
19847: LD_VAR 0 18
19851: IFFALSE 19965
// begin tmp := CostOfWeapon ( weapon ) ;
19853: LD_ADDR_VAR 0 14
19857: PUSH
19858: LD_VAR 0 18
19862: PPUSH
19863: CALL_OW 451
19867: ST_TO_ADDR
// j := GetBase ( tower ) ;
19868: LD_ADDR_VAR 0 9
19872: PUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 274
19882: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19883: LD_VAR 0 9
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 275
19895: PUSH
19896: LD_VAR 0 14
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: GREATEREQUAL
19905: PUSH
19906: LD_VAR 0 9
19910: PPUSH
19911: LD_INT 2
19913: PPUSH
19914: CALL_OW 275
19918: PUSH
19919: LD_VAR 0 14
19923: PUSH
19924: LD_INT 2
19926: ARRAY
19927: GREATEREQUAL
19928: AND
19929: PUSH
19930: LD_VAR 0 9
19934: PPUSH
19935: LD_INT 3
19937: PPUSH
19938: CALL_OW 275
19942: PUSH
19943: LD_VAR 0 14
19947: PUSH
19948: LD_INT 3
19950: ARRAY
19951: GREATEREQUAL
19952: AND
19953: IFFALSE 19965
// result := weapon ;
19955: LD_ADDR_VAR 0 3
19959: PUSH
19960: LD_VAR 0 18
19964: ST_TO_ADDR
// end ; end ;
19965: LD_VAR 0 3
19969: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19970: LD_INT 0
19972: PPUSH
19973: PPUSH
// result := true ;
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if array1 = array2 then
19982: LD_VAR 0 1
19986: PUSH
19987: LD_VAR 0 2
19991: EQUAL
19992: IFFALSE 20052
// begin for i = 1 to array1 do
19994: LD_ADDR_VAR 0 4
19998: PUSH
19999: DOUBLE
20000: LD_INT 1
20002: DEC
20003: ST_TO_ADDR
20004: LD_VAR 0 1
20008: PUSH
20009: FOR_TO
20010: IFFALSE 20048
// if array1 [ i ] <> array2 [ i ] then
20012: LD_VAR 0 1
20016: PUSH
20017: LD_VAR 0 4
20021: ARRAY
20022: PUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_VAR 0 4
20032: ARRAY
20033: NONEQUAL
20034: IFFALSE 20046
// begin result := false ;
20036: LD_ADDR_VAR 0 3
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// break ;
20044: GO 20048
// end ;
20046: GO 20009
20048: POP
20049: POP
// end else
20050: GO 20060
// result := false ;
20052: LD_ADDR_VAR 0 3
20056: PUSH
20057: LD_INT 0
20059: ST_TO_ADDR
// end ;
20060: LD_VAR 0 3
20064: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20065: LD_INT 0
20067: PPUSH
20068: PPUSH
20069: PPUSH
// pom := GetBase ( fac ) ;
20070: LD_ADDR_VAR 0 5
20074: PUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: CALL_OW 274
20084: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20085: LD_ADDR_VAR 0 4
20089: PUSH
20090: LD_VAR 0 2
20094: PUSH
20095: LD_INT 1
20097: ARRAY
20098: PPUSH
20099: LD_VAR 0 2
20103: PUSH
20104: LD_INT 2
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 2
20112: PUSH
20113: LD_INT 3
20115: ARRAY
20116: PPUSH
20117: LD_VAR 0 2
20121: PUSH
20122: LD_INT 4
20124: ARRAY
20125: PPUSH
20126: CALL_OW 449
20130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20131: LD_ADDR_VAR 0 3
20135: PUSH
20136: LD_VAR 0 5
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 275
20148: PUSH
20149: LD_VAR 0 4
20153: PUSH
20154: LD_INT 1
20156: ARRAY
20157: GREATEREQUAL
20158: PUSH
20159: LD_VAR 0 5
20163: PPUSH
20164: LD_INT 2
20166: PPUSH
20167: CALL_OW 275
20171: PUSH
20172: LD_VAR 0 4
20176: PUSH
20177: LD_INT 2
20179: ARRAY
20180: GREATEREQUAL
20181: AND
20182: PUSH
20183: LD_VAR 0 5
20187: PPUSH
20188: LD_INT 3
20190: PPUSH
20191: CALL_OW 275
20195: PUSH
20196: LD_VAR 0 4
20200: PUSH
20201: LD_INT 3
20203: ARRAY
20204: GREATEREQUAL
20205: AND
20206: ST_TO_ADDR
// end ;
20207: LD_VAR 0 3
20211: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
// pom := GetBase ( building ) ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 274
20232: ST_TO_ADDR
// if not pom then
20233: LD_VAR 0 3
20237: NOT
20238: IFFALSE 20242
// exit ;
20240: GO 20412
// btype := GetBType ( building ) ;
20242: LD_ADDR_VAR 0 5
20246: PUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 266
20256: ST_TO_ADDR
// if btype = b_armoury then
20257: LD_VAR 0 5
20261: PUSH
20262: LD_INT 4
20264: EQUAL
20265: IFFALSE 20275
// btype := b_barracks ;
20267: LD_ADDR_VAR 0 5
20271: PUSH
20272: LD_INT 5
20274: ST_TO_ADDR
// if btype = b_depot then
20275: LD_VAR 0 5
20279: PUSH
20280: LD_INT 0
20282: EQUAL
20283: IFFALSE 20293
// btype := b_warehouse ;
20285: LD_ADDR_VAR 0 5
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// if btype = b_workshop then
20293: LD_VAR 0 5
20297: PUSH
20298: LD_INT 2
20300: EQUAL
20301: IFFALSE 20311
// btype := b_factory ;
20303: LD_ADDR_VAR 0 5
20307: PUSH
20308: LD_INT 3
20310: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20311: LD_ADDR_VAR 0 4
20315: PUSH
20316: LD_VAR 0 5
20320: PPUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 248
20330: PPUSH
20331: CALL_OW 450
20335: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20336: LD_ADDR_VAR 0 2
20340: PUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 1
20348: PPUSH
20349: CALL_OW 275
20353: PUSH
20354: LD_VAR 0 4
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: GREATEREQUAL
20363: PUSH
20364: LD_VAR 0 3
20368: PPUSH
20369: LD_INT 2
20371: PPUSH
20372: CALL_OW 275
20376: PUSH
20377: LD_VAR 0 4
20381: PUSH
20382: LD_INT 2
20384: ARRAY
20385: GREATEREQUAL
20386: AND
20387: PUSH
20388: LD_VAR 0 3
20392: PPUSH
20393: LD_INT 3
20395: PPUSH
20396: CALL_OW 275
20400: PUSH
20401: LD_VAR 0 4
20405: PUSH
20406: LD_INT 3
20408: ARRAY
20409: GREATEREQUAL
20410: AND
20411: ST_TO_ADDR
// end ;
20412: LD_VAR 0 2
20416: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20417: LD_INT 0
20419: PPUSH
20420: PPUSH
20421: PPUSH
// pom := GetBase ( building ) ;
20422: LD_ADDR_VAR 0 4
20426: PUSH
20427: LD_VAR 0 1
20431: PPUSH
20432: CALL_OW 274
20436: ST_TO_ADDR
// if not pom then
20437: LD_VAR 0 4
20441: NOT
20442: IFFALSE 20446
// exit ;
20444: GO 20547
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20446: LD_ADDR_VAR 0 5
20450: PUSH
20451: LD_VAR 0 2
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 248
20465: PPUSH
20466: CALL_OW 450
20470: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: LD_VAR 0 4
20480: PPUSH
20481: LD_INT 1
20483: PPUSH
20484: CALL_OW 275
20488: PUSH
20489: LD_VAR 0 5
20493: PUSH
20494: LD_INT 1
20496: ARRAY
20497: GREATEREQUAL
20498: PUSH
20499: LD_VAR 0 4
20503: PPUSH
20504: LD_INT 2
20506: PPUSH
20507: CALL_OW 275
20511: PUSH
20512: LD_VAR 0 5
20516: PUSH
20517: LD_INT 2
20519: ARRAY
20520: GREATEREQUAL
20521: AND
20522: PUSH
20523: LD_VAR 0 4
20527: PPUSH
20528: LD_INT 3
20530: PPUSH
20531: CALL_OW 275
20535: PUSH
20536: LD_VAR 0 5
20540: PUSH
20541: LD_INT 3
20543: ARRAY
20544: GREATEREQUAL
20545: AND
20546: ST_TO_ADDR
// end ;
20547: LD_VAR 0 3
20551: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
20552: LD_INT 0
20554: PPUSH
20555: PPUSH
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
// result := false ;
20564: LD_ADDR_VAR 0 6
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// if not base or not btype or not x or not y then
20572: LD_VAR 0 1
20576: NOT
20577: PUSH
20578: LD_VAR 0 2
20582: NOT
20583: OR
20584: PUSH
20585: LD_VAR 0 3
20589: NOT
20590: OR
20591: PUSH
20592: LD_VAR 0 4
20596: NOT
20597: OR
20598: IFFALSE 20602
// exit ;
20600: GO 21211
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
20602: LD_ADDR_VAR 0 12
20606: PUSH
20607: LD_VAR 0 2
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: LD_VAR 0 4
20621: PPUSH
20622: LD_VAR 0 5
20626: PPUSH
20627: LD_VAR 0 1
20631: PUSH
20632: LD_INT 1
20634: ARRAY
20635: PPUSH
20636: CALL_OW 248
20640: PPUSH
20641: LD_INT 0
20643: PPUSH
20644: CALL 22048 0 6
20648: ST_TO_ADDR
// if not hexes then
20649: LD_VAR 0 12
20653: NOT
20654: IFFALSE 20658
// exit ;
20656: GO 21211
// for i = 1 to hexes do
20658: LD_ADDR_VAR 0 7
20662: PUSH
20663: DOUBLE
20664: LD_INT 1
20666: DEC
20667: ST_TO_ADDR
20668: LD_VAR 0 12
20672: PUSH
20673: FOR_TO
20674: IFFALSE 21209
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20676: LD_ADDR_VAR 0 11
20680: PUSH
20681: LD_VAR 0 12
20685: PUSH
20686: LD_VAR 0 7
20690: ARRAY
20691: PUSH
20692: LD_INT 1
20694: ARRAY
20695: PPUSH
20696: LD_VAR 0 12
20700: PUSH
20701: LD_VAR 0 7
20705: ARRAY
20706: PUSH
20707: LD_INT 2
20709: ARRAY
20710: PPUSH
20711: CALL_OW 428
20715: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20716: LD_VAR 0 12
20720: PUSH
20721: LD_VAR 0 7
20725: ARRAY
20726: PUSH
20727: LD_INT 1
20729: ARRAY
20730: PPUSH
20731: LD_VAR 0 12
20735: PUSH
20736: LD_VAR 0 7
20740: ARRAY
20741: PUSH
20742: LD_INT 2
20744: ARRAY
20745: PPUSH
20746: CALL_OW 351
20750: PUSH
20751: LD_VAR 0 12
20755: PUSH
20756: LD_VAR 0 7
20760: ARRAY
20761: PUSH
20762: LD_INT 1
20764: ARRAY
20765: PPUSH
20766: LD_VAR 0 12
20770: PUSH
20771: LD_VAR 0 7
20775: ARRAY
20776: PUSH
20777: LD_INT 2
20779: ARRAY
20780: PPUSH
20781: CALL_OW 488
20785: NOT
20786: OR
20787: PUSH
20788: LD_VAR 0 11
20792: PPUSH
20793: CALL_OW 247
20797: PUSH
20798: LD_INT 3
20800: EQUAL
20801: OR
20802: IFFALSE 20808
// exit ;
20804: POP
20805: POP
20806: GO 21211
// if not tmp or not tmp in base then
20808: LD_VAR 0 11
20812: NOT
20813: PUSH
20814: LD_VAR 0 11
20818: PUSH
20819: LD_VAR 0 1
20823: IN
20824: NOT
20825: OR
20826: IFFALSE 20830
// continue ;
20828: GO 20673
// result := true ;
20830: LD_ADDR_VAR 0 6
20834: PUSH
20835: LD_INT 1
20837: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20838: LD_ADDR_VAR 0 15
20842: PUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: LD_INT 22
20850: PUSH
20851: LD_VAR 0 11
20855: PPUSH
20856: CALL_OW 255
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 30
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 72
20901: ST_TO_ADDR
// if dep then
20902: LD_VAR 0 15
20906: IFFALSE 21042
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20908: LD_ADDR_VAR 0 14
20912: PUSH
20913: LD_VAR 0 15
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 250
20926: PPUSH
20927: LD_VAR 0 15
20931: PUSH
20932: LD_INT 1
20934: ARRAY
20935: PPUSH
20936: CALL_OW 254
20940: PPUSH
20941: LD_INT 5
20943: PPUSH
20944: CALL_OW 272
20948: PUSH
20949: LD_VAR 0 15
20953: PUSH
20954: LD_INT 1
20956: ARRAY
20957: PPUSH
20958: CALL_OW 251
20962: PPUSH
20963: LD_VAR 0 15
20967: PUSH
20968: LD_INT 1
20970: ARRAY
20971: PPUSH
20972: CALL_OW 254
20976: PPUSH
20977: LD_INT 5
20979: PPUSH
20980: CALL_OW 273
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20989: LD_VAR 0 14
20993: PUSH
20994: LD_INT 1
20996: ARRAY
20997: PPUSH
20998: LD_VAR 0 14
21002: PUSH
21003: LD_INT 2
21005: ARRAY
21006: PPUSH
21007: CALL_OW 488
21011: IFFALSE 21042
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21013: LD_VAR 0 11
21017: PPUSH
21018: LD_VAR 0 14
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: LD_VAR 0 14
21031: PUSH
21032: LD_INT 2
21034: ARRAY
21035: PPUSH
21036: CALL_OW 111
// continue ;
21040: GO 20673
// end ; end ; r := GetDir ( tmp ) ;
21042: LD_ADDR_VAR 0 13
21046: PUSH
21047: LD_VAR 0 11
21051: PPUSH
21052: CALL_OW 254
21056: ST_TO_ADDR
// if r = 5 then
21057: LD_VAR 0 13
21061: PUSH
21062: LD_INT 5
21064: EQUAL
21065: IFFALSE 21075
// r := 0 ;
21067: LD_ADDR_VAR 0 13
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// for j = r to 5 do
21075: LD_ADDR_VAR 0 8
21079: PUSH
21080: DOUBLE
21081: LD_VAR 0 13
21085: DEC
21086: ST_TO_ADDR
21087: LD_INT 5
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21205
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21093: LD_ADDR_VAR 0 9
21097: PUSH
21098: LD_VAR 0 11
21102: PPUSH
21103: CALL_OW 250
21107: PPUSH
21108: LD_VAR 0 8
21112: PPUSH
21113: LD_INT 2
21115: PPUSH
21116: CALL_OW 272
21120: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21121: LD_ADDR_VAR 0 10
21125: PUSH
21126: LD_VAR 0 11
21130: PPUSH
21131: CALL_OW 251
21135: PPUSH
21136: LD_VAR 0 8
21140: PPUSH
21141: LD_INT 2
21143: PPUSH
21144: CALL_OW 273
21148: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21149: LD_VAR 0 9
21153: PPUSH
21154: LD_VAR 0 10
21158: PPUSH
21159: CALL_OW 488
21163: PUSH
21164: LD_VAR 0 9
21168: PPUSH
21169: LD_VAR 0 10
21173: PPUSH
21174: CALL_OW 428
21178: NOT
21179: AND
21180: IFFALSE 21203
// begin ComMoveXY ( tmp , _x , _y ) ;
21182: LD_VAR 0 11
21186: PPUSH
21187: LD_VAR 0 9
21191: PPUSH
21192: LD_VAR 0 10
21196: PPUSH
21197: CALL_OW 111
// break ;
21201: GO 21205
// end ; end ;
21203: GO 21090
21205: POP
21206: POP
// end ;
21207: GO 20673
21209: POP
21210: POP
// end ;
21211: LD_VAR 0 6
21215: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
21216: LD_INT 0
21218: PPUSH
21219: PPUSH
21220: PPUSH
21221: PPUSH
21222: PPUSH
21223: PPUSH
21224: PPUSH
21225: PPUSH
21226: PPUSH
21227: PPUSH
// result := false ;
21228: LD_ADDR_VAR 0 6
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21236: LD_VAR 0 1
21240: NOT
21241: PUSH
21242: LD_VAR 0 1
21246: PPUSH
21247: CALL_OW 266
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: IN
21262: NOT
21263: OR
21264: PUSH
21265: LD_VAR 0 2
21269: NOT
21270: OR
21271: PUSH
21272: LD_VAR 0 5
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 3
21288: PUSH
21289: LD_INT 4
21291: PUSH
21292: LD_INT 5
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: IN
21303: NOT
21304: OR
21305: PUSH
21306: LD_VAR 0 3
21310: PPUSH
21311: LD_VAR 0 4
21315: PPUSH
21316: CALL_OW 488
21320: NOT
21321: OR
21322: IFFALSE 21326
// exit ;
21324: GO 22043
// pom := GetBase ( depot ) ;
21326: LD_ADDR_VAR 0 10
21330: PUSH
21331: LD_VAR 0 1
21335: PPUSH
21336: CALL_OW 274
21340: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21341: LD_ADDR_VAR 0 11
21345: PUSH
21346: LD_VAR 0 2
21350: PPUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 248
21360: PPUSH
21361: CALL_OW 450
21365: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21366: LD_VAR 0 10
21370: PPUSH
21371: LD_INT 1
21373: PPUSH
21374: CALL_OW 275
21378: PUSH
21379: LD_VAR 0 11
21383: PUSH
21384: LD_INT 1
21386: ARRAY
21387: GREATEREQUAL
21388: PUSH
21389: LD_VAR 0 10
21393: PPUSH
21394: LD_INT 2
21396: PPUSH
21397: CALL_OW 275
21401: PUSH
21402: LD_VAR 0 11
21406: PUSH
21407: LD_INT 2
21409: ARRAY
21410: GREATEREQUAL
21411: AND
21412: PUSH
21413: LD_VAR 0 10
21417: PPUSH
21418: LD_INT 3
21420: PPUSH
21421: CALL_OW 275
21425: PUSH
21426: LD_VAR 0 11
21430: PUSH
21431: LD_INT 3
21433: ARRAY
21434: GREATEREQUAL
21435: AND
21436: NOT
21437: IFFALSE 21441
// exit ;
21439: GO 22043
// if GetBType ( depot ) = b_depot then
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL_OW 266
21450: PUSH
21451: LD_INT 0
21453: EQUAL
21454: IFFALSE 21466
// dist := 28 else
21456: LD_ADDR_VAR 0 14
21460: PUSH
21461: LD_INT 28
21463: ST_TO_ADDR
21464: GO 21474
// dist := 36 ;
21466: LD_ADDR_VAR 0 14
21470: PUSH
21471: LD_INT 36
21473: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21474: LD_VAR 0 1
21478: PPUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: LD_VAR 0 4
21488: PPUSH
21489: CALL_OW 297
21493: PUSH
21494: LD_VAR 0 14
21498: GREATER
21499: IFFALSE 21503
// exit ;
21501: GO 22043
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21503: LD_ADDR_VAR 0 12
21507: PUSH
21508: LD_VAR 0 2
21512: PPUSH
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_VAR 0 4
21522: PPUSH
21523: LD_VAR 0 5
21527: PPUSH
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL_OW 248
21537: PPUSH
21538: LD_INT 0
21540: PPUSH
21541: CALL 22048 0 6
21545: ST_TO_ADDR
// if not hexes then
21546: LD_VAR 0 12
21550: NOT
21551: IFFALSE 21555
// exit ;
21553: GO 22043
// hex := GetHexInfo ( x , y ) ;
21555: LD_ADDR_VAR 0 15
21559: PUSH
21560: LD_VAR 0 3
21564: PPUSH
21565: LD_VAR 0 4
21569: PPUSH
21570: CALL_OW 546
21574: ST_TO_ADDR
// if hex [ 1 ] then
21575: LD_VAR 0 15
21579: PUSH
21580: LD_INT 1
21582: ARRAY
21583: IFFALSE 21587
// exit ;
21585: GO 22043
// height := hex [ 2 ] ;
21587: LD_ADDR_VAR 0 13
21591: PUSH
21592: LD_VAR 0 15
21596: PUSH
21597: LD_INT 2
21599: ARRAY
21600: ST_TO_ADDR
// for i = 1 to hexes do
21601: LD_ADDR_VAR 0 7
21605: PUSH
21606: DOUBLE
21607: LD_INT 1
21609: DEC
21610: ST_TO_ADDR
21611: LD_VAR 0 12
21615: PUSH
21616: FOR_TO
21617: IFFALSE 21947
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21619: LD_VAR 0 12
21623: PUSH
21624: LD_VAR 0 7
21628: ARRAY
21629: PUSH
21630: LD_INT 1
21632: ARRAY
21633: PPUSH
21634: LD_VAR 0 12
21638: PUSH
21639: LD_VAR 0 7
21643: ARRAY
21644: PUSH
21645: LD_INT 2
21647: ARRAY
21648: PPUSH
21649: CALL_OW 488
21653: NOT
21654: PUSH
21655: LD_VAR 0 12
21659: PUSH
21660: LD_VAR 0 7
21664: ARRAY
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: PPUSH
21670: LD_VAR 0 12
21674: PUSH
21675: LD_VAR 0 7
21679: ARRAY
21680: PUSH
21681: LD_INT 2
21683: ARRAY
21684: PPUSH
21685: CALL_OW 428
21689: PUSH
21690: LD_INT 0
21692: GREATER
21693: OR
21694: PUSH
21695: LD_VAR 0 12
21699: PUSH
21700: LD_VAR 0 7
21704: ARRAY
21705: PUSH
21706: LD_INT 1
21708: ARRAY
21709: PPUSH
21710: LD_VAR 0 12
21714: PUSH
21715: LD_VAR 0 7
21719: ARRAY
21720: PUSH
21721: LD_INT 2
21723: ARRAY
21724: PPUSH
21725: CALL_OW 351
21729: OR
21730: IFFALSE 21736
// exit ;
21732: POP
21733: POP
21734: GO 22043
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21736: LD_ADDR_VAR 0 8
21740: PUSH
21741: LD_VAR 0 12
21745: PUSH
21746: LD_VAR 0 7
21750: ARRAY
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: LD_VAR 0 12
21760: PUSH
21761: LD_VAR 0 7
21765: ARRAY
21766: PUSH
21767: LD_INT 2
21769: ARRAY
21770: PPUSH
21771: CALL_OW 546
21775: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21776: LD_VAR 0 8
21780: PUSH
21781: LD_INT 1
21783: ARRAY
21784: PUSH
21785: LD_VAR 0 8
21789: PUSH
21790: LD_INT 2
21792: ARRAY
21793: PUSH
21794: LD_VAR 0 13
21798: PUSH
21799: LD_INT 2
21801: PLUS
21802: GREATER
21803: OR
21804: PUSH
21805: LD_VAR 0 8
21809: PUSH
21810: LD_INT 2
21812: ARRAY
21813: PUSH
21814: LD_VAR 0 13
21818: PUSH
21819: LD_INT 2
21821: MINUS
21822: LESS
21823: OR
21824: PUSH
21825: LD_VAR 0 8
21829: PUSH
21830: LD_INT 3
21832: ARRAY
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 8
21839: PUSH
21840: LD_INT 9
21842: PUSH
21843: LD_INT 10
21845: PUSH
21846: LD_INT 11
21848: PUSH
21849: LD_INT 12
21851: PUSH
21852: LD_INT 13
21854: PUSH
21855: LD_INT 16
21857: PUSH
21858: LD_INT 17
21860: PUSH
21861: LD_INT 18
21863: PUSH
21864: LD_INT 19
21866: PUSH
21867: LD_INT 20
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: IN
21888: NOT
21889: OR
21890: PUSH
21891: LD_VAR 0 8
21895: PUSH
21896: LD_INT 5
21898: ARRAY
21899: NOT
21900: OR
21901: PUSH
21902: LD_VAR 0 8
21906: PUSH
21907: LD_INT 6
21909: ARRAY
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: LD_INT 7
21919: PUSH
21920: LD_INT 9
21922: PUSH
21923: LD_INT 10
21925: PUSH
21926: LD_INT 11
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: IN
21937: NOT
21938: OR
21939: IFFALSE 21945
// exit ;
21941: POP
21942: POP
21943: GO 22043
// end ;
21945: GO 21616
21947: POP
21948: POP
// side := GetSide ( depot ) ;
21949: LD_ADDR_VAR 0 9
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 255
21963: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21964: LD_VAR 0 9
21968: PPUSH
21969: LD_VAR 0 3
21973: PPUSH
21974: LD_VAR 0 4
21978: PPUSH
21979: LD_INT 20
21981: PPUSH
21982: CALL 14697 0 4
21986: PUSH
21987: LD_INT 4
21989: ARRAY
21990: IFFALSE 21994
// exit ;
21992: GO 22043
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21994: LD_VAR 0 2
21998: PUSH
21999: LD_INT 29
22001: PUSH
22002: LD_INT 30
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: IN
22009: PUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: LD_VAR 0 4
22019: PPUSH
22020: LD_VAR 0 9
22024: PPUSH
22025: CALL_OW 440
22029: NOT
22030: AND
22031: IFFALSE 22035
// exit ;
22033: GO 22043
// result := true ;
22035: LD_ADDR_VAR 0 6
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// end ;
22043: LD_VAR 0 6
22047: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22048: LD_INT 0
22050: PPUSH
22051: PPUSH
22052: PPUSH
22053: PPUSH
22054: PPUSH
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
22071: PPUSH
22072: PPUSH
22073: PPUSH
22074: PPUSH
22075: PPUSH
22076: PPUSH
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
// result = [ ] ;
22108: LD_ADDR_VAR 0 7
22112: PUSH
22113: EMPTY
22114: ST_TO_ADDR
// temp_list = [ ] ;
22115: LD_ADDR_VAR 0 9
22119: PUSH
22120: EMPTY
22121: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22122: LD_VAR 0 4
22126: PUSH
22127: LD_INT 0
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: LD_INT 2
22135: PUSH
22136: LD_INT 3
22138: PUSH
22139: LD_INT 4
22141: PUSH
22142: LD_INT 5
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: IN
22153: NOT
22154: PUSH
22155: LD_VAR 0 1
22159: PUSH
22160: LD_INT 0
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: IN
22170: PUSH
22171: LD_VAR 0 5
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: LD_INT 3
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: IN
22190: NOT
22191: AND
22192: OR
22193: IFFALSE 22197
// exit ;
22195: GO 40588
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22197: LD_VAR 0 1
22201: PUSH
22202: LD_INT 6
22204: PUSH
22205: LD_INT 7
22207: PUSH
22208: LD_INT 8
22210: PUSH
22211: LD_INT 13
22213: PUSH
22214: LD_INT 12
22216: PUSH
22217: LD_INT 15
22219: PUSH
22220: LD_INT 11
22222: PUSH
22223: LD_INT 14
22225: PUSH
22226: LD_INT 10
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: IN
22240: IFFALSE 22250
// btype = b_lab ;
22242: LD_ADDR_VAR 0 1
22246: PUSH
22247: LD_INT 6
22249: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22250: LD_VAR 0 6
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: LIST
22268: IN
22269: NOT
22270: PUSH
22271: LD_VAR 0 1
22275: PUSH
22276: LD_INT 0
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 2
22284: PUSH
22285: LD_INT 3
22287: PUSH
22288: LD_INT 6
22290: PUSH
22291: LD_INT 36
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 31
22302: PUSH
22303: LD_INT 32
22305: PUSH
22306: LD_INT 33
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: IN
22322: NOT
22323: PUSH
22324: LD_VAR 0 6
22328: PUSH
22329: LD_INT 1
22331: EQUAL
22332: AND
22333: OR
22334: PUSH
22335: LD_VAR 0 1
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: IN
22350: NOT
22351: PUSH
22352: LD_VAR 0 6
22356: PUSH
22357: LD_INT 2
22359: EQUAL
22360: AND
22361: OR
22362: IFFALSE 22372
// mode = 0 ;
22364: LD_ADDR_VAR 0 6
22368: PUSH
22369: LD_INT 0
22371: ST_TO_ADDR
// case mode of 0 :
22372: LD_VAR 0 6
22376: PUSH
22377: LD_INT 0
22379: DOUBLE
22380: EQUAL
22381: IFTRUE 22385
22383: GO 33838
22385: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22386: LD_ADDR_VAR 0 11
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 0
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 0
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 1
22444: NEG
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 1
22459: NEG
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 1
22467: NEG
22468: PUSH
22469: LD_INT 2
22471: NEG
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 0
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: NEG
22522: PUSH
22523: LD_INT 1
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22579: LD_ADDR_VAR 0 12
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 1
22648: NEG
22649: PUSH
22650: LD_INT 1
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 1
22663: NEG
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 0
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: NEG
22703: PUSH
22704: LD_INT 0
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 1
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 2
22725: NEG
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 3
22736: NEG
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 3
22747: NEG
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22775: LD_ADDR_VAR 0 13
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 0
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: NEG
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 1
22848: NEG
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 2
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: LD_INT 3
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: NEG
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 3
22946: NEG
22947: PUSH
22948: LD_INT 3
22950: NEG
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22974: LD_ADDR_VAR 0 14
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 1
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 0
23067: PUSH
23068: LD_INT 2
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: PUSH
23090: LD_INT 2
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 3
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: LD_INT 3
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 2
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23170: LD_ADDR_VAR 0 15
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 1
23190: NEG
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: LD_INT 1
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 2
23262: PUSH
23263: LD_INT 0
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 2
23293: NEG
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 0
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23363: LD_ADDR_VAR 0 16
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 1
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 1
23391: PUSH
23392: LD_INT 0
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 0
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 1
23444: NEG
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: LD_INT 2
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: NEG
23487: PUSH
23488: LD_INT 1
23490: NEG
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 2
23498: NEG
23499: PUSH
23500: LD_INT 2
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 3
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23556: LD_ADDR_VAR 0 17
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 1
23576: NEG
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 0
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 1
23614: NEG
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 1
23637: NEG
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 2
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 2
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: LD_INT 2
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 2
23732: NEG
23733: PUSH
23734: LD_INT 0
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 2
23743: NEG
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: LD_INT 2
23759: NEG
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23786: LD_ADDR_VAR 0 18
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 1
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 0
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 2
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 0
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: NEG
23952: PUSH
23953: LD_INT 1
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: NEG
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 2
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 2
23985: NEG
23986: PUSH
23987: LD_INT 2
23989: NEG
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24016: LD_ADDR_VAR 0 19
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 0
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 1
24036: NEG
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: LD_INT 0
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 0
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: LD_INT 2
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 2
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: LD_INT 1
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 2
24192: NEG
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: LD_INT 2
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24246: LD_ADDR_VAR 0 20
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 0
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 0
24294: PUSH
24295: LD_INT 1
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: LD_INT 2
24331: NEG
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 2
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 2
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 2
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 2
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 2
24422: NEG
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 2
24433: NEG
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: LD_INT 2
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24476: LD_ADDR_VAR 0 21
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 0
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: LD_INT 1
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: NEG
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: LD_INT 2
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: LD_INT 2
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 2
24652: NEG
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: NEG
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24706: LD_ADDR_VAR 0 22
24710: PUSH
24711: LD_INT 0
24713: PUSH
24714: LD_INT 0
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 1
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 0
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 1
24764: NEG
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 0
24799: PUSH
24800: LD_INT 2
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 2
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 2
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 2
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 2
24905: NEG
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24936: LD_ADDR_VAR 0 23
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 0
24953: PUSH
24954: LD_INT 1
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 1
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 1
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: LD_INT 2
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: LD_INT 2
25032: NEG
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: LD_INT 2
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: LD_INT 2
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 1
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: LD_INT 2
25139: NEG
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: LD_INT 3
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 3
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25216: LD_ADDR_VAR 0 24
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: LD_INT 2
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 2
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: LD_INT 1
25407: NEG
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 2
25415: NEG
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 3
25449: PUSH
25450: LD_INT 1
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25492: LD_ADDR_VAR 0 25
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 0
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 1
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 1
25550: NEG
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: LD_INT 2
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 2
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: NEG
25692: PUSH
25693: LD_INT 2
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25766: LD_ADDR_VAR 0 26
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: LD_INT 2
25862: NEG
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 2
25977: PUSH
25978: LD_INT 3
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 2
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26042: LD_ADDR_VAR 0 27
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: LD_INT 0
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: LD_INT 0
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: LD_INT 2
26127: NEG
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 2
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 2
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: NEG
26242: PUSH
26243: LD_INT 2
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: NEG
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 3
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26322: LD_ADDR_VAR 0 28
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 2
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: NEG
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: NEG
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: NEG
26534: PUSH
26535: LD_INT 3
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 3
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26604: LD_ADDR_VAR 0 29
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 2
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: LD_INT 0
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 2
26770: NEG
26771: PUSH
26772: LD_INT 1
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: NEG
26795: PUSH
26796: LD_INT 3
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 3
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26883: LD_ADDR_VAR 0 30
26887: PUSH
26888: LD_INT 0
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: NEG
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 0
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 2
27049: NEG
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: LD_INT 1
27064: NEG
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 3
27076: NEG
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 3
27095: PUSH
27096: LD_INT 2
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: LD_INT 3
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 2
27115: NEG
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 3
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27161: LD_ADDR_VAR 0 31
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 1
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 2
27326: NEG
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 3
27354: NEG
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 2
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 3
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 3
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 2
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 3
27404: NEG
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27439: LD_ADDR_VAR 0 32
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 2
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 3
27632: NEG
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 2
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 2
27661: PUSH
27662: LD_INT 3
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 2
27671: NEG
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 3
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27717: LD_ADDR_VAR 0 33
27721: PUSH
27722: LD_INT 0
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: LD_INT 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 0
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: NEG
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 2
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 2
27895: NEG
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: NEG
27908: PUSH
27909: LD_INT 3
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 3
27961: NEG
27962: PUSH
27963: LD_INT 2
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27996: LD_ADDR_VAR 0 34
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: NEG
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: NEG
28164: PUSH
28165: LD_INT 1
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 2
28175: NEG
28176: PUSH
28177: LD_INT 2
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 3
28191: NEG
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 3
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: NEG
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 3
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28276: LD_ADDR_VAR 0 35
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 2
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: PUSH
28365: LD_INT 2
28367: NEG
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28388: LD_ADDR_VAR 0 36
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28500: LD_ADDR_VAR 0 37
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 0
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 0
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 1
28569: NEG
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28612: LD_ADDR_VAR 0 38
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: LD_INT 0
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28724: LD_ADDR_VAR 0 39
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 1
28782: NEG
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: NEG
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28836: LD_ADDR_VAR 0 40
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28948: LD_ADDR_VAR 0 41
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: LD_INT 2
29085: PUSH
29086: EMPTY
29087: LIST
29088: LIST
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 2
29103: NEG
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 2
29126: NEG
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 2
29138: NEG
29139: PUSH
29140: LD_INT 3
29142: NEG
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 2
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: LD_INT 3
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 2
29201: PUSH
29202: LD_INT 3
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: NEG
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 3
29222: NEG
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 3
29245: NEG
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 3
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29298: LD_ADDR_VAR 0 42
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 1
29356: NEG
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: LD_INT 2
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 2
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 2
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: LD_INT 2
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: LD_INT 2
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 1
29453: NEG
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: PUSH
29462: LD_INT 2
29464: NEG
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: LD_INT 3
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: LD_INT 3
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 3
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 3
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 3
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 3
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 3
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 3
29607: NEG
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29648: LD_ADDR_VAR 0 43
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: NEG
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: NEG
29730: PUSH
29731: LD_INT 2
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: LD_INT 2
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 2
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 3
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 3
29944: NEG
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 3
29955: NEG
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29996: LD_ADDR_VAR 0 44
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 1
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 3
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: LD_INT 3
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 3
30281: NEG
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 3
30293: NEG
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 3
30305: NEG
30306: PUSH
30307: LD_INT 3
30309: NEG
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30346: LD_ADDR_VAR 0 45
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 2
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 1
30501: NEG
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: NEG
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 2
30524: NEG
30525: PUSH
30526: LD_INT 2
30528: NEG
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: LD_INT 3
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 2
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 3
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 3
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 3
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: NEG
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: NEG
30656: PUSH
30657: LD_INT 3
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30696: LD_ADDR_VAR 0 46
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: NEG
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: LD_INT 2
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 1
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: LD_INT 3
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: LD_INT 2
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: NEG
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: NEG
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31044: LD_ADDR_VAR 0 47
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 0
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31195: LD_ADDR_VAR 0 48
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: LD_INT 2
31280: NEG
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31342: LD_ADDR_VAR 0 49
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31486: LD_ADDR_VAR 0 50
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: LD_INT 0
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 1
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 1
31555: NEG
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 2
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: LD_INT 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31630: LD_ADDR_VAR 0 51
31634: PUSH
31635: LD_INT 0
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31777: LD_ADDR_VAR 0 52
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: NEG
31905: PUSH
31906: LD_INT 2
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31928: LD_ADDR_VAR 0 53
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: NEG
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: NEG
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32158: LD_ADDR_VAR 0 54
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 2
32334: NEG
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: NEG
32346: PUSH
32347: LD_INT 1
32349: NEG
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 2
32357: NEG
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32388: LD_ADDR_VAR 0 55
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 1
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: NEG
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32618: LD_ADDR_VAR 0 56
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 1
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32848: LD_ADDR_VAR 0 57
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: LD_INT 2
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 2
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 0
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33078: LD_ADDR_VAR 0 58
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33308: LD_ADDR_VAR 0 59
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33396: LD_ADDR_VAR 0 60
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33484: LD_ADDR_VAR 0 61
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33572: LD_ADDR_VAR 0 62
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33660: LD_ADDR_VAR 0 63
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 0
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33748: LD_ADDR_VAR 0 64
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 0
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: NEG
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// end ; 1 :
33836: GO 39733
33838: LD_INT 1
33840: DOUBLE
33841: EQUAL
33842: IFTRUE 33846
33844: GO 36469
33846: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33847: LD_ADDR_VAR 0 11
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33891: LD_ADDR_VAR 0 12
33895: PUSH
33896: LD_INT 2
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: PUSH
33920: LD_INT 1
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33932: LD_ADDR_VAR 0 13
33936: PUSH
33937: LD_INT 3
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: LIST
33971: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33972: LD_ADDR_VAR 0 14
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 3
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34013: LD_ADDR_VAR 0 15
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 3
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34057: LD_ADDR_VAR 0 16
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: LD_INT 3
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 3
34088: NEG
34089: PUSH
34090: LD_INT 3
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34103: LD_ADDR_VAR 0 17
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 3
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 3
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34147: LD_ADDR_VAR 0 18
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34188: LD_ADDR_VAR 0 19
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: LD_INT 2
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: LD_INT 3
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34228: LD_ADDR_VAR 0 20
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: LIST
34268: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34269: LD_ADDR_VAR 0 21
34273: PUSH
34274: LD_INT 2
34276: NEG
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 3
34287: NEG
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 3
34298: NEG
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34313: LD_ADDR_VAR 0 22
34317: PUSH
34318: LD_INT 2
34320: NEG
34321: PUSH
34322: LD_INT 3
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 3
34344: NEG
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34359: LD_ADDR_VAR 0 23
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 3
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 4
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 3
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34403: LD_ADDR_VAR 0 24
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34444: LD_ADDR_VAR 0 25
34448: PUSH
34449: LD_INT 3
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 4
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34484: LD_ADDR_VAR 0 26
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 4
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: LD_INT 3
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34525: LD_ADDR_VAR 0 27
34529: PUSH
34530: LD_INT 3
34532: NEG
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 3
34543: NEG
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 4
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34569: LD_ADDR_VAR 0 28
34573: PUSH
34574: LD_INT 3
34576: NEG
34577: PUSH
34578: LD_INT 3
34580: NEG
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 3
34588: NEG
34589: PUSH
34590: LD_INT 4
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 4
34600: NEG
34601: PUSH
34602: LD_INT 3
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34615: LD_ADDR_VAR 0 29
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 3
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 2
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 4
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 4
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 3
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 5
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 5
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 4
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 6
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 6
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 5
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34770: LD_ADDR_VAR 0 30
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 3
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 3
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 3
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 4
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 5
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 6
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 6
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34913: LD_ADDR_VAR 0 31
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: LD_INT 3
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: LD_INT 4
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: LD_INT 4
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: LD_INT 5
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: LD_INT 5
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 6
35010: PUSH
35011: LD_INT 5
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 6
35020: PUSH
35021: LD_INT 6
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 5
35030: PUSH
35031: LD_INT 6
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35052: LD_ADDR_VAR 0 32
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 4
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 4
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 5
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 5
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 4
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 6
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 6
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 5
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35195: LD_ADDR_VAR 0 33
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: NEG
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 4
35247: NEG
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 4
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 4
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 5
35281: NEG
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 5
35292: NEG
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 5
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 6
35315: NEG
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 6
35326: NEG
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35350: LD_ADDR_VAR 0 34
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: LD_INT 3
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 3
35369: NEG
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 3
35381: NEG
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 3
35393: NEG
35394: PUSH
35395: LD_INT 4
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 4
35405: NEG
35406: PUSH
35407: LD_INT 3
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 4
35417: NEG
35418: PUSH
35419: LD_INT 4
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 4
35429: NEG
35430: PUSH
35431: LD_INT 5
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 5
35441: NEG
35442: PUSH
35443: LD_INT 4
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 5
35453: NEG
35454: PUSH
35455: LD_INT 5
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 5
35465: NEG
35466: PUSH
35467: LD_INT 6
35469: NEG
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 6
35477: NEG
35478: PUSH
35479: LD_INT 5
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 6
35489: NEG
35490: PUSH
35491: LD_INT 6
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35513: LD_ADDR_VAR 0 41
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: LD_INT 3
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35557: LD_ADDR_VAR 0 42
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35598: LD_ADDR_VAR 0 43
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 3
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 3
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: LIST
35637: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35638: LD_ADDR_VAR 0 44
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35679: LD_ADDR_VAR 0 45
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: LD_INT 0
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35723: LD_ADDR_VAR 0 46
35727: PUSH
35728: LD_INT 2
35730: NEG
35731: PUSH
35732: LD_INT 2
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35769: LD_ADDR_VAR 0 47
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: LD_INT 3
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 3
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35802: LD_ADDR_VAR 0 48
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35833: LD_ADDR_VAR 0 49
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35862: LD_ADDR_VAR 0 50
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 3
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35891: LD_ADDR_VAR 0 51
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 2
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 2
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35922: LD_ADDR_VAR 0 52
35926: PUSH
35927: LD_INT 3
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 3
35941: NEG
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35955: LD_ADDR_VAR 0 53
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 3
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: LD_INT 3
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35999: LD_ADDR_VAR 0 54
36003: PUSH
36004: LD_INT 2
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 3
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 3
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: LIST
36039: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36040: LD_ADDR_VAR 0 55
36044: PUSH
36045: LD_INT 3
36047: PUSH
36048: LD_INT 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 3
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36080: LD_ADDR_VAR 0 56
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 3
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36121: LD_ADDR_VAR 0 57
36125: PUSH
36126: LD_INT 2
36128: NEG
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 3
36139: NEG
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 3
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36165: LD_ADDR_VAR 0 58
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 3
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: LD_INT 3
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36211: LD_ADDR_VAR 0 59
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: LD_INT 2
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36255: LD_ADDR_VAR 0 60
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 2
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36296: LD_ADDR_VAR 0 61
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: LIST
36335: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36336: LD_ADDR_VAR 0 62
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: LD_INT 2
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36377: LD_ADDR_VAR 0 63
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36421: LD_ADDR_VAR 0 64
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// end ; 2 :
36467: GO 39733
36469: LD_INT 2
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36477
36475: GO 39732
36477: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36478: LD_ADDR_VAR 0 29
36482: PUSH
36483: LD_INT 4
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 4
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 5
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 4
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 3
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 3
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 3
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 5
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: LD_INT 3
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 4
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 4
36608: PUSH
36609: LD_INT 4
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: PUSH
36619: LD_INT 4
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 2
36628: PUSH
36629: LD_INT 3
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 4
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 4
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 4
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: LD_INT 4
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 5
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 5
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 4
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 2
36740: PUSH
36741: LD_INT 5
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 3
36761: NEG
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 3
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 3
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 4
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 4
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 4
36840: NEG
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 4
36863: NEG
36864: PUSH
36865: LD_INT 4
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 4
36875: NEG
36876: PUSH
36877: LD_INT 5
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 3
36887: NEG
36888: PUSH
36889: LD_INT 4
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 3
36899: NEG
36900: PUSH
36901: LD_INT 3
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 4
36911: NEG
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 5
36923: NEG
36924: PUSH
36925: LD_INT 4
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 5
36935: NEG
36936: PUSH
36937: LD_INT 5
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: NEG
36948: PUSH
36949: LD_INT 5
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 5
36959: NEG
36960: PUSH
36961: LD_INT 3
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37016: LD_ADDR_VAR 0 30
37020: PUSH
37021: LD_INT 4
37023: PUSH
37024: LD_INT 4
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 4
37033: PUSH
37034: LD_INT 3
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 5
37043: PUSH
37044: LD_INT 4
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 5
37053: PUSH
37054: LD_INT 5
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 4
37063: PUSH
37064: LD_INT 5
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 5
37093: PUSH
37094: LD_INT 3
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 3
37103: PUSH
37104: LD_INT 5
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: LD_INT 3
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: NEG
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 2
37185: PUSH
37186: LD_INT 4
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 4
37206: NEG
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 4
37217: NEG
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 4
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 5
37262: NEG
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 5
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 5
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: NEG
37309: PUSH
37310: LD_INT 3
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 3
37320: NEG
37321: PUSH
37322: LD_INT 4
37324: NEG
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 3
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 4
37368: NEG
37369: PUSH
37370: LD_INT 3
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 4
37380: NEG
37381: PUSH
37382: LD_INT 4
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 4
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 4
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: LD_INT 4
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 5
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: LD_INT 4
37441: NEG
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: PUSH
37450: LD_INT 3
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: LD_INT 4
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: LD_INT 5
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 3
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 5
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37563: LD_ADDR_VAR 0 31
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 4
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 4
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 5
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 5
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: LD_INT 4
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: PUSH
37643: LD_INT 5
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 2
37652: NEG
37653: PUSH
37654: LD_INT 3
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: LD_INT 0
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 4
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 4
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 4
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 4
37765: NEG
37766: PUSH
37767: LD_INT 4
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 4
37777: NEG
37778: PUSH
37779: LD_INT 5
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 3
37789: NEG
37790: PUSH
37791: LD_INT 4
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: LD_INT 3
37805: NEG
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 4
37813: NEG
37814: PUSH
37815: LD_INT 3
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 5
37825: NEG
37826: PUSH
37827: LD_INT 4
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 5
37837: NEG
37838: PUSH
37839: LD_INT 5
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: NEG
37850: PUSH
37851: LD_INT 5
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 5
37861: NEG
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: LD_INT 4
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 3
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: LD_INT 2
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 2
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 4
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 4
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 4
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 4
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 5
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 5
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 4
38016: PUSH
38017: LD_INT 1
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 3
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 3
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 5
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38113: LD_ADDR_VAR 0 32
38117: PUSH
38118: LD_INT 4
38120: NEG
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 4
38131: NEG
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 3
38143: NEG
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 4
38165: NEG
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 5
38176: NEG
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 5
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 5
38199: NEG
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 3
38234: NEG
38235: PUSH
38236: LD_INT 4
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 4
38282: NEG
38283: PUSH
38284: LD_INT 3
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 4
38294: NEG
38295: PUSH
38296: LD_INT 4
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 4
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 4
38318: NEG
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: LD_INT 4
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 5
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 4
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: LD_INT 3
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 3
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 4
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 5
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: LD_INT 5
38424: NEG
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 3
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 4
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 4
38463: PUSH
38464: LD_INT 1
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 3
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: LD_INT 2
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 4
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 4
38525: PUSH
38526: LD_INT 4
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 4
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 5
38545: PUSH
38546: LD_INT 4
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 5
38555: PUSH
38556: LD_INT 5
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 4
38565: PUSH
38566: LD_INT 5
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 4
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 5
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38660: LD_ADDR_VAR 0 33
38664: PUSH
38665: LD_INT 4
38667: NEG
38668: PUSH
38669: LD_INT 4
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 4
38679: NEG
38680: PUSH
38681: LD_INT 5
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: LD_INT 4
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 3
38707: NEG
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 4
38715: NEG
38716: PUSH
38717: LD_INT 3
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 5
38727: NEG
38728: PUSH
38729: LD_INT 4
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 5
38739: NEG
38740: PUSH
38741: LD_INT 5
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: LD_INT 5
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 5
38763: NEG
38764: PUSH
38765: LD_INT 3
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 3
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 4
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 3
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 2
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 4
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 4
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 4
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 5
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 5
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 4
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 3
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 5
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: LD_INT 3
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 4
39000: PUSH
39001: LD_INT 4
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: LD_INT 4
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 4
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: LD_INT 4
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 4
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 4
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 1
39090: PUSH
39091: LD_INT 5
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 0
39100: PUSH
39101: LD_INT 5
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 4
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 2
39132: PUSH
39133: LD_INT 5
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39198: LD_ADDR_VAR 0 34
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 4
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: LD_INT 5
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 4
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 3
39241: NEG
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: LD_INT 4
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 5
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: LD_INT 5
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 3
39307: PUSH
39308: LD_INT 0
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 4
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 4
39338: PUSH
39339: LD_INT 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 3
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 4
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 4
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 5
39420: PUSH
39421: LD_INT 4
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 5
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: LD_INT 4
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 5
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 5
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: LD_INT 4
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 4
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 4
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 4
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 4
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 5
39639: NEG
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 5
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 5
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// end ; end ;
39730: GO 39733
39732: POP
// case btype of b_depot , b_warehouse :
39733: LD_VAR 0 1
39737: PUSH
39738: LD_INT 0
39740: DOUBLE
39741: EQUAL
39742: IFTRUE 39752
39744: LD_INT 1
39746: DOUBLE
39747: EQUAL
39748: IFTRUE 39752
39750: GO 39953
39752: POP
// case nation of nation_american :
39753: LD_VAR 0 5
39757: PUSH
39758: LD_INT 1
39760: DOUBLE
39761: EQUAL
39762: IFTRUE 39766
39764: GO 39822
39766: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39767: LD_ADDR_VAR 0 9
39771: PUSH
39772: LD_VAR 0 11
39776: PUSH
39777: LD_VAR 0 12
39781: PUSH
39782: LD_VAR 0 13
39786: PUSH
39787: LD_VAR 0 14
39791: PUSH
39792: LD_VAR 0 15
39796: PUSH
39797: LD_VAR 0 16
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: PUSH
39810: LD_VAR 0 4
39814: PUSH
39815: LD_INT 1
39817: PLUS
39818: ARRAY
39819: ST_TO_ADDR
39820: GO 39951
39822: LD_INT 2
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39830
39828: GO 39886
39830: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39831: LD_ADDR_VAR 0 9
39835: PUSH
39836: LD_VAR 0 17
39840: PUSH
39841: LD_VAR 0 18
39845: PUSH
39846: LD_VAR 0 19
39850: PUSH
39851: LD_VAR 0 20
39855: PUSH
39856: LD_VAR 0 21
39860: PUSH
39861: LD_VAR 0 22
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: PUSH
39874: LD_VAR 0 4
39878: PUSH
39879: LD_INT 1
39881: PLUS
39882: ARRAY
39883: ST_TO_ADDR
39884: GO 39951
39886: LD_INT 3
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 39950
39894: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39895: LD_ADDR_VAR 0 9
39899: PUSH
39900: LD_VAR 0 23
39904: PUSH
39905: LD_VAR 0 24
39909: PUSH
39910: LD_VAR 0 25
39914: PUSH
39915: LD_VAR 0 26
39919: PUSH
39920: LD_VAR 0 27
39924: PUSH
39925: LD_VAR 0 28
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: PUSH
39938: LD_VAR 0 4
39942: PUSH
39943: LD_INT 1
39945: PLUS
39946: ARRAY
39947: ST_TO_ADDR
39948: GO 39951
39950: POP
39951: GO 40506
39953: LD_INT 2
39955: DOUBLE
39956: EQUAL
39957: IFTRUE 39967
39959: LD_INT 3
39961: DOUBLE
39962: EQUAL
39963: IFTRUE 39967
39965: GO 40023
39967: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39968: LD_ADDR_VAR 0 9
39972: PUSH
39973: LD_VAR 0 29
39977: PUSH
39978: LD_VAR 0 30
39982: PUSH
39983: LD_VAR 0 31
39987: PUSH
39988: LD_VAR 0 32
39992: PUSH
39993: LD_VAR 0 33
39997: PUSH
39998: LD_VAR 0 34
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: PUSH
40011: LD_VAR 0 4
40015: PUSH
40016: LD_INT 1
40018: PLUS
40019: ARRAY
40020: ST_TO_ADDR
40021: GO 40506
40023: LD_INT 16
40025: DOUBLE
40026: EQUAL
40027: IFTRUE 40085
40029: LD_INT 17
40031: DOUBLE
40032: EQUAL
40033: IFTRUE 40085
40035: LD_INT 18
40037: DOUBLE
40038: EQUAL
40039: IFTRUE 40085
40041: LD_INT 19
40043: DOUBLE
40044: EQUAL
40045: IFTRUE 40085
40047: LD_INT 22
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40085
40053: LD_INT 20
40055: DOUBLE
40056: EQUAL
40057: IFTRUE 40085
40059: LD_INT 21
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40085
40065: LD_INT 23
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40085
40071: LD_INT 24
40073: DOUBLE
40074: EQUAL
40075: IFTRUE 40085
40077: LD_INT 25
40079: DOUBLE
40080: EQUAL
40081: IFTRUE 40085
40083: GO 40141
40085: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40086: LD_ADDR_VAR 0 9
40090: PUSH
40091: LD_VAR 0 35
40095: PUSH
40096: LD_VAR 0 36
40100: PUSH
40101: LD_VAR 0 37
40105: PUSH
40106: LD_VAR 0 38
40110: PUSH
40111: LD_VAR 0 39
40115: PUSH
40116: LD_VAR 0 40
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: PUSH
40129: LD_VAR 0 4
40133: PUSH
40134: LD_INT 1
40136: PLUS
40137: ARRAY
40138: ST_TO_ADDR
40139: GO 40506
40141: LD_INT 6
40143: DOUBLE
40144: EQUAL
40145: IFTRUE 40197
40147: LD_INT 7
40149: DOUBLE
40150: EQUAL
40151: IFTRUE 40197
40153: LD_INT 8
40155: DOUBLE
40156: EQUAL
40157: IFTRUE 40197
40159: LD_INT 13
40161: DOUBLE
40162: EQUAL
40163: IFTRUE 40197
40165: LD_INT 12
40167: DOUBLE
40168: EQUAL
40169: IFTRUE 40197
40171: LD_INT 15
40173: DOUBLE
40174: EQUAL
40175: IFTRUE 40197
40177: LD_INT 11
40179: DOUBLE
40180: EQUAL
40181: IFTRUE 40197
40183: LD_INT 14
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40197
40189: LD_INT 10
40191: DOUBLE
40192: EQUAL
40193: IFTRUE 40197
40195: GO 40253
40197: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40198: LD_ADDR_VAR 0 9
40202: PUSH
40203: LD_VAR 0 41
40207: PUSH
40208: LD_VAR 0 42
40212: PUSH
40213: LD_VAR 0 43
40217: PUSH
40218: LD_VAR 0 44
40222: PUSH
40223: LD_VAR 0 45
40227: PUSH
40228: LD_VAR 0 46
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: LD_VAR 0 4
40245: PUSH
40246: LD_INT 1
40248: PLUS
40249: ARRAY
40250: ST_TO_ADDR
40251: GO 40506
40253: LD_INT 36
40255: DOUBLE
40256: EQUAL
40257: IFTRUE 40261
40259: GO 40317
40261: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40262: LD_ADDR_VAR 0 9
40266: PUSH
40267: LD_VAR 0 47
40271: PUSH
40272: LD_VAR 0 48
40276: PUSH
40277: LD_VAR 0 49
40281: PUSH
40282: LD_VAR 0 50
40286: PUSH
40287: LD_VAR 0 51
40291: PUSH
40292: LD_VAR 0 52
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: PUSH
40305: LD_VAR 0 4
40309: PUSH
40310: LD_INT 1
40312: PLUS
40313: ARRAY
40314: ST_TO_ADDR
40315: GO 40506
40317: LD_INT 4
40319: DOUBLE
40320: EQUAL
40321: IFTRUE 40343
40323: LD_INT 5
40325: DOUBLE
40326: EQUAL
40327: IFTRUE 40343
40329: LD_INT 34
40331: DOUBLE
40332: EQUAL
40333: IFTRUE 40343
40335: LD_INT 37
40337: DOUBLE
40338: EQUAL
40339: IFTRUE 40343
40341: GO 40399
40343: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40344: LD_ADDR_VAR 0 9
40348: PUSH
40349: LD_VAR 0 53
40353: PUSH
40354: LD_VAR 0 54
40358: PUSH
40359: LD_VAR 0 55
40363: PUSH
40364: LD_VAR 0 56
40368: PUSH
40369: LD_VAR 0 57
40373: PUSH
40374: LD_VAR 0 58
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 1
40394: PLUS
40395: ARRAY
40396: ST_TO_ADDR
40397: GO 40506
40399: LD_INT 31
40401: DOUBLE
40402: EQUAL
40403: IFTRUE 40449
40405: LD_INT 32
40407: DOUBLE
40408: EQUAL
40409: IFTRUE 40449
40411: LD_INT 33
40413: DOUBLE
40414: EQUAL
40415: IFTRUE 40449
40417: LD_INT 27
40419: DOUBLE
40420: EQUAL
40421: IFTRUE 40449
40423: LD_INT 26
40425: DOUBLE
40426: EQUAL
40427: IFTRUE 40449
40429: LD_INT 28
40431: DOUBLE
40432: EQUAL
40433: IFTRUE 40449
40435: LD_INT 29
40437: DOUBLE
40438: EQUAL
40439: IFTRUE 40449
40441: LD_INT 30
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40505
40449: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40450: LD_ADDR_VAR 0 9
40454: PUSH
40455: LD_VAR 0 59
40459: PUSH
40460: LD_VAR 0 60
40464: PUSH
40465: LD_VAR 0 61
40469: PUSH
40470: LD_VAR 0 62
40474: PUSH
40475: LD_VAR 0 63
40479: PUSH
40480: LD_VAR 0 64
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: PUSH
40493: LD_VAR 0 4
40497: PUSH
40498: LD_INT 1
40500: PLUS
40501: ARRAY
40502: ST_TO_ADDR
40503: GO 40506
40505: POP
// temp_list2 = [ ] ;
40506: LD_ADDR_VAR 0 10
40510: PUSH
40511: EMPTY
40512: ST_TO_ADDR
// for i in temp_list do
40513: LD_ADDR_VAR 0 8
40517: PUSH
40518: LD_VAR 0 9
40522: PUSH
40523: FOR_IN
40524: IFFALSE 40576
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40526: LD_ADDR_VAR 0 10
40530: PUSH
40531: LD_VAR 0 10
40535: PUSH
40536: LD_VAR 0 8
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: PUSH
40545: LD_VAR 0 2
40549: PLUS
40550: PUSH
40551: LD_VAR 0 8
40555: PUSH
40556: LD_INT 2
40558: ARRAY
40559: PUSH
40560: LD_VAR 0 3
40564: PLUS
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: ADD
40573: ST_TO_ADDR
40574: GO 40523
40576: POP
40577: POP
// result = temp_list2 ;
40578: LD_ADDR_VAR 0 7
40582: PUSH
40583: LD_VAR 0 10
40587: ST_TO_ADDR
// end ;
40588: LD_VAR 0 7
40592: RET
// export function EnemyInRange ( unit , dist ) ; begin
40593: LD_INT 0
40595: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40596: LD_ADDR_VAR 0 3
40600: PUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL_OW 255
40610: PPUSH
40611: LD_VAR 0 1
40615: PPUSH
40616: CALL_OW 250
40620: PPUSH
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 251
40630: PPUSH
40631: LD_VAR 0 2
40635: PPUSH
40636: CALL 14697 0 4
40640: PUSH
40641: LD_INT 4
40643: ARRAY
40644: ST_TO_ADDR
// end ;
40645: LD_VAR 0 3
40649: RET
// export function PlayerSeeMe ( unit ) ; begin
40650: LD_INT 0
40652: PPUSH
// result := See ( your_side , unit ) ;
40653: LD_ADDR_VAR 0 2
40657: PUSH
40658: LD_OWVAR 2
40662: PPUSH
40663: LD_VAR 0 1
40667: PPUSH
40668: CALL_OW 292
40672: ST_TO_ADDR
// end ;
40673: LD_VAR 0 2
40677: RET
// export function ReverseDir ( unit ) ; begin
40678: LD_INT 0
40680: PPUSH
// if not unit then
40681: LD_VAR 0 1
40685: NOT
40686: IFFALSE 40690
// exit ;
40688: GO 40713
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40690: LD_ADDR_VAR 0 2
40694: PUSH
40695: LD_VAR 0 1
40699: PPUSH
40700: CALL_OW 254
40704: PUSH
40705: LD_INT 3
40707: PLUS
40708: PUSH
40709: LD_INT 6
40711: MOD
40712: ST_TO_ADDR
// end ;
40713: LD_VAR 0 2
40717: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40718: LD_INT 0
40720: PPUSH
40721: PPUSH
40722: PPUSH
40723: PPUSH
40724: PPUSH
// if not hexes then
40725: LD_VAR 0 2
40729: NOT
40730: IFFALSE 40734
// exit ;
40732: GO 40882
// dist := 9999 ;
40734: LD_ADDR_VAR 0 5
40738: PUSH
40739: LD_INT 9999
40741: ST_TO_ADDR
// for i = 1 to hexes do
40742: LD_ADDR_VAR 0 4
40746: PUSH
40747: DOUBLE
40748: LD_INT 1
40750: DEC
40751: ST_TO_ADDR
40752: LD_VAR 0 2
40756: PUSH
40757: FOR_TO
40758: IFFALSE 40870
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40760: LD_VAR 0 1
40764: PPUSH
40765: LD_VAR 0 2
40769: PUSH
40770: LD_VAR 0 4
40774: ARRAY
40775: PUSH
40776: LD_INT 1
40778: ARRAY
40779: PPUSH
40780: LD_VAR 0 2
40784: PUSH
40785: LD_VAR 0 4
40789: ARRAY
40790: PUSH
40791: LD_INT 2
40793: ARRAY
40794: PPUSH
40795: CALL_OW 297
40799: PUSH
40800: LD_VAR 0 5
40804: LESS
40805: IFFALSE 40868
// begin hex := hexes [ i ] ;
40807: LD_ADDR_VAR 0 7
40811: PUSH
40812: LD_VAR 0 2
40816: PUSH
40817: LD_VAR 0 4
40821: ARRAY
40822: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40823: LD_ADDR_VAR 0 5
40827: PUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: LD_VAR 0 2
40837: PUSH
40838: LD_VAR 0 4
40842: ARRAY
40843: PUSH
40844: LD_INT 1
40846: ARRAY
40847: PPUSH
40848: LD_VAR 0 2
40852: PUSH
40853: LD_VAR 0 4
40857: ARRAY
40858: PUSH
40859: LD_INT 2
40861: ARRAY
40862: PPUSH
40863: CALL_OW 297
40867: ST_TO_ADDR
// end ; end ;
40868: GO 40757
40870: POP
40871: POP
// result := hex ;
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_VAR 0 7
40881: ST_TO_ADDR
// end ;
40882: LD_VAR 0 3
40886: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40887: LD_INT 0
40889: PPUSH
40890: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40891: LD_VAR 0 1
40895: NOT
40896: PUSH
40897: LD_VAR 0 1
40901: PUSH
40902: LD_INT 21
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 23
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PPUSH
40926: CALL_OW 69
40930: IN
40931: NOT
40932: OR
40933: IFFALSE 40937
// exit ;
40935: GO 40984
// for i = 1 to 3 do
40937: LD_ADDR_VAR 0 3
40941: PUSH
40942: DOUBLE
40943: LD_INT 1
40945: DEC
40946: ST_TO_ADDR
40947: LD_INT 3
40949: PUSH
40950: FOR_TO
40951: IFFALSE 40982
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 250
40962: PPUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 251
40972: PPUSH
40973: LD_INT 1
40975: PPUSH
40976: CALL_OW 453
40980: GO 40950
40982: POP
40983: POP
// end ;
40984: LD_VAR 0 2
40988: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40989: LD_INT 0
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40997: LD_VAR 0 1
41001: NOT
41002: PUSH
41003: LD_VAR 0 2
41007: NOT
41008: OR
41009: PUSH
41010: LD_VAR 0 1
41014: PPUSH
41015: CALL_OW 314
41019: OR
41020: IFFALSE 41024
// exit ;
41022: GO 41465
// x := GetX ( enemy_unit ) ;
41024: LD_ADDR_VAR 0 7
41028: PUSH
41029: LD_VAR 0 2
41033: PPUSH
41034: CALL_OW 250
41038: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41039: LD_ADDR_VAR 0 8
41043: PUSH
41044: LD_VAR 0 2
41048: PPUSH
41049: CALL_OW 251
41053: ST_TO_ADDR
// if not x or not y then
41054: LD_VAR 0 7
41058: NOT
41059: PUSH
41060: LD_VAR 0 8
41064: NOT
41065: OR
41066: IFFALSE 41070
// exit ;
41068: GO 41465
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41070: LD_ADDR_VAR 0 6
41074: PUSH
41075: LD_VAR 0 7
41079: PPUSH
41080: LD_INT 0
41082: PPUSH
41083: LD_INT 4
41085: PPUSH
41086: CALL_OW 272
41090: PUSH
41091: LD_VAR 0 8
41095: PPUSH
41096: LD_INT 0
41098: PPUSH
41099: LD_INT 4
41101: PPUSH
41102: CALL_OW 273
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_VAR 0 7
41115: PPUSH
41116: LD_INT 1
41118: PPUSH
41119: LD_INT 4
41121: PPUSH
41122: CALL_OW 272
41126: PUSH
41127: LD_VAR 0 8
41131: PPUSH
41132: LD_INT 1
41134: PPUSH
41135: LD_INT 4
41137: PPUSH
41138: CALL_OW 273
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_VAR 0 7
41151: PPUSH
41152: LD_INT 2
41154: PPUSH
41155: LD_INT 4
41157: PPUSH
41158: CALL_OW 272
41162: PUSH
41163: LD_VAR 0 8
41167: PPUSH
41168: LD_INT 2
41170: PPUSH
41171: LD_INT 4
41173: PPUSH
41174: CALL_OW 273
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_VAR 0 7
41187: PPUSH
41188: LD_INT 3
41190: PPUSH
41191: LD_INT 4
41193: PPUSH
41194: CALL_OW 272
41198: PUSH
41199: LD_VAR 0 8
41203: PPUSH
41204: LD_INT 3
41206: PPUSH
41207: LD_INT 4
41209: PPUSH
41210: CALL_OW 273
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_VAR 0 7
41223: PPUSH
41224: LD_INT 4
41226: PPUSH
41227: LD_INT 4
41229: PPUSH
41230: CALL_OW 272
41234: PUSH
41235: LD_VAR 0 8
41239: PPUSH
41240: LD_INT 4
41242: PPUSH
41243: LD_INT 4
41245: PPUSH
41246: CALL_OW 273
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_VAR 0 7
41259: PPUSH
41260: LD_INT 5
41262: PPUSH
41263: LD_INT 4
41265: PPUSH
41266: CALL_OW 272
41270: PUSH
41271: LD_VAR 0 8
41275: PPUSH
41276: LD_INT 5
41278: PPUSH
41279: LD_INT 4
41281: PPUSH
41282: CALL_OW 273
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// for i = tmp downto 1 do
41299: LD_ADDR_VAR 0 4
41303: PUSH
41304: DOUBLE
41305: LD_VAR 0 6
41309: INC
41310: ST_TO_ADDR
41311: LD_INT 1
41313: PUSH
41314: FOR_DOWNTO
41315: IFFALSE 41416
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41317: LD_VAR 0 6
41321: PUSH
41322: LD_VAR 0 4
41326: ARRAY
41327: PUSH
41328: LD_INT 1
41330: ARRAY
41331: PPUSH
41332: LD_VAR 0 6
41336: PUSH
41337: LD_VAR 0 4
41341: ARRAY
41342: PUSH
41343: LD_INT 2
41345: ARRAY
41346: PPUSH
41347: CALL_OW 488
41351: NOT
41352: PUSH
41353: LD_VAR 0 6
41357: PUSH
41358: LD_VAR 0 4
41362: ARRAY
41363: PUSH
41364: LD_INT 1
41366: ARRAY
41367: PPUSH
41368: LD_VAR 0 6
41372: PUSH
41373: LD_VAR 0 4
41377: ARRAY
41378: PUSH
41379: LD_INT 2
41381: ARRAY
41382: PPUSH
41383: CALL_OW 428
41387: PUSH
41388: LD_INT 0
41390: NONEQUAL
41391: OR
41392: IFFALSE 41414
// tmp := Delete ( tmp , i ) ;
41394: LD_ADDR_VAR 0 6
41398: PUSH
41399: LD_VAR 0 6
41403: PPUSH
41404: LD_VAR 0 4
41408: PPUSH
41409: CALL_OW 3
41413: ST_TO_ADDR
41414: GO 41314
41416: POP
41417: POP
// j := GetClosestHex ( unit , tmp ) ;
41418: LD_ADDR_VAR 0 5
41422: PUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: LD_VAR 0 6
41432: PPUSH
41433: CALL 40718 0 2
41437: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41438: LD_VAR 0 1
41442: PPUSH
41443: LD_VAR 0 5
41447: PUSH
41448: LD_INT 1
41450: ARRAY
41451: PPUSH
41452: LD_VAR 0 5
41456: PUSH
41457: LD_INT 2
41459: ARRAY
41460: PPUSH
41461: CALL_OW 111
// end ;
41465: LD_VAR 0 3
41469: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41470: LD_INT 0
41472: PPUSH
41473: PPUSH
41474: PPUSH
// uc_side = 0 ;
41475: LD_ADDR_OWVAR 20
41479: PUSH
41480: LD_INT 0
41482: ST_TO_ADDR
// uc_nation = 0 ;
41483: LD_ADDR_OWVAR 21
41487: PUSH
41488: LD_INT 0
41490: ST_TO_ADDR
// InitHc_All ( ) ;
41491: CALL_OW 584
// InitVc ;
41495: CALL_OW 20
// if mastodonts then
41499: LD_VAR 0 6
41503: IFFALSE 41570
// for i = 1 to mastodonts do
41505: LD_ADDR_VAR 0 11
41509: PUSH
41510: DOUBLE
41511: LD_INT 1
41513: DEC
41514: ST_TO_ADDR
41515: LD_VAR 0 6
41519: PUSH
41520: FOR_TO
41521: IFFALSE 41568
// begin vc_chassis := 31 ;
41523: LD_ADDR_OWVAR 37
41527: PUSH
41528: LD_INT 31
41530: ST_TO_ADDR
// vc_control := control_rider ;
41531: LD_ADDR_OWVAR 38
41535: PUSH
41536: LD_INT 4
41538: ST_TO_ADDR
// animal := CreateVehicle ;
41539: LD_ADDR_VAR 0 12
41543: PUSH
41544: CALL_OW 45
41548: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41549: LD_VAR 0 12
41553: PPUSH
41554: LD_VAR 0 8
41558: PPUSH
41559: LD_INT 0
41561: PPUSH
41562: CALL 43758 0 3
// end ;
41566: GO 41520
41568: POP
41569: POP
// if horses then
41570: LD_VAR 0 5
41574: IFFALSE 41641
// for i = 1 to horses do
41576: LD_ADDR_VAR 0 11
41580: PUSH
41581: DOUBLE
41582: LD_INT 1
41584: DEC
41585: ST_TO_ADDR
41586: LD_VAR 0 5
41590: PUSH
41591: FOR_TO
41592: IFFALSE 41639
// begin hc_class := 21 ;
41594: LD_ADDR_OWVAR 28
41598: PUSH
41599: LD_INT 21
41601: ST_TO_ADDR
// hc_gallery :=  ;
41602: LD_ADDR_OWVAR 33
41606: PUSH
41607: LD_STRING 
41609: ST_TO_ADDR
// animal := CreateHuman ;
41610: LD_ADDR_VAR 0 12
41614: PUSH
41615: CALL_OW 44
41619: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41620: LD_VAR 0 12
41624: PPUSH
41625: LD_VAR 0 8
41629: PPUSH
41630: LD_INT 0
41632: PPUSH
41633: CALL 43758 0 3
// end ;
41637: GO 41591
41639: POP
41640: POP
// if birds then
41641: LD_VAR 0 1
41645: IFFALSE 41712
// for i = 1 to birds do
41647: LD_ADDR_VAR 0 11
41651: PUSH
41652: DOUBLE
41653: LD_INT 1
41655: DEC
41656: ST_TO_ADDR
41657: LD_VAR 0 1
41661: PUSH
41662: FOR_TO
41663: IFFALSE 41710
// begin hc_class = 18 ;
41665: LD_ADDR_OWVAR 28
41669: PUSH
41670: LD_INT 18
41672: ST_TO_ADDR
// hc_gallery =  ;
41673: LD_ADDR_OWVAR 33
41677: PUSH
41678: LD_STRING 
41680: ST_TO_ADDR
// animal := CreateHuman ;
41681: LD_ADDR_VAR 0 12
41685: PUSH
41686: CALL_OW 44
41690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41691: LD_VAR 0 12
41695: PPUSH
41696: LD_VAR 0 8
41700: PPUSH
41701: LD_INT 0
41703: PPUSH
41704: CALL 43758 0 3
// end ;
41708: GO 41662
41710: POP
41711: POP
// if tigers then
41712: LD_VAR 0 2
41716: IFFALSE 41800
// for i = 1 to tigers do
41718: LD_ADDR_VAR 0 11
41722: PUSH
41723: DOUBLE
41724: LD_INT 1
41726: DEC
41727: ST_TO_ADDR
41728: LD_VAR 0 2
41732: PUSH
41733: FOR_TO
41734: IFFALSE 41798
// begin hc_class = class_tiger ;
41736: LD_ADDR_OWVAR 28
41740: PUSH
41741: LD_INT 14
41743: ST_TO_ADDR
// hc_gallery =  ;
41744: LD_ADDR_OWVAR 33
41748: PUSH
41749: LD_STRING 
41751: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41752: LD_ADDR_OWVAR 35
41756: PUSH
41757: LD_INT 7
41759: NEG
41760: PPUSH
41761: LD_INT 7
41763: PPUSH
41764: CALL_OW 12
41768: ST_TO_ADDR
// animal := CreateHuman ;
41769: LD_ADDR_VAR 0 12
41773: PUSH
41774: CALL_OW 44
41778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41779: LD_VAR 0 12
41783: PPUSH
41784: LD_VAR 0 8
41788: PPUSH
41789: LD_INT 0
41791: PPUSH
41792: CALL 43758 0 3
// end ;
41796: GO 41733
41798: POP
41799: POP
// if apemans then
41800: LD_VAR 0 3
41804: IFFALSE 41927
// for i = 1 to apemans do
41806: LD_ADDR_VAR 0 11
41810: PUSH
41811: DOUBLE
41812: LD_INT 1
41814: DEC
41815: ST_TO_ADDR
41816: LD_VAR 0 3
41820: PUSH
41821: FOR_TO
41822: IFFALSE 41925
// begin hc_class = class_apeman ;
41824: LD_ADDR_OWVAR 28
41828: PUSH
41829: LD_INT 12
41831: ST_TO_ADDR
// hc_gallery =  ;
41832: LD_ADDR_OWVAR 33
41836: PUSH
41837: LD_STRING 
41839: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41840: LD_ADDR_OWVAR 35
41844: PUSH
41845: LD_INT 5
41847: NEG
41848: PPUSH
41849: LD_INT 5
41851: PPUSH
41852: CALL_OW 12
41856: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41857: LD_ADDR_OWVAR 31
41861: PUSH
41862: LD_INT 1
41864: PPUSH
41865: LD_INT 3
41867: PPUSH
41868: CALL_OW 12
41872: PUSH
41873: LD_INT 1
41875: PPUSH
41876: LD_INT 3
41878: PPUSH
41879: CALL_OW 12
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
// animal := CreateHuman ;
41896: LD_ADDR_VAR 0 12
41900: PUSH
41901: CALL_OW 44
41905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41906: LD_VAR 0 12
41910: PPUSH
41911: LD_VAR 0 8
41915: PPUSH
41916: LD_INT 0
41918: PPUSH
41919: CALL 43758 0 3
// end ;
41923: GO 41821
41925: POP
41926: POP
// if enchidnas then
41927: LD_VAR 0 4
41931: IFFALSE 41998
// for i = 1 to enchidnas do
41933: LD_ADDR_VAR 0 11
41937: PUSH
41938: DOUBLE
41939: LD_INT 1
41941: DEC
41942: ST_TO_ADDR
41943: LD_VAR 0 4
41947: PUSH
41948: FOR_TO
41949: IFFALSE 41996
// begin hc_class = 13 ;
41951: LD_ADDR_OWVAR 28
41955: PUSH
41956: LD_INT 13
41958: ST_TO_ADDR
// hc_gallery =  ;
41959: LD_ADDR_OWVAR 33
41963: PUSH
41964: LD_STRING 
41966: ST_TO_ADDR
// animal := CreateHuman ;
41967: LD_ADDR_VAR 0 12
41971: PUSH
41972: CALL_OW 44
41976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41977: LD_VAR 0 12
41981: PPUSH
41982: LD_VAR 0 8
41986: PPUSH
41987: LD_INT 0
41989: PPUSH
41990: CALL 43758 0 3
// end ;
41994: GO 41948
41996: POP
41997: POP
// if fishes then
41998: LD_VAR 0 7
42002: IFFALSE 42069
// for i = 1 to fishes do
42004: LD_ADDR_VAR 0 11
42008: PUSH
42009: DOUBLE
42010: LD_INT 1
42012: DEC
42013: ST_TO_ADDR
42014: LD_VAR 0 7
42018: PUSH
42019: FOR_TO
42020: IFFALSE 42067
// begin hc_class = 20 ;
42022: LD_ADDR_OWVAR 28
42026: PUSH
42027: LD_INT 20
42029: ST_TO_ADDR
// hc_gallery =  ;
42030: LD_ADDR_OWVAR 33
42034: PUSH
42035: LD_STRING 
42037: ST_TO_ADDR
// animal := CreateHuman ;
42038: LD_ADDR_VAR 0 12
42042: PUSH
42043: CALL_OW 44
42047: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42048: LD_VAR 0 12
42052: PPUSH
42053: LD_VAR 0 9
42057: PPUSH
42058: LD_INT 0
42060: PPUSH
42061: CALL 43758 0 3
// end ;
42065: GO 42019
42067: POP
42068: POP
// end ;
42069: LD_VAR 0 10
42073: RET
// export function WantHeal ( sci , unit ) ; begin
42074: LD_INT 0
42076: PPUSH
// if GetTaskList ( sci ) > 0 then
42077: LD_VAR 0 1
42081: PPUSH
42082: CALL_OW 437
42086: PUSH
42087: LD_INT 0
42089: GREATER
42090: IFFALSE 42160
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42092: LD_VAR 0 1
42096: PPUSH
42097: CALL_OW 437
42101: PUSH
42102: LD_INT 1
42104: ARRAY
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PUSH
42110: LD_STRING l
42112: EQUAL
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 437
42123: PUSH
42124: LD_INT 1
42126: ARRAY
42127: PUSH
42128: LD_INT 4
42130: ARRAY
42131: PUSH
42132: LD_VAR 0 2
42136: EQUAL
42137: AND
42138: IFFALSE 42150
// result := true else
42140: LD_ADDR_VAR 0 3
42144: PUSH
42145: LD_INT 1
42147: ST_TO_ADDR
42148: GO 42158
// result := false ;
42150: LD_ADDR_VAR 0 3
42154: PUSH
42155: LD_INT 0
42157: ST_TO_ADDR
// end else
42158: GO 42168
// result := false ;
42160: LD_ADDR_VAR 0 3
42164: PUSH
42165: LD_INT 0
42167: ST_TO_ADDR
// end ;
42168: LD_VAR 0 3
42172: RET
// export function HealTarget ( sci ) ; begin
42173: LD_INT 0
42175: PPUSH
// if not sci then
42176: LD_VAR 0 1
42180: NOT
42181: IFFALSE 42185
// exit ;
42183: GO 42250
// result := 0 ;
42185: LD_ADDR_VAR 0 2
42189: PUSH
42190: LD_INT 0
42192: ST_TO_ADDR
// if GetTaskList ( sci ) then
42193: LD_VAR 0 1
42197: PPUSH
42198: CALL_OW 437
42202: IFFALSE 42250
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42204: LD_VAR 0 1
42208: PPUSH
42209: CALL_OW 437
42213: PUSH
42214: LD_INT 1
42216: ARRAY
42217: PUSH
42218: LD_INT 1
42220: ARRAY
42221: PUSH
42222: LD_STRING l
42224: EQUAL
42225: IFFALSE 42250
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42227: LD_ADDR_VAR 0 2
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 437
42241: PUSH
42242: LD_INT 1
42244: ARRAY
42245: PUSH
42246: LD_INT 4
42248: ARRAY
42249: ST_TO_ADDR
// end ;
42250: LD_VAR 0 2
42254: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
// if not base_units then
42261: LD_VAR 0 1
42265: NOT
42266: IFFALSE 42270
// exit ;
42268: GO 42357
// result := false ;
42270: LD_ADDR_VAR 0 2
42274: PUSH
42275: LD_INT 0
42277: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42278: LD_ADDR_VAR 0 5
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: LD_INT 21
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PPUSH
42298: CALL_OW 72
42302: ST_TO_ADDR
// if not tmp then
42303: LD_VAR 0 5
42307: NOT
42308: IFFALSE 42312
// exit ;
42310: GO 42357
// for i in tmp do
42312: LD_ADDR_VAR 0 3
42316: PUSH
42317: LD_VAR 0 5
42321: PUSH
42322: FOR_IN
42323: IFFALSE 42355
// begin result := EnemyInRange ( i , 22 ) ;
42325: LD_ADDR_VAR 0 2
42329: PUSH
42330: LD_VAR 0 3
42334: PPUSH
42335: LD_INT 22
42337: PPUSH
42338: CALL 40593 0 2
42342: ST_TO_ADDR
// if result then
42343: LD_VAR 0 2
42347: IFFALSE 42353
// exit ;
42349: POP
42350: POP
42351: GO 42357
// end ;
42353: GO 42322
42355: POP
42356: POP
// end ;
42357: LD_VAR 0 2
42361: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42362: LD_INT 0
42364: PPUSH
42365: PPUSH
// if not units then
42366: LD_VAR 0 1
42370: NOT
42371: IFFALSE 42375
// exit ;
42373: GO 42445
// result := [ ] ;
42375: LD_ADDR_VAR 0 3
42379: PUSH
42380: EMPTY
42381: ST_TO_ADDR
// for i in units do
42382: LD_ADDR_VAR 0 4
42386: PUSH
42387: LD_VAR 0 1
42391: PUSH
42392: FOR_IN
42393: IFFALSE 42443
// if GetTag ( i ) = tag then
42395: LD_VAR 0 4
42399: PPUSH
42400: CALL_OW 110
42404: PUSH
42405: LD_VAR 0 2
42409: EQUAL
42410: IFFALSE 42441
// result := Insert ( result , result + 1 , i ) ;
42412: LD_ADDR_VAR 0 3
42416: PUSH
42417: LD_VAR 0 3
42421: PPUSH
42422: LD_VAR 0 3
42426: PUSH
42427: LD_INT 1
42429: PLUS
42430: PPUSH
42431: LD_VAR 0 4
42435: PPUSH
42436: CALL_OW 2
42440: ST_TO_ADDR
42441: GO 42392
42443: POP
42444: POP
// end ;
42445: LD_VAR 0 3
42449: RET
// export function IsDriver ( un ) ; begin
42450: LD_INT 0
42452: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42453: LD_ADDR_VAR 0 2
42457: PUSH
42458: LD_VAR 0 1
42462: PUSH
42463: LD_INT 55
42465: PUSH
42466: EMPTY
42467: LIST
42468: PPUSH
42469: CALL_OW 69
42473: IN
42474: ST_TO_ADDR
// end ;
42475: LD_VAR 0 2
42479: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42480: LD_INT 0
42482: PPUSH
42483: PPUSH
// list := [ ] ;
42484: LD_ADDR_VAR 0 5
42488: PUSH
42489: EMPTY
42490: ST_TO_ADDR
// case d of 0 :
42491: LD_VAR 0 3
42495: PUSH
42496: LD_INT 0
42498: DOUBLE
42499: EQUAL
42500: IFTRUE 42504
42502: GO 42637
42504: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42505: LD_ADDR_VAR 0 5
42509: PUSH
42510: LD_VAR 0 1
42514: PUSH
42515: LD_INT 4
42517: MINUS
42518: PUSH
42519: LD_VAR 0 2
42523: PUSH
42524: LD_INT 4
42526: MINUS
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: PUSH
42536: LD_VAR 0 1
42540: PUSH
42541: LD_INT 3
42543: MINUS
42544: PUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: LIST
42557: PUSH
42558: LD_VAR 0 1
42562: PUSH
42563: LD_INT 4
42565: PLUS
42566: PUSH
42567: LD_VAR 0 2
42571: PUSH
42572: LD_INT 4
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: PUSH
42580: LD_VAR 0 1
42584: PUSH
42585: LD_INT 3
42587: PLUS
42588: PUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 3
42596: PLUS
42597: PUSH
42598: LD_INT 5
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: PUSH
42606: LD_VAR 0 1
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_INT 4
42618: PLUS
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: ST_TO_ADDR
// end ; 1 :
42635: GO 43335
42637: LD_INT 1
42639: DOUBLE
42640: EQUAL
42641: IFTRUE 42645
42643: GO 42778
42645: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42646: LD_ADDR_VAR 0 5
42650: PUSH
42651: LD_VAR 0 1
42655: PUSH
42656: LD_VAR 0 2
42660: PUSH
42661: LD_INT 4
42663: MINUS
42664: PUSH
42665: LD_INT 3
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: PUSH
42673: LD_VAR 0 1
42677: PUSH
42678: LD_INT 3
42680: MINUS
42681: PUSH
42682: LD_VAR 0 2
42686: PUSH
42687: LD_INT 3
42689: MINUS
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: PUSH
42699: LD_VAR 0 1
42703: PUSH
42704: LD_INT 4
42706: MINUS
42707: PUSH
42708: LD_VAR 0 2
42712: PUSH
42713: LD_INT 1
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: PUSH
42721: LD_VAR 0 1
42725: PUSH
42726: LD_VAR 0 2
42730: PUSH
42731: LD_INT 3
42733: PLUS
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: LIST
42742: PUSH
42743: LD_VAR 0 1
42747: PUSH
42748: LD_INT 4
42750: PLUS
42751: PUSH
42752: LD_VAR 0 2
42756: PUSH
42757: LD_INT 4
42759: PLUS
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// end ; 2 :
42776: GO 43335
42778: LD_INT 2
42780: DOUBLE
42781: EQUAL
42782: IFTRUE 42786
42784: GO 42915
42786: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42787: LD_ADDR_VAR 0 5
42791: PUSH
42792: LD_VAR 0 1
42796: PUSH
42797: LD_VAR 0 2
42801: PUSH
42802: LD_INT 3
42804: MINUS
42805: PUSH
42806: LD_INT 3
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: LIST
42813: PUSH
42814: LD_VAR 0 1
42818: PUSH
42819: LD_INT 4
42821: PLUS
42822: PUSH
42823: LD_VAR 0 2
42827: PUSH
42828: LD_INT 4
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: LIST
42835: PUSH
42836: LD_VAR 0 1
42840: PUSH
42841: LD_VAR 0 2
42845: PUSH
42846: LD_INT 4
42848: PLUS
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: LIST
42857: PUSH
42858: LD_VAR 0 1
42862: PUSH
42863: LD_INT 3
42865: MINUS
42866: PUSH
42867: LD_VAR 0 2
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: LD_VAR 0 1
42884: PUSH
42885: LD_INT 4
42887: MINUS
42888: PUSH
42889: LD_VAR 0 2
42893: PUSH
42894: LD_INT 4
42896: MINUS
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: ST_TO_ADDR
// end ; 3 :
42913: GO 43335
42915: LD_INT 3
42917: DOUBLE
42918: EQUAL
42919: IFTRUE 42923
42921: GO 43056
42923: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42924: LD_ADDR_VAR 0 5
42928: PUSH
42929: LD_VAR 0 1
42933: PUSH
42934: LD_INT 3
42936: PLUS
42937: PUSH
42938: LD_VAR 0 2
42942: PUSH
42943: LD_INT 4
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_VAR 0 1
42955: PUSH
42956: LD_INT 4
42958: PLUS
42959: PUSH
42960: LD_VAR 0 2
42964: PUSH
42965: LD_INT 4
42967: PLUS
42968: PUSH
42969: LD_INT 5
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: PUSH
42977: LD_VAR 0 1
42981: PUSH
42982: LD_INT 4
42984: MINUS
42985: PUSH
42986: LD_VAR 0 2
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: PUSH
42999: LD_VAR 0 1
43003: PUSH
43004: LD_VAR 0 2
43008: PUSH
43009: LD_INT 4
43011: MINUS
43012: PUSH
43013: LD_INT 3
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: LIST
43020: PUSH
43021: LD_VAR 0 1
43025: PUSH
43026: LD_INT 3
43028: MINUS
43029: PUSH
43030: LD_VAR 0 2
43034: PUSH
43035: LD_INT 3
43037: MINUS
43038: PUSH
43039: LD_INT 2
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
// end ; 4 :
43054: GO 43335
43056: LD_INT 4
43058: DOUBLE
43059: EQUAL
43060: IFTRUE 43064
43062: GO 43197
43064: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43065: LD_ADDR_VAR 0 5
43069: PUSH
43070: LD_VAR 0 1
43074: PUSH
43075: LD_VAR 0 2
43079: PUSH
43080: LD_INT 4
43082: PLUS
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: LIST
43091: PUSH
43092: LD_VAR 0 1
43096: PUSH
43097: LD_INT 3
43099: PLUS
43100: PUSH
43101: LD_VAR 0 2
43105: PUSH
43106: LD_INT 3
43108: PLUS
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: PUSH
43118: LD_VAR 0 1
43122: PUSH
43123: LD_INT 4
43125: PLUS
43126: PUSH
43127: LD_VAR 0 2
43131: PUSH
43132: LD_INT 4
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: PUSH
43140: LD_VAR 0 1
43144: PUSH
43145: LD_VAR 0 2
43149: PUSH
43150: LD_INT 3
43152: MINUS
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: PUSH
43162: LD_VAR 0 1
43166: PUSH
43167: LD_INT 4
43169: MINUS
43170: PUSH
43171: LD_VAR 0 2
43175: PUSH
43176: LD_INT 4
43178: MINUS
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// end ; 5 :
43195: GO 43335
43197: LD_INT 5
43199: DOUBLE
43200: EQUAL
43201: IFTRUE 43205
43203: GO 43334
43205: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43206: LD_ADDR_VAR 0 5
43210: PUSH
43211: LD_VAR 0 1
43215: PUSH
43216: LD_INT 4
43218: MINUS
43219: PUSH
43220: LD_VAR 0 2
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: LIST
43232: PUSH
43233: LD_VAR 0 1
43237: PUSH
43238: LD_VAR 0 2
43242: PUSH
43243: LD_INT 4
43245: MINUS
43246: PUSH
43247: LD_INT 3
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: LIST
43254: PUSH
43255: LD_VAR 0 1
43259: PUSH
43260: LD_INT 4
43262: PLUS
43263: PUSH
43264: LD_VAR 0 2
43268: PUSH
43269: LD_INT 4
43271: PLUS
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: PUSH
43281: LD_VAR 0 1
43285: PUSH
43286: LD_INT 3
43288: PLUS
43289: PUSH
43290: LD_VAR 0 2
43294: PUSH
43295: LD_INT 4
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: PUSH
43303: LD_VAR 0 1
43307: PUSH
43308: LD_VAR 0 2
43312: PUSH
43313: LD_INT 3
43315: PLUS
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: ST_TO_ADDR
// end ; end ;
43332: GO 43335
43334: POP
// result := list ;
43335: LD_ADDR_VAR 0 4
43339: PUSH
43340: LD_VAR 0 5
43344: ST_TO_ADDR
// end ;
43345: LD_VAR 0 4
43349: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43350: LD_INT 0
43352: PPUSH
43353: PPUSH
43354: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43355: LD_VAR 0 1
43359: NOT
43360: PUSH
43361: LD_VAR 0 2
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 4
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: IN
43384: NOT
43385: OR
43386: IFFALSE 43390
// exit ;
43388: GO 43482
// tmp := [ ] ;
43390: LD_ADDR_VAR 0 5
43394: PUSH
43395: EMPTY
43396: ST_TO_ADDR
// for i in units do
43397: LD_ADDR_VAR 0 4
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: FOR_IN
43408: IFFALSE 43451
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43410: LD_ADDR_VAR 0 5
43414: PUSH
43415: LD_VAR 0 5
43419: PPUSH
43420: LD_VAR 0 5
43424: PUSH
43425: LD_INT 1
43427: PLUS
43428: PPUSH
43429: LD_VAR 0 4
43433: PPUSH
43434: LD_VAR 0 2
43438: PPUSH
43439: CALL_OW 259
43443: PPUSH
43444: CALL_OW 2
43448: ST_TO_ADDR
43449: GO 43407
43451: POP
43452: POP
// if not tmp then
43453: LD_VAR 0 5
43457: NOT
43458: IFFALSE 43462
// exit ;
43460: GO 43482
// result := SortListByListDesc ( units , tmp ) ;
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: LD_VAR 0 5
43476: PPUSH
43477: CALL_OW 77
43481: ST_TO_ADDR
// end ;
43482: LD_VAR 0 3
43486: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43487: LD_INT 0
43489: PPUSH
43490: PPUSH
43491: PPUSH
// result := false ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_INT 0
43499: ST_TO_ADDR
// x := GetX ( building ) ;
43500: LD_ADDR_VAR 0 4
43504: PUSH
43505: LD_VAR 0 2
43509: PPUSH
43510: CALL_OW 250
43514: ST_TO_ADDR
// y := GetY ( building ) ;
43515: LD_ADDR_VAR 0 5
43519: PUSH
43520: LD_VAR 0 2
43524: PPUSH
43525: CALL_OW 251
43529: ST_TO_ADDR
// if not building or not x or not y then
43530: LD_VAR 0 2
43534: NOT
43535: PUSH
43536: LD_VAR 0 4
43540: NOT
43541: OR
43542: PUSH
43543: LD_VAR 0 5
43547: NOT
43548: OR
43549: IFFALSE 43553
// exit ;
43551: GO 43645
// if GetTaskList ( unit ) then
43553: LD_VAR 0 1
43557: PPUSH
43558: CALL_OW 437
43562: IFFALSE 43645
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43564: LD_STRING e
43566: PUSH
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 437
43576: PUSH
43577: LD_INT 1
43579: ARRAY
43580: PUSH
43581: LD_INT 1
43583: ARRAY
43584: EQUAL
43585: PUSH
43586: LD_VAR 0 4
43590: PUSH
43591: LD_VAR 0 1
43595: PPUSH
43596: CALL_OW 437
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PUSH
43605: LD_INT 2
43607: ARRAY
43608: EQUAL
43609: AND
43610: PUSH
43611: LD_VAR 0 5
43615: PUSH
43616: LD_VAR 0 1
43620: PPUSH
43621: CALL_OW 437
43625: PUSH
43626: LD_INT 1
43628: ARRAY
43629: PUSH
43630: LD_INT 3
43632: ARRAY
43633: EQUAL
43634: AND
43635: IFFALSE 43645
// result := true end ;
43637: LD_ADDR_VAR 0 3
43641: PUSH
43642: LD_INT 1
43644: ST_TO_ADDR
// end ;
43645: LD_VAR 0 3
43649: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43650: LD_INT 0
43652: PPUSH
// result := false ;
43653: LD_ADDR_VAR 0 4
43657: PUSH
43658: LD_INT 0
43660: ST_TO_ADDR
// if GetTaskList ( unit ) then
43661: LD_VAR 0 1
43665: PPUSH
43666: CALL_OW 437
43670: IFFALSE 43753
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43672: LD_STRING M
43674: PUSH
43675: LD_VAR 0 1
43679: PPUSH
43680: CALL_OW 437
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PUSH
43689: LD_INT 1
43691: ARRAY
43692: EQUAL
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_VAR 0 1
43703: PPUSH
43704: CALL_OW 437
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: PUSH
43713: LD_INT 2
43715: ARRAY
43716: EQUAL
43717: AND
43718: PUSH
43719: LD_VAR 0 3
43723: PUSH
43724: LD_VAR 0 1
43728: PPUSH
43729: CALL_OW 437
43733: PUSH
43734: LD_INT 1
43736: ARRAY
43737: PUSH
43738: LD_INT 3
43740: ARRAY
43741: EQUAL
43742: AND
43743: IFFALSE 43753
// result := true ;
43745: LD_ADDR_VAR 0 4
43749: PUSH
43750: LD_INT 1
43752: ST_TO_ADDR
// end ; end ;
43753: LD_VAR 0 4
43757: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43758: LD_INT 0
43760: PPUSH
43761: PPUSH
43762: PPUSH
43763: PPUSH
// if not unit or not area then
43764: LD_VAR 0 1
43768: NOT
43769: PUSH
43770: LD_VAR 0 2
43774: NOT
43775: OR
43776: IFFALSE 43780
// exit ;
43778: GO 43944
// tmp := AreaToList ( area , i ) ;
43780: LD_ADDR_VAR 0 6
43784: PUSH
43785: LD_VAR 0 2
43789: PPUSH
43790: LD_VAR 0 5
43794: PPUSH
43795: CALL_OW 517
43799: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43800: LD_ADDR_VAR 0 5
43804: PUSH
43805: DOUBLE
43806: LD_INT 1
43808: DEC
43809: ST_TO_ADDR
43810: LD_VAR 0 6
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: PUSH
43819: FOR_TO
43820: IFFALSE 43942
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43822: LD_ADDR_VAR 0 7
43826: PUSH
43827: LD_VAR 0 6
43831: PUSH
43832: LD_INT 1
43834: ARRAY
43835: PUSH
43836: LD_VAR 0 5
43840: ARRAY
43841: PUSH
43842: LD_VAR 0 6
43846: PUSH
43847: LD_INT 2
43849: ARRAY
43850: PUSH
43851: LD_VAR 0 5
43855: ARRAY
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43861: LD_VAR 0 7
43865: PUSH
43866: LD_INT 1
43868: ARRAY
43869: PPUSH
43870: LD_VAR 0 7
43874: PUSH
43875: LD_INT 2
43877: ARRAY
43878: PPUSH
43879: CALL_OW 428
43883: PUSH
43884: LD_INT 0
43886: EQUAL
43887: IFFALSE 43940
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43889: LD_VAR 0 1
43893: PPUSH
43894: LD_VAR 0 7
43898: PUSH
43899: LD_INT 1
43901: ARRAY
43902: PPUSH
43903: LD_VAR 0 7
43907: PUSH
43908: LD_INT 2
43910: ARRAY
43911: PPUSH
43912: LD_VAR 0 3
43916: PPUSH
43917: CALL_OW 48
// result := IsPlaced ( unit ) ;
43921: LD_ADDR_VAR 0 4
43925: PUSH
43926: LD_VAR 0 1
43930: PPUSH
43931: CALL_OW 305
43935: ST_TO_ADDR
// exit ;
43936: POP
43937: POP
43938: GO 43944
// end ; end ;
43940: GO 43819
43942: POP
43943: POP
// end ;
43944: LD_VAR 0 4
43948: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43949: LD_INT 0
43951: PPUSH
43952: PPUSH
43953: PPUSH
// if not side or side > 8 then
43954: LD_VAR 0 1
43958: NOT
43959: PUSH
43960: LD_VAR 0 1
43964: PUSH
43965: LD_INT 8
43967: GREATER
43968: OR
43969: IFFALSE 43973
// exit ;
43971: GO 44160
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43973: LD_ADDR_VAR 0 4
43977: PUSH
43978: LD_INT 22
43980: PUSH
43981: LD_VAR 0 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 21
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PPUSH
44004: CALL_OW 69
44008: ST_TO_ADDR
// if not tmp then
44009: LD_VAR 0 4
44013: NOT
44014: IFFALSE 44018
// exit ;
44016: GO 44160
// enable_addtolog := true ;
44018: LD_ADDR_OWVAR 81
44022: PUSH
44023: LD_INT 1
44025: ST_TO_ADDR
// AddToLog ( [ ) ;
44026: LD_STRING [
44028: PPUSH
44029: CALL_OW 561
// for i in tmp do
44033: LD_ADDR_VAR 0 3
44037: PUSH
44038: LD_VAR 0 4
44042: PUSH
44043: FOR_IN
44044: IFFALSE 44151
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44046: LD_STRING [
44048: PUSH
44049: LD_VAR 0 3
44053: PPUSH
44054: CALL_OW 266
44058: STR
44059: PUSH
44060: LD_STRING , 
44062: STR
44063: PUSH
44064: LD_VAR 0 3
44068: PPUSH
44069: CALL_OW 250
44073: STR
44074: PUSH
44075: LD_STRING , 
44077: STR
44078: PUSH
44079: LD_VAR 0 3
44083: PPUSH
44084: CALL_OW 251
44088: STR
44089: PUSH
44090: LD_STRING , 
44092: STR
44093: PUSH
44094: LD_VAR 0 3
44098: PPUSH
44099: CALL_OW 254
44103: STR
44104: PUSH
44105: LD_STRING , 
44107: STR
44108: PUSH
44109: LD_VAR 0 3
44113: PPUSH
44114: LD_INT 1
44116: PPUSH
44117: CALL_OW 268
44121: STR
44122: PUSH
44123: LD_STRING , 
44125: STR
44126: PUSH
44127: LD_VAR 0 3
44131: PPUSH
44132: LD_INT 2
44134: PPUSH
44135: CALL_OW 268
44139: STR
44140: PUSH
44141: LD_STRING ],
44143: STR
44144: PPUSH
44145: CALL_OW 561
// end ;
44149: GO 44043
44151: POP
44152: POP
// AddToLog ( ]; ) ;
44153: LD_STRING ];
44155: PPUSH
44156: CALL_OW 561
// end ;
44160: LD_VAR 0 2
44164: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
44171: PPUSH
// if not area or not rate or not max then
44172: LD_VAR 0 1
44176: NOT
44177: PUSH
44178: LD_VAR 0 2
44182: NOT
44183: OR
44184: PUSH
44185: LD_VAR 0 4
44189: NOT
44190: OR
44191: IFFALSE 44195
// exit ;
44193: GO 44387
// while 1 do
44195: LD_INT 1
44197: IFFALSE 44387
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44199: LD_ADDR_VAR 0 9
44203: PUSH
44204: LD_VAR 0 1
44208: PPUSH
44209: LD_INT 1
44211: PPUSH
44212: CALL_OW 287
44216: PUSH
44217: LD_INT 10
44219: MUL
44220: ST_TO_ADDR
// r := rate / 10 ;
44221: LD_ADDR_VAR 0 7
44225: PUSH
44226: LD_VAR 0 2
44230: PUSH
44231: LD_INT 10
44233: DIVREAL
44234: ST_TO_ADDR
// time := 1 1$00 ;
44235: LD_ADDR_VAR 0 8
44239: PUSH
44240: LD_INT 2100
44242: ST_TO_ADDR
// if amount < min then
44243: LD_VAR 0 9
44247: PUSH
44248: LD_VAR 0 3
44252: LESS
44253: IFFALSE 44271
// r := r * 2 else
44255: LD_ADDR_VAR 0 7
44259: PUSH
44260: LD_VAR 0 7
44264: PUSH
44265: LD_INT 2
44267: MUL
44268: ST_TO_ADDR
44269: GO 44297
// if amount > max then
44271: LD_VAR 0 9
44275: PUSH
44276: LD_VAR 0 4
44280: GREATER
44281: IFFALSE 44297
// r := r / 2 ;
44283: LD_ADDR_VAR 0 7
44287: PUSH
44288: LD_VAR 0 7
44292: PUSH
44293: LD_INT 2
44295: DIVREAL
44296: ST_TO_ADDR
// time := time / r ;
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 8
44306: PUSH
44307: LD_VAR 0 7
44311: DIVREAL
44312: ST_TO_ADDR
// if time < 0 then
44313: LD_VAR 0 8
44317: PUSH
44318: LD_INT 0
44320: LESS
44321: IFFALSE 44338
// time := time * - 1 ;
44323: LD_ADDR_VAR 0 8
44327: PUSH
44328: LD_VAR 0 8
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: MUL
44337: ST_TO_ADDR
// wait ( time ) ;
44338: LD_VAR 0 8
44342: PPUSH
44343: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
44347: LD_INT 35
44349: PPUSH
44350: LD_INT 875
44352: PPUSH
44353: CALL_OW 12
44357: PPUSH
44358: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44362: LD_INT 1
44364: PPUSH
44365: LD_INT 5
44367: PPUSH
44368: CALL_OW 12
44372: PPUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: LD_INT 1
44380: PPUSH
44381: CALL_OW 55
// end ;
44385: GO 44195
// end ;
44387: LD_VAR 0 5
44391: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44392: LD_INT 0
44394: PPUSH
44395: PPUSH
44396: PPUSH
44397: PPUSH
44398: PPUSH
44399: PPUSH
44400: PPUSH
44401: PPUSH
// if not turrets or not factories then
44402: LD_VAR 0 1
44406: NOT
44407: PUSH
44408: LD_VAR 0 2
44412: NOT
44413: OR
44414: IFFALSE 44418
// exit ;
44416: GO 44725
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44418: LD_ADDR_VAR 0 10
44422: PUSH
44423: LD_INT 5
44425: PUSH
44426: LD_INT 6
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 4
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: LD_INT 5
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 24
44460: PUSH
44461: LD_INT 25
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 23
44470: PUSH
44471: LD_INT 27
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 42
44484: PUSH
44485: LD_INT 43
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 44
44494: PUSH
44495: LD_INT 46
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 45
44504: PUSH
44505: LD_INT 47
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: LIST
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// result := [ ] ;
44522: LD_ADDR_VAR 0 3
44526: PUSH
44527: EMPTY
44528: ST_TO_ADDR
// for i in turrets do
44529: LD_ADDR_VAR 0 4
44533: PUSH
44534: LD_VAR 0 1
44538: PUSH
44539: FOR_IN
44540: IFFALSE 44723
// begin nat := GetNation ( i ) ;
44542: LD_ADDR_VAR 0 7
44546: PUSH
44547: LD_VAR 0 4
44551: PPUSH
44552: CALL_OW 248
44556: ST_TO_ADDR
// weapon := 0 ;
44557: LD_ADDR_VAR 0 8
44561: PUSH
44562: LD_INT 0
44564: ST_TO_ADDR
// if not nat then
44565: LD_VAR 0 7
44569: NOT
44570: IFFALSE 44574
// continue ;
44572: GO 44539
// for j in list [ nat ] do
44574: LD_ADDR_VAR 0 5
44578: PUSH
44579: LD_VAR 0 10
44583: PUSH
44584: LD_VAR 0 7
44588: ARRAY
44589: PUSH
44590: FOR_IN
44591: IFFALSE 44632
// if GetBWeapon ( i ) = j [ 1 ] then
44593: LD_VAR 0 4
44597: PPUSH
44598: CALL_OW 269
44602: PUSH
44603: LD_VAR 0 5
44607: PUSH
44608: LD_INT 1
44610: ARRAY
44611: EQUAL
44612: IFFALSE 44630
// begin weapon := j [ 2 ] ;
44614: LD_ADDR_VAR 0 8
44618: PUSH
44619: LD_VAR 0 5
44623: PUSH
44624: LD_INT 2
44626: ARRAY
44627: ST_TO_ADDR
// break ;
44628: GO 44632
// end ;
44630: GO 44590
44632: POP
44633: POP
// if not weapon then
44634: LD_VAR 0 8
44638: NOT
44639: IFFALSE 44643
// continue ;
44641: GO 44539
// for k in factories do
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 2
44652: PUSH
44653: FOR_IN
44654: IFFALSE 44719
// begin weapons := AvailableWeaponList ( k ) ;
44656: LD_ADDR_VAR 0 9
44660: PUSH
44661: LD_VAR 0 6
44665: PPUSH
44666: CALL_OW 478
44670: ST_TO_ADDR
// if not weapons then
44671: LD_VAR 0 9
44675: NOT
44676: IFFALSE 44680
// continue ;
44678: GO 44653
// if weapon in weapons then
44680: LD_VAR 0 8
44684: PUSH
44685: LD_VAR 0 9
44689: IN
44690: IFFALSE 44717
// begin result := [ i , weapon ] ;
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_VAR 0 4
44701: PUSH
44702: LD_VAR 0 8
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// exit ;
44711: POP
44712: POP
44713: POP
44714: POP
44715: GO 44725
// end ; end ;
44717: GO 44653
44719: POP
44720: POP
// end ;
44721: GO 44539
44723: POP
44724: POP
// end ;
44725: LD_VAR 0 3
44729: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44730: LD_INT 0
44732: PPUSH
// if not side or side > 8 then
44733: LD_VAR 0 3
44737: NOT
44738: PUSH
44739: LD_VAR 0 3
44743: PUSH
44744: LD_INT 8
44746: GREATER
44747: OR
44748: IFFALSE 44752
// exit ;
44750: GO 44811
// if not range then
44752: LD_VAR 0 4
44756: NOT
44757: IFFALSE 44768
// range := - 12 ;
44759: LD_ADDR_VAR 0 4
44763: PUSH
44764: LD_INT 12
44766: NEG
44767: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44768: LD_VAR 0 1
44772: PPUSH
44773: LD_VAR 0 2
44777: PPUSH
44778: LD_VAR 0 3
44782: PPUSH
44783: LD_VAR 0 4
44787: PPUSH
44788: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44792: LD_VAR 0 1
44796: PPUSH
44797: LD_VAR 0 2
44801: PPUSH
44802: LD_VAR 0 3
44806: PPUSH
44807: CALL_OW 331
// end ;
44811: LD_VAR 0 5
44815: RET
// export function Video ( mode ) ; begin
44816: LD_INT 0
44818: PPUSH
// ingame_video = mode ;
44819: LD_ADDR_OWVAR 52
44823: PUSH
44824: LD_VAR 0 1
44828: ST_TO_ADDR
// interface_hidden = mode ;
44829: LD_ADDR_OWVAR 54
44833: PUSH
44834: LD_VAR 0 1
44838: ST_TO_ADDR
// end ;
44839: LD_VAR 0 2
44843: RET
// export function Join ( array , element ) ; begin
44844: LD_INT 0
44846: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44847: LD_ADDR_VAR 0 3
44851: PUSH
44852: LD_VAR 0 1
44856: PPUSH
44857: LD_VAR 0 1
44861: PUSH
44862: LD_INT 1
44864: PLUS
44865: PPUSH
44866: LD_VAR 0 2
44870: PPUSH
44871: CALL_OW 1
44875: ST_TO_ADDR
// end ;
44876: LD_VAR 0 3
44880: RET
// export function JoinUnion ( array , element ) ; begin
44881: LD_INT 0
44883: PPUSH
// result := array union element ;
44884: LD_ADDR_VAR 0 3
44888: PUSH
44889: LD_VAR 0 1
44893: PUSH
44894: LD_VAR 0 2
44898: UNION
44899: ST_TO_ADDR
// end ;
44900: LD_VAR 0 3
44904: RET
// export function GetBehemoths ( side ) ; begin
44905: LD_INT 0
44907: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44908: LD_ADDR_VAR 0 2
44912: PUSH
44913: LD_INT 22
44915: PUSH
44916: LD_VAR 0 1
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 31
44927: PUSH
44928: LD_INT 25
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PPUSH
44939: CALL_OW 69
44943: ST_TO_ADDR
// end ;
44944: LD_VAR 0 2
44948: RET
// export function Shuffle ( array ) ; var i , index ; begin
44949: LD_INT 0
44951: PPUSH
44952: PPUSH
44953: PPUSH
// result := [ ] ;
44954: LD_ADDR_VAR 0 2
44958: PUSH
44959: EMPTY
44960: ST_TO_ADDR
// if not array then
44961: LD_VAR 0 1
44965: NOT
44966: IFFALSE 44970
// exit ;
44968: GO 45069
// Randomize ;
44970: CALL_OW 10
// for i = array downto 1 do
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: DOUBLE
44980: LD_VAR 0 1
44984: INC
44985: ST_TO_ADDR
44986: LD_INT 1
44988: PUSH
44989: FOR_DOWNTO
44990: IFFALSE 45067
// begin index := rand ( 1 , array ) ;
44992: LD_ADDR_VAR 0 4
44996: PUSH
44997: LD_INT 1
44999: PPUSH
45000: LD_VAR 0 1
45004: PPUSH
45005: CALL_OW 12
45009: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45010: LD_ADDR_VAR 0 2
45014: PUSH
45015: LD_VAR 0 2
45019: PPUSH
45020: LD_VAR 0 2
45024: PUSH
45025: LD_INT 1
45027: PLUS
45028: PPUSH
45029: LD_VAR 0 1
45033: PUSH
45034: LD_VAR 0 4
45038: ARRAY
45039: PPUSH
45040: CALL_OW 2
45044: ST_TO_ADDR
// array := Delete ( array , index ) ;
45045: LD_ADDR_VAR 0 1
45049: PUSH
45050: LD_VAR 0 1
45054: PPUSH
45055: LD_VAR 0 4
45059: PPUSH
45060: CALL_OW 3
45064: ST_TO_ADDR
// end ;
45065: GO 44989
45067: POP
45068: POP
// end ;
45069: LD_VAR 0 2
45073: RET
// export function GetBaseMaterials ( base ) ; begin
45074: LD_INT 0
45076: PPUSH
// result := [ 0 , 0 , 0 ] ;
45077: LD_ADDR_VAR 0 2
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// if not base then
45096: LD_VAR 0 1
45100: NOT
45101: IFFALSE 45105
// exit ;
45103: GO 45154
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45105: LD_ADDR_VAR 0 2
45109: PUSH
45110: LD_VAR 0 1
45114: PPUSH
45115: LD_INT 1
45117: PPUSH
45118: CALL_OW 275
45122: PUSH
45123: LD_VAR 0 1
45127: PPUSH
45128: LD_INT 2
45130: PPUSH
45131: CALL_OW 275
45135: PUSH
45136: LD_VAR 0 1
45140: PPUSH
45141: LD_INT 3
45143: PPUSH
45144: CALL_OW 275
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// end ;
45154: LD_VAR 0 2
45158: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45159: LD_INT 0
45161: PPUSH
45162: PPUSH
// result := array ;
45163: LD_ADDR_VAR 0 3
45167: PUSH
45168: LD_VAR 0 1
45172: ST_TO_ADDR
// if size > 0 then
45173: LD_VAR 0 2
45177: PUSH
45178: LD_INT 0
45180: GREATER
45181: IFFALSE 45227
// for i := array downto size do
45183: LD_ADDR_VAR 0 4
45187: PUSH
45188: DOUBLE
45189: LD_VAR 0 1
45193: INC
45194: ST_TO_ADDR
45195: LD_VAR 0 2
45199: PUSH
45200: FOR_DOWNTO
45201: IFFALSE 45225
// result := Delete ( result , result ) ;
45203: LD_ADDR_VAR 0 3
45207: PUSH
45208: LD_VAR 0 3
45212: PPUSH
45213: LD_VAR 0 3
45217: PPUSH
45218: CALL_OW 3
45222: ST_TO_ADDR
45223: GO 45200
45225: POP
45226: POP
// end ;
45227: LD_VAR 0 3
45231: RET
// export function ComExit ( unit ) ; var tmp ; begin
45232: LD_INT 0
45234: PPUSH
45235: PPUSH
// if not IsInUnit ( unit ) then
45236: LD_VAR 0 1
45240: PPUSH
45241: CALL_OW 310
45245: NOT
45246: IFFALSE 45250
// exit ;
45248: GO 45310
// tmp := IsInUnit ( unit ) ;
45250: LD_ADDR_VAR 0 3
45254: PUSH
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 310
45264: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45265: LD_VAR 0 3
45269: PPUSH
45270: CALL_OW 247
45274: PUSH
45275: LD_INT 2
45277: EQUAL
45278: IFFALSE 45291
// ComExitVehicle ( unit ) else
45280: LD_VAR 0 1
45284: PPUSH
45285: CALL_OW 121
45289: GO 45300
// ComExitBuilding ( unit ) ;
45291: LD_VAR 0 1
45295: PPUSH
45296: CALL_OW 122
// result := tmp ;
45300: LD_ADDR_VAR 0 2
45304: PUSH
45305: LD_VAR 0 3
45309: ST_TO_ADDR
// end ;
45310: LD_VAR 0 2
45314: RET
// export function ResetHc ; begin
45315: LD_INT 0
45317: PPUSH
// InitHc ;
45318: CALL_OW 19
// hc_importance := 0 ;
45322: LD_ADDR_OWVAR 32
45326: PUSH
45327: LD_INT 0
45329: ST_TO_ADDR
// end ;
45330: LD_VAR 0 1
45334: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45335: LD_INT 0
45337: PPUSH
45338: PPUSH
45339: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45340: LD_ADDR_VAR 0 6
45344: PUSH
45345: LD_VAR 0 1
45349: PUSH
45350: LD_VAR 0 3
45354: PLUS
45355: PUSH
45356: LD_INT 2
45358: DIV
45359: ST_TO_ADDR
// if _x < 0 then
45360: LD_VAR 0 6
45364: PUSH
45365: LD_INT 0
45367: LESS
45368: IFFALSE 45385
// _x := _x * - 1 ;
45370: LD_ADDR_VAR 0 6
45374: PUSH
45375: LD_VAR 0 6
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: MUL
45384: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45385: LD_ADDR_VAR 0 7
45389: PUSH
45390: LD_VAR 0 2
45394: PUSH
45395: LD_VAR 0 4
45399: PLUS
45400: PUSH
45401: LD_INT 2
45403: DIV
45404: ST_TO_ADDR
// if _y < 0 then
45405: LD_VAR 0 7
45409: PUSH
45410: LD_INT 0
45412: LESS
45413: IFFALSE 45430
// _y := _y * - 1 ;
45415: LD_ADDR_VAR 0 7
45419: PUSH
45420: LD_VAR 0 7
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: MUL
45429: ST_TO_ADDR
// result := [ _x , _y ] ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 6
45439: PUSH
45440: LD_VAR 0 7
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: ST_TO_ADDR
// end ;
45449: LD_VAR 0 5
45453: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45454: LD_INT 0
45456: PPUSH
45457: PPUSH
45458: PPUSH
45459: PPUSH
// task := GetTaskList ( unit ) ;
45460: LD_ADDR_VAR 0 7
45464: PUSH
45465: LD_VAR 0 1
45469: PPUSH
45470: CALL_OW 437
45474: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45475: LD_VAR 0 7
45479: NOT
45480: PUSH
45481: LD_VAR 0 1
45485: PPUSH
45486: LD_VAR 0 2
45490: PPUSH
45491: CALL_OW 308
45495: NOT
45496: AND
45497: IFFALSE 45501
// exit ;
45499: GO 45619
// if IsInArea ( unit , area ) then
45501: LD_VAR 0 1
45505: PPUSH
45506: LD_VAR 0 2
45510: PPUSH
45511: CALL_OW 308
45515: IFFALSE 45533
// begin ComMoveToArea ( unit , goAway ) ;
45517: LD_VAR 0 1
45521: PPUSH
45522: LD_VAR 0 3
45526: PPUSH
45527: CALL_OW 113
// exit ;
45531: GO 45619
// end ; if task [ 1 ] [ 1 ] <> M then
45533: LD_VAR 0 7
45537: PUSH
45538: LD_INT 1
45540: ARRAY
45541: PUSH
45542: LD_INT 1
45544: ARRAY
45545: PUSH
45546: LD_STRING M
45548: NONEQUAL
45549: IFFALSE 45553
// exit ;
45551: GO 45619
// x := task [ 1 ] [ 2 ] ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 7
45562: PUSH
45563: LD_INT 1
45565: ARRAY
45566: PUSH
45567: LD_INT 2
45569: ARRAY
45570: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45571: LD_ADDR_VAR 0 6
45575: PUSH
45576: LD_VAR 0 7
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PUSH
45585: LD_INT 3
45587: ARRAY
45588: ST_TO_ADDR
// if InArea ( x , y , area ) then
45589: LD_VAR 0 5
45593: PPUSH
45594: LD_VAR 0 6
45598: PPUSH
45599: LD_VAR 0 2
45603: PPUSH
45604: CALL_OW 309
45608: IFFALSE 45619
// ComStop ( unit ) ;
45610: LD_VAR 0 1
45614: PPUSH
45615: CALL_OW 141
// end ;
45619: LD_VAR 0 4
45623: RET
// export function Abs ( value ) ; begin
45624: LD_INT 0
45626: PPUSH
// result := value ;
45627: LD_ADDR_VAR 0 2
45631: PUSH
45632: LD_VAR 0 1
45636: ST_TO_ADDR
// if value < 0 then
45637: LD_VAR 0 1
45641: PUSH
45642: LD_INT 0
45644: LESS
45645: IFFALSE 45662
// result := value * - 1 ;
45647: LD_ADDR_VAR 0 2
45651: PUSH
45652: LD_VAR 0 1
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: MUL
45661: ST_TO_ADDR
// end ;
45662: LD_VAR 0 2
45666: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45667: LD_INT 0
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
// if not unit or not building then
45677: LD_VAR 0 1
45681: NOT
45682: PUSH
45683: LD_VAR 0 2
45687: NOT
45688: OR
45689: IFFALSE 45693
// exit ;
45691: GO 45919
// x := GetX ( building ) ;
45693: LD_ADDR_VAR 0 4
45697: PUSH
45698: LD_VAR 0 2
45702: PPUSH
45703: CALL_OW 250
45707: ST_TO_ADDR
// y := GetY ( building ) ;
45708: LD_ADDR_VAR 0 6
45712: PUSH
45713: LD_VAR 0 2
45717: PPUSH
45718: CALL_OW 251
45722: ST_TO_ADDR
// d := GetDir ( building ) ;
45723: LD_ADDR_VAR 0 8
45727: PUSH
45728: LD_VAR 0 2
45732: PPUSH
45733: CALL_OW 254
45737: ST_TO_ADDR
// r := 4 ;
45738: LD_ADDR_VAR 0 9
45742: PUSH
45743: LD_INT 4
45745: ST_TO_ADDR
// for i := 1 to 5 do
45746: LD_ADDR_VAR 0 10
45750: PUSH
45751: DOUBLE
45752: LD_INT 1
45754: DEC
45755: ST_TO_ADDR
45756: LD_INT 5
45758: PUSH
45759: FOR_TO
45760: IFFALSE 45917
// begin _x := ShiftX ( x , d , r + i ) ;
45762: LD_ADDR_VAR 0 5
45766: PUSH
45767: LD_VAR 0 4
45771: PPUSH
45772: LD_VAR 0 8
45776: PPUSH
45777: LD_VAR 0 9
45781: PUSH
45782: LD_VAR 0 10
45786: PLUS
45787: PPUSH
45788: CALL_OW 272
45792: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45793: LD_ADDR_VAR 0 7
45797: PUSH
45798: LD_VAR 0 6
45802: PPUSH
45803: LD_VAR 0 8
45807: PPUSH
45808: LD_VAR 0 9
45812: PUSH
45813: LD_VAR 0 10
45817: PLUS
45818: PPUSH
45819: CALL_OW 273
45823: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45824: LD_VAR 0 5
45828: PPUSH
45829: LD_VAR 0 7
45833: PPUSH
45834: CALL_OW 488
45838: PUSH
45839: LD_VAR 0 5
45843: PPUSH
45844: LD_VAR 0 7
45848: PPUSH
45849: CALL_OW 428
45853: PPUSH
45854: CALL_OW 247
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: IN
45869: NOT
45870: AND
45871: IFFALSE 45915
// begin ComMoveXY ( unit , _x , _y ) ;
45873: LD_VAR 0 1
45877: PPUSH
45878: LD_VAR 0 5
45882: PPUSH
45883: LD_VAR 0 7
45887: PPUSH
45888: CALL_OW 111
// result := [ _x , _y ] ;
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: LD_VAR 0 5
45901: PUSH
45902: LD_VAR 0 7
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// exit ;
45911: POP
45912: POP
45913: GO 45919
// end ; end ;
45915: GO 45759
45917: POP
45918: POP
// end ;
45919: LD_VAR 0 3
45923: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45924: LD_INT 0
45926: PPUSH
45927: PPUSH
45928: PPUSH
// result := 0 ;
45929: LD_ADDR_VAR 0 3
45933: PUSH
45934: LD_INT 0
45936: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45937: LD_VAR 0 1
45941: PUSH
45942: LD_INT 0
45944: LESS
45945: PUSH
45946: LD_VAR 0 1
45950: PUSH
45951: LD_INT 8
45953: GREATER
45954: OR
45955: PUSH
45956: LD_VAR 0 2
45960: PUSH
45961: LD_INT 0
45963: LESS
45964: OR
45965: PUSH
45966: LD_VAR 0 2
45970: PUSH
45971: LD_INT 8
45973: GREATER
45974: OR
45975: IFFALSE 45979
// exit ;
45977: GO 46054
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45979: LD_ADDR_VAR 0 4
45983: PUSH
45984: LD_INT 22
45986: PUSH
45987: LD_VAR 0 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PPUSH
45996: CALL_OW 69
46000: PUSH
46001: FOR_IN
46002: IFFALSE 46052
// begin un := UnitShoot ( i ) ;
46004: LD_ADDR_VAR 0 5
46008: PUSH
46009: LD_VAR 0 4
46013: PPUSH
46014: CALL_OW 504
46018: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46019: LD_VAR 0 5
46023: PPUSH
46024: CALL_OW 255
46028: PUSH
46029: LD_VAR 0 1
46033: EQUAL
46034: IFFALSE 46050
// begin result := un ;
46036: LD_ADDR_VAR 0 3
46040: PUSH
46041: LD_VAR 0 5
46045: ST_TO_ADDR
// exit ;
46046: POP
46047: POP
46048: GO 46054
// end ; end ;
46050: GO 46001
46052: POP
46053: POP
// end ; end_of_file
46054: LD_VAR 0 3
46058: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
46059: LD_VAR 0 2
46063: PUSH
46064: LD_INT 100
46066: EQUAL
46067: IFFALSE 47016
// begin if not StreamModeActive then
46069: LD_EXP 28
46073: NOT
46074: IFFALSE 46084
// StreamModeActive := true ;
46076: LD_ADDR_EXP 28
46080: PUSH
46081: LD_INT 1
46083: ST_TO_ADDR
// if p3 = 0 then
46084: LD_VAR 0 3
46088: PUSH
46089: LD_INT 0
46091: EQUAL
46092: IFFALSE 46098
// InitStreamMode ;
46094: CALL 47174 0 0
// if p3 = 1 then
46098: LD_VAR 0 3
46102: PUSH
46103: LD_INT 1
46105: EQUAL
46106: IFFALSE 46116
// sRocket := true ;
46108: LD_ADDR_EXP 33
46112: PUSH
46113: LD_INT 1
46115: ST_TO_ADDR
// if p3 = 2 then
46116: LD_VAR 0 3
46120: PUSH
46121: LD_INT 2
46123: EQUAL
46124: IFFALSE 46134
// sSpeed := true ;
46126: LD_ADDR_EXP 32
46130: PUSH
46131: LD_INT 1
46133: ST_TO_ADDR
// if p3 = 3 then
46134: LD_VAR 0 3
46138: PUSH
46139: LD_INT 3
46141: EQUAL
46142: IFFALSE 46152
// sEngine := true ;
46144: LD_ADDR_EXP 34
46148: PUSH
46149: LD_INT 1
46151: ST_TO_ADDR
// if p3 = 4 then
46152: LD_VAR 0 3
46156: PUSH
46157: LD_INT 4
46159: EQUAL
46160: IFFALSE 46170
// sSpec := true ;
46162: LD_ADDR_EXP 31
46166: PUSH
46167: LD_INT 1
46169: ST_TO_ADDR
// if p3 = 5 then
46170: LD_VAR 0 3
46174: PUSH
46175: LD_INT 5
46177: EQUAL
46178: IFFALSE 46188
// sLevel := true ;
46180: LD_ADDR_EXP 35
46184: PUSH
46185: LD_INT 1
46187: ST_TO_ADDR
// if p3 = 6 then
46188: LD_VAR 0 3
46192: PUSH
46193: LD_INT 6
46195: EQUAL
46196: IFFALSE 46206
// sArmoury := true ;
46198: LD_ADDR_EXP 36
46202: PUSH
46203: LD_INT 1
46205: ST_TO_ADDR
// if p3 = 7 then
46206: LD_VAR 0 3
46210: PUSH
46211: LD_INT 7
46213: EQUAL
46214: IFFALSE 46224
// sRadar := true ;
46216: LD_ADDR_EXP 37
46220: PUSH
46221: LD_INT 1
46223: ST_TO_ADDR
// if p3 = 8 then
46224: LD_VAR 0 3
46228: PUSH
46229: LD_INT 8
46231: EQUAL
46232: IFFALSE 46242
// sBunker := true ;
46234: LD_ADDR_EXP 38
46238: PUSH
46239: LD_INT 1
46241: ST_TO_ADDR
// if p3 = 9 then
46242: LD_VAR 0 3
46246: PUSH
46247: LD_INT 9
46249: EQUAL
46250: IFFALSE 46260
// sHack := true ;
46252: LD_ADDR_EXP 39
46256: PUSH
46257: LD_INT 1
46259: ST_TO_ADDR
// if p3 = 10 then
46260: LD_VAR 0 3
46264: PUSH
46265: LD_INT 10
46267: EQUAL
46268: IFFALSE 46278
// sFire := true ;
46270: LD_ADDR_EXP 40
46274: PUSH
46275: LD_INT 1
46277: ST_TO_ADDR
// if p3 = 11 then
46278: LD_VAR 0 3
46282: PUSH
46283: LD_INT 11
46285: EQUAL
46286: IFFALSE 46296
// sRefresh := true ;
46288: LD_ADDR_EXP 41
46292: PUSH
46293: LD_INT 1
46295: ST_TO_ADDR
// if p3 = 12 then
46296: LD_VAR 0 3
46300: PUSH
46301: LD_INT 12
46303: EQUAL
46304: IFFALSE 46314
// sExp := true ;
46306: LD_ADDR_EXP 42
46310: PUSH
46311: LD_INT 1
46313: ST_TO_ADDR
// if p3 = 13 then
46314: LD_VAR 0 3
46318: PUSH
46319: LD_INT 13
46321: EQUAL
46322: IFFALSE 46332
// sDepot := true ;
46324: LD_ADDR_EXP 43
46328: PUSH
46329: LD_INT 1
46331: ST_TO_ADDR
// if p3 = 14 then
46332: LD_VAR 0 3
46336: PUSH
46337: LD_INT 14
46339: EQUAL
46340: IFFALSE 46350
// sFlag := true ;
46342: LD_ADDR_EXP 44
46346: PUSH
46347: LD_INT 1
46349: ST_TO_ADDR
// if p3 = 15 then
46350: LD_VAR 0 3
46354: PUSH
46355: LD_INT 15
46357: EQUAL
46358: IFFALSE 46368
// sKamikadze := true ;
46360: LD_ADDR_EXP 52
46364: PUSH
46365: LD_INT 1
46367: ST_TO_ADDR
// if p3 = 16 then
46368: LD_VAR 0 3
46372: PUSH
46373: LD_INT 16
46375: EQUAL
46376: IFFALSE 46386
// sTroll := true ;
46378: LD_ADDR_EXP 53
46382: PUSH
46383: LD_INT 1
46385: ST_TO_ADDR
// if p3 = 17 then
46386: LD_VAR 0 3
46390: PUSH
46391: LD_INT 17
46393: EQUAL
46394: IFFALSE 46404
// sSlow := true ;
46396: LD_ADDR_EXP 54
46400: PUSH
46401: LD_INT 1
46403: ST_TO_ADDR
// if p3 = 18 then
46404: LD_VAR 0 3
46408: PUSH
46409: LD_INT 18
46411: EQUAL
46412: IFFALSE 46422
// sLack := true ;
46414: LD_ADDR_EXP 55
46418: PUSH
46419: LD_INT 1
46421: ST_TO_ADDR
// if p3 = 19 then
46422: LD_VAR 0 3
46426: PUSH
46427: LD_INT 19
46429: EQUAL
46430: IFFALSE 46440
// sTank := true ;
46432: LD_ADDR_EXP 57
46436: PUSH
46437: LD_INT 1
46439: ST_TO_ADDR
// if p3 = 20 then
46440: LD_VAR 0 3
46444: PUSH
46445: LD_INT 20
46447: EQUAL
46448: IFFALSE 46458
// sRemote := true ;
46450: LD_ADDR_EXP 58
46454: PUSH
46455: LD_INT 1
46457: ST_TO_ADDR
// if p3 = 21 then
46458: LD_VAR 0 3
46462: PUSH
46463: LD_INT 21
46465: EQUAL
46466: IFFALSE 46476
// sPowell := true ;
46468: LD_ADDR_EXP 59
46472: PUSH
46473: LD_INT 1
46475: ST_TO_ADDR
// if p3 = 22 then
46476: LD_VAR 0 3
46480: PUSH
46481: LD_INT 22
46483: EQUAL
46484: IFFALSE 46494
// sTeleport := true ;
46486: LD_ADDR_EXP 62
46490: PUSH
46491: LD_INT 1
46493: ST_TO_ADDR
// if p3 = 23 then
46494: LD_VAR 0 3
46498: PUSH
46499: LD_INT 23
46501: EQUAL
46502: IFFALSE 46512
// sOilTower := true ;
46504: LD_ADDR_EXP 64
46508: PUSH
46509: LD_INT 1
46511: ST_TO_ADDR
// if p3 = 24 then
46512: LD_VAR 0 3
46516: PUSH
46517: LD_INT 24
46519: EQUAL
46520: IFFALSE 46530
// sShovel := true ;
46522: LD_ADDR_EXP 65
46526: PUSH
46527: LD_INT 1
46529: ST_TO_ADDR
// if p3 = 25 then
46530: LD_VAR 0 3
46534: PUSH
46535: LD_INT 25
46537: EQUAL
46538: IFFALSE 46548
// sSheik := true ;
46540: LD_ADDR_EXP 66
46544: PUSH
46545: LD_INT 1
46547: ST_TO_ADDR
// if p3 = 26 then
46548: LD_VAR 0 3
46552: PUSH
46553: LD_INT 26
46555: EQUAL
46556: IFFALSE 46566
// sEarthquake := true ;
46558: LD_ADDR_EXP 68
46562: PUSH
46563: LD_INT 1
46565: ST_TO_ADDR
// if p3 = 27 then
46566: LD_VAR 0 3
46570: PUSH
46571: LD_INT 27
46573: EQUAL
46574: IFFALSE 46584
// sAI := true ;
46576: LD_ADDR_EXP 69
46580: PUSH
46581: LD_INT 1
46583: ST_TO_ADDR
// if p3 = 28 then
46584: LD_VAR 0 3
46588: PUSH
46589: LD_INT 28
46591: EQUAL
46592: IFFALSE 46602
// sCargo := true ;
46594: LD_ADDR_EXP 72
46598: PUSH
46599: LD_INT 1
46601: ST_TO_ADDR
// if p3 = 29 then
46602: LD_VAR 0 3
46606: PUSH
46607: LD_INT 29
46609: EQUAL
46610: IFFALSE 46620
// sDLaser := true ;
46612: LD_ADDR_EXP 73
46616: PUSH
46617: LD_INT 1
46619: ST_TO_ADDR
// if p3 = 30 then
46620: LD_VAR 0 3
46624: PUSH
46625: LD_INT 30
46627: EQUAL
46628: IFFALSE 46638
// sExchange := true ;
46630: LD_ADDR_EXP 74
46634: PUSH
46635: LD_INT 1
46637: ST_TO_ADDR
// if p3 = 31 then
46638: LD_VAR 0 3
46642: PUSH
46643: LD_INT 31
46645: EQUAL
46646: IFFALSE 46656
// sFac := true ;
46648: LD_ADDR_EXP 75
46652: PUSH
46653: LD_INT 1
46655: ST_TO_ADDR
// if p3 = 32 then
46656: LD_VAR 0 3
46660: PUSH
46661: LD_INT 32
46663: EQUAL
46664: IFFALSE 46674
// sPower := true ;
46666: LD_ADDR_EXP 76
46670: PUSH
46671: LD_INT 1
46673: ST_TO_ADDR
// if p3 = 33 then
46674: LD_VAR 0 3
46678: PUSH
46679: LD_INT 33
46681: EQUAL
46682: IFFALSE 46692
// sRandom := true ;
46684: LD_ADDR_EXP 77
46688: PUSH
46689: LD_INT 1
46691: ST_TO_ADDR
// if p3 = 34 then
46692: LD_VAR 0 3
46696: PUSH
46697: LD_INT 34
46699: EQUAL
46700: IFFALSE 46710
// sShield := true ;
46702: LD_ADDR_EXP 78
46706: PUSH
46707: LD_INT 1
46709: ST_TO_ADDR
// if p3 = 35 then
46710: LD_VAR 0 3
46714: PUSH
46715: LD_INT 35
46717: EQUAL
46718: IFFALSE 46728
// sTime := true ;
46720: LD_ADDR_EXP 79
46724: PUSH
46725: LD_INT 1
46727: ST_TO_ADDR
// if p3 = 36 then
46728: LD_VAR 0 3
46732: PUSH
46733: LD_INT 36
46735: EQUAL
46736: IFFALSE 46746
// sTools := true ;
46738: LD_ADDR_EXP 80
46742: PUSH
46743: LD_INT 1
46745: ST_TO_ADDR
// if p3 = 101 then
46746: LD_VAR 0 3
46750: PUSH
46751: LD_INT 101
46753: EQUAL
46754: IFFALSE 46764
// sSold := true ;
46756: LD_ADDR_EXP 45
46760: PUSH
46761: LD_INT 1
46763: ST_TO_ADDR
// if p3 = 102 then
46764: LD_VAR 0 3
46768: PUSH
46769: LD_INT 102
46771: EQUAL
46772: IFFALSE 46782
// sDiff := true ;
46774: LD_ADDR_EXP 46
46778: PUSH
46779: LD_INT 1
46781: ST_TO_ADDR
// if p3 = 103 then
46782: LD_VAR 0 3
46786: PUSH
46787: LD_INT 103
46789: EQUAL
46790: IFFALSE 46800
// sFog := true ;
46792: LD_ADDR_EXP 49
46796: PUSH
46797: LD_INT 1
46799: ST_TO_ADDR
// if p3 = 104 then
46800: LD_VAR 0 3
46804: PUSH
46805: LD_INT 104
46807: EQUAL
46808: IFFALSE 46818
// sReset := true ;
46810: LD_ADDR_EXP 50
46814: PUSH
46815: LD_INT 1
46817: ST_TO_ADDR
// if p3 = 105 then
46818: LD_VAR 0 3
46822: PUSH
46823: LD_INT 105
46825: EQUAL
46826: IFFALSE 46836
// sSun := true ;
46828: LD_ADDR_EXP 51
46832: PUSH
46833: LD_INT 1
46835: ST_TO_ADDR
// if p3 = 106 then
46836: LD_VAR 0 3
46840: PUSH
46841: LD_INT 106
46843: EQUAL
46844: IFFALSE 46854
// sTiger := true ;
46846: LD_ADDR_EXP 47
46850: PUSH
46851: LD_INT 1
46853: ST_TO_ADDR
// if p3 = 107 then
46854: LD_VAR 0 3
46858: PUSH
46859: LD_INT 107
46861: EQUAL
46862: IFFALSE 46872
// sBomb := true ;
46864: LD_ADDR_EXP 48
46868: PUSH
46869: LD_INT 1
46871: ST_TO_ADDR
// if p3 = 108 then
46872: LD_VAR 0 3
46876: PUSH
46877: LD_INT 108
46879: EQUAL
46880: IFFALSE 46890
// sWound := true ;
46882: LD_ADDR_EXP 56
46886: PUSH
46887: LD_INT 1
46889: ST_TO_ADDR
// if p3 = 109 then
46890: LD_VAR 0 3
46894: PUSH
46895: LD_INT 109
46897: EQUAL
46898: IFFALSE 46908
// sBetray := true ;
46900: LD_ADDR_EXP 60
46904: PUSH
46905: LD_INT 1
46907: ST_TO_ADDR
// if p3 = 110 then
46908: LD_VAR 0 3
46912: PUSH
46913: LD_INT 110
46915: EQUAL
46916: IFFALSE 46926
// sContamin := true ;
46918: LD_ADDR_EXP 61
46922: PUSH
46923: LD_INT 1
46925: ST_TO_ADDR
// if p3 = 111 then
46926: LD_VAR 0 3
46930: PUSH
46931: LD_INT 111
46933: EQUAL
46934: IFFALSE 46944
// sOil := true ;
46936: LD_ADDR_EXP 63
46940: PUSH
46941: LD_INT 1
46943: ST_TO_ADDR
// if p3 = 112 then
46944: LD_VAR 0 3
46948: PUSH
46949: LD_INT 112
46951: EQUAL
46952: IFFALSE 46962
// sStu := true ;
46954: LD_ADDR_EXP 67
46958: PUSH
46959: LD_INT 1
46961: ST_TO_ADDR
// if p3 = 113 then
46962: LD_VAR 0 3
46966: PUSH
46967: LD_INT 113
46969: EQUAL
46970: IFFALSE 46980
// sBazooka := true ;
46972: LD_ADDR_EXP 70
46976: PUSH
46977: LD_INT 1
46979: ST_TO_ADDR
// if p3 = 114 then
46980: LD_VAR 0 3
46984: PUSH
46985: LD_INT 114
46987: EQUAL
46988: IFFALSE 46998
// sMortar := true ;
46990: LD_ADDR_EXP 71
46994: PUSH
46995: LD_INT 1
46997: ST_TO_ADDR
// if p3 = 115 then
46998: LD_VAR 0 3
47002: PUSH
47003: LD_INT 115
47005: EQUAL
47006: IFFALSE 47016
// sRanger := true ;
47008: LD_ADDR_EXP 81
47012: PUSH
47013: LD_INT 1
47015: ST_TO_ADDR
// end ; if p2 = 101 then
47016: LD_VAR 0 2
47020: PUSH
47021: LD_INT 101
47023: EQUAL
47024: IFFALSE 47152
// begin case p3 of 1 :
47026: LD_VAR 0 3
47030: PUSH
47031: LD_INT 1
47033: DOUBLE
47034: EQUAL
47035: IFTRUE 47039
47037: GO 47046
47039: POP
// hHackUnlimitedResources ; 2 :
47040: CALL 58187 0 0
47044: GO 47152
47046: LD_INT 2
47048: DOUBLE
47049: EQUAL
47050: IFTRUE 47054
47052: GO 47061
47054: POP
// hHackSetLevel10 ; 3 :
47055: CALL 58320 0 0
47059: GO 47152
47061: LD_INT 3
47063: DOUBLE
47064: EQUAL
47065: IFTRUE 47069
47067: GO 47076
47069: POP
// hHackSetLevel10YourUnits ; 4 :
47070: CALL 58405 0 0
47074: GO 47152
47076: LD_INT 4
47078: DOUBLE
47079: EQUAL
47080: IFTRUE 47084
47082: GO 47091
47084: POP
// hHackInvincible ; 5 :
47085: CALL 58853 0 0
47089: GO 47152
47091: LD_INT 5
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47106
47099: POP
// hHackInvisible ; 6 :
47100: CALL 58964 0 0
47104: GO 47152
47106: LD_INT 6
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47114
47112: GO 47121
47114: POP
// hHackChangeYourSide ; 7 :
47115: CALL 59021 0 0
47119: GO 47152
47121: LD_INT 7
47123: DOUBLE
47124: EQUAL
47125: IFTRUE 47129
47127: GO 47136
47129: POP
// hHackChangeUnitSide ; 8 :
47130: CALL 59063 0 0
47134: GO 47152
47136: LD_INT 8
47138: DOUBLE
47139: EQUAL
47140: IFTRUE 47144
47142: GO 47151
47144: POP
// hHackFog ; end ;
47145: CALL 59164 0 0
47149: GO 47152
47151: POP
// end ; end ;
47152: PPOPN 6
47154: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
47155: GO 47157
47157: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47158: LD_STRING initStreamRollete();
47160: PPUSH
47161: CALL_OW 559
// InitStreamMode ;
47165: CALL 47174 0 0
// DefineStreamItems ( ) ;
47169: CALL 47614 0 0
// end ;
47173: END
// function InitStreamMode ; begin
47174: LD_INT 0
47176: PPUSH
// streamModeActive := false ;
47177: LD_ADDR_EXP 28
47181: PUSH
47182: LD_INT 0
47184: ST_TO_ADDR
// normalCounter := 36 ;
47185: LD_ADDR_EXP 29
47189: PUSH
47190: LD_INT 36
47192: ST_TO_ADDR
// hardcoreCounter := 16 ;
47193: LD_ADDR_EXP 30
47197: PUSH
47198: LD_INT 16
47200: ST_TO_ADDR
// sRocket := false ;
47201: LD_ADDR_EXP 33
47205: PUSH
47206: LD_INT 0
47208: ST_TO_ADDR
// sSpeed := false ;
47209: LD_ADDR_EXP 32
47213: PUSH
47214: LD_INT 0
47216: ST_TO_ADDR
// sEngine := false ;
47217: LD_ADDR_EXP 34
47221: PUSH
47222: LD_INT 0
47224: ST_TO_ADDR
// sSpec := false ;
47225: LD_ADDR_EXP 31
47229: PUSH
47230: LD_INT 0
47232: ST_TO_ADDR
// sLevel := false ;
47233: LD_ADDR_EXP 35
47237: PUSH
47238: LD_INT 0
47240: ST_TO_ADDR
// sArmoury := false ;
47241: LD_ADDR_EXP 36
47245: PUSH
47246: LD_INT 0
47248: ST_TO_ADDR
// sRadar := false ;
47249: LD_ADDR_EXP 37
47253: PUSH
47254: LD_INT 0
47256: ST_TO_ADDR
// sBunker := false ;
47257: LD_ADDR_EXP 38
47261: PUSH
47262: LD_INT 0
47264: ST_TO_ADDR
// sHack := false ;
47265: LD_ADDR_EXP 39
47269: PUSH
47270: LD_INT 0
47272: ST_TO_ADDR
// sFire := false ;
47273: LD_ADDR_EXP 40
47277: PUSH
47278: LD_INT 0
47280: ST_TO_ADDR
// sRefresh := false ;
47281: LD_ADDR_EXP 41
47285: PUSH
47286: LD_INT 0
47288: ST_TO_ADDR
// sExp := false ;
47289: LD_ADDR_EXP 42
47293: PUSH
47294: LD_INT 0
47296: ST_TO_ADDR
// sDepot := false ;
47297: LD_ADDR_EXP 43
47301: PUSH
47302: LD_INT 0
47304: ST_TO_ADDR
// sFlag := false ;
47305: LD_ADDR_EXP 44
47309: PUSH
47310: LD_INT 0
47312: ST_TO_ADDR
// sKamikadze := false ;
47313: LD_ADDR_EXP 52
47317: PUSH
47318: LD_INT 0
47320: ST_TO_ADDR
// sTroll := false ;
47321: LD_ADDR_EXP 53
47325: PUSH
47326: LD_INT 0
47328: ST_TO_ADDR
// sSlow := false ;
47329: LD_ADDR_EXP 54
47333: PUSH
47334: LD_INT 0
47336: ST_TO_ADDR
// sLack := false ;
47337: LD_ADDR_EXP 55
47341: PUSH
47342: LD_INT 0
47344: ST_TO_ADDR
// sTank := false ;
47345: LD_ADDR_EXP 57
47349: PUSH
47350: LD_INT 0
47352: ST_TO_ADDR
// sRemote := false ;
47353: LD_ADDR_EXP 58
47357: PUSH
47358: LD_INT 0
47360: ST_TO_ADDR
// sPowell := false ;
47361: LD_ADDR_EXP 59
47365: PUSH
47366: LD_INT 0
47368: ST_TO_ADDR
// sTeleport := false ;
47369: LD_ADDR_EXP 62
47373: PUSH
47374: LD_INT 0
47376: ST_TO_ADDR
// sOilTower := false ;
47377: LD_ADDR_EXP 64
47381: PUSH
47382: LD_INT 0
47384: ST_TO_ADDR
// sShovel := false ;
47385: LD_ADDR_EXP 65
47389: PUSH
47390: LD_INT 0
47392: ST_TO_ADDR
// sSheik := false ;
47393: LD_ADDR_EXP 66
47397: PUSH
47398: LD_INT 0
47400: ST_TO_ADDR
// sEarthquake := false ;
47401: LD_ADDR_EXP 68
47405: PUSH
47406: LD_INT 0
47408: ST_TO_ADDR
// sAI := false ;
47409: LD_ADDR_EXP 69
47413: PUSH
47414: LD_INT 0
47416: ST_TO_ADDR
// sCargo := false ;
47417: LD_ADDR_EXP 72
47421: PUSH
47422: LD_INT 0
47424: ST_TO_ADDR
// sDLaser := false ;
47425: LD_ADDR_EXP 73
47429: PUSH
47430: LD_INT 0
47432: ST_TO_ADDR
// sExchange := false ;
47433: LD_ADDR_EXP 74
47437: PUSH
47438: LD_INT 0
47440: ST_TO_ADDR
// sFac := false ;
47441: LD_ADDR_EXP 75
47445: PUSH
47446: LD_INT 0
47448: ST_TO_ADDR
// sPower := false ;
47449: LD_ADDR_EXP 76
47453: PUSH
47454: LD_INT 0
47456: ST_TO_ADDR
// sRandom := false ;
47457: LD_ADDR_EXP 77
47461: PUSH
47462: LD_INT 0
47464: ST_TO_ADDR
// sShield := false ;
47465: LD_ADDR_EXP 78
47469: PUSH
47470: LD_INT 0
47472: ST_TO_ADDR
// sTime := false ;
47473: LD_ADDR_EXP 79
47477: PUSH
47478: LD_INT 0
47480: ST_TO_ADDR
// sTools := false ;
47481: LD_ADDR_EXP 80
47485: PUSH
47486: LD_INT 0
47488: ST_TO_ADDR
// sSold := false ;
47489: LD_ADDR_EXP 45
47493: PUSH
47494: LD_INT 0
47496: ST_TO_ADDR
// sDiff := false ;
47497: LD_ADDR_EXP 46
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// sFog := false ;
47505: LD_ADDR_EXP 49
47509: PUSH
47510: LD_INT 0
47512: ST_TO_ADDR
// sReset := false ;
47513: LD_ADDR_EXP 50
47517: PUSH
47518: LD_INT 0
47520: ST_TO_ADDR
// sSun := false ;
47521: LD_ADDR_EXP 51
47525: PUSH
47526: LD_INT 0
47528: ST_TO_ADDR
// sTiger := false ;
47529: LD_ADDR_EXP 47
47533: PUSH
47534: LD_INT 0
47536: ST_TO_ADDR
// sBomb := false ;
47537: LD_ADDR_EXP 48
47541: PUSH
47542: LD_INT 0
47544: ST_TO_ADDR
// sWound := false ;
47545: LD_ADDR_EXP 56
47549: PUSH
47550: LD_INT 0
47552: ST_TO_ADDR
// sBetray := false ;
47553: LD_ADDR_EXP 60
47557: PUSH
47558: LD_INT 0
47560: ST_TO_ADDR
// sContamin := false ;
47561: LD_ADDR_EXP 61
47565: PUSH
47566: LD_INT 0
47568: ST_TO_ADDR
// sOil := false ;
47569: LD_ADDR_EXP 63
47573: PUSH
47574: LD_INT 0
47576: ST_TO_ADDR
// sStu := false ;
47577: LD_ADDR_EXP 67
47581: PUSH
47582: LD_INT 0
47584: ST_TO_ADDR
// sBazooka := false ;
47585: LD_ADDR_EXP 70
47589: PUSH
47590: LD_INT 0
47592: ST_TO_ADDR
// sMortar := false ;
47593: LD_ADDR_EXP 71
47597: PUSH
47598: LD_INT 0
47600: ST_TO_ADDR
// sRanger := false ;
47601: LD_ADDR_EXP 81
47605: PUSH
47606: LD_INT 0
47608: ST_TO_ADDR
// end ;
47609: LD_VAR 0 1
47613: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
47614: LD_INT 0
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
// result := [ ] ;
47621: LD_ADDR_VAR 0 1
47625: PUSH
47626: EMPTY
47627: ST_TO_ADDR
// if campaign_id = 1 then
47628: LD_OWVAR 69
47632: PUSH
47633: LD_INT 1
47635: EQUAL
47636: IFFALSE 50574
// begin case mission_number of 1 :
47638: LD_OWVAR 70
47642: PUSH
47643: LD_INT 1
47645: DOUBLE
47646: EQUAL
47647: IFTRUE 47651
47649: GO 47715
47651: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
47652: LD_ADDR_VAR 0 1
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: LD_INT 4
47662: PUSH
47663: LD_INT 11
47665: PUSH
47666: LD_INT 12
47668: PUSH
47669: LD_INT 15
47671: PUSH
47672: LD_INT 16
47674: PUSH
47675: LD_INT 22
47677: PUSH
47678: LD_INT 23
47680: PUSH
47681: LD_INT 26
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 101
47697: PUSH
47698: LD_INT 102
47700: PUSH
47701: LD_INT 106
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: ST_TO_ADDR
47713: GO 50572
47715: LD_INT 2
47717: DOUBLE
47718: EQUAL
47719: IFTRUE 47723
47721: GO 47795
47723: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
47724: LD_ADDR_VAR 0 1
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 4
47734: PUSH
47735: LD_INT 11
47737: PUSH
47738: LD_INT 12
47740: PUSH
47741: LD_INT 15
47743: PUSH
47744: LD_INT 16
47746: PUSH
47747: LD_INT 22
47749: PUSH
47750: LD_INT 23
47752: PUSH
47753: LD_INT 26
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 101
47769: PUSH
47770: LD_INT 102
47772: PUSH
47773: LD_INT 105
47775: PUSH
47776: LD_INT 106
47778: PUSH
47779: LD_INT 108
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: ST_TO_ADDR
47793: GO 50572
47795: LD_INT 3
47797: DOUBLE
47798: EQUAL
47799: IFTRUE 47803
47801: GO 47879
47803: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
47804: LD_ADDR_VAR 0 1
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: LD_INT 5
47817: PUSH
47818: LD_INT 11
47820: PUSH
47821: LD_INT 12
47823: PUSH
47824: LD_INT 15
47826: PUSH
47827: LD_INT 16
47829: PUSH
47830: LD_INT 22
47832: PUSH
47833: LD_INT 26
47835: PUSH
47836: LD_INT 36
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 101
47853: PUSH
47854: LD_INT 102
47856: PUSH
47857: LD_INT 105
47859: PUSH
47860: LD_INT 106
47862: PUSH
47863: LD_INT 108
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: ST_TO_ADDR
47877: GO 50572
47879: LD_INT 4
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47887
47885: GO 47971
47887: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
47888: LD_ADDR_VAR 0 1
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 4
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: LD_INT 8
47904: PUSH
47905: LD_INT 11
47907: PUSH
47908: LD_INT 12
47910: PUSH
47911: LD_INT 15
47913: PUSH
47914: LD_INT 16
47916: PUSH
47917: LD_INT 22
47919: PUSH
47920: LD_INT 23
47922: PUSH
47923: LD_INT 26
47925: PUSH
47926: LD_INT 36
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 101
47945: PUSH
47946: LD_INT 102
47948: PUSH
47949: LD_INT 105
47951: PUSH
47952: LD_INT 106
47954: PUSH
47955: LD_INT 108
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: ST_TO_ADDR
47969: GO 50572
47971: LD_INT 5
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47979
47977: GO 48079
47979: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
47980: LD_ADDR_VAR 0 1
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: LD_INT 5
47993: PUSH
47994: LD_INT 6
47996: PUSH
47997: LD_INT 8
47999: PUSH
48000: LD_INT 11
48002: PUSH
48003: LD_INT 12
48005: PUSH
48006: LD_INT 15
48008: PUSH
48009: LD_INT 16
48011: PUSH
48012: LD_INT 22
48014: PUSH
48015: LD_INT 23
48017: PUSH
48018: LD_INT 25
48020: PUSH
48021: LD_INT 26
48023: PUSH
48024: LD_INT 36
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 101
48045: PUSH
48046: LD_INT 102
48048: PUSH
48049: LD_INT 105
48051: PUSH
48052: LD_INT 106
48054: PUSH
48055: LD_INT 108
48057: PUSH
48058: LD_INT 109
48060: PUSH
48061: LD_INT 112
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: ST_TO_ADDR
48077: GO 50572
48079: LD_INT 6
48081: DOUBLE
48082: EQUAL
48083: IFTRUE 48087
48085: GO 48207
48087: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
48088: LD_ADDR_VAR 0 1
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 4
48098: PUSH
48099: LD_INT 5
48101: PUSH
48102: LD_INT 6
48104: PUSH
48105: LD_INT 8
48107: PUSH
48108: LD_INT 11
48110: PUSH
48111: LD_INT 12
48113: PUSH
48114: LD_INT 15
48116: PUSH
48117: LD_INT 16
48119: PUSH
48120: LD_INT 20
48122: PUSH
48123: LD_INT 21
48125: PUSH
48126: LD_INT 22
48128: PUSH
48129: LD_INT 23
48131: PUSH
48132: LD_INT 25
48134: PUSH
48135: LD_INT 26
48137: PUSH
48138: LD_INT 30
48140: PUSH
48141: LD_INT 31
48143: PUSH
48144: LD_INT 32
48146: PUSH
48147: LD_INT 36
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 101
48173: PUSH
48174: LD_INT 102
48176: PUSH
48177: LD_INT 105
48179: PUSH
48180: LD_INT 106
48182: PUSH
48183: LD_INT 108
48185: PUSH
48186: LD_INT 109
48188: PUSH
48189: LD_INT 112
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: ST_TO_ADDR
48205: GO 50572
48207: LD_INT 7
48209: DOUBLE
48210: EQUAL
48211: IFTRUE 48215
48213: GO 48315
48215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
48216: LD_ADDR_VAR 0 1
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 4
48226: PUSH
48227: LD_INT 5
48229: PUSH
48230: LD_INT 7
48232: PUSH
48233: LD_INT 11
48235: PUSH
48236: LD_INT 12
48238: PUSH
48239: LD_INT 15
48241: PUSH
48242: LD_INT 16
48244: PUSH
48245: LD_INT 20
48247: PUSH
48248: LD_INT 21
48250: PUSH
48251: LD_INT 22
48253: PUSH
48254: LD_INT 23
48256: PUSH
48257: LD_INT 25
48259: PUSH
48260: LD_INT 26
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 101
48281: PUSH
48282: LD_INT 102
48284: PUSH
48285: LD_INT 103
48287: PUSH
48288: LD_INT 105
48290: PUSH
48291: LD_INT 106
48293: PUSH
48294: LD_INT 108
48296: PUSH
48297: LD_INT 112
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: ST_TO_ADDR
48313: GO 50572
48315: LD_INT 8
48317: DOUBLE
48318: EQUAL
48319: IFTRUE 48323
48321: GO 48451
48323: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
48324: LD_ADDR_VAR 0 1
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 4
48334: PUSH
48335: LD_INT 5
48337: PUSH
48338: LD_INT 6
48340: PUSH
48341: LD_INT 7
48343: PUSH
48344: LD_INT 8
48346: PUSH
48347: LD_INT 11
48349: PUSH
48350: LD_INT 12
48352: PUSH
48353: LD_INT 15
48355: PUSH
48356: LD_INT 16
48358: PUSH
48359: LD_INT 20
48361: PUSH
48362: LD_INT 21
48364: PUSH
48365: LD_INT 22
48367: PUSH
48368: LD_INT 23
48370: PUSH
48371: LD_INT 25
48373: PUSH
48374: LD_INT 26
48376: PUSH
48377: LD_INT 30
48379: PUSH
48380: LD_INT 31
48382: PUSH
48383: LD_INT 32
48385: PUSH
48386: LD_INT 36
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 101
48413: PUSH
48414: LD_INT 102
48416: PUSH
48417: LD_INT 103
48419: PUSH
48420: LD_INT 105
48422: PUSH
48423: LD_INT 106
48425: PUSH
48426: LD_INT 108
48428: PUSH
48429: LD_INT 109
48431: PUSH
48432: LD_INT 112
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: ST_TO_ADDR
48449: GO 50572
48451: LD_INT 9
48453: DOUBLE
48454: EQUAL
48455: IFTRUE 48459
48457: GO 48595
48459: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
48460: LD_ADDR_VAR 0 1
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: LD_INT 5
48473: PUSH
48474: LD_INT 6
48476: PUSH
48477: LD_INT 7
48479: PUSH
48480: LD_INT 8
48482: PUSH
48483: LD_INT 11
48485: PUSH
48486: LD_INT 12
48488: PUSH
48489: LD_INT 15
48491: PUSH
48492: LD_INT 16
48494: PUSH
48495: LD_INT 20
48497: PUSH
48498: LD_INT 21
48500: PUSH
48501: LD_INT 22
48503: PUSH
48504: LD_INT 23
48506: PUSH
48507: LD_INT 25
48509: PUSH
48510: LD_INT 26
48512: PUSH
48513: LD_INT 28
48515: PUSH
48516: LD_INT 30
48518: PUSH
48519: LD_INT 31
48521: PUSH
48522: LD_INT 32
48524: PUSH
48525: LD_INT 36
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 101
48553: PUSH
48554: LD_INT 102
48556: PUSH
48557: LD_INT 103
48559: PUSH
48560: LD_INT 105
48562: PUSH
48563: LD_INT 106
48565: PUSH
48566: LD_INT 108
48568: PUSH
48569: LD_INT 109
48571: PUSH
48572: LD_INT 112
48574: PUSH
48575: LD_INT 114
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: ST_TO_ADDR
48593: GO 50572
48595: LD_INT 10
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48603
48601: GO 48787
48603: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
48604: LD_ADDR_VAR 0 1
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: LD_INT 4
48614: PUSH
48615: LD_INT 5
48617: PUSH
48618: LD_INT 6
48620: PUSH
48621: LD_INT 7
48623: PUSH
48624: LD_INT 8
48626: PUSH
48627: LD_INT 9
48629: PUSH
48630: LD_INT 10
48632: PUSH
48633: LD_INT 11
48635: PUSH
48636: LD_INT 12
48638: PUSH
48639: LD_INT 13
48641: PUSH
48642: LD_INT 14
48644: PUSH
48645: LD_INT 15
48647: PUSH
48648: LD_INT 16
48650: PUSH
48651: LD_INT 17
48653: PUSH
48654: LD_INT 18
48656: PUSH
48657: LD_INT 19
48659: PUSH
48660: LD_INT 20
48662: PUSH
48663: LD_INT 21
48665: PUSH
48666: LD_INT 22
48668: PUSH
48669: LD_INT 23
48671: PUSH
48672: LD_INT 24
48674: PUSH
48675: LD_INT 25
48677: PUSH
48678: LD_INT 26
48680: PUSH
48681: LD_INT 28
48683: PUSH
48684: LD_INT 30
48686: PUSH
48687: LD_INT 31
48689: PUSH
48690: LD_INT 32
48692: PUSH
48693: LD_INT 36
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 101
48729: PUSH
48730: LD_INT 102
48732: PUSH
48733: LD_INT 103
48735: PUSH
48736: LD_INT 104
48738: PUSH
48739: LD_INT 105
48741: PUSH
48742: LD_INT 106
48744: PUSH
48745: LD_INT 107
48747: PUSH
48748: LD_INT 108
48750: PUSH
48751: LD_INT 109
48753: PUSH
48754: LD_INT 110
48756: PUSH
48757: LD_INT 111
48759: PUSH
48760: LD_INT 112
48762: PUSH
48763: LD_INT 114
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: ST_TO_ADDR
48785: GO 50572
48787: LD_INT 11
48789: DOUBLE
48790: EQUAL
48791: IFTRUE 48795
48793: GO 48987
48795: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
48796: LD_ADDR_VAR 0 1
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: LD_INT 4
48809: PUSH
48810: LD_INT 5
48812: PUSH
48813: LD_INT 6
48815: PUSH
48816: LD_INT 7
48818: PUSH
48819: LD_INT 8
48821: PUSH
48822: LD_INT 9
48824: PUSH
48825: LD_INT 10
48827: PUSH
48828: LD_INT 11
48830: PUSH
48831: LD_INT 12
48833: PUSH
48834: LD_INT 13
48836: PUSH
48837: LD_INT 14
48839: PUSH
48840: LD_INT 15
48842: PUSH
48843: LD_INT 16
48845: PUSH
48846: LD_INT 17
48848: PUSH
48849: LD_INT 18
48851: PUSH
48852: LD_INT 19
48854: PUSH
48855: LD_INT 20
48857: PUSH
48858: LD_INT 21
48860: PUSH
48861: LD_INT 22
48863: PUSH
48864: LD_INT 23
48866: PUSH
48867: LD_INT 24
48869: PUSH
48870: LD_INT 25
48872: PUSH
48873: LD_INT 26
48875: PUSH
48876: LD_INT 28
48878: PUSH
48879: LD_INT 30
48881: PUSH
48882: LD_INT 31
48884: PUSH
48885: LD_INT 32
48887: PUSH
48888: LD_INT 34
48890: PUSH
48891: LD_INT 36
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 101
48929: PUSH
48930: LD_INT 102
48932: PUSH
48933: LD_INT 103
48935: PUSH
48936: LD_INT 104
48938: PUSH
48939: LD_INT 105
48941: PUSH
48942: LD_INT 106
48944: PUSH
48945: LD_INT 107
48947: PUSH
48948: LD_INT 108
48950: PUSH
48951: LD_INT 109
48953: PUSH
48954: LD_INT 110
48956: PUSH
48957: LD_INT 111
48959: PUSH
48960: LD_INT 112
48962: PUSH
48963: LD_INT 114
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: ST_TO_ADDR
48985: GO 50572
48987: LD_INT 12
48989: DOUBLE
48990: EQUAL
48991: IFTRUE 48995
48993: GO 49203
48995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
48996: LD_ADDR_VAR 0 1
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: LD_INT 3
49009: PUSH
49010: LD_INT 4
49012: PUSH
49013: LD_INT 5
49015: PUSH
49016: LD_INT 6
49018: PUSH
49019: LD_INT 7
49021: PUSH
49022: LD_INT 8
49024: PUSH
49025: LD_INT 9
49027: PUSH
49028: LD_INT 10
49030: PUSH
49031: LD_INT 11
49033: PUSH
49034: LD_INT 12
49036: PUSH
49037: LD_INT 13
49039: PUSH
49040: LD_INT 14
49042: PUSH
49043: LD_INT 15
49045: PUSH
49046: LD_INT 16
49048: PUSH
49049: LD_INT 17
49051: PUSH
49052: LD_INT 18
49054: PUSH
49055: LD_INT 19
49057: PUSH
49058: LD_INT 20
49060: PUSH
49061: LD_INT 21
49063: PUSH
49064: LD_INT 22
49066: PUSH
49067: LD_INT 23
49069: PUSH
49070: LD_INT 24
49072: PUSH
49073: LD_INT 25
49075: PUSH
49076: LD_INT 26
49078: PUSH
49079: LD_INT 27
49081: PUSH
49082: LD_INT 28
49084: PUSH
49085: LD_INT 30
49087: PUSH
49088: LD_INT 31
49090: PUSH
49091: LD_INT 32
49093: PUSH
49094: LD_INT 33
49096: PUSH
49097: LD_INT 34
49099: PUSH
49100: LD_INT 36
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 101
49141: PUSH
49142: LD_INT 102
49144: PUSH
49145: LD_INT 103
49147: PUSH
49148: LD_INT 104
49150: PUSH
49151: LD_INT 105
49153: PUSH
49154: LD_INT 106
49156: PUSH
49157: LD_INT 107
49159: PUSH
49160: LD_INT 108
49162: PUSH
49163: LD_INT 109
49165: PUSH
49166: LD_INT 110
49168: PUSH
49169: LD_INT 111
49171: PUSH
49172: LD_INT 112
49174: PUSH
49175: LD_INT 113
49177: PUSH
49178: LD_INT 114
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: ST_TO_ADDR
49201: GO 50572
49203: LD_INT 13
49205: DOUBLE
49206: EQUAL
49207: IFTRUE 49211
49209: GO 49407
49211: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
49212: LD_ADDR_VAR 0 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 3
49225: PUSH
49226: LD_INT 4
49228: PUSH
49229: LD_INT 5
49231: PUSH
49232: LD_INT 8
49234: PUSH
49235: LD_INT 9
49237: PUSH
49238: LD_INT 10
49240: PUSH
49241: LD_INT 11
49243: PUSH
49244: LD_INT 12
49246: PUSH
49247: LD_INT 14
49249: PUSH
49250: LD_INT 15
49252: PUSH
49253: LD_INT 16
49255: PUSH
49256: LD_INT 17
49258: PUSH
49259: LD_INT 18
49261: PUSH
49262: LD_INT 19
49264: PUSH
49265: LD_INT 20
49267: PUSH
49268: LD_INT 21
49270: PUSH
49271: LD_INT 22
49273: PUSH
49274: LD_INT 23
49276: PUSH
49277: LD_INT 24
49279: PUSH
49280: LD_INT 25
49282: PUSH
49283: LD_INT 26
49285: PUSH
49286: LD_INT 27
49288: PUSH
49289: LD_INT 28
49291: PUSH
49292: LD_INT 30
49294: PUSH
49295: LD_INT 31
49297: PUSH
49298: LD_INT 32
49300: PUSH
49301: LD_INT 33
49303: PUSH
49304: LD_INT 34
49306: PUSH
49307: LD_INT 36
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 101
49345: PUSH
49346: LD_INT 102
49348: PUSH
49349: LD_INT 103
49351: PUSH
49352: LD_INT 104
49354: PUSH
49355: LD_INT 105
49357: PUSH
49358: LD_INT 106
49360: PUSH
49361: LD_INT 107
49363: PUSH
49364: LD_INT 108
49366: PUSH
49367: LD_INT 109
49369: PUSH
49370: LD_INT 110
49372: PUSH
49373: LD_INT 111
49375: PUSH
49376: LD_INT 112
49378: PUSH
49379: LD_INT 113
49381: PUSH
49382: LD_INT 114
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: ST_TO_ADDR
49405: GO 50572
49407: LD_INT 14
49409: DOUBLE
49410: EQUAL
49411: IFTRUE 49415
49413: GO 49627
49415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
49416: LD_ADDR_VAR 0 1
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 3
49429: PUSH
49430: LD_INT 4
49432: PUSH
49433: LD_INT 5
49435: PUSH
49436: LD_INT 6
49438: PUSH
49439: LD_INT 7
49441: PUSH
49442: LD_INT 8
49444: PUSH
49445: LD_INT 9
49447: PUSH
49448: LD_INT 10
49450: PUSH
49451: LD_INT 11
49453: PUSH
49454: LD_INT 12
49456: PUSH
49457: LD_INT 13
49459: PUSH
49460: LD_INT 14
49462: PUSH
49463: LD_INT 15
49465: PUSH
49466: LD_INT 16
49468: PUSH
49469: LD_INT 17
49471: PUSH
49472: LD_INT 18
49474: PUSH
49475: LD_INT 19
49477: PUSH
49478: LD_INT 20
49480: PUSH
49481: LD_INT 21
49483: PUSH
49484: LD_INT 22
49486: PUSH
49487: LD_INT 23
49489: PUSH
49490: LD_INT 24
49492: PUSH
49493: LD_INT 25
49495: PUSH
49496: LD_INT 26
49498: PUSH
49499: LD_INT 27
49501: PUSH
49502: LD_INT 28
49504: PUSH
49505: LD_INT 29
49507: PUSH
49508: LD_INT 30
49510: PUSH
49511: LD_INT 31
49513: PUSH
49514: LD_INT 32
49516: PUSH
49517: LD_INT 33
49519: PUSH
49520: LD_INT 34
49522: PUSH
49523: LD_INT 36
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 101
49565: PUSH
49566: LD_INT 102
49568: PUSH
49569: LD_INT 103
49571: PUSH
49572: LD_INT 104
49574: PUSH
49575: LD_INT 105
49577: PUSH
49578: LD_INT 106
49580: PUSH
49581: LD_INT 107
49583: PUSH
49584: LD_INT 108
49586: PUSH
49587: LD_INT 109
49589: PUSH
49590: LD_INT 110
49592: PUSH
49593: LD_INT 111
49595: PUSH
49596: LD_INT 112
49598: PUSH
49599: LD_INT 113
49601: PUSH
49602: LD_INT 114
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: ST_TO_ADDR
49625: GO 50572
49627: LD_INT 15
49629: DOUBLE
49630: EQUAL
49631: IFTRUE 49635
49633: GO 49847
49635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
49636: LD_ADDR_VAR 0 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 4
49652: PUSH
49653: LD_INT 5
49655: PUSH
49656: LD_INT 6
49658: PUSH
49659: LD_INT 7
49661: PUSH
49662: LD_INT 8
49664: PUSH
49665: LD_INT 9
49667: PUSH
49668: LD_INT 10
49670: PUSH
49671: LD_INT 11
49673: PUSH
49674: LD_INT 12
49676: PUSH
49677: LD_INT 13
49679: PUSH
49680: LD_INT 14
49682: PUSH
49683: LD_INT 15
49685: PUSH
49686: LD_INT 16
49688: PUSH
49689: LD_INT 17
49691: PUSH
49692: LD_INT 18
49694: PUSH
49695: LD_INT 19
49697: PUSH
49698: LD_INT 20
49700: PUSH
49701: LD_INT 21
49703: PUSH
49704: LD_INT 22
49706: PUSH
49707: LD_INT 23
49709: PUSH
49710: LD_INT 24
49712: PUSH
49713: LD_INT 25
49715: PUSH
49716: LD_INT 26
49718: PUSH
49719: LD_INT 27
49721: PUSH
49722: LD_INT 28
49724: PUSH
49725: LD_INT 29
49727: PUSH
49728: LD_INT 30
49730: PUSH
49731: LD_INT 31
49733: PUSH
49734: LD_INT 32
49736: PUSH
49737: LD_INT 33
49739: PUSH
49740: LD_INT 34
49742: PUSH
49743: LD_INT 36
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 101
49785: PUSH
49786: LD_INT 102
49788: PUSH
49789: LD_INT 103
49791: PUSH
49792: LD_INT 104
49794: PUSH
49795: LD_INT 105
49797: PUSH
49798: LD_INT 106
49800: PUSH
49801: LD_INT 107
49803: PUSH
49804: LD_INT 108
49806: PUSH
49807: LD_INT 109
49809: PUSH
49810: LD_INT 110
49812: PUSH
49813: LD_INT 111
49815: PUSH
49816: LD_INT 112
49818: PUSH
49819: LD_INT 113
49821: PUSH
49822: LD_INT 114
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: ST_TO_ADDR
49845: GO 50572
49847: LD_INT 16
49849: DOUBLE
49850: EQUAL
49851: IFTRUE 49855
49853: GO 49979
49855: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
49856: LD_ADDR_VAR 0 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 4
49866: PUSH
49867: LD_INT 5
49869: PUSH
49870: LD_INT 7
49872: PUSH
49873: LD_INT 11
49875: PUSH
49876: LD_INT 12
49878: PUSH
49879: LD_INT 15
49881: PUSH
49882: LD_INT 16
49884: PUSH
49885: LD_INT 20
49887: PUSH
49888: LD_INT 21
49890: PUSH
49891: LD_INT 22
49893: PUSH
49894: LD_INT 23
49896: PUSH
49897: LD_INT 25
49899: PUSH
49900: LD_INT 26
49902: PUSH
49903: LD_INT 30
49905: PUSH
49906: LD_INT 31
49908: PUSH
49909: LD_INT 32
49911: PUSH
49912: LD_INT 33
49914: PUSH
49915: LD_INT 34
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 101
49941: PUSH
49942: LD_INT 102
49944: PUSH
49945: LD_INT 103
49947: PUSH
49948: LD_INT 106
49950: PUSH
49951: LD_INT 108
49953: PUSH
49954: LD_INT 112
49956: PUSH
49957: LD_INT 113
49959: PUSH
49960: LD_INT 114
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: ST_TO_ADDR
49977: GO 50572
49979: LD_INT 17
49981: DOUBLE
49982: EQUAL
49983: IFTRUE 49987
49985: GO 50199
49987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
49988: LD_ADDR_VAR 0 1
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: LD_INT 5
50007: PUSH
50008: LD_INT 6
50010: PUSH
50011: LD_INT 7
50013: PUSH
50014: LD_INT 8
50016: PUSH
50017: LD_INT 9
50019: PUSH
50020: LD_INT 10
50022: PUSH
50023: LD_INT 11
50025: PUSH
50026: LD_INT 12
50028: PUSH
50029: LD_INT 13
50031: PUSH
50032: LD_INT 14
50034: PUSH
50035: LD_INT 15
50037: PUSH
50038: LD_INT 16
50040: PUSH
50041: LD_INT 17
50043: PUSH
50044: LD_INT 18
50046: PUSH
50047: LD_INT 19
50049: PUSH
50050: LD_INT 20
50052: PUSH
50053: LD_INT 21
50055: PUSH
50056: LD_INT 22
50058: PUSH
50059: LD_INT 23
50061: PUSH
50062: LD_INT 24
50064: PUSH
50065: LD_INT 25
50067: PUSH
50068: LD_INT 26
50070: PUSH
50071: LD_INT 27
50073: PUSH
50074: LD_INT 28
50076: PUSH
50077: LD_INT 29
50079: PUSH
50080: LD_INT 30
50082: PUSH
50083: LD_INT 31
50085: PUSH
50086: LD_INT 32
50088: PUSH
50089: LD_INT 33
50091: PUSH
50092: LD_INT 34
50094: PUSH
50095: LD_INT 36
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 101
50137: PUSH
50138: LD_INT 102
50140: PUSH
50141: LD_INT 103
50143: PUSH
50144: LD_INT 104
50146: PUSH
50147: LD_INT 105
50149: PUSH
50150: LD_INT 106
50152: PUSH
50153: LD_INT 107
50155: PUSH
50156: LD_INT 108
50158: PUSH
50159: LD_INT 109
50161: PUSH
50162: LD_INT 110
50164: PUSH
50165: LD_INT 111
50167: PUSH
50168: LD_INT 112
50170: PUSH
50171: LD_INT 113
50173: PUSH
50174: LD_INT 114
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: ST_TO_ADDR
50197: GO 50572
50199: LD_INT 18
50201: DOUBLE
50202: EQUAL
50203: IFTRUE 50207
50205: GO 50343
50207: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
50208: LD_ADDR_VAR 0 1
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 4
50218: PUSH
50219: LD_INT 5
50221: PUSH
50222: LD_INT 7
50224: PUSH
50225: LD_INT 11
50227: PUSH
50228: LD_INT 12
50230: PUSH
50231: LD_INT 15
50233: PUSH
50234: LD_INT 16
50236: PUSH
50237: LD_INT 20
50239: PUSH
50240: LD_INT 21
50242: PUSH
50243: LD_INT 22
50245: PUSH
50246: LD_INT 23
50248: PUSH
50249: LD_INT 25
50251: PUSH
50252: LD_INT 26
50254: PUSH
50255: LD_INT 30
50257: PUSH
50258: LD_INT 31
50260: PUSH
50261: LD_INT 32
50263: PUSH
50264: LD_INT 33
50266: PUSH
50267: LD_INT 34
50269: PUSH
50270: LD_INT 35
50272: PUSH
50273: LD_INT 36
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 101
50301: PUSH
50302: LD_INT 102
50304: PUSH
50305: LD_INT 103
50307: PUSH
50308: LD_INT 106
50310: PUSH
50311: LD_INT 108
50313: PUSH
50314: LD_INT 112
50316: PUSH
50317: LD_INT 113
50319: PUSH
50320: LD_INT 114
50322: PUSH
50323: LD_INT 115
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: ST_TO_ADDR
50341: GO 50572
50343: LD_INT 19
50345: DOUBLE
50346: EQUAL
50347: IFTRUE 50351
50349: GO 50571
50351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
50352: LD_ADDR_VAR 0 1
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: LD_INT 4
50368: PUSH
50369: LD_INT 5
50371: PUSH
50372: LD_INT 6
50374: PUSH
50375: LD_INT 7
50377: PUSH
50378: LD_INT 8
50380: PUSH
50381: LD_INT 9
50383: PUSH
50384: LD_INT 10
50386: PUSH
50387: LD_INT 11
50389: PUSH
50390: LD_INT 12
50392: PUSH
50393: LD_INT 13
50395: PUSH
50396: LD_INT 14
50398: PUSH
50399: LD_INT 15
50401: PUSH
50402: LD_INT 16
50404: PUSH
50405: LD_INT 17
50407: PUSH
50408: LD_INT 18
50410: PUSH
50411: LD_INT 19
50413: PUSH
50414: LD_INT 20
50416: PUSH
50417: LD_INT 21
50419: PUSH
50420: LD_INT 22
50422: PUSH
50423: LD_INT 23
50425: PUSH
50426: LD_INT 24
50428: PUSH
50429: LD_INT 25
50431: PUSH
50432: LD_INT 26
50434: PUSH
50435: LD_INT 27
50437: PUSH
50438: LD_INT 28
50440: PUSH
50441: LD_INT 29
50443: PUSH
50444: LD_INT 30
50446: PUSH
50447: LD_INT 31
50449: PUSH
50450: LD_INT 32
50452: PUSH
50453: LD_INT 33
50455: PUSH
50456: LD_INT 34
50458: PUSH
50459: LD_INT 35
50461: PUSH
50462: LD_INT 36
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 101
50505: PUSH
50506: LD_INT 102
50508: PUSH
50509: LD_INT 103
50511: PUSH
50512: LD_INT 104
50514: PUSH
50515: LD_INT 105
50517: PUSH
50518: LD_INT 106
50520: PUSH
50521: LD_INT 107
50523: PUSH
50524: LD_INT 108
50526: PUSH
50527: LD_INT 109
50529: PUSH
50530: LD_INT 110
50532: PUSH
50533: LD_INT 111
50535: PUSH
50536: LD_INT 112
50538: PUSH
50539: LD_INT 113
50541: PUSH
50542: LD_INT 114
50544: PUSH
50545: LD_INT 115
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: ST_TO_ADDR
50569: GO 50572
50571: POP
// end else
50572: GO 50791
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
50574: LD_ADDR_VAR 0 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 4
50590: PUSH
50591: LD_INT 5
50593: PUSH
50594: LD_INT 6
50596: PUSH
50597: LD_INT 7
50599: PUSH
50600: LD_INT 8
50602: PUSH
50603: LD_INT 9
50605: PUSH
50606: LD_INT 10
50608: PUSH
50609: LD_INT 11
50611: PUSH
50612: LD_INT 12
50614: PUSH
50615: LD_INT 13
50617: PUSH
50618: LD_INT 14
50620: PUSH
50621: LD_INT 15
50623: PUSH
50624: LD_INT 16
50626: PUSH
50627: LD_INT 17
50629: PUSH
50630: LD_INT 18
50632: PUSH
50633: LD_INT 19
50635: PUSH
50636: LD_INT 20
50638: PUSH
50639: LD_INT 21
50641: PUSH
50642: LD_INT 22
50644: PUSH
50645: LD_INT 23
50647: PUSH
50648: LD_INT 24
50650: PUSH
50651: LD_INT 25
50653: PUSH
50654: LD_INT 26
50656: PUSH
50657: LD_INT 27
50659: PUSH
50660: LD_INT 28
50662: PUSH
50663: LD_INT 29
50665: PUSH
50666: LD_INT 30
50668: PUSH
50669: LD_INT 31
50671: PUSH
50672: LD_INT 32
50674: PUSH
50675: LD_INT 33
50677: PUSH
50678: LD_INT 34
50680: PUSH
50681: LD_INT 35
50683: PUSH
50684: LD_INT 36
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 101
50727: PUSH
50728: LD_INT 102
50730: PUSH
50731: LD_INT 103
50733: PUSH
50734: LD_INT 104
50736: PUSH
50737: LD_INT 105
50739: PUSH
50740: LD_INT 106
50742: PUSH
50743: LD_INT 107
50745: PUSH
50746: LD_INT 108
50748: PUSH
50749: LD_INT 109
50751: PUSH
50752: LD_INT 110
50754: PUSH
50755: LD_INT 111
50757: PUSH
50758: LD_INT 112
50760: PUSH
50761: LD_INT 113
50763: PUSH
50764: LD_INT 114
50766: PUSH
50767: LD_INT 115
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// if result then
50791: LD_VAR 0 1
50795: IFFALSE 51084
// begin normal :=  ;
50797: LD_ADDR_VAR 0 3
50801: PUSH
50802: LD_STRING 
50804: ST_TO_ADDR
// hardcore :=  ;
50805: LD_ADDR_VAR 0 4
50809: PUSH
50810: LD_STRING 
50812: ST_TO_ADDR
// for i = 1 to normalCounter do
50813: LD_ADDR_VAR 0 5
50817: PUSH
50818: DOUBLE
50819: LD_INT 1
50821: DEC
50822: ST_TO_ADDR
50823: LD_EXP 29
50827: PUSH
50828: FOR_TO
50829: IFFALSE 50930
// begin tmp := 0 ;
50831: LD_ADDR_VAR 0 2
50835: PUSH
50836: LD_STRING 0
50838: ST_TO_ADDR
// if result [ 1 ] then
50839: LD_VAR 0 1
50843: PUSH
50844: LD_INT 1
50846: ARRAY
50847: IFFALSE 50912
// if result [ 1 ] [ 1 ] = i then
50849: LD_VAR 0 1
50853: PUSH
50854: LD_INT 1
50856: ARRAY
50857: PUSH
50858: LD_INT 1
50860: ARRAY
50861: PUSH
50862: LD_VAR 0 5
50866: EQUAL
50867: IFFALSE 50912
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50869: LD_ADDR_VAR 0 1
50873: PUSH
50874: LD_VAR 0 1
50878: PPUSH
50879: LD_INT 1
50881: PPUSH
50882: LD_VAR 0 1
50886: PUSH
50887: LD_INT 1
50889: ARRAY
50890: PPUSH
50891: LD_INT 1
50893: PPUSH
50894: CALL_OW 3
50898: PPUSH
50899: CALL_OW 1
50903: ST_TO_ADDR
// tmp := 1 ;
50904: LD_ADDR_VAR 0 2
50908: PUSH
50909: LD_STRING 1
50911: ST_TO_ADDR
// end ; normal := normal & tmp ;
50912: LD_ADDR_VAR 0 3
50916: PUSH
50917: LD_VAR 0 3
50921: PUSH
50922: LD_VAR 0 2
50926: STR
50927: ST_TO_ADDR
// end ;
50928: GO 50828
50930: POP
50931: POP
// for i = 1 to hardcoreCounter do
50932: LD_ADDR_VAR 0 5
50936: PUSH
50937: DOUBLE
50938: LD_INT 1
50940: DEC
50941: ST_TO_ADDR
50942: LD_EXP 30
50946: PUSH
50947: FOR_TO
50948: IFFALSE 51053
// begin tmp := 0 ;
50950: LD_ADDR_VAR 0 2
50954: PUSH
50955: LD_STRING 0
50957: ST_TO_ADDR
// if result [ 2 ] then
50958: LD_VAR 0 1
50962: PUSH
50963: LD_INT 2
50965: ARRAY
50966: IFFALSE 51035
// if result [ 2 ] [ 1 ] = 100 + i then
50968: LD_VAR 0 1
50972: PUSH
50973: LD_INT 2
50975: ARRAY
50976: PUSH
50977: LD_INT 1
50979: ARRAY
50980: PUSH
50981: LD_INT 100
50983: PUSH
50984: LD_VAR 0 5
50988: PLUS
50989: EQUAL
50990: IFFALSE 51035
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50992: LD_ADDR_VAR 0 1
50996: PUSH
50997: LD_VAR 0 1
51001: PPUSH
51002: LD_INT 2
51004: PPUSH
51005: LD_VAR 0 1
51009: PUSH
51010: LD_INT 2
51012: ARRAY
51013: PPUSH
51014: LD_INT 1
51016: PPUSH
51017: CALL_OW 3
51021: PPUSH
51022: CALL_OW 1
51026: ST_TO_ADDR
// tmp := 1 ;
51027: LD_ADDR_VAR 0 2
51031: PUSH
51032: LD_STRING 1
51034: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51035: LD_ADDR_VAR 0 4
51039: PUSH
51040: LD_VAR 0 4
51044: PUSH
51045: LD_VAR 0 2
51049: STR
51050: ST_TO_ADDR
// end ;
51051: GO 50947
51053: POP
51054: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
51055: LD_STRING getStreamItemsFromMission("
51057: PUSH
51058: LD_VAR 0 3
51062: STR
51063: PUSH
51064: LD_STRING ","
51066: STR
51067: PUSH
51068: LD_VAR 0 4
51072: STR
51073: PUSH
51074: LD_STRING ")
51076: STR
51077: PPUSH
51078: CALL_OW 559
// end else
51082: GO 51091
// ToLua ( getStreamItemsFromMission("","") ) ;
51084: LD_STRING getStreamItemsFromMission("","")
51086: PPUSH
51087: CALL_OW 559
// end ;
51091: LD_VAR 0 1
51095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51096: LD_EXP 28
51100: PUSH
51101: LD_EXP 33
51105: AND
51106: IFFALSE 51230
51108: GO 51110
51110: DISABLE
51111: LD_INT 0
51113: PPUSH
51114: PPUSH
// begin enable ;
51115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51116: LD_ADDR_VAR 0 2
51120: PUSH
51121: LD_INT 22
51123: PUSH
51124: LD_OWVAR 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 34
51138: PUSH
51139: LD_INT 7
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 34
51148: PUSH
51149: LD_INT 45
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 34
51158: PUSH
51159: LD_INT 28
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 34
51168: PUSH
51169: LD_INT 47
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PPUSH
51187: CALL_OW 69
51191: ST_TO_ADDR
// if not tmp then
51192: LD_VAR 0 2
51196: NOT
51197: IFFALSE 51201
// exit ;
51199: GO 51230
// for i in tmp do
51201: LD_ADDR_VAR 0 1
51205: PUSH
51206: LD_VAR 0 2
51210: PUSH
51211: FOR_IN
51212: IFFALSE 51228
// begin SetLives ( i , 0 ) ;
51214: LD_VAR 0 1
51218: PPUSH
51219: LD_INT 0
51221: PPUSH
51222: CALL_OW 234
// end ;
51226: GO 51211
51228: POP
51229: POP
// end ;
51230: PPOPN 2
51232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51233: LD_EXP 28
51237: PUSH
51238: LD_EXP 34
51242: AND
51243: IFFALSE 51327
51245: GO 51247
51247: DISABLE
51248: LD_INT 0
51250: PPUSH
51251: PPUSH
// begin enable ;
51252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51253: LD_ADDR_VAR 0 2
51257: PUSH
51258: LD_INT 22
51260: PUSH
51261: LD_OWVAR 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 32
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PPUSH
51284: CALL_OW 69
51288: ST_TO_ADDR
// if not tmp then
51289: LD_VAR 0 2
51293: NOT
51294: IFFALSE 51298
// exit ;
51296: GO 51327
// for i in tmp do
51298: LD_ADDR_VAR 0 1
51302: PUSH
51303: LD_VAR 0 2
51307: PUSH
51308: FOR_IN
51309: IFFALSE 51325
// begin SetLives ( i , 0 ) ;
51311: LD_VAR 0 1
51315: PPUSH
51316: LD_INT 0
51318: PPUSH
51319: CALL_OW 234
// end ;
51323: GO 51308
51325: POP
51326: POP
// end ;
51327: PPOPN 2
51329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51330: LD_EXP 28
51334: PUSH
51335: LD_EXP 31
51339: AND
51340: IFFALSE 51433
51342: GO 51344
51344: DISABLE
51345: LD_INT 0
51347: PPUSH
// begin enable ;
51348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51349: LD_ADDR_VAR 0 1
51353: PUSH
51354: LD_INT 22
51356: PUSH
51357: LD_OWVAR 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 25
51371: PUSH
51372: LD_INT 5
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 25
51381: PUSH
51382: LD_INT 9
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 25
51391: PUSH
51392: LD_INT 8
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PPUSH
51409: CALL_OW 69
51413: PUSH
51414: FOR_IN
51415: IFFALSE 51431
// begin SetClass ( i , 1 ) ;
51417: LD_VAR 0 1
51421: PPUSH
51422: LD_INT 1
51424: PPUSH
51425: CALL_OW 336
// end ;
51429: GO 51414
51431: POP
51432: POP
// end ;
51433: PPOPN 1
51435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51436: LD_EXP 28
51440: PUSH
51441: LD_EXP 32
51445: AND
51446: PUSH
51447: LD_OWVAR 65
51451: PUSH
51452: LD_INT 7
51454: LESS
51455: AND
51456: IFFALSE 51470
51458: GO 51460
51460: DISABLE
// begin enable ;
51461: ENABLE
// game_speed := 7 ;
51462: LD_ADDR_OWVAR 65
51466: PUSH
51467: LD_INT 7
51469: ST_TO_ADDR
// end ;
51470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51471: LD_EXP 28
51475: PUSH
51476: LD_EXP 35
51480: AND
51481: IFFALSE 51683
51483: GO 51485
51485: DISABLE
51486: LD_INT 0
51488: PPUSH
51489: PPUSH
51490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51491: LD_ADDR_VAR 0 3
51495: PUSH
51496: LD_INT 81
51498: PUSH
51499: LD_OWVAR 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 21
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PPUSH
51522: CALL_OW 69
51526: ST_TO_ADDR
// if not tmp then
51527: LD_VAR 0 3
51531: NOT
51532: IFFALSE 51536
// exit ;
51534: GO 51683
// if tmp > 5 then
51536: LD_VAR 0 3
51540: PUSH
51541: LD_INT 5
51543: GREATER
51544: IFFALSE 51556
// k := 5 else
51546: LD_ADDR_VAR 0 2
51550: PUSH
51551: LD_INT 5
51553: ST_TO_ADDR
51554: GO 51566
// k := tmp ;
51556: LD_ADDR_VAR 0 2
51560: PUSH
51561: LD_VAR 0 3
51565: ST_TO_ADDR
// for i := 1 to k do
51566: LD_ADDR_VAR 0 1
51570: PUSH
51571: DOUBLE
51572: LD_INT 1
51574: DEC
51575: ST_TO_ADDR
51576: LD_VAR 0 2
51580: PUSH
51581: FOR_TO
51582: IFFALSE 51681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51584: LD_VAR 0 3
51588: PUSH
51589: LD_VAR 0 1
51593: ARRAY
51594: PPUSH
51595: LD_VAR 0 1
51599: PUSH
51600: LD_INT 4
51602: MOD
51603: PUSH
51604: LD_INT 1
51606: PLUS
51607: PPUSH
51608: CALL_OW 259
51612: PUSH
51613: LD_INT 10
51615: LESS
51616: IFFALSE 51679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51618: LD_VAR 0 3
51622: PUSH
51623: LD_VAR 0 1
51627: ARRAY
51628: PPUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 4
51636: MOD
51637: PUSH
51638: LD_INT 1
51640: PLUS
51641: PPUSH
51642: LD_VAR 0 3
51646: PUSH
51647: LD_VAR 0 1
51651: ARRAY
51652: PPUSH
51653: LD_VAR 0 1
51657: PUSH
51658: LD_INT 4
51660: MOD
51661: PUSH
51662: LD_INT 1
51664: PLUS
51665: PPUSH
51666: CALL_OW 259
51670: PUSH
51671: LD_INT 1
51673: PLUS
51674: PPUSH
51675: CALL_OW 237
51679: GO 51581
51681: POP
51682: POP
// end ;
51683: PPOPN 3
51685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51686: LD_EXP 28
51690: PUSH
51691: LD_EXP 36
51695: AND
51696: IFFALSE 51716
51698: GO 51700
51700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51701: LD_INT 4
51703: PPUSH
51704: LD_OWVAR 2
51708: PPUSH
51709: LD_INT 0
51711: PPUSH
51712: CALL_OW 324
51716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51717: LD_EXP 28
51721: PUSH
51722: LD_EXP 65
51726: AND
51727: IFFALSE 51747
51729: GO 51731
51731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51732: LD_INT 19
51734: PPUSH
51735: LD_OWVAR 2
51739: PPUSH
51740: LD_INT 0
51742: PPUSH
51743: CALL_OW 324
51747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51748: LD_EXP 28
51752: PUSH
51753: LD_EXP 37
51757: AND
51758: IFFALSE 51860
51760: GO 51762
51762: DISABLE
51763: LD_INT 0
51765: PPUSH
51766: PPUSH
// begin enable ;
51767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51768: LD_ADDR_VAR 0 2
51772: PUSH
51773: LD_INT 22
51775: PUSH
51776: LD_OWVAR 2
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 34
51790: PUSH
51791: LD_INT 11
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 34
51800: PUSH
51801: LD_INT 30
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PPUSH
51817: CALL_OW 69
51821: ST_TO_ADDR
// if not tmp then
51822: LD_VAR 0 2
51826: NOT
51827: IFFALSE 51831
// exit ;
51829: GO 51860
// for i in tmp do
51831: LD_ADDR_VAR 0 1
51835: PUSH
51836: LD_VAR 0 2
51840: PUSH
51841: FOR_IN
51842: IFFALSE 51858
// begin SetLives ( i , 0 ) ;
51844: LD_VAR 0 1
51848: PPUSH
51849: LD_INT 0
51851: PPUSH
51852: CALL_OW 234
// end ;
51856: GO 51841
51858: POP
51859: POP
// end ;
51860: PPOPN 2
51862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51863: LD_EXP 28
51867: PUSH
51868: LD_EXP 38
51872: AND
51873: IFFALSE 51893
51875: GO 51877
51877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51878: LD_INT 32
51880: PPUSH
51881: LD_OWVAR 2
51885: PPUSH
51886: LD_INT 0
51888: PPUSH
51889: CALL_OW 324
51893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51894: LD_EXP 28
51898: PUSH
51899: LD_EXP 39
51903: AND
51904: IFFALSE 52085
51906: GO 51908
51908: DISABLE
51909: LD_INT 0
51911: PPUSH
51912: PPUSH
51913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51914: LD_ADDR_VAR 0 2
51918: PUSH
51919: LD_INT 22
51921: PUSH
51922: LD_OWVAR 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 33
51933: PUSH
51934: LD_INT 3
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PPUSH
51945: CALL_OW 69
51949: ST_TO_ADDR
// if not tmp then
51950: LD_VAR 0 2
51954: NOT
51955: IFFALSE 51959
// exit ;
51957: GO 52085
// side := 0 ;
51959: LD_ADDR_VAR 0 3
51963: PUSH
51964: LD_INT 0
51966: ST_TO_ADDR
// for i := 1 to 8 do
51967: LD_ADDR_VAR 0 1
51971: PUSH
51972: DOUBLE
51973: LD_INT 1
51975: DEC
51976: ST_TO_ADDR
51977: LD_INT 8
51979: PUSH
51980: FOR_TO
51981: IFFALSE 52029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51983: LD_OWVAR 2
51987: PUSH
51988: LD_VAR 0 1
51992: NONEQUAL
51993: PUSH
51994: LD_OWVAR 2
51998: PPUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 81
52008: PUSH
52009: LD_INT 2
52011: EQUAL
52012: AND
52013: IFFALSE 52027
// begin side := i ;
52015: LD_ADDR_VAR 0 3
52019: PUSH
52020: LD_VAR 0 1
52024: ST_TO_ADDR
// break ;
52025: GO 52029
// end ;
52027: GO 51980
52029: POP
52030: POP
// if not side then
52031: LD_VAR 0 3
52035: NOT
52036: IFFALSE 52040
// exit ;
52038: GO 52085
// for i := 1 to tmp do
52040: LD_ADDR_VAR 0 1
52044: PUSH
52045: DOUBLE
52046: LD_INT 1
52048: DEC
52049: ST_TO_ADDR
52050: LD_VAR 0 2
52054: PUSH
52055: FOR_TO
52056: IFFALSE 52083
// if Prob ( 60 ) then
52058: LD_INT 60
52060: PPUSH
52061: CALL_OW 13
52065: IFFALSE 52081
// SetSide ( i , side ) ;
52067: LD_VAR 0 1
52071: PPUSH
52072: LD_VAR 0 3
52076: PPUSH
52077: CALL_OW 235
52081: GO 52055
52083: POP
52084: POP
// end ;
52085: PPOPN 3
52087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52088: LD_EXP 28
52092: PUSH
52093: LD_EXP 41
52097: AND
52098: IFFALSE 52217
52100: GO 52102
52102: DISABLE
52103: LD_INT 0
52105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52106: LD_ADDR_VAR 0 1
52110: PUSH
52111: LD_INT 22
52113: PUSH
52114: LD_OWVAR 2
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 21
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: LD_INT 23
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: PPUSH
52155: CALL_OW 69
52159: PUSH
52160: FOR_IN
52161: IFFALSE 52215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52163: LD_VAR 0 1
52167: PPUSH
52168: CALL_OW 257
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 4
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: IN
52191: IFFALSE 52213
// SetClass ( un , rand ( 1 , 4 ) ) ;
52193: LD_VAR 0 1
52197: PPUSH
52198: LD_INT 1
52200: PPUSH
52201: LD_INT 4
52203: PPUSH
52204: CALL_OW 12
52208: PPUSH
52209: CALL_OW 336
52213: GO 52160
52215: POP
52216: POP
// end ;
52217: PPOPN 1
52219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52220: LD_EXP 28
52224: PUSH
52225: LD_EXP 40
52229: AND
52230: IFFALSE 52309
52232: GO 52234
52234: DISABLE
52235: LD_INT 0
52237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52238: LD_ADDR_VAR 0 1
52242: PUSH
52243: LD_INT 22
52245: PUSH
52246: LD_OWVAR 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 21
52257: PUSH
52258: LD_INT 3
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PPUSH
52269: CALL_OW 69
52273: ST_TO_ADDR
// if not tmp then
52274: LD_VAR 0 1
52278: NOT
52279: IFFALSE 52283
// exit ;
52281: GO 52309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52283: LD_VAR 0 1
52287: PUSH
52288: LD_INT 1
52290: PPUSH
52291: LD_VAR 0 1
52295: PPUSH
52296: CALL_OW 12
52300: ARRAY
52301: PPUSH
52302: LD_INT 100
52304: PPUSH
52305: CALL_OW 234
// end ;
52309: PPOPN 1
52311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52312: LD_EXP 28
52316: PUSH
52317: LD_EXP 42
52321: AND
52322: IFFALSE 52420
52324: GO 52326
52326: DISABLE
52327: LD_INT 0
52329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52330: LD_ADDR_VAR 0 1
52334: PUSH
52335: LD_INT 22
52337: PUSH
52338: LD_OWVAR 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 21
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PPUSH
52361: CALL_OW 69
52365: ST_TO_ADDR
// if not tmp then
52366: LD_VAR 0 1
52370: NOT
52371: IFFALSE 52375
// exit ;
52373: GO 52420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52375: LD_VAR 0 1
52379: PUSH
52380: LD_INT 1
52382: PPUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 12
52392: ARRAY
52393: PPUSH
52394: LD_INT 1
52396: PPUSH
52397: LD_INT 4
52399: PPUSH
52400: CALL_OW 12
52404: PPUSH
52405: LD_INT 3000
52407: PPUSH
52408: LD_INT 9000
52410: PPUSH
52411: CALL_OW 12
52415: PPUSH
52416: CALL_OW 492
// end ;
52420: PPOPN 1
52422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52423: LD_EXP 28
52427: PUSH
52428: LD_EXP 43
52432: AND
52433: IFFALSE 52453
52435: GO 52437
52437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52438: LD_INT 1
52440: PPUSH
52441: LD_OWVAR 2
52445: PPUSH
52446: LD_INT 0
52448: PPUSH
52449: CALL_OW 324
52453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52454: LD_EXP 28
52458: PUSH
52459: LD_EXP 44
52463: AND
52464: IFFALSE 52547
52466: GO 52468
52468: DISABLE
52469: LD_INT 0
52471: PPUSH
52472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52473: LD_ADDR_VAR 0 2
52477: PUSH
52478: LD_INT 22
52480: PUSH
52481: LD_OWVAR 2
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 21
52492: PUSH
52493: LD_INT 3
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PPUSH
52504: CALL_OW 69
52508: ST_TO_ADDR
// if not tmp then
52509: LD_VAR 0 2
52513: NOT
52514: IFFALSE 52518
// exit ;
52516: GO 52547
// for i in tmp do
52518: LD_ADDR_VAR 0 1
52522: PUSH
52523: LD_VAR 0 2
52527: PUSH
52528: FOR_IN
52529: IFFALSE 52545
// SetBLevel ( i , 10 ) ;
52531: LD_VAR 0 1
52535: PPUSH
52536: LD_INT 10
52538: PPUSH
52539: CALL_OW 241
52543: GO 52528
52545: POP
52546: POP
// end ;
52547: PPOPN 2
52549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52550: LD_EXP 28
52554: PUSH
52555: LD_EXP 45
52559: AND
52560: IFFALSE 52671
52562: GO 52564
52564: DISABLE
52565: LD_INT 0
52567: PPUSH
52568: PPUSH
52569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52570: LD_ADDR_VAR 0 3
52574: PUSH
52575: LD_INT 22
52577: PUSH
52578: LD_OWVAR 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 25
52589: PUSH
52590: LD_INT 1
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PPUSH
52601: CALL_OW 69
52605: ST_TO_ADDR
// if not tmp then
52606: LD_VAR 0 3
52610: NOT
52611: IFFALSE 52615
// exit ;
52613: GO 52671
// un := tmp [ rand ( 1 , tmp ) ] ;
52615: LD_ADDR_VAR 0 2
52619: PUSH
52620: LD_VAR 0 3
52624: PUSH
52625: LD_INT 1
52627: PPUSH
52628: LD_VAR 0 3
52632: PPUSH
52633: CALL_OW 12
52637: ARRAY
52638: ST_TO_ADDR
// if Crawls ( un ) then
52639: LD_VAR 0 2
52643: PPUSH
52644: CALL_OW 318
52648: IFFALSE 52659
// ComWalk ( un ) ;
52650: LD_VAR 0 2
52654: PPUSH
52655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52659: LD_VAR 0 2
52663: PPUSH
52664: LD_INT 5
52666: PPUSH
52667: CALL_OW 336
// end ;
52671: PPOPN 3
52673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
52674: LD_EXP 28
52678: PUSH
52679: LD_EXP 46
52683: AND
52684: PUSH
52685: LD_OWVAR 67
52689: PUSH
52690: LD_INT 3
52692: LESS
52693: AND
52694: IFFALSE 52713
52696: GO 52698
52698: DISABLE
// Difficulty := Difficulty + 1 ;
52699: LD_ADDR_OWVAR 67
52703: PUSH
52704: LD_OWVAR 67
52708: PUSH
52709: LD_INT 1
52711: PLUS
52712: ST_TO_ADDR
52713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52714: LD_EXP 28
52718: PUSH
52719: LD_EXP 47
52723: AND
52724: IFFALSE 52827
52726: GO 52728
52728: DISABLE
52729: LD_INT 0
52731: PPUSH
// begin for i := 1 to 5 do
52732: LD_ADDR_VAR 0 1
52736: PUSH
52737: DOUBLE
52738: LD_INT 1
52740: DEC
52741: ST_TO_ADDR
52742: LD_INT 5
52744: PUSH
52745: FOR_TO
52746: IFFALSE 52825
// begin uc_nation := nation_nature ;
52748: LD_ADDR_OWVAR 21
52752: PUSH
52753: LD_INT 0
52755: ST_TO_ADDR
// uc_side := 0 ;
52756: LD_ADDR_OWVAR 20
52760: PUSH
52761: LD_INT 0
52763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52764: LD_ADDR_OWVAR 29
52768: PUSH
52769: LD_INT 12
52771: PUSH
52772: LD_INT 12
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// hc_agressivity := 20 ;
52779: LD_ADDR_OWVAR 35
52783: PUSH
52784: LD_INT 20
52786: ST_TO_ADDR
// hc_class := class_tiger ;
52787: LD_ADDR_OWVAR 28
52791: PUSH
52792: LD_INT 14
52794: ST_TO_ADDR
// hc_gallery :=  ;
52795: LD_ADDR_OWVAR 33
52799: PUSH
52800: LD_STRING 
52802: ST_TO_ADDR
// hc_name :=  ;
52803: LD_ADDR_OWVAR 26
52807: PUSH
52808: LD_STRING 
52810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52811: CALL_OW 44
52815: PPUSH
52816: LD_INT 0
52818: PPUSH
52819: CALL_OW 51
// end ;
52823: GO 52745
52825: POP
52826: POP
// end ;
52827: PPOPN 1
52829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52830: LD_EXP 28
52834: PUSH
52835: LD_EXP 48
52839: AND
52840: IFFALSE 52849
52842: GO 52844
52844: DISABLE
// StreamSibBomb ;
52845: CALL 52850 0 0
52849: END
// export function StreamSibBomb ; var i , x , y ; begin
52850: LD_INT 0
52852: PPUSH
52853: PPUSH
52854: PPUSH
52855: PPUSH
// result := false ;
52856: LD_ADDR_VAR 0 1
52860: PUSH
52861: LD_INT 0
52863: ST_TO_ADDR
// for i := 1 to 16 do
52864: LD_ADDR_VAR 0 2
52868: PUSH
52869: DOUBLE
52870: LD_INT 1
52872: DEC
52873: ST_TO_ADDR
52874: LD_INT 16
52876: PUSH
52877: FOR_TO
52878: IFFALSE 53077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52880: LD_ADDR_VAR 0 3
52884: PUSH
52885: LD_INT 10
52887: PUSH
52888: LD_INT 20
52890: PUSH
52891: LD_INT 30
52893: PUSH
52894: LD_INT 40
52896: PUSH
52897: LD_INT 50
52899: PUSH
52900: LD_INT 60
52902: PUSH
52903: LD_INT 70
52905: PUSH
52906: LD_INT 80
52908: PUSH
52909: LD_INT 90
52911: PUSH
52912: LD_INT 100
52914: PUSH
52915: LD_INT 110
52917: PUSH
52918: LD_INT 120
52920: PUSH
52921: LD_INT 130
52923: PUSH
52924: LD_INT 140
52926: PUSH
52927: LD_INT 150
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PPUSH
52950: LD_INT 15
52952: PPUSH
52953: CALL_OW 12
52957: ARRAY
52958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52959: LD_ADDR_VAR 0 4
52963: PUSH
52964: LD_INT 10
52966: PUSH
52967: LD_INT 20
52969: PUSH
52970: LD_INT 30
52972: PUSH
52973: LD_INT 40
52975: PUSH
52976: LD_INT 50
52978: PUSH
52979: LD_INT 60
52981: PUSH
52982: LD_INT 70
52984: PUSH
52985: LD_INT 80
52987: PUSH
52988: LD_INT 90
52990: PUSH
52991: LD_INT 100
52993: PUSH
52994: LD_INT 110
52996: PUSH
52997: LD_INT 120
52999: PUSH
53000: LD_INT 130
53002: PUSH
53003: LD_INT 140
53005: PUSH
53006: LD_INT 150
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 1
53028: PPUSH
53029: LD_INT 15
53031: PPUSH
53032: CALL_OW 12
53036: ARRAY
53037: ST_TO_ADDR
// if ValidHex ( x , y ) then
53038: LD_VAR 0 3
53042: PPUSH
53043: LD_VAR 0 4
53047: PPUSH
53048: CALL_OW 488
53052: IFFALSE 53075
// begin result := [ x , y ] ;
53054: LD_ADDR_VAR 0 1
53058: PUSH
53059: LD_VAR 0 3
53063: PUSH
53064: LD_VAR 0 4
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// break ;
53073: GO 53077
// end ; end ;
53075: GO 52877
53077: POP
53078: POP
// if result then
53079: LD_VAR 0 1
53083: IFFALSE 53143
// begin ToLua ( playSibBomb() ) ;
53085: LD_STRING playSibBomb()
53087: PPUSH
53088: CALL_OW 559
// wait ( 0 0$14 ) ;
53092: LD_INT 490
53094: PPUSH
53095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 1
53106: ARRAY
53107: PPUSH
53108: LD_VAR 0 1
53112: PUSH
53113: LD_INT 2
53115: ARRAY
53116: PPUSH
53117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53121: LD_VAR 0 1
53125: PUSH
53126: LD_INT 1
53128: ARRAY
53129: PPUSH
53130: LD_VAR 0 1
53134: PUSH
53135: LD_INT 2
53137: ARRAY
53138: PPUSH
53139: CALL_OW 429
// end ; end ;
53143: LD_VAR 0 1
53147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53148: LD_EXP 28
53152: PUSH
53153: LD_EXP 50
53157: AND
53158: IFFALSE 53170
53160: GO 53162
53162: DISABLE
// YouLost (  ) ;
53163: LD_STRING 
53165: PPUSH
53166: CALL_OW 104
53170: END
// every 0 0$1 trigger StreamModeActive and sFog do
53171: LD_EXP 28
53175: PUSH
53176: LD_EXP 49
53180: AND
53181: IFFALSE 53195
53183: GO 53185
53185: DISABLE
// FogOff ( your_side ) ;
53186: LD_OWVAR 2
53190: PPUSH
53191: CALL_OW 344
53195: END
// every 0 0$1 trigger StreamModeActive and sSun do
53196: LD_EXP 28
53200: PUSH
53201: LD_EXP 51
53205: AND
53206: IFFALSE 53234
53208: GO 53210
53210: DISABLE
// begin solar_recharge_percent := 0 ;
53211: LD_ADDR_OWVAR 79
53215: PUSH
53216: LD_INT 0
53218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53219: LD_INT 10500
53221: PPUSH
53222: CALL_OW 67
// solar_recharge_percent := 100 ;
53226: LD_ADDR_OWVAR 79
53230: PUSH
53231: LD_INT 100
53233: ST_TO_ADDR
// end ;
53234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53235: LD_EXP 28
53239: PUSH
53240: LD_EXP 52
53244: AND
53245: IFFALSE 53484
53247: GO 53249
53249: DISABLE
53250: LD_INT 0
53252: PPUSH
53253: PPUSH
53254: PPUSH
// begin tmp := [ ] ;
53255: LD_ADDR_VAR 0 3
53259: PUSH
53260: EMPTY
53261: ST_TO_ADDR
// for i := 1 to 6 do
53262: LD_ADDR_VAR 0 1
53266: PUSH
53267: DOUBLE
53268: LD_INT 1
53270: DEC
53271: ST_TO_ADDR
53272: LD_INT 6
53274: PUSH
53275: FOR_TO
53276: IFFALSE 53381
// begin uc_nation := nation_nature ;
53278: LD_ADDR_OWVAR 21
53282: PUSH
53283: LD_INT 0
53285: ST_TO_ADDR
// uc_side := 0 ;
53286: LD_ADDR_OWVAR 20
53290: PUSH
53291: LD_INT 0
53293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53294: LD_ADDR_OWVAR 29
53298: PUSH
53299: LD_INT 12
53301: PUSH
53302: LD_INT 12
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// hc_agressivity := 20 ;
53309: LD_ADDR_OWVAR 35
53313: PUSH
53314: LD_INT 20
53316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53317: LD_ADDR_OWVAR 28
53321: PUSH
53322: LD_INT 17
53324: ST_TO_ADDR
// hc_gallery :=  ;
53325: LD_ADDR_OWVAR 33
53329: PUSH
53330: LD_STRING 
53332: ST_TO_ADDR
// hc_name :=  ;
53333: LD_ADDR_OWVAR 26
53337: PUSH
53338: LD_STRING 
53340: ST_TO_ADDR
// un := CreateHuman ;
53341: LD_ADDR_VAR 0 2
53345: PUSH
53346: CALL_OW 44
53350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53351: LD_VAR 0 2
53355: PPUSH
53356: LD_INT 1
53358: PPUSH
53359: CALL_OW 51
// tmp := tmp ^ un ;
53363: LD_ADDR_VAR 0 3
53367: PUSH
53368: LD_VAR 0 3
53372: PUSH
53373: LD_VAR 0 2
53377: ADD
53378: ST_TO_ADDR
// end ;
53379: GO 53275
53381: POP
53382: POP
// repeat wait ( 0 0$1 ) ;
53383: LD_INT 35
53385: PPUSH
53386: CALL_OW 67
// for un in tmp do
53390: LD_ADDR_VAR 0 2
53394: PUSH
53395: LD_VAR 0 3
53399: PUSH
53400: FOR_IN
53401: IFFALSE 53475
// begin if IsDead ( un ) then
53403: LD_VAR 0 2
53407: PPUSH
53408: CALL_OW 301
53412: IFFALSE 53432
// begin tmp := tmp diff un ;
53414: LD_ADDR_VAR 0 3
53418: PUSH
53419: LD_VAR 0 3
53423: PUSH
53424: LD_VAR 0 2
53428: DIFF
53429: ST_TO_ADDR
// continue ;
53430: GO 53400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53432: LD_VAR 0 2
53436: PPUSH
53437: LD_INT 3
53439: PUSH
53440: LD_INT 22
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PPUSH
53454: CALL_OW 69
53458: PPUSH
53459: LD_VAR 0 2
53463: PPUSH
53464: CALL_OW 74
53468: PPUSH
53469: CALL_OW 115
// end ;
53473: GO 53400
53475: POP
53476: POP
// until not tmp ;
53477: LD_VAR 0 3
53481: NOT
53482: IFFALSE 53383
// end ;
53484: PPOPN 3
53486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53487: LD_EXP 28
53491: PUSH
53492: LD_EXP 53
53496: AND
53497: IFFALSE 53551
53499: GO 53501
53501: DISABLE
// begin ToLua ( displayTroll(); ) ;
53502: LD_STRING displayTroll();
53504: PPUSH
53505: CALL_OW 559
// wait ( 3 3$00 ) ;
53509: LD_INT 6300
53511: PPUSH
53512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53516: LD_STRING hideTroll();
53518: PPUSH
53519: CALL_OW 559
// wait ( 1 1$00 ) ;
53523: LD_INT 2100
53525: PPUSH
53526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53530: LD_STRING displayTroll();
53532: PPUSH
53533: CALL_OW 559
// wait ( 1 1$00 ) ;
53537: LD_INT 2100
53539: PPUSH
53540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53544: LD_STRING hideTroll();
53546: PPUSH
53547: CALL_OW 559
// end ;
53551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53552: LD_EXP 28
53556: PUSH
53557: LD_EXP 54
53561: AND
53562: IFFALSE 53625
53564: GO 53566
53566: DISABLE
53567: LD_INT 0
53569: PPUSH
// begin p := 0 ;
53570: LD_ADDR_VAR 0 1
53574: PUSH
53575: LD_INT 0
53577: ST_TO_ADDR
// repeat game_speed := 1 ;
53578: LD_ADDR_OWVAR 65
53582: PUSH
53583: LD_INT 1
53585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53586: LD_INT 35
53588: PPUSH
53589: CALL_OW 67
// p := p + 1 ;
53593: LD_ADDR_VAR 0 1
53597: PUSH
53598: LD_VAR 0 1
53602: PUSH
53603: LD_INT 1
53605: PLUS
53606: ST_TO_ADDR
// until p >= 60 ;
53607: LD_VAR 0 1
53611: PUSH
53612: LD_INT 60
53614: GREATEREQUAL
53615: IFFALSE 53578
// game_speed := 4 ;
53617: LD_ADDR_OWVAR 65
53621: PUSH
53622: LD_INT 4
53624: ST_TO_ADDR
// end ;
53625: PPOPN 1
53627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53628: LD_EXP 28
53632: PUSH
53633: LD_EXP 55
53637: AND
53638: IFFALSE 53784
53640: GO 53642
53642: DISABLE
53643: LD_INT 0
53645: PPUSH
53646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53647: LD_ADDR_VAR 0 1
53651: PUSH
53652: LD_INT 22
53654: PUSH
53655: LD_OWVAR 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: LD_INT 30
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 30
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: LIST
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PPUSH
53696: CALL_OW 69
53700: ST_TO_ADDR
// if not depot then
53701: LD_VAR 0 1
53705: NOT
53706: IFFALSE 53710
// exit ;
53708: GO 53784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53710: LD_ADDR_VAR 0 2
53714: PUSH
53715: LD_VAR 0 1
53719: PUSH
53720: LD_INT 1
53722: PPUSH
53723: LD_VAR 0 1
53727: PPUSH
53728: CALL_OW 12
53732: ARRAY
53733: PPUSH
53734: CALL_OW 274
53738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53739: LD_VAR 0 2
53743: PPUSH
53744: LD_INT 1
53746: PPUSH
53747: LD_INT 0
53749: PPUSH
53750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53754: LD_VAR 0 2
53758: PPUSH
53759: LD_INT 2
53761: PPUSH
53762: LD_INT 0
53764: PPUSH
53765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53769: LD_VAR 0 2
53773: PPUSH
53774: LD_INT 3
53776: PPUSH
53777: LD_INT 0
53779: PPUSH
53780: CALL_OW 277
// end ;
53784: PPOPN 2
53786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53787: LD_EXP 28
53791: PUSH
53792: LD_EXP 56
53796: AND
53797: IFFALSE 53894
53799: GO 53801
53801: DISABLE
53802: LD_INT 0
53804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53805: LD_ADDR_VAR 0 1
53809: PUSH
53810: LD_INT 22
53812: PUSH
53813: LD_OWVAR 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 21
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: LD_INT 23
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: LIST
53853: PPUSH
53854: CALL_OW 69
53858: ST_TO_ADDR
// if not tmp then
53859: LD_VAR 0 1
53863: NOT
53864: IFFALSE 53868
// exit ;
53866: GO 53894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53868: LD_VAR 0 1
53872: PUSH
53873: LD_INT 1
53875: PPUSH
53876: LD_VAR 0 1
53880: PPUSH
53881: CALL_OW 12
53885: ARRAY
53886: PPUSH
53887: LD_INT 200
53889: PPUSH
53890: CALL_OW 234
// end ;
53894: PPOPN 1
53896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53897: LD_EXP 28
53901: PUSH
53902: LD_EXP 57
53906: AND
53907: IFFALSE 53986
53909: GO 53911
53911: DISABLE
53912: LD_INT 0
53914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53915: LD_ADDR_VAR 0 1
53919: PUSH
53920: LD_INT 22
53922: PUSH
53923: LD_OWVAR 2
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 21
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PPUSH
53946: CALL_OW 69
53950: ST_TO_ADDR
// if not tmp then
53951: LD_VAR 0 1
53955: NOT
53956: IFFALSE 53960
// exit ;
53958: GO 53986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53960: LD_VAR 0 1
53964: PUSH
53965: LD_INT 1
53967: PPUSH
53968: LD_VAR 0 1
53972: PPUSH
53973: CALL_OW 12
53977: ARRAY
53978: PPUSH
53979: LD_INT 60
53981: PPUSH
53982: CALL_OW 234
// end ;
53986: PPOPN 1
53988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53989: LD_EXP 28
53993: PUSH
53994: LD_EXP 58
53998: AND
53999: IFFALSE 54098
54001: GO 54003
54003: DISABLE
54004: LD_INT 0
54006: PPUSH
54007: PPUSH
// begin enable ;
54008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54009: LD_ADDR_VAR 0 1
54013: PUSH
54014: LD_INT 22
54016: PUSH
54017: LD_OWVAR 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 61
54028: PUSH
54029: EMPTY
54030: LIST
54031: PUSH
54032: LD_INT 33
54034: PUSH
54035: LD_INT 2
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: PPUSH
54047: CALL_OW 69
54051: ST_TO_ADDR
// if not tmp then
54052: LD_VAR 0 1
54056: NOT
54057: IFFALSE 54061
// exit ;
54059: GO 54098
// for i in tmp do
54061: LD_ADDR_VAR 0 2
54065: PUSH
54066: LD_VAR 0 1
54070: PUSH
54071: FOR_IN
54072: IFFALSE 54096
// if IsControledBy ( i ) then
54074: LD_VAR 0 2
54078: PPUSH
54079: CALL_OW 312
54083: IFFALSE 54094
// ComUnlink ( i ) ;
54085: LD_VAR 0 2
54089: PPUSH
54090: CALL_OW 136
54094: GO 54071
54096: POP
54097: POP
// end ;
54098: PPOPN 2
54100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54101: LD_EXP 28
54105: PUSH
54106: LD_EXP 59
54110: AND
54111: IFFALSE 54251
54113: GO 54115
54115: DISABLE
54116: LD_INT 0
54118: PPUSH
54119: PPUSH
// begin ToLua ( displayPowell(); ) ;
54120: LD_STRING displayPowell();
54122: PPUSH
54123: CALL_OW 559
// uc_side := 0 ;
54127: LD_ADDR_OWVAR 20
54131: PUSH
54132: LD_INT 0
54134: ST_TO_ADDR
// uc_nation := 2 ;
54135: LD_ADDR_OWVAR 21
54139: PUSH
54140: LD_INT 2
54142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54143: LD_ADDR_OWVAR 37
54147: PUSH
54148: LD_INT 14
54150: ST_TO_ADDR
// vc_engine := engine_siberite ;
54151: LD_ADDR_OWVAR 39
54155: PUSH
54156: LD_INT 3
54158: ST_TO_ADDR
// vc_control := control_apeman ;
54159: LD_ADDR_OWVAR 38
54163: PUSH
54164: LD_INT 5
54166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54167: LD_ADDR_OWVAR 40
54171: PUSH
54172: LD_INT 29
54174: ST_TO_ADDR
// un := CreateVehicle ;
54175: LD_ADDR_VAR 0 2
54179: PUSH
54180: CALL_OW 45
54184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54185: LD_VAR 0 2
54189: PPUSH
54190: LD_INT 1
54192: PPUSH
54193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54197: LD_INT 35
54199: PPUSH
54200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54204: LD_VAR 0 2
54208: PPUSH
54209: LD_INT 22
54211: PUSH
54212: LD_OWVAR 2
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PPUSH
54221: CALL_OW 69
54225: PPUSH
54226: LD_VAR 0 2
54230: PPUSH
54231: CALL_OW 74
54235: PPUSH
54236: CALL_OW 115
// until IsDead ( un ) ;
54240: LD_VAR 0 2
54244: PPUSH
54245: CALL_OW 301
54249: IFFALSE 54197
// end ;
54251: PPOPN 2
54253: END
// every 0 0$1 trigger StreamModeActive and sStu do
54254: LD_EXP 28
54258: PUSH
54259: LD_EXP 67
54263: AND
54264: IFFALSE 54280
54266: GO 54268
54268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54269: LD_STRING displayStucuk();
54271: PPUSH
54272: CALL_OW 559
// ResetFog ;
54276: CALL_OW 335
// end ;
54280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54281: LD_EXP 28
54285: PUSH
54286: LD_EXP 60
54290: AND
54291: IFFALSE 54432
54293: GO 54295
54295: DISABLE
54296: LD_INT 0
54298: PPUSH
54299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54300: LD_ADDR_VAR 0 2
54304: PUSH
54305: LD_INT 22
54307: PUSH
54308: LD_OWVAR 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 21
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PPUSH
54331: CALL_OW 69
54335: ST_TO_ADDR
// if not tmp then
54336: LD_VAR 0 2
54340: NOT
54341: IFFALSE 54345
// exit ;
54343: GO 54432
// un := tmp [ rand ( 1 , tmp ) ] ;
54345: LD_ADDR_VAR 0 1
54349: PUSH
54350: LD_VAR 0 2
54354: PUSH
54355: LD_INT 1
54357: PPUSH
54358: LD_VAR 0 2
54362: PPUSH
54363: CALL_OW 12
54367: ARRAY
54368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54369: LD_VAR 0 1
54373: PPUSH
54374: LD_INT 0
54376: PPUSH
54377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54381: LD_VAR 0 1
54385: PPUSH
54386: LD_OWVAR 3
54390: PUSH
54391: LD_VAR 0 1
54395: DIFF
54396: PPUSH
54397: LD_VAR 0 1
54401: PPUSH
54402: CALL_OW 74
54406: PPUSH
54407: CALL_OW 115
// wait ( 0 0$20 ) ;
54411: LD_INT 700
54413: PPUSH
54414: CALL_OW 67
// SetSide ( un , your_side ) ;
54418: LD_VAR 0 1
54422: PPUSH
54423: LD_OWVAR 2
54427: PPUSH
54428: CALL_OW 235
// end ;
54432: PPOPN 2
54434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54435: LD_EXP 28
54439: PUSH
54440: LD_EXP 61
54444: AND
54445: IFFALSE 54551
54447: GO 54449
54449: DISABLE
54450: LD_INT 0
54452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54453: LD_ADDR_VAR 0 1
54457: PUSH
54458: LD_INT 22
54460: PUSH
54461: LD_OWVAR 2
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: PUSH
54473: LD_INT 30
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 30
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PPUSH
54502: CALL_OW 69
54506: ST_TO_ADDR
// if not depot then
54507: LD_VAR 0 1
54511: NOT
54512: IFFALSE 54516
// exit ;
54514: GO 54551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54516: LD_VAR 0 1
54520: PUSH
54521: LD_INT 1
54523: ARRAY
54524: PPUSH
54525: CALL_OW 250
54529: PPUSH
54530: LD_VAR 0 1
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PPUSH
54539: CALL_OW 251
54543: PPUSH
54544: LD_INT 70
54546: PPUSH
54547: CALL_OW 495
// end ;
54551: PPOPN 1
54553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54554: LD_EXP 28
54558: PUSH
54559: LD_EXP 62
54563: AND
54564: IFFALSE 54775
54566: GO 54568
54568: DISABLE
54569: LD_INT 0
54571: PPUSH
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54576: LD_ADDR_VAR 0 5
54580: PUSH
54581: LD_INT 22
54583: PUSH
54584: LD_OWVAR 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 21
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PPUSH
54607: CALL_OW 69
54611: ST_TO_ADDR
// if not tmp then
54612: LD_VAR 0 5
54616: NOT
54617: IFFALSE 54621
// exit ;
54619: GO 54775
// for i in tmp do
54621: LD_ADDR_VAR 0 1
54625: PUSH
54626: LD_VAR 0 5
54630: PUSH
54631: FOR_IN
54632: IFFALSE 54773
// begin d := rand ( 0 , 5 ) ;
54634: LD_ADDR_VAR 0 4
54638: PUSH
54639: LD_INT 0
54641: PPUSH
54642: LD_INT 5
54644: PPUSH
54645: CALL_OW 12
54649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54650: LD_ADDR_VAR 0 2
54654: PUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL_OW 250
54664: PPUSH
54665: LD_VAR 0 4
54669: PPUSH
54670: LD_INT 3
54672: PPUSH
54673: LD_INT 12
54675: PPUSH
54676: CALL_OW 12
54680: PPUSH
54681: CALL_OW 272
54685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54686: LD_ADDR_VAR 0 3
54690: PUSH
54691: LD_VAR 0 1
54695: PPUSH
54696: CALL_OW 251
54700: PPUSH
54701: LD_VAR 0 4
54705: PPUSH
54706: LD_INT 3
54708: PPUSH
54709: LD_INT 12
54711: PPUSH
54712: CALL_OW 12
54716: PPUSH
54717: CALL_OW 273
54721: ST_TO_ADDR
// if ValidHex ( x , y ) then
54722: LD_VAR 0 2
54726: PPUSH
54727: LD_VAR 0 3
54731: PPUSH
54732: CALL_OW 488
54736: IFFALSE 54771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54738: LD_VAR 0 1
54742: PPUSH
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 3
54752: PPUSH
54753: LD_INT 3
54755: PPUSH
54756: LD_INT 6
54758: PPUSH
54759: CALL_OW 12
54763: PPUSH
54764: LD_INT 1
54766: PPUSH
54767: CALL_OW 483
// end ;
54771: GO 54631
54773: POP
54774: POP
// end ;
54775: PPOPN 5
54777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54778: LD_EXP 28
54782: PUSH
54783: LD_EXP 63
54787: AND
54788: IFFALSE 54882
54790: GO 54792
54792: DISABLE
54793: LD_INT 0
54795: PPUSH
54796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54797: LD_ADDR_VAR 0 2
54801: PUSH
54802: LD_INT 22
54804: PUSH
54805: LD_OWVAR 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 32
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 21
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PPUSH
54839: CALL_OW 69
54843: ST_TO_ADDR
// if not tmp then
54844: LD_VAR 0 2
54848: NOT
54849: IFFALSE 54853
// exit ;
54851: GO 54882
// for i in tmp do
54853: LD_ADDR_VAR 0 1
54857: PUSH
54858: LD_VAR 0 2
54862: PUSH
54863: FOR_IN
54864: IFFALSE 54880
// SetFuel ( i , 0 ) ;
54866: LD_VAR 0 1
54870: PPUSH
54871: LD_INT 0
54873: PPUSH
54874: CALL_OW 240
54878: GO 54863
54880: POP
54881: POP
// end ;
54882: PPOPN 2
54884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54885: LD_EXP 28
54889: PUSH
54890: LD_EXP 64
54894: AND
54895: IFFALSE 54961
54897: GO 54899
54899: DISABLE
54900: LD_INT 0
54902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54903: LD_ADDR_VAR 0 1
54907: PUSH
54908: LD_INT 22
54910: PUSH
54911: LD_OWVAR 2
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 30
54922: PUSH
54923: LD_INT 29
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PPUSH
54934: CALL_OW 69
54938: ST_TO_ADDR
// if not tmp then
54939: LD_VAR 0 1
54943: NOT
54944: IFFALSE 54948
// exit ;
54946: GO 54961
// DestroyUnit ( tmp [ 1 ] ) ;
54948: LD_VAR 0 1
54952: PUSH
54953: LD_INT 1
54955: ARRAY
54956: PPUSH
54957: CALL_OW 65
// end ;
54961: PPOPN 1
54963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54964: LD_EXP 28
54968: PUSH
54969: LD_EXP 66
54973: AND
54974: IFFALSE 55103
54976: GO 54978
54978: DISABLE
54979: LD_INT 0
54981: PPUSH
// begin uc_side := 0 ;
54982: LD_ADDR_OWVAR 20
54986: PUSH
54987: LD_INT 0
54989: ST_TO_ADDR
// uc_nation := nation_arabian ;
54990: LD_ADDR_OWVAR 21
54994: PUSH
54995: LD_INT 2
54997: ST_TO_ADDR
// hc_gallery :=  ;
54998: LD_ADDR_OWVAR 33
55002: PUSH
55003: LD_STRING 
55005: ST_TO_ADDR
// hc_name :=  ;
55006: LD_ADDR_OWVAR 26
55010: PUSH
55011: LD_STRING 
55013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55014: LD_INT 1
55016: PPUSH
55017: LD_INT 11
55019: PPUSH
55020: LD_INT 10
55022: PPUSH
55023: CALL_OW 380
// un := CreateHuman ;
55027: LD_ADDR_VAR 0 1
55031: PUSH
55032: CALL_OW 44
55036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55037: LD_VAR 0 1
55041: PPUSH
55042: LD_INT 1
55044: PPUSH
55045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55049: LD_INT 35
55051: PPUSH
55052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55056: LD_VAR 0 1
55060: PPUSH
55061: LD_INT 22
55063: PUSH
55064: LD_OWVAR 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PPUSH
55073: CALL_OW 69
55077: PPUSH
55078: LD_VAR 0 1
55082: PPUSH
55083: CALL_OW 74
55087: PPUSH
55088: CALL_OW 115
// until IsDead ( un ) ;
55092: LD_VAR 0 1
55096: PPUSH
55097: CALL_OW 301
55101: IFFALSE 55049
// end ;
55103: PPOPN 1
55105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55106: LD_EXP 28
55110: PUSH
55111: LD_EXP 68
55115: AND
55116: IFFALSE 55128
55118: GO 55120
55120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55121: LD_STRING earthquake(getX(game), 0, 32)
55123: PPUSH
55124: CALL_OW 559
55128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55129: LD_EXP 28
55133: PUSH
55134: LD_EXP 69
55138: AND
55139: IFFALSE 55230
55141: GO 55143
55143: DISABLE
55144: LD_INT 0
55146: PPUSH
// begin enable ;
55147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55148: LD_ADDR_VAR 0 1
55152: PUSH
55153: LD_INT 22
55155: PUSH
55156: LD_OWVAR 2
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 21
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 33
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: PPUSH
55190: CALL_OW 69
55194: ST_TO_ADDR
// if not tmp then
55195: LD_VAR 0 1
55199: NOT
55200: IFFALSE 55204
// exit ;
55202: GO 55230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55204: LD_VAR 0 1
55208: PUSH
55209: LD_INT 1
55211: PPUSH
55212: LD_VAR 0 1
55216: PPUSH
55217: CALL_OW 12
55221: ARRAY
55222: PPUSH
55223: LD_INT 1
55225: PPUSH
55226: CALL_OW 234
// end ;
55230: PPOPN 1
55232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55233: LD_EXP 28
55237: PUSH
55238: LD_EXP 70
55242: AND
55243: IFFALSE 55384
55245: GO 55247
55247: DISABLE
55248: LD_INT 0
55250: PPUSH
55251: PPUSH
55252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55253: LD_ADDR_VAR 0 3
55257: PUSH
55258: LD_INT 22
55260: PUSH
55261: LD_OWVAR 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 25
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PPUSH
55284: CALL_OW 69
55288: ST_TO_ADDR
// if not tmp then
55289: LD_VAR 0 3
55293: NOT
55294: IFFALSE 55298
// exit ;
55296: GO 55384
// un := tmp [ rand ( 1 , tmp ) ] ;
55298: LD_ADDR_VAR 0 2
55302: PUSH
55303: LD_VAR 0 3
55307: PUSH
55308: LD_INT 1
55310: PPUSH
55311: LD_VAR 0 3
55315: PPUSH
55316: CALL_OW 12
55320: ARRAY
55321: ST_TO_ADDR
// if Crawls ( un ) then
55322: LD_VAR 0 2
55326: PPUSH
55327: CALL_OW 318
55331: IFFALSE 55342
// ComWalk ( un ) ;
55333: LD_VAR 0 2
55337: PPUSH
55338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55342: LD_VAR 0 2
55346: PPUSH
55347: LD_INT 9
55349: PPUSH
55350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55354: LD_INT 28
55356: PPUSH
55357: LD_OWVAR 2
55361: PPUSH
55362: LD_INT 2
55364: PPUSH
55365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55369: LD_INT 29
55371: PPUSH
55372: LD_OWVAR 2
55376: PPUSH
55377: LD_INT 2
55379: PPUSH
55380: CALL_OW 322
// end ;
55384: PPOPN 3
55386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55387: LD_EXP 28
55391: PUSH
55392: LD_EXP 71
55396: AND
55397: IFFALSE 55508
55399: GO 55401
55401: DISABLE
55402: LD_INT 0
55404: PPUSH
55405: PPUSH
55406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55407: LD_ADDR_VAR 0 3
55411: PUSH
55412: LD_INT 22
55414: PUSH
55415: LD_OWVAR 2
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 25
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PPUSH
55438: CALL_OW 69
55442: ST_TO_ADDR
// if not tmp then
55443: LD_VAR 0 3
55447: NOT
55448: IFFALSE 55452
// exit ;
55450: GO 55508
// un := tmp [ rand ( 1 , tmp ) ] ;
55452: LD_ADDR_VAR 0 2
55456: PUSH
55457: LD_VAR 0 3
55461: PUSH
55462: LD_INT 1
55464: PPUSH
55465: LD_VAR 0 3
55469: PPUSH
55470: CALL_OW 12
55474: ARRAY
55475: ST_TO_ADDR
// if Crawls ( un ) then
55476: LD_VAR 0 2
55480: PPUSH
55481: CALL_OW 318
55485: IFFALSE 55496
// ComWalk ( un ) ;
55487: LD_VAR 0 2
55491: PPUSH
55492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55496: LD_VAR 0 2
55500: PPUSH
55501: LD_INT 8
55503: PPUSH
55504: CALL_OW 336
// end ;
55508: PPOPN 3
55510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55511: LD_EXP 28
55515: PUSH
55516: LD_EXP 72
55520: AND
55521: IFFALSE 55665
55523: GO 55525
55525: DISABLE
55526: LD_INT 0
55528: PPUSH
55529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55530: LD_ADDR_VAR 0 2
55534: PUSH
55535: LD_INT 22
55537: PUSH
55538: LD_OWVAR 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 21
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 34
55562: PUSH
55563: LD_INT 12
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 34
55572: PUSH
55573: LD_INT 51
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 34
55582: PUSH
55583: LD_INT 32
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: LIST
55600: PPUSH
55601: CALL_OW 69
55605: ST_TO_ADDR
// if not tmp then
55606: LD_VAR 0 2
55610: NOT
55611: IFFALSE 55615
// exit ;
55613: GO 55665
// for i in tmp do
55615: LD_ADDR_VAR 0 1
55619: PUSH
55620: LD_VAR 0 2
55624: PUSH
55625: FOR_IN
55626: IFFALSE 55663
// if GetCargo ( i , mat_artifact ) = 0 then
55628: LD_VAR 0 1
55632: PPUSH
55633: LD_INT 4
55635: PPUSH
55636: CALL_OW 289
55640: PUSH
55641: LD_INT 0
55643: EQUAL
55644: IFFALSE 55661
// SetCargo ( i , mat_siberit , 100 ) ;
55646: LD_VAR 0 1
55650: PPUSH
55651: LD_INT 3
55653: PPUSH
55654: LD_INT 100
55656: PPUSH
55657: CALL_OW 290
55661: GO 55625
55663: POP
55664: POP
// end ;
55665: PPOPN 2
55667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55668: LD_EXP 28
55672: PUSH
55673: LD_EXP 73
55677: AND
55678: IFFALSE 55861
55680: GO 55682
55682: DISABLE
55683: LD_INT 0
55685: PPUSH
55686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55687: LD_ADDR_VAR 0 2
55691: PUSH
55692: LD_INT 22
55694: PUSH
55695: LD_OWVAR 2
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PPUSH
55704: CALL_OW 69
55708: ST_TO_ADDR
// if not tmp then
55709: LD_VAR 0 2
55713: NOT
55714: IFFALSE 55718
// exit ;
55716: GO 55861
// for i := 1 to 2 do
55718: LD_ADDR_VAR 0 1
55722: PUSH
55723: DOUBLE
55724: LD_INT 1
55726: DEC
55727: ST_TO_ADDR
55728: LD_INT 2
55730: PUSH
55731: FOR_TO
55732: IFFALSE 55859
// begin uc_side := your_side ;
55734: LD_ADDR_OWVAR 20
55738: PUSH
55739: LD_OWVAR 2
55743: ST_TO_ADDR
// uc_nation := nation_american ;
55744: LD_ADDR_OWVAR 21
55748: PUSH
55749: LD_INT 1
55751: ST_TO_ADDR
// vc_chassis := us_morphling ;
55752: LD_ADDR_OWVAR 37
55756: PUSH
55757: LD_INT 5
55759: ST_TO_ADDR
// vc_engine := engine_siberite ;
55760: LD_ADDR_OWVAR 39
55764: PUSH
55765: LD_INT 3
55767: ST_TO_ADDR
// vc_control := control_computer ;
55768: LD_ADDR_OWVAR 38
55772: PUSH
55773: LD_INT 3
55775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55776: LD_ADDR_OWVAR 40
55780: PUSH
55781: LD_INT 10
55783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55784: LD_VAR 0 2
55788: PUSH
55789: LD_INT 1
55791: ARRAY
55792: PPUSH
55793: CALL_OW 310
55797: NOT
55798: IFFALSE 55845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55800: CALL_OW 45
55804: PPUSH
55805: LD_VAR 0 2
55809: PUSH
55810: LD_INT 1
55812: ARRAY
55813: PPUSH
55814: CALL_OW 250
55818: PPUSH
55819: LD_VAR 0 2
55823: PUSH
55824: LD_INT 1
55826: ARRAY
55827: PPUSH
55828: CALL_OW 251
55832: PPUSH
55833: LD_INT 12
55835: PPUSH
55836: LD_INT 1
55838: PPUSH
55839: CALL_OW 50
55843: GO 55857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55845: CALL_OW 45
55849: PPUSH
55850: LD_INT 1
55852: PPUSH
55853: CALL_OW 51
// end ;
55857: GO 55731
55859: POP
55860: POP
// end ;
55861: PPOPN 2
55863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55864: LD_EXP 28
55868: PUSH
55869: LD_EXP 74
55873: AND
55874: IFFALSE 56096
55876: GO 55878
55878: DISABLE
55879: LD_INT 0
55881: PPUSH
55882: PPUSH
55883: PPUSH
55884: PPUSH
55885: PPUSH
55886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55887: LD_ADDR_VAR 0 6
55891: PUSH
55892: LD_INT 22
55894: PUSH
55895: LD_OWVAR 2
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 21
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: PUSH
55917: LD_INT 23
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: PPUSH
55936: CALL_OW 69
55940: ST_TO_ADDR
// if not tmp then
55941: LD_VAR 0 6
55945: NOT
55946: IFFALSE 55950
// exit ;
55948: GO 56096
// s1 := rand ( 1 , 4 ) ;
55950: LD_ADDR_VAR 0 2
55954: PUSH
55955: LD_INT 1
55957: PPUSH
55958: LD_INT 4
55960: PPUSH
55961: CALL_OW 12
55965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55966: LD_ADDR_VAR 0 4
55970: PUSH
55971: LD_VAR 0 6
55975: PUSH
55976: LD_INT 1
55978: ARRAY
55979: PPUSH
55980: LD_VAR 0 2
55984: PPUSH
55985: CALL_OW 259
55989: ST_TO_ADDR
// if s1 = 1 then
55990: LD_VAR 0 2
55994: PUSH
55995: LD_INT 1
55997: EQUAL
55998: IFFALSE 56018
// s2 := rand ( 2 , 4 ) else
56000: LD_ADDR_VAR 0 3
56004: PUSH
56005: LD_INT 2
56007: PPUSH
56008: LD_INT 4
56010: PPUSH
56011: CALL_OW 12
56015: ST_TO_ADDR
56016: GO 56026
// s2 := 1 ;
56018: LD_ADDR_VAR 0 3
56022: PUSH
56023: LD_INT 1
56025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56026: LD_ADDR_VAR 0 5
56030: PUSH
56031: LD_VAR 0 6
56035: PUSH
56036: LD_INT 1
56038: ARRAY
56039: PPUSH
56040: LD_VAR 0 3
56044: PPUSH
56045: CALL_OW 259
56049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56050: LD_VAR 0 6
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PPUSH
56059: LD_VAR 0 2
56063: PPUSH
56064: LD_VAR 0 5
56068: PPUSH
56069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56073: LD_VAR 0 6
56077: PUSH
56078: LD_INT 1
56080: ARRAY
56081: PPUSH
56082: LD_VAR 0 3
56086: PPUSH
56087: LD_VAR 0 4
56091: PPUSH
56092: CALL_OW 237
// end ;
56096: PPOPN 6
56098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56099: LD_EXP 28
56103: PUSH
56104: LD_EXP 75
56108: AND
56109: IFFALSE 56188
56111: GO 56113
56113: DISABLE
56114: LD_INT 0
56116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56117: LD_ADDR_VAR 0 1
56121: PUSH
56122: LD_INT 22
56124: PUSH
56125: LD_OWVAR 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 30
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PPUSH
56148: CALL_OW 69
56152: ST_TO_ADDR
// if not tmp then
56153: LD_VAR 0 1
56157: NOT
56158: IFFALSE 56162
// exit ;
56160: GO 56188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56162: LD_VAR 0 1
56166: PUSH
56167: LD_INT 1
56169: PPUSH
56170: LD_VAR 0 1
56174: PPUSH
56175: CALL_OW 12
56179: ARRAY
56180: PPUSH
56181: LD_INT 1
56183: PPUSH
56184: CALL_OW 234
// end ;
56188: PPOPN 1
56190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56191: LD_EXP 28
56195: PUSH
56196: LD_EXP 76
56200: AND
56201: IFFALSE 56313
56203: GO 56205
56205: DISABLE
56206: LD_INT 0
56208: PPUSH
56209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56210: LD_ADDR_VAR 0 2
56214: PUSH
56215: LD_INT 22
56217: PUSH
56218: LD_OWVAR 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 30
56232: PUSH
56233: LD_INT 27
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 30
56242: PUSH
56243: LD_INT 26
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 30
56252: PUSH
56253: LD_INT 28
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PPUSH
56270: CALL_OW 69
56274: ST_TO_ADDR
// if not tmp then
56275: LD_VAR 0 2
56279: NOT
56280: IFFALSE 56284
// exit ;
56282: GO 56313
// for i in tmp do
56284: LD_ADDR_VAR 0 1
56288: PUSH
56289: LD_VAR 0 2
56293: PUSH
56294: FOR_IN
56295: IFFALSE 56311
// SetLives ( i , 1 ) ;
56297: LD_VAR 0 1
56301: PPUSH
56302: LD_INT 1
56304: PPUSH
56305: CALL_OW 234
56309: GO 56294
56311: POP
56312: POP
// end ;
56313: PPOPN 2
56315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56316: LD_EXP 28
56320: PUSH
56321: LD_EXP 77
56325: AND
56326: IFFALSE 56600
56328: GO 56330
56330: DISABLE
56331: LD_INT 0
56333: PPUSH
56334: PPUSH
56335: PPUSH
// begin i := rand ( 1 , 7 ) ;
56336: LD_ADDR_VAR 0 1
56340: PUSH
56341: LD_INT 1
56343: PPUSH
56344: LD_INT 7
56346: PPUSH
56347: CALL_OW 12
56351: ST_TO_ADDR
// case i of 1 :
56352: LD_VAR 0 1
56356: PUSH
56357: LD_INT 1
56359: DOUBLE
56360: EQUAL
56361: IFTRUE 56365
56363: GO 56375
56365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56366: LD_STRING earthquake(getX(game), 0, 32)
56368: PPUSH
56369: CALL_OW 559
56373: GO 56600
56375: LD_INT 2
56377: DOUBLE
56378: EQUAL
56379: IFTRUE 56383
56381: GO 56397
56383: POP
// begin ToLua ( displayStucuk(); ) ;
56384: LD_STRING displayStucuk();
56386: PPUSH
56387: CALL_OW 559
// ResetFog ;
56391: CALL_OW 335
// end ; 3 :
56395: GO 56600
56397: LD_INT 3
56399: DOUBLE
56400: EQUAL
56401: IFTRUE 56405
56403: GO 56509
56405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56406: LD_ADDR_VAR 0 2
56410: PUSH
56411: LD_INT 22
56413: PUSH
56414: LD_OWVAR 2
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 25
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PPUSH
56437: CALL_OW 69
56441: ST_TO_ADDR
// if not tmp then
56442: LD_VAR 0 2
56446: NOT
56447: IFFALSE 56451
// exit ;
56449: GO 56600
// un := tmp [ rand ( 1 , tmp ) ] ;
56451: LD_ADDR_VAR 0 3
56455: PUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_INT 1
56463: PPUSH
56464: LD_VAR 0 2
56468: PPUSH
56469: CALL_OW 12
56473: ARRAY
56474: ST_TO_ADDR
// if Crawls ( un ) then
56475: LD_VAR 0 3
56479: PPUSH
56480: CALL_OW 318
56484: IFFALSE 56495
// ComWalk ( un ) ;
56486: LD_VAR 0 3
56490: PPUSH
56491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56495: LD_VAR 0 3
56499: PPUSH
56500: LD_INT 8
56502: PPUSH
56503: CALL_OW 336
// end ; 4 :
56507: GO 56600
56509: LD_INT 4
56511: DOUBLE
56512: EQUAL
56513: IFTRUE 56517
56515: GO 56578
56517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56518: LD_ADDR_VAR 0 2
56522: PUSH
56523: LD_INT 22
56525: PUSH
56526: LD_OWVAR 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 30
56537: PUSH
56538: LD_INT 29
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PPUSH
56549: CALL_OW 69
56553: ST_TO_ADDR
// if not tmp then
56554: LD_VAR 0 2
56558: NOT
56559: IFFALSE 56563
// exit ;
56561: GO 56600
// DestroyUnit ( tmp [ 1 ] ) ;
56563: LD_VAR 0 2
56567: PUSH
56568: LD_INT 1
56570: ARRAY
56571: PPUSH
56572: CALL_OW 65
// end ; 5 .. 7 :
56576: GO 56600
56578: LD_INT 5
56580: DOUBLE
56581: GREATEREQUAL
56582: IFFALSE 56590
56584: LD_INT 7
56586: DOUBLE
56587: LESSEQUAL
56588: IFTRUE 56592
56590: GO 56599
56592: POP
// StreamSibBomb ; end ;
56593: CALL 52850 0 0
56597: GO 56600
56599: POP
// end ;
56600: PPOPN 3
56602: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56603: LD_EXP 28
56607: PUSH
56608: LD_EXP 78
56612: AND
56613: IFFALSE 56769
56615: GO 56617
56617: DISABLE
56618: LD_INT 0
56620: PPUSH
56621: PPUSH
56622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56623: LD_ADDR_VAR 0 2
56627: PUSH
56628: LD_INT 81
56630: PUSH
56631: LD_OWVAR 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: LD_INT 21
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 21
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PPUSH
56672: CALL_OW 69
56676: ST_TO_ADDR
// if not tmp then
56677: LD_VAR 0 2
56681: NOT
56682: IFFALSE 56686
// exit ;
56684: GO 56769
// p := 0 ;
56686: LD_ADDR_VAR 0 3
56690: PUSH
56691: LD_INT 0
56693: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56694: LD_INT 35
56696: PPUSH
56697: CALL_OW 67
// p := p + 1 ;
56701: LD_ADDR_VAR 0 3
56705: PUSH
56706: LD_VAR 0 3
56710: PUSH
56711: LD_INT 1
56713: PLUS
56714: ST_TO_ADDR
// for i in tmp do
56715: LD_ADDR_VAR 0 1
56719: PUSH
56720: LD_VAR 0 2
56724: PUSH
56725: FOR_IN
56726: IFFALSE 56757
// if GetLives ( i ) < 1000 then
56728: LD_VAR 0 1
56732: PPUSH
56733: CALL_OW 256
56737: PUSH
56738: LD_INT 1000
56740: LESS
56741: IFFALSE 56755
// SetLives ( i , 1000 ) ;
56743: LD_VAR 0 1
56747: PPUSH
56748: LD_INT 1000
56750: PPUSH
56751: CALL_OW 234
56755: GO 56725
56757: POP
56758: POP
// until p > 20 ;
56759: LD_VAR 0 3
56763: PUSH
56764: LD_INT 20
56766: GREATER
56767: IFFALSE 56694
// end ;
56769: PPOPN 3
56771: END
// every 0 0$1 trigger StreamModeActive and sTime do
56772: LD_EXP 28
56776: PUSH
56777: LD_EXP 79
56781: AND
56782: IFFALSE 56817
56784: GO 56786
56786: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56787: LD_INT 28
56789: PPUSH
56790: LD_OWVAR 2
56794: PPUSH
56795: LD_INT 2
56797: PPUSH
56798: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56802: LD_INT 30
56804: PPUSH
56805: LD_OWVAR 2
56809: PPUSH
56810: LD_INT 2
56812: PPUSH
56813: CALL_OW 322
// end ;
56817: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56818: LD_EXP 28
56822: PUSH
56823: LD_EXP 80
56827: AND
56828: IFFALSE 56949
56830: GO 56832
56832: DISABLE
56833: LD_INT 0
56835: PPUSH
56836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56837: LD_ADDR_VAR 0 2
56841: PUSH
56842: LD_INT 22
56844: PUSH
56845: LD_OWVAR 2
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 21
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 3
56866: PUSH
56867: LD_INT 23
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: PPUSH
56886: CALL_OW 69
56890: ST_TO_ADDR
// if not tmp then
56891: LD_VAR 0 2
56895: NOT
56896: IFFALSE 56900
// exit ;
56898: GO 56949
// for i in tmp do
56900: LD_ADDR_VAR 0 1
56904: PUSH
56905: LD_VAR 0 2
56909: PUSH
56910: FOR_IN
56911: IFFALSE 56947
// begin if Crawls ( i ) then
56913: LD_VAR 0 1
56917: PPUSH
56918: CALL_OW 318
56922: IFFALSE 56933
// ComWalk ( i ) ;
56924: LD_VAR 0 1
56928: PPUSH
56929: CALL_OW 138
// SetClass ( i , 2 ) ;
56933: LD_VAR 0 1
56937: PPUSH
56938: LD_INT 2
56940: PPUSH
56941: CALL_OW 336
// end ;
56945: GO 56910
56947: POP
56948: POP
// end ;
56949: PPOPN 2
56951: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56952: LD_EXP 28
56956: PUSH
56957: LD_EXP 81
56961: AND
56962: IFFALSE 57243
56964: GO 56966
56966: DISABLE
56967: LD_INT 0
56969: PPUSH
56970: PPUSH
56971: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56972: LD_OWVAR 2
56976: PPUSH
56977: LD_INT 9
56979: PPUSH
56980: LD_INT 1
56982: PPUSH
56983: LD_INT 1
56985: PPUSH
56986: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56990: LD_INT 9
56992: PPUSH
56993: LD_OWVAR 2
56997: PPUSH
56998: CALL_OW 343
// uc_side := 9 ;
57002: LD_ADDR_OWVAR 20
57006: PUSH
57007: LD_INT 9
57009: ST_TO_ADDR
// uc_nation := 2 ;
57010: LD_ADDR_OWVAR 21
57014: PUSH
57015: LD_INT 2
57017: ST_TO_ADDR
// hc_name := Dark Warrior ;
57018: LD_ADDR_OWVAR 26
57022: PUSH
57023: LD_STRING Dark Warrior
57025: ST_TO_ADDR
// hc_gallery :=  ;
57026: LD_ADDR_OWVAR 33
57030: PUSH
57031: LD_STRING 
57033: ST_TO_ADDR
// hc_noskilllimit := true ;
57034: LD_ADDR_OWVAR 76
57038: PUSH
57039: LD_INT 1
57041: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57042: LD_ADDR_OWVAR 31
57046: PUSH
57047: LD_INT 30
57049: PUSH
57050: LD_INT 30
57052: PUSH
57053: LD_INT 30
57055: PUSH
57056: LD_INT 30
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// un := CreateHuman ;
57065: LD_ADDR_VAR 0 3
57069: PUSH
57070: CALL_OW 44
57074: ST_TO_ADDR
// hc_noskilllimit := false ;
57075: LD_ADDR_OWVAR 76
57079: PUSH
57080: LD_INT 0
57082: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57083: LD_VAR 0 3
57087: PPUSH
57088: LD_INT 1
57090: PPUSH
57091: CALL_OW 51
// p := 0 ;
57095: LD_ADDR_VAR 0 2
57099: PUSH
57100: LD_INT 0
57102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57103: LD_INT 35
57105: PPUSH
57106: CALL_OW 67
// p := p + 1 ;
57110: LD_ADDR_VAR 0 2
57114: PUSH
57115: LD_VAR 0 2
57119: PUSH
57120: LD_INT 1
57122: PLUS
57123: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57124: LD_VAR 0 3
57128: PPUSH
57129: CALL_OW 256
57133: PUSH
57134: LD_INT 1000
57136: LESS
57137: IFFALSE 57151
// SetLives ( un , 1000 ) ;
57139: LD_VAR 0 3
57143: PPUSH
57144: LD_INT 1000
57146: PPUSH
57147: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57151: LD_VAR 0 3
57155: PPUSH
57156: LD_INT 81
57158: PUSH
57159: LD_OWVAR 2
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 91
57170: PUSH
57171: LD_VAR 0 3
57175: PUSH
57176: LD_INT 30
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PPUSH
57188: CALL_OW 69
57192: PPUSH
57193: LD_VAR 0 3
57197: PPUSH
57198: CALL_OW 74
57202: PPUSH
57203: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
57207: LD_VAR 0 2
57211: PUSH
57212: LD_INT 60
57214: GREATER
57215: PUSH
57216: LD_VAR 0 3
57220: PPUSH
57221: CALL_OW 301
57225: OR
57226: IFFALSE 57103
// if un then
57228: LD_VAR 0 3
57232: IFFALSE 57243
// RemoveUnit ( un ) ;
57234: LD_VAR 0 3
57238: PPUSH
57239: CALL_OW 64
// end ;
57243: PPOPN 3
57245: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57246: LD_INT 0
57248: PPUSH
// case cmd of 301 :
57249: LD_VAR 0 1
57253: PUSH
57254: LD_INT 301
57256: DOUBLE
57257: EQUAL
57258: IFTRUE 57262
57260: GO 57294
57262: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57263: LD_VAR 0 6
57267: PPUSH
57268: LD_VAR 0 7
57272: PPUSH
57273: LD_VAR 0 8
57277: PPUSH
57278: LD_VAR 0 4
57282: PPUSH
57283: LD_VAR 0 5
57287: PPUSH
57288: CALL 58495 0 5
57292: GO 57415
57294: LD_INT 302
57296: DOUBLE
57297: EQUAL
57298: IFTRUE 57302
57300: GO 57339
57302: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57303: LD_VAR 0 6
57307: PPUSH
57308: LD_VAR 0 7
57312: PPUSH
57313: LD_VAR 0 8
57317: PPUSH
57318: LD_VAR 0 9
57322: PPUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: LD_VAR 0 5
57332: PPUSH
57333: CALL 58586 0 6
57337: GO 57415
57339: LD_INT 303
57341: DOUBLE
57342: EQUAL
57343: IFTRUE 57347
57345: GO 57384
57347: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57348: LD_VAR 0 6
57352: PPUSH
57353: LD_VAR 0 7
57357: PPUSH
57358: LD_VAR 0 8
57362: PPUSH
57363: LD_VAR 0 9
57367: PPUSH
57368: LD_VAR 0 4
57372: PPUSH
57373: LD_VAR 0 5
57377: PPUSH
57378: CALL 57420 0 6
57382: GO 57415
57384: LD_INT 304
57386: DOUBLE
57387: EQUAL
57388: IFTRUE 57392
57390: GO 57414
57392: POP
// hHackTeleport ( unit , x , y ) ; end ;
57393: LD_VAR 0 2
57397: PPUSH
57398: LD_VAR 0 4
57402: PPUSH
57403: LD_VAR 0 5
57407: PPUSH
57408: CALL 59179 0 3
57412: GO 57415
57414: POP
// end ;
57415: LD_VAR 0 12
57419: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57420: LD_INT 0
57422: PPUSH
57423: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57424: LD_VAR 0 1
57428: PUSH
57429: LD_INT 1
57431: LESS
57432: PUSH
57433: LD_VAR 0 1
57437: PUSH
57438: LD_INT 3
57440: GREATER
57441: OR
57442: PUSH
57443: LD_VAR 0 5
57447: PPUSH
57448: LD_VAR 0 6
57452: PPUSH
57453: CALL_OW 428
57457: OR
57458: IFFALSE 57462
// exit ;
57460: GO 58182
// uc_side := your_side ;
57462: LD_ADDR_OWVAR 20
57466: PUSH
57467: LD_OWVAR 2
57471: ST_TO_ADDR
// uc_nation := nation ;
57472: LD_ADDR_OWVAR 21
57476: PUSH
57477: LD_VAR 0 1
57481: ST_TO_ADDR
// bc_level = 1 ;
57482: LD_ADDR_OWVAR 43
57486: PUSH
57487: LD_INT 1
57489: ST_TO_ADDR
// case btype of 1 :
57490: LD_VAR 0 2
57494: PUSH
57495: LD_INT 1
57497: DOUBLE
57498: EQUAL
57499: IFTRUE 57503
57501: GO 57514
57503: POP
// bc_type := b_depot ; 2 :
57504: LD_ADDR_OWVAR 42
57508: PUSH
57509: LD_INT 0
57511: ST_TO_ADDR
57512: GO 58126
57514: LD_INT 2
57516: DOUBLE
57517: EQUAL
57518: IFTRUE 57522
57520: GO 57533
57522: POP
// bc_type := b_warehouse ; 3 :
57523: LD_ADDR_OWVAR 42
57527: PUSH
57528: LD_INT 1
57530: ST_TO_ADDR
57531: GO 58126
57533: LD_INT 3
57535: DOUBLE
57536: EQUAL
57537: IFTRUE 57541
57539: GO 57552
57541: POP
// bc_type := b_lab ; 4 .. 9 :
57542: LD_ADDR_OWVAR 42
57546: PUSH
57547: LD_INT 6
57549: ST_TO_ADDR
57550: GO 58126
57552: LD_INT 4
57554: DOUBLE
57555: GREATEREQUAL
57556: IFFALSE 57564
57558: LD_INT 9
57560: DOUBLE
57561: LESSEQUAL
57562: IFTRUE 57566
57564: GO 57618
57566: POP
// begin bc_type := b_lab_half ;
57567: LD_ADDR_OWVAR 42
57571: PUSH
57572: LD_INT 7
57574: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57575: LD_ADDR_OWVAR 44
57579: PUSH
57580: LD_INT 10
57582: PUSH
57583: LD_INT 11
57585: PUSH
57586: LD_INT 12
57588: PUSH
57589: LD_INT 15
57591: PUSH
57592: LD_INT 14
57594: PUSH
57595: LD_INT 13
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: PUSH
57606: LD_VAR 0 2
57610: PUSH
57611: LD_INT 3
57613: MINUS
57614: ARRAY
57615: ST_TO_ADDR
// end ; 10 .. 13 :
57616: GO 58126
57618: LD_INT 10
57620: DOUBLE
57621: GREATEREQUAL
57622: IFFALSE 57630
57624: LD_INT 13
57626: DOUBLE
57627: LESSEQUAL
57628: IFTRUE 57632
57630: GO 57709
57632: POP
// begin bc_type := b_lab_full ;
57633: LD_ADDR_OWVAR 42
57637: PUSH
57638: LD_INT 8
57640: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57641: LD_ADDR_OWVAR 44
57645: PUSH
57646: LD_INT 10
57648: PUSH
57649: LD_INT 12
57651: PUSH
57652: LD_INT 14
57654: PUSH
57655: LD_INT 13
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 9
57671: MINUS
57672: ARRAY
57673: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57674: LD_ADDR_OWVAR 45
57678: PUSH
57679: LD_INT 11
57681: PUSH
57682: LD_INT 15
57684: PUSH
57685: LD_INT 12
57687: PUSH
57688: LD_INT 15
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: PUSH
57697: LD_VAR 0 2
57701: PUSH
57702: LD_INT 9
57704: MINUS
57705: ARRAY
57706: ST_TO_ADDR
// end ; 14 :
57707: GO 58126
57709: LD_INT 14
57711: DOUBLE
57712: EQUAL
57713: IFTRUE 57717
57715: GO 57728
57717: POP
// bc_type := b_workshop ; 15 :
57718: LD_ADDR_OWVAR 42
57722: PUSH
57723: LD_INT 2
57725: ST_TO_ADDR
57726: GO 58126
57728: LD_INT 15
57730: DOUBLE
57731: EQUAL
57732: IFTRUE 57736
57734: GO 57747
57736: POP
// bc_type := b_factory ; 16 :
57737: LD_ADDR_OWVAR 42
57741: PUSH
57742: LD_INT 3
57744: ST_TO_ADDR
57745: GO 58126
57747: LD_INT 16
57749: DOUBLE
57750: EQUAL
57751: IFTRUE 57755
57753: GO 57766
57755: POP
// bc_type := b_ext_gun ; 17 :
57756: LD_ADDR_OWVAR 42
57760: PUSH
57761: LD_INT 17
57763: ST_TO_ADDR
57764: GO 58126
57766: LD_INT 17
57768: DOUBLE
57769: EQUAL
57770: IFTRUE 57774
57772: GO 57802
57774: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57775: LD_ADDR_OWVAR 42
57779: PUSH
57780: LD_INT 19
57782: PUSH
57783: LD_INT 23
57785: PUSH
57786: LD_INT 19
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: LD_VAR 0 1
57798: ARRAY
57799: ST_TO_ADDR
57800: GO 58126
57802: LD_INT 18
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57810
57808: GO 57821
57810: POP
// bc_type := b_ext_radar ; 19 :
57811: LD_ADDR_OWVAR 42
57815: PUSH
57816: LD_INT 20
57818: ST_TO_ADDR
57819: GO 58126
57821: LD_INT 19
57823: DOUBLE
57824: EQUAL
57825: IFTRUE 57829
57827: GO 57840
57829: POP
// bc_type := b_ext_radio ; 20 :
57830: LD_ADDR_OWVAR 42
57834: PUSH
57835: LD_INT 22
57837: ST_TO_ADDR
57838: GO 58126
57840: LD_INT 20
57842: DOUBLE
57843: EQUAL
57844: IFTRUE 57848
57846: GO 57859
57848: POP
// bc_type := b_ext_siberium ; 21 :
57849: LD_ADDR_OWVAR 42
57853: PUSH
57854: LD_INT 21
57856: ST_TO_ADDR
57857: GO 58126
57859: LD_INT 21
57861: DOUBLE
57862: EQUAL
57863: IFTRUE 57867
57865: GO 57878
57867: POP
// bc_type := b_ext_computer ; 22 :
57868: LD_ADDR_OWVAR 42
57872: PUSH
57873: LD_INT 24
57875: ST_TO_ADDR
57876: GO 58126
57878: LD_INT 22
57880: DOUBLE
57881: EQUAL
57882: IFTRUE 57886
57884: GO 57897
57886: POP
// bc_type := b_ext_track ; 23 :
57887: LD_ADDR_OWVAR 42
57891: PUSH
57892: LD_INT 16
57894: ST_TO_ADDR
57895: GO 58126
57897: LD_INT 23
57899: DOUBLE
57900: EQUAL
57901: IFTRUE 57905
57903: GO 57916
57905: POP
// bc_type := b_ext_laser ; 24 :
57906: LD_ADDR_OWVAR 42
57910: PUSH
57911: LD_INT 25
57913: ST_TO_ADDR
57914: GO 58126
57916: LD_INT 24
57918: DOUBLE
57919: EQUAL
57920: IFTRUE 57924
57922: GO 57935
57924: POP
// bc_type := b_control_tower ; 25 :
57925: LD_ADDR_OWVAR 42
57929: PUSH
57930: LD_INT 36
57932: ST_TO_ADDR
57933: GO 58126
57935: LD_INT 25
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57943
57941: GO 57954
57943: POP
// bc_type := b_breastwork ; 26 :
57944: LD_ADDR_OWVAR 42
57948: PUSH
57949: LD_INT 31
57951: ST_TO_ADDR
57952: GO 58126
57954: LD_INT 26
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 57962
57960: GO 57973
57962: POP
// bc_type := b_bunker ; 27 :
57963: LD_ADDR_OWVAR 42
57967: PUSH
57968: LD_INT 32
57970: ST_TO_ADDR
57971: GO 58126
57973: LD_INT 27
57975: DOUBLE
57976: EQUAL
57977: IFTRUE 57981
57979: GO 57992
57981: POP
// bc_type := b_turret ; 28 :
57982: LD_ADDR_OWVAR 42
57986: PUSH
57987: LD_INT 33
57989: ST_TO_ADDR
57990: GO 58126
57992: LD_INT 28
57994: DOUBLE
57995: EQUAL
57996: IFTRUE 58000
57998: GO 58011
58000: POP
// bc_type := b_armoury ; 29 :
58001: LD_ADDR_OWVAR 42
58005: PUSH
58006: LD_INT 4
58008: ST_TO_ADDR
58009: GO 58126
58011: LD_INT 29
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58019
58017: GO 58030
58019: POP
// bc_type := b_barracks ; 30 :
58020: LD_ADDR_OWVAR 42
58024: PUSH
58025: LD_INT 5
58027: ST_TO_ADDR
58028: GO 58126
58030: LD_INT 30
58032: DOUBLE
58033: EQUAL
58034: IFTRUE 58038
58036: GO 58049
58038: POP
// bc_type := b_solar_power ; 31 :
58039: LD_ADDR_OWVAR 42
58043: PUSH
58044: LD_INT 27
58046: ST_TO_ADDR
58047: GO 58126
58049: LD_INT 31
58051: DOUBLE
58052: EQUAL
58053: IFTRUE 58057
58055: GO 58068
58057: POP
// bc_type := b_oil_power ; 32 :
58058: LD_ADDR_OWVAR 42
58062: PUSH
58063: LD_INT 26
58065: ST_TO_ADDR
58066: GO 58126
58068: LD_INT 32
58070: DOUBLE
58071: EQUAL
58072: IFTRUE 58076
58074: GO 58087
58076: POP
// bc_type := b_siberite_power ; 33 :
58077: LD_ADDR_OWVAR 42
58081: PUSH
58082: LD_INT 28
58084: ST_TO_ADDR
58085: GO 58126
58087: LD_INT 33
58089: DOUBLE
58090: EQUAL
58091: IFTRUE 58095
58093: GO 58106
58095: POP
// bc_type := b_oil_mine ; 34 :
58096: LD_ADDR_OWVAR 42
58100: PUSH
58101: LD_INT 29
58103: ST_TO_ADDR
58104: GO 58126
58106: LD_INT 34
58108: DOUBLE
58109: EQUAL
58110: IFTRUE 58114
58112: GO 58125
58114: POP
// bc_type := b_siberite_mine ; end ;
58115: LD_ADDR_OWVAR 42
58119: PUSH
58120: LD_INT 30
58122: ST_TO_ADDR
58123: GO 58126
58125: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58126: LD_ADDR_VAR 0 8
58130: PUSH
58131: LD_VAR 0 5
58135: PPUSH
58136: LD_VAR 0 6
58140: PPUSH
58141: LD_VAR 0 3
58145: PPUSH
58146: CALL_OW 47
58150: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58151: LD_OWVAR 42
58155: PUSH
58156: LD_INT 32
58158: PUSH
58159: LD_INT 33
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: IN
58166: IFFALSE 58182
// PlaceWeaponTurret ( b , weapon ) ;
58168: LD_VAR 0 8
58172: PPUSH
58173: LD_VAR 0 4
58177: PPUSH
58178: CALL_OW 431
// end ;
58182: LD_VAR 0 7
58186: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58187: LD_INT 0
58189: PPUSH
58190: PPUSH
58191: PPUSH
58192: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58193: LD_ADDR_VAR 0 4
58197: PUSH
58198: LD_INT 22
58200: PUSH
58201: LD_OWVAR 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 30
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 30
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 69
58246: ST_TO_ADDR
// if not tmp then
58247: LD_VAR 0 4
58251: NOT
58252: IFFALSE 58256
// exit ;
58254: GO 58315
// for i in tmp do
58256: LD_ADDR_VAR 0 2
58260: PUSH
58261: LD_VAR 0 4
58265: PUSH
58266: FOR_IN
58267: IFFALSE 58313
// for j = 1 to 3 do
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: DOUBLE
58275: LD_INT 1
58277: DEC
58278: ST_TO_ADDR
58279: LD_INT 3
58281: PUSH
58282: FOR_TO
58283: IFFALSE 58309
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58285: LD_VAR 0 2
58289: PPUSH
58290: CALL_OW 274
58294: PPUSH
58295: LD_VAR 0 3
58299: PPUSH
58300: LD_INT 99999
58302: PPUSH
58303: CALL_OW 277
58307: GO 58282
58309: POP
58310: POP
58311: GO 58266
58313: POP
58314: POP
// end ;
58315: LD_VAR 0 1
58319: RET
// export function hHackSetLevel10 ; var i , j ; begin
58320: LD_INT 0
58322: PPUSH
58323: PPUSH
58324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58325: LD_ADDR_VAR 0 2
58329: PUSH
58330: LD_INT 21
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PPUSH
58340: CALL_OW 69
58344: PUSH
58345: FOR_IN
58346: IFFALSE 58398
// if IsSelected ( i ) then
58348: LD_VAR 0 2
58352: PPUSH
58353: CALL_OW 306
58357: IFFALSE 58396
// begin for j := 1 to 4 do
58359: LD_ADDR_VAR 0 3
58363: PUSH
58364: DOUBLE
58365: LD_INT 1
58367: DEC
58368: ST_TO_ADDR
58369: LD_INT 4
58371: PUSH
58372: FOR_TO
58373: IFFALSE 58394
// SetSkill ( i , j , 10 ) ;
58375: LD_VAR 0 2
58379: PPUSH
58380: LD_VAR 0 3
58384: PPUSH
58385: LD_INT 10
58387: PPUSH
58388: CALL_OW 237
58392: GO 58372
58394: POP
58395: POP
// end ;
58396: GO 58345
58398: POP
58399: POP
// end ;
58400: LD_VAR 0 1
58404: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
58409: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58410: LD_ADDR_VAR 0 2
58414: PUSH
58415: LD_INT 22
58417: PUSH
58418: LD_OWVAR 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 21
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PPUSH
58441: CALL_OW 69
58445: PUSH
58446: FOR_IN
58447: IFFALSE 58488
// begin for j := 1 to 4 do
58449: LD_ADDR_VAR 0 3
58453: PUSH
58454: DOUBLE
58455: LD_INT 1
58457: DEC
58458: ST_TO_ADDR
58459: LD_INT 4
58461: PUSH
58462: FOR_TO
58463: IFFALSE 58484
// SetSkill ( i , j , 10 ) ;
58465: LD_VAR 0 2
58469: PPUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: LD_INT 10
58477: PPUSH
58478: CALL_OW 237
58482: GO 58462
58484: POP
58485: POP
// end ;
58486: GO 58446
58488: POP
58489: POP
// end ;
58490: LD_VAR 0 1
58494: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58495: LD_INT 0
58497: PPUSH
// uc_side := your_side ;
58498: LD_ADDR_OWVAR 20
58502: PUSH
58503: LD_OWVAR 2
58507: ST_TO_ADDR
// uc_nation := nation ;
58508: LD_ADDR_OWVAR 21
58512: PUSH
58513: LD_VAR 0 1
58517: ST_TO_ADDR
// InitHc ;
58518: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58522: LD_INT 0
58524: PPUSH
58525: LD_VAR 0 2
58529: PPUSH
58530: LD_VAR 0 3
58534: PPUSH
58535: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58539: LD_VAR 0 4
58543: PPUSH
58544: LD_VAR 0 5
58548: PPUSH
58549: CALL_OW 428
58553: PUSH
58554: LD_INT 0
58556: EQUAL
58557: IFFALSE 58581
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58559: CALL_OW 44
58563: PPUSH
58564: LD_VAR 0 4
58568: PPUSH
58569: LD_VAR 0 5
58573: PPUSH
58574: LD_INT 1
58576: PPUSH
58577: CALL_OW 48
// end ;
58581: LD_VAR 0 6
58585: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58586: LD_INT 0
58588: PPUSH
58589: PPUSH
// uc_side := your_side ;
58590: LD_ADDR_OWVAR 20
58594: PUSH
58595: LD_OWVAR 2
58599: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58600: LD_VAR 0 1
58604: PUSH
58605: LD_INT 1
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: IN
58627: IFFALSE 58639
// uc_nation := nation_american else
58629: LD_ADDR_OWVAR 21
58633: PUSH
58634: LD_INT 1
58636: ST_TO_ADDR
58637: GO 58682
// if chassis in [ 11 , 12 , 13 , 14 ] then
58639: LD_VAR 0 1
58643: PUSH
58644: LD_INT 11
58646: PUSH
58647: LD_INT 12
58649: PUSH
58650: LD_INT 13
58652: PUSH
58653: LD_INT 14
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: IN
58662: IFFALSE 58674
// uc_nation := nation_arabian else
58664: LD_ADDR_OWVAR 21
58668: PUSH
58669: LD_INT 2
58671: ST_TO_ADDR
58672: GO 58682
// uc_nation := nation_russian ;
58674: LD_ADDR_OWVAR 21
58678: PUSH
58679: LD_INT 3
58681: ST_TO_ADDR
// vc_chassis := chassis ;
58682: LD_ADDR_OWVAR 37
58686: PUSH
58687: LD_VAR 0 1
58691: ST_TO_ADDR
// vc_engine := engine ;
58692: LD_ADDR_OWVAR 39
58696: PUSH
58697: LD_VAR 0 2
58701: ST_TO_ADDR
// vc_control := control ;
58702: LD_ADDR_OWVAR 38
58706: PUSH
58707: LD_VAR 0 3
58711: ST_TO_ADDR
// vc_weapon := weapon ;
58712: LD_ADDR_OWVAR 40
58716: PUSH
58717: LD_VAR 0 4
58721: ST_TO_ADDR
// un := CreateVehicle ;
58722: LD_ADDR_VAR 0 8
58726: PUSH
58727: CALL_OW 45
58731: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58732: LD_VAR 0 8
58736: PPUSH
58737: LD_INT 0
58739: PPUSH
58740: LD_INT 5
58742: PPUSH
58743: CALL_OW 12
58747: PPUSH
58748: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58752: LD_VAR 0 8
58756: PPUSH
58757: LD_VAR 0 5
58761: PPUSH
58762: LD_VAR 0 6
58766: PPUSH
58767: LD_INT 1
58769: PPUSH
58770: CALL_OW 48
// end ;
58774: LD_VAR 0 7
58778: RET
// export hInvincible ; every 1 do
58779: GO 58781
58781: DISABLE
// hInvincible := [ ] ;
58782: LD_ADDR_EXP 82
58786: PUSH
58787: EMPTY
58788: ST_TO_ADDR
58789: END
// every 10 do var i ;
58790: GO 58792
58792: DISABLE
58793: LD_INT 0
58795: PPUSH
// begin enable ;
58796: ENABLE
// if not hInvincible then
58797: LD_EXP 82
58801: NOT
58802: IFFALSE 58806
// exit ;
58804: GO 58850
// for i in hInvincible do
58806: LD_ADDR_VAR 0 1
58810: PUSH
58811: LD_EXP 82
58815: PUSH
58816: FOR_IN
58817: IFFALSE 58848
// if GetLives ( i ) < 1000 then
58819: LD_VAR 0 1
58823: PPUSH
58824: CALL_OW 256
58828: PUSH
58829: LD_INT 1000
58831: LESS
58832: IFFALSE 58846
// SetLives ( i , 1000 ) ;
58834: LD_VAR 0 1
58838: PPUSH
58839: LD_INT 1000
58841: PPUSH
58842: CALL_OW 234
58846: GO 58816
58848: POP
58849: POP
// end ;
58850: PPOPN 1
58852: END
// export function hHackInvincible ; var i ; begin
58853: LD_INT 0
58855: PPUSH
58856: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58857: LD_ADDR_VAR 0 2
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: LD_INT 21
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 21
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: LIST
58889: PPUSH
58890: CALL_OW 69
58894: PUSH
58895: FOR_IN
58896: IFFALSE 58957
// if IsSelected ( i ) then
58898: LD_VAR 0 2
58902: PPUSH
58903: CALL_OW 306
58907: IFFALSE 58955
// begin if i in hInvincible then
58909: LD_VAR 0 2
58913: PUSH
58914: LD_EXP 82
58918: IN
58919: IFFALSE 58939
// hInvincible := hInvincible diff i else
58921: LD_ADDR_EXP 82
58925: PUSH
58926: LD_EXP 82
58930: PUSH
58931: LD_VAR 0 2
58935: DIFF
58936: ST_TO_ADDR
58937: GO 58955
// hInvincible := hInvincible union i ;
58939: LD_ADDR_EXP 82
58943: PUSH
58944: LD_EXP 82
58948: PUSH
58949: LD_VAR 0 2
58953: UNION
58954: ST_TO_ADDR
// end ;
58955: GO 58895
58957: POP
58958: POP
// end ;
58959: LD_VAR 0 1
58963: RET
// export function hHackInvisible ; var i , j ; begin
58964: LD_INT 0
58966: PPUSH
58967: PPUSH
58968: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58969: LD_ADDR_VAR 0 2
58973: PUSH
58974: LD_INT 21
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PPUSH
58984: CALL_OW 69
58988: PUSH
58989: FOR_IN
58990: IFFALSE 59014
// if IsSelected ( i ) then
58992: LD_VAR 0 2
58996: PPUSH
58997: CALL_OW 306
59001: IFFALSE 59012
// ComForceInvisible ( i ) ;
59003: LD_VAR 0 2
59007: PPUSH
59008: CALL_OW 496
59012: GO 58989
59014: POP
59015: POP
// end ;
59016: LD_VAR 0 1
59020: RET
// export function hHackChangeYourSide ; begin
59021: LD_INT 0
59023: PPUSH
// if your_side = 8 then
59024: LD_OWVAR 2
59028: PUSH
59029: LD_INT 8
59031: EQUAL
59032: IFFALSE 59044
// your_side := 0 else
59034: LD_ADDR_OWVAR 2
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
59042: GO 59058
// your_side := your_side + 1 ;
59044: LD_ADDR_OWVAR 2
59048: PUSH
59049: LD_OWVAR 2
59053: PUSH
59054: LD_INT 1
59056: PLUS
59057: ST_TO_ADDR
// end ;
59058: LD_VAR 0 1
59062: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59063: LD_INT 0
59065: PPUSH
59066: PPUSH
59067: PPUSH
// for i in all_units do
59068: LD_ADDR_VAR 0 2
59072: PUSH
59073: LD_OWVAR 3
59077: PUSH
59078: FOR_IN
59079: IFFALSE 59157
// if IsSelected ( i ) then
59081: LD_VAR 0 2
59085: PPUSH
59086: CALL_OW 306
59090: IFFALSE 59155
// begin j := GetSide ( i ) ;
59092: LD_ADDR_VAR 0 3
59096: PUSH
59097: LD_VAR 0 2
59101: PPUSH
59102: CALL_OW 255
59106: ST_TO_ADDR
// if j = 8 then
59107: LD_VAR 0 3
59111: PUSH
59112: LD_INT 8
59114: EQUAL
59115: IFFALSE 59127
// j := 0 else
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_INT 0
59124: ST_TO_ADDR
59125: GO 59141
// j := j + 1 ;
59127: LD_ADDR_VAR 0 3
59131: PUSH
59132: LD_VAR 0 3
59136: PUSH
59137: LD_INT 1
59139: PLUS
59140: ST_TO_ADDR
// SetSide ( i , j ) ;
59141: LD_VAR 0 2
59145: PPUSH
59146: LD_VAR 0 3
59150: PPUSH
59151: CALL_OW 235
// end ;
59155: GO 59078
59157: POP
59158: POP
// end ;
59159: LD_VAR 0 1
59163: RET
// export function hHackFog ; begin
59164: LD_INT 0
59166: PPUSH
// FogOff ( true ) ;
59167: LD_INT 1
59169: PPUSH
59170: CALL_OW 344
// end ;
59174: LD_VAR 0 1
59178: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59179: LD_INT 0
59181: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59182: LD_VAR 0 1
59186: PPUSH
59187: LD_VAR 0 2
59191: PPUSH
59192: LD_VAR 0 3
59196: PPUSH
59197: LD_INT 1
59199: PPUSH
59200: LD_INT 1
59202: PPUSH
59203: CALL_OW 483
// CenterOnXY ( x , y ) ;
59207: LD_VAR 0 2
59211: PPUSH
59212: LD_VAR 0 3
59216: PPUSH
59217: CALL_OW 84
// end ; end_of_file
59221: LD_VAR 0 4
59225: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59226: LD_INT 0
59228: PPUSH
59229: PPUSH
59230: PPUSH
59231: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59232: LD_VAR 0 1
59236: PPUSH
59237: CALL_OW 264
59241: PUSH
59242: LD_EXP 99
59246: EQUAL
59247: IFFALSE 59319
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59249: LD_INT 68
59251: PPUSH
59252: LD_VAR 0 1
59256: PPUSH
59257: CALL_OW 255
59261: PPUSH
59262: CALL_OW 321
59266: PUSH
59267: LD_INT 2
59269: EQUAL
59270: IFFALSE 59282
// eff := 70 else
59272: LD_ADDR_VAR 0 4
59276: PUSH
59277: LD_INT 70
59279: ST_TO_ADDR
59280: GO 59290
// eff := 30 ;
59282: LD_ADDR_VAR 0 4
59286: PUSH
59287: LD_INT 30
59289: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59290: LD_VAR 0 1
59294: PPUSH
59295: CALL_OW 250
59299: PPUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: CALL_OW 251
59309: PPUSH
59310: LD_VAR 0 4
59314: PPUSH
59315: CALL_OW 495
// end ; end ;
59319: LD_VAR 0 2
59323: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59324: LD_INT 0
59326: PPUSH
// end ;
59327: LD_VAR 0 4
59331: RET
// export function SOS_Command ( cmd ) ; begin
59332: LD_INT 0
59334: PPUSH
// end ;
59335: LD_VAR 0 2
59339: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59340: LD_INT 0
59342: PPUSH
// if cmd = 121 then
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 121
59350: EQUAL
59351: IFFALSE 59353
// end ;
59353: LD_VAR 0 6
59357: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59358: LD_INT 0
59360: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59361: LD_VAR 0 1
59365: PUSH
59366: LD_INT 250
59368: EQUAL
59369: PUSH
59370: LD_VAR 0 2
59374: PPUSH
59375: CALL_OW 264
59379: PUSH
59380: LD_EXP 102
59384: EQUAL
59385: AND
59386: IFFALSE 59407
// MinerPlaceMine ( unit , x , y ) ;
59388: LD_VAR 0 2
59392: PPUSH
59393: LD_VAR 0 4
59397: PPUSH
59398: LD_VAR 0 5
59402: PPUSH
59403: CALL 61782 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59407: LD_VAR 0 1
59411: PUSH
59412: LD_INT 251
59414: EQUAL
59415: PUSH
59416: LD_VAR 0 2
59420: PPUSH
59421: CALL_OW 264
59425: PUSH
59426: LD_EXP 102
59430: EQUAL
59431: AND
59432: IFFALSE 59453
// MinerDetonateMine ( unit , x , y ) ;
59434: LD_VAR 0 2
59438: PPUSH
59439: LD_VAR 0 4
59443: PPUSH
59444: LD_VAR 0 5
59448: PPUSH
59449: CALL 62059 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59453: LD_VAR 0 1
59457: PUSH
59458: LD_INT 252
59460: EQUAL
59461: PUSH
59462: LD_VAR 0 2
59466: PPUSH
59467: CALL_OW 264
59471: PUSH
59472: LD_EXP 102
59476: EQUAL
59477: AND
59478: IFFALSE 59499
// MinerCreateMinefield ( unit , x , y ) ;
59480: LD_VAR 0 2
59484: PPUSH
59485: LD_VAR 0 4
59489: PPUSH
59490: LD_VAR 0 5
59494: PPUSH
59495: CALL 62476 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59499: LD_VAR 0 1
59503: PUSH
59504: LD_INT 253
59506: EQUAL
59507: PUSH
59508: LD_VAR 0 2
59512: PPUSH
59513: CALL_OW 257
59517: PUSH
59518: LD_INT 5
59520: EQUAL
59521: AND
59522: IFFALSE 59543
// ComBinocular ( unit , x , y ) ;
59524: LD_VAR 0 2
59528: PPUSH
59529: LD_VAR 0 4
59533: PPUSH
59534: LD_VAR 0 5
59538: PPUSH
59539: CALL 62847 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59543: LD_VAR 0 1
59547: PUSH
59548: LD_INT 254
59550: EQUAL
59551: PUSH
59552: LD_VAR 0 2
59556: PPUSH
59557: CALL_OW 264
59561: PUSH
59562: LD_EXP 97
59566: EQUAL
59567: AND
59568: PUSH
59569: LD_VAR 0 3
59573: PPUSH
59574: CALL_OW 263
59578: PUSH
59579: LD_INT 3
59581: EQUAL
59582: AND
59583: IFFALSE 59599
// HackDestroyVehicle ( unit , selectedUnit ) ;
59585: LD_VAR 0 2
59589: PPUSH
59590: LD_VAR 0 3
59594: PPUSH
59595: CALL 61142 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59599: LD_VAR 0 1
59603: PUSH
59604: LD_INT 255
59606: EQUAL
59607: PUSH
59608: LD_VAR 0 2
59612: PPUSH
59613: CALL_OW 264
59617: PUSH
59618: LD_INT 14
59620: PUSH
59621: LD_INT 53
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: IN
59628: AND
59629: PUSH
59630: LD_VAR 0 4
59634: PPUSH
59635: LD_VAR 0 5
59639: PPUSH
59640: CALL_OW 488
59644: AND
59645: IFFALSE 59669
// CutTreeXYR ( unit , x , y , 12 ) ;
59647: LD_VAR 0 2
59651: PPUSH
59652: LD_VAR 0 4
59656: PPUSH
59657: LD_VAR 0 5
59661: PPUSH
59662: LD_INT 12
59664: PPUSH
59665: CALL 59708 0 4
// end ;
59669: LD_VAR 0 6
59673: RET
// export initPlantMineScript , plantMineList ; every 1 trigger not initPlantMineScript do
59674: LD_EXP 83
59678: NOT
59679: IFFALSE 59699
59681: GO 59683
59683: DISABLE
// begin initPlantMineScript := true ;
59684: LD_ADDR_EXP 83
59688: PUSH
59689: LD_INT 1
59691: ST_TO_ADDR
// plantMineList := [ ] ;
59692: LD_ADDR_EXP 84
59696: PUSH
59697: EMPTY
59698: ST_TO_ADDR
// end ;
59699: END
// export function ComGroupPlantMineXY ( units , x , y ) ; begin
59700: LD_INT 0
59702: PPUSH
// end ;
59703: LD_VAR 0 4
59707: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59708: LD_INT 0
59710: PPUSH
59711: PPUSH
59712: PPUSH
59713: PPUSH
59714: PPUSH
59715: PPUSH
59716: PPUSH
59717: PPUSH
59718: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59719: LD_VAR 0 1
59723: NOT
59724: PUSH
59725: LD_VAR 0 2
59729: PPUSH
59730: LD_VAR 0 3
59734: PPUSH
59735: CALL_OW 488
59739: NOT
59740: OR
59741: PUSH
59742: LD_VAR 0 4
59746: NOT
59747: OR
59748: IFFALSE 59752
// exit ;
59750: GO 60092
// list := [ ] ;
59752: LD_ADDR_VAR 0 13
59756: PUSH
59757: EMPTY
59758: ST_TO_ADDR
// if x - r < 0 then
59759: LD_VAR 0 2
59763: PUSH
59764: LD_VAR 0 4
59768: MINUS
59769: PUSH
59770: LD_INT 0
59772: LESS
59773: IFFALSE 59785
// min_x := 0 else
59775: LD_ADDR_VAR 0 7
59779: PUSH
59780: LD_INT 0
59782: ST_TO_ADDR
59783: GO 59801
// min_x := x - r ;
59785: LD_ADDR_VAR 0 7
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: LD_VAR 0 4
59799: MINUS
59800: ST_TO_ADDR
// if y - r < 0 then
59801: LD_VAR 0 3
59805: PUSH
59806: LD_VAR 0 4
59810: MINUS
59811: PUSH
59812: LD_INT 0
59814: LESS
59815: IFFALSE 59827
// min_y := 0 else
59817: LD_ADDR_VAR 0 8
59821: PUSH
59822: LD_INT 0
59824: ST_TO_ADDR
59825: GO 59843
// min_y := y - r ;
59827: LD_ADDR_VAR 0 8
59831: PUSH
59832: LD_VAR 0 3
59836: PUSH
59837: LD_VAR 0 4
59841: MINUS
59842: ST_TO_ADDR
// max_x := x + r ;
59843: LD_ADDR_VAR 0 9
59847: PUSH
59848: LD_VAR 0 2
59852: PUSH
59853: LD_VAR 0 4
59857: PLUS
59858: ST_TO_ADDR
// max_y := y + r ;
59859: LD_ADDR_VAR 0 10
59863: PUSH
59864: LD_VAR 0 3
59868: PUSH
59869: LD_VAR 0 4
59873: PLUS
59874: ST_TO_ADDR
// for _x = min_x to max_x do
59875: LD_ADDR_VAR 0 11
59879: PUSH
59880: DOUBLE
59881: LD_VAR 0 7
59885: DEC
59886: ST_TO_ADDR
59887: LD_VAR 0 9
59891: PUSH
59892: FOR_TO
59893: IFFALSE 60010
// for _y = min_y to max_y do
59895: LD_ADDR_VAR 0 12
59899: PUSH
59900: DOUBLE
59901: LD_VAR 0 8
59905: DEC
59906: ST_TO_ADDR
59907: LD_VAR 0 10
59911: PUSH
59912: FOR_TO
59913: IFFALSE 60006
// begin if not ValidHex ( _x , _y ) then
59915: LD_VAR 0 11
59919: PPUSH
59920: LD_VAR 0 12
59924: PPUSH
59925: CALL_OW 488
59929: NOT
59930: IFFALSE 59934
// continue ;
59932: GO 59912
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59934: LD_VAR 0 11
59938: PPUSH
59939: LD_VAR 0 12
59943: PPUSH
59944: CALL_OW 351
59948: PUSH
59949: LD_VAR 0 11
59953: PPUSH
59954: LD_VAR 0 12
59958: PPUSH
59959: CALL_OW 554
59963: AND
59964: IFFALSE 60004
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59966: LD_ADDR_VAR 0 13
59970: PUSH
59971: LD_VAR 0 13
59975: PPUSH
59976: LD_VAR 0 13
59980: PUSH
59981: LD_INT 1
59983: PLUS
59984: PPUSH
59985: LD_VAR 0 11
59989: PUSH
59990: LD_VAR 0 12
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PPUSH
59999: CALL_OW 2
60003: ST_TO_ADDR
// end ;
60004: GO 59912
60006: POP
60007: POP
60008: GO 59892
60010: POP
60011: POP
// if not list then
60012: LD_VAR 0 13
60016: NOT
60017: IFFALSE 60021
// exit ;
60019: GO 60092
// for i in list do
60021: LD_ADDR_VAR 0 6
60025: PUSH
60026: LD_VAR 0 13
60030: PUSH
60031: FOR_IN
60032: IFFALSE 60090
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60034: LD_VAR 0 1
60038: PPUSH
60039: LD_STRING M
60041: PUSH
60042: LD_VAR 0 6
60046: PUSH
60047: LD_INT 1
60049: ARRAY
60050: PUSH
60051: LD_VAR 0 6
60055: PUSH
60056: LD_INT 2
60058: ARRAY
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: PUSH
60081: EMPTY
60082: LIST
60083: PPUSH
60084: CALL_OW 447
60088: GO 60031
60090: POP
60091: POP
// end ;
60092: LD_VAR 0 5
60096: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60097: LD_EXP 85
60101: NOT
60102: IFFALSE 60152
60104: GO 60106
60106: DISABLE
// begin initHack := true ;
60107: LD_ADDR_EXP 85
60111: PUSH
60112: LD_INT 1
60114: ST_TO_ADDR
// hackTanks := [ ] ;
60115: LD_ADDR_EXP 86
60119: PUSH
60120: EMPTY
60121: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60122: LD_ADDR_EXP 87
60126: PUSH
60127: EMPTY
60128: ST_TO_ADDR
// hackLimit := 3 ;
60129: LD_ADDR_EXP 88
60133: PUSH
60134: LD_INT 3
60136: ST_TO_ADDR
// hackDist := 12 ;
60137: LD_ADDR_EXP 89
60141: PUSH
60142: LD_INT 12
60144: ST_TO_ADDR
// hackCounter := [ ] ;
60145: LD_ADDR_EXP 90
60149: PUSH
60150: EMPTY
60151: ST_TO_ADDR
// end ;
60152: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60153: LD_EXP 85
60157: PUSH
60158: LD_INT 34
60160: PUSH
60161: LD_EXP 97
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PPUSH
60170: CALL_OW 69
60174: AND
60175: IFFALSE 60430
60177: GO 60179
60179: DISABLE
60180: LD_INT 0
60182: PPUSH
60183: PPUSH
// begin enable ;
60184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60185: LD_ADDR_VAR 0 1
60189: PUSH
60190: LD_INT 34
60192: PUSH
60193: LD_EXP 97
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PPUSH
60202: CALL_OW 69
60206: PUSH
60207: FOR_IN
60208: IFFALSE 60428
// begin if not i in hackTanks then
60210: LD_VAR 0 1
60214: PUSH
60215: LD_EXP 86
60219: IN
60220: NOT
60221: IFFALSE 60304
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60223: LD_ADDR_EXP 86
60227: PUSH
60228: LD_EXP 86
60232: PPUSH
60233: LD_EXP 86
60237: PUSH
60238: LD_INT 1
60240: PLUS
60241: PPUSH
60242: LD_VAR 0 1
60246: PPUSH
60247: CALL_OW 1
60251: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60252: LD_ADDR_EXP 87
60256: PUSH
60257: LD_EXP 87
60261: PPUSH
60262: LD_EXP 87
60266: PUSH
60267: LD_INT 1
60269: PLUS
60270: PPUSH
60271: EMPTY
60272: PPUSH
60273: CALL_OW 1
60277: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60278: LD_ADDR_EXP 90
60282: PUSH
60283: LD_EXP 90
60287: PPUSH
60288: LD_EXP 90
60292: PUSH
60293: LD_INT 1
60295: PLUS
60296: PPUSH
60297: EMPTY
60298: PPUSH
60299: CALL_OW 1
60303: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60304: LD_VAR 0 1
60308: PPUSH
60309: CALL_OW 302
60313: NOT
60314: IFFALSE 60327
// begin HackUnlinkAll ( i ) ;
60316: LD_VAR 0 1
60320: PPUSH
60321: CALL 60433 0 1
// continue ;
60325: GO 60207
// end ; HackCheckCapturedStatus ( i ) ;
60327: LD_VAR 0 1
60331: PPUSH
60332: CALL 60876 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60336: LD_ADDR_VAR 0 2
60340: PUSH
60341: LD_INT 81
60343: PUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: CALL_OW 255
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 33
60360: PUSH
60361: LD_INT 3
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 91
60370: PUSH
60371: LD_VAR 0 1
60375: PUSH
60376: LD_EXP 89
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 50
60388: PUSH
60389: EMPTY
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: PPUSH
60398: CALL_OW 69
60402: ST_TO_ADDR
// if not tmp then
60403: LD_VAR 0 2
60407: NOT
60408: IFFALSE 60412
// continue ;
60410: GO 60207
// HackLink ( i , tmp ) ;
60412: LD_VAR 0 1
60416: PPUSH
60417: LD_VAR 0 2
60421: PPUSH
60422: CALL 60569 0 2
// end ;
60426: GO 60207
60428: POP
60429: POP
// end ;
60430: PPOPN 2
60432: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60433: LD_INT 0
60435: PPUSH
60436: PPUSH
60437: PPUSH
// if not hack in hackTanks then
60438: LD_VAR 0 1
60442: PUSH
60443: LD_EXP 86
60447: IN
60448: NOT
60449: IFFALSE 60453
// exit ;
60451: GO 60564
// index := GetElementIndex ( hackTanks , hack ) ;
60453: LD_ADDR_VAR 0 4
60457: PUSH
60458: LD_EXP 86
60462: PPUSH
60463: LD_VAR 0 1
60467: PPUSH
60468: CALL 13586 0 2
60472: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60473: LD_EXP 87
60477: PUSH
60478: LD_VAR 0 4
60482: ARRAY
60483: IFFALSE 60564
// begin for i in hackTanksCaptured [ index ] do
60485: LD_ADDR_VAR 0 3
60489: PUSH
60490: LD_EXP 87
60494: PUSH
60495: LD_VAR 0 4
60499: ARRAY
60500: PUSH
60501: FOR_IN
60502: IFFALSE 60528
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60504: LD_VAR 0 3
60508: PUSH
60509: LD_INT 1
60511: ARRAY
60512: PPUSH
60513: LD_VAR 0 3
60517: PUSH
60518: LD_INT 2
60520: ARRAY
60521: PPUSH
60522: CALL_OW 235
60526: GO 60501
60528: POP
60529: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60530: LD_ADDR_EXP 87
60534: PUSH
60535: LD_EXP 87
60539: PPUSH
60540: LD_VAR 0 4
60544: PPUSH
60545: EMPTY
60546: PPUSH
60547: CALL_OW 1
60551: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60552: LD_VAR 0 1
60556: PPUSH
60557: LD_INT 0
60559: PPUSH
60560: CALL_OW 505
// end ; end ;
60564: LD_VAR 0 2
60568: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60569: LD_INT 0
60571: PPUSH
60572: PPUSH
60573: PPUSH
// if not hack in hackTanks or not vehicles then
60574: LD_VAR 0 1
60578: PUSH
60579: LD_EXP 86
60583: IN
60584: NOT
60585: PUSH
60586: LD_VAR 0 2
60590: NOT
60591: OR
60592: IFFALSE 60596
// exit ;
60594: GO 60871
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60596: LD_ADDR_VAR 0 2
60600: PUSH
60601: LD_VAR 0 1
60605: PPUSH
60606: LD_VAR 0 2
60610: PPUSH
60611: LD_INT 1
60613: PPUSH
60614: LD_INT 1
60616: PPUSH
60617: CALL 14236 0 4
60621: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60622: LD_ADDR_VAR 0 5
60626: PUSH
60627: LD_EXP 86
60631: PPUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: CALL 13586 0 2
60641: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60642: LD_EXP 87
60646: PUSH
60647: LD_VAR 0 5
60651: ARRAY
60652: PUSH
60653: LD_EXP 88
60657: LESS
60658: IFFALSE 60847
// begin for i := 1 to vehicles do
60660: LD_ADDR_VAR 0 4
60664: PUSH
60665: DOUBLE
60666: LD_INT 1
60668: DEC
60669: ST_TO_ADDR
60670: LD_VAR 0 2
60674: PUSH
60675: FOR_TO
60676: IFFALSE 60845
// begin if hackTanksCaptured [ index ] = hackLimit then
60678: LD_EXP 87
60682: PUSH
60683: LD_VAR 0 5
60687: ARRAY
60688: PUSH
60689: LD_EXP 88
60693: EQUAL
60694: IFFALSE 60698
// break ;
60696: GO 60845
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60698: LD_ADDR_EXP 90
60702: PUSH
60703: LD_EXP 90
60707: PPUSH
60708: LD_VAR 0 5
60712: PPUSH
60713: LD_EXP 90
60717: PUSH
60718: LD_VAR 0 5
60722: ARRAY
60723: PUSH
60724: LD_INT 1
60726: PLUS
60727: PPUSH
60728: CALL_OW 1
60732: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60733: LD_ADDR_EXP 87
60737: PUSH
60738: LD_EXP 87
60742: PPUSH
60743: LD_VAR 0 5
60747: PUSH
60748: LD_EXP 87
60752: PUSH
60753: LD_VAR 0 5
60757: ARRAY
60758: PUSH
60759: LD_INT 1
60761: PLUS
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PPUSH
60767: LD_VAR 0 2
60771: PUSH
60772: LD_VAR 0 4
60776: ARRAY
60777: PUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_VAR 0 4
60787: ARRAY
60788: PPUSH
60789: CALL_OW 255
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PPUSH
60798: CALL 13801 0 3
60802: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60803: LD_VAR 0 2
60807: PUSH
60808: LD_VAR 0 4
60812: ARRAY
60813: PPUSH
60814: LD_VAR 0 1
60818: PPUSH
60819: CALL_OW 255
60823: PPUSH
60824: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60828: LD_VAR 0 2
60832: PUSH
60833: LD_VAR 0 4
60837: ARRAY
60838: PPUSH
60839: CALL_OW 141
// end ;
60843: GO 60675
60845: POP
60846: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60847: LD_VAR 0 1
60851: PPUSH
60852: LD_EXP 87
60856: PUSH
60857: LD_VAR 0 5
60861: ARRAY
60862: PUSH
60863: LD_INT 0
60865: PLUS
60866: PPUSH
60867: CALL_OW 505
// end ;
60871: LD_VAR 0 3
60875: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60876: LD_INT 0
60878: PPUSH
60879: PPUSH
60880: PPUSH
60881: PPUSH
// if not hack in hackTanks then
60882: LD_VAR 0 1
60886: PUSH
60887: LD_EXP 86
60891: IN
60892: NOT
60893: IFFALSE 60897
// exit ;
60895: GO 61137
// index := GetElementIndex ( hackTanks , hack ) ;
60897: LD_ADDR_VAR 0 4
60901: PUSH
60902: LD_EXP 86
60906: PPUSH
60907: LD_VAR 0 1
60911: PPUSH
60912: CALL 13586 0 2
60916: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60917: LD_ADDR_VAR 0 3
60921: PUSH
60922: DOUBLE
60923: LD_EXP 87
60927: PUSH
60928: LD_VAR 0 4
60932: ARRAY
60933: INC
60934: ST_TO_ADDR
60935: LD_INT 1
60937: PUSH
60938: FOR_DOWNTO
60939: IFFALSE 61111
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60941: LD_ADDR_VAR 0 5
60945: PUSH
60946: LD_EXP 87
60950: PUSH
60951: LD_VAR 0 4
60955: ARRAY
60956: PUSH
60957: LD_VAR 0 3
60961: ARRAY
60962: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60963: LD_VAR 0 5
60967: PUSH
60968: LD_INT 1
60970: ARRAY
60971: PPUSH
60972: CALL_OW 302
60976: NOT
60977: PUSH
60978: LD_VAR 0 5
60982: PUSH
60983: LD_INT 1
60985: ARRAY
60986: PPUSH
60987: CALL_OW 255
60991: PUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 255
61001: NONEQUAL
61002: OR
61003: IFFALSE 61109
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61005: LD_VAR 0 5
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PPUSH
61014: CALL_OW 305
61018: PUSH
61019: LD_VAR 0 5
61023: PUSH
61024: LD_INT 1
61026: ARRAY
61027: PPUSH
61028: CALL_OW 255
61032: PUSH
61033: LD_VAR 0 1
61037: PPUSH
61038: CALL_OW 255
61042: EQUAL
61043: AND
61044: IFFALSE 61068
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61046: LD_VAR 0 5
61050: PUSH
61051: LD_INT 1
61053: ARRAY
61054: PPUSH
61055: LD_VAR 0 5
61059: PUSH
61060: LD_INT 2
61062: ARRAY
61063: PPUSH
61064: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61068: LD_ADDR_EXP 87
61072: PUSH
61073: LD_EXP 87
61077: PPUSH
61078: LD_VAR 0 4
61082: PPUSH
61083: LD_EXP 87
61087: PUSH
61088: LD_VAR 0 4
61092: ARRAY
61093: PPUSH
61094: LD_VAR 0 3
61098: PPUSH
61099: CALL_OW 3
61103: PPUSH
61104: CALL_OW 1
61108: ST_TO_ADDR
// end ; end ;
61109: GO 60938
61111: POP
61112: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61113: LD_VAR 0 1
61117: PPUSH
61118: LD_EXP 87
61122: PUSH
61123: LD_VAR 0 4
61127: ARRAY
61128: PUSH
61129: LD_INT 0
61131: PLUS
61132: PPUSH
61133: CALL_OW 505
// end ;
61137: LD_VAR 0 2
61141: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61142: LD_INT 0
61144: PPUSH
61145: PPUSH
61146: PPUSH
61147: PPUSH
// if not hack in hackTanks then
61148: LD_VAR 0 1
61152: PUSH
61153: LD_EXP 86
61157: IN
61158: NOT
61159: IFFALSE 61163
// exit ;
61161: GO 61248
// index := GetElementIndex ( hackTanks , hack ) ;
61163: LD_ADDR_VAR 0 5
61167: PUSH
61168: LD_EXP 86
61172: PPUSH
61173: LD_VAR 0 1
61177: PPUSH
61178: CALL 13586 0 2
61182: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61183: LD_ADDR_VAR 0 4
61187: PUSH
61188: DOUBLE
61189: LD_INT 1
61191: DEC
61192: ST_TO_ADDR
61193: LD_EXP 87
61197: PUSH
61198: LD_VAR 0 5
61202: ARRAY
61203: PUSH
61204: FOR_TO
61205: IFFALSE 61246
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61207: LD_EXP 87
61211: PUSH
61212: LD_VAR 0 5
61216: ARRAY
61217: PUSH
61218: LD_VAR 0 4
61222: ARRAY
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PUSH
61228: LD_VAR 0 2
61232: EQUAL
61233: IFFALSE 61244
// KillUnit ( vehicle ) ;
61235: LD_VAR 0 2
61239: PPUSH
61240: CALL_OW 66
61244: GO 61204
61246: POP
61247: POP
// end ;
61248: LD_VAR 0 3
61252: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61253: LD_EXP 91
61257: NOT
61258: IFFALSE 61293
61260: GO 61262
61262: DISABLE
// begin initMiner := true ;
61263: LD_ADDR_EXP 91
61267: PUSH
61268: LD_INT 1
61270: ST_TO_ADDR
// minersList := [ ] ;
61271: LD_ADDR_EXP 92
61275: PUSH
61276: EMPTY
61277: ST_TO_ADDR
// minerMinesList := [ ] ;
61278: LD_ADDR_EXP 93
61282: PUSH
61283: EMPTY
61284: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61285: LD_ADDR_EXP 94
61289: PUSH
61290: LD_INT 5
61292: ST_TO_ADDR
// end ;
61293: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61294: LD_EXP 91
61298: PUSH
61299: LD_INT 34
61301: PUSH
61302: LD_EXP 102
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PPUSH
61311: CALL_OW 69
61315: AND
61316: IFFALSE 61779
61318: GO 61320
61320: DISABLE
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
// begin enable ;
61327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61328: LD_ADDR_VAR 0 1
61332: PUSH
61333: LD_INT 34
61335: PUSH
61336: LD_EXP 102
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PPUSH
61345: CALL_OW 69
61349: PUSH
61350: FOR_IN
61351: IFFALSE 61423
// begin if not i in minersList then
61353: LD_VAR 0 1
61357: PUSH
61358: LD_EXP 92
61362: IN
61363: NOT
61364: IFFALSE 61421
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61366: LD_ADDR_EXP 92
61370: PUSH
61371: LD_EXP 92
61375: PPUSH
61376: LD_EXP 92
61380: PUSH
61381: LD_INT 1
61383: PLUS
61384: PPUSH
61385: LD_VAR 0 1
61389: PPUSH
61390: CALL_OW 1
61394: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61395: LD_ADDR_EXP 93
61399: PUSH
61400: LD_EXP 93
61404: PPUSH
61405: LD_EXP 93
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: PPUSH
61414: EMPTY
61415: PPUSH
61416: CALL_OW 1
61420: ST_TO_ADDR
// end end ;
61421: GO 61350
61423: POP
61424: POP
// for i := minerMinesList downto 1 do
61425: LD_ADDR_VAR 0 1
61429: PUSH
61430: DOUBLE
61431: LD_EXP 93
61435: INC
61436: ST_TO_ADDR
61437: LD_INT 1
61439: PUSH
61440: FOR_DOWNTO
61441: IFFALSE 61777
// begin if IsLive ( minersList [ i ] ) then
61443: LD_EXP 92
61447: PUSH
61448: LD_VAR 0 1
61452: ARRAY
61453: PPUSH
61454: CALL_OW 300
61458: IFFALSE 61486
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61460: LD_EXP 92
61464: PUSH
61465: LD_VAR 0 1
61469: ARRAY
61470: PPUSH
61471: LD_EXP 93
61475: PUSH
61476: LD_VAR 0 1
61480: ARRAY
61481: PPUSH
61482: CALL_OW 505
// if not minerMinesList [ i ] then
61486: LD_EXP 93
61490: PUSH
61491: LD_VAR 0 1
61495: ARRAY
61496: NOT
61497: IFFALSE 61501
// continue ;
61499: GO 61440
// for j := minerMinesList [ i ] downto 1 do
61501: LD_ADDR_VAR 0 2
61505: PUSH
61506: DOUBLE
61507: LD_EXP 93
61511: PUSH
61512: LD_VAR 0 1
61516: ARRAY
61517: INC
61518: ST_TO_ADDR
61519: LD_INT 1
61521: PUSH
61522: FOR_DOWNTO
61523: IFFALSE 61773
// begin side := GetSide ( minersList [ i ] ) ;
61525: LD_ADDR_VAR 0 3
61529: PUSH
61530: LD_EXP 92
61534: PUSH
61535: LD_VAR 0 1
61539: ARRAY
61540: PPUSH
61541: CALL_OW 255
61545: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61546: LD_ADDR_VAR 0 4
61550: PUSH
61551: LD_EXP 93
61555: PUSH
61556: LD_VAR 0 1
61560: ARRAY
61561: PUSH
61562: LD_VAR 0 2
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: ARRAY
61571: PPUSH
61572: LD_EXP 93
61576: PUSH
61577: LD_VAR 0 1
61581: ARRAY
61582: PUSH
61583: LD_VAR 0 2
61587: ARRAY
61588: PUSH
61589: LD_INT 2
61591: ARRAY
61592: PPUSH
61593: CALL_OW 428
61597: ST_TO_ADDR
// if not tmp then
61598: LD_VAR 0 4
61602: NOT
61603: IFFALSE 61607
// continue ;
61605: GO 61522
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61607: LD_VAR 0 4
61611: PUSH
61612: LD_INT 81
61614: PUSH
61615: LD_VAR 0 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PPUSH
61624: CALL_OW 69
61628: IN
61629: PUSH
61630: LD_EXP 93
61634: PUSH
61635: LD_VAR 0 1
61639: ARRAY
61640: PUSH
61641: LD_VAR 0 2
61645: ARRAY
61646: PUSH
61647: LD_INT 1
61649: ARRAY
61650: PPUSH
61651: LD_EXP 93
61655: PUSH
61656: LD_VAR 0 1
61660: ARRAY
61661: PUSH
61662: LD_VAR 0 2
61666: ARRAY
61667: PUSH
61668: LD_INT 2
61670: ARRAY
61671: PPUSH
61672: CALL_OW 458
61676: AND
61677: IFFALSE 61771
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61679: LD_EXP 93
61683: PUSH
61684: LD_VAR 0 1
61688: ARRAY
61689: PUSH
61690: LD_VAR 0 2
61694: ARRAY
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: PPUSH
61700: LD_EXP 93
61704: PUSH
61705: LD_VAR 0 1
61709: ARRAY
61710: PUSH
61711: LD_VAR 0 2
61715: ARRAY
61716: PUSH
61717: LD_INT 2
61719: ARRAY
61720: PPUSH
61721: LD_VAR 0 3
61725: PPUSH
61726: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61730: LD_ADDR_EXP 93
61734: PUSH
61735: LD_EXP 93
61739: PPUSH
61740: LD_VAR 0 1
61744: PPUSH
61745: LD_EXP 93
61749: PUSH
61750: LD_VAR 0 1
61754: ARRAY
61755: PPUSH
61756: LD_VAR 0 2
61760: PPUSH
61761: CALL_OW 3
61765: PPUSH
61766: CALL_OW 1
61770: ST_TO_ADDR
// end ; end ;
61771: GO 61522
61773: POP
61774: POP
// end ;
61775: GO 61440
61777: POP
61778: POP
// end ;
61779: PPOPN 4
61781: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61782: LD_INT 0
61784: PPUSH
61785: PPUSH
// result := false ;
61786: LD_ADDR_VAR 0 4
61790: PUSH
61791: LD_INT 0
61793: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61794: LD_VAR 0 1
61798: PPUSH
61799: CALL_OW 264
61803: PUSH
61804: LD_EXP 102
61808: EQUAL
61809: NOT
61810: IFFALSE 61814
// exit ;
61812: GO 62054
// index := GetElementIndex ( minersList , unit ) ;
61814: LD_ADDR_VAR 0 5
61818: PUSH
61819: LD_EXP 92
61823: PPUSH
61824: LD_VAR 0 1
61828: PPUSH
61829: CALL 13586 0 2
61833: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61834: LD_EXP 93
61838: PUSH
61839: LD_VAR 0 5
61843: ARRAY
61844: PUSH
61845: LD_EXP 94
61849: GREATEREQUAL
61850: IFFALSE 61854
// exit ;
61852: GO 62054
// ComMoveXY ( unit , x , y ) ;
61854: LD_VAR 0 1
61858: PPUSH
61859: LD_VAR 0 2
61863: PPUSH
61864: LD_VAR 0 3
61868: PPUSH
61869: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61873: LD_INT 35
61875: PPUSH
61876: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61880: LD_VAR 0 1
61884: PPUSH
61885: LD_VAR 0 2
61889: PPUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: CALL 43650 0 3
61899: NOT
61900: PUSH
61901: LD_VAR 0 1
61905: PPUSH
61906: CALL_OW 314
61910: AND
61911: IFFALSE 61915
// exit ;
61913: GO 62054
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61915: LD_VAR 0 2
61919: PPUSH
61920: LD_VAR 0 3
61924: PPUSH
61925: CALL_OW 428
61929: PUSH
61930: LD_VAR 0 1
61934: EQUAL
61935: PUSH
61936: LD_VAR 0 1
61940: PPUSH
61941: CALL_OW 314
61945: NOT
61946: AND
61947: IFFALSE 61873
// PlaySoundXY ( x , y , PlantMine ) ;
61949: LD_VAR 0 2
61953: PPUSH
61954: LD_VAR 0 3
61958: PPUSH
61959: LD_STRING PlantMine
61961: PPUSH
61962: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61966: LD_VAR 0 2
61970: PPUSH
61971: LD_VAR 0 3
61975: PPUSH
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 255
61985: PPUSH
61986: LD_INT 0
61988: PPUSH
61989: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61993: LD_ADDR_EXP 93
61997: PUSH
61998: LD_EXP 93
62002: PPUSH
62003: LD_VAR 0 5
62007: PUSH
62008: LD_EXP 93
62012: PUSH
62013: LD_VAR 0 5
62017: ARRAY
62018: PUSH
62019: LD_INT 1
62021: PLUS
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PPUSH
62027: LD_VAR 0 2
62031: PUSH
62032: LD_VAR 0 3
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PPUSH
62041: CALL 13801 0 3
62045: ST_TO_ADDR
// result := true ;
62046: LD_ADDR_VAR 0 4
62050: PUSH
62051: LD_INT 1
62053: ST_TO_ADDR
// end ;
62054: LD_VAR 0 4
62058: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
// if not unit in minersList then
62064: LD_VAR 0 1
62068: PUSH
62069: LD_EXP 92
62073: IN
62074: NOT
62075: IFFALSE 62079
// exit ;
62077: GO 62471
// index := GetElementIndex ( minersList , unit ) ;
62079: LD_ADDR_VAR 0 6
62083: PUSH
62084: LD_EXP 92
62088: PPUSH
62089: LD_VAR 0 1
62093: PPUSH
62094: CALL 13586 0 2
62098: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62099: LD_ADDR_VAR 0 5
62103: PUSH
62104: DOUBLE
62105: LD_EXP 93
62109: PUSH
62110: LD_VAR 0 6
62114: ARRAY
62115: INC
62116: ST_TO_ADDR
62117: LD_INT 1
62119: PUSH
62120: FOR_DOWNTO
62121: IFFALSE 62282
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62123: LD_EXP 93
62127: PUSH
62128: LD_VAR 0 6
62132: ARRAY
62133: PUSH
62134: LD_VAR 0 5
62138: ARRAY
62139: PUSH
62140: LD_INT 1
62142: ARRAY
62143: PUSH
62144: LD_VAR 0 2
62148: EQUAL
62149: PUSH
62150: LD_EXP 93
62154: PUSH
62155: LD_VAR 0 6
62159: ARRAY
62160: PUSH
62161: LD_VAR 0 5
62165: ARRAY
62166: PUSH
62167: LD_INT 2
62169: ARRAY
62170: PUSH
62171: LD_VAR 0 3
62175: EQUAL
62176: AND
62177: IFFALSE 62280
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62179: LD_EXP 93
62183: PUSH
62184: LD_VAR 0 6
62188: ARRAY
62189: PUSH
62190: LD_VAR 0 5
62194: ARRAY
62195: PUSH
62196: LD_INT 1
62198: ARRAY
62199: PPUSH
62200: LD_EXP 93
62204: PUSH
62205: LD_VAR 0 6
62209: ARRAY
62210: PUSH
62211: LD_VAR 0 5
62215: ARRAY
62216: PUSH
62217: LD_INT 2
62219: ARRAY
62220: PPUSH
62221: LD_VAR 0 1
62225: PPUSH
62226: CALL_OW 255
62230: PPUSH
62231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62235: LD_ADDR_EXP 93
62239: PUSH
62240: LD_EXP 93
62244: PPUSH
62245: LD_VAR 0 6
62249: PPUSH
62250: LD_EXP 93
62254: PUSH
62255: LD_VAR 0 6
62259: ARRAY
62260: PPUSH
62261: LD_VAR 0 5
62265: PPUSH
62266: CALL_OW 3
62270: PPUSH
62271: CALL_OW 1
62275: ST_TO_ADDR
// exit ;
62276: POP
62277: POP
62278: GO 62471
// end ; end ;
62280: GO 62120
62282: POP
62283: POP
// for i := minerMinesList [ index ] downto 1 do
62284: LD_ADDR_VAR 0 5
62288: PUSH
62289: DOUBLE
62290: LD_EXP 93
62294: PUSH
62295: LD_VAR 0 6
62299: ARRAY
62300: INC
62301: ST_TO_ADDR
62302: LD_INT 1
62304: PUSH
62305: FOR_DOWNTO
62306: IFFALSE 62469
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62308: LD_EXP 93
62312: PUSH
62313: LD_VAR 0 6
62317: ARRAY
62318: PUSH
62319: LD_VAR 0 5
62323: ARRAY
62324: PUSH
62325: LD_INT 1
62327: ARRAY
62328: PPUSH
62329: LD_EXP 93
62333: PUSH
62334: LD_VAR 0 6
62338: ARRAY
62339: PUSH
62340: LD_VAR 0 5
62344: ARRAY
62345: PUSH
62346: LD_INT 2
62348: ARRAY
62349: PPUSH
62350: LD_VAR 0 2
62354: PPUSH
62355: LD_VAR 0 3
62359: PPUSH
62360: CALL_OW 298
62364: PUSH
62365: LD_INT 6
62367: LESS
62368: IFFALSE 62467
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62370: LD_EXP 93
62374: PUSH
62375: LD_VAR 0 6
62379: ARRAY
62380: PUSH
62381: LD_VAR 0 5
62385: ARRAY
62386: PUSH
62387: LD_INT 1
62389: ARRAY
62390: PPUSH
62391: LD_EXP 93
62395: PUSH
62396: LD_VAR 0 6
62400: ARRAY
62401: PUSH
62402: LD_VAR 0 5
62406: ARRAY
62407: PUSH
62408: LD_INT 2
62410: ARRAY
62411: PPUSH
62412: LD_VAR 0 1
62416: PPUSH
62417: CALL_OW 255
62421: PPUSH
62422: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62426: LD_ADDR_EXP 93
62430: PUSH
62431: LD_EXP 93
62435: PPUSH
62436: LD_VAR 0 6
62440: PPUSH
62441: LD_EXP 93
62445: PUSH
62446: LD_VAR 0 6
62450: ARRAY
62451: PPUSH
62452: LD_VAR 0 5
62456: PPUSH
62457: CALL_OW 3
62461: PPUSH
62462: CALL_OW 1
62466: ST_TO_ADDR
// end ; end ;
62467: GO 62305
62469: POP
62470: POP
// end ;
62471: LD_VAR 0 4
62475: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62476: LD_INT 0
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
62482: PPUSH
62483: PPUSH
62484: PPUSH
62485: PPUSH
62486: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62487: LD_VAR 0 1
62491: PPUSH
62492: CALL_OW 264
62496: PUSH
62497: LD_EXP 102
62501: EQUAL
62502: NOT
62503: PUSH
62504: LD_VAR 0 1
62508: PUSH
62509: LD_EXP 92
62513: IN
62514: NOT
62515: OR
62516: IFFALSE 62520
// exit ;
62518: GO 62842
// index := GetElementIndex ( minersList , unit ) ;
62520: LD_ADDR_VAR 0 6
62524: PUSH
62525: LD_EXP 92
62529: PPUSH
62530: LD_VAR 0 1
62534: PPUSH
62535: CALL 13586 0 2
62539: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62540: LD_ADDR_VAR 0 8
62544: PUSH
62545: LD_EXP 94
62549: PUSH
62550: LD_EXP 93
62554: PUSH
62555: LD_VAR 0 6
62559: ARRAY
62560: MINUS
62561: ST_TO_ADDR
// if not minesFreeAmount then
62562: LD_VAR 0 8
62566: NOT
62567: IFFALSE 62571
// exit ;
62569: GO 62842
// tmp := [ ] ;
62571: LD_ADDR_VAR 0 7
62575: PUSH
62576: EMPTY
62577: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62578: LD_ADDR_VAR 0 5
62582: PUSH
62583: DOUBLE
62584: LD_INT 1
62586: DEC
62587: ST_TO_ADDR
62588: LD_VAR 0 8
62592: PUSH
62593: FOR_TO
62594: IFFALSE 62789
// begin _d := rand ( 0 , 5 ) ;
62596: LD_ADDR_VAR 0 11
62600: PUSH
62601: LD_INT 0
62603: PPUSH
62604: LD_INT 5
62606: PPUSH
62607: CALL_OW 12
62611: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62612: LD_ADDR_VAR 0 12
62616: PUSH
62617: LD_INT 2
62619: PPUSH
62620: LD_INT 6
62622: PPUSH
62623: CALL_OW 12
62627: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62628: LD_ADDR_VAR 0 9
62632: PUSH
62633: LD_VAR 0 2
62637: PPUSH
62638: LD_VAR 0 11
62642: PPUSH
62643: LD_VAR 0 12
62647: PPUSH
62648: CALL_OW 272
62652: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62653: LD_ADDR_VAR 0 10
62657: PUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: LD_VAR 0 11
62667: PPUSH
62668: LD_VAR 0 12
62672: PPUSH
62673: CALL_OW 273
62677: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62678: LD_VAR 0 9
62682: PPUSH
62683: LD_VAR 0 10
62687: PPUSH
62688: CALL_OW 488
62692: PUSH
62693: LD_VAR 0 9
62697: PUSH
62698: LD_VAR 0 10
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_VAR 0 7
62711: IN
62712: NOT
62713: AND
62714: PUSH
62715: LD_VAR 0 9
62719: PPUSH
62720: LD_VAR 0 10
62724: PPUSH
62725: CALL_OW 458
62729: NOT
62730: AND
62731: IFFALSE 62773
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62733: LD_ADDR_VAR 0 7
62737: PUSH
62738: LD_VAR 0 7
62742: PPUSH
62743: LD_VAR 0 7
62747: PUSH
62748: LD_INT 1
62750: PLUS
62751: PPUSH
62752: LD_VAR 0 9
62756: PUSH
62757: LD_VAR 0 10
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PPUSH
62766: CALL_OW 1
62770: ST_TO_ADDR
62771: GO 62787
// i := i - 1 ;
62773: LD_ADDR_VAR 0 5
62777: PUSH
62778: LD_VAR 0 5
62782: PUSH
62783: LD_INT 1
62785: MINUS
62786: ST_TO_ADDR
// end ;
62787: GO 62593
62789: POP
62790: POP
// for i in tmp do
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: LD_VAR 0 7
62800: PUSH
62801: FOR_IN
62802: IFFALSE 62840
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62804: LD_VAR 0 1
62808: PPUSH
62809: LD_VAR 0 5
62813: PUSH
62814: LD_INT 1
62816: ARRAY
62817: PPUSH
62818: LD_VAR 0 5
62822: PUSH
62823: LD_INT 2
62825: ARRAY
62826: PPUSH
62827: CALL 61782 0 3
62831: NOT
62832: IFFALSE 62838
// exit ;
62834: POP
62835: POP
62836: GO 62842
62838: GO 62801
62840: POP
62841: POP
// end ;
62842: LD_VAR 0 4
62846: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62847: LD_INT 0
62849: PPUSH
62850: PPUSH
62851: PPUSH
62852: PPUSH
62853: PPUSH
62854: PPUSH
62855: PPUSH
// if not GetClass ( unit ) = class_sniper then
62856: LD_VAR 0 1
62860: PPUSH
62861: CALL_OW 257
62865: PUSH
62866: LD_INT 5
62868: EQUAL
62869: NOT
62870: IFFALSE 62874
// exit ;
62872: GO 63262
// dist := 8 ;
62874: LD_ADDR_VAR 0 5
62878: PUSH
62879: LD_INT 8
62881: ST_TO_ADDR
// viewRange := 12 ;
62882: LD_ADDR_VAR 0 7
62886: PUSH
62887: LD_INT 12
62889: ST_TO_ADDR
// side := GetSide ( unit ) ;
62890: LD_ADDR_VAR 0 6
62894: PUSH
62895: LD_VAR 0 1
62899: PPUSH
62900: CALL_OW 255
62904: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62905: LD_INT 61
62907: PPUSH
62908: LD_VAR 0 6
62912: PPUSH
62913: CALL_OW 321
62917: PUSH
62918: LD_INT 2
62920: EQUAL
62921: IFFALSE 62931
// viewRange := 16 ;
62923: LD_ADDR_VAR 0 7
62927: PUSH
62928: LD_INT 16
62930: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62931: LD_VAR 0 1
62935: PPUSH
62936: LD_VAR 0 2
62940: PPUSH
62941: LD_VAR 0 3
62945: PPUSH
62946: CALL_OW 297
62950: PUSH
62951: LD_VAR 0 5
62955: GREATER
62956: IFFALSE 63035
// begin ComMoveXY ( unit , x , y ) ;
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_VAR 0 2
62967: PPUSH
62968: LD_VAR 0 3
62972: PPUSH
62973: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62977: LD_INT 35
62979: PPUSH
62980: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62984: LD_VAR 0 1
62988: PPUSH
62989: LD_VAR 0 2
62993: PPUSH
62994: LD_VAR 0 3
62998: PPUSH
62999: CALL 43650 0 3
63003: NOT
63004: IFFALSE 63008
// exit ;
63006: GO 63262
// until GetDistUnitXY ( unit , x , y ) < dist ;
63008: LD_VAR 0 1
63012: PPUSH
63013: LD_VAR 0 2
63017: PPUSH
63018: LD_VAR 0 3
63022: PPUSH
63023: CALL_OW 297
63027: PUSH
63028: LD_VAR 0 5
63032: LESS
63033: IFFALSE 62977
// end ; ComTurnXY ( unit , x , y ) ;
63035: LD_VAR 0 1
63039: PPUSH
63040: LD_VAR 0 2
63044: PPUSH
63045: LD_VAR 0 3
63049: PPUSH
63050: CALL_OW 118
// wait ( 5 ) ;
63054: LD_INT 5
63056: PPUSH
63057: CALL_OW 67
// _d := GetDir ( unit ) ;
63061: LD_ADDR_VAR 0 10
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL_OW 254
63075: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63076: LD_ADDR_VAR 0 8
63080: PUSH
63081: LD_VAR 0 1
63085: PPUSH
63086: CALL_OW 250
63090: PPUSH
63091: LD_VAR 0 10
63095: PPUSH
63096: LD_VAR 0 5
63100: PPUSH
63101: CALL_OW 272
63105: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63106: LD_ADDR_VAR 0 9
63110: PUSH
63111: LD_VAR 0 1
63115: PPUSH
63116: CALL_OW 251
63120: PPUSH
63121: LD_VAR 0 10
63125: PPUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 273
63135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63136: LD_VAR 0 8
63140: PPUSH
63141: LD_VAR 0 9
63145: PPUSH
63146: CALL_OW 488
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63262
// ComAnimCustom ( unit , 1 ) ;
63155: LD_VAR 0 1
63159: PPUSH
63160: LD_INT 1
63162: PPUSH
63163: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63167: LD_VAR 0 8
63171: PPUSH
63172: LD_VAR 0 9
63176: PPUSH
63177: LD_VAR 0 6
63181: PPUSH
63182: LD_VAR 0 7
63186: PPUSH
63187: CALL_OW 330
// repeat wait ( 1 ) ;
63191: LD_INT 1
63193: PPUSH
63194: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63198: LD_VAR 0 1
63202: PPUSH
63203: CALL_OW 316
63207: PUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: CALL_OW 314
63217: OR
63218: PUSH
63219: LD_VAR 0 1
63223: PPUSH
63224: CALL_OW 302
63228: NOT
63229: OR
63230: PUSH
63231: LD_VAR 0 1
63235: PPUSH
63236: CALL_OW 301
63240: OR
63241: IFFALSE 63191
// RemoveSeeing ( _x , _y , side ) ;
63243: LD_VAR 0 8
63247: PPUSH
63248: LD_VAR 0 9
63252: PPUSH
63253: LD_VAR 0 6
63257: PPUSH
63258: CALL_OW 331
// end ; end_of_file
63262: LD_VAR 0 4
63266: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
63267: LD_INT 0
63269: PPUSH
// ar_miner := 81 ;
63270: LD_ADDR_EXP 102
63274: PUSH
63275: LD_INT 81
63277: ST_TO_ADDR
// ar_crane := 88 ;
63278: LD_ADDR_EXP 101
63282: PUSH
63283: LD_INT 88
63285: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63286: LD_ADDR_EXP 96
63290: PUSH
63291: LD_INT 89
63293: ST_TO_ADDR
// us_hack := 99 ;
63294: LD_ADDR_EXP 97
63298: PUSH
63299: LD_INT 99
63301: ST_TO_ADDR
// us_artillery := 97 ;
63302: LD_ADDR_EXP 98
63306: PUSH
63307: LD_INT 97
63309: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63310: LD_ADDR_EXP 99
63314: PUSH
63315: LD_INT 91
63317: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
63318: LD_ADDR_EXP 100
63322: PUSH
63323: LD_INT 92
63325: ST_TO_ADDR
// ru_radar := 98 ;
63326: LD_ADDR_EXP 95
63330: PUSH
63331: LD_INT 98
63333: ST_TO_ADDR
// tech_Artillery := 80 ;
63334: LD_ADDR_EXP 103
63338: PUSH
63339: LD_INT 80
63341: ST_TO_ADDR
// tech_RadMat := 81 ;
63342: LD_ADDR_EXP 104
63346: PUSH
63347: LD_INT 81
63349: ST_TO_ADDR
// tech_BasicTools := 82 ;
63350: LD_ADDR_EXP 105
63354: PUSH
63355: LD_INT 82
63357: ST_TO_ADDR
// tech_Cargo := 83 ;
63358: LD_ADDR_EXP 106
63362: PUSH
63363: LD_INT 83
63365: ST_TO_ADDR
// tech_Track := 84 ;
63366: LD_ADDR_EXP 107
63370: PUSH
63371: LD_INT 84
63373: ST_TO_ADDR
// tech_Crane := 85 ;
63374: LD_ADDR_EXP 108
63378: PUSH
63379: LD_INT 85
63381: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63382: LD_ADDR_EXP 109
63386: PUSH
63387: LD_INT 86
63389: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63390: LD_ADDR_EXP 110
63394: PUSH
63395: LD_INT 87
63397: ST_TO_ADDR
// end ;
63398: LD_VAR 0 1
63402: RET
// every 1 do
63403: GO 63405
63405: DISABLE
// InitGlobalVariables ;
63406: CALL 63267 0 0
63410: END
