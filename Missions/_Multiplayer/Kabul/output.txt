// starting begin Game_Start := false ;
   0: LD_ADDR_EXP 9
   4: PUSH
   5: LD_INT 0
   7: ST_TO_ADDR
// Randomize ;
   8: CALL_OW 10
// Init ( ) ;
  12: CALL 112 0 0
// InitBot ( ) ;
  16: CALL 3668 0 0
// Game_Start := true ;
  20: LD_ADDR_EXP 9
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// end ;
  28: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , bot_side ] ) = 0 do
  29: LD_EXP 9
  33: PUSH
  34: LD_INT 22
  36: PUSH
  37: LD_EXP 8
  41: PUSH
  42: EMPTY
  43: LIST
  44: LIST
  45: PPUSH
  46: CALL_OW 69
  50: PUSH
  51: LD_INT 0
  53: EQUAL
  54: AND
  55: IFFALSE 64
  57: GO 59
  59: DISABLE
// YouWinInMultiplayer ;
  60: CALL_OW 106
  64: END
// every 0 0$01 trigger game_start and FilterAllUnits ( [ f_side , your_side ] ) = 0 do
  65: LD_EXP 9
  69: PUSH
  70: LD_INT 22
  72: PUSH
  73: LD_OWVAR 2
  77: PUSH
  78: EMPTY
  79: LIST
  80: LIST
  81: PPUSH
  82: CALL_OW 69
  86: PUSH
  87: LD_INT 0
  89: EQUAL
  90: AND
  91: IFFALSE 111
  93: GO 95
  95: DISABLE
// begin Multiplayer_Loose_Message ;
  96: CALL_OW 521
// Wait ( 0 0$03 ) ;
 100: LD_INT 105
 102: PPUSH
 103: CALL_OW 67
// YouLostInMultiplayer ;
 107: CALL_OW 107
// end ;
 111: END
// export Game_Type , Side_Positions , Side_Teams , Side_Nations , Teams ; export Team_Game , Side_Start , Bot_Side , Game_Start ; export number_of_people , skill_level , crates_spawn , respawning_time_min , respawning_time_max , amount_of_apeman ; export definitions , mines_list , apeman_areas , patrols , attackers , to_produce , veh_counter , queue_codes , rng , target , handicap , attackers_tmp ; export function Init ( ) ; var i , j ; begin
 112: LD_INT 0
 114: PPUSH
 115: PPUSH
 116: PPUSH
// definitions := [ ] ;
 117: LD_ADDR_EXP 16
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// if Multiplayer then
 124: LD_OWVAR 4
 128: IFFALSE 250
// begin Game_Type := mp_game_type ;
 130: LD_ADDR_EXP 1
 134: PUSH
 135: LD_OWVAR 6
 139: ST_TO_ADDR
// Your_Side := mp_player_side ;
 140: LD_ADDR_OWVAR 2
 144: PUSH
 145: LD_OWVAR 7
 149: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 150: LD_ADDR_EXP 2
 154: PUSH
 155: LD_OWVAR 17
 159: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 160: LD_ADDR_EXP 3
 164: PUSH
 165: LD_OWVAR 15
 169: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 170: LD_ADDR_EXP 4
 174: PUSH
 175: LD_OWVAR 16
 179: ST_TO_ADDR
// Teams := mp_teams ;
 180: LD_ADDR_EXP 5
 184: PUSH
 185: LD_OWVAR 12
 189: ST_TO_ADDR
// for i = 0 to 6 do
 190: LD_ADDR_VAR 0 2
 194: PUSH
 195: DOUBLE
 196: LD_INT 0
 198: DEC
 199: ST_TO_ADDR
 200: LD_INT 6
 202: PUSH
 203: FOR_TO
 204: IFFALSE 246
// definitions := Insert ( definitions , definitions + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_EXP 16
 215: PPUSH
 216: LD_EXP 16
 220: PUSH
 221: LD_INT 1
 223: PLUS
 224: PPUSH
 225: LD_VAR 0 2
 229: PPUSH
 230: CALL_OW 426
 234: PUSH
 235: LD_INT 1
 237: PLUS
 238: PPUSH
 239: CALL_OW 2
 243: ST_TO_ADDR
 244: GO 203
 246: POP
 247: POP
// end else
 248: GO 405
// begin Game_Type := 1 ;
 250: LD_ADDR_EXP 1
 254: PUSH
 255: LD_INT 1
 257: ST_TO_ADDR
// Your_Side := 2 ;
 258: LD_ADDR_OWVAR 2
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// Side_Positions := [ 0 , 1 , 0 , 0 , 2 , 0 , 3 , 0 ] ;
 266: LD_ADDR_EXP 2
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 1
 276: PUSH
 277: LD_INT 0
 279: PUSH
 280: LD_INT 0
 282: PUSH
 283: LD_INT 2
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 3
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: LIST
 302: LIST
 303: LIST
 304: ST_TO_ADDR
// Side_Teams := [ 0 , 1 , 0 , 0 , 1 , 0 , 1 , 0 ] ;
 305: LD_ADDR_EXP 3
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: LD_INT 0
 318: PUSH
 319: LD_INT 0
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: LD_INT 0
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: LIST
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 0 , 3 , 0 , 3 , 0 ] ;
 344: LD_ADDR_EXP 4
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: LD_INT 3
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: LD_INT 0
 360: PUSH
 361: LD_INT 3
 363: PUSH
 364: LD_INT 0
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: ST_TO_ADDR
// Teams := [ [ 2 , 5 , 7 ] ] ;
 383: LD_ADDR_EXP 5
 387: PUSH
 388: LD_INT 2
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 7
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: ST_TO_ADDR
// end ; Side_Start := [ [ 203 , 174 ] , [ 114 , 171 ] , [ 26 , 44 ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
 405: LD_ADDR_EXP 7
 409: PUSH
 410: LD_INT 203
 412: PUSH
 413: LD_INT 174
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 114
 422: PUSH
 423: LD_INT 171
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 26
 432: PUSH
 433: LD_INT 44
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: EMPTY
 441: PUSH
 442: EMPTY
 443: PUSH
 444: EMPTY
 445: PUSH
 446: EMPTY
 447: PUSH
 448: EMPTY
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: LIST
 457: LIST
 458: LIST
 459: ST_TO_ADDR
// Bot_Side := 2 ;
 460: LD_ADDR_EXP 8
 464: PUSH
 465: LD_INT 2
 467: ST_TO_ADDR
// for i = 1 to 8 do
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_INT 8
 480: PUSH
 481: FOR_TO
 482: IFFALSE 625
// begin if Multiplayer_GetPlayerIsSpec ( i ) or Multiplayer_GetPlayerIsComp ( i ) then
 484: LD_VAR 0 2
 488: PPUSH
 489: CALL_OW 530
 493: PUSH
 494: LD_VAR 0 2
 498: PPUSH
 499: CALL_OW 532
 503: OR
 504: IFFALSE 578
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 506: LD_ADDR_EXP 2
 510: PUSH
 511: LD_EXP 2
 515: PPUSH
 516: LD_VAR 0 2
 520: PPUSH
 521: LD_INT 0
 523: PPUSH
 524: CALL_OW 1
 528: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 529: LD_ADDR_EXP 5
 533: PUSH
 534: LD_EXP 5
 538: PPUSH
 539: LD_EXP 3
 543: PUSH
 544: LD_VAR 0 2
 548: ARRAY
 549: PPUSH
 550: LD_EXP 5
 554: PUSH
 555: LD_EXP 3
 559: PUSH
 560: LD_VAR 0 2
 564: ARRAY
 565: ARRAY
 566: PUSH
 567: LD_VAR 0 2
 571: DIFF
 572: PPUSH
 573: CALL_OW 1
 577: ST_TO_ADDR
// end ; if Side_Nations [ i ] and Side_Nations <> 3 then
 578: LD_EXP 4
 582: PUSH
 583: LD_VAR 0 2
 587: ARRAY
 588: PUSH
 589: LD_EXP 4
 593: PUSH
 594: LD_INT 3
 596: NONEQUAL
 597: AND
 598: IFFALSE 623
// Side_Nations := Replace ( Side_Nations , i , 3 ) ;
 600: LD_ADDR_EXP 4
 604: PUSH
 605: LD_EXP 4
 609: PPUSH
 610: LD_VAR 0 2
 614: PPUSH
 615: LD_INT 3
 617: PPUSH
 618: CALL_OW 1
 622: ST_TO_ADDR
// end ;
 623: GO 481
 625: POP
 626: POP
// if bot_side = 2 and Side_Positions [ 2 ] then
 627: LD_EXP 8
 631: PUSH
 632: LD_INT 2
 634: EQUAL
 635: PUSH
 636: LD_EXP 2
 640: PUSH
 641: LD_INT 2
 643: ARRAY
 644: AND
 645: IFFALSE 655
// bot_side := 5 ;
 647: LD_ADDR_EXP 8
 651: PUSH
 652: LD_INT 5
 654: ST_TO_ADDR
// if bot_side = 5 and Side_Positions [ 5 ] then
 655: LD_EXP 8
 659: PUSH
 660: LD_INT 5
 662: EQUAL
 663: PUSH
 664: LD_EXP 2
 668: PUSH
 669: LD_INT 5
 671: ARRAY
 672: AND
 673: IFFALSE 683
// bot_side := 8 ;
 675: LD_ADDR_EXP 8
 679: PUSH
 680: LD_INT 8
 682: ST_TO_ADDR
// Team_Game := false ;
 683: LD_ADDR_EXP 6
 687: PUSH
 688: LD_INT 0
 690: ST_TO_ADDR
// for i = 1 to 8 do
 691: LD_ADDR_VAR 0 2
 695: PUSH
 696: DOUBLE
 697: LD_INT 1
 699: DEC
 700: ST_TO_ADDR
 701: LD_INT 8
 703: PUSH
 704: FOR_TO
 705: IFFALSE 731
// if Side_Teams [ i ] then
 707: LD_EXP 3
 711: PUSH
 712: LD_VAR 0 2
 716: ARRAY
 717: IFFALSE 729
// begin Team_Game := true ;
 719: LD_ADDR_EXP 6
 723: PUSH
 724: LD_INT 1
 726: ST_TO_ADDR
// break ;
 727: GO 731
// end ;
 729: GO 704
 731: POP
 732: POP
// for i = 1 to 8 do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_INT 8
 745: PUSH
 746: FOR_TO
 747: IFFALSE 783
// if i <> bot_side then
 749: LD_VAR 0 2
 753: PUSH
 754: LD_EXP 8
 758: NONEQUAL
 759: IFFALSE 781
// SetAttitude ( i , bot_side , att_enemy , true ) ;
 761: LD_VAR 0 2
 765: PPUSH
 766: LD_EXP 8
 770: PPUSH
 771: LD_INT 2
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: CALL_OW 80
 781: GO 746
 783: POP
 784: POP
// for i in Teams do
 785: LD_ADDR_VAR 0 2
 789: PUSH
 790: LD_EXP 5
 794: PUSH
 795: FOR_IN
 796: IFFALSE 876
// for j = 2 to i do
 798: LD_ADDR_VAR 0 3
 802: PUSH
 803: DOUBLE
 804: LD_INT 2
 806: DEC
 807: ST_TO_ADDR
 808: LD_VAR 0 2
 812: PUSH
 813: FOR_TO
 814: IFFALSE 872
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
 816: LD_VAR 0 2
 820: PUSH
 821: LD_VAR 0 3
 825: ARRAY
 826: PPUSH
 827: LD_VAR 0 2
 831: PUSH
 832: LD_INT 1
 834: ARRAY
 835: PPUSH
 836: CALL_OW 343
// SetAttitude ( i [ j ] , i [ 1 ] , att_friend , true ) ;
 840: LD_VAR 0 2
 844: PUSH
 845: LD_VAR 0 3
 849: ARRAY
 850: PPUSH
 851: LD_VAR 0 2
 855: PUSH
 856: LD_INT 1
 858: ARRAY
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: LD_INT 1
 865: PPUSH
 866: CALL_OW 80
// end ;
 870: GO 813
 872: POP
 873: POP
 874: GO 795
 876: POP
 877: POP
// if not Multiplayer then
 878: LD_OWVAR 4
 882: NOT
 883: IFFALSE 920
// definitions := [ 1 , 1 , 1 , 1 , 2 , 3 , 3 ] ;
 885: LD_ADDR_EXP 16
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 1
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: LD_INT 3
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ definitions [ 1 ] ] ;
 920: LD_ADDR_EXP 10
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 16
 947: PUSH
 948: LD_INT 1
 950: ARRAY
 951: ARRAY
 952: ST_TO_ADDR
// skill_level := [ 2 , 4 , 6 , 8 ] [ definitions [ 2 ] ] ;
 953: LD_ADDR_EXP 11
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 4
 963: PUSH
 964: LD_INT 6
 966: PUSH
 967: LD_INT 8
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 16
 980: PUSH
 981: LD_INT 2
 983: ARRAY
 984: ARRAY
 985: ST_TO_ADDR
// crates_spawn := [ 0 0$30 , 0 0$25 , 0 0$20 , 0 0$17 ] [ definitions [ 3 ] ] ;
 986: LD_ADDR_EXP 12
 990: PUSH
 991: LD_INT 1050
 993: PUSH
 994: LD_INT 875
 996: PUSH
 997: LD_INT 700
 999: PUSH
1000: LD_INT 595
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 16
1013: PUSH
1014: LD_INT 3
1016: ARRAY
1017: ARRAY
1018: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ definitions [ 4 ] ] ;
1019: LD_ADDR_EXP 13
1023: PUSH
1024: LD_INT 0
1026: PUSH
1027: LD_INT 10500
1029: PUSH
1030: LD_INT 6300
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_EXP 16
1042: PUSH
1043: LD_INT 4
1045: ARRAY
1046: ARRAY
1047: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ definitions [ 4 ] ] ;
1048: LD_ADDR_EXP 14
1052: PUSH
1053: LD_INT 0
1055: PUSH
1056: LD_INT 31500
1058: PUSH
1059: LD_INT 10500
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: PUSH
1067: LD_EXP 16
1071: PUSH
1072: LD_INT 4
1074: ARRAY
1075: ARRAY
1076: ST_TO_ADDR
// amount_of_apeman := [ 0 , 3 , 5 , 7 ] [ definitions [ 5 ] ] ;
1077: LD_ADDR_EXP 15
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 3
1087: PUSH
1088: LD_INT 5
1090: PUSH
1091: LD_INT 7
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_EXP 16
1104: PUSH
1105: LD_INT 5
1107: ARRAY
1108: ARRAY
1109: ST_TO_ADDR
// difficulty := [ 1 , 2 , 3 ] [ definitions [ 6 ] ] ;
1110: LD_ADDR_OWVAR 67
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: LD_INT 3
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_EXP 16
1133: PUSH
1134: LD_INT 6
1136: ARRAY
1137: ARRAY
1138: ST_TO_ADDR
// handicap := [ 0 , 1 , 2 ] [ definitions [ 7 ] ] ;
1139: LD_ADDR_EXP 26
1143: PUSH
1144: LD_INT 0
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_EXP 16
1162: PUSH
1163: LD_INT 7
1165: ARRAY
1166: ARRAY
1167: ST_TO_ADDR
// queue_codes := [ 11353 , 12244 , 44444 , 12345 , 43413 , 14152 ] ;
1168: LD_ADDR_EXP 23
1172: PUSH
1173: LD_INT 11353
1175: PUSH
1176: LD_INT 12244
1178: PUSH
1179: LD_INT 44444
1181: PUSH
1182: LD_INT 12345
1184: PUSH
1185: LD_INT 43413
1187: PUSH
1188: LD_INT 14152
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: ST_TO_ADDR
// rng := Rand ( 1 , 6 ) ;
1199: LD_ADDR_EXP 24
1203: PUSH
1204: LD_INT 1
1206: PPUSH
1207: LD_INT 6
1209: PPUSH
1210: CALL_OW 12
1214: ST_TO_ADDR
// if bot_side <> 2 then
1215: LD_EXP 8
1219: PUSH
1220: LD_INT 2
1222: NONEQUAL
1223: IFFALSE 1266
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: PUSH
1245: FOR_IN
1246: IFFALSE 1264
// SetSide ( i , bot_side ) ;
1248: LD_VAR 0 2
1252: PPUSH
1253: LD_EXP 8
1257: PPUSH
1258: CALL_OW 235
1262: GO 1245
1264: POP
1265: POP
// ResetFog ;
1266: CALL_OW 335
// PreparePeople ( ) ;
1270: CALL 2100 0 0
// apeman_areas := [ ape1 , ape2 , ape3 ] ;
1274: LD_ADDR_EXP 18
1278: PUSH
1279: LD_INT 14
1281: PUSH
1282: LD_INT 15
1284: PUSH
1285: LD_INT 16
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: LIST
1292: ST_TO_ADDR
// if amount_of_apeman then
1293: LD_EXP 15
1297: IFFALSE 1347
// for j in apeman_areas do
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: LD_EXP 18
1308: PUSH
1309: FOR_IN
1310: IFFALSE 1345
// for i = 1 to amount_of_apeman do
1312: LD_ADDR_VAR 0 2
1316: PUSH
1317: DOUBLE
1318: LD_INT 1
1320: DEC
1321: ST_TO_ADDR
1322: LD_EXP 15
1326: PUSH
1327: FOR_TO
1328: IFFALSE 1341
// AddApeman ( j ) ;
1330: LD_VAR 0 3
1334: PPUSH
1335: CALL 3049 0 1
1339: GO 1327
1341: POP
1342: POP
1343: GO 1309
1345: POP
1346: POP
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
1347: LD_INT 22
1349: PUSH
1350: LD_OWVAR 2
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PPUSH
1359: CALL_OW 69
1363: PUSH
1364: LD_INT 1
1366: ARRAY
1367: PPUSH
1368: CALL_OW 87
// disable ( 17 ) ;
1372: LD_INT 17
1374: DISABLE_MARKED
// end ;
1375: LD_VAR 0 1
1379: RET
// every 3 3$40 trigger game_start do
1380: LD_EXP 9
1384: IFFALSE 1440
1386: GO 1388
1388: DISABLE
// begin CreateCratesArea ( tick mod 5 + 1 , kabul_crates , true ) ;
1389: LD_OWVAR 1
1393: PUSH
1394: LD_INT 5
1396: MOD
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: PPUSH
1402: LD_INT 13
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL_OW 55
// Wait ( 0 0$15 ) ;
1412: LD_INT 525
1414: PPUSH
1415: CALL_OW 67
// CreateCratesAnywhere ( tick mod 5 + 1 , true ) ;
1419: LD_OWVAR 1
1423: PUSH
1424: LD_INT 5
1426: MOD
1427: PUSH
1428: LD_INT 1
1430: PLUS
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: CALL_OW 57
// enable ;
1439: ENABLE
// end ;
1440: END
// every 0 0$01 + 0 0$10 trigger game_start do var cr , cr_queue ;
1441: LD_EXP 9
1445: IFFALSE 2097
1447: GO 1449
1449: DISABLE
1450: LD_INT 0
1452: PPUSH
1453: PPUSH
// begin cr := 1 ;
1454: LD_ADDR_VAR 0 1
1458: PUSH
1459: LD_INT 1
1461: ST_TO_ADDR
// cr_queue := [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) , rand ( 3 , 5 ) , rand ( 2 , 5 ) , rand ( 1 , 5 ) ] ;
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: LD_INT 1
1469: PPUSH
1470: LD_INT 3
1472: PPUSH
1473: CALL_OW 12
1477: PUSH
1478: LD_INT 2
1480: PPUSH
1481: LD_INT 4
1483: PPUSH
1484: CALL_OW 12
1488: PUSH
1489: LD_INT 3
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL_OW 12
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_INT 5
1505: PPUSH
1506: CALL_OW 12
1510: PUSH
1511: LD_INT 2
1513: PPUSH
1514: LD_INT 5
1516: PPUSH
1517: CALL_OW 12
1521: PUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 5
1527: PPUSH
1528: CALL_OW 12
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: ST_TO_ADDR
// while ( true ) do
1541: LD_INT 1
1543: IFFALSE 2097
// begin Wait ( crates_spawn + ( tick mod 35 * 60 ) ) ;
1545: LD_EXP 12
1549: PUSH
1550: LD_OWVAR 1
1554: PUSH
1555: LD_INT 35
1557: MOD
1558: PUSH
1559: LD_INT 60
1561: MUL
1562: PLUS
1563: PPUSH
1564: CALL_OW 67
// if cr mod 3 = 0 then
1568: LD_VAR 0 1
1572: PUSH
1573: LD_INT 3
1575: MOD
1576: PUSH
1577: LD_INT 0
1579: EQUAL
1580: IFFALSE 1733
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1582: LD_VAR 0 2
1586: PUSH
1587: LD_VAR 0 1
1591: PUSH
1592: LD_VAR 0 2
1596: MOD
1597: PUSH
1598: LD_INT 1
1600: PLUS
1601: ARRAY
1602: PPUSH
1603: LD_INT 17
1605: PPUSH
1606: LD_INT 1
1608: PPUSH
1609: CALL_OW 55
// Wait ( crates_spawn ) ;
1613: LD_EXP 12
1617: PPUSH
1618: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1622: LD_VAR 0 2
1626: PUSH
1627: LD_VAR 0 1
1631: PUSH
1632: LD_VAR 0 2
1636: MOD
1637: PUSH
1638: LD_INT 1
1640: PLUS
1641: ARRAY
1642: PPUSH
1643: LD_INT 18
1645: PPUSH
1646: LD_INT 1
1648: PPUSH
1649: CALL_OW 55
// Wait ( crates_spawn ) ;
1653: LD_EXP 12
1657: PPUSH
1658: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1662: LD_VAR 0 2
1666: PUSH
1667: LD_VAR 0 1
1671: PUSH
1672: LD_VAR 0 2
1676: MOD
1677: PUSH
1678: LD_INT 1
1680: PLUS
1681: ARRAY
1682: PPUSH
1683: LD_INT 19
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: CALL_OW 55
// Wait ( crates_spawn ) ;
1693: LD_EXP 12
1697: PPUSH
1698: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1702: LD_VAR 0 2
1706: PUSH
1707: LD_VAR 0 1
1711: PUSH
1712: LD_VAR 0 2
1716: MOD
1717: PUSH
1718: LD_INT 1
1720: PLUS
1721: ARRAY
1722: PPUSH
1723: LD_INT 17
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: CALL_OW 55
// end ; if cr mod 3 = 1 then
1733: LD_VAR 0 1
1737: PUSH
1738: LD_INT 3
1740: MOD
1741: PUSH
1742: LD_INT 1
1744: EQUAL
1745: IFFALSE 1898
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1747: LD_VAR 0 2
1751: PUSH
1752: LD_VAR 0 1
1756: PUSH
1757: LD_VAR 0 2
1761: MOD
1762: PUSH
1763: LD_INT 1
1765: PLUS
1766: ARRAY
1767: PPUSH
1768: LD_INT 18
1770: PPUSH
1771: LD_INT 1
1773: PPUSH
1774: CALL_OW 55
// Wait ( crates_spawn ) ;
1778: LD_EXP 12
1782: PPUSH
1783: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1787: LD_VAR 0 2
1791: PUSH
1792: LD_VAR 0 1
1796: PUSH
1797: LD_VAR 0 2
1801: MOD
1802: PUSH
1803: LD_INT 1
1805: PLUS
1806: ARRAY
1807: PPUSH
1808: LD_INT 17
1810: PPUSH
1811: LD_INT 1
1813: PPUSH
1814: CALL_OW 55
// Wait ( crates_spawn ) ;
1818: LD_EXP 12
1822: PPUSH
1823: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1827: LD_VAR 0 2
1831: PUSH
1832: LD_VAR 0 1
1836: PUSH
1837: LD_VAR 0 2
1841: MOD
1842: PUSH
1843: LD_INT 1
1845: PLUS
1846: ARRAY
1847: PPUSH
1848: LD_INT 19
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 55
// Wait ( crates_spawn ) ;
1858: LD_EXP 12
1862: PPUSH
1863: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1867: LD_VAR 0 2
1871: PUSH
1872: LD_VAR 0 1
1876: PUSH
1877: LD_VAR 0 2
1881: MOD
1882: PUSH
1883: LD_INT 1
1885: PLUS
1886: ARRAY
1887: PPUSH
1888: LD_INT 18
1890: PPUSH
1891: LD_INT 1
1893: PPUSH
1894: CALL_OW 55
// end ; if cr mod 3 = 2 then
1898: LD_VAR 0 1
1902: PUSH
1903: LD_INT 3
1905: MOD
1906: PUSH
1907: LD_INT 2
1909: EQUAL
1910: IFFALSE 2063
// begin CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
1912: LD_VAR 0 2
1916: PUSH
1917: LD_VAR 0 1
1921: PUSH
1922: LD_VAR 0 2
1926: MOD
1927: PUSH
1928: LD_INT 1
1930: PLUS
1931: ARRAY
1932: PPUSH
1933: LD_INT 19
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL_OW 55
// Wait ( crates_spawn ) ;
1943: LD_EXP 12
1947: PPUSH
1948: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr2 , true ) ;
1952: LD_VAR 0 2
1956: PUSH
1957: LD_VAR 0 1
1961: PUSH
1962: LD_VAR 0 2
1966: MOD
1967: PUSH
1968: LD_INT 1
1970: PLUS
1971: ARRAY
1972: PPUSH
1973: LD_INT 18
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: CALL_OW 55
// Wait ( crates_spawn ) ;
1983: LD_EXP 12
1987: PPUSH
1988: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr1 , true ) ;
1992: LD_VAR 0 2
1996: PUSH
1997: LD_VAR 0 1
2001: PUSH
2002: LD_VAR 0 2
2006: MOD
2007: PUSH
2008: LD_INT 1
2010: PLUS
2011: ARRAY
2012: PPUSH
2013: LD_INT 17
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: CALL_OW 55
// Wait ( crates_spawn ) ;
2023: LD_EXP 12
2027: PPUSH
2028: CALL_OW 67
// CreateCratesArea ( cr_queue [ cr mod cr_queue + 1 ] , cr3 , true ) ;
2032: LD_VAR 0 2
2036: PUSH
2037: LD_VAR 0 1
2041: PUSH
2042: LD_VAR 0 2
2046: MOD
2047: PUSH
2048: LD_INT 1
2050: PLUS
2051: ARRAY
2052: PPUSH
2053: LD_INT 19
2055: PPUSH
2056: LD_INT 1
2058: PPUSH
2059: CALL_OW 55
// end ; cr := cr + 1 ;
2063: LD_ADDR_VAR 0 1
2067: PUSH
2068: LD_VAR 0 1
2072: PUSH
2073: LD_INT 1
2075: PLUS
2076: ST_TO_ADDR
// if cr > 150 then
2077: LD_VAR 0 1
2081: PUSH
2082: LD_INT 150
2084: GREATER
2085: IFFALSE 2095
// cr := 43 ;
2087: LD_ADDR_VAR 0 1
2091: PUSH
2092: LD_INT 43
2094: ST_TO_ADDR
// end ;
2095: GO 1541
// end ; end_of_file
2097: PPOPN 2
2099: END
// export function PreparePeople ( ) ; var i , j , un , to_copy , x , y , c , d ; begin
2100: LD_INT 0
2102: PPUSH
2103: PPUSH
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// to_copy := [ ] ;
2111: LD_ADDR_VAR 0 5
2115: PUSH
2116: EMPTY
2117: ST_TO_ADDR
// for i = 1 to 8 do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_INT 8
2130: PUSH
2131: FOR_TO
2132: IFFALSE 3042
// begin if Side_Positions [ i ] then
2134: LD_EXP 2
2138: PUSH
2139: LD_VAR 0 2
2143: ARRAY
2144: IFFALSE 3040
// begin uc_side := i ;
2146: LD_ADDR_OWVAR 20
2150: PUSH
2151: LD_VAR 0 2
2155: ST_TO_ADDR
// uc_nation := Side_Nations [ i ] ;
2156: LD_ADDR_OWVAR 21
2160: PUSH
2161: LD_EXP 4
2165: PUSH
2166: LD_VAR 0 2
2170: ARRAY
2171: ST_TO_ADDR
// x := Side_Start [ Side_Positions [ i ] ] [ 1 ] ;
2172: LD_ADDR_VAR 0 6
2176: PUSH
2177: LD_EXP 7
2181: PUSH
2182: LD_EXP 2
2186: PUSH
2187: LD_VAR 0 2
2191: ARRAY
2192: ARRAY
2193: PUSH
2194: LD_INT 1
2196: ARRAY
2197: ST_TO_ADDR
// y := Side_Start [ Side_Positions [ i ] ] [ 2 ] ;
2198: LD_ADDR_VAR 0 7
2202: PUSH
2203: LD_EXP 7
2207: PUSH
2208: LD_EXP 2
2212: PUSH
2213: LD_VAR 0 2
2217: ARRAY
2218: ARRAY
2219: PUSH
2220: LD_INT 2
2222: ARRAY
2223: ST_TO_ADDR
// hc_importance := 100 ;
2224: LD_ADDR_OWVAR 32
2228: PUSH
2229: LD_INT 100
2231: ST_TO_ADDR
// if Multiplayer then
2232: LD_OWVAR 4
2236: IFFALSE 2294
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2238: LD_ADDR_OWVAR 26
2242: PUSH
2243: LD_OWVAR 19
2247: PUSH
2248: LD_OWVAR 20
2252: ARRAY
2253: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2254: LD_ADDR_OWVAR 33
2258: PUSH
2259: LD_STRING MULTIAVATARS
2261: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2262: LD_ADDR_OWVAR 34
2266: PUSH
2267: LD_OWVAR 20
2271: PPUSH
2272: CALL_OW 525
2276: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2277: LD_ADDR_OWVAR 27
2281: PUSH
2282: LD_OWVAR 20
2286: PPUSH
2287: CALL_OW 526
2291: ST_TO_ADDR
// end else
2292: GO 2326
// begin hc_name :=  ;
2294: LD_ADDR_OWVAR 26
2298: PUSH
2299: LD_STRING 
2301: ST_TO_ADDR
// hc_gallery :=  ;
2302: LD_ADDR_OWVAR 33
2306: PUSH
2307: LD_STRING 
2309: ST_TO_ADDR
// hc_sex := Rand ( 1 , 2 ) ;
2310: LD_ADDR_OWVAR 27
2314: PUSH
2315: LD_INT 1
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL_OW 12
2325: ST_TO_ADDR
// end ; PrepareHuman ( hc_sex , 1 , skill_level ) ;
2326: LD_OWVAR 27
2330: PPUSH
2331: LD_INT 1
2333: PPUSH
2334: LD_EXP 11
2338: PPUSH
2339: CALL_OW 380
// un := CreateHuman ;
2343: LD_ADDR_VAR 0 4
2347: PUSH
2348: CALL_OW 44
2352: ST_TO_ADDR
// if not to_copy then
2353: LD_VAR 0 5
2357: NOT
2358: IFFALSE 2385
// to_copy := Replace ( to_copy , 1 , un ) else
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_VAR 0 5
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: LD_VAR 0 4
2377: PPUSH
2378: CALL_OW 1
2382: ST_TO_ADDR
2383: GO 2461
// begin CopySkills ( to_copy [ 1 ] , un ) ;
2385: LD_VAR 0 5
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 4
2398: PPUSH
2399: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ 1 ] , attr_speed ) ) ;
2403: LD_VAR 0 4
2407: PPUSH
2408: LD_INT 2
2410: PPUSH
2411: LD_VAR 0 5
2415: PUSH
2416: LD_INT 1
2418: ARRAY
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 260
2427: PPUSH
2428: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ 1 ] , attr_stamina ) ) ;
2432: LD_VAR 0 4
2436: PPUSH
2437: LD_INT 1
2439: PPUSH
2440: LD_VAR 0 5
2444: PUSH
2445: LD_INT 1
2447: ARRAY
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL_OW 260
2456: PPUSH
2457: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2461: LD_VAR 0 4
2465: PPUSH
2466: LD_VAR 0 6
2470: PPUSH
2471: LD_VAR 0 7
2475: PPUSH
2476: LD_INT 10
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: CALL_OW 50
// hc_importance := 0 ;
2486: LD_ADDR_OWVAR 32
2490: PUSH
2491: LD_INT 0
2493: ST_TO_ADDR
// hc_name :=  ;
2494: LD_ADDR_OWVAR 26
2498: PUSH
2499: LD_STRING 
2501: ST_TO_ADDR
// hc_gallery :=  ;
2502: LD_ADDR_OWVAR 33
2506: PUSH
2507: LD_STRING 
2509: ST_TO_ADDR
// d := ( number_of_people - 1 ) / 4 ;
2510: LD_ADDR_VAR 0 9
2514: PUSH
2515: LD_EXP 10
2519: PUSH
2520: LD_INT 1
2522: MINUS
2523: PUSH
2524: LD_INT 4
2526: DIVREAL
2527: ST_TO_ADDR
// c := 1 ;
2528: LD_ADDR_VAR 0 8
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// for j = 2 to number_of_people do
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: DOUBLE
2542: LD_INT 2
2544: DEC
2545: ST_TO_ADDR
2546: LD_EXP 10
2550: PUSH
2551: FOR_TO
2552: IFFALSE 2763
// begin PrepareHuman ( false , c , skill_level ) ;
2554: LD_INT 0
2556: PPUSH
2557: LD_VAR 0 8
2561: PPUSH
2562: LD_EXP 11
2566: PPUSH
2567: CALL_OW 380
// if ( j - 1 ) mod d = 0 then
2571: LD_VAR 0 3
2575: PUSH
2576: LD_INT 1
2578: MINUS
2579: PUSH
2580: LD_VAR 0 9
2584: MOD
2585: PUSH
2586: LD_INT 0
2588: EQUAL
2589: IFFALSE 2605
// c := c + 1 ;
2591: LD_ADDR_VAR 0 8
2595: PUSH
2596: LD_VAR 0 8
2600: PUSH
2601: LD_INT 1
2603: PLUS
2604: ST_TO_ADDR
// un := CreateHuman ;
2605: LD_ADDR_VAR 0 4
2609: PUSH
2610: CALL_OW 44
2614: ST_TO_ADDR
// if to_copy < j then
2615: LD_VAR 0 5
2619: PUSH
2620: LD_VAR 0 3
2624: LESS
2625: IFFALSE 2654
// to_copy := Replace ( to_copy , j , un ) else
2627: LD_ADDR_VAR 0 5
2631: PUSH
2632: LD_VAR 0 5
2636: PPUSH
2637: LD_VAR 0 3
2641: PPUSH
2642: LD_VAR 0 4
2646: PPUSH
2647: CALL_OW 1
2651: ST_TO_ADDR
2652: GO 2736
// begin CopySkills ( to_copy [ j ] , un ) ;
2654: LD_VAR 0 5
2658: PUSH
2659: LD_VAR 0 3
2663: ARRAY
2664: PPUSH
2665: LD_VAR 0 4
2669: PPUSH
2670: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( to_copy [ j ] , attr_speed ) ) ;
2674: LD_VAR 0 4
2678: PPUSH
2679: LD_INT 2
2681: PPUSH
2682: LD_VAR 0 5
2686: PUSH
2687: LD_VAR 0 3
2691: ARRAY
2692: PPUSH
2693: LD_INT 2
2695: PPUSH
2696: CALL_OW 260
2700: PPUSH
2701: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( to_copy [ j ] , attr_stamina ) ) ;
2705: LD_VAR 0 4
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_VAR 0 5
2717: PUSH
2718: LD_VAR 0 3
2722: ARRAY
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 260
2731: PPUSH
2732: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , 10 , false ) ;
2736: LD_VAR 0 4
2740: PPUSH
2741: LD_VAR 0 6
2745: PPUSH
2746: LD_VAR 0 7
2750: PPUSH
2751: LD_INT 10
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 50
// end ;
2761: GO 2551
2763: POP
2764: POP
// if handicap then
2765: LD_EXP 26
2769: IFFALSE 3040
// begin if handicap = 1 then
2771: LD_EXP 26
2775: PUSH
2776: LD_INT 1
2778: EQUAL
2779: IFFALSE 2858
// for j = 1 to 2 do
2781: LD_ADDR_VAR 0 3
2785: PUSH
2786: DOUBLE
2787: LD_INT 1
2789: DEC
2790: ST_TO_ADDR
2791: LD_INT 2
2793: PUSH
2794: FOR_TO
2795: IFFALSE 2856
// begin vc_chassis := ru_medium_tracked ;
2797: LD_ADDR_OWVAR 37
2801: PUSH
2802: LD_INT 22
2804: ST_TO_ADDR
// vc_engine := engine_combustion ;
2805: LD_ADDR_OWVAR 39
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// vc_control := control_manual ;
2813: LD_ADDR_OWVAR 38
2817: PUSH
2818: LD_INT 1
2820: ST_TO_ADDR
// vc_weapon := ru_gun ;
2821: LD_ADDR_OWVAR 40
2825: PUSH
2826: LD_INT 44
2828: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2829: CALL_OW 45
2833: PPUSH
2834: LD_VAR 0 6
2838: PPUSH
2839: LD_VAR 0 7
2843: PPUSH
2844: LD_INT 13
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 50
// end ;
2854: GO 2794
2856: POP
2857: POP
// if handicap = 2 then
2858: LD_EXP 26
2862: PUSH
2863: LD_INT 2
2865: EQUAL
2866: IFFALSE 3040
// begin for j = 1 to 2 do
2868: LD_ADDR_VAR 0 3
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 2
2880: PUSH
2881: FOR_TO
2882: IFFALSE 2956
// begin vc_chassis := ru_heavy_tracked ;
2884: LD_ADDR_OWVAR 37
2888: PUSH
2889: LD_INT 24
2891: ST_TO_ADDR
// vc_engine := engine_combustion ;
2892: LD_ADDR_OWVAR 39
2896: PUSH
2897: LD_INT 1
2899: ST_TO_ADDR
// vc_control := control_manual ;
2900: LD_ADDR_OWVAR 38
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_heavy_gun ] [ j ] ;
2908: LD_ADDR_OWVAR 40
2912: PUSH
2913: LD_INT 43
2915: PUSH
2916: LD_INT 46
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_VAR 0 3
2927: ARRAY
2928: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , x , y , 13 , false ) ;
2929: CALL_OW 45
2933: PPUSH
2934: LD_VAR 0 6
2938: PPUSH
2939: LD_VAR 0 7
2943: PPUSH
2944: LD_INT 13
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 50
// end ;
2954: GO 2881
2956: POP
2957: POP
// vc_chassis := ru_medium_tracked ;
2958: LD_ADDR_OWVAR 37
2962: PUSH
2963: LD_INT 22
2965: ST_TO_ADDR
// vc_engine := engine_siberite ;
2966: LD_ADDR_OWVAR 39
2970: PUSH
2971: LD_INT 3
2973: ST_TO_ADDR
// vc_control := control_computer ;
2974: LD_ADDR_OWVAR 38
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
2982: LD_ADDR_OWVAR 40
2986: PUSH
2987: LD_INT 51
2989: ST_TO_ADDR
// un := CreateVehicle ;
2990: LD_ADDR_VAR 0 4
2994: PUSH
2995: CALL_OW 45
2999: ST_TO_ADDR
// PlaceUnitXYR ( un , x , y , 13 , false ) ;
3000: LD_VAR 0 4
3004: PPUSH
3005: LD_VAR 0 6
3009: PPUSH
3010: LD_VAR 0 7
3014: PPUSH
3015: LD_INT 13
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 50
// SetCargo ( un , mat_cans , 100 ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 100
3035: PPUSH
3036: CALL_OW 290
// end ; end ; end ; end ;
3040: GO 2131
3042: POP
3043: POP
// end ;
3044: LD_VAR 0 1
3048: RET
// export function AddApeman ( area ) ; begin
3049: LD_INT 0
3051: PPUSH
// uc_nation := 0 ;
3052: LD_ADDR_OWVAR 21
3056: PUSH
3057: LD_INT 0
3059: ST_TO_ADDR
// uc_side := 0 ;
3060: LD_ADDR_OWVAR 20
3064: PUSH
3065: LD_INT 0
3067: ST_TO_ADDR
// hc_agressivity := rand ( - 10 , 15 ) ;
3068: LD_ADDR_OWVAR 35
3072: PUSH
3073: LD_INT 10
3075: NEG
3076: PPUSH
3077: LD_INT 15
3079: PPUSH
3080: CALL_OW 12
3084: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
3085: LD_INT 0
3087: PPUSH
3088: LD_INT 12
3090: PPUSH
3091: LD_INT 0
3093: PPUSH
3094: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
3098: LD_ADDR_OWVAR 29
3102: PUSH
3103: LD_INT 10
3105: PUSH
3106: LD_INT 12
3108: PUSH
3109: EMPTY
3110: LIST
3111: LIST
3112: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , area , false ) ;
3113: CALL_OW 44
3117: PPUSH
3118: LD_VAR 0 1
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 49
// end ;
3130: LD_VAR 0 2
3134: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
3135: LD_INT 0
3137: PPUSH
3138: PPUSH
3139: PPUSH
3140: PPUSH
// r := 100 ;
3141: LD_ADDR_VAR 0 5
3145: PUSH
3146: LD_INT 100
3148: ST_TO_ADDR
// x := 0 ;
3149: LD_ADDR_VAR 0 6
3153: PUSH
3154: LD_INT 0
3156: ST_TO_ADDR
// while ( x < n ) do
3157: LD_VAR 0 6
3161: PUSH
3162: LD_VAR 0 2
3166: LESS
3167: IFFALSE 3482
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
3169: LD_ADDR_VAR 0 4
3173: PUSH
3174: DOUBLE
3175: LD_INT 1
3177: DEC
3178: ST_TO_ADDR
3179: LD_VAR 0 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 517
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3478
// begin if r > 50 then
3199: LD_VAR 0 5
3203: PUSH
3204: LD_INT 50
3206: GREATER
3207: IFFALSE 3454
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
3209: LD_VAR 0 1
3213: PPUSH
3214: LD_INT 0
3216: PPUSH
3217: CALL_OW 517
3221: PUSH
3222: LD_INT 1
3224: ARRAY
3225: PUSH
3226: LD_VAR 0 4
3230: ARRAY
3231: PPUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: CALL_OW 517
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PUSH
3249: LD_VAR 0 4
3253: ARRAY
3254: PPUSH
3255: CALL_OW 458
3259: NOT
3260: IFFALSE 3438
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , bot_side , 0 ) ;
3262: LD_VAR 0 1
3266: PPUSH
3267: LD_INT 0
3269: PPUSH
3270: CALL_OW 517
3274: PUSH
3275: LD_INT 1
3277: ARRAY
3278: PUSH
3279: LD_VAR 0 4
3283: ARRAY
3284: PPUSH
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 517
3297: PUSH
3298: LD_INT 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 4
3306: ARRAY
3307: PPUSH
3308: LD_EXP 8
3312: PPUSH
3313: LD_INT 0
3315: PPUSH
3316: CALL_OW 454
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 1 ] [ i ] ) ;
3320: LD_ADDR_EXP 17
3324: PUSH
3325: LD_EXP 17
3329: PPUSH
3330: LD_EXP 17
3334: PUSH
3335: LD_INT 1
3337: PLUS
3338: PPUSH
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 517
3351: PUSH
3352: LD_INT 1
3354: ARRAY
3355: PUSH
3356: LD_VAR 0 4
3360: ARRAY
3361: PPUSH
3362: CALL_OW 2
3366: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , AreaToList ( area , 0 ) [ 2 ] [ i ] ) ;
3367: LD_ADDR_EXP 17
3371: PUSH
3372: LD_EXP 17
3376: PPUSH
3377: LD_EXP 17
3381: PUSH
3382: LD_INT 1
3384: PLUS
3385: PPUSH
3386: LD_VAR 0 1
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL_OW 517
3398: PUSH
3399: LD_INT 2
3401: ARRAY
3402: PUSH
3403: LD_VAR 0 4
3407: ARRAY
3408: PPUSH
3409: CALL_OW 2
3413: ST_TO_ADDR
// r := 0 ;
3414: LD_ADDR_VAR 0 5
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// x := x + 1 ;
3422: LD_ADDR_VAR 0 6
3426: PUSH
3427: LD_VAR 0 6
3431: PUSH
3432: LD_INT 1
3434: PLUS
3435: ST_TO_ADDR
// end else
3436: GO 3452
// r := r + 35 ;
3438: LD_ADDR_VAR 0 5
3442: PUSH
3443: LD_VAR 0 5
3447: PUSH
3448: LD_INT 35
3450: PLUS
3451: ST_TO_ADDR
// end else
3452: GO 3476
// r := r + rand ( 10 , 25 ) ;
3454: LD_ADDR_VAR 0 5
3458: PUSH
3459: LD_VAR 0 5
3463: PUSH
3464: LD_INT 10
3466: PPUSH
3467: LD_INT 25
3469: PPUSH
3470: CALL_OW 12
3474: PLUS
3475: ST_TO_ADDR
// end ;
3476: GO 3196
3478: POP
3479: POP
3480: GO 3157
// end ;
3482: LD_VAR 0 3
3486: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
3487: LD_INT 0
3489: PPUSH
3490: PPUSH
3491: PPUSH
// if not GetControl ( veh ) = control_manual then
3492: LD_VAR 0 1
3496: PPUSH
3497: CALL_OW 263
3501: PUSH
3502: LD_INT 1
3504: EQUAL
3505: NOT
3506: IFFALSE 3518
// result := false else
3508: LD_ADDR_VAR 0 2
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
3516: GO 3663
// if veh in FilterAllUnits ( [ f_empty ] ) then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 58
3525: PUSH
3526: EMPTY
3527: LIST
3528: PPUSH
3529: CALL_OW 69
3533: IN
3534: IFFALSE 3546
// result := false else
3536: LD_ADDR_VAR 0 2
3540: PUSH
3541: LD_INT 0
3543: ST_TO_ADDR
3544: GO 3663
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
3546: LD_ADDR_VAR 0 4
3550: PUSH
3551: LD_INT 22
3553: PUSH
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL_OW 255
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 55
3570: PUSH
3571: EMPTY
3572: LIST
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 69
3582: ST_TO_ADDR
// if not filter then
3583: LD_VAR 0 4
3587: NOT
3588: IFFALSE 3600
// result := false else
3590: LD_ADDR_VAR 0 2
3594: PUSH
3595: LD_INT 0
3597: ST_TO_ADDR
3598: GO 3663
// for i = 1 to filter do
3600: LD_ADDR_VAR 0 3
3604: PUSH
3605: DOUBLE
3606: LD_INT 1
3608: DEC
3609: ST_TO_ADDR
3610: LD_VAR 0 4
3614: PUSH
3615: FOR_TO
3616: IFFALSE 3661
// if IsDriver ( filter [ i ] ) = veh then
3618: LD_VAR 0 4
3622: PUSH
3623: LD_VAR 0 3
3627: ARRAY
3628: PPUSH
3629: CALL 42484 0 1
3633: PUSH
3634: LD_VAR 0 1
3638: EQUAL
3639: IFFALSE 3659
// begin result := filter [ i ] ;
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: LD_VAR 0 4
3650: PUSH
3651: LD_VAR 0 3
3655: ARRAY
3656: ST_TO_ADDR
// break ;
3657: GO 3661
// end ;
3659: GO 3615
3661: POP
3662: POP
// end ; end ; end_of_file
3663: LD_VAR 0 2
3667: RET
// export function InitBot ; var i , ct , hex , side , un , veh , weapons , skill ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
3673: PPUSH
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
// side := Bot_Side ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: LD_EXP 8
3688: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
3689: LD_ADDR_VAR 0 9
3693: PUSH
3694: LD_INT 4
3696: PUSH
3697: LD_INT 6
3699: PUSH
3700: LD_INT 8
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: LIST
3707: PUSH
3708: LD_OWVAR 67
3712: ARRAY
3713: ST_TO_ADDR
// weapons := [ ar_gun , ar_rocket_launcher , ar_gatling_gun , ar_flame_thrower ] ;
3714: LD_ADDR_VAR 0 8
3718: PUSH
3719: LD_INT 27
3721: PUSH
3722: LD_INT 28
3724: PUSH
3725: LD_INT 25
3727: PUSH
3728: LD_INT 26
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: ST_TO_ADDR
// veh_counter := [ 4 , 5 , 6 ] [ Difficulty ] ;
3737: LD_ADDR_EXP 22
3741: PUSH
3742: LD_INT 4
3744: PUSH
3745: LD_INT 5
3747: PUSH
3748: LD_INT 6
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: LD_OWVAR 67
3760: ARRAY
3761: ST_TO_ADDR
// ct := [ ] ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: EMPTY
3768: ST_TO_ADDR
// patrols := [ ] ;
3769: LD_ADDR_EXP 19
3773: PUSH
3774: EMPTY
3775: ST_TO_ADDR
// attackers := [ ] ;
3776: LD_ADDR_EXP 20
3780: PUSH
3781: EMPTY
3782: ST_TO_ADDR
// attackers_tmp := [ ] ;
3783: LD_ADDR_EXP 27
3787: PUSH
3788: EMPTY
3789: ST_TO_ADDR
// to_produce := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
3790: LD_ADDR_EXP 21
3794: PUSH
3795: LD_INT 14
3797: PUSH
3798: LD_INT 1
3800: PUSH
3801: LD_INT 2
3803: PUSH
3804: LD_INT 27
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 14
3815: PUSH
3816: LD_INT 1
3818: PUSH
3819: LD_INT 2
3821: PUSH
3822: LD_INT 25
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 14
3833: PUSH
3834: LD_INT 1
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 28
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 14
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: LD_INT 2
3857: PUSH
3858: LD_INT 29
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_INT 14
3869: PUSH
3870: LD_INT 1
3872: PUSH
3873: LD_INT 2
3875: PUSH
3876: LD_INT 27
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 13
3887: PUSH
3888: LD_INT 3
3890: PUSH
3891: LD_INT 2
3893: PUSH
3894: LD_INT 29
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: ST_TO_ADDR
// SetBName ( ar_dep , newkabul ) ;
3911: LD_INT 2
3913: PPUSH
3914: LD_STRING newkabul
3916: PPUSH
3917: CALL_OW 500
// SetResourceType ( GetBase ( ar_dep ) , mat_cans , 90000 ) ;
3921: LD_INT 2
3923: PPUSH
3924: CALL_OW 274
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: LD_INT 90000
3934: PPUSH
3935: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_oil , 9000 ) ;
3939: LD_INT 2
3941: PPUSH
3942: CALL_OW 274
3946: PPUSH
3947: LD_INT 2
3949: PPUSH
3950: LD_INT 9000
3952: PPUSH
3953: CALL_OW 277
// SetResourceType ( GetBase ( ar_dep ) , mat_siberit , 3000 ) ;
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 274
3964: PPUSH
3965: LD_INT 3
3967: PPUSH
3968: LD_INT 3000
3970: PPUSH
3971: CALL_OW 277
// if Difficulty > 1 then
3975: LD_OWVAR 67
3979: PUSH
3980: LD_INT 1
3982: GREATER
3983: IFFALSE 4000
// SetTech ( 5 , side , state_researched ) ;
3985: LD_INT 5
3987: PPUSH
3988: LD_VAR 0 5
3992: PPUSH
3993: LD_INT 2
3995: PPUSH
3996: CALL_OW 322
// SetTech ( tech_mortar , side , state_researched ) ;
4000: LD_INT 41
4002: PPUSH
4003: LD_VAR 0 5
4007: PPUSH
4008: LD_INT 2
4010: PPUSH
4011: CALL_OW 322
// SetTech ( tech_weap1 , side , state_researched ) ;
4015: LD_INT 51
4017: PPUSH
4018: LD_VAR 0 5
4022: PPUSH
4023: LD_INT 2
4025: PPUSH
4026: CALL_OW 322
// SetTech ( tech_weap2 , side , state_researched ) ;
4030: LD_INT 52
4032: PPUSH
4033: LD_VAR 0 5
4037: PPUSH
4038: LD_INT 2
4040: PPUSH
4041: CALL_OW 322
// SetTech ( tech_weap3 , side , state_researched ) ;
4045: LD_INT 53
4047: PPUSH
4048: LD_VAR 0 5
4052: PPUSH
4053: LD_INT 2
4055: PPUSH
4056: CALL_OW 322
// SetTech ( tech_opto1 , side , state_researched ) ;
4060: LD_INT 60
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 2
4070: PPUSH
4071: CALL_OW 322
// SetTech ( tech_opto2 , side , state_researched ) ;
4075: LD_INT 61
4077: PPUSH
4078: LD_VAR 0 5
4082: PPUSH
4083: LD_INT 2
4085: PPUSH
4086: CALL_OW 322
// SetTech ( tech_opto3 , side , state_researched ) ;
4090: LD_INT 62
4092: PPUSH
4093: LD_VAR 0 5
4097: PPUSH
4098: LD_INT 2
4100: PPUSH
4101: CALL_OW 322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: LD_INT 22
4112: PUSH
4113: LD_VAR 0 5
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 21
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 69
4140: PUSH
4141: FOR_IN
4142: IFFALSE 4175
// SetBLevel ( i , [ 6 , 8 , 10 ] [ Difficulty ] ) ;
4144: LD_VAR 0 2
4148: PPUSH
4149: LD_INT 6
4151: PUSH
4152: LD_INT 8
4154: PUSH
4155: LD_INT 10
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 241
4173: GO 4141
4175: POP
4176: POP
// if Difficulty > 1 then
4177: LD_OWVAR 67
4181: PUSH
4182: LD_INT 1
4184: GREATER
4185: IFFALSE 4194
// RemoveEnvironmentArea ( forest_road ) ;
4187: LD_INT 11
4189: PPUSH
4190: CALL_OW 355
// PlaceMines ( mine_west_zone , [ 10 , 15 , 20 ] [ Difficulty ] ) ;
4194: LD_INT 4
4196: PPUSH
4197: LD_INT 10
4199: PUSH
4200: LD_INT 15
4202: PUSH
4203: LD_INT 20
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_OWVAR 67
4215: ARRAY
4216: PPUSH
4217: CALL 3135 0 2
// PlaceMines ( mine_east_zone , [ 7 , 14 , 18 ] [ Difficulty ] ) ;
4221: LD_INT 5
4223: PPUSH
4224: LD_INT 7
4226: PUSH
4227: LD_INT 14
4229: PUSH
4230: LD_INT 18
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PUSH
4238: LD_OWVAR 67
4242: ARRAY
4243: PPUSH
4244: CALL 3135 0 2
// PlaceMines ( mine_south_zone , [ 5 , 11 , 17 ] [ Difficulty ] ) ;
4248: LD_INT 7
4250: PPUSH
4251: LD_INT 5
4253: PUSH
4254: LD_INT 11
4256: PUSH
4257: LD_INT 17
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_OWVAR 67
4269: ARRAY
4270: PPUSH
4271: CALL 3135 0 2
// PlaceMines ( mine_high_zone , [ 0 , 3 , 5 ] [ Difficulty ] ) ;
4275: LD_INT 6
4277: PPUSH
4278: LD_INT 0
4280: PUSH
4281: LD_INT 3
4283: PUSH
4284: LD_INT 5
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: PUSH
4292: LD_OWVAR 67
4296: ARRAY
4297: PPUSH
4298: CALL 3135 0 2
// PlaceMines ( mine_road_zone , [ 2 , 5 , 8 ] [ Difficulty ] ) ;
4302: LD_INT 8
4304: PPUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 5
4310: PUSH
4311: LD_INT 8
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: PUSH
4319: LD_OWVAR 67
4323: ARRAY
4324: PPUSH
4325: CALL 3135 0 2
// PlaceMines ( mine_southpass_zone , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
4329: LD_INT 9
4331: PPUSH
4332: LD_INT 0
4334: PUSH
4335: LD_INT 2
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: PUSH
4346: LD_OWVAR 67
4350: ARRAY
4351: PPUSH
4352: CALL 3135 0 2
// PlaceMines ( mine_oileast_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4356: LD_INT 10
4358: PPUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 1
4364: PUSH
4365: LD_INT 1
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_OWVAR 67
4377: ARRAY
4378: PPUSH
4379: CALL 3135 0 2
// PlaceMines ( mine_oilwest_zone , [ 0 , 1 , 1 ] [ Difficulty ] ) ;
4383: LD_INT 12
4385: PPUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 1
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_OWVAR 67
4404: ARRAY
4405: PPUSH
4406: CALL 3135 0 2
// for i = 1 to [ 8 , 11 , 14 ] [ Difficulty ] do
4410: LD_ADDR_VAR 0 2
4414: PUSH
4415: DOUBLE
4416: LD_INT 1
4418: DEC
4419: ST_TO_ADDR
4420: LD_INT 8
4422: PUSH
4423: LD_INT 11
4425: PUSH
4426: LD_INT 14
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: PUSH
4434: LD_OWVAR 67
4438: ARRAY
4439: PUSH
4440: FOR_TO
4441: IFFALSE 4616
// begin hex := RandHexXYR ( 134 , 73 , 10 , false ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_INT 134
4450: PPUSH
4451: LD_INT 73
4453: PPUSH
4454: LD_INT 10
4456: PPUSH
4457: LD_INT 0
4459: PPUSH
4460: CALL_OW 17
4464: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 and not MineAtPos ( hex [ 1 ] , hex [ 2 ] ) then
4465: LD_VAR 0 4
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_VAR 0 4
4478: PUSH
4479: LD_INT 2
4481: ARRAY
4482: PPUSH
4483: CALL_OW 428
4487: PUSH
4488: LD_INT 0
4490: EQUAL
4491: PUSH
4492: LD_VAR 0 4
4496: PUSH
4497: LD_INT 1
4499: ARRAY
4500: PPUSH
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 2
4508: ARRAY
4509: PPUSH
4510: CALL_OW 458
4514: NOT
4515: AND
4516: IFFALSE 4614
// begin mines_list := Insert ( mines_list , mines_list + 1 , hex [ 1 ] ) ;
4518: LD_ADDR_EXP 17
4522: PUSH
4523: LD_EXP 17
4527: PPUSH
4528: LD_EXP 17
4532: PUSH
4533: LD_INT 1
4535: PLUS
4536: PPUSH
4537: LD_VAR 0 4
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: PPUSH
4546: CALL_OW 2
4550: ST_TO_ADDR
// mines_list := Insert ( mines_list , mines_list + 1 , hex [ 2 ] ) ;
4551: LD_ADDR_EXP 17
4555: PUSH
4556: LD_EXP 17
4560: PPUSH
4561: LD_EXP 17
4565: PUSH
4566: LD_INT 1
4568: PLUS
4569: PPUSH
4570: LD_VAR 0 4
4574: PUSH
4575: LD_INT 2
4577: ARRAY
4578: PPUSH
4579: CALL_OW 2
4583: ST_TO_ADDR
// PlaceMine ( hex [ 1 ] , hex [ 2 ] , bot_side , 0 ) ;
4584: LD_VAR 0 4
4588: PUSH
4589: LD_INT 1
4591: ARRAY
4592: PPUSH
4593: LD_VAR 0 4
4597: PUSH
4598: LD_INT 2
4600: ARRAY
4601: PPUSH
4602: LD_EXP 8
4606: PPUSH
4607: LD_INT 0
4609: PPUSH
4610: CALL_OW 454
// end ; end ;
4614: GO 4440
4616: POP
4617: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 22
4625: PUSH
4626: LD_VAR 0 5
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 30
4637: PUSH
4638: LD_INT 32
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: PUSH
4654: FOR_IN
4655: IFFALSE 4687
// PlaceWeaponTurret ( i , weapons [ Rand ( 1 , weapons ) ] ) ;
4657: LD_VAR 0 2
4661: PPUSH
4662: LD_VAR 0 8
4666: PUSH
4667: LD_INT 1
4669: PPUSH
4670: LD_VAR 0 8
4674: PPUSH
4675: CALL_OW 12
4679: ARRAY
4680: PPUSH
4681: CALL_OW 431
4685: GO 4654
4687: POP
4688: POP
// uc_side := side ;
4689: LD_ADDR_OWVAR 20
4693: PUSH
4694: LD_VAR 0 5
4698: ST_TO_ADDR
// uc_nation := 2 ;
4699: LD_ADDR_OWVAR 21
4703: PUSH
4704: LD_INT 2
4706: ST_TO_ADDR
// for i = 1 to 1 + Difficulty do
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: DOUBLE
4713: LD_INT 1
4715: DEC
4716: ST_TO_ADDR
4717: LD_INT 1
4719: PUSH
4720: LD_OWVAR 67
4724: PLUS
4725: PUSH
4726: FOR_TO
4727: IFFALSE 4817
// begin vc_chassis := ar_half_tracked ;
4729: LD_ADDR_OWVAR 37
4733: PUSH
4734: LD_INT 14
4736: ST_TO_ADDR
// vc_engine := engine_combustion ;
4737: LD_ADDR_OWVAR 39
4741: PUSH
4742: LD_INT 1
4744: ST_TO_ADDR
// vc_control := control_manual ;
4745: LD_ADDR_OWVAR 38
4749: PUSH
4750: LD_INT 1
4752: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
4753: LD_ADDR_OWVAR 40
4757: PUSH
4758: LD_INT 31
4760: ST_TO_ADDR
// veh := CreateVehicle ;
4761: LD_ADDR_VAR 0 7
4765: PUSH
4766: CALL_OW 45
4770: ST_TO_ADDR
// PlaceUnitArea ( veh , ct_area , false ) ;
4771: LD_VAR 0 7
4775: PPUSH
4776: LD_INT 3
4778: PPUSH
4779: LD_INT 0
4781: PPUSH
4782: CALL_OW 49
// PrepareHuman ( false , 3 , skill ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 3
4791: PPUSH
4792: LD_VAR 0 9
4796: PPUSH
4797: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4801: CALL_OW 44
4805: PPUSH
4806: LD_VAR 0 7
4810: PPUSH
4811: CALL_OW 52
// end ;
4815: GO 4726
4817: POP
4818: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: LD_INT 22
4826: PUSH
4827: LD_VAR 0 5
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 32
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PPUSH
4850: CALL_OW 69
4854: PUSH
4855: FOR_IN
4856: IFFALSE 4889
// begin PrepareHuman ( false , 1 , skill ) ;
4858: LD_INT 0
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: LD_VAR 0 9
4868: PPUSH
4869: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
4873: CALL_OW 44
4877: PPUSH
4878: LD_VAR 0 2
4882: PPUSH
4883: CALL_OW 52
// end ;
4887: GO 4855
4889: POP
4890: POP
// for i = 1 to 4 do
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: DOUBLE
4897: LD_INT 1
4899: DEC
4900: ST_TO_ADDR
4901: LD_INT 4
4903: PUSH
4904: FOR_TO
4905: IFFALSE 4936
// begin PrepareHuman ( false , 2 , skill ) ;
4907: LD_INT 0
4909: PPUSH
4910: LD_INT 2
4912: PPUSH
4913: LD_VAR 0 9
4917: PPUSH
4918: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_dep ) ;
4922: CALL_OW 44
4926: PPUSH
4927: LD_INT 2
4929: PPUSH
4930: CALL_OW 52
// end ;
4934: GO 4904
4936: POP
4937: POP
// for i = 1 to 6 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 6
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4983
// begin PrepareHuman ( false , 3 , skill ) ;
4954: LD_INT 0
4956: PPUSH
4957: LD_INT 3
4959: PPUSH
4960: LD_VAR 0 9
4964: PPUSH
4965: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ar_fac ) ;
4969: CALL_OW 44
4973: PPUSH
4974: LD_INT 12
4976: PPUSH
4977: CALL_OW 52
// end ;
4981: GO 4951
4983: POP
4984: POP
// for i = 1 to 4 do
4985: LD_ADDR_VAR 0 2
4989: PUSH
4990: DOUBLE
4991: LD_INT 1
4993: DEC
4994: ST_TO_ADDR
4995: LD_INT 4
4997: PUSH
4998: FOR_TO
4999: IFFALSE 5056
// begin PrepareHuman ( false , 4 , skill ) ;
5001: LD_INT 0
5003: PPUSH
5004: LD_INT 4
5006: PPUSH
5007: LD_VAR 0 9
5011: PPUSH
5012: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , FilterAllUnits ( [ f_btype , b_lab_full ] ) [ ( i mod 2 ) + 1 ] ) ;
5016: CALL_OW 44
5020: PPUSH
5021: LD_INT 30
5023: PUSH
5024: LD_INT 8
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: PPUSH
5031: CALL_OW 69
5035: PUSH
5036: LD_VAR 0 2
5040: PUSH
5041: LD_INT 2
5043: MOD
5044: PUSH
5045: LD_INT 1
5047: PLUS
5048: ARRAY
5049: PPUSH
5050: CALL_OW 52
// end ;
5054: GO 4998
5056: POP
5057: POP
// PrepareHuman ( false , class_mortar , skill ) ;
5058: LD_INT 0
5060: PPUSH
5061: LD_INT 8
5063: PPUSH
5064: LD_VAR 0 9
5068: PPUSH
5069: CALL_OW 380
// un := CreateHuman ;
5073: LD_ADDR_VAR 0 6
5077: PUSH
5078: CALL_OW 44
5082: ST_TO_ADDR
// SetDir ( un , 2 ) ;
5083: LD_VAR 0 6
5087: PPUSH
5088: LD_INT 2
5090: PPUSH
5091: CALL_OW 233
// PlaceHumanInUnit ( un , bun1 ) ;
5095: LD_VAR 0 6
5099: PPUSH
5100: LD_INT 31
5102: PPUSH
5103: CALL_OW 52
// for i = 1 to 4 do
5107: LD_ADDR_VAR 0 2
5111: PUSH
5112: DOUBLE
5113: LD_INT 1
5115: DEC
5116: ST_TO_ADDR
5117: LD_INT 4
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5177
// begin uc_nation := 0 ;
5123: LD_ADDR_OWVAR 21
5127: PUSH
5128: LD_INT 0
5130: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_engineer , 1 ) ;
5131: LD_INT 0
5133: PPUSH
5134: LD_INT 16
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 380
// un := CreateHuman ;
5144: LD_ADDR_VAR 0 6
5148: PUSH
5149: CALL_OW 44
5153: ST_TO_ADDR
// PlaceUnitXYR ( un , 106 , 46 , 8 , false ) ;
5154: LD_VAR 0 6
5158: PPUSH
5159: LD_INT 106
5161: PPUSH
5162: LD_INT 46
5164: PPUSH
5165: LD_INT 8
5167: PPUSH
5168: LD_INT 0
5170: PPUSH
5171: CALL_OW 50
// end ;
5175: GO 5120
5177: POP
5178: POP
// for i = 1 to 2 * Difficulty do
5179: LD_ADDR_VAR 0 2
5183: PUSH
5184: DOUBLE
5185: LD_INT 1
5187: DEC
5188: ST_TO_ADDR
5189: LD_INT 2
5191: PUSH
5192: LD_OWVAR 67
5196: MUL
5197: PUSH
5198: FOR_TO
5199: IFFALSE 5239
// begin uc_nation := 0 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 0
5208: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_soldier , 3 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 15
5214: PPUSH
5215: LD_INT 3
5217: PPUSH
5218: CALL_OW 380
// PlaceUnitArea ( CreateHuman , ap1 , false ) ;
5222: CALL_OW 44
5226: PPUSH
5227: LD_INT 20
5229: PPUSH
5230: LD_INT 0
5232: PPUSH
5233: CALL_OW 49
// end ;
5237: GO 5198
5239: POP
5240: POP
// for i = 1 to 4 * Difficulty do
5241: LD_ADDR_VAR 0 2
5245: PUSH
5246: DOUBLE
5247: LD_INT 1
5249: DEC
5250: ST_TO_ADDR
5251: LD_INT 4
5253: PUSH
5254: LD_OWVAR 67
5258: MUL
5259: PUSH
5260: FOR_TO
5261: IFFALSE 5335
// begin uc_nation := 0 ;
5263: LD_ADDR_OWVAR 21
5267: PUSH
5268: LD_INT 0
5270: ST_TO_ADDR
// PrepareHuman ( false , class_apeman_kamikaze , 3 ) ;
5271: LD_INT 0
5273: PPUSH
5274: LD_INT 17
5276: PPUSH
5277: LD_INT 3
5279: PPUSH
5280: CALL_OW 380
// hc_attr := [ 11 , 13 ] ;
5284: LD_ADDR_OWVAR 29
5288: PUSH
5289: LD_INT 11
5291: PUSH
5292: LD_INT 13
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: ST_TO_ADDR
// un := CreateHuman ;
5299: LD_ADDR_VAR 0 6
5303: PUSH
5304: CALL_OW 44
5308: ST_TO_ADDR
// PlaceUnitArea ( un , ap2 , false ) ;
5309: LD_VAR 0 6
5313: PPUSH
5314: LD_INT 21
5316: PPUSH
5317: LD_INT 0
5319: PPUSH
5320: CALL_OW 49
// ComHold ( un ) ;
5324: LD_VAR 0 6
5328: PPUSH
5329: CALL_OW 140
// end ;
5333: GO 5260
5335: POP
5336: POP
// end ;
5337: LD_VAR 0 1
5341: RET
// every 12 12$00 + 2 2$00 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) do var i , tmp , p ;
5342: LD_INT 22
5344: PUSH
5345: LD_EXP 8
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 30
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PPUSH
5368: CALL_OW 69
5372: IFFALSE 5679
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
5380: PPUSH
5381: PPUSH
// begin enable ;
5382: ENABLE
// if Difficulty < 3 then
5383: LD_OWVAR 67
5387: PUSH
5388: LD_INT 3
5390: LESS
5391: IFFALSE 5400
// wait ( 1 1$00 ) ;
5393: LD_INT 2100
5395: PPUSH
5396: CALL_OW 67
// tmp := queue_codes [ rng ] ;
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: LD_EXP 23
5409: PUSH
5410: LD_EXP 24
5414: ARRAY
5415: ST_TO_ADDR
// p := 1 ;
5416: LD_ADDR_VAR 0 3
5420: PUSH
5421: LD_INT 1
5423: ST_TO_ADDR
// for i = 1 to veh_counter + [ - 1 , 0 , 1 ] [ Difficulty ] do
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: DOUBLE
5430: LD_INT 1
5432: DEC
5433: ST_TO_ADDR
5434: LD_EXP 22
5438: PUSH
5439: LD_INT 1
5441: NEG
5442: PUSH
5443: LD_INT 0
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: PUSH
5454: LD_OWVAR 67
5458: ARRAY
5459: PLUS
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5643
// begin AddComConstruct ( FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_factory ] ] ) [ 1 ] , to_produce [ tmp mod 10 ] [ 1 ] , to_produce [ tmp mod 10 ] [ 2 ] , to_produce [ tmp mod 10 ] [ 3 ] , to_produce [ tmp mod 10 ] [ 4 ] ) ;
5464: LD_INT 22
5466: PUSH
5467: LD_EXP 8
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 30
5478: PUSH
5479: LD_INT 3
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 69
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PPUSH
5499: LD_EXP 21
5503: PUSH
5504: LD_VAR 0 2
5508: PUSH
5509: LD_INT 10
5511: MOD
5512: ARRAY
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: PPUSH
5518: LD_EXP 21
5522: PUSH
5523: LD_VAR 0 2
5527: PUSH
5528: LD_INT 10
5530: MOD
5531: ARRAY
5532: PUSH
5533: LD_INT 2
5535: ARRAY
5536: PPUSH
5537: LD_EXP 21
5541: PUSH
5542: LD_VAR 0 2
5546: PUSH
5547: LD_INT 10
5549: MOD
5550: ARRAY
5551: PUSH
5552: LD_INT 3
5554: ARRAY
5555: PPUSH
5556: LD_EXP 21
5560: PUSH
5561: LD_VAR 0 2
5565: PUSH
5566: LD_INT 10
5568: MOD
5569: ARRAY
5570: PUSH
5571: LD_INT 4
5573: ARRAY
5574: PPUSH
5575: CALL_OW 185
// tmp := tmp / 10 ;
5579: LD_ADDR_VAR 0 2
5583: PUSH
5584: LD_VAR 0 2
5588: PUSH
5589: LD_INT 10
5591: DIVREAL
5592: ST_TO_ADDR
// p := p + 1 ;
5593: LD_ADDR_VAR 0 3
5597: PUSH
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 1
5605: PLUS
5606: ST_TO_ADDR
// if p > 5 then
5607: LD_VAR 0 3
5611: PUSH
5612: LD_INT 5
5614: GREATER
5615: IFFALSE 5641
// begin p := 1 ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// tmp := queue_codes [ rng ] ;
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: LD_EXP 23
5634: PUSH
5635: LD_EXP 24
5639: ARRAY
5640: ST_TO_ADDR
// end ; end ;
5641: GO 5461
5643: POP
5644: POP
// rng := rng + 1 ;
5645: LD_ADDR_EXP 24
5649: PUSH
5650: LD_EXP 24
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: ST_TO_ADDR
// if rng > queue_codes then
5659: LD_EXP 24
5663: PUSH
5664: LD_EXP 23
5668: GREATER
5669: IFFALSE 5679
// rng := 1 ;
5671: LD_ADDR_EXP 24
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// end ;
5679: PPOPN 3
5681: END
// every 0 0$01 trigger FilterAllUnits ( [ f_class , 17 ] ) do var i , un ;
5682: LD_INT 25
5684: PUSH
5685: LD_INT 17
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PPUSH
5692: CALL_OW 69
5696: IFFALSE 5799
5698: GO 5700
5700: DISABLE
5701: LD_INT 0
5703: PPUSH
5704: PPUSH
// begin enable ;
5705: ENABLE
// for i in FilterAllUnits ( [ f_class , 17 ] ) do
5706: LD_ADDR_VAR 0 1
5710: PUSH
5711: LD_INT 25
5713: PUSH
5714: LD_INT 17
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PPUSH
5721: CALL_OW 69
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5797
// begin un := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , bot_side ] ) , i ) ;
5729: LD_ADDR_VAR 0 2
5733: PUSH
5734: LD_INT 81
5736: PUSH
5737: LD_EXP 8
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 69
5750: PPUSH
5751: LD_VAR 0 1
5755: PPUSH
5756: CALL_OW 74
5760: ST_TO_ADDR
// if GetDistUnits ( i , un ) < 15 then
5761: LD_VAR 0 1
5765: PPUSH
5766: LD_VAR 0 2
5770: PPUSH
5771: CALL_OW 296
5775: PUSH
5776: LD_INT 15
5778: LESS
5779: IFFALSE 5795
// ComAttackUnit ( i , un ) ;
5781: LD_VAR 0 1
5785: PPUSH
5786: LD_VAR 0 2
5790: PPUSH
5791: CALL_OW 115
// end ;
5795: GO 5726
5797: POP
5798: POP
// end ;
5799: PPOPN 2
5801: END
// every 0 0$01 trigger attackers marked 17 do var i ;
5802: LD_EXP 20
5806: IFFALSE 5873
5808: GO 5810
5810: DISABLE
5811: LD_INT 0
5813: PPUSH
// begin enable ;
5814: ENABLE
// for i in attackers do
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_EXP 20
5824: PUSH
5825: FOR_IN
5826: IFFALSE 5871
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ) ;
5828: LD_VAR 0 1
5832: PPUSH
5833: LD_INT 81
5835: PUSH
5836: LD_VAR 0 1
5840: PPUSH
5841: CALL_OW 255
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 69
5854: PPUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 74
5864: PPUSH
5865: CALL_OW 115
5869: GO 5825
5871: POP
5872: POP
// end ;
5873: PPOPN 1
5875: END
// every 0 0$01 trigger not attackers marked 17 do
5876: LD_EXP 20
5880: NOT
5881: IFFALSE 5890
5883: GO 5885
5885: DISABLE
// begin enable ;
5886: ENABLE
// disable ( 17 ) ;
5887: LD_INT 17
5889: DISABLE_MARKED
// end ;
5890: END
// every 1 1$00 trigger veh_counter <= attackers do var max , i ;
5891: LD_EXP 22
5895: PUSH
5896: LD_EXP 20
5900: LESSEQUAL
5901: IFFALSE 5914
5903: GO 5905
5905: DISABLE
5906: LD_INT 0
5908: PPUSH
5909: PPUSH
// begin enable ;
5910: ENABLE
// enable ( 17 ) ;
5911: LD_INT 17
5913: ENABLE_MARKED
// end ;
5914: PPOPN 2
5916: END
// every 0 0$01 trigger game_start and tick >= 30 30$00 do
5917: LD_EXP 9
5921: PUSH
5922: LD_OWVAR 1
5926: PUSH
5927: LD_INT 63000
5929: GREATEREQUAL
5930: AND
5931: IFFALSE 5950
5933: GO 5935
5935: DISABLE
// begin veh_counter := veh_counter + 1 ;
5936: LD_ADDR_EXP 22
5940: PUSH
5941: LD_EXP 22
5945: PUSH
5946: LD_INT 1
5948: PLUS
5949: ST_TO_ADDR
// end ;
5950: END
// every 0 0$01 trigger game_start and tick >= 50 50$00 do
5951: LD_EXP 9
5955: PUSH
5956: LD_OWVAR 1
5960: PUSH
5961: LD_INT 105000
5963: GREATEREQUAL
5964: AND
5965: IFFALSE 5984
5967: GO 5969
5969: DISABLE
// begin veh_counter := veh_counter + 2 ;
5970: LD_ADDR_EXP 22
5974: PUSH
5975: LD_EXP 22
5979: PUSH
5980: LD_INT 2
5982: PLUS
5983: ST_TO_ADDR
// end ;
5984: END
// every 0 0$01 trigger game_start and tick >= 80 80$00 do
5985: LD_EXP 9
5989: PUSH
5990: LD_OWVAR 1
5994: PUSH
5995: LD_INT 168000
5997: GREATEREQUAL
5998: AND
5999: IFFALSE 6018
6001: GO 6003
6003: DISABLE
// begin veh_counter := veh_counter + 3 ;
6004: LD_ADDR_EXP 22
6008: PUSH
6009: LD_EXP 22
6013: PUSH
6014: LD_INT 3
6016: PLUS
6017: ST_TO_ADDR
// end ;
6018: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] ] ) do var i , j , cts , vehs , best , best_mechanic , p ;
6019: LD_INT 22
6021: PUSH
6022: LD_EXP 8
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 33
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 69
6049: IFFALSE 6265
6051: GO 6053
6053: DISABLE
6054: LD_INT 0
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
// begin enable ;
6063: ENABLE
// vehs := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_control , control_remote ] , [ f_not , [ f_linked ] ] ] ) ;
6064: LD_ADDR_VAR 0 4
6068: PUSH
6069: LD_INT 22
6071: PUSH
6072: LD_EXP 8
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 33
6083: PUSH
6084: LD_INT 2
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 3
6093: PUSH
6094: LD_INT 61
6096: PUSH
6097: EMPTY
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: PPUSH
6109: CALL_OW 69
6113: ST_TO_ADDR
// cts := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_weapon , ar_control_tower ] ] ) ;
6114: LD_ADDR_VAR 0 3
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_EXP 8
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 34
6133: PUSH
6134: LD_INT 31
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: ST_TO_ADDR
// best := 10 ;
6150: LD_ADDR_VAR 0 5
6154: PUSH
6155: LD_INT 10
6157: ST_TO_ADDR
// best_mechanic := - 1 ;
6158: LD_ADDR_VAR 0 6
6162: PUSH
6163: LD_INT 1
6165: NEG
6166: ST_TO_ADDR
// if vehs then
6167: LD_VAR 0 4
6171: IFFALSE 6265
// begin for j in cts do
6173: LD_ADDR_VAR 0 2
6177: PUSH
6178: LD_VAR 0 3
6182: PUSH
6183: FOR_IN
6184: IFFALSE 6245
// begin p := UnitsLinked ( GetDriver ( j ) ) ;
6186: LD_ADDR_VAR 0 7
6190: PUSH
6191: LD_VAR 0 2
6195: PPUSH
6196: CALL 3487 0 1
6200: PPUSH
6201: CALL_OW 432
6205: ST_TO_ADDR
// if p < best then
6206: LD_VAR 0 7
6210: PUSH
6211: LD_VAR 0 5
6215: LESS
6216: IFFALSE 6243
// begin best := p ;
6218: LD_ADDR_VAR 0 5
6222: PUSH
6223: LD_VAR 0 7
6227: ST_TO_ADDR
// best_mechanic := GetDriver ( j ) ;
6228: LD_ADDR_VAR 0 6
6232: PUSH
6233: LD_VAR 0 2
6237: PPUSH
6238: CALL 3487 0 1
6242: ST_TO_ADDR
// end ; end ;
6243: GO 6183
6245: POP
6246: POP
// ComLinkTo ( vehs [ 1 ] , best_mechanic ) ;
6247: LD_VAR 0 4
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: LD_VAR 0 6
6260: PPUSH
6261: CALL_OW 135
// end ; end ;
6265: PPOPN 7
6267: END
// every 0 0$01 do var i , j , h , sci , eng , b , p ;
6268: GO 6270
6270: DISABLE
6271: LD_INT 0
6273: PPUSH
6274: PPUSH
6275: PPUSH
6276: PPUSH
6277: PPUSH
6278: PPUSH
6279: PPUSH
// begin enable ;
6280: ENABLE
// b := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6281: LD_ADDR_VAR 0 6
6285: PUSH
6286: LD_INT 22
6288: PUSH
6289: LD_EXP 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 21
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 3
6310: PUSH
6311: LD_INT 24
6313: PUSH
6314: LD_INT 1000
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: CALL_OW 69
6334: ST_TO_ADDR
// h := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_INT 22
6342: PUSH
6343: LD_EXP 8
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 25
6357: PUSH
6358: LD_INT 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 25
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 25
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 3
6393: PUSH
6394: LD_INT 24
6396: PUSH
6397: LD_INT 750
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 69
6417: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) ;
6418: LD_ADDR_VAR 0 4
6422: PUSH
6423: LD_INT 22
6425: PUSH
6426: LD_EXP 8
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 25
6437: PUSH
6438: LD_INT 4
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 2 ] ] ) ;
6454: LD_ADDR_VAR 0 5
6458: PUSH
6459: LD_INT 22
6461: PUSH
6462: LD_EXP 8
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PPUSH
6485: CALL_OW 69
6489: ST_TO_ADDR
// if not h and not b then
6490: LD_VAR 0 3
6494: NOT
6495: PUSH
6496: LD_VAR 0 6
6500: NOT
6501: AND
6502: IFFALSE 6786
// begin if sci then
6504: LD_VAR 0 4
6508: IFFALSE 6645
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) then
6510: LD_VAR 0 4
6514: PPUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 54
6520: PUSH
6521: EMPTY
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 72
6532: PUSH
6533: LD_INT 22
6535: PUSH
6536: LD_EXP 8
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 8
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: AND
6564: IFFALSE 6645
// for j in UnitFilter ( sci , [ f_not , [ f_inside ] ] ) do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_VAR 0 4
6575: PPUSH
6576: LD_INT 3
6578: PUSH
6579: LD_INT 54
6581: PUSH
6582: EMPTY
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 72
6593: PUSH
6594: FOR_IN
6595: IFFALSE 6643
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
6597: LD_VAR 0 2
6601: PPUSH
6602: LD_INT 22
6604: PUSH
6605: LD_EXP 8
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 30
6616: PUSH
6617: LD_INT 8
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PPUSH
6628: CALL_OW 69
6632: PUSH
6633: LD_INT 1
6635: ARRAY
6636: PPUSH
6637: CALL_OW 120
6641: GO 6594
6643: POP
6644: POP
// if eng then
6645: LD_VAR 0 5
6649: IFFALSE 6786
// if UnitFilter ( eng , [ f_not , [ f_inside ] ] ) and FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) then
6651: LD_VAR 0 5
6655: PPUSH
6656: LD_INT 3
6658: PUSH
6659: LD_INT 54
6661: PUSH
6662: EMPTY
6663: LIST
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PPUSH
6669: CALL_OW 72
6673: PUSH
6674: LD_INT 22
6676: PUSH
6677: LD_EXP 8
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 30
6688: PUSH
6689: LD_INT 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 69
6704: AND
6705: IFFALSE 6786
// for j in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6707: LD_ADDR_VAR 0 2
6711: PUSH
6712: LD_VAR 0 5
6716: PPUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 54
6722: PUSH
6723: EMPTY
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL_OW 72
6734: PUSH
6735: FOR_IN
6736: IFFALSE 6784
// ComEnterUnit ( j , FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
6738: LD_VAR 0 2
6742: PPUSH
6743: LD_INT 22
6745: PUSH
6746: LD_EXP 8
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 30
6757: PUSH
6758: LD_INT 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PPUSH
6769: CALL_OW 69
6773: PUSH
6774: LD_INT 1
6776: ARRAY
6777: PPUSH
6778: CALL_OW 120
6782: GO 6735
6784: POP
6785: POP
// end ; p := 1 ;
6786: LD_ADDR_VAR 0 7
6790: PUSH
6791: LD_INT 1
6793: ST_TO_ADDR
// if b and eng then
6794: LD_VAR 0 6
6798: PUSH
6799: LD_VAR 0 5
6803: AND
6804: IFFALSE 6938
// for j in eng do
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_VAR 0 5
6815: PUSH
6816: FOR_IN
6817: IFFALSE 6936
// begin if IsInUnit ( j ) then
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 310
6828: IFFALSE 6841
// ComExitBuilding ( j ) else
6830: LD_VAR 0 2
6834: PPUSH
6835: CALL_OW 122
6839: GO 6934
// if not HasTask ( j ) and GetLives ( j ) > 750 then
6841: LD_VAR 0 2
6845: PPUSH
6846: CALL_OW 314
6850: NOT
6851: PUSH
6852: LD_VAR 0 2
6856: PPUSH
6857: CALL_OW 256
6861: PUSH
6862: LD_INT 750
6864: GREATER
6865: AND
6866: IFFALSE 6934
// begin if b > p then
6868: LD_VAR 0 6
6872: PUSH
6873: LD_VAR 0 7
6877: GREATER
6878: IFFALSE 6916
// begin ComRepairBuilding ( j , b [ p ] ) ;
6880: LD_VAR 0 2
6884: PPUSH
6885: LD_VAR 0 6
6889: PUSH
6890: LD_VAR 0 7
6894: ARRAY
6895: PPUSH
6896: CALL_OW 130
// p := p + 1 ;
6900: LD_ADDR_VAR 0 7
6904: PUSH
6905: LD_VAR 0 7
6909: PUSH
6910: LD_INT 1
6912: PLUS
6913: ST_TO_ADDR
// end else
6914: GO 6934
// ComRepairBuilding ( j , b [ 1 ] ) ;
6916: LD_VAR 0 2
6920: PPUSH
6921: LD_VAR 0 6
6925: PUSH
6926: LD_INT 1
6928: ARRAY
6929: PPUSH
6930: CALL_OW 130
// end ; end ;
6934: GO 6816
6936: POP
6937: POP
// if h and sci then
6938: LD_VAR 0 3
6942: PUSH
6943: LD_VAR 0 4
6947: AND
6948: IFFALSE 7087
// for i in h do
6950: LD_ADDR_VAR 0 1
6954: PUSH
6955: LD_VAR 0 3
6959: PUSH
6960: FOR_IN
6961: IFFALSE 7085
// if GetDistUnitXY ( i , 108 , 42 ) > 10 then
6963: LD_VAR 0 1
6967: PPUSH
6968: LD_INT 108
6970: PPUSH
6971: LD_INT 42
6973: PPUSH
6974: CALL_OW 297
6978: PUSH
6979: LD_INT 10
6981: GREATER
6982: IFFALSE 7001
// ComMoveXY ( i , 108 , 42 ) else
6984: LD_VAR 0 1
6988: PPUSH
6989: LD_INT 108
6991: PPUSH
6992: LD_INT 42
6994: PPUSH
6995: CALL_OW 111
6999: GO 7083
// begin for j in sci do
7001: LD_ADDR_VAR 0 2
7005: PUSH
7006: LD_VAR 0 4
7010: PUSH
7011: FOR_IN
7012: IFFALSE 7081
// begin if GetTag ( j ) > 0 then
7014: LD_VAR 0 2
7018: PPUSH
7019: CALL_OW 110
7023: PUSH
7024: LD_INT 0
7026: GREATER
7027: IFFALSE 7031
// continue ;
7029: GO 7011
// if IsInUnit ( j ) then
7031: LD_VAR 0 2
7035: PPUSH
7036: CALL_OW 310
7040: IFFALSE 7053
// ComExitBuilding ( j ) else
7042: LD_VAR 0 2
7046: PPUSH
7047: CALL_OW 122
7051: GO 7079
// if not HasTask ( j ) then
7053: LD_VAR 0 2
7057: PPUSH
7058: CALL_OW 314
7062: NOT
7063: IFFALSE 7079
// ComHeal ( j , h ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 128
// end ;
7079: GO 7011
7081: POP
7082: POP
// end ;
7083: GO 6960
7085: POP
7086: POP
// end ;
7087: PPOPN 7
7089: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 155 , 88 ) and GetBType ( HexInfo ( 155 , 88 ) = b_siberite_mine ) do var sci , p ;
7090: LD_INT 155
7092: PPUSH
7093: LD_INT 88
7095: PPUSH
7096: CALL_OW 428
7100: PUSH
7101: LD_INT 155
7103: PPUSH
7104: LD_INT 88
7106: PPUSH
7107: CALL_OW 428
7111: PUSH
7112: LD_INT 30
7114: EQUAL
7115: PPUSH
7116: CALL_OW 266
7120: AND
7121: IFFALSE 7370
7123: GO 7125
7125: DISABLE
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
// begin p := GetSide ( HexInfo ( 155 , 88 ) ) ;
7130: LD_ADDR_VAR 0 2
7134: PUSH
7135: LD_INT 155
7137: PPUSH
7138: LD_INT 88
7140: PPUSH
7141: CALL_OW 428
7145: PPUSH
7146: CALL_OW 255
7150: ST_TO_ADDR
// Wait ( [ 5 5$30 , 6 6$33 , 6 6$21 , 8 8$44 , 9 9$31 , 4 4$33 , 9 9$01 , 5 5$01 ] [ p ] ) ;
7151: LD_INT 11550
7153: PUSH
7154: LD_INT 13755
7156: PUSH
7157: LD_INT 13335
7159: PUSH
7160: LD_INT 18340
7162: PUSH
7163: LD_INT 19985
7165: PUSH
7166: LD_INT 9555
7168: PUSH
7169: LD_INT 18935
7171: PUSH
7172: LD_INT 10535
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_VAR 0 2
7189: ARRAY
7190: PPUSH
7191: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7195: LD_INT 22
7197: PUSH
7198: LD_EXP 8
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 25
7209: PUSH
7210: LD_INT 4
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PUSH
7226: LD_INT 0
7228: EQUAL
7229: IFFALSE 7233
// exit ;
7231: GO 7370
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ 1 ] ;
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: LD_INT 22
7240: PUSH
7241: LD_EXP 8
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 25
7252: PUSH
7253: LD_INT 4
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 69
7268: PUSH
7269: LD_INT 1
7271: ARRAY
7272: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7273: LD_VAR 0 1
7277: PPUSH
7278: LD_INT 1
7280: PPUSH
7281: CALL_OW 109
// ComExitBuilding ( sci ) ;
7285: LD_VAR 0 1
7289: PPUSH
7290: CALL_OW 122
// AddComMoveXY ( sci , 126 , 59 ) ;
7294: LD_VAR 0 1
7298: PPUSH
7299: LD_INT 126
7301: PPUSH
7302: LD_INT 59
7304: PPUSH
7305: CALL_OW 171
// if p mod 2 = 0 then
7309: LD_VAR 0 2
7313: PUSH
7314: LD_INT 2
7316: MOD
7317: PUSH
7318: LD_INT 0
7320: EQUAL
7321: IFFALSE 7340
// AddComMoveXY ( sci , 148 , 66 ) else
7323: LD_VAR 0 1
7327: PPUSH
7328: LD_INT 148
7330: PPUSH
7331: LD_INT 66
7333: PPUSH
7334: CALL_OW 171
7338: GO 7355
// AddComMoveXY ( sci , 135 , 84 ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_INT 135
7347: PPUSH
7348: LD_INT 84
7350: PPUSH
7351: CALL_OW 171
// AddComContaminate ( sci , 155 , 88 ) ;
7355: LD_VAR 0 1
7359: PPUSH
7360: LD_INT 155
7362: PPUSH
7363: LD_INT 88
7365: PPUSH
7366: CALL_OW 218
// end ;
7370: PPOPN 2
7372: END
// every 0 0$01 + 0 0$10 trigger HexInfo ( 33 , 10 ) and GetBType ( HexInfo ( 33 , 10 ) = b_siberite_mine ) do var sci , p ;
7373: LD_INT 33
7375: PPUSH
7376: LD_INT 10
7378: PPUSH
7379: CALL_OW 428
7383: PUSH
7384: LD_INT 33
7386: PPUSH
7387: LD_INT 10
7389: PPUSH
7390: CALL_OW 428
7394: PUSH
7395: LD_INT 30
7397: EQUAL
7398: PPUSH
7399: CALL_OW 266
7403: AND
7404: IFFALSE 7655
7406: GO 7408
7408: DISABLE
7409: LD_INT 0
7411: PPUSH
7412: PPUSH
// begin p := GetSide ( HexInfo ( 33 , 10 ) ) ;
7413: LD_ADDR_VAR 0 2
7417: PUSH
7418: LD_INT 33
7420: PPUSH
7421: LD_INT 10
7423: PPUSH
7424: CALL_OW 428
7428: PPUSH
7429: CALL_OW 255
7433: ST_TO_ADDR
// Wait ( [ 4 4$30 , 5 5$33 , 3 3$21 , 4 4$44 , 3 3$31 , 5 5$33 , 3 3$01 , 8 8$01 ] [ p ] ) ;
7434: LD_INT 9450
7436: PUSH
7437: LD_INT 11655
7439: PUSH
7440: LD_INT 7035
7442: PUSH
7443: LD_INT 9940
7445: PUSH
7446: LD_INT 7385
7448: PUSH
7449: LD_INT 11655
7451: PUSH
7452: LD_INT 6335
7454: PUSH
7455: LD_INT 16835
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_VAR 0 2
7472: ARRAY
7473: PPUSH
7474: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) = 0 then
7478: LD_INT 22
7480: PUSH
7481: LD_EXP 8
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 25
7492: PUSH
7493: LD_INT 4
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 69
7508: PUSH
7509: LD_INT 0
7511: EQUAL
7512: IFFALSE 7516
// exit ;
7514: GO 7655
// sci := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_class , 4 ] ] ) [ sci ] ;
7516: LD_ADDR_VAR 0 1
7520: PUSH
7521: LD_INT 22
7523: PUSH
7524: LD_EXP 8
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 25
7535: PUSH
7536: LD_INT 4
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: PUSH
7552: LD_VAR 0 1
7556: ARRAY
7557: ST_TO_ADDR
// SetTag ( sci , 1 ) ;
7558: LD_VAR 0 1
7562: PPUSH
7563: LD_INT 1
7565: PPUSH
7566: CALL_OW 109
// ComExitBuilding ( sci ) ;
7570: LD_VAR 0 1
7574: PPUSH
7575: CALL_OW 122
// AddComMoveXY ( sci , 67 , 13 ) ;
7579: LD_VAR 0 1
7583: PPUSH
7584: LD_INT 67
7586: PPUSH
7587: LD_INT 13
7589: PPUSH
7590: CALL_OW 171
// if p mod 2 = 0 then
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 2
7601: MOD
7602: PUSH
7603: LD_INT 0
7605: EQUAL
7606: IFFALSE 7625
// AddComMoveXY ( sci , 37 , 3 ) else
7608: LD_VAR 0 1
7612: PPUSH
7613: LD_INT 37
7615: PPUSH
7616: LD_INT 3
7618: PPUSH
7619: CALL_OW 171
7623: GO 7640
// AddComMoveXY ( sci , 45 , 20 ) ;
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_INT 45
7632: PPUSH
7633: LD_INT 20
7635: PPUSH
7636: CALL_OW 171
// AddComContaminate ( sci , 33 , 10 ) ;
7640: LD_VAR 0 1
7644: PPUSH
7645: LD_INT 33
7647: PPUSH
7648: LD_INT 10
7650: PPUSH
7651: CALL_OW 218
// end ;
7655: PPOPN 2
7657: END
// every 0 0$01 trigger mines_list do var i , p ;
7658: LD_EXP 17
7662: IFFALSE 7888
7664: GO 7666
7666: DISABLE
7667: LD_INT 0
7669: PPUSH
7670: PPUSH
// begin enable ;
7671: ENABLE
// p := 1 ;
7672: LD_ADDR_VAR 0 2
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// for i = 1 to mines_list / 2 do
7680: LD_ADDR_VAR 0 1
7684: PUSH
7685: DOUBLE
7686: LD_INT 1
7688: DEC
7689: ST_TO_ADDR
7690: LD_EXP 17
7694: PUSH
7695: LD_INT 2
7697: DIVREAL
7698: PUSH
7699: FOR_TO
7700: IFFALSE 7886
// begin if HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) > 0 then
7702: LD_EXP 17
7706: PUSH
7707: LD_VAR 0 2
7711: ARRAY
7712: PPUSH
7713: LD_EXP 17
7717: PUSH
7718: LD_VAR 0 2
7722: PUSH
7723: LD_INT 1
7725: PLUS
7726: ARRAY
7727: PPUSH
7728: CALL_OW 428
7732: PUSH
7733: LD_INT 0
7735: GREATER
7736: IFFALSE 7870
// if GetSide ( HexInfo ( mines_list [ p ] , mines_list [ p + 1 ] ) ) <> bot_side then
7738: LD_EXP 17
7742: PUSH
7743: LD_VAR 0 2
7747: ARRAY
7748: PPUSH
7749: LD_EXP 17
7753: PUSH
7754: LD_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: ARRAY
7763: PPUSH
7764: CALL_OW 428
7768: PPUSH
7769: CALL_OW 255
7773: PUSH
7774: LD_EXP 8
7778: NONEQUAL
7779: IFFALSE 7870
// begin LaunchMineAtPos ( mines_list [ p ] , mines_list [ p + 1 ] , bot_side ) ;
7781: LD_EXP 17
7785: PUSH
7786: LD_VAR 0 2
7790: ARRAY
7791: PPUSH
7792: LD_EXP 17
7796: PUSH
7797: LD_VAR 0 2
7801: PUSH
7802: LD_INT 1
7804: PLUS
7805: ARRAY
7806: PPUSH
7807: LD_EXP 8
7811: PPUSH
7812: CALL_OW 456
// mines_list := Delete ( mines_list , p ) ;
7816: LD_ADDR_EXP 17
7820: PUSH
7821: LD_EXP 17
7825: PPUSH
7826: LD_VAR 0 2
7830: PPUSH
7831: CALL_OW 3
7835: ST_TO_ADDR
// mines_list := Delete ( mines_list , p ) ;
7836: LD_ADDR_EXP 17
7840: PUSH
7841: LD_EXP 17
7845: PPUSH
7846: LD_VAR 0 2
7850: PPUSH
7851: CALL_OW 3
7855: ST_TO_ADDR
// p := p - 2 ;
7856: LD_ADDR_VAR 0 2
7860: PUSH
7861: LD_VAR 0 2
7865: PUSH
7866: LD_INT 2
7868: MINUS
7869: ST_TO_ADDR
// end ; p := p + 2 ;
7870: LD_ADDR_VAR 0 2
7874: PUSH
7875: LD_VAR 0 2
7879: PUSH
7880: LD_INT 2
7882: PLUS
7883: ST_TO_ADDR
// end ;
7884: GO 7699
7886: POP
7887: POP
// end ;
7888: PPOPN 2
7890: END
// every 0 0$03 do var i , p , skr , filter , dep ;
7891: GO 7893
7893: DISABLE
7894: LD_INT 0
7896: PPUSH
7897: PPUSH
7898: PPUSH
7899: PPUSH
7900: PPUSH
// begin enable ;
7901: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , bot_side ] , [ f_class , class_apeman_engineer ] ] ) ;
7902: LD_ADDR_VAR 0 4
7906: PUSH
7907: LD_INT 50
7909: PUSH
7910: EMPTY
7911: LIST
7912: PUSH
7913: LD_INT 22
7915: PUSH
7916: LD_EXP 8
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 25
7927: PUSH
7928: LD_INT 16
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7945: LD_ADDR_VAR 0 5
7949: PUSH
7950: LD_INT 22
7952: PUSH
7953: LD_EXP 8
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 30
7967: PUSH
7968: LD_INT 0
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 30
7977: PUSH
7978: LD_INT 1
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 69
7998: ST_TO_ADDR
// skr := GetListOfCratesInArea ( kabul_crates ) ;
7999: LD_ADDR_VAR 0 3
8003: PUSH
8004: LD_INT 13
8006: PPUSH
8007: CALL_OW 435
8011: ST_TO_ADDR
// if filter and skr then
8012: LD_VAR 0 4
8016: PUSH
8017: LD_VAR 0 3
8021: AND
8022: IFFALSE 8097
// for i = 1 to filter do
8024: LD_ADDR_VAR 0 1
8028: PUSH
8029: DOUBLE
8030: LD_INT 1
8032: DEC
8033: ST_TO_ADDR
8034: LD_VAR 0 4
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8095
// if not HasTask ( filter [ i ] ) then
8042: LD_VAR 0 4
8046: PUSH
8047: LD_VAR 0 1
8051: ARRAY
8052: PPUSH
8053: CALL_OW 314
8057: NOT
8058: IFFALSE 8093
// ComCollect ( filter [ i ] , skr [ 1 ] , skr [ 2 ] ) ;
8060: LD_VAR 0 4
8064: PUSH
8065: LD_VAR 0 1
8069: ARRAY
8070: PPUSH
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PPUSH
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 2
8087: ARRAY
8088: PPUSH
8089: CALL_OW 117
8093: GO 8039
8095: POP
8096: POP
// end ; end_of_file
8097: PPOPN 5
8099: END
// on UnitDestroyed ( un ) do var shooter , cl , s , n ;
8100: LD_INT 0
8102: PPUSH
8103: PPUSH
8104: PPUSH
8105: PPUSH
// begin if un in attackers then
8106: LD_VAR 0 1
8110: PUSH
8111: LD_EXP 20
8115: IN
8116: IFFALSE 8134
// attackers := attackers diff un ;
8118: LD_ADDR_EXP 20
8122: PUSH
8123: LD_EXP 20
8127: PUSH
8128: LD_VAR 0 1
8132: DIFF
8133: ST_TO_ADDR
// if GetSide ( un ) <> bot_side and GetSide ( un ) > 0 and un in FilterAllUnits ( [ f_type , unit_human ] ) then
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 255
8143: PUSH
8144: LD_EXP 8
8148: NONEQUAL
8149: PUSH
8150: LD_VAR 0 1
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 0
8162: GREATER
8163: AND
8164: PUSH
8165: LD_VAR 0 1
8169: PUSH
8170: LD_INT 21
8172: PUSH
8173: LD_INT 1
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PPUSH
8180: CALL_OW 69
8184: IN
8185: AND
8186: IFFALSE 8370
// begin if respawning_time_min > 0 0$00 then
8188: LD_EXP 13
8192: PUSH
8193: LD_INT 0
8195: GREATER
8196: IFFALSE 8370
// begin s := GetSide ( un ) ;
8198: LD_ADDR_VAR 0 4
8202: PUSH
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 255
8212: ST_TO_ADDR
// n := GetNation ( un ) ;
8213: LD_ADDR_VAR 0 5
8217: PUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 248
8227: ST_TO_ADDR
// cl := GetClass ( un ) ;
8228: LD_ADDR_VAR 0 3
8232: PUSH
8233: LD_VAR 0 1
8237: PPUSH
8238: CALL_OW 257
8242: ST_TO_ADDR
// wait ( respawning_time_min ) ;
8243: LD_EXP 13
8247: PPUSH
8248: CALL_OW 67
// wait ( respawning_time_max - ( 0 0$10 * tick mod 10 + 1 ) * cl ) ;
8252: LD_EXP 14
8256: PUSH
8257: LD_INT 350
8259: PUSH
8260: LD_OWVAR 1
8264: MUL
8265: PUSH
8266: LD_INT 10
8268: MOD
8269: PUSH
8270: LD_INT 1
8272: PLUS
8273: PUSH
8274: LD_VAR 0 3
8278: MUL
8279: MINUS
8280: PPUSH
8281: CALL_OW 67
// uc_side := s ;
8285: LD_ADDR_OWVAR 20
8289: PUSH
8290: LD_VAR 0 4
8294: ST_TO_ADDR
// uc_nation := n ;
8295: LD_ADDR_OWVAR 21
8299: PUSH
8300: LD_VAR 0 5
8304: ST_TO_ADDR
// PrepareHuman ( false , cl , skill_level - 2 ) ;
8305: LD_INT 0
8307: PPUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: LD_EXP 11
8317: PUSH
8318: LD_INT 2
8320: MINUS
8321: PPUSH
8322: CALL_OW 380
// PlaceUnitArea ( CreateHuman , [ cr1 , cr3 , cr2 , cr3 ] [ ( cl mod 4 ) + 1 ] , true ) ;
8326: CALL_OW 44
8330: PPUSH
8331: LD_INT 17
8333: PUSH
8334: LD_INT 19
8336: PUSH
8337: LD_INT 18
8339: PUSH
8340: LD_INT 19
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: PUSH
8349: LD_VAR 0 3
8353: PUSH
8354: LD_INT 4
8356: MOD
8357: PUSH
8358: LD_INT 1
8360: PLUS
8361: ARRAY
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 49
// end ; end ; end ;
8370: PPOPN 5
8372: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = bot_side and un in FilterAllUnits ( [ [ f_control , control_remote ] , [ f_type , unit_vehicle ] ] ) then
8373: LD_VAR 0 1
8377: PPUSH
8378: CALL_OW 255
8382: PUSH
8383: LD_EXP 8
8387: EQUAL
8388: PUSH
8389: LD_VAR 0 1
8393: PUSH
8394: LD_INT 33
8396: PUSH
8397: LD_INT 2
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: LD_INT 21
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PPUSH
8418: CALL_OW 69
8422: IN
8423: AND
8424: IFFALSE 8547
// if GetSide ( NearestUnitToUnit ( all_units diff un , un ) ) <> bot_side then
8426: LD_OWVAR 3
8430: PUSH
8431: LD_VAR 0 1
8435: DIFF
8436: PPUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: CALL_OW 74
8446: PPUSH
8447: CALL_OW 255
8451: PUSH
8452: LD_EXP 8
8456: NONEQUAL
8457: IFFALSE 8547
// begin Wait ( 0 0$1.3 ) ;
8459: LD_INT 46
8461: PPUSH
8462: CALL_OW 67
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 250
8475: PPUSH
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 251
8485: PPUSH
8486: LD_INT 1
8488: PPUSH
8489: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 250
8502: PPUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: CALL_OW 251
8512: PPUSH
8513: LD_INT 1
8515: PPUSH
8516: CALL_OW 453
// MineExplosion ( GetX ( un ) , GetY ( un ) , 1 ) ;
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 250
8529: PPUSH
8530: LD_VAR 0 1
8534: PPUSH
8535: CALL_OW 251
8539: PPUSH
8540: LD_INT 1
8542: PPUSH
8543: CALL_OW 453
// end ; if GetControl ( un ) = control_remote then
8547: LD_VAR 0 1
8551: PPUSH
8552: CALL_OW 263
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: IFFALSE 8571
// ComUnlink ( un ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: CALL_OW 136
// end ;
8571: PPOPN 1
8573: END
// on VehicleConstructed ( veh , b ) do begin if GetSide ( veh ) = bot_side then
8574: LD_VAR 0 1
8578: PPUSH
8579: CALL_OW 255
8583: PUSH
8584: LD_EXP 8
8588: EQUAL
8589: IFFALSE 8620
// attackers := Insert ( attackers , attackers + 1 , veh ) ;
8591: LD_ADDR_EXP 20
8595: PUSH
8596: LD_EXP 20
8600: PPUSH
8601: LD_EXP 20
8605: PUSH
8606: LD_INT 1
8608: PLUS
8609: PPUSH
8610: LD_VAR 0 1
8614: PPUSH
8615: CALL_OW 2
8619: ST_TO_ADDR
// end ;
8620: PPOPN 2
8622: END
// on LeaveBuilding ( b , un ) do var i , arm ;
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
// begin if GetSide ( b ) = bot_side and GetBType ( b ) = b_bunker then
8627: LD_VAR 0 1
8631: PPUSH
8632: CALL_OW 255
8636: PUSH
8637: LD_EXP 8
8641: EQUAL
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 266
8652: PUSH
8653: LD_INT 32
8655: EQUAL
8656: AND
8657: IFFALSE 8755
// begin arm := FilterAllUnits ( [ [ f_side , bot_side ] , [ f_btype , b_barracks ] ] ) ;
8659: LD_ADDR_VAR 0 4
8663: PUSH
8664: LD_INT 22
8666: PUSH
8667: LD_EXP 8
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 5
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: ST_TO_ADDR
// for i in arm do
8695: LD_ADDR_VAR 0 3
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: FOR_IN
8706: IFFALSE 8753
// if UnitsInside ( i ) < 6 then
8708: LD_VAR 0 3
8712: PPUSH
8713: CALL_OW 313
8717: PUSH
8718: LD_INT 6
8720: LESS
8721: IFFALSE 8751
// begin ComEnterUnit ( un , i ) ;
8723: LD_VAR 0 2
8727: PPUSH
8728: LD_VAR 0 3
8732: PPUSH
8733: CALL_OW 120
// AddComChangeProfession ( un , class_mortar ) ;
8737: LD_VAR 0 2
8741: PPUSH
8742: LD_INT 8
8744: PPUSH
8745: CALL_OW 183
// break ;
8749: GO 8753
// end ;
8751: GO 8705
8753: POP
8754: POP
// end ; end ; end_of_file
8755: PPOPN 4
8757: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8758: LD_VAR 0 1
8762: PUSH
8763: LD_INT 200
8765: DOUBLE
8766: GREATEREQUAL
8767: IFFALSE 8775
8769: LD_INT 299
8771: DOUBLE
8772: LESSEQUAL
8773: IFTRUE 8777
8775: GO 8809
8777: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8778: LD_VAR 0 1
8782: PPUSH
8783: LD_VAR 0 2
8787: PPUSH
8788: LD_VAR 0 3
8792: PPUSH
8793: LD_VAR 0 4
8797: PPUSH
8798: LD_VAR 0 5
8802: PPUSH
8803: CALL 59392 0 5
8807: GO 8886
8809: LD_INT 300
8811: DOUBLE
8812: GREATEREQUAL
8813: IFFALSE 8821
8815: LD_INT 399
8817: DOUBLE
8818: LESSEQUAL
8819: IFTRUE 8823
8821: GO 8885
8823: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8824: LD_VAR 0 1
8828: PPUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: LD_VAR 0 3
8838: PPUSH
8839: LD_VAR 0 4
8843: PPUSH
8844: LD_VAR 0 5
8848: PPUSH
8849: LD_VAR 0 6
8853: PPUSH
8854: LD_VAR 0 7
8858: PPUSH
8859: LD_VAR 0 8
8863: PPUSH
8864: LD_VAR 0 9
8868: PPUSH
8869: LD_VAR 0 10
8873: PPUSH
8874: LD_VAR 0 11
8878: PPUSH
8879: CALL 57280 0 11
8883: GO 8886
8885: POP
// end ; end_of_file
8886: PPOPN 11
8888: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8889: LD_INT 0
8891: PPUSH
8892: PPUSH
// if exist_mode then
8893: LD_VAR 0 2
8897: IFFALSE 8922
// unit := CreateCharacter ( prefix & ident ) else
8899: LD_ADDR_VAR 0 5
8903: PUSH
8904: LD_VAR 0 3
8908: PUSH
8909: LD_VAR 0 1
8913: STR
8914: PPUSH
8915: CALL_OW 34
8919: ST_TO_ADDR
8920: GO 8937
// unit := NewCharacter ( ident ) ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: LD_VAR 0 1
8931: PPUSH
8932: CALL_OW 25
8936: ST_TO_ADDR
// result := unit ;
8937: LD_ADDR_VAR 0 4
8941: PUSH
8942: LD_VAR 0 5
8946: ST_TO_ADDR
// end ;
8947: LD_VAR 0 4
8951: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
// if not side or not nation then
8956: LD_VAR 0 1
8960: NOT
8961: PUSH
8962: LD_VAR 0 2
8966: NOT
8967: OR
8968: IFFALSE 8972
// exit ;
8970: GO 9736
// case nation of nation_american :
8972: LD_VAR 0 2
8976: PUSH
8977: LD_INT 1
8979: DOUBLE
8980: EQUAL
8981: IFTRUE 8985
8983: GO 9199
8985: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8986: LD_ADDR_VAR 0 4
8990: PUSH
8991: LD_INT 35
8993: PUSH
8994: LD_INT 45
8996: PUSH
8997: LD_INT 46
8999: PUSH
9000: LD_INT 47
9002: PUSH
9003: LD_INT 82
9005: PUSH
9006: LD_INT 83
9008: PUSH
9009: LD_INT 84
9011: PUSH
9012: LD_INT 85
9014: PUSH
9015: LD_INT 86
9017: PUSH
9018: LD_INT 1
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: LD_INT 6
9026: PUSH
9027: LD_INT 15
9029: PUSH
9030: LD_INT 16
9032: PUSH
9033: LD_INT 7
9035: PUSH
9036: LD_INT 12
9038: PUSH
9039: LD_INT 13
9041: PUSH
9042: LD_INT 10
9044: PUSH
9045: LD_INT 14
9047: PUSH
9048: LD_INT 20
9050: PUSH
9051: LD_INT 21
9053: PUSH
9054: LD_INT 22
9056: PUSH
9057: LD_INT 25
9059: PUSH
9060: LD_INT 32
9062: PUSH
9063: LD_INT 27
9065: PUSH
9066: LD_INT 36
9068: PUSH
9069: LD_INT 69
9071: PUSH
9072: LD_INT 39
9074: PUSH
9075: LD_INT 34
9077: PUSH
9078: LD_INT 40
9080: PUSH
9081: LD_INT 48
9083: PUSH
9084: LD_INT 49
9086: PUSH
9087: LD_INT 50
9089: PUSH
9090: LD_INT 51
9092: PUSH
9093: LD_INT 52
9095: PUSH
9096: LD_INT 53
9098: PUSH
9099: LD_INT 54
9101: PUSH
9102: LD_INT 55
9104: PUSH
9105: LD_INT 56
9107: PUSH
9108: LD_INT 57
9110: PUSH
9111: LD_INT 58
9113: PUSH
9114: LD_INT 59
9116: PUSH
9117: LD_INT 60
9119: PUSH
9120: LD_INT 61
9122: PUSH
9123: LD_INT 62
9125: PUSH
9126: LD_INT 80
9128: PUSH
9129: LD_INT 82
9131: PUSH
9132: LD_INT 83
9134: PUSH
9135: LD_INT 84
9137: PUSH
9138: LD_INT 85
9140: PUSH
9141: LD_INT 86
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
9197: GO 9660
9199: LD_INT 2
9201: DOUBLE
9202: EQUAL
9203: IFTRUE 9207
9205: GO 9429
9207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
9208: LD_ADDR_VAR 0 4
9212: PUSH
9213: LD_INT 35
9215: PUSH
9216: LD_INT 45
9218: PUSH
9219: LD_INT 46
9221: PUSH
9222: LD_INT 47
9224: PUSH
9225: LD_INT 82
9227: PUSH
9228: LD_INT 83
9230: PUSH
9231: LD_INT 84
9233: PUSH
9234: LD_INT 85
9236: PUSH
9237: LD_INT 87
9239: PUSH
9240: LD_INT 70
9242: PUSH
9243: LD_INT 1
9245: PUSH
9246: LD_INT 11
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: LD_INT 4
9254: PUSH
9255: LD_INT 5
9257: PUSH
9258: LD_INT 6
9260: PUSH
9261: LD_INT 15
9263: PUSH
9264: LD_INT 18
9266: PUSH
9267: LD_INT 7
9269: PUSH
9270: LD_INT 17
9272: PUSH
9273: LD_INT 8
9275: PUSH
9276: LD_INT 20
9278: PUSH
9279: LD_INT 21
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 72
9287: PUSH
9288: LD_INT 26
9290: PUSH
9291: LD_INT 69
9293: PUSH
9294: LD_INT 39
9296: PUSH
9297: LD_INT 40
9299: PUSH
9300: LD_INT 41
9302: PUSH
9303: LD_INT 42
9305: PUSH
9306: LD_INT 43
9308: PUSH
9309: LD_INT 48
9311: PUSH
9312: LD_INT 49
9314: PUSH
9315: LD_INT 50
9317: PUSH
9318: LD_INT 51
9320: PUSH
9321: LD_INT 52
9323: PUSH
9324: LD_INT 53
9326: PUSH
9327: LD_INT 54
9329: PUSH
9330: LD_INT 55
9332: PUSH
9333: LD_INT 56
9335: PUSH
9336: LD_INT 60
9338: PUSH
9339: LD_INT 61
9341: PUSH
9342: LD_INT 62
9344: PUSH
9345: LD_INT 66
9347: PUSH
9348: LD_INT 67
9350: PUSH
9351: LD_INT 68
9353: PUSH
9354: LD_INT 81
9356: PUSH
9357: LD_INT 82
9359: PUSH
9360: LD_INT 83
9362: PUSH
9363: LD_INT 84
9365: PUSH
9366: LD_INT 85
9368: PUSH
9369: LD_INT 87
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: ST_TO_ADDR
9427: GO 9660
9429: LD_INT 3
9431: DOUBLE
9432: EQUAL
9433: IFTRUE 9437
9435: GO 9659
9437: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9438: LD_ADDR_VAR 0 4
9442: PUSH
9443: LD_INT 46
9445: PUSH
9446: LD_INT 47
9448: PUSH
9449: LD_INT 1
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 82
9457: PUSH
9458: LD_INT 83
9460: PUSH
9461: LD_INT 84
9463: PUSH
9464: LD_INT 85
9466: PUSH
9467: LD_INT 86
9469: PUSH
9470: LD_INT 11
9472: PUSH
9473: LD_INT 9
9475: PUSH
9476: LD_INT 20
9478: PUSH
9479: LD_INT 19
9481: PUSH
9482: LD_INT 21
9484: PUSH
9485: LD_INT 24
9487: PUSH
9488: LD_INT 22
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 28
9496: PUSH
9497: LD_INT 29
9499: PUSH
9500: LD_INT 30
9502: PUSH
9503: LD_INT 31
9505: PUSH
9506: LD_INT 37
9508: PUSH
9509: LD_INT 38
9511: PUSH
9512: LD_INT 32
9514: PUSH
9515: LD_INT 27
9517: PUSH
9518: LD_INT 33
9520: PUSH
9521: LD_INT 69
9523: PUSH
9524: LD_INT 39
9526: PUSH
9527: LD_INT 34
9529: PUSH
9530: LD_INT 40
9532: PUSH
9533: LD_INT 71
9535: PUSH
9536: LD_INT 23
9538: PUSH
9539: LD_INT 44
9541: PUSH
9542: LD_INT 48
9544: PUSH
9545: LD_INT 49
9547: PUSH
9548: LD_INT 50
9550: PUSH
9551: LD_INT 51
9553: PUSH
9554: LD_INT 52
9556: PUSH
9557: LD_INT 53
9559: PUSH
9560: LD_INT 54
9562: PUSH
9563: LD_INT 55
9565: PUSH
9566: LD_INT 56
9568: PUSH
9569: LD_INT 57
9571: PUSH
9572: LD_INT 58
9574: PUSH
9575: LD_INT 59
9577: PUSH
9578: LD_INT 63
9580: PUSH
9581: LD_INT 64
9583: PUSH
9584: LD_INT 65
9586: PUSH
9587: LD_INT 82
9589: PUSH
9590: LD_INT 83
9592: PUSH
9593: LD_INT 84
9595: PUSH
9596: LD_INT 85
9598: PUSH
9599: LD_INT 86
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: ST_TO_ADDR
9657: GO 9660
9659: POP
// if state > - 1 and state < 3 then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 1
9667: NEG
9668: GREATER
9669: PUSH
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 3
9677: LESS
9678: AND
9679: IFFALSE 9736
// for i in result do
9681: LD_ADDR_VAR 0 5
9685: PUSH
9686: LD_VAR 0 4
9690: PUSH
9691: FOR_IN
9692: IFFALSE 9734
// if GetTech ( i , side ) <> state then
9694: LD_VAR 0 5
9698: PPUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 321
9708: PUSH
9709: LD_VAR 0 3
9713: NONEQUAL
9714: IFFALSE 9732
// result := result diff i ;
9716: LD_ADDR_VAR 0 4
9720: PUSH
9721: LD_VAR 0 4
9725: PUSH
9726: LD_VAR 0 5
9730: DIFF
9731: ST_TO_ADDR
9732: GO 9691
9734: POP
9735: POP
// end ;
9736: LD_VAR 0 4
9740: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9741: LD_INT 0
9743: PPUSH
9744: PPUSH
9745: PPUSH
// result := true ;
9746: LD_ADDR_VAR 0 3
9750: PUSH
9751: LD_INT 1
9753: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9754: LD_ADDR_VAR 0 5
9758: PUSH
9759: LD_VAR 0 2
9763: PPUSH
9764: CALL_OW 480
9768: ST_TO_ADDR
// if not tmp then
9769: LD_VAR 0 5
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9827
// for i in tmp do
9778: LD_ADDR_VAR 0 4
9782: PUSH
9783: LD_VAR 0 5
9787: PUSH
9788: FOR_IN
9789: IFFALSE 9825
// if GetTech ( i , side ) <> state_researched then
9791: LD_VAR 0 4
9795: PPUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 321
9805: PUSH
9806: LD_INT 2
9808: NONEQUAL
9809: IFFALSE 9823
// begin result := false ;
9811: LD_ADDR_VAR 0 3
9815: PUSH
9816: LD_INT 0
9818: ST_TO_ADDR
// exit ;
9819: POP
9820: POP
9821: GO 9827
// end ;
9823: GO 9788
9825: POP
9826: POP
// end ;
9827: LD_VAR 0 3
9831: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9832: LD_INT 0
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
9843: PPUSH
9844: PPUSH
9845: PPUSH
9846: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9847: LD_VAR 0 1
9851: NOT
9852: PUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: CALL_OW 257
9862: PUSH
9863: LD_INT 9
9865: NONEQUAL
9866: OR
9867: IFFALSE 9871
// exit ;
9869: GO 10444
// side := GetSide ( unit ) ;
9871: LD_ADDR_VAR 0 9
9875: PUSH
9876: LD_VAR 0 1
9880: PPUSH
9881: CALL_OW 255
9885: ST_TO_ADDR
// tech_space := tech_spacanom ;
9886: LD_ADDR_VAR 0 12
9890: PUSH
9891: LD_INT 29
9893: ST_TO_ADDR
// tech_time := tech_taurad ;
9894: LD_ADDR_VAR 0 13
9898: PUSH
9899: LD_INT 28
9901: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9902: LD_ADDR_VAR 0 11
9906: PUSH
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 310
9916: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9917: LD_VAR 0 11
9921: PPUSH
9922: CALL_OW 247
9926: PUSH
9927: LD_INT 2
9929: EQUAL
9930: IFFALSE 9934
// exit ;
9932: GO 10444
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9934: LD_ADDR_VAR 0 8
9938: PUSH
9939: LD_INT 81
9941: PUSH
9942: LD_VAR 0 9
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: LD_INT 21
9956: PUSH
9957: LD_INT 3
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PPUSH
9972: CALL_OW 69
9976: ST_TO_ADDR
// if not tmp then
9977: LD_VAR 0 8
9981: NOT
9982: IFFALSE 9986
// exit ;
9984: GO 10444
// if in_unit then
9986: LD_VAR 0 11
9990: IFFALSE 10014
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9992: LD_ADDR_VAR 0 10
9996: PUSH
9997: LD_VAR 0 8
10001: PPUSH
10002: LD_VAR 0 11
10006: PPUSH
10007: CALL_OW 74
10011: ST_TO_ADDR
10012: GO 10034
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10014: LD_ADDR_VAR 0 10
10018: PUSH
10019: LD_VAR 0 8
10023: PPUSH
10024: LD_VAR 0 1
10028: PPUSH
10029: CALL_OW 74
10033: ST_TO_ADDR
// if not enemy then
10034: LD_VAR 0 10
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10444
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10043: LD_VAR 0 11
10047: PUSH
10048: LD_VAR 0 11
10052: PPUSH
10053: LD_VAR 0 10
10057: PPUSH
10058: CALL_OW 296
10062: PUSH
10063: LD_INT 13
10065: GREATER
10066: AND
10067: PUSH
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_VAR 0 10
10077: PPUSH
10078: CALL_OW 296
10082: PUSH
10083: LD_INT 12
10085: GREATER
10086: OR
10087: IFFALSE 10091
// exit ;
10089: GO 10444
// missile := [ 1 ] ;
10091: LD_ADDR_VAR 0 14
10095: PUSH
10096: LD_INT 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10102: LD_VAR 0 9
10106: PPUSH
10107: LD_VAR 0 12
10111: PPUSH
10112: CALL_OW 325
10116: IFFALSE 10145
// missile := Insert ( missile , missile + 1 , 2 ) ;
10118: LD_ADDR_VAR 0 14
10122: PUSH
10123: LD_VAR 0 14
10127: PPUSH
10128: LD_VAR 0 14
10132: PUSH
10133: LD_INT 1
10135: PLUS
10136: PPUSH
10137: LD_INT 2
10139: PPUSH
10140: CALL_OW 2
10144: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10145: LD_VAR 0 9
10149: PPUSH
10150: LD_VAR 0 13
10154: PPUSH
10155: CALL_OW 325
10159: PUSH
10160: LD_VAR 0 10
10164: PPUSH
10165: CALL_OW 255
10169: PPUSH
10170: LD_VAR 0 13
10174: PPUSH
10175: CALL_OW 325
10179: NOT
10180: AND
10181: IFFALSE 10210
// missile := Insert ( missile , missile + 1 , 3 ) ;
10183: LD_ADDR_VAR 0 14
10187: PUSH
10188: LD_VAR 0 14
10192: PPUSH
10193: LD_VAR 0 14
10197: PUSH
10198: LD_INT 1
10200: PLUS
10201: PPUSH
10202: LD_INT 3
10204: PPUSH
10205: CALL_OW 2
10209: ST_TO_ADDR
// if missile < 2 then
10210: LD_VAR 0 14
10214: PUSH
10215: LD_INT 2
10217: LESS
10218: IFFALSE 10222
// exit ;
10220: GO 10444
// x := GetX ( enemy ) ;
10222: LD_ADDR_VAR 0 4
10226: PUSH
10227: LD_VAR 0 10
10231: PPUSH
10232: CALL_OW 250
10236: ST_TO_ADDR
// y := GetY ( enemy ) ;
10237: LD_ADDR_VAR 0 5
10241: PUSH
10242: LD_VAR 0 10
10246: PPUSH
10247: CALL_OW 251
10251: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10252: LD_ADDR_VAR 0 6
10256: PUSH
10257: LD_VAR 0 4
10261: PUSH
10262: LD_INT 1
10264: NEG
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 12
10273: PLUS
10274: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10275: LD_ADDR_VAR 0 7
10279: PUSH
10280: LD_VAR 0 5
10284: PUSH
10285: LD_INT 1
10287: NEG
10288: PPUSH
10289: LD_INT 1
10291: PPUSH
10292: CALL_OW 12
10296: PLUS
10297: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10298: LD_VAR 0 6
10302: PPUSH
10303: LD_VAR 0 7
10307: PPUSH
10308: CALL_OW 488
10312: NOT
10313: IFFALSE 10335
// begin _x := x ;
10315: LD_ADDR_VAR 0 6
10319: PUSH
10320: LD_VAR 0 4
10324: ST_TO_ADDR
// _y := y ;
10325: LD_ADDR_VAR 0 7
10329: PUSH
10330: LD_VAR 0 5
10334: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10335: LD_ADDR_VAR 0 3
10339: PUSH
10340: LD_INT 1
10342: PPUSH
10343: LD_VAR 0 14
10347: PPUSH
10348: CALL_OW 12
10352: ST_TO_ADDR
// case i of 1 :
10353: LD_VAR 0 3
10357: PUSH
10358: LD_INT 1
10360: DOUBLE
10361: EQUAL
10362: IFTRUE 10366
10364: GO 10383
10366: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10367: LD_VAR 0 1
10371: PPUSH
10372: LD_VAR 0 10
10376: PPUSH
10377: CALL_OW 115
10381: GO 10444
10383: LD_INT 2
10385: DOUBLE
10386: EQUAL
10387: IFTRUE 10391
10389: GO 10413
10391: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10392: LD_VAR 0 1
10396: PPUSH
10397: LD_VAR 0 6
10401: PPUSH
10402: LD_VAR 0 7
10406: PPUSH
10407: CALL_OW 153
10411: GO 10444
10413: LD_INT 3
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10443
10421: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10422: LD_VAR 0 1
10426: PPUSH
10427: LD_VAR 0 6
10431: PPUSH
10432: LD_VAR 0 7
10436: PPUSH
10437: CALL_OW 154
10441: GO 10444
10443: POP
// end ;
10444: LD_VAR 0 2
10448: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10449: LD_INT 0
10451: PPUSH
10452: PPUSH
10453: PPUSH
10454: PPUSH
10455: PPUSH
10456: PPUSH
// if not unit or not building then
10457: LD_VAR 0 1
10461: NOT
10462: PUSH
10463: LD_VAR 0 2
10467: NOT
10468: OR
10469: IFFALSE 10473
// exit ;
10471: GO 10631
// x := GetX ( building ) ;
10473: LD_ADDR_VAR 0 5
10477: PUSH
10478: LD_VAR 0 2
10482: PPUSH
10483: CALL_OW 250
10487: ST_TO_ADDR
// y := GetY ( building ) ;
10488: LD_ADDR_VAR 0 6
10492: PUSH
10493: LD_VAR 0 2
10497: PPUSH
10498: CALL_OW 251
10502: ST_TO_ADDR
// for i = 0 to 5 do
10503: LD_ADDR_VAR 0 4
10507: PUSH
10508: DOUBLE
10509: LD_INT 0
10511: DEC
10512: ST_TO_ADDR
10513: LD_INT 5
10515: PUSH
10516: FOR_TO
10517: IFFALSE 10629
// begin _x := ShiftX ( x , i , 3 ) ;
10519: LD_ADDR_VAR 0 7
10523: PUSH
10524: LD_VAR 0 5
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: LD_INT 3
10536: PPUSH
10537: CALL_OW 272
10541: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10542: LD_ADDR_VAR 0 8
10546: PUSH
10547: LD_VAR 0 6
10551: PPUSH
10552: LD_VAR 0 4
10556: PPUSH
10557: LD_INT 3
10559: PPUSH
10560: CALL_OW 273
10564: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10565: LD_VAR 0 7
10569: PPUSH
10570: LD_VAR 0 8
10574: PPUSH
10575: CALL_OW 488
10579: NOT
10580: IFFALSE 10584
// continue ;
10582: GO 10516
// if HexInfo ( _x , _y ) = 0 then
10584: LD_VAR 0 7
10588: PPUSH
10589: LD_VAR 0 8
10593: PPUSH
10594: CALL_OW 428
10598: PUSH
10599: LD_INT 0
10601: EQUAL
10602: IFFALSE 10627
// begin ComMoveXY ( unit , _x , _y ) ;
10604: LD_VAR 0 1
10608: PPUSH
10609: LD_VAR 0 7
10613: PPUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: CALL_OW 111
// exit ;
10623: POP
10624: POP
10625: GO 10631
// end ; end ;
10627: GO 10516
10629: POP
10630: POP
// end ;
10631: LD_VAR 0 3
10635: RET
// export function ScanBase ( side , base_area ) ; begin
10636: LD_INT 0
10638: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10639: LD_ADDR_VAR 0 3
10643: PUSH
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_INT 81
10651: PUSH
10652: LD_VAR 0 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PPUSH
10661: CALL_OW 70
10665: ST_TO_ADDR
// end ;
10666: LD_VAR 0 3
10670: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10671: LD_INT 0
10673: PPUSH
10674: PPUSH
10675: PPUSH
10676: PPUSH
// result := false ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_INT 0
10684: ST_TO_ADDR
// side := GetSide ( unit ) ;
10685: LD_ADDR_VAR 0 3
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10700: LD_ADDR_VAR 0 4
10704: PUSH
10705: LD_VAR 0 1
10709: PPUSH
10710: CALL_OW 248
10714: ST_TO_ADDR
// case nat of 1 :
10715: LD_VAR 0 4
10719: PUSH
10720: LD_INT 1
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10739
10728: POP
// tech := tech_lassight ; 2 :
10729: LD_ADDR_VAR 0 5
10733: PUSH
10734: LD_INT 12
10736: ST_TO_ADDR
10737: GO 10778
10739: LD_INT 2
10741: DOUBLE
10742: EQUAL
10743: IFTRUE 10747
10745: GO 10758
10747: POP
// tech := tech_mortar ; 3 :
10748: LD_ADDR_VAR 0 5
10752: PUSH
10753: LD_INT 41
10755: ST_TO_ADDR
10756: GO 10778
10758: LD_INT 3
10760: DOUBLE
10761: EQUAL
10762: IFTRUE 10766
10764: GO 10777
10766: POP
// tech := tech_bazooka ; end ;
10767: LD_ADDR_VAR 0 5
10771: PUSH
10772: LD_INT 44
10774: ST_TO_ADDR
10775: GO 10778
10777: POP
// if Researched ( side , tech ) then
10778: LD_VAR 0 3
10782: PPUSH
10783: LD_VAR 0 5
10787: PPUSH
10788: CALL_OW 325
10792: IFFALSE 10819
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: LD_INT 8
10804: PUSH
10805: LD_INT 9
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: LD_VAR 0 4
10817: ARRAY
10818: ST_TO_ADDR
// end ;
10819: LD_VAR 0 2
10823: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10824: LD_INT 0
10826: PPUSH
10827: PPUSH
10828: PPUSH
// if not mines then
10829: LD_VAR 0 2
10833: NOT
10834: IFFALSE 10838
// exit ;
10836: GO 10982
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10838: LD_ADDR_VAR 0 5
10842: PUSH
10843: LD_INT 81
10845: PUSH
10846: LD_VAR 0 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: LD_INT 21
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PPUSH
10876: CALL_OW 69
10880: ST_TO_ADDR
// for i in mines do
10881: LD_ADDR_VAR 0 4
10885: PUSH
10886: LD_VAR 0 2
10890: PUSH
10891: FOR_IN
10892: IFFALSE 10980
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10894: LD_VAR 0 4
10898: PUSH
10899: LD_INT 1
10901: ARRAY
10902: PPUSH
10903: LD_VAR 0 4
10907: PUSH
10908: LD_INT 2
10910: ARRAY
10911: PPUSH
10912: CALL_OW 458
10916: NOT
10917: IFFALSE 10921
// continue ;
10919: GO 10891
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10921: LD_VAR 0 4
10925: PUSH
10926: LD_INT 1
10928: ARRAY
10929: PPUSH
10930: LD_VAR 0 4
10934: PUSH
10935: LD_INT 2
10937: ARRAY
10938: PPUSH
10939: CALL_OW 428
10943: PUSH
10944: LD_VAR 0 5
10948: IN
10949: IFFALSE 10978
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10951: LD_VAR 0 4
10955: PUSH
10956: LD_INT 1
10958: ARRAY
10959: PPUSH
10960: LD_VAR 0 4
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 456
// end ;
10978: GO 10891
10980: POP
10981: POP
// end ;
10982: LD_VAR 0 3
10986: RET
// export function Count ( array ) ; var i ; begin
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
// result := 0 ;
10991: LD_ADDR_VAR 0 2
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// for i in array do
10999: LD_ADDR_VAR 0 3
11003: PUSH
11004: LD_VAR 0 1
11008: PUSH
11009: FOR_IN
11010: IFFALSE 11034
// if i then
11012: LD_VAR 0 3
11016: IFFALSE 11032
// result := result + 1 ;
11018: LD_ADDR_VAR 0 2
11022: PUSH
11023: LD_VAR 0 2
11027: PUSH
11028: LD_INT 1
11030: PLUS
11031: ST_TO_ADDR
11032: GO 11009
11034: POP
11035: POP
// end ;
11036: LD_VAR 0 2
11040: RET
// export function IsEmpty ( building ) ; begin
11041: LD_INT 0
11043: PPUSH
// if not building then
11044: LD_VAR 0 1
11048: NOT
11049: IFFALSE 11053
// exit ;
11051: GO 11096
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_VAR 0 1
11062: PUSH
11063: LD_INT 22
11065: PUSH
11066: LD_VAR 0 1
11070: PPUSH
11071: CALL_OW 255
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 58
11082: PUSH
11083: EMPTY
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PPUSH
11090: CALL_OW 69
11094: IN
11095: ST_TO_ADDR
// end ;
11096: LD_VAR 0 2
11100: RET
// export function IsNotFull ( building ) ; begin
11101: LD_INT 0
11103: PPUSH
// if not building then
11104: LD_VAR 0 1
11108: NOT
11109: IFFALSE 11113
// exit ;
11111: GO 11132
// result := UnitsInside ( building ) < 6 ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 313
11127: PUSH
11128: LD_INT 6
11130: LESS
11131: ST_TO_ADDR
// end ;
11132: LD_VAR 0 2
11136: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11137: LD_INT 0
11139: PPUSH
11140: PPUSH
11141: PPUSH
11142: PPUSH
// tmp := [ ] ;
11143: LD_ADDR_VAR 0 3
11147: PUSH
11148: EMPTY
11149: ST_TO_ADDR
// list := [ ] ;
11150: LD_ADDR_VAR 0 5
11154: PUSH
11155: EMPTY
11156: ST_TO_ADDR
// for i = 16 to 25 do
11157: LD_ADDR_VAR 0 4
11161: PUSH
11162: DOUBLE
11163: LD_INT 16
11165: DEC
11166: ST_TO_ADDR
11167: LD_INT 25
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11244
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11173: LD_ADDR_VAR 0 3
11177: PUSH
11178: LD_VAR 0 3
11182: PUSH
11183: LD_INT 22
11185: PUSH
11186: LD_VAR 0 1
11190: PPUSH
11191: CALL_OW 255
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 91
11202: PUSH
11203: LD_VAR 0 1
11207: PUSH
11208: LD_INT 6
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 30
11218: PUSH
11219: LD_VAR 0 4
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: PPUSH
11236: CALL_OW 69
11240: ADD
11241: ST_TO_ADDR
11242: GO 11170
11244: POP
11245: POP
// for i = 1 to tmp do
11246: LD_ADDR_VAR 0 4
11250: PUSH
11251: DOUBLE
11252: LD_INT 1
11254: DEC
11255: ST_TO_ADDR
11256: LD_VAR 0 3
11260: PUSH
11261: FOR_TO
11262: IFFALSE 11350
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11264: LD_ADDR_VAR 0 5
11268: PUSH
11269: LD_VAR 0 5
11273: PUSH
11274: LD_VAR 0 3
11278: PUSH
11279: LD_VAR 0 4
11283: ARRAY
11284: PPUSH
11285: CALL_OW 266
11289: PUSH
11290: LD_VAR 0 3
11294: PUSH
11295: LD_VAR 0 4
11299: ARRAY
11300: PPUSH
11301: CALL_OW 250
11305: PUSH
11306: LD_VAR 0 3
11310: PUSH
11311: LD_VAR 0 4
11315: ARRAY
11316: PPUSH
11317: CALL_OW 251
11321: PUSH
11322: LD_VAR 0 3
11326: PUSH
11327: LD_VAR 0 4
11331: ARRAY
11332: PPUSH
11333: CALL_OW 254
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: ADD
11347: ST_TO_ADDR
11348: GO 11261
11350: POP
11351: POP
// result := list ;
11352: LD_ADDR_VAR 0 2
11356: PUSH
11357: LD_VAR 0 5
11361: ST_TO_ADDR
// end ;
11362: LD_VAR 0 2
11366: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11367: LD_INT 0
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
// if not factory then
11376: LD_VAR 0 1
11380: NOT
11381: IFFALSE 11385
// exit ;
11383: GO 11978
// if control = control_apeman then
11385: LD_VAR 0 4
11389: PUSH
11390: LD_INT 5
11392: EQUAL
11393: IFFALSE 11502
// begin tmp := UnitsInside ( factory ) ;
11395: LD_ADDR_VAR 0 8
11399: PUSH
11400: LD_VAR 0 1
11404: PPUSH
11405: CALL_OW 313
11409: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11410: LD_VAR 0 8
11414: PPUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 12
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PPUSH
11425: CALL_OW 72
11429: NOT
11430: IFFALSE 11440
// control := control_manual ;
11432: LD_ADDR_VAR 0 4
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11440: LD_ADDR_VAR 0 8
11444: PUSH
11445: LD_VAR 0 1
11449: PPUSH
11450: CALL 11137 0 1
11454: ST_TO_ADDR
// if tmp then
11455: LD_VAR 0 8
11459: IFFALSE 11502
// begin for i in tmp do
11461: LD_ADDR_VAR 0 7
11465: PUSH
11466: LD_VAR 0 8
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11500
// if i [ 1 ] = b_ext_radio then
11474: LD_VAR 0 7
11478: PUSH
11479: LD_INT 1
11481: ARRAY
11482: PUSH
11483: LD_INT 22
11485: EQUAL
11486: IFFALSE 11498
// begin control := control_remote ;
11488: LD_ADDR_VAR 0 4
11492: PUSH
11493: LD_INT 2
11495: ST_TO_ADDR
// break ;
11496: GO 11500
// end ;
11498: GO 11471
11500: POP
11501: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11502: LD_VAR 0 1
11506: PPUSH
11507: LD_VAR 0 2
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_VAR 0 4
11521: PPUSH
11522: LD_VAR 0 5
11526: PPUSH
11527: CALL_OW 448
11531: IFFALSE 11566
// begin result := [ chassis , engine , control , weapon ] ;
11533: LD_ADDR_VAR 0 6
11537: PUSH
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 3
11547: PUSH
11548: LD_VAR 0 4
11552: PUSH
11553: LD_VAR 0 5
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: ST_TO_ADDR
// exit ;
11564: GO 11978
// end ; _chassis := AvailableChassisList ( factory ) ;
11566: LD_ADDR_VAR 0 9
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 475
11580: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11581: LD_ADDR_VAR 0 11
11585: PUSH
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 476
11595: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11596: LD_ADDR_VAR 0 12
11600: PUSH
11601: LD_VAR 0 1
11605: PPUSH
11606: CALL_OW 477
11610: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11611: LD_ADDR_VAR 0 10
11615: PUSH
11616: LD_VAR 0 1
11620: PPUSH
11621: CALL_OW 478
11625: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11626: LD_VAR 0 9
11630: NOT
11631: PUSH
11632: LD_VAR 0 11
11636: NOT
11637: OR
11638: PUSH
11639: LD_VAR 0 12
11643: NOT
11644: OR
11645: PUSH
11646: LD_VAR 0 10
11650: NOT
11651: OR
11652: IFFALSE 11687
// begin result := [ chassis , engine , control , weapon ] ;
11654: LD_ADDR_VAR 0 6
11658: PUSH
11659: LD_VAR 0 2
11663: PUSH
11664: LD_VAR 0 3
11668: PUSH
11669: LD_VAR 0 4
11673: PUSH
11674: LD_VAR 0 5
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: ST_TO_ADDR
// exit ;
11685: GO 11978
// end ; if not chassis in _chassis then
11687: LD_VAR 0 2
11691: PUSH
11692: LD_VAR 0 9
11696: IN
11697: NOT
11698: IFFALSE 11724
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11700: LD_ADDR_VAR 0 2
11704: PUSH
11705: LD_VAR 0 9
11709: PUSH
11710: LD_INT 1
11712: PPUSH
11713: LD_VAR 0 9
11717: PPUSH
11718: CALL_OW 12
11722: ARRAY
11723: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11724: LD_VAR 0 2
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: CALL 11983 0 2
11738: NOT
11739: IFFALSE 11798
// repeat engine := _engine [ 1 ] ;
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: LD_VAR 0 11
11750: PUSH
11751: LD_INT 1
11753: ARRAY
11754: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11755: LD_ADDR_VAR 0 11
11759: PUSH
11760: LD_VAR 0 11
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL_OW 3
11772: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: CALL 11983 0 2
11787: PUSH
11788: LD_VAR 0 11
11792: PUSH
11793: EMPTY
11794: EQUAL
11795: OR
11796: IFFALSE 11741
// if not control in _control then
11798: LD_VAR 0 4
11802: PUSH
11803: LD_VAR 0 12
11807: IN
11808: NOT
11809: IFFALSE 11835
// control := _control [ rand ( 1 , _control ) ] ;
11811: LD_ADDR_VAR 0 4
11815: PUSH
11816: LD_VAR 0 12
11820: PUSH
11821: LD_INT 1
11823: PPUSH
11824: LD_VAR 0 12
11828: PPUSH
11829: CALL_OW 12
11833: ARRAY
11834: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11835: LD_VAR 0 2
11839: PPUSH
11840: LD_VAR 0 5
11844: PPUSH
11845: CALL 12203 0 2
11849: NOT
11850: IFFALSE 11909
// repeat weapon := _weapon [ 1 ] ;
11852: LD_ADDR_VAR 0 5
11856: PUSH
11857: LD_VAR 0 10
11861: PUSH
11862: LD_INT 1
11864: ARRAY
11865: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11866: LD_ADDR_VAR 0 10
11870: PUSH
11871: LD_VAR 0 10
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 3
11883: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11884: LD_VAR 0 2
11888: PPUSH
11889: LD_VAR 0 5
11893: PPUSH
11894: CALL 12203 0 2
11898: PUSH
11899: LD_VAR 0 10
11903: PUSH
11904: EMPTY
11905: EQUAL
11906: OR
11907: IFFALSE 11852
// result := [ ] ;
11909: LD_ADDR_VAR 0 6
11913: PUSH
11914: EMPTY
11915: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11916: LD_VAR 0 1
11920: PPUSH
11921: LD_VAR 0 2
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_VAR 0 4
11935: PPUSH
11936: LD_VAR 0 5
11940: PPUSH
11941: CALL_OW 448
11945: IFFALSE 11978
// result := [ chassis , engine , control , weapon ] ;
11947: LD_ADDR_VAR 0 6
11951: PUSH
11952: LD_VAR 0 2
11956: PUSH
11957: LD_VAR 0 3
11961: PUSH
11962: LD_VAR 0 4
11966: PUSH
11967: LD_VAR 0 5
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: ST_TO_ADDR
// end ;
11978: LD_VAR 0 6
11982: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11983: LD_INT 0
11985: PPUSH
// if not chassis or not engine then
11986: LD_VAR 0 1
11990: NOT
11991: PUSH
11992: LD_VAR 0 2
11996: NOT
11997: OR
11998: IFFALSE 12002
// exit ;
12000: GO 12198
// case engine of engine_solar :
12002: LD_VAR 0 2
12006: PUSH
12007: LD_INT 2
12009: DOUBLE
12010: EQUAL
12011: IFTRUE 12015
12013: GO 12053
12015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: LD_INT 11
12023: PUSH
12024: LD_INT 12
12026: PUSH
12027: LD_INT 13
12029: PUSH
12030: LD_INT 14
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: ST_TO_ADDR
12051: GO 12182
12053: LD_INT 1
12055: DOUBLE
12056: EQUAL
12057: IFTRUE 12061
12059: GO 12123
12061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: LD_INT 11
12069: PUSH
12070: LD_INT 12
12072: PUSH
12073: LD_INT 13
12075: PUSH
12076: LD_INT 14
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 3
12087: PUSH
12088: LD_INT 4
12090: PUSH
12091: LD_INT 5
12093: PUSH
12094: LD_INT 21
12096: PUSH
12097: LD_INT 23
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 24
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: ST_TO_ADDR
12121: GO 12182
12123: LD_INT 3
12125: DOUBLE
12126: EQUAL
12127: IFTRUE 12131
12129: GO 12181
12131: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_INT 13
12139: PUSH
12140: LD_INT 14
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: LD_INT 3
12148: PUSH
12149: LD_INT 4
12151: PUSH
12152: LD_INT 5
12154: PUSH
12155: LD_INT 21
12157: PUSH
12158: LD_INT 22
12160: PUSH
12161: LD_INT 23
12163: PUSH
12164: LD_INT 24
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: ST_TO_ADDR
12179: GO 12182
12181: POP
// result := ( chassis in result ) ;
12182: LD_ADDR_VAR 0 3
12186: PUSH
12187: LD_VAR 0 1
12191: PUSH
12192: LD_VAR 0 3
12196: IN
12197: ST_TO_ADDR
// end ;
12198: LD_VAR 0 3
12202: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12203: LD_INT 0
12205: PPUSH
// if not chassis or not weapon then
12206: LD_VAR 0 1
12210: NOT
12211: PUSH
12212: LD_VAR 0 2
12216: NOT
12217: OR
12218: IFFALSE 12222
// exit ;
12220: GO 13248
// case weapon of us_machine_gun :
12222: LD_VAR 0 2
12226: PUSH
12227: LD_INT 2
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12265
12235: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12236: LD_ADDR_VAR 0 3
12240: PUSH
12241: LD_INT 1
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 3
12249: PUSH
12250: LD_INT 4
12252: PUSH
12253: LD_INT 5
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: ST_TO_ADDR
12263: GO 13232
12265: LD_INT 3
12267: DOUBLE
12268: EQUAL
12269: IFTRUE 12273
12271: GO 12303
12273: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12274: LD_ADDR_VAR 0 3
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 3
12287: PUSH
12288: LD_INT 4
12290: PUSH
12291: LD_INT 5
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: ST_TO_ADDR
12301: GO 13232
12303: LD_INT 11
12305: DOUBLE
12306: EQUAL
12307: IFTRUE 12311
12309: GO 12341
12311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12312: LD_ADDR_VAR 0 3
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: LD_INT 2
12322: PUSH
12323: LD_INT 3
12325: PUSH
12326: LD_INT 4
12328: PUSH
12329: LD_INT 5
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 13232
12341: LD_INT 4
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12375
12349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: ST_TO_ADDR
12373: GO 13232
12375: LD_INT 5
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12409
12383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 3
12394: PUSH
12395: LD_INT 4
12397: PUSH
12398: LD_INT 5
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: ST_TO_ADDR
12407: GO 13232
12409: LD_INT 9
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12443
12417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: LD_INT 4
12431: PUSH
12432: LD_INT 5
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: ST_TO_ADDR
12441: GO 13232
12443: LD_INT 7
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12477
12451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: LD_INT 5
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: ST_TO_ADDR
12475: GO 13232
12477: LD_INT 12
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12511
12485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 3
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: LD_INT 5
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: ST_TO_ADDR
12509: GO 13232
12511: LD_INT 13
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 12545
12519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12520: LD_ADDR_VAR 0 3
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: LD_INT 3
12530: PUSH
12531: LD_INT 4
12533: PUSH
12534: LD_INT 5
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: ST_TO_ADDR
12543: GO 13232
12545: LD_INT 14
12547: DOUBLE
12548: EQUAL
12549: IFTRUE 12553
12551: GO 12571
12553: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: LD_INT 4
12561: PUSH
12562: LD_INT 5
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: ST_TO_ADDR
12569: GO 13232
12571: LD_INT 6
12573: DOUBLE
12574: EQUAL
12575: IFTRUE 12579
12577: GO 12597
12579: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: LD_INT 5
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: ST_TO_ADDR
12595: GO 13232
12597: LD_INT 10
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 12623
12605: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: LD_INT 4
12613: PUSH
12614: LD_INT 5
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: ST_TO_ADDR
12621: GO 13232
12623: LD_INT 22
12625: DOUBLE
12626: EQUAL
12627: IFTRUE 12631
12629: GO 12657
12631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12632: LD_ADDR_VAR 0 3
12636: PUSH
12637: LD_INT 11
12639: PUSH
12640: LD_INT 12
12642: PUSH
12643: LD_INT 13
12645: PUSH
12646: LD_INT 14
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 13232
12657: LD_INT 23
12659: DOUBLE
12660: EQUAL
12661: IFTRUE 12665
12663: GO 12691
12665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12666: LD_ADDR_VAR 0 3
12670: PUSH
12671: LD_INT 11
12673: PUSH
12674: LD_INT 12
12676: PUSH
12677: LD_INT 13
12679: PUSH
12680: LD_INT 14
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: ST_TO_ADDR
12689: GO 13232
12691: LD_INT 24
12693: DOUBLE
12694: EQUAL
12695: IFTRUE 12699
12697: GO 12725
12699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12700: LD_ADDR_VAR 0 3
12704: PUSH
12705: LD_INT 11
12707: PUSH
12708: LD_INT 12
12710: PUSH
12711: LD_INT 13
12713: PUSH
12714: LD_INT 14
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: ST_TO_ADDR
12723: GO 13232
12725: LD_INT 30
12727: DOUBLE
12728: EQUAL
12729: IFTRUE 12733
12731: GO 12759
12733: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12734: LD_ADDR_VAR 0 3
12738: PUSH
12739: LD_INT 11
12741: PUSH
12742: LD_INT 12
12744: PUSH
12745: LD_INT 13
12747: PUSH
12748: LD_INT 14
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: ST_TO_ADDR
12757: GO 13232
12759: LD_INT 25
12761: DOUBLE
12762: EQUAL
12763: IFTRUE 12767
12765: GO 12785
12767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12768: LD_ADDR_VAR 0 3
12772: PUSH
12773: LD_INT 13
12775: PUSH
12776: LD_INT 14
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: ST_TO_ADDR
12783: GO 13232
12785: LD_INT 27
12787: DOUBLE
12788: EQUAL
12789: IFTRUE 12793
12791: GO 12811
12793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12794: LD_ADDR_VAR 0 3
12798: PUSH
12799: LD_INT 13
12801: PUSH
12802: LD_INT 14
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: ST_TO_ADDR
12809: GO 13232
12811: LD_INT 28
12813: DOUBLE
12814: EQUAL
12815: IFTRUE 12819
12817: GO 12837
12819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 13
12827: PUSH
12828: LD_INT 14
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: ST_TO_ADDR
12835: GO 13232
12837: LD_INT 29
12839: DOUBLE
12840: EQUAL
12841: IFTRUE 12845
12843: GO 12863
12845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: LD_INT 13
12853: PUSH
12854: LD_INT 14
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
12861: GO 13232
12863: LD_INT 31
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12889
12871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12872: LD_ADDR_VAR 0 3
12876: PUSH
12877: LD_INT 13
12879: PUSH
12880: LD_INT 14
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13232
12889: LD_INT 26
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 12915
12897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12898: LD_ADDR_VAR 0 3
12902: PUSH
12903: LD_INT 13
12905: PUSH
12906: LD_INT 14
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: ST_TO_ADDR
12913: GO 13232
12915: LD_INT 42
12917: DOUBLE
12918: EQUAL
12919: IFTRUE 12923
12921: GO 12949
12923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12924: LD_ADDR_VAR 0 3
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 23
12937: PUSH
12938: LD_INT 24
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: ST_TO_ADDR
12947: GO 13232
12949: LD_INT 43
12951: DOUBLE
12952: EQUAL
12953: IFTRUE 12957
12955: GO 12983
12957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 24
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
12981: GO 13232
12983: LD_INT 44
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13017
12991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_INT 21
12999: PUSH
13000: LD_INT 22
13002: PUSH
13003: LD_INT 23
13005: PUSH
13006: LD_INT 24
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: ST_TO_ADDR
13015: GO 13232
13017: LD_INT 45
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13051
13025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_INT 21
13033: PUSH
13034: LD_INT 22
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 24
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: ST_TO_ADDR
13049: GO 13232
13051: LD_INT 49
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13085
13059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13060: LD_ADDR_VAR 0 3
13064: PUSH
13065: LD_INT 21
13067: PUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 23
13073: PUSH
13074: LD_INT 24
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: ST_TO_ADDR
13083: GO 13232
13085: LD_INT 51
13087: DOUBLE
13088: EQUAL
13089: IFTRUE 13093
13091: GO 13119
13093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13094: LD_ADDR_VAR 0 3
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 22
13104: PUSH
13105: LD_INT 23
13107: PUSH
13108: LD_INT 24
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: ST_TO_ADDR
13117: GO 13232
13119: LD_INT 52
13121: DOUBLE
13122: EQUAL
13123: IFTRUE 13127
13125: GO 13153
13127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: LD_INT 21
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_INT 23
13141: PUSH
13142: LD_INT 24
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: ST_TO_ADDR
13151: GO 13232
13153: LD_INT 53
13155: DOUBLE
13156: EQUAL
13157: IFTRUE 13161
13159: GO 13179
13161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13162: LD_ADDR_VAR 0 3
13166: PUSH
13167: LD_INT 23
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: ST_TO_ADDR
13177: GO 13232
13179: LD_INT 46
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13205
13187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13188: LD_ADDR_VAR 0 3
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 24
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: ST_TO_ADDR
13203: GO 13232
13205: LD_INT 47
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13231
13213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13214: LD_ADDR_VAR 0 3
13218: PUSH
13219: LD_INT 23
13221: PUSH
13222: LD_INT 24
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: ST_TO_ADDR
13229: GO 13232
13231: POP
// result := ( chassis in result ) ;
13232: LD_ADDR_VAR 0 3
13236: PUSH
13237: LD_VAR 0 1
13241: PUSH
13242: LD_VAR 0 3
13246: IN
13247: ST_TO_ADDR
// end ;
13248: LD_VAR 0 3
13252: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13253: LD_INT 0
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
// result := array ;
13262: LD_ADDR_VAR 0 5
13266: PUSH
13267: LD_VAR 0 1
13271: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13272: LD_VAR 0 1
13276: NOT
13277: PUSH
13278: LD_VAR 0 2
13282: NOT
13283: OR
13284: PUSH
13285: LD_VAR 0 3
13289: NOT
13290: OR
13291: PUSH
13292: LD_VAR 0 2
13296: PUSH
13297: LD_VAR 0 1
13301: GREATER
13302: OR
13303: PUSH
13304: LD_VAR 0 3
13308: PUSH
13309: LD_VAR 0 1
13313: GREATER
13314: OR
13315: IFFALSE 13319
// exit ;
13317: GO 13615
// if direction then
13319: LD_VAR 0 4
13323: IFFALSE 13387
// begin d := 1 ;
13325: LD_ADDR_VAR 0 9
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if i_from > i_to then
13333: LD_VAR 0 2
13337: PUSH
13338: LD_VAR 0 3
13342: GREATER
13343: IFFALSE 13369
// length := ( array - i_from ) + i_to else
13345: LD_ADDR_VAR 0 11
13349: PUSH
13350: LD_VAR 0 1
13354: PUSH
13355: LD_VAR 0 2
13359: MINUS
13360: PUSH
13361: LD_VAR 0 3
13365: PLUS
13366: ST_TO_ADDR
13367: GO 13385
// length := i_to - i_from ;
13369: LD_ADDR_VAR 0 11
13373: PUSH
13374: LD_VAR 0 3
13378: PUSH
13379: LD_VAR 0 2
13383: MINUS
13384: ST_TO_ADDR
// end else
13385: GO 13448
// begin d := - 1 ;
13387: LD_ADDR_VAR 0 9
13391: PUSH
13392: LD_INT 1
13394: NEG
13395: ST_TO_ADDR
// if i_from > i_to then
13396: LD_VAR 0 2
13400: PUSH
13401: LD_VAR 0 3
13405: GREATER
13406: IFFALSE 13426
// length := i_from - i_to else
13408: LD_ADDR_VAR 0 11
13412: PUSH
13413: LD_VAR 0 2
13417: PUSH
13418: LD_VAR 0 3
13422: MINUS
13423: ST_TO_ADDR
13424: GO 13448
// length := ( array - i_to ) + i_from ;
13426: LD_ADDR_VAR 0 11
13430: PUSH
13431: LD_VAR 0 1
13435: PUSH
13436: LD_VAR 0 3
13440: MINUS
13441: PUSH
13442: LD_VAR 0 2
13446: PLUS
13447: ST_TO_ADDR
// end ; if not length then
13448: LD_VAR 0 11
13452: NOT
13453: IFFALSE 13457
// exit ;
13455: GO 13615
// tmp := array ;
13457: LD_ADDR_VAR 0 10
13461: PUSH
13462: LD_VAR 0 1
13466: ST_TO_ADDR
// for i = 1 to length do
13467: LD_ADDR_VAR 0 6
13471: PUSH
13472: DOUBLE
13473: LD_INT 1
13475: DEC
13476: ST_TO_ADDR
13477: LD_VAR 0 11
13481: PUSH
13482: FOR_TO
13483: IFFALSE 13603
// begin for j = 1 to array do
13485: LD_ADDR_VAR 0 7
13489: PUSH
13490: DOUBLE
13491: LD_INT 1
13493: DEC
13494: ST_TO_ADDR
13495: LD_VAR 0 1
13499: PUSH
13500: FOR_TO
13501: IFFALSE 13589
// begin k := j + d ;
13503: LD_ADDR_VAR 0 8
13507: PUSH
13508: LD_VAR 0 7
13512: PUSH
13513: LD_VAR 0 9
13517: PLUS
13518: ST_TO_ADDR
// if k > array then
13519: LD_VAR 0 8
13523: PUSH
13524: LD_VAR 0 1
13528: GREATER
13529: IFFALSE 13539
// k := 1 ;
13531: LD_ADDR_VAR 0 8
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// if not k then
13539: LD_VAR 0 8
13543: NOT
13544: IFFALSE 13556
// k := array ;
13546: LD_ADDR_VAR 0 8
13550: PUSH
13551: LD_VAR 0 1
13555: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13556: LD_ADDR_VAR 0 10
13560: PUSH
13561: LD_VAR 0 10
13565: PPUSH
13566: LD_VAR 0 8
13570: PPUSH
13571: LD_VAR 0 1
13575: PUSH
13576: LD_VAR 0 7
13580: ARRAY
13581: PPUSH
13582: CALL_OW 1
13586: ST_TO_ADDR
// end ;
13587: GO 13500
13589: POP
13590: POP
// array := tmp ;
13591: LD_ADDR_VAR 0 1
13595: PUSH
13596: LD_VAR 0 10
13600: ST_TO_ADDR
// end ;
13601: GO 13482
13603: POP
13604: POP
// result := array ;
13605: LD_ADDR_VAR 0 5
13609: PUSH
13610: LD_VAR 0 1
13614: ST_TO_ADDR
// end ;
13615: LD_VAR 0 5
13619: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13620: LD_INT 0
13622: PPUSH
13623: PPUSH
// result := 0 ;
13624: LD_ADDR_VAR 0 3
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// if not array or not value in array then
13632: LD_VAR 0 1
13636: NOT
13637: PUSH
13638: LD_VAR 0 2
13642: PUSH
13643: LD_VAR 0 1
13647: IN
13648: NOT
13649: OR
13650: IFFALSE 13654
// exit ;
13652: GO 13708
// for i = 1 to array do
13654: LD_ADDR_VAR 0 4
13658: PUSH
13659: DOUBLE
13660: LD_INT 1
13662: DEC
13663: ST_TO_ADDR
13664: LD_VAR 0 1
13668: PUSH
13669: FOR_TO
13670: IFFALSE 13706
// if value = array [ i ] then
13672: LD_VAR 0 2
13676: PUSH
13677: LD_VAR 0 1
13681: PUSH
13682: LD_VAR 0 4
13686: ARRAY
13687: EQUAL
13688: IFFALSE 13704
// begin result := i ;
13690: LD_ADDR_VAR 0 3
13694: PUSH
13695: LD_VAR 0 4
13699: ST_TO_ADDR
// exit ;
13700: POP
13701: POP
13702: GO 13708
// end ;
13704: GO 13669
13706: POP
13707: POP
// end ;
13708: LD_VAR 0 3
13712: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13713: LD_INT 0
13715: PPUSH
// vc_chassis := chassis ;
13716: LD_ADDR_OWVAR 37
13720: PUSH
13721: LD_VAR 0 1
13725: ST_TO_ADDR
// vc_engine := engine ;
13726: LD_ADDR_OWVAR 39
13730: PUSH
13731: LD_VAR 0 2
13735: ST_TO_ADDR
// vc_control := control ;
13736: LD_ADDR_OWVAR 38
13740: PUSH
13741: LD_VAR 0 3
13745: ST_TO_ADDR
// vc_weapon := weapon ;
13746: LD_ADDR_OWVAR 40
13750: PUSH
13751: LD_VAR 0 4
13755: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13756: LD_ADDR_OWVAR 41
13760: PUSH
13761: LD_VAR 0 5
13765: ST_TO_ADDR
// end ;
13766: LD_VAR 0 6
13770: RET
// export function WantPlant ( unit ) ; var task ; begin
13771: LD_INT 0
13773: PPUSH
13774: PPUSH
// result := false ;
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 437
13797: ST_TO_ADDR
// if task then
13798: LD_VAR 0 3
13802: IFFALSE 13830
// if task [ 1 ] [ 1 ] = p then
13804: LD_VAR 0 3
13808: PUSH
13809: LD_INT 1
13811: ARRAY
13812: PUSH
13813: LD_INT 1
13815: ARRAY
13816: PUSH
13817: LD_STRING p
13819: EQUAL
13820: IFFALSE 13830
// result := true ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// end ;
13830: LD_VAR 0 2
13834: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13835: LD_INT 0
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
// if pos < 1 then
13841: LD_VAR 0 2
13845: PUSH
13846: LD_INT 1
13848: LESS
13849: IFFALSE 13853
// exit ;
13851: GO 14156
// if pos = 1 then
13853: LD_VAR 0 2
13857: PUSH
13858: LD_INT 1
13860: EQUAL
13861: IFFALSE 13894
// result := Replace ( arr , pos [ 1 ] , value ) else
13863: LD_ADDR_VAR 0 4
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_VAR 0 2
13877: PUSH
13878: LD_INT 1
13880: ARRAY
13881: PPUSH
13882: LD_VAR 0 3
13886: PPUSH
13887: CALL_OW 1
13891: ST_TO_ADDR
13892: GO 14156
// begin tmp := arr ;
13894: LD_ADDR_VAR 0 6
13898: PUSH
13899: LD_VAR 0 1
13903: ST_TO_ADDR
// s_arr := [ tmp ] ;
13904: LD_ADDR_VAR 0 7
13908: PUSH
13909: LD_VAR 0 6
13913: PUSH
13914: EMPTY
13915: LIST
13916: ST_TO_ADDR
// for i = 1 to pos - 1 do
13917: LD_ADDR_VAR 0 5
13921: PUSH
13922: DOUBLE
13923: LD_INT 1
13925: DEC
13926: ST_TO_ADDR
13927: LD_VAR 0 2
13931: PUSH
13932: LD_INT 1
13934: MINUS
13935: PUSH
13936: FOR_TO
13937: IFFALSE 13982
// begin tmp := tmp [ pos [ i ] ] ;
13939: LD_ADDR_VAR 0 6
13943: PUSH
13944: LD_VAR 0 6
13948: PUSH
13949: LD_VAR 0 2
13953: PUSH
13954: LD_VAR 0 5
13958: ARRAY
13959: ARRAY
13960: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13961: LD_ADDR_VAR 0 7
13965: PUSH
13966: LD_VAR 0 7
13970: PUSH
13971: LD_VAR 0 6
13975: PUSH
13976: EMPTY
13977: LIST
13978: ADD
13979: ST_TO_ADDR
// end ;
13980: GO 13936
13982: POP
13983: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13984: LD_ADDR_VAR 0 6
13988: PUSH
13989: LD_VAR 0 6
13993: PPUSH
13994: LD_VAR 0 2
13998: PUSH
13999: LD_VAR 0 2
14003: ARRAY
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: CALL_OW 1
14014: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14015: LD_ADDR_VAR 0 7
14019: PUSH
14020: LD_VAR 0 7
14024: PPUSH
14025: LD_VAR 0 7
14029: PPUSH
14030: LD_VAR 0 6
14034: PPUSH
14035: CALL_OW 1
14039: ST_TO_ADDR
// for i = s_arr downto 2 do
14040: LD_ADDR_VAR 0 5
14044: PUSH
14045: DOUBLE
14046: LD_VAR 0 7
14050: INC
14051: ST_TO_ADDR
14052: LD_INT 2
14054: PUSH
14055: FOR_DOWNTO
14056: IFFALSE 14140
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14058: LD_ADDR_VAR 0 6
14062: PUSH
14063: LD_VAR 0 7
14067: PUSH
14068: LD_VAR 0 5
14072: PUSH
14073: LD_INT 1
14075: MINUS
14076: ARRAY
14077: PPUSH
14078: LD_VAR 0 2
14082: PUSH
14083: LD_VAR 0 5
14087: PUSH
14088: LD_INT 1
14090: MINUS
14091: ARRAY
14092: PPUSH
14093: LD_VAR 0 7
14097: PUSH
14098: LD_VAR 0 5
14102: ARRAY
14103: PPUSH
14104: CALL_OW 1
14108: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14109: LD_ADDR_VAR 0 7
14113: PUSH
14114: LD_VAR 0 7
14118: PPUSH
14119: LD_VAR 0 5
14123: PUSH
14124: LD_INT 1
14126: MINUS
14127: PPUSH
14128: LD_VAR 0 6
14132: PPUSH
14133: CALL_OW 1
14137: ST_TO_ADDR
// end ;
14138: GO 14055
14140: POP
14141: POP
// result := s_arr [ 1 ] ;
14142: LD_ADDR_VAR 0 4
14146: PUSH
14147: LD_VAR 0 7
14151: PUSH
14152: LD_INT 1
14154: ARRAY
14155: ST_TO_ADDR
// end ; end ;
14156: LD_VAR 0 4
14160: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14161: LD_INT 0
14163: PPUSH
14164: PPUSH
// if not list then
14165: LD_VAR 0 1
14169: NOT
14170: IFFALSE 14174
// exit ;
14172: GO 14265
// i := list [ pos1 ] ;
14174: LD_ADDR_VAR 0 5
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: LD_VAR 0 2
14188: ARRAY
14189: ST_TO_ADDR
// if not i then
14190: LD_VAR 0 5
14194: NOT
14195: IFFALSE 14199
// exit ;
14197: GO 14265
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14199: LD_ADDR_VAR 0 1
14203: PUSH
14204: LD_VAR 0 1
14208: PPUSH
14209: LD_VAR 0 2
14213: PPUSH
14214: LD_VAR 0 1
14218: PUSH
14219: LD_VAR 0 3
14223: ARRAY
14224: PPUSH
14225: CALL_OW 1
14229: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14230: LD_ADDR_VAR 0 1
14234: PUSH
14235: LD_VAR 0 1
14239: PPUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_VAR 0 5
14249: PPUSH
14250: CALL_OW 1
14254: ST_TO_ADDR
// result := list ;
14255: LD_ADDR_VAR 0 4
14259: PUSH
14260: LD_VAR 0 1
14264: ST_TO_ADDR
// end ;
14265: LD_VAR 0 4
14269: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14270: LD_INT 0
14272: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14273: LD_ADDR_VAR 0 5
14277: PUSH
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 250
14287: PPUSH
14288: LD_VAR 0 1
14292: PPUSH
14293: CALL_OW 251
14297: PPUSH
14298: LD_VAR 0 2
14302: PPUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_VAR 0 4
14312: PPUSH
14313: CALL 14323 0 5
14317: ST_TO_ADDR
// end ;
14318: LD_VAR 0 5
14322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14323: LD_INT 0
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
// if not list then
14329: LD_VAR 0 3
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14726
// result := [ ] ;
14338: LD_ADDR_VAR 0 6
14342: PUSH
14343: EMPTY
14344: ST_TO_ADDR
// for i in list do
14345: LD_ADDR_VAR 0 7
14349: PUSH
14350: LD_VAR 0 3
14354: PUSH
14355: FOR_IN
14356: IFFALSE 14558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14358: LD_ADDR_VAR 0 9
14362: PUSH
14363: LD_VAR 0 7
14367: PPUSH
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_VAR 0 2
14377: PPUSH
14378: CALL_OW 297
14382: ST_TO_ADDR
// if not result then
14383: LD_VAR 0 6
14387: NOT
14388: IFFALSE 14414
// result := [ [ i , tmp ] ] else
14390: LD_ADDR_VAR 0 6
14394: PUSH
14395: LD_VAR 0 7
14399: PUSH
14400: LD_VAR 0 9
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: EMPTY
14410: LIST
14411: ST_TO_ADDR
14412: GO 14556
// begin if result [ result ] [ 2 ] < tmp then
14414: LD_VAR 0 6
14418: PUSH
14419: LD_VAR 0 6
14423: ARRAY
14424: PUSH
14425: LD_INT 2
14427: ARRAY
14428: PUSH
14429: LD_VAR 0 9
14433: LESS
14434: IFFALSE 14476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14436: LD_ADDR_VAR 0 6
14440: PUSH
14441: LD_VAR 0 6
14445: PPUSH
14446: LD_VAR 0 6
14450: PUSH
14451: LD_INT 1
14453: PLUS
14454: PPUSH
14455: LD_VAR 0 7
14459: PUSH
14460: LD_VAR 0 9
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 2
14473: ST_TO_ADDR
14474: GO 14556
// for j = 1 to result do
14476: LD_ADDR_VAR 0 8
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_VAR 0 6
14490: PUSH
14491: FOR_TO
14492: IFFALSE 14554
// begin if tmp < result [ j ] [ 2 ] then
14494: LD_VAR 0 9
14498: PUSH
14499: LD_VAR 0 6
14503: PUSH
14504: LD_VAR 0 8
14508: ARRAY
14509: PUSH
14510: LD_INT 2
14512: ARRAY
14513: LESS
14514: IFFALSE 14552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14516: LD_ADDR_VAR 0 6
14520: PUSH
14521: LD_VAR 0 6
14525: PPUSH
14526: LD_VAR 0 8
14530: PPUSH
14531: LD_VAR 0 7
14535: PUSH
14536: LD_VAR 0 9
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 2
14549: ST_TO_ADDR
// break ;
14550: GO 14554
// end ; end ;
14552: GO 14491
14554: POP
14555: POP
// end ; end ;
14556: GO 14355
14558: POP
14559: POP
// if result and not asc then
14560: LD_VAR 0 6
14564: PUSH
14565: LD_VAR 0 4
14569: NOT
14570: AND
14571: IFFALSE 14646
// begin tmp := result ;
14573: LD_ADDR_VAR 0 9
14577: PUSH
14578: LD_VAR 0 6
14582: ST_TO_ADDR
// for i = tmp downto 1 do
14583: LD_ADDR_VAR 0 7
14587: PUSH
14588: DOUBLE
14589: LD_VAR 0 9
14593: INC
14594: ST_TO_ADDR
14595: LD_INT 1
14597: PUSH
14598: FOR_DOWNTO
14599: IFFALSE 14644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14601: LD_ADDR_VAR 0 6
14605: PUSH
14606: LD_VAR 0 6
14610: PPUSH
14611: LD_VAR 0 9
14615: PUSH
14616: LD_VAR 0 7
14620: MINUS
14621: PUSH
14622: LD_INT 1
14624: PLUS
14625: PPUSH
14626: LD_VAR 0 9
14630: PUSH
14631: LD_VAR 0 7
14635: ARRAY
14636: PPUSH
14637: CALL_OW 1
14641: ST_TO_ADDR
14642: GO 14598
14644: POP
14645: POP
// end ; tmp := [ ] ;
14646: LD_ADDR_VAR 0 9
14650: PUSH
14651: EMPTY
14652: ST_TO_ADDR
// if mode then
14653: LD_VAR 0 5
14657: IFFALSE 14726
// begin for i = 1 to result do
14659: LD_ADDR_VAR 0 7
14663: PUSH
14664: DOUBLE
14665: LD_INT 1
14667: DEC
14668: ST_TO_ADDR
14669: LD_VAR 0 6
14673: PUSH
14674: FOR_TO
14675: IFFALSE 14714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14677: LD_ADDR_VAR 0 9
14681: PUSH
14682: LD_VAR 0 9
14686: PPUSH
14687: LD_VAR 0 7
14691: PPUSH
14692: LD_VAR 0 6
14696: PUSH
14697: LD_VAR 0 7
14701: ARRAY
14702: PUSH
14703: LD_INT 1
14705: ARRAY
14706: PPUSH
14707: CALL_OW 1
14711: ST_TO_ADDR
14712: GO 14674
14714: POP
14715: POP
// result := tmp ;
14716: LD_ADDR_VAR 0 6
14720: PUSH
14721: LD_VAR 0 9
14725: ST_TO_ADDR
// end ; end ;
14726: LD_VAR 0 6
14730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14739: LD_ADDR_VAR 0 5
14743: PUSH
14744: LD_INT 0
14746: PUSH
14747: LD_INT 0
14749: PUSH
14750: LD_INT 0
14752: PUSH
14753: EMPTY
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: ST_TO_ADDR
// if not x or not y then
14761: LD_VAR 0 2
14765: NOT
14766: PUSH
14767: LD_VAR 0 3
14771: NOT
14772: OR
14773: IFFALSE 14777
// exit ;
14775: GO 16423
// if not range then
14777: LD_VAR 0 4
14781: NOT
14782: IFFALSE 14792
// range := 10 ;
14784: LD_ADDR_VAR 0 4
14788: PUSH
14789: LD_INT 10
14791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14792: LD_ADDR_VAR 0 8
14796: PUSH
14797: LD_INT 81
14799: PUSH
14800: LD_VAR 0 1
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 92
14811: PUSH
14812: LD_VAR 0 2
14816: PUSH
14817: LD_VAR 0 3
14821: PUSH
14822: LD_VAR 0 4
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 3
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 3
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: ST_TO_ADDR
// if not tmp then
14860: LD_VAR 0 8
14864: NOT
14865: IFFALSE 14869
// exit ;
14867: GO 16423
// for i in tmp do
14869: LD_ADDR_VAR 0 6
14873: PUSH
14874: LD_VAR 0 8
14878: PUSH
14879: FOR_IN
14880: IFFALSE 16398
// begin points := [ 0 , 0 , 0 ] ;
14882: LD_ADDR_VAR 0 9
14886: PUSH
14887: LD_INT 0
14889: PUSH
14890: LD_INT 0
14892: PUSH
14893: LD_INT 0
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: LIST
14900: ST_TO_ADDR
// bpoints := 1 ;
14901: LD_ADDR_VAR 0 10
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14909: LD_VAR 0 6
14913: PPUSH
14914: CALL_OW 247
14918: PUSH
14919: LD_INT 1
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 15505
14927: POP
// begin if GetClass ( i ) = 1 then
14928: LD_VAR 0 6
14932: PPUSH
14933: CALL_OW 257
14937: PUSH
14938: LD_INT 1
14940: EQUAL
14941: IFFALSE 14962
// points := [ 10 , 5 , 3 ] ;
14943: LD_ADDR_VAR 0 9
14947: PUSH
14948: LD_INT 10
14950: PUSH
14951: LD_INT 5
14953: PUSH
14954: LD_INT 3
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14962: LD_VAR 0 6
14966: PPUSH
14967: CALL_OW 257
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: LD_INT 3
14977: PUSH
14978: LD_INT 4
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: IN
14986: IFFALSE 15007
// points := [ 3 , 2 , 1 ] ;
14988: LD_ADDR_VAR 0 9
14992: PUSH
14993: LD_INT 3
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: LD_INT 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15007: LD_VAR 0 6
15011: PPUSH
15012: CALL_OW 257
15016: PUSH
15017: LD_INT 5
15019: EQUAL
15020: IFFALSE 15041
// points := [ 130 , 5 , 2 ] ;
15022: LD_ADDR_VAR 0 9
15026: PUSH
15027: LD_INT 130
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15041: LD_VAR 0 6
15045: PPUSH
15046: CALL_OW 257
15050: PUSH
15051: LD_INT 8
15053: EQUAL
15054: IFFALSE 15075
// points := [ 35 , 35 , 30 ] ;
15056: LD_ADDR_VAR 0 9
15060: PUSH
15061: LD_INT 35
15063: PUSH
15064: LD_INT 35
15066: PUSH
15067: LD_INT 30
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15075: LD_VAR 0 6
15079: PPUSH
15080: CALL_OW 257
15084: PUSH
15085: LD_INT 9
15087: EQUAL
15088: IFFALSE 15109
// points := [ 20 , 55 , 40 ] ;
15090: LD_ADDR_VAR 0 9
15094: PUSH
15095: LD_INT 20
15097: PUSH
15098: LD_INT 55
15100: PUSH
15101: LD_INT 40
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: LIST
15108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15109: LD_VAR 0 6
15113: PPUSH
15114: CALL_OW 257
15118: PUSH
15119: LD_INT 12
15121: PUSH
15122: LD_INT 16
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: IN
15129: IFFALSE 15150
// points := [ 5 , 3 , 2 ] ;
15131: LD_ADDR_VAR 0 9
15135: PUSH
15136: LD_INT 5
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15150: LD_VAR 0 6
15154: PPUSH
15155: CALL_OW 257
15159: PUSH
15160: LD_INT 17
15162: EQUAL
15163: IFFALSE 15184
// points := [ 100 , 50 , 75 ] ;
15165: LD_ADDR_VAR 0 9
15169: PUSH
15170: LD_INT 100
15172: PUSH
15173: LD_INT 50
15175: PUSH
15176: LD_INT 75
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15184: LD_VAR 0 6
15188: PPUSH
15189: CALL_OW 257
15193: PUSH
15194: LD_INT 15
15196: EQUAL
15197: IFFALSE 15218
// points := [ 10 , 5 , 3 ] ;
15199: LD_ADDR_VAR 0 9
15203: PUSH
15204: LD_INT 10
15206: PUSH
15207: LD_INT 5
15209: PUSH
15210: LD_INT 3
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15218: LD_VAR 0 6
15222: PPUSH
15223: CALL_OW 257
15227: PUSH
15228: LD_INT 14
15230: EQUAL
15231: IFFALSE 15252
// points := [ 10 , 0 , 0 ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_INT 10
15240: PUSH
15241: LD_INT 0
15243: PUSH
15244: LD_INT 0
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15252: LD_VAR 0 6
15256: PPUSH
15257: CALL_OW 257
15261: PUSH
15262: LD_INT 11
15264: EQUAL
15265: IFFALSE 15286
// points := [ 30 , 10 , 5 ] ;
15267: LD_ADDR_VAR 0 9
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 10
15277: PUSH
15278: LD_INT 5
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15286: LD_VAR 0 1
15290: PPUSH
15291: LD_INT 5
15293: PPUSH
15294: CALL_OW 321
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15319
// bpoints := bpoints * 1.8 ;
15304: LD_ADDR_VAR 0 10
15308: PUSH
15309: LD_VAR 0 10
15313: PUSH
15314: LD_REAL  1.80000000000000E+0000
15317: MUL
15318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15319: LD_VAR 0 6
15323: PPUSH
15324: CALL_OW 257
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: LD_INT 3
15337: PUSH
15338: LD_INT 4
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: IN
15347: PUSH
15348: LD_VAR 0 1
15352: PPUSH
15353: LD_INT 51
15355: PPUSH
15356: CALL_OW 321
15360: PUSH
15361: LD_INT 2
15363: EQUAL
15364: AND
15365: IFFALSE 15382
// bpoints := bpoints * 1.2 ;
15367: LD_ADDR_VAR 0 10
15371: PUSH
15372: LD_VAR 0 10
15376: PUSH
15377: LD_REAL  1.20000000000000E+0000
15380: MUL
15381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15382: LD_VAR 0 6
15386: PPUSH
15387: CALL_OW 257
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: LD_INT 7
15397: PUSH
15398: LD_INT 9
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: IN
15406: PUSH
15407: LD_VAR 0 1
15411: PPUSH
15412: LD_INT 52
15414: PPUSH
15415: CALL_OW 321
15419: PUSH
15420: LD_INT 2
15422: EQUAL
15423: AND
15424: IFFALSE 15441
// bpoints := bpoints * 1.5 ;
15426: LD_ADDR_VAR 0 10
15430: PUSH
15431: LD_VAR 0 10
15435: PUSH
15436: LD_REAL  1.50000000000000E+0000
15439: MUL
15440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15441: LD_VAR 0 1
15445: PPUSH
15446: LD_INT 66
15448: PPUSH
15449: CALL_OW 321
15453: PUSH
15454: LD_INT 2
15456: EQUAL
15457: IFFALSE 15474
// bpoints := bpoints * 1.1 ;
15459: LD_ADDR_VAR 0 10
15463: PUSH
15464: LD_VAR 0 10
15468: PUSH
15469: LD_REAL  1.10000000000000E+0000
15472: MUL
15473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15474: LD_ADDR_VAR 0 10
15478: PUSH
15479: LD_VAR 0 10
15483: PUSH
15484: LD_VAR 0 6
15488: PPUSH
15489: LD_INT 1
15491: PPUSH
15492: CALL_OW 259
15496: PUSH
15497: LD_REAL  1.15000000000000E+0000
15500: MUL
15501: MUL
15502: ST_TO_ADDR
// end ; unit_vehicle :
15503: GO 16327
15505: LD_INT 2
15507: DOUBLE
15508: EQUAL
15509: IFTRUE 15513
15511: GO 16315
15513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15514: LD_VAR 0 6
15518: PPUSH
15519: CALL_OW 264
15523: PUSH
15524: LD_INT 2
15526: PUSH
15527: LD_INT 42
15529: PUSH
15530: LD_INT 24
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: IN
15538: IFFALSE 15559
// points := [ 25 , 5 , 3 ] ;
15540: LD_ADDR_VAR 0 9
15544: PUSH
15545: LD_INT 25
15547: PUSH
15548: LD_INT 5
15550: PUSH
15551: LD_INT 3
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15559: LD_VAR 0 6
15563: PPUSH
15564: CALL_OW 264
15568: PUSH
15569: LD_INT 4
15571: PUSH
15572: LD_INT 43
15574: PUSH
15575: LD_INT 25
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: LIST
15582: IN
15583: IFFALSE 15604
// points := [ 40 , 15 , 5 ] ;
15585: LD_ADDR_VAR 0 9
15589: PUSH
15590: LD_INT 40
15592: PUSH
15593: LD_INT 15
15595: PUSH
15596: LD_INT 5
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15604: LD_VAR 0 6
15608: PPUSH
15609: CALL_OW 264
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: LD_INT 23
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: IN
15624: IFFALSE 15645
// points := [ 7 , 25 , 8 ] ;
15626: LD_ADDR_VAR 0 9
15630: PUSH
15631: LD_INT 7
15633: PUSH
15634: LD_INT 25
15636: PUSH
15637: LD_INT 8
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15645: LD_VAR 0 6
15649: PPUSH
15650: CALL_OW 264
15654: PUSH
15655: LD_INT 5
15657: PUSH
15658: LD_INT 27
15660: PUSH
15661: LD_INT 44
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: IN
15669: IFFALSE 15690
// points := [ 14 , 50 , 16 ] ;
15671: LD_ADDR_VAR 0 9
15675: PUSH
15676: LD_INT 14
15678: PUSH
15679: LD_INT 50
15681: PUSH
15682: LD_INT 16
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15690: LD_VAR 0 6
15694: PPUSH
15695: CALL_OW 264
15699: PUSH
15700: LD_INT 6
15702: PUSH
15703: LD_INT 46
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: IN
15710: IFFALSE 15731
// points := [ 32 , 120 , 70 ] ;
15712: LD_ADDR_VAR 0 9
15716: PUSH
15717: LD_INT 32
15719: PUSH
15720: LD_INT 120
15722: PUSH
15723: LD_INT 70
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: LIST
15730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
15731: LD_VAR 0 6
15735: PPUSH
15736: CALL_OW 264
15740: PUSH
15741: LD_INT 7
15743: PUSH
15744: LD_INT 28
15746: PUSH
15747: LD_INT 45
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: IN
15755: IFFALSE 15776
// points := [ 35 , 20 , 45 ] ;
15757: LD_ADDR_VAR 0 9
15761: PUSH
15762: LD_INT 35
15764: PUSH
15765: LD_INT 20
15767: PUSH
15768: LD_INT 45
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: LIST
15775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15776: LD_VAR 0 6
15780: PPUSH
15781: CALL_OW 264
15785: PUSH
15786: LD_INT 47
15788: PUSH
15789: EMPTY
15790: LIST
15791: IN
15792: IFFALSE 15813
// points := [ 67 , 45 , 75 ] ;
15794: LD_ADDR_VAR 0 9
15798: PUSH
15799: LD_INT 67
15801: PUSH
15802: LD_INT 45
15804: PUSH
15805: LD_INT 75
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15813: LD_VAR 0 6
15817: PPUSH
15818: CALL_OW 264
15822: PUSH
15823: LD_INT 26
15825: PUSH
15826: EMPTY
15827: LIST
15828: IN
15829: IFFALSE 15850
// points := [ 120 , 30 , 80 ] ;
15831: LD_ADDR_VAR 0 9
15835: PUSH
15836: LD_INT 120
15838: PUSH
15839: LD_INT 30
15841: PUSH
15842: LD_INT 80
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15850: LD_VAR 0 6
15854: PPUSH
15855: CALL_OW 264
15859: PUSH
15860: LD_INT 22
15862: PUSH
15863: EMPTY
15864: LIST
15865: IN
15866: IFFALSE 15887
// points := [ 40 , 1 , 1 ] ;
15868: LD_ADDR_VAR 0 9
15872: PUSH
15873: LD_INT 40
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15887: LD_VAR 0 6
15891: PPUSH
15892: CALL_OW 264
15896: PUSH
15897: LD_INT 29
15899: PUSH
15900: EMPTY
15901: LIST
15902: IN
15903: IFFALSE 15924
// points := [ 70 , 200 , 400 ] ;
15905: LD_ADDR_VAR 0 9
15909: PUSH
15910: LD_INT 70
15912: PUSH
15913: LD_INT 200
15915: PUSH
15916: LD_INT 400
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15924: LD_VAR 0 6
15928: PPUSH
15929: CALL_OW 264
15933: PUSH
15934: LD_INT 14
15936: PUSH
15937: LD_INT 53
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: IN
15944: IFFALSE 15965
// points := [ 40 , 10 , 20 ] ;
15946: LD_ADDR_VAR 0 9
15950: PUSH
15951: LD_INT 40
15953: PUSH
15954: LD_INT 10
15956: PUSH
15957: LD_INT 20
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15965: LD_VAR 0 6
15969: PPUSH
15970: CALL_OW 264
15974: PUSH
15975: LD_INT 9
15977: PUSH
15978: EMPTY
15979: LIST
15980: IN
15981: IFFALSE 16002
// points := [ 5 , 70 , 20 ] ;
15983: LD_ADDR_VAR 0 9
15987: PUSH
15988: LD_INT 5
15990: PUSH
15991: LD_INT 70
15993: PUSH
15994: LD_INT 20
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16002: LD_VAR 0 6
16006: PPUSH
16007: CALL_OW 264
16011: PUSH
16012: LD_INT 10
16014: PUSH
16015: EMPTY
16016: LIST
16017: IN
16018: IFFALSE 16039
// points := [ 35 , 110 , 70 ] ;
16020: LD_ADDR_VAR 0 9
16024: PUSH
16025: LD_INT 35
16027: PUSH
16028: LD_INT 110
16030: PUSH
16031: LD_INT 70
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16039: LD_VAR 0 6
16043: PPUSH
16044: CALL_OW 265
16048: PUSH
16049: LD_INT 25
16051: EQUAL
16052: IFFALSE 16073
// points := [ 80 , 65 , 100 ] ;
16054: LD_ADDR_VAR 0 9
16058: PUSH
16059: LD_INT 80
16061: PUSH
16062: LD_INT 65
16064: PUSH
16065: LD_INT 100
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16073: LD_VAR 0 6
16077: PPUSH
16078: CALL_OW 263
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: IFFALSE 16121
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16088: LD_ADDR_VAR 0 10
16092: PUSH
16093: LD_VAR 0 10
16097: PUSH
16098: LD_VAR 0 6
16102: PPUSH
16103: CALL_OW 311
16107: PPUSH
16108: LD_INT 3
16110: PPUSH
16111: CALL_OW 259
16115: PUSH
16116: LD_INT 4
16118: MUL
16119: MUL
16120: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16121: LD_VAR 0 6
16125: PPUSH
16126: CALL_OW 263
16130: PUSH
16131: LD_INT 2
16133: EQUAL
16134: IFFALSE 16185
// begin j := IsControledBy ( i ) ;
16136: LD_ADDR_VAR 0 7
16140: PUSH
16141: LD_VAR 0 6
16145: PPUSH
16146: CALL_OW 312
16150: ST_TO_ADDR
// if j then
16151: LD_VAR 0 7
16155: IFFALSE 16185
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16157: LD_ADDR_VAR 0 10
16161: PUSH
16162: LD_VAR 0 10
16166: PUSH
16167: LD_VAR 0 7
16171: PPUSH
16172: LD_INT 3
16174: PPUSH
16175: CALL_OW 259
16179: PUSH
16180: LD_INT 3
16182: MUL
16183: MUL
16184: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16185: LD_VAR 0 6
16189: PPUSH
16190: CALL_OW 264
16194: PUSH
16195: LD_INT 5
16197: PUSH
16198: LD_INT 6
16200: PUSH
16201: LD_INT 46
16203: PUSH
16204: LD_INT 44
16206: PUSH
16207: LD_INT 47
16209: PUSH
16210: LD_INT 45
16212: PUSH
16213: LD_INT 28
16215: PUSH
16216: LD_INT 7
16218: PUSH
16219: LD_INT 27
16221: PUSH
16222: LD_INT 29
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: IN
16237: PUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: LD_INT 52
16245: PPUSH
16246: CALL_OW 321
16250: PUSH
16251: LD_INT 2
16253: EQUAL
16254: AND
16255: IFFALSE 16272
// bpoints := bpoints * 1.2 ;
16257: LD_ADDR_VAR 0 10
16261: PUSH
16262: LD_VAR 0 10
16266: PUSH
16267: LD_REAL  1.20000000000000E+0000
16270: MUL
16271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16272: LD_VAR 0 6
16276: PPUSH
16277: CALL_OW 264
16281: PUSH
16282: LD_INT 6
16284: PUSH
16285: LD_INT 46
16287: PUSH
16288: LD_INT 47
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: IN
16296: IFFALSE 16313
// bpoints := bpoints * 1.2 ;
16298: LD_ADDR_VAR 0 10
16302: PUSH
16303: LD_VAR 0 10
16307: PUSH
16308: LD_REAL  1.20000000000000E+0000
16311: MUL
16312: ST_TO_ADDR
// end ; unit_building :
16313: GO 16327
16315: LD_INT 3
16317: DOUBLE
16318: EQUAL
16319: IFTRUE 16323
16321: GO 16326
16323: POP
// ; end ;
16324: GO 16327
16326: POP
// for j = 1 to 3 do
16327: LD_ADDR_VAR 0 7
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_INT 3
16339: PUSH
16340: FOR_TO
16341: IFFALSE 16394
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16343: LD_ADDR_VAR 0 5
16347: PUSH
16348: LD_VAR 0 5
16352: PPUSH
16353: LD_VAR 0 7
16357: PPUSH
16358: LD_VAR 0 5
16362: PUSH
16363: LD_VAR 0 7
16367: ARRAY
16368: PUSH
16369: LD_VAR 0 9
16373: PUSH
16374: LD_VAR 0 7
16378: ARRAY
16379: PUSH
16380: LD_VAR 0 10
16384: MUL
16385: PLUS
16386: PPUSH
16387: CALL_OW 1
16391: ST_TO_ADDR
16392: GO 16340
16394: POP
16395: POP
// end ;
16396: GO 14879
16398: POP
16399: POP
// result := Replace ( result , 4 , tmp ) ;
16400: LD_ADDR_VAR 0 5
16404: PUSH
16405: LD_VAR 0 5
16409: PPUSH
16410: LD_INT 4
16412: PPUSH
16413: LD_VAR 0 8
16417: PPUSH
16418: CALL_OW 1
16422: ST_TO_ADDR
// end ;
16423: LD_VAR 0 5
16427: RET
// export function DangerAtRange ( unit , range ) ; begin
16428: LD_INT 0
16430: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16431: LD_ADDR_VAR 0 3
16435: PUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 255
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 250
16455: PPUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 251
16465: PPUSH
16466: LD_VAR 0 2
16470: PPUSH
16471: CALL 14731 0 4
16475: ST_TO_ADDR
// end ;
16476: LD_VAR 0 3
16480: RET
// export function DangerInArea ( side , area ) ; begin
16481: LD_INT 0
16483: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16484: LD_ADDR_VAR 0 3
16488: PUSH
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_INT 81
16496: PUSH
16497: LD_VAR 0 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PPUSH
16506: CALL_OW 70
16510: ST_TO_ADDR
// end ;
16511: LD_VAR 0 3
16515: RET
// export function IsExtension ( b ) ; begin
16516: LD_INT 0
16518: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_VAR 0 1
16528: PUSH
16529: LD_INT 23
16531: PUSH
16532: LD_INT 20
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_INT 17
16540: PUSH
16541: LD_INT 24
16543: PUSH
16544: LD_INT 21
16546: PUSH
16547: LD_INT 19
16549: PUSH
16550: LD_INT 16
16552: PUSH
16553: LD_INT 25
16555: PUSH
16556: LD_INT 18
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: IN
16571: ST_TO_ADDR
// end ;
16572: LD_VAR 0 2
16576: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
16581: PPUSH
// result := [ ] ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: EMPTY
16588: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16589: LD_ADDR_VAR 0 4
16593: PUSH
16594: LD_VAR 0 2
16598: PPUSH
16599: LD_INT 21
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PPUSH
16609: CALL_OW 70
16613: ST_TO_ADDR
// if not tmp then
16614: LD_VAR 0 4
16618: NOT
16619: IFFALSE 16623
// exit ;
16621: GO 16681
// for i in tmp do
16623: LD_ADDR_VAR 0 5
16627: PUSH
16628: LD_VAR 0 4
16632: PUSH
16633: FOR_IN
16634: IFFALSE 16669
// if GetBase ( i ) <> base then
16636: LD_VAR 0 5
16640: PPUSH
16641: CALL_OW 274
16645: PUSH
16646: LD_VAR 0 1
16650: NONEQUAL
16651: IFFALSE 16667
// ComLinkToBase ( base , i ) ;
16653: LD_VAR 0 1
16657: PPUSH
16658: LD_VAR 0 5
16662: PPUSH
16663: CALL_OW 169
16667: GO 16633
16669: POP
16670: POP
// result := tmp ;
16671: LD_ADDR_VAR 0 3
16675: PUSH
16676: LD_VAR 0 4
16680: ST_TO_ADDR
// end ;
16681: LD_VAR 0 3
16685: RET
// export function ComComplete ( unit , b ) ; var i ; begin
16686: LD_INT 0
16688: PPUSH
16689: PPUSH
// if BuildingStatus ( b ) = bs_build then
16690: LD_VAR 0 2
16694: PPUSH
16695: CALL_OW 461
16699: PUSH
16700: LD_INT 1
16702: EQUAL
16703: IFFALSE 16763
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_STRING h
16712: PUSH
16713: LD_VAR 0 2
16717: PPUSH
16718: CALL_OW 250
16722: PUSH
16723: LD_VAR 0 2
16727: PPUSH
16728: CALL_OW 251
16732: PUSH
16733: LD_VAR 0 2
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: PPUSH
16759: CALL_OW 446
// end ;
16763: LD_VAR 0 3
16767: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16768: LD_INT 0
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
16774: PPUSH
16775: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
16776: LD_VAR 0 1
16780: NOT
16781: PUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 263
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: NOT
16796: OR
16797: IFFALSE 16801
// exit ;
16799: GO 17117
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16801: LD_ADDR_VAR 0 6
16805: PUSH
16806: LD_INT 22
16808: PUSH
16809: LD_VAR 0 1
16813: PPUSH
16814: CALL_OW 255
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 2
16825: PUSH
16826: LD_INT 30
16828: PUSH
16829: LD_INT 36
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 34
16838: PUSH
16839: LD_INT 31
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: ST_TO_ADDR
// if not tmp then
16860: LD_VAR 0 6
16864: NOT
16865: IFFALSE 16869
// exit ;
16867: GO 17117
// result := [ ] ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: EMPTY
16875: ST_TO_ADDR
// for i in tmp do
16876: LD_ADDR_VAR 0 3
16880: PUSH
16881: LD_VAR 0 6
16885: PUSH
16886: FOR_IN
16887: IFFALSE 16958
// begin t := UnitsInside ( i ) ;
16889: LD_ADDR_VAR 0 4
16893: PUSH
16894: LD_VAR 0 3
16898: PPUSH
16899: CALL_OW 313
16903: ST_TO_ADDR
// if t then
16904: LD_VAR 0 4
16908: IFFALSE 16956
// for j in t do
16910: LD_ADDR_VAR 0 7
16914: PUSH
16915: LD_VAR 0 4
16919: PUSH
16920: FOR_IN
16921: IFFALSE 16954
// result := Insert ( result , result + 1 , j ) ;
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: LD_VAR 0 2
16932: PPUSH
16933: LD_VAR 0 2
16937: PUSH
16938: LD_INT 1
16940: PLUS
16941: PPUSH
16942: LD_VAR 0 7
16946: PPUSH
16947: CALL_OW 2
16951: ST_TO_ADDR
16952: GO 16920
16954: POP
16955: POP
// end ;
16956: GO 16886
16958: POP
16959: POP
// if not result then
16960: LD_VAR 0 2
16964: NOT
16965: IFFALSE 16969
// exit ;
16967: GO 17117
// mech := result [ 1 ] ;
16969: LD_ADDR_VAR 0 5
16973: PUSH
16974: LD_VAR 0 2
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: ST_TO_ADDR
// if result > 1 then
16983: LD_VAR 0 2
16987: PUSH
16988: LD_INT 1
16990: GREATER
16991: IFFALSE 17103
// for i = 2 to result do
16993: LD_ADDR_VAR 0 3
16997: PUSH
16998: DOUBLE
16999: LD_INT 2
17001: DEC
17002: ST_TO_ADDR
17003: LD_VAR 0 2
17007: PUSH
17008: FOR_TO
17009: IFFALSE 17101
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17011: LD_ADDR_VAR 0 4
17015: PUSH
17016: LD_VAR 0 2
17020: PUSH
17021: LD_VAR 0 3
17025: ARRAY
17026: PPUSH
17027: LD_INT 3
17029: PPUSH
17030: CALL_OW 259
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_VAR 0 3
17044: ARRAY
17045: PPUSH
17046: CALL_OW 432
17050: MINUS
17051: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17052: LD_VAR 0 4
17056: PUSH
17057: LD_VAR 0 5
17061: PPUSH
17062: LD_INT 3
17064: PPUSH
17065: CALL_OW 259
17069: PUSH
17070: LD_VAR 0 5
17074: PPUSH
17075: CALL_OW 432
17079: MINUS
17080: GREATEREQUAL
17081: IFFALSE 17099
// mech := result [ i ] ;
17083: LD_ADDR_VAR 0 5
17087: PUSH
17088: LD_VAR 0 2
17092: PUSH
17093: LD_VAR 0 3
17097: ARRAY
17098: ST_TO_ADDR
// end ;
17099: GO 17008
17101: POP
17102: POP
// ComLinkTo ( vehicle , mech ) ;
17103: LD_VAR 0 1
17107: PPUSH
17108: LD_VAR 0 5
17112: PPUSH
17113: CALL_OW 135
// end ;
17117: LD_VAR 0 2
17121: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17122: LD_INT 0
17124: PPUSH
17125: PPUSH
17126: PPUSH
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
17135: PPUSH
17136: PPUSH
// result := [ ] ;
17137: LD_ADDR_VAR 0 7
17141: PUSH
17142: EMPTY
17143: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 266
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: IN
17164: NOT
17165: IFFALSE 17169
// exit ;
17167: GO 18800
// if name then
17169: LD_VAR 0 3
17173: IFFALSE 17189
// SetBName ( base_dep , name ) ;
17175: LD_VAR 0 1
17179: PPUSH
17180: LD_VAR 0 3
17184: PPUSH
17185: CALL_OW 500
// base := GetBase ( base_dep ) ;
17189: LD_ADDR_VAR 0 15
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 274
17203: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17204: LD_ADDR_VAR 0 16
17208: PUSH
17209: LD_VAR 0 1
17213: PPUSH
17214: CALL_OW 255
17218: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17219: LD_ADDR_VAR 0 17
17223: PUSH
17224: LD_VAR 0 1
17228: PPUSH
17229: CALL_OW 248
17233: ST_TO_ADDR
// if sources then
17234: LD_VAR 0 5
17238: IFFALSE 17285
// for i = 1 to 3 do
17240: LD_ADDR_VAR 0 8
17244: PUSH
17245: DOUBLE
17246: LD_INT 1
17248: DEC
17249: ST_TO_ADDR
17250: LD_INT 3
17252: PUSH
17253: FOR_TO
17254: IFFALSE 17283
// AddResourceType ( base , i , sources [ i ] ) ;
17256: LD_VAR 0 15
17260: PPUSH
17261: LD_VAR 0 8
17265: PPUSH
17266: LD_VAR 0 5
17270: PUSH
17271: LD_VAR 0 8
17275: ARRAY
17276: PPUSH
17277: CALL_OW 276
17281: GO 17253
17283: POP
17284: POP
// buildings := GetBaseBuildings ( base , area ) ;
17285: LD_ADDR_VAR 0 18
17289: PUSH
17290: LD_VAR 0 15
17294: PPUSH
17295: LD_VAR 0 2
17299: PPUSH
17300: CALL 16577 0 2
17304: ST_TO_ADDR
// InitHc ;
17305: CALL_OW 19
// InitUc ;
17309: CALL_OW 18
// uc_side := side ;
17313: LD_ADDR_OWVAR 20
17317: PUSH
17318: LD_VAR 0 16
17322: ST_TO_ADDR
// uc_nation := nation ;
17323: LD_ADDR_OWVAR 21
17327: PUSH
17328: LD_VAR 0 17
17332: ST_TO_ADDR
// if buildings then
17333: LD_VAR 0 18
17337: IFFALSE 18659
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17339: LD_ADDR_VAR 0 19
17343: PUSH
17344: LD_VAR 0 18
17348: PPUSH
17349: LD_INT 2
17351: PUSH
17352: LD_INT 30
17354: PUSH
17355: LD_INT 29
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 30
17364: PUSH
17365: LD_INT 30
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: PPUSH
17377: CALL_OW 72
17381: ST_TO_ADDR
// if tmp then
17382: LD_VAR 0 19
17386: IFFALSE 17434
// for i in tmp do
17388: LD_ADDR_VAR 0 8
17392: PUSH
17393: LD_VAR 0 19
17397: PUSH
17398: FOR_IN
17399: IFFALSE 17432
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17401: LD_VAR 0 8
17405: PPUSH
17406: CALL_OW 250
17410: PPUSH
17411: LD_VAR 0 8
17415: PPUSH
17416: CALL_OW 251
17420: PPUSH
17421: LD_VAR 0 16
17425: PPUSH
17426: CALL_OW 441
17430: GO 17398
17432: POP
17433: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17434: LD_VAR 0 18
17438: PPUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 30
17444: PUSH
17445: LD_INT 32
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 30
17454: PUSH
17455: LD_INT 33
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: LIST
17466: PPUSH
17467: CALL_OW 72
17471: IFFALSE 17559
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17473: LD_ADDR_VAR 0 8
17477: PUSH
17478: LD_VAR 0 18
17482: PPUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 30
17488: PUSH
17489: LD_INT 32
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 30
17498: PUSH
17499: LD_INT 33
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 72
17515: PUSH
17516: FOR_IN
17517: IFFALSE 17557
// begin if not GetBWeapon ( i ) then
17519: LD_VAR 0 8
17523: PPUSH
17524: CALL_OW 269
17528: NOT
17529: IFFALSE 17555
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17531: LD_VAR 0 8
17535: PPUSH
17536: LD_VAR 0 8
17540: PPUSH
17541: LD_VAR 0 2
17545: PPUSH
17546: CALL 18805 0 2
17550: PPUSH
17551: CALL_OW 431
// end ;
17555: GO 17516
17557: POP
17558: POP
// end ; for i = 1 to personel do
17559: LD_ADDR_VAR 0 8
17563: PUSH
17564: DOUBLE
17565: LD_INT 1
17567: DEC
17568: ST_TO_ADDR
17569: LD_VAR 0 6
17573: PUSH
17574: FOR_TO
17575: IFFALSE 18639
// begin if i > 4 then
17577: LD_VAR 0 8
17581: PUSH
17582: LD_INT 4
17584: GREATER
17585: IFFALSE 17589
// break ;
17587: GO 18639
// case i of 1 :
17589: LD_VAR 0 8
17593: PUSH
17594: LD_INT 1
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17682
17602: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17603: LD_ADDR_VAR 0 12
17607: PUSH
17608: LD_VAR 0 18
17612: PPUSH
17613: LD_INT 22
17615: PUSH
17616: LD_VAR 0 16
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 58
17627: PUSH
17628: EMPTY
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: LD_INT 30
17636: PUSH
17637: LD_INT 32
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 30
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 30
17656: PUSH
17657: LD_INT 5
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 72
17679: ST_TO_ADDR
17680: GO 17904
17682: LD_INT 2
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17752
17690: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17691: LD_ADDR_VAR 0 12
17695: PUSH
17696: LD_VAR 0 18
17700: PPUSH
17701: LD_INT 22
17703: PUSH
17704: LD_VAR 0 16
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 2
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: LD_INT 0
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 30
17728: PUSH
17729: LD_INT 1
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 72
17749: ST_TO_ADDR
17750: GO 17904
17752: LD_INT 3
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 17822
17760: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17761: LD_ADDR_VAR 0 12
17765: PUSH
17766: LD_VAR 0 18
17770: PPUSH
17771: LD_INT 22
17773: PUSH
17774: LD_VAR 0 16
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 2
17785: PUSH
17786: LD_INT 30
17788: PUSH
17789: LD_INT 2
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 30
17798: PUSH
17799: LD_INT 3
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 72
17819: ST_TO_ADDR
17820: GO 17904
17822: LD_INT 4
17824: DOUBLE
17825: EQUAL
17826: IFTRUE 17830
17828: GO 17903
17830: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17831: LD_ADDR_VAR 0 12
17835: PUSH
17836: LD_VAR 0 18
17840: PPUSH
17841: LD_INT 22
17843: PUSH
17844: LD_VAR 0 16
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 2
17855: PUSH
17856: LD_INT 30
17858: PUSH
17859: LD_INT 6
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 30
17868: PUSH
17869: LD_INT 7
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 30
17878: PUSH
17879: LD_INT 8
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 72
17900: ST_TO_ADDR
17901: GO 17904
17903: POP
// if i = 1 then
17904: LD_VAR 0 8
17908: PUSH
17909: LD_INT 1
17911: EQUAL
17912: IFFALSE 18023
// begin tmp := [ ] ;
17914: LD_ADDR_VAR 0 19
17918: PUSH
17919: EMPTY
17920: ST_TO_ADDR
// for j in f do
17921: LD_ADDR_VAR 0 9
17925: PUSH
17926: LD_VAR 0 12
17930: PUSH
17931: FOR_IN
17932: IFFALSE 18005
// if GetBType ( j ) = b_bunker then
17934: LD_VAR 0 9
17938: PPUSH
17939: CALL_OW 266
17943: PUSH
17944: LD_INT 32
17946: EQUAL
17947: IFFALSE 17974
// tmp := Insert ( tmp , 1 , j ) else
17949: LD_ADDR_VAR 0 19
17953: PUSH
17954: LD_VAR 0 19
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: LD_VAR 0 9
17966: PPUSH
17967: CALL_OW 2
17971: ST_TO_ADDR
17972: GO 18003
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17974: LD_ADDR_VAR 0 19
17978: PUSH
17979: LD_VAR 0 19
17983: PPUSH
17984: LD_VAR 0 19
17988: PUSH
17989: LD_INT 1
17991: PLUS
17992: PPUSH
17993: LD_VAR 0 9
17997: PPUSH
17998: CALL_OW 2
18002: ST_TO_ADDR
18003: GO 17931
18005: POP
18006: POP
// if tmp then
18007: LD_VAR 0 19
18011: IFFALSE 18023
// f := tmp ;
18013: LD_ADDR_VAR 0 12
18017: PUSH
18018: LD_VAR 0 19
18022: ST_TO_ADDR
// end ; x := personel [ i ] ;
18023: LD_ADDR_VAR 0 13
18027: PUSH
18028: LD_VAR 0 6
18032: PUSH
18033: LD_VAR 0 8
18037: ARRAY
18038: ST_TO_ADDR
// if x = - 1 then
18039: LD_VAR 0 13
18043: PUSH
18044: LD_INT 1
18046: NEG
18047: EQUAL
18048: IFFALSE 18257
// begin for j in f do
18050: LD_ADDR_VAR 0 9
18054: PUSH
18055: LD_VAR 0 12
18059: PUSH
18060: FOR_IN
18061: IFFALSE 18253
// repeat InitHc ;
18063: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18067: LD_VAR 0 9
18071: PPUSH
18072: CALL_OW 266
18076: PUSH
18077: LD_INT 5
18079: EQUAL
18080: IFFALSE 18150
// begin if UnitsInside ( j ) < 3 then
18082: LD_VAR 0 9
18086: PPUSH
18087: CALL_OW 313
18091: PUSH
18092: LD_INT 3
18094: LESS
18095: IFFALSE 18131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18097: LD_INT 0
18099: PPUSH
18100: LD_INT 5
18102: PUSH
18103: LD_INT 8
18105: PUSH
18106: LD_INT 9
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_VAR 0 17
18118: ARRAY
18119: PPUSH
18120: LD_VAR 0 4
18124: PPUSH
18125: CALL_OW 380
18129: GO 18148
// PrepareHuman ( false , i , skill ) ;
18131: LD_INT 0
18133: PPUSH
18134: LD_VAR 0 8
18138: PPUSH
18139: LD_VAR 0 4
18143: PPUSH
18144: CALL_OW 380
// end else
18148: GO 18167
// PrepareHuman ( false , i , skill ) ;
18150: LD_INT 0
18152: PPUSH
18153: LD_VAR 0 8
18157: PPUSH
18158: LD_VAR 0 4
18162: PPUSH
18163: CALL_OW 380
// un := CreateHuman ;
18167: LD_ADDR_VAR 0 14
18171: PUSH
18172: CALL_OW 44
18176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18177: LD_ADDR_VAR 0 7
18181: PUSH
18182: LD_VAR 0 7
18186: PPUSH
18187: LD_INT 1
18189: PPUSH
18190: LD_VAR 0 14
18194: PPUSH
18195: CALL_OW 2
18199: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18200: LD_VAR 0 14
18204: PPUSH
18205: LD_VAR 0 9
18209: PPUSH
18210: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18214: LD_VAR 0 9
18218: PPUSH
18219: CALL_OW 313
18223: PUSH
18224: LD_INT 6
18226: EQUAL
18227: PUSH
18228: LD_VAR 0 9
18232: PPUSH
18233: CALL_OW 266
18237: PUSH
18238: LD_INT 32
18240: PUSH
18241: LD_INT 31
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: IN
18248: OR
18249: IFFALSE 18063
18251: GO 18060
18253: POP
18254: POP
// end else
18255: GO 18637
// for j = 1 to x do
18257: LD_ADDR_VAR 0 9
18261: PUSH
18262: DOUBLE
18263: LD_INT 1
18265: DEC
18266: ST_TO_ADDR
18267: LD_VAR 0 13
18271: PUSH
18272: FOR_TO
18273: IFFALSE 18635
// begin InitHc ;
18275: CALL_OW 19
// if not f then
18279: LD_VAR 0 12
18283: NOT
18284: IFFALSE 18373
// begin PrepareHuman ( false , i , skill ) ;
18286: LD_INT 0
18288: PPUSH
18289: LD_VAR 0 8
18293: PPUSH
18294: LD_VAR 0 4
18298: PPUSH
18299: CALL_OW 380
// un := CreateHuman ;
18303: LD_ADDR_VAR 0 14
18307: PUSH
18308: CALL_OW 44
18312: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18313: LD_ADDR_VAR 0 7
18317: PUSH
18318: LD_VAR 0 7
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_VAR 0 14
18330: PPUSH
18331: CALL_OW 2
18335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18336: LD_VAR 0 14
18340: PPUSH
18341: LD_VAR 0 1
18345: PPUSH
18346: CALL_OW 250
18350: PPUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 251
18360: PPUSH
18361: LD_INT 10
18363: PPUSH
18364: LD_INT 0
18366: PPUSH
18367: CALL_OW 50
// continue ;
18371: GO 18272
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18373: LD_VAR 0 12
18377: PUSH
18378: LD_INT 1
18380: ARRAY
18381: PPUSH
18382: CALL_OW 313
18386: PUSH
18387: LD_VAR 0 12
18391: PUSH
18392: LD_INT 1
18394: ARRAY
18395: PPUSH
18396: CALL_OW 266
18400: PUSH
18401: LD_INT 32
18403: PUSH
18404: LD_INT 31
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: IN
18411: AND
18412: PUSH
18413: LD_VAR 0 12
18417: PUSH
18418: LD_INT 1
18420: ARRAY
18421: PPUSH
18422: CALL_OW 313
18426: PUSH
18427: LD_INT 6
18429: EQUAL
18430: OR
18431: IFFALSE 18451
// f := Delete ( f , 1 ) ;
18433: LD_ADDR_VAR 0 12
18437: PUSH
18438: LD_VAR 0 12
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: CALL_OW 3
18450: ST_TO_ADDR
// if not f then
18451: LD_VAR 0 12
18455: NOT
18456: IFFALSE 18474
// begin x := x + 2 ;
18458: LD_ADDR_VAR 0 13
18462: PUSH
18463: LD_VAR 0 13
18467: PUSH
18468: LD_INT 2
18470: PLUS
18471: ST_TO_ADDR
// continue ;
18472: GO 18272
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18474: LD_VAR 0 12
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: CALL_OW 266
18487: PUSH
18488: LD_INT 5
18490: EQUAL
18491: IFFALSE 18565
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18493: LD_VAR 0 12
18497: PUSH
18498: LD_INT 1
18500: ARRAY
18501: PPUSH
18502: CALL_OW 313
18506: PUSH
18507: LD_INT 3
18509: LESS
18510: IFFALSE 18546
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18512: LD_INT 0
18514: PPUSH
18515: LD_INT 5
18517: PUSH
18518: LD_INT 8
18520: PUSH
18521: LD_INT 9
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: PUSH
18529: LD_VAR 0 17
18533: ARRAY
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: CALL_OW 380
18544: GO 18563
// PrepareHuman ( false , i , skill ) ;
18546: LD_INT 0
18548: PPUSH
18549: LD_VAR 0 8
18553: PPUSH
18554: LD_VAR 0 4
18558: PPUSH
18559: CALL_OW 380
// end else
18563: GO 18582
// PrepareHuman ( false , i , skill ) ;
18565: LD_INT 0
18567: PPUSH
18568: LD_VAR 0 8
18572: PPUSH
18573: LD_VAR 0 4
18577: PPUSH
18578: CALL_OW 380
// un := CreateHuman ;
18582: LD_ADDR_VAR 0 14
18586: PUSH
18587: CALL_OW 44
18591: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18592: LD_ADDR_VAR 0 7
18596: PUSH
18597: LD_VAR 0 7
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 14
18609: PPUSH
18610: CALL_OW 2
18614: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18615: LD_VAR 0 14
18619: PPUSH
18620: LD_VAR 0 12
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: PPUSH
18629: CALL_OW 52
// end ;
18633: GO 18272
18635: POP
18636: POP
// end ;
18637: GO 17574
18639: POP
18640: POP
// result := result ^ buildings ;
18641: LD_ADDR_VAR 0 7
18645: PUSH
18646: LD_VAR 0 7
18650: PUSH
18651: LD_VAR 0 18
18655: ADD
18656: ST_TO_ADDR
// end else
18657: GO 18800
// begin for i = 1 to personel do
18659: LD_ADDR_VAR 0 8
18663: PUSH
18664: DOUBLE
18665: LD_INT 1
18667: DEC
18668: ST_TO_ADDR
18669: LD_VAR 0 6
18673: PUSH
18674: FOR_TO
18675: IFFALSE 18798
// begin if i > 4 then
18677: LD_VAR 0 8
18681: PUSH
18682: LD_INT 4
18684: GREATER
18685: IFFALSE 18689
// break ;
18687: GO 18798
// x := personel [ i ] ;
18689: LD_ADDR_VAR 0 13
18693: PUSH
18694: LD_VAR 0 6
18698: PUSH
18699: LD_VAR 0 8
18703: ARRAY
18704: ST_TO_ADDR
// if x = - 1 then
18705: LD_VAR 0 13
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: EQUAL
18714: IFFALSE 18718
// continue ;
18716: GO 18674
// PrepareHuman ( false , i , skill ) ;
18718: LD_INT 0
18720: PPUSH
18721: LD_VAR 0 8
18725: PPUSH
18726: LD_VAR 0 4
18730: PPUSH
18731: CALL_OW 380
// un := CreateHuman ;
18735: LD_ADDR_VAR 0 14
18739: PUSH
18740: CALL_OW 44
18744: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18745: LD_VAR 0 14
18749: PPUSH
18750: LD_VAR 0 1
18754: PPUSH
18755: CALL_OW 250
18759: PPUSH
18760: LD_VAR 0 1
18764: PPUSH
18765: CALL_OW 251
18769: PPUSH
18770: LD_INT 10
18772: PPUSH
18773: LD_INT 0
18775: PPUSH
18776: CALL_OW 50
// result := result ^ un ;
18780: LD_ADDR_VAR 0 7
18784: PUSH
18785: LD_VAR 0 7
18789: PUSH
18790: LD_VAR 0 14
18794: ADD
18795: ST_TO_ADDR
// end ;
18796: GO 18674
18798: POP
18799: POP
// end ; end ;
18800: LD_VAR 0 7
18804: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
18813: PPUSH
18814: PPUSH
18815: PPUSH
18816: PPUSH
18817: PPUSH
18818: PPUSH
18819: PPUSH
18820: PPUSH
18821: PPUSH
18822: PPUSH
// result := false ;
18823: LD_ADDR_VAR 0 3
18827: PUSH
18828: LD_INT 0
18830: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18831: LD_VAR 0 1
18835: NOT
18836: PUSH
18837: LD_VAR 0 1
18841: PPUSH
18842: CALL_OW 266
18846: PUSH
18847: LD_INT 32
18849: PUSH
18850: LD_INT 33
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: IN
18857: NOT
18858: OR
18859: IFFALSE 18863
// exit ;
18861: GO 19999
// nat := GetNation ( tower ) ;
18863: LD_ADDR_VAR 0 12
18867: PUSH
18868: LD_VAR 0 1
18872: PPUSH
18873: CALL_OW 248
18877: ST_TO_ADDR
// side := GetSide ( tower ) ;
18878: LD_ADDR_VAR 0 16
18882: PUSH
18883: LD_VAR 0 1
18887: PPUSH
18888: CALL_OW 255
18892: ST_TO_ADDR
// x := GetX ( tower ) ;
18893: LD_ADDR_VAR 0 10
18897: PUSH
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL_OW 250
18907: ST_TO_ADDR
// y := GetY ( tower ) ;
18908: LD_ADDR_VAR 0 11
18912: PUSH
18913: LD_VAR 0 1
18917: PPUSH
18918: CALL_OW 251
18922: ST_TO_ADDR
// if not x or not y then
18923: LD_VAR 0 10
18927: NOT
18928: PUSH
18929: LD_VAR 0 11
18933: NOT
18934: OR
18935: IFFALSE 18939
// exit ;
18937: GO 19999
// weapon := 0 ;
18939: LD_ADDR_VAR 0 18
18943: PUSH
18944: LD_INT 0
18946: ST_TO_ADDR
// fac_list := [ ] ;
18947: LD_ADDR_VAR 0 17
18951: PUSH
18952: EMPTY
18953: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
18954: LD_ADDR_VAR 0 6
18958: PUSH
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 274
18968: PPUSH
18969: LD_VAR 0 2
18973: PPUSH
18974: CALL 16577 0 2
18978: PPUSH
18979: LD_INT 30
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PPUSH
18989: CALL_OW 72
18993: ST_TO_ADDR
// if not factories then
18994: LD_VAR 0 6
18998: NOT
18999: IFFALSE 19003
// exit ;
19001: GO 19999
// for i in factories do
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: LD_VAR 0 6
19012: PUSH
19013: FOR_IN
19014: IFFALSE 19039
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19016: LD_ADDR_VAR 0 17
19020: PUSH
19021: LD_VAR 0 17
19025: PUSH
19026: LD_VAR 0 8
19030: PPUSH
19031: CALL_OW 478
19035: UNION
19036: ST_TO_ADDR
19037: GO 19013
19039: POP
19040: POP
// if not fac_list then
19041: LD_VAR 0 17
19045: NOT
19046: IFFALSE 19050
// exit ;
19048: GO 19999
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19050: LD_ADDR_VAR 0 5
19054: PUSH
19055: LD_INT 4
19057: PUSH
19058: LD_INT 5
19060: PUSH
19061: LD_INT 9
19063: PUSH
19064: LD_INT 10
19066: PUSH
19067: LD_INT 6
19069: PUSH
19070: LD_INT 7
19072: PUSH
19073: LD_INT 11
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 27
19087: PUSH
19088: LD_INT 28
19090: PUSH
19091: LD_INT 26
19093: PUSH
19094: LD_INT 30
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 43
19105: PUSH
19106: LD_INT 44
19108: PUSH
19109: LD_INT 46
19111: PUSH
19112: LD_INT 45
19114: PUSH
19115: LD_INT 47
19117: PUSH
19118: LD_INT 49
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: PUSH
19134: LD_VAR 0 12
19138: ARRAY
19139: ST_TO_ADDR
// for i in list do
19140: LD_ADDR_VAR 0 8
19144: PUSH
19145: LD_VAR 0 5
19149: PUSH
19150: FOR_IN
19151: IFFALSE 19184
// if not i in fac_list then
19153: LD_VAR 0 8
19157: PUSH
19158: LD_VAR 0 17
19162: IN
19163: NOT
19164: IFFALSE 19182
// list := list diff i ;
19166: LD_ADDR_VAR 0 5
19170: PUSH
19171: LD_VAR 0 5
19175: PUSH
19176: LD_VAR 0 8
19180: DIFF
19181: ST_TO_ADDR
19182: GO 19150
19184: POP
19185: POP
// if not list then
19186: LD_VAR 0 5
19190: NOT
19191: IFFALSE 19195
// exit ;
19193: GO 19999
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19195: LD_VAR 0 12
19199: PUSH
19200: LD_INT 3
19202: EQUAL
19203: PUSH
19204: LD_INT 49
19206: PUSH
19207: LD_VAR 0 5
19211: IN
19212: AND
19213: PUSH
19214: LD_INT 31
19216: PPUSH
19217: LD_VAR 0 16
19221: PPUSH
19222: CALL_OW 321
19226: PUSH
19227: LD_INT 2
19229: EQUAL
19230: AND
19231: IFFALSE 19291
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19233: LD_INT 22
19235: PUSH
19236: LD_VAR 0 16
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 35
19247: PUSH
19248: LD_INT 49
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 91
19257: PUSH
19258: LD_VAR 0 1
19262: PUSH
19263: LD_INT 10
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PPUSH
19276: CALL_OW 69
19280: NOT
19281: IFFALSE 19291
// weapon := ru_time_lapser ;
19283: LD_ADDR_VAR 0 18
19287: PUSH
19288: LD_INT 49
19290: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19291: LD_VAR 0 12
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: IN
19306: PUSH
19307: LD_INT 11
19309: PUSH
19310: LD_VAR 0 5
19314: IN
19315: PUSH
19316: LD_INT 30
19318: PUSH
19319: LD_VAR 0 5
19323: IN
19324: OR
19325: AND
19326: PUSH
19327: LD_INT 6
19329: PPUSH
19330: LD_VAR 0 16
19334: PPUSH
19335: CALL_OW 321
19339: PUSH
19340: LD_INT 2
19342: EQUAL
19343: AND
19344: IFFALSE 19509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19346: LD_INT 22
19348: PUSH
19349: LD_VAR 0 16
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 35
19363: PUSH
19364: LD_INT 11
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 35
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 91
19388: PUSH
19389: LD_VAR 0 1
19393: PUSH
19394: LD_INT 18
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: NOT
19412: PUSH
19413: LD_INT 22
19415: PUSH
19416: LD_VAR 0 16
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 2
19427: PUSH
19428: LD_INT 30
19430: PUSH
19431: LD_INT 32
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 33
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 91
19455: PUSH
19456: LD_VAR 0 1
19460: PUSH
19461: LD_INT 12
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: PPUSH
19477: CALL_OW 69
19481: PUSH
19482: LD_INT 2
19484: GREATER
19485: AND
19486: IFFALSE 19509
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19488: LD_ADDR_VAR 0 18
19492: PUSH
19493: LD_INT 11
19495: PUSH
19496: LD_INT 30
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_VAR 0 12
19507: ARRAY
19508: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19509: LD_VAR 0 18
19513: NOT
19514: PUSH
19515: LD_INT 40
19517: PPUSH
19518: LD_VAR 0 16
19522: PPUSH
19523: CALL_OW 321
19527: PUSH
19528: LD_INT 2
19530: EQUAL
19531: AND
19532: PUSH
19533: LD_INT 7
19535: PUSH
19536: LD_VAR 0 5
19540: IN
19541: PUSH
19542: LD_INT 28
19544: PUSH
19545: LD_VAR 0 5
19549: IN
19550: OR
19551: PUSH
19552: LD_INT 45
19554: PUSH
19555: LD_VAR 0 5
19559: IN
19560: OR
19561: AND
19562: IFFALSE 19816
// begin hex := GetHexInfo ( x , y ) ;
19564: LD_ADDR_VAR 0 4
19568: PUSH
19569: LD_VAR 0 10
19573: PPUSH
19574: LD_VAR 0 11
19578: PPUSH
19579: CALL_OW 546
19583: ST_TO_ADDR
// if hex [ 1 ] then
19584: LD_VAR 0 4
19588: PUSH
19589: LD_INT 1
19591: ARRAY
19592: IFFALSE 19596
// exit ;
19594: GO 19999
// height := hex [ 2 ] ;
19596: LD_ADDR_VAR 0 15
19600: PUSH
19601: LD_VAR 0 4
19605: PUSH
19606: LD_INT 2
19608: ARRAY
19609: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19610: LD_ADDR_VAR 0 14
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: LD_INT 5
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: ST_TO_ADDR
// for i in tmp do
19633: LD_ADDR_VAR 0 8
19637: PUSH
19638: LD_VAR 0 14
19642: PUSH
19643: FOR_IN
19644: IFFALSE 19814
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19646: LD_ADDR_VAR 0 9
19650: PUSH
19651: LD_VAR 0 10
19655: PPUSH
19656: LD_VAR 0 8
19660: PPUSH
19661: LD_INT 5
19663: PPUSH
19664: CALL_OW 272
19668: PUSH
19669: LD_VAR 0 11
19673: PPUSH
19674: LD_VAR 0 8
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 273
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19691: LD_VAR 0 9
19695: PUSH
19696: LD_INT 1
19698: ARRAY
19699: PPUSH
19700: LD_VAR 0 9
19704: PUSH
19705: LD_INT 2
19707: ARRAY
19708: PPUSH
19709: CALL_OW 488
19713: IFFALSE 19812
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19715: LD_ADDR_VAR 0 4
19719: PUSH
19720: LD_VAR 0 9
19724: PUSH
19725: LD_INT 1
19727: ARRAY
19728: PPUSH
19729: LD_VAR 0 9
19733: PUSH
19734: LD_INT 2
19736: ARRAY
19737: PPUSH
19738: CALL_OW 546
19742: ST_TO_ADDR
// if hex [ 1 ] then
19743: LD_VAR 0 4
19747: PUSH
19748: LD_INT 1
19750: ARRAY
19751: IFFALSE 19755
// continue ;
19753: GO 19643
// h := hex [ 2 ] ;
19755: LD_ADDR_VAR 0 13
19759: PUSH
19760: LD_VAR 0 4
19764: PUSH
19765: LD_INT 2
19767: ARRAY
19768: ST_TO_ADDR
// if h + 7 < height then
19769: LD_VAR 0 13
19773: PUSH
19774: LD_INT 7
19776: PLUS
19777: PUSH
19778: LD_VAR 0 15
19782: LESS
19783: IFFALSE 19812
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19785: LD_ADDR_VAR 0 18
19789: PUSH
19790: LD_INT 7
19792: PUSH
19793: LD_INT 28
19795: PUSH
19796: LD_INT 45
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PUSH
19804: LD_VAR 0 12
19808: ARRAY
19809: ST_TO_ADDR
// break ;
19810: GO 19814
// end ; end ; end ;
19812: GO 19643
19814: POP
19815: POP
// end ; if not weapon then
19816: LD_VAR 0 18
19820: NOT
19821: IFFALSE 19881
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19823: LD_ADDR_VAR 0 5
19827: PUSH
19828: LD_VAR 0 5
19832: PUSH
19833: LD_INT 11
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 49
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: DIFF
19847: ST_TO_ADDR
// if not list then
19848: LD_VAR 0 5
19852: NOT
19853: IFFALSE 19857
// exit ;
19855: GO 19999
// weapon := list [ rand ( 1 , list ) ] ;
19857: LD_ADDR_VAR 0 18
19861: PUSH
19862: LD_VAR 0 5
19866: PUSH
19867: LD_INT 1
19869: PPUSH
19870: LD_VAR 0 5
19874: PPUSH
19875: CALL_OW 12
19879: ARRAY
19880: ST_TO_ADDR
// end ; if weapon then
19881: LD_VAR 0 18
19885: IFFALSE 19999
// begin tmp := CostOfWeapon ( weapon ) ;
19887: LD_ADDR_VAR 0 14
19891: PUSH
19892: LD_VAR 0 18
19896: PPUSH
19897: CALL_OW 451
19901: ST_TO_ADDR
// j := GetBase ( tower ) ;
19902: LD_ADDR_VAR 0 9
19906: PUSH
19907: LD_VAR 0 1
19911: PPUSH
19912: CALL_OW 274
19916: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19917: LD_VAR 0 9
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL_OW 275
19929: PUSH
19930: LD_VAR 0 14
19934: PUSH
19935: LD_INT 1
19937: ARRAY
19938: GREATEREQUAL
19939: PUSH
19940: LD_VAR 0 9
19944: PPUSH
19945: LD_INT 2
19947: PPUSH
19948: CALL_OW 275
19952: PUSH
19953: LD_VAR 0 14
19957: PUSH
19958: LD_INT 2
19960: ARRAY
19961: GREATEREQUAL
19962: AND
19963: PUSH
19964: LD_VAR 0 9
19968: PPUSH
19969: LD_INT 3
19971: PPUSH
19972: CALL_OW 275
19976: PUSH
19977: LD_VAR 0 14
19981: PUSH
19982: LD_INT 3
19984: ARRAY
19985: GREATEREQUAL
19986: AND
19987: IFFALSE 19999
// result := weapon ;
19989: LD_ADDR_VAR 0 3
19993: PUSH
19994: LD_VAR 0 18
19998: ST_TO_ADDR
// end ; end ;
19999: LD_VAR 0 3
20003: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
// result := true ;
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 1
20015: ST_TO_ADDR
// if array1 = array2 then
20016: LD_VAR 0 1
20020: PUSH
20021: LD_VAR 0 2
20025: EQUAL
20026: IFFALSE 20086
// begin for i = 1 to array1 do
20028: LD_ADDR_VAR 0 4
20032: PUSH
20033: DOUBLE
20034: LD_INT 1
20036: DEC
20037: ST_TO_ADDR
20038: LD_VAR 0 1
20042: PUSH
20043: FOR_TO
20044: IFFALSE 20082
// if array1 [ i ] <> array2 [ i ] then
20046: LD_VAR 0 1
20050: PUSH
20051: LD_VAR 0 4
20055: ARRAY
20056: PUSH
20057: LD_VAR 0 2
20061: PUSH
20062: LD_VAR 0 4
20066: ARRAY
20067: NONEQUAL
20068: IFFALSE 20080
// begin result := false ;
20070: LD_ADDR_VAR 0 3
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// break ;
20078: GO 20082
// end ;
20080: GO 20043
20082: POP
20083: POP
// end else
20084: GO 20094
// result := false ;
20086: LD_ADDR_VAR 0 3
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// end ;
20094: LD_VAR 0 3
20098: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
20103: PPUSH
// pom := GetBase ( fac ) ;
20104: LD_ADDR_VAR 0 5
20108: PUSH
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 274
20118: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20119: LD_ADDR_VAR 0 4
20123: PUSH
20124: LD_VAR 0 2
20128: PUSH
20129: LD_INT 1
20131: ARRAY
20132: PPUSH
20133: LD_VAR 0 2
20137: PUSH
20138: LD_INT 2
20140: ARRAY
20141: PPUSH
20142: LD_VAR 0 2
20146: PUSH
20147: LD_INT 3
20149: ARRAY
20150: PPUSH
20151: LD_VAR 0 2
20155: PUSH
20156: LD_INT 4
20158: ARRAY
20159: PPUSH
20160: CALL_OW 449
20164: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 5
20174: PPUSH
20175: LD_INT 1
20177: PPUSH
20178: CALL_OW 275
20182: PUSH
20183: LD_VAR 0 4
20187: PUSH
20188: LD_INT 1
20190: ARRAY
20191: GREATEREQUAL
20192: PUSH
20193: LD_VAR 0 5
20197: PPUSH
20198: LD_INT 2
20200: PPUSH
20201: CALL_OW 275
20205: PUSH
20206: LD_VAR 0 4
20210: PUSH
20211: LD_INT 2
20213: ARRAY
20214: GREATEREQUAL
20215: AND
20216: PUSH
20217: LD_VAR 0 5
20221: PPUSH
20222: LD_INT 3
20224: PPUSH
20225: CALL_OW 275
20229: PUSH
20230: LD_VAR 0 4
20234: PUSH
20235: LD_INT 3
20237: ARRAY
20238: GREATEREQUAL
20239: AND
20240: ST_TO_ADDR
// end ;
20241: LD_VAR 0 3
20245: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
20250: PPUSH
20251: PPUSH
// pom := GetBase ( building ) ;
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 274
20266: ST_TO_ADDR
// if not pom then
20267: LD_VAR 0 3
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20446
// btype := GetBType ( building ) ;
20276: LD_ADDR_VAR 0 5
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 266
20290: ST_TO_ADDR
// if btype = b_armoury then
20291: LD_VAR 0 5
20295: PUSH
20296: LD_INT 4
20298: EQUAL
20299: IFFALSE 20309
// btype := b_barracks ;
20301: LD_ADDR_VAR 0 5
20305: PUSH
20306: LD_INT 5
20308: ST_TO_ADDR
// if btype = b_depot then
20309: LD_VAR 0 5
20313: PUSH
20314: LD_INT 0
20316: EQUAL
20317: IFFALSE 20327
// btype := b_warehouse ;
20319: LD_ADDR_VAR 0 5
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if btype = b_workshop then
20327: LD_VAR 0 5
20331: PUSH
20332: LD_INT 2
20334: EQUAL
20335: IFFALSE 20345
// btype := b_factory ;
20337: LD_ADDR_VAR 0 5
20341: PUSH
20342: LD_INT 3
20344: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20345: LD_ADDR_VAR 0 4
20349: PUSH
20350: LD_VAR 0 5
20354: PPUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 248
20364: PPUSH
20365: CALL_OW 450
20369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20370: LD_ADDR_VAR 0 2
20374: PUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: LD_INT 1
20382: PPUSH
20383: CALL_OW 275
20387: PUSH
20388: LD_VAR 0 4
20392: PUSH
20393: LD_INT 1
20395: ARRAY
20396: GREATEREQUAL
20397: PUSH
20398: LD_VAR 0 3
20402: PPUSH
20403: LD_INT 2
20405: PPUSH
20406: CALL_OW 275
20410: PUSH
20411: LD_VAR 0 4
20415: PUSH
20416: LD_INT 2
20418: ARRAY
20419: GREATEREQUAL
20420: AND
20421: PUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: LD_INT 3
20429: PPUSH
20430: CALL_OW 275
20434: PUSH
20435: LD_VAR 0 4
20439: PUSH
20440: LD_INT 3
20442: ARRAY
20443: GREATEREQUAL
20444: AND
20445: ST_TO_ADDR
// end ;
20446: LD_VAR 0 2
20450: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
20455: PPUSH
// pom := GetBase ( building ) ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_VAR 0 1
20465: PPUSH
20466: CALL_OW 274
20470: ST_TO_ADDR
// if not pom then
20471: LD_VAR 0 4
20475: NOT
20476: IFFALSE 20480
// exit ;
20478: GO 20581
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20480: LD_ADDR_VAR 0 5
20484: PUSH
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 248
20499: PPUSH
20500: CALL_OW 450
20504: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20505: LD_ADDR_VAR 0 3
20509: PUSH
20510: LD_VAR 0 4
20514: PPUSH
20515: LD_INT 1
20517: PPUSH
20518: CALL_OW 275
20522: PUSH
20523: LD_VAR 0 5
20527: PUSH
20528: LD_INT 1
20530: ARRAY
20531: GREATEREQUAL
20532: PUSH
20533: LD_VAR 0 4
20537: PPUSH
20538: LD_INT 2
20540: PPUSH
20541: CALL_OW 275
20545: PUSH
20546: LD_VAR 0 5
20550: PUSH
20551: LD_INT 2
20553: ARRAY
20554: GREATEREQUAL
20555: AND
20556: PUSH
20557: LD_VAR 0 4
20561: PPUSH
20562: LD_INT 3
20564: PPUSH
20565: CALL_OW 275
20569: PUSH
20570: LD_VAR 0 5
20574: PUSH
20575: LD_INT 3
20577: ARRAY
20578: GREATEREQUAL
20579: AND
20580: ST_TO_ADDR
// end ;
20581: LD_VAR 0 3
20585: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
20586: LD_INT 0
20588: PPUSH
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
20594: PPUSH
20595: PPUSH
20596: PPUSH
20597: PPUSH
// result := false ;
20598: LD_ADDR_VAR 0 6
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// if not base or not btype or not x or not y then
20606: LD_VAR 0 1
20610: NOT
20611: PUSH
20612: LD_VAR 0 2
20616: NOT
20617: OR
20618: PUSH
20619: LD_VAR 0 3
20623: NOT
20624: OR
20625: PUSH
20626: LD_VAR 0 4
20630: NOT
20631: OR
20632: IFFALSE 20636
// exit ;
20634: GO 21245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
20636: LD_ADDR_VAR 0 12
20640: PUSH
20641: LD_VAR 0 2
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: LD_VAR 0 4
20655: PPUSH
20656: LD_VAR 0 5
20660: PPUSH
20661: LD_VAR 0 1
20665: PUSH
20666: LD_INT 1
20668: ARRAY
20669: PPUSH
20670: CALL_OW 248
20674: PPUSH
20675: LD_INT 0
20677: PPUSH
20678: CALL 22082 0 6
20682: ST_TO_ADDR
// if not hexes then
20683: LD_VAR 0 12
20687: NOT
20688: IFFALSE 20692
// exit ;
20690: GO 21245
// for i = 1 to hexes do
20692: LD_ADDR_VAR 0 7
20696: PUSH
20697: DOUBLE
20698: LD_INT 1
20700: DEC
20701: ST_TO_ADDR
20702: LD_VAR 0 12
20706: PUSH
20707: FOR_TO
20708: IFFALSE 21243
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20710: LD_ADDR_VAR 0 11
20714: PUSH
20715: LD_VAR 0 12
20719: PUSH
20720: LD_VAR 0 7
20724: ARRAY
20725: PUSH
20726: LD_INT 1
20728: ARRAY
20729: PPUSH
20730: LD_VAR 0 12
20734: PUSH
20735: LD_VAR 0 7
20739: ARRAY
20740: PUSH
20741: LD_INT 2
20743: ARRAY
20744: PPUSH
20745: CALL_OW 428
20749: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20750: LD_VAR 0 12
20754: PUSH
20755: LD_VAR 0 7
20759: ARRAY
20760: PUSH
20761: LD_INT 1
20763: ARRAY
20764: PPUSH
20765: LD_VAR 0 12
20769: PUSH
20770: LD_VAR 0 7
20774: ARRAY
20775: PUSH
20776: LD_INT 2
20778: ARRAY
20779: PPUSH
20780: CALL_OW 351
20784: PUSH
20785: LD_VAR 0 12
20789: PUSH
20790: LD_VAR 0 7
20794: ARRAY
20795: PUSH
20796: LD_INT 1
20798: ARRAY
20799: PPUSH
20800: LD_VAR 0 12
20804: PUSH
20805: LD_VAR 0 7
20809: ARRAY
20810: PUSH
20811: LD_INT 2
20813: ARRAY
20814: PPUSH
20815: CALL_OW 488
20819: NOT
20820: OR
20821: PUSH
20822: LD_VAR 0 11
20826: PPUSH
20827: CALL_OW 247
20831: PUSH
20832: LD_INT 3
20834: EQUAL
20835: OR
20836: IFFALSE 20842
// exit ;
20838: POP
20839: POP
20840: GO 21245
// if not tmp or not tmp in base then
20842: LD_VAR 0 11
20846: NOT
20847: PUSH
20848: LD_VAR 0 11
20852: PUSH
20853: LD_VAR 0 1
20857: IN
20858: NOT
20859: OR
20860: IFFALSE 20864
// continue ;
20862: GO 20707
// result := true ;
20864: LD_ADDR_VAR 0 6
20868: PUSH
20869: LD_INT 1
20871: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20872: LD_ADDR_VAR 0 15
20876: PUSH
20877: LD_VAR 0 1
20881: PPUSH
20882: LD_INT 22
20884: PUSH
20885: LD_VAR 0 11
20889: PPUSH
20890: CALL_OW 255
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 2
20901: PUSH
20902: LD_INT 30
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 72
20935: ST_TO_ADDR
// if dep then
20936: LD_VAR 0 15
20940: IFFALSE 21076
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20942: LD_ADDR_VAR 0 14
20946: PUSH
20947: LD_VAR 0 15
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PPUSH
20956: CALL_OW 250
20960: PPUSH
20961: LD_VAR 0 15
20965: PUSH
20966: LD_INT 1
20968: ARRAY
20969: PPUSH
20970: CALL_OW 254
20974: PPUSH
20975: LD_INT 5
20977: PPUSH
20978: CALL_OW 272
20982: PUSH
20983: LD_VAR 0 15
20987: PUSH
20988: LD_INT 1
20990: ARRAY
20991: PPUSH
20992: CALL_OW 251
20996: PPUSH
20997: LD_VAR 0 15
21001: PUSH
21002: LD_INT 1
21004: ARRAY
21005: PPUSH
21006: CALL_OW 254
21010: PPUSH
21011: LD_INT 5
21013: PPUSH
21014: CALL_OW 273
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21023: LD_VAR 0 14
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: PPUSH
21032: LD_VAR 0 14
21036: PUSH
21037: LD_INT 2
21039: ARRAY
21040: PPUSH
21041: CALL_OW 488
21045: IFFALSE 21076
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21047: LD_VAR 0 11
21051: PPUSH
21052: LD_VAR 0 14
21056: PUSH
21057: LD_INT 1
21059: ARRAY
21060: PPUSH
21061: LD_VAR 0 14
21065: PUSH
21066: LD_INT 2
21068: ARRAY
21069: PPUSH
21070: CALL_OW 111
// continue ;
21074: GO 20707
// end ; end ; r := GetDir ( tmp ) ;
21076: LD_ADDR_VAR 0 13
21080: PUSH
21081: LD_VAR 0 11
21085: PPUSH
21086: CALL_OW 254
21090: ST_TO_ADDR
// if r = 5 then
21091: LD_VAR 0 13
21095: PUSH
21096: LD_INT 5
21098: EQUAL
21099: IFFALSE 21109
// r := 0 ;
21101: LD_ADDR_VAR 0 13
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// for j = r to 5 do
21109: LD_ADDR_VAR 0 8
21113: PUSH
21114: DOUBLE
21115: LD_VAR 0 13
21119: DEC
21120: ST_TO_ADDR
21121: LD_INT 5
21123: PUSH
21124: FOR_TO
21125: IFFALSE 21239
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21127: LD_ADDR_VAR 0 9
21131: PUSH
21132: LD_VAR 0 11
21136: PPUSH
21137: CALL_OW 250
21141: PPUSH
21142: LD_VAR 0 8
21146: PPUSH
21147: LD_INT 2
21149: PPUSH
21150: CALL_OW 272
21154: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21155: LD_ADDR_VAR 0 10
21159: PUSH
21160: LD_VAR 0 11
21164: PPUSH
21165: CALL_OW 251
21169: PPUSH
21170: LD_VAR 0 8
21174: PPUSH
21175: LD_INT 2
21177: PPUSH
21178: CALL_OW 273
21182: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21183: LD_VAR 0 9
21187: PPUSH
21188: LD_VAR 0 10
21192: PPUSH
21193: CALL_OW 488
21197: PUSH
21198: LD_VAR 0 9
21202: PPUSH
21203: LD_VAR 0 10
21207: PPUSH
21208: CALL_OW 428
21212: NOT
21213: AND
21214: IFFALSE 21237
// begin ComMoveXY ( tmp , _x , _y ) ;
21216: LD_VAR 0 11
21220: PPUSH
21221: LD_VAR 0 9
21225: PPUSH
21226: LD_VAR 0 10
21230: PPUSH
21231: CALL_OW 111
// break ;
21235: GO 21239
// end ; end ;
21237: GO 21124
21239: POP
21240: POP
// end ;
21241: GO 20707
21243: POP
21244: POP
// end ;
21245: LD_VAR 0 6
21249: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
21250: LD_INT 0
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
21257: PPUSH
21258: PPUSH
21259: PPUSH
21260: PPUSH
21261: PPUSH
// result := false ;
21262: LD_ADDR_VAR 0 6
21266: PUSH
21267: LD_INT 0
21269: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21270: LD_VAR 0 1
21274: NOT
21275: PUSH
21276: LD_VAR 0 1
21280: PPUSH
21281: CALL_OW 266
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: IN
21296: NOT
21297: OR
21298: PUSH
21299: LD_VAR 0 2
21303: NOT
21304: OR
21305: PUSH
21306: LD_VAR 0 5
21310: PUSH
21311: LD_INT 0
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 4
21325: PUSH
21326: LD_INT 5
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: IN
21337: NOT
21338: OR
21339: PUSH
21340: LD_VAR 0 3
21344: PPUSH
21345: LD_VAR 0 4
21349: PPUSH
21350: CALL_OW 488
21354: NOT
21355: OR
21356: IFFALSE 21360
// exit ;
21358: GO 22077
// pom := GetBase ( depot ) ;
21360: LD_ADDR_VAR 0 10
21364: PUSH
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 274
21374: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21375: LD_ADDR_VAR 0 11
21379: PUSH
21380: LD_VAR 0 2
21384: PPUSH
21385: LD_VAR 0 1
21389: PPUSH
21390: CALL_OW 248
21394: PPUSH
21395: CALL_OW 450
21399: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21400: LD_VAR 0 10
21404: PPUSH
21405: LD_INT 1
21407: PPUSH
21408: CALL_OW 275
21412: PUSH
21413: LD_VAR 0 11
21417: PUSH
21418: LD_INT 1
21420: ARRAY
21421: GREATEREQUAL
21422: PUSH
21423: LD_VAR 0 10
21427: PPUSH
21428: LD_INT 2
21430: PPUSH
21431: CALL_OW 275
21435: PUSH
21436: LD_VAR 0 11
21440: PUSH
21441: LD_INT 2
21443: ARRAY
21444: GREATEREQUAL
21445: AND
21446: PUSH
21447: LD_VAR 0 10
21451: PPUSH
21452: LD_INT 3
21454: PPUSH
21455: CALL_OW 275
21459: PUSH
21460: LD_VAR 0 11
21464: PUSH
21465: LD_INT 3
21467: ARRAY
21468: GREATEREQUAL
21469: AND
21470: NOT
21471: IFFALSE 21475
// exit ;
21473: GO 22077
// if GetBType ( depot ) = b_depot then
21475: LD_VAR 0 1
21479: PPUSH
21480: CALL_OW 266
21484: PUSH
21485: LD_INT 0
21487: EQUAL
21488: IFFALSE 21500
// dist := 28 else
21490: LD_ADDR_VAR 0 14
21494: PUSH
21495: LD_INT 28
21497: ST_TO_ADDR
21498: GO 21508
// dist := 36 ;
21500: LD_ADDR_VAR 0 14
21504: PUSH
21505: LD_INT 36
21507: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21508: LD_VAR 0 1
21512: PPUSH
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_VAR 0 4
21522: PPUSH
21523: CALL_OW 297
21527: PUSH
21528: LD_VAR 0 14
21532: GREATER
21533: IFFALSE 21537
// exit ;
21535: GO 22077
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21537: LD_ADDR_VAR 0 12
21541: PUSH
21542: LD_VAR 0 2
21546: PPUSH
21547: LD_VAR 0 3
21551: PPUSH
21552: LD_VAR 0 4
21556: PPUSH
21557: LD_VAR 0 5
21561: PPUSH
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 248
21571: PPUSH
21572: LD_INT 0
21574: PPUSH
21575: CALL 22082 0 6
21579: ST_TO_ADDR
// if not hexes then
21580: LD_VAR 0 12
21584: NOT
21585: IFFALSE 21589
// exit ;
21587: GO 22077
// hex := GetHexInfo ( x , y ) ;
21589: LD_ADDR_VAR 0 15
21593: PUSH
21594: LD_VAR 0 3
21598: PPUSH
21599: LD_VAR 0 4
21603: PPUSH
21604: CALL_OW 546
21608: ST_TO_ADDR
// if hex [ 1 ] then
21609: LD_VAR 0 15
21613: PUSH
21614: LD_INT 1
21616: ARRAY
21617: IFFALSE 21621
// exit ;
21619: GO 22077
// height := hex [ 2 ] ;
21621: LD_ADDR_VAR 0 13
21625: PUSH
21626: LD_VAR 0 15
21630: PUSH
21631: LD_INT 2
21633: ARRAY
21634: ST_TO_ADDR
// for i = 1 to hexes do
21635: LD_ADDR_VAR 0 7
21639: PUSH
21640: DOUBLE
21641: LD_INT 1
21643: DEC
21644: ST_TO_ADDR
21645: LD_VAR 0 12
21649: PUSH
21650: FOR_TO
21651: IFFALSE 21981
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21653: LD_VAR 0 12
21657: PUSH
21658: LD_VAR 0 7
21662: ARRAY
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PPUSH
21668: LD_VAR 0 12
21672: PUSH
21673: LD_VAR 0 7
21677: ARRAY
21678: PUSH
21679: LD_INT 2
21681: ARRAY
21682: PPUSH
21683: CALL_OW 488
21687: NOT
21688: PUSH
21689: LD_VAR 0 12
21693: PUSH
21694: LD_VAR 0 7
21698: ARRAY
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: PPUSH
21704: LD_VAR 0 12
21708: PUSH
21709: LD_VAR 0 7
21713: ARRAY
21714: PUSH
21715: LD_INT 2
21717: ARRAY
21718: PPUSH
21719: CALL_OW 428
21723: PUSH
21724: LD_INT 0
21726: GREATER
21727: OR
21728: PUSH
21729: LD_VAR 0 12
21733: PUSH
21734: LD_VAR 0 7
21738: ARRAY
21739: PUSH
21740: LD_INT 1
21742: ARRAY
21743: PPUSH
21744: LD_VAR 0 12
21748: PUSH
21749: LD_VAR 0 7
21753: ARRAY
21754: PUSH
21755: LD_INT 2
21757: ARRAY
21758: PPUSH
21759: CALL_OW 351
21763: OR
21764: IFFALSE 21770
// exit ;
21766: POP
21767: POP
21768: GO 22077
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21770: LD_ADDR_VAR 0 8
21774: PUSH
21775: LD_VAR 0 12
21779: PUSH
21780: LD_VAR 0 7
21784: ARRAY
21785: PUSH
21786: LD_INT 1
21788: ARRAY
21789: PPUSH
21790: LD_VAR 0 12
21794: PUSH
21795: LD_VAR 0 7
21799: ARRAY
21800: PUSH
21801: LD_INT 2
21803: ARRAY
21804: PPUSH
21805: CALL_OW 546
21809: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21810: LD_VAR 0 8
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PUSH
21819: LD_VAR 0 8
21823: PUSH
21824: LD_INT 2
21826: ARRAY
21827: PUSH
21828: LD_VAR 0 13
21832: PUSH
21833: LD_INT 2
21835: PLUS
21836: GREATER
21837: OR
21838: PUSH
21839: LD_VAR 0 8
21843: PUSH
21844: LD_INT 2
21846: ARRAY
21847: PUSH
21848: LD_VAR 0 13
21852: PUSH
21853: LD_INT 2
21855: MINUS
21856: LESS
21857: OR
21858: PUSH
21859: LD_VAR 0 8
21863: PUSH
21864: LD_INT 3
21866: ARRAY
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 8
21873: PUSH
21874: LD_INT 9
21876: PUSH
21877: LD_INT 10
21879: PUSH
21880: LD_INT 11
21882: PUSH
21883: LD_INT 12
21885: PUSH
21886: LD_INT 13
21888: PUSH
21889: LD_INT 16
21891: PUSH
21892: LD_INT 17
21894: PUSH
21895: LD_INT 18
21897: PUSH
21898: LD_INT 19
21900: PUSH
21901: LD_INT 20
21903: PUSH
21904: LD_INT 21
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: IN
21922: NOT
21923: OR
21924: PUSH
21925: LD_VAR 0 8
21929: PUSH
21930: LD_INT 5
21932: ARRAY
21933: NOT
21934: OR
21935: PUSH
21936: LD_VAR 0 8
21940: PUSH
21941: LD_INT 6
21943: ARRAY
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 2
21950: PUSH
21951: LD_INT 7
21953: PUSH
21954: LD_INT 9
21956: PUSH
21957: LD_INT 10
21959: PUSH
21960: LD_INT 11
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: IN
21971: NOT
21972: OR
21973: IFFALSE 21979
// exit ;
21975: POP
21976: POP
21977: GO 22077
// end ;
21979: GO 21650
21981: POP
21982: POP
// side := GetSide ( depot ) ;
21983: LD_ADDR_VAR 0 9
21987: PUSH
21988: LD_VAR 0 1
21992: PPUSH
21993: CALL_OW 255
21997: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21998: LD_VAR 0 9
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_VAR 0 4
22012: PPUSH
22013: LD_INT 20
22015: PPUSH
22016: CALL 14731 0 4
22020: PUSH
22021: LD_INT 4
22023: ARRAY
22024: IFFALSE 22028
// exit ;
22026: GO 22077
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22028: LD_VAR 0 2
22032: PUSH
22033: LD_INT 29
22035: PUSH
22036: LD_INT 30
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: IN
22043: PUSH
22044: LD_VAR 0 3
22048: PPUSH
22049: LD_VAR 0 4
22053: PPUSH
22054: LD_VAR 0 9
22058: PPUSH
22059: CALL_OW 440
22063: NOT
22064: AND
22065: IFFALSE 22069
// exit ;
22067: GO 22077
// result := true ;
22069: LD_ADDR_VAR 0 6
22073: PUSH
22074: LD_INT 1
22076: ST_TO_ADDR
// end ;
22077: LD_VAR 0 6
22081: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22082: LD_INT 0
22084: PPUSH
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
22093: PPUSH
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
22113: PPUSH
22114: PPUSH
22115: PPUSH
22116: PPUSH
22117: PPUSH
22118: PPUSH
22119: PPUSH
22120: PPUSH
22121: PPUSH
22122: PPUSH
22123: PPUSH
22124: PPUSH
22125: PPUSH
22126: PPUSH
22127: PPUSH
22128: PPUSH
22129: PPUSH
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
22136: PPUSH
22137: PPUSH
22138: PPUSH
22139: PPUSH
22140: PPUSH
22141: PPUSH
// result = [ ] ;
22142: LD_ADDR_VAR 0 7
22146: PUSH
22147: EMPTY
22148: ST_TO_ADDR
// temp_list = [ ] ;
22149: LD_ADDR_VAR 0 9
22153: PUSH
22154: EMPTY
22155: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22156: LD_VAR 0 4
22160: PUSH
22161: LD_INT 0
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 3
22172: PUSH
22173: LD_INT 4
22175: PUSH
22176: LD_INT 5
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: IN
22187: NOT
22188: PUSH
22189: LD_VAR 0 1
22193: PUSH
22194: LD_INT 0
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: IN
22204: PUSH
22205: LD_VAR 0 5
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: LIST
22223: IN
22224: NOT
22225: AND
22226: OR
22227: IFFALSE 22231
// exit ;
22229: GO 40622
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22231: LD_VAR 0 1
22235: PUSH
22236: LD_INT 6
22238: PUSH
22239: LD_INT 7
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: LD_INT 13
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 15
22253: PUSH
22254: LD_INT 11
22256: PUSH
22257: LD_INT 14
22259: PUSH
22260: LD_INT 10
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: IN
22274: IFFALSE 22284
// btype = b_lab ;
22276: LD_ADDR_VAR 0 1
22280: PUSH
22281: LD_INT 6
22283: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22284: LD_VAR 0 6
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 1
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: IN
22303: NOT
22304: PUSH
22305: LD_VAR 0 1
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: LD_INT 6
22324: PUSH
22325: LD_INT 36
22327: PUSH
22328: LD_INT 4
22330: PUSH
22331: LD_INT 5
22333: PUSH
22334: LD_INT 31
22336: PUSH
22337: LD_INT 32
22339: PUSH
22340: LD_INT 33
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: IN
22356: NOT
22357: PUSH
22358: LD_VAR 0 6
22362: PUSH
22363: LD_INT 1
22365: EQUAL
22366: AND
22367: OR
22368: PUSH
22369: LD_VAR 0 1
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 3
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: IN
22384: NOT
22385: PUSH
22386: LD_VAR 0 6
22390: PUSH
22391: LD_INT 2
22393: EQUAL
22394: AND
22395: OR
22396: IFFALSE 22406
// mode = 0 ;
22398: LD_ADDR_VAR 0 6
22402: PUSH
22403: LD_INT 0
22405: ST_TO_ADDR
// case mode of 0 :
22406: LD_VAR 0 6
22410: PUSH
22411: LD_INT 0
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22419
22417: GO 33872
22419: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22420: LD_ADDR_VAR 0 11
22424: PUSH
22425: LD_INT 0
22427: PUSH
22428: LD_INT 0
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 0
22437: PUSH
22438: LD_INT 1
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 1
22489: NEG
22490: PUSH
22491: LD_INT 1
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 2
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 2
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: LD_INT 1
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 3
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 0
22576: PUSH
22577: LD_INT 3
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 1
22586: NEG
22587: PUSH
22588: LD_INT 2
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22613: LD_ADDR_VAR 0 12
22617: PUSH
22618: LD_INT 0
22620: PUSH
22621: LD_INT 0
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 0
22630: PUSH
22631: LD_INT 1
22633: NEG
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 1
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 0
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 1
22682: NEG
22683: PUSH
22684: LD_INT 1
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 1
22697: NEG
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: NEG
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 3
22770: NEG
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 3
22781: NEG
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22809: LD_ADDR_VAR 0 13
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 0
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 0
22857: PUSH
22858: LD_INT 1
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: NEG
22868: PUSH
22869: LD_INT 0
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 1
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: NEG
22891: PUSH
22892: LD_INT 2
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 1
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: LD_INT 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 2
22932: NEG
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 2
22944: NEG
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: LD_INT 3
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 3
22968: NEG
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 3
22980: NEG
22981: PUSH
22982: LD_INT 3
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23008: LD_ADDR_VAR 0 14
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: LD_INT 1
23028: NEG
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: NEG
23078: PUSH
23079: LD_INT 1
23081: NEG
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 1
23089: NEG
23090: PUSH
23091: LD_INT 2
23093: NEG
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: LD_INT 2
23104: NEG
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 2
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 2
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 1
23154: NEG
23155: PUSH
23156: LD_INT 3
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: LD_INT 3
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23204: LD_ADDR_VAR 0 15
23208: PUSH
23209: LD_INT 0
23211: PUSH
23212: LD_INT 0
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: LD_INT 1
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: NEG
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: LD_INT 1
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: NEG
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 1
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: LD_INT 1
23353: NEG
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: LD_INT 1
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23397: LD_ADDR_VAR 0 16
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: LD_INT 1
23417: NEG
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: LD_INT 0
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: LD_INT 1
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 0
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: NEG
23479: PUSH
23480: LD_INT 2
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: LD_INT 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 2
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 3
23554: PUSH
23555: LD_INT 3
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 3
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23590: LD_ADDR_VAR 0 17
23594: PUSH
23595: LD_INT 0
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 1
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: NEG
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: LD_INT 2
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: LD_INT 1
23697: NEG
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: LD_INT 0
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 2
23725: PUSH
23726: LD_INT 2
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 2
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: LD_INT 1
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 1
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 2
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23820: LD_ADDR_VAR 0 18
23824: PUSH
23825: LD_INT 0
23827: PUSH
23828: LD_INT 0
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 0
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 0
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 1
23889: NEG
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: LD_INT 2
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 2
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: LD_INT 2
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 2
23996: NEG
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24050: LD_ADDR_VAR 0 19
24054: PUSH
24055: LD_INT 0
24057: PUSH
24058: LD_INT 0
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 0
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 0
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 1
24119: NEG
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: NEG
24132: PUSH
24133: LD_INT 2
24135: NEG
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 0
24143: PUSH
24144: LD_INT 2
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 2
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 2
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 2
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 2
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: LD_INT 1
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 2
24226: NEG
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: NEG
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: LD_INT 2
24253: NEG
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24280: LD_ADDR_VAR 0 20
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: LD_INT 1
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 1
24338: NEG
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 1
24349: NEG
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 2
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 1
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 2
24395: PUSH
24396: LD_INT 0
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 2
24415: PUSH
24416: LD_INT 2
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 2
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: NEG
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: NEG
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: NEG
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24510: LD_ADDR_VAR 0 21
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 1
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: LD_INT 1
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PUSH
24556: LD_INT 0
24558: PUSH
24559: LD_INT 1
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: LD_INT 2
24595: NEG
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 2
24606: NEG
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 1
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: LD_INT 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 1
24655: PUSH
24656: LD_INT 2
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 0
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: NEG
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24740: LD_ADDR_VAR 0 22
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 0
24757: PUSH
24758: LD_INT 1
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 0
24788: PUSH
24789: LD_INT 1
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 0
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: LD_INT 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: PUSH
24886: LD_INT 2
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: NEG
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: NEG
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24970: LD_ADDR_VAR 0 23
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: LD_INT 0
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 2
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 0
25063: PUSH
25064: LD_INT 2
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 2
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: LD_INT 2
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: LD_INT 3
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 3
25197: NEG
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 1
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 2
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25250: LD_ADDR_VAR 0 24
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: LD_INT 1
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: PUSH
25296: LD_INT 0
25298: PUSH
25299: LD_INT 1
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: NEG
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: LD_INT 2
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 0
25343: PUSH
25344: LD_INT 2
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 0
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 0
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 2
25437: NEG
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: NEG
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 2
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25526: LD_ADDR_VAR 0 25
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: NEG
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: LD_INT 2
25729: NEG
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 3
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: LD_INT 3
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: LD_INT 3
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25800: LD_ADDR_VAR 0 26
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 1
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: LD_INT 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: LD_INT 1
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 1
25858: NEG
25859: PUSH
25860: LD_INT 0
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: NEG
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: LD_INT 2
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: NEG
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 2
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: NEG
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: NEG
26000: PUSH
26001: LD_INT 2
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: LD_INT 1
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26076: LD_ADDR_VAR 0 27
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 2
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: LD_INT 2
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 3
26309: NEG
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26356: LD_ADDR_VAR 0 28
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 0
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: NEG
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: NEG
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: NEG
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 2
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: NEG
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 3
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: LD_INT 3
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 3
26591: NEG
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 3
26603: NEG
26604: PUSH
26605: LD_INT 2
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26638: LD_ADDR_VAR 0 29
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: LD_INT 1
26808: NEG
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: NEG
26817: PUSH
26818: LD_INT 2
26820: NEG
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 3
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 3
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 3
26882: NEG
26883: PUSH
26884: LD_INT 2
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26917: LD_ADDR_VAR 0 30
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: NEG
26999: PUSH
27000: LD_INT 2
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 0
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 2
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: LD_INT 3
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: LD_INT 3
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 3
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27195: LD_ADDR_VAR 0 31
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 1
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: NEG
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 2
27360: NEG
27361: PUSH
27362: LD_INT 1
27364: NEG
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: LD_INT 2
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 3
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 3
27438: NEG
27439: PUSH
27440: LD_INT 2
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27473: LD_ADDR_VAR 0 32
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 0
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 1
27554: NEG
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 2
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 2
27650: NEG
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 2
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: NEG
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 3
27716: NEG
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27751: LD_ADDR_VAR 0 33
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: LD_INT 1
27771: NEG
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: NEG
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 2
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 2
27906: NEG
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: LD_INT 2
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: NEG
27942: PUSH
27943: LD_INT 3
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 3
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 3
27995: NEG
27996: PUSH
27997: LD_INT 2
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28030: LD_ADDR_VAR 0 34
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 0
28047: PUSH
28048: LD_INT 1
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: LD_INT 1
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 1
28099: NEG
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 0
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: LD_INT 1
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 2
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 1
28175: NEG
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: NEG
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: LD_INT 3
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 3
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28310: LD_ADDR_VAR 0 35
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 0
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 1
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 2
28401: NEG
28402: PUSH
28403: LD_INT 1
28405: NEG
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28422: LD_ADDR_VAR 0 36
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28534: LD_ADDR_VAR 0 37
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: NEG
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 1
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28646: LD_ADDR_VAR 0 38
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 1
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: NEG
28716: PUSH
28717: LD_INT 1
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 2
28737: NEG
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28758: LD_ADDR_VAR 0 39
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 1
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: LD_INT 1
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 1
28816: NEG
28817: PUSH
28818: LD_INT 0
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: NEG
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 2
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28870: LD_ADDR_VAR 0 40
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 1
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: NEG
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28982: LD_ADDR_VAR 0 41
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 0
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 2
29067: NEG
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 1
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 2
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 2
29096: PUSH
29097: LD_INT 1
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 2
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: LD_INT 2
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 1
29126: NEG
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 2
29160: NEG
29161: PUSH
29162: LD_INT 2
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: LD_INT 3
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 3
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 3
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 3
29225: PUSH
29226: LD_INT 3
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 3
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 3
29256: NEG
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 3
29279: NEG
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 3
29291: NEG
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29332: LD_ADDR_VAR 0 42
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: LD_INT 1
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: LD_INT 2
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: LD_INT 3
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: LD_INT 3
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 3
29549: NEG
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: LD_INT 2
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 3
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 3
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 3
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 3
29629: NEG
29630: PUSH
29631: LD_INT 2
29633: NEG
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: LD_INT 3
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29682: LD_ADDR_VAR 0 43
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 0
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 2
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 2
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 3
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 2
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 2
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 3
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: LD_INT 3
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 3
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30030: LD_ADDR_VAR 0 44
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: LD_INT 2
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 2
30185: NEG
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: LD_INT 2
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: LD_INT 3
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 3
30243: PUSH
30244: LD_INT 0
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 3
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 3
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 3
30315: NEG
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: NEG
30328: PUSH
30329: LD_INT 2
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: NEG
30340: PUSH
30341: LD_INT 3
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30380: LD_ADDR_VAR 0 45
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 0
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: LD_INT 2
30465: NEG
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 2
30476: NEG
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 2
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: LD_INT 2
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: NEG
30559: PUSH
30560: LD_INT 2
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 2
30570: NEG
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: LD_INT 3
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: LD_INT 3
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: LD_INT 2
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: LD_INT 3
30693: NEG
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30730: LD_ADDR_VAR 0 46
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: NEG
30812: PUSH
30813: LD_INT 2
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 0
30823: PUSH
30824: LD_INT 2
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 3
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 2
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: LD_INT 2
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 3
31037: NEG
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31078: LD_ADDR_VAR 0 47
31082: PUSH
31083: LD_INT 0
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: LD_INT 1
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 1
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 0
31171: PUSH
31172: LD_INT 2
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 2
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31229: LD_ADDR_VAR 0 48
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: NEG
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 0
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 1
31336: NEG
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_INT 2
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31376: LD_ADDR_VAR 0 49
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 1
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 2
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31520: LD_ADDR_VAR 0 50
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 0
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 2
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31664: LD_ADDR_VAR 0 51
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 2
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 1
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31811: LD_ADDR_VAR 0 52
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 2
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: NEG
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31962: LD_ADDR_VAR 0 53
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 2
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 2
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 2
32138: NEG
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32192: LD_ADDR_VAR 0 54
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32422: LD_ADDR_VAR 0 55
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: NEG
32504: PUSH
32505: LD_INT 2
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 2
32598: NEG
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 1
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32652: LD_ADDR_VAR 0 56
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: NEG
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 1
32733: NEG
32734: PUSH
32735: LD_INT 2
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: LD_INT 1
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: NEG
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32882: LD_ADDR_VAR 0 57
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 0
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33112: LD_ADDR_VAR 0 58
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: NEG
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 2
33208: NEG
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33342: LD_ADDR_VAR 0 59
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 0
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33430: LD_ADDR_VAR 0 60
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33518: LD_ADDR_VAR 0 61
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 0
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33606: LD_ADDR_VAR 0 62
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33694: LD_ADDR_VAR 0 63
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33782: LD_ADDR_VAR 0 64
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: ST_TO_ADDR
// end ; 1 :
33870: GO 39767
33872: LD_INT 1
33874: DOUBLE
33875: EQUAL
33876: IFTRUE 33880
33878: GO 36503
33880: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33881: LD_ADDR_VAR 0 11
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 3
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 3
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33925: LD_ADDR_VAR 0 12
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 3
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: LIST
33965: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33966: LD_ADDR_VAR 0 13
33970: PUSH
33971: LD_INT 3
33973: PUSH
33974: LD_INT 2
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 3
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34006: LD_ADDR_VAR 0 14
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34047: LD_ADDR_VAR 0 15
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 3
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 3
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34091: LD_ADDR_VAR 0 16
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: LD_INT 3
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: LIST
34136: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34137: LD_ADDR_VAR 0 17
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: LD_INT 3
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34181: LD_ADDR_VAR 0 18
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 3
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34222: LD_ADDR_VAR 0 19
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 3
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34262: LD_ADDR_VAR 0 20
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 3
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34303: LD_ADDR_VAR 0 21
34307: PUSH
34308: LD_INT 2
34310: NEG
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34347: LD_ADDR_VAR 0 22
34351: PUSH
34352: LD_INT 2
34354: NEG
34355: PUSH
34356: LD_INT 3
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 3
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: NEG
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34393: LD_ADDR_VAR 0 23
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 3
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: LD_INT 4
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 3
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34437: LD_ADDR_VAR 0 24
34441: PUSH
34442: LD_INT 3
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 4
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34478: LD_ADDR_VAR 0 25
34482: PUSH
34483: LD_INT 3
34485: PUSH
34486: LD_INT 3
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 4
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 3
34505: PUSH
34506: LD_INT 4
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34518: LD_ADDR_VAR 0 26
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 3
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: LD_INT 4
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: LD_INT 3
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34559: LD_ADDR_VAR 0 27
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 3
34577: NEG
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 4
34588: NEG
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34603: LD_ADDR_VAR 0 28
34607: PUSH
34608: LD_INT 3
34610: NEG
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: LD_INT 4
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 4
34634: NEG
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34649: LD_ADDR_VAR 0 29
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 3
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 3
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 2
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 4
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 4
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 5
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 5
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 4
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 6
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 6
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 5
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34804: LD_ADDR_VAR 0 30
34808: PUSH
34809: LD_INT 2
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 3
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 3
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 4
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 4
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 4
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 5
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 5
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 6
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 6
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34947: LD_ADDR_VAR 0 31
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: LD_INT 3
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: LD_INT 4
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: LD_INT 5
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: LD_INT 5
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 6
35044: PUSH
35045: LD_INT 5
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 6
35054: PUSH
35055: LD_INT 6
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 5
35064: PUSH
35065: LD_INT 6
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35086: LD_ADDR_VAR 0 32
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 3
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 4
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 4
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 3
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 5
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 5
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 4
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 6
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 6
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: LD_INT 5
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35229: LD_ADDR_VAR 0 33
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 3
35247: NEG
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: LD_INT 4
35281: NEG
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 4
35292: NEG
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 4
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 5
35315: NEG
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 5
35326: NEG
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 5
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 6
35349: NEG
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 6
35360: NEG
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35384: LD_ADDR_VAR 0 34
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 3
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 3
35403: NEG
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 3
35415: NEG
35416: PUSH
35417: LD_INT 3
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 3
35427: NEG
35428: PUSH
35429: LD_INT 4
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 4
35439: NEG
35440: PUSH
35441: LD_INT 3
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 4
35451: NEG
35452: PUSH
35453: LD_INT 4
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 4
35463: NEG
35464: PUSH
35465: LD_INT 5
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 5
35475: NEG
35476: PUSH
35477: LD_INT 4
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 5
35487: NEG
35488: PUSH
35489: LD_INT 5
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 5
35499: NEG
35500: PUSH
35501: LD_INT 6
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 6
35511: NEG
35512: PUSH
35513: LD_INT 5
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 6
35523: NEG
35524: PUSH
35525: LD_INT 6
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35547: LD_ADDR_VAR 0 41
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: LD_INT 3
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35591: LD_ADDR_VAR 0 42
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 3
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: LIST
35631: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35632: LD_ADDR_VAR 0 43
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 3
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35672: LD_ADDR_VAR 0 44
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35713: LD_ADDR_VAR 0 45
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 3
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: LIST
35756: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35757: LD_ADDR_VAR 0 46
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: LD_INT 3
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 3
35788: NEG
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35803: LD_ADDR_VAR 0 47
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: LD_INT 3
35814: NEG
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 3
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35836: LD_ADDR_VAR 0 48
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35867: LD_ADDR_VAR 0 49
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 3
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35896: LD_ADDR_VAR 0 50
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: LD_INT 3
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 3
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35925: LD_ADDR_VAR 0 51
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: NEG
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35956: LD_ADDR_VAR 0 52
35960: PUSH
35961: LD_INT 3
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 3
35975: NEG
35976: PUSH
35977: LD_INT 2
35979: NEG
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35989: LD_ADDR_VAR 0 53
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 3
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 3
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36033: LD_ADDR_VAR 0 54
36037: PUSH
36038: LD_INT 2
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 3
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36074: LD_ADDR_VAR 0 55
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36114: LD_ADDR_VAR 0 56
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 3
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36155: LD_ADDR_VAR 0 57
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: NEG
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36199: LD_ADDR_VAR 0 58
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: LD_INT 3
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 3
36218: NEG
36219: PUSH
36220: LD_INT 2
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 3
36230: NEG
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36245: LD_ADDR_VAR 0 59
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36289: LD_ADDR_VAR 0 60
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: LIST
36329: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36330: LD_ADDR_VAR 0 61
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36370: LD_ADDR_VAR 0 62
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36411: LD_ADDR_VAR 0 63
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36455: LD_ADDR_VAR 0 64
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// end ; 2 :
36501: GO 39767
36503: LD_INT 2
36505: DOUBLE
36506: EQUAL
36507: IFTRUE 36511
36509: GO 39766
36511: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36512: LD_ADDR_VAR 0 29
36516: PUSH
36517: LD_INT 4
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 4
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 5
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 5
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 4
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 3
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 3
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 5
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 3
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 3
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 4
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 4
36642: PUSH
36643: LD_INT 4
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 3
36652: PUSH
36653: LD_INT 4
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 4
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: PUSH
36693: LD_INT 4
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 4
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 3
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: LD_INT 4
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 5
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: LD_INT 4
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 5
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: LD_INT 3
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 3
36795: NEG
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 3
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 2
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 3
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 4
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 4
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 4
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 4
36897: NEG
36898: PUSH
36899: LD_INT 4
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 4
36909: NEG
36910: PUSH
36911: LD_INT 5
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 3
36921: NEG
36922: PUSH
36923: LD_INT 4
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 3
36933: NEG
36934: PUSH
36935: LD_INT 3
36937: NEG
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 4
36945: NEG
36946: PUSH
36947: LD_INT 3
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 5
36957: NEG
36958: PUSH
36959: LD_INT 4
36961: NEG
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 5
36969: NEG
36970: PUSH
36971: LD_INT 5
36973: NEG
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: LD_INT 5
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 5
36993: NEG
36994: PUSH
36995: LD_INT 3
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37050: LD_ADDR_VAR 0 30
37054: PUSH
37055: LD_INT 4
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 4
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 5
37077: PUSH
37078: LD_INT 4
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 5
37087: PUSH
37088: LD_INT 5
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 4
37097: PUSH
37098: LD_INT 5
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: LD_INT 4
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 3
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 5
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: LD_INT 5
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: LD_INT 3
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: LD_INT 4
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: LD_INT 4
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 4
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 4
37240: NEG
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 4
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 4
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 5
37296: NEG
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 5
37307: NEG
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 5
37319: NEG
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 3
37331: NEG
37332: PUSH
37333: LD_INT 2
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 3
37342: NEG
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 3
37354: NEG
37355: PUSH
37356: LD_INT 4
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: LD_INT 3
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 2
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 3
37390: NEG
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 4
37402: NEG
37403: PUSH
37404: LD_INT 3
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 4
37414: NEG
37415: PUSH
37416: LD_INT 4
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: NEG
37427: PUSH
37428: LD_INT 4
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 4
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 4
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: LD_INT 5
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 4
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 3
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 3
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: LD_INT 4
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 5
37521: NEG
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: NEG
37541: PUSH
37542: LD_INT 5
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37597: LD_ADDR_VAR 0 31
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 4
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: LD_INT 5
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 5
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: LD_INT 4
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: LD_INT 3
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 5
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: LD_INT 3
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 3
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: NEG
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 4
37753: NEG
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 4
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 4
37776: NEG
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 4
37799: NEG
37800: PUSH
37801: LD_INT 4
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 4
37811: NEG
37812: PUSH
37813: LD_INT 5
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 3
37823: NEG
37824: PUSH
37825: LD_INT 4
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 4
37847: NEG
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 5
37859: NEG
37860: PUSH
37861: LD_INT 4
37863: NEG
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 5
37871: NEG
37872: PUSH
37873: LD_INT 5
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: NEG
37884: PUSH
37885: LD_INT 5
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 5
37895: NEG
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: LD_INT 4
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 3
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 4
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 4
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 4
38009: PUSH
38010: LD_INT 0
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 4
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 5
38030: PUSH
38031: LD_INT 0
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 5
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 4
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 3
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 5
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38147: LD_ADDR_VAR 0 32
38151: PUSH
38152: LD_INT 4
38154: NEG
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 4
38165: NEG
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 3
38177: NEG
38178: PUSH
38179: LD_INT 0
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 3
38188: NEG
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 4
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 5
38210: NEG
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 5
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 5
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: LD_INT 4
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 4
38316: NEG
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 4
38328: NEG
38329: PUSH
38330: LD_INT 4
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 4
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 4
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 4
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 5
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 4
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 3
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 4
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 5
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 5
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 4
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 4
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 4
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 4
38559: PUSH
38560: LD_INT 4
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 4
38569: PUSH
38570: LD_INT 3
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 5
38579: PUSH
38580: LD_INT 4
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 5
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 4
38599: PUSH
38600: LD_INT 5
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: LD_INT 4
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 5
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 5
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38694: LD_ADDR_VAR 0 33
38698: PUSH
38699: LD_INT 4
38701: NEG
38702: PUSH
38703: LD_INT 4
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 4
38713: NEG
38714: PUSH
38715: LD_INT 5
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: LD_INT 4
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 3
38737: NEG
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 4
38749: NEG
38750: PUSH
38751: LD_INT 3
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 5
38761: NEG
38762: PUSH
38763: LD_INT 4
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 5
38773: NEG
38774: PUSH
38775: LD_INT 5
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: LD_INT 5
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 5
38797: NEG
38798: PUSH
38799: LD_INT 3
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: LD_INT 3
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 4
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 3
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: LD_INT 4
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 2
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: LD_INT 4
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 4
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 5
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 5
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 4
38952: PUSH
38953: LD_INT 1
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 3
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 5
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 3
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: LD_INT 3
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 4
39034: PUSH
39035: LD_INT 4
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: PUSH
39045: LD_INT 4
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 4
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 4
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 4
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 3
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 4
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: PUSH
39125: LD_INT 5
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 0
39134: PUSH
39135: LD_INT 5
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: LD_INT 4
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 5
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39232: LD_ADDR_VAR 0 34
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: LD_INT 4
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 5
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 4
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 4
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 5
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: LD_INT 5
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 3
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 4
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 4
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 4
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 4
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 5
39454: PUSH
39455: LD_INT 4
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 5
39464: PUSH
39465: LD_INT 5
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: LD_INT 5
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 5
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 3
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 4
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 4
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 4
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 4
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 5
39673: NEG
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 5
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 5
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 3
39708: NEG
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: ST_TO_ADDR
// end ; end ;
39764: GO 39767
39766: POP
// case btype of b_depot , b_warehouse :
39767: LD_VAR 0 1
39771: PUSH
39772: LD_INT 0
39774: DOUBLE
39775: EQUAL
39776: IFTRUE 39786
39778: LD_INT 1
39780: DOUBLE
39781: EQUAL
39782: IFTRUE 39786
39784: GO 39987
39786: POP
// case nation of nation_american :
39787: LD_VAR 0 5
39791: PUSH
39792: LD_INT 1
39794: DOUBLE
39795: EQUAL
39796: IFTRUE 39800
39798: GO 39856
39800: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39801: LD_ADDR_VAR 0 9
39805: PUSH
39806: LD_VAR 0 11
39810: PUSH
39811: LD_VAR 0 12
39815: PUSH
39816: LD_VAR 0 13
39820: PUSH
39821: LD_VAR 0 14
39825: PUSH
39826: LD_VAR 0 15
39830: PUSH
39831: LD_VAR 0 16
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: PUSH
39844: LD_VAR 0 4
39848: PUSH
39849: LD_INT 1
39851: PLUS
39852: ARRAY
39853: ST_TO_ADDR
39854: GO 39985
39856: LD_INT 2
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39864
39862: GO 39920
39864: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39865: LD_ADDR_VAR 0 9
39869: PUSH
39870: LD_VAR 0 17
39874: PUSH
39875: LD_VAR 0 18
39879: PUSH
39880: LD_VAR 0 19
39884: PUSH
39885: LD_VAR 0 20
39889: PUSH
39890: LD_VAR 0 21
39894: PUSH
39895: LD_VAR 0 22
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: PUSH
39908: LD_VAR 0 4
39912: PUSH
39913: LD_INT 1
39915: PLUS
39916: ARRAY
39917: ST_TO_ADDR
39918: GO 39985
39920: LD_INT 3
39922: DOUBLE
39923: EQUAL
39924: IFTRUE 39928
39926: GO 39984
39928: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39929: LD_ADDR_VAR 0 9
39933: PUSH
39934: LD_VAR 0 23
39938: PUSH
39939: LD_VAR 0 24
39943: PUSH
39944: LD_VAR 0 25
39948: PUSH
39949: LD_VAR 0 26
39953: PUSH
39954: LD_VAR 0 27
39958: PUSH
39959: LD_VAR 0 28
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: PUSH
39972: LD_VAR 0 4
39976: PUSH
39977: LD_INT 1
39979: PLUS
39980: ARRAY
39981: ST_TO_ADDR
39982: GO 39985
39984: POP
39985: GO 40540
39987: LD_INT 2
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 40001
39993: LD_INT 3
39995: DOUBLE
39996: EQUAL
39997: IFTRUE 40001
39999: GO 40057
40001: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40002: LD_ADDR_VAR 0 9
40006: PUSH
40007: LD_VAR 0 29
40011: PUSH
40012: LD_VAR 0 30
40016: PUSH
40017: LD_VAR 0 31
40021: PUSH
40022: LD_VAR 0 32
40026: PUSH
40027: LD_VAR 0 33
40031: PUSH
40032: LD_VAR 0 34
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: PUSH
40045: LD_VAR 0 4
40049: PUSH
40050: LD_INT 1
40052: PLUS
40053: ARRAY
40054: ST_TO_ADDR
40055: GO 40540
40057: LD_INT 16
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40119
40063: LD_INT 17
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40119
40069: LD_INT 18
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40119
40075: LD_INT 19
40077: DOUBLE
40078: EQUAL
40079: IFTRUE 40119
40081: LD_INT 22
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40119
40087: LD_INT 20
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40119
40093: LD_INT 21
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40119
40099: LD_INT 23
40101: DOUBLE
40102: EQUAL
40103: IFTRUE 40119
40105: LD_INT 24
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40119
40111: LD_INT 25
40113: DOUBLE
40114: EQUAL
40115: IFTRUE 40119
40117: GO 40175
40119: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40120: LD_ADDR_VAR 0 9
40124: PUSH
40125: LD_VAR 0 35
40129: PUSH
40130: LD_VAR 0 36
40134: PUSH
40135: LD_VAR 0 37
40139: PUSH
40140: LD_VAR 0 38
40144: PUSH
40145: LD_VAR 0 39
40149: PUSH
40150: LD_VAR 0 40
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: PUSH
40163: LD_VAR 0 4
40167: PUSH
40168: LD_INT 1
40170: PLUS
40171: ARRAY
40172: ST_TO_ADDR
40173: GO 40540
40175: LD_INT 6
40177: DOUBLE
40178: EQUAL
40179: IFTRUE 40231
40181: LD_INT 7
40183: DOUBLE
40184: EQUAL
40185: IFTRUE 40231
40187: LD_INT 8
40189: DOUBLE
40190: EQUAL
40191: IFTRUE 40231
40193: LD_INT 13
40195: DOUBLE
40196: EQUAL
40197: IFTRUE 40231
40199: LD_INT 12
40201: DOUBLE
40202: EQUAL
40203: IFTRUE 40231
40205: LD_INT 15
40207: DOUBLE
40208: EQUAL
40209: IFTRUE 40231
40211: LD_INT 11
40213: DOUBLE
40214: EQUAL
40215: IFTRUE 40231
40217: LD_INT 14
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40231
40223: LD_INT 10
40225: DOUBLE
40226: EQUAL
40227: IFTRUE 40231
40229: GO 40287
40231: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40232: LD_ADDR_VAR 0 9
40236: PUSH
40237: LD_VAR 0 41
40241: PUSH
40242: LD_VAR 0 42
40246: PUSH
40247: LD_VAR 0 43
40251: PUSH
40252: LD_VAR 0 44
40256: PUSH
40257: LD_VAR 0 45
40261: PUSH
40262: LD_VAR 0 46
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: PUSH
40275: LD_VAR 0 4
40279: PUSH
40280: LD_INT 1
40282: PLUS
40283: ARRAY
40284: ST_TO_ADDR
40285: GO 40540
40287: LD_INT 36
40289: DOUBLE
40290: EQUAL
40291: IFTRUE 40295
40293: GO 40351
40295: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40296: LD_ADDR_VAR 0 9
40300: PUSH
40301: LD_VAR 0 47
40305: PUSH
40306: LD_VAR 0 48
40310: PUSH
40311: LD_VAR 0 49
40315: PUSH
40316: LD_VAR 0 50
40320: PUSH
40321: LD_VAR 0 51
40325: PUSH
40326: LD_VAR 0 52
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: PUSH
40339: LD_VAR 0 4
40343: PUSH
40344: LD_INT 1
40346: PLUS
40347: ARRAY
40348: ST_TO_ADDR
40349: GO 40540
40351: LD_INT 4
40353: DOUBLE
40354: EQUAL
40355: IFTRUE 40377
40357: LD_INT 5
40359: DOUBLE
40360: EQUAL
40361: IFTRUE 40377
40363: LD_INT 34
40365: DOUBLE
40366: EQUAL
40367: IFTRUE 40377
40369: LD_INT 37
40371: DOUBLE
40372: EQUAL
40373: IFTRUE 40377
40375: GO 40433
40377: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40378: LD_ADDR_VAR 0 9
40382: PUSH
40383: LD_VAR 0 53
40387: PUSH
40388: LD_VAR 0 54
40392: PUSH
40393: LD_VAR 0 55
40397: PUSH
40398: LD_VAR 0 56
40402: PUSH
40403: LD_VAR 0 57
40407: PUSH
40408: LD_VAR 0 58
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: PUSH
40421: LD_VAR 0 4
40425: PUSH
40426: LD_INT 1
40428: PLUS
40429: ARRAY
40430: ST_TO_ADDR
40431: GO 40540
40433: LD_INT 31
40435: DOUBLE
40436: EQUAL
40437: IFTRUE 40483
40439: LD_INT 32
40441: DOUBLE
40442: EQUAL
40443: IFTRUE 40483
40445: LD_INT 33
40447: DOUBLE
40448: EQUAL
40449: IFTRUE 40483
40451: LD_INT 27
40453: DOUBLE
40454: EQUAL
40455: IFTRUE 40483
40457: LD_INT 26
40459: DOUBLE
40460: EQUAL
40461: IFTRUE 40483
40463: LD_INT 28
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40483
40469: LD_INT 29
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40483
40475: LD_INT 30
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40539
40483: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40484: LD_ADDR_VAR 0 9
40488: PUSH
40489: LD_VAR 0 59
40493: PUSH
40494: LD_VAR 0 60
40498: PUSH
40499: LD_VAR 0 61
40503: PUSH
40504: LD_VAR 0 62
40508: PUSH
40509: LD_VAR 0 63
40513: PUSH
40514: LD_VAR 0 64
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: PUSH
40527: LD_VAR 0 4
40531: PUSH
40532: LD_INT 1
40534: PLUS
40535: ARRAY
40536: ST_TO_ADDR
40537: GO 40540
40539: POP
// temp_list2 = [ ] ;
40540: LD_ADDR_VAR 0 10
40544: PUSH
40545: EMPTY
40546: ST_TO_ADDR
// for i in temp_list do
40547: LD_ADDR_VAR 0 8
40551: PUSH
40552: LD_VAR 0 9
40556: PUSH
40557: FOR_IN
40558: IFFALSE 40610
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40560: LD_ADDR_VAR 0 10
40564: PUSH
40565: LD_VAR 0 10
40569: PUSH
40570: LD_VAR 0 8
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: PUSH
40579: LD_VAR 0 2
40583: PLUS
40584: PUSH
40585: LD_VAR 0 8
40589: PUSH
40590: LD_INT 2
40592: ARRAY
40593: PUSH
40594: LD_VAR 0 3
40598: PLUS
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: ADD
40607: ST_TO_ADDR
40608: GO 40557
40610: POP
40611: POP
// result = temp_list2 ;
40612: LD_ADDR_VAR 0 7
40616: PUSH
40617: LD_VAR 0 10
40621: ST_TO_ADDR
// end ;
40622: LD_VAR 0 7
40626: RET
// export function EnemyInRange ( unit , dist ) ; begin
40627: LD_INT 0
40629: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_VAR 0 1
40639: PPUSH
40640: CALL_OW 255
40644: PPUSH
40645: LD_VAR 0 1
40649: PPUSH
40650: CALL_OW 250
40654: PPUSH
40655: LD_VAR 0 1
40659: PPUSH
40660: CALL_OW 251
40664: PPUSH
40665: LD_VAR 0 2
40669: PPUSH
40670: CALL 14731 0 4
40674: PUSH
40675: LD_INT 4
40677: ARRAY
40678: ST_TO_ADDR
// end ;
40679: LD_VAR 0 3
40683: RET
// export function PlayerSeeMe ( unit ) ; begin
40684: LD_INT 0
40686: PPUSH
// result := See ( your_side , unit ) ;
40687: LD_ADDR_VAR 0 2
40691: PUSH
40692: LD_OWVAR 2
40696: PPUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: CALL_OW 292
40706: ST_TO_ADDR
// end ;
40707: LD_VAR 0 2
40711: RET
// export function ReverseDir ( unit ) ; begin
40712: LD_INT 0
40714: PPUSH
// if not unit then
40715: LD_VAR 0 1
40719: NOT
40720: IFFALSE 40724
// exit ;
40722: GO 40747
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40724: LD_ADDR_VAR 0 2
40728: PUSH
40729: LD_VAR 0 1
40733: PPUSH
40734: CALL_OW 254
40738: PUSH
40739: LD_INT 3
40741: PLUS
40742: PUSH
40743: LD_INT 6
40745: MOD
40746: ST_TO_ADDR
// end ;
40747: LD_VAR 0 2
40751: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40752: LD_INT 0
40754: PPUSH
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
// if not hexes then
40759: LD_VAR 0 2
40763: NOT
40764: IFFALSE 40768
// exit ;
40766: GO 40916
// dist := 9999 ;
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: LD_INT 9999
40775: ST_TO_ADDR
// for i = 1 to hexes do
40776: LD_ADDR_VAR 0 4
40780: PUSH
40781: DOUBLE
40782: LD_INT 1
40784: DEC
40785: ST_TO_ADDR
40786: LD_VAR 0 2
40790: PUSH
40791: FOR_TO
40792: IFFALSE 40904
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40794: LD_VAR 0 1
40798: PPUSH
40799: LD_VAR 0 2
40803: PUSH
40804: LD_VAR 0 4
40808: ARRAY
40809: PUSH
40810: LD_INT 1
40812: ARRAY
40813: PPUSH
40814: LD_VAR 0 2
40818: PUSH
40819: LD_VAR 0 4
40823: ARRAY
40824: PUSH
40825: LD_INT 2
40827: ARRAY
40828: PPUSH
40829: CALL_OW 297
40833: PUSH
40834: LD_VAR 0 5
40838: LESS
40839: IFFALSE 40902
// begin hex := hexes [ i ] ;
40841: LD_ADDR_VAR 0 7
40845: PUSH
40846: LD_VAR 0 2
40850: PUSH
40851: LD_VAR 0 4
40855: ARRAY
40856: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40857: LD_ADDR_VAR 0 5
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: LD_VAR 0 2
40871: PUSH
40872: LD_VAR 0 4
40876: ARRAY
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: PPUSH
40882: LD_VAR 0 2
40886: PUSH
40887: LD_VAR 0 4
40891: ARRAY
40892: PUSH
40893: LD_INT 2
40895: ARRAY
40896: PPUSH
40897: CALL_OW 297
40901: ST_TO_ADDR
// end ; end ;
40902: GO 40791
40904: POP
40905: POP
// result := hex ;
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_VAR 0 7
40915: ST_TO_ADDR
// end ;
40916: LD_VAR 0 3
40920: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40921: LD_INT 0
40923: PPUSH
40924: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40925: LD_VAR 0 1
40929: NOT
40930: PUSH
40931: LD_VAR 0 1
40935: PUSH
40936: LD_INT 21
40938: PUSH
40939: LD_INT 2
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 23
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PPUSH
40960: CALL_OW 69
40964: IN
40965: NOT
40966: OR
40967: IFFALSE 40971
// exit ;
40969: GO 41018
// for i = 1 to 3 do
40971: LD_ADDR_VAR 0 3
40975: PUSH
40976: DOUBLE
40977: LD_INT 1
40979: DEC
40980: ST_TO_ADDR
40981: LD_INT 3
40983: PUSH
40984: FOR_TO
40985: IFFALSE 41016
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40987: LD_VAR 0 1
40991: PPUSH
40992: CALL_OW 250
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: CALL_OW 251
41006: PPUSH
41007: LD_INT 1
41009: PPUSH
41010: CALL_OW 453
41014: GO 40984
41016: POP
41017: POP
// end ;
41018: LD_VAR 0 2
41022: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41023: LD_INT 0
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41031: LD_VAR 0 1
41035: NOT
41036: PUSH
41037: LD_VAR 0 2
41041: NOT
41042: OR
41043: PUSH
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 314
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41499
// x := GetX ( enemy_unit ) ;
41058: LD_ADDR_VAR 0 7
41062: PUSH
41063: LD_VAR 0 2
41067: PPUSH
41068: CALL_OW 250
41072: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41073: LD_ADDR_VAR 0 8
41077: PUSH
41078: LD_VAR 0 2
41082: PPUSH
41083: CALL_OW 251
41087: ST_TO_ADDR
// if not x or not y then
41088: LD_VAR 0 7
41092: NOT
41093: PUSH
41094: LD_VAR 0 8
41098: NOT
41099: OR
41100: IFFALSE 41104
// exit ;
41102: GO 41499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41104: LD_ADDR_VAR 0 6
41108: PUSH
41109: LD_VAR 0 7
41113: PPUSH
41114: LD_INT 0
41116: PPUSH
41117: LD_INT 4
41119: PPUSH
41120: CALL_OW 272
41124: PUSH
41125: LD_VAR 0 8
41129: PPUSH
41130: LD_INT 0
41132: PPUSH
41133: LD_INT 4
41135: PPUSH
41136: CALL_OW 273
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_VAR 0 7
41149: PPUSH
41150: LD_INT 1
41152: PPUSH
41153: LD_INT 4
41155: PPUSH
41156: CALL_OW 272
41160: PUSH
41161: LD_VAR 0 8
41165: PPUSH
41166: LD_INT 1
41168: PPUSH
41169: LD_INT 4
41171: PPUSH
41172: CALL_OW 273
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_VAR 0 7
41185: PPUSH
41186: LD_INT 2
41188: PPUSH
41189: LD_INT 4
41191: PPUSH
41192: CALL_OW 272
41196: PUSH
41197: LD_VAR 0 8
41201: PPUSH
41202: LD_INT 2
41204: PPUSH
41205: LD_INT 4
41207: PPUSH
41208: CALL_OW 273
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_VAR 0 7
41221: PPUSH
41222: LD_INT 3
41224: PPUSH
41225: LD_INT 4
41227: PPUSH
41228: CALL_OW 272
41232: PUSH
41233: LD_VAR 0 8
41237: PPUSH
41238: LD_INT 3
41240: PPUSH
41241: LD_INT 4
41243: PPUSH
41244: CALL_OW 273
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_VAR 0 7
41257: PPUSH
41258: LD_INT 4
41260: PPUSH
41261: LD_INT 4
41263: PPUSH
41264: CALL_OW 272
41268: PUSH
41269: LD_VAR 0 8
41273: PPUSH
41274: LD_INT 4
41276: PPUSH
41277: LD_INT 4
41279: PPUSH
41280: CALL_OW 273
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_VAR 0 7
41293: PPUSH
41294: LD_INT 5
41296: PPUSH
41297: LD_INT 4
41299: PPUSH
41300: CALL_OW 272
41304: PUSH
41305: LD_VAR 0 8
41309: PPUSH
41310: LD_INT 5
41312: PPUSH
41313: LD_INT 4
41315: PPUSH
41316: CALL_OW 273
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: ST_TO_ADDR
// for i = tmp downto 1 do
41333: LD_ADDR_VAR 0 4
41337: PUSH
41338: DOUBLE
41339: LD_VAR 0 6
41343: INC
41344: ST_TO_ADDR
41345: LD_INT 1
41347: PUSH
41348: FOR_DOWNTO
41349: IFFALSE 41450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41351: LD_VAR 0 6
41355: PUSH
41356: LD_VAR 0 4
41360: ARRAY
41361: PUSH
41362: LD_INT 1
41364: ARRAY
41365: PPUSH
41366: LD_VAR 0 6
41370: PUSH
41371: LD_VAR 0 4
41375: ARRAY
41376: PUSH
41377: LD_INT 2
41379: ARRAY
41380: PPUSH
41381: CALL_OW 488
41385: NOT
41386: PUSH
41387: LD_VAR 0 6
41391: PUSH
41392: LD_VAR 0 4
41396: ARRAY
41397: PUSH
41398: LD_INT 1
41400: ARRAY
41401: PPUSH
41402: LD_VAR 0 6
41406: PUSH
41407: LD_VAR 0 4
41411: ARRAY
41412: PUSH
41413: LD_INT 2
41415: ARRAY
41416: PPUSH
41417: CALL_OW 428
41421: PUSH
41422: LD_INT 0
41424: NONEQUAL
41425: OR
41426: IFFALSE 41448
// tmp := Delete ( tmp , i ) ;
41428: LD_ADDR_VAR 0 6
41432: PUSH
41433: LD_VAR 0 6
41437: PPUSH
41438: LD_VAR 0 4
41442: PPUSH
41443: CALL_OW 3
41447: ST_TO_ADDR
41448: GO 41348
41450: POP
41451: POP
// j := GetClosestHex ( unit , tmp ) ;
41452: LD_ADDR_VAR 0 5
41456: PUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: LD_VAR 0 6
41466: PPUSH
41467: CALL 40752 0 2
41471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41472: LD_VAR 0 1
41476: PPUSH
41477: LD_VAR 0 5
41481: PUSH
41482: LD_INT 1
41484: ARRAY
41485: PPUSH
41486: LD_VAR 0 5
41490: PUSH
41491: LD_INT 2
41493: ARRAY
41494: PPUSH
41495: CALL_OW 111
// end ;
41499: LD_VAR 0 3
41503: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41504: LD_INT 0
41506: PPUSH
41507: PPUSH
41508: PPUSH
// uc_side = 0 ;
41509: LD_ADDR_OWVAR 20
41513: PUSH
41514: LD_INT 0
41516: ST_TO_ADDR
// uc_nation = 0 ;
41517: LD_ADDR_OWVAR 21
41521: PUSH
41522: LD_INT 0
41524: ST_TO_ADDR
// InitHc_All ( ) ;
41525: CALL_OW 584
// InitVc ;
41529: CALL_OW 20
// if mastodonts then
41533: LD_VAR 0 6
41537: IFFALSE 41604
// for i = 1 to mastodonts do
41539: LD_ADDR_VAR 0 11
41543: PUSH
41544: DOUBLE
41545: LD_INT 1
41547: DEC
41548: ST_TO_ADDR
41549: LD_VAR 0 6
41553: PUSH
41554: FOR_TO
41555: IFFALSE 41602
// begin vc_chassis := 31 ;
41557: LD_ADDR_OWVAR 37
41561: PUSH
41562: LD_INT 31
41564: ST_TO_ADDR
// vc_control := control_rider ;
41565: LD_ADDR_OWVAR 38
41569: PUSH
41570: LD_INT 4
41572: ST_TO_ADDR
// animal := CreateVehicle ;
41573: LD_ADDR_VAR 0 12
41577: PUSH
41578: CALL_OW 45
41582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41583: LD_VAR 0 12
41587: PPUSH
41588: LD_VAR 0 8
41592: PPUSH
41593: LD_INT 0
41595: PPUSH
41596: CALL 43792 0 3
// end ;
41600: GO 41554
41602: POP
41603: POP
// if horses then
41604: LD_VAR 0 5
41608: IFFALSE 41675
// for i = 1 to horses do
41610: LD_ADDR_VAR 0 11
41614: PUSH
41615: DOUBLE
41616: LD_INT 1
41618: DEC
41619: ST_TO_ADDR
41620: LD_VAR 0 5
41624: PUSH
41625: FOR_TO
41626: IFFALSE 41673
// begin hc_class := 21 ;
41628: LD_ADDR_OWVAR 28
41632: PUSH
41633: LD_INT 21
41635: ST_TO_ADDR
// hc_gallery :=  ;
41636: LD_ADDR_OWVAR 33
41640: PUSH
41641: LD_STRING 
41643: ST_TO_ADDR
// animal := CreateHuman ;
41644: LD_ADDR_VAR 0 12
41648: PUSH
41649: CALL_OW 44
41653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41654: LD_VAR 0 12
41658: PPUSH
41659: LD_VAR 0 8
41663: PPUSH
41664: LD_INT 0
41666: PPUSH
41667: CALL 43792 0 3
// end ;
41671: GO 41625
41673: POP
41674: POP
// if birds then
41675: LD_VAR 0 1
41679: IFFALSE 41746
// for i = 1 to birds do
41681: LD_ADDR_VAR 0 11
41685: PUSH
41686: DOUBLE
41687: LD_INT 1
41689: DEC
41690: ST_TO_ADDR
41691: LD_VAR 0 1
41695: PUSH
41696: FOR_TO
41697: IFFALSE 41744
// begin hc_class = 18 ;
41699: LD_ADDR_OWVAR 28
41703: PUSH
41704: LD_INT 18
41706: ST_TO_ADDR
// hc_gallery =  ;
41707: LD_ADDR_OWVAR 33
41711: PUSH
41712: LD_STRING 
41714: ST_TO_ADDR
// animal := CreateHuman ;
41715: LD_ADDR_VAR 0 12
41719: PUSH
41720: CALL_OW 44
41724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41725: LD_VAR 0 12
41729: PPUSH
41730: LD_VAR 0 8
41734: PPUSH
41735: LD_INT 0
41737: PPUSH
41738: CALL 43792 0 3
// end ;
41742: GO 41696
41744: POP
41745: POP
// if tigers then
41746: LD_VAR 0 2
41750: IFFALSE 41834
// for i = 1 to tigers do
41752: LD_ADDR_VAR 0 11
41756: PUSH
41757: DOUBLE
41758: LD_INT 1
41760: DEC
41761: ST_TO_ADDR
41762: LD_VAR 0 2
41766: PUSH
41767: FOR_TO
41768: IFFALSE 41832
// begin hc_class = class_tiger ;
41770: LD_ADDR_OWVAR 28
41774: PUSH
41775: LD_INT 14
41777: ST_TO_ADDR
// hc_gallery =  ;
41778: LD_ADDR_OWVAR 33
41782: PUSH
41783: LD_STRING 
41785: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41786: LD_ADDR_OWVAR 35
41790: PUSH
41791: LD_INT 7
41793: NEG
41794: PPUSH
41795: LD_INT 7
41797: PPUSH
41798: CALL_OW 12
41802: ST_TO_ADDR
// animal := CreateHuman ;
41803: LD_ADDR_VAR 0 12
41807: PUSH
41808: CALL_OW 44
41812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41813: LD_VAR 0 12
41817: PPUSH
41818: LD_VAR 0 8
41822: PPUSH
41823: LD_INT 0
41825: PPUSH
41826: CALL 43792 0 3
// end ;
41830: GO 41767
41832: POP
41833: POP
// if apemans then
41834: LD_VAR 0 3
41838: IFFALSE 41961
// for i = 1 to apemans do
41840: LD_ADDR_VAR 0 11
41844: PUSH
41845: DOUBLE
41846: LD_INT 1
41848: DEC
41849: ST_TO_ADDR
41850: LD_VAR 0 3
41854: PUSH
41855: FOR_TO
41856: IFFALSE 41959
// begin hc_class = class_apeman ;
41858: LD_ADDR_OWVAR 28
41862: PUSH
41863: LD_INT 12
41865: ST_TO_ADDR
// hc_gallery =  ;
41866: LD_ADDR_OWVAR 33
41870: PUSH
41871: LD_STRING 
41873: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
41874: LD_ADDR_OWVAR 35
41878: PUSH
41879: LD_INT 5
41881: NEG
41882: PPUSH
41883: LD_INT 5
41885: PPUSH
41886: CALL_OW 12
41890: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41891: LD_ADDR_OWVAR 31
41895: PUSH
41896: LD_INT 1
41898: PPUSH
41899: LD_INT 3
41901: PPUSH
41902: CALL_OW 12
41906: PUSH
41907: LD_INT 1
41909: PPUSH
41910: LD_INT 3
41912: PPUSH
41913: CALL_OW 12
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// animal := CreateHuman ;
41930: LD_ADDR_VAR 0 12
41934: PUSH
41935: CALL_OW 44
41939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41940: LD_VAR 0 12
41944: PPUSH
41945: LD_VAR 0 8
41949: PPUSH
41950: LD_INT 0
41952: PPUSH
41953: CALL 43792 0 3
// end ;
41957: GO 41855
41959: POP
41960: POP
// if enchidnas then
41961: LD_VAR 0 4
41965: IFFALSE 42032
// for i = 1 to enchidnas do
41967: LD_ADDR_VAR 0 11
41971: PUSH
41972: DOUBLE
41973: LD_INT 1
41975: DEC
41976: ST_TO_ADDR
41977: LD_VAR 0 4
41981: PUSH
41982: FOR_TO
41983: IFFALSE 42030
// begin hc_class = 13 ;
41985: LD_ADDR_OWVAR 28
41989: PUSH
41990: LD_INT 13
41992: ST_TO_ADDR
// hc_gallery =  ;
41993: LD_ADDR_OWVAR 33
41997: PUSH
41998: LD_STRING 
42000: ST_TO_ADDR
// animal := CreateHuman ;
42001: LD_ADDR_VAR 0 12
42005: PUSH
42006: CALL_OW 44
42010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42011: LD_VAR 0 12
42015: PPUSH
42016: LD_VAR 0 8
42020: PPUSH
42021: LD_INT 0
42023: PPUSH
42024: CALL 43792 0 3
// end ;
42028: GO 41982
42030: POP
42031: POP
// if fishes then
42032: LD_VAR 0 7
42036: IFFALSE 42103
// for i = 1 to fishes do
42038: LD_ADDR_VAR 0 11
42042: PUSH
42043: DOUBLE
42044: LD_INT 1
42046: DEC
42047: ST_TO_ADDR
42048: LD_VAR 0 7
42052: PUSH
42053: FOR_TO
42054: IFFALSE 42101
// begin hc_class = 20 ;
42056: LD_ADDR_OWVAR 28
42060: PUSH
42061: LD_INT 20
42063: ST_TO_ADDR
// hc_gallery =  ;
42064: LD_ADDR_OWVAR 33
42068: PUSH
42069: LD_STRING 
42071: ST_TO_ADDR
// animal := CreateHuman ;
42072: LD_ADDR_VAR 0 12
42076: PUSH
42077: CALL_OW 44
42081: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42082: LD_VAR 0 12
42086: PPUSH
42087: LD_VAR 0 9
42091: PPUSH
42092: LD_INT 0
42094: PPUSH
42095: CALL 43792 0 3
// end ;
42099: GO 42053
42101: POP
42102: POP
// end ;
42103: LD_VAR 0 10
42107: RET
// export function WantHeal ( sci , unit ) ; begin
42108: LD_INT 0
42110: PPUSH
// if GetTaskList ( sci ) > 0 then
42111: LD_VAR 0 1
42115: PPUSH
42116: CALL_OW 437
42120: PUSH
42121: LD_INT 0
42123: GREATER
42124: IFFALSE 42194
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42126: LD_VAR 0 1
42130: PPUSH
42131: CALL_OW 437
42135: PUSH
42136: LD_INT 1
42138: ARRAY
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: PUSH
42144: LD_STRING l
42146: EQUAL
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: CALL_OW 437
42157: PUSH
42158: LD_INT 1
42160: ARRAY
42161: PUSH
42162: LD_INT 4
42164: ARRAY
42165: PUSH
42166: LD_VAR 0 2
42170: EQUAL
42171: AND
42172: IFFALSE 42184
// result := true else
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 1
42181: ST_TO_ADDR
42182: GO 42192
// result := false ;
42184: LD_ADDR_VAR 0 3
42188: PUSH
42189: LD_INT 0
42191: ST_TO_ADDR
// end else
42192: GO 42202
// result := false ;
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: LD_INT 0
42201: ST_TO_ADDR
// end ;
42202: LD_VAR 0 3
42206: RET
// export function HealTarget ( sci ) ; begin
42207: LD_INT 0
42209: PPUSH
// if not sci then
42210: LD_VAR 0 1
42214: NOT
42215: IFFALSE 42219
// exit ;
42217: GO 42284
// result := 0 ;
42219: LD_ADDR_VAR 0 2
42223: PUSH
42224: LD_INT 0
42226: ST_TO_ADDR
// if GetTaskList ( sci ) then
42227: LD_VAR 0 1
42231: PPUSH
42232: CALL_OW 437
42236: IFFALSE 42284
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42238: LD_VAR 0 1
42242: PPUSH
42243: CALL_OW 437
42247: PUSH
42248: LD_INT 1
42250: ARRAY
42251: PUSH
42252: LD_INT 1
42254: ARRAY
42255: PUSH
42256: LD_STRING l
42258: EQUAL
42259: IFFALSE 42284
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42261: LD_ADDR_VAR 0 2
42265: PUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 437
42275: PUSH
42276: LD_INT 1
42278: ARRAY
42279: PUSH
42280: LD_INT 4
42282: ARRAY
42283: ST_TO_ADDR
// end ;
42284: LD_VAR 0 2
42288: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42289: LD_INT 0
42291: PPUSH
42292: PPUSH
42293: PPUSH
42294: PPUSH
// if not base_units then
42295: LD_VAR 0 1
42299: NOT
42300: IFFALSE 42304
// exit ;
42302: GO 42391
// result := false ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_INT 0
42311: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42312: LD_ADDR_VAR 0 5
42316: PUSH
42317: LD_VAR 0 1
42321: PPUSH
42322: LD_INT 21
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PPUSH
42332: CALL_OW 72
42336: ST_TO_ADDR
// if not tmp then
42337: LD_VAR 0 5
42341: NOT
42342: IFFALSE 42346
// exit ;
42344: GO 42391
// for i in tmp do
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_VAR 0 5
42355: PUSH
42356: FOR_IN
42357: IFFALSE 42389
// begin result := EnemyInRange ( i , 22 ) ;
42359: LD_ADDR_VAR 0 2
42363: PUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: LD_INT 22
42371: PPUSH
42372: CALL 40627 0 2
42376: ST_TO_ADDR
// if result then
42377: LD_VAR 0 2
42381: IFFALSE 42387
// exit ;
42383: POP
42384: POP
42385: GO 42391
// end ;
42387: GO 42356
42389: POP
42390: POP
// end ;
42391: LD_VAR 0 2
42395: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
42396: LD_INT 0
42398: PPUSH
42399: PPUSH
// if not units then
42400: LD_VAR 0 1
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 42479
// result := [ ] ;
42409: LD_ADDR_VAR 0 3
42413: PUSH
42414: EMPTY
42415: ST_TO_ADDR
// for i in units do
42416: LD_ADDR_VAR 0 4
42420: PUSH
42421: LD_VAR 0 1
42425: PUSH
42426: FOR_IN
42427: IFFALSE 42477
// if GetTag ( i ) = tag then
42429: LD_VAR 0 4
42433: PPUSH
42434: CALL_OW 110
42438: PUSH
42439: LD_VAR 0 2
42443: EQUAL
42444: IFFALSE 42475
// result := Insert ( result , result + 1 , i ) ;
42446: LD_ADDR_VAR 0 3
42450: PUSH
42451: LD_VAR 0 3
42455: PPUSH
42456: LD_VAR 0 3
42460: PUSH
42461: LD_INT 1
42463: PLUS
42464: PPUSH
42465: LD_VAR 0 4
42469: PPUSH
42470: CALL_OW 2
42474: ST_TO_ADDR
42475: GO 42426
42477: POP
42478: POP
// end ;
42479: LD_VAR 0 3
42483: RET
// export function IsDriver ( un ) ; begin
42484: LD_INT 0
42486: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42487: LD_ADDR_VAR 0 2
42491: PUSH
42492: LD_VAR 0 1
42496: PUSH
42497: LD_INT 55
42499: PUSH
42500: EMPTY
42501: LIST
42502: PPUSH
42503: CALL_OW 69
42507: IN
42508: ST_TO_ADDR
// end ;
42509: LD_VAR 0 2
42513: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42514: LD_INT 0
42516: PPUSH
42517: PPUSH
// list := [ ] ;
42518: LD_ADDR_VAR 0 5
42522: PUSH
42523: EMPTY
42524: ST_TO_ADDR
// case d of 0 :
42525: LD_VAR 0 3
42529: PUSH
42530: LD_INT 0
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42671
42538: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42539: LD_ADDR_VAR 0 5
42543: PUSH
42544: LD_VAR 0 1
42548: PUSH
42549: LD_INT 4
42551: MINUS
42552: PUSH
42553: LD_VAR 0 2
42557: PUSH
42558: LD_INT 4
42560: MINUS
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_INT 3
42577: MINUS
42578: PUSH
42579: LD_VAR 0 2
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 4
42599: PLUS
42600: PUSH
42601: LD_VAR 0 2
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: PUSH
42614: LD_VAR 0 1
42618: PUSH
42619: LD_INT 3
42621: PLUS
42622: PUSH
42623: LD_VAR 0 2
42627: PUSH
42628: LD_INT 3
42630: PLUS
42631: PUSH
42632: LD_INT 5
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: LIST
42639: PUSH
42640: LD_VAR 0 1
42644: PUSH
42645: LD_VAR 0 2
42649: PUSH
42650: LD_INT 4
42652: PLUS
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// end ; 1 :
42669: GO 43369
42671: LD_INT 1
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42812
42679: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42680: LD_ADDR_VAR 0 5
42684: PUSH
42685: LD_VAR 0 1
42689: PUSH
42690: LD_VAR 0 2
42694: PUSH
42695: LD_INT 4
42697: MINUS
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: PUSH
42707: LD_VAR 0 1
42711: PUSH
42712: LD_INT 3
42714: MINUS
42715: PUSH
42716: LD_VAR 0 2
42720: PUSH
42721: LD_INT 3
42723: MINUS
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: PUSH
42733: LD_VAR 0 1
42737: PUSH
42738: LD_INT 4
42740: MINUS
42741: PUSH
42742: LD_VAR 0 2
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: LIST
42754: PUSH
42755: LD_VAR 0 1
42759: PUSH
42760: LD_VAR 0 2
42764: PUSH
42765: LD_INT 3
42767: PLUS
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: LIST
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: LD_INT 4
42784: PLUS
42785: PUSH
42786: LD_VAR 0 2
42790: PUSH
42791: LD_INT 4
42793: PLUS
42794: PUSH
42795: LD_INT 5
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// end ; 2 :
42810: GO 43369
42812: LD_INT 2
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42949
42820: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42821: LD_ADDR_VAR 0 5
42825: PUSH
42826: LD_VAR 0 1
42830: PUSH
42831: LD_VAR 0 2
42835: PUSH
42836: LD_INT 3
42838: MINUS
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: PUSH
42848: LD_VAR 0 1
42852: PUSH
42853: LD_INT 4
42855: PLUS
42856: PUSH
42857: LD_VAR 0 2
42861: PUSH
42862: LD_INT 4
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: PUSH
42870: LD_VAR 0 1
42874: PUSH
42875: LD_VAR 0 2
42879: PUSH
42880: LD_INT 4
42882: PLUS
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: PUSH
42892: LD_VAR 0 1
42896: PUSH
42897: LD_INT 3
42899: MINUS
42900: PUSH
42901: LD_VAR 0 2
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: PUSH
42914: LD_VAR 0 1
42918: PUSH
42919: LD_INT 4
42921: MINUS
42922: PUSH
42923: LD_VAR 0 2
42927: PUSH
42928: LD_INT 4
42930: MINUS
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: ST_TO_ADDR
// end ; 3 :
42947: GO 43369
42949: LD_INT 3
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 43090
42957: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42958: LD_ADDR_VAR 0 5
42962: PUSH
42963: LD_VAR 0 1
42967: PUSH
42968: LD_INT 3
42970: PLUS
42971: PUSH
42972: LD_VAR 0 2
42976: PUSH
42977: LD_INT 4
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: PUSH
42985: LD_VAR 0 1
42989: PUSH
42990: LD_INT 4
42992: PLUS
42993: PUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_INT 4
43001: PLUS
43002: PUSH
43003: LD_INT 5
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: PUSH
43011: LD_VAR 0 1
43015: PUSH
43016: LD_INT 4
43018: MINUS
43019: PUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: PUSH
43033: LD_VAR 0 1
43037: PUSH
43038: LD_VAR 0 2
43042: PUSH
43043: LD_INT 4
43045: MINUS
43046: PUSH
43047: LD_INT 3
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: PUSH
43055: LD_VAR 0 1
43059: PUSH
43060: LD_INT 3
43062: MINUS
43063: PUSH
43064: LD_VAR 0 2
43068: PUSH
43069: LD_INT 3
43071: MINUS
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: ST_TO_ADDR
// end ; 4 :
43088: GO 43369
43090: LD_INT 4
43092: DOUBLE
43093: EQUAL
43094: IFTRUE 43098
43096: GO 43231
43098: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43099: LD_ADDR_VAR 0 5
43103: PUSH
43104: LD_VAR 0 1
43108: PUSH
43109: LD_VAR 0 2
43113: PUSH
43114: LD_INT 4
43116: PLUS
43117: PUSH
43118: LD_INT 0
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: PUSH
43126: LD_VAR 0 1
43130: PUSH
43131: LD_INT 3
43133: PLUS
43134: PUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_INT 3
43142: PLUS
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: PUSH
43152: LD_VAR 0 1
43156: PUSH
43157: LD_INT 4
43159: PLUS
43160: PUSH
43161: LD_VAR 0 2
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: PUSH
43174: LD_VAR 0 1
43178: PUSH
43179: LD_VAR 0 2
43183: PUSH
43184: LD_INT 3
43186: MINUS
43187: PUSH
43188: LD_INT 3
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: PUSH
43196: LD_VAR 0 1
43200: PUSH
43201: LD_INT 4
43203: MINUS
43204: PUSH
43205: LD_VAR 0 2
43209: PUSH
43210: LD_INT 4
43212: MINUS
43213: PUSH
43214: LD_INT 2
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: ST_TO_ADDR
// end ; 5 :
43229: GO 43369
43231: LD_INT 5
43233: DOUBLE
43234: EQUAL
43235: IFTRUE 43239
43237: GO 43368
43239: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43240: LD_ADDR_VAR 0 5
43244: PUSH
43245: LD_VAR 0 1
43249: PUSH
43250: LD_INT 4
43252: MINUS
43253: PUSH
43254: LD_VAR 0 2
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: PUSH
43267: LD_VAR 0 1
43271: PUSH
43272: LD_VAR 0 2
43276: PUSH
43277: LD_INT 4
43279: MINUS
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: PUSH
43289: LD_VAR 0 1
43293: PUSH
43294: LD_INT 4
43296: PLUS
43297: PUSH
43298: LD_VAR 0 2
43302: PUSH
43303: LD_INT 4
43305: PLUS
43306: PUSH
43307: LD_INT 5
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: PUSH
43315: LD_VAR 0 1
43319: PUSH
43320: LD_INT 3
43322: PLUS
43323: PUSH
43324: LD_VAR 0 2
43328: PUSH
43329: LD_INT 4
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: PUSH
43337: LD_VAR 0 1
43341: PUSH
43342: LD_VAR 0 2
43346: PUSH
43347: LD_INT 3
43349: PLUS
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: ST_TO_ADDR
// end ; end ;
43366: GO 43369
43368: POP
// result := list ;
43369: LD_ADDR_VAR 0 4
43373: PUSH
43374: LD_VAR 0 5
43378: ST_TO_ADDR
// end ;
43379: LD_VAR 0 4
43383: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43384: LD_INT 0
43386: PPUSH
43387: PPUSH
43388: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43389: LD_VAR 0 1
43393: NOT
43394: PUSH
43395: LD_VAR 0 2
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 4
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: IN
43418: NOT
43419: OR
43420: IFFALSE 43424
// exit ;
43422: GO 43516
// tmp := [ ] ;
43424: LD_ADDR_VAR 0 5
43428: PUSH
43429: EMPTY
43430: ST_TO_ADDR
// for i in units do
43431: LD_ADDR_VAR 0 4
43435: PUSH
43436: LD_VAR 0 1
43440: PUSH
43441: FOR_IN
43442: IFFALSE 43485
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: LD_VAR 0 5
43453: PPUSH
43454: LD_VAR 0 5
43458: PUSH
43459: LD_INT 1
43461: PLUS
43462: PPUSH
43463: LD_VAR 0 4
43467: PPUSH
43468: LD_VAR 0 2
43472: PPUSH
43473: CALL_OW 259
43477: PPUSH
43478: CALL_OW 2
43482: ST_TO_ADDR
43483: GO 43441
43485: POP
43486: POP
// if not tmp then
43487: LD_VAR 0 5
43491: NOT
43492: IFFALSE 43496
// exit ;
43494: GO 43516
// result := SortListByListDesc ( units , tmp ) ;
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_VAR 0 1
43505: PPUSH
43506: LD_VAR 0 5
43510: PPUSH
43511: CALL_OW 77
43515: ST_TO_ADDR
// end ;
43516: LD_VAR 0 3
43520: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43521: LD_INT 0
43523: PPUSH
43524: PPUSH
43525: PPUSH
// result := false ;
43526: LD_ADDR_VAR 0 3
43530: PUSH
43531: LD_INT 0
43533: ST_TO_ADDR
// x := GetX ( building ) ;
43534: LD_ADDR_VAR 0 4
43538: PUSH
43539: LD_VAR 0 2
43543: PPUSH
43544: CALL_OW 250
43548: ST_TO_ADDR
// y := GetY ( building ) ;
43549: LD_ADDR_VAR 0 5
43553: PUSH
43554: LD_VAR 0 2
43558: PPUSH
43559: CALL_OW 251
43563: ST_TO_ADDR
// if not building or not x or not y then
43564: LD_VAR 0 2
43568: NOT
43569: PUSH
43570: LD_VAR 0 4
43574: NOT
43575: OR
43576: PUSH
43577: LD_VAR 0 5
43581: NOT
43582: OR
43583: IFFALSE 43587
// exit ;
43585: GO 43679
// if GetTaskList ( unit ) then
43587: LD_VAR 0 1
43591: PPUSH
43592: CALL_OW 437
43596: IFFALSE 43679
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43598: LD_STRING e
43600: PUSH
43601: LD_VAR 0 1
43605: PPUSH
43606: CALL_OW 437
43610: PUSH
43611: LD_INT 1
43613: ARRAY
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: EQUAL
43619: PUSH
43620: LD_VAR 0 4
43624: PUSH
43625: LD_VAR 0 1
43629: PPUSH
43630: CALL_OW 437
43634: PUSH
43635: LD_INT 1
43637: ARRAY
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: EQUAL
43643: AND
43644: PUSH
43645: LD_VAR 0 5
43649: PUSH
43650: LD_VAR 0 1
43654: PPUSH
43655: CALL_OW 437
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PUSH
43664: LD_INT 3
43666: ARRAY
43667: EQUAL
43668: AND
43669: IFFALSE 43679
// result := true end ;
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 1
43678: ST_TO_ADDR
// end ;
43679: LD_VAR 0 3
43683: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43684: LD_INT 0
43686: PPUSH
// result := false ;
43687: LD_ADDR_VAR 0 4
43691: PUSH
43692: LD_INT 0
43694: ST_TO_ADDR
// if GetTaskList ( unit ) then
43695: LD_VAR 0 1
43699: PPUSH
43700: CALL_OW 437
43704: IFFALSE 43787
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43706: LD_STRING M
43708: PUSH
43709: LD_VAR 0 1
43713: PPUSH
43714: CALL_OW 437
43718: PUSH
43719: LD_INT 1
43721: ARRAY
43722: PUSH
43723: LD_INT 1
43725: ARRAY
43726: EQUAL
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: LD_VAR 0 1
43737: PPUSH
43738: CALL_OW 437
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PUSH
43747: LD_INT 2
43749: ARRAY
43750: EQUAL
43751: AND
43752: PUSH
43753: LD_VAR 0 3
43757: PUSH
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 437
43767: PUSH
43768: LD_INT 1
43770: ARRAY
43771: PUSH
43772: LD_INT 3
43774: ARRAY
43775: EQUAL
43776: AND
43777: IFFALSE 43787
// result := true ;
43779: LD_ADDR_VAR 0 4
43783: PUSH
43784: LD_INT 1
43786: ST_TO_ADDR
// end ; end ;
43787: LD_VAR 0 4
43791: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43792: LD_INT 0
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
// if not unit or not area then
43798: LD_VAR 0 1
43802: NOT
43803: PUSH
43804: LD_VAR 0 2
43808: NOT
43809: OR
43810: IFFALSE 43814
// exit ;
43812: GO 43978
// tmp := AreaToList ( area , i ) ;
43814: LD_ADDR_VAR 0 6
43818: PUSH
43819: LD_VAR 0 2
43823: PPUSH
43824: LD_VAR 0 5
43828: PPUSH
43829: CALL_OW 517
43833: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43834: LD_ADDR_VAR 0 5
43838: PUSH
43839: DOUBLE
43840: LD_INT 1
43842: DEC
43843: ST_TO_ADDR
43844: LD_VAR 0 6
43848: PUSH
43849: LD_INT 1
43851: ARRAY
43852: PUSH
43853: FOR_TO
43854: IFFALSE 43976
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43856: LD_ADDR_VAR 0 7
43860: PUSH
43861: LD_VAR 0 6
43865: PUSH
43866: LD_INT 1
43868: ARRAY
43869: PUSH
43870: LD_VAR 0 5
43874: ARRAY
43875: PUSH
43876: LD_VAR 0 6
43880: PUSH
43881: LD_INT 2
43883: ARRAY
43884: PUSH
43885: LD_VAR 0 5
43889: ARRAY
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43895: LD_VAR 0 7
43899: PUSH
43900: LD_INT 1
43902: ARRAY
43903: PPUSH
43904: LD_VAR 0 7
43908: PUSH
43909: LD_INT 2
43911: ARRAY
43912: PPUSH
43913: CALL_OW 428
43917: PUSH
43918: LD_INT 0
43920: EQUAL
43921: IFFALSE 43974
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43923: LD_VAR 0 1
43927: PPUSH
43928: LD_VAR 0 7
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PPUSH
43937: LD_VAR 0 7
43941: PUSH
43942: LD_INT 2
43944: ARRAY
43945: PPUSH
43946: LD_VAR 0 3
43950: PPUSH
43951: CALL_OW 48
// result := IsPlaced ( unit ) ;
43955: LD_ADDR_VAR 0 4
43959: PUSH
43960: LD_VAR 0 1
43964: PPUSH
43965: CALL_OW 305
43969: ST_TO_ADDR
// exit ;
43970: POP
43971: POP
43972: GO 43978
// end ; end ;
43974: GO 43853
43976: POP
43977: POP
// end ;
43978: LD_VAR 0 4
43982: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43983: LD_INT 0
43985: PPUSH
43986: PPUSH
43987: PPUSH
// if not side or side > 8 then
43988: LD_VAR 0 1
43992: NOT
43993: PUSH
43994: LD_VAR 0 1
43998: PUSH
43999: LD_INT 8
44001: GREATER
44002: OR
44003: IFFALSE 44007
// exit ;
44005: GO 44194
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44007: LD_ADDR_VAR 0 4
44011: PUSH
44012: LD_INT 22
44014: PUSH
44015: LD_VAR 0 1
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 21
44026: PUSH
44027: LD_INT 3
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 69
44042: ST_TO_ADDR
// if not tmp then
44043: LD_VAR 0 4
44047: NOT
44048: IFFALSE 44052
// exit ;
44050: GO 44194
// enable_addtolog := true ;
44052: LD_ADDR_OWVAR 81
44056: PUSH
44057: LD_INT 1
44059: ST_TO_ADDR
// AddToLog ( [ ) ;
44060: LD_STRING [
44062: PPUSH
44063: CALL_OW 561
// for i in tmp do
44067: LD_ADDR_VAR 0 3
44071: PUSH
44072: LD_VAR 0 4
44076: PUSH
44077: FOR_IN
44078: IFFALSE 44185
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44080: LD_STRING [
44082: PUSH
44083: LD_VAR 0 3
44087: PPUSH
44088: CALL_OW 266
44092: STR
44093: PUSH
44094: LD_STRING , 
44096: STR
44097: PUSH
44098: LD_VAR 0 3
44102: PPUSH
44103: CALL_OW 250
44107: STR
44108: PUSH
44109: LD_STRING , 
44111: STR
44112: PUSH
44113: LD_VAR 0 3
44117: PPUSH
44118: CALL_OW 251
44122: STR
44123: PUSH
44124: LD_STRING , 
44126: STR
44127: PUSH
44128: LD_VAR 0 3
44132: PPUSH
44133: CALL_OW 254
44137: STR
44138: PUSH
44139: LD_STRING , 
44141: STR
44142: PUSH
44143: LD_VAR 0 3
44147: PPUSH
44148: LD_INT 1
44150: PPUSH
44151: CALL_OW 268
44155: STR
44156: PUSH
44157: LD_STRING , 
44159: STR
44160: PUSH
44161: LD_VAR 0 3
44165: PPUSH
44166: LD_INT 2
44168: PPUSH
44169: CALL_OW 268
44173: STR
44174: PUSH
44175: LD_STRING ],
44177: STR
44178: PPUSH
44179: CALL_OW 561
// end ;
44183: GO 44077
44185: POP
44186: POP
// AddToLog ( ]; ) ;
44187: LD_STRING ];
44189: PPUSH
44190: CALL_OW 561
// end ;
44194: LD_VAR 0 2
44198: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
// if not area or not rate or not max then
44206: LD_VAR 0 1
44210: NOT
44211: PUSH
44212: LD_VAR 0 2
44216: NOT
44217: OR
44218: PUSH
44219: LD_VAR 0 4
44223: NOT
44224: OR
44225: IFFALSE 44229
// exit ;
44227: GO 44421
// while 1 do
44229: LD_INT 1
44231: IFFALSE 44421
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44233: LD_ADDR_VAR 0 9
44237: PUSH
44238: LD_VAR 0 1
44242: PPUSH
44243: LD_INT 1
44245: PPUSH
44246: CALL_OW 287
44250: PUSH
44251: LD_INT 10
44253: MUL
44254: ST_TO_ADDR
// r := rate / 10 ;
44255: LD_ADDR_VAR 0 7
44259: PUSH
44260: LD_VAR 0 2
44264: PUSH
44265: LD_INT 10
44267: DIVREAL
44268: ST_TO_ADDR
// time := 1 1$00 ;
44269: LD_ADDR_VAR 0 8
44273: PUSH
44274: LD_INT 2100
44276: ST_TO_ADDR
// if amount < min then
44277: LD_VAR 0 9
44281: PUSH
44282: LD_VAR 0 3
44286: LESS
44287: IFFALSE 44305
// r := r * 2 else
44289: LD_ADDR_VAR 0 7
44293: PUSH
44294: LD_VAR 0 7
44298: PUSH
44299: LD_INT 2
44301: MUL
44302: ST_TO_ADDR
44303: GO 44331
// if amount > max then
44305: LD_VAR 0 9
44309: PUSH
44310: LD_VAR 0 4
44314: GREATER
44315: IFFALSE 44331
// r := r / 2 ;
44317: LD_ADDR_VAR 0 7
44321: PUSH
44322: LD_VAR 0 7
44326: PUSH
44327: LD_INT 2
44329: DIVREAL
44330: ST_TO_ADDR
// time := time / r ;
44331: LD_ADDR_VAR 0 8
44335: PUSH
44336: LD_VAR 0 8
44340: PUSH
44341: LD_VAR 0 7
44345: DIVREAL
44346: ST_TO_ADDR
// if time < 0 then
44347: LD_VAR 0 8
44351: PUSH
44352: LD_INT 0
44354: LESS
44355: IFFALSE 44372
// time := time * - 1 ;
44357: LD_ADDR_VAR 0 8
44361: PUSH
44362: LD_VAR 0 8
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: MUL
44371: ST_TO_ADDR
// wait ( time ) ;
44372: LD_VAR 0 8
44376: PPUSH
44377: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
44381: LD_INT 35
44383: PPUSH
44384: LD_INT 875
44386: PPUSH
44387: CALL_OW 12
44391: PPUSH
44392: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44396: LD_INT 1
44398: PPUSH
44399: LD_INT 5
44401: PPUSH
44402: CALL_OW 12
44406: PPUSH
44407: LD_VAR 0 1
44411: PPUSH
44412: LD_INT 1
44414: PPUSH
44415: CALL_OW 55
// end ;
44419: GO 44229
// end ;
44421: LD_VAR 0 5
44425: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44426: LD_INT 0
44428: PPUSH
44429: PPUSH
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
44434: PPUSH
44435: PPUSH
// if not turrets or not factories then
44436: LD_VAR 0 1
44440: NOT
44441: PUSH
44442: LD_VAR 0 2
44446: NOT
44447: OR
44448: IFFALSE 44452
// exit ;
44450: GO 44759
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44452: LD_ADDR_VAR 0 10
44456: PUSH
44457: LD_INT 5
44459: PUSH
44460: LD_INT 6
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: LD_INT 4
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: LD_INT 5
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 24
44494: PUSH
44495: LD_INT 25
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 23
44504: PUSH
44505: LD_INT 27
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 42
44518: PUSH
44519: LD_INT 43
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 44
44528: PUSH
44529: LD_INT 46
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 45
44538: PUSH
44539: LD_INT 47
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// result := [ ] ;
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: EMPTY
44562: ST_TO_ADDR
// for i in turrets do
44563: LD_ADDR_VAR 0 4
44567: PUSH
44568: LD_VAR 0 1
44572: PUSH
44573: FOR_IN
44574: IFFALSE 44757
// begin nat := GetNation ( i ) ;
44576: LD_ADDR_VAR 0 7
44580: PUSH
44581: LD_VAR 0 4
44585: PPUSH
44586: CALL_OW 248
44590: ST_TO_ADDR
// weapon := 0 ;
44591: LD_ADDR_VAR 0 8
44595: PUSH
44596: LD_INT 0
44598: ST_TO_ADDR
// if not nat then
44599: LD_VAR 0 7
44603: NOT
44604: IFFALSE 44608
// continue ;
44606: GO 44573
// for j in list [ nat ] do
44608: LD_ADDR_VAR 0 5
44612: PUSH
44613: LD_VAR 0 10
44617: PUSH
44618: LD_VAR 0 7
44622: ARRAY
44623: PUSH
44624: FOR_IN
44625: IFFALSE 44666
// if GetBWeapon ( i ) = j [ 1 ] then
44627: LD_VAR 0 4
44631: PPUSH
44632: CALL_OW 269
44636: PUSH
44637: LD_VAR 0 5
44641: PUSH
44642: LD_INT 1
44644: ARRAY
44645: EQUAL
44646: IFFALSE 44664
// begin weapon := j [ 2 ] ;
44648: LD_ADDR_VAR 0 8
44652: PUSH
44653: LD_VAR 0 5
44657: PUSH
44658: LD_INT 2
44660: ARRAY
44661: ST_TO_ADDR
// break ;
44662: GO 44666
// end ;
44664: GO 44624
44666: POP
44667: POP
// if not weapon then
44668: LD_VAR 0 8
44672: NOT
44673: IFFALSE 44677
// continue ;
44675: GO 44573
// for k in factories do
44677: LD_ADDR_VAR 0 6
44681: PUSH
44682: LD_VAR 0 2
44686: PUSH
44687: FOR_IN
44688: IFFALSE 44753
// begin weapons := AvailableWeaponList ( k ) ;
44690: LD_ADDR_VAR 0 9
44694: PUSH
44695: LD_VAR 0 6
44699: PPUSH
44700: CALL_OW 478
44704: ST_TO_ADDR
// if not weapons then
44705: LD_VAR 0 9
44709: NOT
44710: IFFALSE 44714
// continue ;
44712: GO 44687
// if weapon in weapons then
44714: LD_VAR 0 8
44718: PUSH
44719: LD_VAR 0 9
44723: IN
44724: IFFALSE 44751
// begin result := [ i , weapon ] ;
44726: LD_ADDR_VAR 0 3
44730: PUSH
44731: LD_VAR 0 4
44735: PUSH
44736: LD_VAR 0 8
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: ST_TO_ADDR
// exit ;
44745: POP
44746: POP
44747: POP
44748: POP
44749: GO 44759
// end ; end ;
44751: GO 44687
44753: POP
44754: POP
// end ;
44755: GO 44573
44757: POP
44758: POP
// end ;
44759: LD_VAR 0 3
44763: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44764: LD_INT 0
44766: PPUSH
// if not side or side > 8 then
44767: LD_VAR 0 3
44771: NOT
44772: PUSH
44773: LD_VAR 0 3
44777: PUSH
44778: LD_INT 8
44780: GREATER
44781: OR
44782: IFFALSE 44786
// exit ;
44784: GO 44845
// if not range then
44786: LD_VAR 0 4
44790: NOT
44791: IFFALSE 44802
// range := - 12 ;
44793: LD_ADDR_VAR 0 4
44797: PUSH
44798: LD_INT 12
44800: NEG
44801: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44802: LD_VAR 0 1
44806: PPUSH
44807: LD_VAR 0 2
44811: PPUSH
44812: LD_VAR 0 3
44816: PPUSH
44817: LD_VAR 0 4
44821: PPUSH
44822: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44826: LD_VAR 0 1
44830: PPUSH
44831: LD_VAR 0 2
44835: PPUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: CALL_OW 331
// end ;
44845: LD_VAR 0 5
44849: RET
// export function Video ( mode ) ; begin
44850: LD_INT 0
44852: PPUSH
// ingame_video = mode ;
44853: LD_ADDR_OWVAR 52
44857: PUSH
44858: LD_VAR 0 1
44862: ST_TO_ADDR
// interface_hidden = mode ;
44863: LD_ADDR_OWVAR 54
44867: PUSH
44868: LD_VAR 0 1
44872: ST_TO_ADDR
// end ;
44873: LD_VAR 0 2
44877: RET
// export function Join ( array , element ) ; begin
44878: LD_INT 0
44880: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_VAR 0 1
44890: PPUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 1
44898: PLUS
44899: PPUSH
44900: LD_VAR 0 2
44904: PPUSH
44905: CALL_OW 1
44909: ST_TO_ADDR
// end ;
44910: LD_VAR 0 3
44914: RET
// export function JoinUnion ( array , element ) ; begin
44915: LD_INT 0
44917: PPUSH
// result := array union element ;
44918: LD_ADDR_VAR 0 3
44922: PUSH
44923: LD_VAR 0 1
44927: PUSH
44928: LD_VAR 0 2
44932: UNION
44933: ST_TO_ADDR
// end ;
44934: LD_VAR 0 3
44938: RET
// export function GetBehemoths ( side ) ; begin
44939: LD_INT 0
44941: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44942: LD_ADDR_VAR 0 2
44946: PUSH
44947: LD_INT 22
44949: PUSH
44950: LD_VAR 0 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 31
44961: PUSH
44962: LD_INT 25
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PPUSH
44973: CALL_OW 69
44977: ST_TO_ADDR
// end ;
44978: LD_VAR 0 2
44982: RET
// export function Shuffle ( array ) ; var i , index ; begin
44983: LD_INT 0
44985: PPUSH
44986: PPUSH
44987: PPUSH
// result := [ ] ;
44988: LD_ADDR_VAR 0 2
44992: PUSH
44993: EMPTY
44994: ST_TO_ADDR
// if not array then
44995: LD_VAR 0 1
44999: NOT
45000: IFFALSE 45004
// exit ;
45002: GO 45103
// Randomize ;
45004: CALL_OW 10
// for i = array downto 1 do
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: DOUBLE
45014: LD_VAR 0 1
45018: INC
45019: ST_TO_ADDR
45020: LD_INT 1
45022: PUSH
45023: FOR_DOWNTO
45024: IFFALSE 45101
// begin index := rand ( 1 , array ) ;
45026: LD_ADDR_VAR 0 4
45030: PUSH
45031: LD_INT 1
45033: PPUSH
45034: LD_VAR 0 1
45038: PPUSH
45039: CALL_OW 12
45043: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45044: LD_ADDR_VAR 0 2
45048: PUSH
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_VAR 0 2
45058: PUSH
45059: LD_INT 1
45061: PLUS
45062: PPUSH
45063: LD_VAR 0 1
45067: PUSH
45068: LD_VAR 0 4
45072: ARRAY
45073: PPUSH
45074: CALL_OW 2
45078: ST_TO_ADDR
// array := Delete ( array , index ) ;
45079: LD_ADDR_VAR 0 1
45083: PUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: LD_VAR 0 4
45093: PPUSH
45094: CALL_OW 3
45098: ST_TO_ADDR
// end ;
45099: GO 45023
45101: POP
45102: POP
// end ;
45103: LD_VAR 0 2
45107: RET
// export function GetBaseMaterials ( base ) ; begin
45108: LD_INT 0
45110: PPUSH
// result := [ 0 , 0 , 0 ] ;
45111: LD_ADDR_VAR 0 2
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// if not base then
45130: LD_VAR 0 1
45134: NOT
45135: IFFALSE 45139
// exit ;
45137: GO 45188
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45139: LD_ADDR_VAR 0 2
45143: PUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: LD_INT 1
45151: PPUSH
45152: CALL_OW 275
45156: PUSH
45157: LD_VAR 0 1
45161: PPUSH
45162: LD_INT 2
45164: PPUSH
45165: CALL_OW 275
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: LD_INT 3
45177: PPUSH
45178: CALL_OW 275
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: ST_TO_ADDR
// end ;
45188: LD_VAR 0 2
45192: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45193: LD_INT 0
45195: PPUSH
45196: PPUSH
// result := array ;
45197: LD_ADDR_VAR 0 3
45201: PUSH
45202: LD_VAR 0 1
45206: ST_TO_ADDR
// if size > 0 then
45207: LD_VAR 0 2
45211: PUSH
45212: LD_INT 0
45214: GREATER
45215: IFFALSE 45261
// for i := array downto size do
45217: LD_ADDR_VAR 0 4
45221: PUSH
45222: DOUBLE
45223: LD_VAR 0 1
45227: INC
45228: ST_TO_ADDR
45229: LD_VAR 0 2
45233: PUSH
45234: FOR_DOWNTO
45235: IFFALSE 45259
// result := Delete ( result , result ) ;
45237: LD_ADDR_VAR 0 3
45241: PUSH
45242: LD_VAR 0 3
45246: PPUSH
45247: LD_VAR 0 3
45251: PPUSH
45252: CALL_OW 3
45256: ST_TO_ADDR
45257: GO 45234
45259: POP
45260: POP
// end ;
45261: LD_VAR 0 3
45265: RET
// export function ComExit ( unit ) ; var tmp ; begin
45266: LD_INT 0
45268: PPUSH
45269: PPUSH
// if not IsInUnit ( unit ) then
45270: LD_VAR 0 1
45274: PPUSH
45275: CALL_OW 310
45279: NOT
45280: IFFALSE 45284
// exit ;
45282: GO 45344
// tmp := IsInUnit ( unit ) ;
45284: LD_ADDR_VAR 0 3
45288: PUSH
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 310
45298: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45299: LD_VAR 0 3
45303: PPUSH
45304: CALL_OW 247
45308: PUSH
45309: LD_INT 2
45311: EQUAL
45312: IFFALSE 45325
// ComExitVehicle ( unit ) else
45314: LD_VAR 0 1
45318: PPUSH
45319: CALL_OW 121
45323: GO 45334
// ComExitBuilding ( unit ) ;
45325: LD_VAR 0 1
45329: PPUSH
45330: CALL_OW 122
// result := tmp ;
45334: LD_ADDR_VAR 0 2
45338: PUSH
45339: LD_VAR 0 3
45343: ST_TO_ADDR
// end ;
45344: LD_VAR 0 2
45348: RET
// export function ResetHc ; begin
45349: LD_INT 0
45351: PPUSH
// InitHc ;
45352: CALL_OW 19
// hc_importance := 0 ;
45356: LD_ADDR_OWVAR 32
45360: PUSH
45361: LD_INT 0
45363: ST_TO_ADDR
// end ;
45364: LD_VAR 0 1
45368: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45369: LD_INT 0
45371: PPUSH
45372: PPUSH
45373: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45374: LD_ADDR_VAR 0 6
45378: PUSH
45379: LD_VAR 0 1
45383: PUSH
45384: LD_VAR 0 3
45388: PLUS
45389: PUSH
45390: LD_INT 2
45392: DIV
45393: ST_TO_ADDR
// if _x < 0 then
45394: LD_VAR 0 6
45398: PUSH
45399: LD_INT 0
45401: LESS
45402: IFFALSE 45419
// _x := _x * - 1 ;
45404: LD_ADDR_VAR 0 6
45408: PUSH
45409: LD_VAR 0 6
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: MUL
45418: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45419: LD_ADDR_VAR 0 7
45423: PUSH
45424: LD_VAR 0 2
45428: PUSH
45429: LD_VAR 0 4
45433: PLUS
45434: PUSH
45435: LD_INT 2
45437: DIV
45438: ST_TO_ADDR
// if _y < 0 then
45439: LD_VAR 0 7
45443: PUSH
45444: LD_INT 0
45446: LESS
45447: IFFALSE 45464
// _y := _y * - 1 ;
45449: LD_ADDR_VAR 0 7
45453: PUSH
45454: LD_VAR 0 7
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: MUL
45463: ST_TO_ADDR
// result := [ _x , _y ] ;
45464: LD_ADDR_VAR 0 5
45468: PUSH
45469: LD_VAR 0 6
45473: PUSH
45474: LD_VAR 0 7
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: ST_TO_ADDR
// end ;
45483: LD_VAR 0 5
45487: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45488: LD_INT 0
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
// task := GetTaskList ( unit ) ;
45494: LD_ADDR_VAR 0 7
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 437
45508: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45509: LD_VAR 0 7
45513: NOT
45514: PUSH
45515: LD_VAR 0 1
45519: PPUSH
45520: LD_VAR 0 2
45524: PPUSH
45525: CALL_OW 308
45529: NOT
45530: AND
45531: IFFALSE 45535
// exit ;
45533: GO 45653
// if IsInArea ( unit , area ) then
45535: LD_VAR 0 1
45539: PPUSH
45540: LD_VAR 0 2
45544: PPUSH
45545: CALL_OW 308
45549: IFFALSE 45567
// begin ComMoveToArea ( unit , goAway ) ;
45551: LD_VAR 0 1
45555: PPUSH
45556: LD_VAR 0 3
45560: PPUSH
45561: CALL_OW 113
// exit ;
45565: GO 45653
// end ; if task [ 1 ] [ 1 ] <> M then
45567: LD_VAR 0 7
45571: PUSH
45572: LD_INT 1
45574: ARRAY
45575: PUSH
45576: LD_INT 1
45578: ARRAY
45579: PUSH
45580: LD_STRING M
45582: NONEQUAL
45583: IFFALSE 45587
// exit ;
45585: GO 45653
// x := task [ 1 ] [ 2 ] ;
45587: LD_ADDR_VAR 0 5
45591: PUSH
45592: LD_VAR 0 7
45596: PUSH
45597: LD_INT 1
45599: ARRAY
45600: PUSH
45601: LD_INT 2
45603: ARRAY
45604: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45605: LD_ADDR_VAR 0 6
45609: PUSH
45610: LD_VAR 0 7
45614: PUSH
45615: LD_INT 1
45617: ARRAY
45618: PUSH
45619: LD_INT 3
45621: ARRAY
45622: ST_TO_ADDR
// if InArea ( x , y , area ) then
45623: LD_VAR 0 5
45627: PPUSH
45628: LD_VAR 0 6
45632: PPUSH
45633: LD_VAR 0 2
45637: PPUSH
45638: CALL_OW 309
45642: IFFALSE 45653
// ComStop ( unit ) ;
45644: LD_VAR 0 1
45648: PPUSH
45649: CALL_OW 141
// end ;
45653: LD_VAR 0 4
45657: RET
// export function Abs ( value ) ; begin
45658: LD_INT 0
45660: PPUSH
// result := value ;
45661: LD_ADDR_VAR 0 2
45665: PUSH
45666: LD_VAR 0 1
45670: ST_TO_ADDR
// if value < 0 then
45671: LD_VAR 0 1
45675: PUSH
45676: LD_INT 0
45678: LESS
45679: IFFALSE 45696
// result := value * - 1 ;
45681: LD_ADDR_VAR 0 2
45685: PUSH
45686: LD_VAR 0 1
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: MUL
45695: ST_TO_ADDR
// end ;
45696: LD_VAR 0 2
45700: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45701: LD_INT 0
45703: PPUSH
45704: PPUSH
45705: PPUSH
45706: PPUSH
45707: PPUSH
45708: PPUSH
45709: PPUSH
45710: PPUSH
// if not unit or not building then
45711: LD_VAR 0 1
45715: NOT
45716: PUSH
45717: LD_VAR 0 2
45721: NOT
45722: OR
45723: IFFALSE 45727
// exit ;
45725: GO 45953
// x := GetX ( building ) ;
45727: LD_ADDR_VAR 0 4
45731: PUSH
45732: LD_VAR 0 2
45736: PPUSH
45737: CALL_OW 250
45741: ST_TO_ADDR
// y := GetY ( building ) ;
45742: LD_ADDR_VAR 0 6
45746: PUSH
45747: LD_VAR 0 2
45751: PPUSH
45752: CALL_OW 251
45756: ST_TO_ADDR
// d := GetDir ( building ) ;
45757: LD_ADDR_VAR 0 8
45761: PUSH
45762: LD_VAR 0 2
45766: PPUSH
45767: CALL_OW 254
45771: ST_TO_ADDR
// r := 4 ;
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_INT 4
45779: ST_TO_ADDR
// for i := 1 to 5 do
45780: LD_ADDR_VAR 0 10
45784: PUSH
45785: DOUBLE
45786: LD_INT 1
45788: DEC
45789: ST_TO_ADDR
45790: LD_INT 5
45792: PUSH
45793: FOR_TO
45794: IFFALSE 45951
// begin _x := ShiftX ( x , d , r + i ) ;
45796: LD_ADDR_VAR 0 5
45800: PUSH
45801: LD_VAR 0 4
45805: PPUSH
45806: LD_VAR 0 8
45810: PPUSH
45811: LD_VAR 0 9
45815: PUSH
45816: LD_VAR 0 10
45820: PLUS
45821: PPUSH
45822: CALL_OW 272
45826: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45827: LD_ADDR_VAR 0 7
45831: PUSH
45832: LD_VAR 0 6
45836: PPUSH
45837: LD_VAR 0 8
45841: PPUSH
45842: LD_VAR 0 9
45846: PUSH
45847: LD_VAR 0 10
45851: PLUS
45852: PPUSH
45853: CALL_OW 273
45857: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45858: LD_VAR 0 5
45862: PPUSH
45863: LD_VAR 0 7
45867: PPUSH
45868: CALL_OW 488
45872: PUSH
45873: LD_VAR 0 5
45877: PPUSH
45878: LD_VAR 0 7
45882: PPUSH
45883: CALL_OW 428
45887: PPUSH
45888: CALL_OW 247
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: IN
45903: NOT
45904: AND
45905: IFFALSE 45949
// begin ComMoveXY ( unit , _x , _y ) ;
45907: LD_VAR 0 1
45911: PPUSH
45912: LD_VAR 0 5
45916: PPUSH
45917: LD_VAR 0 7
45921: PPUSH
45922: CALL_OW 111
// result := [ _x , _y ] ;
45926: LD_ADDR_VAR 0 3
45930: PUSH
45931: LD_VAR 0 5
45935: PUSH
45936: LD_VAR 0 7
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: ST_TO_ADDR
// exit ;
45945: POP
45946: POP
45947: GO 45953
// end ; end ;
45949: GO 45793
45951: POP
45952: POP
// end ;
45953: LD_VAR 0 3
45957: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45958: LD_INT 0
45960: PPUSH
45961: PPUSH
45962: PPUSH
// result := 0 ;
45963: LD_ADDR_VAR 0 3
45967: PUSH
45968: LD_INT 0
45970: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45971: LD_VAR 0 1
45975: PUSH
45976: LD_INT 0
45978: LESS
45979: PUSH
45980: LD_VAR 0 1
45984: PUSH
45985: LD_INT 8
45987: GREATER
45988: OR
45989: PUSH
45990: LD_VAR 0 2
45994: PUSH
45995: LD_INT 0
45997: LESS
45998: OR
45999: PUSH
46000: LD_VAR 0 2
46004: PUSH
46005: LD_INT 8
46007: GREATER
46008: OR
46009: IFFALSE 46013
// exit ;
46011: GO 46088
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46013: LD_ADDR_VAR 0 4
46017: PUSH
46018: LD_INT 22
46020: PUSH
46021: LD_VAR 0 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PPUSH
46030: CALL_OW 69
46034: PUSH
46035: FOR_IN
46036: IFFALSE 46086
// begin un := UnitShoot ( i ) ;
46038: LD_ADDR_VAR 0 5
46042: PUSH
46043: LD_VAR 0 4
46047: PPUSH
46048: CALL_OW 504
46052: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46053: LD_VAR 0 5
46057: PPUSH
46058: CALL_OW 255
46062: PUSH
46063: LD_VAR 0 1
46067: EQUAL
46068: IFFALSE 46084
// begin result := un ;
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_VAR 0 5
46079: ST_TO_ADDR
// exit ;
46080: POP
46081: POP
46082: GO 46088
// end ; end ;
46084: GO 46035
46086: POP
46087: POP
// end ; end_of_file
46088: LD_VAR 0 3
46092: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
46093: LD_VAR 0 2
46097: PUSH
46098: LD_INT 100
46100: EQUAL
46101: IFFALSE 47050
// begin if not StreamModeActive then
46103: LD_EXP 28
46107: NOT
46108: IFFALSE 46118
// StreamModeActive := true ;
46110: LD_ADDR_EXP 28
46114: PUSH
46115: LD_INT 1
46117: ST_TO_ADDR
// if p3 = 0 then
46118: LD_VAR 0 3
46122: PUSH
46123: LD_INT 0
46125: EQUAL
46126: IFFALSE 46132
// InitStreamMode ;
46128: CALL 47208 0 0
// if p3 = 1 then
46132: LD_VAR 0 3
46136: PUSH
46137: LD_INT 1
46139: EQUAL
46140: IFFALSE 46150
// sRocket := true ;
46142: LD_ADDR_EXP 33
46146: PUSH
46147: LD_INT 1
46149: ST_TO_ADDR
// if p3 = 2 then
46150: LD_VAR 0 3
46154: PUSH
46155: LD_INT 2
46157: EQUAL
46158: IFFALSE 46168
// sSpeed := true ;
46160: LD_ADDR_EXP 32
46164: PUSH
46165: LD_INT 1
46167: ST_TO_ADDR
// if p3 = 3 then
46168: LD_VAR 0 3
46172: PUSH
46173: LD_INT 3
46175: EQUAL
46176: IFFALSE 46186
// sEngine := true ;
46178: LD_ADDR_EXP 34
46182: PUSH
46183: LD_INT 1
46185: ST_TO_ADDR
// if p3 = 4 then
46186: LD_VAR 0 3
46190: PUSH
46191: LD_INT 4
46193: EQUAL
46194: IFFALSE 46204
// sSpec := true ;
46196: LD_ADDR_EXP 31
46200: PUSH
46201: LD_INT 1
46203: ST_TO_ADDR
// if p3 = 5 then
46204: LD_VAR 0 3
46208: PUSH
46209: LD_INT 5
46211: EQUAL
46212: IFFALSE 46222
// sLevel := true ;
46214: LD_ADDR_EXP 35
46218: PUSH
46219: LD_INT 1
46221: ST_TO_ADDR
// if p3 = 6 then
46222: LD_VAR 0 3
46226: PUSH
46227: LD_INT 6
46229: EQUAL
46230: IFFALSE 46240
// sArmoury := true ;
46232: LD_ADDR_EXP 36
46236: PUSH
46237: LD_INT 1
46239: ST_TO_ADDR
// if p3 = 7 then
46240: LD_VAR 0 3
46244: PUSH
46245: LD_INT 7
46247: EQUAL
46248: IFFALSE 46258
// sRadar := true ;
46250: LD_ADDR_EXP 37
46254: PUSH
46255: LD_INT 1
46257: ST_TO_ADDR
// if p3 = 8 then
46258: LD_VAR 0 3
46262: PUSH
46263: LD_INT 8
46265: EQUAL
46266: IFFALSE 46276
// sBunker := true ;
46268: LD_ADDR_EXP 38
46272: PUSH
46273: LD_INT 1
46275: ST_TO_ADDR
// if p3 = 9 then
46276: LD_VAR 0 3
46280: PUSH
46281: LD_INT 9
46283: EQUAL
46284: IFFALSE 46294
// sHack := true ;
46286: LD_ADDR_EXP 39
46290: PUSH
46291: LD_INT 1
46293: ST_TO_ADDR
// if p3 = 10 then
46294: LD_VAR 0 3
46298: PUSH
46299: LD_INT 10
46301: EQUAL
46302: IFFALSE 46312
// sFire := true ;
46304: LD_ADDR_EXP 40
46308: PUSH
46309: LD_INT 1
46311: ST_TO_ADDR
// if p3 = 11 then
46312: LD_VAR 0 3
46316: PUSH
46317: LD_INT 11
46319: EQUAL
46320: IFFALSE 46330
// sRefresh := true ;
46322: LD_ADDR_EXP 41
46326: PUSH
46327: LD_INT 1
46329: ST_TO_ADDR
// if p3 = 12 then
46330: LD_VAR 0 3
46334: PUSH
46335: LD_INT 12
46337: EQUAL
46338: IFFALSE 46348
// sExp := true ;
46340: LD_ADDR_EXP 42
46344: PUSH
46345: LD_INT 1
46347: ST_TO_ADDR
// if p3 = 13 then
46348: LD_VAR 0 3
46352: PUSH
46353: LD_INT 13
46355: EQUAL
46356: IFFALSE 46366
// sDepot := true ;
46358: LD_ADDR_EXP 43
46362: PUSH
46363: LD_INT 1
46365: ST_TO_ADDR
// if p3 = 14 then
46366: LD_VAR 0 3
46370: PUSH
46371: LD_INT 14
46373: EQUAL
46374: IFFALSE 46384
// sFlag := true ;
46376: LD_ADDR_EXP 44
46380: PUSH
46381: LD_INT 1
46383: ST_TO_ADDR
// if p3 = 15 then
46384: LD_VAR 0 3
46388: PUSH
46389: LD_INT 15
46391: EQUAL
46392: IFFALSE 46402
// sKamikadze := true ;
46394: LD_ADDR_EXP 52
46398: PUSH
46399: LD_INT 1
46401: ST_TO_ADDR
// if p3 = 16 then
46402: LD_VAR 0 3
46406: PUSH
46407: LD_INT 16
46409: EQUAL
46410: IFFALSE 46420
// sTroll := true ;
46412: LD_ADDR_EXP 53
46416: PUSH
46417: LD_INT 1
46419: ST_TO_ADDR
// if p3 = 17 then
46420: LD_VAR 0 3
46424: PUSH
46425: LD_INT 17
46427: EQUAL
46428: IFFALSE 46438
// sSlow := true ;
46430: LD_ADDR_EXP 54
46434: PUSH
46435: LD_INT 1
46437: ST_TO_ADDR
// if p3 = 18 then
46438: LD_VAR 0 3
46442: PUSH
46443: LD_INT 18
46445: EQUAL
46446: IFFALSE 46456
// sLack := true ;
46448: LD_ADDR_EXP 55
46452: PUSH
46453: LD_INT 1
46455: ST_TO_ADDR
// if p3 = 19 then
46456: LD_VAR 0 3
46460: PUSH
46461: LD_INT 19
46463: EQUAL
46464: IFFALSE 46474
// sTank := true ;
46466: LD_ADDR_EXP 57
46470: PUSH
46471: LD_INT 1
46473: ST_TO_ADDR
// if p3 = 20 then
46474: LD_VAR 0 3
46478: PUSH
46479: LD_INT 20
46481: EQUAL
46482: IFFALSE 46492
// sRemote := true ;
46484: LD_ADDR_EXP 58
46488: PUSH
46489: LD_INT 1
46491: ST_TO_ADDR
// if p3 = 21 then
46492: LD_VAR 0 3
46496: PUSH
46497: LD_INT 21
46499: EQUAL
46500: IFFALSE 46510
// sPowell := true ;
46502: LD_ADDR_EXP 59
46506: PUSH
46507: LD_INT 1
46509: ST_TO_ADDR
// if p3 = 22 then
46510: LD_VAR 0 3
46514: PUSH
46515: LD_INT 22
46517: EQUAL
46518: IFFALSE 46528
// sTeleport := true ;
46520: LD_ADDR_EXP 62
46524: PUSH
46525: LD_INT 1
46527: ST_TO_ADDR
// if p3 = 23 then
46528: LD_VAR 0 3
46532: PUSH
46533: LD_INT 23
46535: EQUAL
46536: IFFALSE 46546
// sOilTower := true ;
46538: LD_ADDR_EXP 64
46542: PUSH
46543: LD_INT 1
46545: ST_TO_ADDR
// if p3 = 24 then
46546: LD_VAR 0 3
46550: PUSH
46551: LD_INT 24
46553: EQUAL
46554: IFFALSE 46564
// sShovel := true ;
46556: LD_ADDR_EXP 65
46560: PUSH
46561: LD_INT 1
46563: ST_TO_ADDR
// if p3 = 25 then
46564: LD_VAR 0 3
46568: PUSH
46569: LD_INT 25
46571: EQUAL
46572: IFFALSE 46582
// sSheik := true ;
46574: LD_ADDR_EXP 66
46578: PUSH
46579: LD_INT 1
46581: ST_TO_ADDR
// if p3 = 26 then
46582: LD_VAR 0 3
46586: PUSH
46587: LD_INT 26
46589: EQUAL
46590: IFFALSE 46600
// sEarthquake := true ;
46592: LD_ADDR_EXP 68
46596: PUSH
46597: LD_INT 1
46599: ST_TO_ADDR
// if p3 = 27 then
46600: LD_VAR 0 3
46604: PUSH
46605: LD_INT 27
46607: EQUAL
46608: IFFALSE 46618
// sAI := true ;
46610: LD_ADDR_EXP 69
46614: PUSH
46615: LD_INT 1
46617: ST_TO_ADDR
// if p3 = 28 then
46618: LD_VAR 0 3
46622: PUSH
46623: LD_INT 28
46625: EQUAL
46626: IFFALSE 46636
// sCargo := true ;
46628: LD_ADDR_EXP 72
46632: PUSH
46633: LD_INT 1
46635: ST_TO_ADDR
// if p3 = 29 then
46636: LD_VAR 0 3
46640: PUSH
46641: LD_INT 29
46643: EQUAL
46644: IFFALSE 46654
// sDLaser := true ;
46646: LD_ADDR_EXP 73
46650: PUSH
46651: LD_INT 1
46653: ST_TO_ADDR
// if p3 = 30 then
46654: LD_VAR 0 3
46658: PUSH
46659: LD_INT 30
46661: EQUAL
46662: IFFALSE 46672
// sExchange := true ;
46664: LD_ADDR_EXP 74
46668: PUSH
46669: LD_INT 1
46671: ST_TO_ADDR
// if p3 = 31 then
46672: LD_VAR 0 3
46676: PUSH
46677: LD_INT 31
46679: EQUAL
46680: IFFALSE 46690
// sFac := true ;
46682: LD_ADDR_EXP 75
46686: PUSH
46687: LD_INT 1
46689: ST_TO_ADDR
// if p3 = 32 then
46690: LD_VAR 0 3
46694: PUSH
46695: LD_INT 32
46697: EQUAL
46698: IFFALSE 46708
// sPower := true ;
46700: LD_ADDR_EXP 76
46704: PUSH
46705: LD_INT 1
46707: ST_TO_ADDR
// if p3 = 33 then
46708: LD_VAR 0 3
46712: PUSH
46713: LD_INT 33
46715: EQUAL
46716: IFFALSE 46726
// sRandom := true ;
46718: LD_ADDR_EXP 77
46722: PUSH
46723: LD_INT 1
46725: ST_TO_ADDR
// if p3 = 34 then
46726: LD_VAR 0 3
46730: PUSH
46731: LD_INT 34
46733: EQUAL
46734: IFFALSE 46744
// sShield := true ;
46736: LD_ADDR_EXP 78
46740: PUSH
46741: LD_INT 1
46743: ST_TO_ADDR
// if p3 = 35 then
46744: LD_VAR 0 3
46748: PUSH
46749: LD_INT 35
46751: EQUAL
46752: IFFALSE 46762
// sTime := true ;
46754: LD_ADDR_EXP 79
46758: PUSH
46759: LD_INT 1
46761: ST_TO_ADDR
// if p3 = 36 then
46762: LD_VAR 0 3
46766: PUSH
46767: LD_INT 36
46769: EQUAL
46770: IFFALSE 46780
// sTools := true ;
46772: LD_ADDR_EXP 80
46776: PUSH
46777: LD_INT 1
46779: ST_TO_ADDR
// if p3 = 101 then
46780: LD_VAR 0 3
46784: PUSH
46785: LD_INT 101
46787: EQUAL
46788: IFFALSE 46798
// sSold := true ;
46790: LD_ADDR_EXP 45
46794: PUSH
46795: LD_INT 1
46797: ST_TO_ADDR
// if p3 = 102 then
46798: LD_VAR 0 3
46802: PUSH
46803: LD_INT 102
46805: EQUAL
46806: IFFALSE 46816
// sDiff := true ;
46808: LD_ADDR_EXP 46
46812: PUSH
46813: LD_INT 1
46815: ST_TO_ADDR
// if p3 = 103 then
46816: LD_VAR 0 3
46820: PUSH
46821: LD_INT 103
46823: EQUAL
46824: IFFALSE 46834
// sFog := true ;
46826: LD_ADDR_EXP 49
46830: PUSH
46831: LD_INT 1
46833: ST_TO_ADDR
// if p3 = 104 then
46834: LD_VAR 0 3
46838: PUSH
46839: LD_INT 104
46841: EQUAL
46842: IFFALSE 46852
// sReset := true ;
46844: LD_ADDR_EXP 50
46848: PUSH
46849: LD_INT 1
46851: ST_TO_ADDR
// if p3 = 105 then
46852: LD_VAR 0 3
46856: PUSH
46857: LD_INT 105
46859: EQUAL
46860: IFFALSE 46870
// sSun := true ;
46862: LD_ADDR_EXP 51
46866: PUSH
46867: LD_INT 1
46869: ST_TO_ADDR
// if p3 = 106 then
46870: LD_VAR 0 3
46874: PUSH
46875: LD_INT 106
46877: EQUAL
46878: IFFALSE 46888
// sTiger := true ;
46880: LD_ADDR_EXP 47
46884: PUSH
46885: LD_INT 1
46887: ST_TO_ADDR
// if p3 = 107 then
46888: LD_VAR 0 3
46892: PUSH
46893: LD_INT 107
46895: EQUAL
46896: IFFALSE 46906
// sBomb := true ;
46898: LD_ADDR_EXP 48
46902: PUSH
46903: LD_INT 1
46905: ST_TO_ADDR
// if p3 = 108 then
46906: LD_VAR 0 3
46910: PUSH
46911: LD_INT 108
46913: EQUAL
46914: IFFALSE 46924
// sWound := true ;
46916: LD_ADDR_EXP 56
46920: PUSH
46921: LD_INT 1
46923: ST_TO_ADDR
// if p3 = 109 then
46924: LD_VAR 0 3
46928: PUSH
46929: LD_INT 109
46931: EQUAL
46932: IFFALSE 46942
// sBetray := true ;
46934: LD_ADDR_EXP 60
46938: PUSH
46939: LD_INT 1
46941: ST_TO_ADDR
// if p3 = 110 then
46942: LD_VAR 0 3
46946: PUSH
46947: LD_INT 110
46949: EQUAL
46950: IFFALSE 46960
// sContamin := true ;
46952: LD_ADDR_EXP 61
46956: PUSH
46957: LD_INT 1
46959: ST_TO_ADDR
// if p3 = 111 then
46960: LD_VAR 0 3
46964: PUSH
46965: LD_INT 111
46967: EQUAL
46968: IFFALSE 46978
// sOil := true ;
46970: LD_ADDR_EXP 63
46974: PUSH
46975: LD_INT 1
46977: ST_TO_ADDR
// if p3 = 112 then
46978: LD_VAR 0 3
46982: PUSH
46983: LD_INT 112
46985: EQUAL
46986: IFFALSE 46996
// sStu := true ;
46988: LD_ADDR_EXP 67
46992: PUSH
46993: LD_INT 1
46995: ST_TO_ADDR
// if p3 = 113 then
46996: LD_VAR 0 3
47000: PUSH
47001: LD_INT 113
47003: EQUAL
47004: IFFALSE 47014
// sBazooka := true ;
47006: LD_ADDR_EXP 70
47010: PUSH
47011: LD_INT 1
47013: ST_TO_ADDR
// if p3 = 114 then
47014: LD_VAR 0 3
47018: PUSH
47019: LD_INT 114
47021: EQUAL
47022: IFFALSE 47032
// sMortar := true ;
47024: LD_ADDR_EXP 71
47028: PUSH
47029: LD_INT 1
47031: ST_TO_ADDR
// if p3 = 115 then
47032: LD_VAR 0 3
47036: PUSH
47037: LD_INT 115
47039: EQUAL
47040: IFFALSE 47050
// sRanger := true ;
47042: LD_ADDR_EXP 81
47046: PUSH
47047: LD_INT 1
47049: ST_TO_ADDR
// end ; if p2 = 101 then
47050: LD_VAR 0 2
47054: PUSH
47055: LD_INT 101
47057: EQUAL
47058: IFFALSE 47186
// begin case p3 of 1 :
47060: LD_VAR 0 3
47064: PUSH
47065: LD_INT 1
47067: DOUBLE
47068: EQUAL
47069: IFTRUE 47073
47071: GO 47080
47073: POP
// hHackUnlimitedResources ; 2 :
47074: CALL 58221 0 0
47078: GO 47186
47080: LD_INT 2
47082: DOUBLE
47083: EQUAL
47084: IFTRUE 47088
47086: GO 47095
47088: POP
// hHackSetLevel10 ; 3 :
47089: CALL 58354 0 0
47093: GO 47186
47095: LD_INT 3
47097: DOUBLE
47098: EQUAL
47099: IFTRUE 47103
47101: GO 47110
47103: POP
// hHackSetLevel10YourUnits ; 4 :
47104: CALL 58439 0 0
47108: GO 47186
47110: LD_INT 4
47112: DOUBLE
47113: EQUAL
47114: IFTRUE 47118
47116: GO 47125
47118: POP
// hHackInvincible ; 5 :
47119: CALL 58887 0 0
47123: GO 47186
47125: LD_INT 5
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47140
47133: POP
// hHackInvisible ; 6 :
47134: CALL 58998 0 0
47138: GO 47186
47140: LD_INT 6
47142: DOUBLE
47143: EQUAL
47144: IFTRUE 47148
47146: GO 47155
47148: POP
// hHackChangeYourSide ; 7 :
47149: CALL 59055 0 0
47153: GO 47186
47155: LD_INT 7
47157: DOUBLE
47158: EQUAL
47159: IFTRUE 47163
47161: GO 47170
47163: POP
// hHackChangeUnitSide ; 8 :
47164: CALL 59097 0 0
47168: GO 47186
47170: LD_INT 8
47172: DOUBLE
47173: EQUAL
47174: IFTRUE 47178
47176: GO 47185
47178: POP
// hHackFog ; end ;
47179: CALL 59198 0 0
47183: GO 47186
47185: POP
// end ; end ;
47186: PPOPN 6
47188: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
47189: GO 47191
47191: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
47192: LD_STRING initStreamRollete();
47194: PPUSH
47195: CALL_OW 559
// InitStreamMode ;
47199: CALL 47208 0 0
// DefineStreamItems ( ) ;
47203: CALL 47648 0 0
// end ;
47207: END
// function InitStreamMode ; begin
47208: LD_INT 0
47210: PPUSH
// streamModeActive := false ;
47211: LD_ADDR_EXP 28
47215: PUSH
47216: LD_INT 0
47218: ST_TO_ADDR
// normalCounter := 36 ;
47219: LD_ADDR_EXP 29
47223: PUSH
47224: LD_INT 36
47226: ST_TO_ADDR
// hardcoreCounter := 16 ;
47227: LD_ADDR_EXP 30
47231: PUSH
47232: LD_INT 16
47234: ST_TO_ADDR
// sRocket := false ;
47235: LD_ADDR_EXP 33
47239: PUSH
47240: LD_INT 0
47242: ST_TO_ADDR
// sSpeed := false ;
47243: LD_ADDR_EXP 32
47247: PUSH
47248: LD_INT 0
47250: ST_TO_ADDR
// sEngine := false ;
47251: LD_ADDR_EXP 34
47255: PUSH
47256: LD_INT 0
47258: ST_TO_ADDR
// sSpec := false ;
47259: LD_ADDR_EXP 31
47263: PUSH
47264: LD_INT 0
47266: ST_TO_ADDR
// sLevel := false ;
47267: LD_ADDR_EXP 35
47271: PUSH
47272: LD_INT 0
47274: ST_TO_ADDR
// sArmoury := false ;
47275: LD_ADDR_EXP 36
47279: PUSH
47280: LD_INT 0
47282: ST_TO_ADDR
// sRadar := false ;
47283: LD_ADDR_EXP 37
47287: PUSH
47288: LD_INT 0
47290: ST_TO_ADDR
// sBunker := false ;
47291: LD_ADDR_EXP 38
47295: PUSH
47296: LD_INT 0
47298: ST_TO_ADDR
// sHack := false ;
47299: LD_ADDR_EXP 39
47303: PUSH
47304: LD_INT 0
47306: ST_TO_ADDR
// sFire := false ;
47307: LD_ADDR_EXP 40
47311: PUSH
47312: LD_INT 0
47314: ST_TO_ADDR
// sRefresh := false ;
47315: LD_ADDR_EXP 41
47319: PUSH
47320: LD_INT 0
47322: ST_TO_ADDR
// sExp := false ;
47323: LD_ADDR_EXP 42
47327: PUSH
47328: LD_INT 0
47330: ST_TO_ADDR
// sDepot := false ;
47331: LD_ADDR_EXP 43
47335: PUSH
47336: LD_INT 0
47338: ST_TO_ADDR
// sFlag := false ;
47339: LD_ADDR_EXP 44
47343: PUSH
47344: LD_INT 0
47346: ST_TO_ADDR
// sKamikadze := false ;
47347: LD_ADDR_EXP 52
47351: PUSH
47352: LD_INT 0
47354: ST_TO_ADDR
// sTroll := false ;
47355: LD_ADDR_EXP 53
47359: PUSH
47360: LD_INT 0
47362: ST_TO_ADDR
// sSlow := false ;
47363: LD_ADDR_EXP 54
47367: PUSH
47368: LD_INT 0
47370: ST_TO_ADDR
// sLack := false ;
47371: LD_ADDR_EXP 55
47375: PUSH
47376: LD_INT 0
47378: ST_TO_ADDR
// sTank := false ;
47379: LD_ADDR_EXP 57
47383: PUSH
47384: LD_INT 0
47386: ST_TO_ADDR
// sRemote := false ;
47387: LD_ADDR_EXP 58
47391: PUSH
47392: LD_INT 0
47394: ST_TO_ADDR
// sPowell := false ;
47395: LD_ADDR_EXP 59
47399: PUSH
47400: LD_INT 0
47402: ST_TO_ADDR
// sTeleport := false ;
47403: LD_ADDR_EXP 62
47407: PUSH
47408: LD_INT 0
47410: ST_TO_ADDR
// sOilTower := false ;
47411: LD_ADDR_EXP 64
47415: PUSH
47416: LD_INT 0
47418: ST_TO_ADDR
// sShovel := false ;
47419: LD_ADDR_EXP 65
47423: PUSH
47424: LD_INT 0
47426: ST_TO_ADDR
// sSheik := false ;
47427: LD_ADDR_EXP 66
47431: PUSH
47432: LD_INT 0
47434: ST_TO_ADDR
// sEarthquake := false ;
47435: LD_ADDR_EXP 68
47439: PUSH
47440: LD_INT 0
47442: ST_TO_ADDR
// sAI := false ;
47443: LD_ADDR_EXP 69
47447: PUSH
47448: LD_INT 0
47450: ST_TO_ADDR
// sCargo := false ;
47451: LD_ADDR_EXP 72
47455: PUSH
47456: LD_INT 0
47458: ST_TO_ADDR
// sDLaser := false ;
47459: LD_ADDR_EXP 73
47463: PUSH
47464: LD_INT 0
47466: ST_TO_ADDR
// sExchange := false ;
47467: LD_ADDR_EXP 74
47471: PUSH
47472: LD_INT 0
47474: ST_TO_ADDR
// sFac := false ;
47475: LD_ADDR_EXP 75
47479: PUSH
47480: LD_INT 0
47482: ST_TO_ADDR
// sPower := false ;
47483: LD_ADDR_EXP 76
47487: PUSH
47488: LD_INT 0
47490: ST_TO_ADDR
// sRandom := false ;
47491: LD_ADDR_EXP 77
47495: PUSH
47496: LD_INT 0
47498: ST_TO_ADDR
// sShield := false ;
47499: LD_ADDR_EXP 78
47503: PUSH
47504: LD_INT 0
47506: ST_TO_ADDR
// sTime := false ;
47507: LD_ADDR_EXP 79
47511: PUSH
47512: LD_INT 0
47514: ST_TO_ADDR
// sTools := false ;
47515: LD_ADDR_EXP 80
47519: PUSH
47520: LD_INT 0
47522: ST_TO_ADDR
// sSold := false ;
47523: LD_ADDR_EXP 45
47527: PUSH
47528: LD_INT 0
47530: ST_TO_ADDR
// sDiff := false ;
47531: LD_ADDR_EXP 46
47535: PUSH
47536: LD_INT 0
47538: ST_TO_ADDR
// sFog := false ;
47539: LD_ADDR_EXP 49
47543: PUSH
47544: LD_INT 0
47546: ST_TO_ADDR
// sReset := false ;
47547: LD_ADDR_EXP 50
47551: PUSH
47552: LD_INT 0
47554: ST_TO_ADDR
// sSun := false ;
47555: LD_ADDR_EXP 51
47559: PUSH
47560: LD_INT 0
47562: ST_TO_ADDR
// sTiger := false ;
47563: LD_ADDR_EXP 47
47567: PUSH
47568: LD_INT 0
47570: ST_TO_ADDR
// sBomb := false ;
47571: LD_ADDR_EXP 48
47575: PUSH
47576: LD_INT 0
47578: ST_TO_ADDR
// sWound := false ;
47579: LD_ADDR_EXP 56
47583: PUSH
47584: LD_INT 0
47586: ST_TO_ADDR
// sBetray := false ;
47587: LD_ADDR_EXP 60
47591: PUSH
47592: LD_INT 0
47594: ST_TO_ADDR
// sContamin := false ;
47595: LD_ADDR_EXP 61
47599: PUSH
47600: LD_INT 0
47602: ST_TO_ADDR
// sOil := false ;
47603: LD_ADDR_EXP 63
47607: PUSH
47608: LD_INT 0
47610: ST_TO_ADDR
// sStu := false ;
47611: LD_ADDR_EXP 67
47615: PUSH
47616: LD_INT 0
47618: ST_TO_ADDR
// sBazooka := false ;
47619: LD_ADDR_EXP 70
47623: PUSH
47624: LD_INT 0
47626: ST_TO_ADDR
// sMortar := false ;
47627: LD_ADDR_EXP 71
47631: PUSH
47632: LD_INT 0
47634: ST_TO_ADDR
// sRanger := false ;
47635: LD_ADDR_EXP 81
47639: PUSH
47640: LD_INT 0
47642: ST_TO_ADDR
// end ;
47643: LD_VAR 0 1
47647: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
47648: LD_INT 0
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
// result := [ ] ;
47655: LD_ADDR_VAR 0 1
47659: PUSH
47660: EMPTY
47661: ST_TO_ADDR
// if campaign_id = 1 then
47662: LD_OWVAR 69
47666: PUSH
47667: LD_INT 1
47669: EQUAL
47670: IFFALSE 50608
// begin case mission_number of 1 :
47672: LD_OWVAR 70
47676: PUSH
47677: LD_INT 1
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47685
47683: GO 47749
47685: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
47686: LD_ADDR_VAR 0 1
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 4
47696: PUSH
47697: LD_INT 11
47699: PUSH
47700: LD_INT 12
47702: PUSH
47703: LD_INT 15
47705: PUSH
47706: LD_INT 16
47708: PUSH
47709: LD_INT 22
47711: PUSH
47712: LD_INT 23
47714: PUSH
47715: LD_INT 26
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 101
47731: PUSH
47732: LD_INT 102
47734: PUSH
47735: LD_INT 106
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: ST_TO_ADDR
47747: GO 50606
47749: LD_INT 2
47751: DOUBLE
47752: EQUAL
47753: IFTRUE 47757
47755: GO 47829
47757: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
47758: LD_ADDR_VAR 0 1
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 4
47768: PUSH
47769: LD_INT 11
47771: PUSH
47772: LD_INT 12
47774: PUSH
47775: LD_INT 15
47777: PUSH
47778: LD_INT 16
47780: PUSH
47781: LD_INT 22
47783: PUSH
47784: LD_INT 23
47786: PUSH
47787: LD_INT 26
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 101
47803: PUSH
47804: LD_INT 102
47806: PUSH
47807: LD_INT 105
47809: PUSH
47810: LD_INT 106
47812: PUSH
47813: LD_INT 108
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: ST_TO_ADDR
47827: GO 50606
47829: LD_INT 3
47831: DOUBLE
47832: EQUAL
47833: IFTRUE 47837
47835: GO 47913
47837: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
47838: LD_ADDR_VAR 0 1
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: LD_INT 4
47848: PUSH
47849: LD_INT 5
47851: PUSH
47852: LD_INT 11
47854: PUSH
47855: LD_INT 12
47857: PUSH
47858: LD_INT 15
47860: PUSH
47861: LD_INT 16
47863: PUSH
47864: LD_INT 22
47866: PUSH
47867: LD_INT 26
47869: PUSH
47870: LD_INT 36
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 101
47887: PUSH
47888: LD_INT 102
47890: PUSH
47891: LD_INT 105
47893: PUSH
47894: LD_INT 106
47896: PUSH
47897: LD_INT 108
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: ST_TO_ADDR
47911: GO 50606
47913: LD_INT 4
47915: DOUBLE
47916: EQUAL
47917: IFTRUE 47921
47919: GO 48005
47921: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
47922: LD_ADDR_VAR 0 1
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 4
47932: PUSH
47933: LD_INT 5
47935: PUSH
47936: LD_INT 8
47938: PUSH
47939: LD_INT 11
47941: PUSH
47942: LD_INT 12
47944: PUSH
47945: LD_INT 15
47947: PUSH
47948: LD_INT 16
47950: PUSH
47951: LD_INT 22
47953: PUSH
47954: LD_INT 23
47956: PUSH
47957: LD_INT 26
47959: PUSH
47960: LD_INT 36
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 101
47979: PUSH
47980: LD_INT 102
47982: PUSH
47983: LD_INT 105
47985: PUSH
47986: LD_INT 106
47988: PUSH
47989: LD_INT 108
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: ST_TO_ADDR
48003: GO 50606
48005: LD_INT 5
48007: DOUBLE
48008: EQUAL
48009: IFTRUE 48013
48011: GO 48113
48013: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
48014: LD_ADDR_VAR 0 1
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 4
48024: PUSH
48025: LD_INT 5
48027: PUSH
48028: LD_INT 6
48030: PUSH
48031: LD_INT 8
48033: PUSH
48034: LD_INT 11
48036: PUSH
48037: LD_INT 12
48039: PUSH
48040: LD_INT 15
48042: PUSH
48043: LD_INT 16
48045: PUSH
48046: LD_INT 22
48048: PUSH
48049: LD_INT 23
48051: PUSH
48052: LD_INT 25
48054: PUSH
48055: LD_INT 26
48057: PUSH
48058: LD_INT 36
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 101
48079: PUSH
48080: LD_INT 102
48082: PUSH
48083: LD_INT 105
48085: PUSH
48086: LD_INT 106
48088: PUSH
48089: LD_INT 108
48091: PUSH
48092: LD_INT 109
48094: PUSH
48095: LD_INT 112
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: ST_TO_ADDR
48111: GO 50606
48113: LD_INT 6
48115: DOUBLE
48116: EQUAL
48117: IFTRUE 48121
48119: GO 48241
48121: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
48122: LD_ADDR_VAR 0 1
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 4
48132: PUSH
48133: LD_INT 5
48135: PUSH
48136: LD_INT 6
48138: PUSH
48139: LD_INT 8
48141: PUSH
48142: LD_INT 11
48144: PUSH
48145: LD_INT 12
48147: PUSH
48148: LD_INT 15
48150: PUSH
48151: LD_INT 16
48153: PUSH
48154: LD_INT 20
48156: PUSH
48157: LD_INT 21
48159: PUSH
48160: LD_INT 22
48162: PUSH
48163: LD_INT 23
48165: PUSH
48166: LD_INT 25
48168: PUSH
48169: LD_INT 26
48171: PUSH
48172: LD_INT 30
48174: PUSH
48175: LD_INT 31
48177: PUSH
48178: LD_INT 32
48180: PUSH
48181: LD_INT 36
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 101
48207: PUSH
48208: LD_INT 102
48210: PUSH
48211: LD_INT 105
48213: PUSH
48214: LD_INT 106
48216: PUSH
48217: LD_INT 108
48219: PUSH
48220: LD_INT 109
48222: PUSH
48223: LD_INT 112
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: ST_TO_ADDR
48239: GO 50606
48241: LD_INT 7
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48249
48247: GO 48349
48249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
48250: LD_ADDR_VAR 0 1
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: LD_INT 7
48266: PUSH
48267: LD_INT 11
48269: PUSH
48270: LD_INT 12
48272: PUSH
48273: LD_INT 15
48275: PUSH
48276: LD_INT 16
48278: PUSH
48279: LD_INT 20
48281: PUSH
48282: LD_INT 21
48284: PUSH
48285: LD_INT 22
48287: PUSH
48288: LD_INT 23
48290: PUSH
48291: LD_INT 25
48293: PUSH
48294: LD_INT 26
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 101
48315: PUSH
48316: LD_INT 102
48318: PUSH
48319: LD_INT 103
48321: PUSH
48322: LD_INT 105
48324: PUSH
48325: LD_INT 106
48327: PUSH
48328: LD_INT 108
48330: PUSH
48331: LD_INT 112
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: ST_TO_ADDR
48347: GO 50606
48349: LD_INT 8
48351: DOUBLE
48352: EQUAL
48353: IFTRUE 48357
48355: GO 48485
48357: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
48358: LD_ADDR_VAR 0 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 4
48368: PUSH
48369: LD_INT 5
48371: PUSH
48372: LD_INT 6
48374: PUSH
48375: LD_INT 7
48377: PUSH
48378: LD_INT 8
48380: PUSH
48381: LD_INT 11
48383: PUSH
48384: LD_INT 12
48386: PUSH
48387: LD_INT 15
48389: PUSH
48390: LD_INT 16
48392: PUSH
48393: LD_INT 20
48395: PUSH
48396: LD_INT 21
48398: PUSH
48399: LD_INT 22
48401: PUSH
48402: LD_INT 23
48404: PUSH
48405: LD_INT 25
48407: PUSH
48408: LD_INT 26
48410: PUSH
48411: LD_INT 30
48413: PUSH
48414: LD_INT 31
48416: PUSH
48417: LD_INT 32
48419: PUSH
48420: LD_INT 36
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 101
48447: PUSH
48448: LD_INT 102
48450: PUSH
48451: LD_INT 103
48453: PUSH
48454: LD_INT 105
48456: PUSH
48457: LD_INT 106
48459: PUSH
48460: LD_INT 108
48462: PUSH
48463: LD_INT 109
48465: PUSH
48466: LD_INT 112
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: ST_TO_ADDR
48483: GO 50606
48485: LD_INT 9
48487: DOUBLE
48488: EQUAL
48489: IFTRUE 48493
48491: GO 48629
48493: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
48494: LD_ADDR_VAR 0 1
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 4
48504: PUSH
48505: LD_INT 5
48507: PUSH
48508: LD_INT 6
48510: PUSH
48511: LD_INT 7
48513: PUSH
48514: LD_INT 8
48516: PUSH
48517: LD_INT 11
48519: PUSH
48520: LD_INT 12
48522: PUSH
48523: LD_INT 15
48525: PUSH
48526: LD_INT 16
48528: PUSH
48529: LD_INT 20
48531: PUSH
48532: LD_INT 21
48534: PUSH
48535: LD_INT 22
48537: PUSH
48538: LD_INT 23
48540: PUSH
48541: LD_INT 25
48543: PUSH
48544: LD_INT 26
48546: PUSH
48547: LD_INT 28
48549: PUSH
48550: LD_INT 30
48552: PUSH
48553: LD_INT 31
48555: PUSH
48556: LD_INT 32
48558: PUSH
48559: LD_INT 36
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 101
48587: PUSH
48588: LD_INT 102
48590: PUSH
48591: LD_INT 103
48593: PUSH
48594: LD_INT 105
48596: PUSH
48597: LD_INT 106
48599: PUSH
48600: LD_INT 108
48602: PUSH
48603: LD_INT 109
48605: PUSH
48606: LD_INT 112
48608: PUSH
48609: LD_INT 114
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: ST_TO_ADDR
48627: GO 50606
48629: LD_INT 10
48631: DOUBLE
48632: EQUAL
48633: IFTRUE 48637
48635: GO 48821
48637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
48638: LD_ADDR_VAR 0 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: LD_INT 4
48648: PUSH
48649: LD_INT 5
48651: PUSH
48652: LD_INT 6
48654: PUSH
48655: LD_INT 7
48657: PUSH
48658: LD_INT 8
48660: PUSH
48661: LD_INT 9
48663: PUSH
48664: LD_INT 10
48666: PUSH
48667: LD_INT 11
48669: PUSH
48670: LD_INT 12
48672: PUSH
48673: LD_INT 13
48675: PUSH
48676: LD_INT 14
48678: PUSH
48679: LD_INT 15
48681: PUSH
48682: LD_INT 16
48684: PUSH
48685: LD_INT 17
48687: PUSH
48688: LD_INT 18
48690: PUSH
48691: LD_INT 19
48693: PUSH
48694: LD_INT 20
48696: PUSH
48697: LD_INT 21
48699: PUSH
48700: LD_INT 22
48702: PUSH
48703: LD_INT 23
48705: PUSH
48706: LD_INT 24
48708: PUSH
48709: LD_INT 25
48711: PUSH
48712: LD_INT 26
48714: PUSH
48715: LD_INT 28
48717: PUSH
48718: LD_INT 30
48720: PUSH
48721: LD_INT 31
48723: PUSH
48724: LD_INT 32
48726: PUSH
48727: LD_INT 36
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 101
48763: PUSH
48764: LD_INT 102
48766: PUSH
48767: LD_INT 103
48769: PUSH
48770: LD_INT 104
48772: PUSH
48773: LD_INT 105
48775: PUSH
48776: LD_INT 106
48778: PUSH
48779: LD_INT 107
48781: PUSH
48782: LD_INT 108
48784: PUSH
48785: LD_INT 109
48787: PUSH
48788: LD_INT 110
48790: PUSH
48791: LD_INT 111
48793: PUSH
48794: LD_INT 112
48796: PUSH
48797: LD_INT 114
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: ST_TO_ADDR
48819: GO 50606
48821: LD_INT 11
48823: DOUBLE
48824: EQUAL
48825: IFTRUE 48829
48827: GO 49021
48829: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
48830: LD_ADDR_VAR 0 1
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: LD_INT 5
48846: PUSH
48847: LD_INT 6
48849: PUSH
48850: LD_INT 7
48852: PUSH
48853: LD_INT 8
48855: PUSH
48856: LD_INT 9
48858: PUSH
48859: LD_INT 10
48861: PUSH
48862: LD_INT 11
48864: PUSH
48865: LD_INT 12
48867: PUSH
48868: LD_INT 13
48870: PUSH
48871: LD_INT 14
48873: PUSH
48874: LD_INT 15
48876: PUSH
48877: LD_INT 16
48879: PUSH
48880: LD_INT 17
48882: PUSH
48883: LD_INT 18
48885: PUSH
48886: LD_INT 19
48888: PUSH
48889: LD_INT 20
48891: PUSH
48892: LD_INT 21
48894: PUSH
48895: LD_INT 22
48897: PUSH
48898: LD_INT 23
48900: PUSH
48901: LD_INT 24
48903: PUSH
48904: LD_INT 25
48906: PUSH
48907: LD_INT 26
48909: PUSH
48910: LD_INT 28
48912: PUSH
48913: LD_INT 30
48915: PUSH
48916: LD_INT 31
48918: PUSH
48919: LD_INT 32
48921: PUSH
48922: LD_INT 34
48924: PUSH
48925: LD_INT 36
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 101
48963: PUSH
48964: LD_INT 102
48966: PUSH
48967: LD_INT 103
48969: PUSH
48970: LD_INT 104
48972: PUSH
48973: LD_INT 105
48975: PUSH
48976: LD_INT 106
48978: PUSH
48979: LD_INT 107
48981: PUSH
48982: LD_INT 108
48984: PUSH
48985: LD_INT 109
48987: PUSH
48988: LD_INT 110
48990: PUSH
48991: LD_INT 111
48993: PUSH
48994: LD_INT 112
48996: PUSH
48997: LD_INT 114
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: ST_TO_ADDR
49019: GO 50606
49021: LD_INT 12
49023: DOUBLE
49024: EQUAL
49025: IFTRUE 49029
49027: GO 49237
49029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
49030: LD_ADDR_VAR 0 1
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: LD_INT 4
49046: PUSH
49047: LD_INT 5
49049: PUSH
49050: LD_INT 6
49052: PUSH
49053: LD_INT 7
49055: PUSH
49056: LD_INT 8
49058: PUSH
49059: LD_INT 9
49061: PUSH
49062: LD_INT 10
49064: PUSH
49065: LD_INT 11
49067: PUSH
49068: LD_INT 12
49070: PUSH
49071: LD_INT 13
49073: PUSH
49074: LD_INT 14
49076: PUSH
49077: LD_INT 15
49079: PUSH
49080: LD_INT 16
49082: PUSH
49083: LD_INT 17
49085: PUSH
49086: LD_INT 18
49088: PUSH
49089: LD_INT 19
49091: PUSH
49092: LD_INT 20
49094: PUSH
49095: LD_INT 21
49097: PUSH
49098: LD_INT 22
49100: PUSH
49101: LD_INT 23
49103: PUSH
49104: LD_INT 24
49106: PUSH
49107: LD_INT 25
49109: PUSH
49110: LD_INT 26
49112: PUSH
49113: LD_INT 27
49115: PUSH
49116: LD_INT 28
49118: PUSH
49119: LD_INT 30
49121: PUSH
49122: LD_INT 31
49124: PUSH
49125: LD_INT 32
49127: PUSH
49128: LD_INT 33
49130: PUSH
49131: LD_INT 34
49133: PUSH
49134: LD_INT 36
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 101
49175: PUSH
49176: LD_INT 102
49178: PUSH
49179: LD_INT 103
49181: PUSH
49182: LD_INT 104
49184: PUSH
49185: LD_INT 105
49187: PUSH
49188: LD_INT 106
49190: PUSH
49191: LD_INT 107
49193: PUSH
49194: LD_INT 108
49196: PUSH
49197: LD_INT 109
49199: PUSH
49200: LD_INT 110
49202: PUSH
49203: LD_INT 111
49205: PUSH
49206: LD_INT 112
49208: PUSH
49209: LD_INT 113
49211: PUSH
49212: LD_INT 114
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: ST_TO_ADDR
49235: GO 50606
49237: LD_INT 13
49239: DOUBLE
49240: EQUAL
49241: IFTRUE 49245
49243: GO 49441
49245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
49246: LD_ADDR_VAR 0 1
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 4
49262: PUSH
49263: LD_INT 5
49265: PUSH
49266: LD_INT 8
49268: PUSH
49269: LD_INT 9
49271: PUSH
49272: LD_INT 10
49274: PUSH
49275: LD_INT 11
49277: PUSH
49278: LD_INT 12
49280: PUSH
49281: LD_INT 14
49283: PUSH
49284: LD_INT 15
49286: PUSH
49287: LD_INT 16
49289: PUSH
49290: LD_INT 17
49292: PUSH
49293: LD_INT 18
49295: PUSH
49296: LD_INT 19
49298: PUSH
49299: LD_INT 20
49301: PUSH
49302: LD_INT 21
49304: PUSH
49305: LD_INT 22
49307: PUSH
49308: LD_INT 23
49310: PUSH
49311: LD_INT 24
49313: PUSH
49314: LD_INT 25
49316: PUSH
49317: LD_INT 26
49319: PUSH
49320: LD_INT 27
49322: PUSH
49323: LD_INT 28
49325: PUSH
49326: LD_INT 30
49328: PUSH
49329: LD_INT 31
49331: PUSH
49332: LD_INT 32
49334: PUSH
49335: LD_INT 33
49337: PUSH
49338: LD_INT 34
49340: PUSH
49341: LD_INT 36
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 101
49379: PUSH
49380: LD_INT 102
49382: PUSH
49383: LD_INT 103
49385: PUSH
49386: LD_INT 104
49388: PUSH
49389: LD_INT 105
49391: PUSH
49392: LD_INT 106
49394: PUSH
49395: LD_INT 107
49397: PUSH
49398: LD_INT 108
49400: PUSH
49401: LD_INT 109
49403: PUSH
49404: LD_INT 110
49406: PUSH
49407: LD_INT 111
49409: PUSH
49410: LD_INT 112
49412: PUSH
49413: LD_INT 113
49415: PUSH
49416: LD_INT 114
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: ST_TO_ADDR
49439: GO 50606
49441: LD_INT 14
49443: DOUBLE
49444: EQUAL
49445: IFTRUE 49449
49447: GO 49661
49449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
49450: LD_ADDR_VAR 0 1
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 4
49466: PUSH
49467: LD_INT 5
49469: PUSH
49470: LD_INT 6
49472: PUSH
49473: LD_INT 7
49475: PUSH
49476: LD_INT 8
49478: PUSH
49479: LD_INT 9
49481: PUSH
49482: LD_INT 10
49484: PUSH
49485: LD_INT 11
49487: PUSH
49488: LD_INT 12
49490: PUSH
49491: LD_INT 13
49493: PUSH
49494: LD_INT 14
49496: PUSH
49497: LD_INT 15
49499: PUSH
49500: LD_INT 16
49502: PUSH
49503: LD_INT 17
49505: PUSH
49506: LD_INT 18
49508: PUSH
49509: LD_INT 19
49511: PUSH
49512: LD_INT 20
49514: PUSH
49515: LD_INT 21
49517: PUSH
49518: LD_INT 22
49520: PUSH
49521: LD_INT 23
49523: PUSH
49524: LD_INT 24
49526: PUSH
49527: LD_INT 25
49529: PUSH
49530: LD_INT 26
49532: PUSH
49533: LD_INT 27
49535: PUSH
49536: LD_INT 28
49538: PUSH
49539: LD_INT 29
49541: PUSH
49542: LD_INT 30
49544: PUSH
49545: LD_INT 31
49547: PUSH
49548: LD_INT 32
49550: PUSH
49551: LD_INT 33
49553: PUSH
49554: LD_INT 34
49556: PUSH
49557: LD_INT 36
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 101
49599: PUSH
49600: LD_INT 102
49602: PUSH
49603: LD_INT 103
49605: PUSH
49606: LD_INT 104
49608: PUSH
49609: LD_INT 105
49611: PUSH
49612: LD_INT 106
49614: PUSH
49615: LD_INT 107
49617: PUSH
49618: LD_INT 108
49620: PUSH
49621: LD_INT 109
49623: PUSH
49624: LD_INT 110
49626: PUSH
49627: LD_INT 111
49629: PUSH
49630: LD_INT 112
49632: PUSH
49633: LD_INT 113
49635: PUSH
49636: LD_INT 114
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: ST_TO_ADDR
49659: GO 50606
49661: LD_INT 15
49663: DOUBLE
49664: EQUAL
49665: IFTRUE 49669
49667: GO 49881
49669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
49670: LD_ADDR_VAR 0 1
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: LD_INT 3
49683: PUSH
49684: LD_INT 4
49686: PUSH
49687: LD_INT 5
49689: PUSH
49690: LD_INT 6
49692: PUSH
49693: LD_INT 7
49695: PUSH
49696: LD_INT 8
49698: PUSH
49699: LD_INT 9
49701: PUSH
49702: LD_INT 10
49704: PUSH
49705: LD_INT 11
49707: PUSH
49708: LD_INT 12
49710: PUSH
49711: LD_INT 13
49713: PUSH
49714: LD_INT 14
49716: PUSH
49717: LD_INT 15
49719: PUSH
49720: LD_INT 16
49722: PUSH
49723: LD_INT 17
49725: PUSH
49726: LD_INT 18
49728: PUSH
49729: LD_INT 19
49731: PUSH
49732: LD_INT 20
49734: PUSH
49735: LD_INT 21
49737: PUSH
49738: LD_INT 22
49740: PUSH
49741: LD_INT 23
49743: PUSH
49744: LD_INT 24
49746: PUSH
49747: LD_INT 25
49749: PUSH
49750: LD_INT 26
49752: PUSH
49753: LD_INT 27
49755: PUSH
49756: LD_INT 28
49758: PUSH
49759: LD_INT 29
49761: PUSH
49762: LD_INT 30
49764: PUSH
49765: LD_INT 31
49767: PUSH
49768: LD_INT 32
49770: PUSH
49771: LD_INT 33
49773: PUSH
49774: LD_INT 34
49776: PUSH
49777: LD_INT 36
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 101
49819: PUSH
49820: LD_INT 102
49822: PUSH
49823: LD_INT 103
49825: PUSH
49826: LD_INT 104
49828: PUSH
49829: LD_INT 105
49831: PUSH
49832: LD_INT 106
49834: PUSH
49835: LD_INT 107
49837: PUSH
49838: LD_INT 108
49840: PUSH
49841: LD_INT 109
49843: PUSH
49844: LD_INT 110
49846: PUSH
49847: LD_INT 111
49849: PUSH
49850: LD_INT 112
49852: PUSH
49853: LD_INT 113
49855: PUSH
49856: LD_INT 114
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: ST_TO_ADDR
49879: GO 50606
49881: LD_INT 16
49883: DOUBLE
49884: EQUAL
49885: IFTRUE 49889
49887: GO 50013
49889: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
49890: LD_ADDR_VAR 0 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 5
49903: PUSH
49904: LD_INT 7
49906: PUSH
49907: LD_INT 11
49909: PUSH
49910: LD_INT 12
49912: PUSH
49913: LD_INT 15
49915: PUSH
49916: LD_INT 16
49918: PUSH
49919: LD_INT 20
49921: PUSH
49922: LD_INT 21
49924: PUSH
49925: LD_INT 22
49927: PUSH
49928: LD_INT 23
49930: PUSH
49931: LD_INT 25
49933: PUSH
49934: LD_INT 26
49936: PUSH
49937: LD_INT 30
49939: PUSH
49940: LD_INT 31
49942: PUSH
49943: LD_INT 32
49945: PUSH
49946: LD_INT 33
49948: PUSH
49949: LD_INT 34
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 101
49975: PUSH
49976: LD_INT 102
49978: PUSH
49979: LD_INT 103
49981: PUSH
49982: LD_INT 106
49984: PUSH
49985: LD_INT 108
49987: PUSH
49988: LD_INT 112
49990: PUSH
49991: LD_INT 113
49993: PUSH
49994: LD_INT 114
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: ST_TO_ADDR
50011: GO 50606
50013: LD_INT 17
50015: DOUBLE
50016: EQUAL
50017: IFTRUE 50021
50019: GO 50233
50021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
50022: LD_ADDR_VAR 0 1
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 2
50032: PUSH
50033: LD_INT 3
50035: PUSH
50036: LD_INT 4
50038: PUSH
50039: LD_INT 5
50041: PUSH
50042: LD_INT 6
50044: PUSH
50045: LD_INT 7
50047: PUSH
50048: LD_INT 8
50050: PUSH
50051: LD_INT 9
50053: PUSH
50054: LD_INT 10
50056: PUSH
50057: LD_INT 11
50059: PUSH
50060: LD_INT 12
50062: PUSH
50063: LD_INT 13
50065: PUSH
50066: LD_INT 14
50068: PUSH
50069: LD_INT 15
50071: PUSH
50072: LD_INT 16
50074: PUSH
50075: LD_INT 17
50077: PUSH
50078: LD_INT 18
50080: PUSH
50081: LD_INT 19
50083: PUSH
50084: LD_INT 20
50086: PUSH
50087: LD_INT 21
50089: PUSH
50090: LD_INT 22
50092: PUSH
50093: LD_INT 23
50095: PUSH
50096: LD_INT 24
50098: PUSH
50099: LD_INT 25
50101: PUSH
50102: LD_INT 26
50104: PUSH
50105: LD_INT 27
50107: PUSH
50108: LD_INT 28
50110: PUSH
50111: LD_INT 29
50113: PUSH
50114: LD_INT 30
50116: PUSH
50117: LD_INT 31
50119: PUSH
50120: LD_INT 32
50122: PUSH
50123: LD_INT 33
50125: PUSH
50126: LD_INT 34
50128: PUSH
50129: LD_INT 36
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 101
50171: PUSH
50172: LD_INT 102
50174: PUSH
50175: LD_INT 103
50177: PUSH
50178: LD_INT 104
50180: PUSH
50181: LD_INT 105
50183: PUSH
50184: LD_INT 106
50186: PUSH
50187: LD_INT 107
50189: PUSH
50190: LD_INT 108
50192: PUSH
50193: LD_INT 109
50195: PUSH
50196: LD_INT 110
50198: PUSH
50199: LD_INT 111
50201: PUSH
50202: LD_INT 112
50204: PUSH
50205: LD_INT 113
50207: PUSH
50208: LD_INT 114
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: ST_TO_ADDR
50231: GO 50606
50233: LD_INT 18
50235: DOUBLE
50236: EQUAL
50237: IFTRUE 50241
50239: GO 50377
50241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
50242: LD_ADDR_VAR 0 1
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 4
50252: PUSH
50253: LD_INT 5
50255: PUSH
50256: LD_INT 7
50258: PUSH
50259: LD_INT 11
50261: PUSH
50262: LD_INT 12
50264: PUSH
50265: LD_INT 15
50267: PUSH
50268: LD_INT 16
50270: PUSH
50271: LD_INT 20
50273: PUSH
50274: LD_INT 21
50276: PUSH
50277: LD_INT 22
50279: PUSH
50280: LD_INT 23
50282: PUSH
50283: LD_INT 25
50285: PUSH
50286: LD_INT 26
50288: PUSH
50289: LD_INT 30
50291: PUSH
50292: LD_INT 31
50294: PUSH
50295: LD_INT 32
50297: PUSH
50298: LD_INT 33
50300: PUSH
50301: LD_INT 34
50303: PUSH
50304: LD_INT 35
50306: PUSH
50307: LD_INT 36
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 101
50335: PUSH
50336: LD_INT 102
50338: PUSH
50339: LD_INT 103
50341: PUSH
50342: LD_INT 106
50344: PUSH
50345: LD_INT 108
50347: PUSH
50348: LD_INT 112
50350: PUSH
50351: LD_INT 113
50353: PUSH
50354: LD_INT 114
50356: PUSH
50357: LD_INT 115
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: ST_TO_ADDR
50375: GO 50606
50377: LD_INT 19
50379: DOUBLE
50380: EQUAL
50381: IFTRUE 50385
50383: GO 50605
50385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
50386: LD_ADDR_VAR 0 1
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: LD_INT 5
50405: PUSH
50406: LD_INT 6
50408: PUSH
50409: LD_INT 7
50411: PUSH
50412: LD_INT 8
50414: PUSH
50415: LD_INT 9
50417: PUSH
50418: LD_INT 10
50420: PUSH
50421: LD_INT 11
50423: PUSH
50424: LD_INT 12
50426: PUSH
50427: LD_INT 13
50429: PUSH
50430: LD_INT 14
50432: PUSH
50433: LD_INT 15
50435: PUSH
50436: LD_INT 16
50438: PUSH
50439: LD_INT 17
50441: PUSH
50442: LD_INT 18
50444: PUSH
50445: LD_INT 19
50447: PUSH
50448: LD_INT 20
50450: PUSH
50451: LD_INT 21
50453: PUSH
50454: LD_INT 22
50456: PUSH
50457: LD_INT 23
50459: PUSH
50460: LD_INT 24
50462: PUSH
50463: LD_INT 25
50465: PUSH
50466: LD_INT 26
50468: PUSH
50469: LD_INT 27
50471: PUSH
50472: LD_INT 28
50474: PUSH
50475: LD_INT 29
50477: PUSH
50478: LD_INT 30
50480: PUSH
50481: LD_INT 31
50483: PUSH
50484: LD_INT 32
50486: PUSH
50487: LD_INT 33
50489: PUSH
50490: LD_INT 34
50492: PUSH
50493: LD_INT 35
50495: PUSH
50496: LD_INT 36
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 101
50539: PUSH
50540: LD_INT 102
50542: PUSH
50543: LD_INT 103
50545: PUSH
50546: LD_INT 104
50548: PUSH
50549: LD_INT 105
50551: PUSH
50552: LD_INT 106
50554: PUSH
50555: LD_INT 107
50557: PUSH
50558: LD_INT 108
50560: PUSH
50561: LD_INT 109
50563: PUSH
50564: LD_INT 110
50566: PUSH
50567: LD_INT 111
50569: PUSH
50570: LD_INT 112
50572: PUSH
50573: LD_INT 113
50575: PUSH
50576: LD_INT 114
50578: PUSH
50579: LD_INT 115
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: ST_TO_ADDR
50603: GO 50606
50605: POP
// end else
50606: GO 50825
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
50608: LD_ADDR_VAR 0 1
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 5
50627: PUSH
50628: LD_INT 6
50630: PUSH
50631: LD_INT 7
50633: PUSH
50634: LD_INT 8
50636: PUSH
50637: LD_INT 9
50639: PUSH
50640: LD_INT 10
50642: PUSH
50643: LD_INT 11
50645: PUSH
50646: LD_INT 12
50648: PUSH
50649: LD_INT 13
50651: PUSH
50652: LD_INT 14
50654: PUSH
50655: LD_INT 15
50657: PUSH
50658: LD_INT 16
50660: PUSH
50661: LD_INT 17
50663: PUSH
50664: LD_INT 18
50666: PUSH
50667: LD_INT 19
50669: PUSH
50670: LD_INT 20
50672: PUSH
50673: LD_INT 21
50675: PUSH
50676: LD_INT 22
50678: PUSH
50679: LD_INT 23
50681: PUSH
50682: LD_INT 24
50684: PUSH
50685: LD_INT 25
50687: PUSH
50688: LD_INT 26
50690: PUSH
50691: LD_INT 27
50693: PUSH
50694: LD_INT 28
50696: PUSH
50697: LD_INT 29
50699: PUSH
50700: LD_INT 30
50702: PUSH
50703: LD_INT 31
50705: PUSH
50706: LD_INT 32
50708: PUSH
50709: LD_INT 33
50711: PUSH
50712: LD_INT 34
50714: PUSH
50715: LD_INT 35
50717: PUSH
50718: LD_INT 36
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 101
50761: PUSH
50762: LD_INT 102
50764: PUSH
50765: LD_INT 103
50767: PUSH
50768: LD_INT 104
50770: PUSH
50771: LD_INT 105
50773: PUSH
50774: LD_INT 106
50776: PUSH
50777: LD_INT 107
50779: PUSH
50780: LD_INT 108
50782: PUSH
50783: LD_INT 109
50785: PUSH
50786: LD_INT 110
50788: PUSH
50789: LD_INT 111
50791: PUSH
50792: LD_INT 112
50794: PUSH
50795: LD_INT 113
50797: PUSH
50798: LD_INT 114
50800: PUSH
50801: LD_INT 115
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// if result then
50825: LD_VAR 0 1
50829: IFFALSE 51118
// begin normal :=  ;
50831: LD_ADDR_VAR 0 3
50835: PUSH
50836: LD_STRING 
50838: ST_TO_ADDR
// hardcore :=  ;
50839: LD_ADDR_VAR 0 4
50843: PUSH
50844: LD_STRING 
50846: ST_TO_ADDR
// for i = 1 to normalCounter do
50847: LD_ADDR_VAR 0 5
50851: PUSH
50852: DOUBLE
50853: LD_INT 1
50855: DEC
50856: ST_TO_ADDR
50857: LD_EXP 29
50861: PUSH
50862: FOR_TO
50863: IFFALSE 50964
// begin tmp := 0 ;
50865: LD_ADDR_VAR 0 2
50869: PUSH
50870: LD_STRING 0
50872: ST_TO_ADDR
// if result [ 1 ] then
50873: LD_VAR 0 1
50877: PUSH
50878: LD_INT 1
50880: ARRAY
50881: IFFALSE 50946
// if result [ 1 ] [ 1 ] = i then
50883: LD_VAR 0 1
50887: PUSH
50888: LD_INT 1
50890: ARRAY
50891: PUSH
50892: LD_INT 1
50894: ARRAY
50895: PUSH
50896: LD_VAR 0 5
50900: EQUAL
50901: IFFALSE 50946
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50903: LD_ADDR_VAR 0 1
50907: PUSH
50908: LD_VAR 0 1
50912: PPUSH
50913: LD_INT 1
50915: PPUSH
50916: LD_VAR 0 1
50920: PUSH
50921: LD_INT 1
50923: ARRAY
50924: PPUSH
50925: LD_INT 1
50927: PPUSH
50928: CALL_OW 3
50932: PPUSH
50933: CALL_OW 1
50937: ST_TO_ADDR
// tmp := 1 ;
50938: LD_ADDR_VAR 0 2
50942: PUSH
50943: LD_STRING 1
50945: ST_TO_ADDR
// end ; normal := normal & tmp ;
50946: LD_ADDR_VAR 0 3
50950: PUSH
50951: LD_VAR 0 3
50955: PUSH
50956: LD_VAR 0 2
50960: STR
50961: ST_TO_ADDR
// end ;
50962: GO 50862
50964: POP
50965: POP
// for i = 1 to hardcoreCounter do
50966: LD_ADDR_VAR 0 5
50970: PUSH
50971: DOUBLE
50972: LD_INT 1
50974: DEC
50975: ST_TO_ADDR
50976: LD_EXP 30
50980: PUSH
50981: FOR_TO
50982: IFFALSE 51087
// begin tmp := 0 ;
50984: LD_ADDR_VAR 0 2
50988: PUSH
50989: LD_STRING 0
50991: ST_TO_ADDR
// if result [ 2 ] then
50992: LD_VAR 0 1
50996: PUSH
50997: LD_INT 2
50999: ARRAY
51000: IFFALSE 51069
// if result [ 2 ] [ 1 ] = 100 + i then
51002: LD_VAR 0 1
51006: PUSH
51007: LD_INT 2
51009: ARRAY
51010: PUSH
51011: LD_INT 1
51013: ARRAY
51014: PUSH
51015: LD_INT 100
51017: PUSH
51018: LD_VAR 0 5
51022: PLUS
51023: EQUAL
51024: IFFALSE 51069
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
51026: LD_ADDR_VAR 0 1
51030: PUSH
51031: LD_VAR 0 1
51035: PPUSH
51036: LD_INT 2
51038: PPUSH
51039: LD_VAR 0 1
51043: PUSH
51044: LD_INT 2
51046: ARRAY
51047: PPUSH
51048: LD_INT 1
51050: PPUSH
51051: CALL_OW 3
51055: PPUSH
51056: CALL_OW 1
51060: ST_TO_ADDR
// tmp := 1 ;
51061: LD_ADDR_VAR 0 2
51065: PUSH
51066: LD_STRING 1
51068: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
51069: LD_ADDR_VAR 0 4
51073: PUSH
51074: LD_VAR 0 4
51078: PUSH
51079: LD_VAR 0 2
51083: STR
51084: ST_TO_ADDR
// end ;
51085: GO 50981
51087: POP
51088: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
51089: LD_STRING getStreamItemsFromMission("
51091: PUSH
51092: LD_VAR 0 3
51096: STR
51097: PUSH
51098: LD_STRING ","
51100: STR
51101: PUSH
51102: LD_VAR 0 4
51106: STR
51107: PUSH
51108: LD_STRING ")
51110: STR
51111: PPUSH
51112: CALL_OW 559
// end else
51116: GO 51125
// ToLua ( getStreamItemsFromMission("","") ) ;
51118: LD_STRING getStreamItemsFromMission("","")
51120: PPUSH
51121: CALL_OW 559
// end ;
51125: LD_VAR 0 1
51129: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51130: LD_EXP 28
51134: PUSH
51135: LD_EXP 33
51139: AND
51140: IFFALSE 51264
51142: GO 51144
51144: DISABLE
51145: LD_INT 0
51147: PPUSH
51148: PPUSH
// begin enable ;
51149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51150: LD_ADDR_VAR 0 2
51154: PUSH
51155: LD_INT 22
51157: PUSH
51158: LD_OWVAR 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 34
51172: PUSH
51173: LD_INT 7
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 34
51182: PUSH
51183: LD_INT 45
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 34
51192: PUSH
51193: LD_INT 28
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 34
51202: PUSH
51203: LD_INT 47
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PPUSH
51221: CALL_OW 69
51225: ST_TO_ADDR
// if not tmp then
51226: LD_VAR 0 2
51230: NOT
51231: IFFALSE 51235
// exit ;
51233: GO 51264
// for i in tmp do
51235: LD_ADDR_VAR 0 1
51239: PUSH
51240: LD_VAR 0 2
51244: PUSH
51245: FOR_IN
51246: IFFALSE 51262
// begin SetLives ( i , 0 ) ;
51248: LD_VAR 0 1
51252: PPUSH
51253: LD_INT 0
51255: PPUSH
51256: CALL_OW 234
// end ;
51260: GO 51245
51262: POP
51263: POP
// end ;
51264: PPOPN 2
51266: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51267: LD_EXP 28
51271: PUSH
51272: LD_EXP 34
51276: AND
51277: IFFALSE 51361
51279: GO 51281
51281: DISABLE
51282: LD_INT 0
51284: PPUSH
51285: PPUSH
// begin enable ;
51286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51287: LD_ADDR_VAR 0 2
51291: PUSH
51292: LD_INT 22
51294: PUSH
51295: LD_OWVAR 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 32
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PPUSH
51318: CALL_OW 69
51322: ST_TO_ADDR
// if not tmp then
51323: LD_VAR 0 2
51327: NOT
51328: IFFALSE 51332
// exit ;
51330: GO 51361
// for i in tmp do
51332: LD_ADDR_VAR 0 1
51336: PUSH
51337: LD_VAR 0 2
51341: PUSH
51342: FOR_IN
51343: IFFALSE 51359
// begin SetLives ( i , 0 ) ;
51345: LD_VAR 0 1
51349: PPUSH
51350: LD_INT 0
51352: PPUSH
51353: CALL_OW 234
// end ;
51357: GO 51342
51359: POP
51360: POP
// end ;
51361: PPOPN 2
51363: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51364: LD_EXP 28
51368: PUSH
51369: LD_EXP 31
51373: AND
51374: IFFALSE 51467
51376: GO 51378
51378: DISABLE
51379: LD_INT 0
51381: PPUSH
// begin enable ;
51382: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51383: LD_ADDR_VAR 0 1
51387: PUSH
51388: LD_INT 22
51390: PUSH
51391: LD_OWVAR 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 25
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 25
51415: PUSH
51416: LD_INT 9
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 25
51425: PUSH
51426: LD_INT 8
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PPUSH
51443: CALL_OW 69
51447: PUSH
51448: FOR_IN
51449: IFFALSE 51465
// begin SetClass ( i , 1 ) ;
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_INT 1
51458: PPUSH
51459: CALL_OW 336
// end ;
51463: GO 51448
51465: POP
51466: POP
// end ;
51467: PPOPN 1
51469: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51470: LD_EXP 28
51474: PUSH
51475: LD_EXP 32
51479: AND
51480: PUSH
51481: LD_OWVAR 65
51485: PUSH
51486: LD_INT 7
51488: LESS
51489: AND
51490: IFFALSE 51504
51492: GO 51494
51494: DISABLE
// begin enable ;
51495: ENABLE
// game_speed := 7 ;
51496: LD_ADDR_OWVAR 65
51500: PUSH
51501: LD_INT 7
51503: ST_TO_ADDR
// end ;
51504: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51505: LD_EXP 28
51509: PUSH
51510: LD_EXP 35
51514: AND
51515: IFFALSE 51717
51517: GO 51519
51519: DISABLE
51520: LD_INT 0
51522: PPUSH
51523: PPUSH
51524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51525: LD_ADDR_VAR 0 3
51529: PUSH
51530: LD_INT 81
51532: PUSH
51533: LD_OWVAR 2
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 21
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PPUSH
51556: CALL_OW 69
51560: ST_TO_ADDR
// if not tmp then
51561: LD_VAR 0 3
51565: NOT
51566: IFFALSE 51570
// exit ;
51568: GO 51717
// if tmp > 5 then
51570: LD_VAR 0 3
51574: PUSH
51575: LD_INT 5
51577: GREATER
51578: IFFALSE 51590
// k := 5 else
51580: LD_ADDR_VAR 0 2
51584: PUSH
51585: LD_INT 5
51587: ST_TO_ADDR
51588: GO 51600
// k := tmp ;
51590: LD_ADDR_VAR 0 2
51594: PUSH
51595: LD_VAR 0 3
51599: ST_TO_ADDR
// for i := 1 to k do
51600: LD_ADDR_VAR 0 1
51604: PUSH
51605: DOUBLE
51606: LD_INT 1
51608: DEC
51609: ST_TO_ADDR
51610: LD_VAR 0 2
51614: PUSH
51615: FOR_TO
51616: IFFALSE 51715
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51618: LD_VAR 0 3
51622: PUSH
51623: LD_VAR 0 1
51627: ARRAY
51628: PPUSH
51629: LD_VAR 0 1
51633: PUSH
51634: LD_INT 4
51636: MOD
51637: PUSH
51638: LD_INT 1
51640: PLUS
51641: PPUSH
51642: CALL_OW 259
51646: PUSH
51647: LD_INT 10
51649: LESS
51650: IFFALSE 51713
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51652: LD_VAR 0 3
51656: PUSH
51657: LD_VAR 0 1
51661: ARRAY
51662: PPUSH
51663: LD_VAR 0 1
51667: PUSH
51668: LD_INT 4
51670: MOD
51671: PUSH
51672: LD_INT 1
51674: PLUS
51675: PPUSH
51676: LD_VAR 0 3
51680: PUSH
51681: LD_VAR 0 1
51685: ARRAY
51686: PPUSH
51687: LD_VAR 0 1
51691: PUSH
51692: LD_INT 4
51694: MOD
51695: PUSH
51696: LD_INT 1
51698: PLUS
51699: PPUSH
51700: CALL_OW 259
51704: PUSH
51705: LD_INT 1
51707: PLUS
51708: PPUSH
51709: CALL_OW 237
51713: GO 51615
51715: POP
51716: POP
// end ;
51717: PPOPN 3
51719: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51720: LD_EXP 28
51724: PUSH
51725: LD_EXP 36
51729: AND
51730: IFFALSE 51750
51732: GO 51734
51734: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51735: LD_INT 4
51737: PPUSH
51738: LD_OWVAR 2
51742: PPUSH
51743: LD_INT 0
51745: PPUSH
51746: CALL_OW 324
51750: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51751: LD_EXP 28
51755: PUSH
51756: LD_EXP 65
51760: AND
51761: IFFALSE 51781
51763: GO 51765
51765: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51766: LD_INT 19
51768: PPUSH
51769: LD_OWVAR 2
51773: PPUSH
51774: LD_INT 0
51776: PPUSH
51777: CALL_OW 324
51781: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51782: LD_EXP 28
51786: PUSH
51787: LD_EXP 37
51791: AND
51792: IFFALSE 51894
51794: GO 51796
51796: DISABLE
51797: LD_INT 0
51799: PPUSH
51800: PPUSH
// begin enable ;
51801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51802: LD_ADDR_VAR 0 2
51806: PUSH
51807: LD_INT 22
51809: PUSH
51810: LD_OWVAR 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: LD_INT 34
51824: PUSH
51825: LD_INT 11
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 34
51834: PUSH
51835: LD_INT 30
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PPUSH
51851: CALL_OW 69
51855: ST_TO_ADDR
// if not tmp then
51856: LD_VAR 0 2
51860: NOT
51861: IFFALSE 51865
// exit ;
51863: GO 51894
// for i in tmp do
51865: LD_ADDR_VAR 0 1
51869: PUSH
51870: LD_VAR 0 2
51874: PUSH
51875: FOR_IN
51876: IFFALSE 51892
// begin SetLives ( i , 0 ) ;
51878: LD_VAR 0 1
51882: PPUSH
51883: LD_INT 0
51885: PPUSH
51886: CALL_OW 234
// end ;
51890: GO 51875
51892: POP
51893: POP
// end ;
51894: PPOPN 2
51896: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51897: LD_EXP 28
51901: PUSH
51902: LD_EXP 38
51906: AND
51907: IFFALSE 51927
51909: GO 51911
51911: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51912: LD_INT 32
51914: PPUSH
51915: LD_OWVAR 2
51919: PPUSH
51920: LD_INT 0
51922: PPUSH
51923: CALL_OW 324
51927: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51928: LD_EXP 28
51932: PUSH
51933: LD_EXP 39
51937: AND
51938: IFFALSE 52119
51940: GO 51942
51942: DISABLE
51943: LD_INT 0
51945: PPUSH
51946: PPUSH
51947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51948: LD_ADDR_VAR 0 2
51952: PUSH
51953: LD_INT 22
51955: PUSH
51956: LD_OWVAR 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 33
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PPUSH
51979: CALL_OW 69
51983: ST_TO_ADDR
// if not tmp then
51984: LD_VAR 0 2
51988: NOT
51989: IFFALSE 51993
// exit ;
51991: GO 52119
// side := 0 ;
51993: LD_ADDR_VAR 0 3
51997: PUSH
51998: LD_INT 0
52000: ST_TO_ADDR
// for i := 1 to 8 do
52001: LD_ADDR_VAR 0 1
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_INT 8
52013: PUSH
52014: FOR_TO
52015: IFFALSE 52063
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52017: LD_OWVAR 2
52021: PUSH
52022: LD_VAR 0 1
52026: NONEQUAL
52027: PUSH
52028: LD_OWVAR 2
52032: PPUSH
52033: LD_VAR 0 1
52037: PPUSH
52038: CALL_OW 81
52042: PUSH
52043: LD_INT 2
52045: EQUAL
52046: AND
52047: IFFALSE 52061
// begin side := i ;
52049: LD_ADDR_VAR 0 3
52053: PUSH
52054: LD_VAR 0 1
52058: ST_TO_ADDR
// break ;
52059: GO 52063
// end ;
52061: GO 52014
52063: POP
52064: POP
// if not side then
52065: LD_VAR 0 3
52069: NOT
52070: IFFALSE 52074
// exit ;
52072: GO 52119
// for i := 1 to tmp do
52074: LD_ADDR_VAR 0 1
52078: PUSH
52079: DOUBLE
52080: LD_INT 1
52082: DEC
52083: ST_TO_ADDR
52084: LD_VAR 0 2
52088: PUSH
52089: FOR_TO
52090: IFFALSE 52117
// if Prob ( 60 ) then
52092: LD_INT 60
52094: PPUSH
52095: CALL_OW 13
52099: IFFALSE 52115
// SetSide ( i , side ) ;
52101: LD_VAR 0 1
52105: PPUSH
52106: LD_VAR 0 3
52110: PPUSH
52111: CALL_OW 235
52115: GO 52089
52117: POP
52118: POP
// end ;
52119: PPOPN 3
52121: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52122: LD_EXP 28
52126: PUSH
52127: LD_EXP 41
52131: AND
52132: IFFALSE 52251
52134: GO 52136
52136: DISABLE
52137: LD_INT 0
52139: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52140: LD_ADDR_VAR 0 1
52144: PUSH
52145: LD_INT 22
52147: PUSH
52148: LD_OWVAR 2
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 21
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: LD_INT 23
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PPUSH
52189: CALL_OW 69
52193: PUSH
52194: FOR_IN
52195: IFFALSE 52249
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52197: LD_VAR 0 1
52201: PPUSH
52202: CALL_OW 257
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: IN
52225: IFFALSE 52247
// SetClass ( un , rand ( 1 , 4 ) ) ;
52227: LD_VAR 0 1
52231: PPUSH
52232: LD_INT 1
52234: PPUSH
52235: LD_INT 4
52237: PPUSH
52238: CALL_OW 12
52242: PPUSH
52243: CALL_OW 336
52247: GO 52194
52249: POP
52250: POP
// end ;
52251: PPOPN 1
52253: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52254: LD_EXP 28
52258: PUSH
52259: LD_EXP 40
52263: AND
52264: IFFALSE 52343
52266: GO 52268
52268: DISABLE
52269: LD_INT 0
52271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52272: LD_ADDR_VAR 0 1
52276: PUSH
52277: LD_INT 22
52279: PUSH
52280: LD_OWVAR 2
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 21
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PPUSH
52303: CALL_OW 69
52307: ST_TO_ADDR
// if not tmp then
52308: LD_VAR 0 1
52312: NOT
52313: IFFALSE 52317
// exit ;
52315: GO 52343
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52317: LD_VAR 0 1
52321: PUSH
52322: LD_INT 1
52324: PPUSH
52325: LD_VAR 0 1
52329: PPUSH
52330: CALL_OW 12
52334: ARRAY
52335: PPUSH
52336: LD_INT 100
52338: PPUSH
52339: CALL_OW 234
// end ;
52343: PPOPN 1
52345: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52346: LD_EXP 28
52350: PUSH
52351: LD_EXP 42
52355: AND
52356: IFFALSE 52454
52358: GO 52360
52360: DISABLE
52361: LD_INT 0
52363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52364: LD_ADDR_VAR 0 1
52368: PUSH
52369: LD_INT 22
52371: PUSH
52372: LD_OWVAR 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 21
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PPUSH
52395: CALL_OW 69
52399: ST_TO_ADDR
// if not tmp then
52400: LD_VAR 0 1
52404: NOT
52405: IFFALSE 52409
// exit ;
52407: GO 52454
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52409: LD_VAR 0 1
52413: PUSH
52414: LD_INT 1
52416: PPUSH
52417: LD_VAR 0 1
52421: PPUSH
52422: CALL_OW 12
52426: ARRAY
52427: PPUSH
52428: LD_INT 1
52430: PPUSH
52431: LD_INT 4
52433: PPUSH
52434: CALL_OW 12
52438: PPUSH
52439: LD_INT 3000
52441: PPUSH
52442: LD_INT 9000
52444: PPUSH
52445: CALL_OW 12
52449: PPUSH
52450: CALL_OW 492
// end ;
52454: PPOPN 1
52456: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52457: LD_EXP 28
52461: PUSH
52462: LD_EXP 43
52466: AND
52467: IFFALSE 52487
52469: GO 52471
52471: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52472: LD_INT 1
52474: PPUSH
52475: LD_OWVAR 2
52479: PPUSH
52480: LD_INT 0
52482: PPUSH
52483: CALL_OW 324
52487: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52488: LD_EXP 28
52492: PUSH
52493: LD_EXP 44
52497: AND
52498: IFFALSE 52581
52500: GO 52502
52502: DISABLE
52503: LD_INT 0
52505: PPUSH
52506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52507: LD_ADDR_VAR 0 2
52511: PUSH
52512: LD_INT 22
52514: PUSH
52515: LD_OWVAR 2
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 21
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PPUSH
52538: CALL_OW 69
52542: ST_TO_ADDR
// if not tmp then
52543: LD_VAR 0 2
52547: NOT
52548: IFFALSE 52552
// exit ;
52550: GO 52581
// for i in tmp do
52552: LD_ADDR_VAR 0 1
52556: PUSH
52557: LD_VAR 0 2
52561: PUSH
52562: FOR_IN
52563: IFFALSE 52579
// SetBLevel ( i , 10 ) ;
52565: LD_VAR 0 1
52569: PPUSH
52570: LD_INT 10
52572: PPUSH
52573: CALL_OW 241
52577: GO 52562
52579: POP
52580: POP
// end ;
52581: PPOPN 2
52583: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52584: LD_EXP 28
52588: PUSH
52589: LD_EXP 45
52593: AND
52594: IFFALSE 52705
52596: GO 52598
52598: DISABLE
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
52603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52604: LD_ADDR_VAR 0 3
52608: PUSH
52609: LD_INT 22
52611: PUSH
52612: LD_OWVAR 2
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 25
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PPUSH
52635: CALL_OW 69
52639: ST_TO_ADDR
// if not tmp then
52640: LD_VAR 0 3
52644: NOT
52645: IFFALSE 52649
// exit ;
52647: GO 52705
// un := tmp [ rand ( 1 , tmp ) ] ;
52649: LD_ADDR_VAR 0 2
52653: PUSH
52654: LD_VAR 0 3
52658: PUSH
52659: LD_INT 1
52661: PPUSH
52662: LD_VAR 0 3
52666: PPUSH
52667: CALL_OW 12
52671: ARRAY
52672: ST_TO_ADDR
// if Crawls ( un ) then
52673: LD_VAR 0 2
52677: PPUSH
52678: CALL_OW 318
52682: IFFALSE 52693
// ComWalk ( un ) ;
52684: LD_VAR 0 2
52688: PPUSH
52689: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52693: LD_VAR 0 2
52697: PPUSH
52698: LD_INT 5
52700: PPUSH
52701: CALL_OW 336
// end ;
52705: PPOPN 3
52707: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
52708: LD_EXP 28
52712: PUSH
52713: LD_EXP 46
52717: AND
52718: PUSH
52719: LD_OWVAR 67
52723: PUSH
52724: LD_INT 3
52726: LESS
52727: AND
52728: IFFALSE 52747
52730: GO 52732
52732: DISABLE
// Difficulty := Difficulty + 1 ;
52733: LD_ADDR_OWVAR 67
52737: PUSH
52738: LD_OWVAR 67
52742: PUSH
52743: LD_INT 1
52745: PLUS
52746: ST_TO_ADDR
52747: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52748: LD_EXP 28
52752: PUSH
52753: LD_EXP 47
52757: AND
52758: IFFALSE 52861
52760: GO 52762
52762: DISABLE
52763: LD_INT 0
52765: PPUSH
// begin for i := 1 to 5 do
52766: LD_ADDR_VAR 0 1
52770: PUSH
52771: DOUBLE
52772: LD_INT 1
52774: DEC
52775: ST_TO_ADDR
52776: LD_INT 5
52778: PUSH
52779: FOR_TO
52780: IFFALSE 52859
// begin uc_nation := nation_nature ;
52782: LD_ADDR_OWVAR 21
52786: PUSH
52787: LD_INT 0
52789: ST_TO_ADDR
// uc_side := 0 ;
52790: LD_ADDR_OWVAR 20
52794: PUSH
52795: LD_INT 0
52797: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52798: LD_ADDR_OWVAR 29
52802: PUSH
52803: LD_INT 12
52805: PUSH
52806: LD_INT 12
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: ST_TO_ADDR
// hc_agressivity := 20 ;
52813: LD_ADDR_OWVAR 35
52817: PUSH
52818: LD_INT 20
52820: ST_TO_ADDR
// hc_class := class_tiger ;
52821: LD_ADDR_OWVAR 28
52825: PUSH
52826: LD_INT 14
52828: ST_TO_ADDR
// hc_gallery :=  ;
52829: LD_ADDR_OWVAR 33
52833: PUSH
52834: LD_STRING 
52836: ST_TO_ADDR
// hc_name :=  ;
52837: LD_ADDR_OWVAR 26
52841: PUSH
52842: LD_STRING 
52844: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52845: CALL_OW 44
52849: PPUSH
52850: LD_INT 0
52852: PPUSH
52853: CALL_OW 51
// end ;
52857: GO 52779
52859: POP
52860: POP
// end ;
52861: PPOPN 1
52863: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52864: LD_EXP 28
52868: PUSH
52869: LD_EXP 48
52873: AND
52874: IFFALSE 52883
52876: GO 52878
52878: DISABLE
// StreamSibBomb ;
52879: CALL 52884 0 0
52883: END
// export function StreamSibBomb ; var i , x , y ; begin
52884: LD_INT 0
52886: PPUSH
52887: PPUSH
52888: PPUSH
52889: PPUSH
// result := false ;
52890: LD_ADDR_VAR 0 1
52894: PUSH
52895: LD_INT 0
52897: ST_TO_ADDR
// for i := 1 to 16 do
52898: LD_ADDR_VAR 0 2
52902: PUSH
52903: DOUBLE
52904: LD_INT 1
52906: DEC
52907: ST_TO_ADDR
52908: LD_INT 16
52910: PUSH
52911: FOR_TO
52912: IFFALSE 53111
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52914: LD_ADDR_VAR 0 3
52918: PUSH
52919: LD_INT 10
52921: PUSH
52922: LD_INT 20
52924: PUSH
52925: LD_INT 30
52927: PUSH
52928: LD_INT 40
52930: PUSH
52931: LD_INT 50
52933: PUSH
52934: LD_INT 60
52936: PUSH
52937: LD_INT 70
52939: PUSH
52940: LD_INT 80
52942: PUSH
52943: LD_INT 90
52945: PUSH
52946: LD_INT 100
52948: PUSH
52949: LD_INT 110
52951: PUSH
52952: LD_INT 120
52954: PUSH
52955: LD_INT 130
52957: PUSH
52958: LD_INT 140
52960: PUSH
52961: LD_INT 150
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PPUSH
52984: LD_INT 15
52986: PPUSH
52987: CALL_OW 12
52991: ARRAY
52992: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52993: LD_ADDR_VAR 0 4
52997: PUSH
52998: LD_INT 10
53000: PUSH
53001: LD_INT 20
53003: PUSH
53004: LD_INT 30
53006: PUSH
53007: LD_INT 40
53009: PUSH
53010: LD_INT 50
53012: PUSH
53013: LD_INT 60
53015: PUSH
53016: LD_INT 70
53018: PUSH
53019: LD_INT 80
53021: PUSH
53022: LD_INT 90
53024: PUSH
53025: LD_INT 100
53027: PUSH
53028: LD_INT 110
53030: PUSH
53031: LD_INT 120
53033: PUSH
53034: LD_INT 130
53036: PUSH
53037: LD_INT 140
53039: PUSH
53040: LD_INT 150
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PPUSH
53063: LD_INT 15
53065: PPUSH
53066: CALL_OW 12
53070: ARRAY
53071: ST_TO_ADDR
// if ValidHex ( x , y ) then
53072: LD_VAR 0 3
53076: PPUSH
53077: LD_VAR 0 4
53081: PPUSH
53082: CALL_OW 488
53086: IFFALSE 53109
// begin result := [ x , y ] ;
53088: LD_ADDR_VAR 0 1
53092: PUSH
53093: LD_VAR 0 3
53097: PUSH
53098: LD_VAR 0 4
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: ST_TO_ADDR
// break ;
53107: GO 53111
// end ; end ;
53109: GO 52911
53111: POP
53112: POP
// if result then
53113: LD_VAR 0 1
53117: IFFALSE 53177
// begin ToLua ( playSibBomb() ) ;
53119: LD_STRING playSibBomb()
53121: PPUSH
53122: CALL_OW 559
// wait ( 0 0$14 ) ;
53126: LD_INT 490
53128: PPUSH
53129: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53133: LD_VAR 0 1
53137: PUSH
53138: LD_INT 1
53140: ARRAY
53141: PPUSH
53142: LD_VAR 0 1
53146: PUSH
53147: LD_INT 2
53149: ARRAY
53150: PPUSH
53151: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53155: LD_VAR 0 1
53159: PUSH
53160: LD_INT 1
53162: ARRAY
53163: PPUSH
53164: LD_VAR 0 1
53168: PUSH
53169: LD_INT 2
53171: ARRAY
53172: PPUSH
53173: CALL_OW 429
// end ; end ;
53177: LD_VAR 0 1
53181: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53182: LD_EXP 28
53186: PUSH
53187: LD_EXP 50
53191: AND
53192: IFFALSE 53204
53194: GO 53196
53196: DISABLE
// YouLost (  ) ;
53197: LD_STRING 
53199: PPUSH
53200: CALL_OW 104
53204: END
// every 0 0$1 trigger StreamModeActive and sFog do
53205: LD_EXP 28
53209: PUSH
53210: LD_EXP 49
53214: AND
53215: IFFALSE 53229
53217: GO 53219
53219: DISABLE
// FogOff ( your_side ) ;
53220: LD_OWVAR 2
53224: PPUSH
53225: CALL_OW 344
53229: END
// every 0 0$1 trigger StreamModeActive and sSun do
53230: LD_EXP 28
53234: PUSH
53235: LD_EXP 51
53239: AND
53240: IFFALSE 53268
53242: GO 53244
53244: DISABLE
// begin solar_recharge_percent := 0 ;
53245: LD_ADDR_OWVAR 79
53249: PUSH
53250: LD_INT 0
53252: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53253: LD_INT 10500
53255: PPUSH
53256: CALL_OW 67
// solar_recharge_percent := 100 ;
53260: LD_ADDR_OWVAR 79
53264: PUSH
53265: LD_INT 100
53267: ST_TO_ADDR
// end ;
53268: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53269: LD_EXP 28
53273: PUSH
53274: LD_EXP 52
53278: AND
53279: IFFALSE 53518
53281: GO 53283
53283: DISABLE
53284: LD_INT 0
53286: PPUSH
53287: PPUSH
53288: PPUSH
// begin tmp := [ ] ;
53289: LD_ADDR_VAR 0 3
53293: PUSH
53294: EMPTY
53295: ST_TO_ADDR
// for i := 1 to 6 do
53296: LD_ADDR_VAR 0 1
53300: PUSH
53301: DOUBLE
53302: LD_INT 1
53304: DEC
53305: ST_TO_ADDR
53306: LD_INT 6
53308: PUSH
53309: FOR_TO
53310: IFFALSE 53415
// begin uc_nation := nation_nature ;
53312: LD_ADDR_OWVAR 21
53316: PUSH
53317: LD_INT 0
53319: ST_TO_ADDR
// uc_side := 0 ;
53320: LD_ADDR_OWVAR 20
53324: PUSH
53325: LD_INT 0
53327: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53328: LD_ADDR_OWVAR 29
53332: PUSH
53333: LD_INT 12
53335: PUSH
53336: LD_INT 12
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: ST_TO_ADDR
// hc_agressivity := 20 ;
53343: LD_ADDR_OWVAR 35
53347: PUSH
53348: LD_INT 20
53350: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53351: LD_ADDR_OWVAR 28
53355: PUSH
53356: LD_INT 17
53358: ST_TO_ADDR
// hc_gallery :=  ;
53359: LD_ADDR_OWVAR 33
53363: PUSH
53364: LD_STRING 
53366: ST_TO_ADDR
// hc_name :=  ;
53367: LD_ADDR_OWVAR 26
53371: PUSH
53372: LD_STRING 
53374: ST_TO_ADDR
// un := CreateHuman ;
53375: LD_ADDR_VAR 0 2
53379: PUSH
53380: CALL_OW 44
53384: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53385: LD_VAR 0 2
53389: PPUSH
53390: LD_INT 1
53392: PPUSH
53393: CALL_OW 51
// tmp := tmp ^ un ;
53397: LD_ADDR_VAR 0 3
53401: PUSH
53402: LD_VAR 0 3
53406: PUSH
53407: LD_VAR 0 2
53411: ADD
53412: ST_TO_ADDR
// end ;
53413: GO 53309
53415: POP
53416: POP
// repeat wait ( 0 0$1 ) ;
53417: LD_INT 35
53419: PPUSH
53420: CALL_OW 67
// for un in tmp do
53424: LD_ADDR_VAR 0 2
53428: PUSH
53429: LD_VAR 0 3
53433: PUSH
53434: FOR_IN
53435: IFFALSE 53509
// begin if IsDead ( un ) then
53437: LD_VAR 0 2
53441: PPUSH
53442: CALL_OW 301
53446: IFFALSE 53466
// begin tmp := tmp diff un ;
53448: LD_ADDR_VAR 0 3
53452: PUSH
53453: LD_VAR 0 3
53457: PUSH
53458: LD_VAR 0 2
53462: DIFF
53463: ST_TO_ADDR
// continue ;
53464: GO 53434
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53466: LD_VAR 0 2
53470: PPUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 22
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PPUSH
53488: CALL_OW 69
53492: PPUSH
53493: LD_VAR 0 2
53497: PPUSH
53498: CALL_OW 74
53502: PPUSH
53503: CALL_OW 115
// end ;
53507: GO 53434
53509: POP
53510: POP
// until not tmp ;
53511: LD_VAR 0 3
53515: NOT
53516: IFFALSE 53417
// end ;
53518: PPOPN 3
53520: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53521: LD_EXP 28
53525: PUSH
53526: LD_EXP 53
53530: AND
53531: IFFALSE 53585
53533: GO 53535
53535: DISABLE
// begin ToLua ( displayTroll(); ) ;
53536: LD_STRING displayTroll();
53538: PPUSH
53539: CALL_OW 559
// wait ( 3 3$00 ) ;
53543: LD_INT 6300
53545: PPUSH
53546: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53550: LD_STRING hideTroll();
53552: PPUSH
53553: CALL_OW 559
// wait ( 1 1$00 ) ;
53557: LD_INT 2100
53559: PPUSH
53560: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53564: LD_STRING displayTroll();
53566: PPUSH
53567: CALL_OW 559
// wait ( 1 1$00 ) ;
53571: LD_INT 2100
53573: PPUSH
53574: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53578: LD_STRING hideTroll();
53580: PPUSH
53581: CALL_OW 559
// end ;
53585: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53586: LD_EXP 28
53590: PUSH
53591: LD_EXP 54
53595: AND
53596: IFFALSE 53659
53598: GO 53600
53600: DISABLE
53601: LD_INT 0
53603: PPUSH
// begin p := 0 ;
53604: LD_ADDR_VAR 0 1
53608: PUSH
53609: LD_INT 0
53611: ST_TO_ADDR
// repeat game_speed := 1 ;
53612: LD_ADDR_OWVAR 65
53616: PUSH
53617: LD_INT 1
53619: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53620: LD_INT 35
53622: PPUSH
53623: CALL_OW 67
// p := p + 1 ;
53627: LD_ADDR_VAR 0 1
53631: PUSH
53632: LD_VAR 0 1
53636: PUSH
53637: LD_INT 1
53639: PLUS
53640: ST_TO_ADDR
// until p >= 60 ;
53641: LD_VAR 0 1
53645: PUSH
53646: LD_INT 60
53648: GREATEREQUAL
53649: IFFALSE 53612
// game_speed := 4 ;
53651: LD_ADDR_OWVAR 65
53655: PUSH
53656: LD_INT 4
53658: ST_TO_ADDR
// end ;
53659: PPOPN 1
53661: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53662: LD_EXP 28
53666: PUSH
53667: LD_EXP 55
53671: AND
53672: IFFALSE 53818
53674: GO 53676
53676: DISABLE
53677: LD_INT 0
53679: PPUSH
53680: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53681: LD_ADDR_VAR 0 1
53685: PUSH
53686: LD_INT 22
53688: PUSH
53689: LD_OWVAR 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 30
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 30
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PPUSH
53730: CALL_OW 69
53734: ST_TO_ADDR
// if not depot then
53735: LD_VAR 0 1
53739: NOT
53740: IFFALSE 53744
// exit ;
53742: GO 53818
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53744: LD_ADDR_VAR 0 2
53748: PUSH
53749: LD_VAR 0 1
53753: PUSH
53754: LD_INT 1
53756: PPUSH
53757: LD_VAR 0 1
53761: PPUSH
53762: CALL_OW 12
53766: ARRAY
53767: PPUSH
53768: CALL_OW 274
53772: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53773: LD_VAR 0 2
53777: PPUSH
53778: LD_INT 1
53780: PPUSH
53781: LD_INT 0
53783: PPUSH
53784: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53788: LD_VAR 0 2
53792: PPUSH
53793: LD_INT 2
53795: PPUSH
53796: LD_INT 0
53798: PPUSH
53799: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53803: LD_VAR 0 2
53807: PPUSH
53808: LD_INT 3
53810: PPUSH
53811: LD_INT 0
53813: PPUSH
53814: CALL_OW 277
// end ;
53818: PPOPN 2
53820: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53821: LD_EXP 28
53825: PUSH
53826: LD_EXP 56
53830: AND
53831: IFFALSE 53928
53833: GO 53835
53835: DISABLE
53836: LD_INT 0
53838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53839: LD_ADDR_VAR 0 1
53843: PUSH
53844: LD_INT 22
53846: PUSH
53847: LD_OWVAR 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 21
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: LD_INT 23
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: PPUSH
53888: CALL_OW 69
53892: ST_TO_ADDR
// if not tmp then
53893: LD_VAR 0 1
53897: NOT
53898: IFFALSE 53902
// exit ;
53900: GO 53928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53902: LD_VAR 0 1
53906: PUSH
53907: LD_INT 1
53909: PPUSH
53910: LD_VAR 0 1
53914: PPUSH
53915: CALL_OW 12
53919: ARRAY
53920: PPUSH
53921: LD_INT 200
53923: PPUSH
53924: CALL_OW 234
// end ;
53928: PPOPN 1
53930: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53931: LD_EXP 28
53935: PUSH
53936: LD_EXP 57
53940: AND
53941: IFFALSE 54020
53943: GO 53945
53945: DISABLE
53946: LD_INT 0
53948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53949: LD_ADDR_VAR 0 1
53953: PUSH
53954: LD_INT 22
53956: PUSH
53957: LD_OWVAR 2
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 21
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PPUSH
53980: CALL_OW 69
53984: ST_TO_ADDR
// if not tmp then
53985: LD_VAR 0 1
53989: NOT
53990: IFFALSE 53994
// exit ;
53992: GO 54020
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53994: LD_VAR 0 1
53998: PUSH
53999: LD_INT 1
54001: PPUSH
54002: LD_VAR 0 1
54006: PPUSH
54007: CALL_OW 12
54011: ARRAY
54012: PPUSH
54013: LD_INT 60
54015: PPUSH
54016: CALL_OW 234
// end ;
54020: PPOPN 1
54022: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54023: LD_EXP 28
54027: PUSH
54028: LD_EXP 58
54032: AND
54033: IFFALSE 54132
54035: GO 54037
54037: DISABLE
54038: LD_INT 0
54040: PPUSH
54041: PPUSH
// begin enable ;
54042: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54043: LD_ADDR_VAR 0 1
54047: PUSH
54048: LD_INT 22
54050: PUSH
54051: LD_OWVAR 2
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 61
54062: PUSH
54063: EMPTY
54064: LIST
54065: PUSH
54066: LD_INT 33
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: PPUSH
54081: CALL_OW 69
54085: ST_TO_ADDR
// if not tmp then
54086: LD_VAR 0 1
54090: NOT
54091: IFFALSE 54095
// exit ;
54093: GO 54132
// for i in tmp do
54095: LD_ADDR_VAR 0 2
54099: PUSH
54100: LD_VAR 0 1
54104: PUSH
54105: FOR_IN
54106: IFFALSE 54130
// if IsControledBy ( i ) then
54108: LD_VAR 0 2
54112: PPUSH
54113: CALL_OW 312
54117: IFFALSE 54128
// ComUnlink ( i ) ;
54119: LD_VAR 0 2
54123: PPUSH
54124: CALL_OW 136
54128: GO 54105
54130: POP
54131: POP
// end ;
54132: PPOPN 2
54134: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54135: LD_EXP 28
54139: PUSH
54140: LD_EXP 59
54144: AND
54145: IFFALSE 54285
54147: GO 54149
54149: DISABLE
54150: LD_INT 0
54152: PPUSH
54153: PPUSH
// begin ToLua ( displayPowell(); ) ;
54154: LD_STRING displayPowell();
54156: PPUSH
54157: CALL_OW 559
// uc_side := 0 ;
54161: LD_ADDR_OWVAR 20
54165: PUSH
54166: LD_INT 0
54168: ST_TO_ADDR
// uc_nation := 2 ;
54169: LD_ADDR_OWVAR 21
54173: PUSH
54174: LD_INT 2
54176: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54177: LD_ADDR_OWVAR 37
54181: PUSH
54182: LD_INT 14
54184: ST_TO_ADDR
// vc_engine := engine_siberite ;
54185: LD_ADDR_OWVAR 39
54189: PUSH
54190: LD_INT 3
54192: ST_TO_ADDR
// vc_control := control_apeman ;
54193: LD_ADDR_OWVAR 38
54197: PUSH
54198: LD_INT 5
54200: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54201: LD_ADDR_OWVAR 40
54205: PUSH
54206: LD_INT 29
54208: ST_TO_ADDR
// un := CreateVehicle ;
54209: LD_ADDR_VAR 0 2
54213: PUSH
54214: CALL_OW 45
54218: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54219: LD_VAR 0 2
54223: PPUSH
54224: LD_INT 1
54226: PPUSH
54227: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54231: LD_INT 35
54233: PPUSH
54234: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54238: LD_VAR 0 2
54242: PPUSH
54243: LD_INT 22
54245: PUSH
54246: LD_OWVAR 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PPUSH
54255: CALL_OW 69
54259: PPUSH
54260: LD_VAR 0 2
54264: PPUSH
54265: CALL_OW 74
54269: PPUSH
54270: CALL_OW 115
// until IsDead ( un ) ;
54274: LD_VAR 0 2
54278: PPUSH
54279: CALL_OW 301
54283: IFFALSE 54231
// end ;
54285: PPOPN 2
54287: END
// every 0 0$1 trigger StreamModeActive and sStu do
54288: LD_EXP 28
54292: PUSH
54293: LD_EXP 67
54297: AND
54298: IFFALSE 54314
54300: GO 54302
54302: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54303: LD_STRING displayStucuk();
54305: PPUSH
54306: CALL_OW 559
// ResetFog ;
54310: CALL_OW 335
// end ;
54314: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54315: LD_EXP 28
54319: PUSH
54320: LD_EXP 60
54324: AND
54325: IFFALSE 54466
54327: GO 54329
54329: DISABLE
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54334: LD_ADDR_VAR 0 2
54338: PUSH
54339: LD_INT 22
54341: PUSH
54342: LD_OWVAR 2
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 21
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PPUSH
54365: CALL_OW 69
54369: ST_TO_ADDR
// if not tmp then
54370: LD_VAR 0 2
54374: NOT
54375: IFFALSE 54379
// exit ;
54377: GO 54466
// un := tmp [ rand ( 1 , tmp ) ] ;
54379: LD_ADDR_VAR 0 1
54383: PUSH
54384: LD_VAR 0 2
54388: PUSH
54389: LD_INT 1
54391: PPUSH
54392: LD_VAR 0 2
54396: PPUSH
54397: CALL_OW 12
54401: ARRAY
54402: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54403: LD_VAR 0 1
54407: PPUSH
54408: LD_INT 0
54410: PPUSH
54411: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54415: LD_VAR 0 1
54419: PPUSH
54420: LD_OWVAR 3
54424: PUSH
54425: LD_VAR 0 1
54429: DIFF
54430: PPUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: CALL_OW 74
54440: PPUSH
54441: CALL_OW 115
// wait ( 0 0$20 ) ;
54445: LD_INT 700
54447: PPUSH
54448: CALL_OW 67
// SetSide ( un , your_side ) ;
54452: LD_VAR 0 1
54456: PPUSH
54457: LD_OWVAR 2
54461: PPUSH
54462: CALL_OW 235
// end ;
54466: PPOPN 2
54468: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54469: LD_EXP 28
54473: PUSH
54474: LD_EXP 61
54478: AND
54479: IFFALSE 54585
54481: GO 54483
54483: DISABLE
54484: LD_INT 0
54486: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54487: LD_ADDR_VAR 0 1
54491: PUSH
54492: LD_INT 22
54494: PUSH
54495: LD_OWVAR 2
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 2
54506: PUSH
54507: LD_INT 30
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 30
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PPUSH
54536: CALL_OW 69
54540: ST_TO_ADDR
// if not depot then
54541: LD_VAR 0 1
54545: NOT
54546: IFFALSE 54550
// exit ;
54548: GO 54585
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54550: LD_VAR 0 1
54554: PUSH
54555: LD_INT 1
54557: ARRAY
54558: PPUSH
54559: CALL_OW 250
54563: PPUSH
54564: LD_VAR 0 1
54568: PUSH
54569: LD_INT 1
54571: ARRAY
54572: PPUSH
54573: CALL_OW 251
54577: PPUSH
54578: LD_INT 70
54580: PPUSH
54581: CALL_OW 495
// end ;
54585: PPOPN 1
54587: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54588: LD_EXP 28
54592: PUSH
54593: LD_EXP 62
54597: AND
54598: IFFALSE 54809
54600: GO 54602
54602: DISABLE
54603: LD_INT 0
54605: PPUSH
54606: PPUSH
54607: PPUSH
54608: PPUSH
54609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54610: LD_ADDR_VAR 0 5
54614: PUSH
54615: LD_INT 22
54617: PUSH
54618: LD_OWVAR 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 21
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PPUSH
54641: CALL_OW 69
54645: ST_TO_ADDR
// if not tmp then
54646: LD_VAR 0 5
54650: NOT
54651: IFFALSE 54655
// exit ;
54653: GO 54809
// for i in tmp do
54655: LD_ADDR_VAR 0 1
54659: PUSH
54660: LD_VAR 0 5
54664: PUSH
54665: FOR_IN
54666: IFFALSE 54807
// begin d := rand ( 0 , 5 ) ;
54668: LD_ADDR_VAR 0 4
54672: PUSH
54673: LD_INT 0
54675: PPUSH
54676: LD_INT 5
54678: PPUSH
54679: CALL_OW 12
54683: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: LD_VAR 0 1
54693: PPUSH
54694: CALL_OW 250
54698: PPUSH
54699: LD_VAR 0 4
54703: PPUSH
54704: LD_INT 3
54706: PPUSH
54707: LD_INT 12
54709: PPUSH
54710: CALL_OW 12
54714: PPUSH
54715: CALL_OW 272
54719: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54720: LD_ADDR_VAR 0 3
54724: PUSH
54725: LD_VAR 0 1
54729: PPUSH
54730: CALL_OW 251
54734: PPUSH
54735: LD_VAR 0 4
54739: PPUSH
54740: LD_INT 3
54742: PPUSH
54743: LD_INT 12
54745: PPUSH
54746: CALL_OW 12
54750: PPUSH
54751: CALL_OW 273
54755: ST_TO_ADDR
// if ValidHex ( x , y ) then
54756: LD_VAR 0 2
54760: PPUSH
54761: LD_VAR 0 3
54765: PPUSH
54766: CALL_OW 488
54770: IFFALSE 54805
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54772: LD_VAR 0 1
54776: PPUSH
54777: LD_VAR 0 2
54781: PPUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: LD_INT 3
54789: PPUSH
54790: LD_INT 6
54792: PPUSH
54793: CALL_OW 12
54797: PPUSH
54798: LD_INT 1
54800: PPUSH
54801: CALL_OW 483
// end ;
54805: GO 54665
54807: POP
54808: POP
// end ;
54809: PPOPN 5
54811: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54812: LD_EXP 28
54816: PUSH
54817: LD_EXP 63
54821: AND
54822: IFFALSE 54916
54824: GO 54826
54826: DISABLE
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54831: LD_ADDR_VAR 0 2
54835: PUSH
54836: LD_INT 22
54838: PUSH
54839: LD_OWVAR 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 32
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 21
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: LIST
54872: PPUSH
54873: CALL_OW 69
54877: ST_TO_ADDR
// if not tmp then
54878: LD_VAR 0 2
54882: NOT
54883: IFFALSE 54887
// exit ;
54885: GO 54916
// for i in tmp do
54887: LD_ADDR_VAR 0 1
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: FOR_IN
54898: IFFALSE 54914
// SetFuel ( i , 0 ) ;
54900: LD_VAR 0 1
54904: PPUSH
54905: LD_INT 0
54907: PPUSH
54908: CALL_OW 240
54912: GO 54897
54914: POP
54915: POP
// end ;
54916: PPOPN 2
54918: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54919: LD_EXP 28
54923: PUSH
54924: LD_EXP 64
54928: AND
54929: IFFALSE 54995
54931: GO 54933
54933: DISABLE
54934: LD_INT 0
54936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54937: LD_ADDR_VAR 0 1
54941: PUSH
54942: LD_INT 22
54944: PUSH
54945: LD_OWVAR 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 30
54956: PUSH
54957: LD_INT 29
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PPUSH
54968: CALL_OW 69
54972: ST_TO_ADDR
// if not tmp then
54973: LD_VAR 0 1
54977: NOT
54978: IFFALSE 54982
// exit ;
54980: GO 54995
// DestroyUnit ( tmp [ 1 ] ) ;
54982: LD_VAR 0 1
54986: PUSH
54987: LD_INT 1
54989: ARRAY
54990: PPUSH
54991: CALL_OW 65
// end ;
54995: PPOPN 1
54997: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54998: LD_EXP 28
55002: PUSH
55003: LD_EXP 66
55007: AND
55008: IFFALSE 55137
55010: GO 55012
55012: DISABLE
55013: LD_INT 0
55015: PPUSH
// begin uc_side := 0 ;
55016: LD_ADDR_OWVAR 20
55020: PUSH
55021: LD_INT 0
55023: ST_TO_ADDR
// uc_nation := nation_arabian ;
55024: LD_ADDR_OWVAR 21
55028: PUSH
55029: LD_INT 2
55031: ST_TO_ADDR
// hc_gallery :=  ;
55032: LD_ADDR_OWVAR 33
55036: PUSH
55037: LD_STRING 
55039: ST_TO_ADDR
// hc_name :=  ;
55040: LD_ADDR_OWVAR 26
55044: PUSH
55045: LD_STRING 
55047: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55048: LD_INT 1
55050: PPUSH
55051: LD_INT 11
55053: PPUSH
55054: LD_INT 10
55056: PPUSH
55057: CALL_OW 380
// un := CreateHuman ;
55061: LD_ADDR_VAR 0 1
55065: PUSH
55066: CALL_OW 44
55070: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55071: LD_VAR 0 1
55075: PPUSH
55076: LD_INT 1
55078: PPUSH
55079: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55083: LD_INT 35
55085: PPUSH
55086: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55090: LD_VAR 0 1
55094: PPUSH
55095: LD_INT 22
55097: PUSH
55098: LD_OWVAR 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PPUSH
55107: CALL_OW 69
55111: PPUSH
55112: LD_VAR 0 1
55116: PPUSH
55117: CALL_OW 74
55121: PPUSH
55122: CALL_OW 115
// until IsDead ( un ) ;
55126: LD_VAR 0 1
55130: PPUSH
55131: CALL_OW 301
55135: IFFALSE 55083
// end ;
55137: PPOPN 1
55139: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55140: LD_EXP 28
55144: PUSH
55145: LD_EXP 68
55149: AND
55150: IFFALSE 55162
55152: GO 55154
55154: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55155: LD_STRING earthquake(getX(game), 0, 32)
55157: PPUSH
55158: CALL_OW 559
55162: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55163: LD_EXP 28
55167: PUSH
55168: LD_EXP 69
55172: AND
55173: IFFALSE 55264
55175: GO 55177
55177: DISABLE
55178: LD_INT 0
55180: PPUSH
// begin enable ;
55181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55182: LD_ADDR_VAR 0 1
55186: PUSH
55187: LD_INT 22
55189: PUSH
55190: LD_OWVAR 2
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 21
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 33
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: PPUSH
55224: CALL_OW 69
55228: ST_TO_ADDR
// if not tmp then
55229: LD_VAR 0 1
55233: NOT
55234: IFFALSE 55238
// exit ;
55236: GO 55264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55238: LD_VAR 0 1
55242: PUSH
55243: LD_INT 1
55245: PPUSH
55246: LD_VAR 0 1
55250: PPUSH
55251: CALL_OW 12
55255: ARRAY
55256: PPUSH
55257: LD_INT 1
55259: PPUSH
55260: CALL_OW 234
// end ;
55264: PPOPN 1
55266: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55267: LD_EXP 28
55271: PUSH
55272: LD_EXP 70
55276: AND
55277: IFFALSE 55418
55279: GO 55281
55281: DISABLE
55282: LD_INT 0
55284: PPUSH
55285: PPUSH
55286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55287: LD_ADDR_VAR 0 3
55291: PUSH
55292: LD_INT 22
55294: PUSH
55295: LD_OWVAR 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 25
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PPUSH
55318: CALL_OW 69
55322: ST_TO_ADDR
// if not tmp then
55323: LD_VAR 0 3
55327: NOT
55328: IFFALSE 55332
// exit ;
55330: GO 55418
// un := tmp [ rand ( 1 , tmp ) ] ;
55332: LD_ADDR_VAR 0 2
55336: PUSH
55337: LD_VAR 0 3
55341: PUSH
55342: LD_INT 1
55344: PPUSH
55345: LD_VAR 0 3
55349: PPUSH
55350: CALL_OW 12
55354: ARRAY
55355: ST_TO_ADDR
// if Crawls ( un ) then
55356: LD_VAR 0 2
55360: PPUSH
55361: CALL_OW 318
55365: IFFALSE 55376
// ComWalk ( un ) ;
55367: LD_VAR 0 2
55371: PPUSH
55372: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55376: LD_VAR 0 2
55380: PPUSH
55381: LD_INT 9
55383: PPUSH
55384: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55388: LD_INT 28
55390: PPUSH
55391: LD_OWVAR 2
55395: PPUSH
55396: LD_INT 2
55398: PPUSH
55399: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55403: LD_INT 29
55405: PPUSH
55406: LD_OWVAR 2
55410: PPUSH
55411: LD_INT 2
55413: PPUSH
55414: CALL_OW 322
// end ;
55418: PPOPN 3
55420: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55421: LD_EXP 28
55425: PUSH
55426: LD_EXP 71
55430: AND
55431: IFFALSE 55542
55433: GO 55435
55435: DISABLE
55436: LD_INT 0
55438: PPUSH
55439: PPUSH
55440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55441: LD_ADDR_VAR 0 3
55445: PUSH
55446: LD_INT 22
55448: PUSH
55449: LD_OWVAR 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 25
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PPUSH
55472: CALL_OW 69
55476: ST_TO_ADDR
// if not tmp then
55477: LD_VAR 0 3
55481: NOT
55482: IFFALSE 55486
// exit ;
55484: GO 55542
// un := tmp [ rand ( 1 , tmp ) ] ;
55486: LD_ADDR_VAR 0 2
55490: PUSH
55491: LD_VAR 0 3
55495: PUSH
55496: LD_INT 1
55498: PPUSH
55499: LD_VAR 0 3
55503: PPUSH
55504: CALL_OW 12
55508: ARRAY
55509: ST_TO_ADDR
// if Crawls ( un ) then
55510: LD_VAR 0 2
55514: PPUSH
55515: CALL_OW 318
55519: IFFALSE 55530
// ComWalk ( un ) ;
55521: LD_VAR 0 2
55525: PPUSH
55526: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55530: LD_VAR 0 2
55534: PPUSH
55535: LD_INT 8
55537: PPUSH
55538: CALL_OW 336
// end ;
55542: PPOPN 3
55544: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55545: LD_EXP 28
55549: PUSH
55550: LD_EXP 72
55554: AND
55555: IFFALSE 55699
55557: GO 55559
55559: DISABLE
55560: LD_INT 0
55562: PPUSH
55563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55564: LD_ADDR_VAR 0 2
55568: PUSH
55569: LD_INT 22
55571: PUSH
55572: LD_OWVAR 2
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 21
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: LD_INT 34
55596: PUSH
55597: LD_INT 12
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 34
55606: PUSH
55607: LD_INT 51
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 34
55616: PUSH
55617: LD_INT 32
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: LIST
55634: PPUSH
55635: CALL_OW 69
55639: ST_TO_ADDR
// if not tmp then
55640: LD_VAR 0 2
55644: NOT
55645: IFFALSE 55649
// exit ;
55647: GO 55699
// for i in tmp do
55649: LD_ADDR_VAR 0 1
55653: PUSH
55654: LD_VAR 0 2
55658: PUSH
55659: FOR_IN
55660: IFFALSE 55697
// if GetCargo ( i , mat_artifact ) = 0 then
55662: LD_VAR 0 1
55666: PPUSH
55667: LD_INT 4
55669: PPUSH
55670: CALL_OW 289
55674: PUSH
55675: LD_INT 0
55677: EQUAL
55678: IFFALSE 55695
// SetCargo ( i , mat_siberit , 100 ) ;
55680: LD_VAR 0 1
55684: PPUSH
55685: LD_INT 3
55687: PPUSH
55688: LD_INT 100
55690: PPUSH
55691: CALL_OW 290
55695: GO 55659
55697: POP
55698: POP
// end ;
55699: PPOPN 2
55701: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55702: LD_EXP 28
55706: PUSH
55707: LD_EXP 73
55711: AND
55712: IFFALSE 55895
55714: GO 55716
55716: DISABLE
55717: LD_INT 0
55719: PPUSH
55720: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55721: LD_ADDR_VAR 0 2
55725: PUSH
55726: LD_INT 22
55728: PUSH
55729: LD_OWVAR 2
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PPUSH
55738: CALL_OW 69
55742: ST_TO_ADDR
// if not tmp then
55743: LD_VAR 0 2
55747: NOT
55748: IFFALSE 55752
// exit ;
55750: GO 55895
// for i := 1 to 2 do
55752: LD_ADDR_VAR 0 1
55756: PUSH
55757: DOUBLE
55758: LD_INT 1
55760: DEC
55761: ST_TO_ADDR
55762: LD_INT 2
55764: PUSH
55765: FOR_TO
55766: IFFALSE 55893
// begin uc_side := your_side ;
55768: LD_ADDR_OWVAR 20
55772: PUSH
55773: LD_OWVAR 2
55777: ST_TO_ADDR
// uc_nation := nation_american ;
55778: LD_ADDR_OWVAR 21
55782: PUSH
55783: LD_INT 1
55785: ST_TO_ADDR
// vc_chassis := us_morphling ;
55786: LD_ADDR_OWVAR 37
55790: PUSH
55791: LD_INT 5
55793: ST_TO_ADDR
// vc_engine := engine_siberite ;
55794: LD_ADDR_OWVAR 39
55798: PUSH
55799: LD_INT 3
55801: ST_TO_ADDR
// vc_control := control_computer ;
55802: LD_ADDR_OWVAR 38
55806: PUSH
55807: LD_INT 3
55809: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55810: LD_ADDR_OWVAR 40
55814: PUSH
55815: LD_INT 10
55817: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55818: LD_VAR 0 2
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: PPUSH
55827: CALL_OW 310
55831: NOT
55832: IFFALSE 55879
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55834: CALL_OW 45
55838: PPUSH
55839: LD_VAR 0 2
55843: PUSH
55844: LD_INT 1
55846: ARRAY
55847: PPUSH
55848: CALL_OW 250
55852: PPUSH
55853: LD_VAR 0 2
55857: PUSH
55858: LD_INT 1
55860: ARRAY
55861: PPUSH
55862: CALL_OW 251
55866: PPUSH
55867: LD_INT 12
55869: PPUSH
55870: LD_INT 1
55872: PPUSH
55873: CALL_OW 50
55877: GO 55891
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55879: CALL_OW 45
55883: PPUSH
55884: LD_INT 1
55886: PPUSH
55887: CALL_OW 51
// end ;
55891: GO 55765
55893: POP
55894: POP
// end ;
55895: PPOPN 2
55897: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55898: LD_EXP 28
55902: PUSH
55903: LD_EXP 74
55907: AND
55908: IFFALSE 56130
55910: GO 55912
55912: DISABLE
55913: LD_INT 0
55915: PPUSH
55916: PPUSH
55917: PPUSH
55918: PPUSH
55919: PPUSH
55920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55921: LD_ADDR_VAR 0 6
55925: PUSH
55926: LD_INT 22
55928: PUSH
55929: LD_OWVAR 2
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 21
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 3
55950: PUSH
55951: LD_INT 23
55953: PUSH
55954: LD_INT 0
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: PPUSH
55970: CALL_OW 69
55974: ST_TO_ADDR
// if not tmp then
55975: LD_VAR 0 6
55979: NOT
55980: IFFALSE 55984
// exit ;
55982: GO 56130
// s1 := rand ( 1 , 4 ) ;
55984: LD_ADDR_VAR 0 2
55988: PUSH
55989: LD_INT 1
55991: PPUSH
55992: LD_INT 4
55994: PPUSH
55995: CALL_OW 12
55999: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56000: LD_ADDR_VAR 0 4
56004: PUSH
56005: LD_VAR 0 6
56009: PUSH
56010: LD_INT 1
56012: ARRAY
56013: PPUSH
56014: LD_VAR 0 2
56018: PPUSH
56019: CALL_OW 259
56023: ST_TO_ADDR
// if s1 = 1 then
56024: LD_VAR 0 2
56028: PUSH
56029: LD_INT 1
56031: EQUAL
56032: IFFALSE 56052
// s2 := rand ( 2 , 4 ) else
56034: LD_ADDR_VAR 0 3
56038: PUSH
56039: LD_INT 2
56041: PPUSH
56042: LD_INT 4
56044: PPUSH
56045: CALL_OW 12
56049: ST_TO_ADDR
56050: GO 56060
// s2 := 1 ;
56052: LD_ADDR_VAR 0 3
56056: PUSH
56057: LD_INT 1
56059: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56060: LD_ADDR_VAR 0 5
56064: PUSH
56065: LD_VAR 0 6
56069: PUSH
56070: LD_INT 1
56072: ARRAY
56073: PPUSH
56074: LD_VAR 0 3
56078: PPUSH
56079: CALL_OW 259
56083: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56084: LD_VAR 0 6
56088: PUSH
56089: LD_INT 1
56091: ARRAY
56092: PPUSH
56093: LD_VAR 0 2
56097: PPUSH
56098: LD_VAR 0 5
56102: PPUSH
56103: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56107: LD_VAR 0 6
56111: PUSH
56112: LD_INT 1
56114: ARRAY
56115: PPUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: LD_VAR 0 4
56125: PPUSH
56126: CALL_OW 237
// end ;
56130: PPOPN 6
56132: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56133: LD_EXP 28
56137: PUSH
56138: LD_EXP 75
56142: AND
56143: IFFALSE 56222
56145: GO 56147
56147: DISABLE
56148: LD_INT 0
56150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56151: LD_ADDR_VAR 0 1
56155: PUSH
56156: LD_INT 22
56158: PUSH
56159: LD_OWVAR 2
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 30
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PPUSH
56182: CALL_OW 69
56186: ST_TO_ADDR
// if not tmp then
56187: LD_VAR 0 1
56191: NOT
56192: IFFALSE 56196
// exit ;
56194: GO 56222
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56196: LD_VAR 0 1
56200: PUSH
56201: LD_INT 1
56203: PPUSH
56204: LD_VAR 0 1
56208: PPUSH
56209: CALL_OW 12
56213: ARRAY
56214: PPUSH
56215: LD_INT 1
56217: PPUSH
56218: CALL_OW 234
// end ;
56222: PPOPN 1
56224: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56225: LD_EXP 28
56229: PUSH
56230: LD_EXP 76
56234: AND
56235: IFFALSE 56347
56237: GO 56239
56239: DISABLE
56240: LD_INT 0
56242: PPUSH
56243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56244: LD_ADDR_VAR 0 2
56248: PUSH
56249: LD_INT 22
56251: PUSH
56252: LD_OWVAR 2
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 30
56266: PUSH
56267: LD_INT 27
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 30
56276: PUSH
56277: LD_INT 26
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 30
56286: PUSH
56287: LD_INT 28
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PPUSH
56304: CALL_OW 69
56308: ST_TO_ADDR
// if not tmp then
56309: LD_VAR 0 2
56313: NOT
56314: IFFALSE 56318
// exit ;
56316: GO 56347
// for i in tmp do
56318: LD_ADDR_VAR 0 1
56322: PUSH
56323: LD_VAR 0 2
56327: PUSH
56328: FOR_IN
56329: IFFALSE 56345
// SetLives ( i , 1 ) ;
56331: LD_VAR 0 1
56335: PPUSH
56336: LD_INT 1
56338: PPUSH
56339: CALL_OW 234
56343: GO 56328
56345: POP
56346: POP
// end ;
56347: PPOPN 2
56349: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56350: LD_EXP 28
56354: PUSH
56355: LD_EXP 77
56359: AND
56360: IFFALSE 56634
56362: GO 56364
56364: DISABLE
56365: LD_INT 0
56367: PPUSH
56368: PPUSH
56369: PPUSH
// begin i := rand ( 1 , 7 ) ;
56370: LD_ADDR_VAR 0 1
56374: PUSH
56375: LD_INT 1
56377: PPUSH
56378: LD_INT 7
56380: PPUSH
56381: CALL_OW 12
56385: ST_TO_ADDR
// case i of 1 :
56386: LD_VAR 0 1
56390: PUSH
56391: LD_INT 1
56393: DOUBLE
56394: EQUAL
56395: IFTRUE 56399
56397: GO 56409
56399: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56400: LD_STRING earthquake(getX(game), 0, 32)
56402: PPUSH
56403: CALL_OW 559
56407: GO 56634
56409: LD_INT 2
56411: DOUBLE
56412: EQUAL
56413: IFTRUE 56417
56415: GO 56431
56417: POP
// begin ToLua ( displayStucuk(); ) ;
56418: LD_STRING displayStucuk();
56420: PPUSH
56421: CALL_OW 559
// ResetFog ;
56425: CALL_OW 335
// end ; 3 :
56429: GO 56634
56431: LD_INT 3
56433: DOUBLE
56434: EQUAL
56435: IFTRUE 56439
56437: GO 56543
56439: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56440: LD_ADDR_VAR 0 2
56444: PUSH
56445: LD_INT 22
56447: PUSH
56448: LD_OWVAR 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 25
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PPUSH
56471: CALL_OW 69
56475: ST_TO_ADDR
// if not tmp then
56476: LD_VAR 0 2
56480: NOT
56481: IFFALSE 56485
// exit ;
56483: GO 56634
// un := tmp [ rand ( 1 , tmp ) ] ;
56485: LD_ADDR_VAR 0 3
56489: PUSH
56490: LD_VAR 0 2
56494: PUSH
56495: LD_INT 1
56497: PPUSH
56498: LD_VAR 0 2
56502: PPUSH
56503: CALL_OW 12
56507: ARRAY
56508: ST_TO_ADDR
// if Crawls ( un ) then
56509: LD_VAR 0 3
56513: PPUSH
56514: CALL_OW 318
56518: IFFALSE 56529
// ComWalk ( un ) ;
56520: LD_VAR 0 3
56524: PPUSH
56525: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56529: LD_VAR 0 3
56533: PPUSH
56534: LD_INT 8
56536: PPUSH
56537: CALL_OW 336
// end ; 4 :
56541: GO 56634
56543: LD_INT 4
56545: DOUBLE
56546: EQUAL
56547: IFTRUE 56551
56549: GO 56612
56551: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56552: LD_ADDR_VAR 0 2
56556: PUSH
56557: LD_INT 22
56559: PUSH
56560: LD_OWVAR 2
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 30
56571: PUSH
56572: LD_INT 29
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PPUSH
56583: CALL_OW 69
56587: ST_TO_ADDR
// if not tmp then
56588: LD_VAR 0 2
56592: NOT
56593: IFFALSE 56597
// exit ;
56595: GO 56634
// DestroyUnit ( tmp [ 1 ] ) ;
56597: LD_VAR 0 2
56601: PUSH
56602: LD_INT 1
56604: ARRAY
56605: PPUSH
56606: CALL_OW 65
// end ; 5 .. 7 :
56610: GO 56634
56612: LD_INT 5
56614: DOUBLE
56615: GREATEREQUAL
56616: IFFALSE 56624
56618: LD_INT 7
56620: DOUBLE
56621: LESSEQUAL
56622: IFTRUE 56626
56624: GO 56633
56626: POP
// StreamSibBomb ; end ;
56627: CALL 52884 0 0
56631: GO 56634
56633: POP
// end ;
56634: PPOPN 3
56636: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56637: LD_EXP 28
56641: PUSH
56642: LD_EXP 78
56646: AND
56647: IFFALSE 56803
56649: GO 56651
56651: DISABLE
56652: LD_INT 0
56654: PPUSH
56655: PPUSH
56656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56657: LD_ADDR_VAR 0 2
56661: PUSH
56662: LD_INT 81
56664: PUSH
56665: LD_OWVAR 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 21
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 21
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PPUSH
56706: CALL_OW 69
56710: ST_TO_ADDR
// if not tmp then
56711: LD_VAR 0 2
56715: NOT
56716: IFFALSE 56720
// exit ;
56718: GO 56803
// p := 0 ;
56720: LD_ADDR_VAR 0 3
56724: PUSH
56725: LD_INT 0
56727: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56728: LD_INT 35
56730: PPUSH
56731: CALL_OW 67
// p := p + 1 ;
56735: LD_ADDR_VAR 0 3
56739: PUSH
56740: LD_VAR 0 3
56744: PUSH
56745: LD_INT 1
56747: PLUS
56748: ST_TO_ADDR
// for i in tmp do
56749: LD_ADDR_VAR 0 1
56753: PUSH
56754: LD_VAR 0 2
56758: PUSH
56759: FOR_IN
56760: IFFALSE 56791
// if GetLives ( i ) < 1000 then
56762: LD_VAR 0 1
56766: PPUSH
56767: CALL_OW 256
56771: PUSH
56772: LD_INT 1000
56774: LESS
56775: IFFALSE 56789
// SetLives ( i , 1000 ) ;
56777: LD_VAR 0 1
56781: PPUSH
56782: LD_INT 1000
56784: PPUSH
56785: CALL_OW 234
56789: GO 56759
56791: POP
56792: POP
// until p > 20 ;
56793: LD_VAR 0 3
56797: PUSH
56798: LD_INT 20
56800: GREATER
56801: IFFALSE 56728
// end ;
56803: PPOPN 3
56805: END
// every 0 0$1 trigger StreamModeActive and sTime do
56806: LD_EXP 28
56810: PUSH
56811: LD_EXP 79
56815: AND
56816: IFFALSE 56851
56818: GO 56820
56820: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56821: LD_INT 28
56823: PPUSH
56824: LD_OWVAR 2
56828: PPUSH
56829: LD_INT 2
56831: PPUSH
56832: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56836: LD_INT 30
56838: PPUSH
56839: LD_OWVAR 2
56843: PPUSH
56844: LD_INT 2
56846: PPUSH
56847: CALL_OW 322
// end ;
56851: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56852: LD_EXP 28
56856: PUSH
56857: LD_EXP 80
56861: AND
56862: IFFALSE 56983
56864: GO 56866
56866: DISABLE
56867: LD_INT 0
56869: PPUSH
56870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56871: LD_ADDR_VAR 0 2
56875: PUSH
56876: LD_INT 22
56878: PUSH
56879: LD_OWVAR 2
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 21
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: LD_INT 23
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: PPUSH
56920: CALL_OW 69
56924: ST_TO_ADDR
// if not tmp then
56925: LD_VAR 0 2
56929: NOT
56930: IFFALSE 56934
// exit ;
56932: GO 56983
// for i in tmp do
56934: LD_ADDR_VAR 0 1
56938: PUSH
56939: LD_VAR 0 2
56943: PUSH
56944: FOR_IN
56945: IFFALSE 56981
// begin if Crawls ( i ) then
56947: LD_VAR 0 1
56951: PPUSH
56952: CALL_OW 318
56956: IFFALSE 56967
// ComWalk ( i ) ;
56958: LD_VAR 0 1
56962: PPUSH
56963: CALL_OW 138
// SetClass ( i , 2 ) ;
56967: LD_VAR 0 1
56971: PPUSH
56972: LD_INT 2
56974: PPUSH
56975: CALL_OW 336
// end ;
56979: GO 56944
56981: POP
56982: POP
// end ;
56983: PPOPN 2
56985: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56986: LD_EXP 28
56990: PUSH
56991: LD_EXP 81
56995: AND
56996: IFFALSE 57277
56998: GO 57000
57000: DISABLE
57001: LD_INT 0
57003: PPUSH
57004: PPUSH
57005: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57006: LD_OWVAR 2
57010: PPUSH
57011: LD_INT 9
57013: PPUSH
57014: LD_INT 1
57016: PPUSH
57017: LD_INT 1
57019: PPUSH
57020: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57024: LD_INT 9
57026: PPUSH
57027: LD_OWVAR 2
57031: PPUSH
57032: CALL_OW 343
// uc_side := 9 ;
57036: LD_ADDR_OWVAR 20
57040: PUSH
57041: LD_INT 9
57043: ST_TO_ADDR
// uc_nation := 2 ;
57044: LD_ADDR_OWVAR 21
57048: PUSH
57049: LD_INT 2
57051: ST_TO_ADDR
// hc_name := Dark Warrior ;
57052: LD_ADDR_OWVAR 26
57056: PUSH
57057: LD_STRING Dark Warrior
57059: ST_TO_ADDR
// hc_gallery :=  ;
57060: LD_ADDR_OWVAR 33
57064: PUSH
57065: LD_STRING 
57067: ST_TO_ADDR
// hc_noskilllimit := true ;
57068: LD_ADDR_OWVAR 76
57072: PUSH
57073: LD_INT 1
57075: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57076: LD_ADDR_OWVAR 31
57080: PUSH
57081: LD_INT 30
57083: PUSH
57084: LD_INT 30
57086: PUSH
57087: LD_INT 30
57089: PUSH
57090: LD_INT 30
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// un := CreateHuman ;
57099: LD_ADDR_VAR 0 3
57103: PUSH
57104: CALL_OW 44
57108: ST_TO_ADDR
// hc_noskilllimit := false ;
57109: LD_ADDR_OWVAR 76
57113: PUSH
57114: LD_INT 0
57116: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57117: LD_VAR 0 3
57121: PPUSH
57122: LD_INT 1
57124: PPUSH
57125: CALL_OW 51
// p := 0 ;
57129: LD_ADDR_VAR 0 2
57133: PUSH
57134: LD_INT 0
57136: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57137: LD_INT 35
57139: PPUSH
57140: CALL_OW 67
// p := p + 1 ;
57144: LD_ADDR_VAR 0 2
57148: PUSH
57149: LD_VAR 0 2
57153: PUSH
57154: LD_INT 1
57156: PLUS
57157: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57158: LD_VAR 0 3
57162: PPUSH
57163: CALL_OW 256
57167: PUSH
57168: LD_INT 1000
57170: LESS
57171: IFFALSE 57185
// SetLives ( un , 1000 ) ;
57173: LD_VAR 0 3
57177: PPUSH
57178: LD_INT 1000
57180: PPUSH
57181: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57185: LD_VAR 0 3
57189: PPUSH
57190: LD_INT 81
57192: PUSH
57193: LD_OWVAR 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 91
57204: PUSH
57205: LD_VAR 0 3
57209: PUSH
57210: LD_INT 30
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PPUSH
57222: CALL_OW 69
57226: PPUSH
57227: LD_VAR 0 3
57231: PPUSH
57232: CALL_OW 74
57236: PPUSH
57237: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
57241: LD_VAR 0 2
57245: PUSH
57246: LD_INT 60
57248: GREATER
57249: PUSH
57250: LD_VAR 0 3
57254: PPUSH
57255: CALL_OW 301
57259: OR
57260: IFFALSE 57137
// if un then
57262: LD_VAR 0 3
57266: IFFALSE 57277
// RemoveUnit ( un ) ;
57268: LD_VAR 0 3
57272: PPUSH
57273: CALL_OW 64
// end ;
57277: PPOPN 3
57279: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57280: LD_INT 0
57282: PPUSH
// case cmd of 301 :
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 301
57290: DOUBLE
57291: EQUAL
57292: IFTRUE 57296
57294: GO 57328
57296: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57297: LD_VAR 0 6
57301: PPUSH
57302: LD_VAR 0 7
57306: PPUSH
57307: LD_VAR 0 8
57311: PPUSH
57312: LD_VAR 0 4
57316: PPUSH
57317: LD_VAR 0 5
57321: PPUSH
57322: CALL 58529 0 5
57326: GO 57449
57328: LD_INT 302
57330: DOUBLE
57331: EQUAL
57332: IFTRUE 57336
57334: GO 57373
57336: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57337: LD_VAR 0 6
57341: PPUSH
57342: LD_VAR 0 7
57346: PPUSH
57347: LD_VAR 0 8
57351: PPUSH
57352: LD_VAR 0 9
57356: PPUSH
57357: LD_VAR 0 4
57361: PPUSH
57362: LD_VAR 0 5
57366: PPUSH
57367: CALL 58620 0 6
57371: GO 57449
57373: LD_INT 303
57375: DOUBLE
57376: EQUAL
57377: IFTRUE 57381
57379: GO 57418
57381: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57382: LD_VAR 0 6
57386: PPUSH
57387: LD_VAR 0 7
57391: PPUSH
57392: LD_VAR 0 8
57396: PPUSH
57397: LD_VAR 0 9
57401: PPUSH
57402: LD_VAR 0 4
57406: PPUSH
57407: LD_VAR 0 5
57411: PPUSH
57412: CALL 57454 0 6
57416: GO 57449
57418: LD_INT 304
57420: DOUBLE
57421: EQUAL
57422: IFTRUE 57426
57424: GO 57448
57426: POP
// hHackTeleport ( unit , x , y ) ; end ;
57427: LD_VAR 0 2
57431: PPUSH
57432: LD_VAR 0 4
57436: PPUSH
57437: LD_VAR 0 5
57441: PPUSH
57442: CALL 59213 0 3
57446: GO 57449
57448: POP
// end ;
57449: LD_VAR 0 12
57453: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57454: LD_INT 0
57456: PPUSH
57457: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57458: LD_VAR 0 1
57462: PUSH
57463: LD_INT 1
57465: LESS
57466: PUSH
57467: LD_VAR 0 1
57471: PUSH
57472: LD_INT 3
57474: GREATER
57475: OR
57476: PUSH
57477: LD_VAR 0 5
57481: PPUSH
57482: LD_VAR 0 6
57486: PPUSH
57487: CALL_OW 428
57491: OR
57492: IFFALSE 57496
// exit ;
57494: GO 58216
// uc_side := your_side ;
57496: LD_ADDR_OWVAR 20
57500: PUSH
57501: LD_OWVAR 2
57505: ST_TO_ADDR
// uc_nation := nation ;
57506: LD_ADDR_OWVAR 21
57510: PUSH
57511: LD_VAR 0 1
57515: ST_TO_ADDR
// bc_level = 1 ;
57516: LD_ADDR_OWVAR 43
57520: PUSH
57521: LD_INT 1
57523: ST_TO_ADDR
// case btype of 1 :
57524: LD_VAR 0 2
57528: PUSH
57529: LD_INT 1
57531: DOUBLE
57532: EQUAL
57533: IFTRUE 57537
57535: GO 57548
57537: POP
// bc_type := b_depot ; 2 :
57538: LD_ADDR_OWVAR 42
57542: PUSH
57543: LD_INT 0
57545: ST_TO_ADDR
57546: GO 58160
57548: LD_INT 2
57550: DOUBLE
57551: EQUAL
57552: IFTRUE 57556
57554: GO 57567
57556: POP
// bc_type := b_warehouse ; 3 :
57557: LD_ADDR_OWVAR 42
57561: PUSH
57562: LD_INT 1
57564: ST_TO_ADDR
57565: GO 58160
57567: LD_INT 3
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57575
57573: GO 57586
57575: POP
// bc_type := b_lab ; 4 .. 9 :
57576: LD_ADDR_OWVAR 42
57580: PUSH
57581: LD_INT 6
57583: ST_TO_ADDR
57584: GO 58160
57586: LD_INT 4
57588: DOUBLE
57589: GREATEREQUAL
57590: IFFALSE 57598
57592: LD_INT 9
57594: DOUBLE
57595: LESSEQUAL
57596: IFTRUE 57600
57598: GO 57652
57600: POP
// begin bc_type := b_lab_half ;
57601: LD_ADDR_OWVAR 42
57605: PUSH
57606: LD_INT 7
57608: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57609: LD_ADDR_OWVAR 44
57613: PUSH
57614: LD_INT 10
57616: PUSH
57617: LD_INT 11
57619: PUSH
57620: LD_INT 12
57622: PUSH
57623: LD_INT 15
57625: PUSH
57626: LD_INT 14
57628: PUSH
57629: LD_INT 13
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_INT 3
57647: MINUS
57648: ARRAY
57649: ST_TO_ADDR
// end ; 10 .. 13 :
57650: GO 58160
57652: LD_INT 10
57654: DOUBLE
57655: GREATEREQUAL
57656: IFFALSE 57664
57658: LD_INT 13
57660: DOUBLE
57661: LESSEQUAL
57662: IFTRUE 57666
57664: GO 57743
57666: POP
// begin bc_type := b_lab_full ;
57667: LD_ADDR_OWVAR 42
57671: PUSH
57672: LD_INT 8
57674: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57675: LD_ADDR_OWVAR 44
57679: PUSH
57680: LD_INT 10
57682: PUSH
57683: LD_INT 12
57685: PUSH
57686: LD_INT 14
57688: PUSH
57689: LD_INT 13
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: PUSH
57698: LD_VAR 0 2
57702: PUSH
57703: LD_INT 9
57705: MINUS
57706: ARRAY
57707: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57708: LD_ADDR_OWVAR 45
57712: PUSH
57713: LD_INT 11
57715: PUSH
57716: LD_INT 15
57718: PUSH
57719: LD_INT 12
57721: PUSH
57722: LD_INT 15
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: PUSH
57731: LD_VAR 0 2
57735: PUSH
57736: LD_INT 9
57738: MINUS
57739: ARRAY
57740: ST_TO_ADDR
// end ; 14 :
57741: GO 58160
57743: LD_INT 14
57745: DOUBLE
57746: EQUAL
57747: IFTRUE 57751
57749: GO 57762
57751: POP
// bc_type := b_workshop ; 15 :
57752: LD_ADDR_OWVAR 42
57756: PUSH
57757: LD_INT 2
57759: ST_TO_ADDR
57760: GO 58160
57762: LD_INT 15
57764: DOUBLE
57765: EQUAL
57766: IFTRUE 57770
57768: GO 57781
57770: POP
// bc_type := b_factory ; 16 :
57771: LD_ADDR_OWVAR 42
57775: PUSH
57776: LD_INT 3
57778: ST_TO_ADDR
57779: GO 58160
57781: LD_INT 16
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 57800
57789: POP
// bc_type := b_ext_gun ; 17 :
57790: LD_ADDR_OWVAR 42
57794: PUSH
57795: LD_INT 17
57797: ST_TO_ADDR
57798: GO 58160
57800: LD_INT 17
57802: DOUBLE
57803: EQUAL
57804: IFTRUE 57808
57806: GO 57836
57808: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57809: LD_ADDR_OWVAR 42
57813: PUSH
57814: LD_INT 19
57816: PUSH
57817: LD_INT 23
57819: PUSH
57820: LD_INT 19
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: PUSH
57828: LD_VAR 0 1
57832: ARRAY
57833: ST_TO_ADDR
57834: GO 58160
57836: LD_INT 18
57838: DOUBLE
57839: EQUAL
57840: IFTRUE 57844
57842: GO 57855
57844: POP
// bc_type := b_ext_radar ; 19 :
57845: LD_ADDR_OWVAR 42
57849: PUSH
57850: LD_INT 20
57852: ST_TO_ADDR
57853: GO 58160
57855: LD_INT 19
57857: DOUBLE
57858: EQUAL
57859: IFTRUE 57863
57861: GO 57874
57863: POP
// bc_type := b_ext_radio ; 20 :
57864: LD_ADDR_OWVAR 42
57868: PUSH
57869: LD_INT 22
57871: ST_TO_ADDR
57872: GO 58160
57874: LD_INT 20
57876: DOUBLE
57877: EQUAL
57878: IFTRUE 57882
57880: GO 57893
57882: POP
// bc_type := b_ext_siberium ; 21 :
57883: LD_ADDR_OWVAR 42
57887: PUSH
57888: LD_INT 21
57890: ST_TO_ADDR
57891: GO 58160
57893: LD_INT 21
57895: DOUBLE
57896: EQUAL
57897: IFTRUE 57901
57899: GO 57912
57901: POP
// bc_type := b_ext_computer ; 22 :
57902: LD_ADDR_OWVAR 42
57906: PUSH
57907: LD_INT 24
57909: ST_TO_ADDR
57910: GO 58160
57912: LD_INT 22
57914: DOUBLE
57915: EQUAL
57916: IFTRUE 57920
57918: GO 57931
57920: POP
// bc_type := b_ext_track ; 23 :
57921: LD_ADDR_OWVAR 42
57925: PUSH
57926: LD_INT 16
57928: ST_TO_ADDR
57929: GO 58160
57931: LD_INT 23
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57939
57937: GO 57950
57939: POP
// bc_type := b_ext_laser ; 24 :
57940: LD_ADDR_OWVAR 42
57944: PUSH
57945: LD_INT 25
57947: ST_TO_ADDR
57948: GO 58160
57950: LD_INT 24
57952: DOUBLE
57953: EQUAL
57954: IFTRUE 57958
57956: GO 57969
57958: POP
// bc_type := b_control_tower ; 25 :
57959: LD_ADDR_OWVAR 42
57963: PUSH
57964: LD_INT 36
57966: ST_TO_ADDR
57967: GO 58160
57969: LD_INT 25
57971: DOUBLE
57972: EQUAL
57973: IFTRUE 57977
57975: GO 57988
57977: POP
// bc_type := b_breastwork ; 26 :
57978: LD_ADDR_OWVAR 42
57982: PUSH
57983: LD_INT 31
57985: ST_TO_ADDR
57986: GO 58160
57988: LD_INT 26
57990: DOUBLE
57991: EQUAL
57992: IFTRUE 57996
57994: GO 58007
57996: POP
// bc_type := b_bunker ; 27 :
57997: LD_ADDR_OWVAR 42
58001: PUSH
58002: LD_INT 32
58004: ST_TO_ADDR
58005: GO 58160
58007: LD_INT 27
58009: DOUBLE
58010: EQUAL
58011: IFTRUE 58015
58013: GO 58026
58015: POP
// bc_type := b_turret ; 28 :
58016: LD_ADDR_OWVAR 42
58020: PUSH
58021: LD_INT 33
58023: ST_TO_ADDR
58024: GO 58160
58026: LD_INT 28
58028: DOUBLE
58029: EQUAL
58030: IFTRUE 58034
58032: GO 58045
58034: POP
// bc_type := b_armoury ; 29 :
58035: LD_ADDR_OWVAR 42
58039: PUSH
58040: LD_INT 4
58042: ST_TO_ADDR
58043: GO 58160
58045: LD_INT 29
58047: DOUBLE
58048: EQUAL
58049: IFTRUE 58053
58051: GO 58064
58053: POP
// bc_type := b_barracks ; 30 :
58054: LD_ADDR_OWVAR 42
58058: PUSH
58059: LD_INT 5
58061: ST_TO_ADDR
58062: GO 58160
58064: LD_INT 30
58066: DOUBLE
58067: EQUAL
58068: IFTRUE 58072
58070: GO 58083
58072: POP
// bc_type := b_solar_power ; 31 :
58073: LD_ADDR_OWVAR 42
58077: PUSH
58078: LD_INT 27
58080: ST_TO_ADDR
58081: GO 58160
58083: LD_INT 31
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58091
58089: GO 58102
58091: POP
// bc_type := b_oil_power ; 32 :
58092: LD_ADDR_OWVAR 42
58096: PUSH
58097: LD_INT 26
58099: ST_TO_ADDR
58100: GO 58160
58102: LD_INT 32
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58110
58108: GO 58121
58110: POP
// bc_type := b_siberite_power ; 33 :
58111: LD_ADDR_OWVAR 42
58115: PUSH
58116: LD_INT 28
58118: ST_TO_ADDR
58119: GO 58160
58121: LD_INT 33
58123: DOUBLE
58124: EQUAL
58125: IFTRUE 58129
58127: GO 58140
58129: POP
// bc_type := b_oil_mine ; 34 :
58130: LD_ADDR_OWVAR 42
58134: PUSH
58135: LD_INT 29
58137: ST_TO_ADDR
58138: GO 58160
58140: LD_INT 34
58142: DOUBLE
58143: EQUAL
58144: IFTRUE 58148
58146: GO 58159
58148: POP
// bc_type := b_siberite_mine ; end ;
58149: LD_ADDR_OWVAR 42
58153: PUSH
58154: LD_INT 30
58156: ST_TO_ADDR
58157: GO 58160
58159: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58160: LD_ADDR_VAR 0 8
58164: PUSH
58165: LD_VAR 0 5
58169: PPUSH
58170: LD_VAR 0 6
58174: PPUSH
58175: LD_VAR 0 3
58179: PPUSH
58180: CALL_OW 47
58184: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58185: LD_OWVAR 42
58189: PUSH
58190: LD_INT 32
58192: PUSH
58193: LD_INT 33
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: IN
58200: IFFALSE 58216
// PlaceWeaponTurret ( b , weapon ) ;
58202: LD_VAR 0 8
58206: PPUSH
58207: LD_VAR 0 4
58211: PPUSH
58212: CALL_OW 431
// end ;
58216: LD_VAR 0 7
58220: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58221: LD_INT 0
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58227: LD_ADDR_VAR 0 4
58231: PUSH
58232: LD_INT 22
58234: PUSH
58235: LD_OWVAR 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 30
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 30
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PPUSH
58276: CALL_OW 69
58280: ST_TO_ADDR
// if not tmp then
58281: LD_VAR 0 4
58285: NOT
58286: IFFALSE 58290
// exit ;
58288: GO 58349
// for i in tmp do
58290: LD_ADDR_VAR 0 2
58294: PUSH
58295: LD_VAR 0 4
58299: PUSH
58300: FOR_IN
58301: IFFALSE 58347
// for j = 1 to 3 do
58303: LD_ADDR_VAR 0 3
58307: PUSH
58308: DOUBLE
58309: LD_INT 1
58311: DEC
58312: ST_TO_ADDR
58313: LD_INT 3
58315: PUSH
58316: FOR_TO
58317: IFFALSE 58343
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58319: LD_VAR 0 2
58323: PPUSH
58324: CALL_OW 274
58328: PPUSH
58329: LD_VAR 0 3
58333: PPUSH
58334: LD_INT 99999
58336: PPUSH
58337: CALL_OW 277
58341: GO 58316
58343: POP
58344: POP
58345: GO 58300
58347: POP
58348: POP
// end ;
58349: LD_VAR 0 1
58353: RET
// export function hHackSetLevel10 ; var i , j ; begin
58354: LD_INT 0
58356: PPUSH
58357: PPUSH
58358: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_INT 21
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PPUSH
58374: CALL_OW 69
58378: PUSH
58379: FOR_IN
58380: IFFALSE 58432
// if IsSelected ( i ) then
58382: LD_VAR 0 2
58386: PPUSH
58387: CALL_OW 306
58391: IFFALSE 58430
// begin for j := 1 to 4 do
58393: LD_ADDR_VAR 0 3
58397: PUSH
58398: DOUBLE
58399: LD_INT 1
58401: DEC
58402: ST_TO_ADDR
58403: LD_INT 4
58405: PUSH
58406: FOR_TO
58407: IFFALSE 58428
// SetSkill ( i , j , 10 ) ;
58409: LD_VAR 0 2
58413: PPUSH
58414: LD_VAR 0 3
58418: PPUSH
58419: LD_INT 10
58421: PPUSH
58422: CALL_OW 237
58426: GO 58406
58428: POP
58429: POP
// end ;
58430: GO 58379
58432: POP
58433: POP
// end ;
58434: LD_VAR 0 1
58438: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58439: LD_INT 0
58441: PPUSH
58442: PPUSH
58443: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58444: LD_ADDR_VAR 0 2
58448: PUSH
58449: LD_INT 22
58451: PUSH
58452: LD_OWVAR 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 21
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PPUSH
58475: CALL_OW 69
58479: PUSH
58480: FOR_IN
58481: IFFALSE 58522
// begin for j := 1 to 4 do
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: DOUBLE
58489: LD_INT 1
58491: DEC
58492: ST_TO_ADDR
58493: LD_INT 4
58495: PUSH
58496: FOR_TO
58497: IFFALSE 58518
// SetSkill ( i , j , 10 ) ;
58499: LD_VAR 0 2
58503: PPUSH
58504: LD_VAR 0 3
58508: PPUSH
58509: LD_INT 10
58511: PPUSH
58512: CALL_OW 237
58516: GO 58496
58518: POP
58519: POP
// end ;
58520: GO 58480
58522: POP
58523: POP
// end ;
58524: LD_VAR 0 1
58528: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58529: LD_INT 0
58531: PPUSH
// uc_side := your_side ;
58532: LD_ADDR_OWVAR 20
58536: PUSH
58537: LD_OWVAR 2
58541: ST_TO_ADDR
// uc_nation := nation ;
58542: LD_ADDR_OWVAR 21
58546: PUSH
58547: LD_VAR 0 1
58551: ST_TO_ADDR
// InitHc ;
58552: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58556: LD_INT 0
58558: PPUSH
58559: LD_VAR 0 2
58563: PPUSH
58564: LD_VAR 0 3
58568: PPUSH
58569: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58573: LD_VAR 0 4
58577: PPUSH
58578: LD_VAR 0 5
58582: PPUSH
58583: CALL_OW 428
58587: PUSH
58588: LD_INT 0
58590: EQUAL
58591: IFFALSE 58615
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58593: CALL_OW 44
58597: PPUSH
58598: LD_VAR 0 4
58602: PPUSH
58603: LD_VAR 0 5
58607: PPUSH
58608: LD_INT 1
58610: PPUSH
58611: CALL_OW 48
// end ;
58615: LD_VAR 0 6
58619: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
// uc_side := your_side ;
58624: LD_ADDR_OWVAR 20
58628: PUSH
58629: LD_OWVAR 2
58633: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58634: LD_VAR 0 1
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 2
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: LD_INT 5
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: IN
58661: IFFALSE 58673
// uc_nation := nation_american else
58663: LD_ADDR_OWVAR 21
58667: PUSH
58668: LD_INT 1
58670: ST_TO_ADDR
58671: GO 58716
// if chassis in [ 11 , 12 , 13 , 14 ] then
58673: LD_VAR 0 1
58677: PUSH
58678: LD_INT 11
58680: PUSH
58681: LD_INT 12
58683: PUSH
58684: LD_INT 13
58686: PUSH
58687: LD_INT 14
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: IN
58696: IFFALSE 58708
// uc_nation := nation_arabian else
58698: LD_ADDR_OWVAR 21
58702: PUSH
58703: LD_INT 2
58705: ST_TO_ADDR
58706: GO 58716
// uc_nation := nation_russian ;
58708: LD_ADDR_OWVAR 21
58712: PUSH
58713: LD_INT 3
58715: ST_TO_ADDR
// vc_chassis := chassis ;
58716: LD_ADDR_OWVAR 37
58720: PUSH
58721: LD_VAR 0 1
58725: ST_TO_ADDR
// vc_engine := engine ;
58726: LD_ADDR_OWVAR 39
58730: PUSH
58731: LD_VAR 0 2
58735: ST_TO_ADDR
// vc_control := control ;
58736: LD_ADDR_OWVAR 38
58740: PUSH
58741: LD_VAR 0 3
58745: ST_TO_ADDR
// vc_weapon := weapon ;
58746: LD_ADDR_OWVAR 40
58750: PUSH
58751: LD_VAR 0 4
58755: ST_TO_ADDR
// un := CreateVehicle ;
58756: LD_ADDR_VAR 0 8
58760: PUSH
58761: CALL_OW 45
58765: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58766: LD_VAR 0 8
58770: PPUSH
58771: LD_INT 0
58773: PPUSH
58774: LD_INT 5
58776: PPUSH
58777: CALL_OW 12
58781: PPUSH
58782: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58786: LD_VAR 0 8
58790: PPUSH
58791: LD_VAR 0 5
58795: PPUSH
58796: LD_VAR 0 6
58800: PPUSH
58801: LD_INT 1
58803: PPUSH
58804: CALL_OW 48
// end ;
58808: LD_VAR 0 7
58812: RET
// export hInvincible ; every 1 do
58813: GO 58815
58815: DISABLE
// hInvincible := [ ] ;
58816: LD_ADDR_EXP 82
58820: PUSH
58821: EMPTY
58822: ST_TO_ADDR
58823: END
// every 10 do var i ;
58824: GO 58826
58826: DISABLE
58827: LD_INT 0
58829: PPUSH
// begin enable ;
58830: ENABLE
// if not hInvincible then
58831: LD_EXP 82
58835: NOT
58836: IFFALSE 58840
// exit ;
58838: GO 58884
// for i in hInvincible do
58840: LD_ADDR_VAR 0 1
58844: PUSH
58845: LD_EXP 82
58849: PUSH
58850: FOR_IN
58851: IFFALSE 58882
// if GetLives ( i ) < 1000 then
58853: LD_VAR 0 1
58857: PPUSH
58858: CALL_OW 256
58862: PUSH
58863: LD_INT 1000
58865: LESS
58866: IFFALSE 58880
// SetLives ( i , 1000 ) ;
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_INT 1000
58875: PPUSH
58876: CALL_OW 234
58880: GO 58850
58882: POP
58883: POP
// end ;
58884: PPOPN 1
58886: END
// export function hHackInvincible ; var i ; begin
58887: LD_INT 0
58889: PPUSH
58890: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58891: LD_ADDR_VAR 0 2
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: LD_INT 21
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 21
58911: PUSH
58912: LD_INT 2
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: LIST
58923: PPUSH
58924: CALL_OW 69
58928: PUSH
58929: FOR_IN
58930: IFFALSE 58991
// if IsSelected ( i ) then
58932: LD_VAR 0 2
58936: PPUSH
58937: CALL_OW 306
58941: IFFALSE 58989
// begin if i in hInvincible then
58943: LD_VAR 0 2
58947: PUSH
58948: LD_EXP 82
58952: IN
58953: IFFALSE 58973
// hInvincible := hInvincible diff i else
58955: LD_ADDR_EXP 82
58959: PUSH
58960: LD_EXP 82
58964: PUSH
58965: LD_VAR 0 2
58969: DIFF
58970: ST_TO_ADDR
58971: GO 58989
// hInvincible := hInvincible union i ;
58973: LD_ADDR_EXP 82
58977: PUSH
58978: LD_EXP 82
58982: PUSH
58983: LD_VAR 0 2
58987: UNION
58988: ST_TO_ADDR
// end ;
58989: GO 58929
58991: POP
58992: POP
// end ;
58993: LD_VAR 0 1
58997: RET
// export function hHackInvisible ; var i , j ; begin
58998: LD_INT 0
59000: PPUSH
59001: PPUSH
59002: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59003: LD_ADDR_VAR 0 2
59007: PUSH
59008: LD_INT 21
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PPUSH
59018: CALL_OW 69
59022: PUSH
59023: FOR_IN
59024: IFFALSE 59048
// if IsSelected ( i ) then
59026: LD_VAR 0 2
59030: PPUSH
59031: CALL_OW 306
59035: IFFALSE 59046
// ComForceInvisible ( i ) ;
59037: LD_VAR 0 2
59041: PPUSH
59042: CALL_OW 496
59046: GO 59023
59048: POP
59049: POP
// end ;
59050: LD_VAR 0 1
59054: RET
// export function hHackChangeYourSide ; begin
59055: LD_INT 0
59057: PPUSH
// if your_side = 8 then
59058: LD_OWVAR 2
59062: PUSH
59063: LD_INT 8
59065: EQUAL
59066: IFFALSE 59078
// your_side := 0 else
59068: LD_ADDR_OWVAR 2
59072: PUSH
59073: LD_INT 0
59075: ST_TO_ADDR
59076: GO 59092
// your_side := your_side + 1 ;
59078: LD_ADDR_OWVAR 2
59082: PUSH
59083: LD_OWVAR 2
59087: PUSH
59088: LD_INT 1
59090: PLUS
59091: ST_TO_ADDR
// end ;
59092: LD_VAR 0 1
59096: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59097: LD_INT 0
59099: PPUSH
59100: PPUSH
59101: PPUSH
// for i in all_units do
59102: LD_ADDR_VAR 0 2
59106: PUSH
59107: LD_OWVAR 3
59111: PUSH
59112: FOR_IN
59113: IFFALSE 59191
// if IsSelected ( i ) then
59115: LD_VAR 0 2
59119: PPUSH
59120: CALL_OW 306
59124: IFFALSE 59189
// begin j := GetSide ( i ) ;
59126: LD_ADDR_VAR 0 3
59130: PUSH
59131: LD_VAR 0 2
59135: PPUSH
59136: CALL_OW 255
59140: ST_TO_ADDR
// if j = 8 then
59141: LD_VAR 0 3
59145: PUSH
59146: LD_INT 8
59148: EQUAL
59149: IFFALSE 59161
// j := 0 else
59151: LD_ADDR_VAR 0 3
59155: PUSH
59156: LD_INT 0
59158: ST_TO_ADDR
59159: GO 59175
// j := j + 1 ;
59161: LD_ADDR_VAR 0 3
59165: PUSH
59166: LD_VAR 0 3
59170: PUSH
59171: LD_INT 1
59173: PLUS
59174: ST_TO_ADDR
// SetSide ( i , j ) ;
59175: LD_VAR 0 2
59179: PPUSH
59180: LD_VAR 0 3
59184: PPUSH
59185: CALL_OW 235
// end ;
59189: GO 59112
59191: POP
59192: POP
// end ;
59193: LD_VAR 0 1
59197: RET
// export function hHackFog ; begin
59198: LD_INT 0
59200: PPUSH
// FogOff ( true ) ;
59201: LD_INT 1
59203: PPUSH
59204: CALL_OW 344
// end ;
59208: LD_VAR 0 1
59212: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59213: LD_INT 0
59215: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59216: LD_VAR 0 1
59220: PPUSH
59221: LD_VAR 0 2
59225: PPUSH
59226: LD_VAR 0 3
59230: PPUSH
59231: LD_INT 1
59233: PPUSH
59234: LD_INT 1
59236: PPUSH
59237: CALL_OW 483
// CenterOnXY ( x , y ) ;
59241: LD_VAR 0 2
59245: PPUSH
59246: LD_VAR 0 3
59250: PPUSH
59251: CALL_OW 84
// end ; end_of_file
59255: LD_VAR 0 4
59259: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59260: LD_INT 0
59262: PPUSH
59263: PPUSH
59264: PPUSH
59265: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59266: LD_VAR 0 1
59270: PPUSH
59271: CALL_OW 264
59275: PUSH
59276: LD_EXP 99
59280: EQUAL
59281: IFFALSE 59353
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59283: LD_INT 68
59285: PPUSH
59286: LD_VAR 0 1
59290: PPUSH
59291: CALL_OW 255
59295: PPUSH
59296: CALL_OW 321
59300: PUSH
59301: LD_INT 2
59303: EQUAL
59304: IFFALSE 59316
// eff := 70 else
59306: LD_ADDR_VAR 0 4
59310: PUSH
59311: LD_INT 70
59313: ST_TO_ADDR
59314: GO 59324
// eff := 30 ;
59316: LD_ADDR_VAR 0 4
59320: PUSH
59321: LD_INT 30
59323: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59324: LD_VAR 0 1
59328: PPUSH
59329: CALL_OW 250
59333: PPUSH
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL_OW 251
59343: PPUSH
59344: LD_VAR 0 4
59348: PPUSH
59349: CALL_OW 495
// end ; end ;
59353: LD_VAR 0 2
59357: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59358: LD_INT 0
59360: PPUSH
// end ;
59361: LD_VAR 0 4
59365: RET
// export function SOS_Command ( cmd ) ; begin
59366: LD_INT 0
59368: PPUSH
// end ;
59369: LD_VAR 0 2
59373: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59374: LD_INT 0
59376: PPUSH
// if cmd = 121 then
59377: LD_VAR 0 1
59381: PUSH
59382: LD_INT 121
59384: EQUAL
59385: IFFALSE 59387
// end ;
59387: LD_VAR 0 6
59391: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59392: LD_INT 0
59394: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59395: LD_VAR 0 1
59399: PUSH
59400: LD_INT 250
59402: EQUAL
59403: PUSH
59404: LD_VAR 0 2
59408: PPUSH
59409: CALL_OW 264
59413: PUSH
59414: LD_EXP 102
59418: EQUAL
59419: AND
59420: IFFALSE 59441
// MinerPlaceMine ( unit , x , y ) ;
59422: LD_VAR 0 2
59426: PPUSH
59427: LD_VAR 0 4
59431: PPUSH
59432: LD_VAR 0 5
59436: PPUSH
59437: CALL 61816 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59441: LD_VAR 0 1
59445: PUSH
59446: LD_INT 251
59448: EQUAL
59449: PUSH
59450: LD_VAR 0 2
59454: PPUSH
59455: CALL_OW 264
59459: PUSH
59460: LD_EXP 102
59464: EQUAL
59465: AND
59466: IFFALSE 59487
// MinerDetonateMine ( unit , x , y ) ;
59468: LD_VAR 0 2
59472: PPUSH
59473: LD_VAR 0 4
59477: PPUSH
59478: LD_VAR 0 5
59482: PPUSH
59483: CALL 62093 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59487: LD_VAR 0 1
59491: PUSH
59492: LD_INT 252
59494: EQUAL
59495: PUSH
59496: LD_VAR 0 2
59500: PPUSH
59501: CALL_OW 264
59505: PUSH
59506: LD_EXP 102
59510: EQUAL
59511: AND
59512: IFFALSE 59533
// MinerCreateMinefield ( unit , x , y ) ;
59514: LD_VAR 0 2
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: LD_VAR 0 5
59528: PPUSH
59529: CALL 62510 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59533: LD_VAR 0 1
59537: PUSH
59538: LD_INT 253
59540: EQUAL
59541: PUSH
59542: LD_VAR 0 2
59546: PPUSH
59547: CALL_OW 257
59551: PUSH
59552: LD_INT 5
59554: EQUAL
59555: AND
59556: IFFALSE 59577
// ComBinocular ( unit , x , y ) ;
59558: LD_VAR 0 2
59562: PPUSH
59563: LD_VAR 0 4
59567: PPUSH
59568: LD_VAR 0 5
59572: PPUSH
59573: CALL 62881 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59577: LD_VAR 0 1
59581: PUSH
59582: LD_INT 254
59584: EQUAL
59585: PUSH
59586: LD_VAR 0 2
59590: PPUSH
59591: CALL_OW 264
59595: PUSH
59596: LD_EXP 97
59600: EQUAL
59601: AND
59602: PUSH
59603: LD_VAR 0 3
59607: PPUSH
59608: CALL_OW 263
59612: PUSH
59613: LD_INT 3
59615: EQUAL
59616: AND
59617: IFFALSE 59633
// HackDestroyVehicle ( unit , selectedUnit ) ;
59619: LD_VAR 0 2
59623: PPUSH
59624: LD_VAR 0 3
59628: PPUSH
59629: CALL 61176 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59633: LD_VAR 0 1
59637: PUSH
59638: LD_INT 255
59640: EQUAL
59641: PUSH
59642: LD_VAR 0 2
59646: PPUSH
59647: CALL_OW 264
59651: PUSH
59652: LD_INT 14
59654: PUSH
59655: LD_INT 53
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: IN
59662: AND
59663: PUSH
59664: LD_VAR 0 4
59668: PPUSH
59669: LD_VAR 0 5
59673: PPUSH
59674: CALL_OW 488
59678: AND
59679: IFFALSE 59703
// CutTreeXYR ( unit , x , y , 12 ) ;
59681: LD_VAR 0 2
59685: PPUSH
59686: LD_VAR 0 4
59690: PPUSH
59691: LD_VAR 0 5
59695: PPUSH
59696: LD_INT 12
59698: PPUSH
59699: CALL 59742 0 4
// end ;
59703: LD_VAR 0 6
59707: RET
// export initPlantMineScript , plantMineList ; every 1 trigger not initPlantMineScript do
59708: LD_EXP 83
59712: NOT
59713: IFFALSE 59733
59715: GO 59717
59717: DISABLE
// begin initPlantMineScript := true ;
59718: LD_ADDR_EXP 83
59722: PUSH
59723: LD_INT 1
59725: ST_TO_ADDR
// plantMineList := [ ] ;
59726: LD_ADDR_EXP 84
59730: PUSH
59731: EMPTY
59732: ST_TO_ADDR
// end ;
59733: END
// export function ComGroupPlantMineXY ( units , x , y ) ; begin
59734: LD_INT 0
59736: PPUSH
// end ;
59737: LD_VAR 0 4
59741: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59742: LD_INT 0
59744: PPUSH
59745: PPUSH
59746: PPUSH
59747: PPUSH
59748: PPUSH
59749: PPUSH
59750: PPUSH
59751: PPUSH
59752: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59753: LD_VAR 0 1
59757: NOT
59758: PUSH
59759: LD_VAR 0 2
59763: PPUSH
59764: LD_VAR 0 3
59768: PPUSH
59769: CALL_OW 488
59773: NOT
59774: OR
59775: PUSH
59776: LD_VAR 0 4
59780: NOT
59781: OR
59782: IFFALSE 59786
// exit ;
59784: GO 60126
// list := [ ] ;
59786: LD_ADDR_VAR 0 13
59790: PUSH
59791: EMPTY
59792: ST_TO_ADDR
// if x - r < 0 then
59793: LD_VAR 0 2
59797: PUSH
59798: LD_VAR 0 4
59802: MINUS
59803: PUSH
59804: LD_INT 0
59806: LESS
59807: IFFALSE 59819
// min_x := 0 else
59809: LD_ADDR_VAR 0 7
59813: PUSH
59814: LD_INT 0
59816: ST_TO_ADDR
59817: GO 59835
// min_x := x - r ;
59819: LD_ADDR_VAR 0 7
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_VAR 0 4
59833: MINUS
59834: ST_TO_ADDR
// if y - r < 0 then
59835: LD_VAR 0 3
59839: PUSH
59840: LD_VAR 0 4
59844: MINUS
59845: PUSH
59846: LD_INT 0
59848: LESS
59849: IFFALSE 59861
// min_y := 0 else
59851: LD_ADDR_VAR 0 8
59855: PUSH
59856: LD_INT 0
59858: ST_TO_ADDR
59859: GO 59877
// min_y := y - r ;
59861: LD_ADDR_VAR 0 8
59865: PUSH
59866: LD_VAR 0 3
59870: PUSH
59871: LD_VAR 0 4
59875: MINUS
59876: ST_TO_ADDR
// max_x := x + r ;
59877: LD_ADDR_VAR 0 9
59881: PUSH
59882: LD_VAR 0 2
59886: PUSH
59887: LD_VAR 0 4
59891: PLUS
59892: ST_TO_ADDR
// max_y := y + r ;
59893: LD_ADDR_VAR 0 10
59897: PUSH
59898: LD_VAR 0 3
59902: PUSH
59903: LD_VAR 0 4
59907: PLUS
59908: ST_TO_ADDR
// for _x = min_x to max_x do
59909: LD_ADDR_VAR 0 11
59913: PUSH
59914: DOUBLE
59915: LD_VAR 0 7
59919: DEC
59920: ST_TO_ADDR
59921: LD_VAR 0 9
59925: PUSH
59926: FOR_TO
59927: IFFALSE 60044
// for _y = min_y to max_y do
59929: LD_ADDR_VAR 0 12
59933: PUSH
59934: DOUBLE
59935: LD_VAR 0 8
59939: DEC
59940: ST_TO_ADDR
59941: LD_VAR 0 10
59945: PUSH
59946: FOR_TO
59947: IFFALSE 60040
// begin if not ValidHex ( _x , _y ) then
59949: LD_VAR 0 11
59953: PPUSH
59954: LD_VAR 0 12
59958: PPUSH
59959: CALL_OW 488
59963: NOT
59964: IFFALSE 59968
// continue ;
59966: GO 59946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59968: LD_VAR 0 11
59972: PPUSH
59973: LD_VAR 0 12
59977: PPUSH
59978: CALL_OW 351
59982: PUSH
59983: LD_VAR 0 11
59987: PPUSH
59988: LD_VAR 0 12
59992: PPUSH
59993: CALL_OW 554
59997: AND
59998: IFFALSE 60038
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60000: LD_ADDR_VAR 0 13
60004: PUSH
60005: LD_VAR 0 13
60009: PPUSH
60010: LD_VAR 0 13
60014: PUSH
60015: LD_INT 1
60017: PLUS
60018: PPUSH
60019: LD_VAR 0 11
60023: PUSH
60024: LD_VAR 0 12
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PPUSH
60033: CALL_OW 2
60037: ST_TO_ADDR
// end ;
60038: GO 59946
60040: POP
60041: POP
60042: GO 59926
60044: POP
60045: POP
// if not list then
60046: LD_VAR 0 13
60050: NOT
60051: IFFALSE 60055
// exit ;
60053: GO 60126
// for i in list do
60055: LD_ADDR_VAR 0 6
60059: PUSH
60060: LD_VAR 0 13
60064: PUSH
60065: FOR_IN
60066: IFFALSE 60124
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60068: LD_VAR 0 1
60072: PPUSH
60073: LD_STRING M
60075: PUSH
60076: LD_VAR 0 6
60080: PUSH
60081: LD_INT 1
60083: ARRAY
60084: PUSH
60085: LD_VAR 0 6
60089: PUSH
60090: LD_INT 2
60092: ARRAY
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: PUSH
60115: EMPTY
60116: LIST
60117: PPUSH
60118: CALL_OW 447
60122: GO 60065
60124: POP
60125: POP
// end ;
60126: LD_VAR 0 5
60130: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60131: LD_EXP 85
60135: NOT
60136: IFFALSE 60186
60138: GO 60140
60140: DISABLE
// begin initHack := true ;
60141: LD_ADDR_EXP 85
60145: PUSH
60146: LD_INT 1
60148: ST_TO_ADDR
// hackTanks := [ ] ;
60149: LD_ADDR_EXP 86
60153: PUSH
60154: EMPTY
60155: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60156: LD_ADDR_EXP 87
60160: PUSH
60161: EMPTY
60162: ST_TO_ADDR
// hackLimit := 3 ;
60163: LD_ADDR_EXP 88
60167: PUSH
60168: LD_INT 3
60170: ST_TO_ADDR
// hackDist := 12 ;
60171: LD_ADDR_EXP 89
60175: PUSH
60176: LD_INT 12
60178: ST_TO_ADDR
// hackCounter := [ ] ;
60179: LD_ADDR_EXP 90
60183: PUSH
60184: EMPTY
60185: ST_TO_ADDR
// end ;
60186: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60187: LD_EXP 85
60191: PUSH
60192: LD_INT 34
60194: PUSH
60195: LD_EXP 97
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PPUSH
60204: CALL_OW 69
60208: AND
60209: IFFALSE 60464
60211: GO 60213
60213: DISABLE
60214: LD_INT 0
60216: PPUSH
60217: PPUSH
// begin enable ;
60218: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60219: LD_ADDR_VAR 0 1
60223: PUSH
60224: LD_INT 34
60226: PUSH
60227: LD_EXP 97
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PPUSH
60236: CALL_OW 69
60240: PUSH
60241: FOR_IN
60242: IFFALSE 60462
// begin if not i in hackTanks then
60244: LD_VAR 0 1
60248: PUSH
60249: LD_EXP 86
60253: IN
60254: NOT
60255: IFFALSE 60338
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60257: LD_ADDR_EXP 86
60261: PUSH
60262: LD_EXP 86
60266: PPUSH
60267: LD_EXP 86
60271: PUSH
60272: LD_INT 1
60274: PLUS
60275: PPUSH
60276: LD_VAR 0 1
60280: PPUSH
60281: CALL_OW 1
60285: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60286: LD_ADDR_EXP 87
60290: PUSH
60291: LD_EXP 87
60295: PPUSH
60296: LD_EXP 87
60300: PUSH
60301: LD_INT 1
60303: PLUS
60304: PPUSH
60305: EMPTY
60306: PPUSH
60307: CALL_OW 1
60311: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60312: LD_ADDR_EXP 90
60316: PUSH
60317: LD_EXP 90
60321: PPUSH
60322: LD_EXP 90
60326: PUSH
60327: LD_INT 1
60329: PLUS
60330: PPUSH
60331: EMPTY
60332: PPUSH
60333: CALL_OW 1
60337: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60338: LD_VAR 0 1
60342: PPUSH
60343: CALL_OW 302
60347: NOT
60348: IFFALSE 60361
// begin HackUnlinkAll ( i ) ;
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL 60467 0 1
// continue ;
60359: GO 60241
// end ; HackCheckCapturedStatus ( i ) ;
60361: LD_VAR 0 1
60365: PPUSH
60366: CALL 60910 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60370: LD_ADDR_VAR 0 2
60374: PUSH
60375: LD_INT 81
60377: PUSH
60378: LD_VAR 0 1
60382: PPUSH
60383: CALL_OW 255
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 33
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 91
60404: PUSH
60405: LD_VAR 0 1
60409: PUSH
60410: LD_EXP 89
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 50
60422: PUSH
60423: EMPTY
60424: LIST
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: PPUSH
60432: CALL_OW 69
60436: ST_TO_ADDR
// if not tmp then
60437: LD_VAR 0 2
60441: NOT
60442: IFFALSE 60446
// continue ;
60444: GO 60241
// HackLink ( i , tmp ) ;
60446: LD_VAR 0 1
60450: PPUSH
60451: LD_VAR 0 2
60455: PPUSH
60456: CALL 60603 0 2
// end ;
60460: GO 60241
60462: POP
60463: POP
// end ;
60464: PPOPN 2
60466: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
60467: LD_INT 0
60469: PPUSH
60470: PPUSH
60471: PPUSH
// if not hack in hackTanks then
60472: LD_VAR 0 1
60476: PUSH
60477: LD_EXP 86
60481: IN
60482: NOT
60483: IFFALSE 60487
// exit ;
60485: GO 60598
// index := GetElementIndex ( hackTanks , hack ) ;
60487: LD_ADDR_VAR 0 4
60491: PUSH
60492: LD_EXP 86
60496: PPUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: CALL 13620 0 2
60506: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
60507: LD_EXP 87
60511: PUSH
60512: LD_VAR 0 4
60516: ARRAY
60517: IFFALSE 60598
// begin for i in hackTanksCaptured [ index ] do
60519: LD_ADDR_VAR 0 3
60523: PUSH
60524: LD_EXP 87
60528: PUSH
60529: LD_VAR 0 4
60533: ARRAY
60534: PUSH
60535: FOR_IN
60536: IFFALSE 60562
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
60538: LD_VAR 0 3
60542: PUSH
60543: LD_INT 1
60545: ARRAY
60546: PPUSH
60547: LD_VAR 0 3
60551: PUSH
60552: LD_INT 2
60554: ARRAY
60555: PPUSH
60556: CALL_OW 235
60560: GO 60535
60562: POP
60563: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
60564: LD_ADDR_EXP 87
60568: PUSH
60569: LD_EXP 87
60573: PPUSH
60574: LD_VAR 0 4
60578: PPUSH
60579: EMPTY
60580: PPUSH
60581: CALL_OW 1
60585: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
60586: LD_VAR 0 1
60590: PPUSH
60591: LD_INT 0
60593: PPUSH
60594: CALL_OW 505
// end ; end ;
60598: LD_VAR 0 2
60602: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
60603: LD_INT 0
60605: PPUSH
60606: PPUSH
60607: PPUSH
// if not hack in hackTanks or not vehicles then
60608: LD_VAR 0 1
60612: PUSH
60613: LD_EXP 86
60617: IN
60618: NOT
60619: PUSH
60620: LD_VAR 0 2
60624: NOT
60625: OR
60626: IFFALSE 60630
// exit ;
60628: GO 60905
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
60630: LD_ADDR_VAR 0 2
60634: PUSH
60635: LD_VAR 0 1
60639: PPUSH
60640: LD_VAR 0 2
60644: PPUSH
60645: LD_INT 1
60647: PPUSH
60648: LD_INT 1
60650: PPUSH
60651: CALL 14270 0 4
60655: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
60656: LD_ADDR_VAR 0 5
60660: PUSH
60661: LD_EXP 86
60665: PPUSH
60666: LD_VAR 0 1
60670: PPUSH
60671: CALL 13620 0 2
60675: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60676: LD_EXP 87
60680: PUSH
60681: LD_VAR 0 5
60685: ARRAY
60686: PUSH
60687: LD_EXP 88
60691: LESS
60692: IFFALSE 60881
// begin for i := 1 to vehicles do
60694: LD_ADDR_VAR 0 4
60698: PUSH
60699: DOUBLE
60700: LD_INT 1
60702: DEC
60703: ST_TO_ADDR
60704: LD_VAR 0 2
60708: PUSH
60709: FOR_TO
60710: IFFALSE 60879
// begin if hackTanksCaptured [ index ] = hackLimit then
60712: LD_EXP 87
60716: PUSH
60717: LD_VAR 0 5
60721: ARRAY
60722: PUSH
60723: LD_EXP 88
60727: EQUAL
60728: IFFALSE 60732
// break ;
60730: GO 60879
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60732: LD_ADDR_EXP 90
60736: PUSH
60737: LD_EXP 90
60741: PPUSH
60742: LD_VAR 0 5
60746: PPUSH
60747: LD_EXP 90
60751: PUSH
60752: LD_VAR 0 5
60756: ARRAY
60757: PUSH
60758: LD_INT 1
60760: PLUS
60761: PPUSH
60762: CALL_OW 1
60766: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60767: LD_ADDR_EXP 87
60771: PUSH
60772: LD_EXP 87
60776: PPUSH
60777: LD_VAR 0 5
60781: PUSH
60782: LD_EXP 87
60786: PUSH
60787: LD_VAR 0 5
60791: ARRAY
60792: PUSH
60793: LD_INT 1
60795: PLUS
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PPUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_VAR 0 4
60810: ARRAY
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_VAR 0 4
60821: ARRAY
60822: PPUSH
60823: CALL_OW 255
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PPUSH
60832: CALL 13835 0 3
60836: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60837: LD_VAR 0 2
60841: PUSH
60842: LD_VAR 0 4
60846: ARRAY
60847: PPUSH
60848: LD_VAR 0 1
60852: PPUSH
60853: CALL_OW 255
60857: PPUSH
60858: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60862: LD_VAR 0 2
60866: PUSH
60867: LD_VAR 0 4
60871: ARRAY
60872: PPUSH
60873: CALL_OW 141
// end ;
60877: GO 60709
60879: POP
60880: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60881: LD_VAR 0 1
60885: PPUSH
60886: LD_EXP 87
60890: PUSH
60891: LD_VAR 0 5
60895: ARRAY
60896: PUSH
60897: LD_INT 0
60899: PLUS
60900: PPUSH
60901: CALL_OW 505
// end ;
60905: LD_VAR 0 3
60909: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60910: LD_INT 0
60912: PPUSH
60913: PPUSH
60914: PPUSH
60915: PPUSH
// if not hack in hackTanks then
60916: LD_VAR 0 1
60920: PUSH
60921: LD_EXP 86
60925: IN
60926: NOT
60927: IFFALSE 60931
// exit ;
60929: GO 61171
// index := GetElementIndex ( hackTanks , hack ) ;
60931: LD_ADDR_VAR 0 4
60935: PUSH
60936: LD_EXP 86
60940: PPUSH
60941: LD_VAR 0 1
60945: PPUSH
60946: CALL 13620 0 2
60950: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60951: LD_ADDR_VAR 0 3
60955: PUSH
60956: DOUBLE
60957: LD_EXP 87
60961: PUSH
60962: LD_VAR 0 4
60966: ARRAY
60967: INC
60968: ST_TO_ADDR
60969: LD_INT 1
60971: PUSH
60972: FOR_DOWNTO
60973: IFFALSE 61145
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60975: LD_ADDR_VAR 0 5
60979: PUSH
60980: LD_EXP 87
60984: PUSH
60985: LD_VAR 0 4
60989: ARRAY
60990: PUSH
60991: LD_VAR 0 3
60995: ARRAY
60996: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60997: LD_VAR 0 5
61001: PUSH
61002: LD_INT 1
61004: ARRAY
61005: PPUSH
61006: CALL_OW 302
61010: NOT
61011: PUSH
61012: LD_VAR 0 5
61016: PUSH
61017: LD_INT 1
61019: ARRAY
61020: PPUSH
61021: CALL_OW 255
61025: PUSH
61026: LD_VAR 0 1
61030: PPUSH
61031: CALL_OW 255
61035: NONEQUAL
61036: OR
61037: IFFALSE 61143
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61039: LD_VAR 0 5
61043: PUSH
61044: LD_INT 1
61046: ARRAY
61047: PPUSH
61048: CALL_OW 305
61052: PUSH
61053: LD_VAR 0 5
61057: PUSH
61058: LD_INT 1
61060: ARRAY
61061: PPUSH
61062: CALL_OW 255
61066: PUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 255
61076: EQUAL
61077: AND
61078: IFFALSE 61102
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61080: LD_VAR 0 5
61084: PUSH
61085: LD_INT 1
61087: ARRAY
61088: PPUSH
61089: LD_VAR 0 5
61093: PUSH
61094: LD_INT 2
61096: ARRAY
61097: PPUSH
61098: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61102: LD_ADDR_EXP 87
61106: PUSH
61107: LD_EXP 87
61111: PPUSH
61112: LD_VAR 0 4
61116: PPUSH
61117: LD_EXP 87
61121: PUSH
61122: LD_VAR 0 4
61126: ARRAY
61127: PPUSH
61128: LD_VAR 0 3
61132: PPUSH
61133: CALL_OW 3
61137: PPUSH
61138: CALL_OW 1
61142: ST_TO_ADDR
// end ; end ;
61143: GO 60972
61145: POP
61146: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61147: LD_VAR 0 1
61151: PPUSH
61152: LD_EXP 87
61156: PUSH
61157: LD_VAR 0 4
61161: ARRAY
61162: PUSH
61163: LD_INT 0
61165: PLUS
61166: PPUSH
61167: CALL_OW 505
// end ;
61171: LD_VAR 0 2
61175: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61176: LD_INT 0
61178: PPUSH
61179: PPUSH
61180: PPUSH
61181: PPUSH
// if not hack in hackTanks then
61182: LD_VAR 0 1
61186: PUSH
61187: LD_EXP 86
61191: IN
61192: NOT
61193: IFFALSE 61197
// exit ;
61195: GO 61282
// index := GetElementIndex ( hackTanks , hack ) ;
61197: LD_ADDR_VAR 0 5
61201: PUSH
61202: LD_EXP 86
61206: PPUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL 13620 0 2
61216: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61217: LD_ADDR_VAR 0 4
61221: PUSH
61222: DOUBLE
61223: LD_INT 1
61225: DEC
61226: ST_TO_ADDR
61227: LD_EXP 87
61231: PUSH
61232: LD_VAR 0 5
61236: ARRAY
61237: PUSH
61238: FOR_TO
61239: IFFALSE 61280
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61241: LD_EXP 87
61245: PUSH
61246: LD_VAR 0 5
61250: ARRAY
61251: PUSH
61252: LD_VAR 0 4
61256: ARRAY
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PUSH
61262: LD_VAR 0 2
61266: EQUAL
61267: IFFALSE 61278
// KillUnit ( vehicle ) ;
61269: LD_VAR 0 2
61273: PPUSH
61274: CALL_OW 66
61278: GO 61238
61280: POP
61281: POP
// end ;
61282: LD_VAR 0 3
61286: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61287: LD_EXP 91
61291: NOT
61292: IFFALSE 61327
61294: GO 61296
61296: DISABLE
// begin initMiner := true ;
61297: LD_ADDR_EXP 91
61301: PUSH
61302: LD_INT 1
61304: ST_TO_ADDR
// minersList := [ ] ;
61305: LD_ADDR_EXP 92
61309: PUSH
61310: EMPTY
61311: ST_TO_ADDR
// minerMinesList := [ ] ;
61312: LD_ADDR_EXP 93
61316: PUSH
61317: EMPTY
61318: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61319: LD_ADDR_EXP 94
61323: PUSH
61324: LD_INT 5
61326: ST_TO_ADDR
// end ;
61327: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61328: LD_EXP 91
61332: PUSH
61333: LD_INT 34
61335: PUSH
61336: LD_EXP 102
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PPUSH
61345: CALL_OW 69
61349: AND
61350: IFFALSE 61813
61352: GO 61354
61354: DISABLE
61355: LD_INT 0
61357: PPUSH
61358: PPUSH
61359: PPUSH
61360: PPUSH
// begin enable ;
61361: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61362: LD_ADDR_VAR 0 1
61366: PUSH
61367: LD_INT 34
61369: PUSH
61370: LD_EXP 102
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PPUSH
61379: CALL_OW 69
61383: PUSH
61384: FOR_IN
61385: IFFALSE 61457
// begin if not i in minersList then
61387: LD_VAR 0 1
61391: PUSH
61392: LD_EXP 92
61396: IN
61397: NOT
61398: IFFALSE 61455
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61400: LD_ADDR_EXP 92
61404: PUSH
61405: LD_EXP 92
61409: PPUSH
61410: LD_EXP 92
61414: PUSH
61415: LD_INT 1
61417: PLUS
61418: PPUSH
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 1
61428: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
61429: LD_ADDR_EXP 93
61433: PUSH
61434: LD_EXP 93
61438: PPUSH
61439: LD_EXP 93
61443: PUSH
61444: LD_INT 1
61446: PLUS
61447: PPUSH
61448: EMPTY
61449: PPUSH
61450: CALL_OW 1
61454: ST_TO_ADDR
// end end ;
61455: GO 61384
61457: POP
61458: POP
// for i := minerMinesList downto 1 do
61459: LD_ADDR_VAR 0 1
61463: PUSH
61464: DOUBLE
61465: LD_EXP 93
61469: INC
61470: ST_TO_ADDR
61471: LD_INT 1
61473: PUSH
61474: FOR_DOWNTO
61475: IFFALSE 61811
// begin if IsLive ( minersList [ i ] ) then
61477: LD_EXP 92
61481: PUSH
61482: LD_VAR 0 1
61486: ARRAY
61487: PPUSH
61488: CALL_OW 300
61492: IFFALSE 61520
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
61494: LD_EXP 92
61498: PUSH
61499: LD_VAR 0 1
61503: ARRAY
61504: PPUSH
61505: LD_EXP 93
61509: PUSH
61510: LD_VAR 0 1
61514: ARRAY
61515: PPUSH
61516: CALL_OW 505
// if not minerMinesList [ i ] then
61520: LD_EXP 93
61524: PUSH
61525: LD_VAR 0 1
61529: ARRAY
61530: NOT
61531: IFFALSE 61535
// continue ;
61533: GO 61474
// for j := minerMinesList [ i ] downto 1 do
61535: LD_ADDR_VAR 0 2
61539: PUSH
61540: DOUBLE
61541: LD_EXP 93
61545: PUSH
61546: LD_VAR 0 1
61550: ARRAY
61551: INC
61552: ST_TO_ADDR
61553: LD_INT 1
61555: PUSH
61556: FOR_DOWNTO
61557: IFFALSE 61807
// begin side := GetSide ( minersList [ i ] ) ;
61559: LD_ADDR_VAR 0 3
61563: PUSH
61564: LD_EXP 92
61568: PUSH
61569: LD_VAR 0 1
61573: ARRAY
61574: PPUSH
61575: CALL_OW 255
61579: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61580: LD_ADDR_VAR 0 4
61584: PUSH
61585: LD_EXP 93
61589: PUSH
61590: LD_VAR 0 1
61594: ARRAY
61595: PUSH
61596: LD_VAR 0 2
61600: ARRAY
61601: PUSH
61602: LD_INT 1
61604: ARRAY
61605: PPUSH
61606: LD_EXP 93
61610: PUSH
61611: LD_VAR 0 1
61615: ARRAY
61616: PUSH
61617: LD_VAR 0 2
61621: ARRAY
61622: PUSH
61623: LD_INT 2
61625: ARRAY
61626: PPUSH
61627: CALL_OW 428
61631: ST_TO_ADDR
// if not tmp then
61632: LD_VAR 0 4
61636: NOT
61637: IFFALSE 61641
// continue ;
61639: GO 61556
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61641: LD_VAR 0 4
61645: PUSH
61646: LD_INT 81
61648: PUSH
61649: LD_VAR 0 3
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PPUSH
61658: CALL_OW 69
61662: IN
61663: PUSH
61664: LD_EXP 93
61668: PUSH
61669: LD_VAR 0 1
61673: ARRAY
61674: PUSH
61675: LD_VAR 0 2
61679: ARRAY
61680: PUSH
61681: LD_INT 1
61683: ARRAY
61684: PPUSH
61685: LD_EXP 93
61689: PUSH
61690: LD_VAR 0 1
61694: ARRAY
61695: PUSH
61696: LD_VAR 0 2
61700: ARRAY
61701: PUSH
61702: LD_INT 2
61704: ARRAY
61705: PPUSH
61706: CALL_OW 458
61710: AND
61711: IFFALSE 61805
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61713: LD_EXP 93
61717: PUSH
61718: LD_VAR 0 1
61722: ARRAY
61723: PUSH
61724: LD_VAR 0 2
61728: ARRAY
61729: PUSH
61730: LD_INT 1
61732: ARRAY
61733: PPUSH
61734: LD_EXP 93
61738: PUSH
61739: LD_VAR 0 1
61743: ARRAY
61744: PUSH
61745: LD_VAR 0 2
61749: ARRAY
61750: PUSH
61751: LD_INT 2
61753: ARRAY
61754: PPUSH
61755: LD_VAR 0 3
61759: PPUSH
61760: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61764: LD_ADDR_EXP 93
61768: PUSH
61769: LD_EXP 93
61773: PPUSH
61774: LD_VAR 0 1
61778: PPUSH
61779: LD_EXP 93
61783: PUSH
61784: LD_VAR 0 1
61788: ARRAY
61789: PPUSH
61790: LD_VAR 0 2
61794: PPUSH
61795: CALL_OW 3
61799: PPUSH
61800: CALL_OW 1
61804: ST_TO_ADDR
// end ; end ;
61805: GO 61556
61807: POP
61808: POP
// end ;
61809: GO 61474
61811: POP
61812: POP
// end ;
61813: PPOPN 4
61815: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61816: LD_INT 0
61818: PPUSH
61819: PPUSH
// result := false ;
61820: LD_ADDR_VAR 0 4
61824: PUSH
61825: LD_INT 0
61827: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL_OW 264
61837: PUSH
61838: LD_EXP 102
61842: EQUAL
61843: NOT
61844: IFFALSE 61848
// exit ;
61846: GO 62088
// index := GetElementIndex ( minersList , unit ) ;
61848: LD_ADDR_VAR 0 5
61852: PUSH
61853: LD_EXP 92
61857: PPUSH
61858: LD_VAR 0 1
61862: PPUSH
61863: CALL 13620 0 2
61867: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61868: LD_EXP 93
61872: PUSH
61873: LD_VAR 0 5
61877: ARRAY
61878: PUSH
61879: LD_EXP 94
61883: GREATEREQUAL
61884: IFFALSE 61888
// exit ;
61886: GO 62088
// ComMoveXY ( unit , x , y ) ;
61888: LD_VAR 0 1
61892: PPUSH
61893: LD_VAR 0 2
61897: PPUSH
61898: LD_VAR 0 3
61902: PPUSH
61903: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61907: LD_INT 35
61909: PPUSH
61910: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61914: LD_VAR 0 1
61918: PPUSH
61919: LD_VAR 0 2
61923: PPUSH
61924: LD_VAR 0 3
61928: PPUSH
61929: CALL 43684 0 3
61933: NOT
61934: PUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: CALL_OW 314
61944: AND
61945: IFFALSE 61949
// exit ;
61947: GO 62088
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61949: LD_VAR 0 2
61953: PPUSH
61954: LD_VAR 0 3
61958: PPUSH
61959: CALL_OW 428
61963: PUSH
61964: LD_VAR 0 1
61968: EQUAL
61969: PUSH
61970: LD_VAR 0 1
61974: PPUSH
61975: CALL_OW 314
61979: NOT
61980: AND
61981: IFFALSE 61907
// PlaySoundXY ( x , y , PlantMine ) ;
61983: LD_VAR 0 2
61987: PPUSH
61988: LD_VAR 0 3
61992: PPUSH
61993: LD_STRING PlantMine
61995: PPUSH
61996: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62000: LD_VAR 0 2
62004: PPUSH
62005: LD_VAR 0 3
62009: PPUSH
62010: LD_VAR 0 1
62014: PPUSH
62015: CALL_OW 255
62019: PPUSH
62020: LD_INT 0
62022: PPUSH
62023: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62027: LD_ADDR_EXP 93
62031: PUSH
62032: LD_EXP 93
62036: PPUSH
62037: LD_VAR 0 5
62041: PUSH
62042: LD_EXP 93
62046: PUSH
62047: LD_VAR 0 5
62051: ARRAY
62052: PUSH
62053: LD_INT 1
62055: PLUS
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PPUSH
62061: LD_VAR 0 2
62065: PUSH
62066: LD_VAR 0 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PPUSH
62075: CALL 13835 0 3
62079: ST_TO_ADDR
// result := true ;
62080: LD_ADDR_VAR 0 4
62084: PUSH
62085: LD_INT 1
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 4
62092: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
// if not unit in minersList then
62098: LD_VAR 0 1
62102: PUSH
62103: LD_EXP 92
62107: IN
62108: NOT
62109: IFFALSE 62113
// exit ;
62111: GO 62505
// index := GetElementIndex ( minersList , unit ) ;
62113: LD_ADDR_VAR 0 6
62117: PUSH
62118: LD_EXP 92
62122: PPUSH
62123: LD_VAR 0 1
62127: PPUSH
62128: CALL 13620 0 2
62132: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62133: LD_ADDR_VAR 0 5
62137: PUSH
62138: DOUBLE
62139: LD_EXP 93
62143: PUSH
62144: LD_VAR 0 6
62148: ARRAY
62149: INC
62150: ST_TO_ADDR
62151: LD_INT 1
62153: PUSH
62154: FOR_DOWNTO
62155: IFFALSE 62316
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62157: LD_EXP 93
62161: PUSH
62162: LD_VAR 0 6
62166: ARRAY
62167: PUSH
62168: LD_VAR 0 5
62172: ARRAY
62173: PUSH
62174: LD_INT 1
62176: ARRAY
62177: PUSH
62178: LD_VAR 0 2
62182: EQUAL
62183: PUSH
62184: LD_EXP 93
62188: PUSH
62189: LD_VAR 0 6
62193: ARRAY
62194: PUSH
62195: LD_VAR 0 5
62199: ARRAY
62200: PUSH
62201: LD_INT 2
62203: ARRAY
62204: PUSH
62205: LD_VAR 0 3
62209: EQUAL
62210: AND
62211: IFFALSE 62314
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62213: LD_EXP 93
62217: PUSH
62218: LD_VAR 0 6
62222: ARRAY
62223: PUSH
62224: LD_VAR 0 5
62228: ARRAY
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: PPUSH
62234: LD_EXP 93
62238: PUSH
62239: LD_VAR 0 6
62243: ARRAY
62244: PUSH
62245: LD_VAR 0 5
62249: ARRAY
62250: PUSH
62251: LD_INT 2
62253: ARRAY
62254: PPUSH
62255: LD_VAR 0 1
62259: PPUSH
62260: CALL_OW 255
62264: PPUSH
62265: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62269: LD_ADDR_EXP 93
62273: PUSH
62274: LD_EXP 93
62278: PPUSH
62279: LD_VAR 0 6
62283: PPUSH
62284: LD_EXP 93
62288: PUSH
62289: LD_VAR 0 6
62293: ARRAY
62294: PPUSH
62295: LD_VAR 0 5
62299: PPUSH
62300: CALL_OW 3
62304: PPUSH
62305: CALL_OW 1
62309: ST_TO_ADDR
// exit ;
62310: POP
62311: POP
62312: GO 62505
// end ; end ;
62314: GO 62154
62316: POP
62317: POP
// for i := minerMinesList [ index ] downto 1 do
62318: LD_ADDR_VAR 0 5
62322: PUSH
62323: DOUBLE
62324: LD_EXP 93
62328: PUSH
62329: LD_VAR 0 6
62333: ARRAY
62334: INC
62335: ST_TO_ADDR
62336: LD_INT 1
62338: PUSH
62339: FOR_DOWNTO
62340: IFFALSE 62503
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62342: LD_EXP 93
62346: PUSH
62347: LD_VAR 0 6
62351: ARRAY
62352: PUSH
62353: LD_VAR 0 5
62357: ARRAY
62358: PUSH
62359: LD_INT 1
62361: ARRAY
62362: PPUSH
62363: LD_EXP 93
62367: PUSH
62368: LD_VAR 0 6
62372: ARRAY
62373: PUSH
62374: LD_VAR 0 5
62378: ARRAY
62379: PUSH
62380: LD_INT 2
62382: ARRAY
62383: PPUSH
62384: LD_VAR 0 2
62388: PPUSH
62389: LD_VAR 0 3
62393: PPUSH
62394: CALL_OW 298
62398: PUSH
62399: LD_INT 6
62401: LESS
62402: IFFALSE 62501
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62404: LD_EXP 93
62408: PUSH
62409: LD_VAR 0 6
62413: ARRAY
62414: PUSH
62415: LD_VAR 0 5
62419: ARRAY
62420: PUSH
62421: LD_INT 1
62423: ARRAY
62424: PPUSH
62425: LD_EXP 93
62429: PUSH
62430: LD_VAR 0 6
62434: ARRAY
62435: PUSH
62436: LD_VAR 0 5
62440: ARRAY
62441: PUSH
62442: LD_INT 2
62444: ARRAY
62445: PPUSH
62446: LD_VAR 0 1
62450: PPUSH
62451: CALL_OW 255
62455: PPUSH
62456: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62460: LD_ADDR_EXP 93
62464: PUSH
62465: LD_EXP 93
62469: PPUSH
62470: LD_VAR 0 6
62474: PPUSH
62475: LD_EXP 93
62479: PUSH
62480: LD_VAR 0 6
62484: ARRAY
62485: PPUSH
62486: LD_VAR 0 5
62490: PPUSH
62491: CALL_OW 3
62495: PPUSH
62496: CALL_OW 1
62500: ST_TO_ADDR
// end ; end ;
62501: GO 62339
62503: POP
62504: POP
// end ;
62505: LD_VAR 0 4
62509: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
62510: LD_INT 0
62512: PPUSH
62513: PPUSH
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
62519: PPUSH
62520: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
62521: LD_VAR 0 1
62525: PPUSH
62526: CALL_OW 264
62530: PUSH
62531: LD_EXP 102
62535: EQUAL
62536: NOT
62537: PUSH
62538: LD_VAR 0 1
62542: PUSH
62543: LD_EXP 92
62547: IN
62548: NOT
62549: OR
62550: IFFALSE 62554
// exit ;
62552: GO 62876
// index := GetElementIndex ( minersList , unit ) ;
62554: LD_ADDR_VAR 0 6
62558: PUSH
62559: LD_EXP 92
62563: PPUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL 13620 0 2
62573: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62574: LD_ADDR_VAR 0 8
62578: PUSH
62579: LD_EXP 94
62583: PUSH
62584: LD_EXP 93
62588: PUSH
62589: LD_VAR 0 6
62593: ARRAY
62594: MINUS
62595: ST_TO_ADDR
// if not minesFreeAmount then
62596: LD_VAR 0 8
62600: NOT
62601: IFFALSE 62605
// exit ;
62603: GO 62876
// tmp := [ ] ;
62605: LD_ADDR_VAR 0 7
62609: PUSH
62610: EMPTY
62611: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62612: LD_ADDR_VAR 0 5
62616: PUSH
62617: DOUBLE
62618: LD_INT 1
62620: DEC
62621: ST_TO_ADDR
62622: LD_VAR 0 8
62626: PUSH
62627: FOR_TO
62628: IFFALSE 62823
// begin _d := rand ( 0 , 5 ) ;
62630: LD_ADDR_VAR 0 11
62634: PUSH
62635: LD_INT 0
62637: PPUSH
62638: LD_INT 5
62640: PPUSH
62641: CALL_OW 12
62645: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62646: LD_ADDR_VAR 0 12
62650: PUSH
62651: LD_INT 2
62653: PPUSH
62654: LD_INT 6
62656: PPUSH
62657: CALL_OW 12
62661: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62662: LD_ADDR_VAR 0 9
62666: PUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: LD_VAR 0 11
62676: PPUSH
62677: LD_VAR 0 12
62681: PPUSH
62682: CALL_OW 272
62686: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62687: LD_ADDR_VAR 0 10
62691: PUSH
62692: LD_VAR 0 3
62696: PPUSH
62697: LD_VAR 0 11
62701: PPUSH
62702: LD_VAR 0 12
62706: PPUSH
62707: CALL_OW 273
62711: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62712: LD_VAR 0 9
62716: PPUSH
62717: LD_VAR 0 10
62721: PPUSH
62722: CALL_OW 488
62726: PUSH
62727: LD_VAR 0 9
62731: PUSH
62732: LD_VAR 0 10
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_VAR 0 7
62745: IN
62746: NOT
62747: AND
62748: PUSH
62749: LD_VAR 0 9
62753: PPUSH
62754: LD_VAR 0 10
62758: PPUSH
62759: CALL_OW 458
62763: NOT
62764: AND
62765: IFFALSE 62807
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62767: LD_ADDR_VAR 0 7
62771: PUSH
62772: LD_VAR 0 7
62776: PPUSH
62777: LD_VAR 0 7
62781: PUSH
62782: LD_INT 1
62784: PLUS
62785: PPUSH
62786: LD_VAR 0 9
62790: PUSH
62791: LD_VAR 0 10
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PPUSH
62800: CALL_OW 1
62804: ST_TO_ADDR
62805: GO 62821
// i := i - 1 ;
62807: LD_ADDR_VAR 0 5
62811: PUSH
62812: LD_VAR 0 5
62816: PUSH
62817: LD_INT 1
62819: MINUS
62820: ST_TO_ADDR
// end ;
62821: GO 62627
62823: POP
62824: POP
// for i in tmp do
62825: LD_ADDR_VAR 0 5
62829: PUSH
62830: LD_VAR 0 7
62834: PUSH
62835: FOR_IN
62836: IFFALSE 62874
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62838: LD_VAR 0 1
62842: PPUSH
62843: LD_VAR 0 5
62847: PUSH
62848: LD_INT 1
62850: ARRAY
62851: PPUSH
62852: LD_VAR 0 5
62856: PUSH
62857: LD_INT 2
62859: ARRAY
62860: PPUSH
62861: CALL 61816 0 3
62865: NOT
62866: IFFALSE 62872
// exit ;
62868: POP
62869: POP
62870: GO 62876
62872: GO 62835
62874: POP
62875: POP
// end ;
62876: LD_VAR 0 4
62880: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62881: LD_INT 0
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
62887: PPUSH
62888: PPUSH
62889: PPUSH
// if not GetClass ( unit ) = class_sniper then
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL_OW 257
62899: PUSH
62900: LD_INT 5
62902: EQUAL
62903: NOT
62904: IFFALSE 62908
// exit ;
62906: GO 63296
// dist := 8 ;
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_INT 8
62915: ST_TO_ADDR
// viewRange := 12 ;
62916: LD_ADDR_VAR 0 7
62920: PUSH
62921: LD_INT 12
62923: ST_TO_ADDR
// side := GetSide ( unit ) ;
62924: LD_ADDR_VAR 0 6
62928: PUSH
62929: LD_VAR 0 1
62933: PPUSH
62934: CALL_OW 255
62938: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62939: LD_INT 61
62941: PPUSH
62942: LD_VAR 0 6
62946: PPUSH
62947: CALL_OW 321
62951: PUSH
62952: LD_INT 2
62954: EQUAL
62955: IFFALSE 62965
// viewRange := 16 ;
62957: LD_ADDR_VAR 0 7
62961: PUSH
62962: LD_INT 16
62964: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_VAR 0 2
62974: PPUSH
62975: LD_VAR 0 3
62979: PPUSH
62980: CALL_OW 297
62984: PUSH
62985: LD_VAR 0 5
62989: GREATER
62990: IFFALSE 63069
// begin ComMoveXY ( unit , x , y ) ;
62992: LD_VAR 0 1
62996: PPUSH
62997: LD_VAR 0 2
63001: PPUSH
63002: LD_VAR 0 3
63006: PPUSH
63007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63011: LD_INT 35
63013: PPUSH
63014: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63018: LD_VAR 0 1
63022: PPUSH
63023: LD_VAR 0 2
63027: PPUSH
63028: LD_VAR 0 3
63032: PPUSH
63033: CALL 43684 0 3
63037: NOT
63038: IFFALSE 63042
// exit ;
63040: GO 63296
// until GetDistUnitXY ( unit , x , y ) < dist ;
63042: LD_VAR 0 1
63046: PPUSH
63047: LD_VAR 0 2
63051: PPUSH
63052: LD_VAR 0 3
63056: PPUSH
63057: CALL_OW 297
63061: PUSH
63062: LD_VAR 0 5
63066: LESS
63067: IFFALSE 63011
// end ; ComTurnXY ( unit , x , y ) ;
63069: LD_VAR 0 1
63073: PPUSH
63074: LD_VAR 0 2
63078: PPUSH
63079: LD_VAR 0 3
63083: PPUSH
63084: CALL_OW 118
// wait ( 5 ) ;
63088: LD_INT 5
63090: PPUSH
63091: CALL_OW 67
// _d := GetDir ( unit ) ;
63095: LD_ADDR_VAR 0 10
63099: PUSH
63100: LD_VAR 0 1
63104: PPUSH
63105: CALL_OW 254
63109: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63110: LD_ADDR_VAR 0 8
63114: PUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 250
63124: PPUSH
63125: LD_VAR 0 10
63129: PPUSH
63130: LD_VAR 0 5
63134: PPUSH
63135: CALL_OW 272
63139: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63140: LD_ADDR_VAR 0 9
63144: PUSH
63145: LD_VAR 0 1
63149: PPUSH
63150: CALL_OW 251
63154: PPUSH
63155: LD_VAR 0 10
63159: PPUSH
63160: LD_VAR 0 5
63164: PPUSH
63165: CALL_OW 273
63169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63170: LD_VAR 0 8
63174: PPUSH
63175: LD_VAR 0 9
63179: PPUSH
63180: CALL_OW 488
63184: NOT
63185: IFFALSE 63189
// exit ;
63187: GO 63296
// ComAnimCustom ( unit , 1 ) ;
63189: LD_VAR 0 1
63193: PPUSH
63194: LD_INT 1
63196: PPUSH
63197: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63201: LD_VAR 0 8
63205: PPUSH
63206: LD_VAR 0 9
63210: PPUSH
63211: LD_VAR 0 6
63215: PPUSH
63216: LD_VAR 0 7
63220: PPUSH
63221: CALL_OW 330
// repeat wait ( 1 ) ;
63225: LD_INT 1
63227: PPUSH
63228: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63232: LD_VAR 0 1
63236: PPUSH
63237: CALL_OW 316
63241: PUSH
63242: LD_VAR 0 1
63246: PPUSH
63247: CALL_OW 314
63251: OR
63252: PUSH
63253: LD_VAR 0 1
63257: PPUSH
63258: CALL_OW 302
63262: NOT
63263: OR
63264: PUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 301
63274: OR
63275: IFFALSE 63225
// RemoveSeeing ( _x , _y , side ) ;
63277: LD_VAR 0 8
63281: PPUSH
63282: LD_VAR 0 9
63286: PPUSH
63287: LD_VAR 0 6
63291: PPUSH
63292: CALL_OW 331
// end ; end_of_file
63296: LD_VAR 0 4
63300: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
63301: LD_INT 0
63303: PPUSH
// ar_miner := 81 ;
63304: LD_ADDR_EXP 102
63308: PUSH
63309: LD_INT 81
63311: ST_TO_ADDR
// ar_crane := 88 ;
63312: LD_ADDR_EXP 101
63316: PUSH
63317: LD_INT 88
63319: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
63320: LD_ADDR_EXP 96
63324: PUSH
63325: LD_INT 89
63327: ST_TO_ADDR
// us_hack := 99 ;
63328: LD_ADDR_EXP 97
63332: PUSH
63333: LD_INT 99
63335: ST_TO_ADDR
// us_artillery := 97 ;
63336: LD_ADDR_EXP 98
63340: PUSH
63341: LD_INT 97
63343: ST_TO_ADDR
// ar_bio_bomb := 91 ;
63344: LD_ADDR_EXP 99
63348: PUSH
63349: LD_INT 91
63351: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
63352: LD_ADDR_EXP 100
63356: PUSH
63357: LD_INT 92
63359: ST_TO_ADDR
// ru_radar := 98 ;
63360: LD_ADDR_EXP 95
63364: PUSH
63365: LD_INT 98
63367: ST_TO_ADDR
// tech_Artillery := 80 ;
63368: LD_ADDR_EXP 103
63372: PUSH
63373: LD_INT 80
63375: ST_TO_ADDR
// tech_RadMat := 81 ;
63376: LD_ADDR_EXP 104
63380: PUSH
63381: LD_INT 81
63383: ST_TO_ADDR
// tech_BasicTools := 82 ;
63384: LD_ADDR_EXP 105
63388: PUSH
63389: LD_INT 82
63391: ST_TO_ADDR
// tech_Cargo := 83 ;
63392: LD_ADDR_EXP 106
63396: PUSH
63397: LD_INT 83
63399: ST_TO_ADDR
// tech_Track := 84 ;
63400: LD_ADDR_EXP 107
63404: PUSH
63405: LD_INT 84
63407: ST_TO_ADDR
// tech_Crane := 85 ;
63408: LD_ADDR_EXP 108
63412: PUSH
63413: LD_INT 85
63415: ST_TO_ADDR
// tech_Bulldozer := 86 ;
63416: LD_ADDR_EXP 109
63420: PUSH
63421: LD_INT 86
63423: ST_TO_ADDR
// tech_Hovercraft := 87 ;
63424: LD_ADDR_EXP 110
63428: PUSH
63429: LD_INT 87
63431: ST_TO_ADDR
// end ;
63432: LD_VAR 0 1
63436: RET
// every 1 do
63437: GO 63439
63439: DISABLE
// InitGlobalVariables ;
63440: CALL 63301 0 0
63444: END
