// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5688 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7031 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8989 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9105 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9641 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15265 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 57832 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 958 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 381: LD_ADDR_VAR 0 8
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: LD_INT 5
 391: PUSH
 392: LD_INT 7
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// uc_side := side ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_VAR 0 1
 415: ST_TO_ADDR
// uc_nation := 2 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 2
 423: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: LD_STRING 
 437: PPUSH
 438: LD_VAR 0 8
 442: PPUSH
 443: LD_INT 800
 445: PUSH
 446: LD_INT 120
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PPUSH
 457: LD_INT 10
 459: PUSH
 460: LD_INT 11
 462: PUSH
 463: LD_INT 12
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: PUSH
 477: LD_INT 4
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL 23863 0 6
 496: ST_TO_ADDR
// arForceTmp := [ ] ;
 497: LD_ADDR_EXP 15
 501: PUSH
 502: EMPTY
 503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 504: LD_ADDR_VAR 0 3
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 31
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: LD_INT 95
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 58
 550: PUSH
 551: EMPTY
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: PPUSH
 560: CALL_OW 69
 564: PUSH
 565: FOR_IN
 566: IFFALSE 695
// begin d := GetDir ( i ) ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_VAR 0 3
 577: PPUSH
 578: CALL_OW 254
 582: ST_TO_ADDR
// if d < 3 then
 583: LD_VAR 0 4
 587: PUSH
 588: LD_INT 3
 590: LESS
 591: IFFALSE 609
// d := d + 3 else
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_VAR 0 4
 602: PUSH
 603: LD_INT 3
 605: PLUS
 606: ST_TO_ADDR
 607: GO 623
// d := d - 3 ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 4
 618: PUSH
 619: LD_INT 3
 621: MINUS
 622: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 623: LD_INT 0
 625: PPUSH
 626: LD_VAR 0 8
 630: PPUSH
 631: CALL_OW 381
// un := CreateHuman ;
 635: LD_ADDR_VAR 0 6
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 645: LD_ADDR_EXP 15
 649: PUSH
 650: LD_EXP 15
 654: PPUSH
 655: LD_VAR 0 6
 659: PPUSH
 660: CALL 52893 0 2
 664: ST_TO_ADDR
// SetDir ( un , d ) ;
 665: LD_VAR 0 6
 669: PPUSH
 670: LD_VAR 0 4
 674: PPUSH
 675: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 679: LD_VAR 0 6
 683: PPUSH
 684: LD_VAR 0 3
 688: PPUSH
 689: CALL_OW 52
// end ;
 693: GO 565
 695: POP
 696: POP
// for i := 1 to 2 do
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: DOUBLE
 703: LD_INT 1
 705: DEC
 706: ST_TO_ADDR
 707: LD_INT 2
 709: PUSH
 710: FOR_TO
 711: IFFALSE 795
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 713: LD_INT 14
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: LD_INT 100
 727: PPUSH
 728: CALL 20042 0 5
// un := CreateVehicle ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: CALL_OW 45
 741: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 742: LD_VAR 0 6
 746: PPUSH
 747: LD_INT 102
 749: PPUSH
 750: LD_INT 31
 752: PPUSH
 753: LD_INT 6
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 763: LD_INT 0
 765: PPUSH
 766: LD_VAR 0 8
 770: PUSH
 771: LD_INT 2
 773: PLUS
 774: PPUSH
 775: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 6
 788: PPUSH
 789: CALL_OW 52
// end ;
 793: GO 710
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_VAR 0 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 21
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PUSH
 833: FOR_IN
 834: IFFALSE 867
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: PPUSH
 861: CALL_OW 241
 865: GO 833
 867: POP
 868: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 30
 888: PUSH
 889: LD_INT 32
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 69
 904: PUSH
 905: FOR_IN
 906: IFFALSE 951
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 908: LD_VAR 0 3
 912: PPUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 25
 918: PUSH
 919: LD_INT 28
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 4
 938: MOD
 939: PUSH
 940: LD_INT 1
 942: PLUS
 943: ARRAY
 944: PPUSH
 945: CALL_OW 431
 949: GO 905
 951: POP
 952: POP
// end ;
 953: LD_VAR 0 2
 957: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 517
 981: ST_TO_ADDR
// if not tmp then
 982: LD_VAR 0 5
 986: NOT
 987: IFFALSE 991
// exit ;
 989: GO 1233
// for i := 1 to n do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1231
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1009: LD_ADDR_VAR 0 6
1013: PUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_VAR 0 5
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 12
1030: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1031: LD_VAR 0 5
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PUSH
1040: LD_VAR 0 6
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PUSH
1055: LD_VAR 0 6
1059: ARRAY
1060: PPUSH
1061: LD_EXP 3
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1077: LD_ADDR_EXP 13
1081: PUSH
1082: LD_EXP 13
1086: PPUSH
1087: LD_EXP 13
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: LD_VAR 0 5
1100: PUSH
1101: LD_INT 1
1103: ARRAY
1104: PUSH
1105: LD_VAR 0 6
1109: ARRAY
1110: PPUSH
1111: CALL_OW 2
1115: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1116: LD_ADDR_EXP 13
1120: PUSH
1121: LD_EXP 13
1125: PPUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 1
1133: PLUS
1134: PPUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_INT 2
1142: ARRAY
1143: PUSH
1144: LD_VAR 0 6
1148: ARRAY
1149: PPUSH
1150: CALL_OW 2
1154: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1155: LD_ADDR_VAR 0 5
1159: PUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_VAR 0 5
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 6
1181: PPUSH
1182: CALL_OW 3
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 5
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_VAR 0 5
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: CALL_OW 3
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
// end ;
1229: GO 1006
1231: POP
1232: POP
// end ;
1233: LD_VAR 0 3
1237: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1238: LD_INT 0
1240: PPUSH
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
1246: PPUSH
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
// enable ;
1271: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1272: LD_ADDR_VAR 0 11
1276: PUSH
1277: LD_INT 81
1279: PUSH
1280: LD_VAR 0 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// if tmp then
1294: LD_VAR 0 11
1298: IFFALSE 1319
// enemySide := GetSide ( tmp [ 1 ] ) ;
1300: LD_ADDR_VAR 0 38
1304: PUSH
1305: LD_VAR 0 11
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 255
1318: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1319: LD_ADDR_VAR 0 26
1323: PUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: LD_INT 81
1331: PUSH
1332: LD_VAR 0 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PPUSH
1341: CALL_OW 70
1345: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 27
1350: PUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1373: LD_ADDR_VAR 0 13
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_VAR 0 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 50
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: LD_INT 34
1398: PUSH
1399: LD_INT 31
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// if ct then
1416: LD_VAR 0 13
1420: IFFALSE 1511
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1422: LD_ADDR_VAR 0 15
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: LD_INT 61
1444: PUSH
1445: EMPTY
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PUSH
1458: LD_INT 33
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// if veh then
1479: LD_VAR 0 15
1483: IFFALSE 1511
// for i in veh do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_VAR 0 15
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1509
// Connect ( i ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: CALL 23510 0 1
1507: GO 1495
1509: POP
1510: POP
// end ; vehicles := arVehicles ;
1511: LD_ADDR_VAR 0 30
1515: PUSH
1516: LD_EXP 8
1520: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1521: LD_ADDR_VAR 0 36
1525: PUSH
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 22
1533: PUSH
1534: LD_VAR 0 1
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 30
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// if depot then
1580: LD_VAR 0 36
1584: IFFALSE 1600
// depot := depot [ 1 ] ;
1586: LD_ADDR_VAR 0 36
1590: PUSH
1591: LD_VAR 0 36
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1600: LD_ADDR_VAR 0 22
1604: PUSH
1605: LD_VAR 0 5
1609: PPUSH
1610: LD_INT 25
1612: PUSH
1613: LD_INT 4
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 50
1622: PUSH
1623: EMPTY
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: ST_TO_ADDR
// if arTech then
1635: LD_EXP 5
1639: IFFALSE 2001
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1641: LD_ADDR_VAR 0 16
1645: PUSH
1646: LD_VAR 0 3
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 50
1665: PUSH
1666: EMPTY
1667: LIST
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 30
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 30
1684: PUSH
1685: LD_INT 7
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 30
1694: PUSH
1695: LD_INT 8
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 70
1717: ST_TO_ADDR
// if lab then
1718: LD_VAR 0 16
1722: IFFALSE 2001
// begin for j := 1 to Count ( lab ) do
1724: LD_ADDR_VAR 0 10
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_VAR 0 16
1738: PPUSH
1739: CALL 17304 0 1
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1999
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1747: LD_VAR 0 16
1751: PUSH
1752: LD_VAR 0 10
1756: ARRAY
1757: PPUSH
1758: CALL_OW 461
1762: PUSH
1763: LD_INT 2
1765: EQUAL
1766: IFFALSE 1849
// begin for i in arTech do
1768: LD_ADDR_VAR 0 9
1772: PUSH
1773: LD_EXP 5
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1845
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1781: LD_VAR 0 16
1785: PUSH
1786: LD_VAR 0 10
1790: ARRAY
1791: PPUSH
1792: LD_VAR 0 9
1796: PPUSH
1797: CALL_OW 430
1801: PUSH
1802: LD_VAR 0 9
1806: PPUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 321
1816: PUSH
1817: LD_INT 1
1819: EQUAL
1820: AND
1821: IFFALSE 1843
// begin AddComResearch ( lab [ j ] , i ) ;
1823: LD_VAR 0 16
1827: PUSH
1828: LD_VAR 0 10
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 9
1838: PPUSH
1839: CALL_OW 184
// end ;
1843: GO 1778
1845: POP
1846: POP
// end else
1847: GO 1997
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1849: LD_VAR 0 16
1853: PUSH
1854: LD_VAR 0 10
1858: ARRAY
1859: PPUSH
1860: CALL_OW 461
1864: PUSH
1865: LD_INT 6
1867: EQUAL
1868: IFFALSE 1997
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1870: LD_ADDR_VAR 0 9
1874: PUSH
1875: LD_VAR 0 22
1879: PPUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 120
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 72
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1995
// begin inside := IsInUnit ( i ) ;
1905: LD_ADDR_VAR 0 14
1909: PUSH
1910: LD_VAR 0 9
1914: PPUSH
1915: CALL_OW 310
1919: ST_TO_ADDR
// if not inside then
1920: LD_VAR 0 14
1924: NOT
1925: IFFALSE 1949
// ComEnterUnit ( i , lab [ j ] ) else
1927: LD_VAR 0 9
1931: PPUSH
1932: LD_VAR 0 16
1936: PUSH
1937: LD_VAR 0 10
1941: ARRAY
1942: PPUSH
1943: CALL_OW 120
1947: GO 1993
// if BuildingStatus ( inside ) = bs_idle then
1949: LD_VAR 0 14
1953: PPUSH
1954: CALL_OW 461
1958: PUSH
1959: LD_INT 2
1961: EQUAL
1962: IFFALSE 1993
// begin ComExitBuilding ( i ) ;
1964: LD_VAR 0 9
1968: PPUSH
1969: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
1973: LD_VAR 0 9
1977: PPUSH
1978: LD_VAR 0 16
1982: PUSH
1983: LD_VAR 0 10
1987: ARRAY
1988: PPUSH
1989: CALL_OW 180
// end ; end ;
1993: GO 1902
1995: POP
1996: POP
// end ;
1997: GO 1744
1999: POP
2000: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2001: LD_ADDR_VAR 0 33
2005: PUSH
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 22
2013: PUSH
2014: LD_VAR 0 1
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 50
2035: PUSH
2036: EMPTY
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 70
2048: ST_TO_ADDR
// if fac then
2049: LD_VAR 0 33
2053: IFFALSE 2388
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2055: LD_VAR 0 33
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 461
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: IFFALSE 2388
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2074: LD_ADDR_VAR 0 34
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 33
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 35
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 70
2130: ST_TO_ADDR
// if emptyTowers then
2131: LD_VAR 0 34
2135: IFFALSE 2185
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2137: LD_ADDR_VAR 0 35
2141: PUSH
2142: LD_VAR 0 34
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 3
2155: PPUSH
2156: CALL 25549 0 2
2160: ST_TO_ADDR
// if weapon then
2161: LD_VAR 0 35
2165: IFFALSE 2185
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2167: LD_VAR 0 34
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 35
2180: PPUSH
2181: CALL_OW 148
// end ; if arConstructList then
2185: LD_EXP 6
2189: IFFALSE 2388
// for i := 1 to Count ( arConstructList ) do
2191: LD_ADDR_VAR 0 9
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_EXP 6
2205: PPUSH
2206: CALL 17304 0 1
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2386
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2214: LD_VAR 0 33
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_EXP 6
2227: PUSH
2228: LD_VAR 0 9
2232: ARRAY
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: LD_EXP 6
2242: PUSH
2243: LD_VAR 0 9
2247: ARRAY
2248: PUSH
2249: LD_INT 2
2251: ARRAY
2252: PPUSH
2253: LD_EXP 6
2257: PUSH
2258: LD_VAR 0 9
2262: ARRAY
2263: PUSH
2264: LD_INT 3
2266: ARRAY
2267: PPUSH
2268: LD_EXP 6
2272: PUSH
2273: LD_VAR 0 9
2277: ARRAY
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PPUSH
2283: CALL_OW 448
2287: IFFALSE 2384
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2289: LD_VAR 0 33
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PPUSH
2298: LD_EXP 6
2302: PUSH
2303: LD_VAR 0 9
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 6
2317: PUSH
2318: LD_VAR 0 9
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PPUSH
2328: LD_EXP 6
2332: PUSH
2333: LD_VAR 0 9
2337: ARRAY
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_INT 4
2356: ARRAY
2357: PPUSH
2358: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2362: LD_ADDR_EXP 6
2366: PUSH
2367: LD_EXP 6
2371: PPUSH
2372: LD_VAR 0 9
2376: PPUSH
2377: CALL_OW 3
2381: ST_TO_ADDR
// break ;
2382: GO 2386
// end ; end ;
2384: GO 2211
2386: POP
2387: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2388: LD_ADDR_VAR 0 11
2392: PUSH
2393: LD_VAR 0 3
2397: PPUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PPUSH
2443: CALL_OW 70
2447: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2448: LD_ADDR_VAR 0 21
2452: PUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 435
2462: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2463: LD_ADDR_VAR 0 18
2467: PUSH
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 25
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 50
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 72
2497: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2498: LD_VAR 0 18
2502: PPUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 120
2508: PUSH
2509: LD_INT 7
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: LD_INT 54
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: PUSH
2542: LD_VAR 0 33
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PPUSH
2551: CALL_OW 302
2555: AND
2556: IFFALSE 2615
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2558: LD_VAR 0 18
2562: PPUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 120
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 3
2582: PUSH
2583: LD_INT 54
2585: PUSH
2586: EMPTY
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 72
2601: PPUSH
2602: LD_VAR 0 33
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2615: LD_ADDR_VAR 0 16
2619: PUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 6
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 7
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_INT 8
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: ST_TO_ADDR
// if sci then
2669: LD_VAR 0 22
2673: IFFALSE 2916
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2675: LD_ADDR_VAR 0 24
2679: PUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 95
2687: PUSH
2688: LD_VAR 0 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 120
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: ST_TO_ADDR
// if hurtUnits then
2716: LD_VAR 0 24
2720: IFFALSE 2815
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2722: LD_ADDR_VAR 0 9
2726: PUSH
2727: LD_VAR 0 22
2731: PPUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 120
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 72
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2811
// begin SetTag ( i , tHealer ) ;
2757: LD_VAR 0 9
2761: PPUSH
2762: LD_INT 10
2764: PPUSH
2765: CALL_OW 109
// if IsInUnit ( i ) then
2769: LD_VAR 0 9
2773: PPUSH
2774: CALL_OW 310
2778: IFFALSE 2791
// ComExitBuilding ( i ) else
2780: LD_VAR 0 9
2784: PPUSH
2785: CALL_OW 122
2789: GO 2809
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2791: LD_VAR 0 9
2795: PPUSH
2796: LD_VAR 0 24
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: CALL_OW 128
// end ;
2809: GO 2754
2811: POP
2812: POP
// end else
2813: GO 2916
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2815: LD_VAR 0 16
2819: PUSH
2820: LD_VAR 0 22
2824: PPUSH
2825: LD_INT 120
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: AND
2840: IFFALSE 2916
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2842: LD_ADDR_VAR 0 9
2846: PUSH
2847: LD_VAR 0 22
2851: PPUSH
2852: LD_INT 120
2854: PUSH
2855: LD_INT 10
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 72
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2914
// begin SetTag ( i , 0 ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_INT 0
2877: PPUSH
2878: CALL_OW 109
// if not IsInUnit ( i ) then
2882: LD_VAR 0 9
2886: PPUSH
2887: CALL_OW 310
2891: NOT
2892: IFFALSE 2912
// ComEnterUnit ( i , lab [ 1 ] ) ;
2894: LD_VAR 0 9
2898: PPUSH
2899: LD_VAR 0 16
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 120
// end ;
2912: GO 2867
2914: POP
2915: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2916: LD_ADDR_VAR 0 17
2920: PUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 72
2940: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2941: LD_ADDR_VAR 0 37
2945: PUSH
2946: LD_EXP 7
2950: ST_TO_ADDR
// if eng then
2951: LD_VAR 0 17
2955: IFFALSE 3789
// begin for i in eng do
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_VAR 0 17
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3787
// begin tag := GetTag ( i ) ;
2970: LD_ADDR_VAR 0 19
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: CALL_OW 110
2984: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2985: LD_VAR 0 9
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 308
2999: IFFALSE 3030
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3001: LD_VAR 0 9
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 7
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 111
// continue ;
3028: GO 2967
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3030: LD_VAR 0 9
3034: PPUSH
3035: CALL_OW 256
3039: PUSH
3040: LD_INT 800
3042: LESS
3043: PUSH
3044: LD_VAR 0 19
3048: PUSH
3049: LD_INT 1
3051: NONEQUAL
3052: AND
3053: IFFALSE 3103
// begin SetTag ( i , tHeal ) ;
3055: LD_VAR 0 9
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3067: LD_VAR 0 9
3071: PPUSH
3072: LD_VAR 0 6
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 6
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: CALL_OW 111
// AddComHold ( i ) ;
3094: LD_VAR 0 9
3098: PPUSH
3099: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3103: LD_VAR 0 19
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_VAR 0 9
3116: PPUSH
3117: CALL_OW 256
3121: PUSH
3122: LD_INT 1000
3124: EQUAL
3125: AND
3126: IFFALSE 3140
// SetTag ( i , 0 ) ;
3128: LD_VAR 0 9
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 109
// if not tag then
3140: LD_VAR 0 19
3144: NOT
3145: IFFALSE 3312
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 57
3159: PUSH
3160: EMPTY
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// if undone then
3168: LD_VAR 0 12
3172: IFFALSE 3194
// begin ComComplete ( i , undone [ 1 ] ) ;
3174: LD_VAR 0 9
3178: PPUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: CALL 23402 0 2
// continue ;
3192: GO 2967
// end ; if cr or tmp or buildingsToBuild then
3194: LD_VAR 0 21
3198: PUSH
3199: LD_VAR 0 11
3203: OR
3204: PUSH
3205: LD_VAR 0 37
3209: OR
3210: IFFALSE 3286
// begin if IsInUnit ( i ) then
3212: LD_VAR 0 9
3216: PPUSH
3217: CALL_OW 310
3221: IFFALSE 3232
// ComExitBuilding ( i ) ;
3223: LD_VAR 0 9
3227: PPUSH
3228: CALL_OW 122
// if tmp then
3232: LD_VAR 0 11
3236: IFFALSE 3252
// SetTag ( i , tRepair ) else
3238: LD_VAR 0 9
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: CALL_OW 109
3250: GO 3284
// if cr then
3252: LD_VAR 0 21
3256: IFFALSE 3272
// SetTag ( i , tCrates ) else
3258: LD_VAR 0 9
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 109
3270: GO 3284
// SetTag ( i , tBuild ) ;
3272: LD_VAR 0 9
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 109
// end else
3284: GO 3312
// if not IsInUnit ( i ) then
3286: LD_VAR 0 9
3290: PPUSH
3291: CALL_OW 310
3295: NOT
3296: IFFALSE 3312
// ComEnterUnit ( i , depot ) ;
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_VAR 0 36
3307: PPUSH
3308: CALL_OW 120
// end ; if tag = tRepair then
3312: LD_VAR 0 19
3316: PUSH
3317: LD_INT 3
3319: EQUAL
3320: IFFALSE 3426
// begin if IsInUnit ( i ) then
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 310
3331: IFFALSE 3344
// begin ComExitBuilding ( i ) ;
3333: LD_VAR 0 9
3337: PPUSH
3338: CALL_OW 122
// continue ;
3342: GO 2967
// end ; if not tmp then
3344: LD_VAR 0 11
3348: NOT
3349: IFFALSE 3365
// begin SetTag ( i , 0 ) ;
3351: LD_VAR 0 9
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 109
// continue ;
3363: GO 2967
// end ; if not HasTask ( i ) then
3365: LD_VAR 0 9
3369: PPUSH
3370: CALL_OW 314
3374: NOT
3375: IFFALSE 3395
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3377: LD_VAR 0 9
3381: PPUSH
3382: LD_VAR 0 11
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: CALL_OW 130
// if not IsInArea ( i , area ) then
3395: LD_VAR 0 9
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 308
3409: NOT
3410: IFFALSE 3426
// ComMoveToArea ( i , area ) ;
3412: LD_VAR 0 9
3416: PPUSH
3417: LD_VAR 0 3
3421: PPUSH
3422: CALL_OW 113
// end ; if tag = tBuild then
3426: LD_VAR 0 19
3430: PUSH
3431: LD_INT 5
3433: EQUAL
3434: IFFALSE 3640
// begin if IsInUnit ( i ) then
3436: LD_VAR 0 9
3440: PPUSH
3441: CALL_OW 310
3445: IFFALSE 3458
// begin ComExitBuilding ( i ) ;
3447: LD_VAR 0 9
3451: PPUSH
3452: CALL_OW 122
// continue ;
3456: GO 2967
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3458: LD_VAR 0 37
3462: NOT
3463: PUSH
3464: LD_VAR 0 26
3468: OR
3469: PUSH
3470: LD_VAR 0 27
3474: OR
3475: IFFALSE 3493
// begin SetTag ( i , 0 ) ;
3477: LD_VAR 0 9
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 109
// continue ;
3489: GO 2967
// end else
3491: GO 3532
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3493: LD_VAR 0 36
3497: PPUSH
3498: LD_VAR 0 37
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL 56816 0 2
3515: NOT
3516: IFFALSE 3532
// begin SetTag ( i , 0 ) ;
3518: LD_VAR 0 9
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 109
// continue ;
3530: GO 2967
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3532: LD_ADDR_VAR 0 12
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 57
3544: PUSH
3545: EMPTY
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: ST_TO_ADDR
// if undone then
3553: LD_VAR 0 12
3557: IFFALSE 3579
// begin ComComplete ( i , undone [ 1 ] ) ;
3559: LD_VAR 0 9
3563: PPUSH
3564: LD_VAR 0 12
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL 23402 0 2
// continue ;
3577: GO 2967
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3579: LD_VAR 0 9
3583: PPUSH
3584: LD_VAR 0 37
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 37
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 37
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 37
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PUSH
3632: LD_INT 4
3634: ARRAY
3635: PPUSH
3636: CALL_OW 145
// end ; if tag = tCrates then
3640: LD_VAR 0 19
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3785
// begin if IsInUnit ( i ) then
3650: LD_VAR 0 9
3654: PPUSH
3655: CALL_OW 310
3659: IFFALSE 3672
// begin ComExitBuilding ( i ) ;
3661: LD_VAR 0 9
3665: PPUSH
3666: CALL_OW 122
// continue ;
3670: GO 2967
// end ; if not cr then
3672: LD_VAR 0 21
3676: NOT
3677: IFFALSE 3693
// begin SetTag ( i , 0 ) ;
3679: LD_VAR 0 9
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 109
// continue ;
3691: GO 2967
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3693: LD_VAR 0 9
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: LD_VAR 0 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 92
3718: PUSH
3719: LD_VAR 0 21
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PUSH
3728: LD_VAR 0 21
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: NOT
3755: AND
3756: IFFALSE 3785
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_VAR 0 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_VAR 0 21
3776: PUSH
3777: LD_INT 2
3779: ARRAY
3780: PPUSH
3781: CALL_OW 117
// end ; end ;
3785: GO 2967
3787: POP
3788: POP
// end ; if vehicles then
3789: LD_VAR 0 30
3793: IFFALSE 4593
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3795: LD_ADDR_VAR 0 30
3799: PUSH
3800: LD_VAR 0 30
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 34
3813: PUSH
3814: LD_INT 88
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 34
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 50
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 72
3854: ST_TO_ADDR
// if vehicles then
3855: LD_VAR 0 30
3859: IFFALSE 4593
// begin for i in vehicles do
3861: LD_ADDR_VAR 0 9
3865: PUSH
3866: LD_VAR 0 30
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4591
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 19
3878: PUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if not tag then
3889: LD_VAR 0 19
3893: NOT
3894: IFFALSE 4040
// begin if GetControl ( i ) = control_manual then
3896: LD_VAR 0 9
3900: PPUSH
3901: CALL_OW 263
3905: PUSH
3906: LD_INT 1
3908: EQUAL
3909: IFFALSE 4026
// begin drivers := arDrivers ;
3911: LD_ADDR_VAR 0 28
3915: PUSH
3916: LD_EXP 10
3920: ST_TO_ADDR
// if not drivers then
3921: LD_VAR 0 28
3925: NOT
3926: IFFALSE 4006
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3928: LD_ADDR_VAR 0 28
3932: PUSH
3933: LD_VAR 0 18
3937: PPUSH
3938: LD_INT 3
3940: PUSH
3941: LD_INT 120
3943: PUSH
3944: LD_INT 7
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 72
3959: ST_TO_ADDR
// if drivers then
3960: LD_VAR 0 28
3964: IFFALSE 4006
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3966: LD_VAR 0 28
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3982: LD_ADDR_EXP 10
3986: PUSH
3987: LD_EXP 10
3991: PPUSH
3992: LD_VAR 0 28
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: CALL 52893 0 2
4005: ST_TO_ADDR
// end ; end ; if drivers then
4006: LD_VAR 0 28
4010: IFFALSE 4024
// SetTag ( i , tBusy ) ;
4012: LD_VAR 0 9
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: CALL_OW 109
// continue ;
4024: GO 3871
// end ; SetTag ( i , tBusy ) ;
4026: LD_VAR 0 9
4030: PPUSH
4031: LD_INT 8
4033: PPUSH
4034: CALL_OW 109
// end else
4038: GO 4589
// if tag = tBusy then
4040: LD_VAR 0 19
4044: PUSH
4045: LD_INT 8
4047: EQUAL
4048: IFFALSE 4260
// begin if GetLives ( i ) = 1000 then
4050: LD_VAR 0 9
4054: PPUSH
4055: CALL_OW 256
4059: PUSH
4060: LD_INT 1000
4062: EQUAL
4063: IFFALSE 4258
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 263
4074: PUSH
4075: LD_INT 1
4077: EQUAL
4078: PUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: CALL_OW 311
4088: NOT
4089: AND
4090: IFFALSE 4246
// begin drivers := arDrivers ;
4092: LD_ADDR_VAR 0 28
4096: PUSH
4097: LD_EXP 10
4101: ST_TO_ADDR
// if not drivers then
4102: LD_VAR 0 28
4106: NOT
4107: IFFALSE 4123
// begin SetTag ( i , 0 ) ;
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 109
// continue ;
4121: GO 3871
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4123: LD_VAR 0 28
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: CALL_OW 310
4136: PUSH
4137: LD_VAR 0 28
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: CALL 50497 0 1
4150: NOT
4151: AND
4152: IFFALSE 4167
// ComExitBuilding ( drivers [ 1 ] ) ;
4154: LD_VAR 0 28
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PPUSH
4163: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4167: LD_VAR 0 30
4171: PPUSH
4172: LD_INT 120
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 72
4186: PUSH
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 314
4200: NOT
4201: AND
4202: PUSH
4203: LD_VAR 0 30
4207: PPUSH
4208: LD_INT 120
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 72
4222: NOT
4223: OR
4224: IFFALSE 4244
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4226: LD_VAR 0 28
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 9
4239: PPUSH
4240: CALL_OW 120
// continue ;
4244: GO 3871
// end ; SetTag ( i , tAttack ) ;
4246: LD_VAR 0 9
4250: PPUSH
4251: LD_INT 13
4253: PPUSH
4254: CALL_OW 109
// end ; end else
4258: GO 4589
// if tag = tAttack then
4260: LD_VAR 0 19
4264: PUSH
4265: LD_INT 13
4267: EQUAL
4268: IFFALSE 4448
// begin enemy := enemyInBase ;
4270: LD_ADDR_VAR 0 25
4274: PUSH
4275: LD_VAR 0 26
4279: ST_TO_ADDR
// if not enemy then
4280: LD_VAR 0 25
4284: NOT
4285: IFFALSE 4297
// enemy := enemyOuterBase ;
4287: LD_ADDR_VAR 0 25
4291: PUSH
4292: LD_VAR 0 27
4296: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4297: LD_VAR 0 25
4301: NOT
4302: PUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 2
4324: ARRAY
4325: PPUSH
4326: CALL_OW 297
4330: PUSH
4331: LD_INT 10
4333: GREATER
4334: AND
4335: IFFALSE 4366
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 7
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 7
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 111
// continue ;
4364: GO 3871
// end ; if GetLives ( i ) < 650 then
4366: LD_VAR 0 9
4370: PPUSH
4371: CALL_OW 256
4375: PUSH
4376: LD_INT 650
4378: LESS
4379: IFFALSE 4422
// begin SetTag ( i , tVehRepair ) ;
4381: LD_VAR 0 9
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4393: LD_VAR 0 9
4397: PPUSH
4398: LD_VAR 0 7
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 7
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 111
// continue ;
4420: GO 3871
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4422: LD_VAR 0 9
4426: PPUSH
4427: LD_VAR 0 25
4431: PPUSH
4432: LD_VAR 0 9
4436: PPUSH
4437: CALL_OW 74
4441: PPUSH
4442: CALL_OW 115
// end else
4446: GO 4589
// if tag = tVehRepair then
4448: LD_VAR 0 19
4452: PUSH
4453: LD_INT 9
4455: EQUAL
4456: IFFALSE 4589
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 297
4485: PUSH
4486: LD_INT 10
4488: GREATER
4489: IFFALSE 4520
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4491: LD_VAR 0 9
4495: PPUSH
4496: LD_VAR 0 7
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 7
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 111
// continue ;
4518: GO 3871
// end ; if GetLives ( i ) = 1000 then
4520: LD_VAR 0 9
4524: PPUSH
4525: CALL_OW 256
4529: PUSH
4530: LD_INT 1000
4532: EQUAL
4533: IFFALSE 4549
// begin SetTag ( i , tBusy ) ;
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_INT 8
4542: PPUSH
4543: CALL_OW 109
// continue ;
4547: GO 3871
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL_OW 263
4558: PUSH
4559: LD_INT 1
4561: EQUAL
4562: PUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 311
4572: AND
4573: IFFALSE 4589
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: CALL_OW 311
4584: PPUSH
4585: CALL 54593 0 1
// end ; end ;
4589: GO 3871
4591: POP
4592: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4593: LD_ADDR_VAR 0 23
4597: PUSH
4598: LD_VAR 0 5
4602: PPUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 25
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 9
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 50
4655: PUSH
4656: EMPTY
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 72
4667: ST_TO_ADDR
// if sol then
4668: LD_VAR 0 23
4672: IFFALSE 5180
// begin if enemyInBase then
4674: LD_VAR 0 26
4678: IFFALSE 4857
// begin for i in sol do
4680: LD_ADDR_VAR 0 9
4684: PUSH
4685: LD_VAR 0 23
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4853
// begin tw := IsInUnit ( i ) ;
4693: LD_ADDR_VAR 0 20
4697: PUSH
4698: LD_VAR 0 9
4702: PPUSH
4703: CALL_OW 310
4707: ST_TO_ADDR
// if tw then
4708: LD_VAR 0 20
4712: IFFALSE 4795
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4714: LD_VAR 0 20
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_VAR 0 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_VAR 0 38
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 31
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: IN
4781: NOT
4782: IFFALSE 4793
// ComExitBuilding ( i ) ;
4784: LD_VAR 0 9
4788: PPUSH
4789: CALL_OW 122
// end else
4793: GO 4851
// if IsInArea ( i , area ) then
4795: LD_VAR 0 9
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 308
4809: IFFALSE 4837
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4811: LD_VAR 0 9
4815: PPUSH
4816: LD_VAR 0 26
4820: PPUSH
4821: LD_VAR 0 9
4825: PPUSH
4826: CALL_OW 74
4830: PPUSH
4831: CALL_OW 115
4835: GO 4851
// ComMoveToArea ( i , area ) ;
4837: LD_VAR 0 9
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: CALL_OW 113
// end ;
4851: GO 4690
4853: POP
4854: POP
// end else
4855: GO 5180
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4857: LD_ADDR_VAR 0 32
4861: PUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 32
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 30
4905: PUSH
4906: LD_INT 5
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 30
4915: PUSH
4916: LD_INT 31
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// if empty then
4939: LD_VAR 0 32
4943: IFFALSE 4960
// empty := ReverseArray ( empty ) ;
4945: LD_ADDR_VAR 0 32
4949: PUSH
4950: LD_VAR 0 32
4954: PPUSH
4955: CALL 48180 0 1
4959: ST_TO_ADDR
// for i in sol do
4960: LD_ADDR_VAR 0 9
4964: PUSH
4965: LD_VAR 0 23
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5178
// begin tag := GetTag ( i ) ;
4973: LD_ADDR_VAR 0 19
4977: PUSH
4978: LD_VAR 0 9
4982: PPUSH
4983: CALL_OW 110
4987: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4988: LD_VAR 0 9
4992: PPUSH
4993: CALL_OW 256
4997: PUSH
4998: LD_INT 1000
5000: LESS
5001: PUSH
5002: LD_VAR 0 19
5006: PUSH
5007: LD_INT 1
5009: NONEQUAL
5010: AND
5011: IFFALSE 5063
// begin SetTag ( i , tHeal ) ;
5013: LD_VAR 0 9
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5025: LD_VAR 0 9
5029: PPUSH
5030: LD_VAR 0 6
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 6
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 111
// AddComHold ( i ) ;
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 200
// continue ;
5061: GO 4970
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5063: LD_VAR 0 9
5067: PPUSH
5068: CALL_OW 256
5072: PUSH
5073: LD_INT 1000
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 19
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: AND
5086: IFFALSE 5102
// begin SetTag ( i , 0 ) ;
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 109
// continue ;
5100: GO 4970
// end ; if HasTask ( i ) then
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 314
5111: IFFALSE 5115
// continue ;
5113: GO 4970
// if not IsInUnit ( i ) and not tag and empty then
5115: LD_VAR 0 9
5119: PPUSH
5120: CALL_OW 310
5124: NOT
5125: PUSH
5126: LD_VAR 0 19
5130: NOT
5131: AND
5132: PUSH
5133: LD_VAR 0 32
5137: AND
5138: IFFALSE 5176
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5140: LD_VAR 0 9
5144: PPUSH
5145: LD_VAR 0 32
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5158: LD_ADDR_VAR 0 32
5162: PUSH
5163: LD_VAR 0 32
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 3
5175: ST_TO_ADDR
// end ; end ;
5176: GO 4970
5178: POP
5179: POP
// end ; end ; end ;
5180: LD_VAR 0 8
5184: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5185: LD_EXP 14
5189: PPUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: IFFALSE 5253
5202: GO 5204
5204: DISABLE
// begin enable ;
5205: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5206: LD_EXP 3
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 43
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PPUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 52
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL 1238 0 7
// end ;
5253: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp , side ;
5254: LD_EXP 13
5258: IFFALSE 5499
5260: GO 5262
5262: DISABLE
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
// begin enable ;
5269: ENABLE
// p := 1 ;
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5278: LD_ADDR_VAR 0 1
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_EXP 13
5292: PPUSH
5293: CALL 17304 0 1
5297: PUSH
5298: LD_INT 2
5300: DIV
5301: PUSH
5302: FOR_TO
5303: IFFALSE 5497
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5305: LD_ADDR_VAR 0 3
5309: PUSH
5310: LD_EXP 13
5314: PUSH
5315: LD_VAR 0 2
5319: ARRAY
5320: PPUSH
5321: LD_EXP 13
5325: PUSH
5326: LD_VAR 0 2
5330: PUSH
5331: LD_INT 1
5333: PLUS
5334: ARRAY
5335: PPUSH
5336: CALL_OW 428
5340: ST_TO_ADDR
// if tmp then
5341: LD_VAR 0 3
5345: IFFALSE 5481
// begin side := GetSide ( tmp ) ;
5347: LD_ADDR_VAR 0 4
5351: PUSH
5352: LD_VAR 0 3
5356: PPUSH
5357: CALL_OW 255
5361: ST_TO_ADDR
// if side <> botSides [ 1 ] and side > 0 then
5362: LD_VAR 0 4
5366: PUSH
5367: LD_EXP 3
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: NONEQUAL
5376: PUSH
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: GREATER
5385: AND
5386: IFFALSE 5481
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5388: LD_EXP 13
5392: PUSH
5393: LD_VAR 0 2
5397: ARRAY
5398: PPUSH
5399: LD_EXP 13
5403: PUSH
5404: LD_VAR 0 2
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: ARRAY
5413: PPUSH
5414: LD_EXP 3
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5427: LD_ADDR_EXP 13
5431: PUSH
5432: LD_EXP 13
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 3
5446: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5447: LD_ADDR_EXP 13
5451: PUSH
5452: LD_EXP 13
5456: PPUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 3
5466: ST_TO_ADDR
// p := p - 2 ;
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 2
5476: PUSH
5477: LD_INT 2
5479: MINUS
5480: ST_TO_ADDR
// end ; end ; p := p + 2 ;
5481: LD_ADDR_VAR 0 2
5485: PUSH
5486: LD_VAR 0 2
5490: PUSH
5491: LD_INT 2
5493: PLUS
5494: ST_TO_ADDR
// end ;
5495: GO 5302
5497: POP
5498: POP
// end ;
5499: PPOPN 4
5501: END
// every 6 6$00 trigger IsOk ( arDep ) do
5502: LD_INT 2
5504: PPUSH
5505: CALL_OW 302
5509: IFFALSE 5687
5511: GO 5513
5513: DISABLE
// begin enable ;
5514: ENABLE
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5515: LD_ADDR_EXP 6
5519: PUSH
5520: LD_EXP 6
5524: PUSH
5525: LD_INT 14
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: LD_INT 27
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: PUSH
5543: LD_INT 14
5545: PUSH
5546: LD_INT 1
5548: PUSH
5549: LD_INT 2
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 14
5563: PUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 28
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: ADD
5584: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5585: LD_OWVAR 67
5589: PUSH
5590: LD_INT 1
5592: GREATER
5593: PUSH
5594: LD_INT 72
5596: PPUSH
5597: LD_EXP 3
5601: PUSH
5602: LD_INT 1
5604: ARRAY
5605: PPUSH
5606: CALL_OW 321
5610: PUSH
5611: LD_INT 2
5613: EQUAL
5614: AND
5615: IFFALSE 5687
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5617: LD_ADDR_EXP 6
5621: PUSH
5622: LD_EXP 6
5626: PUSH
5627: LD_INT 14
5629: PUSH
5630: LD_INT 3
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 29
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 14
5647: PUSH
5648: LD_INT 3
5650: PUSH
5651: LD_INT 2
5653: PUSH
5654: LD_INT 29
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 14
5665: PUSH
5666: LD_INT 3
5668: PUSH
5669: LD_INT 2
5671: PUSH
5672: LD_INT 29
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: LIST
5685: ADD
5686: ST_TO_ADDR
// end ; end_of_file
5687: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
5692: PPUSH
5693: PPUSH
5694: PPUSH
// multi_settings_counter := 6 ;
5695: LD_ADDR_EXP 29
5699: PUSH
5700: LD_INT 6
5702: ST_TO_ADDR
// multi_settings := [ ] ;
5703: LD_ADDR_EXP 28
5707: PUSH
5708: EMPTY
5709: ST_TO_ADDR
// if Multiplayer then
5710: LD_OWVAR 4
5714: IFFALSE 5894
// begin your_side := mp_player_side ;
5716: LD_ADDR_OWVAR 2
5720: PUSH
5721: LD_OWVAR 7
5725: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5726: LD_ADDR_EXP 17
5730: PUSH
5731: LD_OWVAR 6
5735: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5736: LD_ADDR_EXP 18
5740: PUSH
5741: LD_OWVAR 17
5745: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5746: LD_ADDR_EXP 19
5750: PUSH
5751: LD_OWVAR 15
5755: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5756: LD_ADDR_EXP 20
5760: PUSH
5761: LD_OWVAR 16
5765: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5766: LD_ADDR_EXP 21
5770: PUSH
5771: EMPTY
5772: PUSH
5773: EMPTY
5774: LIST
5775: ST_TO_ADDR
// for i in mp_teams do
5776: LD_ADDR_VAR 0 2
5780: PUSH
5781: LD_OWVAR 12
5785: PUSH
5786: FOR_IN
5787: IFFALSE 5830
// if i then
5789: LD_VAR 0 2
5793: IFFALSE 5828
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5795: LD_ADDR_EXP 21
5799: PUSH
5800: LD_EXP 21
5804: PPUSH
5805: LD_INT 1
5807: PPUSH
5808: LD_EXP 21
5812: PUSH
5813: LD_INT 1
5815: ARRAY
5816: PUSH
5817: LD_VAR 0 2
5821: UNION
5822: PPUSH
5823: CALL_OW 1
5827: ST_TO_ADDR
5828: GO 5786
5830: POP
5831: POP
// for i := 1 to multi_settings_counter do
5832: LD_ADDR_VAR 0 2
5836: PUSH
5837: DOUBLE
5838: LD_INT 1
5840: DEC
5841: ST_TO_ADDR
5842: LD_EXP 29
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5890
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5850: LD_ADDR_EXP 28
5854: PUSH
5855: LD_EXP 28
5859: PPUSH
5860: LD_EXP 28
5864: PUSH
5865: LD_INT 1
5867: PLUS
5868: PPUSH
5869: LD_VAR 0 2
5873: PPUSH
5874: CALL_OW 426
5878: PUSH
5879: LD_INT 1
5881: PLUS
5882: PPUSH
5883: CALL_OW 1
5887: ST_TO_ADDR
5888: GO 5847
5890: POP
5891: POP
// end else
5892: GO 6080
// begin your_side := 3 ;
5894: LD_ADDR_OWVAR 2
5898: PUSH
5899: LD_INT 3
5901: ST_TO_ADDR
// multi_gametype := 1 ;
5902: LD_ADDR_EXP 17
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 18
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: LD_INT 2
5926: PUSH
5927: LD_INT 3
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5949: LD_ADDR_EXP 19
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: LD_INT 1
5965: PUSH
5966: LD_INT 1
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5988: LD_ADDR_EXP 20
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 3
6001: PUSH
6002: LD_INT 3
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6027: LD_ADDR_EXP 21
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: LD_INT 4
6037: PUSH
6038: LD_INT 5
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6049: LD_ADDR_EXP 28
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6080: LD_ADDR_EXP 22
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: LD_INT 0
6105: PUSH
6106: LD_INT 0
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6119: LD_ADDR_EXP 25
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6158: LD_ADDR_EXP 36
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
// multi_teamgame := true ;
6197: LD_ADDR_EXP 26
6201: PUSH
6202: LD_INT 1
6204: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6205: LD_ADDR_EXP 24
6209: PUSH
6210: LD_INT 3
6212: PUSH
6213: EMPTY
6214: LIST
6215: ST_TO_ADDR
// multi_custom_commanders := true ;
6216: LD_ADDR_EXP 27
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// multi_commanders := [ ] ;
6224: LD_ADDR_EXP 35
6228: PUSH
6229: EMPTY
6230: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6231: LD_ADDR_EXP 38
6235: PUSH
6236: EMPTY
6237: ST_TO_ADDR
// multi_players_amount := 0 ;
6238: LD_ADDR_EXP 37
6242: PUSH
6243: LD_INT 0
6245: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6246: LD_ADDR_EXP 23
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: LD_INT 6
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 7
6263: PUSH
6264: LD_INT 8
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 9
6273: PUSH
6274: LD_INT 10
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6286: LD_ADDR_EXP 40
6290: PUSH
6291: EMPTY
6292: PUSH
6293: EMPTY
6294: PUSH
6295: EMPTY
6296: PUSH
6297: EMPTY
6298: PUSH
6299: EMPTY
6300: PUSH
6301: EMPTY
6302: PUSH
6303: EMPTY
6304: PUSH
6305: EMPTY
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: ST_TO_ADDR
// for i := 1 to 8 do
6317: LD_ADDR_VAR 0 2
6321: PUSH
6322: DOUBLE
6323: LD_INT 1
6325: DEC
6326: ST_TO_ADDR
6327: LD_INT 8
6329: PUSH
6330: FOR_TO
6331: IFFALSE 6660
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6333: LD_VAR 0 2
6337: PPUSH
6338: CALL_OW 530
6342: IFFALSE 6500
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6344: LD_ADDR_EXP 22
6348: PUSH
6349: LD_EXP 22
6353: PPUSH
6354: LD_VAR 0 2
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: CALL_OW 1
6366: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6367: LD_ADDR_EXP 20
6371: PUSH
6372: LD_EXP 20
6376: PPUSH
6377: LD_VAR 0 2
6381: PPUSH
6382: LD_INT 0
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6390: LD_ADDR_EXP 18
6394: PUSH
6395: LD_EXP 18
6399: PPUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: LD_INT 0
6407: PPUSH
6408: CALL_OW 1
6412: ST_TO_ADDR
// for j = 1 to multi_teams do
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_EXP 21
6427: PUSH
6428: FOR_TO
6429: IFFALSE 6498
// begin if i in multi_teams [ j ] then
6431: LD_VAR 0 2
6435: PUSH
6436: LD_EXP 21
6440: PUSH
6441: LD_VAR 0 3
6445: ARRAY
6446: IN
6447: IFFALSE 6496
// begin tmp := multi_teams [ j ] diff i ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_EXP 21
6458: PUSH
6459: LD_VAR 0 3
6463: ARRAY
6464: PUSH
6465: LD_VAR 0 2
6469: DIFF
6470: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6471: LD_ADDR_EXP 21
6475: PUSH
6476: LD_EXP 21
6480: PPUSH
6481: LD_VAR 0 3
6485: PPUSH
6486: LD_VAR 0 5
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// end ; end ;
6496: GO 6428
6498: POP
6499: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6500: LD_EXP 20
6504: PUSH
6505: LD_VAR 0 2
6509: ARRAY
6510: PUSH
6511: LD_EXP 20
6515: PUSH
6516: LD_VAR 0 2
6520: ARRAY
6521: PUSH
6522: LD_EXP 24
6526: IN
6527: NOT
6528: AND
6529: IFFALSE 6570
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6531: LD_ADDR_EXP 20
6535: PUSH
6536: LD_EXP 20
6540: PPUSH
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_EXP 24
6550: PUSH
6551: LD_INT 1
6553: PPUSH
6554: LD_EXP 24
6558: PPUSH
6559: CALL_OW 12
6563: ARRAY
6564: PPUSH
6565: CALL_OW 1
6569: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6570: LD_EXP 20
6574: PUSH
6575: LD_VAR 0 2
6579: ARRAY
6580: NOT
6581: PUSH
6582: LD_EXP 18
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: NOT
6593: AND
6594: PUSH
6595: LD_EXP 22
6599: PUSH
6600: LD_VAR 0 2
6604: ARRAY
6605: NOT
6606: AND
6607: IFFALSE 6632
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6609: LD_ADDR_EXP 25
6613: PUSH
6614: LD_EXP 25
6618: PPUSH
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_INT 1
6626: PPUSH
6627: CALL_OW 1
6631: ST_TO_ADDR
// if multi_sides [ i ] then
6632: LD_EXP 18
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: IFFALSE 6658
// multi_players_amount := multi_players_amount + 1 ;
6644: LD_ADDR_EXP 37
6648: PUSH
6649: LD_EXP 37
6653: PUSH
6654: LD_INT 1
6656: PLUS
6657: ST_TO_ADDR
// end ;
6658: GO 6330
6660: POP
6661: POP
// for i in multi_teams do
6662: LD_ADDR_VAR 0 2
6666: PUSH
6667: LD_EXP 21
6671: PUSH
6672: FOR_IN
6673: IFFALSE 6781
// begin for j = 2 to i do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 2
6683: DEC
6684: ST_TO_ADDR
6685: LD_VAR 0 2
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6777
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6693: LD_VAR 0 2
6697: PUSH
6698: LD_VAR 0 3
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 2
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: PPUSH
6713: CALL_OW 343
// for x = 1 to j - 1 do
6717: LD_ADDR_VAR 0 4
6721: PUSH
6722: DOUBLE
6723: LD_INT 1
6725: DEC
6726: ST_TO_ADDR
6727: LD_VAR 0 3
6731: PUSH
6732: LD_INT 1
6734: MINUS
6735: PUSH
6736: FOR_TO
6737: IFFALSE 6773
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 3
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 4
6759: ARRAY
6760: PPUSH
6761: LD_INT 1
6763: PPUSH
6764: LD_INT 1
6766: PPUSH
6767: CALL_OW 80
6771: GO 6736
6773: POP
6774: POP
// end ;
6775: GO 6690
6777: POP
6778: POP
// end ;
6779: GO 6672
6781: POP
6782: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6783: LD_ADDR_OWVAR 67
6787: PUSH
6788: LD_INT 1
6790: PUSH
6791: LD_INT 2
6793: PUSH
6794: LD_INT 3
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: PUSH
6802: LD_EXP 28
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: ARRAY
6811: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6812: LD_ADDR_EXP 30
6816: PUSH
6817: LD_INT 9
6819: PUSH
6820: LD_INT 12
6822: PUSH
6823: LD_INT 15
6825: PUSH
6826: LD_INT 18
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_EXP 28
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: ARRAY
6844: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6845: LD_ADDR_EXP 31
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: LD_INT 5
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: LD_EXP 28
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: ARRAY
6877: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6878: LD_ADDR_EXP 32
6882: PUSH
6883: LD_INT 3000
6885: PUSH
6886: LD_INT 1120
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 5000
6895: PUSH
6896: LD_INT 770
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 6000
6905: PUSH
6906: LD_INT 490
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 8000
6915: PUSH
6916: LD_INT 420
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_EXP 28
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: ARRAY
6938: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
6939: LD_ADDR_EXP 33
6943: PUSH
6944: LD_INT 0
6946: PUSH
6947: LD_INT 1
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_EXP 28
6966: PUSH
6967: LD_INT 5
6969: ARRAY
6970: ARRAY
6971: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6972: LD_ADDR_EXP 34
6976: PUSH
6977: LD_INT 0
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: PUSH
6991: LD_EXP 28
6995: PUSH
6996: LD_INT 6
6998: ARRAY
6999: ARRAY
7000: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
7001: LD_ADDR_EXP 39
7005: PUSH
7006: LD_INT 10500
7008: PUSH
7009: LD_INT 31500
7011: PUSH
7012: LD_INT 52500
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_OWVAR 67
7024: ARRAY
7025: ST_TO_ADDR
// end ;
7026: LD_VAR 0 1
7030: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
// if not multi_sides [ preferSide ] then
7035: LD_EXP 18
7039: PUSH
7040: LD_VAR 0 1
7044: ARRAY
7045: NOT
7046: IFFALSE 7060
// begin result := preferSide ;
7048: LD_ADDR_VAR 0 2
7052: PUSH
7053: LD_VAR 0 1
7057: ST_TO_ADDR
// exit ;
7058: GO 7107
// end ; for i := 1 to 8 do
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: DOUBLE
7066: LD_INT 1
7068: DEC
7069: ST_TO_ADDR
7070: LD_INT 8
7072: PUSH
7073: FOR_TO
7074: IFFALSE 7105
// if not multi_sides [ i ] then
7076: LD_EXP 18
7080: PUSH
7081: LD_VAR 0 3
7085: ARRAY
7086: NOT
7087: IFFALSE 7103
// begin result := i ;
7089: LD_ADDR_VAR 0 2
7093: PUSH
7094: LD_VAR 0 3
7098: ST_TO_ADDR
// exit ;
7099: POP
7100: POP
7101: GO 7107
// end ;
7103: GO 7073
7105: POP
7106: POP
// end ;
7107: LD_VAR 0 2
7111: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7112: LD_INT 0
7114: PPUSH
// uc_side := side ;
7115: LD_ADDR_OWVAR 20
7119: PUSH
7120: LD_VAR 0 1
7124: ST_TO_ADDR
// uc_nation := nation_russian ;
7125: LD_ADDR_OWVAR 21
7129: PUSH
7130: LD_INT 3
7132: ST_TO_ADDR
// hc_importance := 100 ;
7133: LD_ADDR_OWVAR 32
7137: PUSH
7138: LD_INT 100
7140: ST_TO_ADDR
// if num = 1 then
7141: LD_VAR 0 2
7145: PUSH
7146: LD_INT 1
7148: EQUAL
7149: IFFALSE 7216
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7151: LD_INT 1
7153: PPUSH
7154: LD_EXP 31
7158: PUSH
7159: LD_INT 1
7161: PLUS
7162: PPUSH
7163: CALL_OW 381
// hc_gallery := ru ;
7167: LD_ADDR_OWVAR 33
7171: PUSH
7172: LD_STRING ru
7174: ST_TO_ADDR
// hc_face_number := 25 ;
7175: LD_ADDR_OWVAR 34
7179: PUSH
7180: LD_INT 25
7182: ST_TO_ADDR
// hc_name := Xavier ;
7183: LD_ADDR_OWVAR 26
7187: PUSH
7188: LD_STRING Xavier
7190: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7191: LD_ADDR_OWVAR 29
7195: PUSH
7196: LD_INT 12
7198: PUSH
7199: LD_INT 10
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
// result := CreateHuman ;
7206: LD_ADDR_VAR 0 3
7210: PUSH
7211: CALL_OW 44
7215: ST_TO_ADDR
// end ; if num = 2 then
7216: LD_VAR 0 2
7220: PUSH
7221: LD_INT 2
7223: EQUAL
7224: IFFALSE 7291
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7226: LD_INT 1
7228: PPUSH
7229: LD_EXP 31
7233: PUSH
7234: LD_INT 2
7236: PLUS
7237: PPUSH
7238: CALL_OW 383
// hc_gallery := ru ;
7242: LD_ADDR_OWVAR 33
7246: PUSH
7247: LD_STRING ru
7249: ST_TO_ADDR
// hc_face_number := 1 ;
7250: LD_ADDR_OWVAR 34
7254: PUSH
7255: LD_INT 1
7257: ST_TO_ADDR
// hc_name := Burlak ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_STRING Burlak
7265: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7266: LD_ADDR_OWVAR 29
7270: PUSH
7271: LD_INT 10
7273: PUSH
7274: LD_INT 11
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: ST_TO_ADDR
// result := CreateHuman ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: CALL_OW 44
7290: ST_TO_ADDR
// end ; if num = 3 then
7291: LD_VAR 0 2
7295: PUSH
7296: LD_INT 3
7298: EQUAL
7299: IFFALSE 7366
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7301: LD_INT 1
7303: PPUSH
7304: LD_EXP 31
7308: PUSH
7309: LD_INT 1
7311: PLUS
7312: PPUSH
7313: CALL_OW 381
// hc_gallery := ru ;
7317: LD_ADDR_OWVAR 33
7321: PUSH
7322: LD_STRING ru
7324: ST_TO_ADDR
// hc_face_number := 18 ;
7325: LD_ADDR_OWVAR 34
7329: PUSH
7330: LD_INT 18
7332: ST_TO_ADDR
// hc_name := Vsevolod ;
7333: LD_ADDR_OWVAR 26
7337: PUSH
7338: LD_STRING Vsevolod
7340: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7341: LD_ADDR_OWVAR 29
7345: PUSH
7346: LD_INT 12
7348: PUSH
7349: LD_INT 11
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: ST_TO_ADDR
// result := CreateHuman ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: CALL_OW 44
7365: ST_TO_ADDR
// end ; end ;
7366: LD_VAR 0 3
7370: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7371: LD_INT 0
7373: PPUSH
7374: PPUSH
7375: PPUSH
// if not multi_apeman then
7376: LD_EXP 33
7380: NOT
7381: IFFALSE 7385
// exit ;
7383: GO 7463
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_INT 6
7392: PUSH
7393: LD_INT 9
7395: PUSH
7396: LD_INT 12
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_EXP 33
7408: ARRAY
7409: ST_TO_ADDR
// for i := 1 to tmp do
7410: LD_ADDR_VAR 0 2
7414: PUSH
7415: DOUBLE
7416: LD_INT 1
7418: DEC
7419: ST_TO_ADDR
7420: LD_VAR 0 3
7424: PUSH
7425: FOR_TO
7426: IFFALSE 7461
// begin uc_side := 0 ;
7428: LD_ADDR_OWVAR 20
7432: PUSH
7433: LD_INT 0
7435: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7436: LD_INT 5
7438: NEG
7439: PPUSH
7440: CALL 49161 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7444: CALL_OW 44
7448: PPUSH
7449: LD_INT 21
7451: PPUSH
7452: LD_INT 0
7454: PPUSH
7455: CALL_OW 49
// end ;
7459: GO 7425
7461: POP
7462: POP
// end ;
7463: LD_VAR 0 1
7467: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// for i := 1 to 8 do
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: DOUBLE
7486: LD_INT 1
7488: DEC
7489: ST_TO_ADDR
7490: LD_INT 8
7492: PUSH
7493: FOR_TO
7494: IFFALSE 8674
// begin if not multi_sides [ i ] then
7496: LD_EXP 18
7500: PUSH
7501: LD_VAR 0 2
7505: ARRAY
7506: NOT
7507: IFFALSE 7511
// continue ;
7509: GO 7493
// if multi_buildings [ multi_sides [ i ] ] then
7511: LD_EXP 40
7515: PUSH
7516: LD_EXP 18
7520: PUSH
7521: LD_VAR 0 2
7525: ARRAY
7526: ARRAY
7527: IFFALSE 7761
// begin uc_side := i ;
7529: LD_ADDR_OWVAR 20
7533: PUSH
7534: LD_VAR 0 2
7538: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7539: LD_ADDR_OWVAR 21
7543: PUSH
7544: LD_EXP 20
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7555: LD_ADDR_VAR 0 3
7559: PUSH
7560: LD_EXP 40
7564: PUSH
7565: LD_EXP 18
7569: PUSH
7570: LD_VAR 0 2
7574: ARRAY
7575: ARRAY
7576: PUSH
7577: FOR_IN
7578: IFFALSE 7759
// begin bc_type := j [ 1 ] ;
7580: LD_ADDR_OWVAR 42
7584: PUSH
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 1
7592: ARRAY
7593: ST_TO_ADDR
// bc_level := 2 ;
7594: LD_ADDR_OWVAR 43
7598: PUSH
7599: LD_INT 2
7601: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7602: LD_ADDR_VAR 0 4
7606: PUSH
7607: LD_VAR 0 3
7611: PUSH
7612: LD_INT 2
7614: ARRAY
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_VAR 0 3
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_INT 2
7631: ARRAY
7632: PPUSH
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 2
7640: ARRAY
7641: PUSH
7642: LD_INT 3
7644: ARRAY
7645: PPUSH
7646: CALL_OW 47
7650: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7651: LD_VAR 0 3
7655: PUSH
7656: LD_INT 1
7658: ARRAY
7659: PUSH
7660: LD_INT 0
7662: EQUAL
7663: IFFALSE 7757
// begin SetBName ( b , j [ 3 ] ) ;
7665: LD_VAR 0 4
7669: PPUSH
7670: LD_VAR 0 3
7674: PUSH
7675: LD_INT 3
7677: ARRAY
7678: PPUSH
7679: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7683: LD_VAR 0 4
7687: PPUSH
7688: CALL_OW 274
7692: PPUSH
7693: LD_INT 1
7695: PPUSH
7696: LD_INT 120
7698: PUSH
7699: LD_INT 100
7701: PUSH
7702: LD_INT 80
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_OWVAR 67
7714: ARRAY
7715: PPUSH
7716: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7720: LD_VAR 0 4
7724: PPUSH
7725: CALL_OW 274
7729: PPUSH
7730: LD_INT 2
7732: PPUSH
7733: LD_INT 90
7735: PUSH
7736: LD_INT 60
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: PUSH
7747: LD_OWVAR 67
7751: ARRAY
7752: PPUSH
7753: CALL_OW 277
// end ; end ;
7757: GO 7577
7759: POP
7760: POP
// end ; if multi_custom_commanders then
7761: LD_EXP 27
7765: IFFALSE 7974
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7767: LD_ADDR_VAR 0 6
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: LD_EXP 18
7781: PUSH
7782: LD_VAR 0 2
7786: ARRAY
7787: PPUSH
7788: CALL 7112 0 2
7792: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7793: LD_ADDR_EXP 35
7797: PUSH
7798: LD_EXP 35
7802: PPUSH
7803: LD_EXP 35
7807: PUSH
7808: LD_INT 1
7810: PLUS
7811: PPUSH
7812: LD_VAR 0 6
7816: PPUSH
7817: CALL_OW 2
7821: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
7822: LD_VAR 0 6
7826: PPUSH
7827: CALL_OW 257
7831: PUSH
7832: LD_INT 3
7834: EQUAL
7835: IFFALSE 7939
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
7837: LD_INT 23
7839: PPUSH
7840: LD_INT 1
7842: PPUSH
7843: LD_INT 1
7845: PPUSH
7846: LD_INT 46
7848: PPUSH
7849: LD_INT 80
7851: PPUSH
7852: CALL 20042 0 5
// veh := CreateVehicle ;
7856: LD_ADDR_VAR 0 7
7860: PUSH
7861: CALL_OW 45
7865: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
7866: LD_VAR 0 7
7870: PPUSH
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 255
7880: PUSH
7881: LD_INT 1
7883: NEG
7884: MUL
7885: PPUSH
7886: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7890: LD_VAR 0 7
7894: PPUSH
7895: LD_EXP 23
7899: PUSH
7900: LD_EXP 18
7904: PUSH
7905: LD_VAR 0 2
7909: ARRAY
7910: ARRAY
7911: PUSH
7912: LD_INT 2
7914: ARRAY
7915: PPUSH
7916: LD_INT 0
7918: PPUSH
7919: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7923: LD_VAR 0 6
7927: PPUSH
7928: LD_VAR 0 7
7932: PPUSH
7933: CALL_OW 52
// end else
7937: GO 7972
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7939: LD_VAR 0 6
7943: PPUSH
7944: LD_EXP 23
7948: PUSH
7949: LD_EXP 18
7953: PUSH
7954: LD_VAR 0 2
7958: ARRAY
7959: ARRAY
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: CALL_OW 49
// end else
7972: GO 8185
// begin uc_side := i ;
7974: LD_ADDR_OWVAR 20
7978: PUSH
7979: LD_VAR 0 2
7983: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7984: LD_ADDR_OWVAR 21
7988: PUSH
7989: LD_EXP 20
7993: PUSH
7994: LD_VAR 0 2
7998: ARRAY
7999: ST_TO_ADDR
// hc_importance := 100 ;
8000: LD_ADDR_OWVAR 32
8004: PUSH
8005: LD_INT 100
8007: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
8008: LD_INT 0
8010: PPUSH
8011: LD_INT 1
8013: PPUSH
8014: LD_EXP 31
8018: PPUSH
8019: CALL_OW 380
// if multiplayer then
8023: LD_OWVAR 4
8027: IFFALSE 8085
// begin hc_name := mp_sides_players_names [ i ] ;
8029: LD_ADDR_OWVAR 26
8033: PUSH
8034: LD_OWVAR 19
8038: PUSH
8039: LD_VAR 0 2
8043: ARRAY
8044: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8045: LD_ADDR_OWVAR 33
8049: PUSH
8050: LD_STRING MULTIAVATARS
8052: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8053: LD_ADDR_OWVAR 34
8057: PUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 525
8067: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8068: LD_ADDR_OWVAR 27
8072: PUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 526
8082: ST_TO_ADDR
// end else
8083: GO 8117
// begin hc_gallery :=  ;
8085: LD_ADDR_OWVAR 33
8089: PUSH
8090: LD_STRING 
8092: ST_TO_ADDR
// hc_name :=  ;
8093: LD_ADDR_OWVAR 26
8097: PUSH
8098: LD_STRING 
8100: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8101: LD_ADDR_OWVAR 27
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 12
8116: ST_TO_ADDR
// end ; un := CreateHuman ;
8117: LD_ADDR_VAR 0 6
8121: PUSH
8122: CALL_OW 44
8126: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_EXP 23
8136: PUSH
8137: LD_EXP 18
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: ARRAY
8148: PUSH
8149: LD_INT 1
8151: ARRAY
8152: PPUSH
8153: LD_INT 0
8155: PPUSH
8156: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8160: LD_ADDR_EXP 35
8164: PUSH
8165: LD_EXP 35
8169: PPUSH
8170: LD_VAR 0 2
8174: PPUSH
8175: LD_VAR 0 6
8179: PPUSH
8180: CALL_OW 1
8184: ST_TO_ADDR
// end ; InitHc ;
8185: CALL_OW 19
// InitUc ;
8189: CALL_OW 18
// uc_side := i ;
8193: LD_ADDR_OWVAR 20
8197: PUSH
8198: LD_VAR 0 2
8202: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8203: LD_ADDR_OWVAR 21
8207: PUSH
8208: LD_EXP 20
8212: PUSH
8213: LD_VAR 0 2
8217: ARRAY
8218: ST_TO_ADDR
// hc_gallery :=  ;
8219: LD_ADDR_OWVAR 33
8223: PUSH
8224: LD_STRING 
8226: ST_TO_ADDR
// hc_name :=  ;
8227: LD_ADDR_OWVAR 26
8231: PUSH
8232: LD_STRING 
8234: ST_TO_ADDR
// hc_importance := 0 ;
8235: LD_ADDR_OWVAR 32
8239: PUSH
8240: LD_INT 0
8242: ST_TO_ADDR
// cl := 1 ;
8243: LD_ADDR_VAR 0 5
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: DOUBLE
8257: LD_INT 2
8259: DEC
8260: ST_TO_ADDR
8261: LD_EXP 30
8265: PUSH
8266: FOR_TO
8267: IFFALSE 8670
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 1
8276: MINUS
8277: PUSH
8278: LD_EXP 30
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: PUSH
8287: LD_INT 4
8289: DIVREAL
8290: MOD
8291: PUSH
8292: LD_INT 0
8294: EQUAL
8295: IFFALSE 8311
// cl := cl + 1 ;
8297: LD_ADDR_VAR 0 5
8301: PUSH
8302: LD_VAR 0 5
8306: PUSH
8307: LD_INT 1
8309: PLUS
8310: ST_TO_ADDR
// if cl > 4 then
8311: LD_VAR 0 5
8315: PUSH
8316: LD_INT 4
8318: GREATER
8319: IFFALSE 8329
// cl := 1 ;
8321: LD_ADDR_VAR 0 5
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8329: LD_INT 0
8331: PPUSH
8332: LD_VAR 0 5
8336: PPUSH
8337: LD_EXP 31
8341: PPUSH
8342: CALL_OW 380
// un := CreateHuman ;
8346: LD_ADDR_VAR 0 6
8350: PUSH
8351: CALL_OW 44
8355: ST_TO_ADDR
// if j > copy then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_VAR 0 9
8365: GREATER
8366: IFFALSE 8395
// copy := Replace ( copy , j , un ) else
8368: LD_ADDR_VAR 0 9
8372: PUSH
8373: LD_VAR 0 9
8377: PPUSH
8378: LD_VAR 0 3
8382: PPUSH
8383: LD_VAR 0 6
8387: PPUSH
8388: CALL_OW 1
8392: ST_TO_ADDR
8393: GO 8477
// begin CopySkills ( copy [ j ] , un ) ;
8395: LD_VAR 0 9
8399: PUSH
8400: LD_VAR 0 3
8404: ARRAY
8405: PPUSH
8406: LD_VAR 0 6
8410: PPUSH
8411: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8415: LD_VAR 0 6
8419: PPUSH
8420: LD_INT 2
8422: PPUSH
8423: LD_VAR 0 9
8427: PUSH
8428: LD_VAR 0 3
8432: ARRAY
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 260
8441: PPUSH
8442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8446: LD_VAR 0 6
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_VAR 0 9
8458: PUSH
8459: LD_VAR 0 3
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: CALL_OW 260
8472: PPUSH
8473: CALL_OW 239
// end ; if multi_pos_area then
8477: LD_EXP 23
8481: IFFALSE 8668
// begin if GetClass ( un ) = 3 then
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 257
8492: PUSH
8493: LD_INT 3
8495: EQUAL
8496: IFFALSE 8635
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8498: LD_INT 22
8500: PPUSH
8501: LD_INT 1
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_INT 44
8509: PUSH
8510: LD_INT 44
8512: PUSH
8513: LD_INT 43
8515: PUSH
8516: LD_INT 51
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: LD_VAR 0 3
8529: PUSH
8530: LD_INT 4
8532: MOD
8533: PUSH
8534: LD_INT 1
8536: PLUS
8537: ARRAY
8538: PPUSH
8539: LD_INT 80
8541: PPUSH
8542: CALL 20042 0 5
// veh := CreateVehicle ;
8546: LD_ADDR_VAR 0 7
8550: PUSH
8551: CALL_OW 45
8555: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8556: LD_VAR 0 7
8560: PPUSH
8561: LD_EXP 23
8565: PUSH
8566: LD_EXP 18
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: ARRAY
8577: PUSH
8578: LD_INT 2
8580: ARRAY
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8589: LD_VAR 0 6
8593: PPUSH
8594: LD_VAR 0 7
8598: PPUSH
8599: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8603: LD_VAR 0 7
8607: PPUSH
8608: CALL_OW 264
8612: PUSH
8613: LD_INT 51
8615: EQUAL
8616: IFFALSE 8633
// SetCargo ( veh , mat_cans , 100 ) ;
8618: LD_VAR 0 7
8622: PPUSH
8623: LD_INT 1
8625: PPUSH
8626: LD_INT 100
8628: PPUSH
8629: CALL_OW 290
// continue ;
8633: GO 8266
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8635: LD_VAR 0 6
8639: PPUSH
8640: LD_EXP 23
8644: PUSH
8645: LD_EXP 18
8649: PUSH
8650: LD_VAR 0 2
8654: ARRAY
8655: ARRAY
8656: PUSH
8657: LD_INT 1
8659: ARRAY
8660: PPUSH
8661: LD_INT 0
8663: PPUSH
8664: CALL_OW 49
// end ; end ;
8668: GO 8266
8670: POP
8671: POP
// end ;
8672: GO 7493
8674: POP
8675: POP
// end ;
8676: LD_VAR 0 1
8680: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8681: LD_INT 0
8683: PPUSH
8684: PPUSH
8685: PPUSH
8686: PPUSH
8687: PPUSH
// if not multi_support then
8688: LD_EXP 34
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8984
// result := [ ] ;
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: EMPTY
8703: ST_TO_ADDR
// for i := 1 to 8 do
8704: LD_ADDR_VAR 0 2
8708: PUSH
8709: DOUBLE
8710: LD_INT 1
8712: DEC
8713: ST_TO_ADDR
8714: LD_INT 8
8716: PUSH
8717: FOR_TO
8718: IFFALSE 8982
// begin result := Replace ( result , i , [ ] ) ;
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: EMPTY
8736: PPUSH
8737: CALL_OW 1
8741: ST_TO_ADDR
// if multi_sides [ i ] then
8742: LD_EXP 18
8746: PUSH
8747: LD_VAR 0 2
8751: ARRAY
8752: IFFALSE 8980
// begin tmp := [ ] ;
8754: LD_ADDR_VAR 0 5
8758: PUSH
8759: EMPTY
8760: ST_TO_ADDR
// if multi_support = 1 then
8761: LD_EXP 34
8765: PUSH
8766: LD_INT 1
8768: EQUAL
8769: IFFALSE 8858
// begin uc_side := i ;
8771: LD_ADDR_OWVAR 20
8775: PUSH
8776: LD_VAR 0 2
8780: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8781: LD_ADDR_OWVAR 21
8785: PUSH
8786: LD_EXP 20
8790: PUSH
8791: LD_VAR 0 2
8795: ARRAY
8796: ST_TO_ADDR
// for j := 1 to 2 do
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_INT 2
8809: PUSH
8810: FOR_TO
8811: IFFALSE 8856
// begin InitHC_All ( ) ;
8813: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8817: LD_INT 0
8819: PPUSH
8820: LD_INT 1
8822: PPUSH
8823: LD_INT 4
8825: PPUSH
8826: CALL_OW 12
8830: PPUSH
8831: LD_INT 1
8833: PPUSH
8834: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8838: LD_ADDR_VAR 0 5
8842: PUSH
8843: LD_VAR 0 5
8847: PUSH
8848: CALL_OW 44
8852: ADD
8853: ST_TO_ADDR
// end ;
8854: GO 8810
8856: POP
8857: POP
// end ; if multi_support = 2 then
8858: LD_EXP 34
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 8955
// begin uc_side := i ;
8868: LD_ADDR_OWVAR 20
8872: PUSH
8873: LD_VAR 0 2
8877: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8878: LD_ADDR_OWVAR 21
8882: PUSH
8883: LD_EXP 20
8887: PUSH
8888: LD_VAR 0 2
8892: ARRAY
8893: ST_TO_ADDR
// for j := 1 to 4 do
8894: LD_ADDR_VAR 0 3
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 4
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8953
// begin InitHC_All ( ) ;
8910: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8914: LD_INT 0
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_INT 4
8922: PPUSH
8923: CALL_OW 12
8927: PPUSH
8928: LD_INT 2
8930: PPUSH
8931: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: LD_VAR 0 5
8944: PUSH
8945: CALL_OW 44
8949: ADD
8950: ST_TO_ADDR
// end ;
8951: GO 8907
8953: POP
8954: POP
// end ; result := Replace ( result , i , tmp ) ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_VAR 0 1
8964: PPUSH
8965: LD_VAR 0 2
8969: PPUSH
8970: LD_VAR 0 5
8974: PPUSH
8975: CALL_OW 1
8979: ST_TO_ADDR
// end ; end ;
8980: GO 8717
8982: POP
8983: POP
// end ;
8984: LD_VAR 0 1
8988: RET
// export function Multiplayer_Start ( ) ; begin
8989: LD_INT 0
8991: PPUSH
// Multiplayer_PrepareApemans ( ) ;
8992: CALL 7371 0 0
// Multiplayer_PreparePlayers ( ) ;
8996: CALL 7468 0 0
// Multiplayer_InitPointSystem ( ) ;
9000: CALL 9730 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
9004: LD_INT 20
9006: PPUSH
9007: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
9011: LD_INT 150
9013: PPUSH
9014: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
9018: LD_INT 5
9020: PPUSH
9021: CALL 9906 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9025: LD_INT 40
9027: NEG
9028: PPUSH
9029: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9033: LD_INT 200
9035: PPUSH
9036: CALL 9906 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9040: LD_INT 2
9042: PPUSH
9043: CALL 9906 0 1
// if multi_support then
9047: LD_EXP 34
9051: IFFALSE 9063
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9053: LD_ADDR_EXP 38
9057: PUSH
9058: CALL 8681 0 0
9062: ST_TO_ADDR
// if multi_sides [ your_side ] then
9063: LD_EXP 18
9067: PUSH
9068: LD_OWVAR 2
9072: ARRAY
9073: IFFALSE 9100
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9075: LD_INT 22
9077: PUSH
9078: LD_OWVAR 2
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PPUSH
9087: CALL_OW 69
9091: PUSH
9092: LD_INT 1
9094: ARRAY
9095: PPUSH
9096: CALL_OW 87
// end ;
9100: LD_VAR 0 1
9104: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
// repeat wait ( 0 0$1 ) ;
9110: LD_INT 35
9112: PPUSH
9113: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9117: LD_OWVAR 1
9121: PUSH
9122: LD_EXP 39
9126: GREATER
9127: PUSH
9128: LD_EXP 34
9132: AND
9133: IFFALSE 9298
// begin if tick mod 1 1$00 = 0 then
9135: LD_OWVAR 1
9139: PUSH
9140: LD_INT 2100
9142: MOD
9143: PUSH
9144: LD_INT 0
9146: EQUAL
9147: IFFALSE 9298
// begin for i := 1 to 8 do
9149: LD_ADDR_VAR 0 2
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_INT 8
9161: PUSH
9162: FOR_TO
9163: IFFALSE 9296
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9165: LD_EXP 18
9169: PUSH
9170: LD_VAR 0 2
9174: ARRAY
9175: PUSH
9176: LD_EXP 36
9180: PUSH
9181: LD_VAR 0 2
9185: ARRAY
9186: NOT
9187: AND
9188: PUSH
9189: LD_EXP 38
9193: PUSH
9194: LD_VAR 0 2
9198: ARRAY
9199: AND
9200: PUSH
9201: LD_INT 80
9203: PUSH
9204: LD_INT 60
9206: PUSH
9207: LD_INT 40
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_OWVAR 67
9219: ARRAY
9220: PPUSH
9221: CALL_OW 13
9225: AND
9226: IFFALSE 9294
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9228: LD_EXP 38
9232: PUSH
9233: LD_VAR 0 2
9237: ARRAY
9238: PUSH
9239: LD_INT 1
9241: ARRAY
9242: PPUSH
9243: LD_INT 11
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9253: LD_ADDR_EXP 38
9257: PUSH
9258: LD_EXP 38
9262: PPUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_EXP 38
9272: PUSH
9273: LD_VAR 0 2
9277: ARRAY
9278: PPUSH
9279: LD_INT 1
9281: PPUSH
9282: CALL_OW 3
9286: PPUSH
9287: CALL_OW 1
9291: ST_TO_ADDR
// break ;
9292: GO 9296
// end ; end ;
9294: GO 9162
9296: POP
9297: POP
// end ; end ; if not multi_custom_commanders then
9298: LD_EXP 27
9302: NOT
9303: IFFALSE 9416
// begin for i := 1 to 8 do
9305: LD_ADDR_VAR 0 2
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_INT 8
9317: PUSH
9318: FOR_TO
9319: IFFALSE 9390
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9321: LD_INT 22
9323: PUSH
9324: LD_VAR 0 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PPUSH
9333: CALL_OW 69
9337: PUSH
9338: LD_INT 0
9340: EQUAL
9341: PUSH
9342: LD_EXP 36
9346: PUSH
9347: LD_VAR 0 2
9351: ARRAY
9352: NOT
9353: AND
9354: IFFALSE 9388
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9356: LD_ADDR_EXP 36
9360: PUSH
9361: LD_EXP 36
9365: PPUSH
9366: LD_VAR 0 2
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 1
9378: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9379: LD_VAR 0 2
9383: PPUSH
9384: CALL 9976 0 1
// end ; end ;
9388: GO 9318
9390: POP
9391: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9392: LD_EXP 36
9396: PPUSH
9397: CALL 17304 0 1
9401: PUSH
9402: LD_EXP 18
9406: PPUSH
9407: CALL 17304 0 1
9411: EQUAL
9412: IFFALSE 9416
// break ;
9414: GO 9436
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9416: CALL 9550 0 0
9420: NOT
9421: PUSH
9422: LD_EXP 2
9426: AND
9427: PUSH
9428: LD_EXP 35
9432: NOT
9433: OR
9434: IFFALSE 9110
// game := false ;
9436: LD_ADDR_EXP 2
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// for i := 1 to 8 do
9444: LD_ADDR_VAR 0 2
9448: PUSH
9449: DOUBLE
9450: LD_INT 1
9452: DEC
9453: ST_TO_ADDR
9454: LD_INT 8
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9494
// begin if multi_sides [ i ] then
9460: LD_EXP 18
9464: PUSH
9465: LD_VAR 0 2
9469: ARRAY
9470: IFFALSE 9492
// SetMultiScore ( i , multi_points [ i ] ) ;
9472: LD_VAR 0 2
9476: PPUSH
9477: LD_EXP 41
9481: PUSH
9482: LD_VAR 0 2
9486: ARRAY
9487: PPUSH
9488: CALL_OW 506
// end ;
9492: GO 9457
9494: POP
9495: POP
// if multi_loosers [ your_side ] then
9496: LD_EXP 36
9500: PUSH
9501: LD_OWVAR 2
9505: ARRAY
9506: IFFALSE 9529
// begin if Multiplayer then
9508: LD_OWVAR 4
9512: IFFALSE 9520
// YouLostInMultiplayer else
9514: CALL_OW 107
9518: GO 9527
// YouLost (  ) ;
9520: LD_STRING 
9522: PPUSH
9523: CALL_OW 104
// end else
9527: GO 9545
// begin if Multiplayer then
9529: LD_OWVAR 4
9533: IFFALSE 9541
// YouWinInMultiplayer else
9535: CALL_OW 106
9539: GO 9545
// YouWin ;
9541: CALL_OW 103
// end ; end ;
9545: LD_VAR 0 1
9549: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// result := false ;
9554: LD_ADDR_VAR 0 1
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// for side in botSides do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: LD_EXP 3
9571: PUSH
9572: FOR_IN
9573: IFFALSE 9634
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9575: LD_ADDR_VAR 0 1
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_VAR 0 2
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 50
9604: PUSH
9605: EMPTY
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: PPUSH
9613: CALL_OW 69
9617: PUSH
9618: LD_INT 0
9620: GREATER
9621: ST_TO_ADDR
// if result then
9622: LD_VAR 0 1
9626: IFFALSE 9632
// exit ;
9628: POP
9629: POP
9630: GO 9636
// end ;
9632: GO 9572
9634: POP
9635: POP
// end ;
9636: LD_VAR 0 1
9640: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
// result := [ ] ;
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: EMPTY
9651: ST_TO_ADDR
// for i := 1 to 8 do
9652: LD_ADDR_VAR 0 2
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9723
// begin if multi_sides [ i ] then
9668: LD_EXP 18
9672: PUSH
9673: LD_VAR 0 2
9677: ARRAY
9678: IFFALSE 9721
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 1
9689: PUSH
9690: LD_STRING #coop-points
9692: PUSH
9693: LD_VAR 0 2
9697: PUSH
9698: LD_VAR 0 2
9702: PUSH
9703: LD_EXP 41
9707: PUSH
9708: LD_VAR 0 2
9712: ARRAY
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: ADD
9720: ST_TO_ADDR
// end ; end ;
9721: GO 9665
9723: POP
9724: POP
// end ;
9725: LD_VAR 0 1
9729: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9730: LD_INT 0
9732: PPUSH
9733: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9734: LD_ADDR_EXP 41
9738: PUSH
9739: LD_INT 0
9741: PUSH
9742: LD_INT 0
9744: PUSH
9745: LD_INT 0
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 0
9753: PUSH
9754: LD_INT 0
9756: PUSH
9757: LD_INT 0
9759: PUSH
9760: LD_INT 0
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9773: LD_ADDR_EXP 42
9777: PUSH
9778: EMPTY
9779: ST_TO_ADDR
// end ;
9780: LD_VAR 0 1
9784: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9785: LD_INT 0
9787: PPUSH
// if not multi_points or not side or side > 8 then
9788: LD_EXP 41
9792: NOT
9793: PUSH
9794: LD_VAR 0 1
9798: NOT
9799: OR
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_INT 8
9808: GREATER
9809: OR
9810: IFFALSE 9814
// exit ;
9812: GO 9851
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9814: LD_ADDR_EXP 41
9818: PUSH
9819: LD_EXP 41
9823: PPUSH
9824: LD_VAR 0 1
9828: PPUSH
9829: LD_EXP 41
9833: PUSH
9834: LD_VAR 0 1
9838: ARRAY
9839: PUSH
9840: LD_VAR 0 2
9844: PLUS
9845: PPUSH
9846: CALL_OW 1
9850: ST_TO_ADDR
// end ;
9851: LD_VAR 0 3
9855: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9856: LD_INT 0
9858: PPUSH
// if not multi_points or not side or side > 8 then
9859: LD_EXP 41
9863: NOT
9864: PUSH
9865: LD_VAR 0 1
9869: NOT
9870: OR
9871: PUSH
9872: LD_VAR 0 1
9876: PUSH
9877: LD_INT 8
9879: GREATER
9880: OR
9881: IFFALSE 9885
// exit ;
9883: GO 9901
// result := multi_points [ side ] ;
9885: LD_ADDR_VAR 0 2
9889: PUSH
9890: LD_EXP 41
9894: PUSH
9895: LD_VAR 0 1
9899: ARRAY
9900: ST_TO_ADDR
// end ;
9901: LD_VAR 0 2
9905: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9906: LD_INT 0
9908: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9909: LD_ADDR_EXP 42
9913: PUSH
9914: LD_EXP 42
9918: PPUSH
9919: LD_EXP 42
9923: PUSH
9924: LD_INT 1
9926: PLUS
9927: PPUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: CALL_OW 1
9937: ST_TO_ADDR
// end ;
9938: LD_VAR 0 2
9942: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9943: LD_INT 0
9945: PPUSH
// if not id then
9946: LD_VAR 0 1
9950: NOT
9951: IFFALSE 9955
// exit ;
9953: GO 9971
// result := multi_points_conditions [ id ] ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_EXP 42
9964: PUSH
9965: LD_VAR 0 1
9969: ARRAY
9970: ST_TO_ADDR
// end ;
9971: LD_VAR 0 2
9975: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9976: LD_INT 0
9978: PPUSH
9979: PPUSH
9980: PPUSH
9981: PPUSH
9982: PPUSH
// players := [ ] ;
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// for i = 1 to 8 do
9990: LD_ADDR_VAR 0 4
9994: PUSH
9995: DOUBLE
9996: LD_INT 1
9998: DEC
9999: ST_TO_ADDR
10000: LD_INT 8
10002: PUSH
10003: FOR_TO
10004: IFFALSE 10063
// begin if i = side then
10006: LD_VAR 0 4
10010: PUSH
10011: LD_VAR 0 1
10015: EQUAL
10016: IFFALSE 10020
// continue ;
10018: GO 10003
// if multi_sides [ i ] and not multi_loosers [ i ] then
10020: LD_EXP 18
10024: PUSH
10025: LD_VAR 0 4
10029: ARRAY
10030: PUSH
10031: LD_EXP 36
10035: PUSH
10036: LD_VAR 0 4
10040: ARRAY
10041: NOT
10042: AND
10043: IFFALSE 10061
// players := players ^ i ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: LD_VAR 0 3
10054: PUSH
10055: LD_VAR 0 4
10059: ADD
10060: ST_TO_ADDR
// end ;
10061: GO 10003
10063: POP
10064: POP
// if not players then
10065: LD_VAR 0 3
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10341
// if players = 1 then
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: EQUAL
10082: IFFALSE 10143
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_VAR 0 1
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 51
10103: PUSH
10104: EMPTY
10105: LIST
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10139
// SetSide ( i , players [ 1 ] ) ;
10119: LD_VAR 0 4
10123: PPUSH
10124: LD_VAR 0 3
10128: PUSH
10129: LD_INT 1
10131: ARRAY
10132: PPUSH
10133: CALL_OW 235
10137: GO 10116
10139: POP
10140: POP
// end else
10141: GO 10341
// begin j := 1 ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10151: LD_ADDR_VAR 0 4
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_VAR 0 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 1
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 51
10183: PUSH
10184: EMPTY
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 21
10193: PUSH
10194: LD_INT 2
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 69
10214: PUSH
10215: FOR_IN
10216: IFFALSE 10339
// begin SetSide ( i , players [ j ] ) ;
10218: LD_VAR 0 4
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_VAR 0 5
10232: ARRAY
10233: PPUSH
10234: CALL_OW 235
// if IsDrivenBy ( i ) then
10238: LD_VAR 0 4
10242: PPUSH
10243: CALL_OW 311
10247: IFFALSE 10274
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10249: LD_VAR 0 4
10253: PPUSH
10254: CALL_OW 311
10258: PPUSH
10259: LD_VAR 0 3
10263: PUSH
10264: LD_VAR 0 5
10268: ARRAY
10269: PPUSH
10270: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10274: LD_VAR 0 4
10278: PPUSH
10279: CALL_OW 310
10283: PPUSH
10284: CALL_OW 247
10288: PUSH
10289: LD_INT 3
10291: EQUAL
10292: IFFALSE 10303
// ComExitBuilding ( i ) ;
10294: LD_VAR 0 4
10298: PPUSH
10299: CALL_OW 122
// j := j + 1 ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 5
10312: PUSH
10313: LD_INT 1
10315: PLUS
10316: ST_TO_ADDR
// if j > players then
10317: LD_VAR 0 5
10321: PUSH
10322: LD_VAR 0 3
10326: GREATER
10327: IFFALSE 10337
// j := 1 ;
10329: LD_ADDR_VAR 0 5
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// end ;
10337: GO 10215
10339: POP
10340: POP
// end ; end ;
10341: LD_VAR 0 2
10345: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// i := 3 ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_INT 3
10358: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: LD_INT 5
10366: PUSH
10367: LD_INT 10
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 120
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 101
10386: PUSH
10387: LD_INT 8
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 27
10396: PUSH
10397: LD_INT 4
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10410: LD_INT 4
10412: PPUSH
10413: LD_INT 5
10415: PPUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_VAR 0 2
10425: ARRAY
10426: PUSH
10427: LD_INT 1
10429: ARRAY
10430: PPUSH
10431: LD_VAR 0 3
10435: PUSH
10436: LD_VAR 0 2
10440: ARRAY
10441: PUSH
10442: LD_INT 2
10444: ARRAY
10445: PPUSH
10446: LD_INT 0
10448: PPUSH
10449: CALL_OW 58
// end ;
10453: LD_VAR 0 1
10457: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10458: LD_INT 0
10460: PPUSH
// if not side or side > 8 then
10461: LD_VAR 0 1
10465: NOT
10466: PUSH
10467: LD_VAR 0 1
10471: PUSH
10472: LD_INT 8
10474: GREATER
10475: OR
10476: IFFALSE 10480
// exit ;
10478: GO 10497
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 6
10487: PPUSH
10488: CALL 9943 0 1
10492: PPUSH
10493: CALL 9785 0 2
// end ;
10497: LD_VAR 0 2
10501: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10502: LD_INT 0
10504: PPUSH
// if not side or side > 8 then
10505: LD_VAR 0 1
10509: NOT
10510: PUSH
10511: LD_VAR 0 1
10515: PUSH
10516: LD_INT 8
10518: GREATER
10519: OR
10520: IFFALSE 10524
// exit ;
10522: GO 10541
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 4
10531: PPUSH
10532: CALL 9943 0 1
10536: PPUSH
10537: CALL 9785 0 2
// end ;
10541: LD_VAR 0 2
10545: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10546: LD_INT 0
10548: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10549: LD_VAR 0 1
10553: NOT
10554: PUSH
10555: LD_VAR 0 1
10559: PUSH
10560: LD_INT 8
10562: GREATER
10563: OR
10564: PUSH
10565: LD_VAR 0 2
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 36
10578: PUSH
10579: LD_INT 0
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: IN
10588: NOT
10589: OR
10590: IFFALSE 10594
// exit ;
10592: GO 10611
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10594: LD_VAR 0 1
10598: PPUSH
10599: LD_INT 3
10601: PPUSH
10602: CALL 9943 0 1
10606: PPUSH
10607: CALL 9785 0 2
// end ;
10611: LD_VAR 0 3
10615: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10616: LD_INT 0
10618: PPUSH
10619: PPUSH
// if not un then
10620: LD_VAR 0 1
10624: NOT
10625: IFFALSE 10629
// exit ;
10627: GO 10675
// if not points then
10629: LD_VAR 0 3
10633: NOT
10634: IFFALSE 10651
// gained_points := Multiplayer_GetCondition ( 1 ) else
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL 9943 0 1
10648: ST_TO_ADDR
10649: GO 10661
// gained_points := points ;
10651: LD_ADDR_VAR 0 5
10655: PUSH
10656: LD_VAR 0 3
10660: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: CALL 9785 0 2
10675: LD_VAR 0 4
10679: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10680: LD_INT 0
10682: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_INT 2
10690: PPUSH
10691: CALL 9943 0 1
10695: PPUSH
10696: CALL 9785 0 2
// end ; end_of_file
10700: LD_VAR 0 2
10704: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10705: LD_VAR 0 1
10709: PPUSH
10710: CALL_OW 255
10714: PUSH
10715: LD_EXP 3
10719: IN
10720: NOT
10721: IFFALSE 10725
// exit ;
10723: GO 10742
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10725: LD_VAR 0 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PPUSH
10735: LD_INT 0
10737: PPUSH
10738: CALL 10616 0 3
// end ;
10742: PPOPN 3
10744: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10745: LD_INT 0
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL 73796 0 1
// side := GetSide ( un ) ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_VAR 0 1
10775: PPUSH
10776: CALL_OW 255
10780: ST_TO_ADDR
// if multi_sides [ side ] then
10781: LD_EXP 18
10785: PUSH
10786: LD_VAR 0 3
10790: ARRAY
10791: IFFALSE 10817
// if GetType ( un ) = unit_human then
10793: LD_VAR 0 1
10797: PPUSH
10798: CALL_OW 247
10802: PUSH
10803: LD_INT 1
10805: EQUAL
10806: IFFALSE 10817
// MultiplayerEvent_HumanLost ( side ) ;
10808: LD_VAR 0 3
10812: PPUSH
10813: CALL 10502 0 1
// if side in botSides then
10817: LD_VAR 0 3
10821: PUSH
10822: LD_EXP 3
10826: IN
10827: IFFALSE 11320
// begin if side = botSides [ 1 ] then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_EXP 3
10838: PUSH
10839: LD_INT 1
10841: ARRAY
10842: EQUAL
10843: IFFALSE 11320
// begin if un in arForce then
10845: LD_VAR 0 1
10849: PUSH
10850: LD_EXP 14
10854: IN
10855: IFFALSE 10873
// arForce := arForce diff un ;
10857: LD_ADDR_EXP 14
10861: PUSH
10862: LD_EXP 14
10866: PUSH
10867: LD_VAR 0 1
10871: DIFF
10872: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
10873: LD_VAR 0 1
10877: PUSH
10878: LD_EXP 8
10882: IN
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 9
10893: IN
10894: OR
10895: IFFALSE 10989
// begin arVehicles := arVehicles diff un ;
10897: LD_ADDR_EXP 8
10901: PUSH
10902: LD_EXP 8
10906: PUSH
10907: LD_VAR 0 1
10911: DIFF
10912: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
10913: LD_ADDR_EXP 9
10917: PUSH
10918: LD_EXP 9
10922: PUSH
10923: LD_VAR 0 1
10927: DIFF
10928: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
10929: LD_ADDR_EXP 6
10933: PUSH
10934: LD_EXP 6
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 265
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 262
10958: PUSH
10959: LD_VAR 0 1
10963: PPUSH
10964: CALL_OW 263
10968: PUSH
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 264
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: ADD
10988: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10989: LD_VAR 0 1
10993: PPUSH
10994: CALL_OW 257
10998: PUSH
10999: LD_INT 3
11001: EQUAL
11002: PUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 110
11012: PUSH
11013: LD_INT 999
11015: LESS
11016: AND
11017: PUSH
11018: LD_EXP 11
11022: AND
11023: IFFALSE 11164
// begin if not IsOk ( arDep ) then
11025: LD_INT 2
11027: PPUSH
11028: CALL_OW 302
11032: NOT
11033: IFFALSE 11037
// exit ;
11035: GO 11392
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11037: LD_ADDR_EXP 11
11041: PUSH
11042: LD_EXP 11
11046: PPUSH
11047: CALL 54276 0 1
11051: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11052: LD_ADDR_OWVAR 20
11056: PUSH
11057: LD_EXP 3
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: ST_TO_ADDR
// uc_nation := nation_arabian ;
11066: LD_ADDR_OWVAR 21
11070: PUSH
11071: LD_INT 2
11073: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
11074: LD_INT 0
11076: PPUSH
11077: LD_INT 1
11079: PUSH
11080: LD_INT 2
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_OWVAR 67
11095: ARRAY
11096: PPUSH
11097: CALL_OW 383
// un := CreateHuman ;
11101: LD_ADDR_VAR 0 1
11105: PUSH
11106: CALL_OW 44
11110: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11111: LD_VAR 0 1
11115: PPUSH
11116: LD_INT 143
11118: PPUSH
11119: LD_INT 29
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: LD_INT 115
11136: PPUSH
11137: LD_INT 52
11139: PPUSH
11140: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11144: LD_ADDR_EXP 14
11148: PUSH
11149: LD_EXP 14
11153: PPUSH
11154: LD_VAR 0 1
11158: PPUSH
11159: CALL 52893 0 2
11163: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 247
11173: PUSH
11174: LD_INT 3
11176: EQUAL
11177: IFFALSE 11320
// begin btype := GetBType ( un ) ;
11179: LD_ADDR_VAR 0 11
11183: PUSH
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 266
11193: ST_TO_ADDR
// if btype = b_barracks then
11194: LD_VAR 0 11
11198: PUSH
11199: LD_INT 5
11201: EQUAL
11202: IFFALSE 11212
// btype := b_armoury ;
11204: LD_ADDR_VAR 0 11
11208: PUSH
11209: LD_INT 4
11211: ST_TO_ADDR
// if btype = b_factory then
11212: LD_VAR 0 11
11216: PUSH
11217: LD_INT 3
11219: EQUAL
11220: IFFALSE 11230
// btype := b_workshop ;
11222: LD_ADDR_VAR 0 11
11226: PUSH
11227: LD_INT 2
11229: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11230: LD_VAR 0 11
11234: PUSH
11235: LD_INT 8
11237: PUSH
11238: LD_INT 7
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: IN
11245: IFFALSE 11255
// btype := b_lab ;
11247: LD_ADDR_VAR 0 11
11251: PUSH
11252: LD_INT 6
11254: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11255: LD_ADDR_EXP 7
11259: PUSH
11260: LD_EXP 7
11264: PPUSH
11265: LD_EXP 7
11269: PUSH
11270: LD_INT 1
11272: PLUS
11273: PPUSH
11274: LD_VAR 0 11
11278: PUSH
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 250
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 251
11298: PUSH
11299: LD_VAR 0 1
11303: PPUSH
11304: CALL_OW 254
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: PPUSH
11315: CALL_OW 1
11319: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11320: LD_EXP 35
11324: PUSH
11325: LD_EXP 27
11329: AND
11330: IFFALSE 11392
// if un in multi_commanders then
11332: LD_VAR 0 1
11336: PUSH
11337: LD_EXP 35
11341: IN
11342: IFFALSE 11392
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11344: LD_ADDR_EXP 36
11348: PUSH
11349: LD_EXP 36
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 1
11366: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11367: LD_ADDR_EXP 35
11371: PUSH
11372: LD_EXP 35
11376: PUSH
11377: LD_VAR 0 1
11381: DIFF
11382: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11383: LD_VAR 0 3
11387: PPUSH
11388: CALL 9976 0 1
// end ; end ;
11392: PPOPN 11
11394: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11395: LD_INT 0
11397: PPUSH
11398: PPUSH
11399: PPUSH
11400: PPUSH
// begin side := GetSide ( building ) ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_VAR 0 1
11410: PPUSH
11411: CALL_OW 255
11415: ST_TO_ADDR
// if multi_sides [ side ] then
11416: LD_EXP 18
11420: PUSH
11421: LD_VAR 0 4
11425: ARRAY
11426: IFFALSE 11447
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11428: LD_VAR 0 4
11432: PPUSH
11433: LD_VAR 0 1
11437: PPUSH
11438: CALL_OW 266
11442: PPUSH
11443: CALL 10546 0 2
// if side = botSides [ 1 ] then
11447: LD_VAR 0 4
11451: PUSH
11452: LD_EXP 3
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: EQUAL
11461: IFFALSE 11557
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11463: LD_ADDR_EXP 7
11467: PUSH
11468: LD_EXP 7
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 3
11480: ST_TO_ADDR
// btype := GetBType ( building ) ;
11481: LD_ADDR_VAR 0 5
11485: PUSH
11486: LD_VAR 0 1
11490: PPUSH
11491: CALL_OW 266
11495: ST_TO_ADDR
// case btype of b_workshop :
11496: LD_VAR 0 5
11500: PUSH
11501: LD_INT 2
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11521
11509: POP
// ComUpgrade ( building ) ; b_lab :
11510: LD_VAR 0 1
11514: PPUSH
11515: CALL_OW 146
11519: GO 11557
11521: LD_INT 6
11523: DOUBLE
11524: EQUAL
11525: IFTRUE 11529
11527: GO 11556
11529: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11530: LD_VAR 0 1
11534: PPUSH
11535: LD_INT 10
11537: PPUSH
11538: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11542: LD_VAR 0 1
11546: PPUSH
11547: LD_INT 15
11549: PPUSH
11550: CALL_OW 207
// end ; end ;
11554: GO 11557
11556: POP
// end ; end ;
11557: PPOPN 5
11559: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11560: LD_VAR 0 1
11564: PUSH
11565: LD_INT 22
11567: PUSH
11568: LD_EXP 3
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PPUSH
11595: CALL_OW 69
11599: IN
11600: IFFALSE 11611
// ComUnlink ( un ) ;
11602: LD_VAR 0 1
11606: PPUSH
11607: CALL_OW 136
// end ;
11611: PPOPN 1
11613: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11614: LD_VAR 0 2
11618: PPUSH
11619: CALL_OW 255
11623: PUSH
11624: LD_EXP 3
11628: IN
11629: NOT
11630: IFFALSE 11634
// exit ;
11632: GO 11697
// if unit in arForceTmp then
11634: LD_VAR 0 2
11638: PUSH
11639: LD_EXP 15
11643: IN
11644: IFFALSE 11697
// begin arForceTmp := arForceTmp diff unit ;
11646: LD_ADDR_EXP 15
11650: PUSH
11651: LD_EXP 15
11655: PUSH
11656: LD_VAR 0 2
11660: DIFF
11661: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11662: LD_ADDR_EXP 14
11666: PUSH
11667: LD_EXP 14
11671: PPUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL 52893 0 2
11681: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11682: LD_VAR 0 2
11686: PPUSH
11687: LD_INT 103
11689: PPUSH
11690: LD_INT 54
11692: PPUSH
11693: CALL_OW 111
// end ; end ;
11697: PPOPN 2
11699: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
11707: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 2
11717: PPUSH
11718: CALL 73916 0 2
// side := GetSide ( vehicle ) ;
11722: LD_ADDR_VAR 0 4
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 255
11736: ST_TO_ADDR
// if multi_sides [ side ] then
11737: LD_EXP 18
11741: PUSH
11742: LD_VAR 0 4
11746: ARRAY
11747: IFFALSE 11758
// MultiplayerEvent_Produced ( side ) ;
11749: LD_VAR 0 4
11753: PPUSH
11754: CALL 10458 0 1
// if side = botSides [ 1 ] then
11758: LD_VAR 0 4
11762: PUSH
11763: LD_EXP 3
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: EQUAL
11772: IFFALSE 11968
// begin driver := IsDrivenBy ( vehicle ) ;
11774: LD_ADDR_VAR 0 8
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: CALL_OW 311
11788: ST_TO_ADDR
// if driver then
11789: LD_VAR 0 8
11793: IFFALSE 11827
// begin SetTag ( driver , tMech ) ;
11795: LD_VAR 0 8
11799: PPUSH
11800: LD_INT 7
11802: PPUSH
11803: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
11807: LD_ADDR_EXP 10
11811: PUSH
11812: LD_EXP 10
11816: PPUSH
11817: LD_VAR 0 8
11821: PPUSH
11822: CALL 52893 0 2
11826: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 263
11836: PUSH
11837: LD_INT 2
11839: EQUAL
11840: PUSH
11841: LD_VAR 0 1
11845: PPUSH
11846: CALL_OW 264
11850: PUSH
11851: LD_INT 32
11853: PUSH
11854: LD_INT 88
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: IN
11861: NOT
11862: AND
11863: IFFALSE 11887
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
11865: LD_ADDR_EXP 16
11869: PUSH
11870: LD_EXP 16
11874: PPUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: CALL 52893 0 2
11884: ST_TO_ADDR
// exit ;
11885: GO 11968
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11887: LD_EXP 12
11891: PUSH
11892: LD_EXP 8
11896: PPUSH
11897: CALL 17304 0 1
11901: GREATER
11902: PUSH
11903: LD_VAR 0 1
11907: PPUSH
11908: CALL_OW 264
11912: PUSH
11913: LD_INT 32
11915: PUSH
11916: LD_INT 88
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: IN
11923: OR
11924: IFFALSE 11948
// arVehicles := Join ( arVehicles , vehicle ) else
11926: LD_ADDR_EXP 8
11930: PUSH
11931: LD_EXP 8
11935: PPUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL 52893 0 2
11945: ST_TO_ADDR
11946: GO 11968
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
11948: LD_ADDR_EXP 9
11952: PUSH
11953: LD_EXP 9
11957: PPUSH
11958: LD_VAR 0 1
11962: PPUSH
11963: CALL 52893 0 2
11967: ST_TO_ADDR
// end ; end ;
11968: PPOPN 8
11970: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 110
11980: PUSH
11981: LD_INT 7
11983: EQUAL
11984: IFFALSE 11998
// SetTag ( driver , 0 ) ;
11986: LD_VAR 0 1
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL_OW 109
// end ;
11998: PPOPN 4
12000: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
12001: LD_VAR 0 2
12005: PPUSH
12006: CALL_OW 255
12010: PUSH
12011: LD_EXP 3
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: EQUAL
12020: IFFALSE 12050
// if tech in arTech then
12022: LD_VAR 0 1
12026: PUSH
12027: LD_EXP 5
12031: IN
12032: IFFALSE 12050
// arTech := arTech diff tech ;
12034: LD_ADDR_EXP 5
12038: PUSH
12039: LD_EXP 5
12043: PUSH
12044: LD_VAR 0 1
12048: DIFF
12049: ST_TO_ADDR
// end ; end_of_file
12050: PPOPN 2
12052: END
// every 15 15$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12053: LD_INT 2
12055: PPUSH
12056: CALL_OW 302
12060: PUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 255
12068: PUSH
12069: LD_EXP 3
12073: PUSH
12074: LD_INT 1
12076: ARRAY
12077: EQUAL
12078: AND
12079: IFFALSE 12116
12081: GO 12083
12083: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
12084: LD_INT 10500
12086: PUSH
12087: LD_INT 2100
12089: PUSH
12090: LD_OWVAR 67
12094: MUL
12095: MINUS
12096: PPUSH
12097: CALL_OW 67
// activeArabAttacks := true ;
12101: LD_ADDR_EXP 4
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12109: LD_INT 0
12111: PPUSH
12112: CALL 12290 0 1
// end ;
12116: END
// every 35 35$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12117: LD_INT 2
12119: PPUSH
12120: CALL_OW 302
12124: PUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 255
12132: PUSH
12133: LD_EXP 3
12137: PUSH
12138: LD_INT 1
12140: ARRAY
12141: EQUAL
12142: AND
12143: IFFALSE 12157
12145: GO 12147
12147: DISABLE
// ArabAttack ( Difficulty ) ;
12148: LD_OWVAR 67
12152: PPUSH
12153: CALL 12290 0 1
12157: END
// every 55 55$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12158: LD_INT 2
12160: PPUSH
12161: CALL_OW 302
12165: PUSH
12166: LD_INT 2
12168: PPUSH
12169: CALL_OW 255
12173: PUSH
12174: LD_EXP 3
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: EQUAL
12183: AND
12184: IFFALSE 12202
12186: GO 12188
12188: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12189: LD_OWVAR 67
12193: PUSH
12194: LD_INT 1
12196: PLUS
12197: PPUSH
12198: CALL 12290 0 1
12202: END
// every 105 105$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12203: LD_INT 2
12205: PPUSH
12206: CALL_OW 302
12210: PUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 255
12218: PUSH
12219: LD_EXP 3
12223: PUSH
12224: LD_INT 1
12226: ARRAY
12227: EQUAL
12228: AND
12229: IFFALSE 12247
12231: GO 12233
12233: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 2
12241: PLUS
12242: PPUSH
12243: CALL 12290 0 1
12247: END
// every 0 0$1 trigger FilterUnitsInArea ( arBaseOuterArea , [ f_enemy , botSides [ 1 ] ] ) do
12248: LD_INT 2
12250: PPUSH
12251: LD_INT 81
12253: PUSH
12254: LD_EXP 3
12258: PUSH
12259: LD_INT 1
12261: ARRAY
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 70
12271: IFFALSE 12289
12273: GO 12275
12275: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12276: LD_OWVAR 67
12280: PUSH
12281: LD_INT 2
12283: PLUS
12284: PPUSH
12285: CALL 12290 0 1
12289: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12290: LD_INT 0
12292: PPUSH
12293: PPUSH
12294: PPUSH
12295: PPUSH
12296: PPUSH
12297: PPUSH
12298: PPUSH
// uc_side := botSides [ 1 ] ;
12299: LD_ADDR_OWVAR 20
12303: PUSH
12304: LD_EXP 3
12308: PUSH
12309: LD_INT 1
12311: ARRAY
12312: ST_TO_ADDR
// uc_nation := nation_arabian ;
12313: LD_ADDR_OWVAR 21
12317: PUSH
12318: LD_INT 2
12320: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12321: LD_ADDR_VAR 0 4
12325: PUSH
12326: LD_INT 3
12328: PUSH
12329: LD_INT 5
12331: PUSH
12332: LD_INT 7
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: PUSH
12340: LD_OWVAR 67
12344: ARRAY
12345: ST_TO_ADDR
// arAttackersInf := [ ] ;
12346: LD_ADDR_EXP 43
12350: PUSH
12351: EMPTY
12352: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12353: LD_ADDR_EXP 44
12357: PUSH
12358: EMPTY
12359: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12360: LD_ADDR_VAR 0 7
12364: PUSH
12365: LD_INT 48
12367: PUSH
12368: LD_INT 52
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 135
12377: PUSH
12378: LD_INT 48
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: LD_INT 2
12396: MOD
12397: PUSH
12398: LD_INT 1
12400: PLUS
12401: ARRAY
12402: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12403: LD_ADDR_VAR 0 8
12407: PUSH
12408: LD_INT 12
12410: PUSH
12411: LD_INT 13
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 23
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_VAR 0 1
12436: PUSH
12437: LD_INT 2
12439: MOD
12440: PUSH
12441: LD_INT 1
12443: PLUS
12444: ARRAY
12445: ST_TO_ADDR
// InitHC_All ( ) ;
12446: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12450: LD_ADDR_VAR 0 3
12454: PUSH
12455: DOUBLE
12456: LD_INT 1
12458: DEC
12459: ST_TO_ADDR
12460: LD_INT 3
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_OWVAR 67
12478: ARRAY
12479: PUSH
12480: LD_VAR 0 1
12484: PLUS
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12619
// begin PrepareSoldier ( false , skill ) ;
12489: LD_INT 0
12491: PPUSH
12492: LD_VAR 0 4
12496: PPUSH
12497: CALL_OW 381
// un := CreateHuman ;
12501: LD_ADDR_VAR 0 5
12505: PUSH
12506: CALL_OW 44
12510: ST_TO_ADDR
// if i mod 2 = 0 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 2
12518: MOD
12519: PUSH
12520: LD_INT 0
12522: EQUAL
12523: IFFALSE 12537
// SetClass ( un , class_mortar ) ;
12525: LD_VAR 0 5
12529: PPUSH
12530: LD_INT 8
12532: PPUSH
12533: CALL_OW 336
// SetDir ( un , 1 ) ;
12537: LD_VAR 0 5
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12549: LD_VAR 0 5
12553: PPUSH
12554: LD_VAR 0 8
12558: PUSH
12559: LD_INT 1
12561: ARRAY
12562: PPUSH
12563: LD_INT 0
12565: PPUSH
12566: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12570: LD_ADDR_EXP 43
12574: PUSH
12575: LD_EXP 43
12579: PPUSH
12580: LD_VAR 0 5
12584: PPUSH
12585: CALL 52893 0 2
12589: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12590: LD_VAR 0 5
12594: PPUSH
12595: LD_VAR 0 7
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 7
12608: PUSH
12609: LD_INT 2
12611: ARRAY
12612: PPUSH
12613: CALL_OW 114
// end ;
12617: GO 12486
12619: POP
12620: POP
// for i := 1 to 3 + v do
12621: LD_ADDR_VAR 0 3
12625: PUSH
12626: DOUBLE
12627: LD_INT 1
12629: DEC
12630: ST_TO_ADDR
12631: LD_INT 3
12633: PUSH
12634: LD_VAR 0 1
12638: PLUS
12639: PUSH
12640: FOR_TO
12641: IFFALSE 12838
// begin PrepareMechanic ( false , skill ) ;
12643: LD_INT 0
12645: PPUSH
12646: LD_VAR 0 4
12650: PPUSH
12651: CALL_OW 383
// un := CreateHuman ;
12655: LD_ADDR_VAR 0 5
12659: PUSH
12660: CALL_OW 44
12664: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12665: LD_VAR 0 5
12669: PPUSH
12670: LD_INT 999
12672: PPUSH
12673: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12677: LD_INT 14
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: LD_INT 27
12688: PUSH
12689: LD_INT 25
12691: PUSH
12692: LD_INT 28
12694: PUSH
12695: LD_INT 26
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_VAR 0 3
12708: PUSH
12709: LD_INT 4
12711: MOD
12712: PUSH
12713: LD_INT 1
12715: PLUS
12716: ARRAY
12717: PPUSH
12718: LD_INT 80
12720: PPUSH
12721: CALL 20042 0 5
// veh := CreateVehicle ;
12725: LD_ADDR_VAR 0 6
12729: PUSH
12730: CALL_OW 45
12734: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12735: LD_VAR 0 6
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12747: LD_VAR 0 6
12751: PPUSH
12752: LD_VAR 0 8
12756: PUSH
12757: LD_INT 2
12759: ARRAY
12760: PPUSH
12761: LD_INT 0
12763: PPUSH
12764: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12768: LD_VAR 0 5
12772: PPUSH
12773: LD_VAR 0 6
12777: PPUSH
12778: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12782: LD_VAR 0 5
12786: PPUSH
12787: LD_VAR 0 7
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 7
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12809: LD_ADDR_EXP 44
12813: PUSH
12814: LD_EXP 44
12818: PPUSH
12819: LD_VAR 0 6
12823: PPUSH
12824: CALL 52893 0 2
12828: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12829: LD_INT 70
12831: PPUSH
12832: CALL_OW 67
// end ;
12836: GO 12640
12838: POP
12839: POP
// wait ( 0 0$2 ) ;
12840: LD_INT 70
12842: PPUSH
12843: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
12847: LD_ADDR_VAR 0 3
12851: PUSH
12852: DOUBLE
12853: LD_INT 1
12855: DEC
12856: ST_TO_ADDR
12857: LD_INT 1
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: PUSH
12871: LD_OWVAR 67
12875: ARRAY
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12991
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12880: LD_INT 14
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: LD_INT 5
12888: PPUSH
12889: LD_INT 29
12891: PPUSH
12892: LD_INT 80
12894: PPUSH
12895: CALL 20042 0 5
// veh := CreateVehicle ;
12899: LD_ADDR_VAR 0 6
12903: PUSH
12904: CALL_OW 45
12908: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12909: LD_VAR 0 6
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12921: LD_VAR 0 6
12925: PPUSH
12926: LD_VAR 0 8
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PPUSH
12935: LD_INT 0
12937: PPUSH
12938: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12942: LD_VAR 0 5
12946: PPUSH
12947: LD_VAR 0 7
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 7
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12969: LD_ADDR_EXP 44
12973: PUSH
12974: LD_EXP 44
12978: PPUSH
12979: LD_VAR 0 6
12983: PPUSH
12984: CALL 52893 0 2
12988: ST_TO_ADDR
// end ;
12989: GO 12877
12991: POP
12992: POP
// end ;
12993: LD_VAR 0 2
12997: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
12998: LD_EXP 43
13002: IFFALSE 13532
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
13010: PPUSH
13011: PPUSH
13012: PPUSH
13013: PPUSH
// begin enable ;
13014: ENABLE
// for i in FilterAllUnits ( [ f_tag , tMined ] ) do
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_INT 120
13022: PUSH
13023: LD_INT 11
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 69
13034: PUSH
13035: FOR_IN
13036: IFFALSE 13052
// SetTag ( i , 0 ) ;
13038: LD_VAR 0 1
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL_OW 109
13050: GO 13035
13052: POP
13053: POP
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: LD_EXP 43
13063: PPUSH
13064: LD_INT 50
13066: PUSH
13067: EMPTY
13068: LIST
13069: PPUSH
13070: CALL_OW 72
13074: ST_TO_ADDR
// arAttackersInf := [ ] ;
13075: LD_ADDR_EXP 43
13079: PUSH
13080: EMPTY
13081: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
13082: LD_ADDR_VAR 0 1
13086: PUSH
13087: LD_VAR 0 2
13091: PPUSH
13092: LD_INT 25
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 72
13106: PUSH
13107: FOR_IN
13108: IFFALSE 13239
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: LD_INT 81
13117: PUSH
13118: LD_EXP 3
13122: PUSH
13123: LD_INT 1
13125: ARRAY
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 3
13133: PUSH
13134: LD_INT 120
13136: PUSH
13137: LD_INT 11
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: LD_INT 21
13163: PUSH
13164: LD_INT 3
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: PPUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 74
13195: ST_TO_ADDR
// if not nearest then
13196: LD_VAR 0 3
13200: NOT
13201: IFFALSE 13205
// break ;
13203: GO 13239
// SetTag ( nearest , tMined ) ;
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 11
13212: PPUSH
13213: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13217: LD_VAR 0 1
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: LD_INT 0
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: CALL_OW 192
// end ;
13237: GO 13107
13239: POP
13240: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13241: LD_ADDR_VAR 0 2
13245: PUSH
13246: LD_VAR 0 2
13250: PPUSH
13251: LD_INT 50
13253: PUSH
13254: EMPTY
13255: LIST
13256: PPUSH
13257: CALL_OW 72
13261: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13262: LD_INT 70
13264: PPUSH
13265: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: LD_VAR 0 2
13278: PPUSH
13279: LD_INT 50
13281: PUSH
13282: EMPTY
13283: LIST
13284: PPUSH
13285: CALL_OW 72
13289: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13290: LD_ADDR_VAR 0 4
13294: PUSH
13295: LD_INT 81
13297: PUSH
13298: LD_EXP 3
13302: PUSH
13303: LD_INT 1
13305: ARRAY
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: ST_TO_ADDR
// for i in tmp do
13316: LD_ADDR_VAR 0 1
13320: PUSH
13321: LD_VAR 0 2
13325: PUSH
13326: FOR_IN
13327: IFFALSE 13523
// if GetClass ( i ) <> 1 then
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 257
13338: PUSH
13339: LD_INT 1
13341: NONEQUAL
13342: IFFALSE 13370
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13344: LD_VAR 0 1
13348: PPUSH
13349: LD_VAR 0 4
13353: PPUSH
13354: LD_VAR 0 1
13358: PPUSH
13359: CALL_OW 74
13363: PPUSH
13364: CALL_OW 115
13368: GO 13521
// if not HasTask ( i ) then
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 314
13379: NOT
13380: IFFALSE 13521
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13382: LD_ADDR_VAR 0 3
13386: PUSH
13387: LD_VAR 0 4
13391: PPUSH
13392: LD_INT 3
13394: PUSH
13395: LD_INT 120
13397: PUSH
13398: LD_INT 11
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: LD_INT 21
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 21
13424: PUSH
13425: LD_INT 3
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 72
13445: PPUSH
13446: LD_VAR 0 1
13450: PPUSH
13451: CALL_OW 74
13455: ST_TO_ADDR
// if not nearest then
13456: LD_VAR 0 3
13460: NOT
13461: IFFALSE 13489
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13463: LD_VAR 0 1
13467: PPUSH
13468: LD_VAR 0 4
13472: PPUSH
13473: LD_VAR 0 1
13477: PPUSH
13478: CALL_OW 74
13482: PPUSH
13483: CALL_OW 115
13487: GO 13521
// begin SetTag ( nearest , tMined ) ;
13489: LD_VAR 0 3
13493: PPUSH
13494: LD_INT 11
13496: PPUSH
13497: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_INT 0
13508: PPUSH
13509: LD_INT 0
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: CALL_OW 132
// end ; end ;
13521: GO 13326
13523: POP
13524: POP
// until not tmp ;
13525: LD_VAR 0 2
13529: NOT
13530: IFFALSE 13262
// end ;
13532: PPOPN 5
13534: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13535: LD_EXP 44
13539: IFFALSE 13762
13541: GO 13543
13543: DISABLE
13544: LD_INT 0
13546: PPUSH
13547: PPUSH
13548: PPUSH
// begin enable ;
13549: ENABLE
// tmp := arAttackersVeh ;
13550: LD_ADDR_VAR 0 2
13554: PUSH
13555: LD_EXP 44
13559: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13560: LD_ADDR_EXP 44
13564: PUSH
13565: EMPTY
13566: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13567: LD_ADDR_VAR 0 3
13571: PUSH
13572: LD_INT 139
13574: PUSH
13575: LD_INT 55
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 155
13584: PUSH
13585: LD_INT 92
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 53
13598: PUSH
13599: LD_INT 61
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 74
13608: PUSH
13609: LD_INT 98
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13624: LD_VAR 0 2
13628: PUSH
13629: LD_INT 1
13631: ARRAY
13632: PPUSH
13633: LD_INT 139
13635: PPUSH
13636: LD_INT 55
13638: PPUSH
13639: CALL_OW 297
13643: PUSH
13644: LD_VAR 0 2
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: PPUSH
13653: LD_INT 53
13655: PPUSH
13656: LD_INT 61
13658: PPUSH
13659: CALL_OW 297
13663: LESS
13664: IFFALSE 13682
// path := path [ 1 ] else
13666: LD_ADDR_VAR 0 3
13670: PUSH
13671: LD_VAR 0 3
13675: PUSH
13676: LD_INT 1
13678: ARRAY
13679: ST_TO_ADDR
13680: GO 13696
// path := path [ 2 ] ;
13682: LD_ADDR_VAR 0 3
13686: PUSH
13687: LD_VAR 0 3
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13696: LD_INT 70
13698: PPUSH
13699: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13703: LD_ADDR_VAR 0 2
13707: PUSH
13708: LD_VAR 0 2
13712: PPUSH
13713: LD_INT 50
13715: PUSH
13716: EMPTY
13717: LIST
13718: PPUSH
13719: CALL_OW 72
13723: ST_TO_ADDR
// for i in tmp do
13724: LD_ADDR_VAR 0 1
13728: PUSH
13729: LD_VAR 0 2
13733: PUSH
13734: FOR_IN
13735: IFFALSE 13753
// AgressiveMove ( i , path ) until not tmp ;
13737: LD_VAR 0 1
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: CALL 55497 0 2
13751: GO 13734
13753: POP
13754: POP
13755: LD_VAR 0 2
13759: NOT
13760: IFFALSE 13696
// end ;
13762: PPOPN 3
13764: END
// every 1 1$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
13765: LD_EXP 16
13769: PPUSH
13770: CALL 17304 0 1
13774: PUSH
13775: LD_INT 3
13777: GREATEREQUAL
13778: IFFALSE 13899
13780: GO 13782
13782: DISABLE
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
// begin enable ;
13787: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_EXP 16
13797: PPUSH
13798: LD_INT 61
13800: PUSH
13801: EMPTY
13802: LIST
13803: PPUSH
13804: CALL_OW 72
13808: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
13809: LD_ADDR_EXP 16
13813: PUSH
13814: LD_EXP 16
13818: PUSH
13819: LD_VAR 0 2
13823: DIFF
13824: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13825: LD_INT 70
13827: PPUSH
13828: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 2
13841: PPUSH
13842: LD_INT 50
13844: PUSH
13845: EMPTY
13846: LIST
13847: PPUSH
13848: CALL_OW 72
13852: ST_TO_ADDR
// for i in tmp do
13853: LD_ADDR_VAR 0 1
13857: PUSH
13858: LD_VAR 0 2
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13890
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 98
13873: PUSH
13874: LD_INT 63
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: PPUSH
13884: CALL 55497 0 2
13888: GO 13863
13890: POP
13891: POP
13892: LD_VAR 0 2
13896: NOT
13897: IFFALSE 13825
// end ;
13899: PPOPN 2
13901: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
13902: LD_EXP 9
13906: PUSH
13907: LD_EXP 4
13911: AND
13912: IFFALSE 14469
13914: GO 13916
13916: DISABLE
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
13921: PPUSH
// begin enable ;
13922: ENABLE
// if not arVehiclesAtttackers then
13923: LD_EXP 9
13927: NOT
13928: IFFALSE 13932
// exit ;
13930: GO 14469
// for i in arVehiclesAtttackers do
13932: LD_ADDR_VAR 0 1
13936: PUSH
13937: LD_EXP 9
13941: PUSH
13942: FOR_IN
13943: IFFALSE 14467
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
13945: LD_VAR 0 1
13949: PPUSH
13950: CALL_OW 302
13954: NOT
13955: PUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PUSH
13966: LD_EXP 3
13970: PUSH
13971: LD_INT 1
13973: ARRAY
13974: NONEQUAL
13975: OR
13976: IFFALSE 13996
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
13978: LD_ADDR_EXP 9
13982: PUSH
13983: LD_EXP 9
13987: PUSH
13988: LD_VAR 0 1
13992: DIFF
13993: ST_TO_ADDR
// continue ;
13994: GO 13942
// end ; if GetTag ( i ) = 300 then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 110
14005: PUSH
14006: LD_INT 300
14008: EQUAL
14009: IFFALSE 14124
// begin if GetFuel ( i ) < 50 then
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 261
14020: PUSH
14021: LD_INT 50
14023: LESS
14024: IFFALSE 14083
// begin ComMoveXY ( i , 102 , 47 ) ;
14026: LD_VAR 0 1
14030: PPUSH
14031: LD_INT 102
14033: PPUSH
14034: LD_INT 47
14036: PPUSH
14037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14041: LD_INT 35
14043: PPUSH
14044: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
14048: LD_VAR 0 1
14052: PPUSH
14053: LD_INT 102
14055: PPUSH
14056: LD_INT 47
14058: PPUSH
14059: CALL_OW 297
14063: PUSH
14064: LD_INT 4
14066: LESS
14067: IFFALSE 14041
// SetFuel ( i , 100 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 100
14076: PPUSH
14077: CALL_OW 240
// end else
14081: GO 14124
// if not IsInArea ( i , arParkingArea ) then
14083: LD_VAR 0 1
14087: PPUSH
14088: LD_INT 14
14090: PPUSH
14091: CALL_OW 308
14095: NOT
14096: IFFALSE 14112
// ComMoveToArea ( i , arParkingArea ) else
14098: LD_VAR 0 1
14102: PPUSH
14103: LD_INT 14
14105: PPUSH
14106: CALL_OW 113
14110: GO 14124
// SetTag ( i , 301 ) ;
14112: LD_VAR 0 1
14116: PPUSH
14117: LD_INT 301
14119: PPUSH
14120: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14124: LD_VAR 0 1
14128: PPUSH
14129: CALL_OW 110
14133: PUSH
14134: LD_INT 301
14136: EQUAL
14137: IFFALSE 14279
// begin if GetLives ( i ) < 1000 then
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 256
14148: PUSH
14149: LD_INT 1000
14151: LESS
14152: IFFALSE 14256
// begin if not IsDrivenBy ( i ) then
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 311
14163: NOT
14164: IFFALSE 14168
// continue ;
14166: GO 13942
// mech := IsDrivenBy ( i ) ;
14168: LD_ADDR_VAR 0 2
14172: PUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 311
14182: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14183: LD_VAR 0 2
14187: PPUSH
14188: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14206: LD_INT 35
14208: PPUSH
14209: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 256
14222: PUSH
14223: LD_INT 1000
14225: EQUAL
14226: IFFALSE 14206
// SetLives ( mech , 1000 ) ;
14228: LD_VAR 0 2
14232: PPUSH
14233: LD_INT 1000
14235: PPUSH
14236: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14240: LD_VAR 0 2
14244: PPUSH
14245: LD_VAR 0 1
14249: PPUSH
14250: CALL_OW 120
// end else
14254: GO 14279
// if IsDrivenBy ( i ) then
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 311
14265: IFFALSE 14279
// SetTag ( i , 0 ) ;
14267: LD_VAR 0 1
14271: PPUSH
14272: LD_INT 0
14274: PPUSH
14275: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 110
14288: PUSH
14289: LD_INT 300
14291: LESS
14292: IFFALSE 14465
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14294: LD_ADDR_VAR 0 3
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 81
14304: PUSH
14305: LD_EXP 3
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PPUSH
14318: CALL_OW 70
14322: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 256
14332: PUSH
14333: LD_INT 650
14335: LESS
14336: IFFALSE 14361
// begin ComStop ( i ) ;
14338: LD_VAR 0 1
14342: PPUSH
14343: CALL_OW 141
// SetTag ( i , 300 ) ;
14347: LD_VAR 0 1
14351: PPUSH
14352: LD_INT 300
14354: PPUSH
14355: CALL_OW 109
// continue ;
14359: GO 13942
// end ; if enemy then
14361: LD_VAR 0 3
14365: IFFALSE 14405
// begin if not HasTask ( i ) then
14367: LD_VAR 0 1
14371: PPUSH
14372: CALL_OW 314
14376: NOT
14377: IFFALSE 14403
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14379: LD_VAR 0 1
14383: PPUSH
14384: LD_VAR 0 3
14388: PPUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 74
14398: PPUSH
14399: CALL_OW 115
// end else
14403: GO 14465
// if arVehiclesAtttackers then
14405: LD_EXP 9
14409: IFFALSE 14465
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14411: LD_ADDR_VAR 0 3
14415: PUSH
14416: LD_INT 81
14418: PUSH
14419: LD_EXP 3
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 69
14436: ST_TO_ADDR
// if enemy then
14437: LD_VAR 0 3
14441: IFFALSE 14465
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14443: LD_VAR 0 1
14447: PPUSH
14448: LD_INT 99
14450: PUSH
14451: LD_INT 66
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: PPUSH
14461: CALL 55497 0 2
// end ; end ; end ;
14465: GO 13942
14467: POP
14468: POP
// end ;
14469: PPOPN 3
14471: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14472: LD_INT 22
14474: PUSH
14475: LD_EXP 3
14479: PUSH
14480: LD_INT 1
14482: ARRAY
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 32
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: IFFALSE 14589
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
// begin enable ;
14514: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14515: LD_ADDR_VAR 0 1
14519: PUSH
14520: LD_INT 22
14522: PUSH
14523: LD_EXP 3
14527: PUSH
14528: LD_INT 1
14530: ARRAY
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 32
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 69
14554: PUSH
14555: FOR_IN
14556: IFFALSE 14587
// if GetFuel ( i ) < 3 then
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 261
14567: PUSH
14568: LD_INT 3
14570: LESS
14571: IFFALSE 14585
// SetFuel ( i , 3 ) ;
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 3
14580: PPUSH
14581: CALL_OW 240
14585: GO 14555
14587: POP
14588: POP
// end ; end_of_file
14589: PPOPN 1
14591: END
// every 0 0$20 trigger game do
14592: LD_EXP 2
14596: IFFALSE 14641
14598: GO 14600
14600: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14601: LD_INT 15
14603: PUSH
14604: LD_INT 17
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: PPUSH
14619: LD_EXP 32
14623: PUSH
14624: LD_INT 2
14626: ARRAY
14627: PPUSH
14628: LD_EXP 32
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: CALL 14642 0 3
14641: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14642: LD_INT 0
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
// if not areas then
14648: LD_VAR 0 1
14652: NOT
14653: IFFALSE 14657
// exit ;
14655: GO 15034
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14657: LD_ADDR_VAR 0 7
14661: PUSH
14662: LD_INT 18
14664: PUSH
14665: LD_INT 19
14667: PUSH
14668: LD_INT 20
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: ST_TO_ADDR
// x := 5 ;
14676: LD_ADDR_VAR 0 6
14680: PUSH
14681: LD_INT 5
14683: ST_TO_ADDR
// repeat wait ( time ) ;
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
14693: LD_OWVAR 1
14697: PUSH
14698: LD_INT 37800
14700: PUSH
14701: LD_INT 31500
14703: PUSH
14704: LD_INT 25200
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: PUSH
14712: LD_OWVAR 67
14716: ARRAY
14717: LESS
14718: IFFALSE 14857
// begin for i := 1 to multi_sides do
14720: LD_ADDR_VAR 0 5
14724: PUSH
14725: DOUBLE
14726: LD_INT 1
14728: DEC
14729: ST_TO_ADDR
14730: LD_EXP 18
14734: PUSH
14735: FOR_TO
14736: IFFALSE 14848
// if multi_sides [ i ] then
14738: LD_EXP 18
14742: PUSH
14743: LD_VAR 0 5
14747: ARRAY
14748: IFFALSE 14846
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
14750: LD_VAR 0 7
14754: PUSH
14755: LD_EXP 18
14759: PUSH
14760: LD_VAR 0 5
14764: ARRAY
14765: ARRAY
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 287
14774: PUSH
14775: LD_INT 32
14777: PUSH
14778: LD_INT 25
14780: PUSH
14781: LD_INT 23
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: LD_OWVAR 67
14793: ARRAY
14794: LESS
14795: IFFALSE 14846
// begin amount := amount - ( x * 10 ) ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_VAR 0 3
14806: PUSH
14807: LD_VAR 0 6
14811: PUSH
14812: LD_INT 10
14814: MUL
14815: MINUS
14816: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
14817: LD_VAR 0 6
14821: PPUSH
14822: LD_VAR 0 7
14826: PUSH
14827: LD_EXP 18
14831: PUSH
14832: LD_VAR 0 5
14836: ARRAY
14837: ARRAY
14838: PPUSH
14839: LD_INT 1
14841: PPUSH
14842: CALL_OW 55
// end ; end ;
14846: GO 14735
14848: POP
14849: POP
// wait ( 0 0$2 ) ;
14850: LD_INT 70
14852: PPUSH
14853: CALL_OW 67
// end ; for i in areas do
14857: LD_ADDR_VAR 0 5
14861: PUSH
14862: LD_VAR 0 1
14866: PUSH
14867: FOR_IN
14868: IFFALSE 14951
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14870: LD_VAR 0 5
14874: PPUSH
14875: LD_INT 1
14877: PPUSH
14878: CALL_OW 287
14882: PUSH
14883: LD_INT 25
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_INT 20
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: LD_OWVAR 67
14901: ARRAY
14902: LESS
14903: IFFALSE 14949
// begin wait ( 0 0$5 ) ;
14905: LD_INT 175
14907: PPUSH
14908: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14912: LD_VAR 0 6
14916: PPUSH
14917: LD_VAR 0 5
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: LD_VAR 0 3
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_INT 10
14946: MUL
14947: MINUS
14948: ST_TO_ADDR
// end ; end ;
14949: GO 14867
14951: POP
14952: POP
// time := time + 0 0$2 ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: LD_INT 70
14965: PLUS
14966: ST_TO_ADDR
// x := x - 1 ;
14967: LD_ADDR_VAR 0 6
14971: PUSH
14972: LD_VAR 0 6
14976: PUSH
14977: LD_INT 1
14979: MINUS
14980: ST_TO_ADDR
// if x = 0 then
14981: LD_VAR 0 6
14985: PUSH
14986: LD_INT 0
14988: EQUAL
14989: IFFALSE 14999
// x := 5 ;
14991: LD_ADDR_VAR 0 6
14995: PUSH
14996: LD_INT 5
14998: ST_TO_ADDR
// if time > 2 2$00 then
14999: LD_VAR 0 2
15003: PUSH
15004: LD_INT 4200
15006: GREATER
15007: IFFALSE 15017
// time := 0 0$30 ;
15009: LD_ADDR_VAR 0 2
15013: PUSH
15014: LD_INT 1050
15016: ST_TO_ADDR
// until not game or amount <= 0 ;
15017: LD_EXP 2
15021: NOT
15022: PUSH
15023: LD_VAR 0 3
15027: PUSH
15028: LD_INT 0
15030: LESSEQUAL
15031: OR
15032: IFFALSE 14684
// end ; end_of_file
15034: LD_VAR 0 4
15038: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 200
15046: DOUBLE
15047: GREATEREQUAL
15048: IFFALSE 15056
15050: LD_INT 299
15052: DOUBLE
15053: LESSEQUAL
15054: IFTRUE 15058
15056: GO 15090
15058: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15059: LD_VAR 0 1
15063: PPUSH
15064: LD_VAR 0 2
15068: PPUSH
15069: LD_VAR 0 3
15073: PPUSH
15074: LD_VAR 0 4
15078: PPUSH
15079: LD_VAR 0 5
15083: PPUSH
15084: CALL 74184 0 5
15088: GO 15167
15090: LD_INT 300
15092: DOUBLE
15093: GREATEREQUAL
15094: IFFALSE 15102
15096: LD_INT 399
15098: DOUBLE
15099: LESSEQUAL
15100: IFTRUE 15104
15102: GO 15166
15104: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15105: LD_VAR 0 1
15109: PPUSH
15110: LD_VAR 0 2
15114: PPUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: LD_VAR 0 4
15124: PPUSH
15125: LD_VAR 0 5
15129: PPUSH
15130: LD_VAR 0 6
15134: PPUSH
15135: LD_VAR 0 7
15139: PPUSH
15140: LD_VAR 0 8
15144: PPUSH
15145: LD_VAR 0 9
15149: PPUSH
15150: LD_VAR 0 10
15154: PPUSH
15155: LD_VAR 0 11
15159: PPUSH
15160: CALL 70497 0 11
15164: GO 15167
15166: POP
// end ;
15167: PPOPN 11
15169: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15170: LD_VAR 0 1
15174: PPUSH
15175: LD_VAR 0 2
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: LD_VAR 0 4
15189: PPUSH
15190: LD_VAR 0 5
15194: PPUSH
15195: CALL 73908 0 5
// end ; end_of_file
15199: PPOPN 5
15201: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
// if exist_mode then
15206: LD_VAR 0 2
15210: IFFALSE 15235
// unit := CreateCharacter ( prefix & ident ) else
15212: LD_ADDR_VAR 0 5
15216: PUSH
15217: LD_VAR 0 3
15221: PUSH
15222: LD_VAR 0 1
15226: STR
15227: PPUSH
15228: CALL_OW 34
15232: ST_TO_ADDR
15233: GO 15250
// unit := NewCharacter ( ident ) ;
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 25
15249: ST_TO_ADDR
// result := unit ;
15250: LD_ADDR_VAR 0 4
15254: PUSH
15255: LD_VAR 0 5
15259: ST_TO_ADDR
// end ;
15260: LD_VAR 0 4
15264: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15265: LD_INT 0
15267: PPUSH
15268: PPUSH
// if not side or not nation then
15269: LD_VAR 0 1
15273: NOT
15274: PUSH
15275: LD_VAR 0 2
15279: NOT
15280: OR
15281: IFFALSE 15285
// exit ;
15283: GO 16053
// case nation of nation_american :
15285: LD_VAR 0 2
15289: PUSH
15290: LD_INT 1
15292: DOUBLE
15293: EQUAL
15294: IFTRUE 15298
15296: GO 15512
15298: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15299: LD_ADDR_VAR 0 4
15303: PUSH
15304: LD_INT 35
15306: PUSH
15307: LD_INT 45
15309: PUSH
15310: LD_INT 46
15312: PUSH
15313: LD_INT 47
15315: PUSH
15316: LD_INT 82
15318: PUSH
15319: LD_INT 83
15321: PUSH
15322: LD_INT 84
15324: PUSH
15325: LD_INT 85
15327: PUSH
15328: LD_INT 86
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: LD_INT 2
15336: PUSH
15337: LD_INT 6
15339: PUSH
15340: LD_INT 15
15342: PUSH
15343: LD_INT 16
15345: PUSH
15346: LD_INT 7
15348: PUSH
15349: LD_INT 12
15351: PUSH
15352: LD_INT 13
15354: PUSH
15355: LD_INT 10
15357: PUSH
15358: LD_INT 14
15360: PUSH
15361: LD_INT 20
15363: PUSH
15364: LD_INT 21
15366: PUSH
15367: LD_INT 22
15369: PUSH
15370: LD_INT 25
15372: PUSH
15373: LD_INT 32
15375: PUSH
15376: LD_INT 27
15378: PUSH
15379: LD_INT 36
15381: PUSH
15382: LD_INT 69
15384: PUSH
15385: LD_INT 39
15387: PUSH
15388: LD_INT 34
15390: PUSH
15391: LD_INT 40
15393: PUSH
15394: LD_INT 48
15396: PUSH
15397: LD_INT 49
15399: PUSH
15400: LD_INT 50
15402: PUSH
15403: LD_INT 51
15405: PUSH
15406: LD_INT 52
15408: PUSH
15409: LD_INT 53
15411: PUSH
15412: LD_INT 54
15414: PUSH
15415: LD_INT 55
15417: PUSH
15418: LD_INT 56
15420: PUSH
15421: LD_INT 57
15423: PUSH
15424: LD_INT 58
15426: PUSH
15427: LD_INT 59
15429: PUSH
15430: LD_INT 60
15432: PUSH
15433: LD_INT 61
15435: PUSH
15436: LD_INT 62
15438: PUSH
15439: LD_INT 80
15441: PUSH
15442: LD_INT 82
15444: PUSH
15445: LD_INT 83
15447: PUSH
15448: LD_INT 84
15450: PUSH
15451: LD_INT 85
15453: PUSH
15454: LD_INT 86
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: ST_TO_ADDR
15510: GO 15977
15512: LD_INT 2
15514: DOUBLE
15515: EQUAL
15516: IFTRUE 15520
15518: GO 15746
15520: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15521: LD_ADDR_VAR 0 4
15525: PUSH
15526: LD_INT 35
15528: PUSH
15529: LD_INT 45
15531: PUSH
15532: LD_INT 46
15534: PUSH
15535: LD_INT 47
15537: PUSH
15538: LD_INT 82
15540: PUSH
15541: LD_INT 83
15543: PUSH
15544: LD_INT 84
15546: PUSH
15547: LD_INT 85
15549: PUSH
15550: LD_INT 87
15552: PUSH
15553: LD_INT 70
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: LD_INT 11
15561: PUSH
15562: LD_INT 3
15564: PUSH
15565: LD_INT 4
15567: PUSH
15568: LD_INT 5
15570: PUSH
15571: LD_INT 6
15573: PUSH
15574: LD_INT 15
15576: PUSH
15577: LD_INT 18
15579: PUSH
15580: LD_INT 7
15582: PUSH
15583: LD_INT 17
15585: PUSH
15586: LD_INT 8
15588: PUSH
15589: LD_INT 20
15591: PUSH
15592: LD_INT 21
15594: PUSH
15595: LD_INT 22
15597: PUSH
15598: LD_INT 72
15600: PUSH
15601: LD_INT 26
15603: PUSH
15604: LD_INT 69
15606: PUSH
15607: LD_INT 39
15609: PUSH
15610: LD_INT 40
15612: PUSH
15613: LD_INT 41
15615: PUSH
15616: LD_INT 42
15618: PUSH
15619: LD_INT 43
15621: PUSH
15622: LD_INT 48
15624: PUSH
15625: LD_INT 49
15627: PUSH
15628: LD_INT 50
15630: PUSH
15631: LD_INT 51
15633: PUSH
15634: LD_INT 52
15636: PUSH
15637: LD_INT 53
15639: PUSH
15640: LD_INT 54
15642: PUSH
15643: LD_INT 55
15645: PUSH
15646: LD_INT 56
15648: PUSH
15649: LD_INT 60
15651: PUSH
15652: LD_INT 61
15654: PUSH
15655: LD_INT 62
15657: PUSH
15658: LD_INT 66
15660: PUSH
15661: LD_INT 67
15663: PUSH
15664: LD_INT 68
15666: PUSH
15667: LD_INT 81
15669: PUSH
15670: LD_INT 82
15672: PUSH
15673: LD_INT 83
15675: PUSH
15676: LD_INT 84
15678: PUSH
15679: LD_INT 85
15681: PUSH
15682: LD_INT 87
15684: PUSH
15685: LD_INT 88
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: ST_TO_ADDR
15744: GO 15977
15746: LD_INT 3
15748: DOUBLE
15749: EQUAL
15750: IFTRUE 15754
15752: GO 15976
15754: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15755: LD_ADDR_VAR 0 4
15759: PUSH
15760: LD_INT 46
15762: PUSH
15763: LD_INT 47
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: LD_INT 2
15771: PUSH
15772: LD_INT 82
15774: PUSH
15775: LD_INT 83
15777: PUSH
15778: LD_INT 84
15780: PUSH
15781: LD_INT 85
15783: PUSH
15784: LD_INT 86
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 9
15792: PUSH
15793: LD_INT 20
15795: PUSH
15796: LD_INT 19
15798: PUSH
15799: LD_INT 21
15801: PUSH
15802: LD_INT 24
15804: PUSH
15805: LD_INT 22
15807: PUSH
15808: LD_INT 25
15810: PUSH
15811: LD_INT 28
15813: PUSH
15814: LD_INT 29
15816: PUSH
15817: LD_INT 30
15819: PUSH
15820: LD_INT 31
15822: PUSH
15823: LD_INT 37
15825: PUSH
15826: LD_INT 38
15828: PUSH
15829: LD_INT 32
15831: PUSH
15832: LD_INT 27
15834: PUSH
15835: LD_INT 33
15837: PUSH
15838: LD_INT 69
15840: PUSH
15841: LD_INT 39
15843: PUSH
15844: LD_INT 34
15846: PUSH
15847: LD_INT 40
15849: PUSH
15850: LD_INT 71
15852: PUSH
15853: LD_INT 23
15855: PUSH
15856: LD_INT 44
15858: PUSH
15859: LD_INT 48
15861: PUSH
15862: LD_INT 49
15864: PUSH
15865: LD_INT 50
15867: PUSH
15868: LD_INT 51
15870: PUSH
15871: LD_INT 52
15873: PUSH
15874: LD_INT 53
15876: PUSH
15877: LD_INT 54
15879: PUSH
15880: LD_INT 55
15882: PUSH
15883: LD_INT 56
15885: PUSH
15886: LD_INT 57
15888: PUSH
15889: LD_INT 58
15891: PUSH
15892: LD_INT 59
15894: PUSH
15895: LD_INT 63
15897: PUSH
15898: LD_INT 64
15900: PUSH
15901: LD_INT 65
15903: PUSH
15904: LD_INT 82
15906: PUSH
15907: LD_INT 83
15909: PUSH
15910: LD_INT 84
15912: PUSH
15913: LD_INT 85
15915: PUSH
15916: LD_INT 86
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: ST_TO_ADDR
15974: GO 15977
15976: POP
// if state > - 1 and state < 3 then
15977: LD_VAR 0 3
15981: PUSH
15982: LD_INT 1
15984: NEG
15985: GREATER
15986: PUSH
15987: LD_VAR 0 3
15991: PUSH
15992: LD_INT 3
15994: LESS
15995: AND
15996: IFFALSE 16053
// for i in result do
15998: LD_ADDR_VAR 0 5
16002: PUSH
16003: LD_VAR 0 4
16007: PUSH
16008: FOR_IN
16009: IFFALSE 16051
// if GetTech ( i , side ) <> state then
16011: LD_VAR 0 5
16015: PPUSH
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 321
16025: PUSH
16026: LD_VAR 0 3
16030: NONEQUAL
16031: IFFALSE 16049
// result := result diff i ;
16033: LD_ADDR_VAR 0 4
16037: PUSH
16038: LD_VAR 0 4
16042: PUSH
16043: LD_VAR 0 5
16047: DIFF
16048: ST_TO_ADDR
16049: GO 16008
16051: POP
16052: POP
// end ;
16053: LD_VAR 0 4
16057: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16058: LD_INT 0
16060: PPUSH
16061: PPUSH
16062: PPUSH
// result := true ;
16063: LD_ADDR_VAR 0 3
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16071: LD_ADDR_VAR 0 5
16075: PUSH
16076: LD_VAR 0 2
16080: PPUSH
16081: CALL_OW 480
16085: ST_TO_ADDR
// if not tmp then
16086: LD_VAR 0 5
16090: NOT
16091: IFFALSE 16095
// exit ;
16093: GO 16144
// for i in tmp do
16095: LD_ADDR_VAR 0 4
16099: PUSH
16100: LD_VAR 0 5
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16142
// if GetTech ( i , side ) <> state_researched then
16108: LD_VAR 0 4
16112: PPUSH
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 321
16122: PUSH
16123: LD_INT 2
16125: NONEQUAL
16126: IFFALSE 16140
// begin result := false ;
16128: LD_ADDR_VAR 0 3
16132: PUSH
16133: LD_INT 0
16135: ST_TO_ADDR
// exit ;
16136: POP
16137: POP
16138: GO 16144
// end ;
16140: GO 16105
16142: POP
16143: POP
// end ;
16144: LD_VAR 0 3
16148: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16149: LD_INT 0
16151: PPUSH
16152: PPUSH
16153: PPUSH
16154: PPUSH
16155: PPUSH
16156: PPUSH
16157: PPUSH
16158: PPUSH
16159: PPUSH
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16164: LD_VAR 0 1
16168: NOT
16169: PUSH
16170: LD_VAR 0 1
16174: PPUSH
16175: CALL_OW 257
16179: PUSH
16180: LD_INT 9
16182: NONEQUAL
16183: OR
16184: IFFALSE 16188
// exit ;
16186: GO 16761
// side := GetSide ( unit ) ;
16188: LD_ADDR_VAR 0 9
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 255
16202: ST_TO_ADDR
// tech_space := tech_spacanom ;
16203: LD_ADDR_VAR 0 12
16207: PUSH
16208: LD_INT 29
16210: ST_TO_ADDR
// tech_time := tech_taurad ;
16211: LD_ADDR_VAR 0 13
16215: PUSH
16216: LD_INT 28
16218: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16219: LD_ADDR_VAR 0 11
16223: PUSH
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 310
16233: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16234: LD_VAR 0 11
16238: PPUSH
16239: CALL_OW 247
16243: PUSH
16244: LD_INT 2
16246: EQUAL
16247: IFFALSE 16251
// exit ;
16249: GO 16761
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16251: LD_ADDR_VAR 0 8
16255: PUSH
16256: LD_INT 81
16258: PUSH
16259: LD_VAR 0 9
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 3
16270: PUSH
16271: LD_INT 21
16273: PUSH
16274: LD_INT 3
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: ST_TO_ADDR
// if not tmp then
16294: LD_VAR 0 8
16298: NOT
16299: IFFALSE 16303
// exit ;
16301: GO 16761
// if in_unit then
16303: LD_VAR 0 11
16307: IFFALSE 16331
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16309: LD_ADDR_VAR 0 10
16313: PUSH
16314: LD_VAR 0 8
16318: PPUSH
16319: LD_VAR 0 11
16323: PPUSH
16324: CALL_OW 74
16328: ST_TO_ADDR
16329: GO 16351
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16331: LD_ADDR_VAR 0 10
16335: PUSH
16336: LD_VAR 0 8
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 74
16350: ST_TO_ADDR
// if not enemy then
16351: LD_VAR 0 10
16355: NOT
16356: IFFALSE 16360
// exit ;
16358: GO 16761
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16360: LD_VAR 0 11
16364: PUSH
16365: LD_VAR 0 11
16369: PPUSH
16370: LD_VAR 0 10
16374: PPUSH
16375: CALL_OW 296
16379: PUSH
16380: LD_INT 13
16382: GREATER
16383: AND
16384: PUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_VAR 0 10
16394: PPUSH
16395: CALL_OW 296
16399: PUSH
16400: LD_INT 12
16402: GREATER
16403: OR
16404: IFFALSE 16408
// exit ;
16406: GO 16761
// missile := [ 1 ] ;
16408: LD_ADDR_VAR 0 14
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16419: LD_VAR 0 9
16423: PPUSH
16424: LD_VAR 0 12
16428: PPUSH
16429: CALL_OW 325
16433: IFFALSE 16462
// missile := Replace ( missile , missile + 1 , 2 ) ;
16435: LD_ADDR_VAR 0 14
16439: PUSH
16440: LD_VAR 0 14
16444: PPUSH
16445: LD_VAR 0 14
16449: PUSH
16450: LD_INT 1
16452: PLUS
16453: PPUSH
16454: LD_INT 2
16456: PPUSH
16457: CALL_OW 1
16461: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16462: LD_VAR 0 9
16466: PPUSH
16467: LD_VAR 0 13
16471: PPUSH
16472: CALL_OW 325
16476: PUSH
16477: LD_VAR 0 10
16481: PPUSH
16482: CALL_OW 255
16486: PPUSH
16487: LD_VAR 0 13
16491: PPUSH
16492: CALL_OW 325
16496: NOT
16497: AND
16498: IFFALSE 16527
// missile := Replace ( missile , missile + 1 , 3 ) ;
16500: LD_ADDR_VAR 0 14
16504: PUSH
16505: LD_VAR 0 14
16509: PPUSH
16510: LD_VAR 0 14
16514: PUSH
16515: LD_INT 1
16517: PLUS
16518: PPUSH
16519: LD_INT 3
16521: PPUSH
16522: CALL_OW 1
16526: ST_TO_ADDR
// if missile < 2 then
16527: LD_VAR 0 14
16531: PUSH
16532: LD_INT 2
16534: LESS
16535: IFFALSE 16539
// exit ;
16537: GO 16761
// x := GetX ( enemy ) ;
16539: LD_ADDR_VAR 0 4
16543: PUSH
16544: LD_VAR 0 10
16548: PPUSH
16549: CALL_OW 250
16553: ST_TO_ADDR
// y := GetY ( enemy ) ;
16554: LD_ADDR_VAR 0 5
16558: PUSH
16559: LD_VAR 0 10
16563: PPUSH
16564: CALL_OW 251
16568: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16569: LD_ADDR_VAR 0 6
16573: PUSH
16574: LD_VAR 0 4
16578: PUSH
16579: LD_INT 1
16581: NEG
16582: PPUSH
16583: LD_INT 1
16585: PPUSH
16586: CALL_OW 12
16590: PLUS
16591: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16592: LD_ADDR_VAR 0 7
16596: PUSH
16597: LD_VAR 0 5
16601: PUSH
16602: LD_INT 1
16604: NEG
16605: PPUSH
16606: LD_INT 1
16608: PPUSH
16609: CALL_OW 12
16613: PLUS
16614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16615: LD_VAR 0 6
16619: PPUSH
16620: LD_VAR 0 7
16624: PPUSH
16625: CALL_OW 488
16629: NOT
16630: IFFALSE 16652
// begin _x := x ;
16632: LD_ADDR_VAR 0 6
16636: PUSH
16637: LD_VAR 0 4
16641: ST_TO_ADDR
// _y := y ;
16642: LD_ADDR_VAR 0 7
16646: PUSH
16647: LD_VAR 0 5
16651: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16652: LD_ADDR_VAR 0 3
16656: PUSH
16657: LD_INT 1
16659: PPUSH
16660: LD_VAR 0 14
16664: PPUSH
16665: CALL_OW 12
16669: ST_TO_ADDR
// case i of 1 :
16670: LD_VAR 0 3
16674: PUSH
16675: LD_INT 1
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16700
16683: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_VAR 0 10
16693: PPUSH
16694: CALL_OW 115
16698: GO 16761
16700: LD_INT 2
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16730
16708: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16709: LD_VAR 0 1
16713: PPUSH
16714: LD_VAR 0 6
16718: PPUSH
16719: LD_VAR 0 7
16723: PPUSH
16724: CALL_OW 153
16728: GO 16761
16730: LD_INT 3
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16760
16738: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16739: LD_VAR 0 1
16743: PPUSH
16744: LD_VAR 0 6
16748: PPUSH
16749: LD_VAR 0 7
16753: PPUSH
16754: CALL_OW 154
16758: GO 16761
16760: POP
// end ;
16761: LD_VAR 0 2
16765: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16766: LD_INT 0
16768: PPUSH
16769: PPUSH
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
// if not unit or not building then
16774: LD_VAR 0 1
16778: NOT
16779: PUSH
16780: LD_VAR 0 2
16784: NOT
16785: OR
16786: IFFALSE 16790
// exit ;
16788: GO 16948
// x := GetX ( building ) ;
16790: LD_ADDR_VAR 0 5
16794: PUSH
16795: LD_VAR 0 2
16799: PPUSH
16800: CALL_OW 250
16804: ST_TO_ADDR
// y := GetY ( building ) ;
16805: LD_ADDR_VAR 0 6
16809: PUSH
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 251
16819: ST_TO_ADDR
// for i = 0 to 5 do
16820: LD_ADDR_VAR 0 4
16824: PUSH
16825: DOUBLE
16826: LD_INT 0
16828: DEC
16829: ST_TO_ADDR
16830: LD_INT 5
16832: PUSH
16833: FOR_TO
16834: IFFALSE 16946
// begin _x := ShiftX ( x , i , 3 ) ;
16836: LD_ADDR_VAR 0 7
16840: PUSH
16841: LD_VAR 0 5
16845: PPUSH
16846: LD_VAR 0 4
16850: PPUSH
16851: LD_INT 3
16853: PPUSH
16854: CALL_OW 272
16858: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16859: LD_ADDR_VAR 0 8
16863: PUSH
16864: LD_VAR 0 6
16868: PPUSH
16869: LD_VAR 0 4
16873: PPUSH
16874: LD_INT 3
16876: PPUSH
16877: CALL_OW 273
16881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16882: LD_VAR 0 7
16886: PPUSH
16887: LD_VAR 0 8
16891: PPUSH
16892: CALL_OW 488
16896: NOT
16897: IFFALSE 16901
// continue ;
16899: GO 16833
// if HexInfo ( _x , _y ) = 0 then
16901: LD_VAR 0 7
16905: PPUSH
16906: LD_VAR 0 8
16910: PPUSH
16911: CALL_OW 428
16915: PUSH
16916: LD_INT 0
16918: EQUAL
16919: IFFALSE 16944
// begin ComMoveXY ( unit , _x , _y ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_VAR 0 7
16930: PPUSH
16931: LD_VAR 0 8
16935: PPUSH
16936: CALL_OW 111
// exit ;
16940: POP
16941: POP
16942: GO 16948
// end ; end ;
16944: GO 16833
16946: POP
16947: POP
// end ;
16948: LD_VAR 0 3
16952: RET
// export function ScanBase ( side , base_area ) ; begin
16953: LD_INT 0
16955: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16956: LD_ADDR_VAR 0 3
16960: PUSH
16961: LD_VAR 0 2
16965: PPUSH
16966: LD_INT 81
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PPUSH
16978: CALL_OW 70
16982: ST_TO_ADDR
// end ;
16983: LD_VAR 0 3
16987: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16988: LD_INT 0
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
// result := false ;
16994: LD_ADDR_VAR 0 2
16998: PUSH
16999: LD_INT 0
17001: ST_TO_ADDR
// side := GetSide ( unit ) ;
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL_OW 255
17016: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17017: LD_ADDR_VAR 0 4
17021: PUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 248
17031: ST_TO_ADDR
// case nat of 1 :
17032: LD_VAR 0 4
17036: PUSH
17037: LD_INT 1
17039: DOUBLE
17040: EQUAL
17041: IFTRUE 17045
17043: GO 17056
17045: POP
// tech := tech_lassight ; 2 :
17046: LD_ADDR_VAR 0 5
17050: PUSH
17051: LD_INT 12
17053: ST_TO_ADDR
17054: GO 17095
17056: LD_INT 2
17058: DOUBLE
17059: EQUAL
17060: IFTRUE 17064
17062: GO 17075
17064: POP
// tech := tech_mortar ; 3 :
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_INT 41
17072: ST_TO_ADDR
17073: GO 17095
17075: LD_INT 3
17077: DOUBLE
17078: EQUAL
17079: IFTRUE 17083
17081: GO 17094
17083: POP
// tech := tech_bazooka ; end ;
17084: LD_ADDR_VAR 0 5
17088: PUSH
17089: LD_INT 44
17091: ST_TO_ADDR
17092: GO 17095
17094: POP
// if Researched ( side , tech ) then
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_VAR 0 5
17104: PPUSH
17105: CALL_OW 325
17109: IFFALSE 17136
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17111: LD_ADDR_VAR 0 2
17115: PUSH
17116: LD_INT 5
17118: PUSH
17119: LD_INT 8
17121: PUSH
17122: LD_INT 9
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: PUSH
17130: LD_VAR 0 4
17134: ARRAY
17135: ST_TO_ADDR
// end ;
17136: LD_VAR 0 2
17140: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17141: LD_INT 0
17143: PPUSH
17144: PPUSH
17145: PPUSH
// if not mines then
17146: LD_VAR 0 2
17150: NOT
17151: IFFALSE 17155
// exit ;
17153: GO 17299
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17155: LD_ADDR_VAR 0 5
17159: PUSH
17160: LD_INT 81
17162: PUSH
17163: LD_VAR 0 1
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: LD_INT 21
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 69
17197: ST_TO_ADDR
// for i in mines do
17198: LD_ADDR_VAR 0 4
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17297
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17211: LD_VAR 0 4
17215: PUSH
17216: LD_INT 1
17218: ARRAY
17219: PPUSH
17220: LD_VAR 0 4
17224: PUSH
17225: LD_INT 2
17227: ARRAY
17228: PPUSH
17229: CALL_OW 458
17233: NOT
17234: IFFALSE 17238
// continue ;
17236: GO 17208
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17238: LD_VAR 0 4
17242: PUSH
17243: LD_INT 1
17245: ARRAY
17246: PPUSH
17247: LD_VAR 0 4
17251: PUSH
17252: LD_INT 2
17254: ARRAY
17255: PPUSH
17256: CALL_OW 428
17260: PUSH
17261: LD_VAR 0 5
17265: IN
17266: IFFALSE 17295
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17268: LD_VAR 0 4
17272: PUSH
17273: LD_INT 1
17275: ARRAY
17276: PPUSH
17277: LD_VAR 0 4
17281: PUSH
17282: LD_INT 2
17284: ARRAY
17285: PPUSH
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 456
// end ;
17295: GO 17208
17297: POP
17298: POP
// end ;
17299: LD_VAR 0 3
17303: RET
// export function Count ( array ) ; begin
17304: LD_INT 0
17306: PPUSH
// result := array + 0 ;
17307: LD_ADDR_VAR 0 2
17311: PUSH
17312: LD_VAR 0 1
17316: PUSH
17317: LD_INT 0
17319: PLUS
17320: ST_TO_ADDR
// end ;
17321: LD_VAR 0 2
17325: RET
// export function IsEmpty ( building ) ; begin
17326: LD_INT 0
17328: PPUSH
// if not building then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17381
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17338: LD_ADDR_VAR 0 2
17342: PUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 22
17350: PUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 255
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 58
17367: PUSH
17368: EMPTY
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 69
17379: IN
17380: ST_TO_ADDR
// end ;
17381: LD_VAR 0 2
17385: RET
// export function IsNotFull ( building ) ; var places ; begin
17386: LD_INT 0
17388: PPUSH
17389: PPUSH
// if not building then
17390: LD_VAR 0 1
17394: NOT
17395: IFFALSE 17399
// exit ;
17397: GO 17427
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17399: LD_ADDR_VAR 0 2
17403: PUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 62
17414: PUSH
17415: EMPTY
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PPUSH
17422: CALL_OW 72
17426: ST_TO_ADDR
// end ;
17427: LD_VAR 0 2
17431: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
17437: PPUSH
// tmp := [ ] ;
17438: LD_ADDR_VAR 0 3
17442: PUSH
17443: EMPTY
17444: ST_TO_ADDR
// list := [ ] ;
17445: LD_ADDR_VAR 0 5
17449: PUSH
17450: EMPTY
17451: ST_TO_ADDR
// for i = 16 to 25 do
17452: LD_ADDR_VAR 0 4
17456: PUSH
17457: DOUBLE
17458: LD_INT 16
17460: DEC
17461: ST_TO_ADDR
17462: LD_INT 25
17464: PUSH
17465: FOR_TO
17466: IFFALSE 17539
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17468: LD_ADDR_VAR 0 3
17472: PUSH
17473: LD_VAR 0 3
17477: PUSH
17478: LD_INT 22
17480: PUSH
17481: LD_VAR 0 1
17485: PPUSH
17486: CALL_OW 255
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 91
17497: PUSH
17498: LD_VAR 0 1
17502: PUSH
17503: LD_INT 6
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 30
17513: PUSH
17514: LD_VAR 0 4
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: PPUSH
17531: CALL_OW 69
17535: ADD
17536: ST_TO_ADDR
17537: GO 17465
17539: POP
17540: POP
// for i = 1 to tmp do
17541: LD_ADDR_VAR 0 4
17545: PUSH
17546: DOUBLE
17547: LD_INT 1
17549: DEC
17550: ST_TO_ADDR
17551: LD_VAR 0 3
17555: PUSH
17556: FOR_TO
17557: IFFALSE 17645
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17559: LD_ADDR_VAR 0 5
17563: PUSH
17564: LD_VAR 0 5
17568: PUSH
17569: LD_VAR 0 3
17573: PUSH
17574: LD_VAR 0 4
17578: ARRAY
17579: PPUSH
17580: CALL_OW 266
17584: PUSH
17585: LD_VAR 0 3
17589: PUSH
17590: LD_VAR 0 4
17594: ARRAY
17595: PPUSH
17596: CALL_OW 250
17600: PUSH
17601: LD_VAR 0 3
17605: PUSH
17606: LD_VAR 0 4
17610: ARRAY
17611: PPUSH
17612: CALL_OW 251
17616: PUSH
17617: LD_VAR 0 3
17621: PUSH
17622: LD_VAR 0 4
17626: ARRAY
17627: PPUSH
17628: CALL_OW 254
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: ADD
17642: ST_TO_ADDR
17643: GO 17556
17645: POP
17646: POP
// result := list ;
17647: LD_ADDR_VAR 0 2
17651: PUSH
17652: LD_VAR 0 5
17656: ST_TO_ADDR
// end ;
17657: LD_VAR 0 2
17661: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
// if not factory then
17671: LD_VAR 0 1
17675: NOT
17676: IFFALSE 17680
// exit ;
17678: GO 18273
// if control = control_apeman then
17680: LD_VAR 0 4
17684: PUSH
17685: LD_INT 5
17687: EQUAL
17688: IFFALSE 17797
// begin tmp := UnitsInside ( factory ) ;
17690: LD_ADDR_VAR 0 8
17694: PUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 313
17704: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17705: LD_VAR 0 8
17709: PPUSH
17710: LD_INT 25
17712: PUSH
17713: LD_INT 12
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PPUSH
17720: CALL_OW 72
17724: NOT
17725: IFFALSE 17735
// control := control_manual ;
17727: LD_ADDR_VAR 0 4
17731: PUSH
17732: LD_INT 1
17734: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17735: LD_ADDR_VAR 0 8
17739: PUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: CALL 17432 0 1
17749: ST_TO_ADDR
// if tmp then
17750: LD_VAR 0 8
17754: IFFALSE 17797
// begin for i in tmp do
17756: LD_ADDR_VAR 0 7
17760: PUSH
17761: LD_VAR 0 8
17765: PUSH
17766: FOR_IN
17767: IFFALSE 17795
// if i [ 1 ] = b_ext_radio then
17769: LD_VAR 0 7
17773: PUSH
17774: LD_INT 1
17776: ARRAY
17777: PUSH
17778: LD_INT 22
17780: EQUAL
17781: IFFALSE 17793
// begin control := control_remote ;
17783: LD_ADDR_VAR 0 4
17787: PUSH
17788: LD_INT 2
17790: ST_TO_ADDR
// break ;
17791: GO 17795
// end ;
17793: GO 17766
17795: POP
17796: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_VAR 0 4
17816: PPUSH
17817: LD_VAR 0 5
17821: PPUSH
17822: CALL_OW 448
17826: IFFALSE 17861
// begin result := [ chassis , engine , control , weapon ] ;
17828: LD_ADDR_VAR 0 6
17832: PUSH
17833: LD_VAR 0 2
17837: PUSH
17838: LD_VAR 0 3
17842: PUSH
17843: LD_VAR 0 4
17847: PUSH
17848: LD_VAR 0 5
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: ST_TO_ADDR
// exit ;
17859: GO 18273
// end ; _chassis := AvailableChassisList ( factory ) ;
17861: LD_ADDR_VAR 0 9
17865: PUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 475
17875: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17876: LD_ADDR_VAR 0 11
17880: PUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 476
17890: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17891: LD_ADDR_VAR 0 12
17895: PUSH
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 477
17905: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17906: LD_ADDR_VAR 0 10
17910: PUSH
17911: LD_VAR 0 1
17915: PPUSH
17916: CALL_OW 478
17920: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17921: LD_VAR 0 9
17925: NOT
17926: PUSH
17927: LD_VAR 0 11
17931: NOT
17932: OR
17933: PUSH
17934: LD_VAR 0 12
17938: NOT
17939: OR
17940: PUSH
17941: LD_VAR 0 10
17945: NOT
17946: OR
17947: IFFALSE 17982
// begin result := [ chassis , engine , control , weapon ] ;
17949: LD_ADDR_VAR 0 6
17953: PUSH
17954: LD_VAR 0 2
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_VAR 0 4
17968: PUSH
17969: LD_VAR 0 5
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: ST_TO_ADDR
// exit ;
17980: GO 18273
// end ; if not chassis in _chassis then
17982: LD_VAR 0 2
17986: PUSH
17987: LD_VAR 0 9
17991: IN
17992: NOT
17993: IFFALSE 18019
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17995: LD_ADDR_VAR 0 2
17999: PUSH
18000: LD_VAR 0 9
18004: PUSH
18005: LD_INT 1
18007: PPUSH
18008: LD_VAR 0 9
18012: PPUSH
18013: CALL_OW 12
18017: ARRAY
18018: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18019: LD_VAR 0 2
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: CALL 18278 0 2
18033: NOT
18034: IFFALSE 18093
// repeat engine := _engine [ 1 ] ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 11
18045: PUSH
18046: LD_INT 1
18048: ARRAY
18049: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18050: LD_ADDR_VAR 0 11
18054: PUSH
18055: LD_VAR 0 11
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: CALL_OW 3
18067: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18068: LD_VAR 0 2
18072: PPUSH
18073: LD_VAR 0 3
18077: PPUSH
18078: CALL 18278 0 2
18082: PUSH
18083: LD_VAR 0 11
18087: PUSH
18088: EMPTY
18089: EQUAL
18090: OR
18091: IFFALSE 18036
// if not control in _control then
18093: LD_VAR 0 4
18097: PUSH
18098: LD_VAR 0 12
18102: IN
18103: NOT
18104: IFFALSE 18130
// control := _control [ rand ( 1 , _control ) ] ;
18106: LD_ADDR_VAR 0 4
18110: PUSH
18111: LD_VAR 0 12
18115: PUSH
18116: LD_INT 1
18118: PPUSH
18119: LD_VAR 0 12
18123: PPUSH
18124: CALL_OW 12
18128: ARRAY
18129: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18130: LD_VAR 0 2
18134: PPUSH
18135: LD_VAR 0 5
18139: PPUSH
18140: CALL 18498 0 2
18144: NOT
18145: IFFALSE 18204
// repeat weapon := _weapon [ 1 ] ;
18147: LD_ADDR_VAR 0 5
18151: PUSH
18152: LD_VAR 0 10
18156: PUSH
18157: LD_INT 1
18159: ARRAY
18160: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18161: LD_ADDR_VAR 0 10
18165: PUSH
18166: LD_VAR 0 10
18170: PPUSH
18171: LD_INT 1
18173: PPUSH
18174: CALL_OW 3
18178: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18179: LD_VAR 0 2
18183: PPUSH
18184: LD_VAR 0 5
18188: PPUSH
18189: CALL 18498 0 2
18193: PUSH
18194: LD_VAR 0 10
18198: PUSH
18199: EMPTY
18200: EQUAL
18201: OR
18202: IFFALSE 18147
// result := [ ] ;
18204: LD_ADDR_VAR 0 6
18208: PUSH
18209: EMPTY
18210: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18211: LD_VAR 0 1
18215: PPUSH
18216: LD_VAR 0 2
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_VAR 0 4
18230: PPUSH
18231: LD_VAR 0 5
18235: PPUSH
18236: CALL_OW 448
18240: IFFALSE 18273
// result := [ chassis , engine , control , weapon ] ;
18242: LD_ADDR_VAR 0 6
18246: PUSH
18247: LD_VAR 0 2
18251: PUSH
18252: LD_VAR 0 3
18256: PUSH
18257: LD_VAR 0 4
18261: PUSH
18262: LD_VAR 0 5
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: ST_TO_ADDR
// end ;
18273: LD_VAR 0 6
18277: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18278: LD_INT 0
18280: PPUSH
// if not chassis or not engine then
18281: LD_VAR 0 1
18285: NOT
18286: PUSH
18287: LD_VAR 0 2
18291: NOT
18292: OR
18293: IFFALSE 18297
// exit ;
18295: GO 18493
// case engine of engine_solar :
18297: LD_VAR 0 2
18301: PUSH
18302: LD_INT 2
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18348
18310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18311: LD_ADDR_VAR 0 3
18315: PUSH
18316: LD_INT 11
18318: PUSH
18319: LD_INT 12
18321: PUSH
18322: LD_INT 13
18324: PUSH
18325: LD_INT 14
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: LD_INT 2
18333: PUSH
18334: LD_INT 3
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
18346: GO 18477
18348: LD_INT 1
18350: DOUBLE
18351: EQUAL
18352: IFTRUE 18356
18354: GO 18418
18356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18357: LD_ADDR_VAR 0 3
18361: PUSH
18362: LD_INT 11
18364: PUSH
18365: LD_INT 12
18367: PUSH
18368: LD_INT 13
18370: PUSH
18371: LD_INT 14
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 3
18382: PUSH
18383: LD_INT 4
18385: PUSH
18386: LD_INT 5
18388: PUSH
18389: LD_INT 21
18391: PUSH
18392: LD_INT 23
18394: PUSH
18395: LD_INT 22
18397: PUSH
18398: LD_INT 24
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: ST_TO_ADDR
18416: GO 18477
18418: LD_INT 3
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18476
18426: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18427: LD_ADDR_VAR 0 3
18431: PUSH
18432: LD_INT 13
18434: PUSH
18435: LD_INT 14
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: LD_INT 4
18446: PUSH
18447: LD_INT 5
18449: PUSH
18450: LD_INT 21
18452: PUSH
18453: LD_INT 22
18455: PUSH
18456: LD_INT 23
18458: PUSH
18459: LD_INT 24
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: ST_TO_ADDR
18474: GO 18477
18476: POP
// result := ( chassis in result ) ;
18477: LD_ADDR_VAR 0 3
18481: PUSH
18482: LD_VAR 0 1
18486: PUSH
18487: LD_VAR 0 3
18491: IN
18492: ST_TO_ADDR
// end ;
18493: LD_VAR 0 3
18497: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18498: LD_INT 0
18500: PPUSH
// if not chassis or not weapon then
18501: LD_VAR 0 1
18505: NOT
18506: PUSH
18507: LD_VAR 0 2
18511: NOT
18512: OR
18513: IFFALSE 18517
// exit ;
18515: GO 19577
// case weapon of us_machine_gun :
18517: LD_VAR 0 2
18521: PUSH
18522: LD_INT 2
18524: DOUBLE
18525: EQUAL
18526: IFTRUE 18530
18528: GO 18560
18530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 4
18547: PUSH
18548: LD_INT 5
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: ST_TO_ADDR
18558: GO 19561
18560: LD_INT 3
18562: DOUBLE
18563: EQUAL
18564: IFTRUE 18568
18566: GO 18598
18568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18569: LD_ADDR_VAR 0 3
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 3
18582: PUSH
18583: LD_INT 4
18585: PUSH
18586: LD_INT 5
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: ST_TO_ADDR
18596: GO 19561
18598: LD_INT 11
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18636
18606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18607: LD_ADDR_VAR 0 3
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 3
18620: PUSH
18621: LD_INT 4
18623: PUSH
18624: LD_INT 5
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
18634: GO 19561
18636: LD_INT 4
18638: DOUBLE
18639: EQUAL
18640: IFTRUE 18644
18642: GO 18670
18644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 3
18655: PUSH
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: ST_TO_ADDR
18668: GO 19561
18670: LD_INT 5
18672: DOUBLE
18673: EQUAL
18674: IFTRUE 18678
18676: GO 18704
18678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18679: LD_ADDR_VAR 0 3
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: LD_INT 3
18689: PUSH
18690: LD_INT 4
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
18702: GO 19561
18704: LD_INT 9
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18738
18712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18713: LD_ADDR_VAR 0 3
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 3
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: ST_TO_ADDR
18736: GO 19561
18738: LD_INT 7
18740: DOUBLE
18741: EQUAL
18742: IFTRUE 18746
18744: GO 18772
18746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: LD_INT 4
18760: PUSH
18761: LD_INT 5
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: ST_TO_ADDR
18770: GO 19561
18772: LD_INT 12
18774: DOUBLE
18775: EQUAL
18776: IFTRUE 18780
18778: GO 18806
18780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18781: LD_ADDR_VAR 0 3
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 3
18791: PUSH
18792: LD_INT 4
18794: PUSH
18795: LD_INT 5
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: ST_TO_ADDR
18804: GO 19561
18806: LD_INT 13
18808: DOUBLE
18809: EQUAL
18810: IFTRUE 18814
18812: GO 18840
18814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18815: LD_ADDR_VAR 0 3
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 4
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: ST_TO_ADDR
18838: GO 19561
18840: LD_INT 14
18842: DOUBLE
18843: EQUAL
18844: IFTRUE 18848
18846: GO 18866
18848: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_INT 4
18856: PUSH
18857: LD_INT 5
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: ST_TO_ADDR
18864: GO 19561
18866: LD_INT 6
18868: DOUBLE
18869: EQUAL
18870: IFTRUE 18874
18872: GO 18892
18874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: LD_INT 4
18882: PUSH
18883: LD_INT 5
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: ST_TO_ADDR
18890: GO 19561
18892: LD_INT 10
18894: DOUBLE
18895: EQUAL
18896: IFTRUE 18900
18898: GO 18918
18900: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18901: LD_ADDR_VAR 0 3
18905: PUSH
18906: LD_INT 4
18908: PUSH
18909: LD_INT 5
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: ST_TO_ADDR
18916: GO 19561
18918: LD_INT 22
18920: DOUBLE
18921: EQUAL
18922: IFTRUE 18926
18924: GO 18952
18926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18927: LD_ADDR_VAR 0 3
18931: PUSH
18932: LD_INT 11
18934: PUSH
18935: LD_INT 12
18937: PUSH
18938: LD_INT 13
18940: PUSH
18941: LD_INT 14
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: ST_TO_ADDR
18950: GO 19561
18952: LD_INT 23
18954: DOUBLE
18955: EQUAL
18956: IFTRUE 18960
18958: GO 18986
18960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18961: LD_ADDR_VAR 0 3
18965: PUSH
18966: LD_INT 11
18968: PUSH
18969: LD_INT 12
18971: PUSH
18972: LD_INT 13
18974: PUSH
18975: LD_INT 14
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: ST_TO_ADDR
18984: GO 19561
18986: LD_INT 24
18988: DOUBLE
18989: EQUAL
18990: IFTRUE 18994
18992: GO 19020
18994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18995: LD_ADDR_VAR 0 3
18999: PUSH
19000: LD_INT 11
19002: PUSH
19003: LD_INT 12
19005: PUSH
19006: LD_INT 13
19008: PUSH
19009: LD_INT 14
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 19561
19020: LD_INT 30
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19054
19028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19029: LD_ADDR_VAR 0 3
19033: PUSH
19034: LD_INT 11
19036: PUSH
19037: LD_INT 12
19039: PUSH
19040: LD_INT 13
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: ST_TO_ADDR
19052: GO 19561
19054: LD_INT 25
19056: DOUBLE
19057: EQUAL
19058: IFTRUE 19062
19060: GO 19080
19062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19063: LD_ADDR_VAR 0 3
19067: PUSH
19068: LD_INT 13
19070: PUSH
19071: LD_INT 14
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: ST_TO_ADDR
19078: GO 19561
19080: LD_INT 27
19082: DOUBLE
19083: EQUAL
19084: IFTRUE 19088
19086: GO 19106
19088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19089: LD_ADDR_VAR 0 3
19093: PUSH
19094: LD_INT 13
19096: PUSH
19097: LD_INT 14
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: ST_TO_ADDR
19104: GO 19561
19106: LD_INT 92
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19140
19114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_INT 11
19122: PUSH
19123: LD_INT 12
19125: PUSH
19126: LD_INT 13
19128: PUSH
19129: LD_INT 14
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: ST_TO_ADDR
19138: GO 19561
19140: LD_INT 28
19142: DOUBLE
19143: EQUAL
19144: IFTRUE 19148
19146: GO 19166
19148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19149: LD_ADDR_VAR 0 3
19153: PUSH
19154: LD_INT 13
19156: PUSH
19157: LD_INT 14
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: ST_TO_ADDR
19164: GO 19561
19166: LD_INT 29
19168: DOUBLE
19169: EQUAL
19170: IFTRUE 19174
19172: GO 19192
19174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 13
19182: PUSH
19183: LD_INT 14
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: ST_TO_ADDR
19190: GO 19561
19192: LD_INT 31
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19218
19200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: LD_INT 13
19208: PUSH
19209: LD_INT 14
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: ST_TO_ADDR
19216: GO 19561
19218: LD_INT 26
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19244
19226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19227: LD_ADDR_VAR 0 3
19231: PUSH
19232: LD_INT 13
19234: PUSH
19235: LD_INT 14
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: ST_TO_ADDR
19242: GO 19561
19244: LD_INT 42
19246: DOUBLE
19247: EQUAL
19248: IFTRUE 19252
19250: GO 19278
19252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_INT 23
19266: PUSH
19267: LD_INT 24
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: ST_TO_ADDR
19276: GO 19561
19278: LD_INT 43
19280: DOUBLE
19281: EQUAL
19282: IFTRUE 19286
19284: GO 19312
19286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19287: LD_ADDR_VAR 0 3
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 22
19297: PUSH
19298: LD_INT 23
19300: PUSH
19301: LD_INT 24
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: ST_TO_ADDR
19310: GO 19561
19312: LD_INT 44
19314: DOUBLE
19315: EQUAL
19316: IFTRUE 19320
19318: GO 19346
19320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19321: LD_ADDR_VAR 0 3
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 22
19331: PUSH
19332: LD_INT 23
19334: PUSH
19335: LD_INT 24
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: ST_TO_ADDR
19344: GO 19561
19346: LD_INT 45
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19380
19354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19355: LD_ADDR_VAR 0 3
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_INT 23
19368: PUSH
19369: LD_INT 24
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: ST_TO_ADDR
19378: GO 19561
19380: LD_INT 49
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19414
19388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 21
19396: PUSH
19397: LD_INT 22
19399: PUSH
19400: LD_INT 23
19402: PUSH
19403: LD_INT 24
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: ST_TO_ADDR
19412: GO 19561
19414: LD_INT 51
19416: DOUBLE
19417: EQUAL
19418: IFTRUE 19422
19420: GO 19448
19422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19423: LD_ADDR_VAR 0 3
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 22
19433: PUSH
19434: LD_INT 23
19436: PUSH
19437: LD_INT 24
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: ST_TO_ADDR
19446: GO 19561
19448: LD_INT 52
19450: DOUBLE
19451: EQUAL
19452: IFTRUE 19456
19454: GO 19482
19456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19457: LD_ADDR_VAR 0 3
19461: PUSH
19462: LD_INT 21
19464: PUSH
19465: LD_INT 22
19467: PUSH
19468: LD_INT 23
19470: PUSH
19471: LD_INT 24
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: ST_TO_ADDR
19480: GO 19561
19482: LD_INT 53
19484: DOUBLE
19485: EQUAL
19486: IFTRUE 19490
19488: GO 19508
19490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_INT 23
19498: PUSH
19499: LD_INT 24
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: ST_TO_ADDR
19506: GO 19561
19508: LD_INT 46
19510: DOUBLE
19511: EQUAL
19512: IFTRUE 19516
19514: GO 19534
19516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: LD_INT 23
19524: PUSH
19525: LD_INT 24
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: ST_TO_ADDR
19532: GO 19561
19534: LD_INT 47
19536: DOUBLE
19537: EQUAL
19538: IFTRUE 19542
19540: GO 19560
19542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19543: LD_ADDR_VAR 0 3
19547: PUSH
19548: LD_INT 23
19550: PUSH
19551: LD_INT 24
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: ST_TO_ADDR
19558: GO 19561
19560: POP
// result := ( chassis in result ) ;
19561: LD_ADDR_VAR 0 3
19565: PUSH
19566: LD_VAR 0 1
19570: PUSH
19571: LD_VAR 0 3
19575: IN
19576: ST_TO_ADDR
// end ;
19577: LD_VAR 0 3
19581: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
19590: PPUSH
// result := array ;
19591: LD_ADDR_VAR 0 5
19595: PUSH
19596: LD_VAR 0 1
19600: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19601: LD_VAR 0 1
19605: NOT
19606: PUSH
19607: LD_VAR 0 2
19611: NOT
19612: OR
19613: PUSH
19614: LD_VAR 0 3
19618: NOT
19619: OR
19620: PUSH
19621: LD_VAR 0 2
19625: PUSH
19626: LD_VAR 0 1
19630: GREATER
19631: OR
19632: PUSH
19633: LD_VAR 0 3
19637: PUSH
19638: LD_VAR 0 1
19642: GREATER
19643: OR
19644: IFFALSE 19648
// exit ;
19646: GO 19944
// if direction then
19648: LD_VAR 0 4
19652: IFFALSE 19716
// begin d := 1 ;
19654: LD_ADDR_VAR 0 9
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if i_from > i_to then
19662: LD_VAR 0 2
19666: PUSH
19667: LD_VAR 0 3
19671: GREATER
19672: IFFALSE 19698
// length := ( array - i_from ) + i_to else
19674: LD_ADDR_VAR 0 11
19678: PUSH
19679: LD_VAR 0 1
19683: PUSH
19684: LD_VAR 0 2
19688: MINUS
19689: PUSH
19690: LD_VAR 0 3
19694: PLUS
19695: ST_TO_ADDR
19696: GO 19714
// length := i_to - i_from ;
19698: LD_ADDR_VAR 0 11
19702: PUSH
19703: LD_VAR 0 3
19707: PUSH
19708: LD_VAR 0 2
19712: MINUS
19713: ST_TO_ADDR
// end else
19714: GO 19777
// begin d := - 1 ;
19716: LD_ADDR_VAR 0 9
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: ST_TO_ADDR
// if i_from > i_to then
19725: LD_VAR 0 2
19729: PUSH
19730: LD_VAR 0 3
19734: GREATER
19735: IFFALSE 19755
// length := i_from - i_to else
19737: LD_ADDR_VAR 0 11
19741: PUSH
19742: LD_VAR 0 2
19746: PUSH
19747: LD_VAR 0 3
19751: MINUS
19752: ST_TO_ADDR
19753: GO 19777
// length := ( array - i_to ) + i_from ;
19755: LD_ADDR_VAR 0 11
19759: PUSH
19760: LD_VAR 0 1
19764: PUSH
19765: LD_VAR 0 3
19769: MINUS
19770: PUSH
19771: LD_VAR 0 2
19775: PLUS
19776: ST_TO_ADDR
// end ; if not length then
19777: LD_VAR 0 11
19781: NOT
19782: IFFALSE 19786
// exit ;
19784: GO 19944
// tmp := array ;
19786: LD_ADDR_VAR 0 10
19790: PUSH
19791: LD_VAR 0 1
19795: ST_TO_ADDR
// for i = 1 to length do
19796: LD_ADDR_VAR 0 6
19800: PUSH
19801: DOUBLE
19802: LD_INT 1
19804: DEC
19805: ST_TO_ADDR
19806: LD_VAR 0 11
19810: PUSH
19811: FOR_TO
19812: IFFALSE 19932
// begin for j = 1 to array do
19814: LD_ADDR_VAR 0 7
19818: PUSH
19819: DOUBLE
19820: LD_INT 1
19822: DEC
19823: ST_TO_ADDR
19824: LD_VAR 0 1
19828: PUSH
19829: FOR_TO
19830: IFFALSE 19918
// begin k := j + d ;
19832: LD_ADDR_VAR 0 8
19836: PUSH
19837: LD_VAR 0 7
19841: PUSH
19842: LD_VAR 0 9
19846: PLUS
19847: ST_TO_ADDR
// if k > array then
19848: LD_VAR 0 8
19852: PUSH
19853: LD_VAR 0 1
19857: GREATER
19858: IFFALSE 19868
// k := 1 ;
19860: LD_ADDR_VAR 0 8
19864: PUSH
19865: LD_INT 1
19867: ST_TO_ADDR
// if not k then
19868: LD_VAR 0 8
19872: NOT
19873: IFFALSE 19885
// k := array ;
19875: LD_ADDR_VAR 0 8
19879: PUSH
19880: LD_VAR 0 1
19884: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19885: LD_ADDR_VAR 0 10
19889: PUSH
19890: LD_VAR 0 10
19894: PPUSH
19895: LD_VAR 0 8
19899: PPUSH
19900: LD_VAR 0 1
19904: PUSH
19905: LD_VAR 0 7
19909: ARRAY
19910: PPUSH
19911: CALL_OW 1
19915: ST_TO_ADDR
// end ;
19916: GO 19829
19918: POP
19919: POP
// array := tmp ;
19920: LD_ADDR_VAR 0 1
19924: PUSH
19925: LD_VAR 0 10
19929: ST_TO_ADDR
// end ;
19930: GO 19811
19932: POP
19933: POP
// result := array ;
19934: LD_ADDR_VAR 0 5
19938: PUSH
19939: LD_VAR 0 1
19943: ST_TO_ADDR
// end ;
19944: LD_VAR 0 5
19948: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19949: LD_INT 0
19951: PPUSH
19952: PPUSH
// result := 0 ;
19953: LD_ADDR_VAR 0 3
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// if not array or not value in array then
19961: LD_VAR 0 1
19965: NOT
19966: PUSH
19967: LD_VAR 0 2
19971: PUSH
19972: LD_VAR 0 1
19976: IN
19977: NOT
19978: OR
19979: IFFALSE 19983
// exit ;
19981: GO 20037
// for i = 1 to array do
19983: LD_ADDR_VAR 0 4
19987: PUSH
19988: DOUBLE
19989: LD_INT 1
19991: DEC
19992: ST_TO_ADDR
19993: LD_VAR 0 1
19997: PUSH
19998: FOR_TO
19999: IFFALSE 20035
// if value = array [ i ] then
20001: LD_VAR 0 2
20005: PUSH
20006: LD_VAR 0 1
20010: PUSH
20011: LD_VAR 0 4
20015: ARRAY
20016: EQUAL
20017: IFFALSE 20033
// begin result := i ;
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: LD_VAR 0 4
20028: ST_TO_ADDR
// exit ;
20029: POP
20030: POP
20031: GO 20037
// end ;
20033: GO 19998
20035: POP
20036: POP
// end ;
20037: LD_VAR 0 3
20041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20042: LD_INT 0
20044: PPUSH
// vc_chassis := chassis ;
20045: LD_ADDR_OWVAR 37
20049: PUSH
20050: LD_VAR 0 1
20054: ST_TO_ADDR
// vc_engine := engine ;
20055: LD_ADDR_OWVAR 39
20059: PUSH
20060: LD_VAR 0 2
20064: ST_TO_ADDR
// vc_control := control ;
20065: LD_ADDR_OWVAR 38
20069: PUSH
20070: LD_VAR 0 3
20074: ST_TO_ADDR
// vc_weapon := weapon ;
20075: LD_ADDR_OWVAR 40
20079: PUSH
20080: LD_VAR 0 4
20084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20085: LD_ADDR_OWVAR 41
20089: PUSH
20090: LD_VAR 0 5
20094: ST_TO_ADDR
// end ;
20095: LD_VAR 0 6
20099: RET
// export function WantPlant ( unit ) ; var task ; begin
20100: LD_INT 0
20102: PPUSH
20103: PPUSH
// result := false ;
20104: LD_ADDR_VAR 0 2
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20112: LD_ADDR_VAR 0 3
20116: PUSH
20117: LD_VAR 0 1
20121: PPUSH
20122: CALL_OW 437
20126: ST_TO_ADDR
// if task then
20127: LD_VAR 0 3
20131: IFFALSE 20159
// if task [ 1 ] [ 1 ] = p then
20133: LD_VAR 0 3
20137: PUSH
20138: LD_INT 1
20140: ARRAY
20141: PUSH
20142: LD_INT 1
20144: ARRAY
20145: PUSH
20146: LD_STRING p
20148: EQUAL
20149: IFFALSE 20159
// result := true ;
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: LD_INT 1
20158: ST_TO_ADDR
// end ;
20159: LD_VAR 0 2
20163: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20164: LD_INT 0
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
// if pos < 1 then
20170: LD_VAR 0 2
20174: PUSH
20175: LD_INT 1
20177: LESS
20178: IFFALSE 20182
// exit ;
20180: GO 20485
// if pos = 1 then
20182: LD_VAR 0 2
20186: PUSH
20187: LD_INT 1
20189: EQUAL
20190: IFFALSE 20223
// result := Replace ( arr , pos [ 1 ] , value ) else
20192: LD_ADDR_VAR 0 4
20196: PUSH
20197: LD_VAR 0 1
20201: PPUSH
20202: LD_VAR 0 2
20206: PUSH
20207: LD_INT 1
20209: ARRAY
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: CALL_OW 1
20220: ST_TO_ADDR
20221: GO 20485
// begin tmp := arr ;
20223: LD_ADDR_VAR 0 6
20227: PUSH
20228: LD_VAR 0 1
20232: ST_TO_ADDR
// s_arr := [ tmp ] ;
20233: LD_ADDR_VAR 0 7
20237: PUSH
20238: LD_VAR 0 6
20242: PUSH
20243: EMPTY
20244: LIST
20245: ST_TO_ADDR
// for i = 1 to pos - 1 do
20246: LD_ADDR_VAR 0 5
20250: PUSH
20251: DOUBLE
20252: LD_INT 1
20254: DEC
20255: ST_TO_ADDR
20256: LD_VAR 0 2
20260: PUSH
20261: LD_INT 1
20263: MINUS
20264: PUSH
20265: FOR_TO
20266: IFFALSE 20311
// begin tmp := tmp [ pos [ i ] ] ;
20268: LD_ADDR_VAR 0 6
20272: PUSH
20273: LD_VAR 0 6
20277: PUSH
20278: LD_VAR 0 2
20282: PUSH
20283: LD_VAR 0 5
20287: ARRAY
20288: ARRAY
20289: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20290: LD_ADDR_VAR 0 7
20294: PUSH
20295: LD_VAR 0 7
20299: PUSH
20300: LD_VAR 0 6
20304: PUSH
20305: EMPTY
20306: LIST
20307: ADD
20308: ST_TO_ADDR
// end ;
20309: GO 20265
20311: POP
20312: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20313: LD_ADDR_VAR 0 6
20317: PUSH
20318: LD_VAR 0 6
20322: PPUSH
20323: LD_VAR 0 2
20327: PUSH
20328: LD_VAR 0 2
20332: ARRAY
20333: PPUSH
20334: LD_VAR 0 3
20338: PPUSH
20339: CALL_OW 1
20343: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20344: LD_ADDR_VAR 0 7
20348: PUSH
20349: LD_VAR 0 7
20353: PPUSH
20354: LD_VAR 0 7
20358: PPUSH
20359: LD_VAR 0 6
20363: PPUSH
20364: CALL_OW 1
20368: ST_TO_ADDR
// for i = s_arr downto 2 do
20369: LD_ADDR_VAR 0 5
20373: PUSH
20374: DOUBLE
20375: LD_VAR 0 7
20379: INC
20380: ST_TO_ADDR
20381: LD_INT 2
20383: PUSH
20384: FOR_DOWNTO
20385: IFFALSE 20469
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20387: LD_ADDR_VAR 0 6
20391: PUSH
20392: LD_VAR 0 7
20396: PUSH
20397: LD_VAR 0 5
20401: PUSH
20402: LD_INT 1
20404: MINUS
20405: ARRAY
20406: PPUSH
20407: LD_VAR 0 2
20411: PUSH
20412: LD_VAR 0 5
20416: PUSH
20417: LD_INT 1
20419: MINUS
20420: ARRAY
20421: PPUSH
20422: LD_VAR 0 7
20426: PUSH
20427: LD_VAR 0 5
20431: ARRAY
20432: PPUSH
20433: CALL_OW 1
20437: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20438: LD_ADDR_VAR 0 7
20442: PUSH
20443: LD_VAR 0 7
20447: PPUSH
20448: LD_VAR 0 5
20452: PUSH
20453: LD_INT 1
20455: MINUS
20456: PPUSH
20457: LD_VAR 0 6
20461: PPUSH
20462: CALL_OW 1
20466: ST_TO_ADDR
// end ;
20467: GO 20384
20469: POP
20470: POP
// result := s_arr [ 1 ] ;
20471: LD_ADDR_VAR 0 4
20475: PUSH
20476: LD_VAR 0 7
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: ST_TO_ADDR
// end ; end ;
20485: LD_VAR 0 4
20489: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20490: LD_INT 0
20492: PPUSH
20493: PPUSH
// if not list then
20494: LD_VAR 0 1
20498: NOT
20499: IFFALSE 20503
// exit ;
20501: GO 20594
// i := list [ pos1 ] ;
20503: LD_ADDR_VAR 0 5
20507: PUSH
20508: LD_VAR 0 1
20512: PUSH
20513: LD_VAR 0 2
20517: ARRAY
20518: ST_TO_ADDR
// if not i then
20519: LD_VAR 0 5
20523: NOT
20524: IFFALSE 20528
// exit ;
20526: GO 20594
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20528: LD_ADDR_VAR 0 1
20532: PUSH
20533: LD_VAR 0 1
20537: PPUSH
20538: LD_VAR 0 2
20542: PPUSH
20543: LD_VAR 0 1
20547: PUSH
20548: LD_VAR 0 3
20552: ARRAY
20553: PPUSH
20554: CALL_OW 1
20558: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20559: LD_ADDR_VAR 0 1
20563: PUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: LD_VAR 0 3
20573: PPUSH
20574: LD_VAR 0 5
20578: PPUSH
20579: CALL_OW 1
20583: ST_TO_ADDR
// result := list ;
20584: LD_ADDR_VAR 0 4
20588: PUSH
20589: LD_VAR 0 1
20593: ST_TO_ADDR
// end ;
20594: LD_VAR 0 4
20598: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20599: LD_INT 0
20601: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20602: LD_ADDR_VAR 0 5
20606: PUSH
20607: LD_VAR 0 1
20611: PPUSH
20612: CALL_OW 250
20616: PPUSH
20617: LD_VAR 0 1
20621: PPUSH
20622: CALL_OW 251
20626: PPUSH
20627: LD_VAR 0 2
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: LD_VAR 0 4
20641: PPUSH
20642: CALL 21020 0 5
20646: ST_TO_ADDR
// end ;
20647: LD_VAR 0 5
20651: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20652: LD_INT 0
20654: PPUSH
20655: PPUSH
20656: PPUSH
20657: PPUSH
// if not list or not unit then
20658: LD_VAR 0 2
20662: NOT
20663: PUSH
20664: LD_VAR 0 1
20668: NOT
20669: OR
20670: IFFALSE 20674
// exit ;
20672: GO 21015
// result := [ ] ;
20674: LD_ADDR_VAR 0 5
20678: PUSH
20679: EMPTY
20680: ST_TO_ADDR
// for i in list do
20681: LD_ADDR_VAR 0 6
20685: PUSH
20686: LD_VAR 0 2
20690: PUSH
20691: FOR_IN
20692: IFFALSE 20910
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20694: LD_ADDR_VAR 0 8
20698: PUSH
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_VAR 0 6
20708: PUSH
20709: LD_INT 1
20711: ARRAY
20712: PPUSH
20713: LD_VAR 0 6
20717: PUSH
20718: LD_INT 2
20720: ARRAY
20721: PPUSH
20722: CALL_OW 297
20726: ST_TO_ADDR
// if not Count ( result ) then
20727: LD_VAR 0 5
20731: PPUSH
20732: CALL 17304 0 1
20736: NOT
20737: IFFALSE 20770
// begin result := Join ( result , [ i , tmp ] ) ;
20739: LD_ADDR_VAR 0 5
20743: PUSH
20744: LD_VAR 0 5
20748: PPUSH
20749: LD_VAR 0 6
20753: PUSH
20754: LD_VAR 0 8
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: PPUSH
20763: CALL 52893 0 2
20767: ST_TO_ADDR
// continue ;
20768: GO 20691
// end ; if result [ result ] [ 2 ] <= tmp then
20770: LD_VAR 0 5
20774: PUSH
20775: LD_VAR 0 5
20779: ARRAY
20780: PUSH
20781: LD_INT 2
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 8
20789: LESSEQUAL
20790: IFFALSE 20823
// result := Join ( result , [ i , tmp ] ) else
20792: LD_ADDR_VAR 0 5
20796: PUSH
20797: LD_VAR 0 5
20801: PPUSH
20802: LD_VAR 0 6
20806: PUSH
20807: LD_VAR 0 8
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PPUSH
20816: CALL 52893 0 2
20820: ST_TO_ADDR
20821: GO 20908
// begin for j := 1 to Count ( result ) do
20823: LD_ADDR_VAR 0 7
20827: PUSH
20828: DOUBLE
20829: LD_INT 1
20831: DEC
20832: ST_TO_ADDR
20833: LD_VAR 0 5
20837: PPUSH
20838: CALL 17304 0 1
20842: PUSH
20843: FOR_TO
20844: IFFALSE 20906
// begin if tmp < result [ j ] [ 2 ] then
20846: LD_VAR 0 8
20850: PUSH
20851: LD_VAR 0 5
20855: PUSH
20856: LD_VAR 0 7
20860: ARRAY
20861: PUSH
20862: LD_INT 2
20864: ARRAY
20865: LESS
20866: IFFALSE 20904
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20868: LD_ADDR_VAR 0 5
20872: PUSH
20873: LD_VAR 0 5
20877: PPUSH
20878: LD_VAR 0 7
20882: PPUSH
20883: LD_VAR 0 6
20887: PUSH
20888: LD_VAR 0 8
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PPUSH
20897: CALL_OW 2
20901: ST_TO_ADDR
// break ;
20902: GO 20906
// end ; end ;
20904: GO 20843
20906: POP
20907: POP
// end ; end ;
20908: GO 20691
20910: POP
20911: POP
// if result and not asc then
20912: LD_VAR 0 5
20916: PUSH
20917: LD_VAR 0 3
20921: NOT
20922: AND
20923: IFFALSE 20940
// result := ReverseArray ( result ) ;
20925: LD_ADDR_VAR 0 5
20929: PUSH
20930: LD_VAR 0 5
20934: PPUSH
20935: CALL 48180 0 1
20939: ST_TO_ADDR
// tmp := [ ] ;
20940: LD_ADDR_VAR 0 8
20944: PUSH
20945: EMPTY
20946: ST_TO_ADDR
// if mode then
20947: LD_VAR 0 4
20951: IFFALSE 21015
// begin for i := 1 to result do
20953: LD_ADDR_VAR 0 6
20957: PUSH
20958: DOUBLE
20959: LD_INT 1
20961: DEC
20962: ST_TO_ADDR
20963: LD_VAR 0 5
20967: PUSH
20968: FOR_TO
20969: IFFALSE 21003
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20971: LD_ADDR_VAR 0 8
20975: PUSH
20976: LD_VAR 0 8
20980: PPUSH
20981: LD_VAR 0 5
20985: PUSH
20986: LD_VAR 0 6
20990: ARRAY
20991: PUSH
20992: LD_INT 1
20994: ARRAY
20995: PPUSH
20996: CALL 52893 0 2
21000: ST_TO_ADDR
21001: GO 20968
21003: POP
21004: POP
// result := tmp ;
21005: LD_ADDR_VAR 0 5
21009: PUSH
21010: LD_VAR 0 8
21014: ST_TO_ADDR
// end ; end ;
21015: LD_VAR 0 5
21019: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21020: LD_INT 0
21022: PPUSH
21023: PPUSH
21024: PPUSH
21025: PPUSH
// if not list then
21026: LD_VAR 0 3
21030: NOT
21031: IFFALSE 21035
// exit ;
21033: GO 21423
// result := [ ] ;
21035: LD_ADDR_VAR 0 6
21039: PUSH
21040: EMPTY
21041: ST_TO_ADDR
// for i in list do
21042: LD_ADDR_VAR 0 7
21046: PUSH
21047: LD_VAR 0 3
21051: PUSH
21052: FOR_IN
21053: IFFALSE 21255
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21055: LD_ADDR_VAR 0 9
21059: PUSH
21060: LD_VAR 0 7
21064: PPUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: LD_VAR 0 2
21074: PPUSH
21075: CALL_OW 297
21079: ST_TO_ADDR
// if not result then
21080: LD_VAR 0 6
21084: NOT
21085: IFFALSE 21111
// result := [ [ i , tmp ] ] else
21087: LD_ADDR_VAR 0 6
21091: PUSH
21092: LD_VAR 0 7
21096: PUSH
21097: LD_VAR 0 9
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: ST_TO_ADDR
21109: GO 21253
// begin if result [ result ] [ 2 ] < tmp then
21111: LD_VAR 0 6
21115: PUSH
21116: LD_VAR 0 6
21120: ARRAY
21121: PUSH
21122: LD_INT 2
21124: ARRAY
21125: PUSH
21126: LD_VAR 0 9
21130: LESS
21131: IFFALSE 21173
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21133: LD_ADDR_VAR 0 6
21137: PUSH
21138: LD_VAR 0 6
21142: PPUSH
21143: LD_VAR 0 6
21147: PUSH
21148: LD_INT 1
21150: PLUS
21151: PPUSH
21152: LD_VAR 0 7
21156: PUSH
21157: LD_VAR 0 9
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 2
21170: ST_TO_ADDR
21171: GO 21253
// for j = 1 to result do
21173: LD_ADDR_VAR 0 8
21177: PUSH
21178: DOUBLE
21179: LD_INT 1
21181: DEC
21182: ST_TO_ADDR
21183: LD_VAR 0 6
21187: PUSH
21188: FOR_TO
21189: IFFALSE 21251
// begin if tmp < result [ j ] [ 2 ] then
21191: LD_VAR 0 9
21195: PUSH
21196: LD_VAR 0 6
21200: PUSH
21201: LD_VAR 0 8
21205: ARRAY
21206: PUSH
21207: LD_INT 2
21209: ARRAY
21210: LESS
21211: IFFALSE 21249
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21213: LD_ADDR_VAR 0 6
21217: PUSH
21218: LD_VAR 0 6
21222: PPUSH
21223: LD_VAR 0 8
21227: PPUSH
21228: LD_VAR 0 7
21232: PUSH
21233: LD_VAR 0 9
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 2
21246: ST_TO_ADDR
// break ;
21247: GO 21251
// end ; end ;
21249: GO 21188
21251: POP
21252: POP
// end ; end ;
21253: GO 21052
21255: POP
21256: POP
// if result and not asc then
21257: LD_VAR 0 6
21261: PUSH
21262: LD_VAR 0 4
21266: NOT
21267: AND
21268: IFFALSE 21343
// begin tmp := result ;
21270: LD_ADDR_VAR 0 9
21274: PUSH
21275: LD_VAR 0 6
21279: ST_TO_ADDR
// for i = tmp downto 1 do
21280: LD_ADDR_VAR 0 7
21284: PUSH
21285: DOUBLE
21286: LD_VAR 0 9
21290: INC
21291: ST_TO_ADDR
21292: LD_INT 1
21294: PUSH
21295: FOR_DOWNTO
21296: IFFALSE 21341
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21298: LD_ADDR_VAR 0 6
21302: PUSH
21303: LD_VAR 0 6
21307: PPUSH
21308: LD_VAR 0 9
21312: PUSH
21313: LD_VAR 0 7
21317: MINUS
21318: PUSH
21319: LD_INT 1
21321: PLUS
21322: PPUSH
21323: LD_VAR 0 9
21327: PUSH
21328: LD_VAR 0 7
21332: ARRAY
21333: PPUSH
21334: CALL_OW 1
21338: ST_TO_ADDR
21339: GO 21295
21341: POP
21342: POP
// end ; tmp := [ ] ;
21343: LD_ADDR_VAR 0 9
21347: PUSH
21348: EMPTY
21349: ST_TO_ADDR
// if mode then
21350: LD_VAR 0 5
21354: IFFALSE 21423
// begin for i = 1 to result do
21356: LD_ADDR_VAR 0 7
21360: PUSH
21361: DOUBLE
21362: LD_INT 1
21364: DEC
21365: ST_TO_ADDR
21366: LD_VAR 0 6
21370: PUSH
21371: FOR_TO
21372: IFFALSE 21411
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21374: LD_ADDR_VAR 0 9
21378: PUSH
21379: LD_VAR 0 9
21383: PPUSH
21384: LD_VAR 0 7
21388: PPUSH
21389: LD_VAR 0 6
21393: PUSH
21394: LD_VAR 0 7
21398: ARRAY
21399: PUSH
21400: LD_INT 1
21402: ARRAY
21403: PPUSH
21404: CALL_OW 1
21408: ST_TO_ADDR
21409: GO 21371
21411: POP
21412: POP
// result := tmp ;
21413: LD_ADDR_VAR 0 6
21417: PUSH
21418: LD_VAR 0 9
21422: ST_TO_ADDR
// end ; end ;
21423: LD_VAR 0 6
21427: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21428: LD_INT 0
21430: PPUSH
21431: PPUSH
21432: PPUSH
21433: PPUSH
21434: PPUSH
21435: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21436: LD_ADDR_VAR 0 5
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: ST_TO_ADDR
// if not x or not y then
21458: LD_VAR 0 2
21462: NOT
21463: PUSH
21464: LD_VAR 0 3
21468: NOT
21469: OR
21470: IFFALSE 21474
// exit ;
21472: GO 23124
// if not range then
21474: LD_VAR 0 4
21478: NOT
21479: IFFALSE 21489
// range := 10 ;
21481: LD_ADDR_VAR 0 4
21485: PUSH
21486: LD_INT 10
21488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21489: LD_ADDR_VAR 0 8
21493: PUSH
21494: LD_INT 81
21496: PUSH
21497: LD_VAR 0 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 92
21508: PUSH
21509: LD_VAR 0 2
21513: PUSH
21514: LD_VAR 0 3
21518: PUSH
21519: LD_VAR 0 4
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 3
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 3
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: PPUSH
21552: CALL_OW 69
21556: ST_TO_ADDR
// if not tmp then
21557: LD_VAR 0 8
21561: NOT
21562: IFFALSE 21566
// exit ;
21564: GO 23124
// for i in tmp do
21566: LD_ADDR_VAR 0 6
21570: PUSH
21571: LD_VAR 0 8
21575: PUSH
21576: FOR_IN
21577: IFFALSE 23099
// begin points := [ 0 , 0 , 0 ] ;
21579: LD_ADDR_VAR 0 9
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: LD_INT 0
21589: PUSH
21590: LD_INT 0
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: ST_TO_ADDR
// bpoints := 1 ;
21598: LD_ADDR_VAR 0 10
21602: PUSH
21603: LD_INT 1
21605: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21606: LD_VAR 0 6
21610: PPUSH
21611: CALL_OW 247
21615: PUSH
21616: LD_INT 1
21618: DOUBLE
21619: EQUAL
21620: IFTRUE 21624
21622: GO 22202
21624: POP
// begin if GetClass ( i ) = 1 then
21625: LD_VAR 0 6
21629: PPUSH
21630: CALL_OW 257
21634: PUSH
21635: LD_INT 1
21637: EQUAL
21638: IFFALSE 21659
// points := [ 10 , 5 , 3 ] ;
21640: LD_ADDR_VAR 0 9
21644: PUSH
21645: LD_INT 10
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 3
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21659: LD_VAR 0 6
21663: PPUSH
21664: CALL_OW 257
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: LD_INT 4
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: LIST
21682: IN
21683: IFFALSE 21704
// points := [ 3 , 2 , 1 ] ;
21685: LD_ADDR_VAR 0 9
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21704: LD_VAR 0 6
21708: PPUSH
21709: CALL_OW 257
21713: PUSH
21714: LD_INT 5
21716: EQUAL
21717: IFFALSE 21738
// points := [ 130 , 5 , 2 ] ;
21719: LD_ADDR_VAR 0 9
21723: PUSH
21724: LD_INT 130
21726: PUSH
21727: LD_INT 5
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21738: LD_VAR 0 6
21742: PPUSH
21743: CALL_OW 257
21747: PUSH
21748: LD_INT 8
21750: EQUAL
21751: IFFALSE 21772
// points := [ 35 , 35 , 30 ] ;
21753: LD_ADDR_VAR 0 9
21757: PUSH
21758: LD_INT 35
21760: PUSH
21761: LD_INT 35
21763: PUSH
21764: LD_INT 30
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21772: LD_VAR 0 6
21776: PPUSH
21777: CALL_OW 257
21781: PUSH
21782: LD_INT 9
21784: EQUAL
21785: IFFALSE 21806
// points := [ 20 , 55 , 40 ] ;
21787: LD_ADDR_VAR 0 9
21791: PUSH
21792: LD_INT 20
21794: PUSH
21795: LD_INT 55
21797: PUSH
21798: LD_INT 40
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: LIST
21805: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21806: LD_VAR 0 6
21810: PPUSH
21811: CALL_OW 257
21815: PUSH
21816: LD_INT 12
21818: PUSH
21819: LD_INT 16
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: IN
21826: IFFALSE 21847
// points := [ 5 , 3 , 2 ] ;
21828: LD_ADDR_VAR 0 9
21832: PUSH
21833: LD_INT 5
21835: PUSH
21836: LD_INT 3
21838: PUSH
21839: LD_INT 2
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21847: LD_VAR 0 6
21851: PPUSH
21852: CALL_OW 257
21856: PUSH
21857: LD_INT 17
21859: EQUAL
21860: IFFALSE 21881
// points := [ 100 , 50 , 75 ] ;
21862: LD_ADDR_VAR 0 9
21866: PUSH
21867: LD_INT 100
21869: PUSH
21870: LD_INT 50
21872: PUSH
21873: LD_INT 75
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: LIST
21880: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21881: LD_VAR 0 6
21885: PPUSH
21886: CALL_OW 257
21890: PUSH
21891: LD_INT 15
21893: EQUAL
21894: IFFALSE 21915
// points := [ 10 , 5 , 3 ] ;
21896: LD_ADDR_VAR 0 9
21900: PUSH
21901: LD_INT 10
21903: PUSH
21904: LD_INT 5
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21915: LD_VAR 0 6
21919: PPUSH
21920: CALL_OW 257
21924: PUSH
21925: LD_INT 14
21927: EQUAL
21928: IFFALSE 21949
// points := [ 10 , 0 , 0 ] ;
21930: LD_ADDR_VAR 0 9
21934: PUSH
21935: LD_INT 10
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21949: LD_VAR 0 6
21953: PPUSH
21954: CALL_OW 257
21958: PUSH
21959: LD_INT 11
21961: EQUAL
21962: IFFALSE 21983
// points := [ 30 , 10 , 5 ] ;
21964: LD_ADDR_VAR 0 9
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 10
21974: PUSH
21975: LD_INT 5
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21983: LD_VAR 0 1
21987: PPUSH
21988: LD_INT 5
21990: PPUSH
21991: CALL_OW 321
21995: PUSH
21996: LD_INT 2
21998: EQUAL
21999: IFFALSE 22016
// bpoints := bpoints * 1.8 ;
22001: LD_ADDR_VAR 0 10
22005: PUSH
22006: LD_VAR 0 10
22010: PUSH
22011: LD_REAL  1.80000000000000E+0000
22014: MUL
22015: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22016: LD_VAR 0 6
22020: PPUSH
22021: CALL_OW 257
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: LD_INT 3
22034: PUSH
22035: LD_INT 4
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: IN
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: LD_INT 51
22052: PPUSH
22053: CALL_OW 321
22057: PUSH
22058: LD_INT 2
22060: EQUAL
22061: AND
22062: IFFALSE 22079
// bpoints := bpoints * 1.2 ;
22064: LD_ADDR_VAR 0 10
22068: PUSH
22069: LD_VAR 0 10
22073: PUSH
22074: LD_REAL  1.20000000000000E+0000
22077: MUL
22078: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22079: LD_VAR 0 6
22083: PPUSH
22084: CALL_OW 257
22088: PUSH
22089: LD_INT 5
22091: PUSH
22092: LD_INT 7
22094: PUSH
22095: LD_INT 9
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: IN
22103: PUSH
22104: LD_VAR 0 1
22108: PPUSH
22109: LD_INT 52
22111: PPUSH
22112: CALL_OW 321
22116: PUSH
22117: LD_INT 2
22119: EQUAL
22120: AND
22121: IFFALSE 22138
// bpoints := bpoints * 1.5 ;
22123: LD_ADDR_VAR 0 10
22127: PUSH
22128: LD_VAR 0 10
22132: PUSH
22133: LD_REAL  1.50000000000000E+0000
22136: MUL
22137: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22138: LD_VAR 0 1
22142: PPUSH
22143: LD_INT 66
22145: PPUSH
22146: CALL_OW 321
22150: PUSH
22151: LD_INT 2
22153: EQUAL
22154: IFFALSE 22171
// bpoints := bpoints * 1.1 ;
22156: LD_ADDR_VAR 0 10
22160: PUSH
22161: LD_VAR 0 10
22165: PUSH
22166: LD_REAL  1.10000000000000E+0000
22169: MUL
22170: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22171: LD_ADDR_VAR 0 10
22175: PUSH
22176: LD_VAR 0 10
22180: PUSH
22181: LD_VAR 0 6
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 259
22193: PUSH
22194: LD_REAL  1.15000000000000E+0000
22197: MUL
22198: MUL
22199: ST_TO_ADDR
// end ; unit_vehicle :
22200: GO 23028
22202: LD_INT 2
22204: DOUBLE
22205: EQUAL
22206: IFTRUE 22210
22208: GO 23016
22210: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22211: LD_VAR 0 6
22215: PPUSH
22216: CALL_OW 264
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 42
22226: PUSH
22227: LD_INT 24
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: IN
22235: IFFALSE 22256
// points := [ 25 , 5 , 3 ] ;
22237: LD_ADDR_VAR 0 9
22241: PUSH
22242: LD_INT 25
22244: PUSH
22245: LD_INT 5
22247: PUSH
22248: LD_INT 3
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 264
22265: PUSH
22266: LD_INT 4
22268: PUSH
22269: LD_INT 43
22271: PUSH
22272: LD_INT 25
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: IN
22280: IFFALSE 22301
// points := [ 40 , 15 , 5 ] ;
22282: LD_ADDR_VAR 0 9
22286: PUSH
22287: LD_INT 40
22289: PUSH
22290: LD_INT 15
22292: PUSH
22293: LD_INT 5
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: LIST
22300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22301: LD_VAR 0 6
22305: PPUSH
22306: CALL_OW 264
22310: PUSH
22311: LD_INT 3
22313: PUSH
22314: LD_INT 23
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: IN
22321: IFFALSE 22342
// points := [ 7 , 25 , 8 ] ;
22323: LD_ADDR_VAR 0 9
22327: PUSH
22328: LD_INT 7
22330: PUSH
22331: LD_INT 25
22333: PUSH
22334: LD_INT 8
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: LIST
22341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22342: LD_VAR 0 6
22346: PPUSH
22347: CALL_OW 264
22351: PUSH
22352: LD_INT 5
22354: PUSH
22355: LD_INT 27
22357: PUSH
22358: LD_INT 44
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: IN
22366: IFFALSE 22387
// points := [ 14 , 50 , 16 ] ;
22368: LD_ADDR_VAR 0 9
22372: PUSH
22373: LD_INT 14
22375: PUSH
22376: LD_INT 50
22378: PUSH
22379: LD_INT 16
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22387: LD_VAR 0 6
22391: PPUSH
22392: CALL_OW 264
22396: PUSH
22397: LD_INT 6
22399: PUSH
22400: LD_INT 46
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: IN
22407: IFFALSE 22428
// points := [ 32 , 120 , 70 ] ;
22409: LD_ADDR_VAR 0 9
22413: PUSH
22414: LD_INT 32
22416: PUSH
22417: LD_INT 120
22419: PUSH
22420: LD_INT 70
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22428: LD_VAR 0 6
22432: PPUSH
22433: CALL_OW 264
22437: PUSH
22438: LD_INT 7
22440: PUSH
22441: LD_INT 28
22443: PUSH
22444: LD_INT 45
22446: PUSH
22447: LD_INT 92
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: IN
22456: IFFALSE 22477
// points := [ 35 , 20 , 45 ] ;
22458: LD_ADDR_VAR 0 9
22462: PUSH
22463: LD_INT 35
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 45
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22477: LD_VAR 0 6
22481: PPUSH
22482: CALL_OW 264
22486: PUSH
22487: LD_INT 47
22489: PUSH
22490: EMPTY
22491: LIST
22492: IN
22493: IFFALSE 22514
// points := [ 67 , 45 , 75 ] ;
22495: LD_ADDR_VAR 0 9
22499: PUSH
22500: LD_INT 67
22502: PUSH
22503: LD_INT 45
22505: PUSH
22506: LD_INT 75
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22514: LD_VAR 0 6
22518: PPUSH
22519: CALL_OW 264
22523: PUSH
22524: LD_INT 26
22526: PUSH
22527: EMPTY
22528: LIST
22529: IN
22530: IFFALSE 22551
// points := [ 120 , 30 , 80 ] ;
22532: LD_ADDR_VAR 0 9
22536: PUSH
22537: LD_INT 120
22539: PUSH
22540: LD_INT 30
22542: PUSH
22543: LD_INT 80
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: LIST
22550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22551: LD_VAR 0 6
22555: PPUSH
22556: CALL_OW 264
22560: PUSH
22561: LD_INT 22
22563: PUSH
22564: EMPTY
22565: LIST
22566: IN
22567: IFFALSE 22588
// points := [ 40 , 1 , 1 ] ;
22569: LD_ADDR_VAR 0 9
22573: PUSH
22574: LD_INT 40
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22588: LD_VAR 0 6
22592: PPUSH
22593: CALL_OW 264
22597: PUSH
22598: LD_INT 29
22600: PUSH
22601: EMPTY
22602: LIST
22603: IN
22604: IFFALSE 22625
// points := [ 70 , 200 , 400 ] ;
22606: LD_ADDR_VAR 0 9
22610: PUSH
22611: LD_INT 70
22613: PUSH
22614: LD_INT 200
22616: PUSH
22617: LD_INT 400
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22625: LD_VAR 0 6
22629: PPUSH
22630: CALL_OW 264
22634: PUSH
22635: LD_INT 14
22637: PUSH
22638: LD_INT 53
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: IN
22645: IFFALSE 22666
// points := [ 40 , 10 , 20 ] ;
22647: LD_ADDR_VAR 0 9
22651: PUSH
22652: LD_INT 40
22654: PUSH
22655: LD_INT 10
22657: PUSH
22658: LD_INT 20
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22666: LD_VAR 0 6
22670: PPUSH
22671: CALL_OW 264
22675: PUSH
22676: LD_INT 9
22678: PUSH
22679: EMPTY
22680: LIST
22681: IN
22682: IFFALSE 22703
// points := [ 5 , 70 , 20 ] ;
22684: LD_ADDR_VAR 0 9
22688: PUSH
22689: LD_INT 5
22691: PUSH
22692: LD_INT 70
22694: PUSH
22695: LD_INT 20
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22703: LD_VAR 0 6
22707: PPUSH
22708: CALL_OW 264
22712: PUSH
22713: LD_INT 10
22715: PUSH
22716: EMPTY
22717: LIST
22718: IN
22719: IFFALSE 22740
// points := [ 35 , 110 , 70 ] ;
22721: LD_ADDR_VAR 0 9
22725: PUSH
22726: LD_INT 35
22728: PUSH
22729: LD_INT 110
22731: PUSH
22732: LD_INT 70
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22740: LD_VAR 0 6
22744: PPUSH
22745: CALL_OW 265
22749: PUSH
22750: LD_INT 25
22752: EQUAL
22753: IFFALSE 22774
// points := [ 80 , 65 , 100 ] ;
22755: LD_ADDR_VAR 0 9
22759: PUSH
22760: LD_INT 80
22762: PUSH
22763: LD_INT 65
22765: PUSH
22766: LD_INT 100
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22774: LD_VAR 0 6
22778: PPUSH
22779: CALL_OW 263
22783: PUSH
22784: LD_INT 1
22786: EQUAL
22787: IFFALSE 22822
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22789: LD_ADDR_VAR 0 10
22793: PUSH
22794: LD_VAR 0 10
22798: PUSH
22799: LD_VAR 0 6
22803: PPUSH
22804: CALL_OW 311
22808: PPUSH
22809: LD_INT 3
22811: PPUSH
22812: CALL_OW 259
22816: PUSH
22817: LD_INT 4
22819: MUL
22820: MUL
22821: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22822: LD_VAR 0 6
22826: PPUSH
22827: CALL_OW 263
22831: PUSH
22832: LD_INT 2
22834: EQUAL
22835: IFFALSE 22886
// begin j := IsControledBy ( i ) ;
22837: LD_ADDR_VAR 0 7
22841: PUSH
22842: LD_VAR 0 6
22846: PPUSH
22847: CALL_OW 312
22851: ST_TO_ADDR
// if j then
22852: LD_VAR 0 7
22856: IFFALSE 22886
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22858: LD_ADDR_VAR 0 10
22862: PUSH
22863: LD_VAR 0 10
22867: PUSH
22868: LD_VAR 0 7
22872: PPUSH
22873: LD_INT 3
22875: PPUSH
22876: CALL_OW 259
22880: PUSH
22881: LD_INT 3
22883: MUL
22884: MUL
22885: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22886: LD_VAR 0 6
22890: PPUSH
22891: CALL_OW 264
22895: PUSH
22896: LD_INT 5
22898: PUSH
22899: LD_INT 6
22901: PUSH
22902: LD_INT 46
22904: PUSH
22905: LD_INT 44
22907: PUSH
22908: LD_INT 47
22910: PUSH
22911: LD_INT 45
22913: PUSH
22914: LD_INT 28
22916: PUSH
22917: LD_INT 7
22919: PUSH
22920: LD_INT 27
22922: PUSH
22923: LD_INT 29
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: IN
22938: PUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: LD_INT 52
22946: PPUSH
22947: CALL_OW 321
22951: PUSH
22952: LD_INT 2
22954: EQUAL
22955: AND
22956: IFFALSE 22973
// bpoints := bpoints * 1.2 ;
22958: LD_ADDR_VAR 0 10
22962: PUSH
22963: LD_VAR 0 10
22967: PUSH
22968: LD_REAL  1.20000000000000E+0000
22971: MUL
22972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22973: LD_VAR 0 6
22977: PPUSH
22978: CALL_OW 264
22982: PUSH
22983: LD_INT 6
22985: PUSH
22986: LD_INT 46
22988: PUSH
22989: LD_INT 47
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: IN
22997: IFFALSE 23014
// bpoints := bpoints * 1.2 ;
22999: LD_ADDR_VAR 0 10
23003: PUSH
23004: LD_VAR 0 10
23008: PUSH
23009: LD_REAL  1.20000000000000E+0000
23012: MUL
23013: ST_TO_ADDR
// end ; unit_building :
23014: GO 23028
23016: LD_INT 3
23018: DOUBLE
23019: EQUAL
23020: IFTRUE 23024
23022: GO 23027
23024: POP
// ; end ;
23025: GO 23028
23027: POP
// for j = 1 to 3 do
23028: LD_ADDR_VAR 0 7
23032: PUSH
23033: DOUBLE
23034: LD_INT 1
23036: DEC
23037: ST_TO_ADDR
23038: LD_INT 3
23040: PUSH
23041: FOR_TO
23042: IFFALSE 23095
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23044: LD_ADDR_VAR 0 5
23048: PUSH
23049: LD_VAR 0 5
23053: PPUSH
23054: LD_VAR 0 7
23058: PPUSH
23059: LD_VAR 0 5
23063: PUSH
23064: LD_VAR 0 7
23068: ARRAY
23069: PUSH
23070: LD_VAR 0 9
23074: PUSH
23075: LD_VAR 0 7
23079: ARRAY
23080: PUSH
23081: LD_VAR 0 10
23085: MUL
23086: PLUS
23087: PPUSH
23088: CALL_OW 1
23092: ST_TO_ADDR
23093: GO 23041
23095: POP
23096: POP
// end ;
23097: GO 21576
23099: POP
23100: POP
// result := Replace ( result , 4 , tmp ) ;
23101: LD_ADDR_VAR 0 5
23105: PUSH
23106: LD_VAR 0 5
23110: PPUSH
23111: LD_INT 4
23113: PPUSH
23114: LD_VAR 0 8
23118: PPUSH
23119: CALL_OW 1
23123: ST_TO_ADDR
// end ;
23124: LD_VAR 0 5
23128: RET
// export function DangerAtRange ( unit , range ) ; begin
23129: LD_INT 0
23131: PPUSH
// if not unit then
23132: LD_VAR 0 1
23136: NOT
23137: IFFALSE 23141
// exit ;
23139: GO 23186
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23141: LD_ADDR_VAR 0 3
23145: PUSH
23146: LD_VAR 0 1
23150: PPUSH
23151: CALL_OW 255
23155: PPUSH
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 250
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 251
23175: PPUSH
23176: LD_VAR 0 2
23180: PPUSH
23181: CALL 21428 0 4
23185: ST_TO_ADDR
// end ;
23186: LD_VAR 0 3
23190: RET
// export function DangerInArea ( side , area ) ; begin
23191: LD_INT 0
23193: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23194: LD_ADDR_VAR 0 3
23198: PUSH
23199: LD_VAR 0 2
23203: PPUSH
23204: LD_INT 81
23206: PUSH
23207: LD_VAR 0 1
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PPUSH
23216: CALL_OW 70
23220: ST_TO_ADDR
// end ;
23221: LD_VAR 0 3
23225: RET
// export function IsExtension ( b ) ; begin
23226: LD_INT 0
23228: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23229: LD_ADDR_VAR 0 2
23233: PUSH
23234: LD_VAR 0 1
23238: PUSH
23239: LD_INT 23
23241: PUSH
23242: LD_INT 20
23244: PUSH
23245: LD_INT 22
23247: PUSH
23248: LD_INT 17
23250: PUSH
23251: LD_INT 24
23253: PUSH
23254: LD_INT 21
23256: PUSH
23257: LD_INT 19
23259: PUSH
23260: LD_INT 16
23262: PUSH
23263: LD_INT 25
23265: PUSH
23266: LD_INT 18
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: IN
23281: ST_TO_ADDR
// end ;
23282: LD_VAR 0 2
23286: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23287: LD_INT 0
23289: PPUSH
23290: PPUSH
23291: PPUSH
// result := [ ] ;
23292: LD_ADDR_VAR 0 4
23296: PUSH
23297: EMPTY
23298: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23299: LD_ADDR_VAR 0 5
23303: PUSH
23304: LD_VAR 0 2
23308: PPUSH
23309: LD_INT 21
23311: PUSH
23312: LD_INT 3
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PPUSH
23319: CALL_OW 70
23323: ST_TO_ADDR
// if not tmp then
23324: LD_VAR 0 5
23328: NOT
23329: IFFALSE 23333
// exit ;
23331: GO 23397
// if checkLink then
23333: LD_VAR 0 3
23337: IFFALSE 23387
// begin for i in tmp do
23339: LD_ADDR_VAR 0 6
23343: PUSH
23344: LD_VAR 0 5
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23385
// if GetBase ( i ) <> base then
23352: LD_VAR 0 6
23356: PPUSH
23357: CALL_OW 274
23361: PUSH
23362: LD_VAR 0 1
23366: NONEQUAL
23367: IFFALSE 23383
// ComLinkToBase ( base , i ) ;
23369: LD_VAR 0 1
23373: PPUSH
23374: LD_VAR 0 6
23378: PPUSH
23379: CALL_OW 169
23383: GO 23349
23385: POP
23386: POP
// end ; result := tmp ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_VAR 0 5
23396: ST_TO_ADDR
// end ;
23397: LD_VAR 0 4
23401: RET
// export function ComComplete ( units , b ) ; var i ; begin
23402: LD_INT 0
23404: PPUSH
23405: PPUSH
// if not units then
23406: LD_VAR 0 1
23410: NOT
23411: IFFALSE 23415
// exit ;
23413: GO 23505
// for i in units do
23415: LD_ADDR_VAR 0 4
23419: PUSH
23420: LD_VAR 0 1
23424: PUSH
23425: FOR_IN
23426: IFFALSE 23503
// if BuildingStatus ( b ) = bs_build then
23428: LD_VAR 0 2
23432: PPUSH
23433: CALL_OW 461
23437: PUSH
23438: LD_INT 1
23440: EQUAL
23441: IFFALSE 23501
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23443: LD_VAR 0 4
23447: PPUSH
23448: LD_STRING h
23450: PUSH
23451: LD_VAR 0 2
23455: PPUSH
23456: CALL_OW 250
23460: PUSH
23461: LD_VAR 0 2
23465: PPUSH
23466: CALL_OW 251
23470: PUSH
23471: LD_VAR 0 2
23475: PUSH
23476: LD_INT 0
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: PPUSH
23497: CALL_OW 446
23501: GO 23425
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 3
23509: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23510: LD_INT 0
23512: PPUSH
23513: PPUSH
23514: PPUSH
23515: PPUSH
23516: PPUSH
23517: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23518: LD_VAR 0 1
23522: NOT
23523: PUSH
23524: LD_VAR 0 1
23528: PPUSH
23529: CALL_OW 263
23533: PUSH
23534: LD_INT 2
23536: NONEQUAL
23537: OR
23538: IFFALSE 23542
// exit ;
23540: GO 23858
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23542: LD_ADDR_VAR 0 6
23546: PUSH
23547: LD_INT 22
23549: PUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 255
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: LD_INT 30
23569: PUSH
23570: LD_INT 36
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 34
23579: PUSH
23580: LD_INT 31
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PPUSH
23596: CALL_OW 69
23600: ST_TO_ADDR
// if not tmp then
23601: LD_VAR 0 6
23605: NOT
23606: IFFALSE 23610
// exit ;
23608: GO 23858
// result := [ ] ;
23610: LD_ADDR_VAR 0 2
23614: PUSH
23615: EMPTY
23616: ST_TO_ADDR
// for i in tmp do
23617: LD_ADDR_VAR 0 3
23621: PUSH
23622: LD_VAR 0 6
23626: PUSH
23627: FOR_IN
23628: IFFALSE 23699
// begin t := UnitsInside ( i ) ;
23630: LD_ADDR_VAR 0 4
23634: PUSH
23635: LD_VAR 0 3
23639: PPUSH
23640: CALL_OW 313
23644: ST_TO_ADDR
// if t then
23645: LD_VAR 0 4
23649: IFFALSE 23697
// for j in t do
23651: LD_ADDR_VAR 0 7
23655: PUSH
23656: LD_VAR 0 4
23660: PUSH
23661: FOR_IN
23662: IFFALSE 23695
// result := Replace ( result , result + 1 , j ) ;
23664: LD_ADDR_VAR 0 2
23668: PUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_VAR 0 2
23678: PUSH
23679: LD_INT 1
23681: PLUS
23682: PPUSH
23683: LD_VAR 0 7
23687: PPUSH
23688: CALL_OW 1
23692: ST_TO_ADDR
23693: GO 23661
23695: POP
23696: POP
// end ;
23697: GO 23627
23699: POP
23700: POP
// if not result then
23701: LD_VAR 0 2
23705: NOT
23706: IFFALSE 23710
// exit ;
23708: GO 23858
// mech := result [ 1 ] ;
23710: LD_ADDR_VAR 0 5
23714: PUSH
23715: LD_VAR 0 2
23719: PUSH
23720: LD_INT 1
23722: ARRAY
23723: ST_TO_ADDR
// if result > 1 then
23724: LD_VAR 0 2
23728: PUSH
23729: LD_INT 1
23731: GREATER
23732: IFFALSE 23844
// begin for i = 2 to result do
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: DOUBLE
23740: LD_INT 2
23742: DEC
23743: ST_TO_ADDR
23744: LD_VAR 0 2
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23842
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 2
23761: PUSH
23762: LD_VAR 0 3
23766: ARRAY
23767: PPUSH
23768: LD_INT 3
23770: PPUSH
23771: CALL_OW 259
23775: PUSH
23776: LD_VAR 0 2
23780: PUSH
23781: LD_VAR 0 3
23785: ARRAY
23786: PPUSH
23787: CALL_OW 432
23791: MINUS
23792: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23793: LD_VAR 0 4
23797: PUSH
23798: LD_VAR 0 5
23802: PPUSH
23803: LD_INT 3
23805: PPUSH
23806: CALL_OW 259
23810: PUSH
23811: LD_VAR 0 5
23815: PPUSH
23816: CALL_OW 432
23820: MINUS
23821: GREATEREQUAL
23822: IFFALSE 23840
// mech := result [ i ] ;
23824: LD_ADDR_VAR 0 5
23828: PUSH
23829: LD_VAR 0 2
23833: PUSH
23834: LD_VAR 0 3
23838: ARRAY
23839: ST_TO_ADDR
// end ;
23840: GO 23749
23842: POP
23843: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_VAR 0 5
23853: PPUSH
23854: CALL_OW 135
// end ;
23858: LD_VAR 0 2
23862: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23863: LD_INT 0
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
23874: PPUSH
23875: PPUSH
23876: PPUSH
23877: PPUSH
// result := [ ] ;
23878: LD_ADDR_VAR 0 7
23882: PUSH
23883: EMPTY
23884: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23885: LD_VAR 0 1
23889: PPUSH
23890: CALL_OW 266
23894: PUSH
23895: LD_INT 0
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: IN
23905: NOT
23906: IFFALSE 23910
// exit ;
23908: GO 25544
// if name then
23910: LD_VAR 0 3
23914: IFFALSE 23930
// SetBName ( base_dep , name ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_VAR 0 3
23925: PPUSH
23926: CALL_OW 500
// base := GetBase ( base_dep ) ;
23930: LD_ADDR_VAR 0 15
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 274
23944: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23945: LD_ADDR_VAR 0 16
23949: PUSH
23950: LD_VAR 0 1
23954: PPUSH
23955: CALL_OW 255
23959: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23960: LD_ADDR_VAR 0 17
23964: PUSH
23965: LD_VAR 0 1
23969: PPUSH
23970: CALL_OW 248
23974: ST_TO_ADDR
// if sources then
23975: LD_VAR 0 5
23979: IFFALSE 24026
// for i = 1 to 3 do
23981: LD_ADDR_VAR 0 8
23985: PUSH
23986: DOUBLE
23987: LD_INT 1
23989: DEC
23990: ST_TO_ADDR
23991: LD_INT 3
23993: PUSH
23994: FOR_TO
23995: IFFALSE 24024
// AddResourceType ( base , i , sources [ i ] ) ;
23997: LD_VAR 0 15
24001: PPUSH
24002: LD_VAR 0 8
24006: PPUSH
24007: LD_VAR 0 5
24011: PUSH
24012: LD_VAR 0 8
24016: ARRAY
24017: PPUSH
24018: CALL_OW 276
24022: GO 23994
24024: POP
24025: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24026: LD_ADDR_VAR 0 18
24030: PUSH
24031: LD_VAR 0 15
24035: PPUSH
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_INT 1
24043: PPUSH
24044: CALL 23287 0 3
24048: ST_TO_ADDR
// InitHc ;
24049: CALL_OW 19
// InitUc ;
24053: CALL_OW 18
// uc_side := side ;
24057: LD_ADDR_OWVAR 20
24061: PUSH
24062: LD_VAR 0 16
24066: ST_TO_ADDR
// uc_nation := nation ;
24067: LD_ADDR_OWVAR 21
24071: PUSH
24072: LD_VAR 0 17
24076: ST_TO_ADDR
// if buildings then
24077: LD_VAR 0 18
24081: IFFALSE 25403
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24083: LD_ADDR_VAR 0 19
24087: PUSH
24088: LD_VAR 0 18
24092: PPUSH
24093: LD_INT 2
24095: PUSH
24096: LD_INT 30
24098: PUSH
24099: LD_INT 29
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 30
24108: PUSH
24109: LD_INT 30
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: LIST
24120: PPUSH
24121: CALL_OW 72
24125: ST_TO_ADDR
// if tmp then
24126: LD_VAR 0 19
24130: IFFALSE 24178
// for i in tmp do
24132: LD_ADDR_VAR 0 8
24136: PUSH
24137: LD_VAR 0 19
24141: PUSH
24142: FOR_IN
24143: IFFALSE 24176
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24145: LD_VAR 0 8
24149: PPUSH
24150: CALL_OW 250
24154: PPUSH
24155: LD_VAR 0 8
24159: PPUSH
24160: CALL_OW 251
24164: PPUSH
24165: LD_VAR 0 16
24169: PPUSH
24170: CALL_OW 441
24174: GO 24142
24176: POP
24177: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24178: LD_VAR 0 18
24182: PPUSH
24183: LD_INT 2
24185: PUSH
24186: LD_INT 30
24188: PUSH
24189: LD_INT 32
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 30
24198: PUSH
24199: LD_INT 33
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: LIST
24210: PPUSH
24211: CALL_OW 72
24215: IFFALSE 24303
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24217: LD_ADDR_VAR 0 8
24221: PUSH
24222: LD_VAR 0 18
24226: PPUSH
24227: LD_INT 2
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 32
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 30
24242: PUSH
24243: LD_INT 33
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PPUSH
24255: CALL_OW 72
24259: PUSH
24260: FOR_IN
24261: IFFALSE 24301
// begin if not GetBWeapon ( i ) then
24263: LD_VAR 0 8
24267: PPUSH
24268: CALL_OW 269
24272: NOT
24273: IFFALSE 24299
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24275: LD_VAR 0 8
24279: PPUSH
24280: LD_VAR 0 8
24284: PPUSH
24285: LD_VAR 0 2
24289: PPUSH
24290: CALL 25549 0 2
24294: PPUSH
24295: CALL_OW 431
// end ;
24299: GO 24260
24301: POP
24302: POP
// end ; for i = 1 to personel do
24303: LD_ADDR_VAR 0 8
24307: PUSH
24308: DOUBLE
24309: LD_INT 1
24311: DEC
24312: ST_TO_ADDR
24313: LD_VAR 0 6
24317: PUSH
24318: FOR_TO
24319: IFFALSE 25383
// begin if i > 4 then
24321: LD_VAR 0 8
24325: PUSH
24326: LD_INT 4
24328: GREATER
24329: IFFALSE 24333
// break ;
24331: GO 25383
// case i of 1 :
24333: LD_VAR 0 8
24337: PUSH
24338: LD_INT 1
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24426
24346: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24347: LD_ADDR_VAR 0 12
24351: PUSH
24352: LD_VAR 0 18
24356: PPUSH
24357: LD_INT 22
24359: PUSH
24360: LD_VAR 0 16
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 58
24371: PUSH
24372: EMPTY
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 30
24380: PUSH
24381: LD_INT 32
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 30
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 30
24400: PUSH
24401: LD_INT 5
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: PPUSH
24419: CALL_OW 72
24423: ST_TO_ADDR
24424: GO 24648
24426: LD_INT 2
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24496
24434: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24435: LD_ADDR_VAR 0 12
24439: PUSH
24440: LD_VAR 0 18
24444: PPUSH
24445: LD_INT 22
24447: PUSH
24448: LD_VAR 0 16
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: LD_INT 30
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 30
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: LIST
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PPUSH
24489: CALL_OW 72
24493: ST_TO_ADDR
24494: GO 24648
24496: LD_INT 3
24498: DOUBLE
24499: EQUAL
24500: IFTRUE 24504
24502: GO 24566
24504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24505: LD_ADDR_VAR 0 12
24509: PUSH
24510: LD_VAR 0 18
24514: PPUSH
24515: LD_INT 22
24517: PUSH
24518: LD_VAR 0 16
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 30
24532: PUSH
24533: LD_INT 2
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 30
24542: PUSH
24543: LD_INT 3
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PPUSH
24559: CALL_OW 72
24563: ST_TO_ADDR
24564: GO 24648
24566: LD_INT 4
24568: DOUBLE
24569: EQUAL
24570: IFTRUE 24574
24572: GO 24647
24574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24575: LD_ADDR_VAR 0 12
24579: PUSH
24580: LD_VAR 0 18
24584: PPUSH
24585: LD_INT 22
24587: PUSH
24588: LD_VAR 0 16
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 30
24602: PUSH
24603: LD_INT 6
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 30
24612: PUSH
24613: LD_INT 7
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 30
24622: PUSH
24623: LD_INT 8
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PPUSH
24640: CALL_OW 72
24644: ST_TO_ADDR
24645: GO 24648
24647: POP
// if i = 1 then
24648: LD_VAR 0 8
24652: PUSH
24653: LD_INT 1
24655: EQUAL
24656: IFFALSE 24767
// begin tmp := [ ] ;
24658: LD_ADDR_VAR 0 19
24662: PUSH
24663: EMPTY
24664: ST_TO_ADDR
// for j in f do
24665: LD_ADDR_VAR 0 9
24669: PUSH
24670: LD_VAR 0 12
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24749
// if GetBType ( j ) = b_bunker then
24678: LD_VAR 0 9
24682: PPUSH
24683: CALL_OW 266
24687: PUSH
24688: LD_INT 32
24690: EQUAL
24691: IFFALSE 24718
// tmp := Insert ( tmp , 1 , j ) else
24693: LD_ADDR_VAR 0 19
24697: PUSH
24698: LD_VAR 0 19
24702: PPUSH
24703: LD_INT 1
24705: PPUSH
24706: LD_VAR 0 9
24710: PPUSH
24711: CALL_OW 2
24715: ST_TO_ADDR
24716: GO 24747
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24718: LD_ADDR_VAR 0 19
24722: PUSH
24723: LD_VAR 0 19
24727: PPUSH
24728: LD_VAR 0 19
24732: PUSH
24733: LD_INT 1
24735: PLUS
24736: PPUSH
24737: LD_VAR 0 9
24741: PPUSH
24742: CALL_OW 2
24746: ST_TO_ADDR
24747: GO 24675
24749: POP
24750: POP
// if tmp then
24751: LD_VAR 0 19
24755: IFFALSE 24767
// f := tmp ;
24757: LD_ADDR_VAR 0 12
24761: PUSH
24762: LD_VAR 0 19
24766: ST_TO_ADDR
// end ; x := personel [ i ] ;
24767: LD_ADDR_VAR 0 13
24771: PUSH
24772: LD_VAR 0 6
24776: PUSH
24777: LD_VAR 0 8
24781: ARRAY
24782: ST_TO_ADDR
// if x = - 1 then
24783: LD_VAR 0 13
24787: PUSH
24788: LD_INT 1
24790: NEG
24791: EQUAL
24792: IFFALSE 25001
// begin for j in f do
24794: LD_ADDR_VAR 0 9
24798: PUSH
24799: LD_VAR 0 12
24803: PUSH
24804: FOR_IN
24805: IFFALSE 24997
// repeat InitHc ;
24807: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24811: LD_VAR 0 9
24815: PPUSH
24816: CALL_OW 266
24820: PUSH
24821: LD_INT 5
24823: EQUAL
24824: IFFALSE 24894
// begin if UnitsInside ( j ) < 3 then
24826: LD_VAR 0 9
24830: PPUSH
24831: CALL_OW 313
24835: PUSH
24836: LD_INT 3
24838: LESS
24839: IFFALSE 24875
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24841: LD_INT 0
24843: PPUSH
24844: LD_INT 5
24846: PUSH
24847: LD_INT 8
24849: PUSH
24850: LD_INT 9
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PUSH
24858: LD_VAR 0 17
24862: ARRAY
24863: PPUSH
24864: LD_VAR 0 4
24868: PPUSH
24869: CALL_OW 380
24873: GO 24892
// PrepareHuman ( false , i , skill ) ;
24875: LD_INT 0
24877: PPUSH
24878: LD_VAR 0 8
24882: PPUSH
24883: LD_VAR 0 4
24887: PPUSH
24888: CALL_OW 380
// end else
24892: GO 24911
// PrepareHuman ( false , i , skill ) ;
24894: LD_INT 0
24896: PPUSH
24897: LD_VAR 0 8
24901: PPUSH
24902: LD_VAR 0 4
24906: PPUSH
24907: CALL_OW 380
// un := CreateHuman ;
24911: LD_ADDR_VAR 0 14
24915: PUSH
24916: CALL_OW 44
24920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24921: LD_ADDR_VAR 0 7
24925: PUSH
24926: LD_VAR 0 7
24930: PPUSH
24931: LD_INT 1
24933: PPUSH
24934: LD_VAR 0 14
24938: PPUSH
24939: CALL_OW 2
24943: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24944: LD_VAR 0 14
24948: PPUSH
24949: LD_VAR 0 9
24953: PPUSH
24954: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24958: LD_VAR 0 9
24962: PPUSH
24963: CALL_OW 313
24967: PUSH
24968: LD_INT 6
24970: EQUAL
24971: PUSH
24972: LD_VAR 0 9
24976: PPUSH
24977: CALL_OW 266
24981: PUSH
24982: LD_INT 32
24984: PUSH
24985: LD_INT 31
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: IN
24992: OR
24993: IFFALSE 24807
24995: GO 24804
24997: POP
24998: POP
// end else
24999: GO 25381
// for j = 1 to x do
25001: LD_ADDR_VAR 0 9
25005: PUSH
25006: DOUBLE
25007: LD_INT 1
25009: DEC
25010: ST_TO_ADDR
25011: LD_VAR 0 13
25015: PUSH
25016: FOR_TO
25017: IFFALSE 25379
// begin InitHc ;
25019: CALL_OW 19
// if not f then
25023: LD_VAR 0 12
25027: NOT
25028: IFFALSE 25117
// begin PrepareHuman ( false , i , skill ) ;
25030: LD_INT 0
25032: PPUSH
25033: LD_VAR 0 8
25037: PPUSH
25038: LD_VAR 0 4
25042: PPUSH
25043: CALL_OW 380
// un := CreateHuman ;
25047: LD_ADDR_VAR 0 14
25051: PUSH
25052: CALL_OW 44
25056: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25057: LD_ADDR_VAR 0 7
25061: PUSH
25062: LD_VAR 0 7
25066: PPUSH
25067: LD_INT 1
25069: PPUSH
25070: LD_VAR 0 14
25074: PPUSH
25075: CALL_OW 2
25079: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25080: LD_VAR 0 14
25084: PPUSH
25085: LD_VAR 0 1
25089: PPUSH
25090: CALL_OW 250
25094: PPUSH
25095: LD_VAR 0 1
25099: PPUSH
25100: CALL_OW 251
25104: PPUSH
25105: LD_INT 10
25107: PPUSH
25108: LD_INT 0
25110: PPUSH
25111: CALL_OW 50
// continue ;
25115: GO 25016
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25117: LD_VAR 0 12
25121: PUSH
25122: LD_INT 1
25124: ARRAY
25125: PPUSH
25126: CALL_OW 313
25130: PUSH
25131: LD_VAR 0 12
25135: PUSH
25136: LD_INT 1
25138: ARRAY
25139: PPUSH
25140: CALL_OW 266
25144: PUSH
25145: LD_INT 32
25147: PUSH
25148: LD_INT 31
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: IN
25155: AND
25156: PUSH
25157: LD_VAR 0 12
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: CALL_OW 313
25170: PUSH
25171: LD_INT 6
25173: EQUAL
25174: OR
25175: IFFALSE 25195
// f := Delete ( f , 1 ) ;
25177: LD_ADDR_VAR 0 12
25181: PUSH
25182: LD_VAR 0 12
25186: PPUSH
25187: LD_INT 1
25189: PPUSH
25190: CALL_OW 3
25194: ST_TO_ADDR
// if not f then
25195: LD_VAR 0 12
25199: NOT
25200: IFFALSE 25218
// begin x := x + 2 ;
25202: LD_ADDR_VAR 0 13
25206: PUSH
25207: LD_VAR 0 13
25211: PUSH
25212: LD_INT 2
25214: PLUS
25215: ST_TO_ADDR
// continue ;
25216: GO 25016
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25218: LD_VAR 0 12
25222: PUSH
25223: LD_INT 1
25225: ARRAY
25226: PPUSH
25227: CALL_OW 266
25231: PUSH
25232: LD_INT 5
25234: EQUAL
25235: IFFALSE 25309
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25237: LD_VAR 0 12
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: CALL_OW 313
25250: PUSH
25251: LD_INT 3
25253: LESS
25254: IFFALSE 25290
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25256: LD_INT 0
25258: PPUSH
25259: LD_INT 5
25261: PUSH
25262: LD_INT 8
25264: PUSH
25265: LD_INT 9
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: PUSH
25273: LD_VAR 0 17
25277: ARRAY
25278: PPUSH
25279: LD_VAR 0 4
25283: PPUSH
25284: CALL_OW 380
25288: GO 25307
// PrepareHuman ( false , i , skill ) ;
25290: LD_INT 0
25292: PPUSH
25293: LD_VAR 0 8
25297: PPUSH
25298: LD_VAR 0 4
25302: PPUSH
25303: CALL_OW 380
// end else
25307: GO 25326
// PrepareHuman ( false , i , skill ) ;
25309: LD_INT 0
25311: PPUSH
25312: LD_VAR 0 8
25316: PPUSH
25317: LD_VAR 0 4
25321: PPUSH
25322: CALL_OW 380
// un := CreateHuman ;
25326: LD_ADDR_VAR 0 14
25330: PUSH
25331: CALL_OW 44
25335: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25336: LD_ADDR_VAR 0 7
25340: PUSH
25341: LD_VAR 0 7
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: LD_VAR 0 14
25353: PPUSH
25354: CALL_OW 2
25358: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25359: LD_VAR 0 14
25363: PPUSH
25364: LD_VAR 0 12
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PPUSH
25373: CALL_OW 52
// end ;
25377: GO 25016
25379: POP
25380: POP
// end ;
25381: GO 24318
25383: POP
25384: POP
// result := result ^ buildings ;
25385: LD_ADDR_VAR 0 7
25389: PUSH
25390: LD_VAR 0 7
25394: PUSH
25395: LD_VAR 0 18
25399: ADD
25400: ST_TO_ADDR
// end else
25401: GO 25544
// begin for i = 1 to personel do
25403: LD_ADDR_VAR 0 8
25407: PUSH
25408: DOUBLE
25409: LD_INT 1
25411: DEC
25412: ST_TO_ADDR
25413: LD_VAR 0 6
25417: PUSH
25418: FOR_TO
25419: IFFALSE 25542
// begin if i > 4 then
25421: LD_VAR 0 8
25425: PUSH
25426: LD_INT 4
25428: GREATER
25429: IFFALSE 25433
// break ;
25431: GO 25542
// x := personel [ i ] ;
25433: LD_ADDR_VAR 0 13
25437: PUSH
25438: LD_VAR 0 6
25442: PUSH
25443: LD_VAR 0 8
25447: ARRAY
25448: ST_TO_ADDR
// if x = - 1 then
25449: LD_VAR 0 13
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: EQUAL
25458: IFFALSE 25462
// continue ;
25460: GO 25418
// PrepareHuman ( false , i , skill ) ;
25462: LD_INT 0
25464: PPUSH
25465: LD_VAR 0 8
25469: PPUSH
25470: LD_VAR 0 4
25474: PPUSH
25475: CALL_OW 380
// un := CreateHuman ;
25479: LD_ADDR_VAR 0 14
25483: PUSH
25484: CALL_OW 44
25488: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25489: LD_VAR 0 14
25493: PPUSH
25494: LD_VAR 0 1
25498: PPUSH
25499: CALL_OW 250
25503: PPUSH
25504: LD_VAR 0 1
25508: PPUSH
25509: CALL_OW 251
25513: PPUSH
25514: LD_INT 10
25516: PPUSH
25517: LD_INT 0
25519: PPUSH
25520: CALL_OW 50
// result := result ^ un ;
25524: LD_ADDR_VAR 0 7
25528: PUSH
25529: LD_VAR 0 7
25533: PUSH
25534: LD_VAR 0 14
25538: ADD
25539: ST_TO_ADDR
// end ;
25540: GO 25418
25542: POP
25543: POP
// end ; end ;
25544: LD_VAR 0 7
25548: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25549: LD_INT 0
25551: PPUSH
25552: PPUSH
25553: PPUSH
25554: PPUSH
25555: PPUSH
25556: PPUSH
25557: PPUSH
25558: PPUSH
25559: PPUSH
25560: PPUSH
25561: PPUSH
25562: PPUSH
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
// result := false ;
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 0
25574: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25575: LD_VAR 0 1
25579: NOT
25580: PUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: CALL_OW 266
25590: PUSH
25591: LD_INT 32
25593: PUSH
25594: LD_INT 33
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: IN
25601: NOT
25602: OR
25603: IFFALSE 25607
// exit ;
25605: GO 26716
// nat := GetNation ( tower ) ;
25607: LD_ADDR_VAR 0 12
25611: PUSH
25612: LD_VAR 0 1
25616: PPUSH
25617: CALL_OW 248
25621: ST_TO_ADDR
// side := GetSide ( tower ) ;
25622: LD_ADDR_VAR 0 16
25626: PUSH
25627: LD_VAR 0 1
25631: PPUSH
25632: CALL_OW 255
25636: ST_TO_ADDR
// x := GetX ( tower ) ;
25637: LD_ADDR_VAR 0 10
25641: PUSH
25642: LD_VAR 0 1
25646: PPUSH
25647: CALL_OW 250
25651: ST_TO_ADDR
// y := GetY ( tower ) ;
25652: LD_ADDR_VAR 0 11
25656: PUSH
25657: LD_VAR 0 1
25661: PPUSH
25662: CALL_OW 251
25666: ST_TO_ADDR
// if not x or not y then
25667: LD_VAR 0 10
25671: NOT
25672: PUSH
25673: LD_VAR 0 11
25677: NOT
25678: OR
25679: IFFALSE 25683
// exit ;
25681: GO 26716
// weapon := 0 ;
25683: LD_ADDR_VAR 0 18
25687: PUSH
25688: LD_INT 0
25690: ST_TO_ADDR
// fac_list := [ ] ;
25691: LD_ADDR_VAR 0 17
25695: PUSH
25696: EMPTY
25697: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25698: LD_ADDR_VAR 0 6
25702: PUSH
25703: LD_VAR 0 1
25707: PPUSH
25708: CALL_OW 274
25712: PPUSH
25713: LD_VAR 0 2
25717: PPUSH
25718: LD_INT 0
25720: PPUSH
25721: CALL 23287 0 3
25725: PPUSH
25726: LD_INT 30
25728: PUSH
25729: LD_INT 3
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 72
25740: ST_TO_ADDR
// if not factories then
25741: LD_VAR 0 6
25745: NOT
25746: IFFALSE 25750
// exit ;
25748: GO 26716
// for i in factories do
25750: LD_ADDR_VAR 0 8
25754: PUSH
25755: LD_VAR 0 6
25759: PUSH
25760: FOR_IN
25761: IFFALSE 25786
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25763: LD_ADDR_VAR 0 17
25767: PUSH
25768: LD_VAR 0 17
25772: PUSH
25773: LD_VAR 0 8
25777: PPUSH
25778: CALL_OW 478
25782: UNION
25783: ST_TO_ADDR
25784: GO 25760
25786: POP
25787: POP
// if not fac_list then
25788: LD_VAR 0 17
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 26716
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25797: LD_ADDR_VAR 0 5
25801: PUSH
25802: LD_INT 4
25804: PUSH
25805: LD_INT 5
25807: PUSH
25808: LD_INT 9
25810: PUSH
25811: LD_INT 10
25813: PUSH
25814: LD_INT 6
25816: PUSH
25817: LD_INT 7
25819: PUSH
25820: LD_INT 11
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 27
25834: PUSH
25835: LD_INT 28
25837: PUSH
25838: LD_INT 26
25840: PUSH
25841: LD_INT 30
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 43
25852: PUSH
25853: LD_INT 44
25855: PUSH
25856: LD_INT 46
25858: PUSH
25859: LD_INT 45
25861: PUSH
25862: LD_INT 47
25864: PUSH
25865: LD_INT 49
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: LIST
25880: PUSH
25881: LD_VAR 0 12
25885: ARRAY
25886: ST_TO_ADDR
// list := list isect fac_list ;
25887: LD_ADDR_VAR 0 5
25891: PUSH
25892: LD_VAR 0 5
25896: PUSH
25897: LD_VAR 0 17
25901: ISECT
25902: ST_TO_ADDR
// if not list then
25903: LD_VAR 0 5
25907: NOT
25908: IFFALSE 25912
// exit ;
25910: GO 26716
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25912: LD_VAR 0 12
25916: PUSH
25917: LD_INT 3
25919: EQUAL
25920: PUSH
25921: LD_INT 49
25923: PUSH
25924: LD_VAR 0 5
25928: IN
25929: AND
25930: PUSH
25931: LD_INT 31
25933: PPUSH
25934: LD_VAR 0 16
25938: PPUSH
25939: CALL_OW 321
25943: PUSH
25944: LD_INT 2
25946: EQUAL
25947: AND
25948: IFFALSE 26008
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25950: LD_INT 22
25952: PUSH
25953: LD_VAR 0 16
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 35
25964: PUSH
25965: LD_INT 49
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 91
25974: PUSH
25975: LD_VAR 0 1
25979: PUSH
25980: LD_INT 10
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: PPUSH
25993: CALL_OW 69
25997: NOT
25998: IFFALSE 26008
// weapon := ru_time_lapser ;
26000: LD_ADDR_VAR 0 18
26004: PUSH
26005: LD_INT 49
26007: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26008: LD_VAR 0 12
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: IN
26023: PUSH
26024: LD_INT 11
26026: PUSH
26027: LD_VAR 0 5
26031: IN
26032: PUSH
26033: LD_INT 30
26035: PUSH
26036: LD_VAR 0 5
26040: IN
26041: OR
26042: AND
26043: PUSH
26044: LD_INT 6
26046: PPUSH
26047: LD_VAR 0 16
26051: PPUSH
26052: CALL_OW 321
26056: PUSH
26057: LD_INT 2
26059: EQUAL
26060: AND
26061: IFFALSE 26226
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26063: LD_INT 22
26065: PUSH
26066: LD_VAR 0 16
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: PUSH
26078: LD_INT 35
26080: PUSH
26081: LD_INT 11
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 35
26090: PUSH
26091: LD_INT 30
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 91
26105: PUSH
26106: LD_VAR 0 1
26110: PUSH
26111: LD_INT 18
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: LIST
26123: PPUSH
26124: CALL_OW 69
26128: NOT
26129: PUSH
26130: LD_INT 22
26132: PUSH
26133: LD_VAR 0 16
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: LD_INT 30
26147: PUSH
26148: LD_INT 32
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 30
26157: PUSH
26158: LD_INT 33
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 91
26172: PUSH
26173: LD_VAR 0 1
26177: PUSH
26178: LD_INT 12
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: PPUSH
26194: CALL_OW 69
26198: PUSH
26199: LD_INT 2
26201: GREATER
26202: AND
26203: IFFALSE 26226
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26205: LD_ADDR_VAR 0 18
26209: PUSH
26210: LD_INT 11
26212: PUSH
26213: LD_INT 30
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_VAR 0 12
26224: ARRAY
26225: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26226: LD_VAR 0 18
26230: NOT
26231: PUSH
26232: LD_INT 40
26234: PPUSH
26235: LD_VAR 0 16
26239: PPUSH
26240: CALL_OW 321
26244: PUSH
26245: LD_INT 2
26247: EQUAL
26248: AND
26249: PUSH
26250: LD_INT 7
26252: PUSH
26253: LD_VAR 0 5
26257: IN
26258: PUSH
26259: LD_INT 28
26261: PUSH
26262: LD_VAR 0 5
26266: IN
26267: OR
26268: PUSH
26269: LD_INT 45
26271: PUSH
26272: LD_VAR 0 5
26276: IN
26277: OR
26278: AND
26279: IFFALSE 26533
// begin hex := GetHexInfo ( x , y ) ;
26281: LD_ADDR_VAR 0 4
26285: PUSH
26286: LD_VAR 0 10
26290: PPUSH
26291: LD_VAR 0 11
26295: PPUSH
26296: CALL_OW 546
26300: ST_TO_ADDR
// if hex [ 1 ] then
26301: LD_VAR 0 4
26305: PUSH
26306: LD_INT 1
26308: ARRAY
26309: IFFALSE 26313
// exit ;
26311: GO 26716
// height := hex [ 2 ] ;
26313: LD_ADDR_VAR 0 15
26317: PUSH
26318: LD_VAR 0 4
26322: PUSH
26323: LD_INT 2
26325: ARRAY
26326: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26327: LD_ADDR_VAR 0 14
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 2
26337: PUSH
26338: LD_INT 3
26340: PUSH
26341: LD_INT 5
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
// for i in tmp do
26350: LD_ADDR_VAR 0 8
26354: PUSH
26355: LD_VAR 0 14
26359: PUSH
26360: FOR_IN
26361: IFFALSE 26531
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26363: LD_ADDR_VAR 0 9
26367: PUSH
26368: LD_VAR 0 10
26372: PPUSH
26373: LD_VAR 0 8
26377: PPUSH
26378: LD_INT 5
26380: PPUSH
26381: CALL_OW 272
26385: PUSH
26386: LD_VAR 0 11
26390: PPUSH
26391: LD_VAR 0 8
26395: PPUSH
26396: LD_INT 5
26398: PPUSH
26399: CALL_OW 273
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26408: LD_VAR 0 9
26412: PUSH
26413: LD_INT 1
26415: ARRAY
26416: PPUSH
26417: LD_VAR 0 9
26421: PUSH
26422: LD_INT 2
26424: ARRAY
26425: PPUSH
26426: CALL_OW 488
26430: IFFALSE 26529
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26432: LD_ADDR_VAR 0 4
26436: PUSH
26437: LD_VAR 0 9
26441: PUSH
26442: LD_INT 1
26444: ARRAY
26445: PPUSH
26446: LD_VAR 0 9
26450: PUSH
26451: LD_INT 2
26453: ARRAY
26454: PPUSH
26455: CALL_OW 546
26459: ST_TO_ADDR
// if hex [ 1 ] then
26460: LD_VAR 0 4
26464: PUSH
26465: LD_INT 1
26467: ARRAY
26468: IFFALSE 26472
// continue ;
26470: GO 26360
// h := hex [ 2 ] ;
26472: LD_ADDR_VAR 0 13
26476: PUSH
26477: LD_VAR 0 4
26481: PUSH
26482: LD_INT 2
26484: ARRAY
26485: ST_TO_ADDR
// if h + 7 < height then
26486: LD_VAR 0 13
26490: PUSH
26491: LD_INT 7
26493: PLUS
26494: PUSH
26495: LD_VAR 0 15
26499: LESS
26500: IFFALSE 26529
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26502: LD_ADDR_VAR 0 18
26506: PUSH
26507: LD_INT 7
26509: PUSH
26510: LD_INT 28
26512: PUSH
26513: LD_INT 45
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: PUSH
26521: LD_VAR 0 12
26525: ARRAY
26526: ST_TO_ADDR
// break ;
26527: GO 26531
// end ; end ; end ;
26529: GO 26360
26531: POP
26532: POP
// end ; if not weapon then
26533: LD_VAR 0 18
26537: NOT
26538: IFFALSE 26598
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26540: LD_ADDR_VAR 0 5
26544: PUSH
26545: LD_VAR 0 5
26549: PUSH
26550: LD_INT 11
26552: PUSH
26553: LD_INT 30
26555: PUSH
26556: LD_INT 49
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: DIFF
26564: ST_TO_ADDR
// if not list then
26565: LD_VAR 0 5
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26716
// weapon := list [ rand ( 1 , list ) ] ;
26574: LD_ADDR_VAR 0 18
26578: PUSH
26579: LD_VAR 0 5
26583: PUSH
26584: LD_INT 1
26586: PPUSH
26587: LD_VAR 0 5
26591: PPUSH
26592: CALL_OW 12
26596: ARRAY
26597: ST_TO_ADDR
// end ; if weapon then
26598: LD_VAR 0 18
26602: IFFALSE 26716
// begin tmp := CostOfWeapon ( weapon ) ;
26604: LD_ADDR_VAR 0 14
26608: PUSH
26609: LD_VAR 0 18
26613: PPUSH
26614: CALL_OW 451
26618: ST_TO_ADDR
// j := GetBase ( tower ) ;
26619: LD_ADDR_VAR 0 9
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 274
26633: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26634: LD_VAR 0 9
26638: PPUSH
26639: LD_INT 1
26641: PPUSH
26642: CALL_OW 275
26646: PUSH
26647: LD_VAR 0 14
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: GREATEREQUAL
26656: PUSH
26657: LD_VAR 0 9
26661: PPUSH
26662: LD_INT 2
26664: PPUSH
26665: CALL_OW 275
26669: PUSH
26670: LD_VAR 0 14
26674: PUSH
26675: LD_INT 2
26677: ARRAY
26678: GREATEREQUAL
26679: AND
26680: PUSH
26681: LD_VAR 0 9
26685: PPUSH
26686: LD_INT 3
26688: PPUSH
26689: CALL_OW 275
26693: PUSH
26694: LD_VAR 0 14
26698: PUSH
26699: LD_INT 3
26701: ARRAY
26702: GREATEREQUAL
26703: AND
26704: IFFALSE 26716
// result := weapon ;
26706: LD_ADDR_VAR 0 3
26710: PUSH
26711: LD_VAR 0 18
26715: ST_TO_ADDR
// end ; end ;
26716: LD_VAR 0 3
26720: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26721: LD_INT 0
26723: PPUSH
26724: PPUSH
// result := true ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: LD_INT 1
26732: ST_TO_ADDR
// if array1 = array2 then
26733: LD_VAR 0 1
26737: PUSH
26738: LD_VAR 0 2
26742: EQUAL
26743: IFFALSE 26803
// begin for i = 1 to array1 do
26745: LD_ADDR_VAR 0 4
26749: PUSH
26750: DOUBLE
26751: LD_INT 1
26753: DEC
26754: ST_TO_ADDR
26755: LD_VAR 0 1
26759: PUSH
26760: FOR_TO
26761: IFFALSE 26799
// if array1 [ i ] <> array2 [ i ] then
26763: LD_VAR 0 1
26767: PUSH
26768: LD_VAR 0 4
26772: ARRAY
26773: PUSH
26774: LD_VAR 0 2
26778: PUSH
26779: LD_VAR 0 4
26783: ARRAY
26784: NONEQUAL
26785: IFFALSE 26797
// begin result := false ;
26787: LD_ADDR_VAR 0 3
26791: PUSH
26792: LD_INT 0
26794: ST_TO_ADDR
// break ;
26795: GO 26799
// end ;
26797: GO 26760
26799: POP
26800: POP
// end else
26801: GO 26811
// result := false ;
26803: LD_ADDR_VAR 0 3
26807: PUSH
26808: LD_INT 0
26810: ST_TO_ADDR
// end ;
26811: LD_VAR 0 3
26815: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
// if not array1 or not array2 then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: NOT
26831: OR
26832: IFFALSE 26836
// exit ;
26834: GO 26900
// result := true ;
26836: LD_ADDR_VAR 0 3
26840: PUSH
26841: LD_INT 1
26843: ST_TO_ADDR
// for i = 1 to array1 do
26844: LD_ADDR_VAR 0 4
26848: PUSH
26849: DOUBLE
26850: LD_INT 1
26852: DEC
26853: ST_TO_ADDR
26854: LD_VAR 0 1
26858: PUSH
26859: FOR_TO
26860: IFFALSE 26898
// if array1 [ i ] <> array2 [ i ] then
26862: LD_VAR 0 1
26866: PUSH
26867: LD_VAR 0 4
26871: ARRAY
26872: PUSH
26873: LD_VAR 0 2
26877: PUSH
26878: LD_VAR 0 4
26882: ARRAY
26883: NONEQUAL
26884: IFFALSE 26896
// begin result := false ;
26886: LD_ADDR_VAR 0 3
26890: PUSH
26891: LD_INT 0
26893: ST_TO_ADDR
// break ;
26894: GO 26898
// end ;
26896: GO 26859
26898: POP
26899: POP
// end ;
26900: LD_VAR 0 3
26904: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26905: LD_INT 0
26907: PPUSH
26908: PPUSH
26909: PPUSH
// pom := GetBase ( fac ) ;
26910: LD_ADDR_VAR 0 5
26914: PUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 274
26924: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26925: LD_ADDR_VAR 0 4
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_INT 1
26937: ARRAY
26938: PPUSH
26939: LD_VAR 0 2
26943: PUSH
26944: LD_INT 2
26946: ARRAY
26947: PPUSH
26948: LD_VAR 0 2
26952: PUSH
26953: LD_INT 3
26955: ARRAY
26956: PPUSH
26957: LD_VAR 0 2
26961: PUSH
26962: LD_INT 4
26964: ARRAY
26965: PPUSH
26966: CALL_OW 449
26970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26971: LD_ADDR_VAR 0 3
26975: PUSH
26976: LD_VAR 0 5
26980: PPUSH
26981: LD_INT 1
26983: PPUSH
26984: CALL_OW 275
26988: PUSH
26989: LD_VAR 0 4
26993: PUSH
26994: LD_INT 1
26996: ARRAY
26997: GREATEREQUAL
26998: PUSH
26999: LD_VAR 0 5
27003: PPUSH
27004: LD_INT 2
27006: PPUSH
27007: CALL_OW 275
27011: PUSH
27012: LD_VAR 0 4
27016: PUSH
27017: LD_INT 2
27019: ARRAY
27020: GREATEREQUAL
27021: AND
27022: PUSH
27023: LD_VAR 0 5
27027: PPUSH
27028: LD_INT 3
27030: PPUSH
27031: CALL_OW 275
27035: PUSH
27036: LD_VAR 0 4
27040: PUSH
27041: LD_INT 3
27043: ARRAY
27044: GREATEREQUAL
27045: AND
27046: ST_TO_ADDR
// end ;
27047: LD_VAR 0 3
27051: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27052: LD_INT 0
27054: PPUSH
27055: PPUSH
27056: PPUSH
27057: PPUSH
// pom := GetBase ( building ) ;
27058: LD_ADDR_VAR 0 3
27062: PUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: CALL_OW 274
27072: ST_TO_ADDR
// if not pom then
27073: LD_VAR 0 3
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27252
// btype := GetBType ( building ) ;
27082: LD_ADDR_VAR 0 5
27086: PUSH
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 266
27096: ST_TO_ADDR
// if btype = b_armoury then
27097: LD_VAR 0 5
27101: PUSH
27102: LD_INT 4
27104: EQUAL
27105: IFFALSE 27115
// btype := b_barracks ;
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_INT 5
27114: ST_TO_ADDR
// if btype = b_depot then
27115: LD_VAR 0 5
27119: PUSH
27120: LD_INT 0
27122: EQUAL
27123: IFFALSE 27133
// btype := b_warehouse ;
27125: LD_ADDR_VAR 0 5
27129: PUSH
27130: LD_INT 1
27132: ST_TO_ADDR
// if btype = b_workshop then
27133: LD_VAR 0 5
27137: PUSH
27138: LD_INT 2
27140: EQUAL
27141: IFFALSE 27151
// btype := b_factory ;
27143: LD_ADDR_VAR 0 5
27147: PUSH
27148: LD_INT 3
27150: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27151: LD_ADDR_VAR 0 4
27155: PUSH
27156: LD_VAR 0 5
27160: PPUSH
27161: LD_VAR 0 1
27165: PPUSH
27166: CALL_OW 248
27170: PPUSH
27171: CALL_OW 450
27175: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_VAR 0 3
27185: PPUSH
27186: LD_INT 1
27188: PPUSH
27189: CALL_OW 275
27193: PUSH
27194: LD_VAR 0 4
27198: PUSH
27199: LD_INT 1
27201: ARRAY
27202: GREATEREQUAL
27203: PUSH
27204: LD_VAR 0 3
27208: PPUSH
27209: LD_INT 2
27211: PPUSH
27212: CALL_OW 275
27216: PUSH
27217: LD_VAR 0 4
27221: PUSH
27222: LD_INT 2
27224: ARRAY
27225: GREATEREQUAL
27226: AND
27227: PUSH
27228: LD_VAR 0 3
27232: PPUSH
27233: LD_INT 3
27235: PPUSH
27236: CALL_OW 275
27240: PUSH
27241: LD_VAR 0 4
27245: PUSH
27246: LD_INT 3
27248: ARRAY
27249: GREATEREQUAL
27250: AND
27251: ST_TO_ADDR
// end ;
27252: LD_VAR 0 2
27256: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27257: LD_INT 0
27259: PPUSH
27260: PPUSH
27261: PPUSH
// pom := GetBase ( building ) ;
27262: LD_ADDR_VAR 0 4
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 274
27276: ST_TO_ADDR
// if not pom then
27277: LD_VAR 0 4
27281: NOT
27282: IFFALSE 27286
// exit ;
27284: GO 27387
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27286: LD_ADDR_VAR 0 5
27290: PUSH
27291: LD_VAR 0 2
27295: PPUSH
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL_OW 248
27305: PPUSH
27306: CALL_OW 450
27310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27311: LD_ADDR_VAR 0 3
27315: PUSH
27316: LD_VAR 0 4
27320: PPUSH
27321: LD_INT 1
27323: PPUSH
27324: CALL_OW 275
27328: PUSH
27329: LD_VAR 0 5
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: GREATEREQUAL
27338: PUSH
27339: LD_VAR 0 4
27343: PPUSH
27344: LD_INT 2
27346: PPUSH
27347: CALL_OW 275
27351: PUSH
27352: LD_VAR 0 5
27356: PUSH
27357: LD_INT 2
27359: ARRAY
27360: GREATEREQUAL
27361: AND
27362: PUSH
27363: LD_VAR 0 4
27367: PPUSH
27368: LD_INT 3
27370: PPUSH
27371: CALL_OW 275
27375: PUSH
27376: LD_VAR 0 5
27380: PUSH
27381: LD_INT 3
27383: ARRAY
27384: GREATEREQUAL
27385: AND
27386: ST_TO_ADDR
// end ;
27387: LD_VAR 0 3
27391: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27392: LD_INT 0
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
// result := false ;
27405: LD_ADDR_VAR 0 8
27409: PUSH
27410: LD_INT 0
27412: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27413: LD_VAR 0 5
27417: NOT
27418: PUSH
27419: LD_VAR 0 1
27423: NOT
27424: OR
27425: PUSH
27426: LD_VAR 0 2
27430: NOT
27431: OR
27432: PUSH
27433: LD_VAR 0 3
27437: NOT
27438: OR
27439: IFFALSE 27443
// exit ;
27441: GO 28257
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27443: LD_ADDR_VAR 0 14
27447: PUSH
27448: LD_VAR 0 1
27452: PPUSH
27453: LD_VAR 0 2
27457: PPUSH
27458: LD_VAR 0 3
27462: PPUSH
27463: LD_VAR 0 4
27467: PPUSH
27468: LD_VAR 0 5
27472: PUSH
27473: LD_INT 1
27475: ARRAY
27476: PPUSH
27477: CALL_OW 248
27481: PPUSH
27482: LD_INT 0
27484: PPUSH
27485: CALL 29510 0 6
27489: ST_TO_ADDR
// if not hexes then
27490: LD_VAR 0 14
27494: NOT
27495: IFFALSE 27499
// exit ;
27497: GO 28257
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27499: LD_ADDR_VAR 0 17
27503: PUSH
27504: LD_VAR 0 5
27508: PPUSH
27509: LD_INT 22
27511: PUSH
27512: LD_VAR 0 13
27516: PPUSH
27517: CALL_OW 255
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 30
27531: PUSH
27532: LD_INT 0
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 30
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PPUSH
27558: CALL_OW 72
27562: ST_TO_ADDR
// for i = 1 to hexes do
27563: LD_ADDR_VAR 0 9
27567: PUSH
27568: DOUBLE
27569: LD_INT 1
27571: DEC
27572: ST_TO_ADDR
27573: LD_VAR 0 14
27577: PUSH
27578: FOR_TO
27579: IFFALSE 28255
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27581: LD_ADDR_VAR 0 13
27585: PUSH
27586: LD_VAR 0 14
27590: PUSH
27591: LD_VAR 0 9
27595: ARRAY
27596: PUSH
27597: LD_INT 1
27599: ARRAY
27600: PPUSH
27601: LD_VAR 0 14
27605: PUSH
27606: LD_VAR 0 9
27610: ARRAY
27611: PUSH
27612: LD_INT 2
27614: ARRAY
27615: PPUSH
27616: CALL_OW 428
27620: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27621: LD_VAR 0 14
27625: PUSH
27626: LD_VAR 0 9
27630: ARRAY
27631: PUSH
27632: LD_INT 1
27634: ARRAY
27635: PPUSH
27636: LD_VAR 0 14
27640: PUSH
27641: LD_VAR 0 9
27645: ARRAY
27646: PUSH
27647: LD_INT 2
27649: ARRAY
27650: PPUSH
27651: CALL_OW 351
27655: PUSH
27656: LD_VAR 0 14
27660: PUSH
27661: LD_VAR 0 9
27665: ARRAY
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: PPUSH
27671: LD_VAR 0 14
27675: PUSH
27676: LD_VAR 0 9
27680: ARRAY
27681: PUSH
27682: LD_INT 2
27684: ARRAY
27685: PPUSH
27686: CALL_OW 488
27690: NOT
27691: OR
27692: PUSH
27693: LD_VAR 0 13
27697: PPUSH
27698: CALL_OW 247
27702: PUSH
27703: LD_INT 3
27705: EQUAL
27706: OR
27707: IFFALSE 27713
// exit ;
27709: POP
27710: POP
27711: GO 28257
// if not tmp then
27713: LD_VAR 0 13
27717: NOT
27718: IFFALSE 27722
// continue ;
27720: GO 27578
// result := true ;
27722: LD_ADDR_VAR 0 8
27726: PUSH
27727: LD_INT 1
27729: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27730: LD_VAR 0 6
27734: PUSH
27735: LD_VAR 0 13
27739: PPUSH
27740: CALL_OW 247
27744: PUSH
27745: LD_INT 2
27747: EQUAL
27748: AND
27749: PUSH
27750: LD_VAR 0 13
27754: PPUSH
27755: CALL_OW 263
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: AND
27764: IFFALSE 27928
// begin if IsDrivenBy ( tmp ) then
27766: LD_VAR 0 13
27770: PPUSH
27771: CALL_OW 311
27775: IFFALSE 27779
// continue ;
27777: GO 27578
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27779: LD_VAR 0 6
27783: PPUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 60
27789: PUSH
27790: EMPTY
27791: LIST
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: LD_INT 55
27802: PUSH
27803: EMPTY
27804: LIST
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PPUSH
27814: CALL_OW 72
27818: IFFALSE 27926
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27820: LD_ADDR_VAR 0 18
27824: PUSH
27825: LD_VAR 0 6
27829: PPUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 60
27835: PUSH
27836: EMPTY
27837: LIST
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 3
27845: PUSH
27846: LD_INT 55
27848: PUSH
27849: EMPTY
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PPUSH
27860: CALL_OW 72
27864: PUSH
27865: LD_INT 1
27867: ARRAY
27868: ST_TO_ADDR
// if IsInUnit ( driver ) then
27869: LD_VAR 0 18
27873: PPUSH
27874: CALL_OW 310
27878: IFFALSE 27889
// ComExit ( driver ) ;
27880: LD_VAR 0 18
27884: PPUSH
27885: CALL 53291 0 1
// AddComEnterUnit ( driver , tmp ) ;
27889: LD_VAR 0 18
27893: PPUSH
27894: LD_VAR 0 13
27898: PPUSH
27899: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27903: LD_VAR 0 18
27907: PPUSH
27908: LD_VAR 0 7
27912: PPUSH
27913: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27917: LD_VAR 0 18
27921: PPUSH
27922: CALL_OW 181
// end ; continue ;
27926: GO 27578
// end ; if not cleaners or not tmp in cleaners then
27928: LD_VAR 0 6
27932: NOT
27933: PUSH
27934: LD_VAR 0 13
27938: PUSH
27939: LD_VAR 0 6
27943: IN
27944: NOT
27945: OR
27946: IFFALSE 28253
// begin if dep then
27948: LD_VAR 0 17
27952: IFFALSE 28088
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27954: LD_ADDR_VAR 0 16
27958: PUSH
27959: LD_VAR 0 17
27963: PUSH
27964: LD_INT 1
27966: ARRAY
27967: PPUSH
27968: CALL_OW 250
27972: PPUSH
27973: LD_VAR 0 17
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: CALL_OW 254
27986: PPUSH
27987: LD_INT 5
27989: PPUSH
27990: CALL_OW 272
27994: PUSH
27995: LD_VAR 0 17
27999: PUSH
28000: LD_INT 1
28002: ARRAY
28003: PPUSH
28004: CALL_OW 251
28008: PPUSH
28009: LD_VAR 0 17
28013: PUSH
28014: LD_INT 1
28016: ARRAY
28017: PPUSH
28018: CALL_OW 254
28022: PPUSH
28023: LD_INT 5
28025: PPUSH
28026: CALL_OW 273
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28035: LD_VAR 0 16
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: PPUSH
28044: LD_VAR 0 16
28048: PUSH
28049: LD_INT 2
28051: ARRAY
28052: PPUSH
28053: CALL_OW 488
28057: IFFALSE 28088
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28059: LD_VAR 0 13
28063: PPUSH
28064: LD_VAR 0 16
28068: PUSH
28069: LD_INT 1
28071: ARRAY
28072: PPUSH
28073: LD_VAR 0 16
28077: PUSH
28078: LD_INT 2
28080: ARRAY
28081: PPUSH
28082: CALL_OW 111
// continue ;
28086: GO 27578
// end ; end ; r := GetDir ( tmp ) ;
28088: LD_ADDR_VAR 0 15
28092: PUSH
28093: LD_VAR 0 13
28097: PPUSH
28098: CALL_OW 254
28102: ST_TO_ADDR
// if r = 5 then
28103: LD_VAR 0 15
28107: PUSH
28108: LD_INT 5
28110: EQUAL
28111: IFFALSE 28121
// r := 0 ;
28113: LD_ADDR_VAR 0 15
28117: PUSH
28118: LD_INT 0
28120: ST_TO_ADDR
// for j = r to 5 do
28121: LD_ADDR_VAR 0 10
28125: PUSH
28126: DOUBLE
28127: LD_VAR 0 15
28131: DEC
28132: ST_TO_ADDR
28133: LD_INT 5
28135: PUSH
28136: FOR_TO
28137: IFFALSE 28251
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28139: LD_ADDR_VAR 0 11
28143: PUSH
28144: LD_VAR 0 13
28148: PPUSH
28149: CALL_OW 250
28153: PPUSH
28154: LD_VAR 0 10
28158: PPUSH
28159: LD_INT 2
28161: PPUSH
28162: CALL_OW 272
28166: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28167: LD_ADDR_VAR 0 12
28171: PUSH
28172: LD_VAR 0 13
28176: PPUSH
28177: CALL_OW 251
28181: PPUSH
28182: LD_VAR 0 10
28186: PPUSH
28187: LD_INT 2
28189: PPUSH
28190: CALL_OW 273
28194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28195: LD_VAR 0 11
28199: PPUSH
28200: LD_VAR 0 12
28204: PPUSH
28205: CALL_OW 488
28209: PUSH
28210: LD_VAR 0 11
28214: PPUSH
28215: LD_VAR 0 12
28219: PPUSH
28220: CALL_OW 428
28224: NOT
28225: AND
28226: IFFALSE 28249
// begin ComMoveXY ( tmp , _x , _y ) ;
28228: LD_VAR 0 13
28232: PPUSH
28233: LD_VAR 0 11
28237: PPUSH
28238: LD_VAR 0 12
28242: PPUSH
28243: CALL_OW 111
// break ;
28247: GO 28251
// end ; end ;
28249: GO 28136
28251: POP
28252: POP
// end ; end ;
28253: GO 27578
28255: POP
28256: POP
// end ;
28257: LD_VAR 0 8
28261: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28262: LD_INT 0
28264: PPUSH
// result := true ;
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_INT 1
28272: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28273: LD_VAR 0 2
28277: PUSH
28278: LD_INT 24
28280: DOUBLE
28281: EQUAL
28282: IFTRUE 28292
28284: LD_INT 33
28286: DOUBLE
28287: EQUAL
28288: IFTRUE 28292
28290: GO 28317
28292: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28293: LD_ADDR_VAR 0 3
28297: PUSH
28298: LD_INT 32
28300: PPUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 321
28310: PUSH
28311: LD_INT 2
28313: EQUAL
28314: ST_TO_ADDR
28315: GO 28633
28317: LD_INT 20
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28350
28325: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 6
28333: PPUSH
28334: LD_VAR 0 1
28338: PPUSH
28339: CALL_OW 321
28343: PUSH
28344: LD_INT 2
28346: EQUAL
28347: ST_TO_ADDR
28348: GO 28633
28350: LD_INT 22
28352: DOUBLE
28353: EQUAL
28354: IFTRUE 28364
28356: LD_INT 36
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28389
28364: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_INT 15
28372: PPUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 321
28382: PUSH
28383: LD_INT 2
28385: EQUAL
28386: ST_TO_ADDR
28387: GO 28633
28389: LD_INT 30
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28422
28397: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28398: LD_ADDR_VAR 0 3
28402: PUSH
28403: LD_INT 20
28405: PPUSH
28406: LD_VAR 0 1
28410: PPUSH
28411: CALL_OW 321
28415: PUSH
28416: LD_INT 2
28418: EQUAL
28419: ST_TO_ADDR
28420: GO 28633
28422: LD_INT 28
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28436
28428: LD_INT 21
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28461
28436: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28437: LD_ADDR_VAR 0 3
28441: PUSH
28442: LD_INT 21
28444: PPUSH
28445: LD_VAR 0 1
28449: PPUSH
28450: CALL_OW 321
28454: PUSH
28455: LD_INT 2
28457: EQUAL
28458: ST_TO_ADDR
28459: GO 28633
28461: LD_INT 16
28463: DOUBLE
28464: EQUAL
28465: IFTRUE 28469
28467: GO 28494
28469: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_INT 84
28477: PPUSH
28478: LD_VAR 0 1
28482: PPUSH
28483: CALL_OW 321
28487: PUSH
28488: LD_INT 2
28490: EQUAL
28491: ST_TO_ADDR
28492: GO 28633
28494: LD_INT 19
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28508
28500: LD_INT 23
28502: DOUBLE
28503: EQUAL
28504: IFTRUE 28508
28506: GO 28533
28508: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28509: LD_ADDR_VAR 0 3
28513: PUSH
28514: LD_INT 83
28516: PPUSH
28517: LD_VAR 0 1
28521: PPUSH
28522: CALL_OW 321
28526: PUSH
28527: LD_INT 2
28529: EQUAL
28530: ST_TO_ADDR
28531: GO 28633
28533: LD_INT 17
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 28566
28541: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 39
28549: PPUSH
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL_OW 321
28559: PUSH
28560: LD_INT 2
28562: EQUAL
28563: ST_TO_ADDR
28564: GO 28633
28566: LD_INT 18
28568: DOUBLE
28569: EQUAL
28570: IFTRUE 28574
28572: GO 28599
28574: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28575: LD_ADDR_VAR 0 3
28579: PUSH
28580: LD_INT 40
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 321
28592: PUSH
28593: LD_INT 2
28595: EQUAL
28596: ST_TO_ADDR
28597: GO 28633
28599: LD_INT 27
28601: DOUBLE
28602: EQUAL
28603: IFTRUE 28607
28605: GO 28632
28607: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28608: LD_ADDR_VAR 0 3
28612: PUSH
28613: LD_INT 35
28615: PPUSH
28616: LD_VAR 0 1
28620: PPUSH
28621: CALL_OW 321
28625: PUSH
28626: LD_INT 2
28628: EQUAL
28629: ST_TO_ADDR
28630: GO 28633
28632: POP
// end ;
28633: LD_VAR 0 3
28637: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28638: LD_INT 0
28640: PPUSH
28641: PPUSH
28642: PPUSH
28643: PPUSH
28644: PPUSH
28645: PPUSH
28646: PPUSH
28647: PPUSH
28648: PPUSH
28649: PPUSH
28650: PPUSH
// result := false ;
28651: LD_ADDR_VAR 0 6
28655: PUSH
28656: LD_INT 0
28658: ST_TO_ADDR
// if btype = b_depot then
28659: LD_VAR 0 2
28663: PUSH
28664: LD_INT 0
28666: EQUAL
28667: IFFALSE 28679
// begin result := true ;
28669: LD_ADDR_VAR 0 6
28673: PUSH
28674: LD_INT 1
28676: ST_TO_ADDR
// exit ;
28677: GO 29505
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28679: LD_VAR 0 1
28683: NOT
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 266
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: IN
28705: NOT
28706: OR
28707: PUSH
28708: LD_VAR 0 2
28712: NOT
28713: OR
28714: PUSH
28715: LD_VAR 0 5
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: LD_INT 3
28731: PUSH
28732: LD_INT 4
28734: PUSH
28735: LD_INT 5
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: IN
28746: NOT
28747: OR
28748: PUSH
28749: LD_VAR 0 3
28753: PPUSH
28754: LD_VAR 0 4
28758: PPUSH
28759: CALL_OW 488
28763: NOT
28764: OR
28765: IFFALSE 28769
// exit ;
28767: GO 29505
// side := GetSide ( depot ) ;
28769: LD_ADDR_VAR 0 9
28773: PUSH
28774: LD_VAR 0 1
28778: PPUSH
28779: CALL_OW 255
28783: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28784: LD_VAR 0 9
28788: PPUSH
28789: LD_VAR 0 2
28793: PPUSH
28794: CALL 28262 0 2
28798: NOT
28799: IFFALSE 28803
// exit ;
28801: GO 29505
// pom := GetBase ( depot ) ;
28803: LD_ADDR_VAR 0 10
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 274
28817: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28818: LD_ADDR_VAR 0 11
28822: PUSH
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_VAR 0 1
28832: PPUSH
28833: CALL_OW 248
28837: PPUSH
28838: CALL_OW 450
28842: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28843: LD_VAR 0 10
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: CALL_OW 275
28855: PUSH
28856: LD_VAR 0 11
28860: PUSH
28861: LD_INT 1
28863: ARRAY
28864: GREATEREQUAL
28865: PUSH
28866: LD_VAR 0 10
28870: PPUSH
28871: LD_INT 2
28873: PPUSH
28874: CALL_OW 275
28878: PUSH
28879: LD_VAR 0 11
28883: PUSH
28884: LD_INT 2
28886: ARRAY
28887: GREATEREQUAL
28888: AND
28889: PUSH
28890: LD_VAR 0 10
28894: PPUSH
28895: LD_INT 3
28897: PPUSH
28898: CALL_OW 275
28902: PUSH
28903: LD_VAR 0 11
28907: PUSH
28908: LD_INT 3
28910: ARRAY
28911: GREATEREQUAL
28912: AND
28913: NOT
28914: IFFALSE 28918
// exit ;
28916: GO 29505
// if GetBType ( depot ) = b_depot then
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 266
28927: PUSH
28928: LD_INT 0
28930: EQUAL
28931: IFFALSE 28943
// dist := 28 else
28933: LD_ADDR_VAR 0 14
28937: PUSH
28938: LD_INT 28
28940: ST_TO_ADDR
28941: GO 28951
// dist := 36 ;
28943: LD_ADDR_VAR 0 14
28947: PUSH
28948: LD_INT 36
28950: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28951: LD_VAR 0 1
28955: PPUSH
28956: LD_VAR 0 3
28960: PPUSH
28961: LD_VAR 0 4
28965: PPUSH
28966: CALL_OW 297
28970: PUSH
28971: LD_VAR 0 14
28975: GREATER
28976: IFFALSE 28980
// exit ;
28978: GO 29505
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28980: LD_ADDR_VAR 0 12
28984: PUSH
28985: LD_VAR 0 2
28989: PPUSH
28990: LD_VAR 0 3
28994: PPUSH
28995: LD_VAR 0 4
28999: PPUSH
29000: LD_VAR 0 5
29004: PPUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 248
29014: PPUSH
29015: LD_INT 0
29017: PPUSH
29018: CALL 29510 0 6
29022: ST_TO_ADDR
// if not hexes then
29023: LD_VAR 0 12
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29505
// hex := GetHexInfo ( x , y ) ;
29032: LD_ADDR_VAR 0 15
29036: PUSH
29037: LD_VAR 0 3
29041: PPUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: CALL_OW 546
29051: ST_TO_ADDR
// if hex [ 1 ] then
29052: LD_VAR 0 15
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: IFFALSE 29064
// exit ;
29062: GO 29505
// height := hex [ 2 ] ;
29064: LD_ADDR_VAR 0 13
29068: PUSH
29069: LD_VAR 0 15
29073: PUSH
29074: LD_INT 2
29076: ARRAY
29077: ST_TO_ADDR
// for i = 1 to hexes do
29078: LD_ADDR_VAR 0 7
29082: PUSH
29083: DOUBLE
29084: LD_INT 1
29086: DEC
29087: ST_TO_ADDR
29088: LD_VAR 0 12
29092: PUSH
29093: FOR_TO
29094: IFFALSE 29424
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29096: LD_VAR 0 12
29100: PUSH
29101: LD_VAR 0 7
29105: ARRAY
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: LD_VAR 0 12
29115: PUSH
29116: LD_VAR 0 7
29120: ARRAY
29121: PUSH
29122: LD_INT 2
29124: ARRAY
29125: PPUSH
29126: CALL_OW 488
29130: NOT
29131: PUSH
29132: LD_VAR 0 12
29136: PUSH
29137: LD_VAR 0 7
29141: ARRAY
29142: PUSH
29143: LD_INT 1
29145: ARRAY
29146: PPUSH
29147: LD_VAR 0 12
29151: PUSH
29152: LD_VAR 0 7
29156: ARRAY
29157: PUSH
29158: LD_INT 2
29160: ARRAY
29161: PPUSH
29162: CALL_OW 428
29166: PUSH
29167: LD_INT 0
29169: GREATER
29170: OR
29171: PUSH
29172: LD_VAR 0 12
29176: PUSH
29177: LD_VAR 0 7
29181: ARRAY
29182: PUSH
29183: LD_INT 1
29185: ARRAY
29186: PPUSH
29187: LD_VAR 0 12
29191: PUSH
29192: LD_VAR 0 7
29196: ARRAY
29197: PUSH
29198: LD_INT 2
29200: ARRAY
29201: PPUSH
29202: CALL_OW 351
29206: OR
29207: IFFALSE 29213
// exit ;
29209: POP
29210: POP
29211: GO 29505
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29213: LD_ADDR_VAR 0 8
29217: PUSH
29218: LD_VAR 0 12
29222: PUSH
29223: LD_VAR 0 7
29227: ARRAY
29228: PUSH
29229: LD_INT 1
29231: ARRAY
29232: PPUSH
29233: LD_VAR 0 12
29237: PUSH
29238: LD_VAR 0 7
29242: ARRAY
29243: PUSH
29244: LD_INT 2
29246: ARRAY
29247: PPUSH
29248: CALL_OW 546
29252: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29253: LD_VAR 0 8
29257: PUSH
29258: LD_INT 1
29260: ARRAY
29261: PUSH
29262: LD_VAR 0 8
29266: PUSH
29267: LD_INT 2
29269: ARRAY
29270: PUSH
29271: LD_VAR 0 13
29275: PUSH
29276: LD_INT 2
29278: PLUS
29279: GREATER
29280: OR
29281: PUSH
29282: LD_VAR 0 8
29286: PUSH
29287: LD_INT 2
29289: ARRAY
29290: PUSH
29291: LD_VAR 0 13
29295: PUSH
29296: LD_INT 2
29298: MINUS
29299: LESS
29300: OR
29301: PUSH
29302: LD_VAR 0 8
29306: PUSH
29307: LD_INT 3
29309: ARRAY
29310: PUSH
29311: LD_INT 0
29313: PUSH
29314: LD_INT 8
29316: PUSH
29317: LD_INT 9
29319: PUSH
29320: LD_INT 10
29322: PUSH
29323: LD_INT 11
29325: PUSH
29326: LD_INT 12
29328: PUSH
29329: LD_INT 13
29331: PUSH
29332: LD_INT 16
29334: PUSH
29335: LD_INT 17
29337: PUSH
29338: LD_INT 18
29340: PUSH
29341: LD_INT 19
29343: PUSH
29344: LD_INT 20
29346: PUSH
29347: LD_INT 21
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: IN
29365: NOT
29366: OR
29367: PUSH
29368: LD_VAR 0 8
29372: PUSH
29373: LD_INT 5
29375: ARRAY
29376: NOT
29377: OR
29378: PUSH
29379: LD_VAR 0 8
29383: PUSH
29384: LD_INT 6
29386: ARRAY
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: LD_INT 7
29396: PUSH
29397: LD_INT 9
29399: PUSH
29400: LD_INT 10
29402: PUSH
29403: LD_INT 11
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: IN
29414: NOT
29415: OR
29416: IFFALSE 29422
// exit ;
29418: POP
29419: POP
29420: GO 29505
// end ;
29422: GO 29093
29424: POP
29425: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29426: LD_VAR 0 9
29430: PPUSH
29431: LD_VAR 0 3
29435: PPUSH
29436: LD_VAR 0 4
29440: PPUSH
29441: LD_INT 20
29443: PPUSH
29444: CALL 21428 0 4
29448: PUSH
29449: LD_INT 4
29451: ARRAY
29452: IFFALSE 29456
// exit ;
29454: GO 29505
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29456: LD_VAR 0 2
29460: PUSH
29461: LD_INT 29
29463: PUSH
29464: LD_INT 30
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: IN
29471: PUSH
29472: LD_VAR 0 3
29476: PPUSH
29477: LD_VAR 0 4
29481: PPUSH
29482: LD_VAR 0 9
29486: PPUSH
29487: CALL_OW 440
29491: NOT
29492: AND
29493: IFFALSE 29497
// exit ;
29495: GO 29505
// result := true ;
29497: LD_ADDR_VAR 0 6
29501: PUSH
29502: LD_INT 1
29504: ST_TO_ADDR
// end ;
29505: LD_VAR 0 6
29509: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29510: LD_INT 0
29512: PPUSH
29513: PPUSH
29514: PPUSH
29515: PPUSH
29516: PPUSH
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
29525: PPUSH
29526: PPUSH
29527: PPUSH
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
29532: PPUSH
29533: PPUSH
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
29556: PPUSH
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
29562: PPUSH
29563: PPUSH
29564: PPUSH
29565: PPUSH
29566: PPUSH
29567: PPUSH
29568: PPUSH
29569: PPUSH
// result = [ ] ;
29570: LD_ADDR_VAR 0 7
29574: PUSH
29575: EMPTY
29576: ST_TO_ADDR
// temp_list = [ ] ;
29577: LD_ADDR_VAR 0 9
29581: PUSH
29582: EMPTY
29583: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29584: LD_VAR 0 4
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 4
29603: PUSH
29604: LD_INT 5
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: IN
29615: NOT
29616: PUSH
29617: LD_VAR 0 1
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: IN
29632: PUSH
29633: LD_VAR 0 5
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: IN
29652: NOT
29653: AND
29654: OR
29655: IFFALSE 29659
// exit ;
29657: GO 48050
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29659: LD_VAR 0 1
29663: PUSH
29664: LD_INT 6
29666: PUSH
29667: LD_INT 7
29669: PUSH
29670: LD_INT 8
29672: PUSH
29673: LD_INT 13
29675: PUSH
29676: LD_INT 12
29678: PUSH
29679: LD_INT 15
29681: PUSH
29682: LD_INT 11
29684: PUSH
29685: LD_INT 14
29687: PUSH
29688: LD_INT 10
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: IN
29702: IFFALSE 29712
// btype = b_lab ;
29704: LD_ADDR_VAR 0 1
29708: PUSH
29709: LD_INT 6
29711: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29712: LD_VAR 0 6
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: IN
29731: NOT
29732: PUSH
29733: LD_VAR 0 1
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 6
29752: PUSH
29753: LD_INT 36
29755: PUSH
29756: LD_INT 4
29758: PUSH
29759: LD_INT 5
29761: PUSH
29762: LD_INT 31
29764: PUSH
29765: LD_INT 32
29767: PUSH
29768: LD_INT 33
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: IN
29784: NOT
29785: PUSH
29786: LD_VAR 0 6
29790: PUSH
29791: LD_INT 1
29793: EQUAL
29794: AND
29795: OR
29796: PUSH
29797: LD_VAR 0 1
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: IN
29812: NOT
29813: PUSH
29814: LD_VAR 0 6
29818: PUSH
29819: LD_INT 2
29821: EQUAL
29822: AND
29823: OR
29824: IFFALSE 29834
// mode = 0 ;
29826: LD_ADDR_VAR 0 6
29830: PUSH
29831: LD_INT 0
29833: ST_TO_ADDR
// case mode of 0 :
29834: LD_VAR 0 6
29838: PUSH
29839: LD_INT 0
29841: DOUBLE
29842: EQUAL
29843: IFTRUE 29847
29845: GO 41300
29847: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29848: LD_ADDR_VAR 0 11
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 2
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 3
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: LD_INT 2
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30041: LD_ADDR_VAR 0 12
30045: PUSH
30046: LD_INT 0
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 2
30143: PUSH
30144: LD_INT 1
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 2
30164: NEG
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 2
30187: NEG
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 3
30198: NEG
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30237: LD_ADDR_VAR 0 13
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: NEG
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30436: LD_ADDR_VAR 0 14
30440: PUSH
30441: LD_INT 0
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: NEG
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 3
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30632: LD_ADDR_VAR 0 15
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 1
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 2
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 2
30755: NEG
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30825: LD_ADDR_VAR 0 16
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: NEG
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: LD_INT 2
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 2
30948: NEG
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: LD_INT 2
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31018: LD_ADDR_VAR 0 17
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: NEG
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 1
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 0
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 1
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: LD_INT 0
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 2
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31248: LD_ADDR_VAR 0 18
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 1
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 2
31435: NEG
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 2
31447: NEG
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31478: LD_ADDR_VAR 0 19
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 2
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: NEG
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: NEG
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31708: LD_ADDR_VAR 0 20
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: LD_INT 1
31728: NEG
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: LD_INT 1
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: NEG
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 2
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31938: LD_ADDR_VAR 0 21
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 2
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 2
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 2
32125: NEG
32126: PUSH
32127: LD_INT 1
32129: NEG
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32168: LD_ADDR_VAR 0 22
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32398: LD_ADDR_VAR 0 23
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: NEG
32575: PUSH
32576: LD_INT 0
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: LD_INT 3
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32678: LD_ADDR_VAR 0 24
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 1
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 1
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 3
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32954: LD_ADDR_VAR 0 25
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 1
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 2
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 1
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33228: LD_ADDR_VAR 0 26
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: LD_INT 3
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 2
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33504: LD_ADDR_VAR 0 27
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: LD_INT 2
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 2
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: NEG
33704: PUSH
33705: LD_INT 2
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33784: LD_ADDR_VAR 0 28
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 2
33960: NEG
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 2
33971: NEG
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 3
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 3
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 3
34019: NEG
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 3
34031: NEG
34032: PUSH
34033: LD_INT 2
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34066: LD_ADDR_VAR 0 29
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 0
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: NEG
34257: PUSH
34258: LD_INT 3
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 3
34310: NEG
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34345: LD_ADDR_VAR 0 30
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 2
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 3
34588: NEG
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34623: LD_ADDR_VAR 0 31
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 1
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: NEG
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: LD_INT 2
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 3
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 3
34866: NEG
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34901: LD_ADDR_VAR 0 32
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 0
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: NEG
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: NEG
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 3
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 2
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 3
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: LD_INT 3
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 3
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35179: LD_ADDR_VAR 0 33
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 1
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 1
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: NEG
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: LD_INT 1
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 2
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 3
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: NEG
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35458: LD_ADDR_VAR 0 34
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 2
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 2
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 3
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 3
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 3
35703: NEG
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35738: LD_ADDR_VAR 0 35
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: NEG
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35850: LD_ADDR_VAR 0 36
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35962: LD_ADDR_VAR 0 37
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36074: LD_ADDR_VAR 0 38
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36186: LD_ADDR_VAR 0 39
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 2
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 2
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36298: LD_ADDR_VAR 0 40
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36410: LD_ADDR_VAR 0 41
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: NEG
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 2
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 2
36565: NEG
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 3
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 3
36643: PUSH
36644: LD_INT 2
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: NEG
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 3
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 3
36707: NEG
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: LD_INT 3
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36760: LD_ADDR_VAR 0 42
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 1
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 2
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: LD_INT 1
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 3
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 3
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 2
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: LD_INT 3
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: LD_INT 3
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 3
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 3
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 2
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37110: LD_ADDR_VAR 0 43
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 0
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 1
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: LD_INT 1
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: NEG
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 3
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 3
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 3
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 3
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 2
37395: NEG
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: NEG
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 3
37417: NEG
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37458: LD_ADDR_VAR 0 44
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 2
37636: NEG
37637: PUSH
37638: LD_INT 2
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: NEG
37649: PUSH
37650: LD_INT 3
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 3
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 3
37701: PUSH
37702: LD_INT 3
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 3
37732: NEG
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 3
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: LD_INT 3
37771: NEG
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37808: LD_ADDR_VAR 0 45
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 2
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: PUSH
37924: LD_INT 1
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 2
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 3
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 3
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: LD_INT 3
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 3
38105: NEG
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: LD_INT 3
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38158: LD_ADDR_VAR 0 46
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 1
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 3
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: LD_INT 2
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: NEG
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38506: LD_ADDR_VAR 0 47
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 1
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38657: LD_ADDR_VAR 0 48
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38804: LD_ADDR_VAR 0 49
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 0
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 1
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: NEG
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38948: LD_ADDR_VAR 0 50
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 0
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: LD_INT 1
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 2
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39092: LD_ADDR_VAR 0 51
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 1
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39239: LD_ADDR_VAR 0 52
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39390: LD_ADDR_VAR 0 53
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 1
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 1
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: NEG
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: NEG
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39620: LD_ADDR_VAR 0 54
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39850: LD_ADDR_VAR 0 55
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 0
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: NEG
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 2
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 2
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40080: LD_ADDR_VAR 0 56
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: NEG
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: LD_INT 2
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40310: LD_ADDR_VAR 0 57
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: NEG
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: NEG
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 1
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40540: LD_ADDR_VAR 0 58
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 2
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40770: LD_ADDR_VAR 0 59
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40858: LD_ADDR_VAR 0 60
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40946: LD_ADDR_VAR 0 61
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41034: LD_ADDR_VAR 0 62
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41122: LD_ADDR_VAR 0 63
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41210: LD_ADDR_VAR 0 64
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// end ; 1 :
41298: GO 47195
41300: LD_INT 1
41302: DOUBLE
41303: EQUAL
41304: IFTRUE 41308
41306: GO 43931
41308: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41309: LD_ADDR_VAR 0 11
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41353: LD_ADDR_VAR 0 12
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41394: LD_ADDR_VAR 0 13
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41434: LD_ADDR_VAR 0 14
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41475: LD_ADDR_VAR 0 15
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 3
41504: NEG
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41519: LD_ADDR_VAR 0 16
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: LD_INT 3
41530: NEG
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 3
41538: NEG
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 3
41550: NEG
41551: PUSH
41552: LD_INT 3
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41565: LD_ADDR_VAR 0 17
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 3
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 3
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41609: LD_ADDR_VAR 0 18
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: LD_INT 1
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41650: LD_ADDR_VAR 0 19
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: LD_INT 2
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41690: LD_ADDR_VAR 0 20
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41731: LD_ADDR_VAR 0 21
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 3
41749: NEG
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 3
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41775: LD_ADDR_VAR 0 22
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 3
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41821: LD_ADDR_VAR 0 23
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 3
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 4
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 3
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41865: LD_ADDR_VAR 0 24
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 3
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 4
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41906: LD_ADDR_VAR 0 25
41910: PUSH
41911: LD_INT 3
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 4
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: LD_INT 4
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41946: LD_ADDR_VAR 0 26
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 4
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 3
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41987: LD_ADDR_VAR 0 27
41991: PUSH
41992: LD_INT 3
41994: NEG
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 3
42005: NEG
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 4
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42031: LD_ADDR_VAR 0 28
42035: PUSH
42036: LD_INT 3
42038: NEG
42039: PUSH
42040: LD_INT 3
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: LD_INT 4
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 4
42062: NEG
42063: PUSH
42064: LD_INT 3
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42077: LD_ADDR_VAR 0 29
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 3
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 4
42122: NEG
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 4
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 3
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 5
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 5
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 4
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 6
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 6
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 5
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42232: LD_ADDR_VAR 0 30
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 4
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 4
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 4
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 5
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 5
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 5
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 6
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 6
42353: PUSH
42354: LD_INT 1
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42375: LD_ADDR_VAR 0 31
42379: PUSH
42380: LD_INT 3
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: PUSH
42403: LD_INT 3
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 4
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: LD_INT 4
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 5
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 5
42452: PUSH
42453: LD_INT 5
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 4
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 6
42472: PUSH
42473: LD_INT 5
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 6
42482: PUSH
42483: LD_INT 6
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 5
42492: PUSH
42493: LD_INT 6
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42514: LD_ADDR_VAR 0 32
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 3
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 4
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 5
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 5
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 4
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 6
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 0
42624: PUSH
42625: LD_INT 6
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: NEG
42635: PUSH
42636: LD_INT 5
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42657: LD_ADDR_VAR 0 33
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 4
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 4
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 4
42732: NEG
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 5
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 5
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 5
42766: NEG
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 6
42777: NEG
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 6
42788: NEG
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42812: LD_ADDR_VAR 0 34
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: LD_INT 3
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 3
42843: NEG
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 4
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 4
42867: NEG
42868: PUSH
42869: LD_INT 3
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 4
42879: NEG
42880: PUSH
42881: LD_INT 4
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 4
42891: NEG
42892: PUSH
42893: LD_INT 5
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 5
42903: NEG
42904: PUSH
42905: LD_INT 4
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 5
42915: NEG
42916: PUSH
42917: LD_INT 5
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 5
42927: NEG
42928: PUSH
42929: LD_INT 6
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 6
42939: NEG
42940: PUSH
42941: LD_INT 5
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 6
42951: NEG
42952: PUSH
42953: LD_INT 6
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42975: LD_ADDR_VAR 0 41
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: LD_INT 3
42997: NEG
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43019: LD_ADDR_VAR 0 42
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: LIST
43059: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43060: LD_ADDR_VAR 0 43
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43100: LD_ADDR_VAR 0 44
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43141: LD_ADDR_VAR 0 45
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43185: LD_ADDR_VAR 0 46
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43231: LD_ADDR_VAR 0 47
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: LD_INT 3
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43264: LD_ADDR_VAR 0 48
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43295: LD_ADDR_VAR 0 49
43299: PUSH
43300: LD_INT 3
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 3
43312: PUSH
43313: LD_INT 2
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43324: LD_ADDR_VAR 0 50
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 3
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43353: LD_ADDR_VAR 0 51
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43384: LD_ADDR_VAR 0 52
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43417: LD_ADDR_VAR 0 53
43421: PUSH
43422: LD_INT 1
43424: NEG
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 2
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43461: LD_ADDR_VAR 0 54
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43502: LD_ADDR_VAR 0 55
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 3
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43542: LD_ADDR_VAR 0 56
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43583: LD_ADDR_VAR 0 57
43587: PUSH
43588: LD_INT 2
43590: NEG
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43627: LD_ADDR_VAR 0 58
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: NEG
43659: PUSH
43660: LD_INT 3
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43673: LD_ADDR_VAR 0 59
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43717: LD_ADDR_VAR 0 60
43721: PUSH
43722: LD_INT 1
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43758: LD_ADDR_VAR 0 61
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43798: LD_ADDR_VAR 0 62
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43839: LD_ADDR_VAR 0 63
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43883: LD_ADDR_VAR 0 64
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: ST_TO_ADDR
// end ; 2 :
43929: GO 47195
43931: LD_INT 2
43933: DOUBLE
43934: EQUAL
43935: IFTRUE 43939
43937: GO 47194
43939: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43940: LD_ADDR_VAR 0 29
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 5
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 5
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 4
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 3
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 5
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 3
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 3
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 4
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 4
44070: PUSH
44071: LD_INT 4
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 4
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 4
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 4
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 4
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 4
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 5
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 5
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 4
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 3
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 4
44279: NEG
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 4
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 4
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 4
44325: NEG
44326: PUSH
44327: LD_INT 4
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 4
44337: NEG
44338: PUSH
44339: LD_INT 5
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 3
44349: NEG
44350: PUSH
44351: LD_INT 4
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: NEG
44362: PUSH
44363: LD_INT 3
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 4
44373: NEG
44374: PUSH
44375: LD_INT 3
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 5
44385: NEG
44386: PUSH
44387: LD_INT 4
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 5
44397: NEG
44398: PUSH
44399: LD_INT 5
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: LD_INT 5
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 5
44421: NEG
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44478: LD_ADDR_VAR 0 30
44482: PUSH
44483: LD_INT 4
44485: PUSH
44486: LD_INT 4
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 4
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 5
44505: PUSH
44506: LD_INT 4
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 5
44515: PUSH
44516: LD_INT 5
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 4
44525: PUSH
44526: LD_INT 5
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 4
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 5
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 3
44565: PUSH
44566: LD_INT 5
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 3
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 4
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 4
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 4
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 4
44668: NEG
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 4
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: NEG
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 4
44713: NEG
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 5
44724: NEG
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 5
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 5
44747: NEG
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 3
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: LD_INT 4
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 2
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 3
44818: NEG
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 4
44830: NEG
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 4
44842: NEG
44843: PUSH
44844: LD_INT 4
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 4
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 4
44866: NEG
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 4
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 5
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 4
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 3
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 3
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 4
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 5
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 3
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 5
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45025: LD_ADDR_VAR 0 31
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 4
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 4
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 5
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 4
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 5
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 2
45114: NEG
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: NEG
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 3
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 4
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 4
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 4
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: LD_INT 2
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: LD_INT 4
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 4
45239: NEG
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: NEG
45252: PUSH
45253: LD_INT 4
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 3
45263: NEG
45264: PUSH
45265: LD_INT 3
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 4
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 5
45287: NEG
45288: PUSH
45289: LD_INT 4
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 5
45299: NEG
45300: PUSH
45301: LD_INT 5
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 3
45311: NEG
45312: PUSH
45313: LD_INT 5
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 5
45323: NEG
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 4
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 3
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 4
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: NEG
45426: PUSH
45427: LD_INT 4
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 4
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 4
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 5
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 5
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 4
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 3
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 5
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45575: LD_ADDR_VAR 0 32
45579: PUSH
45580: LD_INT 4
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 4
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 3
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 4
45627: NEG
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 5
45638: NEG
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 5
45649: NEG
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 5
45661: NEG
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 3
45673: NEG
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 3
45684: NEG
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 2
45708: NEG
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 2
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 3
45732: NEG
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 4
45744: NEG
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: LD_INT 4
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: LD_INT 4
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 4
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 4
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 5
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 5
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: LD_INT 5
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 4
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 4
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 3
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 4
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 4
45987: PUSH
45988: LD_INT 4
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 4
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 5
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 5
46017: PUSH
46018: LD_INT 5
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 4
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 3
46037: PUSH
46038: LD_INT 4
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: LD_INT 3
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 5
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: LD_INT 5
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46122: LD_ADDR_VAR 0 33
46126: PUSH
46127: LD_INT 4
46129: NEG
46130: PUSH
46131: LD_INT 4
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 4
46141: NEG
46142: PUSH
46143: LD_INT 5
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 3
46153: NEG
46154: PUSH
46155: LD_INT 4
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: LD_INT 3
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 4
46177: NEG
46178: PUSH
46179: LD_INT 3
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 5
46189: NEG
46190: PUSH
46191: LD_INT 4
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 5
46201: NEG
46202: PUSH
46203: LD_INT 5
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 5
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 5
46225: NEG
46226: PUSH
46227: LD_INT 3
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 4
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: LD_INT 3
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 4
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 4
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 4
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 4
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 5
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 5
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 4
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 3
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: LD_INT 2
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 5
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 4
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 4
46462: PUSH
46463: LD_INT 4
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 4
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 3
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 4
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 4
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 4
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 4
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 5
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 5
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 4
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: LD_INT 5
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 3
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46660: LD_ADDR_VAR 0 34
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 4
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 5
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 4
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 3
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 4
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 5
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 3
46749: NEG
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 2
46757: NEG
46758: PUSH
46759: LD_INT 5
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 4
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 2
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 4
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 4
46862: PUSH
46863: LD_INT 4
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 4
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 5
46882: PUSH
46883: LD_INT 4
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 5
46892: PUSH
46893: LD_INT 5
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 4
46902: PUSH
46903: LD_INT 5
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: LD_INT 4
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: PUSH
46923: LD_INT 3
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 5
46932: PUSH
46933: LD_INT 3
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 5
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 0
46952: PUSH
46953: LD_INT 3
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 4
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 3
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 4
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 4
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 3
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 3
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 4
47090: NEG
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 5
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 5
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 5
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 3
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// end ; end ;
47192: GO 47195
47194: POP
// case btype of b_depot , b_warehouse :
47195: LD_VAR 0 1
47199: PUSH
47200: LD_INT 0
47202: DOUBLE
47203: EQUAL
47204: IFTRUE 47214
47206: LD_INT 1
47208: DOUBLE
47209: EQUAL
47210: IFTRUE 47214
47212: GO 47415
47214: POP
// case nation of nation_american :
47215: LD_VAR 0 5
47219: PUSH
47220: LD_INT 1
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47284
47228: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47229: LD_ADDR_VAR 0 9
47233: PUSH
47234: LD_VAR 0 11
47238: PUSH
47239: LD_VAR 0 12
47243: PUSH
47244: LD_VAR 0 13
47248: PUSH
47249: LD_VAR 0 14
47253: PUSH
47254: LD_VAR 0 15
47258: PUSH
47259: LD_VAR 0 16
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: PUSH
47272: LD_VAR 0 4
47276: PUSH
47277: LD_INT 1
47279: PLUS
47280: ARRAY
47281: ST_TO_ADDR
47282: GO 47413
47284: LD_INT 2
47286: DOUBLE
47287: EQUAL
47288: IFTRUE 47292
47290: GO 47348
47292: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47293: LD_ADDR_VAR 0 9
47297: PUSH
47298: LD_VAR 0 17
47302: PUSH
47303: LD_VAR 0 18
47307: PUSH
47308: LD_VAR 0 19
47312: PUSH
47313: LD_VAR 0 20
47317: PUSH
47318: LD_VAR 0 21
47322: PUSH
47323: LD_VAR 0 22
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: PUSH
47336: LD_VAR 0 4
47340: PUSH
47341: LD_INT 1
47343: PLUS
47344: ARRAY
47345: ST_TO_ADDR
47346: GO 47413
47348: LD_INT 3
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47356
47354: GO 47412
47356: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47357: LD_ADDR_VAR 0 9
47361: PUSH
47362: LD_VAR 0 23
47366: PUSH
47367: LD_VAR 0 24
47371: PUSH
47372: LD_VAR 0 25
47376: PUSH
47377: LD_VAR 0 26
47381: PUSH
47382: LD_VAR 0 27
47386: PUSH
47387: LD_VAR 0 28
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: PUSH
47400: LD_VAR 0 4
47404: PUSH
47405: LD_INT 1
47407: PLUS
47408: ARRAY
47409: ST_TO_ADDR
47410: GO 47413
47412: POP
47413: GO 47968
47415: LD_INT 2
47417: DOUBLE
47418: EQUAL
47419: IFTRUE 47429
47421: LD_INT 3
47423: DOUBLE
47424: EQUAL
47425: IFTRUE 47429
47427: GO 47485
47429: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47430: LD_ADDR_VAR 0 9
47434: PUSH
47435: LD_VAR 0 29
47439: PUSH
47440: LD_VAR 0 30
47444: PUSH
47445: LD_VAR 0 31
47449: PUSH
47450: LD_VAR 0 32
47454: PUSH
47455: LD_VAR 0 33
47459: PUSH
47460: LD_VAR 0 34
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: PUSH
47473: LD_VAR 0 4
47477: PUSH
47478: LD_INT 1
47480: PLUS
47481: ARRAY
47482: ST_TO_ADDR
47483: GO 47968
47485: LD_INT 16
47487: DOUBLE
47488: EQUAL
47489: IFTRUE 47547
47491: LD_INT 17
47493: DOUBLE
47494: EQUAL
47495: IFTRUE 47547
47497: LD_INT 18
47499: DOUBLE
47500: EQUAL
47501: IFTRUE 47547
47503: LD_INT 19
47505: DOUBLE
47506: EQUAL
47507: IFTRUE 47547
47509: LD_INT 22
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47547
47515: LD_INT 20
47517: DOUBLE
47518: EQUAL
47519: IFTRUE 47547
47521: LD_INT 21
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47547
47527: LD_INT 23
47529: DOUBLE
47530: EQUAL
47531: IFTRUE 47547
47533: LD_INT 24
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47547
47539: LD_INT 25
47541: DOUBLE
47542: EQUAL
47543: IFTRUE 47547
47545: GO 47603
47547: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47548: LD_ADDR_VAR 0 9
47552: PUSH
47553: LD_VAR 0 35
47557: PUSH
47558: LD_VAR 0 36
47562: PUSH
47563: LD_VAR 0 37
47567: PUSH
47568: LD_VAR 0 38
47572: PUSH
47573: LD_VAR 0 39
47577: PUSH
47578: LD_VAR 0 40
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: PUSH
47591: LD_VAR 0 4
47595: PUSH
47596: LD_INT 1
47598: PLUS
47599: ARRAY
47600: ST_TO_ADDR
47601: GO 47968
47603: LD_INT 6
47605: DOUBLE
47606: EQUAL
47607: IFTRUE 47659
47609: LD_INT 7
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47659
47615: LD_INT 8
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47659
47621: LD_INT 13
47623: DOUBLE
47624: EQUAL
47625: IFTRUE 47659
47627: LD_INT 12
47629: DOUBLE
47630: EQUAL
47631: IFTRUE 47659
47633: LD_INT 15
47635: DOUBLE
47636: EQUAL
47637: IFTRUE 47659
47639: LD_INT 11
47641: DOUBLE
47642: EQUAL
47643: IFTRUE 47659
47645: LD_INT 14
47647: DOUBLE
47648: EQUAL
47649: IFTRUE 47659
47651: LD_INT 10
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47659
47657: GO 47715
47659: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47660: LD_ADDR_VAR 0 9
47664: PUSH
47665: LD_VAR 0 41
47669: PUSH
47670: LD_VAR 0 42
47674: PUSH
47675: LD_VAR 0 43
47679: PUSH
47680: LD_VAR 0 44
47684: PUSH
47685: LD_VAR 0 45
47689: PUSH
47690: LD_VAR 0 46
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 4
47707: PUSH
47708: LD_INT 1
47710: PLUS
47711: ARRAY
47712: ST_TO_ADDR
47713: GO 47968
47715: LD_INT 36
47717: DOUBLE
47718: EQUAL
47719: IFTRUE 47723
47721: GO 47779
47723: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47724: LD_ADDR_VAR 0 9
47728: PUSH
47729: LD_VAR 0 47
47733: PUSH
47734: LD_VAR 0 48
47738: PUSH
47739: LD_VAR 0 49
47743: PUSH
47744: LD_VAR 0 50
47748: PUSH
47749: LD_VAR 0 51
47753: PUSH
47754: LD_VAR 0 52
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: LD_VAR 0 4
47771: PUSH
47772: LD_INT 1
47774: PLUS
47775: ARRAY
47776: ST_TO_ADDR
47777: GO 47968
47779: LD_INT 4
47781: DOUBLE
47782: EQUAL
47783: IFTRUE 47805
47785: LD_INT 5
47787: DOUBLE
47788: EQUAL
47789: IFTRUE 47805
47791: LD_INT 34
47793: DOUBLE
47794: EQUAL
47795: IFTRUE 47805
47797: LD_INT 37
47799: DOUBLE
47800: EQUAL
47801: IFTRUE 47805
47803: GO 47861
47805: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47806: LD_ADDR_VAR 0 9
47810: PUSH
47811: LD_VAR 0 53
47815: PUSH
47816: LD_VAR 0 54
47820: PUSH
47821: LD_VAR 0 55
47825: PUSH
47826: LD_VAR 0 56
47830: PUSH
47831: LD_VAR 0 57
47835: PUSH
47836: LD_VAR 0 58
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: PUSH
47849: LD_VAR 0 4
47853: PUSH
47854: LD_INT 1
47856: PLUS
47857: ARRAY
47858: ST_TO_ADDR
47859: GO 47968
47861: LD_INT 31
47863: DOUBLE
47864: EQUAL
47865: IFTRUE 47911
47867: LD_INT 32
47869: DOUBLE
47870: EQUAL
47871: IFTRUE 47911
47873: LD_INT 33
47875: DOUBLE
47876: EQUAL
47877: IFTRUE 47911
47879: LD_INT 27
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47911
47885: LD_INT 26
47887: DOUBLE
47888: EQUAL
47889: IFTRUE 47911
47891: LD_INT 28
47893: DOUBLE
47894: EQUAL
47895: IFTRUE 47911
47897: LD_INT 29
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47911
47903: LD_INT 30
47905: DOUBLE
47906: EQUAL
47907: IFTRUE 47911
47909: GO 47967
47911: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47912: LD_ADDR_VAR 0 9
47916: PUSH
47917: LD_VAR 0 59
47921: PUSH
47922: LD_VAR 0 60
47926: PUSH
47927: LD_VAR 0 61
47931: PUSH
47932: LD_VAR 0 62
47936: PUSH
47937: LD_VAR 0 63
47941: PUSH
47942: LD_VAR 0 64
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: PUSH
47955: LD_VAR 0 4
47959: PUSH
47960: LD_INT 1
47962: PLUS
47963: ARRAY
47964: ST_TO_ADDR
47965: GO 47968
47967: POP
// temp_list2 = [ ] ;
47968: LD_ADDR_VAR 0 10
47972: PUSH
47973: EMPTY
47974: ST_TO_ADDR
// for i in temp_list do
47975: LD_ADDR_VAR 0 8
47979: PUSH
47980: LD_VAR 0 9
47984: PUSH
47985: FOR_IN
47986: IFFALSE 48038
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47988: LD_ADDR_VAR 0 10
47992: PUSH
47993: LD_VAR 0 10
47997: PUSH
47998: LD_VAR 0 8
48002: PUSH
48003: LD_INT 1
48005: ARRAY
48006: PUSH
48007: LD_VAR 0 2
48011: PLUS
48012: PUSH
48013: LD_VAR 0 8
48017: PUSH
48018: LD_INT 2
48020: ARRAY
48021: PUSH
48022: LD_VAR 0 3
48026: PLUS
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: ADD
48035: ST_TO_ADDR
48036: GO 47985
48038: POP
48039: POP
// result = temp_list2 ;
48040: LD_ADDR_VAR 0 7
48044: PUSH
48045: LD_VAR 0 10
48049: ST_TO_ADDR
// end ;
48050: LD_VAR 0 7
48054: RET
// export function EnemyInRange ( unit , dist ) ; begin
48055: LD_INT 0
48057: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48058: LD_ADDR_VAR 0 3
48062: PUSH
48063: LD_VAR 0 1
48067: PPUSH
48068: CALL_OW 255
48072: PPUSH
48073: LD_VAR 0 1
48077: PPUSH
48078: CALL_OW 250
48082: PPUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL_OW 251
48092: PPUSH
48093: LD_VAR 0 2
48097: PPUSH
48098: CALL 21428 0 4
48102: PUSH
48103: LD_INT 4
48105: ARRAY
48106: ST_TO_ADDR
// end ;
48107: LD_VAR 0 3
48111: RET
// export function PlayerSeeMe ( unit ) ; begin
48112: LD_INT 0
48114: PPUSH
// result := See ( your_side , unit ) ;
48115: LD_ADDR_VAR 0 2
48119: PUSH
48120: LD_OWVAR 2
48124: PPUSH
48125: LD_VAR 0 1
48129: PPUSH
48130: CALL_OW 292
48134: ST_TO_ADDR
// end ;
48135: LD_VAR 0 2
48139: RET
// export function ReverseDir ( unit ) ; begin
48140: LD_INT 0
48142: PPUSH
// if not unit then
48143: LD_VAR 0 1
48147: NOT
48148: IFFALSE 48152
// exit ;
48150: GO 48175
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48152: LD_ADDR_VAR 0 2
48156: PUSH
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 254
48166: PUSH
48167: LD_INT 3
48169: PLUS
48170: PUSH
48171: LD_INT 6
48173: MOD
48174: ST_TO_ADDR
// end ;
48175: LD_VAR 0 2
48179: RET
// export function ReverseArray ( array ) ; var i ; begin
48180: LD_INT 0
48182: PPUSH
48183: PPUSH
// if not array then
48184: LD_VAR 0 1
48188: NOT
48189: IFFALSE 48193
// exit ;
48191: GO 48248
// result := [ ] ;
48193: LD_ADDR_VAR 0 2
48197: PUSH
48198: EMPTY
48199: ST_TO_ADDR
// for i := array downto 1 do
48200: LD_ADDR_VAR 0 3
48204: PUSH
48205: DOUBLE
48206: LD_VAR 0 1
48210: INC
48211: ST_TO_ADDR
48212: LD_INT 1
48214: PUSH
48215: FOR_DOWNTO
48216: IFFALSE 48246
// result := Join ( result , array [ i ] ) ;
48218: LD_ADDR_VAR 0 2
48222: PUSH
48223: LD_VAR 0 2
48227: PPUSH
48228: LD_VAR 0 1
48232: PUSH
48233: LD_VAR 0 3
48237: ARRAY
48238: PPUSH
48239: CALL 52893 0 2
48243: ST_TO_ADDR
48244: GO 48215
48246: POP
48247: POP
// end ;
48248: LD_VAR 0 2
48252: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48253: LD_INT 0
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
// if not unit or not hexes then
48261: LD_VAR 0 1
48265: NOT
48266: PUSH
48267: LD_VAR 0 2
48271: NOT
48272: OR
48273: IFFALSE 48277
// exit ;
48275: GO 48400
// dist := 9999 ;
48277: LD_ADDR_VAR 0 5
48281: PUSH
48282: LD_INT 9999
48284: ST_TO_ADDR
// for i = 1 to hexes do
48285: LD_ADDR_VAR 0 4
48289: PUSH
48290: DOUBLE
48291: LD_INT 1
48293: DEC
48294: ST_TO_ADDR
48295: LD_VAR 0 2
48299: PUSH
48300: FOR_TO
48301: IFFALSE 48388
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48303: LD_ADDR_VAR 0 6
48307: PUSH
48308: LD_VAR 0 1
48312: PPUSH
48313: LD_VAR 0 2
48317: PUSH
48318: LD_VAR 0 4
48322: ARRAY
48323: PUSH
48324: LD_INT 1
48326: ARRAY
48327: PPUSH
48328: LD_VAR 0 2
48332: PUSH
48333: LD_VAR 0 4
48337: ARRAY
48338: PUSH
48339: LD_INT 2
48341: ARRAY
48342: PPUSH
48343: CALL_OW 297
48347: ST_TO_ADDR
// if tdist < dist then
48348: LD_VAR 0 6
48352: PUSH
48353: LD_VAR 0 5
48357: LESS
48358: IFFALSE 48386
// begin hex := hexes [ i ] ;
48360: LD_ADDR_VAR 0 8
48364: PUSH
48365: LD_VAR 0 2
48369: PUSH
48370: LD_VAR 0 4
48374: ARRAY
48375: ST_TO_ADDR
// dist := tdist ;
48376: LD_ADDR_VAR 0 5
48380: PUSH
48381: LD_VAR 0 6
48385: ST_TO_ADDR
// end ; end ;
48386: GO 48300
48388: POP
48389: POP
// result := hex ;
48390: LD_ADDR_VAR 0 3
48394: PUSH
48395: LD_VAR 0 8
48399: ST_TO_ADDR
// end ;
48400: LD_VAR 0 3
48404: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48405: LD_INT 0
48407: PPUSH
48408: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48409: LD_VAR 0 1
48413: NOT
48414: PUSH
48415: LD_VAR 0 1
48419: PUSH
48420: LD_INT 21
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 23
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PPUSH
48444: CALL_OW 69
48448: IN
48449: NOT
48450: OR
48451: IFFALSE 48455
// exit ;
48453: GO 48502
// for i = 1 to 3 do
48455: LD_ADDR_VAR 0 3
48459: PUSH
48460: DOUBLE
48461: LD_INT 1
48463: DEC
48464: ST_TO_ADDR
48465: LD_INT 3
48467: PUSH
48468: FOR_TO
48469: IFFALSE 48500
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 250
48480: PPUSH
48481: LD_VAR 0 1
48485: PPUSH
48486: CALL_OW 251
48490: PPUSH
48491: LD_INT 1
48493: PPUSH
48494: CALL_OW 453
48498: GO 48468
48500: POP
48501: POP
// end ;
48502: LD_VAR 0 2
48506: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48507: LD_INT 0
48509: PPUSH
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
// if not unit or not enemy_unit then
48515: LD_VAR 0 1
48519: NOT
48520: PUSH
48521: LD_VAR 0 2
48525: NOT
48526: OR
48527: IFFALSE 48531
// exit ;
48529: GO 48998
// if GetLives ( i ) < 250 then
48531: LD_VAR 0 4
48535: PPUSH
48536: CALL_OW 256
48540: PUSH
48541: LD_INT 250
48543: LESS
48544: IFFALSE 48557
// begin ComAutodestruct ( i ) ;
48546: LD_VAR 0 4
48550: PPUSH
48551: CALL 48405 0 1
// exit ;
48555: GO 48998
// end ; x := GetX ( enemy_unit ) ;
48557: LD_ADDR_VAR 0 7
48561: PUSH
48562: LD_VAR 0 2
48566: PPUSH
48567: CALL_OW 250
48571: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48572: LD_ADDR_VAR 0 8
48576: PUSH
48577: LD_VAR 0 2
48581: PPUSH
48582: CALL_OW 251
48586: ST_TO_ADDR
// if not x or not y then
48587: LD_VAR 0 7
48591: NOT
48592: PUSH
48593: LD_VAR 0 8
48597: NOT
48598: OR
48599: IFFALSE 48603
// exit ;
48601: GO 48998
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48603: LD_ADDR_VAR 0 6
48607: PUSH
48608: LD_VAR 0 7
48612: PPUSH
48613: LD_INT 0
48615: PPUSH
48616: LD_INT 4
48618: PPUSH
48619: CALL_OW 272
48623: PUSH
48624: LD_VAR 0 8
48628: PPUSH
48629: LD_INT 0
48631: PPUSH
48632: LD_INT 4
48634: PPUSH
48635: CALL_OW 273
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_VAR 0 7
48648: PPUSH
48649: LD_INT 1
48651: PPUSH
48652: LD_INT 4
48654: PPUSH
48655: CALL_OW 272
48659: PUSH
48660: LD_VAR 0 8
48664: PPUSH
48665: LD_INT 1
48667: PPUSH
48668: LD_INT 4
48670: PPUSH
48671: CALL_OW 273
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_VAR 0 7
48684: PPUSH
48685: LD_INT 2
48687: PPUSH
48688: LD_INT 4
48690: PPUSH
48691: CALL_OW 272
48695: PUSH
48696: LD_VAR 0 8
48700: PPUSH
48701: LD_INT 2
48703: PPUSH
48704: LD_INT 4
48706: PPUSH
48707: CALL_OW 273
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_VAR 0 7
48720: PPUSH
48721: LD_INT 3
48723: PPUSH
48724: LD_INT 4
48726: PPUSH
48727: CALL_OW 272
48731: PUSH
48732: LD_VAR 0 8
48736: PPUSH
48737: LD_INT 3
48739: PPUSH
48740: LD_INT 4
48742: PPUSH
48743: CALL_OW 273
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_VAR 0 7
48756: PPUSH
48757: LD_INT 4
48759: PPUSH
48760: LD_INT 4
48762: PPUSH
48763: CALL_OW 272
48767: PUSH
48768: LD_VAR 0 8
48772: PPUSH
48773: LD_INT 4
48775: PPUSH
48776: LD_INT 4
48778: PPUSH
48779: CALL_OW 273
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_VAR 0 7
48792: PPUSH
48793: LD_INT 5
48795: PPUSH
48796: LD_INT 4
48798: PPUSH
48799: CALL_OW 272
48803: PUSH
48804: LD_VAR 0 8
48808: PPUSH
48809: LD_INT 5
48811: PPUSH
48812: LD_INT 4
48814: PPUSH
48815: CALL_OW 273
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: ST_TO_ADDR
// for i = tmp downto 1 do
48832: LD_ADDR_VAR 0 4
48836: PUSH
48837: DOUBLE
48838: LD_VAR 0 6
48842: INC
48843: ST_TO_ADDR
48844: LD_INT 1
48846: PUSH
48847: FOR_DOWNTO
48848: IFFALSE 48949
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48850: LD_VAR 0 6
48854: PUSH
48855: LD_VAR 0 4
48859: ARRAY
48860: PUSH
48861: LD_INT 1
48863: ARRAY
48864: PPUSH
48865: LD_VAR 0 6
48869: PUSH
48870: LD_VAR 0 4
48874: ARRAY
48875: PUSH
48876: LD_INT 2
48878: ARRAY
48879: PPUSH
48880: CALL_OW 488
48884: NOT
48885: PUSH
48886: LD_VAR 0 6
48890: PUSH
48891: LD_VAR 0 4
48895: ARRAY
48896: PUSH
48897: LD_INT 1
48899: ARRAY
48900: PPUSH
48901: LD_VAR 0 6
48905: PUSH
48906: LD_VAR 0 4
48910: ARRAY
48911: PUSH
48912: LD_INT 2
48914: ARRAY
48915: PPUSH
48916: CALL_OW 428
48920: PUSH
48921: LD_INT 0
48923: NONEQUAL
48924: OR
48925: IFFALSE 48947
// tmp := Delete ( tmp , i ) ;
48927: LD_ADDR_VAR 0 6
48931: PUSH
48932: LD_VAR 0 6
48936: PPUSH
48937: LD_VAR 0 4
48941: PPUSH
48942: CALL_OW 3
48946: ST_TO_ADDR
48947: GO 48847
48949: POP
48950: POP
// j := GetClosestHex ( unit , tmp ) ;
48951: LD_ADDR_VAR 0 5
48955: PUSH
48956: LD_VAR 0 1
48960: PPUSH
48961: LD_VAR 0 6
48965: PPUSH
48966: CALL 48253 0 2
48970: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48971: LD_VAR 0 1
48975: PPUSH
48976: LD_VAR 0 5
48980: PUSH
48981: LD_INT 1
48983: ARRAY
48984: PPUSH
48985: LD_VAR 0 5
48989: PUSH
48990: LD_INT 2
48992: ARRAY
48993: PPUSH
48994: CALL_OW 111
// end ;
48998: LD_VAR 0 3
49002: RET
// export function PrepareApemanSoldier ( ) ; begin
49003: LD_INT 0
49005: PPUSH
// uc_nation := 0 ;
49006: LD_ADDR_OWVAR 21
49010: PUSH
49011: LD_INT 0
49013: ST_TO_ADDR
// hc_sex := sex_male ;
49014: LD_ADDR_OWVAR 27
49018: PUSH
49019: LD_INT 1
49021: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49022: LD_ADDR_OWVAR 28
49026: PUSH
49027: LD_INT 15
49029: ST_TO_ADDR
// hc_gallery :=  ;
49030: LD_ADDR_OWVAR 33
49034: PUSH
49035: LD_STRING 
49037: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49038: LD_ADDR_OWVAR 31
49042: PUSH
49043: LD_INT 0
49045: PPUSH
49046: LD_INT 3
49048: PPUSH
49049: CALL_OW 12
49053: PUSH
49054: LD_INT 0
49056: PPUSH
49057: LD_INT 3
49059: PPUSH
49060: CALL_OW 12
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: ST_TO_ADDR
// end ;
49077: LD_VAR 0 1
49081: RET
// export function PrepareApemanEngineer ( ) ; begin
49082: LD_INT 0
49084: PPUSH
// uc_nation := 0 ;
49085: LD_ADDR_OWVAR 21
49089: PUSH
49090: LD_INT 0
49092: ST_TO_ADDR
// hc_sex := sex_male ;
49093: LD_ADDR_OWVAR 27
49097: PUSH
49098: LD_INT 1
49100: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49101: LD_ADDR_OWVAR 28
49105: PUSH
49106: LD_INT 16
49108: ST_TO_ADDR
// hc_gallery :=  ;
49109: LD_ADDR_OWVAR 33
49113: PUSH
49114: LD_STRING 
49116: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49117: LD_ADDR_OWVAR 31
49121: PUSH
49122: LD_INT 0
49124: PPUSH
49125: LD_INT 3
49127: PPUSH
49128: CALL_OW 12
49132: PUSH
49133: LD_INT 0
49135: PPUSH
49136: LD_INT 3
49138: PPUSH
49139: CALL_OW 12
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: ST_TO_ADDR
// end ;
49156: LD_VAR 0 1
49160: RET
// export function PrepareApeman ( agressivity ) ; begin
49161: LD_INT 0
49163: PPUSH
// uc_side := 0 ;
49164: LD_ADDR_OWVAR 20
49168: PUSH
49169: LD_INT 0
49171: ST_TO_ADDR
// uc_nation := 0 ;
49172: LD_ADDR_OWVAR 21
49176: PUSH
49177: LD_INT 0
49179: ST_TO_ADDR
// hc_sex := sex_male ;
49180: LD_ADDR_OWVAR 27
49184: PUSH
49185: LD_INT 1
49187: ST_TO_ADDR
// hc_class := class_apeman ;
49188: LD_ADDR_OWVAR 28
49192: PUSH
49193: LD_INT 12
49195: ST_TO_ADDR
// hc_gallery :=  ;
49196: LD_ADDR_OWVAR 33
49200: PUSH
49201: LD_STRING 
49203: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49204: LD_ADDR_OWVAR 35
49208: PUSH
49209: LD_VAR 0 1
49213: NEG
49214: PPUSH
49215: LD_VAR 0 1
49219: PPUSH
49220: CALL_OW 12
49224: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49225: LD_ADDR_OWVAR 31
49229: PUSH
49230: LD_INT 0
49232: PPUSH
49233: LD_INT 3
49235: PPUSH
49236: CALL_OW 12
49240: PUSH
49241: LD_INT 0
49243: PPUSH
49244: LD_INT 3
49246: PPUSH
49247: CALL_OW 12
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// end ;
49264: LD_VAR 0 2
49268: RET
// export function PrepareTiger ( agressivity ) ; begin
49269: LD_INT 0
49271: PPUSH
// uc_side := 0 ;
49272: LD_ADDR_OWVAR 20
49276: PUSH
49277: LD_INT 0
49279: ST_TO_ADDR
// uc_nation := 0 ;
49280: LD_ADDR_OWVAR 21
49284: PUSH
49285: LD_INT 0
49287: ST_TO_ADDR
// hc_class := class_tiger ;
49288: LD_ADDR_OWVAR 28
49292: PUSH
49293: LD_INT 14
49295: ST_TO_ADDR
// hc_gallery :=  ;
49296: LD_ADDR_OWVAR 33
49300: PUSH
49301: LD_STRING 
49303: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49304: LD_ADDR_OWVAR 35
49308: PUSH
49309: LD_VAR 0 1
49313: NEG
49314: PPUSH
49315: LD_VAR 0 1
49319: PPUSH
49320: CALL_OW 12
49324: ST_TO_ADDR
// end ;
49325: LD_VAR 0 2
49329: RET
// export function PrepareEnchidna ( ) ; begin
49330: LD_INT 0
49332: PPUSH
// uc_side := 0 ;
49333: LD_ADDR_OWVAR 20
49337: PUSH
49338: LD_INT 0
49340: ST_TO_ADDR
// uc_nation := 0 ;
49341: LD_ADDR_OWVAR 21
49345: PUSH
49346: LD_INT 0
49348: ST_TO_ADDR
// hc_class := class_baggie ;
49349: LD_ADDR_OWVAR 28
49353: PUSH
49354: LD_INT 13
49356: ST_TO_ADDR
// hc_gallery :=  ;
49357: LD_ADDR_OWVAR 33
49361: PUSH
49362: LD_STRING 
49364: ST_TO_ADDR
// end ;
49365: LD_VAR 0 1
49369: RET
// export function PrepareFrog ( ) ; begin
49370: LD_INT 0
49372: PPUSH
// uc_side := 0 ;
49373: LD_ADDR_OWVAR 20
49377: PUSH
49378: LD_INT 0
49380: ST_TO_ADDR
// uc_nation := 0 ;
49381: LD_ADDR_OWVAR 21
49385: PUSH
49386: LD_INT 0
49388: ST_TO_ADDR
// hc_class := class_frog ;
49389: LD_ADDR_OWVAR 28
49393: PUSH
49394: LD_INT 19
49396: ST_TO_ADDR
// hc_gallery :=  ;
49397: LD_ADDR_OWVAR 33
49401: PUSH
49402: LD_STRING 
49404: ST_TO_ADDR
// end ;
49405: LD_VAR 0 1
49409: RET
// export function PrepareFish ( ) ; begin
49410: LD_INT 0
49412: PPUSH
// uc_side := 0 ;
49413: LD_ADDR_OWVAR 20
49417: PUSH
49418: LD_INT 0
49420: ST_TO_ADDR
// uc_nation := 0 ;
49421: LD_ADDR_OWVAR 21
49425: PUSH
49426: LD_INT 0
49428: ST_TO_ADDR
// hc_class := class_fish ;
49429: LD_ADDR_OWVAR 28
49433: PUSH
49434: LD_INT 20
49436: ST_TO_ADDR
// hc_gallery :=  ;
49437: LD_ADDR_OWVAR 33
49441: PUSH
49442: LD_STRING 
49444: ST_TO_ADDR
// end ;
49445: LD_VAR 0 1
49449: RET
// export function PrepareBird ( ) ; begin
49450: LD_INT 0
49452: PPUSH
// uc_side := 0 ;
49453: LD_ADDR_OWVAR 20
49457: PUSH
49458: LD_INT 0
49460: ST_TO_ADDR
// uc_nation := 0 ;
49461: LD_ADDR_OWVAR 21
49465: PUSH
49466: LD_INT 0
49468: ST_TO_ADDR
// hc_class := class_phororhacos ;
49469: LD_ADDR_OWVAR 28
49473: PUSH
49474: LD_INT 18
49476: ST_TO_ADDR
// hc_gallery :=  ;
49477: LD_ADDR_OWVAR 33
49481: PUSH
49482: LD_STRING 
49484: ST_TO_ADDR
// end ;
49485: LD_VAR 0 1
49489: RET
// export function PrepareHorse ( ) ; begin
49490: LD_INT 0
49492: PPUSH
// uc_side := 0 ;
49493: LD_ADDR_OWVAR 20
49497: PUSH
49498: LD_INT 0
49500: ST_TO_ADDR
// uc_nation := 0 ;
49501: LD_ADDR_OWVAR 21
49505: PUSH
49506: LD_INT 0
49508: ST_TO_ADDR
// hc_class := class_horse ;
49509: LD_ADDR_OWVAR 28
49513: PUSH
49514: LD_INT 21
49516: ST_TO_ADDR
// hc_gallery :=  ;
49517: LD_ADDR_OWVAR 33
49521: PUSH
49522: LD_STRING 
49524: ST_TO_ADDR
// end ;
49525: LD_VAR 0 1
49529: RET
// export function PrepareMastodont ( ) ; begin
49530: LD_INT 0
49532: PPUSH
// uc_side := 0 ;
49533: LD_ADDR_OWVAR 20
49537: PUSH
49538: LD_INT 0
49540: ST_TO_ADDR
// uc_nation := 0 ;
49541: LD_ADDR_OWVAR 21
49545: PUSH
49546: LD_INT 0
49548: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49549: LD_ADDR_OWVAR 37
49553: PUSH
49554: LD_INT 31
49556: ST_TO_ADDR
// vc_control := control_rider ;
49557: LD_ADDR_OWVAR 38
49561: PUSH
49562: LD_INT 4
49564: ST_TO_ADDR
// end ;
49565: LD_VAR 0 1
49569: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49570: LD_INT 0
49572: PPUSH
49573: PPUSH
49574: PPUSH
// uc_side = 0 ;
49575: LD_ADDR_OWVAR 20
49579: PUSH
49580: LD_INT 0
49582: ST_TO_ADDR
// uc_nation = 0 ;
49583: LD_ADDR_OWVAR 21
49587: PUSH
49588: LD_INT 0
49590: ST_TO_ADDR
// InitHc_All ( ) ;
49591: CALL_OW 584
// InitVc ;
49595: CALL_OW 20
// if mastodonts then
49599: LD_VAR 0 6
49603: IFFALSE 49670
// for i = 1 to mastodonts do
49605: LD_ADDR_VAR 0 11
49609: PUSH
49610: DOUBLE
49611: LD_INT 1
49613: DEC
49614: ST_TO_ADDR
49615: LD_VAR 0 6
49619: PUSH
49620: FOR_TO
49621: IFFALSE 49668
// begin vc_chassis := 31 ;
49623: LD_ADDR_OWVAR 37
49627: PUSH
49628: LD_INT 31
49630: ST_TO_ADDR
// vc_control := control_rider ;
49631: LD_ADDR_OWVAR 38
49635: PUSH
49636: LD_INT 4
49638: ST_TO_ADDR
// animal := CreateVehicle ;
49639: LD_ADDR_VAR 0 12
49643: PUSH
49644: CALL_OW 45
49648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49649: LD_VAR 0 12
49653: PPUSH
49654: LD_VAR 0 8
49658: PPUSH
49659: LD_INT 0
49661: PPUSH
49662: CALL 51798 0 3
// end ;
49666: GO 49620
49668: POP
49669: POP
// if horses then
49670: LD_VAR 0 5
49674: IFFALSE 49741
// for i = 1 to horses do
49676: LD_ADDR_VAR 0 11
49680: PUSH
49681: DOUBLE
49682: LD_INT 1
49684: DEC
49685: ST_TO_ADDR
49686: LD_VAR 0 5
49690: PUSH
49691: FOR_TO
49692: IFFALSE 49739
// begin hc_class := 21 ;
49694: LD_ADDR_OWVAR 28
49698: PUSH
49699: LD_INT 21
49701: ST_TO_ADDR
// hc_gallery :=  ;
49702: LD_ADDR_OWVAR 33
49706: PUSH
49707: LD_STRING 
49709: ST_TO_ADDR
// animal := CreateHuman ;
49710: LD_ADDR_VAR 0 12
49714: PUSH
49715: CALL_OW 44
49719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49720: LD_VAR 0 12
49724: PPUSH
49725: LD_VAR 0 8
49729: PPUSH
49730: LD_INT 0
49732: PPUSH
49733: CALL 51798 0 3
// end ;
49737: GO 49691
49739: POP
49740: POP
// if birds then
49741: LD_VAR 0 1
49745: IFFALSE 49812
// for i = 1 to birds do
49747: LD_ADDR_VAR 0 11
49751: PUSH
49752: DOUBLE
49753: LD_INT 1
49755: DEC
49756: ST_TO_ADDR
49757: LD_VAR 0 1
49761: PUSH
49762: FOR_TO
49763: IFFALSE 49810
// begin hc_class := 18 ;
49765: LD_ADDR_OWVAR 28
49769: PUSH
49770: LD_INT 18
49772: ST_TO_ADDR
// hc_gallery =  ;
49773: LD_ADDR_OWVAR 33
49777: PUSH
49778: LD_STRING 
49780: ST_TO_ADDR
// animal := CreateHuman ;
49781: LD_ADDR_VAR 0 12
49785: PUSH
49786: CALL_OW 44
49790: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49791: LD_VAR 0 12
49795: PPUSH
49796: LD_VAR 0 8
49800: PPUSH
49801: LD_INT 0
49803: PPUSH
49804: CALL 51798 0 3
// end ;
49808: GO 49762
49810: POP
49811: POP
// if tigers then
49812: LD_VAR 0 2
49816: IFFALSE 49900
// for i = 1 to tigers do
49818: LD_ADDR_VAR 0 11
49822: PUSH
49823: DOUBLE
49824: LD_INT 1
49826: DEC
49827: ST_TO_ADDR
49828: LD_VAR 0 2
49832: PUSH
49833: FOR_TO
49834: IFFALSE 49898
// begin hc_class = class_tiger ;
49836: LD_ADDR_OWVAR 28
49840: PUSH
49841: LD_INT 14
49843: ST_TO_ADDR
// hc_gallery =  ;
49844: LD_ADDR_OWVAR 33
49848: PUSH
49849: LD_STRING 
49851: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49852: LD_ADDR_OWVAR 35
49856: PUSH
49857: LD_INT 7
49859: NEG
49860: PPUSH
49861: LD_INT 7
49863: PPUSH
49864: CALL_OW 12
49868: ST_TO_ADDR
// animal := CreateHuman ;
49869: LD_ADDR_VAR 0 12
49873: PUSH
49874: CALL_OW 44
49878: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49879: LD_VAR 0 12
49883: PPUSH
49884: LD_VAR 0 8
49888: PPUSH
49889: LD_INT 0
49891: PPUSH
49892: CALL 51798 0 3
// end ;
49896: GO 49833
49898: POP
49899: POP
// if apemans then
49900: LD_VAR 0 3
49904: IFFALSE 50027
// for i = 1 to apemans do
49906: LD_ADDR_VAR 0 11
49910: PUSH
49911: DOUBLE
49912: LD_INT 1
49914: DEC
49915: ST_TO_ADDR
49916: LD_VAR 0 3
49920: PUSH
49921: FOR_TO
49922: IFFALSE 50025
// begin hc_class = class_apeman ;
49924: LD_ADDR_OWVAR 28
49928: PUSH
49929: LD_INT 12
49931: ST_TO_ADDR
// hc_gallery =  ;
49932: LD_ADDR_OWVAR 33
49936: PUSH
49937: LD_STRING 
49939: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49940: LD_ADDR_OWVAR 35
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PPUSH
49949: LD_INT 2
49951: PPUSH
49952: CALL_OW 12
49956: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49957: LD_ADDR_OWVAR 31
49961: PUSH
49962: LD_INT 1
49964: PPUSH
49965: LD_INT 3
49967: PPUSH
49968: CALL_OW 12
49972: PUSH
49973: LD_INT 1
49975: PPUSH
49976: LD_INT 3
49978: PPUSH
49979: CALL_OW 12
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: ST_TO_ADDR
// animal := CreateHuman ;
49996: LD_ADDR_VAR 0 12
50000: PUSH
50001: CALL_OW 44
50005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50006: LD_VAR 0 12
50010: PPUSH
50011: LD_VAR 0 8
50015: PPUSH
50016: LD_INT 0
50018: PPUSH
50019: CALL 51798 0 3
// end ;
50023: GO 49921
50025: POP
50026: POP
// if enchidnas then
50027: LD_VAR 0 4
50031: IFFALSE 50098
// for i = 1 to enchidnas do
50033: LD_ADDR_VAR 0 11
50037: PUSH
50038: DOUBLE
50039: LD_INT 1
50041: DEC
50042: ST_TO_ADDR
50043: LD_VAR 0 4
50047: PUSH
50048: FOR_TO
50049: IFFALSE 50096
// begin hc_class = 13 ;
50051: LD_ADDR_OWVAR 28
50055: PUSH
50056: LD_INT 13
50058: ST_TO_ADDR
// hc_gallery =  ;
50059: LD_ADDR_OWVAR 33
50063: PUSH
50064: LD_STRING 
50066: ST_TO_ADDR
// animal := CreateHuman ;
50067: LD_ADDR_VAR 0 12
50071: PUSH
50072: CALL_OW 44
50076: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50077: LD_VAR 0 12
50081: PPUSH
50082: LD_VAR 0 8
50086: PPUSH
50087: LD_INT 0
50089: PPUSH
50090: CALL 51798 0 3
// end ;
50094: GO 50048
50096: POP
50097: POP
// if fishes then
50098: LD_VAR 0 7
50102: IFFALSE 50169
// for i = 1 to fishes do
50104: LD_ADDR_VAR 0 11
50108: PUSH
50109: DOUBLE
50110: LD_INT 1
50112: DEC
50113: ST_TO_ADDR
50114: LD_VAR 0 7
50118: PUSH
50119: FOR_TO
50120: IFFALSE 50167
// begin hc_class = 20 ;
50122: LD_ADDR_OWVAR 28
50126: PUSH
50127: LD_INT 20
50129: ST_TO_ADDR
// hc_gallery =  ;
50130: LD_ADDR_OWVAR 33
50134: PUSH
50135: LD_STRING 
50137: ST_TO_ADDR
// animal := CreateHuman ;
50138: LD_ADDR_VAR 0 12
50142: PUSH
50143: CALL_OW 44
50147: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50148: LD_VAR 0 12
50152: PPUSH
50153: LD_VAR 0 9
50157: PPUSH
50158: LD_INT 0
50160: PPUSH
50161: CALL 51798 0 3
// end ;
50165: GO 50119
50167: POP
50168: POP
// end ;
50169: LD_VAR 0 10
50173: RET
// export function WantHeal ( sci , unit ) ; begin
50174: LD_INT 0
50176: PPUSH
// if GetTaskList ( sci ) > 0 then
50177: LD_VAR 0 1
50181: PPUSH
50182: CALL_OW 437
50186: PUSH
50187: LD_INT 0
50189: GREATER
50190: IFFALSE 50260
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50192: LD_VAR 0 1
50196: PPUSH
50197: CALL_OW 437
50201: PUSH
50202: LD_INT 1
50204: ARRAY
50205: PUSH
50206: LD_INT 1
50208: ARRAY
50209: PUSH
50210: LD_STRING l
50212: EQUAL
50213: PUSH
50214: LD_VAR 0 1
50218: PPUSH
50219: CALL_OW 437
50223: PUSH
50224: LD_INT 1
50226: ARRAY
50227: PUSH
50228: LD_INT 4
50230: ARRAY
50231: PUSH
50232: LD_VAR 0 2
50236: EQUAL
50237: AND
50238: IFFALSE 50250
// result := true else
50240: LD_ADDR_VAR 0 3
50244: PUSH
50245: LD_INT 1
50247: ST_TO_ADDR
50248: GO 50258
// result := false ;
50250: LD_ADDR_VAR 0 3
50254: PUSH
50255: LD_INT 0
50257: ST_TO_ADDR
// end else
50258: GO 50268
// result := false ;
50260: LD_ADDR_VAR 0 3
50264: PUSH
50265: LD_INT 0
50267: ST_TO_ADDR
// end ;
50268: LD_VAR 0 3
50272: RET
// export function HealTarget ( sci ) ; begin
50273: LD_INT 0
50275: PPUSH
// if not sci then
50276: LD_VAR 0 1
50280: NOT
50281: IFFALSE 50285
// exit ;
50283: GO 50350
// result := 0 ;
50285: LD_ADDR_VAR 0 2
50289: PUSH
50290: LD_INT 0
50292: ST_TO_ADDR
// if GetTaskList ( sci ) then
50293: LD_VAR 0 1
50297: PPUSH
50298: CALL_OW 437
50302: IFFALSE 50350
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50304: LD_VAR 0 1
50308: PPUSH
50309: CALL_OW 437
50313: PUSH
50314: LD_INT 1
50316: ARRAY
50317: PUSH
50318: LD_INT 1
50320: ARRAY
50321: PUSH
50322: LD_STRING l
50324: EQUAL
50325: IFFALSE 50350
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50327: LD_ADDR_VAR 0 2
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 437
50341: PUSH
50342: LD_INT 1
50344: ARRAY
50345: PUSH
50346: LD_INT 4
50348: ARRAY
50349: ST_TO_ADDR
// end ;
50350: LD_VAR 0 2
50354: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50355: LD_INT 0
50357: PPUSH
50358: PPUSH
50359: PPUSH
50360: PPUSH
// if not base_units then
50361: LD_VAR 0 1
50365: NOT
50366: IFFALSE 50370
// exit ;
50368: GO 50457
// result := false ;
50370: LD_ADDR_VAR 0 2
50374: PUSH
50375: LD_INT 0
50377: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50378: LD_ADDR_VAR 0 5
50382: PUSH
50383: LD_VAR 0 1
50387: PPUSH
50388: LD_INT 21
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PPUSH
50398: CALL_OW 72
50402: ST_TO_ADDR
// if not tmp then
50403: LD_VAR 0 5
50407: NOT
50408: IFFALSE 50412
// exit ;
50410: GO 50457
// for i in tmp do
50412: LD_ADDR_VAR 0 3
50416: PUSH
50417: LD_VAR 0 5
50421: PUSH
50422: FOR_IN
50423: IFFALSE 50455
// begin result := EnemyInRange ( i , 22 ) ;
50425: LD_ADDR_VAR 0 2
50429: PUSH
50430: LD_VAR 0 3
50434: PPUSH
50435: LD_INT 22
50437: PPUSH
50438: CALL 48055 0 2
50442: ST_TO_ADDR
// if result then
50443: LD_VAR 0 2
50447: IFFALSE 50453
// exit ;
50449: POP
50450: POP
50451: GO 50457
// end ;
50453: GO 50422
50455: POP
50456: POP
// end ;
50457: LD_VAR 0 2
50461: RET
// export function FilterByTag ( units , tag ) ; begin
50462: LD_INT 0
50464: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50465: LD_ADDR_VAR 0 3
50469: PUSH
50470: LD_VAR 0 1
50474: PPUSH
50475: LD_INT 120
50477: PUSH
50478: LD_VAR 0 2
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PPUSH
50487: CALL_OW 72
50491: ST_TO_ADDR
// end ;
50492: LD_VAR 0 3
50496: RET
// export function IsDriver ( un ) ; begin
50497: LD_INT 0
50499: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50500: LD_ADDR_VAR 0 2
50504: PUSH
50505: LD_VAR 0 1
50509: PUSH
50510: LD_INT 55
50512: PUSH
50513: EMPTY
50514: LIST
50515: PPUSH
50516: CALL_OW 69
50520: IN
50521: ST_TO_ADDR
// end ;
50522: LD_VAR 0 2
50526: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50527: LD_INT 0
50529: PPUSH
50530: PPUSH
// list := [ ] ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: EMPTY
50537: ST_TO_ADDR
// case d of 0 :
50538: LD_VAR 0 3
50542: PUSH
50543: LD_INT 0
50545: DOUBLE
50546: EQUAL
50547: IFTRUE 50551
50549: GO 50684
50551: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50552: LD_ADDR_VAR 0 5
50556: PUSH
50557: LD_VAR 0 1
50561: PUSH
50562: LD_INT 4
50564: MINUS
50565: PUSH
50566: LD_VAR 0 2
50570: PUSH
50571: LD_INT 4
50573: MINUS
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: PUSH
50583: LD_VAR 0 1
50587: PUSH
50588: LD_INT 3
50590: MINUS
50591: PUSH
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: LIST
50604: PUSH
50605: LD_VAR 0 1
50609: PUSH
50610: LD_INT 4
50612: PLUS
50613: PUSH
50614: LD_VAR 0 2
50618: PUSH
50619: LD_INT 4
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: LIST
50626: PUSH
50627: LD_VAR 0 1
50631: PUSH
50632: LD_INT 3
50634: PLUS
50635: PUSH
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 3
50643: PLUS
50644: PUSH
50645: LD_INT 5
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: PUSH
50653: LD_VAR 0 1
50657: PUSH
50658: LD_VAR 0 2
50662: PUSH
50663: LD_INT 4
50665: PLUS
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: ST_TO_ADDR
// end ; 1 :
50682: GO 51382
50684: LD_INT 1
50686: DOUBLE
50687: EQUAL
50688: IFTRUE 50692
50690: GO 50825
50692: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50693: LD_ADDR_VAR 0 5
50697: PUSH
50698: LD_VAR 0 1
50702: PUSH
50703: LD_VAR 0 2
50707: PUSH
50708: LD_INT 4
50710: MINUS
50711: PUSH
50712: LD_INT 3
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: PUSH
50720: LD_VAR 0 1
50724: PUSH
50725: LD_INT 3
50727: MINUS
50728: PUSH
50729: LD_VAR 0 2
50733: PUSH
50734: LD_INT 3
50736: MINUS
50737: PUSH
50738: LD_INT 2
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: PUSH
50746: LD_VAR 0 1
50750: PUSH
50751: LD_INT 4
50753: MINUS
50754: PUSH
50755: LD_VAR 0 2
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: PUSH
50768: LD_VAR 0 1
50772: PUSH
50773: LD_VAR 0 2
50777: PUSH
50778: LD_INT 3
50780: PLUS
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: PUSH
50790: LD_VAR 0 1
50794: PUSH
50795: LD_INT 4
50797: PLUS
50798: PUSH
50799: LD_VAR 0 2
50803: PUSH
50804: LD_INT 4
50806: PLUS
50807: PUSH
50808: LD_INT 5
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: ST_TO_ADDR
// end ; 2 :
50823: GO 51382
50825: LD_INT 2
50827: DOUBLE
50828: EQUAL
50829: IFTRUE 50833
50831: GO 50962
50833: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50834: LD_ADDR_VAR 0 5
50838: PUSH
50839: LD_VAR 0 1
50843: PUSH
50844: LD_VAR 0 2
50848: PUSH
50849: LD_INT 3
50851: MINUS
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: PUSH
50861: LD_VAR 0 1
50865: PUSH
50866: LD_INT 4
50868: PLUS
50869: PUSH
50870: LD_VAR 0 2
50874: PUSH
50875: LD_INT 4
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: PUSH
50883: LD_VAR 0 1
50887: PUSH
50888: LD_VAR 0 2
50892: PUSH
50893: LD_INT 4
50895: PLUS
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: LD_VAR 0 1
50909: PUSH
50910: LD_INT 3
50912: MINUS
50913: PUSH
50914: LD_VAR 0 2
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: PUSH
50927: LD_VAR 0 1
50931: PUSH
50932: LD_INT 4
50934: MINUS
50935: PUSH
50936: LD_VAR 0 2
50940: PUSH
50941: LD_INT 4
50943: MINUS
50944: PUSH
50945: LD_INT 2
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: ST_TO_ADDR
// end ; 3 :
50960: GO 51382
50962: LD_INT 3
50964: DOUBLE
50965: EQUAL
50966: IFTRUE 50970
50968: GO 51103
50970: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50971: LD_ADDR_VAR 0 5
50975: PUSH
50976: LD_VAR 0 1
50980: PUSH
50981: LD_INT 3
50983: PLUS
50984: PUSH
50985: LD_VAR 0 2
50989: PUSH
50990: LD_INT 4
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: PUSH
50998: LD_VAR 0 1
51002: PUSH
51003: LD_INT 4
51005: PLUS
51006: PUSH
51007: LD_VAR 0 2
51011: PUSH
51012: LD_INT 4
51014: PLUS
51015: PUSH
51016: LD_INT 5
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: LIST
51023: PUSH
51024: LD_VAR 0 1
51028: PUSH
51029: LD_INT 4
51031: MINUS
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: PUSH
51046: LD_VAR 0 1
51050: PUSH
51051: LD_VAR 0 2
51055: PUSH
51056: LD_INT 4
51058: MINUS
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: PUSH
51068: LD_VAR 0 1
51072: PUSH
51073: LD_INT 3
51075: MINUS
51076: PUSH
51077: LD_VAR 0 2
51081: PUSH
51082: LD_INT 3
51084: MINUS
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// end ; 4 :
51101: GO 51382
51103: LD_INT 4
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51111
51109: GO 51244
51111: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51112: LD_ADDR_VAR 0 5
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_VAR 0 2
51126: PUSH
51127: LD_INT 4
51129: PLUS
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: PUSH
51139: LD_VAR 0 1
51143: PUSH
51144: LD_INT 3
51146: PLUS
51147: PUSH
51148: LD_VAR 0 2
51152: PUSH
51153: LD_INT 3
51155: PLUS
51156: PUSH
51157: LD_INT 5
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: PUSH
51165: LD_VAR 0 1
51169: PUSH
51170: LD_INT 4
51172: PLUS
51173: PUSH
51174: LD_VAR 0 2
51178: PUSH
51179: LD_INT 4
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: PUSH
51187: LD_VAR 0 1
51191: PUSH
51192: LD_VAR 0 2
51196: PUSH
51197: LD_INT 3
51199: MINUS
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: PUSH
51209: LD_VAR 0 1
51213: PUSH
51214: LD_INT 4
51216: MINUS
51217: PUSH
51218: LD_VAR 0 2
51222: PUSH
51223: LD_INT 4
51225: MINUS
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: ST_TO_ADDR
// end ; 5 :
51242: GO 51382
51244: LD_INT 5
51246: DOUBLE
51247: EQUAL
51248: IFTRUE 51252
51250: GO 51381
51252: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51253: LD_ADDR_VAR 0 5
51257: PUSH
51258: LD_VAR 0 1
51262: PUSH
51263: LD_INT 4
51265: MINUS
51266: PUSH
51267: LD_VAR 0 2
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: LD_VAR 0 1
51284: PUSH
51285: LD_VAR 0 2
51289: PUSH
51290: LD_INT 4
51292: MINUS
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: PUSH
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 4
51309: PLUS
51310: PUSH
51311: LD_VAR 0 2
51315: PUSH
51316: LD_INT 4
51318: PLUS
51319: PUSH
51320: LD_INT 5
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: PUSH
51328: LD_VAR 0 1
51332: PUSH
51333: LD_INT 3
51335: PLUS
51336: PUSH
51337: LD_VAR 0 2
51341: PUSH
51342: LD_INT 4
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: PUSH
51350: LD_VAR 0 1
51354: PUSH
51355: LD_VAR 0 2
51359: PUSH
51360: LD_INT 3
51362: PLUS
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// end ; end ;
51379: GO 51382
51381: POP
// result := list ;
51382: LD_ADDR_VAR 0 4
51386: PUSH
51387: LD_VAR 0 5
51391: ST_TO_ADDR
// end ;
51392: LD_VAR 0 4
51396: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51397: LD_INT 0
51399: PPUSH
51400: PPUSH
51401: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51402: LD_VAR 0 1
51406: NOT
51407: PUSH
51408: LD_VAR 0 2
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: LD_INT 3
51421: PUSH
51422: LD_INT 4
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: IN
51431: NOT
51432: OR
51433: IFFALSE 51437
// exit ;
51435: GO 51520
// tmp := [ ] ;
51437: LD_ADDR_VAR 0 5
51441: PUSH
51442: EMPTY
51443: ST_TO_ADDR
// for i in units do
51444: LD_ADDR_VAR 0 4
51448: PUSH
51449: LD_VAR 0 1
51453: PUSH
51454: FOR_IN
51455: IFFALSE 51489
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51457: LD_ADDR_VAR 0 5
51461: PUSH
51462: LD_VAR 0 5
51466: PPUSH
51467: LD_VAR 0 4
51471: PPUSH
51472: LD_VAR 0 2
51476: PPUSH
51477: CALL_OW 259
51481: PPUSH
51482: CALL 52893 0 2
51486: ST_TO_ADDR
51487: GO 51454
51489: POP
51490: POP
// if not tmp then
51491: LD_VAR 0 5
51495: NOT
51496: IFFALSE 51500
// exit ;
51498: GO 51520
// result := SortListByListDesc ( units , tmp ) ;
51500: LD_ADDR_VAR 0 3
51504: PUSH
51505: LD_VAR 0 1
51509: PPUSH
51510: LD_VAR 0 5
51514: PPUSH
51515: CALL_OW 77
51519: ST_TO_ADDR
// end ;
51520: LD_VAR 0 3
51524: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51525: LD_INT 0
51527: PPUSH
51528: PPUSH
51529: PPUSH
// result := false ;
51530: LD_ADDR_VAR 0 3
51534: PUSH
51535: LD_INT 0
51537: ST_TO_ADDR
// if not building then
51538: LD_VAR 0 2
51542: NOT
51543: IFFALSE 51547
// exit ;
51545: GO 51685
// x := GetX ( building ) ;
51547: LD_ADDR_VAR 0 4
51551: PUSH
51552: LD_VAR 0 2
51556: PPUSH
51557: CALL_OW 250
51561: ST_TO_ADDR
// y := GetY ( building ) ;
51562: LD_ADDR_VAR 0 5
51566: PUSH
51567: LD_VAR 0 2
51571: PPUSH
51572: CALL_OW 251
51576: ST_TO_ADDR
// if not x or not y then
51577: LD_VAR 0 4
51581: NOT
51582: PUSH
51583: LD_VAR 0 5
51587: NOT
51588: OR
51589: IFFALSE 51593
// exit ;
51591: GO 51685
// if GetTaskList ( unit ) then
51593: LD_VAR 0 1
51597: PPUSH
51598: CALL_OW 437
51602: IFFALSE 51685
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51604: LD_STRING e
51606: PUSH
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 437
51616: PUSH
51617: LD_INT 1
51619: ARRAY
51620: PUSH
51621: LD_INT 1
51623: ARRAY
51624: EQUAL
51625: PUSH
51626: LD_VAR 0 4
51630: PUSH
51631: LD_VAR 0 1
51635: PPUSH
51636: CALL_OW 437
51640: PUSH
51641: LD_INT 1
51643: ARRAY
51644: PUSH
51645: LD_INT 2
51647: ARRAY
51648: EQUAL
51649: AND
51650: PUSH
51651: LD_VAR 0 5
51655: PUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: CALL_OW 437
51665: PUSH
51666: LD_INT 1
51668: ARRAY
51669: PUSH
51670: LD_INT 3
51672: ARRAY
51673: EQUAL
51674: AND
51675: IFFALSE 51685
// result := true end ;
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_INT 1
51684: ST_TO_ADDR
// end ;
51685: LD_VAR 0 3
51689: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51690: LD_INT 0
51692: PPUSH
// result := false ;
51693: LD_ADDR_VAR 0 4
51697: PUSH
51698: LD_INT 0
51700: ST_TO_ADDR
// if GetTaskList ( unit ) then
51701: LD_VAR 0 1
51705: PPUSH
51706: CALL_OW 437
51710: IFFALSE 51793
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51712: LD_STRING M
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: CALL_OW 437
51724: PUSH
51725: LD_INT 1
51727: ARRAY
51728: PUSH
51729: LD_INT 1
51731: ARRAY
51732: EQUAL
51733: PUSH
51734: LD_VAR 0 2
51738: PUSH
51739: LD_VAR 0 1
51743: PPUSH
51744: CALL_OW 437
51748: PUSH
51749: LD_INT 1
51751: ARRAY
51752: PUSH
51753: LD_INT 2
51755: ARRAY
51756: EQUAL
51757: AND
51758: PUSH
51759: LD_VAR 0 3
51763: PUSH
51764: LD_VAR 0 1
51768: PPUSH
51769: CALL_OW 437
51773: PUSH
51774: LD_INT 1
51776: ARRAY
51777: PUSH
51778: LD_INT 3
51780: ARRAY
51781: EQUAL
51782: AND
51783: IFFALSE 51793
// result := true ;
51785: LD_ADDR_VAR 0 4
51789: PUSH
51790: LD_INT 1
51792: ST_TO_ADDR
// end ; end ;
51793: LD_VAR 0 4
51797: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51798: LD_INT 0
51800: PPUSH
51801: PPUSH
51802: PPUSH
51803: PPUSH
// if not unit or not area then
51804: LD_VAR 0 1
51808: NOT
51809: PUSH
51810: LD_VAR 0 2
51814: NOT
51815: OR
51816: IFFALSE 51820
// exit ;
51818: GO 51996
// tmp := AreaToList ( area , i ) ;
51820: LD_ADDR_VAR 0 6
51824: PUSH
51825: LD_VAR 0 2
51829: PPUSH
51830: LD_VAR 0 5
51834: PPUSH
51835: CALL_OW 517
51839: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51840: LD_ADDR_VAR 0 5
51844: PUSH
51845: DOUBLE
51846: LD_INT 1
51848: DEC
51849: ST_TO_ADDR
51850: LD_VAR 0 6
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: PUSH
51859: FOR_TO
51860: IFFALSE 51994
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51862: LD_ADDR_VAR 0 7
51866: PUSH
51867: LD_VAR 0 6
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: PUSH
51876: LD_VAR 0 5
51880: ARRAY
51881: PUSH
51882: LD_VAR 0 6
51886: PUSH
51887: LD_INT 2
51889: ARRAY
51890: PUSH
51891: LD_VAR 0 5
51895: ARRAY
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51901: LD_INT 92
51903: PUSH
51904: LD_VAR 0 7
51908: PUSH
51909: LD_INT 1
51911: ARRAY
51912: PUSH
51913: LD_VAR 0 7
51917: PUSH
51918: LD_INT 2
51920: ARRAY
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: PPUSH
51931: CALL_OW 69
51935: PUSH
51936: LD_INT 0
51938: EQUAL
51939: IFFALSE 51992
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51941: LD_VAR 0 1
51945: PPUSH
51946: LD_VAR 0 7
51950: PUSH
51951: LD_INT 1
51953: ARRAY
51954: PPUSH
51955: LD_VAR 0 7
51959: PUSH
51960: LD_INT 2
51962: ARRAY
51963: PPUSH
51964: LD_VAR 0 3
51968: PPUSH
51969: CALL_OW 48
// result := IsPlaced ( unit ) ;
51973: LD_ADDR_VAR 0 4
51977: PUSH
51978: LD_VAR 0 1
51982: PPUSH
51983: CALL_OW 305
51987: ST_TO_ADDR
// exit ;
51988: POP
51989: POP
51990: GO 51996
// end ; end ;
51992: GO 51859
51994: POP
51995: POP
// end ;
51996: LD_VAR 0 4
52000: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52001: LD_INT 0
52003: PPUSH
52004: PPUSH
52005: PPUSH
// if not side or side > 8 then
52006: LD_VAR 0 1
52010: NOT
52011: PUSH
52012: LD_VAR 0 1
52016: PUSH
52017: LD_INT 8
52019: GREATER
52020: OR
52021: IFFALSE 52025
// exit ;
52023: GO 52212
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52025: LD_ADDR_VAR 0 4
52029: PUSH
52030: LD_INT 22
52032: PUSH
52033: LD_VAR 0 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 21
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PPUSH
52056: CALL_OW 69
52060: ST_TO_ADDR
// if not tmp then
52061: LD_VAR 0 4
52065: NOT
52066: IFFALSE 52070
// exit ;
52068: GO 52212
// enable_addtolog := true ;
52070: LD_ADDR_OWVAR 81
52074: PUSH
52075: LD_INT 1
52077: ST_TO_ADDR
// AddToLog ( [ ) ;
52078: LD_STRING [
52080: PPUSH
52081: CALL_OW 561
// for i in tmp do
52085: LD_ADDR_VAR 0 3
52089: PUSH
52090: LD_VAR 0 4
52094: PUSH
52095: FOR_IN
52096: IFFALSE 52203
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52098: LD_STRING [
52100: PUSH
52101: LD_VAR 0 3
52105: PPUSH
52106: CALL_OW 266
52110: STR
52111: PUSH
52112: LD_STRING , 
52114: STR
52115: PUSH
52116: LD_VAR 0 3
52120: PPUSH
52121: CALL_OW 250
52125: STR
52126: PUSH
52127: LD_STRING , 
52129: STR
52130: PUSH
52131: LD_VAR 0 3
52135: PPUSH
52136: CALL_OW 251
52140: STR
52141: PUSH
52142: LD_STRING , 
52144: STR
52145: PUSH
52146: LD_VAR 0 3
52150: PPUSH
52151: CALL_OW 254
52155: STR
52156: PUSH
52157: LD_STRING , 
52159: STR
52160: PUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: LD_INT 1
52168: PPUSH
52169: CALL_OW 268
52173: STR
52174: PUSH
52175: LD_STRING , 
52177: STR
52178: PUSH
52179: LD_VAR 0 3
52183: PPUSH
52184: LD_INT 2
52186: PPUSH
52187: CALL_OW 268
52191: STR
52192: PUSH
52193: LD_STRING ],
52195: STR
52196: PPUSH
52197: CALL_OW 561
// end ;
52201: GO 52095
52203: POP
52204: POP
// AddToLog ( ]; ) ;
52205: LD_STRING ];
52207: PPUSH
52208: CALL_OW 561
// end ;
52212: LD_VAR 0 2
52216: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52217: LD_INT 0
52219: PPUSH
52220: PPUSH
52221: PPUSH
52222: PPUSH
52223: PPUSH
// if not area or not rate or not max then
52224: LD_VAR 0 1
52228: NOT
52229: PUSH
52230: LD_VAR 0 2
52234: NOT
52235: OR
52236: PUSH
52237: LD_VAR 0 4
52241: NOT
52242: OR
52243: IFFALSE 52247
// exit ;
52245: GO 52436
// while 1 do
52247: LD_INT 1
52249: IFFALSE 52436
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52251: LD_ADDR_VAR 0 9
52255: PUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: LD_INT 1
52263: PPUSH
52264: CALL_OW 287
52268: PUSH
52269: LD_INT 10
52271: MUL
52272: ST_TO_ADDR
// r := rate / 10 ;
52273: LD_ADDR_VAR 0 7
52277: PUSH
52278: LD_VAR 0 2
52282: PUSH
52283: LD_INT 10
52285: DIVREAL
52286: ST_TO_ADDR
// time := 1 1$00 ;
52287: LD_ADDR_VAR 0 8
52291: PUSH
52292: LD_INT 2100
52294: ST_TO_ADDR
// if amount < min then
52295: LD_VAR 0 9
52299: PUSH
52300: LD_VAR 0 3
52304: LESS
52305: IFFALSE 52323
// r := r * 2 else
52307: LD_ADDR_VAR 0 7
52311: PUSH
52312: LD_VAR 0 7
52316: PUSH
52317: LD_INT 2
52319: MUL
52320: ST_TO_ADDR
52321: GO 52349
// if amount > max then
52323: LD_VAR 0 9
52327: PUSH
52328: LD_VAR 0 4
52332: GREATER
52333: IFFALSE 52349
// r := r / 2 ;
52335: LD_ADDR_VAR 0 7
52339: PUSH
52340: LD_VAR 0 7
52344: PUSH
52345: LD_INT 2
52347: DIVREAL
52348: ST_TO_ADDR
// time := time / r ;
52349: LD_ADDR_VAR 0 8
52353: PUSH
52354: LD_VAR 0 8
52358: PUSH
52359: LD_VAR 0 7
52363: DIVREAL
52364: ST_TO_ADDR
// if time < 0 then
52365: LD_VAR 0 8
52369: PUSH
52370: LD_INT 0
52372: LESS
52373: IFFALSE 52390
// time := time * - 1 ;
52375: LD_ADDR_VAR 0 8
52379: PUSH
52380: LD_VAR 0 8
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: MUL
52389: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52390: LD_VAR 0 8
52394: PUSH
52395: LD_INT 35
52397: PPUSH
52398: LD_INT 875
52400: PPUSH
52401: CALL_OW 12
52405: PLUS
52406: PPUSH
52407: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52411: LD_INT 1
52413: PPUSH
52414: LD_INT 5
52416: PPUSH
52417: CALL_OW 12
52421: PPUSH
52422: LD_VAR 0 1
52426: PPUSH
52427: LD_INT 1
52429: PPUSH
52430: CALL_OW 55
// end ;
52434: GO 52247
// end ;
52436: LD_VAR 0 5
52440: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52441: LD_INT 0
52443: PPUSH
52444: PPUSH
52445: PPUSH
52446: PPUSH
52447: PPUSH
52448: PPUSH
52449: PPUSH
52450: PPUSH
// if not turrets or not factories then
52451: LD_VAR 0 1
52455: NOT
52456: PUSH
52457: LD_VAR 0 2
52461: NOT
52462: OR
52463: IFFALSE 52467
// exit ;
52465: GO 52774
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52467: LD_ADDR_VAR 0 10
52471: PUSH
52472: LD_INT 5
52474: PUSH
52475: LD_INT 6
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: LD_INT 4
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: LD_INT 5
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 24
52509: PUSH
52510: LD_INT 25
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 23
52519: PUSH
52520: LD_INT 27
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 42
52533: PUSH
52534: LD_INT 43
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 44
52543: PUSH
52544: LD_INT 46
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 45
52553: PUSH
52554: LD_INT 47
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: ST_TO_ADDR
// result := [ ] ;
52571: LD_ADDR_VAR 0 3
52575: PUSH
52576: EMPTY
52577: ST_TO_ADDR
// for i in turrets do
52578: LD_ADDR_VAR 0 4
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: FOR_IN
52589: IFFALSE 52772
// begin nat := GetNation ( i ) ;
52591: LD_ADDR_VAR 0 7
52595: PUSH
52596: LD_VAR 0 4
52600: PPUSH
52601: CALL_OW 248
52605: ST_TO_ADDR
// weapon := 0 ;
52606: LD_ADDR_VAR 0 8
52610: PUSH
52611: LD_INT 0
52613: ST_TO_ADDR
// if not nat then
52614: LD_VAR 0 7
52618: NOT
52619: IFFALSE 52623
// continue ;
52621: GO 52588
// for j in list [ nat ] do
52623: LD_ADDR_VAR 0 5
52627: PUSH
52628: LD_VAR 0 10
52632: PUSH
52633: LD_VAR 0 7
52637: ARRAY
52638: PUSH
52639: FOR_IN
52640: IFFALSE 52681
// if GetBWeapon ( i ) = j [ 1 ] then
52642: LD_VAR 0 4
52646: PPUSH
52647: CALL_OW 269
52651: PUSH
52652: LD_VAR 0 5
52656: PUSH
52657: LD_INT 1
52659: ARRAY
52660: EQUAL
52661: IFFALSE 52679
// begin weapon := j [ 2 ] ;
52663: LD_ADDR_VAR 0 8
52667: PUSH
52668: LD_VAR 0 5
52672: PUSH
52673: LD_INT 2
52675: ARRAY
52676: ST_TO_ADDR
// break ;
52677: GO 52681
// end ;
52679: GO 52639
52681: POP
52682: POP
// if not weapon then
52683: LD_VAR 0 8
52687: NOT
52688: IFFALSE 52692
// continue ;
52690: GO 52588
// for k in factories do
52692: LD_ADDR_VAR 0 6
52696: PUSH
52697: LD_VAR 0 2
52701: PUSH
52702: FOR_IN
52703: IFFALSE 52768
// begin weapons := AvailableWeaponList ( k ) ;
52705: LD_ADDR_VAR 0 9
52709: PUSH
52710: LD_VAR 0 6
52714: PPUSH
52715: CALL_OW 478
52719: ST_TO_ADDR
// if not weapons then
52720: LD_VAR 0 9
52724: NOT
52725: IFFALSE 52729
// continue ;
52727: GO 52702
// if weapon in weapons then
52729: LD_VAR 0 8
52733: PUSH
52734: LD_VAR 0 9
52738: IN
52739: IFFALSE 52766
// begin result := [ i , weapon ] ;
52741: LD_ADDR_VAR 0 3
52745: PUSH
52746: LD_VAR 0 4
52750: PUSH
52751: LD_VAR 0 8
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// exit ;
52760: POP
52761: POP
52762: POP
52763: POP
52764: GO 52774
// end ; end ;
52766: GO 52702
52768: POP
52769: POP
// end ;
52770: GO 52588
52772: POP
52773: POP
// end ;
52774: LD_VAR 0 3
52778: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52779: LD_INT 0
52781: PPUSH
// if not side or side > 8 then
52782: LD_VAR 0 3
52786: NOT
52787: PUSH
52788: LD_VAR 0 3
52792: PUSH
52793: LD_INT 8
52795: GREATER
52796: OR
52797: IFFALSE 52801
// exit ;
52799: GO 52860
// if not range then
52801: LD_VAR 0 4
52805: NOT
52806: IFFALSE 52817
// range := - 12 ;
52808: LD_ADDR_VAR 0 4
52812: PUSH
52813: LD_INT 12
52815: NEG
52816: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52817: LD_VAR 0 1
52821: PPUSH
52822: LD_VAR 0 2
52826: PPUSH
52827: LD_VAR 0 3
52831: PPUSH
52832: LD_VAR 0 4
52836: PPUSH
52837: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52841: LD_VAR 0 1
52845: PPUSH
52846: LD_VAR 0 2
52850: PPUSH
52851: LD_VAR 0 3
52855: PPUSH
52856: CALL_OW 331
// end ;
52860: LD_VAR 0 5
52864: RET
// export function Video ( mode ) ; begin
52865: LD_INT 0
52867: PPUSH
// ingame_video = mode ;
52868: LD_ADDR_OWVAR 52
52872: PUSH
52873: LD_VAR 0 1
52877: ST_TO_ADDR
// interface_hidden = mode ;
52878: LD_ADDR_OWVAR 54
52882: PUSH
52883: LD_VAR 0 1
52887: ST_TO_ADDR
// end ;
52888: LD_VAR 0 2
52892: RET
// export function Join ( array , element ) ; begin
52893: LD_INT 0
52895: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52896: LD_ADDR_VAR 0 3
52900: PUSH
52901: LD_VAR 0 1
52905: PPUSH
52906: LD_VAR 0 1
52910: PUSH
52911: LD_INT 1
52913: PLUS
52914: PPUSH
52915: LD_VAR 0 2
52919: PPUSH
52920: CALL_OW 1
52924: ST_TO_ADDR
// end ;
52925: LD_VAR 0 3
52929: RET
// export function JoinUnion ( array , element ) ; begin
52930: LD_INT 0
52932: PPUSH
// result := array union element ;
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_VAR 0 1
52942: PUSH
52943: LD_VAR 0 2
52947: UNION
52948: ST_TO_ADDR
// end ;
52949: LD_VAR 0 3
52953: RET
// export function GetBehemoths ( side ) ; begin
52954: LD_INT 0
52956: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52957: LD_ADDR_VAR 0 2
52961: PUSH
52962: LD_INT 22
52964: PUSH
52965: LD_VAR 0 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 31
52976: PUSH
52977: LD_INT 25
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PPUSH
52988: CALL_OW 69
52992: ST_TO_ADDR
// end ;
52993: LD_VAR 0 2
52997: RET
// export function Shuffle ( array ) ; var i , index ; begin
52998: LD_INT 0
53000: PPUSH
53001: PPUSH
53002: PPUSH
// result := [ ] ;
53003: LD_ADDR_VAR 0 2
53007: PUSH
53008: EMPTY
53009: ST_TO_ADDR
// if not array then
53010: LD_VAR 0 1
53014: NOT
53015: IFFALSE 53019
// exit ;
53017: GO 53118
// Randomize ;
53019: CALL_OW 10
// for i = array downto 1 do
53023: LD_ADDR_VAR 0 3
53027: PUSH
53028: DOUBLE
53029: LD_VAR 0 1
53033: INC
53034: ST_TO_ADDR
53035: LD_INT 1
53037: PUSH
53038: FOR_DOWNTO
53039: IFFALSE 53116
// begin index := rand ( 1 , array ) ;
53041: LD_ADDR_VAR 0 4
53045: PUSH
53046: LD_INT 1
53048: PPUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: CALL_OW 12
53058: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53059: LD_ADDR_VAR 0 2
53063: PUSH
53064: LD_VAR 0 2
53068: PPUSH
53069: LD_VAR 0 2
53073: PUSH
53074: LD_INT 1
53076: PLUS
53077: PPUSH
53078: LD_VAR 0 1
53082: PUSH
53083: LD_VAR 0 4
53087: ARRAY
53088: PPUSH
53089: CALL_OW 2
53093: ST_TO_ADDR
// array := Delete ( array , index ) ;
53094: LD_ADDR_VAR 0 1
53098: PUSH
53099: LD_VAR 0 1
53103: PPUSH
53104: LD_VAR 0 4
53108: PPUSH
53109: CALL_OW 3
53113: ST_TO_ADDR
// end ;
53114: GO 53038
53116: POP
53117: POP
// end ;
53118: LD_VAR 0 2
53122: RET
// export function GetBaseMaterials ( base ) ; begin
53123: LD_INT 0
53125: PPUSH
// result := [ 0 , 0 , 0 ] ;
53126: LD_ADDR_VAR 0 2
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: LIST
53144: ST_TO_ADDR
// if not base then
53145: LD_VAR 0 1
53149: NOT
53150: IFFALSE 53154
// exit ;
53152: GO 53203
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53154: LD_ADDR_VAR 0 2
53158: PUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: LD_INT 1
53166: PPUSH
53167: CALL_OW 275
53171: PUSH
53172: LD_VAR 0 1
53176: PPUSH
53177: LD_INT 2
53179: PPUSH
53180: CALL_OW 275
53184: PUSH
53185: LD_VAR 0 1
53189: PPUSH
53190: LD_INT 3
53192: PPUSH
53193: CALL_OW 275
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: ST_TO_ADDR
// end ;
53203: LD_VAR 0 2
53207: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53208: LD_INT 0
53210: PPUSH
53211: PPUSH
// result := array ;
53212: LD_ADDR_VAR 0 3
53216: PUSH
53217: LD_VAR 0 1
53221: ST_TO_ADDR
// if size >= result then
53222: LD_VAR 0 2
53226: PUSH
53227: LD_VAR 0 3
53231: GREATEREQUAL
53232: IFFALSE 53236
// exit ;
53234: GO 53286
// if size then
53236: LD_VAR 0 2
53240: IFFALSE 53286
// for i := array downto size do
53242: LD_ADDR_VAR 0 4
53246: PUSH
53247: DOUBLE
53248: LD_VAR 0 1
53252: INC
53253: ST_TO_ADDR
53254: LD_VAR 0 2
53258: PUSH
53259: FOR_DOWNTO
53260: IFFALSE 53284
// result := Delete ( result , result ) ;
53262: LD_ADDR_VAR 0 3
53266: PUSH
53267: LD_VAR 0 3
53271: PPUSH
53272: LD_VAR 0 3
53276: PPUSH
53277: CALL_OW 3
53281: ST_TO_ADDR
53282: GO 53259
53284: POP
53285: POP
// end ;
53286: LD_VAR 0 3
53290: RET
// export function ComExit ( unit ) ; var tmp ; begin
53291: LD_INT 0
53293: PPUSH
53294: PPUSH
// if not IsInUnit ( unit ) then
53295: LD_VAR 0 1
53299: PPUSH
53300: CALL_OW 310
53304: NOT
53305: IFFALSE 53309
// exit ;
53307: GO 53369
// tmp := IsInUnit ( unit ) ;
53309: LD_ADDR_VAR 0 3
53313: PUSH
53314: LD_VAR 0 1
53318: PPUSH
53319: CALL_OW 310
53323: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53324: LD_VAR 0 3
53328: PPUSH
53329: CALL_OW 247
53333: PUSH
53334: LD_INT 2
53336: EQUAL
53337: IFFALSE 53350
// ComExitVehicle ( unit ) else
53339: LD_VAR 0 1
53343: PPUSH
53344: CALL_OW 121
53348: GO 53359
// ComExitBuilding ( unit ) ;
53350: LD_VAR 0 1
53354: PPUSH
53355: CALL_OW 122
// result := tmp ;
53359: LD_ADDR_VAR 0 2
53363: PUSH
53364: LD_VAR 0 3
53368: ST_TO_ADDR
// end ;
53369: LD_VAR 0 2
53373: RET
// export function ComExitAll ( units ) ; var i ; begin
53374: LD_INT 0
53376: PPUSH
53377: PPUSH
// if not units then
53378: LD_VAR 0 1
53382: NOT
53383: IFFALSE 53387
// exit ;
53385: GO 53413
// for i in units do
53387: LD_ADDR_VAR 0 3
53391: PUSH
53392: LD_VAR 0 1
53396: PUSH
53397: FOR_IN
53398: IFFALSE 53411
// ComExit ( i ) ;
53400: LD_VAR 0 3
53404: PPUSH
53405: CALL 53291 0 1
53409: GO 53397
53411: POP
53412: POP
// end ;
53413: LD_VAR 0 2
53417: RET
// export function ResetHc ; begin
53418: LD_INT 0
53420: PPUSH
// InitHc ;
53421: CALL_OW 19
// hc_importance := 0 ;
53425: LD_ADDR_OWVAR 32
53429: PUSH
53430: LD_INT 0
53432: ST_TO_ADDR
// end ;
53433: LD_VAR 0 1
53437: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53438: LD_INT 0
53440: PPUSH
53441: PPUSH
53442: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53443: LD_ADDR_VAR 0 6
53447: PUSH
53448: LD_VAR 0 1
53452: PUSH
53453: LD_VAR 0 3
53457: PLUS
53458: PUSH
53459: LD_INT 2
53461: DIV
53462: ST_TO_ADDR
// if _x < 0 then
53463: LD_VAR 0 6
53467: PUSH
53468: LD_INT 0
53470: LESS
53471: IFFALSE 53488
// _x := _x * - 1 ;
53473: LD_ADDR_VAR 0 6
53477: PUSH
53478: LD_VAR 0 6
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: MUL
53487: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53488: LD_ADDR_VAR 0 7
53492: PUSH
53493: LD_VAR 0 2
53497: PUSH
53498: LD_VAR 0 4
53502: PLUS
53503: PUSH
53504: LD_INT 2
53506: DIV
53507: ST_TO_ADDR
// if _y < 0 then
53508: LD_VAR 0 7
53512: PUSH
53513: LD_INT 0
53515: LESS
53516: IFFALSE 53533
// _y := _y * - 1 ;
53518: LD_ADDR_VAR 0 7
53522: PUSH
53523: LD_VAR 0 7
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: MUL
53532: ST_TO_ADDR
// result := [ _x , _y ] ;
53533: LD_ADDR_VAR 0 5
53537: PUSH
53538: LD_VAR 0 6
53542: PUSH
53543: LD_VAR 0 7
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// end ;
53552: LD_VAR 0 5
53556: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53557: LD_INT 0
53559: PPUSH
53560: PPUSH
53561: PPUSH
53562: PPUSH
// task := GetTaskList ( unit ) ;
53563: LD_ADDR_VAR 0 7
53567: PUSH
53568: LD_VAR 0 1
53572: PPUSH
53573: CALL_OW 437
53577: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53578: LD_VAR 0 7
53582: NOT
53583: PUSH
53584: LD_VAR 0 1
53588: PPUSH
53589: LD_VAR 0 2
53593: PPUSH
53594: CALL_OW 308
53598: NOT
53599: AND
53600: IFFALSE 53604
// exit ;
53602: GO 53722
// if IsInArea ( unit , area ) then
53604: LD_VAR 0 1
53608: PPUSH
53609: LD_VAR 0 2
53613: PPUSH
53614: CALL_OW 308
53618: IFFALSE 53636
// begin ComMoveToArea ( unit , goAway ) ;
53620: LD_VAR 0 1
53624: PPUSH
53625: LD_VAR 0 3
53629: PPUSH
53630: CALL_OW 113
// exit ;
53634: GO 53722
// end ; if task [ 1 ] [ 1 ] <> M then
53636: LD_VAR 0 7
53640: PUSH
53641: LD_INT 1
53643: ARRAY
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PUSH
53649: LD_STRING M
53651: NONEQUAL
53652: IFFALSE 53656
// exit ;
53654: GO 53722
// x := task [ 1 ] [ 2 ] ;
53656: LD_ADDR_VAR 0 5
53660: PUSH
53661: LD_VAR 0 7
53665: PUSH
53666: LD_INT 1
53668: ARRAY
53669: PUSH
53670: LD_INT 2
53672: ARRAY
53673: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53674: LD_ADDR_VAR 0 6
53678: PUSH
53679: LD_VAR 0 7
53683: PUSH
53684: LD_INT 1
53686: ARRAY
53687: PUSH
53688: LD_INT 3
53690: ARRAY
53691: ST_TO_ADDR
// if InArea ( x , y , area ) then
53692: LD_VAR 0 5
53696: PPUSH
53697: LD_VAR 0 6
53701: PPUSH
53702: LD_VAR 0 2
53706: PPUSH
53707: CALL_OW 309
53711: IFFALSE 53722
// ComStop ( unit ) ;
53713: LD_VAR 0 1
53717: PPUSH
53718: CALL_OW 141
// end ;
53722: LD_VAR 0 4
53726: RET
// export function Abs ( value ) ; begin
53727: LD_INT 0
53729: PPUSH
// result := value ;
53730: LD_ADDR_VAR 0 2
53734: PUSH
53735: LD_VAR 0 1
53739: ST_TO_ADDR
// if value < 0 then
53740: LD_VAR 0 1
53744: PUSH
53745: LD_INT 0
53747: LESS
53748: IFFALSE 53765
// result := value * - 1 ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: MUL
53764: ST_TO_ADDR
// end ;
53765: LD_VAR 0 2
53769: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53770: LD_INT 0
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
// if not unit or not building then
53780: LD_VAR 0 1
53784: NOT
53785: PUSH
53786: LD_VAR 0 2
53790: NOT
53791: OR
53792: IFFALSE 53796
// exit ;
53794: GO 54022
// x := GetX ( building ) ;
53796: LD_ADDR_VAR 0 4
53800: PUSH
53801: LD_VAR 0 2
53805: PPUSH
53806: CALL_OW 250
53810: ST_TO_ADDR
// y := GetY ( building ) ;
53811: LD_ADDR_VAR 0 6
53815: PUSH
53816: LD_VAR 0 2
53820: PPUSH
53821: CALL_OW 251
53825: ST_TO_ADDR
// d := GetDir ( building ) ;
53826: LD_ADDR_VAR 0 8
53830: PUSH
53831: LD_VAR 0 2
53835: PPUSH
53836: CALL_OW 254
53840: ST_TO_ADDR
// r := 4 ;
53841: LD_ADDR_VAR 0 9
53845: PUSH
53846: LD_INT 4
53848: ST_TO_ADDR
// for i := 1 to 5 do
53849: LD_ADDR_VAR 0 10
53853: PUSH
53854: DOUBLE
53855: LD_INT 1
53857: DEC
53858: ST_TO_ADDR
53859: LD_INT 5
53861: PUSH
53862: FOR_TO
53863: IFFALSE 54020
// begin _x := ShiftX ( x , d , r + i ) ;
53865: LD_ADDR_VAR 0 5
53869: PUSH
53870: LD_VAR 0 4
53874: PPUSH
53875: LD_VAR 0 8
53879: PPUSH
53880: LD_VAR 0 9
53884: PUSH
53885: LD_VAR 0 10
53889: PLUS
53890: PPUSH
53891: CALL_OW 272
53895: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53896: LD_ADDR_VAR 0 7
53900: PUSH
53901: LD_VAR 0 6
53905: PPUSH
53906: LD_VAR 0 8
53910: PPUSH
53911: LD_VAR 0 9
53915: PUSH
53916: LD_VAR 0 10
53920: PLUS
53921: PPUSH
53922: CALL_OW 273
53926: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53927: LD_VAR 0 5
53931: PPUSH
53932: LD_VAR 0 7
53936: PPUSH
53937: CALL_OW 488
53941: PUSH
53942: LD_VAR 0 5
53946: PPUSH
53947: LD_VAR 0 7
53951: PPUSH
53952: CALL_OW 428
53956: PPUSH
53957: CALL_OW 247
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: IN
53972: NOT
53973: AND
53974: IFFALSE 54018
// begin ComMoveXY ( unit , _x , _y ) ;
53976: LD_VAR 0 1
53980: PPUSH
53981: LD_VAR 0 5
53985: PPUSH
53986: LD_VAR 0 7
53990: PPUSH
53991: CALL_OW 111
// result := [ _x , _y ] ;
53995: LD_ADDR_VAR 0 3
53999: PUSH
54000: LD_VAR 0 5
54004: PUSH
54005: LD_VAR 0 7
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: ST_TO_ADDR
// exit ;
54014: POP
54015: POP
54016: GO 54022
// end ; end ;
54018: GO 53862
54020: POP
54021: POP
// end ;
54022: LD_VAR 0 3
54026: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54027: LD_INT 0
54029: PPUSH
54030: PPUSH
54031: PPUSH
// result := 0 ;
54032: LD_ADDR_VAR 0 3
54036: PUSH
54037: LD_INT 0
54039: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54040: LD_VAR 0 1
54044: PUSH
54045: LD_INT 0
54047: LESS
54048: PUSH
54049: LD_VAR 0 1
54053: PUSH
54054: LD_INT 8
54056: GREATER
54057: OR
54058: PUSH
54059: LD_VAR 0 2
54063: PUSH
54064: LD_INT 0
54066: LESS
54067: OR
54068: PUSH
54069: LD_VAR 0 2
54073: PUSH
54074: LD_INT 8
54076: GREATER
54077: OR
54078: IFFALSE 54082
// exit ;
54080: GO 54157
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54082: LD_ADDR_VAR 0 4
54086: PUSH
54087: LD_INT 22
54089: PUSH
54090: LD_VAR 0 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PPUSH
54099: CALL_OW 69
54103: PUSH
54104: FOR_IN
54105: IFFALSE 54155
// begin un := UnitShoot ( i ) ;
54107: LD_ADDR_VAR 0 5
54111: PUSH
54112: LD_VAR 0 4
54116: PPUSH
54117: CALL_OW 504
54121: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54122: LD_VAR 0 5
54126: PPUSH
54127: CALL_OW 255
54131: PUSH
54132: LD_VAR 0 1
54136: EQUAL
54137: IFFALSE 54153
// begin result := un ;
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_VAR 0 5
54148: ST_TO_ADDR
// exit ;
54149: POP
54150: POP
54151: GO 54157
// end ; end ;
54153: GO 54104
54155: POP
54156: POP
// end ;
54157: LD_VAR 0 3
54161: RET
// export function GetCargoBay ( units ) ; begin
54162: LD_INT 0
54164: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54165: LD_ADDR_VAR 0 2
54169: PUSH
54170: LD_VAR 0 1
54174: PPUSH
54175: LD_INT 2
54177: PUSH
54178: LD_INT 34
54180: PUSH
54181: LD_INT 12
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 34
54190: PUSH
54191: LD_INT 51
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 34
54200: PUSH
54201: LD_INT 32
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 34
54210: PUSH
54211: LD_INT 89
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: PPUSH
54225: CALL_OW 72
54229: ST_TO_ADDR
// end ;
54230: LD_VAR 0 2
54234: RET
// export function Negate ( value ) ; begin
54235: LD_INT 0
54237: PPUSH
// result := not value ;
54238: LD_ADDR_VAR 0 2
54242: PUSH
54243: LD_VAR 0 1
54247: NOT
54248: ST_TO_ADDR
// end ;
54249: LD_VAR 0 2
54253: RET
// export function Inc ( value ) ; begin
54254: LD_INT 0
54256: PPUSH
// result := value + 1 ;
54257: LD_ADDR_VAR 0 2
54261: PUSH
54262: LD_VAR 0 1
54266: PUSH
54267: LD_INT 1
54269: PLUS
54270: ST_TO_ADDR
// end ;
54271: LD_VAR 0 2
54275: RET
// export function Dec ( value ) ; begin
54276: LD_INT 0
54278: PPUSH
// result := value - 1 ;
54279: LD_ADDR_VAR 0 2
54283: PUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_INT 1
54291: MINUS
54292: ST_TO_ADDR
// end ;
54293: LD_VAR 0 2
54297: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54298: LD_INT 0
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54308: LD_VAR 0 1
54312: PPUSH
54313: LD_VAR 0 2
54317: PPUSH
54318: CALL_OW 488
54322: NOT
54323: PUSH
54324: LD_VAR 0 3
54328: PPUSH
54329: LD_VAR 0 4
54333: PPUSH
54334: CALL_OW 488
54338: NOT
54339: OR
54340: IFFALSE 54353
// begin result := - 1 ;
54342: LD_ADDR_VAR 0 5
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: ST_TO_ADDR
// exit ;
54351: GO 54588
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54353: LD_ADDR_VAR 0 12
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: LD_VAR 0 2
54367: PPUSH
54368: LD_VAR 0 3
54372: PPUSH
54373: LD_VAR 0 4
54377: PPUSH
54378: CALL 53438 0 4
54382: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54383: LD_ADDR_VAR 0 11
54387: PUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: LD_VAR 0 2
54397: PPUSH
54398: LD_VAR 0 12
54402: PUSH
54403: LD_INT 1
54405: ARRAY
54406: PPUSH
54407: LD_VAR 0 12
54411: PUSH
54412: LD_INT 2
54414: ARRAY
54415: PPUSH
54416: CALL_OW 298
54420: ST_TO_ADDR
// distance := 9999 ;
54421: LD_ADDR_VAR 0 10
54425: PUSH
54426: LD_INT 9999
54428: ST_TO_ADDR
// for i := 0 to 5 do
54429: LD_ADDR_VAR 0 6
54433: PUSH
54434: DOUBLE
54435: LD_INT 0
54437: DEC
54438: ST_TO_ADDR
54439: LD_INT 5
54441: PUSH
54442: FOR_TO
54443: IFFALSE 54586
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54445: LD_ADDR_VAR 0 7
54449: PUSH
54450: LD_VAR 0 1
54454: PPUSH
54455: LD_VAR 0 6
54459: PPUSH
54460: LD_VAR 0 11
54464: PPUSH
54465: CALL_OW 272
54469: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54470: LD_ADDR_VAR 0 8
54474: PUSH
54475: LD_VAR 0 2
54479: PPUSH
54480: LD_VAR 0 6
54484: PPUSH
54485: LD_VAR 0 11
54489: PPUSH
54490: CALL_OW 273
54494: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54495: LD_VAR 0 7
54499: PPUSH
54500: LD_VAR 0 8
54504: PPUSH
54505: CALL_OW 488
54509: NOT
54510: IFFALSE 54514
// continue ;
54512: GO 54442
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54514: LD_ADDR_VAR 0 9
54518: PUSH
54519: LD_VAR 0 12
54523: PUSH
54524: LD_INT 1
54526: ARRAY
54527: PPUSH
54528: LD_VAR 0 12
54532: PUSH
54533: LD_INT 2
54535: ARRAY
54536: PPUSH
54537: LD_VAR 0 7
54541: PPUSH
54542: LD_VAR 0 8
54546: PPUSH
54547: CALL_OW 298
54551: ST_TO_ADDR
// if tmp < distance then
54552: LD_VAR 0 9
54556: PUSH
54557: LD_VAR 0 10
54561: LESS
54562: IFFALSE 54584
// begin result := i ;
54564: LD_ADDR_VAR 0 5
54568: PUSH
54569: LD_VAR 0 6
54573: ST_TO_ADDR
// distance := tmp ;
54574: LD_ADDR_VAR 0 10
54578: PUSH
54579: LD_VAR 0 9
54583: ST_TO_ADDR
// end ; end ;
54584: GO 54442
54586: POP
54587: POP
// end ;
54588: LD_VAR 0 5
54592: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54593: LD_INT 0
54595: PPUSH
54596: PPUSH
// if not driver or not IsInUnit ( driver ) then
54597: LD_VAR 0 1
54601: NOT
54602: PUSH
54603: LD_VAR 0 1
54607: PPUSH
54608: CALL_OW 310
54612: NOT
54613: OR
54614: IFFALSE 54618
// exit ;
54616: GO 54708
// vehicle := IsInUnit ( driver ) ;
54618: LD_ADDR_VAR 0 3
54622: PUSH
54623: LD_VAR 0 1
54627: PPUSH
54628: CALL_OW 310
54632: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54633: LD_VAR 0 1
54637: PPUSH
54638: LD_STRING \
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: PUSH
54668: LD_STRING E
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_VAR 0 3
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PPUSH
54704: CALL_OW 446
// end ;
54708: LD_VAR 0 2
54712: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54713: LD_INT 0
54715: PPUSH
54716: PPUSH
// if not driver or not IsInUnit ( driver ) then
54717: LD_VAR 0 1
54721: NOT
54722: PUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL_OW 310
54732: NOT
54733: OR
54734: IFFALSE 54738
// exit ;
54736: GO 54828
// vehicle := IsInUnit ( driver ) ;
54738: LD_ADDR_VAR 0 3
54742: PUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: CALL_OW 310
54752: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54753: LD_VAR 0 1
54757: PPUSH
54758: LD_STRING \
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: PUSH
54788: LD_STRING E
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_VAR 0 3
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PPUSH
54824: CALL_OW 447
// end ;
54828: LD_VAR 0 2
54832: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54833: LD_INT 0
54835: PPUSH
54836: PPUSH
54837: PPUSH
// tmp := [ ] ;
54838: LD_ADDR_VAR 0 5
54842: PUSH
54843: EMPTY
54844: ST_TO_ADDR
// for i in units do
54845: LD_ADDR_VAR 0 4
54849: PUSH
54850: LD_VAR 0 1
54854: PUSH
54855: FOR_IN
54856: IFFALSE 54894
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54858: LD_ADDR_VAR 0 5
54862: PUSH
54863: LD_VAR 0 5
54867: PPUSH
54868: LD_VAR 0 5
54872: PUSH
54873: LD_INT 1
54875: PLUS
54876: PPUSH
54877: LD_VAR 0 4
54881: PPUSH
54882: CALL_OW 256
54886: PPUSH
54887: CALL_OW 2
54891: ST_TO_ADDR
54892: GO 54855
54894: POP
54895: POP
// if not tmp then
54896: LD_VAR 0 5
54900: NOT
54901: IFFALSE 54905
// exit ;
54903: GO 54953
// if asc then
54905: LD_VAR 0 2
54909: IFFALSE 54933
// result := SortListByListAsc ( units , tmp ) else
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: LD_VAR 0 1
54920: PPUSH
54921: LD_VAR 0 5
54925: PPUSH
54926: CALL_OW 76
54930: ST_TO_ADDR
54931: GO 54953
// result := SortListByListDesc ( units , tmp ) ;
54933: LD_ADDR_VAR 0 3
54937: PUSH
54938: LD_VAR 0 1
54942: PPUSH
54943: LD_VAR 0 5
54947: PPUSH
54948: CALL_OW 77
54952: ST_TO_ADDR
// end ;
54953: LD_VAR 0 3
54957: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54958: LD_INT 0
54960: PPUSH
54961: PPUSH
// task := GetTaskList ( mech ) ;
54962: LD_ADDR_VAR 0 4
54966: PUSH
54967: LD_VAR 0 1
54971: PPUSH
54972: CALL_OW 437
54976: ST_TO_ADDR
// if not task then
54977: LD_VAR 0 4
54981: NOT
54982: IFFALSE 54986
// exit ;
54984: GO 55028
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54986: LD_ADDR_VAR 0 3
54990: PUSH
54991: LD_VAR 0 4
54995: PUSH
54996: LD_INT 1
54998: ARRAY
54999: PUSH
55000: LD_INT 1
55002: ARRAY
55003: PUSH
55004: LD_STRING r
55006: EQUAL
55007: PUSH
55008: LD_VAR 0 4
55012: PUSH
55013: LD_INT 1
55015: ARRAY
55016: PUSH
55017: LD_INT 4
55019: ARRAY
55020: PUSH
55021: LD_VAR 0 2
55025: EQUAL
55026: AND
55027: ST_TO_ADDR
// end ;
55028: LD_VAR 0 3
55032: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55033: LD_INT 0
55035: PPUSH
// SetDir ( unit , d ) ;
55036: LD_VAR 0 1
55040: PPUSH
55041: LD_VAR 0 4
55045: PPUSH
55046: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55050: LD_VAR 0 1
55054: PPUSH
55055: LD_VAR 0 2
55059: PPUSH
55060: LD_VAR 0 3
55064: PPUSH
55065: LD_VAR 0 5
55069: PPUSH
55070: CALL_OW 48
// end ;
55074: LD_VAR 0 6
55078: RET
// export function ToNaturalNumber ( number ) ; begin
55079: LD_INT 0
55081: PPUSH
// result := number div 1 ;
55082: LD_ADDR_VAR 0 2
55086: PUSH
55087: LD_VAR 0 1
55091: PUSH
55092: LD_INT 1
55094: DIV
55095: ST_TO_ADDR
// if number < 0 then
55096: LD_VAR 0 1
55100: PUSH
55101: LD_INT 0
55103: LESS
55104: IFFALSE 55114
// result := 0 ;
55106: LD_ADDR_VAR 0 2
55110: PUSH
55111: LD_INT 0
55113: ST_TO_ADDR
// end ;
55114: LD_VAR 0 2
55118: RET
// export function SortByClass ( units , class ) ; var un ; begin
55119: LD_INT 0
55121: PPUSH
55122: PPUSH
// if not units or not class then
55123: LD_VAR 0 1
55127: NOT
55128: PUSH
55129: LD_VAR 0 2
55133: NOT
55134: OR
55135: IFFALSE 55139
// exit ;
55137: GO 55234
// result := [ ] ;
55139: LD_ADDR_VAR 0 3
55143: PUSH
55144: EMPTY
55145: ST_TO_ADDR
// for un in units do
55146: LD_ADDR_VAR 0 4
55150: PUSH
55151: LD_VAR 0 1
55155: PUSH
55156: FOR_IN
55157: IFFALSE 55232
// if GetClass ( un ) = class then
55159: LD_VAR 0 4
55163: PPUSH
55164: CALL_OW 257
55168: PUSH
55169: LD_VAR 0 2
55173: EQUAL
55174: IFFALSE 55201
// result := Insert ( result , 1 , un ) else
55176: LD_ADDR_VAR 0 3
55180: PUSH
55181: LD_VAR 0 3
55185: PPUSH
55186: LD_INT 1
55188: PPUSH
55189: LD_VAR 0 4
55193: PPUSH
55194: CALL_OW 2
55198: ST_TO_ADDR
55199: GO 55230
// result := Replace ( result , result + 1 , un ) ;
55201: LD_ADDR_VAR 0 3
55205: PUSH
55206: LD_VAR 0 3
55210: PPUSH
55211: LD_VAR 0 3
55215: PUSH
55216: LD_INT 1
55218: PLUS
55219: PPUSH
55220: LD_VAR 0 4
55224: PPUSH
55225: CALL_OW 1
55229: ST_TO_ADDR
55230: GO 55156
55232: POP
55233: POP
// end ;
55234: LD_VAR 0 3
55238: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55239: LD_INT 0
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
// result := [ ] ;
55248: LD_ADDR_VAR 0 4
55252: PUSH
55253: EMPTY
55254: ST_TO_ADDR
// if x - r < 0 then
55255: LD_VAR 0 1
55259: PUSH
55260: LD_VAR 0 3
55264: MINUS
55265: PUSH
55266: LD_INT 0
55268: LESS
55269: IFFALSE 55281
// min_x := 0 else
55271: LD_ADDR_VAR 0 8
55275: PUSH
55276: LD_INT 0
55278: ST_TO_ADDR
55279: GO 55297
// min_x := x - r ;
55281: LD_ADDR_VAR 0 8
55285: PUSH
55286: LD_VAR 0 1
55290: PUSH
55291: LD_VAR 0 3
55295: MINUS
55296: ST_TO_ADDR
// if y - r < 0 then
55297: LD_VAR 0 2
55301: PUSH
55302: LD_VAR 0 3
55306: MINUS
55307: PUSH
55308: LD_INT 0
55310: LESS
55311: IFFALSE 55323
// min_y := 0 else
55313: LD_ADDR_VAR 0 7
55317: PUSH
55318: LD_INT 0
55320: ST_TO_ADDR
55321: GO 55339
// min_y := y - r ;
55323: LD_ADDR_VAR 0 7
55327: PUSH
55328: LD_VAR 0 2
55332: PUSH
55333: LD_VAR 0 3
55337: MINUS
55338: ST_TO_ADDR
// max_x := x + r ;
55339: LD_ADDR_VAR 0 9
55343: PUSH
55344: LD_VAR 0 1
55348: PUSH
55349: LD_VAR 0 3
55353: PLUS
55354: ST_TO_ADDR
// max_y := y + r ;
55355: LD_ADDR_VAR 0 10
55359: PUSH
55360: LD_VAR 0 2
55364: PUSH
55365: LD_VAR 0 3
55369: PLUS
55370: ST_TO_ADDR
// for _x = min_x to max_x do
55371: LD_ADDR_VAR 0 5
55375: PUSH
55376: DOUBLE
55377: LD_VAR 0 8
55381: DEC
55382: ST_TO_ADDR
55383: LD_VAR 0 9
55387: PUSH
55388: FOR_TO
55389: IFFALSE 55490
// for _y = min_y to max_y do
55391: LD_ADDR_VAR 0 6
55395: PUSH
55396: DOUBLE
55397: LD_VAR 0 7
55401: DEC
55402: ST_TO_ADDR
55403: LD_VAR 0 10
55407: PUSH
55408: FOR_TO
55409: IFFALSE 55486
// begin if not ValidHex ( _x , _y ) then
55411: LD_VAR 0 5
55415: PPUSH
55416: LD_VAR 0 6
55420: PPUSH
55421: CALL_OW 488
55425: NOT
55426: IFFALSE 55430
// continue ;
55428: GO 55408
// if GetResourceTypeXY ( _x , _y ) then
55430: LD_VAR 0 5
55434: PPUSH
55435: LD_VAR 0 6
55439: PPUSH
55440: CALL_OW 283
55444: IFFALSE 55484
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55446: LD_ADDR_VAR 0 4
55450: PUSH
55451: LD_VAR 0 4
55455: PPUSH
55456: LD_VAR 0 4
55460: PUSH
55461: LD_INT 1
55463: PLUS
55464: PPUSH
55465: LD_VAR 0 5
55469: PUSH
55470: LD_VAR 0 6
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PPUSH
55479: CALL_OW 1
55483: ST_TO_ADDR
// end ;
55484: GO 55408
55486: POP
55487: POP
55488: GO 55388
55490: POP
55491: POP
// end ;
55492: LD_VAR 0 4
55496: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55497: LD_INT 0
55499: PPUSH
55500: PPUSH
55501: PPUSH
55502: PPUSH
55503: PPUSH
55504: PPUSH
55505: PPUSH
55506: PPUSH
// if not units then
55507: LD_VAR 0 1
55511: NOT
55512: IFFALSE 55516
// exit ;
55514: GO 56044
// result := UnitFilter ( units , [ f_ok ] ) ;
55516: LD_ADDR_VAR 0 3
55520: PUSH
55521: LD_VAR 0 1
55525: PPUSH
55526: LD_INT 50
55528: PUSH
55529: EMPTY
55530: LIST
55531: PPUSH
55532: CALL_OW 72
55536: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55537: LD_ADDR_VAR 0 8
55541: PUSH
55542: LD_VAR 0 1
55546: PUSH
55547: LD_INT 1
55549: ARRAY
55550: PPUSH
55551: CALL_OW 255
55555: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55556: LD_ADDR_VAR 0 10
55560: PUSH
55561: LD_INT 29
55563: PUSH
55564: LD_INT 91
55566: PUSH
55567: LD_INT 49
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: ST_TO_ADDR
// if not result then
55575: LD_VAR 0 3
55579: NOT
55580: IFFALSE 55584
// exit ;
55582: GO 56044
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55584: LD_ADDR_VAR 0 5
55588: PUSH
55589: LD_INT 81
55591: PUSH
55592: LD_VAR 0 8
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PPUSH
55601: CALL_OW 69
55605: ST_TO_ADDR
// for i in result do
55606: LD_ADDR_VAR 0 4
55610: PUSH
55611: LD_VAR 0 3
55615: PUSH
55616: FOR_IN
55617: IFFALSE 56042
// begin tag := GetTag ( i ) + 1 ;
55619: LD_ADDR_VAR 0 9
55623: PUSH
55624: LD_VAR 0 4
55628: PPUSH
55629: CALL_OW 110
55633: PUSH
55634: LD_INT 1
55636: PLUS
55637: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55638: LD_ADDR_VAR 0 7
55642: PUSH
55643: LD_VAR 0 4
55647: PPUSH
55648: CALL_OW 250
55652: PPUSH
55653: LD_VAR 0 4
55657: PPUSH
55658: CALL_OW 251
55662: PPUSH
55663: LD_INT 4
55665: PPUSH
55666: CALL 55239 0 3
55670: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55671: LD_VAR 0 4
55675: PPUSH
55676: CALL_OW 247
55680: PUSH
55681: LD_INT 2
55683: EQUAL
55684: PUSH
55685: LD_VAR 0 7
55689: PUSH
55690: LD_INT 2
55692: GREATER
55693: AND
55694: PUSH
55695: LD_VAR 0 4
55699: PPUSH
55700: CALL_OW 264
55704: PUSH
55705: LD_VAR 0 10
55709: IN
55710: NOT
55711: AND
55712: IFFALSE 55751
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55714: LD_VAR 0 4
55718: PPUSH
55719: LD_VAR 0 7
55723: PUSH
55724: LD_INT 1
55726: ARRAY
55727: PUSH
55728: LD_INT 1
55730: ARRAY
55731: PPUSH
55732: LD_VAR 0 7
55736: PUSH
55737: LD_INT 1
55739: ARRAY
55740: PUSH
55741: LD_INT 2
55743: ARRAY
55744: PPUSH
55745: CALL_OW 116
55749: GO 56040
// if path > tag then
55751: LD_VAR 0 2
55755: PUSH
55756: LD_VAR 0 9
55760: GREATER
55761: IFFALSE 55969
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55763: LD_ADDR_VAR 0 6
55767: PUSH
55768: LD_VAR 0 5
55772: PPUSH
55773: LD_INT 91
55775: PUSH
55776: LD_VAR 0 4
55780: PUSH
55781: LD_INT 8
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: LIST
55788: PPUSH
55789: CALL_OW 72
55793: ST_TO_ADDR
// if nearEnemy then
55794: LD_VAR 0 6
55798: IFFALSE 55867
// begin if GetWeapon ( i ) = ru_time_lapser then
55800: LD_VAR 0 4
55804: PPUSH
55805: CALL_OW 264
55809: PUSH
55810: LD_INT 49
55812: EQUAL
55813: IFFALSE 55841
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55815: LD_VAR 0 4
55819: PPUSH
55820: LD_VAR 0 6
55824: PPUSH
55825: LD_VAR 0 4
55829: PPUSH
55830: CALL_OW 74
55834: PPUSH
55835: CALL_OW 112
55839: GO 55865
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55841: LD_VAR 0 4
55845: PPUSH
55846: LD_VAR 0 6
55850: PPUSH
55851: LD_VAR 0 4
55855: PPUSH
55856: CALL_OW 74
55860: PPUSH
55861: CALL 57115 0 2
// end else
55865: GO 55967
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55867: LD_VAR 0 4
55871: PPUSH
55872: LD_VAR 0 2
55876: PUSH
55877: LD_VAR 0 9
55881: ARRAY
55882: PUSH
55883: LD_INT 1
55885: ARRAY
55886: PPUSH
55887: LD_VAR 0 2
55891: PUSH
55892: LD_VAR 0 9
55896: ARRAY
55897: PUSH
55898: LD_INT 2
55900: ARRAY
55901: PPUSH
55902: CALL_OW 297
55906: PUSH
55907: LD_INT 6
55909: GREATER
55910: IFFALSE 55953
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55912: LD_VAR 0 4
55916: PPUSH
55917: LD_VAR 0 2
55921: PUSH
55922: LD_VAR 0 9
55926: ARRAY
55927: PUSH
55928: LD_INT 1
55930: ARRAY
55931: PPUSH
55932: LD_VAR 0 2
55936: PUSH
55937: LD_VAR 0 9
55941: ARRAY
55942: PUSH
55943: LD_INT 2
55945: ARRAY
55946: PPUSH
55947: CALL_OW 114
55951: GO 55967
// SetTag ( i , tag ) ;
55953: LD_VAR 0 4
55957: PPUSH
55958: LD_VAR 0 9
55962: PPUSH
55963: CALL_OW 109
// end else
55967: GO 56040
// if enemy then
55969: LD_VAR 0 5
55973: IFFALSE 56040
// begin if GetWeapon ( i ) = ru_time_lapser then
55975: LD_VAR 0 4
55979: PPUSH
55980: CALL_OW 264
55984: PUSH
55985: LD_INT 49
55987: EQUAL
55988: IFFALSE 56016
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55990: LD_VAR 0 4
55994: PPUSH
55995: LD_VAR 0 5
55999: PPUSH
56000: LD_VAR 0 4
56004: PPUSH
56005: CALL_OW 74
56009: PPUSH
56010: CALL_OW 112
56014: GO 56040
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56016: LD_VAR 0 4
56020: PPUSH
56021: LD_VAR 0 5
56025: PPUSH
56026: LD_VAR 0 4
56030: PPUSH
56031: CALL_OW 74
56035: PPUSH
56036: CALL 57115 0 2
// end ; end ;
56040: GO 55616
56042: POP
56043: POP
// end ;
56044: LD_VAR 0 3
56048: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56049: LD_INT 0
56051: PPUSH
56052: PPUSH
56053: PPUSH
// if not unit or IsInUnit ( unit ) then
56054: LD_VAR 0 1
56058: NOT
56059: PUSH
56060: LD_VAR 0 1
56064: PPUSH
56065: CALL_OW 310
56069: OR
56070: IFFALSE 56074
// exit ;
56072: GO 56165
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56074: LD_ADDR_VAR 0 4
56078: PUSH
56079: LD_VAR 0 1
56083: PPUSH
56084: CALL_OW 250
56088: PPUSH
56089: LD_VAR 0 2
56093: PPUSH
56094: LD_INT 1
56096: PPUSH
56097: CALL_OW 272
56101: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56102: LD_ADDR_VAR 0 5
56106: PUSH
56107: LD_VAR 0 1
56111: PPUSH
56112: CALL_OW 251
56116: PPUSH
56117: LD_VAR 0 2
56121: PPUSH
56122: LD_INT 1
56124: PPUSH
56125: CALL_OW 273
56129: ST_TO_ADDR
// if ValidHex ( x , y ) then
56130: LD_VAR 0 4
56134: PPUSH
56135: LD_VAR 0 5
56139: PPUSH
56140: CALL_OW 488
56144: IFFALSE 56165
// ComTurnXY ( unit , x , y ) ;
56146: LD_VAR 0 1
56150: PPUSH
56151: LD_VAR 0 4
56155: PPUSH
56156: LD_VAR 0 5
56160: PPUSH
56161: CALL_OW 118
// end ;
56165: LD_VAR 0 3
56169: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56170: LD_INT 0
56172: PPUSH
56173: PPUSH
// result := false ;
56174: LD_ADDR_VAR 0 3
56178: PUSH
56179: LD_INT 0
56181: ST_TO_ADDR
// if not units then
56182: LD_VAR 0 2
56186: NOT
56187: IFFALSE 56191
// exit ;
56189: GO 56236
// for i in units do
56191: LD_ADDR_VAR 0 4
56195: PUSH
56196: LD_VAR 0 2
56200: PUSH
56201: FOR_IN
56202: IFFALSE 56234
// if See ( side , i ) then
56204: LD_VAR 0 1
56208: PPUSH
56209: LD_VAR 0 4
56213: PPUSH
56214: CALL_OW 292
56218: IFFALSE 56232
// begin result := true ;
56220: LD_ADDR_VAR 0 3
56224: PUSH
56225: LD_INT 1
56227: ST_TO_ADDR
// exit ;
56228: POP
56229: POP
56230: GO 56236
// end ;
56232: GO 56201
56234: POP
56235: POP
// end ;
56236: LD_VAR 0 3
56240: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56241: LD_INT 0
56243: PPUSH
56244: PPUSH
56245: PPUSH
56246: PPUSH
// if not unit or not points then
56247: LD_VAR 0 1
56251: NOT
56252: PUSH
56253: LD_VAR 0 2
56257: NOT
56258: OR
56259: IFFALSE 56263
// exit ;
56261: GO 56353
// dist := 99999 ;
56263: LD_ADDR_VAR 0 5
56267: PUSH
56268: LD_INT 99999
56270: ST_TO_ADDR
// for i in points do
56271: LD_ADDR_VAR 0 4
56275: PUSH
56276: LD_VAR 0 2
56280: PUSH
56281: FOR_IN
56282: IFFALSE 56351
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56284: LD_ADDR_VAR 0 6
56288: PUSH
56289: LD_VAR 0 1
56293: PPUSH
56294: LD_VAR 0 4
56298: PUSH
56299: LD_INT 1
56301: ARRAY
56302: PPUSH
56303: LD_VAR 0 4
56307: PUSH
56308: LD_INT 2
56310: ARRAY
56311: PPUSH
56312: CALL_OW 297
56316: ST_TO_ADDR
// if tmpDist < dist then
56317: LD_VAR 0 6
56321: PUSH
56322: LD_VAR 0 5
56326: LESS
56327: IFFALSE 56349
// begin result := i ;
56329: LD_ADDR_VAR 0 3
56333: PUSH
56334: LD_VAR 0 4
56338: ST_TO_ADDR
// dist := tmpDist ;
56339: LD_ADDR_VAR 0 5
56343: PUSH
56344: LD_VAR 0 6
56348: ST_TO_ADDR
// end ; end ;
56349: GO 56281
56351: POP
56352: POP
// end ;
56353: LD_VAR 0 3
56357: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56358: LD_INT 0
56360: PPUSH
// uc_side := side ;
56361: LD_ADDR_OWVAR 20
56365: PUSH
56366: LD_VAR 0 1
56370: ST_TO_ADDR
// uc_nation := 3 ;
56371: LD_ADDR_OWVAR 21
56375: PUSH
56376: LD_INT 3
56378: ST_TO_ADDR
// vc_chassis := 25 ;
56379: LD_ADDR_OWVAR 37
56383: PUSH
56384: LD_INT 25
56386: ST_TO_ADDR
// vc_engine := engine_siberite ;
56387: LD_ADDR_OWVAR 39
56391: PUSH
56392: LD_INT 3
56394: ST_TO_ADDR
// vc_control := control_computer ;
56395: LD_ADDR_OWVAR 38
56399: PUSH
56400: LD_INT 3
56402: ST_TO_ADDR
// vc_weapon := 59 ;
56403: LD_ADDR_OWVAR 40
56407: PUSH
56408: LD_INT 59
56410: ST_TO_ADDR
// result := CreateVehicle ;
56411: LD_ADDR_VAR 0 5
56415: PUSH
56416: CALL_OW 45
56420: ST_TO_ADDR
// SetDir ( result , d ) ;
56421: LD_VAR 0 5
56425: PPUSH
56426: LD_VAR 0 4
56430: PPUSH
56431: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56435: LD_VAR 0 5
56439: PPUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: LD_VAR 0 3
56449: PPUSH
56450: LD_INT 0
56452: PPUSH
56453: CALL_OW 48
// end ;
56457: LD_VAR 0 5
56461: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56462: LD_INT 0
56464: PPUSH
56465: PPUSH
56466: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56467: LD_ADDR_VAR 0 2
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56490: LD_VAR 0 1
56494: NOT
56495: PUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 264
56505: PUSH
56506: LD_INT 12
56508: PUSH
56509: LD_INT 51
56511: PUSH
56512: LD_INT 32
56514: PUSH
56515: LD_INT 89
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: IN
56524: NOT
56525: OR
56526: IFFALSE 56530
// exit ;
56528: GO 56628
// for i := 1 to 3 do
56530: LD_ADDR_VAR 0 3
56534: PUSH
56535: DOUBLE
56536: LD_INT 1
56538: DEC
56539: ST_TO_ADDR
56540: LD_INT 3
56542: PUSH
56543: FOR_TO
56544: IFFALSE 56626
// begin tmp := GetCargo ( cargo , i ) ;
56546: LD_ADDR_VAR 0 4
56550: PUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_VAR 0 3
56560: PPUSH
56561: CALL_OW 289
56565: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56566: LD_ADDR_VAR 0 2
56570: PUSH
56571: LD_VAR 0 2
56575: PPUSH
56576: LD_VAR 0 3
56580: PPUSH
56581: LD_VAR 0 4
56585: PPUSH
56586: CALL_OW 1
56590: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 2
56600: PPUSH
56601: LD_INT 4
56603: PPUSH
56604: LD_VAR 0 2
56608: PUSH
56609: LD_INT 4
56611: ARRAY
56612: PUSH
56613: LD_VAR 0 4
56617: PLUS
56618: PPUSH
56619: CALL_OW 1
56623: ST_TO_ADDR
// end ;
56624: GO 56543
56626: POP
56627: POP
// end ;
56628: LD_VAR 0 2
56632: RET
// export function Length ( array ) ; begin
56633: LD_INT 0
56635: PPUSH
// result := array + 0 ;
56636: LD_ADDR_VAR 0 2
56640: PUSH
56641: LD_VAR 0 1
56645: PUSH
56646: LD_INT 0
56648: PLUS
56649: ST_TO_ADDR
// end ;
56650: LD_VAR 0 2
56654: RET
// export function PrepareArray ( array ) ; begin
56655: LD_INT 0
56657: PPUSH
// result := array diff 0 ;
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_VAR 0 1
56667: PUSH
56668: LD_INT 0
56670: DIFF
56671: ST_TO_ADDR
// if not result [ 1 ] then
56672: LD_VAR 0 2
56676: PUSH
56677: LD_INT 1
56679: ARRAY
56680: NOT
56681: IFFALSE 56701
// result := Delete ( result , 1 ) ;
56683: LD_ADDR_VAR 0 2
56687: PUSH
56688: LD_VAR 0 2
56692: PPUSH
56693: LD_INT 1
56695: PPUSH
56696: CALL_OW 3
56700: ST_TO_ADDR
// end ;
56701: LD_VAR 0 2
56705: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56706: LD_INT 0
56708: PPUSH
56709: PPUSH
56710: PPUSH
56711: PPUSH
// sibRocketRange := 25 ;
56712: LD_ADDR_VAR 0 6
56716: PUSH
56717: LD_INT 25
56719: ST_TO_ADDR
// result := false ;
56720: LD_ADDR_VAR 0 4
56724: PUSH
56725: LD_INT 0
56727: ST_TO_ADDR
// for i := 0 to 5 do
56728: LD_ADDR_VAR 0 5
56732: PUSH
56733: DOUBLE
56734: LD_INT 0
56736: DEC
56737: ST_TO_ADDR
56738: LD_INT 5
56740: PUSH
56741: FOR_TO
56742: IFFALSE 56809
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56744: LD_VAR 0 1
56748: PPUSH
56749: LD_VAR 0 5
56753: PPUSH
56754: LD_VAR 0 6
56758: PPUSH
56759: CALL_OW 272
56763: PPUSH
56764: LD_VAR 0 2
56768: PPUSH
56769: LD_VAR 0 5
56773: PPUSH
56774: LD_VAR 0 6
56778: PPUSH
56779: CALL_OW 273
56783: PPUSH
56784: LD_VAR 0 3
56788: PPUSH
56789: CALL_OW 309
56793: IFFALSE 56807
// begin result := true ;
56795: LD_ADDR_VAR 0 4
56799: PUSH
56800: LD_INT 1
56802: ST_TO_ADDR
// exit ;
56803: POP
56804: POP
56805: GO 56811
// end ;
56807: GO 56741
56809: POP
56810: POP
// end ;
56811: LD_VAR 0 4
56815: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56816: LD_INT 0
56818: PPUSH
56819: PPUSH
56820: PPUSH
// if btype = b_depot then
56821: LD_VAR 0 2
56825: PUSH
56826: LD_INT 0
56828: EQUAL
56829: IFFALSE 56841
// begin result := true ;
56831: LD_ADDR_VAR 0 3
56835: PUSH
56836: LD_INT 1
56838: ST_TO_ADDR
// exit ;
56839: GO 56957
// end ; pom := GetBase ( depot ) ;
56841: LD_ADDR_VAR 0 4
56845: PUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 274
56855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: LD_VAR 0 2
56865: PPUSH
56866: LD_VAR 0 1
56870: PPUSH
56871: CALL_OW 248
56875: PPUSH
56876: CALL_OW 450
56880: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56881: LD_ADDR_VAR 0 3
56885: PUSH
56886: LD_VAR 0 4
56890: PPUSH
56891: LD_INT 1
56893: PPUSH
56894: CALL_OW 275
56898: PUSH
56899: LD_VAR 0 5
56903: PUSH
56904: LD_INT 1
56906: ARRAY
56907: GREATEREQUAL
56908: PUSH
56909: LD_VAR 0 4
56913: PPUSH
56914: LD_INT 2
56916: PPUSH
56917: CALL_OW 275
56921: PUSH
56922: LD_VAR 0 5
56926: PUSH
56927: LD_INT 2
56929: ARRAY
56930: GREATEREQUAL
56931: AND
56932: PUSH
56933: LD_VAR 0 4
56937: PPUSH
56938: LD_INT 3
56940: PPUSH
56941: CALL_OW 275
56945: PUSH
56946: LD_VAR 0 5
56950: PUSH
56951: LD_INT 3
56953: ARRAY
56954: GREATEREQUAL
56955: AND
56956: ST_TO_ADDR
// end ;
56957: LD_VAR 0 3
56961: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56962: LD_INT 0
56964: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56965: LD_VAR 0 1
56969: PPUSH
56970: LD_VAR 0 2
56974: PPUSH
56975: LD_INT 0
56977: PPUSH
56978: LD_INT 0
56980: PPUSH
56981: LD_INT 1
56983: PPUSH
56984: LD_INT 0
56986: PPUSH
56987: CALL_OW 587
// end ;
56991: LD_VAR 0 3
56995: RET
// export function CenterOnNow ( unit ) ; begin
56996: LD_INT 0
56998: PPUSH
// result := IsInUnit ( unit ) ;
56999: LD_ADDR_VAR 0 2
57003: PUSH
57004: LD_VAR 0 1
57008: PPUSH
57009: CALL_OW 310
57013: ST_TO_ADDR
// if not result then
57014: LD_VAR 0 2
57018: NOT
57019: IFFALSE 57031
// result := unit ;
57021: LD_ADDR_VAR 0 2
57025: PUSH
57026: LD_VAR 0 1
57030: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
57031: LD_VAR 0 1
57035: PPUSH
57036: CALL_OW 87
// end ;
57040: LD_VAR 0 2
57044: RET
// export function ComMoveHex ( unit , hex ) ; begin
57045: LD_INT 0
57047: PPUSH
// if not hex then
57048: LD_VAR 0 2
57052: NOT
57053: IFFALSE 57057
// exit ;
57055: GO 57110
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
57057: LD_VAR 0 2
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: LD_VAR 0 2
57070: PUSH
57071: LD_INT 2
57073: ARRAY
57074: PPUSH
57075: CALL_OW 428
57079: IFFALSE 57083
// exit ;
57081: GO 57110
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
57083: LD_VAR 0 1
57087: PPUSH
57088: LD_VAR 0 2
57092: PUSH
57093: LD_INT 1
57095: ARRAY
57096: PPUSH
57097: LD_VAR 0 2
57101: PUSH
57102: LD_INT 2
57104: ARRAY
57105: PPUSH
57106: CALL_OW 111
// end ;
57110: LD_VAR 0 3
57114: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57115: LD_INT 0
57117: PPUSH
57118: PPUSH
57119: PPUSH
// if not unit or not enemy then
57120: LD_VAR 0 1
57124: NOT
57125: PUSH
57126: LD_VAR 0 2
57130: NOT
57131: OR
57132: IFFALSE 57136
// exit ;
57134: GO 57260
// x := GetX ( enemy ) ;
57136: LD_ADDR_VAR 0 4
57140: PUSH
57141: LD_VAR 0 2
57145: PPUSH
57146: CALL_OW 250
57150: ST_TO_ADDR
// y := GetY ( enemy ) ;
57151: LD_ADDR_VAR 0 5
57155: PUSH
57156: LD_VAR 0 2
57160: PPUSH
57161: CALL_OW 251
57165: ST_TO_ADDR
// if ValidHex ( x , y ) then
57166: LD_VAR 0 4
57170: PPUSH
57171: LD_VAR 0 5
57175: PPUSH
57176: CALL_OW 488
57180: IFFALSE 57260
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57182: LD_VAR 0 2
57186: PPUSH
57187: CALL_OW 247
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: IN
57202: PUSH
57203: LD_VAR 0 1
57207: PPUSH
57208: CALL_OW 255
57212: PPUSH
57213: LD_VAR 0 2
57217: PPUSH
57218: CALL_OW 292
57222: OR
57223: IFFALSE 57241
// ComAttackUnit ( unit , enemy ) else
57225: LD_VAR 0 1
57229: PPUSH
57230: LD_VAR 0 2
57234: PPUSH
57235: CALL_OW 115
57239: GO 57260
// ComAgressiveMove ( unit , x , y ) ;
57241: LD_VAR 0 1
57245: PPUSH
57246: LD_VAR 0 4
57250: PPUSH
57251: LD_VAR 0 5
57255: PPUSH
57256: CALL_OW 114
// end ;
57260: LD_VAR 0 3
57264: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57265: LD_INT 0
57267: PPUSH
57268: PPUSH
57269: PPUSH
// list := AreaToList ( area , 0 ) ;
57270: LD_ADDR_VAR 0 5
57274: PUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: LD_INT 0
57282: PPUSH
57283: CALL_OW 517
57287: ST_TO_ADDR
// if not list then
57288: LD_VAR 0 5
57292: NOT
57293: IFFALSE 57297
// exit ;
57295: GO 57427
// if all then
57297: LD_VAR 0 2
57301: IFFALSE 57389
// begin for i := 1 to list [ 1 ] do
57303: LD_ADDR_VAR 0 4
57307: PUSH
57308: DOUBLE
57309: LD_INT 1
57311: DEC
57312: ST_TO_ADDR
57313: LD_VAR 0 5
57317: PUSH
57318: LD_INT 1
57320: ARRAY
57321: PUSH
57322: FOR_TO
57323: IFFALSE 57385
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57325: LD_ADDR_VAR 0 3
57329: PUSH
57330: LD_VAR 0 3
57334: PPUSH
57335: LD_VAR 0 3
57339: PUSH
57340: LD_INT 1
57342: PLUS
57343: PPUSH
57344: LD_VAR 0 5
57348: PUSH
57349: LD_INT 1
57351: ARRAY
57352: PUSH
57353: LD_VAR 0 4
57357: ARRAY
57358: PUSH
57359: LD_VAR 0 5
57363: PUSH
57364: LD_INT 2
57366: ARRAY
57367: PUSH
57368: LD_VAR 0 4
57372: ARRAY
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PPUSH
57378: CALL_OW 1
57382: ST_TO_ADDR
57383: GO 57322
57385: POP
57386: POP
// exit ;
57387: GO 57427
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57389: LD_ADDR_VAR 0 3
57393: PUSH
57394: LD_VAR 0 5
57398: PUSH
57399: LD_INT 1
57401: ARRAY
57402: PUSH
57403: LD_INT 1
57405: ARRAY
57406: PUSH
57407: LD_VAR 0 5
57411: PUSH
57412: LD_INT 2
57414: ARRAY
57415: PUSH
57416: LD_INT 1
57418: ARRAY
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: ST_TO_ADDR
// end ;
57427: LD_VAR 0 3
57431: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57432: LD_INT 0
57434: PPUSH
57435: PPUSH
// list := AreaToList ( area , 0 ) ;
57436: LD_ADDR_VAR 0 4
57440: PUSH
57441: LD_VAR 0 1
57445: PPUSH
57446: LD_INT 0
57448: PPUSH
57449: CALL_OW 517
57453: ST_TO_ADDR
// if not list then
57454: LD_VAR 0 4
57458: NOT
57459: IFFALSE 57463
// exit ;
57461: GO 57504
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57463: LD_ADDR_VAR 0 3
57467: PUSH
57468: LD_VAR 0 4
57472: PUSH
57473: LD_INT 1
57475: ARRAY
57476: PUSH
57477: LD_INT 1
57479: ARRAY
57480: PUSH
57481: LD_VAR 0 4
57485: PUSH
57486: LD_INT 2
57488: ARRAY
57489: PUSH
57490: LD_INT 1
57492: ARRAY
57493: PUSH
57494: LD_VAR 0 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// end ;
57504: LD_VAR 0 3
57508: RET
// export function First ( array ) ; begin
57509: LD_INT 0
57511: PPUSH
// if not array then
57512: LD_VAR 0 1
57516: NOT
57517: IFFALSE 57521
// exit ;
57519: GO 57535
// result := array [ 1 ] ;
57521: LD_ADDR_VAR 0 2
57525: PUSH
57526: LD_VAR 0 1
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: ST_TO_ADDR
// end ;
57535: LD_VAR 0 2
57539: RET
// export function Last ( array ) ; begin
57540: LD_INT 0
57542: PPUSH
// if not array then
57543: LD_VAR 0 1
57547: NOT
57548: IFFALSE 57552
// exit ;
57550: GO 57568
// result := array [ array ] ;
57552: LD_ADDR_VAR 0 2
57556: PUSH
57557: LD_VAR 0 1
57561: PUSH
57562: LD_VAR 0 1
57566: ARRAY
57567: ST_TO_ADDR
// end ;
57568: LD_VAR 0 2
57572: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57573: LD_INT 0
57575: PPUSH
57576: PPUSH
// result := [ ] ;
57577: LD_ADDR_VAR 0 5
57581: PUSH
57582: EMPTY
57583: ST_TO_ADDR
// if not array then
57584: LD_VAR 0 1
57588: NOT
57589: IFFALSE 57593
// exit ;
57591: GO 57705
// for i := 1 to array do
57593: LD_ADDR_VAR 0 6
57597: PUSH
57598: DOUBLE
57599: LD_INT 1
57601: DEC
57602: ST_TO_ADDR
57603: LD_VAR 0 1
57607: PUSH
57608: FOR_TO
57609: IFFALSE 57703
// if array [ i ] [ index ] = value then
57611: LD_VAR 0 1
57615: PUSH
57616: LD_VAR 0 6
57620: ARRAY
57621: PUSH
57622: LD_VAR 0 2
57626: ARRAY
57627: PUSH
57628: LD_VAR 0 3
57632: EQUAL
57633: IFFALSE 57701
// begin if indexColumn then
57635: LD_VAR 0 4
57639: IFFALSE 57675
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57641: LD_ADDR_VAR 0 5
57645: PUSH
57646: LD_VAR 0 5
57650: PPUSH
57651: LD_VAR 0 1
57655: PUSH
57656: LD_VAR 0 6
57660: ARRAY
57661: PUSH
57662: LD_VAR 0 4
57666: ARRAY
57667: PPUSH
57668: CALL 52893 0 2
57672: ST_TO_ADDR
57673: GO 57701
// result := Join ( result , array [ i ] ) ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_VAR 0 5
57684: PPUSH
57685: LD_VAR 0 1
57689: PUSH
57690: LD_VAR 0 6
57694: ARRAY
57695: PPUSH
57696: CALL 52893 0 2
57700: ST_TO_ADDR
// end ;
57701: GO 57608
57703: POP
57704: POP
// end ;
57705: LD_VAR 0 5
57709: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57710: LD_INT 0
57712: PPUSH
// if not vehicles or not parkingPoint then
57713: LD_VAR 0 1
57717: NOT
57718: PUSH
57719: LD_VAR 0 2
57723: NOT
57724: OR
57725: IFFALSE 57729
// exit ;
57727: GO 57827
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57729: LD_ADDR_VAR 0 1
57733: PUSH
57734: LD_VAR 0 1
57738: PPUSH
57739: LD_INT 50
57741: PUSH
57742: EMPTY
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: LD_INT 92
57750: PUSH
57751: LD_VAR 0 2
57755: PUSH
57756: LD_INT 1
57758: ARRAY
57759: PUSH
57760: LD_VAR 0 2
57764: PUSH
57765: LD_INT 2
57767: ARRAY
57768: PUSH
57769: LD_INT 8
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PPUSH
57786: CALL_OW 72
57790: ST_TO_ADDR
// if not vehicles then
57791: LD_VAR 0 1
57795: NOT
57796: IFFALSE 57800
// exit ;
57798: GO 57827
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57800: LD_VAR 0 1
57804: PPUSH
57805: LD_VAR 0 2
57809: PUSH
57810: LD_INT 1
57812: ARRAY
57813: PPUSH
57814: LD_VAR 0 2
57818: PUSH
57819: LD_INT 2
57821: ARRAY
57822: PPUSH
57823: CALL_OW 111
// end ;
57827: LD_VAR 0 3
57831: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57832: LD_INT 0
57834: PPUSH
57835: PPUSH
57836: PPUSH
// if not side or not area then
57837: LD_VAR 0 1
57841: NOT
57842: PUSH
57843: LD_VAR 0 2
57847: NOT
57848: OR
57849: IFFALSE 57853
// exit ;
57851: GO 57972
// tmp := AreaToList ( area , 0 ) ;
57853: LD_ADDR_VAR 0 5
57857: PUSH
57858: LD_VAR 0 2
57862: PPUSH
57863: LD_INT 0
57865: PPUSH
57866: CALL_OW 517
57870: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57871: LD_ADDR_VAR 0 4
57875: PUSH
57876: DOUBLE
57877: LD_INT 1
57879: DEC
57880: ST_TO_ADDR
57881: LD_VAR 0 5
57885: PUSH
57886: LD_INT 1
57888: ARRAY
57889: PUSH
57890: FOR_TO
57891: IFFALSE 57970
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57893: LD_VAR 0 5
57897: PUSH
57898: LD_INT 1
57900: ARRAY
57901: PUSH
57902: LD_VAR 0 4
57906: ARRAY
57907: PPUSH
57908: LD_VAR 0 5
57912: PUSH
57913: LD_INT 2
57915: ARRAY
57916: PUSH
57917: LD_VAR 0 4
57921: ARRAY
57922: PPUSH
57923: CALL_OW 351
57927: IFFALSE 57968
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57929: LD_VAR 0 5
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PUSH
57938: LD_VAR 0 4
57942: ARRAY
57943: PPUSH
57944: LD_VAR 0 5
57948: PUSH
57949: LD_INT 2
57951: ARRAY
57952: PUSH
57953: LD_VAR 0 4
57957: ARRAY
57958: PPUSH
57959: LD_VAR 0 1
57963: PPUSH
57964: CALL_OW 244
// end ;
57968: GO 57890
57970: POP
57971: POP
// end ; end_of_file
57972: LD_VAR 0 3
57976: RET
// export globalGameSaveCounter ; every 0 0$1 do
57977: GO 57979
57979: DISABLE
// begin enable ;
57980: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57981: LD_STRING updateTimer(
57983: PUSH
57984: LD_OWVAR 1
57988: STR
57989: PUSH
57990: LD_STRING );
57992: STR
57993: PPUSH
57994: CALL_OW 559
// end ;
57998: END
// every 0 0$1 do
57999: GO 58001
58001: DISABLE
// begin globalGameSaveCounter := 0 ;
58002: LD_ADDR_EXP 45
58006: PUSH
58007: LD_INT 0
58009: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
58010: LD_STRING setGameSaveCounter(0)
58012: PPUSH
58013: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
58017: LD_STRING initStreamRollete();
58019: PPUSH
58020: CALL_OW 559
// InitStreamMode ;
58024: CALL 59367 0 0
// DefineStreamItems ( false ) ;
58028: LD_INT 0
58030: PPUSH
58031: CALL 59831 0 1
// end ;
58035: END
// export function SOS_MapStart ( ) ; begin
58036: LD_INT 0
58038: PPUSH
// if streamModeActive then
58039: LD_EXP 46
58043: IFFALSE 58052
// DefineStreamItems ( true ) ;
58045: LD_INT 1
58047: PPUSH
58048: CALL 59831 0 1
// UpdateLuaVariables ( ) ;
58052: CALL 58069 0 0
// UpdateFactoryWaypoints ( ) ;
58056: CALL 72700 0 0
// UpdateWarehouseGatheringPoints ( ) ;
58060: CALL 72957 0 0
// end ;
58064: LD_VAR 0 1
58068: RET
// function UpdateLuaVariables ( ) ; begin
58069: LD_INT 0
58071: PPUSH
// if globalGameSaveCounter then
58072: LD_EXP 45
58076: IFFALSE 58110
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
58078: LD_ADDR_EXP 45
58082: PUSH
58083: LD_EXP 45
58087: PPUSH
58088: CALL 54254 0 1
58092: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58093: LD_STRING setGameSaveCounter(
58095: PUSH
58096: LD_EXP 45
58100: STR
58101: PUSH
58102: LD_STRING )
58104: STR
58105: PPUSH
58106: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58110: LD_STRING setGameDifficulty(
58112: PUSH
58113: LD_OWVAR 67
58117: STR
58118: PUSH
58119: LD_STRING )
58121: STR
58122: PPUSH
58123: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58127: LD_STRING displayDifficulty(
58129: PUSH
58130: LD_OWVAR 67
58134: STR
58135: PUSH
58136: LD_STRING )
58138: STR
58139: PPUSH
58140: CALL_OW 559
// end ;
58144: LD_VAR 0 1
58148: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58149: LD_INT 0
58151: PPUSH
// if p2 = stream_mode then
58152: LD_VAR 0 2
58156: PUSH
58157: LD_INT 100
58159: EQUAL
58160: IFFALSE 59163
// begin if not StreamModeActive then
58162: LD_EXP 46
58166: NOT
58167: IFFALSE 58177
// StreamModeActive := true ;
58169: LD_ADDR_EXP 46
58173: PUSH
58174: LD_INT 1
58176: ST_TO_ADDR
// if p3 = 0 then
58177: LD_VAR 0 3
58181: PUSH
58182: LD_INT 0
58184: EQUAL
58185: IFFALSE 58191
// InitStreamMode ;
58187: CALL 59367 0 0
// if p3 = 1 then
58191: LD_VAR 0 3
58195: PUSH
58196: LD_INT 1
58198: EQUAL
58199: IFFALSE 58209
// sRocket := true ;
58201: LD_ADDR_EXP 51
58205: PUSH
58206: LD_INT 1
58208: ST_TO_ADDR
// if p3 = 2 then
58209: LD_VAR 0 3
58213: PUSH
58214: LD_INT 2
58216: EQUAL
58217: IFFALSE 58227
// sSpeed := true ;
58219: LD_ADDR_EXP 50
58223: PUSH
58224: LD_INT 1
58226: ST_TO_ADDR
// if p3 = 3 then
58227: LD_VAR 0 3
58231: PUSH
58232: LD_INT 3
58234: EQUAL
58235: IFFALSE 58245
// sEngine := true ;
58237: LD_ADDR_EXP 52
58241: PUSH
58242: LD_INT 1
58244: ST_TO_ADDR
// if p3 = 4 then
58245: LD_VAR 0 3
58249: PUSH
58250: LD_INT 4
58252: EQUAL
58253: IFFALSE 58263
// sSpec := true ;
58255: LD_ADDR_EXP 49
58259: PUSH
58260: LD_INT 1
58262: ST_TO_ADDR
// if p3 = 5 then
58263: LD_VAR 0 3
58267: PUSH
58268: LD_INT 5
58270: EQUAL
58271: IFFALSE 58281
// sLevel := true ;
58273: LD_ADDR_EXP 53
58277: PUSH
58278: LD_INT 1
58280: ST_TO_ADDR
// if p3 = 6 then
58281: LD_VAR 0 3
58285: PUSH
58286: LD_INT 6
58288: EQUAL
58289: IFFALSE 58299
// sArmoury := true ;
58291: LD_ADDR_EXP 54
58295: PUSH
58296: LD_INT 1
58298: ST_TO_ADDR
// if p3 = 7 then
58299: LD_VAR 0 3
58303: PUSH
58304: LD_INT 7
58306: EQUAL
58307: IFFALSE 58317
// sRadar := true ;
58309: LD_ADDR_EXP 55
58313: PUSH
58314: LD_INT 1
58316: ST_TO_ADDR
// if p3 = 8 then
58317: LD_VAR 0 3
58321: PUSH
58322: LD_INT 8
58324: EQUAL
58325: IFFALSE 58335
// sBunker := true ;
58327: LD_ADDR_EXP 56
58331: PUSH
58332: LD_INT 1
58334: ST_TO_ADDR
// if p3 = 9 then
58335: LD_VAR 0 3
58339: PUSH
58340: LD_INT 9
58342: EQUAL
58343: IFFALSE 58353
// sHack := true ;
58345: LD_ADDR_EXP 57
58349: PUSH
58350: LD_INT 1
58352: ST_TO_ADDR
// if p3 = 10 then
58353: LD_VAR 0 3
58357: PUSH
58358: LD_INT 10
58360: EQUAL
58361: IFFALSE 58371
// sFire := true ;
58363: LD_ADDR_EXP 58
58367: PUSH
58368: LD_INT 1
58370: ST_TO_ADDR
// if p3 = 11 then
58371: LD_VAR 0 3
58375: PUSH
58376: LD_INT 11
58378: EQUAL
58379: IFFALSE 58389
// sRefresh := true ;
58381: LD_ADDR_EXP 59
58385: PUSH
58386: LD_INT 1
58388: ST_TO_ADDR
// if p3 = 12 then
58389: LD_VAR 0 3
58393: PUSH
58394: LD_INT 12
58396: EQUAL
58397: IFFALSE 58407
// sExp := true ;
58399: LD_ADDR_EXP 60
58403: PUSH
58404: LD_INT 1
58406: ST_TO_ADDR
// if p3 = 13 then
58407: LD_VAR 0 3
58411: PUSH
58412: LD_INT 13
58414: EQUAL
58415: IFFALSE 58425
// sDepot := true ;
58417: LD_ADDR_EXP 61
58421: PUSH
58422: LD_INT 1
58424: ST_TO_ADDR
// if p3 = 14 then
58425: LD_VAR 0 3
58429: PUSH
58430: LD_INT 14
58432: EQUAL
58433: IFFALSE 58443
// sFlag := true ;
58435: LD_ADDR_EXP 62
58439: PUSH
58440: LD_INT 1
58442: ST_TO_ADDR
// if p3 = 15 then
58443: LD_VAR 0 3
58447: PUSH
58448: LD_INT 15
58450: EQUAL
58451: IFFALSE 58461
// sKamikadze := true ;
58453: LD_ADDR_EXP 70
58457: PUSH
58458: LD_INT 1
58460: ST_TO_ADDR
// if p3 = 16 then
58461: LD_VAR 0 3
58465: PUSH
58466: LD_INT 16
58468: EQUAL
58469: IFFALSE 58479
// sTroll := true ;
58471: LD_ADDR_EXP 71
58475: PUSH
58476: LD_INT 1
58478: ST_TO_ADDR
// if p3 = 17 then
58479: LD_VAR 0 3
58483: PUSH
58484: LD_INT 17
58486: EQUAL
58487: IFFALSE 58497
// sSlow := true ;
58489: LD_ADDR_EXP 72
58493: PUSH
58494: LD_INT 1
58496: ST_TO_ADDR
// if p3 = 18 then
58497: LD_VAR 0 3
58501: PUSH
58502: LD_INT 18
58504: EQUAL
58505: IFFALSE 58515
// sLack := true ;
58507: LD_ADDR_EXP 73
58511: PUSH
58512: LD_INT 1
58514: ST_TO_ADDR
// if p3 = 19 then
58515: LD_VAR 0 3
58519: PUSH
58520: LD_INT 19
58522: EQUAL
58523: IFFALSE 58533
// sTank := true ;
58525: LD_ADDR_EXP 75
58529: PUSH
58530: LD_INT 1
58532: ST_TO_ADDR
// if p3 = 20 then
58533: LD_VAR 0 3
58537: PUSH
58538: LD_INT 20
58540: EQUAL
58541: IFFALSE 58551
// sRemote := true ;
58543: LD_ADDR_EXP 76
58547: PUSH
58548: LD_INT 1
58550: ST_TO_ADDR
// if p3 = 21 then
58551: LD_VAR 0 3
58555: PUSH
58556: LD_INT 21
58558: EQUAL
58559: IFFALSE 58569
// sPowell := true ;
58561: LD_ADDR_EXP 77
58565: PUSH
58566: LD_INT 1
58568: ST_TO_ADDR
// if p3 = 22 then
58569: LD_VAR 0 3
58573: PUSH
58574: LD_INT 22
58576: EQUAL
58577: IFFALSE 58587
// sTeleport := true ;
58579: LD_ADDR_EXP 80
58583: PUSH
58584: LD_INT 1
58586: ST_TO_ADDR
// if p3 = 23 then
58587: LD_VAR 0 3
58591: PUSH
58592: LD_INT 23
58594: EQUAL
58595: IFFALSE 58605
// sOilTower := true ;
58597: LD_ADDR_EXP 82
58601: PUSH
58602: LD_INT 1
58604: ST_TO_ADDR
// if p3 = 24 then
58605: LD_VAR 0 3
58609: PUSH
58610: LD_INT 24
58612: EQUAL
58613: IFFALSE 58623
// sShovel := true ;
58615: LD_ADDR_EXP 83
58619: PUSH
58620: LD_INT 1
58622: ST_TO_ADDR
// if p3 = 25 then
58623: LD_VAR 0 3
58627: PUSH
58628: LD_INT 25
58630: EQUAL
58631: IFFALSE 58641
// sSheik := true ;
58633: LD_ADDR_EXP 84
58637: PUSH
58638: LD_INT 1
58640: ST_TO_ADDR
// if p3 = 26 then
58641: LD_VAR 0 3
58645: PUSH
58646: LD_INT 26
58648: EQUAL
58649: IFFALSE 58659
// sEarthquake := true ;
58651: LD_ADDR_EXP 86
58655: PUSH
58656: LD_INT 1
58658: ST_TO_ADDR
// if p3 = 27 then
58659: LD_VAR 0 3
58663: PUSH
58664: LD_INT 27
58666: EQUAL
58667: IFFALSE 58677
// sAI := true ;
58669: LD_ADDR_EXP 87
58673: PUSH
58674: LD_INT 1
58676: ST_TO_ADDR
// if p3 = 28 then
58677: LD_VAR 0 3
58681: PUSH
58682: LD_INT 28
58684: EQUAL
58685: IFFALSE 58695
// sCargo := true ;
58687: LD_ADDR_EXP 90
58691: PUSH
58692: LD_INT 1
58694: ST_TO_ADDR
// if p3 = 29 then
58695: LD_VAR 0 3
58699: PUSH
58700: LD_INT 29
58702: EQUAL
58703: IFFALSE 58713
// sDLaser := true ;
58705: LD_ADDR_EXP 91
58709: PUSH
58710: LD_INT 1
58712: ST_TO_ADDR
// if p3 = 30 then
58713: LD_VAR 0 3
58717: PUSH
58718: LD_INT 30
58720: EQUAL
58721: IFFALSE 58731
// sExchange := true ;
58723: LD_ADDR_EXP 92
58727: PUSH
58728: LD_INT 1
58730: ST_TO_ADDR
// if p3 = 31 then
58731: LD_VAR 0 3
58735: PUSH
58736: LD_INT 31
58738: EQUAL
58739: IFFALSE 58749
// sFac := true ;
58741: LD_ADDR_EXP 93
58745: PUSH
58746: LD_INT 1
58748: ST_TO_ADDR
// if p3 = 32 then
58749: LD_VAR 0 3
58753: PUSH
58754: LD_INT 32
58756: EQUAL
58757: IFFALSE 58767
// sPower := true ;
58759: LD_ADDR_EXP 94
58763: PUSH
58764: LD_INT 1
58766: ST_TO_ADDR
// if p3 = 33 then
58767: LD_VAR 0 3
58771: PUSH
58772: LD_INT 33
58774: EQUAL
58775: IFFALSE 58785
// sRandom := true ;
58777: LD_ADDR_EXP 95
58781: PUSH
58782: LD_INT 1
58784: ST_TO_ADDR
// if p3 = 34 then
58785: LD_VAR 0 3
58789: PUSH
58790: LD_INT 34
58792: EQUAL
58793: IFFALSE 58803
// sShield := true ;
58795: LD_ADDR_EXP 96
58799: PUSH
58800: LD_INT 1
58802: ST_TO_ADDR
// if p3 = 35 then
58803: LD_VAR 0 3
58807: PUSH
58808: LD_INT 35
58810: EQUAL
58811: IFFALSE 58821
// sTime := true ;
58813: LD_ADDR_EXP 97
58817: PUSH
58818: LD_INT 1
58820: ST_TO_ADDR
// if p3 = 36 then
58821: LD_VAR 0 3
58825: PUSH
58826: LD_INT 36
58828: EQUAL
58829: IFFALSE 58839
// sTools := true ;
58831: LD_ADDR_EXP 98
58835: PUSH
58836: LD_INT 1
58838: ST_TO_ADDR
// if p3 = 101 then
58839: LD_VAR 0 3
58843: PUSH
58844: LD_INT 101
58846: EQUAL
58847: IFFALSE 58857
// sSold := true ;
58849: LD_ADDR_EXP 63
58853: PUSH
58854: LD_INT 1
58856: ST_TO_ADDR
// if p3 = 102 then
58857: LD_VAR 0 3
58861: PUSH
58862: LD_INT 102
58864: EQUAL
58865: IFFALSE 58875
// sDiff := true ;
58867: LD_ADDR_EXP 64
58871: PUSH
58872: LD_INT 1
58874: ST_TO_ADDR
// if p3 = 103 then
58875: LD_VAR 0 3
58879: PUSH
58880: LD_INT 103
58882: EQUAL
58883: IFFALSE 58893
// sFog := true ;
58885: LD_ADDR_EXP 67
58889: PUSH
58890: LD_INT 1
58892: ST_TO_ADDR
// if p3 = 104 then
58893: LD_VAR 0 3
58897: PUSH
58898: LD_INT 104
58900: EQUAL
58901: IFFALSE 58911
// sReset := true ;
58903: LD_ADDR_EXP 68
58907: PUSH
58908: LD_INT 1
58910: ST_TO_ADDR
// if p3 = 105 then
58911: LD_VAR 0 3
58915: PUSH
58916: LD_INT 105
58918: EQUAL
58919: IFFALSE 58929
// sSun := true ;
58921: LD_ADDR_EXP 69
58925: PUSH
58926: LD_INT 1
58928: ST_TO_ADDR
// if p3 = 106 then
58929: LD_VAR 0 3
58933: PUSH
58934: LD_INT 106
58936: EQUAL
58937: IFFALSE 58947
// sTiger := true ;
58939: LD_ADDR_EXP 65
58943: PUSH
58944: LD_INT 1
58946: ST_TO_ADDR
// if p3 = 107 then
58947: LD_VAR 0 3
58951: PUSH
58952: LD_INT 107
58954: EQUAL
58955: IFFALSE 58965
// sBomb := true ;
58957: LD_ADDR_EXP 66
58961: PUSH
58962: LD_INT 1
58964: ST_TO_ADDR
// if p3 = 108 then
58965: LD_VAR 0 3
58969: PUSH
58970: LD_INT 108
58972: EQUAL
58973: IFFALSE 58983
// sWound := true ;
58975: LD_ADDR_EXP 74
58979: PUSH
58980: LD_INT 1
58982: ST_TO_ADDR
// if p3 = 109 then
58983: LD_VAR 0 3
58987: PUSH
58988: LD_INT 109
58990: EQUAL
58991: IFFALSE 59001
// sBetray := true ;
58993: LD_ADDR_EXP 78
58997: PUSH
58998: LD_INT 1
59000: ST_TO_ADDR
// if p3 = 110 then
59001: LD_VAR 0 3
59005: PUSH
59006: LD_INT 110
59008: EQUAL
59009: IFFALSE 59019
// sContamin := true ;
59011: LD_ADDR_EXP 79
59015: PUSH
59016: LD_INT 1
59018: ST_TO_ADDR
// if p3 = 111 then
59019: LD_VAR 0 3
59023: PUSH
59024: LD_INT 111
59026: EQUAL
59027: IFFALSE 59037
// sOil := true ;
59029: LD_ADDR_EXP 81
59033: PUSH
59034: LD_INT 1
59036: ST_TO_ADDR
// if p3 = 112 then
59037: LD_VAR 0 3
59041: PUSH
59042: LD_INT 112
59044: EQUAL
59045: IFFALSE 59055
// sStu := true ;
59047: LD_ADDR_EXP 85
59051: PUSH
59052: LD_INT 1
59054: ST_TO_ADDR
// if p3 = 113 then
59055: LD_VAR 0 3
59059: PUSH
59060: LD_INT 113
59062: EQUAL
59063: IFFALSE 59073
// sBazooka := true ;
59065: LD_ADDR_EXP 88
59069: PUSH
59070: LD_INT 1
59072: ST_TO_ADDR
// if p3 = 114 then
59073: LD_VAR 0 3
59077: PUSH
59078: LD_INT 114
59080: EQUAL
59081: IFFALSE 59091
// sMortar := true ;
59083: LD_ADDR_EXP 89
59087: PUSH
59088: LD_INT 1
59090: ST_TO_ADDR
// if p3 = 115 then
59091: LD_VAR 0 3
59095: PUSH
59096: LD_INT 115
59098: EQUAL
59099: IFFALSE 59109
// sRanger := true ;
59101: LD_ADDR_EXP 99
59105: PUSH
59106: LD_INT 1
59108: ST_TO_ADDR
// if p3 = 116 then
59109: LD_VAR 0 3
59113: PUSH
59114: LD_INT 116
59116: EQUAL
59117: IFFALSE 59127
// sComputer := true ;
59119: LD_ADDR_EXP 100
59123: PUSH
59124: LD_INT 1
59126: ST_TO_ADDR
// if p3 = 117 then
59127: LD_VAR 0 3
59131: PUSH
59132: LD_INT 117
59134: EQUAL
59135: IFFALSE 59145
// s30 := true ;
59137: LD_ADDR_EXP 101
59141: PUSH
59142: LD_INT 1
59144: ST_TO_ADDR
// if p3 = 118 then
59145: LD_VAR 0 3
59149: PUSH
59150: LD_INT 118
59152: EQUAL
59153: IFFALSE 59163
// s60 := true ;
59155: LD_ADDR_EXP 102
59159: PUSH
59160: LD_INT 1
59162: ST_TO_ADDR
// end ; if p2 = hack_mode then
59163: LD_VAR 0 2
59167: PUSH
59168: LD_INT 101
59170: EQUAL
59171: IFFALSE 59299
// begin case p3 of 1 :
59173: LD_VAR 0 3
59177: PUSH
59178: LD_INT 1
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59186
59184: GO 59193
59186: POP
// hHackUnlimitedResources ; 2 :
59187: CALL 71446 0 0
59191: GO 59299
59193: LD_INT 2
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59201
59199: GO 59208
59201: POP
// hHackSetLevel10 ; 3 :
59202: CALL 71579 0 0
59206: GO 59299
59208: LD_INT 3
59210: DOUBLE
59211: EQUAL
59212: IFTRUE 59216
59214: GO 59223
59216: POP
// hHackSetLevel10YourUnits ; 4 :
59217: CALL 71664 0 0
59221: GO 59299
59223: LD_INT 4
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59231
59229: GO 59238
59231: POP
// hHackInvincible ; 5 :
59232: CALL 72112 0 0
59236: GO 59299
59238: LD_INT 5
59240: DOUBLE
59241: EQUAL
59242: IFTRUE 59246
59244: GO 59253
59246: POP
// hHackInvisible ; 6 :
59247: CALL 72223 0 0
59251: GO 59299
59253: LD_INT 6
59255: DOUBLE
59256: EQUAL
59257: IFTRUE 59261
59259: GO 59268
59261: POP
// hHackChangeYourSide ; 7 :
59262: CALL 72280 0 0
59266: GO 59299
59268: LD_INT 7
59270: DOUBLE
59271: EQUAL
59272: IFTRUE 59276
59274: GO 59283
59276: POP
// hHackChangeUnitSide ; 8 :
59277: CALL 72322 0 0
59281: GO 59299
59283: LD_INT 8
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59298
59291: POP
// hHackFog ; end ;
59292: CALL 72423 0 0
59296: GO 59299
59298: POP
// end ; if p2 = game_save_mode then
59299: LD_VAR 0 2
59303: PUSH
59304: LD_INT 102
59306: EQUAL
59307: IFFALSE 59362
// begin if p3 = 1 then
59309: LD_VAR 0 3
59313: PUSH
59314: LD_INT 1
59316: EQUAL
59317: IFFALSE 59329
// globalGameSaveCounter := p4 ;
59319: LD_ADDR_EXP 45
59323: PUSH
59324: LD_VAR 0 4
59328: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59329: LD_VAR 0 3
59333: PUSH
59334: LD_INT 2
59336: EQUAL
59337: PUSH
59338: LD_EXP 45
59342: AND
59343: IFFALSE 59362
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59345: LD_STRING setGameSaveCounter(
59347: PUSH
59348: LD_EXP 45
59352: STR
59353: PUSH
59354: LD_STRING )
59356: STR
59357: PPUSH
59358: CALL_OW 559
// end ; end ;
59362: LD_VAR 0 7
59366: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59367: LD_INT 0
59369: PPUSH
// streamModeActive := false ;
59370: LD_ADDR_EXP 46
59374: PUSH
59375: LD_INT 0
59377: ST_TO_ADDR
// normalCounter := 36 ;
59378: LD_ADDR_EXP 47
59382: PUSH
59383: LD_INT 36
59385: ST_TO_ADDR
// hardcoreCounter := 18 ;
59386: LD_ADDR_EXP 48
59390: PUSH
59391: LD_INT 18
59393: ST_TO_ADDR
// sRocket := false ;
59394: LD_ADDR_EXP 51
59398: PUSH
59399: LD_INT 0
59401: ST_TO_ADDR
// sSpeed := false ;
59402: LD_ADDR_EXP 50
59406: PUSH
59407: LD_INT 0
59409: ST_TO_ADDR
// sEngine := false ;
59410: LD_ADDR_EXP 52
59414: PUSH
59415: LD_INT 0
59417: ST_TO_ADDR
// sSpec := false ;
59418: LD_ADDR_EXP 49
59422: PUSH
59423: LD_INT 0
59425: ST_TO_ADDR
// sLevel := false ;
59426: LD_ADDR_EXP 53
59430: PUSH
59431: LD_INT 0
59433: ST_TO_ADDR
// sArmoury := false ;
59434: LD_ADDR_EXP 54
59438: PUSH
59439: LD_INT 0
59441: ST_TO_ADDR
// sRadar := false ;
59442: LD_ADDR_EXP 55
59446: PUSH
59447: LD_INT 0
59449: ST_TO_ADDR
// sBunker := false ;
59450: LD_ADDR_EXP 56
59454: PUSH
59455: LD_INT 0
59457: ST_TO_ADDR
// sHack := false ;
59458: LD_ADDR_EXP 57
59462: PUSH
59463: LD_INT 0
59465: ST_TO_ADDR
// sFire := false ;
59466: LD_ADDR_EXP 58
59470: PUSH
59471: LD_INT 0
59473: ST_TO_ADDR
// sRefresh := false ;
59474: LD_ADDR_EXP 59
59478: PUSH
59479: LD_INT 0
59481: ST_TO_ADDR
// sExp := false ;
59482: LD_ADDR_EXP 60
59486: PUSH
59487: LD_INT 0
59489: ST_TO_ADDR
// sDepot := false ;
59490: LD_ADDR_EXP 61
59494: PUSH
59495: LD_INT 0
59497: ST_TO_ADDR
// sFlag := false ;
59498: LD_ADDR_EXP 62
59502: PUSH
59503: LD_INT 0
59505: ST_TO_ADDR
// sKamikadze := false ;
59506: LD_ADDR_EXP 70
59510: PUSH
59511: LD_INT 0
59513: ST_TO_ADDR
// sTroll := false ;
59514: LD_ADDR_EXP 71
59518: PUSH
59519: LD_INT 0
59521: ST_TO_ADDR
// sSlow := false ;
59522: LD_ADDR_EXP 72
59526: PUSH
59527: LD_INT 0
59529: ST_TO_ADDR
// sLack := false ;
59530: LD_ADDR_EXP 73
59534: PUSH
59535: LD_INT 0
59537: ST_TO_ADDR
// sTank := false ;
59538: LD_ADDR_EXP 75
59542: PUSH
59543: LD_INT 0
59545: ST_TO_ADDR
// sRemote := false ;
59546: LD_ADDR_EXP 76
59550: PUSH
59551: LD_INT 0
59553: ST_TO_ADDR
// sPowell := false ;
59554: LD_ADDR_EXP 77
59558: PUSH
59559: LD_INT 0
59561: ST_TO_ADDR
// sTeleport := false ;
59562: LD_ADDR_EXP 80
59566: PUSH
59567: LD_INT 0
59569: ST_TO_ADDR
// sOilTower := false ;
59570: LD_ADDR_EXP 82
59574: PUSH
59575: LD_INT 0
59577: ST_TO_ADDR
// sShovel := false ;
59578: LD_ADDR_EXP 83
59582: PUSH
59583: LD_INT 0
59585: ST_TO_ADDR
// sSheik := false ;
59586: LD_ADDR_EXP 84
59590: PUSH
59591: LD_INT 0
59593: ST_TO_ADDR
// sEarthquake := false ;
59594: LD_ADDR_EXP 86
59598: PUSH
59599: LD_INT 0
59601: ST_TO_ADDR
// sAI := false ;
59602: LD_ADDR_EXP 87
59606: PUSH
59607: LD_INT 0
59609: ST_TO_ADDR
// sCargo := false ;
59610: LD_ADDR_EXP 90
59614: PUSH
59615: LD_INT 0
59617: ST_TO_ADDR
// sDLaser := false ;
59618: LD_ADDR_EXP 91
59622: PUSH
59623: LD_INT 0
59625: ST_TO_ADDR
// sExchange := false ;
59626: LD_ADDR_EXP 92
59630: PUSH
59631: LD_INT 0
59633: ST_TO_ADDR
// sFac := false ;
59634: LD_ADDR_EXP 93
59638: PUSH
59639: LD_INT 0
59641: ST_TO_ADDR
// sPower := false ;
59642: LD_ADDR_EXP 94
59646: PUSH
59647: LD_INT 0
59649: ST_TO_ADDR
// sRandom := false ;
59650: LD_ADDR_EXP 95
59654: PUSH
59655: LD_INT 0
59657: ST_TO_ADDR
// sShield := false ;
59658: LD_ADDR_EXP 96
59662: PUSH
59663: LD_INT 0
59665: ST_TO_ADDR
// sTime := false ;
59666: LD_ADDR_EXP 97
59670: PUSH
59671: LD_INT 0
59673: ST_TO_ADDR
// sTools := false ;
59674: LD_ADDR_EXP 98
59678: PUSH
59679: LD_INT 0
59681: ST_TO_ADDR
// sSold := false ;
59682: LD_ADDR_EXP 63
59686: PUSH
59687: LD_INT 0
59689: ST_TO_ADDR
// sDiff := false ;
59690: LD_ADDR_EXP 64
59694: PUSH
59695: LD_INT 0
59697: ST_TO_ADDR
// sFog := false ;
59698: LD_ADDR_EXP 67
59702: PUSH
59703: LD_INT 0
59705: ST_TO_ADDR
// sReset := false ;
59706: LD_ADDR_EXP 68
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// sSun := false ;
59714: LD_ADDR_EXP 69
59718: PUSH
59719: LD_INT 0
59721: ST_TO_ADDR
// sTiger := false ;
59722: LD_ADDR_EXP 65
59726: PUSH
59727: LD_INT 0
59729: ST_TO_ADDR
// sBomb := false ;
59730: LD_ADDR_EXP 66
59734: PUSH
59735: LD_INT 0
59737: ST_TO_ADDR
// sWound := false ;
59738: LD_ADDR_EXP 74
59742: PUSH
59743: LD_INT 0
59745: ST_TO_ADDR
// sBetray := false ;
59746: LD_ADDR_EXP 78
59750: PUSH
59751: LD_INT 0
59753: ST_TO_ADDR
// sContamin := false ;
59754: LD_ADDR_EXP 79
59758: PUSH
59759: LD_INT 0
59761: ST_TO_ADDR
// sOil := false ;
59762: LD_ADDR_EXP 81
59766: PUSH
59767: LD_INT 0
59769: ST_TO_ADDR
// sStu := false ;
59770: LD_ADDR_EXP 85
59774: PUSH
59775: LD_INT 0
59777: ST_TO_ADDR
// sBazooka := false ;
59778: LD_ADDR_EXP 88
59782: PUSH
59783: LD_INT 0
59785: ST_TO_ADDR
// sMortar := false ;
59786: LD_ADDR_EXP 89
59790: PUSH
59791: LD_INT 0
59793: ST_TO_ADDR
// sRanger := false ;
59794: LD_ADDR_EXP 99
59798: PUSH
59799: LD_INT 0
59801: ST_TO_ADDR
// sComputer := false ;
59802: LD_ADDR_EXP 100
59806: PUSH
59807: LD_INT 0
59809: ST_TO_ADDR
// s30 := false ;
59810: LD_ADDR_EXP 101
59814: PUSH
59815: LD_INT 0
59817: ST_TO_ADDR
// s60 := false ;
59818: LD_ADDR_EXP 102
59822: PUSH
59823: LD_INT 0
59825: ST_TO_ADDR
// end ;
59826: LD_VAR 0 1
59830: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59831: LD_INT 0
59833: PPUSH
59834: PPUSH
59835: PPUSH
59836: PPUSH
59837: PPUSH
59838: PPUSH
59839: PPUSH
// result := [ ] ;
59840: LD_ADDR_VAR 0 2
59844: PUSH
59845: EMPTY
59846: ST_TO_ADDR
// if campaign_id = 1 then
59847: LD_OWVAR 69
59851: PUSH
59852: LD_INT 1
59854: EQUAL
59855: IFFALSE 63021
// begin case mission_number of 1 :
59857: LD_OWVAR 70
59861: PUSH
59862: LD_INT 1
59864: DOUBLE
59865: EQUAL
59866: IFTRUE 59870
59868: GO 59946
59870: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59871: LD_ADDR_VAR 0 2
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: LD_INT 11
59884: PUSH
59885: LD_INT 12
59887: PUSH
59888: LD_INT 15
59890: PUSH
59891: LD_INT 16
59893: PUSH
59894: LD_INT 22
59896: PUSH
59897: LD_INT 23
59899: PUSH
59900: LD_INT 26
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 101
59916: PUSH
59917: LD_INT 102
59919: PUSH
59920: LD_INT 106
59922: PUSH
59923: LD_INT 116
59925: PUSH
59926: LD_INT 117
59928: PUSH
59929: LD_INT 118
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: ST_TO_ADDR
59944: GO 63019
59946: LD_INT 2
59948: DOUBLE
59949: EQUAL
59950: IFTRUE 59954
59952: GO 60038
59954: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 4
59965: PUSH
59966: LD_INT 11
59968: PUSH
59969: LD_INT 12
59971: PUSH
59972: LD_INT 15
59974: PUSH
59975: LD_INT 16
59977: PUSH
59978: LD_INT 22
59980: PUSH
59981: LD_INT 23
59983: PUSH
59984: LD_INT 26
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 101
60000: PUSH
60001: LD_INT 102
60003: PUSH
60004: LD_INT 105
60006: PUSH
60007: LD_INT 106
60009: PUSH
60010: LD_INT 108
60012: PUSH
60013: LD_INT 116
60015: PUSH
60016: LD_INT 117
60018: PUSH
60019: LD_INT 118
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: ST_TO_ADDR
60036: GO 63019
60038: LD_INT 3
60040: DOUBLE
60041: EQUAL
60042: IFTRUE 60046
60044: GO 60134
60046: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
60047: LD_ADDR_VAR 0 2
60051: PUSH
60052: LD_INT 2
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: LD_INT 5
60060: PUSH
60061: LD_INT 11
60063: PUSH
60064: LD_INT 12
60066: PUSH
60067: LD_INT 15
60069: PUSH
60070: LD_INT 16
60072: PUSH
60073: LD_INT 22
60075: PUSH
60076: LD_INT 26
60078: PUSH
60079: LD_INT 36
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 101
60096: PUSH
60097: LD_INT 102
60099: PUSH
60100: LD_INT 105
60102: PUSH
60103: LD_INT 106
60105: PUSH
60106: LD_INT 108
60108: PUSH
60109: LD_INT 116
60111: PUSH
60112: LD_INT 117
60114: PUSH
60115: LD_INT 118
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: ST_TO_ADDR
60132: GO 63019
60134: LD_INT 4
60136: DOUBLE
60137: EQUAL
60138: IFTRUE 60142
60140: GO 60238
60142: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60143: LD_ADDR_VAR 0 2
60147: PUSH
60148: LD_INT 2
60150: PUSH
60151: LD_INT 4
60153: PUSH
60154: LD_INT 5
60156: PUSH
60157: LD_INT 8
60159: PUSH
60160: LD_INT 11
60162: PUSH
60163: LD_INT 12
60165: PUSH
60166: LD_INT 15
60168: PUSH
60169: LD_INT 16
60171: PUSH
60172: LD_INT 22
60174: PUSH
60175: LD_INT 23
60177: PUSH
60178: LD_INT 26
60180: PUSH
60181: LD_INT 36
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 101
60200: PUSH
60201: LD_INT 102
60203: PUSH
60204: LD_INT 105
60206: PUSH
60207: LD_INT 106
60209: PUSH
60210: LD_INT 108
60212: PUSH
60213: LD_INT 116
60215: PUSH
60216: LD_INT 117
60218: PUSH
60219: LD_INT 118
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: ST_TO_ADDR
60236: GO 63019
60238: LD_INT 5
60240: DOUBLE
60241: EQUAL
60242: IFTRUE 60246
60244: GO 60358
60246: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60247: LD_ADDR_VAR 0 2
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: LD_INT 5
60260: PUSH
60261: LD_INT 6
60263: PUSH
60264: LD_INT 8
60266: PUSH
60267: LD_INT 11
60269: PUSH
60270: LD_INT 12
60272: PUSH
60273: LD_INT 15
60275: PUSH
60276: LD_INT 16
60278: PUSH
60279: LD_INT 22
60281: PUSH
60282: LD_INT 23
60284: PUSH
60285: LD_INT 25
60287: PUSH
60288: LD_INT 26
60290: PUSH
60291: LD_INT 36
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 101
60312: PUSH
60313: LD_INT 102
60315: PUSH
60316: LD_INT 105
60318: PUSH
60319: LD_INT 106
60321: PUSH
60322: LD_INT 108
60324: PUSH
60325: LD_INT 109
60327: PUSH
60328: LD_INT 112
60330: PUSH
60331: LD_INT 116
60333: PUSH
60334: LD_INT 117
60336: PUSH
60337: LD_INT 118
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: ST_TO_ADDR
60356: GO 63019
60358: LD_INT 6
60360: DOUBLE
60361: EQUAL
60362: IFTRUE 60366
60364: GO 60498
60366: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60367: LD_ADDR_VAR 0 2
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 4
60377: PUSH
60378: LD_INT 5
60380: PUSH
60381: LD_INT 6
60383: PUSH
60384: LD_INT 8
60386: PUSH
60387: LD_INT 11
60389: PUSH
60390: LD_INT 12
60392: PUSH
60393: LD_INT 15
60395: PUSH
60396: LD_INT 16
60398: PUSH
60399: LD_INT 20
60401: PUSH
60402: LD_INT 21
60404: PUSH
60405: LD_INT 22
60407: PUSH
60408: LD_INT 23
60410: PUSH
60411: LD_INT 25
60413: PUSH
60414: LD_INT 26
60416: PUSH
60417: LD_INT 30
60419: PUSH
60420: LD_INT 31
60422: PUSH
60423: LD_INT 32
60425: PUSH
60426: LD_INT 36
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 101
60452: PUSH
60453: LD_INT 102
60455: PUSH
60456: LD_INT 105
60458: PUSH
60459: LD_INT 106
60461: PUSH
60462: LD_INT 108
60464: PUSH
60465: LD_INT 109
60467: PUSH
60468: LD_INT 112
60470: PUSH
60471: LD_INT 116
60473: PUSH
60474: LD_INT 117
60476: PUSH
60477: LD_INT 118
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: ST_TO_ADDR
60496: GO 63019
60498: LD_INT 7
60500: DOUBLE
60501: EQUAL
60502: IFTRUE 60506
60504: GO 60618
60506: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 4
60517: PUSH
60518: LD_INT 5
60520: PUSH
60521: LD_INT 7
60523: PUSH
60524: LD_INT 11
60526: PUSH
60527: LD_INT 12
60529: PUSH
60530: LD_INT 15
60532: PUSH
60533: LD_INT 16
60535: PUSH
60536: LD_INT 20
60538: PUSH
60539: LD_INT 21
60541: PUSH
60542: LD_INT 22
60544: PUSH
60545: LD_INT 23
60547: PUSH
60548: LD_INT 25
60550: PUSH
60551: LD_INT 26
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 101
60572: PUSH
60573: LD_INT 102
60575: PUSH
60576: LD_INT 103
60578: PUSH
60579: LD_INT 105
60581: PUSH
60582: LD_INT 106
60584: PUSH
60585: LD_INT 108
60587: PUSH
60588: LD_INT 112
60590: PUSH
60591: LD_INT 116
60593: PUSH
60594: LD_INT 117
60596: PUSH
60597: LD_INT 118
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: ST_TO_ADDR
60616: GO 63019
60618: LD_INT 8
60620: DOUBLE
60621: EQUAL
60622: IFTRUE 60626
60624: GO 60766
60626: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60627: LD_ADDR_VAR 0 2
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: LD_INT 5
60640: PUSH
60641: LD_INT 6
60643: PUSH
60644: LD_INT 7
60646: PUSH
60647: LD_INT 8
60649: PUSH
60650: LD_INT 11
60652: PUSH
60653: LD_INT 12
60655: PUSH
60656: LD_INT 15
60658: PUSH
60659: LD_INT 16
60661: PUSH
60662: LD_INT 20
60664: PUSH
60665: LD_INT 21
60667: PUSH
60668: LD_INT 22
60670: PUSH
60671: LD_INT 23
60673: PUSH
60674: LD_INT 25
60676: PUSH
60677: LD_INT 26
60679: PUSH
60680: LD_INT 30
60682: PUSH
60683: LD_INT 31
60685: PUSH
60686: LD_INT 32
60688: PUSH
60689: LD_INT 36
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 101
60716: PUSH
60717: LD_INT 102
60719: PUSH
60720: LD_INT 103
60722: PUSH
60723: LD_INT 105
60725: PUSH
60726: LD_INT 106
60728: PUSH
60729: LD_INT 108
60731: PUSH
60732: LD_INT 109
60734: PUSH
60735: LD_INT 112
60737: PUSH
60738: LD_INT 116
60740: PUSH
60741: LD_INT 117
60743: PUSH
60744: LD_INT 118
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: ST_TO_ADDR
60764: GO 63019
60766: LD_INT 9
60768: DOUBLE
60769: EQUAL
60770: IFTRUE 60774
60772: GO 60922
60774: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60775: LD_ADDR_VAR 0 2
60779: PUSH
60780: LD_INT 2
60782: PUSH
60783: LD_INT 4
60785: PUSH
60786: LD_INT 5
60788: PUSH
60789: LD_INT 6
60791: PUSH
60792: LD_INT 7
60794: PUSH
60795: LD_INT 8
60797: PUSH
60798: LD_INT 11
60800: PUSH
60801: LD_INT 12
60803: PUSH
60804: LD_INT 15
60806: PUSH
60807: LD_INT 16
60809: PUSH
60810: LD_INT 20
60812: PUSH
60813: LD_INT 21
60815: PUSH
60816: LD_INT 22
60818: PUSH
60819: LD_INT 23
60821: PUSH
60822: LD_INT 25
60824: PUSH
60825: LD_INT 26
60827: PUSH
60828: LD_INT 28
60830: PUSH
60831: LD_INT 30
60833: PUSH
60834: LD_INT 31
60836: PUSH
60837: LD_INT 32
60839: PUSH
60840: LD_INT 36
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 101
60868: PUSH
60869: LD_INT 102
60871: PUSH
60872: LD_INT 103
60874: PUSH
60875: LD_INT 105
60877: PUSH
60878: LD_INT 106
60880: PUSH
60881: LD_INT 108
60883: PUSH
60884: LD_INT 109
60886: PUSH
60887: LD_INT 112
60889: PUSH
60890: LD_INT 114
60892: PUSH
60893: LD_INT 116
60895: PUSH
60896: LD_INT 117
60898: PUSH
60899: LD_INT 118
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: ST_TO_ADDR
60920: GO 63019
60922: LD_INT 10
60924: DOUBLE
60925: EQUAL
60926: IFTRUE 60930
60928: GO 61126
60930: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 5
60944: PUSH
60945: LD_INT 6
60947: PUSH
60948: LD_INT 7
60950: PUSH
60951: LD_INT 8
60953: PUSH
60954: LD_INT 9
60956: PUSH
60957: LD_INT 10
60959: PUSH
60960: LD_INT 11
60962: PUSH
60963: LD_INT 12
60965: PUSH
60966: LD_INT 13
60968: PUSH
60969: LD_INT 14
60971: PUSH
60972: LD_INT 15
60974: PUSH
60975: LD_INT 16
60977: PUSH
60978: LD_INT 17
60980: PUSH
60981: LD_INT 18
60983: PUSH
60984: LD_INT 19
60986: PUSH
60987: LD_INT 20
60989: PUSH
60990: LD_INT 21
60992: PUSH
60993: LD_INT 22
60995: PUSH
60996: LD_INT 23
60998: PUSH
60999: LD_INT 24
61001: PUSH
61002: LD_INT 25
61004: PUSH
61005: LD_INT 26
61007: PUSH
61008: LD_INT 28
61010: PUSH
61011: LD_INT 30
61013: PUSH
61014: LD_INT 31
61016: PUSH
61017: LD_INT 32
61019: PUSH
61020: LD_INT 36
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 101
61056: PUSH
61057: LD_INT 102
61059: PUSH
61060: LD_INT 103
61062: PUSH
61063: LD_INT 104
61065: PUSH
61066: LD_INT 105
61068: PUSH
61069: LD_INT 106
61071: PUSH
61072: LD_INT 107
61074: PUSH
61075: LD_INT 108
61077: PUSH
61078: LD_INT 109
61080: PUSH
61081: LD_INT 110
61083: PUSH
61084: LD_INT 111
61086: PUSH
61087: LD_INT 112
61089: PUSH
61090: LD_INT 114
61092: PUSH
61093: LD_INT 116
61095: PUSH
61096: LD_INT 117
61098: PUSH
61099: LD_INT 118
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: ST_TO_ADDR
61124: GO 63019
61126: LD_INT 11
61128: DOUBLE
61129: EQUAL
61130: IFTRUE 61134
61132: GO 61338
61134: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61135: LD_ADDR_VAR 0 2
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: LD_INT 5
61151: PUSH
61152: LD_INT 6
61154: PUSH
61155: LD_INT 7
61157: PUSH
61158: LD_INT 8
61160: PUSH
61161: LD_INT 9
61163: PUSH
61164: LD_INT 10
61166: PUSH
61167: LD_INT 11
61169: PUSH
61170: LD_INT 12
61172: PUSH
61173: LD_INT 13
61175: PUSH
61176: LD_INT 14
61178: PUSH
61179: LD_INT 15
61181: PUSH
61182: LD_INT 16
61184: PUSH
61185: LD_INT 17
61187: PUSH
61188: LD_INT 18
61190: PUSH
61191: LD_INT 19
61193: PUSH
61194: LD_INT 20
61196: PUSH
61197: LD_INT 21
61199: PUSH
61200: LD_INT 22
61202: PUSH
61203: LD_INT 23
61205: PUSH
61206: LD_INT 24
61208: PUSH
61209: LD_INT 25
61211: PUSH
61212: LD_INT 26
61214: PUSH
61215: LD_INT 28
61217: PUSH
61218: LD_INT 30
61220: PUSH
61221: LD_INT 31
61223: PUSH
61224: LD_INT 32
61226: PUSH
61227: LD_INT 34
61229: PUSH
61230: LD_INT 36
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 101
61268: PUSH
61269: LD_INT 102
61271: PUSH
61272: LD_INT 103
61274: PUSH
61275: LD_INT 104
61277: PUSH
61278: LD_INT 105
61280: PUSH
61281: LD_INT 106
61283: PUSH
61284: LD_INT 107
61286: PUSH
61287: LD_INT 108
61289: PUSH
61290: LD_INT 109
61292: PUSH
61293: LD_INT 110
61295: PUSH
61296: LD_INT 111
61298: PUSH
61299: LD_INT 112
61301: PUSH
61302: LD_INT 114
61304: PUSH
61305: LD_INT 116
61307: PUSH
61308: LD_INT 117
61310: PUSH
61311: LD_INT 118
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: ST_TO_ADDR
61336: GO 63019
61338: LD_INT 12
61340: DOUBLE
61341: EQUAL
61342: IFTRUE 61346
61344: GO 61566
61346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: LD_INT 4
61363: PUSH
61364: LD_INT 5
61366: PUSH
61367: LD_INT 6
61369: PUSH
61370: LD_INT 7
61372: PUSH
61373: LD_INT 8
61375: PUSH
61376: LD_INT 9
61378: PUSH
61379: LD_INT 10
61381: PUSH
61382: LD_INT 11
61384: PUSH
61385: LD_INT 12
61387: PUSH
61388: LD_INT 13
61390: PUSH
61391: LD_INT 14
61393: PUSH
61394: LD_INT 15
61396: PUSH
61397: LD_INT 16
61399: PUSH
61400: LD_INT 17
61402: PUSH
61403: LD_INT 18
61405: PUSH
61406: LD_INT 19
61408: PUSH
61409: LD_INT 20
61411: PUSH
61412: LD_INT 21
61414: PUSH
61415: LD_INT 22
61417: PUSH
61418: LD_INT 23
61420: PUSH
61421: LD_INT 24
61423: PUSH
61424: LD_INT 25
61426: PUSH
61427: LD_INT 26
61429: PUSH
61430: LD_INT 27
61432: PUSH
61433: LD_INT 28
61435: PUSH
61436: LD_INT 30
61438: PUSH
61439: LD_INT 31
61441: PUSH
61442: LD_INT 32
61444: PUSH
61445: LD_INT 33
61447: PUSH
61448: LD_INT 34
61450: PUSH
61451: LD_INT 36
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 101
61492: PUSH
61493: LD_INT 102
61495: PUSH
61496: LD_INT 103
61498: PUSH
61499: LD_INT 104
61501: PUSH
61502: LD_INT 105
61504: PUSH
61505: LD_INT 106
61507: PUSH
61508: LD_INT 107
61510: PUSH
61511: LD_INT 108
61513: PUSH
61514: LD_INT 109
61516: PUSH
61517: LD_INT 110
61519: PUSH
61520: LD_INT 111
61522: PUSH
61523: LD_INT 112
61525: PUSH
61526: LD_INT 113
61528: PUSH
61529: LD_INT 114
61531: PUSH
61532: LD_INT 116
61534: PUSH
61535: LD_INT 117
61537: PUSH
61538: LD_INT 118
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: ST_TO_ADDR
61564: GO 63019
61566: LD_INT 13
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61574
61572: GO 61782
61574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61575: LD_ADDR_VAR 0 2
61579: PUSH
61580: LD_INT 1
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 4
61591: PUSH
61592: LD_INT 5
61594: PUSH
61595: LD_INT 8
61597: PUSH
61598: LD_INT 9
61600: PUSH
61601: LD_INT 10
61603: PUSH
61604: LD_INT 11
61606: PUSH
61607: LD_INT 12
61609: PUSH
61610: LD_INT 14
61612: PUSH
61613: LD_INT 15
61615: PUSH
61616: LD_INT 16
61618: PUSH
61619: LD_INT 17
61621: PUSH
61622: LD_INT 18
61624: PUSH
61625: LD_INT 19
61627: PUSH
61628: LD_INT 20
61630: PUSH
61631: LD_INT 21
61633: PUSH
61634: LD_INT 22
61636: PUSH
61637: LD_INT 23
61639: PUSH
61640: LD_INT 24
61642: PUSH
61643: LD_INT 25
61645: PUSH
61646: LD_INT 26
61648: PUSH
61649: LD_INT 27
61651: PUSH
61652: LD_INT 28
61654: PUSH
61655: LD_INT 30
61657: PUSH
61658: LD_INT 31
61660: PUSH
61661: LD_INT 32
61663: PUSH
61664: LD_INT 33
61666: PUSH
61667: LD_INT 34
61669: PUSH
61670: LD_INT 36
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 101
61708: PUSH
61709: LD_INT 102
61711: PUSH
61712: LD_INT 103
61714: PUSH
61715: LD_INT 104
61717: PUSH
61718: LD_INT 105
61720: PUSH
61721: LD_INT 106
61723: PUSH
61724: LD_INT 107
61726: PUSH
61727: LD_INT 108
61729: PUSH
61730: LD_INT 109
61732: PUSH
61733: LD_INT 110
61735: PUSH
61736: LD_INT 111
61738: PUSH
61739: LD_INT 112
61741: PUSH
61742: LD_INT 113
61744: PUSH
61745: LD_INT 114
61747: PUSH
61748: LD_INT 116
61750: PUSH
61751: LD_INT 117
61753: PUSH
61754: LD_INT 118
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: ST_TO_ADDR
61780: GO 63019
61782: LD_INT 14
61784: DOUBLE
61785: EQUAL
61786: IFTRUE 61790
61788: GO 62014
61790: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61791: LD_ADDR_VAR 0 2
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: LD_INT 4
61807: PUSH
61808: LD_INT 5
61810: PUSH
61811: LD_INT 6
61813: PUSH
61814: LD_INT 7
61816: PUSH
61817: LD_INT 8
61819: PUSH
61820: LD_INT 9
61822: PUSH
61823: LD_INT 10
61825: PUSH
61826: LD_INT 11
61828: PUSH
61829: LD_INT 12
61831: PUSH
61832: LD_INT 13
61834: PUSH
61835: LD_INT 14
61837: PUSH
61838: LD_INT 15
61840: PUSH
61841: LD_INT 16
61843: PUSH
61844: LD_INT 17
61846: PUSH
61847: LD_INT 18
61849: PUSH
61850: LD_INT 19
61852: PUSH
61853: LD_INT 20
61855: PUSH
61856: LD_INT 21
61858: PUSH
61859: LD_INT 22
61861: PUSH
61862: LD_INT 23
61864: PUSH
61865: LD_INT 24
61867: PUSH
61868: LD_INT 25
61870: PUSH
61871: LD_INT 26
61873: PUSH
61874: LD_INT 27
61876: PUSH
61877: LD_INT 28
61879: PUSH
61880: LD_INT 29
61882: PUSH
61883: LD_INT 30
61885: PUSH
61886: LD_INT 31
61888: PUSH
61889: LD_INT 32
61891: PUSH
61892: LD_INT 33
61894: PUSH
61895: LD_INT 34
61897: PUSH
61898: LD_INT 36
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 101
61940: PUSH
61941: LD_INT 102
61943: PUSH
61944: LD_INT 103
61946: PUSH
61947: LD_INT 104
61949: PUSH
61950: LD_INT 105
61952: PUSH
61953: LD_INT 106
61955: PUSH
61956: LD_INT 107
61958: PUSH
61959: LD_INT 108
61961: PUSH
61962: LD_INT 109
61964: PUSH
61965: LD_INT 110
61967: PUSH
61968: LD_INT 111
61970: PUSH
61971: LD_INT 112
61973: PUSH
61974: LD_INT 113
61976: PUSH
61977: LD_INT 114
61979: PUSH
61980: LD_INT 116
61982: PUSH
61983: LD_INT 117
61985: PUSH
61986: LD_INT 118
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: ST_TO_ADDR
62012: GO 63019
62014: LD_INT 15
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62022
62020: GO 62246
62022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
62023: LD_ADDR_VAR 0 2
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 4
62039: PUSH
62040: LD_INT 5
62042: PUSH
62043: LD_INT 6
62045: PUSH
62046: LD_INT 7
62048: PUSH
62049: LD_INT 8
62051: PUSH
62052: LD_INT 9
62054: PUSH
62055: LD_INT 10
62057: PUSH
62058: LD_INT 11
62060: PUSH
62061: LD_INT 12
62063: PUSH
62064: LD_INT 13
62066: PUSH
62067: LD_INT 14
62069: PUSH
62070: LD_INT 15
62072: PUSH
62073: LD_INT 16
62075: PUSH
62076: LD_INT 17
62078: PUSH
62079: LD_INT 18
62081: PUSH
62082: LD_INT 19
62084: PUSH
62085: LD_INT 20
62087: PUSH
62088: LD_INT 21
62090: PUSH
62091: LD_INT 22
62093: PUSH
62094: LD_INT 23
62096: PUSH
62097: LD_INT 24
62099: PUSH
62100: LD_INT 25
62102: PUSH
62103: LD_INT 26
62105: PUSH
62106: LD_INT 27
62108: PUSH
62109: LD_INT 28
62111: PUSH
62112: LD_INT 29
62114: PUSH
62115: LD_INT 30
62117: PUSH
62118: LD_INT 31
62120: PUSH
62121: LD_INT 32
62123: PUSH
62124: LD_INT 33
62126: PUSH
62127: LD_INT 34
62129: PUSH
62130: LD_INT 36
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 101
62172: PUSH
62173: LD_INT 102
62175: PUSH
62176: LD_INT 103
62178: PUSH
62179: LD_INT 104
62181: PUSH
62182: LD_INT 105
62184: PUSH
62185: LD_INT 106
62187: PUSH
62188: LD_INT 107
62190: PUSH
62191: LD_INT 108
62193: PUSH
62194: LD_INT 109
62196: PUSH
62197: LD_INT 110
62199: PUSH
62200: LD_INT 111
62202: PUSH
62203: LD_INT 112
62205: PUSH
62206: LD_INT 113
62208: PUSH
62209: LD_INT 114
62211: PUSH
62212: LD_INT 116
62214: PUSH
62215: LD_INT 117
62217: PUSH
62218: LD_INT 118
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: ST_TO_ADDR
62244: GO 63019
62246: LD_INT 16
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62254
62252: GO 62390
62254: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62255: LD_ADDR_VAR 0 2
62259: PUSH
62260: LD_INT 2
62262: PUSH
62263: LD_INT 4
62265: PUSH
62266: LD_INT 5
62268: PUSH
62269: LD_INT 7
62271: PUSH
62272: LD_INT 11
62274: PUSH
62275: LD_INT 12
62277: PUSH
62278: LD_INT 15
62280: PUSH
62281: LD_INT 16
62283: PUSH
62284: LD_INT 20
62286: PUSH
62287: LD_INT 21
62289: PUSH
62290: LD_INT 22
62292: PUSH
62293: LD_INT 23
62295: PUSH
62296: LD_INT 25
62298: PUSH
62299: LD_INT 26
62301: PUSH
62302: LD_INT 30
62304: PUSH
62305: LD_INT 31
62307: PUSH
62308: LD_INT 32
62310: PUSH
62311: LD_INT 33
62313: PUSH
62314: LD_INT 34
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 101
62340: PUSH
62341: LD_INT 102
62343: PUSH
62344: LD_INT 103
62346: PUSH
62347: LD_INT 106
62349: PUSH
62350: LD_INT 108
62352: PUSH
62353: LD_INT 112
62355: PUSH
62356: LD_INT 113
62358: PUSH
62359: LD_INT 114
62361: PUSH
62362: LD_INT 116
62364: PUSH
62365: LD_INT 117
62367: PUSH
62368: LD_INT 118
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: ST_TO_ADDR
62388: GO 63019
62390: LD_INT 17
62392: DOUBLE
62393: EQUAL
62394: IFTRUE 62398
62396: GO 62622
62398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: LD_INT 3
62412: PUSH
62413: LD_INT 4
62415: PUSH
62416: LD_INT 5
62418: PUSH
62419: LD_INT 6
62421: PUSH
62422: LD_INT 7
62424: PUSH
62425: LD_INT 8
62427: PUSH
62428: LD_INT 9
62430: PUSH
62431: LD_INT 10
62433: PUSH
62434: LD_INT 11
62436: PUSH
62437: LD_INT 12
62439: PUSH
62440: LD_INT 13
62442: PUSH
62443: LD_INT 14
62445: PUSH
62446: LD_INT 15
62448: PUSH
62449: LD_INT 16
62451: PUSH
62452: LD_INT 17
62454: PUSH
62455: LD_INT 18
62457: PUSH
62458: LD_INT 19
62460: PUSH
62461: LD_INT 20
62463: PUSH
62464: LD_INT 21
62466: PUSH
62467: LD_INT 22
62469: PUSH
62470: LD_INT 23
62472: PUSH
62473: LD_INT 24
62475: PUSH
62476: LD_INT 25
62478: PUSH
62479: LD_INT 26
62481: PUSH
62482: LD_INT 27
62484: PUSH
62485: LD_INT 28
62487: PUSH
62488: LD_INT 29
62490: PUSH
62491: LD_INT 30
62493: PUSH
62494: LD_INT 31
62496: PUSH
62497: LD_INT 32
62499: PUSH
62500: LD_INT 33
62502: PUSH
62503: LD_INT 34
62505: PUSH
62506: LD_INT 36
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 101
62548: PUSH
62549: LD_INT 102
62551: PUSH
62552: LD_INT 103
62554: PUSH
62555: LD_INT 104
62557: PUSH
62558: LD_INT 105
62560: PUSH
62561: LD_INT 106
62563: PUSH
62564: LD_INT 107
62566: PUSH
62567: LD_INT 108
62569: PUSH
62570: LD_INT 109
62572: PUSH
62573: LD_INT 110
62575: PUSH
62576: LD_INT 111
62578: PUSH
62579: LD_INT 112
62581: PUSH
62582: LD_INT 113
62584: PUSH
62585: LD_INT 114
62587: PUSH
62588: LD_INT 116
62590: PUSH
62591: LD_INT 117
62593: PUSH
62594: LD_INT 118
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: ST_TO_ADDR
62620: GO 63019
62622: LD_INT 18
62624: DOUBLE
62625: EQUAL
62626: IFTRUE 62630
62628: GO 62778
62630: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62631: LD_ADDR_VAR 0 2
62635: PUSH
62636: LD_INT 2
62638: PUSH
62639: LD_INT 4
62641: PUSH
62642: LD_INT 5
62644: PUSH
62645: LD_INT 7
62647: PUSH
62648: LD_INT 11
62650: PUSH
62651: LD_INT 12
62653: PUSH
62654: LD_INT 15
62656: PUSH
62657: LD_INT 16
62659: PUSH
62660: LD_INT 20
62662: PUSH
62663: LD_INT 21
62665: PUSH
62666: LD_INT 22
62668: PUSH
62669: LD_INT 23
62671: PUSH
62672: LD_INT 25
62674: PUSH
62675: LD_INT 26
62677: PUSH
62678: LD_INT 30
62680: PUSH
62681: LD_INT 31
62683: PUSH
62684: LD_INT 32
62686: PUSH
62687: LD_INT 33
62689: PUSH
62690: LD_INT 34
62692: PUSH
62693: LD_INT 35
62695: PUSH
62696: LD_INT 36
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 101
62724: PUSH
62725: LD_INT 102
62727: PUSH
62728: LD_INT 103
62730: PUSH
62731: LD_INT 106
62733: PUSH
62734: LD_INT 108
62736: PUSH
62737: LD_INT 112
62739: PUSH
62740: LD_INT 113
62742: PUSH
62743: LD_INT 114
62745: PUSH
62746: LD_INT 115
62748: PUSH
62749: LD_INT 116
62751: PUSH
62752: LD_INT 117
62754: PUSH
62755: LD_INT 118
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: ST_TO_ADDR
62776: GO 63019
62778: LD_INT 19
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62786
62784: GO 63018
62786: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62787: LD_ADDR_VAR 0 2
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 5
62806: PUSH
62807: LD_INT 6
62809: PUSH
62810: LD_INT 7
62812: PUSH
62813: LD_INT 8
62815: PUSH
62816: LD_INT 9
62818: PUSH
62819: LD_INT 10
62821: PUSH
62822: LD_INT 11
62824: PUSH
62825: LD_INT 12
62827: PUSH
62828: LD_INT 13
62830: PUSH
62831: LD_INT 14
62833: PUSH
62834: LD_INT 15
62836: PUSH
62837: LD_INT 16
62839: PUSH
62840: LD_INT 17
62842: PUSH
62843: LD_INT 18
62845: PUSH
62846: LD_INT 19
62848: PUSH
62849: LD_INT 20
62851: PUSH
62852: LD_INT 21
62854: PUSH
62855: LD_INT 22
62857: PUSH
62858: LD_INT 23
62860: PUSH
62861: LD_INT 24
62863: PUSH
62864: LD_INT 25
62866: PUSH
62867: LD_INT 26
62869: PUSH
62870: LD_INT 27
62872: PUSH
62873: LD_INT 28
62875: PUSH
62876: LD_INT 29
62878: PUSH
62879: LD_INT 30
62881: PUSH
62882: LD_INT 31
62884: PUSH
62885: LD_INT 32
62887: PUSH
62888: LD_INT 33
62890: PUSH
62891: LD_INT 34
62893: PUSH
62894: LD_INT 35
62896: PUSH
62897: LD_INT 36
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 101
62940: PUSH
62941: LD_INT 102
62943: PUSH
62944: LD_INT 103
62946: PUSH
62947: LD_INT 104
62949: PUSH
62950: LD_INT 105
62952: PUSH
62953: LD_INT 106
62955: PUSH
62956: LD_INT 107
62958: PUSH
62959: LD_INT 108
62961: PUSH
62962: LD_INT 109
62964: PUSH
62965: LD_INT 110
62967: PUSH
62968: LD_INT 111
62970: PUSH
62971: LD_INT 112
62973: PUSH
62974: LD_INT 113
62976: PUSH
62977: LD_INT 114
62979: PUSH
62980: LD_INT 115
62982: PUSH
62983: LD_INT 116
62985: PUSH
62986: LD_INT 117
62988: PUSH
62989: LD_INT 118
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: ST_TO_ADDR
63016: GO 63019
63018: POP
// end else
63019: GO 63250
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: LD_INT 3
63034: PUSH
63035: LD_INT 4
63037: PUSH
63038: LD_INT 5
63040: PUSH
63041: LD_INT 6
63043: PUSH
63044: LD_INT 7
63046: PUSH
63047: LD_INT 8
63049: PUSH
63050: LD_INT 9
63052: PUSH
63053: LD_INT 10
63055: PUSH
63056: LD_INT 11
63058: PUSH
63059: LD_INT 12
63061: PUSH
63062: LD_INT 13
63064: PUSH
63065: LD_INT 14
63067: PUSH
63068: LD_INT 15
63070: PUSH
63071: LD_INT 16
63073: PUSH
63074: LD_INT 17
63076: PUSH
63077: LD_INT 18
63079: PUSH
63080: LD_INT 19
63082: PUSH
63083: LD_INT 20
63085: PUSH
63086: LD_INT 21
63088: PUSH
63089: LD_INT 22
63091: PUSH
63092: LD_INT 23
63094: PUSH
63095: LD_INT 24
63097: PUSH
63098: LD_INT 25
63100: PUSH
63101: LD_INT 26
63103: PUSH
63104: LD_INT 27
63106: PUSH
63107: LD_INT 28
63109: PUSH
63110: LD_INT 29
63112: PUSH
63113: LD_INT 30
63115: PUSH
63116: LD_INT 31
63118: PUSH
63119: LD_INT 32
63121: PUSH
63122: LD_INT 33
63124: PUSH
63125: LD_INT 34
63127: PUSH
63128: LD_INT 35
63130: PUSH
63131: LD_INT 36
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: PUSH
63172: LD_INT 101
63174: PUSH
63175: LD_INT 102
63177: PUSH
63178: LD_INT 103
63180: PUSH
63181: LD_INT 104
63183: PUSH
63184: LD_INT 105
63186: PUSH
63187: LD_INT 106
63189: PUSH
63190: LD_INT 107
63192: PUSH
63193: LD_INT 108
63195: PUSH
63196: LD_INT 109
63198: PUSH
63199: LD_INT 110
63201: PUSH
63202: LD_INT 111
63204: PUSH
63205: LD_INT 112
63207: PUSH
63208: LD_INT 113
63210: PUSH
63211: LD_INT 114
63213: PUSH
63214: LD_INT 115
63216: PUSH
63217: LD_INT 116
63219: PUSH
63220: LD_INT 117
63222: PUSH
63223: LD_INT 118
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: ST_TO_ADDR
// if result then
63250: LD_VAR 0 2
63254: IFFALSE 64040
// begin normal :=  ;
63256: LD_ADDR_VAR 0 5
63260: PUSH
63261: LD_STRING 
63263: ST_TO_ADDR
// hardcore :=  ;
63264: LD_ADDR_VAR 0 6
63268: PUSH
63269: LD_STRING 
63271: ST_TO_ADDR
// active :=  ;
63272: LD_ADDR_VAR 0 7
63276: PUSH
63277: LD_STRING 
63279: ST_TO_ADDR
// for i = 1 to normalCounter do
63280: LD_ADDR_VAR 0 8
63284: PUSH
63285: DOUBLE
63286: LD_INT 1
63288: DEC
63289: ST_TO_ADDR
63290: LD_EXP 47
63294: PUSH
63295: FOR_TO
63296: IFFALSE 63397
// begin tmp := 0 ;
63298: LD_ADDR_VAR 0 3
63302: PUSH
63303: LD_STRING 0
63305: ST_TO_ADDR
// if result [ 1 ] then
63306: LD_VAR 0 2
63310: PUSH
63311: LD_INT 1
63313: ARRAY
63314: IFFALSE 63379
// if result [ 1 ] [ 1 ] = i then
63316: LD_VAR 0 2
63320: PUSH
63321: LD_INT 1
63323: ARRAY
63324: PUSH
63325: LD_INT 1
63327: ARRAY
63328: PUSH
63329: LD_VAR 0 8
63333: EQUAL
63334: IFFALSE 63379
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63336: LD_ADDR_VAR 0 2
63340: PUSH
63341: LD_VAR 0 2
63345: PPUSH
63346: LD_INT 1
63348: PPUSH
63349: LD_VAR 0 2
63353: PUSH
63354: LD_INT 1
63356: ARRAY
63357: PPUSH
63358: LD_INT 1
63360: PPUSH
63361: CALL_OW 3
63365: PPUSH
63366: CALL_OW 1
63370: ST_TO_ADDR
// tmp := 1 ;
63371: LD_ADDR_VAR 0 3
63375: PUSH
63376: LD_STRING 1
63378: ST_TO_ADDR
// end ; normal := normal & tmp ;
63379: LD_ADDR_VAR 0 5
63383: PUSH
63384: LD_VAR 0 5
63388: PUSH
63389: LD_VAR 0 3
63393: STR
63394: ST_TO_ADDR
// end ;
63395: GO 63295
63397: POP
63398: POP
// for i = 1 to hardcoreCounter do
63399: LD_ADDR_VAR 0 8
63403: PUSH
63404: DOUBLE
63405: LD_INT 1
63407: DEC
63408: ST_TO_ADDR
63409: LD_EXP 48
63413: PUSH
63414: FOR_TO
63415: IFFALSE 63520
// begin tmp := 0 ;
63417: LD_ADDR_VAR 0 3
63421: PUSH
63422: LD_STRING 0
63424: ST_TO_ADDR
// if result [ 2 ] then
63425: LD_VAR 0 2
63429: PUSH
63430: LD_INT 2
63432: ARRAY
63433: IFFALSE 63502
// if result [ 2 ] [ 1 ] = 100 + i then
63435: LD_VAR 0 2
63439: PUSH
63440: LD_INT 2
63442: ARRAY
63443: PUSH
63444: LD_INT 1
63446: ARRAY
63447: PUSH
63448: LD_INT 100
63450: PUSH
63451: LD_VAR 0 8
63455: PLUS
63456: EQUAL
63457: IFFALSE 63502
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63459: LD_ADDR_VAR 0 2
63463: PUSH
63464: LD_VAR 0 2
63468: PPUSH
63469: LD_INT 2
63471: PPUSH
63472: LD_VAR 0 2
63476: PUSH
63477: LD_INT 2
63479: ARRAY
63480: PPUSH
63481: LD_INT 1
63483: PPUSH
63484: CALL_OW 3
63488: PPUSH
63489: CALL_OW 1
63493: ST_TO_ADDR
// tmp := 1 ;
63494: LD_ADDR_VAR 0 3
63498: PUSH
63499: LD_STRING 1
63501: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63502: LD_ADDR_VAR 0 6
63506: PUSH
63507: LD_VAR 0 6
63511: PUSH
63512: LD_VAR 0 3
63516: STR
63517: ST_TO_ADDR
// end ;
63518: GO 63414
63520: POP
63521: POP
// if isGameLoad then
63522: LD_VAR 0 1
63526: IFFALSE 64001
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63528: LD_ADDR_VAR 0 4
63532: PUSH
63533: LD_EXP 51
63537: PUSH
63538: LD_EXP 50
63542: PUSH
63543: LD_EXP 52
63547: PUSH
63548: LD_EXP 49
63552: PUSH
63553: LD_EXP 53
63557: PUSH
63558: LD_EXP 54
63562: PUSH
63563: LD_EXP 55
63567: PUSH
63568: LD_EXP 56
63572: PUSH
63573: LD_EXP 57
63577: PUSH
63578: LD_EXP 58
63582: PUSH
63583: LD_EXP 59
63587: PUSH
63588: LD_EXP 60
63592: PUSH
63593: LD_EXP 61
63597: PUSH
63598: LD_EXP 62
63602: PUSH
63603: LD_EXP 70
63607: PUSH
63608: LD_EXP 71
63612: PUSH
63613: LD_EXP 72
63617: PUSH
63618: LD_EXP 73
63622: PUSH
63623: LD_EXP 75
63627: PUSH
63628: LD_EXP 76
63632: PUSH
63633: LD_EXP 77
63637: PUSH
63638: LD_EXP 80
63642: PUSH
63643: LD_EXP 82
63647: PUSH
63648: LD_EXP 83
63652: PUSH
63653: LD_EXP 84
63657: PUSH
63658: LD_EXP 86
63662: PUSH
63663: LD_EXP 87
63667: PUSH
63668: LD_EXP 90
63672: PUSH
63673: LD_EXP 91
63677: PUSH
63678: LD_EXP 92
63682: PUSH
63683: LD_EXP 93
63687: PUSH
63688: LD_EXP 94
63692: PUSH
63693: LD_EXP 95
63697: PUSH
63698: LD_EXP 96
63702: PUSH
63703: LD_EXP 97
63707: PUSH
63708: LD_EXP 98
63712: PUSH
63713: LD_EXP 63
63717: PUSH
63718: LD_EXP 64
63722: PUSH
63723: LD_EXP 67
63727: PUSH
63728: LD_EXP 68
63732: PUSH
63733: LD_EXP 69
63737: PUSH
63738: LD_EXP 65
63742: PUSH
63743: LD_EXP 66
63747: PUSH
63748: LD_EXP 74
63752: PUSH
63753: LD_EXP 78
63757: PUSH
63758: LD_EXP 79
63762: PUSH
63763: LD_EXP 81
63767: PUSH
63768: LD_EXP 85
63772: PUSH
63773: LD_EXP 88
63777: PUSH
63778: LD_EXP 89
63782: PUSH
63783: LD_EXP 99
63787: PUSH
63788: LD_EXP 100
63792: PUSH
63793: LD_EXP 101
63797: PUSH
63798: LD_EXP 102
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// tmp :=  ;
63859: LD_ADDR_VAR 0 3
63863: PUSH
63864: LD_STRING 
63866: ST_TO_ADDR
// for i = 1 to normalCounter do
63867: LD_ADDR_VAR 0 8
63871: PUSH
63872: DOUBLE
63873: LD_INT 1
63875: DEC
63876: ST_TO_ADDR
63877: LD_EXP 47
63881: PUSH
63882: FOR_TO
63883: IFFALSE 63919
// begin if flags [ i ] then
63885: LD_VAR 0 4
63889: PUSH
63890: LD_VAR 0 8
63894: ARRAY
63895: IFFALSE 63917
// tmp := tmp & i & ; ;
63897: LD_ADDR_VAR 0 3
63901: PUSH
63902: LD_VAR 0 3
63906: PUSH
63907: LD_VAR 0 8
63911: STR
63912: PUSH
63913: LD_STRING ;
63915: STR
63916: ST_TO_ADDR
// end ;
63917: GO 63882
63919: POP
63920: POP
// for i = 1 to hardcoreCounter do
63921: LD_ADDR_VAR 0 8
63925: PUSH
63926: DOUBLE
63927: LD_INT 1
63929: DEC
63930: ST_TO_ADDR
63931: LD_EXP 48
63935: PUSH
63936: FOR_TO
63937: IFFALSE 63983
// begin if flags [ normalCounter + i ] then
63939: LD_VAR 0 4
63943: PUSH
63944: LD_EXP 47
63948: PUSH
63949: LD_VAR 0 8
63953: PLUS
63954: ARRAY
63955: IFFALSE 63981
// tmp := tmp & ( 100 + i ) & ; ;
63957: LD_ADDR_VAR 0 3
63961: PUSH
63962: LD_VAR 0 3
63966: PUSH
63967: LD_INT 100
63969: PUSH
63970: LD_VAR 0 8
63974: PLUS
63975: STR
63976: PUSH
63977: LD_STRING ;
63979: STR
63980: ST_TO_ADDR
// end ;
63981: GO 63936
63983: POP
63984: POP
// if tmp then
63985: LD_VAR 0 3
63989: IFFALSE 64001
// active := tmp ;
63991: LD_ADDR_VAR 0 7
63995: PUSH
63996: LD_VAR 0 3
64000: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
64001: LD_STRING getStreamItemsFromMission("
64003: PUSH
64004: LD_VAR 0 5
64008: STR
64009: PUSH
64010: LD_STRING ","
64012: STR
64013: PUSH
64014: LD_VAR 0 6
64018: STR
64019: PUSH
64020: LD_STRING ","
64022: STR
64023: PUSH
64024: LD_VAR 0 7
64028: STR
64029: PUSH
64030: LD_STRING ")
64032: STR
64033: PPUSH
64034: CALL_OW 559
// end else
64038: GO 64047
// ToLua ( getStreamItemsFromMission("","","") ) ;
64040: LD_STRING getStreamItemsFromMission("","","")
64042: PPUSH
64043: CALL_OW 559
// end ;
64047: LD_VAR 0 2
64051: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
64052: LD_EXP 46
64056: PUSH
64057: LD_EXP 51
64061: AND
64062: IFFALSE 64186
64064: GO 64066
64066: DISABLE
64067: LD_INT 0
64069: PPUSH
64070: PPUSH
// begin enable ;
64071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
64072: LD_ADDR_VAR 0 2
64076: PUSH
64077: LD_INT 22
64079: PUSH
64080: LD_OWVAR 2
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: LD_INT 34
64094: PUSH
64095: LD_INT 7
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 34
64104: PUSH
64105: LD_INT 45
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 34
64114: PUSH
64115: LD_INT 28
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 34
64124: PUSH
64125: LD_INT 47
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PPUSH
64143: CALL_OW 69
64147: ST_TO_ADDR
// if not tmp then
64148: LD_VAR 0 2
64152: NOT
64153: IFFALSE 64157
// exit ;
64155: GO 64186
// for i in tmp do
64157: LD_ADDR_VAR 0 1
64161: PUSH
64162: LD_VAR 0 2
64166: PUSH
64167: FOR_IN
64168: IFFALSE 64184
// begin SetLives ( i , 0 ) ;
64170: LD_VAR 0 1
64174: PPUSH
64175: LD_INT 0
64177: PPUSH
64178: CALL_OW 234
// end ;
64182: GO 64167
64184: POP
64185: POP
// end ;
64186: PPOPN 2
64188: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64189: LD_EXP 46
64193: PUSH
64194: LD_EXP 52
64198: AND
64199: IFFALSE 64283
64201: GO 64203
64203: DISABLE
64204: LD_INT 0
64206: PPUSH
64207: PPUSH
// begin enable ;
64208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64209: LD_ADDR_VAR 0 2
64213: PUSH
64214: LD_INT 22
64216: PUSH
64217: LD_OWVAR 2
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 32
64228: PUSH
64229: LD_INT 3
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PPUSH
64240: CALL_OW 69
64244: ST_TO_ADDR
// if not tmp then
64245: LD_VAR 0 2
64249: NOT
64250: IFFALSE 64254
// exit ;
64252: GO 64283
// for i in tmp do
64254: LD_ADDR_VAR 0 1
64258: PUSH
64259: LD_VAR 0 2
64263: PUSH
64264: FOR_IN
64265: IFFALSE 64281
// begin SetLives ( i , 0 ) ;
64267: LD_VAR 0 1
64271: PPUSH
64272: LD_INT 0
64274: PPUSH
64275: CALL_OW 234
// end ;
64279: GO 64264
64281: POP
64282: POP
// end ;
64283: PPOPN 2
64285: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64286: LD_EXP 46
64290: PUSH
64291: LD_EXP 49
64295: AND
64296: IFFALSE 64389
64298: GO 64300
64300: DISABLE
64301: LD_INT 0
64303: PPUSH
// begin enable ;
64304: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64305: LD_ADDR_VAR 0 1
64309: PUSH
64310: LD_INT 22
64312: PUSH
64313: LD_OWVAR 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 25
64327: PUSH
64328: LD_INT 5
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 25
64337: PUSH
64338: LD_INT 9
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 25
64347: PUSH
64348: LD_INT 8
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PPUSH
64365: CALL_OW 69
64369: PUSH
64370: FOR_IN
64371: IFFALSE 64387
// begin SetClass ( i , 1 ) ;
64373: LD_VAR 0 1
64377: PPUSH
64378: LD_INT 1
64380: PPUSH
64381: CALL_OW 336
// end ;
64385: GO 64370
64387: POP
64388: POP
// end ;
64389: PPOPN 1
64391: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64392: LD_EXP 46
64396: PUSH
64397: LD_EXP 50
64401: AND
64402: PUSH
64403: LD_OWVAR 65
64407: PUSH
64408: LD_INT 7
64410: LESS
64411: AND
64412: IFFALSE 64426
64414: GO 64416
64416: DISABLE
// begin enable ;
64417: ENABLE
// game_speed := 7 ;
64418: LD_ADDR_OWVAR 65
64422: PUSH
64423: LD_INT 7
64425: ST_TO_ADDR
// end ;
64426: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64427: LD_EXP 46
64431: PUSH
64432: LD_EXP 53
64436: AND
64437: IFFALSE 64639
64439: GO 64441
64441: DISABLE
64442: LD_INT 0
64444: PPUSH
64445: PPUSH
64446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64447: LD_ADDR_VAR 0 3
64451: PUSH
64452: LD_INT 81
64454: PUSH
64455: LD_OWVAR 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 21
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 69
64482: ST_TO_ADDR
// if not tmp then
64483: LD_VAR 0 3
64487: NOT
64488: IFFALSE 64492
// exit ;
64490: GO 64639
// if tmp > 5 then
64492: LD_VAR 0 3
64496: PUSH
64497: LD_INT 5
64499: GREATER
64500: IFFALSE 64512
// k := 5 else
64502: LD_ADDR_VAR 0 2
64506: PUSH
64507: LD_INT 5
64509: ST_TO_ADDR
64510: GO 64522
// k := tmp ;
64512: LD_ADDR_VAR 0 2
64516: PUSH
64517: LD_VAR 0 3
64521: ST_TO_ADDR
// for i := 1 to k do
64522: LD_ADDR_VAR 0 1
64526: PUSH
64527: DOUBLE
64528: LD_INT 1
64530: DEC
64531: ST_TO_ADDR
64532: LD_VAR 0 2
64536: PUSH
64537: FOR_TO
64538: IFFALSE 64637
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64540: LD_VAR 0 3
64544: PUSH
64545: LD_VAR 0 1
64549: ARRAY
64550: PPUSH
64551: LD_VAR 0 1
64555: PUSH
64556: LD_INT 4
64558: MOD
64559: PUSH
64560: LD_INT 1
64562: PLUS
64563: PPUSH
64564: CALL_OW 259
64568: PUSH
64569: LD_INT 10
64571: LESS
64572: IFFALSE 64635
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64574: LD_VAR 0 3
64578: PUSH
64579: LD_VAR 0 1
64583: ARRAY
64584: PPUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 4
64592: MOD
64593: PUSH
64594: LD_INT 1
64596: PLUS
64597: PPUSH
64598: LD_VAR 0 3
64602: PUSH
64603: LD_VAR 0 1
64607: ARRAY
64608: PPUSH
64609: LD_VAR 0 1
64613: PUSH
64614: LD_INT 4
64616: MOD
64617: PUSH
64618: LD_INT 1
64620: PLUS
64621: PPUSH
64622: CALL_OW 259
64626: PUSH
64627: LD_INT 1
64629: PLUS
64630: PPUSH
64631: CALL_OW 237
64635: GO 64537
64637: POP
64638: POP
// end ;
64639: PPOPN 3
64641: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64642: LD_EXP 46
64646: PUSH
64647: LD_EXP 54
64651: AND
64652: IFFALSE 64672
64654: GO 64656
64656: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64657: LD_INT 4
64659: PPUSH
64660: LD_OWVAR 2
64664: PPUSH
64665: LD_INT 0
64667: PPUSH
64668: CALL_OW 324
64672: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64673: LD_EXP 46
64677: PUSH
64678: LD_EXP 83
64682: AND
64683: IFFALSE 64703
64685: GO 64687
64687: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64688: LD_INT 19
64690: PPUSH
64691: LD_OWVAR 2
64695: PPUSH
64696: LD_INT 0
64698: PPUSH
64699: CALL_OW 324
64703: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64704: LD_EXP 46
64708: PUSH
64709: LD_EXP 55
64713: AND
64714: IFFALSE 64816
64716: GO 64718
64718: DISABLE
64719: LD_INT 0
64721: PPUSH
64722: PPUSH
// begin enable ;
64723: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64724: LD_ADDR_VAR 0 2
64728: PUSH
64729: LD_INT 22
64731: PUSH
64732: LD_OWVAR 2
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: LD_INT 34
64746: PUSH
64747: LD_INT 11
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 34
64756: PUSH
64757: LD_INT 30
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: LIST
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PPUSH
64773: CALL_OW 69
64777: ST_TO_ADDR
// if not tmp then
64778: LD_VAR 0 2
64782: NOT
64783: IFFALSE 64787
// exit ;
64785: GO 64816
// for i in tmp do
64787: LD_ADDR_VAR 0 1
64791: PUSH
64792: LD_VAR 0 2
64796: PUSH
64797: FOR_IN
64798: IFFALSE 64814
// begin SetLives ( i , 0 ) ;
64800: LD_VAR 0 1
64804: PPUSH
64805: LD_INT 0
64807: PPUSH
64808: CALL_OW 234
// end ;
64812: GO 64797
64814: POP
64815: POP
// end ;
64816: PPOPN 2
64818: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64819: LD_EXP 46
64823: PUSH
64824: LD_EXP 56
64828: AND
64829: IFFALSE 64849
64831: GO 64833
64833: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64834: LD_INT 32
64836: PPUSH
64837: LD_OWVAR 2
64841: PPUSH
64842: LD_INT 0
64844: PPUSH
64845: CALL_OW 324
64849: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64850: LD_EXP 46
64854: PUSH
64855: LD_EXP 57
64859: AND
64860: IFFALSE 65041
64862: GO 64864
64864: DISABLE
64865: LD_INT 0
64867: PPUSH
64868: PPUSH
64869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64870: LD_ADDR_VAR 0 2
64874: PUSH
64875: LD_INT 22
64877: PUSH
64878: LD_OWVAR 2
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 33
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PPUSH
64901: CALL_OW 69
64905: ST_TO_ADDR
// if not tmp then
64906: LD_VAR 0 2
64910: NOT
64911: IFFALSE 64915
// exit ;
64913: GO 65041
// side := 0 ;
64915: LD_ADDR_VAR 0 3
64919: PUSH
64920: LD_INT 0
64922: ST_TO_ADDR
// for i := 1 to 8 do
64923: LD_ADDR_VAR 0 1
64927: PUSH
64928: DOUBLE
64929: LD_INT 1
64931: DEC
64932: ST_TO_ADDR
64933: LD_INT 8
64935: PUSH
64936: FOR_TO
64937: IFFALSE 64985
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64939: LD_OWVAR 2
64943: PUSH
64944: LD_VAR 0 1
64948: NONEQUAL
64949: PUSH
64950: LD_OWVAR 2
64954: PPUSH
64955: LD_VAR 0 1
64959: PPUSH
64960: CALL_OW 81
64964: PUSH
64965: LD_INT 2
64967: EQUAL
64968: AND
64969: IFFALSE 64983
// begin side := i ;
64971: LD_ADDR_VAR 0 3
64975: PUSH
64976: LD_VAR 0 1
64980: ST_TO_ADDR
// break ;
64981: GO 64985
// end ;
64983: GO 64936
64985: POP
64986: POP
// if not side then
64987: LD_VAR 0 3
64991: NOT
64992: IFFALSE 64996
// exit ;
64994: GO 65041
// for i := 1 to tmp do
64996: LD_ADDR_VAR 0 1
65000: PUSH
65001: DOUBLE
65002: LD_INT 1
65004: DEC
65005: ST_TO_ADDR
65006: LD_VAR 0 2
65010: PUSH
65011: FOR_TO
65012: IFFALSE 65039
// if Prob ( 60 ) then
65014: LD_INT 60
65016: PPUSH
65017: CALL_OW 13
65021: IFFALSE 65037
// SetSide ( i , side ) ;
65023: LD_VAR 0 1
65027: PPUSH
65028: LD_VAR 0 3
65032: PPUSH
65033: CALL_OW 235
65037: GO 65011
65039: POP
65040: POP
// end ;
65041: PPOPN 3
65043: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
65044: LD_EXP 46
65048: PUSH
65049: LD_EXP 59
65053: AND
65054: IFFALSE 65173
65056: GO 65058
65058: DISABLE
65059: LD_INT 0
65061: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
65062: LD_ADDR_VAR 0 1
65066: PUSH
65067: LD_INT 22
65069: PUSH
65070: LD_OWVAR 2
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 21
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 3
65091: PUSH
65092: LD_INT 23
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: LIST
65110: PPUSH
65111: CALL_OW 69
65115: PUSH
65116: FOR_IN
65117: IFFALSE 65171
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65119: LD_VAR 0 1
65123: PPUSH
65124: CALL_OW 257
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 4
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: IN
65147: IFFALSE 65169
// SetClass ( un , rand ( 1 , 4 ) ) ;
65149: LD_VAR 0 1
65153: PPUSH
65154: LD_INT 1
65156: PPUSH
65157: LD_INT 4
65159: PPUSH
65160: CALL_OW 12
65164: PPUSH
65165: CALL_OW 336
65169: GO 65116
65171: POP
65172: POP
// end ;
65173: PPOPN 1
65175: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65176: LD_EXP 46
65180: PUSH
65181: LD_EXP 58
65185: AND
65186: IFFALSE 65265
65188: GO 65190
65190: DISABLE
65191: LD_INT 0
65193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65194: LD_ADDR_VAR 0 1
65198: PUSH
65199: LD_INT 22
65201: PUSH
65202: LD_OWVAR 2
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 21
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PPUSH
65225: CALL_OW 69
65229: ST_TO_ADDR
// if not tmp then
65230: LD_VAR 0 1
65234: NOT
65235: IFFALSE 65239
// exit ;
65237: GO 65265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65239: LD_VAR 0 1
65243: PUSH
65244: LD_INT 1
65246: PPUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 12
65256: ARRAY
65257: PPUSH
65258: LD_INT 100
65260: PPUSH
65261: CALL_OW 234
// end ;
65265: PPOPN 1
65267: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65268: LD_EXP 46
65272: PUSH
65273: LD_EXP 60
65277: AND
65278: IFFALSE 65376
65280: GO 65282
65282: DISABLE
65283: LD_INT 0
65285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65286: LD_ADDR_VAR 0 1
65290: PUSH
65291: LD_INT 22
65293: PUSH
65294: LD_OWVAR 2
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 21
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PPUSH
65317: CALL_OW 69
65321: ST_TO_ADDR
// if not tmp then
65322: LD_VAR 0 1
65326: NOT
65327: IFFALSE 65331
// exit ;
65329: GO 65376
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65331: LD_VAR 0 1
65335: PUSH
65336: LD_INT 1
65338: PPUSH
65339: LD_VAR 0 1
65343: PPUSH
65344: CALL_OW 12
65348: ARRAY
65349: PPUSH
65350: LD_INT 1
65352: PPUSH
65353: LD_INT 4
65355: PPUSH
65356: CALL_OW 12
65360: PPUSH
65361: LD_INT 3000
65363: PPUSH
65364: LD_INT 9000
65366: PPUSH
65367: CALL_OW 12
65371: PPUSH
65372: CALL_OW 492
// end ;
65376: PPOPN 1
65378: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65379: LD_EXP 46
65383: PUSH
65384: LD_EXP 61
65388: AND
65389: IFFALSE 65409
65391: GO 65393
65393: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65394: LD_INT 1
65396: PPUSH
65397: LD_OWVAR 2
65401: PPUSH
65402: LD_INT 0
65404: PPUSH
65405: CALL_OW 324
65409: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65410: LD_EXP 46
65414: PUSH
65415: LD_EXP 62
65419: AND
65420: IFFALSE 65503
65422: GO 65424
65424: DISABLE
65425: LD_INT 0
65427: PPUSH
65428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65429: LD_ADDR_VAR 0 2
65433: PUSH
65434: LD_INT 22
65436: PUSH
65437: LD_OWVAR 2
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 21
65448: PUSH
65449: LD_INT 3
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PPUSH
65460: CALL_OW 69
65464: ST_TO_ADDR
// if not tmp then
65465: LD_VAR 0 2
65469: NOT
65470: IFFALSE 65474
// exit ;
65472: GO 65503
// for i in tmp do
65474: LD_ADDR_VAR 0 1
65478: PUSH
65479: LD_VAR 0 2
65483: PUSH
65484: FOR_IN
65485: IFFALSE 65501
// SetBLevel ( i , 10 ) ;
65487: LD_VAR 0 1
65491: PPUSH
65492: LD_INT 10
65494: PPUSH
65495: CALL_OW 241
65499: GO 65484
65501: POP
65502: POP
// end ;
65503: PPOPN 2
65505: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65506: LD_EXP 46
65510: PUSH
65511: LD_EXP 63
65515: AND
65516: IFFALSE 65627
65518: GO 65520
65520: DISABLE
65521: LD_INT 0
65523: PPUSH
65524: PPUSH
65525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65526: LD_ADDR_VAR 0 3
65530: PUSH
65531: LD_INT 22
65533: PUSH
65534: LD_OWVAR 2
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 25
65545: PUSH
65546: LD_INT 1
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PPUSH
65557: CALL_OW 69
65561: ST_TO_ADDR
// if not tmp then
65562: LD_VAR 0 3
65566: NOT
65567: IFFALSE 65571
// exit ;
65569: GO 65627
// un := tmp [ rand ( 1 , tmp ) ] ;
65571: LD_ADDR_VAR 0 2
65575: PUSH
65576: LD_VAR 0 3
65580: PUSH
65581: LD_INT 1
65583: PPUSH
65584: LD_VAR 0 3
65588: PPUSH
65589: CALL_OW 12
65593: ARRAY
65594: ST_TO_ADDR
// if Crawls ( un ) then
65595: LD_VAR 0 2
65599: PPUSH
65600: CALL_OW 318
65604: IFFALSE 65615
// ComWalk ( un ) ;
65606: LD_VAR 0 2
65610: PPUSH
65611: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65615: LD_VAR 0 2
65619: PPUSH
65620: LD_INT 5
65622: PPUSH
65623: CALL_OW 336
// end ;
65627: PPOPN 3
65629: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65630: LD_EXP 46
65634: PUSH
65635: LD_EXP 64
65639: AND
65640: PUSH
65641: LD_OWVAR 67
65645: PUSH
65646: LD_INT 4
65648: LESS
65649: AND
65650: IFFALSE 65669
65652: GO 65654
65654: DISABLE
// begin Difficulty := Difficulty + 1 ;
65655: LD_ADDR_OWVAR 67
65659: PUSH
65660: LD_OWVAR 67
65664: PUSH
65665: LD_INT 1
65667: PLUS
65668: ST_TO_ADDR
// end ;
65669: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65670: LD_EXP 46
65674: PUSH
65675: LD_EXP 65
65679: AND
65680: IFFALSE 65783
65682: GO 65684
65684: DISABLE
65685: LD_INT 0
65687: PPUSH
// begin for i := 1 to 5 do
65688: LD_ADDR_VAR 0 1
65692: PUSH
65693: DOUBLE
65694: LD_INT 1
65696: DEC
65697: ST_TO_ADDR
65698: LD_INT 5
65700: PUSH
65701: FOR_TO
65702: IFFALSE 65781
// begin uc_nation := nation_nature ;
65704: LD_ADDR_OWVAR 21
65708: PUSH
65709: LD_INT 0
65711: ST_TO_ADDR
// uc_side := 0 ;
65712: LD_ADDR_OWVAR 20
65716: PUSH
65717: LD_INT 0
65719: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65720: LD_ADDR_OWVAR 29
65724: PUSH
65725: LD_INT 12
65727: PUSH
65728: LD_INT 12
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// hc_agressivity := 20 ;
65735: LD_ADDR_OWVAR 35
65739: PUSH
65740: LD_INT 20
65742: ST_TO_ADDR
// hc_class := class_tiger ;
65743: LD_ADDR_OWVAR 28
65747: PUSH
65748: LD_INT 14
65750: ST_TO_ADDR
// hc_gallery :=  ;
65751: LD_ADDR_OWVAR 33
65755: PUSH
65756: LD_STRING 
65758: ST_TO_ADDR
// hc_name :=  ;
65759: LD_ADDR_OWVAR 26
65763: PUSH
65764: LD_STRING 
65766: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65767: CALL_OW 44
65771: PPUSH
65772: LD_INT 0
65774: PPUSH
65775: CALL_OW 51
// end ;
65779: GO 65701
65781: POP
65782: POP
// end ;
65783: PPOPN 1
65785: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65786: LD_EXP 46
65790: PUSH
65791: LD_EXP 66
65795: AND
65796: IFFALSE 65805
65798: GO 65800
65800: DISABLE
// StreamSibBomb ;
65801: CALL 65806 0 0
65805: END
// export function StreamSibBomb ; var i , x , y ; begin
65806: LD_INT 0
65808: PPUSH
65809: PPUSH
65810: PPUSH
65811: PPUSH
// result := false ;
65812: LD_ADDR_VAR 0 1
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
// for i := 1 to 16 do
65820: LD_ADDR_VAR 0 2
65824: PUSH
65825: DOUBLE
65826: LD_INT 1
65828: DEC
65829: ST_TO_ADDR
65830: LD_INT 16
65832: PUSH
65833: FOR_TO
65834: IFFALSE 66033
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65836: LD_ADDR_VAR 0 3
65840: PUSH
65841: LD_INT 10
65843: PUSH
65844: LD_INT 20
65846: PUSH
65847: LD_INT 30
65849: PUSH
65850: LD_INT 40
65852: PUSH
65853: LD_INT 50
65855: PUSH
65856: LD_INT 60
65858: PUSH
65859: LD_INT 70
65861: PUSH
65862: LD_INT 80
65864: PUSH
65865: LD_INT 90
65867: PUSH
65868: LD_INT 100
65870: PUSH
65871: LD_INT 110
65873: PUSH
65874: LD_INT 120
65876: PUSH
65877: LD_INT 130
65879: PUSH
65880: LD_INT 140
65882: PUSH
65883: LD_INT 150
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 1
65905: PPUSH
65906: LD_INT 15
65908: PPUSH
65909: CALL_OW 12
65913: ARRAY
65914: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65915: LD_ADDR_VAR 0 4
65919: PUSH
65920: LD_INT 10
65922: PUSH
65923: LD_INT 20
65925: PUSH
65926: LD_INT 30
65928: PUSH
65929: LD_INT 40
65931: PUSH
65932: LD_INT 50
65934: PUSH
65935: LD_INT 60
65937: PUSH
65938: LD_INT 70
65940: PUSH
65941: LD_INT 80
65943: PUSH
65944: LD_INT 90
65946: PUSH
65947: LD_INT 100
65949: PUSH
65950: LD_INT 110
65952: PUSH
65953: LD_INT 120
65955: PUSH
65956: LD_INT 130
65958: PUSH
65959: LD_INT 140
65961: PUSH
65962: LD_INT 150
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: PPUSH
65985: LD_INT 15
65987: PPUSH
65988: CALL_OW 12
65992: ARRAY
65993: ST_TO_ADDR
// if ValidHex ( x , y ) then
65994: LD_VAR 0 3
65998: PPUSH
65999: LD_VAR 0 4
66003: PPUSH
66004: CALL_OW 488
66008: IFFALSE 66031
// begin result := [ x , y ] ;
66010: LD_ADDR_VAR 0 1
66014: PUSH
66015: LD_VAR 0 3
66019: PUSH
66020: LD_VAR 0 4
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: ST_TO_ADDR
// break ;
66029: GO 66033
// end ; end ;
66031: GO 65833
66033: POP
66034: POP
// if result then
66035: LD_VAR 0 1
66039: IFFALSE 66099
// begin ToLua ( playSibBomb() ) ;
66041: LD_STRING playSibBomb()
66043: PPUSH
66044: CALL_OW 559
// wait ( 0 0$14 ) ;
66048: LD_INT 490
66050: PPUSH
66051: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
66055: LD_VAR 0 1
66059: PUSH
66060: LD_INT 1
66062: ARRAY
66063: PPUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 2
66071: ARRAY
66072: PPUSH
66073: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
66077: LD_VAR 0 1
66081: PUSH
66082: LD_INT 1
66084: ARRAY
66085: PPUSH
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 2
66093: ARRAY
66094: PPUSH
66095: CALL_OW 429
// end ; end ;
66099: LD_VAR 0 1
66103: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66104: LD_EXP 46
66108: PUSH
66109: LD_EXP 68
66113: AND
66114: IFFALSE 66126
66116: GO 66118
66118: DISABLE
// YouLost (  ) ;
66119: LD_STRING 
66121: PPUSH
66122: CALL_OW 104
66126: END
// every 0 0$1 trigger StreamModeActive and sFog do
66127: LD_EXP 46
66131: PUSH
66132: LD_EXP 67
66136: AND
66137: IFFALSE 66151
66139: GO 66141
66141: DISABLE
// FogOff ( your_side ) ;
66142: LD_OWVAR 2
66146: PPUSH
66147: CALL_OW 344
66151: END
// every 0 0$1 trigger StreamModeActive and sSun do
66152: LD_EXP 46
66156: PUSH
66157: LD_EXP 69
66161: AND
66162: IFFALSE 66190
66164: GO 66166
66166: DISABLE
// begin solar_recharge_percent := 0 ;
66167: LD_ADDR_OWVAR 79
66171: PUSH
66172: LD_INT 0
66174: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66175: LD_INT 10500
66177: PPUSH
66178: CALL_OW 67
// solar_recharge_percent := 100 ;
66182: LD_ADDR_OWVAR 79
66186: PUSH
66187: LD_INT 100
66189: ST_TO_ADDR
// end ;
66190: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66191: LD_EXP 46
66195: PUSH
66196: LD_EXP 70
66200: AND
66201: IFFALSE 66440
66203: GO 66205
66205: DISABLE
66206: LD_INT 0
66208: PPUSH
66209: PPUSH
66210: PPUSH
// begin tmp := [ ] ;
66211: LD_ADDR_VAR 0 3
66215: PUSH
66216: EMPTY
66217: ST_TO_ADDR
// for i := 1 to 6 do
66218: LD_ADDR_VAR 0 1
66222: PUSH
66223: DOUBLE
66224: LD_INT 1
66226: DEC
66227: ST_TO_ADDR
66228: LD_INT 6
66230: PUSH
66231: FOR_TO
66232: IFFALSE 66337
// begin uc_nation := nation_nature ;
66234: LD_ADDR_OWVAR 21
66238: PUSH
66239: LD_INT 0
66241: ST_TO_ADDR
// uc_side := 0 ;
66242: LD_ADDR_OWVAR 20
66246: PUSH
66247: LD_INT 0
66249: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66250: LD_ADDR_OWVAR 29
66254: PUSH
66255: LD_INT 12
66257: PUSH
66258: LD_INT 12
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: ST_TO_ADDR
// hc_agressivity := 20 ;
66265: LD_ADDR_OWVAR 35
66269: PUSH
66270: LD_INT 20
66272: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66273: LD_ADDR_OWVAR 28
66277: PUSH
66278: LD_INT 17
66280: ST_TO_ADDR
// hc_gallery :=  ;
66281: LD_ADDR_OWVAR 33
66285: PUSH
66286: LD_STRING 
66288: ST_TO_ADDR
// hc_name :=  ;
66289: LD_ADDR_OWVAR 26
66293: PUSH
66294: LD_STRING 
66296: ST_TO_ADDR
// un := CreateHuman ;
66297: LD_ADDR_VAR 0 2
66301: PUSH
66302: CALL_OW 44
66306: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66307: LD_VAR 0 2
66311: PPUSH
66312: LD_INT 1
66314: PPUSH
66315: CALL_OW 51
// tmp := tmp ^ un ;
66319: LD_ADDR_VAR 0 3
66323: PUSH
66324: LD_VAR 0 3
66328: PUSH
66329: LD_VAR 0 2
66333: ADD
66334: ST_TO_ADDR
// end ;
66335: GO 66231
66337: POP
66338: POP
// repeat wait ( 0 0$1 ) ;
66339: LD_INT 35
66341: PPUSH
66342: CALL_OW 67
// for un in tmp do
66346: LD_ADDR_VAR 0 2
66350: PUSH
66351: LD_VAR 0 3
66355: PUSH
66356: FOR_IN
66357: IFFALSE 66431
// begin if IsDead ( un ) then
66359: LD_VAR 0 2
66363: PPUSH
66364: CALL_OW 301
66368: IFFALSE 66388
// begin tmp := tmp diff un ;
66370: LD_ADDR_VAR 0 3
66374: PUSH
66375: LD_VAR 0 3
66379: PUSH
66380: LD_VAR 0 2
66384: DIFF
66385: ST_TO_ADDR
// continue ;
66386: GO 66356
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66388: LD_VAR 0 2
66392: PPUSH
66393: LD_INT 3
66395: PUSH
66396: LD_INT 22
66398: PUSH
66399: LD_INT 0
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PPUSH
66410: CALL_OW 69
66414: PPUSH
66415: LD_VAR 0 2
66419: PPUSH
66420: CALL_OW 74
66424: PPUSH
66425: CALL_OW 115
// end ;
66429: GO 66356
66431: POP
66432: POP
// until not tmp ;
66433: LD_VAR 0 3
66437: NOT
66438: IFFALSE 66339
// end ;
66440: PPOPN 3
66442: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66443: LD_EXP 46
66447: PUSH
66448: LD_EXP 71
66452: AND
66453: IFFALSE 66507
66455: GO 66457
66457: DISABLE
// begin ToLua ( displayTroll(); ) ;
66458: LD_STRING displayTroll();
66460: PPUSH
66461: CALL_OW 559
// wait ( 3 3$00 ) ;
66465: LD_INT 6300
66467: PPUSH
66468: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66472: LD_STRING hideTroll();
66474: PPUSH
66475: CALL_OW 559
// wait ( 1 1$00 ) ;
66479: LD_INT 2100
66481: PPUSH
66482: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66486: LD_STRING displayTroll();
66488: PPUSH
66489: CALL_OW 559
// wait ( 1 1$00 ) ;
66493: LD_INT 2100
66495: PPUSH
66496: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66500: LD_STRING hideTroll();
66502: PPUSH
66503: CALL_OW 559
// end ;
66507: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66508: LD_EXP 46
66512: PUSH
66513: LD_EXP 72
66517: AND
66518: IFFALSE 66581
66520: GO 66522
66522: DISABLE
66523: LD_INT 0
66525: PPUSH
// begin p := 0 ;
66526: LD_ADDR_VAR 0 1
66530: PUSH
66531: LD_INT 0
66533: ST_TO_ADDR
// repeat game_speed := 1 ;
66534: LD_ADDR_OWVAR 65
66538: PUSH
66539: LD_INT 1
66541: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66542: LD_INT 35
66544: PPUSH
66545: CALL_OW 67
// p := p + 1 ;
66549: LD_ADDR_VAR 0 1
66553: PUSH
66554: LD_VAR 0 1
66558: PUSH
66559: LD_INT 1
66561: PLUS
66562: ST_TO_ADDR
// until p >= 60 ;
66563: LD_VAR 0 1
66567: PUSH
66568: LD_INT 60
66570: GREATEREQUAL
66571: IFFALSE 66534
// game_speed := 4 ;
66573: LD_ADDR_OWVAR 65
66577: PUSH
66578: LD_INT 4
66580: ST_TO_ADDR
// end ;
66581: PPOPN 1
66583: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66584: LD_EXP 46
66588: PUSH
66589: LD_EXP 73
66593: AND
66594: IFFALSE 66740
66596: GO 66598
66598: DISABLE
66599: LD_INT 0
66601: PPUSH
66602: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66603: LD_ADDR_VAR 0 1
66607: PUSH
66608: LD_INT 22
66610: PUSH
66611: LD_OWVAR 2
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: LD_INT 30
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 30
66635: PUSH
66636: LD_INT 1
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PPUSH
66652: CALL_OW 69
66656: ST_TO_ADDR
// if not depot then
66657: LD_VAR 0 1
66661: NOT
66662: IFFALSE 66666
// exit ;
66664: GO 66740
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66666: LD_ADDR_VAR 0 2
66670: PUSH
66671: LD_VAR 0 1
66675: PUSH
66676: LD_INT 1
66678: PPUSH
66679: LD_VAR 0 1
66683: PPUSH
66684: CALL_OW 12
66688: ARRAY
66689: PPUSH
66690: CALL_OW 274
66694: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66695: LD_VAR 0 2
66699: PPUSH
66700: LD_INT 1
66702: PPUSH
66703: LD_INT 0
66705: PPUSH
66706: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66710: LD_VAR 0 2
66714: PPUSH
66715: LD_INT 2
66717: PPUSH
66718: LD_INT 0
66720: PPUSH
66721: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66725: LD_VAR 0 2
66729: PPUSH
66730: LD_INT 3
66732: PPUSH
66733: LD_INT 0
66735: PPUSH
66736: CALL_OW 277
// end ;
66740: PPOPN 2
66742: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66743: LD_EXP 46
66747: PUSH
66748: LD_EXP 74
66752: AND
66753: IFFALSE 66850
66755: GO 66757
66757: DISABLE
66758: LD_INT 0
66760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66761: LD_ADDR_VAR 0 1
66765: PUSH
66766: LD_INT 22
66768: PUSH
66769: LD_OWVAR 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 21
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 3
66790: PUSH
66791: LD_INT 23
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: LIST
66809: PPUSH
66810: CALL_OW 69
66814: ST_TO_ADDR
// if not tmp then
66815: LD_VAR 0 1
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 1
66831: PPUSH
66832: LD_VAR 0 1
66836: PPUSH
66837: CALL_OW 12
66841: ARRAY
66842: PPUSH
66843: LD_INT 200
66845: PPUSH
66846: CALL_OW 234
// end ;
66850: PPOPN 1
66852: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66853: LD_EXP 46
66857: PUSH
66858: LD_EXP 75
66862: AND
66863: IFFALSE 66942
66865: GO 66867
66867: DISABLE
66868: LD_INT 0
66870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66871: LD_ADDR_VAR 0 1
66875: PUSH
66876: LD_INT 22
66878: PUSH
66879: LD_OWVAR 2
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 21
66890: PUSH
66891: LD_INT 2
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PPUSH
66902: CALL_OW 69
66906: ST_TO_ADDR
// if not tmp then
66907: LD_VAR 0 1
66911: NOT
66912: IFFALSE 66916
// exit ;
66914: GO 66942
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66916: LD_VAR 0 1
66920: PUSH
66921: LD_INT 1
66923: PPUSH
66924: LD_VAR 0 1
66928: PPUSH
66929: CALL_OW 12
66933: ARRAY
66934: PPUSH
66935: LD_INT 60
66937: PPUSH
66938: CALL_OW 234
// end ;
66942: PPOPN 1
66944: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66945: LD_EXP 46
66949: PUSH
66950: LD_EXP 76
66954: AND
66955: IFFALSE 67054
66957: GO 66959
66959: DISABLE
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
// begin enable ;
66964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66965: LD_ADDR_VAR 0 1
66969: PUSH
66970: LD_INT 22
66972: PUSH
66973: LD_OWVAR 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 61
66984: PUSH
66985: EMPTY
66986: LIST
66987: PUSH
66988: LD_INT 33
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: LIST
67002: PPUSH
67003: CALL_OW 69
67007: ST_TO_ADDR
// if not tmp then
67008: LD_VAR 0 1
67012: NOT
67013: IFFALSE 67017
// exit ;
67015: GO 67054
// for i in tmp do
67017: LD_ADDR_VAR 0 2
67021: PUSH
67022: LD_VAR 0 1
67026: PUSH
67027: FOR_IN
67028: IFFALSE 67052
// if IsControledBy ( i ) then
67030: LD_VAR 0 2
67034: PPUSH
67035: CALL_OW 312
67039: IFFALSE 67050
// ComUnlink ( i ) ;
67041: LD_VAR 0 2
67045: PPUSH
67046: CALL_OW 136
67050: GO 67027
67052: POP
67053: POP
// end ;
67054: PPOPN 2
67056: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
67057: LD_EXP 46
67061: PUSH
67062: LD_EXP 77
67066: AND
67067: IFFALSE 67207
67069: GO 67071
67071: DISABLE
67072: LD_INT 0
67074: PPUSH
67075: PPUSH
// begin ToLua ( displayPowell(); ) ;
67076: LD_STRING displayPowell();
67078: PPUSH
67079: CALL_OW 559
// uc_side := 0 ;
67083: LD_ADDR_OWVAR 20
67087: PUSH
67088: LD_INT 0
67090: ST_TO_ADDR
// uc_nation := 2 ;
67091: LD_ADDR_OWVAR 21
67095: PUSH
67096: LD_INT 2
67098: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67099: LD_ADDR_OWVAR 37
67103: PUSH
67104: LD_INT 14
67106: ST_TO_ADDR
// vc_engine := engine_siberite ;
67107: LD_ADDR_OWVAR 39
67111: PUSH
67112: LD_INT 3
67114: ST_TO_ADDR
// vc_control := control_apeman ;
67115: LD_ADDR_OWVAR 38
67119: PUSH
67120: LD_INT 5
67122: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67123: LD_ADDR_OWVAR 40
67127: PUSH
67128: LD_INT 29
67130: ST_TO_ADDR
// un := CreateVehicle ;
67131: LD_ADDR_VAR 0 2
67135: PUSH
67136: CALL_OW 45
67140: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67141: LD_VAR 0 2
67145: PPUSH
67146: LD_INT 1
67148: PPUSH
67149: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67153: LD_INT 35
67155: PPUSH
67156: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67160: LD_VAR 0 2
67164: PPUSH
67165: LD_INT 22
67167: PUSH
67168: LD_OWVAR 2
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PPUSH
67177: CALL_OW 69
67181: PPUSH
67182: LD_VAR 0 2
67186: PPUSH
67187: CALL_OW 74
67191: PPUSH
67192: CALL_OW 115
// until IsDead ( un ) ;
67196: LD_VAR 0 2
67200: PPUSH
67201: CALL_OW 301
67205: IFFALSE 67153
// end ;
67207: PPOPN 2
67209: END
// every 0 0$1 trigger StreamModeActive and sStu do
67210: LD_EXP 46
67214: PUSH
67215: LD_EXP 85
67219: AND
67220: IFFALSE 67236
67222: GO 67224
67224: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67225: LD_STRING displayStucuk();
67227: PPUSH
67228: CALL_OW 559
// ResetFog ;
67232: CALL_OW 335
// end ;
67236: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67237: LD_EXP 46
67241: PUSH
67242: LD_EXP 78
67246: AND
67247: IFFALSE 67388
67249: GO 67251
67251: DISABLE
67252: LD_INT 0
67254: PPUSH
67255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67256: LD_ADDR_VAR 0 2
67260: PUSH
67261: LD_INT 22
67263: PUSH
67264: LD_OWVAR 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 21
67275: PUSH
67276: LD_INT 1
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PPUSH
67287: CALL_OW 69
67291: ST_TO_ADDR
// if not tmp then
67292: LD_VAR 0 2
67296: NOT
67297: IFFALSE 67301
// exit ;
67299: GO 67388
// un := tmp [ rand ( 1 , tmp ) ] ;
67301: LD_ADDR_VAR 0 1
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 1
67313: PPUSH
67314: LD_VAR 0 2
67318: PPUSH
67319: CALL_OW 12
67323: ARRAY
67324: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_INT 0
67332: PPUSH
67333: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67337: LD_VAR 0 1
67341: PPUSH
67342: LD_OWVAR 3
67346: PUSH
67347: LD_VAR 0 1
67351: DIFF
67352: PPUSH
67353: LD_VAR 0 1
67357: PPUSH
67358: CALL_OW 74
67362: PPUSH
67363: CALL_OW 115
// wait ( 0 0$20 ) ;
67367: LD_INT 700
67369: PPUSH
67370: CALL_OW 67
// SetSide ( un , your_side ) ;
67374: LD_VAR 0 1
67378: PPUSH
67379: LD_OWVAR 2
67383: PPUSH
67384: CALL_OW 235
// end ;
67388: PPOPN 2
67390: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67391: LD_EXP 46
67395: PUSH
67396: LD_EXP 79
67400: AND
67401: IFFALSE 67507
67403: GO 67405
67405: DISABLE
67406: LD_INT 0
67408: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67409: LD_ADDR_VAR 0 1
67413: PUSH
67414: LD_INT 22
67416: PUSH
67417: LD_OWVAR 2
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 30
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 30
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PPUSH
67458: CALL_OW 69
67462: ST_TO_ADDR
// if not depot then
67463: LD_VAR 0 1
67467: NOT
67468: IFFALSE 67472
// exit ;
67470: GO 67507
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67472: LD_VAR 0 1
67476: PUSH
67477: LD_INT 1
67479: ARRAY
67480: PPUSH
67481: CALL_OW 250
67485: PPUSH
67486: LD_VAR 0 1
67490: PUSH
67491: LD_INT 1
67493: ARRAY
67494: PPUSH
67495: CALL_OW 251
67499: PPUSH
67500: LD_INT 70
67502: PPUSH
67503: CALL_OW 495
// end ;
67507: PPOPN 1
67509: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67510: LD_EXP 46
67514: PUSH
67515: LD_EXP 80
67519: AND
67520: IFFALSE 67731
67522: GO 67524
67524: DISABLE
67525: LD_INT 0
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
67531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67532: LD_ADDR_VAR 0 5
67536: PUSH
67537: LD_INT 22
67539: PUSH
67540: LD_OWVAR 2
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 21
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PPUSH
67563: CALL_OW 69
67567: ST_TO_ADDR
// if not tmp then
67568: LD_VAR 0 5
67572: NOT
67573: IFFALSE 67577
// exit ;
67575: GO 67731
// for i in tmp do
67577: LD_ADDR_VAR 0 1
67581: PUSH
67582: LD_VAR 0 5
67586: PUSH
67587: FOR_IN
67588: IFFALSE 67729
// begin d := rand ( 0 , 5 ) ;
67590: LD_ADDR_VAR 0 4
67594: PUSH
67595: LD_INT 0
67597: PPUSH
67598: LD_INT 5
67600: PPUSH
67601: CALL_OW 12
67605: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67606: LD_ADDR_VAR 0 2
67610: PUSH
67611: LD_VAR 0 1
67615: PPUSH
67616: CALL_OW 250
67620: PPUSH
67621: LD_VAR 0 4
67625: PPUSH
67626: LD_INT 3
67628: PPUSH
67629: LD_INT 12
67631: PPUSH
67632: CALL_OW 12
67636: PPUSH
67637: CALL_OW 272
67641: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67642: LD_ADDR_VAR 0 3
67646: PUSH
67647: LD_VAR 0 1
67651: PPUSH
67652: CALL_OW 251
67656: PPUSH
67657: LD_VAR 0 4
67661: PPUSH
67662: LD_INT 3
67664: PPUSH
67665: LD_INT 12
67667: PPUSH
67668: CALL_OW 12
67672: PPUSH
67673: CALL_OW 273
67677: ST_TO_ADDR
// if ValidHex ( x , y ) then
67678: LD_VAR 0 2
67682: PPUSH
67683: LD_VAR 0 3
67687: PPUSH
67688: CALL_OW 488
67692: IFFALSE 67727
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67694: LD_VAR 0 1
67698: PPUSH
67699: LD_VAR 0 2
67703: PPUSH
67704: LD_VAR 0 3
67708: PPUSH
67709: LD_INT 3
67711: PPUSH
67712: LD_INT 6
67714: PPUSH
67715: CALL_OW 12
67719: PPUSH
67720: LD_INT 1
67722: PPUSH
67723: CALL_OW 483
// end ;
67727: GO 67587
67729: POP
67730: POP
// end ;
67731: PPOPN 5
67733: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67734: LD_EXP 46
67738: PUSH
67739: LD_EXP 81
67743: AND
67744: IFFALSE 67838
67746: GO 67748
67748: DISABLE
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67753: LD_ADDR_VAR 0 2
67757: PUSH
67758: LD_INT 22
67760: PUSH
67761: LD_OWVAR 2
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 32
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 21
67782: PUSH
67783: LD_INT 2
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: PPUSH
67795: CALL_OW 69
67799: ST_TO_ADDR
// if not tmp then
67800: LD_VAR 0 2
67804: NOT
67805: IFFALSE 67809
// exit ;
67807: GO 67838
// for i in tmp do
67809: LD_ADDR_VAR 0 1
67813: PUSH
67814: LD_VAR 0 2
67818: PUSH
67819: FOR_IN
67820: IFFALSE 67836
// SetFuel ( i , 0 ) ;
67822: LD_VAR 0 1
67826: PPUSH
67827: LD_INT 0
67829: PPUSH
67830: CALL_OW 240
67834: GO 67819
67836: POP
67837: POP
// end ;
67838: PPOPN 2
67840: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67841: LD_EXP 46
67845: PUSH
67846: LD_EXP 82
67850: AND
67851: IFFALSE 67917
67853: GO 67855
67855: DISABLE
67856: LD_INT 0
67858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67859: LD_ADDR_VAR 0 1
67863: PUSH
67864: LD_INT 22
67866: PUSH
67867: LD_OWVAR 2
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 30
67878: PUSH
67879: LD_INT 29
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PPUSH
67890: CALL_OW 69
67894: ST_TO_ADDR
// if not tmp then
67895: LD_VAR 0 1
67899: NOT
67900: IFFALSE 67904
// exit ;
67902: GO 67917
// DestroyUnit ( tmp [ 1 ] ) ;
67904: LD_VAR 0 1
67908: PUSH
67909: LD_INT 1
67911: ARRAY
67912: PPUSH
67913: CALL_OW 65
// end ;
67917: PPOPN 1
67919: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67920: LD_EXP 46
67924: PUSH
67925: LD_EXP 84
67929: AND
67930: IFFALSE 68059
67932: GO 67934
67934: DISABLE
67935: LD_INT 0
67937: PPUSH
// begin uc_side := 0 ;
67938: LD_ADDR_OWVAR 20
67942: PUSH
67943: LD_INT 0
67945: ST_TO_ADDR
// uc_nation := nation_arabian ;
67946: LD_ADDR_OWVAR 21
67950: PUSH
67951: LD_INT 2
67953: ST_TO_ADDR
// hc_gallery :=  ;
67954: LD_ADDR_OWVAR 33
67958: PUSH
67959: LD_STRING 
67961: ST_TO_ADDR
// hc_name :=  ;
67962: LD_ADDR_OWVAR 26
67966: PUSH
67967: LD_STRING 
67969: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67970: LD_INT 1
67972: PPUSH
67973: LD_INT 11
67975: PPUSH
67976: LD_INT 10
67978: PPUSH
67979: CALL_OW 380
// un := CreateHuman ;
67983: LD_ADDR_VAR 0 1
67987: PUSH
67988: CALL_OW 44
67992: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67993: LD_VAR 0 1
67997: PPUSH
67998: LD_INT 1
68000: PPUSH
68001: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68005: LD_INT 35
68007: PPUSH
68008: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68012: LD_VAR 0 1
68016: PPUSH
68017: LD_INT 22
68019: PUSH
68020: LD_OWVAR 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PPUSH
68029: CALL_OW 69
68033: PPUSH
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 74
68043: PPUSH
68044: CALL_OW 115
// until IsDead ( un ) ;
68048: LD_VAR 0 1
68052: PPUSH
68053: CALL_OW 301
68057: IFFALSE 68005
// end ;
68059: PPOPN 1
68061: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
68062: LD_EXP 46
68066: PUSH
68067: LD_EXP 86
68071: AND
68072: IFFALSE 68084
68074: GO 68076
68076: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
68077: LD_STRING earthquake(getX(game), 0, 32)
68079: PPUSH
68080: CALL_OW 559
68084: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
68085: LD_EXP 46
68089: PUSH
68090: LD_EXP 87
68094: AND
68095: IFFALSE 68186
68097: GO 68099
68099: DISABLE
68100: LD_INT 0
68102: PPUSH
// begin enable ;
68103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68104: LD_ADDR_VAR 0 1
68108: PUSH
68109: LD_INT 22
68111: PUSH
68112: LD_OWVAR 2
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 21
68123: PUSH
68124: LD_INT 2
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 33
68133: PUSH
68134: LD_INT 3
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: LIST
68145: PPUSH
68146: CALL_OW 69
68150: ST_TO_ADDR
// if not tmp then
68151: LD_VAR 0 1
68155: NOT
68156: IFFALSE 68160
// exit ;
68158: GO 68186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68160: LD_VAR 0 1
68164: PUSH
68165: LD_INT 1
68167: PPUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 12
68177: ARRAY
68178: PPUSH
68179: LD_INT 1
68181: PPUSH
68182: CALL_OW 234
// end ;
68186: PPOPN 1
68188: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68189: LD_EXP 46
68193: PUSH
68194: LD_EXP 88
68198: AND
68199: IFFALSE 68340
68201: GO 68203
68203: DISABLE
68204: LD_INT 0
68206: PPUSH
68207: PPUSH
68208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68209: LD_ADDR_VAR 0 3
68213: PUSH
68214: LD_INT 22
68216: PUSH
68217: LD_OWVAR 2
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 25
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PPUSH
68240: CALL_OW 69
68244: ST_TO_ADDR
// if not tmp then
68245: LD_VAR 0 3
68249: NOT
68250: IFFALSE 68254
// exit ;
68252: GO 68340
// un := tmp [ rand ( 1 , tmp ) ] ;
68254: LD_ADDR_VAR 0 2
68258: PUSH
68259: LD_VAR 0 3
68263: PUSH
68264: LD_INT 1
68266: PPUSH
68267: LD_VAR 0 3
68271: PPUSH
68272: CALL_OW 12
68276: ARRAY
68277: ST_TO_ADDR
// if Crawls ( un ) then
68278: LD_VAR 0 2
68282: PPUSH
68283: CALL_OW 318
68287: IFFALSE 68298
// ComWalk ( un ) ;
68289: LD_VAR 0 2
68293: PPUSH
68294: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68298: LD_VAR 0 2
68302: PPUSH
68303: LD_INT 9
68305: PPUSH
68306: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68310: LD_INT 28
68312: PPUSH
68313: LD_OWVAR 2
68317: PPUSH
68318: LD_INT 2
68320: PPUSH
68321: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68325: LD_INT 29
68327: PPUSH
68328: LD_OWVAR 2
68332: PPUSH
68333: LD_INT 2
68335: PPUSH
68336: CALL_OW 322
// end ;
68340: PPOPN 3
68342: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68343: LD_EXP 46
68347: PUSH
68348: LD_EXP 89
68352: AND
68353: IFFALSE 68464
68355: GO 68357
68357: DISABLE
68358: LD_INT 0
68360: PPUSH
68361: PPUSH
68362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68363: LD_ADDR_VAR 0 3
68367: PUSH
68368: LD_INT 22
68370: PUSH
68371: LD_OWVAR 2
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 25
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PPUSH
68394: CALL_OW 69
68398: ST_TO_ADDR
// if not tmp then
68399: LD_VAR 0 3
68403: NOT
68404: IFFALSE 68408
// exit ;
68406: GO 68464
// un := tmp [ rand ( 1 , tmp ) ] ;
68408: LD_ADDR_VAR 0 2
68412: PUSH
68413: LD_VAR 0 3
68417: PUSH
68418: LD_INT 1
68420: PPUSH
68421: LD_VAR 0 3
68425: PPUSH
68426: CALL_OW 12
68430: ARRAY
68431: ST_TO_ADDR
// if Crawls ( un ) then
68432: LD_VAR 0 2
68436: PPUSH
68437: CALL_OW 318
68441: IFFALSE 68452
// ComWalk ( un ) ;
68443: LD_VAR 0 2
68447: PPUSH
68448: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68452: LD_VAR 0 2
68456: PPUSH
68457: LD_INT 8
68459: PPUSH
68460: CALL_OW 336
// end ;
68464: PPOPN 3
68466: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68467: LD_EXP 46
68471: PUSH
68472: LD_EXP 90
68476: AND
68477: IFFALSE 68621
68479: GO 68481
68481: DISABLE
68482: LD_INT 0
68484: PPUSH
68485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68486: LD_ADDR_VAR 0 2
68490: PUSH
68491: LD_INT 22
68493: PUSH
68494: LD_OWVAR 2
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 21
68505: PUSH
68506: LD_INT 2
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 2
68515: PUSH
68516: LD_INT 34
68518: PUSH
68519: LD_INT 12
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 34
68528: PUSH
68529: LD_INT 51
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 34
68538: PUSH
68539: LD_INT 32
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: LIST
68556: PPUSH
68557: CALL_OW 69
68561: ST_TO_ADDR
// if not tmp then
68562: LD_VAR 0 2
68566: NOT
68567: IFFALSE 68571
// exit ;
68569: GO 68621
// for i in tmp do
68571: LD_ADDR_VAR 0 1
68575: PUSH
68576: LD_VAR 0 2
68580: PUSH
68581: FOR_IN
68582: IFFALSE 68619
// if GetCargo ( i , mat_artifact ) = 0 then
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_INT 4
68591: PPUSH
68592: CALL_OW 289
68596: PUSH
68597: LD_INT 0
68599: EQUAL
68600: IFFALSE 68617
// SetCargo ( i , mat_siberit , 100 ) ;
68602: LD_VAR 0 1
68606: PPUSH
68607: LD_INT 3
68609: PPUSH
68610: LD_INT 100
68612: PPUSH
68613: CALL_OW 290
68617: GO 68581
68619: POP
68620: POP
// end ;
68621: PPOPN 2
68623: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68624: LD_EXP 46
68628: PUSH
68629: LD_EXP 91
68633: AND
68634: IFFALSE 68817
68636: GO 68638
68638: DISABLE
68639: LD_INT 0
68641: PPUSH
68642: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68643: LD_ADDR_VAR 0 2
68647: PUSH
68648: LD_INT 22
68650: PUSH
68651: LD_OWVAR 2
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PPUSH
68660: CALL_OW 69
68664: ST_TO_ADDR
// if not tmp then
68665: LD_VAR 0 2
68669: NOT
68670: IFFALSE 68674
// exit ;
68672: GO 68817
// for i := 1 to 2 do
68674: LD_ADDR_VAR 0 1
68678: PUSH
68679: DOUBLE
68680: LD_INT 1
68682: DEC
68683: ST_TO_ADDR
68684: LD_INT 2
68686: PUSH
68687: FOR_TO
68688: IFFALSE 68815
// begin uc_side := your_side ;
68690: LD_ADDR_OWVAR 20
68694: PUSH
68695: LD_OWVAR 2
68699: ST_TO_ADDR
// uc_nation := nation_american ;
68700: LD_ADDR_OWVAR 21
68704: PUSH
68705: LD_INT 1
68707: ST_TO_ADDR
// vc_chassis := us_morphling ;
68708: LD_ADDR_OWVAR 37
68712: PUSH
68713: LD_INT 5
68715: ST_TO_ADDR
// vc_engine := engine_siberite ;
68716: LD_ADDR_OWVAR 39
68720: PUSH
68721: LD_INT 3
68723: ST_TO_ADDR
// vc_control := control_computer ;
68724: LD_ADDR_OWVAR 38
68728: PUSH
68729: LD_INT 3
68731: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68732: LD_ADDR_OWVAR 40
68736: PUSH
68737: LD_INT 10
68739: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68740: LD_VAR 0 2
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PPUSH
68749: CALL_OW 310
68753: NOT
68754: IFFALSE 68801
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68756: CALL_OW 45
68760: PPUSH
68761: LD_VAR 0 2
68765: PUSH
68766: LD_INT 1
68768: ARRAY
68769: PPUSH
68770: CALL_OW 250
68774: PPUSH
68775: LD_VAR 0 2
68779: PUSH
68780: LD_INT 1
68782: ARRAY
68783: PPUSH
68784: CALL_OW 251
68788: PPUSH
68789: LD_INT 12
68791: PPUSH
68792: LD_INT 1
68794: PPUSH
68795: CALL_OW 50
68799: GO 68813
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68801: CALL_OW 45
68805: PPUSH
68806: LD_INT 1
68808: PPUSH
68809: CALL_OW 51
// end ;
68813: GO 68687
68815: POP
68816: POP
// end ;
68817: PPOPN 2
68819: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68820: LD_EXP 46
68824: PUSH
68825: LD_EXP 92
68829: AND
68830: IFFALSE 69052
68832: GO 68834
68834: DISABLE
68835: LD_INT 0
68837: PPUSH
68838: PPUSH
68839: PPUSH
68840: PPUSH
68841: PPUSH
68842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68843: LD_ADDR_VAR 0 6
68847: PUSH
68848: LD_INT 22
68850: PUSH
68851: LD_OWVAR 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 21
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 3
68872: PUSH
68873: LD_INT 23
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: LIST
68891: PPUSH
68892: CALL_OW 69
68896: ST_TO_ADDR
// if not tmp then
68897: LD_VAR 0 6
68901: NOT
68902: IFFALSE 68906
// exit ;
68904: GO 69052
// s1 := rand ( 1 , 4 ) ;
68906: LD_ADDR_VAR 0 2
68910: PUSH
68911: LD_INT 1
68913: PPUSH
68914: LD_INT 4
68916: PPUSH
68917: CALL_OW 12
68921: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68922: LD_ADDR_VAR 0 4
68926: PUSH
68927: LD_VAR 0 6
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: PPUSH
68936: LD_VAR 0 2
68940: PPUSH
68941: CALL_OW 259
68945: ST_TO_ADDR
// if s1 = 1 then
68946: LD_VAR 0 2
68950: PUSH
68951: LD_INT 1
68953: EQUAL
68954: IFFALSE 68974
// s2 := rand ( 2 , 4 ) else
68956: LD_ADDR_VAR 0 3
68960: PUSH
68961: LD_INT 2
68963: PPUSH
68964: LD_INT 4
68966: PPUSH
68967: CALL_OW 12
68971: ST_TO_ADDR
68972: GO 68982
// s2 := 1 ;
68974: LD_ADDR_VAR 0 3
68978: PUSH
68979: LD_INT 1
68981: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68982: LD_ADDR_VAR 0 5
68986: PUSH
68987: LD_VAR 0 6
68991: PUSH
68992: LD_INT 1
68994: ARRAY
68995: PPUSH
68996: LD_VAR 0 3
69000: PPUSH
69001: CALL_OW 259
69005: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
69006: LD_VAR 0 6
69010: PUSH
69011: LD_INT 1
69013: ARRAY
69014: PPUSH
69015: LD_VAR 0 2
69019: PPUSH
69020: LD_VAR 0 5
69024: PPUSH
69025: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
69029: LD_VAR 0 6
69033: PUSH
69034: LD_INT 1
69036: ARRAY
69037: PPUSH
69038: LD_VAR 0 3
69042: PPUSH
69043: LD_VAR 0 4
69047: PPUSH
69048: CALL_OW 237
// end ;
69052: PPOPN 6
69054: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
69055: LD_EXP 46
69059: PUSH
69060: LD_EXP 93
69064: AND
69065: IFFALSE 69144
69067: GO 69069
69069: DISABLE
69070: LD_INT 0
69072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
69073: LD_ADDR_VAR 0 1
69077: PUSH
69078: LD_INT 22
69080: PUSH
69081: LD_OWVAR 2
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 30
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PPUSH
69104: CALL_OW 69
69108: ST_TO_ADDR
// if not tmp then
69109: LD_VAR 0 1
69113: NOT
69114: IFFALSE 69118
// exit ;
69116: GO 69144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69118: LD_VAR 0 1
69122: PUSH
69123: LD_INT 1
69125: PPUSH
69126: LD_VAR 0 1
69130: PPUSH
69131: CALL_OW 12
69135: ARRAY
69136: PPUSH
69137: LD_INT 1
69139: PPUSH
69140: CALL_OW 234
// end ;
69144: PPOPN 1
69146: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69147: LD_EXP 46
69151: PUSH
69152: LD_EXP 94
69156: AND
69157: IFFALSE 69269
69159: GO 69161
69161: DISABLE
69162: LD_INT 0
69164: PPUSH
69165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69166: LD_ADDR_VAR 0 2
69170: PUSH
69171: LD_INT 22
69173: PUSH
69174: LD_OWVAR 2
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: LD_INT 30
69188: PUSH
69189: LD_INT 27
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 30
69198: PUSH
69199: LD_INT 26
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 30
69208: PUSH
69209: LD_INT 28
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PPUSH
69226: CALL_OW 69
69230: ST_TO_ADDR
// if not tmp then
69231: LD_VAR 0 2
69235: NOT
69236: IFFALSE 69240
// exit ;
69238: GO 69269
// for i in tmp do
69240: LD_ADDR_VAR 0 1
69244: PUSH
69245: LD_VAR 0 2
69249: PUSH
69250: FOR_IN
69251: IFFALSE 69267
// SetLives ( i , 1 ) ;
69253: LD_VAR 0 1
69257: PPUSH
69258: LD_INT 1
69260: PPUSH
69261: CALL_OW 234
69265: GO 69250
69267: POP
69268: POP
// end ;
69269: PPOPN 2
69271: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69272: LD_EXP 46
69276: PUSH
69277: LD_EXP 95
69281: AND
69282: IFFALSE 69569
69284: GO 69286
69286: DISABLE
69287: LD_INT 0
69289: PPUSH
69290: PPUSH
69291: PPUSH
// begin i := rand ( 1 , 7 ) ;
69292: LD_ADDR_VAR 0 1
69296: PUSH
69297: LD_INT 1
69299: PPUSH
69300: LD_INT 7
69302: PPUSH
69303: CALL_OW 12
69307: ST_TO_ADDR
// case i of 1 :
69308: LD_VAR 0 1
69312: PUSH
69313: LD_INT 1
69315: DOUBLE
69316: EQUAL
69317: IFTRUE 69321
69319: GO 69331
69321: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69322: LD_STRING earthquake(getX(game), 0, 32)
69324: PPUSH
69325: CALL_OW 559
69329: GO 69569
69331: LD_INT 2
69333: DOUBLE
69334: EQUAL
69335: IFTRUE 69339
69337: GO 69353
69339: POP
// begin ToLua ( displayStucuk(); ) ;
69340: LD_STRING displayStucuk();
69342: PPUSH
69343: CALL_OW 559
// ResetFog ;
69347: CALL_OW 335
// end ; 3 :
69351: GO 69569
69353: LD_INT 3
69355: DOUBLE
69356: EQUAL
69357: IFTRUE 69361
69359: GO 69465
69361: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69362: LD_ADDR_VAR 0 2
69366: PUSH
69367: LD_INT 22
69369: PUSH
69370: LD_OWVAR 2
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 25
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PPUSH
69393: CALL_OW 69
69397: ST_TO_ADDR
// if not tmp then
69398: LD_VAR 0 2
69402: NOT
69403: IFFALSE 69407
// exit ;
69405: GO 69569
// un := tmp [ rand ( 1 , tmp ) ] ;
69407: LD_ADDR_VAR 0 3
69411: PUSH
69412: LD_VAR 0 2
69416: PUSH
69417: LD_INT 1
69419: PPUSH
69420: LD_VAR 0 2
69424: PPUSH
69425: CALL_OW 12
69429: ARRAY
69430: ST_TO_ADDR
// if Crawls ( un ) then
69431: LD_VAR 0 3
69435: PPUSH
69436: CALL_OW 318
69440: IFFALSE 69451
// ComWalk ( un ) ;
69442: LD_VAR 0 3
69446: PPUSH
69447: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69451: LD_VAR 0 3
69455: PPUSH
69456: LD_INT 8
69458: PPUSH
69459: CALL_OW 336
// end ; 4 :
69463: GO 69569
69465: LD_INT 4
69467: DOUBLE
69468: EQUAL
69469: IFTRUE 69473
69471: GO 69547
69473: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69474: LD_ADDR_VAR 0 2
69478: PUSH
69479: LD_INT 22
69481: PUSH
69482: LD_OWVAR 2
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PUSH
69491: LD_INT 30
69493: PUSH
69494: LD_INT 29
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PPUSH
69505: CALL_OW 69
69509: ST_TO_ADDR
// if not tmp then
69510: LD_VAR 0 2
69514: NOT
69515: IFFALSE 69519
// exit ;
69517: GO 69569
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69519: LD_VAR 0 2
69523: PUSH
69524: LD_INT 1
69526: ARRAY
69527: PPUSH
69528: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69532: LD_VAR 0 2
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PPUSH
69541: CALL_OW 65
// end ; 5 .. 7 :
69545: GO 69569
69547: LD_INT 5
69549: DOUBLE
69550: GREATEREQUAL
69551: IFFALSE 69559
69553: LD_INT 7
69555: DOUBLE
69556: LESSEQUAL
69557: IFTRUE 69561
69559: GO 69568
69561: POP
// StreamSibBomb ; end ;
69562: CALL 65806 0 0
69566: GO 69569
69568: POP
// end ;
69569: PPOPN 3
69571: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69572: LD_EXP 46
69576: PUSH
69577: LD_EXP 96
69581: AND
69582: IFFALSE 69738
69584: GO 69586
69586: DISABLE
69587: LD_INT 0
69589: PPUSH
69590: PPUSH
69591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69592: LD_ADDR_VAR 0 2
69596: PUSH
69597: LD_INT 81
69599: PUSH
69600: LD_OWVAR 2
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 21
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 21
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PPUSH
69641: CALL_OW 69
69645: ST_TO_ADDR
// if not tmp then
69646: LD_VAR 0 2
69650: NOT
69651: IFFALSE 69655
// exit ;
69653: GO 69738
// p := 0 ;
69655: LD_ADDR_VAR 0 3
69659: PUSH
69660: LD_INT 0
69662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69663: LD_INT 35
69665: PPUSH
69666: CALL_OW 67
// p := p + 1 ;
69670: LD_ADDR_VAR 0 3
69674: PUSH
69675: LD_VAR 0 3
69679: PUSH
69680: LD_INT 1
69682: PLUS
69683: ST_TO_ADDR
// for i in tmp do
69684: LD_ADDR_VAR 0 1
69688: PUSH
69689: LD_VAR 0 2
69693: PUSH
69694: FOR_IN
69695: IFFALSE 69726
// if GetLives ( i ) < 1000 then
69697: LD_VAR 0 1
69701: PPUSH
69702: CALL_OW 256
69706: PUSH
69707: LD_INT 1000
69709: LESS
69710: IFFALSE 69724
// SetLives ( i , 1000 ) ;
69712: LD_VAR 0 1
69716: PPUSH
69717: LD_INT 1000
69719: PPUSH
69720: CALL_OW 234
69724: GO 69694
69726: POP
69727: POP
// until p > 20 ;
69728: LD_VAR 0 3
69732: PUSH
69733: LD_INT 20
69735: GREATER
69736: IFFALSE 69663
// end ;
69738: PPOPN 3
69740: END
// every 0 0$1 trigger StreamModeActive and sTime do
69741: LD_EXP 46
69745: PUSH
69746: LD_EXP 97
69750: AND
69751: IFFALSE 69786
69753: GO 69755
69755: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69756: LD_INT 28
69758: PPUSH
69759: LD_OWVAR 2
69763: PPUSH
69764: LD_INT 2
69766: PPUSH
69767: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69771: LD_INT 30
69773: PPUSH
69774: LD_OWVAR 2
69778: PPUSH
69779: LD_INT 2
69781: PPUSH
69782: CALL_OW 322
// end ;
69786: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69787: LD_EXP 46
69791: PUSH
69792: LD_EXP 98
69796: AND
69797: IFFALSE 69918
69799: GO 69801
69801: DISABLE
69802: LD_INT 0
69804: PPUSH
69805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69806: LD_ADDR_VAR 0 2
69810: PUSH
69811: LD_INT 22
69813: PUSH
69814: LD_OWVAR 2
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 21
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: LD_INT 23
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: LIST
69854: PPUSH
69855: CALL_OW 69
69859: ST_TO_ADDR
// if not tmp then
69860: LD_VAR 0 2
69864: NOT
69865: IFFALSE 69869
// exit ;
69867: GO 69918
// for i in tmp do
69869: LD_ADDR_VAR 0 1
69873: PUSH
69874: LD_VAR 0 2
69878: PUSH
69879: FOR_IN
69880: IFFALSE 69916
// begin if Crawls ( i ) then
69882: LD_VAR 0 1
69886: PPUSH
69887: CALL_OW 318
69891: IFFALSE 69902
// ComWalk ( i ) ;
69893: LD_VAR 0 1
69897: PPUSH
69898: CALL_OW 138
// SetClass ( i , 2 ) ;
69902: LD_VAR 0 1
69906: PPUSH
69907: LD_INT 2
69909: PPUSH
69910: CALL_OW 336
// end ;
69914: GO 69879
69916: POP
69917: POP
// end ;
69918: PPOPN 2
69920: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69921: LD_EXP 46
69925: PUSH
69926: LD_EXP 99
69930: AND
69931: IFFALSE 70219
69933: GO 69935
69935: DISABLE
69936: LD_INT 0
69938: PPUSH
69939: PPUSH
69940: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69941: LD_OWVAR 2
69945: PPUSH
69946: LD_INT 9
69948: PPUSH
69949: LD_INT 1
69951: PPUSH
69952: LD_INT 1
69954: PPUSH
69955: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69959: LD_INT 9
69961: PPUSH
69962: LD_OWVAR 2
69966: PPUSH
69967: CALL_OW 343
// uc_side := 9 ;
69971: LD_ADDR_OWVAR 20
69975: PUSH
69976: LD_INT 9
69978: ST_TO_ADDR
// uc_nation := 2 ;
69979: LD_ADDR_OWVAR 21
69983: PUSH
69984: LD_INT 2
69986: ST_TO_ADDR
// hc_name := Dark Warrior ;
69987: LD_ADDR_OWVAR 26
69991: PUSH
69992: LD_STRING Dark Warrior
69994: ST_TO_ADDR
// hc_gallery :=  ;
69995: LD_ADDR_OWVAR 33
69999: PUSH
70000: LD_STRING 
70002: ST_TO_ADDR
// hc_noskilllimit := true ;
70003: LD_ADDR_OWVAR 76
70007: PUSH
70008: LD_INT 1
70010: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
70011: LD_ADDR_OWVAR 31
70015: PUSH
70016: LD_INT 30
70018: PUSH
70019: LD_INT 30
70021: PUSH
70022: LD_INT 30
70024: PUSH
70025: LD_INT 30
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: ST_TO_ADDR
// un := CreateHuman ;
70034: LD_ADDR_VAR 0 3
70038: PUSH
70039: CALL_OW 44
70043: ST_TO_ADDR
// hc_noskilllimit := false ;
70044: LD_ADDR_OWVAR 76
70048: PUSH
70049: LD_INT 0
70051: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70052: LD_VAR 0 3
70056: PPUSH
70057: LD_INT 1
70059: PPUSH
70060: CALL_OW 51
// ToLua ( playRanger() ) ;
70064: LD_STRING playRanger()
70066: PPUSH
70067: CALL_OW 559
// p := 0 ;
70071: LD_ADDR_VAR 0 2
70075: PUSH
70076: LD_INT 0
70078: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70079: LD_INT 35
70081: PPUSH
70082: CALL_OW 67
// p := p + 1 ;
70086: LD_ADDR_VAR 0 2
70090: PUSH
70091: LD_VAR 0 2
70095: PUSH
70096: LD_INT 1
70098: PLUS
70099: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70100: LD_VAR 0 3
70104: PPUSH
70105: CALL_OW 256
70109: PUSH
70110: LD_INT 1000
70112: LESS
70113: IFFALSE 70127
// SetLives ( un , 1000 ) ;
70115: LD_VAR 0 3
70119: PPUSH
70120: LD_INT 1000
70122: PPUSH
70123: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70127: LD_VAR 0 3
70131: PPUSH
70132: LD_INT 81
70134: PUSH
70135: LD_OWVAR 2
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 91
70146: PUSH
70147: LD_VAR 0 3
70151: PUSH
70152: LD_INT 30
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PPUSH
70164: CALL_OW 69
70168: PPUSH
70169: LD_VAR 0 3
70173: PPUSH
70174: CALL_OW 74
70178: PPUSH
70179: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70183: LD_VAR 0 2
70187: PUSH
70188: LD_INT 80
70190: GREATER
70191: PUSH
70192: LD_VAR 0 3
70196: PPUSH
70197: CALL_OW 301
70201: OR
70202: IFFALSE 70079
// if un then
70204: LD_VAR 0 3
70208: IFFALSE 70219
// RemoveUnit ( un ) ;
70210: LD_VAR 0 3
70214: PPUSH
70215: CALL_OW 64
// end ;
70219: PPOPN 3
70221: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70222: LD_EXP 100
70226: IFFALSE 70342
70228: GO 70230
70230: DISABLE
70231: LD_INT 0
70233: PPUSH
70234: PPUSH
70235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70236: LD_ADDR_VAR 0 2
70240: PUSH
70241: LD_INT 81
70243: PUSH
70244: LD_OWVAR 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 21
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PPUSH
70267: CALL_OW 69
70271: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70272: LD_STRING playComputer()
70274: PPUSH
70275: CALL_OW 559
// if not tmp then
70279: LD_VAR 0 2
70283: NOT
70284: IFFALSE 70288
// exit ;
70286: GO 70342
// for i in tmp do
70288: LD_ADDR_VAR 0 1
70292: PUSH
70293: LD_VAR 0 2
70297: PUSH
70298: FOR_IN
70299: IFFALSE 70340
// for j := 1 to 4 do
70301: LD_ADDR_VAR 0 3
70305: PUSH
70306: DOUBLE
70307: LD_INT 1
70309: DEC
70310: ST_TO_ADDR
70311: LD_INT 4
70313: PUSH
70314: FOR_TO
70315: IFFALSE 70336
// SetSkill ( i , j , 10 ) ;
70317: LD_VAR 0 1
70321: PPUSH
70322: LD_VAR 0 3
70326: PPUSH
70327: LD_INT 10
70329: PPUSH
70330: CALL_OW 237
70334: GO 70314
70336: POP
70337: POP
70338: GO 70298
70340: POP
70341: POP
// end ;
70342: PPOPN 3
70344: END
// every 0 0$1 trigger s30 do var i , tmp ;
70345: LD_EXP 101
70349: IFFALSE 70418
70351: GO 70353
70353: DISABLE
70354: LD_INT 0
70356: PPUSH
70357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: LD_INT 22
70365: PUSH
70366: LD_OWVAR 2
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PPUSH
70375: CALL_OW 69
70379: ST_TO_ADDR
// if not tmp then
70380: LD_VAR 0 2
70384: NOT
70385: IFFALSE 70389
// exit ;
70387: GO 70418
// for i in tmp do
70389: LD_ADDR_VAR 0 1
70393: PUSH
70394: LD_VAR 0 2
70398: PUSH
70399: FOR_IN
70400: IFFALSE 70416
// SetLives ( i , 300 ) ;
70402: LD_VAR 0 1
70406: PPUSH
70407: LD_INT 300
70409: PPUSH
70410: CALL_OW 234
70414: GO 70399
70416: POP
70417: POP
// end ;
70418: PPOPN 2
70420: END
// every 0 0$1 trigger s60 do var i , tmp ;
70421: LD_EXP 102
70425: IFFALSE 70494
70427: GO 70429
70429: DISABLE
70430: LD_INT 0
70432: PPUSH
70433: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70434: LD_ADDR_VAR 0 2
70438: PUSH
70439: LD_INT 22
70441: PUSH
70442: LD_OWVAR 2
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PPUSH
70451: CALL_OW 69
70455: ST_TO_ADDR
// if not tmp then
70456: LD_VAR 0 2
70460: NOT
70461: IFFALSE 70465
// exit ;
70463: GO 70494
// for i in tmp do
70465: LD_ADDR_VAR 0 1
70469: PUSH
70470: LD_VAR 0 2
70474: PUSH
70475: FOR_IN
70476: IFFALSE 70492
// SetLives ( i , 600 ) ;
70478: LD_VAR 0 1
70482: PPUSH
70483: LD_INT 600
70485: PPUSH
70486: CALL_OW 234
70490: GO 70475
70492: POP
70493: POP
// end ;
70494: PPOPN 2
70496: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70497: LD_INT 0
70499: PPUSH
// case cmd of 301 :
70500: LD_VAR 0 1
70504: PUSH
70505: LD_INT 301
70507: DOUBLE
70508: EQUAL
70509: IFTRUE 70513
70511: GO 70545
70513: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70514: LD_VAR 0 6
70518: PPUSH
70519: LD_VAR 0 7
70523: PPUSH
70524: LD_VAR 0 8
70528: PPUSH
70529: LD_VAR 0 4
70533: PPUSH
70534: LD_VAR 0 5
70538: PPUSH
70539: CALL 71754 0 5
70543: GO 70666
70545: LD_INT 302
70547: DOUBLE
70548: EQUAL
70549: IFTRUE 70553
70551: GO 70590
70553: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70554: LD_VAR 0 6
70558: PPUSH
70559: LD_VAR 0 7
70563: PPUSH
70564: LD_VAR 0 8
70568: PPUSH
70569: LD_VAR 0 9
70573: PPUSH
70574: LD_VAR 0 4
70578: PPUSH
70579: LD_VAR 0 5
70583: PPUSH
70584: CALL 71845 0 6
70588: GO 70666
70590: LD_INT 303
70592: DOUBLE
70593: EQUAL
70594: IFTRUE 70598
70596: GO 70635
70598: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70599: LD_VAR 0 6
70603: PPUSH
70604: LD_VAR 0 7
70608: PPUSH
70609: LD_VAR 0 8
70613: PPUSH
70614: LD_VAR 0 9
70618: PPUSH
70619: LD_VAR 0 4
70623: PPUSH
70624: LD_VAR 0 5
70628: PPUSH
70629: CALL 70671 0 6
70633: GO 70666
70635: LD_INT 304
70637: DOUBLE
70638: EQUAL
70639: IFTRUE 70643
70641: GO 70665
70643: POP
// hHackTeleport ( unit , x , y ) ; end ;
70644: LD_VAR 0 2
70648: PPUSH
70649: LD_VAR 0 4
70653: PPUSH
70654: LD_VAR 0 5
70658: PPUSH
70659: CALL 72438 0 3
70663: GO 70666
70665: POP
// end ;
70666: LD_VAR 0 12
70670: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70671: LD_INT 0
70673: PPUSH
70674: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70675: LD_VAR 0 1
70679: PUSH
70680: LD_INT 1
70682: LESS
70683: PUSH
70684: LD_VAR 0 1
70688: PUSH
70689: LD_INT 3
70691: GREATER
70692: OR
70693: PUSH
70694: LD_VAR 0 5
70698: PPUSH
70699: LD_VAR 0 6
70703: PPUSH
70704: CALL_OW 428
70708: OR
70709: IFFALSE 70713
// exit ;
70711: GO 71441
// uc_side := your_side ;
70713: LD_ADDR_OWVAR 20
70717: PUSH
70718: LD_OWVAR 2
70722: ST_TO_ADDR
// uc_nation := nation ;
70723: LD_ADDR_OWVAR 21
70727: PUSH
70728: LD_VAR 0 1
70732: ST_TO_ADDR
// bc_level = 1 ;
70733: LD_ADDR_OWVAR 43
70737: PUSH
70738: LD_INT 1
70740: ST_TO_ADDR
// case btype of 1 :
70741: LD_VAR 0 2
70745: PUSH
70746: LD_INT 1
70748: DOUBLE
70749: EQUAL
70750: IFTRUE 70754
70752: GO 70765
70754: POP
// bc_type := b_depot ; 2 :
70755: LD_ADDR_OWVAR 42
70759: PUSH
70760: LD_INT 0
70762: ST_TO_ADDR
70763: GO 71385
70765: LD_INT 2
70767: DOUBLE
70768: EQUAL
70769: IFTRUE 70773
70771: GO 70784
70773: POP
// bc_type := b_warehouse ; 3 :
70774: LD_ADDR_OWVAR 42
70778: PUSH
70779: LD_INT 1
70781: ST_TO_ADDR
70782: GO 71385
70784: LD_INT 3
70786: DOUBLE
70787: EQUAL
70788: IFTRUE 70792
70790: GO 70803
70792: POP
// bc_type := b_lab ; 4 .. 9 :
70793: LD_ADDR_OWVAR 42
70797: PUSH
70798: LD_INT 6
70800: ST_TO_ADDR
70801: GO 71385
70803: LD_INT 4
70805: DOUBLE
70806: GREATEREQUAL
70807: IFFALSE 70815
70809: LD_INT 9
70811: DOUBLE
70812: LESSEQUAL
70813: IFTRUE 70817
70815: GO 70877
70817: POP
// begin bc_type := b_lab_half ;
70818: LD_ADDR_OWVAR 42
70822: PUSH
70823: LD_INT 7
70825: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70826: LD_ADDR_OWVAR 44
70830: PUSH
70831: LD_INT 10
70833: PUSH
70834: LD_INT 11
70836: PUSH
70837: LD_INT 12
70839: PUSH
70840: LD_INT 15
70842: PUSH
70843: LD_INT 14
70845: PUSH
70846: LD_INT 13
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_VAR 0 2
70861: PUSH
70862: LD_INT 3
70864: MINUS
70865: ARRAY
70866: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70867: LD_ADDR_OWVAR 45
70871: PUSH
70872: LD_INT 9
70874: ST_TO_ADDR
// end ; 10 .. 13 :
70875: GO 71385
70877: LD_INT 10
70879: DOUBLE
70880: GREATEREQUAL
70881: IFFALSE 70889
70883: LD_INT 13
70885: DOUBLE
70886: LESSEQUAL
70887: IFTRUE 70891
70889: GO 70968
70891: POP
// begin bc_type := b_lab_full ;
70892: LD_ADDR_OWVAR 42
70896: PUSH
70897: LD_INT 8
70899: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70900: LD_ADDR_OWVAR 44
70904: PUSH
70905: LD_INT 10
70907: PUSH
70908: LD_INT 12
70910: PUSH
70911: LD_INT 14
70913: PUSH
70914: LD_INT 13
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: PUSH
70923: LD_VAR 0 2
70927: PUSH
70928: LD_INT 9
70930: MINUS
70931: ARRAY
70932: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70933: LD_ADDR_OWVAR 45
70937: PUSH
70938: LD_INT 11
70940: PUSH
70941: LD_INT 15
70943: PUSH
70944: LD_INT 12
70946: PUSH
70947: LD_INT 15
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: PUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 9
70963: MINUS
70964: ARRAY
70965: ST_TO_ADDR
// end ; 14 :
70966: GO 71385
70968: LD_INT 14
70970: DOUBLE
70971: EQUAL
70972: IFTRUE 70976
70974: GO 70987
70976: POP
// bc_type := b_workshop ; 15 :
70977: LD_ADDR_OWVAR 42
70981: PUSH
70982: LD_INT 2
70984: ST_TO_ADDR
70985: GO 71385
70987: LD_INT 15
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 70995
70993: GO 71006
70995: POP
// bc_type := b_factory ; 16 :
70996: LD_ADDR_OWVAR 42
71000: PUSH
71001: LD_INT 3
71003: ST_TO_ADDR
71004: GO 71385
71006: LD_INT 16
71008: DOUBLE
71009: EQUAL
71010: IFTRUE 71014
71012: GO 71025
71014: POP
// bc_type := b_ext_gun ; 17 :
71015: LD_ADDR_OWVAR 42
71019: PUSH
71020: LD_INT 17
71022: ST_TO_ADDR
71023: GO 71385
71025: LD_INT 17
71027: DOUBLE
71028: EQUAL
71029: IFTRUE 71033
71031: GO 71061
71033: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
71034: LD_ADDR_OWVAR 42
71038: PUSH
71039: LD_INT 19
71041: PUSH
71042: LD_INT 23
71044: PUSH
71045: LD_INT 19
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: LIST
71052: PUSH
71053: LD_VAR 0 1
71057: ARRAY
71058: ST_TO_ADDR
71059: GO 71385
71061: LD_INT 18
71063: DOUBLE
71064: EQUAL
71065: IFTRUE 71069
71067: GO 71080
71069: POP
// bc_type := b_ext_radar ; 19 :
71070: LD_ADDR_OWVAR 42
71074: PUSH
71075: LD_INT 20
71077: ST_TO_ADDR
71078: GO 71385
71080: LD_INT 19
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71088
71086: GO 71099
71088: POP
// bc_type := b_ext_radio ; 20 :
71089: LD_ADDR_OWVAR 42
71093: PUSH
71094: LD_INT 22
71096: ST_TO_ADDR
71097: GO 71385
71099: LD_INT 20
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71107
71105: GO 71118
71107: POP
// bc_type := b_ext_siberium ; 21 :
71108: LD_ADDR_OWVAR 42
71112: PUSH
71113: LD_INT 21
71115: ST_TO_ADDR
71116: GO 71385
71118: LD_INT 21
71120: DOUBLE
71121: EQUAL
71122: IFTRUE 71126
71124: GO 71137
71126: POP
// bc_type := b_ext_computer ; 22 :
71127: LD_ADDR_OWVAR 42
71131: PUSH
71132: LD_INT 24
71134: ST_TO_ADDR
71135: GO 71385
71137: LD_INT 22
71139: DOUBLE
71140: EQUAL
71141: IFTRUE 71145
71143: GO 71156
71145: POP
// bc_type := b_ext_track ; 23 :
71146: LD_ADDR_OWVAR 42
71150: PUSH
71151: LD_INT 16
71153: ST_TO_ADDR
71154: GO 71385
71156: LD_INT 23
71158: DOUBLE
71159: EQUAL
71160: IFTRUE 71164
71162: GO 71175
71164: POP
// bc_type := b_ext_laser ; 24 :
71165: LD_ADDR_OWVAR 42
71169: PUSH
71170: LD_INT 25
71172: ST_TO_ADDR
71173: GO 71385
71175: LD_INT 24
71177: DOUBLE
71178: EQUAL
71179: IFTRUE 71183
71181: GO 71194
71183: POP
// bc_type := b_control_tower ; 25 :
71184: LD_ADDR_OWVAR 42
71188: PUSH
71189: LD_INT 36
71191: ST_TO_ADDR
71192: GO 71385
71194: LD_INT 25
71196: DOUBLE
71197: EQUAL
71198: IFTRUE 71202
71200: GO 71213
71202: POP
// bc_type := b_breastwork ; 26 :
71203: LD_ADDR_OWVAR 42
71207: PUSH
71208: LD_INT 31
71210: ST_TO_ADDR
71211: GO 71385
71213: LD_INT 26
71215: DOUBLE
71216: EQUAL
71217: IFTRUE 71221
71219: GO 71232
71221: POP
// bc_type := b_bunker ; 27 :
71222: LD_ADDR_OWVAR 42
71226: PUSH
71227: LD_INT 32
71229: ST_TO_ADDR
71230: GO 71385
71232: LD_INT 27
71234: DOUBLE
71235: EQUAL
71236: IFTRUE 71240
71238: GO 71251
71240: POP
// bc_type := b_turret ; 28 :
71241: LD_ADDR_OWVAR 42
71245: PUSH
71246: LD_INT 33
71248: ST_TO_ADDR
71249: GO 71385
71251: LD_INT 28
71253: DOUBLE
71254: EQUAL
71255: IFTRUE 71259
71257: GO 71270
71259: POP
// bc_type := b_armoury ; 29 :
71260: LD_ADDR_OWVAR 42
71264: PUSH
71265: LD_INT 4
71267: ST_TO_ADDR
71268: GO 71385
71270: LD_INT 29
71272: DOUBLE
71273: EQUAL
71274: IFTRUE 71278
71276: GO 71289
71278: POP
// bc_type := b_barracks ; 30 :
71279: LD_ADDR_OWVAR 42
71283: PUSH
71284: LD_INT 5
71286: ST_TO_ADDR
71287: GO 71385
71289: LD_INT 30
71291: DOUBLE
71292: EQUAL
71293: IFTRUE 71297
71295: GO 71308
71297: POP
// bc_type := b_solar_power ; 31 :
71298: LD_ADDR_OWVAR 42
71302: PUSH
71303: LD_INT 27
71305: ST_TO_ADDR
71306: GO 71385
71308: LD_INT 31
71310: DOUBLE
71311: EQUAL
71312: IFTRUE 71316
71314: GO 71327
71316: POP
// bc_type := b_oil_power ; 32 :
71317: LD_ADDR_OWVAR 42
71321: PUSH
71322: LD_INT 26
71324: ST_TO_ADDR
71325: GO 71385
71327: LD_INT 32
71329: DOUBLE
71330: EQUAL
71331: IFTRUE 71335
71333: GO 71346
71335: POP
// bc_type := b_siberite_power ; 33 :
71336: LD_ADDR_OWVAR 42
71340: PUSH
71341: LD_INT 28
71343: ST_TO_ADDR
71344: GO 71385
71346: LD_INT 33
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71354
71352: GO 71365
71354: POP
// bc_type := b_oil_mine ; 34 :
71355: LD_ADDR_OWVAR 42
71359: PUSH
71360: LD_INT 29
71362: ST_TO_ADDR
71363: GO 71385
71365: LD_INT 34
71367: DOUBLE
71368: EQUAL
71369: IFTRUE 71373
71371: GO 71384
71373: POP
// bc_type := b_siberite_mine ; end ;
71374: LD_ADDR_OWVAR 42
71378: PUSH
71379: LD_INT 30
71381: ST_TO_ADDR
71382: GO 71385
71384: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71385: LD_ADDR_VAR 0 8
71389: PUSH
71390: LD_VAR 0 5
71394: PPUSH
71395: LD_VAR 0 6
71399: PPUSH
71400: LD_VAR 0 3
71404: PPUSH
71405: CALL_OW 47
71409: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71410: LD_OWVAR 42
71414: PUSH
71415: LD_INT 32
71417: PUSH
71418: LD_INT 33
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: IN
71425: IFFALSE 71441
// PlaceWeaponTurret ( b , weapon ) ;
71427: LD_VAR 0 8
71431: PPUSH
71432: LD_VAR 0 4
71436: PPUSH
71437: CALL_OW 431
// end ;
71441: LD_VAR 0 7
71445: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71446: LD_INT 0
71448: PPUSH
71449: PPUSH
71450: PPUSH
71451: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71452: LD_ADDR_VAR 0 4
71456: PUSH
71457: LD_INT 22
71459: PUSH
71460: LD_OWVAR 2
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 2
71471: PUSH
71472: LD_INT 30
71474: PUSH
71475: LD_INT 0
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 30
71484: PUSH
71485: LD_INT 1
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: LIST
71496: PUSH
71497: EMPTY
71498: LIST
71499: LIST
71500: PPUSH
71501: CALL_OW 69
71505: ST_TO_ADDR
// if not tmp then
71506: LD_VAR 0 4
71510: NOT
71511: IFFALSE 71515
// exit ;
71513: GO 71574
// for i in tmp do
71515: LD_ADDR_VAR 0 2
71519: PUSH
71520: LD_VAR 0 4
71524: PUSH
71525: FOR_IN
71526: IFFALSE 71572
// for j = 1 to 3 do
71528: LD_ADDR_VAR 0 3
71532: PUSH
71533: DOUBLE
71534: LD_INT 1
71536: DEC
71537: ST_TO_ADDR
71538: LD_INT 3
71540: PUSH
71541: FOR_TO
71542: IFFALSE 71568
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71544: LD_VAR 0 2
71548: PPUSH
71549: CALL_OW 274
71553: PPUSH
71554: LD_VAR 0 3
71558: PPUSH
71559: LD_INT 99999
71561: PPUSH
71562: CALL_OW 277
71566: GO 71541
71568: POP
71569: POP
71570: GO 71525
71572: POP
71573: POP
// end ;
71574: LD_VAR 0 1
71578: RET
// export function hHackSetLevel10 ; var i , j ; begin
71579: LD_INT 0
71581: PPUSH
71582: PPUSH
71583: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71584: LD_ADDR_VAR 0 2
71588: PUSH
71589: LD_INT 21
71591: PUSH
71592: LD_INT 1
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PPUSH
71599: CALL_OW 69
71603: PUSH
71604: FOR_IN
71605: IFFALSE 71657
// if IsSelected ( i ) then
71607: LD_VAR 0 2
71611: PPUSH
71612: CALL_OW 306
71616: IFFALSE 71655
// begin for j := 1 to 4 do
71618: LD_ADDR_VAR 0 3
71622: PUSH
71623: DOUBLE
71624: LD_INT 1
71626: DEC
71627: ST_TO_ADDR
71628: LD_INT 4
71630: PUSH
71631: FOR_TO
71632: IFFALSE 71653
// SetSkill ( i , j , 10 ) ;
71634: LD_VAR 0 2
71638: PPUSH
71639: LD_VAR 0 3
71643: PPUSH
71644: LD_INT 10
71646: PPUSH
71647: CALL_OW 237
71651: GO 71631
71653: POP
71654: POP
// end ;
71655: GO 71604
71657: POP
71658: POP
// end ;
71659: LD_VAR 0 1
71663: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71664: LD_INT 0
71666: PPUSH
71667: PPUSH
71668: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71669: LD_ADDR_VAR 0 2
71673: PUSH
71674: LD_INT 22
71676: PUSH
71677: LD_OWVAR 2
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 21
71688: PUSH
71689: LD_INT 1
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: PPUSH
71700: CALL_OW 69
71704: PUSH
71705: FOR_IN
71706: IFFALSE 71747
// begin for j := 1 to 4 do
71708: LD_ADDR_VAR 0 3
71712: PUSH
71713: DOUBLE
71714: LD_INT 1
71716: DEC
71717: ST_TO_ADDR
71718: LD_INT 4
71720: PUSH
71721: FOR_TO
71722: IFFALSE 71743
// SetSkill ( i , j , 10 ) ;
71724: LD_VAR 0 2
71728: PPUSH
71729: LD_VAR 0 3
71733: PPUSH
71734: LD_INT 10
71736: PPUSH
71737: CALL_OW 237
71741: GO 71721
71743: POP
71744: POP
// end ;
71745: GO 71705
71747: POP
71748: POP
// end ;
71749: LD_VAR 0 1
71753: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71754: LD_INT 0
71756: PPUSH
// uc_side := your_side ;
71757: LD_ADDR_OWVAR 20
71761: PUSH
71762: LD_OWVAR 2
71766: ST_TO_ADDR
// uc_nation := nation ;
71767: LD_ADDR_OWVAR 21
71771: PUSH
71772: LD_VAR 0 1
71776: ST_TO_ADDR
// InitHc ;
71777: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71781: LD_INT 0
71783: PPUSH
71784: LD_VAR 0 2
71788: PPUSH
71789: LD_VAR 0 3
71793: PPUSH
71794: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71798: LD_VAR 0 4
71802: PPUSH
71803: LD_VAR 0 5
71807: PPUSH
71808: CALL_OW 428
71812: PUSH
71813: LD_INT 0
71815: EQUAL
71816: IFFALSE 71840
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71818: CALL_OW 44
71822: PPUSH
71823: LD_VAR 0 4
71827: PPUSH
71828: LD_VAR 0 5
71832: PPUSH
71833: LD_INT 1
71835: PPUSH
71836: CALL_OW 48
// end ;
71840: LD_VAR 0 6
71844: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71845: LD_INT 0
71847: PPUSH
71848: PPUSH
// uc_side := your_side ;
71849: LD_ADDR_OWVAR 20
71853: PUSH
71854: LD_OWVAR 2
71858: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71859: LD_VAR 0 1
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: LD_INT 2
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: LD_INT 4
71875: PUSH
71876: LD_INT 5
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: IN
71886: IFFALSE 71898
// uc_nation := nation_american else
71888: LD_ADDR_OWVAR 21
71892: PUSH
71893: LD_INT 1
71895: ST_TO_ADDR
71896: GO 71941
// if chassis in [ 11 , 12 , 13 , 14 ] then
71898: LD_VAR 0 1
71902: PUSH
71903: LD_INT 11
71905: PUSH
71906: LD_INT 12
71908: PUSH
71909: LD_INT 13
71911: PUSH
71912: LD_INT 14
71914: PUSH
71915: EMPTY
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: IN
71921: IFFALSE 71933
// uc_nation := nation_arabian else
71923: LD_ADDR_OWVAR 21
71927: PUSH
71928: LD_INT 2
71930: ST_TO_ADDR
71931: GO 71941
// uc_nation := nation_russian ;
71933: LD_ADDR_OWVAR 21
71937: PUSH
71938: LD_INT 3
71940: ST_TO_ADDR
// vc_chassis := chassis ;
71941: LD_ADDR_OWVAR 37
71945: PUSH
71946: LD_VAR 0 1
71950: ST_TO_ADDR
// vc_engine := engine ;
71951: LD_ADDR_OWVAR 39
71955: PUSH
71956: LD_VAR 0 2
71960: ST_TO_ADDR
// vc_control := control ;
71961: LD_ADDR_OWVAR 38
71965: PUSH
71966: LD_VAR 0 3
71970: ST_TO_ADDR
// vc_weapon := weapon ;
71971: LD_ADDR_OWVAR 40
71975: PUSH
71976: LD_VAR 0 4
71980: ST_TO_ADDR
// un := CreateVehicle ;
71981: LD_ADDR_VAR 0 8
71985: PUSH
71986: CALL_OW 45
71990: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71991: LD_VAR 0 8
71995: PPUSH
71996: LD_INT 0
71998: PPUSH
71999: LD_INT 5
72001: PPUSH
72002: CALL_OW 12
72006: PPUSH
72007: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
72011: LD_VAR 0 8
72015: PPUSH
72016: LD_VAR 0 5
72020: PPUSH
72021: LD_VAR 0 6
72025: PPUSH
72026: LD_INT 1
72028: PPUSH
72029: CALL_OW 48
// end ;
72033: LD_VAR 0 7
72037: RET
// export hInvincible ; every 1 do
72038: GO 72040
72040: DISABLE
// hInvincible := [ ] ;
72041: LD_ADDR_EXP 103
72045: PUSH
72046: EMPTY
72047: ST_TO_ADDR
72048: END
// every 10 do var i ;
72049: GO 72051
72051: DISABLE
72052: LD_INT 0
72054: PPUSH
// begin enable ;
72055: ENABLE
// if not hInvincible then
72056: LD_EXP 103
72060: NOT
72061: IFFALSE 72065
// exit ;
72063: GO 72109
// for i in hInvincible do
72065: LD_ADDR_VAR 0 1
72069: PUSH
72070: LD_EXP 103
72074: PUSH
72075: FOR_IN
72076: IFFALSE 72107
// if GetLives ( i ) < 1000 then
72078: LD_VAR 0 1
72082: PPUSH
72083: CALL_OW 256
72087: PUSH
72088: LD_INT 1000
72090: LESS
72091: IFFALSE 72105
// SetLives ( i , 1000 ) ;
72093: LD_VAR 0 1
72097: PPUSH
72098: LD_INT 1000
72100: PPUSH
72101: CALL_OW 234
72105: GO 72075
72107: POP
72108: POP
// end ;
72109: PPOPN 1
72111: END
// export function hHackInvincible ; var i ; begin
72112: LD_INT 0
72114: PPUSH
72115: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72116: LD_ADDR_VAR 0 2
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: LD_INT 21
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 21
72136: PUSH
72137: LD_INT 2
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: PPUSH
72149: CALL_OW 69
72153: PUSH
72154: FOR_IN
72155: IFFALSE 72216
// if IsSelected ( i ) then
72157: LD_VAR 0 2
72161: PPUSH
72162: CALL_OW 306
72166: IFFALSE 72214
// begin if i in hInvincible then
72168: LD_VAR 0 2
72172: PUSH
72173: LD_EXP 103
72177: IN
72178: IFFALSE 72198
// hInvincible := hInvincible diff i else
72180: LD_ADDR_EXP 103
72184: PUSH
72185: LD_EXP 103
72189: PUSH
72190: LD_VAR 0 2
72194: DIFF
72195: ST_TO_ADDR
72196: GO 72214
// hInvincible := hInvincible union i ;
72198: LD_ADDR_EXP 103
72202: PUSH
72203: LD_EXP 103
72207: PUSH
72208: LD_VAR 0 2
72212: UNION
72213: ST_TO_ADDR
// end ;
72214: GO 72154
72216: POP
72217: POP
// end ;
72218: LD_VAR 0 1
72222: RET
// export function hHackInvisible ; var i , j ; begin
72223: LD_INT 0
72225: PPUSH
72226: PPUSH
72227: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72228: LD_ADDR_VAR 0 2
72232: PUSH
72233: LD_INT 21
72235: PUSH
72236: LD_INT 1
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PPUSH
72243: CALL_OW 69
72247: PUSH
72248: FOR_IN
72249: IFFALSE 72273
// if IsSelected ( i ) then
72251: LD_VAR 0 2
72255: PPUSH
72256: CALL_OW 306
72260: IFFALSE 72271
// ComForceInvisible ( i ) ;
72262: LD_VAR 0 2
72266: PPUSH
72267: CALL_OW 496
72271: GO 72248
72273: POP
72274: POP
// end ;
72275: LD_VAR 0 1
72279: RET
// export function hHackChangeYourSide ; begin
72280: LD_INT 0
72282: PPUSH
// if your_side = 8 then
72283: LD_OWVAR 2
72287: PUSH
72288: LD_INT 8
72290: EQUAL
72291: IFFALSE 72303
// your_side := 0 else
72293: LD_ADDR_OWVAR 2
72297: PUSH
72298: LD_INT 0
72300: ST_TO_ADDR
72301: GO 72317
// your_side := your_side + 1 ;
72303: LD_ADDR_OWVAR 2
72307: PUSH
72308: LD_OWVAR 2
72312: PUSH
72313: LD_INT 1
72315: PLUS
72316: ST_TO_ADDR
// end ;
72317: LD_VAR 0 1
72321: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72322: LD_INT 0
72324: PPUSH
72325: PPUSH
72326: PPUSH
// for i in all_units do
72327: LD_ADDR_VAR 0 2
72331: PUSH
72332: LD_OWVAR 3
72336: PUSH
72337: FOR_IN
72338: IFFALSE 72416
// if IsSelected ( i ) then
72340: LD_VAR 0 2
72344: PPUSH
72345: CALL_OW 306
72349: IFFALSE 72414
// begin j := GetSide ( i ) ;
72351: LD_ADDR_VAR 0 3
72355: PUSH
72356: LD_VAR 0 2
72360: PPUSH
72361: CALL_OW 255
72365: ST_TO_ADDR
// if j = 8 then
72366: LD_VAR 0 3
72370: PUSH
72371: LD_INT 8
72373: EQUAL
72374: IFFALSE 72386
// j := 0 else
72376: LD_ADDR_VAR 0 3
72380: PUSH
72381: LD_INT 0
72383: ST_TO_ADDR
72384: GO 72400
// j := j + 1 ;
72386: LD_ADDR_VAR 0 3
72390: PUSH
72391: LD_VAR 0 3
72395: PUSH
72396: LD_INT 1
72398: PLUS
72399: ST_TO_ADDR
// SetSide ( i , j ) ;
72400: LD_VAR 0 2
72404: PPUSH
72405: LD_VAR 0 3
72409: PPUSH
72410: CALL_OW 235
// end ;
72414: GO 72337
72416: POP
72417: POP
// end ;
72418: LD_VAR 0 1
72422: RET
// export function hHackFog ; begin
72423: LD_INT 0
72425: PPUSH
// FogOff ( true ) ;
72426: LD_INT 1
72428: PPUSH
72429: CALL_OW 344
// end ;
72433: LD_VAR 0 1
72437: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72438: LD_INT 0
72440: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72441: LD_VAR 0 1
72445: PPUSH
72446: LD_VAR 0 2
72450: PPUSH
72451: LD_VAR 0 3
72455: PPUSH
72456: LD_INT 1
72458: PPUSH
72459: LD_INT 1
72461: PPUSH
72462: CALL_OW 483
// CenterOnXY ( x , y ) ;
72466: LD_VAR 0 2
72470: PPUSH
72471: LD_VAR 0 3
72475: PPUSH
72476: CALL_OW 84
// end ;
72480: LD_VAR 0 4
72484: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72485: LD_INT 0
72487: PPUSH
72488: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72489: LD_VAR 0 1
72493: NOT
72494: PUSH
72495: LD_VAR 0 2
72499: PPUSH
72500: LD_VAR 0 3
72504: PPUSH
72505: CALL_OW 488
72509: NOT
72510: OR
72511: PUSH
72512: LD_VAR 0 1
72516: PPUSH
72517: CALL_OW 266
72521: PUSH
72522: LD_INT 3
72524: NONEQUAL
72525: PUSH
72526: LD_VAR 0 1
72530: PPUSH
72531: CALL_OW 247
72535: PUSH
72536: LD_INT 1
72538: EQUAL
72539: NOT
72540: AND
72541: OR
72542: IFFALSE 72546
// exit ;
72544: GO 72695
// if GetType ( factory ) = unit_human then
72546: LD_VAR 0 1
72550: PPUSH
72551: CALL_OW 247
72555: PUSH
72556: LD_INT 1
72558: EQUAL
72559: IFFALSE 72576
// factory := IsInUnit ( factory ) ;
72561: LD_ADDR_VAR 0 1
72565: PUSH
72566: LD_VAR 0 1
72570: PPUSH
72571: CALL_OW 310
72575: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72576: LD_VAR 0 1
72580: PPUSH
72581: CALL_OW 266
72585: PUSH
72586: LD_INT 3
72588: NONEQUAL
72589: IFFALSE 72593
// exit ;
72591: GO 72695
// if HexInfo ( x , y ) = factory then
72593: LD_VAR 0 2
72597: PPUSH
72598: LD_VAR 0 3
72602: PPUSH
72603: CALL_OW 428
72607: PUSH
72608: LD_VAR 0 1
72612: EQUAL
72613: IFFALSE 72640
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72615: LD_ADDR_EXP 104
72619: PUSH
72620: LD_EXP 104
72624: PPUSH
72625: LD_VAR 0 1
72629: PPUSH
72630: LD_INT 0
72632: PPUSH
72633: CALL_OW 1
72637: ST_TO_ADDR
72638: GO 72691
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72640: LD_ADDR_EXP 104
72644: PUSH
72645: LD_EXP 104
72649: PPUSH
72650: LD_VAR 0 1
72654: PPUSH
72655: LD_VAR 0 1
72659: PPUSH
72660: CALL_OW 255
72664: PUSH
72665: LD_VAR 0 1
72669: PUSH
72670: LD_VAR 0 2
72674: PUSH
72675: LD_VAR 0 3
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: PPUSH
72686: CALL_OW 1
72690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72691: CALL 72700 0 0
// end ;
72695: LD_VAR 0 4
72699: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72700: LD_INT 0
72702: PPUSH
72703: PPUSH
72704: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72705: LD_STRING resetFactoryWaypoint();
72707: PPUSH
72708: CALL_OW 559
// if factoryWaypoints then
72712: LD_EXP 104
72716: IFFALSE 72842
// begin list := PrepareArray ( factoryWaypoints ) ;
72718: LD_ADDR_VAR 0 3
72722: PUSH
72723: LD_EXP 104
72727: PPUSH
72728: CALL 56655 0 1
72732: ST_TO_ADDR
// for i := 1 to list do
72733: LD_ADDR_VAR 0 2
72737: PUSH
72738: DOUBLE
72739: LD_INT 1
72741: DEC
72742: ST_TO_ADDR
72743: LD_VAR 0 3
72747: PUSH
72748: FOR_TO
72749: IFFALSE 72840
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72751: LD_STRING setFactoryWaypointXY(
72753: PUSH
72754: LD_VAR 0 3
72758: PUSH
72759: LD_VAR 0 2
72763: ARRAY
72764: PUSH
72765: LD_INT 1
72767: ARRAY
72768: STR
72769: PUSH
72770: LD_STRING ,
72772: STR
72773: PUSH
72774: LD_VAR 0 3
72778: PUSH
72779: LD_VAR 0 2
72783: ARRAY
72784: PUSH
72785: LD_INT 2
72787: ARRAY
72788: STR
72789: PUSH
72790: LD_STRING ,
72792: STR
72793: PUSH
72794: LD_VAR 0 3
72798: PUSH
72799: LD_VAR 0 2
72803: ARRAY
72804: PUSH
72805: LD_INT 3
72807: ARRAY
72808: STR
72809: PUSH
72810: LD_STRING ,
72812: STR
72813: PUSH
72814: LD_VAR 0 3
72818: PUSH
72819: LD_VAR 0 2
72823: ARRAY
72824: PUSH
72825: LD_INT 4
72827: ARRAY
72828: STR
72829: PUSH
72830: LD_STRING )
72832: STR
72833: PPUSH
72834: CALL_OW 559
72838: GO 72748
72840: POP
72841: POP
// end ; end ;
72842: LD_VAR 0 1
72846: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72847: LD_INT 0
72849: PPUSH
// if HexInfo ( x , y ) = warehouse then
72850: LD_VAR 0 2
72854: PPUSH
72855: LD_VAR 0 3
72859: PPUSH
72860: CALL_OW 428
72864: PUSH
72865: LD_VAR 0 1
72869: EQUAL
72870: IFFALSE 72897
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72872: LD_ADDR_EXP 105
72876: PUSH
72877: LD_EXP 105
72881: PPUSH
72882: LD_VAR 0 1
72886: PPUSH
72887: LD_INT 0
72889: PPUSH
72890: CALL_OW 1
72894: ST_TO_ADDR
72895: GO 72948
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72897: LD_ADDR_EXP 105
72901: PUSH
72902: LD_EXP 105
72906: PPUSH
72907: LD_VAR 0 1
72911: PPUSH
72912: LD_VAR 0 1
72916: PPUSH
72917: CALL_OW 255
72921: PUSH
72922: LD_VAR 0 1
72926: PUSH
72927: LD_VAR 0 2
72931: PUSH
72932: LD_VAR 0 3
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: LIST
72941: LIST
72942: PPUSH
72943: CALL_OW 1
72947: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72948: CALL 72957 0 0
// end ;
72952: LD_VAR 0 4
72956: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72957: LD_INT 0
72959: PPUSH
72960: PPUSH
72961: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72962: LD_STRING resetWarehouseGatheringPoints();
72964: PPUSH
72965: CALL_OW 559
// if warehouseGatheringPoints then
72969: LD_EXP 105
72973: IFFALSE 73099
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72975: LD_ADDR_VAR 0 3
72979: PUSH
72980: LD_EXP 105
72984: PPUSH
72985: CALL 56655 0 1
72989: ST_TO_ADDR
// for i := 1 to list do
72990: LD_ADDR_VAR 0 2
72994: PUSH
72995: DOUBLE
72996: LD_INT 1
72998: DEC
72999: ST_TO_ADDR
73000: LD_VAR 0 3
73004: PUSH
73005: FOR_TO
73006: IFFALSE 73097
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73008: LD_STRING setWarehouseGatheringPointXY(
73010: PUSH
73011: LD_VAR 0 3
73015: PUSH
73016: LD_VAR 0 2
73020: ARRAY
73021: PUSH
73022: LD_INT 1
73024: ARRAY
73025: STR
73026: PUSH
73027: LD_STRING ,
73029: STR
73030: PUSH
73031: LD_VAR 0 3
73035: PUSH
73036: LD_VAR 0 2
73040: ARRAY
73041: PUSH
73042: LD_INT 2
73044: ARRAY
73045: STR
73046: PUSH
73047: LD_STRING ,
73049: STR
73050: PUSH
73051: LD_VAR 0 3
73055: PUSH
73056: LD_VAR 0 2
73060: ARRAY
73061: PUSH
73062: LD_INT 3
73064: ARRAY
73065: STR
73066: PUSH
73067: LD_STRING ,
73069: STR
73070: PUSH
73071: LD_VAR 0 3
73075: PUSH
73076: LD_VAR 0 2
73080: ARRAY
73081: PUSH
73082: LD_INT 4
73084: ARRAY
73085: STR
73086: PUSH
73087: LD_STRING )
73089: STR
73090: PPUSH
73091: CALL_OW 559
73095: GO 73005
73097: POP
73098: POP
// end ; end ;
73099: LD_VAR 0 1
73103: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73104: LD_EXP 105
73108: IFFALSE 73793
73110: GO 73112
73112: DISABLE
73113: LD_INT 0
73115: PPUSH
73116: PPUSH
73117: PPUSH
73118: PPUSH
73119: PPUSH
73120: PPUSH
73121: PPUSH
73122: PPUSH
73123: PPUSH
// begin enable ;
73124: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73125: LD_ADDR_VAR 0 3
73129: PUSH
73130: LD_EXP 105
73134: PPUSH
73135: CALL 56655 0 1
73139: ST_TO_ADDR
// if not list then
73140: LD_VAR 0 3
73144: NOT
73145: IFFALSE 73149
// exit ;
73147: GO 73793
// for i := 1 to list do
73149: LD_ADDR_VAR 0 1
73153: PUSH
73154: DOUBLE
73155: LD_INT 1
73157: DEC
73158: ST_TO_ADDR
73159: LD_VAR 0 3
73163: PUSH
73164: FOR_TO
73165: IFFALSE 73791
// begin depot := list [ i ] [ 2 ] ;
73167: LD_ADDR_VAR 0 8
73171: PUSH
73172: LD_VAR 0 3
73176: PUSH
73177: LD_VAR 0 1
73181: ARRAY
73182: PUSH
73183: LD_INT 2
73185: ARRAY
73186: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73187: LD_ADDR_VAR 0 5
73191: PUSH
73192: LD_VAR 0 3
73196: PUSH
73197: LD_VAR 0 1
73201: ARRAY
73202: PUSH
73203: LD_INT 1
73205: ARRAY
73206: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73207: LD_VAR 0 8
73211: PPUSH
73212: CALL_OW 301
73216: PUSH
73217: LD_VAR 0 5
73221: PUSH
73222: LD_VAR 0 8
73226: PPUSH
73227: CALL_OW 255
73231: NONEQUAL
73232: OR
73233: IFFALSE 73262
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73235: LD_ADDR_EXP 105
73239: PUSH
73240: LD_EXP 105
73244: PPUSH
73245: LD_VAR 0 8
73249: PPUSH
73250: LD_INT 0
73252: PPUSH
73253: CALL_OW 1
73257: ST_TO_ADDR
// exit ;
73258: POP
73259: POP
73260: GO 73793
// end ; x := list [ i ] [ 3 ] ;
73262: LD_ADDR_VAR 0 6
73266: PUSH
73267: LD_VAR 0 3
73271: PUSH
73272: LD_VAR 0 1
73276: ARRAY
73277: PUSH
73278: LD_INT 3
73280: ARRAY
73281: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73282: LD_ADDR_VAR 0 7
73286: PUSH
73287: LD_VAR 0 3
73291: PUSH
73292: LD_VAR 0 1
73296: ARRAY
73297: PUSH
73298: LD_INT 4
73300: ARRAY
73301: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73302: LD_ADDR_VAR 0 9
73306: PUSH
73307: LD_VAR 0 6
73311: PPUSH
73312: LD_VAR 0 7
73316: PPUSH
73317: LD_INT 16
73319: PPUSH
73320: CALL 55239 0 3
73324: ST_TO_ADDR
// if not cratesNearbyPoint then
73325: LD_VAR 0 9
73329: NOT
73330: IFFALSE 73336
// exit ;
73332: POP
73333: POP
73334: GO 73793
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73336: LD_ADDR_VAR 0 4
73340: PUSH
73341: LD_INT 22
73343: PUSH
73344: LD_VAR 0 5
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 3
73355: PUSH
73356: LD_INT 60
73358: PUSH
73359: EMPTY
73360: LIST
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 91
73368: PUSH
73369: LD_VAR 0 8
73373: PUSH
73374: LD_INT 6
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 2
73384: PUSH
73385: LD_INT 25
73387: PUSH
73388: LD_INT 2
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 25
73397: PUSH
73398: LD_INT 16
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: LIST
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: LIST
73414: LIST
73415: PPUSH
73416: CALL_OW 69
73420: PUSH
73421: LD_VAR 0 8
73425: PPUSH
73426: CALL_OW 313
73430: PPUSH
73431: LD_INT 3
73433: PUSH
73434: LD_INT 60
73436: PUSH
73437: EMPTY
73438: LIST
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 2
73446: PUSH
73447: LD_INT 25
73449: PUSH
73450: LD_INT 2
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 25
73459: PUSH
73460: LD_INT 16
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: LIST
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PPUSH
73476: CALL_OW 72
73480: UNION
73481: ST_TO_ADDR
// if tmp then
73482: LD_VAR 0 4
73486: IFFALSE 73566
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73488: LD_ADDR_VAR 0 4
73492: PUSH
73493: LD_VAR 0 4
73497: PPUSH
73498: LD_INT 3
73500: PPUSH
73501: CALL 53208 0 2
73505: ST_TO_ADDR
// for j in tmp do
73506: LD_ADDR_VAR 0 2
73510: PUSH
73511: LD_VAR 0 4
73515: PUSH
73516: FOR_IN
73517: IFFALSE 73560
// begin if IsInUnit ( j ) then
73519: LD_VAR 0 2
73523: PPUSH
73524: CALL_OW 310
73528: IFFALSE 73539
// ComExit ( j ) ;
73530: LD_VAR 0 2
73534: PPUSH
73535: CALL 53291 0 1
// AddComCollect ( j , x , y ) ;
73539: LD_VAR 0 2
73543: PPUSH
73544: LD_VAR 0 6
73548: PPUSH
73549: LD_VAR 0 7
73553: PPUSH
73554: CALL_OW 177
// end ;
73558: GO 73516
73560: POP
73561: POP
// exit ;
73562: POP
73563: POP
73564: GO 73793
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73566: LD_ADDR_VAR 0 4
73570: PUSH
73571: LD_INT 22
73573: PUSH
73574: LD_VAR 0 5
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 91
73585: PUSH
73586: LD_VAR 0 8
73590: PUSH
73591: LD_INT 8
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 2
73601: PUSH
73602: LD_INT 34
73604: PUSH
73605: LD_INT 12
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 34
73614: PUSH
73615: LD_INT 51
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 34
73624: PUSH
73625: LD_INT 32
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 34
73634: PUSH
73635: LD_INT 89
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: LIST
73653: PPUSH
73654: CALL_OW 69
73658: ST_TO_ADDR
// if tmp then
73659: LD_VAR 0 4
73663: IFFALSE 73789
// begin for j in tmp do
73665: LD_ADDR_VAR 0 2
73669: PUSH
73670: LD_VAR 0 4
73674: PUSH
73675: FOR_IN
73676: IFFALSE 73787
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73678: LD_VAR 0 2
73682: PPUSH
73683: CALL_OW 262
73687: PUSH
73688: LD_INT 3
73690: EQUAL
73691: PUSH
73692: LD_VAR 0 2
73696: PPUSH
73697: CALL_OW 261
73701: PUSH
73702: LD_INT 20
73704: GREATER
73705: OR
73706: PUSH
73707: LD_VAR 0 2
73711: PPUSH
73712: CALL_OW 314
73716: NOT
73717: AND
73718: PUSH
73719: LD_VAR 0 2
73723: PPUSH
73724: CALL_OW 263
73728: PUSH
73729: LD_INT 1
73731: NONEQUAL
73732: PUSH
73733: LD_VAR 0 2
73737: PPUSH
73738: CALL_OW 311
73742: OR
73743: AND
73744: IFFALSE 73785
// begin ComCollect ( j , x , y ) ;
73746: LD_VAR 0 2
73750: PPUSH
73751: LD_VAR 0 6
73755: PPUSH
73756: LD_VAR 0 7
73760: PPUSH
73761: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73765: LD_VAR 0 2
73769: PPUSH
73770: LD_VAR 0 8
73774: PPUSH
73775: CALL_OW 172
// exit ;
73779: POP
73780: POP
73781: POP
73782: POP
73783: GO 73793
// end ;
73785: GO 73675
73787: POP
73788: POP
// end ; end ;
73789: GO 73164
73791: POP
73792: POP
// end ; end_of_file
73793: PPOPN 9
73795: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73796: LD_INT 0
73798: PPUSH
73799: PPUSH
73800: PPUSH
73801: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73802: LD_VAR 0 1
73806: PPUSH
73807: CALL_OW 264
73811: PUSH
73812: LD_INT 91
73814: EQUAL
73815: IFFALSE 73887
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73817: LD_INT 68
73819: PPUSH
73820: LD_VAR 0 1
73824: PPUSH
73825: CALL_OW 255
73829: PPUSH
73830: CALL_OW 321
73834: PUSH
73835: LD_INT 2
73837: EQUAL
73838: IFFALSE 73850
// eff := 70 else
73840: LD_ADDR_VAR 0 4
73844: PUSH
73845: LD_INT 70
73847: ST_TO_ADDR
73848: GO 73858
// eff := 30 ;
73850: LD_ADDR_VAR 0 4
73854: PUSH
73855: LD_INT 30
73857: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73858: LD_VAR 0 1
73862: PPUSH
73863: CALL_OW 250
73867: PPUSH
73868: LD_VAR 0 1
73872: PPUSH
73873: CALL_OW 251
73877: PPUSH
73878: LD_VAR 0 4
73882: PPUSH
73883: CALL_OW 495
// end ; end ;
73887: LD_VAR 0 2
73891: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73892: LD_INT 0
73894: PPUSH
// end ;
73895: LD_VAR 0 4
73899: RET
// export function SOS_Command ( cmd ) ; begin
73900: LD_INT 0
73902: PPUSH
// end ;
73903: LD_VAR 0 2
73907: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73908: LD_INT 0
73910: PPUSH
// end ;
73911: LD_VAR 0 6
73915: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73916: LD_INT 0
73918: PPUSH
73919: PPUSH
// if not vehicle or not factory then
73920: LD_VAR 0 1
73924: NOT
73925: PUSH
73926: LD_VAR 0 2
73930: NOT
73931: OR
73932: IFFALSE 73936
// exit ;
73934: GO 74179
// if factoryWaypoints >= factory then
73936: LD_EXP 104
73940: PUSH
73941: LD_VAR 0 2
73945: GREATEREQUAL
73946: IFFALSE 74179
// if factoryWaypoints [ factory ] then
73948: LD_EXP 104
73952: PUSH
73953: LD_VAR 0 2
73957: ARRAY
73958: IFFALSE 74179
// begin if GetControl ( vehicle ) = control_manual then
73960: LD_VAR 0 1
73964: PPUSH
73965: CALL_OW 263
73969: PUSH
73970: LD_INT 1
73972: EQUAL
73973: IFFALSE 74066
// begin driver := IsDrivenBy ( vehicle ) ;
73975: LD_ADDR_VAR 0 4
73979: PUSH
73980: LD_VAR 0 1
73984: PPUSH
73985: CALL_OW 311
73989: ST_TO_ADDR
// if not HasTask ( driver ) then
73990: LD_VAR 0 4
73994: PPUSH
73995: CALL_OW 314
73999: NOT
74000: IFFALSE 74064
// begin ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74002: LD_VAR 0 4
74006: PPUSH
74007: LD_EXP 104
74011: PUSH
74012: LD_VAR 0 2
74016: ARRAY
74017: PUSH
74018: LD_INT 3
74020: ARRAY
74021: PPUSH
74022: LD_EXP 104
74026: PUSH
74027: LD_VAR 0 2
74031: ARRAY
74032: PUSH
74033: LD_INT 4
74035: ARRAY
74036: PPUSH
74037: CALL_OW 111
// AddComExitVehicle ( driver ) ;
74041: LD_VAR 0 4
74045: PPUSH
74046: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
74050: LD_VAR 0 4
74054: PPUSH
74055: LD_VAR 0 2
74059: PPUSH
74060: CALL_OW 180
// end ; end else
74064: GO 74179
// if GetControl ( vehicle ) = control_remote then
74066: LD_VAR 0 1
74070: PPUSH
74071: CALL_OW 263
74075: PUSH
74076: LD_INT 2
74078: EQUAL
74079: IFFALSE 74140
// begin wait ( 0 0$2 ) ;
74081: LD_INT 70
74083: PPUSH
74084: CALL_OW 67
// if Connect ( vehicle ) then
74088: LD_VAR 0 1
74092: PPUSH
74093: CALL 23510 0 1
74097: IFFALSE 74138
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74099: LD_VAR 0 1
74103: PPUSH
74104: LD_EXP 104
74108: PUSH
74109: LD_VAR 0 2
74113: ARRAY
74114: PUSH
74115: LD_INT 3
74117: ARRAY
74118: PPUSH
74119: LD_EXP 104
74123: PUSH
74124: LD_VAR 0 2
74128: ARRAY
74129: PUSH
74130: LD_INT 4
74132: ARRAY
74133: PPUSH
74134: CALL_OW 171
// end else
74138: GO 74179
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74140: LD_VAR 0 1
74144: PPUSH
74145: LD_EXP 104
74149: PUSH
74150: LD_VAR 0 2
74154: ARRAY
74155: PUSH
74156: LD_INT 3
74158: ARRAY
74159: PPUSH
74160: LD_EXP 104
74164: PUSH
74165: LD_VAR 0 2
74169: ARRAY
74170: PUSH
74171: LD_INT 4
74173: ARRAY
74174: PPUSH
74175: CALL_OW 171
// end ; end ;
74179: LD_VAR 0 3
74183: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74184: LD_INT 0
74186: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74187: LD_VAR 0 1
74191: PUSH
74192: LD_INT 250
74194: EQUAL
74195: PUSH
74196: LD_VAR 0 2
74200: PPUSH
74201: CALL_OW 264
74205: PUSH
74206: LD_INT 81
74208: EQUAL
74209: AND
74210: IFFALSE 74231
// MinerPlaceMine ( unit , x , y ) ;
74212: LD_VAR 0 2
74216: PPUSH
74217: LD_VAR 0 4
74221: PPUSH
74222: LD_VAR 0 5
74226: PPUSH
74227: CALL 77221 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74231: LD_VAR 0 1
74235: PUSH
74236: LD_INT 251
74238: EQUAL
74239: PUSH
74240: LD_VAR 0 2
74244: PPUSH
74245: CALL_OW 264
74249: PUSH
74250: LD_INT 81
74252: EQUAL
74253: AND
74254: IFFALSE 74275
// MinerDetonateMine ( unit , x , y ) ;
74256: LD_VAR 0 2
74260: PPUSH
74261: LD_VAR 0 4
74265: PPUSH
74266: LD_VAR 0 5
74270: PPUSH
74271: CALL 77496 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74275: LD_VAR 0 1
74279: PUSH
74280: LD_INT 252
74282: EQUAL
74283: PUSH
74284: LD_VAR 0 2
74288: PPUSH
74289: CALL_OW 264
74293: PUSH
74294: LD_INT 81
74296: EQUAL
74297: AND
74298: IFFALSE 74319
// MinerCreateMinefield ( unit , x , y ) ;
74300: LD_VAR 0 2
74304: PPUSH
74305: LD_VAR 0 4
74309: PPUSH
74310: LD_VAR 0 5
74314: PPUSH
74315: CALL 77913 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74319: LD_VAR 0 1
74323: PUSH
74324: LD_INT 253
74326: EQUAL
74327: PUSH
74328: LD_VAR 0 2
74332: PPUSH
74333: CALL_OW 257
74337: PUSH
74338: LD_INT 5
74340: EQUAL
74341: AND
74342: IFFALSE 74363
// ComBinocular ( unit , x , y ) ;
74344: LD_VAR 0 2
74348: PPUSH
74349: LD_VAR 0 4
74353: PPUSH
74354: LD_VAR 0 5
74358: PPUSH
74359: CALL 78282 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74363: LD_VAR 0 1
74367: PUSH
74368: LD_INT 254
74370: EQUAL
74371: PUSH
74372: LD_VAR 0 2
74376: PPUSH
74377: CALL_OW 264
74381: PUSH
74382: LD_INT 99
74384: EQUAL
74385: AND
74386: PUSH
74387: LD_VAR 0 3
74391: PPUSH
74392: CALL_OW 263
74396: PUSH
74397: LD_INT 3
74399: EQUAL
74400: AND
74401: IFFALSE 74417
// HackDestroyVehicle ( unit , selectedUnit ) ;
74403: LD_VAR 0 2
74407: PPUSH
74408: LD_VAR 0 3
74412: PPUSH
74413: CALL 76585 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74417: LD_VAR 0 1
74421: PUSH
74422: LD_INT 255
74424: EQUAL
74425: PUSH
74426: LD_VAR 0 2
74430: PPUSH
74431: CALL_OW 264
74435: PUSH
74436: LD_INT 14
74438: PUSH
74439: LD_INT 53
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: IN
74446: AND
74447: PUSH
74448: LD_VAR 0 4
74452: PPUSH
74453: LD_VAR 0 5
74457: PPUSH
74458: CALL_OW 488
74462: AND
74463: IFFALSE 74487
// CutTreeXYR ( unit , x , y , 12 ) ;
74465: LD_VAR 0 2
74469: PPUSH
74470: LD_VAR 0 4
74474: PPUSH
74475: LD_VAR 0 5
74479: PPUSH
74480: LD_INT 12
74482: PPUSH
74483: CALL 74582 0 4
// if cmd = 256 then
74487: LD_VAR 0 1
74491: PUSH
74492: LD_INT 256
74494: EQUAL
74495: IFFALSE 74516
// SetFactoryWaypoint ( unit , x , y ) ;
74497: LD_VAR 0 2
74501: PPUSH
74502: LD_VAR 0 4
74506: PPUSH
74507: LD_VAR 0 5
74511: PPUSH
74512: CALL 72485 0 3
// if cmd = 257 then
74516: LD_VAR 0 1
74520: PUSH
74521: LD_INT 257
74523: EQUAL
74524: IFFALSE 74545
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74526: LD_VAR 0 2
74530: PPUSH
74531: LD_VAR 0 4
74535: PPUSH
74536: LD_VAR 0 5
74540: PPUSH
74541: CALL 72847 0 3
// if cmd = 258 then
74545: LD_VAR 0 1
74549: PUSH
74550: LD_INT 258
74552: EQUAL
74553: IFFALSE 74577
// BurnTreeXYR ( unit , x , y , 8 ) ;
74555: LD_VAR 0 2
74559: PPUSH
74560: LD_VAR 0 4
74564: PPUSH
74565: LD_VAR 0 5
74569: PPUSH
74570: LD_INT 8
74572: PPUSH
74573: CALL 74976 0 4
// end ;
74577: LD_VAR 0 6
74581: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74582: LD_INT 0
74584: PPUSH
74585: PPUSH
74586: PPUSH
74587: PPUSH
74588: PPUSH
74589: PPUSH
74590: PPUSH
74591: PPUSH
74592: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74593: LD_VAR 0 1
74597: PPUSH
74598: CALL_OW 302
74602: NOT
74603: PUSH
74604: LD_VAR 0 2
74608: PPUSH
74609: LD_VAR 0 3
74613: PPUSH
74614: CALL_OW 488
74618: NOT
74619: OR
74620: PUSH
74621: LD_VAR 0 4
74625: NOT
74626: OR
74627: IFFALSE 74631
// exit ;
74629: GO 74971
// list := [ ] ;
74631: LD_ADDR_VAR 0 13
74635: PUSH
74636: EMPTY
74637: ST_TO_ADDR
// if x - r < 0 then
74638: LD_VAR 0 2
74642: PUSH
74643: LD_VAR 0 4
74647: MINUS
74648: PUSH
74649: LD_INT 0
74651: LESS
74652: IFFALSE 74664
// min_x := 0 else
74654: LD_ADDR_VAR 0 7
74658: PUSH
74659: LD_INT 0
74661: ST_TO_ADDR
74662: GO 74680
// min_x := x - r ;
74664: LD_ADDR_VAR 0 7
74668: PUSH
74669: LD_VAR 0 2
74673: PUSH
74674: LD_VAR 0 4
74678: MINUS
74679: ST_TO_ADDR
// if y - r < 0 then
74680: LD_VAR 0 3
74684: PUSH
74685: LD_VAR 0 4
74689: MINUS
74690: PUSH
74691: LD_INT 0
74693: LESS
74694: IFFALSE 74706
// min_y := 0 else
74696: LD_ADDR_VAR 0 8
74700: PUSH
74701: LD_INT 0
74703: ST_TO_ADDR
74704: GO 74722
// min_y := y - r ;
74706: LD_ADDR_VAR 0 8
74710: PUSH
74711: LD_VAR 0 3
74715: PUSH
74716: LD_VAR 0 4
74720: MINUS
74721: ST_TO_ADDR
// max_x := x + r ;
74722: LD_ADDR_VAR 0 9
74726: PUSH
74727: LD_VAR 0 2
74731: PUSH
74732: LD_VAR 0 4
74736: PLUS
74737: ST_TO_ADDR
// max_y := y + r ;
74738: LD_ADDR_VAR 0 10
74742: PUSH
74743: LD_VAR 0 3
74747: PUSH
74748: LD_VAR 0 4
74752: PLUS
74753: ST_TO_ADDR
// for _x = min_x to max_x do
74754: LD_ADDR_VAR 0 11
74758: PUSH
74759: DOUBLE
74760: LD_VAR 0 7
74764: DEC
74765: ST_TO_ADDR
74766: LD_VAR 0 9
74770: PUSH
74771: FOR_TO
74772: IFFALSE 74889
// for _y = min_y to max_y do
74774: LD_ADDR_VAR 0 12
74778: PUSH
74779: DOUBLE
74780: LD_VAR 0 8
74784: DEC
74785: ST_TO_ADDR
74786: LD_VAR 0 10
74790: PUSH
74791: FOR_TO
74792: IFFALSE 74885
// begin if not ValidHex ( _x , _y ) then
74794: LD_VAR 0 11
74798: PPUSH
74799: LD_VAR 0 12
74803: PPUSH
74804: CALL_OW 488
74808: NOT
74809: IFFALSE 74813
// continue ;
74811: GO 74791
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74813: LD_VAR 0 11
74817: PPUSH
74818: LD_VAR 0 12
74822: PPUSH
74823: CALL_OW 351
74827: PUSH
74828: LD_VAR 0 11
74832: PPUSH
74833: LD_VAR 0 12
74837: PPUSH
74838: CALL_OW 554
74842: AND
74843: IFFALSE 74883
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74845: LD_ADDR_VAR 0 13
74849: PUSH
74850: LD_VAR 0 13
74854: PPUSH
74855: LD_VAR 0 13
74859: PUSH
74860: LD_INT 1
74862: PLUS
74863: PPUSH
74864: LD_VAR 0 11
74868: PUSH
74869: LD_VAR 0 12
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PPUSH
74878: CALL_OW 2
74882: ST_TO_ADDR
// end ;
74883: GO 74791
74885: POP
74886: POP
74887: GO 74771
74889: POP
74890: POP
// if not list then
74891: LD_VAR 0 13
74895: NOT
74896: IFFALSE 74900
// exit ;
74898: GO 74971
// for i in list do
74900: LD_ADDR_VAR 0 6
74904: PUSH
74905: LD_VAR 0 13
74909: PUSH
74910: FOR_IN
74911: IFFALSE 74969
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74913: LD_VAR 0 1
74917: PPUSH
74918: LD_STRING M
74920: PUSH
74921: LD_VAR 0 6
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PUSH
74930: LD_VAR 0 6
74934: PUSH
74935: LD_INT 2
74937: ARRAY
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: LD_INT 0
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: LD_INT 0
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: PUSH
74960: EMPTY
74961: LIST
74962: PPUSH
74963: CALL_OW 447
74967: GO 74910
74969: POP
74970: POP
// end ;
74971: LD_VAR 0 5
74975: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74976: LD_INT 0
74978: PPUSH
74979: PPUSH
74980: PPUSH
74981: PPUSH
74982: PPUSH
74983: PPUSH
74984: PPUSH
74985: PPUSH
74986: PPUSH
74987: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74988: LD_VAR 0 1
74992: PPUSH
74993: CALL_OW 302
74997: NOT
74998: PUSH
74999: LD_VAR 0 2
75003: PPUSH
75004: LD_VAR 0 3
75008: PPUSH
75009: CALL_OW 488
75013: NOT
75014: OR
75015: PUSH
75016: LD_VAR 0 4
75020: NOT
75021: OR
75022: IFFALSE 75026
// exit ;
75024: GO 75539
// list := [ ] ;
75026: LD_ADDR_VAR 0 13
75030: PUSH
75031: EMPTY
75032: ST_TO_ADDR
// if x - r < 0 then
75033: LD_VAR 0 2
75037: PUSH
75038: LD_VAR 0 4
75042: MINUS
75043: PUSH
75044: LD_INT 0
75046: LESS
75047: IFFALSE 75059
// min_x := 0 else
75049: LD_ADDR_VAR 0 7
75053: PUSH
75054: LD_INT 0
75056: ST_TO_ADDR
75057: GO 75075
// min_x := x - r ;
75059: LD_ADDR_VAR 0 7
75063: PUSH
75064: LD_VAR 0 2
75068: PUSH
75069: LD_VAR 0 4
75073: MINUS
75074: ST_TO_ADDR
// if y - r < 0 then
75075: LD_VAR 0 3
75079: PUSH
75080: LD_VAR 0 4
75084: MINUS
75085: PUSH
75086: LD_INT 0
75088: LESS
75089: IFFALSE 75101
// min_y := 0 else
75091: LD_ADDR_VAR 0 8
75095: PUSH
75096: LD_INT 0
75098: ST_TO_ADDR
75099: GO 75117
// min_y := y - r ;
75101: LD_ADDR_VAR 0 8
75105: PUSH
75106: LD_VAR 0 3
75110: PUSH
75111: LD_VAR 0 4
75115: MINUS
75116: ST_TO_ADDR
// max_x := x + r ;
75117: LD_ADDR_VAR 0 9
75121: PUSH
75122: LD_VAR 0 2
75126: PUSH
75127: LD_VAR 0 4
75131: PLUS
75132: ST_TO_ADDR
// max_y := y + r ;
75133: LD_ADDR_VAR 0 10
75137: PUSH
75138: LD_VAR 0 3
75142: PUSH
75143: LD_VAR 0 4
75147: PLUS
75148: ST_TO_ADDR
// for _x = min_x to max_x do
75149: LD_ADDR_VAR 0 11
75153: PUSH
75154: DOUBLE
75155: LD_VAR 0 7
75159: DEC
75160: ST_TO_ADDR
75161: LD_VAR 0 9
75165: PUSH
75166: FOR_TO
75167: IFFALSE 75284
// for _y = min_y to max_y do
75169: LD_ADDR_VAR 0 12
75173: PUSH
75174: DOUBLE
75175: LD_VAR 0 8
75179: DEC
75180: ST_TO_ADDR
75181: LD_VAR 0 10
75185: PUSH
75186: FOR_TO
75187: IFFALSE 75280
// begin if not ValidHex ( _x , _y ) then
75189: LD_VAR 0 11
75193: PPUSH
75194: LD_VAR 0 12
75198: PPUSH
75199: CALL_OW 488
75203: NOT
75204: IFFALSE 75208
// continue ;
75206: GO 75186
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75208: LD_VAR 0 11
75212: PPUSH
75213: LD_VAR 0 12
75217: PPUSH
75218: CALL_OW 351
75222: PUSH
75223: LD_VAR 0 11
75227: PPUSH
75228: LD_VAR 0 12
75232: PPUSH
75233: CALL_OW 554
75237: AND
75238: IFFALSE 75278
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75240: LD_ADDR_VAR 0 13
75244: PUSH
75245: LD_VAR 0 13
75249: PPUSH
75250: LD_VAR 0 13
75254: PUSH
75255: LD_INT 1
75257: PLUS
75258: PPUSH
75259: LD_VAR 0 11
75263: PUSH
75264: LD_VAR 0 12
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PPUSH
75273: CALL_OW 2
75277: ST_TO_ADDR
// end ;
75278: GO 75186
75280: POP
75281: POP
75282: GO 75166
75284: POP
75285: POP
// if not list then
75286: LD_VAR 0 13
75290: NOT
75291: IFFALSE 75295
// exit ;
75293: GO 75539
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75295: LD_ADDR_VAR 0 13
75299: PUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: LD_VAR 0 13
75309: PPUSH
75310: LD_INT 1
75312: PPUSH
75313: LD_INT 1
75315: PPUSH
75316: CALL 20652 0 4
75320: ST_TO_ADDR
// ComStop ( flame ) ;
75321: LD_VAR 0 1
75325: PPUSH
75326: CALL_OW 141
// for i in list do
75330: LD_ADDR_VAR 0 6
75334: PUSH
75335: LD_VAR 0 13
75339: PUSH
75340: FOR_IN
75341: IFFALSE 75372
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75343: LD_VAR 0 1
75347: PPUSH
75348: LD_VAR 0 6
75352: PUSH
75353: LD_INT 1
75355: ARRAY
75356: PPUSH
75357: LD_VAR 0 6
75361: PUSH
75362: LD_INT 2
75364: ARRAY
75365: PPUSH
75366: CALL_OW 176
75370: GO 75340
75372: POP
75373: POP
// repeat wait ( 0 0$1 ) ;
75374: LD_INT 35
75376: PPUSH
75377: CALL_OW 67
// task := GetTaskList ( flame ) ;
75381: LD_ADDR_VAR 0 14
75385: PUSH
75386: LD_VAR 0 1
75390: PPUSH
75391: CALL_OW 437
75395: ST_TO_ADDR
// if not task then
75396: LD_VAR 0 14
75400: NOT
75401: IFFALSE 75405
// exit ;
75403: GO 75539
// if task [ 1 ] [ 1 ] <> | then
75405: LD_VAR 0 14
75409: PUSH
75410: LD_INT 1
75412: ARRAY
75413: PUSH
75414: LD_INT 1
75416: ARRAY
75417: PUSH
75418: LD_STRING |
75420: NONEQUAL
75421: IFFALSE 75425
// exit ;
75423: GO 75539
// _x := task [ 1 ] [ 2 ] ;
75425: LD_ADDR_VAR 0 11
75429: PUSH
75430: LD_VAR 0 14
75434: PUSH
75435: LD_INT 1
75437: ARRAY
75438: PUSH
75439: LD_INT 2
75441: ARRAY
75442: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75443: LD_ADDR_VAR 0 12
75447: PUSH
75448: LD_VAR 0 14
75452: PUSH
75453: LD_INT 1
75455: ARRAY
75456: PUSH
75457: LD_INT 3
75459: ARRAY
75460: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75461: LD_VAR 0 11
75465: PPUSH
75466: LD_VAR 0 12
75470: PPUSH
75471: CALL_OW 351
75475: NOT
75476: PUSH
75477: LD_VAR 0 11
75481: PPUSH
75482: LD_VAR 0 12
75486: PPUSH
75487: CALL_OW 554
75491: NOT
75492: OR
75493: IFFALSE 75527
// begin task := Delete ( task , 1 ) ;
75495: LD_ADDR_VAR 0 14
75499: PUSH
75500: LD_VAR 0 14
75504: PPUSH
75505: LD_INT 1
75507: PPUSH
75508: CALL_OW 3
75512: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75513: LD_VAR 0 1
75517: PPUSH
75518: LD_VAR 0 14
75522: PPUSH
75523: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75527: LD_VAR 0 1
75531: PPUSH
75532: CALL_OW 314
75536: NOT
75537: IFFALSE 75374
// end ;
75539: LD_VAR 0 5
75543: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75544: LD_EXP 107
75548: NOT
75549: IFFALSE 75599
75551: GO 75553
75553: DISABLE
// begin initHack := true ;
75554: LD_ADDR_EXP 107
75558: PUSH
75559: LD_INT 1
75561: ST_TO_ADDR
// hackTanks := [ ] ;
75562: LD_ADDR_EXP 108
75566: PUSH
75567: EMPTY
75568: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75569: LD_ADDR_EXP 109
75573: PUSH
75574: EMPTY
75575: ST_TO_ADDR
// hackLimit := 3 ;
75576: LD_ADDR_EXP 110
75580: PUSH
75581: LD_INT 3
75583: ST_TO_ADDR
// hackDist := 12 ;
75584: LD_ADDR_EXP 111
75588: PUSH
75589: LD_INT 12
75591: ST_TO_ADDR
// hackCounter := [ ] ;
75592: LD_ADDR_EXP 112
75596: PUSH
75597: EMPTY
75598: ST_TO_ADDR
// end ;
75599: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75600: LD_EXP 107
75604: PUSH
75605: LD_INT 34
75607: PUSH
75608: LD_INT 99
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PPUSH
75615: CALL_OW 69
75619: AND
75620: IFFALSE 75873
75622: GO 75624
75624: DISABLE
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
// begin enable ;
75629: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75630: LD_ADDR_VAR 0 1
75634: PUSH
75635: LD_INT 34
75637: PUSH
75638: LD_INT 99
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PPUSH
75645: CALL_OW 69
75649: PUSH
75650: FOR_IN
75651: IFFALSE 75871
// begin if not i in hackTanks then
75653: LD_VAR 0 1
75657: PUSH
75658: LD_EXP 108
75662: IN
75663: NOT
75664: IFFALSE 75747
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75666: LD_ADDR_EXP 108
75670: PUSH
75671: LD_EXP 108
75675: PPUSH
75676: LD_EXP 108
75680: PUSH
75681: LD_INT 1
75683: PLUS
75684: PPUSH
75685: LD_VAR 0 1
75689: PPUSH
75690: CALL_OW 1
75694: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75695: LD_ADDR_EXP 109
75699: PUSH
75700: LD_EXP 109
75704: PPUSH
75705: LD_EXP 109
75709: PUSH
75710: LD_INT 1
75712: PLUS
75713: PPUSH
75714: EMPTY
75715: PPUSH
75716: CALL_OW 1
75720: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75721: LD_ADDR_EXP 112
75725: PUSH
75726: LD_EXP 112
75730: PPUSH
75731: LD_EXP 112
75735: PUSH
75736: LD_INT 1
75738: PLUS
75739: PPUSH
75740: EMPTY
75741: PPUSH
75742: CALL_OW 1
75746: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75747: LD_VAR 0 1
75751: PPUSH
75752: CALL_OW 302
75756: NOT
75757: IFFALSE 75770
// begin HackUnlinkAll ( i ) ;
75759: LD_VAR 0 1
75763: PPUSH
75764: CALL 75876 0 1
// continue ;
75768: GO 75650
// end ; HackCheckCapturedStatus ( i ) ;
75770: LD_VAR 0 1
75774: PPUSH
75775: CALL 76319 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75779: LD_ADDR_VAR 0 2
75783: PUSH
75784: LD_INT 81
75786: PUSH
75787: LD_VAR 0 1
75791: PPUSH
75792: CALL_OW 255
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: LD_INT 33
75803: PUSH
75804: LD_INT 3
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: LD_INT 91
75813: PUSH
75814: LD_VAR 0 1
75818: PUSH
75819: LD_EXP 111
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 50
75831: PUSH
75832: EMPTY
75833: LIST
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: PPUSH
75841: CALL_OW 69
75845: ST_TO_ADDR
// if not tmp then
75846: LD_VAR 0 2
75850: NOT
75851: IFFALSE 75855
// continue ;
75853: GO 75650
// HackLink ( i , tmp ) ;
75855: LD_VAR 0 1
75859: PPUSH
75860: LD_VAR 0 2
75864: PPUSH
75865: CALL 76012 0 2
// end ;
75869: GO 75650
75871: POP
75872: POP
// end ;
75873: PPOPN 2
75875: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75876: LD_INT 0
75878: PPUSH
75879: PPUSH
75880: PPUSH
// if not hack in hackTanks then
75881: LD_VAR 0 1
75885: PUSH
75886: LD_EXP 108
75890: IN
75891: NOT
75892: IFFALSE 75896
// exit ;
75894: GO 76007
// index := GetElementIndex ( hackTanks , hack ) ;
75896: LD_ADDR_VAR 0 4
75900: PUSH
75901: LD_EXP 108
75905: PPUSH
75906: LD_VAR 0 1
75910: PPUSH
75911: CALL 19949 0 2
75915: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75916: LD_EXP 109
75920: PUSH
75921: LD_VAR 0 4
75925: ARRAY
75926: IFFALSE 76007
// begin for i in hackTanksCaptured [ index ] do
75928: LD_ADDR_VAR 0 3
75932: PUSH
75933: LD_EXP 109
75937: PUSH
75938: LD_VAR 0 4
75942: ARRAY
75943: PUSH
75944: FOR_IN
75945: IFFALSE 75971
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75947: LD_VAR 0 3
75951: PUSH
75952: LD_INT 1
75954: ARRAY
75955: PPUSH
75956: LD_VAR 0 3
75960: PUSH
75961: LD_INT 2
75963: ARRAY
75964: PPUSH
75965: CALL_OW 235
75969: GO 75944
75971: POP
75972: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75973: LD_ADDR_EXP 109
75977: PUSH
75978: LD_EXP 109
75982: PPUSH
75983: LD_VAR 0 4
75987: PPUSH
75988: EMPTY
75989: PPUSH
75990: CALL_OW 1
75994: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75995: LD_VAR 0 1
75999: PPUSH
76000: LD_INT 0
76002: PPUSH
76003: CALL_OW 505
// end ; end ;
76007: LD_VAR 0 2
76011: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
76012: LD_INT 0
76014: PPUSH
76015: PPUSH
76016: PPUSH
// if not hack in hackTanks or not vehicles then
76017: LD_VAR 0 1
76021: PUSH
76022: LD_EXP 108
76026: IN
76027: NOT
76028: PUSH
76029: LD_VAR 0 2
76033: NOT
76034: OR
76035: IFFALSE 76039
// exit ;
76037: GO 76314
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
76039: LD_ADDR_VAR 0 2
76043: PUSH
76044: LD_VAR 0 1
76048: PPUSH
76049: LD_VAR 0 2
76053: PPUSH
76054: LD_INT 1
76056: PPUSH
76057: LD_INT 1
76059: PPUSH
76060: CALL 20599 0 4
76064: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
76065: LD_ADDR_VAR 0 5
76069: PUSH
76070: LD_EXP 108
76074: PPUSH
76075: LD_VAR 0 1
76079: PPUSH
76080: CALL 19949 0 2
76084: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
76085: LD_EXP 109
76089: PUSH
76090: LD_VAR 0 5
76094: ARRAY
76095: PUSH
76096: LD_EXP 110
76100: LESS
76101: IFFALSE 76290
// begin for i := 1 to vehicles do
76103: LD_ADDR_VAR 0 4
76107: PUSH
76108: DOUBLE
76109: LD_INT 1
76111: DEC
76112: ST_TO_ADDR
76113: LD_VAR 0 2
76117: PUSH
76118: FOR_TO
76119: IFFALSE 76288
// begin if hackTanksCaptured [ index ] = hackLimit then
76121: LD_EXP 109
76125: PUSH
76126: LD_VAR 0 5
76130: ARRAY
76131: PUSH
76132: LD_EXP 110
76136: EQUAL
76137: IFFALSE 76141
// break ;
76139: GO 76288
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76141: LD_ADDR_EXP 112
76145: PUSH
76146: LD_EXP 112
76150: PPUSH
76151: LD_VAR 0 5
76155: PPUSH
76156: LD_EXP 112
76160: PUSH
76161: LD_VAR 0 5
76165: ARRAY
76166: PUSH
76167: LD_INT 1
76169: PLUS
76170: PPUSH
76171: CALL_OW 1
76175: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76176: LD_ADDR_EXP 109
76180: PUSH
76181: LD_EXP 109
76185: PPUSH
76186: LD_VAR 0 5
76190: PUSH
76191: LD_EXP 109
76195: PUSH
76196: LD_VAR 0 5
76200: ARRAY
76201: PUSH
76202: LD_INT 1
76204: PLUS
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PPUSH
76210: LD_VAR 0 2
76214: PUSH
76215: LD_VAR 0 4
76219: ARRAY
76220: PUSH
76221: LD_VAR 0 2
76225: PUSH
76226: LD_VAR 0 4
76230: ARRAY
76231: PPUSH
76232: CALL_OW 255
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PPUSH
76241: CALL 20164 0 3
76245: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76246: LD_VAR 0 2
76250: PUSH
76251: LD_VAR 0 4
76255: ARRAY
76256: PPUSH
76257: LD_VAR 0 1
76261: PPUSH
76262: CALL_OW 255
76266: PPUSH
76267: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76271: LD_VAR 0 2
76275: PUSH
76276: LD_VAR 0 4
76280: ARRAY
76281: PPUSH
76282: CALL_OW 141
// end ;
76286: GO 76118
76288: POP
76289: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76290: LD_VAR 0 1
76294: PPUSH
76295: LD_EXP 109
76299: PUSH
76300: LD_VAR 0 5
76304: ARRAY
76305: PUSH
76306: LD_INT 0
76308: PLUS
76309: PPUSH
76310: CALL_OW 505
// end ;
76314: LD_VAR 0 3
76318: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76319: LD_INT 0
76321: PPUSH
76322: PPUSH
76323: PPUSH
76324: PPUSH
// if not hack in hackTanks then
76325: LD_VAR 0 1
76329: PUSH
76330: LD_EXP 108
76334: IN
76335: NOT
76336: IFFALSE 76340
// exit ;
76338: GO 76580
// index := GetElementIndex ( hackTanks , hack ) ;
76340: LD_ADDR_VAR 0 4
76344: PUSH
76345: LD_EXP 108
76349: PPUSH
76350: LD_VAR 0 1
76354: PPUSH
76355: CALL 19949 0 2
76359: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76360: LD_ADDR_VAR 0 3
76364: PUSH
76365: DOUBLE
76366: LD_EXP 109
76370: PUSH
76371: LD_VAR 0 4
76375: ARRAY
76376: INC
76377: ST_TO_ADDR
76378: LD_INT 1
76380: PUSH
76381: FOR_DOWNTO
76382: IFFALSE 76554
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76384: LD_ADDR_VAR 0 5
76388: PUSH
76389: LD_EXP 109
76393: PUSH
76394: LD_VAR 0 4
76398: ARRAY
76399: PUSH
76400: LD_VAR 0 3
76404: ARRAY
76405: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76406: LD_VAR 0 5
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PPUSH
76415: CALL_OW 302
76419: NOT
76420: PUSH
76421: LD_VAR 0 5
76425: PUSH
76426: LD_INT 1
76428: ARRAY
76429: PPUSH
76430: CALL_OW 255
76434: PUSH
76435: LD_VAR 0 1
76439: PPUSH
76440: CALL_OW 255
76444: NONEQUAL
76445: OR
76446: IFFALSE 76552
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76448: LD_VAR 0 5
76452: PUSH
76453: LD_INT 1
76455: ARRAY
76456: PPUSH
76457: CALL_OW 305
76461: PUSH
76462: LD_VAR 0 5
76466: PUSH
76467: LD_INT 1
76469: ARRAY
76470: PPUSH
76471: CALL_OW 255
76475: PUSH
76476: LD_VAR 0 1
76480: PPUSH
76481: CALL_OW 255
76485: EQUAL
76486: AND
76487: IFFALSE 76511
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76489: LD_VAR 0 5
76493: PUSH
76494: LD_INT 1
76496: ARRAY
76497: PPUSH
76498: LD_VAR 0 5
76502: PUSH
76503: LD_INT 2
76505: ARRAY
76506: PPUSH
76507: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76511: LD_ADDR_EXP 109
76515: PUSH
76516: LD_EXP 109
76520: PPUSH
76521: LD_VAR 0 4
76525: PPUSH
76526: LD_EXP 109
76530: PUSH
76531: LD_VAR 0 4
76535: ARRAY
76536: PPUSH
76537: LD_VAR 0 3
76541: PPUSH
76542: CALL_OW 3
76546: PPUSH
76547: CALL_OW 1
76551: ST_TO_ADDR
// end ; end ;
76552: GO 76381
76554: POP
76555: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76556: LD_VAR 0 1
76560: PPUSH
76561: LD_EXP 109
76565: PUSH
76566: LD_VAR 0 4
76570: ARRAY
76571: PUSH
76572: LD_INT 0
76574: PLUS
76575: PPUSH
76576: CALL_OW 505
// end ;
76580: LD_VAR 0 2
76584: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76585: LD_INT 0
76587: PPUSH
76588: PPUSH
76589: PPUSH
76590: PPUSH
// if not hack in hackTanks then
76591: LD_VAR 0 1
76595: PUSH
76596: LD_EXP 108
76600: IN
76601: NOT
76602: IFFALSE 76606
// exit ;
76604: GO 76691
// index := GetElementIndex ( hackTanks , hack ) ;
76606: LD_ADDR_VAR 0 5
76610: PUSH
76611: LD_EXP 108
76615: PPUSH
76616: LD_VAR 0 1
76620: PPUSH
76621: CALL 19949 0 2
76625: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76626: LD_ADDR_VAR 0 4
76630: PUSH
76631: DOUBLE
76632: LD_INT 1
76634: DEC
76635: ST_TO_ADDR
76636: LD_EXP 109
76640: PUSH
76641: LD_VAR 0 5
76645: ARRAY
76646: PUSH
76647: FOR_TO
76648: IFFALSE 76689
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76650: LD_EXP 109
76654: PUSH
76655: LD_VAR 0 5
76659: ARRAY
76660: PUSH
76661: LD_VAR 0 4
76665: ARRAY
76666: PUSH
76667: LD_INT 1
76669: ARRAY
76670: PUSH
76671: LD_VAR 0 2
76675: EQUAL
76676: IFFALSE 76687
// KillUnit ( vehicle ) ;
76678: LD_VAR 0 2
76682: PPUSH
76683: CALL_OW 66
76687: GO 76647
76689: POP
76690: POP
// end ;
76691: LD_VAR 0 3
76695: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76696: LD_EXP 113
76700: NOT
76701: IFFALSE 76736
76703: GO 76705
76705: DISABLE
// begin initMiner := true ;
76706: LD_ADDR_EXP 113
76710: PUSH
76711: LD_INT 1
76713: ST_TO_ADDR
// minersList := [ ] ;
76714: LD_ADDR_EXP 114
76718: PUSH
76719: EMPTY
76720: ST_TO_ADDR
// minerMinesList := [ ] ;
76721: LD_ADDR_EXP 115
76725: PUSH
76726: EMPTY
76727: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76728: LD_ADDR_EXP 116
76732: PUSH
76733: LD_INT 5
76735: ST_TO_ADDR
// end ;
76736: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76737: LD_EXP 113
76741: PUSH
76742: LD_INT 34
76744: PUSH
76745: LD_INT 81
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PPUSH
76752: CALL_OW 69
76756: AND
76757: IFFALSE 77218
76759: GO 76761
76761: DISABLE
76762: LD_INT 0
76764: PPUSH
76765: PPUSH
76766: PPUSH
76767: PPUSH
// begin enable ;
76768: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76769: LD_ADDR_VAR 0 1
76773: PUSH
76774: LD_INT 34
76776: PUSH
76777: LD_INT 81
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PPUSH
76784: CALL_OW 69
76788: PUSH
76789: FOR_IN
76790: IFFALSE 76862
// begin if not i in minersList then
76792: LD_VAR 0 1
76796: PUSH
76797: LD_EXP 114
76801: IN
76802: NOT
76803: IFFALSE 76860
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76805: LD_ADDR_EXP 114
76809: PUSH
76810: LD_EXP 114
76814: PPUSH
76815: LD_EXP 114
76819: PUSH
76820: LD_INT 1
76822: PLUS
76823: PPUSH
76824: LD_VAR 0 1
76828: PPUSH
76829: CALL_OW 1
76833: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76834: LD_ADDR_EXP 115
76838: PUSH
76839: LD_EXP 115
76843: PPUSH
76844: LD_EXP 115
76848: PUSH
76849: LD_INT 1
76851: PLUS
76852: PPUSH
76853: EMPTY
76854: PPUSH
76855: CALL_OW 1
76859: ST_TO_ADDR
// end end ;
76860: GO 76789
76862: POP
76863: POP
// for i := minerMinesList downto 1 do
76864: LD_ADDR_VAR 0 1
76868: PUSH
76869: DOUBLE
76870: LD_EXP 115
76874: INC
76875: ST_TO_ADDR
76876: LD_INT 1
76878: PUSH
76879: FOR_DOWNTO
76880: IFFALSE 77216
// begin if IsLive ( minersList [ i ] ) then
76882: LD_EXP 114
76886: PUSH
76887: LD_VAR 0 1
76891: ARRAY
76892: PPUSH
76893: CALL_OW 300
76897: IFFALSE 76925
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76899: LD_EXP 114
76903: PUSH
76904: LD_VAR 0 1
76908: ARRAY
76909: PPUSH
76910: LD_EXP 115
76914: PUSH
76915: LD_VAR 0 1
76919: ARRAY
76920: PPUSH
76921: CALL_OW 505
// if not minerMinesList [ i ] then
76925: LD_EXP 115
76929: PUSH
76930: LD_VAR 0 1
76934: ARRAY
76935: NOT
76936: IFFALSE 76940
// continue ;
76938: GO 76879
// for j := minerMinesList [ i ] downto 1 do
76940: LD_ADDR_VAR 0 2
76944: PUSH
76945: DOUBLE
76946: LD_EXP 115
76950: PUSH
76951: LD_VAR 0 1
76955: ARRAY
76956: INC
76957: ST_TO_ADDR
76958: LD_INT 1
76960: PUSH
76961: FOR_DOWNTO
76962: IFFALSE 77212
// begin side := GetSide ( minersList [ i ] ) ;
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: LD_EXP 114
76973: PUSH
76974: LD_VAR 0 1
76978: ARRAY
76979: PPUSH
76980: CALL_OW 255
76984: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76985: LD_ADDR_VAR 0 4
76989: PUSH
76990: LD_EXP 115
76994: PUSH
76995: LD_VAR 0 1
76999: ARRAY
77000: PUSH
77001: LD_VAR 0 2
77005: ARRAY
77006: PUSH
77007: LD_INT 1
77009: ARRAY
77010: PPUSH
77011: LD_EXP 115
77015: PUSH
77016: LD_VAR 0 1
77020: ARRAY
77021: PUSH
77022: LD_VAR 0 2
77026: ARRAY
77027: PUSH
77028: LD_INT 2
77030: ARRAY
77031: PPUSH
77032: CALL_OW 428
77036: ST_TO_ADDR
// if not tmp then
77037: LD_VAR 0 4
77041: NOT
77042: IFFALSE 77046
// continue ;
77044: GO 76961
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
77046: LD_VAR 0 4
77050: PUSH
77051: LD_INT 81
77053: PUSH
77054: LD_VAR 0 3
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PPUSH
77063: CALL_OW 69
77067: IN
77068: PUSH
77069: LD_EXP 115
77073: PUSH
77074: LD_VAR 0 1
77078: ARRAY
77079: PUSH
77080: LD_VAR 0 2
77084: ARRAY
77085: PUSH
77086: LD_INT 1
77088: ARRAY
77089: PPUSH
77090: LD_EXP 115
77094: PUSH
77095: LD_VAR 0 1
77099: ARRAY
77100: PUSH
77101: LD_VAR 0 2
77105: ARRAY
77106: PUSH
77107: LD_INT 2
77109: ARRAY
77110: PPUSH
77111: CALL_OW 458
77115: AND
77116: IFFALSE 77210
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77118: LD_EXP 115
77122: PUSH
77123: LD_VAR 0 1
77127: ARRAY
77128: PUSH
77129: LD_VAR 0 2
77133: ARRAY
77134: PUSH
77135: LD_INT 1
77137: ARRAY
77138: PPUSH
77139: LD_EXP 115
77143: PUSH
77144: LD_VAR 0 1
77148: ARRAY
77149: PUSH
77150: LD_VAR 0 2
77154: ARRAY
77155: PUSH
77156: LD_INT 2
77158: ARRAY
77159: PPUSH
77160: LD_VAR 0 3
77164: PPUSH
77165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77169: LD_ADDR_EXP 115
77173: PUSH
77174: LD_EXP 115
77178: PPUSH
77179: LD_VAR 0 1
77183: PPUSH
77184: LD_EXP 115
77188: PUSH
77189: LD_VAR 0 1
77193: ARRAY
77194: PPUSH
77195: LD_VAR 0 2
77199: PPUSH
77200: CALL_OW 3
77204: PPUSH
77205: CALL_OW 1
77209: ST_TO_ADDR
// end ; end ;
77210: GO 76961
77212: POP
77213: POP
// end ;
77214: GO 76879
77216: POP
77217: POP
// end ;
77218: PPOPN 4
77220: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77221: LD_INT 0
77223: PPUSH
77224: PPUSH
// result := false ;
77225: LD_ADDR_VAR 0 4
77229: PUSH
77230: LD_INT 0
77232: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77233: LD_VAR 0 1
77237: PPUSH
77238: CALL_OW 264
77242: PUSH
77243: LD_INT 81
77245: EQUAL
77246: NOT
77247: IFFALSE 77251
// exit ;
77249: GO 77491
// index := GetElementIndex ( minersList , unit ) ;
77251: LD_ADDR_VAR 0 5
77255: PUSH
77256: LD_EXP 114
77260: PPUSH
77261: LD_VAR 0 1
77265: PPUSH
77266: CALL 19949 0 2
77270: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77271: LD_EXP 115
77275: PUSH
77276: LD_VAR 0 5
77280: ARRAY
77281: PUSH
77282: LD_EXP 116
77286: GREATEREQUAL
77287: IFFALSE 77291
// exit ;
77289: GO 77491
// ComMoveXY ( unit , x , y ) ;
77291: LD_VAR 0 1
77295: PPUSH
77296: LD_VAR 0 2
77300: PPUSH
77301: LD_VAR 0 3
77305: PPUSH
77306: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77310: LD_INT 35
77312: PPUSH
77313: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77317: LD_VAR 0 1
77321: PPUSH
77322: LD_VAR 0 2
77326: PPUSH
77327: LD_VAR 0 3
77331: PPUSH
77332: CALL 51690 0 3
77336: NOT
77337: PUSH
77338: LD_VAR 0 1
77342: PPUSH
77343: CALL_OW 314
77347: AND
77348: IFFALSE 77352
// exit ;
77350: GO 77491
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77352: LD_VAR 0 2
77356: PPUSH
77357: LD_VAR 0 3
77361: PPUSH
77362: CALL_OW 428
77366: PUSH
77367: LD_VAR 0 1
77371: EQUAL
77372: PUSH
77373: LD_VAR 0 1
77377: PPUSH
77378: CALL_OW 314
77382: NOT
77383: AND
77384: IFFALSE 77310
// PlaySoundXY ( x , y , PlantMine ) ;
77386: LD_VAR 0 2
77390: PPUSH
77391: LD_VAR 0 3
77395: PPUSH
77396: LD_STRING PlantMine
77398: PPUSH
77399: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77403: LD_VAR 0 2
77407: PPUSH
77408: LD_VAR 0 3
77412: PPUSH
77413: LD_VAR 0 1
77417: PPUSH
77418: CALL_OW 255
77422: PPUSH
77423: LD_INT 0
77425: PPUSH
77426: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77430: LD_ADDR_EXP 115
77434: PUSH
77435: LD_EXP 115
77439: PPUSH
77440: LD_VAR 0 5
77444: PUSH
77445: LD_EXP 115
77449: PUSH
77450: LD_VAR 0 5
77454: ARRAY
77455: PUSH
77456: LD_INT 1
77458: PLUS
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PPUSH
77464: LD_VAR 0 2
77468: PUSH
77469: LD_VAR 0 3
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PPUSH
77478: CALL 20164 0 3
77482: ST_TO_ADDR
// result := true ;
77483: LD_ADDR_VAR 0 4
77487: PUSH
77488: LD_INT 1
77490: ST_TO_ADDR
// end ;
77491: LD_VAR 0 4
77495: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77496: LD_INT 0
77498: PPUSH
77499: PPUSH
77500: PPUSH
// if not unit in minersList then
77501: LD_VAR 0 1
77505: PUSH
77506: LD_EXP 114
77510: IN
77511: NOT
77512: IFFALSE 77516
// exit ;
77514: GO 77908
// index := GetElementIndex ( minersList , unit ) ;
77516: LD_ADDR_VAR 0 6
77520: PUSH
77521: LD_EXP 114
77525: PPUSH
77526: LD_VAR 0 1
77530: PPUSH
77531: CALL 19949 0 2
77535: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77536: LD_ADDR_VAR 0 5
77540: PUSH
77541: DOUBLE
77542: LD_EXP 115
77546: PUSH
77547: LD_VAR 0 6
77551: ARRAY
77552: INC
77553: ST_TO_ADDR
77554: LD_INT 1
77556: PUSH
77557: FOR_DOWNTO
77558: IFFALSE 77719
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77560: LD_EXP 115
77564: PUSH
77565: LD_VAR 0 6
77569: ARRAY
77570: PUSH
77571: LD_VAR 0 5
77575: ARRAY
77576: PUSH
77577: LD_INT 1
77579: ARRAY
77580: PUSH
77581: LD_VAR 0 2
77585: EQUAL
77586: PUSH
77587: LD_EXP 115
77591: PUSH
77592: LD_VAR 0 6
77596: ARRAY
77597: PUSH
77598: LD_VAR 0 5
77602: ARRAY
77603: PUSH
77604: LD_INT 2
77606: ARRAY
77607: PUSH
77608: LD_VAR 0 3
77612: EQUAL
77613: AND
77614: IFFALSE 77717
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77616: LD_EXP 115
77620: PUSH
77621: LD_VAR 0 6
77625: ARRAY
77626: PUSH
77627: LD_VAR 0 5
77631: ARRAY
77632: PUSH
77633: LD_INT 1
77635: ARRAY
77636: PPUSH
77637: LD_EXP 115
77641: PUSH
77642: LD_VAR 0 6
77646: ARRAY
77647: PUSH
77648: LD_VAR 0 5
77652: ARRAY
77653: PUSH
77654: LD_INT 2
77656: ARRAY
77657: PPUSH
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 255
77667: PPUSH
77668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77672: LD_ADDR_EXP 115
77676: PUSH
77677: LD_EXP 115
77681: PPUSH
77682: LD_VAR 0 6
77686: PPUSH
77687: LD_EXP 115
77691: PUSH
77692: LD_VAR 0 6
77696: ARRAY
77697: PPUSH
77698: LD_VAR 0 5
77702: PPUSH
77703: CALL_OW 3
77707: PPUSH
77708: CALL_OW 1
77712: ST_TO_ADDR
// exit ;
77713: POP
77714: POP
77715: GO 77908
// end ; end ;
77717: GO 77557
77719: POP
77720: POP
// for i := minerMinesList [ index ] downto 1 do
77721: LD_ADDR_VAR 0 5
77725: PUSH
77726: DOUBLE
77727: LD_EXP 115
77731: PUSH
77732: LD_VAR 0 6
77736: ARRAY
77737: INC
77738: ST_TO_ADDR
77739: LD_INT 1
77741: PUSH
77742: FOR_DOWNTO
77743: IFFALSE 77906
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77745: LD_EXP 115
77749: PUSH
77750: LD_VAR 0 6
77754: ARRAY
77755: PUSH
77756: LD_VAR 0 5
77760: ARRAY
77761: PUSH
77762: LD_INT 1
77764: ARRAY
77765: PPUSH
77766: LD_EXP 115
77770: PUSH
77771: LD_VAR 0 6
77775: ARRAY
77776: PUSH
77777: LD_VAR 0 5
77781: ARRAY
77782: PUSH
77783: LD_INT 2
77785: ARRAY
77786: PPUSH
77787: LD_VAR 0 2
77791: PPUSH
77792: LD_VAR 0 3
77796: PPUSH
77797: CALL_OW 298
77801: PUSH
77802: LD_INT 6
77804: LESS
77805: IFFALSE 77904
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77807: LD_EXP 115
77811: PUSH
77812: LD_VAR 0 6
77816: ARRAY
77817: PUSH
77818: LD_VAR 0 5
77822: ARRAY
77823: PUSH
77824: LD_INT 1
77826: ARRAY
77827: PPUSH
77828: LD_EXP 115
77832: PUSH
77833: LD_VAR 0 6
77837: ARRAY
77838: PUSH
77839: LD_VAR 0 5
77843: ARRAY
77844: PUSH
77845: LD_INT 2
77847: ARRAY
77848: PPUSH
77849: LD_VAR 0 1
77853: PPUSH
77854: CALL_OW 255
77858: PPUSH
77859: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77863: LD_ADDR_EXP 115
77867: PUSH
77868: LD_EXP 115
77872: PPUSH
77873: LD_VAR 0 6
77877: PPUSH
77878: LD_EXP 115
77882: PUSH
77883: LD_VAR 0 6
77887: ARRAY
77888: PPUSH
77889: LD_VAR 0 5
77893: PPUSH
77894: CALL_OW 3
77898: PPUSH
77899: CALL_OW 1
77903: ST_TO_ADDR
// end ; end ;
77904: GO 77742
77906: POP
77907: POP
// end ;
77908: LD_VAR 0 4
77912: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77913: LD_INT 0
77915: PPUSH
77916: PPUSH
77917: PPUSH
77918: PPUSH
77919: PPUSH
77920: PPUSH
77921: PPUSH
77922: PPUSH
77923: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77924: LD_VAR 0 1
77928: PPUSH
77929: CALL_OW 264
77933: PUSH
77934: LD_INT 81
77936: EQUAL
77937: NOT
77938: PUSH
77939: LD_VAR 0 1
77943: PUSH
77944: LD_EXP 114
77948: IN
77949: NOT
77950: OR
77951: IFFALSE 77955
// exit ;
77953: GO 78277
// index := GetElementIndex ( minersList , unit ) ;
77955: LD_ADDR_VAR 0 6
77959: PUSH
77960: LD_EXP 114
77964: PPUSH
77965: LD_VAR 0 1
77969: PPUSH
77970: CALL 19949 0 2
77974: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77975: LD_ADDR_VAR 0 8
77979: PUSH
77980: LD_EXP 116
77984: PUSH
77985: LD_EXP 115
77989: PUSH
77990: LD_VAR 0 6
77994: ARRAY
77995: MINUS
77996: ST_TO_ADDR
// if not minesFreeAmount then
77997: LD_VAR 0 8
78001: NOT
78002: IFFALSE 78006
// exit ;
78004: GO 78277
// tmp := [ ] ;
78006: LD_ADDR_VAR 0 7
78010: PUSH
78011: EMPTY
78012: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
78013: LD_ADDR_VAR 0 5
78017: PUSH
78018: DOUBLE
78019: LD_INT 1
78021: DEC
78022: ST_TO_ADDR
78023: LD_VAR 0 8
78027: PUSH
78028: FOR_TO
78029: IFFALSE 78224
// begin _d := rand ( 0 , 5 ) ;
78031: LD_ADDR_VAR 0 11
78035: PUSH
78036: LD_INT 0
78038: PPUSH
78039: LD_INT 5
78041: PPUSH
78042: CALL_OW 12
78046: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
78047: LD_ADDR_VAR 0 12
78051: PUSH
78052: LD_INT 2
78054: PPUSH
78055: LD_INT 6
78057: PPUSH
78058: CALL_OW 12
78062: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
78063: LD_ADDR_VAR 0 9
78067: PUSH
78068: LD_VAR 0 2
78072: PPUSH
78073: LD_VAR 0 11
78077: PPUSH
78078: LD_VAR 0 12
78082: PPUSH
78083: CALL_OW 272
78087: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
78088: LD_ADDR_VAR 0 10
78092: PUSH
78093: LD_VAR 0 3
78097: PPUSH
78098: LD_VAR 0 11
78102: PPUSH
78103: LD_VAR 0 12
78107: PPUSH
78108: CALL_OW 273
78112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78113: LD_VAR 0 9
78117: PPUSH
78118: LD_VAR 0 10
78122: PPUSH
78123: CALL_OW 488
78127: PUSH
78128: LD_VAR 0 9
78132: PUSH
78133: LD_VAR 0 10
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: LD_VAR 0 7
78146: IN
78147: NOT
78148: AND
78149: PUSH
78150: LD_VAR 0 9
78154: PPUSH
78155: LD_VAR 0 10
78159: PPUSH
78160: CALL_OW 458
78164: NOT
78165: AND
78166: IFFALSE 78208
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78168: LD_ADDR_VAR 0 7
78172: PUSH
78173: LD_VAR 0 7
78177: PPUSH
78178: LD_VAR 0 7
78182: PUSH
78183: LD_INT 1
78185: PLUS
78186: PPUSH
78187: LD_VAR 0 9
78191: PUSH
78192: LD_VAR 0 10
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PPUSH
78201: CALL_OW 1
78205: ST_TO_ADDR
78206: GO 78222
// i := i - 1 ;
78208: LD_ADDR_VAR 0 5
78212: PUSH
78213: LD_VAR 0 5
78217: PUSH
78218: LD_INT 1
78220: MINUS
78221: ST_TO_ADDR
// end ;
78222: GO 78028
78224: POP
78225: POP
// for i in tmp do
78226: LD_ADDR_VAR 0 5
78230: PUSH
78231: LD_VAR 0 7
78235: PUSH
78236: FOR_IN
78237: IFFALSE 78275
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78239: LD_VAR 0 1
78243: PPUSH
78244: LD_VAR 0 5
78248: PUSH
78249: LD_INT 1
78251: ARRAY
78252: PPUSH
78253: LD_VAR 0 5
78257: PUSH
78258: LD_INT 2
78260: ARRAY
78261: PPUSH
78262: CALL 77221 0 3
78266: NOT
78267: IFFALSE 78273
// exit ;
78269: POP
78270: POP
78271: GO 78277
78273: GO 78236
78275: POP
78276: POP
// end ;
78277: LD_VAR 0 4
78281: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78282: LD_INT 0
78284: PPUSH
78285: PPUSH
78286: PPUSH
78287: PPUSH
78288: PPUSH
78289: PPUSH
78290: PPUSH
// if not GetClass ( unit ) = class_sniper then
78291: LD_VAR 0 1
78295: PPUSH
78296: CALL_OW 257
78300: PUSH
78301: LD_INT 5
78303: EQUAL
78304: NOT
78305: IFFALSE 78309
// exit ;
78307: GO 78697
// dist := 8 ;
78309: LD_ADDR_VAR 0 5
78313: PUSH
78314: LD_INT 8
78316: ST_TO_ADDR
// viewRange := 12 ;
78317: LD_ADDR_VAR 0 7
78321: PUSH
78322: LD_INT 12
78324: ST_TO_ADDR
// side := GetSide ( unit ) ;
78325: LD_ADDR_VAR 0 6
78329: PUSH
78330: LD_VAR 0 1
78334: PPUSH
78335: CALL_OW 255
78339: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78340: LD_INT 61
78342: PPUSH
78343: LD_VAR 0 6
78347: PPUSH
78348: CALL_OW 321
78352: PUSH
78353: LD_INT 2
78355: EQUAL
78356: IFFALSE 78366
// viewRange := 16 ;
78358: LD_ADDR_VAR 0 7
78362: PUSH
78363: LD_INT 16
78365: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78366: LD_VAR 0 1
78370: PPUSH
78371: LD_VAR 0 2
78375: PPUSH
78376: LD_VAR 0 3
78380: PPUSH
78381: CALL_OW 297
78385: PUSH
78386: LD_VAR 0 5
78390: GREATER
78391: IFFALSE 78470
// begin ComMoveXY ( unit , x , y ) ;
78393: LD_VAR 0 1
78397: PPUSH
78398: LD_VAR 0 2
78402: PPUSH
78403: LD_VAR 0 3
78407: PPUSH
78408: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78412: LD_INT 35
78414: PPUSH
78415: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78419: LD_VAR 0 1
78423: PPUSH
78424: LD_VAR 0 2
78428: PPUSH
78429: LD_VAR 0 3
78433: PPUSH
78434: CALL 51690 0 3
78438: NOT
78439: IFFALSE 78443
// exit ;
78441: GO 78697
// until GetDistUnitXY ( unit , x , y ) < dist ;
78443: LD_VAR 0 1
78447: PPUSH
78448: LD_VAR 0 2
78452: PPUSH
78453: LD_VAR 0 3
78457: PPUSH
78458: CALL_OW 297
78462: PUSH
78463: LD_VAR 0 5
78467: LESS
78468: IFFALSE 78412
// end ; ComTurnXY ( unit , x , y ) ;
78470: LD_VAR 0 1
78474: PPUSH
78475: LD_VAR 0 2
78479: PPUSH
78480: LD_VAR 0 3
78484: PPUSH
78485: CALL_OW 118
// wait ( 5 ) ;
78489: LD_INT 5
78491: PPUSH
78492: CALL_OW 67
// _d := GetDir ( unit ) ;
78496: LD_ADDR_VAR 0 10
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: CALL_OW 254
78510: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78511: LD_ADDR_VAR 0 8
78515: PUSH
78516: LD_VAR 0 1
78520: PPUSH
78521: CALL_OW 250
78525: PPUSH
78526: LD_VAR 0 10
78530: PPUSH
78531: LD_VAR 0 5
78535: PPUSH
78536: CALL_OW 272
78540: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78541: LD_ADDR_VAR 0 9
78545: PUSH
78546: LD_VAR 0 1
78550: PPUSH
78551: CALL_OW 251
78555: PPUSH
78556: LD_VAR 0 10
78560: PPUSH
78561: LD_VAR 0 5
78565: PPUSH
78566: CALL_OW 273
78570: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78571: LD_VAR 0 8
78575: PPUSH
78576: LD_VAR 0 9
78580: PPUSH
78581: CALL_OW 488
78585: NOT
78586: IFFALSE 78590
// exit ;
78588: GO 78697
// ComAnimCustom ( unit , 1 ) ;
78590: LD_VAR 0 1
78594: PPUSH
78595: LD_INT 1
78597: PPUSH
78598: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78602: LD_VAR 0 8
78606: PPUSH
78607: LD_VAR 0 9
78611: PPUSH
78612: LD_VAR 0 6
78616: PPUSH
78617: LD_VAR 0 7
78621: PPUSH
78622: CALL_OW 330
// repeat wait ( 1 ) ;
78626: LD_INT 1
78628: PPUSH
78629: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78633: LD_VAR 0 1
78637: PPUSH
78638: CALL_OW 316
78642: PUSH
78643: LD_VAR 0 1
78647: PPUSH
78648: CALL_OW 314
78652: OR
78653: PUSH
78654: LD_VAR 0 1
78658: PPUSH
78659: CALL_OW 302
78663: NOT
78664: OR
78665: PUSH
78666: LD_VAR 0 1
78670: PPUSH
78671: CALL_OW 301
78675: OR
78676: IFFALSE 78626
// RemoveSeeing ( _x , _y , side ) ;
78678: LD_VAR 0 8
78682: PPUSH
78683: LD_VAR 0 9
78687: PPUSH
78688: LD_VAR 0 6
78692: PPUSH
78693: CALL_OW 331
// end ; end_of_file
78697: LD_VAR 0 4
78701: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78702: LD_VAR 0 1
78706: PPUSH
78707: LD_VAR 0 2
78711: PPUSH
78712: LD_VAR 0 3
78716: PPUSH
78717: LD_VAR 0 4
78721: PPUSH
78722: LD_VAR 0 5
78726: PPUSH
78727: LD_VAR 0 6
78731: PPUSH
78732: CALL 58149 0 6
// end ;
78736: PPOPN 6
78738: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78739: LD_INT 0
78741: PPUSH
// begin if not units then
78742: LD_VAR 0 1
78746: NOT
78747: IFFALSE 78751
// exit ;
78749: GO 78751
// end ;
78751: PPOPN 7
78753: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78754: CALL 58036 0 0
// end ; end_of_file
78758: PPOPN 1
78760: END
