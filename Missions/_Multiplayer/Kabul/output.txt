// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 5668 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 7011 0 1
  44: PPUSH
  45: CALL 133 0 1
// Multiplayer_Start ;
  49: CALL 8969 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 9085 0 0
// end ;
  69: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// botSides := [ 2 ] ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: PUSH
  89: EMPTY
  90: LIST
  91: ST_TO_ADDR
// activeArabAttacks := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// end ;
 100: LD_VAR 0 1
 104: RET
// every 0 0$01 trigger game and not debug_strings do
 105: LD_EXP 2
 109: PUSH
 110: LD_OWVAR 48
 114: NOT
 115: AND
 116: IFFALSE 132
 118: GO 120
 120: DISABLE
// begin enable ;
 121: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 122: LD_ADDR_OWVAR 47
 126: PUSH
 127: CALL 9621 0 0
 131: ST_TO_ADDR
// end ; end_of_file
 132: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp , arRVehicles ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
 142: PPUSH
 143: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
 144: LD_ADDR_EXP 5
 148: PUSH
 149: LD_VAR 0 1
 153: PPUSH
 154: LD_INT 2
 156: PPUSH
 157: LD_INT 1
 159: PPUSH
 160: CALL 15164 0 3
 164: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
 165: LD_ADDR_EXP 6
 169: PUSH
 170: LD_INT 13
 172: PUSH
 173: LD_INT 1
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 27
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 13
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: LD_INT 27
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 13
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: LD_INT 1
 214: PUSH
 215: LD_INT 28
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_INT 13
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: LD_INT 25
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 13
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: LD_INT 1
 250: PUSH
 251: LD_INT 27
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: ST_TO_ADDR
// arBuildings := [ ] ;
 267: LD_ADDR_EXP 7
 271: PUSH
 272: EMPTY
 273: ST_TO_ADDR
// arVehicles := [ ] ;
 274: LD_ADDR_EXP 8
 278: PUSH
 279: EMPTY
 280: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
 281: LD_ADDR_EXP 9
 285: PUSH
 286: EMPTY
 287: ST_TO_ADDR
// arRVehicles := [ ] ;
 288: LD_ADDR_EXP 16
 292: PUSH
 293: EMPTY
 294: ST_TO_ADDR
// arDrivers := [ ] ;
 295: LD_ADDR_EXP 10
 299: PUSH
 300: EMPTY
 301: ST_TO_ADDR
// arVehiclesCounter := 3 ;
 302: LD_ADDR_EXP 12
 306: PUSH
 307: LD_INT 3
 309: ST_TO_ADDR
// arMinesList := [ ] ;
 310: LD_ADDR_EXP 13
 314: PUSH
 315: EMPTY
 316: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
 317: LD_ADDR_EXP 11
 321: PUSH
 322: LD_INT 8
 324: PUSH
 325: LD_INT 11
 327: PUSH
 328: LD_INT 12
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: LIST
 335: PUSH
 336: LD_OWVAR 67
 340: ARRAY
 341: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
 342: LD_VAR 0 1
 346: PPUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL 57727 0 2
// PlaceMines ( minefieldArea , [ 24 , 36 , 48 ] [ Difficulty ] ) ;
 354: LD_INT 4
 356: PPUSH
 357: LD_INT 24
 359: PUSH
 360: LD_INT 36
 362: PUSH
 363: LD_INT 48
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: LD_OWVAR 67
 375: ARRAY
 376: PPUSH
 377: CALL 958 0 2
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
 381: LD_ADDR_VAR 0 8
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: LD_INT 5
 391: PUSH
 392: LD_INT 7
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: LIST
 399: PUSH
 400: LD_OWVAR 67
 404: ARRAY
 405: ST_TO_ADDR
// uc_side := side ;
 406: LD_ADDR_OWVAR 20
 410: PUSH
 411: LD_VAR 0 1
 415: ST_TO_ADDR
// uc_nation := 2 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 2
 423: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
 424: LD_ADDR_EXP 14
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: LD_STRING 
 437: PPUSH
 438: LD_VAR 0 8
 442: PPUSH
 443: LD_INT 800
 445: PUSH
 446: LD_INT 120
 448: PUSH
 449: LD_INT 0
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PPUSH
 457: LD_INT 10
 459: PUSH
 460: LD_INT 11
 462: PUSH
 463: LD_INT 12
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: PUSH
 477: LD_INT 4
 479: PUSH
 480: LD_INT 6
 482: PUSH
 483: LD_INT 3
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: PPUSH
 492: CALL 23762 0 6
 496: ST_TO_ADDR
// arForceTmp := [ ] ;
 497: LD_ADDR_EXP 15
 501: PUSH
 502: EMPTY
 503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
 504: LD_ADDR_VAR 0 3
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_VAR 0 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 30
 523: PUSH
 524: LD_INT 31
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 3
 533: PUSH
 534: LD_INT 95
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 58
 550: PUSH
 551: EMPTY
 552: LIST
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: PPUSH
 560: CALL_OW 69
 564: PUSH
 565: FOR_IN
 566: IFFALSE 695
// begin d := GetDir ( i ) ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: LD_VAR 0 3
 577: PPUSH
 578: CALL_OW 254
 582: ST_TO_ADDR
// if d < 3 then
 583: LD_VAR 0 4
 587: PUSH
 588: LD_INT 3
 590: LESS
 591: IFFALSE 609
// d := d + 3 else
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_VAR 0 4
 602: PUSH
 603: LD_INT 3
 605: PLUS
 606: ST_TO_ADDR
 607: GO 623
// d := d - 3 ;
 609: LD_ADDR_VAR 0 4
 613: PUSH
 614: LD_VAR 0 4
 618: PUSH
 619: LD_INT 3
 621: MINUS
 622: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
 623: LD_INT 0
 625: PPUSH
 626: LD_VAR 0 8
 630: PPUSH
 631: CALL_OW 381
// un := CreateHuman ;
 635: LD_ADDR_VAR 0 6
 639: PUSH
 640: CALL_OW 44
 644: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
 645: LD_ADDR_EXP 15
 649: PUSH
 650: LD_EXP 15
 654: PPUSH
 655: LD_VAR 0 6
 659: PPUSH
 660: CALL 52792 0 2
 664: ST_TO_ADDR
// SetDir ( un , d ) ;
 665: LD_VAR 0 6
 669: PPUSH
 670: LD_VAR 0 4
 674: PPUSH
 675: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 679: LD_VAR 0 6
 683: PPUSH
 684: LD_VAR 0 3
 688: PPUSH
 689: CALL_OW 52
// end ;
 693: GO 565
 695: POP
 696: POP
// for i := 1 to 2 do
 697: LD_ADDR_VAR 0 3
 701: PUSH
 702: DOUBLE
 703: LD_INT 1
 705: DEC
 706: ST_TO_ADDR
 707: LD_INT 2
 709: PUSH
 710: FOR_TO
 711: IFFALSE 795
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_control_tower , 100 ) ;
 713: LD_INT 14
 715: PPUSH
 716: LD_INT 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 31
 724: PPUSH
 725: LD_INT 100
 727: PPUSH
 728: CALL 19941 0 5
// un := CreateVehicle ;
 732: LD_ADDR_VAR 0 6
 736: PUSH
 737: CALL_OW 45
 741: ST_TO_ADDR
// PlaceUnitXYR ( un , 102 , 31 , 6 , false ) ;
 742: LD_VAR 0 6
 746: PPUSH
 747: LD_INT 102
 749: PPUSH
 750: LD_INT 31
 752: PPUSH
 753: LD_INT 6
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 50
// PrepareMechanic ( false , skill + 2 ) ;
 763: LD_INT 0
 765: PPUSH
 766: LD_VAR 0 8
 770: PUSH
 771: LD_INT 2
 773: PLUS
 774: PPUSH
 775: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
 779: CALL_OW 44
 783: PPUSH
 784: LD_VAR 0 6
 788: PPUSH
 789: CALL_OW 52
// end ;
 793: GO 710
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_VAR 0 1
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 21
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PPUSH
 828: CALL_OW 69
 832: PUSH
 833: FOR_IN
 834: IFFALSE 867
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
 836: LD_VAR 0 3
 840: PPUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 5
 846: PUSH
 847: LD_INT 7
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: PPUSH
 861: CALL_OW 241
 865: GO 833
 867: POP
 868: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
 869: LD_ADDR_VAR 0 3
 873: PUSH
 874: LD_INT 22
 876: PUSH
 877: LD_VAR 0 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 30
 888: PUSH
 889: LD_INT 32
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PPUSH
 900: CALL_OW 69
 904: PUSH
 905: FOR_IN
 906: IFFALSE 951
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_gun ] [ i mod 4 + 1 ] ) ;
 908: LD_VAR 0 3
 912: PPUSH
 913: LD_INT 27
 915: PUSH
 916: LD_INT 25
 918: PUSH
 919: LD_INT 28
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: LD_VAR 0 3
 935: PUSH
 936: LD_INT 4
 938: MOD
 939: PUSH
 940: LD_INT 1
 942: PLUS
 943: ARRAY
 944: PPUSH
 945: CALL_OW 431
 949: GO 905
 951: POP
 952: POP
// end ;
 953: LD_VAR 0 2
 957: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
 958: LD_INT 0
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
// tmp := AreaToList ( area , 0 ) ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 0
 976: PPUSH
 977: CALL_OW 517
 981: ST_TO_ADDR
// if not tmp then
 982: LD_VAR 0 5
 986: NOT
 987: IFFALSE 991
// exit ;
 989: GO 1233
// for i := 1 to n do
 991: LD_ADDR_VAR 0 4
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 2
1005: PUSH
1006: FOR_TO
1007: IFFALSE 1231
// begin r := rand ( 1 , tmp [ 1 ] ) ;
1009: LD_ADDR_VAR 0 6
1013: PUSH
1014: LD_INT 1
1016: PPUSH
1017: LD_VAR 0 5
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 12
1030: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 1 ] , 0 ) ;
1031: LD_VAR 0 5
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PUSH
1040: LD_VAR 0 6
1044: ARRAY
1045: PPUSH
1046: LD_VAR 0 5
1050: PUSH
1051: LD_INT 2
1053: ARRAY
1054: PUSH
1055: LD_VAR 0 6
1059: ARRAY
1060: PPUSH
1061: LD_EXP 3
1065: PUSH
1066: LD_INT 1
1068: ARRAY
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
1077: LD_ADDR_EXP 13
1081: PUSH
1082: LD_EXP 13
1086: PPUSH
1087: LD_EXP 13
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: LD_VAR 0 5
1100: PUSH
1101: LD_INT 1
1103: ARRAY
1104: PUSH
1105: LD_VAR 0 6
1109: ARRAY
1110: PPUSH
1111: CALL_OW 2
1115: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
1116: LD_ADDR_EXP 13
1120: PUSH
1121: LD_EXP 13
1125: PPUSH
1126: LD_EXP 13
1130: PUSH
1131: LD_INT 1
1133: PLUS
1134: PPUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_INT 2
1142: ARRAY
1143: PUSH
1144: LD_VAR 0 6
1148: ARRAY
1149: PPUSH
1150: CALL_OW 2
1154: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
1155: LD_ADDR_VAR 0 5
1159: PUSH
1160: LD_VAR 0 5
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_VAR 0 5
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 6
1181: PPUSH
1182: CALL_OW 3
1186: PPUSH
1187: CALL_OW 1
1191: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_VAR 0 5
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_VAR 0 5
1209: PUSH
1210: LD_INT 2
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 6
1218: PPUSH
1219: CALL_OW 3
1223: PPUSH
1224: CALL_OW 1
1228: ST_TO_ADDR
// end ;
1229: GO 1006
1231: POP
1232: POP
// end ;
1233: LD_VAR 0 3
1237: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , j , tmp , undone , ct , inside , veh , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
1238: LD_INT 0
1240: PPUSH
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
1246: PPUSH
1247: PPUSH
1248: PPUSH
1249: PPUSH
1250: PPUSH
1251: PPUSH
1252: PPUSH
1253: PPUSH
1254: PPUSH
1255: PPUSH
1256: PPUSH
1257: PPUSH
1258: PPUSH
1259: PPUSH
1260: PPUSH
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
1268: PPUSH
1269: PPUSH
1270: PPUSH
// enable ;
1271: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
1272: LD_ADDR_VAR 0 11
1276: PUSH
1277: LD_INT 81
1279: PUSH
1280: LD_VAR 0 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// if tmp then
1294: LD_VAR 0 11
1298: IFFALSE 1319
// enemySide := GetSide ( tmp [ 1 ] ) ;
1300: LD_ADDR_VAR 0 38
1304: PUSH
1305: LD_VAR 0 11
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 255
1318: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
1319: LD_ADDR_VAR 0 26
1323: PUSH
1324: LD_VAR 0 3
1328: PPUSH
1329: LD_INT 81
1331: PUSH
1332: LD_VAR 0 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PPUSH
1341: CALL_OW 70
1345: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
1346: LD_ADDR_VAR 0 27
1350: PUSH
1351: LD_VAR 0 4
1355: PPUSH
1356: LD_INT 81
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 70
1372: ST_TO_ADDR
// ct := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) ;
1373: LD_ADDR_VAR 0 13
1377: PUSH
1378: LD_INT 22
1380: PUSH
1381: LD_VAR 0 1
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 50
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: LD_INT 34
1398: PUSH
1399: LD_INT 31
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 69
1415: ST_TO_ADDR
// if ct then
1416: LD_VAR 0 13
1420: IFFALSE 1511
// begin veh := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_linked ] ] , [ f_ok ] , [ f_control , control_remote ] ] ) ;
1422: LD_ADDR_VAR 0 15
1426: PUSH
1427: LD_INT 22
1429: PUSH
1430: LD_VAR 0 1
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 3
1441: PUSH
1442: LD_INT 61
1444: PUSH
1445: EMPTY
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PUSH
1458: LD_INT 33
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL_OW 69
1478: ST_TO_ADDR
// if veh then
1479: LD_VAR 0 15
1483: IFFALSE 1511
// for i in veh do
1485: LD_ADDR_VAR 0 9
1489: PUSH
1490: LD_VAR 0 15
1494: PUSH
1495: FOR_IN
1496: IFFALSE 1509
// Connect ( i ) ;
1498: LD_VAR 0 9
1502: PPUSH
1503: CALL 23409 0 1
1507: GO 1495
1509: POP
1510: POP
// end ; vehicles := arVehicles ;
1511: LD_ADDR_VAR 0 30
1515: PUSH
1516: LD_EXP 8
1520: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
1521: LD_ADDR_VAR 0 36
1525: PUSH
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 22
1533: PUSH
1534: LD_VAR 0 1
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 30
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 70
1579: ST_TO_ADDR
// if depot then
1580: LD_VAR 0 36
1584: IFFALSE 1600
// depot := depot [ 1 ] ;
1586: LD_ADDR_VAR 0 36
1590: PUSH
1591: LD_VAR 0 36
1595: PUSH
1596: LD_INT 1
1598: ARRAY
1599: ST_TO_ADDR
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1600: LD_ADDR_VAR 0 22
1604: PUSH
1605: LD_VAR 0 5
1609: PPUSH
1610: LD_INT 25
1612: PUSH
1613: LD_INT 4
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 50
1622: PUSH
1623: EMPTY
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: ST_TO_ADDR
// if arTech then
1635: LD_EXP 5
1639: IFFALSE 2001
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
1641: LD_ADDR_VAR 0 16
1645: PUSH
1646: LD_VAR 0 3
1650: PPUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 50
1665: PUSH
1666: EMPTY
1667: LIST
1668: PUSH
1669: LD_INT 2
1671: PUSH
1672: LD_INT 30
1674: PUSH
1675: LD_INT 6
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 30
1684: PUSH
1685: LD_INT 7
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 30
1694: PUSH
1695: LD_INT 8
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PPUSH
1713: CALL_OW 70
1717: ST_TO_ADDR
// if lab then
1718: LD_VAR 0 16
1722: IFFALSE 2001
// begin for j := 1 to Count ( lab ) do
1724: LD_ADDR_VAR 0 10
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_VAR 0 16
1738: PPUSH
1739: CALL 17203 0 1
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1999
// if BuildingStatus ( lab [ j ] ) = bs_idle then
1747: LD_VAR 0 16
1751: PUSH
1752: LD_VAR 0 10
1756: ARRAY
1757: PPUSH
1758: CALL_OW 461
1762: PUSH
1763: LD_INT 2
1765: EQUAL
1766: IFFALSE 1849
// begin for i in arTech do
1768: LD_ADDR_VAR 0 9
1772: PUSH
1773: LD_EXP 5
1777: PUSH
1778: FOR_IN
1779: IFFALSE 1845
// if CanBeResearched ( lab [ j ] , i ) and GetTech ( i , side ) = state_enabled then
1781: LD_VAR 0 16
1785: PUSH
1786: LD_VAR 0 10
1790: ARRAY
1791: PPUSH
1792: LD_VAR 0 9
1796: PPUSH
1797: CALL_OW 430
1801: PUSH
1802: LD_VAR 0 9
1806: PPUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 321
1816: PUSH
1817: LD_INT 1
1819: EQUAL
1820: AND
1821: IFFALSE 1843
// begin AddComResearch ( lab [ j ] , i ) ;
1823: LD_VAR 0 16
1827: PUSH
1828: LD_VAR 0 10
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 9
1838: PPUSH
1839: CALL_OW 184
// end ;
1843: GO 1778
1845: POP
1846: POP
// end else
1847: GO 1997
// if BuildingStatus ( lab [ j ] ) = bs_need_people then
1849: LD_VAR 0 16
1853: PUSH
1854: LD_VAR 0 10
1858: ARRAY
1859: PPUSH
1860: CALL_OW 461
1864: PUSH
1865: LD_INT 6
1867: EQUAL
1868: IFFALSE 1997
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
1870: LD_ADDR_VAR 0 9
1874: PUSH
1875: LD_VAR 0 22
1879: PPUSH
1880: LD_INT 3
1882: PUSH
1883: LD_INT 120
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PPUSH
1897: CALL_OW 72
1901: PUSH
1902: FOR_IN
1903: IFFALSE 1995
// begin inside := IsInUnit ( i ) ;
1905: LD_ADDR_VAR 0 14
1909: PUSH
1910: LD_VAR 0 9
1914: PPUSH
1915: CALL_OW 310
1919: ST_TO_ADDR
// if not inside then
1920: LD_VAR 0 14
1924: NOT
1925: IFFALSE 1949
// ComEnterUnit ( i , lab [ j ] ) else
1927: LD_VAR 0 9
1931: PPUSH
1932: LD_VAR 0 16
1936: PUSH
1937: LD_VAR 0 10
1941: ARRAY
1942: PPUSH
1943: CALL_OW 120
1947: GO 1993
// if BuildingStatus ( inside ) = bs_idle then
1949: LD_VAR 0 14
1953: PPUSH
1954: CALL_OW 461
1958: PUSH
1959: LD_INT 2
1961: EQUAL
1962: IFFALSE 1993
// begin ComExitBuilding ( i ) ;
1964: LD_VAR 0 9
1968: PPUSH
1969: CALL_OW 122
// AddComEnterUnit ( i , lab [ j ] ) ;
1973: LD_VAR 0 9
1977: PPUSH
1978: LD_VAR 0 16
1982: PUSH
1983: LD_VAR 0 10
1987: ARRAY
1988: PPUSH
1989: CALL_OW 180
// end ; end ;
1993: GO 1902
1995: POP
1996: POP
// end ;
1997: GO 1744
1999: POP
2000: POP
// end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
2001: LD_ADDR_VAR 0 33
2005: PUSH
2006: LD_VAR 0 3
2010: PPUSH
2011: LD_INT 22
2013: PUSH
2014: LD_VAR 0 1
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 30
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 50
2035: PUSH
2036: EMPTY
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 70
2048: ST_TO_ADDR
// if fac then
2049: LD_VAR 0 33
2053: IFFALSE 2388
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
2055: LD_VAR 0 33
2059: PUSH
2060: LD_INT 1
2062: ARRAY
2063: PPUSH
2064: CALL_OW 461
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: IFFALSE 2388
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
2074: LD_ADDR_VAR 0 34
2078: PUSH
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 30
2099: PUSH
2100: LD_INT 33
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 35
2114: PUSH
2115: LD_INT 0
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 70
2130: ST_TO_ADDR
// if emptyTowers then
2131: LD_VAR 0 34
2135: IFFALSE 2185
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
2137: LD_ADDR_VAR 0 35
2141: PUSH
2142: LD_VAR 0 34
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: LD_VAR 0 3
2155: PPUSH
2156: CALL 25448 0 2
2160: ST_TO_ADDR
// if weapon then
2161: LD_VAR 0 35
2165: IFFALSE 2185
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
2167: LD_VAR 0 34
2171: PUSH
2172: LD_INT 1
2174: ARRAY
2175: PPUSH
2176: LD_VAR 0 35
2180: PPUSH
2181: CALL_OW 148
// end ; if arConstructList then
2185: LD_EXP 6
2189: IFFALSE 2388
// for i := 1 to Count ( arConstructList ) do
2191: LD_ADDR_VAR 0 9
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_EXP 6
2205: PPUSH
2206: CALL 17203 0 1
2210: PUSH
2211: FOR_TO
2212: IFFALSE 2386
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
2214: LD_VAR 0 33
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_EXP 6
2227: PUSH
2228: LD_VAR 0 9
2232: ARRAY
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: LD_EXP 6
2242: PUSH
2243: LD_VAR 0 9
2247: ARRAY
2248: PUSH
2249: LD_INT 2
2251: ARRAY
2252: PPUSH
2253: LD_EXP 6
2257: PUSH
2258: LD_VAR 0 9
2262: ARRAY
2263: PUSH
2264: LD_INT 3
2266: ARRAY
2267: PPUSH
2268: LD_EXP 6
2272: PUSH
2273: LD_VAR 0 9
2277: ARRAY
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PPUSH
2283: CALL_OW 448
2287: IFFALSE 2384
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
2289: LD_VAR 0 33
2293: PUSH
2294: LD_INT 1
2296: ARRAY
2297: PPUSH
2298: LD_EXP 6
2302: PUSH
2303: LD_VAR 0 9
2307: ARRAY
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: PPUSH
2313: LD_EXP 6
2317: PUSH
2318: LD_VAR 0 9
2322: ARRAY
2323: PUSH
2324: LD_INT 2
2326: ARRAY
2327: PPUSH
2328: LD_EXP 6
2332: PUSH
2333: LD_VAR 0 9
2337: ARRAY
2338: PUSH
2339: LD_INT 3
2341: ARRAY
2342: PPUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_INT 4
2356: ARRAY
2357: PPUSH
2358: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
2362: LD_ADDR_EXP 6
2366: PUSH
2367: LD_EXP 6
2371: PPUSH
2372: LD_VAR 0 9
2376: PPUSH
2377: CALL_OW 3
2381: ST_TO_ADDR
// break ;
2382: GO 2386
// end ; end ;
2384: GO 2211
2386: POP
2387: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2388: LD_ADDR_VAR 0 11
2392: PUSH
2393: LD_VAR 0 3
2397: PPUSH
2398: LD_INT 21
2400: PUSH
2401: LD_INT 3
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 57
2413: PUSH
2414: EMPTY
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 24
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: PPUSH
2443: CALL_OW 70
2447: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
2448: LD_ADDR_VAR 0 21
2452: PUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 435
2462: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
2463: LD_ADDR_VAR 0 18
2467: PUSH
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 25
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 50
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL_OW 72
2497: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
2498: LD_VAR 0 18
2502: PPUSH
2503: LD_INT 3
2505: PUSH
2506: LD_INT 120
2508: PUSH
2509: LD_INT 7
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 3
2522: PUSH
2523: LD_INT 54
2525: PUSH
2526: EMPTY
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PPUSH
2537: CALL_OW 72
2541: PUSH
2542: LD_VAR 0 33
2546: PUSH
2547: LD_INT 1
2549: ARRAY
2550: PPUSH
2551: CALL_OW 302
2555: AND
2556: IFFALSE 2615
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
2558: LD_VAR 0 18
2562: PPUSH
2563: LD_INT 3
2565: PUSH
2566: LD_INT 120
2568: PUSH
2569: LD_INT 7
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: PUSH
2580: LD_INT 3
2582: PUSH
2583: LD_INT 54
2585: PUSH
2586: EMPTY
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 72
2601: PPUSH
2602: LD_VAR 0 33
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: CALL_OW 120
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
2615: LD_ADDR_VAR 0 16
2619: PUSH
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_INT 6
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 30
2640: PUSH
2641: LD_INT 7
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_INT 8
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: ST_TO_ADDR
// if sci then
2669: LD_VAR 0 22
2673: IFFALSE 2916
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
2675: LD_ADDR_VAR 0 24
2679: PUSH
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 95
2687: PUSH
2688: LD_VAR 0 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 120
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: ST_TO_ADDR
// if hurtUnits then
2716: LD_VAR 0 24
2720: IFFALSE 2815
// begin for i in UnitFilter ( sci , [ f_not , [ f_tag , tHealer ] ] ) do
2722: LD_ADDR_VAR 0 9
2726: PUSH
2727: LD_VAR 0 22
2731: PPUSH
2732: LD_INT 3
2734: PUSH
2735: LD_INT 120
2737: PUSH
2738: LD_INT 10
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PPUSH
2749: CALL_OW 72
2753: PUSH
2754: FOR_IN
2755: IFFALSE 2811
// begin SetTag ( i , tHealer ) ;
2757: LD_VAR 0 9
2761: PPUSH
2762: LD_INT 10
2764: PPUSH
2765: CALL_OW 109
// if IsInUnit ( i ) then
2769: LD_VAR 0 9
2773: PPUSH
2774: CALL_OW 310
2778: IFFALSE 2791
// ComExitBuilding ( i ) else
2780: LD_VAR 0 9
2784: PPUSH
2785: CALL_OW 122
2789: GO 2809
// ComHeal ( i , hurtUnits [ 1 ] ) ;
2791: LD_VAR 0 9
2795: PPUSH
2796: LD_VAR 0 24
2800: PUSH
2801: LD_INT 1
2803: ARRAY
2804: PPUSH
2805: CALL_OW 128
// end ;
2809: GO 2754
2811: POP
2812: POP
// end else
2813: GO 2916
// if lab and UnitFilter ( sci , [ f_tag , tHealer ] ) then
2815: LD_VAR 0 16
2819: PUSH
2820: LD_VAR 0 22
2824: PPUSH
2825: LD_INT 120
2827: PUSH
2828: LD_INT 10
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: CALL_OW 72
2839: AND
2840: IFFALSE 2916
// begin for i in UnitFilter ( sci , [ f_tag , tHealer ] ) do
2842: LD_ADDR_VAR 0 9
2846: PUSH
2847: LD_VAR 0 22
2851: PPUSH
2852: LD_INT 120
2854: PUSH
2855: LD_INT 10
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 72
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2914
// begin SetTag ( i , 0 ) ;
2870: LD_VAR 0 9
2874: PPUSH
2875: LD_INT 0
2877: PPUSH
2878: CALL_OW 109
// if not IsInUnit ( i ) then
2882: LD_VAR 0 9
2886: PPUSH
2887: CALL_OW 310
2891: NOT
2892: IFFALSE 2912
// ComEnterUnit ( i , lab [ 1 ] ) ;
2894: LD_VAR 0 9
2898: PPUSH
2899: LD_VAR 0 16
2903: PUSH
2904: LD_INT 1
2906: ARRAY
2907: PPUSH
2908: CALL_OW 120
// end ;
2912: GO 2867
2914: POP
2915: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
2916: LD_ADDR_VAR 0 17
2920: PUSH
2921: LD_VAR 0 5
2925: PPUSH
2926: LD_INT 25
2928: PUSH
2929: LD_INT 2
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 72
2940: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
2941: LD_ADDR_VAR 0 37
2945: PUSH
2946: LD_EXP 7
2950: ST_TO_ADDR
// if eng then
2951: LD_VAR 0 17
2955: IFFALSE 3789
// begin for i in eng do
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_VAR 0 17
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3787
// begin tag := GetTag ( i ) ;
2970: LD_ADDR_VAR 0 19
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: CALL_OW 110
2984: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
2985: LD_VAR 0 9
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 308
2999: IFFALSE 3030
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
3001: LD_VAR 0 9
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 7
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PPUSH
3024: CALL_OW 111
// continue ;
3028: GO 2967
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
3030: LD_VAR 0 9
3034: PPUSH
3035: CALL_OW 256
3039: PUSH
3040: LD_INT 800
3042: LESS
3043: PUSH
3044: LD_VAR 0 19
3048: PUSH
3049: LD_INT 1
3051: NONEQUAL
3052: AND
3053: IFFALSE 3103
// begin SetTag ( i , tHeal ) ;
3055: LD_VAR 0 9
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
3067: LD_VAR 0 9
3071: PPUSH
3072: LD_VAR 0 6
3076: PUSH
3077: LD_INT 1
3079: ARRAY
3080: PPUSH
3081: LD_VAR 0 6
3085: PUSH
3086: LD_INT 2
3088: ARRAY
3089: PPUSH
3090: CALL_OW 111
// AddComHold ( i ) ;
3094: LD_VAR 0 9
3098: PPUSH
3099: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
3103: LD_VAR 0 19
3107: PUSH
3108: LD_INT 1
3110: EQUAL
3111: PUSH
3112: LD_VAR 0 9
3116: PPUSH
3117: CALL_OW 256
3121: PUSH
3122: LD_INT 1000
3124: EQUAL
3125: AND
3126: IFFALSE 3140
// SetTag ( i , 0 ) ;
3128: LD_VAR 0 9
3132: PPUSH
3133: LD_INT 0
3135: PPUSH
3136: CALL_OW 109
// if not tag then
3140: LD_VAR 0 19
3144: NOT
3145: IFFALSE 3312
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3147: LD_ADDR_VAR 0 12
3151: PUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: LD_INT 57
3159: PUSH
3160: EMPTY
3161: LIST
3162: PPUSH
3163: CALL_OW 70
3167: ST_TO_ADDR
// if undone then
3168: LD_VAR 0 12
3172: IFFALSE 3194
// begin ComComplete ( i , undone [ 1 ] ) ;
3174: LD_VAR 0 9
3178: PPUSH
3179: LD_VAR 0 12
3183: PUSH
3184: LD_INT 1
3186: ARRAY
3187: PPUSH
3188: CALL 23301 0 2
// continue ;
3192: GO 2967
// end ; if cr or tmp or buildingsToBuild then
3194: LD_VAR 0 21
3198: PUSH
3199: LD_VAR 0 11
3203: OR
3204: PUSH
3205: LD_VAR 0 37
3209: OR
3210: IFFALSE 3286
// begin if IsInUnit ( i ) then
3212: LD_VAR 0 9
3216: PPUSH
3217: CALL_OW 310
3221: IFFALSE 3232
// ComExitBuilding ( i ) ;
3223: LD_VAR 0 9
3227: PPUSH
3228: CALL_OW 122
// if tmp then
3232: LD_VAR 0 11
3236: IFFALSE 3252
// SetTag ( i , tRepair ) else
3238: LD_VAR 0 9
3242: PPUSH
3243: LD_INT 3
3245: PPUSH
3246: CALL_OW 109
3250: GO 3284
// if cr then
3252: LD_VAR 0 21
3256: IFFALSE 3272
// SetTag ( i , tCrates ) else
3258: LD_VAR 0 9
3262: PPUSH
3263: LD_INT 2
3265: PPUSH
3266: CALL_OW 109
3270: GO 3284
// SetTag ( i , tBuild ) ;
3272: LD_VAR 0 9
3276: PPUSH
3277: LD_INT 5
3279: PPUSH
3280: CALL_OW 109
// end else
3284: GO 3312
// if not IsInUnit ( i ) then
3286: LD_VAR 0 9
3290: PPUSH
3291: CALL_OW 310
3295: NOT
3296: IFFALSE 3312
// ComEnterUnit ( i , depot ) ;
3298: LD_VAR 0 9
3302: PPUSH
3303: LD_VAR 0 36
3307: PPUSH
3308: CALL_OW 120
// end ; if tag = tRepair then
3312: LD_VAR 0 19
3316: PUSH
3317: LD_INT 3
3319: EQUAL
3320: IFFALSE 3426
// begin if IsInUnit ( i ) then
3322: LD_VAR 0 9
3326: PPUSH
3327: CALL_OW 310
3331: IFFALSE 3344
// begin ComExitBuilding ( i ) ;
3333: LD_VAR 0 9
3337: PPUSH
3338: CALL_OW 122
// continue ;
3342: GO 2967
// end ; if not tmp then
3344: LD_VAR 0 11
3348: NOT
3349: IFFALSE 3365
// begin SetTag ( i , 0 ) ;
3351: LD_VAR 0 9
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: CALL_OW 109
// continue ;
3363: GO 2967
// end ; if not HasTask ( i ) then
3365: LD_VAR 0 9
3369: PPUSH
3370: CALL_OW 314
3374: NOT
3375: IFFALSE 3395
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
3377: LD_VAR 0 9
3381: PPUSH
3382: LD_VAR 0 11
3386: PUSH
3387: LD_INT 1
3389: ARRAY
3390: PPUSH
3391: CALL_OW 130
// if not IsInArea ( i , area ) then
3395: LD_VAR 0 9
3399: PPUSH
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 308
3409: NOT
3410: IFFALSE 3426
// ComMoveToArea ( i , area ) ;
3412: LD_VAR 0 9
3416: PPUSH
3417: LD_VAR 0 3
3421: PPUSH
3422: CALL_OW 113
// end ; if tag = tBuild then
3426: LD_VAR 0 19
3430: PUSH
3431: LD_INT 5
3433: EQUAL
3434: IFFALSE 3640
// begin if IsInUnit ( i ) then
3436: LD_VAR 0 9
3440: PPUSH
3441: CALL_OW 310
3445: IFFALSE 3458
// begin ComExitBuilding ( i ) ;
3447: LD_VAR 0 9
3451: PPUSH
3452: CALL_OW 122
// continue ;
3456: GO 2967
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
3458: LD_VAR 0 37
3462: NOT
3463: PUSH
3464: LD_VAR 0 26
3468: OR
3469: PUSH
3470: LD_VAR 0 27
3474: OR
3475: IFFALSE 3493
// begin SetTag ( i , 0 ) ;
3477: LD_VAR 0 9
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 109
// continue ;
3489: GO 2967
// end else
3491: GO 3532
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
3493: LD_VAR 0 36
3497: PPUSH
3498: LD_VAR 0 37
3502: PUSH
3503: LD_INT 1
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PPUSH
3511: CALL 56711 0 2
3515: NOT
3516: IFFALSE 3532
// begin SetTag ( i , 0 ) ;
3518: LD_VAR 0 9
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 109
// continue ;
3530: GO 2967
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
3532: LD_ADDR_VAR 0 12
3536: PUSH
3537: LD_VAR 0 3
3541: PPUSH
3542: LD_INT 57
3544: PUSH
3545: EMPTY
3546: LIST
3547: PPUSH
3548: CALL_OW 70
3552: ST_TO_ADDR
// if undone then
3553: LD_VAR 0 12
3557: IFFALSE 3579
// begin ComComplete ( i , undone [ 1 ] ) ;
3559: LD_VAR 0 9
3563: PPUSH
3564: LD_VAR 0 12
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL 23301 0 2
// continue ;
3577: GO 2967
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
3579: LD_VAR 0 9
3583: PPUSH
3584: LD_VAR 0 37
3588: PUSH
3589: LD_INT 1
3591: ARRAY
3592: PUSH
3593: LD_INT 1
3595: ARRAY
3596: PPUSH
3597: LD_VAR 0 37
3601: PUSH
3602: LD_INT 1
3604: ARRAY
3605: PUSH
3606: LD_INT 2
3608: ARRAY
3609: PPUSH
3610: LD_VAR 0 37
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PUSH
3619: LD_INT 3
3621: ARRAY
3622: PPUSH
3623: LD_VAR 0 37
3627: PUSH
3628: LD_INT 1
3630: ARRAY
3631: PUSH
3632: LD_INT 4
3634: ARRAY
3635: PPUSH
3636: CALL_OW 145
// end ; if tag = tCrates then
3640: LD_VAR 0 19
3644: PUSH
3645: LD_INT 2
3647: EQUAL
3648: IFFALSE 3785
// begin if IsInUnit ( i ) then
3650: LD_VAR 0 9
3654: PPUSH
3655: CALL_OW 310
3659: IFFALSE 3672
// begin ComExitBuilding ( i ) ;
3661: LD_VAR 0 9
3665: PPUSH
3666: CALL_OW 122
// continue ;
3670: GO 2967
// end ; if not cr then
3672: LD_VAR 0 21
3676: NOT
3677: IFFALSE 3693
// begin SetTag ( i , 0 ) ;
3679: LD_VAR 0 9
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 109
// continue ;
3691: GO 2967
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
3693: LD_VAR 0 9
3697: PPUSH
3698: CALL_OW 314
3702: NOT
3703: PUSH
3704: LD_INT 81
3706: PUSH
3707: LD_VAR 0 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: LD_INT 92
3718: PUSH
3719: LD_VAR 0 21
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PUSH
3728: LD_VAR 0 21
3732: PUSH
3733: LD_INT 2
3735: ARRAY
3736: PUSH
3737: LD_INT 12
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: NOT
3755: AND
3756: IFFALSE 3785
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
3758: LD_VAR 0 9
3762: PPUSH
3763: LD_VAR 0 21
3767: PUSH
3768: LD_INT 1
3770: ARRAY
3771: PPUSH
3772: LD_VAR 0 21
3776: PUSH
3777: LD_INT 2
3779: ARRAY
3780: PPUSH
3781: CALL_OW 117
// end ; end ;
3785: GO 2967
3787: POP
3788: POP
// end ; if vehicles then
3789: LD_VAR 0 30
3793: IFFALSE 4593
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
3795: LD_ADDR_VAR 0 30
3799: PUSH
3800: LD_VAR 0 30
3804: PPUSH
3805: LD_INT 3
3807: PUSH
3808: LD_INT 2
3810: PUSH
3811: LD_INT 34
3813: PUSH
3814: LD_INT 88
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 34
3823: PUSH
3824: LD_INT 32
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 50
3842: PUSH
3843: EMPTY
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PPUSH
3850: CALL_OW 72
3854: ST_TO_ADDR
// if vehicles then
3855: LD_VAR 0 30
3859: IFFALSE 4593
// begin for i in vehicles do
3861: LD_ADDR_VAR 0 9
3865: PUSH
3866: LD_VAR 0 30
3870: PUSH
3871: FOR_IN
3872: IFFALSE 4591
// begin tag := GetTag ( i ) ;
3874: LD_ADDR_VAR 0 19
3878: PUSH
3879: LD_VAR 0 9
3883: PPUSH
3884: CALL_OW 110
3888: ST_TO_ADDR
// if not tag then
3889: LD_VAR 0 19
3893: NOT
3894: IFFALSE 4040
// begin if GetControl ( i ) = control_manual then
3896: LD_VAR 0 9
3900: PPUSH
3901: CALL_OW 263
3905: PUSH
3906: LD_INT 1
3908: EQUAL
3909: IFFALSE 4026
// begin drivers := arDrivers ;
3911: LD_ADDR_VAR 0 28
3915: PUSH
3916: LD_EXP 10
3920: ST_TO_ADDR
// if not drivers then
3921: LD_VAR 0 28
3925: NOT
3926: IFFALSE 4006
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
3928: LD_ADDR_VAR 0 28
3932: PUSH
3933: LD_VAR 0 18
3937: PPUSH
3938: LD_INT 3
3940: PUSH
3941: LD_INT 120
3943: PUSH
3944: LD_INT 7
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 72
3959: ST_TO_ADDR
// if drivers then
3960: LD_VAR 0 28
3964: IFFALSE 4006
// begin SetTag ( drivers [ 1 ] , tMech ) ;
3966: LD_VAR 0 28
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_INT 7
3977: PPUSH
3978: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
3982: LD_ADDR_EXP 10
3986: PUSH
3987: LD_EXP 10
3991: PPUSH
3992: LD_VAR 0 28
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: CALL 52792 0 2
4005: ST_TO_ADDR
// end ; end ; if drivers then
4006: LD_VAR 0 28
4010: IFFALSE 4024
// SetTag ( i , tBusy ) ;
4012: LD_VAR 0 9
4016: PPUSH
4017: LD_INT 8
4019: PPUSH
4020: CALL_OW 109
// continue ;
4024: GO 3871
// end ; SetTag ( i , tBusy ) ;
4026: LD_VAR 0 9
4030: PPUSH
4031: LD_INT 8
4033: PPUSH
4034: CALL_OW 109
// end else
4038: GO 4589
// if tag = tBusy then
4040: LD_VAR 0 19
4044: PUSH
4045: LD_INT 8
4047: EQUAL
4048: IFFALSE 4260
// begin if GetLives ( i ) = 1000 then
4050: LD_VAR 0 9
4054: PPUSH
4055: CALL_OW 256
4059: PUSH
4060: LD_INT 1000
4062: EQUAL
4063: IFFALSE 4258
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
4065: LD_VAR 0 9
4069: PPUSH
4070: CALL_OW 263
4074: PUSH
4075: LD_INT 1
4077: EQUAL
4078: PUSH
4079: LD_VAR 0 9
4083: PPUSH
4084: CALL_OW 311
4088: NOT
4089: AND
4090: IFFALSE 4246
// begin drivers := arDrivers ;
4092: LD_ADDR_VAR 0 28
4096: PUSH
4097: LD_EXP 10
4101: ST_TO_ADDR
// if not drivers then
4102: LD_VAR 0 28
4106: NOT
4107: IFFALSE 4123
// begin SetTag ( i , 0 ) ;
4109: LD_VAR 0 9
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 109
// continue ;
4121: GO 3871
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
4123: LD_VAR 0 28
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: PPUSH
4132: CALL_OW 310
4136: PUSH
4137: LD_VAR 0 28
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: PPUSH
4146: CALL 50396 0 1
4150: NOT
4151: AND
4152: IFFALSE 4167
// ComExitBuilding ( drivers [ 1 ] ) ;
4154: LD_VAR 0 28
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PPUSH
4163: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
4167: LD_VAR 0 30
4171: PPUSH
4172: LD_INT 120
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 72
4186: PUSH
4187: LD_VAR 0 28
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: CALL_OW 314
4200: NOT
4201: AND
4202: PUSH
4203: LD_VAR 0 30
4207: PPUSH
4208: LD_INT 120
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PPUSH
4218: CALL_OW 72
4222: NOT
4223: OR
4224: IFFALSE 4244
// ComEnterUnit ( drivers [ 1 ] , i ) ;
4226: LD_VAR 0 28
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 9
4239: PPUSH
4240: CALL_OW 120
// continue ;
4244: GO 3871
// end ; SetTag ( i , tAttack ) ;
4246: LD_VAR 0 9
4250: PPUSH
4251: LD_INT 13
4253: PPUSH
4254: CALL_OW 109
// end ; end else
4258: GO 4589
// if tag = tAttack then
4260: LD_VAR 0 19
4264: PUSH
4265: LD_INT 13
4267: EQUAL
4268: IFFALSE 4448
// begin enemy := enemyInBase ;
4270: LD_ADDR_VAR 0 25
4274: PUSH
4275: LD_VAR 0 26
4279: ST_TO_ADDR
// if not enemy then
4280: LD_VAR 0 25
4284: NOT
4285: IFFALSE 4297
// enemy := enemyOuterBase ;
4287: LD_ADDR_VAR 0 25
4291: PUSH
4292: LD_VAR 0 27
4296: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4297: LD_VAR 0 25
4301: NOT
4302: PUSH
4303: LD_VAR 0 9
4307: PPUSH
4308: LD_VAR 0 7
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: LD_VAR 0 7
4321: PUSH
4322: LD_INT 2
4324: ARRAY
4325: PPUSH
4326: CALL_OW 297
4330: PUSH
4331: LD_INT 10
4333: GREATER
4334: AND
4335: IFFALSE 4366
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4337: LD_VAR 0 9
4341: PPUSH
4342: LD_VAR 0 7
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 7
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 111
// continue ;
4364: GO 3871
// end ; if GetLives ( i ) < 650 then
4366: LD_VAR 0 9
4370: PPUSH
4371: CALL_OW 256
4375: PUSH
4376: LD_INT 650
4378: LESS
4379: IFFALSE 4422
// begin SetTag ( i , tVehRepair ) ;
4381: LD_VAR 0 9
4385: PPUSH
4386: LD_INT 9
4388: PPUSH
4389: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4393: LD_VAR 0 9
4397: PPUSH
4398: LD_VAR 0 7
4402: PUSH
4403: LD_INT 1
4405: ARRAY
4406: PPUSH
4407: LD_VAR 0 7
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 111
// continue ;
4420: GO 3871
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4422: LD_VAR 0 9
4426: PPUSH
4427: LD_VAR 0 25
4431: PPUSH
4432: LD_VAR 0 9
4436: PPUSH
4437: CALL_OW 74
4441: PPUSH
4442: CALL_OW 115
// end else
4446: GO 4589
// if tag = tVehRepair then
4448: LD_VAR 0 19
4452: PUSH
4453: LD_INT 9
4455: EQUAL
4456: IFFALSE 4589
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
4458: LD_VAR 0 9
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 297
4485: PUSH
4486: LD_INT 10
4488: GREATER
4489: IFFALSE 4520
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
4491: LD_VAR 0 9
4495: PPUSH
4496: LD_VAR 0 7
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 7
4509: PUSH
4510: LD_INT 2
4512: ARRAY
4513: PPUSH
4514: CALL_OW 111
// continue ;
4518: GO 3871
// end ; if GetLives ( i ) = 1000 then
4520: LD_VAR 0 9
4524: PPUSH
4525: CALL_OW 256
4529: PUSH
4530: LD_INT 1000
4532: EQUAL
4533: IFFALSE 4549
// begin SetTag ( i , tBusy ) ;
4535: LD_VAR 0 9
4539: PPUSH
4540: LD_INT 8
4542: PPUSH
4543: CALL_OW 109
// continue ;
4547: GO 3871
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
4549: LD_VAR 0 9
4553: PPUSH
4554: CALL_OW 263
4558: PUSH
4559: LD_INT 1
4561: EQUAL
4562: PUSH
4563: LD_VAR 0 9
4567: PPUSH
4568: CALL_OW 311
4572: AND
4573: IFFALSE 4589
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
4575: LD_VAR 0 9
4579: PPUSH
4580: CALL_OW 311
4584: PPUSH
4585: CALL 54492 0 1
// end ; end ;
4589: GO 3871
4591: POP
4592: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
4593: LD_ADDR_VAR 0 23
4597: PUSH
4598: LD_VAR 0 5
4602: PPUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 25
4608: PUSH
4609: LD_INT 1
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 25
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: LD_INT 25
4628: PUSH
4629: LD_INT 5
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 25
4638: PUSH
4639: LD_INT 9
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 50
4655: PUSH
4656: EMPTY
4657: LIST
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PPUSH
4663: CALL_OW 72
4667: ST_TO_ADDR
// if sol then
4668: LD_VAR 0 23
4672: IFFALSE 5180
// begin if enemyInBase then
4674: LD_VAR 0 26
4678: IFFALSE 4857
// begin for i in sol do
4680: LD_ADDR_VAR 0 9
4684: PUSH
4685: LD_VAR 0 23
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4853
// begin tw := IsInUnit ( i ) ;
4693: LD_ADDR_VAR 0 20
4697: PUSH
4698: LD_VAR 0 9
4702: PPUSH
4703: CALL_OW 310
4707: ST_TO_ADDR
// if tw then
4708: LD_VAR 0 20
4712: IFFALSE 4795
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
4714: LD_VAR 0 20
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_VAR 0 1
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 101
4733: PUSH
4734: LD_VAR 0 38
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 30
4748: PUSH
4749: LD_INT 32
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 31
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: IN
4781: NOT
4782: IFFALSE 4793
// ComExitBuilding ( i ) ;
4784: LD_VAR 0 9
4788: PPUSH
4789: CALL_OW 122
// end else
4793: GO 4851
// if IsInArea ( i , area ) then
4795: LD_VAR 0 9
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: CALL_OW 308
4809: IFFALSE 4837
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
4811: LD_VAR 0 9
4815: PPUSH
4816: LD_VAR 0 26
4820: PPUSH
4821: LD_VAR 0 9
4825: PPUSH
4826: CALL_OW 74
4830: PPUSH
4831: CALL_OW 115
4835: GO 4851
// ComMoveToArea ( i , area ) ;
4837: LD_VAR 0 9
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: CALL_OW 113
// end ;
4851: GO 4690
4853: POP
4854: POP
// end else
4855: GO 5180
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
4857: LD_ADDR_VAR 0 32
4861: PUSH
4862: LD_VAR 0 3
4866: PPUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 62
4872: PUSH
4873: EMPTY
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 2
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 32
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 4
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: LD_INT 30
4905: PUSH
4906: LD_INT 5
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: PUSH
4913: LD_INT 30
4915: PUSH
4916: LD_INT 31
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// if empty then
4939: LD_VAR 0 32
4943: IFFALSE 4960
// empty := ReverseArray ( empty ) ;
4945: LD_ADDR_VAR 0 32
4949: PUSH
4950: LD_VAR 0 32
4954: PPUSH
4955: CALL 48079 0 1
4959: ST_TO_ADDR
// for i in sol do
4960: LD_ADDR_VAR 0 9
4964: PUSH
4965: LD_VAR 0 23
4969: PUSH
4970: FOR_IN
4971: IFFALSE 5178
// begin tag := GetTag ( i ) ;
4973: LD_ADDR_VAR 0 19
4977: PUSH
4978: LD_VAR 0 9
4982: PPUSH
4983: CALL_OW 110
4987: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
4988: LD_VAR 0 9
4992: PPUSH
4993: CALL_OW 256
4997: PUSH
4998: LD_INT 1000
5000: LESS
5001: PUSH
5002: LD_VAR 0 19
5006: PUSH
5007: LD_INT 1
5009: NONEQUAL
5010: AND
5011: IFFALSE 5063
// begin SetTag ( i , tHeal ) ;
5013: LD_VAR 0 9
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
5025: LD_VAR 0 9
5029: PPUSH
5030: LD_VAR 0 6
5034: PUSH
5035: LD_INT 1
5037: ARRAY
5038: PPUSH
5039: LD_VAR 0 6
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PPUSH
5048: CALL_OW 111
// AddComHold ( i ) ;
5052: LD_VAR 0 9
5056: PPUSH
5057: CALL_OW 200
// continue ;
5061: GO 4970
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5063: LD_VAR 0 9
5067: PPUSH
5068: CALL_OW 256
5072: PUSH
5073: LD_INT 1000
5075: EQUAL
5076: PUSH
5077: LD_VAR 0 19
5081: PUSH
5082: LD_INT 1
5084: EQUAL
5085: AND
5086: IFFALSE 5102
// begin SetTag ( i , 0 ) ;
5088: LD_VAR 0 9
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: CALL_OW 109
// continue ;
5100: GO 4970
// end ; if HasTask ( i ) then
5102: LD_VAR 0 9
5106: PPUSH
5107: CALL_OW 314
5111: IFFALSE 5115
// continue ;
5113: GO 4970
// if not IsInUnit ( i ) and not tag and empty then
5115: LD_VAR 0 9
5119: PPUSH
5120: CALL_OW 310
5124: NOT
5125: PUSH
5126: LD_VAR 0 19
5130: NOT
5131: AND
5132: PUSH
5133: LD_VAR 0 32
5137: AND
5138: IFFALSE 5176
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
5140: LD_VAR 0 9
5144: PPUSH
5145: LD_VAR 0 32
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
5158: LD_ADDR_VAR 0 32
5162: PUSH
5163: LD_VAR 0 32
5167: PPUSH
5168: LD_INT 1
5170: PPUSH
5171: CALL_OW 3
5175: ST_TO_ADDR
// end ; end ;
5176: GO 4970
5178: POP
5179: POP
// end ; end ; end ;
5180: LD_VAR 0 8
5184: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
5185: LD_EXP 14
5189: PPUSH
5190: LD_INT 50
5192: PUSH
5193: EMPTY
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: IFFALSE 5253
5202: GO 5204
5204: DISABLE
// begin enable ;
5205: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , arBaseArea , arBaseOuterArea , arForce , [ 109 , 43 ] , [ 112 , 52 ] ) ;
5206: LD_EXP 3
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_INT 1
5217: PPUSH
5218: LD_INT 1
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_EXP 14
5228: PPUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 43
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PPUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 52
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PPUSH
5249: CALL 1238 0 7
// end ;
5253: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
5254: LD_EXP 13
5258: IFFALSE 5478
5260: GO 5262
5262: DISABLE
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
// begin enable ;
5268: ENABLE
// p := 1 ;
5269: LD_ADDR_VAR 0 2
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
5277: LD_ADDR_VAR 0 1
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_EXP 13
5291: PPUSH
5292: CALL 17203 0 1
5296: PUSH
5297: LD_INT 2
5299: DIV
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5476
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
5304: LD_ADDR_VAR 0 3
5308: PUSH
5309: LD_EXP 13
5313: PUSH
5314: LD_VAR 0 2
5318: ARRAY
5319: PPUSH
5320: LD_EXP 13
5324: PUSH
5325: LD_VAR 0 2
5329: PUSH
5330: LD_INT 1
5332: PLUS
5333: ARRAY
5334: PPUSH
5335: CALL_OW 428
5339: ST_TO_ADDR
// if tmp then
5340: LD_VAR 0 3
5344: IFFALSE 5460
// if GetSide ( tmp ) <> botSides [ 1 ] then
5346: LD_VAR 0 3
5350: PPUSH
5351: CALL_OW 255
5355: PUSH
5356: LD_EXP 3
5360: PUSH
5361: LD_INT 1
5363: ARRAY
5364: NONEQUAL
5365: IFFALSE 5460
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 1 ] ) ;
5367: LD_EXP 13
5371: PUSH
5372: LD_VAR 0 2
5376: ARRAY
5377: PPUSH
5378: LD_EXP 13
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: ARRAY
5392: PPUSH
5393: LD_EXP 3
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
5406: LD_ADDR_EXP 13
5410: PUSH
5411: LD_EXP 13
5415: PPUSH
5416: LD_VAR 0 2
5420: PPUSH
5421: CALL_OW 3
5425: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
5426: LD_ADDR_EXP 13
5430: PUSH
5431: LD_EXP 13
5435: PPUSH
5436: LD_VAR 0 2
5440: PPUSH
5441: CALL_OW 3
5445: ST_TO_ADDR
// p := p - 2 ;
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: LD_VAR 0 2
5455: PUSH
5456: LD_INT 2
5458: MINUS
5459: ST_TO_ADDR
// end ; p := p + 2 ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: LD_VAR 0 2
5469: PUSH
5470: LD_INT 2
5472: PLUS
5473: ST_TO_ADDR
// end ;
5474: GO 5301
5476: POP
5477: POP
// end ;
5478: PPOPN 3
5480: END
// every 8 8$00 trigger IsOk ( arDep ) and not arConstructList do
5481: LD_INT 2
5483: PPUSH
5484: CALL_OW 302
5488: PUSH
5489: LD_EXP 6
5493: NOT
5494: AND
5495: IFFALSE 5667
5497: GO 5499
5499: DISABLE
// begin enable ;
5500: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] ] ;
5501: LD_ADDR_EXP 6
5505: PUSH
5506: LD_INT 14
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 2
5514: PUSH
5515: LD_INT 27
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 14
5526: PUSH
5527: LD_INT 1
5529: PUSH
5530: LD_INT 2
5532: PUSH
5533: LD_INT 28
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 14
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: LD_INT 28
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: ST_TO_ADDR
// if Difficulty > 1 and GetTech ( tech_SibImplosion , botSides [ 1 ] ) = state_researched then
5565: LD_OWVAR 67
5569: PUSH
5570: LD_INT 1
5572: GREATER
5573: PUSH
5574: LD_INT 72
5576: PPUSH
5577: LD_EXP 3
5581: PUSH
5582: LD_INT 1
5584: ARRAY
5585: PPUSH
5586: CALL_OW 321
5590: PUSH
5591: LD_INT 2
5593: EQUAL
5594: AND
5595: IFFALSE 5667
// arConstructList := arConstructList ^ [ [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] , [ ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ] ;
5597: LD_ADDR_EXP 6
5601: PUSH
5602: LD_EXP 6
5606: PUSH
5607: LD_INT 14
5609: PUSH
5610: LD_INT 3
5612: PUSH
5613: LD_INT 2
5615: PUSH
5616: LD_INT 29
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 14
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 29
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 14
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: LD_INT 2
5651: PUSH
5652: LD_INT 29
5654: PUSH
5655: EMPTY
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: ADD
5666: ST_TO_ADDR
// end ; end_of_file
5667: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_apeman , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
5668: LD_INT 0
5670: PPUSH
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// multi_settings_counter := 6 ;
5675: LD_ADDR_EXP 29
5679: PUSH
5680: LD_INT 6
5682: ST_TO_ADDR
// multi_settings := [ ] ;
5683: LD_ADDR_EXP 28
5687: PUSH
5688: EMPTY
5689: ST_TO_ADDR
// if Multiplayer then
5690: LD_OWVAR 4
5694: IFFALSE 5874
// begin your_side := mp_player_side ;
5696: LD_ADDR_OWVAR 2
5700: PUSH
5701: LD_OWVAR 7
5705: ST_TO_ADDR
// multi_gametype := mp_game_type ;
5706: LD_ADDR_EXP 17
5710: PUSH
5711: LD_OWVAR 6
5715: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
5716: LD_ADDR_EXP 18
5720: PUSH
5721: LD_OWVAR 17
5725: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
5726: LD_ADDR_EXP 19
5730: PUSH
5731: LD_OWVAR 15
5735: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
5736: LD_ADDR_EXP 20
5740: PUSH
5741: LD_OWVAR 16
5745: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
5746: LD_ADDR_EXP 21
5750: PUSH
5751: EMPTY
5752: PUSH
5753: EMPTY
5754: LIST
5755: ST_TO_ADDR
// for i in mp_teams do
5756: LD_ADDR_VAR 0 2
5760: PUSH
5761: LD_OWVAR 12
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5810
// if i then
5769: LD_VAR 0 2
5773: IFFALSE 5808
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
5775: LD_ADDR_EXP 21
5779: PUSH
5780: LD_EXP 21
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_EXP 21
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: UNION
5802: PPUSH
5803: CALL_OW 1
5807: ST_TO_ADDR
5808: GO 5766
5810: POP
5811: POP
// for i := 1 to multi_settings_counter do
5812: LD_ADDR_VAR 0 2
5816: PUSH
5817: DOUBLE
5818: LD_INT 1
5820: DEC
5821: ST_TO_ADDR
5822: LD_EXP 29
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5870
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
5830: LD_ADDR_EXP 28
5834: PUSH
5835: LD_EXP 28
5839: PPUSH
5840: LD_EXP 28
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 2
5853: PPUSH
5854: CALL_OW 426
5858: PUSH
5859: LD_INT 1
5861: PLUS
5862: PPUSH
5863: CALL_OW 1
5867: ST_TO_ADDR
5868: GO 5827
5870: POP
5871: POP
// end else
5872: GO 6060
// begin your_side := 3 ;
5874: LD_ADDR_OWVAR 2
5878: PUSH
5879: LD_INT 3
5881: ST_TO_ADDR
// multi_gametype := 1 ;
5882: LD_ADDR_EXP 17
5886: PUSH
5887: LD_INT 1
5889: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
5890: LD_ADDR_EXP 18
5894: PUSH
5895: LD_INT 0
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: LD_INT 2
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
5929: LD_ADDR_EXP 19
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 1
5942: PUSH
5943: LD_INT 1
5945: PUSH
5946: LD_INT 1
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: LD_INT 0
5954: PUSH
5955: LD_INT 0
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
5968: LD_ADDR_EXP 20
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 3
5981: PUSH
5982: LD_INT 3
5984: PUSH
5985: LD_INT 3
5987: PUSH
5988: LD_INT 0
5990: PUSH
5991: LD_INT 0
5993: PUSH
5994: LD_INT 0
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
6007: LD_ADDR_EXP 21
6011: PUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 4
6017: PUSH
6018: LD_INT 5
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 2 , 3 ] ;
6029: LD_ADDR_EXP 28
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 4
6039: PUSH
6040: LD_INT 4
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: LD_INT 3
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6060: LD_ADDR_EXP 22
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6099: LD_ADDR_EXP 25
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: LD_INT 0
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6138: LD_ADDR_EXP 36
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: LD_INT 0
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// multi_teamgame := true ;
6177: LD_ADDR_EXP 26
6181: PUSH
6182: LD_INT 1
6184: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
6185: LD_ADDR_EXP 24
6189: PUSH
6190: LD_INT 3
6192: PUSH
6193: EMPTY
6194: LIST
6195: ST_TO_ADDR
// multi_custom_commanders := true ;
6196: LD_ADDR_EXP 27
6200: PUSH
6201: LD_INT 1
6203: ST_TO_ADDR
// multi_commanders := [ ] ;
6204: LD_ADDR_EXP 35
6208: PUSH
6209: EMPTY
6210: ST_TO_ADDR
// multi_reinforcements := [ ] ;
6211: LD_ADDR_EXP 38
6215: PUSH
6216: EMPTY
6217: ST_TO_ADDR
// multi_players_amount := 0 ;
6218: LD_ADDR_EXP 37
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
6226: LD_ADDR_EXP 23
6230: PUSH
6231: LD_INT 5
6233: PUSH
6234: LD_INT 6
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 7
6243: PUSH
6244: LD_INT 8
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 9
6253: PUSH
6254: LD_INT 10
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: ST_TO_ADDR
// multi_buildings := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6266: LD_ADDR_EXP 40
6270: PUSH
6271: EMPTY
6272: PUSH
6273: EMPTY
6274: PUSH
6275: EMPTY
6276: PUSH
6277: EMPTY
6278: PUSH
6279: EMPTY
6280: PUSH
6281: EMPTY
6282: PUSH
6283: EMPTY
6284: PUSH
6285: EMPTY
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: ST_TO_ADDR
// for i := 1 to 8 do
6297: LD_ADDR_VAR 0 2
6301: PUSH
6302: DOUBLE
6303: LD_INT 1
6305: DEC
6306: ST_TO_ADDR
6307: LD_INT 8
6309: PUSH
6310: FOR_TO
6311: IFFALSE 6640
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
6313: LD_VAR 0 2
6317: PPUSH
6318: CALL_OW 530
6322: IFFALSE 6480
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
6324: LD_ADDR_EXP 22
6328: PUSH
6329: LD_EXP 22
6333: PPUSH
6334: LD_VAR 0 2
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 1
6346: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
6347: LD_ADDR_EXP 20
6351: PUSH
6352: LD_EXP 20
6356: PPUSH
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_INT 0
6364: PPUSH
6365: CALL_OW 1
6369: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
6370: LD_ADDR_EXP 18
6374: PUSH
6375: LD_EXP 18
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: LD_INT 0
6387: PPUSH
6388: CALL_OW 1
6392: ST_TO_ADDR
// for j = 1 to multi_teams do
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: DOUBLE
6399: LD_INT 1
6401: DEC
6402: ST_TO_ADDR
6403: LD_EXP 21
6407: PUSH
6408: FOR_TO
6409: IFFALSE 6478
// begin if i in multi_teams [ j ] then
6411: LD_VAR 0 2
6415: PUSH
6416: LD_EXP 21
6420: PUSH
6421: LD_VAR 0 3
6425: ARRAY
6426: IN
6427: IFFALSE 6476
// begin tmp := multi_teams [ j ] diff i ;
6429: LD_ADDR_VAR 0 5
6433: PUSH
6434: LD_EXP 21
6438: PUSH
6439: LD_VAR 0 3
6443: ARRAY
6444: PUSH
6445: LD_VAR 0 2
6449: DIFF
6450: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
6451: LD_ADDR_EXP 21
6455: PUSH
6456: LD_EXP 21
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_VAR 0 5
6470: PPUSH
6471: CALL_OW 1
6475: ST_TO_ADDR
// end ; end ;
6476: GO 6408
6478: POP
6479: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
6480: LD_EXP 20
6484: PUSH
6485: LD_VAR 0 2
6489: ARRAY
6490: PUSH
6491: LD_EXP 20
6495: PUSH
6496: LD_VAR 0 2
6500: ARRAY
6501: PUSH
6502: LD_EXP 24
6506: IN
6507: NOT
6508: AND
6509: IFFALSE 6550
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
6511: LD_ADDR_EXP 20
6515: PUSH
6516: LD_EXP 20
6520: PPUSH
6521: LD_VAR 0 2
6525: PPUSH
6526: LD_EXP 24
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_EXP 24
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: PPUSH
6545: CALL_OW 1
6549: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
6550: LD_EXP 20
6554: PUSH
6555: LD_VAR 0 2
6559: ARRAY
6560: NOT
6561: PUSH
6562: LD_EXP 18
6566: PUSH
6567: LD_VAR 0 2
6571: ARRAY
6572: NOT
6573: AND
6574: PUSH
6575: LD_EXP 22
6579: PUSH
6580: LD_VAR 0 2
6584: ARRAY
6585: NOT
6586: AND
6587: IFFALSE 6612
// multi_bots := Replace ( multi_bots , i , 1 ) ;
6589: LD_ADDR_EXP 25
6593: PUSH
6594: LD_EXP 25
6598: PPUSH
6599: LD_VAR 0 2
6603: PPUSH
6604: LD_INT 1
6606: PPUSH
6607: CALL_OW 1
6611: ST_TO_ADDR
// if multi_sides [ i ] then
6612: LD_EXP 18
6616: PUSH
6617: LD_VAR 0 2
6621: ARRAY
6622: IFFALSE 6638
// multi_players_amount := multi_players_amount + 1 ;
6624: LD_ADDR_EXP 37
6628: PUSH
6629: LD_EXP 37
6633: PUSH
6634: LD_INT 1
6636: PLUS
6637: ST_TO_ADDR
// end ;
6638: GO 6310
6640: POP
6641: POP
// for i in multi_teams do
6642: LD_ADDR_VAR 0 2
6646: PUSH
6647: LD_EXP 21
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6761
// begin for j = 2 to i do
6655: LD_ADDR_VAR 0 3
6659: PUSH
6660: DOUBLE
6661: LD_INT 2
6663: DEC
6664: ST_TO_ADDR
6665: LD_VAR 0 2
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6757
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6673: LD_VAR 0 2
6677: PUSH
6678: LD_VAR 0 3
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 2
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: CALL_OW 343
// for x = 1 to j - 1 do
6697: LD_ADDR_VAR 0 4
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: MINUS
6715: PUSH
6716: FOR_TO
6717: IFFALSE 6753
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
6719: LD_VAR 0 2
6723: PUSH
6724: LD_VAR 0 3
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 2
6734: PUSH
6735: LD_VAR 0 4
6739: ARRAY
6740: PPUSH
6741: LD_INT 1
6743: PPUSH
6744: LD_INT 1
6746: PPUSH
6747: CALL_OW 80
6751: GO 6716
6753: POP
6754: POP
// end ;
6755: GO 6670
6757: POP
6758: POP
// end ;
6759: GO 6652
6761: POP
6762: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
6763: LD_ADDR_OWVAR 67
6767: PUSH
6768: LD_INT 1
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: LD_EXP 28
6786: PUSH
6787: LD_INT 1
6789: ARRAY
6790: ARRAY
6791: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
6792: LD_ADDR_EXP 30
6796: PUSH
6797: LD_INT 9
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: LD_INT 15
6805: PUSH
6806: LD_INT 18
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_EXP 28
6819: PUSH
6820: LD_INT 2
6822: ARRAY
6823: ARRAY
6824: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
6825: LD_ADDR_EXP 31
6829: PUSH
6830: LD_INT 1
6832: PUSH
6833: LD_INT 2
6835: PUSH
6836: LD_INT 3
6838: PUSH
6839: LD_INT 5
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: PUSH
6848: LD_EXP 28
6852: PUSH
6853: LD_INT 3
6855: ARRAY
6856: ARRAY
6857: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
6858: LD_ADDR_EXP 32
6862: PUSH
6863: LD_INT 3000
6865: PUSH
6866: LD_INT 1120
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 5000
6875: PUSH
6876: LD_INT 770
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 6000
6885: PUSH
6886: LD_INT 490
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 8000
6895: PUSH
6896: LD_INT 420
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: PUSH
6909: LD_EXP 28
6913: PUSH
6914: LD_INT 4
6916: ARRAY
6917: ARRAY
6918: ST_TO_ADDR
// multi_apeman := [ 0 , 1 , 2 , 3 ] [ multi_settings [ 5 ] ] ;
6919: LD_ADDR_EXP 33
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: LD_INT 1
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PUSH
6942: LD_EXP 28
6946: PUSH
6947: LD_INT 5
6949: ARRAY
6950: ARRAY
6951: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
6952: LD_ADDR_EXP 34
6956: PUSH
6957: LD_INT 0
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: LD_INT 2
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_EXP 28
6975: PUSH
6976: LD_INT 6
6978: ARRAY
6979: ARRAY
6980: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
6981: LD_ADDR_EXP 39
6985: PUSH
6986: LD_INT 10500
6988: PUSH
6989: LD_INT 31500
6991: PUSH
6992: LD_INT 52500
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_OWVAR 67
7004: ARRAY
7005: ST_TO_ADDR
// end ;
7006: LD_VAR 0 1
7010: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
7011: LD_INT 0
7013: PPUSH
7014: PPUSH
// if not multi_sides [ preferSide ] then
7015: LD_EXP 18
7019: PUSH
7020: LD_VAR 0 1
7024: ARRAY
7025: NOT
7026: IFFALSE 7040
// begin result := preferSide ;
7028: LD_ADDR_VAR 0 2
7032: PUSH
7033: LD_VAR 0 1
7037: ST_TO_ADDR
// exit ;
7038: GO 7087
// end ; for i := 1 to 8 do
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_INT 8
7052: PUSH
7053: FOR_TO
7054: IFFALSE 7085
// if not multi_sides [ i ] then
7056: LD_EXP 18
7060: PUSH
7061: LD_VAR 0 3
7065: ARRAY
7066: NOT
7067: IFFALSE 7083
// begin result := i ;
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: LD_VAR 0 3
7078: ST_TO_ADDR
// exit ;
7079: POP
7080: POP
7081: GO 7087
// end ;
7083: GO 7053
7085: POP
7086: POP
// end ;
7087: LD_VAR 0 2
7091: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
7092: LD_INT 0
7094: PPUSH
// uc_side := side ;
7095: LD_ADDR_OWVAR 20
7099: PUSH
7100: LD_VAR 0 1
7104: ST_TO_ADDR
// uc_nation := nation_russian ;
7105: LD_ADDR_OWVAR 21
7109: PUSH
7110: LD_INT 3
7112: ST_TO_ADDR
// hc_importance := 100 ;
7113: LD_ADDR_OWVAR 32
7117: PUSH
7118: LD_INT 100
7120: ST_TO_ADDR
// if num = 1 then
7121: LD_VAR 0 2
7125: PUSH
7126: LD_INT 1
7128: EQUAL
7129: IFFALSE 7196
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7131: LD_INT 1
7133: PPUSH
7134: LD_EXP 31
7138: PUSH
7139: LD_INT 1
7141: PLUS
7142: PPUSH
7143: CALL_OW 381
// hc_gallery := ru ;
7147: LD_ADDR_OWVAR 33
7151: PUSH
7152: LD_STRING ru
7154: ST_TO_ADDR
// hc_face_number := 25 ;
7155: LD_ADDR_OWVAR 34
7159: PUSH
7160: LD_INT 25
7162: ST_TO_ADDR
// hc_name := Xavier ;
7163: LD_ADDR_OWVAR 26
7167: PUSH
7168: LD_STRING Xavier
7170: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7171: LD_ADDR_OWVAR 29
7175: PUSH
7176: LD_INT 12
7178: PUSH
7179: LD_INT 10
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: ST_TO_ADDR
// result := CreateHuman ;
7186: LD_ADDR_VAR 0 3
7190: PUSH
7191: CALL_OW 44
7195: ST_TO_ADDR
// end ; if num = 2 then
7196: LD_VAR 0 2
7200: PUSH
7201: LD_INT 2
7203: EQUAL
7204: IFFALSE 7271
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
7206: LD_INT 1
7208: PPUSH
7209: LD_EXP 31
7213: PUSH
7214: LD_INT 2
7216: PLUS
7217: PPUSH
7218: CALL_OW 383
// hc_gallery := ru ;
7222: LD_ADDR_OWVAR 33
7226: PUSH
7227: LD_STRING ru
7229: ST_TO_ADDR
// hc_face_number := 1 ;
7230: LD_ADDR_OWVAR 34
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// hc_name := Burlak ;
7238: LD_ADDR_OWVAR 26
7242: PUSH
7243: LD_STRING Burlak
7245: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
7246: LD_ADDR_OWVAR 29
7250: PUSH
7251: LD_INT 10
7253: PUSH
7254: LD_INT 11
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: ST_TO_ADDR
// result := CreateHuman ;
7261: LD_ADDR_VAR 0 3
7265: PUSH
7266: CALL_OW 44
7270: ST_TO_ADDR
// end ; if num = 3 then
7271: LD_VAR 0 2
7275: PUSH
7276: LD_INT 3
7278: EQUAL
7279: IFFALSE 7346
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
7281: LD_INT 1
7283: PPUSH
7284: LD_EXP 31
7288: PUSH
7289: LD_INT 1
7291: PLUS
7292: PPUSH
7293: CALL_OW 381
// hc_gallery := ru ;
7297: LD_ADDR_OWVAR 33
7301: PUSH
7302: LD_STRING ru
7304: ST_TO_ADDR
// hc_face_number := 18 ;
7305: LD_ADDR_OWVAR 34
7309: PUSH
7310: LD_INT 18
7312: ST_TO_ADDR
// hc_name := Vsevolod ;
7313: LD_ADDR_OWVAR 26
7317: PUSH
7318: LD_STRING Vsevolod
7320: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
7321: LD_ADDR_OWVAR 29
7325: PUSH
7326: LD_INT 12
7328: PUSH
7329: LD_INT 11
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: ST_TO_ADDR
// result := CreateHuman ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: CALL_OW 44
7345: ST_TO_ADDR
// end ; end ;
7346: LD_VAR 0 3
7350: RET
// export function Multiplayer_PrepareApemans ( ) ; var i , tmp ; begin
7351: LD_INT 0
7353: PPUSH
7354: PPUSH
7355: PPUSH
// if not multi_apeman then
7356: LD_EXP 33
7360: NOT
7361: IFFALSE 7365
// exit ;
7363: GO 7443
// tmp := [ 6 , 9 , 12 ] [ multi_apeman ] ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: LD_INT 6
7372: PUSH
7373: LD_INT 9
7375: PUSH
7376: LD_INT 12
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_EXP 33
7388: ARRAY
7389: ST_TO_ADDR
// for i := 1 to tmp do
7390: LD_ADDR_VAR 0 2
7394: PUSH
7395: DOUBLE
7396: LD_INT 1
7398: DEC
7399: ST_TO_ADDR
7400: LD_VAR 0 3
7404: PUSH
7405: FOR_TO
7406: IFFALSE 7441
// begin uc_side := 0 ;
7408: LD_ADDR_OWVAR 20
7412: PUSH
7413: LD_INT 0
7415: ST_TO_ADDR
// PrepareApeman ( - 5 ) ;
7416: LD_INT 5
7418: NEG
7419: PPUSH
7420: CALL 49060 0 1
// PlaceUnitArea ( CreateHuman , apeSpawnArea , false ) ;
7424: CALL_OW 44
7428: PPUSH
7429: LD_INT 21
7431: PPUSH
7432: LD_INT 0
7434: PPUSH
7435: CALL_OW 49
// end ;
7439: GO 7405
7441: POP
7442: POP
// end ;
7443: LD_VAR 0 1
7447: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
7448: LD_INT 0
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
7459: PPUSH
// for i := 1 to 8 do
7460: LD_ADDR_VAR 0 2
7464: PUSH
7465: DOUBLE
7466: LD_INT 1
7468: DEC
7469: ST_TO_ADDR
7470: LD_INT 8
7472: PUSH
7473: FOR_TO
7474: IFFALSE 8654
// begin if not multi_sides [ i ] then
7476: LD_EXP 18
7480: PUSH
7481: LD_VAR 0 2
7485: ARRAY
7486: NOT
7487: IFFALSE 7491
// continue ;
7489: GO 7473
// if multi_buildings [ multi_sides [ i ] ] then
7491: LD_EXP 40
7495: PUSH
7496: LD_EXP 18
7500: PUSH
7501: LD_VAR 0 2
7505: ARRAY
7506: ARRAY
7507: IFFALSE 7741
// begin uc_side := i ;
7509: LD_ADDR_OWVAR 20
7513: PUSH
7514: LD_VAR 0 2
7518: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7519: LD_ADDR_OWVAR 21
7523: PUSH
7524: LD_EXP 20
7528: PUSH
7529: LD_VAR 0 2
7533: ARRAY
7534: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
7535: LD_ADDR_VAR 0 3
7539: PUSH
7540: LD_EXP 40
7544: PUSH
7545: LD_EXP 18
7549: PUSH
7550: LD_VAR 0 2
7554: ARRAY
7555: ARRAY
7556: PUSH
7557: FOR_IN
7558: IFFALSE 7739
// begin bc_type := j [ 1 ] ;
7560: LD_ADDR_OWVAR 42
7564: PUSH
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 1
7572: ARRAY
7573: ST_TO_ADDR
// bc_level := 2 ;
7574: LD_ADDR_OWVAR 43
7578: PUSH
7579: LD_INT 2
7581: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 2
7594: ARRAY
7595: PUSH
7596: LD_INT 1
7598: ARRAY
7599: PPUSH
7600: LD_VAR 0 3
7604: PUSH
7605: LD_INT 2
7607: ARRAY
7608: PUSH
7609: LD_INT 2
7611: ARRAY
7612: PPUSH
7613: LD_VAR 0 3
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_INT 3
7624: ARRAY
7625: PPUSH
7626: CALL_OW 47
7630: ST_TO_ADDR
// if j [ 1 ] = b_depot then
7631: LD_VAR 0 3
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: PUSH
7640: LD_INT 0
7642: EQUAL
7643: IFFALSE 7737
// begin SetBName ( b , j [ 3 ] ) ;
7645: LD_VAR 0 4
7649: PPUSH
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 3
7657: ARRAY
7658: PPUSH
7659: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
7663: LD_VAR 0 4
7667: PPUSH
7668: CALL_OW 274
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 120
7678: PUSH
7679: LD_INT 100
7681: PUSH
7682: LD_INT 80
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: LD_OWVAR 67
7694: ARRAY
7695: PPUSH
7696: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
7700: LD_VAR 0 4
7704: PPUSH
7705: CALL_OW 274
7709: PPUSH
7710: LD_INT 2
7712: PPUSH
7713: LD_INT 90
7715: PUSH
7716: LD_INT 60
7718: PUSH
7719: LD_INT 30
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: PUSH
7727: LD_OWVAR 67
7731: ARRAY
7732: PPUSH
7733: CALL_OW 277
// end ; end ;
7737: GO 7557
7739: POP
7740: POP
// end ; if multi_custom_commanders then
7741: LD_EXP 27
7745: IFFALSE 7954
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
7747: LD_ADDR_VAR 0 6
7751: PUSH
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_EXP 18
7761: PUSH
7762: LD_VAR 0 2
7766: ARRAY
7767: PPUSH
7768: CALL 7092 0 2
7772: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
7773: LD_ADDR_EXP 35
7777: PUSH
7778: LD_EXP 35
7782: PPUSH
7783: LD_EXP 35
7787: PUSH
7788: LD_INT 1
7790: PLUS
7791: PPUSH
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 2
7801: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
7802: LD_VAR 0 6
7806: PPUSH
7807: CALL_OW 257
7811: PUSH
7812: LD_INT 3
7814: EQUAL
7815: IFFALSE 7919
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun , 80 ) ;
7817: LD_INT 23
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: LD_INT 1
7825: PPUSH
7826: LD_INT 46
7828: PPUSH
7829: LD_INT 80
7831: PPUSH
7832: CALL 19941 0 5
// veh := CreateVehicle ;
7836: LD_ADDR_VAR 0 7
7840: PUSH
7841: CALL_OW 45
7845: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
7846: LD_VAR 0 7
7850: PPUSH
7851: LD_VAR 0 6
7855: PPUSH
7856: CALL_OW 255
7860: PUSH
7861: LD_INT 1
7863: NEG
7864: MUL
7865: PPUSH
7866: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7870: LD_VAR 0 7
7874: PPUSH
7875: LD_EXP 23
7879: PUSH
7880: LD_EXP 18
7884: PUSH
7885: LD_VAR 0 2
7889: ARRAY
7890: ARRAY
7891: PUSH
7892: LD_INT 2
7894: ARRAY
7895: PPUSH
7896: LD_INT 0
7898: PPUSH
7899: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7903: LD_VAR 0 6
7907: PPUSH
7908: LD_VAR 0 7
7912: PPUSH
7913: CALL_OW 52
// end else
7917: GO 7952
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7919: LD_VAR 0 6
7923: PPUSH
7924: LD_EXP 23
7928: PUSH
7929: LD_EXP 18
7933: PUSH
7934: LD_VAR 0 2
7938: ARRAY
7939: ARRAY
7940: PUSH
7941: LD_INT 1
7943: ARRAY
7944: PPUSH
7945: LD_INT 0
7947: PPUSH
7948: CALL_OW 49
// end else
7952: GO 8165
// begin uc_side := i ;
7954: LD_ADDR_OWVAR 20
7958: PUSH
7959: LD_VAR 0 2
7963: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
7964: LD_ADDR_OWVAR 21
7968: PUSH
7969: LD_EXP 20
7973: PUSH
7974: LD_VAR 0 2
7978: ARRAY
7979: ST_TO_ADDR
// hc_importance := 100 ;
7980: LD_ADDR_OWVAR 32
7984: PUSH
7985: LD_INT 100
7987: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
7988: LD_INT 0
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: LD_EXP 31
7998: PPUSH
7999: CALL_OW 380
// if multiplayer then
8003: LD_OWVAR 4
8007: IFFALSE 8065
// begin hc_name := mp_sides_players_names [ i ] ;
8009: LD_ADDR_OWVAR 26
8013: PUSH
8014: LD_OWVAR 19
8018: PUSH
8019: LD_VAR 0 2
8023: ARRAY
8024: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
8025: LD_ADDR_OWVAR 33
8029: PUSH
8030: LD_STRING MULTIAVATARS
8032: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
8033: LD_ADDR_OWVAR 34
8037: PUSH
8038: LD_VAR 0 2
8042: PPUSH
8043: CALL_OW 525
8047: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
8048: LD_ADDR_OWVAR 27
8052: PUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 526
8062: ST_TO_ADDR
// end else
8063: GO 8097
// begin hc_gallery :=  ;
8065: LD_ADDR_OWVAR 33
8069: PUSH
8070: LD_STRING 
8072: ST_TO_ADDR
// hc_name :=  ;
8073: LD_ADDR_OWVAR 26
8077: PUSH
8078: LD_STRING 
8080: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
8081: LD_ADDR_OWVAR 27
8085: PUSH
8086: LD_INT 1
8088: PPUSH
8089: LD_INT 2
8091: PPUSH
8092: CALL_OW 12
8096: ST_TO_ADDR
// end ; un := CreateHuman ;
8097: LD_ADDR_VAR 0 6
8101: PUSH
8102: CALL_OW 44
8106: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8107: LD_VAR 0 6
8111: PPUSH
8112: LD_EXP 23
8116: PUSH
8117: LD_EXP 18
8121: PUSH
8122: LD_VAR 0 2
8126: ARRAY
8127: ARRAY
8128: PUSH
8129: LD_INT 1
8131: ARRAY
8132: PPUSH
8133: LD_INT 0
8135: PPUSH
8136: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
8140: LD_ADDR_EXP 35
8144: PUSH
8145: LD_EXP 35
8149: PPUSH
8150: LD_VAR 0 2
8154: PPUSH
8155: LD_VAR 0 6
8159: PPUSH
8160: CALL_OW 1
8164: ST_TO_ADDR
// end ; InitHc ;
8165: CALL_OW 19
// InitUc ;
8169: CALL_OW 18
// uc_side := i ;
8173: LD_ADDR_OWVAR 20
8177: PUSH
8178: LD_VAR 0 2
8182: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8183: LD_ADDR_OWVAR 21
8187: PUSH
8188: LD_EXP 20
8192: PUSH
8193: LD_VAR 0 2
8197: ARRAY
8198: ST_TO_ADDR
// hc_gallery :=  ;
8199: LD_ADDR_OWVAR 33
8203: PUSH
8204: LD_STRING 
8206: ST_TO_ADDR
// hc_name :=  ;
8207: LD_ADDR_OWVAR 26
8211: PUSH
8212: LD_STRING 
8214: ST_TO_ADDR
// hc_importance := 0 ;
8215: LD_ADDR_OWVAR 32
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// cl := 1 ;
8223: LD_ADDR_VAR 0 5
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: DOUBLE
8237: LD_INT 2
8239: DEC
8240: ST_TO_ADDR
8241: LD_EXP 30
8245: PUSH
8246: FOR_TO
8247: IFFALSE 8650
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 1
8256: MINUS
8257: PUSH
8258: LD_EXP 30
8262: PUSH
8263: LD_INT 1
8265: MINUS
8266: PUSH
8267: LD_INT 4
8269: DIVREAL
8270: MOD
8271: PUSH
8272: LD_INT 0
8274: EQUAL
8275: IFFALSE 8291
// cl := cl + 1 ;
8277: LD_ADDR_VAR 0 5
8281: PUSH
8282: LD_VAR 0 5
8286: PUSH
8287: LD_INT 1
8289: PLUS
8290: ST_TO_ADDR
// if cl > 4 then
8291: LD_VAR 0 5
8295: PUSH
8296: LD_INT 4
8298: GREATER
8299: IFFALSE 8309
// cl := 1 ;
8301: LD_ADDR_VAR 0 5
8305: PUSH
8306: LD_INT 1
8308: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
8309: LD_INT 0
8311: PPUSH
8312: LD_VAR 0 5
8316: PPUSH
8317: LD_EXP 31
8321: PPUSH
8322: CALL_OW 380
// un := CreateHuman ;
8326: LD_ADDR_VAR 0 6
8330: PUSH
8331: CALL_OW 44
8335: ST_TO_ADDR
// if j > copy then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_VAR 0 9
8345: GREATER
8346: IFFALSE 8375
// copy := Replace ( copy , j , un ) else
8348: LD_ADDR_VAR 0 9
8352: PUSH
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_VAR 0 3
8362: PPUSH
8363: LD_VAR 0 6
8367: PPUSH
8368: CALL_OW 1
8372: ST_TO_ADDR
8373: GO 8457
// begin CopySkills ( copy [ j ] , un ) ;
8375: LD_VAR 0 9
8379: PUSH
8380: LD_VAR 0 3
8384: ARRAY
8385: PPUSH
8386: LD_VAR 0 6
8390: PPUSH
8391: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
8395: LD_VAR 0 6
8399: PPUSH
8400: LD_INT 2
8402: PPUSH
8403: LD_VAR 0 9
8407: PUSH
8408: LD_VAR 0 3
8412: ARRAY
8413: PPUSH
8414: LD_INT 2
8416: PPUSH
8417: CALL_OW 260
8421: PPUSH
8422: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
8426: LD_VAR 0 6
8430: PPUSH
8431: LD_INT 1
8433: PPUSH
8434: LD_VAR 0 9
8438: PUSH
8439: LD_VAR 0 3
8443: ARRAY
8444: PPUSH
8445: LD_INT 1
8447: PPUSH
8448: CALL_OW 260
8452: PPUSH
8453: CALL_OW 239
// end ; if multi_pos_area then
8457: LD_EXP 23
8461: IFFALSE 8648
// begin if GetClass ( un ) = 3 then
8463: LD_VAR 0 6
8467: PPUSH
8468: CALL_OW 257
8472: PUSH
8473: LD_INT 3
8475: EQUAL
8476: IFFALSE 8615
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_cargo_bay ] [ j mod 4 + 1 ] , 80 ) ;
8478: LD_INT 22
8480: PPUSH
8481: LD_INT 1
8483: PPUSH
8484: LD_INT 1
8486: PPUSH
8487: LD_INT 44
8489: PUSH
8490: LD_INT 44
8492: PUSH
8493: LD_INT 43
8495: PUSH
8496: LD_INT 51
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_VAR 0 3
8509: PUSH
8510: LD_INT 4
8512: MOD
8513: PUSH
8514: LD_INT 1
8516: PLUS
8517: ARRAY
8518: PPUSH
8519: LD_INT 80
8521: PPUSH
8522: CALL 19941 0 5
// veh := CreateVehicle ;
8526: LD_ADDR_VAR 0 7
8530: PUSH
8531: CALL_OW 45
8535: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
8536: LD_VAR 0 7
8540: PPUSH
8541: LD_EXP 23
8545: PUSH
8546: LD_EXP 18
8550: PUSH
8551: LD_VAR 0 2
8555: ARRAY
8556: ARRAY
8557: PUSH
8558: LD_INT 2
8560: ARRAY
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
8569: LD_VAR 0 6
8573: PPUSH
8574: LD_VAR 0 7
8578: PPUSH
8579: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
8583: LD_VAR 0 7
8587: PPUSH
8588: CALL_OW 264
8592: PUSH
8593: LD_INT 51
8595: EQUAL
8596: IFFALSE 8613
// SetCargo ( veh , mat_cans , 100 ) ;
8598: LD_VAR 0 7
8602: PPUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 100
8608: PPUSH
8609: CALL_OW 290
// continue ;
8613: GO 8246
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
8615: LD_VAR 0 6
8619: PPUSH
8620: LD_EXP 23
8624: PUSH
8625: LD_EXP 18
8629: PUSH
8630: LD_VAR 0 2
8634: ARRAY
8635: ARRAY
8636: PUSH
8637: LD_INT 1
8639: ARRAY
8640: PPUSH
8641: LD_INT 0
8643: PPUSH
8644: CALL_OW 49
// end ; end ;
8648: GO 8246
8650: POP
8651: POP
// end ;
8652: GO 7473
8654: POP
8655: POP
// end ;
8656: LD_VAR 0 1
8660: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
8661: LD_INT 0
8663: PPUSH
8664: PPUSH
8665: PPUSH
8666: PPUSH
8667: PPUSH
// if not multi_support then
8668: LD_EXP 34
8672: NOT
8673: IFFALSE 8677
// exit ;
8675: GO 8964
// result := [ ] ;
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: EMPTY
8683: ST_TO_ADDR
// for i := 1 to 8 do
8684: LD_ADDR_VAR 0 2
8688: PUSH
8689: DOUBLE
8690: LD_INT 1
8692: DEC
8693: ST_TO_ADDR
8694: LD_INT 8
8696: PUSH
8697: FOR_TO
8698: IFFALSE 8962
// begin result := Replace ( result , i , [ ] ) ;
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: LD_VAR 0 1
8709: PPUSH
8710: LD_VAR 0 2
8714: PPUSH
8715: EMPTY
8716: PPUSH
8717: CALL_OW 1
8721: ST_TO_ADDR
// if multi_sides [ i ] then
8722: LD_EXP 18
8726: PUSH
8727: LD_VAR 0 2
8731: ARRAY
8732: IFFALSE 8960
// begin tmp := [ ] ;
8734: LD_ADDR_VAR 0 5
8738: PUSH
8739: EMPTY
8740: ST_TO_ADDR
// if multi_support = 1 then
8741: LD_EXP 34
8745: PUSH
8746: LD_INT 1
8748: EQUAL
8749: IFFALSE 8838
// begin uc_side := i ;
8751: LD_ADDR_OWVAR 20
8755: PUSH
8756: LD_VAR 0 2
8760: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8761: LD_ADDR_OWVAR 21
8765: PUSH
8766: LD_EXP 20
8770: PUSH
8771: LD_VAR 0 2
8775: ARRAY
8776: ST_TO_ADDR
// for j := 1 to 2 do
8777: LD_ADDR_VAR 0 3
8781: PUSH
8782: DOUBLE
8783: LD_INT 1
8785: DEC
8786: ST_TO_ADDR
8787: LD_INT 2
8789: PUSH
8790: FOR_TO
8791: IFFALSE 8836
// begin InitHC_All ( ) ;
8793: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
8797: LD_INT 0
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 4
8805: PPUSH
8806: CALL_OW 12
8810: PPUSH
8811: LD_INT 1
8813: PPUSH
8814: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 5
8827: PUSH
8828: CALL_OW 44
8832: ADD
8833: ST_TO_ADDR
// end ;
8834: GO 8790
8836: POP
8837: POP
// end ; if multi_support = 2 then
8838: LD_EXP 34
8842: PUSH
8843: LD_INT 2
8845: EQUAL
8846: IFFALSE 8935
// begin uc_side := i ;
8848: LD_ADDR_OWVAR 20
8852: PUSH
8853: LD_VAR 0 2
8857: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
8858: LD_ADDR_OWVAR 21
8862: PUSH
8863: LD_EXP 20
8867: PUSH
8868: LD_VAR 0 2
8872: ARRAY
8873: ST_TO_ADDR
// for j := 1 to 4 do
8874: LD_ADDR_VAR 0 3
8878: PUSH
8879: DOUBLE
8880: LD_INT 1
8882: DEC
8883: ST_TO_ADDR
8884: LD_INT 4
8886: PUSH
8887: FOR_TO
8888: IFFALSE 8933
// begin InitHC_All ( ) ;
8890: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
8894: LD_INT 0
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_INT 4
8902: PPUSH
8903: CALL_OW 12
8907: PPUSH
8908: LD_INT 2
8910: PPUSH
8911: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
8915: LD_ADDR_VAR 0 5
8919: PUSH
8920: LD_VAR 0 5
8924: PUSH
8925: CALL_OW 44
8929: ADD
8930: ST_TO_ADDR
// end ;
8931: GO 8887
8933: POP
8934: POP
// end ; result := Replace ( result , i , tmp ) ;
8935: LD_ADDR_VAR 0 1
8939: PUSH
8940: LD_VAR 0 1
8944: PPUSH
8945: LD_VAR 0 2
8949: PPUSH
8950: LD_VAR 0 5
8954: PPUSH
8955: CALL_OW 1
8959: ST_TO_ADDR
// end ; end ;
8960: GO 8697
8962: POP
8963: POP
// end ;
8964: LD_VAR 0 1
8968: RET
// export function Multiplayer_Start ( ) ; begin
8969: LD_INT 0
8971: PPUSH
// Multiplayer_PrepareApemans ( ) ;
8972: CALL 7351 0 0
// Multiplayer_PreparePlayers ( ) ;
8976: CALL 7448 0 0
// Multiplayer_InitPointSystem ( ) ;
8980: CALL 9710 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
8984: LD_INT 20
8986: PPUSH
8987: CALL 9886 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
8991: LD_INT 150
8993: PPUSH
8994: CALL 9886 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
8998: LD_INT 5
9000: PPUSH
9001: CALL 9886 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
9005: LD_INT 40
9007: NEG
9008: PPUSH
9009: CALL 9886 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
9013: LD_INT 200
9015: PPUSH
9016: CALL 9886 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
9020: LD_INT 2
9022: PPUSH
9023: CALL 9886 0 1
// if multi_support then
9027: LD_EXP 34
9031: IFFALSE 9043
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
9033: LD_ADDR_EXP 38
9037: PUSH
9038: CALL 8661 0 0
9042: ST_TO_ADDR
// if multi_sides [ your_side ] then
9043: LD_EXP 18
9047: PUSH
9048: LD_OWVAR 2
9052: ARRAY
9053: IFFALSE 9080
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
9055: LD_INT 22
9057: PUSH
9058: LD_OWVAR 2
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: PPUSH
9067: CALL_OW 69
9071: PUSH
9072: LD_INT 1
9074: ARRAY
9075: PPUSH
9076: CALL_OW 87
// end ;
9080: LD_VAR 0 1
9084: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
9085: LD_INT 0
9087: PPUSH
9088: PPUSH
9089: PPUSH
// repeat wait ( 0 0$1 ) ;
9090: LD_INT 35
9092: PPUSH
9093: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
9097: LD_OWVAR 1
9101: PUSH
9102: LD_EXP 39
9106: GREATER
9107: PUSH
9108: LD_EXP 34
9112: AND
9113: IFFALSE 9278
// begin if tick mod 1 1$00 = 0 then
9115: LD_OWVAR 1
9119: PUSH
9120: LD_INT 2100
9122: MOD
9123: PUSH
9124: LD_INT 0
9126: EQUAL
9127: IFFALSE 9278
// begin for i := 1 to 8 do
9129: LD_ADDR_VAR 0 2
9133: PUSH
9134: DOUBLE
9135: LD_INT 1
9137: DEC
9138: ST_TO_ADDR
9139: LD_INT 8
9141: PUSH
9142: FOR_TO
9143: IFFALSE 9276
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
9145: LD_EXP 18
9149: PUSH
9150: LD_VAR 0 2
9154: ARRAY
9155: PUSH
9156: LD_EXP 36
9160: PUSH
9161: LD_VAR 0 2
9165: ARRAY
9166: NOT
9167: AND
9168: PUSH
9169: LD_EXP 38
9173: PUSH
9174: LD_VAR 0 2
9178: ARRAY
9179: AND
9180: PUSH
9181: LD_INT 80
9183: PUSH
9184: LD_INT 60
9186: PUSH
9187: LD_INT 40
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: PUSH
9195: LD_OWVAR 67
9199: ARRAY
9200: PPUSH
9201: CALL_OW 13
9205: AND
9206: IFFALSE 9274
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
9208: LD_EXP 38
9212: PUSH
9213: LD_VAR 0 2
9217: ARRAY
9218: PUSH
9219: LD_INT 1
9221: ARRAY
9222: PPUSH
9223: LD_INT 11
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
9233: LD_ADDR_EXP 38
9237: PUSH
9238: LD_EXP 38
9242: PPUSH
9243: LD_VAR 0 2
9247: PPUSH
9248: LD_EXP 38
9252: PUSH
9253: LD_VAR 0 2
9257: ARRAY
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 3
9266: PPUSH
9267: CALL_OW 1
9271: ST_TO_ADDR
// break ;
9272: GO 9276
// end ; end ;
9274: GO 9142
9276: POP
9277: POP
// end ; end ; if not multi_custom_commanders then
9278: LD_EXP 27
9282: NOT
9283: IFFALSE 9396
// begin for i := 1 to 8 do
9285: LD_ADDR_VAR 0 2
9289: PUSH
9290: DOUBLE
9291: LD_INT 1
9293: DEC
9294: ST_TO_ADDR
9295: LD_INT 8
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9370
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
9301: LD_INT 22
9303: PUSH
9304: LD_VAR 0 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PPUSH
9313: CALL_OW 69
9317: PUSH
9318: LD_INT 0
9320: EQUAL
9321: PUSH
9322: LD_EXP 36
9326: PUSH
9327: LD_VAR 0 2
9331: ARRAY
9332: NOT
9333: AND
9334: IFFALSE 9368
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
9336: LD_ADDR_EXP 36
9340: PUSH
9341: LD_EXP 36
9345: PPUSH
9346: LD_VAR 0 2
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 1
9358: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
9359: LD_VAR 0 2
9363: PPUSH
9364: CALL 9956 0 1
// end ; end ;
9368: GO 9298
9370: POP
9371: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
9372: LD_EXP 36
9376: PPUSH
9377: CALL 17203 0 1
9381: PUSH
9382: LD_EXP 18
9386: PPUSH
9387: CALL 17203 0 1
9391: EQUAL
9392: IFFALSE 9396
// break ;
9394: GO 9416
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
9396: CALL 9530 0 0
9400: NOT
9401: PUSH
9402: LD_EXP 2
9406: AND
9407: PUSH
9408: LD_EXP 35
9412: NOT
9413: OR
9414: IFFALSE 9090
// game := false ;
9416: LD_ADDR_EXP 2
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// for i := 1 to 8 do
9424: LD_ADDR_VAR 0 2
9428: PUSH
9429: DOUBLE
9430: LD_INT 1
9432: DEC
9433: ST_TO_ADDR
9434: LD_INT 8
9436: PUSH
9437: FOR_TO
9438: IFFALSE 9474
// begin if multi_sides [ i ] then
9440: LD_EXP 18
9444: PUSH
9445: LD_VAR 0 2
9449: ARRAY
9450: IFFALSE 9472
// SetMultiScore ( i , multi_points [ i ] ) ;
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_EXP 41
9461: PUSH
9462: LD_VAR 0 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 506
// end ;
9472: GO 9437
9474: POP
9475: POP
// if multi_loosers [ your_side ] then
9476: LD_EXP 36
9480: PUSH
9481: LD_OWVAR 2
9485: ARRAY
9486: IFFALSE 9509
// begin if Multiplayer then
9488: LD_OWVAR 4
9492: IFFALSE 9500
// YouLostInMultiplayer else
9494: CALL_OW 107
9498: GO 9507
// YouLost (  ) ;
9500: LD_STRING 
9502: PPUSH
9503: CALL_OW 104
// end else
9507: GO 9525
// begin if Multiplayer then
9509: LD_OWVAR 4
9513: IFFALSE 9521
// YouWinInMultiplayer else
9515: CALL_OW 106
9519: GO 9525
// YouWin ;
9521: CALL_OW 103
// end ; end ;
9525: LD_VAR 0 1
9529: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
9530: LD_INT 0
9532: PPUSH
9533: PPUSH
// result := false ;
9534: LD_ADDR_VAR 0 1
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// for side in botSides do
9542: LD_ADDR_VAR 0 2
9546: PUSH
9547: LD_EXP 3
9551: PUSH
9552: FOR_IN
9553: IFFALSE 9614
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 2
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 50
9584: PUSH
9585: EMPTY
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: PUSH
9598: LD_INT 0
9600: GREATER
9601: ST_TO_ADDR
// if result then
9602: LD_VAR 0 1
9606: IFFALSE 9612
// exit ;
9608: POP
9609: POP
9610: GO 9616
// end ;
9612: GO 9552
9614: POP
9615: POP
// end ;
9616: LD_VAR 0 1
9620: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
// result := [ ] ;
9625: LD_ADDR_VAR 0 1
9629: PUSH
9630: EMPTY
9631: ST_TO_ADDR
// for i := 1 to 8 do
9632: LD_ADDR_VAR 0 2
9636: PUSH
9637: DOUBLE
9638: LD_INT 1
9640: DEC
9641: ST_TO_ADDR
9642: LD_INT 8
9644: PUSH
9645: FOR_TO
9646: IFFALSE 9703
// begin if multi_sides [ i ] then
9648: LD_EXP 18
9652: PUSH
9653: LD_VAR 0 2
9657: ARRAY
9658: IFFALSE 9701
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
9660: LD_ADDR_VAR 0 1
9664: PUSH
9665: LD_VAR 0 1
9669: PUSH
9670: LD_STRING #coop-points
9672: PUSH
9673: LD_VAR 0 2
9677: PUSH
9678: LD_VAR 0 2
9682: PUSH
9683: LD_EXP 41
9687: PUSH
9688: LD_VAR 0 2
9692: ARRAY
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: ADD
9700: ST_TO_ADDR
// end ; end ;
9701: GO 9645
9703: POP
9704: POP
// end ;
9705: LD_VAR 0 1
9709: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
9710: LD_INT 0
9712: PPUSH
9713: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9714: LD_ADDR_EXP 41
9718: PUSH
9719: LD_INT 0
9721: PUSH
9722: LD_INT 0
9724: PUSH
9725: LD_INT 0
9727: PUSH
9728: LD_INT 0
9730: PUSH
9731: LD_INT 0
9733: PUSH
9734: LD_INT 0
9736: PUSH
9737: LD_INT 0
9739: PUSH
9740: LD_INT 0
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: ST_TO_ADDR
// multi_points_conditions := [ ] ;
9753: LD_ADDR_EXP 42
9757: PUSH
9758: EMPTY
9759: ST_TO_ADDR
// end ;
9760: LD_VAR 0 1
9764: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
9765: LD_INT 0
9767: PPUSH
// if not multi_points or not side or side > 8 then
9768: LD_EXP 41
9772: NOT
9773: PUSH
9774: LD_VAR 0 1
9778: NOT
9779: OR
9780: PUSH
9781: LD_VAR 0 1
9785: PUSH
9786: LD_INT 8
9788: GREATER
9789: OR
9790: IFFALSE 9794
// exit ;
9792: GO 9831
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
9794: LD_ADDR_EXP 41
9798: PUSH
9799: LD_EXP 41
9803: PPUSH
9804: LD_VAR 0 1
9808: PPUSH
9809: LD_EXP 41
9813: PUSH
9814: LD_VAR 0 1
9818: ARRAY
9819: PUSH
9820: LD_VAR 0 2
9824: PLUS
9825: PPUSH
9826: CALL_OW 1
9830: ST_TO_ADDR
// end ;
9831: LD_VAR 0 3
9835: RET
// export function Multiplayer_GetPoints ( side ) ; begin
9836: LD_INT 0
9838: PPUSH
// if not multi_points or not side or side > 8 then
9839: LD_EXP 41
9843: NOT
9844: PUSH
9845: LD_VAR 0 1
9849: NOT
9850: OR
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: LD_INT 8
9859: GREATER
9860: OR
9861: IFFALSE 9865
// exit ;
9863: GO 9881
// result := multi_points [ side ] ;
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: LD_EXP 41
9874: PUSH
9875: LD_VAR 0 1
9879: ARRAY
9880: ST_TO_ADDR
// end ;
9881: LD_VAR 0 2
9885: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
9886: LD_INT 0
9888: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
9889: LD_ADDR_EXP 42
9893: PUSH
9894: LD_EXP 42
9898: PPUSH
9899: LD_EXP 42
9903: PUSH
9904: LD_INT 1
9906: PLUS
9907: PPUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 1
9917: ST_TO_ADDR
// end ;
9918: LD_VAR 0 2
9922: RET
// export function Multiplayer_GetCondition ( id ) ; begin
9923: LD_INT 0
9925: PPUSH
// if not id then
9926: LD_VAR 0 1
9930: NOT
9931: IFFALSE 9935
// exit ;
9933: GO 9951
// result := multi_points_conditions [ id ] ;
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: LD_EXP 42
9944: PUSH
9945: LD_VAR 0 1
9949: ARRAY
9950: ST_TO_ADDR
// end ;
9951: LD_VAR 0 2
9955: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
9956: LD_INT 0
9958: PPUSH
9959: PPUSH
9960: PPUSH
9961: PPUSH
9962: PPUSH
// players := [ ] ;
9963: LD_ADDR_VAR 0 3
9967: PUSH
9968: EMPTY
9969: ST_TO_ADDR
// for i = 1 to 8 do
9970: LD_ADDR_VAR 0 4
9974: PUSH
9975: DOUBLE
9976: LD_INT 1
9978: DEC
9979: ST_TO_ADDR
9980: LD_INT 8
9982: PUSH
9983: FOR_TO
9984: IFFALSE 10043
// begin if i = side then
9986: LD_VAR 0 4
9990: PUSH
9991: LD_VAR 0 1
9995: EQUAL
9996: IFFALSE 10000
// continue ;
9998: GO 9983
// if multi_sides [ i ] and not multi_loosers [ i ] then
10000: LD_EXP 18
10004: PUSH
10005: LD_VAR 0 4
10009: ARRAY
10010: PUSH
10011: LD_EXP 36
10015: PUSH
10016: LD_VAR 0 4
10020: ARRAY
10021: NOT
10022: AND
10023: IFFALSE 10041
// players := players ^ i ;
10025: LD_ADDR_VAR 0 3
10029: PUSH
10030: LD_VAR 0 3
10034: PUSH
10035: LD_VAR 0 4
10039: ADD
10040: ST_TO_ADDR
// end ;
10041: GO 9983
10043: POP
10044: POP
// if not players then
10045: LD_VAR 0 3
10049: NOT
10050: IFFALSE 10054
// exit ;
10052: GO 10321
// if players = 1 then
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 1
10061: EQUAL
10062: IFFALSE 10123
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
10064: LD_ADDR_VAR 0 4
10068: PUSH
10069: LD_INT 22
10071: PUSH
10072: LD_VAR 0 1
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 51
10083: PUSH
10084: EMPTY
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: PUSH
10096: FOR_IN
10097: IFFALSE 10119
// SetSide ( i , players [ 1 ] ) ;
10099: LD_VAR 0 4
10103: PPUSH
10104: LD_VAR 0 3
10108: PUSH
10109: LD_INT 1
10111: ARRAY
10112: PPUSH
10113: CALL_OW 235
10117: GO 10096
10119: POP
10120: POP
// end else
10121: GO 10321
// begin j := 1 ;
10123: LD_ADDR_VAR 0 5
10127: PUSH
10128: LD_INT 1
10130: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
10131: LD_ADDR_VAR 0 4
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_VAR 0 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 1
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 51
10163: PUSH
10164: EMPTY
10165: LIST
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: PUSH
10195: FOR_IN
10196: IFFALSE 10319
// begin SetSide ( i , players [ j ] ) ;
10198: LD_VAR 0 4
10202: PPUSH
10203: LD_VAR 0 3
10207: PUSH
10208: LD_VAR 0 5
10212: ARRAY
10213: PPUSH
10214: CALL_OW 235
// if IsDrivenBy ( i ) then
10218: LD_VAR 0 4
10222: PPUSH
10223: CALL_OW 311
10227: IFFALSE 10254
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
10229: LD_VAR 0 4
10233: PPUSH
10234: CALL_OW 311
10238: PPUSH
10239: LD_VAR 0 3
10243: PUSH
10244: LD_VAR 0 5
10248: ARRAY
10249: PPUSH
10250: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
10254: LD_VAR 0 4
10258: PPUSH
10259: CALL_OW 310
10263: PPUSH
10264: CALL_OW 247
10268: PUSH
10269: LD_INT 3
10271: EQUAL
10272: IFFALSE 10283
// ComExitBuilding ( i ) ;
10274: LD_VAR 0 4
10278: PPUSH
10279: CALL_OW 122
// j := j + 1 ;
10283: LD_ADDR_VAR 0 5
10287: PUSH
10288: LD_VAR 0 5
10292: PUSH
10293: LD_INT 1
10295: PLUS
10296: ST_TO_ADDR
// if j > players then
10297: LD_VAR 0 5
10301: PUSH
10302: LD_VAR 0 3
10306: GREATER
10307: IFFALSE 10317
// j := 1 ;
10309: LD_ADDR_VAR 0 5
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// end ;
10317: GO 10195
10319: POP
10320: POP
// end ; end ;
10321: LD_VAR 0 2
10325: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
10326: LD_INT 0
10328: PPUSH
10329: PPUSH
10330: PPUSH
// i := 3 ;
10331: LD_ADDR_VAR 0 2
10335: PUSH
10336: LD_INT 3
10338: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
10339: LD_ADDR_VAR 0 3
10343: PUSH
10344: LD_INT 5
10346: PUSH
10347: LD_INT 10
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 120
10356: PUSH
10357: LD_INT 2
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 101
10366: PUSH
10367: LD_INT 8
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 27
10376: PUSH
10377: LD_INT 4
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
10390: LD_INT 4
10392: PPUSH
10393: LD_INT 5
10395: PPUSH
10396: LD_VAR 0 3
10400: PUSH
10401: LD_VAR 0 2
10405: ARRAY
10406: PUSH
10407: LD_INT 1
10409: ARRAY
10410: PPUSH
10411: LD_VAR 0 3
10415: PUSH
10416: LD_VAR 0 2
10420: ARRAY
10421: PUSH
10422: LD_INT 2
10424: ARRAY
10425: PPUSH
10426: LD_INT 0
10428: PPUSH
10429: CALL_OW 58
// end ;
10433: LD_VAR 0 1
10437: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
10438: LD_INT 0
10440: PPUSH
// if not side or side > 8 then
10441: LD_VAR 0 1
10445: NOT
10446: PUSH
10447: LD_VAR 0 1
10451: PUSH
10452: LD_INT 8
10454: GREATER
10455: OR
10456: IFFALSE 10460
// exit ;
10458: GO 10477
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
10460: LD_VAR 0 1
10464: PPUSH
10465: LD_INT 6
10467: PPUSH
10468: CALL 9923 0 1
10472: PPUSH
10473: CALL 9765 0 2
// end ;
10477: LD_VAR 0 2
10481: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
10482: LD_INT 0
10484: PPUSH
// if not side or side > 8 then
10485: LD_VAR 0 1
10489: NOT
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 8
10498: GREATER
10499: OR
10500: IFFALSE 10504
// exit ;
10502: GO 10521
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
10504: LD_VAR 0 1
10508: PPUSH
10509: LD_INT 4
10511: PPUSH
10512: CALL 9923 0 1
10516: PPUSH
10517: CALL 9765 0 2
// end ;
10521: LD_VAR 0 2
10525: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
10526: LD_INT 0
10528: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
10529: LD_VAR 0 1
10533: NOT
10534: PUSH
10535: LD_VAR 0 1
10539: PUSH
10540: LD_INT 8
10542: GREATER
10543: OR
10544: PUSH
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: LD_INT 6
10555: PUSH
10556: LD_INT 36
10558: PUSH
10559: LD_INT 0
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: IN
10568: NOT
10569: OR
10570: IFFALSE 10574
// exit ;
10572: GO 10591
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
10574: LD_VAR 0 1
10578: PPUSH
10579: LD_INT 3
10581: PPUSH
10582: CALL 9923 0 1
10586: PPUSH
10587: CALL 9765 0 2
// end ;
10591: LD_VAR 0 3
10595: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
10596: LD_INT 0
10598: PPUSH
10599: PPUSH
// if not un then
10600: LD_VAR 0 1
10604: NOT
10605: IFFALSE 10609
// exit ;
10607: GO 10655
// if not points then
10609: LD_VAR 0 3
10613: NOT
10614: IFFALSE 10631
// gained_points := Multiplayer_GetCondition ( 1 ) else
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL 9923 0 1
10628: ST_TO_ADDR
10629: GO 10641
// gained_points := points ;
10631: LD_ADDR_VAR 0 5
10635: PUSH
10636: LD_VAR 0 3
10640: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
10641: LD_VAR 0 2
10645: PPUSH
10646: LD_VAR 0 5
10650: PPUSH
10651: CALL 9765 0 2
10655: LD_VAR 0 4
10659: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
10660: LD_INT 0
10662: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
10663: LD_VAR 0 1
10667: PPUSH
10668: LD_INT 2
10670: PPUSH
10671: CALL 9923 0 1
10675: PPUSH
10676: CALL 9765 0 2
// end ; end_of_file
10680: LD_VAR 0 2
10684: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
10685: LD_VAR 0 1
10689: PPUSH
10690: CALL_OW 255
10694: PUSH
10695: LD_EXP 3
10699: IN
10700: NOT
10701: IFFALSE 10705
// exit ;
10703: GO 10722
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
10705: LD_VAR 0 1
10709: PPUSH
10710: LD_VAR 0 2
10714: PPUSH
10715: LD_INT 0
10717: PPUSH
10718: CALL 10596 0 3
// end ;
10722: PPOPN 3
10724: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
10725: LD_INT 0
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL 73691 0 1
// side := GetSide ( un ) ;
10746: LD_ADDR_VAR 0 3
10750: PUSH
10751: LD_VAR 0 1
10755: PPUSH
10756: CALL_OW 255
10760: ST_TO_ADDR
// if multi_sides [ side ] then
10761: LD_EXP 18
10765: PUSH
10766: LD_VAR 0 3
10770: ARRAY
10771: IFFALSE 10797
// if GetType ( un ) = unit_human then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 247
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: IFFALSE 10797
// MultiplayerEvent_HumanLost ( side ) ;
10788: LD_VAR 0 3
10792: PPUSH
10793: CALL 10482 0 1
// if side in botSides then
10797: LD_VAR 0 3
10801: PUSH
10802: LD_EXP 3
10806: IN
10807: IFFALSE 11300
// begin if side = botSides [ 1 ] then
10809: LD_VAR 0 3
10813: PUSH
10814: LD_EXP 3
10818: PUSH
10819: LD_INT 1
10821: ARRAY
10822: EQUAL
10823: IFFALSE 11300
// begin if un in arForce then
10825: LD_VAR 0 1
10829: PUSH
10830: LD_EXP 14
10834: IN
10835: IFFALSE 10853
// arForce := arForce diff un ;
10837: LD_ADDR_EXP 14
10841: PUSH
10842: LD_EXP 14
10846: PUSH
10847: LD_VAR 0 1
10851: DIFF
10852: ST_TO_ADDR
// if un in arVehicles or un in arVehiclesAtttackers then
10853: LD_VAR 0 1
10857: PUSH
10858: LD_EXP 8
10862: IN
10863: PUSH
10864: LD_VAR 0 1
10868: PUSH
10869: LD_EXP 9
10873: IN
10874: OR
10875: IFFALSE 10969
// begin arVehicles := arVehicles diff un ;
10877: LD_ADDR_EXP 8
10881: PUSH
10882: LD_EXP 8
10886: PUSH
10887: LD_VAR 0 1
10891: DIFF
10892: ST_TO_ADDR
// arVehiclesAtttackers := arVehiclesAtttackers diff un ;
10893: LD_ADDR_EXP 9
10897: PUSH
10898: LD_EXP 9
10902: PUSH
10903: LD_VAR 0 1
10907: DIFF
10908: ST_TO_ADDR
// arConstructList := arConstructList ^ [ [ GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ] ] ;
10909: LD_ADDR_EXP 6
10913: PUSH
10914: LD_EXP 6
10918: PUSH
10919: LD_VAR 0 1
10923: PPUSH
10924: CALL_OW 265
10928: PUSH
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 262
10938: PUSH
10939: LD_VAR 0 1
10943: PPUSH
10944: CALL_OW 263
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 264
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: ADD
10968: ST_TO_ADDR
// end ; if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 257
10978: PUSH
10979: LD_INT 3
10981: EQUAL
10982: PUSH
10983: LD_VAR 0 1
10987: PPUSH
10988: CALL_OW 110
10992: PUSH
10993: LD_INT 999
10995: LESS
10996: AND
10997: PUSH
10998: LD_EXP 11
11002: AND
11003: IFFALSE 11144
// begin if not IsOk ( arDep ) then
11005: LD_INT 2
11007: PPUSH
11008: CALL_OW 302
11012: NOT
11013: IFFALSE 11017
// exit ;
11015: GO 11372
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
11017: LD_ADDR_EXP 11
11021: PUSH
11022: LD_EXP 11
11026: PPUSH
11027: CALL 54175 0 1
11031: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
11032: LD_ADDR_OWVAR 20
11036: PUSH
11037: LD_EXP 3
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: ST_TO_ADDR
// uc_nation := nation_arabian ;
11046: LD_ADDR_OWVAR 21
11050: PUSH
11051: LD_INT 2
11053: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
11054: LD_INT 0
11056: PPUSH
11057: LD_INT 1
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: PUSH
11071: LD_OWVAR 67
11075: ARRAY
11076: PPUSH
11077: CALL_OW 383
// un := CreateHuman ;
11081: LD_ADDR_VAR 0 1
11085: PUSH
11086: CALL_OW 44
11090: ST_TO_ADDR
// PlaceUnitXY ( un , 143 , 29 , false ) ;
11091: LD_VAR 0 1
11095: PPUSH
11096: LD_INT 143
11098: PPUSH
11099: LD_INT 29
11101: PPUSH
11102: LD_INT 0
11104: PPUSH
11105: CALL_OW 48
// ComMoveXY ( un , 115 , 52 ) ;
11109: LD_VAR 0 1
11113: PPUSH
11114: LD_INT 115
11116: PPUSH
11117: LD_INT 52
11119: PPUSH
11120: CALL_OW 111
// arForce := Join ( arForce , un ) ;
11124: LD_ADDR_EXP 14
11128: PUSH
11129: LD_EXP 14
11133: PPUSH
11134: LD_VAR 0 1
11138: PPUSH
11139: CALL 52792 0 2
11143: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
11144: LD_VAR 0 1
11148: PPUSH
11149: CALL_OW 247
11153: PUSH
11154: LD_INT 3
11156: EQUAL
11157: IFFALSE 11300
// begin btype := GetBType ( un ) ;
11159: LD_ADDR_VAR 0 11
11163: PUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 266
11173: ST_TO_ADDR
// if btype = b_barracks then
11174: LD_VAR 0 11
11178: PUSH
11179: LD_INT 5
11181: EQUAL
11182: IFFALSE 11192
// btype := b_armoury ;
11184: LD_ADDR_VAR 0 11
11188: PUSH
11189: LD_INT 4
11191: ST_TO_ADDR
// if btype = b_factory then
11192: LD_VAR 0 11
11196: PUSH
11197: LD_INT 3
11199: EQUAL
11200: IFFALSE 11210
// btype := b_workshop ;
11202: LD_ADDR_VAR 0 11
11206: PUSH
11207: LD_INT 2
11209: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
11210: LD_VAR 0 11
11214: PUSH
11215: LD_INT 8
11217: PUSH
11218: LD_INT 7
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: IN
11225: IFFALSE 11235
// btype := b_lab ;
11227: LD_ADDR_VAR 0 11
11231: PUSH
11232: LD_INT 6
11234: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
11235: LD_ADDR_EXP 7
11239: PUSH
11240: LD_EXP 7
11244: PPUSH
11245: LD_EXP 7
11249: PUSH
11250: LD_INT 1
11252: PLUS
11253: PPUSH
11254: LD_VAR 0 11
11258: PUSH
11259: LD_VAR 0 1
11263: PPUSH
11264: CALL_OW 250
11268: PUSH
11269: LD_VAR 0 1
11273: PPUSH
11274: CALL_OW 251
11278: PUSH
11279: LD_VAR 0 1
11283: PPUSH
11284: CALL_OW 254
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 1
11299: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
11300: LD_EXP 35
11304: PUSH
11305: LD_EXP 27
11309: AND
11310: IFFALSE 11372
// if un in multi_commanders then
11312: LD_VAR 0 1
11316: PUSH
11317: LD_EXP 35
11321: IN
11322: IFFALSE 11372
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
11324: LD_ADDR_EXP 36
11328: PUSH
11329: LD_EXP 36
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 1
11341: PPUSH
11342: CALL_OW 1
11346: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
11347: LD_ADDR_EXP 35
11351: PUSH
11352: LD_EXP 35
11356: PUSH
11357: LD_VAR 0 1
11361: DIFF
11362: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
11363: LD_VAR 0 3
11367: PPUSH
11368: CALL 9956 0 1
// end ; end ;
11372: PPOPN 11
11374: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
11375: LD_INT 0
11377: PPUSH
11378: PPUSH
11379: PPUSH
11380: PPUSH
// begin side := GetSide ( building ) ;
11381: LD_ADDR_VAR 0 4
11385: PUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 255
11395: ST_TO_ADDR
// if multi_sides [ side ] then
11396: LD_EXP 18
11400: PUSH
11401: LD_VAR 0 4
11405: ARRAY
11406: IFFALSE 11427
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
11408: LD_VAR 0 4
11412: PPUSH
11413: LD_VAR 0 1
11417: PPUSH
11418: CALL_OW 266
11422: PPUSH
11423: CALL 10526 0 2
// if side = botSides [ 1 ] then
11427: LD_VAR 0 4
11431: PUSH
11432: LD_EXP 3
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: EQUAL
11441: IFFALSE 11537
// begin arBuildings := Delete ( arBuildings , 1 ) ;
11443: LD_ADDR_EXP 7
11447: PUSH
11448: LD_EXP 7
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 3
11460: ST_TO_ADDR
// btype := GetBType ( building ) ;
11461: LD_ADDR_VAR 0 5
11465: PUSH
11466: LD_VAR 0 1
11470: PPUSH
11471: CALL_OW 266
11475: ST_TO_ADDR
// case btype of b_workshop :
11476: LD_VAR 0 5
11480: PUSH
11481: LD_INT 2
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11501
11489: POP
// ComUpgrade ( building ) ; b_lab :
11490: LD_VAR 0 1
11494: PPUSH
11495: CALL_OW 146
11499: GO 11537
11501: LD_INT 6
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11536
11509: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: LD_INT 10
11517: PPUSH
11518: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
11522: LD_VAR 0 1
11526: PPUSH
11527: LD_INT 15
11529: PPUSH
11530: CALL_OW 207
// end ; end ;
11534: GO 11537
11536: POP
// end ; end ;
11537: PPOPN 5
11539: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_control , control_remote ] ] ) then
11540: LD_VAR 0 1
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_EXP 3
11552: PUSH
11553: LD_INT 1
11555: ARRAY
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: IN
11580: IFFALSE 11591
// ComUnlink ( un ) ;
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 136
// end ;
11591: PPOPN 1
11593: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
11594: LD_VAR 0 2
11598: PPUSH
11599: CALL_OW 255
11603: PUSH
11604: LD_EXP 3
11608: IN
11609: NOT
11610: IFFALSE 11614
// exit ;
11612: GO 11677
// if unit in arForceTmp then
11614: LD_VAR 0 2
11618: PUSH
11619: LD_EXP 15
11623: IN
11624: IFFALSE 11677
// begin arForceTmp := arForceTmp diff unit ;
11626: LD_ADDR_EXP 15
11630: PUSH
11631: LD_EXP 15
11635: PUSH
11636: LD_VAR 0 2
11640: DIFF
11641: ST_TO_ADDR
// arForce := Join ( arForce , unit ) ;
11642: LD_ADDR_EXP 14
11646: PUSH
11647: LD_EXP 14
11651: PPUSH
11652: LD_VAR 0 2
11656: PPUSH
11657: CALL 52792 0 2
11661: ST_TO_ADDR
// ComMoveXY ( unit , 103 , 54 ) ;
11662: LD_VAR 0 2
11666: PPUSH
11667: LD_INT 103
11669: PPUSH
11670: LD_INT 54
11672: PPUSH
11673: CALL_OW 111
// end ; end ;
11677: PPOPN 2
11679: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
11680: LD_INT 0
11682: PPUSH
11683: PPUSH
11684: PPUSH
11685: PPUSH
11686: PPUSH
11687: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL 73811 0 2
// side := GetSide ( vehicle ) ;
11702: LD_ADDR_VAR 0 4
11706: PUSH
11707: LD_VAR 0 1
11711: PPUSH
11712: CALL_OW 255
11716: ST_TO_ADDR
// if multi_sides [ side ] then
11717: LD_EXP 18
11721: PUSH
11722: LD_VAR 0 4
11726: ARRAY
11727: IFFALSE 11738
// MultiplayerEvent_Produced ( side ) ;
11729: LD_VAR 0 4
11733: PPUSH
11734: CALL 10438 0 1
// if side = botSides [ 1 ] then
11738: LD_VAR 0 4
11742: PUSH
11743: LD_EXP 3
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: EQUAL
11752: IFFALSE 11948
// begin driver := IsDrivenBy ( vehicle ) ;
11754: LD_ADDR_VAR 0 8
11758: PUSH
11759: LD_VAR 0 1
11763: PPUSH
11764: CALL_OW 311
11768: ST_TO_ADDR
// if driver then
11769: LD_VAR 0 8
11773: IFFALSE 11807
// begin SetTag ( driver , tMech ) ;
11775: LD_VAR 0 8
11779: PPUSH
11780: LD_INT 7
11782: PPUSH
11783: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
11787: LD_ADDR_EXP 10
11791: PUSH
11792: LD_EXP 10
11796: PPUSH
11797: LD_VAR 0 8
11801: PPUSH
11802: CALL 52792 0 2
11806: ST_TO_ADDR
// end ; if GetControl ( vehicle ) = control_remote and not GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11807: LD_VAR 0 1
11811: PPUSH
11812: CALL_OW 263
11816: PUSH
11817: LD_INT 2
11819: EQUAL
11820: PUSH
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 264
11830: PUSH
11831: LD_INT 32
11833: PUSH
11834: LD_INT 88
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: IN
11841: NOT
11842: AND
11843: IFFALSE 11867
// begin arRVehicles := Join ( arRVehicles , vehicle ) ;
11845: LD_ADDR_EXP 16
11849: PUSH
11850: LD_EXP 16
11854: PPUSH
11855: LD_VAR 0 1
11859: PPUSH
11860: CALL 52792 0 2
11864: ST_TO_ADDR
// exit ;
11865: GO 11948
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetWeapon ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
11867: LD_EXP 12
11871: PUSH
11872: LD_EXP 8
11876: PPUSH
11877: CALL 17203 0 1
11881: GREATER
11882: PUSH
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 264
11892: PUSH
11893: LD_INT 32
11895: PUSH
11896: LD_INT 88
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: IN
11903: OR
11904: IFFALSE 11928
// arVehicles := Join ( arVehicles , vehicle ) else
11906: LD_ADDR_EXP 8
11910: PUSH
11911: LD_EXP 8
11915: PPUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: CALL 52792 0 2
11925: ST_TO_ADDR
11926: GO 11948
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
11928: LD_ADDR_EXP 9
11932: PUSH
11933: LD_EXP 9
11937: PPUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL 52792 0 2
11947: ST_TO_ADDR
// end ; end ;
11948: PPOPN 8
11950: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11951: LD_VAR 0 1
11955: PPUSH
11956: CALL_OW 110
11960: PUSH
11961: LD_INT 7
11963: EQUAL
11964: IFFALSE 11978
// SetTag ( driver , 0 ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_INT 0
11973: PPUSH
11974: CALL_OW 109
// end ;
11978: PPOPN 4
11980: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
11981: LD_VAR 0 2
11985: PPUSH
11986: CALL_OW 255
11990: PUSH
11991: LD_EXP 3
11995: PUSH
11996: LD_INT 1
11998: ARRAY
11999: EQUAL
12000: IFFALSE 12030
// if tech in arTech then
12002: LD_VAR 0 1
12006: PUSH
12007: LD_EXP 5
12011: IN
12012: IFFALSE 12030
// arTech := arTech diff tech ;
12014: LD_ADDR_EXP 5
12018: PUSH
12019: LD_EXP 5
12023: PUSH
12024: LD_VAR 0 1
12028: DIFF
12029: ST_TO_ADDR
// end ; end_of_file
12030: PPOPN 2
12032: END
// every 25 25$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12033: LD_INT 2
12035: PPUSH
12036: CALL_OW 302
12040: PUSH
12041: LD_INT 2
12043: PPUSH
12044: CALL_OW 255
12048: PUSH
12049: LD_EXP 3
12053: PUSH
12054: LD_INT 1
12056: ARRAY
12057: EQUAL
12058: AND
12059: IFFALSE 12096
12061: GO 12063
12063: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
12064: LD_INT 10500
12066: PUSH
12067: LD_INT 2100
12069: PUSH
12070: LD_OWVAR 67
12074: MUL
12075: MINUS
12076: PPUSH
12077: CALL_OW 67
// activeArabAttacks := true ;
12081: LD_ADDR_EXP 4
12085: PUSH
12086: LD_INT 1
12088: ST_TO_ADDR
// ArabAttack ( 0 ) ;
12089: LD_INT 0
12091: PPUSH
12092: CALL 12228 0 1
// end ;
12096: END
// every 45 45$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12097: LD_INT 2
12099: PPUSH
12100: CALL_OW 302
12104: PUSH
12105: LD_INT 2
12107: PPUSH
12108: CALL_OW 255
12112: PUSH
12113: LD_EXP 3
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: EQUAL
12122: AND
12123: IFFALSE 12137
12125: GO 12127
12127: DISABLE
// ArabAttack ( Difficulty ) ;
12128: LD_OWVAR 67
12132: PPUSH
12133: CALL 12228 0 1
12137: END
// every 75 75$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12138: LD_INT 2
12140: PPUSH
12141: CALL_OW 302
12145: PUSH
12146: LD_INT 2
12148: PPUSH
12149: CALL_OW 255
12153: PUSH
12154: LD_EXP 3
12158: PUSH
12159: LD_INT 1
12161: ARRAY
12162: EQUAL
12163: AND
12164: IFFALSE 12182
12166: GO 12168
12168: DISABLE
// ArabAttack ( Difficulty + 1 ) ;
12169: LD_OWVAR 67
12173: PUSH
12174: LD_INT 1
12176: PLUS
12177: PPUSH
12178: CALL 12228 0 1
12182: END
// every 105 105$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 1 ] do
12183: LD_INT 2
12185: PPUSH
12186: CALL_OW 302
12190: PUSH
12191: LD_INT 2
12193: PPUSH
12194: CALL_OW 255
12198: PUSH
12199: LD_EXP 3
12203: PUSH
12204: LD_INT 1
12206: ARRAY
12207: EQUAL
12208: AND
12209: IFFALSE 12227
12211: GO 12213
12213: DISABLE
// ArabAttack ( Difficulty + 2 ) ;
12214: LD_OWVAR 67
12218: PUSH
12219: LD_INT 2
12221: PLUS
12222: PPUSH
12223: CALL 12228 0 1
12227: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh , path , area ; begin
12228: LD_INT 0
12230: PPUSH
12231: PPUSH
12232: PPUSH
12233: PPUSH
12234: PPUSH
12235: PPUSH
12236: PPUSH
// uc_side := botSides [ 1 ] ;
12237: LD_ADDR_OWVAR 20
12241: PUSH
12242: LD_EXP 3
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: ST_TO_ADDR
// uc_nation := nation_arabian ;
12251: LD_ADDR_OWVAR 21
12255: PUSH
12256: LD_INT 2
12258: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
12259: LD_ADDR_VAR 0 4
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: LD_INT 5
12269: PUSH
12270: LD_INT 7
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_OWVAR 67
12282: ARRAY
12283: ST_TO_ADDR
// arAttackersInf := [ ] ;
12284: LD_ADDR_EXP 43
12288: PUSH
12289: EMPTY
12290: ST_TO_ADDR
// arAttackersVeh := [ ] ;
12291: LD_ADDR_EXP 44
12295: PUSH
12296: EMPTY
12297: ST_TO_ADDR
// path := [ [ 48 , 52 ] , [ 135 , 48 ] ] [ v mod 2 + 1 ] ;
12298: LD_ADDR_VAR 0 7
12302: PUSH
12303: LD_INT 48
12305: PUSH
12306: LD_INT 52
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 135
12315: PUSH
12316: LD_INT 48
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_VAR 0 1
12331: PUSH
12332: LD_INT 2
12334: MOD
12335: PUSH
12336: LD_INT 1
12338: PLUS
12339: ARRAY
12340: ST_TO_ADDR
// area := [ [ arAttackSpawn2Area , arAttackSpawnArea ] , [ arAttackSpawnE2Area , arAttackSpawnEArea ] ] [ v mod 2 + 1 ] ;
12341: LD_ADDR_VAR 0 8
12345: PUSH
12346: LD_INT 12
12348: PUSH
12349: LD_INT 13
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 23
12358: PUSH
12359: LD_INT 22
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_VAR 0 1
12374: PUSH
12375: LD_INT 2
12377: MOD
12378: PUSH
12379: LD_INT 1
12381: PLUS
12382: ARRAY
12383: ST_TO_ADDR
// InitHC_All ( ) ;
12384: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: DOUBLE
12394: LD_INT 1
12396: DEC
12397: ST_TO_ADDR
12398: LD_INT 3
12400: PUSH
12401: LD_INT 4
12403: PUSH
12404: LD_INT 6
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_OWVAR 67
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 1
12422: PLUS
12423: PUSH
12424: FOR_TO
12425: IFFALSE 12557
// begin PrepareSoldier ( false , skill ) ;
12427: LD_INT 0
12429: PPUSH
12430: LD_VAR 0 4
12434: PPUSH
12435: CALL_OW 381
// un := CreateHuman ;
12439: LD_ADDR_VAR 0 5
12443: PUSH
12444: CALL_OW 44
12448: ST_TO_ADDR
// if i mod 2 = 0 then
12449: LD_VAR 0 3
12453: PUSH
12454: LD_INT 2
12456: MOD
12457: PUSH
12458: LD_INT 0
12460: EQUAL
12461: IFFALSE 12475
// SetClass ( un , class_mortar ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_INT 8
12470: PPUSH
12471: CALL_OW 336
// SetDir ( un , 1 ) ;
12475: LD_VAR 0 5
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 233
// PlaceUnitArea ( un , area [ 1 ] , false ) ;
12487: LD_VAR 0 5
12491: PPUSH
12492: LD_VAR 0 8
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_INT 0
12503: PPUSH
12504: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
12508: LD_ADDR_EXP 43
12512: PUSH
12513: LD_EXP 43
12517: PPUSH
12518: LD_VAR 0 5
12522: PPUSH
12523: CALL 52792 0 2
12527: ST_TO_ADDR
// ComAgressiveMove ( un , path [ 1 ] , path [ 2 ] ) ;
12528: LD_VAR 0 5
12532: PPUSH
12533: LD_VAR 0 7
12537: PUSH
12538: LD_INT 1
12540: ARRAY
12541: PPUSH
12542: LD_VAR 0 7
12546: PUSH
12547: LD_INT 2
12549: ARRAY
12550: PPUSH
12551: CALL_OW 114
// end ;
12555: GO 12424
12557: POP
12558: POP
// for i := 1 to 3 + v do
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: DOUBLE
12565: LD_INT 1
12567: DEC
12568: ST_TO_ADDR
12569: LD_INT 3
12571: PUSH
12572: LD_VAR 0 1
12576: PLUS
12577: PUSH
12578: FOR_TO
12579: IFFALSE 12776
// begin PrepareMechanic ( false , skill ) ;
12581: LD_INT 0
12583: PPUSH
12584: LD_VAR 0 4
12588: PPUSH
12589: CALL_OW 383
// un := CreateHuman ;
12593: LD_ADDR_VAR 0 5
12597: PUSH
12598: CALL_OW 44
12602: ST_TO_ADDR
// SetTag ( un , 999 ) ;
12603: LD_VAR 0 5
12607: PPUSH
12608: LD_INT 999
12610: PPUSH
12611: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 80 ) ;
12615: LD_INT 14
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: LD_INT 27
12626: PUSH
12627: LD_INT 25
12629: PUSH
12630: LD_INT 28
12632: PUSH
12633: LD_INT 26
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_VAR 0 3
12646: PUSH
12647: LD_INT 4
12649: MOD
12650: PUSH
12651: LD_INT 1
12653: PLUS
12654: ARRAY
12655: PPUSH
12656: LD_INT 80
12658: PPUSH
12659: CALL 19941 0 5
// veh := CreateVehicle ;
12663: LD_ADDR_VAR 0 6
12667: PUSH
12668: CALL_OW 45
12672: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12673: LD_VAR 0 6
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12685: LD_VAR 0 6
12689: PPUSH
12690: LD_VAR 0 8
12694: PUSH
12695: LD_INT 2
12697: ARRAY
12698: PPUSH
12699: LD_INT 0
12701: PPUSH
12702: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
12706: LD_VAR 0 5
12710: PPUSH
12711: LD_VAR 0 6
12715: PPUSH
12716: CALL_OW 52
// ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12720: LD_VAR 0 5
12724: PPUSH
12725: LD_VAR 0 7
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PPUSH
12734: LD_VAR 0 7
12738: PUSH
12739: LD_INT 2
12741: ARRAY
12742: PPUSH
12743: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12747: LD_ADDR_EXP 44
12751: PUSH
12752: LD_EXP 44
12756: PPUSH
12757: LD_VAR 0 6
12761: PPUSH
12762: CALL 52792 0 2
12766: ST_TO_ADDR
// wait ( 0 0$2 ) ;
12767: LD_INT 70
12769: PPUSH
12770: CALL_OW 67
// end ;
12774: GO 12578
12776: POP
12777: POP
// wait ( 0 0$2 ) ;
12778: LD_INT 70
12780: PPUSH
12781: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
12785: LD_ADDR_VAR 0 3
12789: PUSH
12790: DOUBLE
12791: LD_INT 1
12793: DEC
12794: ST_TO_ADDR
12795: LD_INT 1
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: LIST
12808: PUSH
12809: LD_OWVAR 67
12813: ARRAY
12814: PUSH
12815: FOR_TO
12816: IFFALSE 12929
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_apeman , ar_selfpropelled_bomb , 80 ) ;
12818: LD_INT 14
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: LD_INT 5
12826: PPUSH
12827: LD_INT 29
12829: PPUSH
12830: LD_INT 80
12832: PPUSH
12833: CALL 19941 0 5
// veh := CreateVehicle ;
12837: LD_ADDR_VAR 0 6
12841: PUSH
12842: CALL_OW 45
12846: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
12847: LD_VAR 0 6
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 233
// PlaceUnitArea ( veh , area [ 2 ] , false ) ;
12859: LD_VAR 0 6
12863: PPUSH
12864: LD_VAR 0 8
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PPUSH
12873: LD_INT 0
12875: PPUSH
12876: CALL_OW 49
// ; ComMoveXY ( un , path [ 1 ] , path [ 2 ] ) ;
12880: LD_VAR 0 5
12884: PPUSH
12885: LD_VAR 0 7
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PPUSH
12894: LD_VAR 0 7
12898: PUSH
12899: LD_INT 2
12901: ARRAY
12902: PPUSH
12903: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
12907: LD_ADDR_EXP 44
12911: PUSH
12912: LD_EXP 44
12916: PPUSH
12917: LD_VAR 0 6
12921: PPUSH
12922: CALL 52792 0 2
12926: ST_TO_ADDR
// end ;
12927: GO 12815
12929: POP
12930: POP
// end ;
12931: LD_VAR 0 2
12935: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
12936: LD_EXP 43
12940: IFFALSE 13431
12942: GO 12944
12944: DISABLE
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// begin enable ;
12952: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
12953: LD_ADDR_VAR 0 2
12957: PUSH
12958: LD_EXP 43
12962: PPUSH
12963: LD_INT 50
12965: PUSH
12966: EMPTY
12967: LIST
12968: PPUSH
12969: CALL_OW 72
12973: ST_TO_ADDR
// arAttackersInf := [ ] ;
12974: LD_ADDR_EXP 43
12978: PUSH
12979: EMPTY
12980: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_VAR 0 2
12990: PPUSH
12991: LD_INT 25
12993: PUSH
12994: LD_INT 1
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 72
13005: PUSH
13006: FOR_IN
13007: IFFALSE 13138
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 1 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13009: LD_ADDR_VAR 0 3
13013: PUSH
13014: LD_INT 81
13016: PUSH
13017: LD_EXP 3
13021: PUSH
13022: LD_INT 1
13024: ARRAY
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 3
13032: PUSH
13033: LD_INT 120
13035: PUSH
13036: LD_INT 11
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: LD_INT 2
13049: PUSH
13050: LD_INT 21
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 21
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: PPUSH
13080: CALL_OW 69
13084: PPUSH
13085: LD_VAR 0 1
13089: PPUSH
13090: CALL_OW 74
13094: ST_TO_ADDR
// if not nearest then
13095: LD_VAR 0 3
13099: NOT
13100: IFFALSE 13104
// break ;
13102: GO 13138
// SetTag ( nearest , tMined ) ;
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 11
13111: PPUSH
13112: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13116: LD_VAR 0 1
13120: PPUSH
13121: LD_INT 0
13123: PPUSH
13124: LD_INT 0
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: CALL_OW 192
// end ;
13136: GO 13006
13138: POP
13139: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13140: LD_ADDR_VAR 0 2
13144: PUSH
13145: LD_VAR 0 2
13149: PPUSH
13150: LD_INT 50
13152: PUSH
13153: EMPTY
13154: LIST
13155: PPUSH
13156: CALL_OW 72
13160: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13161: LD_INT 70
13163: PPUSH
13164: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13168: LD_ADDR_VAR 0 2
13172: PUSH
13173: LD_VAR 0 2
13177: PPUSH
13178: LD_INT 50
13180: PUSH
13181: EMPTY
13182: LIST
13183: PPUSH
13184: CALL_OW 72
13188: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
13189: LD_ADDR_VAR 0 4
13193: PUSH
13194: LD_INT 81
13196: PUSH
13197: LD_EXP 3
13201: PUSH
13202: LD_INT 1
13204: ARRAY
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 69
13214: ST_TO_ADDR
// for i in tmp do
13215: LD_ADDR_VAR 0 1
13219: PUSH
13220: LD_VAR 0 2
13224: PUSH
13225: FOR_IN
13226: IFFALSE 13422
// if GetClass ( i ) <> 1 then
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 257
13237: PUSH
13238: LD_INT 1
13240: NONEQUAL
13241: IFFALSE 13269
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13243: LD_VAR 0 1
13247: PPUSH
13248: LD_VAR 0 4
13252: PPUSH
13253: LD_VAR 0 1
13257: PPUSH
13258: CALL_OW 74
13262: PPUSH
13263: CALL_OW 115
13267: GO 13420
// if not HasTask ( i ) then
13269: LD_VAR 0 1
13273: PPUSH
13274: CALL_OW 314
13278: NOT
13279: IFFALSE 13420
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_VAR 0 4
13290: PPUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 120
13296: PUSH
13297: LD_INT 11
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 21
13323: PUSH
13324: LD_INT 3
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 72
13344: PPUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 74
13354: ST_TO_ADDR
// if not nearest then
13355: LD_VAR 0 3
13359: NOT
13360: IFFALSE 13388
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13362: LD_VAR 0 1
13366: PPUSH
13367: LD_VAR 0 4
13371: PPUSH
13372: LD_VAR 0 1
13376: PPUSH
13377: CALL_OW 74
13381: PPUSH
13382: CALL_OW 115
13386: GO 13420
// begin SetTag ( nearest , tMined ) ;
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 11
13395: PPUSH
13396: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
13400: LD_VAR 0 1
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: LD_INT 0
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: CALL_OW 132
// end ; end ;
13420: GO 13225
13422: POP
13423: POP
// until not tmp ;
13424: LD_VAR 0 2
13428: NOT
13429: IFFALSE 13161
// end ;
13431: PPOPN 5
13433: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , path ;
13434: LD_EXP 44
13438: IFFALSE 13661
13440: GO 13442
13442: DISABLE
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
// begin enable ;
13448: ENABLE
// tmp := arAttackersVeh ;
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: LD_EXP 44
13458: ST_TO_ADDR
// arAttackersVeh := [ ] ;
13459: LD_ADDR_EXP 44
13463: PUSH
13464: EMPTY
13465: ST_TO_ADDR
// path := [ [ [ 139 , 55 ] , [ 155 , 92 ] ] , [ [ 53 , 61 ] , [ 74 , 98 ] ] ] ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 139
13473: PUSH
13474: LD_INT 55
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 155
13483: PUSH
13484: LD_INT 92
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 53
13497: PUSH
13498: LD_INT 61
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 74
13507: PUSH
13508: LD_INT 98
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: ST_TO_ADDR
// if GetDistUnitXY ( tmp [ 1 ] , 139 , 55 ) < GetDistUnitXY ( tmp [ 1 ] , 53 , 61 ) then
13523: LD_VAR 0 2
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PPUSH
13532: LD_INT 139
13534: PPUSH
13535: LD_INT 55
13537: PPUSH
13538: CALL_OW 297
13542: PUSH
13543: LD_VAR 0 2
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_INT 53
13554: PPUSH
13555: LD_INT 61
13557: PPUSH
13558: CALL_OW 297
13562: LESS
13563: IFFALSE 13581
// path := path [ 1 ] else
13565: LD_ADDR_VAR 0 3
13569: PUSH
13570: LD_VAR 0 3
13574: PUSH
13575: LD_INT 1
13577: ARRAY
13578: ST_TO_ADDR
13579: GO 13595
// path := path [ 2 ] ;
13581: LD_ADDR_VAR 0 3
13585: PUSH
13586: LD_VAR 0 3
13590: PUSH
13591: LD_INT 2
13593: ARRAY
13594: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13595: LD_INT 70
13597: PPUSH
13598: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13602: LD_ADDR_VAR 0 2
13606: PUSH
13607: LD_VAR 0 2
13611: PPUSH
13612: LD_INT 50
13614: PUSH
13615: EMPTY
13616: LIST
13617: PPUSH
13618: CALL_OW 72
13622: ST_TO_ADDR
// for i in tmp do
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_VAR 0 2
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13652
// AgressiveMove ( i , path ) until not tmp ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: CALL 55396 0 2
13650: GO 13633
13652: POP
13653: POP
13654: LD_VAR 0 2
13658: NOT
13659: IFFALSE 13595
// end ;
13661: PPOPN 3
13663: END
// every 3 3$00 trigger Count ( arRVehicles ) >= 3 do var i , tmp ;
13664: LD_EXP 16
13668: PPUSH
13669: CALL 17203 0 1
13673: PUSH
13674: LD_INT 3
13676: GREATEREQUAL
13677: IFFALSE 13798
13679: GO 13681
13681: DISABLE
13682: LD_INT 0
13684: PPUSH
13685: PPUSH
// begin enable ;
13686: ENABLE
// tmp := UnitFilter ( arRVehicles , [ f_linked ] ) ;
13687: LD_ADDR_VAR 0 2
13691: PUSH
13692: LD_EXP 16
13696: PPUSH
13697: LD_INT 61
13699: PUSH
13700: EMPTY
13701: LIST
13702: PPUSH
13703: CALL_OW 72
13707: ST_TO_ADDR
// arRVehicles := arRVehicles diff tmp ;
13708: LD_ADDR_EXP 16
13712: PUSH
13713: LD_EXP 16
13717: PUSH
13718: LD_VAR 0 2
13722: DIFF
13723: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13724: LD_INT 70
13726: PPUSH
13727: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_VAR 0 2
13740: PPUSH
13741: LD_INT 50
13743: PUSH
13744: EMPTY
13745: LIST
13746: PPUSH
13747: CALL_OW 72
13751: ST_TO_ADDR
// for i in tmp do
13752: LD_ADDR_VAR 0 1
13756: PUSH
13757: LD_VAR 0 2
13761: PUSH
13762: FOR_IN
13763: IFFALSE 13789
// AgressiveMove ( i , [ [ 98 , 63 ] ] ) until not tmp ;
13765: LD_VAR 0 1
13769: PPUSH
13770: LD_INT 98
13772: PUSH
13773: LD_INT 63
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: PPUSH
13783: CALL 55396 0 2
13787: GO 13762
13789: POP
13790: POP
13791: LD_VAR 0 2
13795: NOT
13796: IFFALSE 13724
// end ;
13798: PPOPN 2
13800: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
13801: LD_EXP 9
13805: PUSH
13806: LD_EXP 4
13810: AND
13811: IFFALSE 14368
13813: GO 13815
13815: DISABLE
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
// begin enable ;
13821: ENABLE
// if not arVehiclesAtttackers then
13822: LD_EXP 9
13826: NOT
13827: IFFALSE 13831
// exit ;
13829: GO 14368
// for i in arVehiclesAtttackers do
13831: LD_ADDR_VAR 0 1
13835: PUSH
13836: LD_EXP 9
13840: PUSH
13841: FOR_IN
13842: IFFALSE 14366
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL_OW 302
13853: NOT
13854: PUSH
13855: LD_VAR 0 1
13859: PPUSH
13860: CALL_OW 255
13864: PUSH
13865: LD_EXP 3
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: NONEQUAL
13874: OR
13875: IFFALSE 13895
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
13877: LD_ADDR_EXP 9
13881: PUSH
13882: LD_EXP 9
13886: PUSH
13887: LD_VAR 0 1
13891: DIFF
13892: ST_TO_ADDR
// continue ;
13893: GO 13841
// end ; if GetTag ( i ) = 300 then
13895: LD_VAR 0 1
13899: PPUSH
13900: CALL_OW 110
13904: PUSH
13905: LD_INT 300
13907: EQUAL
13908: IFFALSE 14023
// begin if GetFuel ( i ) < 50 then
13910: LD_VAR 0 1
13914: PPUSH
13915: CALL_OW 261
13919: PUSH
13920: LD_INT 50
13922: LESS
13923: IFFALSE 13982
// begin ComMoveXY ( i , 102 , 47 ) ;
13925: LD_VAR 0 1
13929: PPUSH
13930: LD_INT 102
13932: PPUSH
13933: LD_INT 47
13935: PPUSH
13936: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13940: LD_INT 35
13942: PPUSH
13943: CALL_OW 67
// until GetDistUnitXY ( i , 102 , 47 ) < 4 ;
13947: LD_VAR 0 1
13951: PPUSH
13952: LD_INT 102
13954: PPUSH
13955: LD_INT 47
13957: PPUSH
13958: CALL_OW 297
13962: PUSH
13963: LD_INT 4
13965: LESS
13966: IFFALSE 13940
// SetFuel ( i , 100 ) ;
13968: LD_VAR 0 1
13972: PPUSH
13973: LD_INT 100
13975: PPUSH
13976: CALL_OW 240
// end else
13980: GO 14023
// if not IsInArea ( i , arParkingArea ) then
13982: LD_VAR 0 1
13986: PPUSH
13987: LD_INT 14
13989: PPUSH
13990: CALL_OW 308
13994: NOT
13995: IFFALSE 14011
// ComMoveToArea ( i , arParkingArea ) else
13997: LD_VAR 0 1
14001: PPUSH
14002: LD_INT 14
14004: PPUSH
14005: CALL_OW 113
14009: GO 14023
// SetTag ( i , 301 ) ;
14011: LD_VAR 0 1
14015: PPUSH
14016: LD_INT 301
14018: PPUSH
14019: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 110
14032: PUSH
14033: LD_INT 301
14035: EQUAL
14036: IFFALSE 14178
// begin if GetLives ( i ) < 1000 then
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 256
14047: PUSH
14048: LD_INT 1000
14050: LESS
14051: IFFALSE 14155
// begin if not IsDrivenBy ( i ) then
14053: LD_VAR 0 1
14057: PPUSH
14058: CALL_OW 311
14062: NOT
14063: IFFALSE 14067
// continue ;
14065: GO 13841
// mech := IsDrivenBy ( i ) ;
14067: LD_ADDR_VAR 0 2
14071: PUSH
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 311
14081: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14082: LD_VAR 0 2
14086: PPUSH
14087: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14091: LD_VAR 0 2
14095: PPUSH
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
14105: LD_INT 35
14107: PPUSH
14108: CALL_OW 67
// until GetLives ( i ) = 1000 ;
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 256
14121: PUSH
14122: LD_INT 1000
14124: EQUAL
14125: IFFALSE 14105
// SetLives ( mech , 1000 ) ;
14127: LD_VAR 0 2
14131: PPUSH
14132: LD_INT 1000
14134: PPUSH
14135: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
14139: LD_VAR 0 2
14143: PPUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 120
// end else
14153: GO 14178
// if IsDrivenBy ( i ) then
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 311
14164: IFFALSE 14178
// SetTag ( i , 0 ) ;
14166: LD_VAR 0 1
14170: PPUSH
14171: LD_INT 0
14173: PPUSH
14174: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
14178: LD_VAR 0 1
14182: PPUSH
14183: CALL_OW 110
14187: PUSH
14188: LD_INT 300
14190: LESS
14191: IFFALSE 14364
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
14193: LD_ADDR_VAR 0 3
14197: PUSH
14198: LD_INT 1
14200: PPUSH
14201: LD_INT 81
14203: PUSH
14204: LD_EXP 3
14208: PUSH
14209: LD_INT 1
14211: ARRAY
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PPUSH
14217: CALL_OW 70
14221: ST_TO_ADDR
// if GetLives ( i ) < 650 then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 256
14231: PUSH
14232: LD_INT 650
14234: LESS
14235: IFFALSE 14260
// begin ComStop ( i ) ;
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 141
// SetTag ( i , 300 ) ;
14246: LD_VAR 0 1
14250: PPUSH
14251: LD_INT 300
14253: PPUSH
14254: CALL_OW 109
// continue ;
14258: GO 13841
// end ; if enemy then
14260: LD_VAR 0 3
14264: IFFALSE 14304
// begin if not HasTask ( i ) then
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 314
14275: NOT
14276: IFFALSE 14302
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_VAR 0 3
14287: PPUSH
14288: LD_VAR 0 1
14292: PPUSH
14293: CALL_OW 74
14297: PPUSH
14298: CALL_OW 115
// end else
14302: GO 14364
// if arVehiclesAtttackers then
14304: LD_EXP 9
14308: IFFALSE 14364
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_INT 81
14317: PUSH
14318: LD_EXP 3
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: ST_TO_ADDR
// if enemy then
14336: LD_VAR 0 3
14340: IFFALSE 14364
// AgressiveMove ( i , [ [ 99 , 66 ] ] ) ;
14342: LD_VAR 0 1
14346: PPUSH
14347: LD_INT 99
14349: PUSH
14350: LD_INT 66
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: PPUSH
14360: CALL 55396 0 2
// end ; end ; end ;
14364: GO 13841
14366: POP
14367: POP
// end ;
14368: PPOPN 3
14370: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
14371: LD_INT 22
14373: PUSH
14374: LD_EXP 3
14378: PUSH
14379: LD_INT 1
14381: ARRAY
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PPUSH
14401: CALL_OW 69
14405: IFFALSE 14488
14407: GO 14409
14409: DISABLE
14410: LD_INT 0
14412: PPUSH
// begin enable ;
14413: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: LD_INT 22
14421: PUSH
14422: LD_EXP 3
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 32
14437: PUSH
14438: LD_INT 1
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PPUSH
14449: CALL_OW 69
14453: PUSH
14454: FOR_IN
14455: IFFALSE 14486
// if GetFuel ( i ) < 3 then
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 261
14466: PUSH
14467: LD_INT 3
14469: LESS
14470: IFFALSE 14484
// SetFuel ( i , 3 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 3
14479: PPUSH
14480: CALL_OW 240
14484: GO 14454
14486: POP
14487: POP
// end ; end_of_file
14488: PPOPN 1
14490: END
// every 0 0$20 trigger game do
14491: LD_EXP 2
14495: IFFALSE 14540
14497: GO 14499
14499: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14500: LD_INT 15
14502: PUSH
14503: LD_INT 17
14505: PUSH
14506: LD_INT 16
14508: PUSH
14509: LD_INT 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PPUSH
14518: LD_EXP 32
14522: PUSH
14523: LD_INT 2
14525: ARRAY
14526: PPUSH
14527: LD_EXP 32
14531: PUSH
14532: LD_INT 1
14534: ARRAY
14535: PPUSH
14536: CALL 14541 0 3
14540: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
// if not areas then
14547: LD_VAR 0 1
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14933
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
14556: LD_ADDR_VAR 0 7
14560: PUSH
14561: LD_INT 18
14563: PUSH
14564: LD_INT 19
14566: PUSH
14567: LD_INT 20
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: ST_TO_ADDR
// x := 5 ;
14575: LD_ADDR_VAR 0 6
14579: PUSH
14580: LD_INT 5
14582: ST_TO_ADDR
// repeat wait ( time ) ;
14583: LD_VAR 0 2
14587: PPUSH
14588: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
14592: LD_OWVAR 1
14596: PUSH
14597: LD_INT 37800
14599: PUSH
14600: LD_INT 31500
14602: PUSH
14603: LD_INT 25200
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_OWVAR 67
14615: ARRAY
14616: LESS
14617: IFFALSE 14756
// begin for i := 1 to multi_sides do
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_EXP 18
14633: PUSH
14634: FOR_TO
14635: IFFALSE 14747
// if multi_sides [ i ] then
14637: LD_EXP 18
14641: PUSH
14642: LD_VAR 0 5
14646: ARRAY
14647: IFFALSE 14745
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
14649: LD_VAR 0 7
14653: PUSH
14654: LD_EXP 18
14658: PUSH
14659: LD_VAR 0 5
14663: ARRAY
14664: ARRAY
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 287
14673: PUSH
14674: LD_INT 32
14676: PUSH
14677: LD_INT 25
14679: PUSH
14680: LD_INT 23
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: PUSH
14688: LD_OWVAR 67
14692: ARRAY
14693: LESS
14694: IFFALSE 14745
// begin amount := amount - ( x * 10 ) ;
14696: LD_ADDR_VAR 0 3
14700: PUSH
14701: LD_VAR 0 3
14705: PUSH
14706: LD_VAR 0 6
14710: PUSH
14711: LD_INT 10
14713: MUL
14714: MINUS
14715: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
14716: LD_VAR 0 6
14720: PPUSH
14721: LD_VAR 0 7
14725: PUSH
14726: LD_EXP 18
14730: PUSH
14731: LD_VAR 0 5
14735: ARRAY
14736: ARRAY
14737: PPUSH
14738: LD_INT 1
14740: PPUSH
14741: CALL_OW 55
// end ; end ;
14745: GO 14634
14747: POP
14748: POP
// wait ( 0 0$2 ) ;
14749: LD_INT 70
14751: PPUSH
14752: CALL_OW 67
// end ; for i in areas do
14756: LD_ADDR_VAR 0 5
14760: PUSH
14761: LD_VAR 0 1
14765: PUSH
14766: FOR_IN
14767: IFFALSE 14850
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
14769: LD_VAR 0 5
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 287
14781: PUSH
14782: LD_INT 25
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_INT 20
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: PUSH
14796: LD_OWVAR 67
14800: ARRAY
14801: LESS
14802: IFFALSE 14848
// begin wait ( 0 0$5 ) ;
14804: LD_INT 175
14806: PPUSH
14807: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14811: LD_VAR 0 6
14815: PPUSH
14816: LD_VAR 0 5
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14828: LD_ADDR_VAR 0 3
14832: PUSH
14833: LD_VAR 0 3
14837: PUSH
14838: LD_VAR 0 6
14842: PUSH
14843: LD_INT 10
14845: MUL
14846: MINUS
14847: ST_TO_ADDR
// end ; end ;
14848: GO 14766
14850: POP
14851: POP
// time := time + 0 0$2 ;
14852: LD_ADDR_VAR 0 2
14856: PUSH
14857: LD_VAR 0 2
14861: PUSH
14862: LD_INT 70
14864: PLUS
14865: ST_TO_ADDR
// x := x - 1 ;
14866: LD_ADDR_VAR 0 6
14870: PUSH
14871: LD_VAR 0 6
14875: PUSH
14876: LD_INT 1
14878: MINUS
14879: ST_TO_ADDR
// if x = 0 then
14880: LD_VAR 0 6
14884: PUSH
14885: LD_INT 0
14887: EQUAL
14888: IFFALSE 14898
// x := 5 ;
14890: LD_ADDR_VAR 0 6
14894: PUSH
14895: LD_INT 5
14897: ST_TO_ADDR
// if time > 2 2$00 then
14898: LD_VAR 0 2
14902: PUSH
14903: LD_INT 4200
14905: GREATER
14906: IFFALSE 14916
// time := 0 0$30 ;
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_INT 1050
14915: ST_TO_ADDR
// until not game or amount <= 0 ;
14916: LD_EXP 2
14920: NOT
14921: PUSH
14922: LD_VAR 0 3
14926: PUSH
14927: LD_INT 0
14929: LESSEQUAL
14930: OR
14931: IFFALSE 14583
// end ; end_of_file
14933: LD_VAR 0 4
14937: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14938: LD_VAR 0 1
14942: PUSH
14943: LD_INT 200
14945: DOUBLE
14946: GREATEREQUAL
14947: IFFALSE 14955
14949: LD_INT 299
14951: DOUBLE
14952: LESSEQUAL
14953: IFTRUE 14957
14955: GO 14989
14957: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14958: LD_VAR 0 1
14962: PPUSH
14963: LD_VAR 0 2
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_VAR 0 4
14977: PPUSH
14978: LD_VAR 0 5
14982: PPUSH
14983: CALL 74067 0 5
14987: GO 15066
14989: LD_INT 300
14991: DOUBLE
14992: GREATEREQUAL
14993: IFFALSE 15001
14995: LD_INT 399
14997: DOUBLE
14998: LESSEQUAL
14999: IFTRUE 15003
15001: GO 15065
15003: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15004: LD_VAR 0 1
15008: PPUSH
15009: LD_VAR 0 2
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: LD_VAR 0 4
15023: PPUSH
15024: LD_VAR 0 5
15028: PPUSH
15029: LD_VAR 0 6
15033: PPUSH
15034: LD_VAR 0 7
15038: PPUSH
15039: LD_VAR 0 8
15043: PPUSH
15044: LD_VAR 0 9
15048: PPUSH
15049: LD_VAR 0 10
15053: PPUSH
15054: LD_VAR 0 11
15058: PPUSH
15059: CALL 70392 0 11
15063: GO 15066
15065: POP
// end ;
15066: PPOPN 11
15068: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15069: LD_VAR 0 1
15073: PPUSH
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: LD_VAR 0 4
15088: PPUSH
15089: LD_VAR 0 5
15093: PPUSH
15094: CALL 73803 0 5
// end ; end_of_file
15098: PPOPN 5
15100: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15101: LD_INT 0
15103: PPUSH
15104: PPUSH
// if exist_mode then
15105: LD_VAR 0 2
15109: IFFALSE 15134
// unit := CreateCharacter ( prefix & ident ) else
15111: LD_ADDR_VAR 0 5
15115: PUSH
15116: LD_VAR 0 3
15120: PUSH
15121: LD_VAR 0 1
15125: STR
15126: PPUSH
15127: CALL_OW 34
15131: ST_TO_ADDR
15132: GO 15149
// unit := NewCharacter ( ident ) ;
15134: LD_ADDR_VAR 0 5
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 25
15148: ST_TO_ADDR
// result := unit ;
15149: LD_ADDR_VAR 0 4
15153: PUSH
15154: LD_VAR 0 5
15158: ST_TO_ADDR
// end ;
15159: LD_VAR 0 4
15163: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15164: LD_INT 0
15166: PPUSH
15167: PPUSH
// if not side or not nation then
15168: LD_VAR 0 1
15172: NOT
15173: PUSH
15174: LD_VAR 0 2
15178: NOT
15179: OR
15180: IFFALSE 15184
// exit ;
15182: GO 15952
// case nation of nation_american :
15184: LD_VAR 0 2
15188: PUSH
15189: LD_INT 1
15191: DOUBLE
15192: EQUAL
15193: IFTRUE 15197
15195: GO 15411
15197: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15198: LD_ADDR_VAR 0 4
15202: PUSH
15203: LD_INT 35
15205: PUSH
15206: LD_INT 45
15208: PUSH
15209: LD_INT 46
15211: PUSH
15212: LD_INT 47
15214: PUSH
15215: LD_INT 82
15217: PUSH
15218: LD_INT 83
15220: PUSH
15221: LD_INT 84
15223: PUSH
15224: LD_INT 85
15226: PUSH
15227: LD_INT 86
15229: PUSH
15230: LD_INT 1
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: LD_INT 6
15238: PUSH
15239: LD_INT 15
15241: PUSH
15242: LD_INT 16
15244: PUSH
15245: LD_INT 7
15247: PUSH
15248: LD_INT 12
15250: PUSH
15251: LD_INT 13
15253: PUSH
15254: LD_INT 10
15256: PUSH
15257: LD_INT 14
15259: PUSH
15260: LD_INT 20
15262: PUSH
15263: LD_INT 21
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_INT 25
15271: PUSH
15272: LD_INT 32
15274: PUSH
15275: LD_INT 27
15277: PUSH
15278: LD_INT 36
15280: PUSH
15281: LD_INT 69
15283: PUSH
15284: LD_INT 39
15286: PUSH
15287: LD_INT 34
15289: PUSH
15290: LD_INT 40
15292: PUSH
15293: LD_INT 48
15295: PUSH
15296: LD_INT 49
15298: PUSH
15299: LD_INT 50
15301: PUSH
15302: LD_INT 51
15304: PUSH
15305: LD_INT 52
15307: PUSH
15308: LD_INT 53
15310: PUSH
15311: LD_INT 54
15313: PUSH
15314: LD_INT 55
15316: PUSH
15317: LD_INT 56
15319: PUSH
15320: LD_INT 57
15322: PUSH
15323: LD_INT 58
15325: PUSH
15326: LD_INT 59
15328: PUSH
15329: LD_INT 60
15331: PUSH
15332: LD_INT 61
15334: PUSH
15335: LD_INT 62
15337: PUSH
15338: LD_INT 80
15340: PUSH
15341: LD_INT 82
15343: PUSH
15344: LD_INT 83
15346: PUSH
15347: LD_INT 84
15349: PUSH
15350: LD_INT 85
15352: PUSH
15353: LD_INT 86
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: ST_TO_ADDR
15409: GO 15876
15411: LD_INT 2
15413: DOUBLE
15414: EQUAL
15415: IFTRUE 15419
15417: GO 15645
15419: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15420: LD_ADDR_VAR 0 4
15424: PUSH
15425: LD_INT 35
15427: PUSH
15428: LD_INT 45
15430: PUSH
15431: LD_INT 46
15433: PUSH
15434: LD_INT 47
15436: PUSH
15437: LD_INT 82
15439: PUSH
15440: LD_INT 83
15442: PUSH
15443: LD_INT 84
15445: PUSH
15446: LD_INT 85
15448: PUSH
15449: LD_INT 87
15451: PUSH
15452: LD_INT 70
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 11
15460: PUSH
15461: LD_INT 3
15463: PUSH
15464: LD_INT 4
15466: PUSH
15467: LD_INT 5
15469: PUSH
15470: LD_INT 6
15472: PUSH
15473: LD_INT 15
15475: PUSH
15476: LD_INT 18
15478: PUSH
15479: LD_INT 7
15481: PUSH
15482: LD_INT 17
15484: PUSH
15485: LD_INT 8
15487: PUSH
15488: LD_INT 20
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_INT 72
15499: PUSH
15500: LD_INT 26
15502: PUSH
15503: LD_INT 69
15505: PUSH
15506: LD_INT 39
15508: PUSH
15509: LD_INT 40
15511: PUSH
15512: LD_INT 41
15514: PUSH
15515: LD_INT 42
15517: PUSH
15518: LD_INT 43
15520: PUSH
15521: LD_INT 48
15523: PUSH
15524: LD_INT 49
15526: PUSH
15527: LD_INT 50
15529: PUSH
15530: LD_INT 51
15532: PUSH
15533: LD_INT 52
15535: PUSH
15536: LD_INT 53
15538: PUSH
15539: LD_INT 54
15541: PUSH
15542: LD_INT 55
15544: PUSH
15545: LD_INT 56
15547: PUSH
15548: LD_INT 60
15550: PUSH
15551: LD_INT 61
15553: PUSH
15554: LD_INT 62
15556: PUSH
15557: LD_INT 66
15559: PUSH
15560: LD_INT 67
15562: PUSH
15563: LD_INT 68
15565: PUSH
15566: LD_INT 81
15568: PUSH
15569: LD_INT 82
15571: PUSH
15572: LD_INT 83
15574: PUSH
15575: LD_INT 84
15577: PUSH
15578: LD_INT 85
15580: PUSH
15581: LD_INT 87
15583: PUSH
15584: LD_INT 88
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: ST_TO_ADDR
15643: GO 15876
15645: LD_INT 3
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15875
15653: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15654: LD_ADDR_VAR 0 4
15658: PUSH
15659: LD_INT 46
15661: PUSH
15662: LD_INT 47
15664: PUSH
15665: LD_INT 1
15667: PUSH
15668: LD_INT 2
15670: PUSH
15671: LD_INT 82
15673: PUSH
15674: LD_INT 83
15676: PUSH
15677: LD_INT 84
15679: PUSH
15680: LD_INT 85
15682: PUSH
15683: LD_INT 86
15685: PUSH
15686: LD_INT 11
15688: PUSH
15689: LD_INT 9
15691: PUSH
15692: LD_INT 20
15694: PUSH
15695: LD_INT 19
15697: PUSH
15698: LD_INT 21
15700: PUSH
15701: LD_INT 24
15703: PUSH
15704: LD_INT 22
15706: PUSH
15707: LD_INT 25
15709: PUSH
15710: LD_INT 28
15712: PUSH
15713: LD_INT 29
15715: PUSH
15716: LD_INT 30
15718: PUSH
15719: LD_INT 31
15721: PUSH
15722: LD_INT 37
15724: PUSH
15725: LD_INT 38
15727: PUSH
15728: LD_INT 32
15730: PUSH
15731: LD_INT 27
15733: PUSH
15734: LD_INT 33
15736: PUSH
15737: LD_INT 69
15739: PUSH
15740: LD_INT 39
15742: PUSH
15743: LD_INT 34
15745: PUSH
15746: LD_INT 40
15748: PUSH
15749: LD_INT 71
15751: PUSH
15752: LD_INT 23
15754: PUSH
15755: LD_INT 44
15757: PUSH
15758: LD_INT 48
15760: PUSH
15761: LD_INT 49
15763: PUSH
15764: LD_INT 50
15766: PUSH
15767: LD_INT 51
15769: PUSH
15770: LD_INT 52
15772: PUSH
15773: LD_INT 53
15775: PUSH
15776: LD_INT 54
15778: PUSH
15779: LD_INT 55
15781: PUSH
15782: LD_INT 56
15784: PUSH
15785: LD_INT 57
15787: PUSH
15788: LD_INT 58
15790: PUSH
15791: LD_INT 59
15793: PUSH
15794: LD_INT 63
15796: PUSH
15797: LD_INT 64
15799: PUSH
15800: LD_INT 65
15802: PUSH
15803: LD_INT 82
15805: PUSH
15806: LD_INT 83
15808: PUSH
15809: LD_INT 84
15811: PUSH
15812: LD_INT 85
15814: PUSH
15815: LD_INT 86
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: ST_TO_ADDR
15873: GO 15876
15875: POP
// if state > - 1 and state < 3 then
15876: LD_VAR 0 3
15880: PUSH
15881: LD_INT 1
15883: NEG
15884: GREATER
15885: PUSH
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 3
15893: LESS
15894: AND
15895: IFFALSE 15952
// for i in result do
15897: LD_ADDR_VAR 0 5
15901: PUSH
15902: LD_VAR 0 4
15906: PUSH
15907: FOR_IN
15908: IFFALSE 15950
// if GetTech ( i , side ) <> state then
15910: LD_VAR 0 5
15914: PPUSH
15915: LD_VAR 0 1
15919: PPUSH
15920: CALL_OW 321
15924: PUSH
15925: LD_VAR 0 3
15929: NONEQUAL
15930: IFFALSE 15948
// result := result diff i ;
15932: LD_ADDR_VAR 0 4
15936: PUSH
15937: LD_VAR 0 4
15941: PUSH
15942: LD_VAR 0 5
15946: DIFF
15947: ST_TO_ADDR
15948: GO 15907
15950: POP
15951: POP
// end ;
15952: LD_VAR 0 4
15956: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15957: LD_INT 0
15959: PPUSH
15960: PPUSH
15961: PPUSH
// result := true ;
15962: LD_ADDR_VAR 0 3
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15970: LD_ADDR_VAR 0 5
15974: PUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL_OW 480
15984: ST_TO_ADDR
// if not tmp then
15985: LD_VAR 0 5
15989: NOT
15990: IFFALSE 15994
// exit ;
15992: GO 16043
// for i in tmp do
15994: LD_ADDR_VAR 0 4
15998: PUSH
15999: LD_VAR 0 5
16003: PUSH
16004: FOR_IN
16005: IFFALSE 16041
// if GetTech ( i , side ) <> state_researched then
16007: LD_VAR 0 4
16011: PPUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 321
16021: PUSH
16022: LD_INT 2
16024: NONEQUAL
16025: IFFALSE 16039
// begin result := false ;
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// exit ;
16035: POP
16036: POP
16037: GO 16043
// end ;
16039: GO 16004
16041: POP
16042: POP
// end ;
16043: LD_VAR 0 3
16047: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16048: LD_INT 0
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
16057: PPUSH
16058: PPUSH
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16063: LD_VAR 0 1
16067: NOT
16068: PUSH
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 257
16078: PUSH
16079: LD_INT 9
16081: NONEQUAL
16082: OR
16083: IFFALSE 16087
// exit ;
16085: GO 16660
// side := GetSide ( unit ) ;
16087: LD_ADDR_VAR 0 9
16091: PUSH
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 255
16101: ST_TO_ADDR
// tech_space := tech_spacanom ;
16102: LD_ADDR_VAR 0 12
16106: PUSH
16107: LD_INT 29
16109: ST_TO_ADDR
// tech_time := tech_taurad ;
16110: LD_ADDR_VAR 0 13
16114: PUSH
16115: LD_INT 28
16117: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16118: LD_ADDR_VAR 0 11
16122: PUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 310
16132: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16133: LD_VAR 0 11
16137: PPUSH
16138: CALL_OW 247
16142: PUSH
16143: LD_INT 2
16145: EQUAL
16146: IFFALSE 16150
// exit ;
16148: GO 16660
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16150: LD_ADDR_VAR 0 8
16154: PUSH
16155: LD_INT 81
16157: PUSH
16158: LD_VAR 0 9
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 3
16169: PUSH
16170: LD_INT 21
16172: PUSH
16173: LD_INT 3
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PPUSH
16188: CALL_OW 69
16192: ST_TO_ADDR
// if not tmp then
16193: LD_VAR 0 8
16197: NOT
16198: IFFALSE 16202
// exit ;
16200: GO 16660
// if in_unit then
16202: LD_VAR 0 11
16206: IFFALSE 16230
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16208: LD_ADDR_VAR 0 10
16212: PUSH
16213: LD_VAR 0 8
16217: PPUSH
16218: LD_VAR 0 11
16222: PPUSH
16223: CALL_OW 74
16227: ST_TO_ADDR
16228: GO 16250
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16230: LD_ADDR_VAR 0 10
16234: PUSH
16235: LD_VAR 0 8
16239: PPUSH
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 74
16249: ST_TO_ADDR
// if not enemy then
16250: LD_VAR 0 10
16254: NOT
16255: IFFALSE 16259
// exit ;
16257: GO 16660
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16259: LD_VAR 0 11
16263: PUSH
16264: LD_VAR 0 11
16268: PPUSH
16269: LD_VAR 0 10
16273: PPUSH
16274: CALL_OW 296
16278: PUSH
16279: LD_INT 13
16281: GREATER
16282: AND
16283: PUSH
16284: LD_VAR 0 1
16288: PPUSH
16289: LD_VAR 0 10
16293: PPUSH
16294: CALL_OW 296
16298: PUSH
16299: LD_INT 12
16301: GREATER
16302: OR
16303: IFFALSE 16307
// exit ;
16305: GO 16660
// missile := [ 1 ] ;
16307: LD_ADDR_VAR 0 14
16311: PUSH
16312: LD_INT 1
16314: PUSH
16315: EMPTY
16316: LIST
16317: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16318: LD_VAR 0 9
16322: PPUSH
16323: LD_VAR 0 12
16327: PPUSH
16328: CALL_OW 325
16332: IFFALSE 16361
// missile := Replace ( missile , missile + 1 , 2 ) ;
16334: LD_ADDR_VAR 0 14
16338: PUSH
16339: LD_VAR 0 14
16343: PPUSH
16344: LD_VAR 0 14
16348: PUSH
16349: LD_INT 1
16351: PLUS
16352: PPUSH
16353: LD_INT 2
16355: PPUSH
16356: CALL_OW 1
16360: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16361: LD_VAR 0 9
16365: PPUSH
16366: LD_VAR 0 13
16370: PPUSH
16371: CALL_OW 325
16375: PUSH
16376: LD_VAR 0 10
16380: PPUSH
16381: CALL_OW 255
16385: PPUSH
16386: LD_VAR 0 13
16390: PPUSH
16391: CALL_OW 325
16395: NOT
16396: AND
16397: IFFALSE 16426
// missile := Replace ( missile , missile + 1 , 3 ) ;
16399: LD_ADDR_VAR 0 14
16403: PUSH
16404: LD_VAR 0 14
16408: PPUSH
16409: LD_VAR 0 14
16413: PUSH
16414: LD_INT 1
16416: PLUS
16417: PPUSH
16418: LD_INT 3
16420: PPUSH
16421: CALL_OW 1
16425: ST_TO_ADDR
// if missile < 2 then
16426: LD_VAR 0 14
16430: PUSH
16431: LD_INT 2
16433: LESS
16434: IFFALSE 16438
// exit ;
16436: GO 16660
// x := GetX ( enemy ) ;
16438: LD_ADDR_VAR 0 4
16442: PUSH
16443: LD_VAR 0 10
16447: PPUSH
16448: CALL_OW 250
16452: ST_TO_ADDR
// y := GetY ( enemy ) ;
16453: LD_ADDR_VAR 0 5
16457: PUSH
16458: LD_VAR 0 10
16462: PPUSH
16463: CALL_OW 251
16467: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16468: LD_ADDR_VAR 0 6
16472: PUSH
16473: LD_VAR 0 4
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: CALL_OW 12
16489: PLUS
16490: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16491: LD_ADDR_VAR 0 7
16495: PUSH
16496: LD_VAR 0 5
16500: PUSH
16501: LD_INT 1
16503: NEG
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 12
16512: PLUS
16513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16514: LD_VAR 0 6
16518: PPUSH
16519: LD_VAR 0 7
16523: PPUSH
16524: CALL_OW 488
16528: NOT
16529: IFFALSE 16551
// begin _x := x ;
16531: LD_ADDR_VAR 0 6
16535: PUSH
16536: LD_VAR 0 4
16540: ST_TO_ADDR
// _y := y ;
16541: LD_ADDR_VAR 0 7
16545: PUSH
16546: LD_VAR 0 5
16550: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16551: LD_ADDR_VAR 0 3
16555: PUSH
16556: LD_INT 1
16558: PPUSH
16559: LD_VAR 0 14
16563: PPUSH
16564: CALL_OW 12
16568: ST_TO_ADDR
// case i of 1 :
16569: LD_VAR 0 3
16573: PUSH
16574: LD_INT 1
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16582
16580: GO 16599
16582: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16583: LD_VAR 0 1
16587: PPUSH
16588: LD_VAR 0 10
16592: PPUSH
16593: CALL_OW 115
16597: GO 16660
16599: LD_INT 2
16601: DOUBLE
16602: EQUAL
16603: IFTRUE 16607
16605: GO 16629
16607: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16608: LD_VAR 0 1
16612: PPUSH
16613: LD_VAR 0 6
16617: PPUSH
16618: LD_VAR 0 7
16622: PPUSH
16623: CALL_OW 153
16627: GO 16660
16629: LD_INT 3
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16659
16637: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16638: LD_VAR 0 1
16642: PPUSH
16643: LD_VAR 0 6
16647: PPUSH
16648: LD_VAR 0 7
16652: PPUSH
16653: CALL_OW 154
16657: GO 16660
16659: POP
// end ;
16660: LD_VAR 0 2
16664: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16665: LD_INT 0
16667: PPUSH
16668: PPUSH
16669: PPUSH
16670: PPUSH
16671: PPUSH
16672: PPUSH
// if not unit or not building then
16673: LD_VAR 0 1
16677: NOT
16678: PUSH
16679: LD_VAR 0 2
16683: NOT
16684: OR
16685: IFFALSE 16689
// exit ;
16687: GO 16847
// x := GetX ( building ) ;
16689: LD_ADDR_VAR 0 5
16693: PUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: CALL_OW 250
16703: ST_TO_ADDR
// y := GetY ( building ) ;
16704: LD_ADDR_VAR 0 6
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: CALL_OW 251
16718: ST_TO_ADDR
// for i = 0 to 5 do
16719: LD_ADDR_VAR 0 4
16723: PUSH
16724: DOUBLE
16725: LD_INT 0
16727: DEC
16728: ST_TO_ADDR
16729: LD_INT 5
16731: PUSH
16732: FOR_TO
16733: IFFALSE 16845
// begin _x := ShiftX ( x , i , 3 ) ;
16735: LD_ADDR_VAR 0 7
16739: PUSH
16740: LD_VAR 0 5
16744: PPUSH
16745: LD_VAR 0 4
16749: PPUSH
16750: LD_INT 3
16752: PPUSH
16753: CALL_OW 272
16757: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16758: LD_ADDR_VAR 0 8
16762: PUSH
16763: LD_VAR 0 6
16767: PPUSH
16768: LD_VAR 0 4
16772: PPUSH
16773: LD_INT 3
16775: PPUSH
16776: CALL_OW 273
16780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16781: LD_VAR 0 7
16785: PPUSH
16786: LD_VAR 0 8
16790: PPUSH
16791: CALL_OW 488
16795: NOT
16796: IFFALSE 16800
// continue ;
16798: GO 16732
// if HexInfo ( _x , _y ) = 0 then
16800: LD_VAR 0 7
16804: PPUSH
16805: LD_VAR 0 8
16809: PPUSH
16810: CALL_OW 428
16814: PUSH
16815: LD_INT 0
16817: EQUAL
16818: IFFALSE 16843
// begin ComMoveXY ( unit , _x , _y ) ;
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_VAR 0 7
16829: PPUSH
16830: LD_VAR 0 8
16834: PPUSH
16835: CALL_OW 111
// exit ;
16839: POP
16840: POP
16841: GO 16847
// end ; end ;
16843: GO 16732
16845: POP
16846: POP
// end ;
16847: LD_VAR 0 3
16851: RET
// export function ScanBase ( side , base_area ) ; begin
16852: LD_INT 0
16854: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: LD_VAR 0 2
16864: PPUSH
16865: LD_INT 81
16867: PUSH
16868: LD_VAR 0 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PPUSH
16877: CALL_OW 70
16881: ST_TO_ADDR
// end ;
16882: LD_VAR 0 3
16886: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16887: LD_INT 0
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
// result := false ;
16893: LD_ADDR_VAR 0 2
16897: PUSH
16898: LD_INT 0
16900: ST_TO_ADDR
// side := GetSide ( unit ) ;
16901: LD_ADDR_VAR 0 3
16905: PUSH
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 255
16915: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16916: LD_ADDR_VAR 0 4
16920: PUSH
16921: LD_VAR 0 1
16925: PPUSH
16926: CALL_OW 248
16930: ST_TO_ADDR
// case nat of 1 :
16931: LD_VAR 0 4
16935: PUSH
16936: LD_INT 1
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 16955
16944: POP
// tech := tech_lassight ; 2 :
16945: LD_ADDR_VAR 0 5
16949: PUSH
16950: LD_INT 12
16952: ST_TO_ADDR
16953: GO 16994
16955: LD_INT 2
16957: DOUBLE
16958: EQUAL
16959: IFTRUE 16963
16961: GO 16974
16963: POP
// tech := tech_mortar ; 3 :
16964: LD_ADDR_VAR 0 5
16968: PUSH
16969: LD_INT 41
16971: ST_TO_ADDR
16972: GO 16994
16974: LD_INT 3
16976: DOUBLE
16977: EQUAL
16978: IFTRUE 16982
16980: GO 16993
16982: POP
// tech := tech_bazooka ; end ;
16983: LD_ADDR_VAR 0 5
16987: PUSH
16988: LD_INT 44
16990: ST_TO_ADDR
16991: GO 16994
16993: POP
// if Researched ( side , tech ) then
16994: LD_VAR 0 3
16998: PPUSH
16999: LD_VAR 0 5
17003: PPUSH
17004: CALL_OW 325
17008: IFFALSE 17035
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17010: LD_ADDR_VAR 0 2
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: LD_INT 8
17020: PUSH
17021: LD_INT 9
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PUSH
17029: LD_VAR 0 4
17033: ARRAY
17034: ST_TO_ADDR
// end ;
17035: LD_VAR 0 2
17039: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17040: LD_INT 0
17042: PPUSH
17043: PPUSH
17044: PPUSH
// if not mines then
17045: LD_VAR 0 2
17049: NOT
17050: IFFALSE 17054
// exit ;
17052: GO 17198
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17054: LD_ADDR_VAR 0 5
17058: PUSH
17059: LD_INT 81
17061: PUSH
17062: LD_VAR 0 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 3
17073: PUSH
17074: LD_INT 21
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PPUSH
17092: CALL_OW 69
17096: ST_TO_ADDR
// for i in mines do
17097: LD_ADDR_VAR 0 4
17101: PUSH
17102: LD_VAR 0 2
17106: PUSH
17107: FOR_IN
17108: IFFALSE 17196
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17110: LD_VAR 0 4
17114: PUSH
17115: LD_INT 1
17117: ARRAY
17118: PPUSH
17119: LD_VAR 0 4
17123: PUSH
17124: LD_INT 2
17126: ARRAY
17127: PPUSH
17128: CALL_OW 458
17132: NOT
17133: IFFALSE 17137
// continue ;
17135: GO 17107
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17137: LD_VAR 0 4
17141: PUSH
17142: LD_INT 1
17144: ARRAY
17145: PPUSH
17146: LD_VAR 0 4
17150: PUSH
17151: LD_INT 2
17153: ARRAY
17154: PPUSH
17155: CALL_OW 428
17159: PUSH
17160: LD_VAR 0 5
17164: IN
17165: IFFALSE 17194
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17167: LD_VAR 0 4
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PPUSH
17176: LD_VAR 0 4
17180: PUSH
17181: LD_INT 2
17183: ARRAY
17184: PPUSH
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 456
// end ;
17194: GO 17107
17196: POP
17197: POP
// end ;
17198: LD_VAR 0 3
17202: RET
// export function Count ( array ) ; begin
17203: LD_INT 0
17205: PPUSH
// result := array + 0 ;
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_VAR 0 1
17215: PUSH
17216: LD_INT 0
17218: PLUS
17219: ST_TO_ADDR
// end ;
17220: LD_VAR 0 2
17224: RET
// export function IsEmpty ( building ) ; begin
17225: LD_INT 0
17227: PPUSH
// if not building then
17228: LD_VAR 0 1
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17280
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17237: LD_ADDR_VAR 0 2
17241: PUSH
17242: LD_VAR 0 1
17246: PUSH
17247: LD_INT 22
17249: PUSH
17250: LD_VAR 0 1
17254: PPUSH
17255: CALL_OW 255
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 58
17266: PUSH
17267: EMPTY
17268: LIST
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: IN
17279: ST_TO_ADDR
// end ;
17280: LD_VAR 0 2
17284: RET
// export function IsNotFull ( building ) ; var places ; begin
17285: LD_INT 0
17287: PPUSH
17288: PPUSH
// if not building then
17289: LD_VAR 0 1
17293: NOT
17294: IFFALSE 17298
// exit ;
17296: GO 17326
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17298: LD_ADDR_VAR 0 2
17302: PUSH
17303: LD_VAR 0 1
17307: PPUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 62
17313: PUSH
17314: EMPTY
17315: LIST
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PPUSH
17321: CALL_OW 72
17325: ST_TO_ADDR
// end ;
17326: LD_VAR 0 2
17330: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17331: LD_INT 0
17333: PPUSH
17334: PPUSH
17335: PPUSH
17336: PPUSH
// tmp := [ ] ;
17337: LD_ADDR_VAR 0 3
17341: PUSH
17342: EMPTY
17343: ST_TO_ADDR
// list := [ ] ;
17344: LD_ADDR_VAR 0 5
17348: PUSH
17349: EMPTY
17350: ST_TO_ADDR
// for i = 16 to 25 do
17351: LD_ADDR_VAR 0 4
17355: PUSH
17356: DOUBLE
17357: LD_INT 16
17359: DEC
17360: ST_TO_ADDR
17361: LD_INT 25
17363: PUSH
17364: FOR_TO
17365: IFFALSE 17438
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_VAR 0 3
17376: PUSH
17377: LD_INT 22
17379: PUSH
17380: LD_VAR 0 1
17384: PPUSH
17385: CALL_OW 255
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 91
17396: PUSH
17397: LD_VAR 0 1
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 30
17412: PUSH
17413: LD_VAR 0 4
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: LIST
17426: PUSH
17427: EMPTY
17428: LIST
17429: PPUSH
17430: CALL_OW 69
17434: ADD
17435: ST_TO_ADDR
17436: GO 17364
17438: POP
17439: POP
// for i = 1 to tmp do
17440: LD_ADDR_VAR 0 4
17444: PUSH
17445: DOUBLE
17446: LD_INT 1
17448: DEC
17449: ST_TO_ADDR
17450: LD_VAR 0 3
17454: PUSH
17455: FOR_TO
17456: IFFALSE 17544
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17458: LD_ADDR_VAR 0 5
17462: PUSH
17463: LD_VAR 0 5
17467: PUSH
17468: LD_VAR 0 3
17472: PUSH
17473: LD_VAR 0 4
17477: ARRAY
17478: PPUSH
17479: CALL_OW 266
17483: PUSH
17484: LD_VAR 0 3
17488: PUSH
17489: LD_VAR 0 4
17493: ARRAY
17494: PPUSH
17495: CALL_OW 250
17499: PUSH
17500: LD_VAR 0 3
17504: PUSH
17505: LD_VAR 0 4
17509: ARRAY
17510: PPUSH
17511: CALL_OW 251
17515: PUSH
17516: LD_VAR 0 3
17520: PUSH
17521: LD_VAR 0 4
17525: ARRAY
17526: PPUSH
17527: CALL_OW 254
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: ADD
17541: ST_TO_ADDR
17542: GO 17455
17544: POP
17545: POP
// result := list ;
17546: LD_ADDR_VAR 0 2
17550: PUSH
17551: LD_VAR 0 5
17555: ST_TO_ADDR
// end ;
17556: LD_VAR 0 2
17560: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17561: LD_INT 0
17563: PPUSH
17564: PPUSH
17565: PPUSH
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
// if not factory then
17570: LD_VAR 0 1
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 18172
// if control = control_apeman then
17579: LD_VAR 0 4
17583: PUSH
17584: LD_INT 5
17586: EQUAL
17587: IFFALSE 17696
// begin tmp := UnitsInside ( factory ) ;
17589: LD_ADDR_VAR 0 8
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 313
17603: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17604: LD_VAR 0 8
17608: PPUSH
17609: LD_INT 25
17611: PUSH
17612: LD_INT 12
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 72
17623: NOT
17624: IFFALSE 17634
// control := control_manual ;
17626: LD_ADDR_VAR 0 4
17630: PUSH
17631: LD_INT 1
17633: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17634: LD_ADDR_VAR 0 8
17638: PUSH
17639: LD_VAR 0 1
17643: PPUSH
17644: CALL 17331 0 1
17648: ST_TO_ADDR
// if tmp then
17649: LD_VAR 0 8
17653: IFFALSE 17696
// begin for i in tmp do
17655: LD_ADDR_VAR 0 7
17659: PUSH
17660: LD_VAR 0 8
17664: PUSH
17665: FOR_IN
17666: IFFALSE 17694
// if i [ 1 ] = b_ext_radio then
17668: LD_VAR 0 7
17672: PUSH
17673: LD_INT 1
17675: ARRAY
17676: PUSH
17677: LD_INT 22
17679: EQUAL
17680: IFFALSE 17692
// begin control := control_remote ;
17682: LD_ADDR_VAR 0 4
17686: PUSH
17687: LD_INT 2
17689: ST_TO_ADDR
// break ;
17690: GO 17694
// end ;
17692: GO 17665
17694: POP
17695: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17696: LD_VAR 0 1
17700: PPUSH
17701: LD_VAR 0 2
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_VAR 0 4
17715: PPUSH
17716: LD_VAR 0 5
17720: PPUSH
17721: CALL_OW 448
17725: IFFALSE 17760
// begin result := [ chassis , engine , control , weapon ] ;
17727: LD_ADDR_VAR 0 6
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_VAR 0 3
17741: PUSH
17742: LD_VAR 0 4
17746: PUSH
17747: LD_VAR 0 5
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: ST_TO_ADDR
// exit ;
17758: GO 18172
// end ; _chassis := AvailableChassisList ( factory ) ;
17760: LD_ADDR_VAR 0 9
17764: PUSH
17765: LD_VAR 0 1
17769: PPUSH
17770: CALL_OW 475
17774: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17775: LD_ADDR_VAR 0 11
17779: PUSH
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 476
17789: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17790: LD_ADDR_VAR 0 12
17794: PUSH
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 477
17804: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17805: LD_ADDR_VAR 0 10
17809: PUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: CALL_OW 478
17819: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17820: LD_VAR 0 9
17824: NOT
17825: PUSH
17826: LD_VAR 0 11
17830: NOT
17831: OR
17832: PUSH
17833: LD_VAR 0 12
17837: NOT
17838: OR
17839: PUSH
17840: LD_VAR 0 10
17844: NOT
17845: OR
17846: IFFALSE 17881
// begin result := [ chassis , engine , control , weapon ] ;
17848: LD_ADDR_VAR 0 6
17852: PUSH
17853: LD_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_VAR 0 4
17867: PUSH
17868: LD_VAR 0 5
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: ST_TO_ADDR
// exit ;
17879: GO 18172
// end ; if not chassis in _chassis then
17881: LD_VAR 0 2
17885: PUSH
17886: LD_VAR 0 9
17890: IN
17891: NOT
17892: IFFALSE 17918
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17894: LD_ADDR_VAR 0 2
17898: PUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_INT 1
17906: PPUSH
17907: LD_VAR 0 9
17911: PPUSH
17912: CALL_OW 12
17916: ARRAY
17917: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17918: LD_VAR 0 2
17922: PPUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: CALL 18177 0 2
17932: NOT
17933: IFFALSE 17992
// repeat engine := _engine [ 1 ] ;
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_VAR 0 11
17944: PUSH
17945: LD_INT 1
17947: ARRAY
17948: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17949: LD_ADDR_VAR 0 11
17953: PUSH
17954: LD_VAR 0 11
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: CALL_OW 3
17966: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17967: LD_VAR 0 2
17971: PPUSH
17972: LD_VAR 0 3
17976: PPUSH
17977: CALL 18177 0 2
17981: PUSH
17982: LD_VAR 0 11
17986: PUSH
17987: EMPTY
17988: EQUAL
17989: OR
17990: IFFALSE 17935
// if not control in _control then
17992: LD_VAR 0 4
17996: PUSH
17997: LD_VAR 0 12
18001: IN
18002: NOT
18003: IFFALSE 18029
// control := _control [ rand ( 1 , _control ) ] ;
18005: LD_ADDR_VAR 0 4
18009: PUSH
18010: LD_VAR 0 12
18014: PUSH
18015: LD_INT 1
18017: PPUSH
18018: LD_VAR 0 12
18022: PPUSH
18023: CALL_OW 12
18027: ARRAY
18028: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18029: LD_VAR 0 2
18033: PPUSH
18034: LD_VAR 0 5
18038: PPUSH
18039: CALL 18397 0 2
18043: NOT
18044: IFFALSE 18103
// repeat weapon := _weapon [ 1 ] ;
18046: LD_ADDR_VAR 0 5
18050: PUSH
18051: LD_VAR 0 10
18055: PUSH
18056: LD_INT 1
18058: ARRAY
18059: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18060: LD_ADDR_VAR 0 10
18064: PUSH
18065: LD_VAR 0 10
18069: PPUSH
18070: LD_INT 1
18072: PPUSH
18073: CALL_OW 3
18077: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18078: LD_VAR 0 2
18082: PPUSH
18083: LD_VAR 0 5
18087: PPUSH
18088: CALL 18397 0 2
18092: PUSH
18093: LD_VAR 0 10
18097: PUSH
18098: EMPTY
18099: EQUAL
18100: OR
18101: IFFALSE 18046
// result := [ ] ;
18103: LD_ADDR_VAR 0 6
18107: PUSH
18108: EMPTY
18109: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 2
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_VAR 0 4
18129: PPUSH
18130: LD_VAR 0 5
18134: PPUSH
18135: CALL_OW 448
18139: IFFALSE 18172
// result := [ chassis , engine , control , weapon ] ;
18141: LD_ADDR_VAR 0 6
18145: PUSH
18146: LD_VAR 0 2
18150: PUSH
18151: LD_VAR 0 3
18155: PUSH
18156: LD_VAR 0 4
18160: PUSH
18161: LD_VAR 0 5
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: ST_TO_ADDR
// end ;
18172: LD_VAR 0 6
18176: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18177: LD_INT 0
18179: PPUSH
// if not chassis or not engine then
18180: LD_VAR 0 1
18184: NOT
18185: PUSH
18186: LD_VAR 0 2
18190: NOT
18191: OR
18192: IFFALSE 18196
// exit ;
18194: GO 18392
// case engine of engine_solar :
18196: LD_VAR 0 2
18200: PUSH
18201: LD_INT 2
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18247
18209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18210: LD_ADDR_VAR 0 3
18214: PUSH
18215: LD_INT 11
18217: PUSH
18218: LD_INT 12
18220: PUSH
18221: LD_INT 13
18223: PUSH
18224: LD_INT 14
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: LD_INT 2
18232: PUSH
18233: LD_INT 3
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: ST_TO_ADDR
18245: GO 18376
18247: LD_INT 1
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18317
18255: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18256: LD_ADDR_VAR 0 3
18260: PUSH
18261: LD_INT 11
18263: PUSH
18264: LD_INT 12
18266: PUSH
18267: LD_INT 13
18269: PUSH
18270: LD_INT 14
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 3
18281: PUSH
18282: LD_INT 4
18284: PUSH
18285: LD_INT 5
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 23
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_INT 24
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
18315: GO 18376
18317: LD_INT 3
18319: DOUBLE
18320: EQUAL
18321: IFTRUE 18325
18323: GO 18375
18325: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18326: LD_ADDR_VAR 0 3
18330: PUSH
18331: LD_INT 13
18333: PUSH
18334: LD_INT 14
18336: PUSH
18337: LD_INT 2
18339: PUSH
18340: LD_INT 3
18342: PUSH
18343: LD_INT 4
18345: PUSH
18346: LD_INT 5
18348: PUSH
18349: LD_INT 21
18351: PUSH
18352: LD_INT 22
18354: PUSH
18355: LD_INT 23
18357: PUSH
18358: LD_INT 24
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: ST_TO_ADDR
18373: GO 18376
18375: POP
// result := ( chassis in result ) ;
18376: LD_ADDR_VAR 0 3
18380: PUSH
18381: LD_VAR 0 1
18385: PUSH
18386: LD_VAR 0 3
18390: IN
18391: ST_TO_ADDR
// end ;
18392: LD_VAR 0 3
18396: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18397: LD_INT 0
18399: PPUSH
// if not chassis or not weapon then
18400: LD_VAR 0 1
18404: NOT
18405: PUSH
18406: LD_VAR 0 2
18410: NOT
18411: OR
18412: IFFALSE 18416
// exit ;
18414: GO 19476
// case weapon of us_machine_gun :
18416: LD_VAR 0 2
18420: PUSH
18421: LD_INT 2
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18459
18429: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18430: LD_ADDR_VAR 0 3
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: LD_INT 4
18446: PUSH
18447: LD_INT 5
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: ST_TO_ADDR
18457: GO 19460
18459: LD_INT 3
18461: DOUBLE
18462: EQUAL
18463: IFTRUE 18467
18465: GO 18497
18467: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 2
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: LD_INT 4
18484: PUSH
18485: LD_INT 5
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: ST_TO_ADDR
18495: GO 19460
18497: LD_INT 11
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18535
18505: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18506: LD_ADDR_VAR 0 3
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: LD_INT 2
18516: PUSH
18517: LD_INT 3
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: LD_INT 5
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: ST_TO_ADDR
18533: GO 19460
18535: LD_INT 4
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18569
18543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18544: LD_ADDR_VAR 0 3
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: LD_INT 3
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: LD_INT 5
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: ST_TO_ADDR
18567: GO 19460
18569: LD_INT 5
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 18603
18577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18578: LD_ADDR_VAR 0 3
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 4
18591: PUSH
18592: LD_INT 5
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: ST_TO_ADDR
18601: GO 19460
18603: LD_INT 9
18605: DOUBLE
18606: EQUAL
18607: IFTRUE 18611
18609: GO 18637
18611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18612: LD_ADDR_VAR 0 3
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: LD_INT 3
18622: PUSH
18623: LD_INT 4
18625: PUSH
18626: LD_INT 5
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: ST_TO_ADDR
18635: GO 19460
18637: LD_INT 7
18639: DOUBLE
18640: EQUAL
18641: IFTRUE 18645
18643: GO 18671
18645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18646: LD_ADDR_VAR 0 3
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 4
18659: PUSH
18660: LD_INT 5
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: ST_TO_ADDR
18669: GO 19460
18671: LD_INT 12
18673: DOUBLE
18674: EQUAL
18675: IFTRUE 18679
18677: GO 18705
18679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18680: LD_ADDR_VAR 0 3
18684: PUSH
18685: LD_INT 2
18687: PUSH
18688: LD_INT 3
18690: PUSH
18691: LD_INT 4
18693: PUSH
18694: LD_INT 5
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: ST_TO_ADDR
18703: GO 19460
18705: LD_INT 13
18707: DOUBLE
18708: EQUAL
18709: IFTRUE 18713
18711: GO 18739
18713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18714: LD_ADDR_VAR 0 3
18718: PUSH
18719: LD_INT 2
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: LD_INT 4
18727: PUSH
18728: LD_INT 5
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: ST_TO_ADDR
18737: GO 19460
18739: LD_INT 14
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18765
18747: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: LD_INT 5
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: ST_TO_ADDR
18763: GO 19460
18765: LD_INT 6
18767: DOUBLE
18768: EQUAL
18769: IFTRUE 18773
18771: GO 18791
18773: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18774: LD_ADDR_VAR 0 3
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: LD_INT 5
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: ST_TO_ADDR
18789: GO 19460
18791: LD_INT 10
18793: DOUBLE
18794: EQUAL
18795: IFTRUE 18799
18797: GO 18817
18799: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18800: LD_ADDR_VAR 0 3
18804: PUSH
18805: LD_INT 4
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: ST_TO_ADDR
18815: GO 19460
18817: LD_INT 22
18819: DOUBLE
18820: EQUAL
18821: IFTRUE 18825
18823: GO 18851
18825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18826: LD_ADDR_VAR 0 3
18830: PUSH
18831: LD_INT 11
18833: PUSH
18834: LD_INT 12
18836: PUSH
18837: LD_INT 13
18839: PUSH
18840: LD_INT 14
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: ST_TO_ADDR
18849: GO 19460
18851: LD_INT 23
18853: DOUBLE
18854: EQUAL
18855: IFTRUE 18859
18857: GO 18885
18859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: LD_INT 11
18867: PUSH
18868: LD_INT 12
18870: PUSH
18871: LD_INT 13
18873: PUSH
18874: LD_INT 14
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: ST_TO_ADDR
18883: GO 19460
18885: LD_INT 24
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 18919
18893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18894: LD_ADDR_VAR 0 3
18898: PUSH
18899: LD_INT 11
18901: PUSH
18902: LD_INT 12
18904: PUSH
18905: LD_INT 13
18907: PUSH
18908: LD_INT 14
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: ST_TO_ADDR
18917: GO 19460
18919: LD_INT 30
18921: DOUBLE
18922: EQUAL
18923: IFTRUE 18927
18925: GO 18953
18927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18928: LD_ADDR_VAR 0 3
18932: PUSH
18933: LD_INT 11
18935: PUSH
18936: LD_INT 12
18938: PUSH
18939: LD_INT 13
18941: PUSH
18942: LD_INT 14
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
18951: GO 19460
18953: LD_INT 25
18955: DOUBLE
18956: EQUAL
18957: IFTRUE 18961
18959: GO 18979
18961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18962: LD_ADDR_VAR 0 3
18966: PUSH
18967: LD_INT 13
18969: PUSH
18970: LD_INT 14
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: ST_TO_ADDR
18977: GO 19460
18979: LD_INT 27
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 19005
18987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_INT 13
18995: PUSH
18996: LD_INT 14
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: ST_TO_ADDR
19003: GO 19460
19005: LD_INT 92
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19039
19013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_INT 11
19021: PUSH
19022: LD_INT 12
19024: PUSH
19025: LD_INT 13
19027: PUSH
19028: LD_INT 14
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: ST_TO_ADDR
19037: GO 19460
19039: LD_INT 28
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19065
19047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 14
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: ST_TO_ADDR
19063: GO 19460
19065: LD_INT 29
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19091
19073: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19074: LD_ADDR_VAR 0 3
19078: PUSH
19079: LD_INT 13
19081: PUSH
19082: LD_INT 14
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: ST_TO_ADDR
19089: GO 19460
19091: LD_INT 31
19093: DOUBLE
19094: EQUAL
19095: IFTRUE 19099
19097: GO 19117
19099: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: LD_INT 13
19107: PUSH
19108: LD_INT 14
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: ST_TO_ADDR
19115: GO 19460
19117: LD_INT 26
19119: DOUBLE
19120: EQUAL
19121: IFTRUE 19125
19123: GO 19143
19125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19126: LD_ADDR_VAR 0 3
19130: PUSH
19131: LD_INT 13
19133: PUSH
19134: LD_INT 14
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: ST_TO_ADDR
19141: GO 19460
19143: LD_INT 42
19145: DOUBLE
19146: EQUAL
19147: IFTRUE 19151
19149: GO 19177
19151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19152: LD_ADDR_VAR 0 3
19156: PUSH
19157: LD_INT 21
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 23
19165: PUSH
19166: LD_INT 24
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: ST_TO_ADDR
19175: GO 19460
19177: LD_INT 43
19179: DOUBLE
19180: EQUAL
19181: IFTRUE 19185
19183: GO 19211
19185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19186: LD_ADDR_VAR 0 3
19190: PUSH
19191: LD_INT 21
19193: PUSH
19194: LD_INT 22
19196: PUSH
19197: LD_INT 23
19199: PUSH
19200: LD_INT 24
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: ST_TO_ADDR
19209: GO 19460
19211: LD_INT 44
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19245
19219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19220: LD_ADDR_VAR 0 3
19224: PUSH
19225: LD_INT 21
19227: PUSH
19228: LD_INT 22
19230: PUSH
19231: LD_INT 23
19233: PUSH
19234: LD_INT 24
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: ST_TO_ADDR
19243: GO 19460
19245: LD_INT 45
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19279
19253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19254: LD_ADDR_VAR 0 3
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_INT 23
19267: PUSH
19268: LD_INT 24
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: ST_TO_ADDR
19277: GO 19460
19279: LD_INT 49
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19313
19287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19288: LD_ADDR_VAR 0 3
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 22
19298: PUSH
19299: LD_INT 23
19301: PUSH
19302: LD_INT 24
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: ST_TO_ADDR
19311: GO 19460
19313: LD_INT 51
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19347
19321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19322: LD_ADDR_VAR 0 3
19326: PUSH
19327: LD_INT 21
19329: PUSH
19330: LD_INT 22
19332: PUSH
19333: LD_INT 23
19335: PUSH
19336: LD_INT 24
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: ST_TO_ADDR
19345: GO 19460
19347: LD_INT 52
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19381
19355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 21
19363: PUSH
19364: LD_INT 22
19366: PUSH
19367: LD_INT 23
19369: PUSH
19370: LD_INT 24
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: ST_TO_ADDR
19379: GO 19460
19381: LD_INT 53
19383: DOUBLE
19384: EQUAL
19385: IFTRUE 19389
19387: GO 19407
19389: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: LD_INT 23
19397: PUSH
19398: LD_INT 24
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: ST_TO_ADDR
19405: GO 19460
19407: LD_INT 46
19409: DOUBLE
19410: EQUAL
19411: IFTRUE 19415
19413: GO 19433
19415: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19416: LD_ADDR_VAR 0 3
19420: PUSH
19421: LD_INT 23
19423: PUSH
19424: LD_INT 24
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: ST_TO_ADDR
19431: GO 19460
19433: LD_INT 47
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19459
19441: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19442: LD_ADDR_VAR 0 3
19446: PUSH
19447: LD_INT 23
19449: PUSH
19450: LD_INT 24
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 19460
19459: POP
// result := ( chassis in result ) ;
19460: LD_ADDR_VAR 0 3
19464: PUSH
19465: LD_VAR 0 1
19469: PUSH
19470: LD_VAR 0 3
19474: IN
19475: ST_TO_ADDR
// end ;
19476: LD_VAR 0 3
19480: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19481: LD_INT 0
19483: PPUSH
19484: PPUSH
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
19489: PPUSH
// result := array ;
19490: LD_ADDR_VAR 0 5
19494: PUSH
19495: LD_VAR 0 1
19499: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19500: LD_VAR 0 1
19504: NOT
19505: PUSH
19506: LD_VAR 0 2
19510: NOT
19511: OR
19512: PUSH
19513: LD_VAR 0 3
19517: NOT
19518: OR
19519: PUSH
19520: LD_VAR 0 2
19524: PUSH
19525: LD_VAR 0 1
19529: GREATER
19530: OR
19531: PUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_VAR 0 1
19541: GREATER
19542: OR
19543: IFFALSE 19547
// exit ;
19545: GO 19843
// if direction then
19547: LD_VAR 0 4
19551: IFFALSE 19615
// begin d := 1 ;
19553: LD_ADDR_VAR 0 9
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if i_from > i_to then
19561: LD_VAR 0 2
19565: PUSH
19566: LD_VAR 0 3
19570: GREATER
19571: IFFALSE 19597
// length := ( array - i_from ) + i_to else
19573: LD_ADDR_VAR 0 11
19577: PUSH
19578: LD_VAR 0 1
19582: PUSH
19583: LD_VAR 0 2
19587: MINUS
19588: PUSH
19589: LD_VAR 0 3
19593: PLUS
19594: ST_TO_ADDR
19595: GO 19613
// length := i_to - i_from ;
19597: LD_ADDR_VAR 0 11
19601: PUSH
19602: LD_VAR 0 3
19606: PUSH
19607: LD_VAR 0 2
19611: MINUS
19612: ST_TO_ADDR
// end else
19613: GO 19676
// begin d := - 1 ;
19615: LD_ADDR_VAR 0 9
19619: PUSH
19620: LD_INT 1
19622: NEG
19623: ST_TO_ADDR
// if i_from > i_to then
19624: LD_VAR 0 2
19628: PUSH
19629: LD_VAR 0 3
19633: GREATER
19634: IFFALSE 19654
// length := i_from - i_to else
19636: LD_ADDR_VAR 0 11
19640: PUSH
19641: LD_VAR 0 2
19645: PUSH
19646: LD_VAR 0 3
19650: MINUS
19651: ST_TO_ADDR
19652: GO 19676
// length := ( array - i_to ) + i_from ;
19654: LD_ADDR_VAR 0 11
19658: PUSH
19659: LD_VAR 0 1
19663: PUSH
19664: LD_VAR 0 3
19668: MINUS
19669: PUSH
19670: LD_VAR 0 2
19674: PLUS
19675: ST_TO_ADDR
// end ; if not length then
19676: LD_VAR 0 11
19680: NOT
19681: IFFALSE 19685
// exit ;
19683: GO 19843
// tmp := array ;
19685: LD_ADDR_VAR 0 10
19689: PUSH
19690: LD_VAR 0 1
19694: ST_TO_ADDR
// for i = 1 to length do
19695: LD_ADDR_VAR 0 6
19699: PUSH
19700: DOUBLE
19701: LD_INT 1
19703: DEC
19704: ST_TO_ADDR
19705: LD_VAR 0 11
19709: PUSH
19710: FOR_TO
19711: IFFALSE 19831
// begin for j = 1 to array do
19713: LD_ADDR_VAR 0 7
19717: PUSH
19718: DOUBLE
19719: LD_INT 1
19721: DEC
19722: ST_TO_ADDR
19723: LD_VAR 0 1
19727: PUSH
19728: FOR_TO
19729: IFFALSE 19817
// begin k := j + d ;
19731: LD_ADDR_VAR 0 8
19735: PUSH
19736: LD_VAR 0 7
19740: PUSH
19741: LD_VAR 0 9
19745: PLUS
19746: ST_TO_ADDR
// if k > array then
19747: LD_VAR 0 8
19751: PUSH
19752: LD_VAR 0 1
19756: GREATER
19757: IFFALSE 19767
// k := 1 ;
19759: LD_ADDR_VAR 0 8
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// if not k then
19767: LD_VAR 0 8
19771: NOT
19772: IFFALSE 19784
// k := array ;
19774: LD_ADDR_VAR 0 8
19778: PUSH
19779: LD_VAR 0 1
19783: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19784: LD_ADDR_VAR 0 10
19788: PUSH
19789: LD_VAR 0 10
19793: PPUSH
19794: LD_VAR 0 8
19798: PPUSH
19799: LD_VAR 0 1
19803: PUSH
19804: LD_VAR 0 7
19808: ARRAY
19809: PPUSH
19810: CALL_OW 1
19814: ST_TO_ADDR
// end ;
19815: GO 19728
19817: POP
19818: POP
// array := tmp ;
19819: LD_ADDR_VAR 0 1
19823: PUSH
19824: LD_VAR 0 10
19828: ST_TO_ADDR
// end ;
19829: GO 19710
19831: POP
19832: POP
// result := array ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_VAR 0 1
19842: ST_TO_ADDR
// end ;
19843: LD_VAR 0 5
19847: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19848: LD_INT 0
19850: PPUSH
19851: PPUSH
// result := 0 ;
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// if not array or not value in array then
19860: LD_VAR 0 1
19864: NOT
19865: PUSH
19866: LD_VAR 0 2
19870: PUSH
19871: LD_VAR 0 1
19875: IN
19876: NOT
19877: OR
19878: IFFALSE 19882
// exit ;
19880: GO 19936
// for i = 1 to array do
19882: LD_ADDR_VAR 0 4
19886: PUSH
19887: DOUBLE
19888: LD_INT 1
19890: DEC
19891: ST_TO_ADDR
19892: LD_VAR 0 1
19896: PUSH
19897: FOR_TO
19898: IFFALSE 19934
// if value = array [ i ] then
19900: LD_VAR 0 2
19904: PUSH
19905: LD_VAR 0 1
19909: PUSH
19910: LD_VAR 0 4
19914: ARRAY
19915: EQUAL
19916: IFFALSE 19932
// begin result := i ;
19918: LD_ADDR_VAR 0 3
19922: PUSH
19923: LD_VAR 0 4
19927: ST_TO_ADDR
// exit ;
19928: POP
19929: POP
19930: GO 19936
// end ;
19932: GO 19897
19934: POP
19935: POP
// end ;
19936: LD_VAR 0 3
19940: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19941: LD_INT 0
19943: PPUSH
// vc_chassis := chassis ;
19944: LD_ADDR_OWVAR 37
19948: PUSH
19949: LD_VAR 0 1
19953: ST_TO_ADDR
// vc_engine := engine ;
19954: LD_ADDR_OWVAR 39
19958: PUSH
19959: LD_VAR 0 2
19963: ST_TO_ADDR
// vc_control := control ;
19964: LD_ADDR_OWVAR 38
19968: PUSH
19969: LD_VAR 0 3
19973: ST_TO_ADDR
// vc_weapon := weapon ;
19974: LD_ADDR_OWVAR 40
19978: PUSH
19979: LD_VAR 0 4
19983: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19984: LD_ADDR_OWVAR 41
19988: PUSH
19989: LD_VAR 0 5
19993: ST_TO_ADDR
// end ;
19994: LD_VAR 0 6
19998: RET
// export function WantPlant ( unit ) ; var task ; begin
19999: LD_INT 0
20001: PPUSH
20002: PPUSH
// result := false ;
20003: LD_ADDR_VAR 0 2
20007: PUSH
20008: LD_INT 0
20010: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 437
20025: ST_TO_ADDR
// if task then
20026: LD_VAR 0 3
20030: IFFALSE 20058
// if task [ 1 ] [ 1 ] = p then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 1
20039: ARRAY
20040: PUSH
20041: LD_INT 1
20043: ARRAY
20044: PUSH
20045: LD_STRING p
20047: EQUAL
20048: IFFALSE 20058
// result := true ;
20050: LD_ADDR_VAR 0 2
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// end ;
20058: LD_VAR 0 2
20062: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20063: LD_INT 0
20065: PPUSH
20066: PPUSH
20067: PPUSH
20068: PPUSH
// if pos < 1 then
20069: LD_VAR 0 2
20073: PUSH
20074: LD_INT 1
20076: LESS
20077: IFFALSE 20081
// exit ;
20079: GO 20384
// if pos = 1 then
20081: LD_VAR 0 2
20085: PUSH
20086: LD_INT 1
20088: EQUAL
20089: IFFALSE 20122
// result := Replace ( arr , pos [ 1 ] , value ) else
20091: LD_ADDR_VAR 0 4
20095: PUSH
20096: LD_VAR 0 1
20100: PPUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_INT 1
20108: ARRAY
20109: PPUSH
20110: LD_VAR 0 3
20114: PPUSH
20115: CALL_OW 1
20119: ST_TO_ADDR
20120: GO 20384
// begin tmp := arr ;
20122: LD_ADDR_VAR 0 6
20126: PUSH
20127: LD_VAR 0 1
20131: ST_TO_ADDR
// s_arr := [ tmp ] ;
20132: LD_ADDR_VAR 0 7
20136: PUSH
20137: LD_VAR 0 6
20141: PUSH
20142: EMPTY
20143: LIST
20144: ST_TO_ADDR
// for i = 1 to pos - 1 do
20145: LD_ADDR_VAR 0 5
20149: PUSH
20150: DOUBLE
20151: LD_INT 1
20153: DEC
20154: ST_TO_ADDR
20155: LD_VAR 0 2
20159: PUSH
20160: LD_INT 1
20162: MINUS
20163: PUSH
20164: FOR_TO
20165: IFFALSE 20210
// begin tmp := tmp [ pos [ i ] ] ;
20167: LD_ADDR_VAR 0 6
20171: PUSH
20172: LD_VAR 0 6
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_VAR 0 5
20186: ARRAY
20187: ARRAY
20188: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20189: LD_ADDR_VAR 0 7
20193: PUSH
20194: LD_VAR 0 7
20198: PUSH
20199: LD_VAR 0 6
20203: PUSH
20204: EMPTY
20205: LIST
20206: ADD
20207: ST_TO_ADDR
// end ;
20208: GO 20164
20210: POP
20211: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20212: LD_ADDR_VAR 0 6
20216: PUSH
20217: LD_VAR 0 6
20221: PPUSH
20222: LD_VAR 0 2
20226: PUSH
20227: LD_VAR 0 2
20231: ARRAY
20232: PPUSH
20233: LD_VAR 0 3
20237: PPUSH
20238: CALL_OW 1
20242: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20243: LD_ADDR_VAR 0 7
20247: PUSH
20248: LD_VAR 0 7
20252: PPUSH
20253: LD_VAR 0 7
20257: PPUSH
20258: LD_VAR 0 6
20262: PPUSH
20263: CALL_OW 1
20267: ST_TO_ADDR
// for i = s_arr downto 2 do
20268: LD_ADDR_VAR 0 5
20272: PUSH
20273: DOUBLE
20274: LD_VAR 0 7
20278: INC
20279: ST_TO_ADDR
20280: LD_INT 2
20282: PUSH
20283: FOR_DOWNTO
20284: IFFALSE 20368
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20286: LD_ADDR_VAR 0 6
20290: PUSH
20291: LD_VAR 0 7
20295: PUSH
20296: LD_VAR 0 5
20300: PUSH
20301: LD_INT 1
20303: MINUS
20304: ARRAY
20305: PPUSH
20306: LD_VAR 0 2
20310: PUSH
20311: LD_VAR 0 5
20315: PUSH
20316: LD_INT 1
20318: MINUS
20319: ARRAY
20320: PPUSH
20321: LD_VAR 0 7
20325: PUSH
20326: LD_VAR 0 5
20330: ARRAY
20331: PPUSH
20332: CALL_OW 1
20336: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20337: LD_ADDR_VAR 0 7
20341: PUSH
20342: LD_VAR 0 7
20346: PPUSH
20347: LD_VAR 0 5
20351: PUSH
20352: LD_INT 1
20354: MINUS
20355: PPUSH
20356: LD_VAR 0 6
20360: PPUSH
20361: CALL_OW 1
20365: ST_TO_ADDR
// end ;
20366: GO 20283
20368: POP
20369: POP
// result := s_arr [ 1 ] ;
20370: LD_ADDR_VAR 0 4
20374: PUSH
20375: LD_VAR 0 7
20379: PUSH
20380: LD_INT 1
20382: ARRAY
20383: ST_TO_ADDR
// end ; end ;
20384: LD_VAR 0 4
20388: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20389: LD_INT 0
20391: PPUSH
20392: PPUSH
// if not list then
20393: LD_VAR 0 1
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20493
// i := list [ pos1 ] ;
20402: LD_ADDR_VAR 0 5
20406: PUSH
20407: LD_VAR 0 1
20411: PUSH
20412: LD_VAR 0 2
20416: ARRAY
20417: ST_TO_ADDR
// if not i then
20418: LD_VAR 0 5
20422: NOT
20423: IFFALSE 20427
// exit ;
20425: GO 20493
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20427: LD_ADDR_VAR 0 1
20431: PUSH
20432: LD_VAR 0 1
20436: PPUSH
20437: LD_VAR 0 2
20441: PPUSH
20442: LD_VAR 0 1
20446: PUSH
20447: LD_VAR 0 3
20451: ARRAY
20452: PPUSH
20453: CALL_OW 1
20457: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20458: LD_ADDR_VAR 0 1
20462: PUSH
20463: LD_VAR 0 1
20467: PPUSH
20468: LD_VAR 0 3
20472: PPUSH
20473: LD_VAR 0 5
20477: PPUSH
20478: CALL_OW 1
20482: ST_TO_ADDR
// result := list ;
20483: LD_ADDR_VAR 0 4
20487: PUSH
20488: LD_VAR 0 1
20492: ST_TO_ADDR
// end ;
20493: LD_VAR 0 4
20497: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20498: LD_INT 0
20500: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 1
20510: PPUSH
20511: CALL_OW 250
20515: PPUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 251
20525: PPUSH
20526: LD_VAR 0 2
20530: PPUSH
20531: LD_VAR 0 3
20535: PPUSH
20536: LD_VAR 0 4
20540: PPUSH
20541: CALL 20919 0 5
20545: ST_TO_ADDR
// end ;
20546: LD_VAR 0 5
20550: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20551: LD_INT 0
20553: PPUSH
20554: PPUSH
20555: PPUSH
20556: PPUSH
// if not list or not unit then
20557: LD_VAR 0 2
20561: NOT
20562: PUSH
20563: LD_VAR 0 1
20567: NOT
20568: OR
20569: IFFALSE 20573
// exit ;
20571: GO 20914
// result := [ ] ;
20573: LD_ADDR_VAR 0 5
20577: PUSH
20578: EMPTY
20579: ST_TO_ADDR
// for i in list do
20580: LD_ADDR_VAR 0 6
20584: PUSH
20585: LD_VAR 0 2
20589: PUSH
20590: FOR_IN
20591: IFFALSE 20809
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20593: LD_ADDR_VAR 0 8
20597: PUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_VAR 0 6
20607: PUSH
20608: LD_INT 1
20610: ARRAY
20611: PPUSH
20612: LD_VAR 0 6
20616: PUSH
20617: LD_INT 2
20619: ARRAY
20620: PPUSH
20621: CALL_OW 297
20625: ST_TO_ADDR
// if not Count ( result ) then
20626: LD_VAR 0 5
20630: PPUSH
20631: CALL 17203 0 1
20635: NOT
20636: IFFALSE 20669
// begin result := Join ( result , [ i , tmp ] ) ;
20638: LD_ADDR_VAR 0 5
20642: PUSH
20643: LD_VAR 0 5
20647: PPUSH
20648: LD_VAR 0 6
20652: PUSH
20653: LD_VAR 0 8
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL 52792 0 2
20666: ST_TO_ADDR
// continue ;
20667: GO 20590
// end ; if result [ result ] [ 2 ] <= tmp then
20669: LD_VAR 0 5
20673: PUSH
20674: LD_VAR 0 5
20678: ARRAY
20679: PUSH
20680: LD_INT 2
20682: ARRAY
20683: PUSH
20684: LD_VAR 0 8
20688: LESSEQUAL
20689: IFFALSE 20722
// result := Join ( result , [ i , tmp ] ) else
20691: LD_ADDR_VAR 0 5
20695: PUSH
20696: LD_VAR 0 5
20700: PPUSH
20701: LD_VAR 0 6
20705: PUSH
20706: LD_VAR 0 8
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PPUSH
20715: CALL 52792 0 2
20719: ST_TO_ADDR
20720: GO 20807
// begin for j := 1 to Count ( result ) do
20722: LD_ADDR_VAR 0 7
20726: PUSH
20727: DOUBLE
20728: LD_INT 1
20730: DEC
20731: ST_TO_ADDR
20732: LD_VAR 0 5
20736: PPUSH
20737: CALL 17203 0 1
20741: PUSH
20742: FOR_TO
20743: IFFALSE 20805
// begin if tmp < result [ j ] [ 2 ] then
20745: LD_VAR 0 8
20749: PUSH
20750: LD_VAR 0 5
20754: PUSH
20755: LD_VAR 0 7
20759: ARRAY
20760: PUSH
20761: LD_INT 2
20763: ARRAY
20764: LESS
20765: IFFALSE 20803
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20767: LD_ADDR_VAR 0 5
20771: PUSH
20772: LD_VAR 0 5
20776: PPUSH
20777: LD_VAR 0 7
20781: PPUSH
20782: LD_VAR 0 6
20786: PUSH
20787: LD_VAR 0 8
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 2
20800: ST_TO_ADDR
// break ;
20801: GO 20805
// end ; end ;
20803: GO 20742
20805: POP
20806: POP
// end ; end ;
20807: GO 20590
20809: POP
20810: POP
// if result and not asc then
20811: LD_VAR 0 5
20815: PUSH
20816: LD_VAR 0 3
20820: NOT
20821: AND
20822: IFFALSE 20839
// result := ReverseArray ( result ) ;
20824: LD_ADDR_VAR 0 5
20828: PUSH
20829: LD_VAR 0 5
20833: PPUSH
20834: CALL 48079 0 1
20838: ST_TO_ADDR
// tmp := [ ] ;
20839: LD_ADDR_VAR 0 8
20843: PUSH
20844: EMPTY
20845: ST_TO_ADDR
// if mode then
20846: LD_VAR 0 4
20850: IFFALSE 20914
// begin for i := 1 to result do
20852: LD_ADDR_VAR 0 6
20856: PUSH
20857: DOUBLE
20858: LD_INT 1
20860: DEC
20861: ST_TO_ADDR
20862: LD_VAR 0 5
20866: PUSH
20867: FOR_TO
20868: IFFALSE 20902
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20870: LD_ADDR_VAR 0 8
20874: PUSH
20875: LD_VAR 0 8
20879: PPUSH
20880: LD_VAR 0 5
20884: PUSH
20885: LD_VAR 0 6
20889: ARRAY
20890: PUSH
20891: LD_INT 1
20893: ARRAY
20894: PPUSH
20895: CALL 52792 0 2
20899: ST_TO_ADDR
20900: GO 20867
20902: POP
20903: POP
// result := tmp ;
20904: LD_ADDR_VAR 0 5
20908: PUSH
20909: LD_VAR 0 8
20913: ST_TO_ADDR
// end ; end ;
20914: LD_VAR 0 5
20918: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
20923: PPUSH
20924: PPUSH
// if not list then
20925: LD_VAR 0 3
20929: NOT
20930: IFFALSE 20934
// exit ;
20932: GO 21322
// result := [ ] ;
20934: LD_ADDR_VAR 0 6
20938: PUSH
20939: EMPTY
20940: ST_TO_ADDR
// for i in list do
20941: LD_ADDR_VAR 0 7
20945: PUSH
20946: LD_VAR 0 3
20950: PUSH
20951: FOR_IN
20952: IFFALSE 21154
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20954: LD_ADDR_VAR 0 9
20958: PUSH
20959: LD_VAR 0 7
20963: PPUSH
20964: LD_VAR 0 1
20968: PPUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 297
20978: ST_TO_ADDR
// if not result then
20979: LD_VAR 0 6
20983: NOT
20984: IFFALSE 21010
// result := [ [ i , tmp ] ] else
20986: LD_ADDR_VAR 0 6
20990: PUSH
20991: LD_VAR 0 7
20995: PUSH
20996: LD_VAR 0 9
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: EMPTY
21006: LIST
21007: ST_TO_ADDR
21008: GO 21152
// begin if result [ result ] [ 2 ] < tmp then
21010: LD_VAR 0 6
21014: PUSH
21015: LD_VAR 0 6
21019: ARRAY
21020: PUSH
21021: LD_INT 2
21023: ARRAY
21024: PUSH
21025: LD_VAR 0 9
21029: LESS
21030: IFFALSE 21072
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21032: LD_ADDR_VAR 0 6
21036: PUSH
21037: LD_VAR 0 6
21041: PPUSH
21042: LD_VAR 0 6
21046: PUSH
21047: LD_INT 1
21049: PLUS
21050: PPUSH
21051: LD_VAR 0 7
21055: PUSH
21056: LD_VAR 0 9
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PPUSH
21065: CALL_OW 2
21069: ST_TO_ADDR
21070: GO 21152
// for j = 1 to result do
21072: LD_ADDR_VAR 0 8
21076: PUSH
21077: DOUBLE
21078: LD_INT 1
21080: DEC
21081: ST_TO_ADDR
21082: LD_VAR 0 6
21086: PUSH
21087: FOR_TO
21088: IFFALSE 21150
// begin if tmp < result [ j ] [ 2 ] then
21090: LD_VAR 0 9
21094: PUSH
21095: LD_VAR 0 6
21099: PUSH
21100: LD_VAR 0 8
21104: ARRAY
21105: PUSH
21106: LD_INT 2
21108: ARRAY
21109: LESS
21110: IFFALSE 21148
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21112: LD_ADDR_VAR 0 6
21116: PUSH
21117: LD_VAR 0 6
21121: PPUSH
21122: LD_VAR 0 8
21126: PPUSH
21127: LD_VAR 0 7
21131: PUSH
21132: LD_VAR 0 9
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 2
21145: ST_TO_ADDR
// break ;
21146: GO 21150
// end ; end ;
21148: GO 21087
21150: POP
21151: POP
// end ; end ;
21152: GO 20951
21154: POP
21155: POP
// if result and not asc then
21156: LD_VAR 0 6
21160: PUSH
21161: LD_VAR 0 4
21165: NOT
21166: AND
21167: IFFALSE 21242
// begin tmp := result ;
21169: LD_ADDR_VAR 0 9
21173: PUSH
21174: LD_VAR 0 6
21178: ST_TO_ADDR
// for i = tmp downto 1 do
21179: LD_ADDR_VAR 0 7
21183: PUSH
21184: DOUBLE
21185: LD_VAR 0 9
21189: INC
21190: ST_TO_ADDR
21191: LD_INT 1
21193: PUSH
21194: FOR_DOWNTO
21195: IFFALSE 21240
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21197: LD_ADDR_VAR 0 6
21201: PUSH
21202: LD_VAR 0 6
21206: PPUSH
21207: LD_VAR 0 9
21211: PUSH
21212: LD_VAR 0 7
21216: MINUS
21217: PUSH
21218: LD_INT 1
21220: PLUS
21221: PPUSH
21222: LD_VAR 0 9
21226: PUSH
21227: LD_VAR 0 7
21231: ARRAY
21232: PPUSH
21233: CALL_OW 1
21237: ST_TO_ADDR
21238: GO 21194
21240: POP
21241: POP
// end ; tmp := [ ] ;
21242: LD_ADDR_VAR 0 9
21246: PUSH
21247: EMPTY
21248: ST_TO_ADDR
// if mode then
21249: LD_VAR 0 5
21253: IFFALSE 21322
// begin for i = 1 to result do
21255: LD_ADDR_VAR 0 7
21259: PUSH
21260: DOUBLE
21261: LD_INT 1
21263: DEC
21264: ST_TO_ADDR
21265: LD_VAR 0 6
21269: PUSH
21270: FOR_TO
21271: IFFALSE 21310
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21273: LD_ADDR_VAR 0 9
21277: PUSH
21278: LD_VAR 0 9
21282: PPUSH
21283: LD_VAR 0 7
21287: PPUSH
21288: LD_VAR 0 6
21292: PUSH
21293: LD_VAR 0 7
21297: ARRAY
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: CALL_OW 1
21307: ST_TO_ADDR
21308: GO 21270
21310: POP
21311: POP
// result := tmp ;
21312: LD_ADDR_VAR 0 6
21316: PUSH
21317: LD_VAR 0 9
21321: ST_TO_ADDR
// end ; end ;
21322: LD_VAR 0 6
21326: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21327: LD_INT 0
21329: PPUSH
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
21334: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21335: LD_ADDR_VAR 0 5
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: ST_TO_ADDR
// if not x or not y then
21357: LD_VAR 0 2
21361: NOT
21362: PUSH
21363: LD_VAR 0 3
21367: NOT
21368: OR
21369: IFFALSE 21373
// exit ;
21371: GO 23023
// if not range then
21373: LD_VAR 0 4
21377: NOT
21378: IFFALSE 21388
// range := 10 ;
21380: LD_ADDR_VAR 0 4
21384: PUSH
21385: LD_INT 10
21387: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21388: LD_ADDR_VAR 0 8
21392: PUSH
21393: LD_INT 81
21395: PUSH
21396: LD_VAR 0 1
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 92
21407: PUSH
21408: LD_VAR 0 2
21412: PUSH
21413: LD_VAR 0 3
21417: PUSH
21418: LD_VAR 0 4
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 3
21431: PUSH
21432: LD_INT 21
21434: PUSH
21435: LD_INT 3
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: PPUSH
21451: CALL_OW 69
21455: ST_TO_ADDR
// if not tmp then
21456: LD_VAR 0 8
21460: NOT
21461: IFFALSE 21465
// exit ;
21463: GO 23023
// for i in tmp do
21465: LD_ADDR_VAR 0 6
21469: PUSH
21470: LD_VAR 0 8
21474: PUSH
21475: FOR_IN
21476: IFFALSE 22998
// begin points := [ 0 , 0 , 0 ] ;
21478: LD_ADDR_VAR 0 9
21482: PUSH
21483: LD_INT 0
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: ST_TO_ADDR
// bpoints := 1 ;
21497: LD_ADDR_VAR 0 10
21501: PUSH
21502: LD_INT 1
21504: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21505: LD_VAR 0 6
21509: PPUSH
21510: CALL_OW 247
21514: PUSH
21515: LD_INT 1
21517: DOUBLE
21518: EQUAL
21519: IFTRUE 21523
21521: GO 22101
21523: POP
// begin if GetClass ( i ) = 1 then
21524: LD_VAR 0 6
21528: PPUSH
21529: CALL_OW 257
21533: PUSH
21534: LD_INT 1
21536: EQUAL
21537: IFFALSE 21558
// points := [ 10 , 5 , 3 ] ;
21539: LD_ADDR_VAR 0 9
21543: PUSH
21544: LD_INT 10
21546: PUSH
21547: LD_INT 5
21549: PUSH
21550: LD_INT 3
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: LIST
21557: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 257
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: LD_INT 3
21573: PUSH
21574: LD_INT 4
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: IN
21582: IFFALSE 21603
// points := [ 3 , 2 , 1 ] ;
21584: LD_ADDR_VAR 0 9
21588: PUSH
21589: LD_INT 3
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21603: LD_VAR 0 6
21607: PPUSH
21608: CALL_OW 257
21612: PUSH
21613: LD_INT 5
21615: EQUAL
21616: IFFALSE 21637
// points := [ 130 , 5 , 2 ] ;
21618: LD_ADDR_VAR 0 9
21622: PUSH
21623: LD_INT 130
21625: PUSH
21626: LD_INT 5
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21637: LD_VAR 0 6
21641: PPUSH
21642: CALL_OW 257
21646: PUSH
21647: LD_INT 8
21649: EQUAL
21650: IFFALSE 21671
// points := [ 35 , 35 , 30 ] ;
21652: LD_ADDR_VAR 0 9
21656: PUSH
21657: LD_INT 35
21659: PUSH
21660: LD_INT 35
21662: PUSH
21663: LD_INT 30
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21671: LD_VAR 0 6
21675: PPUSH
21676: CALL_OW 257
21680: PUSH
21681: LD_INT 9
21683: EQUAL
21684: IFFALSE 21705
// points := [ 20 , 55 , 40 ] ;
21686: LD_ADDR_VAR 0 9
21690: PUSH
21691: LD_INT 20
21693: PUSH
21694: LD_INT 55
21696: PUSH
21697: LD_INT 40
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21705: LD_VAR 0 6
21709: PPUSH
21710: CALL_OW 257
21714: PUSH
21715: LD_INT 12
21717: PUSH
21718: LD_INT 16
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: IN
21725: IFFALSE 21746
// points := [ 5 , 3 , 2 ] ;
21727: LD_ADDR_VAR 0 9
21731: PUSH
21732: LD_INT 5
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21746: LD_VAR 0 6
21750: PPUSH
21751: CALL_OW 257
21755: PUSH
21756: LD_INT 17
21758: EQUAL
21759: IFFALSE 21780
// points := [ 100 , 50 , 75 ] ;
21761: LD_ADDR_VAR 0 9
21765: PUSH
21766: LD_INT 100
21768: PUSH
21769: LD_INT 50
21771: PUSH
21772: LD_INT 75
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21780: LD_VAR 0 6
21784: PPUSH
21785: CALL_OW 257
21789: PUSH
21790: LD_INT 15
21792: EQUAL
21793: IFFALSE 21814
// points := [ 10 , 5 , 3 ] ;
21795: LD_ADDR_VAR 0 9
21799: PUSH
21800: LD_INT 10
21802: PUSH
21803: LD_INT 5
21805: PUSH
21806: LD_INT 3
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21814: LD_VAR 0 6
21818: PPUSH
21819: CALL_OW 257
21823: PUSH
21824: LD_INT 14
21826: EQUAL
21827: IFFALSE 21848
// points := [ 10 , 0 , 0 ] ;
21829: LD_ADDR_VAR 0 9
21833: PUSH
21834: LD_INT 10
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21848: LD_VAR 0 6
21852: PPUSH
21853: CALL_OW 257
21857: PUSH
21858: LD_INT 11
21860: EQUAL
21861: IFFALSE 21882
// points := [ 30 , 10 , 5 ] ;
21863: LD_ADDR_VAR 0 9
21867: PUSH
21868: LD_INT 30
21870: PUSH
21871: LD_INT 10
21873: PUSH
21874: LD_INT 5
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21882: LD_VAR 0 1
21886: PPUSH
21887: LD_INT 5
21889: PPUSH
21890: CALL_OW 321
21894: PUSH
21895: LD_INT 2
21897: EQUAL
21898: IFFALSE 21915
// bpoints := bpoints * 1.8 ;
21900: LD_ADDR_VAR 0 10
21904: PUSH
21905: LD_VAR 0 10
21909: PUSH
21910: LD_REAL  1.80000000000000E+0000
21913: MUL
21914: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21915: LD_VAR 0 6
21919: PPUSH
21920: CALL_OW 257
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 2
21930: PUSH
21931: LD_INT 3
21933: PUSH
21934: LD_INT 4
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: IN
21943: PUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: LD_INT 51
21951: PPUSH
21952: CALL_OW 321
21956: PUSH
21957: LD_INT 2
21959: EQUAL
21960: AND
21961: IFFALSE 21978
// bpoints := bpoints * 1.2 ;
21963: LD_ADDR_VAR 0 10
21967: PUSH
21968: LD_VAR 0 10
21972: PUSH
21973: LD_REAL  1.20000000000000E+0000
21976: MUL
21977: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21978: LD_VAR 0 6
21982: PPUSH
21983: CALL_OW 257
21987: PUSH
21988: LD_INT 5
21990: PUSH
21991: LD_INT 7
21993: PUSH
21994: LD_INT 9
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: IN
22002: PUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: LD_INT 52
22010: PPUSH
22011: CALL_OW 321
22015: PUSH
22016: LD_INT 2
22018: EQUAL
22019: AND
22020: IFFALSE 22037
// bpoints := bpoints * 1.5 ;
22022: LD_ADDR_VAR 0 10
22026: PUSH
22027: LD_VAR 0 10
22031: PUSH
22032: LD_REAL  1.50000000000000E+0000
22035: MUL
22036: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_INT 66
22044: PPUSH
22045: CALL_OW 321
22049: PUSH
22050: LD_INT 2
22052: EQUAL
22053: IFFALSE 22070
// bpoints := bpoints * 1.1 ;
22055: LD_ADDR_VAR 0 10
22059: PUSH
22060: LD_VAR 0 10
22064: PUSH
22065: LD_REAL  1.10000000000000E+0000
22068: MUL
22069: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22070: LD_ADDR_VAR 0 10
22074: PUSH
22075: LD_VAR 0 10
22079: PUSH
22080: LD_VAR 0 6
22084: PPUSH
22085: LD_INT 1
22087: PPUSH
22088: CALL_OW 259
22092: PUSH
22093: LD_REAL  1.15000000000000E+0000
22096: MUL
22097: MUL
22098: ST_TO_ADDR
// end ; unit_vehicle :
22099: GO 22927
22101: LD_INT 2
22103: DOUBLE
22104: EQUAL
22105: IFTRUE 22109
22107: GO 22915
22109: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22110: LD_VAR 0 6
22114: PPUSH
22115: CALL_OW 264
22119: PUSH
22120: LD_INT 2
22122: PUSH
22123: LD_INT 42
22125: PUSH
22126: LD_INT 24
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: LIST
22133: IN
22134: IFFALSE 22155
// points := [ 25 , 5 , 3 ] ;
22136: LD_ADDR_VAR 0 9
22140: PUSH
22141: LD_INT 25
22143: PUSH
22144: LD_INT 5
22146: PUSH
22147: LD_INT 3
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22155: LD_VAR 0 6
22159: PPUSH
22160: CALL_OW 264
22164: PUSH
22165: LD_INT 4
22167: PUSH
22168: LD_INT 43
22170: PUSH
22171: LD_INT 25
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: IN
22179: IFFALSE 22200
// points := [ 40 , 15 , 5 ] ;
22181: LD_ADDR_VAR 0 9
22185: PUSH
22186: LD_INT 40
22188: PUSH
22189: LD_INT 15
22191: PUSH
22192: LD_INT 5
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22200: LD_VAR 0 6
22204: PPUSH
22205: CALL_OW 264
22209: PUSH
22210: LD_INT 3
22212: PUSH
22213: LD_INT 23
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: IN
22220: IFFALSE 22241
// points := [ 7 , 25 , 8 ] ;
22222: LD_ADDR_VAR 0 9
22226: PUSH
22227: LD_INT 7
22229: PUSH
22230: LD_INT 25
22232: PUSH
22233: LD_INT 8
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22241: LD_VAR 0 6
22245: PPUSH
22246: CALL_OW 264
22250: PUSH
22251: LD_INT 5
22253: PUSH
22254: LD_INT 27
22256: PUSH
22257: LD_INT 44
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: LIST
22264: IN
22265: IFFALSE 22286
// points := [ 14 , 50 , 16 ] ;
22267: LD_ADDR_VAR 0 9
22271: PUSH
22272: LD_INT 14
22274: PUSH
22275: LD_INT 50
22277: PUSH
22278: LD_INT 16
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: LIST
22285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22286: LD_VAR 0 6
22290: PPUSH
22291: CALL_OW 264
22295: PUSH
22296: LD_INT 6
22298: PUSH
22299: LD_INT 46
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: IN
22306: IFFALSE 22327
// points := [ 32 , 120 , 70 ] ;
22308: LD_ADDR_VAR 0 9
22312: PUSH
22313: LD_INT 32
22315: PUSH
22316: LD_INT 120
22318: PUSH
22319: LD_INT 70
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22327: LD_VAR 0 6
22331: PPUSH
22332: CALL_OW 264
22336: PUSH
22337: LD_INT 7
22339: PUSH
22340: LD_INT 28
22342: PUSH
22343: LD_INT 45
22345: PUSH
22346: LD_INT 92
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: IN
22355: IFFALSE 22376
// points := [ 35 , 20 , 45 ] ;
22357: LD_ADDR_VAR 0 9
22361: PUSH
22362: LD_INT 35
22364: PUSH
22365: LD_INT 20
22367: PUSH
22368: LD_INT 45
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22376: LD_VAR 0 6
22380: PPUSH
22381: CALL_OW 264
22385: PUSH
22386: LD_INT 47
22388: PUSH
22389: EMPTY
22390: LIST
22391: IN
22392: IFFALSE 22413
// points := [ 67 , 45 , 75 ] ;
22394: LD_ADDR_VAR 0 9
22398: PUSH
22399: LD_INT 67
22401: PUSH
22402: LD_INT 45
22404: PUSH
22405: LD_INT 75
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22413: LD_VAR 0 6
22417: PPUSH
22418: CALL_OW 264
22422: PUSH
22423: LD_INT 26
22425: PUSH
22426: EMPTY
22427: LIST
22428: IN
22429: IFFALSE 22450
// points := [ 120 , 30 , 80 ] ;
22431: LD_ADDR_VAR 0 9
22435: PUSH
22436: LD_INT 120
22438: PUSH
22439: LD_INT 30
22441: PUSH
22442: LD_INT 80
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: LIST
22449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22450: LD_VAR 0 6
22454: PPUSH
22455: CALL_OW 264
22459: PUSH
22460: LD_INT 22
22462: PUSH
22463: EMPTY
22464: LIST
22465: IN
22466: IFFALSE 22487
// points := [ 40 , 1 , 1 ] ;
22468: LD_ADDR_VAR 0 9
22472: PUSH
22473: LD_INT 40
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22487: LD_VAR 0 6
22491: PPUSH
22492: CALL_OW 264
22496: PUSH
22497: LD_INT 29
22499: PUSH
22500: EMPTY
22501: LIST
22502: IN
22503: IFFALSE 22524
// points := [ 70 , 200 , 400 ] ;
22505: LD_ADDR_VAR 0 9
22509: PUSH
22510: LD_INT 70
22512: PUSH
22513: LD_INT 200
22515: PUSH
22516: LD_INT 400
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22524: LD_VAR 0 6
22528: PPUSH
22529: CALL_OW 264
22533: PUSH
22534: LD_INT 14
22536: PUSH
22537: LD_INT 53
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: IN
22544: IFFALSE 22565
// points := [ 40 , 10 , 20 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 40
22553: PUSH
22554: LD_INT 10
22556: PUSH
22557: LD_INT 20
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 264
22574: PUSH
22575: LD_INT 9
22577: PUSH
22578: EMPTY
22579: LIST
22580: IN
22581: IFFALSE 22602
// points := [ 5 , 70 , 20 ] ;
22583: LD_ADDR_VAR 0 9
22587: PUSH
22588: LD_INT 5
22590: PUSH
22591: LD_INT 70
22593: PUSH
22594: LD_INT 20
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22602: LD_VAR 0 6
22606: PPUSH
22607: CALL_OW 264
22611: PUSH
22612: LD_INT 10
22614: PUSH
22615: EMPTY
22616: LIST
22617: IN
22618: IFFALSE 22639
// points := [ 35 , 110 , 70 ] ;
22620: LD_ADDR_VAR 0 9
22624: PUSH
22625: LD_INT 35
22627: PUSH
22628: LD_INT 110
22630: PUSH
22631: LD_INT 70
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22639: LD_VAR 0 6
22643: PPUSH
22644: CALL_OW 265
22648: PUSH
22649: LD_INT 25
22651: EQUAL
22652: IFFALSE 22673
// points := [ 80 , 65 , 100 ] ;
22654: LD_ADDR_VAR 0 9
22658: PUSH
22659: LD_INT 80
22661: PUSH
22662: LD_INT 65
22664: PUSH
22665: LD_INT 100
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22673: LD_VAR 0 6
22677: PPUSH
22678: CALL_OW 263
22682: PUSH
22683: LD_INT 1
22685: EQUAL
22686: IFFALSE 22721
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22688: LD_ADDR_VAR 0 10
22692: PUSH
22693: LD_VAR 0 10
22697: PUSH
22698: LD_VAR 0 6
22702: PPUSH
22703: CALL_OW 311
22707: PPUSH
22708: LD_INT 3
22710: PPUSH
22711: CALL_OW 259
22715: PUSH
22716: LD_INT 4
22718: MUL
22719: MUL
22720: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22721: LD_VAR 0 6
22725: PPUSH
22726: CALL_OW 263
22730: PUSH
22731: LD_INT 2
22733: EQUAL
22734: IFFALSE 22785
// begin j := IsControledBy ( i ) ;
22736: LD_ADDR_VAR 0 7
22740: PUSH
22741: LD_VAR 0 6
22745: PPUSH
22746: CALL_OW 312
22750: ST_TO_ADDR
// if j then
22751: LD_VAR 0 7
22755: IFFALSE 22785
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22757: LD_ADDR_VAR 0 10
22761: PUSH
22762: LD_VAR 0 10
22766: PUSH
22767: LD_VAR 0 7
22771: PPUSH
22772: LD_INT 3
22774: PPUSH
22775: CALL_OW 259
22779: PUSH
22780: LD_INT 3
22782: MUL
22783: MUL
22784: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22785: LD_VAR 0 6
22789: PPUSH
22790: CALL_OW 264
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: LD_INT 46
22803: PUSH
22804: LD_INT 44
22806: PUSH
22807: LD_INT 47
22809: PUSH
22810: LD_INT 45
22812: PUSH
22813: LD_INT 28
22815: PUSH
22816: LD_INT 7
22818: PUSH
22819: LD_INT 27
22821: PUSH
22822: LD_INT 29
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: IN
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: LD_INT 52
22845: PPUSH
22846: CALL_OW 321
22850: PUSH
22851: LD_INT 2
22853: EQUAL
22854: AND
22855: IFFALSE 22872
// bpoints := bpoints * 1.2 ;
22857: LD_ADDR_VAR 0 10
22861: PUSH
22862: LD_VAR 0 10
22866: PUSH
22867: LD_REAL  1.20000000000000E+0000
22870: MUL
22871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22872: LD_VAR 0 6
22876: PPUSH
22877: CALL_OW 264
22881: PUSH
22882: LD_INT 6
22884: PUSH
22885: LD_INT 46
22887: PUSH
22888: LD_INT 47
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: IN
22896: IFFALSE 22913
// bpoints := bpoints * 1.2 ;
22898: LD_ADDR_VAR 0 10
22902: PUSH
22903: LD_VAR 0 10
22907: PUSH
22908: LD_REAL  1.20000000000000E+0000
22911: MUL
22912: ST_TO_ADDR
// end ; unit_building :
22913: GO 22927
22915: LD_INT 3
22917: DOUBLE
22918: EQUAL
22919: IFTRUE 22923
22921: GO 22926
22923: POP
// ; end ;
22924: GO 22927
22926: POP
// for j = 1 to 3 do
22927: LD_ADDR_VAR 0 7
22931: PUSH
22932: DOUBLE
22933: LD_INT 1
22935: DEC
22936: ST_TO_ADDR
22937: LD_INT 3
22939: PUSH
22940: FOR_TO
22941: IFFALSE 22994
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22943: LD_ADDR_VAR 0 5
22947: PUSH
22948: LD_VAR 0 5
22952: PPUSH
22953: LD_VAR 0 7
22957: PPUSH
22958: LD_VAR 0 5
22962: PUSH
22963: LD_VAR 0 7
22967: ARRAY
22968: PUSH
22969: LD_VAR 0 9
22973: PUSH
22974: LD_VAR 0 7
22978: ARRAY
22979: PUSH
22980: LD_VAR 0 10
22984: MUL
22985: PLUS
22986: PPUSH
22987: CALL_OW 1
22991: ST_TO_ADDR
22992: GO 22940
22994: POP
22995: POP
// end ;
22996: GO 21475
22998: POP
22999: POP
// result := Replace ( result , 4 , tmp ) ;
23000: LD_ADDR_VAR 0 5
23004: PUSH
23005: LD_VAR 0 5
23009: PPUSH
23010: LD_INT 4
23012: PPUSH
23013: LD_VAR 0 8
23017: PPUSH
23018: CALL_OW 1
23022: ST_TO_ADDR
// end ;
23023: LD_VAR 0 5
23027: RET
// export function DangerAtRange ( unit , range ) ; begin
23028: LD_INT 0
23030: PPUSH
// if not unit then
23031: LD_VAR 0 1
23035: NOT
23036: IFFALSE 23040
// exit ;
23038: GO 23085
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 255
23054: PPUSH
23055: LD_VAR 0 1
23059: PPUSH
23060: CALL_OW 250
23064: PPUSH
23065: LD_VAR 0 1
23069: PPUSH
23070: CALL_OW 251
23074: PPUSH
23075: LD_VAR 0 2
23079: PPUSH
23080: CALL 21327 0 4
23084: ST_TO_ADDR
// end ;
23085: LD_VAR 0 3
23089: RET
// export function DangerInArea ( side , area ) ; begin
23090: LD_INT 0
23092: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_VAR 0 2
23102: PPUSH
23103: LD_INT 81
23105: PUSH
23106: LD_VAR 0 1
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PPUSH
23115: CALL_OW 70
23119: ST_TO_ADDR
// end ;
23120: LD_VAR 0 3
23124: RET
// export function IsExtension ( b ) ; begin
23125: LD_INT 0
23127: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23128: LD_ADDR_VAR 0 2
23132: PUSH
23133: LD_VAR 0 1
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: LD_INT 20
23143: PUSH
23144: LD_INT 22
23146: PUSH
23147: LD_INT 17
23149: PUSH
23150: LD_INT 24
23152: PUSH
23153: LD_INT 21
23155: PUSH
23156: LD_INT 19
23158: PUSH
23159: LD_INT 16
23161: PUSH
23162: LD_INT 25
23164: PUSH
23165: LD_INT 18
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: IN
23180: ST_TO_ADDR
// end ;
23181: LD_VAR 0 2
23185: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23186: LD_INT 0
23188: PPUSH
23189: PPUSH
23190: PPUSH
// result := [ ] ;
23191: LD_ADDR_VAR 0 4
23195: PUSH
23196: EMPTY
23197: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23198: LD_ADDR_VAR 0 5
23202: PUSH
23203: LD_VAR 0 2
23207: PPUSH
23208: LD_INT 21
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 70
23222: ST_TO_ADDR
// if not tmp then
23223: LD_VAR 0 5
23227: NOT
23228: IFFALSE 23232
// exit ;
23230: GO 23296
// if checkLink then
23232: LD_VAR 0 3
23236: IFFALSE 23286
// begin for i in tmp do
23238: LD_ADDR_VAR 0 6
23242: PUSH
23243: LD_VAR 0 5
23247: PUSH
23248: FOR_IN
23249: IFFALSE 23284
// if GetBase ( i ) <> base then
23251: LD_VAR 0 6
23255: PPUSH
23256: CALL_OW 274
23260: PUSH
23261: LD_VAR 0 1
23265: NONEQUAL
23266: IFFALSE 23282
// ComLinkToBase ( base , i ) ;
23268: LD_VAR 0 1
23272: PPUSH
23273: LD_VAR 0 6
23277: PPUSH
23278: CALL_OW 169
23282: GO 23248
23284: POP
23285: POP
// end ; result := tmp ;
23286: LD_ADDR_VAR 0 4
23290: PUSH
23291: LD_VAR 0 5
23295: ST_TO_ADDR
// end ;
23296: LD_VAR 0 4
23300: RET
// export function ComComplete ( units , b ) ; var i ; begin
23301: LD_INT 0
23303: PPUSH
23304: PPUSH
// if not units then
23305: LD_VAR 0 1
23309: NOT
23310: IFFALSE 23314
// exit ;
23312: GO 23404
// for i in units do
23314: LD_ADDR_VAR 0 4
23318: PUSH
23319: LD_VAR 0 1
23323: PUSH
23324: FOR_IN
23325: IFFALSE 23402
// if BuildingStatus ( b ) = bs_build then
23327: LD_VAR 0 2
23331: PPUSH
23332: CALL_OW 461
23336: PUSH
23337: LD_INT 1
23339: EQUAL
23340: IFFALSE 23400
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23342: LD_VAR 0 4
23346: PPUSH
23347: LD_STRING h
23349: PUSH
23350: LD_VAR 0 2
23354: PPUSH
23355: CALL_OW 250
23359: PUSH
23360: LD_VAR 0 2
23364: PPUSH
23365: CALL_OW 251
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: PPUSH
23396: CALL_OW 446
23400: GO 23324
23402: POP
23403: POP
// end ;
23404: LD_VAR 0 3
23408: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23409: LD_INT 0
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23417: LD_VAR 0 1
23421: NOT
23422: PUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 263
23432: PUSH
23433: LD_INT 2
23435: NONEQUAL
23436: OR
23437: IFFALSE 23441
// exit ;
23439: GO 23757
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23441: LD_ADDR_VAR 0 6
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 255
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: LD_INT 36
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 34
23478: PUSH
23479: LD_INT 31
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 69
23499: ST_TO_ADDR
// if not tmp then
23500: LD_VAR 0 6
23504: NOT
23505: IFFALSE 23509
// exit ;
23507: GO 23757
// result := [ ] ;
23509: LD_ADDR_VAR 0 2
23513: PUSH
23514: EMPTY
23515: ST_TO_ADDR
// for i in tmp do
23516: LD_ADDR_VAR 0 3
23520: PUSH
23521: LD_VAR 0 6
23525: PUSH
23526: FOR_IN
23527: IFFALSE 23598
// begin t := UnitsInside ( i ) ;
23529: LD_ADDR_VAR 0 4
23533: PUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: CALL_OW 313
23543: ST_TO_ADDR
// if t then
23544: LD_VAR 0 4
23548: IFFALSE 23596
// for j in t do
23550: LD_ADDR_VAR 0 7
23554: PUSH
23555: LD_VAR 0 4
23559: PUSH
23560: FOR_IN
23561: IFFALSE 23594
// result := Replace ( result , result + 1 , j ) ;
23563: LD_ADDR_VAR 0 2
23567: PUSH
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 2
23577: PUSH
23578: LD_INT 1
23580: PLUS
23581: PPUSH
23582: LD_VAR 0 7
23586: PPUSH
23587: CALL_OW 1
23591: ST_TO_ADDR
23592: GO 23560
23594: POP
23595: POP
// end ;
23596: GO 23526
23598: POP
23599: POP
// if not result then
23600: LD_VAR 0 2
23604: NOT
23605: IFFALSE 23609
// exit ;
23607: GO 23757
// mech := result [ 1 ] ;
23609: LD_ADDR_VAR 0 5
23613: PUSH
23614: LD_VAR 0 2
23618: PUSH
23619: LD_INT 1
23621: ARRAY
23622: ST_TO_ADDR
// if result > 1 then
23623: LD_VAR 0 2
23627: PUSH
23628: LD_INT 1
23630: GREATER
23631: IFFALSE 23743
// begin for i = 2 to result do
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: DOUBLE
23639: LD_INT 2
23641: DEC
23642: ST_TO_ADDR
23643: LD_VAR 0 2
23647: PUSH
23648: FOR_TO
23649: IFFALSE 23741
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23651: LD_ADDR_VAR 0 4
23655: PUSH
23656: LD_VAR 0 2
23660: PUSH
23661: LD_VAR 0 3
23665: ARRAY
23666: PPUSH
23667: LD_INT 3
23669: PPUSH
23670: CALL_OW 259
23674: PUSH
23675: LD_VAR 0 2
23679: PUSH
23680: LD_VAR 0 3
23684: ARRAY
23685: PPUSH
23686: CALL_OW 432
23690: MINUS
23691: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23692: LD_VAR 0 4
23696: PUSH
23697: LD_VAR 0 5
23701: PPUSH
23702: LD_INT 3
23704: PPUSH
23705: CALL_OW 259
23709: PUSH
23710: LD_VAR 0 5
23714: PPUSH
23715: CALL_OW 432
23719: MINUS
23720: GREATEREQUAL
23721: IFFALSE 23739
// mech := result [ i ] ;
23723: LD_ADDR_VAR 0 5
23727: PUSH
23728: LD_VAR 0 2
23732: PUSH
23733: LD_VAR 0 3
23737: ARRAY
23738: ST_TO_ADDR
// end ;
23739: GO 23648
23741: POP
23742: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_VAR 0 5
23752: PPUSH
23753: CALL_OW 135
// end ;
23757: LD_VAR 0 2
23761: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23762: LD_INT 0
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
// result := [ ] ;
23777: LD_ADDR_VAR 0 7
23781: PUSH
23782: EMPTY
23783: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23784: LD_VAR 0 1
23788: PPUSH
23789: CALL_OW 266
23793: PUSH
23794: LD_INT 0
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: IN
23804: NOT
23805: IFFALSE 23809
// exit ;
23807: GO 25443
// if name then
23809: LD_VAR 0 3
23813: IFFALSE 23829
// SetBName ( base_dep , name ) ;
23815: LD_VAR 0 1
23819: PPUSH
23820: LD_VAR 0 3
23824: PPUSH
23825: CALL_OW 500
// base := GetBase ( base_dep ) ;
23829: LD_ADDR_VAR 0 15
23833: PUSH
23834: LD_VAR 0 1
23838: PPUSH
23839: CALL_OW 274
23843: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23844: LD_ADDR_VAR 0 16
23848: PUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 255
23858: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23859: LD_ADDR_VAR 0 17
23863: PUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 248
23873: ST_TO_ADDR
// if sources then
23874: LD_VAR 0 5
23878: IFFALSE 23925
// for i = 1 to 3 do
23880: LD_ADDR_VAR 0 8
23884: PUSH
23885: DOUBLE
23886: LD_INT 1
23888: DEC
23889: ST_TO_ADDR
23890: LD_INT 3
23892: PUSH
23893: FOR_TO
23894: IFFALSE 23923
// AddResourceType ( base , i , sources [ i ] ) ;
23896: LD_VAR 0 15
23900: PPUSH
23901: LD_VAR 0 8
23905: PPUSH
23906: LD_VAR 0 5
23910: PUSH
23911: LD_VAR 0 8
23915: ARRAY
23916: PPUSH
23917: CALL_OW 276
23921: GO 23893
23923: POP
23924: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23925: LD_ADDR_VAR 0 18
23929: PUSH
23930: LD_VAR 0 15
23934: PPUSH
23935: LD_VAR 0 2
23939: PPUSH
23940: LD_INT 1
23942: PPUSH
23943: CALL 23186 0 3
23947: ST_TO_ADDR
// InitHc ;
23948: CALL_OW 19
// InitUc ;
23952: CALL_OW 18
// uc_side := side ;
23956: LD_ADDR_OWVAR 20
23960: PUSH
23961: LD_VAR 0 16
23965: ST_TO_ADDR
// uc_nation := nation ;
23966: LD_ADDR_OWVAR 21
23970: PUSH
23971: LD_VAR 0 17
23975: ST_TO_ADDR
// if buildings then
23976: LD_VAR 0 18
23980: IFFALSE 25302
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23982: LD_ADDR_VAR 0 19
23986: PUSH
23987: LD_VAR 0 18
23991: PPUSH
23992: LD_INT 2
23994: PUSH
23995: LD_INT 30
23997: PUSH
23998: LD_INT 29
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 30
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: PPUSH
24020: CALL_OW 72
24024: ST_TO_ADDR
// if tmp then
24025: LD_VAR 0 19
24029: IFFALSE 24077
// for i in tmp do
24031: LD_ADDR_VAR 0 8
24035: PUSH
24036: LD_VAR 0 19
24040: PUSH
24041: FOR_IN
24042: IFFALSE 24075
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24044: LD_VAR 0 8
24048: PPUSH
24049: CALL_OW 250
24053: PPUSH
24054: LD_VAR 0 8
24058: PPUSH
24059: CALL_OW 251
24063: PPUSH
24064: LD_VAR 0 16
24068: PPUSH
24069: CALL_OW 441
24073: GO 24041
24075: POP
24076: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24077: LD_VAR 0 18
24081: PPUSH
24082: LD_INT 2
24084: PUSH
24085: LD_INT 30
24087: PUSH
24088: LD_INT 32
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 33
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: PPUSH
24110: CALL_OW 72
24114: IFFALSE 24202
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24116: LD_ADDR_VAR 0 8
24120: PUSH
24121: LD_VAR 0 18
24125: PPUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 30
24131: PUSH
24132: LD_INT 32
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 30
24141: PUSH
24142: LD_INT 33
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 72
24158: PUSH
24159: FOR_IN
24160: IFFALSE 24200
// begin if not GetBWeapon ( i ) then
24162: LD_VAR 0 8
24166: PPUSH
24167: CALL_OW 269
24171: NOT
24172: IFFALSE 24198
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24174: LD_VAR 0 8
24178: PPUSH
24179: LD_VAR 0 8
24183: PPUSH
24184: LD_VAR 0 2
24188: PPUSH
24189: CALL 25448 0 2
24193: PPUSH
24194: CALL_OW 431
// end ;
24198: GO 24159
24200: POP
24201: POP
// end ; for i = 1 to personel do
24202: LD_ADDR_VAR 0 8
24206: PUSH
24207: DOUBLE
24208: LD_INT 1
24210: DEC
24211: ST_TO_ADDR
24212: LD_VAR 0 6
24216: PUSH
24217: FOR_TO
24218: IFFALSE 25282
// begin if i > 4 then
24220: LD_VAR 0 8
24224: PUSH
24225: LD_INT 4
24227: GREATER
24228: IFFALSE 24232
// break ;
24230: GO 25282
// case i of 1 :
24232: LD_VAR 0 8
24236: PUSH
24237: LD_INT 1
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24325
24245: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24246: LD_ADDR_VAR 0 12
24250: PUSH
24251: LD_VAR 0 18
24255: PPUSH
24256: LD_INT 22
24258: PUSH
24259: LD_VAR 0 16
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 58
24270: PUSH
24271: EMPTY
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 32
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 4
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 30
24299: PUSH
24300: LD_INT 5
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: PPUSH
24318: CALL_OW 72
24322: ST_TO_ADDR
24323: GO 24547
24325: LD_INT 2
24327: DOUBLE
24328: EQUAL
24329: IFTRUE 24333
24331: GO 24395
24333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24334: LD_ADDR_VAR 0 12
24338: PUSH
24339: LD_VAR 0 18
24343: PPUSH
24344: LD_INT 22
24346: PUSH
24347: LD_VAR 0 16
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: LD_INT 30
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 30
24371: PUSH
24372: LD_INT 1
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 72
24392: ST_TO_ADDR
24393: GO 24547
24395: LD_INT 3
24397: DOUBLE
24398: EQUAL
24399: IFTRUE 24403
24401: GO 24465
24403: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24404: LD_ADDR_VAR 0 12
24408: PUSH
24409: LD_VAR 0 18
24413: PPUSH
24414: LD_INT 22
24416: PUSH
24417: LD_VAR 0 16
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: LD_INT 30
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 30
24441: PUSH
24442: LD_INT 3
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 72
24462: ST_TO_ADDR
24463: GO 24547
24465: LD_INT 4
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24546
24473: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24474: LD_ADDR_VAR 0 12
24478: PUSH
24479: LD_VAR 0 18
24483: PPUSH
24484: LD_INT 22
24486: PUSH
24487: LD_VAR 0 16
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 30
24501: PUSH
24502: LD_INT 6
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 30
24511: PUSH
24512: LD_INT 7
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 30
24521: PUSH
24522: LD_INT 8
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PPUSH
24539: CALL_OW 72
24543: ST_TO_ADDR
24544: GO 24547
24546: POP
// if i = 1 then
24547: LD_VAR 0 8
24551: PUSH
24552: LD_INT 1
24554: EQUAL
24555: IFFALSE 24666
// begin tmp := [ ] ;
24557: LD_ADDR_VAR 0 19
24561: PUSH
24562: EMPTY
24563: ST_TO_ADDR
// for j in f do
24564: LD_ADDR_VAR 0 9
24568: PUSH
24569: LD_VAR 0 12
24573: PUSH
24574: FOR_IN
24575: IFFALSE 24648
// if GetBType ( j ) = b_bunker then
24577: LD_VAR 0 9
24581: PPUSH
24582: CALL_OW 266
24586: PUSH
24587: LD_INT 32
24589: EQUAL
24590: IFFALSE 24617
// tmp := Insert ( tmp , 1 , j ) else
24592: LD_ADDR_VAR 0 19
24596: PUSH
24597: LD_VAR 0 19
24601: PPUSH
24602: LD_INT 1
24604: PPUSH
24605: LD_VAR 0 9
24609: PPUSH
24610: CALL_OW 2
24614: ST_TO_ADDR
24615: GO 24646
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24617: LD_ADDR_VAR 0 19
24621: PUSH
24622: LD_VAR 0 19
24626: PPUSH
24627: LD_VAR 0 19
24631: PUSH
24632: LD_INT 1
24634: PLUS
24635: PPUSH
24636: LD_VAR 0 9
24640: PPUSH
24641: CALL_OW 2
24645: ST_TO_ADDR
24646: GO 24574
24648: POP
24649: POP
// if tmp then
24650: LD_VAR 0 19
24654: IFFALSE 24666
// f := tmp ;
24656: LD_ADDR_VAR 0 12
24660: PUSH
24661: LD_VAR 0 19
24665: ST_TO_ADDR
// end ; x := personel [ i ] ;
24666: LD_ADDR_VAR 0 13
24670: PUSH
24671: LD_VAR 0 6
24675: PUSH
24676: LD_VAR 0 8
24680: ARRAY
24681: ST_TO_ADDR
// if x = - 1 then
24682: LD_VAR 0 13
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: EQUAL
24691: IFFALSE 24900
// begin for j in f do
24693: LD_ADDR_VAR 0 9
24697: PUSH
24698: LD_VAR 0 12
24702: PUSH
24703: FOR_IN
24704: IFFALSE 24896
// repeat InitHc ;
24706: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24710: LD_VAR 0 9
24714: PPUSH
24715: CALL_OW 266
24719: PUSH
24720: LD_INT 5
24722: EQUAL
24723: IFFALSE 24793
// begin if UnitsInside ( j ) < 3 then
24725: LD_VAR 0 9
24729: PPUSH
24730: CALL_OW 313
24734: PUSH
24735: LD_INT 3
24737: LESS
24738: IFFALSE 24774
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24740: LD_INT 0
24742: PPUSH
24743: LD_INT 5
24745: PUSH
24746: LD_INT 8
24748: PUSH
24749: LD_INT 9
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: PUSH
24757: LD_VAR 0 17
24761: ARRAY
24762: PPUSH
24763: LD_VAR 0 4
24767: PPUSH
24768: CALL_OW 380
24772: GO 24791
// PrepareHuman ( false , i , skill ) ;
24774: LD_INT 0
24776: PPUSH
24777: LD_VAR 0 8
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: CALL_OW 380
// end else
24791: GO 24810
// PrepareHuman ( false , i , skill ) ;
24793: LD_INT 0
24795: PPUSH
24796: LD_VAR 0 8
24800: PPUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: CALL_OW 380
// un := CreateHuman ;
24810: LD_ADDR_VAR 0 14
24814: PUSH
24815: CALL_OW 44
24819: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24820: LD_ADDR_VAR 0 7
24824: PUSH
24825: LD_VAR 0 7
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: LD_VAR 0 14
24837: PPUSH
24838: CALL_OW 2
24842: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24843: LD_VAR 0 14
24847: PPUSH
24848: LD_VAR 0 9
24852: PPUSH
24853: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24857: LD_VAR 0 9
24861: PPUSH
24862: CALL_OW 313
24866: PUSH
24867: LD_INT 6
24869: EQUAL
24870: PUSH
24871: LD_VAR 0 9
24875: PPUSH
24876: CALL_OW 266
24880: PUSH
24881: LD_INT 32
24883: PUSH
24884: LD_INT 31
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: IN
24891: OR
24892: IFFALSE 24706
24894: GO 24703
24896: POP
24897: POP
// end else
24898: GO 25280
// for j = 1 to x do
24900: LD_ADDR_VAR 0 9
24904: PUSH
24905: DOUBLE
24906: LD_INT 1
24908: DEC
24909: ST_TO_ADDR
24910: LD_VAR 0 13
24914: PUSH
24915: FOR_TO
24916: IFFALSE 25278
// begin InitHc ;
24918: CALL_OW 19
// if not f then
24922: LD_VAR 0 12
24926: NOT
24927: IFFALSE 25016
// begin PrepareHuman ( false , i , skill ) ;
24929: LD_INT 0
24931: PPUSH
24932: LD_VAR 0 8
24936: PPUSH
24937: LD_VAR 0 4
24941: PPUSH
24942: CALL_OW 380
// un := CreateHuman ;
24946: LD_ADDR_VAR 0 14
24950: PUSH
24951: CALL_OW 44
24955: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24956: LD_ADDR_VAR 0 7
24960: PUSH
24961: LD_VAR 0 7
24965: PPUSH
24966: LD_INT 1
24968: PPUSH
24969: LD_VAR 0 14
24973: PPUSH
24974: CALL_OW 2
24978: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24979: LD_VAR 0 14
24983: PPUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 250
24993: PPUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 251
25003: PPUSH
25004: LD_INT 10
25006: PPUSH
25007: LD_INT 0
25009: PPUSH
25010: CALL_OW 50
// continue ;
25014: GO 24915
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25016: LD_VAR 0 12
25020: PUSH
25021: LD_INT 1
25023: ARRAY
25024: PPUSH
25025: CALL_OW 313
25029: PUSH
25030: LD_VAR 0 12
25034: PUSH
25035: LD_INT 1
25037: ARRAY
25038: PPUSH
25039: CALL_OW 266
25043: PUSH
25044: LD_INT 32
25046: PUSH
25047: LD_INT 31
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: IN
25054: AND
25055: PUSH
25056: LD_VAR 0 12
25060: PUSH
25061: LD_INT 1
25063: ARRAY
25064: PPUSH
25065: CALL_OW 313
25069: PUSH
25070: LD_INT 6
25072: EQUAL
25073: OR
25074: IFFALSE 25094
// f := Delete ( f , 1 ) ;
25076: LD_ADDR_VAR 0 12
25080: PUSH
25081: LD_VAR 0 12
25085: PPUSH
25086: LD_INT 1
25088: PPUSH
25089: CALL_OW 3
25093: ST_TO_ADDR
// if not f then
25094: LD_VAR 0 12
25098: NOT
25099: IFFALSE 25117
// begin x := x + 2 ;
25101: LD_ADDR_VAR 0 13
25105: PUSH
25106: LD_VAR 0 13
25110: PUSH
25111: LD_INT 2
25113: PLUS
25114: ST_TO_ADDR
// continue ;
25115: GO 24915
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25117: LD_VAR 0 12
25121: PUSH
25122: LD_INT 1
25124: ARRAY
25125: PPUSH
25126: CALL_OW 266
25130: PUSH
25131: LD_INT 5
25133: EQUAL
25134: IFFALSE 25208
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25136: LD_VAR 0 12
25140: PUSH
25141: LD_INT 1
25143: ARRAY
25144: PPUSH
25145: CALL_OW 313
25149: PUSH
25150: LD_INT 3
25152: LESS
25153: IFFALSE 25189
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25155: LD_INT 0
25157: PPUSH
25158: LD_INT 5
25160: PUSH
25161: LD_INT 8
25163: PUSH
25164: LD_INT 9
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: PUSH
25172: LD_VAR 0 17
25176: ARRAY
25177: PPUSH
25178: LD_VAR 0 4
25182: PPUSH
25183: CALL_OW 380
25187: GO 25206
// PrepareHuman ( false , i , skill ) ;
25189: LD_INT 0
25191: PPUSH
25192: LD_VAR 0 8
25196: PPUSH
25197: LD_VAR 0 4
25201: PPUSH
25202: CALL_OW 380
// end else
25206: GO 25225
// PrepareHuman ( false , i , skill ) ;
25208: LD_INT 0
25210: PPUSH
25211: LD_VAR 0 8
25215: PPUSH
25216: LD_VAR 0 4
25220: PPUSH
25221: CALL_OW 380
// un := CreateHuman ;
25225: LD_ADDR_VAR 0 14
25229: PUSH
25230: CALL_OW 44
25234: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25235: LD_ADDR_VAR 0 7
25239: PUSH
25240: LD_VAR 0 7
25244: PPUSH
25245: LD_INT 1
25247: PPUSH
25248: LD_VAR 0 14
25252: PPUSH
25253: CALL_OW 2
25257: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25258: LD_VAR 0 14
25262: PPUSH
25263: LD_VAR 0 12
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: PPUSH
25272: CALL_OW 52
// end ;
25276: GO 24915
25278: POP
25279: POP
// end ;
25280: GO 24217
25282: POP
25283: POP
// result := result ^ buildings ;
25284: LD_ADDR_VAR 0 7
25288: PUSH
25289: LD_VAR 0 7
25293: PUSH
25294: LD_VAR 0 18
25298: ADD
25299: ST_TO_ADDR
// end else
25300: GO 25443
// begin for i = 1 to personel do
25302: LD_ADDR_VAR 0 8
25306: PUSH
25307: DOUBLE
25308: LD_INT 1
25310: DEC
25311: ST_TO_ADDR
25312: LD_VAR 0 6
25316: PUSH
25317: FOR_TO
25318: IFFALSE 25441
// begin if i > 4 then
25320: LD_VAR 0 8
25324: PUSH
25325: LD_INT 4
25327: GREATER
25328: IFFALSE 25332
// break ;
25330: GO 25441
// x := personel [ i ] ;
25332: LD_ADDR_VAR 0 13
25336: PUSH
25337: LD_VAR 0 6
25341: PUSH
25342: LD_VAR 0 8
25346: ARRAY
25347: ST_TO_ADDR
// if x = - 1 then
25348: LD_VAR 0 13
25352: PUSH
25353: LD_INT 1
25355: NEG
25356: EQUAL
25357: IFFALSE 25361
// continue ;
25359: GO 25317
// PrepareHuman ( false , i , skill ) ;
25361: LD_INT 0
25363: PPUSH
25364: LD_VAR 0 8
25368: PPUSH
25369: LD_VAR 0 4
25373: PPUSH
25374: CALL_OW 380
// un := CreateHuman ;
25378: LD_ADDR_VAR 0 14
25382: PUSH
25383: CALL_OW 44
25387: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25388: LD_VAR 0 14
25392: PPUSH
25393: LD_VAR 0 1
25397: PPUSH
25398: CALL_OW 250
25402: PPUSH
25403: LD_VAR 0 1
25407: PPUSH
25408: CALL_OW 251
25412: PPUSH
25413: LD_INT 10
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 50
// result := result ^ un ;
25423: LD_ADDR_VAR 0 7
25427: PUSH
25428: LD_VAR 0 7
25432: PUSH
25433: LD_VAR 0 14
25437: ADD
25438: ST_TO_ADDR
// end ;
25439: GO 25317
25441: POP
25442: POP
// end ; end ;
25443: LD_VAR 0 7
25447: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25448: LD_INT 0
25450: PPUSH
25451: PPUSH
25452: PPUSH
25453: PPUSH
25454: PPUSH
25455: PPUSH
25456: PPUSH
25457: PPUSH
25458: PPUSH
25459: PPUSH
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
// result := false ;
25466: LD_ADDR_VAR 0 3
25470: PUSH
25471: LD_INT 0
25473: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25474: LD_VAR 0 1
25478: NOT
25479: PUSH
25480: LD_VAR 0 1
25484: PPUSH
25485: CALL_OW 266
25489: PUSH
25490: LD_INT 32
25492: PUSH
25493: LD_INT 33
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: IN
25500: NOT
25501: OR
25502: IFFALSE 25506
// exit ;
25504: GO 26615
// nat := GetNation ( tower ) ;
25506: LD_ADDR_VAR 0 12
25510: PUSH
25511: LD_VAR 0 1
25515: PPUSH
25516: CALL_OW 248
25520: ST_TO_ADDR
// side := GetSide ( tower ) ;
25521: LD_ADDR_VAR 0 16
25525: PUSH
25526: LD_VAR 0 1
25530: PPUSH
25531: CALL_OW 255
25535: ST_TO_ADDR
// x := GetX ( tower ) ;
25536: LD_ADDR_VAR 0 10
25540: PUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 250
25550: ST_TO_ADDR
// y := GetY ( tower ) ;
25551: LD_ADDR_VAR 0 11
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 251
25565: ST_TO_ADDR
// if not x or not y then
25566: LD_VAR 0 10
25570: NOT
25571: PUSH
25572: LD_VAR 0 11
25576: NOT
25577: OR
25578: IFFALSE 25582
// exit ;
25580: GO 26615
// weapon := 0 ;
25582: LD_ADDR_VAR 0 18
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
// fac_list := [ ] ;
25590: LD_ADDR_VAR 0 17
25594: PUSH
25595: EMPTY
25596: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25597: LD_ADDR_VAR 0 6
25601: PUSH
25602: LD_VAR 0 1
25606: PPUSH
25607: CALL_OW 274
25611: PPUSH
25612: LD_VAR 0 2
25616: PPUSH
25617: LD_INT 0
25619: PPUSH
25620: CALL 23186 0 3
25624: PPUSH
25625: LD_INT 30
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 72
25639: ST_TO_ADDR
// if not factories then
25640: LD_VAR 0 6
25644: NOT
25645: IFFALSE 25649
// exit ;
25647: GO 26615
// for i in factories do
25649: LD_ADDR_VAR 0 8
25653: PUSH
25654: LD_VAR 0 6
25658: PUSH
25659: FOR_IN
25660: IFFALSE 25685
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25662: LD_ADDR_VAR 0 17
25666: PUSH
25667: LD_VAR 0 17
25671: PUSH
25672: LD_VAR 0 8
25676: PPUSH
25677: CALL_OW 478
25681: UNION
25682: ST_TO_ADDR
25683: GO 25659
25685: POP
25686: POP
// if not fac_list then
25687: LD_VAR 0 17
25691: NOT
25692: IFFALSE 25696
// exit ;
25694: GO 26615
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25696: LD_ADDR_VAR 0 5
25700: PUSH
25701: LD_INT 4
25703: PUSH
25704: LD_INT 5
25706: PUSH
25707: LD_INT 9
25709: PUSH
25710: LD_INT 10
25712: PUSH
25713: LD_INT 6
25715: PUSH
25716: LD_INT 7
25718: PUSH
25719: LD_INT 11
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 27
25733: PUSH
25734: LD_INT 28
25736: PUSH
25737: LD_INT 26
25739: PUSH
25740: LD_INT 30
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 43
25751: PUSH
25752: LD_INT 44
25754: PUSH
25755: LD_INT 46
25757: PUSH
25758: LD_INT 45
25760: PUSH
25761: LD_INT 47
25763: PUSH
25764: LD_INT 49
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PUSH
25780: LD_VAR 0 12
25784: ARRAY
25785: ST_TO_ADDR
// list := list isect fac_list ;
25786: LD_ADDR_VAR 0 5
25790: PUSH
25791: LD_VAR 0 5
25795: PUSH
25796: LD_VAR 0 17
25800: ISECT
25801: ST_TO_ADDR
// if not list then
25802: LD_VAR 0 5
25806: NOT
25807: IFFALSE 25811
// exit ;
25809: GO 26615
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25811: LD_VAR 0 12
25815: PUSH
25816: LD_INT 3
25818: EQUAL
25819: PUSH
25820: LD_INT 49
25822: PUSH
25823: LD_VAR 0 5
25827: IN
25828: AND
25829: PUSH
25830: LD_INT 31
25832: PPUSH
25833: LD_VAR 0 16
25837: PPUSH
25838: CALL_OW 321
25842: PUSH
25843: LD_INT 2
25845: EQUAL
25846: AND
25847: IFFALSE 25907
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25849: LD_INT 22
25851: PUSH
25852: LD_VAR 0 16
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 35
25863: PUSH
25864: LD_INT 49
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 91
25873: PUSH
25874: LD_VAR 0 1
25878: PUSH
25879: LD_INT 10
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 69
25896: NOT
25897: IFFALSE 25907
// weapon := ru_time_lapser ;
25899: LD_ADDR_VAR 0 18
25903: PUSH
25904: LD_INT 49
25906: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25907: LD_VAR 0 12
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: IN
25922: PUSH
25923: LD_INT 11
25925: PUSH
25926: LD_VAR 0 5
25930: IN
25931: PUSH
25932: LD_INT 30
25934: PUSH
25935: LD_VAR 0 5
25939: IN
25940: OR
25941: AND
25942: PUSH
25943: LD_INT 6
25945: PPUSH
25946: LD_VAR 0 16
25950: PPUSH
25951: CALL_OW 321
25955: PUSH
25956: LD_INT 2
25958: EQUAL
25959: AND
25960: IFFALSE 26125
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25962: LD_INT 22
25964: PUSH
25965: LD_VAR 0 16
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 35
25979: PUSH
25980: LD_INT 11
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 35
25989: PUSH
25990: LD_INT 30
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 91
26004: PUSH
26005: LD_VAR 0 1
26009: PUSH
26010: LD_INT 18
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: PPUSH
26023: CALL_OW 69
26027: NOT
26028: PUSH
26029: LD_INT 22
26031: PUSH
26032: LD_VAR 0 16
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 30
26046: PUSH
26047: LD_INT 32
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 30
26056: PUSH
26057: LD_INT 33
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 91
26071: PUSH
26072: LD_VAR 0 1
26076: PUSH
26077: LD_INT 12
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: PPUSH
26093: CALL_OW 69
26097: PUSH
26098: LD_INT 2
26100: GREATER
26101: AND
26102: IFFALSE 26125
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26104: LD_ADDR_VAR 0 18
26108: PUSH
26109: LD_INT 11
26111: PUSH
26112: LD_INT 30
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_VAR 0 12
26123: ARRAY
26124: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26125: LD_VAR 0 18
26129: NOT
26130: PUSH
26131: LD_INT 40
26133: PPUSH
26134: LD_VAR 0 16
26138: PPUSH
26139: CALL_OW 321
26143: PUSH
26144: LD_INT 2
26146: EQUAL
26147: AND
26148: PUSH
26149: LD_INT 7
26151: PUSH
26152: LD_VAR 0 5
26156: IN
26157: PUSH
26158: LD_INT 28
26160: PUSH
26161: LD_VAR 0 5
26165: IN
26166: OR
26167: PUSH
26168: LD_INT 45
26170: PUSH
26171: LD_VAR 0 5
26175: IN
26176: OR
26177: AND
26178: IFFALSE 26432
// begin hex := GetHexInfo ( x , y ) ;
26180: LD_ADDR_VAR 0 4
26184: PUSH
26185: LD_VAR 0 10
26189: PPUSH
26190: LD_VAR 0 11
26194: PPUSH
26195: CALL_OW 546
26199: ST_TO_ADDR
// if hex [ 1 ] then
26200: LD_VAR 0 4
26204: PUSH
26205: LD_INT 1
26207: ARRAY
26208: IFFALSE 26212
// exit ;
26210: GO 26615
// height := hex [ 2 ] ;
26212: LD_ADDR_VAR 0 15
26216: PUSH
26217: LD_VAR 0 4
26221: PUSH
26222: LD_INT 2
26224: ARRAY
26225: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26226: LD_ADDR_VAR 0 14
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: LD_INT 5
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: ST_TO_ADDR
// for i in tmp do
26249: LD_ADDR_VAR 0 8
26253: PUSH
26254: LD_VAR 0 14
26258: PUSH
26259: FOR_IN
26260: IFFALSE 26430
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26262: LD_ADDR_VAR 0 9
26266: PUSH
26267: LD_VAR 0 10
26271: PPUSH
26272: LD_VAR 0 8
26276: PPUSH
26277: LD_INT 5
26279: PPUSH
26280: CALL_OW 272
26284: PUSH
26285: LD_VAR 0 11
26289: PPUSH
26290: LD_VAR 0 8
26294: PPUSH
26295: LD_INT 5
26297: PPUSH
26298: CALL_OW 273
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26307: LD_VAR 0 9
26311: PUSH
26312: LD_INT 1
26314: ARRAY
26315: PPUSH
26316: LD_VAR 0 9
26320: PUSH
26321: LD_INT 2
26323: ARRAY
26324: PPUSH
26325: CALL_OW 488
26329: IFFALSE 26428
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26331: LD_ADDR_VAR 0 4
26335: PUSH
26336: LD_VAR 0 9
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 9
26349: PUSH
26350: LD_INT 2
26352: ARRAY
26353: PPUSH
26354: CALL_OW 546
26358: ST_TO_ADDR
// if hex [ 1 ] then
26359: LD_VAR 0 4
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: IFFALSE 26371
// continue ;
26369: GO 26259
// h := hex [ 2 ] ;
26371: LD_ADDR_VAR 0 13
26375: PUSH
26376: LD_VAR 0 4
26380: PUSH
26381: LD_INT 2
26383: ARRAY
26384: ST_TO_ADDR
// if h + 7 < height then
26385: LD_VAR 0 13
26389: PUSH
26390: LD_INT 7
26392: PLUS
26393: PUSH
26394: LD_VAR 0 15
26398: LESS
26399: IFFALSE 26428
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26401: LD_ADDR_VAR 0 18
26405: PUSH
26406: LD_INT 7
26408: PUSH
26409: LD_INT 28
26411: PUSH
26412: LD_INT 45
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: PUSH
26420: LD_VAR 0 12
26424: ARRAY
26425: ST_TO_ADDR
// break ;
26426: GO 26430
// end ; end ; end ;
26428: GO 26259
26430: POP
26431: POP
// end ; if not weapon then
26432: LD_VAR 0 18
26436: NOT
26437: IFFALSE 26497
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26439: LD_ADDR_VAR 0 5
26443: PUSH
26444: LD_VAR 0 5
26448: PUSH
26449: LD_INT 11
26451: PUSH
26452: LD_INT 30
26454: PUSH
26455: LD_INT 49
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: DIFF
26463: ST_TO_ADDR
// if not list then
26464: LD_VAR 0 5
26468: NOT
26469: IFFALSE 26473
// exit ;
26471: GO 26615
// weapon := list [ rand ( 1 , list ) ] ;
26473: LD_ADDR_VAR 0 18
26477: PUSH
26478: LD_VAR 0 5
26482: PUSH
26483: LD_INT 1
26485: PPUSH
26486: LD_VAR 0 5
26490: PPUSH
26491: CALL_OW 12
26495: ARRAY
26496: ST_TO_ADDR
// end ; if weapon then
26497: LD_VAR 0 18
26501: IFFALSE 26615
// begin tmp := CostOfWeapon ( weapon ) ;
26503: LD_ADDR_VAR 0 14
26507: PUSH
26508: LD_VAR 0 18
26512: PPUSH
26513: CALL_OW 451
26517: ST_TO_ADDR
// j := GetBase ( tower ) ;
26518: LD_ADDR_VAR 0 9
26522: PUSH
26523: LD_VAR 0 1
26527: PPUSH
26528: CALL_OW 274
26532: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26533: LD_VAR 0 9
26537: PPUSH
26538: LD_INT 1
26540: PPUSH
26541: CALL_OW 275
26545: PUSH
26546: LD_VAR 0 14
26550: PUSH
26551: LD_INT 1
26553: ARRAY
26554: GREATEREQUAL
26555: PUSH
26556: LD_VAR 0 9
26560: PPUSH
26561: LD_INT 2
26563: PPUSH
26564: CALL_OW 275
26568: PUSH
26569: LD_VAR 0 14
26573: PUSH
26574: LD_INT 2
26576: ARRAY
26577: GREATEREQUAL
26578: AND
26579: PUSH
26580: LD_VAR 0 9
26584: PPUSH
26585: LD_INT 3
26587: PPUSH
26588: CALL_OW 275
26592: PUSH
26593: LD_VAR 0 14
26597: PUSH
26598: LD_INT 3
26600: ARRAY
26601: GREATEREQUAL
26602: AND
26603: IFFALSE 26615
// result := weapon ;
26605: LD_ADDR_VAR 0 3
26609: PUSH
26610: LD_VAR 0 18
26614: ST_TO_ADDR
// end ; end ;
26615: LD_VAR 0 3
26619: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26620: LD_INT 0
26622: PPUSH
26623: PPUSH
// result := true ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 1
26631: ST_TO_ADDR
// if array1 = array2 then
26632: LD_VAR 0 1
26636: PUSH
26637: LD_VAR 0 2
26641: EQUAL
26642: IFFALSE 26702
// begin for i = 1 to array1 do
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: DOUBLE
26650: LD_INT 1
26652: DEC
26653: ST_TO_ADDR
26654: LD_VAR 0 1
26658: PUSH
26659: FOR_TO
26660: IFFALSE 26698
// if array1 [ i ] <> array2 [ i ] then
26662: LD_VAR 0 1
26666: PUSH
26667: LD_VAR 0 4
26671: ARRAY
26672: PUSH
26673: LD_VAR 0 2
26677: PUSH
26678: LD_VAR 0 4
26682: ARRAY
26683: NONEQUAL
26684: IFFALSE 26696
// begin result := false ;
26686: LD_ADDR_VAR 0 3
26690: PUSH
26691: LD_INT 0
26693: ST_TO_ADDR
// break ;
26694: GO 26698
// end ;
26696: GO 26659
26698: POP
26699: POP
// end else
26700: GO 26710
// result := false ;
26702: LD_ADDR_VAR 0 3
26706: PUSH
26707: LD_INT 0
26709: ST_TO_ADDR
// end ;
26710: LD_VAR 0 3
26714: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26715: LD_INT 0
26717: PPUSH
26718: PPUSH
// if not array1 or not array2 then
26719: LD_VAR 0 1
26723: NOT
26724: PUSH
26725: LD_VAR 0 2
26729: NOT
26730: OR
26731: IFFALSE 26735
// exit ;
26733: GO 26799
// result := true ;
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: LD_INT 1
26742: ST_TO_ADDR
// for i = 1 to array1 do
26743: LD_ADDR_VAR 0 4
26747: PUSH
26748: DOUBLE
26749: LD_INT 1
26751: DEC
26752: ST_TO_ADDR
26753: LD_VAR 0 1
26757: PUSH
26758: FOR_TO
26759: IFFALSE 26797
// if array1 [ i ] <> array2 [ i ] then
26761: LD_VAR 0 1
26765: PUSH
26766: LD_VAR 0 4
26770: ARRAY
26771: PUSH
26772: LD_VAR 0 2
26776: PUSH
26777: LD_VAR 0 4
26781: ARRAY
26782: NONEQUAL
26783: IFFALSE 26795
// begin result := false ;
26785: LD_ADDR_VAR 0 3
26789: PUSH
26790: LD_INT 0
26792: ST_TO_ADDR
// break ;
26793: GO 26797
// end ;
26795: GO 26758
26797: POP
26798: POP
// end ;
26799: LD_VAR 0 3
26803: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
26808: PPUSH
// pom := GetBase ( fac ) ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 1
26818: PPUSH
26819: CALL_OW 274
26823: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26824: LD_ADDR_VAR 0 4
26828: PUSH
26829: LD_VAR 0 2
26833: PUSH
26834: LD_INT 1
26836: ARRAY
26837: PPUSH
26838: LD_VAR 0 2
26842: PUSH
26843: LD_INT 2
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 3
26854: ARRAY
26855: PPUSH
26856: LD_VAR 0 2
26860: PUSH
26861: LD_INT 4
26863: ARRAY
26864: PPUSH
26865: CALL_OW 449
26869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_VAR 0 5
26879: PPUSH
26880: LD_INT 1
26882: PPUSH
26883: CALL_OW 275
26887: PUSH
26888: LD_VAR 0 4
26892: PUSH
26893: LD_INT 1
26895: ARRAY
26896: GREATEREQUAL
26897: PUSH
26898: LD_VAR 0 5
26902: PPUSH
26903: LD_INT 2
26905: PPUSH
26906: CALL_OW 275
26910: PUSH
26911: LD_VAR 0 4
26915: PUSH
26916: LD_INT 2
26918: ARRAY
26919: GREATEREQUAL
26920: AND
26921: PUSH
26922: LD_VAR 0 5
26926: PPUSH
26927: LD_INT 3
26929: PPUSH
26930: CALL_OW 275
26934: PUSH
26935: LD_VAR 0 4
26939: PUSH
26940: LD_INT 3
26942: ARRAY
26943: GREATEREQUAL
26944: AND
26945: ST_TO_ADDR
// end ;
26946: LD_VAR 0 3
26950: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26951: LD_INT 0
26953: PPUSH
26954: PPUSH
26955: PPUSH
26956: PPUSH
// pom := GetBase ( building ) ;
26957: LD_ADDR_VAR 0 3
26961: PUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL_OW 274
26971: ST_TO_ADDR
// if not pom then
26972: LD_VAR 0 3
26976: NOT
26977: IFFALSE 26981
// exit ;
26979: GO 27151
// btype := GetBType ( building ) ;
26981: LD_ADDR_VAR 0 5
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 266
26995: ST_TO_ADDR
// if btype = b_armoury then
26996: LD_VAR 0 5
27000: PUSH
27001: LD_INT 4
27003: EQUAL
27004: IFFALSE 27014
// btype := b_barracks ;
27006: LD_ADDR_VAR 0 5
27010: PUSH
27011: LD_INT 5
27013: ST_TO_ADDR
// if btype = b_depot then
27014: LD_VAR 0 5
27018: PUSH
27019: LD_INT 0
27021: EQUAL
27022: IFFALSE 27032
// btype := b_warehouse ;
27024: LD_ADDR_VAR 0 5
27028: PUSH
27029: LD_INT 1
27031: ST_TO_ADDR
// if btype = b_workshop then
27032: LD_VAR 0 5
27036: PUSH
27037: LD_INT 2
27039: EQUAL
27040: IFFALSE 27050
// btype := b_factory ;
27042: LD_ADDR_VAR 0 5
27046: PUSH
27047: LD_INT 3
27049: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27050: LD_ADDR_VAR 0 4
27054: PUSH
27055: LD_VAR 0 5
27059: PPUSH
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL_OW 248
27069: PPUSH
27070: CALL_OW 450
27074: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_VAR 0 3
27084: PPUSH
27085: LD_INT 1
27087: PPUSH
27088: CALL_OW 275
27092: PUSH
27093: LD_VAR 0 4
27097: PUSH
27098: LD_INT 1
27100: ARRAY
27101: GREATEREQUAL
27102: PUSH
27103: LD_VAR 0 3
27107: PPUSH
27108: LD_INT 2
27110: PPUSH
27111: CALL_OW 275
27115: PUSH
27116: LD_VAR 0 4
27120: PUSH
27121: LD_INT 2
27123: ARRAY
27124: GREATEREQUAL
27125: AND
27126: PUSH
27127: LD_VAR 0 3
27131: PPUSH
27132: LD_INT 3
27134: PPUSH
27135: CALL_OW 275
27139: PUSH
27140: LD_VAR 0 4
27144: PUSH
27145: LD_INT 3
27147: ARRAY
27148: GREATEREQUAL
27149: AND
27150: ST_TO_ADDR
// end ;
27151: LD_VAR 0 2
27155: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27156: LD_INT 0
27158: PPUSH
27159: PPUSH
27160: PPUSH
// pom := GetBase ( building ) ;
27161: LD_ADDR_VAR 0 4
27165: PUSH
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 274
27175: ST_TO_ADDR
// if not pom then
27176: LD_VAR 0 4
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27286
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27185: LD_ADDR_VAR 0 5
27189: PUSH
27190: LD_VAR 0 2
27194: PPUSH
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL_OW 248
27204: PPUSH
27205: CALL_OW 450
27209: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27210: LD_ADDR_VAR 0 3
27214: PUSH
27215: LD_VAR 0 4
27219: PPUSH
27220: LD_INT 1
27222: PPUSH
27223: CALL_OW 275
27227: PUSH
27228: LD_VAR 0 5
27232: PUSH
27233: LD_INT 1
27235: ARRAY
27236: GREATEREQUAL
27237: PUSH
27238: LD_VAR 0 4
27242: PPUSH
27243: LD_INT 2
27245: PPUSH
27246: CALL_OW 275
27250: PUSH
27251: LD_VAR 0 5
27255: PUSH
27256: LD_INT 2
27258: ARRAY
27259: GREATEREQUAL
27260: AND
27261: PUSH
27262: LD_VAR 0 4
27266: PPUSH
27267: LD_INT 3
27269: PPUSH
27270: CALL_OW 275
27274: PUSH
27275: LD_VAR 0 5
27279: PUSH
27280: LD_INT 3
27282: ARRAY
27283: GREATEREQUAL
27284: AND
27285: ST_TO_ADDR
// end ;
27286: LD_VAR 0 3
27290: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27291: LD_INT 0
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
27300: PPUSH
27301: PPUSH
27302: PPUSH
27303: PPUSH
// result := false ;
27304: LD_ADDR_VAR 0 8
27308: PUSH
27309: LD_INT 0
27311: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27312: LD_VAR 0 5
27316: NOT
27317: PUSH
27318: LD_VAR 0 1
27322: NOT
27323: OR
27324: PUSH
27325: LD_VAR 0 2
27329: NOT
27330: OR
27331: PUSH
27332: LD_VAR 0 3
27336: NOT
27337: OR
27338: IFFALSE 27342
// exit ;
27340: GO 28156
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27342: LD_ADDR_VAR 0 14
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: LD_VAR 0 4
27366: PPUSH
27367: LD_VAR 0 5
27371: PUSH
27372: LD_INT 1
27374: ARRAY
27375: PPUSH
27376: CALL_OW 248
27380: PPUSH
27381: LD_INT 0
27383: PPUSH
27384: CALL 29409 0 6
27388: ST_TO_ADDR
// if not hexes then
27389: LD_VAR 0 14
27393: NOT
27394: IFFALSE 27398
// exit ;
27396: GO 28156
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27398: LD_ADDR_VAR 0 17
27402: PUSH
27403: LD_VAR 0 5
27407: PPUSH
27408: LD_INT 22
27410: PUSH
27411: LD_VAR 0 13
27415: PPUSH
27416: CALL_OW 255
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 30
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 30
27440: PUSH
27441: LD_INT 1
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 72
27461: ST_TO_ADDR
// for i = 1 to hexes do
27462: LD_ADDR_VAR 0 9
27466: PUSH
27467: DOUBLE
27468: LD_INT 1
27470: DEC
27471: ST_TO_ADDR
27472: LD_VAR 0 14
27476: PUSH
27477: FOR_TO
27478: IFFALSE 28154
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27480: LD_ADDR_VAR 0 13
27484: PUSH
27485: LD_VAR 0 14
27489: PUSH
27490: LD_VAR 0 9
27494: ARRAY
27495: PUSH
27496: LD_INT 1
27498: ARRAY
27499: PPUSH
27500: LD_VAR 0 14
27504: PUSH
27505: LD_VAR 0 9
27509: ARRAY
27510: PUSH
27511: LD_INT 2
27513: ARRAY
27514: PPUSH
27515: CALL_OW 428
27519: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27520: LD_VAR 0 14
27524: PUSH
27525: LD_VAR 0 9
27529: ARRAY
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PPUSH
27535: LD_VAR 0 14
27539: PUSH
27540: LD_VAR 0 9
27544: ARRAY
27545: PUSH
27546: LD_INT 2
27548: ARRAY
27549: PPUSH
27550: CALL_OW 351
27554: PUSH
27555: LD_VAR 0 14
27559: PUSH
27560: LD_VAR 0 9
27564: ARRAY
27565: PUSH
27566: LD_INT 1
27568: ARRAY
27569: PPUSH
27570: LD_VAR 0 14
27574: PUSH
27575: LD_VAR 0 9
27579: ARRAY
27580: PUSH
27581: LD_INT 2
27583: ARRAY
27584: PPUSH
27585: CALL_OW 488
27589: NOT
27590: OR
27591: PUSH
27592: LD_VAR 0 13
27596: PPUSH
27597: CALL_OW 247
27601: PUSH
27602: LD_INT 3
27604: EQUAL
27605: OR
27606: IFFALSE 27612
// exit ;
27608: POP
27609: POP
27610: GO 28156
// if not tmp then
27612: LD_VAR 0 13
27616: NOT
27617: IFFALSE 27621
// continue ;
27619: GO 27477
// result := true ;
27621: LD_ADDR_VAR 0 8
27625: PUSH
27626: LD_INT 1
27628: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27629: LD_VAR 0 6
27633: PUSH
27634: LD_VAR 0 13
27638: PPUSH
27639: CALL_OW 247
27643: PUSH
27644: LD_INT 2
27646: EQUAL
27647: AND
27648: PUSH
27649: LD_VAR 0 13
27653: PPUSH
27654: CALL_OW 263
27658: PUSH
27659: LD_INT 1
27661: EQUAL
27662: AND
27663: IFFALSE 27827
// begin if IsDrivenBy ( tmp ) then
27665: LD_VAR 0 13
27669: PPUSH
27670: CALL_OW 311
27674: IFFALSE 27678
// continue ;
27676: GO 27477
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27678: LD_VAR 0 6
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 60
27688: PUSH
27689: EMPTY
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 55
27701: PUSH
27702: EMPTY
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 72
27717: IFFALSE 27825
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27719: LD_ADDR_VAR 0 18
27723: PUSH
27724: LD_VAR 0 6
27728: PPUSH
27729: LD_INT 3
27731: PUSH
27732: LD_INT 60
27734: PUSH
27735: EMPTY
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 3
27744: PUSH
27745: LD_INT 55
27747: PUSH
27748: EMPTY
27749: LIST
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PPUSH
27759: CALL_OW 72
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: ST_TO_ADDR
// if IsInUnit ( driver ) then
27768: LD_VAR 0 18
27772: PPUSH
27773: CALL_OW 310
27777: IFFALSE 27788
// ComExit ( driver ) ;
27779: LD_VAR 0 18
27783: PPUSH
27784: CALL 53190 0 1
// AddComEnterUnit ( driver , tmp ) ;
27788: LD_VAR 0 18
27792: PPUSH
27793: LD_VAR 0 13
27797: PPUSH
27798: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27802: LD_VAR 0 18
27806: PPUSH
27807: LD_VAR 0 7
27811: PPUSH
27812: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27816: LD_VAR 0 18
27820: PPUSH
27821: CALL_OW 181
// end ; continue ;
27825: GO 27477
// end ; if not cleaners or not tmp in cleaners then
27827: LD_VAR 0 6
27831: NOT
27832: PUSH
27833: LD_VAR 0 13
27837: PUSH
27838: LD_VAR 0 6
27842: IN
27843: NOT
27844: OR
27845: IFFALSE 28152
// begin if dep then
27847: LD_VAR 0 17
27851: IFFALSE 27987
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27853: LD_ADDR_VAR 0 16
27857: PUSH
27858: LD_VAR 0 17
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: CALL_OW 250
27871: PPUSH
27872: LD_VAR 0 17
27876: PUSH
27877: LD_INT 1
27879: ARRAY
27880: PPUSH
27881: CALL_OW 254
27885: PPUSH
27886: LD_INT 5
27888: PPUSH
27889: CALL_OW 272
27893: PUSH
27894: LD_VAR 0 17
27898: PUSH
27899: LD_INT 1
27901: ARRAY
27902: PPUSH
27903: CALL_OW 251
27907: PPUSH
27908: LD_VAR 0 17
27912: PUSH
27913: LD_INT 1
27915: ARRAY
27916: PPUSH
27917: CALL_OW 254
27921: PPUSH
27922: LD_INT 5
27924: PPUSH
27925: CALL_OW 273
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27934: LD_VAR 0 16
27938: PUSH
27939: LD_INT 1
27941: ARRAY
27942: PPUSH
27943: LD_VAR 0 16
27947: PUSH
27948: LD_INT 2
27950: ARRAY
27951: PPUSH
27952: CALL_OW 488
27956: IFFALSE 27987
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27958: LD_VAR 0 13
27962: PPUSH
27963: LD_VAR 0 16
27967: PUSH
27968: LD_INT 1
27970: ARRAY
27971: PPUSH
27972: LD_VAR 0 16
27976: PUSH
27977: LD_INT 2
27979: ARRAY
27980: PPUSH
27981: CALL_OW 111
// continue ;
27985: GO 27477
// end ; end ; r := GetDir ( tmp ) ;
27987: LD_ADDR_VAR 0 15
27991: PUSH
27992: LD_VAR 0 13
27996: PPUSH
27997: CALL_OW 254
28001: ST_TO_ADDR
// if r = 5 then
28002: LD_VAR 0 15
28006: PUSH
28007: LD_INT 5
28009: EQUAL
28010: IFFALSE 28020
// r := 0 ;
28012: LD_ADDR_VAR 0 15
28016: PUSH
28017: LD_INT 0
28019: ST_TO_ADDR
// for j = r to 5 do
28020: LD_ADDR_VAR 0 10
28024: PUSH
28025: DOUBLE
28026: LD_VAR 0 15
28030: DEC
28031: ST_TO_ADDR
28032: LD_INT 5
28034: PUSH
28035: FOR_TO
28036: IFFALSE 28150
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28038: LD_ADDR_VAR 0 11
28042: PUSH
28043: LD_VAR 0 13
28047: PPUSH
28048: CALL_OW 250
28052: PPUSH
28053: LD_VAR 0 10
28057: PPUSH
28058: LD_INT 2
28060: PPUSH
28061: CALL_OW 272
28065: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28066: LD_ADDR_VAR 0 12
28070: PUSH
28071: LD_VAR 0 13
28075: PPUSH
28076: CALL_OW 251
28080: PPUSH
28081: LD_VAR 0 10
28085: PPUSH
28086: LD_INT 2
28088: PPUSH
28089: CALL_OW 273
28093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28094: LD_VAR 0 11
28098: PPUSH
28099: LD_VAR 0 12
28103: PPUSH
28104: CALL_OW 488
28108: PUSH
28109: LD_VAR 0 11
28113: PPUSH
28114: LD_VAR 0 12
28118: PPUSH
28119: CALL_OW 428
28123: NOT
28124: AND
28125: IFFALSE 28148
// begin ComMoveXY ( tmp , _x , _y ) ;
28127: LD_VAR 0 13
28131: PPUSH
28132: LD_VAR 0 11
28136: PPUSH
28137: LD_VAR 0 12
28141: PPUSH
28142: CALL_OW 111
// break ;
28146: GO 28150
// end ; end ;
28148: GO 28035
28150: POP
28151: POP
// end ; end ;
28152: GO 27477
28154: POP
28155: POP
// end ;
28156: LD_VAR 0 8
28160: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28161: LD_INT 0
28163: PPUSH
// result := true ;
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_INT 1
28171: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28172: LD_VAR 0 2
28176: PUSH
28177: LD_INT 24
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28191
28183: LD_INT 33
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28216
28191: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28192: LD_ADDR_VAR 0 3
28196: PUSH
28197: LD_INT 32
28199: PPUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 321
28209: PUSH
28210: LD_INT 2
28212: EQUAL
28213: ST_TO_ADDR
28214: GO 28532
28216: LD_INT 20
28218: DOUBLE
28219: EQUAL
28220: IFTRUE 28224
28222: GO 28249
28224: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28225: LD_ADDR_VAR 0 3
28229: PUSH
28230: LD_INT 6
28232: PPUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 321
28242: PUSH
28243: LD_INT 2
28245: EQUAL
28246: ST_TO_ADDR
28247: GO 28532
28249: LD_INT 22
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28263
28255: LD_INT 36
28257: DOUBLE
28258: EQUAL
28259: IFTRUE 28263
28261: GO 28288
28263: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28264: LD_ADDR_VAR 0 3
28268: PUSH
28269: LD_INT 15
28271: PPUSH
28272: LD_VAR 0 1
28276: PPUSH
28277: CALL_OW 321
28281: PUSH
28282: LD_INT 2
28284: EQUAL
28285: ST_TO_ADDR
28286: GO 28532
28288: LD_INT 30
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28321
28296: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28297: LD_ADDR_VAR 0 3
28301: PUSH
28302: LD_INT 20
28304: PPUSH
28305: LD_VAR 0 1
28309: PPUSH
28310: CALL_OW 321
28314: PUSH
28315: LD_INT 2
28317: EQUAL
28318: ST_TO_ADDR
28319: GO 28532
28321: LD_INT 28
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28335
28327: LD_INT 21
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28360
28335: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_INT 21
28343: PPUSH
28344: LD_VAR 0 1
28348: PPUSH
28349: CALL_OW 321
28353: PUSH
28354: LD_INT 2
28356: EQUAL
28357: ST_TO_ADDR
28358: GO 28532
28360: LD_INT 16
28362: DOUBLE
28363: EQUAL
28364: IFTRUE 28368
28366: GO 28393
28368: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28369: LD_ADDR_VAR 0 3
28373: PUSH
28374: LD_INT 84
28376: PPUSH
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 321
28386: PUSH
28387: LD_INT 2
28389: EQUAL
28390: ST_TO_ADDR
28391: GO 28532
28393: LD_INT 19
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28407
28399: LD_INT 23
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28432
28407: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28408: LD_ADDR_VAR 0 3
28412: PUSH
28413: LD_INT 83
28415: PPUSH
28416: LD_VAR 0 1
28420: PPUSH
28421: CALL_OW 321
28425: PUSH
28426: LD_INT 2
28428: EQUAL
28429: ST_TO_ADDR
28430: GO 28532
28432: LD_INT 17
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28465
28440: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28441: LD_ADDR_VAR 0 3
28445: PUSH
28446: LD_INT 39
28448: PPUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 321
28458: PUSH
28459: LD_INT 2
28461: EQUAL
28462: ST_TO_ADDR
28463: GO 28532
28465: LD_INT 18
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28498
28473: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 40
28481: PPUSH
28482: LD_VAR 0 1
28486: PPUSH
28487: CALL_OW 321
28491: PUSH
28492: LD_INT 2
28494: EQUAL
28495: ST_TO_ADDR
28496: GO 28532
28498: LD_INT 27
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28531
28506: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 35
28514: PPUSH
28515: LD_VAR 0 1
28519: PPUSH
28520: CALL_OW 321
28524: PUSH
28525: LD_INT 2
28527: EQUAL
28528: ST_TO_ADDR
28529: GO 28532
28531: POP
// end ;
28532: LD_VAR 0 3
28536: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28537: LD_INT 0
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
28547: PPUSH
28548: PPUSH
28549: PPUSH
// result := false ;
28550: LD_ADDR_VAR 0 6
28554: PUSH
28555: LD_INT 0
28557: ST_TO_ADDR
// if btype = b_depot then
28558: LD_VAR 0 2
28562: PUSH
28563: LD_INT 0
28565: EQUAL
28566: IFFALSE 28578
// begin result := true ;
28568: LD_ADDR_VAR 0 6
28572: PUSH
28573: LD_INT 1
28575: ST_TO_ADDR
// exit ;
28576: GO 29404
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28578: LD_VAR 0 1
28582: NOT
28583: PUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 266
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: IN
28604: NOT
28605: OR
28606: PUSH
28607: LD_VAR 0 2
28611: NOT
28612: OR
28613: PUSH
28614: LD_VAR 0 5
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: LD_INT 2
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: LD_INT 4
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: IN
28645: NOT
28646: OR
28647: PUSH
28648: LD_VAR 0 3
28652: PPUSH
28653: LD_VAR 0 4
28657: PPUSH
28658: CALL_OW 488
28662: NOT
28663: OR
28664: IFFALSE 28668
// exit ;
28666: GO 29404
// side := GetSide ( depot ) ;
28668: LD_ADDR_VAR 0 9
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 255
28682: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28683: LD_VAR 0 9
28687: PPUSH
28688: LD_VAR 0 2
28692: PPUSH
28693: CALL 28161 0 2
28697: NOT
28698: IFFALSE 28702
// exit ;
28700: GO 29404
// pom := GetBase ( depot ) ;
28702: LD_ADDR_VAR 0 10
28706: PUSH
28707: LD_VAR 0 1
28711: PPUSH
28712: CALL_OW 274
28716: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28717: LD_ADDR_VAR 0 11
28721: PUSH
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: CALL_OW 248
28736: PPUSH
28737: CALL_OW 450
28741: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28742: LD_VAR 0 10
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 275
28754: PUSH
28755: LD_VAR 0 11
28759: PUSH
28760: LD_INT 1
28762: ARRAY
28763: GREATEREQUAL
28764: PUSH
28765: LD_VAR 0 10
28769: PPUSH
28770: LD_INT 2
28772: PPUSH
28773: CALL_OW 275
28777: PUSH
28778: LD_VAR 0 11
28782: PUSH
28783: LD_INT 2
28785: ARRAY
28786: GREATEREQUAL
28787: AND
28788: PUSH
28789: LD_VAR 0 10
28793: PPUSH
28794: LD_INT 3
28796: PPUSH
28797: CALL_OW 275
28801: PUSH
28802: LD_VAR 0 11
28806: PUSH
28807: LD_INT 3
28809: ARRAY
28810: GREATEREQUAL
28811: AND
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 29404
// if GetBType ( depot ) = b_depot then
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 266
28826: PUSH
28827: LD_INT 0
28829: EQUAL
28830: IFFALSE 28842
// dist := 28 else
28832: LD_ADDR_VAR 0 14
28836: PUSH
28837: LD_INT 28
28839: ST_TO_ADDR
28840: GO 28850
// dist := 36 ;
28842: LD_ADDR_VAR 0 14
28846: PUSH
28847: LD_INT 36
28849: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28850: LD_VAR 0 1
28854: PPUSH
28855: LD_VAR 0 3
28859: PPUSH
28860: LD_VAR 0 4
28864: PPUSH
28865: CALL_OW 297
28869: PUSH
28870: LD_VAR 0 14
28874: GREATER
28875: IFFALSE 28879
// exit ;
28877: GO 29404
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28879: LD_ADDR_VAR 0 12
28883: PUSH
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_VAR 0 3
28893: PPUSH
28894: LD_VAR 0 4
28898: PPUSH
28899: LD_VAR 0 5
28903: PPUSH
28904: LD_VAR 0 1
28908: PPUSH
28909: CALL_OW 248
28913: PPUSH
28914: LD_INT 0
28916: PPUSH
28917: CALL 29409 0 6
28921: ST_TO_ADDR
// if not hexes then
28922: LD_VAR 0 12
28926: NOT
28927: IFFALSE 28931
// exit ;
28929: GO 29404
// hex := GetHexInfo ( x , y ) ;
28931: LD_ADDR_VAR 0 15
28935: PUSH
28936: LD_VAR 0 3
28940: PPUSH
28941: LD_VAR 0 4
28945: PPUSH
28946: CALL_OW 546
28950: ST_TO_ADDR
// if hex [ 1 ] then
28951: LD_VAR 0 15
28955: PUSH
28956: LD_INT 1
28958: ARRAY
28959: IFFALSE 28963
// exit ;
28961: GO 29404
// height := hex [ 2 ] ;
28963: LD_ADDR_VAR 0 13
28967: PUSH
28968: LD_VAR 0 15
28972: PUSH
28973: LD_INT 2
28975: ARRAY
28976: ST_TO_ADDR
// for i = 1 to hexes do
28977: LD_ADDR_VAR 0 7
28981: PUSH
28982: DOUBLE
28983: LD_INT 1
28985: DEC
28986: ST_TO_ADDR
28987: LD_VAR 0 12
28991: PUSH
28992: FOR_TO
28993: IFFALSE 29323
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28995: LD_VAR 0 12
28999: PUSH
29000: LD_VAR 0 7
29004: ARRAY
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: PPUSH
29010: LD_VAR 0 12
29014: PUSH
29015: LD_VAR 0 7
29019: ARRAY
29020: PUSH
29021: LD_INT 2
29023: ARRAY
29024: PPUSH
29025: CALL_OW 488
29029: NOT
29030: PUSH
29031: LD_VAR 0 12
29035: PUSH
29036: LD_VAR 0 7
29040: ARRAY
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PPUSH
29046: LD_VAR 0 12
29050: PUSH
29051: LD_VAR 0 7
29055: ARRAY
29056: PUSH
29057: LD_INT 2
29059: ARRAY
29060: PPUSH
29061: CALL_OW 428
29065: PUSH
29066: LD_INT 0
29068: GREATER
29069: OR
29070: PUSH
29071: LD_VAR 0 12
29075: PUSH
29076: LD_VAR 0 7
29080: ARRAY
29081: PUSH
29082: LD_INT 1
29084: ARRAY
29085: PPUSH
29086: LD_VAR 0 12
29090: PUSH
29091: LD_VAR 0 7
29095: ARRAY
29096: PUSH
29097: LD_INT 2
29099: ARRAY
29100: PPUSH
29101: CALL_OW 351
29105: OR
29106: IFFALSE 29112
// exit ;
29108: POP
29109: POP
29110: GO 29404
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29112: LD_ADDR_VAR 0 8
29116: PUSH
29117: LD_VAR 0 12
29121: PUSH
29122: LD_VAR 0 7
29126: ARRAY
29127: PUSH
29128: LD_INT 1
29130: ARRAY
29131: PPUSH
29132: LD_VAR 0 12
29136: PUSH
29137: LD_VAR 0 7
29141: ARRAY
29142: PUSH
29143: LD_INT 2
29145: ARRAY
29146: PPUSH
29147: CALL_OW 546
29151: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29152: LD_VAR 0 8
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PUSH
29161: LD_VAR 0 8
29165: PUSH
29166: LD_INT 2
29168: ARRAY
29169: PUSH
29170: LD_VAR 0 13
29174: PUSH
29175: LD_INT 2
29177: PLUS
29178: GREATER
29179: OR
29180: PUSH
29181: LD_VAR 0 8
29185: PUSH
29186: LD_INT 2
29188: ARRAY
29189: PUSH
29190: LD_VAR 0 13
29194: PUSH
29195: LD_INT 2
29197: MINUS
29198: LESS
29199: OR
29200: PUSH
29201: LD_VAR 0 8
29205: PUSH
29206: LD_INT 3
29208: ARRAY
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 8
29215: PUSH
29216: LD_INT 9
29218: PUSH
29219: LD_INT 10
29221: PUSH
29222: LD_INT 11
29224: PUSH
29225: LD_INT 12
29227: PUSH
29228: LD_INT 13
29230: PUSH
29231: LD_INT 16
29233: PUSH
29234: LD_INT 17
29236: PUSH
29237: LD_INT 18
29239: PUSH
29240: LD_INT 19
29242: PUSH
29243: LD_INT 20
29245: PUSH
29246: LD_INT 21
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: IN
29264: NOT
29265: OR
29266: PUSH
29267: LD_VAR 0 8
29271: PUSH
29272: LD_INT 5
29274: ARRAY
29275: NOT
29276: OR
29277: PUSH
29278: LD_VAR 0 8
29282: PUSH
29283: LD_INT 6
29285: ARRAY
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: LD_INT 7
29295: PUSH
29296: LD_INT 9
29298: PUSH
29299: LD_INT 10
29301: PUSH
29302: LD_INT 11
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: IN
29313: NOT
29314: OR
29315: IFFALSE 29321
// exit ;
29317: POP
29318: POP
29319: GO 29404
// end ;
29321: GO 28992
29323: POP
29324: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29325: LD_VAR 0 9
29329: PPUSH
29330: LD_VAR 0 3
29334: PPUSH
29335: LD_VAR 0 4
29339: PPUSH
29340: LD_INT 20
29342: PPUSH
29343: CALL 21327 0 4
29347: PUSH
29348: LD_INT 4
29350: ARRAY
29351: IFFALSE 29355
// exit ;
29353: GO 29404
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29355: LD_VAR 0 2
29359: PUSH
29360: LD_INT 29
29362: PUSH
29363: LD_INT 30
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: IN
29370: PUSH
29371: LD_VAR 0 3
29375: PPUSH
29376: LD_VAR 0 4
29380: PPUSH
29381: LD_VAR 0 9
29385: PPUSH
29386: CALL_OW 440
29390: NOT
29391: AND
29392: IFFALSE 29396
// exit ;
29394: GO 29404
// result := true ;
29396: LD_ADDR_VAR 0 6
29400: PUSH
29401: LD_INT 1
29403: ST_TO_ADDR
// end ;
29404: LD_VAR 0 6
29408: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29409: LD_INT 0
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
// result = [ ] ;
29469: LD_ADDR_VAR 0 7
29473: PUSH
29474: EMPTY
29475: ST_TO_ADDR
// temp_list = [ ] ;
29476: LD_ADDR_VAR 0 9
29480: PUSH
29481: EMPTY
29482: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29483: LD_VAR 0 4
29487: PUSH
29488: LD_INT 0
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 3
29499: PUSH
29500: LD_INT 4
29502: PUSH
29503: LD_INT 5
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: IN
29514: NOT
29515: PUSH
29516: LD_VAR 0 1
29520: PUSH
29521: LD_INT 0
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: IN
29531: PUSH
29532: LD_VAR 0 5
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: IN
29551: NOT
29552: AND
29553: OR
29554: IFFALSE 29558
// exit ;
29556: GO 47949
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29558: LD_VAR 0 1
29562: PUSH
29563: LD_INT 6
29565: PUSH
29566: LD_INT 7
29568: PUSH
29569: LD_INT 8
29571: PUSH
29572: LD_INT 13
29574: PUSH
29575: LD_INT 12
29577: PUSH
29578: LD_INT 15
29580: PUSH
29581: LD_INT 11
29583: PUSH
29584: LD_INT 14
29586: PUSH
29587: LD_INT 10
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: IN
29601: IFFALSE 29611
// btype = b_lab ;
29603: LD_ADDR_VAR 0 1
29607: PUSH
29608: LD_INT 6
29610: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29611: LD_VAR 0 6
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: IN
29630: NOT
29631: PUSH
29632: LD_VAR 0 1
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: LD_INT 6
29651: PUSH
29652: LD_INT 36
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: LD_INT 5
29660: PUSH
29661: LD_INT 31
29663: PUSH
29664: LD_INT 32
29666: PUSH
29667: LD_INT 33
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: IN
29683: NOT
29684: PUSH
29685: LD_VAR 0 6
29689: PUSH
29690: LD_INT 1
29692: EQUAL
29693: AND
29694: OR
29695: PUSH
29696: LD_VAR 0 1
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: LD_INT 3
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: IN
29711: NOT
29712: PUSH
29713: LD_VAR 0 6
29717: PUSH
29718: LD_INT 2
29720: EQUAL
29721: AND
29722: OR
29723: IFFALSE 29733
// mode = 0 ;
29725: LD_ADDR_VAR 0 6
29729: PUSH
29730: LD_INT 0
29732: ST_TO_ADDR
// case mode of 0 :
29733: LD_VAR 0 6
29737: PUSH
29738: LD_INT 0
29740: DOUBLE
29741: EQUAL
29742: IFTRUE 29746
29744: GO 41199
29746: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29747: LD_ADDR_VAR 0 11
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: PUSH
29776: LD_INT 0
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 0
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 1
29816: NEG
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 2
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 0
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: LD_INT 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: LD_INT 3
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 0
29903: PUSH
29904: LD_INT 3
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: PUSH
29915: LD_INT 2
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29940: LD_ADDR_VAR 0 12
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 0
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: NEG
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 1
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 2
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: NEG
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 3
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30136: LD_ADDR_VAR 0 13
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: LD_INT 1
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PUSH
30192: LD_INT 1
30194: NEG
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 2
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 2
30271: NEG
30272: PUSH
30273: LD_INT 2
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: LD_INT 3
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 3
30295: NEG
30296: PUSH
30297: LD_INT 2
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: NEG
30308: PUSH
30309: LD_INT 3
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30335: LD_ADDR_VAR 0 14
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: PUSH
30374: LD_INT 1
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 0
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 1
30470: NEG
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 3
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 3
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30531: LD_ADDR_VAR 0 15
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: NEG
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 2
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 3
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 1
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30724: LD_ADDR_VAR 0 16
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: PUSH
30872: LD_INT 2
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 3
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: LD_INT 3
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30917: LD_ADDR_VAR 0 17
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 2
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 1
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31147: LD_ADDR_VAR 0 18
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 2
31323: NEG
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 2
31334: NEG
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31377: LD_ADDR_VAR 0 19
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 0
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 1
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 2
31553: NEG
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31607: LD_ADDR_VAR 0 20
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 0
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 2
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31837: LD_ADDR_VAR 0 21
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 0
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 1
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 2
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 2
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32067: LD_ADDR_VAR 0 22
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 1
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 2
32243: NEG
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: LD_INT 2
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32297: LD_ADDR_VAR 0 23
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 0
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 2
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 0
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 1
32462: NEG
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: LD_INT 1
32488: NEG
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 3
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 3
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: LD_INT 2
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32577: LD_ADDR_VAR 0 24
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: LD_INT 2
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 2
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 2
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 3
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32853: LD_ADDR_VAR 0 25
32857: PUSH
32858: LD_INT 0
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 0
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 2
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 2
33029: NEG
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 3
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 3
33074: PUSH
33075: LD_INT 2
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33127: LD_ADDR_VAR 0 26
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 0
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 2
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33403: LD_ADDR_VAR 0 27
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 1
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 2
33602: NEG
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33683: LD_ADDR_VAR 0 28
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: LD_INT 3
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: LD_INT 3
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 3
33918: NEG
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: LD_INT 2
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33965: LD_ADDR_VAR 0 29
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: NEG
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 2
34131: NEG
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 2
34143: NEG
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: LD_INT 3
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: NEG
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 3
34209: NEG
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34244: LD_ADDR_VAR 0 30
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 2
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 2
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: LD_INT 3
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 2
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34522: LD_ADDR_VAR 0 31
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: LD_INT 0
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 0
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 1
34580: NEG
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 2
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 1
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 2
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 1
34754: NEG
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34800: LD_ADDR_VAR 0 32
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 2
34966: NEG
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 3
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 3
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35078: LD_ADDR_VAR 0 33
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 1
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 2
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 1
35283: NEG
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: LD_INT 1
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: LD_INT 3
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 3
35322: NEG
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35357: LD_ADDR_VAR 0 34
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 0
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 3
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 3
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 3
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 3
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35637: LD_ADDR_VAR 0 35
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 0
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 2
35718: PUSH
35719: LD_INT 1
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35749: LD_ADDR_VAR 0 36
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 0
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: NEG
35831: PUSH
35832: LD_INT 2
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35861: LD_ADDR_VAR 0 37
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 1
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 0
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35973: LD_ADDR_VAR 0 38
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36085: LD_ADDR_VAR 0 39
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36197: LD_ADDR_VAR 0 40
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 0
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 1
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 1
36266: NEG
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36309: LD_ADDR_VAR 0 41
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 2
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: NEG
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: NEG
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 3
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: LD_INT 3
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 3
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 3
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 3
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: NEG
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36659: LD_ADDR_VAR 0 42
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 1
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: LD_INT 2
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 2
36849: NEG
36850: PUSH
36851: LD_INT 3
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 3
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 3
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: LD_INT 3
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 3
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 3
36956: NEG
36957: PUSH
36958: LD_INT 2
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 3
36968: NEG
36969: PUSH
36970: LD_INT 3
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37009: LD_ADDR_VAR 0 43
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 1
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: LD_INT 2
37094: NEG
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 3
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: LD_INT 3
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 1
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 3
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 3
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: NEG
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 3
37316: NEG
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37357: LD_ADDR_VAR 0 44
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: LD_INT 1
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: LD_INT 0
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 2
37535: NEG
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 3
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 3
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 3
37600: PUSH
37601: LD_INT 3
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 2
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 3
37631: NEG
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 3
37642: NEG
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: NEG
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37707: LD_ADDR_VAR 0 45
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 0
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 0
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 1
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: NEG
37886: PUSH
37887: LD_INT 2
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: LD_INT 3
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 3
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 3
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 3
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 3
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: NEG
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: LD_INT 3
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38057: LD_ADDR_VAR 0 46
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 0
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: LD_INT 2
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: LD_INT 1
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 3
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 3
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 1
38331: NEG
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 3
38353: NEG
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 3
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38405: LD_ADDR_VAR 0 47
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 1
38486: NEG
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 2
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 2
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: LD_INT 2
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38556: LD_ADDR_VAR 0 48
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 2
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38703: LD_ADDR_VAR 0 49
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 1
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 0
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: LD_INT 2
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38847: LD_ADDR_VAR 0 50
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38991: LD_ADDR_VAR 0 51
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 2
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39138: LD_ADDR_VAR 0 52
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 2
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: NEG
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 2
39253: NEG
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39289: LD_ADDR_VAR 0 53
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: NEG
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39519: LD_ADDR_VAR 0 54
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 2
39695: NEG
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39749: LD_ADDR_VAR 0 55
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 0
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 0
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39979: LD_ADDR_VAR 0 56
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 2
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: NEG
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40209: LD_ADDR_VAR 0 57
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40439: LD_ADDR_VAR 0 58
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 0
40532: PUSH
40533: LD_INT 2
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: NEG
40616: PUSH
40617: LD_INT 0
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 2
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40669: LD_ADDR_VAR 0 59
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40757: LD_ADDR_VAR 0 60
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40845: LD_ADDR_VAR 0 61
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40933: LD_ADDR_VAR 0 62
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41021: LD_ADDR_VAR 0 63
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41109: LD_ADDR_VAR 0 64
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// end ; 1 :
41197: GO 47094
41199: LD_INT 1
41201: DOUBLE
41202: EQUAL
41203: IFTRUE 41207
41205: GO 43830
41207: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41208: LD_ADDR_VAR 0 11
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 3
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41252: LD_ADDR_VAR 0 12
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 3
41280: PUSH
41281: LD_INT 1
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41293: LD_ADDR_VAR 0 13
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 3
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41333: LD_ADDR_VAR 0 14
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41374: LD_ADDR_VAR 0 15
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 3
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 3
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41418: LD_ADDR_VAR 0 16
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 3
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 3
41437: NEG
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 3
41449: NEG
41450: PUSH
41451: LD_INT 3
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41464: LD_ADDR_VAR 0 17
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 3
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 3
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41508: LD_ADDR_VAR 0 18
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 3
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41549: LD_ADDR_VAR 0 19
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 3
41566: PUSH
41567: LD_INT 3
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 3
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41589: LD_ADDR_VAR 0 20
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 3
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41630: LD_ADDR_VAR 0 21
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: NEG
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 3
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41674: LD_ADDR_VAR 0 22
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: LD_INT 3
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 3
41705: NEG
41706: PUSH
41707: LD_INT 3
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41720: LD_ADDR_VAR 0 23
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 3
41730: NEG
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 4
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41764: LD_ADDR_VAR 0 24
41768: PUSH
41769: LD_INT 3
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 4
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41805: LD_ADDR_VAR 0 25
41809: PUSH
41810: LD_INT 3
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 4
41822: PUSH
41823: LD_INT 3
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: LD_INT 4
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41845: LD_ADDR_VAR 0 26
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 3
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: LD_INT 4
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41886: LD_ADDR_VAR 0 27
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 4
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41930: LD_ADDR_VAR 0 28
41934: PUSH
41935: LD_INT 3
41937: NEG
41938: PUSH
41939: LD_INT 3
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: LD_INT 4
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 4
41961: NEG
41962: PUSH
41963: LD_INT 3
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41976: LD_ADDR_VAR 0 29
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: LD_INT 3
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: LD_INT 3
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: LD_INT 4
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 4
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 5
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 5
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 4
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 6
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 6
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 5
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42131: LD_ADDR_VAR 0 30
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 3
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 4
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 4
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 5
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 5
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 5
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 6
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 6
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42274: LD_ADDR_VAR 0 31
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 4
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 4
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: LD_INT 4
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 5
42341: PUSH
42342: LD_INT 4
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 5
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: PUSH
42362: LD_INT 5
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 6
42371: PUSH
42372: LD_INT 5
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 6
42381: PUSH
42382: LD_INT 6
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 5
42391: PUSH
42392: LD_INT 6
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42413: LD_ADDR_VAR 0 32
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 2
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: LD_INT 4
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 4
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: LD_INT 3
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 5
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 5
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 4
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 6
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 6
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 5
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42556: LD_ADDR_VAR 0 33
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 3
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 3
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 4
42608: NEG
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 4
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 4
42631: NEG
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 5
42642: NEG
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 5
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: NEG
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 5
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 6
42676: NEG
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 6
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42711: LD_ADDR_VAR 0 34
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: LD_INT 3
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: NEG
42743: PUSH
42744: LD_INT 3
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: NEG
42755: PUSH
42756: LD_INT 4
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 4
42766: NEG
42767: PUSH
42768: LD_INT 3
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 4
42778: NEG
42779: PUSH
42780: LD_INT 4
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 4
42790: NEG
42791: PUSH
42792: LD_INT 5
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 5
42802: NEG
42803: PUSH
42804: LD_INT 4
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 5
42814: NEG
42815: PUSH
42816: LD_INT 5
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 5
42826: NEG
42827: PUSH
42828: LD_INT 6
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 6
42838: NEG
42839: PUSH
42840: LD_INT 5
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 6
42850: NEG
42851: PUSH
42852: LD_INT 6
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42874: LD_ADDR_VAR 0 41
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42918: LD_ADDR_VAR 0 42
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: PUSH
42947: LD_INT 1
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42959: LD_ADDR_VAR 0 43
42963: PUSH
42964: LD_INT 2
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: PUSH
42987: LD_INT 3
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42999: LD_ADDR_VAR 0 44
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43040: LD_ADDR_VAR 0 45
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 3
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43084: LD_ADDR_VAR 0 46
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 3
43115: NEG
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43130: LD_ADDR_VAR 0 47
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 3
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43163: LD_ADDR_VAR 0 48
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43194: LD_ADDR_VAR 0 49
43198: PUSH
43199: LD_INT 3
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43223: LD_ADDR_VAR 0 50
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 3
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43252: LD_ADDR_VAR 0 51
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43283: LD_ADDR_VAR 0 52
43287: PUSH
43288: LD_INT 3
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43316: LD_ADDR_VAR 0 53
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 3
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: LIST
43359: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43360: LD_ADDR_VAR 0 54
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 1
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43401: LD_ADDR_VAR 0 55
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43441: LD_ADDR_VAR 0 56
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 3
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43482: LD_ADDR_VAR 0 57
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 3
43500: NEG
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: LIST
43525: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43526: LD_ADDR_VAR 0 58
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 3
43545: NEG
43546: PUSH
43547: LD_INT 2
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43572: LD_ADDR_VAR 0 59
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43616: LD_ADDR_VAR 0 60
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43657: LD_ADDR_VAR 0 61
43661: PUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 2
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43697: LD_ADDR_VAR 0 62
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43738: LD_ADDR_VAR 0 63
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43782: LD_ADDR_VAR 0 64
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// end ; 2 :
43828: GO 47094
43830: LD_INT 2
43832: DOUBLE
43833: EQUAL
43834: IFTRUE 43838
43836: GO 47093
43838: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43839: LD_ADDR_VAR 0 29
43843: PUSH
43844: LD_INT 4
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 4
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 5
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 5
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 4
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 5
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 3
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 3
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: LD_INT 4
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 3
43979: PUSH
43980: LD_INT 4
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 3
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 4
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: LD_INT 3
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 4
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 5
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 4
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: LD_INT 5
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: NEG
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 3
44122: NEG
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 3
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 3
44167: NEG
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 4
44178: NEG
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 4
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 4
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 4
44224: NEG
44225: PUSH
44226: LD_INT 4
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 4
44236: NEG
44237: PUSH
44238: LD_INT 5
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 4
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 3
44260: NEG
44261: PUSH
44262: LD_INT 3
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 4
44272: NEG
44273: PUSH
44274: LD_INT 3
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 5
44284: NEG
44285: PUSH
44286: LD_INT 4
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 5
44296: NEG
44297: PUSH
44298: LD_INT 5
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: LD_INT 5
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 5
44320: NEG
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44377: LD_ADDR_VAR 0 30
44381: PUSH
44382: LD_INT 4
44384: PUSH
44385: LD_INT 4
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 4
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 5
44404: PUSH
44405: LD_INT 4
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: LD_INT 5
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 3
44434: PUSH
44435: LD_INT 4
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 3
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 5
44454: PUSH
44455: LD_INT 3
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 3
44464: PUSH
44465: LD_INT 5
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 3
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 4
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 4
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 4
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 4
44567: NEG
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 4
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: NEG
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 4
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 5
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 5
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 5
44646: NEG
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 3
44669: NEG
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: NEG
44682: PUSH
44683: LD_INT 4
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 4
44729: NEG
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 4
44741: NEG
44742: PUSH
44743: LD_INT 4
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 4
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 4
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 4
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 5
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 4
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: LD_INT 3
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 4
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 5
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 5
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44924: LD_ADDR_VAR 0 31
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 4
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 5
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: LD_INT 5
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 4
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 5
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 3
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 4
45080: NEG
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 4
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 4
45103: NEG
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 4
45126: NEG
45127: PUSH
45128: LD_INT 4
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 4
45138: NEG
45139: PUSH
45140: LD_INT 5
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 3
45150: NEG
45151: PUSH
45152: LD_INT 4
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 3
45162: NEG
45163: PUSH
45164: LD_INT 3
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 4
45174: NEG
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 5
45186: NEG
45187: PUSH
45188: LD_INT 4
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 5
45198: NEG
45199: PUSH
45200: LD_INT 5
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 3
45210: NEG
45211: PUSH
45212: LD_INT 5
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 5
45222: NEG
45223: PUSH
45224: LD_INT 3
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 0
45234: PUSH
45235: LD_INT 3
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 4
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 4
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: LD_INT 4
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 4
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 4
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 5
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 5
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 4
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45474: LD_ADDR_VAR 0 32
45478: PUSH
45479: LD_INT 4
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 4
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 3
45504: NEG
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 4
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 5
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 5
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 5
45560: NEG
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 3
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: LD_INT 4
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 3
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 4
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 4
45655: NEG
45656: PUSH
45657: LD_INT 4
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 2
45667: NEG
45668: PUSH
45669: LD_INT 4
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 4
45679: NEG
45680: PUSH
45681: LD_INT 2
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 4
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 5
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: LD_INT 4
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 3
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 4
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 5
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 3
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 3
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 4
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 4
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: LD_INT 1
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 4
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 4
45886: PUSH
45887: LD_INT 4
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: LD_INT 3
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 5
45906: PUSH
45907: LD_INT 4
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 5
45916: PUSH
45917: LD_INT 5
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 4
45926: PUSH
45927: LD_INT 5
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: LD_INT 4
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 5
45956: PUSH
45957: LD_INT 3
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: LD_INT 5
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46021: LD_ADDR_VAR 0 33
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: LD_INT 4
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 4
46040: NEG
46041: PUSH
46042: LD_INT 5
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: LD_INT 4
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 4
46076: NEG
46077: PUSH
46078: LD_INT 3
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 5
46088: NEG
46089: PUSH
46090: LD_INT 4
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 5
46100: NEG
46101: PUSH
46102: LD_INT 5
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 5
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 5
46124: NEG
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: LD_INT 3
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 4
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 3
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: LD_INT 3
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 4
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 4
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 4
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 5
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 5
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 4
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: LD_INT 2
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 5
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 3
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 4
46351: PUSH
46352: LD_INT 3
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 4
46361: PUSH
46362: LD_INT 4
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: LD_INT 4
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 4
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 4
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 4
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 4
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 5
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 5
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 4
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 3
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 5
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: LD_INT 3
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46559: LD_ADDR_VAR 0 34
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 4
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 5
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 4
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 4
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 5
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: LD_INT 5
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 4
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 4
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 4
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 4
46761: PUSH
46762: LD_INT 4
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 4
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 5
46781: PUSH
46782: LD_INT 4
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 5
46791: PUSH
46792: LD_INT 5
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 4
46801: PUSH
46802: LD_INT 5
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 3
46811: PUSH
46812: LD_INT 4
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 3
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 5
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: LD_INT 5
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 4
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 4
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 3
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 4
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 4
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 4
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 5
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 5
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 5
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// end ; end ;
47091: GO 47094
47093: POP
// case btype of b_depot , b_warehouse :
47094: LD_VAR 0 1
47098: PUSH
47099: LD_INT 0
47101: DOUBLE
47102: EQUAL
47103: IFTRUE 47113
47105: LD_INT 1
47107: DOUBLE
47108: EQUAL
47109: IFTRUE 47113
47111: GO 47314
47113: POP
// case nation of nation_american :
47114: LD_VAR 0 5
47118: PUSH
47119: LD_INT 1
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47183
47127: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47128: LD_ADDR_VAR 0 9
47132: PUSH
47133: LD_VAR 0 11
47137: PUSH
47138: LD_VAR 0 12
47142: PUSH
47143: LD_VAR 0 13
47147: PUSH
47148: LD_VAR 0 14
47152: PUSH
47153: LD_VAR 0 15
47157: PUSH
47158: LD_VAR 0 16
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: PUSH
47171: LD_VAR 0 4
47175: PUSH
47176: LD_INT 1
47178: PLUS
47179: ARRAY
47180: ST_TO_ADDR
47181: GO 47312
47183: LD_INT 2
47185: DOUBLE
47186: EQUAL
47187: IFTRUE 47191
47189: GO 47247
47191: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47192: LD_ADDR_VAR 0 9
47196: PUSH
47197: LD_VAR 0 17
47201: PUSH
47202: LD_VAR 0 18
47206: PUSH
47207: LD_VAR 0 19
47211: PUSH
47212: LD_VAR 0 20
47216: PUSH
47217: LD_VAR 0 21
47221: PUSH
47222: LD_VAR 0 22
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: LD_VAR 0 4
47239: PUSH
47240: LD_INT 1
47242: PLUS
47243: ARRAY
47244: ST_TO_ADDR
47245: GO 47312
47247: LD_INT 3
47249: DOUBLE
47250: EQUAL
47251: IFTRUE 47255
47253: GO 47311
47255: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47256: LD_ADDR_VAR 0 9
47260: PUSH
47261: LD_VAR 0 23
47265: PUSH
47266: LD_VAR 0 24
47270: PUSH
47271: LD_VAR 0 25
47275: PUSH
47276: LD_VAR 0 26
47280: PUSH
47281: LD_VAR 0 27
47285: PUSH
47286: LD_VAR 0 28
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: PUSH
47299: LD_VAR 0 4
47303: PUSH
47304: LD_INT 1
47306: PLUS
47307: ARRAY
47308: ST_TO_ADDR
47309: GO 47312
47311: POP
47312: GO 47867
47314: LD_INT 2
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47328
47320: LD_INT 3
47322: DOUBLE
47323: EQUAL
47324: IFTRUE 47328
47326: GO 47384
47328: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47329: LD_ADDR_VAR 0 9
47333: PUSH
47334: LD_VAR 0 29
47338: PUSH
47339: LD_VAR 0 30
47343: PUSH
47344: LD_VAR 0 31
47348: PUSH
47349: LD_VAR 0 32
47353: PUSH
47354: LD_VAR 0 33
47358: PUSH
47359: LD_VAR 0 34
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: PUSH
47372: LD_VAR 0 4
47376: PUSH
47377: LD_INT 1
47379: PLUS
47380: ARRAY
47381: ST_TO_ADDR
47382: GO 47867
47384: LD_INT 16
47386: DOUBLE
47387: EQUAL
47388: IFTRUE 47446
47390: LD_INT 17
47392: DOUBLE
47393: EQUAL
47394: IFTRUE 47446
47396: LD_INT 18
47398: DOUBLE
47399: EQUAL
47400: IFTRUE 47446
47402: LD_INT 19
47404: DOUBLE
47405: EQUAL
47406: IFTRUE 47446
47408: LD_INT 22
47410: DOUBLE
47411: EQUAL
47412: IFTRUE 47446
47414: LD_INT 20
47416: DOUBLE
47417: EQUAL
47418: IFTRUE 47446
47420: LD_INT 21
47422: DOUBLE
47423: EQUAL
47424: IFTRUE 47446
47426: LD_INT 23
47428: DOUBLE
47429: EQUAL
47430: IFTRUE 47446
47432: LD_INT 24
47434: DOUBLE
47435: EQUAL
47436: IFTRUE 47446
47438: LD_INT 25
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47502
47446: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_VAR 0 35
47456: PUSH
47457: LD_VAR 0 36
47461: PUSH
47462: LD_VAR 0 37
47466: PUSH
47467: LD_VAR 0 38
47471: PUSH
47472: LD_VAR 0 39
47476: PUSH
47477: LD_VAR 0 40
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: PUSH
47490: LD_VAR 0 4
47494: PUSH
47495: LD_INT 1
47497: PLUS
47498: ARRAY
47499: ST_TO_ADDR
47500: GO 47867
47502: LD_INT 6
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47558
47508: LD_INT 7
47510: DOUBLE
47511: EQUAL
47512: IFTRUE 47558
47514: LD_INT 8
47516: DOUBLE
47517: EQUAL
47518: IFTRUE 47558
47520: LD_INT 13
47522: DOUBLE
47523: EQUAL
47524: IFTRUE 47558
47526: LD_INT 12
47528: DOUBLE
47529: EQUAL
47530: IFTRUE 47558
47532: LD_INT 15
47534: DOUBLE
47535: EQUAL
47536: IFTRUE 47558
47538: LD_INT 11
47540: DOUBLE
47541: EQUAL
47542: IFTRUE 47558
47544: LD_INT 14
47546: DOUBLE
47547: EQUAL
47548: IFTRUE 47558
47550: LD_INT 10
47552: DOUBLE
47553: EQUAL
47554: IFTRUE 47558
47556: GO 47614
47558: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47559: LD_ADDR_VAR 0 9
47563: PUSH
47564: LD_VAR 0 41
47568: PUSH
47569: LD_VAR 0 42
47573: PUSH
47574: LD_VAR 0 43
47578: PUSH
47579: LD_VAR 0 44
47583: PUSH
47584: LD_VAR 0 45
47588: PUSH
47589: LD_VAR 0 46
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: PUSH
47602: LD_VAR 0 4
47606: PUSH
47607: LD_INT 1
47609: PLUS
47610: ARRAY
47611: ST_TO_ADDR
47612: GO 47867
47614: LD_INT 36
47616: DOUBLE
47617: EQUAL
47618: IFTRUE 47622
47620: GO 47678
47622: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47623: LD_ADDR_VAR 0 9
47627: PUSH
47628: LD_VAR 0 47
47632: PUSH
47633: LD_VAR 0 48
47637: PUSH
47638: LD_VAR 0 49
47642: PUSH
47643: LD_VAR 0 50
47647: PUSH
47648: LD_VAR 0 51
47652: PUSH
47653: LD_VAR 0 52
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: PUSH
47666: LD_VAR 0 4
47670: PUSH
47671: LD_INT 1
47673: PLUS
47674: ARRAY
47675: ST_TO_ADDR
47676: GO 47867
47678: LD_INT 4
47680: DOUBLE
47681: EQUAL
47682: IFTRUE 47704
47684: LD_INT 5
47686: DOUBLE
47687: EQUAL
47688: IFTRUE 47704
47690: LD_INT 34
47692: DOUBLE
47693: EQUAL
47694: IFTRUE 47704
47696: LD_INT 37
47698: DOUBLE
47699: EQUAL
47700: IFTRUE 47704
47702: GO 47760
47704: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47705: LD_ADDR_VAR 0 9
47709: PUSH
47710: LD_VAR 0 53
47714: PUSH
47715: LD_VAR 0 54
47719: PUSH
47720: LD_VAR 0 55
47724: PUSH
47725: LD_VAR 0 56
47729: PUSH
47730: LD_VAR 0 57
47734: PUSH
47735: LD_VAR 0 58
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: PUSH
47748: LD_VAR 0 4
47752: PUSH
47753: LD_INT 1
47755: PLUS
47756: ARRAY
47757: ST_TO_ADDR
47758: GO 47867
47760: LD_INT 31
47762: DOUBLE
47763: EQUAL
47764: IFTRUE 47810
47766: LD_INT 32
47768: DOUBLE
47769: EQUAL
47770: IFTRUE 47810
47772: LD_INT 33
47774: DOUBLE
47775: EQUAL
47776: IFTRUE 47810
47778: LD_INT 27
47780: DOUBLE
47781: EQUAL
47782: IFTRUE 47810
47784: LD_INT 26
47786: DOUBLE
47787: EQUAL
47788: IFTRUE 47810
47790: LD_INT 28
47792: DOUBLE
47793: EQUAL
47794: IFTRUE 47810
47796: LD_INT 29
47798: DOUBLE
47799: EQUAL
47800: IFTRUE 47810
47802: LD_INT 30
47804: DOUBLE
47805: EQUAL
47806: IFTRUE 47810
47808: GO 47866
47810: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47811: LD_ADDR_VAR 0 9
47815: PUSH
47816: LD_VAR 0 59
47820: PUSH
47821: LD_VAR 0 60
47825: PUSH
47826: LD_VAR 0 61
47830: PUSH
47831: LD_VAR 0 62
47835: PUSH
47836: LD_VAR 0 63
47840: PUSH
47841: LD_VAR 0 64
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: PUSH
47854: LD_VAR 0 4
47858: PUSH
47859: LD_INT 1
47861: PLUS
47862: ARRAY
47863: ST_TO_ADDR
47864: GO 47867
47866: POP
// temp_list2 = [ ] ;
47867: LD_ADDR_VAR 0 10
47871: PUSH
47872: EMPTY
47873: ST_TO_ADDR
// for i in temp_list do
47874: LD_ADDR_VAR 0 8
47878: PUSH
47879: LD_VAR 0 9
47883: PUSH
47884: FOR_IN
47885: IFFALSE 47937
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47887: LD_ADDR_VAR 0 10
47891: PUSH
47892: LD_VAR 0 10
47896: PUSH
47897: LD_VAR 0 8
47901: PUSH
47902: LD_INT 1
47904: ARRAY
47905: PUSH
47906: LD_VAR 0 2
47910: PLUS
47911: PUSH
47912: LD_VAR 0 8
47916: PUSH
47917: LD_INT 2
47919: ARRAY
47920: PUSH
47921: LD_VAR 0 3
47925: PLUS
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: EMPTY
47932: LIST
47933: ADD
47934: ST_TO_ADDR
47935: GO 47884
47937: POP
47938: POP
// result = temp_list2 ;
47939: LD_ADDR_VAR 0 7
47943: PUSH
47944: LD_VAR 0 10
47948: ST_TO_ADDR
// end ;
47949: LD_VAR 0 7
47953: RET
// export function EnemyInRange ( unit , dist ) ; begin
47954: LD_INT 0
47956: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47957: LD_ADDR_VAR 0 3
47961: PUSH
47962: LD_VAR 0 1
47966: PPUSH
47967: CALL_OW 255
47971: PPUSH
47972: LD_VAR 0 1
47976: PPUSH
47977: CALL_OW 250
47981: PPUSH
47982: LD_VAR 0 1
47986: PPUSH
47987: CALL_OW 251
47991: PPUSH
47992: LD_VAR 0 2
47996: PPUSH
47997: CALL 21327 0 4
48001: PUSH
48002: LD_INT 4
48004: ARRAY
48005: ST_TO_ADDR
// end ;
48006: LD_VAR 0 3
48010: RET
// export function PlayerSeeMe ( unit ) ; begin
48011: LD_INT 0
48013: PPUSH
// result := See ( your_side , unit ) ;
48014: LD_ADDR_VAR 0 2
48018: PUSH
48019: LD_OWVAR 2
48023: PPUSH
48024: LD_VAR 0 1
48028: PPUSH
48029: CALL_OW 292
48033: ST_TO_ADDR
// end ;
48034: LD_VAR 0 2
48038: RET
// export function ReverseDir ( unit ) ; begin
48039: LD_INT 0
48041: PPUSH
// if not unit then
48042: LD_VAR 0 1
48046: NOT
48047: IFFALSE 48051
// exit ;
48049: GO 48074
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48051: LD_ADDR_VAR 0 2
48055: PUSH
48056: LD_VAR 0 1
48060: PPUSH
48061: CALL_OW 254
48065: PUSH
48066: LD_INT 3
48068: PLUS
48069: PUSH
48070: LD_INT 6
48072: MOD
48073: ST_TO_ADDR
// end ;
48074: LD_VAR 0 2
48078: RET
// export function ReverseArray ( array ) ; var i ; begin
48079: LD_INT 0
48081: PPUSH
48082: PPUSH
// if not array then
48083: LD_VAR 0 1
48087: NOT
48088: IFFALSE 48092
// exit ;
48090: GO 48147
// result := [ ] ;
48092: LD_ADDR_VAR 0 2
48096: PUSH
48097: EMPTY
48098: ST_TO_ADDR
// for i := array downto 1 do
48099: LD_ADDR_VAR 0 3
48103: PUSH
48104: DOUBLE
48105: LD_VAR 0 1
48109: INC
48110: ST_TO_ADDR
48111: LD_INT 1
48113: PUSH
48114: FOR_DOWNTO
48115: IFFALSE 48145
// result := Join ( result , array [ i ] ) ;
48117: LD_ADDR_VAR 0 2
48121: PUSH
48122: LD_VAR 0 2
48126: PPUSH
48127: LD_VAR 0 1
48131: PUSH
48132: LD_VAR 0 3
48136: ARRAY
48137: PPUSH
48138: CALL 52792 0 2
48142: ST_TO_ADDR
48143: GO 48114
48145: POP
48146: POP
// end ;
48147: LD_VAR 0 2
48151: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48152: LD_INT 0
48154: PPUSH
48155: PPUSH
48156: PPUSH
48157: PPUSH
48158: PPUSH
48159: PPUSH
// if not unit or not hexes then
48160: LD_VAR 0 1
48164: NOT
48165: PUSH
48166: LD_VAR 0 2
48170: NOT
48171: OR
48172: IFFALSE 48176
// exit ;
48174: GO 48299
// dist := 9999 ;
48176: LD_ADDR_VAR 0 5
48180: PUSH
48181: LD_INT 9999
48183: ST_TO_ADDR
// for i = 1 to hexes do
48184: LD_ADDR_VAR 0 4
48188: PUSH
48189: DOUBLE
48190: LD_INT 1
48192: DEC
48193: ST_TO_ADDR
48194: LD_VAR 0 2
48198: PUSH
48199: FOR_TO
48200: IFFALSE 48287
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48202: LD_ADDR_VAR 0 6
48206: PUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: LD_VAR 0 2
48216: PUSH
48217: LD_VAR 0 4
48221: ARRAY
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 2
48231: PUSH
48232: LD_VAR 0 4
48236: ARRAY
48237: PUSH
48238: LD_INT 2
48240: ARRAY
48241: PPUSH
48242: CALL_OW 297
48246: ST_TO_ADDR
// if tdist < dist then
48247: LD_VAR 0 6
48251: PUSH
48252: LD_VAR 0 5
48256: LESS
48257: IFFALSE 48285
// begin hex := hexes [ i ] ;
48259: LD_ADDR_VAR 0 8
48263: PUSH
48264: LD_VAR 0 2
48268: PUSH
48269: LD_VAR 0 4
48273: ARRAY
48274: ST_TO_ADDR
// dist := tdist ;
48275: LD_ADDR_VAR 0 5
48279: PUSH
48280: LD_VAR 0 6
48284: ST_TO_ADDR
// end ; end ;
48285: GO 48199
48287: POP
48288: POP
// result := hex ;
48289: LD_ADDR_VAR 0 3
48293: PUSH
48294: LD_VAR 0 8
48298: ST_TO_ADDR
// end ;
48299: LD_VAR 0 3
48303: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48304: LD_INT 0
48306: PPUSH
48307: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48308: LD_VAR 0 1
48312: NOT
48313: PUSH
48314: LD_VAR 0 1
48318: PUSH
48319: LD_INT 21
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 23
48331: PUSH
48332: LD_INT 2
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PPUSH
48343: CALL_OW 69
48347: IN
48348: NOT
48349: OR
48350: IFFALSE 48354
// exit ;
48352: GO 48401
// for i = 1 to 3 do
48354: LD_ADDR_VAR 0 3
48358: PUSH
48359: DOUBLE
48360: LD_INT 1
48362: DEC
48363: ST_TO_ADDR
48364: LD_INT 3
48366: PUSH
48367: FOR_TO
48368: IFFALSE 48399
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 250
48379: PPUSH
48380: LD_VAR 0 1
48384: PPUSH
48385: CALL_OW 251
48389: PPUSH
48390: LD_INT 1
48392: PPUSH
48393: CALL_OW 453
48397: GO 48367
48399: POP
48400: POP
// end ;
48401: LD_VAR 0 2
48405: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48406: LD_INT 0
48408: PPUSH
48409: PPUSH
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
// if not unit or not enemy_unit then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: NOT
48425: OR
48426: IFFALSE 48430
// exit ;
48428: GO 48897
// if GetLives ( i ) < 250 then
48430: LD_VAR 0 4
48434: PPUSH
48435: CALL_OW 256
48439: PUSH
48440: LD_INT 250
48442: LESS
48443: IFFALSE 48456
// begin ComAutodestruct ( i ) ;
48445: LD_VAR 0 4
48449: PPUSH
48450: CALL 48304 0 1
// exit ;
48454: GO 48897
// end ; x := GetX ( enemy_unit ) ;
48456: LD_ADDR_VAR 0 7
48460: PUSH
48461: LD_VAR 0 2
48465: PPUSH
48466: CALL_OW 250
48470: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48471: LD_ADDR_VAR 0 8
48475: PUSH
48476: LD_VAR 0 2
48480: PPUSH
48481: CALL_OW 251
48485: ST_TO_ADDR
// if not x or not y then
48486: LD_VAR 0 7
48490: NOT
48491: PUSH
48492: LD_VAR 0 8
48496: NOT
48497: OR
48498: IFFALSE 48502
// exit ;
48500: GO 48897
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48502: LD_ADDR_VAR 0 6
48506: PUSH
48507: LD_VAR 0 7
48511: PPUSH
48512: LD_INT 0
48514: PPUSH
48515: LD_INT 4
48517: PPUSH
48518: CALL_OW 272
48522: PUSH
48523: LD_VAR 0 8
48527: PPUSH
48528: LD_INT 0
48530: PPUSH
48531: LD_INT 4
48533: PPUSH
48534: CALL_OW 273
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_VAR 0 7
48547: PPUSH
48548: LD_INT 1
48550: PPUSH
48551: LD_INT 4
48553: PPUSH
48554: CALL_OW 272
48558: PUSH
48559: LD_VAR 0 8
48563: PPUSH
48564: LD_INT 1
48566: PPUSH
48567: LD_INT 4
48569: PPUSH
48570: CALL_OW 273
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_VAR 0 7
48583: PPUSH
48584: LD_INT 2
48586: PPUSH
48587: LD_INT 4
48589: PPUSH
48590: CALL_OW 272
48594: PUSH
48595: LD_VAR 0 8
48599: PPUSH
48600: LD_INT 2
48602: PPUSH
48603: LD_INT 4
48605: PPUSH
48606: CALL_OW 273
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_VAR 0 7
48619: PPUSH
48620: LD_INT 3
48622: PPUSH
48623: LD_INT 4
48625: PPUSH
48626: CALL_OW 272
48630: PUSH
48631: LD_VAR 0 8
48635: PPUSH
48636: LD_INT 3
48638: PPUSH
48639: LD_INT 4
48641: PPUSH
48642: CALL_OW 273
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_VAR 0 7
48655: PPUSH
48656: LD_INT 4
48658: PPUSH
48659: LD_INT 4
48661: PPUSH
48662: CALL_OW 272
48666: PUSH
48667: LD_VAR 0 8
48671: PPUSH
48672: LD_INT 4
48674: PPUSH
48675: LD_INT 4
48677: PPUSH
48678: CALL_OW 273
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_VAR 0 7
48691: PPUSH
48692: LD_INT 5
48694: PPUSH
48695: LD_INT 4
48697: PPUSH
48698: CALL_OW 272
48702: PUSH
48703: LD_VAR 0 8
48707: PPUSH
48708: LD_INT 5
48710: PPUSH
48711: LD_INT 4
48713: PPUSH
48714: CALL_OW 273
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: ST_TO_ADDR
// for i = tmp downto 1 do
48731: LD_ADDR_VAR 0 4
48735: PUSH
48736: DOUBLE
48737: LD_VAR 0 6
48741: INC
48742: ST_TO_ADDR
48743: LD_INT 1
48745: PUSH
48746: FOR_DOWNTO
48747: IFFALSE 48848
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48749: LD_VAR 0 6
48753: PUSH
48754: LD_VAR 0 4
48758: ARRAY
48759: PUSH
48760: LD_INT 1
48762: ARRAY
48763: PPUSH
48764: LD_VAR 0 6
48768: PUSH
48769: LD_VAR 0 4
48773: ARRAY
48774: PUSH
48775: LD_INT 2
48777: ARRAY
48778: PPUSH
48779: CALL_OW 488
48783: NOT
48784: PUSH
48785: LD_VAR 0 6
48789: PUSH
48790: LD_VAR 0 4
48794: ARRAY
48795: PUSH
48796: LD_INT 1
48798: ARRAY
48799: PPUSH
48800: LD_VAR 0 6
48804: PUSH
48805: LD_VAR 0 4
48809: ARRAY
48810: PUSH
48811: LD_INT 2
48813: ARRAY
48814: PPUSH
48815: CALL_OW 428
48819: PUSH
48820: LD_INT 0
48822: NONEQUAL
48823: OR
48824: IFFALSE 48846
// tmp := Delete ( tmp , i ) ;
48826: LD_ADDR_VAR 0 6
48830: PUSH
48831: LD_VAR 0 6
48835: PPUSH
48836: LD_VAR 0 4
48840: PPUSH
48841: CALL_OW 3
48845: ST_TO_ADDR
48846: GO 48746
48848: POP
48849: POP
// j := GetClosestHex ( unit , tmp ) ;
48850: LD_ADDR_VAR 0 5
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: LD_VAR 0 6
48864: PPUSH
48865: CALL 48152 0 2
48869: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48870: LD_VAR 0 1
48874: PPUSH
48875: LD_VAR 0 5
48879: PUSH
48880: LD_INT 1
48882: ARRAY
48883: PPUSH
48884: LD_VAR 0 5
48888: PUSH
48889: LD_INT 2
48891: ARRAY
48892: PPUSH
48893: CALL_OW 111
// end ;
48897: LD_VAR 0 3
48901: RET
// export function PrepareApemanSoldier ( ) ; begin
48902: LD_INT 0
48904: PPUSH
// uc_nation := 0 ;
48905: LD_ADDR_OWVAR 21
48909: PUSH
48910: LD_INT 0
48912: ST_TO_ADDR
// hc_sex := sex_male ;
48913: LD_ADDR_OWVAR 27
48917: PUSH
48918: LD_INT 1
48920: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48921: LD_ADDR_OWVAR 28
48925: PUSH
48926: LD_INT 15
48928: ST_TO_ADDR
// hc_gallery :=  ;
48929: LD_ADDR_OWVAR 33
48933: PUSH
48934: LD_STRING 
48936: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48937: LD_ADDR_OWVAR 31
48941: PUSH
48942: LD_INT 0
48944: PPUSH
48945: LD_INT 3
48947: PPUSH
48948: CALL_OW 12
48952: PUSH
48953: LD_INT 0
48955: PPUSH
48956: LD_INT 3
48958: PPUSH
48959: CALL_OW 12
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: ST_TO_ADDR
// end ;
48976: LD_VAR 0 1
48980: RET
// export function PrepareApemanEngineer ( ) ; begin
48981: LD_INT 0
48983: PPUSH
// uc_nation := 0 ;
48984: LD_ADDR_OWVAR 21
48988: PUSH
48989: LD_INT 0
48991: ST_TO_ADDR
// hc_sex := sex_male ;
48992: LD_ADDR_OWVAR 27
48996: PUSH
48997: LD_INT 1
48999: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49000: LD_ADDR_OWVAR 28
49004: PUSH
49005: LD_INT 16
49007: ST_TO_ADDR
// hc_gallery :=  ;
49008: LD_ADDR_OWVAR 33
49012: PUSH
49013: LD_STRING 
49015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49016: LD_ADDR_OWVAR 31
49020: PUSH
49021: LD_INT 0
49023: PPUSH
49024: LD_INT 3
49026: PPUSH
49027: CALL_OW 12
49031: PUSH
49032: LD_INT 0
49034: PPUSH
49035: LD_INT 3
49037: PPUSH
49038: CALL_OW 12
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// end ;
49055: LD_VAR 0 1
49059: RET
// export function PrepareApeman ( agressivity ) ; begin
49060: LD_INT 0
49062: PPUSH
// uc_side := 0 ;
49063: LD_ADDR_OWVAR 20
49067: PUSH
49068: LD_INT 0
49070: ST_TO_ADDR
// uc_nation := 0 ;
49071: LD_ADDR_OWVAR 21
49075: PUSH
49076: LD_INT 0
49078: ST_TO_ADDR
// hc_sex := sex_male ;
49079: LD_ADDR_OWVAR 27
49083: PUSH
49084: LD_INT 1
49086: ST_TO_ADDR
// hc_class := class_apeman ;
49087: LD_ADDR_OWVAR 28
49091: PUSH
49092: LD_INT 12
49094: ST_TO_ADDR
// hc_gallery :=  ;
49095: LD_ADDR_OWVAR 33
49099: PUSH
49100: LD_STRING 
49102: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49103: LD_ADDR_OWVAR 35
49107: PUSH
49108: LD_VAR 0 1
49112: NEG
49113: PPUSH
49114: LD_VAR 0 1
49118: PPUSH
49119: CALL_OW 12
49123: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49124: LD_ADDR_OWVAR 31
49128: PUSH
49129: LD_INT 0
49131: PPUSH
49132: LD_INT 3
49134: PPUSH
49135: CALL_OW 12
49139: PUSH
49140: LD_INT 0
49142: PPUSH
49143: LD_INT 3
49145: PPUSH
49146: CALL_OW 12
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 2
49167: RET
// export function PrepareTiger ( agressivity ) ; begin
49168: LD_INT 0
49170: PPUSH
// uc_side := 0 ;
49171: LD_ADDR_OWVAR 20
49175: PUSH
49176: LD_INT 0
49178: ST_TO_ADDR
// uc_nation := 0 ;
49179: LD_ADDR_OWVAR 21
49183: PUSH
49184: LD_INT 0
49186: ST_TO_ADDR
// hc_class := class_tiger ;
49187: LD_ADDR_OWVAR 28
49191: PUSH
49192: LD_INT 14
49194: ST_TO_ADDR
// hc_gallery :=  ;
49195: LD_ADDR_OWVAR 33
49199: PUSH
49200: LD_STRING 
49202: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49203: LD_ADDR_OWVAR 35
49207: PUSH
49208: LD_VAR 0 1
49212: NEG
49213: PPUSH
49214: LD_VAR 0 1
49218: PPUSH
49219: CALL_OW 12
49223: ST_TO_ADDR
// end ;
49224: LD_VAR 0 2
49228: RET
// export function PrepareEnchidna ( ) ; begin
49229: LD_INT 0
49231: PPUSH
// uc_side := 0 ;
49232: LD_ADDR_OWVAR 20
49236: PUSH
49237: LD_INT 0
49239: ST_TO_ADDR
// uc_nation := 0 ;
49240: LD_ADDR_OWVAR 21
49244: PUSH
49245: LD_INT 0
49247: ST_TO_ADDR
// hc_class := class_baggie ;
49248: LD_ADDR_OWVAR 28
49252: PUSH
49253: LD_INT 13
49255: ST_TO_ADDR
// hc_gallery :=  ;
49256: LD_ADDR_OWVAR 33
49260: PUSH
49261: LD_STRING 
49263: ST_TO_ADDR
// end ;
49264: LD_VAR 0 1
49268: RET
// export function PrepareFrog ( ) ; begin
49269: LD_INT 0
49271: PPUSH
// uc_side := 0 ;
49272: LD_ADDR_OWVAR 20
49276: PUSH
49277: LD_INT 0
49279: ST_TO_ADDR
// uc_nation := 0 ;
49280: LD_ADDR_OWVAR 21
49284: PUSH
49285: LD_INT 0
49287: ST_TO_ADDR
// hc_class := class_frog ;
49288: LD_ADDR_OWVAR 28
49292: PUSH
49293: LD_INT 19
49295: ST_TO_ADDR
// hc_gallery :=  ;
49296: LD_ADDR_OWVAR 33
49300: PUSH
49301: LD_STRING 
49303: ST_TO_ADDR
// end ;
49304: LD_VAR 0 1
49308: RET
// export function PrepareFish ( ) ; begin
49309: LD_INT 0
49311: PPUSH
// uc_side := 0 ;
49312: LD_ADDR_OWVAR 20
49316: PUSH
49317: LD_INT 0
49319: ST_TO_ADDR
// uc_nation := 0 ;
49320: LD_ADDR_OWVAR 21
49324: PUSH
49325: LD_INT 0
49327: ST_TO_ADDR
// hc_class := class_fish ;
49328: LD_ADDR_OWVAR 28
49332: PUSH
49333: LD_INT 20
49335: ST_TO_ADDR
// hc_gallery :=  ;
49336: LD_ADDR_OWVAR 33
49340: PUSH
49341: LD_STRING 
49343: ST_TO_ADDR
// end ;
49344: LD_VAR 0 1
49348: RET
// export function PrepareBird ( ) ; begin
49349: LD_INT 0
49351: PPUSH
// uc_side := 0 ;
49352: LD_ADDR_OWVAR 20
49356: PUSH
49357: LD_INT 0
49359: ST_TO_ADDR
// uc_nation := 0 ;
49360: LD_ADDR_OWVAR 21
49364: PUSH
49365: LD_INT 0
49367: ST_TO_ADDR
// hc_class := class_phororhacos ;
49368: LD_ADDR_OWVAR 28
49372: PUSH
49373: LD_INT 18
49375: ST_TO_ADDR
// hc_gallery :=  ;
49376: LD_ADDR_OWVAR 33
49380: PUSH
49381: LD_STRING 
49383: ST_TO_ADDR
// end ;
49384: LD_VAR 0 1
49388: RET
// export function PrepareHorse ( ) ; begin
49389: LD_INT 0
49391: PPUSH
// uc_side := 0 ;
49392: LD_ADDR_OWVAR 20
49396: PUSH
49397: LD_INT 0
49399: ST_TO_ADDR
// uc_nation := 0 ;
49400: LD_ADDR_OWVAR 21
49404: PUSH
49405: LD_INT 0
49407: ST_TO_ADDR
// hc_class := class_horse ;
49408: LD_ADDR_OWVAR 28
49412: PUSH
49413: LD_INT 21
49415: ST_TO_ADDR
// hc_gallery :=  ;
49416: LD_ADDR_OWVAR 33
49420: PUSH
49421: LD_STRING 
49423: ST_TO_ADDR
// end ;
49424: LD_VAR 0 1
49428: RET
// export function PrepareMastodont ( ) ; begin
49429: LD_INT 0
49431: PPUSH
// uc_side := 0 ;
49432: LD_ADDR_OWVAR 20
49436: PUSH
49437: LD_INT 0
49439: ST_TO_ADDR
// uc_nation := 0 ;
49440: LD_ADDR_OWVAR 21
49444: PUSH
49445: LD_INT 0
49447: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49448: LD_ADDR_OWVAR 37
49452: PUSH
49453: LD_INT 31
49455: ST_TO_ADDR
// vc_control := control_rider ;
49456: LD_ADDR_OWVAR 38
49460: PUSH
49461: LD_INT 4
49463: ST_TO_ADDR
// end ;
49464: LD_VAR 0 1
49468: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49469: LD_INT 0
49471: PPUSH
49472: PPUSH
49473: PPUSH
// uc_side = 0 ;
49474: LD_ADDR_OWVAR 20
49478: PUSH
49479: LD_INT 0
49481: ST_TO_ADDR
// uc_nation = 0 ;
49482: LD_ADDR_OWVAR 21
49486: PUSH
49487: LD_INT 0
49489: ST_TO_ADDR
// InitHc_All ( ) ;
49490: CALL_OW 584
// InitVc ;
49494: CALL_OW 20
// if mastodonts then
49498: LD_VAR 0 6
49502: IFFALSE 49569
// for i = 1 to mastodonts do
49504: LD_ADDR_VAR 0 11
49508: PUSH
49509: DOUBLE
49510: LD_INT 1
49512: DEC
49513: ST_TO_ADDR
49514: LD_VAR 0 6
49518: PUSH
49519: FOR_TO
49520: IFFALSE 49567
// begin vc_chassis := 31 ;
49522: LD_ADDR_OWVAR 37
49526: PUSH
49527: LD_INT 31
49529: ST_TO_ADDR
// vc_control := control_rider ;
49530: LD_ADDR_OWVAR 38
49534: PUSH
49535: LD_INT 4
49537: ST_TO_ADDR
// animal := CreateVehicle ;
49538: LD_ADDR_VAR 0 12
49542: PUSH
49543: CALL_OW 45
49547: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49548: LD_VAR 0 12
49552: PPUSH
49553: LD_VAR 0 8
49557: PPUSH
49558: LD_INT 0
49560: PPUSH
49561: CALL 51697 0 3
// end ;
49565: GO 49519
49567: POP
49568: POP
// if horses then
49569: LD_VAR 0 5
49573: IFFALSE 49640
// for i = 1 to horses do
49575: LD_ADDR_VAR 0 11
49579: PUSH
49580: DOUBLE
49581: LD_INT 1
49583: DEC
49584: ST_TO_ADDR
49585: LD_VAR 0 5
49589: PUSH
49590: FOR_TO
49591: IFFALSE 49638
// begin hc_class := 21 ;
49593: LD_ADDR_OWVAR 28
49597: PUSH
49598: LD_INT 21
49600: ST_TO_ADDR
// hc_gallery :=  ;
49601: LD_ADDR_OWVAR 33
49605: PUSH
49606: LD_STRING 
49608: ST_TO_ADDR
// animal := CreateHuman ;
49609: LD_ADDR_VAR 0 12
49613: PUSH
49614: CALL_OW 44
49618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49619: LD_VAR 0 12
49623: PPUSH
49624: LD_VAR 0 8
49628: PPUSH
49629: LD_INT 0
49631: PPUSH
49632: CALL 51697 0 3
// end ;
49636: GO 49590
49638: POP
49639: POP
// if birds then
49640: LD_VAR 0 1
49644: IFFALSE 49711
// for i = 1 to birds do
49646: LD_ADDR_VAR 0 11
49650: PUSH
49651: DOUBLE
49652: LD_INT 1
49654: DEC
49655: ST_TO_ADDR
49656: LD_VAR 0 1
49660: PUSH
49661: FOR_TO
49662: IFFALSE 49709
// begin hc_class := 18 ;
49664: LD_ADDR_OWVAR 28
49668: PUSH
49669: LD_INT 18
49671: ST_TO_ADDR
// hc_gallery =  ;
49672: LD_ADDR_OWVAR 33
49676: PUSH
49677: LD_STRING 
49679: ST_TO_ADDR
// animal := CreateHuman ;
49680: LD_ADDR_VAR 0 12
49684: PUSH
49685: CALL_OW 44
49689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49690: LD_VAR 0 12
49694: PPUSH
49695: LD_VAR 0 8
49699: PPUSH
49700: LD_INT 0
49702: PPUSH
49703: CALL 51697 0 3
// end ;
49707: GO 49661
49709: POP
49710: POP
// if tigers then
49711: LD_VAR 0 2
49715: IFFALSE 49799
// for i = 1 to tigers do
49717: LD_ADDR_VAR 0 11
49721: PUSH
49722: DOUBLE
49723: LD_INT 1
49725: DEC
49726: ST_TO_ADDR
49727: LD_VAR 0 2
49731: PUSH
49732: FOR_TO
49733: IFFALSE 49797
// begin hc_class = class_tiger ;
49735: LD_ADDR_OWVAR 28
49739: PUSH
49740: LD_INT 14
49742: ST_TO_ADDR
// hc_gallery =  ;
49743: LD_ADDR_OWVAR 33
49747: PUSH
49748: LD_STRING 
49750: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49751: LD_ADDR_OWVAR 35
49755: PUSH
49756: LD_INT 7
49758: NEG
49759: PPUSH
49760: LD_INT 7
49762: PPUSH
49763: CALL_OW 12
49767: ST_TO_ADDR
// animal := CreateHuman ;
49768: LD_ADDR_VAR 0 12
49772: PUSH
49773: CALL_OW 44
49777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49778: LD_VAR 0 12
49782: PPUSH
49783: LD_VAR 0 8
49787: PPUSH
49788: LD_INT 0
49790: PPUSH
49791: CALL 51697 0 3
// end ;
49795: GO 49732
49797: POP
49798: POP
// if apemans then
49799: LD_VAR 0 3
49803: IFFALSE 49926
// for i = 1 to apemans do
49805: LD_ADDR_VAR 0 11
49809: PUSH
49810: DOUBLE
49811: LD_INT 1
49813: DEC
49814: ST_TO_ADDR
49815: LD_VAR 0 3
49819: PUSH
49820: FOR_TO
49821: IFFALSE 49924
// begin hc_class = class_apeman ;
49823: LD_ADDR_OWVAR 28
49827: PUSH
49828: LD_INT 12
49830: ST_TO_ADDR
// hc_gallery =  ;
49831: LD_ADDR_OWVAR 33
49835: PUSH
49836: LD_STRING 
49838: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49839: LD_ADDR_OWVAR 35
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PPUSH
49848: LD_INT 2
49850: PPUSH
49851: CALL_OW 12
49855: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49856: LD_ADDR_OWVAR 31
49860: PUSH
49861: LD_INT 1
49863: PPUSH
49864: LD_INT 3
49866: PPUSH
49867: CALL_OW 12
49871: PUSH
49872: LD_INT 1
49874: PPUSH
49875: LD_INT 3
49877: PPUSH
49878: CALL_OW 12
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: ST_TO_ADDR
// animal := CreateHuman ;
49895: LD_ADDR_VAR 0 12
49899: PUSH
49900: CALL_OW 44
49904: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49905: LD_VAR 0 12
49909: PPUSH
49910: LD_VAR 0 8
49914: PPUSH
49915: LD_INT 0
49917: PPUSH
49918: CALL 51697 0 3
// end ;
49922: GO 49820
49924: POP
49925: POP
// if enchidnas then
49926: LD_VAR 0 4
49930: IFFALSE 49997
// for i = 1 to enchidnas do
49932: LD_ADDR_VAR 0 11
49936: PUSH
49937: DOUBLE
49938: LD_INT 1
49940: DEC
49941: ST_TO_ADDR
49942: LD_VAR 0 4
49946: PUSH
49947: FOR_TO
49948: IFFALSE 49995
// begin hc_class = 13 ;
49950: LD_ADDR_OWVAR 28
49954: PUSH
49955: LD_INT 13
49957: ST_TO_ADDR
// hc_gallery =  ;
49958: LD_ADDR_OWVAR 33
49962: PUSH
49963: LD_STRING 
49965: ST_TO_ADDR
// animal := CreateHuman ;
49966: LD_ADDR_VAR 0 12
49970: PUSH
49971: CALL_OW 44
49975: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49976: LD_VAR 0 12
49980: PPUSH
49981: LD_VAR 0 8
49985: PPUSH
49986: LD_INT 0
49988: PPUSH
49989: CALL 51697 0 3
// end ;
49993: GO 49947
49995: POP
49996: POP
// if fishes then
49997: LD_VAR 0 7
50001: IFFALSE 50068
// for i = 1 to fishes do
50003: LD_ADDR_VAR 0 11
50007: PUSH
50008: DOUBLE
50009: LD_INT 1
50011: DEC
50012: ST_TO_ADDR
50013: LD_VAR 0 7
50017: PUSH
50018: FOR_TO
50019: IFFALSE 50066
// begin hc_class = 20 ;
50021: LD_ADDR_OWVAR 28
50025: PUSH
50026: LD_INT 20
50028: ST_TO_ADDR
// hc_gallery =  ;
50029: LD_ADDR_OWVAR 33
50033: PUSH
50034: LD_STRING 
50036: ST_TO_ADDR
// animal := CreateHuman ;
50037: LD_ADDR_VAR 0 12
50041: PUSH
50042: CALL_OW 44
50046: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50047: LD_VAR 0 12
50051: PPUSH
50052: LD_VAR 0 9
50056: PPUSH
50057: LD_INT 0
50059: PPUSH
50060: CALL 51697 0 3
// end ;
50064: GO 50018
50066: POP
50067: POP
// end ;
50068: LD_VAR 0 10
50072: RET
// export function WantHeal ( sci , unit ) ; begin
50073: LD_INT 0
50075: PPUSH
// if GetTaskList ( sci ) > 0 then
50076: LD_VAR 0 1
50080: PPUSH
50081: CALL_OW 437
50085: PUSH
50086: LD_INT 0
50088: GREATER
50089: IFFALSE 50159
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50091: LD_VAR 0 1
50095: PPUSH
50096: CALL_OW 437
50100: PUSH
50101: LD_INT 1
50103: ARRAY
50104: PUSH
50105: LD_INT 1
50107: ARRAY
50108: PUSH
50109: LD_STRING l
50111: EQUAL
50112: PUSH
50113: LD_VAR 0 1
50117: PPUSH
50118: CALL_OW 437
50122: PUSH
50123: LD_INT 1
50125: ARRAY
50126: PUSH
50127: LD_INT 4
50129: ARRAY
50130: PUSH
50131: LD_VAR 0 2
50135: EQUAL
50136: AND
50137: IFFALSE 50149
// result := true else
50139: LD_ADDR_VAR 0 3
50143: PUSH
50144: LD_INT 1
50146: ST_TO_ADDR
50147: GO 50157
// result := false ;
50149: LD_ADDR_VAR 0 3
50153: PUSH
50154: LD_INT 0
50156: ST_TO_ADDR
// end else
50157: GO 50167
// result := false ;
50159: LD_ADDR_VAR 0 3
50163: PUSH
50164: LD_INT 0
50166: ST_TO_ADDR
// end ;
50167: LD_VAR 0 3
50171: RET
// export function HealTarget ( sci ) ; begin
50172: LD_INT 0
50174: PPUSH
// if not sci then
50175: LD_VAR 0 1
50179: NOT
50180: IFFALSE 50184
// exit ;
50182: GO 50249
// result := 0 ;
50184: LD_ADDR_VAR 0 2
50188: PUSH
50189: LD_INT 0
50191: ST_TO_ADDR
// if GetTaskList ( sci ) then
50192: LD_VAR 0 1
50196: PPUSH
50197: CALL_OW 437
50201: IFFALSE 50249
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50203: LD_VAR 0 1
50207: PPUSH
50208: CALL_OW 437
50212: PUSH
50213: LD_INT 1
50215: ARRAY
50216: PUSH
50217: LD_INT 1
50219: ARRAY
50220: PUSH
50221: LD_STRING l
50223: EQUAL
50224: IFFALSE 50249
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50226: LD_ADDR_VAR 0 2
50230: PUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: CALL_OW 437
50240: PUSH
50241: LD_INT 1
50243: ARRAY
50244: PUSH
50245: LD_INT 4
50247: ARRAY
50248: ST_TO_ADDR
// end ;
50249: LD_VAR 0 2
50253: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50254: LD_INT 0
50256: PPUSH
50257: PPUSH
50258: PPUSH
50259: PPUSH
// if not base_units then
50260: LD_VAR 0 1
50264: NOT
50265: IFFALSE 50269
// exit ;
50267: GO 50356
// result := false ;
50269: LD_ADDR_VAR 0 2
50273: PUSH
50274: LD_INT 0
50276: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50277: LD_ADDR_VAR 0 5
50281: PUSH
50282: LD_VAR 0 1
50286: PPUSH
50287: LD_INT 21
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PPUSH
50297: CALL_OW 72
50301: ST_TO_ADDR
// if not tmp then
50302: LD_VAR 0 5
50306: NOT
50307: IFFALSE 50311
// exit ;
50309: GO 50356
// for i in tmp do
50311: LD_ADDR_VAR 0 3
50315: PUSH
50316: LD_VAR 0 5
50320: PUSH
50321: FOR_IN
50322: IFFALSE 50354
// begin result := EnemyInRange ( i , 22 ) ;
50324: LD_ADDR_VAR 0 2
50328: PUSH
50329: LD_VAR 0 3
50333: PPUSH
50334: LD_INT 22
50336: PPUSH
50337: CALL 47954 0 2
50341: ST_TO_ADDR
// if result then
50342: LD_VAR 0 2
50346: IFFALSE 50352
// exit ;
50348: POP
50349: POP
50350: GO 50356
// end ;
50352: GO 50321
50354: POP
50355: POP
// end ;
50356: LD_VAR 0 2
50360: RET
// export function FilterByTag ( units , tag ) ; begin
50361: LD_INT 0
50363: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50364: LD_ADDR_VAR 0 3
50368: PUSH
50369: LD_VAR 0 1
50373: PPUSH
50374: LD_INT 120
50376: PUSH
50377: LD_VAR 0 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PPUSH
50386: CALL_OW 72
50390: ST_TO_ADDR
// end ;
50391: LD_VAR 0 3
50395: RET
// export function IsDriver ( un ) ; begin
50396: LD_INT 0
50398: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50399: LD_ADDR_VAR 0 2
50403: PUSH
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 55
50411: PUSH
50412: EMPTY
50413: LIST
50414: PPUSH
50415: CALL_OW 69
50419: IN
50420: ST_TO_ADDR
// end ;
50421: LD_VAR 0 2
50425: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50426: LD_INT 0
50428: PPUSH
50429: PPUSH
// list := [ ] ;
50430: LD_ADDR_VAR 0 5
50434: PUSH
50435: EMPTY
50436: ST_TO_ADDR
// case d of 0 :
50437: LD_VAR 0 3
50441: PUSH
50442: LD_INT 0
50444: DOUBLE
50445: EQUAL
50446: IFTRUE 50450
50448: GO 50583
50450: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50451: LD_ADDR_VAR 0 5
50455: PUSH
50456: LD_VAR 0 1
50460: PUSH
50461: LD_INT 4
50463: MINUS
50464: PUSH
50465: LD_VAR 0 2
50469: PUSH
50470: LD_INT 4
50472: MINUS
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: LIST
50481: PUSH
50482: LD_VAR 0 1
50486: PUSH
50487: LD_INT 3
50489: MINUS
50490: PUSH
50491: LD_VAR 0 2
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: LD_VAR 0 1
50508: PUSH
50509: LD_INT 4
50511: PLUS
50512: PUSH
50513: LD_VAR 0 2
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: PUSH
50526: LD_VAR 0 1
50530: PUSH
50531: LD_INT 3
50533: PLUS
50534: PUSH
50535: LD_VAR 0 2
50539: PUSH
50540: LD_INT 3
50542: PLUS
50543: PUSH
50544: LD_INT 5
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: PUSH
50552: LD_VAR 0 1
50556: PUSH
50557: LD_VAR 0 2
50561: PUSH
50562: LD_INT 4
50564: PLUS
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: ST_TO_ADDR
// end ; 1 :
50581: GO 51281
50583: LD_INT 1
50585: DOUBLE
50586: EQUAL
50587: IFTRUE 50591
50589: GO 50724
50591: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50592: LD_ADDR_VAR 0 5
50596: PUSH
50597: LD_VAR 0 1
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_INT 4
50609: MINUS
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: PUSH
50619: LD_VAR 0 1
50623: PUSH
50624: LD_INT 3
50626: MINUS
50627: PUSH
50628: LD_VAR 0 2
50632: PUSH
50633: LD_INT 3
50635: MINUS
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: PUSH
50645: LD_VAR 0 1
50649: PUSH
50650: LD_INT 4
50652: MINUS
50653: PUSH
50654: LD_VAR 0 2
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: PUSH
50667: LD_VAR 0 1
50671: PUSH
50672: LD_VAR 0 2
50676: PUSH
50677: LD_INT 3
50679: PLUS
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: PUSH
50689: LD_VAR 0 1
50693: PUSH
50694: LD_INT 4
50696: PLUS
50697: PUSH
50698: LD_VAR 0 2
50702: PUSH
50703: LD_INT 4
50705: PLUS
50706: PUSH
50707: LD_INT 5
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: ST_TO_ADDR
// end ; 2 :
50722: GO 51281
50724: LD_INT 2
50726: DOUBLE
50727: EQUAL
50728: IFTRUE 50732
50730: GO 50861
50732: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50733: LD_ADDR_VAR 0 5
50737: PUSH
50738: LD_VAR 0 1
50742: PUSH
50743: LD_VAR 0 2
50747: PUSH
50748: LD_INT 3
50750: MINUS
50751: PUSH
50752: LD_INT 3
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: PUSH
50760: LD_VAR 0 1
50764: PUSH
50765: LD_INT 4
50767: PLUS
50768: PUSH
50769: LD_VAR 0 2
50773: PUSH
50774: LD_INT 4
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: PUSH
50782: LD_VAR 0 1
50786: PUSH
50787: LD_VAR 0 2
50791: PUSH
50792: LD_INT 4
50794: PLUS
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: PUSH
50804: LD_VAR 0 1
50808: PUSH
50809: LD_INT 3
50811: MINUS
50812: PUSH
50813: LD_VAR 0 2
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: PUSH
50826: LD_VAR 0 1
50830: PUSH
50831: LD_INT 4
50833: MINUS
50834: PUSH
50835: LD_VAR 0 2
50839: PUSH
50840: LD_INT 4
50842: MINUS
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// end ; 3 :
50859: GO 51281
50861: LD_INT 3
50863: DOUBLE
50864: EQUAL
50865: IFTRUE 50869
50867: GO 51002
50869: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50870: LD_ADDR_VAR 0 5
50874: PUSH
50875: LD_VAR 0 1
50879: PUSH
50880: LD_INT 3
50882: PLUS
50883: PUSH
50884: LD_VAR 0 2
50888: PUSH
50889: LD_INT 4
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: PUSH
50897: LD_VAR 0 1
50901: PUSH
50902: LD_INT 4
50904: PLUS
50905: PUSH
50906: LD_VAR 0 2
50910: PUSH
50911: LD_INT 4
50913: PLUS
50914: PUSH
50915: LD_INT 5
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: PUSH
50923: LD_VAR 0 1
50927: PUSH
50928: LD_INT 4
50930: MINUS
50931: PUSH
50932: LD_VAR 0 2
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: LIST
50944: PUSH
50945: LD_VAR 0 1
50949: PUSH
50950: LD_VAR 0 2
50954: PUSH
50955: LD_INT 4
50957: MINUS
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: LIST
50966: PUSH
50967: LD_VAR 0 1
50971: PUSH
50972: LD_INT 3
50974: MINUS
50975: PUSH
50976: LD_VAR 0 2
50980: PUSH
50981: LD_INT 3
50983: MINUS
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// end ; 4 :
51000: GO 51281
51002: LD_INT 4
51004: DOUBLE
51005: EQUAL
51006: IFTRUE 51010
51008: GO 51143
51010: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51011: LD_ADDR_VAR 0 5
51015: PUSH
51016: LD_VAR 0 1
51020: PUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_INT 4
51028: PLUS
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: PUSH
51038: LD_VAR 0 1
51042: PUSH
51043: LD_INT 3
51045: PLUS
51046: PUSH
51047: LD_VAR 0 2
51051: PUSH
51052: LD_INT 3
51054: PLUS
51055: PUSH
51056: LD_INT 5
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: LIST
51063: PUSH
51064: LD_VAR 0 1
51068: PUSH
51069: LD_INT 4
51071: PLUS
51072: PUSH
51073: LD_VAR 0 2
51077: PUSH
51078: LD_INT 4
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: PUSH
51086: LD_VAR 0 1
51090: PUSH
51091: LD_VAR 0 2
51095: PUSH
51096: LD_INT 3
51098: MINUS
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: PUSH
51108: LD_VAR 0 1
51112: PUSH
51113: LD_INT 4
51115: MINUS
51116: PUSH
51117: LD_VAR 0 2
51121: PUSH
51122: LD_INT 4
51124: MINUS
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// end ; 5 :
51141: GO 51281
51143: LD_INT 5
51145: DOUBLE
51146: EQUAL
51147: IFTRUE 51151
51149: GO 51280
51151: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51152: LD_ADDR_VAR 0 5
51156: PUSH
51157: LD_VAR 0 1
51161: PUSH
51162: LD_INT 4
51164: MINUS
51165: PUSH
51166: LD_VAR 0 2
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: PUSH
51179: LD_VAR 0 1
51183: PUSH
51184: LD_VAR 0 2
51188: PUSH
51189: LD_INT 4
51191: MINUS
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: PUSH
51201: LD_VAR 0 1
51205: PUSH
51206: LD_INT 4
51208: PLUS
51209: PUSH
51210: LD_VAR 0 2
51214: PUSH
51215: LD_INT 4
51217: PLUS
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: PUSH
51227: LD_VAR 0 1
51231: PUSH
51232: LD_INT 3
51234: PLUS
51235: PUSH
51236: LD_VAR 0 2
51240: PUSH
51241: LD_INT 4
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: PUSH
51249: LD_VAR 0 1
51253: PUSH
51254: LD_VAR 0 2
51258: PUSH
51259: LD_INT 3
51261: PLUS
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: ST_TO_ADDR
// end ; end ;
51278: GO 51281
51280: POP
// result := list ;
51281: LD_ADDR_VAR 0 4
51285: PUSH
51286: LD_VAR 0 5
51290: ST_TO_ADDR
// end ;
51291: LD_VAR 0 4
51295: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51296: LD_INT 0
51298: PPUSH
51299: PPUSH
51300: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51301: LD_VAR 0 1
51305: NOT
51306: PUSH
51307: LD_VAR 0 2
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: LD_INT 4
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: IN
51330: NOT
51331: OR
51332: IFFALSE 51336
// exit ;
51334: GO 51419
// tmp := [ ] ;
51336: LD_ADDR_VAR 0 5
51340: PUSH
51341: EMPTY
51342: ST_TO_ADDR
// for i in units do
51343: LD_ADDR_VAR 0 4
51347: PUSH
51348: LD_VAR 0 1
51352: PUSH
51353: FOR_IN
51354: IFFALSE 51388
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51356: LD_ADDR_VAR 0 5
51360: PUSH
51361: LD_VAR 0 5
51365: PPUSH
51366: LD_VAR 0 4
51370: PPUSH
51371: LD_VAR 0 2
51375: PPUSH
51376: CALL_OW 259
51380: PPUSH
51381: CALL 52792 0 2
51385: ST_TO_ADDR
51386: GO 51353
51388: POP
51389: POP
// if not tmp then
51390: LD_VAR 0 5
51394: NOT
51395: IFFALSE 51399
// exit ;
51397: GO 51419
// result := SortListByListDesc ( units , tmp ) ;
51399: LD_ADDR_VAR 0 3
51403: PUSH
51404: LD_VAR 0 1
51408: PPUSH
51409: LD_VAR 0 5
51413: PPUSH
51414: CALL_OW 77
51418: ST_TO_ADDR
// end ;
51419: LD_VAR 0 3
51423: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51424: LD_INT 0
51426: PPUSH
51427: PPUSH
51428: PPUSH
// result := false ;
51429: LD_ADDR_VAR 0 3
51433: PUSH
51434: LD_INT 0
51436: ST_TO_ADDR
// if not building then
51437: LD_VAR 0 2
51441: NOT
51442: IFFALSE 51446
// exit ;
51444: GO 51584
// x := GetX ( building ) ;
51446: LD_ADDR_VAR 0 4
51450: PUSH
51451: LD_VAR 0 2
51455: PPUSH
51456: CALL_OW 250
51460: ST_TO_ADDR
// y := GetY ( building ) ;
51461: LD_ADDR_VAR 0 5
51465: PUSH
51466: LD_VAR 0 2
51470: PPUSH
51471: CALL_OW 251
51475: ST_TO_ADDR
// if not x or not y then
51476: LD_VAR 0 4
51480: NOT
51481: PUSH
51482: LD_VAR 0 5
51486: NOT
51487: OR
51488: IFFALSE 51492
// exit ;
51490: GO 51584
// if GetTaskList ( unit ) then
51492: LD_VAR 0 1
51496: PPUSH
51497: CALL_OW 437
51501: IFFALSE 51584
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51503: LD_STRING e
51505: PUSH
51506: LD_VAR 0 1
51510: PPUSH
51511: CALL_OW 437
51515: PUSH
51516: LD_INT 1
51518: ARRAY
51519: PUSH
51520: LD_INT 1
51522: ARRAY
51523: EQUAL
51524: PUSH
51525: LD_VAR 0 4
51529: PUSH
51530: LD_VAR 0 1
51534: PPUSH
51535: CALL_OW 437
51539: PUSH
51540: LD_INT 1
51542: ARRAY
51543: PUSH
51544: LD_INT 2
51546: ARRAY
51547: EQUAL
51548: AND
51549: PUSH
51550: LD_VAR 0 5
51554: PUSH
51555: LD_VAR 0 1
51559: PPUSH
51560: CALL_OW 437
51564: PUSH
51565: LD_INT 1
51567: ARRAY
51568: PUSH
51569: LD_INT 3
51571: ARRAY
51572: EQUAL
51573: AND
51574: IFFALSE 51584
// result := true end ;
51576: LD_ADDR_VAR 0 3
51580: PUSH
51581: LD_INT 1
51583: ST_TO_ADDR
// end ;
51584: LD_VAR 0 3
51588: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51589: LD_INT 0
51591: PPUSH
// result := false ;
51592: LD_ADDR_VAR 0 4
51596: PUSH
51597: LD_INT 0
51599: ST_TO_ADDR
// if GetTaskList ( unit ) then
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 437
51609: IFFALSE 51692
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51611: LD_STRING M
51613: PUSH
51614: LD_VAR 0 1
51618: PPUSH
51619: CALL_OW 437
51623: PUSH
51624: LD_INT 1
51626: ARRAY
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: EQUAL
51632: PUSH
51633: LD_VAR 0 2
51637: PUSH
51638: LD_VAR 0 1
51642: PPUSH
51643: CALL_OW 437
51647: PUSH
51648: LD_INT 1
51650: ARRAY
51651: PUSH
51652: LD_INT 2
51654: ARRAY
51655: EQUAL
51656: AND
51657: PUSH
51658: LD_VAR 0 3
51662: PUSH
51663: LD_VAR 0 1
51667: PPUSH
51668: CALL_OW 437
51672: PUSH
51673: LD_INT 1
51675: ARRAY
51676: PUSH
51677: LD_INT 3
51679: ARRAY
51680: EQUAL
51681: AND
51682: IFFALSE 51692
// result := true ;
51684: LD_ADDR_VAR 0 4
51688: PUSH
51689: LD_INT 1
51691: ST_TO_ADDR
// end ; end ;
51692: LD_VAR 0 4
51696: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51697: LD_INT 0
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
// if not unit or not area then
51703: LD_VAR 0 1
51707: NOT
51708: PUSH
51709: LD_VAR 0 2
51713: NOT
51714: OR
51715: IFFALSE 51719
// exit ;
51717: GO 51895
// tmp := AreaToList ( area , i ) ;
51719: LD_ADDR_VAR 0 6
51723: PUSH
51724: LD_VAR 0 2
51728: PPUSH
51729: LD_VAR 0 5
51733: PPUSH
51734: CALL_OW 517
51738: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51739: LD_ADDR_VAR 0 5
51743: PUSH
51744: DOUBLE
51745: LD_INT 1
51747: DEC
51748: ST_TO_ADDR
51749: LD_VAR 0 6
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: PUSH
51758: FOR_TO
51759: IFFALSE 51893
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51761: LD_ADDR_VAR 0 7
51765: PUSH
51766: LD_VAR 0 6
51770: PUSH
51771: LD_INT 1
51773: ARRAY
51774: PUSH
51775: LD_VAR 0 5
51779: ARRAY
51780: PUSH
51781: LD_VAR 0 6
51785: PUSH
51786: LD_INT 2
51788: ARRAY
51789: PUSH
51790: LD_VAR 0 5
51794: ARRAY
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51800: LD_INT 92
51802: PUSH
51803: LD_VAR 0 7
51807: PUSH
51808: LD_INT 1
51810: ARRAY
51811: PUSH
51812: LD_VAR 0 7
51816: PUSH
51817: LD_INT 2
51819: ARRAY
51820: PUSH
51821: LD_INT 2
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: PPUSH
51830: CALL_OW 69
51834: PUSH
51835: LD_INT 0
51837: EQUAL
51838: IFFALSE 51891
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51840: LD_VAR 0 1
51844: PPUSH
51845: LD_VAR 0 7
51849: PUSH
51850: LD_INT 1
51852: ARRAY
51853: PPUSH
51854: LD_VAR 0 7
51858: PUSH
51859: LD_INT 2
51861: ARRAY
51862: PPUSH
51863: LD_VAR 0 3
51867: PPUSH
51868: CALL_OW 48
// result := IsPlaced ( unit ) ;
51872: LD_ADDR_VAR 0 4
51876: PUSH
51877: LD_VAR 0 1
51881: PPUSH
51882: CALL_OW 305
51886: ST_TO_ADDR
// exit ;
51887: POP
51888: POP
51889: GO 51895
// end ; end ;
51891: GO 51758
51893: POP
51894: POP
// end ;
51895: LD_VAR 0 4
51899: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51900: LD_INT 0
51902: PPUSH
51903: PPUSH
51904: PPUSH
// if not side or side > 8 then
51905: LD_VAR 0 1
51909: NOT
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 8
51918: GREATER
51919: OR
51920: IFFALSE 51924
// exit ;
51922: GO 52111
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51924: LD_ADDR_VAR 0 4
51928: PUSH
51929: LD_INT 22
51931: PUSH
51932: LD_VAR 0 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 21
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PPUSH
51955: CALL_OW 69
51959: ST_TO_ADDR
// if not tmp then
51960: LD_VAR 0 4
51964: NOT
51965: IFFALSE 51969
// exit ;
51967: GO 52111
// enable_addtolog := true ;
51969: LD_ADDR_OWVAR 81
51973: PUSH
51974: LD_INT 1
51976: ST_TO_ADDR
// AddToLog ( [ ) ;
51977: LD_STRING [
51979: PPUSH
51980: CALL_OW 561
// for i in tmp do
51984: LD_ADDR_VAR 0 3
51988: PUSH
51989: LD_VAR 0 4
51993: PUSH
51994: FOR_IN
51995: IFFALSE 52102
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51997: LD_STRING [
51999: PUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: CALL_OW 266
52009: STR
52010: PUSH
52011: LD_STRING , 
52013: STR
52014: PUSH
52015: LD_VAR 0 3
52019: PPUSH
52020: CALL_OW 250
52024: STR
52025: PUSH
52026: LD_STRING , 
52028: STR
52029: PUSH
52030: LD_VAR 0 3
52034: PPUSH
52035: CALL_OW 251
52039: STR
52040: PUSH
52041: LD_STRING , 
52043: STR
52044: PUSH
52045: LD_VAR 0 3
52049: PPUSH
52050: CALL_OW 254
52054: STR
52055: PUSH
52056: LD_STRING , 
52058: STR
52059: PUSH
52060: LD_VAR 0 3
52064: PPUSH
52065: LD_INT 1
52067: PPUSH
52068: CALL_OW 268
52072: STR
52073: PUSH
52074: LD_STRING , 
52076: STR
52077: PUSH
52078: LD_VAR 0 3
52082: PPUSH
52083: LD_INT 2
52085: PPUSH
52086: CALL_OW 268
52090: STR
52091: PUSH
52092: LD_STRING ],
52094: STR
52095: PPUSH
52096: CALL_OW 561
// end ;
52100: GO 51994
52102: POP
52103: POP
// AddToLog ( ]; ) ;
52104: LD_STRING ];
52106: PPUSH
52107: CALL_OW 561
// end ;
52111: LD_VAR 0 2
52115: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52116: LD_INT 0
52118: PPUSH
52119: PPUSH
52120: PPUSH
52121: PPUSH
52122: PPUSH
// if not area or not rate or not max then
52123: LD_VAR 0 1
52127: NOT
52128: PUSH
52129: LD_VAR 0 2
52133: NOT
52134: OR
52135: PUSH
52136: LD_VAR 0 4
52140: NOT
52141: OR
52142: IFFALSE 52146
// exit ;
52144: GO 52335
// while 1 do
52146: LD_INT 1
52148: IFFALSE 52335
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52150: LD_ADDR_VAR 0 9
52154: PUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: LD_INT 1
52162: PPUSH
52163: CALL_OW 287
52167: PUSH
52168: LD_INT 10
52170: MUL
52171: ST_TO_ADDR
// r := rate / 10 ;
52172: LD_ADDR_VAR 0 7
52176: PUSH
52177: LD_VAR 0 2
52181: PUSH
52182: LD_INT 10
52184: DIVREAL
52185: ST_TO_ADDR
// time := 1 1$00 ;
52186: LD_ADDR_VAR 0 8
52190: PUSH
52191: LD_INT 2100
52193: ST_TO_ADDR
// if amount < min then
52194: LD_VAR 0 9
52198: PUSH
52199: LD_VAR 0 3
52203: LESS
52204: IFFALSE 52222
// r := r * 2 else
52206: LD_ADDR_VAR 0 7
52210: PUSH
52211: LD_VAR 0 7
52215: PUSH
52216: LD_INT 2
52218: MUL
52219: ST_TO_ADDR
52220: GO 52248
// if amount > max then
52222: LD_VAR 0 9
52226: PUSH
52227: LD_VAR 0 4
52231: GREATER
52232: IFFALSE 52248
// r := r / 2 ;
52234: LD_ADDR_VAR 0 7
52238: PUSH
52239: LD_VAR 0 7
52243: PUSH
52244: LD_INT 2
52246: DIVREAL
52247: ST_TO_ADDR
// time := time / r ;
52248: LD_ADDR_VAR 0 8
52252: PUSH
52253: LD_VAR 0 8
52257: PUSH
52258: LD_VAR 0 7
52262: DIVREAL
52263: ST_TO_ADDR
// if time < 0 then
52264: LD_VAR 0 8
52268: PUSH
52269: LD_INT 0
52271: LESS
52272: IFFALSE 52289
// time := time * - 1 ;
52274: LD_ADDR_VAR 0 8
52278: PUSH
52279: LD_VAR 0 8
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: MUL
52288: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52289: LD_VAR 0 8
52293: PUSH
52294: LD_INT 35
52296: PPUSH
52297: LD_INT 875
52299: PPUSH
52300: CALL_OW 12
52304: PLUS
52305: PPUSH
52306: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52310: LD_INT 1
52312: PPUSH
52313: LD_INT 5
52315: PPUSH
52316: CALL_OW 12
52320: PPUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: LD_INT 1
52328: PPUSH
52329: CALL_OW 55
// end ;
52333: GO 52146
// end ;
52335: LD_VAR 0 5
52339: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52340: LD_INT 0
52342: PPUSH
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
52349: PPUSH
// if not turrets or not factories then
52350: LD_VAR 0 1
52354: NOT
52355: PUSH
52356: LD_VAR 0 2
52360: NOT
52361: OR
52362: IFFALSE 52366
// exit ;
52364: GO 52673
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52366: LD_ADDR_VAR 0 10
52370: PUSH
52371: LD_INT 5
52373: PUSH
52374: LD_INT 6
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 4
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: LD_INT 5
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 24
52408: PUSH
52409: LD_INT 25
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 23
52418: PUSH
52419: LD_INT 27
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 42
52432: PUSH
52433: LD_INT 43
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 44
52442: PUSH
52443: LD_INT 46
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 45
52452: PUSH
52453: LD_INT 47
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// result := [ ] ;
52470: LD_ADDR_VAR 0 3
52474: PUSH
52475: EMPTY
52476: ST_TO_ADDR
// for i in turrets do
52477: LD_ADDR_VAR 0 4
52481: PUSH
52482: LD_VAR 0 1
52486: PUSH
52487: FOR_IN
52488: IFFALSE 52671
// begin nat := GetNation ( i ) ;
52490: LD_ADDR_VAR 0 7
52494: PUSH
52495: LD_VAR 0 4
52499: PPUSH
52500: CALL_OW 248
52504: ST_TO_ADDR
// weapon := 0 ;
52505: LD_ADDR_VAR 0 8
52509: PUSH
52510: LD_INT 0
52512: ST_TO_ADDR
// if not nat then
52513: LD_VAR 0 7
52517: NOT
52518: IFFALSE 52522
// continue ;
52520: GO 52487
// for j in list [ nat ] do
52522: LD_ADDR_VAR 0 5
52526: PUSH
52527: LD_VAR 0 10
52531: PUSH
52532: LD_VAR 0 7
52536: ARRAY
52537: PUSH
52538: FOR_IN
52539: IFFALSE 52580
// if GetBWeapon ( i ) = j [ 1 ] then
52541: LD_VAR 0 4
52545: PPUSH
52546: CALL_OW 269
52550: PUSH
52551: LD_VAR 0 5
52555: PUSH
52556: LD_INT 1
52558: ARRAY
52559: EQUAL
52560: IFFALSE 52578
// begin weapon := j [ 2 ] ;
52562: LD_ADDR_VAR 0 8
52566: PUSH
52567: LD_VAR 0 5
52571: PUSH
52572: LD_INT 2
52574: ARRAY
52575: ST_TO_ADDR
// break ;
52576: GO 52580
// end ;
52578: GO 52538
52580: POP
52581: POP
// if not weapon then
52582: LD_VAR 0 8
52586: NOT
52587: IFFALSE 52591
// continue ;
52589: GO 52487
// for k in factories do
52591: LD_ADDR_VAR 0 6
52595: PUSH
52596: LD_VAR 0 2
52600: PUSH
52601: FOR_IN
52602: IFFALSE 52667
// begin weapons := AvailableWeaponList ( k ) ;
52604: LD_ADDR_VAR 0 9
52608: PUSH
52609: LD_VAR 0 6
52613: PPUSH
52614: CALL_OW 478
52618: ST_TO_ADDR
// if not weapons then
52619: LD_VAR 0 9
52623: NOT
52624: IFFALSE 52628
// continue ;
52626: GO 52601
// if weapon in weapons then
52628: LD_VAR 0 8
52632: PUSH
52633: LD_VAR 0 9
52637: IN
52638: IFFALSE 52665
// begin result := [ i , weapon ] ;
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_VAR 0 4
52649: PUSH
52650: LD_VAR 0 8
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: ST_TO_ADDR
// exit ;
52659: POP
52660: POP
52661: POP
52662: POP
52663: GO 52673
// end ; end ;
52665: GO 52601
52667: POP
52668: POP
// end ;
52669: GO 52487
52671: POP
52672: POP
// end ;
52673: LD_VAR 0 3
52677: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52678: LD_INT 0
52680: PPUSH
// if not side or side > 8 then
52681: LD_VAR 0 3
52685: NOT
52686: PUSH
52687: LD_VAR 0 3
52691: PUSH
52692: LD_INT 8
52694: GREATER
52695: OR
52696: IFFALSE 52700
// exit ;
52698: GO 52759
// if not range then
52700: LD_VAR 0 4
52704: NOT
52705: IFFALSE 52716
// range := - 12 ;
52707: LD_ADDR_VAR 0 4
52711: PUSH
52712: LD_INT 12
52714: NEG
52715: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52716: LD_VAR 0 1
52720: PPUSH
52721: LD_VAR 0 2
52725: PPUSH
52726: LD_VAR 0 3
52730: PPUSH
52731: LD_VAR 0 4
52735: PPUSH
52736: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52740: LD_VAR 0 1
52744: PPUSH
52745: LD_VAR 0 2
52749: PPUSH
52750: LD_VAR 0 3
52754: PPUSH
52755: CALL_OW 331
// end ;
52759: LD_VAR 0 5
52763: RET
// export function Video ( mode ) ; begin
52764: LD_INT 0
52766: PPUSH
// ingame_video = mode ;
52767: LD_ADDR_OWVAR 52
52771: PUSH
52772: LD_VAR 0 1
52776: ST_TO_ADDR
// interface_hidden = mode ;
52777: LD_ADDR_OWVAR 54
52781: PUSH
52782: LD_VAR 0 1
52786: ST_TO_ADDR
// end ;
52787: LD_VAR 0 2
52791: RET
// export function Join ( array , element ) ; begin
52792: LD_INT 0
52794: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52795: LD_ADDR_VAR 0 3
52799: PUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: LD_VAR 0 1
52809: PUSH
52810: LD_INT 1
52812: PLUS
52813: PPUSH
52814: LD_VAR 0 2
52818: PPUSH
52819: CALL_OW 1
52823: ST_TO_ADDR
// end ;
52824: LD_VAR 0 3
52828: RET
// export function JoinUnion ( array , element ) ; begin
52829: LD_INT 0
52831: PPUSH
// result := array union element ;
52832: LD_ADDR_VAR 0 3
52836: PUSH
52837: LD_VAR 0 1
52841: PUSH
52842: LD_VAR 0 2
52846: UNION
52847: ST_TO_ADDR
// end ;
52848: LD_VAR 0 3
52852: RET
// export function GetBehemoths ( side ) ; begin
52853: LD_INT 0
52855: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52856: LD_ADDR_VAR 0 2
52860: PUSH
52861: LD_INT 22
52863: PUSH
52864: LD_VAR 0 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 31
52875: PUSH
52876: LD_INT 25
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PPUSH
52887: CALL_OW 69
52891: ST_TO_ADDR
// end ;
52892: LD_VAR 0 2
52896: RET
// export function Shuffle ( array ) ; var i , index ; begin
52897: LD_INT 0
52899: PPUSH
52900: PPUSH
52901: PPUSH
// result := [ ] ;
52902: LD_ADDR_VAR 0 2
52906: PUSH
52907: EMPTY
52908: ST_TO_ADDR
// if not array then
52909: LD_VAR 0 1
52913: NOT
52914: IFFALSE 52918
// exit ;
52916: GO 53017
// Randomize ;
52918: CALL_OW 10
// for i = array downto 1 do
52922: LD_ADDR_VAR 0 3
52926: PUSH
52927: DOUBLE
52928: LD_VAR 0 1
52932: INC
52933: ST_TO_ADDR
52934: LD_INT 1
52936: PUSH
52937: FOR_DOWNTO
52938: IFFALSE 53015
// begin index := rand ( 1 , array ) ;
52940: LD_ADDR_VAR 0 4
52944: PUSH
52945: LD_INT 1
52947: PPUSH
52948: LD_VAR 0 1
52952: PPUSH
52953: CALL_OW 12
52957: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52958: LD_ADDR_VAR 0 2
52962: PUSH
52963: LD_VAR 0 2
52967: PPUSH
52968: LD_VAR 0 2
52972: PUSH
52973: LD_INT 1
52975: PLUS
52976: PPUSH
52977: LD_VAR 0 1
52981: PUSH
52982: LD_VAR 0 4
52986: ARRAY
52987: PPUSH
52988: CALL_OW 2
52992: ST_TO_ADDR
// array := Delete ( array , index ) ;
52993: LD_ADDR_VAR 0 1
52997: PUSH
52998: LD_VAR 0 1
53002: PPUSH
53003: LD_VAR 0 4
53007: PPUSH
53008: CALL_OW 3
53012: ST_TO_ADDR
// end ;
53013: GO 52937
53015: POP
53016: POP
// end ;
53017: LD_VAR 0 2
53021: RET
// export function GetBaseMaterials ( base ) ; begin
53022: LD_INT 0
53024: PPUSH
// result := [ 0 , 0 , 0 ] ;
53025: LD_ADDR_VAR 0 2
53029: PUSH
53030: LD_INT 0
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: LIST
53043: ST_TO_ADDR
// if not base then
53044: LD_VAR 0 1
53048: NOT
53049: IFFALSE 53053
// exit ;
53051: GO 53102
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53053: LD_ADDR_VAR 0 2
53057: PUSH
53058: LD_VAR 0 1
53062: PPUSH
53063: LD_INT 1
53065: PPUSH
53066: CALL_OW 275
53070: PUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: LD_INT 2
53078: PPUSH
53079: CALL_OW 275
53083: PUSH
53084: LD_VAR 0 1
53088: PPUSH
53089: LD_INT 3
53091: PPUSH
53092: CALL_OW 275
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
// end ;
53102: LD_VAR 0 2
53106: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53107: LD_INT 0
53109: PPUSH
53110: PPUSH
// result := array ;
53111: LD_ADDR_VAR 0 3
53115: PUSH
53116: LD_VAR 0 1
53120: ST_TO_ADDR
// if size >= result then
53121: LD_VAR 0 2
53125: PUSH
53126: LD_VAR 0 3
53130: GREATEREQUAL
53131: IFFALSE 53135
// exit ;
53133: GO 53185
// if size then
53135: LD_VAR 0 2
53139: IFFALSE 53185
// for i := array downto size do
53141: LD_ADDR_VAR 0 4
53145: PUSH
53146: DOUBLE
53147: LD_VAR 0 1
53151: INC
53152: ST_TO_ADDR
53153: LD_VAR 0 2
53157: PUSH
53158: FOR_DOWNTO
53159: IFFALSE 53183
// result := Delete ( result , result ) ;
53161: LD_ADDR_VAR 0 3
53165: PUSH
53166: LD_VAR 0 3
53170: PPUSH
53171: LD_VAR 0 3
53175: PPUSH
53176: CALL_OW 3
53180: ST_TO_ADDR
53181: GO 53158
53183: POP
53184: POP
// end ;
53185: LD_VAR 0 3
53189: RET
// export function ComExit ( unit ) ; var tmp ; begin
53190: LD_INT 0
53192: PPUSH
53193: PPUSH
// if not IsInUnit ( unit ) then
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 310
53203: NOT
53204: IFFALSE 53208
// exit ;
53206: GO 53268
// tmp := IsInUnit ( unit ) ;
53208: LD_ADDR_VAR 0 3
53212: PUSH
53213: LD_VAR 0 1
53217: PPUSH
53218: CALL_OW 310
53222: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53223: LD_VAR 0 3
53227: PPUSH
53228: CALL_OW 247
53232: PUSH
53233: LD_INT 2
53235: EQUAL
53236: IFFALSE 53249
// ComExitVehicle ( unit ) else
53238: LD_VAR 0 1
53242: PPUSH
53243: CALL_OW 121
53247: GO 53258
// ComExitBuilding ( unit ) ;
53249: LD_VAR 0 1
53253: PPUSH
53254: CALL_OW 122
// result := tmp ;
53258: LD_ADDR_VAR 0 2
53262: PUSH
53263: LD_VAR 0 3
53267: ST_TO_ADDR
// end ;
53268: LD_VAR 0 2
53272: RET
// export function ComExitAll ( units ) ; var i ; begin
53273: LD_INT 0
53275: PPUSH
53276: PPUSH
// if not units then
53277: LD_VAR 0 1
53281: NOT
53282: IFFALSE 53286
// exit ;
53284: GO 53312
// for i in units do
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: LD_VAR 0 1
53295: PUSH
53296: FOR_IN
53297: IFFALSE 53310
// ComExit ( i ) ;
53299: LD_VAR 0 3
53303: PPUSH
53304: CALL 53190 0 1
53308: GO 53296
53310: POP
53311: POP
// end ;
53312: LD_VAR 0 2
53316: RET
// export function ResetHc ; begin
53317: LD_INT 0
53319: PPUSH
// InitHc ;
53320: CALL_OW 19
// hc_importance := 0 ;
53324: LD_ADDR_OWVAR 32
53328: PUSH
53329: LD_INT 0
53331: ST_TO_ADDR
// end ;
53332: LD_VAR 0 1
53336: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53337: LD_INT 0
53339: PPUSH
53340: PPUSH
53341: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53342: LD_ADDR_VAR 0 6
53346: PUSH
53347: LD_VAR 0 1
53351: PUSH
53352: LD_VAR 0 3
53356: PLUS
53357: PUSH
53358: LD_INT 2
53360: DIV
53361: ST_TO_ADDR
// if _x < 0 then
53362: LD_VAR 0 6
53366: PUSH
53367: LD_INT 0
53369: LESS
53370: IFFALSE 53387
// _x := _x * - 1 ;
53372: LD_ADDR_VAR 0 6
53376: PUSH
53377: LD_VAR 0 6
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: MUL
53386: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53387: LD_ADDR_VAR 0 7
53391: PUSH
53392: LD_VAR 0 2
53396: PUSH
53397: LD_VAR 0 4
53401: PLUS
53402: PUSH
53403: LD_INT 2
53405: DIV
53406: ST_TO_ADDR
// if _y < 0 then
53407: LD_VAR 0 7
53411: PUSH
53412: LD_INT 0
53414: LESS
53415: IFFALSE 53432
// _y := _y * - 1 ;
53417: LD_ADDR_VAR 0 7
53421: PUSH
53422: LD_VAR 0 7
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: MUL
53431: ST_TO_ADDR
// result := [ _x , _y ] ;
53432: LD_ADDR_VAR 0 5
53436: PUSH
53437: LD_VAR 0 6
53441: PUSH
53442: LD_VAR 0 7
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: ST_TO_ADDR
// end ;
53451: LD_VAR 0 5
53455: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53456: LD_INT 0
53458: PPUSH
53459: PPUSH
53460: PPUSH
53461: PPUSH
// task := GetTaskList ( unit ) ;
53462: LD_ADDR_VAR 0 7
53466: PUSH
53467: LD_VAR 0 1
53471: PPUSH
53472: CALL_OW 437
53476: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53477: LD_VAR 0 7
53481: NOT
53482: PUSH
53483: LD_VAR 0 1
53487: PPUSH
53488: LD_VAR 0 2
53492: PPUSH
53493: CALL_OW 308
53497: NOT
53498: AND
53499: IFFALSE 53503
// exit ;
53501: GO 53621
// if IsInArea ( unit , area ) then
53503: LD_VAR 0 1
53507: PPUSH
53508: LD_VAR 0 2
53512: PPUSH
53513: CALL_OW 308
53517: IFFALSE 53535
// begin ComMoveToArea ( unit , goAway ) ;
53519: LD_VAR 0 1
53523: PPUSH
53524: LD_VAR 0 3
53528: PPUSH
53529: CALL_OW 113
// exit ;
53533: GO 53621
// end ; if task [ 1 ] [ 1 ] <> M then
53535: LD_VAR 0 7
53539: PUSH
53540: LD_INT 1
53542: ARRAY
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_STRING M
53550: NONEQUAL
53551: IFFALSE 53555
// exit ;
53553: GO 53621
// x := task [ 1 ] [ 2 ] ;
53555: LD_ADDR_VAR 0 5
53559: PUSH
53560: LD_VAR 0 7
53564: PUSH
53565: LD_INT 1
53567: ARRAY
53568: PUSH
53569: LD_INT 2
53571: ARRAY
53572: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53573: LD_ADDR_VAR 0 6
53577: PUSH
53578: LD_VAR 0 7
53582: PUSH
53583: LD_INT 1
53585: ARRAY
53586: PUSH
53587: LD_INT 3
53589: ARRAY
53590: ST_TO_ADDR
// if InArea ( x , y , area ) then
53591: LD_VAR 0 5
53595: PPUSH
53596: LD_VAR 0 6
53600: PPUSH
53601: LD_VAR 0 2
53605: PPUSH
53606: CALL_OW 309
53610: IFFALSE 53621
// ComStop ( unit ) ;
53612: LD_VAR 0 1
53616: PPUSH
53617: CALL_OW 141
// end ;
53621: LD_VAR 0 4
53625: RET
// export function Abs ( value ) ; begin
53626: LD_INT 0
53628: PPUSH
// result := value ;
53629: LD_ADDR_VAR 0 2
53633: PUSH
53634: LD_VAR 0 1
53638: ST_TO_ADDR
// if value < 0 then
53639: LD_VAR 0 1
53643: PUSH
53644: LD_INT 0
53646: LESS
53647: IFFALSE 53664
// result := value * - 1 ;
53649: LD_ADDR_VAR 0 2
53653: PUSH
53654: LD_VAR 0 1
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: MUL
53663: ST_TO_ADDR
// end ;
53664: LD_VAR 0 2
53668: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
53673: PPUSH
53674: PPUSH
53675: PPUSH
53676: PPUSH
53677: PPUSH
53678: PPUSH
// if not unit or not building then
53679: LD_VAR 0 1
53683: NOT
53684: PUSH
53685: LD_VAR 0 2
53689: NOT
53690: OR
53691: IFFALSE 53695
// exit ;
53693: GO 53921
// x := GetX ( building ) ;
53695: LD_ADDR_VAR 0 4
53699: PUSH
53700: LD_VAR 0 2
53704: PPUSH
53705: CALL_OW 250
53709: ST_TO_ADDR
// y := GetY ( building ) ;
53710: LD_ADDR_VAR 0 6
53714: PUSH
53715: LD_VAR 0 2
53719: PPUSH
53720: CALL_OW 251
53724: ST_TO_ADDR
// d := GetDir ( building ) ;
53725: LD_ADDR_VAR 0 8
53729: PUSH
53730: LD_VAR 0 2
53734: PPUSH
53735: CALL_OW 254
53739: ST_TO_ADDR
// r := 4 ;
53740: LD_ADDR_VAR 0 9
53744: PUSH
53745: LD_INT 4
53747: ST_TO_ADDR
// for i := 1 to 5 do
53748: LD_ADDR_VAR 0 10
53752: PUSH
53753: DOUBLE
53754: LD_INT 1
53756: DEC
53757: ST_TO_ADDR
53758: LD_INT 5
53760: PUSH
53761: FOR_TO
53762: IFFALSE 53919
// begin _x := ShiftX ( x , d , r + i ) ;
53764: LD_ADDR_VAR 0 5
53768: PUSH
53769: LD_VAR 0 4
53773: PPUSH
53774: LD_VAR 0 8
53778: PPUSH
53779: LD_VAR 0 9
53783: PUSH
53784: LD_VAR 0 10
53788: PLUS
53789: PPUSH
53790: CALL_OW 272
53794: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53795: LD_ADDR_VAR 0 7
53799: PUSH
53800: LD_VAR 0 6
53804: PPUSH
53805: LD_VAR 0 8
53809: PPUSH
53810: LD_VAR 0 9
53814: PUSH
53815: LD_VAR 0 10
53819: PLUS
53820: PPUSH
53821: CALL_OW 273
53825: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53826: LD_VAR 0 5
53830: PPUSH
53831: LD_VAR 0 7
53835: PPUSH
53836: CALL_OW 488
53840: PUSH
53841: LD_VAR 0 5
53845: PPUSH
53846: LD_VAR 0 7
53850: PPUSH
53851: CALL_OW 428
53855: PPUSH
53856: CALL_OW 247
53860: PUSH
53861: LD_INT 3
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: IN
53871: NOT
53872: AND
53873: IFFALSE 53917
// begin ComMoveXY ( unit , _x , _y ) ;
53875: LD_VAR 0 1
53879: PPUSH
53880: LD_VAR 0 5
53884: PPUSH
53885: LD_VAR 0 7
53889: PPUSH
53890: CALL_OW 111
// result := [ _x , _y ] ;
53894: LD_ADDR_VAR 0 3
53898: PUSH
53899: LD_VAR 0 5
53903: PUSH
53904: LD_VAR 0 7
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: ST_TO_ADDR
// exit ;
53913: POP
53914: POP
53915: GO 53921
// end ; end ;
53917: GO 53761
53919: POP
53920: POP
// end ;
53921: LD_VAR 0 3
53925: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53926: LD_INT 0
53928: PPUSH
53929: PPUSH
53930: PPUSH
// result := 0 ;
53931: LD_ADDR_VAR 0 3
53935: PUSH
53936: LD_INT 0
53938: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53939: LD_VAR 0 1
53943: PUSH
53944: LD_INT 0
53946: LESS
53947: PUSH
53948: LD_VAR 0 1
53952: PUSH
53953: LD_INT 8
53955: GREATER
53956: OR
53957: PUSH
53958: LD_VAR 0 2
53962: PUSH
53963: LD_INT 0
53965: LESS
53966: OR
53967: PUSH
53968: LD_VAR 0 2
53972: PUSH
53973: LD_INT 8
53975: GREATER
53976: OR
53977: IFFALSE 53981
// exit ;
53979: GO 54056
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53981: LD_ADDR_VAR 0 4
53985: PUSH
53986: LD_INT 22
53988: PUSH
53989: LD_VAR 0 2
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PPUSH
53998: CALL_OW 69
54002: PUSH
54003: FOR_IN
54004: IFFALSE 54054
// begin un := UnitShoot ( i ) ;
54006: LD_ADDR_VAR 0 5
54010: PUSH
54011: LD_VAR 0 4
54015: PPUSH
54016: CALL_OW 504
54020: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54021: LD_VAR 0 5
54025: PPUSH
54026: CALL_OW 255
54030: PUSH
54031: LD_VAR 0 1
54035: EQUAL
54036: IFFALSE 54052
// begin result := un ;
54038: LD_ADDR_VAR 0 3
54042: PUSH
54043: LD_VAR 0 5
54047: ST_TO_ADDR
// exit ;
54048: POP
54049: POP
54050: GO 54056
// end ; end ;
54052: GO 54003
54054: POP
54055: POP
// end ;
54056: LD_VAR 0 3
54060: RET
// export function GetCargoBay ( units ) ; begin
54061: LD_INT 0
54063: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54064: LD_ADDR_VAR 0 2
54068: PUSH
54069: LD_VAR 0 1
54073: PPUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 34
54079: PUSH
54080: LD_INT 12
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 34
54089: PUSH
54090: LD_INT 51
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 34
54099: PUSH
54100: LD_INT 32
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 34
54109: PUSH
54110: LD_INT 89
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: PPUSH
54124: CALL_OW 72
54128: ST_TO_ADDR
// end ;
54129: LD_VAR 0 2
54133: RET
// export function Negate ( value ) ; begin
54134: LD_INT 0
54136: PPUSH
// result := not value ;
54137: LD_ADDR_VAR 0 2
54141: PUSH
54142: LD_VAR 0 1
54146: NOT
54147: ST_TO_ADDR
// end ;
54148: LD_VAR 0 2
54152: RET
// export function Inc ( value ) ; begin
54153: LD_INT 0
54155: PPUSH
// result := value + 1 ;
54156: LD_ADDR_VAR 0 2
54160: PUSH
54161: LD_VAR 0 1
54165: PUSH
54166: LD_INT 1
54168: PLUS
54169: ST_TO_ADDR
// end ;
54170: LD_VAR 0 2
54174: RET
// export function Dec ( value ) ; begin
54175: LD_INT 0
54177: PPUSH
// result := value - 1 ;
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: LD_VAR 0 1
54187: PUSH
54188: LD_INT 1
54190: MINUS
54191: ST_TO_ADDR
// end ;
54192: LD_VAR 0 2
54196: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54197: LD_INT 0
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
54204: PPUSH
54205: PPUSH
54206: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54207: LD_VAR 0 1
54211: PPUSH
54212: LD_VAR 0 2
54216: PPUSH
54217: CALL_OW 488
54221: NOT
54222: PUSH
54223: LD_VAR 0 3
54227: PPUSH
54228: LD_VAR 0 4
54232: PPUSH
54233: CALL_OW 488
54237: NOT
54238: OR
54239: IFFALSE 54252
// begin result := - 1 ;
54241: LD_ADDR_VAR 0 5
54245: PUSH
54246: LD_INT 1
54248: NEG
54249: ST_TO_ADDR
// exit ;
54250: GO 54487
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54252: LD_ADDR_VAR 0 12
54256: PUSH
54257: LD_VAR 0 1
54261: PPUSH
54262: LD_VAR 0 2
54266: PPUSH
54267: LD_VAR 0 3
54271: PPUSH
54272: LD_VAR 0 4
54276: PPUSH
54277: CALL 53337 0 4
54281: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54282: LD_ADDR_VAR 0 11
54286: PUSH
54287: LD_VAR 0 1
54291: PPUSH
54292: LD_VAR 0 2
54296: PPUSH
54297: LD_VAR 0 12
54301: PUSH
54302: LD_INT 1
54304: ARRAY
54305: PPUSH
54306: LD_VAR 0 12
54310: PUSH
54311: LD_INT 2
54313: ARRAY
54314: PPUSH
54315: CALL_OW 298
54319: ST_TO_ADDR
// distance := 9999 ;
54320: LD_ADDR_VAR 0 10
54324: PUSH
54325: LD_INT 9999
54327: ST_TO_ADDR
// for i := 0 to 5 do
54328: LD_ADDR_VAR 0 6
54332: PUSH
54333: DOUBLE
54334: LD_INT 0
54336: DEC
54337: ST_TO_ADDR
54338: LD_INT 5
54340: PUSH
54341: FOR_TO
54342: IFFALSE 54485
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54344: LD_ADDR_VAR 0 7
54348: PUSH
54349: LD_VAR 0 1
54353: PPUSH
54354: LD_VAR 0 6
54358: PPUSH
54359: LD_VAR 0 11
54363: PPUSH
54364: CALL_OW 272
54368: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54369: LD_ADDR_VAR 0 8
54373: PUSH
54374: LD_VAR 0 2
54378: PPUSH
54379: LD_VAR 0 6
54383: PPUSH
54384: LD_VAR 0 11
54388: PPUSH
54389: CALL_OW 273
54393: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54394: LD_VAR 0 7
54398: PPUSH
54399: LD_VAR 0 8
54403: PPUSH
54404: CALL_OW 488
54408: NOT
54409: IFFALSE 54413
// continue ;
54411: GO 54341
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54413: LD_ADDR_VAR 0 9
54417: PUSH
54418: LD_VAR 0 12
54422: PUSH
54423: LD_INT 1
54425: ARRAY
54426: PPUSH
54427: LD_VAR 0 12
54431: PUSH
54432: LD_INT 2
54434: ARRAY
54435: PPUSH
54436: LD_VAR 0 7
54440: PPUSH
54441: LD_VAR 0 8
54445: PPUSH
54446: CALL_OW 298
54450: ST_TO_ADDR
// if tmp < distance then
54451: LD_VAR 0 9
54455: PUSH
54456: LD_VAR 0 10
54460: LESS
54461: IFFALSE 54483
// begin result := i ;
54463: LD_ADDR_VAR 0 5
54467: PUSH
54468: LD_VAR 0 6
54472: ST_TO_ADDR
// distance := tmp ;
54473: LD_ADDR_VAR 0 10
54477: PUSH
54478: LD_VAR 0 9
54482: ST_TO_ADDR
// end ; end ;
54483: GO 54341
54485: POP
54486: POP
// end ;
54487: LD_VAR 0 5
54491: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54492: LD_INT 0
54494: PPUSH
54495: PPUSH
// if not driver or not IsInUnit ( driver ) then
54496: LD_VAR 0 1
54500: NOT
54501: PUSH
54502: LD_VAR 0 1
54506: PPUSH
54507: CALL_OW 310
54511: NOT
54512: OR
54513: IFFALSE 54517
// exit ;
54515: GO 54607
// vehicle := IsInUnit ( driver ) ;
54517: LD_ADDR_VAR 0 3
54521: PUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 310
54531: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54532: LD_VAR 0 1
54536: PPUSH
54537: LD_STRING \
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: PUSH
54567: LD_STRING E
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 0
54575: PUSH
54576: LD_VAR 0 3
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 0
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PPUSH
54603: CALL_OW 446
// end ;
54607: LD_VAR 0 2
54611: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54612: LD_INT 0
54614: PPUSH
54615: PPUSH
// if not driver or not IsInUnit ( driver ) then
54616: LD_VAR 0 1
54620: NOT
54621: PUSH
54622: LD_VAR 0 1
54626: PPUSH
54627: CALL_OW 310
54631: NOT
54632: OR
54633: IFFALSE 54637
// exit ;
54635: GO 54727
// vehicle := IsInUnit ( driver ) ;
54637: LD_ADDR_VAR 0 3
54641: PUSH
54642: LD_VAR 0 1
54646: PPUSH
54647: CALL_OW 310
54651: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54652: LD_VAR 0 1
54656: PPUSH
54657: LD_STRING \
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: PUSH
54687: LD_STRING E
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_VAR 0 3
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PPUSH
54723: CALL_OW 447
// end ;
54727: LD_VAR 0 2
54731: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54732: LD_INT 0
54734: PPUSH
54735: PPUSH
54736: PPUSH
// tmp := [ ] ;
54737: LD_ADDR_VAR 0 5
54741: PUSH
54742: EMPTY
54743: ST_TO_ADDR
// for i in units do
54744: LD_ADDR_VAR 0 4
54748: PUSH
54749: LD_VAR 0 1
54753: PUSH
54754: FOR_IN
54755: IFFALSE 54793
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54757: LD_ADDR_VAR 0 5
54761: PUSH
54762: LD_VAR 0 5
54766: PPUSH
54767: LD_VAR 0 5
54771: PUSH
54772: LD_INT 1
54774: PLUS
54775: PPUSH
54776: LD_VAR 0 4
54780: PPUSH
54781: CALL_OW 256
54785: PPUSH
54786: CALL_OW 2
54790: ST_TO_ADDR
54791: GO 54754
54793: POP
54794: POP
// if not tmp then
54795: LD_VAR 0 5
54799: NOT
54800: IFFALSE 54804
// exit ;
54802: GO 54852
// if asc then
54804: LD_VAR 0 2
54808: IFFALSE 54832
// result := SortListByListAsc ( units , tmp ) else
54810: LD_ADDR_VAR 0 3
54814: PUSH
54815: LD_VAR 0 1
54819: PPUSH
54820: LD_VAR 0 5
54824: PPUSH
54825: CALL_OW 76
54829: ST_TO_ADDR
54830: GO 54852
// result := SortListByListDesc ( units , tmp ) ;
54832: LD_ADDR_VAR 0 3
54836: PUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: LD_VAR 0 5
54846: PPUSH
54847: CALL_OW 77
54851: ST_TO_ADDR
// end ;
54852: LD_VAR 0 3
54856: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54857: LD_INT 0
54859: PPUSH
54860: PPUSH
// task := GetTaskList ( mech ) ;
54861: LD_ADDR_VAR 0 4
54865: PUSH
54866: LD_VAR 0 1
54870: PPUSH
54871: CALL_OW 437
54875: ST_TO_ADDR
// if not task then
54876: LD_VAR 0 4
54880: NOT
54881: IFFALSE 54885
// exit ;
54883: GO 54927
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54885: LD_ADDR_VAR 0 3
54889: PUSH
54890: LD_VAR 0 4
54894: PUSH
54895: LD_INT 1
54897: ARRAY
54898: PUSH
54899: LD_INT 1
54901: ARRAY
54902: PUSH
54903: LD_STRING r
54905: EQUAL
54906: PUSH
54907: LD_VAR 0 4
54911: PUSH
54912: LD_INT 1
54914: ARRAY
54915: PUSH
54916: LD_INT 4
54918: ARRAY
54919: PUSH
54920: LD_VAR 0 2
54924: EQUAL
54925: AND
54926: ST_TO_ADDR
// end ;
54927: LD_VAR 0 3
54931: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54932: LD_INT 0
54934: PPUSH
// SetDir ( unit , d ) ;
54935: LD_VAR 0 1
54939: PPUSH
54940: LD_VAR 0 4
54944: PPUSH
54945: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54949: LD_VAR 0 1
54953: PPUSH
54954: LD_VAR 0 2
54958: PPUSH
54959: LD_VAR 0 3
54963: PPUSH
54964: LD_VAR 0 5
54968: PPUSH
54969: CALL_OW 48
// end ;
54973: LD_VAR 0 6
54977: RET
// export function ToNaturalNumber ( number ) ; begin
54978: LD_INT 0
54980: PPUSH
// result := number div 1 ;
54981: LD_ADDR_VAR 0 2
54985: PUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_INT 1
54993: DIV
54994: ST_TO_ADDR
// if number < 0 then
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 0
55002: LESS
55003: IFFALSE 55013
// result := 0 ;
55005: LD_ADDR_VAR 0 2
55009: PUSH
55010: LD_INT 0
55012: ST_TO_ADDR
// end ;
55013: LD_VAR 0 2
55017: RET
// export function SortByClass ( units , class ) ; var un ; begin
55018: LD_INT 0
55020: PPUSH
55021: PPUSH
// if not units or not class then
55022: LD_VAR 0 1
55026: NOT
55027: PUSH
55028: LD_VAR 0 2
55032: NOT
55033: OR
55034: IFFALSE 55038
// exit ;
55036: GO 55133
// result := [ ] ;
55038: LD_ADDR_VAR 0 3
55042: PUSH
55043: EMPTY
55044: ST_TO_ADDR
// for un in units do
55045: LD_ADDR_VAR 0 4
55049: PUSH
55050: LD_VAR 0 1
55054: PUSH
55055: FOR_IN
55056: IFFALSE 55131
// if GetClass ( un ) = class then
55058: LD_VAR 0 4
55062: PPUSH
55063: CALL_OW 257
55067: PUSH
55068: LD_VAR 0 2
55072: EQUAL
55073: IFFALSE 55100
// result := Insert ( result , 1 , un ) else
55075: LD_ADDR_VAR 0 3
55079: PUSH
55080: LD_VAR 0 3
55084: PPUSH
55085: LD_INT 1
55087: PPUSH
55088: LD_VAR 0 4
55092: PPUSH
55093: CALL_OW 2
55097: ST_TO_ADDR
55098: GO 55129
// result := Replace ( result , result + 1 , un ) ;
55100: LD_ADDR_VAR 0 3
55104: PUSH
55105: LD_VAR 0 3
55109: PPUSH
55110: LD_VAR 0 3
55114: PUSH
55115: LD_INT 1
55117: PLUS
55118: PPUSH
55119: LD_VAR 0 4
55123: PPUSH
55124: CALL_OW 1
55128: ST_TO_ADDR
55129: GO 55055
55131: POP
55132: POP
// end ;
55133: LD_VAR 0 3
55137: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55138: LD_INT 0
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
// result := [ ] ;
55147: LD_ADDR_VAR 0 4
55151: PUSH
55152: EMPTY
55153: ST_TO_ADDR
// if x - r < 0 then
55154: LD_VAR 0 1
55158: PUSH
55159: LD_VAR 0 3
55163: MINUS
55164: PUSH
55165: LD_INT 0
55167: LESS
55168: IFFALSE 55180
// min_x := 0 else
55170: LD_ADDR_VAR 0 8
55174: PUSH
55175: LD_INT 0
55177: ST_TO_ADDR
55178: GO 55196
// min_x := x - r ;
55180: LD_ADDR_VAR 0 8
55184: PUSH
55185: LD_VAR 0 1
55189: PUSH
55190: LD_VAR 0 3
55194: MINUS
55195: ST_TO_ADDR
// if y - r < 0 then
55196: LD_VAR 0 2
55200: PUSH
55201: LD_VAR 0 3
55205: MINUS
55206: PUSH
55207: LD_INT 0
55209: LESS
55210: IFFALSE 55222
// min_y := 0 else
55212: LD_ADDR_VAR 0 7
55216: PUSH
55217: LD_INT 0
55219: ST_TO_ADDR
55220: GO 55238
// min_y := y - r ;
55222: LD_ADDR_VAR 0 7
55226: PUSH
55227: LD_VAR 0 2
55231: PUSH
55232: LD_VAR 0 3
55236: MINUS
55237: ST_TO_ADDR
// max_x := x + r ;
55238: LD_ADDR_VAR 0 9
55242: PUSH
55243: LD_VAR 0 1
55247: PUSH
55248: LD_VAR 0 3
55252: PLUS
55253: ST_TO_ADDR
// max_y := y + r ;
55254: LD_ADDR_VAR 0 10
55258: PUSH
55259: LD_VAR 0 2
55263: PUSH
55264: LD_VAR 0 3
55268: PLUS
55269: ST_TO_ADDR
// for _x = min_x to max_x do
55270: LD_ADDR_VAR 0 5
55274: PUSH
55275: DOUBLE
55276: LD_VAR 0 8
55280: DEC
55281: ST_TO_ADDR
55282: LD_VAR 0 9
55286: PUSH
55287: FOR_TO
55288: IFFALSE 55389
// for _y = min_y to max_y do
55290: LD_ADDR_VAR 0 6
55294: PUSH
55295: DOUBLE
55296: LD_VAR 0 7
55300: DEC
55301: ST_TO_ADDR
55302: LD_VAR 0 10
55306: PUSH
55307: FOR_TO
55308: IFFALSE 55385
// begin if not ValidHex ( _x , _y ) then
55310: LD_VAR 0 5
55314: PPUSH
55315: LD_VAR 0 6
55319: PPUSH
55320: CALL_OW 488
55324: NOT
55325: IFFALSE 55329
// continue ;
55327: GO 55307
// if GetResourceTypeXY ( _x , _y ) then
55329: LD_VAR 0 5
55333: PPUSH
55334: LD_VAR 0 6
55338: PPUSH
55339: CALL_OW 283
55343: IFFALSE 55383
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55345: LD_ADDR_VAR 0 4
55349: PUSH
55350: LD_VAR 0 4
55354: PPUSH
55355: LD_VAR 0 4
55359: PUSH
55360: LD_INT 1
55362: PLUS
55363: PPUSH
55364: LD_VAR 0 5
55368: PUSH
55369: LD_VAR 0 6
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PPUSH
55378: CALL_OW 1
55382: ST_TO_ADDR
// end ;
55383: GO 55307
55385: POP
55386: POP
55387: GO 55287
55389: POP
55390: POP
// end ;
55391: LD_VAR 0 4
55395: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55396: LD_INT 0
55398: PPUSH
55399: PPUSH
55400: PPUSH
55401: PPUSH
55402: PPUSH
55403: PPUSH
55404: PPUSH
55405: PPUSH
// if not units then
55406: LD_VAR 0 1
55410: NOT
55411: IFFALSE 55415
// exit ;
55413: GO 55939
// result := UnitFilter ( units , [ f_ok ] ) ;
55415: LD_ADDR_VAR 0 3
55419: PUSH
55420: LD_VAR 0 1
55424: PPUSH
55425: LD_INT 50
55427: PUSH
55428: EMPTY
55429: LIST
55430: PPUSH
55431: CALL_OW 72
55435: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55436: LD_ADDR_VAR 0 8
55440: PUSH
55441: LD_VAR 0 1
55445: PUSH
55446: LD_INT 1
55448: ARRAY
55449: PPUSH
55450: CALL_OW 255
55454: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55455: LD_ADDR_VAR 0 10
55459: PUSH
55460: LD_INT 29
55462: PUSH
55463: LD_INT 91
55465: PUSH
55466: LD_INT 49
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// if not result then
55474: LD_VAR 0 3
55478: NOT
55479: IFFALSE 55483
// exit ;
55481: GO 55939
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55483: LD_ADDR_VAR 0 5
55487: PUSH
55488: LD_INT 81
55490: PUSH
55491: LD_VAR 0 8
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PPUSH
55500: CALL_OW 69
55504: ST_TO_ADDR
// for i in result do
55505: LD_ADDR_VAR 0 4
55509: PUSH
55510: LD_VAR 0 3
55514: PUSH
55515: FOR_IN
55516: IFFALSE 55937
// begin tag := GetTag ( i ) + 1 ;
55518: LD_ADDR_VAR 0 9
55522: PUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: CALL_OW 110
55532: PUSH
55533: LD_INT 1
55535: PLUS
55536: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55537: LD_ADDR_VAR 0 7
55541: PUSH
55542: LD_VAR 0 4
55546: PPUSH
55547: CALL_OW 250
55551: PPUSH
55552: LD_VAR 0 4
55556: PPUSH
55557: CALL_OW 251
55561: PPUSH
55562: LD_INT 6
55564: PPUSH
55565: CALL 55138 0 3
55569: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55570: LD_VAR 0 4
55574: PPUSH
55575: CALL_OW 247
55579: PUSH
55580: LD_INT 2
55582: EQUAL
55583: PUSH
55584: LD_VAR 0 7
55588: AND
55589: PUSH
55590: LD_VAR 0 4
55594: PPUSH
55595: CALL_OW 264
55599: PUSH
55600: LD_VAR 0 10
55604: IN
55605: NOT
55606: AND
55607: IFFALSE 55646
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55609: LD_VAR 0 4
55613: PPUSH
55614: LD_VAR 0 7
55618: PUSH
55619: LD_INT 1
55621: ARRAY
55622: PUSH
55623: LD_INT 1
55625: ARRAY
55626: PPUSH
55627: LD_VAR 0 7
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PUSH
55636: LD_INT 2
55638: ARRAY
55639: PPUSH
55640: CALL_OW 116
55644: GO 55935
// if path > tag then
55646: LD_VAR 0 2
55650: PUSH
55651: LD_VAR 0 9
55655: GREATER
55656: IFFALSE 55864
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55658: LD_ADDR_VAR 0 6
55662: PUSH
55663: LD_VAR 0 5
55667: PPUSH
55668: LD_INT 91
55670: PUSH
55671: LD_VAR 0 4
55675: PUSH
55676: LD_INT 8
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: PPUSH
55684: CALL_OW 72
55688: ST_TO_ADDR
// if nearEnemy then
55689: LD_VAR 0 6
55693: IFFALSE 55762
// begin if GetWeapon ( i ) = ru_time_lapser then
55695: LD_VAR 0 4
55699: PPUSH
55700: CALL_OW 264
55704: PUSH
55705: LD_INT 49
55707: EQUAL
55708: IFFALSE 55736
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55710: LD_VAR 0 4
55714: PPUSH
55715: LD_VAR 0 6
55719: PPUSH
55720: LD_VAR 0 4
55724: PPUSH
55725: CALL_OW 74
55729: PPUSH
55730: CALL_OW 112
55734: GO 55760
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55736: LD_VAR 0 4
55740: PPUSH
55741: LD_VAR 0 6
55745: PPUSH
55746: LD_VAR 0 4
55750: PPUSH
55751: CALL_OW 74
55755: PPUSH
55756: CALL 57010 0 2
// end else
55760: GO 55862
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55762: LD_VAR 0 4
55766: PPUSH
55767: LD_VAR 0 2
55771: PUSH
55772: LD_VAR 0 9
55776: ARRAY
55777: PUSH
55778: LD_INT 1
55780: ARRAY
55781: PPUSH
55782: LD_VAR 0 2
55786: PUSH
55787: LD_VAR 0 9
55791: ARRAY
55792: PUSH
55793: LD_INT 2
55795: ARRAY
55796: PPUSH
55797: CALL_OW 297
55801: PUSH
55802: LD_INT 6
55804: GREATER
55805: IFFALSE 55848
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55807: LD_VAR 0 4
55811: PPUSH
55812: LD_VAR 0 2
55816: PUSH
55817: LD_VAR 0 9
55821: ARRAY
55822: PUSH
55823: LD_INT 1
55825: ARRAY
55826: PPUSH
55827: LD_VAR 0 2
55831: PUSH
55832: LD_VAR 0 9
55836: ARRAY
55837: PUSH
55838: LD_INT 2
55840: ARRAY
55841: PPUSH
55842: CALL_OW 114
55846: GO 55862
// SetTag ( i , tag ) ;
55848: LD_VAR 0 4
55852: PPUSH
55853: LD_VAR 0 9
55857: PPUSH
55858: CALL_OW 109
// end else
55862: GO 55935
// if enemy then
55864: LD_VAR 0 5
55868: IFFALSE 55935
// begin if GetWeapon ( i ) = ru_time_lapser then
55870: LD_VAR 0 4
55874: PPUSH
55875: CALL_OW 264
55879: PUSH
55880: LD_INT 49
55882: EQUAL
55883: IFFALSE 55911
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55885: LD_VAR 0 4
55889: PPUSH
55890: LD_VAR 0 5
55894: PPUSH
55895: LD_VAR 0 4
55899: PPUSH
55900: CALL_OW 74
55904: PPUSH
55905: CALL_OW 112
55909: GO 55935
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55911: LD_VAR 0 4
55915: PPUSH
55916: LD_VAR 0 5
55920: PPUSH
55921: LD_VAR 0 4
55925: PPUSH
55926: CALL_OW 74
55930: PPUSH
55931: CALL 57010 0 2
// end ; end ;
55935: GO 55515
55937: POP
55938: POP
// end ;
55939: LD_VAR 0 3
55943: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55944: LD_INT 0
55946: PPUSH
55947: PPUSH
55948: PPUSH
// if not unit or IsInUnit ( unit ) then
55949: LD_VAR 0 1
55953: NOT
55954: PUSH
55955: LD_VAR 0 1
55959: PPUSH
55960: CALL_OW 310
55964: OR
55965: IFFALSE 55969
// exit ;
55967: GO 56060
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55969: LD_ADDR_VAR 0 4
55973: PUSH
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 250
55983: PPUSH
55984: LD_VAR 0 2
55988: PPUSH
55989: LD_INT 1
55991: PPUSH
55992: CALL_OW 272
55996: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55997: LD_ADDR_VAR 0 5
56001: PUSH
56002: LD_VAR 0 1
56006: PPUSH
56007: CALL_OW 251
56011: PPUSH
56012: LD_VAR 0 2
56016: PPUSH
56017: LD_INT 1
56019: PPUSH
56020: CALL_OW 273
56024: ST_TO_ADDR
// if ValidHex ( x , y ) then
56025: LD_VAR 0 4
56029: PPUSH
56030: LD_VAR 0 5
56034: PPUSH
56035: CALL_OW 488
56039: IFFALSE 56060
// ComTurnXY ( unit , x , y ) ;
56041: LD_VAR 0 1
56045: PPUSH
56046: LD_VAR 0 4
56050: PPUSH
56051: LD_VAR 0 5
56055: PPUSH
56056: CALL_OW 118
// end ;
56060: LD_VAR 0 3
56064: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56065: LD_INT 0
56067: PPUSH
56068: PPUSH
// result := false ;
56069: LD_ADDR_VAR 0 3
56073: PUSH
56074: LD_INT 0
56076: ST_TO_ADDR
// if not units then
56077: LD_VAR 0 2
56081: NOT
56082: IFFALSE 56086
// exit ;
56084: GO 56131
// for i in units do
56086: LD_ADDR_VAR 0 4
56090: PUSH
56091: LD_VAR 0 2
56095: PUSH
56096: FOR_IN
56097: IFFALSE 56129
// if See ( side , i ) then
56099: LD_VAR 0 1
56103: PPUSH
56104: LD_VAR 0 4
56108: PPUSH
56109: CALL_OW 292
56113: IFFALSE 56127
// begin result := true ;
56115: LD_ADDR_VAR 0 3
56119: PUSH
56120: LD_INT 1
56122: ST_TO_ADDR
// exit ;
56123: POP
56124: POP
56125: GO 56131
// end ;
56127: GO 56096
56129: POP
56130: POP
// end ;
56131: LD_VAR 0 3
56135: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56136: LD_INT 0
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
// if not unit or not points then
56142: LD_VAR 0 1
56146: NOT
56147: PUSH
56148: LD_VAR 0 2
56152: NOT
56153: OR
56154: IFFALSE 56158
// exit ;
56156: GO 56248
// dist := 99999 ;
56158: LD_ADDR_VAR 0 5
56162: PUSH
56163: LD_INT 99999
56165: ST_TO_ADDR
// for i in points do
56166: LD_ADDR_VAR 0 4
56170: PUSH
56171: LD_VAR 0 2
56175: PUSH
56176: FOR_IN
56177: IFFALSE 56246
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56179: LD_ADDR_VAR 0 6
56183: PUSH
56184: LD_VAR 0 1
56188: PPUSH
56189: LD_VAR 0 4
56193: PUSH
56194: LD_INT 1
56196: ARRAY
56197: PPUSH
56198: LD_VAR 0 4
56202: PUSH
56203: LD_INT 2
56205: ARRAY
56206: PPUSH
56207: CALL_OW 297
56211: ST_TO_ADDR
// if tmpDist < dist then
56212: LD_VAR 0 6
56216: PUSH
56217: LD_VAR 0 5
56221: LESS
56222: IFFALSE 56244
// begin result := i ;
56224: LD_ADDR_VAR 0 3
56228: PUSH
56229: LD_VAR 0 4
56233: ST_TO_ADDR
// dist := tmpDist ;
56234: LD_ADDR_VAR 0 5
56238: PUSH
56239: LD_VAR 0 6
56243: ST_TO_ADDR
// end ; end ;
56244: GO 56176
56246: POP
56247: POP
// end ;
56248: LD_VAR 0 3
56252: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56253: LD_INT 0
56255: PPUSH
// uc_side := side ;
56256: LD_ADDR_OWVAR 20
56260: PUSH
56261: LD_VAR 0 1
56265: ST_TO_ADDR
// uc_nation := 3 ;
56266: LD_ADDR_OWVAR 21
56270: PUSH
56271: LD_INT 3
56273: ST_TO_ADDR
// vc_chassis := 25 ;
56274: LD_ADDR_OWVAR 37
56278: PUSH
56279: LD_INT 25
56281: ST_TO_ADDR
// vc_engine := engine_siberite ;
56282: LD_ADDR_OWVAR 39
56286: PUSH
56287: LD_INT 3
56289: ST_TO_ADDR
// vc_control := control_computer ;
56290: LD_ADDR_OWVAR 38
56294: PUSH
56295: LD_INT 3
56297: ST_TO_ADDR
// vc_weapon := 59 ;
56298: LD_ADDR_OWVAR 40
56302: PUSH
56303: LD_INT 59
56305: ST_TO_ADDR
// result := CreateVehicle ;
56306: LD_ADDR_VAR 0 5
56310: PUSH
56311: CALL_OW 45
56315: ST_TO_ADDR
// SetDir ( result , d ) ;
56316: LD_VAR 0 5
56320: PPUSH
56321: LD_VAR 0 4
56325: PPUSH
56326: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56330: LD_VAR 0 5
56334: PPUSH
56335: LD_VAR 0 2
56339: PPUSH
56340: LD_VAR 0 3
56344: PPUSH
56345: LD_INT 0
56347: PPUSH
56348: CALL_OW 48
// end ;
56352: LD_VAR 0 5
56356: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56357: LD_INT 0
56359: PPUSH
56360: PPUSH
56361: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56362: LD_ADDR_VAR 0 2
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56385: LD_VAR 0 1
56389: NOT
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 264
56400: PUSH
56401: LD_INT 12
56403: PUSH
56404: LD_INT 51
56406: PUSH
56407: LD_INT 32
56409: PUSH
56410: LD_INT 89
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: IN
56419: NOT
56420: OR
56421: IFFALSE 56425
// exit ;
56423: GO 56523
// for i := 1 to 3 do
56425: LD_ADDR_VAR 0 3
56429: PUSH
56430: DOUBLE
56431: LD_INT 1
56433: DEC
56434: ST_TO_ADDR
56435: LD_INT 3
56437: PUSH
56438: FOR_TO
56439: IFFALSE 56521
// begin tmp := GetCargo ( cargo , i ) ;
56441: LD_ADDR_VAR 0 4
56445: PUSH
56446: LD_VAR 0 1
56450: PPUSH
56451: LD_VAR 0 3
56455: PPUSH
56456: CALL_OW 289
56460: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56461: LD_ADDR_VAR 0 2
56465: PUSH
56466: LD_VAR 0 2
56470: PPUSH
56471: LD_VAR 0 3
56475: PPUSH
56476: LD_VAR 0 4
56480: PPUSH
56481: CALL_OW 1
56485: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56486: LD_ADDR_VAR 0 2
56490: PUSH
56491: LD_VAR 0 2
56495: PPUSH
56496: LD_INT 4
56498: PPUSH
56499: LD_VAR 0 2
56503: PUSH
56504: LD_INT 4
56506: ARRAY
56507: PUSH
56508: LD_VAR 0 4
56512: PLUS
56513: PPUSH
56514: CALL_OW 1
56518: ST_TO_ADDR
// end ;
56519: GO 56438
56521: POP
56522: POP
// end ;
56523: LD_VAR 0 2
56527: RET
// export function Length ( array ) ; begin
56528: LD_INT 0
56530: PPUSH
// result := array + 0 ;
56531: LD_ADDR_VAR 0 2
56535: PUSH
56536: LD_VAR 0 1
56540: PUSH
56541: LD_INT 0
56543: PLUS
56544: ST_TO_ADDR
// end ;
56545: LD_VAR 0 2
56549: RET
// export function PrepareArray ( array ) ; begin
56550: LD_INT 0
56552: PPUSH
// result := array diff 0 ;
56553: LD_ADDR_VAR 0 2
56557: PUSH
56558: LD_VAR 0 1
56562: PUSH
56563: LD_INT 0
56565: DIFF
56566: ST_TO_ADDR
// if not result [ 1 ] then
56567: LD_VAR 0 2
56571: PUSH
56572: LD_INT 1
56574: ARRAY
56575: NOT
56576: IFFALSE 56596
// result := Delete ( result , 1 ) ;
56578: LD_ADDR_VAR 0 2
56582: PUSH
56583: LD_VAR 0 2
56587: PPUSH
56588: LD_INT 1
56590: PPUSH
56591: CALL_OW 3
56595: ST_TO_ADDR
// end ;
56596: LD_VAR 0 2
56600: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56601: LD_INT 0
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
// sibRocketRange := 25 ;
56607: LD_ADDR_VAR 0 6
56611: PUSH
56612: LD_INT 25
56614: ST_TO_ADDR
// result := false ;
56615: LD_ADDR_VAR 0 4
56619: PUSH
56620: LD_INT 0
56622: ST_TO_ADDR
// for i := 0 to 5 do
56623: LD_ADDR_VAR 0 5
56627: PUSH
56628: DOUBLE
56629: LD_INT 0
56631: DEC
56632: ST_TO_ADDR
56633: LD_INT 5
56635: PUSH
56636: FOR_TO
56637: IFFALSE 56704
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56639: LD_VAR 0 1
56643: PPUSH
56644: LD_VAR 0 5
56648: PPUSH
56649: LD_VAR 0 6
56653: PPUSH
56654: CALL_OW 272
56658: PPUSH
56659: LD_VAR 0 2
56663: PPUSH
56664: LD_VAR 0 5
56668: PPUSH
56669: LD_VAR 0 6
56673: PPUSH
56674: CALL_OW 273
56678: PPUSH
56679: LD_VAR 0 3
56683: PPUSH
56684: CALL_OW 309
56688: IFFALSE 56702
// begin result := true ;
56690: LD_ADDR_VAR 0 4
56694: PUSH
56695: LD_INT 1
56697: ST_TO_ADDR
// exit ;
56698: POP
56699: POP
56700: GO 56706
// end ;
56702: GO 56636
56704: POP
56705: POP
// end ;
56706: LD_VAR 0 4
56710: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56711: LD_INT 0
56713: PPUSH
56714: PPUSH
56715: PPUSH
// if btype = b_depot then
56716: LD_VAR 0 2
56720: PUSH
56721: LD_INT 0
56723: EQUAL
56724: IFFALSE 56736
// begin result := true ;
56726: LD_ADDR_VAR 0 3
56730: PUSH
56731: LD_INT 1
56733: ST_TO_ADDR
// exit ;
56734: GO 56852
// end ; pom := GetBase ( depot ) ;
56736: LD_ADDR_VAR 0 4
56740: PUSH
56741: LD_VAR 0 1
56745: PPUSH
56746: CALL_OW 274
56750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56751: LD_ADDR_VAR 0 5
56755: PUSH
56756: LD_VAR 0 2
56760: PPUSH
56761: LD_VAR 0 1
56765: PPUSH
56766: CALL_OW 248
56770: PPUSH
56771: CALL_OW 450
56775: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56776: LD_ADDR_VAR 0 3
56780: PUSH
56781: LD_VAR 0 4
56785: PPUSH
56786: LD_INT 1
56788: PPUSH
56789: CALL_OW 275
56793: PUSH
56794: LD_VAR 0 5
56798: PUSH
56799: LD_INT 1
56801: ARRAY
56802: GREATEREQUAL
56803: PUSH
56804: LD_VAR 0 4
56808: PPUSH
56809: LD_INT 2
56811: PPUSH
56812: CALL_OW 275
56816: PUSH
56817: LD_VAR 0 5
56821: PUSH
56822: LD_INT 2
56824: ARRAY
56825: GREATEREQUAL
56826: AND
56827: PUSH
56828: LD_VAR 0 4
56832: PPUSH
56833: LD_INT 3
56835: PPUSH
56836: CALL_OW 275
56840: PUSH
56841: LD_VAR 0 5
56845: PUSH
56846: LD_INT 3
56848: ARRAY
56849: GREATEREQUAL
56850: AND
56851: ST_TO_ADDR
// end ;
56852: LD_VAR 0 3
56856: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56857: LD_INT 0
56859: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56860: LD_VAR 0 1
56864: PPUSH
56865: LD_VAR 0 2
56869: PPUSH
56870: LD_INT 0
56872: PPUSH
56873: LD_INT 0
56875: PPUSH
56876: LD_INT 1
56878: PPUSH
56879: LD_INT 0
56881: PPUSH
56882: CALL_OW 587
// end ;
56886: LD_VAR 0 3
56890: RET
// export function CenterOnNow ( unit ) ; begin
56891: LD_INT 0
56893: PPUSH
// result := IsInUnit ( unit ) ;
56894: LD_ADDR_VAR 0 2
56898: PUSH
56899: LD_VAR 0 1
56903: PPUSH
56904: CALL_OW 310
56908: ST_TO_ADDR
// if not result then
56909: LD_VAR 0 2
56913: NOT
56914: IFFALSE 56926
// result := unit ;
56916: LD_ADDR_VAR 0 2
56920: PUSH
56921: LD_VAR 0 1
56925: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56926: LD_VAR 0 1
56930: PPUSH
56931: CALL_OW 87
// end ;
56935: LD_VAR 0 2
56939: RET
// export function ComMoveHex ( unit , hex ) ; begin
56940: LD_INT 0
56942: PPUSH
// if not hex then
56943: LD_VAR 0 2
56947: NOT
56948: IFFALSE 56952
// exit ;
56950: GO 57005
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56952: LD_VAR 0 2
56956: PUSH
56957: LD_INT 1
56959: ARRAY
56960: PPUSH
56961: LD_VAR 0 2
56965: PUSH
56966: LD_INT 2
56968: ARRAY
56969: PPUSH
56970: CALL_OW 428
56974: IFFALSE 56978
// exit ;
56976: GO 57005
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56978: LD_VAR 0 1
56982: PPUSH
56983: LD_VAR 0 2
56987: PUSH
56988: LD_INT 1
56990: ARRAY
56991: PPUSH
56992: LD_VAR 0 2
56996: PUSH
56997: LD_INT 2
56999: ARRAY
57000: PPUSH
57001: CALL_OW 111
// end ;
57005: LD_VAR 0 3
57009: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57010: LD_INT 0
57012: PPUSH
57013: PPUSH
57014: PPUSH
// if not unit or not enemy then
57015: LD_VAR 0 1
57019: NOT
57020: PUSH
57021: LD_VAR 0 2
57025: NOT
57026: OR
57027: IFFALSE 57031
// exit ;
57029: GO 57155
// x := GetX ( enemy ) ;
57031: LD_ADDR_VAR 0 4
57035: PUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: CALL_OW 250
57045: ST_TO_ADDR
// y := GetY ( enemy ) ;
57046: LD_ADDR_VAR 0 5
57050: PUSH
57051: LD_VAR 0 2
57055: PPUSH
57056: CALL_OW 251
57060: ST_TO_ADDR
// if ValidHex ( x , y ) then
57061: LD_VAR 0 4
57065: PPUSH
57066: LD_VAR 0 5
57070: PPUSH
57071: CALL_OW 488
57075: IFFALSE 57155
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57077: LD_VAR 0 2
57081: PPUSH
57082: CALL_OW 247
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: LD_INT 2
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: IN
57097: PUSH
57098: LD_VAR 0 1
57102: PPUSH
57103: CALL_OW 255
57107: PPUSH
57108: LD_VAR 0 2
57112: PPUSH
57113: CALL_OW 292
57117: OR
57118: IFFALSE 57136
// ComAttackUnit ( unit , enemy ) else
57120: LD_VAR 0 1
57124: PPUSH
57125: LD_VAR 0 2
57129: PPUSH
57130: CALL_OW 115
57134: GO 57155
// ComAgressiveMove ( unit , x , y ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_VAR 0 4
57145: PPUSH
57146: LD_VAR 0 5
57150: PPUSH
57151: CALL_OW 114
// end ;
57155: LD_VAR 0 3
57159: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57160: LD_INT 0
57162: PPUSH
57163: PPUSH
57164: PPUSH
// list := AreaToList ( area , 0 ) ;
57165: LD_ADDR_VAR 0 5
57169: PUSH
57170: LD_VAR 0 1
57174: PPUSH
57175: LD_INT 0
57177: PPUSH
57178: CALL_OW 517
57182: ST_TO_ADDR
// if not list then
57183: LD_VAR 0 5
57187: NOT
57188: IFFALSE 57192
// exit ;
57190: GO 57322
// if all then
57192: LD_VAR 0 2
57196: IFFALSE 57284
// begin for i := 1 to list [ 1 ] do
57198: LD_ADDR_VAR 0 4
57202: PUSH
57203: DOUBLE
57204: LD_INT 1
57206: DEC
57207: ST_TO_ADDR
57208: LD_VAR 0 5
57212: PUSH
57213: LD_INT 1
57215: ARRAY
57216: PUSH
57217: FOR_TO
57218: IFFALSE 57280
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57220: LD_ADDR_VAR 0 3
57224: PUSH
57225: LD_VAR 0 3
57229: PPUSH
57230: LD_VAR 0 3
57234: PUSH
57235: LD_INT 1
57237: PLUS
57238: PPUSH
57239: LD_VAR 0 5
57243: PUSH
57244: LD_INT 1
57246: ARRAY
57247: PUSH
57248: LD_VAR 0 4
57252: ARRAY
57253: PUSH
57254: LD_VAR 0 5
57258: PUSH
57259: LD_INT 2
57261: ARRAY
57262: PUSH
57263: LD_VAR 0 4
57267: ARRAY
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PPUSH
57273: CALL_OW 1
57277: ST_TO_ADDR
57278: GO 57217
57280: POP
57281: POP
// exit ;
57282: GO 57322
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57284: LD_ADDR_VAR 0 3
57288: PUSH
57289: LD_VAR 0 5
57293: PUSH
57294: LD_INT 1
57296: ARRAY
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PUSH
57302: LD_VAR 0 5
57306: PUSH
57307: LD_INT 2
57309: ARRAY
57310: PUSH
57311: LD_INT 1
57313: ARRAY
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: ST_TO_ADDR
// end ;
57322: LD_VAR 0 3
57326: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57327: LD_INT 0
57329: PPUSH
57330: PPUSH
// list := AreaToList ( area , 0 ) ;
57331: LD_ADDR_VAR 0 4
57335: PUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: LD_INT 0
57343: PPUSH
57344: CALL_OW 517
57348: ST_TO_ADDR
// if not list then
57349: LD_VAR 0 4
57353: NOT
57354: IFFALSE 57358
// exit ;
57356: GO 57399
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57358: LD_ADDR_VAR 0 3
57362: PUSH
57363: LD_VAR 0 4
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PUSH
57372: LD_INT 1
57374: ARRAY
57375: PUSH
57376: LD_VAR 0 4
57380: PUSH
57381: LD_INT 2
57383: ARRAY
57384: PUSH
57385: LD_INT 1
57387: ARRAY
57388: PUSH
57389: LD_VAR 0 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: ST_TO_ADDR
// end ;
57399: LD_VAR 0 3
57403: RET
// export function First ( array ) ; begin
57404: LD_INT 0
57406: PPUSH
// if not array then
57407: LD_VAR 0 1
57411: NOT
57412: IFFALSE 57416
// exit ;
57414: GO 57430
// result := array [ 1 ] ;
57416: LD_ADDR_VAR 0 2
57420: PUSH
57421: LD_VAR 0 1
57425: PUSH
57426: LD_INT 1
57428: ARRAY
57429: ST_TO_ADDR
// end ;
57430: LD_VAR 0 2
57434: RET
// export function Last ( array ) ; begin
57435: LD_INT 0
57437: PPUSH
// if not array then
57438: LD_VAR 0 1
57442: NOT
57443: IFFALSE 57447
// exit ;
57445: GO 57463
// result := array [ array ] ;
57447: LD_ADDR_VAR 0 2
57451: PUSH
57452: LD_VAR 0 1
57456: PUSH
57457: LD_VAR 0 1
57461: ARRAY
57462: ST_TO_ADDR
// end ;
57463: LD_VAR 0 2
57467: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57468: LD_INT 0
57470: PPUSH
57471: PPUSH
// result := [ ] ;
57472: LD_ADDR_VAR 0 5
57476: PUSH
57477: EMPTY
57478: ST_TO_ADDR
// if not array then
57479: LD_VAR 0 1
57483: NOT
57484: IFFALSE 57488
// exit ;
57486: GO 57600
// for i := 1 to array do
57488: LD_ADDR_VAR 0 6
57492: PUSH
57493: DOUBLE
57494: LD_INT 1
57496: DEC
57497: ST_TO_ADDR
57498: LD_VAR 0 1
57502: PUSH
57503: FOR_TO
57504: IFFALSE 57598
// if array [ i ] [ index ] = value then
57506: LD_VAR 0 1
57510: PUSH
57511: LD_VAR 0 6
57515: ARRAY
57516: PUSH
57517: LD_VAR 0 2
57521: ARRAY
57522: PUSH
57523: LD_VAR 0 3
57527: EQUAL
57528: IFFALSE 57596
// begin if indexColumn then
57530: LD_VAR 0 4
57534: IFFALSE 57570
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57536: LD_ADDR_VAR 0 5
57540: PUSH
57541: LD_VAR 0 5
57545: PPUSH
57546: LD_VAR 0 1
57550: PUSH
57551: LD_VAR 0 6
57555: ARRAY
57556: PUSH
57557: LD_VAR 0 4
57561: ARRAY
57562: PPUSH
57563: CALL 52792 0 2
57567: ST_TO_ADDR
57568: GO 57596
// result := Join ( result , array [ i ] ) ;
57570: LD_ADDR_VAR 0 5
57574: PUSH
57575: LD_VAR 0 5
57579: PPUSH
57580: LD_VAR 0 1
57584: PUSH
57585: LD_VAR 0 6
57589: ARRAY
57590: PPUSH
57591: CALL 52792 0 2
57595: ST_TO_ADDR
// end ;
57596: GO 57503
57598: POP
57599: POP
// end ;
57600: LD_VAR 0 5
57604: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57605: LD_INT 0
57607: PPUSH
// if not vehicles or not parkingPoint then
57608: LD_VAR 0 1
57612: NOT
57613: PUSH
57614: LD_VAR 0 2
57618: NOT
57619: OR
57620: IFFALSE 57624
// exit ;
57622: GO 57722
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57624: LD_ADDR_VAR 0 1
57628: PUSH
57629: LD_VAR 0 1
57633: PPUSH
57634: LD_INT 50
57636: PUSH
57637: EMPTY
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 92
57645: PUSH
57646: LD_VAR 0 2
57650: PUSH
57651: LD_INT 1
57653: ARRAY
57654: PUSH
57655: LD_VAR 0 2
57659: PUSH
57660: LD_INT 2
57662: ARRAY
57663: PUSH
57664: LD_INT 8
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PPUSH
57681: CALL_OW 72
57685: ST_TO_ADDR
// if not vehicles then
57686: LD_VAR 0 1
57690: NOT
57691: IFFALSE 57695
// exit ;
57693: GO 57722
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_INT 1
57707: ARRAY
57708: PPUSH
57709: LD_VAR 0 2
57713: PUSH
57714: LD_INT 2
57716: ARRAY
57717: PPUSH
57718: CALL_OW 111
// end ;
57722: LD_VAR 0 3
57726: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57727: LD_INT 0
57729: PPUSH
57730: PPUSH
57731: PPUSH
// if not side or not area then
57732: LD_VAR 0 1
57736: NOT
57737: PUSH
57738: LD_VAR 0 2
57742: NOT
57743: OR
57744: IFFALSE 57748
// exit ;
57746: GO 57867
// tmp := AreaToList ( area , 0 ) ;
57748: LD_ADDR_VAR 0 5
57752: PUSH
57753: LD_VAR 0 2
57757: PPUSH
57758: LD_INT 0
57760: PPUSH
57761: CALL_OW 517
57765: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57766: LD_ADDR_VAR 0 4
57770: PUSH
57771: DOUBLE
57772: LD_INT 1
57774: DEC
57775: ST_TO_ADDR
57776: LD_VAR 0 5
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PUSH
57785: FOR_TO
57786: IFFALSE 57865
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57788: LD_VAR 0 5
57792: PUSH
57793: LD_INT 1
57795: ARRAY
57796: PUSH
57797: LD_VAR 0 4
57801: ARRAY
57802: PPUSH
57803: LD_VAR 0 5
57807: PUSH
57808: LD_INT 2
57810: ARRAY
57811: PUSH
57812: LD_VAR 0 4
57816: ARRAY
57817: PPUSH
57818: CALL_OW 351
57822: IFFALSE 57863
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57824: LD_VAR 0 5
57828: PUSH
57829: LD_INT 1
57831: ARRAY
57832: PUSH
57833: LD_VAR 0 4
57837: ARRAY
57838: PPUSH
57839: LD_VAR 0 5
57843: PUSH
57844: LD_INT 2
57846: ARRAY
57847: PUSH
57848: LD_VAR 0 4
57852: ARRAY
57853: PPUSH
57854: LD_VAR 0 1
57858: PPUSH
57859: CALL_OW 244
// end ;
57863: GO 57785
57865: POP
57866: POP
// end ; end_of_file
57867: LD_VAR 0 3
57871: RET
// export globalGameSaveCounter ; every 0 0$1 do
57872: GO 57874
57874: DISABLE
// begin enable ;
57875: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57876: LD_STRING updateTimer(
57878: PUSH
57879: LD_OWVAR 1
57883: STR
57884: PUSH
57885: LD_STRING );
57887: STR
57888: PPUSH
57889: CALL_OW 559
// end ;
57893: END
// every 0 0$1 do
57894: GO 57896
57896: DISABLE
// begin globalGameSaveCounter := 0 ;
57897: LD_ADDR_EXP 45
57901: PUSH
57902: LD_INT 0
57904: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57905: LD_STRING setGameSaveCounter(0)
57907: PPUSH
57908: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57912: LD_STRING initStreamRollete();
57914: PPUSH
57915: CALL_OW 559
// InitStreamMode ;
57919: CALL 59262 0 0
// DefineStreamItems ( false ) ;
57923: LD_INT 0
57925: PPUSH
57926: CALL 59726 0 1
// end ;
57930: END
// export function SOS_MapStart ( ) ; begin
57931: LD_INT 0
57933: PPUSH
// if streamModeActive then
57934: LD_EXP 46
57938: IFFALSE 57947
// DefineStreamItems ( true ) ;
57940: LD_INT 1
57942: PPUSH
57943: CALL 59726 0 1
// UpdateLuaVariables ( ) ;
57947: CALL 57964 0 0
// UpdateFactoryWaypoints ( ) ;
57951: CALL 72595 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57955: CALL 72852 0 0
// end ;
57959: LD_VAR 0 1
57963: RET
// function UpdateLuaVariables ( ) ; begin
57964: LD_INT 0
57966: PPUSH
// if globalGameSaveCounter then
57967: LD_EXP 45
57971: IFFALSE 58005
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57973: LD_ADDR_EXP 45
57977: PUSH
57978: LD_EXP 45
57982: PPUSH
57983: CALL 54153 0 1
57987: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57988: LD_STRING setGameSaveCounter(
57990: PUSH
57991: LD_EXP 45
57995: STR
57996: PUSH
57997: LD_STRING )
57999: STR
58000: PPUSH
58001: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58005: LD_STRING setGameDifficulty(
58007: PUSH
58008: LD_OWVAR 67
58012: STR
58013: PUSH
58014: LD_STRING )
58016: STR
58017: PPUSH
58018: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58022: LD_STRING displayDifficulty(
58024: PUSH
58025: LD_OWVAR 67
58029: STR
58030: PUSH
58031: LD_STRING )
58033: STR
58034: PPUSH
58035: CALL_OW 559
// end ;
58039: LD_VAR 0 1
58043: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58044: LD_INT 0
58046: PPUSH
// if p2 = stream_mode then
58047: LD_VAR 0 2
58051: PUSH
58052: LD_INT 100
58054: EQUAL
58055: IFFALSE 59058
// begin if not StreamModeActive then
58057: LD_EXP 46
58061: NOT
58062: IFFALSE 58072
// StreamModeActive := true ;
58064: LD_ADDR_EXP 46
58068: PUSH
58069: LD_INT 1
58071: ST_TO_ADDR
// if p3 = 0 then
58072: LD_VAR 0 3
58076: PUSH
58077: LD_INT 0
58079: EQUAL
58080: IFFALSE 58086
// InitStreamMode ;
58082: CALL 59262 0 0
// if p3 = 1 then
58086: LD_VAR 0 3
58090: PUSH
58091: LD_INT 1
58093: EQUAL
58094: IFFALSE 58104
// sRocket := true ;
58096: LD_ADDR_EXP 51
58100: PUSH
58101: LD_INT 1
58103: ST_TO_ADDR
// if p3 = 2 then
58104: LD_VAR 0 3
58108: PUSH
58109: LD_INT 2
58111: EQUAL
58112: IFFALSE 58122
// sSpeed := true ;
58114: LD_ADDR_EXP 50
58118: PUSH
58119: LD_INT 1
58121: ST_TO_ADDR
// if p3 = 3 then
58122: LD_VAR 0 3
58126: PUSH
58127: LD_INT 3
58129: EQUAL
58130: IFFALSE 58140
// sEngine := true ;
58132: LD_ADDR_EXP 52
58136: PUSH
58137: LD_INT 1
58139: ST_TO_ADDR
// if p3 = 4 then
58140: LD_VAR 0 3
58144: PUSH
58145: LD_INT 4
58147: EQUAL
58148: IFFALSE 58158
// sSpec := true ;
58150: LD_ADDR_EXP 49
58154: PUSH
58155: LD_INT 1
58157: ST_TO_ADDR
// if p3 = 5 then
58158: LD_VAR 0 3
58162: PUSH
58163: LD_INT 5
58165: EQUAL
58166: IFFALSE 58176
// sLevel := true ;
58168: LD_ADDR_EXP 53
58172: PUSH
58173: LD_INT 1
58175: ST_TO_ADDR
// if p3 = 6 then
58176: LD_VAR 0 3
58180: PUSH
58181: LD_INT 6
58183: EQUAL
58184: IFFALSE 58194
// sArmoury := true ;
58186: LD_ADDR_EXP 54
58190: PUSH
58191: LD_INT 1
58193: ST_TO_ADDR
// if p3 = 7 then
58194: LD_VAR 0 3
58198: PUSH
58199: LD_INT 7
58201: EQUAL
58202: IFFALSE 58212
// sRadar := true ;
58204: LD_ADDR_EXP 55
58208: PUSH
58209: LD_INT 1
58211: ST_TO_ADDR
// if p3 = 8 then
58212: LD_VAR 0 3
58216: PUSH
58217: LD_INT 8
58219: EQUAL
58220: IFFALSE 58230
// sBunker := true ;
58222: LD_ADDR_EXP 56
58226: PUSH
58227: LD_INT 1
58229: ST_TO_ADDR
// if p3 = 9 then
58230: LD_VAR 0 3
58234: PUSH
58235: LD_INT 9
58237: EQUAL
58238: IFFALSE 58248
// sHack := true ;
58240: LD_ADDR_EXP 57
58244: PUSH
58245: LD_INT 1
58247: ST_TO_ADDR
// if p3 = 10 then
58248: LD_VAR 0 3
58252: PUSH
58253: LD_INT 10
58255: EQUAL
58256: IFFALSE 58266
// sFire := true ;
58258: LD_ADDR_EXP 58
58262: PUSH
58263: LD_INT 1
58265: ST_TO_ADDR
// if p3 = 11 then
58266: LD_VAR 0 3
58270: PUSH
58271: LD_INT 11
58273: EQUAL
58274: IFFALSE 58284
// sRefresh := true ;
58276: LD_ADDR_EXP 59
58280: PUSH
58281: LD_INT 1
58283: ST_TO_ADDR
// if p3 = 12 then
58284: LD_VAR 0 3
58288: PUSH
58289: LD_INT 12
58291: EQUAL
58292: IFFALSE 58302
// sExp := true ;
58294: LD_ADDR_EXP 60
58298: PUSH
58299: LD_INT 1
58301: ST_TO_ADDR
// if p3 = 13 then
58302: LD_VAR 0 3
58306: PUSH
58307: LD_INT 13
58309: EQUAL
58310: IFFALSE 58320
// sDepot := true ;
58312: LD_ADDR_EXP 61
58316: PUSH
58317: LD_INT 1
58319: ST_TO_ADDR
// if p3 = 14 then
58320: LD_VAR 0 3
58324: PUSH
58325: LD_INT 14
58327: EQUAL
58328: IFFALSE 58338
// sFlag := true ;
58330: LD_ADDR_EXP 62
58334: PUSH
58335: LD_INT 1
58337: ST_TO_ADDR
// if p3 = 15 then
58338: LD_VAR 0 3
58342: PUSH
58343: LD_INT 15
58345: EQUAL
58346: IFFALSE 58356
// sKamikadze := true ;
58348: LD_ADDR_EXP 70
58352: PUSH
58353: LD_INT 1
58355: ST_TO_ADDR
// if p3 = 16 then
58356: LD_VAR 0 3
58360: PUSH
58361: LD_INT 16
58363: EQUAL
58364: IFFALSE 58374
// sTroll := true ;
58366: LD_ADDR_EXP 71
58370: PUSH
58371: LD_INT 1
58373: ST_TO_ADDR
// if p3 = 17 then
58374: LD_VAR 0 3
58378: PUSH
58379: LD_INT 17
58381: EQUAL
58382: IFFALSE 58392
// sSlow := true ;
58384: LD_ADDR_EXP 72
58388: PUSH
58389: LD_INT 1
58391: ST_TO_ADDR
// if p3 = 18 then
58392: LD_VAR 0 3
58396: PUSH
58397: LD_INT 18
58399: EQUAL
58400: IFFALSE 58410
// sLack := true ;
58402: LD_ADDR_EXP 73
58406: PUSH
58407: LD_INT 1
58409: ST_TO_ADDR
// if p3 = 19 then
58410: LD_VAR 0 3
58414: PUSH
58415: LD_INT 19
58417: EQUAL
58418: IFFALSE 58428
// sTank := true ;
58420: LD_ADDR_EXP 75
58424: PUSH
58425: LD_INT 1
58427: ST_TO_ADDR
// if p3 = 20 then
58428: LD_VAR 0 3
58432: PUSH
58433: LD_INT 20
58435: EQUAL
58436: IFFALSE 58446
// sRemote := true ;
58438: LD_ADDR_EXP 76
58442: PUSH
58443: LD_INT 1
58445: ST_TO_ADDR
// if p3 = 21 then
58446: LD_VAR 0 3
58450: PUSH
58451: LD_INT 21
58453: EQUAL
58454: IFFALSE 58464
// sPowell := true ;
58456: LD_ADDR_EXP 77
58460: PUSH
58461: LD_INT 1
58463: ST_TO_ADDR
// if p3 = 22 then
58464: LD_VAR 0 3
58468: PUSH
58469: LD_INT 22
58471: EQUAL
58472: IFFALSE 58482
// sTeleport := true ;
58474: LD_ADDR_EXP 80
58478: PUSH
58479: LD_INT 1
58481: ST_TO_ADDR
// if p3 = 23 then
58482: LD_VAR 0 3
58486: PUSH
58487: LD_INT 23
58489: EQUAL
58490: IFFALSE 58500
// sOilTower := true ;
58492: LD_ADDR_EXP 82
58496: PUSH
58497: LD_INT 1
58499: ST_TO_ADDR
// if p3 = 24 then
58500: LD_VAR 0 3
58504: PUSH
58505: LD_INT 24
58507: EQUAL
58508: IFFALSE 58518
// sShovel := true ;
58510: LD_ADDR_EXP 83
58514: PUSH
58515: LD_INT 1
58517: ST_TO_ADDR
// if p3 = 25 then
58518: LD_VAR 0 3
58522: PUSH
58523: LD_INT 25
58525: EQUAL
58526: IFFALSE 58536
// sSheik := true ;
58528: LD_ADDR_EXP 84
58532: PUSH
58533: LD_INT 1
58535: ST_TO_ADDR
// if p3 = 26 then
58536: LD_VAR 0 3
58540: PUSH
58541: LD_INT 26
58543: EQUAL
58544: IFFALSE 58554
// sEarthquake := true ;
58546: LD_ADDR_EXP 86
58550: PUSH
58551: LD_INT 1
58553: ST_TO_ADDR
// if p3 = 27 then
58554: LD_VAR 0 3
58558: PUSH
58559: LD_INT 27
58561: EQUAL
58562: IFFALSE 58572
// sAI := true ;
58564: LD_ADDR_EXP 87
58568: PUSH
58569: LD_INT 1
58571: ST_TO_ADDR
// if p3 = 28 then
58572: LD_VAR 0 3
58576: PUSH
58577: LD_INT 28
58579: EQUAL
58580: IFFALSE 58590
// sCargo := true ;
58582: LD_ADDR_EXP 90
58586: PUSH
58587: LD_INT 1
58589: ST_TO_ADDR
// if p3 = 29 then
58590: LD_VAR 0 3
58594: PUSH
58595: LD_INT 29
58597: EQUAL
58598: IFFALSE 58608
// sDLaser := true ;
58600: LD_ADDR_EXP 91
58604: PUSH
58605: LD_INT 1
58607: ST_TO_ADDR
// if p3 = 30 then
58608: LD_VAR 0 3
58612: PUSH
58613: LD_INT 30
58615: EQUAL
58616: IFFALSE 58626
// sExchange := true ;
58618: LD_ADDR_EXP 92
58622: PUSH
58623: LD_INT 1
58625: ST_TO_ADDR
// if p3 = 31 then
58626: LD_VAR 0 3
58630: PUSH
58631: LD_INT 31
58633: EQUAL
58634: IFFALSE 58644
// sFac := true ;
58636: LD_ADDR_EXP 93
58640: PUSH
58641: LD_INT 1
58643: ST_TO_ADDR
// if p3 = 32 then
58644: LD_VAR 0 3
58648: PUSH
58649: LD_INT 32
58651: EQUAL
58652: IFFALSE 58662
// sPower := true ;
58654: LD_ADDR_EXP 94
58658: PUSH
58659: LD_INT 1
58661: ST_TO_ADDR
// if p3 = 33 then
58662: LD_VAR 0 3
58666: PUSH
58667: LD_INT 33
58669: EQUAL
58670: IFFALSE 58680
// sRandom := true ;
58672: LD_ADDR_EXP 95
58676: PUSH
58677: LD_INT 1
58679: ST_TO_ADDR
// if p3 = 34 then
58680: LD_VAR 0 3
58684: PUSH
58685: LD_INT 34
58687: EQUAL
58688: IFFALSE 58698
// sShield := true ;
58690: LD_ADDR_EXP 96
58694: PUSH
58695: LD_INT 1
58697: ST_TO_ADDR
// if p3 = 35 then
58698: LD_VAR 0 3
58702: PUSH
58703: LD_INT 35
58705: EQUAL
58706: IFFALSE 58716
// sTime := true ;
58708: LD_ADDR_EXP 97
58712: PUSH
58713: LD_INT 1
58715: ST_TO_ADDR
// if p3 = 36 then
58716: LD_VAR 0 3
58720: PUSH
58721: LD_INT 36
58723: EQUAL
58724: IFFALSE 58734
// sTools := true ;
58726: LD_ADDR_EXP 98
58730: PUSH
58731: LD_INT 1
58733: ST_TO_ADDR
// if p3 = 101 then
58734: LD_VAR 0 3
58738: PUSH
58739: LD_INT 101
58741: EQUAL
58742: IFFALSE 58752
// sSold := true ;
58744: LD_ADDR_EXP 63
58748: PUSH
58749: LD_INT 1
58751: ST_TO_ADDR
// if p3 = 102 then
58752: LD_VAR 0 3
58756: PUSH
58757: LD_INT 102
58759: EQUAL
58760: IFFALSE 58770
// sDiff := true ;
58762: LD_ADDR_EXP 64
58766: PUSH
58767: LD_INT 1
58769: ST_TO_ADDR
// if p3 = 103 then
58770: LD_VAR 0 3
58774: PUSH
58775: LD_INT 103
58777: EQUAL
58778: IFFALSE 58788
// sFog := true ;
58780: LD_ADDR_EXP 67
58784: PUSH
58785: LD_INT 1
58787: ST_TO_ADDR
// if p3 = 104 then
58788: LD_VAR 0 3
58792: PUSH
58793: LD_INT 104
58795: EQUAL
58796: IFFALSE 58806
// sReset := true ;
58798: LD_ADDR_EXP 68
58802: PUSH
58803: LD_INT 1
58805: ST_TO_ADDR
// if p3 = 105 then
58806: LD_VAR 0 3
58810: PUSH
58811: LD_INT 105
58813: EQUAL
58814: IFFALSE 58824
// sSun := true ;
58816: LD_ADDR_EXP 69
58820: PUSH
58821: LD_INT 1
58823: ST_TO_ADDR
// if p3 = 106 then
58824: LD_VAR 0 3
58828: PUSH
58829: LD_INT 106
58831: EQUAL
58832: IFFALSE 58842
// sTiger := true ;
58834: LD_ADDR_EXP 65
58838: PUSH
58839: LD_INT 1
58841: ST_TO_ADDR
// if p3 = 107 then
58842: LD_VAR 0 3
58846: PUSH
58847: LD_INT 107
58849: EQUAL
58850: IFFALSE 58860
// sBomb := true ;
58852: LD_ADDR_EXP 66
58856: PUSH
58857: LD_INT 1
58859: ST_TO_ADDR
// if p3 = 108 then
58860: LD_VAR 0 3
58864: PUSH
58865: LD_INT 108
58867: EQUAL
58868: IFFALSE 58878
// sWound := true ;
58870: LD_ADDR_EXP 74
58874: PUSH
58875: LD_INT 1
58877: ST_TO_ADDR
// if p3 = 109 then
58878: LD_VAR 0 3
58882: PUSH
58883: LD_INT 109
58885: EQUAL
58886: IFFALSE 58896
// sBetray := true ;
58888: LD_ADDR_EXP 78
58892: PUSH
58893: LD_INT 1
58895: ST_TO_ADDR
// if p3 = 110 then
58896: LD_VAR 0 3
58900: PUSH
58901: LD_INT 110
58903: EQUAL
58904: IFFALSE 58914
// sContamin := true ;
58906: LD_ADDR_EXP 79
58910: PUSH
58911: LD_INT 1
58913: ST_TO_ADDR
// if p3 = 111 then
58914: LD_VAR 0 3
58918: PUSH
58919: LD_INT 111
58921: EQUAL
58922: IFFALSE 58932
// sOil := true ;
58924: LD_ADDR_EXP 81
58928: PUSH
58929: LD_INT 1
58931: ST_TO_ADDR
// if p3 = 112 then
58932: LD_VAR 0 3
58936: PUSH
58937: LD_INT 112
58939: EQUAL
58940: IFFALSE 58950
// sStu := true ;
58942: LD_ADDR_EXP 85
58946: PUSH
58947: LD_INT 1
58949: ST_TO_ADDR
// if p3 = 113 then
58950: LD_VAR 0 3
58954: PUSH
58955: LD_INT 113
58957: EQUAL
58958: IFFALSE 58968
// sBazooka := true ;
58960: LD_ADDR_EXP 88
58964: PUSH
58965: LD_INT 1
58967: ST_TO_ADDR
// if p3 = 114 then
58968: LD_VAR 0 3
58972: PUSH
58973: LD_INT 114
58975: EQUAL
58976: IFFALSE 58986
// sMortar := true ;
58978: LD_ADDR_EXP 89
58982: PUSH
58983: LD_INT 1
58985: ST_TO_ADDR
// if p3 = 115 then
58986: LD_VAR 0 3
58990: PUSH
58991: LD_INT 115
58993: EQUAL
58994: IFFALSE 59004
// sRanger := true ;
58996: LD_ADDR_EXP 99
59000: PUSH
59001: LD_INT 1
59003: ST_TO_ADDR
// if p3 = 116 then
59004: LD_VAR 0 3
59008: PUSH
59009: LD_INT 116
59011: EQUAL
59012: IFFALSE 59022
// sComputer := true ;
59014: LD_ADDR_EXP 100
59018: PUSH
59019: LD_INT 1
59021: ST_TO_ADDR
// if p3 = 117 then
59022: LD_VAR 0 3
59026: PUSH
59027: LD_INT 117
59029: EQUAL
59030: IFFALSE 59040
// s30 := true ;
59032: LD_ADDR_EXP 101
59036: PUSH
59037: LD_INT 1
59039: ST_TO_ADDR
// if p3 = 118 then
59040: LD_VAR 0 3
59044: PUSH
59045: LD_INT 118
59047: EQUAL
59048: IFFALSE 59058
// s60 := true ;
59050: LD_ADDR_EXP 102
59054: PUSH
59055: LD_INT 1
59057: ST_TO_ADDR
// end ; if p2 = hack_mode then
59058: LD_VAR 0 2
59062: PUSH
59063: LD_INT 101
59065: EQUAL
59066: IFFALSE 59194
// begin case p3 of 1 :
59068: LD_VAR 0 3
59072: PUSH
59073: LD_INT 1
59075: DOUBLE
59076: EQUAL
59077: IFTRUE 59081
59079: GO 59088
59081: POP
// hHackUnlimitedResources ; 2 :
59082: CALL 71341 0 0
59086: GO 59194
59088: LD_INT 2
59090: DOUBLE
59091: EQUAL
59092: IFTRUE 59096
59094: GO 59103
59096: POP
// hHackSetLevel10 ; 3 :
59097: CALL 71474 0 0
59101: GO 59194
59103: LD_INT 3
59105: DOUBLE
59106: EQUAL
59107: IFTRUE 59111
59109: GO 59118
59111: POP
// hHackSetLevel10YourUnits ; 4 :
59112: CALL 71559 0 0
59116: GO 59194
59118: LD_INT 4
59120: DOUBLE
59121: EQUAL
59122: IFTRUE 59126
59124: GO 59133
59126: POP
// hHackInvincible ; 5 :
59127: CALL 72007 0 0
59131: GO 59194
59133: LD_INT 5
59135: DOUBLE
59136: EQUAL
59137: IFTRUE 59141
59139: GO 59148
59141: POP
// hHackInvisible ; 6 :
59142: CALL 72118 0 0
59146: GO 59194
59148: LD_INT 6
59150: DOUBLE
59151: EQUAL
59152: IFTRUE 59156
59154: GO 59163
59156: POP
// hHackChangeYourSide ; 7 :
59157: CALL 72175 0 0
59161: GO 59194
59163: LD_INT 7
59165: DOUBLE
59166: EQUAL
59167: IFTRUE 59171
59169: GO 59178
59171: POP
// hHackChangeUnitSide ; 8 :
59172: CALL 72217 0 0
59176: GO 59194
59178: LD_INT 8
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59186
59184: GO 59193
59186: POP
// hHackFog ; end ;
59187: CALL 72318 0 0
59191: GO 59194
59193: POP
// end ; if p2 = game_save_mode then
59194: LD_VAR 0 2
59198: PUSH
59199: LD_INT 102
59201: EQUAL
59202: IFFALSE 59257
// begin if p3 = 1 then
59204: LD_VAR 0 3
59208: PUSH
59209: LD_INT 1
59211: EQUAL
59212: IFFALSE 59224
// globalGameSaveCounter := p4 ;
59214: LD_ADDR_EXP 45
59218: PUSH
59219: LD_VAR 0 4
59223: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59224: LD_VAR 0 3
59228: PUSH
59229: LD_INT 2
59231: EQUAL
59232: PUSH
59233: LD_EXP 45
59237: AND
59238: IFFALSE 59257
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59240: LD_STRING setGameSaveCounter(
59242: PUSH
59243: LD_EXP 45
59247: STR
59248: PUSH
59249: LD_STRING )
59251: STR
59252: PPUSH
59253: CALL_OW 559
// end ; end ;
59257: LD_VAR 0 7
59261: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59262: LD_INT 0
59264: PPUSH
// streamModeActive := false ;
59265: LD_ADDR_EXP 46
59269: PUSH
59270: LD_INT 0
59272: ST_TO_ADDR
// normalCounter := 36 ;
59273: LD_ADDR_EXP 47
59277: PUSH
59278: LD_INT 36
59280: ST_TO_ADDR
// hardcoreCounter := 18 ;
59281: LD_ADDR_EXP 48
59285: PUSH
59286: LD_INT 18
59288: ST_TO_ADDR
// sRocket := false ;
59289: LD_ADDR_EXP 51
59293: PUSH
59294: LD_INT 0
59296: ST_TO_ADDR
// sSpeed := false ;
59297: LD_ADDR_EXP 50
59301: PUSH
59302: LD_INT 0
59304: ST_TO_ADDR
// sEngine := false ;
59305: LD_ADDR_EXP 52
59309: PUSH
59310: LD_INT 0
59312: ST_TO_ADDR
// sSpec := false ;
59313: LD_ADDR_EXP 49
59317: PUSH
59318: LD_INT 0
59320: ST_TO_ADDR
// sLevel := false ;
59321: LD_ADDR_EXP 53
59325: PUSH
59326: LD_INT 0
59328: ST_TO_ADDR
// sArmoury := false ;
59329: LD_ADDR_EXP 54
59333: PUSH
59334: LD_INT 0
59336: ST_TO_ADDR
// sRadar := false ;
59337: LD_ADDR_EXP 55
59341: PUSH
59342: LD_INT 0
59344: ST_TO_ADDR
// sBunker := false ;
59345: LD_ADDR_EXP 56
59349: PUSH
59350: LD_INT 0
59352: ST_TO_ADDR
// sHack := false ;
59353: LD_ADDR_EXP 57
59357: PUSH
59358: LD_INT 0
59360: ST_TO_ADDR
// sFire := false ;
59361: LD_ADDR_EXP 58
59365: PUSH
59366: LD_INT 0
59368: ST_TO_ADDR
// sRefresh := false ;
59369: LD_ADDR_EXP 59
59373: PUSH
59374: LD_INT 0
59376: ST_TO_ADDR
// sExp := false ;
59377: LD_ADDR_EXP 60
59381: PUSH
59382: LD_INT 0
59384: ST_TO_ADDR
// sDepot := false ;
59385: LD_ADDR_EXP 61
59389: PUSH
59390: LD_INT 0
59392: ST_TO_ADDR
// sFlag := false ;
59393: LD_ADDR_EXP 62
59397: PUSH
59398: LD_INT 0
59400: ST_TO_ADDR
// sKamikadze := false ;
59401: LD_ADDR_EXP 70
59405: PUSH
59406: LD_INT 0
59408: ST_TO_ADDR
// sTroll := false ;
59409: LD_ADDR_EXP 71
59413: PUSH
59414: LD_INT 0
59416: ST_TO_ADDR
// sSlow := false ;
59417: LD_ADDR_EXP 72
59421: PUSH
59422: LD_INT 0
59424: ST_TO_ADDR
// sLack := false ;
59425: LD_ADDR_EXP 73
59429: PUSH
59430: LD_INT 0
59432: ST_TO_ADDR
// sTank := false ;
59433: LD_ADDR_EXP 75
59437: PUSH
59438: LD_INT 0
59440: ST_TO_ADDR
// sRemote := false ;
59441: LD_ADDR_EXP 76
59445: PUSH
59446: LD_INT 0
59448: ST_TO_ADDR
// sPowell := false ;
59449: LD_ADDR_EXP 77
59453: PUSH
59454: LD_INT 0
59456: ST_TO_ADDR
// sTeleport := false ;
59457: LD_ADDR_EXP 80
59461: PUSH
59462: LD_INT 0
59464: ST_TO_ADDR
// sOilTower := false ;
59465: LD_ADDR_EXP 82
59469: PUSH
59470: LD_INT 0
59472: ST_TO_ADDR
// sShovel := false ;
59473: LD_ADDR_EXP 83
59477: PUSH
59478: LD_INT 0
59480: ST_TO_ADDR
// sSheik := false ;
59481: LD_ADDR_EXP 84
59485: PUSH
59486: LD_INT 0
59488: ST_TO_ADDR
// sEarthquake := false ;
59489: LD_ADDR_EXP 86
59493: PUSH
59494: LD_INT 0
59496: ST_TO_ADDR
// sAI := false ;
59497: LD_ADDR_EXP 87
59501: PUSH
59502: LD_INT 0
59504: ST_TO_ADDR
// sCargo := false ;
59505: LD_ADDR_EXP 90
59509: PUSH
59510: LD_INT 0
59512: ST_TO_ADDR
// sDLaser := false ;
59513: LD_ADDR_EXP 91
59517: PUSH
59518: LD_INT 0
59520: ST_TO_ADDR
// sExchange := false ;
59521: LD_ADDR_EXP 92
59525: PUSH
59526: LD_INT 0
59528: ST_TO_ADDR
// sFac := false ;
59529: LD_ADDR_EXP 93
59533: PUSH
59534: LD_INT 0
59536: ST_TO_ADDR
// sPower := false ;
59537: LD_ADDR_EXP 94
59541: PUSH
59542: LD_INT 0
59544: ST_TO_ADDR
// sRandom := false ;
59545: LD_ADDR_EXP 95
59549: PUSH
59550: LD_INT 0
59552: ST_TO_ADDR
// sShield := false ;
59553: LD_ADDR_EXP 96
59557: PUSH
59558: LD_INT 0
59560: ST_TO_ADDR
// sTime := false ;
59561: LD_ADDR_EXP 97
59565: PUSH
59566: LD_INT 0
59568: ST_TO_ADDR
// sTools := false ;
59569: LD_ADDR_EXP 98
59573: PUSH
59574: LD_INT 0
59576: ST_TO_ADDR
// sSold := false ;
59577: LD_ADDR_EXP 63
59581: PUSH
59582: LD_INT 0
59584: ST_TO_ADDR
// sDiff := false ;
59585: LD_ADDR_EXP 64
59589: PUSH
59590: LD_INT 0
59592: ST_TO_ADDR
// sFog := false ;
59593: LD_ADDR_EXP 67
59597: PUSH
59598: LD_INT 0
59600: ST_TO_ADDR
// sReset := false ;
59601: LD_ADDR_EXP 68
59605: PUSH
59606: LD_INT 0
59608: ST_TO_ADDR
// sSun := false ;
59609: LD_ADDR_EXP 69
59613: PUSH
59614: LD_INT 0
59616: ST_TO_ADDR
// sTiger := false ;
59617: LD_ADDR_EXP 65
59621: PUSH
59622: LD_INT 0
59624: ST_TO_ADDR
// sBomb := false ;
59625: LD_ADDR_EXP 66
59629: PUSH
59630: LD_INT 0
59632: ST_TO_ADDR
// sWound := false ;
59633: LD_ADDR_EXP 74
59637: PUSH
59638: LD_INT 0
59640: ST_TO_ADDR
// sBetray := false ;
59641: LD_ADDR_EXP 78
59645: PUSH
59646: LD_INT 0
59648: ST_TO_ADDR
// sContamin := false ;
59649: LD_ADDR_EXP 79
59653: PUSH
59654: LD_INT 0
59656: ST_TO_ADDR
// sOil := false ;
59657: LD_ADDR_EXP 81
59661: PUSH
59662: LD_INT 0
59664: ST_TO_ADDR
// sStu := false ;
59665: LD_ADDR_EXP 85
59669: PUSH
59670: LD_INT 0
59672: ST_TO_ADDR
// sBazooka := false ;
59673: LD_ADDR_EXP 88
59677: PUSH
59678: LD_INT 0
59680: ST_TO_ADDR
// sMortar := false ;
59681: LD_ADDR_EXP 89
59685: PUSH
59686: LD_INT 0
59688: ST_TO_ADDR
// sRanger := false ;
59689: LD_ADDR_EXP 99
59693: PUSH
59694: LD_INT 0
59696: ST_TO_ADDR
// sComputer := false ;
59697: LD_ADDR_EXP 100
59701: PUSH
59702: LD_INT 0
59704: ST_TO_ADDR
// s30 := false ;
59705: LD_ADDR_EXP 101
59709: PUSH
59710: LD_INT 0
59712: ST_TO_ADDR
// s60 := false ;
59713: LD_ADDR_EXP 102
59717: PUSH
59718: LD_INT 0
59720: ST_TO_ADDR
// end ;
59721: LD_VAR 0 1
59725: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59726: LD_INT 0
59728: PPUSH
59729: PPUSH
59730: PPUSH
59731: PPUSH
59732: PPUSH
59733: PPUSH
59734: PPUSH
// result := [ ] ;
59735: LD_ADDR_VAR 0 2
59739: PUSH
59740: EMPTY
59741: ST_TO_ADDR
// if campaign_id = 1 then
59742: LD_OWVAR 69
59746: PUSH
59747: LD_INT 1
59749: EQUAL
59750: IFFALSE 62916
// begin case mission_number of 1 :
59752: LD_OWVAR 70
59756: PUSH
59757: LD_INT 1
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59765
59763: GO 59841
59765: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59766: LD_ADDR_VAR 0 2
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: LD_INT 11
59779: PUSH
59780: LD_INT 12
59782: PUSH
59783: LD_INT 15
59785: PUSH
59786: LD_INT 16
59788: PUSH
59789: LD_INT 22
59791: PUSH
59792: LD_INT 23
59794: PUSH
59795: LD_INT 26
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 101
59811: PUSH
59812: LD_INT 102
59814: PUSH
59815: LD_INT 106
59817: PUSH
59818: LD_INT 116
59820: PUSH
59821: LD_INT 117
59823: PUSH
59824: LD_INT 118
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: ST_TO_ADDR
59839: GO 62914
59841: LD_INT 2
59843: DOUBLE
59844: EQUAL
59845: IFTRUE 59849
59847: GO 59933
59849: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59850: LD_ADDR_VAR 0 2
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 11
59863: PUSH
59864: LD_INT 12
59866: PUSH
59867: LD_INT 15
59869: PUSH
59870: LD_INT 16
59872: PUSH
59873: LD_INT 22
59875: PUSH
59876: LD_INT 23
59878: PUSH
59879: LD_INT 26
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 101
59895: PUSH
59896: LD_INT 102
59898: PUSH
59899: LD_INT 105
59901: PUSH
59902: LD_INT 106
59904: PUSH
59905: LD_INT 108
59907: PUSH
59908: LD_INT 116
59910: PUSH
59911: LD_INT 117
59913: PUSH
59914: LD_INT 118
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: ST_TO_ADDR
59931: GO 62914
59933: LD_INT 3
59935: DOUBLE
59936: EQUAL
59937: IFTRUE 59941
59939: GO 60029
59941: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59942: LD_ADDR_VAR 0 2
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 4
59952: PUSH
59953: LD_INT 5
59955: PUSH
59956: LD_INT 11
59958: PUSH
59959: LD_INT 12
59961: PUSH
59962: LD_INT 15
59964: PUSH
59965: LD_INT 16
59967: PUSH
59968: LD_INT 22
59970: PUSH
59971: LD_INT 26
59973: PUSH
59974: LD_INT 36
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 101
59991: PUSH
59992: LD_INT 102
59994: PUSH
59995: LD_INT 105
59997: PUSH
59998: LD_INT 106
60000: PUSH
60001: LD_INT 108
60003: PUSH
60004: LD_INT 116
60006: PUSH
60007: LD_INT 117
60009: PUSH
60010: LD_INT 118
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: ST_TO_ADDR
60027: GO 62914
60029: LD_INT 4
60031: DOUBLE
60032: EQUAL
60033: IFTRUE 60037
60035: GO 60133
60037: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60038: LD_ADDR_VAR 0 2
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 5
60051: PUSH
60052: LD_INT 8
60054: PUSH
60055: LD_INT 11
60057: PUSH
60058: LD_INT 12
60060: PUSH
60061: LD_INT 15
60063: PUSH
60064: LD_INT 16
60066: PUSH
60067: LD_INT 22
60069: PUSH
60070: LD_INT 23
60072: PUSH
60073: LD_INT 26
60075: PUSH
60076: LD_INT 36
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 101
60095: PUSH
60096: LD_INT 102
60098: PUSH
60099: LD_INT 105
60101: PUSH
60102: LD_INT 106
60104: PUSH
60105: LD_INT 108
60107: PUSH
60108: LD_INT 116
60110: PUSH
60111: LD_INT 117
60113: PUSH
60114: LD_INT 118
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: ST_TO_ADDR
60131: GO 62914
60133: LD_INT 5
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60141
60139: GO 60253
60141: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60142: LD_ADDR_VAR 0 2
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: LD_INT 4
60152: PUSH
60153: LD_INT 5
60155: PUSH
60156: LD_INT 6
60158: PUSH
60159: LD_INT 8
60161: PUSH
60162: LD_INT 11
60164: PUSH
60165: LD_INT 12
60167: PUSH
60168: LD_INT 15
60170: PUSH
60171: LD_INT 16
60173: PUSH
60174: LD_INT 22
60176: PUSH
60177: LD_INT 23
60179: PUSH
60180: LD_INT 25
60182: PUSH
60183: LD_INT 26
60185: PUSH
60186: LD_INT 36
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 101
60207: PUSH
60208: LD_INT 102
60210: PUSH
60211: LD_INT 105
60213: PUSH
60214: LD_INT 106
60216: PUSH
60217: LD_INT 108
60219: PUSH
60220: LD_INT 109
60222: PUSH
60223: LD_INT 112
60225: PUSH
60226: LD_INT 116
60228: PUSH
60229: LD_INT 117
60231: PUSH
60232: LD_INT 118
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: ST_TO_ADDR
60251: GO 62914
60253: LD_INT 6
60255: DOUBLE
60256: EQUAL
60257: IFTRUE 60261
60259: GO 60393
60261: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60262: LD_ADDR_VAR 0 2
60266: PUSH
60267: LD_INT 2
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: LD_INT 5
60275: PUSH
60276: LD_INT 6
60278: PUSH
60279: LD_INT 8
60281: PUSH
60282: LD_INT 11
60284: PUSH
60285: LD_INT 12
60287: PUSH
60288: LD_INT 15
60290: PUSH
60291: LD_INT 16
60293: PUSH
60294: LD_INT 20
60296: PUSH
60297: LD_INT 21
60299: PUSH
60300: LD_INT 22
60302: PUSH
60303: LD_INT 23
60305: PUSH
60306: LD_INT 25
60308: PUSH
60309: LD_INT 26
60311: PUSH
60312: LD_INT 30
60314: PUSH
60315: LD_INT 31
60317: PUSH
60318: LD_INT 32
60320: PUSH
60321: LD_INT 36
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 101
60347: PUSH
60348: LD_INT 102
60350: PUSH
60351: LD_INT 105
60353: PUSH
60354: LD_INT 106
60356: PUSH
60357: LD_INT 108
60359: PUSH
60360: LD_INT 109
60362: PUSH
60363: LD_INT 112
60365: PUSH
60366: LD_INT 116
60368: PUSH
60369: LD_INT 117
60371: PUSH
60372: LD_INT 118
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: ST_TO_ADDR
60391: GO 62914
60393: LD_INT 7
60395: DOUBLE
60396: EQUAL
60397: IFTRUE 60401
60399: GO 60513
60401: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60402: LD_ADDR_VAR 0 2
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 4
60412: PUSH
60413: LD_INT 5
60415: PUSH
60416: LD_INT 7
60418: PUSH
60419: LD_INT 11
60421: PUSH
60422: LD_INT 12
60424: PUSH
60425: LD_INT 15
60427: PUSH
60428: LD_INT 16
60430: PUSH
60431: LD_INT 20
60433: PUSH
60434: LD_INT 21
60436: PUSH
60437: LD_INT 22
60439: PUSH
60440: LD_INT 23
60442: PUSH
60443: LD_INT 25
60445: PUSH
60446: LD_INT 26
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 101
60467: PUSH
60468: LD_INT 102
60470: PUSH
60471: LD_INT 103
60473: PUSH
60474: LD_INT 105
60476: PUSH
60477: LD_INT 106
60479: PUSH
60480: LD_INT 108
60482: PUSH
60483: LD_INT 112
60485: PUSH
60486: LD_INT 116
60488: PUSH
60489: LD_INT 117
60491: PUSH
60492: LD_INT 118
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: ST_TO_ADDR
60511: GO 62914
60513: LD_INT 8
60515: DOUBLE
60516: EQUAL
60517: IFTRUE 60521
60519: GO 60661
60521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60522: LD_ADDR_VAR 0 2
60526: PUSH
60527: LD_INT 2
60529: PUSH
60530: LD_INT 4
60532: PUSH
60533: LD_INT 5
60535: PUSH
60536: LD_INT 6
60538: PUSH
60539: LD_INT 7
60541: PUSH
60542: LD_INT 8
60544: PUSH
60545: LD_INT 11
60547: PUSH
60548: LD_INT 12
60550: PUSH
60551: LD_INT 15
60553: PUSH
60554: LD_INT 16
60556: PUSH
60557: LD_INT 20
60559: PUSH
60560: LD_INT 21
60562: PUSH
60563: LD_INT 22
60565: PUSH
60566: LD_INT 23
60568: PUSH
60569: LD_INT 25
60571: PUSH
60572: LD_INT 26
60574: PUSH
60575: LD_INT 30
60577: PUSH
60578: LD_INT 31
60580: PUSH
60581: LD_INT 32
60583: PUSH
60584: LD_INT 36
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 101
60611: PUSH
60612: LD_INT 102
60614: PUSH
60615: LD_INT 103
60617: PUSH
60618: LD_INT 105
60620: PUSH
60621: LD_INT 106
60623: PUSH
60624: LD_INT 108
60626: PUSH
60627: LD_INT 109
60629: PUSH
60630: LD_INT 112
60632: PUSH
60633: LD_INT 116
60635: PUSH
60636: LD_INT 117
60638: PUSH
60639: LD_INT 118
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: ST_TO_ADDR
60659: GO 62914
60661: LD_INT 9
60663: DOUBLE
60664: EQUAL
60665: IFTRUE 60669
60667: GO 60817
60669: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60670: LD_ADDR_VAR 0 2
60674: PUSH
60675: LD_INT 2
60677: PUSH
60678: LD_INT 4
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: LD_INT 6
60686: PUSH
60687: LD_INT 7
60689: PUSH
60690: LD_INT 8
60692: PUSH
60693: LD_INT 11
60695: PUSH
60696: LD_INT 12
60698: PUSH
60699: LD_INT 15
60701: PUSH
60702: LD_INT 16
60704: PUSH
60705: LD_INT 20
60707: PUSH
60708: LD_INT 21
60710: PUSH
60711: LD_INT 22
60713: PUSH
60714: LD_INT 23
60716: PUSH
60717: LD_INT 25
60719: PUSH
60720: LD_INT 26
60722: PUSH
60723: LD_INT 28
60725: PUSH
60726: LD_INT 30
60728: PUSH
60729: LD_INT 31
60731: PUSH
60732: LD_INT 32
60734: PUSH
60735: LD_INT 36
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 101
60763: PUSH
60764: LD_INT 102
60766: PUSH
60767: LD_INT 103
60769: PUSH
60770: LD_INT 105
60772: PUSH
60773: LD_INT 106
60775: PUSH
60776: LD_INT 108
60778: PUSH
60779: LD_INT 109
60781: PUSH
60782: LD_INT 112
60784: PUSH
60785: LD_INT 114
60787: PUSH
60788: LD_INT 116
60790: PUSH
60791: LD_INT 117
60793: PUSH
60794: LD_INT 118
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: ST_TO_ADDR
60815: GO 62914
60817: LD_INT 10
60819: DOUBLE
60820: EQUAL
60821: IFTRUE 60825
60823: GO 61021
60825: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60826: LD_ADDR_VAR 0 2
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 4
60836: PUSH
60837: LD_INT 5
60839: PUSH
60840: LD_INT 6
60842: PUSH
60843: LD_INT 7
60845: PUSH
60846: LD_INT 8
60848: PUSH
60849: LD_INT 9
60851: PUSH
60852: LD_INT 10
60854: PUSH
60855: LD_INT 11
60857: PUSH
60858: LD_INT 12
60860: PUSH
60861: LD_INT 13
60863: PUSH
60864: LD_INT 14
60866: PUSH
60867: LD_INT 15
60869: PUSH
60870: LD_INT 16
60872: PUSH
60873: LD_INT 17
60875: PUSH
60876: LD_INT 18
60878: PUSH
60879: LD_INT 19
60881: PUSH
60882: LD_INT 20
60884: PUSH
60885: LD_INT 21
60887: PUSH
60888: LD_INT 22
60890: PUSH
60891: LD_INT 23
60893: PUSH
60894: LD_INT 24
60896: PUSH
60897: LD_INT 25
60899: PUSH
60900: LD_INT 26
60902: PUSH
60903: LD_INT 28
60905: PUSH
60906: LD_INT 30
60908: PUSH
60909: LD_INT 31
60911: PUSH
60912: LD_INT 32
60914: PUSH
60915: LD_INT 36
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 101
60951: PUSH
60952: LD_INT 102
60954: PUSH
60955: LD_INT 103
60957: PUSH
60958: LD_INT 104
60960: PUSH
60961: LD_INT 105
60963: PUSH
60964: LD_INT 106
60966: PUSH
60967: LD_INT 107
60969: PUSH
60970: LD_INT 108
60972: PUSH
60973: LD_INT 109
60975: PUSH
60976: LD_INT 110
60978: PUSH
60979: LD_INT 111
60981: PUSH
60982: LD_INT 112
60984: PUSH
60985: LD_INT 114
60987: PUSH
60988: LD_INT 116
60990: PUSH
60991: LD_INT 117
60993: PUSH
60994: LD_INT 118
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: ST_TO_ADDR
61019: GO 62914
61021: LD_INT 11
61023: DOUBLE
61024: EQUAL
61025: IFTRUE 61029
61027: GO 61233
61029: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61030: LD_ADDR_VAR 0 2
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: LD_INT 4
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: LD_INT 6
61049: PUSH
61050: LD_INT 7
61052: PUSH
61053: LD_INT 8
61055: PUSH
61056: LD_INT 9
61058: PUSH
61059: LD_INT 10
61061: PUSH
61062: LD_INT 11
61064: PUSH
61065: LD_INT 12
61067: PUSH
61068: LD_INT 13
61070: PUSH
61071: LD_INT 14
61073: PUSH
61074: LD_INT 15
61076: PUSH
61077: LD_INT 16
61079: PUSH
61080: LD_INT 17
61082: PUSH
61083: LD_INT 18
61085: PUSH
61086: LD_INT 19
61088: PUSH
61089: LD_INT 20
61091: PUSH
61092: LD_INT 21
61094: PUSH
61095: LD_INT 22
61097: PUSH
61098: LD_INT 23
61100: PUSH
61101: LD_INT 24
61103: PUSH
61104: LD_INT 25
61106: PUSH
61107: LD_INT 26
61109: PUSH
61110: LD_INT 28
61112: PUSH
61113: LD_INT 30
61115: PUSH
61116: LD_INT 31
61118: PUSH
61119: LD_INT 32
61121: PUSH
61122: LD_INT 34
61124: PUSH
61125: LD_INT 36
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 101
61163: PUSH
61164: LD_INT 102
61166: PUSH
61167: LD_INT 103
61169: PUSH
61170: LD_INT 104
61172: PUSH
61173: LD_INT 105
61175: PUSH
61176: LD_INT 106
61178: PUSH
61179: LD_INT 107
61181: PUSH
61182: LD_INT 108
61184: PUSH
61185: LD_INT 109
61187: PUSH
61188: LD_INT 110
61190: PUSH
61191: LD_INT 111
61193: PUSH
61194: LD_INT 112
61196: PUSH
61197: LD_INT 114
61199: PUSH
61200: LD_INT 116
61202: PUSH
61203: LD_INT 117
61205: PUSH
61206: LD_INT 118
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: ST_TO_ADDR
61231: GO 62914
61233: LD_INT 12
61235: DOUBLE
61236: EQUAL
61237: IFTRUE 61241
61239: GO 61461
61241: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61242: LD_ADDR_VAR 0 2
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: LD_INT 4
61258: PUSH
61259: LD_INT 5
61261: PUSH
61262: LD_INT 6
61264: PUSH
61265: LD_INT 7
61267: PUSH
61268: LD_INT 8
61270: PUSH
61271: LD_INT 9
61273: PUSH
61274: LD_INT 10
61276: PUSH
61277: LD_INT 11
61279: PUSH
61280: LD_INT 12
61282: PUSH
61283: LD_INT 13
61285: PUSH
61286: LD_INT 14
61288: PUSH
61289: LD_INT 15
61291: PUSH
61292: LD_INT 16
61294: PUSH
61295: LD_INT 17
61297: PUSH
61298: LD_INT 18
61300: PUSH
61301: LD_INT 19
61303: PUSH
61304: LD_INT 20
61306: PUSH
61307: LD_INT 21
61309: PUSH
61310: LD_INT 22
61312: PUSH
61313: LD_INT 23
61315: PUSH
61316: LD_INT 24
61318: PUSH
61319: LD_INT 25
61321: PUSH
61322: LD_INT 26
61324: PUSH
61325: LD_INT 27
61327: PUSH
61328: LD_INT 28
61330: PUSH
61331: LD_INT 30
61333: PUSH
61334: LD_INT 31
61336: PUSH
61337: LD_INT 32
61339: PUSH
61340: LD_INT 33
61342: PUSH
61343: LD_INT 34
61345: PUSH
61346: LD_INT 36
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 101
61387: PUSH
61388: LD_INT 102
61390: PUSH
61391: LD_INT 103
61393: PUSH
61394: LD_INT 104
61396: PUSH
61397: LD_INT 105
61399: PUSH
61400: LD_INT 106
61402: PUSH
61403: LD_INT 107
61405: PUSH
61406: LD_INT 108
61408: PUSH
61409: LD_INT 109
61411: PUSH
61412: LD_INT 110
61414: PUSH
61415: LD_INT 111
61417: PUSH
61418: LD_INT 112
61420: PUSH
61421: LD_INT 113
61423: PUSH
61424: LD_INT 114
61426: PUSH
61427: LD_INT 116
61429: PUSH
61430: LD_INT 117
61432: PUSH
61433: LD_INT 118
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: ST_TO_ADDR
61459: GO 62914
61461: LD_INT 13
61463: DOUBLE
61464: EQUAL
61465: IFTRUE 61469
61467: GO 61677
61469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61470: LD_ADDR_VAR 0 2
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: LD_INT 3
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: LD_INT 8
61492: PUSH
61493: LD_INT 9
61495: PUSH
61496: LD_INT 10
61498: PUSH
61499: LD_INT 11
61501: PUSH
61502: LD_INT 12
61504: PUSH
61505: LD_INT 14
61507: PUSH
61508: LD_INT 15
61510: PUSH
61511: LD_INT 16
61513: PUSH
61514: LD_INT 17
61516: PUSH
61517: LD_INT 18
61519: PUSH
61520: LD_INT 19
61522: PUSH
61523: LD_INT 20
61525: PUSH
61526: LD_INT 21
61528: PUSH
61529: LD_INT 22
61531: PUSH
61532: LD_INT 23
61534: PUSH
61535: LD_INT 24
61537: PUSH
61538: LD_INT 25
61540: PUSH
61541: LD_INT 26
61543: PUSH
61544: LD_INT 27
61546: PUSH
61547: LD_INT 28
61549: PUSH
61550: LD_INT 30
61552: PUSH
61553: LD_INT 31
61555: PUSH
61556: LD_INT 32
61558: PUSH
61559: LD_INT 33
61561: PUSH
61562: LD_INT 34
61564: PUSH
61565: LD_INT 36
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 101
61603: PUSH
61604: LD_INT 102
61606: PUSH
61607: LD_INT 103
61609: PUSH
61610: LD_INT 104
61612: PUSH
61613: LD_INT 105
61615: PUSH
61616: LD_INT 106
61618: PUSH
61619: LD_INT 107
61621: PUSH
61622: LD_INT 108
61624: PUSH
61625: LD_INT 109
61627: PUSH
61628: LD_INT 110
61630: PUSH
61631: LD_INT 111
61633: PUSH
61634: LD_INT 112
61636: PUSH
61637: LD_INT 113
61639: PUSH
61640: LD_INT 114
61642: PUSH
61643: LD_INT 116
61645: PUSH
61646: LD_INT 117
61648: PUSH
61649: LD_INT 118
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: ST_TO_ADDR
61675: GO 62914
61677: LD_INT 14
61679: DOUBLE
61680: EQUAL
61681: IFTRUE 61685
61683: GO 61909
61685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61686: LD_ADDR_VAR 0 2
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 4
61702: PUSH
61703: LD_INT 5
61705: PUSH
61706: LD_INT 6
61708: PUSH
61709: LD_INT 7
61711: PUSH
61712: LD_INT 8
61714: PUSH
61715: LD_INT 9
61717: PUSH
61718: LD_INT 10
61720: PUSH
61721: LD_INT 11
61723: PUSH
61724: LD_INT 12
61726: PUSH
61727: LD_INT 13
61729: PUSH
61730: LD_INT 14
61732: PUSH
61733: LD_INT 15
61735: PUSH
61736: LD_INT 16
61738: PUSH
61739: LD_INT 17
61741: PUSH
61742: LD_INT 18
61744: PUSH
61745: LD_INT 19
61747: PUSH
61748: LD_INT 20
61750: PUSH
61751: LD_INT 21
61753: PUSH
61754: LD_INT 22
61756: PUSH
61757: LD_INT 23
61759: PUSH
61760: LD_INT 24
61762: PUSH
61763: LD_INT 25
61765: PUSH
61766: LD_INT 26
61768: PUSH
61769: LD_INT 27
61771: PUSH
61772: LD_INT 28
61774: PUSH
61775: LD_INT 29
61777: PUSH
61778: LD_INT 30
61780: PUSH
61781: LD_INT 31
61783: PUSH
61784: LD_INT 32
61786: PUSH
61787: LD_INT 33
61789: PUSH
61790: LD_INT 34
61792: PUSH
61793: LD_INT 36
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 101
61835: PUSH
61836: LD_INT 102
61838: PUSH
61839: LD_INT 103
61841: PUSH
61842: LD_INT 104
61844: PUSH
61845: LD_INT 105
61847: PUSH
61848: LD_INT 106
61850: PUSH
61851: LD_INT 107
61853: PUSH
61854: LD_INT 108
61856: PUSH
61857: LD_INT 109
61859: PUSH
61860: LD_INT 110
61862: PUSH
61863: LD_INT 111
61865: PUSH
61866: LD_INT 112
61868: PUSH
61869: LD_INT 113
61871: PUSH
61872: LD_INT 114
61874: PUSH
61875: LD_INT 116
61877: PUSH
61878: LD_INT 117
61880: PUSH
61881: LD_INT 118
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: ST_TO_ADDR
61907: GO 62914
61909: LD_INT 15
61911: DOUBLE
61912: EQUAL
61913: IFTRUE 61917
61915: GO 62141
61917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61918: LD_ADDR_VAR 0 2
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: LD_INT 5
61937: PUSH
61938: LD_INT 6
61940: PUSH
61941: LD_INT 7
61943: PUSH
61944: LD_INT 8
61946: PUSH
61947: LD_INT 9
61949: PUSH
61950: LD_INT 10
61952: PUSH
61953: LD_INT 11
61955: PUSH
61956: LD_INT 12
61958: PUSH
61959: LD_INT 13
61961: PUSH
61962: LD_INT 14
61964: PUSH
61965: LD_INT 15
61967: PUSH
61968: LD_INT 16
61970: PUSH
61971: LD_INT 17
61973: PUSH
61974: LD_INT 18
61976: PUSH
61977: LD_INT 19
61979: PUSH
61980: LD_INT 20
61982: PUSH
61983: LD_INT 21
61985: PUSH
61986: LD_INT 22
61988: PUSH
61989: LD_INT 23
61991: PUSH
61992: LD_INT 24
61994: PUSH
61995: LD_INT 25
61997: PUSH
61998: LD_INT 26
62000: PUSH
62001: LD_INT 27
62003: PUSH
62004: LD_INT 28
62006: PUSH
62007: LD_INT 29
62009: PUSH
62010: LD_INT 30
62012: PUSH
62013: LD_INT 31
62015: PUSH
62016: LD_INT 32
62018: PUSH
62019: LD_INT 33
62021: PUSH
62022: LD_INT 34
62024: PUSH
62025: LD_INT 36
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 101
62067: PUSH
62068: LD_INT 102
62070: PUSH
62071: LD_INT 103
62073: PUSH
62074: LD_INT 104
62076: PUSH
62077: LD_INT 105
62079: PUSH
62080: LD_INT 106
62082: PUSH
62083: LD_INT 107
62085: PUSH
62086: LD_INT 108
62088: PUSH
62089: LD_INT 109
62091: PUSH
62092: LD_INT 110
62094: PUSH
62095: LD_INT 111
62097: PUSH
62098: LD_INT 112
62100: PUSH
62101: LD_INT 113
62103: PUSH
62104: LD_INT 114
62106: PUSH
62107: LD_INT 116
62109: PUSH
62110: LD_INT 117
62112: PUSH
62113: LD_INT 118
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: ST_TO_ADDR
62139: GO 62914
62141: LD_INT 16
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62149
62147: GO 62285
62149: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62150: LD_ADDR_VAR 0 2
62154: PUSH
62155: LD_INT 2
62157: PUSH
62158: LD_INT 4
62160: PUSH
62161: LD_INT 5
62163: PUSH
62164: LD_INT 7
62166: PUSH
62167: LD_INT 11
62169: PUSH
62170: LD_INT 12
62172: PUSH
62173: LD_INT 15
62175: PUSH
62176: LD_INT 16
62178: PUSH
62179: LD_INT 20
62181: PUSH
62182: LD_INT 21
62184: PUSH
62185: LD_INT 22
62187: PUSH
62188: LD_INT 23
62190: PUSH
62191: LD_INT 25
62193: PUSH
62194: LD_INT 26
62196: PUSH
62197: LD_INT 30
62199: PUSH
62200: LD_INT 31
62202: PUSH
62203: LD_INT 32
62205: PUSH
62206: LD_INT 33
62208: PUSH
62209: LD_INT 34
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 101
62235: PUSH
62236: LD_INT 102
62238: PUSH
62239: LD_INT 103
62241: PUSH
62242: LD_INT 106
62244: PUSH
62245: LD_INT 108
62247: PUSH
62248: LD_INT 112
62250: PUSH
62251: LD_INT 113
62253: PUSH
62254: LD_INT 114
62256: PUSH
62257: LD_INT 116
62259: PUSH
62260: LD_INT 117
62262: PUSH
62263: LD_INT 118
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: ST_TO_ADDR
62283: GO 62914
62285: LD_INT 17
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62293
62291: GO 62517
62293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62294: LD_ADDR_VAR 0 2
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 3
62307: PUSH
62308: LD_INT 4
62310: PUSH
62311: LD_INT 5
62313: PUSH
62314: LD_INT 6
62316: PUSH
62317: LD_INT 7
62319: PUSH
62320: LD_INT 8
62322: PUSH
62323: LD_INT 9
62325: PUSH
62326: LD_INT 10
62328: PUSH
62329: LD_INT 11
62331: PUSH
62332: LD_INT 12
62334: PUSH
62335: LD_INT 13
62337: PUSH
62338: LD_INT 14
62340: PUSH
62341: LD_INT 15
62343: PUSH
62344: LD_INT 16
62346: PUSH
62347: LD_INT 17
62349: PUSH
62350: LD_INT 18
62352: PUSH
62353: LD_INT 19
62355: PUSH
62356: LD_INT 20
62358: PUSH
62359: LD_INT 21
62361: PUSH
62362: LD_INT 22
62364: PUSH
62365: LD_INT 23
62367: PUSH
62368: LD_INT 24
62370: PUSH
62371: LD_INT 25
62373: PUSH
62374: LD_INT 26
62376: PUSH
62377: LD_INT 27
62379: PUSH
62380: LD_INT 28
62382: PUSH
62383: LD_INT 29
62385: PUSH
62386: LD_INT 30
62388: PUSH
62389: LD_INT 31
62391: PUSH
62392: LD_INT 32
62394: PUSH
62395: LD_INT 33
62397: PUSH
62398: LD_INT 34
62400: PUSH
62401: LD_INT 36
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 101
62443: PUSH
62444: LD_INT 102
62446: PUSH
62447: LD_INT 103
62449: PUSH
62450: LD_INT 104
62452: PUSH
62453: LD_INT 105
62455: PUSH
62456: LD_INT 106
62458: PUSH
62459: LD_INT 107
62461: PUSH
62462: LD_INT 108
62464: PUSH
62465: LD_INT 109
62467: PUSH
62468: LD_INT 110
62470: PUSH
62471: LD_INT 111
62473: PUSH
62474: LD_INT 112
62476: PUSH
62477: LD_INT 113
62479: PUSH
62480: LD_INT 114
62482: PUSH
62483: LD_INT 116
62485: PUSH
62486: LD_INT 117
62488: PUSH
62489: LD_INT 118
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: ST_TO_ADDR
62515: GO 62914
62517: LD_INT 18
62519: DOUBLE
62520: EQUAL
62521: IFTRUE 62525
62523: GO 62673
62525: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62526: LD_ADDR_VAR 0 2
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: LD_INT 4
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: LD_INT 7
62542: PUSH
62543: LD_INT 11
62545: PUSH
62546: LD_INT 12
62548: PUSH
62549: LD_INT 15
62551: PUSH
62552: LD_INT 16
62554: PUSH
62555: LD_INT 20
62557: PUSH
62558: LD_INT 21
62560: PUSH
62561: LD_INT 22
62563: PUSH
62564: LD_INT 23
62566: PUSH
62567: LD_INT 25
62569: PUSH
62570: LD_INT 26
62572: PUSH
62573: LD_INT 30
62575: PUSH
62576: LD_INT 31
62578: PUSH
62579: LD_INT 32
62581: PUSH
62582: LD_INT 33
62584: PUSH
62585: LD_INT 34
62587: PUSH
62588: LD_INT 35
62590: PUSH
62591: LD_INT 36
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 101
62619: PUSH
62620: LD_INT 102
62622: PUSH
62623: LD_INT 103
62625: PUSH
62626: LD_INT 106
62628: PUSH
62629: LD_INT 108
62631: PUSH
62632: LD_INT 112
62634: PUSH
62635: LD_INT 113
62637: PUSH
62638: LD_INT 114
62640: PUSH
62641: LD_INT 115
62643: PUSH
62644: LD_INT 116
62646: PUSH
62647: LD_INT 117
62649: PUSH
62650: LD_INT 118
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: ST_TO_ADDR
62671: GO 62914
62673: LD_INT 19
62675: DOUBLE
62676: EQUAL
62677: IFTRUE 62681
62679: GO 62913
62681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62682: LD_ADDR_VAR 0 2
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: LD_INT 4
62698: PUSH
62699: LD_INT 5
62701: PUSH
62702: LD_INT 6
62704: PUSH
62705: LD_INT 7
62707: PUSH
62708: LD_INT 8
62710: PUSH
62711: LD_INT 9
62713: PUSH
62714: LD_INT 10
62716: PUSH
62717: LD_INT 11
62719: PUSH
62720: LD_INT 12
62722: PUSH
62723: LD_INT 13
62725: PUSH
62726: LD_INT 14
62728: PUSH
62729: LD_INT 15
62731: PUSH
62732: LD_INT 16
62734: PUSH
62735: LD_INT 17
62737: PUSH
62738: LD_INT 18
62740: PUSH
62741: LD_INT 19
62743: PUSH
62744: LD_INT 20
62746: PUSH
62747: LD_INT 21
62749: PUSH
62750: LD_INT 22
62752: PUSH
62753: LD_INT 23
62755: PUSH
62756: LD_INT 24
62758: PUSH
62759: LD_INT 25
62761: PUSH
62762: LD_INT 26
62764: PUSH
62765: LD_INT 27
62767: PUSH
62768: LD_INT 28
62770: PUSH
62771: LD_INT 29
62773: PUSH
62774: LD_INT 30
62776: PUSH
62777: LD_INT 31
62779: PUSH
62780: LD_INT 32
62782: PUSH
62783: LD_INT 33
62785: PUSH
62786: LD_INT 34
62788: PUSH
62789: LD_INT 35
62791: PUSH
62792: LD_INT 36
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 101
62835: PUSH
62836: LD_INT 102
62838: PUSH
62839: LD_INT 103
62841: PUSH
62842: LD_INT 104
62844: PUSH
62845: LD_INT 105
62847: PUSH
62848: LD_INT 106
62850: PUSH
62851: LD_INT 107
62853: PUSH
62854: LD_INT 108
62856: PUSH
62857: LD_INT 109
62859: PUSH
62860: LD_INT 110
62862: PUSH
62863: LD_INT 111
62865: PUSH
62866: LD_INT 112
62868: PUSH
62869: LD_INT 113
62871: PUSH
62872: LD_INT 114
62874: PUSH
62875: LD_INT 115
62877: PUSH
62878: LD_INT 116
62880: PUSH
62881: LD_INT 117
62883: PUSH
62884: LD_INT 118
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: ST_TO_ADDR
62911: GO 62914
62913: POP
// end else
62914: GO 63145
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62916: LD_ADDR_VAR 0 2
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 3
62929: PUSH
62930: LD_INT 4
62932: PUSH
62933: LD_INT 5
62935: PUSH
62936: LD_INT 6
62938: PUSH
62939: LD_INT 7
62941: PUSH
62942: LD_INT 8
62944: PUSH
62945: LD_INT 9
62947: PUSH
62948: LD_INT 10
62950: PUSH
62951: LD_INT 11
62953: PUSH
62954: LD_INT 12
62956: PUSH
62957: LD_INT 13
62959: PUSH
62960: LD_INT 14
62962: PUSH
62963: LD_INT 15
62965: PUSH
62966: LD_INT 16
62968: PUSH
62969: LD_INT 17
62971: PUSH
62972: LD_INT 18
62974: PUSH
62975: LD_INT 19
62977: PUSH
62978: LD_INT 20
62980: PUSH
62981: LD_INT 21
62983: PUSH
62984: LD_INT 22
62986: PUSH
62987: LD_INT 23
62989: PUSH
62990: LD_INT 24
62992: PUSH
62993: LD_INT 25
62995: PUSH
62996: LD_INT 26
62998: PUSH
62999: LD_INT 27
63001: PUSH
63002: LD_INT 28
63004: PUSH
63005: LD_INT 29
63007: PUSH
63008: LD_INT 30
63010: PUSH
63011: LD_INT 31
63013: PUSH
63014: LD_INT 32
63016: PUSH
63017: LD_INT 33
63019: PUSH
63020: LD_INT 34
63022: PUSH
63023: LD_INT 35
63025: PUSH
63026: LD_INT 36
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 101
63069: PUSH
63070: LD_INT 102
63072: PUSH
63073: LD_INT 103
63075: PUSH
63076: LD_INT 104
63078: PUSH
63079: LD_INT 105
63081: PUSH
63082: LD_INT 106
63084: PUSH
63085: LD_INT 107
63087: PUSH
63088: LD_INT 108
63090: PUSH
63091: LD_INT 109
63093: PUSH
63094: LD_INT 110
63096: PUSH
63097: LD_INT 111
63099: PUSH
63100: LD_INT 112
63102: PUSH
63103: LD_INT 113
63105: PUSH
63106: LD_INT 114
63108: PUSH
63109: LD_INT 115
63111: PUSH
63112: LD_INT 116
63114: PUSH
63115: LD_INT 117
63117: PUSH
63118: LD_INT 118
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// if result then
63145: LD_VAR 0 2
63149: IFFALSE 63935
// begin normal :=  ;
63151: LD_ADDR_VAR 0 5
63155: PUSH
63156: LD_STRING 
63158: ST_TO_ADDR
// hardcore :=  ;
63159: LD_ADDR_VAR 0 6
63163: PUSH
63164: LD_STRING 
63166: ST_TO_ADDR
// active :=  ;
63167: LD_ADDR_VAR 0 7
63171: PUSH
63172: LD_STRING 
63174: ST_TO_ADDR
// for i = 1 to normalCounter do
63175: LD_ADDR_VAR 0 8
63179: PUSH
63180: DOUBLE
63181: LD_INT 1
63183: DEC
63184: ST_TO_ADDR
63185: LD_EXP 47
63189: PUSH
63190: FOR_TO
63191: IFFALSE 63292
// begin tmp := 0 ;
63193: LD_ADDR_VAR 0 3
63197: PUSH
63198: LD_STRING 0
63200: ST_TO_ADDR
// if result [ 1 ] then
63201: LD_VAR 0 2
63205: PUSH
63206: LD_INT 1
63208: ARRAY
63209: IFFALSE 63274
// if result [ 1 ] [ 1 ] = i then
63211: LD_VAR 0 2
63215: PUSH
63216: LD_INT 1
63218: ARRAY
63219: PUSH
63220: LD_INT 1
63222: ARRAY
63223: PUSH
63224: LD_VAR 0 8
63228: EQUAL
63229: IFFALSE 63274
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63231: LD_ADDR_VAR 0 2
63235: PUSH
63236: LD_VAR 0 2
63240: PPUSH
63241: LD_INT 1
63243: PPUSH
63244: LD_VAR 0 2
63248: PUSH
63249: LD_INT 1
63251: ARRAY
63252: PPUSH
63253: LD_INT 1
63255: PPUSH
63256: CALL_OW 3
63260: PPUSH
63261: CALL_OW 1
63265: ST_TO_ADDR
// tmp := 1 ;
63266: LD_ADDR_VAR 0 3
63270: PUSH
63271: LD_STRING 1
63273: ST_TO_ADDR
// end ; normal := normal & tmp ;
63274: LD_ADDR_VAR 0 5
63278: PUSH
63279: LD_VAR 0 5
63283: PUSH
63284: LD_VAR 0 3
63288: STR
63289: ST_TO_ADDR
// end ;
63290: GO 63190
63292: POP
63293: POP
// for i = 1 to hardcoreCounter do
63294: LD_ADDR_VAR 0 8
63298: PUSH
63299: DOUBLE
63300: LD_INT 1
63302: DEC
63303: ST_TO_ADDR
63304: LD_EXP 48
63308: PUSH
63309: FOR_TO
63310: IFFALSE 63415
// begin tmp := 0 ;
63312: LD_ADDR_VAR 0 3
63316: PUSH
63317: LD_STRING 0
63319: ST_TO_ADDR
// if result [ 2 ] then
63320: LD_VAR 0 2
63324: PUSH
63325: LD_INT 2
63327: ARRAY
63328: IFFALSE 63397
// if result [ 2 ] [ 1 ] = 100 + i then
63330: LD_VAR 0 2
63334: PUSH
63335: LD_INT 2
63337: ARRAY
63338: PUSH
63339: LD_INT 1
63341: ARRAY
63342: PUSH
63343: LD_INT 100
63345: PUSH
63346: LD_VAR 0 8
63350: PLUS
63351: EQUAL
63352: IFFALSE 63397
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63354: LD_ADDR_VAR 0 2
63358: PUSH
63359: LD_VAR 0 2
63363: PPUSH
63364: LD_INT 2
63366: PPUSH
63367: LD_VAR 0 2
63371: PUSH
63372: LD_INT 2
63374: ARRAY
63375: PPUSH
63376: LD_INT 1
63378: PPUSH
63379: CALL_OW 3
63383: PPUSH
63384: CALL_OW 1
63388: ST_TO_ADDR
// tmp := 1 ;
63389: LD_ADDR_VAR 0 3
63393: PUSH
63394: LD_STRING 1
63396: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63397: LD_ADDR_VAR 0 6
63401: PUSH
63402: LD_VAR 0 6
63406: PUSH
63407: LD_VAR 0 3
63411: STR
63412: ST_TO_ADDR
// end ;
63413: GO 63309
63415: POP
63416: POP
// if isGameLoad then
63417: LD_VAR 0 1
63421: IFFALSE 63896
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63423: LD_ADDR_VAR 0 4
63427: PUSH
63428: LD_EXP 51
63432: PUSH
63433: LD_EXP 50
63437: PUSH
63438: LD_EXP 52
63442: PUSH
63443: LD_EXP 49
63447: PUSH
63448: LD_EXP 53
63452: PUSH
63453: LD_EXP 54
63457: PUSH
63458: LD_EXP 55
63462: PUSH
63463: LD_EXP 56
63467: PUSH
63468: LD_EXP 57
63472: PUSH
63473: LD_EXP 58
63477: PUSH
63478: LD_EXP 59
63482: PUSH
63483: LD_EXP 60
63487: PUSH
63488: LD_EXP 61
63492: PUSH
63493: LD_EXP 62
63497: PUSH
63498: LD_EXP 70
63502: PUSH
63503: LD_EXP 71
63507: PUSH
63508: LD_EXP 72
63512: PUSH
63513: LD_EXP 73
63517: PUSH
63518: LD_EXP 75
63522: PUSH
63523: LD_EXP 76
63527: PUSH
63528: LD_EXP 77
63532: PUSH
63533: LD_EXP 80
63537: PUSH
63538: LD_EXP 82
63542: PUSH
63543: LD_EXP 83
63547: PUSH
63548: LD_EXP 84
63552: PUSH
63553: LD_EXP 86
63557: PUSH
63558: LD_EXP 87
63562: PUSH
63563: LD_EXP 90
63567: PUSH
63568: LD_EXP 91
63572: PUSH
63573: LD_EXP 92
63577: PUSH
63578: LD_EXP 93
63582: PUSH
63583: LD_EXP 94
63587: PUSH
63588: LD_EXP 95
63592: PUSH
63593: LD_EXP 96
63597: PUSH
63598: LD_EXP 97
63602: PUSH
63603: LD_EXP 98
63607: PUSH
63608: LD_EXP 63
63612: PUSH
63613: LD_EXP 64
63617: PUSH
63618: LD_EXP 67
63622: PUSH
63623: LD_EXP 68
63627: PUSH
63628: LD_EXP 69
63632: PUSH
63633: LD_EXP 65
63637: PUSH
63638: LD_EXP 66
63642: PUSH
63643: LD_EXP 74
63647: PUSH
63648: LD_EXP 78
63652: PUSH
63653: LD_EXP 79
63657: PUSH
63658: LD_EXP 81
63662: PUSH
63663: LD_EXP 85
63667: PUSH
63668: LD_EXP 88
63672: PUSH
63673: LD_EXP 89
63677: PUSH
63678: LD_EXP 99
63682: PUSH
63683: LD_EXP 100
63687: PUSH
63688: LD_EXP 101
63692: PUSH
63693: LD_EXP 102
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: ST_TO_ADDR
// tmp :=  ;
63754: LD_ADDR_VAR 0 3
63758: PUSH
63759: LD_STRING 
63761: ST_TO_ADDR
// for i = 1 to normalCounter do
63762: LD_ADDR_VAR 0 8
63766: PUSH
63767: DOUBLE
63768: LD_INT 1
63770: DEC
63771: ST_TO_ADDR
63772: LD_EXP 47
63776: PUSH
63777: FOR_TO
63778: IFFALSE 63814
// begin if flags [ i ] then
63780: LD_VAR 0 4
63784: PUSH
63785: LD_VAR 0 8
63789: ARRAY
63790: IFFALSE 63812
// tmp := tmp & i & ; ;
63792: LD_ADDR_VAR 0 3
63796: PUSH
63797: LD_VAR 0 3
63801: PUSH
63802: LD_VAR 0 8
63806: STR
63807: PUSH
63808: LD_STRING ;
63810: STR
63811: ST_TO_ADDR
// end ;
63812: GO 63777
63814: POP
63815: POP
// for i = 1 to hardcoreCounter do
63816: LD_ADDR_VAR 0 8
63820: PUSH
63821: DOUBLE
63822: LD_INT 1
63824: DEC
63825: ST_TO_ADDR
63826: LD_EXP 48
63830: PUSH
63831: FOR_TO
63832: IFFALSE 63878
// begin if flags [ normalCounter + i ] then
63834: LD_VAR 0 4
63838: PUSH
63839: LD_EXP 47
63843: PUSH
63844: LD_VAR 0 8
63848: PLUS
63849: ARRAY
63850: IFFALSE 63876
// tmp := tmp & ( 100 + i ) & ; ;
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: LD_VAR 0 3
63861: PUSH
63862: LD_INT 100
63864: PUSH
63865: LD_VAR 0 8
63869: PLUS
63870: STR
63871: PUSH
63872: LD_STRING ;
63874: STR
63875: ST_TO_ADDR
// end ;
63876: GO 63831
63878: POP
63879: POP
// if tmp then
63880: LD_VAR 0 3
63884: IFFALSE 63896
// active := tmp ;
63886: LD_ADDR_VAR 0 7
63890: PUSH
63891: LD_VAR 0 3
63895: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63896: LD_STRING getStreamItemsFromMission("
63898: PUSH
63899: LD_VAR 0 5
63903: STR
63904: PUSH
63905: LD_STRING ","
63907: STR
63908: PUSH
63909: LD_VAR 0 6
63913: STR
63914: PUSH
63915: LD_STRING ","
63917: STR
63918: PUSH
63919: LD_VAR 0 7
63923: STR
63924: PUSH
63925: LD_STRING ")
63927: STR
63928: PPUSH
63929: CALL_OW 559
// end else
63933: GO 63942
// ToLua ( getStreamItemsFromMission("","","") ) ;
63935: LD_STRING getStreamItemsFromMission("","","")
63937: PPUSH
63938: CALL_OW 559
// end ;
63942: LD_VAR 0 2
63946: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63947: LD_EXP 46
63951: PUSH
63952: LD_EXP 51
63956: AND
63957: IFFALSE 64081
63959: GO 63961
63961: DISABLE
63962: LD_INT 0
63964: PPUSH
63965: PPUSH
// begin enable ;
63966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63967: LD_ADDR_VAR 0 2
63971: PUSH
63972: LD_INT 22
63974: PUSH
63975: LD_OWVAR 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 34
63989: PUSH
63990: LD_INT 7
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 34
63999: PUSH
64000: LD_INT 45
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 34
64009: PUSH
64010: LD_INT 28
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 34
64019: PUSH
64020: LD_INT 47
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PPUSH
64038: CALL_OW 69
64042: ST_TO_ADDR
// if not tmp then
64043: LD_VAR 0 2
64047: NOT
64048: IFFALSE 64052
// exit ;
64050: GO 64081
// for i in tmp do
64052: LD_ADDR_VAR 0 1
64056: PUSH
64057: LD_VAR 0 2
64061: PUSH
64062: FOR_IN
64063: IFFALSE 64079
// begin SetLives ( i , 0 ) ;
64065: LD_VAR 0 1
64069: PPUSH
64070: LD_INT 0
64072: PPUSH
64073: CALL_OW 234
// end ;
64077: GO 64062
64079: POP
64080: POP
// end ;
64081: PPOPN 2
64083: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64084: LD_EXP 46
64088: PUSH
64089: LD_EXP 52
64093: AND
64094: IFFALSE 64178
64096: GO 64098
64098: DISABLE
64099: LD_INT 0
64101: PPUSH
64102: PPUSH
// begin enable ;
64103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: LD_INT 22
64111: PUSH
64112: LD_OWVAR 2
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 32
64123: PUSH
64124: LD_INT 3
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PPUSH
64135: CALL_OW 69
64139: ST_TO_ADDR
// if not tmp then
64140: LD_VAR 0 2
64144: NOT
64145: IFFALSE 64149
// exit ;
64147: GO 64178
// for i in tmp do
64149: LD_ADDR_VAR 0 1
64153: PUSH
64154: LD_VAR 0 2
64158: PUSH
64159: FOR_IN
64160: IFFALSE 64176
// begin SetLives ( i , 0 ) ;
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_INT 0
64169: PPUSH
64170: CALL_OW 234
// end ;
64174: GO 64159
64176: POP
64177: POP
// end ;
64178: PPOPN 2
64180: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64181: LD_EXP 46
64185: PUSH
64186: LD_EXP 49
64190: AND
64191: IFFALSE 64284
64193: GO 64195
64195: DISABLE
64196: LD_INT 0
64198: PPUSH
// begin enable ;
64199: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64200: LD_ADDR_VAR 0 1
64204: PUSH
64205: LD_INT 22
64207: PUSH
64208: LD_OWVAR 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 25
64222: PUSH
64223: LD_INT 5
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 25
64232: PUSH
64233: LD_INT 9
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 25
64242: PUSH
64243: LD_INT 8
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PPUSH
64260: CALL_OW 69
64264: PUSH
64265: FOR_IN
64266: IFFALSE 64282
// begin SetClass ( i , 1 ) ;
64268: LD_VAR 0 1
64272: PPUSH
64273: LD_INT 1
64275: PPUSH
64276: CALL_OW 336
// end ;
64280: GO 64265
64282: POP
64283: POP
// end ;
64284: PPOPN 1
64286: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64287: LD_EXP 46
64291: PUSH
64292: LD_EXP 50
64296: AND
64297: PUSH
64298: LD_OWVAR 65
64302: PUSH
64303: LD_INT 7
64305: LESS
64306: AND
64307: IFFALSE 64321
64309: GO 64311
64311: DISABLE
// begin enable ;
64312: ENABLE
// game_speed := 7 ;
64313: LD_ADDR_OWVAR 65
64317: PUSH
64318: LD_INT 7
64320: ST_TO_ADDR
// end ;
64321: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64322: LD_EXP 46
64326: PUSH
64327: LD_EXP 53
64331: AND
64332: IFFALSE 64534
64334: GO 64336
64336: DISABLE
64337: LD_INT 0
64339: PPUSH
64340: PPUSH
64341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64342: LD_ADDR_VAR 0 3
64346: PUSH
64347: LD_INT 81
64349: PUSH
64350: LD_OWVAR 2
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 21
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PPUSH
64373: CALL_OW 69
64377: ST_TO_ADDR
// if not tmp then
64378: LD_VAR 0 3
64382: NOT
64383: IFFALSE 64387
// exit ;
64385: GO 64534
// if tmp > 5 then
64387: LD_VAR 0 3
64391: PUSH
64392: LD_INT 5
64394: GREATER
64395: IFFALSE 64407
// k := 5 else
64397: LD_ADDR_VAR 0 2
64401: PUSH
64402: LD_INT 5
64404: ST_TO_ADDR
64405: GO 64417
// k := tmp ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_VAR 0 3
64416: ST_TO_ADDR
// for i := 1 to k do
64417: LD_ADDR_VAR 0 1
64421: PUSH
64422: DOUBLE
64423: LD_INT 1
64425: DEC
64426: ST_TO_ADDR
64427: LD_VAR 0 2
64431: PUSH
64432: FOR_TO
64433: IFFALSE 64532
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64435: LD_VAR 0 3
64439: PUSH
64440: LD_VAR 0 1
64444: ARRAY
64445: PPUSH
64446: LD_VAR 0 1
64450: PUSH
64451: LD_INT 4
64453: MOD
64454: PUSH
64455: LD_INT 1
64457: PLUS
64458: PPUSH
64459: CALL_OW 259
64463: PUSH
64464: LD_INT 10
64466: LESS
64467: IFFALSE 64530
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64469: LD_VAR 0 3
64473: PUSH
64474: LD_VAR 0 1
64478: ARRAY
64479: PPUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_INT 4
64487: MOD
64488: PUSH
64489: LD_INT 1
64491: PLUS
64492: PPUSH
64493: LD_VAR 0 3
64497: PUSH
64498: LD_VAR 0 1
64502: ARRAY
64503: PPUSH
64504: LD_VAR 0 1
64508: PUSH
64509: LD_INT 4
64511: MOD
64512: PUSH
64513: LD_INT 1
64515: PLUS
64516: PPUSH
64517: CALL_OW 259
64521: PUSH
64522: LD_INT 1
64524: PLUS
64525: PPUSH
64526: CALL_OW 237
64530: GO 64432
64532: POP
64533: POP
// end ;
64534: PPOPN 3
64536: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64537: LD_EXP 46
64541: PUSH
64542: LD_EXP 54
64546: AND
64547: IFFALSE 64567
64549: GO 64551
64551: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64552: LD_INT 4
64554: PPUSH
64555: LD_OWVAR 2
64559: PPUSH
64560: LD_INT 0
64562: PPUSH
64563: CALL_OW 324
64567: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64568: LD_EXP 46
64572: PUSH
64573: LD_EXP 83
64577: AND
64578: IFFALSE 64598
64580: GO 64582
64582: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64583: LD_INT 19
64585: PPUSH
64586: LD_OWVAR 2
64590: PPUSH
64591: LD_INT 0
64593: PPUSH
64594: CALL_OW 324
64598: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64599: LD_EXP 46
64603: PUSH
64604: LD_EXP 55
64608: AND
64609: IFFALSE 64711
64611: GO 64613
64613: DISABLE
64614: LD_INT 0
64616: PPUSH
64617: PPUSH
// begin enable ;
64618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64619: LD_ADDR_VAR 0 2
64623: PUSH
64624: LD_INT 22
64626: PUSH
64627: LD_OWVAR 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 2
64638: PUSH
64639: LD_INT 34
64641: PUSH
64642: LD_INT 11
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 34
64651: PUSH
64652: LD_INT 30
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PPUSH
64668: CALL_OW 69
64672: ST_TO_ADDR
// if not tmp then
64673: LD_VAR 0 2
64677: NOT
64678: IFFALSE 64682
// exit ;
64680: GO 64711
// for i in tmp do
64682: LD_ADDR_VAR 0 1
64686: PUSH
64687: LD_VAR 0 2
64691: PUSH
64692: FOR_IN
64693: IFFALSE 64709
// begin SetLives ( i , 0 ) ;
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_INT 0
64702: PPUSH
64703: CALL_OW 234
// end ;
64707: GO 64692
64709: POP
64710: POP
// end ;
64711: PPOPN 2
64713: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64714: LD_EXP 46
64718: PUSH
64719: LD_EXP 56
64723: AND
64724: IFFALSE 64744
64726: GO 64728
64728: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64729: LD_INT 32
64731: PPUSH
64732: LD_OWVAR 2
64736: PPUSH
64737: LD_INT 0
64739: PPUSH
64740: CALL_OW 324
64744: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64745: LD_EXP 46
64749: PUSH
64750: LD_EXP 57
64754: AND
64755: IFFALSE 64936
64757: GO 64759
64759: DISABLE
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64765: LD_ADDR_VAR 0 2
64769: PUSH
64770: LD_INT 22
64772: PUSH
64773: LD_OWVAR 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 33
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PPUSH
64796: CALL_OW 69
64800: ST_TO_ADDR
// if not tmp then
64801: LD_VAR 0 2
64805: NOT
64806: IFFALSE 64810
// exit ;
64808: GO 64936
// side := 0 ;
64810: LD_ADDR_VAR 0 3
64814: PUSH
64815: LD_INT 0
64817: ST_TO_ADDR
// for i := 1 to 8 do
64818: LD_ADDR_VAR 0 1
64822: PUSH
64823: DOUBLE
64824: LD_INT 1
64826: DEC
64827: ST_TO_ADDR
64828: LD_INT 8
64830: PUSH
64831: FOR_TO
64832: IFFALSE 64880
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64834: LD_OWVAR 2
64838: PUSH
64839: LD_VAR 0 1
64843: NONEQUAL
64844: PUSH
64845: LD_OWVAR 2
64849: PPUSH
64850: LD_VAR 0 1
64854: PPUSH
64855: CALL_OW 81
64859: PUSH
64860: LD_INT 2
64862: EQUAL
64863: AND
64864: IFFALSE 64878
// begin side := i ;
64866: LD_ADDR_VAR 0 3
64870: PUSH
64871: LD_VAR 0 1
64875: ST_TO_ADDR
// break ;
64876: GO 64880
// end ;
64878: GO 64831
64880: POP
64881: POP
// if not side then
64882: LD_VAR 0 3
64886: NOT
64887: IFFALSE 64891
// exit ;
64889: GO 64936
// for i := 1 to tmp do
64891: LD_ADDR_VAR 0 1
64895: PUSH
64896: DOUBLE
64897: LD_INT 1
64899: DEC
64900: ST_TO_ADDR
64901: LD_VAR 0 2
64905: PUSH
64906: FOR_TO
64907: IFFALSE 64934
// if Prob ( 60 ) then
64909: LD_INT 60
64911: PPUSH
64912: CALL_OW 13
64916: IFFALSE 64932
// SetSide ( i , side ) ;
64918: LD_VAR 0 1
64922: PPUSH
64923: LD_VAR 0 3
64927: PPUSH
64928: CALL_OW 235
64932: GO 64906
64934: POP
64935: POP
// end ;
64936: PPOPN 3
64938: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64939: LD_EXP 46
64943: PUSH
64944: LD_EXP 59
64948: AND
64949: IFFALSE 65068
64951: GO 64953
64953: DISABLE
64954: LD_INT 0
64956: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64957: LD_ADDR_VAR 0 1
64961: PUSH
64962: LD_INT 22
64964: PUSH
64965: LD_OWVAR 2
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 21
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 3
64986: PUSH
64987: LD_INT 23
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: PPUSH
65006: CALL_OW 69
65010: PUSH
65011: FOR_IN
65012: IFFALSE 65066
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65014: LD_VAR 0 1
65018: PPUSH
65019: CALL_OW 257
65023: PUSH
65024: LD_INT 1
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 4
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: IN
65042: IFFALSE 65064
// SetClass ( un , rand ( 1 , 4 ) ) ;
65044: LD_VAR 0 1
65048: PPUSH
65049: LD_INT 1
65051: PPUSH
65052: LD_INT 4
65054: PPUSH
65055: CALL_OW 12
65059: PPUSH
65060: CALL_OW 336
65064: GO 65011
65066: POP
65067: POP
// end ;
65068: PPOPN 1
65070: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65071: LD_EXP 46
65075: PUSH
65076: LD_EXP 58
65080: AND
65081: IFFALSE 65160
65083: GO 65085
65085: DISABLE
65086: LD_INT 0
65088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65089: LD_ADDR_VAR 0 1
65093: PUSH
65094: LD_INT 22
65096: PUSH
65097: LD_OWVAR 2
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 21
65108: PUSH
65109: LD_INT 3
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PPUSH
65120: CALL_OW 69
65124: ST_TO_ADDR
// if not tmp then
65125: LD_VAR 0 1
65129: NOT
65130: IFFALSE 65134
// exit ;
65132: GO 65160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65134: LD_VAR 0 1
65138: PUSH
65139: LD_INT 1
65141: PPUSH
65142: LD_VAR 0 1
65146: PPUSH
65147: CALL_OW 12
65151: ARRAY
65152: PPUSH
65153: LD_INT 100
65155: PPUSH
65156: CALL_OW 234
// end ;
65160: PPOPN 1
65162: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65163: LD_EXP 46
65167: PUSH
65168: LD_EXP 60
65172: AND
65173: IFFALSE 65271
65175: GO 65177
65177: DISABLE
65178: LD_INT 0
65180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65181: LD_ADDR_VAR 0 1
65185: PUSH
65186: LD_INT 22
65188: PUSH
65189: LD_OWVAR 2
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 21
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PPUSH
65212: CALL_OW 69
65216: ST_TO_ADDR
// if not tmp then
65217: LD_VAR 0 1
65221: NOT
65222: IFFALSE 65226
// exit ;
65224: GO 65271
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65226: LD_VAR 0 1
65230: PUSH
65231: LD_INT 1
65233: PPUSH
65234: LD_VAR 0 1
65238: PPUSH
65239: CALL_OW 12
65243: ARRAY
65244: PPUSH
65245: LD_INT 1
65247: PPUSH
65248: LD_INT 4
65250: PPUSH
65251: CALL_OW 12
65255: PPUSH
65256: LD_INT 3000
65258: PPUSH
65259: LD_INT 9000
65261: PPUSH
65262: CALL_OW 12
65266: PPUSH
65267: CALL_OW 492
// end ;
65271: PPOPN 1
65273: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65274: LD_EXP 46
65278: PUSH
65279: LD_EXP 61
65283: AND
65284: IFFALSE 65304
65286: GO 65288
65288: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65289: LD_INT 1
65291: PPUSH
65292: LD_OWVAR 2
65296: PPUSH
65297: LD_INT 0
65299: PPUSH
65300: CALL_OW 324
65304: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65305: LD_EXP 46
65309: PUSH
65310: LD_EXP 62
65314: AND
65315: IFFALSE 65398
65317: GO 65319
65319: DISABLE
65320: LD_INT 0
65322: PPUSH
65323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65324: LD_ADDR_VAR 0 2
65328: PUSH
65329: LD_INT 22
65331: PUSH
65332: LD_OWVAR 2
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 21
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PPUSH
65355: CALL_OW 69
65359: ST_TO_ADDR
// if not tmp then
65360: LD_VAR 0 2
65364: NOT
65365: IFFALSE 65369
// exit ;
65367: GO 65398
// for i in tmp do
65369: LD_ADDR_VAR 0 1
65373: PUSH
65374: LD_VAR 0 2
65378: PUSH
65379: FOR_IN
65380: IFFALSE 65396
// SetBLevel ( i , 10 ) ;
65382: LD_VAR 0 1
65386: PPUSH
65387: LD_INT 10
65389: PPUSH
65390: CALL_OW 241
65394: GO 65379
65396: POP
65397: POP
// end ;
65398: PPOPN 2
65400: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65401: LD_EXP 46
65405: PUSH
65406: LD_EXP 63
65410: AND
65411: IFFALSE 65522
65413: GO 65415
65415: DISABLE
65416: LD_INT 0
65418: PPUSH
65419: PPUSH
65420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65421: LD_ADDR_VAR 0 3
65425: PUSH
65426: LD_INT 22
65428: PUSH
65429: LD_OWVAR 2
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 25
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PPUSH
65452: CALL_OW 69
65456: ST_TO_ADDR
// if not tmp then
65457: LD_VAR 0 3
65461: NOT
65462: IFFALSE 65466
// exit ;
65464: GO 65522
// un := tmp [ rand ( 1 , tmp ) ] ;
65466: LD_ADDR_VAR 0 2
65470: PUSH
65471: LD_VAR 0 3
65475: PUSH
65476: LD_INT 1
65478: PPUSH
65479: LD_VAR 0 3
65483: PPUSH
65484: CALL_OW 12
65488: ARRAY
65489: ST_TO_ADDR
// if Crawls ( un ) then
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 318
65499: IFFALSE 65510
// ComWalk ( un ) ;
65501: LD_VAR 0 2
65505: PPUSH
65506: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65510: LD_VAR 0 2
65514: PPUSH
65515: LD_INT 5
65517: PPUSH
65518: CALL_OW 336
// end ;
65522: PPOPN 3
65524: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65525: LD_EXP 46
65529: PUSH
65530: LD_EXP 64
65534: AND
65535: PUSH
65536: LD_OWVAR 67
65540: PUSH
65541: LD_INT 4
65543: LESS
65544: AND
65545: IFFALSE 65564
65547: GO 65549
65549: DISABLE
// begin Difficulty := Difficulty + 1 ;
65550: LD_ADDR_OWVAR 67
65554: PUSH
65555: LD_OWVAR 67
65559: PUSH
65560: LD_INT 1
65562: PLUS
65563: ST_TO_ADDR
// end ;
65564: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65565: LD_EXP 46
65569: PUSH
65570: LD_EXP 65
65574: AND
65575: IFFALSE 65678
65577: GO 65579
65579: DISABLE
65580: LD_INT 0
65582: PPUSH
// begin for i := 1 to 5 do
65583: LD_ADDR_VAR 0 1
65587: PUSH
65588: DOUBLE
65589: LD_INT 1
65591: DEC
65592: ST_TO_ADDR
65593: LD_INT 5
65595: PUSH
65596: FOR_TO
65597: IFFALSE 65676
// begin uc_nation := nation_nature ;
65599: LD_ADDR_OWVAR 21
65603: PUSH
65604: LD_INT 0
65606: ST_TO_ADDR
// uc_side := 0 ;
65607: LD_ADDR_OWVAR 20
65611: PUSH
65612: LD_INT 0
65614: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65615: LD_ADDR_OWVAR 29
65619: PUSH
65620: LD_INT 12
65622: PUSH
65623: LD_INT 12
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: ST_TO_ADDR
// hc_agressivity := 20 ;
65630: LD_ADDR_OWVAR 35
65634: PUSH
65635: LD_INT 20
65637: ST_TO_ADDR
// hc_class := class_tiger ;
65638: LD_ADDR_OWVAR 28
65642: PUSH
65643: LD_INT 14
65645: ST_TO_ADDR
// hc_gallery :=  ;
65646: LD_ADDR_OWVAR 33
65650: PUSH
65651: LD_STRING 
65653: ST_TO_ADDR
// hc_name :=  ;
65654: LD_ADDR_OWVAR 26
65658: PUSH
65659: LD_STRING 
65661: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65662: CALL_OW 44
65666: PPUSH
65667: LD_INT 0
65669: PPUSH
65670: CALL_OW 51
// end ;
65674: GO 65596
65676: POP
65677: POP
// end ;
65678: PPOPN 1
65680: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65681: LD_EXP 46
65685: PUSH
65686: LD_EXP 66
65690: AND
65691: IFFALSE 65700
65693: GO 65695
65695: DISABLE
// StreamSibBomb ;
65696: CALL 65701 0 0
65700: END
// export function StreamSibBomb ; var i , x , y ; begin
65701: LD_INT 0
65703: PPUSH
65704: PPUSH
65705: PPUSH
65706: PPUSH
// result := false ;
65707: LD_ADDR_VAR 0 1
65711: PUSH
65712: LD_INT 0
65714: ST_TO_ADDR
// for i := 1 to 16 do
65715: LD_ADDR_VAR 0 2
65719: PUSH
65720: DOUBLE
65721: LD_INT 1
65723: DEC
65724: ST_TO_ADDR
65725: LD_INT 16
65727: PUSH
65728: FOR_TO
65729: IFFALSE 65928
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65731: LD_ADDR_VAR 0 3
65735: PUSH
65736: LD_INT 10
65738: PUSH
65739: LD_INT 20
65741: PUSH
65742: LD_INT 30
65744: PUSH
65745: LD_INT 40
65747: PUSH
65748: LD_INT 50
65750: PUSH
65751: LD_INT 60
65753: PUSH
65754: LD_INT 70
65756: PUSH
65757: LD_INT 80
65759: PUSH
65760: LD_INT 90
65762: PUSH
65763: LD_INT 100
65765: PUSH
65766: LD_INT 110
65768: PUSH
65769: LD_INT 120
65771: PUSH
65772: LD_INT 130
65774: PUSH
65775: LD_INT 140
65777: PUSH
65778: LD_INT 150
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: PPUSH
65801: LD_INT 15
65803: PPUSH
65804: CALL_OW 12
65808: ARRAY
65809: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65810: LD_ADDR_VAR 0 4
65814: PUSH
65815: LD_INT 10
65817: PUSH
65818: LD_INT 20
65820: PUSH
65821: LD_INT 30
65823: PUSH
65824: LD_INT 40
65826: PUSH
65827: LD_INT 50
65829: PUSH
65830: LD_INT 60
65832: PUSH
65833: LD_INT 70
65835: PUSH
65836: LD_INT 80
65838: PUSH
65839: LD_INT 90
65841: PUSH
65842: LD_INT 100
65844: PUSH
65845: LD_INT 110
65847: PUSH
65848: LD_INT 120
65850: PUSH
65851: LD_INT 130
65853: PUSH
65854: LD_INT 140
65856: PUSH
65857: LD_INT 150
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: LIST
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 1
65879: PPUSH
65880: LD_INT 15
65882: PPUSH
65883: CALL_OW 12
65887: ARRAY
65888: ST_TO_ADDR
// if ValidHex ( x , y ) then
65889: LD_VAR 0 3
65893: PPUSH
65894: LD_VAR 0 4
65898: PPUSH
65899: CALL_OW 488
65903: IFFALSE 65926
// begin result := [ x , y ] ;
65905: LD_ADDR_VAR 0 1
65909: PUSH
65910: LD_VAR 0 3
65914: PUSH
65915: LD_VAR 0 4
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: ST_TO_ADDR
// break ;
65924: GO 65928
// end ; end ;
65926: GO 65728
65928: POP
65929: POP
// if result then
65930: LD_VAR 0 1
65934: IFFALSE 65994
// begin ToLua ( playSibBomb() ) ;
65936: LD_STRING playSibBomb()
65938: PPUSH
65939: CALL_OW 559
// wait ( 0 0$14 ) ;
65943: LD_INT 490
65945: PPUSH
65946: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 1
65957: ARRAY
65958: PPUSH
65959: LD_VAR 0 1
65963: PUSH
65964: LD_INT 2
65966: ARRAY
65967: PPUSH
65968: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65972: LD_VAR 0 1
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: PPUSH
65981: LD_VAR 0 1
65985: PUSH
65986: LD_INT 2
65988: ARRAY
65989: PPUSH
65990: CALL_OW 429
// end ; end ;
65994: LD_VAR 0 1
65998: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65999: LD_EXP 46
66003: PUSH
66004: LD_EXP 68
66008: AND
66009: IFFALSE 66021
66011: GO 66013
66013: DISABLE
// YouLost (  ) ;
66014: LD_STRING 
66016: PPUSH
66017: CALL_OW 104
66021: END
// every 0 0$1 trigger StreamModeActive and sFog do
66022: LD_EXP 46
66026: PUSH
66027: LD_EXP 67
66031: AND
66032: IFFALSE 66046
66034: GO 66036
66036: DISABLE
// FogOff ( your_side ) ;
66037: LD_OWVAR 2
66041: PPUSH
66042: CALL_OW 344
66046: END
// every 0 0$1 trigger StreamModeActive and sSun do
66047: LD_EXP 46
66051: PUSH
66052: LD_EXP 69
66056: AND
66057: IFFALSE 66085
66059: GO 66061
66061: DISABLE
// begin solar_recharge_percent := 0 ;
66062: LD_ADDR_OWVAR 79
66066: PUSH
66067: LD_INT 0
66069: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66070: LD_INT 10500
66072: PPUSH
66073: CALL_OW 67
// solar_recharge_percent := 100 ;
66077: LD_ADDR_OWVAR 79
66081: PUSH
66082: LD_INT 100
66084: ST_TO_ADDR
// end ;
66085: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66086: LD_EXP 46
66090: PUSH
66091: LD_EXP 70
66095: AND
66096: IFFALSE 66335
66098: GO 66100
66100: DISABLE
66101: LD_INT 0
66103: PPUSH
66104: PPUSH
66105: PPUSH
// begin tmp := [ ] ;
66106: LD_ADDR_VAR 0 3
66110: PUSH
66111: EMPTY
66112: ST_TO_ADDR
// for i := 1 to 6 do
66113: LD_ADDR_VAR 0 1
66117: PUSH
66118: DOUBLE
66119: LD_INT 1
66121: DEC
66122: ST_TO_ADDR
66123: LD_INT 6
66125: PUSH
66126: FOR_TO
66127: IFFALSE 66232
// begin uc_nation := nation_nature ;
66129: LD_ADDR_OWVAR 21
66133: PUSH
66134: LD_INT 0
66136: ST_TO_ADDR
// uc_side := 0 ;
66137: LD_ADDR_OWVAR 20
66141: PUSH
66142: LD_INT 0
66144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66145: LD_ADDR_OWVAR 29
66149: PUSH
66150: LD_INT 12
66152: PUSH
66153: LD_INT 12
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: ST_TO_ADDR
// hc_agressivity := 20 ;
66160: LD_ADDR_OWVAR 35
66164: PUSH
66165: LD_INT 20
66167: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66168: LD_ADDR_OWVAR 28
66172: PUSH
66173: LD_INT 17
66175: ST_TO_ADDR
// hc_gallery :=  ;
66176: LD_ADDR_OWVAR 33
66180: PUSH
66181: LD_STRING 
66183: ST_TO_ADDR
// hc_name :=  ;
66184: LD_ADDR_OWVAR 26
66188: PUSH
66189: LD_STRING 
66191: ST_TO_ADDR
// un := CreateHuman ;
66192: LD_ADDR_VAR 0 2
66196: PUSH
66197: CALL_OW 44
66201: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66202: LD_VAR 0 2
66206: PPUSH
66207: LD_INT 1
66209: PPUSH
66210: CALL_OW 51
// tmp := tmp ^ un ;
66214: LD_ADDR_VAR 0 3
66218: PUSH
66219: LD_VAR 0 3
66223: PUSH
66224: LD_VAR 0 2
66228: ADD
66229: ST_TO_ADDR
// end ;
66230: GO 66126
66232: POP
66233: POP
// repeat wait ( 0 0$1 ) ;
66234: LD_INT 35
66236: PPUSH
66237: CALL_OW 67
// for un in tmp do
66241: LD_ADDR_VAR 0 2
66245: PUSH
66246: LD_VAR 0 3
66250: PUSH
66251: FOR_IN
66252: IFFALSE 66326
// begin if IsDead ( un ) then
66254: LD_VAR 0 2
66258: PPUSH
66259: CALL_OW 301
66263: IFFALSE 66283
// begin tmp := tmp diff un ;
66265: LD_ADDR_VAR 0 3
66269: PUSH
66270: LD_VAR 0 3
66274: PUSH
66275: LD_VAR 0 2
66279: DIFF
66280: ST_TO_ADDR
// continue ;
66281: GO 66251
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66283: LD_VAR 0 2
66287: PPUSH
66288: LD_INT 3
66290: PUSH
66291: LD_INT 22
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PPUSH
66305: CALL_OW 69
66309: PPUSH
66310: LD_VAR 0 2
66314: PPUSH
66315: CALL_OW 74
66319: PPUSH
66320: CALL_OW 115
// end ;
66324: GO 66251
66326: POP
66327: POP
// until not tmp ;
66328: LD_VAR 0 3
66332: NOT
66333: IFFALSE 66234
// end ;
66335: PPOPN 3
66337: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66338: LD_EXP 46
66342: PUSH
66343: LD_EXP 71
66347: AND
66348: IFFALSE 66402
66350: GO 66352
66352: DISABLE
// begin ToLua ( displayTroll(); ) ;
66353: LD_STRING displayTroll();
66355: PPUSH
66356: CALL_OW 559
// wait ( 3 3$00 ) ;
66360: LD_INT 6300
66362: PPUSH
66363: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66367: LD_STRING hideTroll();
66369: PPUSH
66370: CALL_OW 559
// wait ( 1 1$00 ) ;
66374: LD_INT 2100
66376: PPUSH
66377: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66381: LD_STRING displayTroll();
66383: PPUSH
66384: CALL_OW 559
// wait ( 1 1$00 ) ;
66388: LD_INT 2100
66390: PPUSH
66391: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66395: LD_STRING hideTroll();
66397: PPUSH
66398: CALL_OW 559
// end ;
66402: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66403: LD_EXP 46
66407: PUSH
66408: LD_EXP 72
66412: AND
66413: IFFALSE 66476
66415: GO 66417
66417: DISABLE
66418: LD_INT 0
66420: PPUSH
// begin p := 0 ;
66421: LD_ADDR_VAR 0 1
66425: PUSH
66426: LD_INT 0
66428: ST_TO_ADDR
// repeat game_speed := 1 ;
66429: LD_ADDR_OWVAR 65
66433: PUSH
66434: LD_INT 1
66436: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66437: LD_INT 35
66439: PPUSH
66440: CALL_OW 67
// p := p + 1 ;
66444: LD_ADDR_VAR 0 1
66448: PUSH
66449: LD_VAR 0 1
66453: PUSH
66454: LD_INT 1
66456: PLUS
66457: ST_TO_ADDR
// until p >= 60 ;
66458: LD_VAR 0 1
66462: PUSH
66463: LD_INT 60
66465: GREATEREQUAL
66466: IFFALSE 66429
// game_speed := 4 ;
66468: LD_ADDR_OWVAR 65
66472: PUSH
66473: LD_INT 4
66475: ST_TO_ADDR
// end ;
66476: PPOPN 1
66478: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66479: LD_EXP 46
66483: PUSH
66484: LD_EXP 73
66488: AND
66489: IFFALSE 66635
66491: GO 66493
66493: DISABLE
66494: LD_INT 0
66496: PPUSH
66497: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66498: LD_ADDR_VAR 0 1
66502: PUSH
66503: LD_INT 22
66505: PUSH
66506: LD_OWVAR 2
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: LD_INT 30
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 30
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PPUSH
66547: CALL_OW 69
66551: ST_TO_ADDR
// if not depot then
66552: LD_VAR 0 1
66556: NOT
66557: IFFALSE 66561
// exit ;
66559: GO 66635
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66561: LD_ADDR_VAR 0 2
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_INT 1
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 12
66583: ARRAY
66584: PPUSH
66585: CALL_OW 274
66589: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66590: LD_VAR 0 2
66594: PPUSH
66595: LD_INT 1
66597: PPUSH
66598: LD_INT 0
66600: PPUSH
66601: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66605: LD_VAR 0 2
66609: PPUSH
66610: LD_INT 2
66612: PPUSH
66613: LD_INT 0
66615: PPUSH
66616: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66620: LD_VAR 0 2
66624: PPUSH
66625: LD_INT 3
66627: PPUSH
66628: LD_INT 0
66630: PPUSH
66631: CALL_OW 277
// end ;
66635: PPOPN 2
66637: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66638: LD_EXP 46
66642: PUSH
66643: LD_EXP 74
66647: AND
66648: IFFALSE 66745
66650: GO 66652
66652: DISABLE
66653: LD_INT 0
66655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66656: LD_ADDR_VAR 0 1
66660: PUSH
66661: LD_INT 22
66663: PUSH
66664: LD_OWVAR 2
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 21
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: LD_INT 23
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PPUSH
66705: CALL_OW 69
66709: ST_TO_ADDR
// if not tmp then
66710: LD_VAR 0 1
66714: NOT
66715: IFFALSE 66719
// exit ;
66717: GO 66745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66719: LD_VAR 0 1
66723: PUSH
66724: LD_INT 1
66726: PPUSH
66727: LD_VAR 0 1
66731: PPUSH
66732: CALL_OW 12
66736: ARRAY
66737: PPUSH
66738: LD_INT 200
66740: PPUSH
66741: CALL_OW 234
// end ;
66745: PPOPN 1
66747: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66748: LD_EXP 46
66752: PUSH
66753: LD_EXP 75
66757: AND
66758: IFFALSE 66837
66760: GO 66762
66762: DISABLE
66763: LD_INT 0
66765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66766: LD_ADDR_VAR 0 1
66770: PUSH
66771: LD_INT 22
66773: PUSH
66774: LD_OWVAR 2
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: LD_INT 21
66785: PUSH
66786: LD_INT 2
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PPUSH
66797: CALL_OW 69
66801: ST_TO_ADDR
// if not tmp then
66802: LD_VAR 0 1
66806: NOT
66807: IFFALSE 66811
// exit ;
66809: GO 66837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66811: LD_VAR 0 1
66815: PUSH
66816: LD_INT 1
66818: PPUSH
66819: LD_VAR 0 1
66823: PPUSH
66824: CALL_OW 12
66828: ARRAY
66829: PPUSH
66830: LD_INT 60
66832: PPUSH
66833: CALL_OW 234
// end ;
66837: PPOPN 1
66839: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66840: LD_EXP 46
66844: PUSH
66845: LD_EXP 76
66849: AND
66850: IFFALSE 66949
66852: GO 66854
66854: DISABLE
66855: LD_INT 0
66857: PPUSH
66858: PPUSH
// begin enable ;
66859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66860: LD_ADDR_VAR 0 1
66864: PUSH
66865: LD_INT 22
66867: PUSH
66868: LD_OWVAR 2
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 61
66879: PUSH
66880: EMPTY
66881: LIST
66882: PUSH
66883: LD_INT 33
66885: PUSH
66886: LD_INT 2
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: LIST
66897: PPUSH
66898: CALL_OW 69
66902: ST_TO_ADDR
// if not tmp then
66903: LD_VAR 0 1
66907: NOT
66908: IFFALSE 66912
// exit ;
66910: GO 66949
// for i in tmp do
66912: LD_ADDR_VAR 0 2
66916: PUSH
66917: LD_VAR 0 1
66921: PUSH
66922: FOR_IN
66923: IFFALSE 66947
// if IsControledBy ( i ) then
66925: LD_VAR 0 2
66929: PPUSH
66930: CALL_OW 312
66934: IFFALSE 66945
// ComUnlink ( i ) ;
66936: LD_VAR 0 2
66940: PPUSH
66941: CALL_OW 136
66945: GO 66922
66947: POP
66948: POP
// end ;
66949: PPOPN 2
66951: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66952: LD_EXP 46
66956: PUSH
66957: LD_EXP 77
66961: AND
66962: IFFALSE 67102
66964: GO 66966
66966: DISABLE
66967: LD_INT 0
66969: PPUSH
66970: PPUSH
// begin ToLua ( displayPowell(); ) ;
66971: LD_STRING displayPowell();
66973: PPUSH
66974: CALL_OW 559
// uc_side := 0 ;
66978: LD_ADDR_OWVAR 20
66982: PUSH
66983: LD_INT 0
66985: ST_TO_ADDR
// uc_nation := 2 ;
66986: LD_ADDR_OWVAR 21
66990: PUSH
66991: LD_INT 2
66993: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66994: LD_ADDR_OWVAR 37
66998: PUSH
66999: LD_INT 14
67001: ST_TO_ADDR
// vc_engine := engine_siberite ;
67002: LD_ADDR_OWVAR 39
67006: PUSH
67007: LD_INT 3
67009: ST_TO_ADDR
// vc_control := control_apeman ;
67010: LD_ADDR_OWVAR 38
67014: PUSH
67015: LD_INT 5
67017: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67018: LD_ADDR_OWVAR 40
67022: PUSH
67023: LD_INT 29
67025: ST_TO_ADDR
// un := CreateVehicle ;
67026: LD_ADDR_VAR 0 2
67030: PUSH
67031: CALL_OW 45
67035: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67036: LD_VAR 0 2
67040: PPUSH
67041: LD_INT 1
67043: PPUSH
67044: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67048: LD_INT 35
67050: PPUSH
67051: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67055: LD_VAR 0 2
67059: PPUSH
67060: LD_INT 22
67062: PUSH
67063: LD_OWVAR 2
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PPUSH
67072: CALL_OW 69
67076: PPUSH
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 74
67086: PPUSH
67087: CALL_OW 115
// until IsDead ( un ) ;
67091: LD_VAR 0 2
67095: PPUSH
67096: CALL_OW 301
67100: IFFALSE 67048
// end ;
67102: PPOPN 2
67104: END
// every 0 0$1 trigger StreamModeActive and sStu do
67105: LD_EXP 46
67109: PUSH
67110: LD_EXP 85
67114: AND
67115: IFFALSE 67131
67117: GO 67119
67119: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67120: LD_STRING displayStucuk();
67122: PPUSH
67123: CALL_OW 559
// ResetFog ;
67127: CALL_OW 335
// end ;
67131: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67132: LD_EXP 46
67136: PUSH
67137: LD_EXP 78
67141: AND
67142: IFFALSE 67283
67144: GO 67146
67146: DISABLE
67147: LD_INT 0
67149: PPUSH
67150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67151: LD_ADDR_VAR 0 2
67155: PUSH
67156: LD_INT 22
67158: PUSH
67159: LD_OWVAR 2
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 21
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PPUSH
67182: CALL_OW 69
67186: ST_TO_ADDR
// if not tmp then
67187: LD_VAR 0 2
67191: NOT
67192: IFFALSE 67196
// exit ;
67194: GO 67283
// un := tmp [ rand ( 1 , tmp ) ] ;
67196: LD_ADDR_VAR 0 1
67200: PUSH
67201: LD_VAR 0 2
67205: PUSH
67206: LD_INT 1
67208: PPUSH
67209: LD_VAR 0 2
67213: PPUSH
67214: CALL_OW 12
67218: ARRAY
67219: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67220: LD_VAR 0 1
67224: PPUSH
67225: LD_INT 0
67227: PPUSH
67228: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67232: LD_VAR 0 1
67236: PPUSH
67237: LD_OWVAR 3
67241: PUSH
67242: LD_VAR 0 1
67246: DIFF
67247: PPUSH
67248: LD_VAR 0 1
67252: PPUSH
67253: CALL_OW 74
67257: PPUSH
67258: CALL_OW 115
// wait ( 0 0$20 ) ;
67262: LD_INT 700
67264: PPUSH
67265: CALL_OW 67
// SetSide ( un , your_side ) ;
67269: LD_VAR 0 1
67273: PPUSH
67274: LD_OWVAR 2
67278: PPUSH
67279: CALL_OW 235
// end ;
67283: PPOPN 2
67285: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67286: LD_EXP 46
67290: PUSH
67291: LD_EXP 79
67295: AND
67296: IFFALSE 67402
67298: GO 67300
67300: DISABLE
67301: LD_INT 0
67303: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67304: LD_ADDR_VAR 0 1
67308: PUSH
67309: LD_INT 22
67311: PUSH
67312: LD_OWVAR 2
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: PUSH
67324: LD_INT 30
67326: PUSH
67327: LD_INT 0
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 30
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PPUSH
67353: CALL_OW 69
67357: ST_TO_ADDR
// if not depot then
67358: LD_VAR 0 1
67362: NOT
67363: IFFALSE 67367
// exit ;
67365: GO 67402
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67367: LD_VAR 0 1
67371: PUSH
67372: LD_INT 1
67374: ARRAY
67375: PPUSH
67376: CALL_OW 250
67380: PPUSH
67381: LD_VAR 0 1
67385: PUSH
67386: LD_INT 1
67388: ARRAY
67389: PPUSH
67390: CALL_OW 251
67394: PPUSH
67395: LD_INT 70
67397: PPUSH
67398: CALL_OW 495
// end ;
67402: PPOPN 1
67404: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67405: LD_EXP 46
67409: PUSH
67410: LD_EXP 80
67414: AND
67415: IFFALSE 67626
67417: GO 67419
67419: DISABLE
67420: LD_INT 0
67422: PPUSH
67423: PPUSH
67424: PPUSH
67425: PPUSH
67426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67427: LD_ADDR_VAR 0 5
67431: PUSH
67432: LD_INT 22
67434: PUSH
67435: LD_OWVAR 2
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 21
67446: PUSH
67447: LD_INT 1
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PPUSH
67458: CALL_OW 69
67462: ST_TO_ADDR
// if not tmp then
67463: LD_VAR 0 5
67467: NOT
67468: IFFALSE 67472
// exit ;
67470: GO 67626
// for i in tmp do
67472: LD_ADDR_VAR 0 1
67476: PUSH
67477: LD_VAR 0 5
67481: PUSH
67482: FOR_IN
67483: IFFALSE 67624
// begin d := rand ( 0 , 5 ) ;
67485: LD_ADDR_VAR 0 4
67489: PUSH
67490: LD_INT 0
67492: PPUSH
67493: LD_INT 5
67495: PPUSH
67496: CALL_OW 12
67500: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67501: LD_ADDR_VAR 0 2
67505: PUSH
67506: LD_VAR 0 1
67510: PPUSH
67511: CALL_OW 250
67515: PPUSH
67516: LD_VAR 0 4
67520: PPUSH
67521: LD_INT 3
67523: PPUSH
67524: LD_INT 12
67526: PPUSH
67527: CALL_OW 12
67531: PPUSH
67532: CALL_OW 272
67536: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67537: LD_ADDR_VAR 0 3
67541: PUSH
67542: LD_VAR 0 1
67546: PPUSH
67547: CALL_OW 251
67551: PPUSH
67552: LD_VAR 0 4
67556: PPUSH
67557: LD_INT 3
67559: PPUSH
67560: LD_INT 12
67562: PPUSH
67563: CALL_OW 12
67567: PPUSH
67568: CALL_OW 273
67572: ST_TO_ADDR
// if ValidHex ( x , y ) then
67573: LD_VAR 0 2
67577: PPUSH
67578: LD_VAR 0 3
67582: PPUSH
67583: CALL_OW 488
67587: IFFALSE 67622
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67589: LD_VAR 0 1
67593: PPUSH
67594: LD_VAR 0 2
67598: PPUSH
67599: LD_VAR 0 3
67603: PPUSH
67604: LD_INT 3
67606: PPUSH
67607: LD_INT 6
67609: PPUSH
67610: CALL_OW 12
67614: PPUSH
67615: LD_INT 1
67617: PPUSH
67618: CALL_OW 483
// end ;
67622: GO 67482
67624: POP
67625: POP
// end ;
67626: PPOPN 5
67628: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67629: LD_EXP 46
67633: PUSH
67634: LD_EXP 81
67638: AND
67639: IFFALSE 67733
67641: GO 67643
67643: DISABLE
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67648: LD_ADDR_VAR 0 2
67652: PUSH
67653: LD_INT 22
67655: PUSH
67656: LD_OWVAR 2
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 32
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 21
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: LIST
67689: PPUSH
67690: CALL_OW 69
67694: ST_TO_ADDR
// if not tmp then
67695: LD_VAR 0 2
67699: NOT
67700: IFFALSE 67704
// exit ;
67702: GO 67733
// for i in tmp do
67704: LD_ADDR_VAR 0 1
67708: PUSH
67709: LD_VAR 0 2
67713: PUSH
67714: FOR_IN
67715: IFFALSE 67731
// SetFuel ( i , 0 ) ;
67717: LD_VAR 0 1
67721: PPUSH
67722: LD_INT 0
67724: PPUSH
67725: CALL_OW 240
67729: GO 67714
67731: POP
67732: POP
// end ;
67733: PPOPN 2
67735: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67736: LD_EXP 46
67740: PUSH
67741: LD_EXP 82
67745: AND
67746: IFFALSE 67812
67748: GO 67750
67750: DISABLE
67751: LD_INT 0
67753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67754: LD_ADDR_VAR 0 1
67758: PUSH
67759: LD_INT 22
67761: PUSH
67762: LD_OWVAR 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 30
67773: PUSH
67774: LD_INT 29
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PPUSH
67785: CALL_OW 69
67789: ST_TO_ADDR
// if not tmp then
67790: LD_VAR 0 1
67794: NOT
67795: IFFALSE 67799
// exit ;
67797: GO 67812
// DestroyUnit ( tmp [ 1 ] ) ;
67799: LD_VAR 0 1
67803: PUSH
67804: LD_INT 1
67806: ARRAY
67807: PPUSH
67808: CALL_OW 65
// end ;
67812: PPOPN 1
67814: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67815: LD_EXP 46
67819: PUSH
67820: LD_EXP 84
67824: AND
67825: IFFALSE 67954
67827: GO 67829
67829: DISABLE
67830: LD_INT 0
67832: PPUSH
// begin uc_side := 0 ;
67833: LD_ADDR_OWVAR 20
67837: PUSH
67838: LD_INT 0
67840: ST_TO_ADDR
// uc_nation := nation_arabian ;
67841: LD_ADDR_OWVAR 21
67845: PUSH
67846: LD_INT 2
67848: ST_TO_ADDR
// hc_gallery :=  ;
67849: LD_ADDR_OWVAR 33
67853: PUSH
67854: LD_STRING 
67856: ST_TO_ADDR
// hc_name :=  ;
67857: LD_ADDR_OWVAR 26
67861: PUSH
67862: LD_STRING 
67864: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67865: LD_INT 1
67867: PPUSH
67868: LD_INT 11
67870: PPUSH
67871: LD_INT 10
67873: PPUSH
67874: CALL_OW 380
// un := CreateHuman ;
67878: LD_ADDR_VAR 0 1
67882: PUSH
67883: CALL_OW 44
67887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67888: LD_VAR 0 1
67892: PPUSH
67893: LD_INT 1
67895: PPUSH
67896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67900: LD_INT 35
67902: PPUSH
67903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67907: LD_VAR 0 1
67911: PPUSH
67912: LD_INT 22
67914: PUSH
67915: LD_OWVAR 2
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PPUSH
67924: CALL_OW 69
67928: PPUSH
67929: LD_VAR 0 1
67933: PPUSH
67934: CALL_OW 74
67938: PPUSH
67939: CALL_OW 115
// until IsDead ( un ) ;
67943: LD_VAR 0 1
67947: PPUSH
67948: CALL_OW 301
67952: IFFALSE 67900
// end ;
67954: PPOPN 1
67956: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67957: LD_EXP 46
67961: PUSH
67962: LD_EXP 86
67966: AND
67967: IFFALSE 67979
67969: GO 67971
67971: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67972: LD_STRING earthquake(getX(game), 0, 32)
67974: PPUSH
67975: CALL_OW 559
67979: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67980: LD_EXP 46
67984: PUSH
67985: LD_EXP 87
67989: AND
67990: IFFALSE 68081
67992: GO 67994
67994: DISABLE
67995: LD_INT 0
67997: PPUSH
// begin enable ;
67998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67999: LD_ADDR_VAR 0 1
68003: PUSH
68004: LD_INT 22
68006: PUSH
68007: LD_OWVAR 2
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 21
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 33
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: LIST
68040: PPUSH
68041: CALL_OW 69
68045: ST_TO_ADDR
// if not tmp then
68046: LD_VAR 0 1
68050: NOT
68051: IFFALSE 68055
// exit ;
68053: GO 68081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68055: LD_VAR 0 1
68059: PUSH
68060: LD_INT 1
68062: PPUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 12
68072: ARRAY
68073: PPUSH
68074: LD_INT 1
68076: PPUSH
68077: CALL_OW 234
// end ;
68081: PPOPN 1
68083: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68084: LD_EXP 46
68088: PUSH
68089: LD_EXP 88
68093: AND
68094: IFFALSE 68235
68096: GO 68098
68098: DISABLE
68099: LD_INT 0
68101: PPUSH
68102: PPUSH
68103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68104: LD_ADDR_VAR 0 3
68108: PUSH
68109: LD_INT 22
68111: PUSH
68112: LD_OWVAR 2
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 25
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PPUSH
68135: CALL_OW 69
68139: ST_TO_ADDR
// if not tmp then
68140: LD_VAR 0 3
68144: NOT
68145: IFFALSE 68149
// exit ;
68147: GO 68235
// un := tmp [ rand ( 1 , tmp ) ] ;
68149: LD_ADDR_VAR 0 2
68153: PUSH
68154: LD_VAR 0 3
68158: PUSH
68159: LD_INT 1
68161: PPUSH
68162: LD_VAR 0 3
68166: PPUSH
68167: CALL_OW 12
68171: ARRAY
68172: ST_TO_ADDR
// if Crawls ( un ) then
68173: LD_VAR 0 2
68177: PPUSH
68178: CALL_OW 318
68182: IFFALSE 68193
// ComWalk ( un ) ;
68184: LD_VAR 0 2
68188: PPUSH
68189: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68193: LD_VAR 0 2
68197: PPUSH
68198: LD_INT 9
68200: PPUSH
68201: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68205: LD_INT 28
68207: PPUSH
68208: LD_OWVAR 2
68212: PPUSH
68213: LD_INT 2
68215: PPUSH
68216: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68220: LD_INT 29
68222: PPUSH
68223: LD_OWVAR 2
68227: PPUSH
68228: LD_INT 2
68230: PPUSH
68231: CALL_OW 322
// end ;
68235: PPOPN 3
68237: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68238: LD_EXP 46
68242: PUSH
68243: LD_EXP 89
68247: AND
68248: IFFALSE 68359
68250: GO 68252
68252: DISABLE
68253: LD_INT 0
68255: PPUSH
68256: PPUSH
68257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68258: LD_ADDR_VAR 0 3
68262: PUSH
68263: LD_INT 22
68265: PUSH
68266: LD_OWVAR 2
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 25
68277: PUSH
68278: LD_INT 1
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PPUSH
68289: CALL_OW 69
68293: ST_TO_ADDR
// if not tmp then
68294: LD_VAR 0 3
68298: NOT
68299: IFFALSE 68303
// exit ;
68301: GO 68359
// un := tmp [ rand ( 1 , tmp ) ] ;
68303: LD_ADDR_VAR 0 2
68307: PUSH
68308: LD_VAR 0 3
68312: PUSH
68313: LD_INT 1
68315: PPUSH
68316: LD_VAR 0 3
68320: PPUSH
68321: CALL_OW 12
68325: ARRAY
68326: ST_TO_ADDR
// if Crawls ( un ) then
68327: LD_VAR 0 2
68331: PPUSH
68332: CALL_OW 318
68336: IFFALSE 68347
// ComWalk ( un ) ;
68338: LD_VAR 0 2
68342: PPUSH
68343: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68347: LD_VAR 0 2
68351: PPUSH
68352: LD_INT 8
68354: PPUSH
68355: CALL_OW 336
// end ;
68359: PPOPN 3
68361: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68362: LD_EXP 46
68366: PUSH
68367: LD_EXP 90
68371: AND
68372: IFFALSE 68516
68374: GO 68376
68376: DISABLE
68377: LD_INT 0
68379: PPUSH
68380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68381: LD_ADDR_VAR 0 2
68385: PUSH
68386: LD_INT 22
68388: PUSH
68389: LD_OWVAR 2
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 21
68400: PUSH
68401: LD_INT 2
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 2
68410: PUSH
68411: LD_INT 34
68413: PUSH
68414: LD_INT 12
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 34
68423: PUSH
68424: LD_INT 51
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 34
68433: PUSH
68434: LD_INT 32
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: PPUSH
68452: CALL_OW 69
68456: ST_TO_ADDR
// if not tmp then
68457: LD_VAR 0 2
68461: NOT
68462: IFFALSE 68466
// exit ;
68464: GO 68516
// for i in tmp do
68466: LD_ADDR_VAR 0 1
68470: PUSH
68471: LD_VAR 0 2
68475: PUSH
68476: FOR_IN
68477: IFFALSE 68514
// if GetCargo ( i , mat_artifact ) = 0 then
68479: LD_VAR 0 1
68483: PPUSH
68484: LD_INT 4
68486: PPUSH
68487: CALL_OW 289
68491: PUSH
68492: LD_INT 0
68494: EQUAL
68495: IFFALSE 68512
// SetCargo ( i , mat_siberit , 100 ) ;
68497: LD_VAR 0 1
68501: PPUSH
68502: LD_INT 3
68504: PPUSH
68505: LD_INT 100
68507: PPUSH
68508: CALL_OW 290
68512: GO 68476
68514: POP
68515: POP
// end ;
68516: PPOPN 2
68518: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68519: LD_EXP 46
68523: PUSH
68524: LD_EXP 91
68528: AND
68529: IFFALSE 68712
68531: GO 68533
68533: DISABLE
68534: LD_INT 0
68536: PPUSH
68537: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68538: LD_ADDR_VAR 0 2
68542: PUSH
68543: LD_INT 22
68545: PUSH
68546: LD_OWVAR 2
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PPUSH
68555: CALL_OW 69
68559: ST_TO_ADDR
// if not tmp then
68560: LD_VAR 0 2
68564: NOT
68565: IFFALSE 68569
// exit ;
68567: GO 68712
// for i := 1 to 2 do
68569: LD_ADDR_VAR 0 1
68573: PUSH
68574: DOUBLE
68575: LD_INT 1
68577: DEC
68578: ST_TO_ADDR
68579: LD_INT 2
68581: PUSH
68582: FOR_TO
68583: IFFALSE 68710
// begin uc_side := your_side ;
68585: LD_ADDR_OWVAR 20
68589: PUSH
68590: LD_OWVAR 2
68594: ST_TO_ADDR
// uc_nation := nation_american ;
68595: LD_ADDR_OWVAR 21
68599: PUSH
68600: LD_INT 1
68602: ST_TO_ADDR
// vc_chassis := us_morphling ;
68603: LD_ADDR_OWVAR 37
68607: PUSH
68608: LD_INT 5
68610: ST_TO_ADDR
// vc_engine := engine_siberite ;
68611: LD_ADDR_OWVAR 39
68615: PUSH
68616: LD_INT 3
68618: ST_TO_ADDR
// vc_control := control_computer ;
68619: LD_ADDR_OWVAR 38
68623: PUSH
68624: LD_INT 3
68626: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68627: LD_ADDR_OWVAR 40
68631: PUSH
68632: LD_INT 10
68634: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68635: LD_VAR 0 2
68639: PUSH
68640: LD_INT 1
68642: ARRAY
68643: PPUSH
68644: CALL_OW 310
68648: NOT
68649: IFFALSE 68696
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68651: CALL_OW 45
68655: PPUSH
68656: LD_VAR 0 2
68660: PUSH
68661: LD_INT 1
68663: ARRAY
68664: PPUSH
68665: CALL_OW 250
68669: PPUSH
68670: LD_VAR 0 2
68674: PUSH
68675: LD_INT 1
68677: ARRAY
68678: PPUSH
68679: CALL_OW 251
68683: PPUSH
68684: LD_INT 12
68686: PPUSH
68687: LD_INT 1
68689: PPUSH
68690: CALL_OW 50
68694: GO 68708
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68696: CALL_OW 45
68700: PPUSH
68701: LD_INT 1
68703: PPUSH
68704: CALL_OW 51
// end ;
68708: GO 68582
68710: POP
68711: POP
// end ;
68712: PPOPN 2
68714: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68715: LD_EXP 46
68719: PUSH
68720: LD_EXP 92
68724: AND
68725: IFFALSE 68947
68727: GO 68729
68729: DISABLE
68730: LD_INT 0
68732: PPUSH
68733: PPUSH
68734: PPUSH
68735: PPUSH
68736: PPUSH
68737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68738: LD_ADDR_VAR 0 6
68742: PUSH
68743: LD_INT 22
68745: PUSH
68746: LD_OWVAR 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 21
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 3
68767: PUSH
68768: LD_INT 23
68770: PUSH
68771: LD_INT 0
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: LIST
68786: PPUSH
68787: CALL_OW 69
68791: ST_TO_ADDR
// if not tmp then
68792: LD_VAR 0 6
68796: NOT
68797: IFFALSE 68801
// exit ;
68799: GO 68947
// s1 := rand ( 1 , 4 ) ;
68801: LD_ADDR_VAR 0 2
68805: PUSH
68806: LD_INT 1
68808: PPUSH
68809: LD_INT 4
68811: PPUSH
68812: CALL_OW 12
68816: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68817: LD_ADDR_VAR 0 4
68821: PUSH
68822: LD_VAR 0 6
68826: PUSH
68827: LD_INT 1
68829: ARRAY
68830: PPUSH
68831: LD_VAR 0 2
68835: PPUSH
68836: CALL_OW 259
68840: ST_TO_ADDR
// if s1 = 1 then
68841: LD_VAR 0 2
68845: PUSH
68846: LD_INT 1
68848: EQUAL
68849: IFFALSE 68869
// s2 := rand ( 2 , 4 ) else
68851: LD_ADDR_VAR 0 3
68855: PUSH
68856: LD_INT 2
68858: PPUSH
68859: LD_INT 4
68861: PPUSH
68862: CALL_OW 12
68866: ST_TO_ADDR
68867: GO 68877
// s2 := 1 ;
68869: LD_ADDR_VAR 0 3
68873: PUSH
68874: LD_INT 1
68876: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68877: LD_ADDR_VAR 0 5
68881: PUSH
68882: LD_VAR 0 6
68886: PUSH
68887: LD_INT 1
68889: ARRAY
68890: PPUSH
68891: LD_VAR 0 3
68895: PPUSH
68896: CALL_OW 259
68900: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68901: LD_VAR 0 6
68905: PUSH
68906: LD_INT 1
68908: ARRAY
68909: PPUSH
68910: LD_VAR 0 2
68914: PPUSH
68915: LD_VAR 0 5
68919: PPUSH
68920: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68924: LD_VAR 0 6
68928: PUSH
68929: LD_INT 1
68931: ARRAY
68932: PPUSH
68933: LD_VAR 0 3
68937: PPUSH
68938: LD_VAR 0 4
68942: PPUSH
68943: CALL_OW 237
// end ;
68947: PPOPN 6
68949: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68950: LD_EXP 46
68954: PUSH
68955: LD_EXP 93
68959: AND
68960: IFFALSE 69039
68962: GO 68964
68964: DISABLE
68965: LD_INT 0
68967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68968: LD_ADDR_VAR 0 1
68972: PUSH
68973: LD_INT 22
68975: PUSH
68976: LD_OWVAR 2
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 30
68987: PUSH
68988: LD_INT 3
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PPUSH
68999: CALL_OW 69
69003: ST_TO_ADDR
// if not tmp then
69004: LD_VAR 0 1
69008: NOT
69009: IFFALSE 69013
// exit ;
69011: GO 69039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69013: LD_VAR 0 1
69017: PUSH
69018: LD_INT 1
69020: PPUSH
69021: LD_VAR 0 1
69025: PPUSH
69026: CALL_OW 12
69030: ARRAY
69031: PPUSH
69032: LD_INT 1
69034: PPUSH
69035: CALL_OW 234
// end ;
69039: PPOPN 1
69041: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69042: LD_EXP 46
69046: PUSH
69047: LD_EXP 94
69051: AND
69052: IFFALSE 69164
69054: GO 69056
69056: DISABLE
69057: LD_INT 0
69059: PPUSH
69060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69061: LD_ADDR_VAR 0 2
69065: PUSH
69066: LD_INT 22
69068: PUSH
69069: LD_OWVAR 2
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 2
69080: PUSH
69081: LD_INT 30
69083: PUSH
69084: LD_INT 27
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 30
69093: PUSH
69094: LD_INT 26
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 30
69103: PUSH
69104: LD_INT 28
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PPUSH
69121: CALL_OW 69
69125: ST_TO_ADDR
// if not tmp then
69126: LD_VAR 0 2
69130: NOT
69131: IFFALSE 69135
// exit ;
69133: GO 69164
// for i in tmp do
69135: LD_ADDR_VAR 0 1
69139: PUSH
69140: LD_VAR 0 2
69144: PUSH
69145: FOR_IN
69146: IFFALSE 69162
// SetLives ( i , 1 ) ;
69148: LD_VAR 0 1
69152: PPUSH
69153: LD_INT 1
69155: PPUSH
69156: CALL_OW 234
69160: GO 69145
69162: POP
69163: POP
// end ;
69164: PPOPN 2
69166: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69167: LD_EXP 46
69171: PUSH
69172: LD_EXP 95
69176: AND
69177: IFFALSE 69464
69179: GO 69181
69181: DISABLE
69182: LD_INT 0
69184: PPUSH
69185: PPUSH
69186: PPUSH
// begin i := rand ( 1 , 7 ) ;
69187: LD_ADDR_VAR 0 1
69191: PUSH
69192: LD_INT 1
69194: PPUSH
69195: LD_INT 7
69197: PPUSH
69198: CALL_OW 12
69202: ST_TO_ADDR
// case i of 1 :
69203: LD_VAR 0 1
69207: PUSH
69208: LD_INT 1
69210: DOUBLE
69211: EQUAL
69212: IFTRUE 69216
69214: GO 69226
69216: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69217: LD_STRING earthquake(getX(game), 0, 32)
69219: PPUSH
69220: CALL_OW 559
69224: GO 69464
69226: LD_INT 2
69228: DOUBLE
69229: EQUAL
69230: IFTRUE 69234
69232: GO 69248
69234: POP
// begin ToLua ( displayStucuk(); ) ;
69235: LD_STRING displayStucuk();
69237: PPUSH
69238: CALL_OW 559
// ResetFog ;
69242: CALL_OW 335
// end ; 3 :
69246: GO 69464
69248: LD_INT 3
69250: DOUBLE
69251: EQUAL
69252: IFTRUE 69256
69254: GO 69360
69256: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69257: LD_ADDR_VAR 0 2
69261: PUSH
69262: LD_INT 22
69264: PUSH
69265: LD_OWVAR 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 25
69276: PUSH
69277: LD_INT 1
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PPUSH
69288: CALL_OW 69
69292: ST_TO_ADDR
// if not tmp then
69293: LD_VAR 0 2
69297: NOT
69298: IFFALSE 69302
// exit ;
69300: GO 69464
// un := tmp [ rand ( 1 , tmp ) ] ;
69302: LD_ADDR_VAR 0 3
69306: PUSH
69307: LD_VAR 0 2
69311: PUSH
69312: LD_INT 1
69314: PPUSH
69315: LD_VAR 0 2
69319: PPUSH
69320: CALL_OW 12
69324: ARRAY
69325: ST_TO_ADDR
// if Crawls ( un ) then
69326: LD_VAR 0 3
69330: PPUSH
69331: CALL_OW 318
69335: IFFALSE 69346
// ComWalk ( un ) ;
69337: LD_VAR 0 3
69341: PPUSH
69342: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69346: LD_VAR 0 3
69350: PPUSH
69351: LD_INT 8
69353: PPUSH
69354: CALL_OW 336
// end ; 4 :
69358: GO 69464
69360: LD_INT 4
69362: DOUBLE
69363: EQUAL
69364: IFTRUE 69368
69366: GO 69442
69368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69369: LD_ADDR_VAR 0 2
69373: PUSH
69374: LD_INT 22
69376: PUSH
69377: LD_OWVAR 2
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 30
69388: PUSH
69389: LD_INT 29
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: PPUSH
69400: CALL_OW 69
69404: ST_TO_ADDR
// if not tmp then
69405: LD_VAR 0 2
69409: NOT
69410: IFFALSE 69414
// exit ;
69412: GO 69464
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69414: LD_VAR 0 2
69418: PUSH
69419: LD_INT 1
69421: ARRAY
69422: PPUSH
69423: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69427: LD_VAR 0 2
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: PPUSH
69436: CALL_OW 65
// end ; 5 .. 7 :
69440: GO 69464
69442: LD_INT 5
69444: DOUBLE
69445: GREATEREQUAL
69446: IFFALSE 69454
69448: LD_INT 7
69450: DOUBLE
69451: LESSEQUAL
69452: IFTRUE 69456
69454: GO 69463
69456: POP
// StreamSibBomb ; end ;
69457: CALL 65701 0 0
69461: GO 69464
69463: POP
// end ;
69464: PPOPN 3
69466: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69467: LD_EXP 46
69471: PUSH
69472: LD_EXP 96
69476: AND
69477: IFFALSE 69633
69479: GO 69481
69481: DISABLE
69482: LD_INT 0
69484: PPUSH
69485: PPUSH
69486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69487: LD_ADDR_VAR 0 2
69491: PUSH
69492: LD_INT 81
69494: PUSH
69495: LD_OWVAR 2
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 2
69506: PUSH
69507: LD_INT 21
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 21
69519: PUSH
69520: LD_INT 2
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: LIST
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PPUSH
69536: CALL_OW 69
69540: ST_TO_ADDR
// if not tmp then
69541: LD_VAR 0 2
69545: NOT
69546: IFFALSE 69550
// exit ;
69548: GO 69633
// p := 0 ;
69550: LD_ADDR_VAR 0 3
69554: PUSH
69555: LD_INT 0
69557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69558: LD_INT 35
69560: PPUSH
69561: CALL_OW 67
// p := p + 1 ;
69565: LD_ADDR_VAR 0 3
69569: PUSH
69570: LD_VAR 0 3
69574: PUSH
69575: LD_INT 1
69577: PLUS
69578: ST_TO_ADDR
// for i in tmp do
69579: LD_ADDR_VAR 0 1
69583: PUSH
69584: LD_VAR 0 2
69588: PUSH
69589: FOR_IN
69590: IFFALSE 69621
// if GetLives ( i ) < 1000 then
69592: LD_VAR 0 1
69596: PPUSH
69597: CALL_OW 256
69601: PUSH
69602: LD_INT 1000
69604: LESS
69605: IFFALSE 69619
// SetLives ( i , 1000 ) ;
69607: LD_VAR 0 1
69611: PPUSH
69612: LD_INT 1000
69614: PPUSH
69615: CALL_OW 234
69619: GO 69589
69621: POP
69622: POP
// until p > 20 ;
69623: LD_VAR 0 3
69627: PUSH
69628: LD_INT 20
69630: GREATER
69631: IFFALSE 69558
// end ;
69633: PPOPN 3
69635: END
// every 0 0$1 trigger StreamModeActive and sTime do
69636: LD_EXP 46
69640: PUSH
69641: LD_EXP 97
69645: AND
69646: IFFALSE 69681
69648: GO 69650
69650: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69651: LD_INT 28
69653: PPUSH
69654: LD_OWVAR 2
69658: PPUSH
69659: LD_INT 2
69661: PPUSH
69662: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69666: LD_INT 30
69668: PPUSH
69669: LD_OWVAR 2
69673: PPUSH
69674: LD_INT 2
69676: PPUSH
69677: CALL_OW 322
// end ;
69681: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69682: LD_EXP 46
69686: PUSH
69687: LD_EXP 98
69691: AND
69692: IFFALSE 69813
69694: GO 69696
69696: DISABLE
69697: LD_INT 0
69699: PPUSH
69700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69701: LD_ADDR_VAR 0 2
69705: PUSH
69706: LD_INT 22
69708: PUSH
69709: LD_OWVAR 2
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 21
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 23
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: PPUSH
69750: CALL_OW 69
69754: ST_TO_ADDR
// if not tmp then
69755: LD_VAR 0 2
69759: NOT
69760: IFFALSE 69764
// exit ;
69762: GO 69813
// for i in tmp do
69764: LD_ADDR_VAR 0 1
69768: PUSH
69769: LD_VAR 0 2
69773: PUSH
69774: FOR_IN
69775: IFFALSE 69811
// begin if Crawls ( i ) then
69777: LD_VAR 0 1
69781: PPUSH
69782: CALL_OW 318
69786: IFFALSE 69797
// ComWalk ( i ) ;
69788: LD_VAR 0 1
69792: PPUSH
69793: CALL_OW 138
// SetClass ( i , 2 ) ;
69797: LD_VAR 0 1
69801: PPUSH
69802: LD_INT 2
69804: PPUSH
69805: CALL_OW 336
// end ;
69809: GO 69774
69811: POP
69812: POP
// end ;
69813: PPOPN 2
69815: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69816: LD_EXP 46
69820: PUSH
69821: LD_EXP 99
69825: AND
69826: IFFALSE 70114
69828: GO 69830
69830: DISABLE
69831: LD_INT 0
69833: PPUSH
69834: PPUSH
69835: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69836: LD_OWVAR 2
69840: PPUSH
69841: LD_INT 9
69843: PPUSH
69844: LD_INT 1
69846: PPUSH
69847: LD_INT 1
69849: PPUSH
69850: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69854: LD_INT 9
69856: PPUSH
69857: LD_OWVAR 2
69861: PPUSH
69862: CALL_OW 343
// uc_side := 9 ;
69866: LD_ADDR_OWVAR 20
69870: PUSH
69871: LD_INT 9
69873: ST_TO_ADDR
// uc_nation := 2 ;
69874: LD_ADDR_OWVAR 21
69878: PUSH
69879: LD_INT 2
69881: ST_TO_ADDR
// hc_name := Dark Warrior ;
69882: LD_ADDR_OWVAR 26
69886: PUSH
69887: LD_STRING Dark Warrior
69889: ST_TO_ADDR
// hc_gallery :=  ;
69890: LD_ADDR_OWVAR 33
69894: PUSH
69895: LD_STRING 
69897: ST_TO_ADDR
// hc_noskilllimit := true ;
69898: LD_ADDR_OWVAR 76
69902: PUSH
69903: LD_INT 1
69905: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69906: LD_ADDR_OWVAR 31
69910: PUSH
69911: LD_INT 30
69913: PUSH
69914: LD_INT 30
69916: PUSH
69917: LD_INT 30
69919: PUSH
69920: LD_INT 30
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: ST_TO_ADDR
// un := CreateHuman ;
69929: LD_ADDR_VAR 0 3
69933: PUSH
69934: CALL_OW 44
69938: ST_TO_ADDR
// hc_noskilllimit := false ;
69939: LD_ADDR_OWVAR 76
69943: PUSH
69944: LD_INT 0
69946: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69947: LD_VAR 0 3
69951: PPUSH
69952: LD_INT 1
69954: PPUSH
69955: CALL_OW 51
// ToLua ( playRanger() ) ;
69959: LD_STRING playRanger()
69961: PPUSH
69962: CALL_OW 559
// p := 0 ;
69966: LD_ADDR_VAR 0 2
69970: PUSH
69971: LD_INT 0
69973: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69974: LD_INT 35
69976: PPUSH
69977: CALL_OW 67
// p := p + 1 ;
69981: LD_ADDR_VAR 0 2
69985: PUSH
69986: LD_VAR 0 2
69990: PUSH
69991: LD_INT 1
69993: PLUS
69994: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69995: LD_VAR 0 3
69999: PPUSH
70000: CALL_OW 256
70004: PUSH
70005: LD_INT 1000
70007: LESS
70008: IFFALSE 70022
// SetLives ( un , 1000 ) ;
70010: LD_VAR 0 3
70014: PPUSH
70015: LD_INT 1000
70017: PPUSH
70018: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70022: LD_VAR 0 3
70026: PPUSH
70027: LD_INT 81
70029: PUSH
70030: LD_OWVAR 2
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 91
70041: PUSH
70042: LD_VAR 0 3
70046: PUSH
70047: LD_INT 30
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PPUSH
70059: CALL_OW 69
70063: PPUSH
70064: LD_VAR 0 3
70068: PPUSH
70069: CALL_OW 74
70073: PPUSH
70074: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70078: LD_VAR 0 2
70082: PUSH
70083: LD_INT 80
70085: GREATER
70086: PUSH
70087: LD_VAR 0 3
70091: PPUSH
70092: CALL_OW 301
70096: OR
70097: IFFALSE 69974
// if un then
70099: LD_VAR 0 3
70103: IFFALSE 70114
// RemoveUnit ( un ) ;
70105: LD_VAR 0 3
70109: PPUSH
70110: CALL_OW 64
// end ;
70114: PPOPN 3
70116: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70117: LD_EXP 100
70121: IFFALSE 70237
70123: GO 70125
70125: DISABLE
70126: LD_INT 0
70128: PPUSH
70129: PPUSH
70130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70131: LD_ADDR_VAR 0 2
70135: PUSH
70136: LD_INT 81
70138: PUSH
70139: LD_OWVAR 2
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 21
70150: PUSH
70151: LD_INT 1
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PPUSH
70162: CALL_OW 69
70166: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70167: LD_STRING playComputer()
70169: PPUSH
70170: CALL_OW 559
// if not tmp then
70174: LD_VAR 0 2
70178: NOT
70179: IFFALSE 70183
// exit ;
70181: GO 70237
// for i in tmp do
70183: LD_ADDR_VAR 0 1
70187: PUSH
70188: LD_VAR 0 2
70192: PUSH
70193: FOR_IN
70194: IFFALSE 70235
// for j := 1 to 4 do
70196: LD_ADDR_VAR 0 3
70200: PUSH
70201: DOUBLE
70202: LD_INT 1
70204: DEC
70205: ST_TO_ADDR
70206: LD_INT 4
70208: PUSH
70209: FOR_TO
70210: IFFALSE 70231
// SetSkill ( i , j , 10 ) ;
70212: LD_VAR 0 1
70216: PPUSH
70217: LD_VAR 0 3
70221: PPUSH
70222: LD_INT 10
70224: PPUSH
70225: CALL_OW 237
70229: GO 70209
70231: POP
70232: POP
70233: GO 70193
70235: POP
70236: POP
// end ;
70237: PPOPN 3
70239: END
// every 0 0$1 trigger s30 do var i , tmp ;
70240: LD_EXP 101
70244: IFFALSE 70313
70246: GO 70248
70248: DISABLE
70249: LD_INT 0
70251: PPUSH
70252: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70253: LD_ADDR_VAR 0 2
70257: PUSH
70258: LD_INT 22
70260: PUSH
70261: LD_OWVAR 2
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PPUSH
70270: CALL_OW 69
70274: ST_TO_ADDR
// if not tmp then
70275: LD_VAR 0 2
70279: NOT
70280: IFFALSE 70284
// exit ;
70282: GO 70313
// for i in tmp do
70284: LD_ADDR_VAR 0 1
70288: PUSH
70289: LD_VAR 0 2
70293: PUSH
70294: FOR_IN
70295: IFFALSE 70311
// SetLives ( i , 300 ) ;
70297: LD_VAR 0 1
70301: PPUSH
70302: LD_INT 300
70304: PPUSH
70305: CALL_OW 234
70309: GO 70294
70311: POP
70312: POP
// end ;
70313: PPOPN 2
70315: END
// every 0 0$1 trigger s60 do var i , tmp ;
70316: LD_EXP 102
70320: IFFALSE 70389
70322: GO 70324
70324: DISABLE
70325: LD_INT 0
70327: PPUSH
70328: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70329: LD_ADDR_VAR 0 2
70333: PUSH
70334: LD_INT 22
70336: PUSH
70337: LD_OWVAR 2
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PPUSH
70346: CALL_OW 69
70350: ST_TO_ADDR
// if not tmp then
70351: LD_VAR 0 2
70355: NOT
70356: IFFALSE 70360
// exit ;
70358: GO 70389
// for i in tmp do
70360: LD_ADDR_VAR 0 1
70364: PUSH
70365: LD_VAR 0 2
70369: PUSH
70370: FOR_IN
70371: IFFALSE 70387
// SetLives ( i , 600 ) ;
70373: LD_VAR 0 1
70377: PPUSH
70378: LD_INT 600
70380: PPUSH
70381: CALL_OW 234
70385: GO 70370
70387: POP
70388: POP
// end ;
70389: PPOPN 2
70391: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70392: LD_INT 0
70394: PPUSH
// case cmd of 301 :
70395: LD_VAR 0 1
70399: PUSH
70400: LD_INT 301
70402: DOUBLE
70403: EQUAL
70404: IFTRUE 70408
70406: GO 70440
70408: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70409: LD_VAR 0 6
70413: PPUSH
70414: LD_VAR 0 7
70418: PPUSH
70419: LD_VAR 0 8
70423: PPUSH
70424: LD_VAR 0 4
70428: PPUSH
70429: LD_VAR 0 5
70433: PPUSH
70434: CALL 71649 0 5
70438: GO 70561
70440: LD_INT 302
70442: DOUBLE
70443: EQUAL
70444: IFTRUE 70448
70446: GO 70485
70448: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70449: LD_VAR 0 6
70453: PPUSH
70454: LD_VAR 0 7
70458: PPUSH
70459: LD_VAR 0 8
70463: PPUSH
70464: LD_VAR 0 9
70468: PPUSH
70469: LD_VAR 0 4
70473: PPUSH
70474: LD_VAR 0 5
70478: PPUSH
70479: CALL 71740 0 6
70483: GO 70561
70485: LD_INT 303
70487: DOUBLE
70488: EQUAL
70489: IFTRUE 70493
70491: GO 70530
70493: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70494: LD_VAR 0 6
70498: PPUSH
70499: LD_VAR 0 7
70503: PPUSH
70504: LD_VAR 0 8
70508: PPUSH
70509: LD_VAR 0 9
70513: PPUSH
70514: LD_VAR 0 4
70518: PPUSH
70519: LD_VAR 0 5
70523: PPUSH
70524: CALL 70566 0 6
70528: GO 70561
70530: LD_INT 304
70532: DOUBLE
70533: EQUAL
70534: IFTRUE 70538
70536: GO 70560
70538: POP
// hHackTeleport ( unit , x , y ) ; end ;
70539: LD_VAR 0 2
70543: PPUSH
70544: LD_VAR 0 4
70548: PPUSH
70549: LD_VAR 0 5
70553: PPUSH
70554: CALL 72333 0 3
70558: GO 70561
70560: POP
// end ;
70561: LD_VAR 0 12
70565: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70566: LD_INT 0
70568: PPUSH
70569: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70570: LD_VAR 0 1
70574: PUSH
70575: LD_INT 1
70577: LESS
70578: PUSH
70579: LD_VAR 0 1
70583: PUSH
70584: LD_INT 3
70586: GREATER
70587: OR
70588: PUSH
70589: LD_VAR 0 5
70593: PPUSH
70594: LD_VAR 0 6
70598: PPUSH
70599: CALL_OW 428
70603: OR
70604: IFFALSE 70608
// exit ;
70606: GO 71336
// uc_side := your_side ;
70608: LD_ADDR_OWVAR 20
70612: PUSH
70613: LD_OWVAR 2
70617: ST_TO_ADDR
// uc_nation := nation ;
70618: LD_ADDR_OWVAR 21
70622: PUSH
70623: LD_VAR 0 1
70627: ST_TO_ADDR
// bc_level = 1 ;
70628: LD_ADDR_OWVAR 43
70632: PUSH
70633: LD_INT 1
70635: ST_TO_ADDR
// case btype of 1 :
70636: LD_VAR 0 2
70640: PUSH
70641: LD_INT 1
70643: DOUBLE
70644: EQUAL
70645: IFTRUE 70649
70647: GO 70660
70649: POP
// bc_type := b_depot ; 2 :
70650: LD_ADDR_OWVAR 42
70654: PUSH
70655: LD_INT 0
70657: ST_TO_ADDR
70658: GO 71280
70660: LD_INT 2
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70668
70666: GO 70679
70668: POP
// bc_type := b_warehouse ; 3 :
70669: LD_ADDR_OWVAR 42
70673: PUSH
70674: LD_INT 1
70676: ST_TO_ADDR
70677: GO 71280
70679: LD_INT 3
70681: DOUBLE
70682: EQUAL
70683: IFTRUE 70687
70685: GO 70698
70687: POP
// bc_type := b_lab ; 4 .. 9 :
70688: LD_ADDR_OWVAR 42
70692: PUSH
70693: LD_INT 6
70695: ST_TO_ADDR
70696: GO 71280
70698: LD_INT 4
70700: DOUBLE
70701: GREATEREQUAL
70702: IFFALSE 70710
70704: LD_INT 9
70706: DOUBLE
70707: LESSEQUAL
70708: IFTRUE 70712
70710: GO 70772
70712: POP
// begin bc_type := b_lab_half ;
70713: LD_ADDR_OWVAR 42
70717: PUSH
70718: LD_INT 7
70720: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70721: LD_ADDR_OWVAR 44
70725: PUSH
70726: LD_INT 10
70728: PUSH
70729: LD_INT 11
70731: PUSH
70732: LD_INT 12
70734: PUSH
70735: LD_INT 15
70737: PUSH
70738: LD_INT 14
70740: PUSH
70741: LD_INT 13
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_INT 3
70759: MINUS
70760: ARRAY
70761: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70762: LD_ADDR_OWVAR 45
70766: PUSH
70767: LD_INT 9
70769: ST_TO_ADDR
// end ; 10 .. 13 :
70770: GO 71280
70772: LD_INT 10
70774: DOUBLE
70775: GREATEREQUAL
70776: IFFALSE 70784
70778: LD_INT 13
70780: DOUBLE
70781: LESSEQUAL
70782: IFTRUE 70786
70784: GO 70863
70786: POP
// begin bc_type := b_lab_full ;
70787: LD_ADDR_OWVAR 42
70791: PUSH
70792: LD_INT 8
70794: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70795: LD_ADDR_OWVAR 44
70799: PUSH
70800: LD_INT 10
70802: PUSH
70803: LD_INT 12
70805: PUSH
70806: LD_INT 14
70808: PUSH
70809: LD_INT 13
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: PUSH
70818: LD_VAR 0 2
70822: PUSH
70823: LD_INT 9
70825: MINUS
70826: ARRAY
70827: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70828: LD_ADDR_OWVAR 45
70832: PUSH
70833: LD_INT 11
70835: PUSH
70836: LD_INT 15
70838: PUSH
70839: LD_INT 12
70841: PUSH
70842: LD_INT 15
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: PUSH
70851: LD_VAR 0 2
70855: PUSH
70856: LD_INT 9
70858: MINUS
70859: ARRAY
70860: ST_TO_ADDR
// end ; 14 :
70861: GO 71280
70863: LD_INT 14
70865: DOUBLE
70866: EQUAL
70867: IFTRUE 70871
70869: GO 70882
70871: POP
// bc_type := b_workshop ; 15 :
70872: LD_ADDR_OWVAR 42
70876: PUSH
70877: LD_INT 2
70879: ST_TO_ADDR
70880: GO 71280
70882: LD_INT 15
70884: DOUBLE
70885: EQUAL
70886: IFTRUE 70890
70888: GO 70901
70890: POP
// bc_type := b_factory ; 16 :
70891: LD_ADDR_OWVAR 42
70895: PUSH
70896: LD_INT 3
70898: ST_TO_ADDR
70899: GO 71280
70901: LD_INT 16
70903: DOUBLE
70904: EQUAL
70905: IFTRUE 70909
70907: GO 70920
70909: POP
// bc_type := b_ext_gun ; 17 :
70910: LD_ADDR_OWVAR 42
70914: PUSH
70915: LD_INT 17
70917: ST_TO_ADDR
70918: GO 71280
70920: LD_INT 17
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70928
70926: GO 70956
70928: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70929: LD_ADDR_OWVAR 42
70933: PUSH
70934: LD_INT 19
70936: PUSH
70937: LD_INT 23
70939: PUSH
70940: LD_INT 19
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: LIST
70947: PUSH
70948: LD_VAR 0 1
70952: ARRAY
70953: ST_TO_ADDR
70954: GO 71280
70956: LD_INT 18
70958: DOUBLE
70959: EQUAL
70960: IFTRUE 70964
70962: GO 70975
70964: POP
// bc_type := b_ext_radar ; 19 :
70965: LD_ADDR_OWVAR 42
70969: PUSH
70970: LD_INT 20
70972: ST_TO_ADDR
70973: GO 71280
70975: LD_INT 19
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 70983
70981: GO 70994
70983: POP
// bc_type := b_ext_radio ; 20 :
70984: LD_ADDR_OWVAR 42
70988: PUSH
70989: LD_INT 22
70991: ST_TO_ADDR
70992: GO 71280
70994: LD_INT 20
70996: DOUBLE
70997: EQUAL
70998: IFTRUE 71002
71000: GO 71013
71002: POP
// bc_type := b_ext_siberium ; 21 :
71003: LD_ADDR_OWVAR 42
71007: PUSH
71008: LD_INT 21
71010: ST_TO_ADDR
71011: GO 71280
71013: LD_INT 21
71015: DOUBLE
71016: EQUAL
71017: IFTRUE 71021
71019: GO 71032
71021: POP
// bc_type := b_ext_computer ; 22 :
71022: LD_ADDR_OWVAR 42
71026: PUSH
71027: LD_INT 24
71029: ST_TO_ADDR
71030: GO 71280
71032: LD_INT 22
71034: DOUBLE
71035: EQUAL
71036: IFTRUE 71040
71038: GO 71051
71040: POP
// bc_type := b_ext_track ; 23 :
71041: LD_ADDR_OWVAR 42
71045: PUSH
71046: LD_INT 16
71048: ST_TO_ADDR
71049: GO 71280
71051: LD_INT 23
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71059
71057: GO 71070
71059: POP
// bc_type := b_ext_laser ; 24 :
71060: LD_ADDR_OWVAR 42
71064: PUSH
71065: LD_INT 25
71067: ST_TO_ADDR
71068: GO 71280
71070: LD_INT 24
71072: DOUBLE
71073: EQUAL
71074: IFTRUE 71078
71076: GO 71089
71078: POP
// bc_type := b_control_tower ; 25 :
71079: LD_ADDR_OWVAR 42
71083: PUSH
71084: LD_INT 36
71086: ST_TO_ADDR
71087: GO 71280
71089: LD_INT 25
71091: DOUBLE
71092: EQUAL
71093: IFTRUE 71097
71095: GO 71108
71097: POP
// bc_type := b_breastwork ; 26 :
71098: LD_ADDR_OWVAR 42
71102: PUSH
71103: LD_INT 31
71105: ST_TO_ADDR
71106: GO 71280
71108: LD_INT 26
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71116
71114: GO 71127
71116: POP
// bc_type := b_bunker ; 27 :
71117: LD_ADDR_OWVAR 42
71121: PUSH
71122: LD_INT 32
71124: ST_TO_ADDR
71125: GO 71280
71127: LD_INT 27
71129: DOUBLE
71130: EQUAL
71131: IFTRUE 71135
71133: GO 71146
71135: POP
// bc_type := b_turret ; 28 :
71136: LD_ADDR_OWVAR 42
71140: PUSH
71141: LD_INT 33
71143: ST_TO_ADDR
71144: GO 71280
71146: LD_INT 28
71148: DOUBLE
71149: EQUAL
71150: IFTRUE 71154
71152: GO 71165
71154: POP
// bc_type := b_armoury ; 29 :
71155: LD_ADDR_OWVAR 42
71159: PUSH
71160: LD_INT 4
71162: ST_TO_ADDR
71163: GO 71280
71165: LD_INT 29
71167: DOUBLE
71168: EQUAL
71169: IFTRUE 71173
71171: GO 71184
71173: POP
// bc_type := b_barracks ; 30 :
71174: LD_ADDR_OWVAR 42
71178: PUSH
71179: LD_INT 5
71181: ST_TO_ADDR
71182: GO 71280
71184: LD_INT 30
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71192
71190: GO 71203
71192: POP
// bc_type := b_solar_power ; 31 :
71193: LD_ADDR_OWVAR 42
71197: PUSH
71198: LD_INT 27
71200: ST_TO_ADDR
71201: GO 71280
71203: LD_INT 31
71205: DOUBLE
71206: EQUAL
71207: IFTRUE 71211
71209: GO 71222
71211: POP
// bc_type := b_oil_power ; 32 :
71212: LD_ADDR_OWVAR 42
71216: PUSH
71217: LD_INT 26
71219: ST_TO_ADDR
71220: GO 71280
71222: LD_INT 32
71224: DOUBLE
71225: EQUAL
71226: IFTRUE 71230
71228: GO 71241
71230: POP
// bc_type := b_siberite_power ; 33 :
71231: LD_ADDR_OWVAR 42
71235: PUSH
71236: LD_INT 28
71238: ST_TO_ADDR
71239: GO 71280
71241: LD_INT 33
71243: DOUBLE
71244: EQUAL
71245: IFTRUE 71249
71247: GO 71260
71249: POP
// bc_type := b_oil_mine ; 34 :
71250: LD_ADDR_OWVAR 42
71254: PUSH
71255: LD_INT 29
71257: ST_TO_ADDR
71258: GO 71280
71260: LD_INT 34
71262: DOUBLE
71263: EQUAL
71264: IFTRUE 71268
71266: GO 71279
71268: POP
// bc_type := b_siberite_mine ; end ;
71269: LD_ADDR_OWVAR 42
71273: PUSH
71274: LD_INT 30
71276: ST_TO_ADDR
71277: GO 71280
71279: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71280: LD_ADDR_VAR 0 8
71284: PUSH
71285: LD_VAR 0 5
71289: PPUSH
71290: LD_VAR 0 6
71294: PPUSH
71295: LD_VAR 0 3
71299: PPUSH
71300: CALL_OW 47
71304: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71305: LD_OWVAR 42
71309: PUSH
71310: LD_INT 32
71312: PUSH
71313: LD_INT 33
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: IN
71320: IFFALSE 71336
// PlaceWeaponTurret ( b , weapon ) ;
71322: LD_VAR 0 8
71326: PPUSH
71327: LD_VAR 0 4
71331: PPUSH
71332: CALL_OW 431
// end ;
71336: LD_VAR 0 7
71340: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71341: LD_INT 0
71343: PPUSH
71344: PPUSH
71345: PPUSH
71346: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71347: LD_ADDR_VAR 0 4
71351: PUSH
71352: LD_INT 22
71354: PUSH
71355: LD_OWVAR 2
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 2
71366: PUSH
71367: LD_INT 30
71369: PUSH
71370: LD_INT 0
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 30
71379: PUSH
71380: LD_INT 1
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: EMPTY
71388: LIST
71389: LIST
71390: LIST
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PPUSH
71396: CALL_OW 69
71400: ST_TO_ADDR
// if not tmp then
71401: LD_VAR 0 4
71405: NOT
71406: IFFALSE 71410
// exit ;
71408: GO 71469
// for i in tmp do
71410: LD_ADDR_VAR 0 2
71414: PUSH
71415: LD_VAR 0 4
71419: PUSH
71420: FOR_IN
71421: IFFALSE 71467
// for j = 1 to 3 do
71423: LD_ADDR_VAR 0 3
71427: PUSH
71428: DOUBLE
71429: LD_INT 1
71431: DEC
71432: ST_TO_ADDR
71433: LD_INT 3
71435: PUSH
71436: FOR_TO
71437: IFFALSE 71463
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71439: LD_VAR 0 2
71443: PPUSH
71444: CALL_OW 274
71448: PPUSH
71449: LD_VAR 0 3
71453: PPUSH
71454: LD_INT 99999
71456: PPUSH
71457: CALL_OW 277
71461: GO 71436
71463: POP
71464: POP
71465: GO 71420
71467: POP
71468: POP
// end ;
71469: LD_VAR 0 1
71473: RET
// export function hHackSetLevel10 ; var i , j ; begin
71474: LD_INT 0
71476: PPUSH
71477: PPUSH
71478: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71479: LD_ADDR_VAR 0 2
71483: PUSH
71484: LD_INT 21
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PPUSH
71494: CALL_OW 69
71498: PUSH
71499: FOR_IN
71500: IFFALSE 71552
// if IsSelected ( i ) then
71502: LD_VAR 0 2
71506: PPUSH
71507: CALL_OW 306
71511: IFFALSE 71550
// begin for j := 1 to 4 do
71513: LD_ADDR_VAR 0 3
71517: PUSH
71518: DOUBLE
71519: LD_INT 1
71521: DEC
71522: ST_TO_ADDR
71523: LD_INT 4
71525: PUSH
71526: FOR_TO
71527: IFFALSE 71548
// SetSkill ( i , j , 10 ) ;
71529: LD_VAR 0 2
71533: PPUSH
71534: LD_VAR 0 3
71538: PPUSH
71539: LD_INT 10
71541: PPUSH
71542: CALL_OW 237
71546: GO 71526
71548: POP
71549: POP
// end ;
71550: GO 71499
71552: POP
71553: POP
// end ;
71554: LD_VAR 0 1
71558: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
71563: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71564: LD_ADDR_VAR 0 2
71568: PUSH
71569: LD_INT 22
71571: PUSH
71572: LD_OWVAR 2
71576: PUSH
71577: EMPTY
71578: LIST
71579: LIST
71580: PUSH
71581: LD_INT 21
71583: PUSH
71584: LD_INT 1
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PPUSH
71595: CALL_OW 69
71599: PUSH
71600: FOR_IN
71601: IFFALSE 71642
// begin for j := 1 to 4 do
71603: LD_ADDR_VAR 0 3
71607: PUSH
71608: DOUBLE
71609: LD_INT 1
71611: DEC
71612: ST_TO_ADDR
71613: LD_INT 4
71615: PUSH
71616: FOR_TO
71617: IFFALSE 71638
// SetSkill ( i , j , 10 ) ;
71619: LD_VAR 0 2
71623: PPUSH
71624: LD_VAR 0 3
71628: PPUSH
71629: LD_INT 10
71631: PPUSH
71632: CALL_OW 237
71636: GO 71616
71638: POP
71639: POP
// end ;
71640: GO 71600
71642: POP
71643: POP
// end ;
71644: LD_VAR 0 1
71648: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71649: LD_INT 0
71651: PPUSH
// uc_side := your_side ;
71652: LD_ADDR_OWVAR 20
71656: PUSH
71657: LD_OWVAR 2
71661: ST_TO_ADDR
// uc_nation := nation ;
71662: LD_ADDR_OWVAR 21
71666: PUSH
71667: LD_VAR 0 1
71671: ST_TO_ADDR
// InitHc ;
71672: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71676: LD_INT 0
71678: PPUSH
71679: LD_VAR 0 2
71683: PPUSH
71684: LD_VAR 0 3
71688: PPUSH
71689: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71693: LD_VAR 0 4
71697: PPUSH
71698: LD_VAR 0 5
71702: PPUSH
71703: CALL_OW 428
71707: PUSH
71708: LD_INT 0
71710: EQUAL
71711: IFFALSE 71735
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71713: CALL_OW 44
71717: PPUSH
71718: LD_VAR 0 4
71722: PPUSH
71723: LD_VAR 0 5
71727: PPUSH
71728: LD_INT 1
71730: PPUSH
71731: CALL_OW 48
// end ;
71735: LD_VAR 0 6
71739: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71740: LD_INT 0
71742: PPUSH
71743: PPUSH
// uc_side := your_side ;
71744: LD_ADDR_OWVAR 20
71748: PUSH
71749: LD_OWVAR 2
71753: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71754: LD_VAR 0 1
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: LD_INT 2
71764: PUSH
71765: LD_INT 3
71767: PUSH
71768: LD_INT 4
71770: PUSH
71771: LD_INT 5
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: IN
71781: IFFALSE 71793
// uc_nation := nation_american else
71783: LD_ADDR_OWVAR 21
71787: PUSH
71788: LD_INT 1
71790: ST_TO_ADDR
71791: GO 71836
// if chassis in [ 11 , 12 , 13 , 14 ] then
71793: LD_VAR 0 1
71797: PUSH
71798: LD_INT 11
71800: PUSH
71801: LD_INT 12
71803: PUSH
71804: LD_INT 13
71806: PUSH
71807: LD_INT 14
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: IN
71816: IFFALSE 71828
// uc_nation := nation_arabian else
71818: LD_ADDR_OWVAR 21
71822: PUSH
71823: LD_INT 2
71825: ST_TO_ADDR
71826: GO 71836
// uc_nation := nation_russian ;
71828: LD_ADDR_OWVAR 21
71832: PUSH
71833: LD_INT 3
71835: ST_TO_ADDR
// vc_chassis := chassis ;
71836: LD_ADDR_OWVAR 37
71840: PUSH
71841: LD_VAR 0 1
71845: ST_TO_ADDR
// vc_engine := engine ;
71846: LD_ADDR_OWVAR 39
71850: PUSH
71851: LD_VAR 0 2
71855: ST_TO_ADDR
// vc_control := control ;
71856: LD_ADDR_OWVAR 38
71860: PUSH
71861: LD_VAR 0 3
71865: ST_TO_ADDR
// vc_weapon := weapon ;
71866: LD_ADDR_OWVAR 40
71870: PUSH
71871: LD_VAR 0 4
71875: ST_TO_ADDR
// un := CreateVehicle ;
71876: LD_ADDR_VAR 0 8
71880: PUSH
71881: CALL_OW 45
71885: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71886: LD_VAR 0 8
71890: PPUSH
71891: LD_INT 0
71893: PPUSH
71894: LD_INT 5
71896: PPUSH
71897: CALL_OW 12
71901: PPUSH
71902: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71906: LD_VAR 0 8
71910: PPUSH
71911: LD_VAR 0 5
71915: PPUSH
71916: LD_VAR 0 6
71920: PPUSH
71921: LD_INT 1
71923: PPUSH
71924: CALL_OW 48
// end ;
71928: LD_VAR 0 7
71932: RET
// export hInvincible ; every 1 do
71933: GO 71935
71935: DISABLE
// hInvincible := [ ] ;
71936: LD_ADDR_EXP 103
71940: PUSH
71941: EMPTY
71942: ST_TO_ADDR
71943: END
// every 10 do var i ;
71944: GO 71946
71946: DISABLE
71947: LD_INT 0
71949: PPUSH
// begin enable ;
71950: ENABLE
// if not hInvincible then
71951: LD_EXP 103
71955: NOT
71956: IFFALSE 71960
// exit ;
71958: GO 72004
// for i in hInvincible do
71960: LD_ADDR_VAR 0 1
71964: PUSH
71965: LD_EXP 103
71969: PUSH
71970: FOR_IN
71971: IFFALSE 72002
// if GetLives ( i ) < 1000 then
71973: LD_VAR 0 1
71977: PPUSH
71978: CALL_OW 256
71982: PUSH
71983: LD_INT 1000
71985: LESS
71986: IFFALSE 72000
// SetLives ( i , 1000 ) ;
71988: LD_VAR 0 1
71992: PPUSH
71993: LD_INT 1000
71995: PPUSH
71996: CALL_OW 234
72000: GO 71970
72002: POP
72003: POP
// end ;
72004: PPOPN 1
72006: END
// export function hHackInvincible ; var i ; begin
72007: LD_INT 0
72009: PPUSH
72010: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72011: LD_ADDR_VAR 0 2
72015: PUSH
72016: LD_INT 2
72018: PUSH
72019: LD_INT 21
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 21
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: LIST
72043: PPUSH
72044: CALL_OW 69
72048: PUSH
72049: FOR_IN
72050: IFFALSE 72111
// if IsSelected ( i ) then
72052: LD_VAR 0 2
72056: PPUSH
72057: CALL_OW 306
72061: IFFALSE 72109
// begin if i in hInvincible then
72063: LD_VAR 0 2
72067: PUSH
72068: LD_EXP 103
72072: IN
72073: IFFALSE 72093
// hInvincible := hInvincible diff i else
72075: LD_ADDR_EXP 103
72079: PUSH
72080: LD_EXP 103
72084: PUSH
72085: LD_VAR 0 2
72089: DIFF
72090: ST_TO_ADDR
72091: GO 72109
// hInvincible := hInvincible union i ;
72093: LD_ADDR_EXP 103
72097: PUSH
72098: LD_EXP 103
72102: PUSH
72103: LD_VAR 0 2
72107: UNION
72108: ST_TO_ADDR
// end ;
72109: GO 72049
72111: POP
72112: POP
// end ;
72113: LD_VAR 0 1
72117: RET
// export function hHackInvisible ; var i , j ; begin
72118: LD_INT 0
72120: PPUSH
72121: PPUSH
72122: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72123: LD_ADDR_VAR 0 2
72127: PUSH
72128: LD_INT 21
72130: PUSH
72131: LD_INT 1
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PPUSH
72138: CALL_OW 69
72142: PUSH
72143: FOR_IN
72144: IFFALSE 72168
// if IsSelected ( i ) then
72146: LD_VAR 0 2
72150: PPUSH
72151: CALL_OW 306
72155: IFFALSE 72166
// ComForceInvisible ( i ) ;
72157: LD_VAR 0 2
72161: PPUSH
72162: CALL_OW 496
72166: GO 72143
72168: POP
72169: POP
// end ;
72170: LD_VAR 0 1
72174: RET
// export function hHackChangeYourSide ; begin
72175: LD_INT 0
72177: PPUSH
// if your_side = 8 then
72178: LD_OWVAR 2
72182: PUSH
72183: LD_INT 8
72185: EQUAL
72186: IFFALSE 72198
// your_side := 0 else
72188: LD_ADDR_OWVAR 2
72192: PUSH
72193: LD_INT 0
72195: ST_TO_ADDR
72196: GO 72212
// your_side := your_side + 1 ;
72198: LD_ADDR_OWVAR 2
72202: PUSH
72203: LD_OWVAR 2
72207: PUSH
72208: LD_INT 1
72210: PLUS
72211: ST_TO_ADDR
// end ;
72212: LD_VAR 0 1
72216: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72217: LD_INT 0
72219: PPUSH
72220: PPUSH
72221: PPUSH
// for i in all_units do
72222: LD_ADDR_VAR 0 2
72226: PUSH
72227: LD_OWVAR 3
72231: PUSH
72232: FOR_IN
72233: IFFALSE 72311
// if IsSelected ( i ) then
72235: LD_VAR 0 2
72239: PPUSH
72240: CALL_OW 306
72244: IFFALSE 72309
// begin j := GetSide ( i ) ;
72246: LD_ADDR_VAR 0 3
72250: PUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: CALL_OW 255
72260: ST_TO_ADDR
// if j = 8 then
72261: LD_VAR 0 3
72265: PUSH
72266: LD_INT 8
72268: EQUAL
72269: IFFALSE 72281
// j := 0 else
72271: LD_ADDR_VAR 0 3
72275: PUSH
72276: LD_INT 0
72278: ST_TO_ADDR
72279: GO 72295
// j := j + 1 ;
72281: LD_ADDR_VAR 0 3
72285: PUSH
72286: LD_VAR 0 3
72290: PUSH
72291: LD_INT 1
72293: PLUS
72294: ST_TO_ADDR
// SetSide ( i , j ) ;
72295: LD_VAR 0 2
72299: PPUSH
72300: LD_VAR 0 3
72304: PPUSH
72305: CALL_OW 235
// end ;
72309: GO 72232
72311: POP
72312: POP
// end ;
72313: LD_VAR 0 1
72317: RET
// export function hHackFog ; begin
72318: LD_INT 0
72320: PPUSH
// FogOff ( true ) ;
72321: LD_INT 1
72323: PPUSH
72324: CALL_OW 344
// end ;
72328: LD_VAR 0 1
72332: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72333: LD_INT 0
72335: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72336: LD_VAR 0 1
72340: PPUSH
72341: LD_VAR 0 2
72345: PPUSH
72346: LD_VAR 0 3
72350: PPUSH
72351: LD_INT 1
72353: PPUSH
72354: LD_INT 1
72356: PPUSH
72357: CALL_OW 483
// CenterOnXY ( x , y ) ;
72361: LD_VAR 0 2
72365: PPUSH
72366: LD_VAR 0 3
72370: PPUSH
72371: CALL_OW 84
// end ;
72375: LD_VAR 0 4
72379: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72380: LD_INT 0
72382: PPUSH
72383: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72384: LD_VAR 0 1
72388: NOT
72389: PUSH
72390: LD_VAR 0 2
72394: PPUSH
72395: LD_VAR 0 3
72399: PPUSH
72400: CALL_OW 488
72404: NOT
72405: OR
72406: PUSH
72407: LD_VAR 0 1
72411: PPUSH
72412: CALL_OW 266
72416: PUSH
72417: LD_INT 3
72419: NONEQUAL
72420: PUSH
72421: LD_VAR 0 1
72425: PPUSH
72426: CALL_OW 247
72430: PUSH
72431: LD_INT 1
72433: EQUAL
72434: NOT
72435: AND
72436: OR
72437: IFFALSE 72441
// exit ;
72439: GO 72590
// if GetType ( factory ) = unit_human then
72441: LD_VAR 0 1
72445: PPUSH
72446: CALL_OW 247
72450: PUSH
72451: LD_INT 1
72453: EQUAL
72454: IFFALSE 72471
// factory := IsInUnit ( factory ) ;
72456: LD_ADDR_VAR 0 1
72460: PUSH
72461: LD_VAR 0 1
72465: PPUSH
72466: CALL_OW 310
72470: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72471: LD_VAR 0 1
72475: PPUSH
72476: CALL_OW 266
72480: PUSH
72481: LD_INT 3
72483: NONEQUAL
72484: IFFALSE 72488
// exit ;
72486: GO 72590
// if HexInfo ( x , y ) = factory then
72488: LD_VAR 0 2
72492: PPUSH
72493: LD_VAR 0 3
72497: PPUSH
72498: CALL_OW 428
72502: PUSH
72503: LD_VAR 0 1
72507: EQUAL
72508: IFFALSE 72535
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72510: LD_ADDR_EXP 104
72514: PUSH
72515: LD_EXP 104
72519: PPUSH
72520: LD_VAR 0 1
72524: PPUSH
72525: LD_INT 0
72527: PPUSH
72528: CALL_OW 1
72532: ST_TO_ADDR
72533: GO 72586
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72535: LD_ADDR_EXP 104
72539: PUSH
72540: LD_EXP 104
72544: PPUSH
72545: LD_VAR 0 1
72549: PPUSH
72550: LD_VAR 0 1
72554: PPUSH
72555: CALL_OW 255
72559: PUSH
72560: LD_VAR 0 1
72564: PUSH
72565: LD_VAR 0 2
72569: PUSH
72570: LD_VAR 0 3
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: PPUSH
72581: CALL_OW 1
72585: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72586: CALL 72595 0 0
// end ;
72590: LD_VAR 0 4
72594: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72595: LD_INT 0
72597: PPUSH
72598: PPUSH
72599: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72600: LD_STRING resetFactoryWaypoint();
72602: PPUSH
72603: CALL_OW 559
// if factoryWaypoints then
72607: LD_EXP 104
72611: IFFALSE 72737
// begin list := PrepareArray ( factoryWaypoints ) ;
72613: LD_ADDR_VAR 0 3
72617: PUSH
72618: LD_EXP 104
72622: PPUSH
72623: CALL 56550 0 1
72627: ST_TO_ADDR
// for i := 1 to list do
72628: LD_ADDR_VAR 0 2
72632: PUSH
72633: DOUBLE
72634: LD_INT 1
72636: DEC
72637: ST_TO_ADDR
72638: LD_VAR 0 3
72642: PUSH
72643: FOR_TO
72644: IFFALSE 72735
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72646: LD_STRING setFactoryWaypointXY(
72648: PUSH
72649: LD_VAR 0 3
72653: PUSH
72654: LD_VAR 0 2
72658: ARRAY
72659: PUSH
72660: LD_INT 1
72662: ARRAY
72663: STR
72664: PUSH
72665: LD_STRING ,
72667: STR
72668: PUSH
72669: LD_VAR 0 3
72673: PUSH
72674: LD_VAR 0 2
72678: ARRAY
72679: PUSH
72680: LD_INT 2
72682: ARRAY
72683: STR
72684: PUSH
72685: LD_STRING ,
72687: STR
72688: PUSH
72689: LD_VAR 0 3
72693: PUSH
72694: LD_VAR 0 2
72698: ARRAY
72699: PUSH
72700: LD_INT 3
72702: ARRAY
72703: STR
72704: PUSH
72705: LD_STRING ,
72707: STR
72708: PUSH
72709: LD_VAR 0 3
72713: PUSH
72714: LD_VAR 0 2
72718: ARRAY
72719: PUSH
72720: LD_INT 4
72722: ARRAY
72723: STR
72724: PUSH
72725: LD_STRING )
72727: STR
72728: PPUSH
72729: CALL_OW 559
72733: GO 72643
72735: POP
72736: POP
// end ; end ;
72737: LD_VAR 0 1
72741: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72742: LD_INT 0
72744: PPUSH
// if HexInfo ( x , y ) = warehouse then
72745: LD_VAR 0 2
72749: PPUSH
72750: LD_VAR 0 3
72754: PPUSH
72755: CALL_OW 428
72759: PUSH
72760: LD_VAR 0 1
72764: EQUAL
72765: IFFALSE 72792
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72767: LD_ADDR_EXP 105
72771: PUSH
72772: LD_EXP 105
72776: PPUSH
72777: LD_VAR 0 1
72781: PPUSH
72782: LD_INT 0
72784: PPUSH
72785: CALL_OW 1
72789: ST_TO_ADDR
72790: GO 72843
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72792: LD_ADDR_EXP 105
72796: PUSH
72797: LD_EXP 105
72801: PPUSH
72802: LD_VAR 0 1
72806: PPUSH
72807: LD_VAR 0 1
72811: PPUSH
72812: CALL_OW 255
72816: PUSH
72817: LD_VAR 0 1
72821: PUSH
72822: LD_VAR 0 2
72826: PUSH
72827: LD_VAR 0 3
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: PPUSH
72838: CALL_OW 1
72842: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72843: CALL 72852 0 0
// end ;
72847: LD_VAR 0 4
72851: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
72856: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72857: LD_STRING resetWarehouseGatheringPoints();
72859: PPUSH
72860: CALL_OW 559
// if warehouseGatheringPoints then
72864: LD_EXP 105
72868: IFFALSE 72994
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72870: LD_ADDR_VAR 0 3
72874: PUSH
72875: LD_EXP 105
72879: PPUSH
72880: CALL 56550 0 1
72884: ST_TO_ADDR
// for i := 1 to list do
72885: LD_ADDR_VAR 0 2
72889: PUSH
72890: DOUBLE
72891: LD_INT 1
72893: DEC
72894: ST_TO_ADDR
72895: LD_VAR 0 3
72899: PUSH
72900: FOR_TO
72901: IFFALSE 72992
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72903: LD_STRING setWarehouseGatheringPointXY(
72905: PUSH
72906: LD_VAR 0 3
72910: PUSH
72911: LD_VAR 0 2
72915: ARRAY
72916: PUSH
72917: LD_INT 1
72919: ARRAY
72920: STR
72921: PUSH
72922: LD_STRING ,
72924: STR
72925: PUSH
72926: LD_VAR 0 3
72930: PUSH
72931: LD_VAR 0 2
72935: ARRAY
72936: PUSH
72937: LD_INT 2
72939: ARRAY
72940: STR
72941: PUSH
72942: LD_STRING ,
72944: STR
72945: PUSH
72946: LD_VAR 0 3
72950: PUSH
72951: LD_VAR 0 2
72955: ARRAY
72956: PUSH
72957: LD_INT 3
72959: ARRAY
72960: STR
72961: PUSH
72962: LD_STRING ,
72964: STR
72965: PUSH
72966: LD_VAR 0 3
72970: PUSH
72971: LD_VAR 0 2
72975: ARRAY
72976: PUSH
72977: LD_INT 4
72979: ARRAY
72980: STR
72981: PUSH
72982: LD_STRING )
72984: STR
72985: PPUSH
72986: CALL_OW 559
72990: GO 72900
72992: POP
72993: POP
// end ; end ;
72994: LD_VAR 0 1
72998: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72999: LD_EXP 105
73003: IFFALSE 73688
73005: GO 73007
73007: DISABLE
73008: LD_INT 0
73010: PPUSH
73011: PPUSH
73012: PPUSH
73013: PPUSH
73014: PPUSH
73015: PPUSH
73016: PPUSH
73017: PPUSH
73018: PPUSH
// begin enable ;
73019: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73020: LD_ADDR_VAR 0 3
73024: PUSH
73025: LD_EXP 105
73029: PPUSH
73030: CALL 56550 0 1
73034: ST_TO_ADDR
// if not list then
73035: LD_VAR 0 3
73039: NOT
73040: IFFALSE 73044
// exit ;
73042: GO 73688
// for i := 1 to list do
73044: LD_ADDR_VAR 0 1
73048: PUSH
73049: DOUBLE
73050: LD_INT 1
73052: DEC
73053: ST_TO_ADDR
73054: LD_VAR 0 3
73058: PUSH
73059: FOR_TO
73060: IFFALSE 73686
// begin depot := list [ i ] [ 2 ] ;
73062: LD_ADDR_VAR 0 8
73066: PUSH
73067: LD_VAR 0 3
73071: PUSH
73072: LD_VAR 0 1
73076: ARRAY
73077: PUSH
73078: LD_INT 2
73080: ARRAY
73081: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73082: LD_ADDR_VAR 0 5
73086: PUSH
73087: LD_VAR 0 3
73091: PUSH
73092: LD_VAR 0 1
73096: ARRAY
73097: PUSH
73098: LD_INT 1
73100: ARRAY
73101: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73102: LD_VAR 0 8
73106: PPUSH
73107: CALL_OW 301
73111: PUSH
73112: LD_VAR 0 5
73116: PUSH
73117: LD_VAR 0 8
73121: PPUSH
73122: CALL_OW 255
73126: NONEQUAL
73127: OR
73128: IFFALSE 73157
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73130: LD_ADDR_EXP 105
73134: PUSH
73135: LD_EXP 105
73139: PPUSH
73140: LD_VAR 0 8
73144: PPUSH
73145: LD_INT 0
73147: PPUSH
73148: CALL_OW 1
73152: ST_TO_ADDR
// exit ;
73153: POP
73154: POP
73155: GO 73688
// end ; x := list [ i ] [ 3 ] ;
73157: LD_ADDR_VAR 0 6
73161: PUSH
73162: LD_VAR 0 3
73166: PUSH
73167: LD_VAR 0 1
73171: ARRAY
73172: PUSH
73173: LD_INT 3
73175: ARRAY
73176: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73177: LD_ADDR_VAR 0 7
73181: PUSH
73182: LD_VAR 0 3
73186: PUSH
73187: LD_VAR 0 1
73191: ARRAY
73192: PUSH
73193: LD_INT 4
73195: ARRAY
73196: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73197: LD_ADDR_VAR 0 9
73201: PUSH
73202: LD_VAR 0 6
73206: PPUSH
73207: LD_VAR 0 7
73211: PPUSH
73212: LD_INT 16
73214: PPUSH
73215: CALL 55138 0 3
73219: ST_TO_ADDR
// if not cratesNearbyPoint then
73220: LD_VAR 0 9
73224: NOT
73225: IFFALSE 73231
// exit ;
73227: POP
73228: POP
73229: GO 73688
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73231: LD_ADDR_VAR 0 4
73235: PUSH
73236: LD_INT 22
73238: PUSH
73239: LD_VAR 0 5
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: LD_INT 60
73253: PUSH
73254: EMPTY
73255: LIST
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 91
73263: PUSH
73264: LD_VAR 0 8
73268: PUSH
73269: LD_INT 6
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: LIST
73276: PUSH
73277: LD_INT 2
73279: PUSH
73280: LD_INT 25
73282: PUSH
73283: LD_INT 2
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 25
73292: PUSH
73293: LD_INT 16
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: LIST
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: PPUSH
73311: CALL_OW 69
73315: PUSH
73316: LD_VAR 0 8
73320: PPUSH
73321: CALL_OW 313
73325: PPUSH
73326: LD_INT 3
73328: PUSH
73329: LD_INT 60
73331: PUSH
73332: EMPTY
73333: LIST
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 2
73341: PUSH
73342: LD_INT 25
73344: PUSH
73345: LD_INT 2
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 25
73354: PUSH
73355: LD_INT 16
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: LIST
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PPUSH
73371: CALL_OW 72
73375: UNION
73376: ST_TO_ADDR
// if tmp then
73377: LD_VAR 0 4
73381: IFFALSE 73461
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73383: LD_ADDR_VAR 0 4
73387: PUSH
73388: LD_VAR 0 4
73392: PPUSH
73393: LD_INT 3
73395: PPUSH
73396: CALL 53107 0 2
73400: ST_TO_ADDR
// for j in tmp do
73401: LD_ADDR_VAR 0 2
73405: PUSH
73406: LD_VAR 0 4
73410: PUSH
73411: FOR_IN
73412: IFFALSE 73455
// begin if IsInUnit ( j ) then
73414: LD_VAR 0 2
73418: PPUSH
73419: CALL_OW 310
73423: IFFALSE 73434
// ComExit ( j ) ;
73425: LD_VAR 0 2
73429: PPUSH
73430: CALL 53190 0 1
// AddComCollect ( j , x , y ) ;
73434: LD_VAR 0 2
73438: PPUSH
73439: LD_VAR 0 6
73443: PPUSH
73444: LD_VAR 0 7
73448: PPUSH
73449: CALL_OW 177
// end ;
73453: GO 73411
73455: POP
73456: POP
// exit ;
73457: POP
73458: POP
73459: GO 73688
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73461: LD_ADDR_VAR 0 4
73465: PUSH
73466: LD_INT 22
73468: PUSH
73469: LD_VAR 0 5
73473: PUSH
73474: EMPTY
73475: LIST
73476: LIST
73477: PUSH
73478: LD_INT 91
73480: PUSH
73481: LD_VAR 0 8
73485: PUSH
73486: LD_INT 8
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 2
73496: PUSH
73497: LD_INT 34
73499: PUSH
73500: LD_INT 12
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 34
73509: PUSH
73510: LD_INT 51
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 34
73519: PUSH
73520: LD_INT 32
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 34
73529: PUSH
73530: LD_INT 89
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: LIST
73541: LIST
73542: LIST
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: LIST
73548: PPUSH
73549: CALL_OW 69
73553: ST_TO_ADDR
// if tmp then
73554: LD_VAR 0 4
73558: IFFALSE 73684
// begin for j in tmp do
73560: LD_ADDR_VAR 0 2
73564: PUSH
73565: LD_VAR 0 4
73569: PUSH
73570: FOR_IN
73571: IFFALSE 73682
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73573: LD_VAR 0 2
73577: PPUSH
73578: CALL_OW 262
73582: PUSH
73583: LD_INT 3
73585: EQUAL
73586: PUSH
73587: LD_VAR 0 2
73591: PPUSH
73592: CALL_OW 261
73596: PUSH
73597: LD_INT 20
73599: GREATER
73600: OR
73601: PUSH
73602: LD_VAR 0 2
73606: PPUSH
73607: CALL_OW 314
73611: NOT
73612: AND
73613: PUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: CALL_OW 263
73623: PUSH
73624: LD_INT 1
73626: NONEQUAL
73627: PUSH
73628: LD_VAR 0 2
73632: PPUSH
73633: CALL_OW 311
73637: OR
73638: AND
73639: IFFALSE 73680
// begin ComCollect ( j , x , y ) ;
73641: LD_VAR 0 2
73645: PPUSH
73646: LD_VAR 0 6
73650: PPUSH
73651: LD_VAR 0 7
73655: PPUSH
73656: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73660: LD_VAR 0 2
73664: PPUSH
73665: LD_VAR 0 8
73669: PPUSH
73670: CALL_OW 172
// exit ;
73674: POP
73675: POP
73676: POP
73677: POP
73678: GO 73688
// end ;
73680: GO 73570
73682: POP
73683: POP
// end ; end ;
73684: GO 73059
73686: POP
73687: POP
// end ; end_of_file
73688: PPOPN 9
73690: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73691: LD_INT 0
73693: PPUSH
73694: PPUSH
73695: PPUSH
73696: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73697: LD_VAR 0 1
73701: PPUSH
73702: CALL_OW 264
73706: PUSH
73707: LD_INT 91
73709: EQUAL
73710: IFFALSE 73782
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73712: LD_INT 68
73714: PPUSH
73715: LD_VAR 0 1
73719: PPUSH
73720: CALL_OW 255
73724: PPUSH
73725: CALL_OW 321
73729: PUSH
73730: LD_INT 2
73732: EQUAL
73733: IFFALSE 73745
// eff := 70 else
73735: LD_ADDR_VAR 0 4
73739: PUSH
73740: LD_INT 70
73742: ST_TO_ADDR
73743: GO 73753
// eff := 30 ;
73745: LD_ADDR_VAR 0 4
73749: PUSH
73750: LD_INT 30
73752: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73753: LD_VAR 0 1
73757: PPUSH
73758: CALL_OW 250
73762: PPUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 251
73772: PPUSH
73773: LD_VAR 0 4
73777: PPUSH
73778: CALL_OW 495
// end ; end ;
73782: LD_VAR 0 2
73786: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73787: LD_INT 0
73789: PPUSH
// end ;
73790: LD_VAR 0 4
73794: RET
// export function SOS_Command ( cmd ) ; begin
73795: LD_INT 0
73797: PPUSH
// end ;
73798: LD_VAR 0 2
73802: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73803: LD_INT 0
73805: PPUSH
// end ;
73806: LD_VAR 0 6
73810: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73811: LD_INT 0
73813: PPUSH
73814: PPUSH
// if not vehicle or not factory then
73815: LD_VAR 0 1
73819: NOT
73820: PUSH
73821: LD_VAR 0 2
73825: NOT
73826: OR
73827: IFFALSE 73831
// exit ;
73829: GO 74062
// if factoryWaypoints >= factory then
73831: LD_EXP 104
73835: PUSH
73836: LD_VAR 0 2
73840: GREATEREQUAL
73841: IFFALSE 74062
// if factoryWaypoints [ factory ] then
73843: LD_EXP 104
73847: PUSH
73848: LD_VAR 0 2
73852: ARRAY
73853: IFFALSE 74062
// begin if GetControl ( vehicle ) = control_manual then
73855: LD_VAR 0 1
73859: PPUSH
73860: CALL_OW 263
73864: PUSH
73865: LD_INT 1
73867: EQUAL
73868: IFFALSE 73949
// begin driver := IsDrivenBy ( vehicle ) ;
73870: LD_ADDR_VAR 0 4
73874: PUSH
73875: LD_VAR 0 1
73879: PPUSH
73880: CALL_OW 311
73884: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73885: LD_VAR 0 4
73889: PPUSH
73890: LD_EXP 104
73894: PUSH
73895: LD_VAR 0 2
73899: ARRAY
73900: PUSH
73901: LD_INT 3
73903: ARRAY
73904: PPUSH
73905: LD_EXP 104
73909: PUSH
73910: LD_VAR 0 2
73914: ARRAY
73915: PUSH
73916: LD_INT 4
73918: ARRAY
73919: PPUSH
73920: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73924: LD_VAR 0 4
73928: PPUSH
73929: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73933: LD_VAR 0 4
73937: PPUSH
73938: LD_VAR 0 2
73942: PPUSH
73943: CALL_OW 180
// end else
73947: GO 74062
// if GetControl ( vehicle ) = control_remote then
73949: LD_VAR 0 1
73953: PPUSH
73954: CALL_OW 263
73958: PUSH
73959: LD_INT 2
73961: EQUAL
73962: IFFALSE 74023
// begin wait ( 0 0$2 ) ;
73964: LD_INT 70
73966: PPUSH
73967: CALL_OW 67
// if Connect ( vehicle ) then
73971: LD_VAR 0 1
73975: PPUSH
73976: CALL 23409 0 1
73980: IFFALSE 74021
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73982: LD_VAR 0 1
73986: PPUSH
73987: LD_EXP 104
73991: PUSH
73992: LD_VAR 0 2
73996: ARRAY
73997: PUSH
73998: LD_INT 3
74000: ARRAY
74001: PPUSH
74002: LD_EXP 104
74006: PUSH
74007: LD_VAR 0 2
74011: ARRAY
74012: PUSH
74013: LD_INT 4
74015: ARRAY
74016: PPUSH
74017: CALL_OW 171
// end else
74021: GO 74062
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74023: LD_VAR 0 1
74027: PPUSH
74028: LD_EXP 104
74032: PUSH
74033: LD_VAR 0 2
74037: ARRAY
74038: PUSH
74039: LD_INT 3
74041: ARRAY
74042: PPUSH
74043: LD_EXP 104
74047: PUSH
74048: LD_VAR 0 2
74052: ARRAY
74053: PUSH
74054: LD_INT 4
74056: ARRAY
74057: PPUSH
74058: CALL_OW 171
// end ; end ;
74062: LD_VAR 0 3
74066: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74067: LD_INT 0
74069: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74070: LD_VAR 0 1
74074: PUSH
74075: LD_INT 250
74077: EQUAL
74078: PUSH
74079: LD_VAR 0 2
74083: PPUSH
74084: CALL_OW 264
74088: PUSH
74089: LD_INT 81
74091: EQUAL
74092: AND
74093: IFFALSE 74114
// MinerPlaceMine ( unit , x , y ) ;
74095: LD_VAR 0 2
74099: PPUSH
74100: LD_VAR 0 4
74104: PPUSH
74105: LD_VAR 0 5
74109: PPUSH
74110: CALL 77104 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74114: LD_VAR 0 1
74118: PUSH
74119: LD_INT 251
74121: EQUAL
74122: PUSH
74123: LD_VAR 0 2
74127: PPUSH
74128: CALL_OW 264
74132: PUSH
74133: LD_INT 81
74135: EQUAL
74136: AND
74137: IFFALSE 74158
// MinerDetonateMine ( unit , x , y ) ;
74139: LD_VAR 0 2
74143: PPUSH
74144: LD_VAR 0 4
74148: PPUSH
74149: LD_VAR 0 5
74153: PPUSH
74154: CALL 77379 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74158: LD_VAR 0 1
74162: PUSH
74163: LD_INT 252
74165: EQUAL
74166: PUSH
74167: LD_VAR 0 2
74171: PPUSH
74172: CALL_OW 264
74176: PUSH
74177: LD_INT 81
74179: EQUAL
74180: AND
74181: IFFALSE 74202
// MinerCreateMinefield ( unit , x , y ) ;
74183: LD_VAR 0 2
74187: PPUSH
74188: LD_VAR 0 4
74192: PPUSH
74193: LD_VAR 0 5
74197: PPUSH
74198: CALL 77796 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74202: LD_VAR 0 1
74206: PUSH
74207: LD_INT 253
74209: EQUAL
74210: PUSH
74211: LD_VAR 0 2
74215: PPUSH
74216: CALL_OW 257
74220: PUSH
74221: LD_INT 5
74223: EQUAL
74224: AND
74225: IFFALSE 74246
// ComBinocular ( unit , x , y ) ;
74227: LD_VAR 0 2
74231: PPUSH
74232: LD_VAR 0 4
74236: PPUSH
74237: LD_VAR 0 5
74241: PPUSH
74242: CALL 78165 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 254
74253: EQUAL
74254: PUSH
74255: LD_VAR 0 2
74259: PPUSH
74260: CALL_OW 264
74264: PUSH
74265: LD_INT 99
74267: EQUAL
74268: AND
74269: PUSH
74270: LD_VAR 0 3
74274: PPUSH
74275: CALL_OW 263
74279: PUSH
74280: LD_INT 3
74282: EQUAL
74283: AND
74284: IFFALSE 74300
// HackDestroyVehicle ( unit , selectedUnit ) ;
74286: LD_VAR 0 2
74290: PPUSH
74291: LD_VAR 0 3
74295: PPUSH
74296: CALL 76468 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74300: LD_VAR 0 1
74304: PUSH
74305: LD_INT 255
74307: EQUAL
74308: PUSH
74309: LD_VAR 0 2
74313: PPUSH
74314: CALL_OW 264
74318: PUSH
74319: LD_INT 14
74321: PUSH
74322: LD_INT 53
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: IN
74329: AND
74330: PUSH
74331: LD_VAR 0 4
74335: PPUSH
74336: LD_VAR 0 5
74340: PPUSH
74341: CALL_OW 488
74345: AND
74346: IFFALSE 74370
// CutTreeXYR ( unit , x , y , 12 ) ;
74348: LD_VAR 0 2
74352: PPUSH
74353: LD_VAR 0 4
74357: PPUSH
74358: LD_VAR 0 5
74362: PPUSH
74363: LD_INT 12
74365: PPUSH
74366: CALL 74465 0 4
// if cmd = 256 then
74370: LD_VAR 0 1
74374: PUSH
74375: LD_INT 256
74377: EQUAL
74378: IFFALSE 74399
// SetFactoryWaypoint ( unit , x , y ) ;
74380: LD_VAR 0 2
74384: PPUSH
74385: LD_VAR 0 4
74389: PPUSH
74390: LD_VAR 0 5
74394: PPUSH
74395: CALL 72380 0 3
// if cmd = 257 then
74399: LD_VAR 0 1
74403: PUSH
74404: LD_INT 257
74406: EQUAL
74407: IFFALSE 74428
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74409: LD_VAR 0 2
74413: PPUSH
74414: LD_VAR 0 4
74418: PPUSH
74419: LD_VAR 0 5
74423: PPUSH
74424: CALL 72742 0 3
// if cmd = 258 then
74428: LD_VAR 0 1
74432: PUSH
74433: LD_INT 258
74435: EQUAL
74436: IFFALSE 74460
// BurnTreeXYR ( unit , x , y , 8 ) ;
74438: LD_VAR 0 2
74442: PPUSH
74443: LD_VAR 0 4
74447: PPUSH
74448: LD_VAR 0 5
74452: PPUSH
74453: LD_INT 8
74455: PPUSH
74456: CALL 74859 0 4
// end ;
74460: LD_VAR 0 6
74464: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74465: LD_INT 0
74467: PPUSH
74468: PPUSH
74469: PPUSH
74470: PPUSH
74471: PPUSH
74472: PPUSH
74473: PPUSH
74474: PPUSH
74475: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74476: LD_VAR 0 1
74480: PPUSH
74481: CALL_OW 302
74485: NOT
74486: PUSH
74487: LD_VAR 0 2
74491: PPUSH
74492: LD_VAR 0 3
74496: PPUSH
74497: CALL_OW 488
74501: NOT
74502: OR
74503: PUSH
74504: LD_VAR 0 4
74508: NOT
74509: OR
74510: IFFALSE 74514
// exit ;
74512: GO 74854
// list := [ ] ;
74514: LD_ADDR_VAR 0 13
74518: PUSH
74519: EMPTY
74520: ST_TO_ADDR
// if x - r < 0 then
74521: LD_VAR 0 2
74525: PUSH
74526: LD_VAR 0 4
74530: MINUS
74531: PUSH
74532: LD_INT 0
74534: LESS
74535: IFFALSE 74547
// min_x := 0 else
74537: LD_ADDR_VAR 0 7
74541: PUSH
74542: LD_INT 0
74544: ST_TO_ADDR
74545: GO 74563
// min_x := x - r ;
74547: LD_ADDR_VAR 0 7
74551: PUSH
74552: LD_VAR 0 2
74556: PUSH
74557: LD_VAR 0 4
74561: MINUS
74562: ST_TO_ADDR
// if y - r < 0 then
74563: LD_VAR 0 3
74567: PUSH
74568: LD_VAR 0 4
74572: MINUS
74573: PUSH
74574: LD_INT 0
74576: LESS
74577: IFFALSE 74589
// min_y := 0 else
74579: LD_ADDR_VAR 0 8
74583: PUSH
74584: LD_INT 0
74586: ST_TO_ADDR
74587: GO 74605
// min_y := y - r ;
74589: LD_ADDR_VAR 0 8
74593: PUSH
74594: LD_VAR 0 3
74598: PUSH
74599: LD_VAR 0 4
74603: MINUS
74604: ST_TO_ADDR
// max_x := x + r ;
74605: LD_ADDR_VAR 0 9
74609: PUSH
74610: LD_VAR 0 2
74614: PUSH
74615: LD_VAR 0 4
74619: PLUS
74620: ST_TO_ADDR
// max_y := y + r ;
74621: LD_ADDR_VAR 0 10
74625: PUSH
74626: LD_VAR 0 3
74630: PUSH
74631: LD_VAR 0 4
74635: PLUS
74636: ST_TO_ADDR
// for _x = min_x to max_x do
74637: LD_ADDR_VAR 0 11
74641: PUSH
74642: DOUBLE
74643: LD_VAR 0 7
74647: DEC
74648: ST_TO_ADDR
74649: LD_VAR 0 9
74653: PUSH
74654: FOR_TO
74655: IFFALSE 74772
// for _y = min_y to max_y do
74657: LD_ADDR_VAR 0 12
74661: PUSH
74662: DOUBLE
74663: LD_VAR 0 8
74667: DEC
74668: ST_TO_ADDR
74669: LD_VAR 0 10
74673: PUSH
74674: FOR_TO
74675: IFFALSE 74768
// begin if not ValidHex ( _x , _y ) then
74677: LD_VAR 0 11
74681: PPUSH
74682: LD_VAR 0 12
74686: PPUSH
74687: CALL_OW 488
74691: NOT
74692: IFFALSE 74696
// continue ;
74694: GO 74674
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74696: LD_VAR 0 11
74700: PPUSH
74701: LD_VAR 0 12
74705: PPUSH
74706: CALL_OW 351
74710: PUSH
74711: LD_VAR 0 11
74715: PPUSH
74716: LD_VAR 0 12
74720: PPUSH
74721: CALL_OW 554
74725: AND
74726: IFFALSE 74766
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74728: LD_ADDR_VAR 0 13
74732: PUSH
74733: LD_VAR 0 13
74737: PPUSH
74738: LD_VAR 0 13
74742: PUSH
74743: LD_INT 1
74745: PLUS
74746: PPUSH
74747: LD_VAR 0 11
74751: PUSH
74752: LD_VAR 0 12
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PPUSH
74761: CALL_OW 2
74765: ST_TO_ADDR
// end ;
74766: GO 74674
74768: POP
74769: POP
74770: GO 74654
74772: POP
74773: POP
// if not list then
74774: LD_VAR 0 13
74778: NOT
74779: IFFALSE 74783
// exit ;
74781: GO 74854
// for i in list do
74783: LD_ADDR_VAR 0 6
74787: PUSH
74788: LD_VAR 0 13
74792: PUSH
74793: FOR_IN
74794: IFFALSE 74852
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74796: LD_VAR 0 1
74800: PPUSH
74801: LD_STRING M
74803: PUSH
74804: LD_VAR 0 6
74808: PUSH
74809: LD_INT 1
74811: ARRAY
74812: PUSH
74813: LD_VAR 0 6
74817: PUSH
74818: LD_INT 2
74820: ARRAY
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 0
74827: PUSH
74828: LD_INT 0
74830: PUSH
74831: LD_INT 0
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: PUSH
74843: EMPTY
74844: LIST
74845: PPUSH
74846: CALL_OW 447
74850: GO 74793
74852: POP
74853: POP
// end ;
74854: LD_VAR 0 5
74858: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74859: LD_INT 0
74861: PPUSH
74862: PPUSH
74863: PPUSH
74864: PPUSH
74865: PPUSH
74866: PPUSH
74867: PPUSH
74868: PPUSH
74869: PPUSH
74870: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74871: LD_VAR 0 1
74875: PPUSH
74876: CALL_OW 302
74880: NOT
74881: PUSH
74882: LD_VAR 0 2
74886: PPUSH
74887: LD_VAR 0 3
74891: PPUSH
74892: CALL_OW 488
74896: NOT
74897: OR
74898: PUSH
74899: LD_VAR 0 4
74903: NOT
74904: OR
74905: IFFALSE 74909
// exit ;
74907: GO 75422
// list := [ ] ;
74909: LD_ADDR_VAR 0 13
74913: PUSH
74914: EMPTY
74915: ST_TO_ADDR
// if x - r < 0 then
74916: LD_VAR 0 2
74920: PUSH
74921: LD_VAR 0 4
74925: MINUS
74926: PUSH
74927: LD_INT 0
74929: LESS
74930: IFFALSE 74942
// min_x := 0 else
74932: LD_ADDR_VAR 0 7
74936: PUSH
74937: LD_INT 0
74939: ST_TO_ADDR
74940: GO 74958
// min_x := x - r ;
74942: LD_ADDR_VAR 0 7
74946: PUSH
74947: LD_VAR 0 2
74951: PUSH
74952: LD_VAR 0 4
74956: MINUS
74957: ST_TO_ADDR
// if y - r < 0 then
74958: LD_VAR 0 3
74962: PUSH
74963: LD_VAR 0 4
74967: MINUS
74968: PUSH
74969: LD_INT 0
74971: LESS
74972: IFFALSE 74984
// min_y := 0 else
74974: LD_ADDR_VAR 0 8
74978: PUSH
74979: LD_INT 0
74981: ST_TO_ADDR
74982: GO 75000
// min_y := y - r ;
74984: LD_ADDR_VAR 0 8
74988: PUSH
74989: LD_VAR 0 3
74993: PUSH
74994: LD_VAR 0 4
74998: MINUS
74999: ST_TO_ADDR
// max_x := x + r ;
75000: LD_ADDR_VAR 0 9
75004: PUSH
75005: LD_VAR 0 2
75009: PUSH
75010: LD_VAR 0 4
75014: PLUS
75015: ST_TO_ADDR
// max_y := y + r ;
75016: LD_ADDR_VAR 0 10
75020: PUSH
75021: LD_VAR 0 3
75025: PUSH
75026: LD_VAR 0 4
75030: PLUS
75031: ST_TO_ADDR
// for _x = min_x to max_x do
75032: LD_ADDR_VAR 0 11
75036: PUSH
75037: DOUBLE
75038: LD_VAR 0 7
75042: DEC
75043: ST_TO_ADDR
75044: LD_VAR 0 9
75048: PUSH
75049: FOR_TO
75050: IFFALSE 75167
// for _y = min_y to max_y do
75052: LD_ADDR_VAR 0 12
75056: PUSH
75057: DOUBLE
75058: LD_VAR 0 8
75062: DEC
75063: ST_TO_ADDR
75064: LD_VAR 0 10
75068: PUSH
75069: FOR_TO
75070: IFFALSE 75163
// begin if not ValidHex ( _x , _y ) then
75072: LD_VAR 0 11
75076: PPUSH
75077: LD_VAR 0 12
75081: PPUSH
75082: CALL_OW 488
75086: NOT
75087: IFFALSE 75091
// continue ;
75089: GO 75069
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75091: LD_VAR 0 11
75095: PPUSH
75096: LD_VAR 0 12
75100: PPUSH
75101: CALL_OW 351
75105: PUSH
75106: LD_VAR 0 11
75110: PPUSH
75111: LD_VAR 0 12
75115: PPUSH
75116: CALL_OW 554
75120: AND
75121: IFFALSE 75161
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75123: LD_ADDR_VAR 0 13
75127: PUSH
75128: LD_VAR 0 13
75132: PPUSH
75133: LD_VAR 0 13
75137: PUSH
75138: LD_INT 1
75140: PLUS
75141: PPUSH
75142: LD_VAR 0 11
75146: PUSH
75147: LD_VAR 0 12
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PPUSH
75156: CALL_OW 2
75160: ST_TO_ADDR
// end ;
75161: GO 75069
75163: POP
75164: POP
75165: GO 75049
75167: POP
75168: POP
// if not list then
75169: LD_VAR 0 13
75173: NOT
75174: IFFALSE 75178
// exit ;
75176: GO 75422
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75178: LD_ADDR_VAR 0 13
75182: PUSH
75183: LD_VAR 0 1
75187: PPUSH
75188: LD_VAR 0 13
75192: PPUSH
75193: LD_INT 1
75195: PPUSH
75196: LD_INT 1
75198: PPUSH
75199: CALL 20551 0 4
75203: ST_TO_ADDR
// ComStop ( flame ) ;
75204: LD_VAR 0 1
75208: PPUSH
75209: CALL_OW 141
// for i in list do
75213: LD_ADDR_VAR 0 6
75217: PUSH
75218: LD_VAR 0 13
75222: PUSH
75223: FOR_IN
75224: IFFALSE 75255
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75226: LD_VAR 0 1
75230: PPUSH
75231: LD_VAR 0 6
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PPUSH
75240: LD_VAR 0 6
75244: PUSH
75245: LD_INT 2
75247: ARRAY
75248: PPUSH
75249: CALL_OW 176
75253: GO 75223
75255: POP
75256: POP
// repeat wait ( 0 0$1 ) ;
75257: LD_INT 35
75259: PPUSH
75260: CALL_OW 67
// task := GetTaskList ( flame ) ;
75264: LD_ADDR_VAR 0 14
75268: PUSH
75269: LD_VAR 0 1
75273: PPUSH
75274: CALL_OW 437
75278: ST_TO_ADDR
// if not task then
75279: LD_VAR 0 14
75283: NOT
75284: IFFALSE 75288
// exit ;
75286: GO 75422
// if task [ 1 ] [ 1 ] <> | then
75288: LD_VAR 0 14
75292: PUSH
75293: LD_INT 1
75295: ARRAY
75296: PUSH
75297: LD_INT 1
75299: ARRAY
75300: PUSH
75301: LD_STRING |
75303: NONEQUAL
75304: IFFALSE 75308
// exit ;
75306: GO 75422
// _x := task [ 1 ] [ 2 ] ;
75308: LD_ADDR_VAR 0 11
75312: PUSH
75313: LD_VAR 0 14
75317: PUSH
75318: LD_INT 1
75320: ARRAY
75321: PUSH
75322: LD_INT 2
75324: ARRAY
75325: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75326: LD_ADDR_VAR 0 12
75330: PUSH
75331: LD_VAR 0 14
75335: PUSH
75336: LD_INT 1
75338: ARRAY
75339: PUSH
75340: LD_INT 3
75342: ARRAY
75343: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75344: LD_VAR 0 11
75348: PPUSH
75349: LD_VAR 0 12
75353: PPUSH
75354: CALL_OW 351
75358: NOT
75359: PUSH
75360: LD_VAR 0 11
75364: PPUSH
75365: LD_VAR 0 12
75369: PPUSH
75370: CALL_OW 554
75374: NOT
75375: OR
75376: IFFALSE 75410
// begin task := Delete ( task , 1 ) ;
75378: LD_ADDR_VAR 0 14
75382: PUSH
75383: LD_VAR 0 14
75387: PPUSH
75388: LD_INT 1
75390: PPUSH
75391: CALL_OW 3
75395: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75396: LD_VAR 0 1
75400: PPUSH
75401: LD_VAR 0 14
75405: PPUSH
75406: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75410: LD_VAR 0 1
75414: PPUSH
75415: CALL_OW 314
75419: NOT
75420: IFFALSE 75257
// end ;
75422: LD_VAR 0 5
75426: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75427: LD_EXP 107
75431: NOT
75432: IFFALSE 75482
75434: GO 75436
75436: DISABLE
// begin initHack := true ;
75437: LD_ADDR_EXP 107
75441: PUSH
75442: LD_INT 1
75444: ST_TO_ADDR
// hackTanks := [ ] ;
75445: LD_ADDR_EXP 108
75449: PUSH
75450: EMPTY
75451: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75452: LD_ADDR_EXP 109
75456: PUSH
75457: EMPTY
75458: ST_TO_ADDR
// hackLimit := 3 ;
75459: LD_ADDR_EXP 110
75463: PUSH
75464: LD_INT 3
75466: ST_TO_ADDR
// hackDist := 12 ;
75467: LD_ADDR_EXP 111
75471: PUSH
75472: LD_INT 12
75474: ST_TO_ADDR
// hackCounter := [ ] ;
75475: LD_ADDR_EXP 112
75479: PUSH
75480: EMPTY
75481: ST_TO_ADDR
// end ;
75482: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75483: LD_EXP 107
75487: PUSH
75488: LD_INT 34
75490: PUSH
75491: LD_INT 99
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PPUSH
75498: CALL_OW 69
75502: AND
75503: IFFALSE 75756
75505: GO 75507
75507: DISABLE
75508: LD_INT 0
75510: PPUSH
75511: PPUSH
// begin enable ;
75512: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75513: LD_ADDR_VAR 0 1
75517: PUSH
75518: LD_INT 34
75520: PUSH
75521: LD_INT 99
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PPUSH
75528: CALL_OW 69
75532: PUSH
75533: FOR_IN
75534: IFFALSE 75754
// begin if not i in hackTanks then
75536: LD_VAR 0 1
75540: PUSH
75541: LD_EXP 108
75545: IN
75546: NOT
75547: IFFALSE 75630
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75549: LD_ADDR_EXP 108
75553: PUSH
75554: LD_EXP 108
75558: PPUSH
75559: LD_EXP 108
75563: PUSH
75564: LD_INT 1
75566: PLUS
75567: PPUSH
75568: LD_VAR 0 1
75572: PPUSH
75573: CALL_OW 1
75577: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75578: LD_ADDR_EXP 109
75582: PUSH
75583: LD_EXP 109
75587: PPUSH
75588: LD_EXP 109
75592: PUSH
75593: LD_INT 1
75595: PLUS
75596: PPUSH
75597: EMPTY
75598: PPUSH
75599: CALL_OW 1
75603: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75604: LD_ADDR_EXP 112
75608: PUSH
75609: LD_EXP 112
75613: PPUSH
75614: LD_EXP 112
75618: PUSH
75619: LD_INT 1
75621: PLUS
75622: PPUSH
75623: EMPTY
75624: PPUSH
75625: CALL_OW 1
75629: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75630: LD_VAR 0 1
75634: PPUSH
75635: CALL_OW 302
75639: NOT
75640: IFFALSE 75653
// begin HackUnlinkAll ( i ) ;
75642: LD_VAR 0 1
75646: PPUSH
75647: CALL 75759 0 1
// continue ;
75651: GO 75533
// end ; HackCheckCapturedStatus ( i ) ;
75653: LD_VAR 0 1
75657: PPUSH
75658: CALL 76202 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75662: LD_ADDR_VAR 0 2
75666: PUSH
75667: LD_INT 81
75669: PUSH
75670: LD_VAR 0 1
75674: PPUSH
75675: CALL_OW 255
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 33
75686: PUSH
75687: LD_INT 3
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 91
75696: PUSH
75697: LD_VAR 0 1
75701: PUSH
75702: LD_EXP 111
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: LIST
75711: PUSH
75712: LD_INT 50
75714: PUSH
75715: EMPTY
75716: LIST
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: PPUSH
75724: CALL_OW 69
75728: ST_TO_ADDR
// if not tmp then
75729: LD_VAR 0 2
75733: NOT
75734: IFFALSE 75738
// continue ;
75736: GO 75533
// HackLink ( i , tmp ) ;
75738: LD_VAR 0 1
75742: PPUSH
75743: LD_VAR 0 2
75747: PPUSH
75748: CALL 75895 0 2
// end ;
75752: GO 75533
75754: POP
75755: POP
// end ;
75756: PPOPN 2
75758: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75759: LD_INT 0
75761: PPUSH
75762: PPUSH
75763: PPUSH
// if not hack in hackTanks then
75764: LD_VAR 0 1
75768: PUSH
75769: LD_EXP 108
75773: IN
75774: NOT
75775: IFFALSE 75779
// exit ;
75777: GO 75890
// index := GetElementIndex ( hackTanks , hack ) ;
75779: LD_ADDR_VAR 0 4
75783: PUSH
75784: LD_EXP 108
75788: PPUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL 19848 0 2
75798: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75799: LD_EXP 109
75803: PUSH
75804: LD_VAR 0 4
75808: ARRAY
75809: IFFALSE 75890
// begin for i in hackTanksCaptured [ index ] do
75811: LD_ADDR_VAR 0 3
75815: PUSH
75816: LD_EXP 109
75820: PUSH
75821: LD_VAR 0 4
75825: ARRAY
75826: PUSH
75827: FOR_IN
75828: IFFALSE 75854
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75830: LD_VAR 0 3
75834: PUSH
75835: LD_INT 1
75837: ARRAY
75838: PPUSH
75839: LD_VAR 0 3
75843: PUSH
75844: LD_INT 2
75846: ARRAY
75847: PPUSH
75848: CALL_OW 235
75852: GO 75827
75854: POP
75855: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75856: LD_ADDR_EXP 109
75860: PUSH
75861: LD_EXP 109
75865: PPUSH
75866: LD_VAR 0 4
75870: PPUSH
75871: EMPTY
75872: PPUSH
75873: CALL_OW 1
75877: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75878: LD_VAR 0 1
75882: PPUSH
75883: LD_INT 0
75885: PPUSH
75886: CALL_OW 505
// end ; end ;
75890: LD_VAR 0 2
75894: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75895: LD_INT 0
75897: PPUSH
75898: PPUSH
75899: PPUSH
// if not hack in hackTanks or not vehicles then
75900: LD_VAR 0 1
75904: PUSH
75905: LD_EXP 108
75909: IN
75910: NOT
75911: PUSH
75912: LD_VAR 0 2
75916: NOT
75917: OR
75918: IFFALSE 75922
// exit ;
75920: GO 76197
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75922: LD_ADDR_VAR 0 2
75926: PUSH
75927: LD_VAR 0 1
75931: PPUSH
75932: LD_VAR 0 2
75936: PPUSH
75937: LD_INT 1
75939: PPUSH
75940: LD_INT 1
75942: PPUSH
75943: CALL 20498 0 4
75947: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75948: LD_ADDR_VAR 0 5
75952: PUSH
75953: LD_EXP 108
75957: PPUSH
75958: LD_VAR 0 1
75962: PPUSH
75963: CALL 19848 0 2
75967: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75968: LD_EXP 109
75972: PUSH
75973: LD_VAR 0 5
75977: ARRAY
75978: PUSH
75979: LD_EXP 110
75983: LESS
75984: IFFALSE 76173
// begin for i := 1 to vehicles do
75986: LD_ADDR_VAR 0 4
75990: PUSH
75991: DOUBLE
75992: LD_INT 1
75994: DEC
75995: ST_TO_ADDR
75996: LD_VAR 0 2
76000: PUSH
76001: FOR_TO
76002: IFFALSE 76171
// begin if hackTanksCaptured [ index ] = hackLimit then
76004: LD_EXP 109
76008: PUSH
76009: LD_VAR 0 5
76013: ARRAY
76014: PUSH
76015: LD_EXP 110
76019: EQUAL
76020: IFFALSE 76024
// break ;
76022: GO 76171
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76024: LD_ADDR_EXP 112
76028: PUSH
76029: LD_EXP 112
76033: PPUSH
76034: LD_VAR 0 5
76038: PPUSH
76039: LD_EXP 112
76043: PUSH
76044: LD_VAR 0 5
76048: ARRAY
76049: PUSH
76050: LD_INT 1
76052: PLUS
76053: PPUSH
76054: CALL_OW 1
76058: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76059: LD_ADDR_EXP 109
76063: PUSH
76064: LD_EXP 109
76068: PPUSH
76069: LD_VAR 0 5
76073: PUSH
76074: LD_EXP 109
76078: PUSH
76079: LD_VAR 0 5
76083: ARRAY
76084: PUSH
76085: LD_INT 1
76087: PLUS
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PPUSH
76093: LD_VAR 0 2
76097: PUSH
76098: LD_VAR 0 4
76102: ARRAY
76103: PUSH
76104: LD_VAR 0 2
76108: PUSH
76109: LD_VAR 0 4
76113: ARRAY
76114: PPUSH
76115: CALL_OW 255
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PPUSH
76124: CALL 20063 0 3
76128: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76129: LD_VAR 0 2
76133: PUSH
76134: LD_VAR 0 4
76138: ARRAY
76139: PPUSH
76140: LD_VAR 0 1
76144: PPUSH
76145: CALL_OW 255
76149: PPUSH
76150: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76154: LD_VAR 0 2
76158: PUSH
76159: LD_VAR 0 4
76163: ARRAY
76164: PPUSH
76165: CALL_OW 141
// end ;
76169: GO 76001
76171: POP
76172: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76173: LD_VAR 0 1
76177: PPUSH
76178: LD_EXP 109
76182: PUSH
76183: LD_VAR 0 5
76187: ARRAY
76188: PUSH
76189: LD_INT 0
76191: PLUS
76192: PPUSH
76193: CALL_OW 505
// end ;
76197: LD_VAR 0 3
76201: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76202: LD_INT 0
76204: PPUSH
76205: PPUSH
76206: PPUSH
76207: PPUSH
// if not hack in hackTanks then
76208: LD_VAR 0 1
76212: PUSH
76213: LD_EXP 108
76217: IN
76218: NOT
76219: IFFALSE 76223
// exit ;
76221: GO 76463
// index := GetElementIndex ( hackTanks , hack ) ;
76223: LD_ADDR_VAR 0 4
76227: PUSH
76228: LD_EXP 108
76232: PPUSH
76233: LD_VAR 0 1
76237: PPUSH
76238: CALL 19848 0 2
76242: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76243: LD_ADDR_VAR 0 3
76247: PUSH
76248: DOUBLE
76249: LD_EXP 109
76253: PUSH
76254: LD_VAR 0 4
76258: ARRAY
76259: INC
76260: ST_TO_ADDR
76261: LD_INT 1
76263: PUSH
76264: FOR_DOWNTO
76265: IFFALSE 76437
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76267: LD_ADDR_VAR 0 5
76271: PUSH
76272: LD_EXP 109
76276: PUSH
76277: LD_VAR 0 4
76281: ARRAY
76282: PUSH
76283: LD_VAR 0 3
76287: ARRAY
76288: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76289: LD_VAR 0 5
76293: PUSH
76294: LD_INT 1
76296: ARRAY
76297: PPUSH
76298: CALL_OW 302
76302: NOT
76303: PUSH
76304: LD_VAR 0 5
76308: PUSH
76309: LD_INT 1
76311: ARRAY
76312: PPUSH
76313: CALL_OW 255
76317: PUSH
76318: LD_VAR 0 1
76322: PPUSH
76323: CALL_OW 255
76327: NONEQUAL
76328: OR
76329: IFFALSE 76435
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76331: LD_VAR 0 5
76335: PUSH
76336: LD_INT 1
76338: ARRAY
76339: PPUSH
76340: CALL_OW 305
76344: PUSH
76345: LD_VAR 0 5
76349: PUSH
76350: LD_INT 1
76352: ARRAY
76353: PPUSH
76354: CALL_OW 255
76358: PUSH
76359: LD_VAR 0 1
76363: PPUSH
76364: CALL_OW 255
76368: EQUAL
76369: AND
76370: IFFALSE 76394
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76372: LD_VAR 0 5
76376: PUSH
76377: LD_INT 1
76379: ARRAY
76380: PPUSH
76381: LD_VAR 0 5
76385: PUSH
76386: LD_INT 2
76388: ARRAY
76389: PPUSH
76390: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76394: LD_ADDR_EXP 109
76398: PUSH
76399: LD_EXP 109
76403: PPUSH
76404: LD_VAR 0 4
76408: PPUSH
76409: LD_EXP 109
76413: PUSH
76414: LD_VAR 0 4
76418: ARRAY
76419: PPUSH
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 3
76429: PPUSH
76430: CALL_OW 1
76434: ST_TO_ADDR
// end ; end ;
76435: GO 76264
76437: POP
76438: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76439: LD_VAR 0 1
76443: PPUSH
76444: LD_EXP 109
76448: PUSH
76449: LD_VAR 0 4
76453: ARRAY
76454: PUSH
76455: LD_INT 0
76457: PLUS
76458: PPUSH
76459: CALL_OW 505
// end ;
76463: LD_VAR 0 2
76467: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76468: LD_INT 0
76470: PPUSH
76471: PPUSH
76472: PPUSH
76473: PPUSH
// if not hack in hackTanks then
76474: LD_VAR 0 1
76478: PUSH
76479: LD_EXP 108
76483: IN
76484: NOT
76485: IFFALSE 76489
// exit ;
76487: GO 76574
// index := GetElementIndex ( hackTanks , hack ) ;
76489: LD_ADDR_VAR 0 5
76493: PUSH
76494: LD_EXP 108
76498: PPUSH
76499: LD_VAR 0 1
76503: PPUSH
76504: CALL 19848 0 2
76508: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76509: LD_ADDR_VAR 0 4
76513: PUSH
76514: DOUBLE
76515: LD_INT 1
76517: DEC
76518: ST_TO_ADDR
76519: LD_EXP 109
76523: PUSH
76524: LD_VAR 0 5
76528: ARRAY
76529: PUSH
76530: FOR_TO
76531: IFFALSE 76572
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76533: LD_EXP 109
76537: PUSH
76538: LD_VAR 0 5
76542: ARRAY
76543: PUSH
76544: LD_VAR 0 4
76548: ARRAY
76549: PUSH
76550: LD_INT 1
76552: ARRAY
76553: PUSH
76554: LD_VAR 0 2
76558: EQUAL
76559: IFFALSE 76570
// KillUnit ( vehicle ) ;
76561: LD_VAR 0 2
76565: PPUSH
76566: CALL_OW 66
76570: GO 76530
76572: POP
76573: POP
// end ;
76574: LD_VAR 0 3
76578: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76579: LD_EXP 113
76583: NOT
76584: IFFALSE 76619
76586: GO 76588
76588: DISABLE
// begin initMiner := true ;
76589: LD_ADDR_EXP 113
76593: PUSH
76594: LD_INT 1
76596: ST_TO_ADDR
// minersList := [ ] ;
76597: LD_ADDR_EXP 114
76601: PUSH
76602: EMPTY
76603: ST_TO_ADDR
// minerMinesList := [ ] ;
76604: LD_ADDR_EXP 115
76608: PUSH
76609: EMPTY
76610: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76611: LD_ADDR_EXP 116
76615: PUSH
76616: LD_INT 5
76618: ST_TO_ADDR
// end ;
76619: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76620: LD_EXP 113
76624: PUSH
76625: LD_INT 34
76627: PUSH
76628: LD_INT 81
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PPUSH
76635: CALL_OW 69
76639: AND
76640: IFFALSE 77101
76642: GO 76644
76644: DISABLE
76645: LD_INT 0
76647: PPUSH
76648: PPUSH
76649: PPUSH
76650: PPUSH
// begin enable ;
76651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76652: LD_ADDR_VAR 0 1
76656: PUSH
76657: LD_INT 34
76659: PUSH
76660: LD_INT 81
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PPUSH
76667: CALL_OW 69
76671: PUSH
76672: FOR_IN
76673: IFFALSE 76745
// begin if not i in minersList then
76675: LD_VAR 0 1
76679: PUSH
76680: LD_EXP 114
76684: IN
76685: NOT
76686: IFFALSE 76743
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76688: LD_ADDR_EXP 114
76692: PUSH
76693: LD_EXP 114
76697: PPUSH
76698: LD_EXP 114
76702: PUSH
76703: LD_INT 1
76705: PLUS
76706: PPUSH
76707: LD_VAR 0 1
76711: PPUSH
76712: CALL_OW 1
76716: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76717: LD_ADDR_EXP 115
76721: PUSH
76722: LD_EXP 115
76726: PPUSH
76727: LD_EXP 115
76731: PUSH
76732: LD_INT 1
76734: PLUS
76735: PPUSH
76736: EMPTY
76737: PPUSH
76738: CALL_OW 1
76742: ST_TO_ADDR
// end end ;
76743: GO 76672
76745: POP
76746: POP
// for i := minerMinesList downto 1 do
76747: LD_ADDR_VAR 0 1
76751: PUSH
76752: DOUBLE
76753: LD_EXP 115
76757: INC
76758: ST_TO_ADDR
76759: LD_INT 1
76761: PUSH
76762: FOR_DOWNTO
76763: IFFALSE 77099
// begin if IsLive ( minersList [ i ] ) then
76765: LD_EXP 114
76769: PUSH
76770: LD_VAR 0 1
76774: ARRAY
76775: PPUSH
76776: CALL_OW 300
76780: IFFALSE 76808
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76782: LD_EXP 114
76786: PUSH
76787: LD_VAR 0 1
76791: ARRAY
76792: PPUSH
76793: LD_EXP 115
76797: PUSH
76798: LD_VAR 0 1
76802: ARRAY
76803: PPUSH
76804: CALL_OW 505
// if not minerMinesList [ i ] then
76808: LD_EXP 115
76812: PUSH
76813: LD_VAR 0 1
76817: ARRAY
76818: NOT
76819: IFFALSE 76823
// continue ;
76821: GO 76762
// for j := minerMinesList [ i ] downto 1 do
76823: LD_ADDR_VAR 0 2
76827: PUSH
76828: DOUBLE
76829: LD_EXP 115
76833: PUSH
76834: LD_VAR 0 1
76838: ARRAY
76839: INC
76840: ST_TO_ADDR
76841: LD_INT 1
76843: PUSH
76844: FOR_DOWNTO
76845: IFFALSE 77095
// begin side := GetSide ( minersList [ i ] ) ;
76847: LD_ADDR_VAR 0 3
76851: PUSH
76852: LD_EXP 114
76856: PUSH
76857: LD_VAR 0 1
76861: ARRAY
76862: PPUSH
76863: CALL_OW 255
76867: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76868: LD_ADDR_VAR 0 4
76872: PUSH
76873: LD_EXP 115
76877: PUSH
76878: LD_VAR 0 1
76882: ARRAY
76883: PUSH
76884: LD_VAR 0 2
76888: ARRAY
76889: PUSH
76890: LD_INT 1
76892: ARRAY
76893: PPUSH
76894: LD_EXP 115
76898: PUSH
76899: LD_VAR 0 1
76903: ARRAY
76904: PUSH
76905: LD_VAR 0 2
76909: ARRAY
76910: PUSH
76911: LD_INT 2
76913: ARRAY
76914: PPUSH
76915: CALL_OW 428
76919: ST_TO_ADDR
// if not tmp then
76920: LD_VAR 0 4
76924: NOT
76925: IFFALSE 76929
// continue ;
76927: GO 76844
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76929: LD_VAR 0 4
76933: PUSH
76934: LD_INT 81
76936: PUSH
76937: LD_VAR 0 3
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PPUSH
76946: CALL_OW 69
76950: IN
76951: PUSH
76952: LD_EXP 115
76956: PUSH
76957: LD_VAR 0 1
76961: ARRAY
76962: PUSH
76963: LD_VAR 0 2
76967: ARRAY
76968: PUSH
76969: LD_INT 1
76971: ARRAY
76972: PPUSH
76973: LD_EXP 115
76977: PUSH
76978: LD_VAR 0 1
76982: ARRAY
76983: PUSH
76984: LD_VAR 0 2
76988: ARRAY
76989: PUSH
76990: LD_INT 2
76992: ARRAY
76993: PPUSH
76994: CALL_OW 458
76998: AND
76999: IFFALSE 77093
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77001: LD_EXP 115
77005: PUSH
77006: LD_VAR 0 1
77010: ARRAY
77011: PUSH
77012: LD_VAR 0 2
77016: ARRAY
77017: PUSH
77018: LD_INT 1
77020: ARRAY
77021: PPUSH
77022: LD_EXP 115
77026: PUSH
77027: LD_VAR 0 1
77031: ARRAY
77032: PUSH
77033: LD_VAR 0 2
77037: ARRAY
77038: PUSH
77039: LD_INT 2
77041: ARRAY
77042: PPUSH
77043: LD_VAR 0 3
77047: PPUSH
77048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77052: LD_ADDR_EXP 115
77056: PUSH
77057: LD_EXP 115
77061: PPUSH
77062: LD_VAR 0 1
77066: PPUSH
77067: LD_EXP 115
77071: PUSH
77072: LD_VAR 0 1
77076: ARRAY
77077: PPUSH
77078: LD_VAR 0 2
77082: PPUSH
77083: CALL_OW 3
77087: PPUSH
77088: CALL_OW 1
77092: ST_TO_ADDR
// end ; end ;
77093: GO 76844
77095: POP
77096: POP
// end ;
77097: GO 76762
77099: POP
77100: POP
// end ;
77101: PPOPN 4
77103: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77104: LD_INT 0
77106: PPUSH
77107: PPUSH
// result := false ;
77108: LD_ADDR_VAR 0 4
77112: PUSH
77113: LD_INT 0
77115: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77116: LD_VAR 0 1
77120: PPUSH
77121: CALL_OW 264
77125: PUSH
77126: LD_INT 81
77128: EQUAL
77129: NOT
77130: IFFALSE 77134
// exit ;
77132: GO 77374
// index := GetElementIndex ( minersList , unit ) ;
77134: LD_ADDR_VAR 0 5
77138: PUSH
77139: LD_EXP 114
77143: PPUSH
77144: LD_VAR 0 1
77148: PPUSH
77149: CALL 19848 0 2
77153: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77154: LD_EXP 115
77158: PUSH
77159: LD_VAR 0 5
77163: ARRAY
77164: PUSH
77165: LD_EXP 116
77169: GREATEREQUAL
77170: IFFALSE 77174
// exit ;
77172: GO 77374
// ComMoveXY ( unit , x , y ) ;
77174: LD_VAR 0 1
77178: PPUSH
77179: LD_VAR 0 2
77183: PPUSH
77184: LD_VAR 0 3
77188: PPUSH
77189: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77193: LD_INT 35
77195: PPUSH
77196: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77200: LD_VAR 0 1
77204: PPUSH
77205: LD_VAR 0 2
77209: PPUSH
77210: LD_VAR 0 3
77214: PPUSH
77215: CALL 51589 0 3
77219: NOT
77220: PUSH
77221: LD_VAR 0 1
77225: PPUSH
77226: CALL_OW 314
77230: AND
77231: IFFALSE 77235
// exit ;
77233: GO 77374
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77235: LD_VAR 0 2
77239: PPUSH
77240: LD_VAR 0 3
77244: PPUSH
77245: CALL_OW 428
77249: PUSH
77250: LD_VAR 0 1
77254: EQUAL
77255: PUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: CALL_OW 314
77265: NOT
77266: AND
77267: IFFALSE 77193
// PlaySoundXY ( x , y , PlantMine ) ;
77269: LD_VAR 0 2
77273: PPUSH
77274: LD_VAR 0 3
77278: PPUSH
77279: LD_STRING PlantMine
77281: PPUSH
77282: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77286: LD_VAR 0 2
77290: PPUSH
77291: LD_VAR 0 3
77295: PPUSH
77296: LD_VAR 0 1
77300: PPUSH
77301: CALL_OW 255
77305: PPUSH
77306: LD_INT 0
77308: PPUSH
77309: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77313: LD_ADDR_EXP 115
77317: PUSH
77318: LD_EXP 115
77322: PPUSH
77323: LD_VAR 0 5
77327: PUSH
77328: LD_EXP 115
77332: PUSH
77333: LD_VAR 0 5
77337: ARRAY
77338: PUSH
77339: LD_INT 1
77341: PLUS
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PPUSH
77347: LD_VAR 0 2
77351: PUSH
77352: LD_VAR 0 3
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PPUSH
77361: CALL 20063 0 3
77365: ST_TO_ADDR
// result := true ;
77366: LD_ADDR_VAR 0 4
77370: PUSH
77371: LD_INT 1
77373: ST_TO_ADDR
// end ;
77374: LD_VAR 0 4
77378: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77379: LD_INT 0
77381: PPUSH
77382: PPUSH
77383: PPUSH
// if not unit in minersList then
77384: LD_VAR 0 1
77388: PUSH
77389: LD_EXP 114
77393: IN
77394: NOT
77395: IFFALSE 77399
// exit ;
77397: GO 77791
// index := GetElementIndex ( minersList , unit ) ;
77399: LD_ADDR_VAR 0 6
77403: PUSH
77404: LD_EXP 114
77408: PPUSH
77409: LD_VAR 0 1
77413: PPUSH
77414: CALL 19848 0 2
77418: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77419: LD_ADDR_VAR 0 5
77423: PUSH
77424: DOUBLE
77425: LD_EXP 115
77429: PUSH
77430: LD_VAR 0 6
77434: ARRAY
77435: INC
77436: ST_TO_ADDR
77437: LD_INT 1
77439: PUSH
77440: FOR_DOWNTO
77441: IFFALSE 77602
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77443: LD_EXP 115
77447: PUSH
77448: LD_VAR 0 6
77452: ARRAY
77453: PUSH
77454: LD_VAR 0 5
77458: ARRAY
77459: PUSH
77460: LD_INT 1
77462: ARRAY
77463: PUSH
77464: LD_VAR 0 2
77468: EQUAL
77469: PUSH
77470: LD_EXP 115
77474: PUSH
77475: LD_VAR 0 6
77479: ARRAY
77480: PUSH
77481: LD_VAR 0 5
77485: ARRAY
77486: PUSH
77487: LD_INT 2
77489: ARRAY
77490: PUSH
77491: LD_VAR 0 3
77495: EQUAL
77496: AND
77497: IFFALSE 77600
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77499: LD_EXP 115
77503: PUSH
77504: LD_VAR 0 6
77508: ARRAY
77509: PUSH
77510: LD_VAR 0 5
77514: ARRAY
77515: PUSH
77516: LD_INT 1
77518: ARRAY
77519: PPUSH
77520: LD_EXP 115
77524: PUSH
77525: LD_VAR 0 6
77529: ARRAY
77530: PUSH
77531: LD_VAR 0 5
77535: ARRAY
77536: PUSH
77537: LD_INT 2
77539: ARRAY
77540: PPUSH
77541: LD_VAR 0 1
77545: PPUSH
77546: CALL_OW 255
77550: PPUSH
77551: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77555: LD_ADDR_EXP 115
77559: PUSH
77560: LD_EXP 115
77564: PPUSH
77565: LD_VAR 0 6
77569: PPUSH
77570: LD_EXP 115
77574: PUSH
77575: LD_VAR 0 6
77579: ARRAY
77580: PPUSH
77581: LD_VAR 0 5
77585: PPUSH
77586: CALL_OW 3
77590: PPUSH
77591: CALL_OW 1
77595: ST_TO_ADDR
// exit ;
77596: POP
77597: POP
77598: GO 77791
// end ; end ;
77600: GO 77440
77602: POP
77603: POP
// for i := minerMinesList [ index ] downto 1 do
77604: LD_ADDR_VAR 0 5
77608: PUSH
77609: DOUBLE
77610: LD_EXP 115
77614: PUSH
77615: LD_VAR 0 6
77619: ARRAY
77620: INC
77621: ST_TO_ADDR
77622: LD_INT 1
77624: PUSH
77625: FOR_DOWNTO
77626: IFFALSE 77789
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77628: LD_EXP 115
77632: PUSH
77633: LD_VAR 0 6
77637: ARRAY
77638: PUSH
77639: LD_VAR 0 5
77643: ARRAY
77644: PUSH
77645: LD_INT 1
77647: ARRAY
77648: PPUSH
77649: LD_EXP 115
77653: PUSH
77654: LD_VAR 0 6
77658: ARRAY
77659: PUSH
77660: LD_VAR 0 5
77664: ARRAY
77665: PUSH
77666: LD_INT 2
77668: ARRAY
77669: PPUSH
77670: LD_VAR 0 2
77674: PPUSH
77675: LD_VAR 0 3
77679: PPUSH
77680: CALL_OW 298
77684: PUSH
77685: LD_INT 6
77687: LESS
77688: IFFALSE 77787
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77690: LD_EXP 115
77694: PUSH
77695: LD_VAR 0 6
77699: ARRAY
77700: PUSH
77701: LD_VAR 0 5
77705: ARRAY
77706: PUSH
77707: LD_INT 1
77709: ARRAY
77710: PPUSH
77711: LD_EXP 115
77715: PUSH
77716: LD_VAR 0 6
77720: ARRAY
77721: PUSH
77722: LD_VAR 0 5
77726: ARRAY
77727: PUSH
77728: LD_INT 2
77730: ARRAY
77731: PPUSH
77732: LD_VAR 0 1
77736: PPUSH
77737: CALL_OW 255
77741: PPUSH
77742: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77746: LD_ADDR_EXP 115
77750: PUSH
77751: LD_EXP 115
77755: PPUSH
77756: LD_VAR 0 6
77760: PPUSH
77761: LD_EXP 115
77765: PUSH
77766: LD_VAR 0 6
77770: ARRAY
77771: PPUSH
77772: LD_VAR 0 5
77776: PPUSH
77777: CALL_OW 3
77781: PPUSH
77782: CALL_OW 1
77786: ST_TO_ADDR
// end ; end ;
77787: GO 77625
77789: POP
77790: POP
// end ;
77791: LD_VAR 0 4
77795: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77796: LD_INT 0
77798: PPUSH
77799: PPUSH
77800: PPUSH
77801: PPUSH
77802: PPUSH
77803: PPUSH
77804: PPUSH
77805: PPUSH
77806: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77807: LD_VAR 0 1
77811: PPUSH
77812: CALL_OW 264
77816: PUSH
77817: LD_INT 81
77819: EQUAL
77820: NOT
77821: PUSH
77822: LD_VAR 0 1
77826: PUSH
77827: LD_EXP 114
77831: IN
77832: NOT
77833: OR
77834: IFFALSE 77838
// exit ;
77836: GO 78160
// index := GetElementIndex ( minersList , unit ) ;
77838: LD_ADDR_VAR 0 6
77842: PUSH
77843: LD_EXP 114
77847: PPUSH
77848: LD_VAR 0 1
77852: PPUSH
77853: CALL 19848 0 2
77857: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77858: LD_ADDR_VAR 0 8
77862: PUSH
77863: LD_EXP 116
77867: PUSH
77868: LD_EXP 115
77872: PUSH
77873: LD_VAR 0 6
77877: ARRAY
77878: MINUS
77879: ST_TO_ADDR
// if not minesFreeAmount then
77880: LD_VAR 0 8
77884: NOT
77885: IFFALSE 77889
// exit ;
77887: GO 78160
// tmp := [ ] ;
77889: LD_ADDR_VAR 0 7
77893: PUSH
77894: EMPTY
77895: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77896: LD_ADDR_VAR 0 5
77900: PUSH
77901: DOUBLE
77902: LD_INT 1
77904: DEC
77905: ST_TO_ADDR
77906: LD_VAR 0 8
77910: PUSH
77911: FOR_TO
77912: IFFALSE 78107
// begin _d := rand ( 0 , 5 ) ;
77914: LD_ADDR_VAR 0 11
77918: PUSH
77919: LD_INT 0
77921: PPUSH
77922: LD_INT 5
77924: PPUSH
77925: CALL_OW 12
77929: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77930: LD_ADDR_VAR 0 12
77934: PUSH
77935: LD_INT 2
77937: PPUSH
77938: LD_INT 6
77940: PPUSH
77941: CALL_OW 12
77945: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77946: LD_ADDR_VAR 0 9
77950: PUSH
77951: LD_VAR 0 2
77955: PPUSH
77956: LD_VAR 0 11
77960: PPUSH
77961: LD_VAR 0 12
77965: PPUSH
77966: CALL_OW 272
77970: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77971: LD_ADDR_VAR 0 10
77975: PUSH
77976: LD_VAR 0 3
77980: PPUSH
77981: LD_VAR 0 11
77985: PPUSH
77986: LD_VAR 0 12
77990: PPUSH
77991: CALL_OW 273
77995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77996: LD_VAR 0 9
78000: PPUSH
78001: LD_VAR 0 10
78005: PPUSH
78006: CALL_OW 488
78010: PUSH
78011: LD_VAR 0 9
78015: PUSH
78016: LD_VAR 0 10
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_VAR 0 7
78029: IN
78030: NOT
78031: AND
78032: PUSH
78033: LD_VAR 0 9
78037: PPUSH
78038: LD_VAR 0 10
78042: PPUSH
78043: CALL_OW 458
78047: NOT
78048: AND
78049: IFFALSE 78091
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78051: LD_ADDR_VAR 0 7
78055: PUSH
78056: LD_VAR 0 7
78060: PPUSH
78061: LD_VAR 0 7
78065: PUSH
78066: LD_INT 1
78068: PLUS
78069: PPUSH
78070: LD_VAR 0 9
78074: PUSH
78075: LD_VAR 0 10
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PPUSH
78084: CALL_OW 1
78088: ST_TO_ADDR
78089: GO 78105
// i := i - 1 ;
78091: LD_ADDR_VAR 0 5
78095: PUSH
78096: LD_VAR 0 5
78100: PUSH
78101: LD_INT 1
78103: MINUS
78104: ST_TO_ADDR
// end ;
78105: GO 77911
78107: POP
78108: POP
// for i in tmp do
78109: LD_ADDR_VAR 0 5
78113: PUSH
78114: LD_VAR 0 7
78118: PUSH
78119: FOR_IN
78120: IFFALSE 78158
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_VAR 0 5
78131: PUSH
78132: LD_INT 1
78134: ARRAY
78135: PPUSH
78136: LD_VAR 0 5
78140: PUSH
78141: LD_INT 2
78143: ARRAY
78144: PPUSH
78145: CALL 77104 0 3
78149: NOT
78150: IFFALSE 78156
// exit ;
78152: POP
78153: POP
78154: GO 78160
78156: GO 78119
78158: POP
78159: POP
// end ;
78160: LD_VAR 0 4
78164: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78165: LD_INT 0
78167: PPUSH
78168: PPUSH
78169: PPUSH
78170: PPUSH
78171: PPUSH
78172: PPUSH
78173: PPUSH
// if not GetClass ( unit ) = class_sniper then
78174: LD_VAR 0 1
78178: PPUSH
78179: CALL_OW 257
78183: PUSH
78184: LD_INT 5
78186: EQUAL
78187: NOT
78188: IFFALSE 78192
// exit ;
78190: GO 78580
// dist := 8 ;
78192: LD_ADDR_VAR 0 5
78196: PUSH
78197: LD_INT 8
78199: ST_TO_ADDR
// viewRange := 12 ;
78200: LD_ADDR_VAR 0 7
78204: PUSH
78205: LD_INT 12
78207: ST_TO_ADDR
// side := GetSide ( unit ) ;
78208: LD_ADDR_VAR 0 6
78212: PUSH
78213: LD_VAR 0 1
78217: PPUSH
78218: CALL_OW 255
78222: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78223: LD_INT 61
78225: PPUSH
78226: LD_VAR 0 6
78230: PPUSH
78231: CALL_OW 321
78235: PUSH
78236: LD_INT 2
78238: EQUAL
78239: IFFALSE 78249
// viewRange := 16 ;
78241: LD_ADDR_VAR 0 7
78245: PUSH
78246: LD_INT 16
78248: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78249: LD_VAR 0 1
78253: PPUSH
78254: LD_VAR 0 2
78258: PPUSH
78259: LD_VAR 0 3
78263: PPUSH
78264: CALL_OW 297
78268: PUSH
78269: LD_VAR 0 5
78273: GREATER
78274: IFFALSE 78353
// begin ComMoveXY ( unit , x , y ) ;
78276: LD_VAR 0 1
78280: PPUSH
78281: LD_VAR 0 2
78285: PPUSH
78286: LD_VAR 0 3
78290: PPUSH
78291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78295: LD_INT 35
78297: PPUSH
78298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78302: LD_VAR 0 1
78306: PPUSH
78307: LD_VAR 0 2
78311: PPUSH
78312: LD_VAR 0 3
78316: PPUSH
78317: CALL 51589 0 3
78321: NOT
78322: IFFALSE 78326
// exit ;
78324: GO 78580
// until GetDistUnitXY ( unit , x , y ) < dist ;
78326: LD_VAR 0 1
78330: PPUSH
78331: LD_VAR 0 2
78335: PPUSH
78336: LD_VAR 0 3
78340: PPUSH
78341: CALL_OW 297
78345: PUSH
78346: LD_VAR 0 5
78350: LESS
78351: IFFALSE 78295
// end ; ComTurnXY ( unit , x , y ) ;
78353: LD_VAR 0 1
78357: PPUSH
78358: LD_VAR 0 2
78362: PPUSH
78363: LD_VAR 0 3
78367: PPUSH
78368: CALL_OW 118
// wait ( 5 ) ;
78372: LD_INT 5
78374: PPUSH
78375: CALL_OW 67
// _d := GetDir ( unit ) ;
78379: LD_ADDR_VAR 0 10
78383: PUSH
78384: LD_VAR 0 1
78388: PPUSH
78389: CALL_OW 254
78393: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78394: LD_ADDR_VAR 0 8
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 250
78408: PPUSH
78409: LD_VAR 0 10
78413: PPUSH
78414: LD_VAR 0 5
78418: PPUSH
78419: CALL_OW 272
78423: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78424: LD_ADDR_VAR 0 9
78428: PUSH
78429: LD_VAR 0 1
78433: PPUSH
78434: CALL_OW 251
78438: PPUSH
78439: LD_VAR 0 10
78443: PPUSH
78444: LD_VAR 0 5
78448: PPUSH
78449: CALL_OW 273
78453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78454: LD_VAR 0 8
78458: PPUSH
78459: LD_VAR 0 9
78463: PPUSH
78464: CALL_OW 488
78468: NOT
78469: IFFALSE 78473
// exit ;
78471: GO 78580
// ComAnimCustom ( unit , 1 ) ;
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_INT 1
78480: PPUSH
78481: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78485: LD_VAR 0 8
78489: PPUSH
78490: LD_VAR 0 9
78494: PPUSH
78495: LD_VAR 0 6
78499: PPUSH
78500: LD_VAR 0 7
78504: PPUSH
78505: CALL_OW 330
// repeat wait ( 1 ) ;
78509: LD_INT 1
78511: PPUSH
78512: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78516: LD_VAR 0 1
78520: PPUSH
78521: CALL_OW 316
78525: PUSH
78526: LD_VAR 0 1
78530: PPUSH
78531: CALL_OW 314
78535: OR
78536: PUSH
78537: LD_VAR 0 1
78541: PPUSH
78542: CALL_OW 302
78546: NOT
78547: OR
78548: PUSH
78549: LD_VAR 0 1
78553: PPUSH
78554: CALL_OW 301
78558: OR
78559: IFFALSE 78509
// RemoveSeeing ( _x , _y , side ) ;
78561: LD_VAR 0 8
78565: PPUSH
78566: LD_VAR 0 9
78570: PPUSH
78571: LD_VAR 0 6
78575: PPUSH
78576: CALL_OW 331
// end ; end_of_file
78580: LD_VAR 0 4
78584: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78585: LD_VAR 0 1
78589: PPUSH
78590: LD_VAR 0 2
78594: PPUSH
78595: LD_VAR 0 3
78599: PPUSH
78600: LD_VAR 0 4
78604: PPUSH
78605: LD_VAR 0 5
78609: PPUSH
78610: LD_VAR 0 6
78614: PPUSH
78615: CALL 58044 0 6
// end ;
78619: PPOPN 6
78621: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78622: LD_INT 0
78624: PPUSH
// begin if not units then
78625: LD_VAR 0 1
78629: NOT
78630: IFFALSE 78634
// exit ;
78632: GO 78634
// end ;
78634: PPOPN 7
78636: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78637: CALL 57931 0 0
// end ; end_of_file
78641: PPOPN 1
78643: END
